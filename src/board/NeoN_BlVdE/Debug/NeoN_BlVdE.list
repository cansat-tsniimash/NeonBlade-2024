
NeoN_BlVdE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015dd4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a38  08015f78  08015f78  00025f78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080169b0  080169b0  00030230  2**0
                  CONTENTS
  4 .ARM          00000008  080169b0  080169b0  000269b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080169b8  080169b8  00030230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080169b8  080169b8  000269b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080169bc  080169bc  000269bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  080169c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004804  20000230  08016bf0  00030230  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a34  08016bf0  00034a34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY
 12 .debug_info   000368c9  00000000  00000000  00030260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057f1  00000000  00000000  00066b29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021e0  00000000  00000000  0006c320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fd0  00000000  00000000  0006e500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f686  00000000  00000000  000704d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027d85  00000000  00000000  0008fb56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9ddf  00000000  00000000  000b78db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001616ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a6c4  00000000  00000000  00161710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000230 	.word	0x20000230
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08015f5c 	.word	0x08015f5c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000234 	.word	0x20000234
 80001dc:	08015f5c 	.word	0x08015f5c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <_write>:
	}
	return crc;
}

int _write (int file, char *ptr, int len)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY); return 0;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	b29a      	uxth	r2, r3
 800100c:	f04f 33ff 	mov.w	r3, #4294967295
 8001010:	68b9      	ldr	r1, [r7, #8]
 8001012:	4804      	ldr	r0, [pc, #16]	; (8001024 <_write+0x28>)
 8001014:	f009 f907 	bl	800a226 <HAL_UART_Transmit>
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20002838 	.word	0x20002838

08001028 <super_smart_write>:
int super_smart_write(unsigned char *buf, unsigned short len, int8_t * state_sd_from_m)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	460b      	mov	r3, r1
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	817b      	strh	r3, [r7, #10]
		static FATFS fileSystem; // переменная типа FATFS
		static FIL testFile; // хендлер файла
		static UINT bw;
		static FRESULT res;
		static int8_t state_sd = 0;
		const char * path = "testFile.bin"; // название файла
 8001036:	4b4d      	ldr	r3, [pc, #308]	; (800116c <super_smart_write+0x144>)
 8001038:	617b      	str	r3, [r7, #20]

		if(state_sd == 0)
 800103a:	4b4d      	ldr	r3, [pc, #308]	; (8001170 <super_smart_write+0x148>)
 800103c:	f993 3000 	ldrsb.w	r3, [r3]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d12a      	bne.n	800109a <super_smart_write+0x72>
		{
			extern Disk_drvTypeDef  disk;
			disk.is_initialized[0] = 0;
 8001044:	4b4b      	ldr	r3, [pc, #300]	; (8001174 <super_smart_write+0x14c>)
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
			memset(&fileSystem, 0x00, sizeof(fileSystem));
 800104a:	f241 0238 	movw	r2, #4152	; 0x1038
 800104e:	2100      	movs	r1, #0
 8001050:	4849      	ldr	r0, [pc, #292]	; (8001178 <super_smart_write+0x150>)
 8001052:	f00e ffe9 	bl	8010028 <memset>
			res = f_mount(&fileSystem, "0", 1);
 8001056:	2201      	movs	r2, #1
 8001058:	4948      	ldr	r1, [pc, #288]	; (800117c <super_smart_write+0x154>)
 800105a:	4847      	ldr	r0, [pc, #284]	; (8001178 <super_smart_write+0x150>)
 800105c:	f00c fc3a 	bl	800d8d4 <f_mount>
 8001060:	4603      	mov	r3, r0
 8001062:	461a      	mov	r2, r3
 8001064:	4b46      	ldr	r3, [pc, #280]	; (8001180 <super_smart_write+0x158>)
 8001066:	701a      	strb	r2, [r3, #0]
			if(res == FR_OK){state_sd = 1; *state_sd_from_m = state_sd;}
 8001068:	4b45      	ldr	r3, [pc, #276]	; (8001180 <super_smart_write+0x158>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d108      	bne.n	8001082 <super_smart_write+0x5a>
 8001070:	4b3f      	ldr	r3, [pc, #252]	; (8001170 <super_smart_write+0x148>)
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
 8001076:	4b3e      	ldr	r3, [pc, #248]	; (8001170 <super_smart_write+0x148>)
 8001078:	f993 2000 	ldrsb.w	r2, [r3]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	701a      	strb	r2, [r3, #0]
 8001080:	e00b      	b.n	800109a <super_smart_write+0x72>
			else
			{
				res = f_mount(0, "0", 1);
 8001082:	2201      	movs	r2, #1
 8001084:	493d      	ldr	r1, [pc, #244]	; (800117c <super_smart_write+0x154>)
 8001086:	2000      	movs	r0, #0
 8001088:	f00c fc24 	bl	800d8d4 <f_mount>
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	4b3b      	ldr	r3, [pc, #236]	; (8001180 <super_smart_write+0x158>)
 8001092:	701a      	strb	r2, [r3, #0]
				return -1;
 8001094:	f04f 33ff 	mov.w	r3, #4294967295
 8001098:	e064      	b.n	8001164 <super_smart_write+0x13c>
			}
		}
		if(state_sd == 1)
 800109a:	4b35      	ldr	r3, [pc, #212]	; (8001170 <super_smart_write+0x148>)
 800109c:	f993 3000 	ldrsb.w	r3, [r3]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d121      	bne.n	80010e8 <super_smart_write+0xc0>
		{
			 *state_sd_from_m = state_sd;
 80010a4:	4b32      	ldr	r3, [pc, #200]	; (8001170 <super_smart_write+0x148>)
 80010a6:	f993 2000 	ldrsb.w	r2, [r3]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	701a      	strb	r2, [r3, #0]
			res = f_open(&testFile, path, FA_WRITE | FA_OPEN_APPEND);
 80010ae:	2232      	movs	r2, #50	; 0x32
 80010b0:	6979      	ldr	r1, [r7, #20]
 80010b2:	4834      	ldr	r0, [pc, #208]	; (8001184 <super_smart_write+0x15c>)
 80010b4:	f00c fc54 	bl	800d960 <f_open>
 80010b8:	4603      	mov	r3, r0
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b30      	ldr	r3, [pc, #192]	; (8001180 <super_smart_write+0x158>)
 80010be:	701a      	strb	r2, [r3, #0]
			if(res == FR_OK) state_sd = 2;
 80010c0:	4b2f      	ldr	r3, [pc, #188]	; (8001180 <super_smart_write+0x158>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d103      	bne.n	80010d0 <super_smart_write+0xa8>
 80010c8:	4b29      	ldr	r3, [pc, #164]	; (8001170 <super_smart_write+0x148>)
 80010ca:	2202      	movs	r2, #2
 80010cc:	701a      	strb	r2, [r3, #0]
 80010ce:	e00b      	b.n	80010e8 <super_smart_write+0xc0>
			else
			{
				state_sd = 0;
 80010d0:	4b27      	ldr	r3, [pc, #156]	; (8001170 <super_smart_write+0x148>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
				res = f_mount(0, "0", 1);
 80010d6:	2201      	movs	r2, #1
 80010d8:	4928      	ldr	r1, [pc, #160]	; (800117c <super_smart_write+0x154>)
 80010da:	2000      	movs	r0, #0
 80010dc:	f00c fbfa 	bl	800d8d4 <f_mount>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	4b26      	ldr	r3, [pc, #152]	; (8001180 <super_smart_write+0x158>)
 80010e6:	701a      	strb	r2, [r3, #0]
			}
		}
		if (state_sd == 2)
 80010e8:	4b21      	ldr	r3, [pc, #132]	; (8001170 <super_smart_write+0x148>)
 80010ea:	f993 3000 	ldrsb.w	r3, [r3]
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d1a1      	bne.n	8001036 <super_smart_write+0xe>
		{
			 *state_sd_from_m = state_sd;
 80010f2:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <super_smart_write+0x148>)
 80010f4:	f993 2000 	ldrsb.w	r2, [r3]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	701a      	strb	r2, [r3, #0]
            res = f_write (&testFile,  (uint8_t *)buf, len, &bw);
 80010fc:	897a      	ldrh	r2, [r7, #10]
 80010fe:	4b22      	ldr	r3, [pc, #136]	; (8001188 <super_smart_write+0x160>)
 8001100:	68f9      	ldr	r1, [r7, #12]
 8001102:	4820      	ldr	r0, [pc, #128]	; (8001184 <super_smart_write+0x15c>)
 8001104:	f00c fdf8 	bl	800dcf8 <f_write>
 8001108:	4603      	mov	r3, r0
 800110a:	461a      	mov	r2, r3
 800110c:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <super_smart_write+0x158>)
 800110e:	701a      	strb	r2, [r3, #0]
            if (HAL_GetTick() - start_time >= 10)
 8001110:	f004 ff0a 	bl	8005f28 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	4b1d      	ldr	r3, [pc, #116]	; (800118c <super_smart_write+0x164>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b09      	cmp	r3, #9
 800111e:	d90b      	bls.n	8001138 <super_smart_write+0x110>
            {
            	res = f_sync(&testFile);
 8001120:	4818      	ldr	r0, [pc, #96]	; (8001184 <super_smart_write+0x15c>)
 8001122:	f00c ff7d 	bl	800e020 <f_sync>
 8001126:	4603      	mov	r3, r0
 8001128:	461a      	mov	r2, r3
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <super_smart_write+0x158>)
 800112c:	701a      	strb	r2, [r3, #0]
                start_time  = HAL_GetTick();
 800112e:	f004 fefb 	bl	8005f28 <HAL_GetTick>
 8001132:	4603      	mov	r3, r0
 8001134:	4a15      	ldr	r2, [pc, #84]	; (800118c <super_smart_write+0x164>)
 8001136:	6013      	str	r3, [r2, #0]
            }
	        if (res == FR_OK) return 0;
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <super_smart_write+0x158>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d101      	bne.n	8001144 <super_smart_write+0x11c>
 8001140:	2300      	movs	r3, #0
 8001142:	e00f      	b.n	8001164 <super_smart_write+0x13c>
            if (res != FR_OK)
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <super_smart_write+0x158>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	f43f af74 	beq.w	8001036 <super_smart_write+0xe>
            {
    			res = f_close(&testFile);
 800114e:	480d      	ldr	r0, [pc, #52]	; (8001184 <super_smart_write+0x15c>)
 8001150:	f00c ffe4 	bl	800e11c <f_close>
 8001154:	4603      	mov	r3, r0
 8001156:	461a      	mov	r2, r3
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <super_smart_write+0x158>)
 800115a:	701a      	strb	r2, [r3, #0]
            	state_sd = 1;
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <super_smart_write+0x148>)
 800115e:	2201      	movs	r2, #1
 8001160:	701a      	strb	r2, [r3, #0]
	{
 8001162:	e768      	b.n	8001036 <super_smart_write+0xe>
            }
		}
	}
}
 8001164:	4618      	mov	r0, r3
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	08015f78 	.word	0x08015f78
 8001170:	2000024c 	.word	0x2000024c
 8001174:	20002340 	.word	0x20002340
 8001178:	20000250 	.word	0x20000250
 800117c:	08015f88 	.word	0x08015f88
 8001180:	20001288 	.word	0x20001288
 8001184:	2000128c 	.word	0x2000128c
 8001188:	200022bc 	.word	0x200022bc
 800118c:	200022c0 	.word	0x200022c0

08001190 <app_main>:
	STATE_FOUND_ME_PLS
}state_t;


int app_main()
{
 8001190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001194:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8001198:	af00      	add	r7, sp, #0
	float lux_sun = 0;
 800119a:	f04f 0300 	mov.w	r3, #0
 800119e:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
	uint32_t start_time_io = HAL_GetTick();
 80011a2:	f004 fec1 	bl	8005f28 <HAL_GetTick>
 80011a6:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
	packet_ma_type_11_t packet_ma_type_11;
	packet_ma_type_12_t packet_ma_type_12 ;
 	packet_ma_type_2_t packet_ma_type_2 ;

	float quaternion[4] = {0};
 80011aa:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
	float seb_time_prev = 0;
 80011b8:	f04f 0300 	mov.w	r3, #0
 80011bc:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
	float seb_time = 0;
 80011c0:	f04f 0300 	mov.w	r3, #0
 80011c4:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    float altitude;
    int fix;
    int64_t cookie;

    photorezistor_t photorezist;
    photorezist.resist = 2000;
 80011c8:	4b8f      	ldr	r3, [pc, #572]	; (8001408 <app_main+0x278>)
 80011ca:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    photorezist.hadc = 	&hadc1;
 80011ce:	4b8f      	ldr	r3, [pc, #572]	; (800140c <app_main+0x27c>)
 80011d0:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174

	int16_t temp_lis;
	int16_t mag[3] = {0};
 80011d4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	809a      	strh	r2, [r3, #4]

	stmdev_ctx_t ctx = {0};
 80011de:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80011e2:	461a      	mov	r2, r3
 80011e4:	2300      	movs	r3, #0
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	6053      	str	r3, [r2, #4]
 80011ea:	6093      	str	r3, [r2, #8]
    struct lis_spi_intf lis_spi;
	lis_spi.GPIO_Port = GPIOA;
 80011ec:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80011f0:	4a87      	ldr	r2, [pc, #540]	; (8001410 <app_main+0x280>)
 80011f2:	601a      	str	r2, [r3, #0]
	lis_spi.GPIO_Pin = GPIO_PIN_4;
 80011f4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80011f8:	2210      	movs	r2, #16
 80011fa:	809a      	strh	r2, [r3, #4]
	lis_spi.spi = &hspi1;
 80011fc:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001200:	4a84      	ldr	r2, [pc, #528]	; (8001414 <app_main+0x284>)
 8001202:	609a      	str	r2, [r3, #8]
	lisset(&ctx, &lis_spi);
 8001204:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8001208:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800120c:	4611      	mov	r1, r2
 800120e:	4618      	mov	r0, r3
 8001210:	f00d fb3e 	bl	800e890 <lisset>


	int16_t temperature_celsius_gyro;
	int16_t acc_g[3];
	int16_t gyro_dps[3];
	stmdev_ctx_t lsmctx = {0};
 8001214:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001218:	461a      	mov	r2, r3
 800121a:	2300      	movs	r3, #0
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	6053      	str	r3, [r2, #4]
 8001220:	6093      	str	r3, [r2, #8]
	struct lsm_spi_intf lsm_spi;
	lsm_spi.GPIO_Port = GPIOC;
 8001222:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001226:	4a7c      	ldr	r2, [pc, #496]	; (8001418 <app_main+0x288>)
 8001228:	601a      	str	r2, [r3, #0]
	lsm_spi.GPIO_Pin = GPIO_PIN_13;
 800122a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800122e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001232:	809a      	strh	r2, [r3, #4]
	lsm_spi.spi = &hspi1;
 8001234:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001238:	4a76      	ldr	r2, [pc, #472]	; (8001414 <app_main+0x284>)
 800123a:	609a      	str	r2, [r3, #8]
	lsmset(&lsmctx, &lsm_spi);
 800123c:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001240:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001244:	4611      	mov	r1, r2
 8001246:	4618      	mov	r0, r3
 8001248:	f00d fe42 	bl	800eed0 <lsmset>
	gps_init();
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
	//__HAL_UART_ENABLE_IT(&huart1, UART_IT_ERR);
    }

    int bmeinit = 10000;
 800124c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001250:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
    bme_important_shit bme_important;//////////////////////////////////BME
    if(BME_FLAG == 1){
    bmeinit = its_bme280_init(UNKNXW);
 8001254:	2000      	movs	r0, #0
 8001256:	f004 fc64 	bl	8005b22 <its_bme280_init>
 800125a:	f8c7 0224 	str.w	r0, [r7, #548]	; 0x224
    }
    uint8_t bme_gnd_cnt = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
    double bme_press_ground = 0;
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	f04f 0300 	mov.w	r3, #0
 800126c:	e9c7 2394 	strd	r2, r3, [r7, #592]	; 0x250
    for(int i = 0; i < 10; i++)
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8001276:	e027      	b.n	80012c8 <app_main+0x138>
    {
    	its_bme280_read(UNKNXW, &bme_important);
 8001278:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800127c:	4619      	mov	r1, r3
 800127e:	2000      	movs	r0, #0
 8001280:	f004 fc96 	bl	8005bb0 <its_bme280_read>
    	if(bme_important.pressure>90000){
 8001284:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001288:	e9d3 0100 	ldrd	r0, r1, [r3]
 800128c:	a35c      	add	r3, pc, #368	; (adr r3, 8001400 <app_main+0x270>)
 800128e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001292:	f7ff fc49 	bl	8000b28 <__aeabi_dcmpgt>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d010      	beq.n	80012be <app_main+0x12e>
    	bme_press_ground += bme_important.pressure;bme_gnd_cnt++;}
 800129c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	; 0x250
 80012a8:	f7fe fff8 	bl	800029c <__adddf3>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	e9c7 2394 	strd	r2, r3, [r7, #592]	; 0x250
 80012b4:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 80012b8:	3301      	adds	r3, #1
 80012ba:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
    for(int i = 0; i < 10; i++)
 80012be:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80012c2:	3301      	adds	r3, #1
 80012c4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80012c8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80012cc:	2b09      	cmp	r3, #9
 80012ce:	ddd3      	ble.n	8001278 <app_main+0xe8>
    }
    bme_press_ground = bme_press_ground/bme_gnd_cnt;
 80012d0:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff f92d 	bl	8000534 <__aeabi_i2d>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	; 0x250
 80012e2:	f7ff fabb 	bl	800085c <__aeabi_ddiv>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	e9c7 2394 	strd	r2, r3, [r7, #592]	; 0x250

    int8_t state_sd = 0;//sd
 80012ee:	f107 03f7 	add.w	r3, r7, #247	; 0xf7
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
    int retin;

    tdc21_all_regs_t tdc21_all_regs;
    //создаем и настраиваем дескриптор тдс21
    tdcgp21_spi_pins_t tdcgp21_spi_pins;
    tdcgp21_spi_pins.ce_pin = 0;
 80012f6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80012fa:	2200      	movs	r2, #0
 80012fc:	809a      	strh	r2, [r3, #4]
    tdcgp21_spi_pins.ce_port = 0;
 80012fe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
    tdcgp21_spi_pins.cs_pin = GPIO_PIN_10;
 8001306:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800130a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800130e:	819a      	strh	r2, [r3, #12]
    tdcgp21_spi_pins.cs_port = GPIOB;
 8001310:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001314:	4a41      	ldr	r2, [pc, #260]	; (800141c <app_main+0x28c>)
 8001316:	609a      	str	r2, [r3, #8]
    tdcgp21_lovver_api_config_t tdcgp21_api_config;
    tdc21_spi_init(&tdcgp21_api_config, &hspi4, &tdcgp21_spi_pins);
 8001318:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800131c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001320:	493f      	ldr	r1, [pc, #252]	; (8001420 <app_main+0x290>)
 8001322:	4618      	mov	r0, r3
 8001324:	f00d f8a6 	bl	800e474 <tdc21_spi_init>
    tdc21_all_regs = tdc21_config(&tdcgp21_api_config);
 8001328:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800132c:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8001330:	4611      	mov	r1, r2
 8001332:	4618      	mov	r0, r3
 8001334:	f00d f8b6 	bl	800e4a4 <tdc21_config>
	tdcgp21_write_register(&tdcgp21_api_config, TDC21_WREG6, (uint8_t*)&r6, 4);*/


	//Создаем и настраиваем дескриптор радиомодуля nRF24L01
	nrf24_spi_pins_t nrf24_spi_pins;
	nrf24_spi_pins.ce_pin = GPIO_PIN_1;
 8001338:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800133c:	2202      	movs	r2, #2
 800133e:	809a      	strh	r2, [r3, #4]
	nrf24_spi_pins.ce_port = GPIOB;
 8001340:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001344:	4a35      	ldr	r2, [pc, #212]	; (800141c <app_main+0x28c>)
 8001346:	601a      	str	r2, [r3, #0]
	nrf24_spi_pins.cs_pin = GPIO_PIN_2;
 8001348:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800134c:	2204      	movs	r2, #4
 800134e:	819a      	strh	r2, [r3, #12]
	nrf24_spi_pins.cs_port = GPIOB;
 8001350:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001354:	4a31      	ldr	r2, [pc, #196]	; (800141c <app_main+0x28c>)
 8001356:	609a      	str	r2, [r3, #8]
	nrf24_lower_api_config_t nrf24_api_config;
	nrf24_spi_init(&nrf24_api_config, &hspi5, &nrf24_spi_pins);
 8001358:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800135c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001360:	4930      	ldr	r1, [pc, #192]	; (8001424 <app_main+0x294>)
 8001362:	4618      	mov	r0, r3
 8001364:	f00e facc 	bl	800f900 <nrf24_spi_init>

	//Перед настройкой регистров радио переводим его в standby mode
	//nrf24_mode_standby(&nrf24_api_config);
	nrf24_mode_power_down(&nrf24_api_config);
 8001368:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800136c:	4618      	mov	r0, r3
 800136e:	f00e fcc4 	bl	800fcfa <nrf24_mode_power_down>

	// Настраиваем параметры радиопередачи
	nrf24_rf_config_t nrf24_rf_config;
	nrf24_rf_config.data_rate = NRF24_DATARATE_250_KBIT;
 8001372:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]
	nrf24_rf_config.rf_channel = 110;
 800137a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800137e:	226e      	movs	r2, #110	; 0x6e
 8001380:	709a      	strb	r2, [r3, #2]
	nrf24_rf_config.tx_power = NRF24_TXPOWER_MINUS_18_DBM;
 8001382:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001386:	2200      	movs	r2, #0
 8001388:	705a      	strb	r2, [r3, #1]
	nrf24_setup_rf(&nrf24_api_config, &nrf24_rf_config);
 800138a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800138e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001392:	4611      	mov	r1, r2
 8001394:	4618      	mov	r0, r3
 8001396:	f00e facf 	bl	800f938 <nrf24_setup_rf>

	// Настраиваем протокол радиопередачи
	nrf24_protocol_config_t nrf24_protocol_config;
	nrf24_protocol_config.address_width = NRF24_ADDRES_WIDTH_5_BYTES;
 800139a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800139e:	2203      	movs	r2, #3
 80013a0:	705a      	strb	r2, [r3, #1]
	nrf24_protocol_config.auto_retransmit_count = 0;
 80013a2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80013a6:	2200      	movs	r2, #0
 80013a8:	715a      	strb	r2, [r3, #5]
	nrf24_protocol_config.auto_retransmit_delay = 0;
 80013aa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80013ae:	2200      	movs	r2, #0
 80013b0:	719a      	strb	r2, [r3, #6]
	nrf24_protocol_config.crc_size = NRF24_CRCSIZE_1BYTE;
 80013b2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]
	nrf24_protocol_config.en_ack_payload = false;/// НАДО тру
 80013ba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80013be:	2200      	movs	r2, #0
 80013c0:	70da      	strb	r2, [r3, #3]
	nrf24_protocol_config.en_dyn_ack = false;//НАДО фалс
 80013c2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80013c6:	2200      	movs	r2, #0
 80013c8:	711a      	strb	r2, [r3, #4]
	nrf24_protocol_config.en_dyn_payload_size = true;//НАДО ФАЛС
 80013ca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80013ce:	2201      	movs	r2, #1
 80013d0:	709a      	strb	r2, [r3, #2]
	nrf24_setup_protocol(&nrf24_api_config, &nrf24_protocol_config);
 80013d2:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80013d6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013da:	4611      	mov	r1, r2
 80013dc:	4618      	mov	r0, r3
 80013de:	f00e fb0d 	bl	800f9fc <nrf24_setup_protocol>
	nrf24_pipe_set_tx_addr(&nrf24_api_config, 0xacacacacac);
 80013e2:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 80013e6:	f04f 32ac 	mov.w	r2, #2896997548	; 0xacacacac
 80013ea:	f04f 03ac 	mov.w	r3, #172	; 0xac
 80013ee:	4608      	mov	r0, r1
 80013f0:	f00e fc72 	bl	800fcd8 <nrf24_pipe_set_tx_addr>


	nrf24_pipe_config_t pipe_config;
	for (int i = 1; i < 6; i++)
 80013f4:	2301      	movs	r3, #1
 80013f6:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80013fa:	e054      	b.n	80014a6 <app_main+0x316>
 80013fc:	f3af 8000 	nop.w
 8001400:	00000000 	.word	0x00000000
 8001404:	40f5f900 	.word	0x40f5f900
 8001408:	44fa0000 	.word	0x44fa0000
 800140c:	200027f0 	.word	0x200027f0
 8001410:	40020000 	.word	0x40020000
 8001414:	20002958 	.word	0x20002958
 8001418:	40020800 	.word	0x40020800
 800141c:	40020400 	.word	0x40020400
 8001420:	2000287c 	.word	0x2000287c
 8001424:	20002744 	.word	0x20002744
	{
		pipe_config.address = 0xacacacacac;
 8001428:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800142c:	f04f 32ac 	mov.w	r2, #2896997548	; 0xacacacac
 8001430:	f04f 03ac 	mov.w	r3, #172	; 0xac
 8001434:	e9c1 2302 	strd	r2, r3, [r1, #8]
		pipe_config.address = (pipe_config.address & ~((uint64_t)0xff << 32)) | ((uint64_t)(i + 7) << 32);
 8001438:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800143c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
 8001444:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8001448:	ea02 0400 	and.w	r4, r2, r0
 800144c:	ea03 0501 	and.w	r5, r3, r1
 8001450:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8001454:	3307      	adds	r3, #7
 8001456:	4618      	mov	r0, r3
 8001458:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	f04f 0300 	mov.w	r3, #0
 8001464:	0003      	movs	r3, r0
 8001466:	2200      	movs	r2, #0
 8001468:	ea44 0802 	orr.w	r8, r4, r2
 800146c:	ea45 0903 	orr.w	r9, r5, r3
 8001470:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001474:	e9c3 8902 	strd	r8, r9, [r3, #8]
		pipe_config.enable_auto_ack = false;
 8001478:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
		pipe_config.payload_size = -1;
 8001480:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001484:	22ff      	movs	r2, #255	; 0xff
 8001486:	741a      	strb	r2, [r3, #16]
		nrf24_pipe_rx_start(&nrf24_api_config, i, &pipe_config);
 8001488:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800148c:	b2d9      	uxtb	r1, r3
 800148e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001492:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001496:	4618      	mov	r0, r3
 8001498:	f00e fb34 	bl	800fb04 <nrf24_pipe_rx_start>
	for (int i = 1; i < 6; i++)
 800149c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80014a0:	3301      	adds	r3, #1
 80014a2:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80014a6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80014aa:	2b05      	cmp	r3, #5
 80014ac:	ddbc      	ble.n	8001428 <app_main+0x298>
	}

	pipe_config.address = 0xafafafaf01;
 80014ae:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80014b2:	4a45      	ldr	r2, [pc, #276]	; (80015c8 <app_main+0x438>)
 80014b4:	f04f 03af 	mov.w	r3, #175	; 0xaf
 80014b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	pipe_config.enable_auto_ack = false;
 80014bc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
	pipe_config.payload_size = -1;
 80014c4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80014c8:	22ff      	movs	r2, #255	; 0xff
 80014ca:	741a      	strb	r2, [r3, #16]
	nrf24_pipe_rx_start(&nrf24_api_config, 0, &pipe_config);
 80014cc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80014d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f00e fb14 	bl	800fb04 <nrf24_pipe_rx_start>

	nrf24_mode_standby(&nrf24_api_config);
 80014dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014e0:	4618      	mov	r0, r3
 80014e2:	f00e fc28 	bl	800fd36 <nrf24_mode_standby>
	nrf24_mode_tx(&nrf24_api_config);
 80014e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014ea:	4618      	mov	r0, r3
 80014ec:	f00e fc45 	bl	800fd7a <nrf24_mode_tx>




	uint8_t rx_buffer[32] = {0};
 80014f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	3304      	adds	r3, #4
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	611a      	str	r2, [r3, #16]
 8001506:	615a      	str	r2, [r3, #20]
 8001508:	619a      	str	r2, [r3, #24]
	uint8_t tx_buffer[32] = {0};
 800150a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	3304      	adds	r3, #4
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
 8001520:	615a      	str	r2, [r3, #20]
 8001522:	619a      	str	r2, [r3, #24]
	nrf24_fifo_status_t rx_status = 2;
 8001524:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8001528:	2202      	movs	r2, #2
 800152a:	701a      	strb	r2, [r3, #0]
    nrf24_fifo_status_t tx_status = 2;
 800152c:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8001530:	2202      	movs	r2, #2
 8001532:	701a      	strb	r2, [r3, #0]

    int errrrrrrrrr, radio_read_err;//
	int IRQ_flags;///////////////////переменные для отладки радио
    bool radio_flag;////////////////
 	int irq_err = 10;//////////////
 8001534:	230a      	movs	r3, #10
 8001536:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 	int size_in_tx = 0;///////////
 800153a:	2300      	movs	r3, #0
 800153c:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 	float time_for_madgwik = 0;
 8001540:	f04f 0300 	mov.w	r3, #0
 8001544:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 	for(int i = 0; i < 10; i++)
 		packet_ma_type_12.null[i] = 0;
 	for(int i = 0; i < 3; i++)
 		packet_ma_type_2.nulll[i] = 0;*/
 	uint8_t data_nrf_tx_ds;
 	int num1 = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 	int num2 = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 	int time_on_board = 0;//время на борте
 8001554:	2300      	movs	r3, #0
 8001556:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    float lux;


    state_t fckng_state = STATE_ON_GND;
 800155a:	2300      	movs	r3, #0
 800155c:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
    uint32_t start_time_to;

    uint32_t time_parashute = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

    float LSM_TEMP = 0;
 8001566:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
    float accc[3] = {0};
 8001570:	f107 0320 	add.w	r3, r7, #32
 8001574:	461a      	mov	r2, r3
 8001576:	2300      	movs	r3, #0
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	6053      	str	r3, [r2, #4]
 800157c:	6093      	str	r3, [r2, #8]
    float gyrooo[3] = {0};
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	461a      	mov	r2, r3
 8001584:	2300      	movs	r3, #0
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	6053      	str	r3, [r2, #4]
 800158a:	6093      	str	r3, [r2, #8]
    float magfloat[3] = {0};
 800158c:	f107 0308 	add.w	r3, r7, #8
 8001590:	461a      	mov	r2, r3
 8001592:	2300      	movs	r3, #0
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	6053      	str	r3, [r2, #4]
 8001598:	6093      	str	r3, [r2, #8]
    float temp_lis_float;

    bool impulse = false;
 800159a:	2300      	movs	r3, #0
 800159c:	f887 3236 	strb.w	r3, [r7, #566]	; 0x236
 	while(true)
	{
 		HAL_Delay(150);
 80015a0:	2096      	movs	r0, #150	; 0x96
 80015a2:	f004 fccd 	bl	8005f40 <HAL_Delay>
 		if(impulse == false)
 80015a6:	f897 3236 	ldrb.w	r3, [r7, #566]	; 0x236
 80015aa:	f083 0301 	eor.w	r3, r3, #1
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d00d      	beq.n	80015d0 <app_main+0x440>
 		{
 			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 80015b4:	2201      	movs	r2, #1
 80015b6:	2108      	movs	r1, #8
 80015b8:	4804      	ldr	r0, [pc, #16]	; (80015cc <app_main+0x43c>)
 80015ba:	f005 fc69 	bl	8006e90 <HAL_GPIO_WritePin>
 			impulse = true;
 80015be:	2301      	movs	r3, #1
 80015c0:	f887 3236 	strb.w	r3, [r7, #566]	; 0x236
 80015c4:	e00c      	b.n	80015e0 <app_main+0x450>
 80015c6:	bf00      	nop
 80015c8:	afafaf01 	.word	0xafafaf01
 80015cc:	40020000 	.word	0x40020000
 		}
 		else
 		{
 			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2108      	movs	r1, #8
 80015d4:	48ee      	ldr	r0, [pc, #952]	; (8001990 <app_main+0x800>)
 80015d6:	f005 fc5b 	bl	8006e90 <HAL_GPIO_WritePin>
 			impulse = false;
 80015da:	2300      	movs	r3, #0
 80015dc:	f887 3236 	strb.w	r3, [r7, #566]	; 0x236
 		}
 		packet_ma_type_11.flag = 0xFF;
 80015e0:	23ff      	movs	r3, #255	; 0xff
 80015e2:	f887 31e0 	strb.w	r3, [r7, #480]	; 0x1e0
 		packet_ma_type_12.flag = 0xFA;
 80015e6:	23fa      	movs	r3, #250	; 0xfa
 80015e8:	f887 31c0 	strb.w	r3, [r7, #448]	; 0x1c0
 		packet_ma_type_2.flag = 0xAA;
 80015ec:	23aa      	movs	r3, #170	; 0xaa
 80015ee:	f887 31a0 	strb.w	r3, [r7, #416]	; 0x1a0
 		packet_ma_type_11.time = time_on_board;
 80015f2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80015f6:	f8c7 31e3 	str.w	r3, [r7, #483]	; 0x1e3
 		packet_ma_type_12.time = time_on_board;
 80015fa:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80015fe:	f8c7 31c3 	str.w	r3, [r7, #451]	; 0x1c3
 		packet_ma_type_2.time = time_on_board;
 8001602:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001606:	f8c7 31a3 	str.w	r3, [r7, #419]	; 0x1a3
		packet_ma_type_11.num = num1;
 800160a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800160e:	b29b      	uxth	r3, r3
 8001610:	f8a7 31e1 	strh.w	r3, [r7, #481]	; 0x1e1
		packet_ma_type_12.num = num1;
 8001614:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8001618:	b29b      	uxth	r3, r3
 800161a:	f8a7 31c1 	strh.w	r3, [r7, #449]	; 0x1c1
		packet_ma_type_2.num = num2;
 800161e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8001622:	b29b      	uxth	r3, r3
 8001624:	f8a7 31a1 	strh.w	r3, [r7, #417]	; 0x1a1
    	num1++;
 8001628:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800162c:	3301      	adds	r3, #1
 800162e:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
    	num2++;
 8001632:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8001636:	3301      	adds	r3, #1
 8001638:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    	lux = photorezistor_get_lux(photorezist);
 800163c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001640:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001644:	f00d fef0 	bl	800f428 <photorezistor_get_lux>
 8001648:	ed87 0a84 	vstr	s0, [r7, #528]	; 0x210
    		time_on_board = HAL_GetTick();
 800164c:	f004 fc6c 	bl	8005f28 <HAL_GetTick>
 8001650:	4603      	mov	r3, r0
 8001652:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		retin = lis3mdl_read_reg(&ctx, 0x0F , (uint8_t *) &abobus, 6);
 8001656:	f107 02f6 	add.w	r2, r7, #246	; 0xf6
 800165a:	f507 70ae 	add.w	r0, r7, #348	; 0x15c
 800165e:	2306      	movs	r3, #6
 8001660:	210f      	movs	r1, #15
 8001662:	f00d f993 	bl	800e98c <lis3mdl_read_reg>
 8001666:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
 			//HAL_Delay(5);
		}

		if(SD_FLAG)
		{
			super_smart_write((uint8_t *)&packet_ma_type_11, 32, &state_sd);
 800166a:	f107 02f7 	add.w	r2, r7, #247	; 0xf7
 800166e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001672:	2120      	movs	r1, #32
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fcd7 	bl	8001028 <super_smart_write>
			super_smart_write((uint8_t *)&packet_ma_type_12, 32, &state_sd);
 800167a:	f107 02f7 	add.w	r2, r7, #247	; 0xf7
 800167e:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001682:	2120      	movs	r1, #32
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fccf 	bl	8001028 <super_smart_write>
			super_smart_write((uint8_t *)&packet_ma_type_2, 32, &state_sd);
 800168a:	f107 02f7 	add.w	r2, r7, #247	; 0xf7
 800168e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001692:	2120      	movs	r1, #32
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff fcc7 	bl	8001028 <super_smart_write>
			//printf("%f %f %f           %ld\n", (double)latitude, (double)lontitude, (double)altitude, fix);
		}

		if (LSM_FLAG)
		{
			lsmread(&lsmctx, &LSM_TEMP, &accc, &gyrooo);
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	f107 0220 	add.w	r2, r7, #32
 80016a2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80016a6:	f507 709a 	add.w	r0, r7, #308	; 0x134
 80016aa:	f00d fc47 	bl	800ef3c <lsmread>
			lsm6ds3_temperature_raw_get(&lsmctx, &temperature_celsius_gyro);//ЗАПРОС СЫРЫХ ДАННЫХ
 80016ae:	f507 72a7 	add.w	r2, r7, #334	; 0x14e
 80016b2:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f00d fdc5 	bl	800f248 <lsm6ds3_temperature_raw_get>
 			lsm6ds3_acceleration_raw_get(&lsmctx, acc_g);
 80016be:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80016c2:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80016c6:	4611      	mov	r1, r2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f00d fe2b 	bl	800f324 <lsm6ds3_acceleration_raw_get>
			lsm6ds3_angular_rate_raw_get(&lsmctx, gyro_dps);
 80016ce:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80016d2:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80016d6:	4611      	mov	r1, r2
 80016d8:	4618      	mov	r0, r3
 80016da:	f00d fdd8 	bl	800f28e <lsm6ds3_angular_rate_raw_get>
			packet_ma_type_2.acc_mg[0] = acc_g[0];
 80016de:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80016e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e6:	f8a7 31a7 	strh.w	r3, [r7, #423]	; 0x1a7
			packet_ma_type_2.acc_mg[1] = acc_g[1];
 80016ea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80016ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016f2:	f8a7 31a9 	strh.w	r3, [r7, #425]	; 0x1a9
			packet_ma_type_2.acc_mg[2] = acc_g[2];
 80016f6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80016fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016fe:	f8a7 31ab 	strh.w	r3, [r7, #427]	; 0x1ab
			/*gyro_dps[0]-=0,48461538;
			gyro_dps[1]+=3,45999986923;
			gyro_dps[2]+=2,561433749;*/
			packet_ma_type_2.gyro_mdps[0] = gyro_dps[0];
 8001702:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001706:	f9b3 3000 	ldrsh.w	r3, [r3]
 800170a:	f8a7 31ad 	strh.w	r3, [r7, #429]	; 0x1ad
			packet_ma_type_2.gyro_mdps[1] = gyro_dps[1];
 800170e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001712:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001716:	f8a7 31af 	strh.w	r3, [r7, #431]	; 0x1af
			packet_ma_type_2.gyro_mdps[2] = gyro_dps[2];
 800171a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800171e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001722:	f8a7 31b1 	strh.w	r3, [r7, #433]	; 0x1b1
			}

		if (LIS_FLAG)
		{
			lisread(&ctx, &temp_lis_float, &magfloat);
 8001726:	f107 0208 	add.w	r2, r7, #8
 800172a:	1d39      	adds	r1, r7, #4
 800172c:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8001730:	4618      	mov	r0, r3
 8001732:	f00d f8ef 	bl	800e914 <lisread>
			lis3mdl_magnetic_raw_get(&ctx, mag);
 8001736:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 800173a:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800173e:	4611      	mov	r1, r2
 8001740:	4618      	mov	r0, r3
 8001742:	f00d fa8b 	bl	800ec5c <lis3mdl_magnetic_raw_get>
			//lis3mdl_temperature_raw_get(&ctx, &temp_lis);//ЗАПРОС СЫРЫХ ДАННЫХ
			packet_ma_type_2.LIS3MDL_magnetometer[0] = mag[0];
 8001746:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800174a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800174e:	f8a7 31b3 	strh.w	r3, [r7, #435]	; 0x1b3
			packet_ma_type_2.LIS3MDL_magnetometer[1] = mag[1];
 8001752:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001756:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800175a:	f8a7 31b5 	strh.w	r3, [r7, #437]	; 0x1b5
			packet_ma_type_2.LIS3MDL_magnetometer[2] = mag[2];
 800175e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001762:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001766:	f8a7 31b7 	strh.w	r3, [r7, #439]	; 0x1b7

		}

		if(BME_FLAG == 1)
		{
			its_bme280_read(UNKNXW, &bme_important);
 800176a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800176e:	4619      	mov	r1, r3
 8001770:	2000      	movs	r0, #0
 8001772:	f004 fa1d 	bl	8005bb0 <its_bme280_read>
			packet_ma_type_11.BME280_pressure = bme_important.pressure;
 8001776:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800177a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177e:	f207 11e7 	addw	r1, r7, #487	; 0x1e7
 8001782:	600a      	str	r2, [r1, #0]
 8001784:	604b      	str	r3, [r1, #4]
			packet_ma_type_11.BME280_temperature = (float)bme_important.temperature;
 8001786:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800178a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800178e:	4610      	mov	r0, r2
 8001790:	4619      	mov	r1, r3
 8001792:	f7ff fa31 	bl	8000bf8 <__aeabi_d2f>
 8001796:	4603      	mov	r3, r0
 8001798:	f8c7 31ef 	str.w	r3, [r7, #495]	; 0x1ef
			packet_ma_type_11.height_bme = 44330.0*(1.0 - pow((float)packet_ma_type_11.BME280_pressure/bme_press_ground, 1.0/5.255));
 800179c:	f8d7 21e7 	ldr.w	r2, [r7, #487]	; 0x1e7
 80017a0:	f8d7 31eb 	ldr.w	r3, [r7, #491]	; 0x1eb
 80017a4:	4610      	mov	r0, r2
 80017a6:	4619      	mov	r1, r3
 80017a8:	f7ff fa26 	bl	8000bf8 <__aeabi_d2f>
 80017ac:	4603      	mov	r3, r0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7fe fed2 	bl	8000558 <__aeabi_f2d>
 80017b4:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 80017b8:	f7ff f850 	bl	800085c <__aeabi_ddiv>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	ec43 2b17 	vmov	d7, r2, r3
 80017c4:	ed9f 1b6a 	vldr	d1, [pc, #424]	; 8001970 <app_main+0x7e0>
 80017c8:	eeb0 0a47 	vmov.f32	s0, s14
 80017cc:	eef0 0a67 	vmov.f32	s1, s15
 80017d0:	f013 f8ae 	bl	8014930 <pow>
 80017d4:	ec53 2b10 	vmov	r2, r3, d0
 80017d8:	f04f 0000 	mov.w	r0, #0
 80017dc:	496d      	ldr	r1, [pc, #436]	; (8001994 <app_main+0x804>)
 80017de:	f7fe fd5b 	bl	8000298 <__aeabi_dsub>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	a363      	add	r3, pc, #396	; (adr r3, 8001978 <app_main+0x7e8>)
 80017ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f0:	f7fe ff0a 	bl	8000608 <__aeabi_dmul>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	f207 11f3 	addw	r1, r7, #499	; 0x1f3
 80017fc:	600a      	str	r2, [r1, #0]
 80017fe:	604b      	str	r3, [r1, #4]
		}

		seb_time = HAL_GetTick();
 8001800:	f004 fb92 	bl	8005f28 <HAL_GetTick>
 8001804:	ee07 0a90 	vmov	s15, r0
 8001808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800180c:	edc7 7a8a 	vstr	s15, [r7, #552]	; 0x228
		//printf("mX = %f\tmY = %f\tmZ = %f\n", (double)-1* mag[0], (double) -1 * mag[1], (double)mag[2]);
		MadgwickAHRSupdate(quaternion, gyro_dps[0] * 3.1415 / 180, gyro_dps[1] * 3.1415 / 180, gyro_dps[2] * 3.1415 / 180,  acc_g[0] *9.81, acc_g[1] *9.81, acc_g[2] *9.81, -1* mag[0], -1 * mag[1], mag[2], (seb_time - seb_time_prev) / 1000.0, 0.3);
 8001810:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001818:	4618      	mov	r0, r3
 800181a:	f7fe fe8b 	bl	8000534 <__aeabi_i2d>
 800181e:	a358      	add	r3, pc, #352	; (adr r3, 8001980 <app_main+0x7f0>)
 8001820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001824:	f7fe fef0 	bl	8000608 <__aeabi_dmul>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4610      	mov	r0, r2
 800182e:	4619      	mov	r1, r3
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	4b58      	ldr	r3, [pc, #352]	; (8001998 <app_main+0x808>)
 8001836:	f7ff f811 	bl	800085c <__aeabi_ddiv>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	f7ff f9d9 	bl	8000bf8 <__aeabi_d2f>
 8001846:	4604      	mov	r4, r0
 8001848:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800184c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe fe6f 	bl	8000534 <__aeabi_i2d>
 8001856:	a34a      	add	r3, pc, #296	; (adr r3, 8001980 <app_main+0x7f0>)
 8001858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185c:	f7fe fed4 	bl	8000608 <__aeabi_dmul>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	f04f 0200 	mov.w	r2, #0
 800186c:	4b4a      	ldr	r3, [pc, #296]	; (8001998 <app_main+0x808>)
 800186e:	f7fe fff5 	bl	800085c <__aeabi_ddiv>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4610      	mov	r0, r2
 8001878:	4619      	mov	r1, r3
 800187a:	f7ff f9bd 	bl	8000bf8 <__aeabi_d2f>
 800187e:	4605      	mov	r5, r0
 8001880:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001884:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fe53 	bl	8000534 <__aeabi_i2d>
 800188e:	a33c      	add	r3, pc, #240	; (adr r3, 8001980 <app_main+0x7f0>)
 8001890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001894:	f7fe feb8 	bl	8000608 <__aeabi_dmul>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4610      	mov	r0, r2
 800189e:	4619      	mov	r1, r3
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	4b3c      	ldr	r3, [pc, #240]	; (8001998 <app_main+0x808>)
 80018a6:	f7fe ffd9 	bl	800085c <__aeabi_ddiv>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	f7ff f9a1 	bl	8000bf8 <__aeabi_d2f>
 80018b6:	4606      	mov	r6, r0
 80018b8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80018bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fe37 	bl	8000534 <__aeabi_i2d>
 80018c6:	a330      	add	r3, pc, #192	; (adr r3, 8001988 <app_main+0x7f8>)
 80018c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018cc:	f7fe fe9c 	bl	8000608 <__aeabi_dmul>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4610      	mov	r0, r2
 80018d6:	4619      	mov	r1, r3
 80018d8:	f7ff f98e 	bl	8000bf8 <__aeabi_d2f>
 80018dc:	4680      	mov	r8, r0
 80018de:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80018e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fe24 	bl	8000534 <__aeabi_i2d>
 80018ec:	a326      	add	r3, pc, #152	; (adr r3, 8001988 <app_main+0x7f8>)
 80018ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f2:	f7fe fe89 	bl	8000608 <__aeabi_dmul>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4610      	mov	r0, r2
 80018fc:	4619      	mov	r1, r3
 80018fe:	f7ff f97b 	bl	8000bf8 <__aeabi_d2f>
 8001902:	4681      	mov	r9, r0
 8001904:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001908:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800190c:	4618      	mov	r0, r3
 800190e:	f7fe fe11 	bl	8000534 <__aeabi_i2d>
 8001912:	a31d      	add	r3, pc, #116	; (adr r3, 8001988 <app_main+0x7f8>)
 8001914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001918:	f7fe fe76 	bl	8000608 <__aeabi_dmul>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4610      	mov	r0, r2
 8001922:	4619      	mov	r1, r3
 8001924:	f7ff f968 	bl	8000bf8 <__aeabi_d2f>
 8001928:	4602      	mov	r2, r0
 800192a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800192e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001932:	425b      	negs	r3, r3
 8001934:	ee07 3a90 	vmov	s15, r3
 8001938:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800193c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001940:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001944:	425b      	negs	r3, r3
 8001946:	ee07 3a90 	vmov	s15, r3
 800194a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800194e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001952:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001956:	ee07 3a90 	vmov	s15, r3
 800195a:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800195e:	ed97 7a8a 	vldr	s14, [r7, #552]	; 0x228
 8001962:	edd7 7a97 	vldr	s15, [r7, #604]	; 0x25c
 8001966:	ee77 7a67 	vsub.f32	s15, s14, s15
 800196a:	e01b      	b.n	80019a4 <app_main+0x814>
 800196c:	f3af 8000 	nop.w
 8001970:	ccd9456c 	.word	0xccd9456c
 8001974:	3fc85b95 	.word	0x3fc85b95
 8001978:	00000000 	.word	0x00000000
 800197c:	40e5a540 	.word	0x40e5a540
 8001980:	c083126f 	.word	0xc083126f
 8001984:	400921ca 	.word	0x400921ca
 8001988:	51eb851f 	.word	0x51eb851f
 800198c:	40239eb8 	.word	0x40239eb8
 8001990:	40020000 	.word	0x40020000
 8001994:	3ff00000 	.word	0x3ff00000
 8001998:	40668000 	.word	0x40668000
 800199c:	447a0000 	.word	0x447a0000
 80019a0:	3e99999a 	.word	0x3e99999a
 80019a4:	ed1f 5a03 	vldr	s10, [pc, #-12]	; 800199c <app_main+0x80c>
 80019a8:	ee87 7a85 	vdiv.f32	s14, s15, s10
 80019ac:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80019b0:	ed1f 5a05 	vldr	s10, [pc, #-20]	; 80019a0 <app_main+0x810>
 80019b4:	eef0 4a47 	vmov.f32	s9, s14
 80019b8:	eeb0 4a65 	vmov.f32	s8, s11
 80019bc:	eef0 3a46 	vmov.f32	s7, s12
 80019c0:	eeb0 3a66 	vmov.f32	s6, s13
 80019c4:	ee02 2a90 	vmov	s5, r2
 80019c8:	ee02 9a10 	vmov	s4, r9
 80019cc:	ee01 8a90 	vmov	s3, r8
 80019d0:	ee01 6a10 	vmov	s2, r6
 80019d4:	ee00 5a90 	vmov	s1, r5
 80019d8:	ee00 4a10 	vmov	s0, r4
 80019dc:	4618      	mov	r0, r3
 80019de:	f000 f9fd 	bl	8001ddc <MadgwickAHRSupdate>
		seb_time_prev = seb_time;
 80019e2:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80019e6:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
		//MadgwickAHRSupdateIMU(quaternion, gyro_dps[0], gyro_dps[1], gyro_dps[2],  acc_g[0] *9.81, acc_g[1] *9.81, acc_g[2] *9.81, HAL_GetTick() - seb_delta, 0.3);
		time_for_madgwik = (HAL_GetTick() )/1000.0;
 80019ea:	f004 fa9d 	bl	8005f28 <HAL_GetTick>
 80019ee:	4603      	mov	r3, r0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fd8f 	bl	8000514 <__aeabi_ui2d>
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	4be1      	ldr	r3, [pc, #900]	; (8001d80 <app_main+0xbf0>)
 80019fc:	f7fe ff2e 	bl	800085c <__aeabi_ddiv>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4610      	mov	r0, r2
 8001a06:	4619      	mov	r1, r3
 8001a08:	f7ff f8f6 	bl	8000bf8 <__aeabi_d2f>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218

		time_prnt = HAL_GetTick() - time_prnt;
		printf("принт:  %ld\n", time_prnt);
		seb_delta = HAL_GetTick();*/

		nrf24_mode_tx(&nrf24_api_config);
 8001a12:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a16:	4618      	mov	r0, r3
 8001a18:	f00e f9af 	bl	800fd7a <nrf24_mode_tx>


        if(NRF_FLAG)
        {
        	//nrf24_fifo_status(&nrf24_api_config, &rx_status, &tx_status);
			nrf24_fifo_flush_tx(&nrf24_api_config);
 8001a1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a20:	4618      	mov	r0, r3
 8001a22:	f00e fa4f 	bl	800fec4 <nrf24_fifo_flush_tx>
			errrrrrrrrr = nrf24_irq_clear(&nrf24_api_config, IRQ_flags);
 8001a26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a30:	4611      	mov	r1, r2
 8001a32:	4618      	mov	r0, r3
 8001a34:	f00e fa77 	bl	800ff26 <nrf24_irq_clear>
 8001a38:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208
			//nrf24_irq_get(&nrf24_api_config, &IRQ_flags);
			//nrf24_fifo_status(&nrf24_api_config, &rx_status, &tx_status);
			//nrf24_irq_get(&nrf24_api_config, &IRQ_flags);

			size_in_tx = nrf24_fifo_write(&nrf24_api_config, (uint8_t *)&packet_ma_type_11, 32, false);// sizeof(packet_ma_type_1)
 8001a3c:	f507 71f0 	add.w	r1, r7, #480	; 0x1e0
 8001a40:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 8001a44:	2300      	movs	r3, #0
 8001a46:	2220      	movs	r2, #32
 8001a48:	f00e fa16 	bl	800fe78 <nrf24_fifo_write>
 8001a4c:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
			//HAL_Delay(50);
			size_in_tx = nrf24_fifo_write(&nrf24_api_config, (uint8_t *)&packet_ma_type_12, 32, false);
 8001a50:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
 8001a54:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 8001a58:	2300      	movs	r3, #0
 8001a5a:	2220      	movs	r2, #32
 8001a5c:	f00e fa0c 	bl	800fe78 <nrf24_fifo_write>
 8001a60:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
			//HAL_Delay(50);
			size_in_tx = nrf24_fifo_write(&nrf24_api_config, (uint8_t *)&packet_ma_type_2, 32, false);
 8001a64:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 8001a68:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	2220      	movs	r2, #32
 8001a70:	f00e fa02 	bl	800fe78 <nrf24_fifo_write>
 8001a74:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
			//HAL_Delay(50);
			//nrf24_read_register(&nrf24_api_config, NRF24_REGADDR_STATUS, &data_nrf_tx_ds, sizeof(data_nrf_tx_ds));

			nrf24_fifo_status(&nrf24_api_config, &rx_status, &tx_status);
 8001a78:	f107 0236 	add.w	r2, r7, #54	; 0x36
 8001a7c:	f107 0137 	add.w	r1, r7, #55	; 0x37
 8001a80:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a84:	4618      	mov	r0, r3
 8001a86:	f00e f99a 	bl	800fdbe <nrf24_fifo_status>
			//nrf24_mode_standby(&nrf24_api_config);


			//nrf24_dump_registers(&nrf24_api_config);

			nrf24_fifo_status(&nrf24_api_config, &rx_status, &tx_status);
 8001a8a:	f107 0236 	add.w	r2, r7, #54	; 0x36
 8001a8e:	f107 0137 	add.w	r1, r7, #55	; 0x37
 8001a92:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a96:	4618      	mov	r0, r3
 8001a98:	f00e f991 	bl	800fdbe <nrf24_fifo_status>
			nrf24_irq_get(&nrf24_api_config, &IRQ_flags);
 8001a9c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001aa0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001aa4:	4611      	mov	r1, r2
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f00e fa24 	bl	800fef4 <nrf24_irq_get>


						if (rx_status != NRF24_FIFO_EMPTY)
 8001aac:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d02e      	beq.n	8001b14 <app_main+0x984>
						{
							radio_read_err = nrf24_fifo_read(&nrf24_api_config, rx_buffer, 32);
 8001ab6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001aba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001abe:	2220      	movs	r2, #32
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f00e f9bc 	bl	800fe3e <nrf24_fifo_read>
 8001ac6:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
							//HAL_GPIO_WritePin(GPIOC , GPIO_PIN_13, GPIO_PIN_RESET);
							nrf24_fifo_flush_rx(&nrf24_api_config);
 8001aca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f00e fa04 	bl	800fedc <nrf24_fifo_flush_rx>
						   if(rx_status == NRF24_FIFO_FULL)
 8001ad4:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d11a      	bne.n	8001b14 <app_main+0x984>
							{
								nrf24_fifo_flush_rx(&nrf24_api_config);
 8001ade:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f00e f9fa 	bl	800fedc <nrf24_fifo_flush_rx>
								nrf24_fifo_status(&nrf24_api_config, &rx_status, &tx_status);
 8001ae8:	f107 0236 	add.w	r2, r7, #54	; 0x36
 8001aec:	f107 0137 	add.w	r1, r7, #55	; 0x37
 8001af0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001af4:	4618      	mov	r0, r3
 8001af6:	f00e f962 	bl	800fdbe <nrf24_fifo_status>
								for(int i = 0; i < 5; i++)
 8001afa:	2300      	movs	r3, #0
 8001afc:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8001b00:	e004      	b.n	8001b0c <app_main+0x97c>
 8001b02:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001b06:	3301      	adds	r3, #1
 8001b08:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8001b0c:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	ddf6      	ble.n	8001b02 <app_main+0x972>
								}

							}
						}

						if (tx_status == NRF24_FIFO_EMPTY)
 8001b14:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d11f      	bne.n	8001b5e <app_main+0x9ce>
						{
							nrf24_fifo_flush_tx(&nrf24_api_config);
 8001b1e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b22:	4618      	mov	r0, r3
 8001b24:	f00e f9ce 	bl	800fec4 <nrf24_fifo_flush_tx>
							nrf24_fifo_status(&nrf24_api_config, &rx_status, &tx_status);
 8001b28:	f107 0236 	add.w	r2, r7, #54	; 0x36
 8001b2c:	f107 0137 	add.w	r1, r7, #55	; 0x37
 8001b30:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b34:	4618      	mov	r0, r3
 8001b36:	f00e f942 	bl	800fdbe <nrf24_fifo_status>
							//errrrrrrrrr = nrf24_fifo_write_ack_pld(&nrf24_api_config, 0, (uint8_t *)&packet_ma_type_11, sizeof(packet_ma_type_11));
							radio_flag = !radio_flag;//изменения от плт
 8001b3a:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	bf14      	ite	ne
 8001b42:	2301      	movne	r3, #1
 8001b44:	2300      	moveq	r3, #0
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	f083 0301 	eor.w	r3, r3, #1
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
 8001b52:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
						}

						//опускаем флаги
						nrf24_irq_get(&nrf24_api_config, &IRQ_flags);
 8001b5e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001b62:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f00e f9c3 	bl	800fef4 <nrf24_irq_get>
						irq_err = nrf24_irq_clear(&nrf24_api_config, NRF24_IRQ_RX_DR | NRF24_IRQ_TX_DR | NRF24_IRQ_MAX_RT);
 8001b6e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b72:	2107      	movs	r1, #7
 8001b74:	4618      	mov	r0, r3
 8001b76:	f00e f9d6 	bl	800ff26 <nrf24_irq_clear>
 8001b7a:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
          }
        switch(fckng_state)
 8001b7e:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8001b82:	2b05      	cmp	r3, #5
 8001b84:	f63f ad0c 	bhi.w	80015a0 <app_main+0x410>
 8001b88:	a201      	add	r2, pc, #4	; (adr r2, 8001b90 <app_main+0xa00>)
 8001b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b8e:	bf00      	nop
 8001b90:	08001ba9 	.word	0x08001ba9
 8001b94:	08001c3d 	.word	0x08001c3d
 8001b98:	08001ca3 	.word	0x08001ca3
 8001b9c:	08001cc5 	.word	0x08001cc5
 8001ba0:	08001d01 	.word	0x08001d01
 8001ba4:	08001d5f 	.word	0x08001d5f
        {
        case STATE_ON_GND:

			HAL_GPIO_WritePin(LED_PORT, LED_PIN, 1);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bae:	4875      	ldr	r0, [pc, #468]	; (8001d84 <app_main+0xbf4>)
 8001bb0:	f005 f96e 	bl	8006e90 <HAL_GPIO_WritePin>
        	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == true)
 8001bb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bb8:	4873      	ldr	r0, [pc, #460]	; (8001d88 <app_main+0xbf8>)
 8001bba:	f005 f951 	bl	8006e60 <HAL_GPIO_ReadPin>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d136      	bne.n	8001c32 <app_main+0xaa2>
        	{
        		if(HAL_GetTick() >= start_time_io + 50)
 8001bc4:	f004 f9b0 	bl	8005f28 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8001bce:	3332      	adds	r3, #50	; 0x32
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	f0c0 80c7 	bcc.w	8001d64 <app_main+0xbd4>
				{
					for(int i = 0; i < 10; i++)
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8001bdc:	e012      	b.n	8001c04 <app_main+0xa74>
					{
						lux_sun+=photorezistor_get_lux(photorezist);
 8001bde:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001be2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001be6:	f00d fc1f 	bl	800f428 <photorezistor_get_lux>
 8001bea:	eeb0 7a40 	vmov.f32	s14, s0
 8001bee:	edd7 7a99 	vldr	s15, [r7, #612]	; 0x264
 8001bf2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bf6:	edc7 7a99 	vstr	s15, [r7, #612]	; 0x264
					for(int i = 0; i < 10; i++)
 8001bfa:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001bfe:	3301      	adds	r3, #1
 8001c00:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8001c04:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001c08:	2b09      	cmp	r3, #9
 8001c0a:	dde8      	ble.n	8001bde <app_main+0xa4e>
					}
					lux_sun = lux_sun/10;
 8001c0c:	ed97 7a99 	vldr	s14, [r7, #612]	; 0x264
 8001c10:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001c14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c18:	edc7 7a99 	vstr	s15, [r7, #612]	; 0x264
					fckng_state = STATE_IN_ROCKET;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
					packet_ma_type_11.state = 1;
 8001c22:	2301      	movs	r3, #1
 8001c24:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
					start_time_io = HAL_GetTick();
 8001c28:	f004 f97e 	bl	8005f28 <HAL_GetTick>
 8001c2c:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
        	else
        	{
        		start_time_io = HAL_GetTick();
        	}

        	break;
 8001c30:	e098      	b.n	8001d64 <app_main+0xbd4>
        		start_time_io = HAL_GetTick();
 8001c32:	f004 f979 	bl	8005f28 <HAL_GetTick>
 8001c36:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
        	break;
 8001c3a:	e093      	b.n	8001d64 <app_main+0xbd4>

        case STATE_IN_ROCKET:
        	if((lux_sun - lux)*KOF < photorezistor_get_lux(photorezist))
 8001c3c:	ed97 7a99 	vldr	s14, [r7, #612]	; 0x264
 8001c40:	edd7 7a84 	vldr	s15, [r7, #528]	; 0x210
 8001c44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c48:	ee17 0a90 	vmov	r0, s15
 8001c4c:	f7fe fc84 	bl	8000558 <__aeabi_f2d>
 8001c50:	a347      	add	r3, pc, #284	; (adr r3, 8001d70 <app_main+0xbe0>)
 8001c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c56:	f7fe fcd7 	bl	8000608 <__aeabi_dmul>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4614      	mov	r4, r2
 8001c60:	461d      	mov	r5, r3
 8001c62:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001c66:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c6a:	f00d fbdd 	bl	800f428 <photorezistor_get_lux>
 8001c6e:	ee10 3a10 	vmov	r3, s0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fc70 	bl	8000558 <__aeabi_f2d>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4620      	mov	r0, r4
 8001c7e:	4629      	mov	r1, r5
 8001c80:	f7fe ff34 	bl	8000aec <__aeabi_dcmplt>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d100      	bne.n	8001c8c <app_main+0xafc>
			{
        		fckng_state = STATE_FALL_OF_THE_STONE;
	        	start_time_io = HAL_GetTick();
				packet_ma_type_11.state = 2;
			}
        	break;
 8001c8a:	e06e      	b.n	8001d6a <app_main+0xbda>
        		fckng_state = STATE_FALL_OF_THE_STONE;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
	        	start_time_io = HAL_GetTick();
 8001c92:	f004 f949 	bl	8005f28 <HAL_GetTick>
 8001c96:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
				packet_ma_type_11.state = 2;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
        	break;
 8001ca0:	e063      	b.n	8001d6a <app_main+0xbda>

        case STATE_FALL_OF_THE_STONE:
        	if(HAL_GetTick() - start_time_io >= TIME_STONE)
 8001ca2:	f004 f941 	bl	8005f28 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	f241 3287 	movw	r2, #4999	; 0x1387
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d958      	bls.n	8001d68 <app_main+0xbd8>
        	{
        		fckng_state = STATE_FALL_IS_NOT_A_STONE;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
        		packet_ma_type_11.state = 3;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
        	}
        break;
 8001cc2:	e051      	b.n	8001d68 <app_main+0xbd8>

        case STATE_FALL_IS_NOT_A_STONE:
			HAL_GPIO_WritePin(PEREGIGATEL_PORT, PEREGIGATEL_PIN, 1);//функция для открфтия лепестков
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cca:	482e      	ldr	r0, [pc, #184]	; (8001d84 <app_main+0xbf4>)
 8001ccc:	f005 f8e0 	bl	8006e90 <HAL_GPIO_WritePin>
        	if(packet_ma_type_11.height_bme <= 350)
 8001cd0:	f8d7 01f3 	ldr.w	r0, [r7, #499]	; 0x1f3
 8001cd4:	f8d7 11f7 	ldr.w	r1, [r7, #503]	; 0x1f7
 8001cd8:	a327      	add	r3, pc, #156	; (adr r3, 8001d78 <app_main+0xbe8>)
 8001cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cde:	f7fe ff0f 	bl	8000b00 <__aeabi_dcmple>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d100      	bne.n	8001cea <app_main+0xb5a>
        	{
        		fckng_state = STATE_FALL_ON_PARACHUTE;
        		packet_ma_type_11.state = 4;
        		start_time_to = HAL_GetTick();
        	}
            break;
 8001ce8:	e03f      	b.n	8001d6a <app_main+0xbda>
        		fckng_state = STATE_FALL_ON_PARACHUTE;
 8001cea:	2304      	movs	r3, #4
 8001cec:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
        		packet_ma_type_11.state = 4;
 8001cf0:	2304      	movs	r3, #4
 8001cf2:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
        		start_time_to = HAL_GetTick();
 8001cf6:	f004 f917 	bl	8005f28 <HAL_GetTick>
 8001cfa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
            break;
 8001cfe:	e034      	b.n	8001d6a <app_main+0xbda>

        case STATE_FALL_ON_PARACHUTE:
        	HAL_GPIO_WritePin(PARASHUTE_PORT, PARASHUTE_PIN, 1);//откр парашюь
 8001d00:	2201      	movs	r2, #1
 8001d02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d06:	4820      	ldr	r0, [pc, #128]	; (8001d88 <app_main+0xbf8>)
 8001d08:	f005 f8c2 	bl	8006e90 <HAL_GPIO_WritePin>
        	time_parashute = HAL_GetTick();
 8001d0c:	f004 f90c 	bl	8005f28 <HAL_GetTick>
 8001d10:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
        	if(HAL_GetTick() - start_time_io >= TIME_LIDAR)
 8001d14:	f004 f908 	bl	8005f28 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d24:	d21b      	bcs.n	8001d5e <app_main+0xbce>
        	{
        		//ФУНКЦИЯ ЛИДАРА
        	}
        	else if(packet_ma_type_11.height_bme < 10 && (HAL_GetTick() - time_parashute >= TIME_PARASHUTE))
 8001d26:	f8d7 01f3 	ldr.w	r0, [r7, #499]	; 0x1f3
 8001d2a:	f8d7 11f7 	ldr.w	r1, [r7, #503]	; 0x1f7
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <app_main+0xbfc>)
 8001d34:	f7fe feda 	bl	8000aec <__aeabi_dcmplt>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00f      	beq.n	8001d5e <app_main+0xbce>
 8001d3e:	f004 f8f3 	bl	8005f28 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001d4e:	d306      	bcc.n	8001d5e <app_main+0xbce>
        	{
        		fckng_state = STATE_FOUND_ME_PLS;
 8001d50:	2305      	movs	r3, #5
 8001d52:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
        		packet_ma_type_11.state = 5;
 8001d56:	2305      	movs	r3, #5
 8001d58:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
        		break;
 8001d5c:	e005      	b.n	8001d6a <app_main+0xbda>
        	}
        case STATE_FOUND_ME_PLS:
        	//вкл сис поиска
        	if(HAL_GetTick() - start_time_io >= TIME_LIDAR)
 8001d5e:	f004 f8e3 	bl	8005f28 <HAL_GetTick>
			{
				//ФУНКЦИЯ ЛИДАРА
			}
    		break;
 8001d62:	e002      	b.n	8001d6a <app_main+0xbda>
        	break;
 8001d64:	bf00      	nop
 8001d66:	e41b      	b.n	80015a0 <app_main+0x410>
        break;
 8001d68:	bf00      	nop
 		HAL_Delay(150);
 8001d6a:	e419      	b.n	80015a0 <app_main+0x410>
 8001d6c:	f3af 8000 	nop.w
 8001d70:	9999999a 	.word	0x9999999a
 8001d74:	3fe99999 	.word	0x3fe99999
 8001d78:	00000000 	.word	0x00000000
 8001d7c:	4075e000 	.word	0x4075e000
 8001d80:	408f4000 	.word	0x408f4000
 8001d84:	40020400 	.word	0x40020400
 8001d88:	40020800 	.word	0x40020800
 8001d8c:	40240000 	.word	0x40240000

08001d90 <invSqrt>:
//#define sampleFreq	512.0f		// sample frequency in Hz
//#define betaDef		0.1f		// 2 * proportional gain

volatile float q0 = 1.0f, q1 = 0.0f, q2 = 0.0f, q3 = 0.0f;

static float invSqrt(float x) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	ed87 0a01 	vstr	s0, [r7, #4]
	i = 0x5f3759df - (i>>1);
	y = *(float*)&i;
	y = y * (1.5f - (halfx * y * y));
	return y;*/

	return 1/sqrt(x);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7fe fbdc 	bl	8000558 <__aeabi_f2d>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	ec43 2b10 	vmov	d0, r2, r3
 8001da8:	f012 fe70 	bl	8014a8c <sqrt>
 8001dac:	ec53 2b10 	vmov	r2, r3, d0
 8001db0:	f04f 0000 	mov.w	r0, #0
 8001db4:	4908      	ldr	r1, [pc, #32]	; (8001dd8 <invSqrt+0x48>)
 8001db6:	f7fe fd51 	bl	800085c <__aeabi_ddiv>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f7fe ff19 	bl	8000bf8 <__aeabi_d2f>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	ee07 3a90 	vmov	s15, r3
}
 8001dcc:	eeb0 0a67 	vmov.f32	s0, s15
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	3ff00000 	.word	0x3ff00000

08001ddc <MadgwickAHRSupdate>:

void MadgwickAHRSupdate(float* quaternion, float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz, float dt, float beta) {
 8001ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001de0:	b0b6      	sub	sp, #216	; 0xd8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001de6:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
 8001dea:	edc7 0a0d 	vstr	s1, [r7, #52]	; 0x34
 8001dee:	ed87 1a0c 	vstr	s2, [r7, #48]	; 0x30
 8001df2:	edc7 1a0b 	vstr	s3, [r7, #44]	; 0x2c
 8001df6:	ed87 2a0a 	vstr	s4, [r7, #40]	; 0x28
 8001dfa:	edc7 2a09 	vstr	s5, [r7, #36]	; 0x24
 8001dfe:	ed87 3a08 	vstr	s6, [r7, #32]
 8001e02:	edc7 3a07 	vstr	s7, [r7, #28]
 8001e06:	ed87 4a06 	vstr	s8, [r7, #24]
 8001e0a:	edc7 4a05 	vstr	s9, [r7, #20]
 8001e0e:	ed87 5a04 	vstr	s10, [r7, #16]
#	pragma GCC diagnostic ignored "-Wunused-but-set-variable"
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;
#	pragma GCC diagnostic pop

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8001e12:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e16:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1e:	d122      	bne.n	8001e66 <MadgwickAHRSupdate+0x8a>
 8001e20:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e24:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2c:	d11b      	bne.n	8001e66 <MadgwickAHRSupdate+0x8a>
 8001e2e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e32:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3a:	d114      	bne.n	8001e66 <MadgwickAHRSupdate+0x8a>
		MadgwickAHRSupdateIMU(quaternion, gx, gy, gz, ax, ay, az, dt, beta);
 8001e3c:	edd7 3a04 	vldr	s7, [r7, #16]
 8001e40:	ed97 3a05 	vldr	s6, [r7, #20]
 8001e44:	edd7 2a09 	vldr	s5, [r7, #36]	; 0x24
 8001e48:	ed97 2a0a 	vldr	s4, [r7, #40]	; 0x28
 8001e4c:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 8001e50:	ed97 1a0c 	vldr	s2, [r7, #48]	; 0x30
 8001e54:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 8001e58:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8001e5c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001e5e:	f001 f99d 	bl	800319c <MadgwickAHRSupdateIMU>
		return;
 8001e62:	f001 b98c 	b.w	800317e <MadgwickAHRSupdate+0x13a2>
	}

	float sampleFreq = 1 / dt;
 8001e66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e72:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8001e76:	4be6      	ldr	r3, [pc, #920]	; (8002210 <MadgwickAHRSupdate+0x434>)
 8001e78:	edd3 7a00 	vldr	s15, [r3]
 8001e7c:	eeb1 7a67 	vneg.f32	s14, s15
 8001e80:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001e84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e88:	4be2      	ldr	r3, [pc, #904]	; (8002214 <MadgwickAHRSupdate+0x438>)
 8001e8a:	edd3 6a00 	vldr	s13, [r3]
 8001e8e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001e92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e9a:	4bdf      	ldr	r3, [pc, #892]	; (8002218 <MadgwickAHRSupdate+0x43c>)
 8001e9c:	edd3 6a00 	vldr	s13, [r3]
 8001ea0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001ea4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001eb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eb4:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8001eb8:	4bd8      	ldr	r3, [pc, #864]	; (800221c <MadgwickAHRSupdate+0x440>)
 8001eba:	ed93 7a00 	vldr	s14, [r3]
 8001ebe:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001ec2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ec6:	4bd3      	ldr	r3, [pc, #844]	; (8002214 <MadgwickAHRSupdate+0x438>)
 8001ec8:	edd3 6a00 	vldr	s13, [r3]
 8001ecc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001ed0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ed4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ed8:	4bcf      	ldr	r3, [pc, #828]	; (8002218 <MadgwickAHRSupdate+0x43c>)
 8001eda:	edd3 6a00 	vldr	s13, [r3]
 8001ede:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001ee2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ee6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001eee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ef2:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8001ef6:	4bc9      	ldr	r3, [pc, #804]	; (800221c <MadgwickAHRSupdate+0x440>)
 8001ef8:	ed93 7a00 	vldr	s14, [r3]
 8001efc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f04:	4bc2      	ldr	r3, [pc, #776]	; (8002210 <MadgwickAHRSupdate+0x434>)
 8001f06:	edd3 6a00 	vldr	s13, [r3]
 8001f0a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f16:	4bc0      	ldr	r3, [pc, #768]	; (8002218 <MadgwickAHRSupdate+0x43c>)
 8001f18:	edd3 6a00 	vldr	s13, [r3]
 8001f1c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001f20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f28:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001f2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f30:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8001f34:	4bb9      	ldr	r3, [pc, #740]	; (800221c <MadgwickAHRSupdate+0x440>)
 8001f36:	ed93 7a00 	vldr	s14, [r3]
 8001f3a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f42:	4bb3      	ldr	r3, [pc, #716]	; (8002210 <MadgwickAHRSupdate+0x434>)
 8001f44:	edd3 6a00 	vldr	s13, [r3]
 8001f48:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f54:	4baf      	ldr	r3, [pc, #700]	; (8002214 <MadgwickAHRSupdate+0x438>)
 8001f56:	edd3 6a00 	vldr	s13, [r3]
 8001f5a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001f5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f66:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001f6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f6e:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001f72:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f76:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7e:	d10e      	bne.n	8001f9e <MadgwickAHRSupdate+0x1c2>
 8001f80:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001f84:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f8c:	d107      	bne.n	8001f9e <MadgwickAHRSupdate+0x1c2>
 8001f8e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f92:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f9a:	f001 8041 	beq.w	8003020 <MadgwickAHRSupdate+0x1244>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001f9e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001fa2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001fa6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001faa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001fae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fb2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001fb6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fbe:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc2:	f7ff fee5 	bl	8001d90 <invSqrt>
 8001fc6:	ed87 0a30 	vstr	s0, [r7, #192]	; 0xc0
		ax *= recipNorm;
 8001fca:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001fce:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8001fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fd6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		ay *= recipNorm;
 8001fda:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001fde:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8001fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fe6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		az *= recipNorm;
 8001fea:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001fee:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8001ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8001ffa:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ffe:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002002:	edd7 7a07 	vldr	s15, [r7, #28]
 8002006:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800200a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800200e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002012:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002016:	ee77 7a27 	vadd.f32	s15, s14, s15
 800201a:	eeb0 0a67 	vmov.f32	s0, s15
 800201e:	f7ff feb7 	bl	8001d90 <invSqrt>
 8002022:	ed87 0a30 	vstr	s0, [r7, #192]	; 0xc0
		mx *= recipNorm;
 8002026:	ed97 7a08 	vldr	s14, [r7, #32]
 800202a:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800202e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002032:	edc7 7a08 	vstr	s15, [r7, #32]
		my *= recipNorm;
 8002036:	ed97 7a07 	vldr	s14, [r7, #28]
 800203a:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800203e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002042:	edc7 7a07 	vstr	s15, [r7, #28]
		mz *= recipNorm;
 8002046:	ed97 7a06 	vldr	s14, [r7, #24]
 800204a:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800204e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002052:	edc7 7a06 	vstr	s15, [r7, #24]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 8002056:	4b71      	ldr	r3, [pc, #452]	; (800221c <MadgwickAHRSupdate+0x440>)
 8002058:	edd3 7a00 	vldr	s15, [r3]
 800205c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002060:	ed97 7a08 	vldr	s14, [r7, #32]
 8002064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002068:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
		_2q0my = 2.0f * q0 * my;
 800206c:	4b6b      	ldr	r3, [pc, #428]	; (800221c <MadgwickAHRSupdate+0x440>)
 800206e:	edd3 7a00 	vldr	s15, [r3]
 8002072:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002076:	ed97 7a07 	vldr	s14, [r7, #28]
 800207a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800207e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
		_2q0mz = 2.0f * q0 * mz;
 8002082:	4b66      	ldr	r3, [pc, #408]	; (800221c <MadgwickAHRSupdate+0x440>)
 8002084:	edd3 7a00 	vldr	s15, [r3]
 8002088:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800208c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002094:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		_2q1mx = 2.0f * q1 * mx;
 8002098:	4b5d      	ldr	r3, [pc, #372]	; (8002210 <MadgwickAHRSupdate+0x434>)
 800209a:	edd3 7a00 	vldr	s15, [r3]
 800209e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020a2:	ed97 7a08 	vldr	s14, [r7, #32]
 80020a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020aa:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		_2q0 = 2.0f * q0;
 80020ae:	4b5b      	ldr	r3, [pc, #364]	; (800221c <MadgwickAHRSupdate+0x440>)
 80020b0:	edd3 7a00 	vldr	s15, [r3]
 80020b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020b8:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		_2q1 = 2.0f * q1;
 80020bc:	4b54      	ldr	r3, [pc, #336]	; (8002210 <MadgwickAHRSupdate+0x434>)
 80020be:	edd3 7a00 	vldr	s15, [r3]
 80020c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020c6:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
		_2q2 = 2.0f * q2;
 80020ca:	4b52      	ldr	r3, [pc, #328]	; (8002214 <MadgwickAHRSupdate+0x438>)
 80020cc:	edd3 7a00 	vldr	s15, [r3]
 80020d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020d4:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
		_2q3 = 2.0f * q3;
 80020d8:	4b4f      	ldr	r3, [pc, #316]	; (8002218 <MadgwickAHRSupdate+0x43c>)
 80020da:	edd3 7a00 	vldr	s15, [r3]
 80020de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020e2:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		_2q0q2 = 2.0f * q0 * q2;
 80020e6:	4b4d      	ldr	r3, [pc, #308]	; (800221c <MadgwickAHRSupdate+0x440>)
 80020e8:	edd3 7a00 	vldr	s15, [r3]
 80020ec:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80020f0:	4b48      	ldr	r3, [pc, #288]	; (8002214 <MadgwickAHRSupdate+0x438>)
 80020f2:	edd3 7a00 	vldr	s15, [r3]
 80020f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020fa:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		_2q2q3 = 2.0f * q2 * q3;
 80020fe:	4b45      	ldr	r3, [pc, #276]	; (8002214 <MadgwickAHRSupdate+0x438>)
 8002100:	edd3 7a00 	vldr	s15, [r3]
 8002104:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002108:	4b43      	ldr	r3, [pc, #268]	; (8002218 <MadgwickAHRSupdate+0x43c>)
 800210a:	edd3 7a00 	vldr	s15, [r3]
 800210e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002112:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		q0q0 = q0 * q0;
 8002116:	4b41      	ldr	r3, [pc, #260]	; (800221c <MadgwickAHRSupdate+0x440>)
 8002118:	ed93 7a00 	vldr	s14, [r3]
 800211c:	4b3f      	ldr	r3, [pc, #252]	; (800221c <MadgwickAHRSupdate+0x440>)
 800211e:	edd3 7a00 	vldr	s15, [r3]
 8002122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002126:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		q0q1 = q0 * q1;
 800212a:	4b3c      	ldr	r3, [pc, #240]	; (800221c <MadgwickAHRSupdate+0x440>)
 800212c:	ed93 7a00 	vldr	s14, [r3]
 8002130:	4b37      	ldr	r3, [pc, #220]	; (8002210 <MadgwickAHRSupdate+0x434>)
 8002132:	edd3 7a00 	vldr	s15, [r3]
 8002136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800213a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		q0q2 = q0 * q2;
 800213e:	4b37      	ldr	r3, [pc, #220]	; (800221c <MadgwickAHRSupdate+0x440>)
 8002140:	ed93 7a00 	vldr	s14, [r3]
 8002144:	4b33      	ldr	r3, [pc, #204]	; (8002214 <MadgwickAHRSupdate+0x438>)
 8002146:	edd3 7a00 	vldr	s15, [r3]
 800214a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800214e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		q0q3 = q0 * q3;
 8002152:	4b32      	ldr	r3, [pc, #200]	; (800221c <MadgwickAHRSupdate+0x440>)
 8002154:	ed93 7a00 	vldr	s14, [r3]
 8002158:	4b2f      	ldr	r3, [pc, #188]	; (8002218 <MadgwickAHRSupdate+0x43c>)
 800215a:	edd3 7a00 	vldr	s15, [r3]
 800215e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002162:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		q1q1 = q1 * q1;
 8002166:	4b2a      	ldr	r3, [pc, #168]	; (8002210 <MadgwickAHRSupdate+0x434>)
 8002168:	ed93 7a00 	vldr	s14, [r3]
 800216c:	4b28      	ldr	r3, [pc, #160]	; (8002210 <MadgwickAHRSupdate+0x434>)
 800216e:	edd3 7a00 	vldr	s15, [r3]
 8002172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002176:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		q1q2 = q1 * q2;
 800217a:	4b25      	ldr	r3, [pc, #148]	; (8002210 <MadgwickAHRSupdate+0x434>)
 800217c:	ed93 7a00 	vldr	s14, [r3]
 8002180:	4b24      	ldr	r3, [pc, #144]	; (8002214 <MadgwickAHRSupdate+0x438>)
 8002182:	edd3 7a00 	vldr	s15, [r3]
 8002186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800218a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		q1q3 = q1 * q3;
 800218e:	4b20      	ldr	r3, [pc, #128]	; (8002210 <MadgwickAHRSupdate+0x434>)
 8002190:	ed93 7a00 	vldr	s14, [r3]
 8002194:	4b20      	ldr	r3, [pc, #128]	; (8002218 <MadgwickAHRSupdate+0x43c>)
 8002196:	edd3 7a00 	vldr	s15, [r3]
 800219a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800219e:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q2q2 = q2 * q2;
 80021a2:	4b1c      	ldr	r3, [pc, #112]	; (8002214 <MadgwickAHRSupdate+0x438>)
 80021a4:	ed93 7a00 	vldr	s14, [r3]
 80021a8:	4b1a      	ldr	r3, [pc, #104]	; (8002214 <MadgwickAHRSupdate+0x438>)
 80021aa:	edd3 7a00 	vldr	s15, [r3]
 80021ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b2:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q2q3 = q2 * q3;
 80021b6:	4b17      	ldr	r3, [pc, #92]	; (8002214 <MadgwickAHRSupdate+0x438>)
 80021b8:	ed93 7a00 	vldr	s14, [r3]
 80021bc:	4b16      	ldr	r3, [pc, #88]	; (8002218 <MadgwickAHRSupdate+0x43c>)
 80021be:	edd3 7a00 	vldr	s15, [r3]
 80021c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c6:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q3q3 = q3 * q3;
 80021ca:	4b13      	ldr	r3, [pc, #76]	; (8002218 <MadgwickAHRSupdate+0x43c>)
 80021cc:	ed93 7a00 	vldr	s14, [r3]
 80021d0:	4b11      	ldr	r3, [pc, #68]	; (8002218 <MadgwickAHRSupdate+0x43c>)
 80021d2:	edd3 7a00 	vldr	s15, [r3]
 80021d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021da:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 80021de:	ed97 7a08 	vldr	s14, [r7, #32]
 80021e2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80021e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021ea:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <MadgwickAHRSupdate+0x43c>)
 80021ec:	edd3 6a00 	vldr	s13, [r3]
 80021f0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80021f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <MadgwickAHRSupdate+0x438>)
 80021fe:	edd3 6a00 	vldr	s13, [r3]
 8002202:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8002206:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800220a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800220e:	e007      	b.n	8002220 <MadgwickAHRSupdate+0x444>
 8002210:	200022c4 	.word	0x200022c4
 8002214:	200022c8 	.word	0x200022c8
 8002218:	200022cc 	.word	0x200022cc
 800221c:	20000000 	.word	0x20000000
 8002220:	edd7 6a08 	vldr	s13, [r7, #32]
 8002224:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002228:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800222c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002230:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8002234:	edd7 7a07 	vldr	s15, [r7, #28]
 8002238:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800223c:	4bef      	ldr	r3, [pc, #956]	; (80025fc <MadgwickAHRSupdate+0x820>)
 800223e:	edd3 7a00 	vldr	s15, [r3]
 8002242:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002246:	ee37 7a27 	vadd.f32	s14, s14, s15
 800224a:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 800224e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002252:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002256:	4bea      	ldr	r3, [pc, #936]	; (8002600 <MadgwickAHRSupdate+0x824>)
 8002258:	edd3 7a00 	vldr	s15, [r3]
 800225c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002260:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002264:	edd7 6a08 	vldr	s13, [r7, #32]
 8002268:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800226c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002270:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002274:	edd7 6a08 	vldr	s13, [r7, #32]
 8002278:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800227c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002280:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002284:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8002288:	4bdd      	ldr	r3, [pc, #884]	; (8002600 <MadgwickAHRSupdate+0x824>)
 800228a:	ed93 7a00 	vldr	s14, [r3]
 800228e:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002292:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002296:	edd7 6a07 	vldr	s13, [r7, #28]
 800229a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800229e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022a6:	4bd7      	ldr	r3, [pc, #860]	; (8002604 <MadgwickAHRSupdate+0x828>)
 80022a8:	edd3 6a00 	vldr	s13, [r3]
 80022ac:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80022b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022b8:	4bd0      	ldr	r3, [pc, #832]	; (80025fc <MadgwickAHRSupdate+0x820>)
 80022ba:	edd3 6a00 	vldr	s13, [r3]
 80022be:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80022c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80022ce:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80022d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022da:	edd7 6a07 	vldr	s13, [r7, #28]
 80022de:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80022e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022ea:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 80022ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80022f2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022f6:	4bc2      	ldr	r3, [pc, #776]	; (8002600 <MadgwickAHRSupdate+0x824>)
 80022f8:	edd3 7a00 	vldr	s15, [r3]
 80022fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002300:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002304:	edd7 6a07 	vldr	s13, [r7, #28]
 8002308:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800230c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002310:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002314:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		_2bx = sqrt(hx * hx + hy * hy);
 8002318:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800231c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002320:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002324:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002328:	ee77 7a27 	vadd.f32	s15, s14, s15
 800232c:	ee17 0a90 	vmov	r0, s15
 8002330:	f7fe f912 	bl	8000558 <__aeabi_f2d>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	ec43 2b10 	vmov	d0, r2, r3
 800233c:	f012 fba6 	bl	8014a8c <sqrt>
 8002340:	ec53 2b10 	vmov	r2, r3, d0
 8002344:	4610      	mov	r0, r2
 8002346:	4619      	mov	r1, r3
 8002348:	f7fe fc56 	bl	8000bf8 <__aeabi_d2f>
 800234c:	4603      	mov	r3, r0
 800234e:	667b      	str	r3, [r7, #100]	; 0x64
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8002350:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002354:	eeb1 7a67 	vneg.f32	s14, s15
 8002358:	4ba8      	ldr	r3, [pc, #672]	; (80025fc <MadgwickAHRSupdate+0x820>)
 800235a:	edd3 7a00 	vldr	s15, [r3]
 800235e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002362:	4ba8      	ldr	r3, [pc, #672]	; (8002604 <MadgwickAHRSupdate+0x828>)
 8002364:	edd3 6a00 	vldr	s13, [r3]
 8002368:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800236c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002370:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002374:	edd7 6a06 	vldr	s13, [r7, #24]
 8002378:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800237c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002380:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002384:	4b9e      	ldr	r3, [pc, #632]	; (8002600 <MadgwickAHRSupdate+0x824>)
 8002386:	edd3 6a00 	vldr	s13, [r3]
 800238a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800238e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002392:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002396:	edd7 6a06 	vldr	s13, [r7, #24]
 800239a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800239e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023a6:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 80023aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80023ae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023b2:	4b93      	ldr	r3, [pc, #588]	; (8002600 <MadgwickAHRSupdate+0x824>)
 80023b4:	edd3 7a00 	vldr	s15, [r3]
 80023b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023c0:	edd7 6a06 	vldr	s13, [r7, #24]
 80023c4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80023c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023d0:	edd7 6a06 	vldr	s13, [r7, #24]
 80023d4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80023d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023e0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		_4bx = 2.0f * _2bx;
 80023e4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80023e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023ec:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		_4bz = 2.0f * _2bz;
 80023f0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80023f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023f8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		float _8bx = 2.0f * _4bx;
 80023fc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002400:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002404:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		float _8bz = 2.0f * _4bz;
 8002408:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800240c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002410:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

		// Gradient decent algorithm corrective step
		s0= -_2q2*(2*(q1q3 - q0q2) - ax)    +   _2q1*(2*(q0q1 + q2q3) - ay)   +  -_4bz*q2*(_4bx*(0.5 - q2q2 - q3q3) + _4bz*(q1q3 - q0q2) - mx)   +   (-_4bx*q3+_4bz*q1)*(_4bx*(q1q2 - q0q3) + _4bz*(q0q1 + q2q3) - my)    +   _4bx*q2*(_4bx*(q0q2 + q1q3) + _4bz*(0.5 - q1q1 - q2q2) - mz);
 8002414:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002418:	eeb1 7a67 	vneg.f32	s14, s15
 800241c:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8002420:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002424:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002428:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800242c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002430:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002434:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002438:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 800243c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002440:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002444:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002448:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800244c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002450:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002454:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800245c:	ee17 0a90 	vmov	r0, s15
 8002460:	f7fe f87a 	bl	8000558 <__aeabi_f2d>
 8002464:	4604      	mov	r4, r0
 8002466:	460d      	mov	r5, r1
 8002468:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800246c:	eeb1 7a67 	vneg.f32	s14, s15
 8002470:	4b62      	ldr	r3, [pc, #392]	; (80025fc <MadgwickAHRSupdate+0x820>)
 8002472:	edd3 7a00 	vldr	s15, [r3]
 8002476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800247a:	ee17 0a90 	vmov	r0, s15
 800247e:	f7fe f86b 	bl	8000558 <__aeabi_f2d>
 8002482:	4680      	mov	r8, r0
 8002484:	4689      	mov	r9, r1
 8002486:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002488:	f7fe f866 	bl	8000558 <__aeabi_f2d>
 800248c:	4682      	mov	sl, r0
 800248e:	468b      	mov	fp, r1
 8002490:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002492:	f7fe f861 	bl	8000558 <__aeabi_f2d>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	f04f 0000 	mov.w	r0, #0
 800249e:	495a      	ldr	r1, [pc, #360]	; (8002608 <MadgwickAHRSupdate+0x82c>)
 80024a0:	f7fd fefa 	bl	8000298 <__aeabi_dsub>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80024ac:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80024ae:	f7fe f853 	bl	8000558 <__aeabi_f2d>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024ba:	f7fd feed 	bl	8000298 <__aeabi_dsub>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	4650      	mov	r0, sl
 80024c4:	4659      	mov	r1, fp
 80024c6:	f7fe f89f 	bl	8000608 <__aeabi_dmul>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	4692      	mov	sl, r2
 80024d0:	469b      	mov	fp, r3
 80024d2:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80024d6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80024da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024de:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80024e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e6:	ee17 0a90 	vmov	r0, s15
 80024ea:	f7fe f835 	bl	8000558 <__aeabi_f2d>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4650      	mov	r0, sl
 80024f4:	4659      	mov	r1, fp
 80024f6:	f7fd fed1 	bl	800029c <__adddf3>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4692      	mov	sl, r2
 8002500:	469b      	mov	fp, r3
 8002502:	6a38      	ldr	r0, [r7, #32]
 8002504:	f7fe f828 	bl	8000558 <__aeabi_f2d>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	4650      	mov	r0, sl
 800250e:	4659      	mov	r1, fp
 8002510:	f7fd fec2 	bl	8000298 <__aeabi_dsub>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4640      	mov	r0, r8
 800251a:	4649      	mov	r1, r9
 800251c:	f7fe f874 	bl	8000608 <__aeabi_dmul>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	4620      	mov	r0, r4
 8002526:	4629      	mov	r1, r5
 8002528:	f7fd feb8 	bl	800029c <__adddf3>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4614      	mov	r4, r2
 8002532:	461d      	mov	r5, r3
 8002534:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002538:	eeb1 7a67 	vneg.f32	s14, s15
 800253c:	4b30      	ldr	r3, [pc, #192]	; (8002600 <MadgwickAHRSupdate+0x824>)
 800253e:	edd3 7a00 	vldr	s15, [r3]
 8002542:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002546:	4b2f      	ldr	r3, [pc, #188]	; (8002604 <MadgwickAHRSupdate+0x828>)
 8002548:	edd3 6a00 	vldr	s13, [r3]
 800254c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002550:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002554:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002558:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 800255c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002560:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002564:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002568:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800256c:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 8002570:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002574:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002578:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800257c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002580:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002584:	edd7 7a07 	vldr	s15, [r7, #28]
 8002588:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800258c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002590:	ee17 0a90 	vmov	r0, s15
 8002594:	f7fd ffe0 	bl	8000558 <__aeabi_f2d>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	4620      	mov	r0, r4
 800259e:	4629      	mov	r1, r5
 80025a0:	f7fd fe7c 	bl	800029c <__adddf3>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80025ac:	4b13      	ldr	r3, [pc, #76]	; (80025fc <MadgwickAHRSupdate+0x820>)
 80025ae:	ed93 7a00 	vldr	s14, [r3]
 80025b2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80025b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ba:	ee17 0a90 	vmov	r0, s15
 80025be:	f7fd ffcb 	bl	8000558 <__aeabi_f2d>
 80025c2:	4680      	mov	r8, r0
 80025c4:	4689      	mov	r9, r1
 80025c6:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80025ca:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80025ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025d2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80025d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025da:	ee17 0a90 	vmov	r0, s15
 80025de:	f7fd ffbb 	bl	8000558 <__aeabi_f2d>
 80025e2:	4682      	mov	sl, r0
 80025e4:	468b      	mov	fp, r1
 80025e6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80025e8:	f7fd ffb6 	bl	8000558 <__aeabi_f2d>
 80025ec:	e9c7 0100 	strd	r0, r1, [r7]
 80025f0:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80025f4:	f7fd ffb0 	bl	8000558 <__aeabi_f2d>
 80025f8:	e008      	b.n	800260c <MadgwickAHRSupdate+0x830>
 80025fa:	bf00      	nop
 80025fc:	200022c8 	.word	0x200022c8
 8002600:	200022cc 	.word	0x200022cc
 8002604:	200022c4 	.word	0x200022c4
 8002608:	3fe00000 	.word	0x3fe00000
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	f04f 0000 	mov.w	r0, #0
 8002614:	49e9      	ldr	r1, [pc, #932]	; (80029bc <MadgwickAHRSupdate+0xbe0>)
 8002616:	f7fd fe3f 	bl	8000298 <__aeabi_dsub>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4614      	mov	r4, r2
 8002620:	461d      	mov	r5, r3
 8002622:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002624:	f7fd ff98 	bl	8000558 <__aeabi_f2d>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4620      	mov	r0, r4
 800262e:	4629      	mov	r1, r5
 8002630:	f7fd fe32 	bl	8000298 <__aeabi_dsub>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	e9d7 0100 	ldrd	r0, r1, [r7]
 800263c:	f7fd ffe4 	bl	8000608 <__aeabi_dmul>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4650      	mov	r0, sl
 8002646:	4659      	mov	r1, fp
 8002648:	f7fd fe28 	bl	800029c <__adddf3>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4614      	mov	r4, r2
 8002652:	461d      	mov	r5, r3
 8002654:	69b8      	ldr	r0, [r7, #24]
 8002656:	f7fd ff7f 	bl	8000558 <__aeabi_f2d>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4620      	mov	r0, r4
 8002660:	4629      	mov	r1, r5
 8002662:	f7fd fe19 	bl	8000298 <__aeabi_dsub>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	4640      	mov	r0, r8
 800266c:	4649      	mov	r1, r9
 800266e:	f7fd ffcb 	bl	8000608 <__aeabi_dmul>
 8002672:	4602      	mov	r2, r0
 8002674:	460b      	mov	r3, r1
 8002676:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800267a:	f7fd fe0f 	bl	800029c <__adddf3>
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4610      	mov	r0, r2
 8002684:	4619      	mov	r1, r3
 8002686:	f7fe fab7 	bl	8000bf8 <__aeabi_d2f>
 800268a:	4603      	mov	r3, r0
 800268c:	64fb      	str	r3, [r7, #76]	; 0x4c
		s1= _2q3*(2*(q1q3 - q0q2) - ax) +   _2q0*(2*(q0q1 + q2q3) - ay) +   -4*q1*(2*(0.5 - q1q1 - q2q2) - az)    +   _4bz*q3*(_4bx*(0.5 - q2q2 - q3q3) + _4bz*(q1q3 - q0q2) - mx)   + (_4bx*q2+_4bz*q0)*(_4bx*(q1q2 - q0q3) + _4bz*(q0q1 + q2q3) - my)   +   (_4bx*q3-_8bz*q1)*(_4bx*(q0q2 + q1q3) + _4bz*(0.5 - q1q1 - q2q2) - mz);
 800268e:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002692:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002696:	ee77 7a67 	vsub.f32	s15, s14, s15
 800269a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800269e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80026a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026a6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80026aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026ae:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 80026b2:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80026b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026ba:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80026be:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80026c2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80026c6:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80026ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026d2:	ee17 0a90 	vmov	r0, s15
 80026d6:	f7fd ff3f 	bl	8000558 <__aeabi_f2d>
 80026da:	4604      	mov	r4, r0
 80026dc:	460d      	mov	r5, r1
 80026de:	4bb8      	ldr	r3, [pc, #736]	; (80029c0 <MadgwickAHRSupdate+0xbe4>)
 80026e0:	edd3 7a00 	vldr	s15, [r3]
 80026e4:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 80026e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ec:	ee17 0a90 	vmov	r0, s15
 80026f0:	f7fd ff32 	bl	8000558 <__aeabi_f2d>
 80026f4:	4680      	mov	r8, r0
 80026f6:	4689      	mov	r9, r1
 80026f8:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80026fc:	f7fd ff2c 	bl	8000558 <__aeabi_f2d>
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	f04f 0000 	mov.w	r0, #0
 8002708:	49ac      	ldr	r1, [pc, #688]	; (80029bc <MadgwickAHRSupdate+0xbe0>)
 800270a:	f7fd fdc5 	bl	8000298 <__aeabi_dsub>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4692      	mov	sl, r2
 8002714:	469b      	mov	fp, r3
 8002716:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002718:	f7fd ff1e 	bl	8000558 <__aeabi_f2d>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4650      	mov	r0, sl
 8002722:	4659      	mov	r1, fp
 8002724:	f7fd fdb8 	bl	8000298 <__aeabi_dsub>
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	4610      	mov	r0, r2
 800272e:	4619      	mov	r1, r3
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	f7fd fdb2 	bl	800029c <__adddf3>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	4692      	mov	sl, r2
 800273e:	469b      	mov	fp, r3
 8002740:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002742:	f7fd ff09 	bl	8000558 <__aeabi_f2d>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	4650      	mov	r0, sl
 800274c:	4659      	mov	r1, fp
 800274e:	f7fd fda3 	bl	8000298 <__aeabi_dsub>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	4640      	mov	r0, r8
 8002758:	4649      	mov	r1, r9
 800275a:	f7fd ff55 	bl	8000608 <__aeabi_dmul>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	4620      	mov	r0, r4
 8002764:	4629      	mov	r1, r5
 8002766:	f7fd fd99 	bl	800029c <__adddf3>
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	4692      	mov	sl, r2
 8002770:	469b      	mov	fp, r3
 8002772:	4b94      	ldr	r3, [pc, #592]	; (80029c4 <MadgwickAHRSupdate+0xbe8>)
 8002774:	ed93 7a00 	vldr	s14, [r3]
 8002778:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800277c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002780:	ee17 0a90 	vmov	r0, s15
 8002784:	f7fd fee8 	bl	8000558 <__aeabi_f2d>
 8002788:	4604      	mov	r4, r0
 800278a:	460d      	mov	r5, r1
 800278c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800278e:	f7fd fee3 	bl	8000558 <__aeabi_f2d>
 8002792:	4680      	mov	r8, r0
 8002794:	4689      	mov	r9, r1
 8002796:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002798:	f7fd fede 	bl	8000558 <__aeabi_f2d>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	f04f 0000 	mov.w	r0, #0
 80027a4:	4985      	ldr	r1, [pc, #532]	; (80029bc <MadgwickAHRSupdate+0xbe0>)
 80027a6:	f7fd fd77 	bl	8000298 <__aeabi_dsub>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80027b2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80027b4:	f7fd fed0 	bl	8000558 <__aeabi_f2d>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027c0:	f7fd fd6a 	bl	8000298 <__aeabi_dsub>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	4640      	mov	r0, r8
 80027ca:	4649      	mov	r1, r9
 80027cc:	f7fd ff1c 	bl	8000608 <__aeabi_dmul>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4690      	mov	r8, r2
 80027d6:	4699      	mov	r9, r3
 80027d8:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80027dc:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80027e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027e4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80027e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ec:	ee17 0a90 	vmov	r0, s15
 80027f0:	f7fd feb2 	bl	8000558 <__aeabi_f2d>
 80027f4:	4602      	mov	r2, r0
 80027f6:	460b      	mov	r3, r1
 80027f8:	4640      	mov	r0, r8
 80027fa:	4649      	mov	r1, r9
 80027fc:	f7fd fd4e 	bl	800029c <__adddf3>
 8002800:	4602      	mov	r2, r0
 8002802:	460b      	mov	r3, r1
 8002804:	4690      	mov	r8, r2
 8002806:	4699      	mov	r9, r3
 8002808:	6a38      	ldr	r0, [r7, #32]
 800280a:	f7fd fea5 	bl	8000558 <__aeabi_f2d>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4640      	mov	r0, r8
 8002814:	4649      	mov	r1, r9
 8002816:	f7fd fd3f 	bl	8000298 <__aeabi_dsub>
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	4620      	mov	r0, r4
 8002820:	4629      	mov	r1, r5
 8002822:	f7fd fef1 	bl	8000608 <__aeabi_dmul>
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	4650      	mov	r0, sl
 800282c:	4659      	mov	r1, fp
 800282e:	f7fd fd35 	bl	800029c <__adddf3>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	4614      	mov	r4, r2
 8002838:	461d      	mov	r5, r3
 800283a:	4b63      	ldr	r3, [pc, #396]	; (80029c8 <MadgwickAHRSupdate+0xbec>)
 800283c:	ed93 7a00 	vldr	s14, [r3]
 8002840:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002844:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002848:	4b60      	ldr	r3, [pc, #384]	; (80029cc <MadgwickAHRSupdate+0xbf0>)
 800284a:	edd3 6a00 	vldr	s13, [r3]
 800284e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002852:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002856:	ee37 7a27 	vadd.f32	s14, s14, s15
 800285a:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 800285e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002862:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002866:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800286a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800286e:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 8002872:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002876:	ee36 6a27 	vadd.f32	s12, s12, s15
 800287a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800287e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002882:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002886:	edd7 7a07 	vldr	s15, [r7, #28]
 800288a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800288e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002892:	ee17 0a90 	vmov	r0, s15
 8002896:	f7fd fe5f 	bl	8000558 <__aeabi_f2d>
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	4620      	mov	r0, r4
 80028a0:	4629      	mov	r1, r5
 80028a2:	f7fd fcfb 	bl	800029c <__adddf3>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80028ae:	4b45      	ldr	r3, [pc, #276]	; (80029c4 <MadgwickAHRSupdate+0xbe8>)
 80028b0:	ed93 7a00 	vldr	s14, [r3]
 80028b4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80028b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028bc:	4b40      	ldr	r3, [pc, #256]	; (80029c0 <MadgwickAHRSupdate+0xbe4>)
 80028be:	edd3 6a00 	vldr	s13, [r3]
 80028c2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80028c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028ce:	ee17 0a90 	vmov	r0, s15
 80028d2:	f7fd fe41 	bl	8000558 <__aeabi_f2d>
 80028d6:	4680      	mov	r8, r0
 80028d8:	4689      	mov	r9, r1
 80028da:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80028de:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80028e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028e6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80028ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ee:	ee17 0a90 	vmov	r0, s15
 80028f2:	f7fd fe31 	bl	8000558 <__aeabi_f2d>
 80028f6:	4682      	mov	sl, r0
 80028f8:	468b      	mov	fp, r1
 80028fa:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80028fc:	f7fd fe2c 	bl	8000558 <__aeabi_f2d>
 8002900:	e9c7 0100 	strd	r0, r1, [r7]
 8002904:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002908:	f7fd fe26 	bl	8000558 <__aeabi_f2d>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	f04f 0000 	mov.w	r0, #0
 8002914:	4929      	ldr	r1, [pc, #164]	; (80029bc <MadgwickAHRSupdate+0xbe0>)
 8002916:	f7fd fcbf 	bl	8000298 <__aeabi_dsub>
 800291a:	4602      	mov	r2, r0
 800291c:	460b      	mov	r3, r1
 800291e:	4614      	mov	r4, r2
 8002920:	461d      	mov	r5, r3
 8002922:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002924:	f7fd fe18 	bl	8000558 <__aeabi_f2d>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	4620      	mov	r0, r4
 800292e:	4629      	mov	r1, r5
 8002930:	f7fd fcb2 	bl	8000298 <__aeabi_dsub>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	e9d7 0100 	ldrd	r0, r1, [r7]
 800293c:	f7fd fe64 	bl	8000608 <__aeabi_dmul>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4650      	mov	r0, sl
 8002946:	4659      	mov	r1, fp
 8002948:	f7fd fca8 	bl	800029c <__adddf3>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4614      	mov	r4, r2
 8002952:	461d      	mov	r5, r3
 8002954:	69b8      	ldr	r0, [r7, #24]
 8002956:	f7fd fdff 	bl	8000558 <__aeabi_f2d>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	4620      	mov	r0, r4
 8002960:	4629      	mov	r1, r5
 8002962:	f7fd fc99 	bl	8000298 <__aeabi_dsub>
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	4640      	mov	r0, r8
 800296c:	4649      	mov	r1, r9
 800296e:	f7fd fe4b 	bl	8000608 <__aeabi_dmul>
 8002972:	4602      	mov	r2, r0
 8002974:	460b      	mov	r3, r1
 8002976:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800297a:	f7fd fc8f 	bl	800029c <__adddf3>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	4610      	mov	r0, r2
 8002984:	4619      	mov	r1, r3
 8002986:	f7fe f937 	bl	8000bf8 <__aeabi_d2f>
 800298a:	4603      	mov	r3, r0
 800298c:	64bb      	str	r3, [r7, #72]	; 0x48
		s2= -_2q0*(2*(q1q3 - q0q2) - ax)    +     _2q3*(2*(q0q1 + q2q3) - ay)   +   (-4*q2)*(2*(0.5 - q1q1 - q2q2) - az) +   (-_8bx*q2-_4bz*q0)*(_4bx*(0.5 - q2q2 - q3q3) + _4bz*(q1q3 - q0q2) - mx)+(_4bx*q1+_4bz*q3)*(_4bx*(q1q2 - q0q3) + _4bz*(q0q1 + q2q3) - my)+(_4bx*q0-_8bz*q2)*(_4bx*(q0q2 + q1q3) + _4bz*(0.5 - q1q1 - q2q2) - mz);
 800298e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002992:	eeb1 7a67 	vneg.f32	s14, s15
 8002996:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 800299a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800299e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80029a2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80029a6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80029aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80029ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029b2:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 80029b6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80029ba:	e009      	b.n	80029d0 <MadgwickAHRSupdate+0xbf4>
 80029bc:	3fe00000 	.word	0x3fe00000
 80029c0:	200022c4 	.word	0x200022c4
 80029c4:	200022cc 	.word	0x200022cc
 80029c8:	200022c8 	.word	0x200022c8
 80029cc:	20000000 	.word	0x20000000
 80029d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029d4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80029d8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80029dc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80029e0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80029e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ec:	ee17 0a90 	vmov	r0, s15
 80029f0:	f7fd fdb2 	bl	8000558 <__aeabi_f2d>
 80029f4:	4604      	mov	r4, r0
 80029f6:	460d      	mov	r5, r1
 80029f8:	4be8      	ldr	r3, [pc, #928]	; (8002d9c <MadgwickAHRSupdate+0xfc0>)
 80029fa:	edd3 7a00 	vldr	s15, [r3]
 80029fe:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 8002a02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a06:	ee17 0a90 	vmov	r0, s15
 8002a0a:	f7fd fda5 	bl	8000558 <__aeabi_f2d>
 8002a0e:	4680      	mov	r8, r0
 8002a10:	4689      	mov	r9, r1
 8002a12:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002a16:	f7fd fd9f 	bl	8000558 <__aeabi_f2d>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	f04f 0000 	mov.w	r0, #0
 8002a22:	49df      	ldr	r1, [pc, #892]	; (8002da0 <MadgwickAHRSupdate+0xfc4>)
 8002a24:	f7fd fc38 	bl	8000298 <__aeabi_dsub>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4692      	mov	sl, r2
 8002a2e:	469b      	mov	fp, r3
 8002a30:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002a32:	f7fd fd91 	bl	8000558 <__aeabi_f2d>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	4650      	mov	r0, sl
 8002a3c:	4659      	mov	r1, fp
 8002a3e:	f7fd fc2b 	bl	8000298 <__aeabi_dsub>
 8002a42:	4602      	mov	r2, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	4610      	mov	r0, r2
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	f7fd fc25 	bl	800029c <__adddf3>
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	4692      	mov	sl, r2
 8002a58:	469b      	mov	fp, r3
 8002a5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a5c:	f7fd fd7c 	bl	8000558 <__aeabi_f2d>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4650      	mov	r0, sl
 8002a66:	4659      	mov	r1, fp
 8002a68:	f7fd fc16 	bl	8000298 <__aeabi_dsub>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4640      	mov	r0, r8
 8002a72:	4649      	mov	r1, r9
 8002a74:	f7fd fdc8 	bl	8000608 <__aeabi_dmul>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	4629      	mov	r1, r5
 8002a80:	f7fd fc0c 	bl	800029c <__adddf3>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4692      	mov	sl, r2
 8002a8a:	469b      	mov	fp, r3
 8002a8c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002a90:	eeb1 7a67 	vneg.f32	s14, s15
 8002a94:	4bc1      	ldr	r3, [pc, #772]	; (8002d9c <MadgwickAHRSupdate+0xfc0>)
 8002a96:	edd3 7a00 	vldr	s15, [r3]
 8002a9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a9e:	4bc1      	ldr	r3, [pc, #772]	; (8002da4 <MadgwickAHRSupdate+0xfc8>)
 8002aa0:	edd3 6a00 	vldr	s13, [r3]
 8002aa4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002aa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ab0:	ee17 0a90 	vmov	r0, s15
 8002ab4:	f7fd fd50 	bl	8000558 <__aeabi_f2d>
 8002ab8:	4604      	mov	r4, r0
 8002aba:	460d      	mov	r5, r1
 8002abc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002abe:	f7fd fd4b 	bl	8000558 <__aeabi_f2d>
 8002ac2:	4680      	mov	r8, r0
 8002ac4:	4689      	mov	r9, r1
 8002ac6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002ac8:	f7fd fd46 	bl	8000558 <__aeabi_f2d>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	f04f 0000 	mov.w	r0, #0
 8002ad4:	49b2      	ldr	r1, [pc, #712]	; (8002da0 <MadgwickAHRSupdate+0xfc4>)
 8002ad6:	f7fd fbdf 	bl	8000298 <__aeabi_dsub>
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002ae2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002ae4:	f7fd fd38 	bl	8000558 <__aeabi_f2d>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002af0:	f7fd fbd2 	bl	8000298 <__aeabi_dsub>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4640      	mov	r0, r8
 8002afa:	4649      	mov	r1, r9
 8002afc:	f7fd fd84 	bl	8000608 <__aeabi_dmul>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	4690      	mov	r8, r2
 8002b06:	4699      	mov	r9, r3
 8002b08:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002b0c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002b10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b14:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b1c:	ee17 0a90 	vmov	r0, s15
 8002b20:	f7fd fd1a 	bl	8000558 <__aeabi_f2d>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4640      	mov	r0, r8
 8002b2a:	4649      	mov	r1, r9
 8002b2c:	f7fd fbb6 	bl	800029c <__adddf3>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	4690      	mov	r8, r2
 8002b36:	4699      	mov	r9, r3
 8002b38:	6a38      	ldr	r0, [r7, #32]
 8002b3a:	f7fd fd0d 	bl	8000558 <__aeabi_f2d>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	4640      	mov	r0, r8
 8002b44:	4649      	mov	r1, r9
 8002b46:	f7fd fba7 	bl	8000298 <__aeabi_dsub>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	4620      	mov	r0, r4
 8002b50:	4629      	mov	r1, r5
 8002b52:	f7fd fd59 	bl	8000608 <__aeabi_dmul>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4650      	mov	r0, sl
 8002b5c:	4659      	mov	r1, fp
 8002b5e:	f7fd fb9d 	bl	800029c <__adddf3>
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	4614      	mov	r4, r2
 8002b68:	461d      	mov	r5, r3
 8002b6a:	4b8f      	ldr	r3, [pc, #572]	; (8002da8 <MadgwickAHRSupdate+0xfcc>)
 8002b6c:	ed93 7a00 	vldr	s14, [r3]
 8002b70:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002b74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b78:	4b8c      	ldr	r3, [pc, #560]	; (8002dac <MadgwickAHRSupdate+0xfd0>)
 8002b7a:	edd3 6a00 	vldr	s13, [r3]
 8002b7e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002b82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b8a:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8002b8e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002b92:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002b96:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002b9a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b9e:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 8002ba2:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002ba6:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002baa:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002bae:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002bb2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002bb6:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bba:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bc2:	ee17 0a90 	vmov	r0, s15
 8002bc6:	f7fd fcc7 	bl	8000558 <__aeabi_f2d>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	460b      	mov	r3, r1
 8002bce:	4620      	mov	r0, r4
 8002bd0:	4629      	mov	r1, r5
 8002bd2:	f7fd fb63 	bl	800029c <__adddf3>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002bde:	4b71      	ldr	r3, [pc, #452]	; (8002da4 <MadgwickAHRSupdate+0xfc8>)
 8002be0:	ed93 7a00 	vldr	s14, [r3]
 8002be4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002be8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bec:	4b6b      	ldr	r3, [pc, #428]	; (8002d9c <MadgwickAHRSupdate+0xfc0>)
 8002bee:	edd3 6a00 	vldr	s13, [r3]
 8002bf2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002bf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bfe:	ee17 0a90 	vmov	r0, s15
 8002c02:	f7fd fca9 	bl	8000558 <__aeabi_f2d>
 8002c06:	4680      	mov	r8, r0
 8002c08:	4689      	mov	r9, r1
 8002c0a:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002c0e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002c12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c16:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c1e:	ee17 0a90 	vmov	r0, s15
 8002c22:	f7fd fc99 	bl	8000558 <__aeabi_f2d>
 8002c26:	4682      	mov	sl, r0
 8002c28:	468b      	mov	fp, r1
 8002c2a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002c2c:	f7fd fc94 	bl	8000558 <__aeabi_f2d>
 8002c30:	e9c7 0100 	strd	r0, r1, [r7]
 8002c34:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002c38:	f7fd fc8e 	bl	8000558 <__aeabi_f2d>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	f04f 0000 	mov.w	r0, #0
 8002c44:	4956      	ldr	r1, [pc, #344]	; (8002da0 <MadgwickAHRSupdate+0xfc4>)
 8002c46:	f7fd fb27 	bl	8000298 <__aeabi_dsub>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	4614      	mov	r4, r2
 8002c50:	461d      	mov	r5, r3
 8002c52:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002c54:	f7fd fc80 	bl	8000558 <__aeabi_f2d>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4620      	mov	r0, r4
 8002c5e:	4629      	mov	r1, r5
 8002c60:	f7fd fb1a 	bl	8000298 <__aeabi_dsub>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c6c:	f7fd fccc 	bl	8000608 <__aeabi_dmul>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4650      	mov	r0, sl
 8002c76:	4659      	mov	r1, fp
 8002c78:	f7fd fb10 	bl	800029c <__adddf3>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4614      	mov	r4, r2
 8002c82:	461d      	mov	r5, r3
 8002c84:	69b8      	ldr	r0, [r7, #24]
 8002c86:	f7fd fc67 	bl	8000558 <__aeabi_f2d>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4620      	mov	r0, r4
 8002c90:	4629      	mov	r1, r5
 8002c92:	f7fd fb01 	bl	8000298 <__aeabi_dsub>
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4640      	mov	r0, r8
 8002c9c:	4649      	mov	r1, r9
 8002c9e:	f7fd fcb3 	bl	8000608 <__aeabi_dmul>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002caa:	f7fd faf7 	bl	800029c <__adddf3>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4610      	mov	r0, r2
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	f7fd ff9f 	bl	8000bf8 <__aeabi_d2f>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	647b      	str	r3, [r7, #68]	; 0x44
		s3= _2q1*(2*(q1q3 - q0q2) - ax) +   _2q2*(2*(q0q1 + q2q3) - ay)+(-_8bx*q3+_4bz*q1)*(_4bx*(0.5 - q2q2 - q3q3) + _4bz*(q1q3 - q0q2) - mx)+(-_4bx*q0+_4bz*q2)*(_4bx*(q1q2 - q0q3) + _4bz*(q0q1 + q2q3) - my)+(_4bx*q1)*(_4bx*(q0q2 + q1q3) + _4bz*(0.5 - q1q1 - q2q2) - mz);
 8002cbe:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002cc2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002cc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cca:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002cce:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002cd2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002cd6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002cda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cde:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8002ce2:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cea:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002cee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002cf2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002cf6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002cfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d02:	ee17 0a90 	vmov	r0, s15
 8002d06:	f7fd fc27 	bl	8000558 <__aeabi_f2d>
 8002d0a:	4604      	mov	r4, r0
 8002d0c:	460d      	mov	r5, r1
 8002d0e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002d12:	eeb1 7a67 	vneg.f32	s14, s15
 8002d16:	4b25      	ldr	r3, [pc, #148]	; (8002dac <MadgwickAHRSupdate+0xfd0>)
 8002d18:	edd3 7a00 	vldr	s15, [r3]
 8002d1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d20:	4b21      	ldr	r3, [pc, #132]	; (8002da8 <MadgwickAHRSupdate+0xfcc>)
 8002d22:	edd3 6a00 	vldr	s13, [r3]
 8002d26:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002d2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d32:	ee17 0a90 	vmov	r0, s15
 8002d36:	f7fd fc0f 	bl	8000558 <__aeabi_f2d>
 8002d3a:	4680      	mov	r8, r0
 8002d3c:	4689      	mov	r9, r1
 8002d3e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002d40:	f7fd fc0a 	bl	8000558 <__aeabi_f2d>
 8002d44:	4682      	mov	sl, r0
 8002d46:	468b      	mov	fp, r1
 8002d48:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002d4a:	f7fd fc05 	bl	8000558 <__aeabi_f2d>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	f04f 0000 	mov.w	r0, #0
 8002d56:	4912      	ldr	r1, [pc, #72]	; (8002da0 <MadgwickAHRSupdate+0xfc4>)
 8002d58:	f7fd fa9e 	bl	8000298 <__aeabi_dsub>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002d64:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002d66:	f7fd fbf7 	bl	8000558 <__aeabi_f2d>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d72:	f7fd fa91 	bl	8000298 <__aeabi_dsub>
 8002d76:	4602      	mov	r2, r0
 8002d78:	460b      	mov	r3, r1
 8002d7a:	4650      	mov	r0, sl
 8002d7c:	4659      	mov	r1, fp
 8002d7e:	f7fd fc43 	bl	8000608 <__aeabi_dmul>
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	4692      	mov	sl, r2
 8002d88:	469b      	mov	fp, r3
 8002d8a:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002d8e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002d92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d96:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002d9a:	e009      	b.n	8002db0 <MadgwickAHRSupdate+0xfd4>
 8002d9c:	200022c8 	.word	0x200022c8
 8002da0:	3fe00000 	.word	0x3fe00000
 8002da4:	20000000 	.word	0x20000000
 8002da8:	200022c4 	.word	0x200022c4
 8002dac:	200022cc 	.word	0x200022cc
 8002db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db4:	ee17 0a90 	vmov	r0, s15
 8002db8:	f7fd fbce 	bl	8000558 <__aeabi_f2d>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	4650      	mov	r0, sl
 8002dc2:	4659      	mov	r1, fp
 8002dc4:	f7fd fa6a 	bl	800029c <__adddf3>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4692      	mov	sl, r2
 8002dce:	469b      	mov	fp, r3
 8002dd0:	6a38      	ldr	r0, [r7, #32]
 8002dd2:	f7fd fbc1 	bl	8000558 <__aeabi_f2d>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	460b      	mov	r3, r1
 8002dda:	4650      	mov	r0, sl
 8002ddc:	4659      	mov	r1, fp
 8002dde:	f7fd fa5b 	bl	8000298 <__aeabi_dsub>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4640      	mov	r0, r8
 8002de8:	4649      	mov	r1, r9
 8002dea:	f7fd fc0d 	bl	8000608 <__aeabi_dmul>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4620      	mov	r0, r4
 8002df4:	4629      	mov	r1, r5
 8002df6:	f7fd fa51 	bl	800029c <__adddf3>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	4614      	mov	r4, r2
 8002e00:	461d      	mov	r5, r3
 8002e02:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002e06:	eeb1 7a67 	vneg.f32	s14, s15
 8002e0a:	4bdf      	ldr	r3, [pc, #892]	; (8003188 <MadgwickAHRSupdate+0x13ac>)
 8002e0c:	edd3 7a00 	vldr	s15, [r3]
 8002e10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e14:	4bdd      	ldr	r3, [pc, #884]	; (800318c <MadgwickAHRSupdate+0x13b0>)
 8002e16:	edd3 6a00 	vldr	s13, [r3]
 8002e1a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002e1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e26:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8002e2a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002e2e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002e32:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002e36:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e3a:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 8002e3e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002e42:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002e46:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002e4a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e4e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002e52:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e56:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e5e:	ee17 0a90 	vmov	r0, s15
 8002e62:	f7fd fb79 	bl	8000558 <__aeabi_f2d>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4620      	mov	r0, r4
 8002e6c:	4629      	mov	r1, r5
 8002e6e:	f7fd fa15 	bl	800029c <__adddf3>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002e7a:	4bc5      	ldr	r3, [pc, #788]	; (8003190 <MadgwickAHRSupdate+0x13b4>)
 8002e7c:	ed93 7a00 	vldr	s14, [r3]
 8002e80:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002e84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e88:	ee17 0a90 	vmov	r0, s15
 8002e8c:	f7fd fb64 	bl	8000558 <__aeabi_f2d>
 8002e90:	4680      	mov	r8, r0
 8002e92:	4689      	mov	r9, r1
 8002e94:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002e98:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002e9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ea0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ea8:	ee17 0a90 	vmov	r0, s15
 8002eac:	f7fd fb54 	bl	8000558 <__aeabi_f2d>
 8002eb0:	4682      	mov	sl, r0
 8002eb2:	468b      	mov	fp, r1
 8002eb4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002eb6:	f7fd fb4f 	bl	8000558 <__aeabi_f2d>
 8002eba:	e9c7 0100 	strd	r0, r1, [r7]
 8002ebe:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002ec2:	f7fd fb49 	bl	8000558 <__aeabi_f2d>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	f04f 0000 	mov.w	r0, #0
 8002ece:	49b1      	ldr	r1, [pc, #708]	; (8003194 <MadgwickAHRSupdate+0x13b8>)
 8002ed0:	f7fd f9e2 	bl	8000298 <__aeabi_dsub>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4614      	mov	r4, r2
 8002eda:	461d      	mov	r5, r3
 8002edc:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002ede:	f7fd fb3b 	bl	8000558 <__aeabi_f2d>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	4620      	mov	r0, r4
 8002ee8:	4629      	mov	r1, r5
 8002eea:	f7fd f9d5 	bl	8000298 <__aeabi_dsub>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ef6:	f7fd fb87 	bl	8000608 <__aeabi_dmul>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4650      	mov	r0, sl
 8002f00:	4659      	mov	r1, fp
 8002f02:	f7fd f9cb 	bl	800029c <__adddf3>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	4614      	mov	r4, r2
 8002f0c:	461d      	mov	r5, r3
 8002f0e:	69b8      	ldr	r0, [r7, #24]
 8002f10:	f7fd fb22 	bl	8000558 <__aeabi_f2d>
 8002f14:	4602      	mov	r2, r0
 8002f16:	460b      	mov	r3, r1
 8002f18:	4620      	mov	r0, r4
 8002f1a:	4629      	mov	r1, r5
 8002f1c:	f7fd f9bc 	bl	8000298 <__aeabi_dsub>
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	4640      	mov	r0, r8
 8002f26:	4649      	mov	r1, r9
 8002f28:	f7fd fb6e 	bl	8000608 <__aeabi_dmul>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f34:	f7fd f9b2 	bl	800029c <__adddf3>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f7fd fe5a 	bl	8000bf8 <__aeabi_d2f>
 8002f44:	4603      	mov	r3, r0
 8002f46:	643b      	str	r3, [r7, #64]	; 0x40
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002f48:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002f4c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002f50:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002f54:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f5c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002f60:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f68:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002f6c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f74:	eeb0 0a67 	vmov.f32	s0, s15
 8002f78:	f7fe ff0a 	bl	8001d90 <invSqrt>
 8002f7c:	ed87 0a30 	vstr	s0, [r7, #192]	; 0xc0
		s0 *= recipNorm;
 8002f80:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002f84:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f8c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		s1 *= recipNorm;
 8002f90:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002f94:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f9c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		s2 *= recipNorm;
 8002fa0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002fa4:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002fa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fac:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		s3 *= recipNorm;
 8002fb0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002fb4:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fbc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

		// Apply feedback step
		qDot1 -= beta * s0;
 8002fc0:	ed97 7a04 	vldr	s14, [r7, #16]
 8002fc4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fcc:	ed97 7a35 	vldr	s14, [r7, #212]	; 0xd4
 8002fd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fd4:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
		qDot2 -= beta * s1;
 8002fd8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002fdc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fe4:	ed97 7a34 	vldr	s14, [r7, #208]	; 0xd0
 8002fe8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fec:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
		qDot3 -= beta * s2;
 8002ff0:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ff4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ffc:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 8003000:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003004:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
		qDot4 -= beta * s3;
 8003008:	ed97 7a04 	vldr	s14, [r7, #16]
 800300c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003014:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8003018:	ee77 7a67 	vsub.f32	s15, s14, s15
 800301c:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8003020:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003024:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8003028:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800302c:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8003030:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003034:	4b54      	ldr	r3, [pc, #336]	; (8003188 <MadgwickAHRSupdate+0x13ac>)
 8003036:	edd3 7a00 	vldr	s15, [r3]
 800303a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800303e:	4b52      	ldr	r3, [pc, #328]	; (8003188 <MadgwickAHRSupdate+0x13ac>)
 8003040:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8003044:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003048:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800304c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003050:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8003054:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003058:	4b4d      	ldr	r3, [pc, #308]	; (8003190 <MadgwickAHRSupdate+0x13b4>)
 800305a:	edd3 7a00 	vldr	s15, [r3]
 800305e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003062:	4b4b      	ldr	r3, [pc, #300]	; (8003190 <MadgwickAHRSupdate+0x13b4>)
 8003064:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8003068:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800306c:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8003070:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003074:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8003078:	ee27 7a27 	vmul.f32	s14, s14, s15
 800307c:	4b43      	ldr	r3, [pc, #268]	; (800318c <MadgwickAHRSupdate+0x13b0>)
 800307e:	edd3 7a00 	vldr	s15, [r3]
 8003082:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003086:	4b41      	ldr	r3, [pc, #260]	; (800318c <MadgwickAHRSupdate+0x13b0>)
 8003088:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 800308c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003090:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8003094:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003098:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 800309c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030a0:	4b3d      	ldr	r3, [pc, #244]	; (8003198 <MadgwickAHRSupdate+0x13bc>)
 80030a2:	edd3 7a00 	vldr	s15, [r3]
 80030a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030aa:	4b3b      	ldr	r3, [pc, #236]	; (8003198 <MadgwickAHRSupdate+0x13bc>)
 80030ac:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80030b0:	4b35      	ldr	r3, [pc, #212]	; (8003188 <MadgwickAHRSupdate+0x13ac>)
 80030b2:	ed93 7a00 	vldr	s14, [r3]
 80030b6:	4b34      	ldr	r3, [pc, #208]	; (8003188 <MadgwickAHRSupdate+0x13ac>)
 80030b8:	edd3 7a00 	vldr	s15, [r3]
 80030bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030c0:	4b33      	ldr	r3, [pc, #204]	; (8003190 <MadgwickAHRSupdate+0x13b4>)
 80030c2:	edd3 6a00 	vldr	s13, [r3]
 80030c6:	4b32      	ldr	r3, [pc, #200]	; (8003190 <MadgwickAHRSupdate+0x13b4>)
 80030c8:	edd3 7a00 	vldr	s15, [r3]
 80030cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030d4:	4b2d      	ldr	r3, [pc, #180]	; (800318c <MadgwickAHRSupdate+0x13b0>)
 80030d6:	edd3 6a00 	vldr	s13, [r3]
 80030da:	4b2c      	ldr	r3, [pc, #176]	; (800318c <MadgwickAHRSupdate+0x13b0>)
 80030dc:	edd3 7a00 	vldr	s15, [r3]
 80030e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030e8:	4b2b      	ldr	r3, [pc, #172]	; (8003198 <MadgwickAHRSupdate+0x13bc>)
 80030ea:	edd3 6a00 	vldr	s13, [r3]
 80030ee:	4b2a      	ldr	r3, [pc, #168]	; (8003198 <MadgwickAHRSupdate+0x13bc>)
 80030f0:	edd3 7a00 	vldr	s15, [r3]
 80030f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003100:	f7fe fe46 	bl	8001d90 <invSqrt>
 8003104:	ed87 0a30 	vstr	s0, [r7, #192]	; 0xc0
	q0 *= recipNorm;
 8003108:	4b1f      	ldr	r3, [pc, #124]	; (8003188 <MadgwickAHRSupdate+0x13ac>)
 800310a:	ed93 7a00 	vldr	s14, [r3]
 800310e:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8003112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003116:	4b1c      	ldr	r3, [pc, #112]	; (8003188 <MadgwickAHRSupdate+0x13ac>)
 8003118:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 800311c:	4b1c      	ldr	r3, [pc, #112]	; (8003190 <MadgwickAHRSupdate+0x13b4>)
 800311e:	ed93 7a00 	vldr	s14, [r3]
 8003122:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8003126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800312a:	4b19      	ldr	r3, [pc, #100]	; (8003190 <MadgwickAHRSupdate+0x13b4>)
 800312c:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8003130:	4b16      	ldr	r3, [pc, #88]	; (800318c <MadgwickAHRSupdate+0x13b0>)
 8003132:	ed93 7a00 	vldr	s14, [r3]
 8003136:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800313a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800313e:	4b13      	ldr	r3, [pc, #76]	; (800318c <MadgwickAHRSupdate+0x13b0>)
 8003140:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8003144:	4b14      	ldr	r3, [pc, #80]	; (8003198 <MadgwickAHRSupdate+0x13bc>)
 8003146:	ed93 7a00 	vldr	s14, [r3]
 800314a:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800314e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003152:	4b11      	ldr	r3, [pc, #68]	; (8003198 <MadgwickAHRSupdate+0x13bc>)
 8003154:	edc3 7a00 	vstr	s15, [r3]

	quaternion[0] = q0;
 8003158:	4b0b      	ldr	r3, [pc, #44]	; (8003188 <MadgwickAHRSupdate+0x13ac>)
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800315e:	601a      	str	r2, [r3, #0]
	quaternion[1] = q1;
 8003160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003162:	3304      	adds	r3, #4
 8003164:	4a0a      	ldr	r2, [pc, #40]	; (8003190 <MadgwickAHRSupdate+0x13b4>)
 8003166:	6812      	ldr	r2, [r2, #0]
 8003168:	601a      	str	r2, [r3, #0]
	quaternion[2] = q2;
 800316a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800316c:	3308      	adds	r3, #8
 800316e:	4a07      	ldr	r2, [pc, #28]	; (800318c <MadgwickAHRSupdate+0x13b0>)
 8003170:	6812      	ldr	r2, [r2, #0]
 8003172:	601a      	str	r2, [r3, #0]
	quaternion[3] = q3;
 8003174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003176:	330c      	adds	r3, #12
 8003178:	4a07      	ldr	r2, [pc, #28]	; (8003198 <MadgwickAHRSupdate+0x13bc>)
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	601a      	str	r2, [r3, #0]
}
 800317e:	37d8      	adds	r7, #216	; 0xd8
 8003180:	46bd      	mov	sp, r7
 8003182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003186:	bf00      	nop
 8003188:	20000000 	.word	0x20000000
 800318c:	200022c8 	.word	0x200022c8
 8003190:	200022c4 	.word	0x200022c4
 8003194:	3fe00000 	.word	0x3fe00000
 8003198:	200022cc 	.word	0x200022cc

0800319c <MadgwickAHRSupdateIMU>:

void MadgwickAHRSupdateIMU(float* quaternion, float gx, float gy, float gz, float ax, float ay, float az, float dt, float beta) {
 800319c:	b580      	push	{r7, lr}
 800319e:	b0a2      	sub	sp, #136	; 0x88
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6278      	str	r0, [r7, #36]	; 0x24
 80031a4:	ed87 0a08 	vstr	s0, [r7, #32]
 80031a8:	edc7 0a07 	vstr	s1, [r7, #28]
 80031ac:	ed87 1a06 	vstr	s2, [r7, #24]
 80031b0:	edc7 1a05 	vstr	s3, [r7, #20]
 80031b4:	ed87 2a04 	vstr	s4, [r7, #16]
 80031b8:	edc7 2a03 	vstr	s5, [r7, #12]
 80031bc:	ed87 3a02 	vstr	s6, [r7, #8]
 80031c0:	edc7 3a01 	vstr	s7, [r7, #4]
	float recipNorm;
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	float sampleFreq = 1 / dt;
 80031c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031c8:	ed97 7a02 	vldr	s14, [r7, #8]
 80031cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031d0:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80031d4:	4bed      	ldr	r3, [pc, #948]	; (800358c <MadgwickAHRSupdateIMU+0x3f0>)
 80031d6:	edd3 7a00 	vldr	s15, [r3]
 80031da:	eeb1 7a67 	vneg.f32	s14, s15
 80031de:	edd7 7a08 	vldr	s15, [r7, #32]
 80031e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031e6:	4bea      	ldr	r3, [pc, #936]	; (8003590 <MadgwickAHRSupdateIMU+0x3f4>)
 80031e8:	edd3 6a00 	vldr	s13, [r3]
 80031ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80031f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031f8:	4be6      	ldr	r3, [pc, #920]	; (8003594 <MadgwickAHRSupdateIMU+0x3f8>)
 80031fa:	edd3 6a00 	vldr	s13, [r3]
 80031fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8003202:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003206:	ee77 7a67 	vsub.f32	s15, s14, s15
 800320a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800320e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003212:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8003216:	4be0      	ldr	r3, [pc, #896]	; (8003598 <MadgwickAHRSupdateIMU+0x3fc>)
 8003218:	ed93 7a00 	vldr	s14, [r3]
 800321c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003220:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003224:	4bda      	ldr	r3, [pc, #872]	; (8003590 <MadgwickAHRSupdateIMU+0x3f4>)
 8003226:	edd3 6a00 	vldr	s13, [r3]
 800322a:	edd7 7a06 	vldr	s15, [r7, #24]
 800322e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003232:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003236:	4bd7      	ldr	r3, [pc, #860]	; (8003594 <MadgwickAHRSupdateIMU+0x3f8>)
 8003238:	edd3 6a00 	vldr	s13, [r3]
 800323c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003240:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003244:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003248:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800324c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003250:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8003254:	4bd0      	ldr	r3, [pc, #832]	; (8003598 <MadgwickAHRSupdateIMU+0x3fc>)
 8003256:	ed93 7a00 	vldr	s14, [r3]
 800325a:	edd7 7a07 	vldr	s15, [r7, #28]
 800325e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003262:	4bca      	ldr	r3, [pc, #808]	; (800358c <MadgwickAHRSupdateIMU+0x3f0>)
 8003264:	edd3 6a00 	vldr	s13, [r3]
 8003268:	edd7 7a06 	vldr	s15, [r7, #24]
 800326c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003270:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003274:	4bc7      	ldr	r3, [pc, #796]	; (8003594 <MadgwickAHRSupdateIMU+0x3f8>)
 8003276:	edd3 6a00 	vldr	s13, [r3]
 800327a:	edd7 7a08 	vldr	s15, [r7, #32]
 800327e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003282:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003286:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800328a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800328e:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8003292:	4bc1      	ldr	r3, [pc, #772]	; (8003598 <MadgwickAHRSupdateIMU+0x3fc>)
 8003294:	ed93 7a00 	vldr	s14, [r3]
 8003298:	edd7 7a06 	vldr	s15, [r7, #24]
 800329c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032a0:	4bba      	ldr	r3, [pc, #744]	; (800358c <MadgwickAHRSupdateIMU+0x3f0>)
 80032a2:	edd3 6a00 	vldr	s13, [r3]
 80032a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80032aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032b2:	4bb7      	ldr	r3, [pc, #732]	; (8003590 <MadgwickAHRSupdateIMU+0x3f4>)
 80032b4:	edd3 6a00 	vldr	s13, [r3]
 80032b8:	edd7 7a08 	vldr	s15, [r7, #32]
 80032bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80032c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032cc:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80032d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80032d4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80032d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032dc:	d10e      	bne.n	80032fc <MadgwickAHRSupdateIMU+0x160>
 80032de:	edd7 7a04 	vldr	s15, [r7, #16]
 80032e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80032e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ea:	d107      	bne.n	80032fc <MadgwickAHRSupdateIMU+0x160>
 80032ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80032f0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80032f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f8:	f000 81e0 	beq.w	80036bc <MadgwickAHRSupdateIMU+0x520>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80032fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8003300:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003304:	edd7 7a04 	vldr	s15, [r7, #16]
 8003308:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800330c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003310:	edd7 7a03 	vldr	s15, [r7, #12]
 8003314:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800331c:	eeb0 0a67 	vmov.f32	s0, s15
 8003320:	f7fe fd36 	bl	8001d90 <invSqrt>
 8003324:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
		ax *= recipNorm;
 8003328:	ed97 7a05 	vldr	s14, [r7, #20]
 800332c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003334:	edc7 7a05 	vstr	s15, [r7, #20]
		ay *= recipNorm;
 8003338:	ed97 7a04 	vldr	s14, [r7, #16]
 800333c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003344:	edc7 7a04 	vstr	s15, [r7, #16]
		az *= recipNorm;
 8003348:	ed97 7a03 	vldr	s14, [r7, #12]
 800334c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003350:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003354:	edc7 7a03 	vstr	s15, [r7, #12]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8003358:	4b8f      	ldr	r3, [pc, #572]	; (8003598 <MadgwickAHRSupdateIMU+0x3fc>)
 800335a:	edd3 7a00 	vldr	s15, [r3]
 800335e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003362:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		_2q1 = 2.0f * q1;
 8003366:	4b89      	ldr	r3, [pc, #548]	; (800358c <MadgwickAHRSupdateIMU+0x3f0>)
 8003368:	edd3 7a00 	vldr	s15, [r3]
 800336c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003370:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		_2q2 = 2.0f * q2;
 8003374:	4b86      	ldr	r3, [pc, #536]	; (8003590 <MadgwickAHRSupdateIMU+0x3f4>)
 8003376:	edd3 7a00 	vldr	s15, [r3]
 800337a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800337e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		_2q3 = 2.0f * q3;
 8003382:	4b84      	ldr	r3, [pc, #528]	; (8003594 <MadgwickAHRSupdateIMU+0x3f8>)
 8003384:	edd3 7a00 	vldr	s15, [r3]
 8003388:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800338c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		_4q0 = 4.0f * q0;
 8003390:	4b81      	ldr	r3, [pc, #516]	; (8003598 <MadgwickAHRSupdateIMU+0x3fc>)
 8003392:	edd3 7a00 	vldr	s15, [r3]
 8003396:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800339a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800339e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		_4q1 = 4.0f * q1;
 80033a2:	4b7a      	ldr	r3, [pc, #488]	; (800358c <MadgwickAHRSupdateIMU+0x3f0>)
 80033a4:	edd3 7a00 	vldr	s15, [r3]
 80033a8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80033ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033b0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_4q2 = 4.0f * q2;
 80033b4:	4b76      	ldr	r3, [pc, #472]	; (8003590 <MadgwickAHRSupdateIMU+0x3f4>)
 80033b6:	edd3 7a00 	vldr	s15, [r3]
 80033ba:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80033be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033c2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_8q1 = 8.0f * q1;
 80033c6:	4b71      	ldr	r3, [pc, #452]	; (800358c <MadgwickAHRSupdateIMU+0x3f0>)
 80033c8:	edd3 7a00 	vldr	s15, [r3]
 80033cc:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80033d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033d4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_8q2 = 8.0f * q2;
 80033d8:	4b6d      	ldr	r3, [pc, #436]	; (8003590 <MadgwickAHRSupdateIMU+0x3f4>)
 80033da:	edd3 7a00 	vldr	s15, [r3]
 80033de:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80033e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033e6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		q0q0 = q0 * q0;
 80033ea:	4b6b      	ldr	r3, [pc, #428]	; (8003598 <MadgwickAHRSupdateIMU+0x3fc>)
 80033ec:	ed93 7a00 	vldr	s14, [r3]
 80033f0:	4b69      	ldr	r3, [pc, #420]	; (8003598 <MadgwickAHRSupdateIMU+0x3fc>)
 80033f2:	edd3 7a00 	vldr	s15, [r3]
 80033f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033fa:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		q1q1 = q1 * q1;
 80033fe:	4b63      	ldr	r3, [pc, #396]	; (800358c <MadgwickAHRSupdateIMU+0x3f0>)
 8003400:	ed93 7a00 	vldr	s14, [r3]
 8003404:	4b61      	ldr	r3, [pc, #388]	; (800358c <MadgwickAHRSupdateIMU+0x3f0>)
 8003406:	edd3 7a00 	vldr	s15, [r3]
 800340a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800340e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		q2q2 = q2 * q2;
 8003412:	4b5f      	ldr	r3, [pc, #380]	; (8003590 <MadgwickAHRSupdateIMU+0x3f4>)
 8003414:	ed93 7a00 	vldr	s14, [r3]
 8003418:	4b5d      	ldr	r3, [pc, #372]	; (8003590 <MadgwickAHRSupdateIMU+0x3f4>)
 800341a:	edd3 7a00 	vldr	s15, [r3]
 800341e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003422:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		q3q3 = q3 * q3;
 8003426:	4b5b      	ldr	r3, [pc, #364]	; (8003594 <MadgwickAHRSupdateIMU+0x3f8>)
 8003428:	ed93 7a00 	vldr	s14, [r3]
 800342c:	4b59      	ldr	r3, [pc, #356]	; (8003594 <MadgwickAHRSupdateIMU+0x3f8>)
 800342e:	edd3 7a00 	vldr	s15, [r3]
 8003432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003436:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 800343a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800343e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003442:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003446:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800344a:	edd7 7a05 	vldr	s15, [r7, #20]
 800344e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003452:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003456:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800345a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800345e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003462:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003466:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800346a:	edd7 7a04 	vldr	s15, [r7, #16]
 800346e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003472:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003476:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 800347a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800347e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003482:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003486:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800348a:	edd7 7a05 	vldr	s15, [r7, #20]
 800348e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003492:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003496:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800349a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800349e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80034a2:	4b3a      	ldr	r3, [pc, #232]	; (800358c <MadgwickAHRSupdateIMU+0x3f0>)
 80034a4:	edd3 7a00 	vldr	s15, [r3]
 80034a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034b0:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80034b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80034b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034c0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80034c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034c8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80034cc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80034d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034d8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80034dc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80034e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034e8:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80034ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80034f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034f8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80034fc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003500:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003504:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003508:	4b21      	ldr	r3, [pc, #132]	; (8003590 <MadgwickAHRSupdateIMU+0x3f4>)
 800350a:	edd3 7a00 	vldr	s15, [r3]
 800350e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003512:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8003516:	edd7 7a05 	vldr	s15, [r7, #20]
 800351a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800351e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003522:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8003526:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800352a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800352e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003532:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8003536:	edd7 7a04 	vldr	s15, [r7, #16]
 800353a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800353e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003542:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003546:	ee37 7a67 	vsub.f32	s14, s14, s15
 800354a:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800354e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003552:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003556:	ee37 7a27 	vadd.f32	s14, s14, s15
 800355a:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800355e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003562:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003566:	ee37 7a27 	vadd.f32	s14, s14, s15
 800356a:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800356e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003572:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800357a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 800357e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003582:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003586:	ee27 7a87 	vmul.f32	s14, s15, s14
 800358a:	e007      	b.n	800359c <MadgwickAHRSupdateIMU+0x400>
 800358c:	200022c4 	.word	0x200022c4
 8003590:	200022c8 	.word	0x200022c8
 8003594:	200022cc 	.word	0x200022cc
 8003598:	20000000 	.word	0x20000000
 800359c:	4ba1      	ldr	r3, [pc, #644]	; (8003824 <MadgwickAHRSupdateIMU+0x688>)
 800359e:	edd3 7a00 	vldr	s15, [r3]
 80035a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035a6:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 80035aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80035ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035b6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80035ba:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80035be:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80035c2:	4b98      	ldr	r3, [pc, #608]	; (8003824 <MadgwickAHRSupdateIMU+0x688>)
 80035c4:	edd3 7a00 	vldr	s15, [r3]
 80035c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035d0:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80035d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80035d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035e0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80035e4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80035e8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80035ec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80035f0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80035f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035f8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80035fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003600:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003604:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003608:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800360c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003610:	eeb0 0a67 	vmov.f32	s0, s15
 8003614:	f7fe fbbc 	bl	8001d90 <invSqrt>
 8003618:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
		s0 *= recipNorm;
 800361c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003620:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003628:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 *= recipNorm;
 800362c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003630:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003638:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 *= recipNorm;
 800363c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003640:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003648:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 *= recipNorm;
 800364c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003650:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003658:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 800365c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003660:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003668:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800366c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003670:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		qDot2 -= beta * s1;
 8003674:	ed97 7a01 	vldr	s14, [r7, #4]
 8003678:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800367c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003680:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8003684:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003688:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		qDot3 -= beta * s2;
 800368c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003690:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003698:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800369c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036a0:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		qDot4 -= beta * s3;
 80036a4:	ed97 7a01 	vldr	s14, [r7, #4]
 80036a8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80036ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036b0:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80036b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036b8:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 80036bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036c0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80036c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036c8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80036cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036d0:	4b55      	ldr	r3, [pc, #340]	; (8003828 <MadgwickAHRSupdateIMU+0x68c>)
 80036d2:	edd3 7a00 	vldr	s15, [r3]
 80036d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036da:	4b53      	ldr	r3, [pc, #332]	; (8003828 <MadgwickAHRSupdateIMU+0x68c>)
 80036dc:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 80036e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036e4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80036e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ec:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80036f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036f4:	4b4d      	ldr	r3, [pc, #308]	; (800382c <MadgwickAHRSupdateIMU+0x690>)
 80036f6:	edd3 7a00 	vldr	s15, [r3]
 80036fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036fe:	4b4b      	ldr	r3, [pc, #300]	; (800382c <MadgwickAHRSupdateIMU+0x690>)
 8003700:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8003704:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003708:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800370c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003710:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8003714:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003718:	4b45      	ldr	r3, [pc, #276]	; (8003830 <MadgwickAHRSupdateIMU+0x694>)
 800371a:	edd3 7a00 	vldr	s15, [r3]
 800371e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003722:	4b43      	ldr	r3, [pc, #268]	; (8003830 <MadgwickAHRSupdateIMU+0x694>)
 8003724:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8003728:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800372c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003730:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003734:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8003738:	ee27 7a27 	vmul.f32	s14, s14, s15
 800373c:	4b39      	ldr	r3, [pc, #228]	; (8003824 <MadgwickAHRSupdateIMU+0x688>)
 800373e:	edd3 7a00 	vldr	s15, [r3]
 8003742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003746:	4b37      	ldr	r3, [pc, #220]	; (8003824 <MadgwickAHRSupdateIMU+0x688>)
 8003748:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800374c:	4b36      	ldr	r3, [pc, #216]	; (8003828 <MadgwickAHRSupdateIMU+0x68c>)
 800374e:	ed93 7a00 	vldr	s14, [r3]
 8003752:	4b35      	ldr	r3, [pc, #212]	; (8003828 <MadgwickAHRSupdateIMU+0x68c>)
 8003754:	edd3 7a00 	vldr	s15, [r3]
 8003758:	ee27 7a27 	vmul.f32	s14, s14, s15
 800375c:	4b33      	ldr	r3, [pc, #204]	; (800382c <MadgwickAHRSupdateIMU+0x690>)
 800375e:	edd3 6a00 	vldr	s13, [r3]
 8003762:	4b32      	ldr	r3, [pc, #200]	; (800382c <MadgwickAHRSupdateIMU+0x690>)
 8003764:	edd3 7a00 	vldr	s15, [r3]
 8003768:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800376c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003770:	4b2f      	ldr	r3, [pc, #188]	; (8003830 <MadgwickAHRSupdateIMU+0x694>)
 8003772:	edd3 6a00 	vldr	s13, [r3]
 8003776:	4b2e      	ldr	r3, [pc, #184]	; (8003830 <MadgwickAHRSupdateIMU+0x694>)
 8003778:	edd3 7a00 	vldr	s15, [r3]
 800377c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003780:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003784:	4b27      	ldr	r3, [pc, #156]	; (8003824 <MadgwickAHRSupdateIMU+0x688>)
 8003786:	edd3 6a00 	vldr	s13, [r3]
 800378a:	4b26      	ldr	r3, [pc, #152]	; (8003824 <MadgwickAHRSupdateIMU+0x688>)
 800378c:	edd3 7a00 	vldr	s15, [r3]
 8003790:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003794:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003798:	eeb0 0a67 	vmov.f32	s0, s15
 800379c:	f7fe faf8 	bl	8001d90 <invSqrt>
 80037a0:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
	q0 *= recipNorm;
 80037a4:	4b20      	ldr	r3, [pc, #128]	; (8003828 <MadgwickAHRSupdateIMU+0x68c>)
 80037a6:	ed93 7a00 	vldr	s14, [r3]
 80037aa:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80037ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037b2:	4b1d      	ldr	r3, [pc, #116]	; (8003828 <MadgwickAHRSupdateIMU+0x68c>)
 80037b4:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 80037b8:	4b1c      	ldr	r3, [pc, #112]	; (800382c <MadgwickAHRSupdateIMU+0x690>)
 80037ba:	ed93 7a00 	vldr	s14, [r3]
 80037be:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80037c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037c6:	4b19      	ldr	r3, [pc, #100]	; (800382c <MadgwickAHRSupdateIMU+0x690>)
 80037c8:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 80037cc:	4b18      	ldr	r3, [pc, #96]	; (8003830 <MadgwickAHRSupdateIMU+0x694>)
 80037ce:	ed93 7a00 	vldr	s14, [r3]
 80037d2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80037d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037da:	4b15      	ldr	r3, [pc, #84]	; (8003830 <MadgwickAHRSupdateIMU+0x694>)
 80037dc:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 80037e0:	4b10      	ldr	r3, [pc, #64]	; (8003824 <MadgwickAHRSupdateIMU+0x688>)
 80037e2:	ed93 7a00 	vldr	s14, [r3]
 80037e6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80037ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ee:	4b0d      	ldr	r3, [pc, #52]	; (8003824 <MadgwickAHRSupdateIMU+0x688>)
 80037f0:	edc3 7a00 	vstr	s15, [r3]

	quaternion[0] = q0;
 80037f4:	4b0c      	ldr	r3, [pc, #48]	; (8003828 <MadgwickAHRSupdateIMU+0x68c>)
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	601a      	str	r2, [r3, #0]
	quaternion[1] = q1;
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	3304      	adds	r3, #4
 8003800:	4a0a      	ldr	r2, [pc, #40]	; (800382c <MadgwickAHRSupdateIMU+0x690>)
 8003802:	6812      	ldr	r2, [r2, #0]
 8003804:	601a      	str	r2, [r3, #0]
	quaternion[2] = q2;
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	3308      	adds	r3, #8
 800380a:	4a09      	ldr	r2, [pc, #36]	; (8003830 <MadgwickAHRSupdateIMU+0x694>)
 800380c:	6812      	ldr	r2, [r2, #0]
 800380e:	601a      	str	r2, [r3, #0]
	quaternion[3] = q3;
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	330c      	adds	r3, #12
 8003814:	4a03      	ldr	r2, [pc, #12]	; (8003824 <MadgwickAHRSupdateIMU+0x688>)
 8003816:	6812      	ldr	r2, [r2, #0]
 8003818:	601a      	str	r2, [r3, #0]
}
 800381a:	bf00      	nop
 800381c:	3788      	adds	r7, #136	; 0x88
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	200022cc 	.word	0x200022cc
 8003828:	20000000 	.word	0x20000000
 800382c:	200022c4 	.word	0x200022c4
 8003830:	200022c8 	.word	0x200022c8

08003834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003838:	f002 fb10 	bl	8005e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800383c:	f000 f816 	bl	800386c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003840:	f000 f9ee 	bl	8003c20 <MX_GPIO_Init>
  MX_SPI5_Init();
 8003844:	f000 f98c 	bl	8003b60 <MX_SPI5_Init>
  MX_I2C1_Init();
 8003848:	f000 f8cc 	bl	80039e4 <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 800384c:	f000 f8f8 	bl	8003a40 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8003850:	f000 f91a 	bl	8003a88 <MX_SPI1_Init>
  MX_SPI4_Init();
 8003854:	f000 f94e 	bl	8003af4 <MX_SPI4_Init>
  MX_USART1_UART_Init();
 8003858:	f000 f9b8 	bl	8003bcc <MX_USART1_UART_Init>
  MX_FATFS_Init();
 800385c:	f007 fcde 	bl	800b21c <MX_FATFS_Init>
  MX_ADC1_Init();
 8003860:	f000 f86e 	bl	8003940 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  app_main();
 8003864:	f7fd fc94 	bl	8001190 <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003868:	e7fe      	b.n	8003868 <main+0x34>
	...

0800386c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b094      	sub	sp, #80	; 0x50
 8003870:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003872:	f107 0320 	add.w	r3, r7, #32
 8003876:	2230      	movs	r2, #48	; 0x30
 8003878:	2100      	movs	r1, #0
 800387a:	4618      	mov	r0, r3
 800387c:	f00c fbd4 	bl	8010028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003880:	f107 030c 	add.w	r3, r7, #12
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	605a      	str	r2, [r3, #4]
 800388a:	609a      	str	r2, [r3, #8]
 800388c:	60da      	str	r2, [r3, #12]
 800388e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003890:	2300      	movs	r3, #0
 8003892:	60bb      	str	r3, [r7, #8]
 8003894:	4b28      	ldr	r3, [pc, #160]	; (8003938 <SystemClock_Config+0xcc>)
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	4a27      	ldr	r2, [pc, #156]	; (8003938 <SystemClock_Config+0xcc>)
 800389a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800389e:	6413      	str	r3, [r2, #64]	; 0x40
 80038a0:	4b25      	ldr	r3, [pc, #148]	; (8003938 <SystemClock_Config+0xcc>)
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80038ac:	2300      	movs	r3, #0
 80038ae:	607b      	str	r3, [r7, #4]
 80038b0:	4b22      	ldr	r3, [pc, #136]	; (800393c <SystemClock_Config+0xd0>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a21      	ldr	r2, [pc, #132]	; (800393c <SystemClock_Config+0xd0>)
 80038b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038ba:	6013      	str	r3, [r2, #0]
 80038bc:	4b1f      	ldr	r3, [pc, #124]	; (800393c <SystemClock_Config+0xd0>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80038c4:	607b      	str	r3, [r7, #4]
 80038c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80038c8:	2302      	movs	r3, #2
 80038ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038cc:	2301      	movs	r3, #1
 80038ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80038d0:	2310      	movs	r3, #16
 80038d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038d4:	2302      	movs	r3, #2
 80038d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80038d8:	2300      	movs	r3, #0
 80038da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80038dc:	2308      	movs	r3, #8
 80038de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80038e0:	2364      	movs	r3, #100	; 0x64
 80038e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80038e4:	2302      	movs	r3, #2
 80038e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80038e8:	2307      	movs	r3, #7
 80038ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038ec:	f107 0320 	add.w	r3, r7, #32
 80038f0:	4618      	mov	r0, r3
 80038f2:	f004 fad7 	bl	8007ea4 <HAL_RCC_OscConfig>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80038fc:	f000 fa38 	bl	8003d70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003900:	230f      	movs	r3, #15
 8003902:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003904:	2302      	movs	r3, #2
 8003906:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800390c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003910:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003916:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003918:	f107 030c 	add.w	r3, r7, #12
 800391c:	2103      	movs	r1, #3
 800391e:	4618      	mov	r0, r3
 8003920:	f004 fd38 	bl	8008394 <HAL_RCC_ClockConfig>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800392a:	f000 fa21 	bl	8003d70 <Error_Handler>
  }
}
 800392e:	bf00      	nop
 8003930:	3750      	adds	r7, #80	; 0x50
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40023800 	.word	0x40023800
 800393c:	40007000 	.word	0x40007000

08003940 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003946:	463b      	mov	r3, r7
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	605a      	str	r2, [r3, #4]
 800394e:	609a      	str	r2, [r3, #8]
 8003950:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003952:	4b21      	ldr	r3, [pc, #132]	; (80039d8 <MX_ADC1_Init+0x98>)
 8003954:	4a21      	ldr	r2, [pc, #132]	; (80039dc <MX_ADC1_Init+0x9c>)
 8003956:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003958:	4b1f      	ldr	r3, [pc, #124]	; (80039d8 <MX_ADC1_Init+0x98>)
 800395a:	2200      	movs	r2, #0
 800395c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800395e:	4b1e      	ldr	r3, [pc, #120]	; (80039d8 <MX_ADC1_Init+0x98>)
 8003960:	2200      	movs	r2, #0
 8003962:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003964:	4b1c      	ldr	r3, [pc, #112]	; (80039d8 <MX_ADC1_Init+0x98>)
 8003966:	2200      	movs	r2, #0
 8003968:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800396a:	4b1b      	ldr	r3, [pc, #108]	; (80039d8 <MX_ADC1_Init+0x98>)
 800396c:	2200      	movs	r2, #0
 800396e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003970:	4b19      	ldr	r3, [pc, #100]	; (80039d8 <MX_ADC1_Init+0x98>)
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003978:	4b17      	ldr	r3, [pc, #92]	; (80039d8 <MX_ADC1_Init+0x98>)
 800397a:	2200      	movs	r2, #0
 800397c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800397e:	4b16      	ldr	r3, [pc, #88]	; (80039d8 <MX_ADC1_Init+0x98>)
 8003980:	4a17      	ldr	r2, [pc, #92]	; (80039e0 <MX_ADC1_Init+0xa0>)
 8003982:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003984:	4b14      	ldr	r3, [pc, #80]	; (80039d8 <MX_ADC1_Init+0x98>)
 8003986:	2200      	movs	r2, #0
 8003988:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800398a:	4b13      	ldr	r3, [pc, #76]	; (80039d8 <MX_ADC1_Init+0x98>)
 800398c:	2201      	movs	r2, #1
 800398e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003990:	4b11      	ldr	r3, [pc, #68]	; (80039d8 <MX_ADC1_Init+0x98>)
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003998:	4b0f      	ldr	r3, [pc, #60]	; (80039d8 <MX_ADC1_Init+0x98>)
 800399a:	2201      	movs	r2, #1
 800399c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800399e:	480e      	ldr	r0, [pc, #56]	; (80039d8 <MX_ADC1_Init+0x98>)
 80039a0:	f002 faf2 	bl	8005f88 <HAL_ADC_Init>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80039aa:	f000 f9e1 	bl	8003d70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80039ae:	2300      	movs	r3, #0
 80039b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80039b2:	2301      	movs	r3, #1
 80039b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80039b6:	2300      	movs	r3, #0
 80039b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039ba:	463b      	mov	r3, r7
 80039bc:	4619      	mov	r1, r3
 80039be:	4806      	ldr	r0, [pc, #24]	; (80039d8 <MX_ADC1_Init+0x98>)
 80039c0:	f002 fca6 	bl	8006310 <HAL_ADC_ConfigChannel>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80039ca:	f000 f9d1 	bl	8003d70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80039ce:	bf00      	nop
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	200027f0 	.word	0x200027f0
 80039dc:	40012000 	.word	0x40012000
 80039e0:	0f000001 	.word	0x0f000001

080039e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80039e8:	4b12      	ldr	r3, [pc, #72]	; (8003a34 <MX_I2C1_Init+0x50>)
 80039ea:	4a13      	ldr	r2, [pc, #76]	; (8003a38 <MX_I2C1_Init+0x54>)
 80039ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80039ee:	4b11      	ldr	r3, [pc, #68]	; (8003a34 <MX_I2C1_Init+0x50>)
 80039f0:	4a12      	ldr	r2, [pc, #72]	; (8003a3c <MX_I2C1_Init+0x58>)
 80039f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80039f4:	4b0f      	ldr	r3, [pc, #60]	; (8003a34 <MX_I2C1_Init+0x50>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80039fa:	4b0e      	ldr	r3, [pc, #56]	; (8003a34 <MX_I2C1_Init+0x50>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a00:	4b0c      	ldr	r3, [pc, #48]	; (8003a34 <MX_I2C1_Init+0x50>)
 8003a02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a08:	4b0a      	ldr	r3, [pc, #40]	; (8003a34 <MX_I2C1_Init+0x50>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003a0e:	4b09      	ldr	r3, [pc, #36]	; (8003a34 <MX_I2C1_Init+0x50>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a14:	4b07      	ldr	r3, [pc, #28]	; (8003a34 <MX_I2C1_Init+0x50>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a1a:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <MX_I2C1_Init+0x50>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003a20:	4804      	ldr	r0, [pc, #16]	; (8003a34 <MX_I2C1_Init+0x50>)
 8003a22:	f003 fa4f 	bl	8006ec4 <HAL_I2C_Init>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003a2c:	f000 f9a0 	bl	8003d70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003a30:	bf00      	nop
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	2000279c 	.word	0x2000279c
 8003a38:	40005400 	.word	0x40005400
 8003a3c:	000186a0 	.word	0x000186a0

08003a40 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003a44:	4b0e      	ldr	r3, [pc, #56]	; (8003a80 <MX_SDIO_SD_Init+0x40>)
 8003a46:	4a0f      	ldr	r2, [pc, #60]	; (8003a84 <MX_SDIO_SD_Init+0x44>)
 8003a48:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003a4a:	4b0d      	ldr	r3, [pc, #52]	; (8003a80 <MX_SDIO_SD_Init+0x40>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003a50:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <MX_SDIO_SD_Init+0x40>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003a56:	4b0a      	ldr	r3, [pc, #40]	; (8003a80 <MX_SDIO_SD_Init+0x40>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003a5c:	4b08      	ldr	r3, [pc, #32]	; (8003a80 <MX_SDIO_SD_Init+0x40>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003a62:	4b07      	ldr	r3, [pc, #28]	; (8003a80 <MX_SDIO_SD_Init+0x40>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 3;
 8003a68:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <MX_SDIO_SD_Init+0x40>)
 8003a6a:	2203      	movs	r2, #3
 8003a6c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003a6e:	4b04      	ldr	r3, [pc, #16]	; (8003a80 <MX_SDIO_SD_Init+0x40>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	611a      	str	r2, [r3, #16]
  /* USER CODE END SDIO_Init 2 */

}
 8003a74:	bf00      	nop
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	200028d4 	.word	0x200028d4
 8003a84:	40012c00 	.word	0x40012c00

08003a88 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003a8c:	4b17      	ldr	r3, [pc, #92]	; (8003aec <MX_SPI1_Init+0x64>)
 8003a8e:	4a18      	ldr	r2, [pc, #96]	; (8003af0 <MX_SPI1_Init+0x68>)
 8003a90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003a92:	4b16      	ldr	r3, [pc, #88]	; (8003aec <MX_SPI1_Init+0x64>)
 8003a94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003a9a:	4b14      	ldr	r3, [pc, #80]	; (8003aec <MX_SPI1_Init+0x64>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003aa0:	4b12      	ldr	r3, [pc, #72]	; (8003aec <MX_SPI1_Init+0x64>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003aa6:	4b11      	ldr	r3, [pc, #68]	; (8003aec <MX_SPI1_Init+0x64>)
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003aac:	4b0f      	ldr	r3, [pc, #60]	; (8003aec <MX_SPI1_Init+0x64>)
 8003aae:	2201      	movs	r2, #1
 8003ab0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003ab2:	4b0e      	ldr	r3, [pc, #56]	; (8003aec <MX_SPI1_Init+0x64>)
 8003ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ab8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003aba:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <MX_SPI1_Init+0x64>)
 8003abc:	2230      	movs	r2, #48	; 0x30
 8003abe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ac0:	4b0a      	ldr	r3, [pc, #40]	; (8003aec <MX_SPI1_Init+0x64>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ac6:	4b09      	ldr	r3, [pc, #36]	; (8003aec <MX_SPI1_Init+0x64>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003acc:	4b07      	ldr	r3, [pc, #28]	; (8003aec <MX_SPI1_Init+0x64>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003ad2:	4b06      	ldr	r3, [pc, #24]	; (8003aec <MX_SPI1_Init+0x64>)
 8003ad4:	220a      	movs	r2, #10
 8003ad6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003ad8:	4804      	ldr	r0, [pc, #16]	; (8003aec <MX_SPI1_Init+0x64>)
 8003ada:	f005 fdaf 	bl	800963c <HAL_SPI_Init>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003ae4:	f000 f944 	bl	8003d70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003ae8:	bf00      	nop
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	20002958 	.word	0x20002958
 8003af0:	40013000 	.word	0x40013000

08003af4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8003af8:	4b17      	ldr	r3, [pc, #92]	; (8003b58 <MX_SPI4_Init+0x64>)
 8003afa:	4a18      	ldr	r2, [pc, #96]	; (8003b5c <MX_SPI4_Init+0x68>)
 8003afc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8003afe:	4b16      	ldr	r3, [pc, #88]	; (8003b58 <MX_SPI4_Init+0x64>)
 8003b00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b04:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003b06:	4b14      	ldr	r3, [pc, #80]	; (8003b58 <MX_SPI4_Init+0x64>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b0c:	4b12      	ldr	r3, [pc, #72]	; (8003b58 <MX_SPI4_Init+0x64>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b12:	4b11      	ldr	r3, [pc, #68]	; (8003b58 <MX_SPI4_Init+0x64>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003b18:	4b0f      	ldr	r3, [pc, #60]	; (8003b58 <MX_SPI4_Init+0x64>)
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003b1e:	4b0e      	ldr	r3, [pc, #56]	; (8003b58 <MX_SPI4_Init+0x64>)
 8003b20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b24:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003b26:	4b0c      	ldr	r3, [pc, #48]	; (8003b58 <MX_SPI4_Init+0x64>)
 8003b28:	2228      	movs	r2, #40	; 0x28
 8003b2a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b2c:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <MX_SPI4_Init+0x64>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b32:	4b09      	ldr	r3, [pc, #36]	; (8003b58 <MX_SPI4_Init+0x64>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b38:	4b07      	ldr	r3, [pc, #28]	; (8003b58 <MX_SPI4_Init+0x64>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8003b3e:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <MX_SPI4_Init+0x64>)
 8003b40:	220a      	movs	r2, #10
 8003b42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003b44:	4804      	ldr	r0, [pc, #16]	; (8003b58 <MX_SPI4_Init+0x64>)
 8003b46:	f005 fd79 	bl	800963c <HAL_SPI_Init>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8003b50:	f000 f90e 	bl	8003d70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8003b54:	bf00      	nop
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	2000287c 	.word	0x2000287c
 8003b5c:	40013400 	.word	0x40013400

08003b60 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8003b64:	4b17      	ldr	r3, [pc, #92]	; (8003bc4 <MX_SPI5_Init+0x64>)
 8003b66:	4a18      	ldr	r2, [pc, #96]	; (8003bc8 <MX_SPI5_Init+0x68>)
 8003b68:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003b6a:	4b16      	ldr	r3, [pc, #88]	; (8003bc4 <MX_SPI5_Init+0x64>)
 8003b6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b70:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003b72:	4b14      	ldr	r3, [pc, #80]	; (8003bc4 <MX_SPI5_Init+0x64>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b78:	4b12      	ldr	r3, [pc, #72]	; (8003bc4 <MX_SPI5_Init+0x64>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b7e:	4b11      	ldr	r3, [pc, #68]	; (8003bc4 <MX_SPI5_Init+0x64>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b84:	4b0f      	ldr	r3, [pc, #60]	; (8003bc4 <MX_SPI5_Init+0x64>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8003b8a:	4b0e      	ldr	r3, [pc, #56]	; (8003bc4 <MX_SPI5_Init+0x64>)
 8003b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b90:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003b92:	4b0c      	ldr	r3, [pc, #48]	; (8003bc4 <MX_SPI5_Init+0x64>)
 8003b94:	2230      	movs	r2, #48	; 0x30
 8003b96:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b98:	4b0a      	ldr	r3, [pc, #40]	; (8003bc4 <MX_SPI5_Init+0x64>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b9e:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <MX_SPI5_Init+0x64>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ba4:	4b07      	ldr	r3, [pc, #28]	; (8003bc4 <MX_SPI5_Init+0x64>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8003baa:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <MX_SPI5_Init+0x64>)
 8003bac:	220a      	movs	r2, #10
 8003bae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003bb0:	4804      	ldr	r0, [pc, #16]	; (8003bc4 <MX_SPI5_Init+0x64>)
 8003bb2:	f005 fd43 	bl	800963c <HAL_SPI_Init>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8003bbc:	f000 f8d8 	bl	8003d70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8003bc0:	bf00      	nop
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	20002744 	.word	0x20002744
 8003bc8:	40015000 	.word	0x40015000

08003bcc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003bd0:	4b11      	ldr	r3, [pc, #68]	; (8003c18 <MX_USART1_UART_Init+0x4c>)
 8003bd2:	4a12      	ldr	r2, [pc, #72]	; (8003c1c <MX_USART1_UART_Init+0x50>)
 8003bd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003bd6:	4b10      	ldr	r3, [pc, #64]	; (8003c18 <MX_USART1_UART_Init+0x4c>)
 8003bd8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003bdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003bde:	4b0e      	ldr	r3, [pc, #56]	; (8003c18 <MX_USART1_UART_Init+0x4c>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003be4:	4b0c      	ldr	r3, [pc, #48]	; (8003c18 <MX_USART1_UART_Init+0x4c>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003bea:	4b0b      	ldr	r3, [pc, #44]	; (8003c18 <MX_USART1_UART_Init+0x4c>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003bf0:	4b09      	ldr	r3, [pc, #36]	; (8003c18 <MX_USART1_UART_Init+0x4c>)
 8003bf2:	220c      	movs	r2, #12
 8003bf4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bf6:	4b08      	ldr	r3, [pc, #32]	; (8003c18 <MX_USART1_UART_Init+0x4c>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bfc:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <MX_USART1_UART_Init+0x4c>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c02:	4805      	ldr	r0, [pc, #20]	; (8003c18 <MX_USART1_UART_Init+0x4c>)
 8003c04:	f006 fac2 	bl	800a18c <HAL_UART_Init>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003c0e:	f000 f8af 	bl	8003d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003c12:	bf00      	nop
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	20002838 	.word	0x20002838
 8003c1c:	40011000 	.word	0x40011000

08003c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b08a      	sub	sp, #40	; 0x28
 8003c24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c26:	f107 0314 	add.w	r3, r7, #20
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	605a      	str	r2, [r3, #4]
 8003c30:	609a      	str	r2, [r3, #8]
 8003c32:	60da      	str	r2, [r3, #12]
 8003c34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c36:	2300      	movs	r3, #0
 8003c38:	613b      	str	r3, [r7, #16]
 8003c3a:	4b48      	ldr	r3, [pc, #288]	; (8003d5c <MX_GPIO_Init+0x13c>)
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3e:	4a47      	ldr	r2, [pc, #284]	; (8003d5c <MX_GPIO_Init+0x13c>)
 8003c40:	f043 0304 	orr.w	r3, r3, #4
 8003c44:	6313      	str	r3, [r2, #48]	; 0x30
 8003c46:	4b45      	ldr	r3, [pc, #276]	; (8003d5c <MX_GPIO_Init+0x13c>)
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	f003 0304 	and.w	r3, r3, #4
 8003c4e:	613b      	str	r3, [r7, #16]
 8003c50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c52:	2300      	movs	r3, #0
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	4b41      	ldr	r3, [pc, #260]	; (8003d5c <MX_GPIO_Init+0x13c>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	4a40      	ldr	r2, [pc, #256]	; (8003d5c <MX_GPIO_Init+0x13c>)
 8003c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c60:	6313      	str	r3, [r2, #48]	; 0x30
 8003c62:	4b3e      	ldr	r3, [pc, #248]	; (8003d5c <MX_GPIO_Init+0x13c>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60bb      	str	r3, [r7, #8]
 8003c72:	4b3a      	ldr	r3, [pc, #232]	; (8003d5c <MX_GPIO_Init+0x13c>)
 8003c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c76:	4a39      	ldr	r2, [pc, #228]	; (8003d5c <MX_GPIO_Init+0x13c>)
 8003c78:	f043 0301 	orr.w	r3, r3, #1
 8003c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c7e:	4b37      	ldr	r3, [pc, #220]	; (8003d5c <MX_GPIO_Init+0x13c>)
 8003c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	60bb      	str	r3, [r7, #8]
 8003c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	607b      	str	r3, [r7, #4]
 8003c8e:	4b33      	ldr	r3, [pc, #204]	; (8003d5c <MX_GPIO_Init+0x13c>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c92:	4a32      	ldr	r2, [pc, #200]	; (8003d5c <MX_GPIO_Init+0x13c>)
 8003c94:	f043 0302 	orr.w	r3, r3, #2
 8003c98:	6313      	str	r3, [r2, #48]	; 0x30
 8003c9a:	4b30      	ldr	r3, [pc, #192]	; (8003d5c <MX_GPIO_Init+0x13c>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	607b      	str	r3, [r7, #4]
 8003ca4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LSM_CS_Pin|MOTOR_Pin, GPIO_PIN_RESET);
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8003cac:	482c      	ldr	r0, [pc, #176]	; (8003d60 <MX_GPIO_Init+0x140>)
 8003cae:	f003 f8ef 	bl	8006e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TDC_SHIM_Pin|DPA_TDC_Pin|LIS_CS_Pin, GPIO_PIN_RESET);
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	211c      	movs	r1, #28
 8003cb6:	482b      	ldr	r0, [pc, #172]	; (8003d64 <MX_GPIO_Init+0x144>)
 8003cb8:	f003 f8ea 	bl	8006e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF_CE_Pin|NRF_CS_Pin|CS_TDC_Pin|PEREGIGATEL_Pin
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f245 5106 	movw	r1, #21766	; 0x5506
 8003cc2:	4829      	ldr	r0, [pc, #164]	; (8003d68 <MX_GPIO_Init+0x148>)
 8003cc4:	f003 f8e4 	bl	8006e90 <HAL_GPIO_WritePin>
                          |LED_Pin|BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LSM_CS_Pin MOTOR_Pin */
  GPIO_InitStruct.Pin = LSM_CS_Pin|MOTOR_Pin;
 8003cc8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cda:	f107 0314 	add.w	r3, r7, #20
 8003cde:	4619      	mov	r1, r3
 8003ce0:	481f      	ldr	r0, [pc, #124]	; (8003d60 <MX_GPIO_Init+0x140>)
 8003ce2:	f002 fe55 	bl	8006990 <HAL_GPIO_Init>

  /*Configure GPIO pin : STATE_Pin */
  GPIO_InitStruct.Pin = STATE_Pin;
 8003ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cec:	2300      	movs	r3, #0
 8003cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(STATE_GPIO_Port, &GPIO_InitStruct);
 8003cf4:	f107 0314 	add.w	r3, r7, #20
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4819      	ldr	r0, [pc, #100]	; (8003d60 <MX_GPIO_Init+0x140>)
 8003cfc:	f002 fe48 	bl	8006990 <HAL_GPIO_Init>

  /*Configure GPIO pin : TDC_INT_Pin */
  GPIO_InitStruct.Pin = TDC_INT_Pin;
 8003d00:	2301      	movs	r3, #1
 8003d02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d04:	2300      	movs	r3, #0
 8003d06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TDC_INT_GPIO_Port, &GPIO_InitStruct);
 8003d0c:	f107 0314 	add.w	r3, r7, #20
 8003d10:	4619      	mov	r1, r3
 8003d12:	4816      	ldr	r0, [pc, #88]	; (8003d6c <MX_GPIO_Init+0x14c>)
 8003d14:	f002 fe3c 	bl	8006990 <HAL_GPIO_Init>

  /*Configure GPIO pins : TDC_SHIM_Pin DPA_TDC_Pin LIS_CS_Pin */
  GPIO_InitStruct.Pin = TDC_SHIM_Pin|DPA_TDC_Pin|LIS_CS_Pin;
 8003d18:	231c      	movs	r3, #28
 8003d1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d20:	2300      	movs	r3, #0
 8003d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d24:	2300      	movs	r3, #0
 8003d26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d28:	f107 0314 	add.w	r3, r7, #20
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	480d      	ldr	r0, [pc, #52]	; (8003d64 <MX_GPIO_Init+0x144>)
 8003d30:	f002 fe2e 	bl	8006990 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CE_Pin NRF_CS_Pin CS_TDC_Pin PEREGIGATEL_Pin
                           LED_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CS_Pin|CS_TDC_Pin|PEREGIGATEL_Pin
 8003d34:	f245 5306 	movw	r3, #21766	; 0x5506
 8003d38:	617b      	str	r3, [r7, #20]
                          |LED_Pin|BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d42:	2300      	movs	r3, #0
 8003d44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d46:	f107 0314 	add.w	r3, r7, #20
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	4806      	ldr	r0, [pc, #24]	; (8003d68 <MX_GPIO_Init+0x148>)
 8003d4e:	f002 fe1f 	bl	8006990 <HAL_GPIO_Init>

}
 8003d52:	bf00      	nop
 8003d54:	3728      	adds	r7, #40	; 0x28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	40020800 	.word	0x40020800
 8003d64:	40020000 	.word	0x40020000
 8003d68:	40020400 	.word	0x40020400
 8003d6c:	40021c00 	.word	0x40021c00

08003d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d74:	b672      	cpsid	i
}
 8003d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d78:	e7fe      	b.n	8003d78 <Error_Handler+0x8>
	...

08003d7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d82:	2300      	movs	r3, #0
 8003d84:	607b      	str	r3, [r7, #4]
 8003d86:	4b10      	ldr	r3, [pc, #64]	; (8003dc8 <HAL_MspInit+0x4c>)
 8003d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8a:	4a0f      	ldr	r2, [pc, #60]	; (8003dc8 <HAL_MspInit+0x4c>)
 8003d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d90:	6453      	str	r3, [r2, #68]	; 0x44
 8003d92:	4b0d      	ldr	r3, [pc, #52]	; (8003dc8 <HAL_MspInit+0x4c>)
 8003d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d9a:	607b      	str	r3, [r7, #4]
 8003d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d9e:	2300      	movs	r3, #0
 8003da0:	603b      	str	r3, [r7, #0]
 8003da2:	4b09      	ldr	r3, [pc, #36]	; (8003dc8 <HAL_MspInit+0x4c>)
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	4a08      	ldr	r2, [pc, #32]	; (8003dc8 <HAL_MspInit+0x4c>)
 8003da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dac:	6413      	str	r3, [r2, #64]	; 0x40
 8003dae:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <HAL_MspInit+0x4c>)
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db6:	603b      	str	r3, [r7, #0]
 8003db8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	40023800 	.word	0x40023800

08003dcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b08a      	sub	sp, #40	; 0x28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dd4:	f107 0314 	add.w	r3, r7, #20
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	605a      	str	r2, [r3, #4]
 8003dde:	609a      	str	r2, [r3, #8]
 8003de0:	60da      	str	r2, [r3, #12]
 8003de2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a17      	ldr	r2, [pc, #92]	; (8003e48 <HAL_ADC_MspInit+0x7c>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d127      	bne.n	8003e3e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003dee:	2300      	movs	r3, #0
 8003df0:	613b      	str	r3, [r7, #16]
 8003df2:	4b16      	ldr	r3, [pc, #88]	; (8003e4c <HAL_ADC_MspInit+0x80>)
 8003df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df6:	4a15      	ldr	r2, [pc, #84]	; (8003e4c <HAL_ADC_MspInit+0x80>)
 8003df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8003dfe:	4b13      	ldr	r3, [pc, #76]	; (8003e4c <HAL_ADC_MspInit+0x80>)
 8003e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e06:	613b      	str	r3, [r7, #16]
 8003e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	4b0f      	ldr	r3, [pc, #60]	; (8003e4c <HAL_ADC_MspInit+0x80>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	4a0e      	ldr	r2, [pc, #56]	; (8003e4c <HAL_ADC_MspInit+0x80>)
 8003e14:	f043 0301 	orr.w	r3, r3, #1
 8003e18:	6313      	str	r3, [r2, #48]	; 0x30
 8003e1a:	4b0c      	ldr	r3, [pc, #48]	; (8003e4c <HAL_ADC_MspInit+0x80>)
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003e26:	2301      	movs	r3, #1
 8003e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e32:	f107 0314 	add.w	r3, r7, #20
 8003e36:	4619      	mov	r1, r3
 8003e38:	4805      	ldr	r0, [pc, #20]	; (8003e50 <HAL_ADC_MspInit+0x84>)
 8003e3a:	f002 fda9 	bl	8006990 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003e3e:	bf00      	nop
 8003e40:	3728      	adds	r7, #40	; 0x28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40012000 	.word	0x40012000
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	40020000 	.word	0x40020000

08003e54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b08a      	sub	sp, #40	; 0x28
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e5c:	f107 0314 	add.w	r3, r7, #20
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	605a      	str	r2, [r3, #4]
 8003e66:	609a      	str	r2, [r3, #8]
 8003e68:	60da      	str	r2, [r3, #12]
 8003e6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a19      	ldr	r2, [pc, #100]	; (8003ed8 <HAL_I2C_MspInit+0x84>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d12c      	bne.n	8003ed0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e76:	2300      	movs	r3, #0
 8003e78:	613b      	str	r3, [r7, #16]
 8003e7a:	4b18      	ldr	r3, [pc, #96]	; (8003edc <HAL_I2C_MspInit+0x88>)
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7e:	4a17      	ldr	r2, [pc, #92]	; (8003edc <HAL_I2C_MspInit+0x88>)
 8003e80:	f043 0302 	orr.w	r3, r3, #2
 8003e84:	6313      	str	r3, [r2, #48]	; 0x30
 8003e86:	4b15      	ldr	r3, [pc, #84]	; (8003edc <HAL_I2C_MspInit+0x88>)
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	613b      	str	r3, [r7, #16]
 8003e90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8003e92:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e98:	2312      	movs	r3, #18
 8003e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ea4:	2304      	movs	r3, #4
 8003ea6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ea8:	f107 0314 	add.w	r3, r7, #20
 8003eac:	4619      	mov	r1, r3
 8003eae:	480c      	ldr	r0, [pc, #48]	; (8003ee0 <HAL_I2C_MspInit+0x8c>)
 8003eb0:	f002 fd6e 	bl	8006990 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	4b08      	ldr	r3, [pc, #32]	; (8003edc <HAL_I2C_MspInit+0x88>)
 8003eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebc:	4a07      	ldr	r2, [pc, #28]	; (8003edc <HAL_I2C_MspInit+0x88>)
 8003ebe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ec2:	6413      	str	r3, [r2, #64]	; 0x40
 8003ec4:	4b05      	ldr	r3, [pc, #20]	; (8003edc <HAL_I2C_MspInit+0x88>)
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ecc:	60fb      	str	r3, [r7, #12]
 8003ece:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003ed0:	bf00      	nop
 8003ed2:	3728      	adds	r7, #40	; 0x28
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	40005400 	.word	0x40005400
 8003edc:	40023800 	.word	0x40023800
 8003ee0:	40020400 	.word	0x40020400

08003ee4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a0a      	ldr	r2, [pc, #40]	; (8003f1c <HAL_I2C_MspDeInit+0x38>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d10e      	bne.n	8003f14 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003ef6:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <HAL_I2C_MspDeInit+0x3c>)
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	4a09      	ldr	r2, [pc, #36]	; (8003f20 <HAL_I2C_MspDeInit+0x3c>)
 8003efc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f00:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8003f02:	2140      	movs	r1, #64	; 0x40
 8003f04:	4807      	ldr	r0, [pc, #28]	; (8003f24 <HAL_I2C_MspDeInit+0x40>)
 8003f06:	f002 fec7 	bl	8006c98 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8003f0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f0e:	4805      	ldr	r0, [pc, #20]	; (8003f24 <HAL_I2C_MspDeInit+0x40>)
 8003f10:	f002 fec2 	bl	8006c98 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8003f14:	bf00      	nop
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40005400 	.word	0x40005400
 8003f20:	40023800 	.word	0x40023800
 8003f24:	40020400 	.word	0x40020400

08003f28 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b08a      	sub	sp, #40	; 0x28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f30:	f107 0314 	add.w	r3, r7, #20
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	605a      	str	r2, [r3, #4]
 8003f3a:	609a      	str	r2, [r3, #8]
 8003f3c:	60da      	str	r2, [r3, #12]
 8003f3e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a29      	ldr	r2, [pc, #164]	; (8003fec <HAL_SD_MspInit+0xc4>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d14b      	bne.n	8003fe2 <HAL_SD_MspInit+0xba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	613b      	str	r3, [r7, #16]
 8003f4e:	4b28      	ldr	r3, [pc, #160]	; (8003ff0 <HAL_SD_MspInit+0xc8>)
 8003f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f52:	4a27      	ldr	r2, [pc, #156]	; (8003ff0 <HAL_SD_MspInit+0xc8>)
 8003f54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f58:	6453      	str	r3, [r2, #68]	; 0x44
 8003f5a:	4b25      	ldr	r3, [pc, #148]	; (8003ff0 <HAL_SD_MspInit+0xc8>)
 8003f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f62:	613b      	str	r3, [r7, #16]
 8003f64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f66:	2300      	movs	r3, #0
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	4b21      	ldr	r3, [pc, #132]	; (8003ff0 <HAL_SD_MspInit+0xc8>)
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6e:	4a20      	ldr	r2, [pc, #128]	; (8003ff0 <HAL_SD_MspInit+0xc8>)
 8003f70:	f043 0301 	orr.w	r3, r3, #1
 8003f74:	6313      	str	r3, [r2, #48]	; 0x30
 8003f76:	4b1e      	ldr	r3, [pc, #120]	; (8003ff0 <HAL_SD_MspInit+0xc8>)
 8003f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f82:	2300      	movs	r3, #0
 8003f84:	60bb      	str	r3, [r7, #8]
 8003f86:	4b1a      	ldr	r3, [pc, #104]	; (8003ff0 <HAL_SD_MspInit+0xc8>)
 8003f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8a:	4a19      	ldr	r2, [pc, #100]	; (8003ff0 <HAL_SD_MspInit+0xc8>)
 8003f8c:	f043 0302 	orr.w	r3, r3, #2
 8003f90:	6313      	str	r3, [r2, #48]	; 0x30
 8003f92:	4b17      	ldr	r3, [pc, #92]	; (8003ff0 <HAL_SD_MspInit+0xc8>)
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	60bb      	str	r3, [r7, #8]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8003f9e:	f44f 7350 	mov.w	r3, #832	; 0x340
 8003fa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fac:	2303      	movs	r3, #3
 8003fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003fb0:	230c      	movs	r3, #12
 8003fb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fb4:	f107 0314 	add.w	r3, r7, #20
 8003fb8:	4619      	mov	r1, r3
 8003fba:	480e      	ldr	r0, [pc, #56]	; (8003ff4 <HAL_SD_MspInit+0xcc>)
 8003fbc:	f002 fce8 	bl	8006990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 8003fc0:	f248 03a0 	movw	r3, #32928	; 0x80a0
 8003fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003fd2:	230c      	movs	r3, #12
 8003fd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fd6:	f107 0314 	add.w	r3, r7, #20
 8003fda:	4619      	mov	r1, r3
 8003fdc:	4806      	ldr	r0, [pc, #24]	; (8003ff8 <HAL_SD_MspInit+0xd0>)
 8003fde:	f002 fcd7 	bl	8006990 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8003fe2:	bf00      	nop
 8003fe4:	3728      	adds	r7, #40	; 0x28
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	40012c00 	.word	0x40012c00
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	40020000 	.word	0x40020000
 8003ff8:	40020400 	.word	0x40020400

08003ffc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b090      	sub	sp, #64	; 0x40
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004004:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	605a      	str	r2, [r3, #4]
 800400e:	609a      	str	r2, [r3, #8]
 8004010:	60da      	str	r2, [r3, #12]
 8004012:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a81      	ldr	r2, [pc, #516]	; (8004220 <HAL_SPI_MspInit+0x224>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d14a      	bne.n	80040b4 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800401e:	2300      	movs	r3, #0
 8004020:	62bb      	str	r3, [r7, #40]	; 0x28
 8004022:	4b80      	ldr	r3, [pc, #512]	; (8004224 <HAL_SPI_MspInit+0x228>)
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004026:	4a7f      	ldr	r2, [pc, #508]	; (8004224 <HAL_SPI_MspInit+0x228>)
 8004028:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800402c:	6453      	str	r3, [r2, #68]	; 0x44
 800402e:	4b7d      	ldr	r3, [pc, #500]	; (8004224 <HAL_SPI_MspInit+0x228>)
 8004030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004032:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004036:	62bb      	str	r3, [r7, #40]	; 0x28
 8004038:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800403a:	2300      	movs	r3, #0
 800403c:	627b      	str	r3, [r7, #36]	; 0x24
 800403e:	4b79      	ldr	r3, [pc, #484]	; (8004224 <HAL_SPI_MspInit+0x228>)
 8004040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004042:	4a78      	ldr	r2, [pc, #480]	; (8004224 <HAL_SPI_MspInit+0x228>)
 8004044:	f043 0301 	orr.w	r3, r3, #1
 8004048:	6313      	str	r3, [r2, #48]	; 0x30
 800404a:	4b76      	ldr	r3, [pc, #472]	; (8004224 <HAL_SPI_MspInit+0x228>)
 800404c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	627b      	str	r3, [r7, #36]	; 0x24
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004056:	2300      	movs	r3, #0
 8004058:	623b      	str	r3, [r7, #32]
 800405a:	4b72      	ldr	r3, [pc, #456]	; (8004224 <HAL_SPI_MspInit+0x228>)
 800405c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405e:	4a71      	ldr	r2, [pc, #452]	; (8004224 <HAL_SPI_MspInit+0x228>)
 8004060:	f043 0302 	orr.w	r3, r3, #2
 8004064:	6313      	str	r3, [r2, #48]	; 0x30
 8004066:	4b6f      	ldr	r3, [pc, #444]	; (8004224 <HAL_SPI_MspInit+0x228>)
 8004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	623b      	str	r3, [r7, #32]
 8004070:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004072:	23a0      	movs	r3, #160	; 0xa0
 8004074:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004076:	2302      	movs	r3, #2
 8004078:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407a:	2300      	movs	r3, #0
 800407c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800407e:	2303      	movs	r3, #3
 8004080:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004082:	2305      	movs	r3, #5
 8004084:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004086:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800408a:	4619      	mov	r1, r3
 800408c:	4866      	ldr	r0, [pc, #408]	; (8004228 <HAL_SPI_MspInit+0x22c>)
 800408e:	f002 fc7f 	bl	8006990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004092:	2310      	movs	r3, #16
 8004094:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004096:	2302      	movs	r3, #2
 8004098:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409a:	2300      	movs	r3, #0
 800409c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800409e:	2303      	movs	r3, #3
 80040a0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80040a2:	2305      	movs	r3, #5
 80040a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040aa:	4619      	mov	r1, r3
 80040ac:	485f      	ldr	r0, [pc, #380]	; (800422c <HAL_SPI_MspInit+0x230>)
 80040ae:	f002 fc6f 	bl	8006990 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80040b2:	e0b1      	b.n	8004218 <HAL_SPI_MspInit+0x21c>
  else if(hspi->Instance==SPI4)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a5d      	ldr	r2, [pc, #372]	; (8004230 <HAL_SPI_MspInit+0x234>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d15c      	bne.n	8004178 <HAL_SPI_MspInit+0x17c>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80040be:	2300      	movs	r3, #0
 80040c0:	61fb      	str	r3, [r7, #28]
 80040c2:	4b58      	ldr	r3, [pc, #352]	; (8004224 <HAL_SPI_MspInit+0x228>)
 80040c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c6:	4a57      	ldr	r2, [pc, #348]	; (8004224 <HAL_SPI_MspInit+0x228>)
 80040c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80040cc:	6453      	str	r3, [r2, #68]	; 0x44
 80040ce:	4b55      	ldr	r3, [pc, #340]	; (8004224 <HAL_SPI_MspInit+0x228>)
 80040d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040d6:	61fb      	str	r3, [r7, #28]
 80040d8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040da:	2300      	movs	r3, #0
 80040dc:	61bb      	str	r3, [r7, #24]
 80040de:	4b51      	ldr	r3, [pc, #324]	; (8004224 <HAL_SPI_MspInit+0x228>)
 80040e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e2:	4a50      	ldr	r2, [pc, #320]	; (8004224 <HAL_SPI_MspInit+0x228>)
 80040e4:	f043 0301 	orr.w	r3, r3, #1
 80040e8:	6313      	str	r3, [r2, #48]	; 0x30
 80040ea:	4b4e      	ldr	r3, [pc, #312]	; (8004224 <HAL_SPI_MspInit+0x228>)
 80040ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	61bb      	str	r3, [r7, #24]
 80040f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040f6:	2300      	movs	r3, #0
 80040f8:	617b      	str	r3, [r7, #20]
 80040fa:	4b4a      	ldr	r3, [pc, #296]	; (8004224 <HAL_SPI_MspInit+0x228>)
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	4a49      	ldr	r2, [pc, #292]	; (8004224 <HAL_SPI_MspInit+0x228>)
 8004100:	f043 0302 	orr.w	r3, r3, #2
 8004104:	6313      	str	r3, [r2, #48]	; 0x30
 8004106:	4b47      	ldr	r3, [pc, #284]	; (8004224 <HAL_SPI_MspInit+0x228>)
 8004108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004112:	2302      	movs	r3, #2
 8004114:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004116:	2302      	movs	r3, #2
 8004118:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800411a:	2300      	movs	r3, #0
 800411c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800411e:	2303      	movs	r3, #3
 8004120:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8004122:	2305      	movs	r3, #5
 8004124:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004126:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800412a:	4619      	mov	r1, r3
 800412c:	483e      	ldr	r0, [pc, #248]	; (8004228 <HAL_SPI_MspInit+0x22c>)
 800412e:	f002 fc2f 	bl	8006990 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004132:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004136:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004138:	2302      	movs	r3, #2
 800413a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800413c:	2300      	movs	r3, #0
 800413e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004140:	2303      	movs	r3, #3
 8004142:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8004144:	2306      	movs	r3, #6
 8004146:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004148:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800414c:	4619      	mov	r1, r3
 800414e:	4837      	ldr	r0, [pc, #220]	; (800422c <HAL_SPI_MspInit+0x230>)
 8004150:	f002 fc1e 	bl	8006990 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004154:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004158:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800415a:	2302      	movs	r3, #2
 800415c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800415e:	2300      	movs	r3, #0
 8004160:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004162:	2303      	movs	r3, #3
 8004164:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8004166:	2306      	movs	r3, #6
 8004168:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800416a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800416e:	4619      	mov	r1, r3
 8004170:	482d      	ldr	r0, [pc, #180]	; (8004228 <HAL_SPI_MspInit+0x22c>)
 8004172:	f002 fc0d 	bl	8006990 <HAL_GPIO_Init>
}
 8004176:	e04f      	b.n	8004218 <HAL_SPI_MspInit+0x21c>
  else if(hspi->Instance==SPI5)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a2d      	ldr	r2, [pc, #180]	; (8004234 <HAL_SPI_MspInit+0x238>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d14a      	bne.n	8004218 <HAL_SPI_MspInit+0x21c>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004182:	2300      	movs	r3, #0
 8004184:	613b      	str	r3, [r7, #16]
 8004186:	4b27      	ldr	r3, [pc, #156]	; (8004224 <HAL_SPI_MspInit+0x228>)
 8004188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418a:	4a26      	ldr	r2, [pc, #152]	; (8004224 <HAL_SPI_MspInit+0x228>)
 800418c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004190:	6453      	str	r3, [r2, #68]	; 0x44
 8004192:	4b24      	ldr	r3, [pc, #144]	; (8004224 <HAL_SPI_MspInit+0x228>)
 8004194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800419a:	613b      	str	r3, [r7, #16]
 800419c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800419e:	2300      	movs	r3, #0
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	4b20      	ldr	r3, [pc, #128]	; (8004224 <HAL_SPI_MspInit+0x228>)
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	4a1f      	ldr	r2, [pc, #124]	; (8004224 <HAL_SPI_MspInit+0x228>)
 80041a8:	f043 0302 	orr.w	r3, r3, #2
 80041ac:	6313      	str	r3, [r2, #48]	; 0x30
 80041ae:	4b1d      	ldr	r3, [pc, #116]	; (8004224 <HAL_SPI_MspInit+0x228>)
 80041b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	60fb      	str	r3, [r7, #12]
 80041b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ba:	2300      	movs	r3, #0
 80041bc:	60bb      	str	r3, [r7, #8]
 80041be:	4b19      	ldr	r3, [pc, #100]	; (8004224 <HAL_SPI_MspInit+0x228>)
 80041c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c2:	4a18      	ldr	r2, [pc, #96]	; (8004224 <HAL_SPI_MspInit+0x228>)
 80041c4:	f043 0301 	orr.w	r3, r3, #1
 80041c8:	6313      	str	r3, [r2, #48]	; 0x30
 80041ca:	4b16      	ldr	r3, [pc, #88]	; (8004224 <HAL_SPI_MspInit+0x228>)
 80041cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	60bb      	str	r3, [r7, #8]
 80041d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80041d6:	2301      	movs	r3, #1
 80041d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041da:	2302      	movs	r3, #2
 80041dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041de:	2300      	movs	r3, #0
 80041e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041e2:	2303      	movs	r3, #3
 80041e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 80041e6:	2306      	movs	r3, #6
 80041e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041ee:	4619      	mov	r1, r3
 80041f0:	480e      	ldr	r0, [pc, #56]	; (800422c <HAL_SPI_MspInit+0x230>)
 80041f2:	f002 fbcd 	bl	8006990 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80041f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80041fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041fc:	2302      	movs	r3, #2
 80041fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004200:	2300      	movs	r3, #0
 8004202:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004204:	2303      	movs	r3, #3
 8004206:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8004208:	2306      	movs	r3, #6
 800420a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800420c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004210:	4619      	mov	r1, r3
 8004212:	4805      	ldr	r0, [pc, #20]	; (8004228 <HAL_SPI_MspInit+0x22c>)
 8004214:	f002 fbbc 	bl	8006990 <HAL_GPIO_Init>
}
 8004218:	bf00      	nop
 800421a:	3740      	adds	r7, #64	; 0x40
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40013000 	.word	0x40013000
 8004224:	40023800 	.word	0x40023800
 8004228:	40020000 	.word	0x40020000
 800422c:	40020400 	.word	0x40020400
 8004230:	40013400 	.word	0x40013400
 8004234:	40015000 	.word	0x40015000

08004238 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b08a      	sub	sp, #40	; 0x28
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004240:	f107 0314 	add.w	r3, r7, #20
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	605a      	str	r2, [r3, #4]
 800424a:	609a      	str	r2, [r3, #8]
 800424c:	60da      	str	r2, [r3, #12]
 800424e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a2c      	ldr	r2, [pc, #176]	; (8004308 <HAL_UART_MspInit+0xd0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d152      	bne.n	8004300 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800425a:	2300      	movs	r3, #0
 800425c:	613b      	str	r3, [r7, #16]
 800425e:	4b2b      	ldr	r3, [pc, #172]	; (800430c <HAL_UART_MspInit+0xd4>)
 8004260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004262:	4a2a      	ldr	r2, [pc, #168]	; (800430c <HAL_UART_MspInit+0xd4>)
 8004264:	f043 0310 	orr.w	r3, r3, #16
 8004268:	6453      	str	r3, [r2, #68]	; 0x44
 800426a:	4b28      	ldr	r3, [pc, #160]	; (800430c <HAL_UART_MspInit+0xd4>)
 800426c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426e:	f003 0310 	and.w	r3, r3, #16
 8004272:	613b      	str	r3, [r7, #16]
 8004274:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004276:	2300      	movs	r3, #0
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	4b24      	ldr	r3, [pc, #144]	; (800430c <HAL_UART_MspInit+0xd4>)
 800427c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427e:	4a23      	ldr	r2, [pc, #140]	; (800430c <HAL_UART_MspInit+0xd4>)
 8004280:	f043 0301 	orr.w	r3, r3, #1
 8004284:	6313      	str	r3, [r2, #48]	; 0x30
 8004286:	4b21      	ldr	r3, [pc, #132]	; (800430c <HAL_UART_MspInit+0xd4>)
 8004288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004292:	2300      	movs	r3, #0
 8004294:	60bb      	str	r3, [r7, #8]
 8004296:	4b1d      	ldr	r3, [pc, #116]	; (800430c <HAL_UART_MspInit+0xd4>)
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	4a1c      	ldr	r2, [pc, #112]	; (800430c <HAL_UART_MspInit+0xd4>)
 800429c:	f043 0302 	orr.w	r3, r3, #2
 80042a0:	6313      	str	r3, [r2, #48]	; 0x30
 80042a2:	4b1a      	ldr	r3, [pc, #104]	; (800430c <HAL_UART_MspInit+0xd4>)
 80042a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	60bb      	str	r3, [r7, #8]
 80042ac:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80042ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042b4:	2302      	movs	r3, #2
 80042b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b8:	2300      	movs	r3, #0
 80042ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042bc:	2303      	movs	r3, #3
 80042be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042c0:	2307      	movs	r3, #7
 80042c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042c4:	f107 0314 	add.w	r3, r7, #20
 80042c8:	4619      	mov	r1, r3
 80042ca:	4811      	ldr	r0, [pc, #68]	; (8004310 <HAL_UART_MspInit+0xd8>)
 80042cc:	f002 fb60 	bl	8006990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80042d0:	2308      	movs	r3, #8
 80042d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042d4:	2302      	movs	r3, #2
 80042d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d8:	2300      	movs	r3, #0
 80042da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042dc:	2303      	movs	r3, #3
 80042de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042e0:	2307      	movs	r3, #7
 80042e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042e4:	f107 0314 	add.w	r3, r7, #20
 80042e8:	4619      	mov	r1, r3
 80042ea:	480a      	ldr	r0, [pc, #40]	; (8004314 <HAL_UART_MspInit+0xdc>)
 80042ec:	f002 fb50 	bl	8006990 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80042f0:	2200      	movs	r2, #0
 80042f2:	2100      	movs	r1, #0
 80042f4:	2025      	movs	r0, #37	; 0x25
 80042f6:	f002 fb14 	bl	8006922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80042fa:	2025      	movs	r0, #37	; 0x25
 80042fc:	f002 fb2d 	bl	800695a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004300:	bf00      	nop
 8004302:	3728      	adds	r7, #40	; 0x28
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40011000 	.word	0x40011000
 800430c:	40023800 	.word	0x40023800
 8004310:	40020000 	.word	0x40020000
 8004314:	40020400 	.word	0x40020400

08004318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800431c:	e7fe      	b.n	800431c <NMI_Handler+0x4>

0800431e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800431e:	b480      	push	{r7}
 8004320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004322:	e7fe      	b.n	8004322 <HardFault_Handler+0x4>

08004324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004328:	e7fe      	b.n	8004328 <MemManage_Handler+0x4>

0800432a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800432a:	b480      	push	{r7}
 800432c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800432e:	e7fe      	b.n	800432e <BusFault_Handler+0x4>

08004330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004334:	e7fe      	b.n	8004334 <UsageFault_Handler+0x4>

08004336 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004336:	b480      	push	{r7}
 8004338:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800433a:	bf00      	nop
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004348:	bf00      	nop
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004352:	b480      	push	{r7}
 8004354:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004356:	bf00      	nop
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004364:	f001 fdcc 	bl	8005f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004368:	bf00      	nop
 800436a:	bd80      	pop	{r7, pc}

0800436c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
		//__disable_irq();
		//#pragma GCC diagnostic push;
		//#pragma GCC diagnostic ignored "-Wunused-variable"
		    volatile uint32_t sr = huart1.Instance->SR;
 8004372:	4b08      	ldr	r3, [pc, #32]	; (8004394 <USART1_IRQHandler+0x28>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	607b      	str	r3, [r7, #4]
		//#pragma GCC diagnostic pop
		    volatile uint32_t byte = huart1.Instance->DR;
 800437a:	4b06      	ldr	r3, [pc, #24]	; (8004394 <USART1_IRQHandler+0x28>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	603b      	str	r3, [r7, #0]
		    //__enable_irq();

		    gps_push_byte(byte);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	4618      	mov	r0, r3
 8004386:	f00a f9fd 	bl	800e784 <gps_push_byte>
		    (void)sr;
 800438a:	687b      	ldr	r3, [r7, #4]


	    return;
 800438c:	bf00      	nop
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	20002838 	.word	0x20002838

08004398 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
	return 1;
 800439c:	2301      	movs	r3, #1
}
 800439e:	4618      	mov	r0, r3
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <_kill>:

int _kill(int pid, int sig)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80043b2:	f00b fdef 	bl	800ff94 <__errno>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2216      	movs	r2, #22
 80043ba:	601a      	str	r2, [r3, #0]
	return -1;
 80043bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3708      	adds	r7, #8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <_exit>:

void _exit (int status)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80043d0:	f04f 31ff 	mov.w	r1, #4294967295
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f7ff ffe7 	bl	80043a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80043da:	e7fe      	b.n	80043da <_exit+0x12>

080043dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043e8:	2300      	movs	r3, #0
 80043ea:	617b      	str	r3, [r7, #20]
 80043ec:	e00a      	b.n	8004404 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80043ee:	f3af 8000 	nop.w
 80043f2:	4601      	mov	r1, r0
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	1c5a      	adds	r2, r3, #1
 80043f8:	60ba      	str	r2, [r7, #8]
 80043fa:	b2ca      	uxtb	r2, r1
 80043fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	3301      	adds	r3, #1
 8004402:	617b      	str	r3, [r7, #20]
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	429a      	cmp	r2, r3
 800440a:	dbf0      	blt.n	80043ee <_read+0x12>
	}

return len;
 800440c:	687b      	ldr	r3, [r7, #4]
}
 800440e:	4618      	mov	r0, r3
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <_close>:
	}
	return len;
}

int _close(int file)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
	return -1;
 800441e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004422:	4618      	mov	r0, r3
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800442e:	b480      	push	{r7}
 8004430:	b083      	sub	sp, #12
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
 8004436:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800443e:	605a      	str	r2, [r3, #4]
	return 0;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <_isatty>:

int _isatty(int file)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
	return 1;
 8004456:	2301      	movs	r3, #1
}
 8004458:	4618      	mov	r0, r3
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
	return 0;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
	...

08004480 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004488:	4a14      	ldr	r2, [pc, #80]	; (80044dc <_sbrk+0x5c>)
 800448a:	4b15      	ldr	r3, [pc, #84]	; (80044e0 <_sbrk+0x60>)
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004494:	4b13      	ldr	r3, [pc, #76]	; (80044e4 <_sbrk+0x64>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d102      	bne.n	80044a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800449c:	4b11      	ldr	r3, [pc, #68]	; (80044e4 <_sbrk+0x64>)
 800449e:	4a12      	ldr	r2, [pc, #72]	; (80044e8 <_sbrk+0x68>)
 80044a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80044a2:	4b10      	ldr	r3, [pc, #64]	; (80044e4 <_sbrk+0x64>)
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4413      	add	r3, r2
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d207      	bcs.n	80044c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80044b0:	f00b fd70 	bl	800ff94 <__errno>
 80044b4:	4603      	mov	r3, r0
 80044b6:	220c      	movs	r2, #12
 80044b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80044ba:	f04f 33ff 	mov.w	r3, #4294967295
 80044be:	e009      	b.n	80044d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80044c0:	4b08      	ldr	r3, [pc, #32]	; (80044e4 <_sbrk+0x64>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80044c6:	4b07      	ldr	r3, [pc, #28]	; (80044e4 <_sbrk+0x64>)
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4413      	add	r3, r2
 80044ce:	4a05      	ldr	r2, [pc, #20]	; (80044e4 <_sbrk+0x64>)
 80044d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80044d2:	68fb      	ldr	r3, [r7, #12]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3718      	adds	r7, #24
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	20020000 	.word	0x20020000
 80044e0:	00000400 	.word	0x00000400
 80044e4:	200022d0 	.word	0x200022d0
 80044e8:	20004a38 	.word	0x20004a38

080044ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80044f0:	4b06      	ldr	r3, [pc, #24]	; (800450c <SystemInit+0x20>)
 80044f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f6:	4a05      	ldr	r2, [pc, #20]	; (800450c <SystemInit+0x20>)
 80044f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004500:	bf00      	nop
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	e000ed00 	.word	0xe000ed00

08004510 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004510:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004548 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004514:	480d      	ldr	r0, [pc, #52]	; (800454c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004516:	490e      	ldr	r1, [pc, #56]	; (8004550 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004518:	4a0e      	ldr	r2, [pc, #56]	; (8004554 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800451a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800451c:	e002      	b.n	8004524 <LoopCopyDataInit>

0800451e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800451e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004522:	3304      	adds	r3, #4

08004524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004528:	d3f9      	bcc.n	800451e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800452a:	4a0b      	ldr	r2, [pc, #44]	; (8004558 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800452c:	4c0b      	ldr	r4, [pc, #44]	; (800455c <LoopFillZerobss+0x26>)
  movs r3, #0
 800452e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004530:	e001      	b.n	8004536 <LoopFillZerobss>

08004532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004534:	3204      	adds	r2, #4

08004536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004538:	d3fb      	bcc.n	8004532 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800453a:	f7ff ffd7 	bl	80044ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800453e:	f00b fd41 	bl	800ffc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004542:	f7ff f977 	bl	8003834 <main>
  bx  lr    
 8004546:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004548:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800454c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004550:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8004554:	080169c0 	.word	0x080169c0
  ldr r2, =_sbss
 8004558:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 800455c:	20004a34 	.word	0x20004a34

08004560 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004560:	e7fe      	b.n	8004560 <ADC_IRQHandler>

08004562 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b084      	sub	sp, #16
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* chip id read try count */
    uint8_t try_count = 5;
 800456a:	2305      	movs	r3, #5
 800456c:	73bb      	strb	r3, [r7, #14]
    uint8_t chip_id = 0;
 800456e:	2300      	movs	r3, #0
 8004570:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f001 fa16 	bl	80059a4 <null_ptr_check>
 8004578:	4603      	mov	r3, r0
 800457a:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 800457c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d130      	bne.n	80045e6 <bme280_init+0x84>
    {
        while (try_count)
 8004584:	e025      	b.n	80045d2 <bme280_init+0x70>
        {
            /* Read the chip-id of bme280 sensor */
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8004586:	f107 010d 	add.w	r1, r7, #13
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	20d0      	movs	r0, #208	; 0xd0
 8004590:	f000 f82f 	bl	80045f2 <bme280_get_regs>
 8004594:	4603      	mov	r3, r0
 8004596:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BME280_OK))
 8004598:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d111      	bne.n	80045c4 <bme280_init+0x62>
            {
                dev->chip_id = chip_id;
 80045a0:	7b7a      	ldrb	r2, [r7, #13]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bme280_soft_reset(dev);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f978 	bl	800489c <bme280_soft_reset>
 80045ac:	4603      	mov	r3, r0
 80045ae:	73fb      	strb	r3, [r7, #15]
                if (rslt == BME280_OK)
 80045b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d110      	bne.n	80045da <bme280_init+0x78>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f001 f869 	bl	8005690 <get_calib_data>
 80045be:	4603      	mov	r3, r0
 80045c0:	73fb      	strb	r3, [r7, #15]
                }
                break;
 80045c2:	e00a      	b.n	80045da <bme280_init+0x78>
            }

            /* Wait for 1 ms */
            dev->delay_ms(1);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	2001      	movs	r0, #1
 80045ca:	4798      	blx	r3
            --try_count;
 80045cc:	7bbb      	ldrb	r3, [r7, #14]
 80045ce:	3b01      	subs	r3, #1
 80045d0:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 80045d2:	7bbb      	ldrb	r3, [r7, #14]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1d6      	bne.n	8004586 <bme280_init+0x24>
 80045d8:	e000      	b.n	80045dc <bme280_init+0x7a>
                break;
 80045da:	bf00      	nop
        }

        /* Chip id check failed */
        if (!try_count)
 80045dc:	7bbb      	ldrb	r3, [r7, #14]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <bme280_init+0x84>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 80045e2:	23fe      	movs	r3, #254	; 0xfe
 80045e4:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80045e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 80045f2:	b590      	push	{r4, r7, lr}
 80045f4:	b087      	sub	sp, #28
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607b      	str	r3, [r7, #4]
 80045fc:	4603      	mov	r3, r0
 80045fe:	73fb      	strb	r3, [r7, #15]
 8004600:	4613      	mov	r3, r2
 8004602:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f001 f9cd 	bl	80059a4 <null_ptr_check>
 800460a:	4603      	mov	r3, r0
 800460c:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 800460e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d117      	bne.n	8004646 <bme280_get_regs+0x54>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	789b      	ldrb	r3, [r3, #2]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d003      	beq.n	8004626 <bme280_get_regs+0x34>
        {
            reg_addr = reg_addr | 0x80;
 800461e:	7bfb      	ldrb	r3, [r7, #15]
 8004620:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004624:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data  */
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685c      	ldr	r4, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	7858      	ldrb	r0, [r3, #1]
 800462e:	89bb      	ldrh	r3, [r7, #12]
 8004630:	7bf9      	ldrb	r1, [r7, #15]
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	47a0      	blx	r4
 8004636:	4603      	mov	r3, r0
 8004638:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error */
        if (rslt != BME280_OK)
 800463a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <bme280_get_regs+0x54>
        {
            rslt = BME280_E_COMM_FAIL;
 8004642:	23fc      	movs	r3, #252	; 0xfc
 8004644:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8004646:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800464a:	4618      	mov	r0, r3
 800464c:	371c      	adds	r7, #28
 800464e:	46bd      	mov	sp, r7
 8004650:	bd90      	pop	{r4, r7, pc}

08004652 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8004652:	b590      	push	{r4, r7, lr}
 8004654:	b08d      	sub	sp, #52	; 0x34
 8004656:	af00      	add	r7, sp, #0
 8004658:	60f8      	str	r0, [r7, #12]
 800465a:	60b9      	str	r1, [r7, #8]
 800465c:	603b      	str	r3, [r7, #0]
 800465e:	4613      	mov	r3, r2
 8004660:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 8004662:	79fb      	ldrb	r3, [r7, #7]
 8004664:	2b0a      	cmp	r3, #10
 8004666:	d901      	bls.n	800466c <bme280_set_regs+0x1a>
    {
        len = 10;
 8004668:	230a      	movs	r3, #10
 800466a:	71fb      	strb	r3, [r7, #7]
    }
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800466c:	6838      	ldr	r0, [r7, #0]
 800466e:	f001 f999 	bl	80059a4 <null_ptr_check>
 8004672:	4603      	mov	r3, r0
 8004674:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8004678:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800467c:	2b00      	cmp	r3, #0
 800467e:	d156      	bne.n	800472e <bme280_set_regs+0xdc>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d053      	beq.n	800472e <bme280_set_regs+0xdc>
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d050      	beq.n	800472e <bme280_set_regs+0xdc>
    {
        if (len != 0)
 800468c:	79fb      	ldrb	r3, [r7, #7]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d049      	beq.n	8004726 <bme280_set_regs+0xd4>
        {
            temp_buff[0] = reg_data[0];
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	753b      	strb	r3, [r7, #20]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	789b      	ldrb	r3, [r3, #2]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d01a      	beq.n	80046d6 <bme280_set_regs+0x84>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80046a0:	2300      	movs	r3, #0
 80046a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046a6:	e011      	b.n	80046cc <bme280_set_regs+0x7a>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80046a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	4413      	add	r3, r2
 80046b0:	781a      	ldrb	r2, [r3, #0]
 80046b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80046b6:	68f9      	ldr	r1, [r7, #12]
 80046b8:	440b      	add	r3, r1
 80046ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80046c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80046c6:	3301      	adds	r3, #1
 80046c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046cc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80046d0:	79fb      	ldrb	r3, [r7, #7]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d3e8      	bcc.n	80046a8 <bme280_set_regs+0x56>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80046d6:	79fb      	ldrb	r3, [r7, #7]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d90d      	bls.n	80046f8 <bme280_set_regs+0xa6>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80046dc:	79fb      	ldrb	r3, [r7, #7]
 80046de:	f107 0114 	add.w	r1, r7, #20
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f001 f818 	bl	800571a <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 80046ea:	79fb      	ldrb	r3, [r7, #7]
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80046f6:	e001      	b.n	80046fc <bme280_set_regs+0xaa>
            }
            else
            {
                temp_len = len;
 80046f8:	79fb      	ldrb	r3, [r7, #7]
 80046fa:	85bb      	strh	r3, [r7, #44]	; 0x2c
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	689c      	ldr	r4, [r3, #8]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	7858      	ldrb	r0, [r3, #1]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	7819      	ldrb	r1, [r3, #0]
 8004708:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800470a:	f107 0214 	add.w	r2, r7, #20
 800470e:	47a0      	blx	r4
 8004710:	4603      	mov	r3, r0
 8004712:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            /* Check for communication error */
            if (rslt != BME280_OK)
 8004716:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00b      	beq.n	8004736 <bme280_set_regs+0xe4>
            {
                rslt = BME280_E_COMM_FAIL;
 800471e:	23fc      	movs	r3, #252	; 0xfc
 8004720:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 8004724:	e007      	b.n	8004736 <bme280_set_regs+0xe4>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 8004726:	23fd      	movs	r3, #253	; 0xfd
 8004728:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 800472c:	e003      	b.n	8004736 <bme280_set_regs+0xe4>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800472e:	23ff      	movs	r3, #255	; 0xff
 8004730:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004734:	e000      	b.n	8004738 <bme280_set_regs+0xe6>
        if (len != 0)
 8004736:	bf00      	nop
    }

    return rslt;
 8004738:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800473c:	4618      	mov	r0, r3
 800473e:	3734      	adds	r7, #52	; 0x34
 8004740:	46bd      	mov	sp, r7
 8004742:	bd90      	pop	{r4, r7, pc}

08004744 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	4603      	mov	r3, r0
 800474c:	6039      	str	r1, [r7, #0]
 800474e:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t sensor_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8004750:	6838      	ldr	r0, [r7, #0]
 8004752:	f001 f927 	bl	80059a4 <null_ptr_check>
 8004756:	4603      	mov	r3, r0
 8004758:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 800475a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d13f      	bne.n	80047e2 <bme280_set_sensor_settings+0x9e>
    {
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8004762:	f107 030e 	add.w	r3, r7, #14
 8004766:	6839      	ldr	r1, [r7, #0]
 8004768:	4618      	mov	r0, r3
 800476a:	f000 f874 	bl	8004856 <bme280_get_sensor_mode>
 800476e:	4603      	mov	r3, r0
 8004770:	73fb      	strb	r3, [r7, #15]
        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8004772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d107      	bne.n	800478a <bme280_set_sensor_settings+0x46>
 800477a:	7bbb      	ldrb	r3, [r7, #14]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d004      	beq.n	800478a <bme280_set_sensor_settings+0x46>
        {
            rslt = put_device_to_sleep(dev);
 8004780:	6838      	ldr	r0, [r7, #0]
 8004782:	f000 fb74 	bl	8004e6e <put_device_to_sleep>
 8004786:	4603      	mov	r3, r0
 8004788:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BME280_OK)
 800478a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d127      	bne.n	80047e2 <bme280_set_sensor_settings+0x9e>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8004792:	79fb      	ldrb	r3, [r7, #7]
 8004794:	4619      	mov	r1, r3
 8004796:	2007      	movs	r0, #7
 8004798:	f001 f8e8 	bl	800596c <are_settings_changed>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d009      	beq.n	80047b6 <bme280_set_sensor_settings+0x72>
            {
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80047a8:	79fb      	ldrb	r3, [r7, #7]
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 f9b0 	bl	8004b12 <set_osr_settings>
 80047b2:	4603      	mov	r3, r0
 80047b4:	73fb      	strb	r3, [r7, #15]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 80047b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d111      	bne.n	80047e2 <bme280_set_sensor_settings+0x9e>
 80047be:	79fb      	ldrb	r3, [r7, #7]
 80047c0:	4619      	mov	r1, r3
 80047c2:	2018      	movs	r0, #24
 80047c4:	f001 f8d2 	bl	800596c <are_settings_changed>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d009      	beq.n	80047e2 <bme280_set_sensor_settings+0x9e>
            {
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80047d4:	79fb      	ldrb	r3, [r7, #7]
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	4618      	mov	r0, r3
 80047da:	f000 fa37 	bl	8004c4c <set_filter_standby_settings>
 80047de:	4603      	mov	r3, r0
 80047e0:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80047e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b084      	sub	sp, #16
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	4603      	mov	r3, r0
 80047f6:	6039      	str	r1, [r7, #0]
 80047f8:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80047fa:	6838      	ldr	r0, [r7, #0]
 80047fc:	f001 f8d2 	bl	80059a4 <null_ptr_check>
 8004800:	4603      	mov	r3, r0
 8004802:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME280_OK)
 8004804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d11e      	bne.n	800484a <bme280_set_sensor_mode+0x5c>
    {
        rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 800480c:	f107 030e 	add.w	r3, r7, #14
 8004810:	6839      	ldr	r1, [r7, #0]
 8004812:	4618      	mov	r0, r3
 8004814:	f000 f81f 	bl	8004856 <bme280_get_sensor_mode>
 8004818:	4603      	mov	r3, r0
 800481a:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode
         */
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 800481c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d107      	bne.n	8004834 <bme280_set_sensor_mode+0x46>
 8004824:	7bbb      	ldrb	r3, [r7, #14]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d004      	beq.n	8004834 <bme280_set_sensor_mode+0x46>
        {
            rslt = put_device_to_sleep(dev);
 800482a:	6838      	ldr	r0, [r7, #0]
 800482c:	f000 fb1f 	bl	8004e6e <put_device_to_sleep>
 8004830:	4603      	mov	r3, r0
 8004832:	73fb      	strb	r3, [r7, #15]
        }

        /* Set the power mode */
        if (rslt == BME280_OK)
 8004834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d106      	bne.n	800484a <bme280_set_sensor_mode+0x5c>
        {
            rslt = write_power_mode(sensor_mode, dev);
 800483c:	79fb      	ldrb	r3, [r7, #7]
 800483e:	6839      	ldr	r1, [r7, #0]
 8004840:	4618      	mov	r0, r3
 8004842:	f000 fae1 	bl	8004e08 <write_power_mode>
 8004846:	4603      	mov	r3, r0
 8004848:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800484a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b084      	sub	sp, #16
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
 800485e:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8004860:	6838      	ldr	r0, [r7, #0]
 8004862:	f001 f89f 	bl	80059a4 <null_ptr_check>
 8004866:	4603      	mov	r3, r0
 8004868:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME280_OK)
 800486a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10e      	bne.n	8004890 <bme280_get_sensor_mode+0x3a>
    {
        /* Read the power mode register */
        rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2201      	movs	r2, #1
 8004876:	6879      	ldr	r1, [r7, #4]
 8004878:	20f4      	movs	r0, #244	; 0xf4
 800487a:	f7ff feba 	bl	80045f2 <bme280_get_regs>
 800487e:	4603      	mov	r3, r0
 8004880:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	b2da      	uxtb	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8004890:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_RESET_ADDR;
 80048a4:	23e0      	movs	r3, #224	; 0xe0
 80048a6:	737b      	strb	r3, [r7, #13]
    uint8_t status_reg = 0;
 80048a8:	2300      	movs	r3, #0
 80048aa:	733b      	strb	r3, [r7, #12]
    uint8_t try_run = 5;
 80048ac:	2305      	movs	r3, #5
 80048ae:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 80048b0:	23b6      	movs	r3, #182	; 0xb6
 80048b2:	72fb      	strb	r3, [r7, #11]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f001 f875 	bl	80059a4 <null_ptr_check>
 80048ba:	4603      	mov	r3, r0
 80048bc:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 80048be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d12f      	bne.n	8004926 <bme280_soft_reset+0x8a>
    {
        /* Write the soft reset command in the sensor */
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80048c6:	f107 010b 	add.w	r1, r7, #11
 80048ca:	f107 000d 	add.w	r0, r7, #13
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f7ff febe 	bl	8004652 <bme280_set_regs>
 80048d6:	4603      	mov	r3, r0
 80048d8:	73fb      	strb	r3, [r7, #15]

        if (rslt == BME280_OK)
 80048da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d121      	bne.n	8004926 <bme280_soft_reset+0x8a>
        {
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                dev->delay_ms(2);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	2002      	movs	r0, #2
 80048e8:	4798      	blx	r3
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 80048ea:	f107 010c 	add.w	r1, r7, #12
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	20f3      	movs	r0, #243	; 0xf3
 80048f4:	f7ff fe7d 	bl	80045f2 <bme280_get_regs>
 80048f8:	4603      	mov	r3, r0
 80048fa:	73fb      	strb	r3, [r7, #15]
            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 80048fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d109      	bne.n	8004918 <bme280_soft_reset+0x7c>
 8004904:	7bbb      	ldrb	r3, [r7, #14]
 8004906:	1e5a      	subs	r2, r3, #1
 8004908:	73ba      	strb	r2, [r7, #14]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d004      	beq.n	8004918 <bme280_soft_reset+0x7c>
 800490e:	7b3b      	ldrb	r3, [r7, #12]
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1e4      	bne.n	80048e2 <bme280_soft_reset+0x46>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 8004918:	7b3b      	ldrb	r3, [r7, #12]
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <bme280_soft_reset+0x8a>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 8004922:	23fa      	movs	r3, #250	; 0xfa
 8004924:	73fb      	strb	r3, [r7, #15]
            }

        }
    }

    return rslt;
 8004926:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b08a      	sub	sp, #40	; 0x28
 8004936:	af00      	add	r7, sp, #0
 8004938:	4603      	mov	r3, r0
 800493a:	60b9      	str	r1, [r7, #8]
 800493c:	607a      	str	r2, [r7, #4]
 800493e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 8004940:	2300      	movs	r3, #0
 8004942:	61fb      	str	r3, [r7, #28]
 8004944:	2300      	movs	r3, #0
 8004946:	623b      	str	r3, [r7, #32]
    struct bme280_uncomp_data uncomp_data = { 0 };
 8004948:	f107 0310 	add.w	r3, r7, #16
 800494c:	2200      	movs	r2, #0
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	605a      	str	r2, [r3, #4]
 8004952:	609a      	str	r2, [r3, #8]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f001 f825 	bl	80059a4 <null_ptr_check>
 800495a:	4603      	mov	r3, r0
 800495c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if ((rslt == BME280_OK) && (comp_data != NULL))
 8004960:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004964:	2b00      	cmp	r3, #0
 8004966:	d124      	bne.n	80049b2 <bme280_get_sensor_data+0x80>
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d021      	beq.n	80049b2 <bme280_get_sensor_data+0x80>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 800496e:	f107 011c 	add.w	r1, r7, #28
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2208      	movs	r2, #8
 8004976:	20f7      	movs	r0, #247	; 0xf7
 8004978:	f7ff fe3b 	bl	80045f2 <bme280_get_regs>
 800497c:	4603      	mov	r3, r0
 800497e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 8004982:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004986:	2b00      	cmp	r3, #0
 8004988:	d116      	bne.n	80049b8 <bme280_get_sensor_data+0x86>
        {
            /* Parse the read data from the sensor */
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 800498a:	f107 0210 	add.w	r2, r7, #16
 800498e:	f107 031c 	add.w	r3, r7, #28
 8004992:	4611      	mov	r1, r2
 8004994:	4618      	mov	r0, r3
 8004996:	f000 f815 	bl	80049c4 <bme280_parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	3310      	adds	r3, #16
 800499e:	f107 0110 	add.w	r1, r7, #16
 80049a2:	7bf8      	ldrb	r0, [r7, #15]
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	f000 f853 	bl	8004a50 <bme280_compensate_data>
 80049aa:	4603      	mov	r3, r0
 80049ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 80049b0:	e002      	b.n	80049b8 <bme280_get_sensor_data+0x86>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80049b2:	23ff      	movs	r3, #255	; 0xff
 80049b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 80049b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3728      	adds	r7, #40	; 0x28
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b087      	sub	sp, #28
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	031b      	lsls	r3, r3, #12
 80049d4:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	3301      	adds	r3, #1
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	011b      	lsls	r3, r3, #4
 80049de:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3302      	adds	r3, #2
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	091b      	lsrs	r3, r3, #4
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	431a      	orrs	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	431a      	orrs	r2, r3
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << 12;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	3303      	adds	r3, #3
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	031b      	lsls	r3, r3, #12
 8004a02:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 4;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	3304      	adds	r3, #4
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	011b      	lsls	r3, r3, #4
 8004a0c:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	3305      	adds	r3, #5
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	091b      	lsrs	r3, r3, #4
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	431a      	orrs	r2, r3
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for humidity data */
    data_msb = (uint32_t)reg_data[6] << 8;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	3306      	adds	r3, #6
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	021b      	lsls	r3, r3, #8
 8004a30:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[7];
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3307      	adds	r3, #7
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	613b      	str	r3, [r7, #16]
    uncomp_data->humidity = data_msb | data_lsb;
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	609a      	str	r2, [r3, #8]
}
 8004a44:	bf00      	nop
 8004a46:	371c      	adds	r7, #28
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	607a      	str	r2, [r7, #4]
 8004a5a:	603b      	str	r3, [r7, #0]
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_OK;
 8004a60:	2300      	movs	r3, #0
 8004a62:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d04b      	beq.n	8004b02 <bme280_compensate_data+0xb2>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d048      	beq.n	8004b02 <bme280_compensate_data+0xb2>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d045      	beq.n	8004b02 <bme280_compensate_data+0xb2>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8004a76:	6879      	ldr	r1, [r7, #4]
 8004a78:	f04f 0200 	mov.w	r2, #0
 8004a7c:	f04f 0300 	mov.w	r3, #0
 8004a80:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 8004a84:	6879      	ldr	r1, [r7, #4]
 8004a86:	f04f 0200 	mov.w	r2, #0
 8004a8a:	f04f 0300 	mov.w	r3, #0
 8004a8e:	e9c1 2300 	strd	r2, r3, [r1]
        comp_data->humidity = 0;
 8004a92:	6879      	ldr	r1, [r7, #4]
 8004a94:	f04f 0200 	mov.w	r2, #0
 8004a98:	f04f 0300 	mov.w	r3, #0
 8004a9c:	e9c1 2304 	strd	r2, r3, [r1, #16]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 8004aa0:	7bfb      	ldrb	r3, [r7, #15]
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <bme280_compensate_data+0x70>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8004aaa:	6839      	ldr	r1, [r7, #0]
 8004aac:	68b8      	ldr	r0, [r7, #8]
 8004aae:	f000 fa2b 	bl	8004f08 <compensate_temperature>
 8004ab2:	eeb0 7a40 	vmov.f32	s14, s0
 8004ab6:	eef0 7a60 	vmov.f32	s15, s1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	ed83 7b02 	vstr	d7, [r3, #8]
        }
        if (sensor_comp & BME280_PRESS)
 8004ac0:	7bfb      	ldrb	r3, [r7, #15]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <bme280_compensate_data+0x90>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8004aca:	6839      	ldr	r1, [r7, #0]
 8004acc:	68b8      	ldr	r0, [r7, #8]
 8004ace:	f000 faef 	bl	80050b0 <compensate_pressure>
 8004ad2:	eeb0 7a40 	vmov.f32	s14, s0
 8004ad6:	eef0 7a60 	vmov.f32	s15, s1
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	ed83 7b00 	vstr	d7, [r3]
        }
        if (sensor_comp & BME280_HUM)
 8004ae0:	7bfb      	ldrb	r3, [r7, #15]
 8004ae2:	f003 0304 	and.w	r3, r3, #4
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00d      	beq.n	8004b06 <bme280_compensate_data+0xb6>
        {
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8004aea:	6839      	ldr	r1, [r7, #0]
 8004aec:	68b8      	ldr	r0, [r7, #8]
 8004aee:	f000 fcaf 	bl	8005450 <compensate_humidity>
 8004af2:	eeb0 7a40 	vmov.f32	s14, s0
 8004af6:	eef0 7a60 	vmov.f32	s15, s1
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	ed83 7b04 	vstr	d7, [r3, #16]
        if (sensor_comp & BME280_HUM)
 8004b00:	e001      	b.n	8004b06 <bme280_compensate_data+0xb6>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8004b02:	23ff      	movs	r3, #255	; 0xff
 8004b04:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004b06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3718      	adds	r7, #24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <set_osr_settings>:
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings,
                               const struct bme280_settings *settings,
                               const struct bme280_dev *dev)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b086      	sub	sp, #24
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	4603      	mov	r3, r0
 8004b1a:	60b9      	str	r1, [r7, #8]
 8004b1c:	607a      	str	r2, [r7, #4]
 8004b1e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8004b20:	2301      	movs	r3, #1
 8004b22:	75fb      	strb	r3, [r7, #23]

    if (desired_settings & BME280_OSR_HUM_SEL)
 8004b24:	7bfb      	ldrb	r3, [r7, #15]
 8004b26:	f003 0304 	and.w	r3, r3, #4
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d005      	beq.n	8004b3a <set_osr_settings+0x28>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	68b8      	ldr	r0, [r7, #8]
 8004b32:	f000 f815 	bl	8004b60 <set_osr_humidity_settings>
 8004b36:	4603      	mov	r3, r0
 8004b38:	75fb      	strb	r3, [r7, #23]
    }
    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8004b3a:	7bfb      	ldrb	r3, [r7, #15]
 8004b3c:	f003 0303 	and.w	r3, r3, #3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d007      	beq.n	8004b54 <set_osr_settings+0x42>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	68b9      	ldr	r1, [r7, #8]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 f842 	bl	8004bd4 <set_osr_press_temp_settings>
 8004b50:	4603      	mov	r3, r0
 8004b52:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004b54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3718      	adds	r7, #24
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8004b6a:	23f2      	movs	r3, #242	; 0xf2
 8004b6c:	733b      	strb	r3, [r7, #12]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	789b      	ldrb	r3, [r3, #2]
 8004b72:	f003 0307 	and.w	r3, r3, #7
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	73bb      	strb	r3, [r7, #14]

    /* Write the humidity control value in the register */
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8004b7a:	f107 010e 	add.w	r1, r7, #14
 8004b7e:	f107 000c 	add.w	r0, r7, #12
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f7ff fd64 	bl	8004652 <bme280_set_regs>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	73fb      	strb	r3, [r7, #15]

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 8004b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d118      	bne.n	8004bc8 <set_osr_humidity_settings+0x68>
    {
        reg_addr = BME280_CTRL_MEAS_ADDR;
 8004b96:	23f4      	movs	r3, #244	; 0xf4
 8004b98:	733b      	strb	r3, [r7, #12]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8004b9a:	7b38      	ldrb	r0, [r7, #12]
 8004b9c:	f107 010d 	add.w	r1, r7, #13
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f7ff fd25 	bl	80045f2 <bme280_get_regs>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME280_OK)
 8004bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d109      	bne.n	8004bc8 <set_osr_humidity_settings+0x68>
        {
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8004bb4:	f107 010d 	add.w	r1, r7, #13
 8004bb8:	f107 000c 	add.w	r0, r7, #12
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f7ff fd47 	bl	8004652 <bme280_set_regs>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004bc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          const struct bme280_dev *dev)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	4603      	mov	r3, r0
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
 8004be0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8004be2:	23f4      	movs	r3, #244	; 0xf4
 8004be4:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8004be6:	7db8      	ldrb	r0, [r7, #22]
 8004be8:	f107 0115 	add.w	r1, r7, #21
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f7ff fcff 	bl	80045f2 <bme280_get_regs>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	75fb      	strb	r3, [r7, #23]
    if (rslt == BME280_OK)
 8004bf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d11f      	bne.n	8004c40 <set_osr_press_temp_settings+0x6c>
    {
        if (desired_settings & BME280_OSR_PRESS_SEL)
 8004c00:	7bfb      	ldrb	r3, [r7, #15]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d005      	beq.n	8004c16 <set_osr_press_temp_settings+0x42>
        {
            fill_osr_press_settings(&reg_data, settings);
 8004c0a:	f107 0315 	add.w	r3, r7, #21
 8004c0e:	68b9      	ldr	r1, [r7, #8]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 f88e 	bl	8004d32 <fill_osr_press_settings>
        }
        if (desired_settings & BME280_OSR_TEMP_SEL)
 8004c16:	7bfb      	ldrb	r3, [r7, #15]
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d005      	beq.n	8004c2c <set_osr_press_temp_settings+0x58>
        {
            fill_osr_temp_settings(&reg_data, settings);
 8004c20:	f107 0315 	add.w	r3, r7, #21
 8004c24:	68b9      	ldr	r1, [r7, #8]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 f8a0 	bl	8004d6c <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8004c2c:	f107 0115 	add.w	r1, r7, #21
 8004c30:	f107 0016 	add.w	r0, r7, #22
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f7ff fd0b 	bl	8004652 <bme280_set_regs>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004c40:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3718      	adds	r7, #24
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          const struct bme280_dev *dev)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	4603      	mov	r3, r0
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
 8004c58:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 8004c5a:	23f5      	movs	r3, #245	; 0xf5
 8004c5c:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8004c5e:	7db8      	ldrb	r0, [r7, #22]
 8004c60:	f107 0115 	add.w	r1, r7, #21
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f7ff fcc3 	bl	80045f2 <bme280_get_regs>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	75fb      	strb	r3, [r7, #23]
    if (rslt == BME280_OK)
 8004c70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d11f      	bne.n	8004cb8 <set_filter_standby_settings+0x6c>
    {
        if (desired_settings & BME280_FILTER_SEL)
 8004c78:	7bfb      	ldrb	r3, [r7, #15]
 8004c7a:	f003 0308 	and.w	r3, r3, #8
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d005      	beq.n	8004c8e <set_filter_standby_settings+0x42>
        {
            fill_filter_settings(&reg_data, settings);
 8004c82:	f107 0315 	add.w	r3, r7, #21
 8004c86:	68b9      	ldr	r1, [r7, #8]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f000 f81b 	bl	8004cc4 <fill_filter_settings>
        }
        if (desired_settings & BME280_STANDBY_SEL)
 8004c8e:	7bfb      	ldrb	r3, [r7, #15]
 8004c90:	f003 0310 	and.w	r3, r3, #16
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d005      	beq.n	8004ca4 <set_filter_standby_settings+0x58>
        {
            fill_standby_settings(&reg_data, settings);
 8004c98:	f107 0315 	add.w	r3, r7, #21
 8004c9c:	68b9      	ldr	r1, [r7, #8]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 f82d 	bl	8004cfe <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8004ca4:	f107 0115 	add.w	r1, r7, #21
 8004ca8:	f107 0016 	add.w	r0, r7, #22
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f7ff fccf 	bl	8004652 <bme280_set_regs>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004cb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3718      	adds	r7, #24
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	b25b      	sxtb	r3, r3
 8004cd4:	f023 031c 	bic.w	r3, r3, #28
 8004cd8:	b25a      	sxtb	r2, r3
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	78db      	ldrb	r3, [r3, #3]
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	b25b      	sxtb	r3, r3
 8004ce2:	f003 031c 	and.w	r3, r3, #28
 8004ce6:	b25b      	sxtb	r3, r3
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	b25b      	sxtb	r3, r3
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	701a      	strb	r2, [r3, #0]
}
 8004cf2:	bf00      	nop
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
 8004d06:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	b25b      	sxtb	r3, r3
 8004d0e:	f003 031f 	and.w	r3, r3, #31
 8004d12:	b25a      	sxtb	r2, r3
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	791b      	ldrb	r3, [r3, #4]
 8004d18:	015b      	lsls	r3, r3, #5
 8004d1a:	b25b      	sxtb	r3, r3
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	b25b      	sxtb	r3, r3
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	701a      	strb	r2, [r3, #0]
}
 8004d26:	bf00      	nop
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b083      	sub	sp, #12
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
 8004d3a:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	b25b      	sxtb	r3, r3
 8004d42:	f023 031c 	bic.w	r3, r3, #28
 8004d46:	b25a      	sxtb	r2, r3
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	b25b      	sxtb	r3, r3
 8004d50:	f003 031c 	and.w	r3, r3, #28
 8004d54:	b25b      	sxtb	r3, r3
 8004d56:	4313      	orrs	r3, r2
 8004d58:	b25b      	sxtb	r3, r3
 8004d5a:	b2da      	uxtb	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	701a      	strb	r2, [r3, #0]
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	b25b      	sxtb	r3, r3
 8004d7c:	f003 031f 	and.w	r3, r3, #31
 8004d80:	b25a      	sxtb	r2, r3
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	785b      	ldrb	r3, [r3, #1]
 8004d86:	015b      	lsls	r3, r3, #5
 8004d88:	b25b      	sxtb	r3, r3
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	b25b      	sxtb	r3, r3
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	701a      	strb	r2, [r3, #0]
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	f003 0307 	and.w	r3, r3, #7
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	3302      	adds	r3, #2
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	109b      	asrs	r3, r3, #2
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	f003 0307 	and.w	r3, r3, #7
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	3302      	adds	r3, #2
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	095b      	lsrs	r3, r3, #5
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	3303      	adds	r3, #3
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	109b      	asrs	r3, r3, #2
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	3303      	adds	r3, #3
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	095b      	lsrs	r3, r3, #5
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	711a      	strb	r2, [r3, #4]
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	4603      	mov	r3, r0
 8004e10:	6039      	str	r1, [r7, #0]
 8004e12:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8004e14:	23f4      	movs	r3, #244	; 0xf4
 8004e16:	73bb      	strb	r3, [r7, #14]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8004e18:	7bb8      	ldrb	r0, [r7, #14]
 8004e1a:	f107 010d 	add.w	r1, r7, #13
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f7ff fbe6 	bl	80045f2 <bme280_get_regs>
 8004e26:	4603      	mov	r3, r0
 8004e28:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BME280_OK)
 8004e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d117      	bne.n	8004e62 <write_power_mode+0x5a>
    {
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8004e32:	7b7b      	ldrb	r3, [r7, #13]
 8004e34:	b25b      	sxtb	r3, r3
 8004e36:	f023 0303 	bic.w	r3, r3, #3
 8004e3a:	b25a      	sxtb	r2, r3
 8004e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e40:	f003 0303 	and.w	r3, r3, #3
 8004e44:	b25b      	sxtb	r3, r3
 8004e46:	4313      	orrs	r3, r2
 8004e48:	b25b      	sxtb	r3, r3
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8004e4e:	f107 010d 	add.w	r1, r7, #13
 8004e52:	f107 000e 	add.w	r0, r7, #14
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f7ff fbfa 	bl	8004652 <bme280_set_regs>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b086      	sub	sp, #24
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];
    struct bme280_settings settings;

    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8004e76:	f107 0110 	add.w	r1, r7, #16
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2204      	movs	r2, #4
 8004e7e:	20f2      	movs	r0, #242	; 0xf2
 8004e80:	f7ff fbb7 	bl	80045f2 <bme280_get_regs>
 8004e84:	4603      	mov	r3, r0
 8004e86:	75fb      	strb	r3, [r7, #23]
    if (rslt == BME280_OK)
 8004e88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d118      	bne.n	8004ec2 <put_device_to_sleep+0x54>
    {
        parse_device_settings(reg_data, &settings);
 8004e90:	f107 0208 	add.w	r2, r7, #8
 8004e94:	f107 0310 	add.w	r3, r7, #16
 8004e98:	4611      	mov	r1, r2
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7ff ff80 	bl	8004da0 <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f7ff fcfb 	bl	800489c <bme280_soft_reset>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	75fb      	strb	r3, [r7, #23]
        if (rslt == BME280_OK)
 8004eaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d107      	bne.n	8004ec2 <put_device_to_sleep+0x54>
        {
            rslt = reload_device_settings(&settings, dev);
 8004eb2:	f107 0308 	add.w	r3, r7, #8
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 f808 	bl	8004ece <reload_device_settings>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8004ec2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b084      	sub	sp, #16
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
 8004ed6:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	6879      	ldr	r1, [r7, #4]
 8004edc:	201f      	movs	r0, #31
 8004ede:	f7ff fe18 	bl	8004b12 <set_osr_settings>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME280_OK)
 8004ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d106      	bne.n	8004efc <reload_device_settings+0x2e>
    {
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	6879      	ldr	r1, [r7, #4]
 8004ef2:	201f      	movs	r0, #31
 8004ef4:	f7ff feaa 	bl	8004c4c <set_filter_standby_settings>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <compensate_temperature>:
/*!
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data, struct bme280_calib_data *calib_data)
{
 8004f08:	b5b0      	push	{r4, r5, r7, lr}
 8004f0a:	b08c      	sub	sp, #48	; 0x30
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double temperature;
    double temperature_min = -40;
 8004f12:	f04f 0200 	mov.w	r2, #0
 8004f16:	4b5f      	ldr	r3, [pc, #380]	; (8005094 <compensate_temperature+0x18c>)
 8004f18:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double temperature_max = 85;
 8004f1c:	f04f 0200 	mov.w	r2, #0
 8004f20:	4b5d      	ldr	r3, [pc, #372]	; (8005098 <compensate_temperature+0x190>)
 8004f22:	e9c7 2306 	strd	r2, r3, [r7, #24]

    var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_t1) / 1024.0;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fb faf2 	bl	8000514 <__aeabi_ui2d>
 8004f30:	f04f 0200 	mov.w	r2, #0
 8004f34:	4b59      	ldr	r3, [pc, #356]	; (800509c <compensate_temperature+0x194>)
 8004f36:	f7fb fc91 	bl	800085c <__aeabi_ddiv>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	4614      	mov	r4, r2
 8004f40:	461d      	mov	r5, r3
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fb fae4 	bl	8000514 <__aeabi_ui2d>
 8004f4c:	f04f 0200 	mov.w	r2, #0
 8004f50:	4b53      	ldr	r3, [pc, #332]	; (80050a0 <compensate_temperature+0x198>)
 8004f52:	f7fb fc83 	bl	800085c <__aeabi_ddiv>
 8004f56:	4602      	mov	r2, r0
 8004f58:	460b      	mov	r3, r1
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	4629      	mov	r1, r5
 8004f5e:	f7fb f99b 	bl	8000298 <__aeabi_dsub>
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = var1 * ((double)calib_data->dig_t2);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7fb fadf 	bl	8000534 <__aeabi_i2d>
 8004f76:	4602      	mov	r2, r0
 8004f78:	460b      	mov	r3, r1
 8004f7a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004f7e:	f7fb fb43 	bl	8000608 <__aeabi_dmul>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_t1) / 8192.0);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7fb fac0 	bl	8000514 <__aeabi_ui2d>
 8004f94:	f04f 0200 	mov.w	r2, #0
 8004f98:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8004f9c:	f7fb fc5e 	bl	800085c <__aeabi_ddiv>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	4614      	mov	r4, r2
 8004fa6:	461d      	mov	r5, r3
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	881b      	ldrh	r3, [r3, #0]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7fb fab1 	bl	8000514 <__aeabi_ui2d>
 8004fb2:	f04f 0200 	mov.w	r2, #0
 8004fb6:	4b3b      	ldr	r3, [pc, #236]	; (80050a4 <compensate_temperature+0x19c>)
 8004fb8:	f7fb fc50 	bl	800085c <__aeabi_ddiv>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	4629      	mov	r1, r5
 8004fc4:	f7fb f968 	bl	8000298 <__aeabi_dsub>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var2 = (var2 * var2) * ((double)calib_data->dig_t3);
 8004fd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fd4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004fd8:	f7fb fb16 	bl	8000608 <__aeabi_dmul>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	460b      	mov	r3, r1
 8004fe0:	4614      	mov	r4, r2
 8004fe2:	461d      	mov	r5, r3
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7fb faa2 	bl	8000534 <__aeabi_i2d>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	4629      	mov	r1, r5
 8004ff8:	f7fb fb06 	bl	8000608 <__aeabi_dmul>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	460b      	mov	r3, r1
 8005000:	e9c7 2302 	strd	r2, r3, [r7, #8]
    calib_data->t_fine = (int32_t)(var1 + var2);
 8005004:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005008:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800500c:	f7fb f946 	bl	800029c <__adddf3>
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	4610      	mov	r0, r2
 8005016:	4619      	mov	r1, r3
 8005018:	f7fb fda6 	bl	8000b68 <__aeabi_d2iz>
 800501c:	4602      	mov	r2, r0
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	625a      	str	r2, [r3, #36]	; 0x24
    temperature = (var1 + var2) / 5120.0;
 8005022:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005026:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800502a:	f7fb f937 	bl	800029c <__adddf3>
 800502e:	4602      	mov	r2, r0
 8005030:	460b      	mov	r3, r1
 8005032:	4610      	mov	r0, r2
 8005034:	4619      	mov	r1, r3
 8005036:	f04f 0200 	mov.w	r2, #0
 800503a:	4b1b      	ldr	r3, [pc, #108]	; (80050a8 <compensate_temperature+0x1a0>)
 800503c:	f7fb fc0e 	bl	800085c <__aeabi_ddiv>
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
 8005044:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    if (temperature < temperature_min)
 8005048:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800504c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005050:	f7fb fd4c 	bl	8000aec <__aeabi_dcmplt>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d004      	beq.n	8005064 <compensate_temperature+0x15c>
    {
        temperature = temperature_min;
 800505a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800505e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8005062:	e00c      	b.n	800507e <compensate_temperature+0x176>
    }
    else if (temperature > temperature_max)
 8005064:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005068:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800506c:	f7fb fd5c 	bl	8000b28 <__aeabi_dcmpgt>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <compensate_temperature+0x176>
    {
        temperature = temperature_max;
 8005076:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800507a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    }

    return temperature;
 800507e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005082:	ec43 2b17 	vmov	d7, r2, r3
}
 8005086:	eeb0 0a47 	vmov.f32	s0, s14
 800508a:	eef0 0a67 	vmov.f32	s1, s15
 800508e:	3730      	adds	r7, #48	; 0x30
 8005090:	46bd      	mov	sp, r7
 8005092:	bdb0      	pop	{r4, r5, r7, pc}
 8005094:	c0440000 	.word	0xc0440000
 8005098:	40554000 	.word	0x40554000
 800509c:	40d00000 	.word	0x40d00000
 80050a0:	40900000 	.word	0x40900000
 80050a4:	40c00000 	.word	0x40c00000
 80050a8:	40b40000 	.word	0x40b40000
 80050ac:	00000000 	.word	0x00000000

080050b0 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 80050b0:	b5b0      	push	{r4, r5, r7, lr}
 80050b2:	b08e      	sub	sp, #56	; 0x38
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double var3;
    double pressure;
    double pressure_min = 30000.0;
 80050ba:	a3d9      	add	r3, pc, #868	; (adr r3, 8005420 <compensate_pressure+0x370>)
 80050bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double pressure_max = 110000.0;
 80050c4:	a3d8      	add	r3, pc, #864	; (adr r3, 8005428 <compensate_pressure+0x378>)
 80050c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ca:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fb fa2e 	bl	8000534 <__aeabi_i2d>
 80050d8:	f04f 0200 	mov.w	r2, #0
 80050dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80050e0:	f7fb fbbc 	bl	800085c <__aeabi_ddiv>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	4610      	mov	r0, r2
 80050ea:	4619      	mov	r1, r3
 80050ec:	f04f 0200 	mov.w	r2, #0
 80050f0:	4bc1      	ldr	r3, [pc, #772]	; (80053f8 <compensate_pressure+0x348>)
 80050f2:	f7fb f8d1 	bl	8000298 <__aeabi_dsub>
 80050f6:	4602      	mov	r2, r0
 80050f8:	460b      	mov	r3, r1
 80050fa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double)calib_data->dig_p6) / 32768.0;
 80050fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005102:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005106:	f7fb fa7f 	bl	8000608 <__aeabi_dmul>
 800510a:	4602      	mov	r2, r0
 800510c:	460b      	mov	r3, r1
 800510e:	4614      	mov	r4, r2
 8005110:	461d      	mov	r5, r3
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005118:	4618      	mov	r0, r3
 800511a:	f7fb fa0b 	bl	8000534 <__aeabi_i2d>
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	4620      	mov	r0, r4
 8005124:	4629      	mov	r1, r5
 8005126:	f7fb fa6f 	bl	8000608 <__aeabi_dmul>
 800512a:	4602      	mov	r2, r0
 800512c:	460b      	mov	r3, r1
 800512e:	4610      	mov	r0, r2
 8005130:	4619      	mov	r1, r3
 8005132:	f04f 0200 	mov.w	r2, #0
 8005136:	4bb1      	ldr	r3, [pc, #708]	; (80053fc <compensate_pressure+0x34c>)
 8005138:	f7fb fb90 	bl	800085c <__aeabi_ddiv>
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double)calib_data->dig_p5) * 2.0;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800514a:	4618      	mov	r0, r3
 800514c:	f7fb f9f2 	bl	8000534 <__aeabi_i2d>
 8005150:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005154:	f7fb fa58 	bl	8000608 <__aeabi_dmul>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	4610      	mov	r0, r2
 800515e:	4619      	mov	r1, r3
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	f7fb f89a 	bl	800029c <__adddf3>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005170:	f7fb f894 	bl	800029c <__adddf3>
 8005174:	4602      	mov	r2, r0
 8005176:	460b      	mov	r3, r1
 8005178:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double)calib_data->dig_p4) * 65536.0);
 800517c:	f04f 0200 	mov.w	r2, #0
 8005180:	4b9f      	ldr	r3, [pc, #636]	; (8005400 <compensate_pressure+0x350>)
 8005182:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005186:	f7fb fb69 	bl	800085c <__aeabi_ddiv>
 800518a:	4602      	mov	r2, r0
 800518c:	460b      	mov	r3, r1
 800518e:	4614      	mov	r4, r2
 8005190:	461d      	mov	r5, r3
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8005198:	4618      	mov	r0, r3
 800519a:	f7fb f9cb 	bl	8000534 <__aeabi_i2d>
 800519e:	f04f 0200 	mov.w	r2, #0
 80051a2:	4b98      	ldr	r3, [pc, #608]	; (8005404 <compensate_pressure+0x354>)
 80051a4:	f7fb fa30 	bl	8000608 <__aeabi_dmul>
 80051a8:	4602      	mov	r2, r0
 80051aa:	460b      	mov	r3, r1
 80051ac:	4620      	mov	r0, r4
 80051ae:	4629      	mov	r1, r5
 80051b0:	f7fb f874 	bl	800029c <__adddf3>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var3 = ((double)calib_data->dig_p3) * var1 * var1 / 524288.0;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7fb f9b6 	bl	8000534 <__aeabi_i2d>
 80051c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051cc:	f7fb fa1c 	bl	8000608 <__aeabi_dmul>
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	4610      	mov	r0, r2
 80051d6:	4619      	mov	r1, r3
 80051d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051dc:	f7fb fa14 	bl	8000608 <__aeabi_dmul>
 80051e0:	4602      	mov	r2, r0
 80051e2:	460b      	mov	r3, r1
 80051e4:	4610      	mov	r0, r2
 80051e6:	4619      	mov	r1, r3
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	4b86      	ldr	r3, [pc, #536]	; (8005408 <compensate_pressure+0x358>)
 80051ee:	f7fb fb35 	bl	800085c <__aeabi_ddiv>
 80051f2:	4602      	mov	r2, r0
 80051f4:	460b      	mov	r3, r1
 80051f6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var1 = (var3 + ((double)calib_data->dig_p2) * var1) / 524288.0;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005200:	4618      	mov	r0, r3
 8005202:	f7fb f997 	bl	8000534 <__aeabi_i2d>
 8005206:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800520a:	f7fb f9fd 	bl	8000608 <__aeabi_dmul>
 800520e:	4602      	mov	r2, r0
 8005210:	460b      	mov	r3, r1
 8005212:	4610      	mov	r0, r2
 8005214:	4619      	mov	r1, r3
 8005216:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800521a:	f7fb f83f 	bl	800029c <__adddf3>
 800521e:	4602      	mov	r2, r0
 8005220:	460b      	mov	r3, r1
 8005222:	4610      	mov	r0, r2
 8005224:	4619      	mov	r1, r3
 8005226:	f04f 0200 	mov.w	r2, #0
 800522a:	4b77      	ldr	r3, [pc, #476]	; (8005408 <compensate_pressure+0x358>)
 800522c:	f7fb fb16 	bl	800085c <__aeabi_ddiv>
 8005230:	4602      	mov	r2, r0
 8005232:	460b      	mov	r3, r1
 8005234:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_p1);
 8005238:	f04f 0200 	mov.w	r2, #0
 800523c:	4b6f      	ldr	r3, [pc, #444]	; (80053fc <compensate_pressure+0x34c>)
 800523e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005242:	f7fb fb0b 	bl	800085c <__aeabi_ddiv>
 8005246:	4602      	mov	r2, r0
 8005248:	460b      	mov	r3, r1
 800524a:	4610      	mov	r0, r2
 800524c:	4619      	mov	r1, r3
 800524e:	f04f 0200 	mov.w	r2, #0
 8005252:	4b6e      	ldr	r3, [pc, #440]	; (800540c <compensate_pressure+0x35c>)
 8005254:	f7fb f822 	bl	800029c <__adddf3>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4614      	mov	r4, r2
 800525e:	461d      	mov	r5, r3
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	88db      	ldrh	r3, [r3, #6]
 8005264:	4618      	mov	r0, r3
 8005266:	f7fb f955 	bl	8000514 <__aeabi_ui2d>
 800526a:	4602      	mov	r2, r0
 800526c:	460b      	mov	r3, r1
 800526e:	4620      	mov	r0, r4
 8005270:	4629      	mov	r1, r5
 8005272:	f7fb f9c9 	bl	8000608 <__aeabi_dmul>
 8005276:	4602      	mov	r2, r0
 8005278:	460b      	mov	r3, r1
 800527a:	e9c7 2306 	strd	r2, r3, [r7, #24]

    /* avoid exception caused by division by zero */
    if (var1 > (0.0))
 800527e:	f04f 0200 	mov.w	r2, #0
 8005282:	f04f 0300 	mov.w	r3, #0
 8005286:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800528a:	f7fb fc4d 	bl	8000b28 <__aeabi_dcmpgt>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 80cd 	beq.w	8005430 <compensate_pressure+0x380>
    {
        pressure = 1048576.0 - (double) uncomp_data->pressure;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f7fb f93a 	bl	8000514 <__aeabi_ui2d>
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	f04f 0000 	mov.w	r0, #0
 80052a8:	4959      	ldr	r1, [pc, #356]	; (8005410 <compensate_pressure+0x360>)
 80052aa:	f7fa fff5 	bl	8000298 <__aeabi_dsub>
 80052ae:	4602      	mov	r2, r0
 80052b0:	460b      	mov	r3, r1
 80052b2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 80052b6:	f04f 0200 	mov.w	r2, #0
 80052ba:	4b56      	ldr	r3, [pc, #344]	; (8005414 <compensate_pressure+0x364>)
 80052bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80052c0:	f7fb facc 	bl	800085c <__aeabi_ddiv>
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80052cc:	f7fa ffe4 	bl	8000298 <__aeabi_dsub>
 80052d0:	4602      	mov	r2, r0
 80052d2:	460b      	mov	r3, r1
 80052d4:	4610      	mov	r0, r2
 80052d6:	4619      	mov	r1, r3
 80052d8:	a345      	add	r3, pc, #276	; (adr r3, 80053f0 <compensate_pressure+0x340>)
 80052da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052de:	f7fb f993 	bl	8000608 <__aeabi_dmul>
 80052e2:	4602      	mov	r2, r0
 80052e4:	460b      	mov	r3, r1
 80052e6:	4610      	mov	r0, r2
 80052e8:	4619      	mov	r1, r3
 80052ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052ee:	f7fb fab5 	bl	800085c <__aeabi_ddiv>
 80052f2:	4602      	mov	r2, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        var1 = ((double)calib_data->dig_p9) * pressure * pressure / 2147483648.0;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005300:	4618      	mov	r0, r3
 8005302:	f7fb f917 	bl	8000534 <__aeabi_i2d>
 8005306:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800530a:	f7fb f97d 	bl	8000608 <__aeabi_dmul>
 800530e:	4602      	mov	r2, r0
 8005310:	460b      	mov	r3, r1
 8005312:	4610      	mov	r0, r2
 8005314:	4619      	mov	r1, r3
 8005316:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800531a:	f7fb f975 	bl	8000608 <__aeabi_dmul>
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	4610      	mov	r0, r2
 8005324:	4619      	mov	r1, r3
 8005326:	f04f 0200 	mov.w	r2, #0
 800532a:	4b3b      	ldr	r3, [pc, #236]	; (8005418 <compensate_pressure+0x368>)
 800532c:	f7fb fa96 	bl	800085c <__aeabi_ddiv>
 8005330:	4602      	mov	r2, r0
 8005332:	460b      	mov	r3, r1
 8005334:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)calib_data->dig_p8) / 32768.0;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800533e:	4618      	mov	r0, r3
 8005340:	f7fb f8f8 	bl	8000534 <__aeabi_i2d>
 8005344:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005348:	f7fb f95e 	bl	8000608 <__aeabi_dmul>
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	4610      	mov	r0, r2
 8005352:	4619      	mov	r1, r3
 8005354:	f04f 0200 	mov.w	r2, #0
 8005358:	4b28      	ldr	r3, [pc, #160]	; (80053fc <compensate_pressure+0x34c>)
 800535a:	f7fb fa7f 	bl	800085c <__aeabi_ddiv>
 800535e:	4602      	mov	r2, r0
 8005360:	460b      	mov	r3, r1
 8005362:	e9c7 2304 	strd	r2, r3, [r7, #16]
        pressure = pressure + (var1 + var2 + ((double)calib_data->dig_p7)) / 16.0;
 8005366:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800536a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800536e:	f7fa ff95 	bl	800029c <__adddf3>
 8005372:	4602      	mov	r2, r0
 8005374:	460b      	mov	r3, r1
 8005376:	4614      	mov	r4, r2
 8005378:	461d      	mov	r5, r3
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005380:	4618      	mov	r0, r3
 8005382:	f7fb f8d7 	bl	8000534 <__aeabi_i2d>
 8005386:	4602      	mov	r2, r0
 8005388:	460b      	mov	r3, r1
 800538a:	4620      	mov	r0, r4
 800538c:	4629      	mov	r1, r5
 800538e:	f7fa ff85 	bl	800029c <__adddf3>
 8005392:	4602      	mov	r2, r0
 8005394:	460b      	mov	r3, r1
 8005396:	4610      	mov	r0, r2
 8005398:	4619      	mov	r1, r3
 800539a:	f04f 0200 	mov.w	r2, #0
 800539e:	4b1f      	ldr	r3, [pc, #124]	; (800541c <compensate_pressure+0x36c>)
 80053a0:	f7fb fa5c 	bl	800085c <__aeabi_ddiv>
 80053a4:	4602      	mov	r2, r0
 80053a6:	460b      	mov	r3, r1
 80053a8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80053ac:	f7fa ff76 	bl	800029c <__adddf3>
 80053b0:	4602      	mov	r2, r0
 80053b2:	460b      	mov	r3, r1
 80053b4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        if (pressure < pressure_min)
 80053b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053bc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80053c0:	f7fb fb94 	bl	8000aec <__aeabi_dcmplt>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d004      	beq.n	80053d4 <compensate_pressure+0x324>
        {
            pressure = pressure_min;
 80053ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053ce:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80053d2:	e031      	b.n	8005438 <compensate_pressure+0x388>
        }
        else if (pressure > pressure_max)
 80053d4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053d8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80053dc:	f7fb fba4 	bl	8000b28 <__aeabi_dcmpgt>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d028      	beq.n	8005438 <compensate_pressure+0x388>
        {
            pressure = pressure_max;
 80053e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053ea:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80053ee:	e023      	b.n	8005438 <compensate_pressure+0x388>
 80053f0:	00000000 	.word	0x00000000
 80053f4:	40b86a00 	.word	0x40b86a00
 80053f8:	40ef4000 	.word	0x40ef4000
 80053fc:	40e00000 	.word	0x40e00000
 8005400:	40100000 	.word	0x40100000
 8005404:	40f00000 	.word	0x40f00000
 8005408:	41200000 	.word	0x41200000
 800540c:	3ff00000 	.word	0x3ff00000
 8005410:	41300000 	.word	0x41300000
 8005414:	40b00000 	.word	0x40b00000
 8005418:	41e00000 	.word	0x41e00000
 800541c:	40300000 	.word	0x40300000
 8005420:	00000000 	.word	0x00000000
 8005424:	40dd4c00 	.word	0x40dd4c00
 8005428:	00000000 	.word	0x00000000
 800542c:	40fadb00 	.word	0x40fadb00
        }
    }
    else /* Invalid case */
    {
        pressure = pressure_min;
 8005430:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005434:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    }

    return pressure;
 8005438:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800543c:	ec43 2b17 	vmov	d7, r2, r3
}
 8005440:	eeb0 0a47 	vmov.f32	s0, s14
 8005444:	eef0 0a67 	vmov.f32	s1, s15
 8005448:	3738      	adds	r7, #56	; 0x38
 800544a:	46bd      	mov	sp, r7
 800544c:	bdb0      	pop	{r4, r5, r7, pc}
 800544e:	bf00      	nop

08005450 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8005450:	b5b0      	push	{r4, r5, r7, lr}
 8005452:	b094      	sub	sp, #80	; 0x50
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
    double humidity;
    double humidity_min = 0.0;
 800545a:	f04f 0200 	mov.w	r2, #0
 800545e:	f04f 0300 	mov.w	r3, #0
 8005462:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    double humidity_max = 100.0;
 8005466:	f04f 0200 	mov.w	r2, #0
 800546a:	4b81      	ldr	r3, [pc, #516]	; (8005670 <compensate_humidity+0x220>)
 800546c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double var3;
    double var4;
    double var5;
    double var6;

    var1 = ((double)calib_data->t_fine) - 76800.0;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	4618      	mov	r0, r3
 8005476:	f7fb f85d 	bl	8000534 <__aeabi_i2d>
 800547a:	f04f 0200 	mov.w	r2, #0
 800547e:	4b7d      	ldr	r3, [pc, #500]	; (8005674 <compensate_humidity+0x224>)
 8005480:	f7fa ff0a 	bl	8000298 <__aeabi_dsub>
 8005484:	4602      	mov	r2, r0
 8005486:	460b      	mov	r3, r1
 8005488:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    var2 = (((double)calib_data->dig_h4) * 64.0 + (((double)calib_data->dig_h5) / 16384.0) * var1);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8005492:	4618      	mov	r0, r3
 8005494:	f7fb f84e 	bl	8000534 <__aeabi_i2d>
 8005498:	f04f 0200 	mov.w	r2, #0
 800549c:	4b76      	ldr	r3, [pc, #472]	; (8005678 <compensate_humidity+0x228>)
 800549e:	f7fb f8b3 	bl	8000608 <__aeabi_dmul>
 80054a2:	4602      	mov	r2, r0
 80054a4:	460b      	mov	r3, r1
 80054a6:	4614      	mov	r4, r2
 80054a8:	461d      	mov	r5, r3
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7fb f83f 	bl	8000534 <__aeabi_i2d>
 80054b6:	f04f 0200 	mov.w	r2, #0
 80054ba:	4b70      	ldr	r3, [pc, #448]	; (800567c <compensate_humidity+0x22c>)
 80054bc:	f7fb f9ce 	bl	800085c <__aeabi_ddiv>
 80054c0:	4602      	mov	r2, r0
 80054c2:	460b      	mov	r3, r1
 80054c4:	4610      	mov	r0, r2
 80054c6:	4619      	mov	r1, r3
 80054c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80054cc:	f7fb f89c 	bl	8000608 <__aeabi_dmul>
 80054d0:	4602      	mov	r2, r0
 80054d2:	460b      	mov	r3, r1
 80054d4:	4620      	mov	r0, r4
 80054d6:	4629      	mov	r1, r5
 80054d8:	f7fa fee0 	bl	800029c <__adddf3>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    var3 = uncomp_data->humidity - var2;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7fb f813 	bl	8000514 <__aeabi_ui2d>
 80054ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054f2:	f7fa fed1 	bl	8000298 <__aeabi_dsub>
 80054f6:	4602      	mov	r2, r0
 80054f8:	460b      	mov	r3, r1
 80054fa:	e9c7 2308 	strd	r2, r3, [r7, #32]
    var4 = ((double)calib_data->dig_h2) / 65536.0;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8005504:	4618      	mov	r0, r3
 8005506:	f7fb f815 	bl	8000534 <__aeabi_i2d>
 800550a:	f04f 0200 	mov.w	r2, #0
 800550e:	4b5c      	ldr	r3, [pc, #368]	; (8005680 <compensate_humidity+0x230>)
 8005510:	f7fb f9a4 	bl	800085c <__aeabi_ddiv>
 8005514:	4602      	mov	r2, r0
 8005516:	460b      	mov	r3, r1
 8005518:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var5 = (1.0 + (((double)calib_data->dig_h3) / 67108864.0) * var1);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	7f1b      	ldrb	r3, [r3, #28]
 8005520:	4618      	mov	r0, r3
 8005522:	f7fa fff7 	bl	8000514 <__aeabi_ui2d>
 8005526:	f04f 0200 	mov.w	r2, #0
 800552a:	4b56      	ldr	r3, [pc, #344]	; (8005684 <compensate_humidity+0x234>)
 800552c:	f7fb f996 	bl	800085c <__aeabi_ddiv>
 8005530:	4602      	mov	r2, r0
 8005532:	460b      	mov	r3, r1
 8005534:	4610      	mov	r0, r2
 8005536:	4619      	mov	r1, r3
 8005538:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800553c:	f7fb f864 	bl	8000608 <__aeabi_dmul>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	4610      	mov	r0, r2
 8005546:	4619      	mov	r1, r3
 8005548:	f04f 0200 	mov.w	r2, #0
 800554c:	4b4e      	ldr	r3, [pc, #312]	; (8005688 <compensate_humidity+0x238>)
 800554e:	f7fa fea5 	bl	800029c <__adddf3>
 8005552:	4602      	mov	r2, r0
 8005554:	460b      	mov	r3, r1
 8005556:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var6 = 1.0 + (((double)calib_data->dig_h6) / 67108864.0) * var1 * var5;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8005560:	4618      	mov	r0, r3
 8005562:	f7fa ffe7 	bl	8000534 <__aeabi_i2d>
 8005566:	f04f 0200 	mov.w	r2, #0
 800556a:	4b46      	ldr	r3, [pc, #280]	; (8005684 <compensate_humidity+0x234>)
 800556c:	f7fb f976 	bl	800085c <__aeabi_ddiv>
 8005570:	4602      	mov	r2, r0
 8005572:	460b      	mov	r3, r1
 8005574:	4610      	mov	r0, r2
 8005576:	4619      	mov	r1, r3
 8005578:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800557c:	f7fb f844 	bl	8000608 <__aeabi_dmul>
 8005580:	4602      	mov	r2, r0
 8005582:	460b      	mov	r3, r1
 8005584:	4610      	mov	r0, r2
 8005586:	4619      	mov	r1, r3
 8005588:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800558c:	f7fb f83c 	bl	8000608 <__aeabi_dmul>
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	4610      	mov	r0, r2
 8005596:	4619      	mov	r1, r3
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	4b3a      	ldr	r3, [pc, #232]	; (8005688 <compensate_humidity+0x238>)
 800559e:	f7fa fe7d 	bl	800029c <__adddf3>
 80055a2:	4602      	mov	r2, r0
 80055a4:	460b      	mov	r3, r1
 80055a6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var6 = var3 * var4 * (var5 * var6);
 80055aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055ae:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80055b2:	f7fb f829 	bl	8000608 <__aeabi_dmul>
 80055b6:	4602      	mov	r2, r0
 80055b8:	460b      	mov	r3, r1
 80055ba:	4614      	mov	r4, r2
 80055bc:	461d      	mov	r5, r3
 80055be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80055c6:	f7fb f81f 	bl	8000608 <__aeabi_dmul>
 80055ca:	4602      	mov	r2, r0
 80055cc:	460b      	mov	r3, r1
 80055ce:	4620      	mov	r0, r4
 80055d0:	4629      	mov	r1, r5
 80055d2:	f7fb f819 	bl	8000608 <__aeabi_dmul>
 80055d6:	4602      	mov	r2, r0
 80055d8:	460b      	mov	r3, r1
 80055da:	e9c7 2302 	strd	r2, r3, [r7, #8]
    humidity = var6 * (1.0 - ((double)calib_data->dig_h1) * var6 / 524288.0);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	7e1b      	ldrb	r3, [r3, #24]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7fa ff96 	bl	8000514 <__aeabi_ui2d>
 80055e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055ec:	f7fb f80c 	bl	8000608 <__aeabi_dmul>
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	4610      	mov	r0, r2
 80055f6:	4619      	mov	r1, r3
 80055f8:	f04f 0200 	mov.w	r2, #0
 80055fc:	4b23      	ldr	r3, [pc, #140]	; (800568c <compensate_humidity+0x23c>)
 80055fe:	f7fb f92d 	bl	800085c <__aeabi_ddiv>
 8005602:	4602      	mov	r2, r0
 8005604:	460b      	mov	r3, r1
 8005606:	f04f 0000 	mov.w	r0, #0
 800560a:	491f      	ldr	r1, [pc, #124]	; (8005688 <compensate_humidity+0x238>)
 800560c:	f7fa fe44 	bl	8000298 <__aeabi_dsub>
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
 8005614:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005618:	f7fa fff6 	bl	8000608 <__aeabi_dmul>
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    if (humidity > humidity_max)
 8005624:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005628:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800562c:	f7fb fa7c 	bl	8000b28 <__aeabi_dcmpgt>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d004      	beq.n	8005640 <compensate_humidity+0x1f0>
    {
        humidity = humidity_max;
 8005636:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800563a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800563e:	e00c      	b.n	800565a <compensate_humidity+0x20a>
    }
    else if (humidity < humidity_min)
 8005640:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005644:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005648:	f7fb fa50 	bl	8000aec <__aeabi_dcmplt>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d003      	beq.n	800565a <compensate_humidity+0x20a>
    {
        humidity = humidity_min;
 8005652:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005656:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    }

    return humidity;
 800565a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800565e:	ec43 2b17 	vmov	d7, r2, r3
}
 8005662:	eeb0 0a47 	vmov.f32	s0, s14
 8005666:	eef0 0a67 	vmov.f32	s1, s15
 800566a:	3750      	adds	r7, #80	; 0x50
 800566c:	46bd      	mov	sp, r7
 800566e:	bdb0      	pop	{r4, r5, r7, pc}
 8005670:	40590000 	.word	0x40590000
 8005674:	40f2c000 	.word	0x40f2c000
 8005678:	40500000 	.word	0x40500000
 800567c:	40d00000 	.word	0x40d00000
 8005680:	40f00000 	.word	0x40f00000
 8005684:	41900000 	.word	0x41900000
 8005688:	3ff00000 	.word	0x3ff00000
 800568c:	41200000 	.word	0x41200000

08005690 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b08a      	sub	sp, #40	; 0x28
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8005698:	2388      	movs	r3, #136	; 0x88
 800569a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 800569e:	2300      	movs	r3, #0
 80056a0:	60fb      	str	r3, [r7, #12]
 80056a2:	f107 0310 	add.w	r3, r7, #16
 80056a6:	2200      	movs	r2, #0
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	605a      	str	r2, [r3, #4]
 80056ac:	609a      	str	r2, [r3, #8]
 80056ae:	60da      	str	r2, [r3, #12]
 80056b0:	611a      	str	r2, [r3, #16]
 80056b2:	829a      	strh	r2, [r3, #20]

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 80056b4:	f107 010c 	add.w	r1, r7, #12
 80056b8:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	221a      	movs	r2, #26
 80056c0:	f7fe ff97 	bl	80045f2 <bme280_get_regs>
 80056c4:	4603      	mov	r3, r0
 80056c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BME280_OK)
 80056ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d11d      	bne.n	800570e <get_calib_data+0x7e>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 80056d2:	f107 030c 	add.w	r3, r7, #12
 80056d6:	6879      	ldr	r1, [r7, #4]
 80056d8:	4618      	mov	r0, r3
 80056da:	f000 f84a 	bl	8005772 <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 80056de:	23e1      	movs	r3, #225	; 0xe1
 80056e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 80056e4:	f107 010c 	add.w	r1, r7, #12
 80056e8:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2207      	movs	r2, #7
 80056f0:	f7fe ff7f 	bl	80045f2 <bme280_get_regs>
 80056f4:	4603      	mov	r3, r0
 80056f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 80056fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d105      	bne.n	800570e <get_calib_data+0x7e>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 8005702:	f107 030c 	add.w	r3, r7, #12
 8005706:	6879      	ldr	r1, [r7, #4]
 8005708:	4618      	mov	r0, r3
 800570a:	f000 f8e1 	bl	80058d0 <parse_humidity_calib_data>
        }
    }

    return rslt;
 800570e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005712:	4618      	mov	r0, r3
 8005714:	3728      	adds	r7, #40	; 0x28
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 800571a:	b480      	push	{r7}
 800571c:	b087      	sub	sp, #28
 800571e:	af00      	add	r7, sp, #0
 8005720:	60f8      	str	r0, [r7, #12]
 8005722:	60b9      	str	r1, [r7, #8]
 8005724:	607a      	str	r2, [r7, #4]
 8005726:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8005728:	2301      	movs	r3, #1
 800572a:	75fb      	strb	r3, [r7, #23]
 800572c:	e016      	b.n	800575c <interleave_reg_addr+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 800572e:	7dfb      	ldrb	r3, [r7, #23]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	441a      	add	r2, r3
 8005734:	7dfb      	ldrb	r3, [r7, #23]
 8005736:	005b      	lsls	r3, r3, #1
 8005738:	3b01      	subs	r3, #1
 800573a:	68b9      	ldr	r1, [r7, #8]
 800573c:	440b      	add	r3, r1
 800573e:	7812      	ldrb	r2, [r2, #0]
 8005740:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8005742:	7dfb      	ldrb	r3, [r7, #23]
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	441a      	add	r2, r3
 8005748:	7dfb      	ldrb	r3, [r7, #23]
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	4619      	mov	r1, r3
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	440b      	add	r3, r1
 8005752:	7812      	ldrb	r2, [r2, #0]
 8005754:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8005756:	7dfb      	ldrb	r3, [r7, #23]
 8005758:	3301      	adds	r3, #1
 800575a:	75fb      	strb	r3, [r7, #23]
 800575c:	7dfa      	ldrb	r2, [r7, #23]
 800575e:	78fb      	ldrb	r3, [r7, #3]
 8005760:	429a      	cmp	r2, r3
 8005762:	d3e4      	bcc.n	800572e <interleave_reg_addr+0x14>
    }
}
 8005764:	bf00      	nop
 8005766:	bf00      	nop
 8005768:	371c      	adds	r7, #28
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8005772:	b480      	push	{r7}
 8005774:	b085      	sub	sp, #20
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	3310      	adds	r3, #16
 8005780:	60fb      	str	r3, [r7, #12]

    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	3301      	adds	r3, #1
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	021b      	lsls	r3, r3, #8
 800578a:	b21a      	sxth	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	b21b      	sxth	r3, r3
 8005792:	4313      	orrs	r3, r2
 8005794:	b21b      	sxth	r3, r3
 8005796:	b29a      	uxth	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	801a      	strh	r2, [r3, #0]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	3303      	adds	r3, #3
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	021b      	lsls	r3, r3, #8
 80057a4:	b21a      	sxth	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	3302      	adds	r3, #2
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	b21b      	sxth	r3, r3
 80057ae:	4313      	orrs	r3, r2
 80057b0:	b21a      	sxth	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	805a      	strh	r2, [r3, #2]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	3305      	adds	r3, #5
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	021b      	lsls	r3, r3, #8
 80057be:	b21a      	sxth	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	3304      	adds	r3, #4
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	b21b      	sxth	r3, r3
 80057c8:	4313      	orrs	r3, r2
 80057ca:	b21a      	sxth	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	809a      	strh	r2, [r3, #4]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	3307      	adds	r3, #7
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	021b      	lsls	r3, r3, #8
 80057d8:	b21a      	sxth	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	3306      	adds	r3, #6
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	b21b      	sxth	r3, r3
 80057e2:	4313      	orrs	r3, r2
 80057e4:	b21b      	sxth	r3, r3
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	80da      	strh	r2, [r3, #6]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	3309      	adds	r3, #9
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	021b      	lsls	r3, r3, #8
 80057f4:	b21a      	sxth	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	3308      	adds	r3, #8
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	b21b      	sxth	r3, r3
 80057fe:	4313      	orrs	r3, r2
 8005800:	b21a      	sxth	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	811a      	strh	r2, [r3, #8]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	330b      	adds	r3, #11
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	021b      	lsls	r3, r3, #8
 800580e:	b21a      	sxth	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	330a      	adds	r3, #10
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	b21b      	sxth	r3, r3
 8005818:	4313      	orrs	r3, r2
 800581a:	b21a      	sxth	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	815a      	strh	r2, [r3, #10]
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	330d      	adds	r3, #13
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	021b      	lsls	r3, r3, #8
 8005828:	b21a      	sxth	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	330c      	adds	r3, #12
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	b21b      	sxth	r3, r3
 8005832:	4313      	orrs	r3, r2
 8005834:	b21a      	sxth	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	819a      	strh	r2, [r3, #12]
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	330f      	adds	r3, #15
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	021b      	lsls	r3, r3, #8
 8005842:	b21a      	sxth	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	330e      	adds	r3, #14
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	b21b      	sxth	r3, r3
 800584c:	4313      	orrs	r3, r2
 800584e:	b21a      	sxth	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	81da      	strh	r2, [r3, #14]
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	3311      	adds	r3, #17
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	021b      	lsls	r3, r3, #8
 800585c:	b21a      	sxth	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	3310      	adds	r3, #16
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	b21b      	sxth	r3, r3
 8005866:	4313      	orrs	r3, r2
 8005868:	b21a      	sxth	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	821a      	strh	r2, [r3, #16]
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	3313      	adds	r3, #19
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	021b      	lsls	r3, r3, #8
 8005876:	b21a      	sxth	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	3312      	adds	r3, #18
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	b21b      	sxth	r3, r3
 8005880:	4313      	orrs	r3, r2
 8005882:	b21a      	sxth	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	825a      	strh	r2, [r3, #18]
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	3315      	adds	r3, #21
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	021b      	lsls	r3, r3, #8
 8005890:	b21a      	sxth	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	3314      	adds	r3, #20
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	b21b      	sxth	r3, r3
 800589a:	4313      	orrs	r3, r2
 800589c:	b21a      	sxth	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	829a      	strh	r2, [r3, #20]
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	3317      	adds	r3, #23
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	021b      	lsls	r3, r3, #8
 80058aa:	b21a      	sxth	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	3316      	adds	r3, #22
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	b21b      	sxth	r3, r3
 80058b4:	4313      	orrs	r3, r2
 80058b6:	b21a      	sxth	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	82da      	strh	r2, [r3, #22]
    calib_data->dig_h1 = reg_data[25];
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	7e5a      	ldrb	r2, [r3, #25]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	761a      	strb	r2, [r3, #24]
}
 80058c4:	bf00      	nop
 80058c6:	3714      	adds	r7, #20
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	3310      	adds	r3, #16
 80058de:	617b      	str	r3, [r7, #20]
    int16_t dig_h4_lsb;
    int16_t dig_h4_msb;
    int16_t dig_h5_lsb;
    int16_t dig_h5_msb;

    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	3301      	adds	r3, #1
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	021b      	lsls	r3, r3, #8
 80058e8:	b21a      	sxth	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	b21b      	sxth	r3, r3
 80058f0:	4313      	orrs	r3, r2
 80058f2:	b21a      	sxth	r2, r3
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	835a      	strh	r2, [r3, #26]
    calib_data->dig_h3 = reg_data[2];
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	789a      	ldrb	r2, [r3, #2]
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	771a      	strb	r2, [r3, #28]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	3303      	adds	r3, #3
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	b25b      	sxtb	r3, r3
 8005908:	b29b      	uxth	r3, r3
 800590a:	011b      	lsls	r3, r3, #4
 800590c:	b29b      	uxth	r3, r3
 800590e:	827b      	strh	r3, [r7, #18]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	3304      	adds	r3, #4
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	b21b      	sxth	r3, r3
 8005918:	f003 030f 	and.w	r3, r3, #15
 800591c:	823b      	strh	r3, [r7, #16]
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 800591e:	8a7a      	ldrh	r2, [r7, #18]
 8005920:	8a3b      	ldrh	r3, [r7, #16]
 8005922:	4313      	orrs	r3, r2
 8005924:	b21a      	sxth	r2, r3
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	83da      	strh	r2, [r3, #30]
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	3305      	adds	r3, #5
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	b25b      	sxtb	r3, r3
 8005932:	b29b      	uxth	r3, r3
 8005934:	011b      	lsls	r3, r3, #4
 8005936:	b29b      	uxth	r3, r3
 8005938:	81fb      	strh	r3, [r7, #14]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	3304      	adds	r3, #4
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	091b      	lsrs	r3, r3, #4
 8005942:	b2db      	uxtb	r3, r3
 8005944:	81bb      	strh	r3, [r7, #12]
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 8005946:	89fa      	ldrh	r2, [r7, #14]
 8005948:	89bb      	ldrh	r3, [r7, #12]
 800594a:	4313      	orrs	r3, r2
 800594c:	b21a      	sxth	r2, r3
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	841a      	strh	r2, [r3, #32]
    calib_data->dig_h6 = (int8_t)reg_data[6];
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	3306      	adds	r3, #6
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	b25a      	sxtb	r2, r3
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8005960:	bf00      	nop
 8005962:	371c      	adds	r7, #28
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	4603      	mov	r3, r0
 8005974:	460a      	mov	r2, r1
 8005976:	71fb      	strb	r3, [r7, #7]
 8005978:	4613      	mov	r3, r2
 800597a:	71bb      	strb	r3, [r7, #6]
    uint8_t settings_changed = FALSE;
 800597c:	2300      	movs	r3, #0
 800597e:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 8005980:	79fa      	ldrb	r2, [r7, #7]
 8005982:	79bb      	ldrb	r3, [r7, #6]
 8005984:	4013      	ands	r3, r2
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	d002      	beq.n	8005992 <are_settings_changed+0x26>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 800598c:	2301      	movs	r3, #1
 800598e:	73fb      	strb	r3, [r7, #15]
 8005990:	e001      	b.n	8005996 <are_settings_changed+0x2a>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8005992:	2300      	movs	r3, #0
 8005994:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 8005996:	7bfb      	ldrb	r3, [r7, #15]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00b      	beq.n	80059ca <null_ptr_check+0x26>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d007      	beq.n	80059ca <null_ptr_check+0x26>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <null_ptr_check+0x26>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d102      	bne.n	80059d0 <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 80059ca:	23ff      	movs	r3, #255	; 0xff
 80059cc:	73fb      	strb	r3, [r7, #15]
 80059ce:	e001      	b.n	80059d4 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 80059d0:	2300      	movs	r3, #0
 80059d2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80059d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3714      	adds	r7, #20
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <_dev_by_id>:
	}
};


static its_bme280_t * _dev_by_id(its_bme280_id_t id)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	4603      	mov	r3, r0
 80059ec:	71fb      	strb	r3, [r7, #7]
	assert(id >= 0 && id < 1);
 80059ee:	79fb      	ldrb	r3, [r7, #7]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d005      	beq.n	8005a00 <_dev_by_id+0x1c>
 80059f4:	4b09      	ldr	r3, [pc, #36]	; (8005a1c <_dev_by_id+0x38>)
 80059f6:	4a0a      	ldr	r2, [pc, #40]	; (8005a20 <_dev_by_id+0x3c>)
 80059f8:	2143      	movs	r1, #67	; 0x43
 80059fa:	480a      	ldr	r0, [pc, #40]	; (8005a24 <_dev_by_id+0x40>)
 80059fc:	f00a faac 	bl	800ff58 <__assert_func>
	its_bme280_t * const dev = &_devices[id];
 8005a00:	79fa      	ldrb	r2, [r7, #7]
 8005a02:	4613      	mov	r3, r2
 8005a04:	00db      	lsls	r3, r3, #3
 8005a06:	4413      	add	r3, r2
 8005a08:	00db      	lsls	r3, r3, #3
 8005a0a:	4a07      	ldr	r2, [pc, #28]	; (8005a28 <_dev_by_id+0x44>)
 8005a0c:	4413      	add	r3, r2
 8005a0e:	60fb      	str	r3, [r7, #12]

	return dev;
 8005a10:	68fb      	ldr	r3, [r7, #12]
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	08015f8c 	.word	0x08015f8c
 8005a20:	08016024 	.word	0x08016024
 8005a24:	08015fa0 	.word	0x08015fa0
 8005a28:	20000008 	.word	0x20000008

08005a2c <_i2c_read>:


static int8_t _i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b088      	sub	sp, #32
 8005a30:	af04      	add	r7, sp, #16
 8005a32:	603a      	str	r2, [r7, #0]
 8005a34:	461a      	mov	r2, r3
 8005a36:	4603      	mov	r3, r0
 8005a38:	71fb      	strb	r3, [r7, #7]
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	71bb      	strb	r3, [r7, #6]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	80bb      	strh	r3, [r7, #4]
	its_bme280_t * dev = _dev_by_id(id);
 8005a42:	79fb      	ldrb	r3, [r7, #7]
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7ff ffcd 	bl	80059e4 <_dev_by_id>
 8005a4a:	60f8      	str	r0, [r7, #12]

	HAL_StatusTypeDef hrc = HAL_I2C_Mem_Read(
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6818      	ldr	r0, [r3, #0]
			dev->bus,
			dev->addr << 1,
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	791b      	ldrb	r3, [r3, #4]
 8005a54:	b29b      	uxth	r3, r3
	HAL_StatusTypeDef hrc = HAL_I2C_Mem_Read(
 8005a56:	005b      	lsls	r3, r3, #1
 8005a58:	b299      	uxth	r1, r3
 8005a5a:	79bb      	ldrb	r3, [r7, #6]
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005a62:	9302      	str	r3, [sp, #8]
 8005a64:	88bb      	ldrh	r3, [r7, #4]
 8005a66:	9301      	str	r3, [sp, #4]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	f001 fc97 	bl	80073a0 <HAL_I2C_Mem_Read>
 8005a72:	4603      	mov	r3, r0
 8005a74:	72fb      	strb	r3, [r7, #11]
			data,
			len,
			ITS_BME_HAL_TIMEOUT
	);

	if (hrc != HAL_OK)
 8005a76:	7afb      	ldrb	r3, [r7, #11]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d006      	beq.n	8005a8a <_i2c_read+0x5e>
	{
		I2C_ClearBusyFlagErratum(&hi2c1, 120);
 8005a7c:	2178      	movs	r1, #120	; 0x78
 8005a7e:	4806      	ldr	r0, [pc, #24]	; (8005a98 <_i2c_read+0x6c>)
 8005a80:	f000 f938 	bl	8005cf4 <I2C_ClearBusyFlagErratum>
		return (int8_t)hrc;
 8005a84:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005a88:	e001      	b.n	8005a8e <_i2c_read+0x62>


	}

	return (int8_t)hrc;
 8005a8a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	2000279c 	.word	0x2000279c

08005a9c <_i2c_write>:


static int8_t _i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b088      	sub	sp, #32
 8005aa0:	af04      	add	r7, sp, #16
 8005aa2:	603a      	str	r2, [r7, #0]
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	71fb      	strb	r3, [r7, #7]
 8005aaa:	460b      	mov	r3, r1
 8005aac:	71bb      	strb	r3, [r7, #6]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	80bb      	strh	r3, [r7, #4]
	its_bme280_t * dev = _dev_by_id(id);
 8005ab2:	79fb      	ldrb	r3, [r7, #7]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7ff ff95 	bl	80059e4 <_dev_by_id>
 8005aba:	60f8      	str	r0, [r7, #12]

	HAL_StatusTypeDef hrc = HAL_I2C_Mem_Write(
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6818      	ldr	r0, [r3, #0]
			dev->bus,
			dev->addr << 1,
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	791b      	ldrb	r3, [r3, #4]
 8005ac4:	b29b      	uxth	r3, r3
	HAL_StatusTypeDef hrc = HAL_I2C_Mem_Write(
 8005ac6:	005b      	lsls	r3, r3, #1
 8005ac8:	b299      	uxth	r1, r3
 8005aca:	79bb      	ldrb	r3, [r7, #6]
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005ad2:	9302      	str	r3, [sp, #8]
 8005ad4:	88bb      	ldrh	r3, [r7, #4]
 8005ad6:	9301      	str	r3, [sp, #4]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	2301      	movs	r3, #1
 8005ade:	f001 fb65 	bl	80071ac <HAL_I2C_Mem_Write>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	72fb      	strb	r3, [r7, #11]
			1,
			data,
			len,
			ITS_BME_HAL_TIMEOUT
	);
	if (hrc == HAL_BUSY)
 8005ae6:	7afb      	ldrb	r3, [r7, #11]
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d106      	bne.n	8005afa <_i2c_write+0x5e>
	{
		I2C_ClearBusyFlagErratum(&hi2c1, 120);
 8005aec:	2178      	movs	r1, #120	; 0x78
 8005aee:	4806      	ldr	r0, [pc, #24]	; (8005b08 <_i2c_write+0x6c>)
 8005af0:	f000 f900 	bl	8005cf4 <I2C_ClearBusyFlagErratum>
		return (int8_t)hrc;
 8005af4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005af8:	e001      	b.n	8005afe <_i2c_write+0x62>

	}
	return (int8_t)hrc;
 8005afa:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	2000279c 	.word	0x2000279c

08005b0c <_delay_ms>:



static void _delay_ms(uint32_t ms)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 fa13 	bl	8005f40 <HAL_Delay>
}
 8005b1a:	bf00      	nop
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <its_bme280_init>:


int its_bme280_init(its_bme280_id_t id)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b084      	sub	sp, #16
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	4603      	mov	r3, r0
 8005b2a:	71fb      	strb	r3, [r7, #7]
	its_bme280_t * const dev = _dev_by_id(id);
 8005b2c:	79fb      	ldrb	r3, [r7, #7]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7ff ff58 	bl	80059e4 <_dev_by_id>
 8005b34:	60f8      	str	r0, [r7, #12]

	int rc = bme280_soft_reset(&dev->driver);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	3308      	adds	r3, #8
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fe feae 	bl	800489c <bme280_soft_reset>
 8005b40:	4603      	mov	r3, r0
 8005b42:	60bb      	str	r3, [r7, #8]
	if (0 != rc)
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d001      	beq.n	8005b4e <its_bme280_init+0x2c>
		return rc;
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	e029      	b.n	8005ba2 <its_bme280_init+0x80>

	rc = bme280_init(&dev->driver);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	3308      	adds	r3, #8
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7fe fd05 	bl	8004562 <bme280_init>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	60bb      	str	r3, [r7, #8]
	if (0 != rc)
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d001      	beq.n	8005b66 <its_bme280_init+0x44>
		return rc;
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	e01d      	b.n	8005ba2 <its_bme280_init+0x80>

	rc = bme280_set_sensor_settings(BME280_ALL_SETTINGS_SEL, &dev->driver);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	3308      	adds	r3, #8
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	201f      	movs	r0, #31
 8005b6e:	f7fe fde9 	bl	8004744 <bme280_set_sensor_settings>
 8005b72:	4603      	mov	r3, r0
 8005b74:	60bb      	str	r3, [r7, #8]
	if (0 != rc)
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d001      	beq.n	8005b80 <its_bme280_init+0x5e>
		return rc;
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	e010      	b.n	8005ba2 <its_bme280_init+0x80>

	rc = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev->driver);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	3308      	adds	r3, #8
 8005b84:	4619      	mov	r1, r3
 8005b86:	2003      	movs	r0, #3
 8005b88:	f7fe fe31 	bl	80047ee <bme280_set_sensor_mode>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	60bb      	str	r3, [r7, #8]
	if (0 != rc)
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <its_bme280_init+0x78>
		return rc;
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	e003      	b.n	8005ba2 <its_bme280_init+0x80>

	HAL_Delay(10); // Иначе первые данные получаются плохие
 8005b9a:	200a      	movs	r0, #10
 8005b9c:	f000 f9d0 	bl	8005f40 <HAL_Delay>
	return 0;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	0000      	movs	r0, r0
 8005bac:	0000      	movs	r0, r0
	...

08005bb0 <its_bme280_read>:
}


//Заменить в функци структура мавлинка на собственную
int its_bme280_read(its_bme280_id_t id, bme_important_shit * data)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b08a      	sub	sp, #40	; 0x28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	6039      	str	r1, [r7, #0]
 8005bba:	71fb      	strb	r3, [r7, #7]
	its_bme280_t * const dev = _dev_by_id(id);
 8005bbc:	79fb      	ldrb	r3, [r7, #7]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7ff ff10 	bl	80059e4 <_dev_by_id>
 8005bc4:	6278      	str	r0, [r7, #36]	; 0x24

	struct bme280_data bme280_data;

	int rc = bme280_get_sensor_data(BME280_ALL, &bme280_data, &dev->driver);
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc8:	f103 0208 	add.w	r2, r3, #8
 8005bcc:	f107 0308 	add.w	r3, r7, #8
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	2007      	movs	r0, #7
 8005bd4:	f7fe fead 	bl	8004932 <bme280_get_sensor_data>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	623b      	str	r3, [r7, #32]
	if (0 != rc)
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <its_bme280_read+0x36>
		return rc;
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	e044      	b.n	8005c70 <its_bme280_read+0xc0>

	data->time_steady = HAL_GetTick();
 8005be6:	f000 f99f 	bl	8005f28 <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	611a      	str	r2, [r3, #16]

	data->pressure = bme280_data.pressure;
 8005bf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bf4:	6839      	ldr	r1, [r7, #0]
 8005bf6:	e9c1 2300 	strd	r2, r3, [r1]
	data->temperature = bme280_data.temperature;
 8005bfa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005bfe:	6839      	ldr	r1, [r7, #0]
 8005c00:	e9c1 2306 	strd	r2, r3, [r1, #24]
	data->humidity = bme280_data.humidity;
 8005c04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c08:	6839      	ldr	r1, [r7, #0]
 8005c0a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	data->altitude =  44330.0*(1.0 - pow((float)bme280_data.pressure/data->bme_pres_grow, 1.0/5.255)); // Написать функцию пересчета в высоту
 8005c0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c12:	4610      	mov	r0, r2
 8005c14:	4619      	mov	r1, r3
 8005c16:	f7fa ffef 	bl	8000bf8 <__aeabi_d2f>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7fa fc9b 	bl	8000558 <__aeabi_f2d>
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005c28:	f7fa fe18 	bl	800085c <__aeabi_ddiv>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	460b      	mov	r3, r1
 8005c30:	ec43 2b17 	vmov	d7, r2, r3
 8005c34:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8005c78 <its_bme280_read+0xc8>
 8005c38:	eeb0 0a47 	vmov.f32	s0, s14
 8005c3c:	eef0 0a67 	vmov.f32	s1, s15
 8005c40:	f00e fe76 	bl	8014930 <pow>
 8005c44:	ec53 2b10 	vmov	r2, r3, d0
 8005c48:	f04f 0000 	mov.w	r0, #0
 8005c4c:	490e      	ldr	r1, [pc, #56]	; (8005c88 <its_bme280_read+0xd8>)
 8005c4e:	f7fa fb23 	bl	8000298 <__aeabi_dsub>
 8005c52:	4602      	mov	r2, r0
 8005c54:	460b      	mov	r3, r1
 8005c56:	4610      	mov	r0, r2
 8005c58:	4619      	mov	r1, r3
 8005c5a:	a309      	add	r3, pc, #36	; (adr r3, 8005c80 <its_bme280_read+0xd0>)
 8005c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c60:	f7fa fcd2 	bl	8000608 <__aeabi_dmul>
 8005c64:	4602      	mov	r2, r0
 8005c66:	460b      	mov	r3, r1
 8005c68:	6839      	ldr	r1, [r7, #0]
 8005c6a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	return 0;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3728      	adds	r7, #40	; 0x28
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	ccd9456c 	.word	0xccd9456c
 8005c7c:	3fc85b95 	.word	0x3fc85b95
 8005c80:	00000000 	.word	0x00000000
 8005c84:	40e5a540 	.word	0x40e5a540
 8005c88:	3ff00000 	.word	0x3ff00000

08005c8c <wait_for_gpio_state_timeout>:

#define SDA_PORT GPIOB
#define SDA_PIN  GPIO_PIN_9

static uint8_t wait_for_gpio_state_timeout(GPIO_TypeDef *port, uint16_t pin, GPIO_PinState state, uint32_t timeout)
 {
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	607b      	str	r3, [r7, #4]
 8005c96:	460b      	mov	r3, r1
 8005c98:	817b      	strh	r3, [r7, #10]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	727b      	strb	r3, [r7, #9]
    uint32_t Tickstart = HAL_GetTick();
 8005c9e:	f000 f943 	bl	8005f28 <HAL_GetTick>
 8005ca2:	6138      	str	r0, [r7, #16]
    uint8_t ret = 1;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	75fb      	strb	r3, [r7, #23]

    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (1 == ret);) // Wait until flag is set
 8005ca8:	e011      	b.n	8005cce <wait_for_gpio_state_timeout+0x42>
    {
        if(timeout != HAL_MAX_DELAY) // Check for the timeout
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb0:	d00c      	beq.n	8005ccc <wait_for_gpio_state_timeout+0x40>
        {
            if((timeout == 0U) || ((HAL_GetTick() - Tickstart) > timeout)) ret = 0;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d007      	beq.n	8005cc8 <wait_for_gpio_state_timeout+0x3c>
 8005cb8:	f000 f936 	bl	8005f28 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d201      	bcs.n	8005ccc <wait_for_gpio_state_timeout+0x40>
 8005cc8:	2300      	movs	r3, #0
 8005cca:	75fb      	strb	r3, [r7, #23]
        }

        asm("nop");
 8005ccc:	bf00      	nop
    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (1 == ret);) // Wait until flag is set
 8005cce:	897b      	ldrh	r3, [r7, #10]
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f001 f8c4 	bl	8006e60 <HAL_GPIO_ReadPin>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	461a      	mov	r2, r3
 8005cdc:	7a7b      	ldrb	r3, [r7, #9]
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d002      	beq.n	8005ce8 <wait_for_gpio_state_timeout+0x5c>
 8005ce2:	7dfb      	ldrb	r3, [r7, #23]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d0e0      	beq.n	8005caa <wait_for_gpio_state_timeout+0x1e>
    }
    return ret;
 8005ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3718      	adds	r7, #24
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
	...

08005cf4 <I2C_ClearBusyFlagErratum>:

void I2C_ClearBusyFlagErratum(I2C_HandleTypeDef *hi2c, uint32_t timeout)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b088      	sub	sp, #32
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
        // 2.13.7 I2C analog filter may provide wrong value, locking BUSY. STM32F10xx8 STM32F10xxB Errata sheet

    GPIO_InitTypeDef GPIO_InitStructure = {0};
 8005cfe:	f107 030c 	add.w	r3, r7, #12
 8005d02:	2200      	movs	r2, #0
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	605a      	str	r2, [r3, #4]
 8005d08:	609a      	str	r2, [r3, #8]
 8005d0a:	60da      	str	r2, [r3, #12]
 8005d0c:	611a      	str	r2, [r3, #16]

    // 1. Clear PE bit.
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_PE);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0201 	bic.w	r2, r2, #1
 8005d1c:	601a      	str	r2, [r3, #0]

    //  2. Configure the SCL and SDA I/Os as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_I2C_DeInit(hi2c);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f001 fa14 	bl	800714c <HAL_I2C_DeInit>

    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 8005d24:	2311      	movs	r3, #17
 8005d26:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	617b      	str	r3, [r7, #20]

    GPIO_InitStructure.Pin = SCL_PIN; // SCL // если пин другой, то укажите нужный
 8005d2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d30:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SCL_PORT, &GPIO_InitStructure); // если порт другой, то укажите нужную букву GPIOх, и ниже там все порты и пины поменяйте на своё
 8005d32:	f107 030c 	add.w	r3, r7, #12
 8005d36:	4619      	mov	r1, r3
 8005d38:	4847      	ldr	r0, [pc, #284]	; (8005e58 <I2C_ClearBusyFlagErratum+0x164>)
 8005d3a:	f000 fe29 	bl	8006990 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = SDA_PIN; // SDA
 8005d3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d42:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SDA_PORT, &GPIO_InitStructure);
 8005d44:	f107 030c 	add.w	r3, r7, #12
 8005d48:	4619      	mov	r1, r3
 8005d4a:	4843      	ldr	r0, [pc, #268]	; (8005e58 <I2C_ClearBusyFlagErratum+0x164>)
 8005d4c:	f000 fe20 	bl	8006990 <HAL_GPIO_Init>

    // 3. Check SCL and SDA High level in GPIOx_IDR.
    HAL_GPIO_WritePin(SDA_PORT, SDA_PIN, GPIO_PIN_SET);
 8005d50:	2201      	movs	r2, #1
 8005d52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d56:	4840      	ldr	r0, [pc, #256]	; (8005e58 <I2C_ClearBusyFlagErratum+0x164>)
 8005d58:	f001 f89a 	bl	8006e90 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_SET);
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d62:	483d      	ldr	r0, [pc, #244]	; (8005e58 <I2C_ClearBusyFlagErratum+0x164>)
 8005d64:	f001 f894 	bl	8006e90 <HAL_GPIO_WritePin>

    wait_for_gpio_state_timeout(SCL_PORT, SCL_PIN, GPIO_PIN_SET, timeout);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d70:	4839      	ldr	r0, [pc, #228]	; (8005e58 <I2C_ClearBusyFlagErratum+0x164>)
 8005d72:	f7ff ff8b 	bl	8005c8c <wait_for_gpio_state_timeout>
    wait_for_gpio_state_timeout(SDA_PORT, SDA_PIN, GPIO_PIN_SET, timeout);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d7e:	4836      	ldr	r0, [pc, #216]	; (8005e58 <I2C_ClearBusyFlagErratum+0x164>)
 8005d80:	f7ff ff84 	bl	8005c8c <wait_for_gpio_state_timeout>

    // 4. Configure the SDA I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(SDA_PORT, SDA_PIN, GPIO_PIN_RESET);
 8005d84:	2200      	movs	r2, #0
 8005d86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d8a:	4833      	ldr	r0, [pc, #204]	; (8005e58 <I2C_ClearBusyFlagErratum+0x164>)
 8005d8c:	f001 f880 	bl	8006e90 <HAL_GPIO_WritePin>

    // 5. Check SDA Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(SDA_PORT, SDA_PIN, GPIO_PIN_RESET, timeout);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d98:	482f      	ldr	r0, [pc, #188]	; (8005e58 <I2C_ClearBusyFlagErratum+0x164>)
 8005d9a:	f7ff ff77 	bl	8005c8c <wait_for_gpio_state_timeout>

    // 6. Configure the SCL I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_RESET);
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005da4:	482c      	ldr	r0, [pc, #176]	; (8005e58 <I2C_ClearBusyFlagErratum+0x164>)
 8005da6:	f001 f873 	bl	8006e90 <HAL_GPIO_WritePin>

    // 7. Check SCL Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(SCL_PORT, SCL_PIN, GPIO_PIN_RESET, timeout);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005db2:	4829      	ldr	r0, [pc, #164]	; (8005e58 <I2C_ClearBusyFlagErratum+0x164>)
 8005db4:	f7ff ff6a 	bl	8005c8c <wait_for_gpio_state_timeout>

    // 8. Configure the SCL I/O as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_SET);
 8005db8:	2201      	movs	r2, #1
 8005dba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005dbe:	4826      	ldr	r0, [pc, #152]	; (8005e58 <I2C_ClearBusyFlagErratum+0x164>)
 8005dc0:	f001 f866 	bl	8006e90 <HAL_GPIO_WritePin>

    // 9. Check SCL High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(SCL_PORT, SCL_PIN, GPIO_PIN_SET, timeout);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005dcc:	4822      	ldr	r0, [pc, #136]	; (8005e58 <I2C_ClearBusyFlagErratum+0x164>)
 8005dce:	f7ff ff5d 	bl	8005c8c <wait_for_gpio_state_timeout>

    // 10. Configure the SDA I/O as General Purpose Output Open-Drain , High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(SDA_PORT, SDA_PIN, GPIO_PIN_SET);
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005dd8:	481f      	ldr	r0, [pc, #124]	; (8005e58 <I2C_ClearBusyFlagErratum+0x164>)
 8005dda:	f001 f859 	bl	8006e90 <HAL_GPIO_WritePin>

    // 11. Check SDA High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(SDA_PORT, SDA_PIN, GPIO_PIN_SET, timeout);
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005de6:	481c      	ldr	r0, [pc, #112]	; (8005e58 <I2C_ClearBusyFlagErratum+0x164>)
 8005de8:	f7ff ff50 	bl	8005c8c <wait_for_gpio_state_timeout>

    // 12. Configure the SCL and SDA I/Os as Alternate function Open-Drain.
    GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8005dec:	2312      	movs	r3, #18
 8005dee:	613b      	str	r3, [r7, #16]
    //GPIO_InitStructure.Alternate = GPIO_AF4_I2C2; // F4

    GPIO_InitStructure.Pin = SCL_PIN;
 8005df0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005df4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SCL_PORT, &GPIO_InitStructure);
 8005df6:	f107 030c 	add.w	r3, r7, #12
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	4816      	ldr	r0, [pc, #88]	; (8005e58 <I2C_ClearBusyFlagErratum+0x164>)
 8005dfe:	f000 fdc7 	bl	8006990 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = SDA_PIN;
 8005e02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e06:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SDA_PORT, &GPIO_InitStructure);
 8005e08:	f107 030c 	add.w	r3, r7, #12
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	4812      	ldr	r0, [pc, #72]	; (8005e58 <I2C_ClearBusyFlagErratum+0x164>)
 8005e10:	f000 fdbe 	bl	8006990 <HAL_GPIO_Init>

    // 13. Set SWRST bit in I2Cx_CR1 register.
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e22:	601a      	str	r2, [r3, #0]
    asm("nop");
 8005e24:	bf00      	nop

    /* 14. Clear SWRST bit in I2Cx_CR1 register. */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e34:	601a      	str	r2, [r3, #0]
    asm("nop");
 8005e36:	bf00      	nop

    /* 15. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_PE);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f042 0201 	orr.w	r2, r2, #1
 8005e46:	601a      	str	r2, [r3, #0]
    asm("nop");
 8005e48:	bf00      	nop

    // Call initialization function.
    HAL_I2C_Init(hi2c);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f001 f83a 	bl	8006ec4 <HAL_I2C_Init>
}
 8005e50:	bf00      	nop
 8005e52:	3720      	adds	r7, #32
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	40020400 	.word	0x40020400

08005e5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005e60:	4b0e      	ldr	r3, [pc, #56]	; (8005e9c <HAL_Init+0x40>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a0d      	ldr	r2, [pc, #52]	; (8005e9c <HAL_Init+0x40>)
 8005e66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005e6c:	4b0b      	ldr	r3, [pc, #44]	; (8005e9c <HAL_Init+0x40>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a0a      	ldr	r2, [pc, #40]	; (8005e9c <HAL_Init+0x40>)
 8005e72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005e78:	4b08      	ldr	r3, [pc, #32]	; (8005e9c <HAL_Init+0x40>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a07      	ldr	r2, [pc, #28]	; (8005e9c <HAL_Init+0x40>)
 8005e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e84:	2003      	movs	r0, #3
 8005e86:	f000 fd41 	bl	800690c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005e8a:	200f      	movs	r0, #15
 8005e8c:	f000 f808 	bl	8005ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005e90:	f7fd ff74 	bl	8003d7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	40023c00 	.word	0x40023c00

08005ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005ea8:	4b12      	ldr	r3, [pc, #72]	; (8005ef4 <HAL_InitTick+0x54>)
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	4b12      	ldr	r3, [pc, #72]	; (8005ef8 <HAL_InitTick+0x58>)
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 fd59 	bl	8006976 <HAL_SYSTICK_Config>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d001      	beq.n	8005ece <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e00e      	b.n	8005eec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2b0f      	cmp	r3, #15
 8005ed2:	d80a      	bhi.n	8005eea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	6879      	ldr	r1, [r7, #4]
 8005ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8005edc:	f000 fd21 	bl	8006922 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005ee0:	4a06      	ldr	r2, [pc, #24]	; (8005efc <HAL_InitTick+0x5c>)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	e000      	b.n	8005eec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	20000004 	.word	0x20000004
 8005ef8:	20000054 	.word	0x20000054
 8005efc:	20000050 	.word	0x20000050

08005f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f00:	b480      	push	{r7}
 8005f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005f04:	4b06      	ldr	r3, [pc, #24]	; (8005f20 <HAL_IncTick+0x20>)
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	461a      	mov	r2, r3
 8005f0a:	4b06      	ldr	r3, [pc, #24]	; (8005f24 <HAL_IncTick+0x24>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4413      	add	r3, r2
 8005f10:	4a04      	ldr	r2, [pc, #16]	; (8005f24 <HAL_IncTick+0x24>)
 8005f12:	6013      	str	r3, [r2, #0]
}
 8005f14:	bf00      	nop
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	20000054 	.word	0x20000054
 8005f24:	200029b0 	.word	0x200029b0

08005f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8005f2c:	4b03      	ldr	r3, [pc, #12]	; (8005f3c <HAL_GetTick+0x14>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	200029b0 	.word	0x200029b0

08005f40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005f48:	f7ff ffee 	bl	8005f28 <HAL_GetTick>
 8005f4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f58:	d005      	beq.n	8005f66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005f5a:	4b0a      	ldr	r3, [pc, #40]	; (8005f84 <HAL_Delay+0x44>)
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4413      	add	r3, r2
 8005f64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005f66:	bf00      	nop
 8005f68:	f7ff ffde 	bl	8005f28 <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d8f7      	bhi.n	8005f68 <HAL_Delay+0x28>
  {
  }
}
 8005f78:	bf00      	nop
 8005f7a:	bf00      	nop
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	20000054 	.word	0x20000054

08005f88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f90:	2300      	movs	r3, #0
 8005f92:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e033      	b.n	8006006 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d109      	bne.n	8005fba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7fd ff10 	bl	8003dcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbe:	f003 0310 	and.w	r3, r3, #16
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d118      	bne.n	8005ff8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005fce:	f023 0302 	bic.w	r3, r3, #2
 8005fd2:	f043 0202 	orr.w	r2, r3, #2
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 faca 	bl	8006574 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	f023 0303 	bic.w	r3, r3, #3
 8005fee:	f043 0201 	orr.w	r2, r3, #1
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	641a      	str	r2, [r3, #64]	; 0x40
 8005ff6:	e001      	b.n	8005ffc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006004:	7bfb      	ldrb	r3, [r7, #15]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
	...

08006010 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006018:	2300      	movs	r3, #0
 800601a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006022:	2b01      	cmp	r3, #1
 8006024:	d101      	bne.n	800602a <HAL_ADC_Start+0x1a>
 8006026:	2302      	movs	r3, #2
 8006028:	e097      	b.n	800615a <HAL_ADC_Start+0x14a>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f003 0301 	and.w	r3, r3, #1
 800603c:	2b01      	cmp	r3, #1
 800603e:	d018      	beq.n	8006072 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689a      	ldr	r2, [r3, #8]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f042 0201 	orr.w	r2, r2, #1
 800604e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006050:	4b45      	ldr	r3, [pc, #276]	; (8006168 <HAL_ADC_Start+0x158>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a45      	ldr	r2, [pc, #276]	; (800616c <HAL_ADC_Start+0x15c>)
 8006056:	fba2 2303 	umull	r2, r3, r2, r3
 800605a:	0c9a      	lsrs	r2, r3, #18
 800605c:	4613      	mov	r3, r2
 800605e:	005b      	lsls	r3, r3, #1
 8006060:	4413      	add	r3, r2
 8006062:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006064:	e002      	b.n	800606c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	3b01      	subs	r3, #1
 800606a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1f9      	bne.n	8006066 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	2b01      	cmp	r3, #1
 800607e:	d15f      	bne.n	8006140 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006084:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006088:	f023 0301 	bic.w	r3, r3, #1
 800608c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d007      	beq.n	80060b2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80060aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060be:	d106      	bne.n	80060ce <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c4:	f023 0206 	bic.w	r2, r3, #6
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	645a      	str	r2, [r3, #68]	; 0x44
 80060cc:	e002      	b.n	80060d4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80060dc:	4b24      	ldr	r3, [pc, #144]	; (8006170 <HAL_ADC_Start+0x160>)
 80060de:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80060e8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	f003 031f 	and.w	r3, r3, #31
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10f      	bne.n	8006116 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d129      	bne.n	8006158 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689a      	ldr	r2, [r3, #8]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006112:	609a      	str	r2, [r3, #8]
 8006114:	e020      	b.n	8006158 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a16      	ldr	r2, [pc, #88]	; (8006174 <HAL_ADC_Start+0x164>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d11b      	bne.n	8006158 <HAL_ADC_Start+0x148>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d114      	bne.n	8006158 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	689a      	ldr	r2, [r3, #8]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800613c:	609a      	str	r2, [r3, #8]
 800613e:	e00b      	b.n	8006158 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006144:	f043 0210 	orr.w	r2, r3, #16
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006150:	f043 0201 	orr.w	r2, r3, #1
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	20000004 	.word	0x20000004
 800616c:	431bde83 	.word	0x431bde83
 8006170:	40012300 	.word	0x40012300
 8006174:	40012000 	.word	0x40012000

08006178 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006186:	2b01      	cmp	r3, #1
 8006188:	d101      	bne.n	800618e <HAL_ADC_Stop+0x16>
 800618a:	2302      	movs	r3, #2
 800618c:	e021      	b.n	80061d2 <HAL_ADC_Stop+0x5a>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	689a      	ldr	r2, [r3, #8]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 0201 	bic.w	r2, r2, #1
 80061a4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d109      	bne.n	80061c8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80061bc:	f023 0301 	bic.w	r3, r3, #1
 80061c0:	f043 0201 	orr.w	r2, r3, #1
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr

080061de <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b084      	sub	sp, #16
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
 80061e6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80061e8:	2300      	movs	r3, #0
 80061ea:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061fa:	d113      	bne.n	8006224 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800620a:	d10b      	bne.n	8006224 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006210:	f043 0220 	orr.w	r2, r3, #32
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e063      	b.n	80062ec <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006224:	f7ff fe80 	bl	8005f28 <HAL_GetTick>
 8006228:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800622a:	e021      	b.n	8006270 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006232:	d01d      	beq.n	8006270 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d007      	beq.n	800624a <HAL_ADC_PollForConversion+0x6c>
 800623a:	f7ff fe75 	bl	8005f28 <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	429a      	cmp	r2, r3
 8006248:	d212      	bcs.n	8006270 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0302 	and.w	r3, r3, #2
 8006254:	2b02      	cmp	r3, #2
 8006256:	d00b      	beq.n	8006270 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625c:	f043 0204 	orr.w	r2, r3, #4
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	e03d      	b.n	80062ec <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0302 	and.w	r3, r3, #2
 800627a:	2b02      	cmp	r3, #2
 800627c:	d1d6      	bne.n	800622c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f06f 0212 	mvn.w	r2, #18
 8006286:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d123      	bne.n	80062ea <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d11f      	bne.n	80062ea <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d006      	beq.n	80062c6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d111      	bne.n	80062ea <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d105      	bne.n	80062ea <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e2:	f043 0201 	orr.w	r2, r3, #1
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006302:	4618      	mov	r0, r3
 8006304:	370c      	adds	r7, #12
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
	...

08006310 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800631a:	2300      	movs	r3, #0
 800631c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006324:	2b01      	cmp	r3, #1
 8006326:	d101      	bne.n	800632c <HAL_ADC_ConfigChannel+0x1c>
 8006328:	2302      	movs	r3, #2
 800632a:	e113      	b.n	8006554 <HAL_ADC_ConfigChannel+0x244>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2b09      	cmp	r3, #9
 800633a:	d925      	bls.n	8006388 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68d9      	ldr	r1, [r3, #12]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	b29b      	uxth	r3, r3
 8006348:	461a      	mov	r2, r3
 800634a:	4613      	mov	r3, r2
 800634c:	005b      	lsls	r3, r3, #1
 800634e:	4413      	add	r3, r2
 8006350:	3b1e      	subs	r3, #30
 8006352:	2207      	movs	r2, #7
 8006354:	fa02 f303 	lsl.w	r3, r2, r3
 8006358:	43da      	mvns	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	400a      	ands	r2, r1
 8006360:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68d9      	ldr	r1, [r3, #12]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	689a      	ldr	r2, [r3, #8]
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	b29b      	uxth	r3, r3
 8006372:	4618      	mov	r0, r3
 8006374:	4603      	mov	r3, r0
 8006376:	005b      	lsls	r3, r3, #1
 8006378:	4403      	add	r3, r0
 800637a:	3b1e      	subs	r3, #30
 800637c:	409a      	lsls	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	430a      	orrs	r2, r1
 8006384:	60da      	str	r2, [r3, #12]
 8006386:	e022      	b.n	80063ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6919      	ldr	r1, [r3, #16]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	b29b      	uxth	r3, r3
 8006394:	461a      	mov	r2, r3
 8006396:	4613      	mov	r3, r2
 8006398:	005b      	lsls	r3, r3, #1
 800639a:	4413      	add	r3, r2
 800639c:	2207      	movs	r2, #7
 800639e:	fa02 f303 	lsl.w	r3, r2, r3
 80063a2:	43da      	mvns	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	400a      	ands	r2, r1
 80063aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6919      	ldr	r1, [r3, #16]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	689a      	ldr	r2, [r3, #8]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	4618      	mov	r0, r3
 80063be:	4603      	mov	r3, r0
 80063c0:	005b      	lsls	r3, r3, #1
 80063c2:	4403      	add	r3, r0
 80063c4:	409a      	lsls	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	2b06      	cmp	r3, #6
 80063d4:	d824      	bhi.n	8006420 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	685a      	ldr	r2, [r3, #4]
 80063e0:	4613      	mov	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4413      	add	r3, r2
 80063e6:	3b05      	subs	r3, #5
 80063e8:	221f      	movs	r2, #31
 80063ea:	fa02 f303 	lsl.w	r3, r2, r3
 80063ee:	43da      	mvns	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	400a      	ands	r2, r1
 80063f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	b29b      	uxth	r3, r3
 8006404:	4618      	mov	r0, r3
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	4613      	mov	r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4413      	add	r3, r2
 8006410:	3b05      	subs	r3, #5
 8006412:	fa00 f203 	lsl.w	r2, r0, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	635a      	str	r2, [r3, #52]	; 0x34
 800641e:	e04c      	b.n	80064ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	2b0c      	cmp	r3, #12
 8006426:	d824      	bhi.n	8006472 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	685a      	ldr	r2, [r3, #4]
 8006432:	4613      	mov	r3, r2
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	4413      	add	r3, r2
 8006438:	3b23      	subs	r3, #35	; 0x23
 800643a:	221f      	movs	r2, #31
 800643c:	fa02 f303 	lsl.w	r3, r2, r3
 8006440:	43da      	mvns	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	400a      	ands	r2, r1
 8006448:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	b29b      	uxth	r3, r3
 8006456:	4618      	mov	r0, r3
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	4613      	mov	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	3b23      	subs	r3, #35	; 0x23
 8006464:	fa00 f203 	lsl.w	r2, r0, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	430a      	orrs	r2, r1
 800646e:	631a      	str	r2, [r3, #48]	; 0x30
 8006470:	e023      	b.n	80064ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	4613      	mov	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	3b41      	subs	r3, #65	; 0x41
 8006484:	221f      	movs	r2, #31
 8006486:	fa02 f303 	lsl.w	r3, r2, r3
 800648a:	43da      	mvns	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	400a      	ands	r2, r1
 8006492:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	b29b      	uxth	r3, r3
 80064a0:	4618      	mov	r0, r3
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	4613      	mov	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	3b41      	subs	r3, #65	; 0x41
 80064ae:	fa00 f203 	lsl.w	r2, r0, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80064ba:	4b29      	ldr	r3, [pc, #164]	; (8006560 <HAL_ADC_ConfigChannel+0x250>)
 80064bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a28      	ldr	r2, [pc, #160]	; (8006564 <HAL_ADC_ConfigChannel+0x254>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d10f      	bne.n	80064e8 <HAL_ADC_ConfigChannel+0x1d8>
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2b12      	cmp	r3, #18
 80064ce:	d10b      	bne.n	80064e8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a1d      	ldr	r2, [pc, #116]	; (8006564 <HAL_ADC_ConfigChannel+0x254>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d12b      	bne.n	800654a <HAL_ADC_ConfigChannel+0x23a>
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a1c      	ldr	r2, [pc, #112]	; (8006568 <HAL_ADC_ConfigChannel+0x258>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d003      	beq.n	8006504 <HAL_ADC_ConfigChannel+0x1f4>
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b11      	cmp	r3, #17
 8006502:	d122      	bne.n	800654a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a11      	ldr	r2, [pc, #68]	; (8006568 <HAL_ADC_ConfigChannel+0x258>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d111      	bne.n	800654a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006526:	4b11      	ldr	r3, [pc, #68]	; (800656c <HAL_ADC_ConfigChannel+0x25c>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a11      	ldr	r2, [pc, #68]	; (8006570 <HAL_ADC_ConfigChannel+0x260>)
 800652c:	fba2 2303 	umull	r2, r3, r2, r3
 8006530:	0c9a      	lsrs	r2, r3, #18
 8006532:	4613      	mov	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4413      	add	r3, r2
 8006538:	005b      	lsls	r3, r3, #1
 800653a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800653c:	e002      	b.n	8006544 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	3b01      	subs	r3, #1
 8006542:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1f9      	bne.n	800653e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3714      	adds	r7, #20
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr
 8006560:	40012300 	.word	0x40012300
 8006564:	40012000 	.word	0x40012000
 8006568:	10000012 	.word	0x10000012
 800656c:	20000004 	.word	0x20000004
 8006570:	431bde83 	.word	0x431bde83

08006574 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800657c:	4b79      	ldr	r3, [pc, #484]	; (8006764 <ADC_Init+0x1f0>)
 800657e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	431a      	orrs	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	6859      	ldr	r1, [r3, #4]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	021a      	lsls	r2, r3, #8
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	430a      	orrs	r2, r1
 80065bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80065cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6859      	ldr	r1, [r3, #4]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	689a      	ldr	r2, [r3, #8]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	430a      	orrs	r2, r1
 80065de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	689a      	ldr	r2, [r3, #8]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6899      	ldr	r1, [r3, #8]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68da      	ldr	r2, [r3, #12]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	430a      	orrs	r2, r1
 8006600:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006606:	4a58      	ldr	r2, [pc, #352]	; (8006768 <ADC_Init+0x1f4>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d022      	beq.n	8006652 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	689a      	ldr	r2, [r3, #8]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800661a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	6899      	ldr	r1, [r3, #8]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	430a      	orrs	r2, r1
 800662c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689a      	ldr	r2, [r3, #8]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800663c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	6899      	ldr	r1, [r3, #8]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	430a      	orrs	r2, r1
 800664e:	609a      	str	r2, [r3, #8]
 8006650:	e00f      	b.n	8006672 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	689a      	ldr	r2, [r3, #8]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006660:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	689a      	ldr	r2, [r3, #8]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006670:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	689a      	ldr	r2, [r3, #8]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f022 0202 	bic.w	r2, r2, #2
 8006680:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	6899      	ldr	r1, [r3, #8]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	7e1b      	ldrb	r3, [r3, #24]
 800668c:	005a      	lsls	r2, r3, #1
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	430a      	orrs	r2, r1
 8006694:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 3020 	ldrb.w	r3, [r3, #32]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d01b      	beq.n	80066d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685a      	ldr	r2, [r3, #4]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80066be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6859      	ldr	r1, [r3, #4]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ca:	3b01      	subs	r3, #1
 80066cc:	035a      	lsls	r2, r3, #13
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	605a      	str	r2, [r3, #4]
 80066d6:	e007      	b.n	80066e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	685a      	ldr	r2, [r3, #4]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80066f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	3b01      	subs	r3, #1
 8006704:	051a      	lsls	r2, r3, #20
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	430a      	orrs	r2, r1
 800670c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	689a      	ldr	r2, [r3, #8]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800671c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6899      	ldr	r1, [r3, #8]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800672a:	025a      	lsls	r2, r3, #9
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	430a      	orrs	r2, r1
 8006732:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689a      	ldr	r2, [r3, #8]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006742:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6899      	ldr	r1, [r3, #8]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	029a      	lsls	r2, r3, #10
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	609a      	str	r2, [r3, #8]
}
 8006758:	bf00      	nop
 800675a:	3714      	adds	r7, #20
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr
 8006764:	40012300 	.word	0x40012300
 8006768:	0f000001 	.word	0x0f000001

0800676c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f003 0307 	and.w	r3, r3, #7
 800677a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800677c:	4b0c      	ldr	r3, [pc, #48]	; (80067b0 <__NVIC_SetPriorityGrouping+0x44>)
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006788:	4013      	ands	r3, r2
 800678a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006794:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800679c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800679e:	4a04      	ldr	r2, [pc, #16]	; (80067b0 <__NVIC_SetPriorityGrouping+0x44>)
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	60d3      	str	r3, [r2, #12]
}
 80067a4:	bf00      	nop
 80067a6:	3714      	adds	r7, #20
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr
 80067b0:	e000ed00 	.word	0xe000ed00

080067b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80067b4:	b480      	push	{r7}
 80067b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80067b8:	4b04      	ldr	r3, [pc, #16]	; (80067cc <__NVIC_GetPriorityGrouping+0x18>)
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	0a1b      	lsrs	r3, r3, #8
 80067be:	f003 0307 	and.w	r3, r3, #7
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr
 80067cc:	e000ed00 	.word	0xe000ed00

080067d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	4603      	mov	r3, r0
 80067d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	db0b      	blt.n	80067fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80067e2:	79fb      	ldrb	r3, [r7, #7]
 80067e4:	f003 021f 	and.w	r2, r3, #31
 80067e8:	4907      	ldr	r1, [pc, #28]	; (8006808 <__NVIC_EnableIRQ+0x38>)
 80067ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067ee:	095b      	lsrs	r3, r3, #5
 80067f0:	2001      	movs	r0, #1
 80067f2:	fa00 f202 	lsl.w	r2, r0, r2
 80067f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80067fa:	bf00      	nop
 80067fc:	370c      	adds	r7, #12
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	e000e100 	.word	0xe000e100

0800680c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	4603      	mov	r3, r0
 8006814:	6039      	str	r1, [r7, #0]
 8006816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800681c:	2b00      	cmp	r3, #0
 800681e:	db0a      	blt.n	8006836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	b2da      	uxtb	r2, r3
 8006824:	490c      	ldr	r1, [pc, #48]	; (8006858 <__NVIC_SetPriority+0x4c>)
 8006826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800682a:	0112      	lsls	r2, r2, #4
 800682c:	b2d2      	uxtb	r2, r2
 800682e:	440b      	add	r3, r1
 8006830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006834:	e00a      	b.n	800684c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	b2da      	uxtb	r2, r3
 800683a:	4908      	ldr	r1, [pc, #32]	; (800685c <__NVIC_SetPriority+0x50>)
 800683c:	79fb      	ldrb	r3, [r7, #7]
 800683e:	f003 030f 	and.w	r3, r3, #15
 8006842:	3b04      	subs	r3, #4
 8006844:	0112      	lsls	r2, r2, #4
 8006846:	b2d2      	uxtb	r2, r2
 8006848:	440b      	add	r3, r1
 800684a:	761a      	strb	r2, [r3, #24]
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr
 8006858:	e000e100 	.word	0xe000e100
 800685c:	e000ed00 	.word	0xe000ed00

08006860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006860:	b480      	push	{r7}
 8006862:	b089      	sub	sp, #36	; 0x24
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f003 0307 	and.w	r3, r3, #7
 8006872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	f1c3 0307 	rsb	r3, r3, #7
 800687a:	2b04      	cmp	r3, #4
 800687c:	bf28      	it	cs
 800687e:	2304      	movcs	r3, #4
 8006880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	3304      	adds	r3, #4
 8006886:	2b06      	cmp	r3, #6
 8006888:	d902      	bls.n	8006890 <NVIC_EncodePriority+0x30>
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	3b03      	subs	r3, #3
 800688e:	e000      	b.n	8006892 <NVIC_EncodePriority+0x32>
 8006890:	2300      	movs	r3, #0
 8006892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006894:	f04f 32ff 	mov.w	r2, #4294967295
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	fa02 f303 	lsl.w	r3, r2, r3
 800689e:	43da      	mvns	r2, r3
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	401a      	ands	r2, r3
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80068a8:	f04f 31ff 	mov.w	r1, #4294967295
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	fa01 f303 	lsl.w	r3, r1, r3
 80068b2:	43d9      	mvns	r1, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068b8:	4313      	orrs	r3, r2
         );
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3724      	adds	r7, #36	; 0x24
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
	...

080068c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	3b01      	subs	r3, #1
 80068d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80068d8:	d301      	bcc.n	80068de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80068da:	2301      	movs	r3, #1
 80068dc:	e00f      	b.n	80068fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80068de:	4a0a      	ldr	r2, [pc, #40]	; (8006908 <SysTick_Config+0x40>)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	3b01      	subs	r3, #1
 80068e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80068e6:	210f      	movs	r1, #15
 80068e8:	f04f 30ff 	mov.w	r0, #4294967295
 80068ec:	f7ff ff8e 	bl	800680c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80068f0:	4b05      	ldr	r3, [pc, #20]	; (8006908 <SysTick_Config+0x40>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80068f6:	4b04      	ldr	r3, [pc, #16]	; (8006908 <SysTick_Config+0x40>)
 80068f8:	2207      	movs	r2, #7
 80068fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	e000e010 	.word	0xe000e010

0800690c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f7ff ff29 	bl	800676c <__NVIC_SetPriorityGrouping>
}
 800691a:	bf00      	nop
 800691c:	3708      	adds	r7, #8
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006922:	b580      	push	{r7, lr}
 8006924:	b086      	sub	sp, #24
 8006926:	af00      	add	r7, sp, #0
 8006928:	4603      	mov	r3, r0
 800692a:	60b9      	str	r1, [r7, #8]
 800692c:	607a      	str	r2, [r7, #4]
 800692e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006930:	2300      	movs	r3, #0
 8006932:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006934:	f7ff ff3e 	bl	80067b4 <__NVIC_GetPriorityGrouping>
 8006938:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	68b9      	ldr	r1, [r7, #8]
 800693e:	6978      	ldr	r0, [r7, #20]
 8006940:	f7ff ff8e 	bl	8006860 <NVIC_EncodePriority>
 8006944:	4602      	mov	r2, r0
 8006946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800694a:	4611      	mov	r1, r2
 800694c:	4618      	mov	r0, r3
 800694e:	f7ff ff5d 	bl	800680c <__NVIC_SetPriority>
}
 8006952:	bf00      	nop
 8006954:	3718      	adds	r7, #24
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b082      	sub	sp, #8
 800695e:	af00      	add	r7, sp, #0
 8006960:	4603      	mov	r3, r0
 8006962:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006968:	4618      	mov	r0, r3
 800696a:	f7ff ff31 	bl	80067d0 <__NVIC_EnableIRQ>
}
 800696e:	bf00      	nop
 8006970:	3708      	adds	r7, #8
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b082      	sub	sp, #8
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7ff ffa2 	bl	80068c8 <SysTick_Config>
 8006984:	4603      	mov	r3, r0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3708      	adds	r7, #8
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
	...

08006990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006990:	b480      	push	{r7}
 8006992:	b089      	sub	sp, #36	; 0x24
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800699a:	2300      	movs	r3, #0
 800699c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800699e:	2300      	movs	r3, #0
 80069a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80069a2:	2300      	movs	r3, #0
 80069a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80069a6:	2300      	movs	r3, #0
 80069a8:	61fb      	str	r3, [r7, #28]
 80069aa:	e159      	b.n	8006c60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80069ac:	2201      	movs	r2, #1
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	fa02 f303 	lsl.w	r3, r2, r3
 80069b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	4013      	ands	r3, r2
 80069be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80069c0:	693a      	ldr	r2, [r7, #16]
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	f040 8148 	bne.w	8006c5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f003 0303 	and.w	r3, r3, #3
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d005      	beq.n	80069e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d130      	bne.n	8006a44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	005b      	lsls	r3, r3, #1
 80069ec:	2203      	movs	r2, #3
 80069ee:	fa02 f303 	lsl.w	r3, r2, r3
 80069f2:	43db      	mvns	r3, r3
 80069f4:	69ba      	ldr	r2, [r7, #24]
 80069f6:	4013      	ands	r3, r2
 80069f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	68da      	ldr	r2, [r3, #12]
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	005b      	lsls	r3, r3, #1
 8006a02:	fa02 f303 	lsl.w	r3, r2, r3
 8006a06:	69ba      	ldr	r2, [r7, #24]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	69ba      	ldr	r2, [r7, #24]
 8006a10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006a18:	2201      	movs	r2, #1
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a20:	43db      	mvns	r3, r3
 8006a22:	69ba      	ldr	r2, [r7, #24]
 8006a24:	4013      	ands	r3, r2
 8006a26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	091b      	lsrs	r3, r3, #4
 8006a2e:	f003 0201 	and.w	r2, r3, #1
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	fa02 f303 	lsl.w	r3, r2, r3
 8006a38:	69ba      	ldr	r2, [r7, #24]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	69ba      	ldr	r2, [r7, #24]
 8006a42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	f003 0303 	and.w	r3, r3, #3
 8006a4c:	2b03      	cmp	r3, #3
 8006a4e:	d017      	beq.n	8006a80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	005b      	lsls	r3, r3, #1
 8006a5a:	2203      	movs	r2, #3
 8006a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a60:	43db      	mvns	r3, r3
 8006a62:	69ba      	ldr	r2, [r7, #24]
 8006a64:	4013      	ands	r3, r2
 8006a66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	689a      	ldr	r2, [r3, #8]
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	005b      	lsls	r3, r3, #1
 8006a70:	fa02 f303 	lsl.w	r3, r2, r3
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	69ba      	ldr	r2, [r7, #24]
 8006a7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	f003 0303 	and.w	r3, r3, #3
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d123      	bne.n	8006ad4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	08da      	lsrs	r2, r3, #3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	3208      	adds	r2, #8
 8006a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	f003 0307 	and.w	r3, r3, #7
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	220f      	movs	r2, #15
 8006aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa8:	43db      	mvns	r3, r3
 8006aaa:	69ba      	ldr	r2, [r7, #24]
 8006aac:	4013      	ands	r3, r2
 8006aae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	691a      	ldr	r2, [r3, #16]
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	f003 0307 	and.w	r3, r3, #7
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac0:	69ba      	ldr	r2, [r7, #24]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	08da      	lsrs	r2, r3, #3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	3208      	adds	r2, #8
 8006ace:	69b9      	ldr	r1, [r7, #24]
 8006ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	005b      	lsls	r3, r3, #1
 8006ade:	2203      	movs	r2, #3
 8006ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae4:	43db      	mvns	r3, r3
 8006ae6:	69ba      	ldr	r2, [r7, #24]
 8006ae8:	4013      	ands	r3, r2
 8006aea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	f003 0203 	and.w	r2, r3, #3
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	005b      	lsls	r3, r3, #1
 8006af8:	fa02 f303 	lsl.w	r3, r2, r3
 8006afc:	69ba      	ldr	r2, [r7, #24]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	69ba      	ldr	r2, [r7, #24]
 8006b06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f000 80a2 	beq.w	8006c5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b16:	2300      	movs	r3, #0
 8006b18:	60fb      	str	r3, [r7, #12]
 8006b1a:	4b57      	ldr	r3, [pc, #348]	; (8006c78 <HAL_GPIO_Init+0x2e8>)
 8006b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b1e:	4a56      	ldr	r2, [pc, #344]	; (8006c78 <HAL_GPIO_Init+0x2e8>)
 8006b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b24:	6453      	str	r3, [r2, #68]	; 0x44
 8006b26:	4b54      	ldr	r3, [pc, #336]	; (8006c78 <HAL_GPIO_Init+0x2e8>)
 8006b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b2e:	60fb      	str	r3, [r7, #12]
 8006b30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b32:	4a52      	ldr	r2, [pc, #328]	; (8006c7c <HAL_GPIO_Init+0x2ec>)
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	089b      	lsrs	r3, r3, #2
 8006b38:	3302      	adds	r3, #2
 8006b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	f003 0303 	and.w	r3, r3, #3
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	220f      	movs	r2, #15
 8006b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4e:	43db      	mvns	r3, r3
 8006b50:	69ba      	ldr	r2, [r7, #24]
 8006b52:	4013      	ands	r3, r2
 8006b54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a49      	ldr	r2, [pc, #292]	; (8006c80 <HAL_GPIO_Init+0x2f0>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d019      	beq.n	8006b92 <HAL_GPIO_Init+0x202>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a48      	ldr	r2, [pc, #288]	; (8006c84 <HAL_GPIO_Init+0x2f4>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d013      	beq.n	8006b8e <HAL_GPIO_Init+0x1fe>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a47      	ldr	r2, [pc, #284]	; (8006c88 <HAL_GPIO_Init+0x2f8>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d00d      	beq.n	8006b8a <HAL_GPIO_Init+0x1fa>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a46      	ldr	r2, [pc, #280]	; (8006c8c <HAL_GPIO_Init+0x2fc>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d007      	beq.n	8006b86 <HAL_GPIO_Init+0x1f6>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a45      	ldr	r2, [pc, #276]	; (8006c90 <HAL_GPIO_Init+0x300>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d101      	bne.n	8006b82 <HAL_GPIO_Init+0x1f2>
 8006b7e:	2304      	movs	r3, #4
 8006b80:	e008      	b.n	8006b94 <HAL_GPIO_Init+0x204>
 8006b82:	2307      	movs	r3, #7
 8006b84:	e006      	b.n	8006b94 <HAL_GPIO_Init+0x204>
 8006b86:	2303      	movs	r3, #3
 8006b88:	e004      	b.n	8006b94 <HAL_GPIO_Init+0x204>
 8006b8a:	2302      	movs	r3, #2
 8006b8c:	e002      	b.n	8006b94 <HAL_GPIO_Init+0x204>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e000      	b.n	8006b94 <HAL_GPIO_Init+0x204>
 8006b92:	2300      	movs	r3, #0
 8006b94:	69fa      	ldr	r2, [r7, #28]
 8006b96:	f002 0203 	and.w	r2, r2, #3
 8006b9a:	0092      	lsls	r2, r2, #2
 8006b9c:	4093      	lsls	r3, r2
 8006b9e:	69ba      	ldr	r2, [r7, #24]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ba4:	4935      	ldr	r1, [pc, #212]	; (8006c7c <HAL_GPIO_Init+0x2ec>)
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	089b      	lsrs	r3, r3, #2
 8006baa:	3302      	adds	r3, #2
 8006bac:	69ba      	ldr	r2, [r7, #24]
 8006bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006bb2:	4b38      	ldr	r3, [pc, #224]	; (8006c94 <HAL_GPIO_Init+0x304>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	43db      	mvns	r3, r3
 8006bbc:	69ba      	ldr	r2, [r7, #24]
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d003      	beq.n	8006bd6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006bce:	69ba      	ldr	r2, [r7, #24]
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006bd6:	4a2f      	ldr	r2, [pc, #188]	; (8006c94 <HAL_GPIO_Init+0x304>)
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006bdc:	4b2d      	ldr	r3, [pc, #180]	; (8006c94 <HAL_GPIO_Init+0x304>)
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	43db      	mvns	r3, r3
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	4013      	ands	r3, r2
 8006bea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d003      	beq.n	8006c00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006bf8:	69ba      	ldr	r2, [r7, #24]
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006c00:	4a24      	ldr	r2, [pc, #144]	; (8006c94 <HAL_GPIO_Init+0x304>)
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006c06:	4b23      	ldr	r3, [pc, #140]	; (8006c94 <HAL_GPIO_Init+0x304>)
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	43db      	mvns	r3, r3
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	4013      	ands	r3, r2
 8006c14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d003      	beq.n	8006c2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006c22:	69ba      	ldr	r2, [r7, #24]
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006c2a:	4a1a      	ldr	r2, [pc, #104]	; (8006c94 <HAL_GPIO_Init+0x304>)
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006c30:	4b18      	ldr	r3, [pc, #96]	; (8006c94 <HAL_GPIO_Init+0x304>)
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	43db      	mvns	r3, r3
 8006c3a:	69ba      	ldr	r2, [r7, #24]
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006c4c:	69ba      	ldr	r2, [r7, #24]
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006c54:	4a0f      	ldr	r2, [pc, #60]	; (8006c94 <HAL_GPIO_Init+0x304>)
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	61fb      	str	r3, [r7, #28]
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	2b0f      	cmp	r3, #15
 8006c64:	f67f aea2 	bls.w	80069ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006c68:	bf00      	nop
 8006c6a:	bf00      	nop
 8006c6c:	3724      	adds	r7, #36	; 0x24
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	40023800 	.word	0x40023800
 8006c7c:	40013800 	.word	0x40013800
 8006c80:	40020000 	.word	0x40020000
 8006c84:	40020400 	.word	0x40020400
 8006c88:	40020800 	.word	0x40020800
 8006c8c:	40020c00 	.word	0x40020c00
 8006c90:	40021000 	.word	0x40021000
 8006c94:	40013c00 	.word	0x40013c00

08006c98 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b087      	sub	sp, #28
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006caa:	2300      	movs	r3, #0
 8006cac:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006cae:	2300      	movs	r3, #0
 8006cb0:	617b      	str	r3, [r7, #20]
 8006cb2:	e0bb      	b.n	8006e2c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cbc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006cbe:	683a      	ldr	r2, [r7, #0]
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	f040 80ab 	bne.w	8006e26 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006cd0:	4a5c      	ldr	r2, [pc, #368]	; (8006e44 <HAL_GPIO_DeInit+0x1ac>)
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	089b      	lsrs	r3, r3, #2
 8006cd6:	3302      	adds	r3, #2
 8006cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cdc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	f003 0303 	and.w	r3, r3, #3
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	220f      	movs	r2, #15
 8006ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	4013      	ands	r3, r2
 8006cf0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a54      	ldr	r2, [pc, #336]	; (8006e48 <HAL_GPIO_DeInit+0x1b0>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d019      	beq.n	8006d2e <HAL_GPIO_DeInit+0x96>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a53      	ldr	r2, [pc, #332]	; (8006e4c <HAL_GPIO_DeInit+0x1b4>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d013      	beq.n	8006d2a <HAL_GPIO_DeInit+0x92>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a52      	ldr	r2, [pc, #328]	; (8006e50 <HAL_GPIO_DeInit+0x1b8>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d00d      	beq.n	8006d26 <HAL_GPIO_DeInit+0x8e>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a51      	ldr	r2, [pc, #324]	; (8006e54 <HAL_GPIO_DeInit+0x1bc>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d007      	beq.n	8006d22 <HAL_GPIO_DeInit+0x8a>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a50      	ldr	r2, [pc, #320]	; (8006e58 <HAL_GPIO_DeInit+0x1c0>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d101      	bne.n	8006d1e <HAL_GPIO_DeInit+0x86>
 8006d1a:	2304      	movs	r3, #4
 8006d1c:	e008      	b.n	8006d30 <HAL_GPIO_DeInit+0x98>
 8006d1e:	2307      	movs	r3, #7
 8006d20:	e006      	b.n	8006d30 <HAL_GPIO_DeInit+0x98>
 8006d22:	2303      	movs	r3, #3
 8006d24:	e004      	b.n	8006d30 <HAL_GPIO_DeInit+0x98>
 8006d26:	2302      	movs	r3, #2
 8006d28:	e002      	b.n	8006d30 <HAL_GPIO_DeInit+0x98>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e000      	b.n	8006d30 <HAL_GPIO_DeInit+0x98>
 8006d2e:	2300      	movs	r3, #0
 8006d30:	697a      	ldr	r2, [r7, #20]
 8006d32:	f002 0203 	and.w	r2, r2, #3
 8006d36:	0092      	lsls	r2, r2, #2
 8006d38:	4093      	lsls	r3, r2
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d132      	bne.n	8006da6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006d40:	4b46      	ldr	r3, [pc, #280]	; (8006e5c <HAL_GPIO_DeInit+0x1c4>)
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	43db      	mvns	r3, r3
 8006d48:	4944      	ldr	r1, [pc, #272]	; (8006e5c <HAL_GPIO_DeInit+0x1c4>)
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006d4e:	4b43      	ldr	r3, [pc, #268]	; (8006e5c <HAL_GPIO_DeInit+0x1c4>)
 8006d50:	685a      	ldr	r2, [r3, #4]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	43db      	mvns	r3, r3
 8006d56:	4941      	ldr	r1, [pc, #260]	; (8006e5c <HAL_GPIO_DeInit+0x1c4>)
 8006d58:	4013      	ands	r3, r2
 8006d5a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006d5c:	4b3f      	ldr	r3, [pc, #252]	; (8006e5c <HAL_GPIO_DeInit+0x1c4>)
 8006d5e:	689a      	ldr	r2, [r3, #8]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	43db      	mvns	r3, r3
 8006d64:	493d      	ldr	r1, [pc, #244]	; (8006e5c <HAL_GPIO_DeInit+0x1c4>)
 8006d66:	4013      	ands	r3, r2
 8006d68:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006d6a:	4b3c      	ldr	r3, [pc, #240]	; (8006e5c <HAL_GPIO_DeInit+0x1c4>)
 8006d6c:	68da      	ldr	r2, [r3, #12]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	43db      	mvns	r3, r3
 8006d72:	493a      	ldr	r1, [pc, #232]	; (8006e5c <HAL_GPIO_DeInit+0x1c4>)
 8006d74:	4013      	ands	r3, r2
 8006d76:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	f003 0303 	and.w	r3, r3, #3
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	220f      	movs	r2, #15
 8006d82:	fa02 f303 	lsl.w	r3, r2, r3
 8006d86:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006d88:	4a2e      	ldr	r2, [pc, #184]	; (8006e44 <HAL_GPIO_DeInit+0x1ac>)
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	089b      	lsrs	r3, r3, #2
 8006d8e:	3302      	adds	r3, #2
 8006d90:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	43da      	mvns	r2, r3
 8006d98:	482a      	ldr	r0, [pc, #168]	; (8006e44 <HAL_GPIO_DeInit+0x1ac>)
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	089b      	lsrs	r3, r3, #2
 8006d9e:	400a      	ands	r2, r1
 8006da0:	3302      	adds	r3, #2
 8006da2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	005b      	lsls	r3, r3, #1
 8006dae:	2103      	movs	r1, #3
 8006db0:	fa01 f303 	lsl.w	r3, r1, r3
 8006db4:	43db      	mvns	r3, r3
 8006db6:	401a      	ands	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	08da      	lsrs	r2, r3, #3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	3208      	adds	r2, #8
 8006dc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	f003 0307 	and.w	r3, r3, #7
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	220f      	movs	r2, #15
 8006dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd6:	43db      	mvns	r3, r3
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	08d2      	lsrs	r2, r2, #3
 8006ddc:	4019      	ands	r1, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	3208      	adds	r2, #8
 8006de2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68da      	ldr	r2, [r3, #12]
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	005b      	lsls	r3, r3, #1
 8006dee:	2103      	movs	r1, #3
 8006df0:	fa01 f303 	lsl.w	r3, r1, r3
 8006df4:	43db      	mvns	r3, r3
 8006df6:	401a      	ands	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685a      	ldr	r2, [r3, #4]
 8006e00:	2101      	movs	r1, #1
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	fa01 f303 	lsl.w	r3, r1, r3
 8006e08:	43db      	mvns	r3, r3
 8006e0a:	401a      	ands	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	689a      	ldr	r2, [r3, #8]
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	005b      	lsls	r3, r3, #1
 8006e18:	2103      	movs	r1, #3
 8006e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e1e:	43db      	mvns	r3, r3
 8006e20:	401a      	ands	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	617b      	str	r3, [r7, #20]
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	2b0f      	cmp	r3, #15
 8006e30:	f67f af40 	bls.w	8006cb4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006e34:	bf00      	nop
 8006e36:	bf00      	nop
 8006e38:	371c      	adds	r7, #28
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	40013800 	.word	0x40013800
 8006e48:	40020000 	.word	0x40020000
 8006e4c:	40020400 	.word	0x40020400
 8006e50:	40020800 	.word	0x40020800
 8006e54:	40020c00 	.word	0x40020c00
 8006e58:	40021000 	.word	0x40021000
 8006e5c:	40013c00 	.word	0x40013c00

08006e60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	460b      	mov	r3, r1
 8006e6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	691a      	ldr	r2, [r3, #16]
 8006e70:	887b      	ldrh	r3, [r7, #2]
 8006e72:	4013      	ands	r3, r2
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d002      	beq.n	8006e7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	73fb      	strb	r3, [r7, #15]
 8006e7c:	e001      	b.n	8006e82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3714      	adds	r7, #20
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	460b      	mov	r3, r1
 8006e9a:	807b      	strh	r3, [r7, #2]
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006ea0:	787b      	ldrb	r3, [r7, #1]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d003      	beq.n	8006eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ea6:	887a      	ldrh	r2, [r7, #2]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006eac:	e003      	b.n	8006eb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006eae:	887b      	ldrh	r3, [r7, #2]
 8006eb0:	041a      	lsls	r2, r3, #16
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	619a      	str	r2, [r3, #24]
}
 8006eb6:	bf00      	nop
 8006eb8:	370c      	adds	r7, #12
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
	...

08006ec4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d101      	bne.n	8006ed6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e12b      	b.n	800712e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d106      	bne.n	8006ef0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f7fc ffb2 	bl	8003e54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2224      	movs	r2, #36	; 0x24
 8006ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f022 0201 	bic.w	r2, r2, #1
 8006f06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006f28:	f001 fbdc 	bl	80086e4 <HAL_RCC_GetPCLK1Freq>
 8006f2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	4a81      	ldr	r2, [pc, #516]	; (8007138 <HAL_I2C_Init+0x274>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d807      	bhi.n	8006f48 <HAL_I2C_Init+0x84>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	4a80      	ldr	r2, [pc, #512]	; (800713c <HAL_I2C_Init+0x278>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	bf94      	ite	ls
 8006f40:	2301      	movls	r3, #1
 8006f42:	2300      	movhi	r3, #0
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	e006      	b.n	8006f56 <HAL_I2C_Init+0x92>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	4a7d      	ldr	r2, [pc, #500]	; (8007140 <HAL_I2C_Init+0x27c>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	bf94      	ite	ls
 8006f50:	2301      	movls	r3, #1
 8006f52:	2300      	movhi	r3, #0
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d001      	beq.n	8006f5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e0e7      	b.n	800712e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	4a78      	ldr	r2, [pc, #480]	; (8007144 <HAL_I2C_Init+0x280>)
 8006f62:	fba2 2303 	umull	r2, r3, r2, r3
 8006f66:	0c9b      	lsrs	r3, r3, #18
 8006f68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	430a      	orrs	r2, r1
 8006f7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	6a1b      	ldr	r3, [r3, #32]
 8006f84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	4a6a      	ldr	r2, [pc, #424]	; (8007138 <HAL_I2C_Init+0x274>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d802      	bhi.n	8006f98 <HAL_I2C_Init+0xd4>
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	3301      	adds	r3, #1
 8006f96:	e009      	b.n	8006fac <HAL_I2C_Init+0xe8>
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006f9e:	fb02 f303 	mul.w	r3, r2, r3
 8006fa2:	4a69      	ldr	r2, [pc, #420]	; (8007148 <HAL_I2C_Init+0x284>)
 8006fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa8:	099b      	lsrs	r3, r3, #6
 8006faa:	3301      	adds	r3, #1
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	6812      	ldr	r2, [r2, #0]
 8006fb0:	430b      	orrs	r3, r1
 8006fb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	69db      	ldr	r3, [r3, #28]
 8006fba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006fbe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	495c      	ldr	r1, [pc, #368]	; (8007138 <HAL_I2C_Init+0x274>)
 8006fc8:	428b      	cmp	r3, r1
 8006fca:	d819      	bhi.n	8007000 <HAL_I2C_Init+0x13c>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	1e59      	subs	r1, r3, #1
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	005b      	lsls	r3, r3, #1
 8006fd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8006fda:	1c59      	adds	r1, r3, #1
 8006fdc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006fe0:	400b      	ands	r3, r1
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00a      	beq.n	8006ffc <HAL_I2C_Init+0x138>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	1e59      	subs	r1, r3, #1
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	005b      	lsls	r3, r3, #1
 8006ff0:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ffa:	e051      	b.n	80070a0 <HAL_I2C_Init+0x1dc>
 8006ffc:	2304      	movs	r3, #4
 8006ffe:	e04f      	b.n	80070a0 <HAL_I2C_Init+0x1dc>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d111      	bne.n	800702c <HAL_I2C_Init+0x168>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	1e58      	subs	r0, r3, #1
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6859      	ldr	r1, [r3, #4]
 8007010:	460b      	mov	r3, r1
 8007012:	005b      	lsls	r3, r3, #1
 8007014:	440b      	add	r3, r1
 8007016:	fbb0 f3f3 	udiv	r3, r0, r3
 800701a:	3301      	adds	r3, #1
 800701c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007020:	2b00      	cmp	r3, #0
 8007022:	bf0c      	ite	eq
 8007024:	2301      	moveq	r3, #1
 8007026:	2300      	movne	r3, #0
 8007028:	b2db      	uxtb	r3, r3
 800702a:	e012      	b.n	8007052 <HAL_I2C_Init+0x18e>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	1e58      	subs	r0, r3, #1
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6859      	ldr	r1, [r3, #4]
 8007034:	460b      	mov	r3, r1
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	440b      	add	r3, r1
 800703a:	0099      	lsls	r1, r3, #2
 800703c:	440b      	add	r3, r1
 800703e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007042:	3301      	adds	r3, #1
 8007044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007048:	2b00      	cmp	r3, #0
 800704a:	bf0c      	ite	eq
 800704c:	2301      	moveq	r3, #1
 800704e:	2300      	movne	r3, #0
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <HAL_I2C_Init+0x196>
 8007056:	2301      	movs	r3, #1
 8007058:	e022      	b.n	80070a0 <HAL_I2C_Init+0x1dc>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10e      	bne.n	8007080 <HAL_I2C_Init+0x1bc>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	1e58      	subs	r0, r3, #1
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6859      	ldr	r1, [r3, #4]
 800706a:	460b      	mov	r3, r1
 800706c:	005b      	lsls	r3, r3, #1
 800706e:	440b      	add	r3, r1
 8007070:	fbb0 f3f3 	udiv	r3, r0, r3
 8007074:	3301      	adds	r3, #1
 8007076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800707a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800707e:	e00f      	b.n	80070a0 <HAL_I2C_Init+0x1dc>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	1e58      	subs	r0, r3, #1
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6859      	ldr	r1, [r3, #4]
 8007088:	460b      	mov	r3, r1
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	440b      	add	r3, r1
 800708e:	0099      	lsls	r1, r3, #2
 8007090:	440b      	add	r3, r1
 8007092:	fbb0 f3f3 	udiv	r3, r0, r3
 8007096:	3301      	adds	r3, #1
 8007098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800709c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070a0:	6879      	ldr	r1, [r7, #4]
 80070a2:	6809      	ldr	r1, [r1, #0]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	69da      	ldr	r2, [r3, #28]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	431a      	orrs	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	430a      	orrs	r2, r1
 80070c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80070ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	6911      	ldr	r1, [r2, #16]
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	68d2      	ldr	r2, [r2, #12]
 80070da:	4311      	orrs	r1, r2
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	6812      	ldr	r2, [r2, #0]
 80070e0:	430b      	orrs	r3, r1
 80070e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	695a      	ldr	r2, [r3, #20]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	699b      	ldr	r3, [r3, #24]
 80070f6:	431a      	orrs	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	430a      	orrs	r2, r1
 80070fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f042 0201 	orr.w	r2, r2, #1
 800710e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2220      	movs	r2, #32
 800711a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	000186a0 	.word	0x000186a0
 800713c:	001e847f 	.word	0x001e847f
 8007140:	003d08ff 	.word	0x003d08ff
 8007144:	431bde83 	.word	0x431bde83
 8007148:	10624dd3 	.word	0x10624dd3

0800714c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d101      	bne.n	800715e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e021      	b.n	80071a2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2224      	movs	r2, #36	; 0x24
 8007162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f022 0201 	bic.w	r2, r2, #1
 8007174:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7fc feb4 	bl	8003ee4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
	...

080071ac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b088      	sub	sp, #32
 80071b0:	af02      	add	r7, sp, #8
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	4608      	mov	r0, r1
 80071b6:	4611      	mov	r1, r2
 80071b8:	461a      	mov	r2, r3
 80071ba:	4603      	mov	r3, r0
 80071bc:	817b      	strh	r3, [r7, #10]
 80071be:	460b      	mov	r3, r1
 80071c0:	813b      	strh	r3, [r7, #8]
 80071c2:	4613      	mov	r3, r2
 80071c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80071c6:	f7fe feaf 	bl	8005f28 <HAL_GetTick>
 80071ca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b20      	cmp	r3, #32
 80071d6:	f040 80d9 	bne.w	800738c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	2319      	movs	r3, #25
 80071e0:	2201      	movs	r2, #1
 80071e2:	496d      	ldr	r1, [pc, #436]	; (8007398 <HAL_I2C_Mem_Write+0x1ec>)
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f000 fc7f 	bl	8007ae8 <I2C_WaitOnFlagUntilTimeout>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d001      	beq.n	80071f4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80071f0:	2302      	movs	r3, #2
 80071f2:	e0cc      	b.n	800738e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d101      	bne.n	8007202 <HAL_I2C_Mem_Write+0x56>
 80071fe:	2302      	movs	r3, #2
 8007200:	e0c5      	b.n	800738e <HAL_I2C_Mem_Write+0x1e2>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0301 	and.w	r3, r3, #1
 8007214:	2b01      	cmp	r3, #1
 8007216:	d007      	beq.n	8007228 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f042 0201 	orr.w	r2, r2, #1
 8007226:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007236:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2221      	movs	r2, #33	; 0x21
 800723c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2240      	movs	r2, #64	; 0x40
 8007244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6a3a      	ldr	r2, [r7, #32]
 8007252:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007258:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800725e:	b29a      	uxth	r2, r3
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	4a4d      	ldr	r2, [pc, #308]	; (800739c <HAL_I2C_Mem_Write+0x1f0>)
 8007268:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800726a:	88f8      	ldrh	r0, [r7, #6]
 800726c:	893a      	ldrh	r2, [r7, #8]
 800726e:	8979      	ldrh	r1, [r7, #10]
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	9301      	str	r3, [sp, #4]
 8007274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007276:	9300      	str	r3, [sp, #0]
 8007278:	4603      	mov	r3, r0
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f000 fab6 	bl	80077ec <I2C_RequestMemoryWrite>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d052      	beq.n	800732c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e081      	b.n	800738e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f000 fd00 	bl	8007c94 <I2C_WaitOnTXEFlagUntilTimeout>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00d      	beq.n	80072b6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729e:	2b04      	cmp	r3, #4
 80072a0:	d107      	bne.n	80072b2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e06b      	b.n	800738e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ba:	781a      	ldrb	r2, [r3, #0]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c6:	1c5a      	adds	r2, r3, #1
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072d0:	3b01      	subs	r3, #1
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072dc:	b29b      	uxth	r3, r3
 80072de:	3b01      	subs	r3, #1
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	695b      	ldr	r3, [r3, #20]
 80072ec:	f003 0304 	and.w	r3, r3, #4
 80072f0:	2b04      	cmp	r3, #4
 80072f2:	d11b      	bne.n	800732c <HAL_I2C_Mem_Write+0x180>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d017      	beq.n	800732c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007300:	781a      	ldrb	r2, [r3, #0]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730c:	1c5a      	adds	r2, r3, #1
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007316:	3b01      	subs	r3, #1
 8007318:	b29a      	uxth	r2, r3
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007322:	b29b      	uxth	r3, r3
 8007324:	3b01      	subs	r3, #1
 8007326:	b29a      	uxth	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1aa      	bne.n	800728a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007334:	697a      	ldr	r2, [r7, #20]
 8007336:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007338:	68f8      	ldr	r0, [r7, #12]
 800733a:	f000 fcec 	bl	8007d16 <I2C_WaitOnBTFFlagUntilTimeout>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00d      	beq.n	8007360 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007348:	2b04      	cmp	r3, #4
 800734a:	d107      	bne.n	800735c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800735a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	e016      	b.n	800738e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800736e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2220      	movs	r2, #32
 8007374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2200      	movs	r2, #0
 800737c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007388:	2300      	movs	r3, #0
 800738a:	e000      	b.n	800738e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800738c:	2302      	movs	r3, #2
  }
}
 800738e:	4618      	mov	r0, r3
 8007390:	3718      	adds	r7, #24
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	00100002 	.word	0x00100002
 800739c:	ffff0000 	.word	0xffff0000

080073a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b08c      	sub	sp, #48	; 0x30
 80073a4:	af02      	add	r7, sp, #8
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	4608      	mov	r0, r1
 80073aa:	4611      	mov	r1, r2
 80073ac:	461a      	mov	r2, r3
 80073ae:	4603      	mov	r3, r0
 80073b0:	817b      	strh	r3, [r7, #10]
 80073b2:	460b      	mov	r3, r1
 80073b4:	813b      	strh	r3, [r7, #8]
 80073b6:	4613      	mov	r3, r2
 80073b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80073ba:	f7fe fdb5 	bl	8005f28 <HAL_GetTick>
 80073be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	2b20      	cmp	r3, #32
 80073ca:	f040 8208 	bne.w	80077de <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80073ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d0:	9300      	str	r3, [sp, #0]
 80073d2:	2319      	movs	r3, #25
 80073d4:	2201      	movs	r2, #1
 80073d6:	497b      	ldr	r1, [pc, #492]	; (80075c4 <HAL_I2C_Mem_Read+0x224>)
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f000 fb85 	bl	8007ae8 <I2C_WaitOnFlagUntilTimeout>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d001      	beq.n	80073e8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80073e4:	2302      	movs	r3, #2
 80073e6:	e1fb      	b.n	80077e0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d101      	bne.n	80073f6 <HAL_I2C_Mem_Read+0x56>
 80073f2:	2302      	movs	r3, #2
 80073f4:	e1f4      	b.n	80077e0 <HAL_I2C_Mem_Read+0x440>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 0301 	and.w	r3, r3, #1
 8007408:	2b01      	cmp	r3, #1
 800740a:	d007      	beq.n	800741c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f042 0201 	orr.w	r2, r2, #1
 800741a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800742a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2222      	movs	r2, #34	; 0x22
 8007430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2240      	movs	r2, #64	; 0x40
 8007438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007446:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800744c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007452:	b29a      	uxth	r2, r3
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	4a5b      	ldr	r2, [pc, #364]	; (80075c8 <HAL_I2C_Mem_Read+0x228>)
 800745c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800745e:	88f8      	ldrh	r0, [r7, #6]
 8007460:	893a      	ldrh	r2, [r7, #8]
 8007462:	8979      	ldrh	r1, [r7, #10]
 8007464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007466:	9301      	str	r3, [sp, #4]
 8007468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746a:	9300      	str	r3, [sp, #0]
 800746c:	4603      	mov	r3, r0
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f000 fa52 	bl	8007918 <I2C_RequestMemoryRead>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d001      	beq.n	800747e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e1b0      	b.n	80077e0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007482:	2b00      	cmp	r3, #0
 8007484:	d113      	bne.n	80074ae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007486:	2300      	movs	r3, #0
 8007488:	623b      	str	r3, [r7, #32]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	695b      	ldr	r3, [r3, #20]
 8007490:	623b      	str	r3, [r7, #32]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	623b      	str	r3, [r7, #32]
 800749a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074aa:	601a      	str	r2, [r3, #0]
 80074ac:	e184      	b.n	80077b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d11b      	bne.n	80074ee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074c6:	2300      	movs	r3, #0
 80074c8:	61fb      	str	r3, [r7, #28]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	695b      	ldr	r3, [r3, #20]
 80074d0:	61fb      	str	r3, [r7, #28]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	699b      	ldr	r3, [r3, #24]
 80074d8:	61fb      	str	r3, [r7, #28]
 80074da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074ea:	601a      	str	r2, [r3, #0]
 80074ec:	e164      	b.n	80077b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d11b      	bne.n	800752e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007504:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007514:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007516:	2300      	movs	r3, #0
 8007518:	61bb      	str	r3, [r7, #24]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	695b      	ldr	r3, [r3, #20]
 8007520:	61bb      	str	r3, [r7, #24]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	699b      	ldr	r3, [r3, #24]
 8007528:	61bb      	str	r3, [r7, #24]
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	e144      	b.n	80077b8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800752e:	2300      	movs	r3, #0
 8007530:	617b      	str	r3, [r7, #20]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	695b      	ldr	r3, [r3, #20]
 8007538:	617b      	str	r3, [r7, #20]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	699b      	ldr	r3, [r3, #24]
 8007540:	617b      	str	r3, [r7, #20]
 8007542:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007544:	e138      	b.n	80077b8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800754a:	2b03      	cmp	r3, #3
 800754c:	f200 80f1 	bhi.w	8007732 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007554:	2b01      	cmp	r3, #1
 8007556:	d123      	bne.n	80075a0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800755a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f000 fc1b 	bl	8007d98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d001      	beq.n	800756c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e139      	b.n	80077e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	691a      	ldr	r2, [r3, #16]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007576:	b2d2      	uxtb	r2, r2
 8007578:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757e:	1c5a      	adds	r2, r3, #1
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007588:	3b01      	subs	r3, #1
 800758a:	b29a      	uxth	r2, r3
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007594:	b29b      	uxth	r3, r3
 8007596:	3b01      	subs	r3, #1
 8007598:	b29a      	uxth	r2, r3
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800759e:	e10b      	b.n	80077b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d14e      	bne.n	8007646 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80075a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075aa:	9300      	str	r3, [sp, #0]
 80075ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ae:	2200      	movs	r2, #0
 80075b0:	4906      	ldr	r1, [pc, #24]	; (80075cc <HAL_I2C_Mem_Read+0x22c>)
 80075b2:	68f8      	ldr	r0, [r7, #12]
 80075b4:	f000 fa98 	bl	8007ae8 <I2C_WaitOnFlagUntilTimeout>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d008      	beq.n	80075d0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e10e      	b.n	80077e0 <HAL_I2C_Mem_Read+0x440>
 80075c2:	bf00      	nop
 80075c4:	00100002 	.word	0x00100002
 80075c8:	ffff0000 	.word	0xffff0000
 80075cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	691a      	ldr	r2, [r3, #16]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ea:	b2d2      	uxtb	r2, r2
 80075ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f2:	1c5a      	adds	r2, r3, #1
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075fc:	3b01      	subs	r3, #1
 80075fe:	b29a      	uxth	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007608:	b29b      	uxth	r3, r3
 800760a:	3b01      	subs	r3, #1
 800760c:	b29a      	uxth	r2, r3
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	691a      	ldr	r2, [r3, #16]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761c:	b2d2      	uxtb	r2, r2
 800761e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007624:	1c5a      	adds	r2, r3, #1
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800762e:	3b01      	subs	r3, #1
 8007630:	b29a      	uxth	r2, r3
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800763a:	b29b      	uxth	r3, r3
 800763c:	3b01      	subs	r3, #1
 800763e:	b29a      	uxth	r2, r3
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007644:	e0b8      	b.n	80077b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007648:	9300      	str	r3, [sp, #0]
 800764a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764c:	2200      	movs	r2, #0
 800764e:	4966      	ldr	r1, [pc, #408]	; (80077e8 <HAL_I2C_Mem_Read+0x448>)
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f000 fa49 	bl	8007ae8 <I2C_WaitOnFlagUntilTimeout>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d001      	beq.n	8007660 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e0bf      	b.n	80077e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800766e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	691a      	ldr	r2, [r3, #16]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767a:	b2d2      	uxtb	r2, r2
 800767c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007682:	1c5a      	adds	r2, r3, #1
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800768c:	3b01      	subs	r3, #1
 800768e:	b29a      	uxth	r2, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007698:	b29b      	uxth	r3, r3
 800769a:	3b01      	subs	r3, #1
 800769c:	b29a      	uxth	r2, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80076a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a4:	9300      	str	r3, [sp, #0]
 80076a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a8:	2200      	movs	r2, #0
 80076aa:	494f      	ldr	r1, [pc, #316]	; (80077e8 <HAL_I2C_Mem_Read+0x448>)
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f000 fa1b 	bl	8007ae8 <I2C_WaitOnFlagUntilTimeout>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d001      	beq.n	80076bc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	e091      	b.n	80077e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	691a      	ldr	r2, [r3, #16]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d6:	b2d2      	uxtb	r2, r2
 80076d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076de:	1c5a      	adds	r2, r3, #1
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076e8:	3b01      	subs	r3, #1
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	3b01      	subs	r3, #1
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	691a      	ldr	r2, [r3, #16]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007708:	b2d2      	uxtb	r2, r2
 800770a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007710:	1c5a      	adds	r2, r3, #1
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800771a:	3b01      	subs	r3, #1
 800771c:	b29a      	uxth	r2, r3
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007726:	b29b      	uxth	r3, r3
 8007728:	3b01      	subs	r3, #1
 800772a:	b29a      	uxth	r2, r3
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007730:	e042      	b.n	80077b8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007734:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f000 fb2e 	bl	8007d98 <I2C_WaitOnRXNEFlagUntilTimeout>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d001      	beq.n	8007746 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	e04c      	b.n	80077e0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	691a      	ldr	r2, [r3, #16]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007750:	b2d2      	uxtb	r2, r2
 8007752:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007758:	1c5a      	adds	r2, r3, #1
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007762:	3b01      	subs	r3, #1
 8007764:	b29a      	uxth	r2, r3
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800776e:	b29b      	uxth	r3, r3
 8007770:	3b01      	subs	r3, #1
 8007772:	b29a      	uxth	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	f003 0304 	and.w	r3, r3, #4
 8007782:	2b04      	cmp	r3, #4
 8007784:	d118      	bne.n	80077b8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	691a      	ldr	r2, [r3, #16]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007790:	b2d2      	uxtb	r2, r2
 8007792:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007798:	1c5a      	adds	r2, r3, #1
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077a2:	3b01      	subs	r3, #1
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	3b01      	subs	r3, #1
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f47f aec2 	bne.w	8007546 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2220      	movs	r2, #32
 80077c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80077da:	2300      	movs	r3, #0
 80077dc:	e000      	b.n	80077e0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80077de:	2302      	movs	r3, #2
  }
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3728      	adds	r7, #40	; 0x28
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	00010004 	.word	0x00010004

080077ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b088      	sub	sp, #32
 80077f0:	af02      	add	r7, sp, #8
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	4608      	mov	r0, r1
 80077f6:	4611      	mov	r1, r2
 80077f8:	461a      	mov	r2, r3
 80077fa:	4603      	mov	r3, r0
 80077fc:	817b      	strh	r3, [r7, #10]
 80077fe:	460b      	mov	r3, r1
 8007800:	813b      	strh	r3, [r7, #8]
 8007802:	4613      	mov	r3, r2
 8007804:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007814:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007818:	9300      	str	r3, [sp, #0]
 800781a:	6a3b      	ldr	r3, [r7, #32]
 800781c:	2200      	movs	r2, #0
 800781e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f000 f960 	bl	8007ae8 <I2C_WaitOnFlagUntilTimeout>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00d      	beq.n	800784a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800783c:	d103      	bne.n	8007846 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007844:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007846:	2303      	movs	r3, #3
 8007848:	e05f      	b.n	800790a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800784a:	897b      	ldrh	r3, [r7, #10]
 800784c:	b2db      	uxtb	r3, r3
 800784e:	461a      	mov	r2, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007858:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	6a3a      	ldr	r2, [r7, #32]
 800785e:	492d      	ldr	r1, [pc, #180]	; (8007914 <I2C_RequestMemoryWrite+0x128>)
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f000 f998 	bl	8007b96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d001      	beq.n	8007870 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	e04c      	b.n	800790a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007870:	2300      	movs	r3, #0
 8007872:	617b      	str	r3, [r7, #20]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	617b      	str	r3, [r7, #20]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	699b      	ldr	r3, [r3, #24]
 8007882:	617b      	str	r3, [r7, #20]
 8007884:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007888:	6a39      	ldr	r1, [r7, #32]
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f000 fa02 	bl	8007c94 <I2C_WaitOnTXEFlagUntilTimeout>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00d      	beq.n	80078b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789a:	2b04      	cmp	r3, #4
 800789c:	d107      	bne.n	80078ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e02b      	b.n	800790a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80078b2:	88fb      	ldrh	r3, [r7, #6]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d105      	bne.n	80078c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80078b8:	893b      	ldrh	r3, [r7, #8]
 80078ba:	b2da      	uxtb	r2, r3
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	611a      	str	r2, [r3, #16]
 80078c2:	e021      	b.n	8007908 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80078c4:	893b      	ldrh	r3, [r7, #8]
 80078c6:	0a1b      	lsrs	r3, r3, #8
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	b2da      	uxtb	r2, r3
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078d4:	6a39      	ldr	r1, [r7, #32]
 80078d6:	68f8      	ldr	r0, [r7, #12]
 80078d8:	f000 f9dc 	bl	8007c94 <I2C_WaitOnTXEFlagUntilTimeout>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00d      	beq.n	80078fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e6:	2b04      	cmp	r3, #4
 80078e8:	d107      	bne.n	80078fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e005      	b.n	800790a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80078fe:	893b      	ldrh	r3, [r7, #8]
 8007900:	b2da      	uxtb	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3718      	adds	r7, #24
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	00010002 	.word	0x00010002

08007918 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b088      	sub	sp, #32
 800791c:	af02      	add	r7, sp, #8
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	4608      	mov	r0, r1
 8007922:	4611      	mov	r1, r2
 8007924:	461a      	mov	r2, r3
 8007926:	4603      	mov	r3, r0
 8007928:	817b      	strh	r3, [r7, #10]
 800792a:	460b      	mov	r3, r1
 800792c:	813b      	strh	r3, [r7, #8]
 800792e:	4613      	mov	r3, r2
 8007930:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007940:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007950:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	6a3b      	ldr	r3, [r7, #32]
 8007958:	2200      	movs	r2, #0
 800795a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f000 f8c2 	bl	8007ae8 <I2C_WaitOnFlagUntilTimeout>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00d      	beq.n	8007986 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007978:	d103      	bne.n	8007982 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007980:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007982:	2303      	movs	r3, #3
 8007984:	e0aa      	b.n	8007adc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007986:	897b      	ldrh	r3, [r7, #10]
 8007988:	b2db      	uxtb	r3, r3
 800798a:	461a      	mov	r2, r3
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007994:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007998:	6a3a      	ldr	r2, [r7, #32]
 800799a:	4952      	ldr	r1, [pc, #328]	; (8007ae4 <I2C_RequestMemoryRead+0x1cc>)
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f000 f8fa 	bl	8007b96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d001      	beq.n	80079ac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e097      	b.n	8007adc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079ac:	2300      	movs	r3, #0
 80079ae:	617b      	str	r3, [r7, #20]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	617b      	str	r3, [r7, #20]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	699b      	ldr	r3, [r3, #24]
 80079be:	617b      	str	r3, [r7, #20]
 80079c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079c4:	6a39      	ldr	r1, [r7, #32]
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f000 f964 	bl	8007c94 <I2C_WaitOnTXEFlagUntilTimeout>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00d      	beq.n	80079ee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d6:	2b04      	cmp	r3, #4
 80079d8:	d107      	bne.n	80079ea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e076      	b.n	8007adc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80079ee:	88fb      	ldrh	r3, [r7, #6]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d105      	bne.n	8007a00 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80079f4:	893b      	ldrh	r3, [r7, #8]
 80079f6:	b2da      	uxtb	r2, r3
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	611a      	str	r2, [r3, #16]
 80079fe:	e021      	b.n	8007a44 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007a00:	893b      	ldrh	r3, [r7, #8]
 8007a02:	0a1b      	lsrs	r3, r3, #8
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	b2da      	uxtb	r2, r3
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a10:	6a39      	ldr	r1, [r7, #32]
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f000 f93e 	bl	8007c94 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00d      	beq.n	8007a3a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a22:	2b04      	cmp	r3, #4
 8007a24:	d107      	bne.n	8007a36 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e050      	b.n	8007adc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a3a:	893b      	ldrh	r3, [r7, #8]
 8007a3c:	b2da      	uxtb	r2, r3
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a46:	6a39      	ldr	r1, [r7, #32]
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f000 f923 	bl	8007c94 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00d      	beq.n	8007a70 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a58:	2b04      	cmp	r3, #4
 8007a5a:	d107      	bne.n	8007a6c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a6a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e035      	b.n	8007adc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a7e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	6a3b      	ldr	r3, [r7, #32]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f000 f82b 	bl	8007ae8 <I2C_WaitOnFlagUntilTimeout>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00d      	beq.n	8007ab4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007aa6:	d103      	bne.n	8007ab0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007aae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	e013      	b.n	8007adc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007ab4:	897b      	ldrh	r3, [r7, #10]
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	f043 0301 	orr.w	r3, r3, #1
 8007abc:	b2da      	uxtb	r2, r3
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac6:	6a3a      	ldr	r2, [r7, #32]
 8007ac8:	4906      	ldr	r1, [pc, #24]	; (8007ae4 <I2C_RequestMemoryRead+0x1cc>)
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f000 f863 	bl	8007b96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d001      	beq.n	8007ada <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e000      	b.n	8007adc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3718      	adds	r7, #24
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	00010002 	.word	0x00010002

08007ae8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	603b      	str	r3, [r7, #0]
 8007af4:	4613      	mov	r3, r2
 8007af6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007af8:	e025      	b.n	8007b46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b00:	d021      	beq.n	8007b46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b02:	f7fe fa11 	bl	8005f28 <HAL_GetTick>
 8007b06:	4602      	mov	r2, r0
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	683a      	ldr	r2, [r7, #0]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d302      	bcc.n	8007b18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d116      	bne.n	8007b46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2220      	movs	r2, #32
 8007b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b32:	f043 0220 	orr.w	r2, r3, #32
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e023      	b.n	8007b8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	0c1b      	lsrs	r3, r3, #16
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d10d      	bne.n	8007b6c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	695b      	ldr	r3, [r3, #20]
 8007b56:	43da      	mvns	r2, r3
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	bf0c      	ite	eq
 8007b62:	2301      	moveq	r3, #1
 8007b64:	2300      	movne	r3, #0
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	461a      	mov	r2, r3
 8007b6a:	e00c      	b.n	8007b86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	43da      	mvns	r2, r3
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	4013      	ands	r3, r2
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	bf0c      	ite	eq
 8007b7e:	2301      	moveq	r3, #1
 8007b80:	2300      	movne	r3, #0
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	461a      	mov	r2, r3
 8007b86:	79fb      	ldrb	r3, [r7, #7]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d0b6      	beq.n	8007afa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b084      	sub	sp, #16
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	60f8      	str	r0, [r7, #12]
 8007b9e:	60b9      	str	r1, [r7, #8]
 8007ba0:	607a      	str	r2, [r7, #4]
 8007ba2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007ba4:	e051      	b.n	8007c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	695b      	ldr	r3, [r3, #20]
 8007bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bb4:	d123      	bne.n	8007bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bc4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007bce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2220      	movs	r2, #32
 8007bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bea:	f043 0204 	orr.w	r2, r3, #4
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e046      	b.n	8007c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c04:	d021      	beq.n	8007c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c06:	f7fe f98f 	bl	8005f28 <HAL_GetTick>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d302      	bcc.n	8007c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d116      	bne.n	8007c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2220      	movs	r2, #32
 8007c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c36:	f043 0220 	orr.w	r2, r3, #32
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e020      	b.n	8007c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	0c1b      	lsrs	r3, r3, #16
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d10c      	bne.n	8007c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	695b      	ldr	r3, [r3, #20]
 8007c5a:	43da      	mvns	r2, r3
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	4013      	ands	r3, r2
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	bf14      	ite	ne
 8007c66:	2301      	movne	r3, #1
 8007c68:	2300      	moveq	r3, #0
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	e00b      	b.n	8007c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	699b      	ldr	r3, [r3, #24]
 8007c74:	43da      	mvns	r2, r3
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	4013      	ands	r3, r2
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	bf14      	ite	ne
 8007c80:	2301      	movne	r3, #1
 8007c82:	2300      	moveq	r3, #0
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d18d      	bne.n	8007ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ca0:	e02d      	b.n	8007cfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	f000 f8ce 	bl	8007e44 <I2C_IsAcknowledgeFailed>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d001      	beq.n	8007cb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e02d      	b.n	8007d0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cb8:	d021      	beq.n	8007cfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cba:	f7fe f935 	bl	8005f28 <HAL_GetTick>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	1ad3      	subs	r3, r2, r3
 8007cc4:	68ba      	ldr	r2, [r7, #8]
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d302      	bcc.n	8007cd0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d116      	bne.n	8007cfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2220      	movs	r2, #32
 8007cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cea:	f043 0220 	orr.w	r2, r3, #32
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e007      	b.n	8007d0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	695b      	ldr	r3, [r3, #20]
 8007d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d08:	2b80      	cmp	r3, #128	; 0x80
 8007d0a:	d1ca      	bne.n	8007ca2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b084      	sub	sp, #16
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	60f8      	str	r0, [r7, #12]
 8007d1e:	60b9      	str	r1, [r7, #8]
 8007d20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d22:	e02d      	b.n	8007d80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d24:	68f8      	ldr	r0, [r7, #12]
 8007d26:	f000 f88d 	bl	8007e44 <I2C_IsAcknowledgeFailed>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d001      	beq.n	8007d34 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	e02d      	b.n	8007d90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d3a:	d021      	beq.n	8007d80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d3c:	f7fe f8f4 	bl	8005f28 <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	68ba      	ldr	r2, [r7, #8]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d302      	bcc.n	8007d52 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d116      	bne.n	8007d80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2200      	movs	r2, #0
 8007d56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2220      	movs	r2, #32
 8007d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6c:	f043 0220 	orr.w	r2, r3, #32
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e007      	b.n	8007d90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	f003 0304 	and.w	r3, r3, #4
 8007d8a:	2b04      	cmp	r3, #4
 8007d8c:	d1ca      	bne.n	8007d24 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007da4:	e042      	b.n	8007e2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	695b      	ldr	r3, [r3, #20]
 8007dac:	f003 0310 	and.w	r3, r3, #16
 8007db0:	2b10      	cmp	r3, #16
 8007db2:	d119      	bne.n	8007de8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f06f 0210 	mvn.w	r2, #16
 8007dbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2220      	movs	r2, #32
 8007dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	e029      	b.n	8007e3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007de8:	f7fe f89e 	bl	8005f28 <HAL_GetTick>
 8007dec:	4602      	mov	r2, r0
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d302      	bcc.n	8007dfe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d116      	bne.n	8007e2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2220      	movs	r2, #32
 8007e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e18:	f043 0220 	orr.w	r2, r3, #32
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e007      	b.n	8007e3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e36:	2b40      	cmp	r3, #64	; 0x40
 8007e38:	d1b5      	bne.n	8007da6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	695b      	ldr	r3, [r3, #20]
 8007e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e5a:	d11b      	bne.n	8007e94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2220      	movs	r2, #32
 8007e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e80:	f043 0204 	orr.w	r2, r3, #4
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e000      	b.n	8007e96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	370c      	adds	r7, #12
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr
	...

08007ea4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b086      	sub	sp, #24
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d101      	bne.n	8007eb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e264      	b.n	8008380 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f003 0301 	and.w	r3, r3, #1
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d075      	beq.n	8007fae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007ec2:	4ba3      	ldr	r3, [pc, #652]	; (8008150 <HAL_RCC_OscConfig+0x2ac>)
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	f003 030c 	and.w	r3, r3, #12
 8007eca:	2b04      	cmp	r3, #4
 8007ecc:	d00c      	beq.n	8007ee8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007ece:	4ba0      	ldr	r3, [pc, #640]	; (8008150 <HAL_RCC_OscConfig+0x2ac>)
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007ed6:	2b08      	cmp	r3, #8
 8007ed8:	d112      	bne.n	8007f00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007eda:	4b9d      	ldr	r3, [pc, #628]	; (8008150 <HAL_RCC_OscConfig+0x2ac>)
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ee2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ee6:	d10b      	bne.n	8007f00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ee8:	4b99      	ldr	r3, [pc, #612]	; (8008150 <HAL_RCC_OscConfig+0x2ac>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d05b      	beq.n	8007fac <HAL_RCC_OscConfig+0x108>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d157      	bne.n	8007fac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	e23f      	b.n	8008380 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f08:	d106      	bne.n	8007f18 <HAL_RCC_OscConfig+0x74>
 8007f0a:	4b91      	ldr	r3, [pc, #580]	; (8008150 <HAL_RCC_OscConfig+0x2ac>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a90      	ldr	r2, [pc, #576]	; (8008150 <HAL_RCC_OscConfig+0x2ac>)
 8007f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f14:	6013      	str	r3, [r2, #0]
 8007f16:	e01d      	b.n	8007f54 <HAL_RCC_OscConfig+0xb0>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f20:	d10c      	bne.n	8007f3c <HAL_RCC_OscConfig+0x98>
 8007f22:	4b8b      	ldr	r3, [pc, #556]	; (8008150 <HAL_RCC_OscConfig+0x2ac>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a8a      	ldr	r2, [pc, #552]	; (8008150 <HAL_RCC_OscConfig+0x2ac>)
 8007f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f2c:	6013      	str	r3, [r2, #0]
 8007f2e:	4b88      	ldr	r3, [pc, #544]	; (8008150 <HAL_RCC_OscConfig+0x2ac>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a87      	ldr	r2, [pc, #540]	; (8008150 <HAL_RCC_OscConfig+0x2ac>)
 8007f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f38:	6013      	str	r3, [r2, #0]
 8007f3a:	e00b      	b.n	8007f54 <HAL_RCC_OscConfig+0xb0>
 8007f3c:	4b84      	ldr	r3, [pc, #528]	; (8008150 <HAL_RCC_OscConfig+0x2ac>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a83      	ldr	r2, [pc, #524]	; (8008150 <HAL_RCC_OscConfig+0x2ac>)
 8007f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f46:	6013      	str	r3, [r2, #0]
 8007f48:	4b81      	ldr	r3, [pc, #516]	; (8008150 <HAL_RCC_OscConfig+0x2ac>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a80      	ldr	r2, [pc, #512]	; (8008150 <HAL_RCC_OscConfig+0x2ac>)
 8007f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d013      	beq.n	8007f84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f5c:	f7fd ffe4 	bl	8005f28 <HAL_GetTick>
 8007f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f62:	e008      	b.n	8007f76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f64:	f7fd ffe0 	bl	8005f28 <HAL_GetTick>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	1ad3      	subs	r3, r2, r3
 8007f6e:	2b64      	cmp	r3, #100	; 0x64
 8007f70:	d901      	bls.n	8007f76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007f72:	2303      	movs	r3, #3
 8007f74:	e204      	b.n	8008380 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f76:	4b76      	ldr	r3, [pc, #472]	; (8008150 <HAL_RCC_OscConfig+0x2ac>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d0f0      	beq.n	8007f64 <HAL_RCC_OscConfig+0xc0>
 8007f82:	e014      	b.n	8007fae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f84:	f7fd ffd0 	bl	8005f28 <HAL_GetTick>
 8007f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f8a:	e008      	b.n	8007f9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f8c:	f7fd ffcc 	bl	8005f28 <HAL_GetTick>
 8007f90:	4602      	mov	r2, r0
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	2b64      	cmp	r3, #100	; 0x64
 8007f98:	d901      	bls.n	8007f9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	e1f0      	b.n	8008380 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f9e:	4b6c      	ldr	r3, [pc, #432]	; (8008150 <HAL_RCC_OscConfig+0x2ac>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1f0      	bne.n	8007f8c <HAL_RCC_OscConfig+0xe8>
 8007faa:	e000      	b.n	8007fae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f003 0302 	and.w	r3, r3, #2
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d063      	beq.n	8008082 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007fba:	4b65      	ldr	r3, [pc, #404]	; (8008150 <HAL_RCC_OscConfig+0x2ac>)
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	f003 030c 	and.w	r3, r3, #12
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00b      	beq.n	8007fde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007fc6:	4b62      	ldr	r3, [pc, #392]	; (8008150 <HAL_RCC_OscConfig+0x2ac>)
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007fce:	2b08      	cmp	r3, #8
 8007fd0:	d11c      	bne.n	800800c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007fd2:	4b5f      	ldr	r3, [pc, #380]	; (8008150 <HAL_RCC_OscConfig+0x2ac>)
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d116      	bne.n	800800c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007fde:	4b5c      	ldr	r3, [pc, #368]	; (8008150 <HAL_RCC_OscConfig+0x2ac>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f003 0302 	and.w	r3, r3, #2
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d005      	beq.n	8007ff6 <HAL_RCC_OscConfig+0x152>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d001      	beq.n	8007ff6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e1c4      	b.n	8008380 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ff6:	4b56      	ldr	r3, [pc, #344]	; (8008150 <HAL_RCC_OscConfig+0x2ac>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	00db      	lsls	r3, r3, #3
 8008004:	4952      	ldr	r1, [pc, #328]	; (8008150 <HAL_RCC_OscConfig+0x2ac>)
 8008006:	4313      	orrs	r3, r2
 8008008:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800800a:	e03a      	b.n	8008082 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d020      	beq.n	8008056 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008014:	4b4f      	ldr	r3, [pc, #316]	; (8008154 <HAL_RCC_OscConfig+0x2b0>)
 8008016:	2201      	movs	r2, #1
 8008018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800801a:	f7fd ff85 	bl	8005f28 <HAL_GetTick>
 800801e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008020:	e008      	b.n	8008034 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008022:	f7fd ff81 	bl	8005f28 <HAL_GetTick>
 8008026:	4602      	mov	r2, r0
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	1ad3      	subs	r3, r2, r3
 800802c:	2b02      	cmp	r3, #2
 800802e:	d901      	bls.n	8008034 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008030:	2303      	movs	r3, #3
 8008032:	e1a5      	b.n	8008380 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008034:	4b46      	ldr	r3, [pc, #280]	; (8008150 <HAL_RCC_OscConfig+0x2ac>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f003 0302 	and.w	r3, r3, #2
 800803c:	2b00      	cmp	r3, #0
 800803e:	d0f0      	beq.n	8008022 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008040:	4b43      	ldr	r3, [pc, #268]	; (8008150 <HAL_RCC_OscConfig+0x2ac>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	00db      	lsls	r3, r3, #3
 800804e:	4940      	ldr	r1, [pc, #256]	; (8008150 <HAL_RCC_OscConfig+0x2ac>)
 8008050:	4313      	orrs	r3, r2
 8008052:	600b      	str	r3, [r1, #0]
 8008054:	e015      	b.n	8008082 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008056:	4b3f      	ldr	r3, [pc, #252]	; (8008154 <HAL_RCC_OscConfig+0x2b0>)
 8008058:	2200      	movs	r2, #0
 800805a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800805c:	f7fd ff64 	bl	8005f28 <HAL_GetTick>
 8008060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008062:	e008      	b.n	8008076 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008064:	f7fd ff60 	bl	8005f28 <HAL_GetTick>
 8008068:	4602      	mov	r2, r0
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	2b02      	cmp	r3, #2
 8008070:	d901      	bls.n	8008076 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008072:	2303      	movs	r3, #3
 8008074:	e184      	b.n	8008380 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008076:	4b36      	ldr	r3, [pc, #216]	; (8008150 <HAL_RCC_OscConfig+0x2ac>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f003 0302 	and.w	r3, r3, #2
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1f0      	bne.n	8008064 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 0308 	and.w	r3, r3, #8
 800808a:	2b00      	cmp	r3, #0
 800808c:	d030      	beq.n	80080f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	695b      	ldr	r3, [r3, #20]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d016      	beq.n	80080c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008096:	4b30      	ldr	r3, [pc, #192]	; (8008158 <HAL_RCC_OscConfig+0x2b4>)
 8008098:	2201      	movs	r2, #1
 800809a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800809c:	f7fd ff44 	bl	8005f28 <HAL_GetTick>
 80080a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080a2:	e008      	b.n	80080b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080a4:	f7fd ff40 	bl	8005f28 <HAL_GetTick>
 80080a8:	4602      	mov	r2, r0
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	1ad3      	subs	r3, r2, r3
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	d901      	bls.n	80080b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80080b2:	2303      	movs	r3, #3
 80080b4:	e164      	b.n	8008380 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080b6:	4b26      	ldr	r3, [pc, #152]	; (8008150 <HAL_RCC_OscConfig+0x2ac>)
 80080b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080ba:	f003 0302 	and.w	r3, r3, #2
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d0f0      	beq.n	80080a4 <HAL_RCC_OscConfig+0x200>
 80080c2:	e015      	b.n	80080f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80080c4:	4b24      	ldr	r3, [pc, #144]	; (8008158 <HAL_RCC_OscConfig+0x2b4>)
 80080c6:	2200      	movs	r2, #0
 80080c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080ca:	f7fd ff2d 	bl	8005f28 <HAL_GetTick>
 80080ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080d0:	e008      	b.n	80080e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080d2:	f7fd ff29 	bl	8005f28 <HAL_GetTick>
 80080d6:	4602      	mov	r2, r0
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d901      	bls.n	80080e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80080e0:	2303      	movs	r3, #3
 80080e2:	e14d      	b.n	8008380 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080e4:	4b1a      	ldr	r3, [pc, #104]	; (8008150 <HAL_RCC_OscConfig+0x2ac>)
 80080e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080e8:	f003 0302 	and.w	r3, r3, #2
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d1f0      	bne.n	80080d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f003 0304 	and.w	r3, r3, #4
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f000 80a0 	beq.w	800823e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80080fe:	2300      	movs	r3, #0
 8008100:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008102:	4b13      	ldr	r3, [pc, #76]	; (8008150 <HAL_RCC_OscConfig+0x2ac>)
 8008104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800810a:	2b00      	cmp	r3, #0
 800810c:	d10f      	bne.n	800812e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800810e:	2300      	movs	r3, #0
 8008110:	60bb      	str	r3, [r7, #8]
 8008112:	4b0f      	ldr	r3, [pc, #60]	; (8008150 <HAL_RCC_OscConfig+0x2ac>)
 8008114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008116:	4a0e      	ldr	r2, [pc, #56]	; (8008150 <HAL_RCC_OscConfig+0x2ac>)
 8008118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800811c:	6413      	str	r3, [r2, #64]	; 0x40
 800811e:	4b0c      	ldr	r3, [pc, #48]	; (8008150 <HAL_RCC_OscConfig+0x2ac>)
 8008120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008126:	60bb      	str	r3, [r7, #8]
 8008128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800812a:	2301      	movs	r3, #1
 800812c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800812e:	4b0b      	ldr	r3, [pc, #44]	; (800815c <HAL_RCC_OscConfig+0x2b8>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008136:	2b00      	cmp	r3, #0
 8008138:	d121      	bne.n	800817e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800813a:	4b08      	ldr	r3, [pc, #32]	; (800815c <HAL_RCC_OscConfig+0x2b8>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a07      	ldr	r2, [pc, #28]	; (800815c <HAL_RCC_OscConfig+0x2b8>)
 8008140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008146:	f7fd feef 	bl	8005f28 <HAL_GetTick>
 800814a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800814c:	e011      	b.n	8008172 <HAL_RCC_OscConfig+0x2ce>
 800814e:	bf00      	nop
 8008150:	40023800 	.word	0x40023800
 8008154:	42470000 	.word	0x42470000
 8008158:	42470e80 	.word	0x42470e80
 800815c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008160:	f7fd fee2 	bl	8005f28 <HAL_GetTick>
 8008164:	4602      	mov	r2, r0
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	2b02      	cmp	r3, #2
 800816c:	d901      	bls.n	8008172 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800816e:	2303      	movs	r3, #3
 8008170:	e106      	b.n	8008380 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008172:	4b85      	ldr	r3, [pc, #532]	; (8008388 <HAL_RCC_OscConfig+0x4e4>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800817a:	2b00      	cmp	r3, #0
 800817c:	d0f0      	beq.n	8008160 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	2b01      	cmp	r3, #1
 8008184:	d106      	bne.n	8008194 <HAL_RCC_OscConfig+0x2f0>
 8008186:	4b81      	ldr	r3, [pc, #516]	; (800838c <HAL_RCC_OscConfig+0x4e8>)
 8008188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800818a:	4a80      	ldr	r2, [pc, #512]	; (800838c <HAL_RCC_OscConfig+0x4e8>)
 800818c:	f043 0301 	orr.w	r3, r3, #1
 8008190:	6713      	str	r3, [r2, #112]	; 0x70
 8008192:	e01c      	b.n	80081ce <HAL_RCC_OscConfig+0x32a>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	2b05      	cmp	r3, #5
 800819a:	d10c      	bne.n	80081b6 <HAL_RCC_OscConfig+0x312>
 800819c:	4b7b      	ldr	r3, [pc, #492]	; (800838c <HAL_RCC_OscConfig+0x4e8>)
 800819e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081a0:	4a7a      	ldr	r2, [pc, #488]	; (800838c <HAL_RCC_OscConfig+0x4e8>)
 80081a2:	f043 0304 	orr.w	r3, r3, #4
 80081a6:	6713      	str	r3, [r2, #112]	; 0x70
 80081a8:	4b78      	ldr	r3, [pc, #480]	; (800838c <HAL_RCC_OscConfig+0x4e8>)
 80081aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ac:	4a77      	ldr	r2, [pc, #476]	; (800838c <HAL_RCC_OscConfig+0x4e8>)
 80081ae:	f043 0301 	orr.w	r3, r3, #1
 80081b2:	6713      	str	r3, [r2, #112]	; 0x70
 80081b4:	e00b      	b.n	80081ce <HAL_RCC_OscConfig+0x32a>
 80081b6:	4b75      	ldr	r3, [pc, #468]	; (800838c <HAL_RCC_OscConfig+0x4e8>)
 80081b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ba:	4a74      	ldr	r2, [pc, #464]	; (800838c <HAL_RCC_OscConfig+0x4e8>)
 80081bc:	f023 0301 	bic.w	r3, r3, #1
 80081c0:	6713      	str	r3, [r2, #112]	; 0x70
 80081c2:	4b72      	ldr	r3, [pc, #456]	; (800838c <HAL_RCC_OscConfig+0x4e8>)
 80081c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081c6:	4a71      	ldr	r2, [pc, #452]	; (800838c <HAL_RCC_OscConfig+0x4e8>)
 80081c8:	f023 0304 	bic.w	r3, r3, #4
 80081cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d015      	beq.n	8008202 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081d6:	f7fd fea7 	bl	8005f28 <HAL_GetTick>
 80081da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081dc:	e00a      	b.n	80081f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081de:	f7fd fea3 	bl	8005f28 <HAL_GetTick>
 80081e2:	4602      	mov	r2, r0
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	1ad3      	subs	r3, r2, r3
 80081e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d901      	bls.n	80081f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80081f0:	2303      	movs	r3, #3
 80081f2:	e0c5      	b.n	8008380 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081f4:	4b65      	ldr	r3, [pc, #404]	; (800838c <HAL_RCC_OscConfig+0x4e8>)
 80081f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081f8:	f003 0302 	and.w	r3, r3, #2
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d0ee      	beq.n	80081de <HAL_RCC_OscConfig+0x33a>
 8008200:	e014      	b.n	800822c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008202:	f7fd fe91 	bl	8005f28 <HAL_GetTick>
 8008206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008208:	e00a      	b.n	8008220 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800820a:	f7fd fe8d 	bl	8005f28 <HAL_GetTick>
 800820e:	4602      	mov	r2, r0
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	f241 3288 	movw	r2, #5000	; 0x1388
 8008218:	4293      	cmp	r3, r2
 800821a:	d901      	bls.n	8008220 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800821c:	2303      	movs	r3, #3
 800821e:	e0af      	b.n	8008380 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008220:	4b5a      	ldr	r3, [pc, #360]	; (800838c <HAL_RCC_OscConfig+0x4e8>)
 8008222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008224:	f003 0302 	and.w	r3, r3, #2
 8008228:	2b00      	cmp	r3, #0
 800822a:	d1ee      	bne.n	800820a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800822c:	7dfb      	ldrb	r3, [r7, #23]
 800822e:	2b01      	cmp	r3, #1
 8008230:	d105      	bne.n	800823e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008232:	4b56      	ldr	r3, [pc, #344]	; (800838c <HAL_RCC_OscConfig+0x4e8>)
 8008234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008236:	4a55      	ldr	r2, [pc, #340]	; (800838c <HAL_RCC_OscConfig+0x4e8>)
 8008238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800823c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	699b      	ldr	r3, [r3, #24]
 8008242:	2b00      	cmp	r3, #0
 8008244:	f000 809b 	beq.w	800837e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008248:	4b50      	ldr	r3, [pc, #320]	; (800838c <HAL_RCC_OscConfig+0x4e8>)
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	f003 030c 	and.w	r3, r3, #12
 8008250:	2b08      	cmp	r3, #8
 8008252:	d05c      	beq.n	800830e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	2b02      	cmp	r3, #2
 800825a:	d141      	bne.n	80082e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800825c:	4b4c      	ldr	r3, [pc, #304]	; (8008390 <HAL_RCC_OscConfig+0x4ec>)
 800825e:	2200      	movs	r2, #0
 8008260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008262:	f7fd fe61 	bl	8005f28 <HAL_GetTick>
 8008266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008268:	e008      	b.n	800827c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800826a:	f7fd fe5d 	bl	8005f28 <HAL_GetTick>
 800826e:	4602      	mov	r2, r0
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	1ad3      	subs	r3, r2, r3
 8008274:	2b02      	cmp	r3, #2
 8008276:	d901      	bls.n	800827c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008278:	2303      	movs	r3, #3
 800827a:	e081      	b.n	8008380 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800827c:	4b43      	ldr	r3, [pc, #268]	; (800838c <HAL_RCC_OscConfig+0x4e8>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008284:	2b00      	cmp	r3, #0
 8008286:	d1f0      	bne.n	800826a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	69da      	ldr	r2, [r3, #28]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6a1b      	ldr	r3, [r3, #32]
 8008290:	431a      	orrs	r2, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008296:	019b      	lsls	r3, r3, #6
 8008298:	431a      	orrs	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800829e:	085b      	lsrs	r3, r3, #1
 80082a0:	3b01      	subs	r3, #1
 80082a2:	041b      	lsls	r3, r3, #16
 80082a4:	431a      	orrs	r2, r3
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082aa:	061b      	lsls	r3, r3, #24
 80082ac:	4937      	ldr	r1, [pc, #220]	; (800838c <HAL_RCC_OscConfig+0x4e8>)
 80082ae:	4313      	orrs	r3, r2
 80082b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80082b2:	4b37      	ldr	r3, [pc, #220]	; (8008390 <HAL_RCC_OscConfig+0x4ec>)
 80082b4:	2201      	movs	r2, #1
 80082b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082b8:	f7fd fe36 	bl	8005f28 <HAL_GetTick>
 80082bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082be:	e008      	b.n	80082d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082c0:	f7fd fe32 	bl	8005f28 <HAL_GetTick>
 80082c4:	4602      	mov	r2, r0
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	1ad3      	subs	r3, r2, r3
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	d901      	bls.n	80082d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80082ce:	2303      	movs	r3, #3
 80082d0:	e056      	b.n	8008380 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082d2:	4b2e      	ldr	r3, [pc, #184]	; (800838c <HAL_RCC_OscConfig+0x4e8>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d0f0      	beq.n	80082c0 <HAL_RCC_OscConfig+0x41c>
 80082de:	e04e      	b.n	800837e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082e0:	4b2b      	ldr	r3, [pc, #172]	; (8008390 <HAL_RCC_OscConfig+0x4ec>)
 80082e2:	2200      	movs	r2, #0
 80082e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082e6:	f7fd fe1f 	bl	8005f28 <HAL_GetTick>
 80082ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082ec:	e008      	b.n	8008300 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082ee:	f7fd fe1b 	bl	8005f28 <HAL_GetTick>
 80082f2:	4602      	mov	r2, r0
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	1ad3      	subs	r3, r2, r3
 80082f8:	2b02      	cmp	r3, #2
 80082fa:	d901      	bls.n	8008300 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80082fc:	2303      	movs	r3, #3
 80082fe:	e03f      	b.n	8008380 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008300:	4b22      	ldr	r3, [pc, #136]	; (800838c <HAL_RCC_OscConfig+0x4e8>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1f0      	bne.n	80082ee <HAL_RCC_OscConfig+0x44a>
 800830c:	e037      	b.n	800837e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	699b      	ldr	r3, [r3, #24]
 8008312:	2b01      	cmp	r3, #1
 8008314:	d101      	bne.n	800831a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	e032      	b.n	8008380 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800831a:	4b1c      	ldr	r3, [pc, #112]	; (800838c <HAL_RCC_OscConfig+0x4e8>)
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	2b01      	cmp	r3, #1
 8008326:	d028      	beq.n	800837a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008332:	429a      	cmp	r2, r3
 8008334:	d121      	bne.n	800837a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008340:	429a      	cmp	r2, r3
 8008342:	d11a      	bne.n	800837a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800834a:	4013      	ands	r3, r2
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008350:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008352:	4293      	cmp	r3, r2
 8008354:	d111      	bne.n	800837a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008360:	085b      	lsrs	r3, r3, #1
 8008362:	3b01      	subs	r3, #1
 8008364:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008366:	429a      	cmp	r2, r3
 8008368:	d107      	bne.n	800837a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008374:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008376:	429a      	cmp	r2, r3
 8008378:	d001      	beq.n	800837e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	e000      	b.n	8008380 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3718      	adds	r7, #24
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	40007000 	.word	0x40007000
 800838c:	40023800 	.word	0x40023800
 8008390:	42470060 	.word	0x42470060

08008394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d101      	bne.n	80083a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	e0cc      	b.n	8008542 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80083a8:	4b68      	ldr	r3, [pc, #416]	; (800854c <HAL_RCC_ClockConfig+0x1b8>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f003 0307 	and.w	r3, r3, #7
 80083b0:	683a      	ldr	r2, [r7, #0]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d90c      	bls.n	80083d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083b6:	4b65      	ldr	r3, [pc, #404]	; (800854c <HAL_RCC_ClockConfig+0x1b8>)
 80083b8:	683a      	ldr	r2, [r7, #0]
 80083ba:	b2d2      	uxtb	r2, r2
 80083bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083be:	4b63      	ldr	r3, [pc, #396]	; (800854c <HAL_RCC_ClockConfig+0x1b8>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f003 0307 	and.w	r3, r3, #7
 80083c6:	683a      	ldr	r2, [r7, #0]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d001      	beq.n	80083d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	e0b8      	b.n	8008542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 0302 	and.w	r3, r3, #2
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d020      	beq.n	800841e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f003 0304 	and.w	r3, r3, #4
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d005      	beq.n	80083f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80083e8:	4b59      	ldr	r3, [pc, #356]	; (8008550 <HAL_RCC_ClockConfig+0x1bc>)
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	4a58      	ldr	r2, [pc, #352]	; (8008550 <HAL_RCC_ClockConfig+0x1bc>)
 80083ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80083f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 0308 	and.w	r3, r3, #8
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d005      	beq.n	800840c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008400:	4b53      	ldr	r3, [pc, #332]	; (8008550 <HAL_RCC_ClockConfig+0x1bc>)
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	4a52      	ldr	r2, [pc, #328]	; (8008550 <HAL_RCC_ClockConfig+0x1bc>)
 8008406:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800840a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800840c:	4b50      	ldr	r3, [pc, #320]	; (8008550 <HAL_RCC_ClockConfig+0x1bc>)
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	494d      	ldr	r1, [pc, #308]	; (8008550 <HAL_RCC_ClockConfig+0x1bc>)
 800841a:	4313      	orrs	r3, r2
 800841c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f003 0301 	and.w	r3, r3, #1
 8008426:	2b00      	cmp	r3, #0
 8008428:	d044      	beq.n	80084b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	2b01      	cmp	r3, #1
 8008430:	d107      	bne.n	8008442 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008432:	4b47      	ldr	r3, [pc, #284]	; (8008550 <HAL_RCC_ClockConfig+0x1bc>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800843a:	2b00      	cmp	r3, #0
 800843c:	d119      	bne.n	8008472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	e07f      	b.n	8008542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	2b02      	cmp	r3, #2
 8008448:	d003      	beq.n	8008452 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800844e:	2b03      	cmp	r3, #3
 8008450:	d107      	bne.n	8008462 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008452:	4b3f      	ldr	r3, [pc, #252]	; (8008550 <HAL_RCC_ClockConfig+0x1bc>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800845a:	2b00      	cmp	r3, #0
 800845c:	d109      	bne.n	8008472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	e06f      	b.n	8008542 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008462:	4b3b      	ldr	r3, [pc, #236]	; (8008550 <HAL_RCC_ClockConfig+0x1bc>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 0302 	and.w	r3, r3, #2
 800846a:	2b00      	cmp	r3, #0
 800846c:	d101      	bne.n	8008472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	e067      	b.n	8008542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008472:	4b37      	ldr	r3, [pc, #220]	; (8008550 <HAL_RCC_ClockConfig+0x1bc>)
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	f023 0203 	bic.w	r2, r3, #3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	4934      	ldr	r1, [pc, #208]	; (8008550 <HAL_RCC_ClockConfig+0x1bc>)
 8008480:	4313      	orrs	r3, r2
 8008482:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008484:	f7fd fd50 	bl	8005f28 <HAL_GetTick>
 8008488:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800848a:	e00a      	b.n	80084a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800848c:	f7fd fd4c 	bl	8005f28 <HAL_GetTick>
 8008490:	4602      	mov	r2, r0
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	1ad3      	subs	r3, r2, r3
 8008496:	f241 3288 	movw	r2, #5000	; 0x1388
 800849a:	4293      	cmp	r3, r2
 800849c:	d901      	bls.n	80084a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800849e:	2303      	movs	r3, #3
 80084a0:	e04f      	b.n	8008542 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084a2:	4b2b      	ldr	r3, [pc, #172]	; (8008550 <HAL_RCC_ClockConfig+0x1bc>)
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	f003 020c 	and.w	r2, r3, #12
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d1eb      	bne.n	800848c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80084b4:	4b25      	ldr	r3, [pc, #148]	; (800854c <HAL_RCC_ClockConfig+0x1b8>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 0307 	and.w	r3, r3, #7
 80084bc:	683a      	ldr	r2, [r7, #0]
 80084be:	429a      	cmp	r2, r3
 80084c0:	d20c      	bcs.n	80084dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084c2:	4b22      	ldr	r3, [pc, #136]	; (800854c <HAL_RCC_ClockConfig+0x1b8>)
 80084c4:	683a      	ldr	r2, [r7, #0]
 80084c6:	b2d2      	uxtb	r2, r2
 80084c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084ca:	4b20      	ldr	r3, [pc, #128]	; (800854c <HAL_RCC_ClockConfig+0x1b8>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f003 0307 	and.w	r3, r3, #7
 80084d2:	683a      	ldr	r2, [r7, #0]
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d001      	beq.n	80084dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	e032      	b.n	8008542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 0304 	and.w	r3, r3, #4
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d008      	beq.n	80084fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80084e8:	4b19      	ldr	r3, [pc, #100]	; (8008550 <HAL_RCC_ClockConfig+0x1bc>)
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	4916      	ldr	r1, [pc, #88]	; (8008550 <HAL_RCC_ClockConfig+0x1bc>)
 80084f6:	4313      	orrs	r3, r2
 80084f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 0308 	and.w	r3, r3, #8
 8008502:	2b00      	cmp	r3, #0
 8008504:	d009      	beq.n	800851a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008506:	4b12      	ldr	r3, [pc, #72]	; (8008550 <HAL_RCC_ClockConfig+0x1bc>)
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	00db      	lsls	r3, r3, #3
 8008514:	490e      	ldr	r1, [pc, #56]	; (8008550 <HAL_RCC_ClockConfig+0x1bc>)
 8008516:	4313      	orrs	r3, r2
 8008518:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800851a:	f000 f821 	bl	8008560 <HAL_RCC_GetSysClockFreq>
 800851e:	4602      	mov	r2, r0
 8008520:	4b0b      	ldr	r3, [pc, #44]	; (8008550 <HAL_RCC_ClockConfig+0x1bc>)
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	091b      	lsrs	r3, r3, #4
 8008526:	f003 030f 	and.w	r3, r3, #15
 800852a:	490a      	ldr	r1, [pc, #40]	; (8008554 <HAL_RCC_ClockConfig+0x1c0>)
 800852c:	5ccb      	ldrb	r3, [r1, r3]
 800852e:	fa22 f303 	lsr.w	r3, r2, r3
 8008532:	4a09      	ldr	r2, [pc, #36]	; (8008558 <HAL_RCC_ClockConfig+0x1c4>)
 8008534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008536:	4b09      	ldr	r3, [pc, #36]	; (800855c <HAL_RCC_ClockConfig+0x1c8>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4618      	mov	r0, r3
 800853c:	f7fd fcb0 	bl	8005ea0 <HAL_InitTick>

  return HAL_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	40023c00 	.word	0x40023c00
 8008550:	40023800 	.word	0x40023800
 8008554:	0801600c 	.word	0x0801600c
 8008558:	20000004 	.word	0x20000004
 800855c:	20000050 	.word	0x20000050

08008560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008560:	b5b0      	push	{r4, r5, r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008566:	2100      	movs	r1, #0
 8008568:	6079      	str	r1, [r7, #4]
 800856a:	2100      	movs	r1, #0
 800856c:	60f9      	str	r1, [r7, #12]
 800856e:	2100      	movs	r1, #0
 8008570:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008572:	2100      	movs	r1, #0
 8008574:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008576:	4952      	ldr	r1, [pc, #328]	; (80086c0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008578:	6889      	ldr	r1, [r1, #8]
 800857a:	f001 010c 	and.w	r1, r1, #12
 800857e:	2908      	cmp	r1, #8
 8008580:	d00d      	beq.n	800859e <HAL_RCC_GetSysClockFreq+0x3e>
 8008582:	2908      	cmp	r1, #8
 8008584:	f200 8094 	bhi.w	80086b0 <HAL_RCC_GetSysClockFreq+0x150>
 8008588:	2900      	cmp	r1, #0
 800858a:	d002      	beq.n	8008592 <HAL_RCC_GetSysClockFreq+0x32>
 800858c:	2904      	cmp	r1, #4
 800858e:	d003      	beq.n	8008598 <HAL_RCC_GetSysClockFreq+0x38>
 8008590:	e08e      	b.n	80086b0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008592:	4b4c      	ldr	r3, [pc, #304]	; (80086c4 <HAL_RCC_GetSysClockFreq+0x164>)
 8008594:	60bb      	str	r3, [r7, #8]
       break;
 8008596:	e08e      	b.n	80086b6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008598:	4b4b      	ldr	r3, [pc, #300]	; (80086c8 <HAL_RCC_GetSysClockFreq+0x168>)
 800859a:	60bb      	str	r3, [r7, #8]
      break;
 800859c:	e08b      	b.n	80086b6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800859e:	4948      	ldr	r1, [pc, #288]	; (80086c0 <HAL_RCC_GetSysClockFreq+0x160>)
 80085a0:	6849      	ldr	r1, [r1, #4]
 80085a2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80085a6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80085a8:	4945      	ldr	r1, [pc, #276]	; (80086c0 <HAL_RCC_GetSysClockFreq+0x160>)
 80085aa:	6849      	ldr	r1, [r1, #4]
 80085ac:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80085b0:	2900      	cmp	r1, #0
 80085b2:	d024      	beq.n	80085fe <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085b4:	4942      	ldr	r1, [pc, #264]	; (80086c0 <HAL_RCC_GetSysClockFreq+0x160>)
 80085b6:	6849      	ldr	r1, [r1, #4]
 80085b8:	0989      	lsrs	r1, r1, #6
 80085ba:	4608      	mov	r0, r1
 80085bc:	f04f 0100 	mov.w	r1, #0
 80085c0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80085c4:	f04f 0500 	mov.w	r5, #0
 80085c8:	ea00 0204 	and.w	r2, r0, r4
 80085cc:	ea01 0305 	and.w	r3, r1, r5
 80085d0:	493d      	ldr	r1, [pc, #244]	; (80086c8 <HAL_RCC_GetSysClockFreq+0x168>)
 80085d2:	fb01 f003 	mul.w	r0, r1, r3
 80085d6:	2100      	movs	r1, #0
 80085d8:	fb01 f102 	mul.w	r1, r1, r2
 80085dc:	1844      	adds	r4, r0, r1
 80085de:	493a      	ldr	r1, [pc, #232]	; (80086c8 <HAL_RCC_GetSysClockFreq+0x168>)
 80085e0:	fba2 0101 	umull	r0, r1, r2, r1
 80085e4:	1863      	adds	r3, r4, r1
 80085e6:	4619      	mov	r1, r3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	461a      	mov	r2, r3
 80085ec:	f04f 0300 	mov.w	r3, #0
 80085f0:	f7f8 fb52 	bl	8000c98 <__aeabi_uldivmod>
 80085f4:	4602      	mov	r2, r0
 80085f6:	460b      	mov	r3, r1
 80085f8:	4613      	mov	r3, r2
 80085fa:	60fb      	str	r3, [r7, #12]
 80085fc:	e04a      	b.n	8008694 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085fe:	4b30      	ldr	r3, [pc, #192]	; (80086c0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	099b      	lsrs	r3, r3, #6
 8008604:	461a      	mov	r2, r3
 8008606:	f04f 0300 	mov.w	r3, #0
 800860a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800860e:	f04f 0100 	mov.w	r1, #0
 8008612:	ea02 0400 	and.w	r4, r2, r0
 8008616:	ea03 0501 	and.w	r5, r3, r1
 800861a:	4620      	mov	r0, r4
 800861c:	4629      	mov	r1, r5
 800861e:	f04f 0200 	mov.w	r2, #0
 8008622:	f04f 0300 	mov.w	r3, #0
 8008626:	014b      	lsls	r3, r1, #5
 8008628:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800862c:	0142      	lsls	r2, r0, #5
 800862e:	4610      	mov	r0, r2
 8008630:	4619      	mov	r1, r3
 8008632:	1b00      	subs	r0, r0, r4
 8008634:	eb61 0105 	sbc.w	r1, r1, r5
 8008638:	f04f 0200 	mov.w	r2, #0
 800863c:	f04f 0300 	mov.w	r3, #0
 8008640:	018b      	lsls	r3, r1, #6
 8008642:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008646:	0182      	lsls	r2, r0, #6
 8008648:	1a12      	subs	r2, r2, r0
 800864a:	eb63 0301 	sbc.w	r3, r3, r1
 800864e:	f04f 0000 	mov.w	r0, #0
 8008652:	f04f 0100 	mov.w	r1, #0
 8008656:	00d9      	lsls	r1, r3, #3
 8008658:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800865c:	00d0      	lsls	r0, r2, #3
 800865e:	4602      	mov	r2, r0
 8008660:	460b      	mov	r3, r1
 8008662:	1912      	adds	r2, r2, r4
 8008664:	eb45 0303 	adc.w	r3, r5, r3
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	f04f 0100 	mov.w	r1, #0
 8008670:	0299      	lsls	r1, r3, #10
 8008672:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008676:	0290      	lsls	r0, r2, #10
 8008678:	4602      	mov	r2, r0
 800867a:	460b      	mov	r3, r1
 800867c:	4610      	mov	r0, r2
 800867e:	4619      	mov	r1, r3
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	461a      	mov	r2, r3
 8008684:	f04f 0300 	mov.w	r3, #0
 8008688:	f7f8 fb06 	bl	8000c98 <__aeabi_uldivmod>
 800868c:	4602      	mov	r2, r0
 800868e:	460b      	mov	r3, r1
 8008690:	4613      	mov	r3, r2
 8008692:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008694:	4b0a      	ldr	r3, [pc, #40]	; (80086c0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	0c1b      	lsrs	r3, r3, #16
 800869a:	f003 0303 	and.w	r3, r3, #3
 800869e:	3301      	adds	r3, #1
 80086a0:	005b      	lsls	r3, r3, #1
 80086a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ac:	60bb      	str	r3, [r7, #8]
      break;
 80086ae:	e002      	b.n	80086b6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80086b0:	4b04      	ldr	r3, [pc, #16]	; (80086c4 <HAL_RCC_GetSysClockFreq+0x164>)
 80086b2:	60bb      	str	r3, [r7, #8]
      break;
 80086b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80086b6:	68bb      	ldr	r3, [r7, #8]
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3710      	adds	r7, #16
 80086bc:	46bd      	mov	sp, r7
 80086be:	bdb0      	pop	{r4, r5, r7, pc}
 80086c0:	40023800 	.word	0x40023800
 80086c4:	00f42400 	.word	0x00f42400
 80086c8:	017d7840 	.word	0x017d7840

080086cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80086cc:	b480      	push	{r7}
 80086ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80086d0:	4b03      	ldr	r3, [pc, #12]	; (80086e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80086d2:	681b      	ldr	r3, [r3, #0]
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	20000004 	.word	0x20000004

080086e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80086e8:	f7ff fff0 	bl	80086cc <HAL_RCC_GetHCLKFreq>
 80086ec:	4602      	mov	r2, r0
 80086ee:	4b05      	ldr	r3, [pc, #20]	; (8008704 <HAL_RCC_GetPCLK1Freq+0x20>)
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	0a9b      	lsrs	r3, r3, #10
 80086f4:	f003 0307 	and.w	r3, r3, #7
 80086f8:	4903      	ldr	r1, [pc, #12]	; (8008708 <HAL_RCC_GetPCLK1Freq+0x24>)
 80086fa:	5ccb      	ldrb	r3, [r1, r3]
 80086fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008700:	4618      	mov	r0, r3
 8008702:	bd80      	pop	{r7, pc}
 8008704:	40023800 	.word	0x40023800
 8008708:	0801601c 	.word	0x0801601c

0800870c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008710:	f7ff ffdc 	bl	80086cc <HAL_RCC_GetHCLKFreq>
 8008714:	4602      	mov	r2, r0
 8008716:	4b05      	ldr	r3, [pc, #20]	; (800872c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	0b5b      	lsrs	r3, r3, #13
 800871c:	f003 0307 	and.w	r3, r3, #7
 8008720:	4903      	ldr	r1, [pc, #12]	; (8008730 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008722:	5ccb      	ldrb	r3, [r1, r3]
 8008724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008728:	4618      	mov	r0, r3
 800872a:	bd80      	pop	{r7, pc}
 800872c:	40023800 	.word	0x40023800
 8008730:	0801601c 	.word	0x0801601c

08008734 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d101      	bne.n	8008746 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	e022      	b.n	800878c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800874c:	b2db      	uxtb	r3, r3
 800874e:	2b00      	cmp	r3, #0
 8008750:	d105      	bne.n	800875e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f7fb fbe5 	bl	8003f28 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2203      	movs	r2, #3
 8008762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f814 	bl	8008794 <HAL_SD_InitCard>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d001      	beq.n	8008776 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e00a      	b.n	800878c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2201      	movs	r2, #1
 8008786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3708      	adds	r7, #8
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008794:	b5b0      	push	{r4, r5, r7, lr}
 8008796:	b08e      	sub	sp, #56	; 0x38
 8008798:	af04      	add	r7, sp, #16
 800879a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800879c:	2300      	movs	r3, #0
 800879e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80087a0:	2300      	movs	r3, #0
 80087a2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80087a4:	2300      	movs	r3, #0
 80087a6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80087a8:	2300      	movs	r3, #0
 80087aa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80087ac:	2300      	movs	r3, #0
 80087ae:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80087b0:	2376      	movs	r3, #118	; 0x76
 80087b2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681d      	ldr	r5, [r3, #0]
 80087b8:	466c      	mov	r4, sp
 80087ba:	f107 0314 	add.w	r3, r7, #20
 80087be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80087c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80087c6:	f107 0308 	add.w	r3, r7, #8
 80087ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80087cc:	4628      	mov	r0, r5
 80087ce:	f001 fff3 	bl	800a7b8 <SDIO_Init>
 80087d2:	4603      	mov	r3, r0
 80087d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80087d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d001      	beq.n	80087e4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e04c      	b.n	800887e <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80087e4:	4b28      	ldr	r3, [pc, #160]	; (8008888 <HAL_SD_InitCard+0xf4>)
 80087e6:	2200      	movs	r2, #0
 80087e8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4618      	mov	r0, r3
 80087f0:	f002 f82b 	bl	800a84a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80087f4:	4b24      	ldr	r3, [pc, #144]	; (8008888 <HAL_SD_InitCard+0xf4>)
 80087f6:	2201      	movs	r2, #1
 80087f8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 fe68 	bl	80094d0 <SD_PowerON>
 8008800:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008802:	6a3b      	ldr	r3, [r7, #32]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00b      	beq.n	8008820 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008814:	6a3b      	ldr	r3, [r7, #32]
 8008816:	431a      	orrs	r2, r3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	e02e      	b.n	800887e <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 fd89 	bl	8009338 <SD_InitCard>
 8008826:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008828:	6a3b      	ldr	r3, [r7, #32]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d00b      	beq.n	8008846 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2201      	movs	r2, #1
 8008832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800883a:	6a3b      	ldr	r3, [r7, #32]
 800883c:	431a      	orrs	r2, r3
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008842:	2301      	movs	r3, #1
 8008844:	e01b      	b.n	800887e <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800884e:	4618      	mov	r0, r3
 8008850:	f002 f88e 	bl	800a970 <SDMMC_CmdBlockLength>
 8008854:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008856:	6a3b      	ldr	r3, [r7, #32]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00f      	beq.n	800887c <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a0a      	ldr	r2, [pc, #40]	; (800888c <HAL_SD_InitCard+0xf8>)
 8008862:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008868:	6a3b      	ldr	r3, [r7, #32]
 800886a:	431a      	orrs	r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008878:	2301      	movs	r3, #1
 800887a:	e000      	b.n	800887e <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3728      	adds	r7, #40	; 0x28
 8008882:	46bd      	mov	sp, r7
 8008884:	bdb0      	pop	{r4, r5, r7, pc}
 8008886:	bf00      	nop
 8008888:	422580a0 	.word	0x422580a0
 800888c:	004005ff 	.word	0x004005ff

08008890 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b092      	sub	sp, #72	; 0x48
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	607a      	str	r2, [r7, #4]
 800889c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800889e:	f7fd fb43 	bl	8005f28 <HAL_GetTick>
 80088a2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d107      	bne.n	80088c2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	e1bd      	b.n	8008c3e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	f040 81b0 	bne.w	8008c30 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80088d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	441a      	add	r2, r3
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d907      	bls.n	80088f4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	e1a4      	b.n	8008c3e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2203      	movs	r2, #3
 80088f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2200      	movs	r2, #0
 8008902:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008908:	2b01      	cmp	r3, #1
 800890a:	d002      	beq.n	8008912 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800890c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890e:	025b      	lsls	r3, r3, #9
 8008910:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008912:	f04f 33ff 	mov.w	r3, #4294967295
 8008916:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	025b      	lsls	r3, r3, #9
 800891c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800891e:	2390      	movs	r3, #144	; 0x90
 8008920:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008922:	2302      	movs	r3, #2
 8008924:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008926:	2300      	movs	r3, #0
 8008928:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800892a:	2301      	movs	r3, #1
 800892c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f107 0214 	add.w	r2, r7, #20
 8008936:	4611      	mov	r1, r2
 8008938:	4618      	mov	r0, r3
 800893a:	f001 ffed 	bl	800a918 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	2b01      	cmp	r3, #1
 8008942:	d90a      	bls.n	800895a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2202      	movs	r2, #2
 8008948:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008950:	4618      	mov	r0, r3
 8008952:	f002 f851 	bl	800a9f8 <SDMMC_CmdReadMultiBlock>
 8008956:	6478      	str	r0, [r7, #68]	; 0x44
 8008958:	e009      	b.n	800896e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2201      	movs	r2, #1
 800895e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008966:	4618      	mov	r0, r3
 8008968:	f002 f824 	bl	800a9b4 <SDMMC_CmdReadSingleBlock>
 800896c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800896e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008970:	2b00      	cmp	r3, #0
 8008972:	d012      	beq.n	800899a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a7a      	ldr	r2, [pc, #488]	; (8008b64 <HAL_SD_ReadBlocks+0x2d4>)
 800897a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008982:	431a      	orrs	r2, r3
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2201      	movs	r2, #1
 800898c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2200      	movs	r2, #0
 8008994:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	e151      	b.n	8008c3e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800899e:	e061      	b.n	8008a64 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d03c      	beq.n	8008a28 <HAL_SD_ReadBlocks+0x198>
 80089ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d039      	beq.n	8008a28 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80089b4:	2300      	movs	r3, #0
 80089b6:	643b      	str	r3, [r7, #64]	; 0x40
 80089b8:	e033      	b.n	8008a22 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4618      	mov	r0, r3
 80089c0:	f001 ff25 	bl	800a80e <SDIO_ReadFIFO>
 80089c4:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80089c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c8:	b2da      	uxtb	r2, r3
 80089ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089cc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80089ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d0:	3301      	adds	r3, #1
 80089d2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80089d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089d6:	3b01      	subs	r3, #1
 80089d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80089da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089dc:	0a1b      	lsrs	r3, r3, #8
 80089de:	b2da      	uxtb	r2, r3
 80089e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80089e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e6:	3301      	adds	r3, #1
 80089e8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80089ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ec:	3b01      	subs	r3, #1
 80089ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80089f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f2:	0c1b      	lsrs	r3, r3, #16
 80089f4:	b2da      	uxtb	r2, r3
 80089f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80089fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089fc:	3301      	adds	r3, #1
 80089fe:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a02:	3b01      	subs	r3, #1
 8008a04:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a08:	0e1b      	lsrs	r3, r3, #24
 8008a0a:	b2da      	uxtb	r2, r3
 8008a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a0e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a12:	3301      	adds	r3, #1
 8008a14:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8008a1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a1e:	3301      	adds	r3, #1
 8008a20:	643b      	str	r3, [r7, #64]	; 0x40
 8008a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a24:	2b07      	cmp	r3, #7
 8008a26:	d9c8      	bls.n	80089ba <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008a28:	f7fd fa7e 	bl	8005f28 <HAL_GetTick>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d902      	bls.n	8008a3e <HAL_SD_ReadBlocks+0x1ae>
 8008a38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d112      	bne.n	8008a64 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a48      	ldr	r2, [pc, #288]	; (8008b64 <HAL_SD_ReadBlocks+0x2d4>)
 8008a44:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a4a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2201      	movs	r2, #1
 8008a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008a60:	2303      	movs	r3, #3
 8008a62:	e0ec      	b.n	8008c3e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a6a:	f240 332a 	movw	r3, #810	; 0x32a
 8008a6e:	4013      	ands	r3, r2
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d095      	beq.n	80089a0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d022      	beq.n	8008ac8 <HAL_SD_ReadBlocks+0x238>
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d91f      	bls.n	8008ac8 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a8c:	2b03      	cmp	r3, #3
 8008a8e:	d01b      	beq.n	8008ac8 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4618      	mov	r0, r3
 8008a96:	f002 f815 	bl	800aac4 <SDMMC_CmdStopTransfer>
 8008a9a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d012      	beq.n	8008ac8 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a2f      	ldr	r2, [pc, #188]	; (8008b64 <HAL_SD_ReadBlocks+0x2d4>)
 8008aa8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ab0:	431a      	orrs	r2, r3
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e0ba      	b.n	8008c3e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ace:	f003 0308 	and.w	r3, r3, #8
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d012      	beq.n	8008afc <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a22      	ldr	r2, [pc, #136]	; (8008b64 <HAL_SD_ReadBlocks+0x2d4>)
 8008adc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae2:	f043 0208 	orr.w	r2, r3, #8
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2201      	movs	r2, #1
 8008aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2200      	movs	r2, #0
 8008af6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	e0a0      	b.n	8008c3e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b02:	f003 0302 	and.w	r3, r3, #2
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d012      	beq.n	8008b30 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a15      	ldr	r2, [pc, #84]	; (8008b64 <HAL_SD_ReadBlocks+0x2d4>)
 8008b10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b16:	f043 0202 	orr.w	r2, r3, #2
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2201      	movs	r2, #1
 8008b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e086      	b.n	8008c3e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b36:	f003 0320 	and.w	r3, r3, #32
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d063      	beq.n	8008c06 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a08      	ldr	r2, [pc, #32]	; (8008b64 <HAL_SD_ReadBlocks+0x2d4>)
 8008b44:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4a:	f043 0220 	orr.w	r2, r3, #32
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2201      	movs	r2, #1
 8008b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	e06c      	b.n	8008c3e <HAL_SD_ReadBlocks+0x3ae>
 8008b64:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f001 fe4e 	bl	800a80e <SDIO_ReadFIFO>
 8008b72:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8008b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b76:	b2da      	uxtb	r2, r3
 8008b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b7a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b7e:	3301      	adds	r3, #1
 8008b80:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b84:	3b01      	subs	r3, #1
 8008b86:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8a:	0a1b      	lsrs	r3, r3, #8
 8008b8c:	b2da      	uxtb	r2, r3
 8008b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b90:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b94:	3301      	adds	r3, #1
 8008b96:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba0:	0c1b      	lsrs	r3, r3, #16
 8008ba2:	b2da      	uxtb	r2, r3
 8008ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ba6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008baa:	3301      	adds	r3, #1
 8008bac:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb6:	0e1b      	lsrs	r3, r3, #24
 8008bb8:	b2da      	uxtb	r2, r3
 8008bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bbc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bc6:	3b01      	subs	r3, #1
 8008bc8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008bca:	f7fd f9ad 	bl	8005f28 <HAL_GetTick>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd2:	1ad3      	subs	r3, r2, r3
 8008bd4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d902      	bls.n	8008be0 <HAL_SD_ReadBlocks+0x350>
 8008bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d112      	bne.n	8008c06 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a18      	ldr	r2, [pc, #96]	; (8008c48 <HAL_SD_ReadBlocks+0x3b8>)
 8008be6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	e01b      	b.n	8008c3e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d002      	beq.n	8008c1a <HAL_SD_ReadBlocks+0x38a>
 8008c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d1a6      	bne.n	8008b68 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f240 523a 	movw	r2, #1338	; 0x53a
 8008c22:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	e006      	b.n	8008c3e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c34:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008c3c:	2301      	movs	r3, #1
  }
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3748      	adds	r7, #72	; 0x48
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	004005ff 	.word	0x004005ff

08008c4c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b092      	sub	sp, #72	; 0x48
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	607a      	str	r2, [r7, #4]
 8008c58:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008c5a:	f7fd f965 	bl	8005f28 <HAL_GetTick>
 8008c5e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d107      	bne.n	8008c7e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c72:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e166      	b.n	8008f4c <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	f040 8159 	bne.w	8008f3e <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008c92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	441a      	add	r2, r3
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d907      	bls.n	8008cb0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	e14d      	b.n	8008f4c <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2203      	movs	r2, #3
 8008cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d002      	beq.n	8008cce <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cca:	025b      	lsls	r3, r3, #9
 8008ccc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008cce:	f04f 33ff 	mov.w	r3, #4294967295
 8008cd2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	025b      	lsls	r3, r3, #9
 8008cd8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008cda:	2390      	movs	r3, #144	; 0x90
 8008cdc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f107 0218 	add.w	r2, r7, #24
 8008cf2:	4611      	mov	r1, r2
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f001 fe0f 	bl	800a918 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d90a      	bls.n	8008d16 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2220      	movs	r2, #32
 8008d04:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f001 feb7 	bl	800aa80 <SDMMC_CmdWriteMultiBlock>
 8008d12:	6478      	str	r0, [r7, #68]	; 0x44
 8008d14:	e009      	b.n	8008d2a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2210      	movs	r2, #16
 8008d1a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d22:	4618      	mov	r0, r3
 8008d24:	f001 fe8a 	bl	800aa3c <SDMMC_CmdWriteSingleBlock>
 8008d28:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d012      	beq.n	8008d56 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a87      	ldr	r2, [pc, #540]	; (8008f54 <HAL_SD_WriteBlocks+0x308>)
 8008d36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d3e:	431a      	orrs	r2, r3
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	e0fa      	b.n	8008f4c <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008d5a:	e065      	b.n	8008e28 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d040      	beq.n	8008dec <HAL_SD_WriteBlocks+0x1a0>
 8008d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d03d      	beq.n	8008dec <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8008d70:	2300      	movs	r3, #0
 8008d72:	643b      	str	r3, [r7, #64]	; 0x40
 8008d74:	e037      	b.n	8008de6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8008d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d7e:	3301      	adds	r3, #1
 8008d80:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d84:	3b01      	subs	r3, #1
 8008d86:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	021a      	lsls	r2, r3, #8
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	4313      	orrs	r3, r2
 8008d92:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d96:	3301      	adds	r3, #1
 8008d98:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	041a      	lsls	r2, r3, #16
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	4313      	orrs	r3, r2
 8008daa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dae:	3301      	adds	r3, #1
 8008db0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008db4:	3b01      	subs	r3, #1
 8008db6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	061a      	lsls	r2, r3, #24
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dcc:	3b01      	subs	r3, #1
 8008dce:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f107 0214 	add.w	r2, r7, #20
 8008dd8:	4611      	mov	r1, r2
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f001 fd24 	bl	800a828 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008de2:	3301      	adds	r3, #1
 8008de4:	643b      	str	r3, [r7, #64]	; 0x40
 8008de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008de8:	2b07      	cmp	r3, #7
 8008dea:	d9c4      	bls.n	8008d76 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008dec:	f7fd f89c 	bl	8005f28 <HAL_GetTick>
 8008df0:	4602      	mov	r2, r0
 8008df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df4:	1ad3      	subs	r3, r2, r3
 8008df6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d902      	bls.n	8008e02 <HAL_SD_WriteBlocks+0x1b6>
 8008dfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d112      	bne.n	8008e28 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a53      	ldr	r2, [pc, #332]	; (8008f54 <HAL_SD_WriteBlocks+0x308>)
 8008e08:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e10:	431a      	orrs	r2, r3
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2200      	movs	r2, #0
 8008e22:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008e24:	2303      	movs	r3, #3
 8008e26:	e091      	b.n	8008f4c <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e2e:	f240 331a 	movw	r3, #794	; 0x31a
 8008e32:	4013      	ands	r3, r2
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d091      	beq.n	8008d5c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d022      	beq.n	8008e8c <HAL_SD_WriteBlocks+0x240>
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d91f      	bls.n	8008e8c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e50:	2b03      	cmp	r3, #3
 8008e52:	d01b      	beq.n	8008e8c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f001 fe33 	bl	800aac4 <SDMMC_CmdStopTransfer>
 8008e5e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d012      	beq.n	8008e8c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a3a      	ldr	r2, [pc, #232]	; (8008f54 <HAL_SD_WriteBlocks+0x308>)
 8008e6c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e74:	431a      	orrs	r2, r3
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2200      	movs	r2, #0
 8008e86:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e05f      	b.n	8008f4c <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e92:	f003 0308 	and.w	r3, r3, #8
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d012      	beq.n	8008ec0 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a2d      	ldr	r2, [pc, #180]	; (8008f54 <HAL_SD_WriteBlocks+0x308>)
 8008ea0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea6:	f043 0208 	orr.w	r2, r3, #8
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	e045      	b.n	8008f4c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ec6:	f003 0302 	and.w	r3, r3, #2
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d012      	beq.n	8008ef4 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a20      	ldr	r2, [pc, #128]	; (8008f54 <HAL_SD_WriteBlocks+0x308>)
 8008ed4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eda:	f043 0202 	orr.w	r2, r3, #2
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2200      	movs	r2, #0
 8008eee:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e02b      	b.n	8008f4c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008efa:	f003 0310 	and.w	r3, r3, #16
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d012      	beq.n	8008f28 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a13      	ldr	r2, [pc, #76]	; (8008f54 <HAL_SD_WriteBlocks+0x308>)
 8008f08:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f0e:	f043 0210 	orr.w	r2, r3, #16
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2201      	movs	r2, #1
 8008f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2200      	movs	r2, #0
 8008f22:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	e011      	b.n	8008f4c <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f240 523a 	movw	r2, #1338	; 0x53a
 8008f30:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2201      	movs	r2, #1
 8008f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	e006      	b.n	8008f4c <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f42:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
  }
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3748      	adds	r7, #72	; 0x48
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	004005ff 	.word	0x004005ff

08008f58 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f66:	0f9b      	lsrs	r3, r3, #30
 8008f68:	b2da      	uxtb	r2, r3
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f72:	0e9b      	lsrs	r3, r3, #26
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	f003 030f 	and.w	r3, r3, #15
 8008f7a:	b2da      	uxtb	r2, r3
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f84:	0e1b      	lsrs	r3, r3, #24
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	f003 0303 	and.w	r3, r3, #3
 8008f8c:	b2da      	uxtb	r2, r3
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f96:	0c1b      	lsrs	r3, r3, #16
 8008f98:	b2da      	uxtb	r2, r3
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fa2:	0a1b      	lsrs	r3, r3, #8
 8008fa4:	b2da      	uxtb	r2, r3
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fae:	b2da      	uxtb	r2, r3
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fb8:	0d1b      	lsrs	r3, r3, #20
 8008fba:	b29a      	uxth	r2, r3
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fc4:	0c1b      	lsrs	r3, r3, #16
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	f003 030f 	and.w	r3, r3, #15
 8008fcc:	b2da      	uxtb	r2, r3
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fd6:	0bdb      	lsrs	r3, r3, #15
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	f003 0301 	and.w	r3, r3, #1
 8008fde:	b2da      	uxtb	r2, r3
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fe8:	0b9b      	lsrs	r3, r3, #14
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	f003 0301 	and.w	r3, r3, #1
 8008ff0:	b2da      	uxtb	r2, r3
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ffa:	0b5b      	lsrs	r3, r3, #13
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	f003 0301 	and.w	r3, r3, #1
 8009002:	b2da      	uxtb	r2, r3
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800900c:	0b1b      	lsrs	r3, r3, #12
 800900e:	b2db      	uxtb	r3, r3
 8009010:	f003 0301 	and.w	r3, r3, #1
 8009014:	b2da      	uxtb	r2, r3
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	2200      	movs	r2, #0
 800901e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009024:	2b00      	cmp	r3, #0
 8009026:	d163      	bne.n	80090f0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800902c:	009a      	lsls	r2, r3, #2
 800902e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009032:	4013      	ands	r3, r2
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009038:	0f92      	lsrs	r2, r2, #30
 800903a:	431a      	orrs	r2, r3
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009044:	0edb      	lsrs	r3, r3, #27
 8009046:	b2db      	uxtb	r3, r3
 8009048:	f003 0307 	and.w	r3, r3, #7
 800904c:	b2da      	uxtb	r2, r3
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009056:	0e1b      	lsrs	r3, r3, #24
 8009058:	b2db      	uxtb	r3, r3
 800905a:	f003 0307 	and.w	r3, r3, #7
 800905e:	b2da      	uxtb	r2, r3
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009068:	0d5b      	lsrs	r3, r3, #21
 800906a:	b2db      	uxtb	r3, r3
 800906c:	f003 0307 	and.w	r3, r3, #7
 8009070:	b2da      	uxtb	r2, r3
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800907a:	0c9b      	lsrs	r3, r3, #18
 800907c:	b2db      	uxtb	r3, r3
 800907e:	f003 0307 	and.w	r3, r3, #7
 8009082:	b2da      	uxtb	r2, r3
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800908c:	0bdb      	lsrs	r3, r3, #15
 800908e:	b2db      	uxtb	r3, r3
 8009090:	f003 0307 	and.w	r3, r3, #7
 8009094:	b2da      	uxtb	r2, r3
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	691b      	ldr	r3, [r3, #16]
 800909e:	1c5a      	adds	r2, r3, #1
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	7e1b      	ldrb	r3, [r3, #24]
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	f003 0307 	and.w	r3, r3, #7
 80090ae:	3302      	adds	r3, #2
 80090b0:	2201      	movs	r2, #1
 80090b2:	fa02 f303 	lsl.w	r3, r2, r3
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80090ba:	fb02 f203 	mul.w	r2, r2, r3
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	7a1b      	ldrb	r3, [r3, #8]
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	f003 030f 	and.w	r3, r3, #15
 80090cc:	2201      	movs	r2, #1
 80090ce:	409a      	lsls	r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80090dc:	0a52      	lsrs	r2, r2, #9
 80090de:	fb02 f203 	mul.w	r2, r2, r3
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090ec:	661a      	str	r2, [r3, #96]	; 0x60
 80090ee:	e031      	b.n	8009154 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d11d      	bne.n	8009134 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090fc:	041b      	lsls	r3, r3, #16
 80090fe:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009106:	0c1b      	lsrs	r3, r3, #16
 8009108:	431a      	orrs	r2, r3
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	691b      	ldr	r3, [r3, #16]
 8009112:	3301      	adds	r3, #1
 8009114:	029a      	lsls	r2, r3, #10
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009128:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	661a      	str	r2, [r3, #96]	; 0x60
 8009132:	e00f      	b.n	8009154 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a58      	ldr	r2, [pc, #352]	; (800929c <HAL_SD_GetCardCSD+0x344>)
 800913a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009140:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2201      	movs	r2, #1
 800914c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	e09d      	b.n	8009290 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009158:	0b9b      	lsrs	r3, r3, #14
 800915a:	b2db      	uxtb	r3, r3
 800915c:	f003 0301 	and.w	r3, r3, #1
 8009160:	b2da      	uxtb	r2, r3
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800916a:	09db      	lsrs	r3, r3, #7
 800916c:	b2db      	uxtb	r3, r3
 800916e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009172:	b2da      	uxtb	r2, r3
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800917c:	b2db      	uxtb	r3, r3
 800917e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009182:	b2da      	uxtb	r2, r3
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800918c:	0fdb      	lsrs	r3, r3, #31
 800918e:	b2da      	uxtb	r2, r3
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009198:	0f5b      	lsrs	r3, r3, #29
 800919a:	b2db      	uxtb	r3, r3
 800919c:	f003 0303 	and.w	r3, r3, #3
 80091a0:	b2da      	uxtb	r2, r3
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091aa:	0e9b      	lsrs	r3, r3, #26
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	f003 0307 	and.w	r3, r3, #7
 80091b2:	b2da      	uxtb	r2, r3
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091bc:	0d9b      	lsrs	r3, r3, #22
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	f003 030f 	and.w	r3, r3, #15
 80091c4:	b2da      	uxtb	r2, r3
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ce:	0d5b      	lsrs	r3, r3, #21
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	f003 0301 	and.w	r3, r3, #1
 80091d6:	b2da      	uxtb	r2, r3
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ea:	0c1b      	lsrs	r3, r3, #16
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	f003 0301 	and.w	r3, r3, #1
 80091f2:	b2da      	uxtb	r2, r3
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091fe:	0bdb      	lsrs	r3, r3, #15
 8009200:	b2db      	uxtb	r3, r3
 8009202:	f003 0301 	and.w	r3, r3, #1
 8009206:	b2da      	uxtb	r2, r3
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009212:	0b9b      	lsrs	r3, r3, #14
 8009214:	b2db      	uxtb	r3, r3
 8009216:	f003 0301 	and.w	r3, r3, #1
 800921a:	b2da      	uxtb	r2, r3
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009226:	0b5b      	lsrs	r3, r3, #13
 8009228:	b2db      	uxtb	r3, r3
 800922a:	f003 0301 	and.w	r3, r3, #1
 800922e:	b2da      	uxtb	r2, r3
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800923a:	0b1b      	lsrs	r3, r3, #12
 800923c:	b2db      	uxtb	r3, r3
 800923e:	f003 0301 	and.w	r3, r3, #1
 8009242:	b2da      	uxtb	r2, r3
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800924e:	0a9b      	lsrs	r3, r3, #10
 8009250:	b2db      	uxtb	r3, r3
 8009252:	f003 0303 	and.w	r3, r3, #3
 8009256:	b2da      	uxtb	r2, r3
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009262:	0a1b      	lsrs	r3, r3, #8
 8009264:	b2db      	uxtb	r3, r3
 8009266:	f003 0303 	and.w	r3, r3, #3
 800926a:	b2da      	uxtb	r2, r3
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009276:	085b      	lsrs	r3, r3, #1
 8009278:	b2db      	uxtb	r3, r3
 800927a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800927e:	b2da      	uxtb	r2, r3
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	2201      	movs	r2, #1
 800928a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr
 800929c:	004005ff 	.word	0x004005ff

080092a0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b086      	sub	sp, #24
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009300:	2300      	movs	r3, #0
 8009302:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009304:	f107 030c 	add.w	r3, r7, #12
 8009308:	4619      	mov	r1, r3
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 f96e 	bl	80095ec <SD_SendStatus>
 8009310:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d005      	beq.n	8009324 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	431a      	orrs	r2, r3
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	0a5b      	lsrs	r3, r3, #9
 8009328:	f003 030f 	and.w	r3, r3, #15
 800932c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800932e:	693b      	ldr	r3, [r7, #16]
}
 8009330:	4618      	mov	r0, r3
 8009332:	3718      	adds	r7, #24
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009338:	b5b0      	push	{r4, r5, r7, lr}
 800933a:	b094      	sub	sp, #80	; 0x50
 800933c:	af04      	add	r7, sp, #16
 800933e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009340:	2301      	movs	r3, #1
 8009342:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4618      	mov	r0, r3
 800934a:	f001 fa8d 	bl	800a868 <SDIO_GetPowerState>
 800934e:	4603      	mov	r3, r0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d102      	bne.n	800935a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009354:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009358:	e0b6      	b.n	80094c8 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800935e:	2b03      	cmp	r3, #3
 8009360:	d02f      	beq.n	80093c2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4618      	mov	r0, r3
 8009368:	f001 fc73 	bl	800ac52 <SDMMC_CmdSendCID>
 800936c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800936e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009370:	2b00      	cmp	r3, #0
 8009372:	d001      	beq.n	8009378 <SD_InitCard+0x40>
    {
      return errorstate;
 8009374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009376:	e0a7      	b.n	80094c8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2100      	movs	r1, #0
 800937e:	4618      	mov	r0, r3
 8009380:	f001 fab7 	bl	800a8f2 <SDIO_GetResponse>
 8009384:	4602      	mov	r2, r0
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	2104      	movs	r1, #4
 8009390:	4618      	mov	r0, r3
 8009392:	f001 faae 	bl	800a8f2 <SDIO_GetResponse>
 8009396:	4602      	mov	r2, r0
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2108      	movs	r1, #8
 80093a2:	4618      	mov	r0, r3
 80093a4:	f001 faa5 	bl	800a8f2 <SDIO_GetResponse>
 80093a8:	4602      	mov	r2, r0
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	210c      	movs	r1, #12
 80093b4:	4618      	mov	r0, r3
 80093b6:	f001 fa9c 	bl	800a8f2 <SDIO_GetResponse>
 80093ba:	4602      	mov	r2, r0
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093c6:	2b03      	cmp	r3, #3
 80093c8:	d00d      	beq.n	80093e6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f107 020e 	add.w	r2, r7, #14
 80093d2:	4611      	mov	r1, r2
 80093d4:	4618      	mov	r0, r3
 80093d6:	f001 fc79 	bl	800accc <SDMMC_CmdSetRelAdd>
 80093da:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80093dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d001      	beq.n	80093e6 <SD_InitCard+0xae>
    {
      return errorstate;
 80093e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093e4:	e070      	b.n	80094c8 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ea:	2b03      	cmp	r3, #3
 80093ec:	d036      	beq.n	800945c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80093ee:	89fb      	ldrh	r3, [r7, #14]
 80093f0:	461a      	mov	r2, r3
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093fe:	041b      	lsls	r3, r3, #16
 8009400:	4619      	mov	r1, r3
 8009402:	4610      	mov	r0, r2
 8009404:	f001 fc43 	bl	800ac8e <SDMMC_CmdSendCSD>
 8009408:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800940a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800940c:	2b00      	cmp	r3, #0
 800940e:	d001      	beq.n	8009414 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009412:	e059      	b.n	80094c8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2100      	movs	r1, #0
 800941a:	4618      	mov	r0, r3
 800941c:	f001 fa69 	bl	800a8f2 <SDIO_GetResponse>
 8009420:	4602      	mov	r2, r0
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2104      	movs	r1, #4
 800942c:	4618      	mov	r0, r3
 800942e:	f001 fa60 	bl	800a8f2 <SDIO_GetResponse>
 8009432:	4602      	mov	r2, r0
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	2108      	movs	r1, #8
 800943e:	4618      	mov	r0, r3
 8009440:	f001 fa57 	bl	800a8f2 <SDIO_GetResponse>
 8009444:	4602      	mov	r2, r0
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	210c      	movs	r1, #12
 8009450:	4618      	mov	r0, r3
 8009452:	f001 fa4e 	bl	800a8f2 <SDIO_GetResponse>
 8009456:	4602      	mov	r2, r0
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2104      	movs	r1, #4
 8009462:	4618      	mov	r0, r3
 8009464:	f001 fa45 	bl	800a8f2 <SDIO_GetResponse>
 8009468:	4603      	mov	r3, r0
 800946a:	0d1a      	lsrs	r2, r3, #20
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009470:	f107 0310 	add.w	r3, r7, #16
 8009474:	4619      	mov	r1, r3
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f7ff fd6e 	bl	8008f58 <HAL_SD_GetCardCSD>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d002      	beq.n	8009488 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009482:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009486:	e01f      	b.n	80094c8 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6819      	ldr	r1, [r3, #0]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009490:	041b      	lsls	r3, r3, #16
 8009492:	461a      	mov	r2, r3
 8009494:	f04f 0300 	mov.w	r3, #0
 8009498:	4608      	mov	r0, r1
 800949a:	f001 fb35 	bl	800ab08 <SDMMC_CmdSelDesel>
 800949e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80094a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d001      	beq.n	80094aa <SD_InitCard+0x172>
  {
    return errorstate;
 80094a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094a8:	e00e      	b.n	80094c8 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681d      	ldr	r5, [r3, #0]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	466c      	mov	r4, sp
 80094b2:	f103 0210 	add.w	r2, r3, #16
 80094b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80094b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80094bc:	3304      	adds	r3, #4
 80094be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80094c0:	4628      	mov	r0, r5
 80094c2:	f001 f979 	bl	800a7b8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80094c6:	2300      	movs	r3, #0
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3740      	adds	r7, #64	; 0x40
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bdb0      	pop	{r4, r5, r7, pc}

080094d0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b086      	sub	sp, #24
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80094d8:	2300      	movs	r3, #0
 80094da:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80094dc:	2300      	movs	r3, #0
 80094de:	617b      	str	r3, [r7, #20]
 80094e0:	2300      	movs	r3, #0
 80094e2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4618      	mov	r0, r3
 80094ea:	f001 fb30 	bl	800ab4e <SDMMC_CmdGoIdleState>
 80094ee:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d001      	beq.n	80094fa <SD_PowerON+0x2a>
  {
    return errorstate;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	e072      	b.n	80095e0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4618      	mov	r0, r3
 8009500:	f001 fb43 	bl	800ab8a <SDMMC_CmdOperCond>
 8009504:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d00d      	beq.n	8009528 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4618      	mov	r0, r3
 8009518:	f001 fb19 	bl	800ab4e <SDMMC_CmdGoIdleState>
 800951c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d004      	beq.n	800952e <SD_PowerON+0x5e>
    {
      return errorstate;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	e05b      	b.n	80095e0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009532:	2b01      	cmp	r3, #1
 8009534:	d137      	bne.n	80095a6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2100      	movs	r1, #0
 800953c:	4618      	mov	r0, r3
 800953e:	f001 fb43 	bl	800abc8 <SDMMC_CmdAppCommand>
 8009542:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d02d      	beq.n	80095a6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800954a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800954e:	e047      	b.n	80095e0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2100      	movs	r1, #0
 8009556:	4618      	mov	r0, r3
 8009558:	f001 fb36 	bl	800abc8 <SDMMC_CmdAppCommand>
 800955c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d001      	beq.n	8009568 <SD_PowerON+0x98>
    {
      return errorstate;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	e03b      	b.n	80095e0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	491e      	ldr	r1, [pc, #120]	; (80095e8 <SD_PowerON+0x118>)
 800956e:	4618      	mov	r0, r3
 8009570:	f001 fb4c 	bl	800ac0c <SDMMC_CmdAppOperCommand>
 8009574:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d002      	beq.n	8009582 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800957c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009580:	e02e      	b.n	80095e0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	2100      	movs	r1, #0
 8009588:	4618      	mov	r0, r3
 800958a:	f001 f9b2 	bl	800a8f2 <SDIO_GetResponse>
 800958e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	0fdb      	lsrs	r3, r3, #31
 8009594:	2b01      	cmp	r3, #1
 8009596:	d101      	bne.n	800959c <SD_PowerON+0xcc>
 8009598:	2301      	movs	r3, #1
 800959a:	e000      	b.n	800959e <SD_PowerON+0xce>
 800959c:	2300      	movs	r3, #0
 800959e:	613b      	str	r3, [r7, #16]

    count++;
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	3301      	adds	r3, #1
 80095a4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d802      	bhi.n	80095b6 <SD_PowerON+0xe6>
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d0cc      	beq.n	8009550 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80095bc:	4293      	cmp	r3, r2
 80095be:	d902      	bls.n	80095c6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80095c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80095c4:	e00c      	b.n	80095e0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d003      	beq.n	80095d8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2201      	movs	r2, #1
 80095d4:	645a      	str	r2, [r3, #68]	; 0x44
 80095d6:	e002      	b.n	80095de <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80095de:	2300      	movs	r3, #0
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3718      	adds	r7, #24
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}
 80095e8:	c1100000 	.word	0xc1100000

080095ec <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d102      	bne.n	8009602 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80095fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009600:	e018      	b.n	8009634 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800960a:	041b      	lsls	r3, r3, #16
 800960c:	4619      	mov	r1, r3
 800960e:	4610      	mov	r0, r2
 8009610:	f001 fb7d 	bl	800ad0e <SDMMC_CmdSendStatus>
 8009614:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d001      	beq.n	8009620 <SD_SendStatus+0x34>
  {
    return errorstate;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	e009      	b.n	8009634 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2100      	movs	r1, #0
 8009626:	4618      	mov	r0, r3
 8009628:	f001 f963 	bl	800a8f2 <SDIO_GetResponse>
 800962c:	4602      	mov	r2, r0
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009632:	2300      	movs	r3, #0
}
 8009634:	4618      	mov	r0, r3
 8009636:	3710      	adds	r7, #16
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d101      	bne.n	800964e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	e07b      	b.n	8009746 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009652:	2b00      	cmp	r3, #0
 8009654:	d108      	bne.n	8009668 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800965e:	d009      	beq.n	8009674 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2200      	movs	r2, #0
 8009664:	61da      	str	r2, [r3, #28]
 8009666:	e005      	b.n	8009674 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009680:	b2db      	uxtb	r3, r3
 8009682:	2b00      	cmp	r3, #0
 8009684:	d106      	bne.n	8009694 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f7fa fcb4 	bl	8003ffc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2202      	movs	r2, #2
 8009698:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	689b      	ldr	r3, [r3, #8]
 80096b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80096bc:	431a      	orrs	r2, r3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	68db      	ldr	r3, [r3, #12]
 80096c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096c6:	431a      	orrs	r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	f003 0302 	and.w	r3, r3, #2
 80096d0:	431a      	orrs	r2, r3
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	695b      	ldr	r3, [r3, #20]
 80096d6:	f003 0301 	and.w	r3, r3, #1
 80096da:	431a      	orrs	r2, r3
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	699b      	ldr	r3, [r3, #24]
 80096e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80096e4:	431a      	orrs	r2, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	69db      	ldr	r3, [r3, #28]
 80096ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096ee:	431a      	orrs	r2, r3
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6a1b      	ldr	r3, [r3, #32]
 80096f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096f8:	ea42 0103 	orr.w	r1, r2, r3
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009700:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	430a      	orrs	r2, r1
 800970a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	699b      	ldr	r3, [r3, #24]
 8009710:	0c1b      	lsrs	r3, r3, #16
 8009712:	f003 0104 	and.w	r1, r3, #4
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971a:	f003 0210 	and.w	r2, r3, #16
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	430a      	orrs	r2, r1
 8009724:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	69da      	ldr	r2, [r3, #28]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009734:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2201      	movs	r2, #1
 8009740:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	3708      	adds	r7, #8
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800974e:	b580      	push	{r7, lr}
 8009750:	b088      	sub	sp, #32
 8009752:	af00      	add	r7, sp, #0
 8009754:	60f8      	str	r0, [r7, #12]
 8009756:	60b9      	str	r1, [r7, #8]
 8009758:	603b      	str	r3, [r7, #0]
 800975a:	4613      	mov	r3, r2
 800975c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800975e:	2300      	movs	r3, #0
 8009760:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009768:	2b01      	cmp	r3, #1
 800976a:	d101      	bne.n	8009770 <HAL_SPI_Transmit+0x22>
 800976c:	2302      	movs	r3, #2
 800976e:	e126      	b.n	80099be <HAL_SPI_Transmit+0x270>
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2201      	movs	r2, #1
 8009774:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009778:	f7fc fbd6 	bl	8005f28 <HAL_GetTick>
 800977c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800977e:	88fb      	ldrh	r3, [r7, #6]
 8009780:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009788:	b2db      	uxtb	r3, r3
 800978a:	2b01      	cmp	r3, #1
 800978c:	d002      	beq.n	8009794 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800978e:	2302      	movs	r3, #2
 8009790:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009792:	e10b      	b.n	80099ac <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d002      	beq.n	80097a0 <HAL_SPI_Transmit+0x52>
 800979a:	88fb      	ldrh	r3, [r7, #6]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d102      	bne.n	80097a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80097a4:	e102      	b.n	80099ac <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2203      	movs	r2, #3
 80097aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2200      	movs	r2, #0
 80097b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	68ba      	ldr	r2, [r7, #8]
 80097b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	88fa      	ldrh	r2, [r7, #6]
 80097be:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	88fa      	ldrh	r2, [r7, #6]
 80097c4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2200      	movs	r2, #0
 80097ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2200      	movs	r2, #0
 80097d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2200      	movs	r2, #0
 80097d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2200      	movs	r2, #0
 80097dc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2200      	movs	r2, #0
 80097e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097ec:	d10f      	bne.n	800980e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800980c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009818:	2b40      	cmp	r3, #64	; 0x40
 800981a:	d007      	beq.n	800982c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800982a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	68db      	ldr	r3, [r3, #12]
 8009830:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009834:	d14b      	bne.n	80098ce <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d002      	beq.n	8009844 <HAL_SPI_Transmit+0xf6>
 800983e:	8afb      	ldrh	r3, [r7, #22]
 8009840:	2b01      	cmp	r3, #1
 8009842:	d13e      	bne.n	80098c2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009848:	881a      	ldrh	r2, [r3, #0]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009854:	1c9a      	adds	r2, r3, #2
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800985e:	b29b      	uxth	r3, r3
 8009860:	3b01      	subs	r3, #1
 8009862:	b29a      	uxth	r2, r3
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009868:	e02b      	b.n	80098c2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	f003 0302 	and.w	r3, r3, #2
 8009874:	2b02      	cmp	r3, #2
 8009876:	d112      	bne.n	800989e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800987c:	881a      	ldrh	r2, [r3, #0]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009888:	1c9a      	adds	r2, r3, #2
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009892:	b29b      	uxth	r3, r3
 8009894:	3b01      	subs	r3, #1
 8009896:	b29a      	uxth	r2, r3
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	86da      	strh	r2, [r3, #54]	; 0x36
 800989c:	e011      	b.n	80098c2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800989e:	f7fc fb43 	bl	8005f28 <HAL_GetTick>
 80098a2:	4602      	mov	r2, r0
 80098a4:	69bb      	ldr	r3, [r7, #24]
 80098a6:	1ad3      	subs	r3, r2, r3
 80098a8:	683a      	ldr	r2, [r7, #0]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d803      	bhi.n	80098b6 <HAL_SPI_Transmit+0x168>
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098b4:	d102      	bne.n	80098bc <HAL_SPI_Transmit+0x16e>
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d102      	bne.n	80098c2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80098bc:	2303      	movs	r3, #3
 80098be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80098c0:	e074      	b.n	80099ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d1ce      	bne.n	800986a <HAL_SPI_Transmit+0x11c>
 80098cc:	e04c      	b.n	8009968 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d002      	beq.n	80098dc <HAL_SPI_Transmit+0x18e>
 80098d6:	8afb      	ldrh	r3, [r7, #22]
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d140      	bne.n	800995e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	330c      	adds	r3, #12
 80098e6:	7812      	ldrb	r2, [r2, #0]
 80098e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ee:	1c5a      	adds	r2, r3, #1
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	3b01      	subs	r3, #1
 80098fc:	b29a      	uxth	r2, r3
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009902:	e02c      	b.n	800995e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	f003 0302 	and.w	r3, r3, #2
 800990e:	2b02      	cmp	r3, #2
 8009910:	d113      	bne.n	800993a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	330c      	adds	r3, #12
 800991c:	7812      	ldrb	r2, [r2, #0]
 800991e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009924:	1c5a      	adds	r2, r3, #1
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800992e:	b29b      	uxth	r3, r3
 8009930:	3b01      	subs	r3, #1
 8009932:	b29a      	uxth	r2, r3
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	86da      	strh	r2, [r3, #54]	; 0x36
 8009938:	e011      	b.n	800995e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800993a:	f7fc faf5 	bl	8005f28 <HAL_GetTick>
 800993e:	4602      	mov	r2, r0
 8009940:	69bb      	ldr	r3, [r7, #24]
 8009942:	1ad3      	subs	r3, r2, r3
 8009944:	683a      	ldr	r2, [r7, #0]
 8009946:	429a      	cmp	r2, r3
 8009948:	d803      	bhi.n	8009952 <HAL_SPI_Transmit+0x204>
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009950:	d102      	bne.n	8009958 <HAL_SPI_Transmit+0x20a>
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d102      	bne.n	800995e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009958:	2303      	movs	r3, #3
 800995a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800995c:	e026      	b.n	80099ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009962:	b29b      	uxth	r3, r3
 8009964:	2b00      	cmp	r3, #0
 8009966:	d1cd      	bne.n	8009904 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009968:	69ba      	ldr	r2, [r7, #24]
 800996a:	6839      	ldr	r1, [r7, #0]
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f000 fbcb 	bl	800a108 <SPI_EndRxTxTransaction>
 8009972:	4603      	mov	r3, r0
 8009974:	2b00      	cmp	r3, #0
 8009976:	d002      	beq.n	800997e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2220      	movs	r2, #32
 800997c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	689b      	ldr	r3, [r3, #8]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d10a      	bne.n	800999c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009986:	2300      	movs	r3, #0
 8009988:	613b      	str	r3, [r7, #16]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	68db      	ldr	r3, [r3, #12]
 8009990:	613b      	str	r3, [r7, #16]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	613b      	str	r3, [r7, #16]
 800999a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d002      	beq.n	80099aa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80099a4:	2301      	movs	r3, #1
 80099a6:	77fb      	strb	r3, [r7, #31]
 80099a8:	e000      	b.n	80099ac <HAL_SPI_Transmit+0x25e>
  }

error:
 80099aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2201      	movs	r2, #1
 80099b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80099bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3720      	adds	r7, #32
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}

080099c6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099c6:	b580      	push	{r7, lr}
 80099c8:	b088      	sub	sp, #32
 80099ca:	af02      	add	r7, sp, #8
 80099cc:	60f8      	str	r0, [r7, #12]
 80099ce:	60b9      	str	r1, [r7, #8]
 80099d0:	603b      	str	r3, [r7, #0]
 80099d2:	4613      	mov	r3, r2
 80099d4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80099d6:	2300      	movs	r3, #0
 80099d8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099e2:	d112      	bne.n	8009a0a <HAL_SPI_Receive+0x44>
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d10e      	bne.n	8009a0a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2204      	movs	r2, #4
 80099f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80099f4:	88fa      	ldrh	r2, [r7, #6]
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	9300      	str	r3, [sp, #0]
 80099fa:	4613      	mov	r3, r2
 80099fc:	68ba      	ldr	r2, [r7, #8]
 80099fe:	68b9      	ldr	r1, [r7, #8]
 8009a00:	68f8      	ldr	r0, [r7, #12]
 8009a02:	f000 f8f1 	bl	8009be8 <HAL_SPI_TransmitReceive>
 8009a06:	4603      	mov	r3, r0
 8009a08:	e0ea      	b.n	8009be0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d101      	bne.n	8009a18 <HAL_SPI_Receive+0x52>
 8009a14:	2302      	movs	r3, #2
 8009a16:	e0e3      	b.n	8009be0 <HAL_SPI_Receive+0x21a>
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009a20:	f7fc fa82 	bl	8005f28 <HAL_GetTick>
 8009a24:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	d002      	beq.n	8009a38 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009a32:	2302      	movs	r3, #2
 8009a34:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009a36:	e0ca      	b.n	8009bce <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d002      	beq.n	8009a44 <HAL_SPI_Receive+0x7e>
 8009a3e:	88fb      	ldrh	r3, [r7, #6]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d102      	bne.n	8009a4a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009a48:	e0c1      	b.n	8009bce <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2204      	movs	r2, #4
 8009a4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2200      	movs	r2, #0
 8009a56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	68ba      	ldr	r2, [r7, #8]
 8009a5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	88fa      	ldrh	r2, [r7, #6]
 8009a62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	88fa      	ldrh	r2, [r7, #6]
 8009a68:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2200      	movs	r2, #0
 8009a86:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	689b      	ldr	r3, [r3, #8]
 8009a8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a90:	d10f      	bne.n	8009ab2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009aa0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009ab0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009abc:	2b40      	cmp	r3, #64	; 0x40
 8009abe:	d007      	beq.n	8009ad0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ace:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d162      	bne.n	8009b9e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009ad8:	e02e      	b.n	8009b38 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	f003 0301 	and.w	r3, r3, #1
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d115      	bne.n	8009b14 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f103 020c 	add.w	r2, r3, #12
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009af4:	7812      	ldrb	r2, [r2, #0]
 8009af6:	b2d2      	uxtb	r2, r2
 8009af8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009afe:	1c5a      	adds	r2, r3, #1
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	3b01      	subs	r3, #1
 8009b0c:	b29a      	uxth	r2, r3
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009b12:	e011      	b.n	8009b38 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b14:	f7fc fa08 	bl	8005f28 <HAL_GetTick>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	1ad3      	subs	r3, r2, r3
 8009b1e:	683a      	ldr	r2, [r7, #0]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d803      	bhi.n	8009b2c <HAL_SPI_Receive+0x166>
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b2a:	d102      	bne.n	8009b32 <HAL_SPI_Receive+0x16c>
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d102      	bne.n	8009b38 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009b32:	2303      	movs	r3, #3
 8009b34:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009b36:	e04a      	b.n	8009bce <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d1cb      	bne.n	8009ada <HAL_SPI_Receive+0x114>
 8009b42:	e031      	b.n	8009ba8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	689b      	ldr	r3, [r3, #8]
 8009b4a:	f003 0301 	and.w	r3, r3, #1
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d113      	bne.n	8009b7a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	68da      	ldr	r2, [r3, #12]
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b5c:	b292      	uxth	r2, r2
 8009b5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b64:	1c9a      	adds	r2, r3, #2
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	3b01      	subs	r3, #1
 8009b72:	b29a      	uxth	r2, r3
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009b78:	e011      	b.n	8009b9e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b7a:	f7fc f9d5 	bl	8005f28 <HAL_GetTick>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	1ad3      	subs	r3, r2, r3
 8009b84:	683a      	ldr	r2, [r7, #0]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d803      	bhi.n	8009b92 <HAL_SPI_Receive+0x1cc>
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b90:	d102      	bne.n	8009b98 <HAL_SPI_Receive+0x1d2>
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d102      	bne.n	8009b9e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009b98:	2303      	movs	r3, #3
 8009b9a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009b9c:	e017      	b.n	8009bce <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d1cd      	bne.n	8009b44 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009ba8:	693a      	ldr	r2, [r7, #16]
 8009baa:	6839      	ldr	r1, [r7, #0]
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f000 fa45 	bl	800a03c <SPI_EndRxTransaction>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d002      	beq.n	8009bbe <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2220      	movs	r2, #32
 8009bbc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d002      	beq.n	8009bcc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	75fb      	strb	r3, [r7, #23]
 8009bca:	e000      	b.n	8009bce <HAL_SPI_Receive+0x208>
  }

error :
 8009bcc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3718      	adds	r7, #24
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b08c      	sub	sp, #48	; 0x30
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	607a      	str	r2, [r7, #4]
 8009bf4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d101      	bne.n	8009c0e <HAL_SPI_TransmitReceive+0x26>
 8009c0a:	2302      	movs	r3, #2
 8009c0c:	e18a      	b.n	8009f24 <HAL_SPI_TransmitReceive+0x33c>
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2201      	movs	r2, #1
 8009c12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c16:	f7fc f987 	bl	8005f28 <HAL_GetTick>
 8009c1a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009c2c:	887b      	ldrh	r3, [r7, #2]
 8009c2e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009c30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d00f      	beq.n	8009c58 <HAL_SPI_TransmitReceive+0x70>
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c3e:	d107      	bne.n	8009c50 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d103      	bne.n	8009c50 <HAL_SPI_TransmitReceive+0x68>
 8009c48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c4c:	2b04      	cmp	r3, #4
 8009c4e:	d003      	beq.n	8009c58 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009c50:	2302      	movs	r3, #2
 8009c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009c56:	e15b      	b.n	8009f10 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d005      	beq.n	8009c6a <HAL_SPI_TransmitReceive+0x82>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d002      	beq.n	8009c6a <HAL_SPI_TransmitReceive+0x82>
 8009c64:	887b      	ldrh	r3, [r7, #2]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d103      	bne.n	8009c72 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009c70:	e14e      	b.n	8009f10 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	2b04      	cmp	r3, #4
 8009c7c:	d003      	beq.n	8009c86 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2205      	movs	r2, #5
 8009c82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	887a      	ldrh	r2, [r7, #2]
 8009c96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	887a      	ldrh	r2, [r7, #2]
 8009c9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	68ba      	ldr	r2, [r7, #8]
 8009ca2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	887a      	ldrh	r2, [r7, #2]
 8009ca8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	887a      	ldrh	r2, [r7, #2]
 8009cae:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cc6:	2b40      	cmp	r3, #64	; 0x40
 8009cc8:	d007      	beq.n	8009cda <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009cd8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ce2:	d178      	bne.n	8009dd6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d002      	beq.n	8009cf2 <HAL_SPI_TransmitReceive+0x10a>
 8009cec:	8b7b      	ldrh	r3, [r7, #26]
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d166      	bne.n	8009dc0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cf6:	881a      	ldrh	r2, [r3, #0]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d02:	1c9a      	adds	r2, r3, #2
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	3b01      	subs	r3, #1
 8009d10:	b29a      	uxth	r2, r3
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d16:	e053      	b.n	8009dc0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	f003 0302 	and.w	r3, r3, #2
 8009d22:	2b02      	cmp	r3, #2
 8009d24:	d11b      	bne.n	8009d5e <HAL_SPI_TransmitReceive+0x176>
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d016      	beq.n	8009d5e <HAL_SPI_TransmitReceive+0x176>
 8009d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d113      	bne.n	8009d5e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d3a:	881a      	ldrh	r2, [r3, #0]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d46:	1c9a      	adds	r2, r3, #2
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	3b01      	subs	r3, #1
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	f003 0301 	and.w	r3, r3, #1
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d119      	bne.n	8009da0 <HAL_SPI_TransmitReceive+0x1b8>
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d014      	beq.n	8009da0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	68da      	ldr	r2, [r3, #12]
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d80:	b292      	uxth	r2, r2
 8009d82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d88:	1c9a      	adds	r2, r3, #2
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	3b01      	subs	r3, #1
 8009d96:	b29a      	uxth	r2, r3
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009da0:	f7fc f8c2 	bl	8005f28 <HAL_GetTick>
 8009da4:	4602      	mov	r2, r0
 8009da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da8:	1ad3      	subs	r3, r2, r3
 8009daa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d807      	bhi.n	8009dc0 <HAL_SPI_TransmitReceive+0x1d8>
 8009db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db6:	d003      	beq.n	8009dc0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009db8:	2303      	movs	r3, #3
 8009dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009dbe:	e0a7      	b.n	8009f10 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d1a6      	bne.n	8009d18 <HAL_SPI_TransmitReceive+0x130>
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d1a1      	bne.n	8009d18 <HAL_SPI_TransmitReceive+0x130>
 8009dd4:	e07c      	b.n	8009ed0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d002      	beq.n	8009de4 <HAL_SPI_TransmitReceive+0x1fc>
 8009dde:	8b7b      	ldrh	r3, [r7, #26]
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d16b      	bne.n	8009ebc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	330c      	adds	r3, #12
 8009dee:	7812      	ldrb	r2, [r2, #0]
 8009df0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009df6:	1c5a      	adds	r2, r3, #1
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e00:	b29b      	uxth	r3, r3
 8009e02:	3b01      	subs	r3, #1
 8009e04:	b29a      	uxth	r2, r3
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e0a:	e057      	b.n	8009ebc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	689b      	ldr	r3, [r3, #8]
 8009e12:	f003 0302 	and.w	r3, r3, #2
 8009e16:	2b02      	cmp	r3, #2
 8009e18:	d11c      	bne.n	8009e54 <HAL_SPI_TransmitReceive+0x26c>
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d017      	beq.n	8009e54 <HAL_SPI_TransmitReceive+0x26c>
 8009e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d114      	bne.n	8009e54 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	330c      	adds	r3, #12
 8009e34:	7812      	ldrb	r2, [r2, #0]
 8009e36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e3c:	1c5a      	adds	r2, r3, #1
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	3b01      	subs	r3, #1
 8009e4a:	b29a      	uxth	r2, r3
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009e50:	2300      	movs	r3, #0
 8009e52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	689b      	ldr	r3, [r3, #8]
 8009e5a:	f003 0301 	and.w	r3, r3, #1
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d119      	bne.n	8009e96 <HAL_SPI_TransmitReceive+0x2ae>
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d014      	beq.n	8009e96 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	68da      	ldr	r2, [r3, #12]
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e76:	b2d2      	uxtb	r2, r2
 8009e78:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e7e:	1c5a      	adds	r2, r3, #1
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	b29a      	uxth	r2, r3
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009e92:	2301      	movs	r3, #1
 8009e94:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009e96:	f7fc f847 	bl	8005f28 <HAL_GetTick>
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9e:	1ad3      	subs	r3, r2, r3
 8009ea0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d803      	bhi.n	8009eae <HAL_SPI_TransmitReceive+0x2c6>
 8009ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eac:	d102      	bne.n	8009eb4 <HAL_SPI_TransmitReceive+0x2cc>
 8009eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d103      	bne.n	8009ebc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009eb4:	2303      	movs	r3, #3
 8009eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009eba:	e029      	b.n	8009f10 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ec0:	b29b      	uxth	r3, r3
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d1a2      	bne.n	8009e0c <HAL_SPI_TransmitReceive+0x224>
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d19d      	bne.n	8009e0c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ed2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ed4:	68f8      	ldr	r0, [r7, #12]
 8009ed6:	f000 f917 	bl	800a108 <SPI_EndRxTxTransaction>
 8009eda:	4603      	mov	r3, r0
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d006      	beq.n	8009eee <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2220      	movs	r2, #32
 8009eea:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009eec:	e010      	b.n	8009f10 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d10b      	bne.n	8009f0e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	617b      	str	r3, [r7, #20]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	617b      	str	r3, [r7, #20]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	617b      	str	r3, [r7, #20]
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	e000      	b.n	8009f10 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009f0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2201      	movs	r2, #1
 8009f14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009f20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3730      	adds	r7, #48	; 0x30
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}

08009f2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b088      	sub	sp, #32
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	60f8      	str	r0, [r7, #12]
 8009f34:	60b9      	str	r1, [r7, #8]
 8009f36:	603b      	str	r3, [r7, #0]
 8009f38:	4613      	mov	r3, r2
 8009f3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009f3c:	f7fb fff4 	bl	8005f28 <HAL_GetTick>
 8009f40:	4602      	mov	r2, r0
 8009f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f44:	1a9b      	subs	r3, r3, r2
 8009f46:	683a      	ldr	r2, [r7, #0]
 8009f48:	4413      	add	r3, r2
 8009f4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009f4c:	f7fb ffec 	bl	8005f28 <HAL_GetTick>
 8009f50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009f52:	4b39      	ldr	r3, [pc, #228]	; (800a038 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	015b      	lsls	r3, r3, #5
 8009f58:	0d1b      	lsrs	r3, r3, #20
 8009f5a:	69fa      	ldr	r2, [r7, #28]
 8009f5c:	fb02 f303 	mul.w	r3, r2, r3
 8009f60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009f62:	e054      	b.n	800a00e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f6a:	d050      	beq.n	800a00e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009f6c:	f7fb ffdc 	bl	8005f28 <HAL_GetTick>
 8009f70:	4602      	mov	r2, r0
 8009f72:	69bb      	ldr	r3, [r7, #24]
 8009f74:	1ad3      	subs	r3, r2, r3
 8009f76:	69fa      	ldr	r2, [r7, #28]
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d902      	bls.n	8009f82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009f7c:	69fb      	ldr	r3, [r7, #28]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d13d      	bne.n	8009ffe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	685a      	ldr	r2, [r3, #4]
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009f90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f9a:	d111      	bne.n	8009fc0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	689b      	ldr	r3, [r3, #8]
 8009fa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fa4:	d004      	beq.n	8009fb0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	689b      	ldr	r3, [r3, #8]
 8009faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fae:	d107      	bne.n	8009fc0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	681a      	ldr	r2, [r3, #0]
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009fbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fc8:	d10f      	bne.n	8009fea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	681a      	ldr	r2, [r3, #0]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009fd8:	601a      	str	r2, [r3, #0]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009fe8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2201      	movs	r2, #1
 8009fee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009ffa:	2303      	movs	r3, #3
 8009ffc:	e017      	b.n	800a02e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d101      	bne.n	800a008 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a004:	2300      	movs	r3, #0
 800a006:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	3b01      	subs	r3, #1
 800a00c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	689a      	ldr	r2, [r3, #8]
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	4013      	ands	r3, r2
 800a018:	68ba      	ldr	r2, [r7, #8]
 800a01a:	429a      	cmp	r2, r3
 800a01c:	bf0c      	ite	eq
 800a01e:	2301      	moveq	r3, #1
 800a020:	2300      	movne	r3, #0
 800a022:	b2db      	uxtb	r3, r3
 800a024:	461a      	mov	r2, r3
 800a026:	79fb      	ldrb	r3, [r7, #7]
 800a028:	429a      	cmp	r2, r3
 800a02a:	d19b      	bne.n	8009f64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3720      	adds	r7, #32
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	20000004 	.word	0x20000004

0800a03c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b086      	sub	sp, #24
 800a040:	af02      	add	r7, sp, #8
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	60b9      	str	r1, [r7, #8]
 800a046:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a050:	d111      	bne.n	800a076 <SPI_EndRxTransaction+0x3a>
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a05a:	d004      	beq.n	800a066 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a064:	d107      	bne.n	800a076 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a074:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a07e:	d12a      	bne.n	800a0d6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a088:	d012      	beq.n	800a0b0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	9300      	str	r3, [sp, #0]
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	2200      	movs	r2, #0
 800a092:	2180      	movs	r1, #128	; 0x80
 800a094:	68f8      	ldr	r0, [r7, #12]
 800a096:	f7ff ff49 	bl	8009f2c <SPI_WaitFlagStateUntilTimeout>
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d02d      	beq.n	800a0fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0a4:	f043 0220 	orr.w	r2, r3, #32
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a0ac:	2303      	movs	r3, #3
 800a0ae:	e026      	b.n	800a0fe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	9300      	str	r3, [sp, #0]
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	2101      	movs	r1, #1
 800a0ba:	68f8      	ldr	r0, [r7, #12]
 800a0bc:	f7ff ff36 	bl	8009f2c <SPI_WaitFlagStateUntilTimeout>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d01a      	beq.n	800a0fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0ca:	f043 0220 	orr.w	r2, r3, #32
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a0d2:	2303      	movs	r3, #3
 800a0d4:	e013      	b.n	800a0fe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	9300      	str	r3, [sp, #0]
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	2101      	movs	r1, #1
 800a0e0:	68f8      	ldr	r0, [r7, #12]
 800a0e2:	f7ff ff23 	bl	8009f2c <SPI_WaitFlagStateUntilTimeout>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d007      	beq.n	800a0fc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0f0:	f043 0220 	orr.w	r2, r3, #32
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a0f8:	2303      	movs	r3, #3
 800a0fa:	e000      	b.n	800a0fe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a0fc:	2300      	movs	r3, #0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3710      	adds	r7, #16
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
	...

0800a108 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b088      	sub	sp, #32
 800a10c:	af02      	add	r7, sp, #8
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a114:	4b1b      	ldr	r3, [pc, #108]	; (800a184 <SPI_EndRxTxTransaction+0x7c>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a1b      	ldr	r2, [pc, #108]	; (800a188 <SPI_EndRxTxTransaction+0x80>)
 800a11a:	fba2 2303 	umull	r2, r3, r2, r3
 800a11e:	0d5b      	lsrs	r3, r3, #21
 800a120:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a124:	fb02 f303 	mul.w	r3, r2, r3
 800a128:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a132:	d112      	bne.n	800a15a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	9300      	str	r3, [sp, #0]
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	2200      	movs	r2, #0
 800a13c:	2180      	movs	r1, #128	; 0x80
 800a13e:	68f8      	ldr	r0, [r7, #12]
 800a140:	f7ff fef4 	bl	8009f2c <SPI_WaitFlagStateUntilTimeout>
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d016      	beq.n	800a178 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a14e:	f043 0220 	orr.w	r2, r3, #32
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a156:	2303      	movs	r3, #3
 800a158:	e00f      	b.n	800a17a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d00a      	beq.n	800a176 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	3b01      	subs	r3, #1
 800a164:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a170:	2b80      	cmp	r3, #128	; 0x80
 800a172:	d0f2      	beq.n	800a15a <SPI_EndRxTxTransaction+0x52>
 800a174:	e000      	b.n	800a178 <SPI_EndRxTxTransaction+0x70>
        break;
 800a176:	bf00      	nop
  }

  return HAL_OK;
 800a178:	2300      	movs	r3, #0
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3718      	adds	r7, #24
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	20000004 	.word	0x20000004
 800a188:	165e9f81 	.word	0x165e9f81

0800a18c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d101      	bne.n	800a19e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a19a:	2301      	movs	r3, #1
 800a19c:	e03f      	b.n	800a21e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1a4:	b2db      	uxtb	r3, r3
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d106      	bne.n	800a1b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f7fa f840 	bl	8004238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2224      	movs	r2, #36	; 0x24
 800a1bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	68da      	ldr	r2, [r3, #12]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a1ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 f929 	bl	800a428 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	691a      	ldr	r2, [r3, #16]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a1e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	695a      	ldr	r2, [r3, #20]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a1f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	68da      	ldr	r2, [r3, #12]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a204:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2200      	movs	r2, #0
 800a20a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2220      	movs	r2, #32
 800a210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2220      	movs	r2, #32
 800a218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a21c:	2300      	movs	r3, #0
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3708      	adds	r7, #8
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b08a      	sub	sp, #40	; 0x28
 800a22a:	af02      	add	r7, sp, #8
 800a22c:	60f8      	str	r0, [r7, #12]
 800a22e:	60b9      	str	r1, [r7, #8]
 800a230:	603b      	str	r3, [r7, #0]
 800a232:	4613      	mov	r3, r2
 800a234:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a236:	2300      	movs	r3, #0
 800a238:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a240:	b2db      	uxtb	r3, r3
 800a242:	2b20      	cmp	r3, #32
 800a244:	d17c      	bne.n	800a340 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d002      	beq.n	800a252 <HAL_UART_Transmit+0x2c>
 800a24c:	88fb      	ldrh	r3, [r7, #6]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d101      	bne.n	800a256 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a252:	2301      	movs	r3, #1
 800a254:	e075      	b.n	800a342 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d101      	bne.n	800a264 <HAL_UART_Transmit+0x3e>
 800a260:	2302      	movs	r3, #2
 800a262:	e06e      	b.n	800a342 <HAL_UART_Transmit+0x11c>
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2201      	movs	r2, #1
 800a268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2200      	movs	r2, #0
 800a270:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2221      	movs	r2, #33	; 0x21
 800a276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a27a:	f7fb fe55 	bl	8005f28 <HAL_GetTick>
 800a27e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	88fa      	ldrh	r2, [r7, #6]
 800a284:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	88fa      	ldrh	r2, [r7, #6]
 800a28a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	689b      	ldr	r3, [r3, #8]
 800a290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a294:	d108      	bne.n	800a2a8 <HAL_UART_Transmit+0x82>
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	691b      	ldr	r3, [r3, #16]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d104      	bne.n	800a2a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	61bb      	str	r3, [r7, #24]
 800a2a6:	e003      	b.n	800a2b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a2b8:	e02a      	b.n	800a310 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	9300      	str	r3, [sp, #0]
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	2180      	movs	r1, #128	; 0x80
 800a2c4:	68f8      	ldr	r0, [r7, #12]
 800a2c6:	f000 f840 	bl	800a34a <UART_WaitOnFlagUntilTimeout>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d001      	beq.n	800a2d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a2d0:	2303      	movs	r3, #3
 800a2d2:	e036      	b.n	800a342 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a2d4:	69fb      	ldr	r3, [r7, #28]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d10b      	bne.n	800a2f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a2da:	69bb      	ldr	r3, [r7, #24]
 800a2dc:	881b      	ldrh	r3, [r3, #0]
 800a2de:	461a      	mov	r2, r3
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a2ea:	69bb      	ldr	r3, [r7, #24]
 800a2ec:	3302      	adds	r3, #2
 800a2ee:	61bb      	str	r3, [r7, #24]
 800a2f0:	e007      	b.n	800a302 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a2f2:	69fb      	ldr	r3, [r7, #28]
 800a2f4:	781a      	ldrb	r2, [r3, #0]
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	3301      	adds	r3, #1
 800a300:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a306:	b29b      	uxth	r3, r3
 800a308:	3b01      	subs	r3, #1
 800a30a:	b29a      	uxth	r2, r3
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a314:	b29b      	uxth	r3, r3
 800a316:	2b00      	cmp	r3, #0
 800a318:	d1cf      	bne.n	800a2ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	9300      	str	r3, [sp, #0]
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	2200      	movs	r2, #0
 800a322:	2140      	movs	r1, #64	; 0x40
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f000 f810 	bl	800a34a <UART_WaitOnFlagUntilTimeout>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d001      	beq.n	800a334 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a330:	2303      	movs	r3, #3
 800a332:	e006      	b.n	800a342 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2220      	movs	r2, #32
 800a338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a33c:	2300      	movs	r3, #0
 800a33e:	e000      	b.n	800a342 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a340:	2302      	movs	r3, #2
  }
}
 800a342:	4618      	mov	r0, r3
 800a344:	3720      	adds	r7, #32
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}

0800a34a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a34a:	b580      	push	{r7, lr}
 800a34c:	b090      	sub	sp, #64	; 0x40
 800a34e:	af00      	add	r7, sp, #0
 800a350:	60f8      	str	r0, [r7, #12]
 800a352:	60b9      	str	r1, [r7, #8]
 800a354:	603b      	str	r3, [r7, #0]
 800a356:	4613      	mov	r3, r2
 800a358:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a35a:	e050      	b.n	800a3fe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a35c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a35e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a362:	d04c      	beq.n	800a3fe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a366:	2b00      	cmp	r3, #0
 800a368:	d007      	beq.n	800a37a <UART_WaitOnFlagUntilTimeout+0x30>
 800a36a:	f7fb fddd 	bl	8005f28 <HAL_GetTick>
 800a36e:	4602      	mov	r2, r0
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	1ad3      	subs	r3, r2, r3
 800a374:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a376:	429a      	cmp	r2, r3
 800a378:	d241      	bcs.n	800a3fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	330c      	adds	r3, #12
 800a380:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a384:	e853 3f00 	ldrex	r3, [r3]
 800a388:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a390:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	330c      	adds	r3, #12
 800a398:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a39a:	637a      	str	r2, [r7, #52]	; 0x34
 800a39c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a39e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a3a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3a2:	e841 2300 	strex	r3, r2, [r1]
 800a3a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d1e5      	bne.n	800a37a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	3314      	adds	r3, #20
 800a3b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	e853 3f00 	ldrex	r3, [r3]
 800a3bc:	613b      	str	r3, [r7, #16]
   return(result);
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	f023 0301 	bic.w	r3, r3, #1
 800a3c4:	63bb      	str	r3, [r7, #56]	; 0x38
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	3314      	adds	r3, #20
 800a3cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3ce:	623a      	str	r2, [r7, #32]
 800a3d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3d2:	69f9      	ldr	r1, [r7, #28]
 800a3d4:	6a3a      	ldr	r2, [r7, #32]
 800a3d6:	e841 2300 	strex	r3, r2, [r1]
 800a3da:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3dc:	69bb      	ldr	r3, [r7, #24]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d1e5      	bne.n	800a3ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2220      	movs	r2, #32
 800a3e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2220      	movs	r2, #32
 800a3ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a3fa:	2303      	movs	r3, #3
 800a3fc:	e00f      	b.n	800a41e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	4013      	ands	r3, r2
 800a408:	68ba      	ldr	r2, [r7, #8]
 800a40a:	429a      	cmp	r2, r3
 800a40c:	bf0c      	ite	eq
 800a40e:	2301      	moveq	r3, #1
 800a410:	2300      	movne	r3, #0
 800a412:	b2db      	uxtb	r3, r3
 800a414:	461a      	mov	r2, r3
 800a416:	79fb      	ldrb	r3, [r7, #7]
 800a418:	429a      	cmp	r2, r3
 800a41a:	d09f      	beq.n	800a35c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a41c:	2300      	movs	r3, #0
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3740      	adds	r7, #64	; 0x40
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
	...

0800a428 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a42c:	b09f      	sub	sp, #124	; 0x7c
 800a42e:	af00      	add	r7, sp, #0
 800a430:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a43c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a43e:	68d9      	ldr	r1, [r3, #12]
 800a440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	ea40 0301 	orr.w	r3, r0, r1
 800a448:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a44a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a44c:	689a      	ldr	r2, [r3, #8]
 800a44e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a450:	691b      	ldr	r3, [r3, #16]
 800a452:	431a      	orrs	r2, r3
 800a454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a456:	695b      	ldr	r3, [r3, #20]
 800a458:	431a      	orrs	r2, r3
 800a45a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a45c:	69db      	ldr	r3, [r3, #28]
 800a45e:	4313      	orrs	r3, r2
 800a460:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a46c:	f021 010c 	bic.w	r1, r1, #12
 800a470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a476:	430b      	orrs	r3, r1
 800a478:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a47a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	695b      	ldr	r3, [r3, #20]
 800a480:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a486:	6999      	ldr	r1, [r3, #24]
 800a488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	ea40 0301 	orr.w	r3, r0, r1
 800a490:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	4bc5      	ldr	r3, [pc, #788]	; (800a7ac <UART_SetConfig+0x384>)
 800a498:	429a      	cmp	r2, r3
 800a49a:	d004      	beq.n	800a4a6 <UART_SetConfig+0x7e>
 800a49c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a49e:	681a      	ldr	r2, [r3, #0]
 800a4a0:	4bc3      	ldr	r3, [pc, #780]	; (800a7b0 <UART_SetConfig+0x388>)
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d103      	bne.n	800a4ae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a4a6:	f7fe f931 	bl	800870c <HAL_RCC_GetPCLK2Freq>
 800a4aa:	6778      	str	r0, [r7, #116]	; 0x74
 800a4ac:	e002      	b.n	800a4b4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a4ae:	f7fe f919 	bl	80086e4 <HAL_RCC_GetPCLK1Freq>
 800a4b2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a4b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4b6:	69db      	ldr	r3, [r3, #28]
 800a4b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4bc:	f040 80b6 	bne.w	800a62c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a4c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4c2:	461c      	mov	r4, r3
 800a4c4:	f04f 0500 	mov.w	r5, #0
 800a4c8:	4622      	mov	r2, r4
 800a4ca:	462b      	mov	r3, r5
 800a4cc:	1891      	adds	r1, r2, r2
 800a4ce:	6439      	str	r1, [r7, #64]	; 0x40
 800a4d0:	415b      	adcs	r3, r3
 800a4d2:	647b      	str	r3, [r7, #68]	; 0x44
 800a4d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a4d8:	1912      	adds	r2, r2, r4
 800a4da:	eb45 0303 	adc.w	r3, r5, r3
 800a4de:	f04f 0000 	mov.w	r0, #0
 800a4e2:	f04f 0100 	mov.w	r1, #0
 800a4e6:	00d9      	lsls	r1, r3, #3
 800a4e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a4ec:	00d0      	lsls	r0, r2, #3
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	1911      	adds	r1, r2, r4
 800a4f4:	6639      	str	r1, [r7, #96]	; 0x60
 800a4f6:	416b      	adcs	r3, r5
 800a4f8:	667b      	str	r3, [r7, #100]	; 0x64
 800a4fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	461a      	mov	r2, r3
 800a500:	f04f 0300 	mov.w	r3, #0
 800a504:	1891      	adds	r1, r2, r2
 800a506:	63b9      	str	r1, [r7, #56]	; 0x38
 800a508:	415b      	adcs	r3, r3
 800a50a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a50c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a510:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a514:	f7f6 fbc0 	bl	8000c98 <__aeabi_uldivmod>
 800a518:	4602      	mov	r2, r0
 800a51a:	460b      	mov	r3, r1
 800a51c:	4ba5      	ldr	r3, [pc, #660]	; (800a7b4 <UART_SetConfig+0x38c>)
 800a51e:	fba3 2302 	umull	r2, r3, r3, r2
 800a522:	095b      	lsrs	r3, r3, #5
 800a524:	011e      	lsls	r6, r3, #4
 800a526:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a528:	461c      	mov	r4, r3
 800a52a:	f04f 0500 	mov.w	r5, #0
 800a52e:	4622      	mov	r2, r4
 800a530:	462b      	mov	r3, r5
 800a532:	1891      	adds	r1, r2, r2
 800a534:	6339      	str	r1, [r7, #48]	; 0x30
 800a536:	415b      	adcs	r3, r3
 800a538:	637b      	str	r3, [r7, #52]	; 0x34
 800a53a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a53e:	1912      	adds	r2, r2, r4
 800a540:	eb45 0303 	adc.w	r3, r5, r3
 800a544:	f04f 0000 	mov.w	r0, #0
 800a548:	f04f 0100 	mov.w	r1, #0
 800a54c:	00d9      	lsls	r1, r3, #3
 800a54e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a552:	00d0      	lsls	r0, r2, #3
 800a554:	4602      	mov	r2, r0
 800a556:	460b      	mov	r3, r1
 800a558:	1911      	adds	r1, r2, r4
 800a55a:	65b9      	str	r1, [r7, #88]	; 0x58
 800a55c:	416b      	adcs	r3, r5
 800a55e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	461a      	mov	r2, r3
 800a566:	f04f 0300 	mov.w	r3, #0
 800a56a:	1891      	adds	r1, r2, r2
 800a56c:	62b9      	str	r1, [r7, #40]	; 0x28
 800a56e:	415b      	adcs	r3, r3
 800a570:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a572:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a576:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a57a:	f7f6 fb8d 	bl	8000c98 <__aeabi_uldivmod>
 800a57e:	4602      	mov	r2, r0
 800a580:	460b      	mov	r3, r1
 800a582:	4b8c      	ldr	r3, [pc, #560]	; (800a7b4 <UART_SetConfig+0x38c>)
 800a584:	fba3 1302 	umull	r1, r3, r3, r2
 800a588:	095b      	lsrs	r3, r3, #5
 800a58a:	2164      	movs	r1, #100	; 0x64
 800a58c:	fb01 f303 	mul.w	r3, r1, r3
 800a590:	1ad3      	subs	r3, r2, r3
 800a592:	00db      	lsls	r3, r3, #3
 800a594:	3332      	adds	r3, #50	; 0x32
 800a596:	4a87      	ldr	r2, [pc, #540]	; (800a7b4 <UART_SetConfig+0x38c>)
 800a598:	fba2 2303 	umull	r2, r3, r2, r3
 800a59c:	095b      	lsrs	r3, r3, #5
 800a59e:	005b      	lsls	r3, r3, #1
 800a5a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a5a4:	441e      	add	r6, r3
 800a5a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f04f 0100 	mov.w	r1, #0
 800a5ae:	4602      	mov	r2, r0
 800a5b0:	460b      	mov	r3, r1
 800a5b2:	1894      	adds	r4, r2, r2
 800a5b4:	623c      	str	r4, [r7, #32]
 800a5b6:	415b      	adcs	r3, r3
 800a5b8:	627b      	str	r3, [r7, #36]	; 0x24
 800a5ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a5be:	1812      	adds	r2, r2, r0
 800a5c0:	eb41 0303 	adc.w	r3, r1, r3
 800a5c4:	f04f 0400 	mov.w	r4, #0
 800a5c8:	f04f 0500 	mov.w	r5, #0
 800a5cc:	00dd      	lsls	r5, r3, #3
 800a5ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a5d2:	00d4      	lsls	r4, r2, #3
 800a5d4:	4622      	mov	r2, r4
 800a5d6:	462b      	mov	r3, r5
 800a5d8:	1814      	adds	r4, r2, r0
 800a5da:	653c      	str	r4, [r7, #80]	; 0x50
 800a5dc:	414b      	adcs	r3, r1
 800a5de:	657b      	str	r3, [r7, #84]	; 0x54
 800a5e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	461a      	mov	r2, r3
 800a5e6:	f04f 0300 	mov.w	r3, #0
 800a5ea:	1891      	adds	r1, r2, r2
 800a5ec:	61b9      	str	r1, [r7, #24]
 800a5ee:	415b      	adcs	r3, r3
 800a5f0:	61fb      	str	r3, [r7, #28]
 800a5f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a5f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a5fa:	f7f6 fb4d 	bl	8000c98 <__aeabi_uldivmod>
 800a5fe:	4602      	mov	r2, r0
 800a600:	460b      	mov	r3, r1
 800a602:	4b6c      	ldr	r3, [pc, #432]	; (800a7b4 <UART_SetConfig+0x38c>)
 800a604:	fba3 1302 	umull	r1, r3, r3, r2
 800a608:	095b      	lsrs	r3, r3, #5
 800a60a:	2164      	movs	r1, #100	; 0x64
 800a60c:	fb01 f303 	mul.w	r3, r1, r3
 800a610:	1ad3      	subs	r3, r2, r3
 800a612:	00db      	lsls	r3, r3, #3
 800a614:	3332      	adds	r3, #50	; 0x32
 800a616:	4a67      	ldr	r2, [pc, #412]	; (800a7b4 <UART_SetConfig+0x38c>)
 800a618:	fba2 2303 	umull	r2, r3, r2, r3
 800a61c:	095b      	lsrs	r3, r3, #5
 800a61e:	f003 0207 	and.w	r2, r3, #7
 800a622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4432      	add	r2, r6
 800a628:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a62a:	e0b9      	b.n	800a7a0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a62c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a62e:	461c      	mov	r4, r3
 800a630:	f04f 0500 	mov.w	r5, #0
 800a634:	4622      	mov	r2, r4
 800a636:	462b      	mov	r3, r5
 800a638:	1891      	adds	r1, r2, r2
 800a63a:	6139      	str	r1, [r7, #16]
 800a63c:	415b      	adcs	r3, r3
 800a63e:	617b      	str	r3, [r7, #20]
 800a640:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a644:	1912      	adds	r2, r2, r4
 800a646:	eb45 0303 	adc.w	r3, r5, r3
 800a64a:	f04f 0000 	mov.w	r0, #0
 800a64e:	f04f 0100 	mov.w	r1, #0
 800a652:	00d9      	lsls	r1, r3, #3
 800a654:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a658:	00d0      	lsls	r0, r2, #3
 800a65a:	4602      	mov	r2, r0
 800a65c:	460b      	mov	r3, r1
 800a65e:	eb12 0804 	adds.w	r8, r2, r4
 800a662:	eb43 0905 	adc.w	r9, r3, r5
 800a666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	4618      	mov	r0, r3
 800a66c:	f04f 0100 	mov.w	r1, #0
 800a670:	f04f 0200 	mov.w	r2, #0
 800a674:	f04f 0300 	mov.w	r3, #0
 800a678:	008b      	lsls	r3, r1, #2
 800a67a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a67e:	0082      	lsls	r2, r0, #2
 800a680:	4640      	mov	r0, r8
 800a682:	4649      	mov	r1, r9
 800a684:	f7f6 fb08 	bl	8000c98 <__aeabi_uldivmod>
 800a688:	4602      	mov	r2, r0
 800a68a:	460b      	mov	r3, r1
 800a68c:	4b49      	ldr	r3, [pc, #292]	; (800a7b4 <UART_SetConfig+0x38c>)
 800a68e:	fba3 2302 	umull	r2, r3, r3, r2
 800a692:	095b      	lsrs	r3, r3, #5
 800a694:	011e      	lsls	r6, r3, #4
 800a696:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a698:	4618      	mov	r0, r3
 800a69a:	f04f 0100 	mov.w	r1, #0
 800a69e:	4602      	mov	r2, r0
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	1894      	adds	r4, r2, r2
 800a6a4:	60bc      	str	r4, [r7, #8]
 800a6a6:	415b      	adcs	r3, r3
 800a6a8:	60fb      	str	r3, [r7, #12]
 800a6aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a6ae:	1812      	adds	r2, r2, r0
 800a6b0:	eb41 0303 	adc.w	r3, r1, r3
 800a6b4:	f04f 0400 	mov.w	r4, #0
 800a6b8:	f04f 0500 	mov.w	r5, #0
 800a6bc:	00dd      	lsls	r5, r3, #3
 800a6be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a6c2:	00d4      	lsls	r4, r2, #3
 800a6c4:	4622      	mov	r2, r4
 800a6c6:	462b      	mov	r3, r5
 800a6c8:	1814      	adds	r4, r2, r0
 800a6ca:	64bc      	str	r4, [r7, #72]	; 0x48
 800a6cc:	414b      	adcs	r3, r1
 800a6ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f04f 0100 	mov.w	r1, #0
 800a6da:	f04f 0200 	mov.w	r2, #0
 800a6de:	f04f 0300 	mov.w	r3, #0
 800a6e2:	008b      	lsls	r3, r1, #2
 800a6e4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a6e8:	0082      	lsls	r2, r0, #2
 800a6ea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a6ee:	f7f6 fad3 	bl	8000c98 <__aeabi_uldivmod>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	4b2f      	ldr	r3, [pc, #188]	; (800a7b4 <UART_SetConfig+0x38c>)
 800a6f8:	fba3 1302 	umull	r1, r3, r3, r2
 800a6fc:	095b      	lsrs	r3, r3, #5
 800a6fe:	2164      	movs	r1, #100	; 0x64
 800a700:	fb01 f303 	mul.w	r3, r1, r3
 800a704:	1ad3      	subs	r3, r2, r3
 800a706:	011b      	lsls	r3, r3, #4
 800a708:	3332      	adds	r3, #50	; 0x32
 800a70a:	4a2a      	ldr	r2, [pc, #168]	; (800a7b4 <UART_SetConfig+0x38c>)
 800a70c:	fba2 2303 	umull	r2, r3, r2, r3
 800a710:	095b      	lsrs	r3, r3, #5
 800a712:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a716:	441e      	add	r6, r3
 800a718:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a71a:	4618      	mov	r0, r3
 800a71c:	f04f 0100 	mov.w	r1, #0
 800a720:	4602      	mov	r2, r0
 800a722:	460b      	mov	r3, r1
 800a724:	1894      	adds	r4, r2, r2
 800a726:	603c      	str	r4, [r7, #0]
 800a728:	415b      	adcs	r3, r3
 800a72a:	607b      	str	r3, [r7, #4]
 800a72c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a730:	1812      	adds	r2, r2, r0
 800a732:	eb41 0303 	adc.w	r3, r1, r3
 800a736:	f04f 0400 	mov.w	r4, #0
 800a73a:	f04f 0500 	mov.w	r5, #0
 800a73e:	00dd      	lsls	r5, r3, #3
 800a740:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a744:	00d4      	lsls	r4, r2, #3
 800a746:	4622      	mov	r2, r4
 800a748:	462b      	mov	r3, r5
 800a74a:	eb12 0a00 	adds.w	sl, r2, r0
 800a74e:	eb43 0b01 	adc.w	fp, r3, r1
 800a752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	4618      	mov	r0, r3
 800a758:	f04f 0100 	mov.w	r1, #0
 800a75c:	f04f 0200 	mov.w	r2, #0
 800a760:	f04f 0300 	mov.w	r3, #0
 800a764:	008b      	lsls	r3, r1, #2
 800a766:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a76a:	0082      	lsls	r2, r0, #2
 800a76c:	4650      	mov	r0, sl
 800a76e:	4659      	mov	r1, fp
 800a770:	f7f6 fa92 	bl	8000c98 <__aeabi_uldivmod>
 800a774:	4602      	mov	r2, r0
 800a776:	460b      	mov	r3, r1
 800a778:	4b0e      	ldr	r3, [pc, #56]	; (800a7b4 <UART_SetConfig+0x38c>)
 800a77a:	fba3 1302 	umull	r1, r3, r3, r2
 800a77e:	095b      	lsrs	r3, r3, #5
 800a780:	2164      	movs	r1, #100	; 0x64
 800a782:	fb01 f303 	mul.w	r3, r1, r3
 800a786:	1ad3      	subs	r3, r2, r3
 800a788:	011b      	lsls	r3, r3, #4
 800a78a:	3332      	adds	r3, #50	; 0x32
 800a78c:	4a09      	ldr	r2, [pc, #36]	; (800a7b4 <UART_SetConfig+0x38c>)
 800a78e:	fba2 2303 	umull	r2, r3, r2, r3
 800a792:	095b      	lsrs	r3, r3, #5
 800a794:	f003 020f 	and.w	r2, r3, #15
 800a798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4432      	add	r2, r6
 800a79e:	609a      	str	r2, [r3, #8]
}
 800a7a0:	bf00      	nop
 800a7a2:	377c      	adds	r7, #124	; 0x7c
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7aa:	bf00      	nop
 800a7ac:	40011000 	.word	0x40011000
 800a7b0:	40011400 	.word	0x40011400
 800a7b4:	51eb851f 	.word	0x51eb851f

0800a7b8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a7b8:	b084      	sub	sp, #16
 800a7ba:	b480      	push	{r7}
 800a7bc:	b085      	sub	sp, #20
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
 800a7c2:	f107 001c 	add.w	r0, r7, #28
 800a7c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a7ce:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a7d0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a7d2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a7d6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a7da:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a7de:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a7e2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a7e4:	68fa      	ldr	r2, [r7, #12]
 800a7e6:	4313      	orrs	r3, r2
 800a7e8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800a7f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a7f6:	68fa      	ldr	r2, [r7, #12]
 800a7f8:	431a      	orrs	r2, r3
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a7fe:	2300      	movs	r3, #0
}
 800a800:	4618      	mov	r0, r3
 800a802:	3714      	adds	r7, #20
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	b004      	add	sp, #16
 800a80c:	4770      	bx	lr

0800a80e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a80e:	b480      	push	{r7}
 800a810:	b083      	sub	sp, #12
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	370c      	adds	r7, #12
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr

0800a828 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a828:	b480      	push	{r7}
 800a82a:	b083      	sub	sp, #12
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	681a      	ldr	r2, [r3, #0]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a83c:	2300      	movs	r3, #0
}
 800a83e:	4618      	mov	r0, r3
 800a840:	370c      	adds	r7, #12
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr

0800a84a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a84a:	b580      	push	{r7, lr}
 800a84c:	b082      	sub	sp, #8
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2203      	movs	r2, #3
 800a856:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800a858:	2002      	movs	r0, #2
 800a85a:	f7fb fb71 	bl	8005f40 <HAL_Delay>
  
  return HAL_OK;
 800a85e:	2300      	movs	r3, #0
}
 800a860:	4618      	mov	r0, r3
 800a862:	3708      	adds	r7, #8
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f003 0303 	and.w	r3, r3, #3
}
 800a878:	4618      	mov	r0, r3
 800a87a:	370c      	adds	r7, #12
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a884:	b480      	push	{r7}
 800a886:	b085      	sub	sp, #20
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a88e:	2300      	movs	r3, #0
 800a890:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	681a      	ldr	r2, [r3, #0]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a8a2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a8a8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a8ae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a8b0:	68fa      	ldr	r2, [r7, #12]
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	68db      	ldr	r3, [r3, #12]
 800a8ba:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a8be:	f023 030f 	bic.w	r3, r3, #15
 800a8c2:	68fa      	ldr	r2, [r7, #12]
 800a8c4:	431a      	orrs	r2, r3
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3714      	adds	r7, #20
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr

0800a8d8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	691b      	ldr	r3, [r3, #16]
 800a8e4:	b2db      	uxtb	r3, r3
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	370c      	adds	r7, #12
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f0:	4770      	bx	lr

0800a8f2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a8f2:	b480      	push	{r7}
 800a8f4:	b085      	sub	sp, #20
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
 800a8fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	3314      	adds	r3, #20
 800a900:	461a      	mov	r2, r3
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	4413      	add	r3, r2
 800a906:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
}  
 800a90c:	4618      	mov	r0, r3
 800a90e:	3714      	adds	r7, #20
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr

0800a918 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a918:	b480      	push	{r7}
 800a91a:	b085      	sub	sp, #20
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a922:	2300      	movs	r3, #0
 800a924:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	685a      	ldr	r2, [r3, #4]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a93e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a944:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a94a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a94c:	68fa      	ldr	r2, [r7, #12]
 800a94e:	4313      	orrs	r3, r2
 800a950:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a956:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	431a      	orrs	r2, r3
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a962:	2300      	movs	r3, #0

}
 800a964:	4618      	mov	r0, r3
 800a966:	3714      	adds	r7, #20
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b088      	sub	sp, #32
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a97e:	2310      	movs	r3, #16
 800a980:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a982:	2340      	movs	r3, #64	; 0x40
 800a984:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a986:	2300      	movs	r3, #0
 800a988:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a98a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a98e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a990:	f107 0308 	add.w	r3, r7, #8
 800a994:	4619      	mov	r1, r3
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f7ff ff74 	bl	800a884 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a99c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9a0:	2110      	movs	r1, #16
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 fa02 	bl	800adac <SDMMC_GetCmdResp1>
 800a9a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9aa:	69fb      	ldr	r3, [r7, #28]
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3720      	adds	r7, #32
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b088      	sub	sp, #32
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a9c2:	2311      	movs	r3, #17
 800a9c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a9c6:	2340      	movs	r3, #64	; 0x40
 800a9c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a9ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a9d4:	f107 0308 	add.w	r3, r7, #8
 800a9d8:	4619      	mov	r1, r3
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f7ff ff52 	bl	800a884 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a9e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9e4:	2111      	movs	r1, #17
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f000 f9e0 	bl	800adac <SDMMC_GetCmdResp1>
 800a9ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9ee:	69fb      	ldr	r3, [r7, #28]
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3720      	adds	r7, #32
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b088      	sub	sp, #32
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800aa06:	2312      	movs	r3, #18
 800aa08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aa0a:	2340      	movs	r3, #64	; 0x40
 800aa0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa16:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa18:	f107 0308 	add.w	r3, r7, #8
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f7ff ff30 	bl	800a884 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800aa24:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa28:	2112      	movs	r1, #18
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f000 f9be 	bl	800adac <SDMMC_GetCmdResp1>
 800aa30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa32:	69fb      	ldr	r3, [r7, #28]
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3720      	adds	r7, #32
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b088      	sub	sp, #32
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800aa4a:	2318      	movs	r3, #24
 800aa4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aa4e:	2340      	movs	r3, #64	; 0x40
 800aa50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa52:	2300      	movs	r3, #0
 800aa54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa5c:	f107 0308 	add.w	r3, r7, #8
 800aa60:	4619      	mov	r1, r3
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f7ff ff0e 	bl	800a884 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800aa68:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa6c:	2118      	movs	r1, #24
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 f99c 	bl	800adac <SDMMC_GetCmdResp1>
 800aa74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa76:	69fb      	ldr	r3, [r7, #28]
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3720      	adds	r7, #32
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b088      	sub	sp, #32
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800aa8e:	2319      	movs	r3, #25
 800aa90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aa92:	2340      	movs	r3, #64	; 0x40
 800aa94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa96:	2300      	movs	r3, #0
 800aa98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aaa0:	f107 0308 	add.w	r3, r7, #8
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f7ff feec 	bl	800a884 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800aaac:	f241 3288 	movw	r2, #5000	; 0x1388
 800aab0:	2119      	movs	r1, #25
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 f97a 	bl	800adac <SDMMC_GetCmdResp1>
 800aab8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aaba:	69fb      	ldr	r3, [r7, #28]
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3720      	adds	r7, #32
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b088      	sub	sp, #32
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800aacc:	2300      	movs	r3, #0
 800aace:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800aad0:	230c      	movs	r3, #12
 800aad2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aad4:	2340      	movs	r3, #64	; 0x40
 800aad6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aad8:	2300      	movs	r3, #0
 800aada:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aadc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aae0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aae2:	f107 0308 	add.w	r3, r7, #8
 800aae6:	4619      	mov	r1, r3
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f7ff fecb 	bl	800a884 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800aaee:	4a05      	ldr	r2, [pc, #20]	; (800ab04 <SDMMC_CmdStopTransfer+0x40>)
 800aaf0:	210c      	movs	r1, #12
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 f95a 	bl	800adac <SDMMC_GetCmdResp1>
 800aaf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aafa:	69fb      	ldr	r3, [r7, #28]
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3720      	adds	r7, #32
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	05f5e100 	.word	0x05f5e100

0800ab08 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b08a      	sub	sp, #40	; 0x28
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ab18:	2307      	movs	r3, #7
 800ab1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ab1c:	2340      	movs	r3, #64	; 0x40
 800ab1e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab20:	2300      	movs	r3, #0
 800ab22:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab28:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab2a:	f107 0310 	add.w	r3, r7, #16
 800ab2e:	4619      	mov	r1, r3
 800ab30:	68f8      	ldr	r0, [r7, #12]
 800ab32:	f7ff fea7 	bl	800a884 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800ab36:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab3a:	2107      	movs	r1, #7
 800ab3c:	68f8      	ldr	r0, [r7, #12]
 800ab3e:	f000 f935 	bl	800adac <SDMMC_GetCmdResp1>
 800ab42:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ab44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3728      	adds	r7, #40	; 0x28
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}

0800ab4e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800ab4e:	b580      	push	{r7, lr}
 800ab50:	b088      	sub	sp, #32
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ab56:	2300      	movs	r3, #0
 800ab58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab62:	2300      	movs	r3, #0
 800ab64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab6c:	f107 0308 	add.w	r3, r7, #8
 800ab70:	4619      	mov	r1, r3
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f7ff fe86 	bl	800a884 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 f8eb 	bl	800ad54 <SDMMC_GetCmdError>
 800ab7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab80:	69fb      	ldr	r3, [r7, #28]
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3720      	adds	r7, #32
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b088      	sub	sp, #32
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ab92:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ab96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ab98:	2308      	movs	r3, #8
 800ab9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ab9c:	2340      	movs	r3, #64	; 0x40
 800ab9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aba0:	2300      	movs	r3, #0
 800aba2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aba8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800abaa:	f107 0308 	add.w	r3, r7, #8
 800abae:	4619      	mov	r1, r3
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f7ff fe67 	bl	800a884 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 fae2 	bl	800b180 <SDMMC_GetCmdResp7>
 800abbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abbe:	69fb      	ldr	r3, [r7, #28]
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3720      	adds	r7, #32
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b088      	sub	sp, #32
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800abd6:	2337      	movs	r3, #55	; 0x37
 800abd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800abda:	2340      	movs	r3, #64	; 0x40
 800abdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800abde:	2300      	movs	r3, #0
 800abe0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800abe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abe6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800abe8:	f107 0308 	add.w	r3, r7, #8
 800abec:	4619      	mov	r1, r3
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f7ff fe48 	bl	800a884 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800abf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800abf8:	2137      	movs	r1, #55	; 0x37
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 f8d6 	bl	800adac <SDMMC_GetCmdResp1>
 800ac00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac02:	69fb      	ldr	r3, [r7, #28]
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3720      	adds	r7, #32
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b088      	sub	sp, #32
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ac22:	2329      	movs	r3, #41	; 0x29
 800ac24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac26:	2340      	movs	r3, #64	; 0x40
 800ac28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac34:	f107 0308 	add.w	r3, r7, #8
 800ac38:	4619      	mov	r1, r3
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f7ff fe22 	bl	800a884 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 f9e9 	bl	800b018 <SDMMC_GetCmdResp3>
 800ac46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac48:	69fb      	ldr	r3, [r7, #28]
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3720      	adds	r7, #32
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b088      	sub	sp, #32
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ac5e:	2302      	movs	r3, #2
 800ac60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ac62:	23c0      	movs	r3, #192	; 0xc0
 800ac64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac66:	2300      	movs	r3, #0
 800ac68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac6e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac70:	f107 0308 	add.w	r3, r7, #8
 800ac74:	4619      	mov	r1, r3
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f7ff fe04 	bl	800a884 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f000 f983 	bl	800af88 <SDMMC_GetCmdResp2>
 800ac82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac84:	69fb      	ldr	r3, [r7, #28]
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3720      	adds	r7, #32
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}

0800ac8e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ac8e:	b580      	push	{r7, lr}
 800ac90:	b088      	sub	sp, #32
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
 800ac96:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ac9c:	2309      	movs	r3, #9
 800ac9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800aca0:	23c0      	movs	r3, #192	; 0xc0
 800aca2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aca4:	2300      	movs	r3, #0
 800aca6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800acae:	f107 0308 	add.w	r3, r7, #8
 800acb2:	4619      	mov	r1, r3
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f7ff fde5 	bl	800a884 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f000 f964 	bl	800af88 <SDMMC_GetCmdResp2>
 800acc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acc2:	69fb      	ldr	r3, [r7, #28]
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3720      	adds	r7, #32
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b088      	sub	sp, #32
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800acd6:	2300      	movs	r3, #0
 800acd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800acda:	2303      	movs	r3, #3
 800acdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800acde:	2340      	movs	r3, #64	; 0x40
 800ace0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ace2:	2300      	movs	r3, #0
 800ace4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ace6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800acec:	f107 0308 	add.w	r3, r7, #8
 800acf0:	4619      	mov	r1, r3
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f7ff fdc6 	bl	800a884 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800acf8:	683a      	ldr	r2, [r7, #0]
 800acfa:	2103      	movs	r1, #3
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f000 f9c9 	bl	800b094 <SDMMC_GetCmdResp6>
 800ad02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad04:	69fb      	ldr	r3, [r7, #28]
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3720      	adds	r7, #32
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}

0800ad0e <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ad0e:	b580      	push	{r7, lr}
 800ad10:	b088      	sub	sp, #32
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
 800ad16:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ad1c:	230d      	movs	r3, #13
 800ad1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad20:	2340      	movs	r3, #64	; 0x40
 800ad22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad24:	2300      	movs	r3, #0
 800ad26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad2c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad2e:	f107 0308 	add.w	r3, r7, #8
 800ad32:	4619      	mov	r1, r3
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f7ff fda5 	bl	800a884 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800ad3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad3e:	210d      	movs	r1, #13
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f000 f833 	bl	800adac <SDMMC_GetCmdResp1>
 800ad46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad48:	69fb      	ldr	r3, [r7, #28]
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3720      	adds	r7, #32
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
	...

0800ad54 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b085      	sub	sp, #20
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ad5c:	4b11      	ldr	r3, [pc, #68]	; (800ada4 <SDMMC_GetCmdError+0x50>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a11      	ldr	r2, [pc, #68]	; (800ada8 <SDMMC_GetCmdError+0x54>)
 800ad62:	fba2 2303 	umull	r2, r3, r2, r3
 800ad66:	0a5b      	lsrs	r3, r3, #9
 800ad68:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad6c:	fb02 f303 	mul.w	r3, r2, r3
 800ad70:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	1e5a      	subs	r2, r3, #1
 800ad76:	60fa      	str	r2, [r7, #12]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d102      	bne.n	800ad82 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad80:	e009      	b.n	800ad96 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d0f1      	beq.n	800ad72 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	22c5      	movs	r2, #197	; 0xc5
 800ad92:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ad94:	2300      	movs	r3, #0
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3714      	adds	r7, #20
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr
 800ada2:	bf00      	nop
 800ada4:	20000004 	.word	0x20000004
 800ada8:	10624dd3 	.word	0x10624dd3

0800adac <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b088      	sub	sp, #32
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	460b      	mov	r3, r1
 800adb6:	607a      	str	r2, [r7, #4]
 800adb8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800adba:	4b70      	ldr	r3, [pc, #448]	; (800af7c <SDMMC_GetCmdResp1+0x1d0>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4a70      	ldr	r2, [pc, #448]	; (800af80 <SDMMC_GetCmdResp1+0x1d4>)
 800adc0:	fba2 2303 	umull	r2, r3, r2, r3
 800adc4:	0a5a      	lsrs	r2, r3, #9
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	fb02 f303 	mul.w	r3, r2, r3
 800adcc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800adce:	69fb      	ldr	r3, [r7, #28]
 800add0:	1e5a      	subs	r2, r3, #1
 800add2:	61fa      	str	r2, [r7, #28]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d102      	bne.n	800adde <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800add8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800addc:	e0c9      	b.n	800af72 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ade2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ade4:	69bb      	ldr	r3, [r7, #24]
 800ade6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800adea:	2b00      	cmp	r3, #0
 800adec:	d0ef      	beq.n	800adce <SDMMC_GetCmdResp1+0x22>
 800adee:	69bb      	ldr	r3, [r7, #24]
 800adf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d1ea      	bne.n	800adce <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adfc:	f003 0304 	and.w	r3, r3, #4
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d004      	beq.n	800ae0e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2204      	movs	r2, #4
 800ae08:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae0a:	2304      	movs	r3, #4
 800ae0c:	e0b1      	b.n	800af72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae12:	f003 0301 	and.w	r3, r3, #1
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d004      	beq.n	800ae24 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae20:	2301      	movs	r3, #1
 800ae22:	e0a6      	b.n	800af72 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	22c5      	movs	r2, #197	; 0xc5
 800ae28:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ae2a:	68f8      	ldr	r0, [r7, #12]
 800ae2c:	f7ff fd54 	bl	800a8d8 <SDIO_GetCommandResponse>
 800ae30:	4603      	mov	r3, r0
 800ae32:	461a      	mov	r2, r3
 800ae34:	7afb      	ldrb	r3, [r7, #11]
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d001      	beq.n	800ae3e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	e099      	b.n	800af72 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ae3e:	2100      	movs	r1, #0
 800ae40:	68f8      	ldr	r0, [r7, #12]
 800ae42:	f7ff fd56 	bl	800a8f2 <SDIO_GetResponse>
 800ae46:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ae48:	697a      	ldr	r2, [r7, #20]
 800ae4a:	4b4e      	ldr	r3, [pc, #312]	; (800af84 <SDMMC_GetCmdResp1+0x1d8>)
 800ae4c:	4013      	ands	r3, r2
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d101      	bne.n	800ae56 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ae52:	2300      	movs	r3, #0
 800ae54:	e08d      	b.n	800af72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	da02      	bge.n	800ae62 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ae5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ae60:	e087      	b.n	800af72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d001      	beq.n	800ae70 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ae6c:	2340      	movs	r3, #64	; 0x40
 800ae6e:	e080      	b.n	800af72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d001      	beq.n	800ae7e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ae7a:	2380      	movs	r3, #128	; 0x80
 800ae7c:	e079      	b.n	800af72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d002      	beq.n	800ae8e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ae88:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae8c:	e071      	b.n	800af72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d002      	beq.n	800ae9e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ae98:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae9c:	e069      	b.n	800af72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d002      	beq.n	800aeae <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800aea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aeac:	e061      	b.n	800af72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d002      	beq.n	800aebe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800aeb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aebc:	e059      	b.n	800af72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d002      	beq.n	800aece <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800aec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aecc:	e051      	b.n	800af72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d002      	beq.n	800aede <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800aed8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aedc:	e049      	b.n	800af72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d002      	beq.n	800aeee <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800aee8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aeec:	e041      	b.n	800af72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d002      	beq.n	800aefe <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800aef8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aefc:	e039      	b.n	800af72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800af04:	2b00      	cmp	r3, #0
 800af06:	d002      	beq.n	800af0e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800af08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800af0c:	e031      	b.n	800af72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af14:	2b00      	cmp	r3, #0
 800af16:	d002      	beq.n	800af1e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800af18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800af1c:	e029      	b.n	800af72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af24:	2b00      	cmp	r3, #0
 800af26:	d002      	beq.n	800af2e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800af28:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800af2c:	e021      	b.n	800af72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af34:	2b00      	cmp	r3, #0
 800af36:	d002      	beq.n	800af3e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800af38:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800af3c:	e019      	b.n	800af72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af44:	2b00      	cmp	r3, #0
 800af46:	d002      	beq.n	800af4e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800af48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800af4c:	e011      	b.n	800af72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800af54:	2b00      	cmp	r3, #0
 800af56:	d002      	beq.n	800af5e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800af58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800af5c:	e009      	b.n	800af72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	f003 0308 	and.w	r3, r3, #8
 800af64:	2b00      	cmp	r3, #0
 800af66:	d002      	beq.n	800af6e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800af68:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800af6c:	e001      	b.n	800af72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800af6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800af72:	4618      	mov	r0, r3
 800af74:	3720      	adds	r7, #32
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	20000004 	.word	0x20000004
 800af80:	10624dd3 	.word	0x10624dd3
 800af84:	fdffe008 	.word	0xfdffe008

0800af88 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800af88:	b480      	push	{r7}
 800af8a:	b085      	sub	sp, #20
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800af90:	4b1f      	ldr	r3, [pc, #124]	; (800b010 <SDMMC_GetCmdResp2+0x88>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	4a1f      	ldr	r2, [pc, #124]	; (800b014 <SDMMC_GetCmdResp2+0x8c>)
 800af96:	fba2 2303 	umull	r2, r3, r2, r3
 800af9a:	0a5b      	lsrs	r3, r3, #9
 800af9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800afa0:	fb02 f303 	mul.w	r3, r2, r3
 800afa4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	1e5a      	subs	r2, r3, #1
 800afaa:	60fa      	str	r2, [r7, #12]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d102      	bne.n	800afb6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800afb0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800afb4:	e026      	b.n	800b004 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d0ef      	beq.n	800afa6 <SDMMC_GetCmdResp2+0x1e>
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d1ea      	bne.n	800afa6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afd4:	f003 0304 	and.w	r3, r3, #4
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d004      	beq.n	800afe6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2204      	movs	r2, #4
 800afe0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800afe2:	2304      	movs	r3, #4
 800afe4:	e00e      	b.n	800b004 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afea:	f003 0301 	and.w	r3, r3, #1
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d004      	beq.n	800affc <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2201      	movs	r2, #1
 800aff6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aff8:	2301      	movs	r3, #1
 800affa:	e003      	b.n	800b004 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	22c5      	movs	r2, #197	; 0xc5
 800b000:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b002:	2300      	movs	r3, #0
}
 800b004:	4618      	mov	r0, r3
 800b006:	3714      	adds	r7, #20
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr
 800b010:	20000004 	.word	0x20000004
 800b014:	10624dd3 	.word	0x10624dd3

0800b018 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b018:	b480      	push	{r7}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b020:	4b1a      	ldr	r3, [pc, #104]	; (800b08c <SDMMC_GetCmdResp3+0x74>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a1a      	ldr	r2, [pc, #104]	; (800b090 <SDMMC_GetCmdResp3+0x78>)
 800b026:	fba2 2303 	umull	r2, r3, r2, r3
 800b02a:	0a5b      	lsrs	r3, r3, #9
 800b02c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b030:	fb02 f303 	mul.w	r3, r2, r3
 800b034:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	1e5a      	subs	r2, r3, #1
 800b03a:	60fa      	str	r2, [r7, #12]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d102      	bne.n	800b046 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b040:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b044:	e01b      	b.n	800b07e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b04a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b052:	2b00      	cmp	r3, #0
 800b054:	d0ef      	beq.n	800b036 <SDMMC_GetCmdResp3+0x1e>
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d1ea      	bne.n	800b036 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b064:	f003 0304 	and.w	r3, r3, #4
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d004      	beq.n	800b076 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2204      	movs	r2, #4
 800b070:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b072:	2304      	movs	r3, #4
 800b074:	e003      	b.n	800b07e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	22c5      	movs	r2, #197	; 0xc5
 800b07a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b07c:	2300      	movs	r3, #0
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3714      	adds	r7, #20
 800b082:	46bd      	mov	sp, r7
 800b084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b088:	4770      	bx	lr
 800b08a:	bf00      	nop
 800b08c:	20000004 	.word	0x20000004
 800b090:	10624dd3 	.word	0x10624dd3

0800b094 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b088      	sub	sp, #32
 800b098:	af00      	add	r7, sp, #0
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	460b      	mov	r3, r1
 800b09e:	607a      	str	r2, [r7, #4]
 800b0a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b0a2:	4b35      	ldr	r3, [pc, #212]	; (800b178 <SDMMC_GetCmdResp6+0xe4>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4a35      	ldr	r2, [pc, #212]	; (800b17c <SDMMC_GetCmdResp6+0xe8>)
 800b0a8:	fba2 2303 	umull	r2, r3, r2, r3
 800b0ac:	0a5b      	lsrs	r3, r3, #9
 800b0ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0b2:	fb02 f303 	mul.w	r3, r2, r3
 800b0b6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	1e5a      	subs	r2, r3, #1
 800b0bc:	61fa      	str	r2, [r7, #28]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d102      	bne.n	800b0c8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b0c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b0c6:	e052      	b.n	800b16e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0cc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b0ce:	69bb      	ldr	r3, [r7, #24]
 800b0d0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d0ef      	beq.n	800b0b8 <SDMMC_GetCmdResp6+0x24>
 800b0d8:	69bb      	ldr	r3, [r7, #24]
 800b0da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d1ea      	bne.n	800b0b8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0e6:	f003 0304 	and.w	r3, r3, #4
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d004      	beq.n	800b0f8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	2204      	movs	r2, #4
 800b0f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b0f4:	2304      	movs	r3, #4
 800b0f6:	e03a      	b.n	800b16e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0fc:	f003 0301 	and.w	r3, r3, #1
 800b100:	2b00      	cmp	r3, #0
 800b102:	d004      	beq.n	800b10e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2201      	movs	r2, #1
 800b108:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b10a:	2301      	movs	r3, #1
 800b10c:	e02f      	b.n	800b16e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b10e:	68f8      	ldr	r0, [r7, #12]
 800b110:	f7ff fbe2 	bl	800a8d8 <SDIO_GetCommandResponse>
 800b114:	4603      	mov	r3, r0
 800b116:	461a      	mov	r2, r3
 800b118:	7afb      	ldrb	r3, [r7, #11]
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d001      	beq.n	800b122 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b11e:	2301      	movs	r3, #1
 800b120:	e025      	b.n	800b16e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	22c5      	movs	r2, #197	; 0xc5
 800b126:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b128:	2100      	movs	r1, #0
 800b12a:	68f8      	ldr	r0, [r7, #12]
 800b12c:	f7ff fbe1 	bl	800a8f2 <SDIO_GetResponse>
 800b130:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d106      	bne.n	800b14a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	0c1b      	lsrs	r3, r3, #16
 800b140:	b29a      	uxth	r2, r3
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b146:	2300      	movs	r3, #0
 800b148:	e011      	b.n	800b16e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b150:	2b00      	cmp	r3, #0
 800b152:	d002      	beq.n	800b15a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b154:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b158:	e009      	b.n	800b16e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b160:	2b00      	cmp	r3, #0
 800b162:	d002      	beq.n	800b16a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b168:	e001      	b.n	800b16e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b16a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3720      	adds	r7, #32
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}
 800b176:	bf00      	nop
 800b178:	20000004 	.word	0x20000004
 800b17c:	10624dd3 	.word	0x10624dd3

0800b180 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b180:	b480      	push	{r7}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b188:	4b22      	ldr	r3, [pc, #136]	; (800b214 <SDMMC_GetCmdResp7+0x94>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	4a22      	ldr	r2, [pc, #136]	; (800b218 <SDMMC_GetCmdResp7+0x98>)
 800b18e:	fba2 2303 	umull	r2, r3, r2, r3
 800b192:	0a5b      	lsrs	r3, r3, #9
 800b194:	f241 3288 	movw	r2, #5000	; 0x1388
 800b198:	fb02 f303 	mul.w	r3, r2, r3
 800b19c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	1e5a      	subs	r2, r3, #1
 800b1a2:	60fa      	str	r2, [r7, #12]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d102      	bne.n	800b1ae <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1ac:	e02c      	b.n	800b208 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1b2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d0ef      	beq.n	800b19e <SDMMC_GetCmdResp7+0x1e>
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d1ea      	bne.n	800b19e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1cc:	f003 0304 	and.w	r3, r3, #4
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d004      	beq.n	800b1de <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2204      	movs	r2, #4
 800b1d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b1da:	2304      	movs	r3, #4
 800b1dc:	e014      	b.n	800b208 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1e2:	f003 0301 	and.w	r3, r3, #1
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d004      	beq.n	800b1f4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2201      	movs	r2, #1
 800b1ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	e009      	b.n	800b208 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d002      	beq.n	800b206 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2240      	movs	r2, #64	; 0x40
 800b204:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b206:	2300      	movs	r3, #0
  
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3714      	adds	r7, #20
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr
 800b214:	20000004 	.word	0x20000004
 800b218:	10624dd3 	.word	0x10624dd3

0800b21c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b220:	4904      	ldr	r1, [pc, #16]	; (800b234 <MX_FATFS_Init+0x18>)
 800b222:	4805      	ldr	r0, [pc, #20]	; (800b238 <MX_FATFS_Init+0x1c>)
 800b224:	f002 fff0 	bl	800e208 <FATFS_LinkDriver>
 800b228:	4603      	mov	r3, r0
 800b22a:	461a      	mov	r2, r3
 800b22c:	4b03      	ldr	r3, [pc, #12]	; (800b23c <MX_FATFS_Init+0x20>)
 800b22e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b230:	bf00      	nop
 800b232:	bd80      	pop	{r7, pc}
 800b234:	200029b8 	.word	0x200029b8
 800b238:	08016030 	.word	0x08016030
 800b23c:	200029b4 	.word	0x200029b4

0800b240 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b240:	b480      	push	{r7}
 800b242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b244:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b246:	4618      	mov	r0, r3
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b082      	sub	sp, #8
 800b254:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b256:	2300      	movs	r3, #0
 800b258:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b25a:	f000 f86b 	bl	800b334 <BSP_SD_IsDetected>
 800b25e:	4603      	mov	r3, r0
 800b260:	2b01      	cmp	r3, #1
 800b262:	d001      	beq.n	800b268 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800b264:	2301      	movs	r3, #1
 800b266:	e005      	b.n	800b274 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800b268:	4804      	ldr	r0, [pc, #16]	; (800b27c <BSP_SD_Init+0x2c>)
 800b26a:	f7fd fa63 	bl	8008734 <HAL_SD_Init>
 800b26e:	4603      	mov	r3, r0
 800b270:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800b272:	79fb      	ldrb	r3, [r7, #7]
}
 800b274:	4618      	mov	r0, r3
 800b276:	3708      	adds	r7, #8
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}
 800b27c:	200028d4 	.word	0x200028d4

0800b280 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b088      	sub	sp, #32
 800b284:	af02      	add	r7, sp, #8
 800b286:	60f8      	str	r0, [r7, #12]
 800b288:	60b9      	str	r1, [r7, #8]
 800b28a:	607a      	str	r2, [r7, #4]
 800b28c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b28e:	2300      	movs	r3, #0
 800b290:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	9300      	str	r3, [sp, #0]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	68ba      	ldr	r2, [r7, #8]
 800b29a:	68f9      	ldr	r1, [r7, #12]
 800b29c:	4806      	ldr	r0, [pc, #24]	; (800b2b8 <BSP_SD_ReadBlocks+0x38>)
 800b29e:	f7fd faf7 	bl	8008890 <HAL_SD_ReadBlocks>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d001      	beq.n	800b2ac <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b2ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3718      	adds	r7, #24
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
 800b2b6:	bf00      	nop
 800b2b8:	200028d4 	.word	0x200028d4

0800b2bc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b088      	sub	sp, #32
 800b2c0:	af02      	add	r7, sp, #8
 800b2c2:	60f8      	str	r0, [r7, #12]
 800b2c4:	60b9      	str	r1, [r7, #8]
 800b2c6:	607a      	str	r2, [r7, #4]
 800b2c8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	9300      	str	r3, [sp, #0]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	68ba      	ldr	r2, [r7, #8]
 800b2d6:	68f9      	ldr	r1, [r7, #12]
 800b2d8:	4806      	ldr	r0, [pc, #24]	; (800b2f4 <BSP_SD_WriteBlocks+0x38>)
 800b2da:	f7fd fcb7 	bl	8008c4c <HAL_SD_WriteBlocks>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d001      	beq.n	800b2e8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b2e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3718      	adds	r7, #24
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}
 800b2f2:	bf00      	nop
 800b2f4:	200028d4 	.word	0x200028d4

0800b2f8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b2fc:	4805      	ldr	r0, [pc, #20]	; (800b314 <BSP_SD_GetCardState+0x1c>)
 800b2fe:	f7fd fffb 	bl	80092f8 <HAL_SD_GetCardState>
 800b302:	4603      	mov	r3, r0
 800b304:	2b04      	cmp	r3, #4
 800b306:	bf14      	ite	ne
 800b308:	2301      	movne	r3, #1
 800b30a:	2300      	moveq	r3, #0
 800b30c:	b2db      	uxtb	r3, r3
}
 800b30e:	4618      	mov	r0, r3
 800b310:	bd80      	pop	{r7, pc}
 800b312:	bf00      	nop
 800b314:	200028d4 	.word	0x200028d4

0800b318 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b082      	sub	sp, #8
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800b320:	6879      	ldr	r1, [r7, #4]
 800b322:	4803      	ldr	r0, [pc, #12]	; (800b330 <BSP_SD_GetCardInfo+0x18>)
 800b324:	f7fd ffbc 	bl	80092a0 <HAL_SD_GetCardInfo>
}
 800b328:	bf00      	nop
 800b32a:	3708      	adds	r7, #8
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}
 800b330:	200028d4 	.word	0x200028d4

0800b334 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b334:	b480      	push	{r7}
 800b336:	b083      	sub	sp, #12
 800b338:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b33a:	2301      	movs	r3, #1
 800b33c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800b33e:	79fb      	ldrb	r3, [r7, #7]
 800b340:	b2db      	uxtb	r3, r3
}
 800b342:	4618      	mov	r0, r3
 800b344:	370c      	adds	r7, #12
 800b346:	46bd      	mov	sp, r7
 800b348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34c:	4770      	bx	lr
	...

0800b350 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
 800b356:	4603      	mov	r3, r0
 800b358:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b35a:	4b0b      	ldr	r3, [pc, #44]	; (800b388 <SD_CheckStatus+0x38>)
 800b35c:	2201      	movs	r2, #1
 800b35e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b360:	f7ff ffca 	bl	800b2f8 <BSP_SD_GetCardState>
 800b364:	4603      	mov	r3, r0
 800b366:	2b00      	cmp	r3, #0
 800b368:	d107      	bne.n	800b37a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b36a:	4b07      	ldr	r3, [pc, #28]	; (800b388 <SD_CheckStatus+0x38>)
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	b2db      	uxtb	r3, r3
 800b370:	f023 0301 	bic.w	r3, r3, #1
 800b374:	b2da      	uxtb	r2, r3
 800b376:	4b04      	ldr	r3, [pc, #16]	; (800b388 <SD_CheckStatus+0x38>)
 800b378:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b37a:	4b03      	ldr	r3, [pc, #12]	; (800b388 <SD_CheckStatus+0x38>)
 800b37c:	781b      	ldrb	r3, [r3, #0]
 800b37e:	b2db      	uxtb	r3, r3
}
 800b380:	4618      	mov	r0, r3
 800b382:	3708      	adds	r7, #8
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}
 800b388:	20000055 	.word	0x20000055

0800b38c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
 800b392:	4603      	mov	r3, r0
 800b394:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b396:	4b0b      	ldr	r3, [pc, #44]	; (800b3c4 <SD_initialize+0x38>)
 800b398:	2201      	movs	r2, #1
 800b39a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b39c:	f7ff ff58 	bl	800b250 <BSP_SD_Init>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d107      	bne.n	800b3b6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800b3a6:	79fb      	ldrb	r3, [r7, #7]
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f7ff ffd1 	bl	800b350 <SD_CheckStatus>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	4b04      	ldr	r3, [pc, #16]	; (800b3c4 <SD_initialize+0x38>)
 800b3b4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b3b6:	4b03      	ldr	r3, [pc, #12]	; (800b3c4 <SD_initialize+0x38>)
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	b2db      	uxtb	r3, r3
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3708      	adds	r7, #8
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}
 800b3c4:	20000055 	.word	0x20000055

0800b3c8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b082      	sub	sp, #8
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b3d2:	79fb      	ldrb	r3, [r7, #7]
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f7ff ffbb 	bl	800b350 <SD_CheckStatus>
 800b3da:	4603      	mov	r3, r0
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3708      	adds	r7, #8
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}

0800b3e4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b086      	sub	sp, #24
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	60b9      	str	r1, [r7, #8]
 800b3ec:	607a      	str	r2, [r7, #4]
 800b3ee:	603b      	str	r3, [r7, #0]
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800b3f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b3fc:	683a      	ldr	r2, [r7, #0]
 800b3fe:	6879      	ldr	r1, [r7, #4]
 800b400:	68b8      	ldr	r0, [r7, #8]
 800b402:	f7ff ff3d 	bl	800b280 <BSP_SD_ReadBlocks>
 800b406:	4603      	mov	r3, r0
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d107      	bne.n	800b41c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b40c:	bf00      	nop
 800b40e:	f7ff ff73 	bl	800b2f8 <BSP_SD_GetCardState>
 800b412:	4603      	mov	r3, r0
 800b414:	2b00      	cmp	r3, #0
 800b416:	d1fa      	bne.n	800b40e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800b418:	2300      	movs	r3, #0
 800b41a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b41c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3718      	adds	r7, #24
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}

0800b426 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b426:	b580      	push	{r7, lr}
 800b428:	b086      	sub	sp, #24
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	60b9      	str	r1, [r7, #8]
 800b42e:	607a      	str	r2, [r7, #4]
 800b430:	603b      	str	r3, [r7, #0]
 800b432:	4603      	mov	r3, r0
 800b434:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b436:	2301      	movs	r3, #1
 800b438:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800b43a:	f04f 33ff 	mov.w	r3, #4294967295
 800b43e:	683a      	ldr	r2, [r7, #0]
 800b440:	6879      	ldr	r1, [r7, #4]
 800b442:	68b8      	ldr	r0, [r7, #8]
 800b444:	f7ff ff3a 	bl	800b2bc <BSP_SD_WriteBlocks>
 800b448:	4603      	mov	r3, r0
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d107      	bne.n	800b45e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800b44e:	bf00      	nop
 800b450:	f7ff ff52 	bl	800b2f8 <BSP_SD_GetCardState>
 800b454:	4603      	mov	r3, r0
 800b456:	2b00      	cmp	r3, #0
 800b458:	d1fa      	bne.n	800b450 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800b45a:	2300      	movs	r3, #0
 800b45c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b45e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b460:	4618      	mov	r0, r3
 800b462:	3718      	adds	r7, #24
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b08c      	sub	sp, #48	; 0x30
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	4603      	mov	r3, r0
 800b470:	603a      	str	r2, [r7, #0]
 800b472:	71fb      	strb	r3, [r7, #7]
 800b474:	460b      	mov	r3, r1
 800b476:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b478:	2301      	movs	r3, #1
 800b47a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b47e:	4b25      	ldr	r3, [pc, #148]	; (800b514 <SD_ioctl+0xac>)
 800b480:	781b      	ldrb	r3, [r3, #0]
 800b482:	b2db      	uxtb	r3, r3
 800b484:	f003 0301 	and.w	r3, r3, #1
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d001      	beq.n	800b490 <SD_ioctl+0x28>
 800b48c:	2303      	movs	r3, #3
 800b48e:	e03c      	b.n	800b50a <SD_ioctl+0xa2>

  switch (cmd)
 800b490:	79bb      	ldrb	r3, [r7, #6]
 800b492:	2b03      	cmp	r3, #3
 800b494:	d834      	bhi.n	800b500 <SD_ioctl+0x98>
 800b496:	a201      	add	r2, pc, #4	; (adr r2, 800b49c <SD_ioctl+0x34>)
 800b498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b49c:	0800b4ad 	.word	0x0800b4ad
 800b4a0:	0800b4b5 	.word	0x0800b4b5
 800b4a4:	0800b4cd 	.word	0x0800b4cd
 800b4a8:	0800b4e7 	.word	0x0800b4e7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b4b2:	e028      	b.n	800b506 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b4b4:	f107 030c 	add.w	r3, r7, #12
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7ff ff2d 	bl	800b318 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b4be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b4ca:	e01c      	b.n	800b506 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b4cc:	f107 030c 	add.w	r3, r7, #12
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7ff ff21 	bl	800b318 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d8:	b29a      	uxth	r2, r3
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b4e4:	e00f      	b.n	800b506 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b4e6:	f107 030c 	add.w	r3, r7, #12
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7ff ff14 	bl	800b318 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f2:	0a5a      	lsrs	r2, r3, #9
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b4fe:	e002      	b.n	800b506 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b500:	2304      	movs	r3, #4
 800b502:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b506:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3730      	adds	r7, #48	; 0x30
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}
 800b512:	bf00      	nop
 800b514:	20000055 	.word	0x20000055

0800b518 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	4603      	mov	r3, r0
 800b520:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b522:	79fb      	ldrb	r3, [r7, #7]
 800b524:	4a08      	ldr	r2, [pc, #32]	; (800b548 <disk_status+0x30>)
 800b526:	009b      	lsls	r3, r3, #2
 800b528:	4413      	add	r3, r2
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	79fa      	ldrb	r2, [r7, #7]
 800b530:	4905      	ldr	r1, [pc, #20]	; (800b548 <disk_status+0x30>)
 800b532:	440a      	add	r2, r1
 800b534:	7a12      	ldrb	r2, [r2, #8]
 800b536:	4610      	mov	r0, r2
 800b538:	4798      	blx	r3
 800b53a:	4603      	mov	r3, r0
 800b53c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b53e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b540:	4618      	mov	r0, r3
 800b542:	3710      	adds	r7, #16
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}
 800b548:	20002340 	.word	0x20002340

0800b54c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b084      	sub	sp, #16
 800b550:	af00      	add	r7, sp, #0
 800b552:	4603      	mov	r3, r0
 800b554:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b556:	2300      	movs	r3, #0
 800b558:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b55a:	79fb      	ldrb	r3, [r7, #7]
 800b55c:	4a0d      	ldr	r2, [pc, #52]	; (800b594 <disk_initialize+0x48>)
 800b55e:	5cd3      	ldrb	r3, [r2, r3]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d111      	bne.n	800b588 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b564:	79fb      	ldrb	r3, [r7, #7]
 800b566:	4a0b      	ldr	r2, [pc, #44]	; (800b594 <disk_initialize+0x48>)
 800b568:	2101      	movs	r1, #1
 800b56a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b56c:	79fb      	ldrb	r3, [r7, #7]
 800b56e:	4a09      	ldr	r2, [pc, #36]	; (800b594 <disk_initialize+0x48>)
 800b570:	009b      	lsls	r3, r3, #2
 800b572:	4413      	add	r3, r2
 800b574:	685b      	ldr	r3, [r3, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	79fa      	ldrb	r2, [r7, #7]
 800b57a:	4906      	ldr	r1, [pc, #24]	; (800b594 <disk_initialize+0x48>)
 800b57c:	440a      	add	r2, r1
 800b57e:	7a12      	ldrb	r2, [r2, #8]
 800b580:	4610      	mov	r0, r2
 800b582:	4798      	blx	r3
 800b584:	4603      	mov	r3, r0
 800b586:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b588:	7bfb      	ldrb	r3, [r7, #15]
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3710      	adds	r7, #16
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}
 800b592:	bf00      	nop
 800b594:	20002340 	.word	0x20002340

0800b598 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b598:	b590      	push	{r4, r7, lr}
 800b59a:	b087      	sub	sp, #28
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	60b9      	str	r1, [r7, #8]
 800b5a0:	607a      	str	r2, [r7, #4]
 800b5a2:	603b      	str	r3, [r7, #0]
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b5a8:	7bfb      	ldrb	r3, [r7, #15]
 800b5aa:	4a0a      	ldr	r2, [pc, #40]	; (800b5d4 <disk_read+0x3c>)
 800b5ac:	009b      	lsls	r3, r3, #2
 800b5ae:	4413      	add	r3, r2
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	689c      	ldr	r4, [r3, #8]
 800b5b4:	7bfb      	ldrb	r3, [r7, #15]
 800b5b6:	4a07      	ldr	r2, [pc, #28]	; (800b5d4 <disk_read+0x3c>)
 800b5b8:	4413      	add	r3, r2
 800b5ba:	7a18      	ldrb	r0, [r3, #8]
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	687a      	ldr	r2, [r7, #4]
 800b5c0:	68b9      	ldr	r1, [r7, #8]
 800b5c2:	47a0      	blx	r4
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	75fb      	strb	r3, [r7, #23]
  return res;
 800b5c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	371c      	adds	r7, #28
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd90      	pop	{r4, r7, pc}
 800b5d2:	bf00      	nop
 800b5d4:	20002340 	.word	0x20002340

0800b5d8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b5d8:	b590      	push	{r4, r7, lr}
 800b5da:	b087      	sub	sp, #28
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60b9      	str	r1, [r7, #8]
 800b5e0:	607a      	str	r2, [r7, #4]
 800b5e2:	603b      	str	r3, [r7, #0]
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b5e8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ea:	4a0a      	ldr	r2, [pc, #40]	; (800b614 <disk_write+0x3c>)
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	4413      	add	r3, r2
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	68dc      	ldr	r4, [r3, #12]
 800b5f4:	7bfb      	ldrb	r3, [r7, #15]
 800b5f6:	4a07      	ldr	r2, [pc, #28]	; (800b614 <disk_write+0x3c>)
 800b5f8:	4413      	add	r3, r2
 800b5fa:	7a18      	ldrb	r0, [r3, #8]
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	687a      	ldr	r2, [r7, #4]
 800b600:	68b9      	ldr	r1, [r7, #8]
 800b602:	47a0      	blx	r4
 800b604:	4603      	mov	r3, r0
 800b606:	75fb      	strb	r3, [r7, #23]
  return res;
 800b608:	7dfb      	ldrb	r3, [r7, #23]
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	371c      	adds	r7, #28
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd90      	pop	{r4, r7, pc}
 800b612:	bf00      	nop
 800b614:	20002340 	.word	0x20002340

0800b618 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b084      	sub	sp, #16
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	4603      	mov	r3, r0
 800b620:	603a      	str	r2, [r7, #0]
 800b622:	71fb      	strb	r3, [r7, #7]
 800b624:	460b      	mov	r3, r1
 800b626:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b628:	79fb      	ldrb	r3, [r7, #7]
 800b62a:	4a09      	ldr	r2, [pc, #36]	; (800b650 <disk_ioctl+0x38>)
 800b62c:	009b      	lsls	r3, r3, #2
 800b62e:	4413      	add	r3, r2
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	691b      	ldr	r3, [r3, #16]
 800b634:	79fa      	ldrb	r2, [r7, #7]
 800b636:	4906      	ldr	r1, [pc, #24]	; (800b650 <disk_ioctl+0x38>)
 800b638:	440a      	add	r2, r1
 800b63a:	7a10      	ldrb	r0, [r2, #8]
 800b63c:	79b9      	ldrb	r1, [r7, #6]
 800b63e:	683a      	ldr	r2, [r7, #0]
 800b640:	4798      	blx	r3
 800b642:	4603      	mov	r3, r0
 800b644:	73fb      	strb	r3, [r7, #15]
  return res;
 800b646:	7bfb      	ldrb	r3, [r7, #15]
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3710      	adds	r7, #16
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}
 800b650:	20002340 	.word	0x20002340

0800b654 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b654:	b480      	push	{r7}
 800b656:	b085      	sub	sp, #20
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	3301      	adds	r3, #1
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b664:	89fb      	ldrh	r3, [r7, #14]
 800b666:	021b      	lsls	r3, r3, #8
 800b668:	b21a      	sxth	r2, r3
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	b21b      	sxth	r3, r3
 800b670:	4313      	orrs	r3, r2
 800b672:	b21b      	sxth	r3, r3
 800b674:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b676:	89fb      	ldrh	r3, [r7, #14]
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3714      	adds	r7, #20
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr

0800b684 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b684:	b480      	push	{r7}
 800b686:	b085      	sub	sp, #20
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	3303      	adds	r3, #3
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	021b      	lsls	r3, r3, #8
 800b698:	687a      	ldr	r2, [r7, #4]
 800b69a:	3202      	adds	r2, #2
 800b69c:	7812      	ldrb	r2, [r2, #0]
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	021b      	lsls	r3, r3, #8
 800b6a6:	687a      	ldr	r2, [r7, #4]
 800b6a8:	3201      	adds	r2, #1
 800b6aa:	7812      	ldrb	r2, [r2, #0]
 800b6ac:	4313      	orrs	r3, r2
 800b6ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	021b      	lsls	r3, r3, #8
 800b6b4:	687a      	ldr	r2, [r7, #4]
 800b6b6:	7812      	ldrb	r2, [r2, #0]
 800b6b8:	4313      	orrs	r3, r2
 800b6ba:	60fb      	str	r3, [r7, #12]
	return rv;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3714      	adds	r7, #20
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr

0800b6ca <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b6ca:	b480      	push	{r7}
 800b6cc:	b083      	sub	sp, #12
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	1c5a      	adds	r2, r3, #1
 800b6da:	607a      	str	r2, [r7, #4]
 800b6dc:	887a      	ldrh	r2, [r7, #2]
 800b6de:	b2d2      	uxtb	r2, r2
 800b6e0:	701a      	strb	r2, [r3, #0]
 800b6e2:	887b      	ldrh	r3, [r7, #2]
 800b6e4:	0a1b      	lsrs	r3, r3, #8
 800b6e6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	1c5a      	adds	r2, r3, #1
 800b6ec:	607a      	str	r2, [r7, #4]
 800b6ee:	887a      	ldrh	r2, [r7, #2]
 800b6f0:	b2d2      	uxtb	r2, r2
 800b6f2:	701a      	strb	r2, [r3, #0]
}
 800b6f4:	bf00      	nop
 800b6f6:	370c      	adds	r7, #12
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fe:	4770      	bx	lr

0800b700 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b700:	b480      	push	{r7}
 800b702:	b083      	sub	sp, #12
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	1c5a      	adds	r2, r3, #1
 800b70e:	607a      	str	r2, [r7, #4]
 800b710:	683a      	ldr	r2, [r7, #0]
 800b712:	b2d2      	uxtb	r2, r2
 800b714:	701a      	strb	r2, [r3, #0]
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	0a1b      	lsrs	r3, r3, #8
 800b71a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	1c5a      	adds	r2, r3, #1
 800b720:	607a      	str	r2, [r7, #4]
 800b722:	683a      	ldr	r2, [r7, #0]
 800b724:	b2d2      	uxtb	r2, r2
 800b726:	701a      	strb	r2, [r3, #0]
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	0a1b      	lsrs	r3, r3, #8
 800b72c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	1c5a      	adds	r2, r3, #1
 800b732:	607a      	str	r2, [r7, #4]
 800b734:	683a      	ldr	r2, [r7, #0]
 800b736:	b2d2      	uxtb	r2, r2
 800b738:	701a      	strb	r2, [r3, #0]
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	0a1b      	lsrs	r3, r3, #8
 800b73e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	1c5a      	adds	r2, r3, #1
 800b744:	607a      	str	r2, [r7, #4]
 800b746:	683a      	ldr	r2, [r7, #0]
 800b748:	b2d2      	uxtb	r2, r2
 800b74a:	701a      	strb	r2, [r3, #0]
}
 800b74c:	bf00      	nop
 800b74e:	370c      	adds	r7, #12
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr

0800b758 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b758:	b480      	push	{r7}
 800b75a:	b087      	sub	sp, #28
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	60f8      	str	r0, [r7, #12]
 800b760:	60b9      	str	r1, [r7, #8]
 800b762:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d00d      	beq.n	800b78e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b772:	693a      	ldr	r2, [r7, #16]
 800b774:	1c53      	adds	r3, r2, #1
 800b776:	613b      	str	r3, [r7, #16]
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	1c59      	adds	r1, r3, #1
 800b77c:	6179      	str	r1, [r7, #20]
 800b77e:	7812      	ldrb	r2, [r2, #0]
 800b780:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	3b01      	subs	r3, #1
 800b786:	607b      	str	r3, [r7, #4]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d1f1      	bne.n	800b772 <mem_cpy+0x1a>
	}
}
 800b78e:	bf00      	nop
 800b790:	371c      	adds	r7, #28
 800b792:	46bd      	mov	sp, r7
 800b794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b798:	4770      	bx	lr

0800b79a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b79a:	b480      	push	{r7}
 800b79c:	b087      	sub	sp, #28
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	60f8      	str	r0, [r7, #12]
 800b7a2:	60b9      	str	r1, [r7, #8]
 800b7a4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	1c5a      	adds	r2, r3, #1
 800b7ae:	617a      	str	r2, [r7, #20]
 800b7b0:	68ba      	ldr	r2, [r7, #8]
 800b7b2:	b2d2      	uxtb	r2, r2
 800b7b4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	3b01      	subs	r3, #1
 800b7ba:	607b      	str	r3, [r7, #4]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d1f3      	bne.n	800b7aa <mem_set+0x10>
}
 800b7c2:	bf00      	nop
 800b7c4:	bf00      	nop
 800b7c6:	371c      	adds	r7, #28
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr

0800b7d0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b7d0:	b480      	push	{r7}
 800b7d2:	b089      	sub	sp, #36	; 0x24
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	60b9      	str	r1, [r7, #8]
 800b7da:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	61fb      	str	r3, [r7, #28]
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b7e8:	69fb      	ldr	r3, [r7, #28]
 800b7ea:	1c5a      	adds	r2, r3, #1
 800b7ec:	61fa      	str	r2, [r7, #28]
 800b7ee:	781b      	ldrb	r3, [r3, #0]
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	69bb      	ldr	r3, [r7, #24]
 800b7f4:	1c5a      	adds	r2, r3, #1
 800b7f6:	61ba      	str	r2, [r7, #24]
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	1acb      	subs	r3, r1, r3
 800b7fc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	3b01      	subs	r3, #1
 800b802:	607b      	str	r3, [r7, #4]
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d002      	beq.n	800b810 <mem_cmp+0x40>
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d0eb      	beq.n	800b7e8 <mem_cmp+0x18>

	return r;
 800b810:	697b      	ldr	r3, [r7, #20]
}
 800b812:	4618      	mov	r0, r3
 800b814:	3724      	adds	r7, #36	; 0x24
 800b816:	46bd      	mov	sp, r7
 800b818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81c:	4770      	bx	lr

0800b81e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b81e:	b480      	push	{r7}
 800b820:	b083      	sub	sp, #12
 800b822:	af00      	add	r7, sp, #0
 800b824:	6078      	str	r0, [r7, #4]
 800b826:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b828:	e002      	b.n	800b830 <chk_chr+0x12>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	3301      	adds	r3, #1
 800b82e:	607b      	str	r3, [r7, #4]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d005      	beq.n	800b844 <chk_chr+0x26>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	781b      	ldrb	r3, [r3, #0]
 800b83c:	461a      	mov	r2, r3
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	4293      	cmp	r3, r2
 800b842:	d1f2      	bne.n	800b82a <chk_chr+0xc>
	return *str;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	781b      	ldrb	r3, [r3, #0]
}
 800b848:	4618      	mov	r0, r3
 800b84a:	370c      	adds	r7, #12
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr

0800b854 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b854:	b480      	push	{r7}
 800b856:	b085      	sub	sp, #20
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b85e:	2300      	movs	r3, #0
 800b860:	60bb      	str	r3, [r7, #8]
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	60fb      	str	r3, [r7, #12]
 800b866:	e029      	b.n	800b8bc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b868:	4a27      	ldr	r2, [pc, #156]	; (800b908 <chk_lock+0xb4>)
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	011b      	lsls	r3, r3, #4
 800b86e:	4413      	add	r3, r2
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d01d      	beq.n	800b8b2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b876:	4a24      	ldr	r2, [pc, #144]	; (800b908 <chk_lock+0xb4>)
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	011b      	lsls	r3, r3, #4
 800b87c:	4413      	add	r3, r2
 800b87e:	681a      	ldr	r2, [r3, #0]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	429a      	cmp	r2, r3
 800b886:	d116      	bne.n	800b8b6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b888:	4a1f      	ldr	r2, [pc, #124]	; (800b908 <chk_lock+0xb4>)
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	011b      	lsls	r3, r3, #4
 800b88e:	4413      	add	r3, r2
 800b890:	3304      	adds	r3, #4
 800b892:	681a      	ldr	r2, [r3, #0]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b898:	429a      	cmp	r2, r3
 800b89a:	d10c      	bne.n	800b8b6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b89c:	4a1a      	ldr	r2, [pc, #104]	; (800b908 <chk_lock+0xb4>)
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	011b      	lsls	r3, r3, #4
 800b8a2:	4413      	add	r3, r2
 800b8a4:	3308      	adds	r3, #8
 800b8a6:	681a      	ldr	r2, [r3, #0]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d102      	bne.n	800b8b6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b8b0:	e007      	b.n	800b8c2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	60fb      	str	r3, [r7, #12]
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	2b01      	cmp	r3, #1
 800b8c0:	d9d2      	bls.n	800b868 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2b02      	cmp	r3, #2
 800b8c6:	d109      	bne.n	800b8dc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d102      	bne.n	800b8d4 <chk_lock+0x80>
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	2b02      	cmp	r3, #2
 800b8d2:	d101      	bne.n	800b8d8 <chk_lock+0x84>
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	e010      	b.n	800b8fa <chk_lock+0xa6>
 800b8d8:	2312      	movs	r3, #18
 800b8da:	e00e      	b.n	800b8fa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d108      	bne.n	800b8f4 <chk_lock+0xa0>
 800b8e2:	4a09      	ldr	r2, [pc, #36]	; (800b908 <chk_lock+0xb4>)
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	011b      	lsls	r3, r3, #4
 800b8e8:	4413      	add	r3, r2
 800b8ea:	330c      	adds	r3, #12
 800b8ec:	881b      	ldrh	r3, [r3, #0]
 800b8ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8f2:	d101      	bne.n	800b8f8 <chk_lock+0xa4>
 800b8f4:	2310      	movs	r3, #16
 800b8f6:	e000      	b.n	800b8fa <chk_lock+0xa6>
 800b8f8:	2300      	movs	r3, #0
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3714      	adds	r7, #20
 800b8fe:	46bd      	mov	sp, r7
 800b900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b904:	4770      	bx	lr
 800b906:	bf00      	nop
 800b908:	200022dc 	.word	0x200022dc

0800b90c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b90c:	b480      	push	{r7}
 800b90e:	b083      	sub	sp, #12
 800b910:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b912:	2300      	movs	r3, #0
 800b914:	607b      	str	r3, [r7, #4]
 800b916:	e002      	b.n	800b91e <enq_lock+0x12>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	3301      	adds	r3, #1
 800b91c:	607b      	str	r3, [r7, #4]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2b01      	cmp	r3, #1
 800b922:	d806      	bhi.n	800b932 <enq_lock+0x26>
 800b924:	4a09      	ldr	r2, [pc, #36]	; (800b94c <enq_lock+0x40>)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	011b      	lsls	r3, r3, #4
 800b92a:	4413      	add	r3, r2
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d1f2      	bne.n	800b918 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2b02      	cmp	r3, #2
 800b936:	bf14      	ite	ne
 800b938:	2301      	movne	r3, #1
 800b93a:	2300      	moveq	r3, #0
 800b93c:	b2db      	uxtb	r3, r3
}
 800b93e:	4618      	mov	r0, r3
 800b940:	370c      	adds	r7, #12
 800b942:	46bd      	mov	sp, r7
 800b944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b948:	4770      	bx	lr
 800b94a:	bf00      	nop
 800b94c:	200022dc 	.word	0x200022dc

0800b950 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b950:	b480      	push	{r7}
 800b952:	b085      	sub	sp, #20
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b95a:	2300      	movs	r3, #0
 800b95c:	60fb      	str	r3, [r7, #12]
 800b95e:	e01f      	b.n	800b9a0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b960:	4a41      	ldr	r2, [pc, #260]	; (800ba68 <inc_lock+0x118>)
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	011b      	lsls	r3, r3, #4
 800b966:	4413      	add	r3, r2
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	429a      	cmp	r2, r3
 800b970:	d113      	bne.n	800b99a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b972:	4a3d      	ldr	r2, [pc, #244]	; (800ba68 <inc_lock+0x118>)
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	011b      	lsls	r3, r3, #4
 800b978:	4413      	add	r3, r2
 800b97a:	3304      	adds	r3, #4
 800b97c:	681a      	ldr	r2, [r3, #0]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b982:	429a      	cmp	r2, r3
 800b984:	d109      	bne.n	800b99a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b986:	4a38      	ldr	r2, [pc, #224]	; (800ba68 <inc_lock+0x118>)
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	011b      	lsls	r3, r3, #4
 800b98c:	4413      	add	r3, r2
 800b98e:	3308      	adds	r3, #8
 800b990:	681a      	ldr	r2, [r3, #0]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b996:	429a      	cmp	r2, r3
 800b998:	d006      	beq.n	800b9a8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	3301      	adds	r3, #1
 800b99e:	60fb      	str	r3, [r7, #12]
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2b01      	cmp	r3, #1
 800b9a4:	d9dc      	bls.n	800b960 <inc_lock+0x10>
 800b9a6:	e000      	b.n	800b9aa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b9a8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	2b02      	cmp	r3, #2
 800b9ae:	d132      	bne.n	800ba16 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	60fb      	str	r3, [r7, #12]
 800b9b4:	e002      	b.n	800b9bc <inc_lock+0x6c>
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	3301      	adds	r3, #1
 800b9ba:	60fb      	str	r3, [r7, #12]
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	2b01      	cmp	r3, #1
 800b9c0:	d806      	bhi.n	800b9d0 <inc_lock+0x80>
 800b9c2:	4a29      	ldr	r2, [pc, #164]	; (800ba68 <inc_lock+0x118>)
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	011b      	lsls	r3, r3, #4
 800b9c8:	4413      	add	r3, r2
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d1f2      	bne.n	800b9b6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2b02      	cmp	r3, #2
 800b9d4:	d101      	bne.n	800b9da <inc_lock+0x8a>
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	e040      	b.n	800ba5c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681a      	ldr	r2, [r3, #0]
 800b9de:	4922      	ldr	r1, [pc, #136]	; (800ba68 <inc_lock+0x118>)
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	011b      	lsls	r3, r3, #4
 800b9e4:	440b      	add	r3, r1
 800b9e6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	689a      	ldr	r2, [r3, #8]
 800b9ec:	491e      	ldr	r1, [pc, #120]	; (800ba68 <inc_lock+0x118>)
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	011b      	lsls	r3, r3, #4
 800b9f2:	440b      	add	r3, r1
 800b9f4:	3304      	adds	r3, #4
 800b9f6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	695a      	ldr	r2, [r3, #20]
 800b9fc:	491a      	ldr	r1, [pc, #104]	; (800ba68 <inc_lock+0x118>)
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	011b      	lsls	r3, r3, #4
 800ba02:	440b      	add	r3, r1
 800ba04:	3308      	adds	r3, #8
 800ba06:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ba08:	4a17      	ldr	r2, [pc, #92]	; (800ba68 <inc_lock+0x118>)
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	011b      	lsls	r3, r3, #4
 800ba0e:	4413      	add	r3, r2
 800ba10:	330c      	adds	r3, #12
 800ba12:	2200      	movs	r2, #0
 800ba14:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d009      	beq.n	800ba30 <inc_lock+0xe0>
 800ba1c:	4a12      	ldr	r2, [pc, #72]	; (800ba68 <inc_lock+0x118>)
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	011b      	lsls	r3, r3, #4
 800ba22:	4413      	add	r3, r2
 800ba24:	330c      	adds	r3, #12
 800ba26:	881b      	ldrh	r3, [r3, #0]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d001      	beq.n	800ba30 <inc_lock+0xe0>
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	e015      	b.n	800ba5c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d108      	bne.n	800ba48 <inc_lock+0xf8>
 800ba36:	4a0c      	ldr	r2, [pc, #48]	; (800ba68 <inc_lock+0x118>)
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	011b      	lsls	r3, r3, #4
 800ba3c:	4413      	add	r3, r2
 800ba3e:	330c      	adds	r3, #12
 800ba40:	881b      	ldrh	r3, [r3, #0]
 800ba42:	3301      	adds	r3, #1
 800ba44:	b29a      	uxth	r2, r3
 800ba46:	e001      	b.n	800ba4c <inc_lock+0xfc>
 800ba48:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ba4c:	4906      	ldr	r1, [pc, #24]	; (800ba68 <inc_lock+0x118>)
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	011b      	lsls	r3, r3, #4
 800ba52:	440b      	add	r3, r1
 800ba54:	330c      	adds	r3, #12
 800ba56:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	3301      	adds	r3, #1
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	3714      	adds	r7, #20
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr
 800ba68:	200022dc 	.word	0x200022dc

0800ba6c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b085      	sub	sp, #20
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	3b01      	subs	r3, #1
 800ba78:	607b      	str	r3, [r7, #4]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d825      	bhi.n	800bacc <dec_lock+0x60>
		n = Files[i].ctr;
 800ba80:	4a17      	ldr	r2, [pc, #92]	; (800bae0 <dec_lock+0x74>)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	011b      	lsls	r3, r3, #4
 800ba86:	4413      	add	r3, r2
 800ba88:	330c      	adds	r3, #12
 800ba8a:	881b      	ldrh	r3, [r3, #0]
 800ba8c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ba8e:	89fb      	ldrh	r3, [r7, #14]
 800ba90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba94:	d101      	bne.n	800ba9a <dec_lock+0x2e>
 800ba96:	2300      	movs	r3, #0
 800ba98:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ba9a:	89fb      	ldrh	r3, [r7, #14]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d002      	beq.n	800baa6 <dec_lock+0x3a>
 800baa0:	89fb      	ldrh	r3, [r7, #14]
 800baa2:	3b01      	subs	r3, #1
 800baa4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800baa6:	4a0e      	ldr	r2, [pc, #56]	; (800bae0 <dec_lock+0x74>)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	011b      	lsls	r3, r3, #4
 800baac:	4413      	add	r3, r2
 800baae:	330c      	adds	r3, #12
 800bab0:	89fa      	ldrh	r2, [r7, #14]
 800bab2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bab4:	89fb      	ldrh	r3, [r7, #14]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d105      	bne.n	800bac6 <dec_lock+0x5a>
 800baba:	4a09      	ldr	r2, [pc, #36]	; (800bae0 <dec_lock+0x74>)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	011b      	lsls	r3, r3, #4
 800bac0:	4413      	add	r3, r2
 800bac2:	2200      	movs	r2, #0
 800bac4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bac6:	2300      	movs	r3, #0
 800bac8:	737b      	strb	r3, [r7, #13]
 800baca:	e001      	b.n	800bad0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bacc:	2302      	movs	r3, #2
 800bace:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bad0:	7b7b      	ldrb	r3, [r7, #13]
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3714      	adds	r7, #20
 800bad6:	46bd      	mov	sp, r7
 800bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800badc:	4770      	bx	lr
 800bade:	bf00      	nop
 800bae0:	200022dc 	.word	0x200022dc

0800bae4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b085      	sub	sp, #20
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800baec:	2300      	movs	r3, #0
 800baee:	60fb      	str	r3, [r7, #12]
 800baf0:	e010      	b.n	800bb14 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800baf2:	4a0d      	ldr	r2, [pc, #52]	; (800bb28 <clear_lock+0x44>)
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	011b      	lsls	r3, r3, #4
 800baf8:	4413      	add	r3, r2
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	687a      	ldr	r2, [r7, #4]
 800bafe:	429a      	cmp	r2, r3
 800bb00:	d105      	bne.n	800bb0e <clear_lock+0x2a>
 800bb02:	4a09      	ldr	r2, [pc, #36]	; (800bb28 <clear_lock+0x44>)
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	011b      	lsls	r3, r3, #4
 800bb08:	4413      	add	r3, r2
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	3301      	adds	r3, #1
 800bb12:	60fb      	str	r3, [r7, #12]
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2b01      	cmp	r3, #1
 800bb18:	d9eb      	bls.n	800baf2 <clear_lock+0xe>
	}
}
 800bb1a:	bf00      	nop
 800bb1c:	bf00      	nop
 800bb1e:	3714      	adds	r7, #20
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr
 800bb28:	200022dc 	.word	0x200022dc

0800bb2c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b086      	sub	sp, #24
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bb34:	2300      	movs	r3, #0
 800bb36:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	78db      	ldrb	r3, [r3, #3]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d034      	beq.n	800bbaa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb44:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	7858      	ldrb	r0, [r3, #1]
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bb50:	2301      	movs	r3, #1
 800bb52:	697a      	ldr	r2, [r7, #20]
 800bb54:	f7ff fd40 	bl	800b5d8 <disk_write>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d002      	beq.n	800bb64 <sync_window+0x38>
			res = FR_DISK_ERR;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	73fb      	strb	r3, [r7, #15]
 800bb62:	e022      	b.n	800bbaa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2200      	movs	r2, #0
 800bb68:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb6e:	697a      	ldr	r2, [r7, #20]
 800bb70:	1ad2      	subs	r2, r2, r3
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6a1b      	ldr	r3, [r3, #32]
 800bb76:	429a      	cmp	r2, r3
 800bb78:	d217      	bcs.n	800bbaa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	789b      	ldrb	r3, [r3, #2]
 800bb7e:	613b      	str	r3, [r7, #16]
 800bb80:	e010      	b.n	800bba4 <sync_window+0x78>
					wsect += fs->fsize;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6a1b      	ldr	r3, [r3, #32]
 800bb86:	697a      	ldr	r2, [r7, #20]
 800bb88:	4413      	add	r3, r2
 800bb8a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	7858      	ldrb	r0, [r3, #1]
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bb96:	2301      	movs	r3, #1
 800bb98:	697a      	ldr	r2, [r7, #20]
 800bb9a:	f7ff fd1d 	bl	800b5d8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	3b01      	subs	r3, #1
 800bba2:	613b      	str	r3, [r7, #16]
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	2b01      	cmp	r3, #1
 800bba8:	d8eb      	bhi.n	800bb82 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bbaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	3718      	adds	r7, #24
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}

0800bbb4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b084      	sub	sp, #16
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbc6:	683a      	ldr	r2, [r7, #0]
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d01b      	beq.n	800bc04 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f7ff ffad 	bl	800bb2c <sync_window>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bbd6:	7bfb      	ldrb	r3, [r7, #15]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d113      	bne.n	800bc04 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	7858      	ldrb	r0, [r3, #1]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	683a      	ldr	r2, [r7, #0]
 800bbea:	f7ff fcd5 	bl	800b598 <disk_read>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d004      	beq.n	800bbfe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bbf4:	f04f 33ff 	mov.w	r3, #4294967295
 800bbf8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	683a      	ldr	r2, [r7, #0]
 800bc02:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800bc04:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3710      	adds	r7, #16
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
	...

0800bc10 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b084      	sub	sp, #16
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f7ff ff87 	bl	800bb2c <sync_window>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bc22:	7bfb      	ldrb	r3, [r7, #15]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d159      	bne.n	800bcdc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	2b03      	cmp	r3, #3
 800bc2e:	d149      	bne.n	800bcc4 <sync_fs+0xb4>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	791b      	ldrb	r3, [r3, #4]
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d145      	bne.n	800bcc4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	899b      	ldrh	r3, [r3, #12]
 800bc42:	461a      	mov	r2, r3
 800bc44:	2100      	movs	r1, #0
 800bc46:	f7ff fda8 	bl	800b79a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	3338      	adds	r3, #56	; 0x38
 800bc4e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bc52:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bc56:	4618      	mov	r0, r3
 800bc58:	f7ff fd37 	bl	800b6ca <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	3338      	adds	r3, #56	; 0x38
 800bc60:	4921      	ldr	r1, [pc, #132]	; (800bce8 <sync_fs+0xd8>)
 800bc62:	4618      	mov	r0, r3
 800bc64:	f7ff fd4c 	bl	800b700 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	3338      	adds	r3, #56	; 0x38
 800bc6c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bc70:	491e      	ldr	r1, [pc, #120]	; (800bcec <sync_fs+0xdc>)
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7ff fd44 	bl	800b700 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	3338      	adds	r3, #56	; 0x38
 800bc7c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	699b      	ldr	r3, [r3, #24]
 800bc84:	4619      	mov	r1, r3
 800bc86:	4610      	mov	r0, r2
 800bc88:	f7ff fd3a 	bl	800b700 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	3338      	adds	r3, #56	; 0x38
 800bc90:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	695b      	ldr	r3, [r3, #20]
 800bc98:	4619      	mov	r1, r3
 800bc9a:	4610      	mov	r0, r2
 800bc9c:	f7ff fd30 	bl	800b700 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca4:	1c5a      	adds	r2, r3, #1
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	7858      	ldrb	r0, [r3, #1]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bcb8:	2301      	movs	r3, #1
 800bcba:	f7ff fc8d 	bl	800b5d8 <disk_write>
			fs->fsi_flag = 0;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	785b      	ldrb	r3, [r3, #1]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	2100      	movs	r1, #0
 800bccc:	4618      	mov	r0, r3
 800bcce:	f7ff fca3 	bl	800b618 <disk_ioctl>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d001      	beq.n	800bcdc <sync_fs+0xcc>
 800bcd8:	2301      	movs	r3, #1
 800bcda:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bcdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3710      	adds	r7, #16
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
 800bce6:	bf00      	nop
 800bce8:	41615252 	.word	0x41615252
 800bcec:	61417272 	.word	0x61417272

0800bcf0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b083      	sub	sp, #12
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	3b02      	subs	r3, #2
 800bcfe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	69db      	ldr	r3, [r3, #28]
 800bd04:	3b02      	subs	r3, #2
 800bd06:	683a      	ldr	r2, [r7, #0]
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d301      	bcc.n	800bd10 <clust2sect+0x20>
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	e008      	b.n	800bd22 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	895b      	ldrh	r3, [r3, #10]
 800bd14:	461a      	mov	r2, r3
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	fb03 f202 	mul.w	r2, r3, r2
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd20:	4413      	add	r3, r2
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	370c      	adds	r7, #12
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr

0800bd2e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bd2e:	b580      	push	{r7, lr}
 800bd30:	b086      	sub	sp, #24
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
 800bd36:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	2b01      	cmp	r3, #1
 800bd42:	d904      	bls.n	800bd4e <get_fat+0x20>
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	69db      	ldr	r3, [r3, #28]
 800bd48:	683a      	ldr	r2, [r7, #0]
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	d302      	bcc.n	800bd54 <get_fat+0x26>
		val = 1;	/* Internal error */
 800bd4e:	2301      	movs	r3, #1
 800bd50:	617b      	str	r3, [r7, #20]
 800bd52:	e0bb      	b.n	800becc <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bd54:	f04f 33ff 	mov.w	r3, #4294967295
 800bd58:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	2b03      	cmp	r3, #3
 800bd60:	f000 8083 	beq.w	800be6a <get_fat+0x13c>
 800bd64:	2b03      	cmp	r3, #3
 800bd66:	f300 80a7 	bgt.w	800beb8 <get_fat+0x18a>
 800bd6a:	2b01      	cmp	r3, #1
 800bd6c:	d002      	beq.n	800bd74 <get_fat+0x46>
 800bd6e:	2b02      	cmp	r3, #2
 800bd70:	d056      	beq.n	800be20 <get_fat+0xf2>
 800bd72:	e0a1      	b.n	800beb8 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	60fb      	str	r3, [r7, #12]
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	085b      	lsrs	r3, r3, #1
 800bd7c:	68fa      	ldr	r2, [r7, #12]
 800bd7e:	4413      	add	r3, r2
 800bd80:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	899b      	ldrh	r3, [r3, #12]
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd92:	4413      	add	r3, r2
 800bd94:	4619      	mov	r1, r3
 800bd96:	6938      	ldr	r0, [r7, #16]
 800bd98:	f7ff ff0c 	bl	800bbb4 <move_window>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	f040 808d 	bne.w	800bebe <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	1c5a      	adds	r2, r3, #1
 800bda8:	60fa      	str	r2, [r7, #12]
 800bdaa:	693a      	ldr	r2, [r7, #16]
 800bdac:	8992      	ldrh	r2, [r2, #12]
 800bdae:	fbb3 f1f2 	udiv	r1, r3, r2
 800bdb2:	fb02 f201 	mul.w	r2, r2, r1
 800bdb6:	1a9b      	subs	r3, r3, r2
 800bdb8:	693a      	ldr	r2, [r7, #16]
 800bdba:	4413      	add	r3, r2
 800bdbc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bdc0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	899b      	ldrh	r3, [r3, #12]
 800bdca:	4619      	mov	r1, r3
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	fbb3 f3f1 	udiv	r3, r3, r1
 800bdd2:	4413      	add	r3, r2
 800bdd4:	4619      	mov	r1, r3
 800bdd6:	6938      	ldr	r0, [r7, #16]
 800bdd8:	f7ff feec 	bl	800bbb4 <move_window>
 800bddc:	4603      	mov	r3, r0
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d16f      	bne.n	800bec2 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	899b      	ldrh	r3, [r3, #12]
 800bde6:	461a      	mov	r2, r3
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	fbb3 f1f2 	udiv	r1, r3, r2
 800bdee:	fb02 f201 	mul.w	r2, r2, r1
 800bdf2:	1a9b      	subs	r3, r3, r2
 800bdf4:	693a      	ldr	r2, [r7, #16]
 800bdf6:	4413      	add	r3, r2
 800bdf8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bdfc:	021b      	lsls	r3, r3, #8
 800bdfe:	461a      	mov	r2, r3
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	4313      	orrs	r3, r2
 800be04:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	f003 0301 	and.w	r3, r3, #1
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d002      	beq.n	800be16 <get_fat+0xe8>
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	091b      	lsrs	r3, r3, #4
 800be14:	e002      	b.n	800be1c <get_fat+0xee>
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800be1c:	617b      	str	r3, [r7, #20]
			break;
 800be1e:	e055      	b.n	800becc <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800be20:	693b      	ldr	r3, [r7, #16]
 800be22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be24:	693b      	ldr	r3, [r7, #16]
 800be26:	899b      	ldrh	r3, [r3, #12]
 800be28:	085b      	lsrs	r3, r3, #1
 800be2a:	b29b      	uxth	r3, r3
 800be2c:	4619      	mov	r1, r3
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	fbb3 f3f1 	udiv	r3, r3, r1
 800be34:	4413      	add	r3, r2
 800be36:	4619      	mov	r1, r3
 800be38:	6938      	ldr	r0, [r7, #16]
 800be3a:	f7ff febb 	bl	800bbb4 <move_window>
 800be3e:	4603      	mov	r3, r0
 800be40:	2b00      	cmp	r3, #0
 800be42:	d140      	bne.n	800bec6 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	005b      	lsls	r3, r3, #1
 800be4e:	693a      	ldr	r2, [r7, #16]
 800be50:	8992      	ldrh	r2, [r2, #12]
 800be52:	fbb3 f0f2 	udiv	r0, r3, r2
 800be56:	fb02 f200 	mul.w	r2, r2, r0
 800be5a:	1a9b      	subs	r3, r3, r2
 800be5c:	440b      	add	r3, r1
 800be5e:	4618      	mov	r0, r3
 800be60:	f7ff fbf8 	bl	800b654 <ld_word>
 800be64:	4603      	mov	r3, r0
 800be66:	617b      	str	r3, [r7, #20]
			break;
 800be68:	e030      	b.n	800becc <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	899b      	ldrh	r3, [r3, #12]
 800be72:	089b      	lsrs	r3, r3, #2
 800be74:	b29b      	uxth	r3, r3
 800be76:	4619      	mov	r1, r3
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	fbb3 f3f1 	udiv	r3, r3, r1
 800be7e:	4413      	add	r3, r2
 800be80:	4619      	mov	r1, r3
 800be82:	6938      	ldr	r0, [r7, #16]
 800be84:	f7ff fe96 	bl	800bbb4 <move_window>
 800be88:	4603      	mov	r3, r0
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d11d      	bne.n	800beca <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	009b      	lsls	r3, r3, #2
 800be98:	693a      	ldr	r2, [r7, #16]
 800be9a:	8992      	ldrh	r2, [r2, #12]
 800be9c:	fbb3 f0f2 	udiv	r0, r3, r2
 800bea0:	fb02 f200 	mul.w	r2, r2, r0
 800bea4:	1a9b      	subs	r3, r3, r2
 800bea6:	440b      	add	r3, r1
 800bea8:	4618      	mov	r0, r3
 800beaa:	f7ff fbeb 	bl	800b684 <ld_dword>
 800beae:	4603      	mov	r3, r0
 800beb0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800beb4:	617b      	str	r3, [r7, #20]
			break;
 800beb6:	e009      	b.n	800becc <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800beb8:	2301      	movs	r3, #1
 800beba:	617b      	str	r3, [r7, #20]
 800bebc:	e006      	b.n	800becc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bebe:	bf00      	nop
 800bec0:	e004      	b.n	800becc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bec2:	bf00      	nop
 800bec4:	e002      	b.n	800becc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bec6:	bf00      	nop
 800bec8:	e000      	b.n	800becc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800beca:	bf00      	nop
		}
	}

	return val;
 800becc:	697b      	ldr	r3, [r7, #20]
}
 800bece:	4618      	mov	r0, r3
 800bed0:	3718      	adds	r7, #24
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}

0800bed6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bed6:	b590      	push	{r4, r7, lr}
 800bed8:	b089      	sub	sp, #36	; 0x24
 800beda:	af00      	add	r7, sp, #0
 800bedc:	60f8      	str	r0, [r7, #12]
 800bede:	60b9      	str	r1, [r7, #8]
 800bee0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bee2:	2302      	movs	r3, #2
 800bee4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	2b01      	cmp	r3, #1
 800beea:	f240 8102 	bls.w	800c0f2 <put_fat+0x21c>
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	69db      	ldr	r3, [r3, #28]
 800bef2:	68ba      	ldr	r2, [r7, #8]
 800bef4:	429a      	cmp	r2, r3
 800bef6:	f080 80fc 	bcs.w	800c0f2 <put_fat+0x21c>
		switch (fs->fs_type) {
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	781b      	ldrb	r3, [r3, #0]
 800befe:	2b03      	cmp	r3, #3
 800bf00:	f000 80b6 	beq.w	800c070 <put_fat+0x19a>
 800bf04:	2b03      	cmp	r3, #3
 800bf06:	f300 80fd 	bgt.w	800c104 <put_fat+0x22e>
 800bf0a:	2b01      	cmp	r3, #1
 800bf0c:	d003      	beq.n	800bf16 <put_fat+0x40>
 800bf0e:	2b02      	cmp	r3, #2
 800bf10:	f000 8083 	beq.w	800c01a <put_fat+0x144>
 800bf14:	e0f6      	b.n	800c104 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	61bb      	str	r3, [r7, #24]
 800bf1a:	69bb      	ldr	r3, [r7, #24]
 800bf1c:	085b      	lsrs	r3, r3, #1
 800bf1e:	69ba      	ldr	r2, [r7, #24]
 800bf20:	4413      	add	r3, r2
 800bf22:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	899b      	ldrh	r3, [r3, #12]
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	69bb      	ldr	r3, [r7, #24]
 800bf30:	fbb3 f3f1 	udiv	r3, r3, r1
 800bf34:	4413      	add	r3, r2
 800bf36:	4619      	mov	r1, r3
 800bf38:	68f8      	ldr	r0, [r7, #12]
 800bf3a:	f7ff fe3b 	bl	800bbb4 <move_window>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf42:	7ffb      	ldrb	r3, [r7, #31]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	f040 80d6 	bne.w	800c0f6 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bf50:	69bb      	ldr	r3, [r7, #24]
 800bf52:	1c5a      	adds	r2, r3, #1
 800bf54:	61ba      	str	r2, [r7, #24]
 800bf56:	68fa      	ldr	r2, [r7, #12]
 800bf58:	8992      	ldrh	r2, [r2, #12]
 800bf5a:	fbb3 f0f2 	udiv	r0, r3, r2
 800bf5e:	fb02 f200 	mul.w	r2, r2, r0
 800bf62:	1a9b      	subs	r3, r3, r2
 800bf64:	440b      	add	r3, r1
 800bf66:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	f003 0301 	and.w	r3, r3, #1
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d00d      	beq.n	800bf8e <put_fat+0xb8>
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	781b      	ldrb	r3, [r3, #0]
 800bf76:	b25b      	sxtb	r3, r3
 800bf78:	f003 030f 	and.w	r3, r3, #15
 800bf7c:	b25a      	sxtb	r2, r3
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	b2db      	uxtb	r3, r3
 800bf82:	011b      	lsls	r3, r3, #4
 800bf84:	b25b      	sxtb	r3, r3
 800bf86:	4313      	orrs	r3, r2
 800bf88:	b25b      	sxtb	r3, r3
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	e001      	b.n	800bf92 <put_fat+0xbc>
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	b2db      	uxtb	r3, r3
 800bf92:	697a      	ldr	r2, [r7, #20]
 800bf94:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2201      	movs	r2, #1
 800bf9a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	899b      	ldrh	r3, [r3, #12]
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	69bb      	ldr	r3, [r7, #24]
 800bfa8:	fbb3 f3f1 	udiv	r3, r3, r1
 800bfac:	4413      	add	r3, r2
 800bfae:	4619      	mov	r1, r3
 800bfb0:	68f8      	ldr	r0, [r7, #12]
 800bfb2:	f7ff fdff 	bl	800bbb4 <move_window>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bfba:	7ffb      	ldrb	r3, [r7, #31]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	f040 809c 	bne.w	800c0fa <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	899b      	ldrh	r3, [r3, #12]
 800bfcc:	461a      	mov	r2, r3
 800bfce:	69bb      	ldr	r3, [r7, #24]
 800bfd0:	fbb3 f0f2 	udiv	r0, r3, r2
 800bfd4:	fb02 f200 	mul.w	r2, r2, r0
 800bfd8:	1a9b      	subs	r3, r3, r2
 800bfda:	440b      	add	r3, r1
 800bfdc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	f003 0301 	and.w	r3, r3, #1
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d003      	beq.n	800bff0 <put_fat+0x11a>
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	091b      	lsrs	r3, r3, #4
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	e00e      	b.n	800c00e <put_fat+0x138>
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	b25b      	sxtb	r3, r3
 800bff6:	f023 030f 	bic.w	r3, r3, #15
 800bffa:	b25a      	sxtb	r2, r3
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	0a1b      	lsrs	r3, r3, #8
 800c000:	b25b      	sxtb	r3, r3
 800c002:	f003 030f 	and.w	r3, r3, #15
 800c006:	b25b      	sxtb	r3, r3
 800c008:	4313      	orrs	r3, r2
 800c00a:	b25b      	sxtb	r3, r3
 800c00c:	b2db      	uxtb	r3, r3
 800c00e:	697a      	ldr	r2, [r7, #20]
 800c010:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	2201      	movs	r2, #1
 800c016:	70da      	strb	r2, [r3, #3]
			break;
 800c018:	e074      	b.n	800c104 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	899b      	ldrh	r3, [r3, #12]
 800c022:	085b      	lsrs	r3, r3, #1
 800c024:	b29b      	uxth	r3, r3
 800c026:	4619      	mov	r1, r3
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	fbb3 f3f1 	udiv	r3, r3, r1
 800c02e:	4413      	add	r3, r2
 800c030:	4619      	mov	r1, r3
 800c032:	68f8      	ldr	r0, [r7, #12]
 800c034:	f7ff fdbe 	bl	800bbb4 <move_window>
 800c038:	4603      	mov	r3, r0
 800c03a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c03c:	7ffb      	ldrb	r3, [r7, #31]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d15d      	bne.n	800c0fe <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	005b      	lsls	r3, r3, #1
 800c04c:	68fa      	ldr	r2, [r7, #12]
 800c04e:	8992      	ldrh	r2, [r2, #12]
 800c050:	fbb3 f0f2 	udiv	r0, r3, r2
 800c054:	fb02 f200 	mul.w	r2, r2, r0
 800c058:	1a9b      	subs	r3, r3, r2
 800c05a:	440b      	add	r3, r1
 800c05c:	687a      	ldr	r2, [r7, #4]
 800c05e:	b292      	uxth	r2, r2
 800c060:	4611      	mov	r1, r2
 800c062:	4618      	mov	r0, r3
 800c064:	f7ff fb31 	bl	800b6ca <st_word>
			fs->wflag = 1;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	2201      	movs	r2, #1
 800c06c:	70da      	strb	r2, [r3, #3]
			break;
 800c06e:	e049      	b.n	800c104 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	899b      	ldrh	r3, [r3, #12]
 800c078:	089b      	lsrs	r3, r3, #2
 800c07a:	b29b      	uxth	r3, r3
 800c07c:	4619      	mov	r1, r3
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	fbb3 f3f1 	udiv	r3, r3, r1
 800c084:	4413      	add	r3, r2
 800c086:	4619      	mov	r1, r3
 800c088:	68f8      	ldr	r0, [r7, #12]
 800c08a:	f7ff fd93 	bl	800bbb4 <move_window>
 800c08e:	4603      	mov	r3, r0
 800c090:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c092:	7ffb      	ldrb	r3, [r7, #31]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d134      	bne.n	800c102 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	68fa      	ldr	r2, [r7, #12]
 800c0aa:	8992      	ldrh	r2, [r2, #12]
 800c0ac:	fbb3 f0f2 	udiv	r0, r3, r2
 800c0b0:	fb02 f200 	mul.w	r2, r2, r0
 800c0b4:	1a9b      	subs	r3, r3, r2
 800c0b6:	440b      	add	r3, r1
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f7ff fae3 	bl	800b684 <ld_dword>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c0c4:	4323      	orrs	r3, r4
 800c0c6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	68fa      	ldr	r2, [r7, #12]
 800c0d4:	8992      	ldrh	r2, [r2, #12]
 800c0d6:	fbb3 f0f2 	udiv	r0, r3, r2
 800c0da:	fb02 f200 	mul.w	r2, r2, r0
 800c0de:	1a9b      	subs	r3, r3, r2
 800c0e0:	440b      	add	r3, r1
 800c0e2:	6879      	ldr	r1, [r7, #4]
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f7ff fb0b 	bl	800b700 <st_dword>
			fs->wflag = 1;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	70da      	strb	r2, [r3, #3]
			break;
 800c0f0:	e008      	b.n	800c104 <put_fat+0x22e>
		}
	}
 800c0f2:	bf00      	nop
 800c0f4:	e006      	b.n	800c104 <put_fat+0x22e>
			if (res != FR_OK) break;
 800c0f6:	bf00      	nop
 800c0f8:	e004      	b.n	800c104 <put_fat+0x22e>
			if (res != FR_OK) break;
 800c0fa:	bf00      	nop
 800c0fc:	e002      	b.n	800c104 <put_fat+0x22e>
			if (res != FR_OK) break;
 800c0fe:	bf00      	nop
 800c100:	e000      	b.n	800c104 <put_fat+0x22e>
			if (res != FR_OK) break;
 800c102:	bf00      	nop
	return res;
 800c104:	7ffb      	ldrb	r3, [r7, #31]
}
 800c106:	4618      	mov	r0, r3
 800c108:	3724      	adds	r7, #36	; 0x24
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd90      	pop	{r4, r7, pc}

0800c10e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c10e:	b580      	push	{r7, lr}
 800c110:	b088      	sub	sp, #32
 800c112:	af00      	add	r7, sp, #0
 800c114:	60f8      	str	r0, [r7, #12]
 800c116:	60b9      	str	r1, [r7, #8]
 800c118:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c11a:	2300      	movs	r3, #0
 800c11c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	2b01      	cmp	r3, #1
 800c128:	d904      	bls.n	800c134 <remove_chain+0x26>
 800c12a:	69bb      	ldr	r3, [r7, #24]
 800c12c:	69db      	ldr	r3, [r3, #28]
 800c12e:	68ba      	ldr	r2, [r7, #8]
 800c130:	429a      	cmp	r2, r3
 800c132:	d301      	bcc.n	800c138 <remove_chain+0x2a>
 800c134:	2302      	movs	r3, #2
 800c136:	e04b      	b.n	800c1d0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d00c      	beq.n	800c158 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c13e:	f04f 32ff 	mov.w	r2, #4294967295
 800c142:	6879      	ldr	r1, [r7, #4]
 800c144:	69b8      	ldr	r0, [r7, #24]
 800c146:	f7ff fec6 	bl	800bed6 <put_fat>
 800c14a:	4603      	mov	r3, r0
 800c14c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c14e:	7ffb      	ldrb	r3, [r7, #31]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d001      	beq.n	800c158 <remove_chain+0x4a>
 800c154:	7ffb      	ldrb	r3, [r7, #31]
 800c156:	e03b      	b.n	800c1d0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c158:	68b9      	ldr	r1, [r7, #8]
 800c15a:	68f8      	ldr	r0, [r7, #12]
 800c15c:	f7ff fde7 	bl	800bd2e <get_fat>
 800c160:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d031      	beq.n	800c1cc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	d101      	bne.n	800c172 <remove_chain+0x64>
 800c16e:	2302      	movs	r3, #2
 800c170:	e02e      	b.n	800c1d0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c178:	d101      	bne.n	800c17e <remove_chain+0x70>
 800c17a:	2301      	movs	r3, #1
 800c17c:	e028      	b.n	800c1d0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c17e:	2200      	movs	r2, #0
 800c180:	68b9      	ldr	r1, [r7, #8]
 800c182:	69b8      	ldr	r0, [r7, #24]
 800c184:	f7ff fea7 	bl	800bed6 <put_fat>
 800c188:	4603      	mov	r3, r0
 800c18a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c18c:	7ffb      	ldrb	r3, [r7, #31]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d001      	beq.n	800c196 <remove_chain+0x88>
 800c192:	7ffb      	ldrb	r3, [r7, #31]
 800c194:	e01c      	b.n	800c1d0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c196:	69bb      	ldr	r3, [r7, #24]
 800c198:	699a      	ldr	r2, [r3, #24]
 800c19a:	69bb      	ldr	r3, [r7, #24]
 800c19c:	69db      	ldr	r3, [r3, #28]
 800c19e:	3b02      	subs	r3, #2
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d20b      	bcs.n	800c1bc <remove_chain+0xae>
			fs->free_clst++;
 800c1a4:	69bb      	ldr	r3, [r7, #24]
 800c1a6:	699b      	ldr	r3, [r3, #24]
 800c1a8:	1c5a      	adds	r2, r3, #1
 800c1aa:	69bb      	ldr	r3, [r7, #24]
 800c1ac:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800c1ae:	69bb      	ldr	r3, [r7, #24]
 800c1b0:	791b      	ldrb	r3, [r3, #4]
 800c1b2:	f043 0301 	orr.w	r3, r3, #1
 800c1b6:	b2da      	uxtb	r2, r3
 800c1b8:	69bb      	ldr	r3, [r7, #24]
 800c1ba:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c1c0:	69bb      	ldr	r3, [r7, #24]
 800c1c2:	69db      	ldr	r3, [r3, #28]
 800c1c4:	68ba      	ldr	r2, [r7, #8]
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d3c6      	bcc.n	800c158 <remove_chain+0x4a>
 800c1ca:	e000      	b.n	800c1ce <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c1cc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c1ce:	2300      	movs	r3, #0
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3720      	adds	r7, #32
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}

0800c1d8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b088      	sub	sp, #32
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d10d      	bne.n	800c20a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	695b      	ldr	r3, [r3, #20]
 800c1f2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c1f4:	69bb      	ldr	r3, [r7, #24]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d004      	beq.n	800c204 <create_chain+0x2c>
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	69db      	ldr	r3, [r3, #28]
 800c1fe:	69ba      	ldr	r2, [r7, #24]
 800c200:	429a      	cmp	r2, r3
 800c202:	d31b      	bcc.n	800c23c <create_chain+0x64>
 800c204:	2301      	movs	r3, #1
 800c206:	61bb      	str	r3, [r7, #24]
 800c208:	e018      	b.n	800c23c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c20a:	6839      	ldr	r1, [r7, #0]
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f7ff fd8e 	bl	800bd2e <get_fat>
 800c212:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2b01      	cmp	r3, #1
 800c218:	d801      	bhi.n	800c21e <create_chain+0x46>
 800c21a:	2301      	movs	r3, #1
 800c21c:	e070      	b.n	800c300 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c224:	d101      	bne.n	800c22a <create_chain+0x52>
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	e06a      	b.n	800c300 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	69db      	ldr	r3, [r3, #28]
 800c22e:	68fa      	ldr	r2, [r7, #12]
 800c230:	429a      	cmp	r2, r3
 800c232:	d201      	bcs.n	800c238 <create_chain+0x60>
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	e063      	b.n	800c300 <create_chain+0x128>
		scl = clst;
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c23c:	69bb      	ldr	r3, [r7, #24]
 800c23e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c240:	69fb      	ldr	r3, [r7, #28]
 800c242:	3301      	adds	r3, #1
 800c244:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	69db      	ldr	r3, [r3, #28]
 800c24a:	69fa      	ldr	r2, [r7, #28]
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d307      	bcc.n	800c260 <create_chain+0x88>
				ncl = 2;
 800c250:	2302      	movs	r3, #2
 800c252:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c254:	69fa      	ldr	r2, [r7, #28]
 800c256:	69bb      	ldr	r3, [r7, #24]
 800c258:	429a      	cmp	r2, r3
 800c25a:	d901      	bls.n	800c260 <create_chain+0x88>
 800c25c:	2300      	movs	r3, #0
 800c25e:	e04f      	b.n	800c300 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c260:	69f9      	ldr	r1, [r7, #28]
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f7ff fd63 	bl	800bd2e <get_fat>
 800c268:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d00e      	beq.n	800c28e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	2b01      	cmp	r3, #1
 800c274:	d003      	beq.n	800c27e <create_chain+0xa6>
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c27c:	d101      	bne.n	800c282 <create_chain+0xaa>
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	e03e      	b.n	800c300 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c282:	69fa      	ldr	r2, [r7, #28]
 800c284:	69bb      	ldr	r3, [r7, #24]
 800c286:	429a      	cmp	r2, r3
 800c288:	d1da      	bne.n	800c240 <create_chain+0x68>
 800c28a:	2300      	movs	r3, #0
 800c28c:	e038      	b.n	800c300 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c28e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c290:	f04f 32ff 	mov.w	r2, #4294967295
 800c294:	69f9      	ldr	r1, [r7, #28]
 800c296:	6938      	ldr	r0, [r7, #16]
 800c298:	f7ff fe1d 	bl	800bed6 <put_fat>
 800c29c:	4603      	mov	r3, r0
 800c29e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c2a0:	7dfb      	ldrb	r3, [r7, #23]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d109      	bne.n	800c2ba <create_chain+0xe2>
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d006      	beq.n	800c2ba <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c2ac:	69fa      	ldr	r2, [r7, #28]
 800c2ae:	6839      	ldr	r1, [r7, #0]
 800c2b0:	6938      	ldr	r0, [r7, #16]
 800c2b2:	f7ff fe10 	bl	800bed6 <put_fat>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c2ba:	7dfb      	ldrb	r3, [r7, #23]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d116      	bne.n	800c2ee <create_chain+0x116>
		fs->last_clst = ncl;
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	69fa      	ldr	r2, [r7, #28]
 800c2c4:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	699a      	ldr	r2, [r3, #24]
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	69db      	ldr	r3, [r3, #28]
 800c2ce:	3b02      	subs	r3, #2
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	d804      	bhi.n	800c2de <create_chain+0x106>
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	699b      	ldr	r3, [r3, #24]
 800c2d8:	1e5a      	subs	r2, r3, #1
 800c2da:	693b      	ldr	r3, [r7, #16]
 800c2dc:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	791b      	ldrb	r3, [r3, #4]
 800c2e2:	f043 0301 	orr.w	r3, r3, #1
 800c2e6:	b2da      	uxtb	r2, r3
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	711a      	strb	r2, [r3, #4]
 800c2ec:	e007      	b.n	800c2fe <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c2ee:	7dfb      	ldrb	r3, [r7, #23]
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	d102      	bne.n	800c2fa <create_chain+0x122>
 800c2f4:	f04f 33ff 	mov.w	r3, #4294967295
 800c2f8:	e000      	b.n	800c2fc <create_chain+0x124>
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c2fe:	69fb      	ldr	r3, [r7, #28]
}
 800c300:	4618      	mov	r0, r3
 800c302:	3720      	adds	r7, #32
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}

0800c308 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c308:	b480      	push	{r7}
 800c30a:	b087      	sub	sp, #28
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c31c:	3304      	adds	r3, #4
 800c31e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	899b      	ldrh	r3, [r3, #12]
 800c324:	461a      	mov	r2, r3
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	fbb3 f3f2 	udiv	r3, r3, r2
 800c32c:	68fa      	ldr	r2, [r7, #12]
 800c32e:	8952      	ldrh	r2, [r2, #10]
 800c330:	fbb3 f3f2 	udiv	r3, r3, r2
 800c334:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	1d1a      	adds	r2, r3, #4
 800c33a:	613a      	str	r2, [r7, #16]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d101      	bne.n	800c34a <clmt_clust+0x42>
 800c346:	2300      	movs	r3, #0
 800c348:	e010      	b.n	800c36c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800c34a:	697a      	ldr	r2, [r7, #20]
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	429a      	cmp	r2, r3
 800c350:	d307      	bcc.n	800c362 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800c352:	697a      	ldr	r2, [r7, #20]
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	1ad3      	subs	r3, r2, r3
 800c358:	617b      	str	r3, [r7, #20]
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	3304      	adds	r3, #4
 800c35e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c360:	e7e9      	b.n	800c336 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800c362:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	681a      	ldr	r2, [r3, #0]
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	4413      	add	r3, r2
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	371c      	adds	r7, #28
 800c370:	46bd      	mov	sp, r7
 800c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c376:	4770      	bx	lr

0800c378 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b086      	sub	sp, #24
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c38e:	d204      	bcs.n	800c39a <dir_sdi+0x22>
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	f003 031f 	and.w	r3, r3, #31
 800c396:	2b00      	cmp	r3, #0
 800c398:	d001      	beq.n	800c39e <dir_sdi+0x26>
		return FR_INT_ERR;
 800c39a:	2302      	movs	r3, #2
 800c39c:	e071      	b.n	800c482 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	683a      	ldr	r2, [r7, #0]
 800c3a2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	689b      	ldr	r3, [r3, #8]
 800c3a8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d106      	bne.n	800c3be <dir_sdi+0x46>
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	781b      	ldrb	r3, [r3, #0]
 800c3b4:	2b02      	cmp	r3, #2
 800c3b6:	d902      	bls.n	800c3be <dir_sdi+0x46>
		clst = fs->dirbase;
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3bc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d10c      	bne.n	800c3de <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	095b      	lsrs	r3, r3, #5
 800c3c8:	693a      	ldr	r2, [r7, #16]
 800c3ca:	8912      	ldrh	r2, [r2, #8]
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d301      	bcc.n	800c3d4 <dir_sdi+0x5c>
 800c3d0:	2302      	movs	r3, #2
 800c3d2:	e056      	b.n	800c482 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	61da      	str	r2, [r3, #28]
 800c3dc:	e02d      	b.n	800c43a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c3de:	693b      	ldr	r3, [r7, #16]
 800c3e0:	895b      	ldrh	r3, [r3, #10]
 800c3e2:	461a      	mov	r2, r3
 800c3e4:	693b      	ldr	r3, [r7, #16]
 800c3e6:	899b      	ldrh	r3, [r3, #12]
 800c3e8:	fb03 f302 	mul.w	r3, r3, r2
 800c3ec:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c3ee:	e019      	b.n	800c424 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6979      	ldr	r1, [r7, #20]
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f7ff fc9a 	bl	800bd2e <get_fat>
 800c3fa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c402:	d101      	bne.n	800c408 <dir_sdi+0x90>
 800c404:	2301      	movs	r3, #1
 800c406:	e03c      	b.n	800c482 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	2b01      	cmp	r3, #1
 800c40c:	d904      	bls.n	800c418 <dir_sdi+0xa0>
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	69db      	ldr	r3, [r3, #28]
 800c412:	697a      	ldr	r2, [r7, #20]
 800c414:	429a      	cmp	r2, r3
 800c416:	d301      	bcc.n	800c41c <dir_sdi+0xa4>
 800c418:	2302      	movs	r3, #2
 800c41a:	e032      	b.n	800c482 <dir_sdi+0x10a>
			ofs -= csz;
 800c41c:	683a      	ldr	r2, [r7, #0]
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	1ad3      	subs	r3, r2, r3
 800c422:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c424:	683a      	ldr	r2, [r7, #0]
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	429a      	cmp	r2, r3
 800c42a:	d2e1      	bcs.n	800c3f0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800c42c:	6979      	ldr	r1, [r7, #20]
 800c42e:	6938      	ldr	r0, [r7, #16]
 800c430:	f7ff fc5e 	bl	800bcf0 <clust2sect>
 800c434:	4602      	mov	r2, r0
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	697a      	ldr	r2, [r7, #20]
 800c43e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	69db      	ldr	r3, [r3, #28]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d101      	bne.n	800c44c <dir_sdi+0xd4>
 800c448:	2302      	movs	r3, #2
 800c44a:	e01a      	b.n	800c482 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	69da      	ldr	r2, [r3, #28]
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	899b      	ldrh	r3, [r3, #12]
 800c454:	4619      	mov	r1, r3
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	fbb3 f3f1 	udiv	r3, r3, r1
 800c45c:	441a      	add	r2, r3
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	899b      	ldrh	r3, [r3, #12]
 800c46c:	461a      	mov	r2, r3
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	fbb3 f0f2 	udiv	r0, r3, r2
 800c474:	fb02 f200 	mul.w	r2, r2, r0
 800c478:	1a9b      	subs	r3, r3, r2
 800c47a:	18ca      	adds	r2, r1, r3
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c480:	2300      	movs	r3, #0
}
 800c482:	4618      	mov	r0, r3
 800c484:	3718      	adds	r7, #24
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}

0800c48a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c48a:	b580      	push	{r7, lr}
 800c48c:	b086      	sub	sp, #24
 800c48e:	af00      	add	r7, sp, #0
 800c490:	6078      	str	r0, [r7, #4]
 800c492:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	695b      	ldr	r3, [r3, #20]
 800c49e:	3320      	adds	r3, #32
 800c4a0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	69db      	ldr	r3, [r3, #28]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d003      	beq.n	800c4b2 <dir_next+0x28>
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c4b0:	d301      	bcc.n	800c4b6 <dir_next+0x2c>
 800c4b2:	2304      	movs	r3, #4
 800c4b4:	e0bb      	b.n	800c62e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	899b      	ldrh	r3, [r3, #12]
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	fbb3 f1f2 	udiv	r1, r3, r2
 800c4c2:	fb02 f201 	mul.w	r2, r2, r1
 800c4c6:	1a9b      	subs	r3, r3, r2
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	f040 809d 	bne.w	800c608 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	69db      	ldr	r3, [r3, #28]
 800c4d2:	1c5a      	adds	r2, r3, #1
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	699b      	ldr	r3, [r3, #24]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d10b      	bne.n	800c4f8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	095b      	lsrs	r3, r3, #5
 800c4e4:	68fa      	ldr	r2, [r7, #12]
 800c4e6:	8912      	ldrh	r2, [r2, #8]
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	f0c0 808d 	bcc.w	800c608 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	61da      	str	r2, [r3, #28]
 800c4f4:	2304      	movs	r3, #4
 800c4f6:	e09a      	b.n	800c62e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	899b      	ldrh	r3, [r3, #12]
 800c4fc:	461a      	mov	r2, r3
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	fbb3 f3f2 	udiv	r3, r3, r2
 800c504:	68fa      	ldr	r2, [r7, #12]
 800c506:	8952      	ldrh	r2, [r2, #10]
 800c508:	3a01      	subs	r2, #1
 800c50a:	4013      	ands	r3, r2
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d17b      	bne.n	800c608 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c510:	687a      	ldr	r2, [r7, #4]
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	699b      	ldr	r3, [r3, #24]
 800c516:	4619      	mov	r1, r3
 800c518:	4610      	mov	r0, r2
 800c51a:	f7ff fc08 	bl	800bd2e <get_fat>
 800c51e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	2b01      	cmp	r3, #1
 800c524:	d801      	bhi.n	800c52a <dir_next+0xa0>
 800c526:	2302      	movs	r3, #2
 800c528:	e081      	b.n	800c62e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c530:	d101      	bne.n	800c536 <dir_next+0xac>
 800c532:	2301      	movs	r3, #1
 800c534:	e07b      	b.n	800c62e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	69db      	ldr	r3, [r3, #28]
 800c53a:	697a      	ldr	r2, [r7, #20]
 800c53c:	429a      	cmp	r2, r3
 800c53e:	d359      	bcc.n	800c5f4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d104      	bne.n	800c550 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2200      	movs	r2, #0
 800c54a:	61da      	str	r2, [r3, #28]
 800c54c:	2304      	movs	r3, #4
 800c54e:	e06e      	b.n	800c62e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c550:	687a      	ldr	r2, [r7, #4]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	699b      	ldr	r3, [r3, #24]
 800c556:	4619      	mov	r1, r3
 800c558:	4610      	mov	r0, r2
 800c55a:	f7ff fe3d 	bl	800c1d8 <create_chain>
 800c55e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d101      	bne.n	800c56a <dir_next+0xe0>
 800c566:	2307      	movs	r3, #7
 800c568:	e061      	b.n	800c62e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	2b01      	cmp	r3, #1
 800c56e:	d101      	bne.n	800c574 <dir_next+0xea>
 800c570:	2302      	movs	r3, #2
 800c572:	e05c      	b.n	800c62e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c57a:	d101      	bne.n	800c580 <dir_next+0xf6>
 800c57c:	2301      	movs	r3, #1
 800c57e:	e056      	b.n	800c62e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c580:	68f8      	ldr	r0, [r7, #12]
 800c582:	f7ff fad3 	bl	800bb2c <sync_window>
 800c586:	4603      	mov	r3, r0
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d001      	beq.n	800c590 <dir_next+0x106>
 800c58c:	2301      	movs	r3, #1
 800c58e:	e04e      	b.n	800c62e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	899b      	ldrh	r3, [r3, #12]
 800c59a:	461a      	mov	r2, r3
 800c59c:	2100      	movs	r1, #0
 800c59e:	f7ff f8fc 	bl	800b79a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	613b      	str	r3, [r7, #16]
 800c5a6:	6979      	ldr	r1, [r7, #20]
 800c5a8:	68f8      	ldr	r0, [r7, #12]
 800c5aa:	f7ff fba1 	bl	800bcf0 <clust2sect>
 800c5ae:	4602      	mov	r2, r0
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	635a      	str	r2, [r3, #52]	; 0x34
 800c5b4:	e012      	b.n	800c5dc <dir_next+0x152>
						fs->wflag = 1;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	2201      	movs	r2, #1
 800c5ba:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c5bc:	68f8      	ldr	r0, [r7, #12]
 800c5be:	f7ff fab5 	bl	800bb2c <sync_window>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d001      	beq.n	800c5cc <dir_next+0x142>
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	e030      	b.n	800c62e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	3301      	adds	r3, #1
 800c5d0:	613b      	str	r3, [r7, #16]
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5d6:	1c5a      	adds	r2, r3, #1
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	635a      	str	r2, [r3, #52]	; 0x34
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	895b      	ldrh	r3, [r3, #10]
 800c5e0:	461a      	mov	r2, r3
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d3e6      	bcc.n	800c5b6 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c5ec:	693b      	ldr	r3, [r7, #16]
 800c5ee:	1ad2      	subs	r2, r2, r3
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	697a      	ldr	r2, [r7, #20]
 800c5f8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c5fa:	6979      	ldr	r1, [r7, #20]
 800c5fc:	68f8      	ldr	r0, [r7, #12]
 800c5fe:	f7ff fb77 	bl	800bcf0 <clust2sect>
 800c602:	4602      	mov	r2, r0
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	68ba      	ldr	r2, [r7, #8]
 800c60c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	899b      	ldrh	r3, [r3, #12]
 800c618:	461a      	mov	r2, r3
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	fbb3 f0f2 	udiv	r0, r3, r2
 800c620:	fb02 f200 	mul.w	r2, r2, r0
 800c624:	1a9b      	subs	r3, r3, r2
 800c626:	18ca      	adds	r2, r1, r3
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c62c:	2300      	movs	r3, #0
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3718      	adds	r7, #24
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}

0800c636 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c636:	b580      	push	{r7, lr}
 800c638:	b086      	sub	sp, #24
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	6078      	str	r0, [r7, #4]
 800c63e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c646:	2100      	movs	r1, #0
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f7ff fe95 	bl	800c378 <dir_sdi>
 800c64e:	4603      	mov	r3, r0
 800c650:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c652:	7dfb      	ldrb	r3, [r7, #23]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d12b      	bne.n	800c6b0 <dir_alloc+0x7a>
		n = 0;
 800c658:	2300      	movs	r3, #0
 800c65a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	69db      	ldr	r3, [r3, #28]
 800c660:	4619      	mov	r1, r3
 800c662:	68f8      	ldr	r0, [r7, #12]
 800c664:	f7ff faa6 	bl	800bbb4 <move_window>
 800c668:	4603      	mov	r3, r0
 800c66a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c66c:	7dfb      	ldrb	r3, [r7, #23]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d11d      	bne.n	800c6ae <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	6a1b      	ldr	r3, [r3, #32]
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	2be5      	cmp	r3, #229	; 0xe5
 800c67a:	d004      	beq.n	800c686 <dir_alloc+0x50>
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6a1b      	ldr	r3, [r3, #32]
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d107      	bne.n	800c696 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c686:	693b      	ldr	r3, [r7, #16]
 800c688:	3301      	adds	r3, #1
 800c68a:	613b      	str	r3, [r7, #16]
 800c68c:	693a      	ldr	r2, [r7, #16]
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	429a      	cmp	r2, r3
 800c692:	d102      	bne.n	800c69a <dir_alloc+0x64>
 800c694:	e00c      	b.n	800c6b0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c696:	2300      	movs	r3, #0
 800c698:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c69a:	2101      	movs	r1, #1
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f7ff fef4 	bl	800c48a <dir_next>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c6a6:	7dfb      	ldrb	r3, [r7, #23]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d0d7      	beq.n	800c65c <dir_alloc+0x26>
 800c6ac:	e000      	b.n	800c6b0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c6ae:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c6b0:	7dfb      	ldrb	r3, [r7, #23]
 800c6b2:	2b04      	cmp	r3, #4
 800c6b4:	d101      	bne.n	800c6ba <dir_alloc+0x84>
 800c6b6:	2307      	movs	r3, #7
 800c6b8:	75fb      	strb	r3, [r7, #23]
	return res;
 800c6ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3718      	adds	r7, #24
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}

0800c6c4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b084      	sub	sp, #16
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
 800c6cc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	331a      	adds	r3, #26
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f7fe ffbe 	bl	800b654 <ld_word>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	781b      	ldrb	r3, [r3, #0]
 800c6e0:	2b03      	cmp	r3, #3
 800c6e2:	d109      	bne.n	800c6f8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	3314      	adds	r3, #20
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f7fe ffb3 	bl	800b654 <ld_word>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	041b      	lsls	r3, r3, #16
 800c6f2:	68fa      	ldr	r2, [r7, #12]
 800c6f4:	4313      	orrs	r3, r2
 800c6f6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3710      	adds	r7, #16
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}

0800c702 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c702:	b580      	push	{r7, lr}
 800c704:	b084      	sub	sp, #16
 800c706:	af00      	add	r7, sp, #0
 800c708:	60f8      	str	r0, [r7, #12]
 800c70a:	60b9      	str	r1, [r7, #8]
 800c70c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	331a      	adds	r3, #26
 800c712:	687a      	ldr	r2, [r7, #4]
 800c714:	b292      	uxth	r2, r2
 800c716:	4611      	mov	r1, r2
 800c718:	4618      	mov	r0, r3
 800c71a:	f7fe ffd6 	bl	800b6ca <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	2b03      	cmp	r3, #3
 800c724:	d109      	bne.n	800c73a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	f103 0214 	add.w	r2, r3, #20
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	0c1b      	lsrs	r3, r3, #16
 800c730:	b29b      	uxth	r3, r3
 800c732:	4619      	mov	r1, r3
 800c734:	4610      	mov	r0, r2
 800c736:	f7fe ffc8 	bl	800b6ca <st_word>
	}
}
 800c73a:	bf00      	nop
 800c73c:	3710      	adds	r7, #16
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
	...

0800c744 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c744:	b590      	push	{r4, r7, lr}
 800c746:	b087      	sub	sp, #28
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
 800c74c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	331a      	adds	r3, #26
 800c752:	4618      	mov	r0, r3
 800c754:	f7fe ff7e 	bl	800b654 <ld_word>
 800c758:	4603      	mov	r3, r0
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d001      	beq.n	800c762 <cmp_lfn+0x1e>
 800c75e:	2300      	movs	r3, #0
 800c760:	e059      	b.n	800c816 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c76a:	1e5a      	subs	r2, r3, #1
 800c76c:	4613      	mov	r3, r2
 800c76e:	005b      	lsls	r3, r3, #1
 800c770:	4413      	add	r3, r2
 800c772:	009b      	lsls	r3, r3, #2
 800c774:	4413      	add	r3, r2
 800c776:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c778:	2301      	movs	r3, #1
 800c77a:	81fb      	strh	r3, [r7, #14]
 800c77c:	2300      	movs	r3, #0
 800c77e:	613b      	str	r3, [r7, #16]
 800c780:	e033      	b.n	800c7ea <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c782:	4a27      	ldr	r2, [pc, #156]	; (800c820 <cmp_lfn+0xdc>)
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	4413      	add	r3, r2
 800c788:	781b      	ldrb	r3, [r3, #0]
 800c78a:	461a      	mov	r2, r3
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	4413      	add	r3, r2
 800c790:	4618      	mov	r0, r3
 800c792:	f7fe ff5f 	bl	800b654 <ld_word>
 800c796:	4603      	mov	r3, r0
 800c798:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c79a:	89fb      	ldrh	r3, [r7, #14]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d01a      	beq.n	800c7d6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	2b1f      	cmp	r3, #31
 800c7a4:	d812      	bhi.n	800c7cc <cmp_lfn+0x88>
 800c7a6:	89bb      	ldrh	r3, [r7, #12]
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f001 fd79 	bl	800e2a0 <ff_wtoupper>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	461c      	mov	r4, r3
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	1c5a      	adds	r2, r3, #1
 800c7b6:	617a      	str	r2, [r7, #20]
 800c7b8:	005b      	lsls	r3, r3, #1
 800c7ba:	687a      	ldr	r2, [r7, #4]
 800c7bc:	4413      	add	r3, r2
 800c7be:	881b      	ldrh	r3, [r3, #0]
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f001 fd6d 	bl	800e2a0 <ff_wtoupper>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	429c      	cmp	r4, r3
 800c7ca:	d001      	beq.n	800c7d0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	e022      	b.n	800c816 <cmp_lfn+0xd2>
			}
			wc = uc;
 800c7d0:	89bb      	ldrh	r3, [r7, #12]
 800c7d2:	81fb      	strh	r3, [r7, #14]
 800c7d4:	e006      	b.n	800c7e4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c7d6:	89bb      	ldrh	r3, [r7, #12]
 800c7d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	d001      	beq.n	800c7e4 <cmp_lfn+0xa0>
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	e018      	b.n	800c816 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	3301      	adds	r3, #1
 800c7e8:	613b      	str	r3, [r7, #16]
 800c7ea:	693b      	ldr	r3, [r7, #16]
 800c7ec:	2b0c      	cmp	r3, #12
 800c7ee:	d9c8      	bls.n	800c782 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	781b      	ldrb	r3, [r3, #0]
 800c7f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d00b      	beq.n	800c814 <cmp_lfn+0xd0>
 800c7fc:	89fb      	ldrh	r3, [r7, #14]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d008      	beq.n	800c814 <cmp_lfn+0xd0>
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	005b      	lsls	r3, r3, #1
 800c806:	687a      	ldr	r2, [r7, #4]
 800c808:	4413      	add	r3, r2
 800c80a:	881b      	ldrh	r3, [r3, #0]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d001      	beq.n	800c814 <cmp_lfn+0xd0>
 800c810:	2300      	movs	r3, #0
 800c812:	e000      	b.n	800c816 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c814:	2301      	movs	r3, #1
}
 800c816:	4618      	mov	r0, r3
 800c818:	371c      	adds	r7, #28
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd90      	pop	{r4, r7, pc}
 800c81e:	bf00      	nop
 800c820:	080160c4 	.word	0x080160c4

0800c824 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b088      	sub	sp, #32
 800c828:	af00      	add	r7, sp, #0
 800c82a:	60f8      	str	r0, [r7, #12]
 800c82c:	60b9      	str	r1, [r7, #8]
 800c82e:	4611      	mov	r1, r2
 800c830:	461a      	mov	r2, r3
 800c832:	460b      	mov	r3, r1
 800c834:	71fb      	strb	r3, [r7, #7]
 800c836:	4613      	mov	r3, r2
 800c838:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	330d      	adds	r3, #13
 800c83e:	79ba      	ldrb	r2, [r7, #6]
 800c840:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	330b      	adds	r3, #11
 800c846:	220f      	movs	r2, #15
 800c848:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	330c      	adds	r3, #12
 800c84e:	2200      	movs	r2, #0
 800c850:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	331a      	adds	r3, #26
 800c856:	2100      	movs	r1, #0
 800c858:	4618      	mov	r0, r3
 800c85a:	f7fe ff36 	bl	800b6ca <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c85e:	79fb      	ldrb	r3, [r7, #7]
 800c860:	1e5a      	subs	r2, r3, #1
 800c862:	4613      	mov	r3, r2
 800c864:	005b      	lsls	r3, r3, #1
 800c866:	4413      	add	r3, r2
 800c868:	009b      	lsls	r3, r3, #2
 800c86a:	4413      	add	r3, r2
 800c86c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c86e:	2300      	movs	r3, #0
 800c870:	82fb      	strh	r3, [r7, #22]
 800c872:	2300      	movs	r3, #0
 800c874:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c876:	8afb      	ldrh	r3, [r7, #22]
 800c878:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d007      	beq.n	800c890 <put_lfn+0x6c>
 800c880:	69fb      	ldr	r3, [r7, #28]
 800c882:	1c5a      	adds	r2, r3, #1
 800c884:	61fa      	str	r2, [r7, #28]
 800c886:	005b      	lsls	r3, r3, #1
 800c888:	68fa      	ldr	r2, [r7, #12]
 800c88a:	4413      	add	r3, r2
 800c88c:	881b      	ldrh	r3, [r3, #0]
 800c88e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c890:	4a17      	ldr	r2, [pc, #92]	; (800c8f0 <put_lfn+0xcc>)
 800c892:	69bb      	ldr	r3, [r7, #24]
 800c894:	4413      	add	r3, r2
 800c896:	781b      	ldrb	r3, [r3, #0]
 800c898:	461a      	mov	r2, r3
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	4413      	add	r3, r2
 800c89e:	8afa      	ldrh	r2, [r7, #22]
 800c8a0:	4611      	mov	r1, r2
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f7fe ff11 	bl	800b6ca <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c8a8:	8afb      	ldrh	r3, [r7, #22]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d102      	bne.n	800c8b4 <put_lfn+0x90>
 800c8ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c8b2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c8b4:	69bb      	ldr	r3, [r7, #24]
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	61bb      	str	r3, [r7, #24]
 800c8ba:	69bb      	ldr	r3, [r7, #24]
 800c8bc:	2b0c      	cmp	r3, #12
 800c8be:	d9da      	bls.n	800c876 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c8c0:	8afb      	ldrh	r3, [r7, #22]
 800c8c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d006      	beq.n	800c8d8 <put_lfn+0xb4>
 800c8ca:	69fb      	ldr	r3, [r7, #28]
 800c8cc:	005b      	lsls	r3, r3, #1
 800c8ce:	68fa      	ldr	r2, [r7, #12]
 800c8d0:	4413      	add	r3, r2
 800c8d2:	881b      	ldrh	r3, [r3, #0]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d103      	bne.n	800c8e0 <put_lfn+0xbc>
 800c8d8:	79fb      	ldrb	r3, [r7, #7]
 800c8da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8de:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	79fa      	ldrb	r2, [r7, #7]
 800c8e4:	701a      	strb	r2, [r3, #0]
}
 800c8e6:	bf00      	nop
 800c8e8:	3720      	adds	r7, #32
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop
 800c8f0:	080160c4 	.word	0x080160c4

0800c8f4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b08c      	sub	sp, #48	; 0x30
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	60f8      	str	r0, [r7, #12]
 800c8fc:	60b9      	str	r1, [r7, #8]
 800c8fe:	607a      	str	r2, [r7, #4]
 800c900:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c902:	220b      	movs	r2, #11
 800c904:	68b9      	ldr	r1, [r7, #8]
 800c906:	68f8      	ldr	r0, [r7, #12]
 800c908:	f7fe ff26 	bl	800b758 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	2b05      	cmp	r3, #5
 800c910:	d92b      	bls.n	800c96a <gen_numname+0x76>
		sr = seq;
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c916:	e022      	b.n	800c95e <gen_numname+0x6a>
			wc = *lfn++;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	1c9a      	adds	r2, r3, #2
 800c91c:	607a      	str	r2, [r7, #4]
 800c91e:	881b      	ldrh	r3, [r3, #0]
 800c920:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800c922:	2300      	movs	r3, #0
 800c924:	62bb      	str	r3, [r7, #40]	; 0x28
 800c926:	e017      	b.n	800c958 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800c928:	69fb      	ldr	r3, [r7, #28]
 800c92a:	005a      	lsls	r2, r3, #1
 800c92c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c92e:	f003 0301 	and.w	r3, r3, #1
 800c932:	4413      	add	r3, r2
 800c934:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c936:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c938:	085b      	lsrs	r3, r3, #1
 800c93a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c93c:	69fb      	ldr	r3, [r7, #28]
 800c93e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c942:	2b00      	cmp	r3, #0
 800c944:	d005      	beq.n	800c952 <gen_numname+0x5e>
 800c946:	69fb      	ldr	r3, [r7, #28]
 800c948:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800c94c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800c950:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c954:	3301      	adds	r3, #1
 800c956:	62bb      	str	r3, [r7, #40]	; 0x28
 800c958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c95a:	2b0f      	cmp	r3, #15
 800c95c:	d9e4      	bls.n	800c928 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	881b      	ldrh	r3, [r3, #0]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d1d8      	bne.n	800c918 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c966:	69fb      	ldr	r3, [r7, #28]
 800c968:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c96a:	2307      	movs	r3, #7
 800c96c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	b2db      	uxtb	r3, r3
 800c972:	f003 030f 	and.w	r3, r3, #15
 800c976:	b2db      	uxtb	r3, r3
 800c978:	3330      	adds	r3, #48	; 0x30
 800c97a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800c97e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c982:	2b39      	cmp	r3, #57	; 0x39
 800c984:	d904      	bls.n	800c990 <gen_numname+0x9c>
 800c986:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c98a:	3307      	adds	r3, #7
 800c98c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800c990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c992:	1e5a      	subs	r2, r3, #1
 800c994:	62ba      	str	r2, [r7, #40]	; 0x28
 800c996:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c99a:	4413      	add	r3, r2
 800c99c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c9a0:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	091b      	lsrs	r3, r3, #4
 800c9a8:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d1de      	bne.n	800c96e <gen_numname+0x7a>
	ns[i] = '~';
 800c9b0:	f107 0214 	add.w	r2, r7, #20
 800c9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b6:	4413      	add	r3, r2
 800c9b8:	227e      	movs	r2, #126	; 0x7e
 800c9ba:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c9bc:	2300      	movs	r3, #0
 800c9be:	627b      	str	r3, [r7, #36]	; 0x24
 800c9c0:	e002      	b.n	800c9c8 <gen_numname+0xd4>
 800c9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c4:	3301      	adds	r3, #1
 800c9c6:	627b      	str	r3, [r7, #36]	; 0x24
 800c9c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d205      	bcs.n	800c9dc <gen_numname+0xe8>
 800c9d0:	68fa      	ldr	r2, [r7, #12]
 800c9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d4:	4413      	add	r3, r2
 800c9d6:	781b      	ldrb	r3, [r3, #0]
 800c9d8:	2b20      	cmp	r3, #32
 800c9da:	d1f2      	bne.n	800c9c2 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9de:	2b07      	cmp	r3, #7
 800c9e0:	d808      	bhi.n	800c9f4 <gen_numname+0x100>
 800c9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e4:	1c5a      	adds	r2, r3, #1
 800c9e6:	62ba      	str	r2, [r7, #40]	; 0x28
 800c9e8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c9ec:	4413      	add	r3, r2
 800c9ee:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c9f2:	e000      	b.n	800c9f6 <gen_numname+0x102>
 800c9f4:	2120      	movs	r1, #32
 800c9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f8:	1c5a      	adds	r2, r3, #1
 800c9fa:	627a      	str	r2, [r7, #36]	; 0x24
 800c9fc:	68fa      	ldr	r2, [r7, #12]
 800c9fe:	4413      	add	r3, r2
 800ca00:	460a      	mov	r2, r1
 800ca02:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ca04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca06:	2b07      	cmp	r3, #7
 800ca08:	d9e8      	bls.n	800c9dc <gen_numname+0xe8>
}
 800ca0a:	bf00      	nop
 800ca0c:	bf00      	nop
 800ca0e:	3730      	adds	r7, #48	; 0x30
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}

0800ca14 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ca14:	b480      	push	{r7}
 800ca16:	b085      	sub	sp, #20
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ca20:	230b      	movs	r3, #11
 800ca22:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ca24:	7bfb      	ldrb	r3, [r7, #15]
 800ca26:	b2da      	uxtb	r2, r3
 800ca28:	0852      	lsrs	r2, r2, #1
 800ca2a:	01db      	lsls	r3, r3, #7
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	b2da      	uxtb	r2, r3
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	1c59      	adds	r1, r3, #1
 800ca34:	6079      	str	r1, [r7, #4]
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	4413      	add	r3, r2
 800ca3a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	3b01      	subs	r3, #1
 800ca40:	60bb      	str	r3, [r7, #8]
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d1ed      	bne.n	800ca24 <sum_sfn+0x10>
	return sum;
 800ca48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3714      	adds	r7, #20
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca54:	4770      	bx	lr

0800ca56 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ca56:	b580      	push	{r7, lr}
 800ca58:	b086      	sub	sp, #24
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ca64:	2100      	movs	r1, #0
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f7ff fc86 	bl	800c378 <dir_sdi>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ca70:	7dfb      	ldrb	r3, [r7, #23]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d001      	beq.n	800ca7a <dir_find+0x24>
 800ca76:	7dfb      	ldrb	r3, [r7, #23]
 800ca78:	e0a9      	b.n	800cbce <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ca7a:	23ff      	movs	r3, #255	; 0xff
 800ca7c:	753b      	strb	r3, [r7, #20]
 800ca7e:	7d3b      	ldrb	r3, [r7, #20]
 800ca80:	757b      	strb	r3, [r7, #21]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f04f 32ff 	mov.w	r2, #4294967295
 800ca88:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	69db      	ldr	r3, [r3, #28]
 800ca8e:	4619      	mov	r1, r3
 800ca90:	6938      	ldr	r0, [r7, #16]
 800ca92:	f7ff f88f 	bl	800bbb4 <move_window>
 800ca96:	4603      	mov	r3, r0
 800ca98:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ca9a:	7dfb      	ldrb	r3, [r7, #23]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	f040 8090 	bne.w	800cbc2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6a1b      	ldr	r3, [r3, #32]
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800caaa:	7dbb      	ldrb	r3, [r7, #22]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d102      	bne.n	800cab6 <dir_find+0x60>
 800cab0:	2304      	movs	r3, #4
 800cab2:	75fb      	strb	r3, [r7, #23]
 800cab4:	e08a      	b.n	800cbcc <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6a1b      	ldr	r3, [r3, #32]
 800caba:	330b      	adds	r3, #11
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cac2:	73fb      	strb	r3, [r7, #15]
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	7bfa      	ldrb	r2, [r7, #15]
 800cac8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800caca:	7dbb      	ldrb	r3, [r7, #22]
 800cacc:	2be5      	cmp	r3, #229	; 0xe5
 800cace:	d007      	beq.n	800cae0 <dir_find+0x8a>
 800cad0:	7bfb      	ldrb	r3, [r7, #15]
 800cad2:	f003 0308 	and.w	r3, r3, #8
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d009      	beq.n	800caee <dir_find+0x98>
 800cada:	7bfb      	ldrb	r3, [r7, #15]
 800cadc:	2b0f      	cmp	r3, #15
 800cade:	d006      	beq.n	800caee <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cae0:	23ff      	movs	r3, #255	; 0xff
 800cae2:	757b      	strb	r3, [r7, #21]
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f04f 32ff 	mov.w	r2, #4294967295
 800caea:	631a      	str	r2, [r3, #48]	; 0x30
 800caec:	e05e      	b.n	800cbac <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800caee:	7bfb      	ldrb	r3, [r7, #15]
 800caf0:	2b0f      	cmp	r3, #15
 800caf2:	d136      	bne.n	800cb62 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cafa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d154      	bne.n	800cbac <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800cb02:	7dbb      	ldrb	r3, [r7, #22]
 800cb04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d00d      	beq.n	800cb28 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6a1b      	ldr	r3, [r3, #32]
 800cb10:	7b5b      	ldrb	r3, [r3, #13]
 800cb12:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800cb14:	7dbb      	ldrb	r3, [r7, #22]
 800cb16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb1a:	75bb      	strb	r3, [r7, #22]
 800cb1c:	7dbb      	ldrb	r3, [r7, #22]
 800cb1e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	695a      	ldr	r2, [r3, #20]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cb28:	7dba      	ldrb	r2, [r7, #22]
 800cb2a:	7d7b      	ldrb	r3, [r7, #21]
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d115      	bne.n	800cb5c <dir_find+0x106>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6a1b      	ldr	r3, [r3, #32]
 800cb34:	330d      	adds	r3, #13
 800cb36:	781b      	ldrb	r3, [r3, #0]
 800cb38:	7d3a      	ldrb	r2, [r7, #20]
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d10e      	bne.n	800cb5c <dir_find+0x106>
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	691a      	ldr	r2, [r3, #16]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6a1b      	ldr	r3, [r3, #32]
 800cb46:	4619      	mov	r1, r3
 800cb48:	4610      	mov	r0, r2
 800cb4a:	f7ff fdfb 	bl	800c744 <cmp_lfn>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d003      	beq.n	800cb5c <dir_find+0x106>
 800cb54:	7d7b      	ldrb	r3, [r7, #21]
 800cb56:	3b01      	subs	r3, #1
 800cb58:	b2db      	uxtb	r3, r3
 800cb5a:	e000      	b.n	800cb5e <dir_find+0x108>
 800cb5c:	23ff      	movs	r3, #255	; 0xff
 800cb5e:	757b      	strb	r3, [r7, #21]
 800cb60:	e024      	b.n	800cbac <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cb62:	7d7b      	ldrb	r3, [r7, #21]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d109      	bne.n	800cb7c <dir_find+0x126>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6a1b      	ldr	r3, [r3, #32]
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f7ff ff51 	bl	800ca14 <sum_sfn>
 800cb72:	4603      	mov	r3, r0
 800cb74:	461a      	mov	r2, r3
 800cb76:	7d3b      	ldrb	r3, [r7, #20]
 800cb78:	4293      	cmp	r3, r2
 800cb7a:	d024      	beq.n	800cbc6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cb82:	f003 0301 	and.w	r3, r3, #1
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d10a      	bne.n	800cba0 <dir_find+0x14a>
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6a18      	ldr	r0, [r3, #32]
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	3324      	adds	r3, #36	; 0x24
 800cb92:	220b      	movs	r2, #11
 800cb94:	4619      	mov	r1, r3
 800cb96:	f7fe fe1b 	bl	800b7d0 <mem_cmp>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d014      	beq.n	800cbca <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cba0:	23ff      	movs	r3, #255	; 0xff
 800cba2:	757b      	strb	r3, [r7, #21]
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f04f 32ff 	mov.w	r2, #4294967295
 800cbaa:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cbac:	2100      	movs	r1, #0
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f7ff fc6b 	bl	800c48a <dir_next>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cbb8:	7dfb      	ldrb	r3, [r7, #23]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	f43f af65 	beq.w	800ca8a <dir_find+0x34>
 800cbc0:	e004      	b.n	800cbcc <dir_find+0x176>
		if (res != FR_OK) break;
 800cbc2:	bf00      	nop
 800cbc4:	e002      	b.n	800cbcc <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cbc6:	bf00      	nop
 800cbc8:	e000      	b.n	800cbcc <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cbca:	bf00      	nop

	return res;
 800cbcc:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3718      	adds	r7, #24
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}
	...

0800cbd8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b08c      	sub	sp, #48	; 0x30
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cbec:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d001      	beq.n	800cbf8 <dir_register+0x20>
 800cbf4:	2306      	movs	r3, #6
 800cbf6:	e0e0      	b.n	800cdba <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	627b      	str	r3, [r7, #36]	; 0x24
 800cbfc:	e002      	b.n	800cc04 <dir_register+0x2c>
 800cbfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc00:	3301      	adds	r3, #1
 800cc02:	627b      	str	r3, [r7, #36]	; 0x24
 800cc04:	69fb      	ldr	r3, [r7, #28]
 800cc06:	691a      	ldr	r2, [r3, #16]
 800cc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc0a:	005b      	lsls	r3, r3, #1
 800cc0c:	4413      	add	r3, r2
 800cc0e:	881b      	ldrh	r3, [r3, #0]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d1f4      	bne.n	800cbfe <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800cc1a:	f107 030c 	add.w	r3, r7, #12
 800cc1e:	220c      	movs	r2, #12
 800cc20:	4618      	mov	r0, r3
 800cc22:	f7fe fd99 	bl	800b758 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800cc26:	7dfb      	ldrb	r3, [r7, #23]
 800cc28:	f003 0301 	and.w	r3, r3, #1
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d032      	beq.n	800cc96 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2240      	movs	r2, #64	; 0x40
 800cc34:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800cc38:	2301      	movs	r3, #1
 800cc3a:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc3c:	e016      	b.n	800cc6c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800cc44:	69fb      	ldr	r3, [r7, #28]
 800cc46:	691a      	ldr	r2, [r3, #16]
 800cc48:	f107 010c 	add.w	r1, r7, #12
 800cc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc4e:	f7ff fe51 	bl	800c8f4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f7ff feff 	bl	800ca56 <dir_find>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800cc5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d106      	bne.n	800cc74 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800cc66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc68:	3301      	adds	r3, #1
 800cc6a:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc6e:	2b63      	cmp	r3, #99	; 0x63
 800cc70:	d9e5      	bls.n	800cc3e <dir_register+0x66>
 800cc72:	e000      	b.n	800cc76 <dir_register+0x9e>
			if (res != FR_OK) break;
 800cc74:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800cc76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc78:	2b64      	cmp	r3, #100	; 0x64
 800cc7a:	d101      	bne.n	800cc80 <dir_register+0xa8>
 800cc7c:	2307      	movs	r3, #7
 800cc7e:	e09c      	b.n	800cdba <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800cc80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cc84:	2b04      	cmp	r3, #4
 800cc86:	d002      	beq.n	800cc8e <dir_register+0xb6>
 800cc88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cc8c:	e095      	b.n	800cdba <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800cc8e:	7dfa      	ldrb	r2, [r7, #23]
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800cc96:	7dfb      	ldrb	r3, [r7, #23]
 800cc98:	f003 0302 	and.w	r3, r3, #2
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d007      	beq.n	800ccb0 <dir_register+0xd8>
 800cca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca2:	330c      	adds	r3, #12
 800cca4:	4a47      	ldr	r2, [pc, #284]	; (800cdc4 <dir_register+0x1ec>)
 800cca6:	fba2 2303 	umull	r2, r3, r2, r3
 800ccaa:	089b      	lsrs	r3, r3, #2
 800ccac:	3301      	adds	r3, #1
 800ccae:	e000      	b.n	800ccb2 <dir_register+0xda>
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ccb4:	6a39      	ldr	r1, [r7, #32]
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f7ff fcbd 	bl	800c636 <dir_alloc>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ccc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d148      	bne.n	800cd5c <dir_register+0x184>
 800ccca:	6a3b      	ldr	r3, [r7, #32]
 800cccc:	3b01      	subs	r3, #1
 800ccce:	623b      	str	r3, [r7, #32]
 800ccd0:	6a3b      	ldr	r3, [r7, #32]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d042      	beq.n	800cd5c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	695a      	ldr	r2, [r3, #20]
 800ccda:	6a3b      	ldr	r3, [r7, #32]
 800ccdc:	015b      	lsls	r3, r3, #5
 800ccde:	1ad3      	subs	r3, r2, r3
 800cce0:	4619      	mov	r1, r3
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f7ff fb48 	bl	800c378 <dir_sdi>
 800cce8:	4603      	mov	r3, r0
 800ccea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ccee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d132      	bne.n	800cd5c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	3324      	adds	r3, #36	; 0x24
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f7ff fe8a 	bl	800ca14 <sum_sfn>
 800cd00:	4603      	mov	r3, r0
 800cd02:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	69db      	ldr	r3, [r3, #28]
 800cd08:	4619      	mov	r1, r3
 800cd0a:	69f8      	ldr	r0, [r7, #28]
 800cd0c:	f7fe ff52 	bl	800bbb4 <move_window>
 800cd10:	4603      	mov	r3, r0
 800cd12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800cd16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d11d      	bne.n	800cd5a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800cd1e:	69fb      	ldr	r3, [r7, #28]
 800cd20:	6918      	ldr	r0, [r3, #16]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6a19      	ldr	r1, [r3, #32]
 800cd26:	6a3b      	ldr	r3, [r7, #32]
 800cd28:	b2da      	uxtb	r2, r3
 800cd2a:	7efb      	ldrb	r3, [r7, #27]
 800cd2c:	f7ff fd7a 	bl	800c824 <put_lfn>
				fs->wflag = 1;
 800cd30:	69fb      	ldr	r3, [r7, #28]
 800cd32:	2201      	movs	r2, #1
 800cd34:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800cd36:	2100      	movs	r1, #0
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f7ff fba6 	bl	800c48a <dir_next>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800cd44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d107      	bne.n	800cd5c <dir_register+0x184>
 800cd4c:	6a3b      	ldr	r3, [r7, #32]
 800cd4e:	3b01      	subs	r3, #1
 800cd50:	623b      	str	r3, [r7, #32]
 800cd52:	6a3b      	ldr	r3, [r7, #32]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d1d5      	bne.n	800cd04 <dir_register+0x12c>
 800cd58:	e000      	b.n	800cd5c <dir_register+0x184>
				if (res != FR_OK) break;
 800cd5a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800cd5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d128      	bne.n	800cdb6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	69db      	ldr	r3, [r3, #28]
 800cd68:	4619      	mov	r1, r3
 800cd6a:	69f8      	ldr	r0, [r7, #28]
 800cd6c:	f7fe ff22 	bl	800bbb4 <move_window>
 800cd70:	4603      	mov	r3, r0
 800cd72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800cd76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d11b      	bne.n	800cdb6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6a1b      	ldr	r3, [r3, #32]
 800cd82:	2220      	movs	r2, #32
 800cd84:	2100      	movs	r1, #0
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7fe fd07 	bl	800b79a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6a18      	ldr	r0, [r3, #32]
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	3324      	adds	r3, #36	; 0x24
 800cd94:	220b      	movs	r2, #11
 800cd96:	4619      	mov	r1, r3
 800cd98:	f7fe fcde 	bl	800b758 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6a1b      	ldr	r3, [r3, #32]
 800cda6:	330c      	adds	r3, #12
 800cda8:	f002 0218 	and.w	r2, r2, #24
 800cdac:	b2d2      	uxtb	r2, r2
 800cdae:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800cdb0:	69fb      	ldr	r3, [r7, #28]
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800cdb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3730      	adds	r7, #48	; 0x30
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}
 800cdc2:	bf00      	nop
 800cdc4:	4ec4ec4f 	.word	0x4ec4ec4f

0800cdc8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b08a      	sub	sp, #40	; 0x28
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
 800cdd0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	613b      	str	r3, [r7, #16]
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	691b      	ldr	r3, [r3, #16]
 800cdde:	60fb      	str	r3, [r7, #12]
 800cde0:	2300      	movs	r3, #0
 800cde2:	617b      	str	r3, [r7, #20]
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800cde8:	69bb      	ldr	r3, [r7, #24]
 800cdea:	1c5a      	adds	r2, r3, #1
 800cdec:	61ba      	str	r2, [r7, #24]
 800cdee:	693a      	ldr	r2, [r7, #16]
 800cdf0:	4413      	add	r3, r2
 800cdf2:	781b      	ldrb	r3, [r3, #0]
 800cdf4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800cdf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cdf8:	2b1f      	cmp	r3, #31
 800cdfa:	d940      	bls.n	800ce7e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800cdfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cdfe:	2b2f      	cmp	r3, #47	; 0x2f
 800ce00:	d006      	beq.n	800ce10 <create_name+0x48>
 800ce02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce04:	2b5c      	cmp	r3, #92	; 0x5c
 800ce06:	d110      	bne.n	800ce2a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ce08:	e002      	b.n	800ce10 <create_name+0x48>
 800ce0a:	69bb      	ldr	r3, [r7, #24]
 800ce0c:	3301      	adds	r3, #1
 800ce0e:	61bb      	str	r3, [r7, #24]
 800ce10:	693a      	ldr	r2, [r7, #16]
 800ce12:	69bb      	ldr	r3, [r7, #24]
 800ce14:	4413      	add	r3, r2
 800ce16:	781b      	ldrb	r3, [r3, #0]
 800ce18:	2b2f      	cmp	r3, #47	; 0x2f
 800ce1a:	d0f6      	beq.n	800ce0a <create_name+0x42>
 800ce1c:	693a      	ldr	r2, [r7, #16]
 800ce1e:	69bb      	ldr	r3, [r7, #24]
 800ce20:	4413      	add	r3, r2
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	2b5c      	cmp	r3, #92	; 0x5c
 800ce26:	d0f0      	beq.n	800ce0a <create_name+0x42>
			break;
 800ce28:	e02a      	b.n	800ce80 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ce2a:	697b      	ldr	r3, [r7, #20]
 800ce2c:	2b1f      	cmp	r3, #31
 800ce2e:	d901      	bls.n	800ce34 <create_name+0x6c>
 800ce30:	2306      	movs	r3, #6
 800ce32:	e177      	b.n	800d124 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ce34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce36:	b2db      	uxtb	r3, r3
 800ce38:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ce3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce3c:	2101      	movs	r1, #1
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f001 f9f2 	bl	800e228 <ff_convert>
 800ce44:	4603      	mov	r3, r0
 800ce46:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ce48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d101      	bne.n	800ce52 <create_name+0x8a>
 800ce4e:	2306      	movs	r3, #6
 800ce50:	e168      	b.n	800d124 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ce52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce54:	2b7f      	cmp	r3, #127	; 0x7f
 800ce56:	d809      	bhi.n	800ce6c <create_name+0xa4>
 800ce58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	48b3      	ldr	r0, [pc, #716]	; (800d12c <create_name+0x364>)
 800ce5e:	f7fe fcde 	bl	800b81e <chk_chr>
 800ce62:	4603      	mov	r3, r0
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d001      	beq.n	800ce6c <create_name+0xa4>
 800ce68:	2306      	movs	r3, #6
 800ce6a:	e15b      	b.n	800d124 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	1c5a      	adds	r2, r3, #1
 800ce70:	617a      	str	r2, [r7, #20]
 800ce72:	005b      	lsls	r3, r3, #1
 800ce74:	68fa      	ldr	r2, [r7, #12]
 800ce76:	4413      	add	r3, r2
 800ce78:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ce7a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ce7c:	e7b4      	b.n	800cde8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ce7e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ce80:	693a      	ldr	r2, [r7, #16]
 800ce82:	69bb      	ldr	r3, [r7, #24]
 800ce84:	441a      	add	r2, r3
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ce8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce8c:	2b1f      	cmp	r3, #31
 800ce8e:	d801      	bhi.n	800ce94 <create_name+0xcc>
 800ce90:	2304      	movs	r3, #4
 800ce92:	e000      	b.n	800ce96 <create_name+0xce>
 800ce94:	2300      	movs	r3, #0
 800ce96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ce9a:	e011      	b.n	800cec0 <create_name+0xf8>
		w = lfn[di - 1];
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cea2:	3b01      	subs	r3, #1
 800cea4:	005b      	lsls	r3, r3, #1
 800cea6:	68fa      	ldr	r2, [r7, #12]
 800cea8:	4413      	add	r3, r2
 800ceaa:	881b      	ldrh	r3, [r3, #0]
 800ceac:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800ceae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ceb0:	2b20      	cmp	r3, #32
 800ceb2:	d002      	beq.n	800ceba <create_name+0xf2>
 800ceb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ceb6:	2b2e      	cmp	r3, #46	; 0x2e
 800ceb8:	d106      	bne.n	800cec8 <create_name+0x100>
		di--;
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	3b01      	subs	r3, #1
 800cebe:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800cec0:	697b      	ldr	r3, [r7, #20]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d1ea      	bne.n	800ce9c <create_name+0xd4>
 800cec6:	e000      	b.n	800ceca <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800cec8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	005b      	lsls	r3, r3, #1
 800cece:	68fa      	ldr	r2, [r7, #12]
 800ced0:	4413      	add	r3, r2
 800ced2:	2200      	movs	r2, #0
 800ced4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d101      	bne.n	800cee0 <create_name+0x118>
 800cedc:	2306      	movs	r3, #6
 800cede:	e121      	b.n	800d124 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	3324      	adds	r3, #36	; 0x24
 800cee4:	220b      	movs	r2, #11
 800cee6:	2120      	movs	r1, #32
 800cee8:	4618      	mov	r0, r3
 800ceea:	f7fe fc56 	bl	800b79a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ceee:	2300      	movs	r3, #0
 800cef0:	61bb      	str	r3, [r7, #24]
 800cef2:	e002      	b.n	800cefa <create_name+0x132>
 800cef4:	69bb      	ldr	r3, [r7, #24]
 800cef6:	3301      	adds	r3, #1
 800cef8:	61bb      	str	r3, [r7, #24]
 800cefa:	69bb      	ldr	r3, [r7, #24]
 800cefc:	005b      	lsls	r3, r3, #1
 800cefe:	68fa      	ldr	r2, [r7, #12]
 800cf00:	4413      	add	r3, r2
 800cf02:	881b      	ldrh	r3, [r3, #0]
 800cf04:	2b20      	cmp	r3, #32
 800cf06:	d0f5      	beq.n	800cef4 <create_name+0x12c>
 800cf08:	69bb      	ldr	r3, [r7, #24]
 800cf0a:	005b      	lsls	r3, r3, #1
 800cf0c:	68fa      	ldr	r2, [r7, #12]
 800cf0e:	4413      	add	r3, r2
 800cf10:	881b      	ldrh	r3, [r3, #0]
 800cf12:	2b2e      	cmp	r3, #46	; 0x2e
 800cf14:	d0ee      	beq.n	800cef4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800cf16:	69bb      	ldr	r3, [r7, #24]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d009      	beq.n	800cf30 <create_name+0x168>
 800cf1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf20:	f043 0303 	orr.w	r3, r3, #3
 800cf24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800cf28:	e002      	b.n	800cf30 <create_name+0x168>
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	3b01      	subs	r3, #1
 800cf2e:	617b      	str	r3, [r7, #20]
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d009      	beq.n	800cf4a <create_name+0x182>
 800cf36:	697b      	ldr	r3, [r7, #20]
 800cf38:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cf3c:	3b01      	subs	r3, #1
 800cf3e:	005b      	lsls	r3, r3, #1
 800cf40:	68fa      	ldr	r2, [r7, #12]
 800cf42:	4413      	add	r3, r2
 800cf44:	881b      	ldrh	r3, [r3, #0]
 800cf46:	2b2e      	cmp	r3, #46	; 0x2e
 800cf48:	d1ef      	bne.n	800cf2a <create_name+0x162>

	i = b = 0; ni = 8;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cf50:	2300      	movs	r3, #0
 800cf52:	623b      	str	r3, [r7, #32]
 800cf54:	2308      	movs	r3, #8
 800cf56:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800cf58:	69bb      	ldr	r3, [r7, #24]
 800cf5a:	1c5a      	adds	r2, r3, #1
 800cf5c:	61ba      	str	r2, [r7, #24]
 800cf5e:	005b      	lsls	r3, r3, #1
 800cf60:	68fa      	ldr	r2, [r7, #12]
 800cf62:	4413      	add	r3, r2
 800cf64:	881b      	ldrh	r3, [r3, #0]
 800cf66:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800cf68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	f000 8090 	beq.w	800d090 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800cf70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf72:	2b20      	cmp	r3, #32
 800cf74:	d006      	beq.n	800cf84 <create_name+0x1bc>
 800cf76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf78:	2b2e      	cmp	r3, #46	; 0x2e
 800cf7a:	d10a      	bne.n	800cf92 <create_name+0x1ca>
 800cf7c:	69ba      	ldr	r2, [r7, #24]
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d006      	beq.n	800cf92 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800cf84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf88:	f043 0303 	orr.w	r3, r3, #3
 800cf8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf90:	e07d      	b.n	800d08e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800cf92:	6a3a      	ldr	r2, [r7, #32]
 800cf94:	69fb      	ldr	r3, [r7, #28]
 800cf96:	429a      	cmp	r2, r3
 800cf98:	d203      	bcs.n	800cfa2 <create_name+0x1da>
 800cf9a:	69ba      	ldr	r2, [r7, #24]
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	429a      	cmp	r2, r3
 800cfa0:	d123      	bne.n	800cfea <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800cfa2:	69fb      	ldr	r3, [r7, #28]
 800cfa4:	2b0b      	cmp	r3, #11
 800cfa6:	d106      	bne.n	800cfb6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800cfa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfac:	f043 0303 	orr.w	r3, r3, #3
 800cfb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cfb4:	e06f      	b.n	800d096 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800cfb6:	69ba      	ldr	r2, [r7, #24]
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	d005      	beq.n	800cfca <create_name+0x202>
 800cfbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfc2:	f043 0303 	orr.w	r3, r3, #3
 800cfc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800cfca:	69ba      	ldr	r2, [r7, #24]
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d860      	bhi.n	800d094 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	61bb      	str	r3, [r7, #24]
 800cfd6:	2308      	movs	r3, #8
 800cfd8:	623b      	str	r3, [r7, #32]
 800cfda:	230b      	movs	r3, #11
 800cfdc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800cfde:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cfe2:	009b      	lsls	r3, r3, #2
 800cfe4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cfe8:	e051      	b.n	800d08e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800cfea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cfec:	2b7f      	cmp	r3, #127	; 0x7f
 800cfee:	d914      	bls.n	800d01a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800cff0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cff2:	2100      	movs	r1, #0
 800cff4:	4618      	mov	r0, r3
 800cff6:	f001 f917 	bl	800e228 <ff_convert>
 800cffa:	4603      	mov	r3, r0
 800cffc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800cffe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d000:	2b00      	cmp	r3, #0
 800d002:	d004      	beq.n	800d00e <create_name+0x246>
 800d004:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d006:	3b80      	subs	r3, #128	; 0x80
 800d008:	4a49      	ldr	r2, [pc, #292]	; (800d130 <create_name+0x368>)
 800d00a:	5cd3      	ldrb	r3, [r2, r3]
 800d00c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d00e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d012:	f043 0302 	orr.w	r3, r3, #2
 800d016:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d01a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d007      	beq.n	800d030 <create_name+0x268>
 800d020:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d022:	4619      	mov	r1, r3
 800d024:	4843      	ldr	r0, [pc, #268]	; (800d134 <create_name+0x36c>)
 800d026:	f7fe fbfa 	bl	800b81e <chk_chr>
 800d02a:	4603      	mov	r3, r0
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d008      	beq.n	800d042 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d030:	235f      	movs	r3, #95	; 0x5f
 800d032:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d038:	f043 0303 	orr.w	r3, r3, #3
 800d03c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d040:	e01b      	b.n	800d07a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d042:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d044:	2b40      	cmp	r3, #64	; 0x40
 800d046:	d909      	bls.n	800d05c <create_name+0x294>
 800d048:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d04a:	2b5a      	cmp	r3, #90	; 0x5a
 800d04c:	d806      	bhi.n	800d05c <create_name+0x294>
					b |= 2;
 800d04e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d052:	f043 0302 	orr.w	r3, r3, #2
 800d056:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d05a:	e00e      	b.n	800d07a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d05c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d05e:	2b60      	cmp	r3, #96	; 0x60
 800d060:	d90b      	bls.n	800d07a <create_name+0x2b2>
 800d062:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d064:	2b7a      	cmp	r3, #122	; 0x7a
 800d066:	d808      	bhi.n	800d07a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d068:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d06c:	f043 0301 	orr.w	r3, r3, #1
 800d070:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d074:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d076:	3b20      	subs	r3, #32
 800d078:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d07a:	6a3b      	ldr	r3, [r7, #32]
 800d07c:	1c5a      	adds	r2, r3, #1
 800d07e:	623a      	str	r2, [r7, #32]
 800d080:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d082:	b2d1      	uxtb	r1, r2
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	4413      	add	r3, r2
 800d088:	460a      	mov	r2, r1
 800d08a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d08e:	e763      	b.n	800cf58 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d090:	bf00      	nop
 800d092:	e000      	b.n	800d096 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800d094:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d09c:	2be5      	cmp	r3, #229	; 0xe5
 800d09e:	d103      	bne.n	800d0a8 <create_name+0x2e0>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2205      	movs	r2, #5
 800d0a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800d0a8:	69fb      	ldr	r3, [r7, #28]
 800d0aa:	2b08      	cmp	r3, #8
 800d0ac:	d104      	bne.n	800d0b8 <create_name+0x2f0>
 800d0ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d0b2:	009b      	lsls	r3, r3, #2
 800d0b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d0b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d0bc:	f003 030c 	and.w	r3, r3, #12
 800d0c0:	2b0c      	cmp	r3, #12
 800d0c2:	d005      	beq.n	800d0d0 <create_name+0x308>
 800d0c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d0c8:	f003 0303 	and.w	r3, r3, #3
 800d0cc:	2b03      	cmp	r3, #3
 800d0ce:	d105      	bne.n	800d0dc <create_name+0x314>
 800d0d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0d4:	f043 0302 	orr.w	r3, r3, #2
 800d0d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d0dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0e0:	f003 0302 	and.w	r3, r3, #2
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d117      	bne.n	800d118 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d0e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d0ec:	f003 0303 	and.w	r3, r3, #3
 800d0f0:	2b01      	cmp	r3, #1
 800d0f2:	d105      	bne.n	800d100 <create_name+0x338>
 800d0f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0f8:	f043 0310 	orr.w	r3, r3, #16
 800d0fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d100:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d104:	f003 030c 	and.w	r3, r3, #12
 800d108:	2b04      	cmp	r3, #4
 800d10a:	d105      	bne.n	800d118 <create_name+0x350>
 800d10c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d110:	f043 0308 	orr.w	r3, r3, #8
 800d114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d11e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800d122:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d124:	4618      	mov	r0, r3
 800d126:	3728      	adds	r7, #40	; 0x28
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}
 800d12c:	08015fc4 	.word	0x08015fc4
 800d130:	08016044 	.word	0x08016044
 800d134:	08015fd0 	.word	0x08015fd0

0800d138 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b086      	sub	sp, #24
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d146:	693b      	ldr	r3, [r7, #16]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d14c:	e002      	b.n	800d154 <follow_path+0x1c>
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	3301      	adds	r3, #1
 800d152:	603b      	str	r3, [r7, #0]
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	2b2f      	cmp	r3, #47	; 0x2f
 800d15a:	d0f8      	beq.n	800d14e <follow_path+0x16>
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	781b      	ldrb	r3, [r3, #0]
 800d160:	2b5c      	cmp	r3, #92	; 0x5c
 800d162:	d0f4      	beq.n	800d14e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	2200      	movs	r2, #0
 800d168:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	781b      	ldrb	r3, [r3, #0]
 800d16e:	2b1f      	cmp	r3, #31
 800d170:	d80a      	bhi.n	800d188 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2280      	movs	r2, #128	; 0x80
 800d176:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d17a:	2100      	movs	r1, #0
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f7ff f8fb 	bl	800c378 <dir_sdi>
 800d182:	4603      	mov	r3, r0
 800d184:	75fb      	strb	r3, [r7, #23]
 800d186:	e048      	b.n	800d21a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d188:	463b      	mov	r3, r7
 800d18a:	4619      	mov	r1, r3
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f7ff fe1b 	bl	800cdc8 <create_name>
 800d192:	4603      	mov	r3, r0
 800d194:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d196:	7dfb      	ldrb	r3, [r7, #23]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d139      	bne.n	800d210 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f7ff fc5a 	bl	800ca56 <dir_find>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d1ac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d1ae:	7dfb      	ldrb	r3, [r7, #23]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d00a      	beq.n	800d1ca <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d1b4:	7dfb      	ldrb	r3, [r7, #23]
 800d1b6:	2b04      	cmp	r3, #4
 800d1b8:	d12c      	bne.n	800d214 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d1ba:	7afb      	ldrb	r3, [r7, #11]
 800d1bc:	f003 0304 	and.w	r3, r3, #4
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d127      	bne.n	800d214 <follow_path+0xdc>
 800d1c4:	2305      	movs	r3, #5
 800d1c6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d1c8:	e024      	b.n	800d214 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d1ca:	7afb      	ldrb	r3, [r7, #11]
 800d1cc:	f003 0304 	and.w	r3, r3, #4
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d121      	bne.n	800d218 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	799b      	ldrb	r3, [r3, #6]
 800d1d8:	f003 0310 	and.w	r3, r3, #16
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d102      	bne.n	800d1e6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d1e0:	2305      	movs	r3, #5
 800d1e2:	75fb      	strb	r3, [r7, #23]
 800d1e4:	e019      	b.n	800d21a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	695b      	ldr	r3, [r3, #20]
 800d1f0:	68fa      	ldr	r2, [r7, #12]
 800d1f2:	8992      	ldrh	r2, [r2, #12]
 800d1f4:	fbb3 f0f2 	udiv	r0, r3, r2
 800d1f8:	fb02 f200 	mul.w	r2, r2, r0
 800d1fc:	1a9b      	subs	r3, r3, r2
 800d1fe:	440b      	add	r3, r1
 800d200:	4619      	mov	r1, r3
 800d202:	68f8      	ldr	r0, [r7, #12]
 800d204:	f7ff fa5e 	bl	800c6c4 <ld_clust>
 800d208:	4602      	mov	r2, r0
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d20e:	e7bb      	b.n	800d188 <follow_path+0x50>
			if (res != FR_OK) break;
 800d210:	bf00      	nop
 800d212:	e002      	b.n	800d21a <follow_path+0xe2>
				break;
 800d214:	bf00      	nop
 800d216:	e000      	b.n	800d21a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d218:	bf00      	nop
			}
		}
	}

	return res;
 800d21a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	3718      	adds	r7, #24
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}

0800d224 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d224:	b480      	push	{r7}
 800d226:	b087      	sub	sp, #28
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d22c:	f04f 33ff 	mov.w	r3, #4294967295
 800d230:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d031      	beq.n	800d29e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	617b      	str	r3, [r7, #20]
 800d240:	e002      	b.n	800d248 <get_ldnumber+0x24>
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	3301      	adds	r3, #1
 800d246:	617b      	str	r3, [r7, #20]
 800d248:	697b      	ldr	r3, [r7, #20]
 800d24a:	781b      	ldrb	r3, [r3, #0]
 800d24c:	2b1f      	cmp	r3, #31
 800d24e:	d903      	bls.n	800d258 <get_ldnumber+0x34>
 800d250:	697b      	ldr	r3, [r7, #20]
 800d252:	781b      	ldrb	r3, [r3, #0]
 800d254:	2b3a      	cmp	r3, #58	; 0x3a
 800d256:	d1f4      	bne.n	800d242 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	781b      	ldrb	r3, [r3, #0]
 800d25c:	2b3a      	cmp	r3, #58	; 0x3a
 800d25e:	d11c      	bne.n	800d29a <get_ldnumber+0x76>
			tp = *path;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	1c5a      	adds	r2, r3, #1
 800d26a:	60fa      	str	r2, [r7, #12]
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	3b30      	subs	r3, #48	; 0x30
 800d270:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	2b09      	cmp	r3, #9
 800d276:	d80e      	bhi.n	800d296 <get_ldnumber+0x72>
 800d278:	68fa      	ldr	r2, [r7, #12]
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d10a      	bne.n	800d296 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d107      	bne.n	800d296 <get_ldnumber+0x72>
					vol = (int)i;
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	3301      	adds	r3, #1
 800d28e:	617b      	str	r3, [r7, #20]
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	697a      	ldr	r2, [r7, #20]
 800d294:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	e002      	b.n	800d2a0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d29a:	2300      	movs	r3, #0
 800d29c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d29e:	693b      	ldr	r3, [r7, #16]
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	371c      	adds	r7, #28
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2aa:	4770      	bx	lr

0800d2ac <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b082      	sub	sp, #8
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
 800d2b4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	70da      	strb	r2, [r3, #3]
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f04f 32ff 	mov.w	r2, #4294967295
 800d2c2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d2c4:	6839      	ldr	r1, [r7, #0]
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f7fe fc74 	bl	800bbb4 <move_window>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d001      	beq.n	800d2d6 <check_fs+0x2a>
 800d2d2:	2304      	movs	r3, #4
 800d2d4:	e038      	b.n	800d348 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	3338      	adds	r3, #56	; 0x38
 800d2da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f7fe f9b8 	bl	800b654 <ld_word>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	461a      	mov	r2, r3
 800d2e8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	d001      	beq.n	800d2f4 <check_fs+0x48>
 800d2f0:	2303      	movs	r3, #3
 800d2f2:	e029      	b.n	800d348 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d2fa:	2be9      	cmp	r3, #233	; 0xe9
 800d2fc:	d009      	beq.n	800d312 <check_fs+0x66>
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d304:	2beb      	cmp	r3, #235	; 0xeb
 800d306:	d11e      	bne.n	800d346 <check_fs+0x9a>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d30e:	2b90      	cmp	r3, #144	; 0x90
 800d310:	d119      	bne.n	800d346 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	3338      	adds	r3, #56	; 0x38
 800d316:	3336      	adds	r3, #54	; 0x36
 800d318:	4618      	mov	r0, r3
 800d31a:	f7fe f9b3 	bl	800b684 <ld_dword>
 800d31e:	4603      	mov	r3, r0
 800d320:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d324:	4a0a      	ldr	r2, [pc, #40]	; (800d350 <check_fs+0xa4>)
 800d326:	4293      	cmp	r3, r2
 800d328:	d101      	bne.n	800d32e <check_fs+0x82>
 800d32a:	2300      	movs	r3, #0
 800d32c:	e00c      	b.n	800d348 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	3338      	adds	r3, #56	; 0x38
 800d332:	3352      	adds	r3, #82	; 0x52
 800d334:	4618      	mov	r0, r3
 800d336:	f7fe f9a5 	bl	800b684 <ld_dword>
 800d33a:	4603      	mov	r3, r0
 800d33c:	4a05      	ldr	r2, [pc, #20]	; (800d354 <check_fs+0xa8>)
 800d33e:	4293      	cmp	r3, r2
 800d340:	d101      	bne.n	800d346 <check_fs+0x9a>
 800d342:	2300      	movs	r3, #0
 800d344:	e000      	b.n	800d348 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d346:	2302      	movs	r3, #2
}
 800d348:	4618      	mov	r0, r3
 800d34a:	3708      	adds	r7, #8
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}
 800d350:	00544146 	.word	0x00544146
 800d354:	33544146 	.word	0x33544146

0800d358 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b096      	sub	sp, #88	; 0x58
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	60f8      	str	r0, [r7, #12]
 800d360:	60b9      	str	r1, [r7, #8]
 800d362:	4613      	mov	r3, r2
 800d364:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	2200      	movs	r2, #0
 800d36a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d36c:	68f8      	ldr	r0, [r7, #12]
 800d36e:	f7ff ff59 	bl	800d224 <get_ldnumber>
 800d372:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d376:	2b00      	cmp	r3, #0
 800d378:	da01      	bge.n	800d37e <find_volume+0x26>
 800d37a:	230b      	movs	r3, #11
 800d37c:	e268      	b.n	800d850 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d37e:	4ab0      	ldr	r2, [pc, #704]	; (800d640 <find_volume+0x2e8>)
 800d380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d386:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d101      	bne.n	800d392 <find_volume+0x3a>
 800d38e:	230c      	movs	r3, #12
 800d390:	e25e      	b.n	800d850 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d396:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d398:	79fb      	ldrb	r3, [r7, #7]
 800d39a:	f023 0301 	bic.w	r3, r3, #1
 800d39e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a2:	781b      	ldrb	r3, [r3, #0]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d01a      	beq.n	800d3de <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3aa:	785b      	ldrb	r3, [r3, #1]
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f7fe f8b3 	bl	800b518 <disk_status>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d3b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d3bc:	f003 0301 	and.w	r3, r3, #1
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d10c      	bne.n	800d3de <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d3c4:	79fb      	ldrb	r3, [r7, #7]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d007      	beq.n	800d3da <find_volume+0x82>
 800d3ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d3ce:	f003 0304 	and.w	r3, r3, #4
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d001      	beq.n	800d3da <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d3d6:	230a      	movs	r3, #10
 800d3d8:	e23a      	b.n	800d850 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800d3da:	2300      	movs	r3, #0
 800d3dc:	e238      	b.n	800d850 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d3e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3e6:	b2da      	uxtb	r2, r3
 800d3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ee:	785b      	ldrb	r3, [r3, #1]
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f7fe f8ab 	bl	800b54c <disk_initialize>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d3fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d400:	f003 0301 	and.w	r3, r3, #1
 800d404:	2b00      	cmp	r3, #0
 800d406:	d001      	beq.n	800d40c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d408:	2303      	movs	r3, #3
 800d40a:	e221      	b.n	800d850 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d40c:	79fb      	ldrb	r3, [r7, #7]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d007      	beq.n	800d422 <find_volume+0xca>
 800d412:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d416:	f003 0304 	and.w	r3, r3, #4
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d001      	beq.n	800d422 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d41e:	230a      	movs	r3, #10
 800d420:	e216      	b.n	800d850 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800d422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d424:	7858      	ldrb	r0, [r3, #1]
 800d426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d428:	330c      	adds	r3, #12
 800d42a:	461a      	mov	r2, r3
 800d42c:	2102      	movs	r1, #2
 800d42e:	f7fe f8f3 	bl	800b618 <disk_ioctl>
 800d432:	4603      	mov	r3, r0
 800d434:	2b00      	cmp	r3, #0
 800d436:	d001      	beq.n	800d43c <find_volume+0xe4>
 800d438:	2301      	movs	r3, #1
 800d43a:	e209      	b.n	800d850 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800d43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d43e:	899b      	ldrh	r3, [r3, #12]
 800d440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d444:	d80d      	bhi.n	800d462 <find_volume+0x10a>
 800d446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d448:	899b      	ldrh	r3, [r3, #12]
 800d44a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d44e:	d308      	bcc.n	800d462 <find_volume+0x10a>
 800d450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d452:	899b      	ldrh	r3, [r3, #12]
 800d454:	461a      	mov	r2, r3
 800d456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d458:	899b      	ldrh	r3, [r3, #12]
 800d45a:	3b01      	subs	r3, #1
 800d45c:	4013      	ands	r3, r2
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d001      	beq.n	800d466 <find_volume+0x10e>
 800d462:	2301      	movs	r3, #1
 800d464:	e1f4      	b.n	800d850 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d466:	2300      	movs	r3, #0
 800d468:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d46a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d46c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d46e:	f7ff ff1d 	bl	800d2ac <check_fs>
 800d472:	4603      	mov	r3, r0
 800d474:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d478:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d47c:	2b02      	cmp	r3, #2
 800d47e:	d14b      	bne.n	800d518 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d480:	2300      	movs	r3, #0
 800d482:	643b      	str	r3, [r7, #64]	; 0x40
 800d484:	e01f      	b.n	800d4c6 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d488:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d48c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d48e:	011b      	lsls	r3, r3, #4
 800d490:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d494:	4413      	add	r3, r2
 800d496:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d49a:	3304      	adds	r3, #4
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d006      	beq.n	800d4b0 <find_volume+0x158>
 800d4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a4:	3308      	adds	r3, #8
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f7fe f8ec 	bl	800b684 <ld_dword>
 800d4ac:	4602      	mov	r2, r0
 800d4ae:	e000      	b.n	800d4b2 <find_volume+0x15a>
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4b4:	009b      	lsls	r3, r3, #2
 800d4b6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d4ba:	440b      	add	r3, r1
 800d4bc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d4c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4c2:	3301      	adds	r3, #1
 800d4c4:	643b      	str	r3, [r7, #64]	; 0x40
 800d4c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4c8:	2b03      	cmp	r3, #3
 800d4ca:	d9dc      	bls.n	800d486 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d4d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d002      	beq.n	800d4dc <find_volume+0x184>
 800d4d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4d8:	3b01      	subs	r3, #1
 800d4da:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d4dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4de:	009b      	lsls	r3, r3, #2
 800d4e0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d4e4:	4413      	add	r3, r2
 800d4e6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d4ea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d4ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d005      	beq.n	800d4fe <find_volume+0x1a6>
 800d4f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d4f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d4f6:	f7ff fed9 	bl	800d2ac <check_fs>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	e000      	b.n	800d500 <find_volume+0x1a8>
 800d4fe:	2303      	movs	r3, #3
 800d500:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d504:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d508:	2b01      	cmp	r3, #1
 800d50a:	d905      	bls.n	800d518 <find_volume+0x1c0>
 800d50c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d50e:	3301      	adds	r3, #1
 800d510:	643b      	str	r3, [r7, #64]	; 0x40
 800d512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d514:	2b03      	cmp	r3, #3
 800d516:	d9e1      	bls.n	800d4dc <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d518:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d51c:	2b04      	cmp	r3, #4
 800d51e:	d101      	bne.n	800d524 <find_volume+0x1cc>
 800d520:	2301      	movs	r3, #1
 800d522:	e195      	b.n	800d850 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d524:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d528:	2b01      	cmp	r3, #1
 800d52a:	d901      	bls.n	800d530 <find_volume+0x1d8>
 800d52c:	230d      	movs	r3, #13
 800d52e:	e18f      	b.n	800d850 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d532:	3338      	adds	r3, #56	; 0x38
 800d534:	330b      	adds	r3, #11
 800d536:	4618      	mov	r0, r3
 800d538:	f7fe f88c 	bl	800b654 <ld_word>
 800d53c:	4603      	mov	r3, r0
 800d53e:	461a      	mov	r2, r3
 800d540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d542:	899b      	ldrh	r3, [r3, #12]
 800d544:	429a      	cmp	r2, r3
 800d546:	d001      	beq.n	800d54c <find_volume+0x1f4>
 800d548:	230d      	movs	r3, #13
 800d54a:	e181      	b.n	800d850 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d54e:	3338      	adds	r3, #56	; 0x38
 800d550:	3316      	adds	r3, #22
 800d552:	4618      	mov	r0, r3
 800d554:	f7fe f87e 	bl	800b654 <ld_word>
 800d558:	4603      	mov	r3, r0
 800d55a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d55c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d106      	bne.n	800d570 <find_volume+0x218>
 800d562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d564:	3338      	adds	r3, #56	; 0x38
 800d566:	3324      	adds	r3, #36	; 0x24
 800d568:	4618      	mov	r0, r3
 800d56a:	f7fe f88b 	bl	800b684 <ld_dword>
 800d56e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d572:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d574:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d578:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800d57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d57e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d582:	789b      	ldrb	r3, [r3, #2]
 800d584:	2b01      	cmp	r3, #1
 800d586:	d005      	beq.n	800d594 <find_volume+0x23c>
 800d588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d58a:	789b      	ldrb	r3, [r3, #2]
 800d58c:	2b02      	cmp	r3, #2
 800d58e:	d001      	beq.n	800d594 <find_volume+0x23c>
 800d590:	230d      	movs	r3, #13
 800d592:	e15d      	b.n	800d850 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d596:	789b      	ldrb	r3, [r3, #2]
 800d598:	461a      	mov	r2, r3
 800d59a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d59c:	fb02 f303 	mul.w	r3, r2, r3
 800d5a0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d5a8:	b29a      	uxth	r2, r3
 800d5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5b0:	895b      	ldrh	r3, [r3, #10]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d008      	beq.n	800d5c8 <find_volume+0x270>
 800d5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5b8:	895b      	ldrh	r3, [r3, #10]
 800d5ba:	461a      	mov	r2, r3
 800d5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5be:	895b      	ldrh	r3, [r3, #10]
 800d5c0:	3b01      	subs	r3, #1
 800d5c2:	4013      	ands	r3, r2
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d001      	beq.n	800d5cc <find_volume+0x274>
 800d5c8:	230d      	movs	r3, #13
 800d5ca:	e141      	b.n	800d850 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ce:	3338      	adds	r3, #56	; 0x38
 800d5d0:	3311      	adds	r3, #17
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f7fe f83e 	bl	800b654 <ld_word>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	461a      	mov	r2, r3
 800d5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5de:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5e2:	891b      	ldrh	r3, [r3, #8]
 800d5e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d5e6:	8992      	ldrh	r2, [r2, #12]
 800d5e8:	0952      	lsrs	r2, r2, #5
 800d5ea:	b292      	uxth	r2, r2
 800d5ec:	fbb3 f1f2 	udiv	r1, r3, r2
 800d5f0:	fb02 f201 	mul.w	r2, r2, r1
 800d5f4:	1a9b      	subs	r3, r3, r2
 800d5f6:	b29b      	uxth	r3, r3
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d001      	beq.n	800d600 <find_volume+0x2a8>
 800d5fc:	230d      	movs	r3, #13
 800d5fe:	e127      	b.n	800d850 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d602:	3338      	adds	r3, #56	; 0x38
 800d604:	3313      	adds	r3, #19
 800d606:	4618      	mov	r0, r3
 800d608:	f7fe f824 	bl	800b654 <ld_word>
 800d60c:	4603      	mov	r3, r0
 800d60e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d612:	2b00      	cmp	r3, #0
 800d614:	d106      	bne.n	800d624 <find_volume+0x2cc>
 800d616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d618:	3338      	adds	r3, #56	; 0x38
 800d61a:	3320      	adds	r3, #32
 800d61c:	4618      	mov	r0, r3
 800d61e:	f7fe f831 	bl	800b684 <ld_dword>
 800d622:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d626:	3338      	adds	r3, #56	; 0x38
 800d628:	330e      	adds	r3, #14
 800d62a:	4618      	mov	r0, r3
 800d62c:	f7fe f812 	bl	800b654 <ld_word>
 800d630:	4603      	mov	r3, r0
 800d632:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d634:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d636:	2b00      	cmp	r3, #0
 800d638:	d104      	bne.n	800d644 <find_volume+0x2ec>
 800d63a:	230d      	movs	r3, #13
 800d63c:	e108      	b.n	800d850 <find_volume+0x4f8>
 800d63e:	bf00      	nop
 800d640:	200022d4 	.word	0x200022d4

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d644:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d648:	4413      	add	r3, r2
 800d64a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d64c:	8911      	ldrh	r1, [r2, #8]
 800d64e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d650:	8992      	ldrh	r2, [r2, #12]
 800d652:	0952      	lsrs	r2, r2, #5
 800d654:	b292      	uxth	r2, r2
 800d656:	fbb1 f2f2 	udiv	r2, r1, r2
 800d65a:	b292      	uxth	r2, r2
 800d65c:	4413      	add	r3, r2
 800d65e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d660:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d664:	429a      	cmp	r2, r3
 800d666:	d201      	bcs.n	800d66c <find_volume+0x314>
 800d668:	230d      	movs	r3, #13
 800d66a:	e0f1      	b.n	800d850 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d66c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d670:	1ad3      	subs	r3, r2, r3
 800d672:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d674:	8952      	ldrh	r2, [r2, #10]
 800d676:	fbb3 f3f2 	udiv	r3, r3, r2
 800d67a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d101      	bne.n	800d686 <find_volume+0x32e>
 800d682:	230d      	movs	r3, #13
 800d684:	e0e4      	b.n	800d850 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800d686:	2303      	movs	r3, #3
 800d688:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d68e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d692:	4293      	cmp	r3, r2
 800d694:	d802      	bhi.n	800d69c <find_volume+0x344>
 800d696:	2302      	movs	r3, #2
 800d698:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d69e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	d802      	bhi.n	800d6ac <find_volume+0x354>
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ae:	1c9a      	adds	r2, r3, #2
 800d6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b2:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800d6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d6b8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d6ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d6bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6be:	441a      	add	r2, r3
 800d6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6c2:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800d6c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6c8:	441a      	add	r2, r3
 800d6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6cc:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800d6ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d6d2:	2b03      	cmp	r3, #3
 800d6d4:	d11e      	bne.n	800d714 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6d8:	3338      	adds	r3, #56	; 0x38
 800d6da:	332a      	adds	r3, #42	; 0x2a
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f7fd ffb9 	bl	800b654 <ld_word>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d001      	beq.n	800d6ec <find_volume+0x394>
 800d6e8:	230d      	movs	r3, #13
 800d6ea:	e0b1      	b.n	800d850 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ee:	891b      	ldrh	r3, [r3, #8]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d001      	beq.n	800d6f8 <find_volume+0x3a0>
 800d6f4:	230d      	movs	r3, #13
 800d6f6:	e0ab      	b.n	800d850 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6fa:	3338      	adds	r3, #56	; 0x38
 800d6fc:	332c      	adds	r3, #44	; 0x2c
 800d6fe:	4618      	mov	r0, r3
 800d700:	f7fd ffc0 	bl	800b684 <ld_dword>
 800d704:	4602      	mov	r2, r0
 800d706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d708:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d70a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d70c:	69db      	ldr	r3, [r3, #28]
 800d70e:	009b      	lsls	r3, r3, #2
 800d710:	647b      	str	r3, [r7, #68]	; 0x44
 800d712:	e01f      	b.n	800d754 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d716:	891b      	ldrh	r3, [r3, #8]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d101      	bne.n	800d720 <find_volume+0x3c8>
 800d71c:	230d      	movs	r3, #13
 800d71e:	e097      	b.n	800d850 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d722:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d726:	441a      	add	r2, r3
 800d728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d72a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d72c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d730:	2b02      	cmp	r3, #2
 800d732:	d103      	bne.n	800d73c <find_volume+0x3e4>
 800d734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d736:	69db      	ldr	r3, [r3, #28]
 800d738:	005b      	lsls	r3, r3, #1
 800d73a:	e00a      	b.n	800d752 <find_volume+0x3fa>
 800d73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d73e:	69da      	ldr	r2, [r3, #28]
 800d740:	4613      	mov	r3, r2
 800d742:	005b      	lsls	r3, r3, #1
 800d744:	4413      	add	r3, r2
 800d746:	085a      	lsrs	r2, r3, #1
 800d748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d74a:	69db      	ldr	r3, [r3, #28]
 800d74c:	f003 0301 	and.w	r3, r3, #1
 800d750:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d752:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d756:	6a1a      	ldr	r2, [r3, #32]
 800d758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d75a:	899b      	ldrh	r3, [r3, #12]
 800d75c:	4619      	mov	r1, r3
 800d75e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d760:	440b      	add	r3, r1
 800d762:	3b01      	subs	r3, #1
 800d764:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d766:	8989      	ldrh	r1, [r1, #12]
 800d768:	fbb3 f3f1 	udiv	r3, r3, r1
 800d76c:	429a      	cmp	r2, r3
 800d76e:	d201      	bcs.n	800d774 <find_volume+0x41c>
 800d770:	230d      	movs	r3, #13
 800d772:	e06d      	b.n	800d850 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d776:	f04f 32ff 	mov.w	r2, #4294967295
 800d77a:	619a      	str	r2, [r3, #24]
 800d77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d77e:	699a      	ldr	r2, [r3, #24]
 800d780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d782:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800d784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d786:	2280      	movs	r2, #128	; 0x80
 800d788:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d78a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d78e:	2b03      	cmp	r3, #3
 800d790:	d149      	bne.n	800d826 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d794:	3338      	adds	r3, #56	; 0x38
 800d796:	3330      	adds	r3, #48	; 0x30
 800d798:	4618      	mov	r0, r3
 800d79a:	f7fd ff5b 	bl	800b654 <ld_word>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	2b01      	cmp	r3, #1
 800d7a2:	d140      	bne.n	800d826 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d7a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7a6:	3301      	adds	r3, #1
 800d7a8:	4619      	mov	r1, r3
 800d7aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d7ac:	f7fe fa02 	bl	800bbb4 <move_window>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d137      	bne.n	800d826 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800d7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7be:	3338      	adds	r3, #56	; 0x38
 800d7c0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f7fd ff45 	bl	800b654 <ld_word>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	461a      	mov	r2, r3
 800d7ce:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d7d2:	429a      	cmp	r2, r3
 800d7d4:	d127      	bne.n	800d826 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d8:	3338      	adds	r3, #56	; 0x38
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f7fd ff52 	bl	800b684 <ld_dword>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	4a1d      	ldr	r2, [pc, #116]	; (800d858 <find_volume+0x500>)
 800d7e4:	4293      	cmp	r3, r2
 800d7e6:	d11e      	bne.n	800d826 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ea:	3338      	adds	r3, #56	; 0x38
 800d7ec:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f7fd ff47 	bl	800b684 <ld_dword>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	4a18      	ldr	r2, [pc, #96]	; (800d85c <find_volume+0x504>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d113      	bne.n	800d826 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d800:	3338      	adds	r3, #56	; 0x38
 800d802:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d806:	4618      	mov	r0, r3
 800d808:	f7fd ff3c 	bl	800b684 <ld_dword>
 800d80c:	4602      	mov	r2, r0
 800d80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d810:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d814:	3338      	adds	r3, #56	; 0x38
 800d816:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d81a:	4618      	mov	r0, r3
 800d81c:	f7fd ff32 	bl	800b684 <ld_dword>
 800d820:	4602      	mov	r2, r0
 800d822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d824:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d828:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d82c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d82e:	4b0c      	ldr	r3, [pc, #48]	; (800d860 <find_volume+0x508>)
 800d830:	881b      	ldrh	r3, [r3, #0]
 800d832:	3301      	adds	r3, #1
 800d834:	b29a      	uxth	r2, r3
 800d836:	4b0a      	ldr	r3, [pc, #40]	; (800d860 <find_volume+0x508>)
 800d838:	801a      	strh	r2, [r3, #0]
 800d83a:	4b09      	ldr	r3, [pc, #36]	; (800d860 <find_volume+0x508>)
 800d83c:	881a      	ldrh	r2, [r3, #0]
 800d83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d840:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800d842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d844:	4a07      	ldr	r2, [pc, #28]	; (800d864 <find_volume+0x50c>)
 800d846:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d848:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d84a:	f7fe f94b 	bl	800bae4 <clear_lock>
#endif
	return FR_OK;
 800d84e:	2300      	movs	r3, #0
}
 800d850:	4618      	mov	r0, r3
 800d852:	3758      	adds	r7, #88	; 0x58
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}
 800d858:	41615252 	.word	0x41615252
 800d85c:	61417272 	.word	0x61417272
 800d860:	200022d8 	.word	0x200022d8
 800d864:	200022fc 	.word	0x200022fc

0800d868 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b084      	sub	sp, #16
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
 800d870:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d872:	2309      	movs	r3, #9
 800d874:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d01c      	beq.n	800d8b6 <validate+0x4e>
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d018      	beq.n	800d8b6 <validate+0x4e>
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	781b      	ldrb	r3, [r3, #0]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d013      	beq.n	800d8b6 <validate+0x4e>
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	889a      	ldrh	r2, [r3, #4]
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	88db      	ldrh	r3, [r3, #6]
 800d898:	429a      	cmp	r2, r3
 800d89a:	d10c      	bne.n	800d8b6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	785b      	ldrb	r3, [r3, #1]
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f7fd fe38 	bl	800b518 <disk_status>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	f003 0301 	and.w	r3, r3, #1
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d101      	bne.n	800d8b6 <validate+0x4e>
			res = FR_OK;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d8b6:	7bfb      	ldrb	r3, [r7, #15]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d102      	bne.n	800d8c2 <validate+0x5a>
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	e000      	b.n	800d8c4 <validate+0x5c>
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	683a      	ldr	r2, [r7, #0]
 800d8c6:	6013      	str	r3, [r2, #0]
	return res;
 800d8c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3710      	adds	r7, #16
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}
	...

0800d8d4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b088      	sub	sp, #32
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	60f8      	str	r0, [r7, #12]
 800d8dc:	60b9      	str	r1, [r7, #8]
 800d8de:	4613      	mov	r3, r2
 800d8e0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d8e6:	f107 0310 	add.w	r3, r7, #16
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f7ff fc9a 	bl	800d224 <get_ldnumber>
 800d8f0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d8f2:	69fb      	ldr	r3, [r7, #28]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	da01      	bge.n	800d8fc <f_mount+0x28>
 800d8f8:	230b      	movs	r3, #11
 800d8fa:	e02b      	b.n	800d954 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d8fc:	4a17      	ldr	r2, [pc, #92]	; (800d95c <f_mount+0x88>)
 800d8fe:	69fb      	ldr	r3, [r7, #28]
 800d900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d904:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d906:	69bb      	ldr	r3, [r7, #24]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d005      	beq.n	800d918 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d90c:	69b8      	ldr	r0, [r7, #24]
 800d90e:	f7fe f8e9 	bl	800bae4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d912:	69bb      	ldr	r3, [r7, #24]
 800d914:	2200      	movs	r2, #0
 800d916:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d002      	beq.n	800d924 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	2200      	movs	r2, #0
 800d922:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d924:	68fa      	ldr	r2, [r7, #12]
 800d926:	490d      	ldr	r1, [pc, #52]	; (800d95c <f_mount+0x88>)
 800d928:	69fb      	ldr	r3, [r7, #28]
 800d92a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d002      	beq.n	800d93a <f_mount+0x66>
 800d934:	79fb      	ldrb	r3, [r7, #7]
 800d936:	2b01      	cmp	r3, #1
 800d938:	d001      	beq.n	800d93e <f_mount+0x6a>
 800d93a:	2300      	movs	r3, #0
 800d93c:	e00a      	b.n	800d954 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d93e:	f107 010c 	add.w	r1, r7, #12
 800d942:	f107 0308 	add.w	r3, r7, #8
 800d946:	2200      	movs	r2, #0
 800d948:	4618      	mov	r0, r3
 800d94a:	f7ff fd05 	bl	800d358 <find_volume>
 800d94e:	4603      	mov	r3, r0
 800d950:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d952:	7dfb      	ldrb	r3, [r7, #23]
}
 800d954:	4618      	mov	r0, r3
 800d956:	3720      	adds	r7, #32
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}
 800d95c:	200022d4 	.word	0x200022d4

0800d960 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b09a      	sub	sp, #104	; 0x68
 800d964:	af00      	add	r7, sp, #0
 800d966:	60f8      	str	r0, [r7, #12]
 800d968:	60b9      	str	r1, [r7, #8]
 800d96a:	4613      	mov	r3, r2
 800d96c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d101      	bne.n	800d978 <f_open+0x18>
 800d974:	2309      	movs	r3, #9
 800d976:	e1bb      	b.n	800dcf0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d978:	79fb      	ldrb	r3, [r7, #7]
 800d97a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d97e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d980:	79fa      	ldrb	r2, [r7, #7]
 800d982:	f107 0114 	add.w	r1, r7, #20
 800d986:	f107 0308 	add.w	r3, r7, #8
 800d98a:	4618      	mov	r0, r3
 800d98c:	f7ff fce4 	bl	800d358 <find_volume>
 800d990:	4603      	mov	r3, r0
 800d992:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800d996:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	f040 819f 	bne.w	800dcde <f_open+0x37e>
		dj.obj.fs = fs;
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d9a4:	68ba      	ldr	r2, [r7, #8]
 800d9a6:	f107 0318 	add.w	r3, r7, #24
 800d9aa:	4611      	mov	r1, r2
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f7ff fbc3 	bl	800d138 <follow_path>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d9b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d11a      	bne.n	800d9f6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d9c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d9c4:	b25b      	sxtb	r3, r3
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	da03      	bge.n	800d9d2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800d9ca:	2306      	movs	r3, #6
 800d9cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d9d0:	e011      	b.n	800d9f6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d9d2:	79fb      	ldrb	r3, [r7, #7]
 800d9d4:	f023 0301 	bic.w	r3, r3, #1
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	bf14      	ite	ne
 800d9dc:	2301      	movne	r3, #1
 800d9de:	2300      	moveq	r3, #0
 800d9e0:	b2db      	uxtb	r3, r3
 800d9e2:	461a      	mov	r2, r3
 800d9e4:	f107 0318 	add.w	r3, r7, #24
 800d9e8:	4611      	mov	r1, r2
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f7fd ff32 	bl	800b854 <chk_lock>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d9f6:	79fb      	ldrb	r3, [r7, #7]
 800d9f8:	f003 031c 	and.w	r3, r3, #28
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d07f      	beq.n	800db00 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800da00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800da04:	2b00      	cmp	r3, #0
 800da06:	d017      	beq.n	800da38 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800da08:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800da0c:	2b04      	cmp	r3, #4
 800da0e:	d10e      	bne.n	800da2e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800da10:	f7fd ff7c 	bl	800b90c <enq_lock>
 800da14:	4603      	mov	r3, r0
 800da16:	2b00      	cmp	r3, #0
 800da18:	d006      	beq.n	800da28 <f_open+0xc8>
 800da1a:	f107 0318 	add.w	r3, r7, #24
 800da1e:	4618      	mov	r0, r3
 800da20:	f7ff f8da 	bl	800cbd8 <dir_register>
 800da24:	4603      	mov	r3, r0
 800da26:	e000      	b.n	800da2a <f_open+0xca>
 800da28:	2312      	movs	r3, #18
 800da2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800da2e:	79fb      	ldrb	r3, [r7, #7]
 800da30:	f043 0308 	orr.w	r3, r3, #8
 800da34:	71fb      	strb	r3, [r7, #7]
 800da36:	e010      	b.n	800da5a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800da38:	7fbb      	ldrb	r3, [r7, #30]
 800da3a:	f003 0311 	and.w	r3, r3, #17
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d003      	beq.n	800da4a <f_open+0xea>
					res = FR_DENIED;
 800da42:	2307      	movs	r3, #7
 800da44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800da48:	e007      	b.n	800da5a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800da4a:	79fb      	ldrb	r3, [r7, #7]
 800da4c:	f003 0304 	and.w	r3, r3, #4
 800da50:	2b00      	cmp	r3, #0
 800da52:	d002      	beq.n	800da5a <f_open+0xfa>
 800da54:	2308      	movs	r3, #8
 800da56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800da5a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d168      	bne.n	800db34 <f_open+0x1d4>
 800da62:	79fb      	ldrb	r3, [r7, #7]
 800da64:	f003 0308 	and.w	r3, r3, #8
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d063      	beq.n	800db34 <f_open+0x1d4>
				dw = GET_FATTIME();
 800da6c:	f7fd fbe8 	bl	800b240 <get_fattime>
 800da70:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800da72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da74:	330e      	adds	r3, #14
 800da76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800da78:	4618      	mov	r0, r3
 800da7a:	f7fd fe41 	bl	800b700 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800da7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da80:	3316      	adds	r3, #22
 800da82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800da84:	4618      	mov	r0, r3
 800da86:	f7fd fe3b 	bl	800b700 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800da8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da8c:	330b      	adds	r3, #11
 800da8e:	2220      	movs	r2, #32
 800da90:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da96:	4611      	mov	r1, r2
 800da98:	4618      	mov	r0, r3
 800da9a:	f7fe fe13 	bl	800c6c4 <ld_clust>
 800da9e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800daa0:	697b      	ldr	r3, [r7, #20]
 800daa2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800daa4:	2200      	movs	r2, #0
 800daa6:	4618      	mov	r0, r3
 800daa8:	f7fe fe2b 	bl	800c702 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800daac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daae:	331c      	adds	r3, #28
 800dab0:	2100      	movs	r1, #0
 800dab2:	4618      	mov	r0, r3
 800dab4:	f7fd fe24 	bl	800b700 <st_dword>
					fs->wflag = 1;
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	2201      	movs	r2, #1
 800dabc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800dabe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d037      	beq.n	800db34 <f_open+0x1d4>
						dw = fs->winsect;
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dac8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800daca:	f107 0318 	add.w	r3, r7, #24
 800dace:	2200      	movs	r2, #0
 800dad0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7fe fb1b 	bl	800c10e <remove_chain>
 800dad8:	4603      	mov	r3, r0
 800dada:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800dade:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d126      	bne.n	800db34 <f_open+0x1d4>
							res = move_window(fs, dw);
 800dae6:	697b      	ldr	r3, [r7, #20]
 800dae8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800daea:	4618      	mov	r0, r3
 800daec:	f7fe f862 	bl	800bbb4 <move_window>
 800daf0:	4603      	mov	r3, r0
 800daf2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800daf6:	697b      	ldr	r3, [r7, #20]
 800daf8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dafa:	3a01      	subs	r2, #1
 800dafc:	615a      	str	r2, [r3, #20]
 800dafe:	e019      	b.n	800db34 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800db00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800db04:	2b00      	cmp	r3, #0
 800db06:	d115      	bne.n	800db34 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800db08:	7fbb      	ldrb	r3, [r7, #30]
 800db0a:	f003 0310 	and.w	r3, r3, #16
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d003      	beq.n	800db1a <f_open+0x1ba>
					res = FR_NO_FILE;
 800db12:	2304      	movs	r3, #4
 800db14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800db18:	e00c      	b.n	800db34 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800db1a:	79fb      	ldrb	r3, [r7, #7]
 800db1c:	f003 0302 	and.w	r3, r3, #2
 800db20:	2b00      	cmp	r3, #0
 800db22:	d007      	beq.n	800db34 <f_open+0x1d4>
 800db24:	7fbb      	ldrb	r3, [r7, #30]
 800db26:	f003 0301 	and.w	r3, r3, #1
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d002      	beq.n	800db34 <f_open+0x1d4>
						res = FR_DENIED;
 800db2e:	2307      	movs	r3, #7
 800db30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800db34:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d128      	bne.n	800db8e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800db3c:	79fb      	ldrb	r3, [r7, #7]
 800db3e:	f003 0308 	and.w	r3, r3, #8
 800db42:	2b00      	cmp	r3, #0
 800db44:	d003      	beq.n	800db4e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800db46:	79fb      	ldrb	r3, [r7, #7]
 800db48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db4c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800db56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800db5c:	79fb      	ldrb	r3, [r7, #7]
 800db5e:	f023 0301 	bic.w	r3, r3, #1
 800db62:	2b00      	cmp	r3, #0
 800db64:	bf14      	ite	ne
 800db66:	2301      	movne	r3, #1
 800db68:	2300      	moveq	r3, #0
 800db6a:	b2db      	uxtb	r3, r3
 800db6c:	461a      	mov	r2, r3
 800db6e:	f107 0318 	add.w	r3, r7, #24
 800db72:	4611      	mov	r1, r2
 800db74:	4618      	mov	r0, r3
 800db76:	f7fd feeb 	bl	800b950 <inc_lock>
 800db7a:	4602      	mov	r2, r0
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	691b      	ldr	r3, [r3, #16]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d102      	bne.n	800db8e <f_open+0x22e>
 800db88:	2302      	movs	r3, #2
 800db8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800db8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800db92:	2b00      	cmp	r3, #0
 800db94:	f040 80a3 	bne.w	800dcde <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db9c:	4611      	mov	r1, r2
 800db9e:	4618      	mov	r0, r3
 800dba0:	f7fe fd90 	bl	800c6c4 <ld_clust>
 800dba4:	4602      	mov	r2, r0
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800dbaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbac:	331c      	adds	r3, #28
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f7fd fd68 	bl	800b684 <ld_dword>
 800dbb4:	4602      	mov	r2, r0
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800dbc0:	697a      	ldr	r2, [r7, #20]
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	88da      	ldrh	r2, [r3, #6]
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	79fa      	ldrb	r2, [r7, #7]
 800dbd2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	3330      	adds	r3, #48	; 0x30
 800dbea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800dbee:	2100      	movs	r1, #0
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f7fd fdd2 	bl	800b79a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800dbf6:	79fb      	ldrb	r3, [r7, #7]
 800dbf8:	f003 0320 	and.w	r3, r3, #32
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d06e      	beq.n	800dcde <f_open+0x37e>
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	68db      	ldr	r3, [r3, #12]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d06a      	beq.n	800dcde <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	68da      	ldr	r2, [r3, #12]
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	895b      	ldrh	r3, [r3, #10]
 800dc14:	461a      	mov	r2, r3
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	899b      	ldrh	r3, [r3, #12]
 800dc1a:	fb03 f302 	mul.w	r3, r3, r2
 800dc1e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	689b      	ldr	r3, [r3, #8]
 800dc24:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	68db      	ldr	r3, [r3, #12]
 800dc2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dc2c:	e016      	b.n	800dc5c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dc32:	4618      	mov	r0, r3
 800dc34:	f7fe f87b 	bl	800bd2e <get_fat>
 800dc38:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800dc3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc3c:	2b01      	cmp	r3, #1
 800dc3e:	d802      	bhi.n	800dc46 <f_open+0x2e6>
 800dc40:	2302      	movs	r3, #2
 800dc42:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800dc46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc4c:	d102      	bne.n	800dc54 <f_open+0x2f4>
 800dc4e:	2301      	movs	r3, #1
 800dc50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dc54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dc56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc58:	1ad3      	subs	r3, r2, r3
 800dc5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dc5c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d103      	bne.n	800dc6c <f_open+0x30c>
 800dc64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dc66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc68:	429a      	cmp	r2, r3
 800dc6a:	d8e0      	bhi.n	800dc2e <f_open+0x2ce>
				}
				fp->clust = clst;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dc70:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800dc72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d131      	bne.n	800dcde <f_open+0x37e>
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	899b      	ldrh	r3, [r3, #12]
 800dc7e:	461a      	mov	r2, r3
 800dc80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc82:	fbb3 f1f2 	udiv	r1, r3, r2
 800dc86:	fb02 f201 	mul.w	r2, r2, r1
 800dc8a:	1a9b      	subs	r3, r3, r2
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d026      	beq.n	800dcde <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dc94:	4618      	mov	r0, r3
 800dc96:	f7fe f82b 	bl	800bcf0 <clust2sect>
 800dc9a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800dc9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d103      	bne.n	800dcaa <f_open+0x34a>
						res = FR_INT_ERR;
 800dca2:	2302      	movs	r3, #2
 800dca4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800dca8:	e019      	b.n	800dcde <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	899b      	ldrh	r3, [r3, #12]
 800dcae:	461a      	mov	r2, r3
 800dcb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcb2:	fbb3 f2f2 	udiv	r2, r3, r2
 800dcb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcb8:	441a      	add	r2, r3
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	7858      	ldrb	r0, [r3, #1]
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	6a1a      	ldr	r2, [r3, #32]
 800dccc:	2301      	movs	r3, #1
 800dcce:	f7fd fc63 	bl	800b598 <disk_read>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d002      	beq.n	800dcde <f_open+0x37e>
 800dcd8:	2301      	movs	r3, #1
 800dcda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800dcde:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d002      	beq.n	800dcec <f_open+0x38c>
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	2200      	movs	r2, #0
 800dcea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800dcec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3768      	adds	r7, #104	; 0x68
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}

0800dcf8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b08c      	sub	sp, #48	; 0x30
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	60f8      	str	r0, [r7, #12]
 800dd00:	60b9      	str	r1, [r7, #8]
 800dd02:	607a      	str	r2, [r7, #4]
 800dd04:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	f107 0210 	add.w	r2, r7, #16
 800dd16:	4611      	mov	r1, r2
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f7ff fda5 	bl	800d868 <validate>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800dd24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d107      	bne.n	800dd3c <f_write+0x44>
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	7d5b      	ldrb	r3, [r3, #21]
 800dd30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800dd34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d002      	beq.n	800dd42 <f_write+0x4a>
 800dd3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd40:	e16a      	b.n	800e018 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	7d1b      	ldrb	r3, [r3, #20]
 800dd46:	f003 0302 	and.w	r3, r3, #2
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d101      	bne.n	800dd52 <f_write+0x5a>
 800dd4e:	2307      	movs	r3, #7
 800dd50:	e162      	b.n	800e018 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	699a      	ldr	r2, [r3, #24]
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	441a      	add	r2, r3
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	699b      	ldr	r3, [r3, #24]
 800dd5e:	429a      	cmp	r2, r3
 800dd60:	f080 814c 	bcs.w	800dffc <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	699b      	ldr	r3, [r3, #24]
 800dd68:	43db      	mvns	r3, r3
 800dd6a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800dd6c:	e146      	b.n	800dffc <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	699b      	ldr	r3, [r3, #24]
 800dd72:	693a      	ldr	r2, [r7, #16]
 800dd74:	8992      	ldrh	r2, [r2, #12]
 800dd76:	fbb3 f1f2 	udiv	r1, r3, r2
 800dd7a:	fb02 f201 	mul.w	r2, r2, r1
 800dd7e:	1a9b      	subs	r3, r3, r2
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	f040 80f1 	bne.w	800df68 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	699b      	ldr	r3, [r3, #24]
 800dd8a:	693a      	ldr	r2, [r7, #16]
 800dd8c:	8992      	ldrh	r2, [r2, #12]
 800dd8e:	fbb3 f3f2 	udiv	r3, r3, r2
 800dd92:	693a      	ldr	r2, [r7, #16]
 800dd94:	8952      	ldrh	r2, [r2, #10]
 800dd96:	3a01      	subs	r2, #1
 800dd98:	4013      	ands	r3, r2
 800dd9a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800dd9c:	69bb      	ldr	r3, [r7, #24]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d143      	bne.n	800de2a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	699b      	ldr	r3, [r3, #24]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d10c      	bne.n	800ddc4 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	689b      	ldr	r3, [r3, #8]
 800ddae:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ddb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d11a      	bne.n	800ddec <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	2100      	movs	r1, #0
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f7fe fa0c 	bl	800c1d8 <create_chain>
 800ddc0:	62b8      	str	r0, [r7, #40]	; 0x28
 800ddc2:	e013      	b.n	800ddec <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d007      	beq.n	800dddc <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	699b      	ldr	r3, [r3, #24]
 800ddd0:	4619      	mov	r1, r3
 800ddd2:	68f8      	ldr	r0, [r7, #12]
 800ddd4:	f7fe fa98 	bl	800c308 <clmt_clust>
 800ddd8:	62b8      	str	r0, [r7, #40]	; 0x28
 800ddda:	e007      	b.n	800ddec <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800dddc:	68fa      	ldr	r2, [r7, #12]
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	69db      	ldr	r3, [r3, #28]
 800dde2:	4619      	mov	r1, r3
 800dde4:	4610      	mov	r0, r2
 800dde6:	f7fe f9f7 	bl	800c1d8 <create_chain>
 800ddea:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ddec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	f000 8109 	beq.w	800e006 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ddf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddf6:	2b01      	cmp	r3, #1
 800ddf8:	d104      	bne.n	800de04 <f_write+0x10c>
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	2202      	movs	r2, #2
 800ddfe:	755a      	strb	r2, [r3, #21]
 800de00:	2302      	movs	r3, #2
 800de02:	e109      	b.n	800e018 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800de04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de0a:	d104      	bne.n	800de16 <f_write+0x11e>
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	2201      	movs	r2, #1
 800de10:	755a      	strb	r2, [r3, #21]
 800de12:	2301      	movs	r3, #1
 800de14:	e100      	b.n	800e018 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de1a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	689b      	ldr	r3, [r3, #8]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d102      	bne.n	800de2a <f_write+0x132>
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de28:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	7d1b      	ldrb	r3, [r3, #20]
 800de2e:	b25b      	sxtb	r3, r3
 800de30:	2b00      	cmp	r3, #0
 800de32:	da18      	bge.n	800de66 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	7858      	ldrb	r0, [r3, #1]
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	6a1a      	ldr	r2, [r3, #32]
 800de42:	2301      	movs	r3, #1
 800de44:	f7fd fbc8 	bl	800b5d8 <disk_write>
 800de48:	4603      	mov	r3, r0
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d004      	beq.n	800de58 <f_write+0x160>
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	2201      	movs	r2, #1
 800de52:	755a      	strb	r2, [r3, #21]
 800de54:	2301      	movs	r3, #1
 800de56:	e0df      	b.n	800e018 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	7d1b      	ldrb	r3, [r3, #20]
 800de5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de60:	b2da      	uxtb	r2, r3
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800de66:	693a      	ldr	r2, [r7, #16]
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	69db      	ldr	r3, [r3, #28]
 800de6c:	4619      	mov	r1, r3
 800de6e:	4610      	mov	r0, r2
 800de70:	f7fd ff3e 	bl	800bcf0 <clust2sect>
 800de74:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800de76:	697b      	ldr	r3, [r7, #20]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d104      	bne.n	800de86 <f_write+0x18e>
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	2202      	movs	r2, #2
 800de80:	755a      	strb	r2, [r3, #21]
 800de82:	2302      	movs	r3, #2
 800de84:	e0c8      	b.n	800e018 <f_write+0x320>
			sect += csect;
 800de86:	697a      	ldr	r2, [r7, #20]
 800de88:	69bb      	ldr	r3, [r7, #24]
 800de8a:	4413      	add	r3, r2
 800de8c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800de8e:	693b      	ldr	r3, [r7, #16]
 800de90:	899b      	ldrh	r3, [r3, #12]
 800de92:	461a      	mov	r2, r3
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	fbb3 f3f2 	udiv	r3, r3, r2
 800de9a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800de9c:	6a3b      	ldr	r3, [r7, #32]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d043      	beq.n	800df2a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800dea2:	69ba      	ldr	r2, [r7, #24]
 800dea4:	6a3b      	ldr	r3, [r7, #32]
 800dea6:	4413      	add	r3, r2
 800dea8:	693a      	ldr	r2, [r7, #16]
 800deaa:	8952      	ldrh	r2, [r2, #10]
 800deac:	4293      	cmp	r3, r2
 800deae:	d905      	bls.n	800debc <f_write+0x1c4>
					cc = fs->csize - csect;
 800deb0:	693b      	ldr	r3, [r7, #16]
 800deb2:	895b      	ldrh	r3, [r3, #10]
 800deb4:	461a      	mov	r2, r3
 800deb6:	69bb      	ldr	r3, [r7, #24]
 800deb8:	1ad3      	subs	r3, r2, r3
 800deba:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800debc:	693b      	ldr	r3, [r7, #16]
 800debe:	7858      	ldrb	r0, [r3, #1]
 800dec0:	6a3b      	ldr	r3, [r7, #32]
 800dec2:	697a      	ldr	r2, [r7, #20]
 800dec4:	69f9      	ldr	r1, [r7, #28]
 800dec6:	f7fd fb87 	bl	800b5d8 <disk_write>
 800deca:	4603      	mov	r3, r0
 800decc:	2b00      	cmp	r3, #0
 800dece:	d004      	beq.n	800deda <f_write+0x1e2>
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	2201      	movs	r2, #1
 800ded4:	755a      	strb	r2, [r3, #21]
 800ded6:	2301      	movs	r3, #1
 800ded8:	e09e      	b.n	800e018 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	6a1a      	ldr	r2, [r3, #32]
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	1ad3      	subs	r3, r2, r3
 800dee2:	6a3a      	ldr	r2, [r7, #32]
 800dee4:	429a      	cmp	r2, r3
 800dee6:	d918      	bls.n	800df1a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	6a1a      	ldr	r2, [r3, #32]
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	1ad3      	subs	r3, r2, r3
 800def6:	693a      	ldr	r2, [r7, #16]
 800def8:	8992      	ldrh	r2, [r2, #12]
 800defa:	fb02 f303 	mul.w	r3, r2, r3
 800defe:	69fa      	ldr	r2, [r7, #28]
 800df00:	18d1      	adds	r1, r2, r3
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	899b      	ldrh	r3, [r3, #12]
 800df06:	461a      	mov	r2, r3
 800df08:	f7fd fc26 	bl	800b758 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	7d1b      	ldrb	r3, [r3, #20]
 800df10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df14:	b2da      	uxtb	r2, r3
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	899b      	ldrh	r3, [r3, #12]
 800df1e:	461a      	mov	r2, r3
 800df20:	6a3b      	ldr	r3, [r7, #32]
 800df22:	fb02 f303 	mul.w	r3, r2, r3
 800df26:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800df28:	e04b      	b.n	800dfc2 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	6a1b      	ldr	r3, [r3, #32]
 800df2e:	697a      	ldr	r2, [r7, #20]
 800df30:	429a      	cmp	r2, r3
 800df32:	d016      	beq.n	800df62 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	699a      	ldr	r2, [r3, #24]
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d210      	bcs.n	800df62 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800df40:	693b      	ldr	r3, [r7, #16]
 800df42:	7858      	ldrb	r0, [r3, #1]
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800df4a:	2301      	movs	r3, #1
 800df4c:	697a      	ldr	r2, [r7, #20]
 800df4e:	f7fd fb23 	bl	800b598 <disk_read>
 800df52:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800df54:	2b00      	cmp	r3, #0
 800df56:	d004      	beq.n	800df62 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	2201      	movs	r2, #1
 800df5c:	755a      	strb	r2, [r3, #21]
 800df5e:	2301      	movs	r3, #1
 800df60:	e05a      	b.n	800e018 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	697a      	ldr	r2, [r7, #20]
 800df66:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	899b      	ldrh	r3, [r3, #12]
 800df6c:	4618      	mov	r0, r3
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	699b      	ldr	r3, [r3, #24]
 800df72:	693a      	ldr	r2, [r7, #16]
 800df74:	8992      	ldrh	r2, [r2, #12]
 800df76:	fbb3 f1f2 	udiv	r1, r3, r2
 800df7a:	fb02 f201 	mul.w	r2, r2, r1
 800df7e:	1a9b      	subs	r3, r3, r2
 800df80:	1ac3      	subs	r3, r0, r3
 800df82:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800df84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	429a      	cmp	r2, r3
 800df8a:	d901      	bls.n	800df90 <f_write+0x298>
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	699b      	ldr	r3, [r3, #24]
 800df9a:	693a      	ldr	r2, [r7, #16]
 800df9c:	8992      	ldrh	r2, [r2, #12]
 800df9e:	fbb3 f0f2 	udiv	r0, r3, r2
 800dfa2:	fb02 f200 	mul.w	r2, r2, r0
 800dfa6:	1a9b      	subs	r3, r3, r2
 800dfa8:	440b      	add	r3, r1
 800dfaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfac:	69f9      	ldr	r1, [r7, #28]
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f7fd fbd2 	bl	800b758 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	7d1b      	ldrb	r3, [r3, #20]
 800dfb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dfbc:	b2da      	uxtb	r2, r3
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800dfc2:	69fa      	ldr	r2, [r7, #28]
 800dfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc6:	4413      	add	r3, r2
 800dfc8:	61fb      	str	r3, [r7, #28]
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	699a      	ldr	r2, [r3, #24]
 800dfce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd0:	441a      	add	r2, r3
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	619a      	str	r2, [r3, #24]
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	68da      	ldr	r2, [r3, #12]
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	699b      	ldr	r3, [r3, #24]
 800dfde:	429a      	cmp	r2, r3
 800dfe0:	bf38      	it	cc
 800dfe2:	461a      	movcc	r2, r3
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	60da      	str	r2, [r3, #12]
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	681a      	ldr	r2, [r3, #0]
 800dfec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfee:	441a      	add	r2, r3
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	601a      	str	r2, [r3, #0]
 800dff4:	687a      	ldr	r2, [r7, #4]
 800dff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dff8:	1ad3      	subs	r3, r2, r3
 800dffa:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	f47f aeb5 	bne.w	800dd6e <f_write+0x76>
 800e004:	e000      	b.n	800e008 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e006:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	7d1b      	ldrb	r3, [r3, #20]
 800e00c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e010:	b2da      	uxtb	r2, r3
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e016:	2300      	movs	r3, #0
}
 800e018:	4618      	mov	r0, r3
 800e01a:	3730      	adds	r7, #48	; 0x30
 800e01c:	46bd      	mov	sp, r7
 800e01e:	bd80      	pop	{r7, pc}

0800e020 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b086      	sub	sp, #24
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f107 0208 	add.w	r2, r7, #8
 800e02e:	4611      	mov	r1, r2
 800e030:	4618      	mov	r0, r3
 800e032:	f7ff fc19 	bl	800d868 <validate>
 800e036:	4603      	mov	r3, r0
 800e038:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e03a:	7dfb      	ldrb	r3, [r7, #23]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d168      	bne.n	800e112 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	7d1b      	ldrb	r3, [r3, #20]
 800e044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d062      	beq.n	800e112 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	7d1b      	ldrb	r3, [r3, #20]
 800e050:	b25b      	sxtb	r3, r3
 800e052:	2b00      	cmp	r3, #0
 800e054:	da15      	bge.n	800e082 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e056:	68bb      	ldr	r3, [r7, #8]
 800e058:	7858      	ldrb	r0, [r3, #1]
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	6a1a      	ldr	r2, [r3, #32]
 800e064:	2301      	movs	r3, #1
 800e066:	f7fd fab7 	bl	800b5d8 <disk_write>
 800e06a:	4603      	mov	r3, r0
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d001      	beq.n	800e074 <f_sync+0x54>
 800e070:	2301      	movs	r3, #1
 800e072:	e04f      	b.n	800e114 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	7d1b      	ldrb	r3, [r3, #20]
 800e078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e07c:	b2da      	uxtb	r2, r3
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e082:	f7fd f8dd 	bl	800b240 <get_fattime>
 800e086:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e088:	68ba      	ldr	r2, [r7, #8]
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e08e:	4619      	mov	r1, r3
 800e090:	4610      	mov	r0, r2
 800e092:	f7fd fd8f 	bl	800bbb4 <move_window>
 800e096:	4603      	mov	r3, r0
 800e098:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e09a:	7dfb      	ldrb	r3, [r7, #23]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d138      	bne.n	800e112 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0a4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	330b      	adds	r3, #11
 800e0aa:	781a      	ldrb	r2, [r3, #0]
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	330b      	adds	r3, #11
 800e0b0:	f042 0220 	orr.w	r2, r2, #32
 800e0b4:	b2d2      	uxtb	r2, r2
 800e0b6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	6818      	ldr	r0, [r3, #0]
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	689b      	ldr	r3, [r3, #8]
 800e0c0:	461a      	mov	r2, r3
 800e0c2:	68f9      	ldr	r1, [r7, #12]
 800e0c4:	f7fe fb1d 	bl	800c702 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	f103 021c 	add.w	r2, r3, #28
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	68db      	ldr	r3, [r3, #12]
 800e0d2:	4619      	mov	r1, r3
 800e0d4:	4610      	mov	r0, r2
 800e0d6:	f7fd fb13 	bl	800b700 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	3316      	adds	r3, #22
 800e0de:	6939      	ldr	r1, [r7, #16]
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f7fd fb0d 	bl	800b700 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	3312      	adds	r3, #18
 800e0ea:	2100      	movs	r1, #0
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f7fd faec 	bl	800b6ca <st_word>
					fs->wflag = 1;
 800e0f2:	68bb      	ldr	r3, [r7, #8]
 800e0f4:	2201      	movs	r2, #1
 800e0f6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e0f8:	68bb      	ldr	r3, [r7, #8]
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f7fd fd88 	bl	800bc10 <sync_fs>
 800e100:	4603      	mov	r3, r0
 800e102:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	7d1b      	ldrb	r3, [r3, #20]
 800e108:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e10c:	b2da      	uxtb	r2, r3
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e112:	7dfb      	ldrb	r3, [r7, #23]
}
 800e114:	4618      	mov	r0, r3
 800e116:	3718      	adds	r7, #24
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}

0800e11c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b084      	sub	sp, #16
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	f7ff ff7b 	bl	800e020 <f_sync>
 800e12a:	4603      	mov	r3, r0
 800e12c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e12e:	7bfb      	ldrb	r3, [r7, #15]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d118      	bne.n	800e166 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f107 0208 	add.w	r2, r7, #8
 800e13a:	4611      	mov	r1, r2
 800e13c:	4618      	mov	r0, r3
 800e13e:	f7ff fb93 	bl	800d868 <validate>
 800e142:	4603      	mov	r3, r0
 800e144:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e146:	7bfb      	ldrb	r3, [r7, #15]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d10c      	bne.n	800e166 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	691b      	ldr	r3, [r3, #16]
 800e150:	4618      	mov	r0, r3
 800e152:	f7fd fc8b 	bl	800ba6c <dec_lock>
 800e156:	4603      	mov	r3, r0
 800e158:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e15a:	7bfb      	ldrb	r3, [r7, #15]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d102      	bne.n	800e166 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2200      	movs	r2, #0
 800e164:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e166:	7bfb      	ldrb	r3, [r7, #15]
}
 800e168:	4618      	mov	r0, r3
 800e16a:	3710      	adds	r7, #16
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}

0800e170 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e170:	b480      	push	{r7}
 800e172:	b087      	sub	sp, #28
 800e174:	af00      	add	r7, sp, #0
 800e176:	60f8      	str	r0, [r7, #12]
 800e178:	60b9      	str	r1, [r7, #8]
 800e17a:	4613      	mov	r3, r2
 800e17c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e17e:	2301      	movs	r3, #1
 800e180:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e182:	2300      	movs	r3, #0
 800e184:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e186:	4b1f      	ldr	r3, [pc, #124]	; (800e204 <FATFS_LinkDriverEx+0x94>)
 800e188:	7a5b      	ldrb	r3, [r3, #9]
 800e18a:	b2db      	uxtb	r3, r3
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d131      	bne.n	800e1f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e190:	4b1c      	ldr	r3, [pc, #112]	; (800e204 <FATFS_LinkDriverEx+0x94>)
 800e192:	7a5b      	ldrb	r3, [r3, #9]
 800e194:	b2db      	uxtb	r3, r3
 800e196:	461a      	mov	r2, r3
 800e198:	4b1a      	ldr	r3, [pc, #104]	; (800e204 <FATFS_LinkDriverEx+0x94>)
 800e19a:	2100      	movs	r1, #0
 800e19c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e19e:	4b19      	ldr	r3, [pc, #100]	; (800e204 <FATFS_LinkDriverEx+0x94>)
 800e1a0:	7a5b      	ldrb	r3, [r3, #9]
 800e1a2:	b2db      	uxtb	r3, r3
 800e1a4:	4a17      	ldr	r2, [pc, #92]	; (800e204 <FATFS_LinkDriverEx+0x94>)
 800e1a6:	009b      	lsls	r3, r3, #2
 800e1a8:	4413      	add	r3, r2
 800e1aa:	68fa      	ldr	r2, [r7, #12]
 800e1ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e1ae:	4b15      	ldr	r3, [pc, #84]	; (800e204 <FATFS_LinkDriverEx+0x94>)
 800e1b0:	7a5b      	ldrb	r3, [r3, #9]
 800e1b2:	b2db      	uxtb	r3, r3
 800e1b4:	461a      	mov	r2, r3
 800e1b6:	4b13      	ldr	r3, [pc, #76]	; (800e204 <FATFS_LinkDriverEx+0x94>)
 800e1b8:	4413      	add	r3, r2
 800e1ba:	79fa      	ldrb	r2, [r7, #7]
 800e1bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e1be:	4b11      	ldr	r3, [pc, #68]	; (800e204 <FATFS_LinkDriverEx+0x94>)
 800e1c0:	7a5b      	ldrb	r3, [r3, #9]
 800e1c2:	b2db      	uxtb	r3, r3
 800e1c4:	1c5a      	adds	r2, r3, #1
 800e1c6:	b2d1      	uxtb	r1, r2
 800e1c8:	4a0e      	ldr	r2, [pc, #56]	; (800e204 <FATFS_LinkDriverEx+0x94>)
 800e1ca:	7251      	strb	r1, [r2, #9]
 800e1cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e1ce:	7dbb      	ldrb	r3, [r7, #22]
 800e1d0:	3330      	adds	r3, #48	; 0x30
 800e1d2:	b2da      	uxtb	r2, r3
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	3301      	adds	r3, #1
 800e1dc:	223a      	movs	r2, #58	; 0x3a
 800e1de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e1e0:	68bb      	ldr	r3, [r7, #8]
 800e1e2:	3302      	adds	r3, #2
 800e1e4:	222f      	movs	r2, #47	; 0x2f
 800e1e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	3303      	adds	r3, #3
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e1f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	371c      	adds	r7, #28
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e200:	4770      	bx	lr
 800e202:	bf00      	nop
 800e204:	20002340 	.word	0x20002340

0800e208 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b082      	sub	sp, #8
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
 800e210:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e212:	2200      	movs	r2, #0
 800e214:	6839      	ldr	r1, [r7, #0]
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f7ff ffaa 	bl	800e170 <FATFS_LinkDriverEx>
 800e21c:	4603      	mov	r3, r0
}
 800e21e:	4618      	mov	r0, r3
 800e220:	3708      	adds	r7, #8
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
	...

0800e228 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800e228:	b480      	push	{r7}
 800e22a:	b085      	sub	sp, #20
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	4603      	mov	r3, r0
 800e230:	6039      	str	r1, [r7, #0]
 800e232:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e234:	88fb      	ldrh	r3, [r7, #6]
 800e236:	2b7f      	cmp	r3, #127	; 0x7f
 800e238:	d802      	bhi.n	800e240 <ff_convert+0x18>
		c = chr;
 800e23a:	88fb      	ldrh	r3, [r7, #6]
 800e23c:	81fb      	strh	r3, [r7, #14]
 800e23e:	e025      	b.n	800e28c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d00b      	beq.n	800e25e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e246:	88fb      	ldrh	r3, [r7, #6]
 800e248:	2bff      	cmp	r3, #255	; 0xff
 800e24a:	d805      	bhi.n	800e258 <ff_convert+0x30>
 800e24c:	88fb      	ldrh	r3, [r7, #6]
 800e24e:	3b80      	subs	r3, #128	; 0x80
 800e250:	4a12      	ldr	r2, [pc, #72]	; (800e29c <ff_convert+0x74>)
 800e252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e256:	e000      	b.n	800e25a <ff_convert+0x32>
 800e258:	2300      	movs	r3, #0
 800e25a:	81fb      	strh	r3, [r7, #14]
 800e25c:	e016      	b.n	800e28c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800e25e:	2300      	movs	r3, #0
 800e260:	81fb      	strh	r3, [r7, #14]
 800e262:	e009      	b.n	800e278 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e264:	89fb      	ldrh	r3, [r7, #14]
 800e266:	4a0d      	ldr	r2, [pc, #52]	; (800e29c <ff_convert+0x74>)
 800e268:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e26c:	88fa      	ldrh	r2, [r7, #6]
 800e26e:	429a      	cmp	r2, r3
 800e270:	d006      	beq.n	800e280 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e272:	89fb      	ldrh	r3, [r7, #14]
 800e274:	3301      	adds	r3, #1
 800e276:	81fb      	strh	r3, [r7, #14]
 800e278:	89fb      	ldrh	r3, [r7, #14]
 800e27a:	2b7f      	cmp	r3, #127	; 0x7f
 800e27c:	d9f2      	bls.n	800e264 <ff_convert+0x3c>
 800e27e:	e000      	b.n	800e282 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e280:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e282:	89fb      	ldrh	r3, [r7, #14]
 800e284:	3380      	adds	r3, #128	; 0x80
 800e286:	b29b      	uxth	r3, r3
 800e288:	b2db      	uxtb	r3, r3
 800e28a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e28c:	89fb      	ldrh	r3, [r7, #14]
}
 800e28e:	4618      	mov	r0, r3
 800e290:	3714      	adds	r7, #20
 800e292:	46bd      	mov	sp, r7
 800e294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e298:	4770      	bx	lr
 800e29a:	bf00      	nop
 800e29c:	080160d4 	.word	0x080160d4

0800e2a0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e2a0:	b480      	push	{r7}
 800e2a2:	b087      	sub	sp, #28
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e2aa:	88fb      	ldrh	r3, [r7, #6]
 800e2ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e2b0:	d201      	bcs.n	800e2b6 <ff_wtoupper+0x16>
 800e2b2:	4b3e      	ldr	r3, [pc, #248]	; (800e3ac <ff_wtoupper+0x10c>)
 800e2b4:	e000      	b.n	800e2b8 <ff_wtoupper+0x18>
 800e2b6:	4b3e      	ldr	r3, [pc, #248]	; (800e3b0 <ff_wtoupper+0x110>)
 800e2b8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800e2ba:	697b      	ldr	r3, [r7, #20]
 800e2bc:	1c9a      	adds	r2, r3, #2
 800e2be:	617a      	str	r2, [r7, #20]
 800e2c0:	881b      	ldrh	r3, [r3, #0]
 800e2c2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800e2c4:	8a7b      	ldrh	r3, [r7, #18]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d068      	beq.n	800e39c <ff_wtoupper+0xfc>
 800e2ca:	88fa      	ldrh	r2, [r7, #6]
 800e2cc:	8a7b      	ldrh	r3, [r7, #18]
 800e2ce:	429a      	cmp	r2, r3
 800e2d0:	d364      	bcc.n	800e39c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	1c9a      	adds	r2, r3, #2
 800e2d6:	617a      	str	r2, [r7, #20]
 800e2d8:	881b      	ldrh	r3, [r3, #0]
 800e2da:	823b      	strh	r3, [r7, #16]
 800e2dc:	8a3b      	ldrh	r3, [r7, #16]
 800e2de:	0a1b      	lsrs	r3, r3, #8
 800e2e0:	81fb      	strh	r3, [r7, #14]
 800e2e2:	8a3b      	ldrh	r3, [r7, #16]
 800e2e4:	b2db      	uxtb	r3, r3
 800e2e6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800e2e8:	88fa      	ldrh	r2, [r7, #6]
 800e2ea:	8a79      	ldrh	r1, [r7, #18]
 800e2ec:	8a3b      	ldrh	r3, [r7, #16]
 800e2ee:	440b      	add	r3, r1
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	da49      	bge.n	800e388 <ff_wtoupper+0xe8>
			switch (cmd) {
 800e2f4:	89fb      	ldrh	r3, [r7, #14]
 800e2f6:	2b08      	cmp	r3, #8
 800e2f8:	d84f      	bhi.n	800e39a <ff_wtoupper+0xfa>
 800e2fa:	a201      	add	r2, pc, #4	; (adr r2, 800e300 <ff_wtoupper+0x60>)
 800e2fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e300:	0800e325 	.word	0x0800e325
 800e304:	0800e337 	.word	0x0800e337
 800e308:	0800e34d 	.word	0x0800e34d
 800e30c:	0800e355 	.word	0x0800e355
 800e310:	0800e35d 	.word	0x0800e35d
 800e314:	0800e365 	.word	0x0800e365
 800e318:	0800e36d 	.word	0x0800e36d
 800e31c:	0800e375 	.word	0x0800e375
 800e320:	0800e37d 	.word	0x0800e37d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e324:	88fa      	ldrh	r2, [r7, #6]
 800e326:	8a7b      	ldrh	r3, [r7, #18]
 800e328:	1ad3      	subs	r3, r2, r3
 800e32a:	005b      	lsls	r3, r3, #1
 800e32c:	697a      	ldr	r2, [r7, #20]
 800e32e:	4413      	add	r3, r2
 800e330:	881b      	ldrh	r3, [r3, #0]
 800e332:	80fb      	strh	r3, [r7, #6]
 800e334:	e027      	b.n	800e386 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e336:	88fa      	ldrh	r2, [r7, #6]
 800e338:	8a7b      	ldrh	r3, [r7, #18]
 800e33a:	1ad3      	subs	r3, r2, r3
 800e33c:	b29b      	uxth	r3, r3
 800e33e:	f003 0301 	and.w	r3, r3, #1
 800e342:	b29b      	uxth	r3, r3
 800e344:	88fa      	ldrh	r2, [r7, #6]
 800e346:	1ad3      	subs	r3, r2, r3
 800e348:	80fb      	strh	r3, [r7, #6]
 800e34a:	e01c      	b.n	800e386 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e34c:	88fb      	ldrh	r3, [r7, #6]
 800e34e:	3b10      	subs	r3, #16
 800e350:	80fb      	strh	r3, [r7, #6]
 800e352:	e018      	b.n	800e386 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e354:	88fb      	ldrh	r3, [r7, #6]
 800e356:	3b20      	subs	r3, #32
 800e358:	80fb      	strh	r3, [r7, #6]
 800e35a:	e014      	b.n	800e386 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e35c:	88fb      	ldrh	r3, [r7, #6]
 800e35e:	3b30      	subs	r3, #48	; 0x30
 800e360:	80fb      	strh	r3, [r7, #6]
 800e362:	e010      	b.n	800e386 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e364:	88fb      	ldrh	r3, [r7, #6]
 800e366:	3b1a      	subs	r3, #26
 800e368:	80fb      	strh	r3, [r7, #6]
 800e36a:	e00c      	b.n	800e386 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e36c:	88fb      	ldrh	r3, [r7, #6]
 800e36e:	3308      	adds	r3, #8
 800e370:	80fb      	strh	r3, [r7, #6]
 800e372:	e008      	b.n	800e386 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e374:	88fb      	ldrh	r3, [r7, #6]
 800e376:	3b50      	subs	r3, #80	; 0x50
 800e378:	80fb      	strh	r3, [r7, #6]
 800e37a:	e004      	b.n	800e386 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e37c:	88fb      	ldrh	r3, [r7, #6]
 800e37e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800e382:	80fb      	strh	r3, [r7, #6]
 800e384:	bf00      	nop
			}
			break;
 800e386:	e008      	b.n	800e39a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800e388:	89fb      	ldrh	r3, [r7, #14]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d195      	bne.n	800e2ba <ff_wtoupper+0x1a>
 800e38e:	8a3b      	ldrh	r3, [r7, #16]
 800e390:	005b      	lsls	r3, r3, #1
 800e392:	697a      	ldr	r2, [r7, #20]
 800e394:	4413      	add	r3, r2
 800e396:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800e398:	e78f      	b.n	800e2ba <ff_wtoupper+0x1a>
			break;
 800e39a:	bf00      	nop
	}

	return chr;
 800e39c:	88fb      	ldrh	r3, [r7, #6]
}
 800e39e:	4618      	mov	r0, r3
 800e3a0:	371c      	adds	r7, #28
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a8:	4770      	bx	lr
 800e3aa:	bf00      	nop
 800e3ac:	080161d4 	.word	0x080161d4
 800e3b0:	080163c8 	.word	0x080163c8

0800e3b4 <_tdcgp21_CS>:
#include "../TDC-GP21_defs.h"
#include <stdbool.h>
extern SPI_HandleTypeDef hspi4;

static void _tdcgp21_CS(void * intf_ptr, bool mode)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b084      	sub	sp, #16
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
 800e3bc:	460b      	mov	r3, r1
 800e3be:	70fb      	strb	r3, [r7, #3]
	tdcgp21_lovver_api_config_t *api_config = (tdcgp21_lovver_api_config_t *)intf_ptr;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	60fb      	str	r3, [r7, #12]
	tdcgp21_spi_pins_t *api_config_low = (tdcgp21_spi_pins_t *)api_config->intf_ptr;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	689b      	ldr	r3, [r3, #8]
 800e3c8:	60bb      	str	r3, [r7, #8]
	if (mode)
 800e3ca:	78fb      	ldrb	r3, [r7, #3]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d008      	beq.n	800e3e2 <_tdcgp21_CS+0x2e>
	{
		// Опускаем chip select для того, что бы начать общение с конкретным устройством.
		HAL_GPIO_WritePin(api_config_low->cs_port, api_config_low->cs_pin,  GPIO_PIN_RESET);
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	6898      	ldr	r0, [r3, #8]
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	899b      	ldrh	r3, [r3, #12]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	4619      	mov	r1, r3
 800e3dc:	f7f8 fd58 	bl	8006e90 <HAL_GPIO_WritePin>
	{
		// Поднимаем chip select для того, что бы закончить общение с конкретным устройством.
		HAL_GPIO_WritePin(api_config_low->cs_port, api_config_low->cs_pin,  GPIO_PIN_SET);
		//HAL_Delay(100);
	}
}
 800e3e0:	e007      	b.n	800e3f2 <_tdcgp21_CS+0x3e>
		HAL_GPIO_WritePin(api_config_low->cs_port, api_config_low->cs_pin,  GPIO_PIN_SET);
 800e3e2:	68bb      	ldr	r3, [r7, #8]
 800e3e4:	6898      	ldr	r0, [r3, #8]
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	899b      	ldrh	r3, [r3, #12]
 800e3ea:	2201      	movs	r2, #1
 800e3ec:	4619      	mov	r1, r3
 800e3ee:	f7f8 fd4f 	bl	8006e90 <HAL_GPIO_WritePin>
}
 800e3f2:	bf00      	nop
 800e3f4:	3710      	adds	r7, #16
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}

0800e3fa <tdcgp21_write_register>:


HAL_StatusTypeDef tdcgp21_write_register(void * intf_ptr, uint8_t reg_addr, const uint8_t * reg_data, size_t data_size)
{
 800e3fa:	b580      	push	{r7, lr}
 800e3fc:	b086      	sub	sp, #24
 800e3fe:	af00      	add	r7, sp, #0
 800e400:	60f8      	str	r0, [r7, #12]
 800e402:	607a      	str	r2, [r7, #4]
 800e404:	603b      	str	r3, [r7, #0]
 800e406:	460b      	mov	r3, r1
 800e408:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef errcode1;
	tdcgp21_lovver_api_config_t *api_config = (tdcgp21_lovver_api_config_t *)intf_ptr;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	617b      	str	r3, [r7, #20]
	api_config->tdc21_CS(intf_ptr, true);
 800e40e:	697b      	ldr	r3, [r7, #20]
 800e410:	685b      	ldr	r3, [r3, #4]
 800e412:	2101      	movs	r1, #1
 800e414:	68f8      	ldr	r0, [r7, #12]
 800e416:	4798      	blx	r3

	// Добавляем в 5 битов адреса еще 3 бита для записи в регистр
	reg_addr = TDC21_W_REGISTER | reg_addr;
 800e418:	7afb      	ldrb	r3, [r7, #11]
 800e41a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e41e:	b2db      	uxtb	r3, r3
 800e420:	72fb      	strb	r3, [r7, #11]

	// Передаем адресс регистра, в который пишем и пишем в регистр
	errcode1 = HAL_SPI_Transmit(api_config->hspi, &reg_addr, 1, HAL_MAX_DELAY);
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	6818      	ldr	r0, [r3, #0]
 800e426:	f107 010b 	add.w	r1, r7, #11
 800e42a:	f04f 33ff 	mov.w	r3, #4294967295
 800e42e:	2201      	movs	r2, #1
 800e430:	f7fb f98d 	bl	800974e <HAL_SPI_Transmit>
 800e434:	4603      	mov	r3, r0
 800e436:	74fb      	strb	r3, [r7, #19]
	if(errcode1)
 800e438:	7cfb      	ldrb	r3, [r7, #19]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d006      	beq.n	800e44c <tdcgp21_write_register+0x52>
	{
		api_config->tdc21_CS(intf_ptr, false);
 800e43e:	697b      	ldr	r3, [r7, #20]
 800e440:	685b      	ldr	r3, [r3, #4]
 800e442:	2100      	movs	r1, #0
 800e444:	68f8      	ldr	r0, [r7, #12]
 800e446:	4798      	blx	r3
		return errcode1;
 800e448:	7cfb      	ldrb	r3, [r7, #19]
 800e44a:	e00e      	b.n	800e46a <tdcgp21_write_register+0x70>
	}
	HAL_SPI_Transmit(api_config->hspi, reg_data, data_size, HAL_MAX_DELAY);
 800e44c:	697b      	ldr	r3, [r7, #20]
 800e44e:	6818      	ldr	r0, [r3, #0]
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	b29a      	uxth	r2, r3
 800e454:	f04f 33ff 	mov.w	r3, #4294967295
 800e458:	6879      	ldr	r1, [r7, #4]
 800e45a:	f7fb f978 	bl	800974e <HAL_SPI_Transmit>

	api_config->tdc21_CS(intf_ptr, false);
 800e45e:	697b      	ldr	r3, [r7, #20]
 800e460:	685b      	ldr	r3, [r3, #4]
 800e462:	2100      	movs	r1, #0
 800e464:	68f8      	ldr	r0, [r7, #12]
 800e466:	4798      	blx	r3
	return errcode1;
 800e468:	7cfb      	ldrb	r3, [r7, #19]
}
 800e46a:	4618      	mov	r0, r3
 800e46c:	3718      	adds	r7, #24
 800e46e:	46bd      	mov	sp, r7
 800e470:	bd80      	pop	{r7, pc}
	...

0800e474 <tdc21_spi_init>:
	int jopa = TDC21_START_TOF;
	HAL_SPI_Transmit(api_config->hspi, &jopa, 1, HAL_MAX_DELAY);
}

void tdc21_spi_init(tdcgp21_lovver_api_config_t* nrf24, SPI_HandleTypeDef *hspi, tdcgp21_spi_pins_t* pins)
{
 800e474:	b480      	push	{r7}
 800e476:	b085      	sub	sp, #20
 800e478:	af00      	add	r7, sp, #0
 800e47a:	60f8      	str	r0, [r7, #12]
 800e47c:	60b9      	str	r1, [r7, #8]
 800e47e:	607a      	str	r2, [r7, #4]
	nrf24->hspi = hspi;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	68ba      	ldr	r2, [r7, #8]
 800e484:	601a      	str	r2, [r3, #0]
	nrf24->tdc21_CS = _tdcgp21_CS;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	4a05      	ldr	r2, [pc, #20]	; (800e4a0 <tdc21_spi_init+0x2c>)
 800e48a:	605a      	str	r2, [r3, #4]
	nrf24->intf_ptr = pins;
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	687a      	ldr	r2, [r7, #4]
 800e490:	609a      	str	r2, [r3, #8]
}
 800e492:	bf00      	nop
 800e494:	3714      	adds	r7, #20
 800e496:	46bd      	mov	sp, r7
 800e498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49c:	4770      	bx	lr
 800e49e:	bf00      	nop
 800e4a0:	0800e3b5 	.word	0x0800e3b5

0800e4a4 <tdc21_config>:
	return data*90;
}


tdc21_all_regs_t tdc21_config(void * intf_ptr)
{
 800e4a4:	b5b0      	push	{r4, r5, r7, lr}
 800e4a6:	b09a      	sub	sp, #104	; 0x68
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
 800e4ac:	6039      	str	r1, [r7, #0]
	config_all_value_ideal_t config_all_value;
	tdc21_all_regs_t reg_i;

	reg_i.reg0 = 0;
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	60bb      	str	r3, [r7, #8]
	reg_i.reg1 = 0b00000000010000000000000000000000;
 800e4b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e4b6:	60fb      	str	r3, [r7, #12]
	reg_i.reg2 = 0;
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	613b      	str	r3, [r7, #16]
	reg_i.reg3 = 0;
 800e4bc:	2300      	movs	r3, #0
 800e4be:	617b      	str	r3, [r7, #20]
	reg_i.reg4 = 0b00100000000000000000000000000000;
 800e4c0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800e4c4:	61bb      	str	r3, [r7, #24]
	reg_i.reg5 = 0;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	61fb      	str	r3, [r7, #28]
	reg_i.reg6 = 0;
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	623b      	str	r3, [r7, #32]

//настройки нулевого регистра!!!!00000000000
	config_all_value.ANZ_FIRE = 0b0010;
 800e4ce:	2302      	movs	r3, #2
 800e4d0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	config_all_value.DIV_FIRE = 0b0010;
 800e4d4:	2302      	movs	r3, #2
 800e4d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	config_all_value.ANZ_PER_CALRES = 0;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	config_all_value.DIV_CLKHS = 0;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	config_all_value.START_CLKHS = 0b0001;
 800e4e6:	2301      	movs	r3, #1
 800e4e8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	config_all_value.ANZ_PORT = 1;
 800e4ec:	2301      	movs	r3, #1
 800e4ee:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	config_all_value.TCYCLE = 0;
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	config_all_value.ANZ_FAKE = 0;
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	config_all_value.SEL_ECLK_TMP = 1;
 800e4fe:	2301      	movs	r3, #1
 800e500:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	config_all_value.CALIBRATE = 1;
 800e504:	2301      	movs	r3, #1
 800e506:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	config_all_value.NO_CAL_AUTO = 0;
 800e50a:	2300      	movs	r3, #0
 800e50c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	config_all_value.MESSB2 = 1;
 800e510:	2301      	movs	r3, #1
 800e512:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	config_all_value.NEG_STOP2 = 0;
 800e516:	2300      	movs	r3, #0
 800e518:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	config_all_value.NEG_STOP1 = 0;
 800e51c:	2300      	movs	r3, #0
 800e51e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	config_all_value.NEG_START = 0;
 800e522:	2300      	movs	r3, #0
 800e524:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32


	///настройки первого регистра11111111111
	config_all_value.HIT1 = 0b0101;
 800e528:	2305      	movs	r3, #5
 800e52a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	config_all_value.HIT2 = 0b0101;
 800e52e:	2305      	movs	r3, #5
 800e530:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	config_all_value.EN_FAST_INIT = 0;
 800e534:	2300      	movs	r3, #0
 800e536:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	config_all_value.HITIN2 = 0;
 800e53a:	2300      	movs	r3, #0
 800e53c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	config_all_value.HITIN1 = 0;
 800e540:	2300      	movs	r3, #0
 800e542:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	config_all_value.CURR32K = 1;
 800e546:	2301      	movs	r3, #1
 800e548:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	config_all_value.SEL_START_FIRE = 0;
 800e54c:	2300      	movs	r3, #0
 800e54e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	config_all_value.SEL_TSTO2 = 0;
 800e552:	2300      	movs	r3, #0
 800e554:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	config_all_value.SEL_TSTO1 = 0;
 800e558:	2300      	movs	r3, #0
 800e55a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b


	//настройки второго регистра2222222222
	config_all_value.EN_INT_TIMEOUT = 0;
 800e55e:	2300      	movs	r3, #0
 800e560:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	config_all_value.EN_INT_END_HITS = 0;
 800e564:	2300      	movs	r3, #0
 800e566:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	config_all_value.EN_INT_ALU	= 1;
 800e56a:	2301      	movs	r3, #1
 800e56c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	config_all_value.RFEDGE2 = 0;
 800e570:	2300      	movs	r3, #0
 800e572:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	config_all_value.RFEDGE1 = 0;
 800e576:	2300      	movs	r3, #0
 800e578:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	config_all_value.DELVAL1 = 0;
 800e57c:	2300      	movs	r3, #0
 800e57e:	647b      	str	r3, [r7, #68]	; 0x44

	//настройки третьего регистра333333333
	config_all_value.EN_ERR_VAL = 0;
 800e580:	2300      	movs	r3, #0
 800e582:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	config_all_value.SEL_TIMO_MB2  = 0b11;
 800e586:	2303      	movs	r3, #3
 800e588:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	config_all_value.DELVAL2 = 0b0010000000000000000;
 800e58c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e590:	64fb      	str	r3, [r7, #76]	; 0x4c

	//настройка четвертого регистра444444444
	config_all_value.DELVAL3 = 0;
 800e592:	2300      	movs	r3, #0
 800e594:	653b      	str	r3, [r7, #80]	; 0x50


	//настройка пятого регистра5555555555
	config_all_value.CONF_FIRE = TDC21_WREG5_FIRE_UP;
 800e596:	2302      	movs	r3, #2
 800e598:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	config_all_value.EN_STARTNOISE = 0;//
 800e59c:	2300      	movs	r3, #0
 800e59e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	config_all_value.DIS_PHASESHIFT = 0;
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	config_all_value.REPEAT_FIRE = 1;
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	config_all_value.PHASE_FIRE = TDC21_WREG5_PHASE_FIRE_NOT_INVERS;
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

	//настройка шестого регистра66666666666
	config_all_value.EN_ANALOG = TDC21_WREG6_EN_ANALOG_STR1ST2_DIGITAL;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	config_all_value.NEG_STOP_TEMP = TDC21_WREG6_NEG_STOP_TEMP_74HC14;
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	config_all_value.DA_korrt = TDC21_WREG6_DA_KORRT_0MV;
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	config_all_value.TW2 = TDC21_WREG6_TW2_90MKS;
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	config_all_value.EN_INT_EEPROM = 1;//
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	config_all_value.CYCLE_TEMP = TDC21_WREG6_CYCLE_TEMP_1;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	config_all_value.CYCLE_TOF = TDC21_WREG6_CYCLE_TOF_1;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	config_all_value.HZ60 = TDC21_WREG6_HZ60_50_HZ;
 800e5de:	2300      	movs	r3, #0
 800e5e0:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	config_all_value.FIREO_DEF = TDC21_WREG6_FIREO_DEF_HIGHT_HZ;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	config_all_value.QUAD_RES = TDC21_WREG6_QUAD_RES_DISABLE;
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	config_all_value.DOUBLE_RES = TDC21_WREG6_DOUBLE_RES_DISABLE;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	config_all_value.TEMP_PORTDIR = TDC21_WREG6_TEMP_PORTDIR_PT1_PT2_PT3_PT4;
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	config_all_value.ANZ_FIRE_2 = 0;
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	reg_i.reg6 |= TDC21_WREG6_DOUBLE_RES(config_all_value.DOUBLE_RES);
	reg_i.reg6 |= TDC21_WREG6_TEMP_PORTDIR(config_all_value.TEMP_PORTDIR);
	reg_i.reg6 |= TDC21_WREG6_ANZ_FIRE((config_all_value.ANZ_FIRE >> 4));//////////////////////*/


	reg_i.reg0|= (uint32_t)1 << REG0_ANZ_FIRE; // 1 fire pulse
 800e602:	68bb      	ldr	r3, [r7, #8]
 800e604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e608:	60bb      	str	r3, [r7, #8]
	reg_i.reg0|= 1 << REG0_START_CLKHS_1_0; // 1 = Oscillator continuously on
 800e60a:	68bb      	ldr	r3, [r7, #8]
 800e60c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e610:	60bb      	str	r3, [r7, #8]
	reg_i.reg0|= 0 << REG0_CALIBRATE; // Disable calibration
 800e612:	68bb      	ldr	r3, [r7, #8]
 800e614:	60bb      	str	r3, [r7, #8]
	reg_i.reg0|= 1 << REG0_NO_CAL_AUTO;// 1 = auto-calibration disabled
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e61c:	60bb      	str	r3, [r7, #8]
	reg_i.reg0|= 7 << REG0_DIV_FIRE; //7.= divided by 8
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800e624:	60bb      	str	r3, [r7, #8]
	reg_i.reg0|= 1 << REG0_DIV_CLKHS;//1 = clk divided by 2
 800e626:	68bb      	ldr	r3, [r7, #8]
 800e628:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e62c:	60bb      	str	r3, [r7, #8]

	reg_i.reg1|= (uint32_t)9 << REG1_HIT1; // 0x9 -> 1. Stop Ch2 (photo)
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
 800e634:	60fb      	str	r3, [r7, #12]
	reg_i.reg1|= 1 << REG1_HIT2; // 0x1 -> 1. Stop Ch1 (laser)
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e63c:	60fb      	str	r3, [r7, #12]

	reg_i.reg1|= 1 << REG1_HITIN1; // 1 hit on ch1 expected (laser)
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e644:	60fb      	str	r3, [r7, #12]
	reg_i.reg1|= 2 << REG1_HITIN2; // 2 hits on ch2 expected (photo)
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e64c:	60fb      	str	r3, [r7, #12]

	reg_i.reg1|= 1 << REG1_SEL_START_FIRE; // Fire pulse is used as TDC start
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e654:	60fb      	str	r3, [r7, #12]
	reg_i.reg1|= 7 << REG1_SEL_TSTO2;//7 = 4 kHz (32 kHz/8) clock - IMPORTANT
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800e65c:	60fb      	str	r3, [r7, #12]

	reg_i.reg1|= 3 << REG1_SEL_TSTO1;//3 = STOP2 TDC output
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800e664:	60fb      	str	r3, [r7, #12]
	// *********************** REG 2
	reg_i.reg2|= (uint32_t)(1+4) << REG2_EN_INT_2_0; // 1 - timeout interr, 4 - ALU interr enable
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	f043 4320 	orr.w	r3, r3, #2684354560	; 0xa0000000
 800e66c:	613b      	str	r3, [r7, #16]
	reg_i.reg2|= 1 << REG2_RFEDGE2;//1 = rising and falling edge at channel2
 800e66e:	693b      	ldr	r3, [r7, #16]
 800e670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e674:	613b      	str	r3, [r7, #16]

	//REG 3
	reg_i.reg3|= 1 << REG3_EN_ERR_VAL; // Timeout forces ALU to write ‘hFFFFFFFF
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e67c:	617b      	str	r3, [r7, #20]

	//REG 5
	reg_i.reg5|= 2 << REG5_CONF_FIRE; //Bit 30 = 1: enable output FIRE_UP
 800e67e:	69fb      	ldr	r3, [r7, #28]
 800e680:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e684:	61fb      	str	r3, [r7, #28]
	reg_i.reg5|= 1 << REG5_DIS_PHASESHIFT;//Disable phase shift noise
 800e686:	69fb      	ldr	r3, [r7, #28]
 800e688:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e68c:	61fb      	str	r3, [r7, #28]

	//REG 6
	//reg6|= (uint32_t)1 << REG6_EN_ANALOG;
	reg_i.reg6|= 1 << REG6_FIREO_DEF; //1 = LOW
 800e68e:	6a3b      	ldr	r3, [r7, #32]
 800e690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e694:	623b      	str	r3, [r7, #32]

	//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=ЭТАП-=-ОТПРАВКИ=-=РЕГИСТРОВ-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-//
	tdcgp21_write_register(intf_ptr, TDC21_WREG0, (uint8_t*)&reg_i.reg0, 4);
 800e696:	f107 0208 	add.w	r2, r7, #8
 800e69a:	2304      	movs	r3, #4
 800e69c:	2100      	movs	r1, #0
 800e69e:	6838      	ldr	r0, [r7, #0]
 800e6a0:	f7ff feab 	bl	800e3fa <tdcgp21_write_register>
	tdcgp21_write_register(intf_ptr, TDC21_WREG1, (uint8_t*)&reg_i.reg1, 4);
 800e6a4:	f107 0308 	add.w	r3, r7, #8
 800e6a8:	1d1a      	adds	r2, r3, #4
 800e6aa:	2304      	movs	r3, #4
 800e6ac:	2101      	movs	r1, #1
 800e6ae:	6838      	ldr	r0, [r7, #0]
 800e6b0:	f7ff fea3 	bl	800e3fa <tdcgp21_write_register>
	tdcgp21_write_register(intf_ptr, TDC21_WREG2, (uint8_t*)&reg_i.reg2, 4);
 800e6b4:	f107 0308 	add.w	r3, r7, #8
 800e6b8:	f103 0208 	add.w	r2, r3, #8
 800e6bc:	2304      	movs	r3, #4
 800e6be:	2102      	movs	r1, #2
 800e6c0:	6838      	ldr	r0, [r7, #0]
 800e6c2:	f7ff fe9a 	bl	800e3fa <tdcgp21_write_register>
	tdcgp21_write_register(intf_ptr, TDC21_WREG3, (uint8_t*)&reg_i.reg3, 4);
 800e6c6:	f107 0308 	add.w	r3, r7, #8
 800e6ca:	f103 020c 	add.w	r2, r3, #12
 800e6ce:	2304      	movs	r3, #4
 800e6d0:	2103      	movs	r1, #3
 800e6d2:	6838      	ldr	r0, [r7, #0]
 800e6d4:	f7ff fe91 	bl	800e3fa <tdcgp21_write_register>
	tdcgp21_write_register(intf_ptr, TDC21_WREG4, (uint8_t*)&reg_i.reg4, 4);
 800e6d8:	f107 0308 	add.w	r3, r7, #8
 800e6dc:	f103 0210 	add.w	r2, r3, #16
 800e6e0:	2304      	movs	r3, #4
 800e6e2:	2104      	movs	r1, #4
 800e6e4:	6838      	ldr	r0, [r7, #0]
 800e6e6:	f7ff fe88 	bl	800e3fa <tdcgp21_write_register>
	tdcgp21_write_register(intf_ptr, TDC21_WREG5, (uint8_t*)&reg_i.reg5, 4);
 800e6ea:	f107 0308 	add.w	r3, r7, #8
 800e6ee:	f103 0214 	add.w	r2, r3, #20
 800e6f2:	2304      	movs	r3, #4
 800e6f4:	2105      	movs	r1, #5
 800e6f6:	6838      	ldr	r0, [r7, #0]
 800e6f8:	f7ff fe7f 	bl	800e3fa <tdcgp21_write_register>
	tdcgp21_write_register(intf_ptr, TDC21_WREG6, (uint8_t*)&reg_i.reg6, 4);
 800e6fc:	f107 0308 	add.w	r3, r7, #8
 800e700:	f103 0218 	add.w	r2, r3, #24
 800e704:	2304      	movs	r3, #4
 800e706:	2106      	movs	r1, #6
 800e708:	6838      	ldr	r0, [r7, #0]
 800e70a:	f7ff fe76 	bl	800e3fa <tdcgp21_write_register>

    //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//
	return reg_i;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	461d      	mov	r5, r3
 800e712:	f107 0408 	add.w	r4, r7, #8
 800e716:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e718:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e71a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800e71e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800e722:	6878      	ldr	r0, [r7, #4]
 800e724:	3768      	adds	r7, #104	; 0x68
 800e726:	46bd      	mov	sp, r7
 800e728:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e72c <cb_push>:


#define GPS_SYMBOLS_PER_ACTS 500

static bool cb_push(uint8_t byte)
{
 800e72c:	b480      	push	{r7}
 800e72e:	b085      	sub	sp, #20
 800e730:	af00      	add	r7, sp, #0
 800e732:	4603      	mov	r3, r0
 800e734:	71fb      	strb	r3, [r7, #7]

	size_t next_head = uart_buffer_head + 1;
 800e736:	4b10      	ldr	r3, [pc, #64]	; (800e778 <cb_push+0x4c>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	3301      	adds	r3, #1
 800e73c:	60fb      	str	r3, [r7, #12]
	if (next_head >= sizeof(uart_buffer) / sizeof(uart_buffer[0]))
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e744:	d301      	bcc.n	800e74a <cb_push+0x1e>
		next_head = 0;
 800e746:	2300      	movs	r3, #0
 800e748:	60fb      	str	r3, [r7, #12]

	if (next_head == uart_buffer_tail)
 800e74a:	4b0c      	ldr	r3, [pc, #48]	; (800e77c <cb_push+0x50>)
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	68fa      	ldr	r2, [r7, #12]
 800e750:	429a      	cmp	r2, r3
 800e752:	d101      	bne.n	800e758 <cb_push+0x2c>
		return false;
 800e754:	2300      	movs	r3, #0
 800e756:	e008      	b.n	800e76a <cb_push+0x3e>

	uart_buffer[uart_buffer_head] = byte;
 800e758:	4b07      	ldr	r3, [pc, #28]	; (800e778 <cb_push+0x4c>)
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	4908      	ldr	r1, [pc, #32]	; (800e780 <cb_push+0x54>)
 800e75e:	79fa      	ldrb	r2, [r7, #7]
 800e760:	54ca      	strb	r2, [r1, r3]
	uart_buffer_head = next_head;
 800e762:	4a05      	ldr	r2, [pc, #20]	; (800e778 <cb_push+0x4c>)
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	6013      	str	r3, [r2, #0]
	return true;
 800e768:	2301      	movs	r3, #1
}
 800e76a:	4618      	mov	r0, r3
 800e76c:	3714      	adds	r7, #20
 800e76e:	46bd      	mov	sp, r7
 800e770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e774:	4770      	bx	lr
 800e776:	bf00      	nop
 800e778:	20002734 	.word	0x20002734
 800e77c:	20002738 	.word	0x20002738
 800e780:	2000234c 	.word	0x2000234c

0800e784 <gps_push_byte>:
	return 0;
}


int gps_push_byte(uint8_t byte)
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b082      	sub	sp, #8
 800e788:	af00      	add	r7, sp, #0
 800e78a:	4603      	mov	r3, r0
 800e78c:	71fb      	strb	r3, [r7, #7]
	cb_push(byte);
 800e78e:	79fb      	ldrb	r3, [r7, #7]
 800e790:	4618      	mov	r0, r3
 800e792:	f7ff ffcb 	bl	800e72c <cb_push>
	return 0;
 800e796:	2300      	movs	r3, #0
}
 800e798:	4618      	mov	r0, r3
 800e79a:	3708      	adds	r7, #8
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd80      	pop	{r7, pc}

0800e7a0 <lis3mdl_write>:
#ifdef HAL_SPI_MODULE_ENABLED
extern SPI_HandleTypeDef hspi1;


static int32_t lis3mdl_write(void * intf_ptr, uint8_t reg_addr, const uint8_t * data, uint16_t data_size)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b086      	sub	sp, #24
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	60f8      	str	r0, [r7, #12]
 800e7a8:	607a      	str	r2, [r7, #4]
 800e7aa:	461a      	mov	r2, r3
 800e7ac:	460b      	mov	r3, r1
 800e7ae:	72fb      	strb	r3, [r7, #11]
 800e7b0:	4613      	mov	r3, r2
 800e7b2:	813b      	strh	r3, [r7, #8]

	struct lis_spi_intf* spi_intf = intf_ptr;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	617b      	str	r3, [r7, #20]

	reg_addr=reg_addr&~(1<<7);
 800e7b8:	7afb      	ldrb	r3, [r7, #11]
 800e7ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e7be:	b2db      	uxtb	r3, r3
 800e7c0:	72fb      	strb	r3, [r7, #11]
	reg_addr=reg_addr|(1<<6);
 800e7c2:	7afb      	ldrb	r3, [r7, #11]
 800e7c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7c8:	b2db      	uxtb	r3, r3
 800e7ca:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin (spi_intf->GPIO_Port,spi_intf->GPIO_Pin, GPIO_PIN_RESET);
 800e7cc:	697b      	ldr	r3, [r7, #20]
 800e7ce:	6818      	ldr	r0, [r3, #0]
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	889b      	ldrh	r3, [r3, #4]
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	4619      	mov	r1, r3
 800e7d8:	f7f8 fb5a 	bl	8006e90 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi_intf->spi, &reg_addr, 1, HAL_MAX_DELAY);
 800e7dc:	697b      	ldr	r3, [r7, #20]
 800e7de:	6898      	ldr	r0, [r3, #8]
 800e7e0:	f107 010b 	add.w	r1, r7, #11
 800e7e4:	f04f 33ff 	mov.w	r3, #4294967295
 800e7e8:	2201      	movs	r2, #1
 800e7ea:	f7fa ffb0 	bl	800974e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(spi_intf->spi, (uint8_t*)data, data_size, HAL_MAX_DELAY);
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	6898      	ldr	r0, [r3, #8]
 800e7f2:	893a      	ldrh	r2, [r7, #8]
 800e7f4:	f04f 33ff 	mov.w	r3, #4294967295
 800e7f8:	6879      	ldr	r1, [r7, #4]
 800e7fa:	f7fa ffa8 	bl	800974e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_SET);
 800e7fe:	697b      	ldr	r3, [r7, #20]
 800e800:	6818      	ldr	r0, [r3, #0]
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	889b      	ldrh	r3, [r3, #4]
 800e806:	2201      	movs	r2, #1
 800e808:	4619      	mov	r1, r3
 800e80a:	f7f8 fb41 	bl	8006e90 <HAL_GPIO_WritePin>
	return 0;
 800e80e:	2300      	movs	r3, #0
}
 800e810:	4618      	mov	r0, r3
 800e812:	3718      	adds	r7, #24
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}

0800e818 <lis3mdl_read>:


static int32_t lis3mdl_read(void * intf_ptr, uint8_t reg_addr, uint8_t * data, uint16_t data_size)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b086      	sub	sp, #24
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	60f8      	str	r0, [r7, #12]
 800e820:	607a      	str	r2, [r7, #4]
 800e822:	461a      	mov	r2, r3
 800e824:	460b      	mov	r3, r1
 800e826:	72fb      	strb	r3, [r7, #11]
 800e828:	4613      	mov	r3, r2
 800e82a:	813b      	strh	r3, [r7, #8]
	struct lis_spi_intf* spi_intf = intf_ptr;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	617b      	str	r3, [r7, #20]

	reg_addr=reg_addr|(1<<7);
 800e830:	7afb      	ldrb	r3, [r7, #11]
 800e832:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e836:	b2db      	uxtb	r3, r3
 800e838:	72fb      	strb	r3, [r7, #11]
	reg_addr=reg_addr|(1<<6);
 800e83a:	7afb      	ldrb	r3, [r7, #11]
 800e83c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e840:	b2db      	uxtb	r3, r3
 800e842:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin (spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_RESET);
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	6818      	ldr	r0, [r3, #0]
 800e848:	697b      	ldr	r3, [r7, #20]
 800e84a:	889b      	ldrh	r3, [r3, #4]
 800e84c:	2200      	movs	r2, #0
 800e84e:	4619      	mov	r1, r3
 800e850:	f7f8 fb1e 	bl	8006e90 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi_intf->spi, &reg_addr, 1, HAL_MAX_DELAY);
 800e854:	697b      	ldr	r3, [r7, #20]
 800e856:	6898      	ldr	r0, [r3, #8]
 800e858:	f107 010b 	add.w	r1, r7, #11
 800e85c:	f04f 33ff 	mov.w	r3, #4294967295
 800e860:	2201      	movs	r2, #1
 800e862:	f7fa ff74 	bl	800974e <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi_intf->spi, data, data_size, HAL_MAX_DELAY);
 800e866:	697b      	ldr	r3, [r7, #20]
 800e868:	6898      	ldr	r0, [r3, #8]
 800e86a:	893a      	ldrh	r2, [r7, #8]
 800e86c:	f04f 33ff 	mov.w	r3, #4294967295
 800e870:	6879      	ldr	r1, [r7, #4]
 800e872:	f7fb f8a8 	bl	80099c6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_SET);
 800e876:	697b      	ldr	r3, [r7, #20]
 800e878:	6818      	ldr	r0, [r3, #0]
 800e87a:	697b      	ldr	r3, [r7, #20]
 800e87c:	889b      	ldrh	r3, [r3, #4]
 800e87e:	2201      	movs	r2, #1
 800e880:	4619      	mov	r1, r3
 800e882:	f7f8 fb05 	bl	8006e90 <HAL_GPIO_WritePin>
	return 0;
 800e886:	2300      	movs	r3, #0
}
 800e888:	4618      	mov	r0, r3
 800e88a:	3718      	adds	r7, #24
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}

0800e890 <lisset>:



void lisset(stmdev_ctx_t *ctx, struct lis_spi_intf *spi_interface)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b084      	sub	sp, #16
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
 800e898:	6039      	str	r1, [r7, #0]
// Настройка lismdl =-=-=-=-=-=-=-=-=-=-=-=-
	// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	ctx->handle = spi_interface;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	683a      	ldr	r2, [r7, #0]
 800e89e:	609a      	str	r2, [r3, #8]
	ctx->read_reg = lis3mdl_read;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	4a1a      	ldr	r2, [pc, #104]	; (800e90c <lisset+0x7c>)
 800e8a4:	605a      	str	r2, [r3, #4]
	ctx->write_reg = lis3mdl_write;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	4a19      	ldr	r2, [pc, #100]	; (800e910 <lisset+0x80>)
 800e8aa:	601a      	str	r2, [r3, #0]

	// Это придется делать прямо сразу еще до всего
	// так как иначе он с ним общаться не сможет (судя по доке по-крайней мере)
	lis3mdl_spi_mode_set(ctx, LIS3MDL_SPI_3_WIRE);
 800e8ac:	2101      	movs	r1, #1
 800e8ae:	6878      	ldr	r0, [r7, #4]
 800e8b0:	f000 fa79 	bl	800eda6 <lis3mdl_spi_mode_set>

	uint8_t whoami_mag = 0x00;
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	73fb      	strb	r3, [r7, #15]
	lis3mdl_device_id_get(ctx, &whoami_mag);
 800e8b8:	f107 030f 	add.w	r3, r7, #15
 800e8bc:	4619      	mov	r1, r3
 800e8be:	6878      	ldr	r0, [r7, #4]
 800e8c0:	f000 fa3a 	bl	800ed38 <lis3mdl_device_id_get>

	// Убедились что датчик тот который нам нужен
	// Сбросим его
	lis3mdl_reset_set(ctx, PROPERTY_ENABLE);
 800e8c4:	2101      	movs	r1, #1
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f000 fa47 	bl	800ed5a <lis3mdl_reset_set>
	HAL_Delay(100);
 800e8cc:	2064      	movs	r0, #100	; 0x64
 800e8ce:	f7f7 fb37 	bl	8005f40 <HAL_Delay>

	// Настраиваем
	// Обновление данных только целыми порциями
	lis3mdl_block_data_update_set(ctx, PROPERTY_ENABLE);
 800e8d2:	2101      	movs	r1, #1
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f000 f99b 	bl	800ec10 <lis3mdl_block_data_update_set>
	// Без экономии энергии
	lis3mdl_fast_low_power_set(ctx, PROPERTY_DISABLE);
 800e8da:	2100      	movs	r1, #0
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f000 f971 	bl	800ebc4 <lis3mdl_fast_low_power_set>
	// Диапазон измерения (внимание LSM303 умеет только 16G)
	lis3mdl_full_scale_set(ctx, LIS3MDL_16_GAUSS);
 800e8e2:	2103      	movs	r1, #3
 800e8e4:	6878      	ldr	r0, [r7, #4]
 800e8e6:	f000 f921 	bl	800eb2c <lis3mdl_full_scale_set>
	// Частота опроса
	// внимание для LSM303 запрещены значения
	// LIS3MDL_LP_1kHz, LIS3MDL_MP_560Hz, LIS3MDL_HP_300Hz, LIS3MDL_UHP_155Hz
	lis3mdl_data_rate_set(ctx, LIS3MDL_UHP_80Hz);
 800e8ea:	213e      	movs	r1, #62	; 0x3e
 800e8ec:	6878      	ldr	r0, [r7, #4]
 800e8ee:	f000 f8b1 	bl	800ea54 <lis3mdl_data_rate_set>
	// Включаем температурный сенсор
	lis3mdl_temperature_meas_set(ctx, PROPERTY_ENABLE);
 800e8f2:	2101      	movs	r1, #1
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	f000 f8f3 	bl	800eae0 <lis3mdl_temperature_meas_set>
	// режим работы
	lis3mdl_operating_mode_set(ctx, LIS3MDL_CONTINUOUS_MODE);
 800e8fa:	2100      	movs	r1, #0
 800e8fc:	6878      	ldr	r0, [r7, #4]
 800e8fe:	f000 f93b 	bl	800eb78 <lis3mdl_operating_mode_set>
}
 800e902:	bf00      	nop
 800e904:	3710      	adds	r7, #16
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}
 800e90a:	bf00      	nop
 800e90c:	0800e819 	.word	0x0800e819
 800e910:	0800e7a1 	.word	0x0800e7a1

0800e914 <lisread>:
	// режим работы
	lis3mdl_operating_mode_set(ctx, LIS3MDL_CONTINUOUS_MODE);
}

void lisread(stmdev_ctx_t *ctx, float *temperature_celsius_mag, float (*mag)[3])
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b088      	sub	sp, #32
 800e918:	af00      	add	r7, sp, #0
 800e91a:	60f8      	str	r0, [r7, #12]
 800e91c:	60b9      	str	r1, [r7, #8]
 800e91e:	607a      	str	r2, [r7, #4]
    int16_t temperataure_raw_mag;
	int16_t mag_raw[3];
	lis3mdl_magnetic_raw_get(ctx, mag_raw);
 800e920:	f107 0314 	add.w	r3, r7, #20
 800e924:	4619      	mov	r1, r3
 800e926:	68f8      	ldr	r0, [r7, #12]
 800e928:	f000 f998 	bl	800ec5c <lis3mdl_magnetic_raw_get>
	lis3mdl_temperature_raw_get(ctx, &temperataure_raw_mag);
 800e92c:	f107 031a 	add.w	r3, r7, #26
 800e930:	4619      	mov	r1, r3
 800e932:	68f8      	ldr	r0, [r7, #12]
 800e934:	f000 f9dd 	bl	800ecf2 <lis3mdl_temperature_raw_get>
	*temperature_celsius_mag = lis3mdl_from_lsb_to_celsius(temperataure_raw_mag);
 800e938:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800e93c:	4618      	mov	r0, r3
 800e93e:	f000 f86f 	bl	800ea20 <lis3mdl_from_lsb_to_celsius>
 800e942:	eef0 7a40 	vmov.f32	s15, s0
 800e946:	68bb      	ldr	r3, [r7, #8]
 800e948:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 3; i++)
 800e94c:	2300      	movs	r3, #0
 800e94e:	61fb      	str	r3, [r7, #28]
 800e950:	e014      	b.n	800e97c <lisread+0x68>
		(*mag)[i] = lis3mdl_from_fs16_to_gauss(mag_raw[i]);
 800e952:	69fb      	ldr	r3, [r7, #28]
 800e954:	005b      	lsls	r3, r3, #1
 800e956:	f107 0220 	add.w	r2, r7, #32
 800e95a:	4413      	add	r3, r2
 800e95c:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 800e960:	4618      	mov	r0, r3
 800e962:	f000 f843 	bl	800e9ec <lis3mdl_from_fs16_to_gauss>
 800e966:	eef0 7a40 	vmov.f32	s15, s0
 800e96a:	687a      	ldr	r2, [r7, #4]
 800e96c:	69fb      	ldr	r3, [r7, #28]
 800e96e:	009b      	lsls	r3, r3, #2
 800e970:	4413      	add	r3, r2
 800e972:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 3; i++)
 800e976:	69fb      	ldr	r3, [r7, #28]
 800e978:	3301      	adds	r3, #1
 800e97a:	61fb      	str	r3, [r7, #28]
 800e97c:	69fb      	ldr	r3, [r7, #28]
 800e97e:	2b02      	cmp	r3, #2
 800e980:	dde7      	ble.n	800e952 <lisread+0x3e>
}
 800e982:	bf00      	nop
 800e984:	bf00      	nop
 800e986:	3720      	adds	r7, #32
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}

0800e98c <lis3mdl_read_reg>:
  *
  */
int32_t lis3mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800e98c:	b590      	push	{r4, r7, lr}
 800e98e:	b087      	sub	sp, #28
 800e990:	af00      	add	r7, sp, #0
 800e992:	60f8      	str	r0, [r7, #12]
 800e994:	607a      	str	r2, [r7, #4]
 800e996:	461a      	mov	r2, r3
 800e998:	460b      	mov	r3, r1
 800e99a:	72fb      	strb	r3, [r7, #11]
 800e99c:	4613      	mov	r3, r2
 800e99e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	685c      	ldr	r4, [r3, #4]
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	6898      	ldr	r0, [r3, #8]
 800e9a8:	893b      	ldrh	r3, [r7, #8]
 800e9aa:	7af9      	ldrb	r1, [r7, #11]
 800e9ac:	687a      	ldr	r2, [r7, #4]
 800e9ae:	47a0      	blx	r4
 800e9b0:	6178      	str	r0, [r7, #20]

  return ret;
 800e9b2:	697b      	ldr	r3, [r7, #20]
}
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	371c      	adds	r7, #28
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd90      	pop	{r4, r7, pc}

0800e9bc <lis3mdl_write_reg>:
  *
  */
int32_t lis3mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800e9bc:	b590      	push	{r4, r7, lr}
 800e9be:	b087      	sub	sp, #28
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	60f8      	str	r0, [r7, #12]
 800e9c4:	607a      	str	r2, [r7, #4]
 800e9c6:	461a      	mov	r2, r3
 800e9c8:	460b      	mov	r3, r1
 800e9ca:	72fb      	strb	r3, [r7, #11]
 800e9cc:	4613      	mov	r3, r2
 800e9ce:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	681c      	ldr	r4, [r3, #0]
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	6898      	ldr	r0, [r3, #8]
 800e9d8:	893b      	ldrh	r3, [r7, #8]
 800e9da:	7af9      	ldrb	r1, [r7, #11]
 800e9dc:	687a      	ldr	r2, [r7, #4]
 800e9de:	47a0      	blx	r4
 800e9e0:	6178      	str	r0, [r7, #20]

  return ret;
 800e9e2:	697b      	ldr	r3, [r7, #20]
}
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	371c      	adds	r7, #28
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd90      	pop	{r4, r7, pc}

0800e9ec <lis3mdl_from_fs16_to_gauss>:
{
  return ((float_t)lsb / 2281.0f);
}

float_t lis3mdl_from_fs16_to_gauss(int16_t lsb)
{
 800e9ec:	b480      	push	{r7}
 800e9ee:	b083      	sub	sp, #12
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 1711.0f);
 800e9f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e9fa:	ee07 3a90 	vmov	s15, r3
 800e9fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ea02:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800ea1c <lis3mdl_from_fs16_to_gauss+0x30>
 800ea06:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ea0a:	eef0 7a66 	vmov.f32	s15, s13
}
 800ea0e:	eeb0 0a67 	vmov.f32	s0, s15
 800ea12:	370c      	adds	r7, #12
 800ea14:	46bd      	mov	sp, r7
 800ea16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1a:	4770      	bx	lr
 800ea1c:	44d5e000 	.word	0x44d5e000

0800ea20 <lis3mdl_from_lsb_to_celsius>:

float_t lis3mdl_from_lsb_to_celsius(int16_t lsb)
{
 800ea20:	b480      	push	{r7}
 800ea22:	b083      	sub	sp, #12
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	4603      	mov	r3, r0
 800ea28:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 8.0f) + (25.0f);
 800ea2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ea2e:	ee07 3a90 	vmov	s15, r3
 800ea32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ea36:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800ea3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ea3e:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800ea42:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800ea46:	eeb0 0a67 	vmov.f32	s0, s15
 800ea4a:	370c      	adds	r7, #12
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea52:	4770      	bx	lr

0800ea54 <lis3mdl_data_rate_set>:
  * @param  val         change the values of om in reg CTRL_REG1
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_data_rate_set(stmdev_ctx_t *ctx, lis3mdl_om_t val)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b086      	sub	sp, #24
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
 800ea5c:	460b      	mov	r3, r1
 800ea5e:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg1_t ctrl_reg1;
  lis3mdl_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800ea60:	f107 0210 	add.w	r2, r7, #16
 800ea64:	2301      	movs	r3, #1
 800ea66:	2120      	movs	r1, #32
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f7ff ff8f 	bl	800e98c <lis3mdl_read_reg>
 800ea6e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800ea70:	697b      	ldr	r3, [r7, #20]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d10f      	bne.n	800ea96 <lis3mdl_data_rate_set+0x42>
  {
    ctrl_reg1.om = (uint8_t)val;
 800ea76:	78fb      	ldrb	r3, [r7, #3]
 800ea78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ea7c:	b2da      	uxtb	r2, r3
 800ea7e:	7c3b      	ldrb	r3, [r7, #16]
 800ea80:	f362 0346 	bfi	r3, r2, #1, #6
 800ea84:	743b      	strb	r3, [r7, #16]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800ea86:	f107 0210 	add.w	r2, r7, #16
 800ea8a:	2301      	movs	r3, #1
 800ea8c:	2120      	movs	r1, #32
 800ea8e:	6878      	ldr	r0, [r7, #4]
 800ea90:	f7ff ff94 	bl	800e9bc <lis3mdl_write_reg>
 800ea94:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800ea96:	697b      	ldr	r3, [r7, #20]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d107      	bne.n	800eaac <lis3mdl_data_rate_set+0x58>
  {
    /* set mode also for z axis, ctrl_reg4 -> omz */
    ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 800ea9c:	f107 020c 	add.w	r2, r7, #12
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	2123      	movs	r1, #35	; 0x23
 800eaa4:	6878      	ldr	r0, [r7, #4]
 800eaa6:	f7ff ff71 	bl	800e98c <lis3mdl_read_reg>
 800eaaa:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800eaac:	697b      	ldr	r3, [r7, #20]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d111      	bne.n	800ead6 <lis3mdl_data_rate_set+0x82>
  {
    ctrl_reg4.omz = (uint8_t)(((uint8_t) val >> 4) & 0x03U);
 800eab2:	78fb      	ldrb	r3, [r7, #3]
 800eab4:	091b      	lsrs	r3, r3, #4
 800eab6:	b2db      	uxtb	r3, r3
 800eab8:	f003 0303 	and.w	r3, r3, #3
 800eabc:	b2da      	uxtb	r2, r3
 800eabe:	7b3b      	ldrb	r3, [r7, #12]
 800eac0:	f362 0383 	bfi	r3, r2, #2, #2
 800eac4:	733b      	strb	r3, [r7, #12]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG4,
 800eac6:	f107 020c 	add.w	r2, r7, #12
 800eaca:	2301      	movs	r3, #1
 800eacc:	2123      	movs	r1, #35	; 0x23
 800eace:	6878      	ldr	r0, [r7, #4]
 800ead0:	f7ff ff74 	bl	800e9bc <lis3mdl_write_reg>
 800ead4:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 800ead6:	697b      	ldr	r3, [r7, #20]
}
 800ead8:	4618      	mov	r0, r3
 800eada:	3718      	adds	r7, #24
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}

0800eae0 <lis3mdl_temperature_meas_set>:
  * @param  val      change the values of temp_en in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_temperature_meas_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b084      	sub	sp, #16
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	460b      	mov	r3, r1
 800eaea:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800eaec:	f107 0208 	add.w	r2, r7, #8
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	2120      	movs	r1, #32
 800eaf4:	6878      	ldr	r0, [r7, #4]
 800eaf6:	f7ff ff49 	bl	800e98c <lis3mdl_read_reg>
 800eafa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d10f      	bne.n	800eb22 <lis3mdl_temperature_meas_set+0x42>
  {
    ctrl_reg1.temp_en = val;
 800eb02:	78fb      	ldrb	r3, [r7, #3]
 800eb04:	f003 0301 	and.w	r3, r3, #1
 800eb08:	b2da      	uxtb	r2, r3
 800eb0a:	7a3b      	ldrb	r3, [r7, #8]
 800eb0c:	f362 13c7 	bfi	r3, r2, #7, #1
 800eb10:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800eb12:	f107 0208 	add.w	r2, r7, #8
 800eb16:	2301      	movs	r3, #1
 800eb18:	2120      	movs	r1, #32
 800eb1a:	6878      	ldr	r0, [r7, #4]
 800eb1c:	f7ff ff4e 	bl	800e9bc <lis3mdl_write_reg>
 800eb20:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800eb22:	68fb      	ldr	r3, [r7, #12]
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	3710      	adds	r7, #16
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}

0800eb2c <lis3mdl_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_full_scale_set(stmdev_ctx_t *ctx, lis3mdl_fs_t val)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b084      	sub	sp, #16
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
 800eb34:	460b      	mov	r3, r1
 800eb36:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800eb38:	f107 0208 	add.w	r2, r7, #8
 800eb3c:	2301      	movs	r3, #1
 800eb3e:	2121      	movs	r1, #33	; 0x21
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f7ff ff23 	bl	800e98c <lis3mdl_read_reg>
 800eb46:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d10f      	bne.n	800eb6e <lis3mdl_full_scale_set+0x42>
  {
    ctrl_reg2.fs = (uint8_t)val;
 800eb4e:	78fb      	ldrb	r3, [r7, #3]
 800eb50:	f003 0303 	and.w	r3, r3, #3
 800eb54:	b2da      	uxtb	r2, r3
 800eb56:	7a3b      	ldrb	r3, [r7, #8]
 800eb58:	f362 1346 	bfi	r3, r2, #5, #2
 800eb5c:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800eb5e:	f107 0208 	add.w	r2, r7, #8
 800eb62:	2301      	movs	r3, #1
 800eb64:	2121      	movs	r1, #33	; 0x21
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f7ff ff28 	bl	800e9bc <lis3mdl_write_reg>
 800eb6c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800eb6e:	68fb      	ldr	r3, [r7, #12]
}
 800eb70:	4618      	mov	r0, r3
 800eb72:	3710      	adds	r7, #16
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}

0800eb78 <lis3mdl_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis3mdl_md_t val)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b084      	sub	sp, #16
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
 800eb80:	460b      	mov	r3, r1
 800eb82:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg3_t ctrl_reg3;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 800eb84:	f107 0208 	add.w	r2, r7, #8
 800eb88:	2301      	movs	r3, #1
 800eb8a:	2122      	movs	r1, #34	; 0x22
 800eb8c:	6878      	ldr	r0, [r7, #4]
 800eb8e:	f7ff fefd 	bl	800e98c <lis3mdl_read_reg>
 800eb92:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d10f      	bne.n	800ebba <lis3mdl_operating_mode_set+0x42>
  {
    ctrl_reg3.md = (uint8_t)val;
 800eb9a:	78fb      	ldrb	r3, [r7, #3]
 800eb9c:	f003 0303 	and.w	r3, r3, #3
 800eba0:	b2da      	uxtb	r2, r3
 800eba2:	7a3b      	ldrb	r3, [r7, #8]
 800eba4:	f362 0301 	bfi	r3, r2, #0, #2
 800eba8:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 800ebaa:	f107 0208 	add.w	r2, r7, #8
 800ebae:	2301      	movs	r3, #1
 800ebb0:	2122      	movs	r1, #34	; 0x22
 800ebb2:	6878      	ldr	r0, [r7, #4]
 800ebb4:	f7ff ff02 	bl	800e9bc <lis3mdl_write_reg>
 800ebb8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ebba:	68fb      	ldr	r3, [r7, #12]
}
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	3710      	adds	r7, #16
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}

0800ebc4 <lis3mdl_fast_low_power_set>:
  * @param  val      change the values of lp in reg CTRL_REG3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_fast_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b084      	sub	sp, #16
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
 800ebcc:	460b      	mov	r3, r1
 800ebce:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg3_t ctrl_reg3;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 800ebd0:	f107 0208 	add.w	r2, r7, #8
 800ebd4:	2301      	movs	r3, #1
 800ebd6:	2122      	movs	r1, #34	; 0x22
 800ebd8:	6878      	ldr	r0, [r7, #4]
 800ebda:	f7ff fed7 	bl	800e98c <lis3mdl_read_reg>
 800ebde:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d10f      	bne.n	800ec06 <lis3mdl_fast_low_power_set+0x42>
  {
    ctrl_reg3.lp = val;
 800ebe6:	78fb      	ldrb	r3, [r7, #3]
 800ebe8:	f003 0301 	and.w	r3, r3, #1
 800ebec:	b2da      	uxtb	r2, r3
 800ebee:	7a3b      	ldrb	r3, [r7, #8]
 800ebf0:	f362 1345 	bfi	r3, r2, #5, #1
 800ebf4:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 800ebf6:	f107 0208 	add.w	r2, r7, #8
 800ebfa:	2301      	movs	r3, #1
 800ebfc:	2122      	movs	r1, #34	; 0x22
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	f7ff fedc 	bl	800e9bc <lis3mdl_write_reg>
 800ec04:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ec06:	68fb      	ldr	r3, [r7, #12]
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	3710      	adds	r7, #16
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}

0800ec10 <lis3mdl_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG5
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b084      	sub	sp, #16
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
 800ec18:	460b      	mov	r3, r1
 800ec1a:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg5_t ctrl_reg5;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 800ec1c:	f107 0208 	add.w	r2, r7, #8
 800ec20:	2301      	movs	r3, #1
 800ec22:	2124      	movs	r1, #36	; 0x24
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	f7ff feb1 	bl	800e98c <lis3mdl_read_reg>
 800ec2a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d10f      	bne.n	800ec52 <lis3mdl_block_data_update_set+0x42>
  {
    ctrl_reg5.bdu = val;
 800ec32:	78fb      	ldrb	r3, [r7, #3]
 800ec34:	f003 0301 	and.w	r3, r3, #1
 800ec38:	b2da      	uxtb	r2, r3
 800ec3a:	7a3b      	ldrb	r3, [r7, #8]
 800ec3c:	f362 1386 	bfi	r3, r2, #6, #1
 800ec40:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 800ec42:	f107 0208 	add.w	r2, r7, #8
 800ec46:	2301      	movs	r3, #1
 800ec48:	2124      	movs	r1, #36	; 0x24
 800ec4a:	6878      	ldr	r0, [r7, #4]
 800ec4c:	f7ff feb6 	bl	800e9bc <lis3mdl_write_reg>
 800ec50:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ec52:	68fb      	ldr	r3, [r7, #12]
}
 800ec54:	4618      	mov	r0, r3
 800ec56:	3710      	adds	r7, #16
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	bd80      	pop	{r7, pc}

0800ec5c <lis3mdl_magnetic_raw_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b086      	sub	sp, #24
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
 800ec64:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_OUT_X_L, (uint8_t *) buff, 6);
 800ec66:	f107 020c 	add.w	r2, r7, #12
 800ec6a:	2306      	movs	r3, #6
 800ec6c:	2128      	movs	r1, #40	; 0x28
 800ec6e:	6878      	ldr	r0, [r7, #4]
 800ec70:	f7ff fe8c 	bl	800e98c <lis3mdl_read_reg>
 800ec74:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800ec76:	7b7b      	ldrb	r3, [r7, #13]
 800ec78:	b21a      	sxth	r2, r3
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ec84:	b29b      	uxth	r3, r3
 800ec86:	021b      	lsls	r3, r3, #8
 800ec88:	b29a      	uxth	r2, r3
 800ec8a:	7b3b      	ldrb	r3, [r7, #12]
 800ec8c:	b29b      	uxth	r3, r3
 800ec8e:	4413      	add	r3, r2
 800ec90:	b29b      	uxth	r3, r3
 800ec92:	b21a      	sxth	r2, r3
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800ec98:	7bfa      	ldrb	r2, [r7, #15]
 800ec9a:	683b      	ldr	r3, [r7, #0]
 800ec9c:	3302      	adds	r3, #2
 800ec9e:	b212      	sxth	r2, r2
 800eca0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	3302      	adds	r3, #2
 800eca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ecaa:	b29b      	uxth	r3, r3
 800ecac:	021b      	lsls	r3, r3, #8
 800ecae:	b29a      	uxth	r2, r3
 800ecb0:	7bbb      	ldrb	r3, [r7, #14]
 800ecb2:	b29b      	uxth	r3, r3
 800ecb4:	4413      	add	r3, r2
 800ecb6:	b29a      	uxth	r2, r3
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	3302      	adds	r3, #2
 800ecbc:	b212      	sxth	r2, r2
 800ecbe:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800ecc0:	7c7a      	ldrb	r2, [r7, #17]
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	3304      	adds	r3, #4
 800ecc6:	b212      	sxth	r2, r2
 800ecc8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	3304      	adds	r3, #4
 800ecce:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ecd2:	b29b      	uxth	r3, r3
 800ecd4:	021b      	lsls	r3, r3, #8
 800ecd6:	b29a      	uxth	r2, r3
 800ecd8:	7c3b      	ldrb	r3, [r7, #16]
 800ecda:	b29b      	uxth	r3, r3
 800ecdc:	4413      	add	r3, r2
 800ecde:	b29a      	uxth	r2, r3
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	3304      	adds	r3, #4
 800ece4:	b212      	sxth	r2, r2
 800ece6:	801a      	strh	r2, [r3, #0]

  return ret;
 800ece8:	697b      	ldr	r3, [r7, #20]
}
 800ecea:	4618      	mov	r0, r3
 800ecec:	3718      	adds	r7, #24
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd80      	pop	{r7, pc}

0800ecf2 <lis3mdl_temperature_raw_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800ecf2:	b580      	push	{r7, lr}
 800ecf4:	b084      	sub	sp, #16
 800ecf6:	af00      	add	r7, sp, #0
 800ecf8:	6078      	str	r0, [r7, #4]
 800ecfa:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_TEMP_OUT_L, (uint8_t *) buff, 2);
 800ecfc:	f107 0208 	add.w	r2, r7, #8
 800ed00:	2302      	movs	r3, #2
 800ed02:	212e      	movs	r1, #46	; 0x2e
 800ed04:	6878      	ldr	r0, [r7, #4]
 800ed06:	f7ff fe41 	bl	800e98c <lis3mdl_read_reg>
 800ed0a:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800ed0c:	7a7b      	ldrb	r3, [r7, #9]
 800ed0e:	b21a      	sxth	r2, r3
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800ed14:	683b      	ldr	r3, [r7, #0]
 800ed16:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ed1a:	b29b      	uxth	r3, r3
 800ed1c:	021b      	lsls	r3, r3, #8
 800ed1e:	b29a      	uxth	r2, r3
 800ed20:	7a3b      	ldrb	r3, [r7, #8]
 800ed22:	b29b      	uxth	r3, r3
 800ed24:	4413      	add	r3, r2
 800ed26:	b29b      	uxth	r3, r3
 800ed28:	b21a      	sxth	r2, r3
 800ed2a:	683b      	ldr	r3, [r7, #0]
 800ed2c:	801a      	strh	r2, [r3, #0]

  return ret;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	3710      	adds	r7, #16
 800ed34:	46bd      	mov	sp, r7
 800ed36:	bd80      	pop	{r7, pc}

0800ed38 <lis3mdl_device_id_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b084      	sub	sp, #16
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
 800ed40:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_WHO_AM_I, (uint8_t *) buff, 1);
 800ed42:	2301      	movs	r3, #1
 800ed44:	683a      	ldr	r2, [r7, #0]
 800ed46:	210f      	movs	r1, #15
 800ed48:	6878      	ldr	r0, [r7, #4]
 800ed4a:	f7ff fe1f 	bl	800e98c <lis3mdl_read_reg>
 800ed4e:	60f8      	str	r0, [r7, #12]

  return ret;
 800ed50:	68fb      	ldr	r3, [r7, #12]
}
 800ed52:	4618      	mov	r0, r3
 800ed54:	3710      	adds	r7, #16
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}

0800ed5a <lis3mdl_reset_set>:
  * @param  val      change the values of soft_rst in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800ed5a:	b580      	push	{r7, lr}
 800ed5c:	b084      	sub	sp, #16
 800ed5e:	af00      	add	r7, sp, #0
 800ed60:	6078      	str	r0, [r7, #4]
 800ed62:	460b      	mov	r3, r1
 800ed64:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800ed66:	f107 0208 	add.w	r2, r7, #8
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	2121      	movs	r1, #33	; 0x21
 800ed6e:	6878      	ldr	r0, [r7, #4]
 800ed70:	f7ff fe0c 	bl	800e98c <lis3mdl_read_reg>
 800ed74:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d10f      	bne.n	800ed9c <lis3mdl_reset_set+0x42>
  {
    ctrl_reg2.soft_rst = val;
 800ed7c:	78fb      	ldrb	r3, [r7, #3]
 800ed7e:	f003 0301 	and.w	r3, r3, #1
 800ed82:	b2da      	uxtb	r2, r3
 800ed84:	7a3b      	ldrb	r3, [r7, #8]
 800ed86:	f362 0382 	bfi	r3, r2, #2, #1
 800ed8a:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800ed8c:	f107 0208 	add.w	r2, r7, #8
 800ed90:	2301      	movs	r3, #1
 800ed92:	2121      	movs	r1, #33	; 0x21
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	f7ff fe11 	bl	800e9bc <lis3mdl_write_reg>
 800ed9a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ed9c:	68fb      	ldr	r3, [r7, #12]
}
 800ed9e:	4618      	mov	r0, r3
 800eda0:	3710      	adds	r7, #16
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}

0800eda6 <lis3mdl_spi_mode_set>:
  * @param  val      change the values of sim in reg CTRL_REG3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_spi_mode_set(stmdev_ctx_t *ctx, lis3mdl_sim_t val)
{
 800eda6:	b580      	push	{r7, lr}
 800eda8:	b084      	sub	sp, #16
 800edaa:	af00      	add	r7, sp, #0
 800edac:	6078      	str	r0, [r7, #4]
 800edae:	460b      	mov	r3, r1
 800edb0:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg3_t ctrl_reg3;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 800edb2:	f107 0208 	add.w	r2, r7, #8
 800edb6:	2301      	movs	r3, #1
 800edb8:	2122      	movs	r1, #34	; 0x22
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	f7ff fde6 	bl	800e98c <lis3mdl_read_reg>
 800edc0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d10f      	bne.n	800ede8 <lis3mdl_spi_mode_set+0x42>
  {
    ctrl_reg3.sim = (uint8_t)val;
 800edc8:	78fb      	ldrb	r3, [r7, #3]
 800edca:	f003 0301 	and.w	r3, r3, #1
 800edce:	b2da      	uxtb	r2, r3
 800edd0:	7a3b      	ldrb	r3, [r7, #8]
 800edd2:	f362 0382 	bfi	r3, r2, #2, #1
 800edd6:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 800edd8:	f107 0208 	add.w	r2, r7, #8
 800eddc:	2301      	movs	r3, #1
 800edde:	2122      	movs	r1, #34	; 0x22
 800ede0:	6878      	ldr	r0, [r7, #4]
 800ede2:	f7ff fdeb 	bl	800e9bc <lis3mdl_write_reg>
 800ede6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ede8:	68fb      	ldr	r3, [r7, #12]
}
 800edea:	4618      	mov	r0, r3
 800edec:	3710      	adds	r7, #16
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}

0800edf2 <lsmd6s3_write>:

#ifdef HAL_SPI_MODULE_ENABLED
extern SPI_HandleTypeDef hspi1;

int32_t lsmd6s3_write(void * intf_ptr, uint8_t reg_addr, const uint8_t * data, uint16_t data_size)
{
 800edf2:	b580      	push	{r7, lr}
 800edf4:	b086      	sub	sp, #24
 800edf6:	af00      	add	r7, sp, #0
 800edf8:	60f8      	str	r0, [r7, #12]
 800edfa:	607a      	str	r2, [r7, #4]
 800edfc:	461a      	mov	r2, r3
 800edfe:	460b      	mov	r3, r1
 800ee00:	72fb      	strb	r3, [r7, #11]
 800ee02:	4613      	mov	r3, r2
 800ee04:	813b      	strh	r3, [r7, #8]
	struct lsm_spi_intf* spi_intf = intf_ptr;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	617b      	str	r3, [r7, #20]


	reg_addr=reg_addr&~(1<<7);
 800ee0a:	7afb      	ldrb	r3, [r7, #11]
 800ee0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee10:	b2db      	uxtb	r3, r3
 800ee12:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin (spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_RESET);
 800ee14:	697b      	ldr	r3, [r7, #20]
 800ee16:	6818      	ldr	r0, [r3, #0]
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	889b      	ldrh	r3, [r3, #4]
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	4619      	mov	r1, r3
 800ee20:	f7f8 f836 	bl	8006e90 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi_intf->spi, &reg_addr, 1, HAL_MAX_DELAY);
 800ee24:	697b      	ldr	r3, [r7, #20]
 800ee26:	6898      	ldr	r0, [r3, #8]
 800ee28:	f107 010b 	add.w	r1, r7, #11
 800ee2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ee30:	2201      	movs	r2, #1
 800ee32:	f7fa fc8c 	bl	800974e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(spi_intf->spi, (uint8_t*)data, data_size, HAL_MAX_DELAY);
 800ee36:	697b      	ldr	r3, [r7, #20]
 800ee38:	6898      	ldr	r0, [r3, #8]
 800ee3a:	893a      	ldrh	r2, [r7, #8]
 800ee3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ee40:	6879      	ldr	r1, [r7, #4]
 800ee42:	f7fa fc84 	bl	800974e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_SET);
 800ee46:	697b      	ldr	r3, [r7, #20]
 800ee48:	6818      	ldr	r0, [r3, #0]
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	889b      	ldrh	r3, [r3, #4]
 800ee4e:	2201      	movs	r2, #1
 800ee50:	4619      	mov	r1, r3
 800ee52:	f7f8 f81d 	bl	8006e90 <HAL_GPIO_WritePin>
	return 0;
 800ee56:	2300      	movs	r3, #0
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3718      	adds	r7, #24
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}

0800ee60 <lsm6ds3_read>:


int32_t lsm6ds3_read(void * intf_ptr, uint8_t reg_addr, uint8_t * data, uint16_t data_size)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b086      	sub	sp, #24
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	60f8      	str	r0, [r7, #12]
 800ee68:	607a      	str	r2, [r7, #4]
 800ee6a:	461a      	mov	r2, r3
 800ee6c:	460b      	mov	r3, r1
 800ee6e:	72fb      	strb	r3, [r7, #11]
 800ee70:	4613      	mov	r3, r2
 800ee72:	813b      	strh	r3, [r7, #8]
	struct lsm_spi_intf* spi_intf = intf_ptr;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	617b      	str	r3, [r7, #20]


	reg_addr=reg_addr|(1<<7);
 800ee78:	7afb      	ldrb	r3, [r7, #11]
 800ee7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ee7e:	b2db      	uxtb	r3, r3
 800ee80:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin (spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_RESET);
 800ee82:	697b      	ldr	r3, [r7, #20]
 800ee84:	6818      	ldr	r0, [r3, #0]
 800ee86:	697b      	ldr	r3, [r7, #20]
 800ee88:	889b      	ldrh	r3, [r3, #4]
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	4619      	mov	r1, r3
 800ee8e:	f7f7 ffff 	bl	8006e90 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi_intf->spi, &reg_addr, 1, HAL_MAX_DELAY);
 800ee92:	697b      	ldr	r3, [r7, #20]
 800ee94:	6898      	ldr	r0, [r3, #8]
 800ee96:	f107 010b 	add.w	r1, r7, #11
 800ee9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ee9e:	2201      	movs	r2, #1
 800eea0:	f7fa fc55 	bl	800974e <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi_intf->spi, data, data_size, HAL_MAX_DELAY);
 800eea4:	697b      	ldr	r3, [r7, #20]
 800eea6:	6898      	ldr	r0, [r3, #8]
 800eea8:	893a      	ldrh	r2, [r7, #8]
 800eeaa:	f04f 33ff 	mov.w	r3, #4294967295
 800eeae:	6879      	ldr	r1, [r7, #4]
 800eeb0:	f7fa fd89 	bl	80099c6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_SET);
 800eeb4:	697b      	ldr	r3, [r7, #20]
 800eeb6:	6818      	ldr	r0, [r3, #0]
 800eeb8:	697b      	ldr	r3, [r7, #20]
 800eeba:	889b      	ldrh	r3, [r3, #4]
 800eebc:	2201      	movs	r2, #1
 800eebe:	4619      	mov	r1, r3
 800eec0:	f7f7 ffe6 	bl	8006e90 <HAL_GPIO_WritePin>
	return 0;
 800eec4:	2300      	movs	r3, #0
}
 800eec6:	4618      	mov	r0, r3
 800eec8:	3718      	adds	r7, #24
 800eeca:	46bd      	mov	sp, r7
 800eecc:	bd80      	pop	{r7, pc}
	...

0800eed0 <lsmset>:
	return 0;
}


void lsmset(stmdev_ctx_t *ctx, struct lsm_spi_intf *spi_interface)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b084      	sub	sp, #16
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
 800eed8:	6039      	str	r1, [r7, #0]
	// Настройка lsm6ds3 =-=-=-=-=-=-=-=-=-=-=-=-
		// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

		ctx->handle = spi_interface;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	683a      	ldr	r2, [r7, #0]
 800eede:	609a      	str	r2, [r3, #8]
		ctx->read_reg = lsm6ds3_read;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	4a14      	ldr	r2, [pc, #80]	; (800ef34 <lsmset+0x64>)
 800eee4:	605a      	str	r2, [r3, #4]
		ctx->write_reg = lsmd6s3_write;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	4a13      	ldr	r2, [pc, #76]	; (800ef38 <lsmset+0x68>)
 800eeea:	601a      	str	r2, [r3, #0]

		uint8_t whoami = 0x00;
 800eeec:	2300      	movs	r3, #0
 800eeee:	73fb      	strb	r3, [r7, #15]
		lsm6ds3_device_id_get(ctx, &whoami);
 800eef0:	f107 030f 	add.w	r3, r7, #15
 800eef4:	4619      	mov	r1, r3
 800eef6:	6878      	ldr	r0, [r7, #4]
 800eef8:	f000 fa5f 	bl	800f3ba <lsm6ds3_device_id_get>

		lsm6ds3_reset_set(ctx, PROPERTY_ENABLE);
 800eefc:	2101      	movs	r1, #1
 800eefe:	6878      	ldr	r0, [r7, #4]
 800ef00:	f000 fa6c 	bl	800f3dc <lsm6ds3_reset_set>
		HAL_Delay(100);
 800ef04:	2064      	movs	r0, #100	; 0x64
 800ef06:	f7f7 f81b 	bl	8005f40 <HAL_Delay>

		lsm6ds3_xl_full_scale_set(ctx, LSM6DS3_16g);
 800ef0a:	2101      	movs	r1, #1
 800ef0c:	6878      	ldr	r0, [r7, #4]
 800ef0e:	f000 f903 	bl	800f118 <lsm6ds3_xl_full_scale_set>
		lsm6ds3_xl_data_rate_set(ctx, LSM6DS3_XL_ODR_104Hz);
 800ef12:	2104      	movs	r1, #4
 800ef14:	6878      	ldr	r0, [r7, #4]
 800ef16:	f000 f925 	bl	800f164 <lsm6ds3_xl_data_rate_set>

		lsm6ds3_gy_full_scale_set(ctx, LSM6DS3_2000dps);
 800ef1a:	2106      	movs	r1, #6
 800ef1c:	6878      	ldr	r0, [r7, #4]
 800ef1e:	f000 f947 	bl	800f1b0 <lsm6ds3_gy_full_scale_set>
		lsm6ds3_gy_data_rate_set(ctx, LSM6DS3_GY_ODR_104Hz);
 800ef22:	2104      	movs	r1, #4
 800ef24:	6878      	ldr	r0, [r7, #4]
 800ef26:	f000 f969 	bl	800f1fc <lsm6ds3_gy_data_rate_set>
}
 800ef2a:	bf00      	nop
 800ef2c:	3710      	adds	r7, #16
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}
 800ef32:	bf00      	nop
 800ef34:	0800ee61 	.word	0x0800ee61
 800ef38:	0800edf3 	.word	0x0800edf3

0800ef3c <lsmread>:

		lsm6ds3_gy_full_scale_set(ctx, LSM6DS3_2000dps);
		lsm6ds3_gy_data_rate_set(ctx, LSM6DS3_GY_ODR_104Hz);
}*/
void lsmread(stmdev_ctx_t *ctx, float *temperature_celsius_gyro, float (*acc_g)[3], float (*gyro_dps)[3])
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b08a      	sub	sp, #40	; 0x28
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	60f8      	str	r0, [r7, #12]
 800ef44:	60b9      	str	r1, [r7, #8]
 800ef46:	607a      	str	r2, [r7, #4]
 800ef48:	603b      	str	r3, [r7, #0]
	// Чтение данных из lsm6ds3
		// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
		int16_t temperature_raw_gyro = {0};
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	847b      	strh	r3, [r7, #34]	; 0x22
		int16_t acc_raw[3] = {0};
 800ef4e:	f107 031c 	add.w	r3, r7, #28
 800ef52:	2200      	movs	r2, #0
 800ef54:	601a      	str	r2, [r3, #0]
 800ef56:	809a      	strh	r2, [r3, #4]
		int16_t gyro_raw[3] = {0};
 800ef58:	f107 0314 	add.w	r3, r7, #20
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	601a      	str	r2, [r3, #0]
 800ef60:	809a      	strh	r2, [r3, #4]
		lsm6ds3_temperature_raw_get(ctx, &temperature_raw_gyro);
 800ef62:	f107 0322 	add.w	r3, r7, #34	; 0x22
 800ef66:	4619      	mov	r1, r3
 800ef68:	68f8      	ldr	r0, [r7, #12]
 800ef6a:	f000 f96d 	bl	800f248 <lsm6ds3_temperature_raw_get>
		lsm6ds3_acceleration_raw_get(ctx, acc_raw);
 800ef6e:	f107 031c 	add.w	r3, r7, #28
 800ef72:	4619      	mov	r1, r3
 800ef74:	68f8      	ldr	r0, [r7, #12]
 800ef76:	f000 f9d5 	bl	800f324 <lsm6ds3_acceleration_raw_get>
		lsm6ds3_angular_rate_raw_get(ctx, gyro_raw);
 800ef7a:	f107 0314 	add.w	r3, r7, #20
 800ef7e:	4619      	mov	r1, r3
 800ef80:	68f8      	ldr	r0, [r7, #12]
 800ef82:	f000 f984 	bl	800f28e <lsm6ds3_angular_rate_raw_get>

		// Пересчет из попугаев в человеческие величины
		*temperature_celsius_gyro = lsm6ds3_from_lsb_to_celsius(temperature_raw_gyro);
 800ef86:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f000 f8aa 	bl	800f0e4 <lsm6ds3_from_lsb_to_celsius>
 800ef90:	eef0 7a40 	vmov.f32	s15, s0
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < 3; i++)
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	627b      	str	r3, [r7, #36]	; 0x24
 800ef9e:	e02e      	b.n	800effe <lsmread+0xc2>
		{
			(*acc_g)[i] = lsm6ds3_from_fs16g_to_mg(acc_raw[i]) / 1000;
 800efa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa2:	005b      	lsls	r3, r3, #1
 800efa4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800efa8:	4413      	add	r3, r2
 800efaa:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 800efae:	4618      	mov	r0, r3
 800efb0:	f000 f860 	bl	800f074 <lsm6ds3_from_fs16g_to_mg>
 800efb4:	eeb0 7a40 	vmov.f32	s14, s0
 800efb8:	eddf 6a15 	vldr	s13, [pc, #84]	; 800f010 <lsmread+0xd4>
 800efbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800efc0:	687a      	ldr	r2, [r7, #4]
 800efc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc4:	009b      	lsls	r3, r3, #2
 800efc6:	4413      	add	r3, r2
 800efc8:	edc3 7a00 	vstr	s15, [r3]
			(*gyro_dps)[i] = lsm6ds3_from_fs2000dps_to_mdps(gyro_raw[i]) / 1000;
 800efcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efce:	005b      	lsls	r3, r3, #1
 800efd0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800efd4:	4413      	add	r3, r2
 800efd6:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 800efda:	4618      	mov	r0, r3
 800efdc:	f000 f86a 	bl	800f0b4 <lsm6ds3_from_fs2000dps_to_mdps>
 800efe0:	eeb0 7a40 	vmov.f32	s14, s0
 800efe4:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800f010 <lsmread+0xd4>
 800efe8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800efec:	683a      	ldr	r2, [r7, #0]
 800efee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff0:	009b      	lsls	r3, r3, #2
 800eff2:	4413      	add	r3, r2
 800eff4:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < 3; i++)
 800eff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800effa:	3301      	adds	r3, #1
 800effc:	627b      	str	r3, [r7, #36]	; 0x24
 800effe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f000:	2b02      	cmp	r3, #2
 800f002:	ddcd      	ble.n	800efa0 <lsmread+0x64>
		}
}
 800f004:	bf00      	nop
 800f006:	bf00      	nop
 800f008:	3728      	adds	r7, #40	; 0x28
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bd80      	pop	{r7, pc}
 800f00e:	bf00      	nop
 800f010:	447a0000 	.word	0x447a0000

0800f014 <lsm6ds3_read_reg>:
  *
  */
int32_t lsm6ds3_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800f014:	b590      	push	{r4, r7, lr}
 800f016:	b087      	sub	sp, #28
 800f018:	af00      	add	r7, sp, #0
 800f01a:	60f8      	str	r0, [r7, #12]
 800f01c:	607a      	str	r2, [r7, #4]
 800f01e:	461a      	mov	r2, r3
 800f020:	460b      	mov	r3, r1
 800f022:	72fb      	strb	r3, [r7, #11]
 800f024:	4613      	mov	r3, r2
 800f026:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	685c      	ldr	r4, [r3, #4]
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	6898      	ldr	r0, [r3, #8]
 800f030:	893b      	ldrh	r3, [r7, #8]
 800f032:	7af9      	ldrb	r1, [r7, #11]
 800f034:	687a      	ldr	r2, [r7, #4]
 800f036:	47a0      	blx	r4
 800f038:	6178      	str	r0, [r7, #20]

  return ret;
 800f03a:	697b      	ldr	r3, [r7, #20]
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	371c      	adds	r7, #28
 800f040:	46bd      	mov	sp, r7
 800f042:	bd90      	pop	{r4, r7, pc}

0800f044 <lsm6ds3_write_reg>:
  *
  */
int32_t lsm6ds3_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800f044:	b590      	push	{r4, r7, lr}
 800f046:	b087      	sub	sp, #28
 800f048:	af00      	add	r7, sp, #0
 800f04a:	60f8      	str	r0, [r7, #12]
 800f04c:	607a      	str	r2, [r7, #4]
 800f04e:	461a      	mov	r2, r3
 800f050:	460b      	mov	r3, r1
 800f052:	72fb      	strb	r3, [r7, #11]
 800f054:	4613      	mov	r3, r2
 800f056:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	681c      	ldr	r4, [r3, #0]
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	6898      	ldr	r0, [r3, #8]
 800f060:	893b      	ldrh	r3, [r7, #8]
 800f062:	7af9      	ldrb	r1, [r7, #11]
 800f064:	687a      	ldr	r2, [r7, #4]
 800f066:	47a0      	blx	r4
 800f068:	6178      	str	r0, [r7, #20]

  return ret;
 800f06a:	697b      	ldr	r3, [r7, #20]
}
 800f06c:	4618      	mov	r0, r3
 800f06e:	371c      	adds	r7, #28
 800f070:	46bd      	mov	sp, r7
 800f072:	bd90      	pop	{r4, r7, pc}

0800f074 <lsm6ds3_from_fs16g_to_mg>:
{
  return ((float_t)lsb * 244.0f / 1000.0f);
}

float_t lsm6ds3_from_fs16g_to_mg(int16_t lsb)
{
 800f074:	b480      	push	{r7}
 800f076:	b083      	sub	sp, #12
 800f078:	af00      	add	r7, sp, #0
 800f07a:	4603      	mov	r3, r0
 800f07c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 488.0f / 1000.0f);
 800f07e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f082:	ee07 3a90 	vmov	s15, r3
 800f086:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f08a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800f0ac <lsm6ds3_from_fs16g_to_mg+0x38>
 800f08e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f092:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800f0b0 <lsm6ds3_from_fs16g_to_mg+0x3c>
 800f096:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800f09a:	eef0 7a66 	vmov.f32	s15, s13
}
 800f09e:	eeb0 0a67 	vmov.f32	s0, s15
 800f0a2:	370c      	adds	r7, #12
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0aa:	4770      	bx	lr
 800f0ac:	43f40000 	.word	0x43f40000
 800f0b0:	447a0000 	.word	0x447a0000

0800f0b4 <lsm6ds3_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6ds3_from_fs2000dps_to_mdps(int16_t lsb)
{
 800f0b4:	b480      	push	{r7}
 800f0b6:	b083      	sub	sp, #12
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 800f0be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f0c2:	ee07 3a90 	vmov	s15, r3
 800f0c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f0ca:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800f0e0 <lsm6ds3_from_fs2000dps_to_mdps+0x2c>
 800f0ce:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800f0d2:	eeb0 0a67 	vmov.f32	s0, s15
 800f0d6:	370c      	adds	r7, #12
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0de:	4770      	bx	lr
 800f0e0:	428c0000 	.word	0x428c0000

0800f0e4 <lsm6ds3_from_lsb_to_celsius>:

float_t lsm6ds3_from_lsb_to_celsius(int16_t lsb)
{
 800f0e4:	b480      	push	{r7}
 800f0e6:	b083      	sub	sp, #12
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 16.0f + 25.0f);
 800f0ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f0f2:	ee07 3a90 	vmov	s15, r3
 800f0f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f0fa:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800f0fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f102:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800f106:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800f10a:	eeb0 0a67 	vmov.f32	s0, s15
 800f10e:	370c      	adds	r7, #12
 800f110:	46bd      	mov	sp, r7
 800f112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f116:	4770      	bx	lr

0800f118 <lsm6ds3_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6ds3_xl_fs_t val)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b084      	sub	sp, #16
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
 800f120:	460b      	mov	r3, r1
 800f122:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800f124:	f107 0208 	add.w	r2, r7, #8
 800f128:	2301      	movs	r3, #1
 800f12a:	2110      	movs	r1, #16
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f7ff ff71 	bl	800f014 <lsm6ds3_read_reg>
 800f132:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d10f      	bne.n	800f15a <lsm6ds3_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 800f13a:	78fb      	ldrb	r3, [r7, #3]
 800f13c:	f003 0303 	and.w	r3, r3, #3
 800f140:	b2da      	uxtb	r2, r3
 800f142:	7a3b      	ldrb	r3, [r7, #8]
 800f144:	f362 0383 	bfi	r3, r2, #2, #2
 800f148:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800f14a:	f107 0208 	add.w	r2, r7, #8
 800f14e:	2301      	movs	r3, #1
 800f150:	2110      	movs	r1, #16
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	f7ff ff76 	bl	800f044 <lsm6ds3_write_reg>
 800f158:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800f15a:	68fb      	ldr	r3, [r7, #12]
}
 800f15c:	4618      	mov	r0, r3
 800f15e:	3710      	adds	r7, #16
 800f160:	46bd      	mov	sp, r7
 800f162:	bd80      	pop	{r7, pc}

0800f164 <lsm6ds3_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6ds3_odr_xl_t val)
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b084      	sub	sp, #16
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
 800f16c:	460b      	mov	r3, r1
 800f16e:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800f170:	f107 0208 	add.w	r2, r7, #8
 800f174:	2301      	movs	r3, #1
 800f176:	2110      	movs	r1, #16
 800f178:	6878      	ldr	r0, [r7, #4]
 800f17a:	f7ff ff4b 	bl	800f014 <lsm6ds3_read_reg>
 800f17e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d10f      	bne.n	800f1a6 <lsm6ds3_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t)val;
 800f186:	78fb      	ldrb	r3, [r7, #3]
 800f188:	f003 030f 	and.w	r3, r3, #15
 800f18c:	b2da      	uxtb	r2, r3
 800f18e:	7a3b      	ldrb	r3, [r7, #8]
 800f190:	f362 1307 	bfi	r3, r2, #4, #4
 800f194:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800f196:	f107 0208 	add.w	r2, r7, #8
 800f19a:	2301      	movs	r3, #1
 800f19c:	2110      	movs	r1, #16
 800f19e:	6878      	ldr	r0, [r7, #4]
 800f1a0:	f7ff ff50 	bl	800f044 <lsm6ds3_write_reg>
 800f1a4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
}
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	3710      	adds	r7, #16
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	bd80      	pop	{r7, pc}

0800f1b0 <lsm6ds3_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6ds3_fs_g_t val)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b084      	sub	sp, #16
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
 800f1b8:	460b      	mov	r3, r1
 800f1ba:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800f1bc:	f107 0208 	add.w	r2, r7, #8
 800f1c0:	2301      	movs	r3, #1
 800f1c2:	2111      	movs	r1, #17
 800f1c4:	6878      	ldr	r0, [r7, #4]
 800f1c6:	f7ff ff25 	bl	800f014 <lsm6ds3_read_reg>
 800f1ca:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d10f      	bne.n	800f1f2 <lsm6ds3_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 800f1d2:	78fb      	ldrb	r3, [r7, #3]
 800f1d4:	f003 0307 	and.w	r3, r3, #7
 800f1d8:	b2da      	uxtb	r2, r3
 800f1da:	7a3b      	ldrb	r3, [r7, #8]
 800f1dc:	f362 0343 	bfi	r3, r2, #1, #3
 800f1e0:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800f1e2:	f107 0208 	add.w	r2, r7, #8
 800f1e6:	2301      	movs	r3, #1
 800f1e8:	2111      	movs	r1, #17
 800f1ea:	6878      	ldr	r0, [r7, #4]
 800f1ec:	f7ff ff2a 	bl	800f044 <lsm6ds3_write_reg>
 800f1f0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800f1f2:	68fb      	ldr	r3, [r7, #12]
}
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	3710      	adds	r7, #16
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}

0800f1fc <lsm6ds3_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6ds3_odr_g_t val)
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b084      	sub	sp, #16
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
 800f204:	460b      	mov	r3, r1
 800f206:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800f208:	f107 0208 	add.w	r2, r7, #8
 800f20c:	2301      	movs	r3, #1
 800f20e:	2111      	movs	r1, #17
 800f210:	6878      	ldr	r0, [r7, #4]
 800f212:	f7ff feff 	bl	800f014 <lsm6ds3_read_reg>
 800f216:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d10f      	bne.n	800f23e <lsm6ds3_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t)val;
 800f21e:	78fb      	ldrb	r3, [r7, #3]
 800f220:	f003 030f 	and.w	r3, r3, #15
 800f224:	b2da      	uxtb	r2, r3
 800f226:	7a3b      	ldrb	r3, [r7, #8]
 800f228:	f362 1307 	bfi	r3, r2, #4, #4
 800f22c:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800f22e:	f107 0208 	add.w	r2, r7, #8
 800f232:	2301      	movs	r3, #1
 800f234:	2111      	movs	r1, #17
 800f236:	6878      	ldr	r0, [r7, #4]
 800f238:	f7ff ff04 	bl	800f044 <lsm6ds3_write_reg>
 800f23c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800f23e:	68fb      	ldr	r3, [r7, #12]
}
 800f240:	4618      	mov	r0, r3
 800f242:	3710      	adds	r7, #16
 800f244:	46bd      	mov	sp, r7
 800f246:	bd80      	pop	{r7, pc}

0800f248 <lsm6ds3_temperature_raw_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b084      	sub	sp, #16
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
 800f250:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUT_TEMP_L, buff, 2);
 800f252:	f107 0208 	add.w	r2, r7, #8
 800f256:	2302      	movs	r3, #2
 800f258:	2120      	movs	r1, #32
 800f25a:	6878      	ldr	r0, [r7, #4]
 800f25c:	f7ff feda 	bl	800f014 <lsm6ds3_read_reg>
 800f260:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800f262:	7a7b      	ldrb	r3, [r7, #9]
 800f264:	b21a      	sxth	r2, r3
 800f266:	683b      	ldr	r3, [r7, #0]
 800f268:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800f26a:	683b      	ldr	r3, [r7, #0]
 800f26c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f270:	b29b      	uxth	r3, r3
 800f272:	021b      	lsls	r3, r3, #8
 800f274:	b29a      	uxth	r2, r3
 800f276:	7a3b      	ldrb	r3, [r7, #8]
 800f278:	b29b      	uxth	r3, r3
 800f27a:	4413      	add	r3, r2
 800f27c:	b29b      	uxth	r3, r3
 800f27e:	b21a      	sxth	r2, r3
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	801a      	strh	r2, [r3, #0]

  return ret;
 800f284:	68fb      	ldr	r3, [r7, #12]
}
 800f286:	4618      	mov	r0, r3
 800f288:	3710      	adds	r7, #16
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd80      	pop	{r7, pc}

0800f28e <lsm6ds3_angular_rate_raw_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800f28e:	b580      	push	{r7, lr}
 800f290:	b086      	sub	sp, #24
 800f292:	af00      	add	r7, sp, #0
 800f294:	6078      	str	r0, [r7, #4]
 800f296:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUTX_L_G, buff, 6);
 800f298:	f107 020c 	add.w	r2, r7, #12
 800f29c:	2306      	movs	r3, #6
 800f29e:	2122      	movs	r1, #34	; 0x22
 800f2a0:	6878      	ldr	r0, [r7, #4]
 800f2a2:	f7ff feb7 	bl	800f014 <lsm6ds3_read_reg>
 800f2a6:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800f2a8:	7b7b      	ldrb	r3, [r7, #13]
 800f2aa:	b21a      	sxth	r2, r3
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2b6:	b29b      	uxth	r3, r3
 800f2b8:	021b      	lsls	r3, r3, #8
 800f2ba:	b29a      	uxth	r2, r3
 800f2bc:	7b3b      	ldrb	r3, [r7, #12]
 800f2be:	b29b      	uxth	r3, r3
 800f2c0:	4413      	add	r3, r2
 800f2c2:	b29b      	uxth	r3, r3
 800f2c4:	b21a      	sxth	r2, r3
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800f2ca:	7bfa      	ldrb	r2, [r7, #15]
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	3302      	adds	r3, #2
 800f2d0:	b212      	sxth	r2, r2
 800f2d2:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	3302      	adds	r3, #2
 800f2d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2dc:	b29b      	uxth	r3, r3
 800f2de:	021b      	lsls	r3, r3, #8
 800f2e0:	b29a      	uxth	r2, r3
 800f2e2:	7bbb      	ldrb	r3, [r7, #14]
 800f2e4:	b29b      	uxth	r3, r3
 800f2e6:	4413      	add	r3, r2
 800f2e8:	b29a      	uxth	r2, r3
 800f2ea:	683b      	ldr	r3, [r7, #0]
 800f2ec:	3302      	adds	r3, #2
 800f2ee:	b212      	sxth	r2, r2
 800f2f0:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800f2f2:	7c7a      	ldrb	r2, [r7, #17]
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	3304      	adds	r3, #4
 800f2f8:	b212      	sxth	r2, r2
 800f2fa:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	3304      	adds	r3, #4
 800f300:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f304:	b29b      	uxth	r3, r3
 800f306:	021b      	lsls	r3, r3, #8
 800f308:	b29a      	uxth	r2, r3
 800f30a:	7c3b      	ldrb	r3, [r7, #16]
 800f30c:	b29b      	uxth	r3, r3
 800f30e:	4413      	add	r3, r2
 800f310:	b29a      	uxth	r2, r3
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	3304      	adds	r3, #4
 800f316:	b212      	sxth	r2, r2
 800f318:	801a      	strh	r2, [r3, #0]

  return ret;
 800f31a:	697b      	ldr	r3, [r7, #20]
}
 800f31c:	4618      	mov	r0, r3
 800f31e:	3718      	adds	r7, #24
 800f320:	46bd      	mov	sp, r7
 800f322:	bd80      	pop	{r7, pc}

0800f324 <lsm6ds3_acceleration_raw_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b086      	sub	sp, #24
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
 800f32c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUTX_L_XL, buff, 6);
 800f32e:	f107 020c 	add.w	r2, r7, #12
 800f332:	2306      	movs	r3, #6
 800f334:	2128      	movs	r1, #40	; 0x28
 800f336:	6878      	ldr	r0, [r7, #4]
 800f338:	f7ff fe6c 	bl	800f014 <lsm6ds3_read_reg>
 800f33c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800f33e:	7b7b      	ldrb	r3, [r7, #13]
 800f340:	b21a      	sxth	r2, r3
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800f346:	683b      	ldr	r3, [r7, #0]
 800f348:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f34c:	b29b      	uxth	r3, r3
 800f34e:	021b      	lsls	r3, r3, #8
 800f350:	b29a      	uxth	r2, r3
 800f352:	7b3b      	ldrb	r3, [r7, #12]
 800f354:	b29b      	uxth	r3, r3
 800f356:	4413      	add	r3, r2
 800f358:	b29b      	uxth	r3, r3
 800f35a:	b21a      	sxth	r2, r3
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800f360:	7bfa      	ldrb	r2, [r7, #15]
 800f362:	683b      	ldr	r3, [r7, #0]
 800f364:	3302      	adds	r3, #2
 800f366:	b212      	sxth	r2, r2
 800f368:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800f36a:	683b      	ldr	r3, [r7, #0]
 800f36c:	3302      	adds	r3, #2
 800f36e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f372:	b29b      	uxth	r3, r3
 800f374:	021b      	lsls	r3, r3, #8
 800f376:	b29a      	uxth	r2, r3
 800f378:	7bbb      	ldrb	r3, [r7, #14]
 800f37a:	b29b      	uxth	r3, r3
 800f37c:	4413      	add	r3, r2
 800f37e:	b29a      	uxth	r2, r3
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	3302      	adds	r3, #2
 800f384:	b212      	sxth	r2, r2
 800f386:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800f388:	7c7a      	ldrb	r2, [r7, #17]
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	3304      	adds	r3, #4
 800f38e:	b212      	sxth	r2, r2
 800f390:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	3304      	adds	r3, #4
 800f396:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f39a:	b29b      	uxth	r3, r3
 800f39c:	021b      	lsls	r3, r3, #8
 800f39e:	b29a      	uxth	r2, r3
 800f3a0:	7c3b      	ldrb	r3, [r7, #16]
 800f3a2:	b29b      	uxth	r3, r3
 800f3a4:	4413      	add	r3, r2
 800f3a6:	b29a      	uxth	r2, r3
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	3304      	adds	r3, #4
 800f3ac:	b212      	sxth	r2, r2
 800f3ae:	801a      	strh	r2, [r3, #0]

  return ret;
 800f3b0:	697b      	ldr	r3, [r7, #20]
}
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	3718      	adds	r7, #24
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	bd80      	pop	{r7, pc}

0800f3ba <lsm6ds3_device_id_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800f3ba:	b580      	push	{r7, lr}
 800f3bc:	b084      	sub	sp, #16
 800f3be:	af00      	add	r7, sp, #0
 800f3c0:	6078      	str	r0, [r7, #4]
 800f3c2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_WHO_AM_I, buff, 1);
 800f3c4:	2301      	movs	r3, #1
 800f3c6:	683a      	ldr	r2, [r7, #0]
 800f3c8:	210f      	movs	r1, #15
 800f3ca:	6878      	ldr	r0, [r7, #4]
 800f3cc:	f7ff fe22 	bl	800f014 <lsm6ds3_read_reg>
 800f3d0:	60f8      	str	r0, [r7, #12]

  return ret;
 800f3d2:	68fb      	ldr	r3, [r7, #12]
}
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	3710      	adds	r7, #16
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	bd80      	pop	{r7, pc}

0800f3dc <lsm6ds3_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b084      	sub	sp, #16
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
 800f3e4:	460b      	mov	r3, r1
 800f3e6:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800f3e8:	f107 0208 	add.w	r2, r7, #8
 800f3ec:	2301      	movs	r3, #1
 800f3ee:	2112      	movs	r1, #18
 800f3f0:	6878      	ldr	r0, [r7, #4]
 800f3f2:	f7ff fe0f 	bl	800f014 <lsm6ds3_read_reg>
 800f3f6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d10f      	bne.n	800f41e <lsm6ds3_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 800f3fe:	78fb      	ldrb	r3, [r7, #3]
 800f400:	f003 0301 	and.w	r3, r3, #1
 800f404:	b2da      	uxtb	r2, r3
 800f406:	7a3b      	ldrb	r3, [r7, #8]
 800f408:	f362 0300 	bfi	r3, r2, #0, #1
 800f40c:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800f40e:	f107 0208 	add.w	r2, r7, #8
 800f412:	2301      	movs	r3, #1
 800f414:	2112      	movs	r1, #18
 800f416:	6878      	ldr	r0, [r7, #4]
 800f418:	f7ff fe14 	bl	800f044 <lsm6ds3_write_reg>
 800f41c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800f41e:	68fb      	ldr	r3, [r7, #12]
}
 800f420:	4618      	mov	r0, r3
 800f422:	3710      	adds	r7, #16
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}

0800f428 <photorezistor_get_lux>:
#include "../photorezistor.h"

#ifdef HAL_ADC_MODULE_ENABLED


float photorezistor_get_lux(photorezistor_t ph) {
 800f428:	b5b0      	push	{r4, r5, r7, lr}
 800f42a:	b086      	sub	sp, #24
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	463b      	mov	r3, r7
 800f430:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_ADC_Start(ph.hadc);
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	4618      	mov	r0, r3
 800f438:	f7f6 fdea 	bl	8006010 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(ph.hadc, 100);
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2164      	movs	r1, #100	; 0x64
 800f440:	4618      	mov	r0, r3
 800f442:	f7f6 fecc 	bl	80061de <HAL_ADC_PollForConversion>
	float volts = HAL_ADC_GetValue(ph.hadc) * 3.3 / 4095;	//Volts
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	4618      	mov	r0, r3
 800f44a:	f7f6 ff53 	bl	80062f4 <HAL_ADC_GetValue>
 800f44e:	4603      	mov	r3, r0
 800f450:	4618      	mov	r0, r3
 800f452:	f7f1 f85f 	bl	8000514 <__aeabi_ui2d>
 800f456:	a347      	add	r3, pc, #284	; (adr r3, 800f574 <photorezistor_get_lux+0x14c>)
 800f458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f45c:	f7f1 f8d4 	bl	8000608 <__aeabi_dmul>
 800f460:	4602      	mov	r2, r0
 800f462:	460b      	mov	r3, r1
 800f464:	4610      	mov	r0, r2
 800f466:	4619      	mov	r1, r3
 800f468:	a344      	add	r3, pc, #272	; (adr r3, 800f57c <photorezistor_get_lux+0x154>)
 800f46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f46e:	f7f1 f9f5 	bl	800085c <__aeabi_ddiv>
 800f472:	4602      	mov	r2, r0
 800f474:	460b      	mov	r3, r1
 800f476:	4610      	mov	r0, r2
 800f478:	4619      	mov	r1, r3
 800f47a:	f7f1 fbbd 	bl	8000bf8 <__aeabi_d2f>
 800f47e:	4603      	mov	r3, r0
 800f480:	617b      	str	r3, [r7, #20]
	float ohms = volts*(ph.resist)/(3.3-volts);		//Ohms
 800f482:	ed97 7a00 	vldr	s14, [r7]
 800f486:	edd7 7a05 	vldr	s15, [r7, #20]
 800f48a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f48e:	ee17 0a90 	vmov	r0, s15
 800f492:	f7f1 f861 	bl	8000558 <__aeabi_f2d>
 800f496:	4604      	mov	r4, r0
 800f498:	460d      	mov	r5, r1
 800f49a:	6978      	ldr	r0, [r7, #20]
 800f49c:	f7f1 f85c 	bl	8000558 <__aeabi_f2d>
 800f4a0:	4602      	mov	r2, r0
 800f4a2:	460b      	mov	r3, r1
 800f4a4:	a133      	add	r1, pc, #204	; (adr r1, 800f574 <photorezistor_get_lux+0x14c>)
 800f4a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4aa:	f7f0 fef5 	bl	8000298 <__aeabi_dsub>
 800f4ae:	4602      	mov	r2, r0
 800f4b0:	460b      	mov	r3, r1
 800f4b2:	4620      	mov	r0, r4
 800f4b4:	4629      	mov	r1, r5
 800f4b6:	f7f1 f9d1 	bl	800085c <__aeabi_ddiv>
 800f4ba:	4602      	mov	r2, r0
 800f4bc:	460b      	mov	r3, r1
 800f4be:	4610      	mov	r0, r2
 800f4c0:	4619      	mov	r1, r3
 800f4c2:	f7f1 fb99 	bl	8000bf8 <__aeabi_d2f>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	613b      	str	r3, [r7, #16]
	float lux = exp((3.823-log(ohms/1000))/0.816)*10.764;	//Lux
 800f4ca:	edd7 7a04 	vldr	s15, [r7, #16]
 800f4ce:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800f570 <photorezistor_get_lux+0x148>
 800f4d2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800f4d6:	ee16 0a90 	vmov	r0, s13
 800f4da:	f7f1 f83d 	bl	8000558 <__aeabi_f2d>
 800f4de:	4602      	mov	r2, r0
 800f4e0:	460b      	mov	r3, r1
 800f4e2:	ec43 2b10 	vmov	d0, r2, r3
 800f4e6:	f005 f9db 	bl	80148a0 <log>
 800f4ea:	ec53 2b10 	vmov	r2, r3, d0
 800f4ee:	a11a      	add	r1, pc, #104	; (adr r1, 800f558 <photorezistor_get_lux+0x130>)
 800f4f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4f4:	f7f0 fed0 	bl	8000298 <__aeabi_dsub>
 800f4f8:	4602      	mov	r2, r0
 800f4fa:	460b      	mov	r3, r1
 800f4fc:	4610      	mov	r0, r2
 800f4fe:	4619      	mov	r1, r3
 800f500:	a317      	add	r3, pc, #92	; (adr r3, 800f560 <photorezistor_get_lux+0x138>)
 800f502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f506:	f7f1 f9a9 	bl	800085c <__aeabi_ddiv>
 800f50a:	4602      	mov	r2, r0
 800f50c:	460b      	mov	r3, r1
 800f50e:	ec43 2b17 	vmov	d7, r2, r3
 800f512:	eeb0 0a47 	vmov.f32	s0, s14
 800f516:	eef0 0a67 	vmov.f32	s1, s15
 800f51a:	f005 f971 	bl	8014800 <exp>
 800f51e:	ec51 0b10 	vmov	r0, r1, d0
 800f522:	a311      	add	r3, pc, #68	; (adr r3, 800f568 <photorezistor_get_lux+0x140>)
 800f524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f528:	f7f1 f86e 	bl	8000608 <__aeabi_dmul>
 800f52c:	4602      	mov	r2, r0
 800f52e:	460b      	mov	r3, r1
 800f530:	4610      	mov	r0, r2
 800f532:	4619      	mov	r1, r3
 800f534:	f7f1 fb60 	bl	8000bf8 <__aeabi_d2f>
 800f538:	4603      	mov	r3, r0
 800f53a:	60fb      	str	r3, [r7, #12]
	HAL_ADC_Stop(ph.hadc);
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	4618      	mov	r0, r3
 800f540:	f7f6 fe1a 	bl	8006178 <HAL_ADC_Stop>
	return lux;
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	ee07 3a90 	vmov	s15, r3
}
 800f54a:	eeb0 0a67 	vmov.f32	s0, s15
 800f54e:	3718      	adds	r7, #24
 800f550:	46bd      	mov	sp, r7
 800f552:	bdb0      	pop	{r4, r5, r7, pc}
 800f554:	f3af 8000 	nop.w
 800f558:	0624dd2f 	.word	0x0624dd2f
 800f55c:	400e9581 	.word	0x400e9581
 800f560:	083126e9 	.word	0x083126e9
 800f564:	3fea1cac 	.word	0x3fea1cac
 800f568:	020c49ba 	.word	0x020c49ba
 800f56c:	4025872b 	.word	0x4025872b
 800f570:	447a0000 	.word	0x447a0000
 800f574:	66666666 	.word	0x66666666
 800f578:	400a6666 	.word	0x400a6666
 800f57c:	00000000 	.word	0x00000000
 800f580:	40affe00 	.word	0x40affe00

0800f584 <_nrf24_CS>:
extern SPI_HandleTypeDef hspi2;



static void _nrf24_CS(void * intf_ptr, bool mode)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b084      	sub	sp, #16
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
 800f58c:	460b      	mov	r3, r1
 800f58e:	70fb      	strb	r3, [r7, #3]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	60fb      	str	r3, [r7, #12]
	nrf24_spi_pins_t *api_config_low = (nrf24_spi_pins_t *)api_config->intf_ptr;
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	68db      	ldr	r3, [r3, #12]
 800f598:	60bb      	str	r3, [r7, #8]
	if (mode)
 800f59a:	78fb      	ldrb	r3, [r7, #3]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d008      	beq.n	800f5b2 <_nrf24_CS+0x2e>
	{
		// Опускаем chip select для того, что бы начать общение с конкретным устройством.
		HAL_GPIO_WritePin(api_config_low->cs_port, api_config_low->cs_pin,  GPIO_PIN_RESET);
 800f5a0:	68bb      	ldr	r3, [r7, #8]
 800f5a2:	6898      	ldr	r0, [r3, #8]
 800f5a4:	68bb      	ldr	r3, [r7, #8]
 800f5a6:	899b      	ldrh	r3, [r3, #12]
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	4619      	mov	r1, r3
 800f5ac:	f7f7 fc70 	bl	8006e90 <HAL_GPIO_WritePin>
	{
		// Поднимаем chip select для того, что бы закончить общение с конкретным устройством.
		HAL_GPIO_WritePin(api_config_low->cs_port, api_config_low->cs_pin,  GPIO_PIN_SET);
		//HAL_Delay(100);
	}
}
 800f5b0:	e007      	b.n	800f5c2 <_nrf24_CS+0x3e>
		HAL_GPIO_WritePin(api_config_low->cs_port, api_config_low->cs_pin,  GPIO_PIN_SET);
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	6898      	ldr	r0, [r3, #8]
 800f5b6:	68bb      	ldr	r3, [r7, #8]
 800f5b8:	899b      	ldrh	r3, [r3, #12]
 800f5ba:	2201      	movs	r2, #1
 800f5bc:	4619      	mov	r1, r3
 800f5be:	f7f7 fc67 	bl	8006e90 <HAL_GPIO_WritePin>
}
 800f5c2:	bf00      	nop
 800f5c4:	3710      	adds	r7, #16
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bd80      	pop	{r7, pc}

0800f5ca <nrf24_read_register>:
		shift_reg_oe(api_config_low->this, false);
	}
}

void nrf24_read_register(void * intf_ptr, uint8_t reg_addr, uint8_t * reg_data, size_t data_size)
{
 800f5ca:	b580      	push	{r7, lr}
 800f5cc:	b086      	sub	sp, #24
 800f5ce:	af00      	add	r7, sp, #0
 800f5d0:	60f8      	str	r0, [r7, #12]
 800f5d2:	607a      	str	r2, [r7, #4]
 800f5d4:	603b      	str	r3, [r7, #0]
 800f5d6:	460b      	mov	r3, r1
 800f5d8:	72fb      	strb	r3, [r7, #11]

	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	617b      	str	r3, [r7, #20]

	api_config->nrf24_CS(intf_ptr, true);
 800f5de:	697b      	ldr	r3, [r7, #20]
 800f5e0:	685b      	ldr	r3, [r3, #4]
 800f5e2:	2101      	movs	r1, #1
 800f5e4:	68f8      	ldr	r0, [r7, #12]
 800f5e6:	4798      	blx	r3

	// Добавляем в 5 битов адреса еще 3 бита для чтения из этого регистра
	reg_addr = reg_addr & ~((1 << 5) | (1 << 6) | (1 << 7));
 800f5e8:	7afb      	ldrb	r3, [r7, #11]
 800f5ea:	f003 031f 	and.w	r3, r3, #31
 800f5ee:	b2db      	uxtb	r3, r3
 800f5f0:	72fb      	strb	r3, [r7, #11]

	// Передаем адресс регистра, который читаем и читаем данные
	HAL_SPI_Transmit(api_config->hspi, &reg_addr, 1, HAL_MAX_DELAY);
 800f5f2:	697b      	ldr	r3, [r7, #20]
 800f5f4:	6818      	ldr	r0, [r3, #0]
 800f5f6:	f107 010b 	add.w	r1, r7, #11
 800f5fa:	f04f 33ff 	mov.w	r3, #4294967295
 800f5fe:	2201      	movs	r2, #1
 800f600:	f7fa f8a5 	bl	800974e <HAL_SPI_Transmit>
	HAL_SPI_Receive(api_config->hspi, reg_data, data_size, HAL_MAX_DELAY);
 800f604:	697b      	ldr	r3, [r7, #20]
 800f606:	6818      	ldr	r0, [r3, #0]
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	b29a      	uxth	r2, r3
 800f60c:	f04f 33ff 	mov.w	r3, #4294967295
 800f610:	6879      	ldr	r1, [r7, #4]
 800f612:	f7fa f9d8 	bl	80099c6 <HAL_SPI_Receive>

	api_config->nrf24_CS(intf_ptr, false);
 800f616:	697b      	ldr	r3, [r7, #20]
 800f618:	685b      	ldr	r3, [r3, #4]
 800f61a:	2100      	movs	r1, #0
 800f61c:	68f8      	ldr	r0, [r7, #12]
 800f61e:	4798      	blx	r3
}
 800f620:	bf00      	nop
 800f622:	3718      	adds	r7, #24
 800f624:	46bd      	mov	sp, r7
 800f626:	bd80      	pop	{r7, pc}

0800f628 <nrf24_write_register>:

void nrf24_write_register(void * intf_ptr, uint8_t reg_addr, const uint8_t * reg_data, size_t data_size)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b086      	sub	sp, #24
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	60f8      	str	r0, [r7, #12]
 800f630:	607a      	str	r2, [r7, #4]
 800f632:	603b      	str	r3, [r7, #0]
 800f634:	460b      	mov	r3, r1
 800f636:	72fb      	strb	r3, [r7, #11]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	617b      	str	r3, [r7, #20]
	api_config->nrf24_CS(intf_ptr, true);
 800f63c:	697b      	ldr	r3, [r7, #20]
 800f63e:	685b      	ldr	r3, [r3, #4]
 800f640:	2101      	movs	r1, #1
 800f642:	68f8      	ldr	r0, [r7, #12]
 800f644:	4798      	blx	r3

	// Добавляем в 5 битов адреса еще 3 бита для записи в регистр
	reg_addr = (reg_addr & ~((1 << 6) | (1 << 7))) | (1 << 5);
 800f646:	7afb      	ldrb	r3, [r7, #11]
 800f648:	b25b      	sxtb	r3, r3
 800f64a:	f003 031f 	and.w	r3, r3, #31
 800f64e:	b25b      	sxtb	r3, r3
 800f650:	f043 0320 	orr.w	r3, r3, #32
 800f654:	b25b      	sxtb	r3, r3
 800f656:	b2db      	uxtb	r3, r3
 800f658:	72fb      	strb	r3, [r7, #11]

	// Передаем адресс регистра, в который пишем и пишем в регистр
	HAL_SPI_Transmit(api_config->hspi, &reg_addr, 1, HAL_MAX_DELAY);
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	6818      	ldr	r0, [r3, #0]
 800f65e:	f107 010b 	add.w	r1, r7, #11
 800f662:	f04f 33ff 	mov.w	r3, #4294967295
 800f666:	2201      	movs	r2, #1
 800f668:	f7fa f871 	bl	800974e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(api_config->hspi, (uint8_t*)reg_data, data_size, HAL_MAX_DELAY);
 800f66c:	697b      	ldr	r3, [r7, #20]
 800f66e:	6818      	ldr	r0, [r3, #0]
 800f670:	683b      	ldr	r3, [r7, #0]
 800f672:	b29a      	uxth	r2, r3
 800f674:	f04f 33ff 	mov.w	r3, #4294967295
 800f678:	6879      	ldr	r1, [r7, #4]
 800f67a:	f7fa f868 	bl	800974e <HAL_SPI_Transmit>

	api_config->nrf24_CS(intf_ptr, false);
 800f67e:	697b      	ldr	r3, [r7, #20]
 800f680:	685b      	ldr	r3, [r3, #4]
 800f682:	2100      	movs	r1, #0
 800f684:	68f8      	ldr	r0, [r7, #12]
 800f686:	4798      	blx	r3
}
 800f688:	bf00      	nop
 800f68a:	3718      	adds	r7, #24
 800f68c:	46bd      	mov	sp, r7
 800f68e:	bd80      	pop	{r7, pc}

0800f690 <nrf24_read_rx_payload>:

void nrf24_read_rx_payload(void * intf_ptr, uint8_t * payload_buffer, size_t payload_buffer_size)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b086      	sub	sp, #24
 800f694:	af00      	add	r7, sp, #0
 800f696:	60f8      	str	r0, [r7, #12]
 800f698:	60b9      	str	r1, [r7, #8]
 800f69a:	607a      	str	r2, [r7, #4]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	617b      	str	r3, [r7, #20]
	uint8_t command = NRF24_R_RX_PAYLOAD;
 800f6a0:	2361      	movs	r3, #97	; 0x61
 800f6a2:	74fb      	strb	r3, [r7, #19]
	uint8_t payload_size = 0;
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	74bb      	strb	r3, [r7, #18]
    // Считываем размер данных
	nrf24_get_rx_payload_size(intf_ptr, &payload_size);
 800f6a8:	f107 0312 	add.w	r3, r7, #18
 800f6ac:	4619      	mov	r1, r3
 800f6ae:	68f8      	ldr	r0, [r7, #12]
 800f6b0:	f000 f89d 	bl	800f7ee <nrf24_get_rx_payload_size>
	// Если размер данных от 1 до 32, то читаем данные
	if (payload_size > 0 || payload_size < 32)
 800f6b4:	7cbb      	ldrb	r3, [r7, #18]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d102      	bne.n	800f6c0 <nrf24_read_rx_payload+0x30>
 800f6ba:	7cbb      	ldrb	r3, [r7, #18]
 800f6bc:	2b1f      	cmp	r3, #31
 800f6be:	d823      	bhi.n	800f708 <nrf24_read_rx_payload+0x78>
	{
		// Если места на запись меньше, чем у нас есть данных, читем сколько, сколько есть места
		if (payload_size > payload_buffer_size)
 800f6c0:	7cbb      	ldrb	r3, [r7, #18]
 800f6c2:	461a      	mov	r2, r3
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	4293      	cmp	r3, r2
 800f6c8:	d202      	bcs.n	800f6d0 <nrf24_read_rx_payload+0x40>
		{
			payload_size = payload_buffer_size;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	b2db      	uxtb	r3, r3
 800f6ce:	74bb      	strb	r3, [r7, #18]
		}
		api_config->nrf24_CS(intf_ptr, true);
 800f6d0:	697b      	ldr	r3, [r7, #20]
 800f6d2:	685b      	ldr	r3, [r3, #4]
 800f6d4:	2101      	movs	r1, #1
 800f6d6:	68f8      	ldr	r0, [r7, #12]
 800f6d8:	4798      	blx	r3
		// Читаем данные
		HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
 800f6da:	697b      	ldr	r3, [r7, #20]
 800f6dc:	6818      	ldr	r0, [r3, #0]
 800f6de:	f107 0113 	add.w	r1, r7, #19
 800f6e2:	f04f 33ff 	mov.w	r3, #4294967295
 800f6e6:	2201      	movs	r2, #1
 800f6e8:	f7fa f831 	bl	800974e <HAL_SPI_Transmit>
		HAL_SPI_Receive(api_config->hspi, payload_buffer, payload_size, HAL_MAX_DELAY);
 800f6ec:	697b      	ldr	r3, [r7, #20]
 800f6ee:	6818      	ldr	r0, [r3, #0]
 800f6f0:	7cbb      	ldrb	r3, [r7, #18]
 800f6f2:	b29a      	uxth	r2, r3
 800f6f4:	f04f 33ff 	mov.w	r3, #4294967295
 800f6f8:	68b9      	ldr	r1, [r7, #8]
 800f6fa:	f7fa f964 	bl	80099c6 <HAL_SPI_Receive>
		api_config->nrf24_CS(intf_ptr, false);
 800f6fe:	697b      	ldr	r3, [r7, #20]
 800f700:	685b      	ldr	r3, [r3, #4]
 800f702:	2100      	movs	r1, #0
 800f704:	68f8      	ldr	r0, [r7, #12]
 800f706:	4798      	blx	r3
	}
}
 800f708:	bf00      	nop
 800f70a:	3718      	adds	r7, #24
 800f70c:	46bd      	mov	sp, r7
 800f70e:	bd80      	pop	{r7, pc}

0800f710 <nrf24_write_tx_payload>:

void nrf24_write_tx_payload(void * intf_ptr, const uint8_t * payload_buffer, size_t payload_size, bool use_ack)
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b086      	sub	sp, #24
 800f714:	af00      	add	r7, sp, #0
 800f716:	60f8      	str	r0, [r7, #12]
 800f718:	60b9      	str	r1, [r7, #8]
 800f71a:	607a      	str	r2, [r7, #4]
 800f71c:	70fb      	strb	r3, [r7, #3]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	617b      	str	r3, [r7, #20]
	uint8_t command;
	api_config->nrf24_CS(intf_ptr, true);
 800f722:	697b      	ldr	r3, [r7, #20]
 800f724:	685b      	ldr	r3, [r3, #4]
 800f726:	2101      	movs	r1, #1
 800f728:	68f8      	ldr	r0, [r7, #12]
 800f72a:	4798      	blx	r3
	// Учитываем использование ack
	if (use_ack)
 800f72c:	78fb      	ldrb	r3, [r7, #3]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d002      	beq.n	800f738 <nrf24_write_tx_payload+0x28>
	{
		command = NRF24_W_TX_PAYLOAD;
 800f732:	23a0      	movs	r3, #160	; 0xa0
 800f734:	74fb      	strb	r3, [r7, #19]
 800f736:	e001      	b.n	800f73c <nrf24_write_tx_payload+0x2c>
	}
	else
	{
		command = NRF24_W_TX_PAYLOAD_NO_ACK;
 800f738:	23b0      	movs	r3, #176	; 0xb0
 800f73a:	74fb      	strb	r3, [r7, #19]
	}
	// Передаем данные
	HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
 800f73c:	697b      	ldr	r3, [r7, #20]
 800f73e:	6818      	ldr	r0, [r3, #0]
 800f740:	f107 0113 	add.w	r1, r7, #19
 800f744:	f04f 33ff 	mov.w	r3, #4294967295
 800f748:	2201      	movs	r2, #1
 800f74a:	f7fa f800 	bl	800974e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(api_config->hspi, (uint8_t*)payload_buffer, payload_size, HAL_MAX_DELAY);
 800f74e:	697b      	ldr	r3, [r7, #20]
 800f750:	6818      	ldr	r0, [r3, #0]
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	b29a      	uxth	r2, r3
 800f756:	f04f 33ff 	mov.w	r3, #4294967295
 800f75a:	68b9      	ldr	r1, [r7, #8]
 800f75c:	f7f9 fff7 	bl	800974e <HAL_SPI_Transmit>

	api_config->nrf24_CS(intf_ptr, false);
 800f760:	697b      	ldr	r3, [r7, #20]
 800f762:	685b      	ldr	r3, [r3, #4]
 800f764:	2100      	movs	r1, #0
 800f766:	68f8      	ldr	r0, [r7, #12]
 800f768:	4798      	blx	r3
}
 800f76a:	bf00      	nop
 800f76c:	3718      	adds	r7, #24
 800f76e:	46bd      	mov	sp, r7
 800f770:	bd80      	pop	{r7, pc}

0800f772 <nrf24_flush_rx>:

void nrf24_flush_rx(void * intf_ptr)
{
 800f772:	b580      	push	{r7, lr}
 800f774:	b084      	sub	sp, #16
 800f776:	af00      	add	r7, sp, #0
 800f778:	6078      	str	r0, [r7, #4]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	60fb      	str	r3, [r7, #12]
	uint8_t command = NRF24_FLUSH_RX;
 800f77e:	23e2      	movs	r3, #226	; 0xe2
 800f780:	72fb      	strb	r3, [r7, #11]
	api_config->nrf24_CS(intf_ptr, true);
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	685b      	ldr	r3, [r3, #4]
 800f786:	2101      	movs	r1, #1
 800f788:	6878      	ldr	r0, [r7, #4]
 800f78a:	4798      	blx	r3
	HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	6818      	ldr	r0, [r3, #0]
 800f790:	f107 010b 	add.w	r1, r7, #11
 800f794:	f04f 33ff 	mov.w	r3, #4294967295
 800f798:	2201      	movs	r2, #1
 800f79a:	f7f9 ffd8 	bl	800974e <HAL_SPI_Transmit>
	api_config->nrf24_CS(intf_ptr, false);
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	685b      	ldr	r3, [r3, #4]
 800f7a2:	2100      	movs	r1, #0
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	4798      	blx	r3
}
 800f7a8:	bf00      	nop
 800f7aa:	3710      	adds	r7, #16
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}

0800f7b0 <nrf24_flush_tx>:

void nrf24_flush_tx(void * intf_ptr)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b084      	sub	sp, #16
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	60fb      	str	r3, [r7, #12]
	uint8_t command = NRF24_FLUSH_TX;
 800f7bc:	23e1      	movs	r3, #225	; 0xe1
 800f7be:	72fb      	strb	r3, [r7, #11]
	api_config->nrf24_CS(intf_ptr, true);
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	685b      	ldr	r3, [r3, #4]
 800f7c4:	2101      	movs	r1, #1
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	4798      	blx	r3
	HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	6818      	ldr	r0, [r3, #0]
 800f7ce:	f107 010b 	add.w	r1, r7, #11
 800f7d2:	f04f 33ff 	mov.w	r3, #4294967295
 800f7d6:	2201      	movs	r2, #1
 800f7d8:	f7f9 ffb9 	bl	800974e <HAL_SPI_Transmit>
	api_config->nrf24_CS(intf_ptr, false);
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	685b      	ldr	r3, [r3, #4]
 800f7e0:	2100      	movs	r1, #0
 800f7e2:	6878      	ldr	r0, [r7, #4]
 800f7e4:	4798      	blx	r3
}
 800f7e6:	bf00      	nop
 800f7e8:	3710      	adds	r7, #16
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	bd80      	pop	{r7, pc}

0800f7ee <nrf24_get_rx_payload_size>:
	HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
	api_config->nrf24_CS(intf_ptr, false);
}

void nrf24_get_rx_payload_size(void * intf_ptr, uint8_t * payload_size)
{
 800f7ee:	b580      	push	{r7, lr}
 800f7f0:	b084      	sub	sp, #16
 800f7f2:	af00      	add	r7, sp, #0
 800f7f4:	6078      	str	r0, [r7, #4]
 800f7f6:	6039      	str	r1, [r7, #0]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	60fb      	str	r3, [r7, #12]
	uint8_t command = NRF24_R_RX_PL_WID;
 800f7fc:	2360      	movs	r3, #96	; 0x60
 800f7fe:	72fb      	strb	r3, [r7, #11]
	api_config->nrf24_CS(intf_ptr, true);
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	685b      	ldr	r3, [r3, #4]
 800f804:	2101      	movs	r1, #1
 800f806:	6878      	ldr	r0, [r7, #4]
 800f808:	4798      	blx	r3
	HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	6818      	ldr	r0, [r3, #0]
 800f80e:	f107 010b 	add.w	r1, r7, #11
 800f812:	f04f 33ff 	mov.w	r3, #4294967295
 800f816:	2201      	movs	r2, #1
 800f818:	f7f9 ff99 	bl	800974e <HAL_SPI_Transmit>
	HAL_SPI_Receive(api_config->hspi, payload_size, 1, HAL_MAX_DELAY);
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	6818      	ldr	r0, [r3, #0]
 800f820:	f04f 33ff 	mov.w	r3, #4294967295
 800f824:	2201      	movs	r2, #1
 800f826:	6839      	ldr	r1, [r7, #0]
 800f828:	f7fa f8cd 	bl	80099c6 <HAL_SPI_Receive>
	api_config->nrf24_CS(intf_ptr, false);
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	685b      	ldr	r3, [r3, #4]
 800f830:	2100      	movs	r1, #0
 800f832:	6878      	ldr	r0, [r7, #4]
 800f834:	4798      	blx	r3
	// Если размер данных больше 32, то отчищаем rx буфер и зануляем его
    if (*payload_size > 32)
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	781b      	ldrb	r3, [r3, #0]
 800f83a:	2b20      	cmp	r3, #32
 800f83c:	d904      	bls.n	800f848 <nrf24_get_rx_payload_size+0x5a>
    {
    	nrf24_flush_rx(intf_ptr);
 800f83e:	6878      	ldr	r0, [r7, #4]
 800f840:	f7ff ff97 	bl	800f772 <nrf24_flush_rx>
    	payload_size = 0;
 800f844:	2300      	movs	r3, #0
 800f846:	603b      	str	r3, [r7, #0]
    }
}
 800f848:	bf00      	nop
 800f84a:	3710      	adds	r7, #16
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}

0800f850 <nrf24_get_status>:

	api_config->nrf24_CS(intf_ptr, false);
}

void nrf24_get_status(void * intf_ptr, uint8_t * status)
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b086      	sub	sp, #24
 800f854:	af02      	add	r7, sp, #8
 800f856:	6078      	str	r0, [r7, #4]
 800f858:	6039      	str	r1, [r7, #0]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	60fb      	str	r3, [r7, #12]
	uint8_t command = NRF24_NOP;
 800f85e:	23ff      	movs	r3, #255	; 0xff
 800f860:	72fb      	strb	r3, [r7, #11]
	api_config->nrf24_CS(intf_ptr, true);
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	685b      	ldr	r3, [r3, #4]
 800f866:	2101      	movs	r1, #1
 800f868:	6878      	ldr	r0, [r7, #4]
 800f86a:	4798      	blx	r3
	HAL_SPI_TransmitReceive(api_config->hspi, &command, status, 1, HAL_MAX_DELAY);
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	6818      	ldr	r0, [r3, #0]
 800f870:	f107 010b 	add.w	r1, r7, #11
 800f874:	f04f 33ff 	mov.w	r3, #4294967295
 800f878:	9300      	str	r3, [sp, #0]
 800f87a:	2301      	movs	r3, #1
 800f87c:	683a      	ldr	r2, [r7, #0]
 800f87e:	f7fa f9b3 	bl	8009be8 <HAL_SPI_TransmitReceive>
	api_config->nrf24_CS(intf_ptr, false);
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	685b      	ldr	r3, [r3, #4]
 800f886:	2100      	movs	r1, #0
 800f888:	6878      	ldr	r0, [r7, #4]
 800f88a:	4798      	blx	r3
}
 800f88c:	bf00      	nop
 800f88e:	3710      	adds	r7, #16
 800f890:	46bd      	mov	sp, r7
 800f892:	bd80      	pop	{r7, pc}

0800f894 <nrf24_ce_activate>:

void nrf24_ce_activate(void * intf_ptr, bool onoff)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b084      	sub	sp, #16
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
 800f89c:	460b      	mov	r3, r1
 800f89e:	70fb      	strb	r3, [r7, #3]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	60fb      	str	r3, [r7, #12]
	api_config->nrf24_CE(intf_ptr, onoff);
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	689b      	ldr	r3, [r3, #8]
 800f8a8:	78fa      	ldrb	r2, [r7, #3]
 800f8aa:	4611      	mov	r1, r2
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	4798      	blx	r3
}
 800f8b0:	bf00      	nop
 800f8b2:	3710      	adds	r7, #16
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd80      	pop	{r7, pc}

0800f8b8 <_nrf24_CE>:

void _nrf24_CE(void * intf_ptr, bool onoff)
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b084      	sub	sp, #16
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
 800f8c0:	460b      	mov	r3, r1
 800f8c2:	70fb      	strb	r3, [r7, #3]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	60fb      	str	r3, [r7, #12]
	nrf24_spi_pins_t *api_config_low = (nrf24_spi_pins_t *)api_config->intf_ptr;
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	68db      	ldr	r3, [r3, #12]
 800f8cc:	60bb      	str	r3, [r7, #8]
	if (onoff)
 800f8ce:	78fb      	ldrb	r3, [r7, #3]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d008      	beq.n	800f8e6 <_nrf24_CE+0x2e>
	{
		HAL_GPIO_WritePin(api_config_low->ce_port, api_config_low->ce_pin,  GPIO_PIN_SET);
 800f8d4:	68bb      	ldr	r3, [r7, #8]
 800f8d6:	6818      	ldr	r0, [r3, #0]
 800f8d8:	68bb      	ldr	r3, [r7, #8]
 800f8da:	889b      	ldrh	r3, [r3, #4]
 800f8dc:	2201      	movs	r2, #1
 800f8de:	4619      	mov	r1, r3
 800f8e0:	f7f7 fad6 	bl	8006e90 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(api_config_low->ce_port, api_config_low->ce_pin, GPIO_PIN_RESET);
	}
}
 800f8e4:	e007      	b.n	800f8f6 <_nrf24_CE+0x3e>
		HAL_GPIO_WritePin(api_config_low->ce_port, api_config_low->ce_pin, GPIO_PIN_RESET);
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	6818      	ldr	r0, [r3, #0]
 800f8ea:	68bb      	ldr	r3, [r7, #8]
 800f8ec:	889b      	ldrh	r3, [r3, #4]
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	4619      	mov	r1, r3
 800f8f2:	f7f7 facd 	bl	8006e90 <HAL_GPIO_WritePin>
}
 800f8f6:	bf00      	nop
 800f8f8:	3710      	adds	r7, #16
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	bd80      	pop	{r7, pc}
	...

0800f900 <nrf24_spi_init>:
	shift_reg_write_bit_8(api_config_low->this, api_config_low->pos_CE, onoff);
	shift_reg_oe(api_config_low->this, false);
}

void nrf24_spi_init(nrf24_lower_api_config_t* nrf24, SPI_HandleTypeDef *hspi, nrf24_spi_pins_t* pins)
{
 800f900:	b480      	push	{r7}
 800f902:	b085      	sub	sp, #20
 800f904:	af00      	add	r7, sp, #0
 800f906:	60f8      	str	r0, [r7, #12]
 800f908:	60b9      	str	r1, [r7, #8]
 800f90a:	607a      	str	r2, [r7, #4]
	nrf24->hspi = hspi;
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	68ba      	ldr	r2, [r7, #8]
 800f910:	601a      	str	r2, [r3, #0]
	nrf24->nrf24_CS = _nrf24_CS;
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	4a06      	ldr	r2, [pc, #24]	; (800f930 <nrf24_spi_init+0x30>)
 800f916:	605a      	str	r2, [r3, #4]
	nrf24->nrf24_CE = _nrf24_CE;
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	4a06      	ldr	r2, [pc, #24]	; (800f934 <nrf24_spi_init+0x34>)
 800f91c:	609a      	str	r2, [r3, #8]
	nrf24->intf_ptr = pins;
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	687a      	ldr	r2, [r7, #4]
 800f922:	60da      	str	r2, [r3, #12]
}
 800f924:	bf00      	nop
 800f926:	3714      	adds	r7, #20
 800f928:	46bd      	mov	sp, r7
 800f92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92e:	4770      	bx	lr
 800f930:	0800f585 	.word	0x0800f585
 800f934:	0800f8b9 	.word	0x0800f8b9

0800f938 <nrf24_setup_rf>:
#include "../nrf24_lower_api.h"
#include "../nrf24_defs.h"


int nrf24_setup_rf(void * intf_ptr, const nrf24_rf_config_t * config)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b084      	sub	sp, #16
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
 800f940:	6039      	str	r1, [r7, #0]
	uint8_t rf_setup = 0;
 800f942:	2300      	movs	r3, #0
 800f944:	73fb      	strb	r3, [r7, #15]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_RF_SETUP, &rf_setup, 1);
 800f946:	f107 020f 	add.w	r2, r7, #15
 800f94a:	2301      	movs	r3, #1
 800f94c:	2106      	movs	r1, #6
 800f94e:	6878      	ldr	r0, [r7, #4]
 800f950:	f7ff fe3b 	bl	800f5ca <nrf24_read_register>
	switch (config->data_rate)
 800f954:	683b      	ldr	r3, [r7, #0]
 800f956:	781b      	ldrb	r3, [r3, #0]
 800f958:	2b02      	cmp	r3, #2
 800f95a:	d01c      	beq.n	800f996 <nrf24_setup_rf+0x5e>
 800f95c:	2b02      	cmp	r3, #2
 800f95e:	dc25      	bgt.n	800f9ac <nrf24_setup_rf+0x74>
 800f960:	2b00      	cmp	r3, #0
 800f962:	d002      	beq.n	800f96a <nrf24_setup_rf+0x32>
 800f964:	2b01      	cmp	r3, #1
 800f966:	d00b      	beq.n	800f980 <nrf24_setup_rf+0x48>
 800f968:	e020      	b.n	800f9ac <nrf24_setup_rf+0x74>
	{
	case NRF24_DATARATE_250_KBIT:
		rf_setup |= NRF24_RFSETUP_RF_DR_LOW; // ставим 1
 800f96a:	7bfb      	ldrb	r3, [r7, #15]
 800f96c:	f043 0320 	orr.w	r3, r3, #32
 800f970:	b2db      	uxtb	r3, r3
 800f972:	73fb      	strb	r3, [r7, #15]
		rf_setup &= ~NRF24_RFSETUP_RF_DR_HIGH; // ставим 0
 800f974:	7bfb      	ldrb	r3, [r7, #15]
 800f976:	f023 0308 	bic.w	r3, r3, #8
 800f97a:	b2db      	uxtb	r3, r3
 800f97c:	73fb      	strb	r3, [r7, #15]
		break;
 800f97e:	e015      	b.n	800f9ac <nrf24_setup_rf+0x74>
	case NRF24_DATARATE_1000_KBIT :
		rf_setup &= ~NRF24_RFSETUP_RF_DR_LOW;
 800f980:	7bfb      	ldrb	r3, [r7, #15]
 800f982:	f023 0320 	bic.w	r3, r3, #32
 800f986:	b2db      	uxtb	r3, r3
 800f988:	73fb      	strb	r3, [r7, #15]
		rf_setup &= ~NRF24_RFSETUP_RF_DR_HIGH;
 800f98a:	7bfb      	ldrb	r3, [r7, #15]
 800f98c:	f023 0308 	bic.w	r3, r3, #8
 800f990:	b2db      	uxtb	r3, r3
 800f992:	73fb      	strb	r3, [r7, #15]
		break;
 800f994:	e00a      	b.n	800f9ac <nrf24_setup_rf+0x74>
	case NRF24_DATARATE_2000_KBIT :
		rf_setup &= ~NRF24_RFSETUP_RF_DR_LOW;
 800f996:	7bfb      	ldrb	r3, [r7, #15]
 800f998:	f023 0320 	bic.w	r3, r3, #32
 800f99c:	b2db      	uxtb	r3, r3
 800f99e:	73fb      	strb	r3, [r7, #15]
		rf_setup |= NRF24_RFSETUP_RF_DR_HIGH;
 800f9a0:	7bfb      	ldrb	r3, [r7, #15]
 800f9a2:	f043 0308 	orr.w	r3, r3, #8
 800f9a6:	b2db      	uxtb	r3, r3
 800f9a8:	73fb      	strb	r3, [r7, #15]
		break;
 800f9aa:	bf00      	nop
	}

	rf_setup &= ~(NRF24_RFSETUP_RF_PWR_MASK << NRF24_RFSETUP_RF_PWR_OFFSET); // занулили
 800f9ac:	7bfb      	ldrb	r3, [r7, #15]
 800f9ae:	f023 0306 	bic.w	r3, r3, #6
 800f9b2:	b2db      	uxtb	r3, r3
 800f9b4:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (config->tx_power & NRF24_RFSETUP_RF_PWR_MASK) << NRF24_RFSETUP_RF_PWR_OFFSET; // записали
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	785b      	ldrb	r3, [r3, #1]
 800f9ba:	005b      	lsls	r3, r3, #1
 800f9bc:	b25b      	sxtb	r3, r3
 800f9be:	f003 0306 	and.w	r3, r3, #6
 800f9c2:	b25a      	sxtb	r2, r3
 800f9c4:	7bfb      	ldrb	r3, [r7, #15]
 800f9c6:	b25b      	sxtb	r3, r3
 800f9c8:	4313      	orrs	r3, r2
 800f9ca:	b25b      	sxtb	r3, r3
 800f9cc:	b2db      	uxtb	r3, r3
 800f9ce:	73fb      	strb	r3, [r7, #15]

	nrf24_write_register(intf_ptr, NRF24_REGADDR_RF_SETUP, &rf_setup, 1);
 800f9d0:	f107 020f 	add.w	r2, r7, #15
 800f9d4:	2301      	movs	r3, #1
 800f9d6:	2106      	movs	r1, #6
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	f7ff fe25 	bl	800f628 <nrf24_write_register>

	uint8_t rf_channel = config->rf_channel;
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	789b      	ldrb	r3, [r3, #2]
 800f9e2:	73bb      	strb	r3, [r7, #14]
    nrf24_write_register(intf_ptr, NRF24_REGADDR_RF_CH, &rf_channel, 1);
 800f9e4:	f107 020e 	add.w	r2, r7, #14
 800f9e8:	2301      	movs	r3, #1
 800f9ea:	2105      	movs	r1, #5
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	f7ff fe1b 	bl	800f628 <nrf24_write_register>
	return 0;
 800f9f2:	2300      	movs	r3, #0
}
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	3710      	adds	r7, #16
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	bd80      	pop	{r7, pc}

0800f9fc <nrf24_setup_protocol>:


int nrf24_setup_protocol(void * intf_ptr, const nrf24_protocol_config_t * config)
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b084      	sub	sp, #16
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
 800fa04:	6039      	str	r1, [r7, #0]
    uint8_t conf_reg = 0;
 800fa06:	2300      	movs	r3, #0
 800fa08:	73fb      	strb	r3, [r7, #15]
    nrf24_read_register(intf_ptr, NRF24_REGADDR_CONFIG, &conf_reg, 1);
 800fa0a:	f107 020f 	add.w	r2, r7, #15
 800fa0e:	2301      	movs	r3, #1
 800fa10:	2100      	movs	r1, #0
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f7ff fdd9 	bl	800f5ca <nrf24_read_register>
    switch (config->crc_size)
 800fa18:	683b      	ldr	r3, [r7, #0]
 800fa1a:	781b      	ldrb	r3, [r3, #0]
 800fa1c:	2b02      	cmp	r3, #2
 800fa1e:	d017      	beq.n	800fa50 <nrf24_setup_protocol+0x54>
 800fa20:	2b02      	cmp	r3, #2
 800fa22:	dc20      	bgt.n	800fa66 <nrf24_setup_protocol+0x6a>
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d002      	beq.n	800fa2e <nrf24_setup_protocol+0x32>
 800fa28:	2b01      	cmp	r3, #1
 800fa2a:	d006      	beq.n	800fa3a <nrf24_setup_protocol+0x3e>
 800fa2c:	e01b      	b.n	800fa66 <nrf24_setup_protocol+0x6a>
    {
    case NRF24_CRCSIZE_DISABLE:
    	conf_reg &= ~NRF24_CONFIG_EN_CRC;
 800fa2e:	7bfb      	ldrb	r3, [r7, #15]
 800fa30:	f023 0308 	bic.w	r3, r3, #8
 800fa34:	b2db      	uxtb	r3, r3
 800fa36:	73fb      	strb	r3, [r7, #15]
    	break;
 800fa38:	e015      	b.n	800fa66 <nrf24_setup_protocol+0x6a>
    case NRF24_CRCSIZE_1BYTE :
    	conf_reg |= NRF24_CONFIG_EN_CRC;
 800fa3a:	7bfb      	ldrb	r3, [r7, #15]
 800fa3c:	f043 0308 	orr.w	r3, r3, #8
 800fa40:	b2db      	uxtb	r3, r3
 800fa42:	73fb      	strb	r3, [r7, #15]
    	conf_reg &= ~NRF24_CONFIG_CRCO;
 800fa44:	7bfb      	ldrb	r3, [r7, #15]
 800fa46:	f023 0304 	bic.w	r3, r3, #4
 800fa4a:	b2db      	uxtb	r3, r3
 800fa4c:	73fb      	strb	r3, [r7, #15]
    	break;
 800fa4e:	e00a      	b.n	800fa66 <nrf24_setup_protocol+0x6a>
    case NRF24_CRCSIZE_2BYTE :
    	conf_reg |= NRF24_CONFIG_EN_CRC;
 800fa50:	7bfb      	ldrb	r3, [r7, #15]
 800fa52:	f043 0308 	orr.w	r3, r3, #8
 800fa56:	b2db      	uxtb	r3, r3
 800fa58:	73fb      	strb	r3, [r7, #15]
    	conf_reg |= NRF24_CONFIG_CRCO;
 800fa5a:	7bfb      	ldrb	r3, [r7, #15]
 800fa5c:	f043 0304 	orr.w	r3, r3, #4
 800fa60:	b2db      	uxtb	r3, r3
 800fa62:	73fb      	strb	r3, [r7, #15]
    	break;
 800fa64:	bf00      	nop
    }
    nrf24_write_register(intf_ptr, NRF24_REGADDR_CONFIG, &conf_reg, 1);
 800fa66:	f107 020f 	add.w	r2, r7, #15
 800fa6a:	2301      	movs	r3, #1
 800fa6c:	2100      	movs	r1, #0
 800fa6e:	6878      	ldr	r0, [r7, #4]
 800fa70:	f7ff fdda 	bl	800f628 <nrf24_write_register>

    uint8_t setup_aw = config->address_width;
 800fa74:	683b      	ldr	r3, [r7, #0]
 800fa76:	785b      	ldrb	r3, [r3, #1]
 800fa78:	73bb      	strb	r3, [r7, #14]
    nrf24_write_register(intf_ptr, NRF24_REGADDR_SETUP_AW, &setup_aw, 1);
 800fa7a:	f107 020e 	add.w	r2, r7, #14
 800fa7e:	2301      	movs	r3, #1
 800fa80:	2103      	movs	r1, #3
 800fa82:	6878      	ldr	r0, [r7, #4]
 800fa84:	f7ff fdd0 	bl	800f628 <nrf24_write_register>

    uint8_t features = 0;
 800fa88:	2300      	movs	r3, #0
 800fa8a:	737b      	strb	r3, [r7, #13]
    if (config->en_ack_payload)
 800fa8c:	683b      	ldr	r3, [r7, #0]
 800fa8e:	78db      	ldrb	r3, [r3, #3]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d004      	beq.n	800fa9e <nrf24_setup_protocol+0xa2>
    {
    	features |= NRF24_FEATURE_EN_ACK_PAY;
 800fa94:	7b7b      	ldrb	r3, [r7, #13]
 800fa96:	f043 0302 	orr.w	r3, r3, #2
 800fa9a:	b2db      	uxtb	r3, r3
 800fa9c:	737b      	strb	r3, [r7, #13]
    }
    if (config->en_dyn_ack)
 800fa9e:	683b      	ldr	r3, [r7, #0]
 800faa0:	791b      	ldrb	r3, [r3, #4]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d004      	beq.n	800fab0 <nrf24_setup_protocol+0xb4>
    {
    	features |= NRF24_FEATURE_EN_DYN_ACK;
 800faa6:	7b7b      	ldrb	r3, [r7, #13]
 800faa8:	f043 0301 	orr.w	r3, r3, #1
 800faac:	b2db      	uxtb	r3, r3
 800faae:	737b      	strb	r3, [r7, #13]
    }
    if (config->en_dyn_payload_size)
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	789b      	ldrb	r3, [r3, #2]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d004      	beq.n	800fac2 <nrf24_setup_protocol+0xc6>
    {
    	features |= NRF24_FEATURE_EN_DPL;
 800fab8:	7b7b      	ldrb	r3, [r7, #13]
 800faba:	f043 0304 	orr.w	r3, r3, #4
 800fabe:	b2db      	uxtb	r3, r3
 800fac0:	737b      	strb	r3, [r7, #13]
    }
    nrf24_write_register(intf_ptr, NRF24_REGADDR_FEATURE, &features, 1);
 800fac2:	f107 020d 	add.w	r2, r7, #13
 800fac6:	2301      	movs	r3, #1
 800fac8:	211d      	movs	r1, #29
 800faca:	6878      	ldr	r0, [r7, #4]
 800facc:	f7ff fdac 	bl	800f628 <nrf24_write_register>

    uint8_t setup_retr = (config->auto_retransmit_delay << 4) | (config->auto_retransmit_count & 0xf);
 800fad0:	683b      	ldr	r3, [r7, #0]
 800fad2:	799b      	ldrb	r3, [r3, #6]
 800fad4:	011b      	lsls	r3, r3, #4
 800fad6:	b25a      	sxtb	r2, r3
 800fad8:	683b      	ldr	r3, [r7, #0]
 800fada:	795b      	ldrb	r3, [r3, #5]
 800fadc:	b25b      	sxtb	r3, r3
 800fade:	f003 030f 	and.w	r3, r3, #15
 800fae2:	b25b      	sxtb	r3, r3
 800fae4:	4313      	orrs	r3, r2
 800fae6:	b25b      	sxtb	r3, r3
 800fae8:	b2db      	uxtb	r3, r3
 800faea:	733b      	strb	r3, [r7, #12]
    nrf24_write_register(intf_ptr, NRF24_REGADDR_SETUP_RETR, &setup_retr, 1);
 800faec:	f107 020c 	add.w	r2, r7, #12
 800faf0:	2301      	movs	r3, #1
 800faf2:	2104      	movs	r1, #4
 800faf4:	6878      	ldr	r0, [r7, #4]
 800faf6:	f7ff fd97 	bl	800f628 <nrf24_write_register>
	return 0;
 800fafa:	2300      	movs	r3, #0
}
 800fafc:	4618      	mov	r0, r3
 800fafe:	3710      	adds	r7, #16
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd80      	pop	{r7, pc}

0800fb04 <nrf24_pipe_rx_start>:


int nrf24_pipe_rx_start(void * intf_ptr, uint8_t pipe_no, const nrf24_pipe_config_t * config)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b086      	sub	sp, #24
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	60f8      	str	r0, [r7, #12]
 800fb0c:	460b      	mov	r3, r1
 800fb0e:	607a      	str	r2, [r7, #4]
 800fb10:	72fb      	strb	r3, [r7, #11]
	uint8_t en_aa = 0 ;
 800fb12:	2300      	movs	r3, #0
 800fb14:	75bb      	strb	r3, [r7, #22]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_EN_AA, &en_aa, 1);
 800fb16:	f107 0216 	add.w	r2, r7, #22
 800fb1a:	2301      	movs	r3, #1
 800fb1c:	2101      	movs	r1, #1
 800fb1e:	68f8      	ldr	r0, [r7, #12]
 800fb20:	f7ff fd53 	bl	800f5ca <nrf24_read_register>
	if (config->enable_auto_ack)
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	781b      	ldrb	r3, [r3, #0]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d00b      	beq.n	800fb44 <nrf24_pipe_rx_start+0x40>
	{
		en_aa |= (1 << pipe_no);
 800fb2c:	7afb      	ldrb	r3, [r7, #11]
 800fb2e:	2201      	movs	r2, #1
 800fb30:	fa02 f303 	lsl.w	r3, r2, r3
 800fb34:	b25a      	sxtb	r2, r3
 800fb36:	7dbb      	ldrb	r3, [r7, #22]
 800fb38:	b25b      	sxtb	r3, r3
 800fb3a:	4313      	orrs	r3, r2
 800fb3c:	b25b      	sxtb	r3, r3
 800fb3e:	b2db      	uxtb	r3, r3
 800fb40:	75bb      	strb	r3, [r7, #22]
 800fb42:	e00c      	b.n	800fb5e <nrf24_pipe_rx_start+0x5a>
	}
	else
	{
		en_aa &= ~(1 << pipe_no);
 800fb44:	7afb      	ldrb	r3, [r7, #11]
 800fb46:	2201      	movs	r2, #1
 800fb48:	fa02 f303 	lsl.w	r3, r2, r3
 800fb4c:	b25b      	sxtb	r3, r3
 800fb4e:	43db      	mvns	r3, r3
 800fb50:	b25a      	sxtb	r2, r3
 800fb52:	7dbb      	ldrb	r3, [r7, #22]
 800fb54:	b25b      	sxtb	r3, r3
 800fb56:	4013      	ands	r3, r2
 800fb58:	b25b      	sxtb	r3, r3
 800fb5a:	b2db      	uxtb	r3, r3
 800fb5c:	75bb      	strb	r3, [r7, #22]
	}
	nrf24_write_register(intf_ptr, NRF24_REGADDR_EN_AA, &en_aa, 1);
 800fb5e:	f107 0216 	add.w	r2, r7, #22
 800fb62:	2301      	movs	r3, #1
 800fb64:	2101      	movs	r1, #1
 800fb66:	68f8      	ldr	r0, [r7, #12]
 800fb68:	f7ff fd5e 	bl	800f628 <nrf24_write_register>

	uint8_t en_rxaddr = 0;
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	757b      	strb	r3, [r7, #21]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_EN_RXADDR, &en_rxaddr, 1);
 800fb70:	f107 0215 	add.w	r2, r7, #21
 800fb74:	2301      	movs	r3, #1
 800fb76:	2102      	movs	r1, #2
 800fb78:	68f8      	ldr	r0, [r7, #12]
 800fb7a:	f7ff fd26 	bl	800f5ca <nrf24_read_register>
	en_rxaddr |= (1 << pipe_no);
 800fb7e:	7afb      	ldrb	r3, [r7, #11]
 800fb80:	2201      	movs	r2, #1
 800fb82:	fa02 f303 	lsl.w	r3, r2, r3
 800fb86:	b25a      	sxtb	r2, r3
 800fb88:	7d7b      	ldrb	r3, [r7, #21]
 800fb8a:	b25b      	sxtb	r3, r3
 800fb8c:	4313      	orrs	r3, r2
 800fb8e:	b25b      	sxtb	r3, r3
 800fb90:	b2db      	uxtb	r3, r3
 800fb92:	757b      	strb	r3, [r7, #21]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_EN_RXADDR, &en_rxaddr, 1);
 800fb94:	f107 0215 	add.w	r2, r7, #21
 800fb98:	2301      	movs	r3, #1
 800fb9a:	2102      	movs	r1, #2
 800fb9c:	68f8      	ldr	r0, [r7, #12]
 800fb9e:	f7ff fd43 	bl	800f628 <nrf24_write_register>

	uint8_t rx_pw = 0;
 800fba2:	2300      	movs	r3, #0
 800fba4:	75fb      	strb	r3, [r7, #23]
	switch (pipe_no)
 800fba6:	7afb      	ldrb	r3, [r7, #11]
 800fba8:	2b05      	cmp	r3, #5
 800fbaa:	d851      	bhi.n	800fc50 <nrf24_pipe_rx_start+0x14c>
 800fbac:	a201      	add	r2, pc, #4	; (adr r2, 800fbb4 <nrf24_pipe_rx_start+0xb0>)
 800fbae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbb2:	bf00      	nop
 800fbb4:	0800fbcd 	.word	0x0800fbcd
 800fbb8:	0800fbe3 	.word	0x0800fbe3
 800fbbc:	0800fbf9 	.word	0x0800fbf9
 800fbc0:	0800fc0f 	.word	0x0800fc0f
 800fbc4:	0800fc25 	.word	0x0800fc25
 800fbc8:	0800fc3b 	.word	0x0800fc3b
	{
	case 0:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P0, (uint8_t *)(&config->address), 5);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f103 0208 	add.w	r2, r3, #8
 800fbd2:	2305      	movs	r3, #5
 800fbd4:	210a      	movs	r1, #10
 800fbd6:	68f8      	ldr	r0, [r7, #12]
 800fbd8:	f7ff fd26 	bl	800f628 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P0;
 800fbdc:	2311      	movs	r3, #17
 800fbde:	75fb      	strb	r3, [r7, #23]
		break;
 800fbe0:	e036      	b.n	800fc50 <nrf24_pipe_rx_start+0x14c>
	case 1:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P1, (uint8_t *)(&config->address), 5);
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	f103 0208 	add.w	r2, r3, #8
 800fbe8:	2305      	movs	r3, #5
 800fbea:	210b      	movs	r1, #11
 800fbec:	68f8      	ldr	r0, [r7, #12]
 800fbee:	f7ff fd1b 	bl	800f628 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P1;
 800fbf2:	2312      	movs	r3, #18
 800fbf4:	75fb      	strb	r3, [r7, #23]
		break;
 800fbf6:	e02b      	b.n	800fc50 <nrf24_pipe_rx_start+0x14c>
	case 2:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P2, ((uint8_t *)(&config->address) + 4), 1);
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	3308      	adds	r3, #8
 800fbfc:	1d1a      	adds	r2, r3, #4
 800fbfe:	2301      	movs	r3, #1
 800fc00:	210c      	movs	r1, #12
 800fc02:	68f8      	ldr	r0, [r7, #12]
 800fc04:	f7ff fd10 	bl	800f628 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P2;
 800fc08:	2313      	movs	r3, #19
 800fc0a:	75fb      	strb	r3, [r7, #23]
		break;
 800fc0c:	e020      	b.n	800fc50 <nrf24_pipe_rx_start+0x14c>
	case 3:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P3, ((uint8_t *)(&config->address) + 4), 1);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	3308      	adds	r3, #8
 800fc12:	1d1a      	adds	r2, r3, #4
 800fc14:	2301      	movs	r3, #1
 800fc16:	210d      	movs	r1, #13
 800fc18:	68f8      	ldr	r0, [r7, #12]
 800fc1a:	f7ff fd05 	bl	800f628 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P3;
 800fc1e:	2314      	movs	r3, #20
 800fc20:	75fb      	strb	r3, [r7, #23]
		break;
 800fc22:	e015      	b.n	800fc50 <nrf24_pipe_rx_start+0x14c>
	case 4:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P4, ((uint8_t *)(&config->address) + 4), 1);
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	3308      	adds	r3, #8
 800fc28:	1d1a      	adds	r2, r3, #4
 800fc2a:	2301      	movs	r3, #1
 800fc2c:	210e      	movs	r1, #14
 800fc2e:	68f8      	ldr	r0, [r7, #12]
 800fc30:	f7ff fcfa 	bl	800f628 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P4;
 800fc34:	2315      	movs	r3, #21
 800fc36:	75fb      	strb	r3, [r7, #23]
		break;
 800fc38:	e00a      	b.n	800fc50 <nrf24_pipe_rx_start+0x14c>
	case 5:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P5, ((uint8_t *)(&config->address) + 4), 1);
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	3308      	adds	r3, #8
 800fc3e:	1d1a      	adds	r2, r3, #4
 800fc40:	2301      	movs	r3, #1
 800fc42:	210f      	movs	r1, #15
 800fc44:	68f8      	ldr	r0, [r7, #12]
 800fc46:	f7ff fcef 	bl	800f628 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P5;
 800fc4a:	2316      	movs	r3, #22
 800fc4c:	75fb      	strb	r3, [r7, #23]
		break;
 800fc4e:	bf00      	nop
	}

	uint8_t dynpd = 0;
 800fc50:	2300      	movs	r3, #0
 800fc52:	753b      	strb	r3, [r7, #20]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_DYNPD, &dynpd, 1);
 800fc54:	f107 0214 	add.w	r2, r7, #20
 800fc58:	2301      	movs	r3, #1
 800fc5a:	211c      	movs	r1, #28
 800fc5c:	68f8      	ldr	r0, [r7, #12]
 800fc5e:	f7ff fcb4 	bl	800f5ca <nrf24_read_register>
	if (config->payload_size >= 0)
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	db15      	blt.n	800fc98 <nrf24_pipe_rx_start+0x194>
	{
		nrf24_write_register(intf_ptr, rx_pw, (uint8_t *)(&config->payload_size), 1);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f103 0210 	add.w	r2, r3, #16
 800fc72:	7df9      	ldrb	r1, [r7, #23]
 800fc74:	2301      	movs	r3, #1
 800fc76:	68f8      	ldr	r0, [r7, #12]
 800fc78:	f7ff fcd6 	bl	800f628 <nrf24_write_register>
		dynpd &= ~(1 << pipe_no);
 800fc7c:	7afb      	ldrb	r3, [r7, #11]
 800fc7e:	2201      	movs	r2, #1
 800fc80:	fa02 f303 	lsl.w	r3, r2, r3
 800fc84:	b25b      	sxtb	r3, r3
 800fc86:	43db      	mvns	r3, r3
 800fc88:	b25a      	sxtb	r2, r3
 800fc8a:	7d3b      	ldrb	r3, [r7, #20]
 800fc8c:	b25b      	sxtb	r3, r3
 800fc8e:	4013      	ands	r3, r2
 800fc90:	b25b      	sxtb	r3, r3
 800fc92:	b2db      	uxtb	r3, r3
 800fc94:	753b      	strb	r3, [r7, #20]
 800fc96:	e013      	b.n	800fcc0 <nrf24_pipe_rx_start+0x1bc>
	}
	else
	{
		uint8_t pld_size = 32; // Нужно записать не 0, чтобы пайп в целом работал
 800fc98:	2320      	movs	r3, #32
 800fc9a:	74fb      	strb	r3, [r7, #19]
		nrf24_write_register(intf_ptr, rx_pw, &pld_size, 1);
 800fc9c:	f107 0213 	add.w	r2, r7, #19
 800fca0:	7df9      	ldrb	r1, [r7, #23]
 800fca2:	2301      	movs	r3, #1
 800fca4:	68f8      	ldr	r0, [r7, #12]
 800fca6:	f7ff fcbf 	bl	800f628 <nrf24_write_register>
		dynpd |= (1 << pipe_no);
 800fcaa:	7afb      	ldrb	r3, [r7, #11]
 800fcac:	2201      	movs	r2, #1
 800fcae:	fa02 f303 	lsl.w	r3, r2, r3
 800fcb2:	b25a      	sxtb	r2, r3
 800fcb4:	7d3b      	ldrb	r3, [r7, #20]
 800fcb6:	b25b      	sxtb	r3, r3
 800fcb8:	4313      	orrs	r3, r2
 800fcba:	b25b      	sxtb	r3, r3
 800fcbc:	b2db      	uxtb	r3, r3
 800fcbe:	753b      	strb	r3, [r7, #20]
	}
	nrf24_write_register(intf_ptr, NRF24_REGADDR_DYNPD, &dynpd, 1);
 800fcc0:	f107 0214 	add.w	r2, r7, #20
 800fcc4:	2301      	movs	r3, #1
 800fcc6:	211c      	movs	r1, #28
 800fcc8:	68f8      	ldr	r0, [r7, #12]
 800fcca:	f7ff fcad 	bl	800f628 <nrf24_write_register>

	return 0;
 800fcce:	2300      	movs	r3, #0
}
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	3718      	adds	r7, #24
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bd80      	pop	{r7, pc}

0800fcd8 <nrf24_pipe_set_tx_addr>:
	return 0;
}


int nrf24_pipe_set_tx_addr(void * intf_ptr, uint64_t tx_addr)
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b084      	sub	sp, #16
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	60f8      	str	r0, [r7, #12]
 800fce0:	e9c7 2300 	strd	r2, r3, [r7]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_TX_ADDR, (uint8_t *)(&tx_addr), 5);
 800fce4:	463a      	mov	r2, r7
 800fce6:	2305      	movs	r3, #5
 800fce8:	2110      	movs	r1, #16
 800fcea:	68f8      	ldr	r0, [r7, #12]
 800fcec:	f7ff fc9c 	bl	800f628 <nrf24_write_register>
	return 0;
 800fcf0:	2300      	movs	r3, #0
}
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	3710      	adds	r7, #16
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	bd80      	pop	{r7, pc}

0800fcfa <nrf24_mode_power_down>:


int nrf24_mode_power_down(void * intf_ptr)
{
 800fcfa:	b580      	push	{r7, lr}
 800fcfc:	b084      	sub	sp, #16
 800fcfe:	af00      	add	r7, sp, #0
 800fd00:	6078      	str	r0, [r7, #4]
	uint8_t config_reg = 0;
 800fd02:	2300      	movs	r3, #0
 800fd04:	73fb      	strb	r3, [r7, #15]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_CONFIG, &config_reg, 1);
 800fd06:	f107 020f 	add.w	r2, r7, #15
 800fd0a:	2301      	movs	r3, #1
 800fd0c:	2100      	movs	r1, #0
 800fd0e:	6878      	ldr	r0, [r7, #4]
 800fd10:	f7ff fc5b 	bl	800f5ca <nrf24_read_register>
	config_reg &= ~NRF24_CONFIG_PWR_UP;
 800fd14:	7bfb      	ldrb	r3, [r7, #15]
 800fd16:	f023 0302 	bic.w	r3, r3, #2
 800fd1a:	b2db      	uxtb	r3, r3
 800fd1c:	73fb      	strb	r3, [r7, #15]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_CONFIG, &config_reg, 1);
 800fd1e:	f107 020f 	add.w	r2, r7, #15
 800fd22:	2301      	movs	r3, #1
 800fd24:	2100      	movs	r1, #0
 800fd26:	6878      	ldr	r0, [r7, #4]
 800fd28:	f7ff fc7e 	bl	800f628 <nrf24_write_register>
	return 0;
 800fd2c:	2300      	movs	r3, #0
}
 800fd2e:	4618      	mov	r0, r3
 800fd30:	3710      	adds	r7, #16
 800fd32:	46bd      	mov	sp, r7
 800fd34:	bd80      	pop	{r7, pc}

0800fd36 <nrf24_mode_standby>:


int nrf24_mode_standby(void * intf_ptr)
{
 800fd36:	b580      	push	{r7, lr}
 800fd38:	b084      	sub	sp, #16
 800fd3a:	af00      	add	r7, sp, #0
 800fd3c:	6078      	str	r0, [r7, #4]
	uint8_t config_reg = 0;
 800fd3e:	2300      	movs	r3, #0
 800fd40:	73fb      	strb	r3, [r7, #15]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_CONFIG, &config_reg, 1);
 800fd42:	f107 020f 	add.w	r2, r7, #15
 800fd46:	2301      	movs	r3, #1
 800fd48:	2100      	movs	r1, #0
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	f7ff fc3d 	bl	800f5ca <nrf24_read_register>
	config_reg |= NRF24_CONFIG_PWR_UP;
 800fd50:	7bfb      	ldrb	r3, [r7, #15]
 800fd52:	f043 0302 	orr.w	r3, r3, #2
 800fd56:	b2db      	uxtb	r3, r3
 800fd58:	73fb      	strb	r3, [r7, #15]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_CONFIG, &config_reg, 1);
 800fd5a:	f107 020f 	add.w	r2, r7, #15
 800fd5e:	2301      	movs	r3, #1
 800fd60:	2100      	movs	r1, #0
 800fd62:	6878      	ldr	r0, [r7, #4]
 800fd64:	f7ff fc60 	bl	800f628 <nrf24_write_register>
	nrf24_ce_activate(intf_ptr, false);
 800fd68:	2100      	movs	r1, #0
 800fd6a:	6878      	ldr	r0, [r7, #4]
 800fd6c:	f7ff fd92 	bl	800f894 <nrf24_ce_activate>
	return 0;
 800fd70:	2300      	movs	r3, #0
}
 800fd72:	4618      	mov	r0, r3
 800fd74:	3710      	adds	r7, #16
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}

0800fd7a <nrf24_mode_tx>:


int nrf24_mode_tx(void * intf_ptr)
{
 800fd7a:	b580      	push	{r7, lr}
 800fd7c:	b084      	sub	sp, #16
 800fd7e:	af00      	add	r7, sp, #0
 800fd80:	6078      	str	r0, [r7, #4]
	uint8_t mode_tx = 0;
 800fd82:	2300      	movs	r3, #0
 800fd84:	73fb      	strb	r3, [r7, #15]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_CONFIG, &mode_tx, 1);
 800fd86:	f107 020f 	add.w	r2, r7, #15
 800fd8a:	2301      	movs	r3, #1
 800fd8c:	2100      	movs	r1, #0
 800fd8e:	6878      	ldr	r0, [r7, #4]
 800fd90:	f7ff fc1b 	bl	800f5ca <nrf24_read_register>
	mode_tx &= ~NRF24_CONFIG_PRIM_RX;
 800fd94:	7bfb      	ldrb	r3, [r7, #15]
 800fd96:	f023 0301 	bic.w	r3, r3, #1
 800fd9a:	b2db      	uxtb	r3, r3
 800fd9c:	73fb      	strb	r3, [r7, #15]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_CONFIG, &mode_tx, 1);
 800fd9e:	f107 020f 	add.w	r2, r7, #15
 800fda2:	2301      	movs	r3, #1
 800fda4:	2100      	movs	r1, #0
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	f7ff fc3e 	bl	800f628 <nrf24_write_register>
	nrf24_ce_activate(intf_ptr, true);
 800fdac:	2101      	movs	r1, #1
 800fdae:	6878      	ldr	r0, [r7, #4]
 800fdb0:	f7ff fd70 	bl	800f894 <nrf24_ce_activate>
	return 0;
 800fdb4:	2300      	movs	r3, #0
}
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	3710      	adds	r7, #16
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}

0800fdbe <nrf24_fifo_status>:
	return 0;
}


int nrf24_fifo_status(void * intf_ptr, nrf24_fifo_status_t * rx_status, nrf24_fifo_status_t * tx_status)
{
 800fdbe:	b580      	push	{r7, lr}
 800fdc0:	b086      	sub	sp, #24
 800fdc2:	af00      	add	r7, sp, #0
 800fdc4:	60f8      	str	r0, [r7, #12]
 800fdc6:	60b9      	str	r1, [r7, #8]
 800fdc8:	607a      	str	r2, [r7, #4]
	uint8_t fifo_satus = 0;
 800fdca:	2300      	movs	r3, #0
 800fdcc:	75fb      	strb	r3, [r7, #23]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_FIFO_STATUS, &fifo_satus, 1);
 800fdce:	f107 0217 	add.w	r2, r7, #23
 800fdd2:	2301      	movs	r3, #1
 800fdd4:	2117      	movs	r1, #23
 800fdd6:	68f8      	ldr	r0, [r7, #12]
 800fdd8:	f7ff fbf7 	bl	800f5ca <nrf24_read_register>

	*rx_status = NRF24_FIFO_NOT_EMPTY;
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	2201      	movs	r2, #1
 800fde0:	701a      	strb	r2, [r3, #0]
	if (((fifo_satus >> NRF24_FIFO_STATUS_RX_EMPTY_OFFSET) & NRF24_FIFO_STATUS_RX_EMPTY_MASK) == 1)
 800fde2:	7dfb      	ldrb	r3, [r7, #23]
 800fde4:	f003 0301 	and.w	r3, r3, #1
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d002      	beq.n	800fdf2 <nrf24_fifo_status+0x34>
	{
		*rx_status = NRF24_FIFO_EMPTY;
 800fdec:	68bb      	ldr	r3, [r7, #8]
 800fdee:	2200      	movs	r2, #0
 800fdf0:	701a      	strb	r2, [r3, #0]
	}
	if (((fifo_satus >> NRF24_FIFO_STATUS_RX_FULL_OFFSET) & NRF24_FIFO_STATUS_RX_FULL_MASK) == 1)
 800fdf2:	7dfb      	ldrb	r3, [r7, #23]
 800fdf4:	085b      	lsrs	r3, r3, #1
 800fdf6:	b2db      	uxtb	r3, r3
 800fdf8:	f003 0301 	and.w	r3, r3, #1
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d002      	beq.n	800fe06 <nrf24_fifo_status+0x48>
	{
		*rx_status = NRF24_FIFO_FULL;
 800fe00:	68bb      	ldr	r3, [r7, #8]
 800fe02:	2202      	movs	r2, #2
 800fe04:	701a      	strb	r2, [r3, #0]
	}

	*tx_status = NRF24_FIFO_NOT_EMPTY;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	2201      	movs	r2, #1
 800fe0a:	701a      	strb	r2, [r3, #0]
	if (((fifo_satus >> NRF24_FIFO_STATUS_TX_EMPTY_OFFSET) & NRF24_FIFO_STATUS_TX_EMPTY_MASK) == 1)
 800fe0c:	7dfb      	ldrb	r3, [r7, #23]
 800fe0e:	091b      	lsrs	r3, r3, #4
 800fe10:	b2db      	uxtb	r3, r3
 800fe12:	f003 0301 	and.w	r3, r3, #1
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d002      	beq.n	800fe20 <nrf24_fifo_status+0x62>
	{
		*tx_status = NRF24_FIFO_EMPTY;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	701a      	strb	r2, [r3, #0]
	}
	if (((fifo_satus >> NRF24_FIFO_STATUS_TX_FULL_OFFSET) & NRF24_FIFO_STATUS_TX_FULL_MASK) == 1)
 800fe20:	7dfb      	ldrb	r3, [r7, #23]
 800fe22:	095b      	lsrs	r3, r3, #5
 800fe24:	b2db      	uxtb	r3, r3
 800fe26:	f003 0301 	and.w	r3, r3, #1
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d002      	beq.n	800fe34 <nrf24_fifo_status+0x76>
	{
		*tx_status = NRF24_FIFO_FULL;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	2202      	movs	r2, #2
 800fe32:	701a      	strb	r2, [r3, #0]
	}
	return 0;
 800fe34:	2300      	movs	r3, #0
}
 800fe36:	4618      	mov	r0, r3
 800fe38:	3718      	adds	r7, #24
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	bd80      	pop	{r7, pc}

0800fe3e <nrf24_fifo_read>:


int nrf24_fifo_read(void * intf_ptr, uint8_t * packet_buffer, uint8_t packet_buffer_size)
{
 800fe3e:	b580      	push	{r7, lr}
 800fe40:	b086      	sub	sp, #24
 800fe42:	af00      	add	r7, sp, #0
 800fe44:	60f8      	str	r0, [r7, #12]
 800fe46:	60b9      	str	r1, [r7, #8]
 800fe48:	4613      	mov	r3, r2
 800fe4a:	71fb      	strb	r3, [r7, #7]
	uint8_t payload_size = 0;
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	75fb      	strb	r3, [r7, #23]
	nrf24_get_rx_payload_size(intf_ptr, &payload_size);
 800fe50:	f107 0317 	add.w	r3, r7, #23
 800fe54:	4619      	mov	r1, r3
 800fe56:	68f8      	ldr	r0, [r7, #12]
 800fe58:	f7ff fcc9 	bl	800f7ee <nrf24_get_rx_payload_size>
	if (payload_size > 0)
 800fe5c:	7dfb      	ldrb	r3, [r7, #23]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d005      	beq.n	800fe6e <nrf24_fifo_read+0x30>
	{
		nrf24_read_rx_payload(intf_ptr, packet_buffer, packet_buffer_size);
 800fe62:	79fb      	ldrb	r3, [r7, #7]
 800fe64:	461a      	mov	r2, r3
 800fe66:	68b9      	ldr	r1, [r7, #8]
 800fe68:	68f8      	ldr	r0, [r7, #12]
 800fe6a:	f7ff fc11 	bl	800f690 <nrf24_read_rx_payload>
	}
	return payload_size;
 800fe6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe70:	4618      	mov	r0, r3
 800fe72:	3718      	adds	r7, #24
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}

0800fe78 <nrf24_fifo_write>:


int nrf24_fifo_write(void * intf_ptr, const uint8_t * packet, uint8_t packet_size, bool use_ack)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b084      	sub	sp, #16
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	60f8      	str	r0, [r7, #12]
 800fe80:	60b9      	str	r1, [r7, #8]
 800fe82:	4611      	mov	r1, r2
 800fe84:	461a      	mov	r2, r3
 800fe86:	460b      	mov	r3, r1
 800fe88:	71fb      	strb	r3, [r7, #7]
 800fe8a:	4613      	mov	r3, r2
 800fe8c:	71bb      	strb	r3, [r7, #6]
	if (packet_size == 0)
 800fe8e:	79fb      	ldrb	r3, [r7, #7]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d101      	bne.n	800fe98 <nrf24_fifo_write+0x20>
	{
		return 0;
 800fe94:	2300      	movs	r3, #0
 800fe96:	e011      	b.n	800febc <nrf24_fifo_write+0x44>
	}
	if (packet_size <= 32)
 800fe98:	79fb      	ldrb	r3, [r7, #7]
 800fe9a:	2b20      	cmp	r3, #32
 800fe9c:	d807      	bhi.n	800feae <nrf24_fifo_write+0x36>
	{
		nrf24_write_tx_payload(intf_ptr, packet,  packet_size,  use_ack);
 800fe9e:	79fa      	ldrb	r2, [r7, #7]
 800fea0:	79bb      	ldrb	r3, [r7, #6]
 800fea2:	68b9      	ldr	r1, [r7, #8]
 800fea4:	68f8      	ldr	r0, [r7, #12]
 800fea6:	f7ff fc33 	bl	800f710 <nrf24_write_tx_payload>
		return packet_size;
 800feaa:	79fb      	ldrb	r3, [r7, #7]
 800feac:	e006      	b.n	800febc <nrf24_fifo_write+0x44>
	}
	else
	{
		nrf24_write_tx_payload(intf_ptr, packet,  32,  use_ack);
 800feae:	79bb      	ldrb	r3, [r7, #6]
 800feb0:	2220      	movs	r2, #32
 800feb2:	68b9      	ldr	r1, [r7, #8]
 800feb4:	68f8      	ldr	r0, [r7, #12]
 800feb6:	f7ff fc2b 	bl	800f710 <nrf24_write_tx_payload>
		return 32;
 800feba:	2320      	movs	r3, #32
	}
}
 800febc:	4618      	mov	r0, r3
 800febe:	3710      	adds	r7, #16
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}

0800fec4 <nrf24_fifo_flush_tx>:
	}
}


int nrf24_fifo_flush_tx(void * intf_ptr)
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b082      	sub	sp, #8
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
	nrf24_flush_tx(intf_ptr);
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	f7ff fc6f 	bl	800f7b0 <nrf24_flush_tx>
	return 0;
 800fed2:	2300      	movs	r3, #0
}
 800fed4:	4618      	mov	r0, r3
 800fed6:	3708      	adds	r7, #8
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd80      	pop	{r7, pc}

0800fedc <nrf24_fifo_flush_rx>:


int nrf24_fifo_flush_rx(void * intf_ptr)
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b082      	sub	sp, #8
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
	nrf24_flush_rx(intf_ptr);
 800fee4:	6878      	ldr	r0, [r7, #4]
 800fee6:	f7ff fc44 	bl	800f772 <nrf24_flush_rx>
	return 0;
 800feea:	2300      	movs	r3, #0
}
 800feec:	4618      	mov	r0, r3
 800feee:	3708      	adds	r7, #8
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}

0800fef4 <nrf24_irq_get>:
	return 0;
}


int nrf24_irq_get(void * intf_ptr, int * composition)
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b084      	sub	sp, #16
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
 800fefc:	6039      	str	r1, [r7, #0]
	uint8_t status_reg = 0;
 800fefe:	2300      	movs	r3, #0
 800ff00:	73fb      	strb	r3, [r7, #15]
	nrf24_get_status(intf_ptr, &status_reg);
 800ff02:	f107 030f 	add.w	r3, r7, #15
 800ff06:	4619      	mov	r1, r3
 800ff08:	6878      	ldr	r0, [r7, #4]
 800ff0a:	f7ff fca1 	bl	800f850 <nrf24_get_status>
	*composition = (status_reg >> NRF24_STATUS_FLAG_OFFSET) & NRF24_STATUS_FLAG_MASK;
 800ff0e:	7bfb      	ldrb	r3, [r7, #15]
 800ff10:	091b      	lsrs	r3, r3, #4
 800ff12:	b2db      	uxtb	r3, r3
 800ff14:	f003 0207 	and.w	r2, r3, #7
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	601a      	str	r2, [r3, #0]
	return 0;
 800ff1c:	2300      	movs	r3, #0
}
 800ff1e:	4618      	mov	r0, r3
 800ff20:	3710      	adds	r7, #16
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bd80      	pop	{r7, pc}

0800ff26 <nrf24_irq_clear>:


int nrf24_irq_clear(void * intf_ptr, int composition)
{
 800ff26:	b580      	push	{r7, lr}
 800ff28:	b084      	sub	sp, #16
 800ff2a:	af00      	add	r7, sp, #0
 800ff2c:	6078      	str	r0, [r7, #4]
 800ff2e:	6039      	str	r1, [r7, #0]
	uint8_t status_reg = (composition & NRF24_STATUS_FLAG_MASK) << NRF24_STATUS_FLAG_OFFSET;
 800ff30:	683b      	ldr	r3, [r7, #0]
 800ff32:	011b      	lsls	r3, r3, #4
 800ff34:	b2db      	uxtb	r3, r3
 800ff36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ff3a:	b2db      	uxtb	r3, r3
 800ff3c:	73fb      	strb	r3, [r7, #15]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_STATUS, &status_reg, 1);
 800ff3e:	f107 020f 	add.w	r2, r7, #15
 800ff42:	2301      	movs	r3, #1
 800ff44:	2107      	movs	r1, #7
 800ff46:	6878      	ldr	r0, [r7, #4]
 800ff48:	f7ff fb6e 	bl	800f628 <nrf24_write_register>
	return 0;
 800ff4c:	2300      	movs	r3, #0
}
 800ff4e:	4618      	mov	r0, r3
 800ff50:	3710      	adds	r7, #16
 800ff52:	46bd      	mov	sp, r7
 800ff54:	bd80      	pop	{r7, pc}
	...

0800ff58 <__assert_func>:
 800ff58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ff5a:	4614      	mov	r4, r2
 800ff5c:	461a      	mov	r2, r3
 800ff5e:	4b09      	ldr	r3, [pc, #36]	; (800ff84 <__assert_func+0x2c>)
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	4605      	mov	r5, r0
 800ff64:	68d8      	ldr	r0, [r3, #12]
 800ff66:	b14c      	cbz	r4, 800ff7c <__assert_func+0x24>
 800ff68:	4b07      	ldr	r3, [pc, #28]	; (800ff88 <__assert_func+0x30>)
 800ff6a:	9100      	str	r1, [sp, #0]
 800ff6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ff70:	4906      	ldr	r1, [pc, #24]	; (800ff8c <__assert_func+0x34>)
 800ff72:	462b      	mov	r3, r5
 800ff74:	f000 f814 	bl	800ffa0 <fiprintf>
 800ff78:	f001 ffcc 	bl	8011f14 <abort>
 800ff7c:	4b04      	ldr	r3, [pc, #16]	; (800ff90 <__assert_func+0x38>)
 800ff7e:	461c      	mov	r4, r3
 800ff80:	e7f3      	b.n	800ff6a <__assert_func+0x12>
 800ff82:	bf00      	nop
 800ff84:	20000058 	.word	0x20000058
 800ff88:	08016484 	.word	0x08016484
 800ff8c:	08016491 	.word	0x08016491
 800ff90:	080164bf 	.word	0x080164bf

0800ff94 <__errno>:
 800ff94:	4b01      	ldr	r3, [pc, #4]	; (800ff9c <__errno+0x8>)
 800ff96:	6818      	ldr	r0, [r3, #0]
 800ff98:	4770      	bx	lr
 800ff9a:	bf00      	nop
 800ff9c:	20000058 	.word	0x20000058

0800ffa0 <fiprintf>:
 800ffa0:	b40e      	push	{r1, r2, r3}
 800ffa2:	b503      	push	{r0, r1, lr}
 800ffa4:	4601      	mov	r1, r0
 800ffa6:	ab03      	add	r3, sp, #12
 800ffa8:	4805      	ldr	r0, [pc, #20]	; (800ffc0 <fiprintf+0x20>)
 800ffaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffae:	6800      	ldr	r0, [r0, #0]
 800ffb0:	9301      	str	r3, [sp, #4]
 800ffb2:	f000 f86b 	bl	801008c <_vfiprintf_r>
 800ffb6:	b002      	add	sp, #8
 800ffb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ffbc:	b003      	add	sp, #12
 800ffbe:	4770      	bx	lr
 800ffc0:	20000058 	.word	0x20000058

0800ffc4 <__libc_init_array>:
 800ffc4:	b570      	push	{r4, r5, r6, lr}
 800ffc6:	4d0d      	ldr	r5, [pc, #52]	; (800fffc <__libc_init_array+0x38>)
 800ffc8:	4c0d      	ldr	r4, [pc, #52]	; (8010000 <__libc_init_array+0x3c>)
 800ffca:	1b64      	subs	r4, r4, r5
 800ffcc:	10a4      	asrs	r4, r4, #2
 800ffce:	2600      	movs	r6, #0
 800ffd0:	42a6      	cmp	r6, r4
 800ffd2:	d109      	bne.n	800ffe8 <__libc_init_array+0x24>
 800ffd4:	4d0b      	ldr	r5, [pc, #44]	; (8010004 <__libc_init_array+0x40>)
 800ffd6:	4c0c      	ldr	r4, [pc, #48]	; (8010008 <__libc_init_array+0x44>)
 800ffd8:	f005 ffc0 	bl	8015f5c <_init>
 800ffdc:	1b64      	subs	r4, r4, r5
 800ffde:	10a4      	asrs	r4, r4, #2
 800ffe0:	2600      	movs	r6, #0
 800ffe2:	42a6      	cmp	r6, r4
 800ffe4:	d105      	bne.n	800fff2 <__libc_init_array+0x2e>
 800ffe6:	bd70      	pop	{r4, r5, r6, pc}
 800ffe8:	f855 3b04 	ldr.w	r3, [r5], #4
 800ffec:	4798      	blx	r3
 800ffee:	3601      	adds	r6, #1
 800fff0:	e7ee      	b.n	800ffd0 <__libc_init_array+0xc>
 800fff2:	f855 3b04 	ldr.w	r3, [r5], #4
 800fff6:	4798      	blx	r3
 800fff8:	3601      	adds	r6, #1
 800fffa:	e7f2      	b.n	800ffe2 <__libc_init_array+0x1e>
 800fffc:	080169b8 	.word	0x080169b8
 8010000:	080169b8 	.word	0x080169b8
 8010004:	080169b8 	.word	0x080169b8
 8010008:	080169bc 	.word	0x080169bc

0801000c <memcpy>:
 801000c:	440a      	add	r2, r1
 801000e:	4291      	cmp	r1, r2
 8010010:	f100 33ff 	add.w	r3, r0, #4294967295
 8010014:	d100      	bne.n	8010018 <memcpy+0xc>
 8010016:	4770      	bx	lr
 8010018:	b510      	push	{r4, lr}
 801001a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801001e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010022:	4291      	cmp	r1, r2
 8010024:	d1f9      	bne.n	801001a <memcpy+0xe>
 8010026:	bd10      	pop	{r4, pc}

08010028 <memset>:
 8010028:	4402      	add	r2, r0
 801002a:	4603      	mov	r3, r0
 801002c:	4293      	cmp	r3, r2
 801002e:	d100      	bne.n	8010032 <memset+0xa>
 8010030:	4770      	bx	lr
 8010032:	f803 1b01 	strb.w	r1, [r3], #1
 8010036:	e7f9      	b.n	801002c <memset+0x4>

08010038 <__sfputc_r>:
 8010038:	6893      	ldr	r3, [r2, #8]
 801003a:	3b01      	subs	r3, #1
 801003c:	2b00      	cmp	r3, #0
 801003e:	b410      	push	{r4}
 8010040:	6093      	str	r3, [r2, #8]
 8010042:	da08      	bge.n	8010056 <__sfputc_r+0x1e>
 8010044:	6994      	ldr	r4, [r2, #24]
 8010046:	42a3      	cmp	r3, r4
 8010048:	db01      	blt.n	801004e <__sfputc_r+0x16>
 801004a:	290a      	cmp	r1, #10
 801004c:	d103      	bne.n	8010056 <__sfputc_r+0x1e>
 801004e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010052:	f001 be9f 	b.w	8011d94 <__swbuf_r>
 8010056:	6813      	ldr	r3, [r2, #0]
 8010058:	1c58      	adds	r0, r3, #1
 801005a:	6010      	str	r0, [r2, #0]
 801005c:	7019      	strb	r1, [r3, #0]
 801005e:	4608      	mov	r0, r1
 8010060:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010064:	4770      	bx	lr

08010066 <__sfputs_r>:
 8010066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010068:	4606      	mov	r6, r0
 801006a:	460f      	mov	r7, r1
 801006c:	4614      	mov	r4, r2
 801006e:	18d5      	adds	r5, r2, r3
 8010070:	42ac      	cmp	r4, r5
 8010072:	d101      	bne.n	8010078 <__sfputs_r+0x12>
 8010074:	2000      	movs	r0, #0
 8010076:	e007      	b.n	8010088 <__sfputs_r+0x22>
 8010078:	f814 1b01 	ldrb.w	r1, [r4], #1
 801007c:	463a      	mov	r2, r7
 801007e:	4630      	mov	r0, r6
 8010080:	f7ff ffda 	bl	8010038 <__sfputc_r>
 8010084:	1c43      	adds	r3, r0, #1
 8010086:	d1f3      	bne.n	8010070 <__sfputs_r+0xa>
 8010088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801008c <_vfiprintf_r>:
 801008c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010090:	460d      	mov	r5, r1
 8010092:	b09d      	sub	sp, #116	; 0x74
 8010094:	4614      	mov	r4, r2
 8010096:	4698      	mov	r8, r3
 8010098:	4606      	mov	r6, r0
 801009a:	b118      	cbz	r0, 80100a4 <_vfiprintf_r+0x18>
 801009c:	6983      	ldr	r3, [r0, #24]
 801009e:	b90b      	cbnz	r3, 80100a4 <_vfiprintf_r+0x18>
 80100a0:	f002 fed0 	bl	8012e44 <__sinit>
 80100a4:	4b89      	ldr	r3, [pc, #548]	; (80102cc <_vfiprintf_r+0x240>)
 80100a6:	429d      	cmp	r5, r3
 80100a8:	d11b      	bne.n	80100e2 <_vfiprintf_r+0x56>
 80100aa:	6875      	ldr	r5, [r6, #4]
 80100ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80100ae:	07d9      	lsls	r1, r3, #31
 80100b0:	d405      	bmi.n	80100be <_vfiprintf_r+0x32>
 80100b2:	89ab      	ldrh	r3, [r5, #12]
 80100b4:	059a      	lsls	r2, r3, #22
 80100b6:	d402      	bmi.n	80100be <_vfiprintf_r+0x32>
 80100b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80100ba:	f003 fad4 	bl	8013666 <__retarget_lock_acquire_recursive>
 80100be:	89ab      	ldrh	r3, [r5, #12]
 80100c0:	071b      	lsls	r3, r3, #28
 80100c2:	d501      	bpl.n	80100c8 <_vfiprintf_r+0x3c>
 80100c4:	692b      	ldr	r3, [r5, #16]
 80100c6:	b9eb      	cbnz	r3, 8010104 <_vfiprintf_r+0x78>
 80100c8:	4629      	mov	r1, r5
 80100ca:	4630      	mov	r0, r6
 80100cc:	f001 feb4 	bl	8011e38 <__swsetup_r>
 80100d0:	b1c0      	cbz	r0, 8010104 <_vfiprintf_r+0x78>
 80100d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80100d4:	07dc      	lsls	r4, r3, #31
 80100d6:	d50e      	bpl.n	80100f6 <_vfiprintf_r+0x6a>
 80100d8:	f04f 30ff 	mov.w	r0, #4294967295
 80100dc:	b01d      	add	sp, #116	; 0x74
 80100de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100e2:	4b7b      	ldr	r3, [pc, #492]	; (80102d0 <_vfiprintf_r+0x244>)
 80100e4:	429d      	cmp	r5, r3
 80100e6:	d101      	bne.n	80100ec <_vfiprintf_r+0x60>
 80100e8:	68b5      	ldr	r5, [r6, #8]
 80100ea:	e7df      	b.n	80100ac <_vfiprintf_r+0x20>
 80100ec:	4b79      	ldr	r3, [pc, #484]	; (80102d4 <_vfiprintf_r+0x248>)
 80100ee:	429d      	cmp	r5, r3
 80100f0:	bf08      	it	eq
 80100f2:	68f5      	ldreq	r5, [r6, #12]
 80100f4:	e7da      	b.n	80100ac <_vfiprintf_r+0x20>
 80100f6:	89ab      	ldrh	r3, [r5, #12]
 80100f8:	0598      	lsls	r0, r3, #22
 80100fa:	d4ed      	bmi.n	80100d8 <_vfiprintf_r+0x4c>
 80100fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80100fe:	f003 fab3 	bl	8013668 <__retarget_lock_release_recursive>
 8010102:	e7e9      	b.n	80100d8 <_vfiprintf_r+0x4c>
 8010104:	2300      	movs	r3, #0
 8010106:	9309      	str	r3, [sp, #36]	; 0x24
 8010108:	2320      	movs	r3, #32
 801010a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801010e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010112:	2330      	movs	r3, #48	; 0x30
 8010114:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80102d8 <_vfiprintf_r+0x24c>
 8010118:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801011c:	f04f 0901 	mov.w	r9, #1
 8010120:	4623      	mov	r3, r4
 8010122:	469a      	mov	sl, r3
 8010124:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010128:	b10a      	cbz	r2, 801012e <_vfiprintf_r+0xa2>
 801012a:	2a25      	cmp	r2, #37	; 0x25
 801012c:	d1f9      	bne.n	8010122 <_vfiprintf_r+0x96>
 801012e:	ebba 0b04 	subs.w	fp, sl, r4
 8010132:	d00b      	beq.n	801014c <_vfiprintf_r+0xc0>
 8010134:	465b      	mov	r3, fp
 8010136:	4622      	mov	r2, r4
 8010138:	4629      	mov	r1, r5
 801013a:	4630      	mov	r0, r6
 801013c:	f7ff ff93 	bl	8010066 <__sfputs_r>
 8010140:	3001      	adds	r0, #1
 8010142:	f000 80aa 	beq.w	801029a <_vfiprintf_r+0x20e>
 8010146:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010148:	445a      	add	r2, fp
 801014a:	9209      	str	r2, [sp, #36]	; 0x24
 801014c:	f89a 3000 	ldrb.w	r3, [sl]
 8010150:	2b00      	cmp	r3, #0
 8010152:	f000 80a2 	beq.w	801029a <_vfiprintf_r+0x20e>
 8010156:	2300      	movs	r3, #0
 8010158:	f04f 32ff 	mov.w	r2, #4294967295
 801015c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010160:	f10a 0a01 	add.w	sl, sl, #1
 8010164:	9304      	str	r3, [sp, #16]
 8010166:	9307      	str	r3, [sp, #28]
 8010168:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801016c:	931a      	str	r3, [sp, #104]	; 0x68
 801016e:	4654      	mov	r4, sl
 8010170:	2205      	movs	r2, #5
 8010172:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010176:	4858      	ldr	r0, [pc, #352]	; (80102d8 <_vfiprintf_r+0x24c>)
 8010178:	f7f0 f83a 	bl	80001f0 <memchr>
 801017c:	9a04      	ldr	r2, [sp, #16]
 801017e:	b9d8      	cbnz	r0, 80101b8 <_vfiprintf_r+0x12c>
 8010180:	06d1      	lsls	r1, r2, #27
 8010182:	bf44      	itt	mi
 8010184:	2320      	movmi	r3, #32
 8010186:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801018a:	0713      	lsls	r3, r2, #28
 801018c:	bf44      	itt	mi
 801018e:	232b      	movmi	r3, #43	; 0x2b
 8010190:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010194:	f89a 3000 	ldrb.w	r3, [sl]
 8010198:	2b2a      	cmp	r3, #42	; 0x2a
 801019a:	d015      	beq.n	80101c8 <_vfiprintf_r+0x13c>
 801019c:	9a07      	ldr	r2, [sp, #28]
 801019e:	4654      	mov	r4, sl
 80101a0:	2000      	movs	r0, #0
 80101a2:	f04f 0c0a 	mov.w	ip, #10
 80101a6:	4621      	mov	r1, r4
 80101a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101ac:	3b30      	subs	r3, #48	; 0x30
 80101ae:	2b09      	cmp	r3, #9
 80101b0:	d94e      	bls.n	8010250 <_vfiprintf_r+0x1c4>
 80101b2:	b1b0      	cbz	r0, 80101e2 <_vfiprintf_r+0x156>
 80101b4:	9207      	str	r2, [sp, #28]
 80101b6:	e014      	b.n	80101e2 <_vfiprintf_r+0x156>
 80101b8:	eba0 0308 	sub.w	r3, r0, r8
 80101bc:	fa09 f303 	lsl.w	r3, r9, r3
 80101c0:	4313      	orrs	r3, r2
 80101c2:	9304      	str	r3, [sp, #16]
 80101c4:	46a2      	mov	sl, r4
 80101c6:	e7d2      	b.n	801016e <_vfiprintf_r+0xe2>
 80101c8:	9b03      	ldr	r3, [sp, #12]
 80101ca:	1d19      	adds	r1, r3, #4
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	9103      	str	r1, [sp, #12]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	bfbb      	ittet	lt
 80101d4:	425b      	neglt	r3, r3
 80101d6:	f042 0202 	orrlt.w	r2, r2, #2
 80101da:	9307      	strge	r3, [sp, #28]
 80101dc:	9307      	strlt	r3, [sp, #28]
 80101de:	bfb8      	it	lt
 80101e0:	9204      	strlt	r2, [sp, #16]
 80101e2:	7823      	ldrb	r3, [r4, #0]
 80101e4:	2b2e      	cmp	r3, #46	; 0x2e
 80101e6:	d10c      	bne.n	8010202 <_vfiprintf_r+0x176>
 80101e8:	7863      	ldrb	r3, [r4, #1]
 80101ea:	2b2a      	cmp	r3, #42	; 0x2a
 80101ec:	d135      	bne.n	801025a <_vfiprintf_r+0x1ce>
 80101ee:	9b03      	ldr	r3, [sp, #12]
 80101f0:	1d1a      	adds	r2, r3, #4
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	9203      	str	r2, [sp, #12]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	bfb8      	it	lt
 80101fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80101fe:	3402      	adds	r4, #2
 8010200:	9305      	str	r3, [sp, #20]
 8010202:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80102e8 <_vfiprintf_r+0x25c>
 8010206:	7821      	ldrb	r1, [r4, #0]
 8010208:	2203      	movs	r2, #3
 801020a:	4650      	mov	r0, sl
 801020c:	f7ef fff0 	bl	80001f0 <memchr>
 8010210:	b140      	cbz	r0, 8010224 <_vfiprintf_r+0x198>
 8010212:	2340      	movs	r3, #64	; 0x40
 8010214:	eba0 000a 	sub.w	r0, r0, sl
 8010218:	fa03 f000 	lsl.w	r0, r3, r0
 801021c:	9b04      	ldr	r3, [sp, #16]
 801021e:	4303      	orrs	r3, r0
 8010220:	3401      	adds	r4, #1
 8010222:	9304      	str	r3, [sp, #16]
 8010224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010228:	482c      	ldr	r0, [pc, #176]	; (80102dc <_vfiprintf_r+0x250>)
 801022a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801022e:	2206      	movs	r2, #6
 8010230:	f7ef ffde 	bl	80001f0 <memchr>
 8010234:	2800      	cmp	r0, #0
 8010236:	d03f      	beq.n	80102b8 <_vfiprintf_r+0x22c>
 8010238:	4b29      	ldr	r3, [pc, #164]	; (80102e0 <_vfiprintf_r+0x254>)
 801023a:	bb1b      	cbnz	r3, 8010284 <_vfiprintf_r+0x1f8>
 801023c:	9b03      	ldr	r3, [sp, #12]
 801023e:	3307      	adds	r3, #7
 8010240:	f023 0307 	bic.w	r3, r3, #7
 8010244:	3308      	adds	r3, #8
 8010246:	9303      	str	r3, [sp, #12]
 8010248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801024a:	443b      	add	r3, r7
 801024c:	9309      	str	r3, [sp, #36]	; 0x24
 801024e:	e767      	b.n	8010120 <_vfiprintf_r+0x94>
 8010250:	fb0c 3202 	mla	r2, ip, r2, r3
 8010254:	460c      	mov	r4, r1
 8010256:	2001      	movs	r0, #1
 8010258:	e7a5      	b.n	80101a6 <_vfiprintf_r+0x11a>
 801025a:	2300      	movs	r3, #0
 801025c:	3401      	adds	r4, #1
 801025e:	9305      	str	r3, [sp, #20]
 8010260:	4619      	mov	r1, r3
 8010262:	f04f 0c0a 	mov.w	ip, #10
 8010266:	4620      	mov	r0, r4
 8010268:	f810 2b01 	ldrb.w	r2, [r0], #1
 801026c:	3a30      	subs	r2, #48	; 0x30
 801026e:	2a09      	cmp	r2, #9
 8010270:	d903      	bls.n	801027a <_vfiprintf_r+0x1ee>
 8010272:	2b00      	cmp	r3, #0
 8010274:	d0c5      	beq.n	8010202 <_vfiprintf_r+0x176>
 8010276:	9105      	str	r1, [sp, #20]
 8010278:	e7c3      	b.n	8010202 <_vfiprintf_r+0x176>
 801027a:	fb0c 2101 	mla	r1, ip, r1, r2
 801027e:	4604      	mov	r4, r0
 8010280:	2301      	movs	r3, #1
 8010282:	e7f0      	b.n	8010266 <_vfiprintf_r+0x1da>
 8010284:	ab03      	add	r3, sp, #12
 8010286:	9300      	str	r3, [sp, #0]
 8010288:	462a      	mov	r2, r5
 801028a:	4b16      	ldr	r3, [pc, #88]	; (80102e4 <_vfiprintf_r+0x258>)
 801028c:	a904      	add	r1, sp, #16
 801028e:	4630      	mov	r0, r6
 8010290:	f000 f8cc 	bl	801042c <_printf_float>
 8010294:	4607      	mov	r7, r0
 8010296:	1c78      	adds	r0, r7, #1
 8010298:	d1d6      	bne.n	8010248 <_vfiprintf_r+0x1bc>
 801029a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801029c:	07d9      	lsls	r1, r3, #31
 801029e:	d405      	bmi.n	80102ac <_vfiprintf_r+0x220>
 80102a0:	89ab      	ldrh	r3, [r5, #12]
 80102a2:	059a      	lsls	r2, r3, #22
 80102a4:	d402      	bmi.n	80102ac <_vfiprintf_r+0x220>
 80102a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80102a8:	f003 f9de 	bl	8013668 <__retarget_lock_release_recursive>
 80102ac:	89ab      	ldrh	r3, [r5, #12]
 80102ae:	065b      	lsls	r3, r3, #25
 80102b0:	f53f af12 	bmi.w	80100d8 <_vfiprintf_r+0x4c>
 80102b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80102b6:	e711      	b.n	80100dc <_vfiprintf_r+0x50>
 80102b8:	ab03      	add	r3, sp, #12
 80102ba:	9300      	str	r3, [sp, #0]
 80102bc:	462a      	mov	r2, r5
 80102be:	4b09      	ldr	r3, [pc, #36]	; (80102e4 <_vfiprintf_r+0x258>)
 80102c0:	a904      	add	r1, sp, #16
 80102c2:	4630      	mov	r0, r6
 80102c4:	f000 fb56 	bl	8010974 <_printf_i>
 80102c8:	e7e4      	b.n	8010294 <_vfiprintf_r+0x208>
 80102ca:	bf00      	nop
 80102cc:	0801671c 	.word	0x0801671c
 80102d0:	0801673c 	.word	0x0801673c
 80102d4:	080166fc 	.word	0x080166fc
 80102d8:	080165c8 	.word	0x080165c8
 80102dc:	080165d2 	.word	0x080165d2
 80102e0:	0801042d 	.word	0x0801042d
 80102e4:	08010067 	.word	0x08010067
 80102e8:	080165ce 	.word	0x080165ce

080102ec <__cvt>:
 80102ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80102f0:	ec55 4b10 	vmov	r4, r5, d0
 80102f4:	2d00      	cmp	r5, #0
 80102f6:	460e      	mov	r6, r1
 80102f8:	4619      	mov	r1, r3
 80102fa:	462b      	mov	r3, r5
 80102fc:	bfbb      	ittet	lt
 80102fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010302:	461d      	movlt	r5, r3
 8010304:	2300      	movge	r3, #0
 8010306:	232d      	movlt	r3, #45	; 0x2d
 8010308:	700b      	strb	r3, [r1, #0]
 801030a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801030c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010310:	4691      	mov	r9, r2
 8010312:	f023 0820 	bic.w	r8, r3, #32
 8010316:	bfbc      	itt	lt
 8010318:	4622      	movlt	r2, r4
 801031a:	4614      	movlt	r4, r2
 801031c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010320:	d005      	beq.n	801032e <__cvt+0x42>
 8010322:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010326:	d100      	bne.n	801032a <__cvt+0x3e>
 8010328:	3601      	adds	r6, #1
 801032a:	2102      	movs	r1, #2
 801032c:	e000      	b.n	8010330 <__cvt+0x44>
 801032e:	2103      	movs	r1, #3
 8010330:	ab03      	add	r3, sp, #12
 8010332:	9301      	str	r3, [sp, #4]
 8010334:	ab02      	add	r3, sp, #8
 8010336:	9300      	str	r3, [sp, #0]
 8010338:	ec45 4b10 	vmov	d0, r4, r5
 801033c:	4653      	mov	r3, sl
 801033e:	4632      	mov	r2, r6
 8010340:	f001 fe7a 	bl	8012038 <_dtoa_r>
 8010344:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010348:	4607      	mov	r7, r0
 801034a:	d102      	bne.n	8010352 <__cvt+0x66>
 801034c:	f019 0f01 	tst.w	r9, #1
 8010350:	d022      	beq.n	8010398 <__cvt+0xac>
 8010352:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010356:	eb07 0906 	add.w	r9, r7, r6
 801035a:	d110      	bne.n	801037e <__cvt+0x92>
 801035c:	783b      	ldrb	r3, [r7, #0]
 801035e:	2b30      	cmp	r3, #48	; 0x30
 8010360:	d10a      	bne.n	8010378 <__cvt+0x8c>
 8010362:	2200      	movs	r2, #0
 8010364:	2300      	movs	r3, #0
 8010366:	4620      	mov	r0, r4
 8010368:	4629      	mov	r1, r5
 801036a:	f7f0 fbb5 	bl	8000ad8 <__aeabi_dcmpeq>
 801036e:	b918      	cbnz	r0, 8010378 <__cvt+0x8c>
 8010370:	f1c6 0601 	rsb	r6, r6, #1
 8010374:	f8ca 6000 	str.w	r6, [sl]
 8010378:	f8da 3000 	ldr.w	r3, [sl]
 801037c:	4499      	add	r9, r3
 801037e:	2200      	movs	r2, #0
 8010380:	2300      	movs	r3, #0
 8010382:	4620      	mov	r0, r4
 8010384:	4629      	mov	r1, r5
 8010386:	f7f0 fba7 	bl	8000ad8 <__aeabi_dcmpeq>
 801038a:	b108      	cbz	r0, 8010390 <__cvt+0xa4>
 801038c:	f8cd 900c 	str.w	r9, [sp, #12]
 8010390:	2230      	movs	r2, #48	; 0x30
 8010392:	9b03      	ldr	r3, [sp, #12]
 8010394:	454b      	cmp	r3, r9
 8010396:	d307      	bcc.n	80103a8 <__cvt+0xbc>
 8010398:	9b03      	ldr	r3, [sp, #12]
 801039a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801039c:	1bdb      	subs	r3, r3, r7
 801039e:	4638      	mov	r0, r7
 80103a0:	6013      	str	r3, [r2, #0]
 80103a2:	b004      	add	sp, #16
 80103a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103a8:	1c59      	adds	r1, r3, #1
 80103aa:	9103      	str	r1, [sp, #12]
 80103ac:	701a      	strb	r2, [r3, #0]
 80103ae:	e7f0      	b.n	8010392 <__cvt+0xa6>

080103b0 <__exponent>:
 80103b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80103b2:	4603      	mov	r3, r0
 80103b4:	2900      	cmp	r1, #0
 80103b6:	bfb8      	it	lt
 80103b8:	4249      	neglt	r1, r1
 80103ba:	f803 2b02 	strb.w	r2, [r3], #2
 80103be:	bfb4      	ite	lt
 80103c0:	222d      	movlt	r2, #45	; 0x2d
 80103c2:	222b      	movge	r2, #43	; 0x2b
 80103c4:	2909      	cmp	r1, #9
 80103c6:	7042      	strb	r2, [r0, #1]
 80103c8:	dd2a      	ble.n	8010420 <__exponent+0x70>
 80103ca:	f10d 0407 	add.w	r4, sp, #7
 80103ce:	46a4      	mov	ip, r4
 80103d0:	270a      	movs	r7, #10
 80103d2:	46a6      	mov	lr, r4
 80103d4:	460a      	mov	r2, r1
 80103d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80103da:	fb07 1516 	mls	r5, r7, r6, r1
 80103de:	3530      	adds	r5, #48	; 0x30
 80103e0:	2a63      	cmp	r2, #99	; 0x63
 80103e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80103e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80103ea:	4631      	mov	r1, r6
 80103ec:	dcf1      	bgt.n	80103d2 <__exponent+0x22>
 80103ee:	3130      	adds	r1, #48	; 0x30
 80103f0:	f1ae 0502 	sub.w	r5, lr, #2
 80103f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80103f8:	1c44      	adds	r4, r0, #1
 80103fa:	4629      	mov	r1, r5
 80103fc:	4561      	cmp	r1, ip
 80103fe:	d30a      	bcc.n	8010416 <__exponent+0x66>
 8010400:	f10d 0209 	add.w	r2, sp, #9
 8010404:	eba2 020e 	sub.w	r2, r2, lr
 8010408:	4565      	cmp	r5, ip
 801040a:	bf88      	it	hi
 801040c:	2200      	movhi	r2, #0
 801040e:	4413      	add	r3, r2
 8010410:	1a18      	subs	r0, r3, r0
 8010412:	b003      	add	sp, #12
 8010414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010416:	f811 2b01 	ldrb.w	r2, [r1], #1
 801041a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801041e:	e7ed      	b.n	80103fc <__exponent+0x4c>
 8010420:	2330      	movs	r3, #48	; 0x30
 8010422:	3130      	adds	r1, #48	; 0x30
 8010424:	7083      	strb	r3, [r0, #2]
 8010426:	70c1      	strb	r1, [r0, #3]
 8010428:	1d03      	adds	r3, r0, #4
 801042a:	e7f1      	b.n	8010410 <__exponent+0x60>

0801042c <_printf_float>:
 801042c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010430:	ed2d 8b02 	vpush	{d8}
 8010434:	b08d      	sub	sp, #52	; 0x34
 8010436:	460c      	mov	r4, r1
 8010438:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801043c:	4616      	mov	r6, r2
 801043e:	461f      	mov	r7, r3
 8010440:	4605      	mov	r5, r0
 8010442:	f003 f90b 	bl	801365c <_localeconv_r>
 8010446:	f8d0 a000 	ldr.w	sl, [r0]
 801044a:	4650      	mov	r0, sl
 801044c:	f7ef fec8 	bl	80001e0 <strlen>
 8010450:	2300      	movs	r3, #0
 8010452:	930a      	str	r3, [sp, #40]	; 0x28
 8010454:	6823      	ldr	r3, [r4, #0]
 8010456:	9305      	str	r3, [sp, #20]
 8010458:	f8d8 3000 	ldr.w	r3, [r8]
 801045c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010460:	3307      	adds	r3, #7
 8010462:	f023 0307 	bic.w	r3, r3, #7
 8010466:	f103 0208 	add.w	r2, r3, #8
 801046a:	f8c8 2000 	str.w	r2, [r8]
 801046e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010472:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010476:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801047a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801047e:	9307      	str	r3, [sp, #28]
 8010480:	f8cd 8018 	str.w	r8, [sp, #24]
 8010484:	ee08 0a10 	vmov	s16, r0
 8010488:	4b9f      	ldr	r3, [pc, #636]	; (8010708 <_printf_float+0x2dc>)
 801048a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801048e:	f04f 32ff 	mov.w	r2, #4294967295
 8010492:	f7f0 fb53 	bl	8000b3c <__aeabi_dcmpun>
 8010496:	bb88      	cbnz	r0, 80104fc <_printf_float+0xd0>
 8010498:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801049c:	4b9a      	ldr	r3, [pc, #616]	; (8010708 <_printf_float+0x2dc>)
 801049e:	f04f 32ff 	mov.w	r2, #4294967295
 80104a2:	f7f0 fb2d 	bl	8000b00 <__aeabi_dcmple>
 80104a6:	bb48      	cbnz	r0, 80104fc <_printf_float+0xd0>
 80104a8:	2200      	movs	r2, #0
 80104aa:	2300      	movs	r3, #0
 80104ac:	4640      	mov	r0, r8
 80104ae:	4649      	mov	r1, r9
 80104b0:	f7f0 fb1c 	bl	8000aec <__aeabi_dcmplt>
 80104b4:	b110      	cbz	r0, 80104bc <_printf_float+0x90>
 80104b6:	232d      	movs	r3, #45	; 0x2d
 80104b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80104bc:	4b93      	ldr	r3, [pc, #588]	; (801070c <_printf_float+0x2e0>)
 80104be:	4894      	ldr	r0, [pc, #592]	; (8010710 <_printf_float+0x2e4>)
 80104c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80104c4:	bf94      	ite	ls
 80104c6:	4698      	movls	r8, r3
 80104c8:	4680      	movhi	r8, r0
 80104ca:	2303      	movs	r3, #3
 80104cc:	6123      	str	r3, [r4, #16]
 80104ce:	9b05      	ldr	r3, [sp, #20]
 80104d0:	f023 0204 	bic.w	r2, r3, #4
 80104d4:	6022      	str	r2, [r4, #0]
 80104d6:	f04f 0900 	mov.w	r9, #0
 80104da:	9700      	str	r7, [sp, #0]
 80104dc:	4633      	mov	r3, r6
 80104de:	aa0b      	add	r2, sp, #44	; 0x2c
 80104e0:	4621      	mov	r1, r4
 80104e2:	4628      	mov	r0, r5
 80104e4:	f000 f9d8 	bl	8010898 <_printf_common>
 80104e8:	3001      	adds	r0, #1
 80104ea:	f040 8090 	bne.w	801060e <_printf_float+0x1e2>
 80104ee:	f04f 30ff 	mov.w	r0, #4294967295
 80104f2:	b00d      	add	sp, #52	; 0x34
 80104f4:	ecbd 8b02 	vpop	{d8}
 80104f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104fc:	4642      	mov	r2, r8
 80104fe:	464b      	mov	r3, r9
 8010500:	4640      	mov	r0, r8
 8010502:	4649      	mov	r1, r9
 8010504:	f7f0 fb1a 	bl	8000b3c <__aeabi_dcmpun>
 8010508:	b140      	cbz	r0, 801051c <_printf_float+0xf0>
 801050a:	464b      	mov	r3, r9
 801050c:	2b00      	cmp	r3, #0
 801050e:	bfbc      	itt	lt
 8010510:	232d      	movlt	r3, #45	; 0x2d
 8010512:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010516:	487f      	ldr	r0, [pc, #508]	; (8010714 <_printf_float+0x2e8>)
 8010518:	4b7f      	ldr	r3, [pc, #508]	; (8010718 <_printf_float+0x2ec>)
 801051a:	e7d1      	b.n	80104c0 <_printf_float+0x94>
 801051c:	6863      	ldr	r3, [r4, #4]
 801051e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010522:	9206      	str	r2, [sp, #24]
 8010524:	1c5a      	adds	r2, r3, #1
 8010526:	d13f      	bne.n	80105a8 <_printf_float+0x17c>
 8010528:	2306      	movs	r3, #6
 801052a:	6063      	str	r3, [r4, #4]
 801052c:	9b05      	ldr	r3, [sp, #20]
 801052e:	6861      	ldr	r1, [r4, #4]
 8010530:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010534:	2300      	movs	r3, #0
 8010536:	9303      	str	r3, [sp, #12]
 8010538:	ab0a      	add	r3, sp, #40	; 0x28
 801053a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801053e:	ab09      	add	r3, sp, #36	; 0x24
 8010540:	ec49 8b10 	vmov	d0, r8, r9
 8010544:	9300      	str	r3, [sp, #0]
 8010546:	6022      	str	r2, [r4, #0]
 8010548:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801054c:	4628      	mov	r0, r5
 801054e:	f7ff fecd 	bl	80102ec <__cvt>
 8010552:	9b06      	ldr	r3, [sp, #24]
 8010554:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010556:	2b47      	cmp	r3, #71	; 0x47
 8010558:	4680      	mov	r8, r0
 801055a:	d108      	bne.n	801056e <_printf_float+0x142>
 801055c:	1cc8      	adds	r0, r1, #3
 801055e:	db02      	blt.n	8010566 <_printf_float+0x13a>
 8010560:	6863      	ldr	r3, [r4, #4]
 8010562:	4299      	cmp	r1, r3
 8010564:	dd41      	ble.n	80105ea <_printf_float+0x1be>
 8010566:	f1ab 0b02 	sub.w	fp, fp, #2
 801056a:	fa5f fb8b 	uxtb.w	fp, fp
 801056e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010572:	d820      	bhi.n	80105b6 <_printf_float+0x18a>
 8010574:	3901      	subs	r1, #1
 8010576:	465a      	mov	r2, fp
 8010578:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801057c:	9109      	str	r1, [sp, #36]	; 0x24
 801057e:	f7ff ff17 	bl	80103b0 <__exponent>
 8010582:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010584:	1813      	adds	r3, r2, r0
 8010586:	2a01      	cmp	r2, #1
 8010588:	4681      	mov	r9, r0
 801058a:	6123      	str	r3, [r4, #16]
 801058c:	dc02      	bgt.n	8010594 <_printf_float+0x168>
 801058e:	6822      	ldr	r2, [r4, #0]
 8010590:	07d2      	lsls	r2, r2, #31
 8010592:	d501      	bpl.n	8010598 <_printf_float+0x16c>
 8010594:	3301      	adds	r3, #1
 8010596:	6123      	str	r3, [r4, #16]
 8010598:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801059c:	2b00      	cmp	r3, #0
 801059e:	d09c      	beq.n	80104da <_printf_float+0xae>
 80105a0:	232d      	movs	r3, #45	; 0x2d
 80105a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80105a6:	e798      	b.n	80104da <_printf_float+0xae>
 80105a8:	9a06      	ldr	r2, [sp, #24]
 80105aa:	2a47      	cmp	r2, #71	; 0x47
 80105ac:	d1be      	bne.n	801052c <_printf_float+0x100>
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d1bc      	bne.n	801052c <_printf_float+0x100>
 80105b2:	2301      	movs	r3, #1
 80105b4:	e7b9      	b.n	801052a <_printf_float+0xfe>
 80105b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80105ba:	d118      	bne.n	80105ee <_printf_float+0x1c2>
 80105bc:	2900      	cmp	r1, #0
 80105be:	6863      	ldr	r3, [r4, #4]
 80105c0:	dd0b      	ble.n	80105da <_printf_float+0x1ae>
 80105c2:	6121      	str	r1, [r4, #16]
 80105c4:	b913      	cbnz	r3, 80105cc <_printf_float+0x1a0>
 80105c6:	6822      	ldr	r2, [r4, #0]
 80105c8:	07d0      	lsls	r0, r2, #31
 80105ca:	d502      	bpl.n	80105d2 <_printf_float+0x1a6>
 80105cc:	3301      	adds	r3, #1
 80105ce:	440b      	add	r3, r1
 80105d0:	6123      	str	r3, [r4, #16]
 80105d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80105d4:	f04f 0900 	mov.w	r9, #0
 80105d8:	e7de      	b.n	8010598 <_printf_float+0x16c>
 80105da:	b913      	cbnz	r3, 80105e2 <_printf_float+0x1b6>
 80105dc:	6822      	ldr	r2, [r4, #0]
 80105de:	07d2      	lsls	r2, r2, #31
 80105e0:	d501      	bpl.n	80105e6 <_printf_float+0x1ba>
 80105e2:	3302      	adds	r3, #2
 80105e4:	e7f4      	b.n	80105d0 <_printf_float+0x1a4>
 80105e6:	2301      	movs	r3, #1
 80105e8:	e7f2      	b.n	80105d0 <_printf_float+0x1a4>
 80105ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80105ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105f0:	4299      	cmp	r1, r3
 80105f2:	db05      	blt.n	8010600 <_printf_float+0x1d4>
 80105f4:	6823      	ldr	r3, [r4, #0]
 80105f6:	6121      	str	r1, [r4, #16]
 80105f8:	07d8      	lsls	r0, r3, #31
 80105fa:	d5ea      	bpl.n	80105d2 <_printf_float+0x1a6>
 80105fc:	1c4b      	adds	r3, r1, #1
 80105fe:	e7e7      	b.n	80105d0 <_printf_float+0x1a4>
 8010600:	2900      	cmp	r1, #0
 8010602:	bfd4      	ite	le
 8010604:	f1c1 0202 	rsble	r2, r1, #2
 8010608:	2201      	movgt	r2, #1
 801060a:	4413      	add	r3, r2
 801060c:	e7e0      	b.n	80105d0 <_printf_float+0x1a4>
 801060e:	6823      	ldr	r3, [r4, #0]
 8010610:	055a      	lsls	r2, r3, #21
 8010612:	d407      	bmi.n	8010624 <_printf_float+0x1f8>
 8010614:	6923      	ldr	r3, [r4, #16]
 8010616:	4642      	mov	r2, r8
 8010618:	4631      	mov	r1, r6
 801061a:	4628      	mov	r0, r5
 801061c:	47b8      	blx	r7
 801061e:	3001      	adds	r0, #1
 8010620:	d12c      	bne.n	801067c <_printf_float+0x250>
 8010622:	e764      	b.n	80104ee <_printf_float+0xc2>
 8010624:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010628:	f240 80e0 	bls.w	80107ec <_printf_float+0x3c0>
 801062c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010630:	2200      	movs	r2, #0
 8010632:	2300      	movs	r3, #0
 8010634:	f7f0 fa50 	bl	8000ad8 <__aeabi_dcmpeq>
 8010638:	2800      	cmp	r0, #0
 801063a:	d034      	beq.n	80106a6 <_printf_float+0x27a>
 801063c:	4a37      	ldr	r2, [pc, #220]	; (801071c <_printf_float+0x2f0>)
 801063e:	2301      	movs	r3, #1
 8010640:	4631      	mov	r1, r6
 8010642:	4628      	mov	r0, r5
 8010644:	47b8      	blx	r7
 8010646:	3001      	adds	r0, #1
 8010648:	f43f af51 	beq.w	80104ee <_printf_float+0xc2>
 801064c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010650:	429a      	cmp	r2, r3
 8010652:	db02      	blt.n	801065a <_printf_float+0x22e>
 8010654:	6823      	ldr	r3, [r4, #0]
 8010656:	07d8      	lsls	r0, r3, #31
 8010658:	d510      	bpl.n	801067c <_printf_float+0x250>
 801065a:	ee18 3a10 	vmov	r3, s16
 801065e:	4652      	mov	r2, sl
 8010660:	4631      	mov	r1, r6
 8010662:	4628      	mov	r0, r5
 8010664:	47b8      	blx	r7
 8010666:	3001      	adds	r0, #1
 8010668:	f43f af41 	beq.w	80104ee <_printf_float+0xc2>
 801066c:	f04f 0800 	mov.w	r8, #0
 8010670:	f104 091a 	add.w	r9, r4, #26
 8010674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010676:	3b01      	subs	r3, #1
 8010678:	4543      	cmp	r3, r8
 801067a:	dc09      	bgt.n	8010690 <_printf_float+0x264>
 801067c:	6823      	ldr	r3, [r4, #0]
 801067e:	079b      	lsls	r3, r3, #30
 8010680:	f100 8105 	bmi.w	801088e <_printf_float+0x462>
 8010684:	68e0      	ldr	r0, [r4, #12]
 8010686:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010688:	4298      	cmp	r0, r3
 801068a:	bfb8      	it	lt
 801068c:	4618      	movlt	r0, r3
 801068e:	e730      	b.n	80104f2 <_printf_float+0xc6>
 8010690:	2301      	movs	r3, #1
 8010692:	464a      	mov	r2, r9
 8010694:	4631      	mov	r1, r6
 8010696:	4628      	mov	r0, r5
 8010698:	47b8      	blx	r7
 801069a:	3001      	adds	r0, #1
 801069c:	f43f af27 	beq.w	80104ee <_printf_float+0xc2>
 80106a0:	f108 0801 	add.w	r8, r8, #1
 80106a4:	e7e6      	b.n	8010674 <_printf_float+0x248>
 80106a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	dc39      	bgt.n	8010720 <_printf_float+0x2f4>
 80106ac:	4a1b      	ldr	r2, [pc, #108]	; (801071c <_printf_float+0x2f0>)
 80106ae:	2301      	movs	r3, #1
 80106b0:	4631      	mov	r1, r6
 80106b2:	4628      	mov	r0, r5
 80106b4:	47b8      	blx	r7
 80106b6:	3001      	adds	r0, #1
 80106b8:	f43f af19 	beq.w	80104ee <_printf_float+0xc2>
 80106bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80106c0:	4313      	orrs	r3, r2
 80106c2:	d102      	bne.n	80106ca <_printf_float+0x29e>
 80106c4:	6823      	ldr	r3, [r4, #0]
 80106c6:	07d9      	lsls	r1, r3, #31
 80106c8:	d5d8      	bpl.n	801067c <_printf_float+0x250>
 80106ca:	ee18 3a10 	vmov	r3, s16
 80106ce:	4652      	mov	r2, sl
 80106d0:	4631      	mov	r1, r6
 80106d2:	4628      	mov	r0, r5
 80106d4:	47b8      	blx	r7
 80106d6:	3001      	adds	r0, #1
 80106d8:	f43f af09 	beq.w	80104ee <_printf_float+0xc2>
 80106dc:	f04f 0900 	mov.w	r9, #0
 80106e0:	f104 0a1a 	add.w	sl, r4, #26
 80106e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106e6:	425b      	negs	r3, r3
 80106e8:	454b      	cmp	r3, r9
 80106ea:	dc01      	bgt.n	80106f0 <_printf_float+0x2c4>
 80106ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106ee:	e792      	b.n	8010616 <_printf_float+0x1ea>
 80106f0:	2301      	movs	r3, #1
 80106f2:	4652      	mov	r2, sl
 80106f4:	4631      	mov	r1, r6
 80106f6:	4628      	mov	r0, r5
 80106f8:	47b8      	blx	r7
 80106fa:	3001      	adds	r0, #1
 80106fc:	f43f aef7 	beq.w	80104ee <_printf_float+0xc2>
 8010700:	f109 0901 	add.w	r9, r9, #1
 8010704:	e7ee      	b.n	80106e4 <_printf_float+0x2b8>
 8010706:	bf00      	nop
 8010708:	7fefffff 	.word	0x7fefffff
 801070c:	080165d9 	.word	0x080165d9
 8010710:	080165dd 	.word	0x080165dd
 8010714:	080165e5 	.word	0x080165e5
 8010718:	080165e1 	.word	0x080165e1
 801071c:	080165e9 	.word	0x080165e9
 8010720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010722:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010724:	429a      	cmp	r2, r3
 8010726:	bfa8      	it	ge
 8010728:	461a      	movge	r2, r3
 801072a:	2a00      	cmp	r2, #0
 801072c:	4691      	mov	r9, r2
 801072e:	dc37      	bgt.n	80107a0 <_printf_float+0x374>
 8010730:	f04f 0b00 	mov.w	fp, #0
 8010734:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010738:	f104 021a 	add.w	r2, r4, #26
 801073c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801073e:	9305      	str	r3, [sp, #20]
 8010740:	eba3 0309 	sub.w	r3, r3, r9
 8010744:	455b      	cmp	r3, fp
 8010746:	dc33      	bgt.n	80107b0 <_printf_float+0x384>
 8010748:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801074c:	429a      	cmp	r2, r3
 801074e:	db3b      	blt.n	80107c8 <_printf_float+0x39c>
 8010750:	6823      	ldr	r3, [r4, #0]
 8010752:	07da      	lsls	r2, r3, #31
 8010754:	d438      	bmi.n	80107c8 <_printf_float+0x39c>
 8010756:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010758:	9b05      	ldr	r3, [sp, #20]
 801075a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801075c:	1ad3      	subs	r3, r2, r3
 801075e:	eba2 0901 	sub.w	r9, r2, r1
 8010762:	4599      	cmp	r9, r3
 8010764:	bfa8      	it	ge
 8010766:	4699      	movge	r9, r3
 8010768:	f1b9 0f00 	cmp.w	r9, #0
 801076c:	dc35      	bgt.n	80107da <_printf_float+0x3ae>
 801076e:	f04f 0800 	mov.w	r8, #0
 8010772:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010776:	f104 0a1a 	add.w	sl, r4, #26
 801077a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801077e:	1a9b      	subs	r3, r3, r2
 8010780:	eba3 0309 	sub.w	r3, r3, r9
 8010784:	4543      	cmp	r3, r8
 8010786:	f77f af79 	ble.w	801067c <_printf_float+0x250>
 801078a:	2301      	movs	r3, #1
 801078c:	4652      	mov	r2, sl
 801078e:	4631      	mov	r1, r6
 8010790:	4628      	mov	r0, r5
 8010792:	47b8      	blx	r7
 8010794:	3001      	adds	r0, #1
 8010796:	f43f aeaa 	beq.w	80104ee <_printf_float+0xc2>
 801079a:	f108 0801 	add.w	r8, r8, #1
 801079e:	e7ec      	b.n	801077a <_printf_float+0x34e>
 80107a0:	4613      	mov	r3, r2
 80107a2:	4631      	mov	r1, r6
 80107a4:	4642      	mov	r2, r8
 80107a6:	4628      	mov	r0, r5
 80107a8:	47b8      	blx	r7
 80107aa:	3001      	adds	r0, #1
 80107ac:	d1c0      	bne.n	8010730 <_printf_float+0x304>
 80107ae:	e69e      	b.n	80104ee <_printf_float+0xc2>
 80107b0:	2301      	movs	r3, #1
 80107b2:	4631      	mov	r1, r6
 80107b4:	4628      	mov	r0, r5
 80107b6:	9205      	str	r2, [sp, #20]
 80107b8:	47b8      	blx	r7
 80107ba:	3001      	adds	r0, #1
 80107bc:	f43f ae97 	beq.w	80104ee <_printf_float+0xc2>
 80107c0:	9a05      	ldr	r2, [sp, #20]
 80107c2:	f10b 0b01 	add.w	fp, fp, #1
 80107c6:	e7b9      	b.n	801073c <_printf_float+0x310>
 80107c8:	ee18 3a10 	vmov	r3, s16
 80107cc:	4652      	mov	r2, sl
 80107ce:	4631      	mov	r1, r6
 80107d0:	4628      	mov	r0, r5
 80107d2:	47b8      	blx	r7
 80107d4:	3001      	adds	r0, #1
 80107d6:	d1be      	bne.n	8010756 <_printf_float+0x32a>
 80107d8:	e689      	b.n	80104ee <_printf_float+0xc2>
 80107da:	9a05      	ldr	r2, [sp, #20]
 80107dc:	464b      	mov	r3, r9
 80107de:	4442      	add	r2, r8
 80107e0:	4631      	mov	r1, r6
 80107e2:	4628      	mov	r0, r5
 80107e4:	47b8      	blx	r7
 80107e6:	3001      	adds	r0, #1
 80107e8:	d1c1      	bne.n	801076e <_printf_float+0x342>
 80107ea:	e680      	b.n	80104ee <_printf_float+0xc2>
 80107ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80107ee:	2a01      	cmp	r2, #1
 80107f0:	dc01      	bgt.n	80107f6 <_printf_float+0x3ca>
 80107f2:	07db      	lsls	r3, r3, #31
 80107f4:	d538      	bpl.n	8010868 <_printf_float+0x43c>
 80107f6:	2301      	movs	r3, #1
 80107f8:	4642      	mov	r2, r8
 80107fa:	4631      	mov	r1, r6
 80107fc:	4628      	mov	r0, r5
 80107fe:	47b8      	blx	r7
 8010800:	3001      	adds	r0, #1
 8010802:	f43f ae74 	beq.w	80104ee <_printf_float+0xc2>
 8010806:	ee18 3a10 	vmov	r3, s16
 801080a:	4652      	mov	r2, sl
 801080c:	4631      	mov	r1, r6
 801080e:	4628      	mov	r0, r5
 8010810:	47b8      	blx	r7
 8010812:	3001      	adds	r0, #1
 8010814:	f43f ae6b 	beq.w	80104ee <_printf_float+0xc2>
 8010818:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801081c:	2200      	movs	r2, #0
 801081e:	2300      	movs	r3, #0
 8010820:	f7f0 f95a 	bl	8000ad8 <__aeabi_dcmpeq>
 8010824:	b9d8      	cbnz	r0, 801085e <_printf_float+0x432>
 8010826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010828:	f108 0201 	add.w	r2, r8, #1
 801082c:	3b01      	subs	r3, #1
 801082e:	4631      	mov	r1, r6
 8010830:	4628      	mov	r0, r5
 8010832:	47b8      	blx	r7
 8010834:	3001      	adds	r0, #1
 8010836:	d10e      	bne.n	8010856 <_printf_float+0x42a>
 8010838:	e659      	b.n	80104ee <_printf_float+0xc2>
 801083a:	2301      	movs	r3, #1
 801083c:	4652      	mov	r2, sl
 801083e:	4631      	mov	r1, r6
 8010840:	4628      	mov	r0, r5
 8010842:	47b8      	blx	r7
 8010844:	3001      	adds	r0, #1
 8010846:	f43f ae52 	beq.w	80104ee <_printf_float+0xc2>
 801084a:	f108 0801 	add.w	r8, r8, #1
 801084e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010850:	3b01      	subs	r3, #1
 8010852:	4543      	cmp	r3, r8
 8010854:	dcf1      	bgt.n	801083a <_printf_float+0x40e>
 8010856:	464b      	mov	r3, r9
 8010858:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801085c:	e6dc      	b.n	8010618 <_printf_float+0x1ec>
 801085e:	f04f 0800 	mov.w	r8, #0
 8010862:	f104 0a1a 	add.w	sl, r4, #26
 8010866:	e7f2      	b.n	801084e <_printf_float+0x422>
 8010868:	2301      	movs	r3, #1
 801086a:	4642      	mov	r2, r8
 801086c:	e7df      	b.n	801082e <_printf_float+0x402>
 801086e:	2301      	movs	r3, #1
 8010870:	464a      	mov	r2, r9
 8010872:	4631      	mov	r1, r6
 8010874:	4628      	mov	r0, r5
 8010876:	47b8      	blx	r7
 8010878:	3001      	adds	r0, #1
 801087a:	f43f ae38 	beq.w	80104ee <_printf_float+0xc2>
 801087e:	f108 0801 	add.w	r8, r8, #1
 8010882:	68e3      	ldr	r3, [r4, #12]
 8010884:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010886:	1a5b      	subs	r3, r3, r1
 8010888:	4543      	cmp	r3, r8
 801088a:	dcf0      	bgt.n	801086e <_printf_float+0x442>
 801088c:	e6fa      	b.n	8010684 <_printf_float+0x258>
 801088e:	f04f 0800 	mov.w	r8, #0
 8010892:	f104 0919 	add.w	r9, r4, #25
 8010896:	e7f4      	b.n	8010882 <_printf_float+0x456>

08010898 <_printf_common>:
 8010898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801089c:	4616      	mov	r6, r2
 801089e:	4699      	mov	r9, r3
 80108a0:	688a      	ldr	r2, [r1, #8]
 80108a2:	690b      	ldr	r3, [r1, #16]
 80108a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80108a8:	4293      	cmp	r3, r2
 80108aa:	bfb8      	it	lt
 80108ac:	4613      	movlt	r3, r2
 80108ae:	6033      	str	r3, [r6, #0]
 80108b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80108b4:	4607      	mov	r7, r0
 80108b6:	460c      	mov	r4, r1
 80108b8:	b10a      	cbz	r2, 80108be <_printf_common+0x26>
 80108ba:	3301      	adds	r3, #1
 80108bc:	6033      	str	r3, [r6, #0]
 80108be:	6823      	ldr	r3, [r4, #0]
 80108c0:	0699      	lsls	r1, r3, #26
 80108c2:	bf42      	ittt	mi
 80108c4:	6833      	ldrmi	r3, [r6, #0]
 80108c6:	3302      	addmi	r3, #2
 80108c8:	6033      	strmi	r3, [r6, #0]
 80108ca:	6825      	ldr	r5, [r4, #0]
 80108cc:	f015 0506 	ands.w	r5, r5, #6
 80108d0:	d106      	bne.n	80108e0 <_printf_common+0x48>
 80108d2:	f104 0a19 	add.w	sl, r4, #25
 80108d6:	68e3      	ldr	r3, [r4, #12]
 80108d8:	6832      	ldr	r2, [r6, #0]
 80108da:	1a9b      	subs	r3, r3, r2
 80108dc:	42ab      	cmp	r3, r5
 80108de:	dc26      	bgt.n	801092e <_printf_common+0x96>
 80108e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80108e4:	1e13      	subs	r3, r2, #0
 80108e6:	6822      	ldr	r2, [r4, #0]
 80108e8:	bf18      	it	ne
 80108ea:	2301      	movne	r3, #1
 80108ec:	0692      	lsls	r2, r2, #26
 80108ee:	d42b      	bmi.n	8010948 <_printf_common+0xb0>
 80108f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80108f4:	4649      	mov	r1, r9
 80108f6:	4638      	mov	r0, r7
 80108f8:	47c0      	blx	r8
 80108fa:	3001      	adds	r0, #1
 80108fc:	d01e      	beq.n	801093c <_printf_common+0xa4>
 80108fe:	6823      	ldr	r3, [r4, #0]
 8010900:	68e5      	ldr	r5, [r4, #12]
 8010902:	6832      	ldr	r2, [r6, #0]
 8010904:	f003 0306 	and.w	r3, r3, #6
 8010908:	2b04      	cmp	r3, #4
 801090a:	bf08      	it	eq
 801090c:	1aad      	subeq	r5, r5, r2
 801090e:	68a3      	ldr	r3, [r4, #8]
 8010910:	6922      	ldr	r2, [r4, #16]
 8010912:	bf0c      	ite	eq
 8010914:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010918:	2500      	movne	r5, #0
 801091a:	4293      	cmp	r3, r2
 801091c:	bfc4      	itt	gt
 801091e:	1a9b      	subgt	r3, r3, r2
 8010920:	18ed      	addgt	r5, r5, r3
 8010922:	2600      	movs	r6, #0
 8010924:	341a      	adds	r4, #26
 8010926:	42b5      	cmp	r5, r6
 8010928:	d11a      	bne.n	8010960 <_printf_common+0xc8>
 801092a:	2000      	movs	r0, #0
 801092c:	e008      	b.n	8010940 <_printf_common+0xa8>
 801092e:	2301      	movs	r3, #1
 8010930:	4652      	mov	r2, sl
 8010932:	4649      	mov	r1, r9
 8010934:	4638      	mov	r0, r7
 8010936:	47c0      	blx	r8
 8010938:	3001      	adds	r0, #1
 801093a:	d103      	bne.n	8010944 <_printf_common+0xac>
 801093c:	f04f 30ff 	mov.w	r0, #4294967295
 8010940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010944:	3501      	adds	r5, #1
 8010946:	e7c6      	b.n	80108d6 <_printf_common+0x3e>
 8010948:	18e1      	adds	r1, r4, r3
 801094a:	1c5a      	adds	r2, r3, #1
 801094c:	2030      	movs	r0, #48	; 0x30
 801094e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010952:	4422      	add	r2, r4
 8010954:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010958:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801095c:	3302      	adds	r3, #2
 801095e:	e7c7      	b.n	80108f0 <_printf_common+0x58>
 8010960:	2301      	movs	r3, #1
 8010962:	4622      	mov	r2, r4
 8010964:	4649      	mov	r1, r9
 8010966:	4638      	mov	r0, r7
 8010968:	47c0      	blx	r8
 801096a:	3001      	adds	r0, #1
 801096c:	d0e6      	beq.n	801093c <_printf_common+0xa4>
 801096e:	3601      	adds	r6, #1
 8010970:	e7d9      	b.n	8010926 <_printf_common+0x8e>
	...

08010974 <_printf_i>:
 8010974:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010978:	460c      	mov	r4, r1
 801097a:	4691      	mov	r9, r2
 801097c:	7e27      	ldrb	r7, [r4, #24]
 801097e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010980:	2f78      	cmp	r7, #120	; 0x78
 8010982:	4680      	mov	r8, r0
 8010984:	469a      	mov	sl, r3
 8010986:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801098a:	d807      	bhi.n	801099c <_printf_i+0x28>
 801098c:	2f62      	cmp	r7, #98	; 0x62
 801098e:	d80a      	bhi.n	80109a6 <_printf_i+0x32>
 8010990:	2f00      	cmp	r7, #0
 8010992:	f000 80d8 	beq.w	8010b46 <_printf_i+0x1d2>
 8010996:	2f58      	cmp	r7, #88	; 0x58
 8010998:	f000 80a3 	beq.w	8010ae2 <_printf_i+0x16e>
 801099c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80109a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80109a4:	e03a      	b.n	8010a1c <_printf_i+0xa8>
 80109a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80109aa:	2b15      	cmp	r3, #21
 80109ac:	d8f6      	bhi.n	801099c <_printf_i+0x28>
 80109ae:	a001      	add	r0, pc, #4	; (adr r0, 80109b4 <_printf_i+0x40>)
 80109b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80109b4:	08010a0d 	.word	0x08010a0d
 80109b8:	08010a21 	.word	0x08010a21
 80109bc:	0801099d 	.word	0x0801099d
 80109c0:	0801099d 	.word	0x0801099d
 80109c4:	0801099d 	.word	0x0801099d
 80109c8:	0801099d 	.word	0x0801099d
 80109cc:	08010a21 	.word	0x08010a21
 80109d0:	0801099d 	.word	0x0801099d
 80109d4:	0801099d 	.word	0x0801099d
 80109d8:	0801099d 	.word	0x0801099d
 80109dc:	0801099d 	.word	0x0801099d
 80109e0:	08010b2d 	.word	0x08010b2d
 80109e4:	08010a51 	.word	0x08010a51
 80109e8:	08010b0f 	.word	0x08010b0f
 80109ec:	0801099d 	.word	0x0801099d
 80109f0:	0801099d 	.word	0x0801099d
 80109f4:	08010b4f 	.word	0x08010b4f
 80109f8:	0801099d 	.word	0x0801099d
 80109fc:	08010a51 	.word	0x08010a51
 8010a00:	0801099d 	.word	0x0801099d
 8010a04:	0801099d 	.word	0x0801099d
 8010a08:	08010b17 	.word	0x08010b17
 8010a0c:	680b      	ldr	r3, [r1, #0]
 8010a0e:	1d1a      	adds	r2, r3, #4
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	600a      	str	r2, [r1, #0]
 8010a14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010a18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010a1c:	2301      	movs	r3, #1
 8010a1e:	e0a3      	b.n	8010b68 <_printf_i+0x1f4>
 8010a20:	6825      	ldr	r5, [r4, #0]
 8010a22:	6808      	ldr	r0, [r1, #0]
 8010a24:	062e      	lsls	r6, r5, #24
 8010a26:	f100 0304 	add.w	r3, r0, #4
 8010a2a:	d50a      	bpl.n	8010a42 <_printf_i+0xce>
 8010a2c:	6805      	ldr	r5, [r0, #0]
 8010a2e:	600b      	str	r3, [r1, #0]
 8010a30:	2d00      	cmp	r5, #0
 8010a32:	da03      	bge.n	8010a3c <_printf_i+0xc8>
 8010a34:	232d      	movs	r3, #45	; 0x2d
 8010a36:	426d      	negs	r5, r5
 8010a38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a3c:	485e      	ldr	r0, [pc, #376]	; (8010bb8 <_printf_i+0x244>)
 8010a3e:	230a      	movs	r3, #10
 8010a40:	e019      	b.n	8010a76 <_printf_i+0x102>
 8010a42:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010a46:	6805      	ldr	r5, [r0, #0]
 8010a48:	600b      	str	r3, [r1, #0]
 8010a4a:	bf18      	it	ne
 8010a4c:	b22d      	sxthne	r5, r5
 8010a4e:	e7ef      	b.n	8010a30 <_printf_i+0xbc>
 8010a50:	680b      	ldr	r3, [r1, #0]
 8010a52:	6825      	ldr	r5, [r4, #0]
 8010a54:	1d18      	adds	r0, r3, #4
 8010a56:	6008      	str	r0, [r1, #0]
 8010a58:	0628      	lsls	r0, r5, #24
 8010a5a:	d501      	bpl.n	8010a60 <_printf_i+0xec>
 8010a5c:	681d      	ldr	r5, [r3, #0]
 8010a5e:	e002      	b.n	8010a66 <_printf_i+0xf2>
 8010a60:	0669      	lsls	r1, r5, #25
 8010a62:	d5fb      	bpl.n	8010a5c <_printf_i+0xe8>
 8010a64:	881d      	ldrh	r5, [r3, #0]
 8010a66:	4854      	ldr	r0, [pc, #336]	; (8010bb8 <_printf_i+0x244>)
 8010a68:	2f6f      	cmp	r7, #111	; 0x6f
 8010a6a:	bf0c      	ite	eq
 8010a6c:	2308      	moveq	r3, #8
 8010a6e:	230a      	movne	r3, #10
 8010a70:	2100      	movs	r1, #0
 8010a72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010a76:	6866      	ldr	r6, [r4, #4]
 8010a78:	60a6      	str	r6, [r4, #8]
 8010a7a:	2e00      	cmp	r6, #0
 8010a7c:	bfa2      	ittt	ge
 8010a7e:	6821      	ldrge	r1, [r4, #0]
 8010a80:	f021 0104 	bicge.w	r1, r1, #4
 8010a84:	6021      	strge	r1, [r4, #0]
 8010a86:	b90d      	cbnz	r5, 8010a8c <_printf_i+0x118>
 8010a88:	2e00      	cmp	r6, #0
 8010a8a:	d04d      	beq.n	8010b28 <_printf_i+0x1b4>
 8010a8c:	4616      	mov	r6, r2
 8010a8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010a92:	fb03 5711 	mls	r7, r3, r1, r5
 8010a96:	5dc7      	ldrb	r7, [r0, r7]
 8010a98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010a9c:	462f      	mov	r7, r5
 8010a9e:	42bb      	cmp	r3, r7
 8010aa0:	460d      	mov	r5, r1
 8010aa2:	d9f4      	bls.n	8010a8e <_printf_i+0x11a>
 8010aa4:	2b08      	cmp	r3, #8
 8010aa6:	d10b      	bne.n	8010ac0 <_printf_i+0x14c>
 8010aa8:	6823      	ldr	r3, [r4, #0]
 8010aaa:	07df      	lsls	r7, r3, #31
 8010aac:	d508      	bpl.n	8010ac0 <_printf_i+0x14c>
 8010aae:	6923      	ldr	r3, [r4, #16]
 8010ab0:	6861      	ldr	r1, [r4, #4]
 8010ab2:	4299      	cmp	r1, r3
 8010ab4:	bfde      	ittt	le
 8010ab6:	2330      	movle	r3, #48	; 0x30
 8010ab8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010abc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010ac0:	1b92      	subs	r2, r2, r6
 8010ac2:	6122      	str	r2, [r4, #16]
 8010ac4:	f8cd a000 	str.w	sl, [sp]
 8010ac8:	464b      	mov	r3, r9
 8010aca:	aa03      	add	r2, sp, #12
 8010acc:	4621      	mov	r1, r4
 8010ace:	4640      	mov	r0, r8
 8010ad0:	f7ff fee2 	bl	8010898 <_printf_common>
 8010ad4:	3001      	adds	r0, #1
 8010ad6:	d14c      	bne.n	8010b72 <_printf_i+0x1fe>
 8010ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8010adc:	b004      	add	sp, #16
 8010ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ae2:	4835      	ldr	r0, [pc, #212]	; (8010bb8 <_printf_i+0x244>)
 8010ae4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010ae8:	6823      	ldr	r3, [r4, #0]
 8010aea:	680e      	ldr	r6, [r1, #0]
 8010aec:	061f      	lsls	r7, r3, #24
 8010aee:	f856 5b04 	ldr.w	r5, [r6], #4
 8010af2:	600e      	str	r6, [r1, #0]
 8010af4:	d514      	bpl.n	8010b20 <_printf_i+0x1ac>
 8010af6:	07d9      	lsls	r1, r3, #31
 8010af8:	bf44      	itt	mi
 8010afa:	f043 0320 	orrmi.w	r3, r3, #32
 8010afe:	6023      	strmi	r3, [r4, #0]
 8010b00:	b91d      	cbnz	r5, 8010b0a <_printf_i+0x196>
 8010b02:	6823      	ldr	r3, [r4, #0]
 8010b04:	f023 0320 	bic.w	r3, r3, #32
 8010b08:	6023      	str	r3, [r4, #0]
 8010b0a:	2310      	movs	r3, #16
 8010b0c:	e7b0      	b.n	8010a70 <_printf_i+0xfc>
 8010b0e:	6823      	ldr	r3, [r4, #0]
 8010b10:	f043 0320 	orr.w	r3, r3, #32
 8010b14:	6023      	str	r3, [r4, #0]
 8010b16:	2378      	movs	r3, #120	; 0x78
 8010b18:	4828      	ldr	r0, [pc, #160]	; (8010bbc <_printf_i+0x248>)
 8010b1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010b1e:	e7e3      	b.n	8010ae8 <_printf_i+0x174>
 8010b20:	065e      	lsls	r6, r3, #25
 8010b22:	bf48      	it	mi
 8010b24:	b2ad      	uxthmi	r5, r5
 8010b26:	e7e6      	b.n	8010af6 <_printf_i+0x182>
 8010b28:	4616      	mov	r6, r2
 8010b2a:	e7bb      	b.n	8010aa4 <_printf_i+0x130>
 8010b2c:	680b      	ldr	r3, [r1, #0]
 8010b2e:	6826      	ldr	r6, [r4, #0]
 8010b30:	6960      	ldr	r0, [r4, #20]
 8010b32:	1d1d      	adds	r5, r3, #4
 8010b34:	600d      	str	r5, [r1, #0]
 8010b36:	0635      	lsls	r5, r6, #24
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	d501      	bpl.n	8010b40 <_printf_i+0x1cc>
 8010b3c:	6018      	str	r0, [r3, #0]
 8010b3e:	e002      	b.n	8010b46 <_printf_i+0x1d2>
 8010b40:	0671      	lsls	r1, r6, #25
 8010b42:	d5fb      	bpl.n	8010b3c <_printf_i+0x1c8>
 8010b44:	8018      	strh	r0, [r3, #0]
 8010b46:	2300      	movs	r3, #0
 8010b48:	6123      	str	r3, [r4, #16]
 8010b4a:	4616      	mov	r6, r2
 8010b4c:	e7ba      	b.n	8010ac4 <_printf_i+0x150>
 8010b4e:	680b      	ldr	r3, [r1, #0]
 8010b50:	1d1a      	adds	r2, r3, #4
 8010b52:	600a      	str	r2, [r1, #0]
 8010b54:	681e      	ldr	r6, [r3, #0]
 8010b56:	6862      	ldr	r2, [r4, #4]
 8010b58:	2100      	movs	r1, #0
 8010b5a:	4630      	mov	r0, r6
 8010b5c:	f7ef fb48 	bl	80001f0 <memchr>
 8010b60:	b108      	cbz	r0, 8010b66 <_printf_i+0x1f2>
 8010b62:	1b80      	subs	r0, r0, r6
 8010b64:	6060      	str	r0, [r4, #4]
 8010b66:	6863      	ldr	r3, [r4, #4]
 8010b68:	6123      	str	r3, [r4, #16]
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b70:	e7a8      	b.n	8010ac4 <_printf_i+0x150>
 8010b72:	6923      	ldr	r3, [r4, #16]
 8010b74:	4632      	mov	r2, r6
 8010b76:	4649      	mov	r1, r9
 8010b78:	4640      	mov	r0, r8
 8010b7a:	47d0      	blx	sl
 8010b7c:	3001      	adds	r0, #1
 8010b7e:	d0ab      	beq.n	8010ad8 <_printf_i+0x164>
 8010b80:	6823      	ldr	r3, [r4, #0]
 8010b82:	079b      	lsls	r3, r3, #30
 8010b84:	d413      	bmi.n	8010bae <_printf_i+0x23a>
 8010b86:	68e0      	ldr	r0, [r4, #12]
 8010b88:	9b03      	ldr	r3, [sp, #12]
 8010b8a:	4298      	cmp	r0, r3
 8010b8c:	bfb8      	it	lt
 8010b8e:	4618      	movlt	r0, r3
 8010b90:	e7a4      	b.n	8010adc <_printf_i+0x168>
 8010b92:	2301      	movs	r3, #1
 8010b94:	4632      	mov	r2, r6
 8010b96:	4649      	mov	r1, r9
 8010b98:	4640      	mov	r0, r8
 8010b9a:	47d0      	blx	sl
 8010b9c:	3001      	adds	r0, #1
 8010b9e:	d09b      	beq.n	8010ad8 <_printf_i+0x164>
 8010ba0:	3501      	adds	r5, #1
 8010ba2:	68e3      	ldr	r3, [r4, #12]
 8010ba4:	9903      	ldr	r1, [sp, #12]
 8010ba6:	1a5b      	subs	r3, r3, r1
 8010ba8:	42ab      	cmp	r3, r5
 8010baa:	dcf2      	bgt.n	8010b92 <_printf_i+0x21e>
 8010bac:	e7eb      	b.n	8010b86 <_printf_i+0x212>
 8010bae:	2500      	movs	r5, #0
 8010bb0:	f104 0619 	add.w	r6, r4, #25
 8010bb4:	e7f5      	b.n	8010ba2 <_printf_i+0x22e>
 8010bb6:	bf00      	nop
 8010bb8:	080165eb 	.word	0x080165eb
 8010bbc:	080165fc 	.word	0x080165fc

08010bc0 <_scanf_float>:
 8010bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bc4:	b087      	sub	sp, #28
 8010bc6:	4617      	mov	r7, r2
 8010bc8:	9303      	str	r3, [sp, #12]
 8010bca:	688b      	ldr	r3, [r1, #8]
 8010bcc:	1e5a      	subs	r2, r3, #1
 8010bce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010bd2:	bf83      	ittte	hi
 8010bd4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010bd8:	195b      	addhi	r3, r3, r5
 8010bda:	9302      	strhi	r3, [sp, #8]
 8010bdc:	2300      	movls	r3, #0
 8010bde:	bf86      	itte	hi
 8010be0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010be4:	608b      	strhi	r3, [r1, #8]
 8010be6:	9302      	strls	r3, [sp, #8]
 8010be8:	680b      	ldr	r3, [r1, #0]
 8010bea:	468b      	mov	fp, r1
 8010bec:	2500      	movs	r5, #0
 8010bee:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8010bf2:	f84b 3b1c 	str.w	r3, [fp], #28
 8010bf6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010bfa:	4680      	mov	r8, r0
 8010bfc:	460c      	mov	r4, r1
 8010bfe:	465e      	mov	r6, fp
 8010c00:	46aa      	mov	sl, r5
 8010c02:	46a9      	mov	r9, r5
 8010c04:	9501      	str	r5, [sp, #4]
 8010c06:	68a2      	ldr	r2, [r4, #8]
 8010c08:	b152      	cbz	r2, 8010c20 <_scanf_float+0x60>
 8010c0a:	683b      	ldr	r3, [r7, #0]
 8010c0c:	781b      	ldrb	r3, [r3, #0]
 8010c0e:	2b4e      	cmp	r3, #78	; 0x4e
 8010c10:	d864      	bhi.n	8010cdc <_scanf_float+0x11c>
 8010c12:	2b40      	cmp	r3, #64	; 0x40
 8010c14:	d83c      	bhi.n	8010c90 <_scanf_float+0xd0>
 8010c16:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8010c1a:	b2c8      	uxtb	r0, r1
 8010c1c:	280e      	cmp	r0, #14
 8010c1e:	d93a      	bls.n	8010c96 <_scanf_float+0xd6>
 8010c20:	f1b9 0f00 	cmp.w	r9, #0
 8010c24:	d003      	beq.n	8010c2e <_scanf_float+0x6e>
 8010c26:	6823      	ldr	r3, [r4, #0]
 8010c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010c2c:	6023      	str	r3, [r4, #0]
 8010c2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010c32:	f1ba 0f01 	cmp.w	sl, #1
 8010c36:	f200 8113 	bhi.w	8010e60 <_scanf_float+0x2a0>
 8010c3a:	455e      	cmp	r6, fp
 8010c3c:	f200 8105 	bhi.w	8010e4a <_scanf_float+0x28a>
 8010c40:	2501      	movs	r5, #1
 8010c42:	4628      	mov	r0, r5
 8010c44:	b007      	add	sp, #28
 8010c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c4a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8010c4e:	2a0d      	cmp	r2, #13
 8010c50:	d8e6      	bhi.n	8010c20 <_scanf_float+0x60>
 8010c52:	a101      	add	r1, pc, #4	; (adr r1, 8010c58 <_scanf_float+0x98>)
 8010c54:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010c58:	08010d97 	.word	0x08010d97
 8010c5c:	08010c21 	.word	0x08010c21
 8010c60:	08010c21 	.word	0x08010c21
 8010c64:	08010c21 	.word	0x08010c21
 8010c68:	08010df7 	.word	0x08010df7
 8010c6c:	08010dcf 	.word	0x08010dcf
 8010c70:	08010c21 	.word	0x08010c21
 8010c74:	08010c21 	.word	0x08010c21
 8010c78:	08010da5 	.word	0x08010da5
 8010c7c:	08010c21 	.word	0x08010c21
 8010c80:	08010c21 	.word	0x08010c21
 8010c84:	08010c21 	.word	0x08010c21
 8010c88:	08010c21 	.word	0x08010c21
 8010c8c:	08010d5d 	.word	0x08010d5d
 8010c90:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8010c94:	e7db      	b.n	8010c4e <_scanf_float+0x8e>
 8010c96:	290e      	cmp	r1, #14
 8010c98:	d8c2      	bhi.n	8010c20 <_scanf_float+0x60>
 8010c9a:	a001      	add	r0, pc, #4	; (adr r0, 8010ca0 <_scanf_float+0xe0>)
 8010c9c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010ca0:	08010d4f 	.word	0x08010d4f
 8010ca4:	08010c21 	.word	0x08010c21
 8010ca8:	08010d4f 	.word	0x08010d4f
 8010cac:	08010de3 	.word	0x08010de3
 8010cb0:	08010c21 	.word	0x08010c21
 8010cb4:	08010cfd 	.word	0x08010cfd
 8010cb8:	08010d39 	.word	0x08010d39
 8010cbc:	08010d39 	.word	0x08010d39
 8010cc0:	08010d39 	.word	0x08010d39
 8010cc4:	08010d39 	.word	0x08010d39
 8010cc8:	08010d39 	.word	0x08010d39
 8010ccc:	08010d39 	.word	0x08010d39
 8010cd0:	08010d39 	.word	0x08010d39
 8010cd4:	08010d39 	.word	0x08010d39
 8010cd8:	08010d39 	.word	0x08010d39
 8010cdc:	2b6e      	cmp	r3, #110	; 0x6e
 8010cde:	d809      	bhi.n	8010cf4 <_scanf_float+0x134>
 8010ce0:	2b60      	cmp	r3, #96	; 0x60
 8010ce2:	d8b2      	bhi.n	8010c4a <_scanf_float+0x8a>
 8010ce4:	2b54      	cmp	r3, #84	; 0x54
 8010ce6:	d077      	beq.n	8010dd8 <_scanf_float+0x218>
 8010ce8:	2b59      	cmp	r3, #89	; 0x59
 8010cea:	d199      	bne.n	8010c20 <_scanf_float+0x60>
 8010cec:	2d07      	cmp	r5, #7
 8010cee:	d197      	bne.n	8010c20 <_scanf_float+0x60>
 8010cf0:	2508      	movs	r5, #8
 8010cf2:	e029      	b.n	8010d48 <_scanf_float+0x188>
 8010cf4:	2b74      	cmp	r3, #116	; 0x74
 8010cf6:	d06f      	beq.n	8010dd8 <_scanf_float+0x218>
 8010cf8:	2b79      	cmp	r3, #121	; 0x79
 8010cfa:	e7f6      	b.n	8010cea <_scanf_float+0x12a>
 8010cfc:	6821      	ldr	r1, [r4, #0]
 8010cfe:	05c8      	lsls	r0, r1, #23
 8010d00:	d51a      	bpl.n	8010d38 <_scanf_float+0x178>
 8010d02:	9b02      	ldr	r3, [sp, #8]
 8010d04:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010d08:	6021      	str	r1, [r4, #0]
 8010d0a:	f109 0901 	add.w	r9, r9, #1
 8010d0e:	b11b      	cbz	r3, 8010d18 <_scanf_float+0x158>
 8010d10:	3b01      	subs	r3, #1
 8010d12:	3201      	adds	r2, #1
 8010d14:	9302      	str	r3, [sp, #8]
 8010d16:	60a2      	str	r2, [r4, #8]
 8010d18:	68a3      	ldr	r3, [r4, #8]
 8010d1a:	3b01      	subs	r3, #1
 8010d1c:	60a3      	str	r3, [r4, #8]
 8010d1e:	6923      	ldr	r3, [r4, #16]
 8010d20:	3301      	adds	r3, #1
 8010d22:	6123      	str	r3, [r4, #16]
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	3b01      	subs	r3, #1
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	607b      	str	r3, [r7, #4]
 8010d2c:	f340 8084 	ble.w	8010e38 <_scanf_float+0x278>
 8010d30:	683b      	ldr	r3, [r7, #0]
 8010d32:	3301      	adds	r3, #1
 8010d34:	603b      	str	r3, [r7, #0]
 8010d36:	e766      	b.n	8010c06 <_scanf_float+0x46>
 8010d38:	eb1a 0f05 	cmn.w	sl, r5
 8010d3c:	f47f af70 	bne.w	8010c20 <_scanf_float+0x60>
 8010d40:	6822      	ldr	r2, [r4, #0]
 8010d42:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8010d46:	6022      	str	r2, [r4, #0]
 8010d48:	f806 3b01 	strb.w	r3, [r6], #1
 8010d4c:	e7e4      	b.n	8010d18 <_scanf_float+0x158>
 8010d4e:	6822      	ldr	r2, [r4, #0]
 8010d50:	0610      	lsls	r0, r2, #24
 8010d52:	f57f af65 	bpl.w	8010c20 <_scanf_float+0x60>
 8010d56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010d5a:	e7f4      	b.n	8010d46 <_scanf_float+0x186>
 8010d5c:	f1ba 0f00 	cmp.w	sl, #0
 8010d60:	d10e      	bne.n	8010d80 <_scanf_float+0x1c0>
 8010d62:	f1b9 0f00 	cmp.w	r9, #0
 8010d66:	d10e      	bne.n	8010d86 <_scanf_float+0x1c6>
 8010d68:	6822      	ldr	r2, [r4, #0]
 8010d6a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010d6e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010d72:	d108      	bne.n	8010d86 <_scanf_float+0x1c6>
 8010d74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010d78:	6022      	str	r2, [r4, #0]
 8010d7a:	f04f 0a01 	mov.w	sl, #1
 8010d7e:	e7e3      	b.n	8010d48 <_scanf_float+0x188>
 8010d80:	f1ba 0f02 	cmp.w	sl, #2
 8010d84:	d055      	beq.n	8010e32 <_scanf_float+0x272>
 8010d86:	2d01      	cmp	r5, #1
 8010d88:	d002      	beq.n	8010d90 <_scanf_float+0x1d0>
 8010d8a:	2d04      	cmp	r5, #4
 8010d8c:	f47f af48 	bne.w	8010c20 <_scanf_float+0x60>
 8010d90:	3501      	adds	r5, #1
 8010d92:	b2ed      	uxtb	r5, r5
 8010d94:	e7d8      	b.n	8010d48 <_scanf_float+0x188>
 8010d96:	f1ba 0f01 	cmp.w	sl, #1
 8010d9a:	f47f af41 	bne.w	8010c20 <_scanf_float+0x60>
 8010d9e:	f04f 0a02 	mov.w	sl, #2
 8010da2:	e7d1      	b.n	8010d48 <_scanf_float+0x188>
 8010da4:	b97d      	cbnz	r5, 8010dc6 <_scanf_float+0x206>
 8010da6:	f1b9 0f00 	cmp.w	r9, #0
 8010daa:	f47f af3c 	bne.w	8010c26 <_scanf_float+0x66>
 8010dae:	6822      	ldr	r2, [r4, #0]
 8010db0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010db4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010db8:	f47f af39 	bne.w	8010c2e <_scanf_float+0x6e>
 8010dbc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010dc0:	6022      	str	r2, [r4, #0]
 8010dc2:	2501      	movs	r5, #1
 8010dc4:	e7c0      	b.n	8010d48 <_scanf_float+0x188>
 8010dc6:	2d03      	cmp	r5, #3
 8010dc8:	d0e2      	beq.n	8010d90 <_scanf_float+0x1d0>
 8010dca:	2d05      	cmp	r5, #5
 8010dcc:	e7de      	b.n	8010d8c <_scanf_float+0x1cc>
 8010dce:	2d02      	cmp	r5, #2
 8010dd0:	f47f af26 	bne.w	8010c20 <_scanf_float+0x60>
 8010dd4:	2503      	movs	r5, #3
 8010dd6:	e7b7      	b.n	8010d48 <_scanf_float+0x188>
 8010dd8:	2d06      	cmp	r5, #6
 8010dda:	f47f af21 	bne.w	8010c20 <_scanf_float+0x60>
 8010dde:	2507      	movs	r5, #7
 8010de0:	e7b2      	b.n	8010d48 <_scanf_float+0x188>
 8010de2:	6822      	ldr	r2, [r4, #0]
 8010de4:	0591      	lsls	r1, r2, #22
 8010de6:	f57f af1b 	bpl.w	8010c20 <_scanf_float+0x60>
 8010dea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8010dee:	6022      	str	r2, [r4, #0]
 8010df0:	f8cd 9004 	str.w	r9, [sp, #4]
 8010df4:	e7a8      	b.n	8010d48 <_scanf_float+0x188>
 8010df6:	6822      	ldr	r2, [r4, #0]
 8010df8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010dfc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010e00:	d006      	beq.n	8010e10 <_scanf_float+0x250>
 8010e02:	0550      	lsls	r0, r2, #21
 8010e04:	f57f af0c 	bpl.w	8010c20 <_scanf_float+0x60>
 8010e08:	f1b9 0f00 	cmp.w	r9, #0
 8010e0c:	f43f af0f 	beq.w	8010c2e <_scanf_float+0x6e>
 8010e10:	0591      	lsls	r1, r2, #22
 8010e12:	bf58      	it	pl
 8010e14:	9901      	ldrpl	r1, [sp, #4]
 8010e16:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010e1a:	bf58      	it	pl
 8010e1c:	eba9 0101 	subpl.w	r1, r9, r1
 8010e20:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010e24:	bf58      	it	pl
 8010e26:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010e2a:	6022      	str	r2, [r4, #0]
 8010e2c:	f04f 0900 	mov.w	r9, #0
 8010e30:	e78a      	b.n	8010d48 <_scanf_float+0x188>
 8010e32:	f04f 0a03 	mov.w	sl, #3
 8010e36:	e787      	b.n	8010d48 <_scanf_float+0x188>
 8010e38:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010e3c:	4639      	mov	r1, r7
 8010e3e:	4640      	mov	r0, r8
 8010e40:	4798      	blx	r3
 8010e42:	2800      	cmp	r0, #0
 8010e44:	f43f aedf 	beq.w	8010c06 <_scanf_float+0x46>
 8010e48:	e6ea      	b.n	8010c20 <_scanf_float+0x60>
 8010e4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010e4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010e52:	463a      	mov	r2, r7
 8010e54:	4640      	mov	r0, r8
 8010e56:	4798      	blx	r3
 8010e58:	6923      	ldr	r3, [r4, #16]
 8010e5a:	3b01      	subs	r3, #1
 8010e5c:	6123      	str	r3, [r4, #16]
 8010e5e:	e6ec      	b.n	8010c3a <_scanf_float+0x7a>
 8010e60:	1e6b      	subs	r3, r5, #1
 8010e62:	2b06      	cmp	r3, #6
 8010e64:	d825      	bhi.n	8010eb2 <_scanf_float+0x2f2>
 8010e66:	2d02      	cmp	r5, #2
 8010e68:	d836      	bhi.n	8010ed8 <_scanf_float+0x318>
 8010e6a:	455e      	cmp	r6, fp
 8010e6c:	f67f aee8 	bls.w	8010c40 <_scanf_float+0x80>
 8010e70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010e74:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010e78:	463a      	mov	r2, r7
 8010e7a:	4640      	mov	r0, r8
 8010e7c:	4798      	blx	r3
 8010e7e:	6923      	ldr	r3, [r4, #16]
 8010e80:	3b01      	subs	r3, #1
 8010e82:	6123      	str	r3, [r4, #16]
 8010e84:	e7f1      	b.n	8010e6a <_scanf_float+0x2aa>
 8010e86:	9802      	ldr	r0, [sp, #8]
 8010e88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010e8c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8010e90:	9002      	str	r0, [sp, #8]
 8010e92:	463a      	mov	r2, r7
 8010e94:	4640      	mov	r0, r8
 8010e96:	4798      	blx	r3
 8010e98:	6923      	ldr	r3, [r4, #16]
 8010e9a:	3b01      	subs	r3, #1
 8010e9c:	6123      	str	r3, [r4, #16]
 8010e9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010ea2:	fa5f fa8a 	uxtb.w	sl, sl
 8010ea6:	f1ba 0f02 	cmp.w	sl, #2
 8010eaa:	d1ec      	bne.n	8010e86 <_scanf_float+0x2c6>
 8010eac:	3d03      	subs	r5, #3
 8010eae:	b2ed      	uxtb	r5, r5
 8010eb0:	1b76      	subs	r6, r6, r5
 8010eb2:	6823      	ldr	r3, [r4, #0]
 8010eb4:	05da      	lsls	r2, r3, #23
 8010eb6:	d52f      	bpl.n	8010f18 <_scanf_float+0x358>
 8010eb8:	055b      	lsls	r3, r3, #21
 8010eba:	d510      	bpl.n	8010ede <_scanf_float+0x31e>
 8010ebc:	455e      	cmp	r6, fp
 8010ebe:	f67f aebf 	bls.w	8010c40 <_scanf_float+0x80>
 8010ec2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010ec6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010eca:	463a      	mov	r2, r7
 8010ecc:	4640      	mov	r0, r8
 8010ece:	4798      	blx	r3
 8010ed0:	6923      	ldr	r3, [r4, #16]
 8010ed2:	3b01      	subs	r3, #1
 8010ed4:	6123      	str	r3, [r4, #16]
 8010ed6:	e7f1      	b.n	8010ebc <_scanf_float+0x2fc>
 8010ed8:	46aa      	mov	sl, r5
 8010eda:	9602      	str	r6, [sp, #8]
 8010edc:	e7df      	b.n	8010e9e <_scanf_float+0x2de>
 8010ede:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010ee2:	6923      	ldr	r3, [r4, #16]
 8010ee4:	2965      	cmp	r1, #101	; 0x65
 8010ee6:	f103 33ff 	add.w	r3, r3, #4294967295
 8010eea:	f106 35ff 	add.w	r5, r6, #4294967295
 8010eee:	6123      	str	r3, [r4, #16]
 8010ef0:	d00c      	beq.n	8010f0c <_scanf_float+0x34c>
 8010ef2:	2945      	cmp	r1, #69	; 0x45
 8010ef4:	d00a      	beq.n	8010f0c <_scanf_float+0x34c>
 8010ef6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010efa:	463a      	mov	r2, r7
 8010efc:	4640      	mov	r0, r8
 8010efe:	4798      	blx	r3
 8010f00:	6923      	ldr	r3, [r4, #16]
 8010f02:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010f06:	3b01      	subs	r3, #1
 8010f08:	1eb5      	subs	r5, r6, #2
 8010f0a:	6123      	str	r3, [r4, #16]
 8010f0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010f10:	463a      	mov	r2, r7
 8010f12:	4640      	mov	r0, r8
 8010f14:	4798      	blx	r3
 8010f16:	462e      	mov	r6, r5
 8010f18:	6825      	ldr	r5, [r4, #0]
 8010f1a:	f015 0510 	ands.w	r5, r5, #16
 8010f1e:	d158      	bne.n	8010fd2 <_scanf_float+0x412>
 8010f20:	7035      	strb	r5, [r6, #0]
 8010f22:	6823      	ldr	r3, [r4, #0]
 8010f24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010f28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010f2c:	d11c      	bne.n	8010f68 <_scanf_float+0x3a8>
 8010f2e:	9b01      	ldr	r3, [sp, #4]
 8010f30:	454b      	cmp	r3, r9
 8010f32:	eba3 0209 	sub.w	r2, r3, r9
 8010f36:	d124      	bne.n	8010f82 <_scanf_float+0x3c2>
 8010f38:	2200      	movs	r2, #0
 8010f3a:	4659      	mov	r1, fp
 8010f3c:	4640      	mov	r0, r8
 8010f3e:	f000 fe9d 	bl	8011c7c <_strtod_r>
 8010f42:	9b03      	ldr	r3, [sp, #12]
 8010f44:	6821      	ldr	r1, [r4, #0]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	f011 0f02 	tst.w	r1, #2
 8010f4c:	ec57 6b10 	vmov	r6, r7, d0
 8010f50:	f103 0204 	add.w	r2, r3, #4
 8010f54:	d020      	beq.n	8010f98 <_scanf_float+0x3d8>
 8010f56:	9903      	ldr	r1, [sp, #12]
 8010f58:	600a      	str	r2, [r1, #0]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	e9c3 6700 	strd	r6, r7, [r3]
 8010f60:	68e3      	ldr	r3, [r4, #12]
 8010f62:	3301      	adds	r3, #1
 8010f64:	60e3      	str	r3, [r4, #12]
 8010f66:	e66c      	b.n	8010c42 <_scanf_float+0x82>
 8010f68:	9b04      	ldr	r3, [sp, #16]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d0e4      	beq.n	8010f38 <_scanf_float+0x378>
 8010f6e:	9905      	ldr	r1, [sp, #20]
 8010f70:	230a      	movs	r3, #10
 8010f72:	462a      	mov	r2, r5
 8010f74:	3101      	adds	r1, #1
 8010f76:	4640      	mov	r0, r8
 8010f78:	f000 ff0a 	bl	8011d90 <_strtol_r>
 8010f7c:	9b04      	ldr	r3, [sp, #16]
 8010f7e:	9e05      	ldr	r6, [sp, #20]
 8010f80:	1ac2      	subs	r2, r0, r3
 8010f82:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010f86:	429e      	cmp	r6, r3
 8010f88:	bf28      	it	cs
 8010f8a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8010f8e:	4912      	ldr	r1, [pc, #72]	; (8010fd8 <_scanf_float+0x418>)
 8010f90:	4630      	mov	r0, r6
 8010f92:	f000 f82b 	bl	8010fec <siprintf>
 8010f96:	e7cf      	b.n	8010f38 <_scanf_float+0x378>
 8010f98:	f011 0f04 	tst.w	r1, #4
 8010f9c:	9903      	ldr	r1, [sp, #12]
 8010f9e:	600a      	str	r2, [r1, #0]
 8010fa0:	d1db      	bne.n	8010f5a <_scanf_float+0x39a>
 8010fa2:	f8d3 8000 	ldr.w	r8, [r3]
 8010fa6:	ee10 2a10 	vmov	r2, s0
 8010faa:	ee10 0a10 	vmov	r0, s0
 8010fae:	463b      	mov	r3, r7
 8010fb0:	4639      	mov	r1, r7
 8010fb2:	f7ef fdc3 	bl	8000b3c <__aeabi_dcmpun>
 8010fb6:	b128      	cbz	r0, 8010fc4 <_scanf_float+0x404>
 8010fb8:	4808      	ldr	r0, [pc, #32]	; (8010fdc <_scanf_float+0x41c>)
 8010fba:	f000 f811 	bl	8010fe0 <nanf>
 8010fbe:	ed88 0a00 	vstr	s0, [r8]
 8010fc2:	e7cd      	b.n	8010f60 <_scanf_float+0x3a0>
 8010fc4:	4630      	mov	r0, r6
 8010fc6:	4639      	mov	r1, r7
 8010fc8:	f7ef fe16 	bl	8000bf8 <__aeabi_d2f>
 8010fcc:	f8c8 0000 	str.w	r0, [r8]
 8010fd0:	e7c6      	b.n	8010f60 <_scanf_float+0x3a0>
 8010fd2:	2500      	movs	r5, #0
 8010fd4:	e635      	b.n	8010c42 <_scanf_float+0x82>
 8010fd6:	bf00      	nop
 8010fd8:	0801660d 	.word	0x0801660d
 8010fdc:	080164bf 	.word	0x080164bf

08010fe0 <nanf>:
 8010fe0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010fe8 <nanf+0x8>
 8010fe4:	4770      	bx	lr
 8010fe6:	bf00      	nop
 8010fe8:	7fc00000 	.word	0x7fc00000

08010fec <siprintf>:
 8010fec:	b40e      	push	{r1, r2, r3}
 8010fee:	b500      	push	{lr}
 8010ff0:	b09c      	sub	sp, #112	; 0x70
 8010ff2:	ab1d      	add	r3, sp, #116	; 0x74
 8010ff4:	9002      	str	r0, [sp, #8]
 8010ff6:	9006      	str	r0, [sp, #24]
 8010ff8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010ffc:	4809      	ldr	r0, [pc, #36]	; (8011024 <siprintf+0x38>)
 8010ffe:	9107      	str	r1, [sp, #28]
 8011000:	9104      	str	r1, [sp, #16]
 8011002:	4909      	ldr	r1, [pc, #36]	; (8011028 <siprintf+0x3c>)
 8011004:	f853 2b04 	ldr.w	r2, [r3], #4
 8011008:	9105      	str	r1, [sp, #20]
 801100a:	6800      	ldr	r0, [r0, #0]
 801100c:	9301      	str	r3, [sp, #4]
 801100e:	a902      	add	r1, sp, #8
 8011010:	f003 f9ba 	bl	8014388 <_svfiprintf_r>
 8011014:	9b02      	ldr	r3, [sp, #8]
 8011016:	2200      	movs	r2, #0
 8011018:	701a      	strb	r2, [r3, #0]
 801101a:	b01c      	add	sp, #112	; 0x70
 801101c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011020:	b003      	add	sp, #12
 8011022:	4770      	bx	lr
 8011024:	20000058 	.word	0x20000058
 8011028:	ffff0208 	.word	0xffff0208

0801102c <sulp>:
 801102c:	b570      	push	{r4, r5, r6, lr}
 801102e:	4604      	mov	r4, r0
 8011030:	460d      	mov	r5, r1
 8011032:	ec45 4b10 	vmov	d0, r4, r5
 8011036:	4616      	mov	r6, r2
 8011038:	f002 ff1c 	bl	8013e74 <__ulp>
 801103c:	ec51 0b10 	vmov	r0, r1, d0
 8011040:	b17e      	cbz	r6, 8011062 <sulp+0x36>
 8011042:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011046:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801104a:	2b00      	cmp	r3, #0
 801104c:	dd09      	ble.n	8011062 <sulp+0x36>
 801104e:	051b      	lsls	r3, r3, #20
 8011050:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011054:	2400      	movs	r4, #0
 8011056:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801105a:	4622      	mov	r2, r4
 801105c:	462b      	mov	r3, r5
 801105e:	f7ef fad3 	bl	8000608 <__aeabi_dmul>
 8011062:	bd70      	pop	{r4, r5, r6, pc}
 8011064:	0000      	movs	r0, r0
	...

08011068 <_strtod_l>:
 8011068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801106c:	b0a3      	sub	sp, #140	; 0x8c
 801106e:	461f      	mov	r7, r3
 8011070:	2300      	movs	r3, #0
 8011072:	931e      	str	r3, [sp, #120]	; 0x78
 8011074:	4ba4      	ldr	r3, [pc, #656]	; (8011308 <_strtod_l+0x2a0>)
 8011076:	9219      	str	r2, [sp, #100]	; 0x64
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	9307      	str	r3, [sp, #28]
 801107c:	4604      	mov	r4, r0
 801107e:	4618      	mov	r0, r3
 8011080:	4688      	mov	r8, r1
 8011082:	f7ef f8ad 	bl	80001e0 <strlen>
 8011086:	f04f 0a00 	mov.w	sl, #0
 801108a:	4605      	mov	r5, r0
 801108c:	f04f 0b00 	mov.w	fp, #0
 8011090:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8011094:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011096:	781a      	ldrb	r2, [r3, #0]
 8011098:	2a2b      	cmp	r2, #43	; 0x2b
 801109a:	d04c      	beq.n	8011136 <_strtod_l+0xce>
 801109c:	d839      	bhi.n	8011112 <_strtod_l+0xaa>
 801109e:	2a0d      	cmp	r2, #13
 80110a0:	d832      	bhi.n	8011108 <_strtod_l+0xa0>
 80110a2:	2a08      	cmp	r2, #8
 80110a4:	d832      	bhi.n	801110c <_strtod_l+0xa4>
 80110a6:	2a00      	cmp	r2, #0
 80110a8:	d03c      	beq.n	8011124 <_strtod_l+0xbc>
 80110aa:	2300      	movs	r3, #0
 80110ac:	930e      	str	r3, [sp, #56]	; 0x38
 80110ae:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80110b0:	7833      	ldrb	r3, [r6, #0]
 80110b2:	2b30      	cmp	r3, #48	; 0x30
 80110b4:	f040 80b4 	bne.w	8011220 <_strtod_l+0x1b8>
 80110b8:	7873      	ldrb	r3, [r6, #1]
 80110ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80110be:	2b58      	cmp	r3, #88	; 0x58
 80110c0:	d16c      	bne.n	801119c <_strtod_l+0x134>
 80110c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80110c4:	9301      	str	r3, [sp, #4]
 80110c6:	ab1e      	add	r3, sp, #120	; 0x78
 80110c8:	9702      	str	r7, [sp, #8]
 80110ca:	9300      	str	r3, [sp, #0]
 80110cc:	4a8f      	ldr	r2, [pc, #572]	; (801130c <_strtod_l+0x2a4>)
 80110ce:	ab1f      	add	r3, sp, #124	; 0x7c
 80110d0:	a91d      	add	r1, sp, #116	; 0x74
 80110d2:	4620      	mov	r0, r4
 80110d4:	f001 ffba 	bl	801304c <__gethex>
 80110d8:	f010 0707 	ands.w	r7, r0, #7
 80110dc:	4605      	mov	r5, r0
 80110de:	d005      	beq.n	80110ec <_strtod_l+0x84>
 80110e0:	2f06      	cmp	r7, #6
 80110e2:	d12a      	bne.n	801113a <_strtod_l+0xd2>
 80110e4:	3601      	adds	r6, #1
 80110e6:	2300      	movs	r3, #0
 80110e8:	961d      	str	r6, [sp, #116]	; 0x74
 80110ea:	930e      	str	r3, [sp, #56]	; 0x38
 80110ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	f040 8596 	bne.w	8011c20 <_strtod_l+0xbb8>
 80110f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80110f6:	b1db      	cbz	r3, 8011130 <_strtod_l+0xc8>
 80110f8:	4652      	mov	r2, sl
 80110fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80110fe:	ec43 2b10 	vmov	d0, r2, r3
 8011102:	b023      	add	sp, #140	; 0x8c
 8011104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011108:	2a20      	cmp	r2, #32
 801110a:	d1ce      	bne.n	80110aa <_strtod_l+0x42>
 801110c:	3301      	adds	r3, #1
 801110e:	931d      	str	r3, [sp, #116]	; 0x74
 8011110:	e7c0      	b.n	8011094 <_strtod_l+0x2c>
 8011112:	2a2d      	cmp	r2, #45	; 0x2d
 8011114:	d1c9      	bne.n	80110aa <_strtod_l+0x42>
 8011116:	2201      	movs	r2, #1
 8011118:	920e      	str	r2, [sp, #56]	; 0x38
 801111a:	1c5a      	adds	r2, r3, #1
 801111c:	921d      	str	r2, [sp, #116]	; 0x74
 801111e:	785b      	ldrb	r3, [r3, #1]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d1c4      	bne.n	80110ae <_strtod_l+0x46>
 8011124:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011126:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801112a:	2b00      	cmp	r3, #0
 801112c:	f040 8576 	bne.w	8011c1c <_strtod_l+0xbb4>
 8011130:	4652      	mov	r2, sl
 8011132:	465b      	mov	r3, fp
 8011134:	e7e3      	b.n	80110fe <_strtod_l+0x96>
 8011136:	2200      	movs	r2, #0
 8011138:	e7ee      	b.n	8011118 <_strtod_l+0xb0>
 801113a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801113c:	b13a      	cbz	r2, 801114e <_strtod_l+0xe6>
 801113e:	2135      	movs	r1, #53	; 0x35
 8011140:	a820      	add	r0, sp, #128	; 0x80
 8011142:	f002 ffa2 	bl	801408a <__copybits>
 8011146:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011148:	4620      	mov	r0, r4
 801114a:	f002 fb67 	bl	801381c <_Bfree>
 801114e:	3f01      	subs	r7, #1
 8011150:	2f05      	cmp	r7, #5
 8011152:	d807      	bhi.n	8011164 <_strtod_l+0xfc>
 8011154:	e8df f007 	tbb	[pc, r7]
 8011158:	1d180b0e 	.word	0x1d180b0e
 801115c:	030e      	.short	0x030e
 801115e:	f04f 0b00 	mov.w	fp, #0
 8011162:	46da      	mov	sl, fp
 8011164:	0728      	lsls	r0, r5, #28
 8011166:	d5c1      	bpl.n	80110ec <_strtod_l+0x84>
 8011168:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801116c:	e7be      	b.n	80110ec <_strtod_l+0x84>
 801116e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8011172:	e7f7      	b.n	8011164 <_strtod_l+0xfc>
 8011174:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8011178:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801117a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801117e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011182:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011186:	e7ed      	b.n	8011164 <_strtod_l+0xfc>
 8011188:	f8df b184 	ldr.w	fp, [pc, #388]	; 8011310 <_strtod_l+0x2a8>
 801118c:	f04f 0a00 	mov.w	sl, #0
 8011190:	e7e8      	b.n	8011164 <_strtod_l+0xfc>
 8011192:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8011196:	f04f 3aff 	mov.w	sl, #4294967295
 801119a:	e7e3      	b.n	8011164 <_strtod_l+0xfc>
 801119c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801119e:	1c5a      	adds	r2, r3, #1
 80111a0:	921d      	str	r2, [sp, #116]	; 0x74
 80111a2:	785b      	ldrb	r3, [r3, #1]
 80111a4:	2b30      	cmp	r3, #48	; 0x30
 80111a6:	d0f9      	beq.n	801119c <_strtod_l+0x134>
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d09f      	beq.n	80110ec <_strtod_l+0x84>
 80111ac:	2301      	movs	r3, #1
 80111ae:	f04f 0900 	mov.w	r9, #0
 80111b2:	9304      	str	r3, [sp, #16]
 80111b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80111b6:	930a      	str	r3, [sp, #40]	; 0x28
 80111b8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80111bc:	464f      	mov	r7, r9
 80111be:	220a      	movs	r2, #10
 80111c0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80111c2:	7806      	ldrb	r6, [r0, #0]
 80111c4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80111c8:	b2d9      	uxtb	r1, r3
 80111ca:	2909      	cmp	r1, #9
 80111cc:	d92a      	bls.n	8011224 <_strtod_l+0x1bc>
 80111ce:	9907      	ldr	r1, [sp, #28]
 80111d0:	462a      	mov	r2, r5
 80111d2:	f003 fa78 	bl	80146c6 <strncmp>
 80111d6:	b398      	cbz	r0, 8011240 <_strtod_l+0x1d8>
 80111d8:	2000      	movs	r0, #0
 80111da:	4633      	mov	r3, r6
 80111dc:	463d      	mov	r5, r7
 80111de:	9007      	str	r0, [sp, #28]
 80111e0:	4602      	mov	r2, r0
 80111e2:	2b65      	cmp	r3, #101	; 0x65
 80111e4:	d001      	beq.n	80111ea <_strtod_l+0x182>
 80111e6:	2b45      	cmp	r3, #69	; 0x45
 80111e8:	d118      	bne.n	801121c <_strtod_l+0x1b4>
 80111ea:	b91d      	cbnz	r5, 80111f4 <_strtod_l+0x18c>
 80111ec:	9b04      	ldr	r3, [sp, #16]
 80111ee:	4303      	orrs	r3, r0
 80111f0:	d098      	beq.n	8011124 <_strtod_l+0xbc>
 80111f2:	2500      	movs	r5, #0
 80111f4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80111f8:	f108 0301 	add.w	r3, r8, #1
 80111fc:	931d      	str	r3, [sp, #116]	; 0x74
 80111fe:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011202:	2b2b      	cmp	r3, #43	; 0x2b
 8011204:	d075      	beq.n	80112f2 <_strtod_l+0x28a>
 8011206:	2b2d      	cmp	r3, #45	; 0x2d
 8011208:	d07b      	beq.n	8011302 <_strtod_l+0x29a>
 801120a:	f04f 0c00 	mov.w	ip, #0
 801120e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8011212:	2909      	cmp	r1, #9
 8011214:	f240 8082 	bls.w	801131c <_strtod_l+0x2b4>
 8011218:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801121c:	2600      	movs	r6, #0
 801121e:	e09d      	b.n	801135c <_strtod_l+0x2f4>
 8011220:	2300      	movs	r3, #0
 8011222:	e7c4      	b.n	80111ae <_strtod_l+0x146>
 8011224:	2f08      	cmp	r7, #8
 8011226:	bfd8      	it	le
 8011228:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801122a:	f100 0001 	add.w	r0, r0, #1
 801122e:	bfda      	itte	le
 8011230:	fb02 3301 	mlale	r3, r2, r1, r3
 8011234:	9309      	strle	r3, [sp, #36]	; 0x24
 8011236:	fb02 3909 	mlagt	r9, r2, r9, r3
 801123a:	3701      	adds	r7, #1
 801123c:	901d      	str	r0, [sp, #116]	; 0x74
 801123e:	e7bf      	b.n	80111c0 <_strtod_l+0x158>
 8011240:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011242:	195a      	adds	r2, r3, r5
 8011244:	921d      	str	r2, [sp, #116]	; 0x74
 8011246:	5d5b      	ldrb	r3, [r3, r5]
 8011248:	2f00      	cmp	r7, #0
 801124a:	d037      	beq.n	80112bc <_strtod_l+0x254>
 801124c:	9007      	str	r0, [sp, #28]
 801124e:	463d      	mov	r5, r7
 8011250:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8011254:	2a09      	cmp	r2, #9
 8011256:	d912      	bls.n	801127e <_strtod_l+0x216>
 8011258:	2201      	movs	r2, #1
 801125a:	e7c2      	b.n	80111e2 <_strtod_l+0x17a>
 801125c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801125e:	1c5a      	adds	r2, r3, #1
 8011260:	921d      	str	r2, [sp, #116]	; 0x74
 8011262:	785b      	ldrb	r3, [r3, #1]
 8011264:	3001      	adds	r0, #1
 8011266:	2b30      	cmp	r3, #48	; 0x30
 8011268:	d0f8      	beq.n	801125c <_strtod_l+0x1f4>
 801126a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801126e:	2a08      	cmp	r2, #8
 8011270:	f200 84db 	bhi.w	8011c2a <_strtod_l+0xbc2>
 8011274:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011276:	9007      	str	r0, [sp, #28]
 8011278:	2000      	movs	r0, #0
 801127a:	920a      	str	r2, [sp, #40]	; 0x28
 801127c:	4605      	mov	r5, r0
 801127e:	3b30      	subs	r3, #48	; 0x30
 8011280:	f100 0201 	add.w	r2, r0, #1
 8011284:	d014      	beq.n	80112b0 <_strtod_l+0x248>
 8011286:	9907      	ldr	r1, [sp, #28]
 8011288:	4411      	add	r1, r2
 801128a:	9107      	str	r1, [sp, #28]
 801128c:	462a      	mov	r2, r5
 801128e:	eb00 0e05 	add.w	lr, r0, r5
 8011292:	210a      	movs	r1, #10
 8011294:	4572      	cmp	r2, lr
 8011296:	d113      	bne.n	80112c0 <_strtod_l+0x258>
 8011298:	182a      	adds	r2, r5, r0
 801129a:	2a08      	cmp	r2, #8
 801129c:	f105 0501 	add.w	r5, r5, #1
 80112a0:	4405      	add	r5, r0
 80112a2:	dc1c      	bgt.n	80112de <_strtod_l+0x276>
 80112a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80112a6:	220a      	movs	r2, #10
 80112a8:	fb02 3301 	mla	r3, r2, r1, r3
 80112ac:	9309      	str	r3, [sp, #36]	; 0x24
 80112ae:	2200      	movs	r2, #0
 80112b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80112b2:	1c59      	adds	r1, r3, #1
 80112b4:	911d      	str	r1, [sp, #116]	; 0x74
 80112b6:	785b      	ldrb	r3, [r3, #1]
 80112b8:	4610      	mov	r0, r2
 80112ba:	e7c9      	b.n	8011250 <_strtod_l+0x1e8>
 80112bc:	4638      	mov	r0, r7
 80112be:	e7d2      	b.n	8011266 <_strtod_l+0x1fe>
 80112c0:	2a08      	cmp	r2, #8
 80112c2:	dc04      	bgt.n	80112ce <_strtod_l+0x266>
 80112c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80112c6:	434e      	muls	r6, r1
 80112c8:	9609      	str	r6, [sp, #36]	; 0x24
 80112ca:	3201      	adds	r2, #1
 80112cc:	e7e2      	b.n	8011294 <_strtod_l+0x22c>
 80112ce:	f102 0c01 	add.w	ip, r2, #1
 80112d2:	f1bc 0f10 	cmp.w	ip, #16
 80112d6:	bfd8      	it	le
 80112d8:	fb01 f909 	mulle.w	r9, r1, r9
 80112dc:	e7f5      	b.n	80112ca <_strtod_l+0x262>
 80112de:	2d10      	cmp	r5, #16
 80112e0:	bfdc      	itt	le
 80112e2:	220a      	movle	r2, #10
 80112e4:	fb02 3909 	mlale	r9, r2, r9, r3
 80112e8:	e7e1      	b.n	80112ae <_strtod_l+0x246>
 80112ea:	2300      	movs	r3, #0
 80112ec:	9307      	str	r3, [sp, #28]
 80112ee:	2201      	movs	r2, #1
 80112f0:	e77c      	b.n	80111ec <_strtod_l+0x184>
 80112f2:	f04f 0c00 	mov.w	ip, #0
 80112f6:	f108 0302 	add.w	r3, r8, #2
 80112fa:	931d      	str	r3, [sp, #116]	; 0x74
 80112fc:	f898 3002 	ldrb.w	r3, [r8, #2]
 8011300:	e785      	b.n	801120e <_strtod_l+0x1a6>
 8011302:	f04f 0c01 	mov.w	ip, #1
 8011306:	e7f6      	b.n	80112f6 <_strtod_l+0x28e>
 8011308:	080167c8 	.word	0x080167c8
 801130c:	08016614 	.word	0x08016614
 8011310:	7ff00000 	.word	0x7ff00000
 8011314:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011316:	1c59      	adds	r1, r3, #1
 8011318:	911d      	str	r1, [sp, #116]	; 0x74
 801131a:	785b      	ldrb	r3, [r3, #1]
 801131c:	2b30      	cmp	r3, #48	; 0x30
 801131e:	d0f9      	beq.n	8011314 <_strtod_l+0x2ac>
 8011320:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8011324:	2908      	cmp	r1, #8
 8011326:	f63f af79 	bhi.w	801121c <_strtod_l+0x1b4>
 801132a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801132e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011330:	9308      	str	r3, [sp, #32]
 8011332:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011334:	1c59      	adds	r1, r3, #1
 8011336:	911d      	str	r1, [sp, #116]	; 0x74
 8011338:	785b      	ldrb	r3, [r3, #1]
 801133a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801133e:	2e09      	cmp	r6, #9
 8011340:	d937      	bls.n	80113b2 <_strtod_l+0x34a>
 8011342:	9e08      	ldr	r6, [sp, #32]
 8011344:	1b89      	subs	r1, r1, r6
 8011346:	2908      	cmp	r1, #8
 8011348:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801134c:	dc02      	bgt.n	8011354 <_strtod_l+0x2ec>
 801134e:	4576      	cmp	r6, lr
 8011350:	bfa8      	it	ge
 8011352:	4676      	movge	r6, lr
 8011354:	f1bc 0f00 	cmp.w	ip, #0
 8011358:	d000      	beq.n	801135c <_strtod_l+0x2f4>
 801135a:	4276      	negs	r6, r6
 801135c:	2d00      	cmp	r5, #0
 801135e:	d14f      	bne.n	8011400 <_strtod_l+0x398>
 8011360:	9904      	ldr	r1, [sp, #16]
 8011362:	4301      	orrs	r1, r0
 8011364:	f47f aec2 	bne.w	80110ec <_strtod_l+0x84>
 8011368:	2a00      	cmp	r2, #0
 801136a:	f47f aedb 	bne.w	8011124 <_strtod_l+0xbc>
 801136e:	2b69      	cmp	r3, #105	; 0x69
 8011370:	d027      	beq.n	80113c2 <_strtod_l+0x35a>
 8011372:	dc24      	bgt.n	80113be <_strtod_l+0x356>
 8011374:	2b49      	cmp	r3, #73	; 0x49
 8011376:	d024      	beq.n	80113c2 <_strtod_l+0x35a>
 8011378:	2b4e      	cmp	r3, #78	; 0x4e
 801137a:	f47f aed3 	bne.w	8011124 <_strtod_l+0xbc>
 801137e:	499e      	ldr	r1, [pc, #632]	; (80115f8 <_strtod_l+0x590>)
 8011380:	a81d      	add	r0, sp, #116	; 0x74
 8011382:	f002 f8bb 	bl	80134fc <__match>
 8011386:	2800      	cmp	r0, #0
 8011388:	f43f aecc 	beq.w	8011124 <_strtod_l+0xbc>
 801138c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801138e:	781b      	ldrb	r3, [r3, #0]
 8011390:	2b28      	cmp	r3, #40	; 0x28
 8011392:	d12d      	bne.n	80113f0 <_strtod_l+0x388>
 8011394:	4999      	ldr	r1, [pc, #612]	; (80115fc <_strtod_l+0x594>)
 8011396:	aa20      	add	r2, sp, #128	; 0x80
 8011398:	a81d      	add	r0, sp, #116	; 0x74
 801139a:	f002 f8c3 	bl	8013524 <__hexnan>
 801139e:	2805      	cmp	r0, #5
 80113a0:	d126      	bne.n	80113f0 <_strtod_l+0x388>
 80113a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80113a4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80113a8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80113ac:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80113b0:	e69c      	b.n	80110ec <_strtod_l+0x84>
 80113b2:	210a      	movs	r1, #10
 80113b4:	fb01 3e0e 	mla	lr, r1, lr, r3
 80113b8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80113bc:	e7b9      	b.n	8011332 <_strtod_l+0x2ca>
 80113be:	2b6e      	cmp	r3, #110	; 0x6e
 80113c0:	e7db      	b.n	801137a <_strtod_l+0x312>
 80113c2:	498f      	ldr	r1, [pc, #572]	; (8011600 <_strtod_l+0x598>)
 80113c4:	a81d      	add	r0, sp, #116	; 0x74
 80113c6:	f002 f899 	bl	80134fc <__match>
 80113ca:	2800      	cmp	r0, #0
 80113cc:	f43f aeaa 	beq.w	8011124 <_strtod_l+0xbc>
 80113d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80113d2:	498c      	ldr	r1, [pc, #560]	; (8011604 <_strtod_l+0x59c>)
 80113d4:	3b01      	subs	r3, #1
 80113d6:	a81d      	add	r0, sp, #116	; 0x74
 80113d8:	931d      	str	r3, [sp, #116]	; 0x74
 80113da:	f002 f88f 	bl	80134fc <__match>
 80113de:	b910      	cbnz	r0, 80113e6 <_strtod_l+0x37e>
 80113e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80113e2:	3301      	adds	r3, #1
 80113e4:	931d      	str	r3, [sp, #116]	; 0x74
 80113e6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8011614 <_strtod_l+0x5ac>
 80113ea:	f04f 0a00 	mov.w	sl, #0
 80113ee:	e67d      	b.n	80110ec <_strtod_l+0x84>
 80113f0:	4885      	ldr	r0, [pc, #532]	; (8011608 <_strtod_l+0x5a0>)
 80113f2:	f003 f8c9 	bl	8014588 <nan>
 80113f6:	ed8d 0b04 	vstr	d0, [sp, #16]
 80113fa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80113fe:	e675      	b.n	80110ec <_strtod_l+0x84>
 8011400:	9b07      	ldr	r3, [sp, #28]
 8011402:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011404:	1af3      	subs	r3, r6, r3
 8011406:	2f00      	cmp	r7, #0
 8011408:	bf08      	it	eq
 801140a:	462f      	moveq	r7, r5
 801140c:	2d10      	cmp	r5, #16
 801140e:	9308      	str	r3, [sp, #32]
 8011410:	46a8      	mov	r8, r5
 8011412:	bfa8      	it	ge
 8011414:	f04f 0810 	movge.w	r8, #16
 8011418:	f7ef f87c 	bl	8000514 <__aeabi_ui2d>
 801141c:	2d09      	cmp	r5, #9
 801141e:	4682      	mov	sl, r0
 8011420:	468b      	mov	fp, r1
 8011422:	dd13      	ble.n	801144c <_strtod_l+0x3e4>
 8011424:	4b79      	ldr	r3, [pc, #484]	; (801160c <_strtod_l+0x5a4>)
 8011426:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801142a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801142e:	f7ef f8eb 	bl	8000608 <__aeabi_dmul>
 8011432:	4682      	mov	sl, r0
 8011434:	4648      	mov	r0, r9
 8011436:	468b      	mov	fp, r1
 8011438:	f7ef f86c 	bl	8000514 <__aeabi_ui2d>
 801143c:	4602      	mov	r2, r0
 801143e:	460b      	mov	r3, r1
 8011440:	4650      	mov	r0, sl
 8011442:	4659      	mov	r1, fp
 8011444:	f7ee ff2a 	bl	800029c <__adddf3>
 8011448:	4682      	mov	sl, r0
 801144a:	468b      	mov	fp, r1
 801144c:	2d0f      	cmp	r5, #15
 801144e:	dc38      	bgt.n	80114c2 <_strtod_l+0x45a>
 8011450:	9b08      	ldr	r3, [sp, #32]
 8011452:	2b00      	cmp	r3, #0
 8011454:	f43f ae4a 	beq.w	80110ec <_strtod_l+0x84>
 8011458:	dd24      	ble.n	80114a4 <_strtod_l+0x43c>
 801145a:	2b16      	cmp	r3, #22
 801145c:	dc0b      	bgt.n	8011476 <_strtod_l+0x40e>
 801145e:	4d6b      	ldr	r5, [pc, #428]	; (801160c <_strtod_l+0x5a4>)
 8011460:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8011464:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011468:	4652      	mov	r2, sl
 801146a:	465b      	mov	r3, fp
 801146c:	f7ef f8cc 	bl	8000608 <__aeabi_dmul>
 8011470:	4682      	mov	sl, r0
 8011472:	468b      	mov	fp, r1
 8011474:	e63a      	b.n	80110ec <_strtod_l+0x84>
 8011476:	9a08      	ldr	r2, [sp, #32]
 8011478:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801147c:	4293      	cmp	r3, r2
 801147e:	db20      	blt.n	80114c2 <_strtod_l+0x45a>
 8011480:	4c62      	ldr	r4, [pc, #392]	; (801160c <_strtod_l+0x5a4>)
 8011482:	f1c5 050f 	rsb	r5, r5, #15
 8011486:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801148a:	4652      	mov	r2, sl
 801148c:	465b      	mov	r3, fp
 801148e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011492:	f7ef f8b9 	bl	8000608 <__aeabi_dmul>
 8011496:	9b08      	ldr	r3, [sp, #32]
 8011498:	1b5d      	subs	r5, r3, r5
 801149a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801149e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80114a2:	e7e3      	b.n	801146c <_strtod_l+0x404>
 80114a4:	9b08      	ldr	r3, [sp, #32]
 80114a6:	3316      	adds	r3, #22
 80114a8:	db0b      	blt.n	80114c2 <_strtod_l+0x45a>
 80114aa:	9b07      	ldr	r3, [sp, #28]
 80114ac:	4a57      	ldr	r2, [pc, #348]	; (801160c <_strtod_l+0x5a4>)
 80114ae:	1b9e      	subs	r6, r3, r6
 80114b0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80114b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80114b8:	4650      	mov	r0, sl
 80114ba:	4659      	mov	r1, fp
 80114bc:	f7ef f9ce 	bl	800085c <__aeabi_ddiv>
 80114c0:	e7d6      	b.n	8011470 <_strtod_l+0x408>
 80114c2:	9b08      	ldr	r3, [sp, #32]
 80114c4:	eba5 0808 	sub.w	r8, r5, r8
 80114c8:	4498      	add	r8, r3
 80114ca:	f1b8 0f00 	cmp.w	r8, #0
 80114ce:	dd71      	ble.n	80115b4 <_strtod_l+0x54c>
 80114d0:	f018 030f 	ands.w	r3, r8, #15
 80114d4:	d00a      	beq.n	80114ec <_strtod_l+0x484>
 80114d6:	494d      	ldr	r1, [pc, #308]	; (801160c <_strtod_l+0x5a4>)
 80114d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80114dc:	4652      	mov	r2, sl
 80114de:	465b      	mov	r3, fp
 80114e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80114e4:	f7ef f890 	bl	8000608 <__aeabi_dmul>
 80114e8:	4682      	mov	sl, r0
 80114ea:	468b      	mov	fp, r1
 80114ec:	f038 080f 	bics.w	r8, r8, #15
 80114f0:	d04d      	beq.n	801158e <_strtod_l+0x526>
 80114f2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80114f6:	dd22      	ble.n	801153e <_strtod_l+0x4d6>
 80114f8:	2500      	movs	r5, #0
 80114fa:	462e      	mov	r6, r5
 80114fc:	9509      	str	r5, [sp, #36]	; 0x24
 80114fe:	9507      	str	r5, [sp, #28]
 8011500:	2322      	movs	r3, #34	; 0x22
 8011502:	f8df b110 	ldr.w	fp, [pc, #272]	; 8011614 <_strtod_l+0x5ac>
 8011506:	6023      	str	r3, [r4, #0]
 8011508:	f04f 0a00 	mov.w	sl, #0
 801150c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801150e:	2b00      	cmp	r3, #0
 8011510:	f43f adec 	beq.w	80110ec <_strtod_l+0x84>
 8011514:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011516:	4620      	mov	r0, r4
 8011518:	f002 f980 	bl	801381c <_Bfree>
 801151c:	9907      	ldr	r1, [sp, #28]
 801151e:	4620      	mov	r0, r4
 8011520:	f002 f97c 	bl	801381c <_Bfree>
 8011524:	4631      	mov	r1, r6
 8011526:	4620      	mov	r0, r4
 8011528:	f002 f978 	bl	801381c <_Bfree>
 801152c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801152e:	4620      	mov	r0, r4
 8011530:	f002 f974 	bl	801381c <_Bfree>
 8011534:	4629      	mov	r1, r5
 8011536:	4620      	mov	r0, r4
 8011538:	f002 f970 	bl	801381c <_Bfree>
 801153c:	e5d6      	b.n	80110ec <_strtod_l+0x84>
 801153e:	2300      	movs	r3, #0
 8011540:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011544:	4650      	mov	r0, sl
 8011546:	4659      	mov	r1, fp
 8011548:	4699      	mov	r9, r3
 801154a:	f1b8 0f01 	cmp.w	r8, #1
 801154e:	dc21      	bgt.n	8011594 <_strtod_l+0x52c>
 8011550:	b10b      	cbz	r3, 8011556 <_strtod_l+0x4ee>
 8011552:	4682      	mov	sl, r0
 8011554:	468b      	mov	fp, r1
 8011556:	4b2e      	ldr	r3, [pc, #184]	; (8011610 <_strtod_l+0x5a8>)
 8011558:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801155c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8011560:	4652      	mov	r2, sl
 8011562:	465b      	mov	r3, fp
 8011564:	e9d9 0100 	ldrd	r0, r1, [r9]
 8011568:	f7ef f84e 	bl	8000608 <__aeabi_dmul>
 801156c:	4b29      	ldr	r3, [pc, #164]	; (8011614 <_strtod_l+0x5ac>)
 801156e:	460a      	mov	r2, r1
 8011570:	400b      	ands	r3, r1
 8011572:	4929      	ldr	r1, [pc, #164]	; (8011618 <_strtod_l+0x5b0>)
 8011574:	428b      	cmp	r3, r1
 8011576:	4682      	mov	sl, r0
 8011578:	d8be      	bhi.n	80114f8 <_strtod_l+0x490>
 801157a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801157e:	428b      	cmp	r3, r1
 8011580:	bf86      	itte	hi
 8011582:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801161c <_strtod_l+0x5b4>
 8011586:	f04f 3aff 	movhi.w	sl, #4294967295
 801158a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801158e:	2300      	movs	r3, #0
 8011590:	9304      	str	r3, [sp, #16]
 8011592:	e081      	b.n	8011698 <_strtod_l+0x630>
 8011594:	f018 0f01 	tst.w	r8, #1
 8011598:	d007      	beq.n	80115aa <_strtod_l+0x542>
 801159a:	4b1d      	ldr	r3, [pc, #116]	; (8011610 <_strtod_l+0x5a8>)
 801159c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80115a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115a4:	f7ef f830 	bl	8000608 <__aeabi_dmul>
 80115a8:	2301      	movs	r3, #1
 80115aa:	f109 0901 	add.w	r9, r9, #1
 80115ae:	ea4f 0868 	mov.w	r8, r8, asr #1
 80115b2:	e7ca      	b.n	801154a <_strtod_l+0x4e2>
 80115b4:	d0eb      	beq.n	801158e <_strtod_l+0x526>
 80115b6:	f1c8 0800 	rsb	r8, r8, #0
 80115ba:	f018 020f 	ands.w	r2, r8, #15
 80115be:	d00a      	beq.n	80115d6 <_strtod_l+0x56e>
 80115c0:	4b12      	ldr	r3, [pc, #72]	; (801160c <_strtod_l+0x5a4>)
 80115c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80115c6:	4650      	mov	r0, sl
 80115c8:	4659      	mov	r1, fp
 80115ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115ce:	f7ef f945 	bl	800085c <__aeabi_ddiv>
 80115d2:	4682      	mov	sl, r0
 80115d4:	468b      	mov	fp, r1
 80115d6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80115da:	d0d8      	beq.n	801158e <_strtod_l+0x526>
 80115dc:	f1b8 0f1f 	cmp.w	r8, #31
 80115e0:	dd1e      	ble.n	8011620 <_strtod_l+0x5b8>
 80115e2:	2500      	movs	r5, #0
 80115e4:	462e      	mov	r6, r5
 80115e6:	9509      	str	r5, [sp, #36]	; 0x24
 80115e8:	9507      	str	r5, [sp, #28]
 80115ea:	2322      	movs	r3, #34	; 0x22
 80115ec:	f04f 0a00 	mov.w	sl, #0
 80115f0:	f04f 0b00 	mov.w	fp, #0
 80115f4:	6023      	str	r3, [r4, #0]
 80115f6:	e789      	b.n	801150c <_strtod_l+0x4a4>
 80115f8:	080165e6 	.word	0x080165e6
 80115fc:	08016628 	.word	0x08016628
 8011600:	080165de 	.word	0x080165de
 8011604:	0801666b 	.word	0x0801666b
 8011608:	080164bf 	.word	0x080164bf
 801160c:	08016868 	.word	0x08016868
 8011610:	08016840 	.word	0x08016840
 8011614:	7ff00000 	.word	0x7ff00000
 8011618:	7ca00000 	.word	0x7ca00000
 801161c:	7fefffff 	.word	0x7fefffff
 8011620:	f018 0310 	ands.w	r3, r8, #16
 8011624:	bf18      	it	ne
 8011626:	236a      	movne	r3, #106	; 0x6a
 8011628:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80119e0 <_strtod_l+0x978>
 801162c:	9304      	str	r3, [sp, #16]
 801162e:	4650      	mov	r0, sl
 8011630:	4659      	mov	r1, fp
 8011632:	2300      	movs	r3, #0
 8011634:	f018 0f01 	tst.w	r8, #1
 8011638:	d004      	beq.n	8011644 <_strtod_l+0x5dc>
 801163a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801163e:	f7ee ffe3 	bl	8000608 <__aeabi_dmul>
 8011642:	2301      	movs	r3, #1
 8011644:	ea5f 0868 	movs.w	r8, r8, asr #1
 8011648:	f109 0908 	add.w	r9, r9, #8
 801164c:	d1f2      	bne.n	8011634 <_strtod_l+0x5cc>
 801164e:	b10b      	cbz	r3, 8011654 <_strtod_l+0x5ec>
 8011650:	4682      	mov	sl, r0
 8011652:	468b      	mov	fp, r1
 8011654:	9b04      	ldr	r3, [sp, #16]
 8011656:	b1bb      	cbz	r3, 8011688 <_strtod_l+0x620>
 8011658:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801165c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011660:	2b00      	cmp	r3, #0
 8011662:	4659      	mov	r1, fp
 8011664:	dd10      	ble.n	8011688 <_strtod_l+0x620>
 8011666:	2b1f      	cmp	r3, #31
 8011668:	f340 8128 	ble.w	80118bc <_strtod_l+0x854>
 801166c:	2b34      	cmp	r3, #52	; 0x34
 801166e:	bfde      	ittt	le
 8011670:	3b20      	suble	r3, #32
 8011672:	f04f 32ff 	movle.w	r2, #4294967295
 8011676:	fa02 f303 	lslle.w	r3, r2, r3
 801167a:	f04f 0a00 	mov.w	sl, #0
 801167e:	bfcc      	ite	gt
 8011680:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011684:	ea03 0b01 	andle.w	fp, r3, r1
 8011688:	2200      	movs	r2, #0
 801168a:	2300      	movs	r3, #0
 801168c:	4650      	mov	r0, sl
 801168e:	4659      	mov	r1, fp
 8011690:	f7ef fa22 	bl	8000ad8 <__aeabi_dcmpeq>
 8011694:	2800      	cmp	r0, #0
 8011696:	d1a4      	bne.n	80115e2 <_strtod_l+0x57a>
 8011698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801169a:	9300      	str	r3, [sp, #0]
 801169c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801169e:	462b      	mov	r3, r5
 80116a0:	463a      	mov	r2, r7
 80116a2:	4620      	mov	r0, r4
 80116a4:	f002 f926 	bl	80138f4 <__s2b>
 80116a8:	9009      	str	r0, [sp, #36]	; 0x24
 80116aa:	2800      	cmp	r0, #0
 80116ac:	f43f af24 	beq.w	80114f8 <_strtod_l+0x490>
 80116b0:	9b07      	ldr	r3, [sp, #28]
 80116b2:	1b9e      	subs	r6, r3, r6
 80116b4:	9b08      	ldr	r3, [sp, #32]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	bfb4      	ite	lt
 80116ba:	4633      	movlt	r3, r6
 80116bc:	2300      	movge	r3, #0
 80116be:	9310      	str	r3, [sp, #64]	; 0x40
 80116c0:	9b08      	ldr	r3, [sp, #32]
 80116c2:	2500      	movs	r5, #0
 80116c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80116c8:	9318      	str	r3, [sp, #96]	; 0x60
 80116ca:	462e      	mov	r6, r5
 80116cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116ce:	4620      	mov	r0, r4
 80116d0:	6859      	ldr	r1, [r3, #4]
 80116d2:	f002 f863 	bl	801379c <_Balloc>
 80116d6:	9007      	str	r0, [sp, #28]
 80116d8:	2800      	cmp	r0, #0
 80116da:	f43f af11 	beq.w	8011500 <_strtod_l+0x498>
 80116de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116e0:	691a      	ldr	r2, [r3, #16]
 80116e2:	3202      	adds	r2, #2
 80116e4:	f103 010c 	add.w	r1, r3, #12
 80116e8:	0092      	lsls	r2, r2, #2
 80116ea:	300c      	adds	r0, #12
 80116ec:	f7fe fc8e 	bl	801000c <memcpy>
 80116f0:	ec4b ab10 	vmov	d0, sl, fp
 80116f4:	aa20      	add	r2, sp, #128	; 0x80
 80116f6:	a91f      	add	r1, sp, #124	; 0x7c
 80116f8:	4620      	mov	r0, r4
 80116fa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80116fe:	f002 fc35 	bl	8013f6c <__d2b>
 8011702:	901e      	str	r0, [sp, #120]	; 0x78
 8011704:	2800      	cmp	r0, #0
 8011706:	f43f aefb 	beq.w	8011500 <_strtod_l+0x498>
 801170a:	2101      	movs	r1, #1
 801170c:	4620      	mov	r0, r4
 801170e:	f002 f98b 	bl	8013a28 <__i2b>
 8011712:	4606      	mov	r6, r0
 8011714:	2800      	cmp	r0, #0
 8011716:	f43f aef3 	beq.w	8011500 <_strtod_l+0x498>
 801171a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801171c:	9904      	ldr	r1, [sp, #16]
 801171e:	2b00      	cmp	r3, #0
 8011720:	bfab      	itete	ge
 8011722:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8011724:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8011726:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8011728:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801172c:	bfac      	ite	ge
 801172e:	eb03 0902 	addge.w	r9, r3, r2
 8011732:	1ad7      	sublt	r7, r2, r3
 8011734:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011736:	eba3 0801 	sub.w	r8, r3, r1
 801173a:	4490      	add	r8, r2
 801173c:	4ba3      	ldr	r3, [pc, #652]	; (80119cc <_strtod_l+0x964>)
 801173e:	f108 38ff 	add.w	r8, r8, #4294967295
 8011742:	4598      	cmp	r8, r3
 8011744:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011748:	f280 80cc 	bge.w	80118e4 <_strtod_l+0x87c>
 801174c:	eba3 0308 	sub.w	r3, r3, r8
 8011750:	2b1f      	cmp	r3, #31
 8011752:	eba2 0203 	sub.w	r2, r2, r3
 8011756:	f04f 0101 	mov.w	r1, #1
 801175a:	f300 80b6 	bgt.w	80118ca <_strtod_l+0x862>
 801175e:	fa01 f303 	lsl.w	r3, r1, r3
 8011762:	9311      	str	r3, [sp, #68]	; 0x44
 8011764:	2300      	movs	r3, #0
 8011766:	930c      	str	r3, [sp, #48]	; 0x30
 8011768:	eb09 0802 	add.w	r8, r9, r2
 801176c:	9b04      	ldr	r3, [sp, #16]
 801176e:	45c1      	cmp	r9, r8
 8011770:	4417      	add	r7, r2
 8011772:	441f      	add	r7, r3
 8011774:	464b      	mov	r3, r9
 8011776:	bfa8      	it	ge
 8011778:	4643      	movge	r3, r8
 801177a:	42bb      	cmp	r3, r7
 801177c:	bfa8      	it	ge
 801177e:	463b      	movge	r3, r7
 8011780:	2b00      	cmp	r3, #0
 8011782:	bfc2      	ittt	gt
 8011784:	eba8 0803 	subgt.w	r8, r8, r3
 8011788:	1aff      	subgt	r7, r7, r3
 801178a:	eba9 0903 	subgt.w	r9, r9, r3
 801178e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011790:	2b00      	cmp	r3, #0
 8011792:	dd17      	ble.n	80117c4 <_strtod_l+0x75c>
 8011794:	4631      	mov	r1, r6
 8011796:	461a      	mov	r2, r3
 8011798:	4620      	mov	r0, r4
 801179a:	f002 fa01 	bl	8013ba0 <__pow5mult>
 801179e:	4606      	mov	r6, r0
 80117a0:	2800      	cmp	r0, #0
 80117a2:	f43f aead 	beq.w	8011500 <_strtod_l+0x498>
 80117a6:	4601      	mov	r1, r0
 80117a8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80117aa:	4620      	mov	r0, r4
 80117ac:	f002 f952 	bl	8013a54 <__multiply>
 80117b0:	900f      	str	r0, [sp, #60]	; 0x3c
 80117b2:	2800      	cmp	r0, #0
 80117b4:	f43f aea4 	beq.w	8011500 <_strtod_l+0x498>
 80117b8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80117ba:	4620      	mov	r0, r4
 80117bc:	f002 f82e 	bl	801381c <_Bfree>
 80117c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80117c2:	931e      	str	r3, [sp, #120]	; 0x78
 80117c4:	f1b8 0f00 	cmp.w	r8, #0
 80117c8:	f300 8091 	bgt.w	80118ee <_strtod_l+0x886>
 80117cc:	9b08      	ldr	r3, [sp, #32]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	dd08      	ble.n	80117e4 <_strtod_l+0x77c>
 80117d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80117d4:	9907      	ldr	r1, [sp, #28]
 80117d6:	4620      	mov	r0, r4
 80117d8:	f002 f9e2 	bl	8013ba0 <__pow5mult>
 80117dc:	9007      	str	r0, [sp, #28]
 80117de:	2800      	cmp	r0, #0
 80117e0:	f43f ae8e 	beq.w	8011500 <_strtod_l+0x498>
 80117e4:	2f00      	cmp	r7, #0
 80117e6:	dd08      	ble.n	80117fa <_strtod_l+0x792>
 80117e8:	9907      	ldr	r1, [sp, #28]
 80117ea:	463a      	mov	r2, r7
 80117ec:	4620      	mov	r0, r4
 80117ee:	f002 fa31 	bl	8013c54 <__lshift>
 80117f2:	9007      	str	r0, [sp, #28]
 80117f4:	2800      	cmp	r0, #0
 80117f6:	f43f ae83 	beq.w	8011500 <_strtod_l+0x498>
 80117fa:	f1b9 0f00 	cmp.w	r9, #0
 80117fe:	dd08      	ble.n	8011812 <_strtod_l+0x7aa>
 8011800:	4631      	mov	r1, r6
 8011802:	464a      	mov	r2, r9
 8011804:	4620      	mov	r0, r4
 8011806:	f002 fa25 	bl	8013c54 <__lshift>
 801180a:	4606      	mov	r6, r0
 801180c:	2800      	cmp	r0, #0
 801180e:	f43f ae77 	beq.w	8011500 <_strtod_l+0x498>
 8011812:	9a07      	ldr	r2, [sp, #28]
 8011814:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011816:	4620      	mov	r0, r4
 8011818:	f002 faa4 	bl	8013d64 <__mdiff>
 801181c:	4605      	mov	r5, r0
 801181e:	2800      	cmp	r0, #0
 8011820:	f43f ae6e 	beq.w	8011500 <_strtod_l+0x498>
 8011824:	68c3      	ldr	r3, [r0, #12]
 8011826:	930f      	str	r3, [sp, #60]	; 0x3c
 8011828:	2300      	movs	r3, #0
 801182a:	60c3      	str	r3, [r0, #12]
 801182c:	4631      	mov	r1, r6
 801182e:	f002 fa7d 	bl	8013d2c <__mcmp>
 8011832:	2800      	cmp	r0, #0
 8011834:	da65      	bge.n	8011902 <_strtod_l+0x89a>
 8011836:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011838:	ea53 030a 	orrs.w	r3, r3, sl
 801183c:	f040 8087 	bne.w	801194e <_strtod_l+0x8e6>
 8011840:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011844:	2b00      	cmp	r3, #0
 8011846:	f040 8082 	bne.w	801194e <_strtod_l+0x8e6>
 801184a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801184e:	0d1b      	lsrs	r3, r3, #20
 8011850:	051b      	lsls	r3, r3, #20
 8011852:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011856:	d97a      	bls.n	801194e <_strtod_l+0x8e6>
 8011858:	696b      	ldr	r3, [r5, #20]
 801185a:	b913      	cbnz	r3, 8011862 <_strtod_l+0x7fa>
 801185c:	692b      	ldr	r3, [r5, #16]
 801185e:	2b01      	cmp	r3, #1
 8011860:	dd75      	ble.n	801194e <_strtod_l+0x8e6>
 8011862:	4629      	mov	r1, r5
 8011864:	2201      	movs	r2, #1
 8011866:	4620      	mov	r0, r4
 8011868:	f002 f9f4 	bl	8013c54 <__lshift>
 801186c:	4631      	mov	r1, r6
 801186e:	4605      	mov	r5, r0
 8011870:	f002 fa5c 	bl	8013d2c <__mcmp>
 8011874:	2800      	cmp	r0, #0
 8011876:	dd6a      	ble.n	801194e <_strtod_l+0x8e6>
 8011878:	9904      	ldr	r1, [sp, #16]
 801187a:	4a55      	ldr	r2, [pc, #340]	; (80119d0 <_strtod_l+0x968>)
 801187c:	465b      	mov	r3, fp
 801187e:	2900      	cmp	r1, #0
 8011880:	f000 8085 	beq.w	801198e <_strtod_l+0x926>
 8011884:	ea02 010b 	and.w	r1, r2, fp
 8011888:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801188c:	dc7f      	bgt.n	801198e <_strtod_l+0x926>
 801188e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011892:	f77f aeaa 	ble.w	80115ea <_strtod_l+0x582>
 8011896:	4a4f      	ldr	r2, [pc, #316]	; (80119d4 <_strtod_l+0x96c>)
 8011898:	2300      	movs	r3, #0
 801189a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801189e:	4650      	mov	r0, sl
 80118a0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80118a4:	4659      	mov	r1, fp
 80118a6:	f7ee feaf 	bl	8000608 <__aeabi_dmul>
 80118aa:	460b      	mov	r3, r1
 80118ac:	4303      	orrs	r3, r0
 80118ae:	bf08      	it	eq
 80118b0:	2322      	moveq	r3, #34	; 0x22
 80118b2:	4682      	mov	sl, r0
 80118b4:	468b      	mov	fp, r1
 80118b6:	bf08      	it	eq
 80118b8:	6023      	streq	r3, [r4, #0]
 80118ba:	e62b      	b.n	8011514 <_strtod_l+0x4ac>
 80118bc:	f04f 32ff 	mov.w	r2, #4294967295
 80118c0:	fa02 f303 	lsl.w	r3, r2, r3
 80118c4:	ea03 0a0a 	and.w	sl, r3, sl
 80118c8:	e6de      	b.n	8011688 <_strtod_l+0x620>
 80118ca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80118ce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80118d2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80118d6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80118da:	fa01 f308 	lsl.w	r3, r1, r8
 80118de:	930c      	str	r3, [sp, #48]	; 0x30
 80118e0:	9111      	str	r1, [sp, #68]	; 0x44
 80118e2:	e741      	b.n	8011768 <_strtod_l+0x700>
 80118e4:	2300      	movs	r3, #0
 80118e6:	930c      	str	r3, [sp, #48]	; 0x30
 80118e8:	2301      	movs	r3, #1
 80118ea:	9311      	str	r3, [sp, #68]	; 0x44
 80118ec:	e73c      	b.n	8011768 <_strtod_l+0x700>
 80118ee:	991e      	ldr	r1, [sp, #120]	; 0x78
 80118f0:	4642      	mov	r2, r8
 80118f2:	4620      	mov	r0, r4
 80118f4:	f002 f9ae 	bl	8013c54 <__lshift>
 80118f8:	901e      	str	r0, [sp, #120]	; 0x78
 80118fa:	2800      	cmp	r0, #0
 80118fc:	f47f af66 	bne.w	80117cc <_strtod_l+0x764>
 8011900:	e5fe      	b.n	8011500 <_strtod_l+0x498>
 8011902:	465f      	mov	r7, fp
 8011904:	d16e      	bne.n	80119e4 <_strtod_l+0x97c>
 8011906:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011908:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801190c:	b342      	cbz	r2, 8011960 <_strtod_l+0x8f8>
 801190e:	4a32      	ldr	r2, [pc, #200]	; (80119d8 <_strtod_l+0x970>)
 8011910:	4293      	cmp	r3, r2
 8011912:	d128      	bne.n	8011966 <_strtod_l+0x8fe>
 8011914:	9b04      	ldr	r3, [sp, #16]
 8011916:	4650      	mov	r0, sl
 8011918:	b1eb      	cbz	r3, 8011956 <_strtod_l+0x8ee>
 801191a:	4a2d      	ldr	r2, [pc, #180]	; (80119d0 <_strtod_l+0x968>)
 801191c:	403a      	ands	r2, r7
 801191e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8011922:	f04f 31ff 	mov.w	r1, #4294967295
 8011926:	d819      	bhi.n	801195c <_strtod_l+0x8f4>
 8011928:	0d12      	lsrs	r2, r2, #20
 801192a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801192e:	fa01 f303 	lsl.w	r3, r1, r3
 8011932:	4298      	cmp	r0, r3
 8011934:	d117      	bne.n	8011966 <_strtod_l+0x8fe>
 8011936:	4b29      	ldr	r3, [pc, #164]	; (80119dc <_strtod_l+0x974>)
 8011938:	429f      	cmp	r7, r3
 801193a:	d102      	bne.n	8011942 <_strtod_l+0x8da>
 801193c:	3001      	adds	r0, #1
 801193e:	f43f addf 	beq.w	8011500 <_strtod_l+0x498>
 8011942:	4b23      	ldr	r3, [pc, #140]	; (80119d0 <_strtod_l+0x968>)
 8011944:	403b      	ands	r3, r7
 8011946:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801194a:	f04f 0a00 	mov.w	sl, #0
 801194e:	9b04      	ldr	r3, [sp, #16]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d1a0      	bne.n	8011896 <_strtod_l+0x82e>
 8011954:	e5de      	b.n	8011514 <_strtod_l+0x4ac>
 8011956:	f04f 33ff 	mov.w	r3, #4294967295
 801195a:	e7ea      	b.n	8011932 <_strtod_l+0x8ca>
 801195c:	460b      	mov	r3, r1
 801195e:	e7e8      	b.n	8011932 <_strtod_l+0x8ca>
 8011960:	ea53 030a 	orrs.w	r3, r3, sl
 8011964:	d088      	beq.n	8011878 <_strtod_l+0x810>
 8011966:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011968:	b1db      	cbz	r3, 80119a2 <_strtod_l+0x93a>
 801196a:	423b      	tst	r3, r7
 801196c:	d0ef      	beq.n	801194e <_strtod_l+0x8e6>
 801196e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011970:	9a04      	ldr	r2, [sp, #16]
 8011972:	4650      	mov	r0, sl
 8011974:	4659      	mov	r1, fp
 8011976:	b1c3      	cbz	r3, 80119aa <_strtod_l+0x942>
 8011978:	f7ff fb58 	bl	801102c <sulp>
 801197c:	4602      	mov	r2, r0
 801197e:	460b      	mov	r3, r1
 8011980:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011984:	f7ee fc8a 	bl	800029c <__adddf3>
 8011988:	4682      	mov	sl, r0
 801198a:	468b      	mov	fp, r1
 801198c:	e7df      	b.n	801194e <_strtod_l+0x8e6>
 801198e:	4013      	ands	r3, r2
 8011990:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011994:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011998:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801199c:	f04f 3aff 	mov.w	sl, #4294967295
 80119a0:	e7d5      	b.n	801194e <_strtod_l+0x8e6>
 80119a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80119a4:	ea13 0f0a 	tst.w	r3, sl
 80119a8:	e7e0      	b.n	801196c <_strtod_l+0x904>
 80119aa:	f7ff fb3f 	bl	801102c <sulp>
 80119ae:	4602      	mov	r2, r0
 80119b0:	460b      	mov	r3, r1
 80119b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80119b6:	f7ee fc6f 	bl	8000298 <__aeabi_dsub>
 80119ba:	2200      	movs	r2, #0
 80119bc:	2300      	movs	r3, #0
 80119be:	4682      	mov	sl, r0
 80119c0:	468b      	mov	fp, r1
 80119c2:	f7ef f889 	bl	8000ad8 <__aeabi_dcmpeq>
 80119c6:	2800      	cmp	r0, #0
 80119c8:	d0c1      	beq.n	801194e <_strtod_l+0x8e6>
 80119ca:	e60e      	b.n	80115ea <_strtod_l+0x582>
 80119cc:	fffffc02 	.word	0xfffffc02
 80119d0:	7ff00000 	.word	0x7ff00000
 80119d4:	39500000 	.word	0x39500000
 80119d8:	000fffff 	.word	0x000fffff
 80119dc:	7fefffff 	.word	0x7fefffff
 80119e0:	08016640 	.word	0x08016640
 80119e4:	4631      	mov	r1, r6
 80119e6:	4628      	mov	r0, r5
 80119e8:	f002 fb1c 	bl	8014024 <__ratio>
 80119ec:	ec59 8b10 	vmov	r8, r9, d0
 80119f0:	ee10 0a10 	vmov	r0, s0
 80119f4:	2200      	movs	r2, #0
 80119f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80119fa:	4649      	mov	r1, r9
 80119fc:	f7ef f880 	bl	8000b00 <__aeabi_dcmple>
 8011a00:	2800      	cmp	r0, #0
 8011a02:	d07c      	beq.n	8011afe <_strtod_l+0xa96>
 8011a04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d04c      	beq.n	8011aa4 <_strtod_l+0xa3c>
 8011a0a:	4b95      	ldr	r3, [pc, #596]	; (8011c60 <_strtod_l+0xbf8>)
 8011a0c:	2200      	movs	r2, #0
 8011a0e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011a12:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8011c60 <_strtod_l+0xbf8>
 8011a16:	f04f 0800 	mov.w	r8, #0
 8011a1a:	4b92      	ldr	r3, [pc, #584]	; (8011c64 <_strtod_l+0xbfc>)
 8011a1c:	403b      	ands	r3, r7
 8011a1e:	9311      	str	r3, [sp, #68]	; 0x44
 8011a20:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011a22:	4b91      	ldr	r3, [pc, #580]	; (8011c68 <_strtod_l+0xc00>)
 8011a24:	429a      	cmp	r2, r3
 8011a26:	f040 80b2 	bne.w	8011b8e <_strtod_l+0xb26>
 8011a2a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011a2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011a32:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8011a36:	ec4b ab10 	vmov	d0, sl, fp
 8011a3a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8011a3e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011a42:	f002 fa17 	bl	8013e74 <__ulp>
 8011a46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011a4a:	ec53 2b10 	vmov	r2, r3, d0
 8011a4e:	f7ee fddb 	bl	8000608 <__aeabi_dmul>
 8011a52:	4652      	mov	r2, sl
 8011a54:	465b      	mov	r3, fp
 8011a56:	f7ee fc21 	bl	800029c <__adddf3>
 8011a5a:	460b      	mov	r3, r1
 8011a5c:	4981      	ldr	r1, [pc, #516]	; (8011c64 <_strtod_l+0xbfc>)
 8011a5e:	4a83      	ldr	r2, [pc, #524]	; (8011c6c <_strtod_l+0xc04>)
 8011a60:	4019      	ands	r1, r3
 8011a62:	4291      	cmp	r1, r2
 8011a64:	4682      	mov	sl, r0
 8011a66:	d95e      	bls.n	8011b26 <_strtod_l+0xabe>
 8011a68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a6a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8011a6e:	4293      	cmp	r3, r2
 8011a70:	d103      	bne.n	8011a7a <_strtod_l+0xa12>
 8011a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a74:	3301      	adds	r3, #1
 8011a76:	f43f ad43 	beq.w	8011500 <_strtod_l+0x498>
 8011a7a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8011c78 <_strtod_l+0xc10>
 8011a7e:	f04f 3aff 	mov.w	sl, #4294967295
 8011a82:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011a84:	4620      	mov	r0, r4
 8011a86:	f001 fec9 	bl	801381c <_Bfree>
 8011a8a:	9907      	ldr	r1, [sp, #28]
 8011a8c:	4620      	mov	r0, r4
 8011a8e:	f001 fec5 	bl	801381c <_Bfree>
 8011a92:	4631      	mov	r1, r6
 8011a94:	4620      	mov	r0, r4
 8011a96:	f001 fec1 	bl	801381c <_Bfree>
 8011a9a:	4629      	mov	r1, r5
 8011a9c:	4620      	mov	r0, r4
 8011a9e:	f001 febd 	bl	801381c <_Bfree>
 8011aa2:	e613      	b.n	80116cc <_strtod_l+0x664>
 8011aa4:	f1ba 0f00 	cmp.w	sl, #0
 8011aa8:	d11b      	bne.n	8011ae2 <_strtod_l+0xa7a>
 8011aaa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011aae:	b9f3      	cbnz	r3, 8011aee <_strtod_l+0xa86>
 8011ab0:	4b6b      	ldr	r3, [pc, #428]	; (8011c60 <_strtod_l+0xbf8>)
 8011ab2:	2200      	movs	r2, #0
 8011ab4:	4640      	mov	r0, r8
 8011ab6:	4649      	mov	r1, r9
 8011ab8:	f7ef f818 	bl	8000aec <__aeabi_dcmplt>
 8011abc:	b9d0      	cbnz	r0, 8011af4 <_strtod_l+0xa8c>
 8011abe:	4640      	mov	r0, r8
 8011ac0:	4649      	mov	r1, r9
 8011ac2:	4b6b      	ldr	r3, [pc, #428]	; (8011c70 <_strtod_l+0xc08>)
 8011ac4:	2200      	movs	r2, #0
 8011ac6:	f7ee fd9f 	bl	8000608 <__aeabi_dmul>
 8011aca:	4680      	mov	r8, r0
 8011acc:	4689      	mov	r9, r1
 8011ace:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011ad2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8011ad6:	931b      	str	r3, [sp, #108]	; 0x6c
 8011ad8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8011adc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011ae0:	e79b      	b.n	8011a1a <_strtod_l+0x9b2>
 8011ae2:	f1ba 0f01 	cmp.w	sl, #1
 8011ae6:	d102      	bne.n	8011aee <_strtod_l+0xa86>
 8011ae8:	2f00      	cmp	r7, #0
 8011aea:	f43f ad7e 	beq.w	80115ea <_strtod_l+0x582>
 8011aee:	4b61      	ldr	r3, [pc, #388]	; (8011c74 <_strtod_l+0xc0c>)
 8011af0:	2200      	movs	r2, #0
 8011af2:	e78c      	b.n	8011a0e <_strtod_l+0x9a6>
 8011af4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8011c70 <_strtod_l+0xc08>
 8011af8:	f04f 0800 	mov.w	r8, #0
 8011afc:	e7e7      	b.n	8011ace <_strtod_l+0xa66>
 8011afe:	4b5c      	ldr	r3, [pc, #368]	; (8011c70 <_strtod_l+0xc08>)
 8011b00:	4640      	mov	r0, r8
 8011b02:	4649      	mov	r1, r9
 8011b04:	2200      	movs	r2, #0
 8011b06:	f7ee fd7f 	bl	8000608 <__aeabi_dmul>
 8011b0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011b0c:	4680      	mov	r8, r0
 8011b0e:	4689      	mov	r9, r1
 8011b10:	b933      	cbnz	r3, 8011b20 <_strtod_l+0xab8>
 8011b12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011b16:	9012      	str	r0, [sp, #72]	; 0x48
 8011b18:	9313      	str	r3, [sp, #76]	; 0x4c
 8011b1a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8011b1e:	e7dd      	b.n	8011adc <_strtod_l+0xa74>
 8011b20:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8011b24:	e7f9      	b.n	8011b1a <_strtod_l+0xab2>
 8011b26:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8011b2a:	9b04      	ldr	r3, [sp, #16]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d1a8      	bne.n	8011a82 <_strtod_l+0xa1a>
 8011b30:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011b34:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011b36:	0d1b      	lsrs	r3, r3, #20
 8011b38:	051b      	lsls	r3, r3, #20
 8011b3a:	429a      	cmp	r2, r3
 8011b3c:	d1a1      	bne.n	8011a82 <_strtod_l+0xa1a>
 8011b3e:	4640      	mov	r0, r8
 8011b40:	4649      	mov	r1, r9
 8011b42:	f7ef f8c1 	bl	8000cc8 <__aeabi_d2lz>
 8011b46:	f7ee fd31 	bl	80005ac <__aeabi_l2d>
 8011b4a:	4602      	mov	r2, r0
 8011b4c:	460b      	mov	r3, r1
 8011b4e:	4640      	mov	r0, r8
 8011b50:	4649      	mov	r1, r9
 8011b52:	f7ee fba1 	bl	8000298 <__aeabi_dsub>
 8011b56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011b58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011b5c:	ea43 030a 	orr.w	r3, r3, sl
 8011b60:	4313      	orrs	r3, r2
 8011b62:	4680      	mov	r8, r0
 8011b64:	4689      	mov	r9, r1
 8011b66:	d053      	beq.n	8011c10 <_strtod_l+0xba8>
 8011b68:	a335      	add	r3, pc, #212	; (adr r3, 8011c40 <_strtod_l+0xbd8>)
 8011b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b6e:	f7ee ffbd 	bl	8000aec <__aeabi_dcmplt>
 8011b72:	2800      	cmp	r0, #0
 8011b74:	f47f acce 	bne.w	8011514 <_strtod_l+0x4ac>
 8011b78:	a333      	add	r3, pc, #204	; (adr r3, 8011c48 <_strtod_l+0xbe0>)
 8011b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b7e:	4640      	mov	r0, r8
 8011b80:	4649      	mov	r1, r9
 8011b82:	f7ee ffd1 	bl	8000b28 <__aeabi_dcmpgt>
 8011b86:	2800      	cmp	r0, #0
 8011b88:	f43f af7b 	beq.w	8011a82 <_strtod_l+0xa1a>
 8011b8c:	e4c2      	b.n	8011514 <_strtod_l+0x4ac>
 8011b8e:	9b04      	ldr	r3, [sp, #16]
 8011b90:	b333      	cbz	r3, 8011be0 <_strtod_l+0xb78>
 8011b92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011b94:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011b98:	d822      	bhi.n	8011be0 <_strtod_l+0xb78>
 8011b9a:	a32d      	add	r3, pc, #180	; (adr r3, 8011c50 <_strtod_l+0xbe8>)
 8011b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ba0:	4640      	mov	r0, r8
 8011ba2:	4649      	mov	r1, r9
 8011ba4:	f7ee ffac 	bl	8000b00 <__aeabi_dcmple>
 8011ba8:	b1a0      	cbz	r0, 8011bd4 <_strtod_l+0xb6c>
 8011baa:	4649      	mov	r1, r9
 8011bac:	4640      	mov	r0, r8
 8011bae:	f7ef f803 	bl	8000bb8 <__aeabi_d2uiz>
 8011bb2:	2801      	cmp	r0, #1
 8011bb4:	bf38      	it	cc
 8011bb6:	2001      	movcc	r0, #1
 8011bb8:	f7ee fcac 	bl	8000514 <__aeabi_ui2d>
 8011bbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011bbe:	4680      	mov	r8, r0
 8011bc0:	4689      	mov	r9, r1
 8011bc2:	bb13      	cbnz	r3, 8011c0a <_strtod_l+0xba2>
 8011bc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011bc8:	9014      	str	r0, [sp, #80]	; 0x50
 8011bca:	9315      	str	r3, [sp, #84]	; 0x54
 8011bcc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011bd0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011bd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011bd6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011bd8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011bdc:	1a9b      	subs	r3, r3, r2
 8011bde:	930d      	str	r3, [sp, #52]	; 0x34
 8011be0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011be4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011be8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011bec:	f002 f942 	bl	8013e74 <__ulp>
 8011bf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011bf4:	ec53 2b10 	vmov	r2, r3, d0
 8011bf8:	f7ee fd06 	bl	8000608 <__aeabi_dmul>
 8011bfc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011c00:	f7ee fb4c 	bl	800029c <__adddf3>
 8011c04:	4682      	mov	sl, r0
 8011c06:	468b      	mov	fp, r1
 8011c08:	e78f      	b.n	8011b2a <_strtod_l+0xac2>
 8011c0a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8011c0e:	e7dd      	b.n	8011bcc <_strtod_l+0xb64>
 8011c10:	a311      	add	r3, pc, #68	; (adr r3, 8011c58 <_strtod_l+0xbf0>)
 8011c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c16:	f7ee ff69 	bl	8000aec <__aeabi_dcmplt>
 8011c1a:	e7b4      	b.n	8011b86 <_strtod_l+0xb1e>
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	930e      	str	r3, [sp, #56]	; 0x38
 8011c20:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011c22:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011c24:	6013      	str	r3, [r2, #0]
 8011c26:	f7ff ba65 	b.w	80110f4 <_strtod_l+0x8c>
 8011c2a:	2b65      	cmp	r3, #101	; 0x65
 8011c2c:	f43f ab5d 	beq.w	80112ea <_strtod_l+0x282>
 8011c30:	2b45      	cmp	r3, #69	; 0x45
 8011c32:	f43f ab5a 	beq.w	80112ea <_strtod_l+0x282>
 8011c36:	2201      	movs	r2, #1
 8011c38:	f7ff bb92 	b.w	8011360 <_strtod_l+0x2f8>
 8011c3c:	f3af 8000 	nop.w
 8011c40:	94a03595 	.word	0x94a03595
 8011c44:	3fdfffff 	.word	0x3fdfffff
 8011c48:	35afe535 	.word	0x35afe535
 8011c4c:	3fe00000 	.word	0x3fe00000
 8011c50:	ffc00000 	.word	0xffc00000
 8011c54:	41dfffff 	.word	0x41dfffff
 8011c58:	94a03595 	.word	0x94a03595
 8011c5c:	3fcfffff 	.word	0x3fcfffff
 8011c60:	3ff00000 	.word	0x3ff00000
 8011c64:	7ff00000 	.word	0x7ff00000
 8011c68:	7fe00000 	.word	0x7fe00000
 8011c6c:	7c9fffff 	.word	0x7c9fffff
 8011c70:	3fe00000 	.word	0x3fe00000
 8011c74:	bff00000 	.word	0xbff00000
 8011c78:	7fefffff 	.word	0x7fefffff

08011c7c <_strtod_r>:
 8011c7c:	4b01      	ldr	r3, [pc, #4]	; (8011c84 <_strtod_r+0x8>)
 8011c7e:	f7ff b9f3 	b.w	8011068 <_strtod_l>
 8011c82:	bf00      	nop
 8011c84:	200000c0 	.word	0x200000c0

08011c88 <_strtol_l.isra.0>:
 8011c88:	2b01      	cmp	r3, #1
 8011c8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c8e:	d001      	beq.n	8011c94 <_strtol_l.isra.0+0xc>
 8011c90:	2b24      	cmp	r3, #36	; 0x24
 8011c92:	d906      	bls.n	8011ca2 <_strtol_l.isra.0+0x1a>
 8011c94:	f7fe f97e 	bl	800ff94 <__errno>
 8011c98:	2316      	movs	r3, #22
 8011c9a:	6003      	str	r3, [r0, #0]
 8011c9c:	2000      	movs	r0, #0
 8011c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ca2:	4f3a      	ldr	r7, [pc, #232]	; (8011d8c <_strtol_l.isra.0+0x104>)
 8011ca4:	468e      	mov	lr, r1
 8011ca6:	4676      	mov	r6, lr
 8011ca8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011cac:	5de5      	ldrb	r5, [r4, r7]
 8011cae:	f015 0508 	ands.w	r5, r5, #8
 8011cb2:	d1f8      	bne.n	8011ca6 <_strtol_l.isra.0+0x1e>
 8011cb4:	2c2d      	cmp	r4, #45	; 0x2d
 8011cb6:	d134      	bne.n	8011d22 <_strtol_l.isra.0+0x9a>
 8011cb8:	f89e 4000 	ldrb.w	r4, [lr]
 8011cbc:	f04f 0801 	mov.w	r8, #1
 8011cc0:	f106 0e02 	add.w	lr, r6, #2
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d05c      	beq.n	8011d82 <_strtol_l.isra.0+0xfa>
 8011cc8:	2b10      	cmp	r3, #16
 8011cca:	d10c      	bne.n	8011ce6 <_strtol_l.isra.0+0x5e>
 8011ccc:	2c30      	cmp	r4, #48	; 0x30
 8011cce:	d10a      	bne.n	8011ce6 <_strtol_l.isra.0+0x5e>
 8011cd0:	f89e 4000 	ldrb.w	r4, [lr]
 8011cd4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011cd8:	2c58      	cmp	r4, #88	; 0x58
 8011cda:	d14d      	bne.n	8011d78 <_strtol_l.isra.0+0xf0>
 8011cdc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8011ce0:	2310      	movs	r3, #16
 8011ce2:	f10e 0e02 	add.w	lr, lr, #2
 8011ce6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8011cea:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011cee:	2600      	movs	r6, #0
 8011cf0:	fbbc f9f3 	udiv	r9, ip, r3
 8011cf4:	4635      	mov	r5, r6
 8011cf6:	fb03 ca19 	mls	sl, r3, r9, ip
 8011cfa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8011cfe:	2f09      	cmp	r7, #9
 8011d00:	d818      	bhi.n	8011d34 <_strtol_l.isra.0+0xac>
 8011d02:	463c      	mov	r4, r7
 8011d04:	42a3      	cmp	r3, r4
 8011d06:	dd24      	ble.n	8011d52 <_strtol_l.isra.0+0xca>
 8011d08:	2e00      	cmp	r6, #0
 8011d0a:	db1f      	blt.n	8011d4c <_strtol_l.isra.0+0xc4>
 8011d0c:	45a9      	cmp	r9, r5
 8011d0e:	d31d      	bcc.n	8011d4c <_strtol_l.isra.0+0xc4>
 8011d10:	d101      	bne.n	8011d16 <_strtol_l.isra.0+0x8e>
 8011d12:	45a2      	cmp	sl, r4
 8011d14:	db1a      	blt.n	8011d4c <_strtol_l.isra.0+0xc4>
 8011d16:	fb05 4503 	mla	r5, r5, r3, r4
 8011d1a:	2601      	movs	r6, #1
 8011d1c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011d20:	e7eb      	b.n	8011cfa <_strtol_l.isra.0+0x72>
 8011d22:	2c2b      	cmp	r4, #43	; 0x2b
 8011d24:	bf08      	it	eq
 8011d26:	f89e 4000 	ldrbeq.w	r4, [lr]
 8011d2a:	46a8      	mov	r8, r5
 8011d2c:	bf08      	it	eq
 8011d2e:	f106 0e02 	addeq.w	lr, r6, #2
 8011d32:	e7c7      	b.n	8011cc4 <_strtol_l.isra.0+0x3c>
 8011d34:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8011d38:	2f19      	cmp	r7, #25
 8011d3a:	d801      	bhi.n	8011d40 <_strtol_l.isra.0+0xb8>
 8011d3c:	3c37      	subs	r4, #55	; 0x37
 8011d3e:	e7e1      	b.n	8011d04 <_strtol_l.isra.0+0x7c>
 8011d40:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8011d44:	2f19      	cmp	r7, #25
 8011d46:	d804      	bhi.n	8011d52 <_strtol_l.isra.0+0xca>
 8011d48:	3c57      	subs	r4, #87	; 0x57
 8011d4a:	e7db      	b.n	8011d04 <_strtol_l.isra.0+0x7c>
 8011d4c:	f04f 36ff 	mov.w	r6, #4294967295
 8011d50:	e7e4      	b.n	8011d1c <_strtol_l.isra.0+0x94>
 8011d52:	2e00      	cmp	r6, #0
 8011d54:	da05      	bge.n	8011d62 <_strtol_l.isra.0+0xda>
 8011d56:	2322      	movs	r3, #34	; 0x22
 8011d58:	6003      	str	r3, [r0, #0]
 8011d5a:	4665      	mov	r5, ip
 8011d5c:	b942      	cbnz	r2, 8011d70 <_strtol_l.isra.0+0xe8>
 8011d5e:	4628      	mov	r0, r5
 8011d60:	e79d      	b.n	8011c9e <_strtol_l.isra.0+0x16>
 8011d62:	f1b8 0f00 	cmp.w	r8, #0
 8011d66:	d000      	beq.n	8011d6a <_strtol_l.isra.0+0xe2>
 8011d68:	426d      	negs	r5, r5
 8011d6a:	2a00      	cmp	r2, #0
 8011d6c:	d0f7      	beq.n	8011d5e <_strtol_l.isra.0+0xd6>
 8011d6e:	b10e      	cbz	r6, 8011d74 <_strtol_l.isra.0+0xec>
 8011d70:	f10e 31ff 	add.w	r1, lr, #4294967295
 8011d74:	6011      	str	r1, [r2, #0]
 8011d76:	e7f2      	b.n	8011d5e <_strtol_l.isra.0+0xd6>
 8011d78:	2430      	movs	r4, #48	; 0x30
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d1b3      	bne.n	8011ce6 <_strtol_l.isra.0+0x5e>
 8011d7e:	2308      	movs	r3, #8
 8011d80:	e7b1      	b.n	8011ce6 <_strtol_l.isra.0+0x5e>
 8011d82:	2c30      	cmp	r4, #48	; 0x30
 8011d84:	d0a4      	beq.n	8011cd0 <_strtol_l.isra.0+0x48>
 8011d86:	230a      	movs	r3, #10
 8011d88:	e7ad      	b.n	8011ce6 <_strtol_l.isra.0+0x5e>
 8011d8a:	bf00      	nop
 8011d8c:	080164c1 	.word	0x080164c1

08011d90 <_strtol_r>:
 8011d90:	f7ff bf7a 	b.w	8011c88 <_strtol_l.isra.0>

08011d94 <__swbuf_r>:
 8011d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d96:	460e      	mov	r6, r1
 8011d98:	4614      	mov	r4, r2
 8011d9a:	4605      	mov	r5, r0
 8011d9c:	b118      	cbz	r0, 8011da6 <__swbuf_r+0x12>
 8011d9e:	6983      	ldr	r3, [r0, #24]
 8011da0:	b90b      	cbnz	r3, 8011da6 <__swbuf_r+0x12>
 8011da2:	f001 f84f 	bl	8012e44 <__sinit>
 8011da6:	4b21      	ldr	r3, [pc, #132]	; (8011e2c <__swbuf_r+0x98>)
 8011da8:	429c      	cmp	r4, r3
 8011daa:	d12b      	bne.n	8011e04 <__swbuf_r+0x70>
 8011dac:	686c      	ldr	r4, [r5, #4]
 8011dae:	69a3      	ldr	r3, [r4, #24]
 8011db0:	60a3      	str	r3, [r4, #8]
 8011db2:	89a3      	ldrh	r3, [r4, #12]
 8011db4:	071a      	lsls	r2, r3, #28
 8011db6:	d52f      	bpl.n	8011e18 <__swbuf_r+0x84>
 8011db8:	6923      	ldr	r3, [r4, #16]
 8011dba:	b36b      	cbz	r3, 8011e18 <__swbuf_r+0x84>
 8011dbc:	6923      	ldr	r3, [r4, #16]
 8011dbe:	6820      	ldr	r0, [r4, #0]
 8011dc0:	1ac0      	subs	r0, r0, r3
 8011dc2:	6963      	ldr	r3, [r4, #20]
 8011dc4:	b2f6      	uxtb	r6, r6
 8011dc6:	4283      	cmp	r3, r0
 8011dc8:	4637      	mov	r7, r6
 8011dca:	dc04      	bgt.n	8011dd6 <__swbuf_r+0x42>
 8011dcc:	4621      	mov	r1, r4
 8011dce:	4628      	mov	r0, r5
 8011dd0:	f000 ffa4 	bl	8012d1c <_fflush_r>
 8011dd4:	bb30      	cbnz	r0, 8011e24 <__swbuf_r+0x90>
 8011dd6:	68a3      	ldr	r3, [r4, #8]
 8011dd8:	3b01      	subs	r3, #1
 8011dda:	60a3      	str	r3, [r4, #8]
 8011ddc:	6823      	ldr	r3, [r4, #0]
 8011dde:	1c5a      	adds	r2, r3, #1
 8011de0:	6022      	str	r2, [r4, #0]
 8011de2:	701e      	strb	r6, [r3, #0]
 8011de4:	6963      	ldr	r3, [r4, #20]
 8011de6:	3001      	adds	r0, #1
 8011de8:	4283      	cmp	r3, r0
 8011dea:	d004      	beq.n	8011df6 <__swbuf_r+0x62>
 8011dec:	89a3      	ldrh	r3, [r4, #12]
 8011dee:	07db      	lsls	r3, r3, #31
 8011df0:	d506      	bpl.n	8011e00 <__swbuf_r+0x6c>
 8011df2:	2e0a      	cmp	r6, #10
 8011df4:	d104      	bne.n	8011e00 <__swbuf_r+0x6c>
 8011df6:	4621      	mov	r1, r4
 8011df8:	4628      	mov	r0, r5
 8011dfa:	f000 ff8f 	bl	8012d1c <_fflush_r>
 8011dfe:	b988      	cbnz	r0, 8011e24 <__swbuf_r+0x90>
 8011e00:	4638      	mov	r0, r7
 8011e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e04:	4b0a      	ldr	r3, [pc, #40]	; (8011e30 <__swbuf_r+0x9c>)
 8011e06:	429c      	cmp	r4, r3
 8011e08:	d101      	bne.n	8011e0e <__swbuf_r+0x7a>
 8011e0a:	68ac      	ldr	r4, [r5, #8]
 8011e0c:	e7cf      	b.n	8011dae <__swbuf_r+0x1a>
 8011e0e:	4b09      	ldr	r3, [pc, #36]	; (8011e34 <__swbuf_r+0xa0>)
 8011e10:	429c      	cmp	r4, r3
 8011e12:	bf08      	it	eq
 8011e14:	68ec      	ldreq	r4, [r5, #12]
 8011e16:	e7ca      	b.n	8011dae <__swbuf_r+0x1a>
 8011e18:	4621      	mov	r1, r4
 8011e1a:	4628      	mov	r0, r5
 8011e1c:	f000 f80c 	bl	8011e38 <__swsetup_r>
 8011e20:	2800      	cmp	r0, #0
 8011e22:	d0cb      	beq.n	8011dbc <__swbuf_r+0x28>
 8011e24:	f04f 37ff 	mov.w	r7, #4294967295
 8011e28:	e7ea      	b.n	8011e00 <__swbuf_r+0x6c>
 8011e2a:	bf00      	nop
 8011e2c:	0801671c 	.word	0x0801671c
 8011e30:	0801673c 	.word	0x0801673c
 8011e34:	080166fc 	.word	0x080166fc

08011e38 <__swsetup_r>:
 8011e38:	4b32      	ldr	r3, [pc, #200]	; (8011f04 <__swsetup_r+0xcc>)
 8011e3a:	b570      	push	{r4, r5, r6, lr}
 8011e3c:	681d      	ldr	r5, [r3, #0]
 8011e3e:	4606      	mov	r6, r0
 8011e40:	460c      	mov	r4, r1
 8011e42:	b125      	cbz	r5, 8011e4e <__swsetup_r+0x16>
 8011e44:	69ab      	ldr	r3, [r5, #24]
 8011e46:	b913      	cbnz	r3, 8011e4e <__swsetup_r+0x16>
 8011e48:	4628      	mov	r0, r5
 8011e4a:	f000 fffb 	bl	8012e44 <__sinit>
 8011e4e:	4b2e      	ldr	r3, [pc, #184]	; (8011f08 <__swsetup_r+0xd0>)
 8011e50:	429c      	cmp	r4, r3
 8011e52:	d10f      	bne.n	8011e74 <__swsetup_r+0x3c>
 8011e54:	686c      	ldr	r4, [r5, #4]
 8011e56:	89a3      	ldrh	r3, [r4, #12]
 8011e58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011e5c:	0719      	lsls	r1, r3, #28
 8011e5e:	d42c      	bmi.n	8011eba <__swsetup_r+0x82>
 8011e60:	06dd      	lsls	r5, r3, #27
 8011e62:	d411      	bmi.n	8011e88 <__swsetup_r+0x50>
 8011e64:	2309      	movs	r3, #9
 8011e66:	6033      	str	r3, [r6, #0]
 8011e68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011e6c:	81a3      	strh	r3, [r4, #12]
 8011e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8011e72:	e03e      	b.n	8011ef2 <__swsetup_r+0xba>
 8011e74:	4b25      	ldr	r3, [pc, #148]	; (8011f0c <__swsetup_r+0xd4>)
 8011e76:	429c      	cmp	r4, r3
 8011e78:	d101      	bne.n	8011e7e <__swsetup_r+0x46>
 8011e7a:	68ac      	ldr	r4, [r5, #8]
 8011e7c:	e7eb      	b.n	8011e56 <__swsetup_r+0x1e>
 8011e7e:	4b24      	ldr	r3, [pc, #144]	; (8011f10 <__swsetup_r+0xd8>)
 8011e80:	429c      	cmp	r4, r3
 8011e82:	bf08      	it	eq
 8011e84:	68ec      	ldreq	r4, [r5, #12]
 8011e86:	e7e6      	b.n	8011e56 <__swsetup_r+0x1e>
 8011e88:	0758      	lsls	r0, r3, #29
 8011e8a:	d512      	bpl.n	8011eb2 <__swsetup_r+0x7a>
 8011e8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011e8e:	b141      	cbz	r1, 8011ea2 <__swsetup_r+0x6a>
 8011e90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011e94:	4299      	cmp	r1, r3
 8011e96:	d002      	beq.n	8011e9e <__swsetup_r+0x66>
 8011e98:	4630      	mov	r0, r6
 8011e9a:	f002 f949 	bl	8014130 <_free_r>
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	6363      	str	r3, [r4, #52]	; 0x34
 8011ea2:	89a3      	ldrh	r3, [r4, #12]
 8011ea4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011ea8:	81a3      	strh	r3, [r4, #12]
 8011eaa:	2300      	movs	r3, #0
 8011eac:	6063      	str	r3, [r4, #4]
 8011eae:	6923      	ldr	r3, [r4, #16]
 8011eb0:	6023      	str	r3, [r4, #0]
 8011eb2:	89a3      	ldrh	r3, [r4, #12]
 8011eb4:	f043 0308 	orr.w	r3, r3, #8
 8011eb8:	81a3      	strh	r3, [r4, #12]
 8011eba:	6923      	ldr	r3, [r4, #16]
 8011ebc:	b94b      	cbnz	r3, 8011ed2 <__swsetup_r+0x9a>
 8011ebe:	89a3      	ldrh	r3, [r4, #12]
 8011ec0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011ec8:	d003      	beq.n	8011ed2 <__swsetup_r+0x9a>
 8011eca:	4621      	mov	r1, r4
 8011ecc:	4630      	mov	r0, r6
 8011ece:	f001 fbf1 	bl	80136b4 <__smakebuf_r>
 8011ed2:	89a0      	ldrh	r0, [r4, #12]
 8011ed4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011ed8:	f010 0301 	ands.w	r3, r0, #1
 8011edc:	d00a      	beq.n	8011ef4 <__swsetup_r+0xbc>
 8011ede:	2300      	movs	r3, #0
 8011ee0:	60a3      	str	r3, [r4, #8]
 8011ee2:	6963      	ldr	r3, [r4, #20]
 8011ee4:	425b      	negs	r3, r3
 8011ee6:	61a3      	str	r3, [r4, #24]
 8011ee8:	6923      	ldr	r3, [r4, #16]
 8011eea:	b943      	cbnz	r3, 8011efe <__swsetup_r+0xc6>
 8011eec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011ef0:	d1ba      	bne.n	8011e68 <__swsetup_r+0x30>
 8011ef2:	bd70      	pop	{r4, r5, r6, pc}
 8011ef4:	0781      	lsls	r1, r0, #30
 8011ef6:	bf58      	it	pl
 8011ef8:	6963      	ldrpl	r3, [r4, #20]
 8011efa:	60a3      	str	r3, [r4, #8]
 8011efc:	e7f4      	b.n	8011ee8 <__swsetup_r+0xb0>
 8011efe:	2000      	movs	r0, #0
 8011f00:	e7f7      	b.n	8011ef2 <__swsetup_r+0xba>
 8011f02:	bf00      	nop
 8011f04:	20000058 	.word	0x20000058
 8011f08:	0801671c 	.word	0x0801671c
 8011f0c:	0801673c 	.word	0x0801673c
 8011f10:	080166fc 	.word	0x080166fc

08011f14 <abort>:
 8011f14:	b508      	push	{r3, lr}
 8011f16:	2006      	movs	r0, #6
 8011f18:	f002 fb76 	bl	8014608 <raise>
 8011f1c:	2001      	movs	r0, #1
 8011f1e:	f7f2 fa53 	bl	80043c8 <_exit>

08011f22 <quorem>:
 8011f22:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f26:	6903      	ldr	r3, [r0, #16]
 8011f28:	690c      	ldr	r4, [r1, #16]
 8011f2a:	42a3      	cmp	r3, r4
 8011f2c:	4607      	mov	r7, r0
 8011f2e:	f2c0 8081 	blt.w	8012034 <quorem+0x112>
 8011f32:	3c01      	subs	r4, #1
 8011f34:	f101 0814 	add.w	r8, r1, #20
 8011f38:	f100 0514 	add.w	r5, r0, #20
 8011f3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011f40:	9301      	str	r3, [sp, #4]
 8011f42:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011f46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011f4a:	3301      	adds	r3, #1
 8011f4c:	429a      	cmp	r2, r3
 8011f4e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011f52:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011f56:	fbb2 f6f3 	udiv	r6, r2, r3
 8011f5a:	d331      	bcc.n	8011fc0 <quorem+0x9e>
 8011f5c:	f04f 0e00 	mov.w	lr, #0
 8011f60:	4640      	mov	r0, r8
 8011f62:	46ac      	mov	ip, r5
 8011f64:	46f2      	mov	sl, lr
 8011f66:	f850 2b04 	ldr.w	r2, [r0], #4
 8011f6a:	b293      	uxth	r3, r2
 8011f6c:	fb06 e303 	mla	r3, r6, r3, lr
 8011f70:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011f74:	b29b      	uxth	r3, r3
 8011f76:	ebaa 0303 	sub.w	r3, sl, r3
 8011f7a:	0c12      	lsrs	r2, r2, #16
 8011f7c:	f8dc a000 	ldr.w	sl, [ip]
 8011f80:	fb06 e202 	mla	r2, r6, r2, lr
 8011f84:	fa13 f38a 	uxtah	r3, r3, sl
 8011f88:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011f8c:	fa1f fa82 	uxth.w	sl, r2
 8011f90:	f8dc 2000 	ldr.w	r2, [ip]
 8011f94:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8011f98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011f9c:	b29b      	uxth	r3, r3
 8011f9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011fa2:	4581      	cmp	r9, r0
 8011fa4:	f84c 3b04 	str.w	r3, [ip], #4
 8011fa8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011fac:	d2db      	bcs.n	8011f66 <quorem+0x44>
 8011fae:	f855 300b 	ldr.w	r3, [r5, fp]
 8011fb2:	b92b      	cbnz	r3, 8011fc0 <quorem+0x9e>
 8011fb4:	9b01      	ldr	r3, [sp, #4]
 8011fb6:	3b04      	subs	r3, #4
 8011fb8:	429d      	cmp	r5, r3
 8011fba:	461a      	mov	r2, r3
 8011fbc:	d32e      	bcc.n	801201c <quorem+0xfa>
 8011fbe:	613c      	str	r4, [r7, #16]
 8011fc0:	4638      	mov	r0, r7
 8011fc2:	f001 feb3 	bl	8013d2c <__mcmp>
 8011fc6:	2800      	cmp	r0, #0
 8011fc8:	db24      	blt.n	8012014 <quorem+0xf2>
 8011fca:	3601      	adds	r6, #1
 8011fcc:	4628      	mov	r0, r5
 8011fce:	f04f 0c00 	mov.w	ip, #0
 8011fd2:	f858 2b04 	ldr.w	r2, [r8], #4
 8011fd6:	f8d0 e000 	ldr.w	lr, [r0]
 8011fda:	b293      	uxth	r3, r2
 8011fdc:	ebac 0303 	sub.w	r3, ip, r3
 8011fe0:	0c12      	lsrs	r2, r2, #16
 8011fe2:	fa13 f38e 	uxtah	r3, r3, lr
 8011fe6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011fea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011fee:	b29b      	uxth	r3, r3
 8011ff0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011ff4:	45c1      	cmp	r9, r8
 8011ff6:	f840 3b04 	str.w	r3, [r0], #4
 8011ffa:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011ffe:	d2e8      	bcs.n	8011fd2 <quorem+0xb0>
 8012000:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012004:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012008:	b922      	cbnz	r2, 8012014 <quorem+0xf2>
 801200a:	3b04      	subs	r3, #4
 801200c:	429d      	cmp	r5, r3
 801200e:	461a      	mov	r2, r3
 8012010:	d30a      	bcc.n	8012028 <quorem+0x106>
 8012012:	613c      	str	r4, [r7, #16]
 8012014:	4630      	mov	r0, r6
 8012016:	b003      	add	sp, #12
 8012018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801201c:	6812      	ldr	r2, [r2, #0]
 801201e:	3b04      	subs	r3, #4
 8012020:	2a00      	cmp	r2, #0
 8012022:	d1cc      	bne.n	8011fbe <quorem+0x9c>
 8012024:	3c01      	subs	r4, #1
 8012026:	e7c7      	b.n	8011fb8 <quorem+0x96>
 8012028:	6812      	ldr	r2, [r2, #0]
 801202a:	3b04      	subs	r3, #4
 801202c:	2a00      	cmp	r2, #0
 801202e:	d1f0      	bne.n	8012012 <quorem+0xf0>
 8012030:	3c01      	subs	r4, #1
 8012032:	e7eb      	b.n	801200c <quorem+0xea>
 8012034:	2000      	movs	r0, #0
 8012036:	e7ee      	b.n	8012016 <quorem+0xf4>

08012038 <_dtoa_r>:
 8012038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801203c:	ed2d 8b02 	vpush	{d8}
 8012040:	ec57 6b10 	vmov	r6, r7, d0
 8012044:	b095      	sub	sp, #84	; 0x54
 8012046:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012048:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801204c:	9105      	str	r1, [sp, #20]
 801204e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8012052:	4604      	mov	r4, r0
 8012054:	9209      	str	r2, [sp, #36]	; 0x24
 8012056:	930f      	str	r3, [sp, #60]	; 0x3c
 8012058:	b975      	cbnz	r5, 8012078 <_dtoa_r+0x40>
 801205a:	2010      	movs	r0, #16
 801205c:	f001 fb6a 	bl	8013734 <malloc>
 8012060:	4602      	mov	r2, r0
 8012062:	6260      	str	r0, [r4, #36]	; 0x24
 8012064:	b920      	cbnz	r0, 8012070 <_dtoa_r+0x38>
 8012066:	4bb2      	ldr	r3, [pc, #712]	; (8012330 <_dtoa_r+0x2f8>)
 8012068:	21ea      	movs	r1, #234	; 0xea
 801206a:	48b2      	ldr	r0, [pc, #712]	; (8012334 <_dtoa_r+0x2fc>)
 801206c:	f7fd ff74 	bl	800ff58 <__assert_func>
 8012070:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012074:	6005      	str	r5, [r0, #0]
 8012076:	60c5      	str	r5, [r0, #12]
 8012078:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801207a:	6819      	ldr	r1, [r3, #0]
 801207c:	b151      	cbz	r1, 8012094 <_dtoa_r+0x5c>
 801207e:	685a      	ldr	r2, [r3, #4]
 8012080:	604a      	str	r2, [r1, #4]
 8012082:	2301      	movs	r3, #1
 8012084:	4093      	lsls	r3, r2
 8012086:	608b      	str	r3, [r1, #8]
 8012088:	4620      	mov	r0, r4
 801208a:	f001 fbc7 	bl	801381c <_Bfree>
 801208e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012090:	2200      	movs	r2, #0
 8012092:	601a      	str	r2, [r3, #0]
 8012094:	1e3b      	subs	r3, r7, #0
 8012096:	bfb9      	ittee	lt
 8012098:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801209c:	9303      	strlt	r3, [sp, #12]
 801209e:	2300      	movge	r3, #0
 80120a0:	f8c8 3000 	strge.w	r3, [r8]
 80120a4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80120a8:	4ba3      	ldr	r3, [pc, #652]	; (8012338 <_dtoa_r+0x300>)
 80120aa:	bfbc      	itt	lt
 80120ac:	2201      	movlt	r2, #1
 80120ae:	f8c8 2000 	strlt.w	r2, [r8]
 80120b2:	ea33 0309 	bics.w	r3, r3, r9
 80120b6:	d11b      	bne.n	80120f0 <_dtoa_r+0xb8>
 80120b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80120ba:	f242 730f 	movw	r3, #9999	; 0x270f
 80120be:	6013      	str	r3, [r2, #0]
 80120c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80120c4:	4333      	orrs	r3, r6
 80120c6:	f000 857a 	beq.w	8012bbe <_dtoa_r+0xb86>
 80120ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80120cc:	b963      	cbnz	r3, 80120e8 <_dtoa_r+0xb0>
 80120ce:	4b9b      	ldr	r3, [pc, #620]	; (801233c <_dtoa_r+0x304>)
 80120d0:	e024      	b.n	801211c <_dtoa_r+0xe4>
 80120d2:	4b9b      	ldr	r3, [pc, #620]	; (8012340 <_dtoa_r+0x308>)
 80120d4:	9300      	str	r3, [sp, #0]
 80120d6:	3308      	adds	r3, #8
 80120d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80120da:	6013      	str	r3, [r2, #0]
 80120dc:	9800      	ldr	r0, [sp, #0]
 80120de:	b015      	add	sp, #84	; 0x54
 80120e0:	ecbd 8b02 	vpop	{d8}
 80120e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120e8:	4b94      	ldr	r3, [pc, #592]	; (801233c <_dtoa_r+0x304>)
 80120ea:	9300      	str	r3, [sp, #0]
 80120ec:	3303      	adds	r3, #3
 80120ee:	e7f3      	b.n	80120d8 <_dtoa_r+0xa0>
 80120f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80120f4:	2200      	movs	r2, #0
 80120f6:	ec51 0b17 	vmov	r0, r1, d7
 80120fa:	2300      	movs	r3, #0
 80120fc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012100:	f7ee fcea 	bl	8000ad8 <__aeabi_dcmpeq>
 8012104:	4680      	mov	r8, r0
 8012106:	b158      	cbz	r0, 8012120 <_dtoa_r+0xe8>
 8012108:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801210a:	2301      	movs	r3, #1
 801210c:	6013      	str	r3, [r2, #0]
 801210e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012110:	2b00      	cmp	r3, #0
 8012112:	f000 8551 	beq.w	8012bb8 <_dtoa_r+0xb80>
 8012116:	488b      	ldr	r0, [pc, #556]	; (8012344 <_dtoa_r+0x30c>)
 8012118:	6018      	str	r0, [r3, #0]
 801211a:	1e43      	subs	r3, r0, #1
 801211c:	9300      	str	r3, [sp, #0]
 801211e:	e7dd      	b.n	80120dc <_dtoa_r+0xa4>
 8012120:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8012124:	aa12      	add	r2, sp, #72	; 0x48
 8012126:	a913      	add	r1, sp, #76	; 0x4c
 8012128:	4620      	mov	r0, r4
 801212a:	f001 ff1f 	bl	8013f6c <__d2b>
 801212e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012132:	4683      	mov	fp, r0
 8012134:	2d00      	cmp	r5, #0
 8012136:	d07c      	beq.n	8012232 <_dtoa_r+0x1fa>
 8012138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801213a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801213e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012142:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8012146:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801214a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801214e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012152:	4b7d      	ldr	r3, [pc, #500]	; (8012348 <_dtoa_r+0x310>)
 8012154:	2200      	movs	r2, #0
 8012156:	4630      	mov	r0, r6
 8012158:	4639      	mov	r1, r7
 801215a:	f7ee f89d 	bl	8000298 <__aeabi_dsub>
 801215e:	a36e      	add	r3, pc, #440	; (adr r3, 8012318 <_dtoa_r+0x2e0>)
 8012160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012164:	f7ee fa50 	bl	8000608 <__aeabi_dmul>
 8012168:	a36d      	add	r3, pc, #436	; (adr r3, 8012320 <_dtoa_r+0x2e8>)
 801216a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801216e:	f7ee f895 	bl	800029c <__adddf3>
 8012172:	4606      	mov	r6, r0
 8012174:	4628      	mov	r0, r5
 8012176:	460f      	mov	r7, r1
 8012178:	f7ee f9dc 	bl	8000534 <__aeabi_i2d>
 801217c:	a36a      	add	r3, pc, #424	; (adr r3, 8012328 <_dtoa_r+0x2f0>)
 801217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012182:	f7ee fa41 	bl	8000608 <__aeabi_dmul>
 8012186:	4602      	mov	r2, r0
 8012188:	460b      	mov	r3, r1
 801218a:	4630      	mov	r0, r6
 801218c:	4639      	mov	r1, r7
 801218e:	f7ee f885 	bl	800029c <__adddf3>
 8012192:	4606      	mov	r6, r0
 8012194:	460f      	mov	r7, r1
 8012196:	f7ee fce7 	bl	8000b68 <__aeabi_d2iz>
 801219a:	2200      	movs	r2, #0
 801219c:	4682      	mov	sl, r0
 801219e:	2300      	movs	r3, #0
 80121a0:	4630      	mov	r0, r6
 80121a2:	4639      	mov	r1, r7
 80121a4:	f7ee fca2 	bl	8000aec <__aeabi_dcmplt>
 80121a8:	b148      	cbz	r0, 80121be <_dtoa_r+0x186>
 80121aa:	4650      	mov	r0, sl
 80121ac:	f7ee f9c2 	bl	8000534 <__aeabi_i2d>
 80121b0:	4632      	mov	r2, r6
 80121b2:	463b      	mov	r3, r7
 80121b4:	f7ee fc90 	bl	8000ad8 <__aeabi_dcmpeq>
 80121b8:	b908      	cbnz	r0, 80121be <_dtoa_r+0x186>
 80121ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80121be:	f1ba 0f16 	cmp.w	sl, #22
 80121c2:	d854      	bhi.n	801226e <_dtoa_r+0x236>
 80121c4:	4b61      	ldr	r3, [pc, #388]	; (801234c <_dtoa_r+0x314>)
 80121c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80121ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80121d2:	f7ee fc8b 	bl	8000aec <__aeabi_dcmplt>
 80121d6:	2800      	cmp	r0, #0
 80121d8:	d04b      	beq.n	8012272 <_dtoa_r+0x23a>
 80121da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80121de:	2300      	movs	r3, #0
 80121e0:	930e      	str	r3, [sp, #56]	; 0x38
 80121e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80121e4:	1b5d      	subs	r5, r3, r5
 80121e6:	1e6b      	subs	r3, r5, #1
 80121e8:	9304      	str	r3, [sp, #16]
 80121ea:	bf43      	ittte	mi
 80121ec:	2300      	movmi	r3, #0
 80121ee:	f1c5 0801 	rsbmi	r8, r5, #1
 80121f2:	9304      	strmi	r3, [sp, #16]
 80121f4:	f04f 0800 	movpl.w	r8, #0
 80121f8:	f1ba 0f00 	cmp.w	sl, #0
 80121fc:	db3b      	blt.n	8012276 <_dtoa_r+0x23e>
 80121fe:	9b04      	ldr	r3, [sp, #16]
 8012200:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8012204:	4453      	add	r3, sl
 8012206:	9304      	str	r3, [sp, #16]
 8012208:	2300      	movs	r3, #0
 801220a:	9306      	str	r3, [sp, #24]
 801220c:	9b05      	ldr	r3, [sp, #20]
 801220e:	2b09      	cmp	r3, #9
 8012210:	d869      	bhi.n	80122e6 <_dtoa_r+0x2ae>
 8012212:	2b05      	cmp	r3, #5
 8012214:	bfc4      	itt	gt
 8012216:	3b04      	subgt	r3, #4
 8012218:	9305      	strgt	r3, [sp, #20]
 801221a:	9b05      	ldr	r3, [sp, #20]
 801221c:	f1a3 0302 	sub.w	r3, r3, #2
 8012220:	bfcc      	ite	gt
 8012222:	2500      	movgt	r5, #0
 8012224:	2501      	movle	r5, #1
 8012226:	2b03      	cmp	r3, #3
 8012228:	d869      	bhi.n	80122fe <_dtoa_r+0x2c6>
 801222a:	e8df f003 	tbb	[pc, r3]
 801222e:	4e2c      	.short	0x4e2c
 8012230:	5a4c      	.short	0x5a4c
 8012232:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8012236:	441d      	add	r5, r3
 8012238:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801223c:	2b20      	cmp	r3, #32
 801223e:	bfc1      	itttt	gt
 8012240:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012244:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012248:	fa09 f303 	lslgt.w	r3, r9, r3
 801224c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012250:	bfda      	itte	le
 8012252:	f1c3 0320 	rsble	r3, r3, #32
 8012256:	fa06 f003 	lslle.w	r0, r6, r3
 801225a:	4318      	orrgt	r0, r3
 801225c:	f7ee f95a 	bl	8000514 <__aeabi_ui2d>
 8012260:	2301      	movs	r3, #1
 8012262:	4606      	mov	r6, r0
 8012264:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012268:	3d01      	subs	r5, #1
 801226a:	9310      	str	r3, [sp, #64]	; 0x40
 801226c:	e771      	b.n	8012152 <_dtoa_r+0x11a>
 801226e:	2301      	movs	r3, #1
 8012270:	e7b6      	b.n	80121e0 <_dtoa_r+0x1a8>
 8012272:	900e      	str	r0, [sp, #56]	; 0x38
 8012274:	e7b5      	b.n	80121e2 <_dtoa_r+0x1aa>
 8012276:	f1ca 0300 	rsb	r3, sl, #0
 801227a:	9306      	str	r3, [sp, #24]
 801227c:	2300      	movs	r3, #0
 801227e:	eba8 080a 	sub.w	r8, r8, sl
 8012282:	930d      	str	r3, [sp, #52]	; 0x34
 8012284:	e7c2      	b.n	801220c <_dtoa_r+0x1d4>
 8012286:	2300      	movs	r3, #0
 8012288:	9308      	str	r3, [sp, #32]
 801228a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801228c:	2b00      	cmp	r3, #0
 801228e:	dc39      	bgt.n	8012304 <_dtoa_r+0x2cc>
 8012290:	f04f 0901 	mov.w	r9, #1
 8012294:	f8cd 9004 	str.w	r9, [sp, #4]
 8012298:	464b      	mov	r3, r9
 801229a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801229e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80122a0:	2200      	movs	r2, #0
 80122a2:	6042      	str	r2, [r0, #4]
 80122a4:	2204      	movs	r2, #4
 80122a6:	f102 0614 	add.w	r6, r2, #20
 80122aa:	429e      	cmp	r6, r3
 80122ac:	6841      	ldr	r1, [r0, #4]
 80122ae:	d92f      	bls.n	8012310 <_dtoa_r+0x2d8>
 80122b0:	4620      	mov	r0, r4
 80122b2:	f001 fa73 	bl	801379c <_Balloc>
 80122b6:	9000      	str	r0, [sp, #0]
 80122b8:	2800      	cmp	r0, #0
 80122ba:	d14b      	bne.n	8012354 <_dtoa_r+0x31c>
 80122bc:	4b24      	ldr	r3, [pc, #144]	; (8012350 <_dtoa_r+0x318>)
 80122be:	4602      	mov	r2, r0
 80122c0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80122c4:	e6d1      	b.n	801206a <_dtoa_r+0x32>
 80122c6:	2301      	movs	r3, #1
 80122c8:	e7de      	b.n	8012288 <_dtoa_r+0x250>
 80122ca:	2300      	movs	r3, #0
 80122cc:	9308      	str	r3, [sp, #32]
 80122ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122d0:	eb0a 0903 	add.w	r9, sl, r3
 80122d4:	f109 0301 	add.w	r3, r9, #1
 80122d8:	2b01      	cmp	r3, #1
 80122da:	9301      	str	r3, [sp, #4]
 80122dc:	bfb8      	it	lt
 80122de:	2301      	movlt	r3, #1
 80122e0:	e7dd      	b.n	801229e <_dtoa_r+0x266>
 80122e2:	2301      	movs	r3, #1
 80122e4:	e7f2      	b.n	80122cc <_dtoa_r+0x294>
 80122e6:	2501      	movs	r5, #1
 80122e8:	2300      	movs	r3, #0
 80122ea:	9305      	str	r3, [sp, #20]
 80122ec:	9508      	str	r5, [sp, #32]
 80122ee:	f04f 39ff 	mov.w	r9, #4294967295
 80122f2:	2200      	movs	r2, #0
 80122f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80122f8:	2312      	movs	r3, #18
 80122fa:	9209      	str	r2, [sp, #36]	; 0x24
 80122fc:	e7cf      	b.n	801229e <_dtoa_r+0x266>
 80122fe:	2301      	movs	r3, #1
 8012300:	9308      	str	r3, [sp, #32]
 8012302:	e7f4      	b.n	80122ee <_dtoa_r+0x2b6>
 8012304:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012308:	f8cd 9004 	str.w	r9, [sp, #4]
 801230c:	464b      	mov	r3, r9
 801230e:	e7c6      	b.n	801229e <_dtoa_r+0x266>
 8012310:	3101      	adds	r1, #1
 8012312:	6041      	str	r1, [r0, #4]
 8012314:	0052      	lsls	r2, r2, #1
 8012316:	e7c6      	b.n	80122a6 <_dtoa_r+0x26e>
 8012318:	636f4361 	.word	0x636f4361
 801231c:	3fd287a7 	.word	0x3fd287a7
 8012320:	8b60c8b3 	.word	0x8b60c8b3
 8012324:	3fc68a28 	.word	0x3fc68a28
 8012328:	509f79fb 	.word	0x509f79fb
 801232c:	3fd34413 	.word	0x3fd34413
 8012330:	08016675 	.word	0x08016675
 8012334:	0801668c 	.word	0x0801668c
 8012338:	7ff00000 	.word	0x7ff00000
 801233c:	08016671 	.word	0x08016671
 8012340:	08016668 	.word	0x08016668
 8012344:	080165ea 	.word	0x080165ea
 8012348:	3ff80000 	.word	0x3ff80000
 801234c:	08016868 	.word	0x08016868
 8012350:	080166eb 	.word	0x080166eb
 8012354:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012356:	9a00      	ldr	r2, [sp, #0]
 8012358:	601a      	str	r2, [r3, #0]
 801235a:	9b01      	ldr	r3, [sp, #4]
 801235c:	2b0e      	cmp	r3, #14
 801235e:	f200 80ad 	bhi.w	80124bc <_dtoa_r+0x484>
 8012362:	2d00      	cmp	r5, #0
 8012364:	f000 80aa 	beq.w	80124bc <_dtoa_r+0x484>
 8012368:	f1ba 0f00 	cmp.w	sl, #0
 801236c:	dd36      	ble.n	80123dc <_dtoa_r+0x3a4>
 801236e:	4ac3      	ldr	r2, [pc, #780]	; (801267c <_dtoa_r+0x644>)
 8012370:	f00a 030f 	and.w	r3, sl, #15
 8012374:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012378:	ed93 7b00 	vldr	d7, [r3]
 801237c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8012380:	ea4f 172a 	mov.w	r7, sl, asr #4
 8012384:	eeb0 8a47 	vmov.f32	s16, s14
 8012388:	eef0 8a67 	vmov.f32	s17, s15
 801238c:	d016      	beq.n	80123bc <_dtoa_r+0x384>
 801238e:	4bbc      	ldr	r3, [pc, #752]	; (8012680 <_dtoa_r+0x648>)
 8012390:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012394:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012398:	f7ee fa60 	bl	800085c <__aeabi_ddiv>
 801239c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80123a0:	f007 070f 	and.w	r7, r7, #15
 80123a4:	2503      	movs	r5, #3
 80123a6:	4eb6      	ldr	r6, [pc, #728]	; (8012680 <_dtoa_r+0x648>)
 80123a8:	b957      	cbnz	r7, 80123c0 <_dtoa_r+0x388>
 80123aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80123ae:	ec53 2b18 	vmov	r2, r3, d8
 80123b2:	f7ee fa53 	bl	800085c <__aeabi_ddiv>
 80123b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80123ba:	e029      	b.n	8012410 <_dtoa_r+0x3d8>
 80123bc:	2502      	movs	r5, #2
 80123be:	e7f2      	b.n	80123a6 <_dtoa_r+0x36e>
 80123c0:	07f9      	lsls	r1, r7, #31
 80123c2:	d508      	bpl.n	80123d6 <_dtoa_r+0x39e>
 80123c4:	ec51 0b18 	vmov	r0, r1, d8
 80123c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80123cc:	f7ee f91c 	bl	8000608 <__aeabi_dmul>
 80123d0:	ec41 0b18 	vmov	d8, r0, r1
 80123d4:	3501      	adds	r5, #1
 80123d6:	107f      	asrs	r7, r7, #1
 80123d8:	3608      	adds	r6, #8
 80123da:	e7e5      	b.n	80123a8 <_dtoa_r+0x370>
 80123dc:	f000 80a6 	beq.w	801252c <_dtoa_r+0x4f4>
 80123e0:	f1ca 0600 	rsb	r6, sl, #0
 80123e4:	4ba5      	ldr	r3, [pc, #660]	; (801267c <_dtoa_r+0x644>)
 80123e6:	4fa6      	ldr	r7, [pc, #664]	; (8012680 <_dtoa_r+0x648>)
 80123e8:	f006 020f 	and.w	r2, r6, #15
 80123ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80123f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80123f8:	f7ee f906 	bl	8000608 <__aeabi_dmul>
 80123fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012400:	1136      	asrs	r6, r6, #4
 8012402:	2300      	movs	r3, #0
 8012404:	2502      	movs	r5, #2
 8012406:	2e00      	cmp	r6, #0
 8012408:	f040 8085 	bne.w	8012516 <_dtoa_r+0x4de>
 801240c:	2b00      	cmp	r3, #0
 801240e:	d1d2      	bne.n	80123b6 <_dtoa_r+0x37e>
 8012410:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012412:	2b00      	cmp	r3, #0
 8012414:	f000 808c 	beq.w	8012530 <_dtoa_r+0x4f8>
 8012418:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801241c:	4b99      	ldr	r3, [pc, #612]	; (8012684 <_dtoa_r+0x64c>)
 801241e:	2200      	movs	r2, #0
 8012420:	4630      	mov	r0, r6
 8012422:	4639      	mov	r1, r7
 8012424:	f7ee fb62 	bl	8000aec <__aeabi_dcmplt>
 8012428:	2800      	cmp	r0, #0
 801242a:	f000 8081 	beq.w	8012530 <_dtoa_r+0x4f8>
 801242e:	9b01      	ldr	r3, [sp, #4]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d07d      	beq.n	8012530 <_dtoa_r+0x4f8>
 8012434:	f1b9 0f00 	cmp.w	r9, #0
 8012438:	dd3c      	ble.n	80124b4 <_dtoa_r+0x47c>
 801243a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801243e:	9307      	str	r3, [sp, #28]
 8012440:	2200      	movs	r2, #0
 8012442:	4b91      	ldr	r3, [pc, #580]	; (8012688 <_dtoa_r+0x650>)
 8012444:	4630      	mov	r0, r6
 8012446:	4639      	mov	r1, r7
 8012448:	f7ee f8de 	bl	8000608 <__aeabi_dmul>
 801244c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012450:	3501      	adds	r5, #1
 8012452:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8012456:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801245a:	4628      	mov	r0, r5
 801245c:	f7ee f86a 	bl	8000534 <__aeabi_i2d>
 8012460:	4632      	mov	r2, r6
 8012462:	463b      	mov	r3, r7
 8012464:	f7ee f8d0 	bl	8000608 <__aeabi_dmul>
 8012468:	4b88      	ldr	r3, [pc, #544]	; (801268c <_dtoa_r+0x654>)
 801246a:	2200      	movs	r2, #0
 801246c:	f7ed ff16 	bl	800029c <__adddf3>
 8012470:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8012474:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012478:	9303      	str	r3, [sp, #12]
 801247a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801247c:	2b00      	cmp	r3, #0
 801247e:	d15c      	bne.n	801253a <_dtoa_r+0x502>
 8012480:	4b83      	ldr	r3, [pc, #524]	; (8012690 <_dtoa_r+0x658>)
 8012482:	2200      	movs	r2, #0
 8012484:	4630      	mov	r0, r6
 8012486:	4639      	mov	r1, r7
 8012488:	f7ed ff06 	bl	8000298 <__aeabi_dsub>
 801248c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012490:	4606      	mov	r6, r0
 8012492:	460f      	mov	r7, r1
 8012494:	f7ee fb48 	bl	8000b28 <__aeabi_dcmpgt>
 8012498:	2800      	cmp	r0, #0
 801249a:	f040 8296 	bne.w	80129ca <_dtoa_r+0x992>
 801249e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80124a2:	4630      	mov	r0, r6
 80124a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80124a8:	4639      	mov	r1, r7
 80124aa:	f7ee fb1f 	bl	8000aec <__aeabi_dcmplt>
 80124ae:	2800      	cmp	r0, #0
 80124b0:	f040 8288 	bne.w	80129c4 <_dtoa_r+0x98c>
 80124b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80124b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80124bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80124be:	2b00      	cmp	r3, #0
 80124c0:	f2c0 8158 	blt.w	8012774 <_dtoa_r+0x73c>
 80124c4:	f1ba 0f0e 	cmp.w	sl, #14
 80124c8:	f300 8154 	bgt.w	8012774 <_dtoa_r+0x73c>
 80124cc:	4b6b      	ldr	r3, [pc, #428]	; (801267c <_dtoa_r+0x644>)
 80124ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80124d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80124d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124d8:	2b00      	cmp	r3, #0
 80124da:	f280 80e3 	bge.w	80126a4 <_dtoa_r+0x66c>
 80124de:	9b01      	ldr	r3, [sp, #4]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	f300 80df 	bgt.w	80126a4 <_dtoa_r+0x66c>
 80124e6:	f040 826d 	bne.w	80129c4 <_dtoa_r+0x98c>
 80124ea:	4b69      	ldr	r3, [pc, #420]	; (8012690 <_dtoa_r+0x658>)
 80124ec:	2200      	movs	r2, #0
 80124ee:	4640      	mov	r0, r8
 80124f0:	4649      	mov	r1, r9
 80124f2:	f7ee f889 	bl	8000608 <__aeabi_dmul>
 80124f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80124fa:	f7ee fb0b 	bl	8000b14 <__aeabi_dcmpge>
 80124fe:	9e01      	ldr	r6, [sp, #4]
 8012500:	4637      	mov	r7, r6
 8012502:	2800      	cmp	r0, #0
 8012504:	f040 8243 	bne.w	801298e <_dtoa_r+0x956>
 8012508:	9d00      	ldr	r5, [sp, #0]
 801250a:	2331      	movs	r3, #49	; 0x31
 801250c:	f805 3b01 	strb.w	r3, [r5], #1
 8012510:	f10a 0a01 	add.w	sl, sl, #1
 8012514:	e23f      	b.n	8012996 <_dtoa_r+0x95e>
 8012516:	07f2      	lsls	r2, r6, #31
 8012518:	d505      	bpl.n	8012526 <_dtoa_r+0x4ee>
 801251a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801251e:	f7ee f873 	bl	8000608 <__aeabi_dmul>
 8012522:	3501      	adds	r5, #1
 8012524:	2301      	movs	r3, #1
 8012526:	1076      	asrs	r6, r6, #1
 8012528:	3708      	adds	r7, #8
 801252a:	e76c      	b.n	8012406 <_dtoa_r+0x3ce>
 801252c:	2502      	movs	r5, #2
 801252e:	e76f      	b.n	8012410 <_dtoa_r+0x3d8>
 8012530:	9b01      	ldr	r3, [sp, #4]
 8012532:	f8cd a01c 	str.w	sl, [sp, #28]
 8012536:	930c      	str	r3, [sp, #48]	; 0x30
 8012538:	e78d      	b.n	8012456 <_dtoa_r+0x41e>
 801253a:	9900      	ldr	r1, [sp, #0]
 801253c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801253e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012540:	4b4e      	ldr	r3, [pc, #312]	; (801267c <_dtoa_r+0x644>)
 8012542:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012546:	4401      	add	r1, r0
 8012548:	9102      	str	r1, [sp, #8]
 801254a:	9908      	ldr	r1, [sp, #32]
 801254c:	eeb0 8a47 	vmov.f32	s16, s14
 8012550:	eef0 8a67 	vmov.f32	s17, s15
 8012554:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012558:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801255c:	2900      	cmp	r1, #0
 801255e:	d045      	beq.n	80125ec <_dtoa_r+0x5b4>
 8012560:	494c      	ldr	r1, [pc, #304]	; (8012694 <_dtoa_r+0x65c>)
 8012562:	2000      	movs	r0, #0
 8012564:	f7ee f97a 	bl	800085c <__aeabi_ddiv>
 8012568:	ec53 2b18 	vmov	r2, r3, d8
 801256c:	f7ed fe94 	bl	8000298 <__aeabi_dsub>
 8012570:	9d00      	ldr	r5, [sp, #0]
 8012572:	ec41 0b18 	vmov	d8, r0, r1
 8012576:	4639      	mov	r1, r7
 8012578:	4630      	mov	r0, r6
 801257a:	f7ee faf5 	bl	8000b68 <__aeabi_d2iz>
 801257e:	900c      	str	r0, [sp, #48]	; 0x30
 8012580:	f7ed ffd8 	bl	8000534 <__aeabi_i2d>
 8012584:	4602      	mov	r2, r0
 8012586:	460b      	mov	r3, r1
 8012588:	4630      	mov	r0, r6
 801258a:	4639      	mov	r1, r7
 801258c:	f7ed fe84 	bl	8000298 <__aeabi_dsub>
 8012590:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012592:	3330      	adds	r3, #48	; 0x30
 8012594:	f805 3b01 	strb.w	r3, [r5], #1
 8012598:	ec53 2b18 	vmov	r2, r3, d8
 801259c:	4606      	mov	r6, r0
 801259e:	460f      	mov	r7, r1
 80125a0:	f7ee faa4 	bl	8000aec <__aeabi_dcmplt>
 80125a4:	2800      	cmp	r0, #0
 80125a6:	d165      	bne.n	8012674 <_dtoa_r+0x63c>
 80125a8:	4632      	mov	r2, r6
 80125aa:	463b      	mov	r3, r7
 80125ac:	4935      	ldr	r1, [pc, #212]	; (8012684 <_dtoa_r+0x64c>)
 80125ae:	2000      	movs	r0, #0
 80125b0:	f7ed fe72 	bl	8000298 <__aeabi_dsub>
 80125b4:	ec53 2b18 	vmov	r2, r3, d8
 80125b8:	f7ee fa98 	bl	8000aec <__aeabi_dcmplt>
 80125bc:	2800      	cmp	r0, #0
 80125be:	f040 80b9 	bne.w	8012734 <_dtoa_r+0x6fc>
 80125c2:	9b02      	ldr	r3, [sp, #8]
 80125c4:	429d      	cmp	r5, r3
 80125c6:	f43f af75 	beq.w	80124b4 <_dtoa_r+0x47c>
 80125ca:	4b2f      	ldr	r3, [pc, #188]	; (8012688 <_dtoa_r+0x650>)
 80125cc:	ec51 0b18 	vmov	r0, r1, d8
 80125d0:	2200      	movs	r2, #0
 80125d2:	f7ee f819 	bl	8000608 <__aeabi_dmul>
 80125d6:	4b2c      	ldr	r3, [pc, #176]	; (8012688 <_dtoa_r+0x650>)
 80125d8:	ec41 0b18 	vmov	d8, r0, r1
 80125dc:	2200      	movs	r2, #0
 80125de:	4630      	mov	r0, r6
 80125e0:	4639      	mov	r1, r7
 80125e2:	f7ee f811 	bl	8000608 <__aeabi_dmul>
 80125e6:	4606      	mov	r6, r0
 80125e8:	460f      	mov	r7, r1
 80125ea:	e7c4      	b.n	8012576 <_dtoa_r+0x53e>
 80125ec:	ec51 0b17 	vmov	r0, r1, d7
 80125f0:	f7ee f80a 	bl	8000608 <__aeabi_dmul>
 80125f4:	9b02      	ldr	r3, [sp, #8]
 80125f6:	9d00      	ldr	r5, [sp, #0]
 80125f8:	930c      	str	r3, [sp, #48]	; 0x30
 80125fa:	ec41 0b18 	vmov	d8, r0, r1
 80125fe:	4639      	mov	r1, r7
 8012600:	4630      	mov	r0, r6
 8012602:	f7ee fab1 	bl	8000b68 <__aeabi_d2iz>
 8012606:	9011      	str	r0, [sp, #68]	; 0x44
 8012608:	f7ed ff94 	bl	8000534 <__aeabi_i2d>
 801260c:	4602      	mov	r2, r0
 801260e:	460b      	mov	r3, r1
 8012610:	4630      	mov	r0, r6
 8012612:	4639      	mov	r1, r7
 8012614:	f7ed fe40 	bl	8000298 <__aeabi_dsub>
 8012618:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801261a:	3330      	adds	r3, #48	; 0x30
 801261c:	f805 3b01 	strb.w	r3, [r5], #1
 8012620:	9b02      	ldr	r3, [sp, #8]
 8012622:	429d      	cmp	r5, r3
 8012624:	4606      	mov	r6, r0
 8012626:	460f      	mov	r7, r1
 8012628:	f04f 0200 	mov.w	r2, #0
 801262c:	d134      	bne.n	8012698 <_dtoa_r+0x660>
 801262e:	4b19      	ldr	r3, [pc, #100]	; (8012694 <_dtoa_r+0x65c>)
 8012630:	ec51 0b18 	vmov	r0, r1, d8
 8012634:	f7ed fe32 	bl	800029c <__adddf3>
 8012638:	4602      	mov	r2, r0
 801263a:	460b      	mov	r3, r1
 801263c:	4630      	mov	r0, r6
 801263e:	4639      	mov	r1, r7
 8012640:	f7ee fa72 	bl	8000b28 <__aeabi_dcmpgt>
 8012644:	2800      	cmp	r0, #0
 8012646:	d175      	bne.n	8012734 <_dtoa_r+0x6fc>
 8012648:	ec53 2b18 	vmov	r2, r3, d8
 801264c:	4911      	ldr	r1, [pc, #68]	; (8012694 <_dtoa_r+0x65c>)
 801264e:	2000      	movs	r0, #0
 8012650:	f7ed fe22 	bl	8000298 <__aeabi_dsub>
 8012654:	4602      	mov	r2, r0
 8012656:	460b      	mov	r3, r1
 8012658:	4630      	mov	r0, r6
 801265a:	4639      	mov	r1, r7
 801265c:	f7ee fa46 	bl	8000aec <__aeabi_dcmplt>
 8012660:	2800      	cmp	r0, #0
 8012662:	f43f af27 	beq.w	80124b4 <_dtoa_r+0x47c>
 8012666:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012668:	1e6b      	subs	r3, r5, #1
 801266a:	930c      	str	r3, [sp, #48]	; 0x30
 801266c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012670:	2b30      	cmp	r3, #48	; 0x30
 8012672:	d0f8      	beq.n	8012666 <_dtoa_r+0x62e>
 8012674:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012678:	e04a      	b.n	8012710 <_dtoa_r+0x6d8>
 801267a:	bf00      	nop
 801267c:	08016868 	.word	0x08016868
 8012680:	08016840 	.word	0x08016840
 8012684:	3ff00000 	.word	0x3ff00000
 8012688:	40240000 	.word	0x40240000
 801268c:	401c0000 	.word	0x401c0000
 8012690:	40140000 	.word	0x40140000
 8012694:	3fe00000 	.word	0x3fe00000
 8012698:	4baf      	ldr	r3, [pc, #700]	; (8012958 <_dtoa_r+0x920>)
 801269a:	f7ed ffb5 	bl	8000608 <__aeabi_dmul>
 801269e:	4606      	mov	r6, r0
 80126a0:	460f      	mov	r7, r1
 80126a2:	e7ac      	b.n	80125fe <_dtoa_r+0x5c6>
 80126a4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80126a8:	9d00      	ldr	r5, [sp, #0]
 80126aa:	4642      	mov	r2, r8
 80126ac:	464b      	mov	r3, r9
 80126ae:	4630      	mov	r0, r6
 80126b0:	4639      	mov	r1, r7
 80126b2:	f7ee f8d3 	bl	800085c <__aeabi_ddiv>
 80126b6:	f7ee fa57 	bl	8000b68 <__aeabi_d2iz>
 80126ba:	9002      	str	r0, [sp, #8]
 80126bc:	f7ed ff3a 	bl	8000534 <__aeabi_i2d>
 80126c0:	4642      	mov	r2, r8
 80126c2:	464b      	mov	r3, r9
 80126c4:	f7ed ffa0 	bl	8000608 <__aeabi_dmul>
 80126c8:	4602      	mov	r2, r0
 80126ca:	460b      	mov	r3, r1
 80126cc:	4630      	mov	r0, r6
 80126ce:	4639      	mov	r1, r7
 80126d0:	f7ed fde2 	bl	8000298 <__aeabi_dsub>
 80126d4:	9e02      	ldr	r6, [sp, #8]
 80126d6:	9f01      	ldr	r7, [sp, #4]
 80126d8:	3630      	adds	r6, #48	; 0x30
 80126da:	f805 6b01 	strb.w	r6, [r5], #1
 80126de:	9e00      	ldr	r6, [sp, #0]
 80126e0:	1bae      	subs	r6, r5, r6
 80126e2:	42b7      	cmp	r7, r6
 80126e4:	4602      	mov	r2, r0
 80126e6:	460b      	mov	r3, r1
 80126e8:	d137      	bne.n	801275a <_dtoa_r+0x722>
 80126ea:	f7ed fdd7 	bl	800029c <__adddf3>
 80126ee:	4642      	mov	r2, r8
 80126f0:	464b      	mov	r3, r9
 80126f2:	4606      	mov	r6, r0
 80126f4:	460f      	mov	r7, r1
 80126f6:	f7ee fa17 	bl	8000b28 <__aeabi_dcmpgt>
 80126fa:	b9c8      	cbnz	r0, 8012730 <_dtoa_r+0x6f8>
 80126fc:	4642      	mov	r2, r8
 80126fe:	464b      	mov	r3, r9
 8012700:	4630      	mov	r0, r6
 8012702:	4639      	mov	r1, r7
 8012704:	f7ee f9e8 	bl	8000ad8 <__aeabi_dcmpeq>
 8012708:	b110      	cbz	r0, 8012710 <_dtoa_r+0x6d8>
 801270a:	9b02      	ldr	r3, [sp, #8]
 801270c:	07d9      	lsls	r1, r3, #31
 801270e:	d40f      	bmi.n	8012730 <_dtoa_r+0x6f8>
 8012710:	4620      	mov	r0, r4
 8012712:	4659      	mov	r1, fp
 8012714:	f001 f882 	bl	801381c <_Bfree>
 8012718:	2300      	movs	r3, #0
 801271a:	702b      	strb	r3, [r5, #0]
 801271c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801271e:	f10a 0001 	add.w	r0, sl, #1
 8012722:	6018      	str	r0, [r3, #0]
 8012724:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012726:	2b00      	cmp	r3, #0
 8012728:	f43f acd8 	beq.w	80120dc <_dtoa_r+0xa4>
 801272c:	601d      	str	r5, [r3, #0]
 801272e:	e4d5      	b.n	80120dc <_dtoa_r+0xa4>
 8012730:	f8cd a01c 	str.w	sl, [sp, #28]
 8012734:	462b      	mov	r3, r5
 8012736:	461d      	mov	r5, r3
 8012738:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801273c:	2a39      	cmp	r2, #57	; 0x39
 801273e:	d108      	bne.n	8012752 <_dtoa_r+0x71a>
 8012740:	9a00      	ldr	r2, [sp, #0]
 8012742:	429a      	cmp	r2, r3
 8012744:	d1f7      	bne.n	8012736 <_dtoa_r+0x6fe>
 8012746:	9a07      	ldr	r2, [sp, #28]
 8012748:	9900      	ldr	r1, [sp, #0]
 801274a:	3201      	adds	r2, #1
 801274c:	9207      	str	r2, [sp, #28]
 801274e:	2230      	movs	r2, #48	; 0x30
 8012750:	700a      	strb	r2, [r1, #0]
 8012752:	781a      	ldrb	r2, [r3, #0]
 8012754:	3201      	adds	r2, #1
 8012756:	701a      	strb	r2, [r3, #0]
 8012758:	e78c      	b.n	8012674 <_dtoa_r+0x63c>
 801275a:	4b7f      	ldr	r3, [pc, #508]	; (8012958 <_dtoa_r+0x920>)
 801275c:	2200      	movs	r2, #0
 801275e:	f7ed ff53 	bl	8000608 <__aeabi_dmul>
 8012762:	2200      	movs	r2, #0
 8012764:	2300      	movs	r3, #0
 8012766:	4606      	mov	r6, r0
 8012768:	460f      	mov	r7, r1
 801276a:	f7ee f9b5 	bl	8000ad8 <__aeabi_dcmpeq>
 801276e:	2800      	cmp	r0, #0
 8012770:	d09b      	beq.n	80126aa <_dtoa_r+0x672>
 8012772:	e7cd      	b.n	8012710 <_dtoa_r+0x6d8>
 8012774:	9a08      	ldr	r2, [sp, #32]
 8012776:	2a00      	cmp	r2, #0
 8012778:	f000 80c4 	beq.w	8012904 <_dtoa_r+0x8cc>
 801277c:	9a05      	ldr	r2, [sp, #20]
 801277e:	2a01      	cmp	r2, #1
 8012780:	f300 80a8 	bgt.w	80128d4 <_dtoa_r+0x89c>
 8012784:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012786:	2a00      	cmp	r2, #0
 8012788:	f000 80a0 	beq.w	80128cc <_dtoa_r+0x894>
 801278c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012790:	9e06      	ldr	r6, [sp, #24]
 8012792:	4645      	mov	r5, r8
 8012794:	9a04      	ldr	r2, [sp, #16]
 8012796:	2101      	movs	r1, #1
 8012798:	441a      	add	r2, r3
 801279a:	4620      	mov	r0, r4
 801279c:	4498      	add	r8, r3
 801279e:	9204      	str	r2, [sp, #16]
 80127a0:	f001 f942 	bl	8013a28 <__i2b>
 80127a4:	4607      	mov	r7, r0
 80127a6:	2d00      	cmp	r5, #0
 80127a8:	dd0b      	ble.n	80127c2 <_dtoa_r+0x78a>
 80127aa:	9b04      	ldr	r3, [sp, #16]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	dd08      	ble.n	80127c2 <_dtoa_r+0x78a>
 80127b0:	42ab      	cmp	r3, r5
 80127b2:	9a04      	ldr	r2, [sp, #16]
 80127b4:	bfa8      	it	ge
 80127b6:	462b      	movge	r3, r5
 80127b8:	eba8 0803 	sub.w	r8, r8, r3
 80127bc:	1aed      	subs	r5, r5, r3
 80127be:	1ad3      	subs	r3, r2, r3
 80127c0:	9304      	str	r3, [sp, #16]
 80127c2:	9b06      	ldr	r3, [sp, #24]
 80127c4:	b1fb      	cbz	r3, 8012806 <_dtoa_r+0x7ce>
 80127c6:	9b08      	ldr	r3, [sp, #32]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	f000 809f 	beq.w	801290c <_dtoa_r+0x8d4>
 80127ce:	2e00      	cmp	r6, #0
 80127d0:	dd11      	ble.n	80127f6 <_dtoa_r+0x7be>
 80127d2:	4639      	mov	r1, r7
 80127d4:	4632      	mov	r2, r6
 80127d6:	4620      	mov	r0, r4
 80127d8:	f001 f9e2 	bl	8013ba0 <__pow5mult>
 80127dc:	465a      	mov	r2, fp
 80127de:	4601      	mov	r1, r0
 80127e0:	4607      	mov	r7, r0
 80127e2:	4620      	mov	r0, r4
 80127e4:	f001 f936 	bl	8013a54 <__multiply>
 80127e8:	4659      	mov	r1, fp
 80127ea:	9007      	str	r0, [sp, #28]
 80127ec:	4620      	mov	r0, r4
 80127ee:	f001 f815 	bl	801381c <_Bfree>
 80127f2:	9b07      	ldr	r3, [sp, #28]
 80127f4:	469b      	mov	fp, r3
 80127f6:	9b06      	ldr	r3, [sp, #24]
 80127f8:	1b9a      	subs	r2, r3, r6
 80127fa:	d004      	beq.n	8012806 <_dtoa_r+0x7ce>
 80127fc:	4659      	mov	r1, fp
 80127fe:	4620      	mov	r0, r4
 8012800:	f001 f9ce 	bl	8013ba0 <__pow5mult>
 8012804:	4683      	mov	fp, r0
 8012806:	2101      	movs	r1, #1
 8012808:	4620      	mov	r0, r4
 801280a:	f001 f90d 	bl	8013a28 <__i2b>
 801280e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012810:	2b00      	cmp	r3, #0
 8012812:	4606      	mov	r6, r0
 8012814:	dd7c      	ble.n	8012910 <_dtoa_r+0x8d8>
 8012816:	461a      	mov	r2, r3
 8012818:	4601      	mov	r1, r0
 801281a:	4620      	mov	r0, r4
 801281c:	f001 f9c0 	bl	8013ba0 <__pow5mult>
 8012820:	9b05      	ldr	r3, [sp, #20]
 8012822:	2b01      	cmp	r3, #1
 8012824:	4606      	mov	r6, r0
 8012826:	dd76      	ble.n	8012916 <_dtoa_r+0x8de>
 8012828:	2300      	movs	r3, #0
 801282a:	9306      	str	r3, [sp, #24]
 801282c:	6933      	ldr	r3, [r6, #16]
 801282e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012832:	6918      	ldr	r0, [r3, #16]
 8012834:	f001 f8a8 	bl	8013988 <__hi0bits>
 8012838:	f1c0 0020 	rsb	r0, r0, #32
 801283c:	9b04      	ldr	r3, [sp, #16]
 801283e:	4418      	add	r0, r3
 8012840:	f010 001f 	ands.w	r0, r0, #31
 8012844:	f000 8086 	beq.w	8012954 <_dtoa_r+0x91c>
 8012848:	f1c0 0320 	rsb	r3, r0, #32
 801284c:	2b04      	cmp	r3, #4
 801284e:	dd7f      	ble.n	8012950 <_dtoa_r+0x918>
 8012850:	f1c0 001c 	rsb	r0, r0, #28
 8012854:	9b04      	ldr	r3, [sp, #16]
 8012856:	4403      	add	r3, r0
 8012858:	4480      	add	r8, r0
 801285a:	4405      	add	r5, r0
 801285c:	9304      	str	r3, [sp, #16]
 801285e:	f1b8 0f00 	cmp.w	r8, #0
 8012862:	dd05      	ble.n	8012870 <_dtoa_r+0x838>
 8012864:	4659      	mov	r1, fp
 8012866:	4642      	mov	r2, r8
 8012868:	4620      	mov	r0, r4
 801286a:	f001 f9f3 	bl	8013c54 <__lshift>
 801286e:	4683      	mov	fp, r0
 8012870:	9b04      	ldr	r3, [sp, #16]
 8012872:	2b00      	cmp	r3, #0
 8012874:	dd05      	ble.n	8012882 <_dtoa_r+0x84a>
 8012876:	4631      	mov	r1, r6
 8012878:	461a      	mov	r2, r3
 801287a:	4620      	mov	r0, r4
 801287c:	f001 f9ea 	bl	8013c54 <__lshift>
 8012880:	4606      	mov	r6, r0
 8012882:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012884:	2b00      	cmp	r3, #0
 8012886:	d069      	beq.n	801295c <_dtoa_r+0x924>
 8012888:	4631      	mov	r1, r6
 801288a:	4658      	mov	r0, fp
 801288c:	f001 fa4e 	bl	8013d2c <__mcmp>
 8012890:	2800      	cmp	r0, #0
 8012892:	da63      	bge.n	801295c <_dtoa_r+0x924>
 8012894:	2300      	movs	r3, #0
 8012896:	4659      	mov	r1, fp
 8012898:	220a      	movs	r2, #10
 801289a:	4620      	mov	r0, r4
 801289c:	f000 ffe0 	bl	8013860 <__multadd>
 80128a0:	9b08      	ldr	r3, [sp, #32]
 80128a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80128a6:	4683      	mov	fp, r0
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	f000 818f 	beq.w	8012bcc <_dtoa_r+0xb94>
 80128ae:	4639      	mov	r1, r7
 80128b0:	2300      	movs	r3, #0
 80128b2:	220a      	movs	r2, #10
 80128b4:	4620      	mov	r0, r4
 80128b6:	f000 ffd3 	bl	8013860 <__multadd>
 80128ba:	f1b9 0f00 	cmp.w	r9, #0
 80128be:	4607      	mov	r7, r0
 80128c0:	f300 808e 	bgt.w	80129e0 <_dtoa_r+0x9a8>
 80128c4:	9b05      	ldr	r3, [sp, #20]
 80128c6:	2b02      	cmp	r3, #2
 80128c8:	dc50      	bgt.n	801296c <_dtoa_r+0x934>
 80128ca:	e089      	b.n	80129e0 <_dtoa_r+0x9a8>
 80128cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80128ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80128d2:	e75d      	b.n	8012790 <_dtoa_r+0x758>
 80128d4:	9b01      	ldr	r3, [sp, #4]
 80128d6:	1e5e      	subs	r6, r3, #1
 80128d8:	9b06      	ldr	r3, [sp, #24]
 80128da:	42b3      	cmp	r3, r6
 80128dc:	bfbf      	itttt	lt
 80128de:	9b06      	ldrlt	r3, [sp, #24]
 80128e0:	9606      	strlt	r6, [sp, #24]
 80128e2:	1af2      	sublt	r2, r6, r3
 80128e4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80128e6:	bfb6      	itet	lt
 80128e8:	189b      	addlt	r3, r3, r2
 80128ea:	1b9e      	subge	r6, r3, r6
 80128ec:	930d      	strlt	r3, [sp, #52]	; 0x34
 80128ee:	9b01      	ldr	r3, [sp, #4]
 80128f0:	bfb8      	it	lt
 80128f2:	2600      	movlt	r6, #0
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	bfb5      	itete	lt
 80128f8:	eba8 0503 	sublt.w	r5, r8, r3
 80128fc:	9b01      	ldrge	r3, [sp, #4]
 80128fe:	2300      	movlt	r3, #0
 8012900:	4645      	movge	r5, r8
 8012902:	e747      	b.n	8012794 <_dtoa_r+0x75c>
 8012904:	9e06      	ldr	r6, [sp, #24]
 8012906:	9f08      	ldr	r7, [sp, #32]
 8012908:	4645      	mov	r5, r8
 801290a:	e74c      	b.n	80127a6 <_dtoa_r+0x76e>
 801290c:	9a06      	ldr	r2, [sp, #24]
 801290e:	e775      	b.n	80127fc <_dtoa_r+0x7c4>
 8012910:	9b05      	ldr	r3, [sp, #20]
 8012912:	2b01      	cmp	r3, #1
 8012914:	dc18      	bgt.n	8012948 <_dtoa_r+0x910>
 8012916:	9b02      	ldr	r3, [sp, #8]
 8012918:	b9b3      	cbnz	r3, 8012948 <_dtoa_r+0x910>
 801291a:	9b03      	ldr	r3, [sp, #12]
 801291c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012920:	b9a3      	cbnz	r3, 801294c <_dtoa_r+0x914>
 8012922:	9b03      	ldr	r3, [sp, #12]
 8012924:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012928:	0d1b      	lsrs	r3, r3, #20
 801292a:	051b      	lsls	r3, r3, #20
 801292c:	b12b      	cbz	r3, 801293a <_dtoa_r+0x902>
 801292e:	9b04      	ldr	r3, [sp, #16]
 8012930:	3301      	adds	r3, #1
 8012932:	9304      	str	r3, [sp, #16]
 8012934:	f108 0801 	add.w	r8, r8, #1
 8012938:	2301      	movs	r3, #1
 801293a:	9306      	str	r3, [sp, #24]
 801293c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801293e:	2b00      	cmp	r3, #0
 8012940:	f47f af74 	bne.w	801282c <_dtoa_r+0x7f4>
 8012944:	2001      	movs	r0, #1
 8012946:	e779      	b.n	801283c <_dtoa_r+0x804>
 8012948:	2300      	movs	r3, #0
 801294a:	e7f6      	b.n	801293a <_dtoa_r+0x902>
 801294c:	9b02      	ldr	r3, [sp, #8]
 801294e:	e7f4      	b.n	801293a <_dtoa_r+0x902>
 8012950:	d085      	beq.n	801285e <_dtoa_r+0x826>
 8012952:	4618      	mov	r0, r3
 8012954:	301c      	adds	r0, #28
 8012956:	e77d      	b.n	8012854 <_dtoa_r+0x81c>
 8012958:	40240000 	.word	0x40240000
 801295c:	9b01      	ldr	r3, [sp, #4]
 801295e:	2b00      	cmp	r3, #0
 8012960:	dc38      	bgt.n	80129d4 <_dtoa_r+0x99c>
 8012962:	9b05      	ldr	r3, [sp, #20]
 8012964:	2b02      	cmp	r3, #2
 8012966:	dd35      	ble.n	80129d4 <_dtoa_r+0x99c>
 8012968:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801296c:	f1b9 0f00 	cmp.w	r9, #0
 8012970:	d10d      	bne.n	801298e <_dtoa_r+0x956>
 8012972:	4631      	mov	r1, r6
 8012974:	464b      	mov	r3, r9
 8012976:	2205      	movs	r2, #5
 8012978:	4620      	mov	r0, r4
 801297a:	f000 ff71 	bl	8013860 <__multadd>
 801297e:	4601      	mov	r1, r0
 8012980:	4606      	mov	r6, r0
 8012982:	4658      	mov	r0, fp
 8012984:	f001 f9d2 	bl	8013d2c <__mcmp>
 8012988:	2800      	cmp	r0, #0
 801298a:	f73f adbd 	bgt.w	8012508 <_dtoa_r+0x4d0>
 801298e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012990:	9d00      	ldr	r5, [sp, #0]
 8012992:	ea6f 0a03 	mvn.w	sl, r3
 8012996:	f04f 0800 	mov.w	r8, #0
 801299a:	4631      	mov	r1, r6
 801299c:	4620      	mov	r0, r4
 801299e:	f000 ff3d 	bl	801381c <_Bfree>
 80129a2:	2f00      	cmp	r7, #0
 80129a4:	f43f aeb4 	beq.w	8012710 <_dtoa_r+0x6d8>
 80129a8:	f1b8 0f00 	cmp.w	r8, #0
 80129ac:	d005      	beq.n	80129ba <_dtoa_r+0x982>
 80129ae:	45b8      	cmp	r8, r7
 80129b0:	d003      	beq.n	80129ba <_dtoa_r+0x982>
 80129b2:	4641      	mov	r1, r8
 80129b4:	4620      	mov	r0, r4
 80129b6:	f000 ff31 	bl	801381c <_Bfree>
 80129ba:	4639      	mov	r1, r7
 80129bc:	4620      	mov	r0, r4
 80129be:	f000 ff2d 	bl	801381c <_Bfree>
 80129c2:	e6a5      	b.n	8012710 <_dtoa_r+0x6d8>
 80129c4:	2600      	movs	r6, #0
 80129c6:	4637      	mov	r7, r6
 80129c8:	e7e1      	b.n	801298e <_dtoa_r+0x956>
 80129ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80129cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80129d0:	4637      	mov	r7, r6
 80129d2:	e599      	b.n	8012508 <_dtoa_r+0x4d0>
 80129d4:	9b08      	ldr	r3, [sp, #32]
 80129d6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	f000 80fd 	beq.w	8012bda <_dtoa_r+0xba2>
 80129e0:	2d00      	cmp	r5, #0
 80129e2:	dd05      	ble.n	80129f0 <_dtoa_r+0x9b8>
 80129e4:	4639      	mov	r1, r7
 80129e6:	462a      	mov	r2, r5
 80129e8:	4620      	mov	r0, r4
 80129ea:	f001 f933 	bl	8013c54 <__lshift>
 80129ee:	4607      	mov	r7, r0
 80129f0:	9b06      	ldr	r3, [sp, #24]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d05c      	beq.n	8012ab0 <_dtoa_r+0xa78>
 80129f6:	6879      	ldr	r1, [r7, #4]
 80129f8:	4620      	mov	r0, r4
 80129fa:	f000 fecf 	bl	801379c <_Balloc>
 80129fe:	4605      	mov	r5, r0
 8012a00:	b928      	cbnz	r0, 8012a0e <_dtoa_r+0x9d6>
 8012a02:	4b80      	ldr	r3, [pc, #512]	; (8012c04 <_dtoa_r+0xbcc>)
 8012a04:	4602      	mov	r2, r0
 8012a06:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012a0a:	f7ff bb2e 	b.w	801206a <_dtoa_r+0x32>
 8012a0e:	693a      	ldr	r2, [r7, #16]
 8012a10:	3202      	adds	r2, #2
 8012a12:	0092      	lsls	r2, r2, #2
 8012a14:	f107 010c 	add.w	r1, r7, #12
 8012a18:	300c      	adds	r0, #12
 8012a1a:	f7fd faf7 	bl	801000c <memcpy>
 8012a1e:	2201      	movs	r2, #1
 8012a20:	4629      	mov	r1, r5
 8012a22:	4620      	mov	r0, r4
 8012a24:	f001 f916 	bl	8013c54 <__lshift>
 8012a28:	9b00      	ldr	r3, [sp, #0]
 8012a2a:	3301      	adds	r3, #1
 8012a2c:	9301      	str	r3, [sp, #4]
 8012a2e:	9b00      	ldr	r3, [sp, #0]
 8012a30:	444b      	add	r3, r9
 8012a32:	9307      	str	r3, [sp, #28]
 8012a34:	9b02      	ldr	r3, [sp, #8]
 8012a36:	f003 0301 	and.w	r3, r3, #1
 8012a3a:	46b8      	mov	r8, r7
 8012a3c:	9306      	str	r3, [sp, #24]
 8012a3e:	4607      	mov	r7, r0
 8012a40:	9b01      	ldr	r3, [sp, #4]
 8012a42:	4631      	mov	r1, r6
 8012a44:	3b01      	subs	r3, #1
 8012a46:	4658      	mov	r0, fp
 8012a48:	9302      	str	r3, [sp, #8]
 8012a4a:	f7ff fa6a 	bl	8011f22 <quorem>
 8012a4e:	4603      	mov	r3, r0
 8012a50:	3330      	adds	r3, #48	; 0x30
 8012a52:	9004      	str	r0, [sp, #16]
 8012a54:	4641      	mov	r1, r8
 8012a56:	4658      	mov	r0, fp
 8012a58:	9308      	str	r3, [sp, #32]
 8012a5a:	f001 f967 	bl	8013d2c <__mcmp>
 8012a5e:	463a      	mov	r2, r7
 8012a60:	4681      	mov	r9, r0
 8012a62:	4631      	mov	r1, r6
 8012a64:	4620      	mov	r0, r4
 8012a66:	f001 f97d 	bl	8013d64 <__mdiff>
 8012a6a:	68c2      	ldr	r2, [r0, #12]
 8012a6c:	9b08      	ldr	r3, [sp, #32]
 8012a6e:	4605      	mov	r5, r0
 8012a70:	bb02      	cbnz	r2, 8012ab4 <_dtoa_r+0xa7c>
 8012a72:	4601      	mov	r1, r0
 8012a74:	4658      	mov	r0, fp
 8012a76:	f001 f959 	bl	8013d2c <__mcmp>
 8012a7a:	9b08      	ldr	r3, [sp, #32]
 8012a7c:	4602      	mov	r2, r0
 8012a7e:	4629      	mov	r1, r5
 8012a80:	4620      	mov	r0, r4
 8012a82:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8012a86:	f000 fec9 	bl	801381c <_Bfree>
 8012a8a:	9b05      	ldr	r3, [sp, #20]
 8012a8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012a8e:	9d01      	ldr	r5, [sp, #4]
 8012a90:	ea43 0102 	orr.w	r1, r3, r2
 8012a94:	9b06      	ldr	r3, [sp, #24]
 8012a96:	430b      	orrs	r3, r1
 8012a98:	9b08      	ldr	r3, [sp, #32]
 8012a9a:	d10d      	bne.n	8012ab8 <_dtoa_r+0xa80>
 8012a9c:	2b39      	cmp	r3, #57	; 0x39
 8012a9e:	d029      	beq.n	8012af4 <_dtoa_r+0xabc>
 8012aa0:	f1b9 0f00 	cmp.w	r9, #0
 8012aa4:	dd01      	ble.n	8012aaa <_dtoa_r+0xa72>
 8012aa6:	9b04      	ldr	r3, [sp, #16]
 8012aa8:	3331      	adds	r3, #49	; 0x31
 8012aaa:	9a02      	ldr	r2, [sp, #8]
 8012aac:	7013      	strb	r3, [r2, #0]
 8012aae:	e774      	b.n	801299a <_dtoa_r+0x962>
 8012ab0:	4638      	mov	r0, r7
 8012ab2:	e7b9      	b.n	8012a28 <_dtoa_r+0x9f0>
 8012ab4:	2201      	movs	r2, #1
 8012ab6:	e7e2      	b.n	8012a7e <_dtoa_r+0xa46>
 8012ab8:	f1b9 0f00 	cmp.w	r9, #0
 8012abc:	db06      	blt.n	8012acc <_dtoa_r+0xa94>
 8012abe:	9905      	ldr	r1, [sp, #20]
 8012ac0:	ea41 0909 	orr.w	r9, r1, r9
 8012ac4:	9906      	ldr	r1, [sp, #24]
 8012ac6:	ea59 0101 	orrs.w	r1, r9, r1
 8012aca:	d120      	bne.n	8012b0e <_dtoa_r+0xad6>
 8012acc:	2a00      	cmp	r2, #0
 8012ace:	ddec      	ble.n	8012aaa <_dtoa_r+0xa72>
 8012ad0:	4659      	mov	r1, fp
 8012ad2:	2201      	movs	r2, #1
 8012ad4:	4620      	mov	r0, r4
 8012ad6:	9301      	str	r3, [sp, #4]
 8012ad8:	f001 f8bc 	bl	8013c54 <__lshift>
 8012adc:	4631      	mov	r1, r6
 8012ade:	4683      	mov	fp, r0
 8012ae0:	f001 f924 	bl	8013d2c <__mcmp>
 8012ae4:	2800      	cmp	r0, #0
 8012ae6:	9b01      	ldr	r3, [sp, #4]
 8012ae8:	dc02      	bgt.n	8012af0 <_dtoa_r+0xab8>
 8012aea:	d1de      	bne.n	8012aaa <_dtoa_r+0xa72>
 8012aec:	07da      	lsls	r2, r3, #31
 8012aee:	d5dc      	bpl.n	8012aaa <_dtoa_r+0xa72>
 8012af0:	2b39      	cmp	r3, #57	; 0x39
 8012af2:	d1d8      	bne.n	8012aa6 <_dtoa_r+0xa6e>
 8012af4:	9a02      	ldr	r2, [sp, #8]
 8012af6:	2339      	movs	r3, #57	; 0x39
 8012af8:	7013      	strb	r3, [r2, #0]
 8012afa:	462b      	mov	r3, r5
 8012afc:	461d      	mov	r5, r3
 8012afe:	3b01      	subs	r3, #1
 8012b00:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012b04:	2a39      	cmp	r2, #57	; 0x39
 8012b06:	d050      	beq.n	8012baa <_dtoa_r+0xb72>
 8012b08:	3201      	adds	r2, #1
 8012b0a:	701a      	strb	r2, [r3, #0]
 8012b0c:	e745      	b.n	801299a <_dtoa_r+0x962>
 8012b0e:	2a00      	cmp	r2, #0
 8012b10:	dd03      	ble.n	8012b1a <_dtoa_r+0xae2>
 8012b12:	2b39      	cmp	r3, #57	; 0x39
 8012b14:	d0ee      	beq.n	8012af4 <_dtoa_r+0xabc>
 8012b16:	3301      	adds	r3, #1
 8012b18:	e7c7      	b.n	8012aaa <_dtoa_r+0xa72>
 8012b1a:	9a01      	ldr	r2, [sp, #4]
 8012b1c:	9907      	ldr	r1, [sp, #28]
 8012b1e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012b22:	428a      	cmp	r2, r1
 8012b24:	d02a      	beq.n	8012b7c <_dtoa_r+0xb44>
 8012b26:	4659      	mov	r1, fp
 8012b28:	2300      	movs	r3, #0
 8012b2a:	220a      	movs	r2, #10
 8012b2c:	4620      	mov	r0, r4
 8012b2e:	f000 fe97 	bl	8013860 <__multadd>
 8012b32:	45b8      	cmp	r8, r7
 8012b34:	4683      	mov	fp, r0
 8012b36:	f04f 0300 	mov.w	r3, #0
 8012b3a:	f04f 020a 	mov.w	r2, #10
 8012b3e:	4641      	mov	r1, r8
 8012b40:	4620      	mov	r0, r4
 8012b42:	d107      	bne.n	8012b54 <_dtoa_r+0xb1c>
 8012b44:	f000 fe8c 	bl	8013860 <__multadd>
 8012b48:	4680      	mov	r8, r0
 8012b4a:	4607      	mov	r7, r0
 8012b4c:	9b01      	ldr	r3, [sp, #4]
 8012b4e:	3301      	adds	r3, #1
 8012b50:	9301      	str	r3, [sp, #4]
 8012b52:	e775      	b.n	8012a40 <_dtoa_r+0xa08>
 8012b54:	f000 fe84 	bl	8013860 <__multadd>
 8012b58:	4639      	mov	r1, r7
 8012b5a:	4680      	mov	r8, r0
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	220a      	movs	r2, #10
 8012b60:	4620      	mov	r0, r4
 8012b62:	f000 fe7d 	bl	8013860 <__multadd>
 8012b66:	4607      	mov	r7, r0
 8012b68:	e7f0      	b.n	8012b4c <_dtoa_r+0xb14>
 8012b6a:	f1b9 0f00 	cmp.w	r9, #0
 8012b6e:	9a00      	ldr	r2, [sp, #0]
 8012b70:	bfcc      	ite	gt
 8012b72:	464d      	movgt	r5, r9
 8012b74:	2501      	movle	r5, #1
 8012b76:	4415      	add	r5, r2
 8012b78:	f04f 0800 	mov.w	r8, #0
 8012b7c:	4659      	mov	r1, fp
 8012b7e:	2201      	movs	r2, #1
 8012b80:	4620      	mov	r0, r4
 8012b82:	9301      	str	r3, [sp, #4]
 8012b84:	f001 f866 	bl	8013c54 <__lshift>
 8012b88:	4631      	mov	r1, r6
 8012b8a:	4683      	mov	fp, r0
 8012b8c:	f001 f8ce 	bl	8013d2c <__mcmp>
 8012b90:	2800      	cmp	r0, #0
 8012b92:	dcb2      	bgt.n	8012afa <_dtoa_r+0xac2>
 8012b94:	d102      	bne.n	8012b9c <_dtoa_r+0xb64>
 8012b96:	9b01      	ldr	r3, [sp, #4]
 8012b98:	07db      	lsls	r3, r3, #31
 8012b9a:	d4ae      	bmi.n	8012afa <_dtoa_r+0xac2>
 8012b9c:	462b      	mov	r3, r5
 8012b9e:	461d      	mov	r5, r3
 8012ba0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012ba4:	2a30      	cmp	r2, #48	; 0x30
 8012ba6:	d0fa      	beq.n	8012b9e <_dtoa_r+0xb66>
 8012ba8:	e6f7      	b.n	801299a <_dtoa_r+0x962>
 8012baa:	9a00      	ldr	r2, [sp, #0]
 8012bac:	429a      	cmp	r2, r3
 8012bae:	d1a5      	bne.n	8012afc <_dtoa_r+0xac4>
 8012bb0:	f10a 0a01 	add.w	sl, sl, #1
 8012bb4:	2331      	movs	r3, #49	; 0x31
 8012bb6:	e779      	b.n	8012aac <_dtoa_r+0xa74>
 8012bb8:	4b13      	ldr	r3, [pc, #76]	; (8012c08 <_dtoa_r+0xbd0>)
 8012bba:	f7ff baaf 	b.w	801211c <_dtoa_r+0xe4>
 8012bbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	f47f aa86 	bne.w	80120d2 <_dtoa_r+0x9a>
 8012bc6:	4b11      	ldr	r3, [pc, #68]	; (8012c0c <_dtoa_r+0xbd4>)
 8012bc8:	f7ff baa8 	b.w	801211c <_dtoa_r+0xe4>
 8012bcc:	f1b9 0f00 	cmp.w	r9, #0
 8012bd0:	dc03      	bgt.n	8012bda <_dtoa_r+0xba2>
 8012bd2:	9b05      	ldr	r3, [sp, #20]
 8012bd4:	2b02      	cmp	r3, #2
 8012bd6:	f73f aec9 	bgt.w	801296c <_dtoa_r+0x934>
 8012bda:	9d00      	ldr	r5, [sp, #0]
 8012bdc:	4631      	mov	r1, r6
 8012bde:	4658      	mov	r0, fp
 8012be0:	f7ff f99f 	bl	8011f22 <quorem>
 8012be4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012be8:	f805 3b01 	strb.w	r3, [r5], #1
 8012bec:	9a00      	ldr	r2, [sp, #0]
 8012bee:	1aaa      	subs	r2, r5, r2
 8012bf0:	4591      	cmp	r9, r2
 8012bf2:	ddba      	ble.n	8012b6a <_dtoa_r+0xb32>
 8012bf4:	4659      	mov	r1, fp
 8012bf6:	2300      	movs	r3, #0
 8012bf8:	220a      	movs	r2, #10
 8012bfa:	4620      	mov	r0, r4
 8012bfc:	f000 fe30 	bl	8013860 <__multadd>
 8012c00:	4683      	mov	fp, r0
 8012c02:	e7eb      	b.n	8012bdc <_dtoa_r+0xba4>
 8012c04:	080166eb 	.word	0x080166eb
 8012c08:	080165e9 	.word	0x080165e9
 8012c0c:	08016668 	.word	0x08016668

08012c10 <__sflush_r>:
 8012c10:	898a      	ldrh	r2, [r1, #12]
 8012c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c16:	4605      	mov	r5, r0
 8012c18:	0710      	lsls	r0, r2, #28
 8012c1a:	460c      	mov	r4, r1
 8012c1c:	d458      	bmi.n	8012cd0 <__sflush_r+0xc0>
 8012c1e:	684b      	ldr	r3, [r1, #4]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	dc05      	bgt.n	8012c30 <__sflush_r+0x20>
 8012c24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	dc02      	bgt.n	8012c30 <__sflush_r+0x20>
 8012c2a:	2000      	movs	r0, #0
 8012c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012c32:	2e00      	cmp	r6, #0
 8012c34:	d0f9      	beq.n	8012c2a <__sflush_r+0x1a>
 8012c36:	2300      	movs	r3, #0
 8012c38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012c3c:	682f      	ldr	r7, [r5, #0]
 8012c3e:	602b      	str	r3, [r5, #0]
 8012c40:	d032      	beq.n	8012ca8 <__sflush_r+0x98>
 8012c42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012c44:	89a3      	ldrh	r3, [r4, #12]
 8012c46:	075a      	lsls	r2, r3, #29
 8012c48:	d505      	bpl.n	8012c56 <__sflush_r+0x46>
 8012c4a:	6863      	ldr	r3, [r4, #4]
 8012c4c:	1ac0      	subs	r0, r0, r3
 8012c4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012c50:	b10b      	cbz	r3, 8012c56 <__sflush_r+0x46>
 8012c52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012c54:	1ac0      	subs	r0, r0, r3
 8012c56:	2300      	movs	r3, #0
 8012c58:	4602      	mov	r2, r0
 8012c5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012c5c:	6a21      	ldr	r1, [r4, #32]
 8012c5e:	4628      	mov	r0, r5
 8012c60:	47b0      	blx	r6
 8012c62:	1c43      	adds	r3, r0, #1
 8012c64:	89a3      	ldrh	r3, [r4, #12]
 8012c66:	d106      	bne.n	8012c76 <__sflush_r+0x66>
 8012c68:	6829      	ldr	r1, [r5, #0]
 8012c6a:	291d      	cmp	r1, #29
 8012c6c:	d82c      	bhi.n	8012cc8 <__sflush_r+0xb8>
 8012c6e:	4a2a      	ldr	r2, [pc, #168]	; (8012d18 <__sflush_r+0x108>)
 8012c70:	40ca      	lsrs	r2, r1
 8012c72:	07d6      	lsls	r6, r2, #31
 8012c74:	d528      	bpl.n	8012cc8 <__sflush_r+0xb8>
 8012c76:	2200      	movs	r2, #0
 8012c78:	6062      	str	r2, [r4, #4]
 8012c7a:	04d9      	lsls	r1, r3, #19
 8012c7c:	6922      	ldr	r2, [r4, #16]
 8012c7e:	6022      	str	r2, [r4, #0]
 8012c80:	d504      	bpl.n	8012c8c <__sflush_r+0x7c>
 8012c82:	1c42      	adds	r2, r0, #1
 8012c84:	d101      	bne.n	8012c8a <__sflush_r+0x7a>
 8012c86:	682b      	ldr	r3, [r5, #0]
 8012c88:	b903      	cbnz	r3, 8012c8c <__sflush_r+0x7c>
 8012c8a:	6560      	str	r0, [r4, #84]	; 0x54
 8012c8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012c8e:	602f      	str	r7, [r5, #0]
 8012c90:	2900      	cmp	r1, #0
 8012c92:	d0ca      	beq.n	8012c2a <__sflush_r+0x1a>
 8012c94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012c98:	4299      	cmp	r1, r3
 8012c9a:	d002      	beq.n	8012ca2 <__sflush_r+0x92>
 8012c9c:	4628      	mov	r0, r5
 8012c9e:	f001 fa47 	bl	8014130 <_free_r>
 8012ca2:	2000      	movs	r0, #0
 8012ca4:	6360      	str	r0, [r4, #52]	; 0x34
 8012ca6:	e7c1      	b.n	8012c2c <__sflush_r+0x1c>
 8012ca8:	6a21      	ldr	r1, [r4, #32]
 8012caa:	2301      	movs	r3, #1
 8012cac:	4628      	mov	r0, r5
 8012cae:	47b0      	blx	r6
 8012cb0:	1c41      	adds	r1, r0, #1
 8012cb2:	d1c7      	bne.n	8012c44 <__sflush_r+0x34>
 8012cb4:	682b      	ldr	r3, [r5, #0]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d0c4      	beq.n	8012c44 <__sflush_r+0x34>
 8012cba:	2b1d      	cmp	r3, #29
 8012cbc:	d001      	beq.n	8012cc2 <__sflush_r+0xb2>
 8012cbe:	2b16      	cmp	r3, #22
 8012cc0:	d101      	bne.n	8012cc6 <__sflush_r+0xb6>
 8012cc2:	602f      	str	r7, [r5, #0]
 8012cc4:	e7b1      	b.n	8012c2a <__sflush_r+0x1a>
 8012cc6:	89a3      	ldrh	r3, [r4, #12]
 8012cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ccc:	81a3      	strh	r3, [r4, #12]
 8012cce:	e7ad      	b.n	8012c2c <__sflush_r+0x1c>
 8012cd0:	690f      	ldr	r7, [r1, #16]
 8012cd2:	2f00      	cmp	r7, #0
 8012cd4:	d0a9      	beq.n	8012c2a <__sflush_r+0x1a>
 8012cd6:	0793      	lsls	r3, r2, #30
 8012cd8:	680e      	ldr	r6, [r1, #0]
 8012cda:	bf08      	it	eq
 8012cdc:	694b      	ldreq	r3, [r1, #20]
 8012cde:	600f      	str	r7, [r1, #0]
 8012ce0:	bf18      	it	ne
 8012ce2:	2300      	movne	r3, #0
 8012ce4:	eba6 0807 	sub.w	r8, r6, r7
 8012ce8:	608b      	str	r3, [r1, #8]
 8012cea:	f1b8 0f00 	cmp.w	r8, #0
 8012cee:	dd9c      	ble.n	8012c2a <__sflush_r+0x1a>
 8012cf0:	6a21      	ldr	r1, [r4, #32]
 8012cf2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012cf4:	4643      	mov	r3, r8
 8012cf6:	463a      	mov	r2, r7
 8012cf8:	4628      	mov	r0, r5
 8012cfa:	47b0      	blx	r6
 8012cfc:	2800      	cmp	r0, #0
 8012cfe:	dc06      	bgt.n	8012d0e <__sflush_r+0xfe>
 8012d00:	89a3      	ldrh	r3, [r4, #12]
 8012d02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d06:	81a3      	strh	r3, [r4, #12]
 8012d08:	f04f 30ff 	mov.w	r0, #4294967295
 8012d0c:	e78e      	b.n	8012c2c <__sflush_r+0x1c>
 8012d0e:	4407      	add	r7, r0
 8012d10:	eba8 0800 	sub.w	r8, r8, r0
 8012d14:	e7e9      	b.n	8012cea <__sflush_r+0xda>
 8012d16:	bf00      	nop
 8012d18:	20400001 	.word	0x20400001

08012d1c <_fflush_r>:
 8012d1c:	b538      	push	{r3, r4, r5, lr}
 8012d1e:	690b      	ldr	r3, [r1, #16]
 8012d20:	4605      	mov	r5, r0
 8012d22:	460c      	mov	r4, r1
 8012d24:	b913      	cbnz	r3, 8012d2c <_fflush_r+0x10>
 8012d26:	2500      	movs	r5, #0
 8012d28:	4628      	mov	r0, r5
 8012d2a:	bd38      	pop	{r3, r4, r5, pc}
 8012d2c:	b118      	cbz	r0, 8012d36 <_fflush_r+0x1a>
 8012d2e:	6983      	ldr	r3, [r0, #24]
 8012d30:	b90b      	cbnz	r3, 8012d36 <_fflush_r+0x1a>
 8012d32:	f000 f887 	bl	8012e44 <__sinit>
 8012d36:	4b14      	ldr	r3, [pc, #80]	; (8012d88 <_fflush_r+0x6c>)
 8012d38:	429c      	cmp	r4, r3
 8012d3a:	d11b      	bne.n	8012d74 <_fflush_r+0x58>
 8012d3c:	686c      	ldr	r4, [r5, #4]
 8012d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d0ef      	beq.n	8012d26 <_fflush_r+0xa>
 8012d46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012d48:	07d0      	lsls	r0, r2, #31
 8012d4a:	d404      	bmi.n	8012d56 <_fflush_r+0x3a>
 8012d4c:	0599      	lsls	r1, r3, #22
 8012d4e:	d402      	bmi.n	8012d56 <_fflush_r+0x3a>
 8012d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d52:	f000 fc88 	bl	8013666 <__retarget_lock_acquire_recursive>
 8012d56:	4628      	mov	r0, r5
 8012d58:	4621      	mov	r1, r4
 8012d5a:	f7ff ff59 	bl	8012c10 <__sflush_r>
 8012d5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012d60:	07da      	lsls	r2, r3, #31
 8012d62:	4605      	mov	r5, r0
 8012d64:	d4e0      	bmi.n	8012d28 <_fflush_r+0xc>
 8012d66:	89a3      	ldrh	r3, [r4, #12]
 8012d68:	059b      	lsls	r3, r3, #22
 8012d6a:	d4dd      	bmi.n	8012d28 <_fflush_r+0xc>
 8012d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d6e:	f000 fc7b 	bl	8013668 <__retarget_lock_release_recursive>
 8012d72:	e7d9      	b.n	8012d28 <_fflush_r+0xc>
 8012d74:	4b05      	ldr	r3, [pc, #20]	; (8012d8c <_fflush_r+0x70>)
 8012d76:	429c      	cmp	r4, r3
 8012d78:	d101      	bne.n	8012d7e <_fflush_r+0x62>
 8012d7a:	68ac      	ldr	r4, [r5, #8]
 8012d7c:	e7df      	b.n	8012d3e <_fflush_r+0x22>
 8012d7e:	4b04      	ldr	r3, [pc, #16]	; (8012d90 <_fflush_r+0x74>)
 8012d80:	429c      	cmp	r4, r3
 8012d82:	bf08      	it	eq
 8012d84:	68ec      	ldreq	r4, [r5, #12]
 8012d86:	e7da      	b.n	8012d3e <_fflush_r+0x22>
 8012d88:	0801671c 	.word	0x0801671c
 8012d8c:	0801673c 	.word	0x0801673c
 8012d90:	080166fc 	.word	0x080166fc

08012d94 <std>:
 8012d94:	2300      	movs	r3, #0
 8012d96:	b510      	push	{r4, lr}
 8012d98:	4604      	mov	r4, r0
 8012d9a:	e9c0 3300 	strd	r3, r3, [r0]
 8012d9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012da2:	6083      	str	r3, [r0, #8]
 8012da4:	8181      	strh	r1, [r0, #12]
 8012da6:	6643      	str	r3, [r0, #100]	; 0x64
 8012da8:	81c2      	strh	r2, [r0, #14]
 8012daa:	6183      	str	r3, [r0, #24]
 8012dac:	4619      	mov	r1, r3
 8012dae:	2208      	movs	r2, #8
 8012db0:	305c      	adds	r0, #92	; 0x5c
 8012db2:	f7fd f939 	bl	8010028 <memset>
 8012db6:	4b05      	ldr	r3, [pc, #20]	; (8012dcc <std+0x38>)
 8012db8:	6263      	str	r3, [r4, #36]	; 0x24
 8012dba:	4b05      	ldr	r3, [pc, #20]	; (8012dd0 <std+0x3c>)
 8012dbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8012dbe:	4b05      	ldr	r3, [pc, #20]	; (8012dd4 <std+0x40>)
 8012dc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012dc2:	4b05      	ldr	r3, [pc, #20]	; (8012dd8 <std+0x44>)
 8012dc4:	6224      	str	r4, [r4, #32]
 8012dc6:	6323      	str	r3, [r4, #48]	; 0x30
 8012dc8:	bd10      	pop	{r4, pc}
 8012dca:	bf00      	nop
 8012dcc:	08014641 	.word	0x08014641
 8012dd0:	08014663 	.word	0x08014663
 8012dd4:	0801469b 	.word	0x0801469b
 8012dd8:	080146bf 	.word	0x080146bf

08012ddc <_cleanup_r>:
 8012ddc:	4901      	ldr	r1, [pc, #4]	; (8012de4 <_cleanup_r+0x8>)
 8012dde:	f000 b8af 	b.w	8012f40 <_fwalk_reent>
 8012de2:	bf00      	nop
 8012de4:	08012d1d 	.word	0x08012d1d

08012de8 <__sfmoreglue>:
 8012de8:	b570      	push	{r4, r5, r6, lr}
 8012dea:	1e4a      	subs	r2, r1, #1
 8012dec:	2568      	movs	r5, #104	; 0x68
 8012dee:	4355      	muls	r5, r2
 8012df0:	460e      	mov	r6, r1
 8012df2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012df6:	f001 f9eb 	bl	80141d0 <_malloc_r>
 8012dfa:	4604      	mov	r4, r0
 8012dfc:	b140      	cbz	r0, 8012e10 <__sfmoreglue+0x28>
 8012dfe:	2100      	movs	r1, #0
 8012e00:	e9c0 1600 	strd	r1, r6, [r0]
 8012e04:	300c      	adds	r0, #12
 8012e06:	60a0      	str	r0, [r4, #8]
 8012e08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012e0c:	f7fd f90c 	bl	8010028 <memset>
 8012e10:	4620      	mov	r0, r4
 8012e12:	bd70      	pop	{r4, r5, r6, pc}

08012e14 <__sfp_lock_acquire>:
 8012e14:	4801      	ldr	r0, [pc, #4]	; (8012e1c <__sfp_lock_acquire+0x8>)
 8012e16:	f000 bc26 	b.w	8013666 <__retarget_lock_acquire_recursive>
 8012e1a:	bf00      	nop
 8012e1c:	20004a2c 	.word	0x20004a2c

08012e20 <__sfp_lock_release>:
 8012e20:	4801      	ldr	r0, [pc, #4]	; (8012e28 <__sfp_lock_release+0x8>)
 8012e22:	f000 bc21 	b.w	8013668 <__retarget_lock_release_recursive>
 8012e26:	bf00      	nop
 8012e28:	20004a2c 	.word	0x20004a2c

08012e2c <__sinit_lock_acquire>:
 8012e2c:	4801      	ldr	r0, [pc, #4]	; (8012e34 <__sinit_lock_acquire+0x8>)
 8012e2e:	f000 bc1a 	b.w	8013666 <__retarget_lock_acquire_recursive>
 8012e32:	bf00      	nop
 8012e34:	20004a27 	.word	0x20004a27

08012e38 <__sinit_lock_release>:
 8012e38:	4801      	ldr	r0, [pc, #4]	; (8012e40 <__sinit_lock_release+0x8>)
 8012e3a:	f000 bc15 	b.w	8013668 <__retarget_lock_release_recursive>
 8012e3e:	bf00      	nop
 8012e40:	20004a27 	.word	0x20004a27

08012e44 <__sinit>:
 8012e44:	b510      	push	{r4, lr}
 8012e46:	4604      	mov	r4, r0
 8012e48:	f7ff fff0 	bl	8012e2c <__sinit_lock_acquire>
 8012e4c:	69a3      	ldr	r3, [r4, #24]
 8012e4e:	b11b      	cbz	r3, 8012e58 <__sinit+0x14>
 8012e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e54:	f7ff bff0 	b.w	8012e38 <__sinit_lock_release>
 8012e58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012e5c:	6523      	str	r3, [r4, #80]	; 0x50
 8012e5e:	4b13      	ldr	r3, [pc, #76]	; (8012eac <__sinit+0x68>)
 8012e60:	4a13      	ldr	r2, [pc, #76]	; (8012eb0 <__sinit+0x6c>)
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	62a2      	str	r2, [r4, #40]	; 0x28
 8012e66:	42a3      	cmp	r3, r4
 8012e68:	bf04      	itt	eq
 8012e6a:	2301      	moveq	r3, #1
 8012e6c:	61a3      	streq	r3, [r4, #24]
 8012e6e:	4620      	mov	r0, r4
 8012e70:	f000 f820 	bl	8012eb4 <__sfp>
 8012e74:	6060      	str	r0, [r4, #4]
 8012e76:	4620      	mov	r0, r4
 8012e78:	f000 f81c 	bl	8012eb4 <__sfp>
 8012e7c:	60a0      	str	r0, [r4, #8]
 8012e7e:	4620      	mov	r0, r4
 8012e80:	f000 f818 	bl	8012eb4 <__sfp>
 8012e84:	2200      	movs	r2, #0
 8012e86:	60e0      	str	r0, [r4, #12]
 8012e88:	2104      	movs	r1, #4
 8012e8a:	6860      	ldr	r0, [r4, #4]
 8012e8c:	f7ff ff82 	bl	8012d94 <std>
 8012e90:	68a0      	ldr	r0, [r4, #8]
 8012e92:	2201      	movs	r2, #1
 8012e94:	2109      	movs	r1, #9
 8012e96:	f7ff ff7d 	bl	8012d94 <std>
 8012e9a:	68e0      	ldr	r0, [r4, #12]
 8012e9c:	2202      	movs	r2, #2
 8012e9e:	2112      	movs	r1, #18
 8012ea0:	f7ff ff78 	bl	8012d94 <std>
 8012ea4:	2301      	movs	r3, #1
 8012ea6:	61a3      	str	r3, [r4, #24]
 8012ea8:	e7d2      	b.n	8012e50 <__sinit+0xc>
 8012eaa:	bf00      	nop
 8012eac:	080165c4 	.word	0x080165c4
 8012eb0:	08012ddd 	.word	0x08012ddd

08012eb4 <__sfp>:
 8012eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012eb6:	4607      	mov	r7, r0
 8012eb8:	f7ff ffac 	bl	8012e14 <__sfp_lock_acquire>
 8012ebc:	4b1e      	ldr	r3, [pc, #120]	; (8012f38 <__sfp+0x84>)
 8012ebe:	681e      	ldr	r6, [r3, #0]
 8012ec0:	69b3      	ldr	r3, [r6, #24]
 8012ec2:	b913      	cbnz	r3, 8012eca <__sfp+0x16>
 8012ec4:	4630      	mov	r0, r6
 8012ec6:	f7ff ffbd 	bl	8012e44 <__sinit>
 8012eca:	3648      	adds	r6, #72	; 0x48
 8012ecc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012ed0:	3b01      	subs	r3, #1
 8012ed2:	d503      	bpl.n	8012edc <__sfp+0x28>
 8012ed4:	6833      	ldr	r3, [r6, #0]
 8012ed6:	b30b      	cbz	r3, 8012f1c <__sfp+0x68>
 8012ed8:	6836      	ldr	r6, [r6, #0]
 8012eda:	e7f7      	b.n	8012ecc <__sfp+0x18>
 8012edc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012ee0:	b9d5      	cbnz	r5, 8012f18 <__sfp+0x64>
 8012ee2:	4b16      	ldr	r3, [pc, #88]	; (8012f3c <__sfp+0x88>)
 8012ee4:	60e3      	str	r3, [r4, #12]
 8012ee6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012eea:	6665      	str	r5, [r4, #100]	; 0x64
 8012eec:	f000 fbba 	bl	8013664 <__retarget_lock_init_recursive>
 8012ef0:	f7ff ff96 	bl	8012e20 <__sfp_lock_release>
 8012ef4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012ef8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012efc:	6025      	str	r5, [r4, #0]
 8012efe:	61a5      	str	r5, [r4, #24]
 8012f00:	2208      	movs	r2, #8
 8012f02:	4629      	mov	r1, r5
 8012f04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012f08:	f7fd f88e 	bl	8010028 <memset>
 8012f0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012f10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012f14:	4620      	mov	r0, r4
 8012f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f18:	3468      	adds	r4, #104	; 0x68
 8012f1a:	e7d9      	b.n	8012ed0 <__sfp+0x1c>
 8012f1c:	2104      	movs	r1, #4
 8012f1e:	4638      	mov	r0, r7
 8012f20:	f7ff ff62 	bl	8012de8 <__sfmoreglue>
 8012f24:	4604      	mov	r4, r0
 8012f26:	6030      	str	r0, [r6, #0]
 8012f28:	2800      	cmp	r0, #0
 8012f2a:	d1d5      	bne.n	8012ed8 <__sfp+0x24>
 8012f2c:	f7ff ff78 	bl	8012e20 <__sfp_lock_release>
 8012f30:	230c      	movs	r3, #12
 8012f32:	603b      	str	r3, [r7, #0]
 8012f34:	e7ee      	b.n	8012f14 <__sfp+0x60>
 8012f36:	bf00      	nop
 8012f38:	080165c4 	.word	0x080165c4
 8012f3c:	ffff0001 	.word	0xffff0001

08012f40 <_fwalk_reent>:
 8012f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f44:	4606      	mov	r6, r0
 8012f46:	4688      	mov	r8, r1
 8012f48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012f4c:	2700      	movs	r7, #0
 8012f4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012f52:	f1b9 0901 	subs.w	r9, r9, #1
 8012f56:	d505      	bpl.n	8012f64 <_fwalk_reent+0x24>
 8012f58:	6824      	ldr	r4, [r4, #0]
 8012f5a:	2c00      	cmp	r4, #0
 8012f5c:	d1f7      	bne.n	8012f4e <_fwalk_reent+0xe>
 8012f5e:	4638      	mov	r0, r7
 8012f60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f64:	89ab      	ldrh	r3, [r5, #12]
 8012f66:	2b01      	cmp	r3, #1
 8012f68:	d907      	bls.n	8012f7a <_fwalk_reent+0x3a>
 8012f6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012f6e:	3301      	adds	r3, #1
 8012f70:	d003      	beq.n	8012f7a <_fwalk_reent+0x3a>
 8012f72:	4629      	mov	r1, r5
 8012f74:	4630      	mov	r0, r6
 8012f76:	47c0      	blx	r8
 8012f78:	4307      	orrs	r7, r0
 8012f7a:	3568      	adds	r5, #104	; 0x68
 8012f7c:	e7e9      	b.n	8012f52 <_fwalk_reent+0x12>

08012f7e <rshift>:
 8012f7e:	6903      	ldr	r3, [r0, #16]
 8012f80:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012f84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f88:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012f8c:	f100 0414 	add.w	r4, r0, #20
 8012f90:	dd45      	ble.n	801301e <rshift+0xa0>
 8012f92:	f011 011f 	ands.w	r1, r1, #31
 8012f96:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012f9a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012f9e:	d10c      	bne.n	8012fba <rshift+0x3c>
 8012fa0:	f100 0710 	add.w	r7, r0, #16
 8012fa4:	4629      	mov	r1, r5
 8012fa6:	42b1      	cmp	r1, r6
 8012fa8:	d334      	bcc.n	8013014 <rshift+0x96>
 8012faa:	1a9b      	subs	r3, r3, r2
 8012fac:	009b      	lsls	r3, r3, #2
 8012fae:	1eea      	subs	r2, r5, #3
 8012fb0:	4296      	cmp	r6, r2
 8012fb2:	bf38      	it	cc
 8012fb4:	2300      	movcc	r3, #0
 8012fb6:	4423      	add	r3, r4
 8012fb8:	e015      	b.n	8012fe6 <rshift+0x68>
 8012fba:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012fbe:	f1c1 0820 	rsb	r8, r1, #32
 8012fc2:	40cf      	lsrs	r7, r1
 8012fc4:	f105 0e04 	add.w	lr, r5, #4
 8012fc8:	46a1      	mov	r9, r4
 8012fca:	4576      	cmp	r6, lr
 8012fcc:	46f4      	mov	ip, lr
 8012fce:	d815      	bhi.n	8012ffc <rshift+0x7e>
 8012fd0:	1a9b      	subs	r3, r3, r2
 8012fd2:	009a      	lsls	r2, r3, #2
 8012fd4:	3a04      	subs	r2, #4
 8012fd6:	3501      	adds	r5, #1
 8012fd8:	42ae      	cmp	r6, r5
 8012fda:	bf38      	it	cc
 8012fdc:	2200      	movcc	r2, #0
 8012fde:	18a3      	adds	r3, r4, r2
 8012fe0:	50a7      	str	r7, [r4, r2]
 8012fe2:	b107      	cbz	r7, 8012fe6 <rshift+0x68>
 8012fe4:	3304      	adds	r3, #4
 8012fe6:	1b1a      	subs	r2, r3, r4
 8012fe8:	42a3      	cmp	r3, r4
 8012fea:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012fee:	bf08      	it	eq
 8012ff0:	2300      	moveq	r3, #0
 8012ff2:	6102      	str	r2, [r0, #16]
 8012ff4:	bf08      	it	eq
 8012ff6:	6143      	streq	r3, [r0, #20]
 8012ff8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ffc:	f8dc c000 	ldr.w	ip, [ip]
 8013000:	fa0c fc08 	lsl.w	ip, ip, r8
 8013004:	ea4c 0707 	orr.w	r7, ip, r7
 8013008:	f849 7b04 	str.w	r7, [r9], #4
 801300c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013010:	40cf      	lsrs	r7, r1
 8013012:	e7da      	b.n	8012fca <rshift+0x4c>
 8013014:	f851 cb04 	ldr.w	ip, [r1], #4
 8013018:	f847 cf04 	str.w	ip, [r7, #4]!
 801301c:	e7c3      	b.n	8012fa6 <rshift+0x28>
 801301e:	4623      	mov	r3, r4
 8013020:	e7e1      	b.n	8012fe6 <rshift+0x68>

08013022 <__hexdig_fun>:
 8013022:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013026:	2b09      	cmp	r3, #9
 8013028:	d802      	bhi.n	8013030 <__hexdig_fun+0xe>
 801302a:	3820      	subs	r0, #32
 801302c:	b2c0      	uxtb	r0, r0
 801302e:	4770      	bx	lr
 8013030:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013034:	2b05      	cmp	r3, #5
 8013036:	d801      	bhi.n	801303c <__hexdig_fun+0x1a>
 8013038:	3847      	subs	r0, #71	; 0x47
 801303a:	e7f7      	b.n	801302c <__hexdig_fun+0xa>
 801303c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8013040:	2b05      	cmp	r3, #5
 8013042:	d801      	bhi.n	8013048 <__hexdig_fun+0x26>
 8013044:	3827      	subs	r0, #39	; 0x27
 8013046:	e7f1      	b.n	801302c <__hexdig_fun+0xa>
 8013048:	2000      	movs	r0, #0
 801304a:	4770      	bx	lr

0801304c <__gethex>:
 801304c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013050:	ed2d 8b02 	vpush	{d8}
 8013054:	b089      	sub	sp, #36	; 0x24
 8013056:	ee08 0a10 	vmov	s16, r0
 801305a:	9304      	str	r3, [sp, #16]
 801305c:	4bbc      	ldr	r3, [pc, #752]	; (8013350 <__gethex+0x304>)
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	9301      	str	r3, [sp, #4]
 8013062:	4618      	mov	r0, r3
 8013064:	468b      	mov	fp, r1
 8013066:	4690      	mov	r8, r2
 8013068:	f7ed f8ba 	bl	80001e0 <strlen>
 801306c:	9b01      	ldr	r3, [sp, #4]
 801306e:	f8db 2000 	ldr.w	r2, [fp]
 8013072:	4403      	add	r3, r0
 8013074:	4682      	mov	sl, r0
 8013076:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801307a:	9305      	str	r3, [sp, #20]
 801307c:	1c93      	adds	r3, r2, #2
 801307e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8013082:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8013086:	32fe      	adds	r2, #254	; 0xfe
 8013088:	18d1      	adds	r1, r2, r3
 801308a:	461f      	mov	r7, r3
 801308c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013090:	9100      	str	r1, [sp, #0]
 8013092:	2830      	cmp	r0, #48	; 0x30
 8013094:	d0f8      	beq.n	8013088 <__gethex+0x3c>
 8013096:	f7ff ffc4 	bl	8013022 <__hexdig_fun>
 801309a:	4604      	mov	r4, r0
 801309c:	2800      	cmp	r0, #0
 801309e:	d13a      	bne.n	8013116 <__gethex+0xca>
 80130a0:	9901      	ldr	r1, [sp, #4]
 80130a2:	4652      	mov	r2, sl
 80130a4:	4638      	mov	r0, r7
 80130a6:	f001 fb0e 	bl	80146c6 <strncmp>
 80130aa:	4605      	mov	r5, r0
 80130ac:	2800      	cmp	r0, #0
 80130ae:	d168      	bne.n	8013182 <__gethex+0x136>
 80130b0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80130b4:	eb07 060a 	add.w	r6, r7, sl
 80130b8:	f7ff ffb3 	bl	8013022 <__hexdig_fun>
 80130bc:	2800      	cmp	r0, #0
 80130be:	d062      	beq.n	8013186 <__gethex+0x13a>
 80130c0:	4633      	mov	r3, r6
 80130c2:	7818      	ldrb	r0, [r3, #0]
 80130c4:	2830      	cmp	r0, #48	; 0x30
 80130c6:	461f      	mov	r7, r3
 80130c8:	f103 0301 	add.w	r3, r3, #1
 80130cc:	d0f9      	beq.n	80130c2 <__gethex+0x76>
 80130ce:	f7ff ffa8 	bl	8013022 <__hexdig_fun>
 80130d2:	2301      	movs	r3, #1
 80130d4:	fab0 f480 	clz	r4, r0
 80130d8:	0964      	lsrs	r4, r4, #5
 80130da:	4635      	mov	r5, r6
 80130dc:	9300      	str	r3, [sp, #0]
 80130de:	463a      	mov	r2, r7
 80130e0:	4616      	mov	r6, r2
 80130e2:	3201      	adds	r2, #1
 80130e4:	7830      	ldrb	r0, [r6, #0]
 80130e6:	f7ff ff9c 	bl	8013022 <__hexdig_fun>
 80130ea:	2800      	cmp	r0, #0
 80130ec:	d1f8      	bne.n	80130e0 <__gethex+0x94>
 80130ee:	9901      	ldr	r1, [sp, #4]
 80130f0:	4652      	mov	r2, sl
 80130f2:	4630      	mov	r0, r6
 80130f4:	f001 fae7 	bl	80146c6 <strncmp>
 80130f8:	b980      	cbnz	r0, 801311c <__gethex+0xd0>
 80130fa:	b94d      	cbnz	r5, 8013110 <__gethex+0xc4>
 80130fc:	eb06 050a 	add.w	r5, r6, sl
 8013100:	462a      	mov	r2, r5
 8013102:	4616      	mov	r6, r2
 8013104:	3201      	adds	r2, #1
 8013106:	7830      	ldrb	r0, [r6, #0]
 8013108:	f7ff ff8b 	bl	8013022 <__hexdig_fun>
 801310c:	2800      	cmp	r0, #0
 801310e:	d1f8      	bne.n	8013102 <__gethex+0xb6>
 8013110:	1bad      	subs	r5, r5, r6
 8013112:	00ad      	lsls	r5, r5, #2
 8013114:	e004      	b.n	8013120 <__gethex+0xd4>
 8013116:	2400      	movs	r4, #0
 8013118:	4625      	mov	r5, r4
 801311a:	e7e0      	b.n	80130de <__gethex+0x92>
 801311c:	2d00      	cmp	r5, #0
 801311e:	d1f7      	bne.n	8013110 <__gethex+0xc4>
 8013120:	7833      	ldrb	r3, [r6, #0]
 8013122:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013126:	2b50      	cmp	r3, #80	; 0x50
 8013128:	d13b      	bne.n	80131a2 <__gethex+0x156>
 801312a:	7873      	ldrb	r3, [r6, #1]
 801312c:	2b2b      	cmp	r3, #43	; 0x2b
 801312e:	d02c      	beq.n	801318a <__gethex+0x13e>
 8013130:	2b2d      	cmp	r3, #45	; 0x2d
 8013132:	d02e      	beq.n	8013192 <__gethex+0x146>
 8013134:	1c71      	adds	r1, r6, #1
 8013136:	f04f 0900 	mov.w	r9, #0
 801313a:	7808      	ldrb	r0, [r1, #0]
 801313c:	f7ff ff71 	bl	8013022 <__hexdig_fun>
 8013140:	1e43      	subs	r3, r0, #1
 8013142:	b2db      	uxtb	r3, r3
 8013144:	2b18      	cmp	r3, #24
 8013146:	d82c      	bhi.n	80131a2 <__gethex+0x156>
 8013148:	f1a0 0210 	sub.w	r2, r0, #16
 801314c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013150:	f7ff ff67 	bl	8013022 <__hexdig_fun>
 8013154:	1e43      	subs	r3, r0, #1
 8013156:	b2db      	uxtb	r3, r3
 8013158:	2b18      	cmp	r3, #24
 801315a:	d91d      	bls.n	8013198 <__gethex+0x14c>
 801315c:	f1b9 0f00 	cmp.w	r9, #0
 8013160:	d000      	beq.n	8013164 <__gethex+0x118>
 8013162:	4252      	negs	r2, r2
 8013164:	4415      	add	r5, r2
 8013166:	f8cb 1000 	str.w	r1, [fp]
 801316a:	b1e4      	cbz	r4, 80131a6 <__gethex+0x15a>
 801316c:	9b00      	ldr	r3, [sp, #0]
 801316e:	2b00      	cmp	r3, #0
 8013170:	bf14      	ite	ne
 8013172:	2700      	movne	r7, #0
 8013174:	2706      	moveq	r7, #6
 8013176:	4638      	mov	r0, r7
 8013178:	b009      	add	sp, #36	; 0x24
 801317a:	ecbd 8b02 	vpop	{d8}
 801317e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013182:	463e      	mov	r6, r7
 8013184:	4625      	mov	r5, r4
 8013186:	2401      	movs	r4, #1
 8013188:	e7ca      	b.n	8013120 <__gethex+0xd4>
 801318a:	f04f 0900 	mov.w	r9, #0
 801318e:	1cb1      	adds	r1, r6, #2
 8013190:	e7d3      	b.n	801313a <__gethex+0xee>
 8013192:	f04f 0901 	mov.w	r9, #1
 8013196:	e7fa      	b.n	801318e <__gethex+0x142>
 8013198:	230a      	movs	r3, #10
 801319a:	fb03 0202 	mla	r2, r3, r2, r0
 801319e:	3a10      	subs	r2, #16
 80131a0:	e7d4      	b.n	801314c <__gethex+0x100>
 80131a2:	4631      	mov	r1, r6
 80131a4:	e7df      	b.n	8013166 <__gethex+0x11a>
 80131a6:	1bf3      	subs	r3, r6, r7
 80131a8:	3b01      	subs	r3, #1
 80131aa:	4621      	mov	r1, r4
 80131ac:	2b07      	cmp	r3, #7
 80131ae:	dc0b      	bgt.n	80131c8 <__gethex+0x17c>
 80131b0:	ee18 0a10 	vmov	r0, s16
 80131b4:	f000 faf2 	bl	801379c <_Balloc>
 80131b8:	4604      	mov	r4, r0
 80131ba:	b940      	cbnz	r0, 80131ce <__gethex+0x182>
 80131bc:	4b65      	ldr	r3, [pc, #404]	; (8013354 <__gethex+0x308>)
 80131be:	4602      	mov	r2, r0
 80131c0:	21de      	movs	r1, #222	; 0xde
 80131c2:	4865      	ldr	r0, [pc, #404]	; (8013358 <__gethex+0x30c>)
 80131c4:	f7fc fec8 	bl	800ff58 <__assert_func>
 80131c8:	3101      	adds	r1, #1
 80131ca:	105b      	asrs	r3, r3, #1
 80131cc:	e7ee      	b.n	80131ac <__gethex+0x160>
 80131ce:	f100 0914 	add.w	r9, r0, #20
 80131d2:	f04f 0b00 	mov.w	fp, #0
 80131d6:	f1ca 0301 	rsb	r3, sl, #1
 80131da:	f8cd 9008 	str.w	r9, [sp, #8]
 80131de:	f8cd b000 	str.w	fp, [sp]
 80131e2:	9306      	str	r3, [sp, #24]
 80131e4:	42b7      	cmp	r7, r6
 80131e6:	d340      	bcc.n	801326a <__gethex+0x21e>
 80131e8:	9802      	ldr	r0, [sp, #8]
 80131ea:	9b00      	ldr	r3, [sp, #0]
 80131ec:	f840 3b04 	str.w	r3, [r0], #4
 80131f0:	eba0 0009 	sub.w	r0, r0, r9
 80131f4:	1080      	asrs	r0, r0, #2
 80131f6:	0146      	lsls	r6, r0, #5
 80131f8:	6120      	str	r0, [r4, #16]
 80131fa:	4618      	mov	r0, r3
 80131fc:	f000 fbc4 	bl	8013988 <__hi0bits>
 8013200:	1a30      	subs	r0, r6, r0
 8013202:	f8d8 6000 	ldr.w	r6, [r8]
 8013206:	42b0      	cmp	r0, r6
 8013208:	dd63      	ble.n	80132d2 <__gethex+0x286>
 801320a:	1b87      	subs	r7, r0, r6
 801320c:	4639      	mov	r1, r7
 801320e:	4620      	mov	r0, r4
 8013210:	f000 ff5e 	bl	80140d0 <__any_on>
 8013214:	4682      	mov	sl, r0
 8013216:	b1a8      	cbz	r0, 8013244 <__gethex+0x1f8>
 8013218:	1e7b      	subs	r3, r7, #1
 801321a:	1159      	asrs	r1, r3, #5
 801321c:	f003 021f 	and.w	r2, r3, #31
 8013220:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8013224:	f04f 0a01 	mov.w	sl, #1
 8013228:	fa0a f202 	lsl.w	r2, sl, r2
 801322c:	420a      	tst	r2, r1
 801322e:	d009      	beq.n	8013244 <__gethex+0x1f8>
 8013230:	4553      	cmp	r3, sl
 8013232:	dd05      	ble.n	8013240 <__gethex+0x1f4>
 8013234:	1eb9      	subs	r1, r7, #2
 8013236:	4620      	mov	r0, r4
 8013238:	f000 ff4a 	bl	80140d0 <__any_on>
 801323c:	2800      	cmp	r0, #0
 801323e:	d145      	bne.n	80132cc <__gethex+0x280>
 8013240:	f04f 0a02 	mov.w	sl, #2
 8013244:	4639      	mov	r1, r7
 8013246:	4620      	mov	r0, r4
 8013248:	f7ff fe99 	bl	8012f7e <rshift>
 801324c:	443d      	add	r5, r7
 801324e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013252:	42ab      	cmp	r3, r5
 8013254:	da4c      	bge.n	80132f0 <__gethex+0x2a4>
 8013256:	ee18 0a10 	vmov	r0, s16
 801325a:	4621      	mov	r1, r4
 801325c:	f000 fade 	bl	801381c <_Bfree>
 8013260:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013262:	2300      	movs	r3, #0
 8013264:	6013      	str	r3, [r2, #0]
 8013266:	27a3      	movs	r7, #163	; 0xa3
 8013268:	e785      	b.n	8013176 <__gethex+0x12a>
 801326a:	1e73      	subs	r3, r6, #1
 801326c:	9a05      	ldr	r2, [sp, #20]
 801326e:	9303      	str	r3, [sp, #12]
 8013270:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013274:	4293      	cmp	r3, r2
 8013276:	d019      	beq.n	80132ac <__gethex+0x260>
 8013278:	f1bb 0f20 	cmp.w	fp, #32
 801327c:	d107      	bne.n	801328e <__gethex+0x242>
 801327e:	9b02      	ldr	r3, [sp, #8]
 8013280:	9a00      	ldr	r2, [sp, #0]
 8013282:	f843 2b04 	str.w	r2, [r3], #4
 8013286:	9302      	str	r3, [sp, #8]
 8013288:	2300      	movs	r3, #0
 801328a:	9300      	str	r3, [sp, #0]
 801328c:	469b      	mov	fp, r3
 801328e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8013292:	f7ff fec6 	bl	8013022 <__hexdig_fun>
 8013296:	9b00      	ldr	r3, [sp, #0]
 8013298:	f000 000f 	and.w	r0, r0, #15
 801329c:	fa00 f00b 	lsl.w	r0, r0, fp
 80132a0:	4303      	orrs	r3, r0
 80132a2:	9300      	str	r3, [sp, #0]
 80132a4:	f10b 0b04 	add.w	fp, fp, #4
 80132a8:	9b03      	ldr	r3, [sp, #12]
 80132aa:	e00d      	b.n	80132c8 <__gethex+0x27c>
 80132ac:	9b03      	ldr	r3, [sp, #12]
 80132ae:	9a06      	ldr	r2, [sp, #24]
 80132b0:	4413      	add	r3, r2
 80132b2:	42bb      	cmp	r3, r7
 80132b4:	d3e0      	bcc.n	8013278 <__gethex+0x22c>
 80132b6:	4618      	mov	r0, r3
 80132b8:	9901      	ldr	r1, [sp, #4]
 80132ba:	9307      	str	r3, [sp, #28]
 80132bc:	4652      	mov	r2, sl
 80132be:	f001 fa02 	bl	80146c6 <strncmp>
 80132c2:	9b07      	ldr	r3, [sp, #28]
 80132c4:	2800      	cmp	r0, #0
 80132c6:	d1d7      	bne.n	8013278 <__gethex+0x22c>
 80132c8:	461e      	mov	r6, r3
 80132ca:	e78b      	b.n	80131e4 <__gethex+0x198>
 80132cc:	f04f 0a03 	mov.w	sl, #3
 80132d0:	e7b8      	b.n	8013244 <__gethex+0x1f8>
 80132d2:	da0a      	bge.n	80132ea <__gethex+0x29e>
 80132d4:	1a37      	subs	r7, r6, r0
 80132d6:	4621      	mov	r1, r4
 80132d8:	ee18 0a10 	vmov	r0, s16
 80132dc:	463a      	mov	r2, r7
 80132de:	f000 fcb9 	bl	8013c54 <__lshift>
 80132e2:	1bed      	subs	r5, r5, r7
 80132e4:	4604      	mov	r4, r0
 80132e6:	f100 0914 	add.w	r9, r0, #20
 80132ea:	f04f 0a00 	mov.w	sl, #0
 80132ee:	e7ae      	b.n	801324e <__gethex+0x202>
 80132f0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80132f4:	42a8      	cmp	r0, r5
 80132f6:	dd72      	ble.n	80133de <__gethex+0x392>
 80132f8:	1b45      	subs	r5, r0, r5
 80132fa:	42ae      	cmp	r6, r5
 80132fc:	dc36      	bgt.n	801336c <__gethex+0x320>
 80132fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013302:	2b02      	cmp	r3, #2
 8013304:	d02a      	beq.n	801335c <__gethex+0x310>
 8013306:	2b03      	cmp	r3, #3
 8013308:	d02c      	beq.n	8013364 <__gethex+0x318>
 801330a:	2b01      	cmp	r3, #1
 801330c:	d115      	bne.n	801333a <__gethex+0x2ee>
 801330e:	42ae      	cmp	r6, r5
 8013310:	d113      	bne.n	801333a <__gethex+0x2ee>
 8013312:	2e01      	cmp	r6, #1
 8013314:	d10b      	bne.n	801332e <__gethex+0x2e2>
 8013316:	9a04      	ldr	r2, [sp, #16]
 8013318:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801331c:	6013      	str	r3, [r2, #0]
 801331e:	2301      	movs	r3, #1
 8013320:	6123      	str	r3, [r4, #16]
 8013322:	f8c9 3000 	str.w	r3, [r9]
 8013326:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013328:	2762      	movs	r7, #98	; 0x62
 801332a:	601c      	str	r4, [r3, #0]
 801332c:	e723      	b.n	8013176 <__gethex+0x12a>
 801332e:	1e71      	subs	r1, r6, #1
 8013330:	4620      	mov	r0, r4
 8013332:	f000 fecd 	bl	80140d0 <__any_on>
 8013336:	2800      	cmp	r0, #0
 8013338:	d1ed      	bne.n	8013316 <__gethex+0x2ca>
 801333a:	ee18 0a10 	vmov	r0, s16
 801333e:	4621      	mov	r1, r4
 8013340:	f000 fa6c 	bl	801381c <_Bfree>
 8013344:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013346:	2300      	movs	r3, #0
 8013348:	6013      	str	r3, [r2, #0]
 801334a:	2750      	movs	r7, #80	; 0x50
 801334c:	e713      	b.n	8013176 <__gethex+0x12a>
 801334e:	bf00      	nop
 8013350:	080167c8 	.word	0x080167c8
 8013354:	080166eb 	.word	0x080166eb
 8013358:	0801675c 	.word	0x0801675c
 801335c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801335e:	2b00      	cmp	r3, #0
 8013360:	d1eb      	bne.n	801333a <__gethex+0x2ee>
 8013362:	e7d8      	b.n	8013316 <__gethex+0x2ca>
 8013364:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013366:	2b00      	cmp	r3, #0
 8013368:	d1d5      	bne.n	8013316 <__gethex+0x2ca>
 801336a:	e7e6      	b.n	801333a <__gethex+0x2ee>
 801336c:	1e6f      	subs	r7, r5, #1
 801336e:	f1ba 0f00 	cmp.w	sl, #0
 8013372:	d131      	bne.n	80133d8 <__gethex+0x38c>
 8013374:	b127      	cbz	r7, 8013380 <__gethex+0x334>
 8013376:	4639      	mov	r1, r7
 8013378:	4620      	mov	r0, r4
 801337a:	f000 fea9 	bl	80140d0 <__any_on>
 801337e:	4682      	mov	sl, r0
 8013380:	117b      	asrs	r3, r7, #5
 8013382:	2101      	movs	r1, #1
 8013384:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8013388:	f007 071f 	and.w	r7, r7, #31
 801338c:	fa01 f707 	lsl.w	r7, r1, r7
 8013390:	421f      	tst	r7, r3
 8013392:	4629      	mov	r1, r5
 8013394:	4620      	mov	r0, r4
 8013396:	bf18      	it	ne
 8013398:	f04a 0a02 	orrne.w	sl, sl, #2
 801339c:	1b76      	subs	r6, r6, r5
 801339e:	f7ff fdee 	bl	8012f7e <rshift>
 80133a2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80133a6:	2702      	movs	r7, #2
 80133a8:	f1ba 0f00 	cmp.w	sl, #0
 80133ac:	d048      	beq.n	8013440 <__gethex+0x3f4>
 80133ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80133b2:	2b02      	cmp	r3, #2
 80133b4:	d015      	beq.n	80133e2 <__gethex+0x396>
 80133b6:	2b03      	cmp	r3, #3
 80133b8:	d017      	beq.n	80133ea <__gethex+0x39e>
 80133ba:	2b01      	cmp	r3, #1
 80133bc:	d109      	bne.n	80133d2 <__gethex+0x386>
 80133be:	f01a 0f02 	tst.w	sl, #2
 80133c2:	d006      	beq.n	80133d2 <__gethex+0x386>
 80133c4:	f8d9 0000 	ldr.w	r0, [r9]
 80133c8:	ea4a 0a00 	orr.w	sl, sl, r0
 80133cc:	f01a 0f01 	tst.w	sl, #1
 80133d0:	d10e      	bne.n	80133f0 <__gethex+0x3a4>
 80133d2:	f047 0710 	orr.w	r7, r7, #16
 80133d6:	e033      	b.n	8013440 <__gethex+0x3f4>
 80133d8:	f04f 0a01 	mov.w	sl, #1
 80133dc:	e7d0      	b.n	8013380 <__gethex+0x334>
 80133de:	2701      	movs	r7, #1
 80133e0:	e7e2      	b.n	80133a8 <__gethex+0x35c>
 80133e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80133e4:	f1c3 0301 	rsb	r3, r3, #1
 80133e8:	9315      	str	r3, [sp, #84]	; 0x54
 80133ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d0f0      	beq.n	80133d2 <__gethex+0x386>
 80133f0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80133f4:	f104 0314 	add.w	r3, r4, #20
 80133f8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80133fc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013400:	f04f 0c00 	mov.w	ip, #0
 8013404:	4618      	mov	r0, r3
 8013406:	f853 2b04 	ldr.w	r2, [r3], #4
 801340a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801340e:	d01c      	beq.n	801344a <__gethex+0x3fe>
 8013410:	3201      	adds	r2, #1
 8013412:	6002      	str	r2, [r0, #0]
 8013414:	2f02      	cmp	r7, #2
 8013416:	f104 0314 	add.w	r3, r4, #20
 801341a:	d13f      	bne.n	801349c <__gethex+0x450>
 801341c:	f8d8 2000 	ldr.w	r2, [r8]
 8013420:	3a01      	subs	r2, #1
 8013422:	42b2      	cmp	r2, r6
 8013424:	d10a      	bne.n	801343c <__gethex+0x3f0>
 8013426:	1171      	asrs	r1, r6, #5
 8013428:	2201      	movs	r2, #1
 801342a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801342e:	f006 061f 	and.w	r6, r6, #31
 8013432:	fa02 f606 	lsl.w	r6, r2, r6
 8013436:	421e      	tst	r6, r3
 8013438:	bf18      	it	ne
 801343a:	4617      	movne	r7, r2
 801343c:	f047 0720 	orr.w	r7, r7, #32
 8013440:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013442:	601c      	str	r4, [r3, #0]
 8013444:	9b04      	ldr	r3, [sp, #16]
 8013446:	601d      	str	r5, [r3, #0]
 8013448:	e695      	b.n	8013176 <__gethex+0x12a>
 801344a:	4299      	cmp	r1, r3
 801344c:	f843 cc04 	str.w	ip, [r3, #-4]
 8013450:	d8d8      	bhi.n	8013404 <__gethex+0x3b8>
 8013452:	68a3      	ldr	r3, [r4, #8]
 8013454:	459b      	cmp	fp, r3
 8013456:	db19      	blt.n	801348c <__gethex+0x440>
 8013458:	6861      	ldr	r1, [r4, #4]
 801345a:	ee18 0a10 	vmov	r0, s16
 801345e:	3101      	adds	r1, #1
 8013460:	f000 f99c 	bl	801379c <_Balloc>
 8013464:	4681      	mov	r9, r0
 8013466:	b918      	cbnz	r0, 8013470 <__gethex+0x424>
 8013468:	4b1a      	ldr	r3, [pc, #104]	; (80134d4 <__gethex+0x488>)
 801346a:	4602      	mov	r2, r0
 801346c:	2184      	movs	r1, #132	; 0x84
 801346e:	e6a8      	b.n	80131c2 <__gethex+0x176>
 8013470:	6922      	ldr	r2, [r4, #16]
 8013472:	3202      	adds	r2, #2
 8013474:	f104 010c 	add.w	r1, r4, #12
 8013478:	0092      	lsls	r2, r2, #2
 801347a:	300c      	adds	r0, #12
 801347c:	f7fc fdc6 	bl	801000c <memcpy>
 8013480:	4621      	mov	r1, r4
 8013482:	ee18 0a10 	vmov	r0, s16
 8013486:	f000 f9c9 	bl	801381c <_Bfree>
 801348a:	464c      	mov	r4, r9
 801348c:	6923      	ldr	r3, [r4, #16]
 801348e:	1c5a      	adds	r2, r3, #1
 8013490:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013494:	6122      	str	r2, [r4, #16]
 8013496:	2201      	movs	r2, #1
 8013498:	615a      	str	r2, [r3, #20]
 801349a:	e7bb      	b.n	8013414 <__gethex+0x3c8>
 801349c:	6922      	ldr	r2, [r4, #16]
 801349e:	455a      	cmp	r2, fp
 80134a0:	dd0b      	ble.n	80134ba <__gethex+0x46e>
 80134a2:	2101      	movs	r1, #1
 80134a4:	4620      	mov	r0, r4
 80134a6:	f7ff fd6a 	bl	8012f7e <rshift>
 80134aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80134ae:	3501      	adds	r5, #1
 80134b0:	42ab      	cmp	r3, r5
 80134b2:	f6ff aed0 	blt.w	8013256 <__gethex+0x20a>
 80134b6:	2701      	movs	r7, #1
 80134b8:	e7c0      	b.n	801343c <__gethex+0x3f0>
 80134ba:	f016 061f 	ands.w	r6, r6, #31
 80134be:	d0fa      	beq.n	80134b6 <__gethex+0x46a>
 80134c0:	449a      	add	sl, r3
 80134c2:	f1c6 0620 	rsb	r6, r6, #32
 80134c6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80134ca:	f000 fa5d 	bl	8013988 <__hi0bits>
 80134ce:	42b0      	cmp	r0, r6
 80134d0:	dbe7      	blt.n	80134a2 <__gethex+0x456>
 80134d2:	e7f0      	b.n	80134b6 <__gethex+0x46a>
 80134d4:	080166eb 	.word	0x080166eb

080134d8 <L_shift>:
 80134d8:	f1c2 0208 	rsb	r2, r2, #8
 80134dc:	0092      	lsls	r2, r2, #2
 80134de:	b570      	push	{r4, r5, r6, lr}
 80134e0:	f1c2 0620 	rsb	r6, r2, #32
 80134e4:	6843      	ldr	r3, [r0, #4]
 80134e6:	6804      	ldr	r4, [r0, #0]
 80134e8:	fa03 f506 	lsl.w	r5, r3, r6
 80134ec:	432c      	orrs	r4, r5
 80134ee:	40d3      	lsrs	r3, r2
 80134f0:	6004      	str	r4, [r0, #0]
 80134f2:	f840 3f04 	str.w	r3, [r0, #4]!
 80134f6:	4288      	cmp	r0, r1
 80134f8:	d3f4      	bcc.n	80134e4 <L_shift+0xc>
 80134fa:	bd70      	pop	{r4, r5, r6, pc}

080134fc <__match>:
 80134fc:	b530      	push	{r4, r5, lr}
 80134fe:	6803      	ldr	r3, [r0, #0]
 8013500:	3301      	adds	r3, #1
 8013502:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013506:	b914      	cbnz	r4, 801350e <__match+0x12>
 8013508:	6003      	str	r3, [r0, #0]
 801350a:	2001      	movs	r0, #1
 801350c:	bd30      	pop	{r4, r5, pc}
 801350e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013512:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8013516:	2d19      	cmp	r5, #25
 8013518:	bf98      	it	ls
 801351a:	3220      	addls	r2, #32
 801351c:	42a2      	cmp	r2, r4
 801351e:	d0f0      	beq.n	8013502 <__match+0x6>
 8013520:	2000      	movs	r0, #0
 8013522:	e7f3      	b.n	801350c <__match+0x10>

08013524 <__hexnan>:
 8013524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013528:	680b      	ldr	r3, [r1, #0]
 801352a:	6801      	ldr	r1, [r0, #0]
 801352c:	115e      	asrs	r6, r3, #5
 801352e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013532:	f013 031f 	ands.w	r3, r3, #31
 8013536:	b087      	sub	sp, #28
 8013538:	bf18      	it	ne
 801353a:	3604      	addne	r6, #4
 801353c:	2500      	movs	r5, #0
 801353e:	1f37      	subs	r7, r6, #4
 8013540:	4682      	mov	sl, r0
 8013542:	4690      	mov	r8, r2
 8013544:	9301      	str	r3, [sp, #4]
 8013546:	f846 5c04 	str.w	r5, [r6, #-4]
 801354a:	46b9      	mov	r9, r7
 801354c:	463c      	mov	r4, r7
 801354e:	9502      	str	r5, [sp, #8]
 8013550:	46ab      	mov	fp, r5
 8013552:	784a      	ldrb	r2, [r1, #1]
 8013554:	1c4b      	adds	r3, r1, #1
 8013556:	9303      	str	r3, [sp, #12]
 8013558:	b342      	cbz	r2, 80135ac <__hexnan+0x88>
 801355a:	4610      	mov	r0, r2
 801355c:	9105      	str	r1, [sp, #20]
 801355e:	9204      	str	r2, [sp, #16]
 8013560:	f7ff fd5f 	bl	8013022 <__hexdig_fun>
 8013564:	2800      	cmp	r0, #0
 8013566:	d14f      	bne.n	8013608 <__hexnan+0xe4>
 8013568:	9a04      	ldr	r2, [sp, #16]
 801356a:	9905      	ldr	r1, [sp, #20]
 801356c:	2a20      	cmp	r2, #32
 801356e:	d818      	bhi.n	80135a2 <__hexnan+0x7e>
 8013570:	9b02      	ldr	r3, [sp, #8]
 8013572:	459b      	cmp	fp, r3
 8013574:	dd13      	ble.n	801359e <__hexnan+0x7a>
 8013576:	454c      	cmp	r4, r9
 8013578:	d206      	bcs.n	8013588 <__hexnan+0x64>
 801357a:	2d07      	cmp	r5, #7
 801357c:	dc04      	bgt.n	8013588 <__hexnan+0x64>
 801357e:	462a      	mov	r2, r5
 8013580:	4649      	mov	r1, r9
 8013582:	4620      	mov	r0, r4
 8013584:	f7ff ffa8 	bl	80134d8 <L_shift>
 8013588:	4544      	cmp	r4, r8
 801358a:	d950      	bls.n	801362e <__hexnan+0x10a>
 801358c:	2300      	movs	r3, #0
 801358e:	f1a4 0904 	sub.w	r9, r4, #4
 8013592:	f844 3c04 	str.w	r3, [r4, #-4]
 8013596:	f8cd b008 	str.w	fp, [sp, #8]
 801359a:	464c      	mov	r4, r9
 801359c:	461d      	mov	r5, r3
 801359e:	9903      	ldr	r1, [sp, #12]
 80135a0:	e7d7      	b.n	8013552 <__hexnan+0x2e>
 80135a2:	2a29      	cmp	r2, #41	; 0x29
 80135a4:	d156      	bne.n	8013654 <__hexnan+0x130>
 80135a6:	3102      	adds	r1, #2
 80135a8:	f8ca 1000 	str.w	r1, [sl]
 80135ac:	f1bb 0f00 	cmp.w	fp, #0
 80135b0:	d050      	beq.n	8013654 <__hexnan+0x130>
 80135b2:	454c      	cmp	r4, r9
 80135b4:	d206      	bcs.n	80135c4 <__hexnan+0xa0>
 80135b6:	2d07      	cmp	r5, #7
 80135b8:	dc04      	bgt.n	80135c4 <__hexnan+0xa0>
 80135ba:	462a      	mov	r2, r5
 80135bc:	4649      	mov	r1, r9
 80135be:	4620      	mov	r0, r4
 80135c0:	f7ff ff8a 	bl	80134d8 <L_shift>
 80135c4:	4544      	cmp	r4, r8
 80135c6:	d934      	bls.n	8013632 <__hexnan+0x10e>
 80135c8:	f1a8 0204 	sub.w	r2, r8, #4
 80135cc:	4623      	mov	r3, r4
 80135ce:	f853 1b04 	ldr.w	r1, [r3], #4
 80135d2:	f842 1f04 	str.w	r1, [r2, #4]!
 80135d6:	429f      	cmp	r7, r3
 80135d8:	d2f9      	bcs.n	80135ce <__hexnan+0xaa>
 80135da:	1b3b      	subs	r3, r7, r4
 80135dc:	f023 0303 	bic.w	r3, r3, #3
 80135e0:	3304      	adds	r3, #4
 80135e2:	3401      	adds	r4, #1
 80135e4:	3e03      	subs	r6, #3
 80135e6:	42b4      	cmp	r4, r6
 80135e8:	bf88      	it	hi
 80135ea:	2304      	movhi	r3, #4
 80135ec:	4443      	add	r3, r8
 80135ee:	2200      	movs	r2, #0
 80135f0:	f843 2b04 	str.w	r2, [r3], #4
 80135f4:	429f      	cmp	r7, r3
 80135f6:	d2fb      	bcs.n	80135f0 <__hexnan+0xcc>
 80135f8:	683b      	ldr	r3, [r7, #0]
 80135fa:	b91b      	cbnz	r3, 8013604 <__hexnan+0xe0>
 80135fc:	4547      	cmp	r7, r8
 80135fe:	d127      	bne.n	8013650 <__hexnan+0x12c>
 8013600:	2301      	movs	r3, #1
 8013602:	603b      	str	r3, [r7, #0]
 8013604:	2005      	movs	r0, #5
 8013606:	e026      	b.n	8013656 <__hexnan+0x132>
 8013608:	3501      	adds	r5, #1
 801360a:	2d08      	cmp	r5, #8
 801360c:	f10b 0b01 	add.w	fp, fp, #1
 8013610:	dd06      	ble.n	8013620 <__hexnan+0xfc>
 8013612:	4544      	cmp	r4, r8
 8013614:	d9c3      	bls.n	801359e <__hexnan+0x7a>
 8013616:	2300      	movs	r3, #0
 8013618:	f844 3c04 	str.w	r3, [r4, #-4]
 801361c:	2501      	movs	r5, #1
 801361e:	3c04      	subs	r4, #4
 8013620:	6822      	ldr	r2, [r4, #0]
 8013622:	f000 000f 	and.w	r0, r0, #15
 8013626:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801362a:	6022      	str	r2, [r4, #0]
 801362c:	e7b7      	b.n	801359e <__hexnan+0x7a>
 801362e:	2508      	movs	r5, #8
 8013630:	e7b5      	b.n	801359e <__hexnan+0x7a>
 8013632:	9b01      	ldr	r3, [sp, #4]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d0df      	beq.n	80135f8 <__hexnan+0xd4>
 8013638:	f04f 32ff 	mov.w	r2, #4294967295
 801363c:	f1c3 0320 	rsb	r3, r3, #32
 8013640:	fa22 f303 	lsr.w	r3, r2, r3
 8013644:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013648:	401a      	ands	r2, r3
 801364a:	f846 2c04 	str.w	r2, [r6, #-4]
 801364e:	e7d3      	b.n	80135f8 <__hexnan+0xd4>
 8013650:	3f04      	subs	r7, #4
 8013652:	e7d1      	b.n	80135f8 <__hexnan+0xd4>
 8013654:	2004      	movs	r0, #4
 8013656:	b007      	add	sp, #28
 8013658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801365c <_localeconv_r>:
 801365c:	4800      	ldr	r0, [pc, #0]	; (8013660 <_localeconv_r+0x4>)
 801365e:	4770      	bx	lr
 8013660:	200001b0 	.word	0x200001b0

08013664 <__retarget_lock_init_recursive>:
 8013664:	4770      	bx	lr

08013666 <__retarget_lock_acquire_recursive>:
 8013666:	4770      	bx	lr

08013668 <__retarget_lock_release_recursive>:
 8013668:	4770      	bx	lr

0801366a <__swhatbuf_r>:
 801366a:	b570      	push	{r4, r5, r6, lr}
 801366c:	460e      	mov	r6, r1
 801366e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013672:	2900      	cmp	r1, #0
 8013674:	b096      	sub	sp, #88	; 0x58
 8013676:	4614      	mov	r4, r2
 8013678:	461d      	mov	r5, r3
 801367a:	da07      	bge.n	801368c <__swhatbuf_r+0x22>
 801367c:	2300      	movs	r3, #0
 801367e:	602b      	str	r3, [r5, #0]
 8013680:	89b3      	ldrh	r3, [r6, #12]
 8013682:	061a      	lsls	r2, r3, #24
 8013684:	d410      	bmi.n	80136a8 <__swhatbuf_r+0x3e>
 8013686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801368a:	e00e      	b.n	80136aa <__swhatbuf_r+0x40>
 801368c:	466a      	mov	r2, sp
 801368e:	f001 f85b 	bl	8014748 <_fstat_r>
 8013692:	2800      	cmp	r0, #0
 8013694:	dbf2      	blt.n	801367c <__swhatbuf_r+0x12>
 8013696:	9a01      	ldr	r2, [sp, #4]
 8013698:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801369c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80136a0:	425a      	negs	r2, r3
 80136a2:	415a      	adcs	r2, r3
 80136a4:	602a      	str	r2, [r5, #0]
 80136a6:	e7ee      	b.n	8013686 <__swhatbuf_r+0x1c>
 80136a8:	2340      	movs	r3, #64	; 0x40
 80136aa:	2000      	movs	r0, #0
 80136ac:	6023      	str	r3, [r4, #0]
 80136ae:	b016      	add	sp, #88	; 0x58
 80136b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080136b4 <__smakebuf_r>:
 80136b4:	898b      	ldrh	r3, [r1, #12]
 80136b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80136b8:	079d      	lsls	r5, r3, #30
 80136ba:	4606      	mov	r6, r0
 80136bc:	460c      	mov	r4, r1
 80136be:	d507      	bpl.n	80136d0 <__smakebuf_r+0x1c>
 80136c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80136c4:	6023      	str	r3, [r4, #0]
 80136c6:	6123      	str	r3, [r4, #16]
 80136c8:	2301      	movs	r3, #1
 80136ca:	6163      	str	r3, [r4, #20]
 80136cc:	b002      	add	sp, #8
 80136ce:	bd70      	pop	{r4, r5, r6, pc}
 80136d0:	ab01      	add	r3, sp, #4
 80136d2:	466a      	mov	r2, sp
 80136d4:	f7ff ffc9 	bl	801366a <__swhatbuf_r>
 80136d8:	9900      	ldr	r1, [sp, #0]
 80136da:	4605      	mov	r5, r0
 80136dc:	4630      	mov	r0, r6
 80136de:	f000 fd77 	bl	80141d0 <_malloc_r>
 80136e2:	b948      	cbnz	r0, 80136f8 <__smakebuf_r+0x44>
 80136e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80136e8:	059a      	lsls	r2, r3, #22
 80136ea:	d4ef      	bmi.n	80136cc <__smakebuf_r+0x18>
 80136ec:	f023 0303 	bic.w	r3, r3, #3
 80136f0:	f043 0302 	orr.w	r3, r3, #2
 80136f4:	81a3      	strh	r3, [r4, #12]
 80136f6:	e7e3      	b.n	80136c0 <__smakebuf_r+0xc>
 80136f8:	4b0d      	ldr	r3, [pc, #52]	; (8013730 <__smakebuf_r+0x7c>)
 80136fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80136fc:	89a3      	ldrh	r3, [r4, #12]
 80136fe:	6020      	str	r0, [r4, #0]
 8013700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013704:	81a3      	strh	r3, [r4, #12]
 8013706:	9b00      	ldr	r3, [sp, #0]
 8013708:	6163      	str	r3, [r4, #20]
 801370a:	9b01      	ldr	r3, [sp, #4]
 801370c:	6120      	str	r0, [r4, #16]
 801370e:	b15b      	cbz	r3, 8013728 <__smakebuf_r+0x74>
 8013710:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013714:	4630      	mov	r0, r6
 8013716:	f001 f829 	bl	801476c <_isatty_r>
 801371a:	b128      	cbz	r0, 8013728 <__smakebuf_r+0x74>
 801371c:	89a3      	ldrh	r3, [r4, #12]
 801371e:	f023 0303 	bic.w	r3, r3, #3
 8013722:	f043 0301 	orr.w	r3, r3, #1
 8013726:	81a3      	strh	r3, [r4, #12]
 8013728:	89a0      	ldrh	r0, [r4, #12]
 801372a:	4305      	orrs	r5, r0
 801372c:	81a5      	strh	r5, [r4, #12]
 801372e:	e7cd      	b.n	80136cc <__smakebuf_r+0x18>
 8013730:	08012ddd 	.word	0x08012ddd

08013734 <malloc>:
 8013734:	4b02      	ldr	r3, [pc, #8]	; (8013740 <malloc+0xc>)
 8013736:	4601      	mov	r1, r0
 8013738:	6818      	ldr	r0, [r3, #0]
 801373a:	f000 bd49 	b.w	80141d0 <_malloc_r>
 801373e:	bf00      	nop
 8013740:	20000058 	.word	0x20000058

08013744 <__ascii_mbtowc>:
 8013744:	b082      	sub	sp, #8
 8013746:	b901      	cbnz	r1, 801374a <__ascii_mbtowc+0x6>
 8013748:	a901      	add	r1, sp, #4
 801374a:	b142      	cbz	r2, 801375e <__ascii_mbtowc+0x1a>
 801374c:	b14b      	cbz	r3, 8013762 <__ascii_mbtowc+0x1e>
 801374e:	7813      	ldrb	r3, [r2, #0]
 8013750:	600b      	str	r3, [r1, #0]
 8013752:	7812      	ldrb	r2, [r2, #0]
 8013754:	1e10      	subs	r0, r2, #0
 8013756:	bf18      	it	ne
 8013758:	2001      	movne	r0, #1
 801375a:	b002      	add	sp, #8
 801375c:	4770      	bx	lr
 801375e:	4610      	mov	r0, r2
 8013760:	e7fb      	b.n	801375a <__ascii_mbtowc+0x16>
 8013762:	f06f 0001 	mvn.w	r0, #1
 8013766:	e7f8      	b.n	801375a <__ascii_mbtowc+0x16>

08013768 <memmove>:
 8013768:	4288      	cmp	r0, r1
 801376a:	b510      	push	{r4, lr}
 801376c:	eb01 0402 	add.w	r4, r1, r2
 8013770:	d902      	bls.n	8013778 <memmove+0x10>
 8013772:	4284      	cmp	r4, r0
 8013774:	4623      	mov	r3, r4
 8013776:	d807      	bhi.n	8013788 <memmove+0x20>
 8013778:	1e43      	subs	r3, r0, #1
 801377a:	42a1      	cmp	r1, r4
 801377c:	d008      	beq.n	8013790 <memmove+0x28>
 801377e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013782:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013786:	e7f8      	b.n	801377a <memmove+0x12>
 8013788:	4402      	add	r2, r0
 801378a:	4601      	mov	r1, r0
 801378c:	428a      	cmp	r2, r1
 801378e:	d100      	bne.n	8013792 <memmove+0x2a>
 8013790:	bd10      	pop	{r4, pc}
 8013792:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013796:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801379a:	e7f7      	b.n	801378c <memmove+0x24>

0801379c <_Balloc>:
 801379c:	b570      	push	{r4, r5, r6, lr}
 801379e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80137a0:	4604      	mov	r4, r0
 80137a2:	460d      	mov	r5, r1
 80137a4:	b976      	cbnz	r6, 80137c4 <_Balloc+0x28>
 80137a6:	2010      	movs	r0, #16
 80137a8:	f7ff ffc4 	bl	8013734 <malloc>
 80137ac:	4602      	mov	r2, r0
 80137ae:	6260      	str	r0, [r4, #36]	; 0x24
 80137b0:	b920      	cbnz	r0, 80137bc <_Balloc+0x20>
 80137b2:	4b18      	ldr	r3, [pc, #96]	; (8013814 <_Balloc+0x78>)
 80137b4:	4818      	ldr	r0, [pc, #96]	; (8013818 <_Balloc+0x7c>)
 80137b6:	2166      	movs	r1, #102	; 0x66
 80137b8:	f7fc fbce 	bl	800ff58 <__assert_func>
 80137bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80137c0:	6006      	str	r6, [r0, #0]
 80137c2:	60c6      	str	r6, [r0, #12]
 80137c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80137c6:	68f3      	ldr	r3, [r6, #12]
 80137c8:	b183      	cbz	r3, 80137ec <_Balloc+0x50>
 80137ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80137cc:	68db      	ldr	r3, [r3, #12]
 80137ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80137d2:	b9b8      	cbnz	r0, 8013804 <_Balloc+0x68>
 80137d4:	2101      	movs	r1, #1
 80137d6:	fa01 f605 	lsl.w	r6, r1, r5
 80137da:	1d72      	adds	r2, r6, #5
 80137dc:	0092      	lsls	r2, r2, #2
 80137de:	4620      	mov	r0, r4
 80137e0:	f000 fc97 	bl	8014112 <_calloc_r>
 80137e4:	b160      	cbz	r0, 8013800 <_Balloc+0x64>
 80137e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80137ea:	e00e      	b.n	801380a <_Balloc+0x6e>
 80137ec:	2221      	movs	r2, #33	; 0x21
 80137ee:	2104      	movs	r1, #4
 80137f0:	4620      	mov	r0, r4
 80137f2:	f000 fc8e 	bl	8014112 <_calloc_r>
 80137f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80137f8:	60f0      	str	r0, [r6, #12]
 80137fa:	68db      	ldr	r3, [r3, #12]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d1e4      	bne.n	80137ca <_Balloc+0x2e>
 8013800:	2000      	movs	r0, #0
 8013802:	bd70      	pop	{r4, r5, r6, pc}
 8013804:	6802      	ldr	r2, [r0, #0]
 8013806:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801380a:	2300      	movs	r3, #0
 801380c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013810:	e7f7      	b.n	8013802 <_Balloc+0x66>
 8013812:	bf00      	nop
 8013814:	08016675 	.word	0x08016675
 8013818:	080167dc 	.word	0x080167dc

0801381c <_Bfree>:
 801381c:	b570      	push	{r4, r5, r6, lr}
 801381e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013820:	4605      	mov	r5, r0
 8013822:	460c      	mov	r4, r1
 8013824:	b976      	cbnz	r6, 8013844 <_Bfree+0x28>
 8013826:	2010      	movs	r0, #16
 8013828:	f7ff ff84 	bl	8013734 <malloc>
 801382c:	4602      	mov	r2, r0
 801382e:	6268      	str	r0, [r5, #36]	; 0x24
 8013830:	b920      	cbnz	r0, 801383c <_Bfree+0x20>
 8013832:	4b09      	ldr	r3, [pc, #36]	; (8013858 <_Bfree+0x3c>)
 8013834:	4809      	ldr	r0, [pc, #36]	; (801385c <_Bfree+0x40>)
 8013836:	218a      	movs	r1, #138	; 0x8a
 8013838:	f7fc fb8e 	bl	800ff58 <__assert_func>
 801383c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013840:	6006      	str	r6, [r0, #0]
 8013842:	60c6      	str	r6, [r0, #12]
 8013844:	b13c      	cbz	r4, 8013856 <_Bfree+0x3a>
 8013846:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013848:	6862      	ldr	r2, [r4, #4]
 801384a:	68db      	ldr	r3, [r3, #12]
 801384c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013850:	6021      	str	r1, [r4, #0]
 8013852:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013856:	bd70      	pop	{r4, r5, r6, pc}
 8013858:	08016675 	.word	0x08016675
 801385c:	080167dc 	.word	0x080167dc

08013860 <__multadd>:
 8013860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013864:	690e      	ldr	r6, [r1, #16]
 8013866:	4607      	mov	r7, r0
 8013868:	4698      	mov	r8, r3
 801386a:	460c      	mov	r4, r1
 801386c:	f101 0014 	add.w	r0, r1, #20
 8013870:	2300      	movs	r3, #0
 8013872:	6805      	ldr	r5, [r0, #0]
 8013874:	b2a9      	uxth	r1, r5
 8013876:	fb02 8101 	mla	r1, r2, r1, r8
 801387a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801387e:	0c2d      	lsrs	r5, r5, #16
 8013880:	fb02 c505 	mla	r5, r2, r5, ip
 8013884:	b289      	uxth	r1, r1
 8013886:	3301      	adds	r3, #1
 8013888:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801388c:	429e      	cmp	r6, r3
 801388e:	f840 1b04 	str.w	r1, [r0], #4
 8013892:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8013896:	dcec      	bgt.n	8013872 <__multadd+0x12>
 8013898:	f1b8 0f00 	cmp.w	r8, #0
 801389c:	d022      	beq.n	80138e4 <__multadd+0x84>
 801389e:	68a3      	ldr	r3, [r4, #8]
 80138a0:	42b3      	cmp	r3, r6
 80138a2:	dc19      	bgt.n	80138d8 <__multadd+0x78>
 80138a4:	6861      	ldr	r1, [r4, #4]
 80138a6:	4638      	mov	r0, r7
 80138a8:	3101      	adds	r1, #1
 80138aa:	f7ff ff77 	bl	801379c <_Balloc>
 80138ae:	4605      	mov	r5, r0
 80138b0:	b928      	cbnz	r0, 80138be <__multadd+0x5e>
 80138b2:	4602      	mov	r2, r0
 80138b4:	4b0d      	ldr	r3, [pc, #52]	; (80138ec <__multadd+0x8c>)
 80138b6:	480e      	ldr	r0, [pc, #56]	; (80138f0 <__multadd+0x90>)
 80138b8:	21b5      	movs	r1, #181	; 0xb5
 80138ba:	f7fc fb4d 	bl	800ff58 <__assert_func>
 80138be:	6922      	ldr	r2, [r4, #16]
 80138c0:	3202      	adds	r2, #2
 80138c2:	f104 010c 	add.w	r1, r4, #12
 80138c6:	0092      	lsls	r2, r2, #2
 80138c8:	300c      	adds	r0, #12
 80138ca:	f7fc fb9f 	bl	801000c <memcpy>
 80138ce:	4621      	mov	r1, r4
 80138d0:	4638      	mov	r0, r7
 80138d2:	f7ff ffa3 	bl	801381c <_Bfree>
 80138d6:	462c      	mov	r4, r5
 80138d8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80138dc:	3601      	adds	r6, #1
 80138de:	f8c3 8014 	str.w	r8, [r3, #20]
 80138e2:	6126      	str	r6, [r4, #16]
 80138e4:	4620      	mov	r0, r4
 80138e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138ea:	bf00      	nop
 80138ec:	080166eb 	.word	0x080166eb
 80138f0:	080167dc 	.word	0x080167dc

080138f4 <__s2b>:
 80138f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80138f8:	460c      	mov	r4, r1
 80138fa:	4615      	mov	r5, r2
 80138fc:	461f      	mov	r7, r3
 80138fe:	2209      	movs	r2, #9
 8013900:	3308      	adds	r3, #8
 8013902:	4606      	mov	r6, r0
 8013904:	fb93 f3f2 	sdiv	r3, r3, r2
 8013908:	2100      	movs	r1, #0
 801390a:	2201      	movs	r2, #1
 801390c:	429a      	cmp	r2, r3
 801390e:	db09      	blt.n	8013924 <__s2b+0x30>
 8013910:	4630      	mov	r0, r6
 8013912:	f7ff ff43 	bl	801379c <_Balloc>
 8013916:	b940      	cbnz	r0, 801392a <__s2b+0x36>
 8013918:	4602      	mov	r2, r0
 801391a:	4b19      	ldr	r3, [pc, #100]	; (8013980 <__s2b+0x8c>)
 801391c:	4819      	ldr	r0, [pc, #100]	; (8013984 <__s2b+0x90>)
 801391e:	21ce      	movs	r1, #206	; 0xce
 8013920:	f7fc fb1a 	bl	800ff58 <__assert_func>
 8013924:	0052      	lsls	r2, r2, #1
 8013926:	3101      	adds	r1, #1
 8013928:	e7f0      	b.n	801390c <__s2b+0x18>
 801392a:	9b08      	ldr	r3, [sp, #32]
 801392c:	6143      	str	r3, [r0, #20]
 801392e:	2d09      	cmp	r5, #9
 8013930:	f04f 0301 	mov.w	r3, #1
 8013934:	6103      	str	r3, [r0, #16]
 8013936:	dd16      	ble.n	8013966 <__s2b+0x72>
 8013938:	f104 0909 	add.w	r9, r4, #9
 801393c:	46c8      	mov	r8, r9
 801393e:	442c      	add	r4, r5
 8013940:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013944:	4601      	mov	r1, r0
 8013946:	3b30      	subs	r3, #48	; 0x30
 8013948:	220a      	movs	r2, #10
 801394a:	4630      	mov	r0, r6
 801394c:	f7ff ff88 	bl	8013860 <__multadd>
 8013950:	45a0      	cmp	r8, r4
 8013952:	d1f5      	bne.n	8013940 <__s2b+0x4c>
 8013954:	f1a5 0408 	sub.w	r4, r5, #8
 8013958:	444c      	add	r4, r9
 801395a:	1b2d      	subs	r5, r5, r4
 801395c:	1963      	adds	r3, r4, r5
 801395e:	42bb      	cmp	r3, r7
 8013960:	db04      	blt.n	801396c <__s2b+0x78>
 8013962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013966:	340a      	adds	r4, #10
 8013968:	2509      	movs	r5, #9
 801396a:	e7f6      	b.n	801395a <__s2b+0x66>
 801396c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013970:	4601      	mov	r1, r0
 8013972:	3b30      	subs	r3, #48	; 0x30
 8013974:	220a      	movs	r2, #10
 8013976:	4630      	mov	r0, r6
 8013978:	f7ff ff72 	bl	8013860 <__multadd>
 801397c:	e7ee      	b.n	801395c <__s2b+0x68>
 801397e:	bf00      	nop
 8013980:	080166eb 	.word	0x080166eb
 8013984:	080167dc 	.word	0x080167dc

08013988 <__hi0bits>:
 8013988:	0c03      	lsrs	r3, r0, #16
 801398a:	041b      	lsls	r3, r3, #16
 801398c:	b9d3      	cbnz	r3, 80139c4 <__hi0bits+0x3c>
 801398e:	0400      	lsls	r0, r0, #16
 8013990:	2310      	movs	r3, #16
 8013992:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013996:	bf04      	itt	eq
 8013998:	0200      	lsleq	r0, r0, #8
 801399a:	3308      	addeq	r3, #8
 801399c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80139a0:	bf04      	itt	eq
 80139a2:	0100      	lsleq	r0, r0, #4
 80139a4:	3304      	addeq	r3, #4
 80139a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80139aa:	bf04      	itt	eq
 80139ac:	0080      	lsleq	r0, r0, #2
 80139ae:	3302      	addeq	r3, #2
 80139b0:	2800      	cmp	r0, #0
 80139b2:	db05      	blt.n	80139c0 <__hi0bits+0x38>
 80139b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80139b8:	f103 0301 	add.w	r3, r3, #1
 80139bc:	bf08      	it	eq
 80139be:	2320      	moveq	r3, #32
 80139c0:	4618      	mov	r0, r3
 80139c2:	4770      	bx	lr
 80139c4:	2300      	movs	r3, #0
 80139c6:	e7e4      	b.n	8013992 <__hi0bits+0xa>

080139c8 <__lo0bits>:
 80139c8:	6803      	ldr	r3, [r0, #0]
 80139ca:	f013 0207 	ands.w	r2, r3, #7
 80139ce:	4601      	mov	r1, r0
 80139d0:	d00b      	beq.n	80139ea <__lo0bits+0x22>
 80139d2:	07da      	lsls	r2, r3, #31
 80139d4:	d424      	bmi.n	8013a20 <__lo0bits+0x58>
 80139d6:	0798      	lsls	r0, r3, #30
 80139d8:	bf49      	itett	mi
 80139da:	085b      	lsrmi	r3, r3, #1
 80139dc:	089b      	lsrpl	r3, r3, #2
 80139de:	2001      	movmi	r0, #1
 80139e0:	600b      	strmi	r3, [r1, #0]
 80139e2:	bf5c      	itt	pl
 80139e4:	600b      	strpl	r3, [r1, #0]
 80139e6:	2002      	movpl	r0, #2
 80139e8:	4770      	bx	lr
 80139ea:	b298      	uxth	r0, r3
 80139ec:	b9b0      	cbnz	r0, 8013a1c <__lo0bits+0x54>
 80139ee:	0c1b      	lsrs	r3, r3, #16
 80139f0:	2010      	movs	r0, #16
 80139f2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80139f6:	bf04      	itt	eq
 80139f8:	0a1b      	lsreq	r3, r3, #8
 80139fa:	3008      	addeq	r0, #8
 80139fc:	071a      	lsls	r2, r3, #28
 80139fe:	bf04      	itt	eq
 8013a00:	091b      	lsreq	r3, r3, #4
 8013a02:	3004      	addeq	r0, #4
 8013a04:	079a      	lsls	r2, r3, #30
 8013a06:	bf04      	itt	eq
 8013a08:	089b      	lsreq	r3, r3, #2
 8013a0a:	3002      	addeq	r0, #2
 8013a0c:	07da      	lsls	r2, r3, #31
 8013a0e:	d403      	bmi.n	8013a18 <__lo0bits+0x50>
 8013a10:	085b      	lsrs	r3, r3, #1
 8013a12:	f100 0001 	add.w	r0, r0, #1
 8013a16:	d005      	beq.n	8013a24 <__lo0bits+0x5c>
 8013a18:	600b      	str	r3, [r1, #0]
 8013a1a:	4770      	bx	lr
 8013a1c:	4610      	mov	r0, r2
 8013a1e:	e7e8      	b.n	80139f2 <__lo0bits+0x2a>
 8013a20:	2000      	movs	r0, #0
 8013a22:	4770      	bx	lr
 8013a24:	2020      	movs	r0, #32
 8013a26:	4770      	bx	lr

08013a28 <__i2b>:
 8013a28:	b510      	push	{r4, lr}
 8013a2a:	460c      	mov	r4, r1
 8013a2c:	2101      	movs	r1, #1
 8013a2e:	f7ff feb5 	bl	801379c <_Balloc>
 8013a32:	4602      	mov	r2, r0
 8013a34:	b928      	cbnz	r0, 8013a42 <__i2b+0x1a>
 8013a36:	4b05      	ldr	r3, [pc, #20]	; (8013a4c <__i2b+0x24>)
 8013a38:	4805      	ldr	r0, [pc, #20]	; (8013a50 <__i2b+0x28>)
 8013a3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013a3e:	f7fc fa8b 	bl	800ff58 <__assert_func>
 8013a42:	2301      	movs	r3, #1
 8013a44:	6144      	str	r4, [r0, #20]
 8013a46:	6103      	str	r3, [r0, #16]
 8013a48:	bd10      	pop	{r4, pc}
 8013a4a:	bf00      	nop
 8013a4c:	080166eb 	.word	0x080166eb
 8013a50:	080167dc 	.word	0x080167dc

08013a54 <__multiply>:
 8013a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a58:	4614      	mov	r4, r2
 8013a5a:	690a      	ldr	r2, [r1, #16]
 8013a5c:	6923      	ldr	r3, [r4, #16]
 8013a5e:	429a      	cmp	r2, r3
 8013a60:	bfb8      	it	lt
 8013a62:	460b      	movlt	r3, r1
 8013a64:	460d      	mov	r5, r1
 8013a66:	bfbc      	itt	lt
 8013a68:	4625      	movlt	r5, r4
 8013a6a:	461c      	movlt	r4, r3
 8013a6c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8013a70:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013a74:	68ab      	ldr	r3, [r5, #8]
 8013a76:	6869      	ldr	r1, [r5, #4]
 8013a78:	eb0a 0709 	add.w	r7, sl, r9
 8013a7c:	42bb      	cmp	r3, r7
 8013a7e:	b085      	sub	sp, #20
 8013a80:	bfb8      	it	lt
 8013a82:	3101      	addlt	r1, #1
 8013a84:	f7ff fe8a 	bl	801379c <_Balloc>
 8013a88:	b930      	cbnz	r0, 8013a98 <__multiply+0x44>
 8013a8a:	4602      	mov	r2, r0
 8013a8c:	4b42      	ldr	r3, [pc, #264]	; (8013b98 <__multiply+0x144>)
 8013a8e:	4843      	ldr	r0, [pc, #268]	; (8013b9c <__multiply+0x148>)
 8013a90:	f240 115d 	movw	r1, #349	; 0x15d
 8013a94:	f7fc fa60 	bl	800ff58 <__assert_func>
 8013a98:	f100 0614 	add.w	r6, r0, #20
 8013a9c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8013aa0:	4633      	mov	r3, r6
 8013aa2:	2200      	movs	r2, #0
 8013aa4:	4543      	cmp	r3, r8
 8013aa6:	d31e      	bcc.n	8013ae6 <__multiply+0x92>
 8013aa8:	f105 0c14 	add.w	ip, r5, #20
 8013aac:	f104 0314 	add.w	r3, r4, #20
 8013ab0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8013ab4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8013ab8:	9202      	str	r2, [sp, #8]
 8013aba:	ebac 0205 	sub.w	r2, ip, r5
 8013abe:	3a15      	subs	r2, #21
 8013ac0:	f022 0203 	bic.w	r2, r2, #3
 8013ac4:	3204      	adds	r2, #4
 8013ac6:	f105 0115 	add.w	r1, r5, #21
 8013aca:	458c      	cmp	ip, r1
 8013acc:	bf38      	it	cc
 8013ace:	2204      	movcc	r2, #4
 8013ad0:	9201      	str	r2, [sp, #4]
 8013ad2:	9a02      	ldr	r2, [sp, #8]
 8013ad4:	9303      	str	r3, [sp, #12]
 8013ad6:	429a      	cmp	r2, r3
 8013ad8:	d808      	bhi.n	8013aec <__multiply+0x98>
 8013ada:	2f00      	cmp	r7, #0
 8013adc:	dc55      	bgt.n	8013b8a <__multiply+0x136>
 8013ade:	6107      	str	r7, [r0, #16]
 8013ae0:	b005      	add	sp, #20
 8013ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ae6:	f843 2b04 	str.w	r2, [r3], #4
 8013aea:	e7db      	b.n	8013aa4 <__multiply+0x50>
 8013aec:	f8b3 a000 	ldrh.w	sl, [r3]
 8013af0:	f1ba 0f00 	cmp.w	sl, #0
 8013af4:	d020      	beq.n	8013b38 <__multiply+0xe4>
 8013af6:	f105 0e14 	add.w	lr, r5, #20
 8013afa:	46b1      	mov	r9, r6
 8013afc:	2200      	movs	r2, #0
 8013afe:	f85e 4b04 	ldr.w	r4, [lr], #4
 8013b02:	f8d9 b000 	ldr.w	fp, [r9]
 8013b06:	b2a1      	uxth	r1, r4
 8013b08:	fa1f fb8b 	uxth.w	fp, fp
 8013b0c:	fb0a b101 	mla	r1, sl, r1, fp
 8013b10:	4411      	add	r1, r2
 8013b12:	f8d9 2000 	ldr.w	r2, [r9]
 8013b16:	0c24      	lsrs	r4, r4, #16
 8013b18:	0c12      	lsrs	r2, r2, #16
 8013b1a:	fb0a 2404 	mla	r4, sl, r4, r2
 8013b1e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8013b22:	b289      	uxth	r1, r1
 8013b24:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8013b28:	45f4      	cmp	ip, lr
 8013b2a:	f849 1b04 	str.w	r1, [r9], #4
 8013b2e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8013b32:	d8e4      	bhi.n	8013afe <__multiply+0xaa>
 8013b34:	9901      	ldr	r1, [sp, #4]
 8013b36:	5072      	str	r2, [r6, r1]
 8013b38:	9a03      	ldr	r2, [sp, #12]
 8013b3a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013b3e:	3304      	adds	r3, #4
 8013b40:	f1b9 0f00 	cmp.w	r9, #0
 8013b44:	d01f      	beq.n	8013b86 <__multiply+0x132>
 8013b46:	6834      	ldr	r4, [r6, #0]
 8013b48:	f105 0114 	add.w	r1, r5, #20
 8013b4c:	46b6      	mov	lr, r6
 8013b4e:	f04f 0a00 	mov.w	sl, #0
 8013b52:	880a      	ldrh	r2, [r1, #0]
 8013b54:	f8be b002 	ldrh.w	fp, [lr, #2]
 8013b58:	fb09 b202 	mla	r2, r9, r2, fp
 8013b5c:	4492      	add	sl, r2
 8013b5e:	b2a4      	uxth	r4, r4
 8013b60:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8013b64:	f84e 4b04 	str.w	r4, [lr], #4
 8013b68:	f851 4b04 	ldr.w	r4, [r1], #4
 8013b6c:	f8be 2000 	ldrh.w	r2, [lr]
 8013b70:	0c24      	lsrs	r4, r4, #16
 8013b72:	fb09 2404 	mla	r4, r9, r4, r2
 8013b76:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8013b7a:	458c      	cmp	ip, r1
 8013b7c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013b80:	d8e7      	bhi.n	8013b52 <__multiply+0xfe>
 8013b82:	9a01      	ldr	r2, [sp, #4]
 8013b84:	50b4      	str	r4, [r6, r2]
 8013b86:	3604      	adds	r6, #4
 8013b88:	e7a3      	b.n	8013ad2 <__multiply+0x7e>
 8013b8a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d1a5      	bne.n	8013ade <__multiply+0x8a>
 8013b92:	3f01      	subs	r7, #1
 8013b94:	e7a1      	b.n	8013ada <__multiply+0x86>
 8013b96:	bf00      	nop
 8013b98:	080166eb 	.word	0x080166eb
 8013b9c:	080167dc 	.word	0x080167dc

08013ba0 <__pow5mult>:
 8013ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ba4:	4615      	mov	r5, r2
 8013ba6:	f012 0203 	ands.w	r2, r2, #3
 8013baa:	4606      	mov	r6, r0
 8013bac:	460f      	mov	r7, r1
 8013bae:	d007      	beq.n	8013bc0 <__pow5mult+0x20>
 8013bb0:	4c25      	ldr	r4, [pc, #148]	; (8013c48 <__pow5mult+0xa8>)
 8013bb2:	3a01      	subs	r2, #1
 8013bb4:	2300      	movs	r3, #0
 8013bb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013bba:	f7ff fe51 	bl	8013860 <__multadd>
 8013bbe:	4607      	mov	r7, r0
 8013bc0:	10ad      	asrs	r5, r5, #2
 8013bc2:	d03d      	beq.n	8013c40 <__pow5mult+0xa0>
 8013bc4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013bc6:	b97c      	cbnz	r4, 8013be8 <__pow5mult+0x48>
 8013bc8:	2010      	movs	r0, #16
 8013bca:	f7ff fdb3 	bl	8013734 <malloc>
 8013bce:	4602      	mov	r2, r0
 8013bd0:	6270      	str	r0, [r6, #36]	; 0x24
 8013bd2:	b928      	cbnz	r0, 8013be0 <__pow5mult+0x40>
 8013bd4:	4b1d      	ldr	r3, [pc, #116]	; (8013c4c <__pow5mult+0xac>)
 8013bd6:	481e      	ldr	r0, [pc, #120]	; (8013c50 <__pow5mult+0xb0>)
 8013bd8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013bdc:	f7fc f9bc 	bl	800ff58 <__assert_func>
 8013be0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013be4:	6004      	str	r4, [r0, #0]
 8013be6:	60c4      	str	r4, [r0, #12]
 8013be8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013bec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013bf0:	b94c      	cbnz	r4, 8013c06 <__pow5mult+0x66>
 8013bf2:	f240 2171 	movw	r1, #625	; 0x271
 8013bf6:	4630      	mov	r0, r6
 8013bf8:	f7ff ff16 	bl	8013a28 <__i2b>
 8013bfc:	2300      	movs	r3, #0
 8013bfe:	f8c8 0008 	str.w	r0, [r8, #8]
 8013c02:	4604      	mov	r4, r0
 8013c04:	6003      	str	r3, [r0, #0]
 8013c06:	f04f 0900 	mov.w	r9, #0
 8013c0a:	07eb      	lsls	r3, r5, #31
 8013c0c:	d50a      	bpl.n	8013c24 <__pow5mult+0x84>
 8013c0e:	4639      	mov	r1, r7
 8013c10:	4622      	mov	r2, r4
 8013c12:	4630      	mov	r0, r6
 8013c14:	f7ff ff1e 	bl	8013a54 <__multiply>
 8013c18:	4639      	mov	r1, r7
 8013c1a:	4680      	mov	r8, r0
 8013c1c:	4630      	mov	r0, r6
 8013c1e:	f7ff fdfd 	bl	801381c <_Bfree>
 8013c22:	4647      	mov	r7, r8
 8013c24:	106d      	asrs	r5, r5, #1
 8013c26:	d00b      	beq.n	8013c40 <__pow5mult+0xa0>
 8013c28:	6820      	ldr	r0, [r4, #0]
 8013c2a:	b938      	cbnz	r0, 8013c3c <__pow5mult+0x9c>
 8013c2c:	4622      	mov	r2, r4
 8013c2e:	4621      	mov	r1, r4
 8013c30:	4630      	mov	r0, r6
 8013c32:	f7ff ff0f 	bl	8013a54 <__multiply>
 8013c36:	6020      	str	r0, [r4, #0]
 8013c38:	f8c0 9000 	str.w	r9, [r0]
 8013c3c:	4604      	mov	r4, r0
 8013c3e:	e7e4      	b.n	8013c0a <__pow5mult+0x6a>
 8013c40:	4638      	mov	r0, r7
 8013c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c46:	bf00      	nop
 8013c48:	08016930 	.word	0x08016930
 8013c4c:	08016675 	.word	0x08016675
 8013c50:	080167dc 	.word	0x080167dc

08013c54 <__lshift>:
 8013c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c58:	460c      	mov	r4, r1
 8013c5a:	6849      	ldr	r1, [r1, #4]
 8013c5c:	6923      	ldr	r3, [r4, #16]
 8013c5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013c62:	68a3      	ldr	r3, [r4, #8]
 8013c64:	4607      	mov	r7, r0
 8013c66:	4691      	mov	r9, r2
 8013c68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013c6c:	f108 0601 	add.w	r6, r8, #1
 8013c70:	42b3      	cmp	r3, r6
 8013c72:	db0b      	blt.n	8013c8c <__lshift+0x38>
 8013c74:	4638      	mov	r0, r7
 8013c76:	f7ff fd91 	bl	801379c <_Balloc>
 8013c7a:	4605      	mov	r5, r0
 8013c7c:	b948      	cbnz	r0, 8013c92 <__lshift+0x3e>
 8013c7e:	4602      	mov	r2, r0
 8013c80:	4b28      	ldr	r3, [pc, #160]	; (8013d24 <__lshift+0xd0>)
 8013c82:	4829      	ldr	r0, [pc, #164]	; (8013d28 <__lshift+0xd4>)
 8013c84:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013c88:	f7fc f966 	bl	800ff58 <__assert_func>
 8013c8c:	3101      	adds	r1, #1
 8013c8e:	005b      	lsls	r3, r3, #1
 8013c90:	e7ee      	b.n	8013c70 <__lshift+0x1c>
 8013c92:	2300      	movs	r3, #0
 8013c94:	f100 0114 	add.w	r1, r0, #20
 8013c98:	f100 0210 	add.w	r2, r0, #16
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	4553      	cmp	r3, sl
 8013ca0:	db33      	blt.n	8013d0a <__lshift+0xb6>
 8013ca2:	6920      	ldr	r0, [r4, #16]
 8013ca4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013ca8:	f104 0314 	add.w	r3, r4, #20
 8013cac:	f019 091f 	ands.w	r9, r9, #31
 8013cb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013cb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013cb8:	d02b      	beq.n	8013d12 <__lshift+0xbe>
 8013cba:	f1c9 0e20 	rsb	lr, r9, #32
 8013cbe:	468a      	mov	sl, r1
 8013cc0:	2200      	movs	r2, #0
 8013cc2:	6818      	ldr	r0, [r3, #0]
 8013cc4:	fa00 f009 	lsl.w	r0, r0, r9
 8013cc8:	4302      	orrs	r2, r0
 8013cca:	f84a 2b04 	str.w	r2, [sl], #4
 8013cce:	f853 2b04 	ldr.w	r2, [r3], #4
 8013cd2:	459c      	cmp	ip, r3
 8013cd4:	fa22 f20e 	lsr.w	r2, r2, lr
 8013cd8:	d8f3      	bhi.n	8013cc2 <__lshift+0x6e>
 8013cda:	ebac 0304 	sub.w	r3, ip, r4
 8013cde:	3b15      	subs	r3, #21
 8013ce0:	f023 0303 	bic.w	r3, r3, #3
 8013ce4:	3304      	adds	r3, #4
 8013ce6:	f104 0015 	add.w	r0, r4, #21
 8013cea:	4584      	cmp	ip, r0
 8013cec:	bf38      	it	cc
 8013cee:	2304      	movcc	r3, #4
 8013cf0:	50ca      	str	r2, [r1, r3]
 8013cf2:	b10a      	cbz	r2, 8013cf8 <__lshift+0xa4>
 8013cf4:	f108 0602 	add.w	r6, r8, #2
 8013cf8:	3e01      	subs	r6, #1
 8013cfa:	4638      	mov	r0, r7
 8013cfc:	612e      	str	r6, [r5, #16]
 8013cfe:	4621      	mov	r1, r4
 8013d00:	f7ff fd8c 	bl	801381c <_Bfree>
 8013d04:	4628      	mov	r0, r5
 8013d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8013d0e:	3301      	adds	r3, #1
 8013d10:	e7c5      	b.n	8013c9e <__lshift+0x4a>
 8013d12:	3904      	subs	r1, #4
 8013d14:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d18:	f841 2f04 	str.w	r2, [r1, #4]!
 8013d1c:	459c      	cmp	ip, r3
 8013d1e:	d8f9      	bhi.n	8013d14 <__lshift+0xc0>
 8013d20:	e7ea      	b.n	8013cf8 <__lshift+0xa4>
 8013d22:	bf00      	nop
 8013d24:	080166eb 	.word	0x080166eb
 8013d28:	080167dc 	.word	0x080167dc

08013d2c <__mcmp>:
 8013d2c:	b530      	push	{r4, r5, lr}
 8013d2e:	6902      	ldr	r2, [r0, #16]
 8013d30:	690c      	ldr	r4, [r1, #16]
 8013d32:	1b12      	subs	r2, r2, r4
 8013d34:	d10e      	bne.n	8013d54 <__mcmp+0x28>
 8013d36:	f100 0314 	add.w	r3, r0, #20
 8013d3a:	3114      	adds	r1, #20
 8013d3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013d40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013d44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013d48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013d4c:	42a5      	cmp	r5, r4
 8013d4e:	d003      	beq.n	8013d58 <__mcmp+0x2c>
 8013d50:	d305      	bcc.n	8013d5e <__mcmp+0x32>
 8013d52:	2201      	movs	r2, #1
 8013d54:	4610      	mov	r0, r2
 8013d56:	bd30      	pop	{r4, r5, pc}
 8013d58:	4283      	cmp	r3, r0
 8013d5a:	d3f3      	bcc.n	8013d44 <__mcmp+0x18>
 8013d5c:	e7fa      	b.n	8013d54 <__mcmp+0x28>
 8013d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8013d62:	e7f7      	b.n	8013d54 <__mcmp+0x28>

08013d64 <__mdiff>:
 8013d64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d68:	460c      	mov	r4, r1
 8013d6a:	4606      	mov	r6, r0
 8013d6c:	4611      	mov	r1, r2
 8013d6e:	4620      	mov	r0, r4
 8013d70:	4617      	mov	r7, r2
 8013d72:	f7ff ffdb 	bl	8013d2c <__mcmp>
 8013d76:	1e05      	subs	r5, r0, #0
 8013d78:	d110      	bne.n	8013d9c <__mdiff+0x38>
 8013d7a:	4629      	mov	r1, r5
 8013d7c:	4630      	mov	r0, r6
 8013d7e:	f7ff fd0d 	bl	801379c <_Balloc>
 8013d82:	b930      	cbnz	r0, 8013d92 <__mdiff+0x2e>
 8013d84:	4b39      	ldr	r3, [pc, #228]	; (8013e6c <__mdiff+0x108>)
 8013d86:	4602      	mov	r2, r0
 8013d88:	f240 2132 	movw	r1, #562	; 0x232
 8013d8c:	4838      	ldr	r0, [pc, #224]	; (8013e70 <__mdiff+0x10c>)
 8013d8e:	f7fc f8e3 	bl	800ff58 <__assert_func>
 8013d92:	2301      	movs	r3, #1
 8013d94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013d98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d9c:	bfa4      	itt	ge
 8013d9e:	463b      	movge	r3, r7
 8013da0:	4627      	movge	r7, r4
 8013da2:	4630      	mov	r0, r6
 8013da4:	6879      	ldr	r1, [r7, #4]
 8013da6:	bfa6      	itte	ge
 8013da8:	461c      	movge	r4, r3
 8013daa:	2500      	movge	r5, #0
 8013dac:	2501      	movlt	r5, #1
 8013dae:	f7ff fcf5 	bl	801379c <_Balloc>
 8013db2:	b920      	cbnz	r0, 8013dbe <__mdiff+0x5a>
 8013db4:	4b2d      	ldr	r3, [pc, #180]	; (8013e6c <__mdiff+0x108>)
 8013db6:	4602      	mov	r2, r0
 8013db8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013dbc:	e7e6      	b.n	8013d8c <__mdiff+0x28>
 8013dbe:	693e      	ldr	r6, [r7, #16]
 8013dc0:	60c5      	str	r5, [r0, #12]
 8013dc2:	6925      	ldr	r5, [r4, #16]
 8013dc4:	f107 0114 	add.w	r1, r7, #20
 8013dc8:	f104 0914 	add.w	r9, r4, #20
 8013dcc:	f100 0e14 	add.w	lr, r0, #20
 8013dd0:	f107 0210 	add.w	r2, r7, #16
 8013dd4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8013dd8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8013ddc:	46f2      	mov	sl, lr
 8013dde:	2700      	movs	r7, #0
 8013de0:	f859 3b04 	ldr.w	r3, [r9], #4
 8013de4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013de8:	fa1f f883 	uxth.w	r8, r3
 8013dec:	fa17 f78b 	uxtah	r7, r7, fp
 8013df0:	0c1b      	lsrs	r3, r3, #16
 8013df2:	eba7 0808 	sub.w	r8, r7, r8
 8013df6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013dfa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013dfe:	fa1f f888 	uxth.w	r8, r8
 8013e02:	141f      	asrs	r7, r3, #16
 8013e04:	454d      	cmp	r5, r9
 8013e06:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013e0a:	f84a 3b04 	str.w	r3, [sl], #4
 8013e0e:	d8e7      	bhi.n	8013de0 <__mdiff+0x7c>
 8013e10:	1b2b      	subs	r3, r5, r4
 8013e12:	3b15      	subs	r3, #21
 8013e14:	f023 0303 	bic.w	r3, r3, #3
 8013e18:	3304      	adds	r3, #4
 8013e1a:	3415      	adds	r4, #21
 8013e1c:	42a5      	cmp	r5, r4
 8013e1e:	bf38      	it	cc
 8013e20:	2304      	movcc	r3, #4
 8013e22:	4419      	add	r1, r3
 8013e24:	4473      	add	r3, lr
 8013e26:	469e      	mov	lr, r3
 8013e28:	460d      	mov	r5, r1
 8013e2a:	4565      	cmp	r5, ip
 8013e2c:	d30e      	bcc.n	8013e4c <__mdiff+0xe8>
 8013e2e:	f10c 0203 	add.w	r2, ip, #3
 8013e32:	1a52      	subs	r2, r2, r1
 8013e34:	f022 0203 	bic.w	r2, r2, #3
 8013e38:	3903      	subs	r1, #3
 8013e3a:	458c      	cmp	ip, r1
 8013e3c:	bf38      	it	cc
 8013e3e:	2200      	movcc	r2, #0
 8013e40:	441a      	add	r2, r3
 8013e42:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013e46:	b17b      	cbz	r3, 8013e68 <__mdiff+0x104>
 8013e48:	6106      	str	r6, [r0, #16]
 8013e4a:	e7a5      	b.n	8013d98 <__mdiff+0x34>
 8013e4c:	f855 8b04 	ldr.w	r8, [r5], #4
 8013e50:	fa17 f488 	uxtah	r4, r7, r8
 8013e54:	1422      	asrs	r2, r4, #16
 8013e56:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8013e5a:	b2a4      	uxth	r4, r4
 8013e5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8013e60:	f84e 4b04 	str.w	r4, [lr], #4
 8013e64:	1417      	asrs	r7, r2, #16
 8013e66:	e7e0      	b.n	8013e2a <__mdiff+0xc6>
 8013e68:	3e01      	subs	r6, #1
 8013e6a:	e7ea      	b.n	8013e42 <__mdiff+0xde>
 8013e6c:	080166eb 	.word	0x080166eb
 8013e70:	080167dc 	.word	0x080167dc

08013e74 <__ulp>:
 8013e74:	b082      	sub	sp, #8
 8013e76:	ed8d 0b00 	vstr	d0, [sp]
 8013e7a:	9b01      	ldr	r3, [sp, #4]
 8013e7c:	4912      	ldr	r1, [pc, #72]	; (8013ec8 <__ulp+0x54>)
 8013e7e:	4019      	ands	r1, r3
 8013e80:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8013e84:	2900      	cmp	r1, #0
 8013e86:	dd05      	ble.n	8013e94 <__ulp+0x20>
 8013e88:	2200      	movs	r2, #0
 8013e8a:	460b      	mov	r3, r1
 8013e8c:	ec43 2b10 	vmov	d0, r2, r3
 8013e90:	b002      	add	sp, #8
 8013e92:	4770      	bx	lr
 8013e94:	4249      	negs	r1, r1
 8013e96:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8013e9a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8013e9e:	f04f 0200 	mov.w	r2, #0
 8013ea2:	f04f 0300 	mov.w	r3, #0
 8013ea6:	da04      	bge.n	8013eb2 <__ulp+0x3e>
 8013ea8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8013eac:	fa41 f300 	asr.w	r3, r1, r0
 8013eb0:	e7ec      	b.n	8013e8c <__ulp+0x18>
 8013eb2:	f1a0 0114 	sub.w	r1, r0, #20
 8013eb6:	291e      	cmp	r1, #30
 8013eb8:	bfda      	itte	le
 8013eba:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8013ebe:	fa20 f101 	lsrle.w	r1, r0, r1
 8013ec2:	2101      	movgt	r1, #1
 8013ec4:	460a      	mov	r2, r1
 8013ec6:	e7e1      	b.n	8013e8c <__ulp+0x18>
 8013ec8:	7ff00000 	.word	0x7ff00000

08013ecc <__b2d>:
 8013ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ece:	6905      	ldr	r5, [r0, #16]
 8013ed0:	f100 0714 	add.w	r7, r0, #20
 8013ed4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013ed8:	1f2e      	subs	r6, r5, #4
 8013eda:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013ede:	4620      	mov	r0, r4
 8013ee0:	f7ff fd52 	bl	8013988 <__hi0bits>
 8013ee4:	f1c0 0320 	rsb	r3, r0, #32
 8013ee8:	280a      	cmp	r0, #10
 8013eea:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8013f68 <__b2d+0x9c>
 8013eee:	600b      	str	r3, [r1, #0]
 8013ef0:	dc14      	bgt.n	8013f1c <__b2d+0x50>
 8013ef2:	f1c0 0e0b 	rsb	lr, r0, #11
 8013ef6:	fa24 f10e 	lsr.w	r1, r4, lr
 8013efa:	42b7      	cmp	r7, r6
 8013efc:	ea41 030c 	orr.w	r3, r1, ip
 8013f00:	bf34      	ite	cc
 8013f02:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013f06:	2100      	movcs	r1, #0
 8013f08:	3015      	adds	r0, #21
 8013f0a:	fa04 f000 	lsl.w	r0, r4, r0
 8013f0e:	fa21 f10e 	lsr.w	r1, r1, lr
 8013f12:	ea40 0201 	orr.w	r2, r0, r1
 8013f16:	ec43 2b10 	vmov	d0, r2, r3
 8013f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f1c:	42b7      	cmp	r7, r6
 8013f1e:	bf3a      	itte	cc
 8013f20:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013f24:	f1a5 0608 	subcc.w	r6, r5, #8
 8013f28:	2100      	movcs	r1, #0
 8013f2a:	380b      	subs	r0, #11
 8013f2c:	d017      	beq.n	8013f5e <__b2d+0x92>
 8013f2e:	f1c0 0c20 	rsb	ip, r0, #32
 8013f32:	fa04 f500 	lsl.w	r5, r4, r0
 8013f36:	42be      	cmp	r6, r7
 8013f38:	fa21 f40c 	lsr.w	r4, r1, ip
 8013f3c:	ea45 0504 	orr.w	r5, r5, r4
 8013f40:	bf8c      	ite	hi
 8013f42:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013f46:	2400      	movls	r4, #0
 8013f48:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8013f4c:	fa01 f000 	lsl.w	r0, r1, r0
 8013f50:	fa24 f40c 	lsr.w	r4, r4, ip
 8013f54:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013f58:	ea40 0204 	orr.w	r2, r0, r4
 8013f5c:	e7db      	b.n	8013f16 <__b2d+0x4a>
 8013f5e:	ea44 030c 	orr.w	r3, r4, ip
 8013f62:	460a      	mov	r2, r1
 8013f64:	e7d7      	b.n	8013f16 <__b2d+0x4a>
 8013f66:	bf00      	nop
 8013f68:	3ff00000 	.word	0x3ff00000

08013f6c <__d2b>:
 8013f6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013f70:	4689      	mov	r9, r1
 8013f72:	2101      	movs	r1, #1
 8013f74:	ec57 6b10 	vmov	r6, r7, d0
 8013f78:	4690      	mov	r8, r2
 8013f7a:	f7ff fc0f 	bl	801379c <_Balloc>
 8013f7e:	4604      	mov	r4, r0
 8013f80:	b930      	cbnz	r0, 8013f90 <__d2b+0x24>
 8013f82:	4602      	mov	r2, r0
 8013f84:	4b25      	ldr	r3, [pc, #148]	; (801401c <__d2b+0xb0>)
 8013f86:	4826      	ldr	r0, [pc, #152]	; (8014020 <__d2b+0xb4>)
 8013f88:	f240 310a 	movw	r1, #778	; 0x30a
 8013f8c:	f7fb ffe4 	bl	800ff58 <__assert_func>
 8013f90:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013f94:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013f98:	bb35      	cbnz	r5, 8013fe8 <__d2b+0x7c>
 8013f9a:	2e00      	cmp	r6, #0
 8013f9c:	9301      	str	r3, [sp, #4]
 8013f9e:	d028      	beq.n	8013ff2 <__d2b+0x86>
 8013fa0:	4668      	mov	r0, sp
 8013fa2:	9600      	str	r6, [sp, #0]
 8013fa4:	f7ff fd10 	bl	80139c8 <__lo0bits>
 8013fa8:	9900      	ldr	r1, [sp, #0]
 8013faa:	b300      	cbz	r0, 8013fee <__d2b+0x82>
 8013fac:	9a01      	ldr	r2, [sp, #4]
 8013fae:	f1c0 0320 	rsb	r3, r0, #32
 8013fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8013fb6:	430b      	orrs	r3, r1
 8013fb8:	40c2      	lsrs	r2, r0
 8013fba:	6163      	str	r3, [r4, #20]
 8013fbc:	9201      	str	r2, [sp, #4]
 8013fbe:	9b01      	ldr	r3, [sp, #4]
 8013fc0:	61a3      	str	r3, [r4, #24]
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	bf14      	ite	ne
 8013fc6:	2202      	movne	r2, #2
 8013fc8:	2201      	moveq	r2, #1
 8013fca:	6122      	str	r2, [r4, #16]
 8013fcc:	b1d5      	cbz	r5, 8014004 <__d2b+0x98>
 8013fce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013fd2:	4405      	add	r5, r0
 8013fd4:	f8c9 5000 	str.w	r5, [r9]
 8013fd8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013fdc:	f8c8 0000 	str.w	r0, [r8]
 8013fe0:	4620      	mov	r0, r4
 8013fe2:	b003      	add	sp, #12
 8013fe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013fe8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013fec:	e7d5      	b.n	8013f9a <__d2b+0x2e>
 8013fee:	6161      	str	r1, [r4, #20]
 8013ff0:	e7e5      	b.n	8013fbe <__d2b+0x52>
 8013ff2:	a801      	add	r0, sp, #4
 8013ff4:	f7ff fce8 	bl	80139c8 <__lo0bits>
 8013ff8:	9b01      	ldr	r3, [sp, #4]
 8013ffa:	6163      	str	r3, [r4, #20]
 8013ffc:	2201      	movs	r2, #1
 8013ffe:	6122      	str	r2, [r4, #16]
 8014000:	3020      	adds	r0, #32
 8014002:	e7e3      	b.n	8013fcc <__d2b+0x60>
 8014004:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014008:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801400c:	f8c9 0000 	str.w	r0, [r9]
 8014010:	6918      	ldr	r0, [r3, #16]
 8014012:	f7ff fcb9 	bl	8013988 <__hi0bits>
 8014016:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801401a:	e7df      	b.n	8013fdc <__d2b+0x70>
 801401c:	080166eb 	.word	0x080166eb
 8014020:	080167dc 	.word	0x080167dc

08014024 <__ratio>:
 8014024:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014028:	4688      	mov	r8, r1
 801402a:	4669      	mov	r1, sp
 801402c:	4681      	mov	r9, r0
 801402e:	f7ff ff4d 	bl	8013ecc <__b2d>
 8014032:	a901      	add	r1, sp, #4
 8014034:	4640      	mov	r0, r8
 8014036:	ec55 4b10 	vmov	r4, r5, d0
 801403a:	f7ff ff47 	bl	8013ecc <__b2d>
 801403e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014042:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014046:	eba3 0c02 	sub.w	ip, r3, r2
 801404a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801404e:	1a9b      	subs	r3, r3, r2
 8014050:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8014054:	ec51 0b10 	vmov	r0, r1, d0
 8014058:	2b00      	cmp	r3, #0
 801405a:	bfd6      	itet	le
 801405c:	460a      	movle	r2, r1
 801405e:	462a      	movgt	r2, r5
 8014060:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014064:	468b      	mov	fp, r1
 8014066:	462f      	mov	r7, r5
 8014068:	bfd4      	ite	le
 801406a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801406e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8014072:	4620      	mov	r0, r4
 8014074:	ee10 2a10 	vmov	r2, s0
 8014078:	465b      	mov	r3, fp
 801407a:	4639      	mov	r1, r7
 801407c:	f7ec fbee 	bl	800085c <__aeabi_ddiv>
 8014080:	ec41 0b10 	vmov	d0, r0, r1
 8014084:	b003      	add	sp, #12
 8014086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801408a <__copybits>:
 801408a:	3901      	subs	r1, #1
 801408c:	b570      	push	{r4, r5, r6, lr}
 801408e:	1149      	asrs	r1, r1, #5
 8014090:	6914      	ldr	r4, [r2, #16]
 8014092:	3101      	adds	r1, #1
 8014094:	f102 0314 	add.w	r3, r2, #20
 8014098:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801409c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80140a0:	1f05      	subs	r5, r0, #4
 80140a2:	42a3      	cmp	r3, r4
 80140a4:	d30c      	bcc.n	80140c0 <__copybits+0x36>
 80140a6:	1aa3      	subs	r3, r4, r2
 80140a8:	3b11      	subs	r3, #17
 80140aa:	f023 0303 	bic.w	r3, r3, #3
 80140ae:	3211      	adds	r2, #17
 80140b0:	42a2      	cmp	r2, r4
 80140b2:	bf88      	it	hi
 80140b4:	2300      	movhi	r3, #0
 80140b6:	4418      	add	r0, r3
 80140b8:	2300      	movs	r3, #0
 80140ba:	4288      	cmp	r0, r1
 80140bc:	d305      	bcc.n	80140ca <__copybits+0x40>
 80140be:	bd70      	pop	{r4, r5, r6, pc}
 80140c0:	f853 6b04 	ldr.w	r6, [r3], #4
 80140c4:	f845 6f04 	str.w	r6, [r5, #4]!
 80140c8:	e7eb      	b.n	80140a2 <__copybits+0x18>
 80140ca:	f840 3b04 	str.w	r3, [r0], #4
 80140ce:	e7f4      	b.n	80140ba <__copybits+0x30>

080140d0 <__any_on>:
 80140d0:	f100 0214 	add.w	r2, r0, #20
 80140d4:	6900      	ldr	r0, [r0, #16]
 80140d6:	114b      	asrs	r3, r1, #5
 80140d8:	4298      	cmp	r0, r3
 80140da:	b510      	push	{r4, lr}
 80140dc:	db11      	blt.n	8014102 <__any_on+0x32>
 80140de:	dd0a      	ble.n	80140f6 <__any_on+0x26>
 80140e0:	f011 011f 	ands.w	r1, r1, #31
 80140e4:	d007      	beq.n	80140f6 <__any_on+0x26>
 80140e6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80140ea:	fa24 f001 	lsr.w	r0, r4, r1
 80140ee:	fa00 f101 	lsl.w	r1, r0, r1
 80140f2:	428c      	cmp	r4, r1
 80140f4:	d10b      	bne.n	801410e <__any_on+0x3e>
 80140f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80140fa:	4293      	cmp	r3, r2
 80140fc:	d803      	bhi.n	8014106 <__any_on+0x36>
 80140fe:	2000      	movs	r0, #0
 8014100:	bd10      	pop	{r4, pc}
 8014102:	4603      	mov	r3, r0
 8014104:	e7f7      	b.n	80140f6 <__any_on+0x26>
 8014106:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801410a:	2900      	cmp	r1, #0
 801410c:	d0f5      	beq.n	80140fa <__any_on+0x2a>
 801410e:	2001      	movs	r0, #1
 8014110:	e7f6      	b.n	8014100 <__any_on+0x30>

08014112 <_calloc_r>:
 8014112:	b513      	push	{r0, r1, r4, lr}
 8014114:	434a      	muls	r2, r1
 8014116:	4611      	mov	r1, r2
 8014118:	9201      	str	r2, [sp, #4]
 801411a:	f000 f859 	bl	80141d0 <_malloc_r>
 801411e:	4604      	mov	r4, r0
 8014120:	b118      	cbz	r0, 801412a <_calloc_r+0x18>
 8014122:	9a01      	ldr	r2, [sp, #4]
 8014124:	2100      	movs	r1, #0
 8014126:	f7fb ff7f 	bl	8010028 <memset>
 801412a:	4620      	mov	r0, r4
 801412c:	b002      	add	sp, #8
 801412e:	bd10      	pop	{r4, pc}

08014130 <_free_r>:
 8014130:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014132:	2900      	cmp	r1, #0
 8014134:	d048      	beq.n	80141c8 <_free_r+0x98>
 8014136:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801413a:	9001      	str	r0, [sp, #4]
 801413c:	2b00      	cmp	r3, #0
 801413e:	f1a1 0404 	sub.w	r4, r1, #4
 8014142:	bfb8      	it	lt
 8014144:	18e4      	addlt	r4, r4, r3
 8014146:	f000 fb33 	bl	80147b0 <__malloc_lock>
 801414a:	4a20      	ldr	r2, [pc, #128]	; (80141cc <_free_r+0x9c>)
 801414c:	9801      	ldr	r0, [sp, #4]
 801414e:	6813      	ldr	r3, [r2, #0]
 8014150:	4615      	mov	r5, r2
 8014152:	b933      	cbnz	r3, 8014162 <_free_r+0x32>
 8014154:	6063      	str	r3, [r4, #4]
 8014156:	6014      	str	r4, [r2, #0]
 8014158:	b003      	add	sp, #12
 801415a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801415e:	f000 bb2d 	b.w	80147bc <__malloc_unlock>
 8014162:	42a3      	cmp	r3, r4
 8014164:	d90b      	bls.n	801417e <_free_r+0x4e>
 8014166:	6821      	ldr	r1, [r4, #0]
 8014168:	1862      	adds	r2, r4, r1
 801416a:	4293      	cmp	r3, r2
 801416c:	bf04      	itt	eq
 801416e:	681a      	ldreq	r2, [r3, #0]
 8014170:	685b      	ldreq	r3, [r3, #4]
 8014172:	6063      	str	r3, [r4, #4]
 8014174:	bf04      	itt	eq
 8014176:	1852      	addeq	r2, r2, r1
 8014178:	6022      	streq	r2, [r4, #0]
 801417a:	602c      	str	r4, [r5, #0]
 801417c:	e7ec      	b.n	8014158 <_free_r+0x28>
 801417e:	461a      	mov	r2, r3
 8014180:	685b      	ldr	r3, [r3, #4]
 8014182:	b10b      	cbz	r3, 8014188 <_free_r+0x58>
 8014184:	42a3      	cmp	r3, r4
 8014186:	d9fa      	bls.n	801417e <_free_r+0x4e>
 8014188:	6811      	ldr	r1, [r2, #0]
 801418a:	1855      	adds	r5, r2, r1
 801418c:	42a5      	cmp	r5, r4
 801418e:	d10b      	bne.n	80141a8 <_free_r+0x78>
 8014190:	6824      	ldr	r4, [r4, #0]
 8014192:	4421      	add	r1, r4
 8014194:	1854      	adds	r4, r2, r1
 8014196:	42a3      	cmp	r3, r4
 8014198:	6011      	str	r1, [r2, #0]
 801419a:	d1dd      	bne.n	8014158 <_free_r+0x28>
 801419c:	681c      	ldr	r4, [r3, #0]
 801419e:	685b      	ldr	r3, [r3, #4]
 80141a0:	6053      	str	r3, [r2, #4]
 80141a2:	4421      	add	r1, r4
 80141a4:	6011      	str	r1, [r2, #0]
 80141a6:	e7d7      	b.n	8014158 <_free_r+0x28>
 80141a8:	d902      	bls.n	80141b0 <_free_r+0x80>
 80141aa:	230c      	movs	r3, #12
 80141ac:	6003      	str	r3, [r0, #0]
 80141ae:	e7d3      	b.n	8014158 <_free_r+0x28>
 80141b0:	6825      	ldr	r5, [r4, #0]
 80141b2:	1961      	adds	r1, r4, r5
 80141b4:	428b      	cmp	r3, r1
 80141b6:	bf04      	itt	eq
 80141b8:	6819      	ldreq	r1, [r3, #0]
 80141ba:	685b      	ldreq	r3, [r3, #4]
 80141bc:	6063      	str	r3, [r4, #4]
 80141be:	bf04      	itt	eq
 80141c0:	1949      	addeq	r1, r1, r5
 80141c2:	6021      	streq	r1, [r4, #0]
 80141c4:	6054      	str	r4, [r2, #4]
 80141c6:	e7c7      	b.n	8014158 <_free_r+0x28>
 80141c8:	b003      	add	sp, #12
 80141ca:	bd30      	pop	{r4, r5, pc}
 80141cc:	2000273c 	.word	0x2000273c

080141d0 <_malloc_r>:
 80141d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141d2:	1ccd      	adds	r5, r1, #3
 80141d4:	f025 0503 	bic.w	r5, r5, #3
 80141d8:	3508      	adds	r5, #8
 80141da:	2d0c      	cmp	r5, #12
 80141dc:	bf38      	it	cc
 80141de:	250c      	movcc	r5, #12
 80141e0:	2d00      	cmp	r5, #0
 80141e2:	4606      	mov	r6, r0
 80141e4:	db01      	blt.n	80141ea <_malloc_r+0x1a>
 80141e6:	42a9      	cmp	r1, r5
 80141e8:	d903      	bls.n	80141f2 <_malloc_r+0x22>
 80141ea:	230c      	movs	r3, #12
 80141ec:	6033      	str	r3, [r6, #0]
 80141ee:	2000      	movs	r0, #0
 80141f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141f2:	f000 fadd 	bl	80147b0 <__malloc_lock>
 80141f6:	4921      	ldr	r1, [pc, #132]	; (801427c <_malloc_r+0xac>)
 80141f8:	680a      	ldr	r2, [r1, #0]
 80141fa:	4614      	mov	r4, r2
 80141fc:	b99c      	cbnz	r4, 8014226 <_malloc_r+0x56>
 80141fe:	4f20      	ldr	r7, [pc, #128]	; (8014280 <_malloc_r+0xb0>)
 8014200:	683b      	ldr	r3, [r7, #0]
 8014202:	b923      	cbnz	r3, 801420e <_malloc_r+0x3e>
 8014204:	4621      	mov	r1, r4
 8014206:	4630      	mov	r0, r6
 8014208:	f000 f9c6 	bl	8014598 <_sbrk_r>
 801420c:	6038      	str	r0, [r7, #0]
 801420e:	4629      	mov	r1, r5
 8014210:	4630      	mov	r0, r6
 8014212:	f000 f9c1 	bl	8014598 <_sbrk_r>
 8014216:	1c43      	adds	r3, r0, #1
 8014218:	d123      	bne.n	8014262 <_malloc_r+0x92>
 801421a:	230c      	movs	r3, #12
 801421c:	6033      	str	r3, [r6, #0]
 801421e:	4630      	mov	r0, r6
 8014220:	f000 facc 	bl	80147bc <__malloc_unlock>
 8014224:	e7e3      	b.n	80141ee <_malloc_r+0x1e>
 8014226:	6823      	ldr	r3, [r4, #0]
 8014228:	1b5b      	subs	r3, r3, r5
 801422a:	d417      	bmi.n	801425c <_malloc_r+0x8c>
 801422c:	2b0b      	cmp	r3, #11
 801422e:	d903      	bls.n	8014238 <_malloc_r+0x68>
 8014230:	6023      	str	r3, [r4, #0]
 8014232:	441c      	add	r4, r3
 8014234:	6025      	str	r5, [r4, #0]
 8014236:	e004      	b.n	8014242 <_malloc_r+0x72>
 8014238:	6863      	ldr	r3, [r4, #4]
 801423a:	42a2      	cmp	r2, r4
 801423c:	bf0c      	ite	eq
 801423e:	600b      	streq	r3, [r1, #0]
 8014240:	6053      	strne	r3, [r2, #4]
 8014242:	4630      	mov	r0, r6
 8014244:	f000 faba 	bl	80147bc <__malloc_unlock>
 8014248:	f104 000b 	add.w	r0, r4, #11
 801424c:	1d23      	adds	r3, r4, #4
 801424e:	f020 0007 	bic.w	r0, r0, #7
 8014252:	1ac2      	subs	r2, r0, r3
 8014254:	d0cc      	beq.n	80141f0 <_malloc_r+0x20>
 8014256:	1a1b      	subs	r3, r3, r0
 8014258:	50a3      	str	r3, [r4, r2]
 801425a:	e7c9      	b.n	80141f0 <_malloc_r+0x20>
 801425c:	4622      	mov	r2, r4
 801425e:	6864      	ldr	r4, [r4, #4]
 8014260:	e7cc      	b.n	80141fc <_malloc_r+0x2c>
 8014262:	1cc4      	adds	r4, r0, #3
 8014264:	f024 0403 	bic.w	r4, r4, #3
 8014268:	42a0      	cmp	r0, r4
 801426a:	d0e3      	beq.n	8014234 <_malloc_r+0x64>
 801426c:	1a21      	subs	r1, r4, r0
 801426e:	4630      	mov	r0, r6
 8014270:	f000 f992 	bl	8014598 <_sbrk_r>
 8014274:	3001      	adds	r0, #1
 8014276:	d1dd      	bne.n	8014234 <_malloc_r+0x64>
 8014278:	e7cf      	b.n	801421a <_malloc_r+0x4a>
 801427a:	bf00      	nop
 801427c:	2000273c 	.word	0x2000273c
 8014280:	20002740 	.word	0x20002740

08014284 <_realloc_r>:
 8014284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014286:	4607      	mov	r7, r0
 8014288:	4614      	mov	r4, r2
 801428a:	460e      	mov	r6, r1
 801428c:	b921      	cbnz	r1, 8014298 <_realloc_r+0x14>
 801428e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014292:	4611      	mov	r1, r2
 8014294:	f7ff bf9c 	b.w	80141d0 <_malloc_r>
 8014298:	b922      	cbnz	r2, 80142a4 <_realloc_r+0x20>
 801429a:	f7ff ff49 	bl	8014130 <_free_r>
 801429e:	4625      	mov	r5, r4
 80142a0:	4628      	mov	r0, r5
 80142a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80142a4:	f000 fa90 	bl	80147c8 <_malloc_usable_size_r>
 80142a8:	42a0      	cmp	r0, r4
 80142aa:	d20f      	bcs.n	80142cc <_realloc_r+0x48>
 80142ac:	4621      	mov	r1, r4
 80142ae:	4638      	mov	r0, r7
 80142b0:	f7ff ff8e 	bl	80141d0 <_malloc_r>
 80142b4:	4605      	mov	r5, r0
 80142b6:	2800      	cmp	r0, #0
 80142b8:	d0f2      	beq.n	80142a0 <_realloc_r+0x1c>
 80142ba:	4631      	mov	r1, r6
 80142bc:	4622      	mov	r2, r4
 80142be:	f7fb fea5 	bl	801000c <memcpy>
 80142c2:	4631      	mov	r1, r6
 80142c4:	4638      	mov	r0, r7
 80142c6:	f7ff ff33 	bl	8014130 <_free_r>
 80142ca:	e7e9      	b.n	80142a0 <_realloc_r+0x1c>
 80142cc:	4635      	mov	r5, r6
 80142ce:	e7e7      	b.n	80142a0 <_realloc_r+0x1c>

080142d0 <__ssputs_r>:
 80142d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142d4:	688e      	ldr	r6, [r1, #8]
 80142d6:	429e      	cmp	r6, r3
 80142d8:	4682      	mov	sl, r0
 80142da:	460c      	mov	r4, r1
 80142dc:	4690      	mov	r8, r2
 80142de:	461f      	mov	r7, r3
 80142e0:	d838      	bhi.n	8014354 <__ssputs_r+0x84>
 80142e2:	898a      	ldrh	r2, [r1, #12]
 80142e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80142e8:	d032      	beq.n	8014350 <__ssputs_r+0x80>
 80142ea:	6825      	ldr	r5, [r4, #0]
 80142ec:	6909      	ldr	r1, [r1, #16]
 80142ee:	eba5 0901 	sub.w	r9, r5, r1
 80142f2:	6965      	ldr	r5, [r4, #20]
 80142f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80142f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80142fc:	3301      	adds	r3, #1
 80142fe:	444b      	add	r3, r9
 8014300:	106d      	asrs	r5, r5, #1
 8014302:	429d      	cmp	r5, r3
 8014304:	bf38      	it	cc
 8014306:	461d      	movcc	r5, r3
 8014308:	0553      	lsls	r3, r2, #21
 801430a:	d531      	bpl.n	8014370 <__ssputs_r+0xa0>
 801430c:	4629      	mov	r1, r5
 801430e:	f7ff ff5f 	bl	80141d0 <_malloc_r>
 8014312:	4606      	mov	r6, r0
 8014314:	b950      	cbnz	r0, 801432c <__ssputs_r+0x5c>
 8014316:	230c      	movs	r3, #12
 8014318:	f8ca 3000 	str.w	r3, [sl]
 801431c:	89a3      	ldrh	r3, [r4, #12]
 801431e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014322:	81a3      	strh	r3, [r4, #12]
 8014324:	f04f 30ff 	mov.w	r0, #4294967295
 8014328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801432c:	6921      	ldr	r1, [r4, #16]
 801432e:	464a      	mov	r2, r9
 8014330:	f7fb fe6c 	bl	801000c <memcpy>
 8014334:	89a3      	ldrh	r3, [r4, #12]
 8014336:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801433a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801433e:	81a3      	strh	r3, [r4, #12]
 8014340:	6126      	str	r6, [r4, #16]
 8014342:	6165      	str	r5, [r4, #20]
 8014344:	444e      	add	r6, r9
 8014346:	eba5 0509 	sub.w	r5, r5, r9
 801434a:	6026      	str	r6, [r4, #0]
 801434c:	60a5      	str	r5, [r4, #8]
 801434e:	463e      	mov	r6, r7
 8014350:	42be      	cmp	r6, r7
 8014352:	d900      	bls.n	8014356 <__ssputs_r+0x86>
 8014354:	463e      	mov	r6, r7
 8014356:	4632      	mov	r2, r6
 8014358:	6820      	ldr	r0, [r4, #0]
 801435a:	4641      	mov	r1, r8
 801435c:	f7ff fa04 	bl	8013768 <memmove>
 8014360:	68a3      	ldr	r3, [r4, #8]
 8014362:	6822      	ldr	r2, [r4, #0]
 8014364:	1b9b      	subs	r3, r3, r6
 8014366:	4432      	add	r2, r6
 8014368:	60a3      	str	r3, [r4, #8]
 801436a:	6022      	str	r2, [r4, #0]
 801436c:	2000      	movs	r0, #0
 801436e:	e7db      	b.n	8014328 <__ssputs_r+0x58>
 8014370:	462a      	mov	r2, r5
 8014372:	f7ff ff87 	bl	8014284 <_realloc_r>
 8014376:	4606      	mov	r6, r0
 8014378:	2800      	cmp	r0, #0
 801437a:	d1e1      	bne.n	8014340 <__ssputs_r+0x70>
 801437c:	6921      	ldr	r1, [r4, #16]
 801437e:	4650      	mov	r0, sl
 8014380:	f7ff fed6 	bl	8014130 <_free_r>
 8014384:	e7c7      	b.n	8014316 <__ssputs_r+0x46>
	...

08014388 <_svfiprintf_r>:
 8014388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801438c:	4698      	mov	r8, r3
 801438e:	898b      	ldrh	r3, [r1, #12]
 8014390:	061b      	lsls	r3, r3, #24
 8014392:	b09d      	sub	sp, #116	; 0x74
 8014394:	4607      	mov	r7, r0
 8014396:	460d      	mov	r5, r1
 8014398:	4614      	mov	r4, r2
 801439a:	d50e      	bpl.n	80143ba <_svfiprintf_r+0x32>
 801439c:	690b      	ldr	r3, [r1, #16]
 801439e:	b963      	cbnz	r3, 80143ba <_svfiprintf_r+0x32>
 80143a0:	2140      	movs	r1, #64	; 0x40
 80143a2:	f7ff ff15 	bl	80141d0 <_malloc_r>
 80143a6:	6028      	str	r0, [r5, #0]
 80143a8:	6128      	str	r0, [r5, #16]
 80143aa:	b920      	cbnz	r0, 80143b6 <_svfiprintf_r+0x2e>
 80143ac:	230c      	movs	r3, #12
 80143ae:	603b      	str	r3, [r7, #0]
 80143b0:	f04f 30ff 	mov.w	r0, #4294967295
 80143b4:	e0d1      	b.n	801455a <_svfiprintf_r+0x1d2>
 80143b6:	2340      	movs	r3, #64	; 0x40
 80143b8:	616b      	str	r3, [r5, #20]
 80143ba:	2300      	movs	r3, #0
 80143bc:	9309      	str	r3, [sp, #36]	; 0x24
 80143be:	2320      	movs	r3, #32
 80143c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80143c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80143c8:	2330      	movs	r3, #48	; 0x30
 80143ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014574 <_svfiprintf_r+0x1ec>
 80143ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80143d2:	f04f 0901 	mov.w	r9, #1
 80143d6:	4623      	mov	r3, r4
 80143d8:	469a      	mov	sl, r3
 80143da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80143de:	b10a      	cbz	r2, 80143e4 <_svfiprintf_r+0x5c>
 80143e0:	2a25      	cmp	r2, #37	; 0x25
 80143e2:	d1f9      	bne.n	80143d8 <_svfiprintf_r+0x50>
 80143e4:	ebba 0b04 	subs.w	fp, sl, r4
 80143e8:	d00b      	beq.n	8014402 <_svfiprintf_r+0x7a>
 80143ea:	465b      	mov	r3, fp
 80143ec:	4622      	mov	r2, r4
 80143ee:	4629      	mov	r1, r5
 80143f0:	4638      	mov	r0, r7
 80143f2:	f7ff ff6d 	bl	80142d0 <__ssputs_r>
 80143f6:	3001      	adds	r0, #1
 80143f8:	f000 80aa 	beq.w	8014550 <_svfiprintf_r+0x1c8>
 80143fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80143fe:	445a      	add	r2, fp
 8014400:	9209      	str	r2, [sp, #36]	; 0x24
 8014402:	f89a 3000 	ldrb.w	r3, [sl]
 8014406:	2b00      	cmp	r3, #0
 8014408:	f000 80a2 	beq.w	8014550 <_svfiprintf_r+0x1c8>
 801440c:	2300      	movs	r3, #0
 801440e:	f04f 32ff 	mov.w	r2, #4294967295
 8014412:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014416:	f10a 0a01 	add.w	sl, sl, #1
 801441a:	9304      	str	r3, [sp, #16]
 801441c:	9307      	str	r3, [sp, #28]
 801441e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014422:	931a      	str	r3, [sp, #104]	; 0x68
 8014424:	4654      	mov	r4, sl
 8014426:	2205      	movs	r2, #5
 8014428:	f814 1b01 	ldrb.w	r1, [r4], #1
 801442c:	4851      	ldr	r0, [pc, #324]	; (8014574 <_svfiprintf_r+0x1ec>)
 801442e:	f7eb fedf 	bl	80001f0 <memchr>
 8014432:	9a04      	ldr	r2, [sp, #16]
 8014434:	b9d8      	cbnz	r0, 801446e <_svfiprintf_r+0xe6>
 8014436:	06d0      	lsls	r0, r2, #27
 8014438:	bf44      	itt	mi
 801443a:	2320      	movmi	r3, #32
 801443c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014440:	0711      	lsls	r1, r2, #28
 8014442:	bf44      	itt	mi
 8014444:	232b      	movmi	r3, #43	; 0x2b
 8014446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801444a:	f89a 3000 	ldrb.w	r3, [sl]
 801444e:	2b2a      	cmp	r3, #42	; 0x2a
 8014450:	d015      	beq.n	801447e <_svfiprintf_r+0xf6>
 8014452:	9a07      	ldr	r2, [sp, #28]
 8014454:	4654      	mov	r4, sl
 8014456:	2000      	movs	r0, #0
 8014458:	f04f 0c0a 	mov.w	ip, #10
 801445c:	4621      	mov	r1, r4
 801445e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014462:	3b30      	subs	r3, #48	; 0x30
 8014464:	2b09      	cmp	r3, #9
 8014466:	d94e      	bls.n	8014506 <_svfiprintf_r+0x17e>
 8014468:	b1b0      	cbz	r0, 8014498 <_svfiprintf_r+0x110>
 801446a:	9207      	str	r2, [sp, #28]
 801446c:	e014      	b.n	8014498 <_svfiprintf_r+0x110>
 801446e:	eba0 0308 	sub.w	r3, r0, r8
 8014472:	fa09 f303 	lsl.w	r3, r9, r3
 8014476:	4313      	orrs	r3, r2
 8014478:	9304      	str	r3, [sp, #16]
 801447a:	46a2      	mov	sl, r4
 801447c:	e7d2      	b.n	8014424 <_svfiprintf_r+0x9c>
 801447e:	9b03      	ldr	r3, [sp, #12]
 8014480:	1d19      	adds	r1, r3, #4
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	9103      	str	r1, [sp, #12]
 8014486:	2b00      	cmp	r3, #0
 8014488:	bfbb      	ittet	lt
 801448a:	425b      	neglt	r3, r3
 801448c:	f042 0202 	orrlt.w	r2, r2, #2
 8014490:	9307      	strge	r3, [sp, #28]
 8014492:	9307      	strlt	r3, [sp, #28]
 8014494:	bfb8      	it	lt
 8014496:	9204      	strlt	r2, [sp, #16]
 8014498:	7823      	ldrb	r3, [r4, #0]
 801449a:	2b2e      	cmp	r3, #46	; 0x2e
 801449c:	d10c      	bne.n	80144b8 <_svfiprintf_r+0x130>
 801449e:	7863      	ldrb	r3, [r4, #1]
 80144a0:	2b2a      	cmp	r3, #42	; 0x2a
 80144a2:	d135      	bne.n	8014510 <_svfiprintf_r+0x188>
 80144a4:	9b03      	ldr	r3, [sp, #12]
 80144a6:	1d1a      	adds	r2, r3, #4
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	9203      	str	r2, [sp, #12]
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	bfb8      	it	lt
 80144b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80144b4:	3402      	adds	r4, #2
 80144b6:	9305      	str	r3, [sp, #20]
 80144b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014584 <_svfiprintf_r+0x1fc>
 80144bc:	7821      	ldrb	r1, [r4, #0]
 80144be:	2203      	movs	r2, #3
 80144c0:	4650      	mov	r0, sl
 80144c2:	f7eb fe95 	bl	80001f0 <memchr>
 80144c6:	b140      	cbz	r0, 80144da <_svfiprintf_r+0x152>
 80144c8:	2340      	movs	r3, #64	; 0x40
 80144ca:	eba0 000a 	sub.w	r0, r0, sl
 80144ce:	fa03 f000 	lsl.w	r0, r3, r0
 80144d2:	9b04      	ldr	r3, [sp, #16]
 80144d4:	4303      	orrs	r3, r0
 80144d6:	3401      	adds	r4, #1
 80144d8:	9304      	str	r3, [sp, #16]
 80144da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144de:	4826      	ldr	r0, [pc, #152]	; (8014578 <_svfiprintf_r+0x1f0>)
 80144e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80144e4:	2206      	movs	r2, #6
 80144e6:	f7eb fe83 	bl	80001f0 <memchr>
 80144ea:	2800      	cmp	r0, #0
 80144ec:	d038      	beq.n	8014560 <_svfiprintf_r+0x1d8>
 80144ee:	4b23      	ldr	r3, [pc, #140]	; (801457c <_svfiprintf_r+0x1f4>)
 80144f0:	bb1b      	cbnz	r3, 801453a <_svfiprintf_r+0x1b2>
 80144f2:	9b03      	ldr	r3, [sp, #12]
 80144f4:	3307      	adds	r3, #7
 80144f6:	f023 0307 	bic.w	r3, r3, #7
 80144fa:	3308      	adds	r3, #8
 80144fc:	9303      	str	r3, [sp, #12]
 80144fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014500:	4433      	add	r3, r6
 8014502:	9309      	str	r3, [sp, #36]	; 0x24
 8014504:	e767      	b.n	80143d6 <_svfiprintf_r+0x4e>
 8014506:	fb0c 3202 	mla	r2, ip, r2, r3
 801450a:	460c      	mov	r4, r1
 801450c:	2001      	movs	r0, #1
 801450e:	e7a5      	b.n	801445c <_svfiprintf_r+0xd4>
 8014510:	2300      	movs	r3, #0
 8014512:	3401      	adds	r4, #1
 8014514:	9305      	str	r3, [sp, #20]
 8014516:	4619      	mov	r1, r3
 8014518:	f04f 0c0a 	mov.w	ip, #10
 801451c:	4620      	mov	r0, r4
 801451e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014522:	3a30      	subs	r2, #48	; 0x30
 8014524:	2a09      	cmp	r2, #9
 8014526:	d903      	bls.n	8014530 <_svfiprintf_r+0x1a8>
 8014528:	2b00      	cmp	r3, #0
 801452a:	d0c5      	beq.n	80144b8 <_svfiprintf_r+0x130>
 801452c:	9105      	str	r1, [sp, #20]
 801452e:	e7c3      	b.n	80144b8 <_svfiprintf_r+0x130>
 8014530:	fb0c 2101 	mla	r1, ip, r1, r2
 8014534:	4604      	mov	r4, r0
 8014536:	2301      	movs	r3, #1
 8014538:	e7f0      	b.n	801451c <_svfiprintf_r+0x194>
 801453a:	ab03      	add	r3, sp, #12
 801453c:	9300      	str	r3, [sp, #0]
 801453e:	462a      	mov	r2, r5
 8014540:	4b0f      	ldr	r3, [pc, #60]	; (8014580 <_svfiprintf_r+0x1f8>)
 8014542:	a904      	add	r1, sp, #16
 8014544:	4638      	mov	r0, r7
 8014546:	f7fb ff71 	bl	801042c <_printf_float>
 801454a:	1c42      	adds	r2, r0, #1
 801454c:	4606      	mov	r6, r0
 801454e:	d1d6      	bne.n	80144fe <_svfiprintf_r+0x176>
 8014550:	89ab      	ldrh	r3, [r5, #12]
 8014552:	065b      	lsls	r3, r3, #25
 8014554:	f53f af2c 	bmi.w	80143b0 <_svfiprintf_r+0x28>
 8014558:	9809      	ldr	r0, [sp, #36]	; 0x24
 801455a:	b01d      	add	sp, #116	; 0x74
 801455c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014560:	ab03      	add	r3, sp, #12
 8014562:	9300      	str	r3, [sp, #0]
 8014564:	462a      	mov	r2, r5
 8014566:	4b06      	ldr	r3, [pc, #24]	; (8014580 <_svfiprintf_r+0x1f8>)
 8014568:	a904      	add	r1, sp, #16
 801456a:	4638      	mov	r0, r7
 801456c:	f7fc fa02 	bl	8010974 <_printf_i>
 8014570:	e7eb      	b.n	801454a <_svfiprintf_r+0x1c2>
 8014572:	bf00      	nop
 8014574:	080165c8 	.word	0x080165c8
 8014578:	080165d2 	.word	0x080165d2
 801457c:	0801042d 	.word	0x0801042d
 8014580:	080142d1 	.word	0x080142d1
 8014584:	080165ce 	.word	0x080165ce

08014588 <nan>:
 8014588:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014590 <nan+0x8>
 801458c:	4770      	bx	lr
 801458e:	bf00      	nop
 8014590:	00000000 	.word	0x00000000
 8014594:	7ff80000 	.word	0x7ff80000

08014598 <_sbrk_r>:
 8014598:	b538      	push	{r3, r4, r5, lr}
 801459a:	4d06      	ldr	r5, [pc, #24]	; (80145b4 <_sbrk_r+0x1c>)
 801459c:	2300      	movs	r3, #0
 801459e:	4604      	mov	r4, r0
 80145a0:	4608      	mov	r0, r1
 80145a2:	602b      	str	r3, [r5, #0]
 80145a4:	f7ef ff6c 	bl	8004480 <_sbrk>
 80145a8:	1c43      	adds	r3, r0, #1
 80145aa:	d102      	bne.n	80145b2 <_sbrk_r+0x1a>
 80145ac:	682b      	ldr	r3, [r5, #0]
 80145ae:	b103      	cbz	r3, 80145b2 <_sbrk_r+0x1a>
 80145b0:	6023      	str	r3, [r4, #0]
 80145b2:	bd38      	pop	{r3, r4, r5, pc}
 80145b4:	20004a30 	.word	0x20004a30

080145b8 <_raise_r>:
 80145b8:	291f      	cmp	r1, #31
 80145ba:	b538      	push	{r3, r4, r5, lr}
 80145bc:	4604      	mov	r4, r0
 80145be:	460d      	mov	r5, r1
 80145c0:	d904      	bls.n	80145cc <_raise_r+0x14>
 80145c2:	2316      	movs	r3, #22
 80145c4:	6003      	str	r3, [r0, #0]
 80145c6:	f04f 30ff 	mov.w	r0, #4294967295
 80145ca:	bd38      	pop	{r3, r4, r5, pc}
 80145cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80145ce:	b112      	cbz	r2, 80145d6 <_raise_r+0x1e>
 80145d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80145d4:	b94b      	cbnz	r3, 80145ea <_raise_r+0x32>
 80145d6:	4620      	mov	r0, r4
 80145d8:	f000 f830 	bl	801463c <_getpid_r>
 80145dc:	462a      	mov	r2, r5
 80145de:	4601      	mov	r1, r0
 80145e0:	4620      	mov	r0, r4
 80145e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80145e6:	f000 b817 	b.w	8014618 <_kill_r>
 80145ea:	2b01      	cmp	r3, #1
 80145ec:	d00a      	beq.n	8014604 <_raise_r+0x4c>
 80145ee:	1c59      	adds	r1, r3, #1
 80145f0:	d103      	bne.n	80145fa <_raise_r+0x42>
 80145f2:	2316      	movs	r3, #22
 80145f4:	6003      	str	r3, [r0, #0]
 80145f6:	2001      	movs	r0, #1
 80145f8:	e7e7      	b.n	80145ca <_raise_r+0x12>
 80145fa:	2400      	movs	r4, #0
 80145fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014600:	4628      	mov	r0, r5
 8014602:	4798      	blx	r3
 8014604:	2000      	movs	r0, #0
 8014606:	e7e0      	b.n	80145ca <_raise_r+0x12>

08014608 <raise>:
 8014608:	4b02      	ldr	r3, [pc, #8]	; (8014614 <raise+0xc>)
 801460a:	4601      	mov	r1, r0
 801460c:	6818      	ldr	r0, [r3, #0]
 801460e:	f7ff bfd3 	b.w	80145b8 <_raise_r>
 8014612:	bf00      	nop
 8014614:	20000058 	.word	0x20000058

08014618 <_kill_r>:
 8014618:	b538      	push	{r3, r4, r5, lr}
 801461a:	4d07      	ldr	r5, [pc, #28]	; (8014638 <_kill_r+0x20>)
 801461c:	2300      	movs	r3, #0
 801461e:	4604      	mov	r4, r0
 8014620:	4608      	mov	r0, r1
 8014622:	4611      	mov	r1, r2
 8014624:	602b      	str	r3, [r5, #0]
 8014626:	f7ef febf 	bl	80043a8 <_kill>
 801462a:	1c43      	adds	r3, r0, #1
 801462c:	d102      	bne.n	8014634 <_kill_r+0x1c>
 801462e:	682b      	ldr	r3, [r5, #0]
 8014630:	b103      	cbz	r3, 8014634 <_kill_r+0x1c>
 8014632:	6023      	str	r3, [r4, #0]
 8014634:	bd38      	pop	{r3, r4, r5, pc}
 8014636:	bf00      	nop
 8014638:	20004a30 	.word	0x20004a30

0801463c <_getpid_r>:
 801463c:	f7ef beac 	b.w	8004398 <_getpid>

08014640 <__sread>:
 8014640:	b510      	push	{r4, lr}
 8014642:	460c      	mov	r4, r1
 8014644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014648:	f000 f8c6 	bl	80147d8 <_read_r>
 801464c:	2800      	cmp	r0, #0
 801464e:	bfab      	itete	ge
 8014650:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014652:	89a3      	ldrhlt	r3, [r4, #12]
 8014654:	181b      	addge	r3, r3, r0
 8014656:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801465a:	bfac      	ite	ge
 801465c:	6563      	strge	r3, [r4, #84]	; 0x54
 801465e:	81a3      	strhlt	r3, [r4, #12]
 8014660:	bd10      	pop	{r4, pc}

08014662 <__swrite>:
 8014662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014666:	461f      	mov	r7, r3
 8014668:	898b      	ldrh	r3, [r1, #12]
 801466a:	05db      	lsls	r3, r3, #23
 801466c:	4605      	mov	r5, r0
 801466e:	460c      	mov	r4, r1
 8014670:	4616      	mov	r6, r2
 8014672:	d505      	bpl.n	8014680 <__swrite+0x1e>
 8014674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014678:	2302      	movs	r3, #2
 801467a:	2200      	movs	r2, #0
 801467c:	f000 f886 	bl	801478c <_lseek_r>
 8014680:	89a3      	ldrh	r3, [r4, #12]
 8014682:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014686:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801468a:	81a3      	strh	r3, [r4, #12]
 801468c:	4632      	mov	r2, r6
 801468e:	463b      	mov	r3, r7
 8014690:	4628      	mov	r0, r5
 8014692:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014696:	f000 b835 	b.w	8014704 <_write_r>

0801469a <__sseek>:
 801469a:	b510      	push	{r4, lr}
 801469c:	460c      	mov	r4, r1
 801469e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146a2:	f000 f873 	bl	801478c <_lseek_r>
 80146a6:	1c43      	adds	r3, r0, #1
 80146a8:	89a3      	ldrh	r3, [r4, #12]
 80146aa:	bf15      	itete	ne
 80146ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80146ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80146b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80146b6:	81a3      	strheq	r3, [r4, #12]
 80146b8:	bf18      	it	ne
 80146ba:	81a3      	strhne	r3, [r4, #12]
 80146bc:	bd10      	pop	{r4, pc}

080146be <__sclose>:
 80146be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146c2:	f000 b831 	b.w	8014728 <_close_r>

080146c6 <strncmp>:
 80146c6:	b510      	push	{r4, lr}
 80146c8:	b16a      	cbz	r2, 80146e6 <strncmp+0x20>
 80146ca:	3901      	subs	r1, #1
 80146cc:	1884      	adds	r4, r0, r2
 80146ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80146d2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80146d6:	4293      	cmp	r3, r2
 80146d8:	d103      	bne.n	80146e2 <strncmp+0x1c>
 80146da:	42a0      	cmp	r0, r4
 80146dc:	d001      	beq.n	80146e2 <strncmp+0x1c>
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d1f5      	bne.n	80146ce <strncmp+0x8>
 80146e2:	1a98      	subs	r0, r3, r2
 80146e4:	bd10      	pop	{r4, pc}
 80146e6:	4610      	mov	r0, r2
 80146e8:	e7fc      	b.n	80146e4 <strncmp+0x1e>

080146ea <__ascii_wctomb>:
 80146ea:	b149      	cbz	r1, 8014700 <__ascii_wctomb+0x16>
 80146ec:	2aff      	cmp	r2, #255	; 0xff
 80146ee:	bf85      	ittet	hi
 80146f0:	238a      	movhi	r3, #138	; 0x8a
 80146f2:	6003      	strhi	r3, [r0, #0]
 80146f4:	700a      	strbls	r2, [r1, #0]
 80146f6:	f04f 30ff 	movhi.w	r0, #4294967295
 80146fa:	bf98      	it	ls
 80146fc:	2001      	movls	r0, #1
 80146fe:	4770      	bx	lr
 8014700:	4608      	mov	r0, r1
 8014702:	4770      	bx	lr

08014704 <_write_r>:
 8014704:	b538      	push	{r3, r4, r5, lr}
 8014706:	4d07      	ldr	r5, [pc, #28]	; (8014724 <_write_r+0x20>)
 8014708:	4604      	mov	r4, r0
 801470a:	4608      	mov	r0, r1
 801470c:	4611      	mov	r1, r2
 801470e:	2200      	movs	r2, #0
 8014710:	602a      	str	r2, [r5, #0]
 8014712:	461a      	mov	r2, r3
 8014714:	f7ec fc72 	bl	8000ffc <_write>
 8014718:	1c43      	adds	r3, r0, #1
 801471a:	d102      	bne.n	8014722 <_write_r+0x1e>
 801471c:	682b      	ldr	r3, [r5, #0]
 801471e:	b103      	cbz	r3, 8014722 <_write_r+0x1e>
 8014720:	6023      	str	r3, [r4, #0]
 8014722:	bd38      	pop	{r3, r4, r5, pc}
 8014724:	20004a30 	.word	0x20004a30

08014728 <_close_r>:
 8014728:	b538      	push	{r3, r4, r5, lr}
 801472a:	4d06      	ldr	r5, [pc, #24]	; (8014744 <_close_r+0x1c>)
 801472c:	2300      	movs	r3, #0
 801472e:	4604      	mov	r4, r0
 8014730:	4608      	mov	r0, r1
 8014732:	602b      	str	r3, [r5, #0]
 8014734:	f7ef fe6f 	bl	8004416 <_close>
 8014738:	1c43      	adds	r3, r0, #1
 801473a:	d102      	bne.n	8014742 <_close_r+0x1a>
 801473c:	682b      	ldr	r3, [r5, #0]
 801473e:	b103      	cbz	r3, 8014742 <_close_r+0x1a>
 8014740:	6023      	str	r3, [r4, #0]
 8014742:	bd38      	pop	{r3, r4, r5, pc}
 8014744:	20004a30 	.word	0x20004a30

08014748 <_fstat_r>:
 8014748:	b538      	push	{r3, r4, r5, lr}
 801474a:	4d07      	ldr	r5, [pc, #28]	; (8014768 <_fstat_r+0x20>)
 801474c:	2300      	movs	r3, #0
 801474e:	4604      	mov	r4, r0
 8014750:	4608      	mov	r0, r1
 8014752:	4611      	mov	r1, r2
 8014754:	602b      	str	r3, [r5, #0]
 8014756:	f7ef fe6a 	bl	800442e <_fstat>
 801475a:	1c43      	adds	r3, r0, #1
 801475c:	d102      	bne.n	8014764 <_fstat_r+0x1c>
 801475e:	682b      	ldr	r3, [r5, #0]
 8014760:	b103      	cbz	r3, 8014764 <_fstat_r+0x1c>
 8014762:	6023      	str	r3, [r4, #0]
 8014764:	bd38      	pop	{r3, r4, r5, pc}
 8014766:	bf00      	nop
 8014768:	20004a30 	.word	0x20004a30

0801476c <_isatty_r>:
 801476c:	b538      	push	{r3, r4, r5, lr}
 801476e:	4d06      	ldr	r5, [pc, #24]	; (8014788 <_isatty_r+0x1c>)
 8014770:	2300      	movs	r3, #0
 8014772:	4604      	mov	r4, r0
 8014774:	4608      	mov	r0, r1
 8014776:	602b      	str	r3, [r5, #0]
 8014778:	f7ef fe69 	bl	800444e <_isatty>
 801477c:	1c43      	adds	r3, r0, #1
 801477e:	d102      	bne.n	8014786 <_isatty_r+0x1a>
 8014780:	682b      	ldr	r3, [r5, #0]
 8014782:	b103      	cbz	r3, 8014786 <_isatty_r+0x1a>
 8014784:	6023      	str	r3, [r4, #0]
 8014786:	bd38      	pop	{r3, r4, r5, pc}
 8014788:	20004a30 	.word	0x20004a30

0801478c <_lseek_r>:
 801478c:	b538      	push	{r3, r4, r5, lr}
 801478e:	4d07      	ldr	r5, [pc, #28]	; (80147ac <_lseek_r+0x20>)
 8014790:	4604      	mov	r4, r0
 8014792:	4608      	mov	r0, r1
 8014794:	4611      	mov	r1, r2
 8014796:	2200      	movs	r2, #0
 8014798:	602a      	str	r2, [r5, #0]
 801479a:	461a      	mov	r2, r3
 801479c:	f7ef fe62 	bl	8004464 <_lseek>
 80147a0:	1c43      	adds	r3, r0, #1
 80147a2:	d102      	bne.n	80147aa <_lseek_r+0x1e>
 80147a4:	682b      	ldr	r3, [r5, #0]
 80147a6:	b103      	cbz	r3, 80147aa <_lseek_r+0x1e>
 80147a8:	6023      	str	r3, [r4, #0]
 80147aa:	bd38      	pop	{r3, r4, r5, pc}
 80147ac:	20004a30 	.word	0x20004a30

080147b0 <__malloc_lock>:
 80147b0:	4801      	ldr	r0, [pc, #4]	; (80147b8 <__malloc_lock+0x8>)
 80147b2:	f7fe bf58 	b.w	8013666 <__retarget_lock_acquire_recursive>
 80147b6:	bf00      	nop
 80147b8:	20004a28 	.word	0x20004a28

080147bc <__malloc_unlock>:
 80147bc:	4801      	ldr	r0, [pc, #4]	; (80147c4 <__malloc_unlock+0x8>)
 80147be:	f7fe bf53 	b.w	8013668 <__retarget_lock_release_recursive>
 80147c2:	bf00      	nop
 80147c4:	20004a28 	.word	0x20004a28

080147c8 <_malloc_usable_size_r>:
 80147c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80147cc:	1f18      	subs	r0, r3, #4
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	bfbc      	itt	lt
 80147d2:	580b      	ldrlt	r3, [r1, r0]
 80147d4:	18c0      	addlt	r0, r0, r3
 80147d6:	4770      	bx	lr

080147d8 <_read_r>:
 80147d8:	b538      	push	{r3, r4, r5, lr}
 80147da:	4d07      	ldr	r5, [pc, #28]	; (80147f8 <_read_r+0x20>)
 80147dc:	4604      	mov	r4, r0
 80147de:	4608      	mov	r0, r1
 80147e0:	4611      	mov	r1, r2
 80147e2:	2200      	movs	r2, #0
 80147e4:	602a      	str	r2, [r5, #0]
 80147e6:	461a      	mov	r2, r3
 80147e8:	f7ef fdf8 	bl	80043dc <_read>
 80147ec:	1c43      	adds	r3, r0, #1
 80147ee:	d102      	bne.n	80147f6 <_read_r+0x1e>
 80147f0:	682b      	ldr	r3, [r5, #0]
 80147f2:	b103      	cbz	r3, 80147f6 <_read_r+0x1e>
 80147f4:	6023      	str	r3, [r4, #0]
 80147f6:	bd38      	pop	{r3, r4, r5, pc}
 80147f8:	20004a30 	.word	0x20004a30
 80147fc:	00000000 	.word	0x00000000

08014800 <exp>:
 8014800:	b538      	push	{r3, r4, r5, lr}
 8014802:	ed2d 8b02 	vpush	{d8}
 8014806:	ec55 4b10 	vmov	r4, r5, d0
 801480a:	f000 f975 	bl	8014af8 <__ieee754_exp>
 801480e:	4b22      	ldr	r3, [pc, #136]	; (8014898 <exp+0x98>)
 8014810:	eeb0 8a40 	vmov.f32	s16, s0
 8014814:	eef0 8a60 	vmov.f32	s17, s1
 8014818:	f993 3000 	ldrsb.w	r3, [r3]
 801481c:	3301      	adds	r3, #1
 801481e:	d012      	beq.n	8014846 <exp+0x46>
 8014820:	ec45 4b10 	vmov	d0, r4, r5
 8014824:	f001 fa7f 	bl	8015d26 <finite>
 8014828:	b168      	cbz	r0, 8014846 <exp+0x46>
 801482a:	a313      	add	r3, pc, #76	; (adr r3, 8014878 <exp+0x78>)
 801482c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014830:	4620      	mov	r0, r4
 8014832:	4629      	mov	r1, r5
 8014834:	f7ec f978 	bl	8000b28 <__aeabi_dcmpgt>
 8014838:	b160      	cbz	r0, 8014854 <exp+0x54>
 801483a:	f7fb fbab 	bl	800ff94 <__errno>
 801483e:	ed9f 8b10 	vldr	d8, [pc, #64]	; 8014880 <exp+0x80>
 8014842:	2322      	movs	r3, #34	; 0x22
 8014844:	6003      	str	r3, [r0, #0]
 8014846:	eeb0 0a48 	vmov.f32	s0, s16
 801484a:	eef0 0a68 	vmov.f32	s1, s17
 801484e:	ecbd 8b02 	vpop	{d8}
 8014852:	bd38      	pop	{r3, r4, r5, pc}
 8014854:	a30c      	add	r3, pc, #48	; (adr r3, 8014888 <exp+0x88>)
 8014856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801485a:	4620      	mov	r0, r4
 801485c:	4629      	mov	r1, r5
 801485e:	f7ec f945 	bl	8000aec <__aeabi_dcmplt>
 8014862:	2800      	cmp	r0, #0
 8014864:	d0ef      	beq.n	8014846 <exp+0x46>
 8014866:	f7fb fb95 	bl	800ff94 <__errno>
 801486a:	2322      	movs	r3, #34	; 0x22
 801486c:	ed9f 8b08 	vldr	d8, [pc, #32]	; 8014890 <exp+0x90>
 8014870:	6003      	str	r3, [r0, #0]
 8014872:	e7e8      	b.n	8014846 <exp+0x46>
 8014874:	f3af 8000 	nop.w
 8014878:	fefa39ef 	.word	0xfefa39ef
 801487c:	40862e42 	.word	0x40862e42
 8014880:	00000000 	.word	0x00000000
 8014884:	7ff00000 	.word	0x7ff00000
 8014888:	d52d3051 	.word	0xd52d3051
 801488c:	c0874910 	.word	0xc0874910
	...
 8014898:	2000022c 	.word	0x2000022c
 801489c:	00000000 	.word	0x00000000

080148a0 <log>:
 80148a0:	b538      	push	{r3, r4, r5, lr}
 80148a2:	ed2d 8b02 	vpush	{d8}
 80148a6:	ec55 4b10 	vmov	r4, r5, d0
 80148aa:	f000 faa1 	bl	8014df0 <__ieee754_log>
 80148ae:	4b1e      	ldr	r3, [pc, #120]	; (8014928 <log+0x88>)
 80148b0:	eeb0 8a40 	vmov.f32	s16, s0
 80148b4:	eef0 8a60 	vmov.f32	s17, s1
 80148b8:	f993 3000 	ldrsb.w	r3, [r3]
 80148bc:	3301      	adds	r3, #1
 80148be:	d01a      	beq.n	80148f6 <log+0x56>
 80148c0:	4622      	mov	r2, r4
 80148c2:	462b      	mov	r3, r5
 80148c4:	4620      	mov	r0, r4
 80148c6:	4629      	mov	r1, r5
 80148c8:	f7ec f938 	bl	8000b3c <__aeabi_dcmpun>
 80148cc:	b998      	cbnz	r0, 80148f6 <log+0x56>
 80148ce:	2200      	movs	r2, #0
 80148d0:	2300      	movs	r3, #0
 80148d2:	4620      	mov	r0, r4
 80148d4:	4629      	mov	r1, r5
 80148d6:	f7ec f927 	bl	8000b28 <__aeabi_dcmpgt>
 80148da:	b960      	cbnz	r0, 80148f6 <log+0x56>
 80148dc:	2200      	movs	r2, #0
 80148de:	2300      	movs	r3, #0
 80148e0:	4620      	mov	r0, r4
 80148e2:	4629      	mov	r1, r5
 80148e4:	f7ec f8f8 	bl	8000ad8 <__aeabi_dcmpeq>
 80148e8:	b160      	cbz	r0, 8014904 <log+0x64>
 80148ea:	f7fb fb53 	bl	800ff94 <__errno>
 80148ee:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 8014920 <log+0x80>
 80148f2:	2322      	movs	r3, #34	; 0x22
 80148f4:	6003      	str	r3, [r0, #0]
 80148f6:	eeb0 0a48 	vmov.f32	s0, s16
 80148fa:	eef0 0a68 	vmov.f32	s1, s17
 80148fe:	ecbd 8b02 	vpop	{d8}
 8014902:	bd38      	pop	{r3, r4, r5, pc}
 8014904:	f7fb fb46 	bl	800ff94 <__errno>
 8014908:	ecbd 8b02 	vpop	{d8}
 801490c:	2321      	movs	r3, #33	; 0x21
 801490e:	6003      	str	r3, [r0, #0]
 8014910:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014914:	4805      	ldr	r0, [pc, #20]	; (801492c <log+0x8c>)
 8014916:	f7ff be37 	b.w	8014588 <nan>
 801491a:	bf00      	nop
 801491c:	f3af 8000 	nop.w
 8014920:	00000000 	.word	0x00000000
 8014924:	fff00000 	.word	0xfff00000
 8014928:	2000022c 	.word	0x2000022c
 801492c:	080164bf 	.word	0x080164bf

08014930 <pow>:
 8014930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014934:	ec59 8b10 	vmov	r8, r9, d0
 8014938:	ec57 6b11 	vmov	r6, r7, d1
 801493c:	f000 fc14 	bl	8015168 <__ieee754_pow>
 8014940:	4b4e      	ldr	r3, [pc, #312]	; (8014a7c <pow+0x14c>)
 8014942:	f993 3000 	ldrsb.w	r3, [r3]
 8014946:	3301      	adds	r3, #1
 8014948:	ec55 4b10 	vmov	r4, r5, d0
 801494c:	d015      	beq.n	801497a <pow+0x4a>
 801494e:	4632      	mov	r2, r6
 8014950:	463b      	mov	r3, r7
 8014952:	4630      	mov	r0, r6
 8014954:	4639      	mov	r1, r7
 8014956:	f7ec f8f1 	bl	8000b3c <__aeabi_dcmpun>
 801495a:	b970      	cbnz	r0, 801497a <pow+0x4a>
 801495c:	4642      	mov	r2, r8
 801495e:	464b      	mov	r3, r9
 8014960:	4640      	mov	r0, r8
 8014962:	4649      	mov	r1, r9
 8014964:	f7ec f8ea 	bl	8000b3c <__aeabi_dcmpun>
 8014968:	2200      	movs	r2, #0
 801496a:	2300      	movs	r3, #0
 801496c:	b148      	cbz	r0, 8014982 <pow+0x52>
 801496e:	4630      	mov	r0, r6
 8014970:	4639      	mov	r1, r7
 8014972:	f7ec f8b1 	bl	8000ad8 <__aeabi_dcmpeq>
 8014976:	2800      	cmp	r0, #0
 8014978:	d17d      	bne.n	8014a76 <pow+0x146>
 801497a:	ec45 4b10 	vmov	d0, r4, r5
 801497e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014982:	4640      	mov	r0, r8
 8014984:	4649      	mov	r1, r9
 8014986:	f7ec f8a7 	bl	8000ad8 <__aeabi_dcmpeq>
 801498a:	b1e0      	cbz	r0, 80149c6 <pow+0x96>
 801498c:	2200      	movs	r2, #0
 801498e:	2300      	movs	r3, #0
 8014990:	4630      	mov	r0, r6
 8014992:	4639      	mov	r1, r7
 8014994:	f7ec f8a0 	bl	8000ad8 <__aeabi_dcmpeq>
 8014998:	2800      	cmp	r0, #0
 801499a:	d16c      	bne.n	8014a76 <pow+0x146>
 801499c:	ec47 6b10 	vmov	d0, r6, r7
 80149a0:	f001 f9c1 	bl	8015d26 <finite>
 80149a4:	2800      	cmp	r0, #0
 80149a6:	d0e8      	beq.n	801497a <pow+0x4a>
 80149a8:	2200      	movs	r2, #0
 80149aa:	2300      	movs	r3, #0
 80149ac:	4630      	mov	r0, r6
 80149ae:	4639      	mov	r1, r7
 80149b0:	f7ec f89c 	bl	8000aec <__aeabi_dcmplt>
 80149b4:	2800      	cmp	r0, #0
 80149b6:	d0e0      	beq.n	801497a <pow+0x4a>
 80149b8:	f7fb faec 	bl	800ff94 <__errno>
 80149bc:	2321      	movs	r3, #33	; 0x21
 80149be:	6003      	str	r3, [r0, #0]
 80149c0:	2400      	movs	r4, #0
 80149c2:	4d2f      	ldr	r5, [pc, #188]	; (8014a80 <pow+0x150>)
 80149c4:	e7d9      	b.n	801497a <pow+0x4a>
 80149c6:	ec45 4b10 	vmov	d0, r4, r5
 80149ca:	f001 f9ac 	bl	8015d26 <finite>
 80149ce:	bbb8      	cbnz	r0, 8014a40 <pow+0x110>
 80149d0:	ec49 8b10 	vmov	d0, r8, r9
 80149d4:	f001 f9a7 	bl	8015d26 <finite>
 80149d8:	b390      	cbz	r0, 8014a40 <pow+0x110>
 80149da:	ec47 6b10 	vmov	d0, r6, r7
 80149de:	f001 f9a2 	bl	8015d26 <finite>
 80149e2:	b368      	cbz	r0, 8014a40 <pow+0x110>
 80149e4:	4622      	mov	r2, r4
 80149e6:	462b      	mov	r3, r5
 80149e8:	4620      	mov	r0, r4
 80149ea:	4629      	mov	r1, r5
 80149ec:	f7ec f8a6 	bl	8000b3c <__aeabi_dcmpun>
 80149f0:	b160      	cbz	r0, 8014a0c <pow+0xdc>
 80149f2:	f7fb facf 	bl	800ff94 <__errno>
 80149f6:	2321      	movs	r3, #33	; 0x21
 80149f8:	6003      	str	r3, [r0, #0]
 80149fa:	2200      	movs	r2, #0
 80149fc:	2300      	movs	r3, #0
 80149fe:	4610      	mov	r0, r2
 8014a00:	4619      	mov	r1, r3
 8014a02:	f7eb ff2b 	bl	800085c <__aeabi_ddiv>
 8014a06:	4604      	mov	r4, r0
 8014a08:	460d      	mov	r5, r1
 8014a0a:	e7b6      	b.n	801497a <pow+0x4a>
 8014a0c:	f7fb fac2 	bl	800ff94 <__errno>
 8014a10:	2322      	movs	r3, #34	; 0x22
 8014a12:	6003      	str	r3, [r0, #0]
 8014a14:	2200      	movs	r2, #0
 8014a16:	2300      	movs	r3, #0
 8014a18:	4640      	mov	r0, r8
 8014a1a:	4649      	mov	r1, r9
 8014a1c:	f7ec f866 	bl	8000aec <__aeabi_dcmplt>
 8014a20:	2400      	movs	r4, #0
 8014a22:	b158      	cbz	r0, 8014a3c <pow+0x10c>
 8014a24:	ec47 6b10 	vmov	d0, r6, r7
 8014a28:	f001 f988 	bl	8015d3c <rint>
 8014a2c:	4632      	mov	r2, r6
 8014a2e:	ec51 0b10 	vmov	r0, r1, d0
 8014a32:	463b      	mov	r3, r7
 8014a34:	f7ec f850 	bl	8000ad8 <__aeabi_dcmpeq>
 8014a38:	2800      	cmp	r0, #0
 8014a3a:	d0c2      	beq.n	80149c2 <pow+0x92>
 8014a3c:	4d11      	ldr	r5, [pc, #68]	; (8014a84 <pow+0x154>)
 8014a3e:	e79c      	b.n	801497a <pow+0x4a>
 8014a40:	2200      	movs	r2, #0
 8014a42:	2300      	movs	r3, #0
 8014a44:	4620      	mov	r0, r4
 8014a46:	4629      	mov	r1, r5
 8014a48:	f7ec f846 	bl	8000ad8 <__aeabi_dcmpeq>
 8014a4c:	2800      	cmp	r0, #0
 8014a4e:	d094      	beq.n	801497a <pow+0x4a>
 8014a50:	ec49 8b10 	vmov	d0, r8, r9
 8014a54:	f001 f967 	bl	8015d26 <finite>
 8014a58:	2800      	cmp	r0, #0
 8014a5a:	d08e      	beq.n	801497a <pow+0x4a>
 8014a5c:	ec47 6b10 	vmov	d0, r6, r7
 8014a60:	f001 f961 	bl	8015d26 <finite>
 8014a64:	2800      	cmp	r0, #0
 8014a66:	d088      	beq.n	801497a <pow+0x4a>
 8014a68:	f7fb fa94 	bl	800ff94 <__errno>
 8014a6c:	2322      	movs	r3, #34	; 0x22
 8014a6e:	6003      	str	r3, [r0, #0]
 8014a70:	2400      	movs	r4, #0
 8014a72:	2500      	movs	r5, #0
 8014a74:	e781      	b.n	801497a <pow+0x4a>
 8014a76:	4d04      	ldr	r5, [pc, #16]	; (8014a88 <pow+0x158>)
 8014a78:	2400      	movs	r4, #0
 8014a7a:	e77e      	b.n	801497a <pow+0x4a>
 8014a7c:	2000022c 	.word	0x2000022c
 8014a80:	fff00000 	.word	0xfff00000
 8014a84:	7ff00000 	.word	0x7ff00000
 8014a88:	3ff00000 	.word	0x3ff00000

08014a8c <sqrt>:
 8014a8c:	b538      	push	{r3, r4, r5, lr}
 8014a8e:	ed2d 8b02 	vpush	{d8}
 8014a92:	ec55 4b10 	vmov	r4, r5, d0
 8014a96:	f001 f889 	bl	8015bac <__ieee754_sqrt>
 8014a9a:	4b15      	ldr	r3, [pc, #84]	; (8014af0 <sqrt+0x64>)
 8014a9c:	eeb0 8a40 	vmov.f32	s16, s0
 8014aa0:	eef0 8a60 	vmov.f32	s17, s1
 8014aa4:	f993 3000 	ldrsb.w	r3, [r3]
 8014aa8:	3301      	adds	r3, #1
 8014aaa:	d019      	beq.n	8014ae0 <sqrt+0x54>
 8014aac:	4622      	mov	r2, r4
 8014aae:	462b      	mov	r3, r5
 8014ab0:	4620      	mov	r0, r4
 8014ab2:	4629      	mov	r1, r5
 8014ab4:	f7ec f842 	bl	8000b3c <__aeabi_dcmpun>
 8014ab8:	b990      	cbnz	r0, 8014ae0 <sqrt+0x54>
 8014aba:	2200      	movs	r2, #0
 8014abc:	2300      	movs	r3, #0
 8014abe:	4620      	mov	r0, r4
 8014ac0:	4629      	mov	r1, r5
 8014ac2:	f7ec f813 	bl	8000aec <__aeabi_dcmplt>
 8014ac6:	b158      	cbz	r0, 8014ae0 <sqrt+0x54>
 8014ac8:	f7fb fa64 	bl	800ff94 <__errno>
 8014acc:	2321      	movs	r3, #33	; 0x21
 8014ace:	6003      	str	r3, [r0, #0]
 8014ad0:	2200      	movs	r2, #0
 8014ad2:	2300      	movs	r3, #0
 8014ad4:	4610      	mov	r0, r2
 8014ad6:	4619      	mov	r1, r3
 8014ad8:	f7eb fec0 	bl	800085c <__aeabi_ddiv>
 8014adc:	ec41 0b18 	vmov	d8, r0, r1
 8014ae0:	eeb0 0a48 	vmov.f32	s0, s16
 8014ae4:	eef0 0a68 	vmov.f32	s1, s17
 8014ae8:	ecbd 8b02 	vpop	{d8}
 8014aec:	bd38      	pop	{r3, r4, r5, pc}
 8014aee:	bf00      	nop
 8014af0:	2000022c 	.word	0x2000022c
 8014af4:	00000000 	.word	0x00000000

08014af8 <__ieee754_exp>:
 8014af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014afc:	ec55 4b10 	vmov	r4, r5, d0
 8014b00:	49b1      	ldr	r1, [pc, #708]	; (8014dc8 <__ieee754_exp+0x2d0>)
 8014b02:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014b06:	428b      	cmp	r3, r1
 8014b08:	ed2d 8b04 	vpush	{d8-d9}
 8014b0c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8014b10:	d937      	bls.n	8014b82 <__ieee754_exp+0x8a>
 8014b12:	49ae      	ldr	r1, [pc, #696]	; (8014dcc <__ieee754_exp+0x2d4>)
 8014b14:	428b      	cmp	r3, r1
 8014b16:	d916      	bls.n	8014b46 <__ieee754_exp+0x4e>
 8014b18:	ee10 3a10 	vmov	r3, s0
 8014b1c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8014b20:	4313      	orrs	r3, r2
 8014b22:	d009      	beq.n	8014b38 <__ieee754_exp+0x40>
 8014b24:	ee10 2a10 	vmov	r2, s0
 8014b28:	462b      	mov	r3, r5
 8014b2a:	4620      	mov	r0, r4
 8014b2c:	4629      	mov	r1, r5
 8014b2e:	f7eb fbb5 	bl	800029c <__adddf3>
 8014b32:	4604      	mov	r4, r0
 8014b34:	460d      	mov	r5, r1
 8014b36:	e000      	b.n	8014b3a <__ieee754_exp+0x42>
 8014b38:	bb06      	cbnz	r6, 8014b7c <__ieee754_exp+0x84>
 8014b3a:	ecbd 8b04 	vpop	{d8-d9}
 8014b3e:	ec45 4b10 	vmov	d0, r4, r5
 8014b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b46:	a38a      	add	r3, pc, #552	; (adr r3, 8014d70 <__ieee754_exp+0x278>)
 8014b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b4c:	ee10 0a10 	vmov	r0, s0
 8014b50:	4629      	mov	r1, r5
 8014b52:	f7eb ffe9 	bl	8000b28 <__aeabi_dcmpgt>
 8014b56:	b138      	cbz	r0, 8014b68 <__ieee754_exp+0x70>
 8014b58:	a387      	add	r3, pc, #540	; (adr r3, 8014d78 <__ieee754_exp+0x280>)
 8014b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b5e:	4610      	mov	r0, r2
 8014b60:	4619      	mov	r1, r3
 8014b62:	f7eb fd51 	bl	8000608 <__aeabi_dmul>
 8014b66:	e7e4      	b.n	8014b32 <__ieee754_exp+0x3a>
 8014b68:	a385      	add	r3, pc, #532	; (adr r3, 8014d80 <__ieee754_exp+0x288>)
 8014b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b6e:	4620      	mov	r0, r4
 8014b70:	4629      	mov	r1, r5
 8014b72:	f7eb ffbb 	bl	8000aec <__aeabi_dcmplt>
 8014b76:	2800      	cmp	r0, #0
 8014b78:	f000 8087 	beq.w	8014c8a <__ieee754_exp+0x192>
 8014b7c:	2400      	movs	r4, #0
 8014b7e:	2500      	movs	r5, #0
 8014b80:	e7db      	b.n	8014b3a <__ieee754_exp+0x42>
 8014b82:	4a93      	ldr	r2, [pc, #588]	; (8014dd0 <__ieee754_exp+0x2d8>)
 8014b84:	4293      	cmp	r3, r2
 8014b86:	f240 80ac 	bls.w	8014ce2 <__ieee754_exp+0x1ea>
 8014b8a:	4a92      	ldr	r2, [pc, #584]	; (8014dd4 <__ieee754_exp+0x2dc>)
 8014b8c:	4293      	cmp	r3, r2
 8014b8e:	d87c      	bhi.n	8014c8a <__ieee754_exp+0x192>
 8014b90:	4b91      	ldr	r3, [pc, #580]	; (8014dd8 <__ieee754_exp+0x2e0>)
 8014b92:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b9a:	ee10 0a10 	vmov	r0, s0
 8014b9e:	4629      	mov	r1, r5
 8014ba0:	f7eb fb7a 	bl	8000298 <__aeabi_dsub>
 8014ba4:	4b8d      	ldr	r3, [pc, #564]	; (8014ddc <__ieee754_exp+0x2e4>)
 8014ba6:	00f7      	lsls	r7, r6, #3
 8014ba8:	443b      	add	r3, r7
 8014baa:	ed93 7b00 	vldr	d7, [r3]
 8014bae:	f1c6 0a01 	rsb	sl, r6, #1
 8014bb2:	4680      	mov	r8, r0
 8014bb4:	4689      	mov	r9, r1
 8014bb6:	ebaa 0a06 	sub.w	sl, sl, r6
 8014bba:	eeb0 8a47 	vmov.f32	s16, s14
 8014bbe:	eef0 8a67 	vmov.f32	s17, s15
 8014bc2:	ec53 2b18 	vmov	r2, r3, d8
 8014bc6:	4640      	mov	r0, r8
 8014bc8:	4649      	mov	r1, r9
 8014bca:	f7eb fb65 	bl	8000298 <__aeabi_dsub>
 8014bce:	4604      	mov	r4, r0
 8014bd0:	460d      	mov	r5, r1
 8014bd2:	4622      	mov	r2, r4
 8014bd4:	462b      	mov	r3, r5
 8014bd6:	4620      	mov	r0, r4
 8014bd8:	4629      	mov	r1, r5
 8014bda:	f7eb fd15 	bl	8000608 <__aeabi_dmul>
 8014bde:	a36a      	add	r3, pc, #424	; (adr r3, 8014d88 <__ieee754_exp+0x290>)
 8014be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014be4:	4606      	mov	r6, r0
 8014be6:	460f      	mov	r7, r1
 8014be8:	f7eb fd0e 	bl	8000608 <__aeabi_dmul>
 8014bec:	a368      	add	r3, pc, #416	; (adr r3, 8014d90 <__ieee754_exp+0x298>)
 8014bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bf2:	f7eb fb51 	bl	8000298 <__aeabi_dsub>
 8014bf6:	4632      	mov	r2, r6
 8014bf8:	463b      	mov	r3, r7
 8014bfa:	f7eb fd05 	bl	8000608 <__aeabi_dmul>
 8014bfe:	a366      	add	r3, pc, #408	; (adr r3, 8014d98 <__ieee754_exp+0x2a0>)
 8014c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c04:	f7eb fb4a 	bl	800029c <__adddf3>
 8014c08:	4632      	mov	r2, r6
 8014c0a:	463b      	mov	r3, r7
 8014c0c:	f7eb fcfc 	bl	8000608 <__aeabi_dmul>
 8014c10:	a363      	add	r3, pc, #396	; (adr r3, 8014da0 <__ieee754_exp+0x2a8>)
 8014c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c16:	f7eb fb3f 	bl	8000298 <__aeabi_dsub>
 8014c1a:	4632      	mov	r2, r6
 8014c1c:	463b      	mov	r3, r7
 8014c1e:	f7eb fcf3 	bl	8000608 <__aeabi_dmul>
 8014c22:	a361      	add	r3, pc, #388	; (adr r3, 8014da8 <__ieee754_exp+0x2b0>)
 8014c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c28:	f7eb fb38 	bl	800029c <__adddf3>
 8014c2c:	4632      	mov	r2, r6
 8014c2e:	463b      	mov	r3, r7
 8014c30:	f7eb fcea 	bl	8000608 <__aeabi_dmul>
 8014c34:	4602      	mov	r2, r0
 8014c36:	460b      	mov	r3, r1
 8014c38:	4620      	mov	r0, r4
 8014c3a:	4629      	mov	r1, r5
 8014c3c:	f7eb fb2c 	bl	8000298 <__aeabi_dsub>
 8014c40:	4602      	mov	r2, r0
 8014c42:	460b      	mov	r3, r1
 8014c44:	4606      	mov	r6, r0
 8014c46:	460f      	mov	r7, r1
 8014c48:	4620      	mov	r0, r4
 8014c4a:	4629      	mov	r1, r5
 8014c4c:	f7eb fcdc 	bl	8000608 <__aeabi_dmul>
 8014c50:	ec41 0b19 	vmov	d9, r0, r1
 8014c54:	f1ba 0f00 	cmp.w	sl, #0
 8014c58:	d15d      	bne.n	8014d16 <__ieee754_exp+0x21e>
 8014c5a:	2200      	movs	r2, #0
 8014c5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014c60:	4630      	mov	r0, r6
 8014c62:	4639      	mov	r1, r7
 8014c64:	f7eb fb18 	bl	8000298 <__aeabi_dsub>
 8014c68:	4602      	mov	r2, r0
 8014c6a:	460b      	mov	r3, r1
 8014c6c:	ec51 0b19 	vmov	r0, r1, d9
 8014c70:	f7eb fdf4 	bl	800085c <__aeabi_ddiv>
 8014c74:	4622      	mov	r2, r4
 8014c76:	462b      	mov	r3, r5
 8014c78:	f7eb fb0e 	bl	8000298 <__aeabi_dsub>
 8014c7c:	4602      	mov	r2, r0
 8014c7e:	460b      	mov	r3, r1
 8014c80:	2000      	movs	r0, #0
 8014c82:	4957      	ldr	r1, [pc, #348]	; (8014de0 <__ieee754_exp+0x2e8>)
 8014c84:	f7eb fb08 	bl	8000298 <__aeabi_dsub>
 8014c88:	e753      	b.n	8014b32 <__ieee754_exp+0x3a>
 8014c8a:	4856      	ldr	r0, [pc, #344]	; (8014de4 <__ieee754_exp+0x2ec>)
 8014c8c:	a348      	add	r3, pc, #288	; (adr r3, 8014db0 <__ieee754_exp+0x2b8>)
 8014c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c92:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8014c96:	4629      	mov	r1, r5
 8014c98:	4620      	mov	r0, r4
 8014c9a:	f7eb fcb5 	bl	8000608 <__aeabi_dmul>
 8014c9e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014ca2:	f7eb fafb 	bl	800029c <__adddf3>
 8014ca6:	f7eb ff5f 	bl	8000b68 <__aeabi_d2iz>
 8014caa:	4682      	mov	sl, r0
 8014cac:	f7eb fc42 	bl	8000534 <__aeabi_i2d>
 8014cb0:	a341      	add	r3, pc, #260	; (adr r3, 8014db8 <__ieee754_exp+0x2c0>)
 8014cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cb6:	4606      	mov	r6, r0
 8014cb8:	460f      	mov	r7, r1
 8014cba:	f7eb fca5 	bl	8000608 <__aeabi_dmul>
 8014cbe:	4602      	mov	r2, r0
 8014cc0:	460b      	mov	r3, r1
 8014cc2:	4620      	mov	r0, r4
 8014cc4:	4629      	mov	r1, r5
 8014cc6:	f7eb fae7 	bl	8000298 <__aeabi_dsub>
 8014cca:	a33d      	add	r3, pc, #244	; (adr r3, 8014dc0 <__ieee754_exp+0x2c8>)
 8014ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cd0:	4680      	mov	r8, r0
 8014cd2:	4689      	mov	r9, r1
 8014cd4:	4630      	mov	r0, r6
 8014cd6:	4639      	mov	r1, r7
 8014cd8:	f7eb fc96 	bl	8000608 <__aeabi_dmul>
 8014cdc:	ec41 0b18 	vmov	d8, r0, r1
 8014ce0:	e76f      	b.n	8014bc2 <__ieee754_exp+0xca>
 8014ce2:	4a41      	ldr	r2, [pc, #260]	; (8014de8 <__ieee754_exp+0x2f0>)
 8014ce4:	4293      	cmp	r3, r2
 8014ce6:	d811      	bhi.n	8014d0c <__ieee754_exp+0x214>
 8014ce8:	a323      	add	r3, pc, #140	; (adr r3, 8014d78 <__ieee754_exp+0x280>)
 8014cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cee:	ee10 0a10 	vmov	r0, s0
 8014cf2:	4629      	mov	r1, r5
 8014cf4:	f7eb fad2 	bl	800029c <__adddf3>
 8014cf8:	4b39      	ldr	r3, [pc, #228]	; (8014de0 <__ieee754_exp+0x2e8>)
 8014cfa:	2200      	movs	r2, #0
 8014cfc:	f7eb ff14 	bl	8000b28 <__aeabi_dcmpgt>
 8014d00:	b138      	cbz	r0, 8014d12 <__ieee754_exp+0x21a>
 8014d02:	4b37      	ldr	r3, [pc, #220]	; (8014de0 <__ieee754_exp+0x2e8>)
 8014d04:	2200      	movs	r2, #0
 8014d06:	4620      	mov	r0, r4
 8014d08:	4629      	mov	r1, r5
 8014d0a:	e710      	b.n	8014b2e <__ieee754_exp+0x36>
 8014d0c:	f04f 0a00 	mov.w	sl, #0
 8014d10:	e75f      	b.n	8014bd2 <__ieee754_exp+0xda>
 8014d12:	4682      	mov	sl, r0
 8014d14:	e75d      	b.n	8014bd2 <__ieee754_exp+0xda>
 8014d16:	4632      	mov	r2, r6
 8014d18:	463b      	mov	r3, r7
 8014d1a:	2000      	movs	r0, #0
 8014d1c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8014d20:	f7eb faba 	bl	8000298 <__aeabi_dsub>
 8014d24:	4602      	mov	r2, r0
 8014d26:	460b      	mov	r3, r1
 8014d28:	ec51 0b19 	vmov	r0, r1, d9
 8014d2c:	f7eb fd96 	bl	800085c <__aeabi_ddiv>
 8014d30:	4602      	mov	r2, r0
 8014d32:	460b      	mov	r3, r1
 8014d34:	ec51 0b18 	vmov	r0, r1, d8
 8014d38:	f7eb faae 	bl	8000298 <__aeabi_dsub>
 8014d3c:	4642      	mov	r2, r8
 8014d3e:	464b      	mov	r3, r9
 8014d40:	f7eb faaa 	bl	8000298 <__aeabi_dsub>
 8014d44:	4602      	mov	r2, r0
 8014d46:	460b      	mov	r3, r1
 8014d48:	2000      	movs	r0, #0
 8014d4a:	4925      	ldr	r1, [pc, #148]	; (8014de0 <__ieee754_exp+0x2e8>)
 8014d4c:	f7eb faa4 	bl	8000298 <__aeabi_dsub>
 8014d50:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8014d54:	4592      	cmp	sl, r2
 8014d56:	db02      	blt.n	8014d5e <__ieee754_exp+0x266>
 8014d58:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8014d5c:	e6e9      	b.n	8014b32 <__ieee754_exp+0x3a>
 8014d5e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8014d62:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8014d66:	2200      	movs	r2, #0
 8014d68:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8014d6c:	e6f9      	b.n	8014b62 <__ieee754_exp+0x6a>
 8014d6e:	bf00      	nop
 8014d70:	fefa39ef 	.word	0xfefa39ef
 8014d74:	40862e42 	.word	0x40862e42
 8014d78:	8800759c 	.word	0x8800759c
 8014d7c:	7e37e43c 	.word	0x7e37e43c
 8014d80:	d52d3051 	.word	0xd52d3051
 8014d84:	c0874910 	.word	0xc0874910
 8014d88:	72bea4d0 	.word	0x72bea4d0
 8014d8c:	3e663769 	.word	0x3e663769
 8014d90:	c5d26bf1 	.word	0xc5d26bf1
 8014d94:	3ebbbd41 	.word	0x3ebbbd41
 8014d98:	af25de2c 	.word	0xaf25de2c
 8014d9c:	3f11566a 	.word	0x3f11566a
 8014da0:	16bebd93 	.word	0x16bebd93
 8014da4:	3f66c16c 	.word	0x3f66c16c
 8014da8:	5555553e 	.word	0x5555553e
 8014dac:	3fc55555 	.word	0x3fc55555
 8014db0:	652b82fe 	.word	0x652b82fe
 8014db4:	3ff71547 	.word	0x3ff71547
 8014db8:	fee00000 	.word	0xfee00000
 8014dbc:	3fe62e42 	.word	0x3fe62e42
 8014dc0:	35793c76 	.word	0x35793c76
 8014dc4:	3dea39ef 	.word	0x3dea39ef
 8014dc8:	40862e41 	.word	0x40862e41
 8014dcc:	7fefffff 	.word	0x7fefffff
 8014dd0:	3fd62e42 	.word	0x3fd62e42
 8014dd4:	3ff0a2b1 	.word	0x3ff0a2b1
 8014dd8:	08016950 	.word	0x08016950
 8014ddc:	08016960 	.word	0x08016960
 8014de0:	3ff00000 	.word	0x3ff00000
 8014de4:	08016940 	.word	0x08016940
 8014de8:	3e2fffff 	.word	0x3e2fffff
 8014dec:	00000000 	.word	0x00000000

08014df0 <__ieee754_log>:
 8014df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014df4:	ec51 0b10 	vmov	r0, r1, d0
 8014df8:	ed2d 8b04 	vpush	{d8-d9}
 8014dfc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8014e00:	b083      	sub	sp, #12
 8014e02:	460d      	mov	r5, r1
 8014e04:	da29      	bge.n	8014e5a <__ieee754_log+0x6a>
 8014e06:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014e0a:	4303      	orrs	r3, r0
 8014e0c:	ee10 2a10 	vmov	r2, s0
 8014e10:	d10c      	bne.n	8014e2c <__ieee754_log+0x3c>
 8014e12:	49cf      	ldr	r1, [pc, #828]	; (8015150 <__ieee754_log+0x360>)
 8014e14:	2200      	movs	r2, #0
 8014e16:	2300      	movs	r3, #0
 8014e18:	2000      	movs	r0, #0
 8014e1a:	f7eb fd1f 	bl	800085c <__aeabi_ddiv>
 8014e1e:	ec41 0b10 	vmov	d0, r0, r1
 8014e22:	b003      	add	sp, #12
 8014e24:	ecbd 8b04 	vpop	{d8-d9}
 8014e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e2c:	2900      	cmp	r1, #0
 8014e2e:	da05      	bge.n	8014e3c <__ieee754_log+0x4c>
 8014e30:	460b      	mov	r3, r1
 8014e32:	f7eb fa31 	bl	8000298 <__aeabi_dsub>
 8014e36:	2200      	movs	r2, #0
 8014e38:	2300      	movs	r3, #0
 8014e3a:	e7ee      	b.n	8014e1a <__ieee754_log+0x2a>
 8014e3c:	4bc5      	ldr	r3, [pc, #788]	; (8015154 <__ieee754_log+0x364>)
 8014e3e:	2200      	movs	r2, #0
 8014e40:	f7eb fbe2 	bl	8000608 <__aeabi_dmul>
 8014e44:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8014e48:	460d      	mov	r5, r1
 8014e4a:	4ac3      	ldr	r2, [pc, #780]	; (8015158 <__ieee754_log+0x368>)
 8014e4c:	4295      	cmp	r5, r2
 8014e4e:	dd06      	ble.n	8014e5e <__ieee754_log+0x6e>
 8014e50:	4602      	mov	r2, r0
 8014e52:	460b      	mov	r3, r1
 8014e54:	f7eb fa22 	bl	800029c <__adddf3>
 8014e58:	e7e1      	b.n	8014e1e <__ieee754_log+0x2e>
 8014e5a:	2300      	movs	r3, #0
 8014e5c:	e7f5      	b.n	8014e4a <__ieee754_log+0x5a>
 8014e5e:	152c      	asrs	r4, r5, #20
 8014e60:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8014e64:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8014e68:	441c      	add	r4, r3
 8014e6a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8014e6e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8014e72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014e76:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8014e7a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8014e7e:	ea42 0105 	orr.w	r1, r2, r5
 8014e82:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8014e86:	2200      	movs	r2, #0
 8014e88:	4bb4      	ldr	r3, [pc, #720]	; (801515c <__ieee754_log+0x36c>)
 8014e8a:	f7eb fa05 	bl	8000298 <__aeabi_dsub>
 8014e8e:	1cab      	adds	r3, r5, #2
 8014e90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014e94:	2b02      	cmp	r3, #2
 8014e96:	4682      	mov	sl, r0
 8014e98:	468b      	mov	fp, r1
 8014e9a:	f04f 0200 	mov.w	r2, #0
 8014e9e:	dc53      	bgt.n	8014f48 <__ieee754_log+0x158>
 8014ea0:	2300      	movs	r3, #0
 8014ea2:	f7eb fe19 	bl	8000ad8 <__aeabi_dcmpeq>
 8014ea6:	b1d0      	cbz	r0, 8014ede <__ieee754_log+0xee>
 8014ea8:	2c00      	cmp	r4, #0
 8014eaa:	f000 8122 	beq.w	80150f2 <__ieee754_log+0x302>
 8014eae:	4620      	mov	r0, r4
 8014eb0:	f7eb fb40 	bl	8000534 <__aeabi_i2d>
 8014eb4:	a390      	add	r3, pc, #576	; (adr r3, 80150f8 <__ieee754_log+0x308>)
 8014eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014eba:	4606      	mov	r6, r0
 8014ebc:	460f      	mov	r7, r1
 8014ebe:	f7eb fba3 	bl	8000608 <__aeabi_dmul>
 8014ec2:	a38f      	add	r3, pc, #572	; (adr r3, 8015100 <__ieee754_log+0x310>)
 8014ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ec8:	4604      	mov	r4, r0
 8014eca:	460d      	mov	r5, r1
 8014ecc:	4630      	mov	r0, r6
 8014ece:	4639      	mov	r1, r7
 8014ed0:	f7eb fb9a 	bl	8000608 <__aeabi_dmul>
 8014ed4:	4602      	mov	r2, r0
 8014ed6:	460b      	mov	r3, r1
 8014ed8:	4620      	mov	r0, r4
 8014eda:	4629      	mov	r1, r5
 8014edc:	e7ba      	b.n	8014e54 <__ieee754_log+0x64>
 8014ede:	a38a      	add	r3, pc, #552	; (adr r3, 8015108 <__ieee754_log+0x318>)
 8014ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ee4:	4650      	mov	r0, sl
 8014ee6:	4659      	mov	r1, fp
 8014ee8:	f7eb fb8e 	bl	8000608 <__aeabi_dmul>
 8014eec:	4602      	mov	r2, r0
 8014eee:	460b      	mov	r3, r1
 8014ef0:	2000      	movs	r0, #0
 8014ef2:	499b      	ldr	r1, [pc, #620]	; (8015160 <__ieee754_log+0x370>)
 8014ef4:	f7eb f9d0 	bl	8000298 <__aeabi_dsub>
 8014ef8:	4652      	mov	r2, sl
 8014efa:	4606      	mov	r6, r0
 8014efc:	460f      	mov	r7, r1
 8014efe:	465b      	mov	r3, fp
 8014f00:	4650      	mov	r0, sl
 8014f02:	4659      	mov	r1, fp
 8014f04:	f7eb fb80 	bl	8000608 <__aeabi_dmul>
 8014f08:	4602      	mov	r2, r0
 8014f0a:	460b      	mov	r3, r1
 8014f0c:	4630      	mov	r0, r6
 8014f0e:	4639      	mov	r1, r7
 8014f10:	f7eb fb7a 	bl	8000608 <__aeabi_dmul>
 8014f14:	4606      	mov	r6, r0
 8014f16:	460f      	mov	r7, r1
 8014f18:	b914      	cbnz	r4, 8014f20 <__ieee754_log+0x130>
 8014f1a:	4632      	mov	r2, r6
 8014f1c:	463b      	mov	r3, r7
 8014f1e:	e0a2      	b.n	8015066 <__ieee754_log+0x276>
 8014f20:	4620      	mov	r0, r4
 8014f22:	f7eb fb07 	bl	8000534 <__aeabi_i2d>
 8014f26:	a374      	add	r3, pc, #464	; (adr r3, 80150f8 <__ieee754_log+0x308>)
 8014f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f2c:	4680      	mov	r8, r0
 8014f2e:	4689      	mov	r9, r1
 8014f30:	f7eb fb6a 	bl	8000608 <__aeabi_dmul>
 8014f34:	a372      	add	r3, pc, #456	; (adr r3, 8015100 <__ieee754_log+0x310>)
 8014f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f3a:	4604      	mov	r4, r0
 8014f3c:	460d      	mov	r5, r1
 8014f3e:	4640      	mov	r0, r8
 8014f40:	4649      	mov	r1, r9
 8014f42:	f7eb fb61 	bl	8000608 <__aeabi_dmul>
 8014f46:	e0a7      	b.n	8015098 <__ieee754_log+0x2a8>
 8014f48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014f4c:	f7eb f9a6 	bl	800029c <__adddf3>
 8014f50:	4602      	mov	r2, r0
 8014f52:	460b      	mov	r3, r1
 8014f54:	4650      	mov	r0, sl
 8014f56:	4659      	mov	r1, fp
 8014f58:	f7eb fc80 	bl	800085c <__aeabi_ddiv>
 8014f5c:	ec41 0b18 	vmov	d8, r0, r1
 8014f60:	4620      	mov	r0, r4
 8014f62:	f7eb fae7 	bl	8000534 <__aeabi_i2d>
 8014f66:	ec53 2b18 	vmov	r2, r3, d8
 8014f6a:	ec41 0b19 	vmov	d9, r0, r1
 8014f6e:	ec51 0b18 	vmov	r0, r1, d8
 8014f72:	f7eb fb49 	bl	8000608 <__aeabi_dmul>
 8014f76:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8014f7a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8014f7e:	9301      	str	r3, [sp, #4]
 8014f80:	4602      	mov	r2, r0
 8014f82:	460b      	mov	r3, r1
 8014f84:	4680      	mov	r8, r0
 8014f86:	4689      	mov	r9, r1
 8014f88:	f7eb fb3e 	bl	8000608 <__aeabi_dmul>
 8014f8c:	a360      	add	r3, pc, #384	; (adr r3, 8015110 <__ieee754_log+0x320>)
 8014f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f92:	4606      	mov	r6, r0
 8014f94:	460f      	mov	r7, r1
 8014f96:	f7eb fb37 	bl	8000608 <__aeabi_dmul>
 8014f9a:	a35f      	add	r3, pc, #380	; (adr r3, 8015118 <__ieee754_log+0x328>)
 8014f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fa0:	f7eb f97c 	bl	800029c <__adddf3>
 8014fa4:	4632      	mov	r2, r6
 8014fa6:	463b      	mov	r3, r7
 8014fa8:	f7eb fb2e 	bl	8000608 <__aeabi_dmul>
 8014fac:	a35c      	add	r3, pc, #368	; (adr r3, 8015120 <__ieee754_log+0x330>)
 8014fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fb2:	f7eb f973 	bl	800029c <__adddf3>
 8014fb6:	4632      	mov	r2, r6
 8014fb8:	463b      	mov	r3, r7
 8014fba:	f7eb fb25 	bl	8000608 <__aeabi_dmul>
 8014fbe:	a35a      	add	r3, pc, #360	; (adr r3, 8015128 <__ieee754_log+0x338>)
 8014fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fc4:	f7eb f96a 	bl	800029c <__adddf3>
 8014fc8:	4642      	mov	r2, r8
 8014fca:	464b      	mov	r3, r9
 8014fcc:	f7eb fb1c 	bl	8000608 <__aeabi_dmul>
 8014fd0:	a357      	add	r3, pc, #348	; (adr r3, 8015130 <__ieee754_log+0x340>)
 8014fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fd6:	4680      	mov	r8, r0
 8014fd8:	4689      	mov	r9, r1
 8014fda:	4630      	mov	r0, r6
 8014fdc:	4639      	mov	r1, r7
 8014fde:	f7eb fb13 	bl	8000608 <__aeabi_dmul>
 8014fe2:	a355      	add	r3, pc, #340	; (adr r3, 8015138 <__ieee754_log+0x348>)
 8014fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fe8:	f7eb f958 	bl	800029c <__adddf3>
 8014fec:	4632      	mov	r2, r6
 8014fee:	463b      	mov	r3, r7
 8014ff0:	f7eb fb0a 	bl	8000608 <__aeabi_dmul>
 8014ff4:	a352      	add	r3, pc, #328	; (adr r3, 8015140 <__ieee754_log+0x350>)
 8014ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ffa:	f7eb f94f 	bl	800029c <__adddf3>
 8014ffe:	4632      	mov	r2, r6
 8015000:	463b      	mov	r3, r7
 8015002:	f7eb fb01 	bl	8000608 <__aeabi_dmul>
 8015006:	460b      	mov	r3, r1
 8015008:	4602      	mov	r2, r0
 801500a:	4649      	mov	r1, r9
 801500c:	4640      	mov	r0, r8
 801500e:	f7eb f945 	bl	800029c <__adddf3>
 8015012:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8015016:	9b01      	ldr	r3, [sp, #4]
 8015018:	3551      	adds	r5, #81	; 0x51
 801501a:	431d      	orrs	r5, r3
 801501c:	2d00      	cmp	r5, #0
 801501e:	4680      	mov	r8, r0
 8015020:	4689      	mov	r9, r1
 8015022:	dd48      	ble.n	80150b6 <__ieee754_log+0x2c6>
 8015024:	4b4e      	ldr	r3, [pc, #312]	; (8015160 <__ieee754_log+0x370>)
 8015026:	2200      	movs	r2, #0
 8015028:	4650      	mov	r0, sl
 801502a:	4659      	mov	r1, fp
 801502c:	f7eb faec 	bl	8000608 <__aeabi_dmul>
 8015030:	4652      	mov	r2, sl
 8015032:	465b      	mov	r3, fp
 8015034:	f7eb fae8 	bl	8000608 <__aeabi_dmul>
 8015038:	4602      	mov	r2, r0
 801503a:	460b      	mov	r3, r1
 801503c:	4606      	mov	r6, r0
 801503e:	460f      	mov	r7, r1
 8015040:	4640      	mov	r0, r8
 8015042:	4649      	mov	r1, r9
 8015044:	f7eb f92a 	bl	800029c <__adddf3>
 8015048:	ec53 2b18 	vmov	r2, r3, d8
 801504c:	f7eb fadc 	bl	8000608 <__aeabi_dmul>
 8015050:	4680      	mov	r8, r0
 8015052:	4689      	mov	r9, r1
 8015054:	b964      	cbnz	r4, 8015070 <__ieee754_log+0x280>
 8015056:	4602      	mov	r2, r0
 8015058:	460b      	mov	r3, r1
 801505a:	4630      	mov	r0, r6
 801505c:	4639      	mov	r1, r7
 801505e:	f7eb f91b 	bl	8000298 <__aeabi_dsub>
 8015062:	4602      	mov	r2, r0
 8015064:	460b      	mov	r3, r1
 8015066:	4650      	mov	r0, sl
 8015068:	4659      	mov	r1, fp
 801506a:	f7eb f915 	bl	8000298 <__aeabi_dsub>
 801506e:	e6d6      	b.n	8014e1e <__ieee754_log+0x2e>
 8015070:	a321      	add	r3, pc, #132	; (adr r3, 80150f8 <__ieee754_log+0x308>)
 8015072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015076:	ec51 0b19 	vmov	r0, r1, d9
 801507a:	f7eb fac5 	bl	8000608 <__aeabi_dmul>
 801507e:	a320      	add	r3, pc, #128	; (adr r3, 8015100 <__ieee754_log+0x310>)
 8015080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015084:	4604      	mov	r4, r0
 8015086:	460d      	mov	r5, r1
 8015088:	ec51 0b19 	vmov	r0, r1, d9
 801508c:	f7eb fabc 	bl	8000608 <__aeabi_dmul>
 8015090:	4642      	mov	r2, r8
 8015092:	464b      	mov	r3, r9
 8015094:	f7eb f902 	bl	800029c <__adddf3>
 8015098:	4602      	mov	r2, r0
 801509a:	460b      	mov	r3, r1
 801509c:	4630      	mov	r0, r6
 801509e:	4639      	mov	r1, r7
 80150a0:	f7eb f8fa 	bl	8000298 <__aeabi_dsub>
 80150a4:	4652      	mov	r2, sl
 80150a6:	465b      	mov	r3, fp
 80150a8:	f7eb f8f6 	bl	8000298 <__aeabi_dsub>
 80150ac:	4602      	mov	r2, r0
 80150ae:	460b      	mov	r3, r1
 80150b0:	4620      	mov	r0, r4
 80150b2:	4629      	mov	r1, r5
 80150b4:	e7d9      	b.n	801506a <__ieee754_log+0x27a>
 80150b6:	4602      	mov	r2, r0
 80150b8:	460b      	mov	r3, r1
 80150ba:	4650      	mov	r0, sl
 80150bc:	4659      	mov	r1, fp
 80150be:	f7eb f8eb 	bl	8000298 <__aeabi_dsub>
 80150c2:	ec53 2b18 	vmov	r2, r3, d8
 80150c6:	f7eb fa9f 	bl	8000608 <__aeabi_dmul>
 80150ca:	4606      	mov	r6, r0
 80150cc:	460f      	mov	r7, r1
 80150ce:	2c00      	cmp	r4, #0
 80150d0:	f43f af23 	beq.w	8014f1a <__ieee754_log+0x12a>
 80150d4:	a308      	add	r3, pc, #32	; (adr r3, 80150f8 <__ieee754_log+0x308>)
 80150d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150da:	ec51 0b19 	vmov	r0, r1, d9
 80150de:	f7eb fa93 	bl	8000608 <__aeabi_dmul>
 80150e2:	a307      	add	r3, pc, #28	; (adr r3, 8015100 <__ieee754_log+0x310>)
 80150e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150e8:	4604      	mov	r4, r0
 80150ea:	460d      	mov	r5, r1
 80150ec:	ec51 0b19 	vmov	r0, r1, d9
 80150f0:	e727      	b.n	8014f42 <__ieee754_log+0x152>
 80150f2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8015148 <__ieee754_log+0x358>
 80150f6:	e694      	b.n	8014e22 <__ieee754_log+0x32>
 80150f8:	fee00000 	.word	0xfee00000
 80150fc:	3fe62e42 	.word	0x3fe62e42
 8015100:	35793c76 	.word	0x35793c76
 8015104:	3dea39ef 	.word	0x3dea39ef
 8015108:	55555555 	.word	0x55555555
 801510c:	3fd55555 	.word	0x3fd55555
 8015110:	df3e5244 	.word	0xdf3e5244
 8015114:	3fc2f112 	.word	0x3fc2f112
 8015118:	96cb03de 	.word	0x96cb03de
 801511c:	3fc74664 	.word	0x3fc74664
 8015120:	94229359 	.word	0x94229359
 8015124:	3fd24924 	.word	0x3fd24924
 8015128:	55555593 	.word	0x55555593
 801512c:	3fe55555 	.word	0x3fe55555
 8015130:	d078c69f 	.word	0xd078c69f
 8015134:	3fc39a09 	.word	0x3fc39a09
 8015138:	1d8e78af 	.word	0x1d8e78af
 801513c:	3fcc71c5 	.word	0x3fcc71c5
 8015140:	9997fa04 	.word	0x9997fa04
 8015144:	3fd99999 	.word	0x3fd99999
	...
 8015150:	c3500000 	.word	0xc3500000
 8015154:	43500000 	.word	0x43500000
 8015158:	7fefffff 	.word	0x7fefffff
 801515c:	3ff00000 	.word	0x3ff00000
 8015160:	3fe00000 	.word	0x3fe00000
 8015164:	00000000 	.word	0x00000000

08015168 <__ieee754_pow>:
 8015168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801516c:	ed2d 8b06 	vpush	{d8-d10}
 8015170:	b08d      	sub	sp, #52	; 0x34
 8015172:	ed8d 1b02 	vstr	d1, [sp, #8]
 8015176:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 801517a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 801517e:	ea56 0100 	orrs.w	r1, r6, r0
 8015182:	ec53 2b10 	vmov	r2, r3, d0
 8015186:	f000 84d1 	beq.w	8015b2c <__ieee754_pow+0x9c4>
 801518a:	497f      	ldr	r1, [pc, #508]	; (8015388 <__ieee754_pow+0x220>)
 801518c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8015190:	428c      	cmp	r4, r1
 8015192:	ee10 8a10 	vmov	r8, s0
 8015196:	4699      	mov	r9, r3
 8015198:	dc09      	bgt.n	80151ae <__ieee754_pow+0x46>
 801519a:	d103      	bne.n	80151a4 <__ieee754_pow+0x3c>
 801519c:	b97a      	cbnz	r2, 80151be <__ieee754_pow+0x56>
 801519e:	42a6      	cmp	r6, r4
 80151a0:	dd02      	ble.n	80151a8 <__ieee754_pow+0x40>
 80151a2:	e00c      	b.n	80151be <__ieee754_pow+0x56>
 80151a4:	428e      	cmp	r6, r1
 80151a6:	dc02      	bgt.n	80151ae <__ieee754_pow+0x46>
 80151a8:	428e      	cmp	r6, r1
 80151aa:	d110      	bne.n	80151ce <__ieee754_pow+0x66>
 80151ac:	b178      	cbz	r0, 80151ce <__ieee754_pow+0x66>
 80151ae:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80151b2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80151b6:	ea54 0308 	orrs.w	r3, r4, r8
 80151ba:	f000 84b7 	beq.w	8015b2c <__ieee754_pow+0x9c4>
 80151be:	4873      	ldr	r0, [pc, #460]	; (801538c <__ieee754_pow+0x224>)
 80151c0:	b00d      	add	sp, #52	; 0x34
 80151c2:	ecbd 8b06 	vpop	{d8-d10}
 80151c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151ca:	f7ff b9dd 	b.w	8014588 <nan>
 80151ce:	f1b9 0f00 	cmp.w	r9, #0
 80151d2:	da36      	bge.n	8015242 <__ieee754_pow+0xda>
 80151d4:	496e      	ldr	r1, [pc, #440]	; (8015390 <__ieee754_pow+0x228>)
 80151d6:	428e      	cmp	r6, r1
 80151d8:	dc51      	bgt.n	801527e <__ieee754_pow+0x116>
 80151da:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80151de:	428e      	cmp	r6, r1
 80151e0:	f340 84af 	ble.w	8015b42 <__ieee754_pow+0x9da>
 80151e4:	1531      	asrs	r1, r6, #20
 80151e6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80151ea:	2914      	cmp	r1, #20
 80151ec:	dd0f      	ble.n	801520e <__ieee754_pow+0xa6>
 80151ee:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80151f2:	fa20 fc01 	lsr.w	ip, r0, r1
 80151f6:	fa0c f101 	lsl.w	r1, ip, r1
 80151fa:	4281      	cmp	r1, r0
 80151fc:	f040 84a1 	bne.w	8015b42 <__ieee754_pow+0x9da>
 8015200:	f00c 0c01 	and.w	ip, ip, #1
 8015204:	f1cc 0102 	rsb	r1, ip, #2
 8015208:	9100      	str	r1, [sp, #0]
 801520a:	b180      	cbz	r0, 801522e <__ieee754_pow+0xc6>
 801520c:	e059      	b.n	80152c2 <__ieee754_pow+0x15a>
 801520e:	2800      	cmp	r0, #0
 8015210:	d155      	bne.n	80152be <__ieee754_pow+0x156>
 8015212:	f1c1 0114 	rsb	r1, r1, #20
 8015216:	fa46 fc01 	asr.w	ip, r6, r1
 801521a:	fa0c f101 	lsl.w	r1, ip, r1
 801521e:	42b1      	cmp	r1, r6
 8015220:	f040 848c 	bne.w	8015b3c <__ieee754_pow+0x9d4>
 8015224:	f00c 0c01 	and.w	ip, ip, #1
 8015228:	f1cc 0102 	rsb	r1, ip, #2
 801522c:	9100      	str	r1, [sp, #0]
 801522e:	4959      	ldr	r1, [pc, #356]	; (8015394 <__ieee754_pow+0x22c>)
 8015230:	428e      	cmp	r6, r1
 8015232:	d12d      	bne.n	8015290 <__ieee754_pow+0x128>
 8015234:	2f00      	cmp	r7, #0
 8015236:	da79      	bge.n	801532c <__ieee754_pow+0x1c4>
 8015238:	4956      	ldr	r1, [pc, #344]	; (8015394 <__ieee754_pow+0x22c>)
 801523a:	2000      	movs	r0, #0
 801523c:	f7eb fb0e 	bl	800085c <__aeabi_ddiv>
 8015240:	e016      	b.n	8015270 <__ieee754_pow+0x108>
 8015242:	2100      	movs	r1, #0
 8015244:	9100      	str	r1, [sp, #0]
 8015246:	2800      	cmp	r0, #0
 8015248:	d13b      	bne.n	80152c2 <__ieee754_pow+0x15a>
 801524a:	494f      	ldr	r1, [pc, #316]	; (8015388 <__ieee754_pow+0x220>)
 801524c:	428e      	cmp	r6, r1
 801524e:	d1ee      	bne.n	801522e <__ieee754_pow+0xc6>
 8015250:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8015254:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8015258:	ea53 0308 	orrs.w	r3, r3, r8
 801525c:	f000 8466 	beq.w	8015b2c <__ieee754_pow+0x9c4>
 8015260:	4b4d      	ldr	r3, [pc, #308]	; (8015398 <__ieee754_pow+0x230>)
 8015262:	429c      	cmp	r4, r3
 8015264:	dd0d      	ble.n	8015282 <__ieee754_pow+0x11a>
 8015266:	2f00      	cmp	r7, #0
 8015268:	f280 8464 	bge.w	8015b34 <__ieee754_pow+0x9cc>
 801526c:	2000      	movs	r0, #0
 801526e:	2100      	movs	r1, #0
 8015270:	ec41 0b10 	vmov	d0, r0, r1
 8015274:	b00d      	add	sp, #52	; 0x34
 8015276:	ecbd 8b06 	vpop	{d8-d10}
 801527a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801527e:	2102      	movs	r1, #2
 8015280:	e7e0      	b.n	8015244 <__ieee754_pow+0xdc>
 8015282:	2f00      	cmp	r7, #0
 8015284:	daf2      	bge.n	801526c <__ieee754_pow+0x104>
 8015286:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 801528a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801528e:	e7ef      	b.n	8015270 <__ieee754_pow+0x108>
 8015290:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8015294:	d104      	bne.n	80152a0 <__ieee754_pow+0x138>
 8015296:	4610      	mov	r0, r2
 8015298:	4619      	mov	r1, r3
 801529a:	f7eb f9b5 	bl	8000608 <__aeabi_dmul>
 801529e:	e7e7      	b.n	8015270 <__ieee754_pow+0x108>
 80152a0:	493e      	ldr	r1, [pc, #248]	; (801539c <__ieee754_pow+0x234>)
 80152a2:	428f      	cmp	r7, r1
 80152a4:	d10d      	bne.n	80152c2 <__ieee754_pow+0x15a>
 80152a6:	f1b9 0f00 	cmp.w	r9, #0
 80152aa:	db0a      	blt.n	80152c2 <__ieee754_pow+0x15a>
 80152ac:	ec43 2b10 	vmov	d0, r2, r3
 80152b0:	b00d      	add	sp, #52	; 0x34
 80152b2:	ecbd 8b06 	vpop	{d8-d10}
 80152b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152ba:	f000 bc77 	b.w	8015bac <__ieee754_sqrt>
 80152be:	2100      	movs	r1, #0
 80152c0:	9100      	str	r1, [sp, #0]
 80152c2:	ec43 2b10 	vmov	d0, r2, r3
 80152c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80152ca:	f000 fd23 	bl	8015d14 <fabs>
 80152ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80152d2:	ec51 0b10 	vmov	r0, r1, d0
 80152d6:	f1b8 0f00 	cmp.w	r8, #0
 80152da:	d12a      	bne.n	8015332 <__ieee754_pow+0x1ca>
 80152dc:	b12c      	cbz	r4, 80152ea <__ieee754_pow+0x182>
 80152de:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8015394 <__ieee754_pow+0x22c>
 80152e2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80152e6:	45e6      	cmp	lr, ip
 80152e8:	d123      	bne.n	8015332 <__ieee754_pow+0x1ca>
 80152ea:	2f00      	cmp	r7, #0
 80152ec:	da05      	bge.n	80152fa <__ieee754_pow+0x192>
 80152ee:	4602      	mov	r2, r0
 80152f0:	460b      	mov	r3, r1
 80152f2:	2000      	movs	r0, #0
 80152f4:	4927      	ldr	r1, [pc, #156]	; (8015394 <__ieee754_pow+0x22c>)
 80152f6:	f7eb fab1 	bl	800085c <__aeabi_ddiv>
 80152fa:	f1b9 0f00 	cmp.w	r9, #0
 80152fe:	dab7      	bge.n	8015270 <__ieee754_pow+0x108>
 8015300:	9b00      	ldr	r3, [sp, #0]
 8015302:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8015306:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801530a:	4323      	orrs	r3, r4
 801530c:	d108      	bne.n	8015320 <__ieee754_pow+0x1b8>
 801530e:	4602      	mov	r2, r0
 8015310:	460b      	mov	r3, r1
 8015312:	4610      	mov	r0, r2
 8015314:	4619      	mov	r1, r3
 8015316:	f7ea ffbf 	bl	8000298 <__aeabi_dsub>
 801531a:	4602      	mov	r2, r0
 801531c:	460b      	mov	r3, r1
 801531e:	e78d      	b.n	801523c <__ieee754_pow+0xd4>
 8015320:	9b00      	ldr	r3, [sp, #0]
 8015322:	2b01      	cmp	r3, #1
 8015324:	d1a4      	bne.n	8015270 <__ieee754_pow+0x108>
 8015326:	4602      	mov	r2, r0
 8015328:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801532c:	4610      	mov	r0, r2
 801532e:	4619      	mov	r1, r3
 8015330:	e79e      	b.n	8015270 <__ieee754_pow+0x108>
 8015332:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8015336:	f10c 35ff 	add.w	r5, ip, #4294967295
 801533a:	950a      	str	r5, [sp, #40]	; 0x28
 801533c:	9d00      	ldr	r5, [sp, #0]
 801533e:	46ac      	mov	ip, r5
 8015340:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8015342:	ea5c 0505 	orrs.w	r5, ip, r5
 8015346:	d0e4      	beq.n	8015312 <__ieee754_pow+0x1aa>
 8015348:	4b15      	ldr	r3, [pc, #84]	; (80153a0 <__ieee754_pow+0x238>)
 801534a:	429e      	cmp	r6, r3
 801534c:	f340 80fc 	ble.w	8015548 <__ieee754_pow+0x3e0>
 8015350:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8015354:	429e      	cmp	r6, r3
 8015356:	4b10      	ldr	r3, [pc, #64]	; (8015398 <__ieee754_pow+0x230>)
 8015358:	dd07      	ble.n	801536a <__ieee754_pow+0x202>
 801535a:	429c      	cmp	r4, r3
 801535c:	dc0a      	bgt.n	8015374 <__ieee754_pow+0x20c>
 801535e:	2f00      	cmp	r7, #0
 8015360:	da84      	bge.n	801526c <__ieee754_pow+0x104>
 8015362:	a307      	add	r3, pc, #28	; (adr r3, 8015380 <__ieee754_pow+0x218>)
 8015364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015368:	e795      	b.n	8015296 <__ieee754_pow+0x12e>
 801536a:	429c      	cmp	r4, r3
 801536c:	dbf7      	blt.n	801535e <__ieee754_pow+0x1f6>
 801536e:	4b09      	ldr	r3, [pc, #36]	; (8015394 <__ieee754_pow+0x22c>)
 8015370:	429c      	cmp	r4, r3
 8015372:	dd17      	ble.n	80153a4 <__ieee754_pow+0x23c>
 8015374:	2f00      	cmp	r7, #0
 8015376:	dcf4      	bgt.n	8015362 <__ieee754_pow+0x1fa>
 8015378:	e778      	b.n	801526c <__ieee754_pow+0x104>
 801537a:	bf00      	nop
 801537c:	f3af 8000 	nop.w
 8015380:	8800759c 	.word	0x8800759c
 8015384:	7e37e43c 	.word	0x7e37e43c
 8015388:	7ff00000 	.word	0x7ff00000
 801538c:	080164bf 	.word	0x080164bf
 8015390:	433fffff 	.word	0x433fffff
 8015394:	3ff00000 	.word	0x3ff00000
 8015398:	3fefffff 	.word	0x3fefffff
 801539c:	3fe00000 	.word	0x3fe00000
 80153a0:	41e00000 	.word	0x41e00000
 80153a4:	4b64      	ldr	r3, [pc, #400]	; (8015538 <__ieee754_pow+0x3d0>)
 80153a6:	2200      	movs	r2, #0
 80153a8:	f7ea ff76 	bl	8000298 <__aeabi_dsub>
 80153ac:	a356      	add	r3, pc, #344	; (adr r3, 8015508 <__ieee754_pow+0x3a0>)
 80153ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153b2:	4604      	mov	r4, r0
 80153b4:	460d      	mov	r5, r1
 80153b6:	f7eb f927 	bl	8000608 <__aeabi_dmul>
 80153ba:	a355      	add	r3, pc, #340	; (adr r3, 8015510 <__ieee754_pow+0x3a8>)
 80153bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153c0:	4606      	mov	r6, r0
 80153c2:	460f      	mov	r7, r1
 80153c4:	4620      	mov	r0, r4
 80153c6:	4629      	mov	r1, r5
 80153c8:	f7eb f91e 	bl	8000608 <__aeabi_dmul>
 80153cc:	4b5b      	ldr	r3, [pc, #364]	; (801553c <__ieee754_pow+0x3d4>)
 80153ce:	4682      	mov	sl, r0
 80153d0:	468b      	mov	fp, r1
 80153d2:	2200      	movs	r2, #0
 80153d4:	4620      	mov	r0, r4
 80153d6:	4629      	mov	r1, r5
 80153d8:	f7eb f916 	bl	8000608 <__aeabi_dmul>
 80153dc:	4602      	mov	r2, r0
 80153de:	460b      	mov	r3, r1
 80153e0:	a14d      	add	r1, pc, #308	; (adr r1, 8015518 <__ieee754_pow+0x3b0>)
 80153e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80153e6:	f7ea ff57 	bl	8000298 <__aeabi_dsub>
 80153ea:	4622      	mov	r2, r4
 80153ec:	462b      	mov	r3, r5
 80153ee:	f7eb f90b 	bl	8000608 <__aeabi_dmul>
 80153f2:	4602      	mov	r2, r0
 80153f4:	460b      	mov	r3, r1
 80153f6:	2000      	movs	r0, #0
 80153f8:	4951      	ldr	r1, [pc, #324]	; (8015540 <__ieee754_pow+0x3d8>)
 80153fa:	f7ea ff4d 	bl	8000298 <__aeabi_dsub>
 80153fe:	4622      	mov	r2, r4
 8015400:	4680      	mov	r8, r0
 8015402:	4689      	mov	r9, r1
 8015404:	462b      	mov	r3, r5
 8015406:	4620      	mov	r0, r4
 8015408:	4629      	mov	r1, r5
 801540a:	f7eb f8fd 	bl	8000608 <__aeabi_dmul>
 801540e:	4602      	mov	r2, r0
 8015410:	460b      	mov	r3, r1
 8015412:	4640      	mov	r0, r8
 8015414:	4649      	mov	r1, r9
 8015416:	f7eb f8f7 	bl	8000608 <__aeabi_dmul>
 801541a:	a341      	add	r3, pc, #260	; (adr r3, 8015520 <__ieee754_pow+0x3b8>)
 801541c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015420:	f7eb f8f2 	bl	8000608 <__aeabi_dmul>
 8015424:	4602      	mov	r2, r0
 8015426:	460b      	mov	r3, r1
 8015428:	4650      	mov	r0, sl
 801542a:	4659      	mov	r1, fp
 801542c:	f7ea ff34 	bl	8000298 <__aeabi_dsub>
 8015430:	4602      	mov	r2, r0
 8015432:	460b      	mov	r3, r1
 8015434:	4680      	mov	r8, r0
 8015436:	4689      	mov	r9, r1
 8015438:	4630      	mov	r0, r6
 801543a:	4639      	mov	r1, r7
 801543c:	f7ea ff2e 	bl	800029c <__adddf3>
 8015440:	2400      	movs	r4, #0
 8015442:	4632      	mov	r2, r6
 8015444:	463b      	mov	r3, r7
 8015446:	4620      	mov	r0, r4
 8015448:	460d      	mov	r5, r1
 801544a:	f7ea ff25 	bl	8000298 <__aeabi_dsub>
 801544e:	4602      	mov	r2, r0
 8015450:	460b      	mov	r3, r1
 8015452:	4640      	mov	r0, r8
 8015454:	4649      	mov	r1, r9
 8015456:	f7ea ff1f 	bl	8000298 <__aeabi_dsub>
 801545a:	9b00      	ldr	r3, [sp, #0]
 801545c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801545e:	3b01      	subs	r3, #1
 8015460:	4313      	orrs	r3, r2
 8015462:	4682      	mov	sl, r0
 8015464:	468b      	mov	fp, r1
 8015466:	f040 81f1 	bne.w	801584c <__ieee754_pow+0x6e4>
 801546a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8015528 <__ieee754_pow+0x3c0>
 801546e:	eeb0 8a47 	vmov.f32	s16, s14
 8015472:	eef0 8a67 	vmov.f32	s17, s15
 8015476:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801547a:	2600      	movs	r6, #0
 801547c:	4632      	mov	r2, r6
 801547e:	463b      	mov	r3, r7
 8015480:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015484:	f7ea ff08 	bl	8000298 <__aeabi_dsub>
 8015488:	4622      	mov	r2, r4
 801548a:	462b      	mov	r3, r5
 801548c:	f7eb f8bc 	bl	8000608 <__aeabi_dmul>
 8015490:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015494:	4680      	mov	r8, r0
 8015496:	4689      	mov	r9, r1
 8015498:	4650      	mov	r0, sl
 801549a:	4659      	mov	r1, fp
 801549c:	f7eb f8b4 	bl	8000608 <__aeabi_dmul>
 80154a0:	4602      	mov	r2, r0
 80154a2:	460b      	mov	r3, r1
 80154a4:	4640      	mov	r0, r8
 80154a6:	4649      	mov	r1, r9
 80154a8:	f7ea fef8 	bl	800029c <__adddf3>
 80154ac:	4632      	mov	r2, r6
 80154ae:	463b      	mov	r3, r7
 80154b0:	4680      	mov	r8, r0
 80154b2:	4689      	mov	r9, r1
 80154b4:	4620      	mov	r0, r4
 80154b6:	4629      	mov	r1, r5
 80154b8:	f7eb f8a6 	bl	8000608 <__aeabi_dmul>
 80154bc:	460b      	mov	r3, r1
 80154be:	4604      	mov	r4, r0
 80154c0:	460d      	mov	r5, r1
 80154c2:	4602      	mov	r2, r0
 80154c4:	4649      	mov	r1, r9
 80154c6:	4640      	mov	r0, r8
 80154c8:	f7ea fee8 	bl	800029c <__adddf3>
 80154cc:	4b1d      	ldr	r3, [pc, #116]	; (8015544 <__ieee754_pow+0x3dc>)
 80154ce:	4299      	cmp	r1, r3
 80154d0:	ec45 4b19 	vmov	d9, r4, r5
 80154d4:	4606      	mov	r6, r0
 80154d6:	460f      	mov	r7, r1
 80154d8:	468b      	mov	fp, r1
 80154da:	f340 82fe 	ble.w	8015ada <__ieee754_pow+0x972>
 80154de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80154e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80154e6:	4303      	orrs	r3, r0
 80154e8:	f000 81f0 	beq.w	80158cc <__ieee754_pow+0x764>
 80154ec:	a310      	add	r3, pc, #64	; (adr r3, 8015530 <__ieee754_pow+0x3c8>)
 80154ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154f2:	ec51 0b18 	vmov	r0, r1, d8
 80154f6:	f7eb f887 	bl	8000608 <__aeabi_dmul>
 80154fa:	a30d      	add	r3, pc, #52	; (adr r3, 8015530 <__ieee754_pow+0x3c8>)
 80154fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015500:	e6cb      	b.n	801529a <__ieee754_pow+0x132>
 8015502:	bf00      	nop
 8015504:	f3af 8000 	nop.w
 8015508:	60000000 	.word	0x60000000
 801550c:	3ff71547 	.word	0x3ff71547
 8015510:	f85ddf44 	.word	0xf85ddf44
 8015514:	3e54ae0b 	.word	0x3e54ae0b
 8015518:	55555555 	.word	0x55555555
 801551c:	3fd55555 	.word	0x3fd55555
 8015520:	652b82fe 	.word	0x652b82fe
 8015524:	3ff71547 	.word	0x3ff71547
 8015528:	00000000 	.word	0x00000000
 801552c:	bff00000 	.word	0xbff00000
 8015530:	8800759c 	.word	0x8800759c
 8015534:	7e37e43c 	.word	0x7e37e43c
 8015538:	3ff00000 	.word	0x3ff00000
 801553c:	3fd00000 	.word	0x3fd00000
 8015540:	3fe00000 	.word	0x3fe00000
 8015544:	408fffff 	.word	0x408fffff
 8015548:	4bd7      	ldr	r3, [pc, #860]	; (80158a8 <__ieee754_pow+0x740>)
 801554a:	ea03 0309 	and.w	r3, r3, r9
 801554e:	2200      	movs	r2, #0
 8015550:	b92b      	cbnz	r3, 801555e <__ieee754_pow+0x3f6>
 8015552:	4bd6      	ldr	r3, [pc, #856]	; (80158ac <__ieee754_pow+0x744>)
 8015554:	f7eb f858 	bl	8000608 <__aeabi_dmul>
 8015558:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801555c:	460c      	mov	r4, r1
 801555e:	1523      	asrs	r3, r4, #20
 8015560:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015564:	4413      	add	r3, r2
 8015566:	9309      	str	r3, [sp, #36]	; 0x24
 8015568:	4bd1      	ldr	r3, [pc, #836]	; (80158b0 <__ieee754_pow+0x748>)
 801556a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801556e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8015572:	429c      	cmp	r4, r3
 8015574:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8015578:	dd08      	ble.n	801558c <__ieee754_pow+0x424>
 801557a:	4bce      	ldr	r3, [pc, #824]	; (80158b4 <__ieee754_pow+0x74c>)
 801557c:	429c      	cmp	r4, r3
 801557e:	f340 8163 	ble.w	8015848 <__ieee754_pow+0x6e0>
 8015582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015584:	3301      	adds	r3, #1
 8015586:	9309      	str	r3, [sp, #36]	; 0x24
 8015588:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801558c:	2400      	movs	r4, #0
 801558e:	00e3      	lsls	r3, r4, #3
 8015590:	930b      	str	r3, [sp, #44]	; 0x2c
 8015592:	4bc9      	ldr	r3, [pc, #804]	; (80158b8 <__ieee754_pow+0x750>)
 8015594:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015598:	ed93 7b00 	vldr	d7, [r3]
 801559c:	4629      	mov	r1, r5
 801559e:	ec53 2b17 	vmov	r2, r3, d7
 80155a2:	eeb0 8a47 	vmov.f32	s16, s14
 80155a6:	eef0 8a67 	vmov.f32	s17, s15
 80155aa:	4682      	mov	sl, r0
 80155ac:	f7ea fe74 	bl	8000298 <__aeabi_dsub>
 80155b0:	4652      	mov	r2, sl
 80155b2:	4606      	mov	r6, r0
 80155b4:	460f      	mov	r7, r1
 80155b6:	462b      	mov	r3, r5
 80155b8:	ec51 0b18 	vmov	r0, r1, d8
 80155bc:	f7ea fe6e 	bl	800029c <__adddf3>
 80155c0:	4602      	mov	r2, r0
 80155c2:	460b      	mov	r3, r1
 80155c4:	2000      	movs	r0, #0
 80155c6:	49bd      	ldr	r1, [pc, #756]	; (80158bc <__ieee754_pow+0x754>)
 80155c8:	f7eb f948 	bl	800085c <__aeabi_ddiv>
 80155cc:	ec41 0b19 	vmov	d9, r0, r1
 80155d0:	4602      	mov	r2, r0
 80155d2:	460b      	mov	r3, r1
 80155d4:	4630      	mov	r0, r6
 80155d6:	4639      	mov	r1, r7
 80155d8:	f7eb f816 	bl	8000608 <__aeabi_dmul>
 80155dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80155e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80155e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80155e8:	2300      	movs	r3, #0
 80155ea:	9304      	str	r3, [sp, #16]
 80155ec:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80155f0:	46ab      	mov	fp, r5
 80155f2:	106d      	asrs	r5, r5, #1
 80155f4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80155f8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80155fc:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8015600:	2200      	movs	r2, #0
 8015602:	4640      	mov	r0, r8
 8015604:	4649      	mov	r1, r9
 8015606:	4614      	mov	r4, r2
 8015608:	461d      	mov	r5, r3
 801560a:	f7ea fffd 	bl	8000608 <__aeabi_dmul>
 801560e:	4602      	mov	r2, r0
 8015610:	460b      	mov	r3, r1
 8015612:	4630      	mov	r0, r6
 8015614:	4639      	mov	r1, r7
 8015616:	f7ea fe3f 	bl	8000298 <__aeabi_dsub>
 801561a:	ec53 2b18 	vmov	r2, r3, d8
 801561e:	4606      	mov	r6, r0
 8015620:	460f      	mov	r7, r1
 8015622:	4620      	mov	r0, r4
 8015624:	4629      	mov	r1, r5
 8015626:	f7ea fe37 	bl	8000298 <__aeabi_dsub>
 801562a:	4602      	mov	r2, r0
 801562c:	460b      	mov	r3, r1
 801562e:	4650      	mov	r0, sl
 8015630:	4659      	mov	r1, fp
 8015632:	f7ea fe31 	bl	8000298 <__aeabi_dsub>
 8015636:	4642      	mov	r2, r8
 8015638:	464b      	mov	r3, r9
 801563a:	f7ea ffe5 	bl	8000608 <__aeabi_dmul>
 801563e:	4602      	mov	r2, r0
 8015640:	460b      	mov	r3, r1
 8015642:	4630      	mov	r0, r6
 8015644:	4639      	mov	r1, r7
 8015646:	f7ea fe27 	bl	8000298 <__aeabi_dsub>
 801564a:	ec53 2b19 	vmov	r2, r3, d9
 801564e:	f7ea ffdb 	bl	8000608 <__aeabi_dmul>
 8015652:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015656:	ec41 0b18 	vmov	d8, r0, r1
 801565a:	4610      	mov	r0, r2
 801565c:	4619      	mov	r1, r3
 801565e:	f7ea ffd3 	bl	8000608 <__aeabi_dmul>
 8015662:	a37d      	add	r3, pc, #500	; (adr r3, 8015858 <__ieee754_pow+0x6f0>)
 8015664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015668:	4604      	mov	r4, r0
 801566a:	460d      	mov	r5, r1
 801566c:	f7ea ffcc 	bl	8000608 <__aeabi_dmul>
 8015670:	a37b      	add	r3, pc, #492	; (adr r3, 8015860 <__ieee754_pow+0x6f8>)
 8015672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015676:	f7ea fe11 	bl	800029c <__adddf3>
 801567a:	4622      	mov	r2, r4
 801567c:	462b      	mov	r3, r5
 801567e:	f7ea ffc3 	bl	8000608 <__aeabi_dmul>
 8015682:	a379      	add	r3, pc, #484	; (adr r3, 8015868 <__ieee754_pow+0x700>)
 8015684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015688:	f7ea fe08 	bl	800029c <__adddf3>
 801568c:	4622      	mov	r2, r4
 801568e:	462b      	mov	r3, r5
 8015690:	f7ea ffba 	bl	8000608 <__aeabi_dmul>
 8015694:	a376      	add	r3, pc, #472	; (adr r3, 8015870 <__ieee754_pow+0x708>)
 8015696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801569a:	f7ea fdff 	bl	800029c <__adddf3>
 801569e:	4622      	mov	r2, r4
 80156a0:	462b      	mov	r3, r5
 80156a2:	f7ea ffb1 	bl	8000608 <__aeabi_dmul>
 80156a6:	a374      	add	r3, pc, #464	; (adr r3, 8015878 <__ieee754_pow+0x710>)
 80156a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156ac:	f7ea fdf6 	bl	800029c <__adddf3>
 80156b0:	4622      	mov	r2, r4
 80156b2:	462b      	mov	r3, r5
 80156b4:	f7ea ffa8 	bl	8000608 <__aeabi_dmul>
 80156b8:	a371      	add	r3, pc, #452	; (adr r3, 8015880 <__ieee754_pow+0x718>)
 80156ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156be:	f7ea fded 	bl	800029c <__adddf3>
 80156c2:	4622      	mov	r2, r4
 80156c4:	4606      	mov	r6, r0
 80156c6:	460f      	mov	r7, r1
 80156c8:	462b      	mov	r3, r5
 80156ca:	4620      	mov	r0, r4
 80156cc:	4629      	mov	r1, r5
 80156ce:	f7ea ff9b 	bl	8000608 <__aeabi_dmul>
 80156d2:	4602      	mov	r2, r0
 80156d4:	460b      	mov	r3, r1
 80156d6:	4630      	mov	r0, r6
 80156d8:	4639      	mov	r1, r7
 80156da:	f7ea ff95 	bl	8000608 <__aeabi_dmul>
 80156de:	4642      	mov	r2, r8
 80156e0:	4604      	mov	r4, r0
 80156e2:	460d      	mov	r5, r1
 80156e4:	464b      	mov	r3, r9
 80156e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80156ea:	f7ea fdd7 	bl	800029c <__adddf3>
 80156ee:	ec53 2b18 	vmov	r2, r3, d8
 80156f2:	f7ea ff89 	bl	8000608 <__aeabi_dmul>
 80156f6:	4622      	mov	r2, r4
 80156f8:	462b      	mov	r3, r5
 80156fa:	f7ea fdcf 	bl	800029c <__adddf3>
 80156fe:	4642      	mov	r2, r8
 8015700:	4682      	mov	sl, r0
 8015702:	468b      	mov	fp, r1
 8015704:	464b      	mov	r3, r9
 8015706:	4640      	mov	r0, r8
 8015708:	4649      	mov	r1, r9
 801570a:	f7ea ff7d 	bl	8000608 <__aeabi_dmul>
 801570e:	4b6c      	ldr	r3, [pc, #432]	; (80158c0 <__ieee754_pow+0x758>)
 8015710:	2200      	movs	r2, #0
 8015712:	4606      	mov	r6, r0
 8015714:	460f      	mov	r7, r1
 8015716:	f7ea fdc1 	bl	800029c <__adddf3>
 801571a:	4652      	mov	r2, sl
 801571c:	465b      	mov	r3, fp
 801571e:	f7ea fdbd 	bl	800029c <__adddf3>
 8015722:	9c04      	ldr	r4, [sp, #16]
 8015724:	460d      	mov	r5, r1
 8015726:	4622      	mov	r2, r4
 8015728:	460b      	mov	r3, r1
 801572a:	4640      	mov	r0, r8
 801572c:	4649      	mov	r1, r9
 801572e:	f7ea ff6b 	bl	8000608 <__aeabi_dmul>
 8015732:	4b63      	ldr	r3, [pc, #396]	; (80158c0 <__ieee754_pow+0x758>)
 8015734:	4680      	mov	r8, r0
 8015736:	4689      	mov	r9, r1
 8015738:	2200      	movs	r2, #0
 801573a:	4620      	mov	r0, r4
 801573c:	4629      	mov	r1, r5
 801573e:	f7ea fdab 	bl	8000298 <__aeabi_dsub>
 8015742:	4632      	mov	r2, r6
 8015744:	463b      	mov	r3, r7
 8015746:	f7ea fda7 	bl	8000298 <__aeabi_dsub>
 801574a:	4602      	mov	r2, r0
 801574c:	460b      	mov	r3, r1
 801574e:	4650      	mov	r0, sl
 8015750:	4659      	mov	r1, fp
 8015752:	f7ea fda1 	bl	8000298 <__aeabi_dsub>
 8015756:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801575a:	f7ea ff55 	bl	8000608 <__aeabi_dmul>
 801575e:	4622      	mov	r2, r4
 8015760:	4606      	mov	r6, r0
 8015762:	460f      	mov	r7, r1
 8015764:	462b      	mov	r3, r5
 8015766:	ec51 0b18 	vmov	r0, r1, d8
 801576a:	f7ea ff4d 	bl	8000608 <__aeabi_dmul>
 801576e:	4602      	mov	r2, r0
 8015770:	460b      	mov	r3, r1
 8015772:	4630      	mov	r0, r6
 8015774:	4639      	mov	r1, r7
 8015776:	f7ea fd91 	bl	800029c <__adddf3>
 801577a:	4606      	mov	r6, r0
 801577c:	460f      	mov	r7, r1
 801577e:	4602      	mov	r2, r0
 8015780:	460b      	mov	r3, r1
 8015782:	4640      	mov	r0, r8
 8015784:	4649      	mov	r1, r9
 8015786:	f7ea fd89 	bl	800029c <__adddf3>
 801578a:	9c04      	ldr	r4, [sp, #16]
 801578c:	a33e      	add	r3, pc, #248	; (adr r3, 8015888 <__ieee754_pow+0x720>)
 801578e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015792:	4620      	mov	r0, r4
 8015794:	460d      	mov	r5, r1
 8015796:	f7ea ff37 	bl	8000608 <__aeabi_dmul>
 801579a:	4642      	mov	r2, r8
 801579c:	ec41 0b18 	vmov	d8, r0, r1
 80157a0:	464b      	mov	r3, r9
 80157a2:	4620      	mov	r0, r4
 80157a4:	4629      	mov	r1, r5
 80157a6:	f7ea fd77 	bl	8000298 <__aeabi_dsub>
 80157aa:	4602      	mov	r2, r0
 80157ac:	460b      	mov	r3, r1
 80157ae:	4630      	mov	r0, r6
 80157b0:	4639      	mov	r1, r7
 80157b2:	f7ea fd71 	bl	8000298 <__aeabi_dsub>
 80157b6:	a336      	add	r3, pc, #216	; (adr r3, 8015890 <__ieee754_pow+0x728>)
 80157b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157bc:	f7ea ff24 	bl	8000608 <__aeabi_dmul>
 80157c0:	a335      	add	r3, pc, #212	; (adr r3, 8015898 <__ieee754_pow+0x730>)
 80157c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157c6:	4606      	mov	r6, r0
 80157c8:	460f      	mov	r7, r1
 80157ca:	4620      	mov	r0, r4
 80157cc:	4629      	mov	r1, r5
 80157ce:	f7ea ff1b 	bl	8000608 <__aeabi_dmul>
 80157d2:	4602      	mov	r2, r0
 80157d4:	460b      	mov	r3, r1
 80157d6:	4630      	mov	r0, r6
 80157d8:	4639      	mov	r1, r7
 80157da:	f7ea fd5f 	bl	800029c <__adddf3>
 80157de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80157e0:	4b38      	ldr	r3, [pc, #224]	; (80158c4 <__ieee754_pow+0x75c>)
 80157e2:	4413      	add	r3, r2
 80157e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157e8:	f7ea fd58 	bl	800029c <__adddf3>
 80157ec:	4682      	mov	sl, r0
 80157ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80157f0:	468b      	mov	fp, r1
 80157f2:	f7ea fe9f 	bl	8000534 <__aeabi_i2d>
 80157f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80157f8:	4b33      	ldr	r3, [pc, #204]	; (80158c8 <__ieee754_pow+0x760>)
 80157fa:	4413      	add	r3, r2
 80157fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015800:	4606      	mov	r6, r0
 8015802:	460f      	mov	r7, r1
 8015804:	4652      	mov	r2, sl
 8015806:	465b      	mov	r3, fp
 8015808:	ec51 0b18 	vmov	r0, r1, d8
 801580c:	f7ea fd46 	bl	800029c <__adddf3>
 8015810:	4642      	mov	r2, r8
 8015812:	464b      	mov	r3, r9
 8015814:	f7ea fd42 	bl	800029c <__adddf3>
 8015818:	4632      	mov	r2, r6
 801581a:	463b      	mov	r3, r7
 801581c:	f7ea fd3e 	bl	800029c <__adddf3>
 8015820:	9c04      	ldr	r4, [sp, #16]
 8015822:	4632      	mov	r2, r6
 8015824:	463b      	mov	r3, r7
 8015826:	4620      	mov	r0, r4
 8015828:	460d      	mov	r5, r1
 801582a:	f7ea fd35 	bl	8000298 <__aeabi_dsub>
 801582e:	4642      	mov	r2, r8
 8015830:	464b      	mov	r3, r9
 8015832:	f7ea fd31 	bl	8000298 <__aeabi_dsub>
 8015836:	ec53 2b18 	vmov	r2, r3, d8
 801583a:	f7ea fd2d 	bl	8000298 <__aeabi_dsub>
 801583e:	4602      	mov	r2, r0
 8015840:	460b      	mov	r3, r1
 8015842:	4650      	mov	r0, sl
 8015844:	4659      	mov	r1, fp
 8015846:	e606      	b.n	8015456 <__ieee754_pow+0x2ee>
 8015848:	2401      	movs	r4, #1
 801584a:	e6a0      	b.n	801558e <__ieee754_pow+0x426>
 801584c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80158a0 <__ieee754_pow+0x738>
 8015850:	e60d      	b.n	801546e <__ieee754_pow+0x306>
 8015852:	bf00      	nop
 8015854:	f3af 8000 	nop.w
 8015858:	4a454eef 	.word	0x4a454eef
 801585c:	3fca7e28 	.word	0x3fca7e28
 8015860:	93c9db65 	.word	0x93c9db65
 8015864:	3fcd864a 	.word	0x3fcd864a
 8015868:	a91d4101 	.word	0xa91d4101
 801586c:	3fd17460 	.word	0x3fd17460
 8015870:	518f264d 	.word	0x518f264d
 8015874:	3fd55555 	.word	0x3fd55555
 8015878:	db6fabff 	.word	0xdb6fabff
 801587c:	3fdb6db6 	.word	0x3fdb6db6
 8015880:	33333303 	.word	0x33333303
 8015884:	3fe33333 	.word	0x3fe33333
 8015888:	e0000000 	.word	0xe0000000
 801588c:	3feec709 	.word	0x3feec709
 8015890:	dc3a03fd 	.word	0xdc3a03fd
 8015894:	3feec709 	.word	0x3feec709
 8015898:	145b01f5 	.word	0x145b01f5
 801589c:	be3e2fe0 	.word	0xbe3e2fe0
 80158a0:	00000000 	.word	0x00000000
 80158a4:	3ff00000 	.word	0x3ff00000
 80158a8:	7ff00000 	.word	0x7ff00000
 80158ac:	43400000 	.word	0x43400000
 80158b0:	0003988e 	.word	0x0003988e
 80158b4:	000bb679 	.word	0x000bb679
 80158b8:	08016970 	.word	0x08016970
 80158bc:	3ff00000 	.word	0x3ff00000
 80158c0:	40080000 	.word	0x40080000
 80158c4:	08016990 	.word	0x08016990
 80158c8:	08016980 	.word	0x08016980
 80158cc:	a3b5      	add	r3, pc, #724	; (adr r3, 8015ba4 <__ieee754_pow+0xa3c>)
 80158ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158d2:	4640      	mov	r0, r8
 80158d4:	4649      	mov	r1, r9
 80158d6:	f7ea fce1 	bl	800029c <__adddf3>
 80158da:	4622      	mov	r2, r4
 80158dc:	ec41 0b1a 	vmov	d10, r0, r1
 80158e0:	462b      	mov	r3, r5
 80158e2:	4630      	mov	r0, r6
 80158e4:	4639      	mov	r1, r7
 80158e6:	f7ea fcd7 	bl	8000298 <__aeabi_dsub>
 80158ea:	4602      	mov	r2, r0
 80158ec:	460b      	mov	r3, r1
 80158ee:	ec51 0b1a 	vmov	r0, r1, d10
 80158f2:	f7eb f919 	bl	8000b28 <__aeabi_dcmpgt>
 80158f6:	2800      	cmp	r0, #0
 80158f8:	f47f adf8 	bne.w	80154ec <__ieee754_pow+0x384>
 80158fc:	4aa4      	ldr	r2, [pc, #656]	; (8015b90 <__ieee754_pow+0xa28>)
 80158fe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015902:	4293      	cmp	r3, r2
 8015904:	f340 810b 	ble.w	8015b1e <__ieee754_pow+0x9b6>
 8015908:	151b      	asrs	r3, r3, #20
 801590a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801590e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8015912:	fa4a f303 	asr.w	r3, sl, r3
 8015916:	445b      	add	r3, fp
 8015918:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801591c:	4e9d      	ldr	r6, [pc, #628]	; (8015b94 <__ieee754_pow+0xa2c>)
 801591e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8015922:	4116      	asrs	r6, r2
 8015924:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8015928:	2000      	movs	r0, #0
 801592a:	ea23 0106 	bic.w	r1, r3, r6
 801592e:	f1c2 0214 	rsb	r2, r2, #20
 8015932:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8015936:	fa4a fa02 	asr.w	sl, sl, r2
 801593a:	f1bb 0f00 	cmp.w	fp, #0
 801593e:	4602      	mov	r2, r0
 8015940:	460b      	mov	r3, r1
 8015942:	4620      	mov	r0, r4
 8015944:	4629      	mov	r1, r5
 8015946:	bfb8      	it	lt
 8015948:	f1ca 0a00 	rsblt	sl, sl, #0
 801594c:	f7ea fca4 	bl	8000298 <__aeabi_dsub>
 8015950:	ec41 0b19 	vmov	d9, r0, r1
 8015954:	4642      	mov	r2, r8
 8015956:	464b      	mov	r3, r9
 8015958:	ec51 0b19 	vmov	r0, r1, d9
 801595c:	f7ea fc9e 	bl	800029c <__adddf3>
 8015960:	2400      	movs	r4, #0
 8015962:	a379      	add	r3, pc, #484	; (adr r3, 8015b48 <__ieee754_pow+0x9e0>)
 8015964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015968:	4620      	mov	r0, r4
 801596a:	460d      	mov	r5, r1
 801596c:	f7ea fe4c 	bl	8000608 <__aeabi_dmul>
 8015970:	ec53 2b19 	vmov	r2, r3, d9
 8015974:	4606      	mov	r6, r0
 8015976:	460f      	mov	r7, r1
 8015978:	4620      	mov	r0, r4
 801597a:	4629      	mov	r1, r5
 801597c:	f7ea fc8c 	bl	8000298 <__aeabi_dsub>
 8015980:	4602      	mov	r2, r0
 8015982:	460b      	mov	r3, r1
 8015984:	4640      	mov	r0, r8
 8015986:	4649      	mov	r1, r9
 8015988:	f7ea fc86 	bl	8000298 <__aeabi_dsub>
 801598c:	a370      	add	r3, pc, #448	; (adr r3, 8015b50 <__ieee754_pow+0x9e8>)
 801598e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015992:	f7ea fe39 	bl	8000608 <__aeabi_dmul>
 8015996:	a370      	add	r3, pc, #448	; (adr r3, 8015b58 <__ieee754_pow+0x9f0>)
 8015998:	e9d3 2300 	ldrd	r2, r3, [r3]
 801599c:	4680      	mov	r8, r0
 801599e:	4689      	mov	r9, r1
 80159a0:	4620      	mov	r0, r4
 80159a2:	4629      	mov	r1, r5
 80159a4:	f7ea fe30 	bl	8000608 <__aeabi_dmul>
 80159a8:	4602      	mov	r2, r0
 80159aa:	460b      	mov	r3, r1
 80159ac:	4640      	mov	r0, r8
 80159ae:	4649      	mov	r1, r9
 80159b0:	f7ea fc74 	bl	800029c <__adddf3>
 80159b4:	4604      	mov	r4, r0
 80159b6:	460d      	mov	r5, r1
 80159b8:	4602      	mov	r2, r0
 80159ba:	460b      	mov	r3, r1
 80159bc:	4630      	mov	r0, r6
 80159be:	4639      	mov	r1, r7
 80159c0:	f7ea fc6c 	bl	800029c <__adddf3>
 80159c4:	4632      	mov	r2, r6
 80159c6:	463b      	mov	r3, r7
 80159c8:	4680      	mov	r8, r0
 80159ca:	4689      	mov	r9, r1
 80159cc:	f7ea fc64 	bl	8000298 <__aeabi_dsub>
 80159d0:	4602      	mov	r2, r0
 80159d2:	460b      	mov	r3, r1
 80159d4:	4620      	mov	r0, r4
 80159d6:	4629      	mov	r1, r5
 80159d8:	f7ea fc5e 	bl	8000298 <__aeabi_dsub>
 80159dc:	4642      	mov	r2, r8
 80159de:	4606      	mov	r6, r0
 80159e0:	460f      	mov	r7, r1
 80159e2:	464b      	mov	r3, r9
 80159e4:	4640      	mov	r0, r8
 80159e6:	4649      	mov	r1, r9
 80159e8:	f7ea fe0e 	bl	8000608 <__aeabi_dmul>
 80159ec:	a35c      	add	r3, pc, #368	; (adr r3, 8015b60 <__ieee754_pow+0x9f8>)
 80159ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159f2:	4604      	mov	r4, r0
 80159f4:	460d      	mov	r5, r1
 80159f6:	f7ea fe07 	bl	8000608 <__aeabi_dmul>
 80159fa:	a35b      	add	r3, pc, #364	; (adr r3, 8015b68 <__ieee754_pow+0xa00>)
 80159fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a00:	f7ea fc4a 	bl	8000298 <__aeabi_dsub>
 8015a04:	4622      	mov	r2, r4
 8015a06:	462b      	mov	r3, r5
 8015a08:	f7ea fdfe 	bl	8000608 <__aeabi_dmul>
 8015a0c:	a358      	add	r3, pc, #352	; (adr r3, 8015b70 <__ieee754_pow+0xa08>)
 8015a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a12:	f7ea fc43 	bl	800029c <__adddf3>
 8015a16:	4622      	mov	r2, r4
 8015a18:	462b      	mov	r3, r5
 8015a1a:	f7ea fdf5 	bl	8000608 <__aeabi_dmul>
 8015a1e:	a356      	add	r3, pc, #344	; (adr r3, 8015b78 <__ieee754_pow+0xa10>)
 8015a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a24:	f7ea fc38 	bl	8000298 <__aeabi_dsub>
 8015a28:	4622      	mov	r2, r4
 8015a2a:	462b      	mov	r3, r5
 8015a2c:	f7ea fdec 	bl	8000608 <__aeabi_dmul>
 8015a30:	a353      	add	r3, pc, #332	; (adr r3, 8015b80 <__ieee754_pow+0xa18>)
 8015a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a36:	f7ea fc31 	bl	800029c <__adddf3>
 8015a3a:	4622      	mov	r2, r4
 8015a3c:	462b      	mov	r3, r5
 8015a3e:	f7ea fde3 	bl	8000608 <__aeabi_dmul>
 8015a42:	4602      	mov	r2, r0
 8015a44:	460b      	mov	r3, r1
 8015a46:	4640      	mov	r0, r8
 8015a48:	4649      	mov	r1, r9
 8015a4a:	f7ea fc25 	bl	8000298 <__aeabi_dsub>
 8015a4e:	4604      	mov	r4, r0
 8015a50:	460d      	mov	r5, r1
 8015a52:	4602      	mov	r2, r0
 8015a54:	460b      	mov	r3, r1
 8015a56:	4640      	mov	r0, r8
 8015a58:	4649      	mov	r1, r9
 8015a5a:	f7ea fdd5 	bl	8000608 <__aeabi_dmul>
 8015a5e:	2200      	movs	r2, #0
 8015a60:	ec41 0b19 	vmov	d9, r0, r1
 8015a64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015a68:	4620      	mov	r0, r4
 8015a6a:	4629      	mov	r1, r5
 8015a6c:	f7ea fc14 	bl	8000298 <__aeabi_dsub>
 8015a70:	4602      	mov	r2, r0
 8015a72:	460b      	mov	r3, r1
 8015a74:	ec51 0b19 	vmov	r0, r1, d9
 8015a78:	f7ea fef0 	bl	800085c <__aeabi_ddiv>
 8015a7c:	4632      	mov	r2, r6
 8015a7e:	4604      	mov	r4, r0
 8015a80:	460d      	mov	r5, r1
 8015a82:	463b      	mov	r3, r7
 8015a84:	4640      	mov	r0, r8
 8015a86:	4649      	mov	r1, r9
 8015a88:	f7ea fdbe 	bl	8000608 <__aeabi_dmul>
 8015a8c:	4632      	mov	r2, r6
 8015a8e:	463b      	mov	r3, r7
 8015a90:	f7ea fc04 	bl	800029c <__adddf3>
 8015a94:	4602      	mov	r2, r0
 8015a96:	460b      	mov	r3, r1
 8015a98:	4620      	mov	r0, r4
 8015a9a:	4629      	mov	r1, r5
 8015a9c:	f7ea fbfc 	bl	8000298 <__aeabi_dsub>
 8015aa0:	4642      	mov	r2, r8
 8015aa2:	464b      	mov	r3, r9
 8015aa4:	f7ea fbf8 	bl	8000298 <__aeabi_dsub>
 8015aa8:	460b      	mov	r3, r1
 8015aaa:	4602      	mov	r2, r0
 8015aac:	493a      	ldr	r1, [pc, #232]	; (8015b98 <__ieee754_pow+0xa30>)
 8015aae:	2000      	movs	r0, #0
 8015ab0:	f7ea fbf2 	bl	8000298 <__aeabi_dsub>
 8015ab4:	e9cd 0100 	strd	r0, r1, [sp]
 8015ab8:	9b01      	ldr	r3, [sp, #4]
 8015aba:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8015abe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015ac2:	da2f      	bge.n	8015b24 <__ieee754_pow+0x9bc>
 8015ac4:	4650      	mov	r0, sl
 8015ac6:	ed9d 0b00 	vldr	d0, [sp]
 8015aca:	f000 f9c1 	bl	8015e50 <scalbn>
 8015ace:	ec51 0b10 	vmov	r0, r1, d0
 8015ad2:	ec53 2b18 	vmov	r2, r3, d8
 8015ad6:	f7ff bbe0 	b.w	801529a <__ieee754_pow+0x132>
 8015ada:	4b30      	ldr	r3, [pc, #192]	; (8015b9c <__ieee754_pow+0xa34>)
 8015adc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8015ae0:	429e      	cmp	r6, r3
 8015ae2:	f77f af0b 	ble.w	80158fc <__ieee754_pow+0x794>
 8015ae6:	4b2e      	ldr	r3, [pc, #184]	; (8015ba0 <__ieee754_pow+0xa38>)
 8015ae8:	440b      	add	r3, r1
 8015aea:	4303      	orrs	r3, r0
 8015aec:	d00b      	beq.n	8015b06 <__ieee754_pow+0x99e>
 8015aee:	a326      	add	r3, pc, #152	; (adr r3, 8015b88 <__ieee754_pow+0xa20>)
 8015af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015af4:	ec51 0b18 	vmov	r0, r1, d8
 8015af8:	f7ea fd86 	bl	8000608 <__aeabi_dmul>
 8015afc:	a322      	add	r3, pc, #136	; (adr r3, 8015b88 <__ieee754_pow+0xa20>)
 8015afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b02:	f7ff bbca 	b.w	801529a <__ieee754_pow+0x132>
 8015b06:	4622      	mov	r2, r4
 8015b08:	462b      	mov	r3, r5
 8015b0a:	f7ea fbc5 	bl	8000298 <__aeabi_dsub>
 8015b0e:	4642      	mov	r2, r8
 8015b10:	464b      	mov	r3, r9
 8015b12:	f7ea ffff 	bl	8000b14 <__aeabi_dcmpge>
 8015b16:	2800      	cmp	r0, #0
 8015b18:	f43f aef0 	beq.w	80158fc <__ieee754_pow+0x794>
 8015b1c:	e7e7      	b.n	8015aee <__ieee754_pow+0x986>
 8015b1e:	f04f 0a00 	mov.w	sl, #0
 8015b22:	e717      	b.n	8015954 <__ieee754_pow+0x7ec>
 8015b24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015b28:	4619      	mov	r1, r3
 8015b2a:	e7d2      	b.n	8015ad2 <__ieee754_pow+0x96a>
 8015b2c:	491a      	ldr	r1, [pc, #104]	; (8015b98 <__ieee754_pow+0xa30>)
 8015b2e:	2000      	movs	r0, #0
 8015b30:	f7ff bb9e 	b.w	8015270 <__ieee754_pow+0x108>
 8015b34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015b38:	f7ff bb9a 	b.w	8015270 <__ieee754_pow+0x108>
 8015b3c:	9000      	str	r0, [sp, #0]
 8015b3e:	f7ff bb76 	b.w	801522e <__ieee754_pow+0xc6>
 8015b42:	2100      	movs	r1, #0
 8015b44:	f7ff bb60 	b.w	8015208 <__ieee754_pow+0xa0>
 8015b48:	00000000 	.word	0x00000000
 8015b4c:	3fe62e43 	.word	0x3fe62e43
 8015b50:	fefa39ef 	.word	0xfefa39ef
 8015b54:	3fe62e42 	.word	0x3fe62e42
 8015b58:	0ca86c39 	.word	0x0ca86c39
 8015b5c:	be205c61 	.word	0xbe205c61
 8015b60:	72bea4d0 	.word	0x72bea4d0
 8015b64:	3e663769 	.word	0x3e663769
 8015b68:	c5d26bf1 	.word	0xc5d26bf1
 8015b6c:	3ebbbd41 	.word	0x3ebbbd41
 8015b70:	af25de2c 	.word	0xaf25de2c
 8015b74:	3f11566a 	.word	0x3f11566a
 8015b78:	16bebd93 	.word	0x16bebd93
 8015b7c:	3f66c16c 	.word	0x3f66c16c
 8015b80:	5555553e 	.word	0x5555553e
 8015b84:	3fc55555 	.word	0x3fc55555
 8015b88:	c2f8f359 	.word	0xc2f8f359
 8015b8c:	01a56e1f 	.word	0x01a56e1f
 8015b90:	3fe00000 	.word	0x3fe00000
 8015b94:	000fffff 	.word	0x000fffff
 8015b98:	3ff00000 	.word	0x3ff00000
 8015b9c:	4090cbff 	.word	0x4090cbff
 8015ba0:	3f6f3400 	.word	0x3f6f3400
 8015ba4:	652b82fe 	.word	0x652b82fe
 8015ba8:	3c971547 	.word	0x3c971547

08015bac <__ieee754_sqrt>:
 8015bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bb0:	ec55 4b10 	vmov	r4, r5, d0
 8015bb4:	4e56      	ldr	r6, [pc, #344]	; (8015d10 <__ieee754_sqrt+0x164>)
 8015bb6:	43ae      	bics	r6, r5
 8015bb8:	ee10 0a10 	vmov	r0, s0
 8015bbc:	ee10 3a10 	vmov	r3, s0
 8015bc0:	4629      	mov	r1, r5
 8015bc2:	462a      	mov	r2, r5
 8015bc4:	d110      	bne.n	8015be8 <__ieee754_sqrt+0x3c>
 8015bc6:	ee10 2a10 	vmov	r2, s0
 8015bca:	462b      	mov	r3, r5
 8015bcc:	f7ea fd1c 	bl	8000608 <__aeabi_dmul>
 8015bd0:	4602      	mov	r2, r0
 8015bd2:	460b      	mov	r3, r1
 8015bd4:	4620      	mov	r0, r4
 8015bd6:	4629      	mov	r1, r5
 8015bd8:	f7ea fb60 	bl	800029c <__adddf3>
 8015bdc:	4604      	mov	r4, r0
 8015bde:	460d      	mov	r5, r1
 8015be0:	ec45 4b10 	vmov	d0, r4, r5
 8015be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015be8:	2d00      	cmp	r5, #0
 8015bea:	dc10      	bgt.n	8015c0e <__ieee754_sqrt+0x62>
 8015bec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015bf0:	4330      	orrs	r0, r6
 8015bf2:	d0f5      	beq.n	8015be0 <__ieee754_sqrt+0x34>
 8015bf4:	b15d      	cbz	r5, 8015c0e <__ieee754_sqrt+0x62>
 8015bf6:	ee10 2a10 	vmov	r2, s0
 8015bfa:	462b      	mov	r3, r5
 8015bfc:	ee10 0a10 	vmov	r0, s0
 8015c00:	f7ea fb4a 	bl	8000298 <__aeabi_dsub>
 8015c04:	4602      	mov	r2, r0
 8015c06:	460b      	mov	r3, r1
 8015c08:	f7ea fe28 	bl	800085c <__aeabi_ddiv>
 8015c0c:	e7e6      	b.n	8015bdc <__ieee754_sqrt+0x30>
 8015c0e:	1509      	asrs	r1, r1, #20
 8015c10:	d076      	beq.n	8015d00 <__ieee754_sqrt+0x154>
 8015c12:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8015c16:	07ce      	lsls	r6, r1, #31
 8015c18:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8015c1c:	bf5e      	ittt	pl
 8015c1e:	0fda      	lsrpl	r2, r3, #31
 8015c20:	005b      	lslpl	r3, r3, #1
 8015c22:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8015c26:	0fda      	lsrs	r2, r3, #31
 8015c28:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8015c2c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8015c30:	2000      	movs	r0, #0
 8015c32:	106d      	asrs	r5, r5, #1
 8015c34:	005b      	lsls	r3, r3, #1
 8015c36:	f04f 0e16 	mov.w	lr, #22
 8015c3a:	4684      	mov	ip, r0
 8015c3c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015c40:	eb0c 0401 	add.w	r4, ip, r1
 8015c44:	4294      	cmp	r4, r2
 8015c46:	bfde      	ittt	le
 8015c48:	1b12      	suble	r2, r2, r4
 8015c4a:	eb04 0c01 	addle.w	ip, r4, r1
 8015c4e:	1840      	addle	r0, r0, r1
 8015c50:	0052      	lsls	r2, r2, #1
 8015c52:	f1be 0e01 	subs.w	lr, lr, #1
 8015c56:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8015c5a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8015c5e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015c62:	d1ed      	bne.n	8015c40 <__ieee754_sqrt+0x94>
 8015c64:	4671      	mov	r1, lr
 8015c66:	2720      	movs	r7, #32
 8015c68:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8015c6c:	4562      	cmp	r2, ip
 8015c6e:	eb04 060e 	add.w	r6, r4, lr
 8015c72:	dc02      	bgt.n	8015c7a <__ieee754_sqrt+0xce>
 8015c74:	d113      	bne.n	8015c9e <__ieee754_sqrt+0xf2>
 8015c76:	429e      	cmp	r6, r3
 8015c78:	d811      	bhi.n	8015c9e <__ieee754_sqrt+0xf2>
 8015c7a:	2e00      	cmp	r6, #0
 8015c7c:	eb06 0e04 	add.w	lr, r6, r4
 8015c80:	da43      	bge.n	8015d0a <__ieee754_sqrt+0x15e>
 8015c82:	f1be 0f00 	cmp.w	lr, #0
 8015c86:	db40      	blt.n	8015d0a <__ieee754_sqrt+0x15e>
 8015c88:	f10c 0801 	add.w	r8, ip, #1
 8015c8c:	eba2 020c 	sub.w	r2, r2, ip
 8015c90:	429e      	cmp	r6, r3
 8015c92:	bf88      	it	hi
 8015c94:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8015c98:	1b9b      	subs	r3, r3, r6
 8015c9a:	4421      	add	r1, r4
 8015c9c:	46c4      	mov	ip, r8
 8015c9e:	0052      	lsls	r2, r2, #1
 8015ca0:	3f01      	subs	r7, #1
 8015ca2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8015ca6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8015caa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015cae:	d1dd      	bne.n	8015c6c <__ieee754_sqrt+0xc0>
 8015cb0:	4313      	orrs	r3, r2
 8015cb2:	d006      	beq.n	8015cc2 <__ieee754_sqrt+0x116>
 8015cb4:	1c4c      	adds	r4, r1, #1
 8015cb6:	bf13      	iteet	ne
 8015cb8:	3101      	addne	r1, #1
 8015cba:	3001      	addeq	r0, #1
 8015cbc:	4639      	moveq	r1, r7
 8015cbe:	f021 0101 	bicne.w	r1, r1, #1
 8015cc2:	1043      	asrs	r3, r0, #1
 8015cc4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8015cc8:	0849      	lsrs	r1, r1, #1
 8015cca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8015cce:	07c2      	lsls	r2, r0, #31
 8015cd0:	bf48      	it	mi
 8015cd2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8015cd6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8015cda:	460c      	mov	r4, r1
 8015cdc:	463d      	mov	r5, r7
 8015cde:	e77f      	b.n	8015be0 <__ieee754_sqrt+0x34>
 8015ce0:	0ada      	lsrs	r2, r3, #11
 8015ce2:	3815      	subs	r0, #21
 8015ce4:	055b      	lsls	r3, r3, #21
 8015ce6:	2a00      	cmp	r2, #0
 8015ce8:	d0fa      	beq.n	8015ce0 <__ieee754_sqrt+0x134>
 8015cea:	02d7      	lsls	r7, r2, #11
 8015cec:	d50a      	bpl.n	8015d04 <__ieee754_sqrt+0x158>
 8015cee:	f1c1 0420 	rsb	r4, r1, #32
 8015cf2:	fa23 f404 	lsr.w	r4, r3, r4
 8015cf6:	1e4d      	subs	r5, r1, #1
 8015cf8:	408b      	lsls	r3, r1
 8015cfa:	4322      	orrs	r2, r4
 8015cfc:	1b41      	subs	r1, r0, r5
 8015cfe:	e788      	b.n	8015c12 <__ieee754_sqrt+0x66>
 8015d00:	4608      	mov	r0, r1
 8015d02:	e7f0      	b.n	8015ce6 <__ieee754_sqrt+0x13a>
 8015d04:	0052      	lsls	r2, r2, #1
 8015d06:	3101      	adds	r1, #1
 8015d08:	e7ef      	b.n	8015cea <__ieee754_sqrt+0x13e>
 8015d0a:	46e0      	mov	r8, ip
 8015d0c:	e7be      	b.n	8015c8c <__ieee754_sqrt+0xe0>
 8015d0e:	bf00      	nop
 8015d10:	7ff00000 	.word	0x7ff00000

08015d14 <fabs>:
 8015d14:	ec51 0b10 	vmov	r0, r1, d0
 8015d18:	ee10 2a10 	vmov	r2, s0
 8015d1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015d20:	ec43 2b10 	vmov	d0, r2, r3
 8015d24:	4770      	bx	lr

08015d26 <finite>:
 8015d26:	b082      	sub	sp, #8
 8015d28:	ed8d 0b00 	vstr	d0, [sp]
 8015d2c:	9801      	ldr	r0, [sp, #4]
 8015d2e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8015d32:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8015d36:	0fc0      	lsrs	r0, r0, #31
 8015d38:	b002      	add	sp, #8
 8015d3a:	4770      	bx	lr

08015d3c <rint>:
 8015d3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015d3e:	ec51 0b10 	vmov	r0, r1, d0
 8015d42:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015d46:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8015d4a:	2e13      	cmp	r6, #19
 8015d4c:	ee10 4a10 	vmov	r4, s0
 8015d50:	460b      	mov	r3, r1
 8015d52:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8015d56:	dc58      	bgt.n	8015e0a <rint+0xce>
 8015d58:	2e00      	cmp	r6, #0
 8015d5a:	da2b      	bge.n	8015db4 <rint+0x78>
 8015d5c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8015d60:	4302      	orrs	r2, r0
 8015d62:	d023      	beq.n	8015dac <rint+0x70>
 8015d64:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8015d68:	4302      	orrs	r2, r0
 8015d6a:	4254      	negs	r4, r2
 8015d6c:	4314      	orrs	r4, r2
 8015d6e:	0c4b      	lsrs	r3, r1, #17
 8015d70:	0b24      	lsrs	r4, r4, #12
 8015d72:	045b      	lsls	r3, r3, #17
 8015d74:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8015d78:	ea44 0103 	orr.w	r1, r4, r3
 8015d7c:	4b32      	ldr	r3, [pc, #200]	; (8015e48 <rint+0x10c>)
 8015d7e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8015d82:	e9d3 6700 	ldrd	r6, r7, [r3]
 8015d86:	4602      	mov	r2, r0
 8015d88:	460b      	mov	r3, r1
 8015d8a:	4630      	mov	r0, r6
 8015d8c:	4639      	mov	r1, r7
 8015d8e:	f7ea fa85 	bl	800029c <__adddf3>
 8015d92:	e9cd 0100 	strd	r0, r1, [sp]
 8015d96:	463b      	mov	r3, r7
 8015d98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015d9c:	4632      	mov	r2, r6
 8015d9e:	f7ea fa7b 	bl	8000298 <__aeabi_dsub>
 8015da2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015da6:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8015daa:	4639      	mov	r1, r7
 8015dac:	ec41 0b10 	vmov	d0, r0, r1
 8015db0:	b003      	add	sp, #12
 8015db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015db4:	4a25      	ldr	r2, [pc, #148]	; (8015e4c <rint+0x110>)
 8015db6:	4132      	asrs	r2, r6
 8015db8:	ea01 0702 	and.w	r7, r1, r2
 8015dbc:	4307      	orrs	r7, r0
 8015dbe:	d0f5      	beq.n	8015dac <rint+0x70>
 8015dc0:	0851      	lsrs	r1, r2, #1
 8015dc2:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8015dc6:	4314      	orrs	r4, r2
 8015dc8:	d00c      	beq.n	8015de4 <rint+0xa8>
 8015dca:	ea23 0201 	bic.w	r2, r3, r1
 8015dce:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8015dd2:	2e13      	cmp	r6, #19
 8015dd4:	fa43 f606 	asr.w	r6, r3, r6
 8015dd8:	bf0c      	ite	eq
 8015dda:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8015dde:	2400      	movne	r4, #0
 8015de0:	ea42 0306 	orr.w	r3, r2, r6
 8015de4:	4918      	ldr	r1, [pc, #96]	; (8015e48 <rint+0x10c>)
 8015de6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8015dea:	4622      	mov	r2, r4
 8015dec:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015df0:	4620      	mov	r0, r4
 8015df2:	4629      	mov	r1, r5
 8015df4:	f7ea fa52 	bl	800029c <__adddf3>
 8015df8:	e9cd 0100 	strd	r0, r1, [sp]
 8015dfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015e00:	4622      	mov	r2, r4
 8015e02:	462b      	mov	r3, r5
 8015e04:	f7ea fa48 	bl	8000298 <__aeabi_dsub>
 8015e08:	e7d0      	b.n	8015dac <rint+0x70>
 8015e0a:	2e33      	cmp	r6, #51	; 0x33
 8015e0c:	dd07      	ble.n	8015e1e <rint+0xe2>
 8015e0e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015e12:	d1cb      	bne.n	8015dac <rint+0x70>
 8015e14:	ee10 2a10 	vmov	r2, s0
 8015e18:	f7ea fa40 	bl	800029c <__adddf3>
 8015e1c:	e7c6      	b.n	8015dac <rint+0x70>
 8015e1e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8015e22:	f04f 36ff 	mov.w	r6, #4294967295
 8015e26:	40d6      	lsrs	r6, r2
 8015e28:	4230      	tst	r0, r6
 8015e2a:	d0bf      	beq.n	8015dac <rint+0x70>
 8015e2c:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8015e30:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8015e34:	bf1f      	itttt	ne
 8015e36:	ea24 0101 	bicne.w	r1, r4, r1
 8015e3a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8015e3e:	fa44 f202 	asrne.w	r2, r4, r2
 8015e42:	ea41 0402 	orrne.w	r4, r1, r2
 8015e46:	e7cd      	b.n	8015de4 <rint+0xa8>
 8015e48:	080169a0 	.word	0x080169a0
 8015e4c:	000fffff 	.word	0x000fffff

08015e50 <scalbn>:
 8015e50:	b570      	push	{r4, r5, r6, lr}
 8015e52:	ec55 4b10 	vmov	r4, r5, d0
 8015e56:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8015e5a:	4606      	mov	r6, r0
 8015e5c:	462b      	mov	r3, r5
 8015e5e:	b99a      	cbnz	r2, 8015e88 <scalbn+0x38>
 8015e60:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015e64:	4323      	orrs	r3, r4
 8015e66:	d036      	beq.n	8015ed6 <scalbn+0x86>
 8015e68:	4b39      	ldr	r3, [pc, #228]	; (8015f50 <scalbn+0x100>)
 8015e6a:	4629      	mov	r1, r5
 8015e6c:	ee10 0a10 	vmov	r0, s0
 8015e70:	2200      	movs	r2, #0
 8015e72:	f7ea fbc9 	bl	8000608 <__aeabi_dmul>
 8015e76:	4b37      	ldr	r3, [pc, #220]	; (8015f54 <scalbn+0x104>)
 8015e78:	429e      	cmp	r6, r3
 8015e7a:	4604      	mov	r4, r0
 8015e7c:	460d      	mov	r5, r1
 8015e7e:	da10      	bge.n	8015ea2 <scalbn+0x52>
 8015e80:	a32b      	add	r3, pc, #172	; (adr r3, 8015f30 <scalbn+0xe0>)
 8015e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e86:	e03a      	b.n	8015efe <scalbn+0xae>
 8015e88:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015e8c:	428a      	cmp	r2, r1
 8015e8e:	d10c      	bne.n	8015eaa <scalbn+0x5a>
 8015e90:	ee10 2a10 	vmov	r2, s0
 8015e94:	4620      	mov	r0, r4
 8015e96:	4629      	mov	r1, r5
 8015e98:	f7ea fa00 	bl	800029c <__adddf3>
 8015e9c:	4604      	mov	r4, r0
 8015e9e:	460d      	mov	r5, r1
 8015ea0:	e019      	b.n	8015ed6 <scalbn+0x86>
 8015ea2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015ea6:	460b      	mov	r3, r1
 8015ea8:	3a36      	subs	r2, #54	; 0x36
 8015eaa:	4432      	add	r2, r6
 8015eac:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8015eb0:	428a      	cmp	r2, r1
 8015eb2:	dd08      	ble.n	8015ec6 <scalbn+0x76>
 8015eb4:	2d00      	cmp	r5, #0
 8015eb6:	a120      	add	r1, pc, #128	; (adr r1, 8015f38 <scalbn+0xe8>)
 8015eb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015ebc:	da1c      	bge.n	8015ef8 <scalbn+0xa8>
 8015ebe:	a120      	add	r1, pc, #128	; (adr r1, 8015f40 <scalbn+0xf0>)
 8015ec0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015ec4:	e018      	b.n	8015ef8 <scalbn+0xa8>
 8015ec6:	2a00      	cmp	r2, #0
 8015ec8:	dd08      	ble.n	8015edc <scalbn+0x8c>
 8015eca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015ece:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015ed2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015ed6:	ec45 4b10 	vmov	d0, r4, r5
 8015eda:	bd70      	pop	{r4, r5, r6, pc}
 8015edc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8015ee0:	da19      	bge.n	8015f16 <scalbn+0xc6>
 8015ee2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015ee6:	429e      	cmp	r6, r3
 8015ee8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8015eec:	dd0a      	ble.n	8015f04 <scalbn+0xb4>
 8015eee:	a112      	add	r1, pc, #72	; (adr r1, 8015f38 <scalbn+0xe8>)
 8015ef0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d1e2      	bne.n	8015ebe <scalbn+0x6e>
 8015ef8:	a30f      	add	r3, pc, #60	; (adr r3, 8015f38 <scalbn+0xe8>)
 8015efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015efe:	f7ea fb83 	bl	8000608 <__aeabi_dmul>
 8015f02:	e7cb      	b.n	8015e9c <scalbn+0x4c>
 8015f04:	a10a      	add	r1, pc, #40	; (adr r1, 8015f30 <scalbn+0xe0>)
 8015f06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d0b8      	beq.n	8015e80 <scalbn+0x30>
 8015f0e:	a10e      	add	r1, pc, #56	; (adr r1, 8015f48 <scalbn+0xf8>)
 8015f10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015f14:	e7b4      	b.n	8015e80 <scalbn+0x30>
 8015f16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015f1a:	3236      	adds	r2, #54	; 0x36
 8015f1c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015f20:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8015f24:	4620      	mov	r0, r4
 8015f26:	4b0c      	ldr	r3, [pc, #48]	; (8015f58 <scalbn+0x108>)
 8015f28:	2200      	movs	r2, #0
 8015f2a:	e7e8      	b.n	8015efe <scalbn+0xae>
 8015f2c:	f3af 8000 	nop.w
 8015f30:	c2f8f359 	.word	0xc2f8f359
 8015f34:	01a56e1f 	.word	0x01a56e1f
 8015f38:	8800759c 	.word	0x8800759c
 8015f3c:	7e37e43c 	.word	0x7e37e43c
 8015f40:	8800759c 	.word	0x8800759c
 8015f44:	fe37e43c 	.word	0xfe37e43c
 8015f48:	c2f8f359 	.word	0xc2f8f359
 8015f4c:	81a56e1f 	.word	0x81a56e1f
 8015f50:	43500000 	.word	0x43500000
 8015f54:	ffff3cb0 	.word	0xffff3cb0
 8015f58:	3c900000 	.word	0x3c900000

08015f5c <_init>:
 8015f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f5e:	bf00      	nop
 8015f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015f62:	bc08      	pop	{r3}
 8015f64:	469e      	mov	lr, r3
 8015f66:	4770      	bx	lr

08015f68 <_fini>:
 8015f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f6a:	bf00      	nop
 8015f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015f6e:	bc08      	pop	{r3}
 8015f70:	469e      	mov	lr, r3
 8015f72:	4770      	bx	lr
