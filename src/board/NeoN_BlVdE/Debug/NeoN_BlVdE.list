
NeoN_BlVdE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015b5c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a48  08015d00  08015d00  00025d00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016748  08016748  00030230  2**0
                  CONTENTS
  4 .ARM          00000008  08016748  08016748  00026748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016750  08016750  00030230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016750  08016750  00026750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016754  08016754  00026754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  08016758  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004804  20000230  08016988  00030230  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a34  08016988  00034a34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036854  00000000  00000000  00030260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057e2  00000000  00000000  00066ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021e0  00000000  00000000  0006c298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fd0  00000000  00000000  0006e478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f626  00000000  00000000  00070448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027d73  00000000  00000000  0008fa6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9ca2  00000000  00000000  000b77e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00161483  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a738  00000000  00000000  001614d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000230 	.word	0x20000230
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08015ce4 	.word	0x08015ce4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000234 	.word	0x20000234
 80001dc:	08015ce4 	.word	0x08015ce4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <_write>:
	}
	return crc;
}

int _write (int file, char *ptr, int len)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY); return 0;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	b29a      	uxth	r2, r3
 800100c:	f04f 33ff 	mov.w	r3, #4294967295
 8001010:	68b9      	ldr	r1, [r7, #8]
 8001012:	4804      	ldr	r0, [pc, #16]	; (8001024 <_write+0x28>)
 8001014:	f009 f8f3 	bl	800a1fe <HAL_UART_Transmit>
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20002838 	.word	0x20002838

08001028 <super_smart_write>:
int super_smart_write(unsigned char *buf, unsigned short len, int8_t * state_sd_from_m)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	460b      	mov	r3, r1
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	817b      	strh	r3, [r7, #10]
		static FATFS fileSystem; // переменная типа FATFS
		static FIL testFile; // хендлер файла
		static UINT bw;
		static FRESULT res;
		static int8_t state_sd = 0;
		const char * path = "testFile.bin"; // название файла
 8001036:	4b4d      	ldr	r3, [pc, #308]	; (800116c <super_smart_write+0x144>)
 8001038:	617b      	str	r3, [r7, #20]

		if(state_sd == 0)
 800103a:	4b4d      	ldr	r3, [pc, #308]	; (8001170 <super_smart_write+0x148>)
 800103c:	f993 3000 	ldrsb.w	r3, [r3]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d12a      	bne.n	800109a <super_smart_write+0x72>
		{
			extern Disk_drvTypeDef  disk;
			disk.is_initialized[0] = 0;
 8001044:	4b4b      	ldr	r3, [pc, #300]	; (8001174 <super_smart_write+0x14c>)
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
			memset(&fileSystem, 0x00, sizeof(fileSystem));
 800104a:	f241 0238 	movw	r2, #4152	; 0x1038
 800104e:	2100      	movs	r1, #0
 8001050:	4849      	ldr	r0, [pc, #292]	; (8001178 <super_smart_write+0x150>)
 8001052:	f00e fe95 	bl	800fd80 <memset>
			res = f_mount(&fileSystem, "0", 1);
 8001056:	2201      	movs	r2, #1
 8001058:	4948      	ldr	r1, [pc, #288]	; (800117c <super_smart_write+0x154>)
 800105a:	4847      	ldr	r0, [pc, #284]	; (8001178 <super_smart_write+0x150>)
 800105c:	f00c fc26 	bl	800d8ac <f_mount>
 8001060:	4603      	mov	r3, r0
 8001062:	461a      	mov	r2, r3
 8001064:	4b46      	ldr	r3, [pc, #280]	; (8001180 <super_smart_write+0x158>)
 8001066:	701a      	strb	r2, [r3, #0]
			if(res == FR_OK){state_sd = 1; *state_sd_from_m = state_sd;}
 8001068:	4b45      	ldr	r3, [pc, #276]	; (8001180 <super_smart_write+0x158>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d108      	bne.n	8001082 <super_smart_write+0x5a>
 8001070:	4b3f      	ldr	r3, [pc, #252]	; (8001170 <super_smart_write+0x148>)
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
 8001076:	4b3e      	ldr	r3, [pc, #248]	; (8001170 <super_smart_write+0x148>)
 8001078:	f993 2000 	ldrsb.w	r2, [r3]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	701a      	strb	r2, [r3, #0]
 8001080:	e00b      	b.n	800109a <super_smart_write+0x72>
			else
			{
				res = f_mount(0, "0", 1);
 8001082:	2201      	movs	r2, #1
 8001084:	493d      	ldr	r1, [pc, #244]	; (800117c <super_smart_write+0x154>)
 8001086:	2000      	movs	r0, #0
 8001088:	f00c fc10 	bl	800d8ac <f_mount>
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	4b3b      	ldr	r3, [pc, #236]	; (8001180 <super_smart_write+0x158>)
 8001092:	701a      	strb	r2, [r3, #0]
				return -1;
 8001094:	f04f 33ff 	mov.w	r3, #4294967295
 8001098:	e064      	b.n	8001164 <super_smart_write+0x13c>
			}
		}
		if(state_sd == 1)
 800109a:	4b35      	ldr	r3, [pc, #212]	; (8001170 <super_smart_write+0x148>)
 800109c:	f993 3000 	ldrsb.w	r3, [r3]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d121      	bne.n	80010e8 <super_smart_write+0xc0>
		{
			 *state_sd_from_m = state_sd;
 80010a4:	4b32      	ldr	r3, [pc, #200]	; (8001170 <super_smart_write+0x148>)
 80010a6:	f993 2000 	ldrsb.w	r2, [r3]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	701a      	strb	r2, [r3, #0]
			res = f_open(&testFile, path, FA_WRITE | FA_OPEN_APPEND);
 80010ae:	2232      	movs	r2, #50	; 0x32
 80010b0:	6979      	ldr	r1, [r7, #20]
 80010b2:	4834      	ldr	r0, [pc, #208]	; (8001184 <super_smart_write+0x15c>)
 80010b4:	f00c fc40 	bl	800d938 <f_open>
 80010b8:	4603      	mov	r3, r0
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b30      	ldr	r3, [pc, #192]	; (8001180 <super_smart_write+0x158>)
 80010be:	701a      	strb	r2, [r3, #0]
			if(res == FR_OK) state_sd = 2;
 80010c0:	4b2f      	ldr	r3, [pc, #188]	; (8001180 <super_smart_write+0x158>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d103      	bne.n	80010d0 <super_smart_write+0xa8>
 80010c8:	4b29      	ldr	r3, [pc, #164]	; (8001170 <super_smart_write+0x148>)
 80010ca:	2202      	movs	r2, #2
 80010cc:	701a      	strb	r2, [r3, #0]
 80010ce:	e00b      	b.n	80010e8 <super_smart_write+0xc0>
			else
			{
				state_sd = 0;
 80010d0:	4b27      	ldr	r3, [pc, #156]	; (8001170 <super_smart_write+0x148>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
				res = f_mount(0, "0", 1);
 80010d6:	2201      	movs	r2, #1
 80010d8:	4928      	ldr	r1, [pc, #160]	; (800117c <super_smart_write+0x154>)
 80010da:	2000      	movs	r0, #0
 80010dc:	f00c fbe6 	bl	800d8ac <f_mount>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	4b26      	ldr	r3, [pc, #152]	; (8001180 <super_smart_write+0x158>)
 80010e6:	701a      	strb	r2, [r3, #0]
			}
		}
		if (state_sd == 2)
 80010e8:	4b21      	ldr	r3, [pc, #132]	; (8001170 <super_smart_write+0x148>)
 80010ea:	f993 3000 	ldrsb.w	r3, [r3]
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d1a1      	bne.n	8001036 <super_smart_write+0xe>
		{
			 *state_sd_from_m = state_sd;
 80010f2:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <super_smart_write+0x148>)
 80010f4:	f993 2000 	ldrsb.w	r2, [r3]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	701a      	strb	r2, [r3, #0]
            res = f_write (&testFile,  (uint8_t *)buf, len, &bw);
 80010fc:	897a      	ldrh	r2, [r7, #10]
 80010fe:	4b22      	ldr	r3, [pc, #136]	; (8001188 <super_smart_write+0x160>)
 8001100:	68f9      	ldr	r1, [r7, #12]
 8001102:	4820      	ldr	r0, [pc, #128]	; (8001184 <super_smart_write+0x15c>)
 8001104:	f00c fde4 	bl	800dcd0 <f_write>
 8001108:	4603      	mov	r3, r0
 800110a:	461a      	mov	r2, r3
 800110c:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <super_smart_write+0x158>)
 800110e:	701a      	strb	r2, [r3, #0]
            if (HAL_GetTick() - start_time >= 10)
 8001110:	f004 fef6 	bl	8005f00 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	4b1d      	ldr	r3, [pc, #116]	; (800118c <super_smart_write+0x164>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b09      	cmp	r3, #9
 800111e:	d90b      	bls.n	8001138 <super_smart_write+0x110>
            {
            	res = f_sync(&testFile);
 8001120:	4818      	ldr	r0, [pc, #96]	; (8001184 <super_smart_write+0x15c>)
 8001122:	f00c ff69 	bl	800dff8 <f_sync>
 8001126:	4603      	mov	r3, r0
 8001128:	461a      	mov	r2, r3
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <super_smart_write+0x158>)
 800112c:	701a      	strb	r2, [r3, #0]
                start_time  = HAL_GetTick();
 800112e:	f004 fee7 	bl	8005f00 <HAL_GetTick>
 8001132:	4603      	mov	r3, r0
 8001134:	4a15      	ldr	r2, [pc, #84]	; (800118c <super_smart_write+0x164>)
 8001136:	6013      	str	r3, [r2, #0]
            }
	        if (res == FR_OK) return 0;
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <super_smart_write+0x158>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d101      	bne.n	8001144 <super_smart_write+0x11c>
 8001140:	2300      	movs	r3, #0
 8001142:	e00f      	b.n	8001164 <super_smart_write+0x13c>
            if (res != FR_OK)
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <super_smart_write+0x158>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	f43f af74 	beq.w	8001036 <super_smart_write+0xe>
            {
    			res = f_close(&testFile);
 800114e:	480d      	ldr	r0, [pc, #52]	; (8001184 <super_smart_write+0x15c>)
 8001150:	f00c ffd0 	bl	800e0f4 <f_close>
 8001154:	4603      	mov	r3, r0
 8001156:	461a      	mov	r2, r3
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <super_smart_write+0x158>)
 800115a:	701a      	strb	r2, [r3, #0]
            	state_sd = 1;
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <super_smart_write+0x148>)
 800115e:	2201      	movs	r2, #1
 8001160:	701a      	strb	r2, [r3, #0]
	{
 8001162:	e768      	b.n	8001036 <super_smart_write+0xe>
            }
		}
	}
}
 8001164:	4618      	mov	r0, r3
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	08015d00 	.word	0x08015d00
 8001170:	2000024c 	.word	0x2000024c
 8001174:	20002340 	.word	0x20002340
 8001178:	20000250 	.word	0x20000250
 800117c:	08015d10 	.word	0x08015d10
 8001180:	20001288 	.word	0x20001288
 8001184:	2000128c 	.word	0x2000128c
 8001188:	200022bc 	.word	0x200022bc
 800118c:	200022c0 	.word	0x200022c0

08001190 <app_main>:
	STATE_FOUND_ME_PLS
}state_t;


int app_main()
{
 8001190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001194:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8001198:	af00      	add	r7, sp, #0
	float lux_sun = 0;
 800119a:	f04f 0300 	mov.w	r3, #0
 800119e:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
	uint32_t start_time_io = HAL_GetTick();
 80011a2:	f004 fead 	bl	8005f00 <HAL_GetTick>
 80011a6:	f8c7 0238 	str.w	r0, [r7, #568]	; 0x238
	packet_ma_type_11_t packet_ma_type_11;
	packet_ma_type_12_t packet_ma_type_12 ;
 	packet_ma_type_2_t packet_ma_type_2 ;

	float quaternion[4] = {0};
 80011aa:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
	float seb_time_prev = 0;
 80011b8:	f04f 0300 	mov.w	r3, #0
 80011bc:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
	float seb_time = 0;
 80011c0:	f04f 0300 	mov.w	r3, #0
 80011c4:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
    float altitude;
    int fix;
    int64_t cookie;

    photorezistor_t photorezist;
    photorezist.resist = 2000;
 80011c8:	4b8f      	ldr	r3, [pc, #572]	; (8001408 <app_main+0x278>)
 80011ca:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    photorezist.hadc = 	&hadc1;
 80011ce:	4b8f      	ldr	r3, [pc, #572]	; (800140c <app_main+0x27c>)
 80011d0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

	int16_t temp_lis;
	int16_t mag[3] = {0};
 80011d4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	809a      	strh	r2, [r3, #4]
	stmdev_ctx_t ctx = {0};
 80011de:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80011e2:	461a      	mov	r2, r3
 80011e4:	2300      	movs	r3, #0
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	6053      	str	r3, [r2, #4]
 80011ea:	6093      	str	r3, [r2, #8]
    struct lis_spi_intf lis_spi;
	lis_spi.GPIO_Port = GPIOA;
 80011ec:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80011f0:	4a87      	ldr	r2, [pc, #540]	; (8001410 <app_main+0x280>)
 80011f2:	601a      	str	r2, [r3, #0]
	lis_spi.GPIO_Pin = GPIO_PIN_4;
 80011f4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80011f8:	2210      	movs	r2, #16
 80011fa:	809a      	strh	r2, [r3, #4]
	lis_spi.spi = &hspi1;
 80011fc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001200:	4a84      	ldr	r2, [pc, #528]	; (8001414 <app_main+0x284>)
 8001202:	609a      	str	r2, [r3, #8]
	lisset(&ctx, &lis_spi);
 8001204:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001208:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800120c:	4611      	mov	r1, r2
 800120e:	4618      	mov	r0, r3
 8001210:	f00d fb3c 	bl	800e88c <lisset>


	int16_t temperature_celsius_gyro;
	int16_t acc_g[3];
	int16_t gyro_dps[3];
	stmdev_ctx_t lsmctx = {0};
 8001214:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001218:	461a      	mov	r2, r3
 800121a:	2300      	movs	r3, #0
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	6053      	str	r3, [r2, #4]
 8001220:	6093      	str	r3, [r2, #8]
	struct lsm_spi_intf lsm_spi;
	lsm_spi.GPIO_Port = GPIOC;
 8001222:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001226:	4a7c      	ldr	r2, [pc, #496]	; (8001418 <app_main+0x288>)
 8001228:	601a      	str	r2, [r3, #0]
	lsm_spi.GPIO_Pin = GPIO_PIN_13;
 800122a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800122e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001232:	809a      	strh	r2, [r3, #4]
	lsm_spi.spi = &hspi1;
 8001234:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001238:	4a76      	ldr	r2, [pc, #472]	; (8001414 <app_main+0x284>)
 800123a:	609a      	str	r2, [r3, #8]
	lsmset(&lsmctx, &lsm_spi);
 800123c:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8001240:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001244:	4611      	mov	r1, r2
 8001246:	4618      	mov	r0, r3
 8001248:	f00d fdac 	bl	800eda4 <lsmset>
	gps_init();
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
	//__HAL_UART_ENABLE_IT(&huart1, UART_IT_ERR);
    }

    int bmeinit = 10000;
 800124c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001250:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    bme_important_shit bme_important;//////////////////////////////////BME
    if(BME_FLAG == 1){
    bmeinit = its_bme280_init(UNKNXW);
 8001254:	2000      	movs	r0, #0
 8001256:	f004 fc50 	bl	8005afa <its_bme280_init>
 800125a:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
    }
    uint8_t bme_gnd_cnt = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	f887 3233 	strb.w	r3, [r7, #563]	; 0x233
    double bme_press_ground = 0;
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	f04f 0300 	mov.w	r3, #0
 800126c:	e9c7 238a 	strd	r2, r3, [r7, #552]	; 0x228
    for(int i = 0; i < 10; i++)
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8001276:	e027      	b.n	80012c8 <app_main+0x138>
    {
    	its_bme280_read(UNKNXW, &bme_important);
 8001278:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800127c:	4619      	mov	r1, r3
 800127e:	2000      	movs	r0, #0
 8001280:	f004 fc82 	bl	8005b88 <its_bme280_read>
    	if(bme_important.pressure>90000){
 8001284:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001288:	e9d3 0100 	ldrd	r0, r1, [r3]
 800128c:	a35c      	add	r3, pc, #368	; (adr r3, 8001400 <app_main+0x270>)
 800128e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001292:	f7ff fc49 	bl	8000b28 <__aeabi_dcmpgt>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d010      	beq.n	80012be <app_main+0x12e>
    	bme_press_ground += bme_important.pressure;bme_gnd_cnt++;}
 800129c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 80012a8:	f7fe fff8 	bl	800029c <__adddf3>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	e9c7 238a 	strd	r2, r3, [r7, #552]	; 0x228
 80012b4:	f897 3233 	ldrb.w	r3, [r7, #563]	; 0x233
 80012b8:	3301      	adds	r3, #1
 80012ba:	f887 3233 	strb.w	r3, [r7, #563]	; 0x233
    for(int i = 0; i < 10; i++)
 80012be:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80012c2:	3301      	adds	r3, #1
 80012c4:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80012c8:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80012cc:	2b09      	cmp	r3, #9
 80012ce:	ddd3      	ble.n	8001278 <app_main+0xe8>
    }
    bme_press_ground = bme_press_ground/bme_gnd_cnt;
 80012d0:	f897 3233 	ldrb.w	r3, [r7, #563]	; 0x233
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff f92d 	bl	8000534 <__aeabi_i2d>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 80012e2:	f7ff fabb 	bl	800085c <__aeabi_ddiv>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	e9c7 238a 	strd	r2, r3, [r7, #552]	; 0x228

    int8_t state_sd = 0;//sd
 80012ee:	f107 03cf 	add.w	r3, r7, #207	; 0xcf
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
    int retin;

    tdc21_all_regs_t tdc21_all_regs;
    //создаем и настраиваем дескриптор тдс21
    tdcgp21_spi_pins_t tdcgp21_spi_pins;
    tdcgp21_spi_pins.ce_pin = 0;
 80012f6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80012fa:	2200      	movs	r2, #0
 80012fc:	809a      	strh	r2, [r3, #4]
    tdcgp21_spi_pins.ce_port = 0;
 80012fe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
    tdcgp21_spi_pins.cs_pin = GPIO_PIN_10;
 8001306:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800130a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800130e:	819a      	strh	r2, [r3, #12]
    tdcgp21_spi_pins.cs_port = GPIOB;
 8001310:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001314:	4a41      	ldr	r2, [pc, #260]	; (800141c <app_main+0x28c>)
 8001316:	609a      	str	r2, [r3, #8]
    tdcgp21_lovver_api_config_t tdcgp21_api_config;
    tdc21_spi_init(&tdcgp21_api_config, &hspi4, &tdcgp21_spi_pins);
 8001318:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800131c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001320:	493f      	ldr	r1, [pc, #252]	; (8001420 <app_main+0x290>)
 8001322:	4618      	mov	r0, r3
 8001324:	f00d f8a4 	bl	800e470 <tdc21_spi_init>
    tdc21_all_regs = tdc21_config(&tdcgp21_api_config);
 8001328:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800132c:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8001330:	4611      	mov	r1, r2
 8001332:	4618      	mov	r0, r3
 8001334:	f00d f8b4 	bl	800e4a0 <tdc21_config>
	tdcgp21_write_register(&tdcgp21_api_config, TDC21_WREG6, (uint8_t*)&r6, 4);*/


	//Создаем и настраиваем дескриптор радиомодуля nRF24L01
	nrf24_spi_pins_t nrf24_spi_pins;
	nrf24_spi_pins.ce_pin = GPIO_PIN_1;
 8001338:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800133c:	2202      	movs	r2, #2
 800133e:	809a      	strh	r2, [r3, #4]
	nrf24_spi_pins.ce_port = GPIOB;
 8001340:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001344:	4a35      	ldr	r2, [pc, #212]	; (800141c <app_main+0x28c>)
 8001346:	601a      	str	r2, [r3, #0]
	nrf24_spi_pins.cs_pin = GPIO_PIN_2;
 8001348:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800134c:	2204      	movs	r2, #4
 800134e:	819a      	strh	r2, [r3, #12]
	nrf24_spi_pins.cs_port = GPIOB;
 8001350:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001354:	4a31      	ldr	r2, [pc, #196]	; (800141c <app_main+0x28c>)
 8001356:	609a      	str	r2, [r3, #8]
	nrf24_lower_api_config_t nrf24_api_config;
	nrf24_spi_init(&nrf24_api_config, &hspi5, &nrf24_spi_pins);
 8001358:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800135c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001360:	4930      	ldr	r1, [pc, #192]	; (8001424 <app_main+0x294>)
 8001362:	4618      	mov	r0, r3
 8001364:	f00e f978 	bl	800f658 <nrf24_spi_init>

	//Перед настройкой регистров радио переводим его в standby mode
	//nrf24_mode_standby(&nrf24_api_config);
	nrf24_mode_power_down(&nrf24_api_config);
 8001368:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800136c:	4618      	mov	r0, r3
 800136e:	f00e fb70 	bl	800fa52 <nrf24_mode_power_down>

	// Настраиваем параметры радиопередачи
	nrf24_rf_config_t nrf24_rf_config;
	nrf24_rf_config.data_rate = NRF24_DATARATE_250_KBIT;
 8001372:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]
	nrf24_rf_config.rf_channel = 110;
 800137a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800137e:	226e      	movs	r2, #110	; 0x6e
 8001380:	709a      	strb	r2, [r3, #2]
	nrf24_rf_config.tx_power = NRF24_TXPOWER_MINUS_18_DBM;
 8001382:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001386:	2200      	movs	r2, #0
 8001388:	705a      	strb	r2, [r3, #1]
	nrf24_setup_rf(&nrf24_api_config, &nrf24_rf_config);
 800138a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800138e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001392:	4611      	mov	r1, r2
 8001394:	4618      	mov	r0, r3
 8001396:	f00e f97b 	bl	800f690 <nrf24_setup_rf>

	// Настраиваем протокол радиопередачи
	nrf24_protocol_config_t nrf24_protocol_config;
	nrf24_protocol_config.address_width = NRF24_ADDRES_WIDTH_5_BYTES;
 800139a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800139e:	2203      	movs	r2, #3
 80013a0:	705a      	strb	r2, [r3, #1]
	nrf24_protocol_config.auto_retransmit_count = 0;
 80013a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013a6:	2200      	movs	r2, #0
 80013a8:	715a      	strb	r2, [r3, #5]
	nrf24_protocol_config.auto_retransmit_delay = 0;
 80013aa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013ae:	2200      	movs	r2, #0
 80013b0:	719a      	strb	r2, [r3, #6]
	nrf24_protocol_config.crc_size = NRF24_CRCSIZE_1BYTE;
 80013b2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]
	nrf24_protocol_config.en_ack_payload = false;/// НАДО тру
 80013ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013be:	2200      	movs	r2, #0
 80013c0:	70da      	strb	r2, [r3, #3]
	nrf24_protocol_config.en_dyn_ack = false;//НАДО фалс
 80013c2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013c6:	2200      	movs	r2, #0
 80013c8:	711a      	strb	r2, [r3, #4]
	nrf24_protocol_config.en_dyn_payload_size = true;//НАДО ФАЛС
 80013ca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013ce:	2201      	movs	r2, #1
 80013d0:	709a      	strb	r2, [r3, #2]
	nrf24_setup_protocol(&nrf24_api_config, &nrf24_protocol_config);
 80013d2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80013d6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013da:	4611      	mov	r1, r2
 80013dc:	4618      	mov	r0, r3
 80013de:	f00e f9b9 	bl	800f754 <nrf24_setup_protocol>
	nrf24_pipe_set_tx_addr(&nrf24_api_config, 0xacacacacac);
 80013e2:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80013e6:	f04f 32ac 	mov.w	r2, #2896997548	; 0xacacacac
 80013ea:	f04f 03ac 	mov.w	r3, #172	; 0xac
 80013ee:	4608      	mov	r0, r1
 80013f0:	f00e fb1e 	bl	800fa30 <nrf24_pipe_set_tx_addr>


	nrf24_pipe_config_t pipe_config;
	for (int i = 1; i < 6; i++)
 80013f4:	2301      	movs	r3, #1
 80013f6:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 80013fa:	e054      	b.n	80014a6 <app_main+0x316>
 80013fc:	f3af 8000 	nop.w
 8001400:	00000000 	.word	0x00000000
 8001404:	40f5f900 	.word	0x40f5f900
 8001408:	44fa0000 	.word	0x44fa0000
 800140c:	200027f0 	.word	0x200027f0
 8001410:	40020000 	.word	0x40020000
 8001414:	20002958 	.word	0x20002958
 8001418:	40020800 	.word	0x40020800
 800141c:	40020400 	.word	0x40020400
 8001420:	2000287c 	.word	0x2000287c
 8001424:	20002744 	.word	0x20002744
	{
		pipe_config.address = 0xacacacacac;
 8001428:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800142c:	f04f 32ac 	mov.w	r2, #2896997548	; 0xacacacac
 8001430:	f04f 03ac 	mov.w	r3, #172	; 0xac
 8001434:	e9c1 2302 	strd	r2, r3, [r1, #8]
		pipe_config.address = (pipe_config.address & ~((uint64_t)0xff << 32)) | ((uint64_t)(i + 7) << 32);
 8001438:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800143c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
 8001444:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8001448:	ea02 0400 	and.w	r4, r2, r0
 800144c:	ea03 0501 	and.w	r5, r3, r1
 8001450:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001454:	3307      	adds	r3, #7
 8001456:	4618      	mov	r0, r3
 8001458:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	f04f 0300 	mov.w	r3, #0
 8001464:	0003      	movs	r3, r0
 8001466:	2200      	movs	r2, #0
 8001468:	ea44 0802 	orr.w	r8, r4, r2
 800146c:	ea45 0903 	orr.w	r9, r5, r3
 8001470:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001474:	e9c3 8902 	strd	r8, r9, [r3, #8]
		pipe_config.enable_auto_ack = false;
 8001478:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
		pipe_config.payload_size = -1;
 8001480:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001484:	22ff      	movs	r2, #255	; 0xff
 8001486:	741a      	strb	r2, [r3, #16]
		nrf24_pipe_rx_start(&nrf24_api_config, i, &pipe_config);
 8001488:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800148c:	b2d9      	uxtb	r1, r3
 800148e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001492:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001496:	4618      	mov	r0, r3
 8001498:	f00e f9e0 	bl	800f85c <nrf24_pipe_rx_start>
	for (int i = 1; i < 6; i++)
 800149c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80014a0:	3301      	adds	r3, #1
 80014a2:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 80014a6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80014aa:	2b05      	cmp	r3, #5
 80014ac:	ddbc      	ble.n	8001428 <app_main+0x298>
	}

	pipe_config.address = 0xafafafaf01;
 80014ae:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80014b2:	4ae9      	ldr	r2, [pc, #932]	; (8001858 <app_main+0x6c8>)
 80014b4:	f04f 03af 	mov.w	r3, #175	; 0xaf
 80014b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	pipe_config.enable_auto_ack = false;
 80014bc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
	pipe_config.payload_size = -1;
 80014c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014c8:	22ff      	movs	r2, #255	; 0xff
 80014ca:	741a      	strb	r2, [r3, #16]
	nrf24_pipe_rx_start(&nrf24_api_config, 0, &pipe_config);
 80014cc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80014d0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f00e f9c0 	bl	800f85c <nrf24_pipe_rx_start>

	nrf24_mode_standby(&nrf24_api_config);
 80014dc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014e0:	4618      	mov	r0, r3
 80014e2:	f00e fad4 	bl	800fa8e <nrf24_mode_standby>
	nrf24_mode_tx(&nrf24_api_config);
 80014e6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014ea:	4618      	mov	r0, r3
 80014ec:	f00e faf1 	bl	800fad2 <nrf24_mode_tx>




	uint8_t rx_buffer[32] = {0};
 80014f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	3304      	adds	r3, #4
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	611a      	str	r2, [r3, #16]
 8001506:	615a      	str	r2, [r3, #20]
 8001508:	619a      	str	r2, [r3, #24]
	uint8_t tx_buffer[32] = {0};
 800150a:	f107 0310 	add.w	r3, r7, #16
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	3304      	adds	r3, #4
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
 8001520:	615a      	str	r2, [r3, #20]
 8001522:	619a      	str	r2, [r3, #24]
	nrf24_fifo_status_t rx_status = 2;
 8001524:	f107 030f 	add.w	r3, r7, #15
 8001528:	2202      	movs	r2, #2
 800152a:	701a      	strb	r2, [r3, #0]
    nrf24_fifo_status_t tx_status = 2;
 800152c:	f107 030e 	add.w	r3, r7, #14
 8001530:	2202      	movs	r2, #2
 8001532:	701a      	strb	r2, [r3, #0]

    int errrrrrrrrr, radio_read_err;//
	int IRQ_flags;///////////////////переменные для отладки радио
    bool radio_flag;////////////////
 	int irq_err = 10;//////////////
 8001534:	230a      	movs	r3, #10
 8001536:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 	int size_in_tx = 0;///////////
 800153a:	2300      	movs	r3, #0
 800153c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 	float time_for_madgwik = 0;
 8001540:	f04f 0300 	mov.w	r3, #0
 8001544:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 	for(int i = 0; i < 10; i++)
 		packet_ma_type_12.null[i] = 0;
 	for(int i = 0; i < 3; i++)
 		packet_ma_type_2.nulll[i] = 0;*/
 	uint8_t data_nrf_tx_ds;
 	int num1 = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 	int num2 = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 	int time_on_board = 0;//время на борте
 8001554:	2300      	movs	r3, #0
 8001556:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
    float lux;


    state_t fckng_state = STATE_ON_GND;
 800155a:	2300      	movs	r3, #0
 800155c:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
    uint32_t start_time_to;

    uint32_t time_parashute = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 	while(true)
	{
 		packet_ma_type_11.flag = 0xFF;
 8001566:	23ff      	movs	r3, #255	; 0xff
 8001568:	f887 31b8 	strb.w	r3, [r7, #440]	; 0x1b8
 		packet_ma_type_12.flag = 0xFA;
 800156c:	23fa      	movs	r3, #250	; 0xfa
 800156e:	f887 3198 	strb.w	r3, [r7, #408]	; 0x198
 		packet_ma_type_2.flag = 0xAA;
 8001572:	23aa      	movs	r3, #170	; 0xaa
 8001574:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
 		packet_ma_type_11.time = time_on_board;
 8001578:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800157c:	f8c7 31bb 	str.w	r3, [r7, #443]	; 0x1bb
 		packet_ma_type_12.time = time_on_board;
 8001580:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001584:	f8c7 319b 	str.w	r3, [r7, #411]	; 0x19b
 		packet_ma_type_2.time = time_on_board;
 8001588:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800158c:	f8c7 317b 	str.w	r3, [r7, #379]	; 0x17b
		packet_ma_type_11.num = num1;
 8001590:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001594:	b29b      	uxth	r3, r3
 8001596:	f8a7 31b9 	strh.w	r3, [r7, #441]	; 0x1b9
		packet_ma_type_12.num = num1;
 800159a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800159e:	b29b      	uxth	r3, r3
 80015a0:	f8a7 3199 	strh.w	r3, [r7, #409]	; 0x199
		packet_ma_type_2.num = num2;
 80015a4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	f8a7 3179 	strh.w	r3, [r7, #377]	; 0x179
    	num1++;
 80015ae:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80015b2:	3301      	adds	r3, #1
 80015b4:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    	num2++;
 80015b8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80015bc:	3301      	adds	r3, #1
 80015be:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    	lux = photorezistor_get_lux(photorezist);
 80015c2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80015c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015ca:	f00d fdd9 	bl	800f180 <photorezistor_get_lux>
 80015ce:	ed87 0a7a 	vstr	s0, [r7, #488]	; 0x1e8
 		time_on_board = HAL_GetTick();
 80015d2:	f004 fc95 	bl	8005f00 <HAL_GetTick>
 80015d6:	4603      	mov	r3, r0
 80015d8:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
		retin = lis3mdl_read_reg(&ctx, 0x0F , (uint8_t *) &abobus, 6);
 80015dc:	f107 02ce 	add.w	r2, r7, #206	; 0xce
 80015e0:	f507 709a 	add.w	r0, r7, #308	; 0x134
 80015e4:	2306      	movs	r3, #6
 80015e6:	210f      	movs	r1, #15
 80015e8:	f00d f992 	bl	800e910 <lis3mdl_read_reg>
 80015ec:	f8c7 01e4 	str.w	r0, [r7, #484]	; 0x1e4
 			tdc21_read_register(&tdcgp21_api_config, TDC21_REG1, (uint8_t*)&reg1wr, 1);
			tdc21_full_reset(&tdcgp21_api_config);
 			HAL_Delay(125);
 			tdc21_read_register(&tdcgp21_api_config, TDC21_REG1, (uint8_t*)&reg1wr, 1);
 			HAL_Delay(5);*/
 			tdc21_start_tof(&tdcgp21_api_config);
 80015f0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015f4:	4618      	mov	r0, r3
 80015f6:	f00c ff28 	bl	800e44a <tdc21_start_tof>
 			HAL_Delay(5);
 80015fa:	2005      	movs	r0, #5
 80015fc:	f004 fc8c 	bl	8005f18 <HAL_Delay>
		}

		if(SD_FLAG)
		{
			super_smart_write((uint8_t *)&packet_ma_type_11, 32, &state_sd);
 8001600:	f107 02cf 	add.w	r2, r7, #207	; 0xcf
 8001604:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001608:	2120      	movs	r1, #32
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fd0c 	bl	8001028 <super_smart_write>
			super_smart_write((uint8_t *)&packet_ma_type_12, 32, &state_sd);
 8001610:	f107 02cf 	add.w	r2, r7, #207	; 0xcf
 8001614:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001618:	2120      	movs	r1, #32
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fd04 	bl	8001028 <super_smart_write>
			super_smart_write((uint8_t *)&packet_ma_type_2, 32, &state_sd);
 8001620:	f107 02cf 	add.w	r2, r7, #207	; 0xcf
 8001624:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001628:	2120      	movs	r1, #32
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fcfc 	bl	8001028 <super_smart_write>
			//printf("%f %f %f           %ld\n", (double)latitude, (double)lontitude, (double)altitude, fix);
		}

		if (LSM_FLAG)
		{
			lsm6ds3_temperature_raw_get(&lsmctx, &temperature_celsius_gyro);//ЗАПРОС СЫРЫХ ДАННЫХ
 8001630:	f507 7293 	add.w	r2, r7, #294	; 0x126
 8001634:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001638:	4611      	mov	r1, r2
 800163a:	4618      	mov	r0, r3
 800163c:	f00d fcb0 	bl	800efa0 <lsm6ds3_temperature_raw_get>
			lsm6ds3_acceleration_raw_get(&lsmctx, acc_g);
 8001640:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001644:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001648:	4611      	mov	r1, r2
 800164a:	4618      	mov	r0, r3
 800164c:	f00d fd16 	bl	800f07c <lsm6ds3_acceleration_raw_get>
			lsm6ds3_angular_rate_raw_get(&lsmctx, gyro_dps);
 8001650:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001654:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001658:	4611      	mov	r1, r2
 800165a:	4618      	mov	r0, r3
 800165c:	f00d fcc3 	bl	800efe6 <lsm6ds3_angular_rate_raw_get>
			packet_ma_type_2.acc_mg[0] = acc_g[0];
 8001660:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001664:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001668:	f8a7 317f 	strh.w	r3, [r7, #383]	; 0x17f
			packet_ma_type_2.acc_mg[1] = acc_g[1];
 800166c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001670:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001674:	f8a7 3181 	strh.w	r3, [r7, #385]	; 0x181
			packet_ma_type_2.acc_mg[2] = acc_g[2];
 8001678:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800167c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001680:	f8a7 3183 	strh.w	r3, [r7, #387]	; 0x183
			/*gyro_dps[0]-=0,48461538;
			gyro_dps[1]+=3,45999986923;
			gyro_dps[2]+=2,561433749;*/
			packet_ma_type_2.gyro_mdps[0] = gyro_dps[0];
 8001684:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001688:	f9b3 3000 	ldrsh.w	r3, [r3]
 800168c:	f8a7 3185 	strh.w	r3, [r7, #389]	; 0x185
			packet_ma_type_2.gyro_mdps[1] = gyro_dps[1];
 8001690:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001694:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001698:	f8a7 3187 	strh.w	r3, [r7, #391]	; 0x187
			packet_ma_type_2.gyro_mdps[2] = gyro_dps[2];
 800169c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80016a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016a4:	f8a7 3189 	strh.w	r3, [r7, #393]	; 0x189
			}

		if (LIS_FLAG)
		{
			//lisread(&ctx, &temp_lis, &mag);
			lis3mdl_magnetic_raw_get(&ctx, mag);
 80016a8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80016ac:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80016b0:	4611      	mov	r1, r2
 80016b2:	4618      	mov	r0, r3
 80016b4:	f00d fa60 	bl	800eb78 <lis3mdl_magnetic_raw_get>
			//lis3mdl_temperature_raw_get(&ctx, &temp_lis);//ЗАПРОС СЫРЫХ ДАННЫХ
			packet_ma_type_2.LIS3MDL_magnetometer[0] = mag[0];
 80016b8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80016bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c0:	f8a7 318b 	strh.w	r3, [r7, #395]	; 0x18b
			packet_ma_type_2.LIS3MDL_magnetometer[1] = mag[1];
 80016c4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80016c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016cc:	f8a7 318d 	strh.w	r3, [r7, #397]	; 0x18d
			packet_ma_type_2.LIS3MDL_magnetometer[2] = mag[2];
 80016d0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80016d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016d8:	f8a7 318f 	strh.w	r3, [r7, #399]	; 0x18f

		}

		if(BME_FLAG == 1)
		{
			its_bme280_read(UNKNXW, &bme_important);
 80016dc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80016e0:	4619      	mov	r1, r3
 80016e2:	2000      	movs	r0, #0
 80016e4:	f004 fa50 	bl	8005b88 <its_bme280_read>
			packet_ma_type_11.BME280_pressure = bme_important.pressure;
 80016e8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80016ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f0:	f207 11bf 	addw	r1, r7, #447	; 0x1bf
 80016f4:	600a      	str	r2, [r1, #0]
 80016f6:	604b      	str	r3, [r1, #4]
			packet_ma_type_11.BME280_temperature = (float)bme_important.temperature;
 80016f8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80016fc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	f7ff fa78 	bl	8000bf8 <__aeabi_d2f>
 8001708:	4603      	mov	r3, r0
 800170a:	f8c7 31c7 	str.w	r3, [r7, #455]	; 0x1c7
			packet_ma_type_11.height_bme = 44330.0*(1.0 - pow((float)packet_ma_type_11.BME280_pressure/bme_press_ground, 1.0/5.255));
 800170e:	f8d7 21bf 	ldr.w	r2, [r7, #447]	; 0x1bf
 8001712:	f8d7 31c3 	ldr.w	r3, [r7, #451]	; 0x1c3
 8001716:	4610      	mov	r0, r2
 8001718:	4619      	mov	r1, r3
 800171a:	f7ff fa6d 	bl	8000bf8 <__aeabi_d2f>
 800171e:	4603      	mov	r3, r0
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe ff19 	bl	8000558 <__aeabi_f2d>
 8001726:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	; 0x228
 800172a:	f7ff f897 	bl	800085c <__aeabi_ddiv>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	ec43 2b17 	vmov	d7, r2, r3
 8001736:	ed9f 1b42 	vldr	d1, [pc, #264]	; 8001840 <app_main+0x6b0>
 800173a:	eeb0 0a47 	vmov.f32	s0, s14
 800173e:	eef0 0a67 	vmov.f32	s1, s15
 8001742:	f012 ffb9 	bl	80146b8 <pow>
 8001746:	ec53 2b10 	vmov	r2, r3, d0
 800174a:	f04f 0000 	mov.w	r0, #0
 800174e:	4943      	ldr	r1, [pc, #268]	; (800185c <app_main+0x6cc>)
 8001750:	f7fe fda2 	bl	8000298 <__aeabi_dsub>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	a33a      	add	r3, pc, #232	; (adr r3, 8001848 <app_main+0x6b8>)
 800175e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001762:	f7fe ff51 	bl	8000608 <__aeabi_dmul>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	f207 11cb 	addw	r1, r7, #459	; 0x1cb
 800176e:	600a      	str	r2, [r1, #0]
 8001770:	604b      	str	r3, [r1, #4]
		}

		seb_time = HAL_GetTick();
 8001772:	f004 fbc5 	bl	8005f00 <HAL_GetTick>
 8001776:	ee07 0a90 	vmov	s15, r0
 800177a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800177e:	edc7 7a80 	vstr	s15, [r7, #512]	; 0x200
		//printf("mX = %f\tmY = %f\tmZ = %f\n", (double)-1* mag[0], (double) -1 * mag[1], (double)mag[2]);
		MadgwickAHRSupdate(quaternion, gyro_dps[0] * 3.1415 / 180, gyro_dps[1] * 3.1415 / 180, gyro_dps[2] * 3.1415 / 180,  acc_g[0] *9.81, acc_g[1] *9.81, acc_g[2] *9.81, -1* mag[0], -1 * mag[1], mag[2], (seb_time - seb_time_prev) / 1000.0, 0.3);
 8001782:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001786:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178a:	4618      	mov	r0, r3
 800178c:	f7fe fed2 	bl	8000534 <__aeabi_i2d>
 8001790:	a32f      	add	r3, pc, #188	; (adr r3, 8001850 <app_main+0x6c0>)
 8001792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001796:	f7fe ff37 	bl	8000608 <__aeabi_dmul>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4610      	mov	r0, r2
 80017a0:	4619      	mov	r1, r3
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	4b2e      	ldr	r3, [pc, #184]	; (8001860 <app_main+0x6d0>)
 80017a8:	f7ff f858 	bl	800085c <__aeabi_ddiv>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4610      	mov	r0, r2
 80017b2:	4619      	mov	r1, r3
 80017b4:	f7ff fa20 	bl	8000bf8 <__aeabi_d2f>
 80017b8:	4604      	mov	r4, r0
 80017ba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80017be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe feb6 	bl	8000534 <__aeabi_i2d>
 80017c8:	a321      	add	r3, pc, #132	; (adr r3, 8001850 <app_main+0x6c0>)
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	f7fe ff1b 	bl	8000608 <__aeabi_dmul>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4610      	mov	r0, r2
 80017d8:	4619      	mov	r1, r3
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	4b20      	ldr	r3, [pc, #128]	; (8001860 <app_main+0x6d0>)
 80017e0:	f7ff f83c 	bl	800085c <__aeabi_ddiv>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4610      	mov	r0, r2
 80017ea:	4619      	mov	r1, r3
 80017ec:	f7ff fa04 	bl	8000bf8 <__aeabi_d2f>
 80017f0:	4605      	mov	r5, r0
 80017f2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80017f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fe9a 	bl	8000534 <__aeabi_i2d>
 8001800:	a313      	add	r3, pc, #76	; (adr r3, 8001850 <app_main+0x6c0>)
 8001802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001806:	f7fe feff 	bl	8000608 <__aeabi_dmul>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4610      	mov	r0, r2
 8001810:	4619      	mov	r1, r3
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	4b12      	ldr	r3, [pc, #72]	; (8001860 <app_main+0x6d0>)
 8001818:	f7ff f820 	bl	800085c <__aeabi_ddiv>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4610      	mov	r0, r2
 8001822:	4619      	mov	r1, r3
 8001824:	f7ff f9e8 	bl	8000bf8 <__aeabi_d2f>
 8001828:	4606      	mov	r6, r0
 800182a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800182e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fe7e 	bl	8000534 <__aeabi_i2d>
 8001838:	e014      	b.n	8001864 <app_main+0x6d4>
 800183a:	bf00      	nop
 800183c:	f3af 8000 	nop.w
 8001840:	ccd9456c 	.word	0xccd9456c
 8001844:	3fc85b95 	.word	0x3fc85b95
 8001848:	00000000 	.word	0x00000000
 800184c:	40e5a540 	.word	0x40e5a540
 8001850:	c083126f 	.word	0xc083126f
 8001854:	400921ca 	.word	0x400921ca
 8001858:	afafaf01 	.word	0xafafaf01
 800185c:	3ff00000 	.word	0x3ff00000
 8001860:	40668000 	.word	0x40668000
 8001864:	f20f 436c 	addw	r3, pc, #1132	; 0x46c
 8001868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186c:	f7fe fecc 	bl	8000608 <__aeabi_dmul>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4610      	mov	r0, r2
 8001876:	4619      	mov	r1, r3
 8001878:	f7ff f9be 	bl	8000bf8 <__aeabi_d2f>
 800187c:	4680      	mov	r8, r0
 800187e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001882:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fe54 	bl	8000534 <__aeabi_i2d>
 800188c:	f20f 4344 	addw	r3, pc, #1092	; 0x444
 8001890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001894:	f7fe feb8 	bl	8000608 <__aeabi_dmul>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4610      	mov	r0, r2
 800189e:	4619      	mov	r1, r3
 80018a0:	f7ff f9aa 	bl	8000bf8 <__aeabi_d2f>
 80018a4:	4681      	mov	r9, r0
 80018a6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80018aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fe40 	bl	8000534 <__aeabi_i2d>
 80018b4:	f20f 431c 	addw	r3, pc, #1052	; 0x41c
 80018b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018bc:	f7fe fea4 	bl	8000608 <__aeabi_dmul>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	f7ff f996 	bl	8000bf8 <__aeabi_d2f>
 80018cc:	4602      	mov	r2, r0
 80018ce:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80018d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018d6:	425b      	negs	r3, r3
 80018d8:	ee07 3a90 	vmov	s15, r3
 80018dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018e0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80018e4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018e8:	425b      	negs	r3, r3
 80018ea:	ee07 3a90 	vmov	s15, r3
 80018ee:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80018f2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80018f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018fa:	ee07 3a90 	vmov	s15, r3
 80018fe:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8001902:	ed97 7a80 	vldr	s14, [r7, #512]	; 0x200
 8001906:	edd7 7a8d 	vldr	s15, [r7, #564]	; 0x234
 800190a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800190e:	ed9f 5aec 	vldr	s10, [pc, #944]	; 8001cc0 <app_main+0xb30>
 8001912:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8001916:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800191a:	ed9f 5aea 	vldr	s10, [pc, #936]	; 8001cc4 <app_main+0xb34>
 800191e:	eef0 4a47 	vmov.f32	s9, s14
 8001922:	eeb0 4a65 	vmov.f32	s8, s11
 8001926:	eef0 3a46 	vmov.f32	s7, s12
 800192a:	eeb0 3a66 	vmov.f32	s6, s13
 800192e:	ee02 2a90 	vmov	s5, r2
 8001932:	ee02 9a10 	vmov	s4, r9
 8001936:	ee01 8a90 	vmov	s3, r8
 800193a:	ee01 6a10 	vmov	s2, r6
 800193e:	ee00 5a90 	vmov	s1, r5
 8001942:	ee00 4a10 	vmov	s0, r4
 8001946:	4618      	mov	r0, r3
 8001948:	f000 fa34 	bl	8001db4 <MadgwickAHRSupdate>
		seb_time_prev = seb_time;
 800194c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001950:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
		//MadgwickAHRSupdateIMU(quaternion, gyro_dps[0], gyro_dps[1], gyro_dps[2],  acc_g[0] *9.81, acc_g[1] *9.81, acc_g[2] *9.81, HAL_GetTick() - seb_delta, 0.3);
		time_for_madgwik = (HAL_GetTick() )/1000.0;
 8001954:	f004 fad4 	bl	8005f00 <HAL_GetTick>
 8001958:	4603      	mov	r3, r0
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe fdda 	bl	8000514 <__aeabi_ui2d>
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	4bd8      	ldr	r3, [pc, #864]	; (8001cc8 <app_main+0xb38>)
 8001966:	f7fe ff79 	bl	800085c <__aeabi_ddiv>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4610      	mov	r0, r2
 8001970:	4619      	mov	r1, r3
 8001972:	f7ff f941 	bl	8000bf8 <__aeabi_d2f>
 8001976:	4603      	mov	r3, r0
 8001978:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0

		time_prnt = HAL_GetTick() - time_prnt;
		printf("принт:  %ld\n", time_prnt);
		seb_delta = HAL_GetTick();*/

		nrf24_mode_tx(&nrf24_api_config);
 800197c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001980:	4618      	mov	r0, r3
 8001982:	f00e f8a6 	bl	800fad2 <nrf24_mode_tx>
	    //nrf24_mode_tx(&nrf24_api_config);


        if(NRF_FLAG)
        {
        	nrf24_fifo_status(&nrf24_api_config, &rx_status, &tx_status);
 8001986:	f107 020e 	add.w	r2, r7, #14
 800198a:	f107 010f 	add.w	r1, r7, #15
 800198e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001992:	4618      	mov	r0, r3
 8001994:	f00e f8bf 	bl	800fb16 <nrf24_fifo_status>
			nrf24_fifo_flush_tx(&nrf24_api_config);
 8001998:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800199c:	4618      	mov	r0, r3
 800199e:	f00e f93d 	bl	800fc1c <nrf24_fifo_flush_tx>
			errrrrrrrrr = nrf24_irq_clear(&nrf24_api_config, IRQ_flags);
 80019a2:	f107 0308 	add.w	r3, r7, #8
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019ac:	4611      	mov	r1, r2
 80019ae:	4618      	mov	r0, r3
 80019b0:	f00e f965 	bl	800fc7e <nrf24_irq_clear>
 80019b4:	f8c7 01e0 	str.w	r0, [r7, #480]	; 0x1e0
			nrf24_irq_get(&nrf24_api_config, &IRQ_flags);
 80019b8:	f107 0208 	add.w	r2, r7, #8
 80019bc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019c0:	4611      	mov	r1, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f00e f942 	bl	800fc4c <nrf24_irq_get>
			nrf24_fifo_status(&nrf24_api_config, &rx_status, &tx_status);
 80019c8:	f107 020e 	add.w	r2, r7, #14
 80019cc:	f107 010f 	add.w	r1, r7, #15
 80019d0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019d4:	4618      	mov	r0, r3
 80019d6:	f00e f89e 	bl	800fb16 <nrf24_fifo_status>
			nrf24_irq_get(&nrf24_api_config, &IRQ_flags);
 80019da:	f107 0208 	add.w	r2, r7, #8
 80019de:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019e2:	4611      	mov	r1, r2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f00e f931 	bl	800fc4c <nrf24_irq_get>


			size_in_tx = nrf24_fifo_write(&nrf24_api_config, (uint8_t *)&packet_ma_type_11, 32, false);// sizeof(packet_ma_type_1)
 80019ea:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 80019ee:	f107 0074 	add.w	r0, r7, #116	; 0x74
 80019f2:	2300      	movs	r3, #0
 80019f4:	2220      	movs	r2, #32
 80019f6:	f00e f8eb 	bl	800fbd0 <nrf24_fifo_write>
 80019fa:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
			HAL_Delay(50);
 80019fe:	2032      	movs	r0, #50	; 0x32
 8001a00:	f004 fa8a 	bl	8005f18 <HAL_Delay>
			size_in_tx = nrf24_fifo_write(&nrf24_api_config, (uint8_t *)&packet_ma_type_12, 32, false);
 8001a04:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8001a08:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	2220      	movs	r2, #32
 8001a10:	f00e f8de 	bl	800fbd0 <nrf24_fifo_write>
 8001a14:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
			HAL_Delay(50);
 8001a18:	2032      	movs	r0, #50	; 0x32
 8001a1a:	f004 fa7d 	bl	8005f18 <HAL_Delay>
			size_in_tx = nrf24_fifo_write(&nrf24_api_config, (uint8_t *)&packet_ma_type_2, 32, false);
 8001a1e:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 8001a22:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8001a26:	2300      	movs	r3, #0
 8001a28:	2220      	movs	r2, #32
 8001a2a:	f00e f8d1 	bl	800fbd0 <nrf24_fifo_write>
 8001a2e:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
			HAL_Delay(50);
 8001a32:	2032      	movs	r0, #50	; 0x32
 8001a34:	f004 fa70 	bl	8005f18 <HAL_Delay>
			nrf24_read_register(&nrf24_api_config, NRF24_REGADDR_STATUS, &data_nrf_tx_ds, sizeof(data_nrf_tx_ds));
 8001a38:	1dfa      	adds	r2, r7, #7
 8001a3a:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8001a3e:	2301      	movs	r3, #1
 8001a40:	2107      	movs	r1, #7
 8001a42:	f00d fc6e 	bl	800f322 <nrf24_read_register>

			nrf24_fifo_status(&nrf24_api_config, &rx_status, &tx_status);
 8001a46:	f107 020e 	add.w	r2, r7, #14
 8001a4a:	f107 010f 	add.w	r1, r7, #15
 8001a4e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a52:	4618      	mov	r0, r3
 8001a54:	f00e f85f 	bl	800fb16 <nrf24_fifo_status>
			printf("                   ");
 8001a58:	489c      	ldr	r0, [pc, #624]	; (8001ccc <app_main+0xb3c>)
 8001a5a:	f00f f96d 	bl	8010d38 <iprintf>
			//nrf24_mode_tx(&nrf24_api_config);
			HAL_Delay(100);
 8001a5e:	2064      	movs	r0, #100	; 0x64
 8001a60:	f004 fa5a 	bl	8005f18 <HAL_Delay>
			//nrf24_mode_standby(&nrf24_api_config);


			//nrf24_dump_registers(&nrf24_api_config);

			nrf24_fifo_status(&nrf24_api_config, &rx_status, &tx_status);
 8001a64:	f107 020e 	add.w	r2, r7, #14
 8001a68:	f107 010f 	add.w	r1, r7, #15
 8001a6c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a70:	4618      	mov	r0, r3
 8001a72:	f00e f850 	bl	800fb16 <nrf24_fifo_status>
			nrf24_irq_get(&nrf24_api_config, &IRQ_flags);
 8001a76:	f107 0208 	add.w	r2, r7, #8
 8001a7a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a7e:	4611      	mov	r1, r2
 8001a80:	4618      	mov	r0, r3
 8001a82:	f00e f8e3 	bl	800fc4c <nrf24_irq_get>


						if (rx_status != NRF24_FIFO_EMPTY)
 8001a86:	f107 030f 	add.w	r3, r7, #15
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d02e      	beq.n	8001aee <app_main+0x95e>
						{
							radio_read_err = nrf24_fifo_read(&nrf24_api_config, rx_buffer, 32);
 8001a90:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001a94:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a98:	2220      	movs	r2, #32
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f00e f87b 	bl	800fb96 <nrf24_fifo_read>
 8001aa0:	f8c7 01dc 	str.w	r0, [r7, #476]	; 0x1dc
							//HAL_GPIO_WritePin(GPIOC , GPIO_PIN_13, GPIO_PIN_RESET);
							nrf24_fifo_flush_rx(&nrf24_api_config);
 8001aa4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f00e f8c3 	bl	800fc34 <nrf24_fifo_flush_rx>
						   if(rx_status == NRF24_FIFO_FULL)
 8001aae:	f107 030f 	add.w	r3, r7, #15
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d11a      	bne.n	8001aee <app_main+0x95e>
							{
								nrf24_fifo_flush_rx(&nrf24_api_config);
 8001ab8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001abc:	4618      	mov	r0, r3
 8001abe:	f00e f8b9 	bl	800fc34 <nrf24_fifo_flush_rx>
								nrf24_fifo_status(&nrf24_api_config, &rx_status, &tx_status);
 8001ac2:	f107 020e 	add.w	r2, r7, #14
 8001ac6:	f107 010f 	add.w	r1, r7, #15
 8001aca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f00e f821 	bl	800fb16 <nrf24_fifo_status>
								for(int i = 0; i < 5; i++)
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 8001ada:	e004      	b.n	8001ae6 <app_main+0x956>
 8001adc:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 8001ae6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	ddf6      	ble.n	8001adc <app_main+0x94c>
								}

							}
						}

						if (tx_status == NRF24_FIFO_EMPTY)
 8001aee:	f107 030e 	add.w	r3, r7, #14
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d11f      	bne.n	8001b38 <app_main+0x9a8>
						{
							nrf24_fifo_flush_tx(&nrf24_api_config);
 8001af8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001afc:	4618      	mov	r0, r3
 8001afe:	f00e f88d 	bl	800fc1c <nrf24_fifo_flush_tx>
							nrf24_fifo_status(&nrf24_api_config, &rx_status, &tx_status);
 8001b02:	f107 020e 	add.w	r2, r7, #14
 8001b06:	f107 010f 	add.w	r1, r7, #15
 8001b0a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f00e f801 	bl	800fb16 <nrf24_fifo_status>
							//errrrrrrrrr = nrf24_fifo_write_ack_pld(&nrf24_api_config, 0, (uint8_t *)&packet_ma_type_11, sizeof(packet_ma_type_11));
							radio_flag = !radio_flag;//изменения от плт
 8001b14:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	bf14      	ite	ne
 8001b1c:	2301      	movne	r3, #1
 8001b1e:	2300      	moveq	r3, #0
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	f083 0301 	eor.w	r3, r3, #1
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
 8001b2c:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
						}

						//опускаем флаги
						nrf24_irq_get(&nrf24_api_config, &IRQ_flags);
 8001b38:	f107 0208 	add.w	r2, r7, #8
 8001b3c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b40:	4611      	mov	r1, r2
 8001b42:	4618      	mov	r0, r3
 8001b44:	f00e f882 	bl	800fc4c <nrf24_irq_get>
						irq_err = nrf24_irq_clear(&nrf24_api_config, NRF24_IRQ_RX_DR | NRF24_IRQ_TX_DR | NRF24_IRQ_MAX_RT);
 8001b48:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b4c:	2107      	movs	r1, #7
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f00e f895 	bl	800fc7e <nrf24_irq_clear>
 8001b54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
          }
        switch(fckng_state)
 8001b58:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8001b5c:	2b05      	cmp	r3, #5
 8001b5e:	f63f ad02 	bhi.w	8001566 <app_main+0x3d6>
 8001b62:	a201      	add	r2, pc, #4	; (adr r2, 8001b68 <app_main+0x9d8>)
 8001b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b68:	08001b81 	.word	0x08001b81
 8001b6c:	08001c09 	.word	0x08001c09
 8001b70:	08001c6f 	.word	0x08001c6f
 8001b74:	08001c91 	.word	0x08001c91
 8001b78:	08001cf3 	.word	0x08001cf3
 8001b7c:	08001d51 	.word	0x08001d51
        {
        case STATE_ON_GND:
        	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == true)
 8001b80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b84:	4852      	ldr	r0, [pc, #328]	; (8001cd0 <app_main+0xb40>)
 8001b86:	f005 f957 	bl	8006e38 <HAL_GPIO_ReadPin>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d136      	bne.n	8001bfe <app_main+0xa6e>
        	{
        		if(HAL_GetTick() >= start_time_io + 50)
 8001b90:	f004 f9b6 	bl	8005f00 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001b9a:	3332      	adds	r3, #50	; 0x32
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	f0c0 80da 	bcc.w	8001d56 <app_main+0xbc6>
				{
					for(int i = 0; i < 10; i++)
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8001ba8:	e012      	b.n	8001bd0 <app_main+0xa40>
					{
						lux_sun+=photorezistor_get_lux(photorezist);
 8001baa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001bae:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001bb2:	f00d fae5 	bl	800f180 <photorezistor_get_lux>
 8001bb6:	eeb0 7a40 	vmov.f32	s14, s0
 8001bba:	edd7 7a8f 	vldr	s15, [r7, #572]	; 0x23c
 8001bbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bc2:	edc7 7a8f 	vstr	s15, [r7, #572]	; 0x23c
					for(int i = 0; i < 10; i++)
 8001bc6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001bca:	3301      	adds	r3, #1
 8001bcc:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8001bd0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001bd4:	2b09      	cmp	r3, #9
 8001bd6:	dde8      	ble.n	8001baa <app_main+0xa1a>
					}
					lux_sun = lux_sun/10;
 8001bd8:	ed97 7a8f 	vldr	s14, [r7, #572]	; 0x23c
 8001bdc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001be0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001be4:	edc7 7a8f 	vstr	s15, [r7, #572]	; 0x23c
					fckng_state = STATE_IN_ROCKET;
 8001be8:	2301      	movs	r3, #1
 8001bea:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
					packet_ma_type_11.state = 1;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	f887 31d3 	strb.w	r3, [r7, #467]	; 0x1d3
					start_time_io = HAL_GetTick();
 8001bf4:	f004 f984 	bl	8005f00 <HAL_GetTick>
 8001bf8:	f8c7 0238 	str.w	r0, [r7, #568]	; 0x238
        	else
        	{
        		start_time_io = HAL_GetTick();
        	}

        	break;
 8001bfc:	e0ab      	b.n	8001d56 <app_main+0xbc6>
        		start_time_io = HAL_GetTick();
 8001bfe:	f004 f97f 	bl	8005f00 <HAL_GetTick>
 8001c02:	f8c7 0238 	str.w	r0, [r7, #568]	; 0x238
        	break;
 8001c06:	e0a6      	b.n	8001d56 <app_main+0xbc6>

        case STATE_IN_ROCKET:
        	if((lux_sun - lux)*KOF < photorezistor_get_lux(photorezist))
 8001c08:	ed97 7a8f 	vldr	s14, [r7, #572]	; 0x23c
 8001c0c:	edd7 7a7a 	vldr	s15, [r7, #488]	; 0x1e8
 8001c10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c14:	ee17 0a90 	vmov	r0, s15
 8001c18:	f7fe fc9e 	bl	8000558 <__aeabi_f2d>
 8001c1c:	a324      	add	r3, pc, #144	; (adr r3, 8001cb0 <app_main+0xb20>)
 8001c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c22:	f7fe fcf1 	bl	8000608 <__aeabi_dmul>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4614      	mov	r4, r2
 8001c2c:	461d      	mov	r5, r3
 8001c2e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001c32:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c36:	f00d faa3 	bl	800f180 <photorezistor_get_lux>
 8001c3a:	ee10 3a10 	vmov	r3, s0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fc8a 	bl	8000558 <__aeabi_f2d>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4620      	mov	r0, r4
 8001c4a:	4629      	mov	r1, r5
 8001c4c:	f7fe ff4e 	bl	8000aec <__aeabi_dcmplt>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d100      	bne.n	8001c58 <app_main+0xac8>
			{
        		fckng_state = STATE_FALL_OF_THE_STONE;
	        	start_time_io = HAL_GetTick();
				packet_ma_type_11.state = 2;
			}
        	break;
 8001c56:	e081      	b.n	8001d5c <app_main+0xbcc>
        		fckng_state = STATE_FALL_OF_THE_STONE;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	        	start_time_io = HAL_GetTick();
 8001c5e:	f004 f94f 	bl	8005f00 <HAL_GetTick>
 8001c62:	f8c7 0238 	str.w	r0, [r7, #568]	; 0x238
				packet_ma_type_11.state = 2;
 8001c66:	2302      	movs	r3, #2
 8001c68:	f887 31d3 	strb.w	r3, [r7, #467]	; 0x1d3
        	break;
 8001c6c:	e076      	b.n	8001d5c <app_main+0xbcc>

        case STATE_FALL_OF_THE_STONE:
        	if(HAL_GetTick() - start_time_io >= TIME_STONE)
 8001c6e:	f004 f947 	bl	8005f00 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	f241 3287 	movw	r2, #4999	; 0x1387
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d96b      	bls.n	8001d5a <app_main+0xbca>
        	{
        		fckng_state = STATE_FALL_IS_NOT_A_STONE;
 8001c82:	2303      	movs	r3, #3
 8001c84:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
        		packet_ma_type_11.state = 3;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	f887 31d3 	strb.w	r3, [r7, #467]	; 0x1d3
        	}
        break;
 8001c8e:	e064      	b.n	8001d5a <app_main+0xbca>

        case STATE_FALL_IS_NOT_A_STONE:
        	//функция для открфтия лепестков
        	if(packet_ma_type_11.height_bme <= 350)
 8001c90:	f8d7 01cb 	ldr.w	r0, [r7, #459]	; 0x1cb
 8001c94:	f8d7 11cf 	ldr.w	r1, [r7, #463]	; 0x1cf
 8001c98:	a307      	add	r3, pc, #28	; (adr r3, 8001cb8 <app_main+0xb28>)
 8001c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9e:	f7fe ff2f 	bl	8000b00 <__aeabi_dcmple>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d119      	bne.n	8001cdc <app_main+0xb4c>
        	{
        		fckng_state = STATE_FALL_ON_PARACHUTE;
        		packet_ma_type_11.state = 4;
        		start_time_to = HAL_GetTick();
        	}
            break;
 8001ca8:	e058      	b.n	8001d5c <app_main+0xbcc>
 8001caa:	bf00      	nop
 8001cac:	f3af 8000 	nop.w
 8001cb0:	9999999a 	.word	0x9999999a
 8001cb4:	3fe99999 	.word	0x3fe99999
 8001cb8:	00000000 	.word	0x00000000
 8001cbc:	4075e000 	.word	0x4075e000
 8001cc0:	447a0000 	.word	0x447a0000
 8001cc4:	3e99999a 	.word	0x3e99999a
 8001cc8:	408f4000 	.word	0x408f4000
 8001ccc:	08015d14 	.word	0x08015d14
 8001cd0:	40020800 	.word	0x40020800
 8001cd4:	51eb851f 	.word	0x51eb851f
 8001cd8:	40239eb8 	.word	0x40239eb8
        		fckng_state = STATE_FALL_ON_PARACHUTE;
 8001cdc:	2304      	movs	r3, #4
 8001cde:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
        		packet_ma_type_11.state = 4;
 8001ce2:	2304      	movs	r3, #4
 8001ce4:	f887 31d3 	strb.w	r3, [r7, #467]	; 0x1d3
        		start_time_to = HAL_GetTick();
 8001ce8:	f004 f90a 	bl	8005f00 <HAL_GetTick>
 8001cec:	f8c7 01d8 	str.w	r0, [r7, #472]	; 0x1d8
            break;
 8001cf0:	e034      	b.n	8001d5c <app_main+0xbcc>

        case STATE_FALL_ON_PARACHUTE:
        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);//откр парашюь
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cf8:	4819      	ldr	r0, [pc, #100]	; (8001d60 <app_main+0xbd0>)
 8001cfa:	f005 f8b5 	bl	8006e68 <HAL_GPIO_WritePin>
        	time_parashute = HAL_GetTick();
 8001cfe:	f004 f8ff 	bl	8005f00 <HAL_GetTick>
 8001d02:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
        	if(HAL_GetTick() - start_time_io >= TIME_LIDAR)
 8001d06:	f004 f8fb 	bl	8005f00 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001d16:	d21b      	bcs.n	8001d50 <app_main+0xbc0>
        	{
        		//ФУНКЦИЯ ЛИДАРА
        	}
        	else if(packet_ma_type_11.height_bme < 10 && (HAL_GetTick() - time_parashute >= TIME_PARASHUTE))
 8001d18:	f8d7 01cb 	ldr.w	r0, [r7, #459]	; 0x1cb
 8001d1c:	f8d7 11cf 	ldr.w	r1, [r7, #463]	; 0x1cf
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <app_main+0xbd4>)
 8001d26:	f7fe fee1 	bl	8000aec <__aeabi_dcmplt>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00f      	beq.n	8001d50 <app_main+0xbc0>
 8001d30:	f004 f8e6 	bl	8005f00 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001d40:	d306      	bcc.n	8001d50 <app_main+0xbc0>
        	{
        		fckng_state = STATE_FOUND_ME_PLS;
 8001d42:	2305      	movs	r3, #5
 8001d44:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
        		packet_ma_type_11.state = 5;
 8001d48:	2305      	movs	r3, #5
 8001d4a:	f887 31d3 	strb.w	r3, [r7, #467]	; 0x1d3
        		break;
 8001d4e:	e005      	b.n	8001d5c <app_main+0xbcc>
        	}
        case STATE_FOUND_ME_PLS:
        	//вкл сис поиска
        	if(HAL_GetTick() - start_time_io >= TIME_LIDAR)
 8001d50:	f004 f8d6 	bl	8005f00 <HAL_GetTick>
			{
				//ФУНКЦИЯ ЛИДАРА
			}
    		break;
 8001d54:	e002      	b.n	8001d5c <app_main+0xbcc>
        	break;
 8001d56:	bf00      	nop
 8001d58:	e405      	b.n	8001566 <app_main+0x3d6>
        break;
 8001d5a:	bf00      	nop
 		packet_ma_type_11.flag = 0xFF;
 8001d5c:	e403      	b.n	8001566 <app_main+0x3d6>
 8001d5e:	bf00      	nop
 8001d60:	40020800 	.word	0x40020800
 8001d64:	40240000 	.word	0x40240000

08001d68 <invSqrt>:
//#define sampleFreq	512.0f		// sample frequency in Hz
//#define betaDef		0.1f		// 2 * proportional gain

volatile float q0 = 1.0f, q1 = 0.0f, q2 = 0.0f, q3 = 0.0f;

static float invSqrt(float x) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	ed87 0a01 	vstr	s0, [r7, #4]
	i = 0x5f3759df - (i>>1);
	y = *(float*)&i;
	y = y * (1.5f - (halfx * y * y));
	return y;*/

	return 1/sqrt(x);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7fe fbf0 	bl	8000558 <__aeabi_f2d>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	ec43 2b10 	vmov	d0, r2, r3
 8001d80:	f012 fd48 	bl	8014814 <sqrt>
 8001d84:	ec53 2b10 	vmov	r2, r3, d0
 8001d88:	f04f 0000 	mov.w	r0, #0
 8001d8c:	4908      	ldr	r1, [pc, #32]	; (8001db0 <invSqrt+0x48>)
 8001d8e:	f7fe fd65 	bl	800085c <__aeabi_ddiv>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	4610      	mov	r0, r2
 8001d98:	4619      	mov	r1, r3
 8001d9a:	f7fe ff2d 	bl	8000bf8 <__aeabi_d2f>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	ee07 3a90 	vmov	s15, r3
}
 8001da4:	eeb0 0a67 	vmov.f32	s0, s15
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	3ff00000 	.word	0x3ff00000

08001db4 <MadgwickAHRSupdate>:

void MadgwickAHRSupdate(float* quaternion, float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz, float dt, float beta) {
 8001db4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001db8:	b0b6      	sub	sp, #216	; 0xd8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001dbe:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
 8001dc2:	edc7 0a0d 	vstr	s1, [r7, #52]	; 0x34
 8001dc6:	ed87 1a0c 	vstr	s2, [r7, #48]	; 0x30
 8001dca:	edc7 1a0b 	vstr	s3, [r7, #44]	; 0x2c
 8001dce:	ed87 2a0a 	vstr	s4, [r7, #40]	; 0x28
 8001dd2:	edc7 2a09 	vstr	s5, [r7, #36]	; 0x24
 8001dd6:	ed87 3a08 	vstr	s6, [r7, #32]
 8001dda:	edc7 3a07 	vstr	s7, [r7, #28]
 8001dde:	ed87 4a06 	vstr	s8, [r7, #24]
 8001de2:	edc7 4a05 	vstr	s9, [r7, #20]
 8001de6:	ed87 5a04 	vstr	s10, [r7, #16]
#	pragma GCC diagnostic ignored "-Wunused-but-set-variable"
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;
#	pragma GCC diagnostic pop

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8001dea:	edd7 7a08 	vldr	s15, [r7, #32]
 8001dee:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df6:	d122      	bne.n	8001e3e <MadgwickAHRSupdate+0x8a>
 8001df8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dfc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e04:	d11b      	bne.n	8001e3e <MadgwickAHRSupdate+0x8a>
 8001e06:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e0a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e12:	d114      	bne.n	8001e3e <MadgwickAHRSupdate+0x8a>
		MadgwickAHRSupdateIMU(quaternion, gx, gy, gz, ax, ay, az, dt, beta);
 8001e14:	edd7 3a04 	vldr	s7, [r7, #16]
 8001e18:	ed97 3a05 	vldr	s6, [r7, #20]
 8001e1c:	edd7 2a09 	vldr	s5, [r7, #36]	; 0x24
 8001e20:	ed97 2a0a 	vldr	s4, [r7, #40]	; 0x28
 8001e24:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 8001e28:	ed97 1a0c 	vldr	s2, [r7, #48]	; 0x30
 8001e2c:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 8001e30:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8001e34:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001e36:	f001 f99d 	bl	8003174 <MadgwickAHRSupdateIMU>
		return;
 8001e3a:	f001 b98c 	b.w	8003156 <MadgwickAHRSupdate+0x13a2>
	}

	float sampleFreq = 1 / dt;
 8001e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e42:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e4a:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8001e4e:	4be6      	ldr	r3, [pc, #920]	; (80021e8 <MadgwickAHRSupdate+0x434>)
 8001e50:	edd3 7a00 	vldr	s15, [r3]
 8001e54:	eeb1 7a67 	vneg.f32	s14, s15
 8001e58:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001e5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e60:	4be2      	ldr	r3, [pc, #904]	; (80021ec <MadgwickAHRSupdate+0x438>)
 8001e62:	edd3 6a00 	vldr	s13, [r3]
 8001e66:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001e6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e72:	4bdf      	ldr	r3, [pc, #892]	; (80021f0 <MadgwickAHRSupdate+0x43c>)
 8001e74:	edd3 6a00 	vldr	s13, [r3]
 8001e78:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001e7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e84:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001e88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e8c:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8001e90:	4bd8      	ldr	r3, [pc, #864]	; (80021f4 <MadgwickAHRSupdate+0x440>)
 8001e92:	ed93 7a00 	vldr	s14, [r3]
 8001e96:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001e9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e9e:	4bd3      	ldr	r3, [pc, #844]	; (80021ec <MadgwickAHRSupdate+0x438>)
 8001ea0:	edd3 6a00 	vldr	s13, [r3]
 8001ea4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001ea8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eb0:	4bcf      	ldr	r3, [pc, #828]	; (80021f0 <MadgwickAHRSupdate+0x43c>)
 8001eb2:	edd3 6a00 	vldr	s13, [r3]
 8001eb6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001eba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ec2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001ec6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eca:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8001ece:	4bc9      	ldr	r3, [pc, #804]	; (80021f4 <MadgwickAHRSupdate+0x440>)
 8001ed0:	ed93 7a00 	vldr	s14, [r3]
 8001ed4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001ed8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001edc:	4bc2      	ldr	r3, [pc, #776]	; (80021e8 <MadgwickAHRSupdate+0x434>)
 8001ede:	edd3 6a00 	vldr	s13, [r3]
 8001ee2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001ee6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001eee:	4bc0      	ldr	r3, [pc, #768]	; (80021f0 <MadgwickAHRSupdate+0x43c>)
 8001ef0:	edd3 6a00 	vldr	s13, [r3]
 8001ef4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001ef8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f00:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001f04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f08:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8001f0c:	4bb9      	ldr	r3, [pc, #740]	; (80021f4 <MadgwickAHRSupdate+0x440>)
 8001f0e:	ed93 7a00 	vldr	s14, [r3]
 8001f12:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f1a:	4bb3      	ldr	r3, [pc, #716]	; (80021e8 <MadgwickAHRSupdate+0x434>)
 8001f1c:	edd3 6a00 	vldr	s13, [r3]
 8001f20:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f2c:	4baf      	ldr	r3, [pc, #700]	; (80021ec <MadgwickAHRSupdate+0x438>)
 8001f2e:	edd3 6a00 	vldr	s13, [r3]
 8001f32:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001f36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f3e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001f42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f46:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001f4a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f4e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f56:	d10e      	bne.n	8001f76 <MadgwickAHRSupdate+0x1c2>
 8001f58:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001f5c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f64:	d107      	bne.n	8001f76 <MadgwickAHRSupdate+0x1c2>
 8001f66:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f6a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f72:	f001 8041 	beq.w	8002ff8 <MadgwickAHRSupdate+0x1244>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001f76:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f7a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001f7e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001f82:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f8a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f8e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f96:	eeb0 0a67 	vmov.f32	s0, s15
 8001f9a:	f7ff fee5 	bl	8001d68 <invSqrt>
 8001f9e:	ed87 0a30 	vstr	s0, [r7, #192]	; 0xc0
		ax *= recipNorm;
 8001fa2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001fa6:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8001faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fae:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		ay *= recipNorm;
 8001fb2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001fb6:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8001fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fbe:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		az *= recipNorm;
 8001fc2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001fc6:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8001fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fce:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8001fd2:	edd7 7a08 	vldr	s15, [r7, #32]
 8001fd6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001fda:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fde:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001fe2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fe6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001fee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff6:	f7ff feb7 	bl	8001d68 <invSqrt>
 8001ffa:	ed87 0a30 	vstr	s0, [r7, #192]	; 0xc0
		mx *= recipNorm;
 8001ffe:	ed97 7a08 	vldr	s14, [r7, #32]
 8002002:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800200a:	edc7 7a08 	vstr	s15, [r7, #32]
		my *= recipNorm;
 800200e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002012:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201a:	edc7 7a07 	vstr	s15, [r7, #28]
		mz *= recipNorm;
 800201e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002022:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800202a:	edc7 7a06 	vstr	s15, [r7, #24]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 800202e:	4b71      	ldr	r3, [pc, #452]	; (80021f4 <MadgwickAHRSupdate+0x440>)
 8002030:	edd3 7a00 	vldr	s15, [r3]
 8002034:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002038:	ed97 7a08 	vldr	s14, [r7, #32]
 800203c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002040:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
		_2q0my = 2.0f * q0 * my;
 8002044:	4b6b      	ldr	r3, [pc, #428]	; (80021f4 <MadgwickAHRSupdate+0x440>)
 8002046:	edd3 7a00 	vldr	s15, [r3]
 800204a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800204e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002056:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
		_2q0mz = 2.0f * q0 * mz;
 800205a:	4b66      	ldr	r3, [pc, #408]	; (80021f4 <MadgwickAHRSupdate+0x440>)
 800205c:	edd3 7a00 	vldr	s15, [r3]
 8002060:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002064:	ed97 7a06 	vldr	s14, [r7, #24]
 8002068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800206c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		_2q1mx = 2.0f * q1 * mx;
 8002070:	4b5d      	ldr	r3, [pc, #372]	; (80021e8 <MadgwickAHRSupdate+0x434>)
 8002072:	edd3 7a00 	vldr	s15, [r3]
 8002076:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800207a:	ed97 7a08 	vldr	s14, [r7, #32]
 800207e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002082:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		_2q0 = 2.0f * q0;
 8002086:	4b5b      	ldr	r3, [pc, #364]	; (80021f4 <MadgwickAHRSupdate+0x440>)
 8002088:	edd3 7a00 	vldr	s15, [r3]
 800208c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002090:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		_2q1 = 2.0f * q1;
 8002094:	4b54      	ldr	r3, [pc, #336]	; (80021e8 <MadgwickAHRSupdate+0x434>)
 8002096:	edd3 7a00 	vldr	s15, [r3]
 800209a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800209e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
		_2q2 = 2.0f * q2;
 80020a2:	4b52      	ldr	r3, [pc, #328]	; (80021ec <MadgwickAHRSupdate+0x438>)
 80020a4:	edd3 7a00 	vldr	s15, [r3]
 80020a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020ac:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
		_2q3 = 2.0f * q3;
 80020b0:	4b4f      	ldr	r3, [pc, #316]	; (80021f0 <MadgwickAHRSupdate+0x43c>)
 80020b2:	edd3 7a00 	vldr	s15, [r3]
 80020b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020ba:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		_2q0q2 = 2.0f * q0 * q2;
 80020be:	4b4d      	ldr	r3, [pc, #308]	; (80021f4 <MadgwickAHRSupdate+0x440>)
 80020c0:	edd3 7a00 	vldr	s15, [r3]
 80020c4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80020c8:	4b48      	ldr	r3, [pc, #288]	; (80021ec <MadgwickAHRSupdate+0x438>)
 80020ca:	edd3 7a00 	vldr	s15, [r3]
 80020ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020d2:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		_2q2q3 = 2.0f * q2 * q3;
 80020d6:	4b45      	ldr	r3, [pc, #276]	; (80021ec <MadgwickAHRSupdate+0x438>)
 80020d8:	edd3 7a00 	vldr	s15, [r3]
 80020dc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80020e0:	4b43      	ldr	r3, [pc, #268]	; (80021f0 <MadgwickAHRSupdate+0x43c>)
 80020e2:	edd3 7a00 	vldr	s15, [r3]
 80020e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ea:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		q0q0 = q0 * q0;
 80020ee:	4b41      	ldr	r3, [pc, #260]	; (80021f4 <MadgwickAHRSupdate+0x440>)
 80020f0:	ed93 7a00 	vldr	s14, [r3]
 80020f4:	4b3f      	ldr	r3, [pc, #252]	; (80021f4 <MadgwickAHRSupdate+0x440>)
 80020f6:	edd3 7a00 	vldr	s15, [r3]
 80020fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020fe:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		q0q1 = q0 * q1;
 8002102:	4b3c      	ldr	r3, [pc, #240]	; (80021f4 <MadgwickAHRSupdate+0x440>)
 8002104:	ed93 7a00 	vldr	s14, [r3]
 8002108:	4b37      	ldr	r3, [pc, #220]	; (80021e8 <MadgwickAHRSupdate+0x434>)
 800210a:	edd3 7a00 	vldr	s15, [r3]
 800210e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002112:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		q0q2 = q0 * q2;
 8002116:	4b37      	ldr	r3, [pc, #220]	; (80021f4 <MadgwickAHRSupdate+0x440>)
 8002118:	ed93 7a00 	vldr	s14, [r3]
 800211c:	4b33      	ldr	r3, [pc, #204]	; (80021ec <MadgwickAHRSupdate+0x438>)
 800211e:	edd3 7a00 	vldr	s15, [r3]
 8002122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002126:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		q0q3 = q0 * q3;
 800212a:	4b32      	ldr	r3, [pc, #200]	; (80021f4 <MadgwickAHRSupdate+0x440>)
 800212c:	ed93 7a00 	vldr	s14, [r3]
 8002130:	4b2f      	ldr	r3, [pc, #188]	; (80021f0 <MadgwickAHRSupdate+0x43c>)
 8002132:	edd3 7a00 	vldr	s15, [r3]
 8002136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800213a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		q1q1 = q1 * q1;
 800213e:	4b2a      	ldr	r3, [pc, #168]	; (80021e8 <MadgwickAHRSupdate+0x434>)
 8002140:	ed93 7a00 	vldr	s14, [r3]
 8002144:	4b28      	ldr	r3, [pc, #160]	; (80021e8 <MadgwickAHRSupdate+0x434>)
 8002146:	edd3 7a00 	vldr	s15, [r3]
 800214a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800214e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		q1q2 = q1 * q2;
 8002152:	4b25      	ldr	r3, [pc, #148]	; (80021e8 <MadgwickAHRSupdate+0x434>)
 8002154:	ed93 7a00 	vldr	s14, [r3]
 8002158:	4b24      	ldr	r3, [pc, #144]	; (80021ec <MadgwickAHRSupdate+0x438>)
 800215a:	edd3 7a00 	vldr	s15, [r3]
 800215e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002162:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		q1q3 = q1 * q3;
 8002166:	4b20      	ldr	r3, [pc, #128]	; (80021e8 <MadgwickAHRSupdate+0x434>)
 8002168:	ed93 7a00 	vldr	s14, [r3]
 800216c:	4b20      	ldr	r3, [pc, #128]	; (80021f0 <MadgwickAHRSupdate+0x43c>)
 800216e:	edd3 7a00 	vldr	s15, [r3]
 8002172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002176:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q2q2 = q2 * q2;
 800217a:	4b1c      	ldr	r3, [pc, #112]	; (80021ec <MadgwickAHRSupdate+0x438>)
 800217c:	ed93 7a00 	vldr	s14, [r3]
 8002180:	4b1a      	ldr	r3, [pc, #104]	; (80021ec <MadgwickAHRSupdate+0x438>)
 8002182:	edd3 7a00 	vldr	s15, [r3]
 8002186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800218a:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q2q3 = q2 * q3;
 800218e:	4b17      	ldr	r3, [pc, #92]	; (80021ec <MadgwickAHRSupdate+0x438>)
 8002190:	ed93 7a00 	vldr	s14, [r3]
 8002194:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <MadgwickAHRSupdate+0x43c>)
 8002196:	edd3 7a00 	vldr	s15, [r3]
 800219a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800219e:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q3q3 = q3 * q3;
 80021a2:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <MadgwickAHRSupdate+0x43c>)
 80021a4:	ed93 7a00 	vldr	s14, [r3]
 80021a8:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <MadgwickAHRSupdate+0x43c>)
 80021aa:	edd3 7a00 	vldr	s15, [r3]
 80021ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b2:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 80021b6:	ed97 7a08 	vldr	s14, [r7, #32]
 80021ba:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80021be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021c2:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <MadgwickAHRSupdate+0x43c>)
 80021c4:	edd3 6a00 	vldr	s13, [r3]
 80021c8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80021cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <MadgwickAHRSupdate+0x438>)
 80021d6:	edd3 6a00 	vldr	s13, [r3]
 80021da:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80021de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021e6:	e007      	b.n	80021f8 <MadgwickAHRSupdate+0x444>
 80021e8:	200022c4 	.word	0x200022c4
 80021ec:	200022c8 	.word	0x200022c8
 80021f0:	200022cc 	.word	0x200022cc
 80021f4:	20000000 	.word	0x20000000
 80021f8:	edd7 6a08 	vldr	s13, [r7, #32]
 80021fc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002200:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002204:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002208:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 800220c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002210:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002214:	4bef      	ldr	r3, [pc, #956]	; (80025d4 <MadgwickAHRSupdate+0x820>)
 8002216:	edd3 7a00 	vldr	s15, [r3]
 800221a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800221e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002222:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8002226:	edd7 7a06 	vldr	s15, [r7, #24]
 800222a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800222e:	4bea      	ldr	r3, [pc, #936]	; (80025d8 <MadgwickAHRSupdate+0x824>)
 8002230:	edd3 7a00 	vldr	s15, [r3]
 8002234:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002238:	ee37 7a27 	vadd.f32	s14, s14, s15
 800223c:	edd7 6a08 	vldr	s13, [r7, #32]
 8002240:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002244:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002248:	ee37 7a67 	vsub.f32	s14, s14, s15
 800224c:	edd7 6a08 	vldr	s13, [r7, #32]
 8002250:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002254:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002258:	ee77 7a67 	vsub.f32	s15, s14, s15
 800225c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8002260:	4bdd      	ldr	r3, [pc, #884]	; (80025d8 <MadgwickAHRSupdate+0x824>)
 8002262:	ed93 7a00 	vldr	s14, [r3]
 8002266:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800226a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800226e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002272:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002276:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800227a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800227e:	4bd7      	ldr	r3, [pc, #860]	; (80025dc <MadgwickAHRSupdate+0x828>)
 8002280:	edd3 6a00 	vldr	s13, [r3]
 8002284:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8002288:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800228c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002290:	4bd0      	ldr	r3, [pc, #832]	; (80025d4 <MadgwickAHRSupdate+0x820>)
 8002292:	edd3 6a00 	vldr	s13, [r3]
 8002296:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800229a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800229e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80022a6:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80022aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80022b6:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80022ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022c2:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 80022c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80022ca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022ce:	4bc2      	ldr	r3, [pc, #776]	; (80025d8 <MadgwickAHRSupdate+0x824>)
 80022d0:	edd3 7a00 	vldr	s15, [r3]
 80022d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80022e0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80022e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ec:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		_2bx = sqrt(hx * hx + hy * hy);
 80022f0:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80022f4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80022f8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80022fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002300:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002304:	ee17 0a90 	vmov	r0, s15
 8002308:	f7fe f926 	bl	8000558 <__aeabi_f2d>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	ec43 2b10 	vmov	d0, r2, r3
 8002314:	f012 fa7e 	bl	8014814 <sqrt>
 8002318:	ec53 2b10 	vmov	r2, r3, d0
 800231c:	4610      	mov	r0, r2
 800231e:	4619      	mov	r1, r3
 8002320:	f7fe fc6a 	bl	8000bf8 <__aeabi_d2f>
 8002324:	4603      	mov	r3, r0
 8002326:	667b      	str	r3, [r7, #100]	; 0x64
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8002328:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800232c:	eeb1 7a67 	vneg.f32	s14, s15
 8002330:	4ba8      	ldr	r3, [pc, #672]	; (80025d4 <MadgwickAHRSupdate+0x820>)
 8002332:	edd3 7a00 	vldr	s15, [r3]
 8002336:	ee27 7a27 	vmul.f32	s14, s14, s15
 800233a:	4ba8      	ldr	r3, [pc, #672]	; (80025dc <MadgwickAHRSupdate+0x828>)
 800233c:	edd3 6a00 	vldr	s13, [r3]
 8002340:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002344:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002348:	ee37 7a27 	vadd.f32	s14, s14, s15
 800234c:	edd7 6a06 	vldr	s13, [r7, #24]
 8002350:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002354:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002358:	ee37 7a27 	vadd.f32	s14, s14, s15
 800235c:	4b9e      	ldr	r3, [pc, #632]	; (80025d8 <MadgwickAHRSupdate+0x824>)
 800235e:	edd3 6a00 	vldr	s13, [r3]
 8002362:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002366:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800236a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800236e:	edd7 6a06 	vldr	s13, [r7, #24]
 8002372:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002376:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800237a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800237e:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8002382:	edd7 7a07 	vldr	s15, [r7, #28]
 8002386:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800238a:	4b93      	ldr	r3, [pc, #588]	; (80025d8 <MadgwickAHRSupdate+0x824>)
 800238c:	edd3 7a00 	vldr	s15, [r3]
 8002390:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002394:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002398:	edd7 6a06 	vldr	s13, [r7, #24]
 800239c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80023a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023a8:	edd7 6a06 	vldr	s13, [r7, #24]
 80023ac:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80023b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		_4bx = 2.0f * _2bx;
 80023bc:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80023c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023c4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		_4bz = 2.0f * _2bz;
 80023c8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80023cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023d0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		float _8bx = 2.0f * _4bx;
 80023d4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80023d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023dc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		float _8bz = 2.0f * _4bz;
 80023e0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80023e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023e8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

		// Gradient decent algorithm corrective step
		s0= -_2q2*(2*(q1q3 - q0q2) - ax)    +   _2q1*(2*(q0q1 + q2q3) - ay)   +  -_4bz*q2*(_4bx*(0.5 - q2q2 - q3q3) + _4bz*(q1q3 - q0q2) - mx)   +   (-_4bx*q3+_4bz*q1)*(_4bx*(q1q2 - q0q3) + _4bz*(q0q1 + q2q3) - my)    +   _4bx*q2*(_4bx*(q0q2 + q1q3) + _4bz*(0.5 - q1q1 - q2q2) - mz);
 80023ec:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80023f0:	eeb1 7a67 	vneg.f32	s14, s15
 80023f4:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 80023f8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80023fc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002400:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002404:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002408:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800240c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002410:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8002414:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002418:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800241c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002420:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002424:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002428:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800242c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002430:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002434:	ee17 0a90 	vmov	r0, s15
 8002438:	f7fe f88e 	bl	8000558 <__aeabi_f2d>
 800243c:	4604      	mov	r4, r0
 800243e:	460d      	mov	r5, r1
 8002440:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002444:	eeb1 7a67 	vneg.f32	s14, s15
 8002448:	4b62      	ldr	r3, [pc, #392]	; (80025d4 <MadgwickAHRSupdate+0x820>)
 800244a:	edd3 7a00 	vldr	s15, [r3]
 800244e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002452:	ee17 0a90 	vmov	r0, s15
 8002456:	f7fe f87f 	bl	8000558 <__aeabi_f2d>
 800245a:	4680      	mov	r8, r0
 800245c:	4689      	mov	r9, r1
 800245e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002460:	f7fe f87a 	bl	8000558 <__aeabi_f2d>
 8002464:	4682      	mov	sl, r0
 8002466:	468b      	mov	fp, r1
 8002468:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800246a:	f7fe f875 	bl	8000558 <__aeabi_f2d>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	f04f 0000 	mov.w	r0, #0
 8002476:	495a      	ldr	r1, [pc, #360]	; (80025e0 <MadgwickAHRSupdate+0x82c>)
 8002478:	f7fd ff0e 	bl	8000298 <__aeabi_dsub>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002484:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002486:	f7fe f867 	bl	8000558 <__aeabi_f2d>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002492:	f7fd ff01 	bl	8000298 <__aeabi_dsub>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	4650      	mov	r0, sl
 800249c:	4659      	mov	r1, fp
 800249e:	f7fe f8b3 	bl	8000608 <__aeabi_dmul>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	4692      	mov	sl, r2
 80024a8:	469b      	mov	fp, r3
 80024aa:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80024ae:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80024b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024b6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80024ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024be:	ee17 0a90 	vmov	r0, s15
 80024c2:	f7fe f849 	bl	8000558 <__aeabi_f2d>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4650      	mov	r0, sl
 80024cc:	4659      	mov	r1, fp
 80024ce:	f7fd fee5 	bl	800029c <__adddf3>
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	4692      	mov	sl, r2
 80024d8:	469b      	mov	fp, r3
 80024da:	6a38      	ldr	r0, [r7, #32]
 80024dc:	f7fe f83c 	bl	8000558 <__aeabi_f2d>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4650      	mov	r0, sl
 80024e6:	4659      	mov	r1, fp
 80024e8:	f7fd fed6 	bl	8000298 <__aeabi_dsub>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4640      	mov	r0, r8
 80024f2:	4649      	mov	r1, r9
 80024f4:	f7fe f888 	bl	8000608 <__aeabi_dmul>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	4620      	mov	r0, r4
 80024fe:	4629      	mov	r1, r5
 8002500:	f7fd fecc 	bl	800029c <__adddf3>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4614      	mov	r4, r2
 800250a:	461d      	mov	r5, r3
 800250c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002510:	eeb1 7a67 	vneg.f32	s14, s15
 8002514:	4b30      	ldr	r3, [pc, #192]	; (80025d8 <MadgwickAHRSupdate+0x824>)
 8002516:	edd3 7a00 	vldr	s15, [r3]
 800251a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800251e:	4b2f      	ldr	r3, [pc, #188]	; (80025dc <MadgwickAHRSupdate+0x828>)
 8002520:	edd3 6a00 	vldr	s13, [r3]
 8002524:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002528:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800252c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002530:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8002534:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002538:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800253c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002540:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002544:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 8002548:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800254c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002550:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002554:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002558:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800255c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002560:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002568:	ee17 0a90 	vmov	r0, s15
 800256c:	f7fd fff4 	bl	8000558 <__aeabi_f2d>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	4620      	mov	r0, r4
 8002576:	4629      	mov	r1, r5
 8002578:	f7fd fe90 	bl	800029c <__adddf3>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002584:	4b13      	ldr	r3, [pc, #76]	; (80025d4 <MadgwickAHRSupdate+0x820>)
 8002586:	ed93 7a00 	vldr	s14, [r3]
 800258a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800258e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002592:	ee17 0a90 	vmov	r0, s15
 8002596:	f7fd ffdf 	bl	8000558 <__aeabi_f2d>
 800259a:	4680      	mov	r8, r0
 800259c:	4689      	mov	r9, r1
 800259e:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80025a2:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80025a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025aa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80025ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b2:	ee17 0a90 	vmov	r0, s15
 80025b6:	f7fd ffcf 	bl	8000558 <__aeabi_f2d>
 80025ba:	4682      	mov	sl, r0
 80025bc:	468b      	mov	fp, r1
 80025be:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80025c0:	f7fd ffca 	bl	8000558 <__aeabi_f2d>
 80025c4:	e9c7 0100 	strd	r0, r1, [r7]
 80025c8:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80025cc:	f7fd ffc4 	bl	8000558 <__aeabi_f2d>
 80025d0:	e008      	b.n	80025e4 <MadgwickAHRSupdate+0x830>
 80025d2:	bf00      	nop
 80025d4:	200022c8 	.word	0x200022c8
 80025d8:	200022cc 	.word	0x200022cc
 80025dc:	200022c4 	.word	0x200022c4
 80025e0:	3fe00000 	.word	0x3fe00000
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	f04f 0000 	mov.w	r0, #0
 80025ec:	49e9      	ldr	r1, [pc, #932]	; (8002994 <MadgwickAHRSupdate+0xbe0>)
 80025ee:	f7fd fe53 	bl	8000298 <__aeabi_dsub>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4614      	mov	r4, r2
 80025f8:	461d      	mov	r5, r3
 80025fa:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80025fc:	f7fd ffac 	bl	8000558 <__aeabi_f2d>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	4620      	mov	r0, r4
 8002606:	4629      	mov	r1, r5
 8002608:	f7fd fe46 	bl	8000298 <__aeabi_dsub>
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002614:	f7fd fff8 	bl	8000608 <__aeabi_dmul>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4650      	mov	r0, sl
 800261e:	4659      	mov	r1, fp
 8002620:	f7fd fe3c 	bl	800029c <__adddf3>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4614      	mov	r4, r2
 800262a:	461d      	mov	r5, r3
 800262c:	69b8      	ldr	r0, [r7, #24]
 800262e:	f7fd ff93 	bl	8000558 <__aeabi_f2d>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	4620      	mov	r0, r4
 8002638:	4629      	mov	r1, r5
 800263a:	f7fd fe2d 	bl	8000298 <__aeabi_dsub>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4640      	mov	r0, r8
 8002644:	4649      	mov	r1, r9
 8002646:	f7fd ffdf 	bl	8000608 <__aeabi_dmul>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002652:	f7fd fe23 	bl	800029c <__adddf3>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	4610      	mov	r0, r2
 800265c:	4619      	mov	r1, r3
 800265e:	f7fe facb 	bl	8000bf8 <__aeabi_d2f>
 8002662:	4603      	mov	r3, r0
 8002664:	64fb      	str	r3, [r7, #76]	; 0x4c
		s1= _2q3*(2*(q1q3 - q0q2) - ax) +   _2q0*(2*(q0q1 + q2q3) - ay) +   -4*q1*(2*(0.5 - q1q1 - q2q2) - az)    +   _4bz*q3*(_4bx*(0.5 - q2q2 - q3q3) + _4bz*(q1q3 - q0q2) - mx)   + (_4bx*q2+_4bz*q0)*(_4bx*(q1q2 - q0q3) + _4bz*(q0q1 + q2q3) - my)   +   (_4bx*q3-_8bz*q1)*(_4bx*(q0q2 + q1q3) + _4bz*(0.5 - q1q1 - q2q2) - mz);
 8002666:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800266a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800266e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002672:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002676:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800267a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800267e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002682:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002686:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 800268a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800268e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002692:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002696:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800269a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800269e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80026a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026aa:	ee17 0a90 	vmov	r0, s15
 80026ae:	f7fd ff53 	bl	8000558 <__aeabi_f2d>
 80026b2:	4604      	mov	r4, r0
 80026b4:	460d      	mov	r5, r1
 80026b6:	4bb8      	ldr	r3, [pc, #736]	; (8002998 <MadgwickAHRSupdate+0xbe4>)
 80026b8:	edd3 7a00 	vldr	s15, [r3]
 80026bc:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 80026c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026c4:	ee17 0a90 	vmov	r0, s15
 80026c8:	f7fd ff46 	bl	8000558 <__aeabi_f2d>
 80026cc:	4680      	mov	r8, r0
 80026ce:	4689      	mov	r9, r1
 80026d0:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80026d4:	f7fd ff40 	bl	8000558 <__aeabi_f2d>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	f04f 0000 	mov.w	r0, #0
 80026e0:	49ac      	ldr	r1, [pc, #688]	; (8002994 <MadgwickAHRSupdate+0xbe0>)
 80026e2:	f7fd fdd9 	bl	8000298 <__aeabi_dsub>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	4692      	mov	sl, r2
 80026ec:	469b      	mov	fp, r3
 80026ee:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80026f0:	f7fd ff32 	bl	8000558 <__aeabi_f2d>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4650      	mov	r0, sl
 80026fa:	4659      	mov	r1, fp
 80026fc:	f7fd fdcc 	bl	8000298 <__aeabi_dsub>
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	4610      	mov	r0, r2
 8002706:	4619      	mov	r1, r3
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	f7fd fdc6 	bl	800029c <__adddf3>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	4692      	mov	sl, r2
 8002716:	469b      	mov	fp, r3
 8002718:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800271a:	f7fd ff1d 	bl	8000558 <__aeabi_f2d>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4650      	mov	r0, sl
 8002724:	4659      	mov	r1, fp
 8002726:	f7fd fdb7 	bl	8000298 <__aeabi_dsub>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	4640      	mov	r0, r8
 8002730:	4649      	mov	r1, r9
 8002732:	f7fd ff69 	bl	8000608 <__aeabi_dmul>
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	4620      	mov	r0, r4
 800273c:	4629      	mov	r1, r5
 800273e:	f7fd fdad 	bl	800029c <__adddf3>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4692      	mov	sl, r2
 8002748:	469b      	mov	fp, r3
 800274a:	4b94      	ldr	r3, [pc, #592]	; (800299c <MadgwickAHRSupdate+0xbe8>)
 800274c:	ed93 7a00 	vldr	s14, [r3]
 8002750:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002758:	ee17 0a90 	vmov	r0, s15
 800275c:	f7fd fefc 	bl	8000558 <__aeabi_f2d>
 8002760:	4604      	mov	r4, r0
 8002762:	460d      	mov	r5, r1
 8002764:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002766:	f7fd fef7 	bl	8000558 <__aeabi_f2d>
 800276a:	4680      	mov	r8, r0
 800276c:	4689      	mov	r9, r1
 800276e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002770:	f7fd fef2 	bl	8000558 <__aeabi_f2d>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	f04f 0000 	mov.w	r0, #0
 800277c:	4985      	ldr	r1, [pc, #532]	; (8002994 <MadgwickAHRSupdate+0xbe0>)
 800277e:	f7fd fd8b 	bl	8000298 <__aeabi_dsub>
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800278a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800278c:	f7fd fee4 	bl	8000558 <__aeabi_f2d>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002798:	f7fd fd7e 	bl	8000298 <__aeabi_dsub>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	4640      	mov	r0, r8
 80027a2:	4649      	mov	r1, r9
 80027a4:	f7fd ff30 	bl	8000608 <__aeabi_dmul>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	4690      	mov	r8, r2
 80027ae:	4699      	mov	r9, r3
 80027b0:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80027b4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80027b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027bc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80027c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027c4:	ee17 0a90 	vmov	r0, s15
 80027c8:	f7fd fec6 	bl	8000558 <__aeabi_f2d>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4640      	mov	r0, r8
 80027d2:	4649      	mov	r1, r9
 80027d4:	f7fd fd62 	bl	800029c <__adddf3>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4690      	mov	r8, r2
 80027de:	4699      	mov	r9, r3
 80027e0:	6a38      	ldr	r0, [r7, #32]
 80027e2:	f7fd feb9 	bl	8000558 <__aeabi_f2d>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	4640      	mov	r0, r8
 80027ec:	4649      	mov	r1, r9
 80027ee:	f7fd fd53 	bl	8000298 <__aeabi_dsub>
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	4620      	mov	r0, r4
 80027f8:	4629      	mov	r1, r5
 80027fa:	f7fd ff05 	bl	8000608 <__aeabi_dmul>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4650      	mov	r0, sl
 8002804:	4659      	mov	r1, fp
 8002806:	f7fd fd49 	bl	800029c <__adddf3>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4614      	mov	r4, r2
 8002810:	461d      	mov	r5, r3
 8002812:	4b63      	ldr	r3, [pc, #396]	; (80029a0 <MadgwickAHRSupdate+0xbec>)
 8002814:	ed93 7a00 	vldr	s14, [r3]
 8002818:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800281c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002820:	4b60      	ldr	r3, [pc, #384]	; (80029a4 <MadgwickAHRSupdate+0xbf0>)
 8002822:	edd3 6a00 	vldr	s13, [r3]
 8002826:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800282a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800282e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002832:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8002836:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800283a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800283e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002842:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002846:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 800284a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800284e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002852:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002856:	ee66 7a27 	vmul.f32	s15, s12, s15
 800285a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800285e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002862:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800286a:	ee17 0a90 	vmov	r0, s15
 800286e:	f7fd fe73 	bl	8000558 <__aeabi_f2d>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4620      	mov	r0, r4
 8002878:	4629      	mov	r1, r5
 800287a:	f7fd fd0f 	bl	800029c <__adddf3>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002886:	4b45      	ldr	r3, [pc, #276]	; (800299c <MadgwickAHRSupdate+0xbe8>)
 8002888:	ed93 7a00 	vldr	s14, [r3]
 800288c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002890:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002894:	4b40      	ldr	r3, [pc, #256]	; (8002998 <MadgwickAHRSupdate+0xbe4>)
 8002896:	edd3 6a00 	vldr	s13, [r3]
 800289a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800289e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028a6:	ee17 0a90 	vmov	r0, s15
 80028aa:	f7fd fe55 	bl	8000558 <__aeabi_f2d>
 80028ae:	4680      	mov	r8, r0
 80028b0:	4689      	mov	r9, r1
 80028b2:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80028b6:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80028ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028be:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80028c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028c6:	ee17 0a90 	vmov	r0, s15
 80028ca:	f7fd fe45 	bl	8000558 <__aeabi_f2d>
 80028ce:	4682      	mov	sl, r0
 80028d0:	468b      	mov	fp, r1
 80028d2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80028d4:	f7fd fe40 	bl	8000558 <__aeabi_f2d>
 80028d8:	e9c7 0100 	strd	r0, r1, [r7]
 80028dc:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80028e0:	f7fd fe3a 	bl	8000558 <__aeabi_f2d>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	f04f 0000 	mov.w	r0, #0
 80028ec:	4929      	ldr	r1, [pc, #164]	; (8002994 <MadgwickAHRSupdate+0xbe0>)
 80028ee:	f7fd fcd3 	bl	8000298 <__aeabi_dsub>
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	4614      	mov	r4, r2
 80028f8:	461d      	mov	r5, r3
 80028fa:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80028fc:	f7fd fe2c 	bl	8000558 <__aeabi_f2d>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4620      	mov	r0, r4
 8002906:	4629      	mov	r1, r5
 8002908:	f7fd fcc6 	bl	8000298 <__aeabi_dsub>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002914:	f7fd fe78 	bl	8000608 <__aeabi_dmul>
 8002918:	4602      	mov	r2, r0
 800291a:	460b      	mov	r3, r1
 800291c:	4650      	mov	r0, sl
 800291e:	4659      	mov	r1, fp
 8002920:	f7fd fcbc 	bl	800029c <__adddf3>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4614      	mov	r4, r2
 800292a:	461d      	mov	r5, r3
 800292c:	69b8      	ldr	r0, [r7, #24]
 800292e:	f7fd fe13 	bl	8000558 <__aeabi_f2d>
 8002932:	4602      	mov	r2, r0
 8002934:	460b      	mov	r3, r1
 8002936:	4620      	mov	r0, r4
 8002938:	4629      	mov	r1, r5
 800293a:	f7fd fcad 	bl	8000298 <__aeabi_dsub>
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	4640      	mov	r0, r8
 8002944:	4649      	mov	r1, r9
 8002946:	f7fd fe5f 	bl	8000608 <__aeabi_dmul>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002952:	f7fd fca3 	bl	800029c <__adddf3>
 8002956:	4602      	mov	r2, r0
 8002958:	460b      	mov	r3, r1
 800295a:	4610      	mov	r0, r2
 800295c:	4619      	mov	r1, r3
 800295e:	f7fe f94b 	bl	8000bf8 <__aeabi_d2f>
 8002962:	4603      	mov	r3, r0
 8002964:	64bb      	str	r3, [r7, #72]	; 0x48
		s2= -_2q0*(2*(q1q3 - q0q2) - ax)    +     _2q3*(2*(q0q1 + q2q3) - ay)   +   (-4*q2)*(2*(0.5 - q1q1 - q2q2) - az) +   (-_8bx*q2-_4bz*q0)*(_4bx*(0.5 - q2q2 - q3q3) + _4bz*(q1q3 - q0q2) - mx)+(_4bx*q1+_4bz*q3)*(_4bx*(q1q2 - q0q3) + _4bz*(q0q1 + q2q3) - my)+(_4bx*q0-_8bz*q2)*(_4bx*(q0q2 + q1q3) + _4bz*(0.5 - q1q1 - q2q2) - mz);
 8002966:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800296a:	eeb1 7a67 	vneg.f32	s14, s15
 800296e:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8002972:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002976:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800297a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800297e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002982:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002986:	ee27 7a27 	vmul.f32	s14, s14, s15
 800298a:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 800298e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002992:	e009      	b.n	80029a8 <MadgwickAHRSupdate+0xbf4>
 8002994:	3fe00000 	.word	0x3fe00000
 8002998:	200022c4 	.word	0x200022c4
 800299c:	200022cc 	.word	0x200022cc
 80029a0:	200022c8 	.word	0x200022c8
 80029a4:	20000000 	.word	0x20000000
 80029a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029ac:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80029b0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80029b4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80029b8:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80029bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029c4:	ee17 0a90 	vmov	r0, s15
 80029c8:	f7fd fdc6 	bl	8000558 <__aeabi_f2d>
 80029cc:	4604      	mov	r4, r0
 80029ce:	460d      	mov	r5, r1
 80029d0:	4be8      	ldr	r3, [pc, #928]	; (8002d74 <MadgwickAHRSupdate+0xfc0>)
 80029d2:	edd3 7a00 	vldr	s15, [r3]
 80029d6:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 80029da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029de:	ee17 0a90 	vmov	r0, s15
 80029e2:	f7fd fdb9 	bl	8000558 <__aeabi_f2d>
 80029e6:	4680      	mov	r8, r0
 80029e8:	4689      	mov	r9, r1
 80029ea:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80029ee:	f7fd fdb3 	bl	8000558 <__aeabi_f2d>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	f04f 0000 	mov.w	r0, #0
 80029fa:	49df      	ldr	r1, [pc, #892]	; (8002d78 <MadgwickAHRSupdate+0xfc4>)
 80029fc:	f7fd fc4c 	bl	8000298 <__aeabi_dsub>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	4692      	mov	sl, r2
 8002a06:	469b      	mov	fp, r3
 8002a08:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002a0a:	f7fd fda5 	bl	8000558 <__aeabi_f2d>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	4650      	mov	r0, sl
 8002a14:	4659      	mov	r1, fp
 8002a16:	f7fd fc3f 	bl	8000298 <__aeabi_dsub>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4610      	mov	r0, r2
 8002a20:	4619      	mov	r1, r3
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	f7fd fc39 	bl	800029c <__adddf3>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4692      	mov	sl, r2
 8002a30:	469b      	mov	fp, r3
 8002a32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a34:	f7fd fd90 	bl	8000558 <__aeabi_f2d>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4650      	mov	r0, sl
 8002a3e:	4659      	mov	r1, fp
 8002a40:	f7fd fc2a 	bl	8000298 <__aeabi_dsub>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	4640      	mov	r0, r8
 8002a4a:	4649      	mov	r1, r9
 8002a4c:	f7fd fddc 	bl	8000608 <__aeabi_dmul>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4620      	mov	r0, r4
 8002a56:	4629      	mov	r1, r5
 8002a58:	f7fd fc20 	bl	800029c <__adddf3>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4692      	mov	sl, r2
 8002a62:	469b      	mov	fp, r3
 8002a64:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002a68:	eeb1 7a67 	vneg.f32	s14, s15
 8002a6c:	4bc1      	ldr	r3, [pc, #772]	; (8002d74 <MadgwickAHRSupdate+0xfc0>)
 8002a6e:	edd3 7a00 	vldr	s15, [r3]
 8002a72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a76:	4bc1      	ldr	r3, [pc, #772]	; (8002d7c <MadgwickAHRSupdate+0xfc8>)
 8002a78:	edd3 6a00 	vldr	s13, [r3]
 8002a7c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002a80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a88:	ee17 0a90 	vmov	r0, s15
 8002a8c:	f7fd fd64 	bl	8000558 <__aeabi_f2d>
 8002a90:	4604      	mov	r4, r0
 8002a92:	460d      	mov	r5, r1
 8002a94:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002a96:	f7fd fd5f 	bl	8000558 <__aeabi_f2d>
 8002a9a:	4680      	mov	r8, r0
 8002a9c:	4689      	mov	r9, r1
 8002a9e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002aa0:	f7fd fd5a 	bl	8000558 <__aeabi_f2d>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	f04f 0000 	mov.w	r0, #0
 8002aac:	49b2      	ldr	r1, [pc, #712]	; (8002d78 <MadgwickAHRSupdate+0xfc4>)
 8002aae:	f7fd fbf3 	bl	8000298 <__aeabi_dsub>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002aba:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002abc:	f7fd fd4c 	bl	8000558 <__aeabi_f2d>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ac8:	f7fd fbe6 	bl	8000298 <__aeabi_dsub>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4640      	mov	r0, r8
 8002ad2:	4649      	mov	r1, r9
 8002ad4:	f7fd fd98 	bl	8000608 <__aeabi_dmul>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4690      	mov	r8, r2
 8002ade:	4699      	mov	r9, r3
 8002ae0:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002ae4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002ae8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002aec:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002af4:	ee17 0a90 	vmov	r0, s15
 8002af8:	f7fd fd2e 	bl	8000558 <__aeabi_f2d>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4640      	mov	r0, r8
 8002b02:	4649      	mov	r1, r9
 8002b04:	f7fd fbca 	bl	800029c <__adddf3>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4690      	mov	r8, r2
 8002b0e:	4699      	mov	r9, r3
 8002b10:	6a38      	ldr	r0, [r7, #32]
 8002b12:	f7fd fd21 	bl	8000558 <__aeabi_f2d>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4640      	mov	r0, r8
 8002b1c:	4649      	mov	r1, r9
 8002b1e:	f7fd fbbb 	bl	8000298 <__aeabi_dsub>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4620      	mov	r0, r4
 8002b28:	4629      	mov	r1, r5
 8002b2a:	f7fd fd6d 	bl	8000608 <__aeabi_dmul>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	4650      	mov	r0, sl
 8002b34:	4659      	mov	r1, fp
 8002b36:	f7fd fbb1 	bl	800029c <__adddf3>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4614      	mov	r4, r2
 8002b40:	461d      	mov	r5, r3
 8002b42:	4b8f      	ldr	r3, [pc, #572]	; (8002d80 <MadgwickAHRSupdate+0xfcc>)
 8002b44:	ed93 7a00 	vldr	s14, [r3]
 8002b48:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002b4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b50:	4b8c      	ldr	r3, [pc, #560]	; (8002d84 <MadgwickAHRSupdate+0xfd0>)
 8002b52:	edd3 6a00 	vldr	s13, [r3]
 8002b56:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002b5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b62:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8002b66:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002b6a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002b6e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002b72:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b76:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 8002b7a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002b7e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002b82:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002b86:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002b8a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002b8e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b92:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b9a:	ee17 0a90 	vmov	r0, s15
 8002b9e:	f7fd fcdb 	bl	8000558 <__aeabi_f2d>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	4629      	mov	r1, r5
 8002baa:	f7fd fb77 	bl	800029c <__adddf3>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002bb6:	4b71      	ldr	r3, [pc, #452]	; (8002d7c <MadgwickAHRSupdate+0xfc8>)
 8002bb8:	ed93 7a00 	vldr	s14, [r3]
 8002bbc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002bc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bc4:	4b6b      	ldr	r3, [pc, #428]	; (8002d74 <MadgwickAHRSupdate+0xfc0>)
 8002bc6:	edd3 6a00 	vldr	s13, [r3]
 8002bca:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002bce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bd6:	ee17 0a90 	vmov	r0, s15
 8002bda:	f7fd fcbd 	bl	8000558 <__aeabi_f2d>
 8002bde:	4680      	mov	r8, r0
 8002be0:	4689      	mov	r9, r1
 8002be2:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002be6:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002bea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bee:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bf6:	ee17 0a90 	vmov	r0, s15
 8002bfa:	f7fd fcad 	bl	8000558 <__aeabi_f2d>
 8002bfe:	4682      	mov	sl, r0
 8002c00:	468b      	mov	fp, r1
 8002c02:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002c04:	f7fd fca8 	bl	8000558 <__aeabi_f2d>
 8002c08:	e9c7 0100 	strd	r0, r1, [r7]
 8002c0c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002c10:	f7fd fca2 	bl	8000558 <__aeabi_f2d>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	f04f 0000 	mov.w	r0, #0
 8002c1c:	4956      	ldr	r1, [pc, #344]	; (8002d78 <MadgwickAHRSupdate+0xfc4>)
 8002c1e:	f7fd fb3b 	bl	8000298 <__aeabi_dsub>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4614      	mov	r4, r2
 8002c28:	461d      	mov	r5, r3
 8002c2a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002c2c:	f7fd fc94 	bl	8000558 <__aeabi_f2d>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4620      	mov	r0, r4
 8002c36:	4629      	mov	r1, r5
 8002c38:	f7fd fb2e 	bl	8000298 <__aeabi_dsub>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c44:	f7fd fce0 	bl	8000608 <__aeabi_dmul>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4650      	mov	r0, sl
 8002c4e:	4659      	mov	r1, fp
 8002c50:	f7fd fb24 	bl	800029c <__adddf3>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4614      	mov	r4, r2
 8002c5a:	461d      	mov	r5, r3
 8002c5c:	69b8      	ldr	r0, [r7, #24]
 8002c5e:	f7fd fc7b 	bl	8000558 <__aeabi_f2d>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4620      	mov	r0, r4
 8002c68:	4629      	mov	r1, r5
 8002c6a:	f7fd fb15 	bl	8000298 <__aeabi_dsub>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4640      	mov	r0, r8
 8002c74:	4649      	mov	r1, r9
 8002c76:	f7fd fcc7 	bl	8000608 <__aeabi_dmul>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c82:	f7fd fb0b 	bl	800029c <__adddf3>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	f7fd ffb3 	bl	8000bf8 <__aeabi_d2f>
 8002c92:	4603      	mov	r3, r0
 8002c94:	647b      	str	r3, [r7, #68]	; 0x44
		s3= _2q1*(2*(q1q3 - q0q2) - ax) +   _2q2*(2*(q0q1 + q2q3) - ay)+(-_8bx*q3+_4bz*q1)*(_4bx*(0.5 - q2q2 - q3q3) + _4bz*(q1q3 - q0q2) - mx)+(-_4bx*q0+_4bz*q2)*(_4bx*(q1q2 - q0q3) + _4bz*(q0q1 + q2q3) - my)+(_4bx*q1)*(_4bx*(q0q2 + q1q3) + _4bz*(0.5 - q1q1 - q2q2) - mz);
 8002c96:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002c9a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002c9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ca2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002ca6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002caa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002cae:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002cb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cb6:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8002cba:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cc2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002cc6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002cca:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002cce:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002cd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cda:	ee17 0a90 	vmov	r0, s15
 8002cde:	f7fd fc3b 	bl	8000558 <__aeabi_f2d>
 8002ce2:	4604      	mov	r4, r0
 8002ce4:	460d      	mov	r5, r1
 8002ce6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002cea:	eeb1 7a67 	vneg.f32	s14, s15
 8002cee:	4b25      	ldr	r3, [pc, #148]	; (8002d84 <MadgwickAHRSupdate+0xfd0>)
 8002cf0:	edd3 7a00 	vldr	s15, [r3]
 8002cf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cf8:	4b21      	ldr	r3, [pc, #132]	; (8002d80 <MadgwickAHRSupdate+0xfcc>)
 8002cfa:	edd3 6a00 	vldr	s13, [r3]
 8002cfe:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002d02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d0a:	ee17 0a90 	vmov	r0, s15
 8002d0e:	f7fd fc23 	bl	8000558 <__aeabi_f2d>
 8002d12:	4680      	mov	r8, r0
 8002d14:	4689      	mov	r9, r1
 8002d16:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002d18:	f7fd fc1e 	bl	8000558 <__aeabi_f2d>
 8002d1c:	4682      	mov	sl, r0
 8002d1e:	468b      	mov	fp, r1
 8002d20:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002d22:	f7fd fc19 	bl	8000558 <__aeabi_f2d>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	f04f 0000 	mov.w	r0, #0
 8002d2e:	4912      	ldr	r1, [pc, #72]	; (8002d78 <MadgwickAHRSupdate+0xfc4>)
 8002d30:	f7fd fab2 	bl	8000298 <__aeabi_dsub>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002d3c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002d3e:	f7fd fc0b 	bl	8000558 <__aeabi_f2d>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d4a:	f7fd faa5 	bl	8000298 <__aeabi_dsub>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	4650      	mov	r0, sl
 8002d54:	4659      	mov	r1, fp
 8002d56:	f7fd fc57 	bl	8000608 <__aeabi_dmul>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	4692      	mov	sl, r2
 8002d60:	469b      	mov	fp, r3
 8002d62:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002d66:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002d6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d6e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002d72:	e009      	b.n	8002d88 <MadgwickAHRSupdate+0xfd4>
 8002d74:	200022c8 	.word	0x200022c8
 8002d78:	3fe00000 	.word	0x3fe00000
 8002d7c:	20000000 	.word	0x20000000
 8002d80:	200022c4 	.word	0x200022c4
 8002d84:	200022cc 	.word	0x200022cc
 8002d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d8c:	ee17 0a90 	vmov	r0, s15
 8002d90:	f7fd fbe2 	bl	8000558 <__aeabi_f2d>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4650      	mov	r0, sl
 8002d9a:	4659      	mov	r1, fp
 8002d9c:	f7fd fa7e 	bl	800029c <__adddf3>
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	4692      	mov	sl, r2
 8002da6:	469b      	mov	fp, r3
 8002da8:	6a38      	ldr	r0, [r7, #32]
 8002daa:	f7fd fbd5 	bl	8000558 <__aeabi_f2d>
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	4650      	mov	r0, sl
 8002db4:	4659      	mov	r1, fp
 8002db6:	f7fd fa6f 	bl	8000298 <__aeabi_dsub>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4640      	mov	r0, r8
 8002dc0:	4649      	mov	r1, r9
 8002dc2:	f7fd fc21 	bl	8000608 <__aeabi_dmul>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4620      	mov	r0, r4
 8002dcc:	4629      	mov	r1, r5
 8002dce:	f7fd fa65 	bl	800029c <__adddf3>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	4614      	mov	r4, r2
 8002dd8:	461d      	mov	r5, r3
 8002dda:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002dde:	eeb1 7a67 	vneg.f32	s14, s15
 8002de2:	4bdf      	ldr	r3, [pc, #892]	; (8003160 <MadgwickAHRSupdate+0x13ac>)
 8002de4:	edd3 7a00 	vldr	s15, [r3]
 8002de8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dec:	4bdd      	ldr	r3, [pc, #884]	; (8003164 <MadgwickAHRSupdate+0x13b0>)
 8002dee:	edd3 6a00 	vldr	s13, [r3]
 8002df2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002df6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dfa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dfe:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8002e02:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002e06:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002e0a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002e0e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e12:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 8002e16:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002e1a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002e1e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002e22:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e26:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002e2a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e2e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e36:	ee17 0a90 	vmov	r0, s15
 8002e3a:	f7fd fb8d 	bl	8000558 <__aeabi_f2d>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	4620      	mov	r0, r4
 8002e44:	4629      	mov	r1, r5
 8002e46:	f7fd fa29 	bl	800029c <__adddf3>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002e52:	4bc5      	ldr	r3, [pc, #788]	; (8003168 <MadgwickAHRSupdate+0x13b4>)
 8002e54:	ed93 7a00 	vldr	s14, [r3]
 8002e58:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e60:	ee17 0a90 	vmov	r0, s15
 8002e64:	f7fd fb78 	bl	8000558 <__aeabi_f2d>
 8002e68:	4680      	mov	r8, r0
 8002e6a:	4689      	mov	r9, r1
 8002e6c:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002e70:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002e74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e78:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e80:	ee17 0a90 	vmov	r0, s15
 8002e84:	f7fd fb68 	bl	8000558 <__aeabi_f2d>
 8002e88:	4682      	mov	sl, r0
 8002e8a:	468b      	mov	fp, r1
 8002e8c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002e8e:	f7fd fb63 	bl	8000558 <__aeabi_f2d>
 8002e92:	e9c7 0100 	strd	r0, r1, [r7]
 8002e96:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002e9a:	f7fd fb5d 	bl	8000558 <__aeabi_f2d>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	f04f 0000 	mov.w	r0, #0
 8002ea6:	49b1      	ldr	r1, [pc, #708]	; (800316c <MadgwickAHRSupdate+0x13b8>)
 8002ea8:	f7fd f9f6 	bl	8000298 <__aeabi_dsub>
 8002eac:	4602      	mov	r2, r0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	4614      	mov	r4, r2
 8002eb2:	461d      	mov	r5, r3
 8002eb4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002eb6:	f7fd fb4f 	bl	8000558 <__aeabi_f2d>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	4629      	mov	r1, r5
 8002ec2:	f7fd f9e9 	bl	8000298 <__aeabi_dsub>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ece:	f7fd fb9b 	bl	8000608 <__aeabi_dmul>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	4650      	mov	r0, sl
 8002ed8:	4659      	mov	r1, fp
 8002eda:	f7fd f9df 	bl	800029c <__adddf3>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4614      	mov	r4, r2
 8002ee4:	461d      	mov	r5, r3
 8002ee6:	69b8      	ldr	r0, [r7, #24]
 8002ee8:	f7fd fb36 	bl	8000558 <__aeabi_f2d>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	4629      	mov	r1, r5
 8002ef4:	f7fd f9d0 	bl	8000298 <__aeabi_dsub>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4640      	mov	r0, r8
 8002efe:	4649      	mov	r1, r9
 8002f00:	f7fd fb82 	bl	8000608 <__aeabi_dmul>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f0c:	f7fd f9c6 	bl	800029c <__adddf3>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4610      	mov	r0, r2
 8002f16:	4619      	mov	r1, r3
 8002f18:	f7fd fe6e 	bl	8000bf8 <__aeabi_d2f>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	643b      	str	r3, [r7, #64]	; 0x40
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002f20:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002f24:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002f28:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002f2c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f34:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002f38:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f40:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002f44:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f50:	f7fe ff0a 	bl	8001d68 <invSqrt>
 8002f54:	ed87 0a30 	vstr	s0, [r7, #192]	; 0xc0
		s0 *= recipNorm;
 8002f58:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002f5c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f64:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		s1 *= recipNorm;
 8002f68:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002f6c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002f70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f74:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		s2 *= recipNorm;
 8002f78:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002f7c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f84:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		s3 *= recipNorm;
 8002f88:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002f8c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f94:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

		// Apply feedback step
		qDot1 -= beta * s0;
 8002f98:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f9c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fa4:	ed97 7a35 	vldr	s14, [r7, #212]	; 0xd4
 8002fa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fac:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
		qDot2 -= beta * s1;
 8002fb0:	ed97 7a04 	vldr	s14, [r7, #16]
 8002fb4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fbc:	ed97 7a34 	vldr	s14, [r7, #208]	; 0xd0
 8002fc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fc4:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
		qDot3 -= beta * s2;
 8002fc8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002fcc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fd4:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 8002fd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fdc:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
		qDot4 -= beta * s3;
 8002fe0:	ed97 7a04 	vldr	s14, [r7, #16]
 8002fe4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fec:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8002ff0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ff4:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8002ff8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ffc:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8003000:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003004:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8003008:	ee27 7a27 	vmul.f32	s14, s14, s15
 800300c:	4b54      	ldr	r3, [pc, #336]	; (8003160 <MadgwickAHRSupdate+0x13ac>)
 800300e:	edd3 7a00 	vldr	s15, [r3]
 8003012:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003016:	4b52      	ldr	r3, [pc, #328]	; (8003160 <MadgwickAHRSupdate+0x13ac>)
 8003018:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 800301c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003020:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8003024:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003028:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 800302c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003030:	4b4d      	ldr	r3, [pc, #308]	; (8003168 <MadgwickAHRSupdate+0x13b4>)
 8003032:	edd3 7a00 	vldr	s15, [r3]
 8003036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800303a:	4b4b      	ldr	r3, [pc, #300]	; (8003168 <MadgwickAHRSupdate+0x13b4>)
 800303c:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8003040:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003044:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8003048:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800304c:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8003050:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003054:	4b43      	ldr	r3, [pc, #268]	; (8003164 <MadgwickAHRSupdate+0x13b0>)
 8003056:	edd3 7a00 	vldr	s15, [r3]
 800305a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800305e:	4b41      	ldr	r3, [pc, #260]	; (8003164 <MadgwickAHRSupdate+0x13b0>)
 8003060:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8003064:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003068:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800306c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003070:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8003074:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003078:	4b3d      	ldr	r3, [pc, #244]	; (8003170 <MadgwickAHRSupdate+0x13bc>)
 800307a:	edd3 7a00 	vldr	s15, [r3]
 800307e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003082:	4b3b      	ldr	r3, [pc, #236]	; (8003170 <MadgwickAHRSupdate+0x13bc>)
 8003084:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8003088:	4b35      	ldr	r3, [pc, #212]	; (8003160 <MadgwickAHRSupdate+0x13ac>)
 800308a:	ed93 7a00 	vldr	s14, [r3]
 800308e:	4b34      	ldr	r3, [pc, #208]	; (8003160 <MadgwickAHRSupdate+0x13ac>)
 8003090:	edd3 7a00 	vldr	s15, [r3]
 8003094:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003098:	4b33      	ldr	r3, [pc, #204]	; (8003168 <MadgwickAHRSupdate+0x13b4>)
 800309a:	edd3 6a00 	vldr	s13, [r3]
 800309e:	4b32      	ldr	r3, [pc, #200]	; (8003168 <MadgwickAHRSupdate+0x13b4>)
 80030a0:	edd3 7a00 	vldr	s15, [r3]
 80030a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030ac:	4b2d      	ldr	r3, [pc, #180]	; (8003164 <MadgwickAHRSupdate+0x13b0>)
 80030ae:	edd3 6a00 	vldr	s13, [r3]
 80030b2:	4b2c      	ldr	r3, [pc, #176]	; (8003164 <MadgwickAHRSupdate+0x13b0>)
 80030b4:	edd3 7a00 	vldr	s15, [r3]
 80030b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030c0:	4b2b      	ldr	r3, [pc, #172]	; (8003170 <MadgwickAHRSupdate+0x13bc>)
 80030c2:	edd3 6a00 	vldr	s13, [r3]
 80030c6:	4b2a      	ldr	r3, [pc, #168]	; (8003170 <MadgwickAHRSupdate+0x13bc>)
 80030c8:	edd3 7a00 	vldr	s15, [r3]
 80030cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030d4:	eeb0 0a67 	vmov.f32	s0, s15
 80030d8:	f7fe fe46 	bl	8001d68 <invSqrt>
 80030dc:	ed87 0a30 	vstr	s0, [r7, #192]	; 0xc0
	q0 *= recipNorm;
 80030e0:	4b1f      	ldr	r3, [pc, #124]	; (8003160 <MadgwickAHRSupdate+0x13ac>)
 80030e2:	ed93 7a00 	vldr	s14, [r3]
 80030e6:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80030ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ee:	4b1c      	ldr	r3, [pc, #112]	; (8003160 <MadgwickAHRSupdate+0x13ac>)
 80030f0:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 80030f4:	4b1c      	ldr	r3, [pc, #112]	; (8003168 <MadgwickAHRSupdate+0x13b4>)
 80030f6:	ed93 7a00 	vldr	s14, [r3]
 80030fa:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80030fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003102:	4b19      	ldr	r3, [pc, #100]	; (8003168 <MadgwickAHRSupdate+0x13b4>)
 8003104:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8003108:	4b16      	ldr	r3, [pc, #88]	; (8003164 <MadgwickAHRSupdate+0x13b0>)
 800310a:	ed93 7a00 	vldr	s14, [r3]
 800310e:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8003112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003116:	4b13      	ldr	r3, [pc, #76]	; (8003164 <MadgwickAHRSupdate+0x13b0>)
 8003118:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 800311c:	4b14      	ldr	r3, [pc, #80]	; (8003170 <MadgwickAHRSupdate+0x13bc>)
 800311e:	ed93 7a00 	vldr	s14, [r3]
 8003122:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8003126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800312a:	4b11      	ldr	r3, [pc, #68]	; (8003170 <MadgwickAHRSupdate+0x13bc>)
 800312c:	edc3 7a00 	vstr	s15, [r3]

	quaternion[0] = q0;
 8003130:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <MadgwickAHRSupdate+0x13ac>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003136:	601a      	str	r2, [r3, #0]
	quaternion[1] = q1;
 8003138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800313a:	3304      	adds	r3, #4
 800313c:	4a0a      	ldr	r2, [pc, #40]	; (8003168 <MadgwickAHRSupdate+0x13b4>)
 800313e:	6812      	ldr	r2, [r2, #0]
 8003140:	601a      	str	r2, [r3, #0]
	quaternion[2] = q2;
 8003142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003144:	3308      	adds	r3, #8
 8003146:	4a07      	ldr	r2, [pc, #28]	; (8003164 <MadgwickAHRSupdate+0x13b0>)
 8003148:	6812      	ldr	r2, [r2, #0]
 800314a:	601a      	str	r2, [r3, #0]
	quaternion[3] = q3;
 800314c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800314e:	330c      	adds	r3, #12
 8003150:	4a07      	ldr	r2, [pc, #28]	; (8003170 <MadgwickAHRSupdate+0x13bc>)
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	601a      	str	r2, [r3, #0]
}
 8003156:	37d8      	adds	r7, #216	; 0xd8
 8003158:	46bd      	mov	sp, r7
 800315a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800315e:	bf00      	nop
 8003160:	20000000 	.word	0x20000000
 8003164:	200022c8 	.word	0x200022c8
 8003168:	200022c4 	.word	0x200022c4
 800316c:	3fe00000 	.word	0x3fe00000
 8003170:	200022cc 	.word	0x200022cc

08003174 <MadgwickAHRSupdateIMU>:

void MadgwickAHRSupdateIMU(float* quaternion, float gx, float gy, float gz, float ax, float ay, float az, float dt, float beta) {
 8003174:	b580      	push	{r7, lr}
 8003176:	b0a2      	sub	sp, #136	; 0x88
 8003178:	af00      	add	r7, sp, #0
 800317a:	6278      	str	r0, [r7, #36]	; 0x24
 800317c:	ed87 0a08 	vstr	s0, [r7, #32]
 8003180:	edc7 0a07 	vstr	s1, [r7, #28]
 8003184:	ed87 1a06 	vstr	s2, [r7, #24]
 8003188:	edc7 1a05 	vstr	s3, [r7, #20]
 800318c:	ed87 2a04 	vstr	s4, [r7, #16]
 8003190:	edc7 2a03 	vstr	s5, [r7, #12]
 8003194:	ed87 3a02 	vstr	s6, [r7, #8]
 8003198:	edc7 3a01 	vstr	s7, [r7, #4]
	float recipNorm;
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	float sampleFreq = 1 / dt;
 800319c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031a0:	ed97 7a02 	vldr	s14, [r7, #8]
 80031a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031a8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80031ac:	4bed      	ldr	r3, [pc, #948]	; (8003564 <MadgwickAHRSupdateIMU+0x3f0>)
 80031ae:	edd3 7a00 	vldr	s15, [r3]
 80031b2:	eeb1 7a67 	vneg.f32	s14, s15
 80031b6:	edd7 7a08 	vldr	s15, [r7, #32]
 80031ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031be:	4bea      	ldr	r3, [pc, #936]	; (8003568 <MadgwickAHRSupdateIMU+0x3f4>)
 80031c0:	edd3 6a00 	vldr	s13, [r3]
 80031c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80031c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031d0:	4be6      	ldr	r3, [pc, #920]	; (800356c <MadgwickAHRSupdateIMU+0x3f8>)
 80031d2:	edd3 6a00 	vldr	s13, [r3]
 80031d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80031da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031e2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80031e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031ea:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80031ee:	4be0      	ldr	r3, [pc, #896]	; (8003570 <MadgwickAHRSupdateIMU+0x3fc>)
 80031f0:	ed93 7a00 	vldr	s14, [r3]
 80031f4:	edd7 7a08 	vldr	s15, [r7, #32]
 80031f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031fc:	4bda      	ldr	r3, [pc, #872]	; (8003568 <MadgwickAHRSupdateIMU+0x3f4>)
 80031fe:	edd3 6a00 	vldr	s13, [r3]
 8003202:	edd7 7a06 	vldr	s15, [r7, #24]
 8003206:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800320a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800320e:	4bd7      	ldr	r3, [pc, #860]	; (800356c <MadgwickAHRSupdateIMU+0x3f8>)
 8003210:	edd3 6a00 	vldr	s13, [r3]
 8003214:	edd7 7a07 	vldr	s15, [r7, #28]
 8003218:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800321c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003220:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003224:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003228:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800322c:	4bd0      	ldr	r3, [pc, #832]	; (8003570 <MadgwickAHRSupdateIMU+0x3fc>)
 800322e:	ed93 7a00 	vldr	s14, [r3]
 8003232:	edd7 7a07 	vldr	s15, [r7, #28]
 8003236:	ee27 7a27 	vmul.f32	s14, s14, s15
 800323a:	4bca      	ldr	r3, [pc, #808]	; (8003564 <MadgwickAHRSupdateIMU+0x3f0>)
 800323c:	edd3 6a00 	vldr	s13, [r3]
 8003240:	edd7 7a06 	vldr	s15, [r7, #24]
 8003244:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003248:	ee37 7a67 	vsub.f32	s14, s14, s15
 800324c:	4bc7      	ldr	r3, [pc, #796]	; (800356c <MadgwickAHRSupdateIMU+0x3f8>)
 800324e:	edd3 6a00 	vldr	s13, [r3]
 8003252:	edd7 7a08 	vldr	s15, [r7, #32]
 8003256:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800325a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800325e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003262:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003266:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800326a:	4bc1      	ldr	r3, [pc, #772]	; (8003570 <MadgwickAHRSupdateIMU+0x3fc>)
 800326c:	ed93 7a00 	vldr	s14, [r3]
 8003270:	edd7 7a06 	vldr	s15, [r7, #24]
 8003274:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003278:	4bba      	ldr	r3, [pc, #744]	; (8003564 <MadgwickAHRSupdateIMU+0x3f0>)
 800327a:	edd3 6a00 	vldr	s13, [r3]
 800327e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003282:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003286:	ee37 7a27 	vadd.f32	s14, s14, s15
 800328a:	4bb7      	ldr	r3, [pc, #732]	; (8003568 <MadgwickAHRSupdateIMU+0x3f4>)
 800328c:	edd3 6a00 	vldr	s13, [r3]
 8003290:	edd7 7a08 	vldr	s15, [r7, #32]
 8003294:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003298:	ee77 7a67 	vsub.f32	s15, s14, s15
 800329c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80032a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032a4:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80032a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80032ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80032b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032b4:	d10e      	bne.n	80032d4 <MadgwickAHRSupdateIMU+0x160>
 80032b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80032ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80032be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c2:	d107      	bne.n	80032d4 <MadgwickAHRSupdateIMU+0x160>
 80032c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80032c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80032cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d0:	f000 81e0 	beq.w	8003694 <MadgwickAHRSupdateIMU+0x520>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80032d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80032d8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80032dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80032e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80032e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80032ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80032f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032f4:	eeb0 0a67 	vmov.f32	s0, s15
 80032f8:	f7fe fd36 	bl	8001d68 <invSqrt>
 80032fc:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
		ax *= recipNorm;
 8003300:	ed97 7a05 	vldr	s14, [r7, #20]
 8003304:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003308:	ee67 7a27 	vmul.f32	s15, s14, s15
 800330c:	edc7 7a05 	vstr	s15, [r7, #20]
		ay *= recipNorm;
 8003310:	ed97 7a04 	vldr	s14, [r7, #16]
 8003314:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800331c:	edc7 7a04 	vstr	s15, [r7, #16]
		az *= recipNorm;
 8003320:	ed97 7a03 	vldr	s14, [r7, #12]
 8003324:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800332c:	edc7 7a03 	vstr	s15, [r7, #12]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8003330:	4b8f      	ldr	r3, [pc, #572]	; (8003570 <MadgwickAHRSupdateIMU+0x3fc>)
 8003332:	edd3 7a00 	vldr	s15, [r3]
 8003336:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800333a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		_2q1 = 2.0f * q1;
 800333e:	4b89      	ldr	r3, [pc, #548]	; (8003564 <MadgwickAHRSupdateIMU+0x3f0>)
 8003340:	edd3 7a00 	vldr	s15, [r3]
 8003344:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003348:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		_2q2 = 2.0f * q2;
 800334c:	4b86      	ldr	r3, [pc, #536]	; (8003568 <MadgwickAHRSupdateIMU+0x3f4>)
 800334e:	edd3 7a00 	vldr	s15, [r3]
 8003352:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003356:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		_2q3 = 2.0f * q3;
 800335a:	4b84      	ldr	r3, [pc, #528]	; (800356c <MadgwickAHRSupdateIMU+0x3f8>)
 800335c:	edd3 7a00 	vldr	s15, [r3]
 8003360:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003364:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		_4q0 = 4.0f * q0;
 8003368:	4b81      	ldr	r3, [pc, #516]	; (8003570 <MadgwickAHRSupdateIMU+0x3fc>)
 800336a:	edd3 7a00 	vldr	s15, [r3]
 800336e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003372:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003376:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		_4q1 = 4.0f * q1;
 800337a:	4b7a      	ldr	r3, [pc, #488]	; (8003564 <MadgwickAHRSupdateIMU+0x3f0>)
 800337c:	edd3 7a00 	vldr	s15, [r3]
 8003380:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003384:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003388:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_4q2 = 4.0f * q2;
 800338c:	4b76      	ldr	r3, [pc, #472]	; (8003568 <MadgwickAHRSupdateIMU+0x3f4>)
 800338e:	edd3 7a00 	vldr	s15, [r3]
 8003392:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003396:	ee67 7a87 	vmul.f32	s15, s15, s14
 800339a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_8q1 = 8.0f * q1;
 800339e:	4b71      	ldr	r3, [pc, #452]	; (8003564 <MadgwickAHRSupdateIMU+0x3f0>)
 80033a0:	edd3 7a00 	vldr	s15, [r3]
 80033a4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80033a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033ac:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_8q2 = 8.0f * q2;
 80033b0:	4b6d      	ldr	r3, [pc, #436]	; (8003568 <MadgwickAHRSupdateIMU+0x3f4>)
 80033b2:	edd3 7a00 	vldr	s15, [r3]
 80033b6:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80033ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033be:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		q0q0 = q0 * q0;
 80033c2:	4b6b      	ldr	r3, [pc, #428]	; (8003570 <MadgwickAHRSupdateIMU+0x3fc>)
 80033c4:	ed93 7a00 	vldr	s14, [r3]
 80033c8:	4b69      	ldr	r3, [pc, #420]	; (8003570 <MadgwickAHRSupdateIMU+0x3fc>)
 80033ca:	edd3 7a00 	vldr	s15, [r3]
 80033ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033d2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		q1q1 = q1 * q1;
 80033d6:	4b63      	ldr	r3, [pc, #396]	; (8003564 <MadgwickAHRSupdateIMU+0x3f0>)
 80033d8:	ed93 7a00 	vldr	s14, [r3]
 80033dc:	4b61      	ldr	r3, [pc, #388]	; (8003564 <MadgwickAHRSupdateIMU+0x3f0>)
 80033de:	edd3 7a00 	vldr	s15, [r3]
 80033e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033e6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		q2q2 = q2 * q2;
 80033ea:	4b5f      	ldr	r3, [pc, #380]	; (8003568 <MadgwickAHRSupdateIMU+0x3f4>)
 80033ec:	ed93 7a00 	vldr	s14, [r3]
 80033f0:	4b5d      	ldr	r3, [pc, #372]	; (8003568 <MadgwickAHRSupdateIMU+0x3f4>)
 80033f2:	edd3 7a00 	vldr	s15, [r3]
 80033f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033fa:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		q3q3 = q3 * q3;
 80033fe:	4b5b      	ldr	r3, [pc, #364]	; (800356c <MadgwickAHRSupdateIMU+0x3f8>)
 8003400:	ed93 7a00 	vldr	s14, [r3]
 8003404:	4b59      	ldr	r3, [pc, #356]	; (800356c <MadgwickAHRSupdateIMU+0x3f8>)
 8003406:	edd3 7a00 	vldr	s15, [r3]
 800340a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800340e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8003412:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003416:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800341a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800341e:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8003422:	edd7 7a05 	vldr	s15, [r7, #20]
 8003426:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800342a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800342e:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8003432:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003436:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800343a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800343e:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8003442:	edd7 7a04 	vldr	s15, [r7, #16]
 8003446:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800344a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800344e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8003452:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003456:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800345a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800345e:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8003462:	edd7 7a05 	vldr	s15, [r7, #20]
 8003466:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800346a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800346e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003472:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8003476:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800347a:	4b3a      	ldr	r3, [pc, #232]	; (8003564 <MadgwickAHRSupdateIMU+0x3f0>)
 800347c:	edd3 7a00 	vldr	s15, [r3]
 8003480:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003484:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003488:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800348c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003490:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003494:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003498:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800349c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034a0:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80034a4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80034a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034b0:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80034b4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80034b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034c0:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80034c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80034c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034d0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80034d4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80034d8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80034dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034e0:	4b21      	ldr	r3, [pc, #132]	; (8003568 <MadgwickAHRSupdateIMU+0x3f4>)
 80034e2:	edd3 7a00 	vldr	s15, [r3]
 80034e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034ea:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80034ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80034f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034fa:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80034fe:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003502:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003506:	ee37 7a27 	vadd.f32	s14, s14, s15
 800350a:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800350e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003512:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003516:	ee37 7a67 	vsub.f32	s14, s14, s15
 800351a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800351e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003522:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8003526:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800352a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800352e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003532:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8003536:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800353a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800353e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003542:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8003546:	edd7 7a03 	vldr	s15, [r7, #12]
 800354a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800354e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003552:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8003556:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800355a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800355e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003562:	e007      	b.n	8003574 <MadgwickAHRSupdateIMU+0x400>
 8003564:	200022c4 	.word	0x200022c4
 8003568:	200022c8 	.word	0x200022c8
 800356c:	200022cc 	.word	0x200022cc
 8003570:	20000000 	.word	0x20000000
 8003574:	4ba1      	ldr	r3, [pc, #644]	; (80037fc <MadgwickAHRSupdateIMU+0x688>)
 8003576:	edd3 7a00 	vldr	s15, [r3]
 800357a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800357e:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8003582:	edd7 7a05 	vldr	s15, [r7, #20]
 8003586:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800358a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800358e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003592:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8003596:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800359a:	4b98      	ldr	r3, [pc, #608]	; (80037fc <MadgwickAHRSupdateIMU+0x688>)
 800359c:	edd3 7a00 	vldr	s15, [r3]
 80035a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035a8:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80035ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80035b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035b8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80035bc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80035c0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80035c4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80035c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80035cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035d0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80035d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80035d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035dc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80035e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80035e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035e8:	eeb0 0a67 	vmov.f32	s0, s15
 80035ec:	f7fe fbbc 	bl	8001d68 <invSqrt>
 80035f0:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
		s0 *= recipNorm;
 80035f4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80035f8:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80035fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003600:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 *= recipNorm;
 8003604:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003608:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800360c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003610:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 *= recipNorm;
 8003614:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003618:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800361c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003620:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 *= recipNorm;
 8003624:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003628:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800362c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003630:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 8003634:	ed97 7a01 	vldr	s14, [r7, #4]
 8003638:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800363c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003640:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8003644:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003648:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		qDot2 -= beta * s1;
 800364c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003650:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003658:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800365c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003660:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		qDot3 -= beta * s2;
 8003664:	ed97 7a01 	vldr	s14, [r7, #4]
 8003668:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800366c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003670:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8003674:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003678:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		qDot4 -= beta * s3;
 800367c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003680:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003684:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003688:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800368c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003690:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8003694:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003698:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800369c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036a0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80036a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036a8:	4b55      	ldr	r3, [pc, #340]	; (8003800 <MadgwickAHRSupdateIMU+0x68c>)
 80036aa:	edd3 7a00 	vldr	s15, [r3]
 80036ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036b2:	4b53      	ldr	r3, [pc, #332]	; (8003800 <MadgwickAHRSupdateIMU+0x68c>)
 80036b4:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 80036b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036bc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80036c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036c4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80036c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036cc:	4b4d      	ldr	r3, [pc, #308]	; (8003804 <MadgwickAHRSupdateIMU+0x690>)
 80036ce:	edd3 7a00 	vldr	s15, [r3]
 80036d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d6:	4b4b      	ldr	r3, [pc, #300]	; (8003804 <MadgwickAHRSupdateIMU+0x690>)
 80036d8:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 80036dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036e0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80036e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036e8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80036ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036f0:	4b45      	ldr	r3, [pc, #276]	; (8003808 <MadgwickAHRSupdateIMU+0x694>)
 80036f2:	edd3 7a00 	vldr	s15, [r3]
 80036f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036fa:	4b43      	ldr	r3, [pc, #268]	; (8003808 <MadgwickAHRSupdateIMU+0x694>)
 80036fc:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8003700:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003704:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003708:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800370c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8003710:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003714:	4b39      	ldr	r3, [pc, #228]	; (80037fc <MadgwickAHRSupdateIMU+0x688>)
 8003716:	edd3 7a00 	vldr	s15, [r3]
 800371a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800371e:	4b37      	ldr	r3, [pc, #220]	; (80037fc <MadgwickAHRSupdateIMU+0x688>)
 8003720:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8003724:	4b36      	ldr	r3, [pc, #216]	; (8003800 <MadgwickAHRSupdateIMU+0x68c>)
 8003726:	ed93 7a00 	vldr	s14, [r3]
 800372a:	4b35      	ldr	r3, [pc, #212]	; (8003800 <MadgwickAHRSupdateIMU+0x68c>)
 800372c:	edd3 7a00 	vldr	s15, [r3]
 8003730:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003734:	4b33      	ldr	r3, [pc, #204]	; (8003804 <MadgwickAHRSupdateIMU+0x690>)
 8003736:	edd3 6a00 	vldr	s13, [r3]
 800373a:	4b32      	ldr	r3, [pc, #200]	; (8003804 <MadgwickAHRSupdateIMU+0x690>)
 800373c:	edd3 7a00 	vldr	s15, [r3]
 8003740:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003744:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003748:	4b2f      	ldr	r3, [pc, #188]	; (8003808 <MadgwickAHRSupdateIMU+0x694>)
 800374a:	edd3 6a00 	vldr	s13, [r3]
 800374e:	4b2e      	ldr	r3, [pc, #184]	; (8003808 <MadgwickAHRSupdateIMU+0x694>)
 8003750:	edd3 7a00 	vldr	s15, [r3]
 8003754:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003758:	ee37 7a27 	vadd.f32	s14, s14, s15
 800375c:	4b27      	ldr	r3, [pc, #156]	; (80037fc <MadgwickAHRSupdateIMU+0x688>)
 800375e:	edd3 6a00 	vldr	s13, [r3]
 8003762:	4b26      	ldr	r3, [pc, #152]	; (80037fc <MadgwickAHRSupdateIMU+0x688>)
 8003764:	edd3 7a00 	vldr	s15, [r3]
 8003768:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800376c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003770:	eeb0 0a67 	vmov.f32	s0, s15
 8003774:	f7fe faf8 	bl	8001d68 <invSqrt>
 8003778:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
	q0 *= recipNorm;
 800377c:	4b20      	ldr	r3, [pc, #128]	; (8003800 <MadgwickAHRSupdateIMU+0x68c>)
 800377e:	ed93 7a00 	vldr	s14, [r3]
 8003782:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800378a:	4b1d      	ldr	r3, [pc, #116]	; (8003800 <MadgwickAHRSupdateIMU+0x68c>)
 800378c:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8003790:	4b1c      	ldr	r3, [pc, #112]	; (8003804 <MadgwickAHRSupdateIMU+0x690>)
 8003792:	ed93 7a00 	vldr	s14, [r3]
 8003796:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800379a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800379e:	4b19      	ldr	r3, [pc, #100]	; (8003804 <MadgwickAHRSupdateIMU+0x690>)
 80037a0:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 80037a4:	4b18      	ldr	r3, [pc, #96]	; (8003808 <MadgwickAHRSupdateIMU+0x694>)
 80037a6:	ed93 7a00 	vldr	s14, [r3]
 80037aa:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80037ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037b2:	4b15      	ldr	r3, [pc, #84]	; (8003808 <MadgwickAHRSupdateIMU+0x694>)
 80037b4:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 80037b8:	4b10      	ldr	r3, [pc, #64]	; (80037fc <MadgwickAHRSupdateIMU+0x688>)
 80037ba:	ed93 7a00 	vldr	s14, [r3]
 80037be:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80037c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037c6:	4b0d      	ldr	r3, [pc, #52]	; (80037fc <MadgwickAHRSupdateIMU+0x688>)
 80037c8:	edc3 7a00 	vstr	s15, [r3]

	quaternion[0] = q0;
 80037cc:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <MadgwickAHRSupdateIMU+0x68c>)
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	601a      	str	r2, [r3, #0]
	quaternion[1] = q1;
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	3304      	adds	r3, #4
 80037d8:	4a0a      	ldr	r2, [pc, #40]	; (8003804 <MadgwickAHRSupdateIMU+0x690>)
 80037da:	6812      	ldr	r2, [r2, #0]
 80037dc:	601a      	str	r2, [r3, #0]
	quaternion[2] = q2;
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	3308      	adds	r3, #8
 80037e2:	4a09      	ldr	r2, [pc, #36]	; (8003808 <MadgwickAHRSupdateIMU+0x694>)
 80037e4:	6812      	ldr	r2, [r2, #0]
 80037e6:	601a      	str	r2, [r3, #0]
	quaternion[3] = q3;
 80037e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ea:	330c      	adds	r3, #12
 80037ec:	4a03      	ldr	r2, [pc, #12]	; (80037fc <MadgwickAHRSupdateIMU+0x688>)
 80037ee:	6812      	ldr	r2, [r2, #0]
 80037f0:	601a      	str	r2, [r3, #0]
}
 80037f2:	bf00      	nop
 80037f4:	3788      	adds	r7, #136	; 0x88
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	200022cc 	.word	0x200022cc
 8003800:	20000000 	.word	0x20000000
 8003804:	200022c4 	.word	0x200022c4
 8003808:	200022c8 	.word	0x200022c8

0800380c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003810:	f002 fb10 	bl	8005e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003814:	f000 f816 	bl	8003844 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003818:	f000 f9ee 	bl	8003bf8 <MX_GPIO_Init>
  MX_SPI5_Init();
 800381c:	f000 f98c 	bl	8003b38 <MX_SPI5_Init>
  MX_I2C1_Init();
 8003820:	f000 f8cc 	bl	80039bc <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 8003824:	f000 f8f8 	bl	8003a18 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8003828:	f000 f91a 	bl	8003a60 <MX_SPI1_Init>
  MX_SPI4_Init();
 800382c:	f000 f94e 	bl	8003acc <MX_SPI4_Init>
  MX_USART1_UART_Init();
 8003830:	f000 f9b8 	bl	8003ba4 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8003834:	f007 fcde 	bl	800b1f4 <MX_FATFS_Init>
  MX_ADC1_Init();
 8003838:	f000 f86e 	bl	8003918 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  app_main();
 800383c:	f7fd fca8 	bl	8001190 <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003840:	e7fe      	b.n	8003840 <main+0x34>
	...

08003844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b094      	sub	sp, #80	; 0x50
 8003848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800384a:	f107 0320 	add.w	r3, r7, #32
 800384e:	2230      	movs	r2, #48	; 0x30
 8003850:	2100      	movs	r1, #0
 8003852:	4618      	mov	r0, r3
 8003854:	f00c fa94 	bl	800fd80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003858:	f107 030c 	add.w	r3, r7, #12
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	605a      	str	r2, [r3, #4]
 8003862:	609a      	str	r2, [r3, #8]
 8003864:	60da      	str	r2, [r3, #12]
 8003866:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003868:	2300      	movs	r3, #0
 800386a:	60bb      	str	r3, [r7, #8]
 800386c:	4b28      	ldr	r3, [pc, #160]	; (8003910 <SystemClock_Config+0xcc>)
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	4a27      	ldr	r2, [pc, #156]	; (8003910 <SystemClock_Config+0xcc>)
 8003872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003876:	6413      	str	r3, [r2, #64]	; 0x40
 8003878:	4b25      	ldr	r3, [pc, #148]	; (8003910 <SystemClock_Config+0xcc>)
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003880:	60bb      	str	r3, [r7, #8]
 8003882:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003884:	2300      	movs	r3, #0
 8003886:	607b      	str	r3, [r7, #4]
 8003888:	4b22      	ldr	r3, [pc, #136]	; (8003914 <SystemClock_Config+0xd0>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a21      	ldr	r2, [pc, #132]	; (8003914 <SystemClock_Config+0xd0>)
 800388e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003892:	6013      	str	r3, [r2, #0]
 8003894:	4b1f      	ldr	r3, [pc, #124]	; (8003914 <SystemClock_Config+0xd0>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800389c:	607b      	str	r3, [r7, #4]
 800389e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80038a0:	2302      	movs	r3, #2
 80038a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038a4:	2301      	movs	r3, #1
 80038a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80038a8:	2310      	movs	r3, #16
 80038aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038ac:	2302      	movs	r3, #2
 80038ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80038b0:	2300      	movs	r3, #0
 80038b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80038b4:	2308      	movs	r3, #8
 80038b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80038b8:	2364      	movs	r3, #100	; 0x64
 80038ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80038bc:	2302      	movs	r3, #2
 80038be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80038c0:	2307      	movs	r3, #7
 80038c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038c4:	f107 0320 	add.w	r3, r7, #32
 80038c8:	4618      	mov	r0, r3
 80038ca:	f004 fad7 	bl	8007e7c <HAL_RCC_OscConfig>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80038d4:	f000 fa38 	bl	8003d48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038d8:	230f      	movs	r3, #15
 80038da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038dc:	2302      	movs	r3, #2
 80038de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038e0:	2300      	movs	r3, #0
 80038e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80038e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80038e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80038ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80038f0:	f107 030c 	add.w	r3, r7, #12
 80038f4:	2103      	movs	r1, #3
 80038f6:	4618      	mov	r0, r3
 80038f8:	f004 fd38 	bl	800836c <HAL_RCC_ClockConfig>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003902:	f000 fa21 	bl	8003d48 <Error_Handler>
  }
}
 8003906:	bf00      	nop
 8003908:	3750      	adds	r7, #80	; 0x50
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40023800 	.word	0x40023800
 8003914:	40007000 	.word	0x40007000

08003918 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800391e:	463b      	mov	r3, r7
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	605a      	str	r2, [r3, #4]
 8003926:	609a      	str	r2, [r3, #8]
 8003928:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800392a:	4b21      	ldr	r3, [pc, #132]	; (80039b0 <MX_ADC1_Init+0x98>)
 800392c:	4a21      	ldr	r2, [pc, #132]	; (80039b4 <MX_ADC1_Init+0x9c>)
 800392e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003930:	4b1f      	ldr	r3, [pc, #124]	; (80039b0 <MX_ADC1_Init+0x98>)
 8003932:	2200      	movs	r2, #0
 8003934:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003936:	4b1e      	ldr	r3, [pc, #120]	; (80039b0 <MX_ADC1_Init+0x98>)
 8003938:	2200      	movs	r2, #0
 800393a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800393c:	4b1c      	ldr	r3, [pc, #112]	; (80039b0 <MX_ADC1_Init+0x98>)
 800393e:	2200      	movs	r2, #0
 8003940:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003942:	4b1b      	ldr	r3, [pc, #108]	; (80039b0 <MX_ADC1_Init+0x98>)
 8003944:	2200      	movs	r2, #0
 8003946:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003948:	4b19      	ldr	r3, [pc, #100]	; (80039b0 <MX_ADC1_Init+0x98>)
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003950:	4b17      	ldr	r3, [pc, #92]	; (80039b0 <MX_ADC1_Init+0x98>)
 8003952:	2200      	movs	r2, #0
 8003954:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003956:	4b16      	ldr	r3, [pc, #88]	; (80039b0 <MX_ADC1_Init+0x98>)
 8003958:	4a17      	ldr	r2, [pc, #92]	; (80039b8 <MX_ADC1_Init+0xa0>)
 800395a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800395c:	4b14      	ldr	r3, [pc, #80]	; (80039b0 <MX_ADC1_Init+0x98>)
 800395e:	2200      	movs	r2, #0
 8003960:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003962:	4b13      	ldr	r3, [pc, #76]	; (80039b0 <MX_ADC1_Init+0x98>)
 8003964:	2201      	movs	r2, #1
 8003966:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003968:	4b11      	ldr	r3, [pc, #68]	; (80039b0 <MX_ADC1_Init+0x98>)
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003970:	4b0f      	ldr	r3, [pc, #60]	; (80039b0 <MX_ADC1_Init+0x98>)
 8003972:	2201      	movs	r2, #1
 8003974:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003976:	480e      	ldr	r0, [pc, #56]	; (80039b0 <MX_ADC1_Init+0x98>)
 8003978:	f002 faf2 	bl	8005f60 <HAL_ADC_Init>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8003982:	f000 f9e1 	bl	8003d48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003986:	2300      	movs	r3, #0
 8003988:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800398a:	2301      	movs	r3, #1
 800398c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800398e:	2300      	movs	r3, #0
 8003990:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003992:	463b      	mov	r3, r7
 8003994:	4619      	mov	r1, r3
 8003996:	4806      	ldr	r0, [pc, #24]	; (80039b0 <MX_ADC1_Init+0x98>)
 8003998:	f002 fca6 	bl	80062e8 <HAL_ADC_ConfigChannel>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80039a2:	f000 f9d1 	bl	8003d48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80039a6:	bf00      	nop
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	200027f0 	.word	0x200027f0
 80039b4:	40012000 	.word	0x40012000
 80039b8:	0f000001 	.word	0x0f000001

080039bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80039c0:	4b12      	ldr	r3, [pc, #72]	; (8003a0c <MX_I2C1_Init+0x50>)
 80039c2:	4a13      	ldr	r2, [pc, #76]	; (8003a10 <MX_I2C1_Init+0x54>)
 80039c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80039c6:	4b11      	ldr	r3, [pc, #68]	; (8003a0c <MX_I2C1_Init+0x50>)
 80039c8:	4a12      	ldr	r2, [pc, #72]	; (8003a14 <MX_I2C1_Init+0x58>)
 80039ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80039cc:	4b0f      	ldr	r3, [pc, #60]	; (8003a0c <MX_I2C1_Init+0x50>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80039d2:	4b0e      	ldr	r3, [pc, #56]	; (8003a0c <MX_I2C1_Init+0x50>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80039d8:	4b0c      	ldr	r3, [pc, #48]	; (8003a0c <MX_I2C1_Init+0x50>)
 80039da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80039e0:	4b0a      	ldr	r3, [pc, #40]	; (8003a0c <MX_I2C1_Init+0x50>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80039e6:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <MX_I2C1_Init+0x50>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80039ec:	4b07      	ldr	r3, [pc, #28]	; (8003a0c <MX_I2C1_Init+0x50>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80039f2:	4b06      	ldr	r3, [pc, #24]	; (8003a0c <MX_I2C1_Init+0x50>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80039f8:	4804      	ldr	r0, [pc, #16]	; (8003a0c <MX_I2C1_Init+0x50>)
 80039fa:	f003 fa4f 	bl	8006e9c <HAL_I2C_Init>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003a04:	f000 f9a0 	bl	8003d48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003a08:	bf00      	nop
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	2000279c 	.word	0x2000279c
 8003a10:	40005400 	.word	0x40005400
 8003a14:	000186a0 	.word	0x000186a0

08003a18 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003a1c:	4b0e      	ldr	r3, [pc, #56]	; (8003a58 <MX_SDIO_SD_Init+0x40>)
 8003a1e:	4a0f      	ldr	r2, [pc, #60]	; (8003a5c <MX_SDIO_SD_Init+0x44>)
 8003a20:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003a22:	4b0d      	ldr	r3, [pc, #52]	; (8003a58 <MX_SDIO_SD_Init+0x40>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003a28:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <MX_SDIO_SD_Init+0x40>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003a2e:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <MX_SDIO_SD_Init+0x40>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003a34:	4b08      	ldr	r3, [pc, #32]	; (8003a58 <MX_SDIO_SD_Init+0x40>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003a3a:	4b07      	ldr	r3, [pc, #28]	; (8003a58 <MX_SDIO_SD_Init+0x40>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 3;
 8003a40:	4b05      	ldr	r3, [pc, #20]	; (8003a58 <MX_SDIO_SD_Init+0x40>)
 8003a42:	2203      	movs	r2, #3
 8003a44:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003a46:	4b04      	ldr	r3, [pc, #16]	; (8003a58 <MX_SDIO_SD_Init+0x40>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	611a      	str	r2, [r3, #16]
  /* USER CODE END SDIO_Init 2 */

}
 8003a4c:	bf00      	nop
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	200028d4 	.word	0x200028d4
 8003a5c:	40012c00 	.word	0x40012c00

08003a60 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003a64:	4b17      	ldr	r3, [pc, #92]	; (8003ac4 <MX_SPI1_Init+0x64>)
 8003a66:	4a18      	ldr	r2, [pc, #96]	; (8003ac8 <MX_SPI1_Init+0x68>)
 8003a68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003a6a:	4b16      	ldr	r3, [pc, #88]	; (8003ac4 <MX_SPI1_Init+0x64>)
 8003a6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003a72:	4b14      	ldr	r3, [pc, #80]	; (8003ac4 <MX_SPI1_Init+0x64>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a78:	4b12      	ldr	r3, [pc, #72]	; (8003ac4 <MX_SPI1_Init+0x64>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003a7e:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <MX_SPI1_Init+0x64>)
 8003a80:	2202      	movs	r2, #2
 8003a82:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003a84:	4b0f      	ldr	r3, [pc, #60]	; (8003ac4 <MX_SPI1_Init+0x64>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003a8a:	4b0e      	ldr	r3, [pc, #56]	; (8003ac4 <MX_SPI1_Init+0x64>)
 8003a8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a90:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003a92:	4b0c      	ldr	r3, [pc, #48]	; (8003ac4 <MX_SPI1_Init+0x64>)
 8003a94:	2230      	movs	r2, #48	; 0x30
 8003a96:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a98:	4b0a      	ldr	r3, [pc, #40]	; (8003ac4 <MX_SPI1_Init+0x64>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a9e:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <MX_SPI1_Init+0x64>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003aa4:	4b07      	ldr	r3, [pc, #28]	; (8003ac4 <MX_SPI1_Init+0x64>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003aaa:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <MX_SPI1_Init+0x64>)
 8003aac:	220a      	movs	r2, #10
 8003aae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003ab0:	4804      	ldr	r0, [pc, #16]	; (8003ac4 <MX_SPI1_Init+0x64>)
 8003ab2:	f005 fdaf 	bl	8009614 <HAL_SPI_Init>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003abc:	f000 f944 	bl	8003d48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003ac0:	bf00      	nop
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	20002958 	.word	0x20002958
 8003ac8:	40013000 	.word	0x40013000

08003acc <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8003ad0:	4b17      	ldr	r3, [pc, #92]	; (8003b30 <MX_SPI4_Init+0x64>)
 8003ad2:	4a18      	ldr	r2, [pc, #96]	; (8003b34 <MX_SPI4_Init+0x68>)
 8003ad4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8003ad6:	4b16      	ldr	r3, [pc, #88]	; (8003b30 <MX_SPI4_Init+0x64>)
 8003ad8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003adc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003ade:	4b14      	ldr	r3, [pc, #80]	; (8003b30 <MX_SPI4_Init+0x64>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ae4:	4b12      	ldr	r3, [pc, #72]	; (8003b30 <MX_SPI4_Init+0x64>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003aea:	4b11      	ldr	r3, [pc, #68]	; (8003b30 <MX_SPI4_Init+0x64>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003af0:	4b0f      	ldr	r3, [pc, #60]	; (8003b30 <MX_SPI4_Init+0x64>)
 8003af2:	2201      	movs	r2, #1
 8003af4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003af6:	4b0e      	ldr	r3, [pc, #56]	; (8003b30 <MX_SPI4_Init+0x64>)
 8003af8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003afc:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003afe:	4b0c      	ldr	r3, [pc, #48]	; (8003b30 <MX_SPI4_Init+0x64>)
 8003b00:	2228      	movs	r2, #40	; 0x28
 8003b02:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b04:	4b0a      	ldr	r3, [pc, #40]	; (8003b30 <MX_SPI4_Init+0x64>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b0a:	4b09      	ldr	r3, [pc, #36]	; (8003b30 <MX_SPI4_Init+0x64>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b10:	4b07      	ldr	r3, [pc, #28]	; (8003b30 <MX_SPI4_Init+0x64>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8003b16:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <MX_SPI4_Init+0x64>)
 8003b18:	220a      	movs	r2, #10
 8003b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003b1c:	4804      	ldr	r0, [pc, #16]	; (8003b30 <MX_SPI4_Init+0x64>)
 8003b1e:	f005 fd79 	bl	8009614 <HAL_SPI_Init>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8003b28:	f000 f90e 	bl	8003d48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8003b2c:	bf00      	nop
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	2000287c 	.word	0x2000287c
 8003b34:	40013400 	.word	0x40013400

08003b38 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8003b3c:	4b17      	ldr	r3, [pc, #92]	; (8003b9c <MX_SPI5_Init+0x64>)
 8003b3e:	4a18      	ldr	r2, [pc, #96]	; (8003ba0 <MX_SPI5_Init+0x68>)
 8003b40:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003b42:	4b16      	ldr	r3, [pc, #88]	; (8003b9c <MX_SPI5_Init+0x64>)
 8003b44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b48:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003b4a:	4b14      	ldr	r3, [pc, #80]	; (8003b9c <MX_SPI5_Init+0x64>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b50:	4b12      	ldr	r3, [pc, #72]	; (8003b9c <MX_SPI5_Init+0x64>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b56:	4b11      	ldr	r3, [pc, #68]	; (8003b9c <MX_SPI5_Init+0x64>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b5c:	4b0f      	ldr	r3, [pc, #60]	; (8003b9c <MX_SPI5_Init+0x64>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8003b62:	4b0e      	ldr	r3, [pc, #56]	; (8003b9c <MX_SPI5_Init+0x64>)
 8003b64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b68:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003b6a:	4b0c      	ldr	r3, [pc, #48]	; (8003b9c <MX_SPI5_Init+0x64>)
 8003b6c:	2230      	movs	r2, #48	; 0x30
 8003b6e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b70:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <MX_SPI5_Init+0x64>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b76:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <MX_SPI5_Init+0x64>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b7c:	4b07      	ldr	r3, [pc, #28]	; (8003b9c <MX_SPI5_Init+0x64>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8003b82:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <MX_SPI5_Init+0x64>)
 8003b84:	220a      	movs	r2, #10
 8003b86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003b88:	4804      	ldr	r0, [pc, #16]	; (8003b9c <MX_SPI5_Init+0x64>)
 8003b8a:	f005 fd43 	bl	8009614 <HAL_SPI_Init>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8003b94:	f000 f8d8 	bl	8003d48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8003b98:	bf00      	nop
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	20002744 	.word	0x20002744
 8003ba0:	40015000 	.word	0x40015000

08003ba4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ba8:	4b11      	ldr	r3, [pc, #68]	; (8003bf0 <MX_USART1_UART_Init+0x4c>)
 8003baa:	4a12      	ldr	r2, [pc, #72]	; (8003bf4 <MX_USART1_UART_Init+0x50>)
 8003bac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003bae:	4b10      	ldr	r3, [pc, #64]	; (8003bf0 <MX_USART1_UART_Init+0x4c>)
 8003bb0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003bb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003bb6:	4b0e      	ldr	r3, [pc, #56]	; (8003bf0 <MX_USART1_UART_Init+0x4c>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003bbc:	4b0c      	ldr	r3, [pc, #48]	; (8003bf0 <MX_USART1_UART_Init+0x4c>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003bc2:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <MX_USART1_UART_Init+0x4c>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003bc8:	4b09      	ldr	r3, [pc, #36]	; (8003bf0 <MX_USART1_UART_Init+0x4c>)
 8003bca:	220c      	movs	r2, #12
 8003bcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bce:	4b08      	ldr	r3, [pc, #32]	; (8003bf0 <MX_USART1_UART_Init+0x4c>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bd4:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <MX_USART1_UART_Init+0x4c>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003bda:	4805      	ldr	r0, [pc, #20]	; (8003bf0 <MX_USART1_UART_Init+0x4c>)
 8003bdc:	f006 fac2 	bl	800a164 <HAL_UART_Init>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003be6:	f000 f8af 	bl	8003d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003bea:	bf00      	nop
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	20002838 	.word	0x20002838
 8003bf4:	40011000 	.word	0x40011000

08003bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b08a      	sub	sp, #40	; 0x28
 8003bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bfe:	f107 0314 	add.w	r3, r7, #20
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	605a      	str	r2, [r3, #4]
 8003c08:	609a      	str	r2, [r3, #8]
 8003c0a:	60da      	str	r2, [r3, #12]
 8003c0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c0e:	2300      	movs	r3, #0
 8003c10:	613b      	str	r3, [r7, #16]
 8003c12:	4b48      	ldr	r3, [pc, #288]	; (8003d34 <MX_GPIO_Init+0x13c>)
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	4a47      	ldr	r2, [pc, #284]	; (8003d34 <MX_GPIO_Init+0x13c>)
 8003c18:	f043 0304 	orr.w	r3, r3, #4
 8003c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c1e:	4b45      	ldr	r3, [pc, #276]	; (8003d34 <MX_GPIO_Init+0x13c>)
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	613b      	str	r3, [r7, #16]
 8003c28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60fb      	str	r3, [r7, #12]
 8003c2e:	4b41      	ldr	r3, [pc, #260]	; (8003d34 <MX_GPIO_Init+0x13c>)
 8003c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c32:	4a40      	ldr	r2, [pc, #256]	; (8003d34 <MX_GPIO_Init+0x13c>)
 8003c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c38:	6313      	str	r3, [r2, #48]	; 0x30
 8003c3a:	4b3e      	ldr	r3, [pc, #248]	; (8003d34 <MX_GPIO_Init+0x13c>)
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c46:	2300      	movs	r3, #0
 8003c48:	60bb      	str	r3, [r7, #8]
 8003c4a:	4b3a      	ldr	r3, [pc, #232]	; (8003d34 <MX_GPIO_Init+0x13c>)
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	4a39      	ldr	r2, [pc, #228]	; (8003d34 <MX_GPIO_Init+0x13c>)
 8003c50:	f043 0301 	orr.w	r3, r3, #1
 8003c54:	6313      	str	r3, [r2, #48]	; 0x30
 8003c56:	4b37      	ldr	r3, [pc, #220]	; (8003d34 <MX_GPIO_Init+0x13c>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	60bb      	str	r3, [r7, #8]
 8003c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c62:	2300      	movs	r3, #0
 8003c64:	607b      	str	r3, [r7, #4]
 8003c66:	4b33      	ldr	r3, [pc, #204]	; (8003d34 <MX_GPIO_Init+0x13c>)
 8003c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6a:	4a32      	ldr	r2, [pc, #200]	; (8003d34 <MX_GPIO_Init+0x13c>)
 8003c6c:	f043 0302 	orr.w	r3, r3, #2
 8003c70:	6313      	str	r3, [r2, #48]	; 0x30
 8003c72:	4b30      	ldr	r3, [pc, #192]	; (8003d34 <MX_GPIO_Init+0x13c>)
 8003c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	607b      	str	r3, [r7, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LSM_CS_Pin|MOTOR_Pin, GPIO_PIN_RESET);
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8003c84:	482c      	ldr	r0, [pc, #176]	; (8003d38 <MX_GPIO_Init+0x140>)
 8003c86:	f003 f8ef 	bl	8006e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TDC_SHIM_Pin|LIS_CS_Pin, GPIO_PIN_RESET);
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	2114      	movs	r1, #20
 8003c8e:	482b      	ldr	r0, [pc, #172]	; (8003d3c <MX_GPIO_Init+0x144>)
 8003c90:	f003 f8ea 	bl	8006e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF_CE_Pin|NRF_CS_Pin|CS_TDC_Pin|PEREGIGATEL_Pin
 8003c94:	2200      	movs	r2, #0
 8003c96:	f245 4106 	movw	r1, #21510	; 0x5406
 8003c9a:	4829      	ldr	r0, [pc, #164]	; (8003d40 <MX_GPIO_Init+0x148>)
 8003c9c:	f003 f8e4 	bl	8006e68 <HAL_GPIO_WritePin>
                          |LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LSM_CS_Pin MOTOR_Pin */
  GPIO_InitStruct.Pin = LSM_CS_Pin|MOTOR_Pin;
 8003ca0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cb2:	f107 0314 	add.w	r3, r7, #20
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	481f      	ldr	r0, [pc, #124]	; (8003d38 <MX_GPIO_Init+0x140>)
 8003cba:	f002 fe55 	bl	8006968 <HAL_GPIO_Init>

  /*Configure GPIO pin : STATE_Pin */
  GPIO_InitStruct.Pin = STATE_Pin;
 8003cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(STATE_GPIO_Port, &GPIO_InitStruct);
 8003ccc:	f107 0314 	add.w	r3, r7, #20
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	4819      	ldr	r0, [pc, #100]	; (8003d38 <MX_GPIO_Init+0x140>)
 8003cd4:	f002 fe48 	bl	8006968 <HAL_GPIO_Init>

  /*Configure GPIO pin : TDC_INT_Pin */
  GPIO_InitStruct.Pin = TDC_INT_Pin;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TDC_INT_GPIO_Port, &GPIO_InitStruct);
 8003ce4:	f107 0314 	add.w	r3, r7, #20
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4816      	ldr	r0, [pc, #88]	; (8003d44 <MX_GPIO_Init+0x14c>)
 8003cec:	f002 fe3c 	bl	8006968 <HAL_GPIO_Init>

  /*Configure GPIO pins : TDC_SHIM_Pin LIS_CS_Pin */
  GPIO_InitStruct.Pin = TDC_SHIM_Pin|LIS_CS_Pin;
 8003cf0:	2314      	movs	r3, #20
 8003cf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d00:	f107 0314 	add.w	r3, r7, #20
 8003d04:	4619      	mov	r1, r3
 8003d06:	480d      	ldr	r0, [pc, #52]	; (8003d3c <MX_GPIO_Init+0x144>)
 8003d08:	f002 fe2e 	bl	8006968 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CE_Pin NRF_CS_Pin CS_TDC_Pin PEREGIGATEL_Pin
                           LED_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CS_Pin|CS_TDC_Pin|PEREGIGATEL_Pin
 8003d0c:	f245 4306 	movw	r3, #21510	; 0x5406
 8003d10:	617b      	str	r3, [r7, #20]
                          |LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d12:	2301      	movs	r3, #1
 8003d14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d16:	2300      	movs	r3, #0
 8003d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d1e:	f107 0314 	add.w	r3, r7, #20
 8003d22:	4619      	mov	r1, r3
 8003d24:	4806      	ldr	r0, [pc, #24]	; (8003d40 <MX_GPIO_Init+0x148>)
 8003d26:	f002 fe1f 	bl	8006968 <HAL_GPIO_Init>

}
 8003d2a:	bf00      	nop
 8003d2c:	3728      	adds	r7, #40	; 0x28
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	40023800 	.word	0x40023800
 8003d38:	40020800 	.word	0x40020800
 8003d3c:	40020000 	.word	0x40020000
 8003d40:	40020400 	.word	0x40020400
 8003d44:	40021c00 	.word	0x40021c00

08003d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d4c:	b672      	cpsid	i
}
 8003d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d50:	e7fe      	b.n	8003d50 <Error_Handler+0x8>
	...

08003d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	607b      	str	r3, [r7, #4]
 8003d5e:	4b10      	ldr	r3, [pc, #64]	; (8003da0 <HAL_MspInit+0x4c>)
 8003d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d62:	4a0f      	ldr	r2, [pc, #60]	; (8003da0 <HAL_MspInit+0x4c>)
 8003d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d68:	6453      	str	r3, [r2, #68]	; 0x44
 8003d6a:	4b0d      	ldr	r3, [pc, #52]	; (8003da0 <HAL_MspInit+0x4c>)
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d72:	607b      	str	r3, [r7, #4]
 8003d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d76:	2300      	movs	r3, #0
 8003d78:	603b      	str	r3, [r7, #0]
 8003d7a:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <HAL_MspInit+0x4c>)
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	4a08      	ldr	r2, [pc, #32]	; (8003da0 <HAL_MspInit+0x4c>)
 8003d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d84:	6413      	str	r3, [r2, #64]	; 0x40
 8003d86:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <HAL_MspInit+0x4c>)
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8e:	603b      	str	r3, [r7, #0]
 8003d90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	40023800 	.word	0x40023800

08003da4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b08a      	sub	sp, #40	; 0x28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dac:	f107 0314 	add.w	r3, r7, #20
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	605a      	str	r2, [r3, #4]
 8003db6:	609a      	str	r2, [r3, #8]
 8003db8:	60da      	str	r2, [r3, #12]
 8003dba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a17      	ldr	r2, [pc, #92]	; (8003e20 <HAL_ADC_MspInit+0x7c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d127      	bne.n	8003e16 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	613b      	str	r3, [r7, #16]
 8003dca:	4b16      	ldr	r3, [pc, #88]	; (8003e24 <HAL_ADC_MspInit+0x80>)
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dce:	4a15      	ldr	r2, [pc, #84]	; (8003e24 <HAL_ADC_MspInit+0x80>)
 8003dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8003dd6:	4b13      	ldr	r3, [pc, #76]	; (8003e24 <HAL_ADC_MspInit+0x80>)
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dde:	613b      	str	r3, [r7, #16]
 8003de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003de2:	2300      	movs	r3, #0
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	4b0f      	ldr	r3, [pc, #60]	; (8003e24 <HAL_ADC_MspInit+0x80>)
 8003de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dea:	4a0e      	ldr	r2, [pc, #56]	; (8003e24 <HAL_ADC_MspInit+0x80>)
 8003dec:	f043 0301 	orr.w	r3, r3, #1
 8003df0:	6313      	str	r3, [r2, #48]	; 0x30
 8003df2:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <HAL_ADC_MspInit+0x80>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e02:	2303      	movs	r3, #3
 8003e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e0a:	f107 0314 	add.w	r3, r7, #20
 8003e0e:	4619      	mov	r1, r3
 8003e10:	4805      	ldr	r0, [pc, #20]	; (8003e28 <HAL_ADC_MspInit+0x84>)
 8003e12:	f002 fda9 	bl	8006968 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003e16:	bf00      	nop
 8003e18:	3728      	adds	r7, #40	; 0x28
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40012000 	.word	0x40012000
 8003e24:	40023800 	.word	0x40023800
 8003e28:	40020000 	.word	0x40020000

08003e2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08a      	sub	sp, #40	; 0x28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e34:	f107 0314 	add.w	r3, r7, #20
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	605a      	str	r2, [r3, #4]
 8003e3e:	609a      	str	r2, [r3, #8]
 8003e40:	60da      	str	r2, [r3, #12]
 8003e42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a19      	ldr	r2, [pc, #100]	; (8003eb0 <HAL_I2C_MspInit+0x84>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d12c      	bne.n	8003ea8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e4e:	2300      	movs	r3, #0
 8003e50:	613b      	str	r3, [r7, #16]
 8003e52:	4b18      	ldr	r3, [pc, #96]	; (8003eb4 <HAL_I2C_MspInit+0x88>)
 8003e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e56:	4a17      	ldr	r2, [pc, #92]	; (8003eb4 <HAL_I2C_MspInit+0x88>)
 8003e58:	f043 0302 	orr.w	r3, r3, #2
 8003e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e5e:	4b15      	ldr	r3, [pc, #84]	; (8003eb4 <HAL_I2C_MspInit+0x88>)
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	613b      	str	r3, [r7, #16]
 8003e68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8003e6a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e70:	2312      	movs	r3, #18
 8003e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e74:	2300      	movs	r3, #0
 8003e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003e7c:	2304      	movs	r3, #4
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e80:	f107 0314 	add.w	r3, r7, #20
 8003e84:	4619      	mov	r1, r3
 8003e86:	480c      	ldr	r0, [pc, #48]	; (8003eb8 <HAL_I2C_MspInit+0x8c>)
 8003e88:	f002 fd6e 	bl	8006968 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	4b08      	ldr	r3, [pc, #32]	; (8003eb4 <HAL_I2C_MspInit+0x88>)
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	4a07      	ldr	r2, [pc, #28]	; (8003eb4 <HAL_I2C_MspInit+0x88>)
 8003e96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e9a:	6413      	str	r3, [r2, #64]	; 0x40
 8003e9c:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <HAL_I2C_MspInit+0x88>)
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003ea8:	bf00      	nop
 8003eaa:	3728      	adds	r7, #40	; 0x28
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40005400 	.word	0x40005400
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	40020400 	.word	0x40020400

08003ebc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a0a      	ldr	r2, [pc, #40]	; (8003ef4 <HAL_I2C_MspDeInit+0x38>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d10e      	bne.n	8003eec <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003ece:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <HAL_I2C_MspDeInit+0x3c>)
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	4a09      	ldr	r2, [pc, #36]	; (8003ef8 <HAL_I2C_MspDeInit+0x3c>)
 8003ed4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ed8:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8003eda:	2140      	movs	r1, #64	; 0x40
 8003edc:	4807      	ldr	r0, [pc, #28]	; (8003efc <HAL_I2C_MspDeInit+0x40>)
 8003ede:	f002 fec7 	bl	8006c70 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8003ee2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ee6:	4805      	ldr	r0, [pc, #20]	; (8003efc <HAL_I2C_MspDeInit+0x40>)
 8003ee8:	f002 fec2 	bl	8006c70 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8003eec:	bf00      	nop
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40005400 	.word	0x40005400
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	40020400 	.word	0x40020400

08003f00 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b08a      	sub	sp, #40	; 0x28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f08:	f107 0314 	add.w	r3, r7, #20
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	605a      	str	r2, [r3, #4]
 8003f12:	609a      	str	r2, [r3, #8]
 8003f14:	60da      	str	r2, [r3, #12]
 8003f16:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a29      	ldr	r2, [pc, #164]	; (8003fc4 <HAL_SD_MspInit+0xc4>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d14b      	bne.n	8003fba <HAL_SD_MspInit+0xba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003f22:	2300      	movs	r3, #0
 8003f24:	613b      	str	r3, [r7, #16]
 8003f26:	4b28      	ldr	r3, [pc, #160]	; (8003fc8 <HAL_SD_MspInit+0xc8>)
 8003f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2a:	4a27      	ldr	r2, [pc, #156]	; (8003fc8 <HAL_SD_MspInit+0xc8>)
 8003f2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f30:	6453      	str	r3, [r2, #68]	; 0x44
 8003f32:	4b25      	ldr	r3, [pc, #148]	; (8003fc8 <HAL_SD_MspInit+0xc8>)
 8003f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f3a:	613b      	str	r3, [r7, #16]
 8003f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	4b21      	ldr	r3, [pc, #132]	; (8003fc8 <HAL_SD_MspInit+0xc8>)
 8003f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f46:	4a20      	ldr	r2, [pc, #128]	; (8003fc8 <HAL_SD_MspInit+0xc8>)
 8003f48:	f043 0301 	orr.w	r3, r3, #1
 8003f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f4e:	4b1e      	ldr	r3, [pc, #120]	; (8003fc8 <HAL_SD_MspInit+0xc8>)
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60bb      	str	r3, [r7, #8]
 8003f5e:	4b1a      	ldr	r3, [pc, #104]	; (8003fc8 <HAL_SD_MspInit+0xc8>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f62:	4a19      	ldr	r2, [pc, #100]	; (8003fc8 <HAL_SD_MspInit+0xc8>)
 8003f64:	f043 0302 	orr.w	r3, r3, #2
 8003f68:	6313      	str	r3, [r2, #48]	; 0x30
 8003f6a:	4b17      	ldr	r3, [pc, #92]	; (8003fc8 <HAL_SD_MspInit+0xc8>)
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	60bb      	str	r3, [r7, #8]
 8003f74:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8003f76:	f44f 7350 	mov.w	r3, #832	; 0x340
 8003f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f80:	2300      	movs	r3, #0
 8003f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f84:	2303      	movs	r3, #3
 8003f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003f88:	230c      	movs	r3, #12
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f8c:	f107 0314 	add.w	r3, r7, #20
 8003f90:	4619      	mov	r1, r3
 8003f92:	480e      	ldr	r0, [pc, #56]	; (8003fcc <HAL_SD_MspInit+0xcc>)
 8003f94:	f002 fce8 	bl	8006968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 8003f98:	f248 03a0 	movw	r3, #32928	; 0x80a0
 8003f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003faa:	230c      	movs	r3, #12
 8003fac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fae:	f107 0314 	add.w	r3, r7, #20
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	4806      	ldr	r0, [pc, #24]	; (8003fd0 <HAL_SD_MspInit+0xd0>)
 8003fb6:	f002 fcd7 	bl	8006968 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8003fba:	bf00      	nop
 8003fbc:	3728      	adds	r7, #40	; 0x28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40012c00 	.word	0x40012c00
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	40020000 	.word	0x40020000
 8003fd0:	40020400 	.word	0x40020400

08003fd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b090      	sub	sp, #64	; 0x40
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	605a      	str	r2, [r3, #4]
 8003fe6:	609a      	str	r2, [r3, #8]
 8003fe8:	60da      	str	r2, [r3, #12]
 8003fea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a81      	ldr	r2, [pc, #516]	; (80041f8 <HAL_SPI_MspInit+0x224>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d14a      	bne.n	800408c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ffa:	4b80      	ldr	r3, [pc, #512]	; (80041fc <HAL_SPI_MspInit+0x228>)
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffe:	4a7f      	ldr	r2, [pc, #508]	; (80041fc <HAL_SPI_MspInit+0x228>)
 8004000:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004004:	6453      	str	r3, [r2, #68]	; 0x44
 8004006:	4b7d      	ldr	r3, [pc, #500]	; (80041fc <HAL_SPI_MspInit+0x228>)
 8004008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800400e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004010:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004012:	2300      	movs	r3, #0
 8004014:	627b      	str	r3, [r7, #36]	; 0x24
 8004016:	4b79      	ldr	r3, [pc, #484]	; (80041fc <HAL_SPI_MspInit+0x228>)
 8004018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401a:	4a78      	ldr	r2, [pc, #480]	; (80041fc <HAL_SPI_MspInit+0x228>)
 800401c:	f043 0301 	orr.w	r3, r3, #1
 8004020:	6313      	str	r3, [r2, #48]	; 0x30
 8004022:	4b76      	ldr	r3, [pc, #472]	; (80041fc <HAL_SPI_MspInit+0x228>)
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	627b      	str	r3, [r7, #36]	; 0x24
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800402e:	2300      	movs	r3, #0
 8004030:	623b      	str	r3, [r7, #32]
 8004032:	4b72      	ldr	r3, [pc, #456]	; (80041fc <HAL_SPI_MspInit+0x228>)
 8004034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004036:	4a71      	ldr	r2, [pc, #452]	; (80041fc <HAL_SPI_MspInit+0x228>)
 8004038:	f043 0302 	orr.w	r3, r3, #2
 800403c:	6313      	str	r3, [r2, #48]	; 0x30
 800403e:	4b6f      	ldr	r3, [pc, #444]	; (80041fc <HAL_SPI_MspInit+0x228>)
 8004040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	623b      	str	r3, [r7, #32]
 8004048:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800404a:	23a0      	movs	r3, #160	; 0xa0
 800404c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800404e:	2302      	movs	r3, #2
 8004050:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004052:	2300      	movs	r3, #0
 8004054:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004056:	2303      	movs	r3, #3
 8004058:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800405a:	2305      	movs	r3, #5
 800405c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800405e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004062:	4619      	mov	r1, r3
 8004064:	4866      	ldr	r0, [pc, #408]	; (8004200 <HAL_SPI_MspInit+0x22c>)
 8004066:	f002 fc7f 	bl	8006968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800406a:	2310      	movs	r3, #16
 800406c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800406e:	2302      	movs	r3, #2
 8004070:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004072:	2300      	movs	r3, #0
 8004074:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004076:	2303      	movs	r3, #3
 8004078:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800407a:	2305      	movs	r3, #5
 800407c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800407e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004082:	4619      	mov	r1, r3
 8004084:	485f      	ldr	r0, [pc, #380]	; (8004204 <HAL_SPI_MspInit+0x230>)
 8004086:	f002 fc6f 	bl	8006968 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800408a:	e0b1      	b.n	80041f0 <HAL_SPI_MspInit+0x21c>
  else if(hspi->Instance==SPI4)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a5d      	ldr	r2, [pc, #372]	; (8004208 <HAL_SPI_MspInit+0x234>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d15c      	bne.n	8004150 <HAL_SPI_MspInit+0x17c>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004096:	2300      	movs	r3, #0
 8004098:	61fb      	str	r3, [r7, #28]
 800409a:	4b58      	ldr	r3, [pc, #352]	; (80041fc <HAL_SPI_MspInit+0x228>)
 800409c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409e:	4a57      	ldr	r2, [pc, #348]	; (80041fc <HAL_SPI_MspInit+0x228>)
 80040a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80040a4:	6453      	str	r3, [r2, #68]	; 0x44
 80040a6:	4b55      	ldr	r3, [pc, #340]	; (80041fc <HAL_SPI_MspInit+0x228>)
 80040a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040ae:	61fb      	str	r3, [r7, #28]
 80040b0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040b2:	2300      	movs	r3, #0
 80040b4:	61bb      	str	r3, [r7, #24]
 80040b6:	4b51      	ldr	r3, [pc, #324]	; (80041fc <HAL_SPI_MspInit+0x228>)
 80040b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ba:	4a50      	ldr	r2, [pc, #320]	; (80041fc <HAL_SPI_MspInit+0x228>)
 80040bc:	f043 0301 	orr.w	r3, r3, #1
 80040c0:	6313      	str	r3, [r2, #48]	; 0x30
 80040c2:	4b4e      	ldr	r3, [pc, #312]	; (80041fc <HAL_SPI_MspInit+0x228>)
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	61bb      	str	r3, [r7, #24]
 80040cc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040ce:	2300      	movs	r3, #0
 80040d0:	617b      	str	r3, [r7, #20]
 80040d2:	4b4a      	ldr	r3, [pc, #296]	; (80041fc <HAL_SPI_MspInit+0x228>)
 80040d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d6:	4a49      	ldr	r2, [pc, #292]	; (80041fc <HAL_SPI_MspInit+0x228>)
 80040d8:	f043 0302 	orr.w	r3, r3, #2
 80040dc:	6313      	str	r3, [r2, #48]	; 0x30
 80040de:	4b47      	ldr	r3, [pc, #284]	; (80041fc <HAL_SPI_MspInit+0x228>)
 80040e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	617b      	str	r3, [r7, #20]
 80040e8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80040ea:	2302      	movs	r3, #2
 80040ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ee:	2302      	movs	r3, #2
 80040f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040f6:	2303      	movs	r3, #3
 80040f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80040fa:	2305      	movs	r3, #5
 80040fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004102:	4619      	mov	r1, r3
 8004104:	483e      	ldr	r0, [pc, #248]	; (8004200 <HAL_SPI_MspInit+0x22c>)
 8004106:	f002 fc2f 	bl	8006968 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800410a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800410e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004110:	2302      	movs	r3, #2
 8004112:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004114:	2300      	movs	r3, #0
 8004116:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004118:	2303      	movs	r3, #3
 800411a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 800411c:	2306      	movs	r3, #6
 800411e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004120:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004124:	4619      	mov	r1, r3
 8004126:	4837      	ldr	r0, [pc, #220]	; (8004204 <HAL_SPI_MspInit+0x230>)
 8004128:	f002 fc1e 	bl	8006968 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800412c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004130:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004132:	2302      	movs	r3, #2
 8004134:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004136:	2300      	movs	r3, #0
 8004138:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800413a:	2303      	movs	r3, #3
 800413c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 800413e:	2306      	movs	r3, #6
 8004140:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004142:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004146:	4619      	mov	r1, r3
 8004148:	482d      	ldr	r0, [pc, #180]	; (8004200 <HAL_SPI_MspInit+0x22c>)
 800414a:	f002 fc0d 	bl	8006968 <HAL_GPIO_Init>
}
 800414e:	e04f      	b.n	80041f0 <HAL_SPI_MspInit+0x21c>
  else if(hspi->Instance==SPI5)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a2d      	ldr	r2, [pc, #180]	; (800420c <HAL_SPI_MspInit+0x238>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d14a      	bne.n	80041f0 <HAL_SPI_MspInit+0x21c>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800415a:	2300      	movs	r3, #0
 800415c:	613b      	str	r3, [r7, #16]
 800415e:	4b27      	ldr	r3, [pc, #156]	; (80041fc <HAL_SPI_MspInit+0x228>)
 8004160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004162:	4a26      	ldr	r2, [pc, #152]	; (80041fc <HAL_SPI_MspInit+0x228>)
 8004164:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004168:	6453      	str	r3, [r2, #68]	; 0x44
 800416a:	4b24      	ldr	r3, [pc, #144]	; (80041fc <HAL_SPI_MspInit+0x228>)
 800416c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004172:	613b      	str	r3, [r7, #16]
 8004174:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004176:	2300      	movs	r3, #0
 8004178:	60fb      	str	r3, [r7, #12]
 800417a:	4b20      	ldr	r3, [pc, #128]	; (80041fc <HAL_SPI_MspInit+0x228>)
 800417c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417e:	4a1f      	ldr	r2, [pc, #124]	; (80041fc <HAL_SPI_MspInit+0x228>)
 8004180:	f043 0302 	orr.w	r3, r3, #2
 8004184:	6313      	str	r3, [r2, #48]	; 0x30
 8004186:	4b1d      	ldr	r3, [pc, #116]	; (80041fc <HAL_SPI_MspInit+0x228>)
 8004188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004192:	2300      	movs	r3, #0
 8004194:	60bb      	str	r3, [r7, #8]
 8004196:	4b19      	ldr	r3, [pc, #100]	; (80041fc <HAL_SPI_MspInit+0x228>)
 8004198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419a:	4a18      	ldr	r2, [pc, #96]	; (80041fc <HAL_SPI_MspInit+0x228>)
 800419c:	f043 0301 	orr.w	r3, r3, #1
 80041a0:	6313      	str	r3, [r2, #48]	; 0x30
 80041a2:	4b16      	ldr	r3, [pc, #88]	; (80041fc <HAL_SPI_MspInit+0x228>)
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	60bb      	str	r3, [r7, #8]
 80041ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80041ae:	2301      	movs	r3, #1
 80041b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b2:	2302      	movs	r3, #2
 80041b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041ba:	2303      	movs	r3, #3
 80041bc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 80041be:	2306      	movs	r3, #6
 80041c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041c6:	4619      	mov	r1, r3
 80041c8:	480e      	ldr	r0, [pc, #56]	; (8004204 <HAL_SPI_MspInit+0x230>)
 80041ca:	f002 fbcd 	bl	8006968 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80041ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80041d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d4:	2302      	movs	r3, #2
 80041d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d8:	2300      	movs	r3, #0
 80041da:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041dc:	2303      	movs	r3, #3
 80041de:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 80041e0:	2306      	movs	r3, #6
 80041e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041e8:	4619      	mov	r1, r3
 80041ea:	4805      	ldr	r0, [pc, #20]	; (8004200 <HAL_SPI_MspInit+0x22c>)
 80041ec:	f002 fbbc 	bl	8006968 <HAL_GPIO_Init>
}
 80041f0:	bf00      	nop
 80041f2:	3740      	adds	r7, #64	; 0x40
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40013000 	.word	0x40013000
 80041fc:	40023800 	.word	0x40023800
 8004200:	40020000 	.word	0x40020000
 8004204:	40020400 	.word	0x40020400
 8004208:	40013400 	.word	0x40013400
 800420c:	40015000 	.word	0x40015000

08004210 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b08a      	sub	sp, #40	; 0x28
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004218:	f107 0314 	add.w	r3, r7, #20
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	605a      	str	r2, [r3, #4]
 8004222:	609a      	str	r2, [r3, #8]
 8004224:	60da      	str	r2, [r3, #12]
 8004226:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a2c      	ldr	r2, [pc, #176]	; (80042e0 <HAL_UART_MspInit+0xd0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d152      	bne.n	80042d8 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004232:	2300      	movs	r3, #0
 8004234:	613b      	str	r3, [r7, #16]
 8004236:	4b2b      	ldr	r3, [pc, #172]	; (80042e4 <HAL_UART_MspInit+0xd4>)
 8004238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423a:	4a2a      	ldr	r2, [pc, #168]	; (80042e4 <HAL_UART_MspInit+0xd4>)
 800423c:	f043 0310 	orr.w	r3, r3, #16
 8004240:	6453      	str	r3, [r2, #68]	; 0x44
 8004242:	4b28      	ldr	r3, [pc, #160]	; (80042e4 <HAL_UART_MspInit+0xd4>)
 8004244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004246:	f003 0310 	and.w	r3, r3, #16
 800424a:	613b      	str	r3, [r7, #16]
 800424c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800424e:	2300      	movs	r3, #0
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	4b24      	ldr	r3, [pc, #144]	; (80042e4 <HAL_UART_MspInit+0xd4>)
 8004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004256:	4a23      	ldr	r2, [pc, #140]	; (80042e4 <HAL_UART_MspInit+0xd4>)
 8004258:	f043 0301 	orr.w	r3, r3, #1
 800425c:	6313      	str	r3, [r2, #48]	; 0x30
 800425e:	4b21      	ldr	r3, [pc, #132]	; (80042e4 <HAL_UART_MspInit+0xd4>)
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800426a:	2300      	movs	r3, #0
 800426c:	60bb      	str	r3, [r7, #8]
 800426e:	4b1d      	ldr	r3, [pc, #116]	; (80042e4 <HAL_UART_MspInit+0xd4>)
 8004270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004272:	4a1c      	ldr	r2, [pc, #112]	; (80042e4 <HAL_UART_MspInit+0xd4>)
 8004274:	f043 0302 	orr.w	r3, r3, #2
 8004278:	6313      	str	r3, [r2, #48]	; 0x30
 800427a:	4b1a      	ldr	r3, [pc, #104]	; (80042e4 <HAL_UART_MspInit+0xd4>)
 800427c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	60bb      	str	r3, [r7, #8]
 8004284:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800428a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800428c:	2302      	movs	r3, #2
 800428e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004290:	2300      	movs	r3, #0
 8004292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004294:	2303      	movs	r3, #3
 8004296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004298:	2307      	movs	r3, #7
 800429a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800429c:	f107 0314 	add.w	r3, r7, #20
 80042a0:	4619      	mov	r1, r3
 80042a2:	4811      	ldr	r0, [pc, #68]	; (80042e8 <HAL_UART_MspInit+0xd8>)
 80042a4:	f002 fb60 	bl	8006968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80042a8:	2308      	movs	r3, #8
 80042aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ac:	2302      	movs	r3, #2
 80042ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b0:	2300      	movs	r3, #0
 80042b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042b4:	2303      	movs	r3, #3
 80042b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042b8:	2307      	movs	r3, #7
 80042ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042bc:	f107 0314 	add.w	r3, r7, #20
 80042c0:	4619      	mov	r1, r3
 80042c2:	480a      	ldr	r0, [pc, #40]	; (80042ec <HAL_UART_MspInit+0xdc>)
 80042c4:	f002 fb50 	bl	8006968 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80042c8:	2200      	movs	r2, #0
 80042ca:	2100      	movs	r1, #0
 80042cc:	2025      	movs	r0, #37	; 0x25
 80042ce:	f002 fb14 	bl	80068fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80042d2:	2025      	movs	r0, #37	; 0x25
 80042d4:	f002 fb2d 	bl	8006932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80042d8:	bf00      	nop
 80042da:	3728      	adds	r7, #40	; 0x28
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	40011000 	.word	0x40011000
 80042e4:	40023800 	.word	0x40023800
 80042e8:	40020000 	.word	0x40020000
 80042ec:	40020400 	.word	0x40020400

080042f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80042f4:	e7fe      	b.n	80042f4 <NMI_Handler+0x4>

080042f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042f6:	b480      	push	{r7}
 80042f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042fa:	e7fe      	b.n	80042fa <HardFault_Handler+0x4>

080042fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004300:	e7fe      	b.n	8004300 <MemManage_Handler+0x4>

08004302 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004302:	b480      	push	{r7}
 8004304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004306:	e7fe      	b.n	8004306 <BusFault_Handler+0x4>

08004308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800430c:	e7fe      	b.n	800430c <UsageFault_Handler+0x4>

0800430e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800430e:	b480      	push	{r7}
 8004310:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004312:	bf00      	nop
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004320:	bf00      	nop
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800432a:	b480      	push	{r7}
 800432c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800432e:	bf00      	nop
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800433c:	f001 fdcc 	bl	8005ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004340:	bf00      	nop
 8004342:	bd80      	pop	{r7, pc}

08004344 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
		//__disable_irq();
		//#pragma GCC diagnostic push;
		//#pragma GCC diagnostic ignored "-Wunused-variable"
		    volatile uint32_t sr = huart1.Instance->SR;
 800434a:	4b08      	ldr	r3, [pc, #32]	; (800436c <USART1_IRQHandler+0x28>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	607b      	str	r3, [r7, #4]
		//#pragma GCC diagnostic pop
		    volatile uint32_t byte = huart1.Instance->DR;
 8004352:	4b06      	ldr	r3, [pc, #24]	; (800436c <USART1_IRQHandler+0x28>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	603b      	str	r3, [r7, #0]
		    //__enable_irq();

		    gps_push_byte(byte);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	4618      	mov	r0, r3
 800435e:	f00a fa0f 	bl	800e780 <gps_push_byte>
		    (void)sr;
 8004362:	687b      	ldr	r3, [r7, #4]


	    return;
 8004364:	bf00      	nop
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	20002838 	.word	0x20002838

08004370 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0
	return 1;
 8004374:	2301      	movs	r3, #1
}
 8004376:	4618      	mov	r0, r3
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <_kill>:

int _kill(int pid, int sig)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800438a:	f00b fcaf 	bl	800fcec <__errno>
 800438e:	4603      	mov	r3, r0
 8004390:	2216      	movs	r2, #22
 8004392:	601a      	str	r2, [r3, #0]
	return -1;
 8004394:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004398:	4618      	mov	r0, r3
 800439a:	3708      	adds	r7, #8
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <_exit>:

void _exit (int status)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80043a8:	f04f 31ff 	mov.w	r1, #4294967295
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f7ff ffe7 	bl	8004380 <_kill>
	while (1) {}		/* Make sure we hang here */
 80043b2:	e7fe      	b.n	80043b2 <_exit+0x12>

080043b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043c0:	2300      	movs	r3, #0
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	e00a      	b.n	80043dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80043c6:	f3af 8000 	nop.w
 80043ca:	4601      	mov	r1, r0
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	60ba      	str	r2, [r7, #8]
 80043d2:	b2ca      	uxtb	r2, r1
 80043d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	3301      	adds	r3, #1
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	dbf0      	blt.n	80043c6 <_read+0x12>
	}

return len;
 80043e4:	687b      	ldr	r3, [r7, #4]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <_close>:
	}
	return len;
}

int _close(int file)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b083      	sub	sp, #12
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
	return -1;
 80043f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004416:	605a      	str	r2, [r3, #4]
	return 0;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <_isatty>:

int _isatty(int file)
{
 8004426:	b480      	push	{r7}
 8004428:	b083      	sub	sp, #12
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
	return 1;
 800442e:	2301      	movs	r3, #1
}
 8004430:	4618      	mov	r0, r3
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
	return 0;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
	...

08004458 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004460:	4a14      	ldr	r2, [pc, #80]	; (80044b4 <_sbrk+0x5c>)
 8004462:	4b15      	ldr	r3, [pc, #84]	; (80044b8 <_sbrk+0x60>)
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800446c:	4b13      	ldr	r3, [pc, #76]	; (80044bc <_sbrk+0x64>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d102      	bne.n	800447a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004474:	4b11      	ldr	r3, [pc, #68]	; (80044bc <_sbrk+0x64>)
 8004476:	4a12      	ldr	r2, [pc, #72]	; (80044c0 <_sbrk+0x68>)
 8004478:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800447a:	4b10      	ldr	r3, [pc, #64]	; (80044bc <_sbrk+0x64>)
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4413      	add	r3, r2
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	429a      	cmp	r2, r3
 8004486:	d207      	bcs.n	8004498 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004488:	f00b fc30 	bl	800fcec <__errno>
 800448c:	4603      	mov	r3, r0
 800448e:	220c      	movs	r2, #12
 8004490:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004492:	f04f 33ff 	mov.w	r3, #4294967295
 8004496:	e009      	b.n	80044ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004498:	4b08      	ldr	r3, [pc, #32]	; (80044bc <_sbrk+0x64>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800449e:	4b07      	ldr	r3, [pc, #28]	; (80044bc <_sbrk+0x64>)
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4413      	add	r3, r2
 80044a6:	4a05      	ldr	r2, [pc, #20]	; (80044bc <_sbrk+0x64>)
 80044a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80044aa:	68fb      	ldr	r3, [r7, #12]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3718      	adds	r7, #24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	20020000 	.word	0x20020000
 80044b8:	00000400 	.word	0x00000400
 80044bc:	200022d0 	.word	0x200022d0
 80044c0:	20004a38 	.word	0x20004a38

080044c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80044c8:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <SystemInit+0x20>)
 80044ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ce:	4a05      	ldr	r2, [pc, #20]	; (80044e4 <SystemInit+0x20>)
 80044d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044d8:	bf00      	nop
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	e000ed00 	.word	0xe000ed00

080044e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80044e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004520 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80044ec:	480d      	ldr	r0, [pc, #52]	; (8004524 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80044ee:	490e      	ldr	r1, [pc, #56]	; (8004528 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80044f0:	4a0e      	ldr	r2, [pc, #56]	; (800452c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80044f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044f4:	e002      	b.n	80044fc <LoopCopyDataInit>

080044f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044fa:	3304      	adds	r3, #4

080044fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004500:	d3f9      	bcc.n	80044f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004502:	4a0b      	ldr	r2, [pc, #44]	; (8004530 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004504:	4c0b      	ldr	r4, [pc, #44]	; (8004534 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004508:	e001      	b.n	800450e <LoopFillZerobss>

0800450a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800450a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800450c:	3204      	adds	r2, #4

0800450e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800450e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004510:	d3fb      	bcc.n	800450a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004512:	f7ff ffd7 	bl	80044c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004516:	f00b fc01 	bl	800fd1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800451a:	f7ff f977 	bl	800380c <main>
  bx  lr    
 800451e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004520:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004528:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 800452c:	08016758 	.word	0x08016758
  ldr r2, =_sbss
 8004530:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8004534:	20004a34 	.word	0x20004a34

08004538 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004538:	e7fe      	b.n	8004538 <ADC_IRQHandler>

0800453a <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b084      	sub	sp, #16
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* chip id read try count */
    uint8_t try_count = 5;
 8004542:	2305      	movs	r3, #5
 8004544:	73bb      	strb	r3, [r7, #14]
    uint8_t chip_id = 0;
 8004546:	2300      	movs	r3, #0
 8004548:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f001 fa16 	bl	800597c <null_ptr_check>
 8004550:	4603      	mov	r3, r0
 8004552:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8004554:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d130      	bne.n	80045be <bme280_init+0x84>
    {
        while (try_count)
 800455c:	e025      	b.n	80045aa <bme280_init+0x70>
        {
            /* Read the chip-id of bme280 sensor */
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 800455e:	f107 010d 	add.w	r1, r7, #13
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	20d0      	movs	r0, #208	; 0xd0
 8004568:	f000 f82f 	bl	80045ca <bme280_get_regs>
 800456c:	4603      	mov	r3, r0
 800456e:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BME280_OK))
 8004570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d111      	bne.n	800459c <bme280_init+0x62>
            {
                dev->chip_id = chip_id;
 8004578:	7b7a      	ldrb	r2, [r7, #13]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bme280_soft_reset(dev);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f978 	bl	8004874 <bme280_soft_reset>
 8004584:	4603      	mov	r3, r0
 8004586:	73fb      	strb	r3, [r7, #15]
                if (rslt == BME280_OK)
 8004588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d110      	bne.n	80045b2 <bme280_init+0x78>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f001 f869 	bl	8005668 <get_calib_data>
 8004596:	4603      	mov	r3, r0
 8004598:	73fb      	strb	r3, [r7, #15]
                }
                break;
 800459a:	e00a      	b.n	80045b2 <bme280_init+0x78>
            }

            /* Wait for 1 ms */
            dev->delay_ms(1);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	2001      	movs	r0, #1
 80045a2:	4798      	blx	r3
            --try_count;
 80045a4:	7bbb      	ldrb	r3, [r7, #14]
 80045a6:	3b01      	subs	r3, #1
 80045a8:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 80045aa:	7bbb      	ldrb	r3, [r7, #14]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1d6      	bne.n	800455e <bme280_init+0x24>
 80045b0:	e000      	b.n	80045b4 <bme280_init+0x7a>
                break;
 80045b2:	bf00      	nop
        }

        /* Chip id check failed */
        if (!try_count)
 80045b4:	7bbb      	ldrb	r3, [r7, #14]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <bme280_init+0x84>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 80045ba:	23fe      	movs	r3, #254	; 0xfe
 80045bc:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80045be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 80045ca:	b590      	push	{r4, r7, lr}
 80045cc:	b087      	sub	sp, #28
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607b      	str	r3, [r7, #4]
 80045d4:	4603      	mov	r3, r0
 80045d6:	73fb      	strb	r3, [r7, #15]
 80045d8:	4613      	mov	r3, r2
 80045da:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f001 f9cd 	bl	800597c <null_ptr_check>
 80045e2:	4603      	mov	r3, r0
 80045e4:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 80045e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d117      	bne.n	800461e <bme280_get_regs+0x54>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	789b      	ldrb	r3, [r3, #2]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d003      	beq.n	80045fe <bme280_get_regs+0x34>
        {
            reg_addr = reg_addr | 0x80;
 80045f6:	7bfb      	ldrb	r3, [r7, #15]
 80045f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045fc:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data  */
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685c      	ldr	r4, [r3, #4]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	7858      	ldrb	r0, [r3, #1]
 8004606:	89bb      	ldrh	r3, [r7, #12]
 8004608:	7bf9      	ldrb	r1, [r7, #15]
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	47a0      	blx	r4
 800460e:	4603      	mov	r3, r0
 8004610:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error */
        if (rslt != BME280_OK)
 8004612:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <bme280_get_regs+0x54>
        {
            rslt = BME280_E_COMM_FAIL;
 800461a:	23fc      	movs	r3, #252	; 0xfc
 800461c:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 800461e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004622:	4618      	mov	r0, r3
 8004624:	371c      	adds	r7, #28
 8004626:	46bd      	mov	sp, r7
 8004628:	bd90      	pop	{r4, r7, pc}

0800462a <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 800462a:	b590      	push	{r4, r7, lr}
 800462c:	b08d      	sub	sp, #52	; 0x34
 800462e:	af00      	add	r7, sp, #0
 8004630:	60f8      	str	r0, [r7, #12]
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	603b      	str	r3, [r7, #0]
 8004636:	4613      	mov	r3, r2
 8004638:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 800463a:	79fb      	ldrb	r3, [r7, #7]
 800463c:	2b0a      	cmp	r3, #10
 800463e:	d901      	bls.n	8004644 <bme280_set_regs+0x1a>
    {
        len = 10;
 8004640:	230a      	movs	r3, #10
 8004642:	71fb      	strb	r3, [r7, #7]
    }
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8004644:	6838      	ldr	r0, [r7, #0]
 8004646:	f001 f999 	bl	800597c <null_ptr_check>
 800464a:	4603      	mov	r3, r0
 800464c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8004650:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004654:	2b00      	cmp	r3, #0
 8004656:	d156      	bne.n	8004706 <bme280_set_regs+0xdc>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d053      	beq.n	8004706 <bme280_set_regs+0xdc>
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d050      	beq.n	8004706 <bme280_set_regs+0xdc>
    {
        if (len != 0)
 8004664:	79fb      	ldrb	r3, [r7, #7]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d049      	beq.n	80046fe <bme280_set_regs+0xd4>
        {
            temp_buff[0] = reg_data[0];
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	753b      	strb	r3, [r7, #20]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	789b      	ldrb	r3, [r3, #2]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d01a      	beq.n	80046ae <bme280_set_regs+0x84>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8004678:	2300      	movs	r3, #0
 800467a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800467e:	e011      	b.n	80046a4 <bme280_set_regs+0x7a>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8004680:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	4413      	add	r3, r2
 8004688:	781a      	ldrb	r2, [r3, #0]
 800468a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800468e:	68f9      	ldr	r1, [r7, #12]
 8004690:	440b      	add	r3, r1
 8004692:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004696:	b2d2      	uxtb	r2, r2
 8004698:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800469a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800469e:	3301      	adds	r3, #1
 80046a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046a4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80046a8:	79fb      	ldrb	r3, [r7, #7]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d3e8      	bcc.n	8004680 <bme280_set_regs+0x56>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80046ae:	79fb      	ldrb	r3, [r7, #7]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d90d      	bls.n	80046d0 <bme280_set_regs+0xa6>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80046b4:	79fb      	ldrb	r3, [r7, #7]
 80046b6:	f107 0114 	add.w	r1, r7, #20
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f001 f818 	bl	80056f2 <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 80046c2:	79fb      	ldrb	r3, [r7, #7]
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	3b01      	subs	r3, #1
 80046cc:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80046ce:	e001      	b.n	80046d4 <bme280_set_regs+0xaa>
            }
            else
            {
                temp_len = len;
 80046d0:	79fb      	ldrb	r3, [r7, #7]
 80046d2:	85bb      	strh	r3, [r7, #44]	; 0x2c
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	689c      	ldr	r4, [r3, #8]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	7858      	ldrb	r0, [r3, #1]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	7819      	ldrb	r1, [r3, #0]
 80046e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80046e2:	f107 0214 	add.w	r2, r7, #20
 80046e6:	47a0      	blx	r4
 80046e8:	4603      	mov	r3, r0
 80046ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            /* Check for communication error */
            if (rslt != BME280_OK)
 80046ee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00b      	beq.n	800470e <bme280_set_regs+0xe4>
            {
                rslt = BME280_E_COMM_FAIL;
 80046f6:	23fc      	movs	r3, #252	; 0xfc
 80046f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 80046fc:	e007      	b.n	800470e <bme280_set_regs+0xe4>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 80046fe:	23fd      	movs	r3, #253	; 0xfd
 8004700:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 8004704:	e003      	b.n	800470e <bme280_set_regs+0xe4>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8004706:	23ff      	movs	r3, #255	; 0xff
 8004708:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800470c:	e000      	b.n	8004710 <bme280_set_regs+0xe6>
        if (len != 0)
 800470e:	bf00      	nop
    }

    return rslt;
 8004710:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004714:	4618      	mov	r0, r3
 8004716:	3734      	adds	r7, #52	; 0x34
 8004718:	46bd      	mov	sp, r7
 800471a:	bd90      	pop	{r4, r7, pc}

0800471c <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	4603      	mov	r3, r0
 8004724:	6039      	str	r1, [r7, #0]
 8004726:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t sensor_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8004728:	6838      	ldr	r0, [r7, #0]
 800472a:	f001 f927 	bl	800597c <null_ptr_check>
 800472e:	4603      	mov	r3, r0
 8004730:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8004732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d13f      	bne.n	80047ba <bme280_set_sensor_settings+0x9e>
    {
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 800473a:	f107 030e 	add.w	r3, r7, #14
 800473e:	6839      	ldr	r1, [r7, #0]
 8004740:	4618      	mov	r0, r3
 8004742:	f000 f874 	bl	800482e <bme280_get_sensor_mode>
 8004746:	4603      	mov	r3, r0
 8004748:	73fb      	strb	r3, [r7, #15]
        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 800474a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d107      	bne.n	8004762 <bme280_set_sensor_settings+0x46>
 8004752:	7bbb      	ldrb	r3, [r7, #14]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d004      	beq.n	8004762 <bme280_set_sensor_settings+0x46>
        {
            rslt = put_device_to_sleep(dev);
 8004758:	6838      	ldr	r0, [r7, #0]
 800475a:	f000 fb74 	bl	8004e46 <put_device_to_sleep>
 800475e:	4603      	mov	r3, r0
 8004760:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BME280_OK)
 8004762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d127      	bne.n	80047ba <bme280_set_sensor_settings+0x9e>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 800476a:	79fb      	ldrb	r3, [r7, #7]
 800476c:	4619      	mov	r1, r3
 800476e:	2007      	movs	r0, #7
 8004770:	f001 f8e8 	bl	8005944 <are_settings_changed>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d009      	beq.n	800478e <bme280_set_sensor_settings+0x72>
            {
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004780:	79fb      	ldrb	r3, [r7, #7]
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	4618      	mov	r0, r3
 8004786:	f000 f9b0 	bl	8004aea <set_osr_settings>
 800478a:	4603      	mov	r3, r0
 800478c:	73fb      	strb	r3, [r7, #15]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 800478e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d111      	bne.n	80047ba <bme280_set_sensor_settings+0x9e>
 8004796:	79fb      	ldrb	r3, [r7, #7]
 8004798:	4619      	mov	r1, r3
 800479a:	2018      	movs	r0, #24
 800479c:	f001 f8d2 	bl	8005944 <are_settings_changed>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d009      	beq.n	80047ba <bme280_set_sensor_settings+0x9e>
            {
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80047ac:	79fb      	ldrb	r3, [r7, #7]
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f000 fa37 	bl	8004c24 <set_filter_standby_settings>
 80047b6:	4603      	mov	r3, r0
 80047b8:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80047ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b084      	sub	sp, #16
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	4603      	mov	r3, r0
 80047ce:	6039      	str	r1, [r7, #0]
 80047d0:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80047d2:	6838      	ldr	r0, [r7, #0]
 80047d4:	f001 f8d2 	bl	800597c <null_ptr_check>
 80047d8:	4603      	mov	r3, r0
 80047da:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME280_OK)
 80047dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d11e      	bne.n	8004822 <bme280_set_sensor_mode+0x5c>
    {
        rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 80047e4:	f107 030e 	add.w	r3, r7, #14
 80047e8:	6839      	ldr	r1, [r7, #0]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 f81f 	bl	800482e <bme280_get_sensor_mode>
 80047f0:	4603      	mov	r3, r0
 80047f2:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode
         */
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 80047f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d107      	bne.n	800480c <bme280_set_sensor_mode+0x46>
 80047fc:	7bbb      	ldrb	r3, [r7, #14]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d004      	beq.n	800480c <bme280_set_sensor_mode+0x46>
        {
            rslt = put_device_to_sleep(dev);
 8004802:	6838      	ldr	r0, [r7, #0]
 8004804:	f000 fb1f 	bl	8004e46 <put_device_to_sleep>
 8004808:	4603      	mov	r3, r0
 800480a:	73fb      	strb	r3, [r7, #15]
        }

        /* Set the power mode */
        if (rslt == BME280_OK)
 800480c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d106      	bne.n	8004822 <bme280_set_sensor_mode+0x5c>
        {
            rslt = write_power_mode(sensor_mode, dev);
 8004814:	79fb      	ldrb	r3, [r7, #7]
 8004816:	6839      	ldr	r1, [r7, #0]
 8004818:	4618      	mov	r0, r3
 800481a:	f000 fae1 	bl	8004de0 <write_power_mode>
 800481e:	4603      	mov	r3, r0
 8004820:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004822:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b084      	sub	sp, #16
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
 8004836:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8004838:	6838      	ldr	r0, [r7, #0]
 800483a:	f001 f89f 	bl	800597c <null_ptr_check>
 800483e:	4603      	mov	r3, r0
 8004840:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME280_OK)
 8004842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10e      	bne.n	8004868 <bme280_get_sensor_mode+0x3a>
    {
        /* Read the power mode register */
        rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2201      	movs	r2, #1
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	20f4      	movs	r0, #244	; 0xf4
 8004852:	f7ff feba 	bl	80045ca <bme280_get_regs>
 8004856:	4603      	mov	r3, r0
 8004858:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	f003 0303 	and.w	r3, r3, #3
 8004862:	b2da      	uxtb	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8004868:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_RESET_ADDR;
 800487c:	23e0      	movs	r3, #224	; 0xe0
 800487e:	737b      	strb	r3, [r7, #13]
    uint8_t status_reg = 0;
 8004880:	2300      	movs	r3, #0
 8004882:	733b      	strb	r3, [r7, #12]
    uint8_t try_run = 5;
 8004884:	2305      	movs	r3, #5
 8004886:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 8004888:	23b6      	movs	r3, #182	; 0xb6
 800488a:	72fb      	strb	r3, [r7, #11]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f001 f875 	bl	800597c <null_ptr_check>
 8004892:	4603      	mov	r3, r0
 8004894:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8004896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d12f      	bne.n	80048fe <bme280_soft_reset+0x8a>
    {
        /* Write the soft reset command in the sensor */
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800489e:	f107 010b 	add.w	r1, r7, #11
 80048a2:	f107 000d 	add.w	r0, r7, #13
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f7ff febe 	bl	800462a <bme280_set_regs>
 80048ae:	4603      	mov	r3, r0
 80048b0:	73fb      	strb	r3, [r7, #15]

        if (rslt == BME280_OK)
 80048b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d121      	bne.n	80048fe <bme280_soft_reset+0x8a>
        {
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                dev->delay_ms(2);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	2002      	movs	r0, #2
 80048c0:	4798      	blx	r3
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 80048c2:	f107 010c 	add.w	r1, r7, #12
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	20f3      	movs	r0, #243	; 0xf3
 80048cc:	f7ff fe7d 	bl	80045ca <bme280_get_regs>
 80048d0:	4603      	mov	r3, r0
 80048d2:	73fb      	strb	r3, [r7, #15]
            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 80048d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d109      	bne.n	80048f0 <bme280_soft_reset+0x7c>
 80048dc:	7bbb      	ldrb	r3, [r7, #14]
 80048de:	1e5a      	subs	r2, r3, #1
 80048e0:	73ba      	strb	r2, [r7, #14]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d004      	beq.n	80048f0 <bme280_soft_reset+0x7c>
 80048e6:	7b3b      	ldrb	r3, [r7, #12]
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1e4      	bne.n	80048ba <bme280_soft_reset+0x46>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 80048f0:	7b3b      	ldrb	r3, [r7, #12]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <bme280_soft_reset+0x8a>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 80048fa:	23fa      	movs	r3, #250	; 0xfa
 80048fc:	73fb      	strb	r3, [r7, #15]
            }

        }
    }

    return rslt;
 80048fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b08a      	sub	sp, #40	; 0x28
 800490e:	af00      	add	r7, sp, #0
 8004910:	4603      	mov	r3, r0
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	607a      	str	r2, [r7, #4]
 8004916:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 8004918:	2300      	movs	r3, #0
 800491a:	61fb      	str	r3, [r7, #28]
 800491c:	2300      	movs	r3, #0
 800491e:	623b      	str	r3, [r7, #32]
    struct bme280_uncomp_data uncomp_data = { 0 };
 8004920:	f107 0310 	add.w	r3, r7, #16
 8004924:	2200      	movs	r2, #0
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	605a      	str	r2, [r3, #4]
 800492a:	609a      	str	r2, [r3, #8]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f001 f825 	bl	800597c <null_ptr_check>
 8004932:	4603      	mov	r3, r0
 8004934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if ((rslt == BME280_OK) && (comp_data != NULL))
 8004938:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800493c:	2b00      	cmp	r3, #0
 800493e:	d124      	bne.n	800498a <bme280_get_sensor_data+0x80>
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d021      	beq.n	800498a <bme280_get_sensor_data+0x80>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8004946:	f107 011c 	add.w	r1, r7, #28
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2208      	movs	r2, #8
 800494e:	20f7      	movs	r0, #247	; 0xf7
 8004950:	f7ff fe3b 	bl	80045ca <bme280_get_regs>
 8004954:	4603      	mov	r3, r0
 8004956:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 800495a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800495e:	2b00      	cmp	r3, #0
 8004960:	d116      	bne.n	8004990 <bme280_get_sensor_data+0x86>
        {
            /* Parse the read data from the sensor */
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 8004962:	f107 0210 	add.w	r2, r7, #16
 8004966:	f107 031c 	add.w	r3, r7, #28
 800496a:	4611      	mov	r1, r2
 800496c:	4618      	mov	r0, r3
 800496e:	f000 f815 	bl	800499c <bme280_parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	3310      	adds	r3, #16
 8004976:	f107 0110 	add.w	r1, r7, #16
 800497a:	7bf8      	ldrb	r0, [r7, #15]
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	f000 f853 	bl	8004a28 <bme280_compensate_data>
 8004982:	4603      	mov	r3, r0
 8004984:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 8004988:	e002      	b.n	8004990 <bme280_get_sensor_data+0x86>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800498a:	23ff      	movs	r3, #255	; 0xff
 800498c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 8004990:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004994:	4618      	mov	r0, r3
 8004996:	3728      	adds	r7, #40	; 0x28
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 800499c:	b480      	push	{r7}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	031b      	lsls	r3, r3, #12
 80049ac:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	3301      	adds	r3, #1
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	011b      	lsls	r3, r3, #4
 80049b6:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	3302      	adds	r3, #2
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	091b      	lsrs	r3, r3, #4
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	431a      	orrs	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	431a      	orrs	r2, r3
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << 12;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	3303      	adds	r3, #3
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	031b      	lsls	r3, r3, #12
 80049da:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 4;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3304      	adds	r3, #4
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	011b      	lsls	r3, r3, #4
 80049e4:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	3305      	adds	r3, #5
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	091b      	lsrs	r3, r3, #4
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	431a      	orrs	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	431a      	orrs	r2, r3
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for humidity data */
    data_msb = (uint32_t)reg_data[6] << 8;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3306      	adds	r3, #6
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	021b      	lsls	r3, r3, #8
 8004a08:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[7];
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	3307      	adds	r3, #7
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	613b      	str	r3, [r7, #16]
    uncomp_data->humidity = data_msb | data_lsb;
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	431a      	orrs	r2, r3
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	609a      	str	r2, [r3, #8]
}
 8004a1c:	bf00      	nop
 8004a1e:	371c      	adds	r7, #28
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60b9      	str	r1, [r7, #8]
 8004a30:	607a      	str	r2, [r7, #4]
 8004a32:	603b      	str	r3, [r7, #0]
 8004a34:	4603      	mov	r3, r0
 8004a36:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_OK;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d04b      	beq.n	8004ada <bme280_compensate_data+0xb2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d048      	beq.n	8004ada <bme280_compensate_data+0xb2>
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d045      	beq.n	8004ada <bme280_compensate_data+0xb2>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	f04f 0200 	mov.w	r2, #0
 8004a54:	f04f 0300 	mov.w	r3, #0
 8004a58:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 8004a5c:	6879      	ldr	r1, [r7, #4]
 8004a5e:	f04f 0200 	mov.w	r2, #0
 8004a62:	f04f 0300 	mov.w	r3, #0
 8004a66:	e9c1 2300 	strd	r2, r3, [r1]
        comp_data->humidity = 0;
 8004a6a:	6879      	ldr	r1, [r7, #4]
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	e9c1 2304 	strd	r2, r3, [r1, #16]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
 8004a7a:	f003 0307 	and.w	r3, r3, #7
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00a      	beq.n	8004a98 <bme280_compensate_data+0x70>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8004a82:	6839      	ldr	r1, [r7, #0]
 8004a84:	68b8      	ldr	r0, [r7, #8]
 8004a86:	f000 fa2b 	bl	8004ee0 <compensate_temperature>
 8004a8a:	eeb0 7a40 	vmov.f32	s14, s0
 8004a8e:	eef0 7a60 	vmov.f32	s15, s1
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	ed83 7b02 	vstr	d7, [r3, #8]
        }
        if (sensor_comp & BME280_PRESS)
 8004a98:	7bfb      	ldrb	r3, [r7, #15]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <bme280_compensate_data+0x90>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8004aa2:	6839      	ldr	r1, [r7, #0]
 8004aa4:	68b8      	ldr	r0, [r7, #8]
 8004aa6:	f000 faef 	bl	8005088 <compensate_pressure>
 8004aaa:	eeb0 7a40 	vmov.f32	s14, s0
 8004aae:	eef0 7a60 	vmov.f32	s15, s1
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	ed83 7b00 	vstr	d7, [r3]
        }
        if (sensor_comp & BME280_HUM)
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
 8004aba:	f003 0304 	and.w	r3, r3, #4
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00d      	beq.n	8004ade <bme280_compensate_data+0xb6>
        {
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8004ac2:	6839      	ldr	r1, [r7, #0]
 8004ac4:	68b8      	ldr	r0, [r7, #8]
 8004ac6:	f000 fcaf 	bl	8005428 <compensate_humidity>
 8004aca:	eeb0 7a40 	vmov.f32	s14, s0
 8004ace:	eef0 7a60 	vmov.f32	s15, s1
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	ed83 7b04 	vstr	d7, [r3, #16]
        if (sensor_comp & BME280_HUM)
 8004ad8:	e001      	b.n	8004ade <bme280_compensate_data+0xb6>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8004ada:	23ff      	movs	r3, #255	; 0xff
 8004adc:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004ade:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3718      	adds	r7, #24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <set_osr_settings>:
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings,
                               const struct bme280_settings *settings,
                               const struct bme280_dev *dev)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b086      	sub	sp, #24
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	4603      	mov	r3, r0
 8004af2:	60b9      	str	r1, [r7, #8]
 8004af4:	607a      	str	r2, [r7, #4]
 8004af6:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8004af8:	2301      	movs	r3, #1
 8004afa:	75fb      	strb	r3, [r7, #23]

    if (desired_settings & BME280_OSR_HUM_SEL)
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
 8004afe:	f003 0304 	and.w	r3, r3, #4
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d005      	beq.n	8004b12 <set_osr_settings+0x28>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 8004b06:	6879      	ldr	r1, [r7, #4]
 8004b08:	68b8      	ldr	r0, [r7, #8]
 8004b0a:	f000 f815 	bl	8004b38 <set_osr_humidity_settings>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	75fb      	strb	r3, [r7, #23]
    }
    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8004b12:	7bfb      	ldrb	r3, [r7, #15]
 8004b14:	f003 0303 	and.w	r3, r3, #3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d007      	beq.n	8004b2c <set_osr_settings+0x42>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	68b9      	ldr	r1, [r7, #8]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 f842 	bl	8004bac <set_osr_press_temp_settings>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004b2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3718      	adds	r7, #24
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8004b42:	23f2      	movs	r3, #242	; 0xf2
 8004b44:	733b      	strb	r3, [r7, #12]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	789b      	ldrb	r3, [r3, #2]
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	73bb      	strb	r3, [r7, #14]

    /* Write the humidity control value in the register */
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8004b52:	f107 010e 	add.w	r1, r7, #14
 8004b56:	f107 000c 	add.w	r0, r7, #12
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f7ff fd64 	bl	800462a <bme280_set_regs>
 8004b62:	4603      	mov	r3, r0
 8004b64:	73fb      	strb	r3, [r7, #15]

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 8004b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d118      	bne.n	8004ba0 <set_osr_humidity_settings+0x68>
    {
        reg_addr = BME280_CTRL_MEAS_ADDR;
 8004b6e:	23f4      	movs	r3, #244	; 0xf4
 8004b70:	733b      	strb	r3, [r7, #12]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8004b72:	7b38      	ldrb	r0, [r7, #12]
 8004b74:	f107 010d 	add.w	r1, r7, #13
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f7ff fd25 	bl	80045ca <bme280_get_regs>
 8004b80:	4603      	mov	r3, r0
 8004b82:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME280_OK)
 8004b84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d109      	bne.n	8004ba0 <set_osr_humidity_settings+0x68>
        {
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8004b8c:	f107 010d 	add.w	r1, r7, #13
 8004b90:	f107 000c 	add.w	r0, r7, #12
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f7ff fd47 	bl	800462a <bme280_set_regs>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004ba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          const struct bme280_dev *dev)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
 8004bb8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8004bba:	23f4      	movs	r3, #244	; 0xf4
 8004bbc:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8004bbe:	7db8      	ldrb	r0, [r7, #22]
 8004bc0:	f107 0115 	add.w	r1, r7, #21
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f7ff fcff 	bl	80045ca <bme280_get_regs>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	75fb      	strb	r3, [r7, #23]
    if (rslt == BME280_OK)
 8004bd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d11f      	bne.n	8004c18 <set_osr_press_temp_settings+0x6c>
    {
        if (desired_settings & BME280_OSR_PRESS_SEL)
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d005      	beq.n	8004bee <set_osr_press_temp_settings+0x42>
        {
            fill_osr_press_settings(&reg_data, settings);
 8004be2:	f107 0315 	add.w	r3, r7, #21
 8004be6:	68b9      	ldr	r1, [r7, #8]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 f88e 	bl	8004d0a <fill_osr_press_settings>
        }
        if (desired_settings & BME280_OSR_TEMP_SEL)
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d005      	beq.n	8004c04 <set_osr_press_temp_settings+0x58>
        {
            fill_osr_temp_settings(&reg_data, settings);
 8004bf8:	f107 0315 	add.w	r3, r7, #21
 8004bfc:	68b9      	ldr	r1, [r7, #8]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 f8a0 	bl	8004d44 <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8004c04:	f107 0115 	add.w	r1, r7, #21
 8004c08:	f107 0016 	add.w	r0, r7, #22
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f7ff fd0b 	bl	800462a <bme280_set_regs>
 8004c14:	4603      	mov	r3, r0
 8004c16:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004c18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3718      	adds	r7, #24
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          const struct bme280_dev *dev)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
 8004c30:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 8004c32:	23f5      	movs	r3, #245	; 0xf5
 8004c34:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8004c36:	7db8      	ldrb	r0, [r7, #22]
 8004c38:	f107 0115 	add.w	r1, r7, #21
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f7ff fcc3 	bl	80045ca <bme280_get_regs>
 8004c44:	4603      	mov	r3, r0
 8004c46:	75fb      	strb	r3, [r7, #23]
    if (rslt == BME280_OK)
 8004c48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d11f      	bne.n	8004c90 <set_filter_standby_settings+0x6c>
    {
        if (desired_settings & BME280_FILTER_SEL)
 8004c50:	7bfb      	ldrb	r3, [r7, #15]
 8004c52:	f003 0308 	and.w	r3, r3, #8
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d005      	beq.n	8004c66 <set_filter_standby_settings+0x42>
        {
            fill_filter_settings(&reg_data, settings);
 8004c5a:	f107 0315 	add.w	r3, r7, #21
 8004c5e:	68b9      	ldr	r1, [r7, #8]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f000 f81b 	bl	8004c9c <fill_filter_settings>
        }
        if (desired_settings & BME280_STANDBY_SEL)
 8004c66:	7bfb      	ldrb	r3, [r7, #15]
 8004c68:	f003 0310 	and.w	r3, r3, #16
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d005      	beq.n	8004c7c <set_filter_standby_settings+0x58>
        {
            fill_standby_settings(&reg_data, settings);
 8004c70:	f107 0315 	add.w	r3, r7, #21
 8004c74:	68b9      	ldr	r1, [r7, #8]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 f82d 	bl	8004cd6 <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8004c7c:	f107 0115 	add.w	r1, r7, #21
 8004c80:	f107 0016 	add.w	r0, r7, #22
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f7ff fccf 	bl	800462a <bme280_set_regs>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004c90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	b25b      	sxtb	r3, r3
 8004cac:	f023 031c 	bic.w	r3, r3, #28
 8004cb0:	b25a      	sxtb	r2, r3
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	78db      	ldrb	r3, [r3, #3]
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	b25b      	sxtb	r3, r3
 8004cba:	f003 031c 	and.w	r3, r3, #28
 8004cbe:	b25b      	sxtb	r3, r3
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	b25b      	sxtb	r3, r3
 8004cc4:	b2da      	uxtb	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	701a      	strb	r2, [r3, #0]
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b083      	sub	sp, #12
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
 8004cde:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	b25b      	sxtb	r3, r3
 8004ce6:	f003 031f 	and.w	r3, r3, #31
 8004cea:	b25a      	sxtb	r2, r3
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	791b      	ldrb	r3, [r3, #4]
 8004cf0:	015b      	lsls	r3, r3, #5
 8004cf2:	b25b      	sxtb	r3, r3
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	b25b      	sxtb	r3, r3
 8004cf8:	b2da      	uxtb	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	701a      	strb	r2, [r3, #0]
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	b25b      	sxtb	r3, r3
 8004d1a:	f023 031c 	bic.w	r3, r3, #28
 8004d1e:	b25a      	sxtb	r2, r3
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	b25b      	sxtb	r3, r3
 8004d28:	f003 031c 	and.w	r3, r3, #28
 8004d2c:	b25b      	sxtb	r3, r3
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	b25b      	sxtb	r3, r3
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	701a      	strb	r2, [r3, #0]
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	b25b      	sxtb	r3, r3
 8004d54:	f003 031f 	and.w	r3, r3, #31
 8004d58:	b25a      	sxtb	r2, r3
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	785b      	ldrb	r3, [r3, #1]
 8004d5e:	015b      	lsls	r3, r3, #5
 8004d60:	b25b      	sxtb	r3, r3
 8004d62:	4313      	orrs	r3, r2
 8004d64:	b25b      	sxtb	r3, r3
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	701a      	strb	r2, [r3, #0]
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	b2da      	uxtb	r2, r3
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	3302      	adds	r3, #2
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	109b      	asrs	r3, r3, #2
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	f003 0307 	and.w	r3, r3, #7
 8004d9e:	b2da      	uxtb	r2, r3
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	3302      	adds	r3, #2
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	095b      	lsrs	r3, r3, #5
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	3303      	adds	r3, #3
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	109b      	asrs	r3, r3, #2
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	3303      	adds	r3, #3
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	095b      	lsrs	r3, r3, #5
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	711a      	strb	r2, [r3, #4]
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	4603      	mov	r3, r0
 8004de8:	6039      	str	r1, [r7, #0]
 8004dea:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8004dec:	23f4      	movs	r3, #244	; 0xf4
 8004dee:	73bb      	strb	r3, [r7, #14]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8004df0:	7bb8      	ldrb	r0, [r7, #14]
 8004df2:	f107 010d 	add.w	r1, r7, #13
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f7ff fbe6 	bl	80045ca <bme280_get_regs>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BME280_OK)
 8004e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d117      	bne.n	8004e3a <write_power_mode+0x5a>
    {
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8004e0a:	7b7b      	ldrb	r3, [r7, #13]
 8004e0c:	b25b      	sxtb	r3, r3
 8004e0e:	f023 0303 	bic.w	r3, r3, #3
 8004e12:	b25a      	sxtb	r2, r3
 8004e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e18:	f003 0303 	and.w	r3, r3, #3
 8004e1c:	b25b      	sxtb	r3, r3
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	b25b      	sxtb	r3, r3
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8004e26:	f107 010d 	add.w	r1, r7, #13
 8004e2a:	f107 000e 	add.w	r0, r7, #14
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f7ff fbfa 	bl	800462a <bme280_set_regs>
 8004e36:	4603      	mov	r3, r0
 8004e38:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b086      	sub	sp, #24
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];
    struct bme280_settings settings;

    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8004e4e:	f107 0110 	add.w	r1, r7, #16
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2204      	movs	r2, #4
 8004e56:	20f2      	movs	r0, #242	; 0xf2
 8004e58:	f7ff fbb7 	bl	80045ca <bme280_get_regs>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	75fb      	strb	r3, [r7, #23]
    if (rslt == BME280_OK)
 8004e60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d118      	bne.n	8004e9a <put_device_to_sleep+0x54>
    {
        parse_device_settings(reg_data, &settings);
 8004e68:	f107 0208 	add.w	r2, r7, #8
 8004e6c:	f107 0310 	add.w	r3, r7, #16
 8004e70:	4611      	mov	r1, r2
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7ff ff80 	bl	8004d78 <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7ff fcfb 	bl	8004874 <bme280_soft_reset>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	75fb      	strb	r3, [r7, #23]
        if (rslt == BME280_OK)
 8004e82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d107      	bne.n	8004e9a <put_device_to_sleep+0x54>
        {
            rslt = reload_device_settings(&settings, dev);
 8004e8a:	f107 0308 	add.w	r3, r7, #8
 8004e8e:	6879      	ldr	r1, [r7, #4]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f000 f808 	bl	8004ea6 <reload_device_settings>
 8004e96:	4603      	mov	r3, r0
 8004e98:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8004e9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3718      	adds	r7, #24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b084      	sub	sp, #16
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8004eb0:	683a      	ldr	r2, [r7, #0]
 8004eb2:	6879      	ldr	r1, [r7, #4]
 8004eb4:	201f      	movs	r0, #31
 8004eb6:	f7ff fe18 	bl	8004aea <set_osr_settings>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME280_OK)
 8004ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d106      	bne.n	8004ed4 <reload_device_settings+0x2e>
    {
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	6879      	ldr	r1, [r7, #4]
 8004eca:	201f      	movs	r0, #31
 8004ecc:	f7ff feaa 	bl	8004c24 <set_filter_standby_settings>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <compensate_temperature>:
/*!
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data, struct bme280_calib_data *calib_data)
{
 8004ee0:	b5b0      	push	{r4, r5, r7, lr}
 8004ee2:	b08c      	sub	sp, #48	; 0x30
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double temperature;
    double temperature_min = -40;
 8004eea:	f04f 0200 	mov.w	r2, #0
 8004eee:	4b5f      	ldr	r3, [pc, #380]	; (800506c <compensate_temperature+0x18c>)
 8004ef0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double temperature_max = 85;
 8004ef4:	f04f 0200 	mov.w	r2, #0
 8004ef8:	4b5d      	ldr	r3, [pc, #372]	; (8005070 <compensate_temperature+0x190>)
 8004efa:	e9c7 2306 	strd	r2, r3, [r7, #24]

    var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_t1) / 1024.0;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fb fb06 	bl	8000514 <__aeabi_ui2d>
 8004f08:	f04f 0200 	mov.w	r2, #0
 8004f0c:	4b59      	ldr	r3, [pc, #356]	; (8005074 <compensate_temperature+0x194>)
 8004f0e:	f7fb fca5 	bl	800085c <__aeabi_ddiv>
 8004f12:	4602      	mov	r2, r0
 8004f14:	460b      	mov	r3, r1
 8004f16:	4614      	mov	r4, r2
 8004f18:	461d      	mov	r5, r3
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	881b      	ldrh	r3, [r3, #0]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fb faf8 	bl	8000514 <__aeabi_ui2d>
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	4b53      	ldr	r3, [pc, #332]	; (8005078 <compensate_temperature+0x198>)
 8004f2a:	f7fb fc97 	bl	800085c <__aeabi_ddiv>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	460b      	mov	r3, r1
 8004f32:	4620      	mov	r0, r4
 8004f34:	4629      	mov	r1, r5
 8004f36:	f7fb f9af 	bl	8000298 <__aeabi_dsub>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = var1 * ((double)calib_data->dig_t2);
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7fb faf3 	bl	8000534 <__aeabi_i2d>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	460b      	mov	r3, r1
 8004f52:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004f56:	f7fb fb57 	bl	8000608 <__aeabi_dmul>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_t1) / 8192.0);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fb fad4 	bl	8000514 <__aeabi_ui2d>
 8004f6c:	f04f 0200 	mov.w	r2, #0
 8004f70:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8004f74:	f7fb fc72 	bl	800085c <__aeabi_ddiv>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4614      	mov	r4, r2
 8004f7e:	461d      	mov	r5, r3
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	881b      	ldrh	r3, [r3, #0]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7fb fac5 	bl	8000514 <__aeabi_ui2d>
 8004f8a:	f04f 0200 	mov.w	r2, #0
 8004f8e:	4b3b      	ldr	r3, [pc, #236]	; (800507c <compensate_temperature+0x19c>)
 8004f90:	f7fb fc64 	bl	800085c <__aeabi_ddiv>
 8004f94:	4602      	mov	r2, r0
 8004f96:	460b      	mov	r3, r1
 8004f98:	4620      	mov	r0, r4
 8004f9a:	4629      	mov	r1, r5
 8004f9c:	f7fb f97c 	bl	8000298 <__aeabi_dsub>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var2 = (var2 * var2) * ((double)calib_data->dig_t3);
 8004fa8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004fb0:	f7fb fb2a 	bl	8000608 <__aeabi_dmul>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4614      	mov	r4, r2
 8004fba:	461d      	mov	r5, r3
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7fb fab6 	bl	8000534 <__aeabi_i2d>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	4620      	mov	r0, r4
 8004fce:	4629      	mov	r1, r5
 8004fd0:	f7fb fb1a 	bl	8000608 <__aeabi_dmul>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    calib_data->t_fine = (int32_t)(var1 + var2);
 8004fdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fe0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004fe4:	f7fb f95a 	bl	800029c <__adddf3>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	4610      	mov	r0, r2
 8004fee:	4619      	mov	r1, r3
 8004ff0:	f7fb fdba 	bl	8000b68 <__aeabi_d2iz>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	625a      	str	r2, [r3, #36]	; 0x24
    temperature = (var1 + var2) / 5120.0;
 8004ffa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ffe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005002:	f7fb f94b 	bl	800029c <__adddf3>
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	4610      	mov	r0, r2
 800500c:	4619      	mov	r1, r3
 800500e:	f04f 0200 	mov.w	r2, #0
 8005012:	4b1b      	ldr	r3, [pc, #108]	; (8005080 <compensate_temperature+0x1a0>)
 8005014:	f7fb fc22 	bl	800085c <__aeabi_ddiv>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    if (temperature < temperature_min)
 8005020:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005024:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005028:	f7fb fd60 	bl	8000aec <__aeabi_dcmplt>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d004      	beq.n	800503c <compensate_temperature+0x15c>
    {
        temperature = temperature_min;
 8005032:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005036:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800503a:	e00c      	b.n	8005056 <compensate_temperature+0x176>
    }
    else if (temperature > temperature_max)
 800503c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005040:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005044:	f7fb fd70 	bl	8000b28 <__aeabi_dcmpgt>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <compensate_temperature+0x176>
    {
        temperature = temperature_max;
 800504e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005052:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    }

    return temperature;
 8005056:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800505a:	ec43 2b17 	vmov	d7, r2, r3
}
 800505e:	eeb0 0a47 	vmov.f32	s0, s14
 8005062:	eef0 0a67 	vmov.f32	s1, s15
 8005066:	3730      	adds	r7, #48	; 0x30
 8005068:	46bd      	mov	sp, r7
 800506a:	bdb0      	pop	{r4, r5, r7, pc}
 800506c:	c0440000 	.word	0xc0440000
 8005070:	40554000 	.word	0x40554000
 8005074:	40d00000 	.word	0x40d00000
 8005078:	40900000 	.word	0x40900000
 800507c:	40c00000 	.word	0x40c00000
 8005080:	40b40000 	.word	0x40b40000
 8005084:	00000000 	.word	0x00000000

08005088 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8005088:	b5b0      	push	{r4, r5, r7, lr}
 800508a:	b08e      	sub	sp, #56	; 0x38
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double var3;
    double pressure;
    double pressure_min = 30000.0;
 8005092:	a3d9      	add	r3, pc, #868	; (adr r3, 80053f8 <compensate_pressure+0x370>)
 8005094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005098:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double pressure_max = 110000.0;
 800509c:	a3d8      	add	r3, pc, #864	; (adr r3, 8005400 <compensate_pressure+0x378>)
 800509e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a2:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7fb fa42 	bl	8000534 <__aeabi_i2d>
 80050b0:	f04f 0200 	mov.w	r2, #0
 80050b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80050b8:	f7fb fbd0 	bl	800085c <__aeabi_ddiv>
 80050bc:	4602      	mov	r2, r0
 80050be:	460b      	mov	r3, r1
 80050c0:	4610      	mov	r0, r2
 80050c2:	4619      	mov	r1, r3
 80050c4:	f04f 0200 	mov.w	r2, #0
 80050c8:	4bc1      	ldr	r3, [pc, #772]	; (80053d0 <compensate_pressure+0x348>)
 80050ca:	f7fb f8e5 	bl	8000298 <__aeabi_dsub>
 80050ce:	4602      	mov	r2, r0
 80050d0:	460b      	mov	r3, r1
 80050d2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double)calib_data->dig_p6) / 32768.0;
 80050d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80050de:	f7fb fa93 	bl	8000608 <__aeabi_dmul>
 80050e2:	4602      	mov	r2, r0
 80050e4:	460b      	mov	r3, r1
 80050e6:	4614      	mov	r4, r2
 80050e8:	461d      	mov	r5, r3
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7fb fa1f 	bl	8000534 <__aeabi_i2d>
 80050f6:	4602      	mov	r2, r0
 80050f8:	460b      	mov	r3, r1
 80050fa:	4620      	mov	r0, r4
 80050fc:	4629      	mov	r1, r5
 80050fe:	f7fb fa83 	bl	8000608 <__aeabi_dmul>
 8005102:	4602      	mov	r2, r0
 8005104:	460b      	mov	r3, r1
 8005106:	4610      	mov	r0, r2
 8005108:	4619      	mov	r1, r3
 800510a:	f04f 0200 	mov.w	r2, #0
 800510e:	4bb1      	ldr	r3, [pc, #708]	; (80053d4 <compensate_pressure+0x34c>)
 8005110:	f7fb fba4 	bl	800085c <__aeabi_ddiv>
 8005114:	4602      	mov	r2, r0
 8005116:	460b      	mov	r3, r1
 8005118:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double)calib_data->dig_p5) * 2.0;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005122:	4618      	mov	r0, r3
 8005124:	f7fb fa06 	bl	8000534 <__aeabi_i2d>
 8005128:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800512c:	f7fb fa6c 	bl	8000608 <__aeabi_dmul>
 8005130:	4602      	mov	r2, r0
 8005132:	460b      	mov	r3, r1
 8005134:	4610      	mov	r0, r2
 8005136:	4619      	mov	r1, r3
 8005138:	4602      	mov	r2, r0
 800513a:	460b      	mov	r3, r1
 800513c:	f7fb f8ae 	bl	800029c <__adddf3>
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005148:	f7fb f8a8 	bl	800029c <__adddf3>
 800514c:	4602      	mov	r2, r0
 800514e:	460b      	mov	r3, r1
 8005150:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double)calib_data->dig_p4) * 65536.0);
 8005154:	f04f 0200 	mov.w	r2, #0
 8005158:	4b9f      	ldr	r3, [pc, #636]	; (80053d8 <compensate_pressure+0x350>)
 800515a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800515e:	f7fb fb7d 	bl	800085c <__aeabi_ddiv>
 8005162:	4602      	mov	r2, r0
 8005164:	460b      	mov	r3, r1
 8005166:	4614      	mov	r4, r2
 8005168:	461d      	mov	r5, r3
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8005170:	4618      	mov	r0, r3
 8005172:	f7fb f9df 	bl	8000534 <__aeabi_i2d>
 8005176:	f04f 0200 	mov.w	r2, #0
 800517a:	4b98      	ldr	r3, [pc, #608]	; (80053dc <compensate_pressure+0x354>)
 800517c:	f7fb fa44 	bl	8000608 <__aeabi_dmul>
 8005180:	4602      	mov	r2, r0
 8005182:	460b      	mov	r3, r1
 8005184:	4620      	mov	r0, r4
 8005186:	4629      	mov	r1, r5
 8005188:	f7fb f888 	bl	800029c <__adddf3>
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var3 = ((double)calib_data->dig_p3) * var1 * var1 / 524288.0;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800519a:	4618      	mov	r0, r3
 800519c:	f7fb f9ca 	bl	8000534 <__aeabi_i2d>
 80051a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051a4:	f7fb fa30 	bl	8000608 <__aeabi_dmul>
 80051a8:	4602      	mov	r2, r0
 80051aa:	460b      	mov	r3, r1
 80051ac:	4610      	mov	r0, r2
 80051ae:	4619      	mov	r1, r3
 80051b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051b4:	f7fb fa28 	bl	8000608 <__aeabi_dmul>
 80051b8:	4602      	mov	r2, r0
 80051ba:	460b      	mov	r3, r1
 80051bc:	4610      	mov	r0, r2
 80051be:	4619      	mov	r1, r3
 80051c0:	f04f 0200 	mov.w	r2, #0
 80051c4:	4b86      	ldr	r3, [pc, #536]	; (80053e0 <compensate_pressure+0x358>)
 80051c6:	f7fb fb49 	bl	800085c <__aeabi_ddiv>
 80051ca:	4602      	mov	r2, r0
 80051cc:	460b      	mov	r3, r1
 80051ce:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var1 = (var3 + ((double)calib_data->dig_p2) * var1) / 524288.0;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80051d8:	4618      	mov	r0, r3
 80051da:	f7fb f9ab 	bl	8000534 <__aeabi_i2d>
 80051de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051e2:	f7fb fa11 	bl	8000608 <__aeabi_dmul>
 80051e6:	4602      	mov	r2, r0
 80051e8:	460b      	mov	r3, r1
 80051ea:	4610      	mov	r0, r2
 80051ec:	4619      	mov	r1, r3
 80051ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051f2:	f7fb f853 	bl	800029c <__adddf3>
 80051f6:	4602      	mov	r2, r0
 80051f8:	460b      	mov	r3, r1
 80051fa:	4610      	mov	r0, r2
 80051fc:	4619      	mov	r1, r3
 80051fe:	f04f 0200 	mov.w	r2, #0
 8005202:	4b77      	ldr	r3, [pc, #476]	; (80053e0 <compensate_pressure+0x358>)
 8005204:	f7fb fb2a 	bl	800085c <__aeabi_ddiv>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_p1);
 8005210:	f04f 0200 	mov.w	r2, #0
 8005214:	4b6f      	ldr	r3, [pc, #444]	; (80053d4 <compensate_pressure+0x34c>)
 8005216:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800521a:	f7fb fb1f 	bl	800085c <__aeabi_ddiv>
 800521e:	4602      	mov	r2, r0
 8005220:	460b      	mov	r3, r1
 8005222:	4610      	mov	r0, r2
 8005224:	4619      	mov	r1, r3
 8005226:	f04f 0200 	mov.w	r2, #0
 800522a:	4b6e      	ldr	r3, [pc, #440]	; (80053e4 <compensate_pressure+0x35c>)
 800522c:	f7fb f836 	bl	800029c <__adddf3>
 8005230:	4602      	mov	r2, r0
 8005232:	460b      	mov	r3, r1
 8005234:	4614      	mov	r4, r2
 8005236:	461d      	mov	r5, r3
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	88db      	ldrh	r3, [r3, #6]
 800523c:	4618      	mov	r0, r3
 800523e:	f7fb f969 	bl	8000514 <__aeabi_ui2d>
 8005242:	4602      	mov	r2, r0
 8005244:	460b      	mov	r3, r1
 8005246:	4620      	mov	r0, r4
 8005248:	4629      	mov	r1, r5
 800524a:	f7fb f9dd 	bl	8000608 <__aeabi_dmul>
 800524e:	4602      	mov	r2, r0
 8005250:	460b      	mov	r3, r1
 8005252:	e9c7 2306 	strd	r2, r3, [r7, #24]

    /* avoid exception caused by division by zero */
    if (var1 > (0.0))
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	f04f 0300 	mov.w	r3, #0
 800525e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005262:	f7fb fc61 	bl	8000b28 <__aeabi_dcmpgt>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 80cd 	beq.w	8005408 <compensate_pressure+0x380>
    {
        pressure = 1048576.0 - (double) uncomp_data->pressure;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4618      	mov	r0, r3
 8005274:	f7fb f94e 	bl	8000514 <__aeabi_ui2d>
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	f04f 0000 	mov.w	r0, #0
 8005280:	4959      	ldr	r1, [pc, #356]	; (80053e8 <compensate_pressure+0x360>)
 8005282:	f7fb f809 	bl	8000298 <__aeabi_dsub>
 8005286:	4602      	mov	r2, r0
 8005288:	460b      	mov	r3, r1
 800528a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 800528e:	f04f 0200 	mov.w	r2, #0
 8005292:	4b56      	ldr	r3, [pc, #344]	; (80053ec <compensate_pressure+0x364>)
 8005294:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005298:	f7fb fae0 	bl	800085c <__aeabi_ddiv>
 800529c:	4602      	mov	r2, r0
 800529e:	460b      	mov	r3, r1
 80052a0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80052a4:	f7fa fff8 	bl	8000298 <__aeabi_dsub>
 80052a8:	4602      	mov	r2, r0
 80052aa:	460b      	mov	r3, r1
 80052ac:	4610      	mov	r0, r2
 80052ae:	4619      	mov	r1, r3
 80052b0:	a345      	add	r3, pc, #276	; (adr r3, 80053c8 <compensate_pressure+0x340>)
 80052b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b6:	f7fb f9a7 	bl	8000608 <__aeabi_dmul>
 80052ba:	4602      	mov	r2, r0
 80052bc:	460b      	mov	r3, r1
 80052be:	4610      	mov	r0, r2
 80052c0:	4619      	mov	r1, r3
 80052c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052c6:	f7fb fac9 	bl	800085c <__aeabi_ddiv>
 80052ca:	4602      	mov	r2, r0
 80052cc:	460b      	mov	r3, r1
 80052ce:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        var1 = ((double)calib_data->dig_p9) * pressure * pressure / 2147483648.0;
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80052d8:	4618      	mov	r0, r3
 80052da:	f7fb f92b 	bl	8000534 <__aeabi_i2d>
 80052de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80052e2:	f7fb f991 	bl	8000608 <__aeabi_dmul>
 80052e6:	4602      	mov	r2, r0
 80052e8:	460b      	mov	r3, r1
 80052ea:	4610      	mov	r0, r2
 80052ec:	4619      	mov	r1, r3
 80052ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80052f2:	f7fb f989 	bl	8000608 <__aeabi_dmul>
 80052f6:	4602      	mov	r2, r0
 80052f8:	460b      	mov	r3, r1
 80052fa:	4610      	mov	r0, r2
 80052fc:	4619      	mov	r1, r3
 80052fe:	f04f 0200 	mov.w	r2, #0
 8005302:	4b3b      	ldr	r3, [pc, #236]	; (80053f0 <compensate_pressure+0x368>)
 8005304:	f7fb faaa 	bl	800085c <__aeabi_ddiv>
 8005308:	4602      	mov	r2, r0
 800530a:	460b      	mov	r3, r1
 800530c:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)calib_data->dig_p8) / 32768.0;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8005316:	4618      	mov	r0, r3
 8005318:	f7fb f90c 	bl	8000534 <__aeabi_i2d>
 800531c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005320:	f7fb f972 	bl	8000608 <__aeabi_dmul>
 8005324:	4602      	mov	r2, r0
 8005326:	460b      	mov	r3, r1
 8005328:	4610      	mov	r0, r2
 800532a:	4619      	mov	r1, r3
 800532c:	f04f 0200 	mov.w	r2, #0
 8005330:	4b28      	ldr	r3, [pc, #160]	; (80053d4 <compensate_pressure+0x34c>)
 8005332:	f7fb fa93 	bl	800085c <__aeabi_ddiv>
 8005336:	4602      	mov	r2, r0
 8005338:	460b      	mov	r3, r1
 800533a:	e9c7 2304 	strd	r2, r3, [r7, #16]
        pressure = pressure + (var1 + var2 + ((double)calib_data->dig_p7)) / 16.0;
 800533e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005342:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005346:	f7fa ffa9 	bl	800029c <__adddf3>
 800534a:	4602      	mov	r2, r0
 800534c:	460b      	mov	r3, r1
 800534e:	4614      	mov	r4, r2
 8005350:	461d      	mov	r5, r3
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005358:	4618      	mov	r0, r3
 800535a:	f7fb f8eb 	bl	8000534 <__aeabi_i2d>
 800535e:	4602      	mov	r2, r0
 8005360:	460b      	mov	r3, r1
 8005362:	4620      	mov	r0, r4
 8005364:	4629      	mov	r1, r5
 8005366:	f7fa ff99 	bl	800029c <__adddf3>
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	4610      	mov	r0, r2
 8005370:	4619      	mov	r1, r3
 8005372:	f04f 0200 	mov.w	r2, #0
 8005376:	4b1f      	ldr	r3, [pc, #124]	; (80053f4 <compensate_pressure+0x36c>)
 8005378:	f7fb fa70 	bl	800085c <__aeabi_ddiv>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005384:	f7fa ff8a 	bl	800029c <__adddf3>
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        if (pressure < pressure_min)
 8005390:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005394:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005398:	f7fb fba8 	bl	8000aec <__aeabi_dcmplt>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d004      	beq.n	80053ac <compensate_pressure+0x324>
        {
            pressure = pressure_min;
 80053a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053a6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80053aa:	e031      	b.n	8005410 <compensate_pressure+0x388>
        }
        else if (pressure > pressure_max)
 80053ac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053b0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80053b4:	f7fb fbb8 	bl	8000b28 <__aeabi_dcmpgt>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d028      	beq.n	8005410 <compensate_pressure+0x388>
        {
            pressure = pressure_max;
 80053be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053c2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80053c6:	e023      	b.n	8005410 <compensate_pressure+0x388>
 80053c8:	00000000 	.word	0x00000000
 80053cc:	40b86a00 	.word	0x40b86a00
 80053d0:	40ef4000 	.word	0x40ef4000
 80053d4:	40e00000 	.word	0x40e00000
 80053d8:	40100000 	.word	0x40100000
 80053dc:	40f00000 	.word	0x40f00000
 80053e0:	41200000 	.word	0x41200000
 80053e4:	3ff00000 	.word	0x3ff00000
 80053e8:	41300000 	.word	0x41300000
 80053ec:	40b00000 	.word	0x40b00000
 80053f0:	41e00000 	.word	0x41e00000
 80053f4:	40300000 	.word	0x40300000
 80053f8:	00000000 	.word	0x00000000
 80053fc:	40dd4c00 	.word	0x40dd4c00
 8005400:	00000000 	.word	0x00000000
 8005404:	40fadb00 	.word	0x40fadb00
        }
    }
    else /* Invalid case */
    {
        pressure = pressure_min;
 8005408:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800540c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    }

    return pressure;
 8005410:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005414:	ec43 2b17 	vmov	d7, r2, r3
}
 8005418:	eeb0 0a47 	vmov.f32	s0, s14
 800541c:	eef0 0a67 	vmov.f32	s1, s15
 8005420:	3738      	adds	r7, #56	; 0x38
 8005422:	46bd      	mov	sp, r7
 8005424:	bdb0      	pop	{r4, r5, r7, pc}
 8005426:	bf00      	nop

08005428 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8005428:	b5b0      	push	{r4, r5, r7, lr}
 800542a:	b094      	sub	sp, #80	; 0x50
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
    double humidity;
    double humidity_min = 0.0;
 8005432:	f04f 0200 	mov.w	r2, #0
 8005436:	f04f 0300 	mov.w	r3, #0
 800543a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    double humidity_max = 100.0;
 800543e:	f04f 0200 	mov.w	r2, #0
 8005442:	4b81      	ldr	r3, [pc, #516]	; (8005648 <compensate_humidity+0x220>)
 8005444:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double var3;
    double var4;
    double var5;
    double var6;

    var1 = ((double)calib_data->t_fine) - 76800.0;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	4618      	mov	r0, r3
 800544e:	f7fb f871 	bl	8000534 <__aeabi_i2d>
 8005452:	f04f 0200 	mov.w	r2, #0
 8005456:	4b7d      	ldr	r3, [pc, #500]	; (800564c <compensate_humidity+0x224>)
 8005458:	f7fa ff1e 	bl	8000298 <__aeabi_dsub>
 800545c:	4602      	mov	r2, r0
 800545e:	460b      	mov	r3, r1
 8005460:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    var2 = (((double)calib_data->dig_h4) * 64.0 + (((double)calib_data->dig_h5) / 16384.0) * var1);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800546a:	4618      	mov	r0, r3
 800546c:	f7fb f862 	bl	8000534 <__aeabi_i2d>
 8005470:	f04f 0200 	mov.w	r2, #0
 8005474:	4b76      	ldr	r3, [pc, #472]	; (8005650 <compensate_humidity+0x228>)
 8005476:	f7fb f8c7 	bl	8000608 <__aeabi_dmul>
 800547a:	4602      	mov	r2, r0
 800547c:	460b      	mov	r3, r1
 800547e:	4614      	mov	r4, r2
 8005480:	461d      	mov	r5, r3
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8005488:	4618      	mov	r0, r3
 800548a:	f7fb f853 	bl	8000534 <__aeabi_i2d>
 800548e:	f04f 0200 	mov.w	r2, #0
 8005492:	4b70      	ldr	r3, [pc, #448]	; (8005654 <compensate_humidity+0x22c>)
 8005494:	f7fb f9e2 	bl	800085c <__aeabi_ddiv>
 8005498:	4602      	mov	r2, r0
 800549a:	460b      	mov	r3, r1
 800549c:	4610      	mov	r0, r2
 800549e:	4619      	mov	r1, r3
 80054a0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80054a4:	f7fb f8b0 	bl	8000608 <__aeabi_dmul>
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	4620      	mov	r0, r4
 80054ae:	4629      	mov	r1, r5
 80054b0:	f7fa fef4 	bl	800029c <__adddf3>
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    var3 = uncomp_data->humidity - var2;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fb f827 	bl	8000514 <__aeabi_ui2d>
 80054c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054ca:	f7fa fee5 	bl	8000298 <__aeabi_dsub>
 80054ce:	4602      	mov	r2, r0
 80054d0:	460b      	mov	r3, r1
 80054d2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    var4 = ((double)calib_data->dig_h2) / 65536.0;
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80054dc:	4618      	mov	r0, r3
 80054de:	f7fb f829 	bl	8000534 <__aeabi_i2d>
 80054e2:	f04f 0200 	mov.w	r2, #0
 80054e6:	4b5c      	ldr	r3, [pc, #368]	; (8005658 <compensate_humidity+0x230>)
 80054e8:	f7fb f9b8 	bl	800085c <__aeabi_ddiv>
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var5 = (1.0 + (((double)calib_data->dig_h3) / 67108864.0) * var1);
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	7f1b      	ldrb	r3, [r3, #28]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7fb f80b 	bl	8000514 <__aeabi_ui2d>
 80054fe:	f04f 0200 	mov.w	r2, #0
 8005502:	4b56      	ldr	r3, [pc, #344]	; (800565c <compensate_humidity+0x234>)
 8005504:	f7fb f9aa 	bl	800085c <__aeabi_ddiv>
 8005508:	4602      	mov	r2, r0
 800550a:	460b      	mov	r3, r1
 800550c:	4610      	mov	r0, r2
 800550e:	4619      	mov	r1, r3
 8005510:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005514:	f7fb f878 	bl	8000608 <__aeabi_dmul>
 8005518:	4602      	mov	r2, r0
 800551a:	460b      	mov	r3, r1
 800551c:	4610      	mov	r0, r2
 800551e:	4619      	mov	r1, r3
 8005520:	f04f 0200 	mov.w	r2, #0
 8005524:	4b4e      	ldr	r3, [pc, #312]	; (8005660 <compensate_humidity+0x238>)
 8005526:	f7fa feb9 	bl	800029c <__adddf3>
 800552a:	4602      	mov	r2, r0
 800552c:	460b      	mov	r3, r1
 800552e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var6 = 1.0 + (((double)calib_data->dig_h6) / 67108864.0) * var1 * var5;
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8005538:	4618      	mov	r0, r3
 800553a:	f7fa fffb 	bl	8000534 <__aeabi_i2d>
 800553e:	f04f 0200 	mov.w	r2, #0
 8005542:	4b46      	ldr	r3, [pc, #280]	; (800565c <compensate_humidity+0x234>)
 8005544:	f7fb f98a 	bl	800085c <__aeabi_ddiv>
 8005548:	4602      	mov	r2, r0
 800554a:	460b      	mov	r3, r1
 800554c:	4610      	mov	r0, r2
 800554e:	4619      	mov	r1, r3
 8005550:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005554:	f7fb f858 	bl	8000608 <__aeabi_dmul>
 8005558:	4602      	mov	r2, r0
 800555a:	460b      	mov	r3, r1
 800555c:	4610      	mov	r0, r2
 800555e:	4619      	mov	r1, r3
 8005560:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005564:	f7fb f850 	bl	8000608 <__aeabi_dmul>
 8005568:	4602      	mov	r2, r0
 800556a:	460b      	mov	r3, r1
 800556c:	4610      	mov	r0, r2
 800556e:	4619      	mov	r1, r3
 8005570:	f04f 0200 	mov.w	r2, #0
 8005574:	4b3a      	ldr	r3, [pc, #232]	; (8005660 <compensate_humidity+0x238>)
 8005576:	f7fa fe91 	bl	800029c <__adddf3>
 800557a:	4602      	mov	r2, r0
 800557c:	460b      	mov	r3, r1
 800557e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var6 = var3 * var4 * (var5 * var6);
 8005582:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005586:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800558a:	f7fb f83d 	bl	8000608 <__aeabi_dmul>
 800558e:	4602      	mov	r2, r0
 8005590:	460b      	mov	r3, r1
 8005592:	4614      	mov	r4, r2
 8005594:	461d      	mov	r5, r3
 8005596:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800559a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800559e:	f7fb f833 	bl	8000608 <__aeabi_dmul>
 80055a2:	4602      	mov	r2, r0
 80055a4:	460b      	mov	r3, r1
 80055a6:	4620      	mov	r0, r4
 80055a8:	4629      	mov	r1, r5
 80055aa:	f7fb f82d 	bl	8000608 <__aeabi_dmul>
 80055ae:	4602      	mov	r2, r0
 80055b0:	460b      	mov	r3, r1
 80055b2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    humidity = var6 * (1.0 - ((double)calib_data->dig_h1) * var6 / 524288.0);
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	7e1b      	ldrb	r3, [r3, #24]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7fa ffaa 	bl	8000514 <__aeabi_ui2d>
 80055c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055c4:	f7fb f820 	bl	8000608 <__aeabi_dmul>
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	4610      	mov	r0, r2
 80055ce:	4619      	mov	r1, r3
 80055d0:	f04f 0200 	mov.w	r2, #0
 80055d4:	4b23      	ldr	r3, [pc, #140]	; (8005664 <compensate_humidity+0x23c>)
 80055d6:	f7fb f941 	bl	800085c <__aeabi_ddiv>
 80055da:	4602      	mov	r2, r0
 80055dc:	460b      	mov	r3, r1
 80055de:	f04f 0000 	mov.w	r0, #0
 80055e2:	491f      	ldr	r1, [pc, #124]	; (8005660 <compensate_humidity+0x238>)
 80055e4:	f7fa fe58 	bl	8000298 <__aeabi_dsub>
 80055e8:	4602      	mov	r2, r0
 80055ea:	460b      	mov	r3, r1
 80055ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055f0:	f7fb f80a 	bl	8000608 <__aeabi_dmul>
 80055f4:	4602      	mov	r2, r0
 80055f6:	460b      	mov	r3, r1
 80055f8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    if (humidity > humidity_max)
 80055fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005600:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005604:	f7fb fa90 	bl	8000b28 <__aeabi_dcmpgt>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d004      	beq.n	8005618 <compensate_humidity+0x1f0>
    {
        humidity = humidity_max;
 800560e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005612:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8005616:	e00c      	b.n	8005632 <compensate_humidity+0x20a>
    }
    else if (humidity < humidity_min)
 8005618:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800561c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005620:	f7fb fa64 	bl	8000aec <__aeabi_dcmplt>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d003      	beq.n	8005632 <compensate_humidity+0x20a>
    {
        humidity = humidity_min;
 800562a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800562e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    }

    return humidity;
 8005632:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005636:	ec43 2b17 	vmov	d7, r2, r3
}
 800563a:	eeb0 0a47 	vmov.f32	s0, s14
 800563e:	eef0 0a67 	vmov.f32	s1, s15
 8005642:	3750      	adds	r7, #80	; 0x50
 8005644:	46bd      	mov	sp, r7
 8005646:	bdb0      	pop	{r4, r5, r7, pc}
 8005648:	40590000 	.word	0x40590000
 800564c:	40f2c000 	.word	0x40f2c000
 8005650:	40500000 	.word	0x40500000
 8005654:	40d00000 	.word	0x40d00000
 8005658:	40f00000 	.word	0x40f00000
 800565c:	41900000 	.word	0x41900000
 8005660:	3ff00000 	.word	0x3ff00000
 8005664:	41200000 	.word	0x41200000

08005668 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b08a      	sub	sp, #40	; 0x28
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8005670:	2388      	movs	r3, #136	; 0x88
 8005672:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 8005676:	2300      	movs	r3, #0
 8005678:	60fb      	str	r3, [r7, #12]
 800567a:	f107 0310 	add.w	r3, r7, #16
 800567e:	2200      	movs	r2, #0
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	605a      	str	r2, [r3, #4]
 8005684:	609a      	str	r2, [r3, #8]
 8005686:	60da      	str	r2, [r3, #12]
 8005688:	611a      	str	r2, [r3, #16]
 800568a:	829a      	strh	r2, [r3, #20]

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 800568c:	f107 010c 	add.w	r1, r7, #12
 8005690:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	221a      	movs	r2, #26
 8005698:	f7fe ff97 	bl	80045ca <bme280_get_regs>
 800569c:	4603      	mov	r3, r0
 800569e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BME280_OK)
 80056a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d11d      	bne.n	80056e6 <get_calib_data+0x7e>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 80056aa:	f107 030c 	add.w	r3, r7, #12
 80056ae:	6879      	ldr	r1, [r7, #4]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 f84a 	bl	800574a <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 80056b6:	23e1      	movs	r3, #225	; 0xe1
 80056b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 80056bc:	f107 010c 	add.w	r1, r7, #12
 80056c0:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2207      	movs	r2, #7
 80056c8:	f7fe ff7f 	bl	80045ca <bme280_get_regs>
 80056cc:	4603      	mov	r3, r0
 80056ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 80056d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d105      	bne.n	80056e6 <get_calib_data+0x7e>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 80056da:	f107 030c 	add.w	r3, r7, #12
 80056de:	6879      	ldr	r1, [r7, #4]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 f8e1 	bl	80058a8 <parse_humidity_calib_data>
        }
    }

    return rslt;
 80056e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3728      	adds	r7, #40	; 0x28
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b087      	sub	sp, #28
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	60f8      	str	r0, [r7, #12]
 80056fa:	60b9      	str	r1, [r7, #8]
 80056fc:	607a      	str	r2, [r7, #4]
 80056fe:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8005700:	2301      	movs	r3, #1
 8005702:	75fb      	strb	r3, [r7, #23]
 8005704:	e016      	b.n	8005734 <interleave_reg_addr+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8005706:	7dfb      	ldrb	r3, [r7, #23]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	441a      	add	r2, r3
 800570c:	7dfb      	ldrb	r3, [r7, #23]
 800570e:	005b      	lsls	r3, r3, #1
 8005710:	3b01      	subs	r3, #1
 8005712:	68b9      	ldr	r1, [r7, #8]
 8005714:	440b      	add	r3, r1
 8005716:	7812      	ldrb	r2, [r2, #0]
 8005718:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 800571a:	7dfb      	ldrb	r3, [r7, #23]
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	441a      	add	r2, r3
 8005720:	7dfb      	ldrb	r3, [r7, #23]
 8005722:	005b      	lsls	r3, r3, #1
 8005724:	4619      	mov	r1, r3
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	440b      	add	r3, r1
 800572a:	7812      	ldrb	r2, [r2, #0]
 800572c:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800572e:	7dfb      	ldrb	r3, [r7, #23]
 8005730:	3301      	adds	r3, #1
 8005732:	75fb      	strb	r3, [r7, #23]
 8005734:	7dfa      	ldrb	r2, [r7, #23]
 8005736:	78fb      	ldrb	r3, [r7, #3]
 8005738:	429a      	cmp	r2, r3
 800573a:	d3e4      	bcc.n	8005706 <interleave_reg_addr+0x14>
    }
}
 800573c:	bf00      	nop
 800573e:	bf00      	nop
 8005740:	371c      	adds	r7, #28
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800574a:	b480      	push	{r7}
 800574c:	b085      	sub	sp, #20
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	3310      	adds	r3, #16
 8005758:	60fb      	str	r3, [r7, #12]

    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	3301      	adds	r3, #1
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	021b      	lsls	r3, r3, #8
 8005762:	b21a      	sxth	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	b21b      	sxth	r3, r3
 800576a:	4313      	orrs	r3, r2
 800576c:	b21b      	sxth	r3, r3
 800576e:	b29a      	uxth	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	801a      	strh	r2, [r3, #0]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	3303      	adds	r3, #3
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	021b      	lsls	r3, r3, #8
 800577c:	b21a      	sxth	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	3302      	adds	r3, #2
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	b21b      	sxth	r3, r3
 8005786:	4313      	orrs	r3, r2
 8005788:	b21a      	sxth	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	805a      	strh	r2, [r3, #2]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	3305      	adds	r3, #5
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	021b      	lsls	r3, r3, #8
 8005796:	b21a      	sxth	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	3304      	adds	r3, #4
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	b21b      	sxth	r3, r3
 80057a0:	4313      	orrs	r3, r2
 80057a2:	b21a      	sxth	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	809a      	strh	r2, [r3, #4]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	3307      	adds	r3, #7
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	021b      	lsls	r3, r3, #8
 80057b0:	b21a      	sxth	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	3306      	adds	r3, #6
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	b21b      	sxth	r3, r3
 80057ba:	4313      	orrs	r3, r2
 80057bc:	b21b      	sxth	r3, r3
 80057be:	b29a      	uxth	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	80da      	strh	r2, [r3, #6]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	3309      	adds	r3, #9
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	021b      	lsls	r3, r3, #8
 80057cc:	b21a      	sxth	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	3308      	adds	r3, #8
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	b21b      	sxth	r3, r3
 80057d6:	4313      	orrs	r3, r2
 80057d8:	b21a      	sxth	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	811a      	strh	r2, [r3, #8]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	330b      	adds	r3, #11
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	021b      	lsls	r3, r3, #8
 80057e6:	b21a      	sxth	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	330a      	adds	r3, #10
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	b21b      	sxth	r3, r3
 80057f0:	4313      	orrs	r3, r2
 80057f2:	b21a      	sxth	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	815a      	strh	r2, [r3, #10]
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	330d      	adds	r3, #13
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	021b      	lsls	r3, r3, #8
 8005800:	b21a      	sxth	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	330c      	adds	r3, #12
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	b21b      	sxth	r3, r3
 800580a:	4313      	orrs	r3, r2
 800580c:	b21a      	sxth	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	819a      	strh	r2, [r3, #12]
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	330f      	adds	r3, #15
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	021b      	lsls	r3, r3, #8
 800581a:	b21a      	sxth	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	330e      	adds	r3, #14
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	b21b      	sxth	r3, r3
 8005824:	4313      	orrs	r3, r2
 8005826:	b21a      	sxth	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	81da      	strh	r2, [r3, #14]
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	3311      	adds	r3, #17
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	021b      	lsls	r3, r3, #8
 8005834:	b21a      	sxth	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	3310      	adds	r3, #16
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	b21b      	sxth	r3, r3
 800583e:	4313      	orrs	r3, r2
 8005840:	b21a      	sxth	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	821a      	strh	r2, [r3, #16]
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	3313      	adds	r3, #19
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	021b      	lsls	r3, r3, #8
 800584e:	b21a      	sxth	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	3312      	adds	r3, #18
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	b21b      	sxth	r3, r3
 8005858:	4313      	orrs	r3, r2
 800585a:	b21a      	sxth	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	825a      	strh	r2, [r3, #18]
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3315      	adds	r3, #21
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	021b      	lsls	r3, r3, #8
 8005868:	b21a      	sxth	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	3314      	adds	r3, #20
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	b21b      	sxth	r3, r3
 8005872:	4313      	orrs	r3, r2
 8005874:	b21a      	sxth	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	829a      	strh	r2, [r3, #20]
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	3317      	adds	r3, #23
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	021b      	lsls	r3, r3, #8
 8005882:	b21a      	sxth	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	3316      	adds	r3, #22
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	b21b      	sxth	r3, r3
 800588c:	4313      	orrs	r3, r2
 800588e:	b21a      	sxth	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	82da      	strh	r2, [r3, #22]
    calib_data->dig_h1 = reg_data[25];
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	7e5a      	ldrb	r2, [r3, #25]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	761a      	strb	r2, [r3, #24]
}
 800589c:	bf00      	nop
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b087      	sub	sp, #28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	3310      	adds	r3, #16
 80058b6:	617b      	str	r3, [r7, #20]
    int16_t dig_h4_lsb;
    int16_t dig_h4_msb;
    int16_t dig_h5_lsb;
    int16_t dig_h5_msb;

    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	3301      	adds	r3, #1
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	021b      	lsls	r3, r3, #8
 80058c0:	b21a      	sxth	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	b21b      	sxth	r3, r3
 80058c8:	4313      	orrs	r3, r2
 80058ca:	b21a      	sxth	r2, r3
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	835a      	strh	r2, [r3, #26]
    calib_data->dig_h3 = reg_data[2];
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	789a      	ldrb	r2, [r3, #2]
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	771a      	strb	r2, [r3, #28]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	3303      	adds	r3, #3
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	b25b      	sxtb	r3, r3
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	011b      	lsls	r3, r3, #4
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	827b      	strh	r3, [r7, #18]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	3304      	adds	r3, #4
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	b21b      	sxth	r3, r3
 80058f0:	f003 030f 	and.w	r3, r3, #15
 80058f4:	823b      	strh	r3, [r7, #16]
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 80058f6:	8a7a      	ldrh	r2, [r7, #18]
 80058f8:	8a3b      	ldrh	r3, [r7, #16]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	b21a      	sxth	r2, r3
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	83da      	strh	r2, [r3, #30]
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	3305      	adds	r3, #5
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	b25b      	sxtb	r3, r3
 800590a:	b29b      	uxth	r3, r3
 800590c:	011b      	lsls	r3, r3, #4
 800590e:	b29b      	uxth	r3, r3
 8005910:	81fb      	strh	r3, [r7, #14]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	3304      	adds	r3, #4
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	091b      	lsrs	r3, r3, #4
 800591a:	b2db      	uxtb	r3, r3
 800591c:	81bb      	strh	r3, [r7, #12]
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 800591e:	89fa      	ldrh	r2, [r7, #14]
 8005920:	89bb      	ldrh	r3, [r7, #12]
 8005922:	4313      	orrs	r3, r2
 8005924:	b21a      	sxth	r2, r3
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	841a      	strh	r2, [r3, #32]
    calib_data->dig_h6 = (int8_t)reg_data[6];
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	3306      	adds	r3, #6
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	b25a      	sxtb	r2, r3
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8005938:	bf00      	nop
 800593a:	371c      	adds	r7, #28
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	4603      	mov	r3, r0
 800594c:	460a      	mov	r2, r1
 800594e:	71fb      	strb	r3, [r7, #7]
 8005950:	4613      	mov	r3, r2
 8005952:	71bb      	strb	r3, [r7, #6]
    uint8_t settings_changed = FALSE;
 8005954:	2300      	movs	r3, #0
 8005956:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 8005958:	79fa      	ldrb	r2, [r7, #7]
 800595a:	79bb      	ldrb	r3, [r7, #6]
 800595c:	4013      	ands	r3, r2
 800595e:	b2db      	uxtb	r3, r3
 8005960:	2b00      	cmp	r3, #0
 8005962:	d002      	beq.n	800596a <are_settings_changed+0x26>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8005964:	2301      	movs	r3, #1
 8005966:	73fb      	strb	r3, [r7, #15]
 8005968:	e001      	b.n	800596e <are_settings_changed+0x2a>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 800596a:	2300      	movs	r3, #0
 800596c:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 800596e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005970:	4618      	mov	r0, r3
 8005972:	3714      	adds	r7, #20
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00b      	beq.n	80059a2 <null_ptr_check+0x26>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d007      	beq.n	80059a2 <null_ptr_check+0x26>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <null_ptr_check+0x26>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d102      	bne.n	80059a8 <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 80059a2:	23ff      	movs	r3, #255	; 0xff
 80059a4:	73fb      	strb	r3, [r7, #15]
 80059a6:	e001      	b.n	80059ac <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 80059a8:	2300      	movs	r3, #0
 80059aa:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80059ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3714      	adds	r7, #20
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <_dev_by_id>:
	}
};


static its_bme280_t * _dev_by_id(its_bme280_id_t id)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	4603      	mov	r3, r0
 80059c4:	71fb      	strb	r3, [r7, #7]
	assert(id >= 0 && id < 1);
 80059c6:	79fb      	ldrb	r3, [r7, #7]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d005      	beq.n	80059d8 <_dev_by_id+0x1c>
 80059cc:	4b09      	ldr	r3, [pc, #36]	; (80059f4 <_dev_by_id+0x38>)
 80059ce:	4a0a      	ldr	r2, [pc, #40]	; (80059f8 <_dev_by_id+0x3c>)
 80059d0:	2143      	movs	r1, #67	; 0x43
 80059d2:	480a      	ldr	r0, [pc, #40]	; (80059fc <_dev_by_id+0x40>)
 80059d4:	f00a f96c 	bl	800fcb0 <__assert_func>
	its_bme280_t * const dev = &_devices[id];
 80059d8:	79fa      	ldrb	r2, [r7, #7]
 80059da:	4613      	mov	r3, r2
 80059dc:	00db      	lsls	r3, r3, #3
 80059de:	4413      	add	r3, r2
 80059e0:	00db      	lsls	r3, r3, #3
 80059e2:	4a07      	ldr	r2, [pc, #28]	; (8005a00 <_dev_by_id+0x44>)
 80059e4:	4413      	add	r3, r2
 80059e6:	60fb      	str	r3, [r7, #12]

	return dev;
 80059e8:	68fb      	ldr	r3, [r7, #12]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	08015d28 	.word	0x08015d28
 80059f8:	08015dc0 	.word	0x08015dc0
 80059fc:	08015d3c 	.word	0x08015d3c
 8005a00:	20000008 	.word	0x20000008

08005a04 <_i2c_read>:


static int8_t _i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b088      	sub	sp, #32
 8005a08:	af04      	add	r7, sp, #16
 8005a0a:	603a      	str	r2, [r7, #0]
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	4603      	mov	r3, r0
 8005a10:	71fb      	strb	r3, [r7, #7]
 8005a12:	460b      	mov	r3, r1
 8005a14:	71bb      	strb	r3, [r7, #6]
 8005a16:	4613      	mov	r3, r2
 8005a18:	80bb      	strh	r3, [r7, #4]
	its_bme280_t * dev = _dev_by_id(id);
 8005a1a:	79fb      	ldrb	r3, [r7, #7]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7ff ffcd 	bl	80059bc <_dev_by_id>
 8005a22:	60f8      	str	r0, [r7, #12]

	HAL_StatusTypeDef hrc = HAL_I2C_Mem_Read(
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6818      	ldr	r0, [r3, #0]
			dev->bus,
			dev->addr << 1,
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	791b      	ldrb	r3, [r3, #4]
 8005a2c:	b29b      	uxth	r3, r3
	HAL_StatusTypeDef hrc = HAL_I2C_Mem_Read(
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	b299      	uxth	r1, r3
 8005a32:	79bb      	ldrb	r3, [r7, #6]
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005a3a:	9302      	str	r3, [sp, #8]
 8005a3c:	88bb      	ldrh	r3, [r7, #4]
 8005a3e:	9301      	str	r3, [sp, #4]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	2301      	movs	r3, #1
 8005a46:	f001 fc97 	bl	8007378 <HAL_I2C_Mem_Read>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	72fb      	strb	r3, [r7, #11]
			data,
			len,
			ITS_BME_HAL_TIMEOUT
	);

	if (hrc != HAL_OK)
 8005a4e:	7afb      	ldrb	r3, [r7, #11]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d006      	beq.n	8005a62 <_i2c_read+0x5e>
	{
		I2C_ClearBusyFlagErratum(&hi2c1, 120);
 8005a54:	2178      	movs	r1, #120	; 0x78
 8005a56:	4806      	ldr	r0, [pc, #24]	; (8005a70 <_i2c_read+0x6c>)
 8005a58:	f000 f938 	bl	8005ccc <I2C_ClearBusyFlagErratum>
		return (int8_t)hrc;
 8005a5c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005a60:	e001      	b.n	8005a66 <_i2c_read+0x62>


	}

	return (int8_t)hrc;
 8005a62:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	2000279c 	.word	0x2000279c

08005a74 <_i2c_write>:


static int8_t _i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b088      	sub	sp, #32
 8005a78:	af04      	add	r7, sp, #16
 8005a7a:	603a      	str	r2, [r7, #0]
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	4603      	mov	r3, r0
 8005a80:	71fb      	strb	r3, [r7, #7]
 8005a82:	460b      	mov	r3, r1
 8005a84:	71bb      	strb	r3, [r7, #6]
 8005a86:	4613      	mov	r3, r2
 8005a88:	80bb      	strh	r3, [r7, #4]
	its_bme280_t * dev = _dev_by_id(id);
 8005a8a:	79fb      	ldrb	r3, [r7, #7]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7ff ff95 	bl	80059bc <_dev_by_id>
 8005a92:	60f8      	str	r0, [r7, #12]

	HAL_StatusTypeDef hrc = HAL_I2C_Mem_Write(
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6818      	ldr	r0, [r3, #0]
			dev->bus,
			dev->addr << 1,
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	791b      	ldrb	r3, [r3, #4]
 8005a9c:	b29b      	uxth	r3, r3
	HAL_StatusTypeDef hrc = HAL_I2C_Mem_Write(
 8005a9e:	005b      	lsls	r3, r3, #1
 8005aa0:	b299      	uxth	r1, r3
 8005aa2:	79bb      	ldrb	r3, [r7, #6]
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005aaa:	9302      	str	r3, [sp, #8]
 8005aac:	88bb      	ldrh	r3, [r7, #4]
 8005aae:	9301      	str	r3, [sp, #4]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	f001 fb65 	bl	8007184 <HAL_I2C_Mem_Write>
 8005aba:	4603      	mov	r3, r0
 8005abc:	72fb      	strb	r3, [r7, #11]
			1,
			data,
			len,
			ITS_BME_HAL_TIMEOUT
	);
	if (hrc == HAL_BUSY)
 8005abe:	7afb      	ldrb	r3, [r7, #11]
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d106      	bne.n	8005ad2 <_i2c_write+0x5e>
	{
		I2C_ClearBusyFlagErratum(&hi2c1, 120);
 8005ac4:	2178      	movs	r1, #120	; 0x78
 8005ac6:	4806      	ldr	r0, [pc, #24]	; (8005ae0 <_i2c_write+0x6c>)
 8005ac8:	f000 f900 	bl	8005ccc <I2C_ClearBusyFlagErratum>
		return (int8_t)hrc;
 8005acc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005ad0:	e001      	b.n	8005ad6 <_i2c_write+0x62>

	}
	return (int8_t)hrc;
 8005ad2:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	2000279c 	.word	0x2000279c

08005ae4 <_delay_ms>:



static void _delay_ms(uint32_t ms)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 fa13 	bl	8005f18 <HAL_Delay>
}
 8005af2:	bf00      	nop
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <its_bme280_init>:


int its_bme280_init(its_bme280_id_t id)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b084      	sub	sp, #16
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	4603      	mov	r3, r0
 8005b02:	71fb      	strb	r3, [r7, #7]
	its_bme280_t * const dev = _dev_by_id(id);
 8005b04:	79fb      	ldrb	r3, [r7, #7]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7ff ff58 	bl	80059bc <_dev_by_id>
 8005b0c:	60f8      	str	r0, [r7, #12]

	int rc = bme280_soft_reset(&dev->driver);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	3308      	adds	r3, #8
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7fe feae 	bl	8004874 <bme280_soft_reset>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	60bb      	str	r3, [r7, #8]
	if (0 != rc)
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <its_bme280_init+0x2c>
		return rc;
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	e029      	b.n	8005b7a <its_bme280_init+0x80>

	rc = bme280_init(&dev->driver);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	3308      	adds	r3, #8
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fe fd05 	bl	800453a <bme280_init>
 8005b30:	4603      	mov	r3, r0
 8005b32:	60bb      	str	r3, [r7, #8]
	if (0 != rc)
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d001      	beq.n	8005b3e <its_bme280_init+0x44>
		return rc;
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	e01d      	b.n	8005b7a <its_bme280_init+0x80>

	rc = bme280_set_sensor_settings(BME280_ALL_SETTINGS_SEL, &dev->driver);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	3308      	adds	r3, #8
 8005b42:	4619      	mov	r1, r3
 8005b44:	201f      	movs	r0, #31
 8005b46:	f7fe fde9 	bl	800471c <bme280_set_sensor_settings>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	60bb      	str	r3, [r7, #8]
	if (0 != rc)
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <its_bme280_init+0x5e>
		return rc;
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	e010      	b.n	8005b7a <its_bme280_init+0x80>

	rc = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev->driver);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	3308      	adds	r3, #8
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	2003      	movs	r0, #3
 8005b60:	f7fe fe31 	bl	80047c6 <bme280_set_sensor_mode>
 8005b64:	4603      	mov	r3, r0
 8005b66:	60bb      	str	r3, [r7, #8]
	if (0 != rc)
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d001      	beq.n	8005b72 <its_bme280_init+0x78>
		return rc;
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	e003      	b.n	8005b7a <its_bme280_init+0x80>

	HAL_Delay(10); // Иначе первые данные получаются плохие
 8005b72:	200a      	movs	r0, #10
 8005b74:	f000 f9d0 	bl	8005f18 <HAL_Delay>
	return 0;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	0000      	movs	r0, r0
 8005b84:	0000      	movs	r0, r0
	...

08005b88 <its_bme280_read>:
}


//Заменить в функци структура мавлинка на собственную
int its_bme280_read(its_bme280_id_t id, bme_important_shit * data)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b08a      	sub	sp, #40	; 0x28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	4603      	mov	r3, r0
 8005b90:	6039      	str	r1, [r7, #0]
 8005b92:	71fb      	strb	r3, [r7, #7]
	its_bme280_t * const dev = _dev_by_id(id);
 8005b94:	79fb      	ldrb	r3, [r7, #7]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7ff ff10 	bl	80059bc <_dev_by_id>
 8005b9c:	6278      	str	r0, [r7, #36]	; 0x24

	struct bme280_data bme280_data;

	int rc = bme280_get_sensor_data(BME280_ALL, &bme280_data, &dev->driver);
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	f103 0208 	add.w	r2, r3, #8
 8005ba4:	f107 0308 	add.w	r3, r7, #8
 8005ba8:	4619      	mov	r1, r3
 8005baa:	2007      	movs	r0, #7
 8005bac:	f7fe fead 	bl	800490a <bme280_get_sensor_data>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	623b      	str	r3, [r7, #32]
	if (0 != rc)
 8005bb4:	6a3b      	ldr	r3, [r7, #32]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <its_bme280_read+0x36>
		return rc;
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	e044      	b.n	8005c48 <its_bme280_read+0xc0>

	data->time_steady = HAL_GetTick();
 8005bbe:	f000 f99f 	bl	8005f00 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	611a      	str	r2, [r3, #16]

	data->pressure = bme280_data.pressure;
 8005bc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bcc:	6839      	ldr	r1, [r7, #0]
 8005bce:	e9c1 2300 	strd	r2, r3, [r1]
	data->temperature = bme280_data.temperature;
 8005bd2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005bd6:	6839      	ldr	r1, [r7, #0]
 8005bd8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	data->humidity = bme280_data.humidity;
 8005bdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005be0:	6839      	ldr	r1, [r7, #0]
 8005be2:	e9c1 2308 	strd	r2, r3, [r1, #32]
	data->altitude =  44330.0*(1.0 - pow((float)bme280_data.pressure/data->bme_pres_grow, 1.0/5.255)); // Написать функцию пересчета в высоту
 8005be6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bea:	4610      	mov	r0, r2
 8005bec:	4619      	mov	r1, r3
 8005bee:	f7fb f803 	bl	8000bf8 <__aeabi_d2f>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7fa fcaf 	bl	8000558 <__aeabi_f2d>
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005c00:	f7fa fe2c 	bl	800085c <__aeabi_ddiv>
 8005c04:	4602      	mov	r2, r0
 8005c06:	460b      	mov	r3, r1
 8005c08:	ec43 2b17 	vmov	d7, r2, r3
 8005c0c:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8005c50 <its_bme280_read+0xc8>
 8005c10:	eeb0 0a47 	vmov.f32	s0, s14
 8005c14:	eef0 0a67 	vmov.f32	s1, s15
 8005c18:	f00e fd4e 	bl	80146b8 <pow>
 8005c1c:	ec53 2b10 	vmov	r2, r3, d0
 8005c20:	f04f 0000 	mov.w	r0, #0
 8005c24:	490e      	ldr	r1, [pc, #56]	; (8005c60 <its_bme280_read+0xd8>)
 8005c26:	f7fa fb37 	bl	8000298 <__aeabi_dsub>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	4610      	mov	r0, r2
 8005c30:	4619      	mov	r1, r3
 8005c32:	a309      	add	r3, pc, #36	; (adr r3, 8005c58 <its_bme280_read+0xd0>)
 8005c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c38:	f7fa fce6 	bl	8000608 <__aeabi_dmul>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	460b      	mov	r3, r1
 8005c40:	6839      	ldr	r1, [r7, #0]
 8005c42:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	return 0;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3728      	adds	r7, #40	; 0x28
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	ccd9456c 	.word	0xccd9456c
 8005c54:	3fc85b95 	.word	0x3fc85b95
 8005c58:	00000000 	.word	0x00000000
 8005c5c:	40e5a540 	.word	0x40e5a540
 8005c60:	3ff00000 	.word	0x3ff00000

08005c64 <wait_for_gpio_state_timeout>:

#define SDA_PORT GPIOB
#define SDA_PIN  GPIO_PIN_9

static uint8_t wait_for_gpio_state_timeout(GPIO_TypeDef *port, uint16_t pin, GPIO_PinState state, uint32_t timeout)
 {
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	607b      	str	r3, [r7, #4]
 8005c6e:	460b      	mov	r3, r1
 8005c70:	817b      	strh	r3, [r7, #10]
 8005c72:	4613      	mov	r3, r2
 8005c74:	727b      	strb	r3, [r7, #9]
    uint32_t Tickstart = HAL_GetTick();
 8005c76:	f000 f943 	bl	8005f00 <HAL_GetTick>
 8005c7a:	6138      	str	r0, [r7, #16]
    uint8_t ret = 1;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	75fb      	strb	r3, [r7, #23]

    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (1 == ret);) // Wait until flag is set
 8005c80:	e011      	b.n	8005ca6 <wait_for_gpio_state_timeout+0x42>
    {
        if(timeout != HAL_MAX_DELAY) // Check for the timeout
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c88:	d00c      	beq.n	8005ca4 <wait_for_gpio_state_timeout+0x40>
        {
            if((timeout == 0U) || ((HAL_GetTick() - Tickstart) > timeout)) ret = 0;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d007      	beq.n	8005ca0 <wait_for_gpio_state_timeout+0x3c>
 8005c90:	f000 f936 	bl	8005f00 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d201      	bcs.n	8005ca4 <wait_for_gpio_state_timeout+0x40>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	75fb      	strb	r3, [r7, #23]
        }

        asm("nop");
 8005ca4:	bf00      	nop
    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (1 == ret);) // Wait until flag is set
 8005ca6:	897b      	ldrh	r3, [r7, #10]
 8005ca8:	4619      	mov	r1, r3
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f001 f8c4 	bl	8006e38 <HAL_GPIO_ReadPin>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	7a7b      	ldrb	r3, [r7, #9]
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d002      	beq.n	8005cc0 <wait_for_gpio_state_timeout+0x5c>
 8005cba:	7dfb      	ldrb	r3, [r7, #23]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d0e0      	beq.n	8005c82 <wait_for_gpio_state_timeout+0x1e>
    }
    return ret;
 8005cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3718      	adds	r7, #24
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
	...

08005ccc <I2C_ClearBusyFlagErratum>:

void I2C_ClearBusyFlagErratum(I2C_HandleTypeDef *hi2c, uint32_t timeout)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b088      	sub	sp, #32
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
        // 2.13.7 I2C analog filter may provide wrong value, locking BUSY. STM32F10xx8 STM32F10xxB Errata sheet

    GPIO_InitTypeDef GPIO_InitStructure = {0};
 8005cd6:	f107 030c 	add.w	r3, r7, #12
 8005cda:	2200      	movs	r2, #0
 8005cdc:	601a      	str	r2, [r3, #0]
 8005cde:	605a      	str	r2, [r3, #4]
 8005ce0:	609a      	str	r2, [r3, #8]
 8005ce2:	60da      	str	r2, [r3, #12]
 8005ce4:	611a      	str	r2, [r3, #16]

    // 1. Clear PE bit.
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_PE);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 0201 	bic.w	r2, r2, #1
 8005cf4:	601a      	str	r2, [r3, #0]

    //  2. Configure the SCL and SDA I/Os as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_I2C_DeInit(hi2c);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f001 fa14 	bl	8007124 <HAL_I2C_DeInit>

    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 8005cfc:	2311      	movs	r3, #17
 8005cfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 8005d00:	2300      	movs	r3, #0
 8005d02:	617b      	str	r3, [r7, #20]

    GPIO_InitStructure.Pin = SCL_PIN; // SCL // если пин другой, то укажите нужный
 8005d04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d08:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SCL_PORT, &GPIO_InitStructure); // если порт другой, то укажите нужную букву GPIOх, и ниже там все порты и пины поменяйте на своё
 8005d0a:	f107 030c 	add.w	r3, r7, #12
 8005d0e:	4619      	mov	r1, r3
 8005d10:	4847      	ldr	r0, [pc, #284]	; (8005e30 <I2C_ClearBusyFlagErratum+0x164>)
 8005d12:	f000 fe29 	bl	8006968 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = SDA_PIN; // SDA
 8005d16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d1a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SDA_PORT, &GPIO_InitStructure);
 8005d1c:	f107 030c 	add.w	r3, r7, #12
 8005d20:	4619      	mov	r1, r3
 8005d22:	4843      	ldr	r0, [pc, #268]	; (8005e30 <I2C_ClearBusyFlagErratum+0x164>)
 8005d24:	f000 fe20 	bl	8006968 <HAL_GPIO_Init>

    // 3. Check SCL and SDA High level in GPIOx_IDR.
    HAL_GPIO_WritePin(SDA_PORT, SDA_PIN, GPIO_PIN_SET);
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d2e:	4840      	ldr	r0, [pc, #256]	; (8005e30 <I2C_ClearBusyFlagErratum+0x164>)
 8005d30:	f001 f89a 	bl	8006e68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_SET);
 8005d34:	2201      	movs	r2, #1
 8005d36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d3a:	483d      	ldr	r0, [pc, #244]	; (8005e30 <I2C_ClearBusyFlagErratum+0x164>)
 8005d3c:	f001 f894 	bl	8006e68 <HAL_GPIO_WritePin>

    wait_for_gpio_state_timeout(SCL_PORT, SCL_PIN, GPIO_PIN_SET, timeout);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d48:	4839      	ldr	r0, [pc, #228]	; (8005e30 <I2C_ClearBusyFlagErratum+0x164>)
 8005d4a:	f7ff ff8b 	bl	8005c64 <wait_for_gpio_state_timeout>
    wait_for_gpio_state_timeout(SDA_PORT, SDA_PIN, GPIO_PIN_SET, timeout);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d56:	4836      	ldr	r0, [pc, #216]	; (8005e30 <I2C_ClearBusyFlagErratum+0x164>)
 8005d58:	f7ff ff84 	bl	8005c64 <wait_for_gpio_state_timeout>

    // 4. Configure the SDA I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(SDA_PORT, SDA_PIN, GPIO_PIN_RESET);
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d62:	4833      	ldr	r0, [pc, #204]	; (8005e30 <I2C_ClearBusyFlagErratum+0x164>)
 8005d64:	f001 f880 	bl	8006e68 <HAL_GPIO_WritePin>

    // 5. Check SDA Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(SDA_PORT, SDA_PIN, GPIO_PIN_RESET, timeout);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d70:	482f      	ldr	r0, [pc, #188]	; (8005e30 <I2C_ClearBusyFlagErratum+0x164>)
 8005d72:	f7ff ff77 	bl	8005c64 <wait_for_gpio_state_timeout>

    // 6. Configure the SCL I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_RESET);
 8005d76:	2200      	movs	r2, #0
 8005d78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d7c:	482c      	ldr	r0, [pc, #176]	; (8005e30 <I2C_ClearBusyFlagErratum+0x164>)
 8005d7e:	f001 f873 	bl	8006e68 <HAL_GPIO_WritePin>

    // 7. Check SCL Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(SCL_PORT, SCL_PIN, GPIO_PIN_RESET, timeout);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d8a:	4829      	ldr	r0, [pc, #164]	; (8005e30 <I2C_ClearBusyFlagErratum+0x164>)
 8005d8c:	f7ff ff6a 	bl	8005c64 <wait_for_gpio_state_timeout>

    // 8. Configure the SCL I/O as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_SET);
 8005d90:	2201      	movs	r2, #1
 8005d92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d96:	4826      	ldr	r0, [pc, #152]	; (8005e30 <I2C_ClearBusyFlagErratum+0x164>)
 8005d98:	f001 f866 	bl	8006e68 <HAL_GPIO_WritePin>

    // 9. Check SCL High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(SCL_PORT, SCL_PIN, GPIO_PIN_SET, timeout);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005da4:	4822      	ldr	r0, [pc, #136]	; (8005e30 <I2C_ClearBusyFlagErratum+0x164>)
 8005da6:	f7ff ff5d 	bl	8005c64 <wait_for_gpio_state_timeout>

    // 10. Configure the SDA I/O as General Purpose Output Open-Drain , High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(SDA_PORT, SDA_PIN, GPIO_PIN_SET);
 8005daa:	2201      	movs	r2, #1
 8005dac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005db0:	481f      	ldr	r0, [pc, #124]	; (8005e30 <I2C_ClearBusyFlagErratum+0x164>)
 8005db2:	f001 f859 	bl	8006e68 <HAL_GPIO_WritePin>

    // 11. Check SDA High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(SDA_PORT, SDA_PIN, GPIO_PIN_SET, timeout);
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005dbe:	481c      	ldr	r0, [pc, #112]	; (8005e30 <I2C_ClearBusyFlagErratum+0x164>)
 8005dc0:	f7ff ff50 	bl	8005c64 <wait_for_gpio_state_timeout>

    // 12. Configure the SCL and SDA I/Os as Alternate function Open-Drain.
    GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8005dc4:	2312      	movs	r3, #18
 8005dc6:	613b      	str	r3, [r7, #16]
    //GPIO_InitStructure.Alternate = GPIO_AF4_I2C2; // F4

    GPIO_InitStructure.Pin = SCL_PIN;
 8005dc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005dcc:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SCL_PORT, &GPIO_InitStructure);
 8005dce:	f107 030c 	add.w	r3, r7, #12
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	4816      	ldr	r0, [pc, #88]	; (8005e30 <I2C_ClearBusyFlagErratum+0x164>)
 8005dd6:	f000 fdc7 	bl	8006968 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = SDA_PIN;
 8005dda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dde:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SDA_PORT, &GPIO_InitStructure);
 8005de0:	f107 030c 	add.w	r3, r7, #12
 8005de4:	4619      	mov	r1, r3
 8005de6:	4812      	ldr	r0, [pc, #72]	; (8005e30 <I2C_ClearBusyFlagErratum+0x164>)
 8005de8:	f000 fdbe 	bl	8006968 <HAL_GPIO_Init>

    // 13. Set SWRST bit in I2Cx_CR1 register.
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005dfa:	601a      	str	r2, [r3, #0]
    asm("nop");
 8005dfc:	bf00      	nop

    /* 14. Clear SWRST bit in I2Cx_CR1 register. */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e0c:	601a      	str	r2, [r3, #0]
    asm("nop");
 8005e0e:	bf00      	nop

    /* 15. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_PE);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f042 0201 	orr.w	r2, r2, #1
 8005e1e:	601a      	str	r2, [r3, #0]
    asm("nop");
 8005e20:	bf00      	nop

    // Call initialization function.
    HAL_I2C_Init(hi2c);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f001 f83a 	bl	8006e9c <HAL_I2C_Init>
}
 8005e28:	bf00      	nop
 8005e2a:	3720      	adds	r7, #32
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	40020400 	.word	0x40020400

08005e34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005e38:	4b0e      	ldr	r3, [pc, #56]	; (8005e74 <HAL_Init+0x40>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a0d      	ldr	r2, [pc, #52]	; (8005e74 <HAL_Init+0x40>)
 8005e3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005e44:	4b0b      	ldr	r3, [pc, #44]	; (8005e74 <HAL_Init+0x40>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a0a      	ldr	r2, [pc, #40]	; (8005e74 <HAL_Init+0x40>)
 8005e4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005e50:	4b08      	ldr	r3, [pc, #32]	; (8005e74 <HAL_Init+0x40>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a07      	ldr	r2, [pc, #28]	; (8005e74 <HAL_Init+0x40>)
 8005e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e5c:	2003      	movs	r0, #3
 8005e5e:	f000 fd41 	bl	80068e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005e62:	200f      	movs	r0, #15
 8005e64:	f000 f808 	bl	8005e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005e68:	f7fd ff74 	bl	8003d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	40023c00 	.word	0x40023c00

08005e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005e80:	4b12      	ldr	r3, [pc, #72]	; (8005ecc <HAL_InitTick+0x54>)
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	4b12      	ldr	r3, [pc, #72]	; (8005ed0 <HAL_InitTick+0x58>)
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	4619      	mov	r1, r3
 8005e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e96:	4618      	mov	r0, r3
 8005e98:	f000 fd59 	bl	800694e <HAL_SYSTICK_Config>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d001      	beq.n	8005ea6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e00e      	b.n	8005ec4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2b0f      	cmp	r3, #15
 8005eaa:	d80a      	bhi.n	8005ec2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005eac:	2200      	movs	r2, #0
 8005eae:	6879      	ldr	r1, [r7, #4]
 8005eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb4:	f000 fd21 	bl	80068fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005eb8:	4a06      	ldr	r2, [pc, #24]	; (8005ed4 <HAL_InitTick+0x5c>)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	e000      	b.n	8005ec4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3708      	adds	r7, #8
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	20000004 	.word	0x20000004
 8005ed0:	20000054 	.word	0x20000054
 8005ed4:	20000050 	.word	0x20000050

08005ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005edc:	4b06      	ldr	r3, [pc, #24]	; (8005ef8 <HAL_IncTick+0x20>)
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	4b06      	ldr	r3, [pc, #24]	; (8005efc <HAL_IncTick+0x24>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	4a04      	ldr	r2, [pc, #16]	; (8005efc <HAL_IncTick+0x24>)
 8005eea:	6013      	str	r3, [r2, #0]
}
 8005eec:	bf00      	nop
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	20000054 	.word	0x20000054
 8005efc:	200029b0 	.word	0x200029b0

08005f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f00:	b480      	push	{r7}
 8005f02:	af00      	add	r7, sp, #0
  return uwTick;
 8005f04:	4b03      	ldr	r3, [pc, #12]	; (8005f14 <HAL_GetTick+0x14>)
 8005f06:	681b      	ldr	r3, [r3, #0]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	200029b0 	.word	0x200029b0

08005f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005f20:	f7ff ffee 	bl	8005f00 <HAL_GetTick>
 8005f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f30:	d005      	beq.n	8005f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005f32:	4b0a      	ldr	r3, [pc, #40]	; (8005f5c <HAL_Delay+0x44>)
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	461a      	mov	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005f3e:	bf00      	nop
 8005f40:	f7ff ffde 	bl	8005f00 <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d8f7      	bhi.n	8005f40 <HAL_Delay+0x28>
  {
  }
}
 8005f50:	bf00      	nop
 8005f52:	bf00      	nop
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	20000054 	.word	0x20000054

08005f60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d101      	bne.n	8005f76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e033      	b.n	8005fde <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d109      	bne.n	8005f92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7fd ff10 	bl	8003da4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	f003 0310 	and.w	r3, r3, #16
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d118      	bne.n	8005fd0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005fa6:	f023 0302 	bic.w	r3, r3, #2
 8005faa:	f043 0202 	orr.w	r2, r3, #2
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 faca 	bl	800654c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc2:	f023 0303 	bic.w	r3, r3, #3
 8005fc6:	f043 0201 	orr.w	r2, r3, #1
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	641a      	str	r2, [r3, #64]	; 0x40
 8005fce:	e001      	b.n	8005fd4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
	...

08005fe8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d101      	bne.n	8006002 <HAL_ADC_Start+0x1a>
 8005ffe:	2302      	movs	r3, #2
 8006000:	e097      	b.n	8006132 <HAL_ADC_Start+0x14a>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f003 0301 	and.w	r3, r3, #1
 8006014:	2b01      	cmp	r3, #1
 8006016:	d018      	beq.n	800604a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689a      	ldr	r2, [r3, #8]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 0201 	orr.w	r2, r2, #1
 8006026:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006028:	4b45      	ldr	r3, [pc, #276]	; (8006140 <HAL_ADC_Start+0x158>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a45      	ldr	r2, [pc, #276]	; (8006144 <HAL_ADC_Start+0x15c>)
 800602e:	fba2 2303 	umull	r2, r3, r2, r3
 8006032:	0c9a      	lsrs	r2, r3, #18
 8006034:	4613      	mov	r3, r2
 8006036:	005b      	lsls	r3, r3, #1
 8006038:	4413      	add	r3, r2
 800603a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800603c:	e002      	b.n	8006044 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	3b01      	subs	r3, #1
 8006042:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1f9      	bne.n	800603e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f003 0301 	and.w	r3, r3, #1
 8006054:	2b01      	cmp	r3, #1
 8006056:	d15f      	bne.n	8006118 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006060:	f023 0301 	bic.w	r3, r3, #1
 8006064:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006076:	2b00      	cmp	r3, #0
 8006078:	d007      	beq.n	800608a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006082:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006096:	d106      	bne.n	80060a6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800609c:	f023 0206 	bic.w	r2, r3, #6
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	645a      	str	r2, [r3, #68]	; 0x44
 80060a4:	e002      	b.n	80060ac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80060b4:	4b24      	ldr	r3, [pc, #144]	; (8006148 <HAL_ADC_Start+0x160>)
 80060b6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80060c0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f003 031f 	and.w	r3, r3, #31
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10f      	bne.n	80060ee <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d129      	bne.n	8006130 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	689a      	ldr	r2, [r3, #8]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80060ea:	609a      	str	r2, [r3, #8]
 80060ec:	e020      	b.n	8006130 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a16      	ldr	r2, [pc, #88]	; (800614c <HAL_ADC_Start+0x164>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d11b      	bne.n	8006130 <HAL_ADC_Start+0x148>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d114      	bne.n	8006130 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006114:	609a      	str	r2, [r3, #8]
 8006116:	e00b      	b.n	8006130 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611c:	f043 0210 	orr.w	r2, r3, #16
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006128:	f043 0201 	orr.w	r2, r3, #1
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3714      	adds	r7, #20
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	20000004 	.word	0x20000004
 8006144:	431bde83 	.word	0x431bde83
 8006148:	40012300 	.word	0x40012300
 800614c:	40012000 	.word	0x40012000

08006150 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800615e:	2b01      	cmp	r3, #1
 8006160:	d101      	bne.n	8006166 <HAL_ADC_Stop+0x16>
 8006162:	2302      	movs	r3, #2
 8006164:	e021      	b.n	80061aa <HAL_ADC_Stop+0x5a>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	689a      	ldr	r2, [r3, #8]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f022 0201 	bic.w	r2, r2, #1
 800617c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f003 0301 	and.w	r3, r3, #1
 8006188:	2b00      	cmp	r3, #0
 800618a:	d109      	bne.n	80061a0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006190:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006194:	f023 0301 	bic.w	r3, r3, #1
 8006198:	f043 0201 	orr.w	r2, r3, #1
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	370c      	adds	r7, #12
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b084      	sub	sp, #16
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
 80061be:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80061c0:	2300      	movs	r3, #0
 80061c2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061d2:	d113      	bne.n	80061fc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80061de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061e2:	d10b      	bne.n	80061fc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e8:	f043 0220 	orr.w	r2, r3, #32
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e063      	b.n	80062c4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80061fc:	f7ff fe80 	bl	8005f00 <HAL_GetTick>
 8006200:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006202:	e021      	b.n	8006248 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800620a:	d01d      	beq.n	8006248 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d007      	beq.n	8006222 <HAL_ADC_PollForConversion+0x6c>
 8006212:	f7ff fe75 	bl	8005f00 <HAL_GetTick>
 8006216:	4602      	mov	r2, r0
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	429a      	cmp	r2, r3
 8006220:	d212      	bcs.n	8006248 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0302 	and.w	r3, r3, #2
 800622c:	2b02      	cmp	r3, #2
 800622e:	d00b      	beq.n	8006248 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006234:	f043 0204 	orr.w	r2, r3, #4
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e03d      	b.n	80062c4 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0302 	and.w	r3, r3, #2
 8006252:	2b02      	cmp	r3, #2
 8006254:	d1d6      	bne.n	8006204 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f06f 0212 	mvn.w	r2, #18
 800625e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006264:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d123      	bne.n	80062c2 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800627e:	2b00      	cmp	r3, #0
 8006280:	d11f      	bne.n	80062c2 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006288:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800628c:	2b00      	cmp	r3, #0
 800628e:	d006      	beq.n	800629e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800629a:	2b00      	cmp	r3, #0
 800629c:	d111      	bne.n	80062c2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d105      	bne.n	80062c2 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ba:	f043 0201 	orr.w	r2, r3, #1
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80062da:	4618      	mov	r0, r3
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
	...

080062e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d101      	bne.n	8006304 <HAL_ADC_ConfigChannel+0x1c>
 8006300:	2302      	movs	r3, #2
 8006302:	e113      	b.n	800652c <HAL_ADC_ConfigChannel+0x244>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b09      	cmp	r3, #9
 8006312:	d925      	bls.n	8006360 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68d9      	ldr	r1, [r3, #12]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	b29b      	uxth	r3, r3
 8006320:	461a      	mov	r2, r3
 8006322:	4613      	mov	r3, r2
 8006324:	005b      	lsls	r3, r3, #1
 8006326:	4413      	add	r3, r2
 8006328:	3b1e      	subs	r3, #30
 800632a:	2207      	movs	r2, #7
 800632c:	fa02 f303 	lsl.w	r3, r2, r3
 8006330:	43da      	mvns	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	400a      	ands	r2, r1
 8006338:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68d9      	ldr	r1, [r3, #12]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	689a      	ldr	r2, [r3, #8]
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	b29b      	uxth	r3, r3
 800634a:	4618      	mov	r0, r3
 800634c:	4603      	mov	r3, r0
 800634e:	005b      	lsls	r3, r3, #1
 8006350:	4403      	add	r3, r0
 8006352:	3b1e      	subs	r3, #30
 8006354:	409a      	lsls	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	60da      	str	r2, [r3, #12]
 800635e:	e022      	b.n	80063a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6919      	ldr	r1, [r3, #16]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	b29b      	uxth	r3, r3
 800636c:	461a      	mov	r2, r3
 800636e:	4613      	mov	r3, r2
 8006370:	005b      	lsls	r3, r3, #1
 8006372:	4413      	add	r3, r2
 8006374:	2207      	movs	r2, #7
 8006376:	fa02 f303 	lsl.w	r3, r2, r3
 800637a:	43da      	mvns	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	400a      	ands	r2, r1
 8006382:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6919      	ldr	r1, [r3, #16]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	689a      	ldr	r2, [r3, #8]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	b29b      	uxth	r3, r3
 8006394:	4618      	mov	r0, r3
 8006396:	4603      	mov	r3, r0
 8006398:	005b      	lsls	r3, r3, #1
 800639a:	4403      	add	r3, r0
 800639c:	409a      	lsls	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	430a      	orrs	r2, r1
 80063a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	2b06      	cmp	r3, #6
 80063ac:	d824      	bhi.n	80063f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685a      	ldr	r2, [r3, #4]
 80063b8:	4613      	mov	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4413      	add	r3, r2
 80063be:	3b05      	subs	r3, #5
 80063c0:	221f      	movs	r2, #31
 80063c2:	fa02 f303 	lsl.w	r3, r2, r3
 80063c6:	43da      	mvns	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	400a      	ands	r2, r1
 80063ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	b29b      	uxth	r3, r3
 80063dc:	4618      	mov	r0, r3
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	4613      	mov	r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	4413      	add	r3, r2
 80063e8:	3b05      	subs	r3, #5
 80063ea:	fa00 f203 	lsl.w	r2, r0, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	430a      	orrs	r2, r1
 80063f4:	635a      	str	r2, [r3, #52]	; 0x34
 80063f6:	e04c      	b.n	8006492 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	2b0c      	cmp	r3, #12
 80063fe:	d824      	bhi.n	800644a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	4613      	mov	r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4413      	add	r3, r2
 8006410:	3b23      	subs	r3, #35	; 0x23
 8006412:	221f      	movs	r2, #31
 8006414:	fa02 f303 	lsl.w	r3, r2, r3
 8006418:	43da      	mvns	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	400a      	ands	r2, r1
 8006420:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	b29b      	uxth	r3, r3
 800642e:	4618      	mov	r0, r3
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	4613      	mov	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4413      	add	r3, r2
 800643a:	3b23      	subs	r3, #35	; 0x23
 800643c:	fa00 f203 	lsl.w	r2, r0, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	430a      	orrs	r2, r1
 8006446:	631a      	str	r2, [r3, #48]	; 0x30
 8006448:	e023      	b.n	8006492 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	4613      	mov	r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4413      	add	r3, r2
 800645a:	3b41      	subs	r3, #65	; 0x41
 800645c:	221f      	movs	r2, #31
 800645e:	fa02 f303 	lsl.w	r3, r2, r3
 8006462:	43da      	mvns	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	400a      	ands	r2, r1
 800646a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	b29b      	uxth	r3, r3
 8006478:	4618      	mov	r0, r3
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	4613      	mov	r3, r2
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4413      	add	r3, r2
 8006484:	3b41      	subs	r3, #65	; 0x41
 8006486:	fa00 f203 	lsl.w	r2, r0, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006492:	4b29      	ldr	r3, [pc, #164]	; (8006538 <HAL_ADC_ConfigChannel+0x250>)
 8006494:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a28      	ldr	r2, [pc, #160]	; (800653c <HAL_ADC_ConfigChannel+0x254>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d10f      	bne.n	80064c0 <HAL_ADC_ConfigChannel+0x1d8>
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2b12      	cmp	r3, #18
 80064a6:	d10b      	bne.n	80064c0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a1d      	ldr	r2, [pc, #116]	; (800653c <HAL_ADC_ConfigChannel+0x254>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d12b      	bne.n	8006522 <HAL_ADC_ConfigChannel+0x23a>
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a1c      	ldr	r2, [pc, #112]	; (8006540 <HAL_ADC_ConfigChannel+0x258>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d003      	beq.n	80064dc <HAL_ADC_ConfigChannel+0x1f4>
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b11      	cmp	r3, #17
 80064da:	d122      	bne.n	8006522 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a11      	ldr	r2, [pc, #68]	; (8006540 <HAL_ADC_ConfigChannel+0x258>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d111      	bne.n	8006522 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80064fe:	4b11      	ldr	r3, [pc, #68]	; (8006544 <HAL_ADC_ConfigChannel+0x25c>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a11      	ldr	r2, [pc, #68]	; (8006548 <HAL_ADC_ConfigChannel+0x260>)
 8006504:	fba2 2303 	umull	r2, r3, r2, r3
 8006508:	0c9a      	lsrs	r2, r3, #18
 800650a:	4613      	mov	r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	005b      	lsls	r3, r3, #1
 8006512:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006514:	e002      	b.n	800651c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	3b01      	subs	r3, #1
 800651a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1f9      	bne.n	8006516 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3714      	adds	r7, #20
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr
 8006538:	40012300 	.word	0x40012300
 800653c:	40012000 	.word	0x40012000
 8006540:	10000012 	.word	0x10000012
 8006544:	20000004 	.word	0x20000004
 8006548:	431bde83 	.word	0x431bde83

0800654c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006554:	4b79      	ldr	r3, [pc, #484]	; (800673c <ADC_Init+0x1f0>)
 8006556:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	431a      	orrs	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	685a      	ldr	r2, [r3, #4]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006580:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	6859      	ldr	r1, [r3, #4]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	021a      	lsls	r2, r3, #8
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	430a      	orrs	r2, r1
 8006594:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80065a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	6859      	ldr	r1, [r3, #4]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	689a      	ldr	r2, [r3, #8]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	430a      	orrs	r2, r1
 80065b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	689a      	ldr	r2, [r3, #8]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6899      	ldr	r1, [r3, #8]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	68da      	ldr	r2, [r3, #12]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	430a      	orrs	r2, r1
 80065d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065de:	4a58      	ldr	r2, [pc, #352]	; (8006740 <ADC_Init+0x1f4>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d022      	beq.n	800662a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689a      	ldr	r2, [r3, #8]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80065f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6899      	ldr	r1, [r3, #8]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	430a      	orrs	r2, r1
 8006604:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	689a      	ldr	r2, [r3, #8]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006614:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	6899      	ldr	r1, [r3, #8]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	430a      	orrs	r2, r1
 8006626:	609a      	str	r2, [r3, #8]
 8006628:	e00f      	b.n	800664a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	689a      	ldr	r2, [r3, #8]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006638:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	689a      	ldr	r2, [r3, #8]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006648:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	689a      	ldr	r2, [r3, #8]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f022 0202 	bic.w	r2, r2, #2
 8006658:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6899      	ldr	r1, [r3, #8]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	7e1b      	ldrb	r3, [r3, #24]
 8006664:	005a      	lsls	r2, r3, #1
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	430a      	orrs	r2, r1
 800666c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d01b      	beq.n	80066b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006686:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006696:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6859      	ldr	r1, [r3, #4]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a2:	3b01      	subs	r3, #1
 80066a4:	035a      	lsls	r2, r3, #13
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	605a      	str	r2, [r3, #4]
 80066ae:	e007      	b.n	80066c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685a      	ldr	r2, [r3, #4]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80066ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	69db      	ldr	r3, [r3, #28]
 80066da:	3b01      	subs	r3, #1
 80066dc:	051a      	lsls	r2, r3, #20
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	689a      	ldr	r2, [r3, #8]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80066f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	6899      	ldr	r1, [r3, #8]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006702:	025a      	lsls	r2, r3, #9
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	430a      	orrs	r2, r1
 800670a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	689a      	ldr	r2, [r3, #8]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800671a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6899      	ldr	r1, [r3, #8]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	029a      	lsls	r2, r3, #10
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	430a      	orrs	r2, r1
 800672e:	609a      	str	r2, [r3, #8]
}
 8006730:	bf00      	nop
 8006732:	3714      	adds	r7, #20
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	40012300 	.word	0x40012300
 8006740:	0f000001 	.word	0x0f000001

08006744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f003 0307 	and.w	r3, r3, #7
 8006752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006754:	4b0c      	ldr	r3, [pc, #48]	; (8006788 <__NVIC_SetPriorityGrouping+0x44>)
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006760:	4013      	ands	r3, r2
 8006762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800676c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006776:	4a04      	ldr	r2, [pc, #16]	; (8006788 <__NVIC_SetPriorityGrouping+0x44>)
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	60d3      	str	r3, [r2, #12]
}
 800677c:	bf00      	nop
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr
 8006788:	e000ed00 	.word	0xe000ed00

0800678c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800678c:	b480      	push	{r7}
 800678e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006790:	4b04      	ldr	r3, [pc, #16]	; (80067a4 <__NVIC_GetPriorityGrouping+0x18>)
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	0a1b      	lsrs	r3, r3, #8
 8006796:	f003 0307 	and.w	r3, r3, #7
}
 800679a:	4618      	mov	r0, r3
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	e000ed00 	.word	0xe000ed00

080067a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	4603      	mov	r3, r0
 80067b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	db0b      	blt.n	80067d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80067ba:	79fb      	ldrb	r3, [r7, #7]
 80067bc:	f003 021f 	and.w	r2, r3, #31
 80067c0:	4907      	ldr	r1, [pc, #28]	; (80067e0 <__NVIC_EnableIRQ+0x38>)
 80067c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067c6:	095b      	lsrs	r3, r3, #5
 80067c8:	2001      	movs	r0, #1
 80067ca:	fa00 f202 	lsl.w	r2, r0, r2
 80067ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80067d2:	bf00      	nop
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	e000e100 	.word	0xe000e100

080067e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	4603      	mov	r3, r0
 80067ec:	6039      	str	r1, [r7, #0]
 80067ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	db0a      	blt.n	800680e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	490c      	ldr	r1, [pc, #48]	; (8006830 <__NVIC_SetPriority+0x4c>)
 80067fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006802:	0112      	lsls	r2, r2, #4
 8006804:	b2d2      	uxtb	r2, r2
 8006806:	440b      	add	r3, r1
 8006808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800680c:	e00a      	b.n	8006824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	b2da      	uxtb	r2, r3
 8006812:	4908      	ldr	r1, [pc, #32]	; (8006834 <__NVIC_SetPriority+0x50>)
 8006814:	79fb      	ldrb	r3, [r7, #7]
 8006816:	f003 030f 	and.w	r3, r3, #15
 800681a:	3b04      	subs	r3, #4
 800681c:	0112      	lsls	r2, r2, #4
 800681e:	b2d2      	uxtb	r2, r2
 8006820:	440b      	add	r3, r1
 8006822:	761a      	strb	r2, [r3, #24]
}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr
 8006830:	e000e100 	.word	0xe000e100
 8006834:	e000ed00 	.word	0xe000ed00

08006838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006838:	b480      	push	{r7}
 800683a:	b089      	sub	sp, #36	; 0x24
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f003 0307 	and.w	r3, r3, #7
 800684a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	f1c3 0307 	rsb	r3, r3, #7
 8006852:	2b04      	cmp	r3, #4
 8006854:	bf28      	it	cs
 8006856:	2304      	movcs	r3, #4
 8006858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	3304      	adds	r3, #4
 800685e:	2b06      	cmp	r3, #6
 8006860:	d902      	bls.n	8006868 <NVIC_EncodePriority+0x30>
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	3b03      	subs	r3, #3
 8006866:	e000      	b.n	800686a <NVIC_EncodePriority+0x32>
 8006868:	2300      	movs	r3, #0
 800686a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800686c:	f04f 32ff 	mov.w	r2, #4294967295
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	fa02 f303 	lsl.w	r3, r2, r3
 8006876:	43da      	mvns	r2, r3
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	401a      	ands	r2, r3
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006880:	f04f 31ff 	mov.w	r1, #4294967295
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	fa01 f303 	lsl.w	r3, r1, r3
 800688a:	43d9      	mvns	r1, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006890:	4313      	orrs	r3, r2
         );
}
 8006892:	4618      	mov	r0, r3
 8006894:	3724      	adds	r7, #36	; 0x24
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
	...

080068a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	3b01      	subs	r3, #1
 80068ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80068b0:	d301      	bcc.n	80068b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80068b2:	2301      	movs	r3, #1
 80068b4:	e00f      	b.n	80068d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80068b6:	4a0a      	ldr	r2, [pc, #40]	; (80068e0 <SysTick_Config+0x40>)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	3b01      	subs	r3, #1
 80068bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80068be:	210f      	movs	r1, #15
 80068c0:	f04f 30ff 	mov.w	r0, #4294967295
 80068c4:	f7ff ff8e 	bl	80067e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80068c8:	4b05      	ldr	r3, [pc, #20]	; (80068e0 <SysTick_Config+0x40>)
 80068ca:	2200      	movs	r2, #0
 80068cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80068ce:	4b04      	ldr	r3, [pc, #16]	; (80068e0 <SysTick_Config+0x40>)
 80068d0:	2207      	movs	r2, #7
 80068d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3708      	adds	r7, #8
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	e000e010 	.word	0xe000e010

080068e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f7ff ff29 	bl	8006744 <__NVIC_SetPriorityGrouping>
}
 80068f2:	bf00      	nop
 80068f4:	3708      	adds	r7, #8
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b086      	sub	sp, #24
 80068fe:	af00      	add	r7, sp, #0
 8006900:	4603      	mov	r3, r0
 8006902:	60b9      	str	r1, [r7, #8]
 8006904:	607a      	str	r2, [r7, #4]
 8006906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006908:	2300      	movs	r3, #0
 800690a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800690c:	f7ff ff3e 	bl	800678c <__NVIC_GetPriorityGrouping>
 8006910:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	68b9      	ldr	r1, [r7, #8]
 8006916:	6978      	ldr	r0, [r7, #20]
 8006918:	f7ff ff8e 	bl	8006838 <NVIC_EncodePriority>
 800691c:	4602      	mov	r2, r0
 800691e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006922:	4611      	mov	r1, r2
 8006924:	4618      	mov	r0, r3
 8006926:	f7ff ff5d 	bl	80067e4 <__NVIC_SetPriority>
}
 800692a:	bf00      	nop
 800692c:	3718      	adds	r7, #24
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b082      	sub	sp, #8
 8006936:	af00      	add	r7, sp, #0
 8006938:	4603      	mov	r3, r0
 800693a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800693c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006940:	4618      	mov	r0, r3
 8006942:	f7ff ff31 	bl	80067a8 <__NVIC_EnableIRQ>
}
 8006946:	bf00      	nop
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b082      	sub	sp, #8
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7ff ffa2 	bl	80068a0 <SysTick_Config>
 800695c:	4603      	mov	r3, r0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
	...

08006968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006968:	b480      	push	{r7}
 800696a:	b089      	sub	sp, #36	; 0x24
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006972:	2300      	movs	r3, #0
 8006974:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006976:	2300      	movs	r3, #0
 8006978:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800697a:	2300      	movs	r3, #0
 800697c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800697e:	2300      	movs	r3, #0
 8006980:	61fb      	str	r3, [r7, #28]
 8006982:	e159      	b.n	8006c38 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006984:	2201      	movs	r2, #1
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	fa02 f303 	lsl.w	r3, r2, r3
 800698c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	4013      	ands	r3, r2
 8006996:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	429a      	cmp	r2, r3
 800699e:	f040 8148 	bne.w	8006c32 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f003 0303 	and.w	r3, r3, #3
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d005      	beq.n	80069ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d130      	bne.n	8006a1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	005b      	lsls	r3, r3, #1
 80069c4:	2203      	movs	r2, #3
 80069c6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ca:	43db      	mvns	r3, r3
 80069cc:	69ba      	ldr	r2, [r7, #24]
 80069ce:	4013      	ands	r3, r2
 80069d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	68da      	ldr	r2, [r3, #12]
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	005b      	lsls	r3, r3, #1
 80069da:	fa02 f303 	lsl.w	r3, r2, r3
 80069de:	69ba      	ldr	r2, [r7, #24]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	69ba      	ldr	r2, [r7, #24]
 80069e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80069f0:	2201      	movs	r2, #1
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	fa02 f303 	lsl.w	r3, r2, r3
 80069f8:	43db      	mvns	r3, r3
 80069fa:	69ba      	ldr	r2, [r7, #24]
 80069fc:	4013      	ands	r3, r2
 80069fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	091b      	lsrs	r3, r3, #4
 8006a06:	f003 0201 	and.w	r2, r3, #1
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a10:	69ba      	ldr	r2, [r7, #24]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	69ba      	ldr	r2, [r7, #24]
 8006a1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f003 0303 	and.w	r3, r3, #3
 8006a24:	2b03      	cmp	r3, #3
 8006a26:	d017      	beq.n	8006a58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	005b      	lsls	r3, r3, #1
 8006a32:	2203      	movs	r2, #3
 8006a34:	fa02 f303 	lsl.w	r3, r2, r3
 8006a38:	43db      	mvns	r3, r3
 8006a3a:	69ba      	ldr	r2, [r7, #24]
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	689a      	ldr	r2, [r3, #8]
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	005b      	lsls	r3, r3, #1
 8006a48:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4c:	69ba      	ldr	r2, [r7, #24]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	69ba      	ldr	r2, [r7, #24]
 8006a56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	f003 0303 	and.w	r3, r3, #3
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d123      	bne.n	8006aac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	08da      	lsrs	r2, r3, #3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	3208      	adds	r2, #8
 8006a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	f003 0307 	and.w	r3, r3, #7
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	220f      	movs	r2, #15
 8006a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a80:	43db      	mvns	r3, r3
 8006a82:	69ba      	ldr	r2, [r7, #24]
 8006a84:	4013      	ands	r3, r2
 8006a86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	691a      	ldr	r2, [r3, #16]
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	f003 0307 	and.w	r3, r3, #7
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	fa02 f303 	lsl.w	r3, r2, r3
 8006a98:	69ba      	ldr	r2, [r7, #24]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	08da      	lsrs	r2, r3, #3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	3208      	adds	r2, #8
 8006aa6:	69b9      	ldr	r1, [r7, #24]
 8006aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	005b      	lsls	r3, r3, #1
 8006ab6:	2203      	movs	r2, #3
 8006ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8006abc:	43db      	mvns	r3, r3
 8006abe:	69ba      	ldr	r2, [r7, #24]
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	f003 0203 	and.w	r2, r3, #3
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	005b      	lsls	r3, r3, #1
 8006ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad4:	69ba      	ldr	r2, [r7, #24]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	69ba      	ldr	r2, [r7, #24]
 8006ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f000 80a2 	beq.w	8006c32 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006aee:	2300      	movs	r3, #0
 8006af0:	60fb      	str	r3, [r7, #12]
 8006af2:	4b57      	ldr	r3, [pc, #348]	; (8006c50 <HAL_GPIO_Init+0x2e8>)
 8006af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006af6:	4a56      	ldr	r2, [pc, #344]	; (8006c50 <HAL_GPIO_Init+0x2e8>)
 8006af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006afc:	6453      	str	r3, [r2, #68]	; 0x44
 8006afe:	4b54      	ldr	r3, [pc, #336]	; (8006c50 <HAL_GPIO_Init+0x2e8>)
 8006b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b06:	60fb      	str	r3, [r7, #12]
 8006b08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b0a:	4a52      	ldr	r2, [pc, #328]	; (8006c54 <HAL_GPIO_Init+0x2ec>)
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	089b      	lsrs	r3, r3, #2
 8006b10:	3302      	adds	r3, #2
 8006b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	f003 0303 	and.w	r3, r3, #3
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	220f      	movs	r2, #15
 8006b22:	fa02 f303 	lsl.w	r3, r2, r3
 8006b26:	43db      	mvns	r3, r3
 8006b28:	69ba      	ldr	r2, [r7, #24]
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a49      	ldr	r2, [pc, #292]	; (8006c58 <HAL_GPIO_Init+0x2f0>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d019      	beq.n	8006b6a <HAL_GPIO_Init+0x202>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a48      	ldr	r2, [pc, #288]	; (8006c5c <HAL_GPIO_Init+0x2f4>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d013      	beq.n	8006b66 <HAL_GPIO_Init+0x1fe>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a47      	ldr	r2, [pc, #284]	; (8006c60 <HAL_GPIO_Init+0x2f8>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d00d      	beq.n	8006b62 <HAL_GPIO_Init+0x1fa>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a46      	ldr	r2, [pc, #280]	; (8006c64 <HAL_GPIO_Init+0x2fc>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d007      	beq.n	8006b5e <HAL_GPIO_Init+0x1f6>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a45      	ldr	r2, [pc, #276]	; (8006c68 <HAL_GPIO_Init+0x300>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d101      	bne.n	8006b5a <HAL_GPIO_Init+0x1f2>
 8006b56:	2304      	movs	r3, #4
 8006b58:	e008      	b.n	8006b6c <HAL_GPIO_Init+0x204>
 8006b5a:	2307      	movs	r3, #7
 8006b5c:	e006      	b.n	8006b6c <HAL_GPIO_Init+0x204>
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e004      	b.n	8006b6c <HAL_GPIO_Init+0x204>
 8006b62:	2302      	movs	r3, #2
 8006b64:	e002      	b.n	8006b6c <HAL_GPIO_Init+0x204>
 8006b66:	2301      	movs	r3, #1
 8006b68:	e000      	b.n	8006b6c <HAL_GPIO_Init+0x204>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	69fa      	ldr	r2, [r7, #28]
 8006b6e:	f002 0203 	and.w	r2, r2, #3
 8006b72:	0092      	lsls	r2, r2, #2
 8006b74:	4093      	lsls	r3, r2
 8006b76:	69ba      	ldr	r2, [r7, #24]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b7c:	4935      	ldr	r1, [pc, #212]	; (8006c54 <HAL_GPIO_Init+0x2ec>)
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	089b      	lsrs	r3, r3, #2
 8006b82:	3302      	adds	r3, #2
 8006b84:	69ba      	ldr	r2, [r7, #24]
 8006b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006b8a:	4b38      	ldr	r3, [pc, #224]	; (8006c6c <HAL_GPIO_Init+0x304>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	43db      	mvns	r3, r3
 8006b94:	69ba      	ldr	r2, [r7, #24]
 8006b96:	4013      	ands	r3, r2
 8006b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d003      	beq.n	8006bae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006ba6:	69ba      	ldr	r2, [r7, #24]
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006bae:	4a2f      	ldr	r2, [pc, #188]	; (8006c6c <HAL_GPIO_Init+0x304>)
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006bb4:	4b2d      	ldr	r3, [pc, #180]	; (8006c6c <HAL_GPIO_Init+0x304>)
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	43db      	mvns	r3, r3
 8006bbe:	69ba      	ldr	r2, [r7, #24]
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d003      	beq.n	8006bd8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006bd0:	69ba      	ldr	r2, [r7, #24]
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006bd8:	4a24      	ldr	r2, [pc, #144]	; (8006c6c <HAL_GPIO_Init+0x304>)
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006bde:	4b23      	ldr	r3, [pc, #140]	; (8006c6c <HAL_GPIO_Init+0x304>)
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	43db      	mvns	r3, r3
 8006be8:	69ba      	ldr	r2, [r7, #24]
 8006bea:	4013      	ands	r3, r2
 8006bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d003      	beq.n	8006c02 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006bfa:	69ba      	ldr	r2, [r7, #24]
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006c02:	4a1a      	ldr	r2, [pc, #104]	; (8006c6c <HAL_GPIO_Init+0x304>)
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006c08:	4b18      	ldr	r3, [pc, #96]	; (8006c6c <HAL_GPIO_Init+0x304>)
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	43db      	mvns	r3, r3
 8006c12:	69ba      	ldr	r2, [r7, #24]
 8006c14:	4013      	ands	r3, r2
 8006c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d003      	beq.n	8006c2c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006c24:	69ba      	ldr	r2, [r7, #24]
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006c2c:	4a0f      	ldr	r2, [pc, #60]	; (8006c6c <HAL_GPIO_Init+0x304>)
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	3301      	adds	r3, #1
 8006c36:	61fb      	str	r3, [r7, #28]
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	2b0f      	cmp	r3, #15
 8006c3c:	f67f aea2 	bls.w	8006984 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006c40:	bf00      	nop
 8006c42:	bf00      	nop
 8006c44:	3724      	adds	r7, #36	; 0x24
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	40023800 	.word	0x40023800
 8006c54:	40013800 	.word	0x40013800
 8006c58:	40020000 	.word	0x40020000
 8006c5c:	40020400 	.word	0x40020400
 8006c60:	40020800 	.word	0x40020800
 8006c64:	40020c00 	.word	0x40020c00
 8006c68:	40021000 	.word	0x40021000
 8006c6c:	40013c00 	.word	0x40013c00

08006c70 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b087      	sub	sp, #28
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006c82:	2300      	movs	r3, #0
 8006c84:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c86:	2300      	movs	r3, #0
 8006c88:	617b      	str	r3, [r7, #20]
 8006c8a:	e0bb      	b.n	8006e04 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	fa02 f303 	lsl.w	r3, r2, r3
 8006c94:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006c96:	683a      	ldr	r2, [r7, #0]
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	f040 80ab 	bne.w	8006dfe <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006ca8:	4a5c      	ldr	r2, [pc, #368]	; (8006e1c <HAL_GPIO_DeInit+0x1ac>)
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	089b      	lsrs	r3, r3, #2
 8006cae:	3302      	adds	r3, #2
 8006cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cb4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	f003 0303 	and.w	r3, r3, #3
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	220f      	movs	r2, #15
 8006cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a54      	ldr	r2, [pc, #336]	; (8006e20 <HAL_GPIO_DeInit+0x1b0>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d019      	beq.n	8006d06 <HAL_GPIO_DeInit+0x96>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a53      	ldr	r2, [pc, #332]	; (8006e24 <HAL_GPIO_DeInit+0x1b4>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d013      	beq.n	8006d02 <HAL_GPIO_DeInit+0x92>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a52      	ldr	r2, [pc, #328]	; (8006e28 <HAL_GPIO_DeInit+0x1b8>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d00d      	beq.n	8006cfe <HAL_GPIO_DeInit+0x8e>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a51      	ldr	r2, [pc, #324]	; (8006e2c <HAL_GPIO_DeInit+0x1bc>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d007      	beq.n	8006cfa <HAL_GPIO_DeInit+0x8a>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a50      	ldr	r2, [pc, #320]	; (8006e30 <HAL_GPIO_DeInit+0x1c0>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d101      	bne.n	8006cf6 <HAL_GPIO_DeInit+0x86>
 8006cf2:	2304      	movs	r3, #4
 8006cf4:	e008      	b.n	8006d08 <HAL_GPIO_DeInit+0x98>
 8006cf6:	2307      	movs	r3, #7
 8006cf8:	e006      	b.n	8006d08 <HAL_GPIO_DeInit+0x98>
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e004      	b.n	8006d08 <HAL_GPIO_DeInit+0x98>
 8006cfe:	2302      	movs	r3, #2
 8006d00:	e002      	b.n	8006d08 <HAL_GPIO_DeInit+0x98>
 8006d02:	2301      	movs	r3, #1
 8006d04:	e000      	b.n	8006d08 <HAL_GPIO_DeInit+0x98>
 8006d06:	2300      	movs	r3, #0
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	f002 0203 	and.w	r2, r2, #3
 8006d0e:	0092      	lsls	r2, r2, #2
 8006d10:	4093      	lsls	r3, r2
 8006d12:	68ba      	ldr	r2, [r7, #8]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d132      	bne.n	8006d7e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006d18:	4b46      	ldr	r3, [pc, #280]	; (8006e34 <HAL_GPIO_DeInit+0x1c4>)
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	43db      	mvns	r3, r3
 8006d20:	4944      	ldr	r1, [pc, #272]	; (8006e34 <HAL_GPIO_DeInit+0x1c4>)
 8006d22:	4013      	ands	r3, r2
 8006d24:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006d26:	4b43      	ldr	r3, [pc, #268]	; (8006e34 <HAL_GPIO_DeInit+0x1c4>)
 8006d28:	685a      	ldr	r2, [r3, #4]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	43db      	mvns	r3, r3
 8006d2e:	4941      	ldr	r1, [pc, #260]	; (8006e34 <HAL_GPIO_DeInit+0x1c4>)
 8006d30:	4013      	ands	r3, r2
 8006d32:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006d34:	4b3f      	ldr	r3, [pc, #252]	; (8006e34 <HAL_GPIO_DeInit+0x1c4>)
 8006d36:	689a      	ldr	r2, [r3, #8]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	43db      	mvns	r3, r3
 8006d3c:	493d      	ldr	r1, [pc, #244]	; (8006e34 <HAL_GPIO_DeInit+0x1c4>)
 8006d3e:	4013      	ands	r3, r2
 8006d40:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006d42:	4b3c      	ldr	r3, [pc, #240]	; (8006e34 <HAL_GPIO_DeInit+0x1c4>)
 8006d44:	68da      	ldr	r2, [r3, #12]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	43db      	mvns	r3, r3
 8006d4a:	493a      	ldr	r1, [pc, #232]	; (8006e34 <HAL_GPIO_DeInit+0x1c4>)
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	f003 0303 	and.w	r3, r3, #3
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	220f      	movs	r2, #15
 8006d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006d60:	4a2e      	ldr	r2, [pc, #184]	; (8006e1c <HAL_GPIO_DeInit+0x1ac>)
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	089b      	lsrs	r3, r3, #2
 8006d66:	3302      	adds	r3, #2
 8006d68:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	43da      	mvns	r2, r3
 8006d70:	482a      	ldr	r0, [pc, #168]	; (8006e1c <HAL_GPIO_DeInit+0x1ac>)
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	089b      	lsrs	r3, r3, #2
 8006d76:	400a      	ands	r2, r1
 8006d78:	3302      	adds	r3, #2
 8006d7a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	005b      	lsls	r3, r3, #1
 8006d86:	2103      	movs	r1, #3
 8006d88:	fa01 f303 	lsl.w	r3, r1, r3
 8006d8c:	43db      	mvns	r3, r3
 8006d8e:	401a      	ands	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	08da      	lsrs	r2, r3, #3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	3208      	adds	r2, #8
 8006d9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	f003 0307 	and.w	r3, r3, #7
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	220f      	movs	r2, #15
 8006daa:	fa02 f303 	lsl.w	r3, r2, r3
 8006dae:	43db      	mvns	r3, r3
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	08d2      	lsrs	r2, r2, #3
 8006db4:	4019      	ands	r1, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	3208      	adds	r2, #8
 8006dba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	68da      	ldr	r2, [r3, #12]
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	005b      	lsls	r3, r3, #1
 8006dc6:	2103      	movs	r1, #3
 8006dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dcc:	43db      	mvns	r3, r3
 8006dce:	401a      	ands	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685a      	ldr	r2, [r3, #4]
 8006dd8:	2101      	movs	r1, #1
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8006de0:	43db      	mvns	r3, r3
 8006de2:	401a      	ands	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	689a      	ldr	r2, [r3, #8]
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	005b      	lsls	r3, r3, #1
 8006df0:	2103      	movs	r1, #3
 8006df2:	fa01 f303 	lsl.w	r3, r1, r3
 8006df6:	43db      	mvns	r3, r3
 8006df8:	401a      	ands	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	3301      	adds	r3, #1
 8006e02:	617b      	str	r3, [r7, #20]
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	2b0f      	cmp	r3, #15
 8006e08:	f67f af40 	bls.w	8006c8c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006e0c:	bf00      	nop
 8006e0e:	bf00      	nop
 8006e10:	371c      	adds	r7, #28
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	40013800 	.word	0x40013800
 8006e20:	40020000 	.word	0x40020000
 8006e24:	40020400 	.word	0x40020400
 8006e28:	40020800 	.word	0x40020800
 8006e2c:	40020c00 	.word	0x40020c00
 8006e30:	40021000 	.word	0x40021000
 8006e34:	40013c00 	.word	0x40013c00

08006e38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	460b      	mov	r3, r1
 8006e42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	691a      	ldr	r2, [r3, #16]
 8006e48:	887b      	ldrh	r3, [r7, #2]
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d002      	beq.n	8006e56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006e50:	2301      	movs	r3, #1
 8006e52:	73fb      	strb	r3, [r7, #15]
 8006e54:	e001      	b.n	8006e5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006e56:	2300      	movs	r3, #0
 8006e58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3714      	adds	r7, #20
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	460b      	mov	r3, r1
 8006e72:	807b      	strh	r3, [r7, #2]
 8006e74:	4613      	mov	r3, r2
 8006e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006e78:	787b      	ldrb	r3, [r7, #1]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d003      	beq.n	8006e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006e7e:	887a      	ldrh	r2, [r7, #2]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006e84:	e003      	b.n	8006e8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006e86:	887b      	ldrh	r3, [r7, #2]
 8006e88:	041a      	lsls	r2, r3, #16
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	619a      	str	r2, [r3, #24]
}
 8006e8e:	bf00      	nop
 8006e90:	370c      	adds	r7, #12
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
	...

08006e9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e12b      	b.n	8007106 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d106      	bne.n	8006ec8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7fc ffb2 	bl	8003e2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2224      	movs	r2, #36	; 0x24
 8006ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f022 0201 	bic.w	r2, r2, #1
 8006ede:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006eee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006efe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006f00:	f001 fbdc 	bl	80086bc <HAL_RCC_GetPCLK1Freq>
 8006f04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	4a81      	ldr	r2, [pc, #516]	; (8007110 <HAL_I2C_Init+0x274>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d807      	bhi.n	8006f20 <HAL_I2C_Init+0x84>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	4a80      	ldr	r2, [pc, #512]	; (8007114 <HAL_I2C_Init+0x278>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	bf94      	ite	ls
 8006f18:	2301      	movls	r3, #1
 8006f1a:	2300      	movhi	r3, #0
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	e006      	b.n	8006f2e <HAL_I2C_Init+0x92>
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	4a7d      	ldr	r2, [pc, #500]	; (8007118 <HAL_I2C_Init+0x27c>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	bf94      	ite	ls
 8006f28:	2301      	movls	r3, #1
 8006f2a:	2300      	movhi	r3, #0
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d001      	beq.n	8006f36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e0e7      	b.n	8007106 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	4a78      	ldr	r2, [pc, #480]	; (800711c <HAL_I2C_Init+0x280>)
 8006f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f3e:	0c9b      	lsrs	r3, r3, #18
 8006f40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	430a      	orrs	r2, r1
 8006f54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	6a1b      	ldr	r3, [r3, #32]
 8006f5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	4a6a      	ldr	r2, [pc, #424]	; (8007110 <HAL_I2C_Init+0x274>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d802      	bhi.n	8006f70 <HAL_I2C_Init+0xd4>
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	e009      	b.n	8006f84 <HAL_I2C_Init+0xe8>
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006f76:	fb02 f303 	mul.w	r3, r2, r3
 8006f7a:	4a69      	ldr	r2, [pc, #420]	; (8007120 <HAL_I2C_Init+0x284>)
 8006f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f80:	099b      	lsrs	r3, r3, #6
 8006f82:	3301      	adds	r3, #1
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	6812      	ldr	r2, [r2, #0]
 8006f88:	430b      	orrs	r3, r1
 8006f8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	69db      	ldr	r3, [r3, #28]
 8006f92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006f96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	495c      	ldr	r1, [pc, #368]	; (8007110 <HAL_I2C_Init+0x274>)
 8006fa0:	428b      	cmp	r3, r1
 8006fa2:	d819      	bhi.n	8006fd8 <HAL_I2C_Init+0x13c>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	1e59      	subs	r1, r3, #1
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	005b      	lsls	r3, r3, #1
 8006fae:	fbb1 f3f3 	udiv	r3, r1, r3
 8006fb2:	1c59      	adds	r1, r3, #1
 8006fb4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006fb8:	400b      	ands	r3, r1
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00a      	beq.n	8006fd4 <HAL_I2C_Init+0x138>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	1e59      	subs	r1, r3, #1
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	005b      	lsls	r3, r3, #1
 8006fc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8006fcc:	3301      	adds	r3, #1
 8006fce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fd2:	e051      	b.n	8007078 <HAL_I2C_Init+0x1dc>
 8006fd4:	2304      	movs	r3, #4
 8006fd6:	e04f      	b.n	8007078 <HAL_I2C_Init+0x1dc>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d111      	bne.n	8007004 <HAL_I2C_Init+0x168>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	1e58      	subs	r0, r3, #1
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6859      	ldr	r1, [r3, #4]
 8006fe8:	460b      	mov	r3, r1
 8006fea:	005b      	lsls	r3, r3, #1
 8006fec:	440b      	add	r3, r1
 8006fee:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	bf0c      	ite	eq
 8006ffc:	2301      	moveq	r3, #1
 8006ffe:	2300      	movne	r3, #0
 8007000:	b2db      	uxtb	r3, r3
 8007002:	e012      	b.n	800702a <HAL_I2C_Init+0x18e>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	1e58      	subs	r0, r3, #1
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6859      	ldr	r1, [r3, #4]
 800700c:	460b      	mov	r3, r1
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	440b      	add	r3, r1
 8007012:	0099      	lsls	r1, r3, #2
 8007014:	440b      	add	r3, r1
 8007016:	fbb0 f3f3 	udiv	r3, r0, r3
 800701a:	3301      	adds	r3, #1
 800701c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007020:	2b00      	cmp	r3, #0
 8007022:	bf0c      	ite	eq
 8007024:	2301      	moveq	r3, #1
 8007026:	2300      	movne	r3, #0
 8007028:	b2db      	uxtb	r3, r3
 800702a:	2b00      	cmp	r3, #0
 800702c:	d001      	beq.n	8007032 <HAL_I2C_Init+0x196>
 800702e:	2301      	movs	r3, #1
 8007030:	e022      	b.n	8007078 <HAL_I2C_Init+0x1dc>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10e      	bne.n	8007058 <HAL_I2C_Init+0x1bc>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	1e58      	subs	r0, r3, #1
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6859      	ldr	r1, [r3, #4]
 8007042:	460b      	mov	r3, r1
 8007044:	005b      	lsls	r3, r3, #1
 8007046:	440b      	add	r3, r1
 8007048:	fbb0 f3f3 	udiv	r3, r0, r3
 800704c:	3301      	adds	r3, #1
 800704e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007056:	e00f      	b.n	8007078 <HAL_I2C_Init+0x1dc>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	1e58      	subs	r0, r3, #1
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6859      	ldr	r1, [r3, #4]
 8007060:	460b      	mov	r3, r1
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	440b      	add	r3, r1
 8007066:	0099      	lsls	r1, r3, #2
 8007068:	440b      	add	r3, r1
 800706a:	fbb0 f3f3 	udiv	r3, r0, r3
 800706e:	3301      	adds	r3, #1
 8007070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007074:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007078:	6879      	ldr	r1, [r7, #4]
 800707a:	6809      	ldr	r1, [r1, #0]
 800707c:	4313      	orrs	r3, r2
 800707e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	69da      	ldr	r2, [r3, #28]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	431a      	orrs	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	430a      	orrs	r2, r1
 800709a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80070a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	6911      	ldr	r1, [r2, #16]
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	68d2      	ldr	r2, [r2, #12]
 80070b2:	4311      	orrs	r1, r2
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	6812      	ldr	r2, [r2, #0]
 80070b8:	430b      	orrs	r3, r1
 80070ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	695a      	ldr	r2, [r3, #20]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	431a      	orrs	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	430a      	orrs	r2, r1
 80070d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f042 0201 	orr.w	r2, r2, #1
 80070e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2220      	movs	r2, #32
 80070f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	000186a0 	.word	0x000186a0
 8007114:	001e847f 	.word	0x001e847f
 8007118:	003d08ff 	.word	0x003d08ff
 800711c:	431bde83 	.word	0x431bde83
 8007120:	10624dd3 	.word	0x10624dd3

08007124 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e021      	b.n	800717a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2224      	movs	r2, #36	; 0x24
 800713a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f022 0201 	bic.w	r2, r2, #1
 800714c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7fc feb4 	bl	8003ebc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3708      	adds	r7, #8
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
	...

08007184 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b088      	sub	sp, #32
 8007188:	af02      	add	r7, sp, #8
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	4608      	mov	r0, r1
 800718e:	4611      	mov	r1, r2
 8007190:	461a      	mov	r2, r3
 8007192:	4603      	mov	r3, r0
 8007194:	817b      	strh	r3, [r7, #10]
 8007196:	460b      	mov	r3, r1
 8007198:	813b      	strh	r3, [r7, #8]
 800719a:	4613      	mov	r3, r2
 800719c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800719e:	f7fe feaf 	bl	8005f00 <HAL_GetTick>
 80071a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b20      	cmp	r3, #32
 80071ae:	f040 80d9 	bne.w	8007364 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	9300      	str	r3, [sp, #0]
 80071b6:	2319      	movs	r3, #25
 80071b8:	2201      	movs	r2, #1
 80071ba:	496d      	ldr	r1, [pc, #436]	; (8007370 <HAL_I2C_Mem_Write+0x1ec>)
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f000 fc7f 	bl	8007ac0 <I2C_WaitOnFlagUntilTimeout>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d001      	beq.n	80071cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80071c8:	2302      	movs	r3, #2
 80071ca:	e0cc      	b.n	8007366 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d101      	bne.n	80071da <HAL_I2C_Mem_Write+0x56>
 80071d6:	2302      	movs	r3, #2
 80071d8:	e0c5      	b.n	8007366 <HAL_I2C_Mem_Write+0x1e2>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d007      	beq.n	8007200 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f042 0201 	orr.w	r2, r2, #1
 80071fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800720e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2221      	movs	r2, #33	; 0x21
 8007214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2240      	movs	r2, #64	; 0x40
 800721c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6a3a      	ldr	r2, [r7, #32]
 800722a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007230:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007236:	b29a      	uxth	r2, r3
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4a4d      	ldr	r2, [pc, #308]	; (8007374 <HAL_I2C_Mem_Write+0x1f0>)
 8007240:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007242:	88f8      	ldrh	r0, [r7, #6]
 8007244:	893a      	ldrh	r2, [r7, #8]
 8007246:	8979      	ldrh	r1, [r7, #10]
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	9301      	str	r3, [sp, #4]
 800724c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724e:	9300      	str	r3, [sp, #0]
 8007250:	4603      	mov	r3, r0
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f000 fab6 	bl	80077c4 <I2C_RequestMemoryWrite>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d052      	beq.n	8007304 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e081      	b.n	8007366 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	f000 fd00 	bl	8007c6c <I2C_WaitOnTXEFlagUntilTimeout>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00d      	beq.n	800728e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007276:	2b04      	cmp	r3, #4
 8007278:	d107      	bne.n	800728a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007288:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e06b      	b.n	8007366 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007292:	781a      	ldrb	r2, [r3, #0]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729e:	1c5a      	adds	r2, r3, #1
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072a8:	3b01      	subs	r3, #1
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	3b01      	subs	r3, #1
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	695b      	ldr	r3, [r3, #20]
 80072c4:	f003 0304 	and.w	r3, r3, #4
 80072c8:	2b04      	cmp	r3, #4
 80072ca:	d11b      	bne.n	8007304 <HAL_I2C_Mem_Write+0x180>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d017      	beq.n	8007304 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d8:	781a      	ldrb	r2, [r3, #0]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e4:	1c5a      	adds	r2, r3, #1
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072ee:	3b01      	subs	r3, #1
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	3b01      	subs	r3, #1
 80072fe:	b29a      	uxth	r2, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1aa      	bne.n	8007262 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800730c:	697a      	ldr	r2, [r7, #20]
 800730e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f000 fcec 	bl	8007cee <I2C_WaitOnBTFFlagUntilTimeout>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00d      	beq.n	8007338 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007320:	2b04      	cmp	r3, #4
 8007322:	d107      	bne.n	8007334 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007332:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	e016      	b.n	8007366 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007346:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2220      	movs	r2, #32
 800734c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2200      	movs	r2, #0
 8007354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007360:	2300      	movs	r3, #0
 8007362:	e000      	b.n	8007366 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007364:	2302      	movs	r3, #2
  }
}
 8007366:	4618      	mov	r0, r3
 8007368:	3718      	adds	r7, #24
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	00100002 	.word	0x00100002
 8007374:	ffff0000 	.word	0xffff0000

08007378 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b08c      	sub	sp, #48	; 0x30
 800737c:	af02      	add	r7, sp, #8
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	4608      	mov	r0, r1
 8007382:	4611      	mov	r1, r2
 8007384:	461a      	mov	r2, r3
 8007386:	4603      	mov	r3, r0
 8007388:	817b      	strh	r3, [r7, #10]
 800738a:	460b      	mov	r3, r1
 800738c:	813b      	strh	r3, [r7, #8]
 800738e:	4613      	mov	r3, r2
 8007390:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007392:	f7fe fdb5 	bl	8005f00 <HAL_GetTick>
 8007396:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	2b20      	cmp	r3, #32
 80073a2:	f040 8208 	bne.w	80077b6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80073a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a8:	9300      	str	r3, [sp, #0]
 80073aa:	2319      	movs	r3, #25
 80073ac:	2201      	movs	r2, #1
 80073ae:	497b      	ldr	r1, [pc, #492]	; (800759c <HAL_I2C_Mem_Read+0x224>)
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f000 fb85 	bl	8007ac0 <I2C_WaitOnFlagUntilTimeout>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d001      	beq.n	80073c0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80073bc:	2302      	movs	r3, #2
 80073be:	e1fb      	b.n	80077b8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d101      	bne.n	80073ce <HAL_I2C_Mem_Read+0x56>
 80073ca:	2302      	movs	r3, #2
 80073cc:	e1f4      	b.n	80077b8 <HAL_I2C_Mem_Read+0x440>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2201      	movs	r2, #1
 80073d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 0301 	and.w	r3, r3, #1
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d007      	beq.n	80073f4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f042 0201 	orr.w	r2, r2, #1
 80073f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007402:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2222      	movs	r2, #34	; 0x22
 8007408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2240      	movs	r2, #64	; 0x40
 8007410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800741e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007424:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800742a:	b29a      	uxth	r2, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	4a5b      	ldr	r2, [pc, #364]	; (80075a0 <HAL_I2C_Mem_Read+0x228>)
 8007434:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007436:	88f8      	ldrh	r0, [r7, #6]
 8007438:	893a      	ldrh	r2, [r7, #8]
 800743a:	8979      	ldrh	r1, [r7, #10]
 800743c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743e:	9301      	str	r3, [sp, #4]
 8007440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007442:	9300      	str	r3, [sp, #0]
 8007444:	4603      	mov	r3, r0
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f000 fa52 	bl	80078f0 <I2C_RequestMemoryRead>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e1b0      	b.n	80077b8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800745a:	2b00      	cmp	r3, #0
 800745c:	d113      	bne.n	8007486 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800745e:	2300      	movs	r3, #0
 8007460:	623b      	str	r3, [r7, #32]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	623b      	str	r3, [r7, #32]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	699b      	ldr	r3, [r3, #24]
 8007470:	623b      	str	r3, [r7, #32]
 8007472:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007482:	601a      	str	r2, [r3, #0]
 8007484:	e184      	b.n	8007790 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800748a:	2b01      	cmp	r3, #1
 800748c:	d11b      	bne.n	80074c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800749c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800749e:	2300      	movs	r3, #0
 80074a0:	61fb      	str	r3, [r7, #28]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	695b      	ldr	r3, [r3, #20]
 80074a8:	61fb      	str	r3, [r7, #28]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	61fb      	str	r3, [r7, #28]
 80074b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074c2:	601a      	str	r2, [r3, #0]
 80074c4:	e164      	b.n	8007790 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d11b      	bne.n	8007506 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074ee:	2300      	movs	r3, #0
 80074f0:	61bb      	str	r3, [r7, #24]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	695b      	ldr	r3, [r3, #20]
 80074f8:	61bb      	str	r3, [r7, #24]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	61bb      	str	r3, [r7, #24]
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	e144      	b.n	8007790 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007506:	2300      	movs	r3, #0
 8007508:	617b      	str	r3, [r7, #20]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	695b      	ldr	r3, [r3, #20]
 8007510:	617b      	str	r3, [r7, #20]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	699b      	ldr	r3, [r3, #24]
 8007518:	617b      	str	r3, [r7, #20]
 800751a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800751c:	e138      	b.n	8007790 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007522:	2b03      	cmp	r3, #3
 8007524:	f200 80f1 	bhi.w	800770a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800752c:	2b01      	cmp	r3, #1
 800752e:	d123      	bne.n	8007578 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007532:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f000 fc1b 	bl	8007d70 <I2C_WaitOnRXNEFlagUntilTimeout>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d001      	beq.n	8007544 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	e139      	b.n	80077b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	691a      	ldr	r2, [r3, #16]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754e:	b2d2      	uxtb	r2, r2
 8007550:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007556:	1c5a      	adds	r2, r3, #1
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007560:	3b01      	subs	r3, #1
 8007562:	b29a      	uxth	r2, r3
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800756c:	b29b      	uxth	r3, r3
 800756e:	3b01      	subs	r3, #1
 8007570:	b29a      	uxth	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007576:	e10b      	b.n	8007790 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800757c:	2b02      	cmp	r3, #2
 800757e:	d14e      	bne.n	800761e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007586:	2200      	movs	r2, #0
 8007588:	4906      	ldr	r1, [pc, #24]	; (80075a4 <HAL_I2C_Mem_Read+0x22c>)
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f000 fa98 	bl	8007ac0 <I2C_WaitOnFlagUntilTimeout>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d008      	beq.n	80075a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e10e      	b.n	80077b8 <HAL_I2C_Mem_Read+0x440>
 800759a:	bf00      	nop
 800759c:	00100002 	.word	0x00100002
 80075a0:	ffff0000 	.word	0xffff0000
 80075a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	691a      	ldr	r2, [r3, #16]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c2:	b2d2      	uxtb	r2, r2
 80075c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ca:	1c5a      	adds	r2, r3, #1
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075d4:	3b01      	subs	r3, #1
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	3b01      	subs	r3, #1
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	691a      	ldr	r2, [r3, #16]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f4:	b2d2      	uxtb	r2, r2
 80075f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fc:	1c5a      	adds	r2, r3, #1
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007606:	3b01      	subs	r3, #1
 8007608:	b29a      	uxth	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007612:	b29b      	uxth	r3, r3
 8007614:	3b01      	subs	r3, #1
 8007616:	b29a      	uxth	r2, r3
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800761c:	e0b8      	b.n	8007790 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800761e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007624:	2200      	movs	r2, #0
 8007626:	4966      	ldr	r1, [pc, #408]	; (80077c0 <HAL_I2C_Mem_Read+0x448>)
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f000 fa49 	bl	8007ac0 <I2C_WaitOnFlagUntilTimeout>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d001      	beq.n	8007638 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e0bf      	b.n	80077b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007646:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	691a      	ldr	r2, [r3, #16]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007652:	b2d2      	uxtb	r2, r2
 8007654:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765a:	1c5a      	adds	r2, r3, #1
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007664:	3b01      	subs	r3, #1
 8007666:	b29a      	uxth	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007670:	b29b      	uxth	r3, r3
 8007672:	3b01      	subs	r3, #1
 8007674:	b29a      	uxth	r2, r3
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800767a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007680:	2200      	movs	r2, #0
 8007682:	494f      	ldr	r1, [pc, #316]	; (80077c0 <HAL_I2C_Mem_Read+0x448>)
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f000 fa1b 	bl	8007ac0 <I2C_WaitOnFlagUntilTimeout>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d001      	beq.n	8007694 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	e091      	b.n	80077b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	691a      	ldr	r2, [r3, #16]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ae:	b2d2      	uxtb	r2, r2
 80076b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b6:	1c5a      	adds	r2, r3, #1
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076c0:	3b01      	subs	r3, #1
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	3b01      	subs	r3, #1
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	691a      	ldr	r2, [r3, #16]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e0:	b2d2      	uxtb	r2, r2
 80076e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e8:	1c5a      	adds	r2, r3, #1
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076f2:	3b01      	subs	r3, #1
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076fe:	b29b      	uxth	r3, r3
 8007700:	3b01      	subs	r3, #1
 8007702:	b29a      	uxth	r2, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007708:	e042      	b.n	8007790 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800770a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800770c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	f000 fb2e 	bl	8007d70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d001      	beq.n	800771e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e04c      	b.n	80077b8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	691a      	ldr	r2, [r3, #16]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007728:	b2d2      	uxtb	r2, r2
 800772a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007730:	1c5a      	adds	r2, r3, #1
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800773a:	3b01      	subs	r3, #1
 800773c:	b29a      	uxth	r2, r3
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007746:	b29b      	uxth	r3, r3
 8007748:	3b01      	subs	r3, #1
 800774a:	b29a      	uxth	r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	695b      	ldr	r3, [r3, #20]
 8007756:	f003 0304 	and.w	r3, r3, #4
 800775a:	2b04      	cmp	r3, #4
 800775c:	d118      	bne.n	8007790 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	691a      	ldr	r2, [r3, #16]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007768:	b2d2      	uxtb	r2, r2
 800776a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007770:	1c5a      	adds	r2, r3, #1
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800777a:	3b01      	subs	r3, #1
 800777c:	b29a      	uxth	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007786:	b29b      	uxth	r3, r3
 8007788:	3b01      	subs	r3, #1
 800778a:	b29a      	uxth	r2, r3
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007794:	2b00      	cmp	r3, #0
 8007796:	f47f aec2 	bne.w	800751e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2220      	movs	r2, #32
 800779e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80077b2:	2300      	movs	r3, #0
 80077b4:	e000      	b.n	80077b8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80077b6:	2302      	movs	r3, #2
  }
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3728      	adds	r7, #40	; 0x28
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	00010004 	.word	0x00010004

080077c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b088      	sub	sp, #32
 80077c8:	af02      	add	r7, sp, #8
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	4608      	mov	r0, r1
 80077ce:	4611      	mov	r1, r2
 80077d0:	461a      	mov	r2, r3
 80077d2:	4603      	mov	r3, r0
 80077d4:	817b      	strh	r3, [r7, #10]
 80077d6:	460b      	mov	r3, r1
 80077d8:	813b      	strh	r3, [r7, #8]
 80077da:	4613      	mov	r3, r2
 80077dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80077ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f0:	9300      	str	r3, [sp, #0]
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f000 f960 	bl	8007ac0 <I2C_WaitOnFlagUntilTimeout>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00d      	beq.n	8007822 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007814:	d103      	bne.n	800781e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800781c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800781e:	2303      	movs	r3, #3
 8007820:	e05f      	b.n	80078e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007822:	897b      	ldrh	r3, [r7, #10]
 8007824:	b2db      	uxtb	r3, r3
 8007826:	461a      	mov	r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007830:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007834:	6a3a      	ldr	r2, [r7, #32]
 8007836:	492d      	ldr	r1, [pc, #180]	; (80078ec <I2C_RequestMemoryWrite+0x128>)
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f000 f998 	bl	8007b6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d001      	beq.n	8007848 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e04c      	b.n	80078e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007848:	2300      	movs	r3, #0
 800784a:	617b      	str	r3, [r7, #20]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	617b      	str	r3, [r7, #20]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	617b      	str	r3, [r7, #20]
 800785c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800785e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007860:	6a39      	ldr	r1, [r7, #32]
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f000 fa02 	bl	8007c6c <I2C_WaitOnTXEFlagUntilTimeout>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00d      	beq.n	800788a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007872:	2b04      	cmp	r3, #4
 8007874:	d107      	bne.n	8007886 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007884:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e02b      	b.n	80078e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800788a:	88fb      	ldrh	r3, [r7, #6]
 800788c:	2b01      	cmp	r3, #1
 800788e:	d105      	bne.n	800789c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007890:	893b      	ldrh	r3, [r7, #8]
 8007892:	b2da      	uxtb	r2, r3
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	611a      	str	r2, [r3, #16]
 800789a:	e021      	b.n	80078e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800789c:	893b      	ldrh	r3, [r7, #8]
 800789e:	0a1b      	lsrs	r3, r3, #8
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	b2da      	uxtb	r2, r3
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ac:	6a39      	ldr	r1, [r7, #32]
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f000 f9dc 	bl	8007c6c <I2C_WaitOnTXEFlagUntilTimeout>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d00d      	beq.n	80078d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078be:	2b04      	cmp	r3, #4
 80078c0:	d107      	bne.n	80078d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e005      	b.n	80078e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80078d6:	893b      	ldrh	r3, [r7, #8]
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3718      	adds	r7, #24
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	00010002 	.word	0x00010002

080078f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b088      	sub	sp, #32
 80078f4:	af02      	add	r7, sp, #8
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	4608      	mov	r0, r1
 80078fa:	4611      	mov	r1, r2
 80078fc:	461a      	mov	r2, r3
 80078fe:	4603      	mov	r3, r0
 8007900:	817b      	strh	r3, [r7, #10]
 8007902:	460b      	mov	r3, r1
 8007904:	813b      	strh	r3, [r7, #8]
 8007906:	4613      	mov	r3, r2
 8007908:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007918:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007928:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800792a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	6a3b      	ldr	r3, [r7, #32]
 8007930:	2200      	movs	r2, #0
 8007932:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007936:	68f8      	ldr	r0, [r7, #12]
 8007938:	f000 f8c2 	bl	8007ac0 <I2C_WaitOnFlagUntilTimeout>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00d      	beq.n	800795e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800794c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007950:	d103      	bne.n	800795a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007958:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800795a:	2303      	movs	r3, #3
 800795c:	e0aa      	b.n	8007ab4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800795e:	897b      	ldrh	r3, [r7, #10]
 8007960:	b2db      	uxtb	r3, r3
 8007962:	461a      	mov	r2, r3
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800796c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007970:	6a3a      	ldr	r2, [r7, #32]
 8007972:	4952      	ldr	r1, [pc, #328]	; (8007abc <I2C_RequestMemoryRead+0x1cc>)
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f000 f8fa 	bl	8007b6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d001      	beq.n	8007984 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e097      	b.n	8007ab4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007984:	2300      	movs	r3, #0
 8007986:	617b      	str	r3, [r7, #20]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	695b      	ldr	r3, [r3, #20]
 800798e:	617b      	str	r3, [r7, #20]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	617b      	str	r3, [r7, #20]
 8007998:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800799a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800799c:	6a39      	ldr	r1, [r7, #32]
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f000 f964 	bl	8007c6c <I2C_WaitOnTXEFlagUntilTimeout>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00d      	beq.n	80079c6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ae:	2b04      	cmp	r3, #4
 80079b0:	d107      	bne.n	80079c2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	e076      	b.n	8007ab4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80079c6:	88fb      	ldrh	r3, [r7, #6]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d105      	bne.n	80079d8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80079cc:	893b      	ldrh	r3, [r7, #8]
 80079ce:	b2da      	uxtb	r2, r3
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	611a      	str	r2, [r3, #16]
 80079d6:	e021      	b.n	8007a1c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80079d8:	893b      	ldrh	r3, [r7, #8]
 80079da:	0a1b      	lsrs	r3, r3, #8
 80079dc:	b29b      	uxth	r3, r3
 80079de:	b2da      	uxtb	r2, r3
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079e8:	6a39      	ldr	r1, [r7, #32]
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	f000 f93e 	bl	8007c6c <I2C_WaitOnTXEFlagUntilTimeout>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00d      	beq.n	8007a12 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fa:	2b04      	cmp	r3, #4
 80079fc:	d107      	bne.n	8007a0e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e050      	b.n	8007ab4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a12:	893b      	ldrh	r3, [r7, #8]
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a1e:	6a39      	ldr	r1, [r7, #32]
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f000 f923 	bl	8007c6c <I2C_WaitOnTXEFlagUntilTimeout>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00d      	beq.n	8007a48 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a30:	2b04      	cmp	r3, #4
 8007a32:	d107      	bne.n	8007a44 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a42:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	e035      	b.n	8007ab4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a56:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5a:	9300      	str	r3, [sp, #0]
 8007a5c:	6a3b      	ldr	r3, [r7, #32]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f000 f82b 	bl	8007ac0 <I2C_WaitOnFlagUntilTimeout>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00d      	beq.n	8007a8c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a7e:	d103      	bne.n	8007a88 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	e013      	b.n	8007ab4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007a8c:	897b      	ldrh	r3, [r7, #10]
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	f043 0301 	orr.w	r3, r3, #1
 8007a94:	b2da      	uxtb	r2, r3
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9e:	6a3a      	ldr	r2, [r7, #32]
 8007aa0:	4906      	ldr	r1, [pc, #24]	; (8007abc <I2C_RequestMemoryRead+0x1cc>)
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	f000 f863 	bl	8007b6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d001      	beq.n	8007ab2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e000      	b.n	8007ab4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3718      	adds	r7, #24
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	00010002 	.word	0x00010002

08007ac0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	603b      	str	r3, [r7, #0]
 8007acc:	4613      	mov	r3, r2
 8007ace:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ad0:	e025      	b.n	8007b1e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad8:	d021      	beq.n	8007b1e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ada:	f7fe fa11 	bl	8005f00 <HAL_GetTick>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	683a      	ldr	r2, [r7, #0]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d302      	bcc.n	8007af0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d116      	bne.n	8007b1e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2220      	movs	r2, #32
 8007afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0a:	f043 0220 	orr.w	r2, r3, #32
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e023      	b.n	8007b66 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	0c1b      	lsrs	r3, r3, #16
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d10d      	bne.n	8007b44 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	43da      	mvns	r2, r3
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	4013      	ands	r3, r2
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	bf0c      	ite	eq
 8007b3a:	2301      	moveq	r3, #1
 8007b3c:	2300      	movne	r3, #0
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	461a      	mov	r2, r3
 8007b42:	e00c      	b.n	8007b5e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	699b      	ldr	r3, [r3, #24]
 8007b4a:	43da      	mvns	r2, r3
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	4013      	ands	r3, r2
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	bf0c      	ite	eq
 8007b56:	2301      	moveq	r3, #1
 8007b58:	2300      	movne	r3, #0
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	79fb      	ldrb	r3, [r7, #7]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d0b6      	beq.n	8007ad2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b084      	sub	sp, #16
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	60f8      	str	r0, [r7, #12]
 8007b76:	60b9      	str	r1, [r7, #8]
 8007b78:	607a      	str	r2, [r7, #4]
 8007b7a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007b7c:	e051      	b.n	8007c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	695b      	ldr	r3, [r3, #20]
 8007b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b8c:	d123      	bne.n	8007bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b9c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007ba6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2220      	movs	r2, #32
 8007bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc2:	f043 0204 	orr.w	r2, r3, #4
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e046      	b.n	8007c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bdc:	d021      	beq.n	8007c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bde:	f7fe f98f 	bl	8005f00 <HAL_GetTick>
 8007be2:	4602      	mov	r2, r0
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	1ad3      	subs	r3, r2, r3
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d302      	bcc.n	8007bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d116      	bne.n	8007c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2220      	movs	r2, #32
 8007bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c0e:	f043 0220 	orr.w	r2, r3, #32
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e020      	b.n	8007c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	0c1b      	lsrs	r3, r3, #16
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d10c      	bne.n	8007c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	43da      	mvns	r2, r3
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	4013      	ands	r3, r2
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	bf14      	ite	ne
 8007c3e:	2301      	movne	r3, #1
 8007c40:	2300      	moveq	r3, #0
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	e00b      	b.n	8007c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	43da      	mvns	r2, r3
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	4013      	ands	r3, r2
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	bf14      	ite	ne
 8007c58:	2301      	movne	r3, #1
 8007c5a:	2300      	moveq	r3, #0
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d18d      	bne.n	8007b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c78:	e02d      	b.n	8007cd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f000 f8ce 	bl	8007e1c <I2C_IsAcknowledgeFailed>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d001      	beq.n	8007c8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e02d      	b.n	8007ce6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c90:	d021      	beq.n	8007cd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c92:	f7fe f935 	bl	8005f00 <HAL_GetTick>
 8007c96:	4602      	mov	r2, r0
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d302      	bcc.n	8007ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d116      	bne.n	8007cd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2200      	movs	r2, #0
 8007cac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2220      	movs	r2, #32
 8007cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc2:	f043 0220 	orr.w	r2, r3, #32
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e007      	b.n	8007ce6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	695b      	ldr	r3, [r3, #20]
 8007cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ce0:	2b80      	cmp	r3, #128	; 0x80
 8007ce2:	d1ca      	bne.n	8007c7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b084      	sub	sp, #16
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	60f8      	str	r0, [r7, #12]
 8007cf6:	60b9      	str	r1, [r7, #8]
 8007cf8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007cfa:	e02d      	b.n	8007d58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f000 f88d 	bl	8007e1c <I2C_IsAcknowledgeFailed>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d001      	beq.n	8007d0c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e02d      	b.n	8007d68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d12:	d021      	beq.n	8007d58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d14:	f7fe f8f4 	bl	8005f00 <HAL_GetTick>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	68ba      	ldr	r2, [r7, #8]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d302      	bcc.n	8007d2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d116      	bne.n	8007d58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2220      	movs	r2, #32
 8007d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d44:	f043 0220 	orr.w	r2, r3, #32
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e007      	b.n	8007d68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	695b      	ldr	r3, [r3, #20]
 8007d5e:	f003 0304 	and.w	r3, r3, #4
 8007d62:	2b04      	cmp	r3, #4
 8007d64:	d1ca      	bne.n	8007cfc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007d7c:	e042      	b.n	8007e04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	695b      	ldr	r3, [r3, #20]
 8007d84:	f003 0310 	and.w	r3, r3, #16
 8007d88:	2b10      	cmp	r3, #16
 8007d8a:	d119      	bne.n	8007dc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f06f 0210 	mvn.w	r2, #16
 8007d94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2220      	movs	r2, #32
 8007da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e029      	b.n	8007e14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dc0:	f7fe f89e 	bl	8005f00 <HAL_GetTick>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d302      	bcc.n	8007dd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d116      	bne.n	8007e04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2220      	movs	r2, #32
 8007de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df0:	f043 0220 	orr.w	r2, r3, #32
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e007      	b.n	8007e14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e0e:	2b40      	cmp	r3, #64	; 0x40
 8007e10:	d1b5      	bne.n	8007d7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007e12:	2300      	movs	r3, #0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	695b      	ldr	r3, [r3, #20]
 8007e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e32:	d11b      	bne.n	8007e6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2220      	movs	r2, #32
 8007e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e58:	f043 0204 	orr.w	r2, r3, #4
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e000      	b.n	8007e6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	370c      	adds	r7, #12
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr
	...

08007e7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b086      	sub	sp, #24
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d101      	bne.n	8007e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e264      	b.n	8008358 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d075      	beq.n	8007f86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007e9a:	4ba3      	ldr	r3, [pc, #652]	; (8008128 <HAL_RCC_OscConfig+0x2ac>)
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	f003 030c 	and.w	r3, r3, #12
 8007ea2:	2b04      	cmp	r3, #4
 8007ea4:	d00c      	beq.n	8007ec0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007ea6:	4ba0      	ldr	r3, [pc, #640]	; (8008128 <HAL_RCC_OscConfig+0x2ac>)
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007eae:	2b08      	cmp	r3, #8
 8007eb0:	d112      	bne.n	8007ed8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007eb2:	4b9d      	ldr	r3, [pc, #628]	; (8008128 <HAL_RCC_OscConfig+0x2ac>)
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007eba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ebe:	d10b      	bne.n	8007ed8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ec0:	4b99      	ldr	r3, [pc, #612]	; (8008128 <HAL_RCC_OscConfig+0x2ac>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d05b      	beq.n	8007f84 <HAL_RCC_OscConfig+0x108>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d157      	bne.n	8007f84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e23f      	b.n	8008358 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ee0:	d106      	bne.n	8007ef0 <HAL_RCC_OscConfig+0x74>
 8007ee2:	4b91      	ldr	r3, [pc, #580]	; (8008128 <HAL_RCC_OscConfig+0x2ac>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a90      	ldr	r2, [pc, #576]	; (8008128 <HAL_RCC_OscConfig+0x2ac>)
 8007ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007eec:	6013      	str	r3, [r2, #0]
 8007eee:	e01d      	b.n	8007f2c <HAL_RCC_OscConfig+0xb0>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ef8:	d10c      	bne.n	8007f14 <HAL_RCC_OscConfig+0x98>
 8007efa:	4b8b      	ldr	r3, [pc, #556]	; (8008128 <HAL_RCC_OscConfig+0x2ac>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a8a      	ldr	r2, [pc, #552]	; (8008128 <HAL_RCC_OscConfig+0x2ac>)
 8007f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f04:	6013      	str	r3, [r2, #0]
 8007f06:	4b88      	ldr	r3, [pc, #544]	; (8008128 <HAL_RCC_OscConfig+0x2ac>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a87      	ldr	r2, [pc, #540]	; (8008128 <HAL_RCC_OscConfig+0x2ac>)
 8007f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f10:	6013      	str	r3, [r2, #0]
 8007f12:	e00b      	b.n	8007f2c <HAL_RCC_OscConfig+0xb0>
 8007f14:	4b84      	ldr	r3, [pc, #528]	; (8008128 <HAL_RCC_OscConfig+0x2ac>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a83      	ldr	r2, [pc, #524]	; (8008128 <HAL_RCC_OscConfig+0x2ac>)
 8007f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f1e:	6013      	str	r3, [r2, #0]
 8007f20:	4b81      	ldr	r3, [pc, #516]	; (8008128 <HAL_RCC_OscConfig+0x2ac>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a80      	ldr	r2, [pc, #512]	; (8008128 <HAL_RCC_OscConfig+0x2ac>)
 8007f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d013      	beq.n	8007f5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f34:	f7fd ffe4 	bl	8005f00 <HAL_GetTick>
 8007f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f3a:	e008      	b.n	8007f4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f3c:	f7fd ffe0 	bl	8005f00 <HAL_GetTick>
 8007f40:	4602      	mov	r2, r0
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	1ad3      	subs	r3, r2, r3
 8007f46:	2b64      	cmp	r3, #100	; 0x64
 8007f48:	d901      	bls.n	8007f4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	e204      	b.n	8008358 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f4e:	4b76      	ldr	r3, [pc, #472]	; (8008128 <HAL_RCC_OscConfig+0x2ac>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d0f0      	beq.n	8007f3c <HAL_RCC_OscConfig+0xc0>
 8007f5a:	e014      	b.n	8007f86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f5c:	f7fd ffd0 	bl	8005f00 <HAL_GetTick>
 8007f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f62:	e008      	b.n	8007f76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f64:	f7fd ffcc 	bl	8005f00 <HAL_GetTick>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	1ad3      	subs	r3, r2, r3
 8007f6e:	2b64      	cmp	r3, #100	; 0x64
 8007f70:	d901      	bls.n	8007f76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007f72:	2303      	movs	r3, #3
 8007f74:	e1f0      	b.n	8008358 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f76:	4b6c      	ldr	r3, [pc, #432]	; (8008128 <HAL_RCC_OscConfig+0x2ac>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1f0      	bne.n	8007f64 <HAL_RCC_OscConfig+0xe8>
 8007f82:	e000      	b.n	8007f86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0302 	and.w	r3, r3, #2
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d063      	beq.n	800805a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007f92:	4b65      	ldr	r3, [pc, #404]	; (8008128 <HAL_RCC_OscConfig+0x2ac>)
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	f003 030c 	and.w	r3, r3, #12
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00b      	beq.n	8007fb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f9e:	4b62      	ldr	r3, [pc, #392]	; (8008128 <HAL_RCC_OscConfig+0x2ac>)
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007fa6:	2b08      	cmp	r3, #8
 8007fa8:	d11c      	bne.n	8007fe4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007faa:	4b5f      	ldr	r3, [pc, #380]	; (8008128 <HAL_RCC_OscConfig+0x2ac>)
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d116      	bne.n	8007fe4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007fb6:	4b5c      	ldr	r3, [pc, #368]	; (8008128 <HAL_RCC_OscConfig+0x2ac>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 0302 	and.w	r3, r3, #2
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d005      	beq.n	8007fce <HAL_RCC_OscConfig+0x152>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d001      	beq.n	8007fce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e1c4      	b.n	8008358 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fce:	4b56      	ldr	r3, [pc, #344]	; (8008128 <HAL_RCC_OscConfig+0x2ac>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	00db      	lsls	r3, r3, #3
 8007fdc:	4952      	ldr	r1, [pc, #328]	; (8008128 <HAL_RCC_OscConfig+0x2ac>)
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007fe2:	e03a      	b.n	800805a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d020      	beq.n	800802e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007fec:	4b4f      	ldr	r3, [pc, #316]	; (800812c <HAL_RCC_OscConfig+0x2b0>)
 8007fee:	2201      	movs	r2, #1
 8007ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ff2:	f7fd ff85 	bl	8005f00 <HAL_GetTick>
 8007ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ff8:	e008      	b.n	800800c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ffa:	f7fd ff81 	bl	8005f00 <HAL_GetTick>
 8007ffe:	4602      	mov	r2, r0
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	1ad3      	subs	r3, r2, r3
 8008004:	2b02      	cmp	r3, #2
 8008006:	d901      	bls.n	800800c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008008:	2303      	movs	r3, #3
 800800a:	e1a5      	b.n	8008358 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800800c:	4b46      	ldr	r3, [pc, #280]	; (8008128 <HAL_RCC_OscConfig+0x2ac>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 0302 	and.w	r3, r3, #2
 8008014:	2b00      	cmp	r3, #0
 8008016:	d0f0      	beq.n	8007ffa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008018:	4b43      	ldr	r3, [pc, #268]	; (8008128 <HAL_RCC_OscConfig+0x2ac>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	00db      	lsls	r3, r3, #3
 8008026:	4940      	ldr	r1, [pc, #256]	; (8008128 <HAL_RCC_OscConfig+0x2ac>)
 8008028:	4313      	orrs	r3, r2
 800802a:	600b      	str	r3, [r1, #0]
 800802c:	e015      	b.n	800805a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800802e:	4b3f      	ldr	r3, [pc, #252]	; (800812c <HAL_RCC_OscConfig+0x2b0>)
 8008030:	2200      	movs	r2, #0
 8008032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008034:	f7fd ff64 	bl	8005f00 <HAL_GetTick>
 8008038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800803a:	e008      	b.n	800804e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800803c:	f7fd ff60 	bl	8005f00 <HAL_GetTick>
 8008040:	4602      	mov	r2, r0
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	1ad3      	subs	r3, r2, r3
 8008046:	2b02      	cmp	r3, #2
 8008048:	d901      	bls.n	800804e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800804a:	2303      	movs	r3, #3
 800804c:	e184      	b.n	8008358 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800804e:	4b36      	ldr	r3, [pc, #216]	; (8008128 <HAL_RCC_OscConfig+0x2ac>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 0302 	and.w	r3, r3, #2
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1f0      	bne.n	800803c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f003 0308 	and.w	r3, r3, #8
 8008062:	2b00      	cmp	r3, #0
 8008064:	d030      	beq.n	80080c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d016      	beq.n	800809c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800806e:	4b30      	ldr	r3, [pc, #192]	; (8008130 <HAL_RCC_OscConfig+0x2b4>)
 8008070:	2201      	movs	r2, #1
 8008072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008074:	f7fd ff44 	bl	8005f00 <HAL_GetTick>
 8008078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800807a:	e008      	b.n	800808e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800807c:	f7fd ff40 	bl	8005f00 <HAL_GetTick>
 8008080:	4602      	mov	r2, r0
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	1ad3      	subs	r3, r2, r3
 8008086:	2b02      	cmp	r3, #2
 8008088:	d901      	bls.n	800808e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800808a:	2303      	movs	r3, #3
 800808c:	e164      	b.n	8008358 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800808e:	4b26      	ldr	r3, [pc, #152]	; (8008128 <HAL_RCC_OscConfig+0x2ac>)
 8008090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008092:	f003 0302 	and.w	r3, r3, #2
 8008096:	2b00      	cmp	r3, #0
 8008098:	d0f0      	beq.n	800807c <HAL_RCC_OscConfig+0x200>
 800809a:	e015      	b.n	80080c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800809c:	4b24      	ldr	r3, [pc, #144]	; (8008130 <HAL_RCC_OscConfig+0x2b4>)
 800809e:	2200      	movs	r2, #0
 80080a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080a2:	f7fd ff2d 	bl	8005f00 <HAL_GetTick>
 80080a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080a8:	e008      	b.n	80080bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080aa:	f7fd ff29 	bl	8005f00 <HAL_GetTick>
 80080ae:	4602      	mov	r2, r0
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d901      	bls.n	80080bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80080b8:	2303      	movs	r3, #3
 80080ba:	e14d      	b.n	8008358 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080bc:	4b1a      	ldr	r3, [pc, #104]	; (8008128 <HAL_RCC_OscConfig+0x2ac>)
 80080be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080c0:	f003 0302 	and.w	r3, r3, #2
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d1f0      	bne.n	80080aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f003 0304 	and.w	r3, r3, #4
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f000 80a0 	beq.w	8008216 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80080d6:	2300      	movs	r3, #0
 80080d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80080da:	4b13      	ldr	r3, [pc, #76]	; (8008128 <HAL_RCC_OscConfig+0x2ac>)
 80080dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d10f      	bne.n	8008106 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80080e6:	2300      	movs	r3, #0
 80080e8:	60bb      	str	r3, [r7, #8]
 80080ea:	4b0f      	ldr	r3, [pc, #60]	; (8008128 <HAL_RCC_OscConfig+0x2ac>)
 80080ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ee:	4a0e      	ldr	r2, [pc, #56]	; (8008128 <HAL_RCC_OscConfig+0x2ac>)
 80080f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080f4:	6413      	str	r3, [r2, #64]	; 0x40
 80080f6:	4b0c      	ldr	r3, [pc, #48]	; (8008128 <HAL_RCC_OscConfig+0x2ac>)
 80080f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080fe:	60bb      	str	r3, [r7, #8]
 8008100:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008102:	2301      	movs	r3, #1
 8008104:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008106:	4b0b      	ldr	r3, [pc, #44]	; (8008134 <HAL_RCC_OscConfig+0x2b8>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800810e:	2b00      	cmp	r3, #0
 8008110:	d121      	bne.n	8008156 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008112:	4b08      	ldr	r3, [pc, #32]	; (8008134 <HAL_RCC_OscConfig+0x2b8>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a07      	ldr	r2, [pc, #28]	; (8008134 <HAL_RCC_OscConfig+0x2b8>)
 8008118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800811c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800811e:	f7fd feef 	bl	8005f00 <HAL_GetTick>
 8008122:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008124:	e011      	b.n	800814a <HAL_RCC_OscConfig+0x2ce>
 8008126:	bf00      	nop
 8008128:	40023800 	.word	0x40023800
 800812c:	42470000 	.word	0x42470000
 8008130:	42470e80 	.word	0x42470e80
 8008134:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008138:	f7fd fee2 	bl	8005f00 <HAL_GetTick>
 800813c:	4602      	mov	r2, r0
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	1ad3      	subs	r3, r2, r3
 8008142:	2b02      	cmp	r3, #2
 8008144:	d901      	bls.n	800814a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008146:	2303      	movs	r3, #3
 8008148:	e106      	b.n	8008358 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800814a:	4b85      	ldr	r3, [pc, #532]	; (8008360 <HAL_RCC_OscConfig+0x4e4>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008152:	2b00      	cmp	r3, #0
 8008154:	d0f0      	beq.n	8008138 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	2b01      	cmp	r3, #1
 800815c:	d106      	bne.n	800816c <HAL_RCC_OscConfig+0x2f0>
 800815e:	4b81      	ldr	r3, [pc, #516]	; (8008364 <HAL_RCC_OscConfig+0x4e8>)
 8008160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008162:	4a80      	ldr	r2, [pc, #512]	; (8008364 <HAL_RCC_OscConfig+0x4e8>)
 8008164:	f043 0301 	orr.w	r3, r3, #1
 8008168:	6713      	str	r3, [r2, #112]	; 0x70
 800816a:	e01c      	b.n	80081a6 <HAL_RCC_OscConfig+0x32a>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	2b05      	cmp	r3, #5
 8008172:	d10c      	bne.n	800818e <HAL_RCC_OscConfig+0x312>
 8008174:	4b7b      	ldr	r3, [pc, #492]	; (8008364 <HAL_RCC_OscConfig+0x4e8>)
 8008176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008178:	4a7a      	ldr	r2, [pc, #488]	; (8008364 <HAL_RCC_OscConfig+0x4e8>)
 800817a:	f043 0304 	orr.w	r3, r3, #4
 800817e:	6713      	str	r3, [r2, #112]	; 0x70
 8008180:	4b78      	ldr	r3, [pc, #480]	; (8008364 <HAL_RCC_OscConfig+0x4e8>)
 8008182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008184:	4a77      	ldr	r2, [pc, #476]	; (8008364 <HAL_RCC_OscConfig+0x4e8>)
 8008186:	f043 0301 	orr.w	r3, r3, #1
 800818a:	6713      	str	r3, [r2, #112]	; 0x70
 800818c:	e00b      	b.n	80081a6 <HAL_RCC_OscConfig+0x32a>
 800818e:	4b75      	ldr	r3, [pc, #468]	; (8008364 <HAL_RCC_OscConfig+0x4e8>)
 8008190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008192:	4a74      	ldr	r2, [pc, #464]	; (8008364 <HAL_RCC_OscConfig+0x4e8>)
 8008194:	f023 0301 	bic.w	r3, r3, #1
 8008198:	6713      	str	r3, [r2, #112]	; 0x70
 800819a:	4b72      	ldr	r3, [pc, #456]	; (8008364 <HAL_RCC_OscConfig+0x4e8>)
 800819c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800819e:	4a71      	ldr	r2, [pc, #452]	; (8008364 <HAL_RCC_OscConfig+0x4e8>)
 80081a0:	f023 0304 	bic.w	r3, r3, #4
 80081a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d015      	beq.n	80081da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081ae:	f7fd fea7 	bl	8005f00 <HAL_GetTick>
 80081b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081b4:	e00a      	b.n	80081cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081b6:	f7fd fea3 	bl	8005f00 <HAL_GetTick>
 80081ba:	4602      	mov	r2, r0
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d901      	bls.n	80081cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80081c8:	2303      	movs	r3, #3
 80081ca:	e0c5      	b.n	8008358 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081cc:	4b65      	ldr	r3, [pc, #404]	; (8008364 <HAL_RCC_OscConfig+0x4e8>)
 80081ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d0:	f003 0302 	and.w	r3, r3, #2
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d0ee      	beq.n	80081b6 <HAL_RCC_OscConfig+0x33a>
 80081d8:	e014      	b.n	8008204 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081da:	f7fd fe91 	bl	8005f00 <HAL_GetTick>
 80081de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80081e0:	e00a      	b.n	80081f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081e2:	f7fd fe8d 	bl	8005f00 <HAL_GetTick>
 80081e6:	4602      	mov	r2, r0
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	1ad3      	subs	r3, r2, r3
 80081ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d901      	bls.n	80081f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80081f4:	2303      	movs	r3, #3
 80081f6:	e0af      	b.n	8008358 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80081f8:	4b5a      	ldr	r3, [pc, #360]	; (8008364 <HAL_RCC_OscConfig+0x4e8>)
 80081fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081fc:	f003 0302 	and.w	r3, r3, #2
 8008200:	2b00      	cmp	r3, #0
 8008202:	d1ee      	bne.n	80081e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008204:	7dfb      	ldrb	r3, [r7, #23]
 8008206:	2b01      	cmp	r3, #1
 8008208:	d105      	bne.n	8008216 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800820a:	4b56      	ldr	r3, [pc, #344]	; (8008364 <HAL_RCC_OscConfig+0x4e8>)
 800820c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820e:	4a55      	ldr	r2, [pc, #340]	; (8008364 <HAL_RCC_OscConfig+0x4e8>)
 8008210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008214:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	699b      	ldr	r3, [r3, #24]
 800821a:	2b00      	cmp	r3, #0
 800821c:	f000 809b 	beq.w	8008356 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008220:	4b50      	ldr	r3, [pc, #320]	; (8008364 <HAL_RCC_OscConfig+0x4e8>)
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	f003 030c 	and.w	r3, r3, #12
 8008228:	2b08      	cmp	r3, #8
 800822a:	d05c      	beq.n	80082e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	699b      	ldr	r3, [r3, #24]
 8008230:	2b02      	cmp	r3, #2
 8008232:	d141      	bne.n	80082b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008234:	4b4c      	ldr	r3, [pc, #304]	; (8008368 <HAL_RCC_OscConfig+0x4ec>)
 8008236:	2200      	movs	r2, #0
 8008238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800823a:	f7fd fe61 	bl	8005f00 <HAL_GetTick>
 800823e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008240:	e008      	b.n	8008254 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008242:	f7fd fe5d 	bl	8005f00 <HAL_GetTick>
 8008246:	4602      	mov	r2, r0
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	1ad3      	subs	r3, r2, r3
 800824c:	2b02      	cmp	r3, #2
 800824e:	d901      	bls.n	8008254 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008250:	2303      	movs	r3, #3
 8008252:	e081      	b.n	8008358 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008254:	4b43      	ldr	r3, [pc, #268]	; (8008364 <HAL_RCC_OscConfig+0x4e8>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800825c:	2b00      	cmp	r3, #0
 800825e:	d1f0      	bne.n	8008242 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	69da      	ldr	r2, [r3, #28]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a1b      	ldr	r3, [r3, #32]
 8008268:	431a      	orrs	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826e:	019b      	lsls	r3, r3, #6
 8008270:	431a      	orrs	r2, r3
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008276:	085b      	lsrs	r3, r3, #1
 8008278:	3b01      	subs	r3, #1
 800827a:	041b      	lsls	r3, r3, #16
 800827c:	431a      	orrs	r2, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008282:	061b      	lsls	r3, r3, #24
 8008284:	4937      	ldr	r1, [pc, #220]	; (8008364 <HAL_RCC_OscConfig+0x4e8>)
 8008286:	4313      	orrs	r3, r2
 8008288:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800828a:	4b37      	ldr	r3, [pc, #220]	; (8008368 <HAL_RCC_OscConfig+0x4ec>)
 800828c:	2201      	movs	r2, #1
 800828e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008290:	f7fd fe36 	bl	8005f00 <HAL_GetTick>
 8008294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008296:	e008      	b.n	80082aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008298:	f7fd fe32 	bl	8005f00 <HAL_GetTick>
 800829c:	4602      	mov	r2, r0
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	1ad3      	subs	r3, r2, r3
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	d901      	bls.n	80082aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80082a6:	2303      	movs	r3, #3
 80082a8:	e056      	b.n	8008358 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082aa:	4b2e      	ldr	r3, [pc, #184]	; (8008364 <HAL_RCC_OscConfig+0x4e8>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d0f0      	beq.n	8008298 <HAL_RCC_OscConfig+0x41c>
 80082b6:	e04e      	b.n	8008356 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082b8:	4b2b      	ldr	r3, [pc, #172]	; (8008368 <HAL_RCC_OscConfig+0x4ec>)
 80082ba:	2200      	movs	r2, #0
 80082bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082be:	f7fd fe1f 	bl	8005f00 <HAL_GetTick>
 80082c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082c4:	e008      	b.n	80082d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082c6:	f7fd fe1b 	bl	8005f00 <HAL_GetTick>
 80082ca:	4602      	mov	r2, r0
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	1ad3      	subs	r3, r2, r3
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	d901      	bls.n	80082d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80082d4:	2303      	movs	r3, #3
 80082d6:	e03f      	b.n	8008358 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082d8:	4b22      	ldr	r3, [pc, #136]	; (8008364 <HAL_RCC_OscConfig+0x4e8>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1f0      	bne.n	80082c6 <HAL_RCC_OscConfig+0x44a>
 80082e4:	e037      	b.n	8008356 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	699b      	ldr	r3, [r3, #24]
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d101      	bne.n	80082f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	e032      	b.n	8008358 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80082f2:	4b1c      	ldr	r3, [pc, #112]	; (8008364 <HAL_RCC_OscConfig+0x4e8>)
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	699b      	ldr	r3, [r3, #24]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d028      	beq.n	8008352 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800830a:	429a      	cmp	r2, r3
 800830c:	d121      	bne.n	8008352 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008318:	429a      	cmp	r2, r3
 800831a:	d11a      	bne.n	8008352 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008322:	4013      	ands	r3, r2
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008328:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800832a:	4293      	cmp	r3, r2
 800832c:	d111      	bne.n	8008352 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008338:	085b      	lsrs	r3, r3, #1
 800833a:	3b01      	subs	r3, #1
 800833c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800833e:	429a      	cmp	r2, r3
 8008340:	d107      	bne.n	8008352 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800834c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800834e:	429a      	cmp	r2, r3
 8008350:	d001      	beq.n	8008356 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e000      	b.n	8008358 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8008356:	2300      	movs	r3, #0
}
 8008358:	4618      	mov	r0, r3
 800835a:	3718      	adds	r7, #24
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	40007000 	.word	0x40007000
 8008364:	40023800 	.word	0x40023800
 8008368:	42470060 	.word	0x42470060

0800836c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d101      	bne.n	8008380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	e0cc      	b.n	800851a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008380:	4b68      	ldr	r3, [pc, #416]	; (8008524 <HAL_RCC_ClockConfig+0x1b8>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f003 0307 	and.w	r3, r3, #7
 8008388:	683a      	ldr	r2, [r7, #0]
 800838a:	429a      	cmp	r2, r3
 800838c:	d90c      	bls.n	80083a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800838e:	4b65      	ldr	r3, [pc, #404]	; (8008524 <HAL_RCC_ClockConfig+0x1b8>)
 8008390:	683a      	ldr	r2, [r7, #0]
 8008392:	b2d2      	uxtb	r2, r2
 8008394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008396:	4b63      	ldr	r3, [pc, #396]	; (8008524 <HAL_RCC_ClockConfig+0x1b8>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 0307 	and.w	r3, r3, #7
 800839e:	683a      	ldr	r2, [r7, #0]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d001      	beq.n	80083a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	e0b8      	b.n	800851a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f003 0302 	and.w	r3, r3, #2
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d020      	beq.n	80083f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 0304 	and.w	r3, r3, #4
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d005      	beq.n	80083cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80083c0:	4b59      	ldr	r3, [pc, #356]	; (8008528 <HAL_RCC_ClockConfig+0x1bc>)
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	4a58      	ldr	r2, [pc, #352]	; (8008528 <HAL_RCC_ClockConfig+0x1bc>)
 80083c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80083ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 0308 	and.w	r3, r3, #8
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d005      	beq.n	80083e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80083d8:	4b53      	ldr	r3, [pc, #332]	; (8008528 <HAL_RCC_ClockConfig+0x1bc>)
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	4a52      	ldr	r2, [pc, #328]	; (8008528 <HAL_RCC_ClockConfig+0x1bc>)
 80083de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80083e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083e4:	4b50      	ldr	r3, [pc, #320]	; (8008528 <HAL_RCC_ClockConfig+0x1bc>)
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	494d      	ldr	r1, [pc, #308]	; (8008528 <HAL_RCC_ClockConfig+0x1bc>)
 80083f2:	4313      	orrs	r3, r2
 80083f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f003 0301 	and.w	r3, r3, #1
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d044      	beq.n	800848c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	2b01      	cmp	r3, #1
 8008408:	d107      	bne.n	800841a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800840a:	4b47      	ldr	r3, [pc, #284]	; (8008528 <HAL_RCC_ClockConfig+0x1bc>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008412:	2b00      	cmp	r3, #0
 8008414:	d119      	bne.n	800844a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008416:	2301      	movs	r3, #1
 8008418:	e07f      	b.n	800851a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	2b02      	cmp	r3, #2
 8008420:	d003      	beq.n	800842a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008426:	2b03      	cmp	r3, #3
 8008428:	d107      	bne.n	800843a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800842a:	4b3f      	ldr	r3, [pc, #252]	; (8008528 <HAL_RCC_ClockConfig+0x1bc>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008432:	2b00      	cmp	r3, #0
 8008434:	d109      	bne.n	800844a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	e06f      	b.n	800851a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800843a:	4b3b      	ldr	r3, [pc, #236]	; (8008528 <HAL_RCC_ClockConfig+0x1bc>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f003 0302 	and.w	r3, r3, #2
 8008442:	2b00      	cmp	r3, #0
 8008444:	d101      	bne.n	800844a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	e067      	b.n	800851a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800844a:	4b37      	ldr	r3, [pc, #220]	; (8008528 <HAL_RCC_ClockConfig+0x1bc>)
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	f023 0203 	bic.w	r2, r3, #3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	4934      	ldr	r1, [pc, #208]	; (8008528 <HAL_RCC_ClockConfig+0x1bc>)
 8008458:	4313      	orrs	r3, r2
 800845a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800845c:	f7fd fd50 	bl	8005f00 <HAL_GetTick>
 8008460:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008462:	e00a      	b.n	800847a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008464:	f7fd fd4c 	bl	8005f00 <HAL_GetTick>
 8008468:	4602      	mov	r2, r0
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008472:	4293      	cmp	r3, r2
 8008474:	d901      	bls.n	800847a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008476:	2303      	movs	r3, #3
 8008478:	e04f      	b.n	800851a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800847a:	4b2b      	ldr	r3, [pc, #172]	; (8008528 <HAL_RCC_ClockConfig+0x1bc>)
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	f003 020c 	and.w	r2, r3, #12
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	429a      	cmp	r2, r3
 800848a:	d1eb      	bne.n	8008464 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800848c:	4b25      	ldr	r3, [pc, #148]	; (8008524 <HAL_RCC_ClockConfig+0x1b8>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 0307 	and.w	r3, r3, #7
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	429a      	cmp	r2, r3
 8008498:	d20c      	bcs.n	80084b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800849a:	4b22      	ldr	r3, [pc, #136]	; (8008524 <HAL_RCC_ClockConfig+0x1b8>)
 800849c:	683a      	ldr	r2, [r7, #0]
 800849e:	b2d2      	uxtb	r2, r2
 80084a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084a2:	4b20      	ldr	r3, [pc, #128]	; (8008524 <HAL_RCC_ClockConfig+0x1b8>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f003 0307 	and.w	r3, r3, #7
 80084aa:	683a      	ldr	r2, [r7, #0]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d001      	beq.n	80084b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	e032      	b.n	800851a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 0304 	and.w	r3, r3, #4
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d008      	beq.n	80084d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80084c0:	4b19      	ldr	r3, [pc, #100]	; (8008528 <HAL_RCC_ClockConfig+0x1bc>)
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	4916      	ldr	r1, [pc, #88]	; (8008528 <HAL_RCC_ClockConfig+0x1bc>)
 80084ce:	4313      	orrs	r3, r2
 80084d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f003 0308 	and.w	r3, r3, #8
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d009      	beq.n	80084f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80084de:	4b12      	ldr	r3, [pc, #72]	; (8008528 <HAL_RCC_ClockConfig+0x1bc>)
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	00db      	lsls	r3, r3, #3
 80084ec:	490e      	ldr	r1, [pc, #56]	; (8008528 <HAL_RCC_ClockConfig+0x1bc>)
 80084ee:	4313      	orrs	r3, r2
 80084f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80084f2:	f000 f821 	bl	8008538 <HAL_RCC_GetSysClockFreq>
 80084f6:	4602      	mov	r2, r0
 80084f8:	4b0b      	ldr	r3, [pc, #44]	; (8008528 <HAL_RCC_ClockConfig+0x1bc>)
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	091b      	lsrs	r3, r3, #4
 80084fe:	f003 030f 	and.w	r3, r3, #15
 8008502:	490a      	ldr	r1, [pc, #40]	; (800852c <HAL_RCC_ClockConfig+0x1c0>)
 8008504:	5ccb      	ldrb	r3, [r1, r3]
 8008506:	fa22 f303 	lsr.w	r3, r2, r3
 800850a:	4a09      	ldr	r2, [pc, #36]	; (8008530 <HAL_RCC_ClockConfig+0x1c4>)
 800850c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800850e:	4b09      	ldr	r3, [pc, #36]	; (8008534 <HAL_RCC_ClockConfig+0x1c8>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4618      	mov	r0, r3
 8008514:	f7fd fcb0 	bl	8005e78 <HAL_InitTick>

  return HAL_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	40023c00 	.word	0x40023c00
 8008528:	40023800 	.word	0x40023800
 800852c:	08015da8 	.word	0x08015da8
 8008530:	20000004 	.word	0x20000004
 8008534:	20000050 	.word	0x20000050

08008538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008538:	b5b0      	push	{r4, r5, r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800853e:	2100      	movs	r1, #0
 8008540:	6079      	str	r1, [r7, #4]
 8008542:	2100      	movs	r1, #0
 8008544:	60f9      	str	r1, [r7, #12]
 8008546:	2100      	movs	r1, #0
 8008548:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800854a:	2100      	movs	r1, #0
 800854c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800854e:	4952      	ldr	r1, [pc, #328]	; (8008698 <HAL_RCC_GetSysClockFreq+0x160>)
 8008550:	6889      	ldr	r1, [r1, #8]
 8008552:	f001 010c 	and.w	r1, r1, #12
 8008556:	2908      	cmp	r1, #8
 8008558:	d00d      	beq.n	8008576 <HAL_RCC_GetSysClockFreq+0x3e>
 800855a:	2908      	cmp	r1, #8
 800855c:	f200 8094 	bhi.w	8008688 <HAL_RCC_GetSysClockFreq+0x150>
 8008560:	2900      	cmp	r1, #0
 8008562:	d002      	beq.n	800856a <HAL_RCC_GetSysClockFreq+0x32>
 8008564:	2904      	cmp	r1, #4
 8008566:	d003      	beq.n	8008570 <HAL_RCC_GetSysClockFreq+0x38>
 8008568:	e08e      	b.n	8008688 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800856a:	4b4c      	ldr	r3, [pc, #304]	; (800869c <HAL_RCC_GetSysClockFreq+0x164>)
 800856c:	60bb      	str	r3, [r7, #8]
       break;
 800856e:	e08e      	b.n	800868e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008570:	4b4b      	ldr	r3, [pc, #300]	; (80086a0 <HAL_RCC_GetSysClockFreq+0x168>)
 8008572:	60bb      	str	r3, [r7, #8]
      break;
 8008574:	e08b      	b.n	800868e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008576:	4948      	ldr	r1, [pc, #288]	; (8008698 <HAL_RCC_GetSysClockFreq+0x160>)
 8008578:	6849      	ldr	r1, [r1, #4]
 800857a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800857e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008580:	4945      	ldr	r1, [pc, #276]	; (8008698 <HAL_RCC_GetSysClockFreq+0x160>)
 8008582:	6849      	ldr	r1, [r1, #4]
 8008584:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8008588:	2900      	cmp	r1, #0
 800858a:	d024      	beq.n	80085d6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800858c:	4942      	ldr	r1, [pc, #264]	; (8008698 <HAL_RCC_GetSysClockFreq+0x160>)
 800858e:	6849      	ldr	r1, [r1, #4]
 8008590:	0989      	lsrs	r1, r1, #6
 8008592:	4608      	mov	r0, r1
 8008594:	f04f 0100 	mov.w	r1, #0
 8008598:	f240 14ff 	movw	r4, #511	; 0x1ff
 800859c:	f04f 0500 	mov.w	r5, #0
 80085a0:	ea00 0204 	and.w	r2, r0, r4
 80085a4:	ea01 0305 	and.w	r3, r1, r5
 80085a8:	493d      	ldr	r1, [pc, #244]	; (80086a0 <HAL_RCC_GetSysClockFreq+0x168>)
 80085aa:	fb01 f003 	mul.w	r0, r1, r3
 80085ae:	2100      	movs	r1, #0
 80085b0:	fb01 f102 	mul.w	r1, r1, r2
 80085b4:	1844      	adds	r4, r0, r1
 80085b6:	493a      	ldr	r1, [pc, #232]	; (80086a0 <HAL_RCC_GetSysClockFreq+0x168>)
 80085b8:	fba2 0101 	umull	r0, r1, r2, r1
 80085bc:	1863      	adds	r3, r4, r1
 80085be:	4619      	mov	r1, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	461a      	mov	r2, r3
 80085c4:	f04f 0300 	mov.w	r3, #0
 80085c8:	f7f8 fb66 	bl	8000c98 <__aeabi_uldivmod>
 80085cc:	4602      	mov	r2, r0
 80085ce:	460b      	mov	r3, r1
 80085d0:	4613      	mov	r3, r2
 80085d2:	60fb      	str	r3, [r7, #12]
 80085d4:	e04a      	b.n	800866c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085d6:	4b30      	ldr	r3, [pc, #192]	; (8008698 <HAL_RCC_GetSysClockFreq+0x160>)
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	099b      	lsrs	r3, r3, #6
 80085dc:	461a      	mov	r2, r3
 80085de:	f04f 0300 	mov.w	r3, #0
 80085e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80085e6:	f04f 0100 	mov.w	r1, #0
 80085ea:	ea02 0400 	and.w	r4, r2, r0
 80085ee:	ea03 0501 	and.w	r5, r3, r1
 80085f2:	4620      	mov	r0, r4
 80085f4:	4629      	mov	r1, r5
 80085f6:	f04f 0200 	mov.w	r2, #0
 80085fa:	f04f 0300 	mov.w	r3, #0
 80085fe:	014b      	lsls	r3, r1, #5
 8008600:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008604:	0142      	lsls	r2, r0, #5
 8008606:	4610      	mov	r0, r2
 8008608:	4619      	mov	r1, r3
 800860a:	1b00      	subs	r0, r0, r4
 800860c:	eb61 0105 	sbc.w	r1, r1, r5
 8008610:	f04f 0200 	mov.w	r2, #0
 8008614:	f04f 0300 	mov.w	r3, #0
 8008618:	018b      	lsls	r3, r1, #6
 800861a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800861e:	0182      	lsls	r2, r0, #6
 8008620:	1a12      	subs	r2, r2, r0
 8008622:	eb63 0301 	sbc.w	r3, r3, r1
 8008626:	f04f 0000 	mov.w	r0, #0
 800862a:	f04f 0100 	mov.w	r1, #0
 800862e:	00d9      	lsls	r1, r3, #3
 8008630:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008634:	00d0      	lsls	r0, r2, #3
 8008636:	4602      	mov	r2, r0
 8008638:	460b      	mov	r3, r1
 800863a:	1912      	adds	r2, r2, r4
 800863c:	eb45 0303 	adc.w	r3, r5, r3
 8008640:	f04f 0000 	mov.w	r0, #0
 8008644:	f04f 0100 	mov.w	r1, #0
 8008648:	0299      	lsls	r1, r3, #10
 800864a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800864e:	0290      	lsls	r0, r2, #10
 8008650:	4602      	mov	r2, r0
 8008652:	460b      	mov	r3, r1
 8008654:	4610      	mov	r0, r2
 8008656:	4619      	mov	r1, r3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	461a      	mov	r2, r3
 800865c:	f04f 0300 	mov.w	r3, #0
 8008660:	f7f8 fb1a 	bl	8000c98 <__aeabi_uldivmod>
 8008664:	4602      	mov	r2, r0
 8008666:	460b      	mov	r3, r1
 8008668:	4613      	mov	r3, r2
 800866a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800866c:	4b0a      	ldr	r3, [pc, #40]	; (8008698 <HAL_RCC_GetSysClockFreq+0x160>)
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	0c1b      	lsrs	r3, r3, #16
 8008672:	f003 0303 	and.w	r3, r3, #3
 8008676:	3301      	adds	r3, #1
 8008678:	005b      	lsls	r3, r3, #1
 800867a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	fbb2 f3f3 	udiv	r3, r2, r3
 8008684:	60bb      	str	r3, [r7, #8]
      break;
 8008686:	e002      	b.n	800868e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008688:	4b04      	ldr	r3, [pc, #16]	; (800869c <HAL_RCC_GetSysClockFreq+0x164>)
 800868a:	60bb      	str	r3, [r7, #8]
      break;
 800868c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800868e:	68bb      	ldr	r3, [r7, #8]
}
 8008690:	4618      	mov	r0, r3
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bdb0      	pop	{r4, r5, r7, pc}
 8008698:	40023800 	.word	0x40023800
 800869c:	00f42400 	.word	0x00f42400
 80086a0:	017d7840 	.word	0x017d7840

080086a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80086a4:	b480      	push	{r7}
 80086a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80086a8:	4b03      	ldr	r3, [pc, #12]	; (80086b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80086aa:	681b      	ldr	r3, [r3, #0]
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop
 80086b8:	20000004 	.word	0x20000004

080086bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80086c0:	f7ff fff0 	bl	80086a4 <HAL_RCC_GetHCLKFreq>
 80086c4:	4602      	mov	r2, r0
 80086c6:	4b05      	ldr	r3, [pc, #20]	; (80086dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	0a9b      	lsrs	r3, r3, #10
 80086cc:	f003 0307 	and.w	r3, r3, #7
 80086d0:	4903      	ldr	r1, [pc, #12]	; (80086e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80086d2:	5ccb      	ldrb	r3, [r1, r3]
 80086d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80086d8:	4618      	mov	r0, r3
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	40023800 	.word	0x40023800
 80086e0:	08015db8 	.word	0x08015db8

080086e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80086e8:	f7ff ffdc 	bl	80086a4 <HAL_RCC_GetHCLKFreq>
 80086ec:	4602      	mov	r2, r0
 80086ee:	4b05      	ldr	r3, [pc, #20]	; (8008704 <HAL_RCC_GetPCLK2Freq+0x20>)
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	0b5b      	lsrs	r3, r3, #13
 80086f4:	f003 0307 	and.w	r3, r3, #7
 80086f8:	4903      	ldr	r1, [pc, #12]	; (8008708 <HAL_RCC_GetPCLK2Freq+0x24>)
 80086fa:	5ccb      	ldrb	r3, [r1, r3]
 80086fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008700:	4618      	mov	r0, r3
 8008702:	bd80      	pop	{r7, pc}
 8008704:	40023800 	.word	0x40023800
 8008708:	08015db8 	.word	0x08015db8

0800870c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d101      	bne.n	800871e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	e022      	b.n	8008764 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b00      	cmp	r3, #0
 8008728:	d105      	bne.n	8008736 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2200      	movs	r2, #0
 800872e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f7fb fbe5 	bl	8003f00 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2203      	movs	r2, #3
 800873a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 f814 	bl	800876c <HAL_SD_InitCard>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d001      	beq.n	800874e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	e00a      	b.n	8008764 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2201      	movs	r2, #1
 800875e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008762:	2300      	movs	r3, #0
}
 8008764:	4618      	mov	r0, r3
 8008766:	3708      	adds	r7, #8
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800876c:	b5b0      	push	{r4, r5, r7, lr}
 800876e:	b08e      	sub	sp, #56	; 0x38
 8008770:	af04      	add	r7, sp, #16
 8008772:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008774:	2300      	movs	r3, #0
 8008776:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008778:	2300      	movs	r3, #0
 800877a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800877c:	2300      	movs	r3, #0
 800877e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008780:	2300      	movs	r3, #0
 8008782:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008784:	2300      	movs	r3, #0
 8008786:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008788:	2376      	movs	r3, #118	; 0x76
 800878a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681d      	ldr	r5, [r3, #0]
 8008790:	466c      	mov	r4, sp
 8008792:	f107 0314 	add.w	r3, r7, #20
 8008796:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800879a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800879e:	f107 0308 	add.w	r3, r7, #8
 80087a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80087a4:	4628      	mov	r0, r5
 80087a6:	f001 fff3 	bl	800a790 <SDIO_Init>
 80087aa:	4603      	mov	r3, r0
 80087ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80087b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d001      	beq.n	80087bc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	e04c      	b.n	8008856 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80087bc:	4b28      	ldr	r3, [pc, #160]	; (8008860 <HAL_SD_InitCard+0xf4>)
 80087be:	2200      	movs	r2, #0
 80087c0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4618      	mov	r0, r3
 80087c8:	f002 f82b 	bl	800a822 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80087cc:	4b24      	ldr	r3, [pc, #144]	; (8008860 <HAL_SD_InitCard+0xf4>)
 80087ce:	2201      	movs	r2, #1
 80087d0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fe68 	bl	80094a8 <SD_PowerON>
 80087d8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80087da:	6a3b      	ldr	r3, [r7, #32]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d00b      	beq.n	80087f8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087ec:	6a3b      	ldr	r3, [r7, #32]
 80087ee:	431a      	orrs	r2, r3
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	e02e      	b.n	8008856 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 fd89 	bl	8009310 <SD_InitCard>
 80087fe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008800:	6a3b      	ldr	r3, [r7, #32]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00b      	beq.n	800881e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2201      	movs	r2, #1
 800880a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008812:	6a3b      	ldr	r3, [r7, #32]
 8008814:	431a      	orrs	r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	e01b      	b.n	8008856 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008826:	4618      	mov	r0, r3
 8008828:	f002 f88e 	bl	800a948 <SDMMC_CmdBlockLength>
 800882c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800882e:	6a3b      	ldr	r3, [r7, #32]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00f      	beq.n	8008854 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a0a      	ldr	r2, [pc, #40]	; (8008864 <HAL_SD_InitCard+0xf8>)
 800883a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008840:	6a3b      	ldr	r3, [r7, #32]
 8008842:	431a      	orrs	r2, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	e000      	b.n	8008856 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	3728      	adds	r7, #40	; 0x28
 800885a:	46bd      	mov	sp, r7
 800885c:	bdb0      	pop	{r4, r5, r7, pc}
 800885e:	bf00      	nop
 8008860:	422580a0 	.word	0x422580a0
 8008864:	004005ff 	.word	0x004005ff

08008868 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b092      	sub	sp, #72	; 0x48
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	607a      	str	r2, [r7, #4]
 8008874:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008876:	f7fd fb43 	bl	8005f00 <HAL_GetTick>
 800887a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d107      	bne.n	800889a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800888e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	e1bd      	b.n	8008c16 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	f040 81b0 	bne.w	8008c08 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80088ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	441a      	add	r2, r3
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d907      	bls.n	80088cc <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	e1a4      	b.n	8008c16 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2203      	movs	r2, #3
 80088d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2200      	movs	r2, #0
 80088da:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d002      	beq.n	80088ea <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80088e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e6:	025b      	lsls	r3, r3, #9
 80088e8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80088ea:	f04f 33ff 	mov.w	r3, #4294967295
 80088ee:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	025b      	lsls	r3, r3, #9
 80088f4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80088f6:	2390      	movs	r3, #144	; 0x90
 80088f8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80088fa:	2302      	movs	r3, #2
 80088fc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80088fe:	2300      	movs	r3, #0
 8008900:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008902:	2301      	movs	r3, #1
 8008904:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f107 0214 	add.w	r2, r7, #20
 800890e:	4611      	mov	r1, r2
 8008910:	4618      	mov	r0, r3
 8008912:	f001 ffed 	bl	800a8f0 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	2b01      	cmp	r3, #1
 800891a:	d90a      	bls.n	8008932 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2202      	movs	r2, #2
 8008920:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008928:	4618      	mov	r0, r3
 800892a:	f002 f851 	bl	800a9d0 <SDMMC_CmdReadMultiBlock>
 800892e:	6478      	str	r0, [r7, #68]	; 0x44
 8008930:	e009      	b.n	8008946 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2201      	movs	r2, #1
 8008936:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800893e:	4618      	mov	r0, r3
 8008940:	f002 f824 	bl	800a98c <SDMMC_CmdReadSingleBlock>
 8008944:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008948:	2b00      	cmp	r3, #0
 800894a:	d012      	beq.n	8008972 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a7a      	ldr	r2, [pc, #488]	; (8008b3c <HAL_SD_ReadBlocks+0x2d4>)
 8008952:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800895a:	431a      	orrs	r2, r3
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2200      	movs	r2, #0
 800896c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	e151      	b.n	8008c16 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008976:	e061      	b.n	8008a3c <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800897e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008982:	2b00      	cmp	r3, #0
 8008984:	d03c      	beq.n	8008a00 <HAL_SD_ReadBlocks+0x198>
 8008986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008988:	2b00      	cmp	r3, #0
 800898a:	d039      	beq.n	8008a00 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800898c:	2300      	movs	r3, #0
 800898e:	643b      	str	r3, [r7, #64]	; 0x40
 8008990:	e033      	b.n	80089fa <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4618      	mov	r0, r3
 8008998:	f001 ff25 	bl	800a7e6 <SDIO_ReadFIFO>
 800899c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800899e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a0:	b2da      	uxtb	r2, r3
 80089a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80089a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a8:	3301      	adds	r3, #1
 80089aa:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80089ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ae:	3b01      	subs	r3, #1
 80089b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80089b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b4:	0a1b      	lsrs	r3, r3, #8
 80089b6:	b2da      	uxtb	r2, r3
 80089b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ba:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80089bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089be:	3301      	adds	r3, #1
 80089c0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80089c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089c4:	3b01      	subs	r3, #1
 80089c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80089c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ca:	0c1b      	lsrs	r3, r3, #16
 80089cc:	b2da      	uxtb	r2, r3
 80089ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80089d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d4:	3301      	adds	r3, #1
 80089d6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80089d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089da:	3b01      	subs	r3, #1
 80089dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80089de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e0:	0e1b      	lsrs	r3, r3, #24
 80089e2:	b2da      	uxtb	r2, r3
 80089e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80089e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ea:	3301      	adds	r3, #1
 80089ec:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80089ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089f0:	3b01      	subs	r3, #1
 80089f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80089f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089f6:	3301      	adds	r3, #1
 80089f8:	643b      	str	r3, [r7, #64]	; 0x40
 80089fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089fc:	2b07      	cmp	r3, #7
 80089fe:	d9c8      	bls.n	8008992 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008a00:	f7fd fa7e 	bl	8005f00 <HAL_GetTick>
 8008a04:	4602      	mov	r2, r0
 8008a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d902      	bls.n	8008a16 <HAL_SD_ReadBlocks+0x1ae>
 8008a10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d112      	bne.n	8008a3c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a48      	ldr	r2, [pc, #288]	; (8008b3c <HAL_SD_ReadBlocks+0x2d4>)
 8008a1c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a22:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008a38:	2303      	movs	r3, #3
 8008a3a:	e0ec      	b.n	8008c16 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a42:	f240 332a 	movw	r3, #810	; 0x32a
 8008a46:	4013      	ands	r3, r2
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d095      	beq.n	8008978 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d022      	beq.n	8008aa0 <HAL_SD_ReadBlocks+0x238>
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d91f      	bls.n	8008aa0 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a64:	2b03      	cmp	r3, #3
 8008a66:	d01b      	beq.n	8008aa0 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f002 f815 	bl	800aa9c <SDMMC_CmdStopTransfer>
 8008a72:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d012      	beq.n	8008aa0 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a2f      	ldr	r2, [pc, #188]	; (8008b3c <HAL_SD_ReadBlocks+0x2d4>)
 8008a80:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a88:	431a      	orrs	r2, r3
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2201      	movs	r2, #1
 8008a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	e0ba      	b.n	8008c16 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aa6:	f003 0308 	and.w	r3, r3, #8
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d012      	beq.n	8008ad4 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a22      	ldr	r2, [pc, #136]	; (8008b3c <HAL_SD_ReadBlocks+0x2d4>)
 8008ab4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aba:	f043 0208 	orr.w	r2, r3, #8
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2200      	movs	r2, #0
 8008ace:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	e0a0      	b.n	8008c16 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ada:	f003 0302 	and.w	r3, r3, #2
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d012      	beq.n	8008b08 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a15      	ldr	r2, [pc, #84]	; (8008b3c <HAL_SD_ReadBlocks+0x2d4>)
 8008ae8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aee:	f043 0202 	orr.w	r2, r3, #2
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2201      	movs	r2, #1
 8008afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2200      	movs	r2, #0
 8008b02:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	e086      	b.n	8008c16 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b0e:	f003 0320 	and.w	r3, r3, #32
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d063      	beq.n	8008bde <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a08      	ldr	r2, [pc, #32]	; (8008b3c <HAL_SD_ReadBlocks+0x2d4>)
 8008b1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b22:	f043 0220 	orr.w	r2, r3, #32
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2200      	movs	r2, #0
 8008b36:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e06c      	b.n	8008c16 <HAL_SD_ReadBlocks+0x3ae>
 8008b3c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4618      	mov	r0, r3
 8008b46:	f001 fe4e 	bl	800a7e6 <SDIO_ReadFIFO>
 8008b4a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8008b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b4e:	b2da      	uxtb	r2, r3
 8008b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b52:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b56:	3301      	adds	r3, #1
 8008b58:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b62:	0a1b      	lsrs	r3, r3, #8
 8008b64:	b2da      	uxtb	r2, r3
 8008b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b68:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b72:	3b01      	subs	r3, #1
 8008b74:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b78:	0c1b      	lsrs	r3, r3, #16
 8008b7a:	b2da      	uxtb	r2, r3
 8008b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b7e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b82:	3301      	adds	r3, #1
 8008b84:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8e:	0e1b      	lsrs	r3, r3, #24
 8008b90:	b2da      	uxtb	r2, r3
 8008b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b94:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b98:	3301      	adds	r3, #1
 8008b9a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b9e:	3b01      	subs	r3, #1
 8008ba0:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008ba2:	f7fd f9ad 	bl	8005f00 <HAL_GetTick>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008baa:	1ad3      	subs	r3, r2, r3
 8008bac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d902      	bls.n	8008bb8 <HAL_SD_ReadBlocks+0x350>
 8008bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d112      	bne.n	8008bde <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a18      	ldr	r2, [pc, #96]	; (8008c20 <HAL_SD_ReadBlocks+0x3b8>)
 8008bbe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e01b      	b.n	8008c16 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d002      	beq.n	8008bf2 <HAL_SD_ReadBlocks+0x38a>
 8008bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1a6      	bne.n	8008b40 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f240 523a 	movw	r2, #1338	; 0x53a
 8008bfa:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008c04:	2300      	movs	r3, #0
 8008c06:	e006      	b.n	8008c16 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
  }
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3748      	adds	r7, #72	; 0x48
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	004005ff 	.word	0x004005ff

08008c24 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b092      	sub	sp, #72	; 0x48
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	60b9      	str	r1, [r7, #8]
 8008c2e:	607a      	str	r2, [r7, #4]
 8008c30:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008c32:	f7fd f965 	bl	8005f00 <HAL_GetTick>
 8008c36:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d107      	bne.n	8008c56 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c4a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	e166      	b.n	8008f24 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	f040 8159 	bne.w	8008f16 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2200      	movs	r2, #0
 8008c68:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008c6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	441a      	add	r2, r3
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d907      	bls.n	8008c88 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c7c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	e14d      	b.n	8008f24 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2203      	movs	r2, #3
 8008c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2200      	movs	r2, #0
 8008c96:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d002      	beq.n	8008ca6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca2:	025b      	lsls	r3, r3, #9
 8008ca4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8008caa:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	025b      	lsls	r3, r3, #9
 8008cb0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008cb2:	2390      	movs	r3, #144	; 0x90
 8008cb4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f107 0218 	add.w	r2, r7, #24
 8008cca:	4611      	mov	r1, r2
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f001 fe0f 	bl	800a8f0 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d90a      	bls.n	8008cee <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2220      	movs	r2, #32
 8008cdc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f001 feb7 	bl	800aa58 <SDMMC_CmdWriteMultiBlock>
 8008cea:	6478      	str	r0, [r7, #68]	; 0x44
 8008cec:	e009      	b.n	8008d02 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2210      	movs	r2, #16
 8008cf2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f001 fe8a 	bl	800aa14 <SDMMC_CmdWriteSingleBlock>
 8008d00:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d012      	beq.n	8008d2e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a87      	ldr	r2, [pc, #540]	; (8008f2c <HAL_SD_WriteBlocks+0x308>)
 8008d0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d16:	431a      	orrs	r2, r3
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2200      	movs	r2, #0
 8008d28:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e0fa      	b.n	8008f24 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008d32:	e065      	b.n	8008e00 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d040      	beq.n	8008dc4 <HAL_SD_WriteBlocks+0x1a0>
 8008d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d03d      	beq.n	8008dc4 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8008d48:	2300      	movs	r3, #0
 8008d4a:	643b      	str	r3, [r7, #64]	; 0x40
 8008d4c:	e037      	b.n	8008dbe <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8008d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d56:	3301      	adds	r3, #1
 8008d58:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	021a      	lsls	r2, r3, #8
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d6e:	3301      	adds	r3, #1
 8008d70:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d74:	3b01      	subs	r3, #1
 8008d76:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	041a      	lsls	r2, r3, #16
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	4313      	orrs	r3, r2
 8008d82:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d86:	3301      	adds	r3, #1
 8008d88:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d8c:	3b01      	subs	r3, #1
 8008d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	061a      	lsls	r2, r3, #24
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d9e:	3301      	adds	r3, #1
 8008da0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008da4:	3b01      	subs	r3, #1
 8008da6:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f107 0214 	add.w	r2, r7, #20
 8008db0:	4611      	mov	r1, r2
 8008db2:	4618      	mov	r0, r3
 8008db4:	f001 fd24 	bl	800a800 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dba:	3301      	adds	r3, #1
 8008dbc:	643b      	str	r3, [r7, #64]	; 0x40
 8008dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dc0:	2b07      	cmp	r3, #7
 8008dc2:	d9c4      	bls.n	8008d4e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008dc4:	f7fd f89c 	bl	8005f00 <HAL_GetTick>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dcc:	1ad3      	subs	r3, r2, r3
 8008dce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d902      	bls.n	8008dda <HAL_SD_WriteBlocks+0x1b6>
 8008dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d112      	bne.n	8008e00 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a53      	ldr	r2, [pc, #332]	; (8008f2c <HAL_SD_WriteBlocks+0x308>)
 8008de0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008de6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008de8:	431a      	orrs	r2, r3
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008dfc:	2303      	movs	r3, #3
 8008dfe:	e091      	b.n	8008f24 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e06:	f240 331a 	movw	r3, #794	; 0x31a
 8008e0a:	4013      	ands	r3, r2
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d091      	beq.n	8008d34 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d022      	beq.n	8008e64 <HAL_SD_WriteBlocks+0x240>
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d91f      	bls.n	8008e64 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e28:	2b03      	cmp	r3, #3
 8008e2a:	d01b      	beq.n	8008e64 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4618      	mov	r0, r3
 8008e32:	f001 fe33 	bl	800aa9c <SDMMC_CmdStopTransfer>
 8008e36:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d012      	beq.n	8008e64 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a3a      	ldr	r2, [pc, #232]	; (8008f2c <HAL_SD_WriteBlocks+0x308>)
 8008e44:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e4c:	431a      	orrs	r2, r3
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2201      	movs	r2, #1
 8008e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	e05f      	b.n	8008f24 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e6a:	f003 0308 	and.w	r3, r3, #8
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d012      	beq.n	8008e98 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a2d      	ldr	r2, [pc, #180]	; (8008f2c <HAL_SD_WriteBlocks+0x308>)
 8008e78:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7e:	f043 0208 	orr.w	r2, r3, #8
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2200      	movs	r2, #0
 8008e92:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008e94:	2301      	movs	r3, #1
 8008e96:	e045      	b.n	8008f24 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e9e:	f003 0302 	and.w	r3, r3, #2
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d012      	beq.n	8008ecc <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a20      	ldr	r2, [pc, #128]	; (8008f2c <HAL_SD_WriteBlocks+0x308>)
 8008eac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb2:	f043 0202 	orr.w	r2, r3, #2
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e02b      	b.n	8008f24 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ed2:	f003 0310 	and.w	r3, r3, #16
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d012      	beq.n	8008f00 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a13      	ldr	r2, [pc, #76]	; (8008f2c <HAL_SD_WriteBlocks+0x308>)
 8008ee0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee6:	f043 0210 	orr.w	r2, r3, #16
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	e011      	b.n	8008f24 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f240 523a 	movw	r2, #1338	; 0x53a
 8008f08:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008f12:	2300      	movs	r3, #0
 8008f14:	e006      	b.n	8008f24 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f1a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
  }
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3748      	adds	r7, #72	; 0x48
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	004005ff 	.word	0x004005ff

08008f30 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b083      	sub	sp, #12
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f3e:	0f9b      	lsrs	r3, r3, #30
 8008f40:	b2da      	uxtb	r2, r3
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f4a:	0e9b      	lsrs	r3, r3, #26
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	f003 030f 	and.w	r3, r3, #15
 8008f52:	b2da      	uxtb	r2, r3
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f5c:	0e1b      	lsrs	r3, r3, #24
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	f003 0303 	and.w	r3, r3, #3
 8008f64:	b2da      	uxtb	r2, r3
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f6e:	0c1b      	lsrs	r3, r3, #16
 8008f70:	b2da      	uxtb	r2, r3
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f7a:	0a1b      	lsrs	r3, r3, #8
 8008f7c:	b2da      	uxtb	r2, r3
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f86:	b2da      	uxtb	r2, r3
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f90:	0d1b      	lsrs	r3, r3, #20
 8008f92:	b29a      	uxth	r2, r3
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f9c:	0c1b      	lsrs	r3, r3, #16
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	f003 030f 	and.w	r3, r3, #15
 8008fa4:	b2da      	uxtb	r2, r3
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fae:	0bdb      	lsrs	r3, r3, #15
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	f003 0301 	and.w	r3, r3, #1
 8008fb6:	b2da      	uxtb	r2, r3
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fc0:	0b9b      	lsrs	r3, r3, #14
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	f003 0301 	and.w	r3, r3, #1
 8008fc8:	b2da      	uxtb	r2, r3
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fd2:	0b5b      	lsrs	r3, r3, #13
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	f003 0301 	and.w	r3, r3, #1
 8008fda:	b2da      	uxtb	r2, r3
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fe4:	0b1b      	lsrs	r3, r3, #12
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	f003 0301 	and.w	r3, r3, #1
 8008fec:	b2da      	uxtb	r2, r3
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d163      	bne.n	80090c8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009004:	009a      	lsls	r2, r3, #2
 8009006:	f640 73fc 	movw	r3, #4092	; 0xffc
 800900a:	4013      	ands	r3, r2
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009010:	0f92      	lsrs	r2, r2, #30
 8009012:	431a      	orrs	r2, r3
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800901c:	0edb      	lsrs	r3, r3, #27
 800901e:	b2db      	uxtb	r3, r3
 8009020:	f003 0307 	and.w	r3, r3, #7
 8009024:	b2da      	uxtb	r2, r3
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800902e:	0e1b      	lsrs	r3, r3, #24
 8009030:	b2db      	uxtb	r3, r3
 8009032:	f003 0307 	and.w	r3, r3, #7
 8009036:	b2da      	uxtb	r2, r3
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009040:	0d5b      	lsrs	r3, r3, #21
 8009042:	b2db      	uxtb	r3, r3
 8009044:	f003 0307 	and.w	r3, r3, #7
 8009048:	b2da      	uxtb	r2, r3
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009052:	0c9b      	lsrs	r3, r3, #18
 8009054:	b2db      	uxtb	r3, r3
 8009056:	f003 0307 	and.w	r3, r3, #7
 800905a:	b2da      	uxtb	r2, r3
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009064:	0bdb      	lsrs	r3, r3, #15
 8009066:	b2db      	uxtb	r3, r3
 8009068:	f003 0307 	and.w	r3, r3, #7
 800906c:	b2da      	uxtb	r2, r3
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	1c5a      	adds	r2, r3, #1
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	7e1b      	ldrb	r3, [r3, #24]
 8009080:	b2db      	uxtb	r3, r3
 8009082:	f003 0307 	and.w	r3, r3, #7
 8009086:	3302      	adds	r3, #2
 8009088:	2201      	movs	r2, #1
 800908a:	fa02 f303 	lsl.w	r3, r2, r3
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009092:	fb02 f203 	mul.w	r2, r2, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	7a1b      	ldrb	r3, [r3, #8]
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	f003 030f 	and.w	r3, r3, #15
 80090a4:	2201      	movs	r2, #1
 80090a6:	409a      	lsls	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80090b4:	0a52      	lsrs	r2, r2, #9
 80090b6:	fb02 f203 	mul.w	r2, r2, r3
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090c4:	661a      	str	r2, [r3, #96]	; 0x60
 80090c6:	e031      	b.n	800912c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d11d      	bne.n	800910c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090d4:	041b      	lsls	r3, r3, #16
 80090d6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090de:	0c1b      	lsrs	r3, r3, #16
 80090e0:	431a      	orrs	r2, r3
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	691b      	ldr	r3, [r3, #16]
 80090ea:	3301      	adds	r3, #1
 80090ec:	029a      	lsls	r2, r3, #10
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009100:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	661a      	str	r2, [r3, #96]	; 0x60
 800910a:	e00f      	b.n	800912c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a58      	ldr	r2, [pc, #352]	; (8009274 <HAL_SD_GetCardCSD+0x344>)
 8009112:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009118:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	e09d      	b.n	8009268 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009130:	0b9b      	lsrs	r3, r3, #14
 8009132:	b2db      	uxtb	r3, r3
 8009134:	f003 0301 	and.w	r3, r3, #1
 8009138:	b2da      	uxtb	r2, r3
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009142:	09db      	lsrs	r3, r3, #7
 8009144:	b2db      	uxtb	r3, r3
 8009146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800914a:	b2da      	uxtb	r2, r3
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009154:	b2db      	uxtb	r3, r3
 8009156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800915a:	b2da      	uxtb	r2, r3
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009164:	0fdb      	lsrs	r3, r3, #31
 8009166:	b2da      	uxtb	r2, r3
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009170:	0f5b      	lsrs	r3, r3, #29
 8009172:	b2db      	uxtb	r3, r3
 8009174:	f003 0303 	and.w	r3, r3, #3
 8009178:	b2da      	uxtb	r2, r3
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009182:	0e9b      	lsrs	r3, r3, #26
 8009184:	b2db      	uxtb	r3, r3
 8009186:	f003 0307 	and.w	r3, r3, #7
 800918a:	b2da      	uxtb	r2, r3
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009194:	0d9b      	lsrs	r3, r3, #22
 8009196:	b2db      	uxtb	r3, r3
 8009198:	f003 030f 	and.w	r3, r3, #15
 800919c:	b2da      	uxtb	r2, r3
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091a6:	0d5b      	lsrs	r3, r3, #21
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	f003 0301 	and.w	r3, r3, #1
 80091ae:	b2da      	uxtb	r2, r3
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	2200      	movs	r2, #0
 80091ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091c2:	0c1b      	lsrs	r3, r3, #16
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	f003 0301 	and.w	r3, r3, #1
 80091ca:	b2da      	uxtb	r2, r3
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091d6:	0bdb      	lsrs	r3, r3, #15
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	f003 0301 	and.w	r3, r3, #1
 80091de:	b2da      	uxtb	r2, r3
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ea:	0b9b      	lsrs	r3, r3, #14
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	f003 0301 	and.w	r3, r3, #1
 80091f2:	b2da      	uxtb	r2, r3
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091fe:	0b5b      	lsrs	r3, r3, #13
 8009200:	b2db      	uxtb	r3, r3
 8009202:	f003 0301 	and.w	r3, r3, #1
 8009206:	b2da      	uxtb	r2, r3
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009212:	0b1b      	lsrs	r3, r3, #12
 8009214:	b2db      	uxtb	r3, r3
 8009216:	f003 0301 	and.w	r3, r3, #1
 800921a:	b2da      	uxtb	r2, r3
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009226:	0a9b      	lsrs	r3, r3, #10
 8009228:	b2db      	uxtb	r3, r3
 800922a:	f003 0303 	and.w	r3, r3, #3
 800922e:	b2da      	uxtb	r2, r3
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800923a:	0a1b      	lsrs	r3, r3, #8
 800923c:	b2db      	uxtb	r3, r3
 800923e:	f003 0303 	and.w	r3, r3, #3
 8009242:	b2da      	uxtb	r2, r3
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800924e:	085b      	lsrs	r3, r3, #1
 8009250:	b2db      	uxtb	r3, r3
 8009252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009256:	b2da      	uxtb	r2, r3
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	2201      	movs	r2, #1
 8009262:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009266:	2300      	movs	r3, #0
}
 8009268:	4618      	mov	r0, r3
 800926a:	370c      	adds	r7, #12
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr
 8009274:	004005ff 	.word	0x004005ff

08009278 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80092c2:	2300      	movs	r3, #0
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	370c      	adds	r7, #12
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr

080092d0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b086      	sub	sp, #24
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80092d8:	2300      	movs	r3, #0
 80092da:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80092dc:	f107 030c 	add.w	r3, r7, #12
 80092e0:	4619      	mov	r1, r3
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 f96e 	bl	80095c4 <SD_SendStatus>
 80092e8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d005      	beq.n	80092fc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	431a      	orrs	r2, r3
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	0a5b      	lsrs	r3, r3, #9
 8009300:	f003 030f 	and.w	r3, r3, #15
 8009304:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009306:	693b      	ldr	r3, [r7, #16]
}
 8009308:	4618      	mov	r0, r3
 800930a:	3718      	adds	r7, #24
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009310:	b5b0      	push	{r4, r5, r7, lr}
 8009312:	b094      	sub	sp, #80	; 0x50
 8009314:	af04      	add	r7, sp, #16
 8009316:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009318:	2301      	movs	r3, #1
 800931a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4618      	mov	r0, r3
 8009322:	f001 fa8d 	bl	800a840 <SDIO_GetPowerState>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d102      	bne.n	8009332 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800932c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009330:	e0b6      	b.n	80094a0 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009336:	2b03      	cmp	r3, #3
 8009338:	d02f      	beq.n	800939a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4618      	mov	r0, r3
 8009340:	f001 fc73 	bl	800ac2a <SDMMC_CmdSendCID>
 8009344:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009348:	2b00      	cmp	r3, #0
 800934a:	d001      	beq.n	8009350 <SD_InitCard+0x40>
    {
      return errorstate;
 800934c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800934e:	e0a7      	b.n	80094a0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2100      	movs	r1, #0
 8009356:	4618      	mov	r0, r3
 8009358:	f001 fab7 	bl	800a8ca <SDIO_GetResponse>
 800935c:	4602      	mov	r2, r0
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	2104      	movs	r1, #4
 8009368:	4618      	mov	r0, r3
 800936a:	f001 faae 	bl	800a8ca <SDIO_GetResponse>
 800936e:	4602      	mov	r2, r0
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2108      	movs	r1, #8
 800937a:	4618      	mov	r0, r3
 800937c:	f001 faa5 	bl	800a8ca <SDIO_GetResponse>
 8009380:	4602      	mov	r2, r0
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	210c      	movs	r1, #12
 800938c:	4618      	mov	r0, r3
 800938e:	f001 fa9c 	bl	800a8ca <SDIO_GetResponse>
 8009392:	4602      	mov	r2, r0
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800939e:	2b03      	cmp	r3, #3
 80093a0:	d00d      	beq.n	80093be <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f107 020e 	add.w	r2, r7, #14
 80093aa:	4611      	mov	r1, r2
 80093ac:	4618      	mov	r0, r3
 80093ae:	f001 fc79 	bl	800aca4 <SDMMC_CmdSetRelAdd>
 80093b2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80093b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d001      	beq.n	80093be <SD_InitCard+0xae>
    {
      return errorstate;
 80093ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093bc:	e070      	b.n	80094a0 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093c2:	2b03      	cmp	r3, #3
 80093c4:	d036      	beq.n	8009434 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80093c6:	89fb      	ldrh	r3, [r7, #14]
 80093c8:	461a      	mov	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093d6:	041b      	lsls	r3, r3, #16
 80093d8:	4619      	mov	r1, r3
 80093da:	4610      	mov	r0, r2
 80093dc:	f001 fc43 	bl	800ac66 <SDMMC_CmdSendCSD>
 80093e0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80093e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d001      	beq.n	80093ec <SD_InitCard+0xdc>
    {
      return errorstate;
 80093e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093ea:	e059      	b.n	80094a0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2100      	movs	r1, #0
 80093f2:	4618      	mov	r0, r3
 80093f4:	f001 fa69 	bl	800a8ca <SDIO_GetResponse>
 80093f8:	4602      	mov	r2, r0
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2104      	movs	r1, #4
 8009404:	4618      	mov	r0, r3
 8009406:	f001 fa60 	bl	800a8ca <SDIO_GetResponse>
 800940a:	4602      	mov	r2, r0
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	2108      	movs	r1, #8
 8009416:	4618      	mov	r0, r3
 8009418:	f001 fa57 	bl	800a8ca <SDIO_GetResponse>
 800941c:	4602      	mov	r2, r0
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	210c      	movs	r1, #12
 8009428:	4618      	mov	r0, r3
 800942a:	f001 fa4e 	bl	800a8ca <SDIO_GetResponse>
 800942e:	4602      	mov	r2, r0
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2104      	movs	r1, #4
 800943a:	4618      	mov	r0, r3
 800943c:	f001 fa45 	bl	800a8ca <SDIO_GetResponse>
 8009440:	4603      	mov	r3, r0
 8009442:	0d1a      	lsrs	r2, r3, #20
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009448:	f107 0310 	add.w	r3, r7, #16
 800944c:	4619      	mov	r1, r3
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f7ff fd6e 	bl	8008f30 <HAL_SD_GetCardCSD>
 8009454:	4603      	mov	r3, r0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d002      	beq.n	8009460 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800945a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800945e:	e01f      	b.n	80094a0 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6819      	ldr	r1, [r3, #0]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009468:	041b      	lsls	r3, r3, #16
 800946a:	461a      	mov	r2, r3
 800946c:	f04f 0300 	mov.w	r3, #0
 8009470:	4608      	mov	r0, r1
 8009472:	f001 fb35 	bl	800aae0 <SDMMC_CmdSelDesel>
 8009476:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800947a:	2b00      	cmp	r3, #0
 800947c:	d001      	beq.n	8009482 <SD_InitCard+0x172>
  {
    return errorstate;
 800947e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009480:	e00e      	b.n	80094a0 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681d      	ldr	r5, [r3, #0]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	466c      	mov	r4, sp
 800948a:	f103 0210 	add.w	r2, r3, #16
 800948e:	ca07      	ldmia	r2, {r0, r1, r2}
 8009490:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009494:	3304      	adds	r3, #4
 8009496:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009498:	4628      	mov	r0, r5
 800949a:	f001 f979 	bl	800a790 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800949e:	2300      	movs	r3, #0
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3740      	adds	r7, #64	; 0x40
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bdb0      	pop	{r4, r5, r7, pc}

080094a8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b086      	sub	sp, #24
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80094b0:	2300      	movs	r3, #0
 80094b2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80094b4:	2300      	movs	r3, #0
 80094b6:	617b      	str	r3, [r7, #20]
 80094b8:	2300      	movs	r3, #0
 80094ba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4618      	mov	r0, r3
 80094c2:	f001 fb30 	bl	800ab26 <SDMMC_CmdGoIdleState>
 80094c6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d001      	beq.n	80094d2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	e072      	b.n	80095b8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4618      	mov	r0, r3
 80094d8:	f001 fb43 	bl	800ab62 <SDMMC_CmdOperCond>
 80094dc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d00d      	beq.n	8009500 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4618      	mov	r0, r3
 80094f0:	f001 fb19 	bl	800ab26 <SDMMC_CmdGoIdleState>
 80094f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d004      	beq.n	8009506 <SD_PowerON+0x5e>
    {
      return errorstate;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	e05b      	b.n	80095b8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800950a:	2b01      	cmp	r3, #1
 800950c:	d137      	bne.n	800957e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2100      	movs	r1, #0
 8009514:	4618      	mov	r0, r3
 8009516:	f001 fb43 	bl	800aba0 <SDMMC_CmdAppCommand>
 800951a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d02d      	beq.n	800957e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009522:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009526:	e047      	b.n	80095b8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2100      	movs	r1, #0
 800952e:	4618      	mov	r0, r3
 8009530:	f001 fb36 	bl	800aba0 <SDMMC_CmdAppCommand>
 8009534:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d001      	beq.n	8009540 <SD_PowerON+0x98>
    {
      return errorstate;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	e03b      	b.n	80095b8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	491e      	ldr	r1, [pc, #120]	; (80095c0 <SD_PowerON+0x118>)
 8009546:	4618      	mov	r0, r3
 8009548:	f001 fb4c 	bl	800abe4 <SDMMC_CmdAppOperCommand>
 800954c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d002      	beq.n	800955a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009554:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009558:	e02e      	b.n	80095b8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2100      	movs	r1, #0
 8009560:	4618      	mov	r0, r3
 8009562:	f001 f9b2 	bl	800a8ca <SDIO_GetResponse>
 8009566:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	0fdb      	lsrs	r3, r3, #31
 800956c:	2b01      	cmp	r3, #1
 800956e:	d101      	bne.n	8009574 <SD_PowerON+0xcc>
 8009570:	2301      	movs	r3, #1
 8009572:	e000      	b.n	8009576 <SD_PowerON+0xce>
 8009574:	2300      	movs	r3, #0
 8009576:	613b      	str	r3, [r7, #16]

    count++;
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	3301      	adds	r3, #1
 800957c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009584:	4293      	cmp	r3, r2
 8009586:	d802      	bhi.n	800958e <SD_PowerON+0xe6>
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d0cc      	beq.n	8009528 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009594:	4293      	cmp	r3, r2
 8009596:	d902      	bls.n	800959e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009598:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800959c:	e00c      	b.n	80095b8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d003      	beq.n	80095b0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	645a      	str	r2, [r3, #68]	; 0x44
 80095ae:	e002      	b.n	80095b6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80095b6:	2300      	movs	r3, #0
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3718      	adds	r7, #24
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}
 80095c0:	c1100000 	.word	0xc1100000

080095c4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d102      	bne.n	80095da <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80095d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80095d8:	e018      	b.n	800960c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095e2:	041b      	lsls	r3, r3, #16
 80095e4:	4619      	mov	r1, r3
 80095e6:	4610      	mov	r0, r2
 80095e8:	f001 fb7d 	bl	800ace6 <SDMMC_CmdSendStatus>
 80095ec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d001      	beq.n	80095f8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	e009      	b.n	800960c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2100      	movs	r1, #0
 80095fe:	4618      	mov	r0, r3
 8009600:	f001 f963 	bl	800a8ca <SDIO_GetResponse>
 8009604:	4602      	mov	r2, r0
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800960a:	2300      	movs	r3, #0
}
 800960c:	4618      	mov	r0, r3
 800960e:	3710      	adds	r7, #16
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d101      	bne.n	8009626 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	e07b      	b.n	800971e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962a:	2b00      	cmp	r3, #0
 800962c:	d108      	bne.n	8009640 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009636:	d009      	beq.n	800964c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	61da      	str	r2, [r3, #28]
 800963e:	e005      	b.n	800964c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009658:	b2db      	uxtb	r3, r3
 800965a:	2b00      	cmp	r3, #0
 800965c:	d106      	bne.n	800966c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f7fa fcb4 	bl	8003fd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2202      	movs	r2, #2
 8009670:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009682:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009694:	431a      	orrs	r2, r3
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800969e:	431a      	orrs	r2, r3
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	f003 0302 	and.w	r3, r3, #2
 80096a8:	431a      	orrs	r2, r3
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	695b      	ldr	r3, [r3, #20]
 80096ae:	f003 0301 	and.w	r3, r3, #1
 80096b2:	431a      	orrs	r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	699b      	ldr	r3, [r3, #24]
 80096b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80096bc:	431a      	orrs	r2, r3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	69db      	ldr	r3, [r3, #28]
 80096c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096c6:	431a      	orrs	r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6a1b      	ldr	r3, [r3, #32]
 80096cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096d0:	ea42 0103 	orr.w	r1, r2, r3
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	430a      	orrs	r2, r1
 80096e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	699b      	ldr	r3, [r3, #24]
 80096e8:	0c1b      	lsrs	r3, r3, #16
 80096ea:	f003 0104 	and.w	r1, r3, #4
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f2:	f003 0210 	and.w	r2, r3, #16
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	430a      	orrs	r2, r1
 80096fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	69da      	ldr	r2, [r3, #28]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800970c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2201      	movs	r2, #1
 8009718:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800971c:	2300      	movs	r3, #0
}
 800971e:	4618      	mov	r0, r3
 8009720:	3708      	adds	r7, #8
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009726:	b580      	push	{r7, lr}
 8009728:	b088      	sub	sp, #32
 800972a:	af00      	add	r7, sp, #0
 800972c:	60f8      	str	r0, [r7, #12]
 800972e:	60b9      	str	r1, [r7, #8]
 8009730:	603b      	str	r3, [r7, #0]
 8009732:	4613      	mov	r3, r2
 8009734:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009736:	2300      	movs	r3, #0
 8009738:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009740:	2b01      	cmp	r3, #1
 8009742:	d101      	bne.n	8009748 <HAL_SPI_Transmit+0x22>
 8009744:	2302      	movs	r3, #2
 8009746:	e126      	b.n	8009996 <HAL_SPI_Transmit+0x270>
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009750:	f7fc fbd6 	bl	8005f00 <HAL_GetTick>
 8009754:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009756:	88fb      	ldrh	r3, [r7, #6]
 8009758:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009760:	b2db      	uxtb	r3, r3
 8009762:	2b01      	cmp	r3, #1
 8009764:	d002      	beq.n	800976c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009766:	2302      	movs	r3, #2
 8009768:	77fb      	strb	r3, [r7, #31]
    goto error;
 800976a:	e10b      	b.n	8009984 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d002      	beq.n	8009778 <HAL_SPI_Transmit+0x52>
 8009772:	88fb      	ldrh	r3, [r7, #6]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d102      	bne.n	800977e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009778:	2301      	movs	r3, #1
 800977a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800977c:	e102      	b.n	8009984 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2203      	movs	r2, #3
 8009782:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2200      	movs	r2, #0
 800978a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	68ba      	ldr	r2, [r7, #8]
 8009790:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	88fa      	ldrh	r2, [r7, #6]
 8009796:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	88fa      	ldrh	r2, [r7, #6]
 800979c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2200      	movs	r2, #0
 80097a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2200      	movs	r2, #0
 80097a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2200      	movs	r2, #0
 80097ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2200      	movs	r2, #0
 80097b4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2200      	movs	r2, #0
 80097ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097c4:	d10f      	bne.n	80097e6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80097e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097f0:	2b40      	cmp	r3, #64	; 0x40
 80097f2:	d007      	beq.n	8009804 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009802:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	68db      	ldr	r3, [r3, #12]
 8009808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800980c:	d14b      	bne.n	80098a6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d002      	beq.n	800981c <HAL_SPI_Transmit+0xf6>
 8009816:	8afb      	ldrh	r3, [r7, #22]
 8009818:	2b01      	cmp	r3, #1
 800981a:	d13e      	bne.n	800989a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009820:	881a      	ldrh	r2, [r3, #0]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800982c:	1c9a      	adds	r2, r3, #2
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009836:	b29b      	uxth	r3, r3
 8009838:	3b01      	subs	r3, #1
 800983a:	b29a      	uxth	r2, r3
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009840:	e02b      	b.n	800989a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	f003 0302 	and.w	r3, r3, #2
 800984c:	2b02      	cmp	r3, #2
 800984e:	d112      	bne.n	8009876 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009854:	881a      	ldrh	r2, [r3, #0]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009860:	1c9a      	adds	r2, r3, #2
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800986a:	b29b      	uxth	r3, r3
 800986c:	3b01      	subs	r3, #1
 800986e:	b29a      	uxth	r2, r3
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	86da      	strh	r2, [r3, #54]	; 0x36
 8009874:	e011      	b.n	800989a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009876:	f7fc fb43 	bl	8005f00 <HAL_GetTick>
 800987a:	4602      	mov	r2, r0
 800987c:	69bb      	ldr	r3, [r7, #24]
 800987e:	1ad3      	subs	r3, r2, r3
 8009880:	683a      	ldr	r2, [r7, #0]
 8009882:	429a      	cmp	r2, r3
 8009884:	d803      	bhi.n	800988e <HAL_SPI_Transmit+0x168>
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800988c:	d102      	bne.n	8009894 <HAL_SPI_Transmit+0x16e>
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d102      	bne.n	800989a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009894:	2303      	movs	r3, #3
 8009896:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009898:	e074      	b.n	8009984 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800989e:	b29b      	uxth	r3, r3
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d1ce      	bne.n	8009842 <HAL_SPI_Transmit+0x11c>
 80098a4:	e04c      	b.n	8009940 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d002      	beq.n	80098b4 <HAL_SPI_Transmit+0x18e>
 80098ae:	8afb      	ldrh	r3, [r7, #22]
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d140      	bne.n	8009936 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	330c      	adds	r3, #12
 80098be:	7812      	ldrb	r2, [r2, #0]
 80098c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098c6:	1c5a      	adds	r2, r3, #1
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	3b01      	subs	r3, #1
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80098da:	e02c      	b.n	8009936 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	f003 0302 	and.w	r3, r3, #2
 80098e6:	2b02      	cmp	r3, #2
 80098e8:	d113      	bne.n	8009912 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	330c      	adds	r3, #12
 80098f4:	7812      	ldrb	r2, [r2, #0]
 80098f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098fc:	1c5a      	adds	r2, r3, #1
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009906:	b29b      	uxth	r3, r3
 8009908:	3b01      	subs	r3, #1
 800990a:	b29a      	uxth	r2, r3
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	86da      	strh	r2, [r3, #54]	; 0x36
 8009910:	e011      	b.n	8009936 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009912:	f7fc faf5 	bl	8005f00 <HAL_GetTick>
 8009916:	4602      	mov	r2, r0
 8009918:	69bb      	ldr	r3, [r7, #24]
 800991a:	1ad3      	subs	r3, r2, r3
 800991c:	683a      	ldr	r2, [r7, #0]
 800991e:	429a      	cmp	r2, r3
 8009920:	d803      	bhi.n	800992a <HAL_SPI_Transmit+0x204>
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009928:	d102      	bne.n	8009930 <HAL_SPI_Transmit+0x20a>
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d102      	bne.n	8009936 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009930:	2303      	movs	r3, #3
 8009932:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009934:	e026      	b.n	8009984 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800993a:	b29b      	uxth	r3, r3
 800993c:	2b00      	cmp	r3, #0
 800993e:	d1cd      	bne.n	80098dc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009940:	69ba      	ldr	r2, [r7, #24]
 8009942:	6839      	ldr	r1, [r7, #0]
 8009944:	68f8      	ldr	r0, [r7, #12]
 8009946:	f000 fbcb 	bl	800a0e0 <SPI_EndRxTxTransaction>
 800994a:	4603      	mov	r3, r0
 800994c:	2b00      	cmp	r3, #0
 800994e:	d002      	beq.n	8009956 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2220      	movs	r2, #32
 8009954:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d10a      	bne.n	8009974 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800995e:	2300      	movs	r3, #0
 8009960:	613b      	str	r3, [r7, #16]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	68db      	ldr	r3, [r3, #12]
 8009968:	613b      	str	r3, [r7, #16]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	613b      	str	r3, [r7, #16]
 8009972:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009978:	2b00      	cmp	r3, #0
 800997a:	d002      	beq.n	8009982 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800997c:	2301      	movs	r3, #1
 800997e:	77fb      	strb	r3, [r7, #31]
 8009980:	e000      	b.n	8009984 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009982:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2201      	movs	r2, #1
 8009988:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2200      	movs	r2, #0
 8009990:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009994:	7ffb      	ldrb	r3, [r7, #31]
}
 8009996:	4618      	mov	r0, r3
 8009998:	3720      	adds	r7, #32
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}

0800999e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800999e:	b580      	push	{r7, lr}
 80099a0:	b088      	sub	sp, #32
 80099a2:	af02      	add	r7, sp, #8
 80099a4:	60f8      	str	r0, [r7, #12]
 80099a6:	60b9      	str	r1, [r7, #8]
 80099a8:	603b      	str	r3, [r7, #0]
 80099aa:	4613      	mov	r3, r2
 80099ac:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80099ae:	2300      	movs	r3, #0
 80099b0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099ba:	d112      	bne.n	80099e2 <HAL_SPI_Receive+0x44>
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d10e      	bne.n	80099e2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2204      	movs	r2, #4
 80099c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80099cc:	88fa      	ldrh	r2, [r7, #6]
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	9300      	str	r3, [sp, #0]
 80099d2:	4613      	mov	r3, r2
 80099d4:	68ba      	ldr	r2, [r7, #8]
 80099d6:	68b9      	ldr	r1, [r7, #8]
 80099d8:	68f8      	ldr	r0, [r7, #12]
 80099da:	f000 f8f1 	bl	8009bc0 <HAL_SPI_TransmitReceive>
 80099de:	4603      	mov	r3, r0
 80099e0:	e0ea      	b.n	8009bb8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d101      	bne.n	80099f0 <HAL_SPI_Receive+0x52>
 80099ec:	2302      	movs	r3, #2
 80099ee:	e0e3      	b.n	8009bb8 <HAL_SPI_Receive+0x21a>
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	2201      	movs	r2, #1
 80099f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80099f8:	f7fc fa82 	bl	8005f00 <HAL_GetTick>
 80099fc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d002      	beq.n	8009a10 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009a0a:	2302      	movs	r3, #2
 8009a0c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009a0e:	e0ca      	b.n	8009ba6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d002      	beq.n	8009a1c <HAL_SPI_Receive+0x7e>
 8009a16:	88fb      	ldrh	r3, [r7, #6]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d102      	bne.n	8009a22 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009a20:	e0c1      	b.n	8009ba6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2204      	movs	r2, #4
 8009a26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	68ba      	ldr	r2, [r7, #8]
 8009a34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	88fa      	ldrh	r2, [r7, #6]
 8009a3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	88fa      	ldrh	r2, [r7, #6]
 8009a40:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2200      	movs	r2, #0
 8009a46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2200      	movs	r2, #0
 8009a52:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2200      	movs	r2, #0
 8009a58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a68:	d10f      	bne.n	8009a8a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009a88:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a94:	2b40      	cmp	r3, #64	; 0x40
 8009a96:	d007      	beq.n	8009aa8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009aa6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	68db      	ldr	r3, [r3, #12]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d162      	bne.n	8009b76 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009ab0:	e02e      	b.n	8009b10 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	f003 0301 	and.w	r3, r3, #1
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d115      	bne.n	8009aec <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f103 020c 	add.w	r2, r3, #12
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009acc:	7812      	ldrb	r2, [r2, #0]
 8009ace:	b2d2      	uxtb	r2, r2
 8009ad0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad6:	1c5a      	adds	r2, r3, #1
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	3b01      	subs	r3, #1
 8009ae4:	b29a      	uxth	r2, r3
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009aea:	e011      	b.n	8009b10 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009aec:	f7fc fa08 	bl	8005f00 <HAL_GetTick>
 8009af0:	4602      	mov	r2, r0
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	1ad3      	subs	r3, r2, r3
 8009af6:	683a      	ldr	r2, [r7, #0]
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d803      	bhi.n	8009b04 <HAL_SPI_Receive+0x166>
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b02:	d102      	bne.n	8009b0a <HAL_SPI_Receive+0x16c>
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d102      	bne.n	8009b10 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009b0a:	2303      	movs	r3, #3
 8009b0c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009b0e:	e04a      	b.n	8009ba6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d1cb      	bne.n	8009ab2 <HAL_SPI_Receive+0x114>
 8009b1a:	e031      	b.n	8009b80 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	689b      	ldr	r3, [r3, #8]
 8009b22:	f003 0301 	and.w	r3, r3, #1
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d113      	bne.n	8009b52 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	68da      	ldr	r2, [r3, #12]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b34:	b292      	uxth	r2, r2
 8009b36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b3c:	1c9a      	adds	r2, r3, #2
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	b29a      	uxth	r2, r3
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009b50:	e011      	b.n	8009b76 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b52:	f7fc f9d5 	bl	8005f00 <HAL_GetTick>
 8009b56:	4602      	mov	r2, r0
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	1ad3      	subs	r3, r2, r3
 8009b5c:	683a      	ldr	r2, [r7, #0]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d803      	bhi.n	8009b6a <HAL_SPI_Receive+0x1cc>
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b68:	d102      	bne.n	8009b70 <HAL_SPI_Receive+0x1d2>
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d102      	bne.n	8009b76 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009b70:	2303      	movs	r3, #3
 8009b72:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009b74:	e017      	b.n	8009ba6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d1cd      	bne.n	8009b1c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009b80:	693a      	ldr	r2, [r7, #16]
 8009b82:	6839      	ldr	r1, [r7, #0]
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f000 fa45 	bl	800a014 <SPI_EndRxTransaction>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d002      	beq.n	8009b96 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2220      	movs	r2, #32
 8009b94:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d002      	beq.n	8009ba4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	75fb      	strb	r3, [r7, #23]
 8009ba2:	e000      	b.n	8009ba6 <HAL_SPI_Receive+0x208>
  }

error :
 8009ba4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2201      	movs	r2, #1
 8009baa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3718      	adds	r7, #24
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b08c      	sub	sp, #48	; 0x30
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	607a      	str	r2, [r7, #4]
 8009bcc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d101      	bne.n	8009be6 <HAL_SPI_TransmitReceive+0x26>
 8009be2:	2302      	movs	r3, #2
 8009be4:	e18a      	b.n	8009efc <HAL_SPI_TransmitReceive+0x33c>
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2201      	movs	r2, #1
 8009bea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009bee:	f7fc f987 	bl	8005f00 <HAL_GetTick>
 8009bf2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009c04:	887b      	ldrh	r3, [r7, #2]
 8009c06:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009c08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d00f      	beq.n	8009c30 <HAL_SPI_TransmitReceive+0x70>
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c16:	d107      	bne.n	8009c28 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	689b      	ldr	r3, [r3, #8]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d103      	bne.n	8009c28 <HAL_SPI_TransmitReceive+0x68>
 8009c20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c24:	2b04      	cmp	r3, #4
 8009c26:	d003      	beq.n	8009c30 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009c28:	2302      	movs	r3, #2
 8009c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009c2e:	e15b      	b.n	8009ee8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d005      	beq.n	8009c42 <HAL_SPI_TransmitReceive+0x82>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d002      	beq.n	8009c42 <HAL_SPI_TransmitReceive+0x82>
 8009c3c:	887b      	ldrh	r3, [r7, #2]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d103      	bne.n	8009c4a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009c42:	2301      	movs	r3, #1
 8009c44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009c48:	e14e      	b.n	8009ee8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	2b04      	cmp	r3, #4
 8009c54:	d003      	beq.n	8009c5e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2205      	movs	r2, #5
 8009c5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2200      	movs	r2, #0
 8009c62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	887a      	ldrh	r2, [r7, #2]
 8009c6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	887a      	ldrh	r2, [r7, #2]
 8009c74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	68ba      	ldr	r2, [r7, #8]
 8009c7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	887a      	ldrh	r2, [r7, #2]
 8009c80:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	887a      	ldrh	r2, [r7, #2]
 8009c86:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2200      	movs	r2, #0
 8009c92:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c9e:	2b40      	cmp	r3, #64	; 0x40
 8009ca0:	d007      	beq.n	8009cb2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009cb0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cba:	d178      	bne.n	8009dae <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d002      	beq.n	8009cca <HAL_SPI_TransmitReceive+0x10a>
 8009cc4:	8b7b      	ldrh	r3, [r7, #26]
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d166      	bne.n	8009d98 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cce:	881a      	ldrh	r2, [r3, #0]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cda:	1c9a      	adds	r2, r3, #2
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	3b01      	subs	r3, #1
 8009ce8:	b29a      	uxth	r2, r3
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009cee:	e053      	b.n	8009d98 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	f003 0302 	and.w	r3, r3, #2
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	d11b      	bne.n	8009d36 <HAL_SPI_TransmitReceive+0x176>
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d016      	beq.n	8009d36 <HAL_SPI_TransmitReceive+0x176>
 8009d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d113      	bne.n	8009d36 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d12:	881a      	ldrh	r2, [r3, #0]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d1e:	1c9a      	adds	r2, r3, #2
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	b29a      	uxth	r2, r3
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009d32:	2300      	movs	r3, #0
 8009d34:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	f003 0301 	and.w	r3, r3, #1
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d119      	bne.n	8009d78 <HAL_SPI_TransmitReceive+0x1b8>
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d014      	beq.n	8009d78 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	68da      	ldr	r2, [r3, #12]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d58:	b292      	uxth	r2, r2
 8009d5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d60:	1c9a      	adds	r2, r3, #2
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	3b01      	subs	r3, #1
 8009d6e:	b29a      	uxth	r2, r3
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009d74:	2301      	movs	r3, #1
 8009d76:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009d78:	f7fc f8c2 	bl	8005f00 <HAL_GetTick>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d80:	1ad3      	subs	r3, r2, r3
 8009d82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d807      	bhi.n	8009d98 <HAL_SPI_TransmitReceive+0x1d8>
 8009d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d8e:	d003      	beq.n	8009d98 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009d90:	2303      	movs	r3, #3
 8009d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009d96:	e0a7      	b.n	8009ee8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d1a6      	bne.n	8009cf0 <HAL_SPI_TransmitReceive+0x130>
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d1a1      	bne.n	8009cf0 <HAL_SPI_TransmitReceive+0x130>
 8009dac:	e07c      	b.n	8009ea8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d002      	beq.n	8009dbc <HAL_SPI_TransmitReceive+0x1fc>
 8009db6:	8b7b      	ldrh	r3, [r7, #26]
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d16b      	bne.n	8009e94 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	330c      	adds	r3, #12
 8009dc6:	7812      	ldrb	r2, [r2, #0]
 8009dc8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dce:	1c5a      	adds	r2, r3, #1
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	3b01      	subs	r3, #1
 8009ddc:	b29a      	uxth	r2, r3
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009de2:	e057      	b.n	8009e94 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	f003 0302 	and.w	r3, r3, #2
 8009dee:	2b02      	cmp	r3, #2
 8009df0:	d11c      	bne.n	8009e2c <HAL_SPI_TransmitReceive+0x26c>
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d017      	beq.n	8009e2c <HAL_SPI_TransmitReceive+0x26c>
 8009dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d114      	bne.n	8009e2c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	330c      	adds	r3, #12
 8009e0c:	7812      	ldrb	r2, [r2, #0]
 8009e0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e14:	1c5a      	adds	r2, r3, #1
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	3b01      	subs	r3, #1
 8009e22:	b29a      	uxth	r2, r3
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	f003 0301 	and.w	r3, r3, #1
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d119      	bne.n	8009e6e <HAL_SPI_TransmitReceive+0x2ae>
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d014      	beq.n	8009e6e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	68da      	ldr	r2, [r3, #12]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e4e:	b2d2      	uxtb	r2, r2
 8009e50:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e56:	1c5a      	adds	r2, r3, #1
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	3b01      	subs	r3, #1
 8009e64:	b29a      	uxth	r2, r3
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009e6e:	f7fc f847 	bl	8005f00 <HAL_GetTick>
 8009e72:	4602      	mov	r2, r0
 8009e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e76:	1ad3      	subs	r3, r2, r3
 8009e78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d803      	bhi.n	8009e86 <HAL_SPI_TransmitReceive+0x2c6>
 8009e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e84:	d102      	bne.n	8009e8c <HAL_SPI_TransmitReceive+0x2cc>
 8009e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d103      	bne.n	8009e94 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009e8c:	2303      	movs	r3, #3
 8009e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009e92:	e029      	b.n	8009ee8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d1a2      	bne.n	8009de4 <HAL_SPI_TransmitReceive+0x224>
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d19d      	bne.n	8009de4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eaa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009eac:	68f8      	ldr	r0, [r7, #12]
 8009eae:	f000 f917 	bl	800a0e0 <SPI_EndRxTxTransaction>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d006      	beq.n	8009ec6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2220      	movs	r2, #32
 8009ec2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009ec4:	e010      	b.n	8009ee8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	689b      	ldr	r3, [r3, #8]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d10b      	bne.n	8009ee6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009ece:	2300      	movs	r3, #0
 8009ed0:	617b      	str	r3, [r7, #20]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	617b      	str	r3, [r7, #20]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	617b      	str	r3, [r7, #20]
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	e000      	b.n	8009ee8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009ee6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2201      	movs	r2, #1
 8009eec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009ef8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3730      	adds	r7, #48	; 0x30
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b088      	sub	sp, #32
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	603b      	str	r3, [r7, #0]
 8009f10:	4613      	mov	r3, r2
 8009f12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009f14:	f7fb fff4 	bl	8005f00 <HAL_GetTick>
 8009f18:	4602      	mov	r2, r0
 8009f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f1c:	1a9b      	subs	r3, r3, r2
 8009f1e:	683a      	ldr	r2, [r7, #0]
 8009f20:	4413      	add	r3, r2
 8009f22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009f24:	f7fb ffec 	bl	8005f00 <HAL_GetTick>
 8009f28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009f2a:	4b39      	ldr	r3, [pc, #228]	; (800a010 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	015b      	lsls	r3, r3, #5
 8009f30:	0d1b      	lsrs	r3, r3, #20
 8009f32:	69fa      	ldr	r2, [r7, #28]
 8009f34:	fb02 f303 	mul.w	r3, r2, r3
 8009f38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009f3a:	e054      	b.n	8009fe6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f42:	d050      	beq.n	8009fe6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009f44:	f7fb ffdc 	bl	8005f00 <HAL_GetTick>
 8009f48:	4602      	mov	r2, r0
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	1ad3      	subs	r3, r2, r3
 8009f4e:	69fa      	ldr	r2, [r7, #28]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d902      	bls.n	8009f5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009f54:	69fb      	ldr	r3, [r7, #28]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d13d      	bne.n	8009fd6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	685a      	ldr	r2, [r3, #4]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009f68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f72:	d111      	bne.n	8009f98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f7c:	d004      	beq.n	8009f88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	689b      	ldr	r3, [r3, #8]
 8009f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f86:	d107      	bne.n	8009f98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fa0:	d10f      	bne.n	8009fc2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009fb0:	601a      	str	r2, [r3, #0]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009fc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009fd2:	2303      	movs	r3, #3
 8009fd4:	e017      	b.n	800a006 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d101      	bne.n	8009fe0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	3b01      	subs	r3, #1
 8009fe4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	689a      	ldr	r2, [r3, #8]
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	4013      	ands	r3, r2
 8009ff0:	68ba      	ldr	r2, [r7, #8]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	bf0c      	ite	eq
 8009ff6:	2301      	moveq	r3, #1
 8009ff8:	2300      	movne	r3, #0
 8009ffa:	b2db      	uxtb	r3, r3
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	79fb      	ldrb	r3, [r7, #7]
 800a000:	429a      	cmp	r2, r3
 800a002:	d19b      	bne.n	8009f3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a004:	2300      	movs	r3, #0
}
 800a006:	4618      	mov	r0, r3
 800a008:	3720      	adds	r7, #32
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	20000004 	.word	0x20000004

0800a014 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b086      	sub	sp, #24
 800a018:	af02      	add	r7, sp, #8
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	60b9      	str	r1, [r7, #8]
 800a01e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a028:	d111      	bne.n	800a04e <SPI_EndRxTransaction+0x3a>
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	689b      	ldr	r3, [r3, #8]
 800a02e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a032:	d004      	beq.n	800a03e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a03c:	d107      	bne.n	800a04e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a04c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a056:	d12a      	bne.n	800a0ae <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	689b      	ldr	r3, [r3, #8]
 800a05c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a060:	d012      	beq.n	800a088 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	9300      	str	r3, [sp, #0]
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	2200      	movs	r2, #0
 800a06a:	2180      	movs	r1, #128	; 0x80
 800a06c:	68f8      	ldr	r0, [r7, #12]
 800a06e:	f7ff ff49 	bl	8009f04 <SPI_WaitFlagStateUntilTimeout>
 800a072:	4603      	mov	r3, r0
 800a074:	2b00      	cmp	r3, #0
 800a076:	d02d      	beq.n	800a0d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a07c:	f043 0220 	orr.w	r2, r3, #32
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a084:	2303      	movs	r3, #3
 800a086:	e026      	b.n	800a0d6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	9300      	str	r3, [sp, #0]
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	2200      	movs	r2, #0
 800a090:	2101      	movs	r1, #1
 800a092:	68f8      	ldr	r0, [r7, #12]
 800a094:	f7ff ff36 	bl	8009f04 <SPI_WaitFlagStateUntilTimeout>
 800a098:	4603      	mov	r3, r0
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d01a      	beq.n	800a0d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0a2:	f043 0220 	orr.w	r2, r3, #32
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a0aa:	2303      	movs	r3, #3
 800a0ac:	e013      	b.n	800a0d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	9300      	str	r3, [sp, #0]
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	2101      	movs	r1, #1
 800a0b8:	68f8      	ldr	r0, [r7, #12]
 800a0ba:	f7ff ff23 	bl	8009f04 <SPI_WaitFlagStateUntilTimeout>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d007      	beq.n	800a0d4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0c8:	f043 0220 	orr.w	r2, r3, #32
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a0d0:	2303      	movs	r3, #3
 800a0d2:	e000      	b.n	800a0d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a0d4:	2300      	movs	r3, #0
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3710      	adds	r7, #16
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
	...

0800a0e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b088      	sub	sp, #32
 800a0e4:	af02      	add	r7, sp, #8
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	60b9      	str	r1, [r7, #8]
 800a0ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a0ec:	4b1b      	ldr	r3, [pc, #108]	; (800a15c <SPI_EndRxTxTransaction+0x7c>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a1b      	ldr	r2, [pc, #108]	; (800a160 <SPI_EndRxTxTransaction+0x80>)
 800a0f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0f6:	0d5b      	lsrs	r3, r3, #21
 800a0f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a0fc:	fb02 f303 	mul.w	r3, r2, r3
 800a100:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a10a:	d112      	bne.n	800a132 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	9300      	str	r3, [sp, #0]
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	2200      	movs	r2, #0
 800a114:	2180      	movs	r1, #128	; 0x80
 800a116:	68f8      	ldr	r0, [r7, #12]
 800a118:	f7ff fef4 	bl	8009f04 <SPI_WaitFlagStateUntilTimeout>
 800a11c:	4603      	mov	r3, r0
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d016      	beq.n	800a150 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a126:	f043 0220 	orr.w	r2, r3, #32
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a12e:	2303      	movs	r3, #3
 800a130:	e00f      	b.n	800a152 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d00a      	beq.n	800a14e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	3b01      	subs	r3, #1
 800a13c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a148:	2b80      	cmp	r3, #128	; 0x80
 800a14a:	d0f2      	beq.n	800a132 <SPI_EndRxTxTransaction+0x52>
 800a14c:	e000      	b.n	800a150 <SPI_EndRxTxTransaction+0x70>
        break;
 800a14e:	bf00      	nop
  }

  return HAL_OK;
 800a150:	2300      	movs	r3, #0
}
 800a152:	4618      	mov	r0, r3
 800a154:	3718      	adds	r7, #24
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	20000004 	.word	0x20000004
 800a160:	165e9f81 	.word	0x165e9f81

0800a164 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b082      	sub	sp, #8
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d101      	bne.n	800a176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a172:	2301      	movs	r3, #1
 800a174:	e03f      	b.n	800a1f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d106      	bne.n	800a190 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f7fa f840 	bl	8004210 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2224      	movs	r2, #36	; 0x24
 800a194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	68da      	ldr	r2, [r3, #12]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a1a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 f929 	bl	800a400 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	691a      	ldr	r2, [r3, #16]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a1bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	695a      	ldr	r2, [r3, #20]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a1cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	68da      	ldr	r2, [r3, #12]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a1dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2220      	movs	r2, #32
 800a1e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2220      	movs	r2, #32
 800a1f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3708      	adds	r7, #8
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b08a      	sub	sp, #40	; 0x28
 800a202:	af02      	add	r7, sp, #8
 800a204:	60f8      	str	r0, [r7, #12]
 800a206:	60b9      	str	r1, [r7, #8]
 800a208:	603b      	str	r3, [r7, #0]
 800a20a:	4613      	mov	r3, r2
 800a20c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a20e:	2300      	movs	r3, #0
 800a210:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	2b20      	cmp	r3, #32
 800a21c:	d17c      	bne.n	800a318 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d002      	beq.n	800a22a <HAL_UART_Transmit+0x2c>
 800a224:	88fb      	ldrh	r3, [r7, #6]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d101      	bne.n	800a22e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a22a:	2301      	movs	r3, #1
 800a22c:	e075      	b.n	800a31a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a234:	2b01      	cmp	r3, #1
 800a236:	d101      	bne.n	800a23c <HAL_UART_Transmit+0x3e>
 800a238:	2302      	movs	r3, #2
 800a23a:	e06e      	b.n	800a31a <HAL_UART_Transmit+0x11c>
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2201      	movs	r2, #1
 800a240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2200      	movs	r2, #0
 800a248:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2221      	movs	r2, #33	; 0x21
 800a24e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a252:	f7fb fe55 	bl	8005f00 <HAL_GetTick>
 800a256:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	88fa      	ldrh	r2, [r7, #6]
 800a25c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	88fa      	ldrh	r2, [r7, #6]
 800a262:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	689b      	ldr	r3, [r3, #8]
 800a268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a26c:	d108      	bne.n	800a280 <HAL_UART_Transmit+0x82>
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	691b      	ldr	r3, [r3, #16]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d104      	bne.n	800a280 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a276:	2300      	movs	r3, #0
 800a278:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	61bb      	str	r3, [r7, #24]
 800a27e:	e003      	b.n	800a288 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a284:	2300      	movs	r3, #0
 800a286:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2200      	movs	r2, #0
 800a28c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a290:	e02a      	b.n	800a2e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	9300      	str	r3, [sp, #0]
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	2200      	movs	r2, #0
 800a29a:	2180      	movs	r1, #128	; 0x80
 800a29c:	68f8      	ldr	r0, [r7, #12]
 800a29e:	f000 f840 	bl	800a322 <UART_WaitOnFlagUntilTimeout>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d001      	beq.n	800a2ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a2a8:	2303      	movs	r3, #3
 800a2aa:	e036      	b.n	800a31a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a2ac:	69fb      	ldr	r3, [r7, #28]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d10b      	bne.n	800a2ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a2b2:	69bb      	ldr	r3, [r7, #24]
 800a2b4:	881b      	ldrh	r3, [r3, #0]
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a2c2:	69bb      	ldr	r3, [r7, #24]
 800a2c4:	3302      	adds	r3, #2
 800a2c6:	61bb      	str	r3, [r7, #24]
 800a2c8:	e007      	b.n	800a2da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a2ca:	69fb      	ldr	r3, [r7, #28]
 800a2cc:	781a      	ldrb	r2, [r3, #0]
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a2d4:	69fb      	ldr	r3, [r7, #28]
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	3b01      	subs	r3, #1
 800a2e2:	b29a      	uxth	r2, r3
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d1cf      	bne.n	800a292 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	9300      	str	r3, [sp, #0]
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	2140      	movs	r1, #64	; 0x40
 800a2fc:	68f8      	ldr	r0, [r7, #12]
 800a2fe:	f000 f810 	bl	800a322 <UART_WaitOnFlagUntilTimeout>
 800a302:	4603      	mov	r3, r0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d001      	beq.n	800a30c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a308:	2303      	movs	r3, #3
 800a30a:	e006      	b.n	800a31a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2220      	movs	r2, #32
 800a310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a314:	2300      	movs	r3, #0
 800a316:	e000      	b.n	800a31a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a318:	2302      	movs	r3, #2
  }
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3720      	adds	r7, #32
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}

0800a322 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a322:	b580      	push	{r7, lr}
 800a324:	b090      	sub	sp, #64	; 0x40
 800a326:	af00      	add	r7, sp, #0
 800a328:	60f8      	str	r0, [r7, #12]
 800a32a:	60b9      	str	r1, [r7, #8]
 800a32c:	603b      	str	r3, [r7, #0]
 800a32e:	4613      	mov	r3, r2
 800a330:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a332:	e050      	b.n	800a3d6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a334:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a33a:	d04c      	beq.n	800a3d6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a33c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d007      	beq.n	800a352 <UART_WaitOnFlagUntilTimeout+0x30>
 800a342:	f7fb fddd 	bl	8005f00 <HAL_GetTick>
 800a346:	4602      	mov	r2, r0
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	1ad3      	subs	r3, r2, r3
 800a34c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a34e:	429a      	cmp	r2, r3
 800a350:	d241      	bcs.n	800a3d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	330c      	adds	r3, #12
 800a358:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35c:	e853 3f00 	ldrex	r3, [r3]
 800a360:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a364:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a368:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	330c      	adds	r3, #12
 800a370:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a372:	637a      	str	r2, [r7, #52]	; 0x34
 800a374:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a376:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a378:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a37a:	e841 2300 	strex	r3, r2, [r1]
 800a37e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a382:	2b00      	cmp	r3, #0
 800a384:	d1e5      	bne.n	800a352 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	3314      	adds	r3, #20
 800a38c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	e853 3f00 	ldrex	r3, [r3]
 800a394:	613b      	str	r3, [r7, #16]
   return(result);
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	f023 0301 	bic.w	r3, r3, #1
 800a39c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	3314      	adds	r3, #20
 800a3a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3a6:	623a      	str	r2, [r7, #32]
 800a3a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3aa:	69f9      	ldr	r1, [r7, #28]
 800a3ac:	6a3a      	ldr	r2, [r7, #32]
 800a3ae:	e841 2300 	strex	r3, r2, [r1]
 800a3b2:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d1e5      	bne.n	800a386 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2220      	movs	r2, #32
 800a3be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2220      	movs	r2, #32
 800a3c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a3d2:	2303      	movs	r3, #3
 800a3d4:	e00f      	b.n	800a3f6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	681a      	ldr	r2, [r3, #0]
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	4013      	ands	r3, r2
 800a3e0:	68ba      	ldr	r2, [r7, #8]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	bf0c      	ite	eq
 800a3e6:	2301      	moveq	r3, #1
 800a3e8:	2300      	movne	r3, #0
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	79fb      	ldrb	r3, [r7, #7]
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d09f      	beq.n	800a334 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a3f4:	2300      	movs	r3, #0
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3740      	adds	r7, #64	; 0x40
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
	...

0800a400 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a404:	b09f      	sub	sp, #124	; 0x7c
 800a406:	af00      	add	r7, sp, #0
 800a408:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a40a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	691b      	ldr	r3, [r3, #16]
 800a410:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a416:	68d9      	ldr	r1, [r3, #12]
 800a418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	ea40 0301 	orr.w	r3, r0, r1
 800a420:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a424:	689a      	ldr	r2, [r3, #8]
 800a426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a428:	691b      	ldr	r3, [r3, #16]
 800a42a:	431a      	orrs	r2, r3
 800a42c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a42e:	695b      	ldr	r3, [r3, #20]
 800a430:	431a      	orrs	r2, r3
 800a432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a434:	69db      	ldr	r3, [r3, #28]
 800a436:	4313      	orrs	r3, r2
 800a438:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a43a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a444:	f021 010c 	bic.w	r1, r1, #12
 800a448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a44e:	430b      	orrs	r3, r1
 800a450:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	695b      	ldr	r3, [r3, #20]
 800a458:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a45c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a45e:	6999      	ldr	r1, [r3, #24]
 800a460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a462:	681a      	ldr	r2, [r3, #0]
 800a464:	ea40 0301 	orr.w	r3, r0, r1
 800a468:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a46a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	4bc5      	ldr	r3, [pc, #788]	; (800a784 <UART_SetConfig+0x384>)
 800a470:	429a      	cmp	r2, r3
 800a472:	d004      	beq.n	800a47e <UART_SetConfig+0x7e>
 800a474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	4bc3      	ldr	r3, [pc, #780]	; (800a788 <UART_SetConfig+0x388>)
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d103      	bne.n	800a486 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a47e:	f7fe f931 	bl	80086e4 <HAL_RCC_GetPCLK2Freq>
 800a482:	6778      	str	r0, [r7, #116]	; 0x74
 800a484:	e002      	b.n	800a48c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a486:	f7fe f919 	bl	80086bc <HAL_RCC_GetPCLK1Freq>
 800a48a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a48c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a48e:	69db      	ldr	r3, [r3, #28]
 800a490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a494:	f040 80b6 	bne.w	800a604 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a498:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a49a:	461c      	mov	r4, r3
 800a49c:	f04f 0500 	mov.w	r5, #0
 800a4a0:	4622      	mov	r2, r4
 800a4a2:	462b      	mov	r3, r5
 800a4a4:	1891      	adds	r1, r2, r2
 800a4a6:	6439      	str	r1, [r7, #64]	; 0x40
 800a4a8:	415b      	adcs	r3, r3
 800a4aa:	647b      	str	r3, [r7, #68]	; 0x44
 800a4ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a4b0:	1912      	adds	r2, r2, r4
 800a4b2:	eb45 0303 	adc.w	r3, r5, r3
 800a4b6:	f04f 0000 	mov.w	r0, #0
 800a4ba:	f04f 0100 	mov.w	r1, #0
 800a4be:	00d9      	lsls	r1, r3, #3
 800a4c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a4c4:	00d0      	lsls	r0, r2, #3
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	1911      	adds	r1, r2, r4
 800a4cc:	6639      	str	r1, [r7, #96]	; 0x60
 800a4ce:	416b      	adcs	r3, r5
 800a4d0:	667b      	str	r3, [r7, #100]	; 0x64
 800a4d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	f04f 0300 	mov.w	r3, #0
 800a4dc:	1891      	adds	r1, r2, r2
 800a4de:	63b9      	str	r1, [r7, #56]	; 0x38
 800a4e0:	415b      	adcs	r3, r3
 800a4e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a4e8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a4ec:	f7f6 fbd4 	bl	8000c98 <__aeabi_uldivmod>
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	4ba5      	ldr	r3, [pc, #660]	; (800a78c <UART_SetConfig+0x38c>)
 800a4f6:	fba3 2302 	umull	r2, r3, r3, r2
 800a4fa:	095b      	lsrs	r3, r3, #5
 800a4fc:	011e      	lsls	r6, r3, #4
 800a4fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a500:	461c      	mov	r4, r3
 800a502:	f04f 0500 	mov.w	r5, #0
 800a506:	4622      	mov	r2, r4
 800a508:	462b      	mov	r3, r5
 800a50a:	1891      	adds	r1, r2, r2
 800a50c:	6339      	str	r1, [r7, #48]	; 0x30
 800a50e:	415b      	adcs	r3, r3
 800a510:	637b      	str	r3, [r7, #52]	; 0x34
 800a512:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a516:	1912      	adds	r2, r2, r4
 800a518:	eb45 0303 	adc.w	r3, r5, r3
 800a51c:	f04f 0000 	mov.w	r0, #0
 800a520:	f04f 0100 	mov.w	r1, #0
 800a524:	00d9      	lsls	r1, r3, #3
 800a526:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a52a:	00d0      	lsls	r0, r2, #3
 800a52c:	4602      	mov	r2, r0
 800a52e:	460b      	mov	r3, r1
 800a530:	1911      	adds	r1, r2, r4
 800a532:	65b9      	str	r1, [r7, #88]	; 0x58
 800a534:	416b      	adcs	r3, r5
 800a536:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	461a      	mov	r2, r3
 800a53e:	f04f 0300 	mov.w	r3, #0
 800a542:	1891      	adds	r1, r2, r2
 800a544:	62b9      	str	r1, [r7, #40]	; 0x28
 800a546:	415b      	adcs	r3, r3
 800a548:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a54a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a54e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a552:	f7f6 fba1 	bl	8000c98 <__aeabi_uldivmod>
 800a556:	4602      	mov	r2, r0
 800a558:	460b      	mov	r3, r1
 800a55a:	4b8c      	ldr	r3, [pc, #560]	; (800a78c <UART_SetConfig+0x38c>)
 800a55c:	fba3 1302 	umull	r1, r3, r3, r2
 800a560:	095b      	lsrs	r3, r3, #5
 800a562:	2164      	movs	r1, #100	; 0x64
 800a564:	fb01 f303 	mul.w	r3, r1, r3
 800a568:	1ad3      	subs	r3, r2, r3
 800a56a:	00db      	lsls	r3, r3, #3
 800a56c:	3332      	adds	r3, #50	; 0x32
 800a56e:	4a87      	ldr	r2, [pc, #540]	; (800a78c <UART_SetConfig+0x38c>)
 800a570:	fba2 2303 	umull	r2, r3, r2, r3
 800a574:	095b      	lsrs	r3, r3, #5
 800a576:	005b      	lsls	r3, r3, #1
 800a578:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a57c:	441e      	add	r6, r3
 800a57e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a580:	4618      	mov	r0, r3
 800a582:	f04f 0100 	mov.w	r1, #0
 800a586:	4602      	mov	r2, r0
 800a588:	460b      	mov	r3, r1
 800a58a:	1894      	adds	r4, r2, r2
 800a58c:	623c      	str	r4, [r7, #32]
 800a58e:	415b      	adcs	r3, r3
 800a590:	627b      	str	r3, [r7, #36]	; 0x24
 800a592:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a596:	1812      	adds	r2, r2, r0
 800a598:	eb41 0303 	adc.w	r3, r1, r3
 800a59c:	f04f 0400 	mov.w	r4, #0
 800a5a0:	f04f 0500 	mov.w	r5, #0
 800a5a4:	00dd      	lsls	r5, r3, #3
 800a5a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a5aa:	00d4      	lsls	r4, r2, #3
 800a5ac:	4622      	mov	r2, r4
 800a5ae:	462b      	mov	r3, r5
 800a5b0:	1814      	adds	r4, r2, r0
 800a5b2:	653c      	str	r4, [r7, #80]	; 0x50
 800a5b4:	414b      	adcs	r3, r1
 800a5b6:	657b      	str	r3, [r7, #84]	; 0x54
 800a5b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	461a      	mov	r2, r3
 800a5be:	f04f 0300 	mov.w	r3, #0
 800a5c2:	1891      	adds	r1, r2, r2
 800a5c4:	61b9      	str	r1, [r7, #24]
 800a5c6:	415b      	adcs	r3, r3
 800a5c8:	61fb      	str	r3, [r7, #28]
 800a5ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a5ce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a5d2:	f7f6 fb61 	bl	8000c98 <__aeabi_uldivmod>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	460b      	mov	r3, r1
 800a5da:	4b6c      	ldr	r3, [pc, #432]	; (800a78c <UART_SetConfig+0x38c>)
 800a5dc:	fba3 1302 	umull	r1, r3, r3, r2
 800a5e0:	095b      	lsrs	r3, r3, #5
 800a5e2:	2164      	movs	r1, #100	; 0x64
 800a5e4:	fb01 f303 	mul.w	r3, r1, r3
 800a5e8:	1ad3      	subs	r3, r2, r3
 800a5ea:	00db      	lsls	r3, r3, #3
 800a5ec:	3332      	adds	r3, #50	; 0x32
 800a5ee:	4a67      	ldr	r2, [pc, #412]	; (800a78c <UART_SetConfig+0x38c>)
 800a5f0:	fba2 2303 	umull	r2, r3, r2, r3
 800a5f4:	095b      	lsrs	r3, r3, #5
 800a5f6:	f003 0207 	and.w	r2, r3, #7
 800a5fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4432      	add	r2, r6
 800a600:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a602:	e0b9      	b.n	800a778 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a604:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a606:	461c      	mov	r4, r3
 800a608:	f04f 0500 	mov.w	r5, #0
 800a60c:	4622      	mov	r2, r4
 800a60e:	462b      	mov	r3, r5
 800a610:	1891      	adds	r1, r2, r2
 800a612:	6139      	str	r1, [r7, #16]
 800a614:	415b      	adcs	r3, r3
 800a616:	617b      	str	r3, [r7, #20]
 800a618:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a61c:	1912      	adds	r2, r2, r4
 800a61e:	eb45 0303 	adc.w	r3, r5, r3
 800a622:	f04f 0000 	mov.w	r0, #0
 800a626:	f04f 0100 	mov.w	r1, #0
 800a62a:	00d9      	lsls	r1, r3, #3
 800a62c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a630:	00d0      	lsls	r0, r2, #3
 800a632:	4602      	mov	r2, r0
 800a634:	460b      	mov	r3, r1
 800a636:	eb12 0804 	adds.w	r8, r2, r4
 800a63a:	eb43 0905 	adc.w	r9, r3, r5
 800a63e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	4618      	mov	r0, r3
 800a644:	f04f 0100 	mov.w	r1, #0
 800a648:	f04f 0200 	mov.w	r2, #0
 800a64c:	f04f 0300 	mov.w	r3, #0
 800a650:	008b      	lsls	r3, r1, #2
 800a652:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a656:	0082      	lsls	r2, r0, #2
 800a658:	4640      	mov	r0, r8
 800a65a:	4649      	mov	r1, r9
 800a65c:	f7f6 fb1c 	bl	8000c98 <__aeabi_uldivmod>
 800a660:	4602      	mov	r2, r0
 800a662:	460b      	mov	r3, r1
 800a664:	4b49      	ldr	r3, [pc, #292]	; (800a78c <UART_SetConfig+0x38c>)
 800a666:	fba3 2302 	umull	r2, r3, r3, r2
 800a66a:	095b      	lsrs	r3, r3, #5
 800a66c:	011e      	lsls	r6, r3, #4
 800a66e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a670:	4618      	mov	r0, r3
 800a672:	f04f 0100 	mov.w	r1, #0
 800a676:	4602      	mov	r2, r0
 800a678:	460b      	mov	r3, r1
 800a67a:	1894      	adds	r4, r2, r2
 800a67c:	60bc      	str	r4, [r7, #8]
 800a67e:	415b      	adcs	r3, r3
 800a680:	60fb      	str	r3, [r7, #12]
 800a682:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a686:	1812      	adds	r2, r2, r0
 800a688:	eb41 0303 	adc.w	r3, r1, r3
 800a68c:	f04f 0400 	mov.w	r4, #0
 800a690:	f04f 0500 	mov.w	r5, #0
 800a694:	00dd      	lsls	r5, r3, #3
 800a696:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a69a:	00d4      	lsls	r4, r2, #3
 800a69c:	4622      	mov	r2, r4
 800a69e:	462b      	mov	r3, r5
 800a6a0:	1814      	adds	r4, r2, r0
 800a6a2:	64bc      	str	r4, [r7, #72]	; 0x48
 800a6a4:	414b      	adcs	r3, r1
 800a6a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f04f 0100 	mov.w	r1, #0
 800a6b2:	f04f 0200 	mov.w	r2, #0
 800a6b6:	f04f 0300 	mov.w	r3, #0
 800a6ba:	008b      	lsls	r3, r1, #2
 800a6bc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a6c0:	0082      	lsls	r2, r0, #2
 800a6c2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a6c6:	f7f6 fae7 	bl	8000c98 <__aeabi_uldivmod>
 800a6ca:	4602      	mov	r2, r0
 800a6cc:	460b      	mov	r3, r1
 800a6ce:	4b2f      	ldr	r3, [pc, #188]	; (800a78c <UART_SetConfig+0x38c>)
 800a6d0:	fba3 1302 	umull	r1, r3, r3, r2
 800a6d4:	095b      	lsrs	r3, r3, #5
 800a6d6:	2164      	movs	r1, #100	; 0x64
 800a6d8:	fb01 f303 	mul.w	r3, r1, r3
 800a6dc:	1ad3      	subs	r3, r2, r3
 800a6de:	011b      	lsls	r3, r3, #4
 800a6e0:	3332      	adds	r3, #50	; 0x32
 800a6e2:	4a2a      	ldr	r2, [pc, #168]	; (800a78c <UART_SetConfig+0x38c>)
 800a6e4:	fba2 2303 	umull	r2, r3, r2, r3
 800a6e8:	095b      	lsrs	r3, r3, #5
 800a6ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a6ee:	441e      	add	r6, r3
 800a6f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f04f 0100 	mov.w	r1, #0
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	1894      	adds	r4, r2, r2
 800a6fe:	603c      	str	r4, [r7, #0]
 800a700:	415b      	adcs	r3, r3
 800a702:	607b      	str	r3, [r7, #4]
 800a704:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a708:	1812      	adds	r2, r2, r0
 800a70a:	eb41 0303 	adc.w	r3, r1, r3
 800a70e:	f04f 0400 	mov.w	r4, #0
 800a712:	f04f 0500 	mov.w	r5, #0
 800a716:	00dd      	lsls	r5, r3, #3
 800a718:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a71c:	00d4      	lsls	r4, r2, #3
 800a71e:	4622      	mov	r2, r4
 800a720:	462b      	mov	r3, r5
 800a722:	eb12 0a00 	adds.w	sl, r2, r0
 800a726:	eb43 0b01 	adc.w	fp, r3, r1
 800a72a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	4618      	mov	r0, r3
 800a730:	f04f 0100 	mov.w	r1, #0
 800a734:	f04f 0200 	mov.w	r2, #0
 800a738:	f04f 0300 	mov.w	r3, #0
 800a73c:	008b      	lsls	r3, r1, #2
 800a73e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a742:	0082      	lsls	r2, r0, #2
 800a744:	4650      	mov	r0, sl
 800a746:	4659      	mov	r1, fp
 800a748:	f7f6 faa6 	bl	8000c98 <__aeabi_uldivmod>
 800a74c:	4602      	mov	r2, r0
 800a74e:	460b      	mov	r3, r1
 800a750:	4b0e      	ldr	r3, [pc, #56]	; (800a78c <UART_SetConfig+0x38c>)
 800a752:	fba3 1302 	umull	r1, r3, r3, r2
 800a756:	095b      	lsrs	r3, r3, #5
 800a758:	2164      	movs	r1, #100	; 0x64
 800a75a:	fb01 f303 	mul.w	r3, r1, r3
 800a75e:	1ad3      	subs	r3, r2, r3
 800a760:	011b      	lsls	r3, r3, #4
 800a762:	3332      	adds	r3, #50	; 0x32
 800a764:	4a09      	ldr	r2, [pc, #36]	; (800a78c <UART_SetConfig+0x38c>)
 800a766:	fba2 2303 	umull	r2, r3, r2, r3
 800a76a:	095b      	lsrs	r3, r3, #5
 800a76c:	f003 020f 	and.w	r2, r3, #15
 800a770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4432      	add	r2, r6
 800a776:	609a      	str	r2, [r3, #8]
}
 800a778:	bf00      	nop
 800a77a:	377c      	adds	r7, #124	; 0x7c
 800a77c:	46bd      	mov	sp, r7
 800a77e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a782:	bf00      	nop
 800a784:	40011000 	.word	0x40011000
 800a788:	40011400 	.word	0x40011400
 800a78c:	51eb851f 	.word	0x51eb851f

0800a790 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a790:	b084      	sub	sp, #16
 800a792:	b480      	push	{r7}
 800a794:	b085      	sub	sp, #20
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
 800a79a:	f107 001c 	add.w	r0, r7, #28
 800a79e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a7a6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a7a8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a7aa:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a7ae:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a7b2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a7b6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a7ba:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a7bc:	68fa      	ldr	r2, [r7, #12]
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800a7ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a7ce:	68fa      	ldr	r2, [r7, #12]
 800a7d0:	431a      	orrs	r2, r3
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a7d6:	2300      	movs	r3, #0
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3714      	adds	r7, #20
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	b004      	add	sp, #16
 800a7e4:	4770      	bx	lr

0800a7e6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a7e6:	b480      	push	{r7}
 800a7e8:	b083      	sub	sp, #12
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	370c      	adds	r7, #12
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a800:	b480      	push	{r7}
 800a802:	b083      	sub	sp, #12
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a814:	2300      	movs	r3, #0
}
 800a816:	4618      	mov	r0, r3
 800a818:	370c      	adds	r7, #12
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr

0800a822 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a822:	b580      	push	{r7, lr}
 800a824:	b082      	sub	sp, #8
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2203      	movs	r2, #3
 800a82e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800a830:	2002      	movs	r0, #2
 800a832:	f7fb fb71 	bl	8005f18 <HAL_Delay>
  
  return HAL_OK;
 800a836:	2300      	movs	r3, #0
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3708      	adds	r7, #8
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a840:	b480      	push	{r7}
 800a842:	b083      	sub	sp, #12
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f003 0303 	and.w	r3, r3, #3
}
 800a850:	4618      	mov	r0, r3
 800a852:	370c      	adds	r7, #12
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b085      	sub	sp, #20
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a866:	2300      	movs	r3, #0
 800a868:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a87a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a880:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a886:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a888:	68fa      	ldr	r2, [r7, #12]
 800a88a:	4313      	orrs	r3, r2
 800a88c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	68db      	ldr	r3, [r3, #12]
 800a892:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a896:	f023 030f 	bic.w	r3, r3, #15
 800a89a:	68fa      	ldr	r2, [r7, #12]
 800a89c:	431a      	orrs	r2, r3
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a8a2:	2300      	movs	r3, #0
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3714      	adds	r7, #20
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr

0800a8b0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	691b      	ldr	r3, [r3, #16]
 800a8bc:	b2db      	uxtb	r3, r3
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	370c      	adds	r7, #12
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr

0800a8ca <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a8ca:	b480      	push	{r7}
 800a8cc:	b085      	sub	sp, #20
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
 800a8d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	3314      	adds	r3, #20
 800a8d8:	461a      	mov	r2, r3
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	4413      	add	r3, r2
 800a8de:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
}  
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3714      	adds	r7, #20
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr

0800a8f0 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b085      	sub	sp, #20
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	681a      	ldr	r2, [r3, #0]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	685a      	ldr	r2, [r3, #4]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a916:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a91c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a922:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a924:	68fa      	ldr	r2, [r7, #12]
 800a926:	4313      	orrs	r3, r2
 800a928:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a92e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	431a      	orrs	r2, r3
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a93a:	2300      	movs	r3, #0

}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3714      	adds	r7, #20
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b088      	sub	sp, #32
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a956:	2310      	movs	r3, #16
 800a958:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a95a:	2340      	movs	r3, #64	; 0x40
 800a95c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a95e:	2300      	movs	r3, #0
 800a960:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a966:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a968:	f107 0308 	add.w	r3, r7, #8
 800a96c:	4619      	mov	r1, r3
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f7ff ff74 	bl	800a85c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a974:	f241 3288 	movw	r2, #5000	; 0x1388
 800a978:	2110      	movs	r1, #16
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 fa02 	bl	800ad84 <SDMMC_GetCmdResp1>
 800a980:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a982:	69fb      	ldr	r3, [r7, #28]
}
 800a984:	4618      	mov	r0, r3
 800a986:	3720      	adds	r7, #32
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b088      	sub	sp, #32
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a99a:	2311      	movs	r3, #17
 800a99c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a99e:	2340      	movs	r3, #64	; 0x40
 800a9a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a9a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a9ac:	f107 0308 	add.w	r3, r7, #8
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f7ff ff52 	bl	800a85c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a9b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9bc:	2111      	movs	r1, #17
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 f9e0 	bl	800ad84 <SDMMC_GetCmdResp1>
 800a9c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9c6:	69fb      	ldr	r3, [r7, #28]
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3720      	adds	r7, #32
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b088      	sub	sp, #32
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a9de:	2312      	movs	r3, #18
 800a9e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a9e2:	2340      	movs	r3, #64	; 0x40
 800a9e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a9ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a9f0:	f107 0308 	add.w	r3, r7, #8
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f7ff ff30 	bl	800a85c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a9fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa00:	2112      	movs	r1, #18
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 f9be 	bl	800ad84 <SDMMC_GetCmdResp1>
 800aa08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa0a:	69fb      	ldr	r3, [r7, #28]
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3720      	adds	r7, #32
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}

0800aa14 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b088      	sub	sp, #32
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800aa22:	2318      	movs	r3, #24
 800aa24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aa26:	2340      	movs	r3, #64	; 0x40
 800aa28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa34:	f107 0308 	add.w	r3, r7, #8
 800aa38:	4619      	mov	r1, r3
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f7ff ff0e 	bl	800a85c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800aa40:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa44:	2118      	movs	r1, #24
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f000 f99c 	bl	800ad84 <SDMMC_GetCmdResp1>
 800aa4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa4e:	69fb      	ldr	r3, [r7, #28]
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3720      	adds	r7, #32
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b088      	sub	sp, #32
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800aa66:	2319      	movs	r3, #25
 800aa68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aa6a:	2340      	movs	r3, #64	; 0x40
 800aa6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa78:	f107 0308 	add.w	r3, r7, #8
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f7ff feec 	bl	800a85c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800aa84:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa88:	2119      	movs	r1, #25
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 f97a 	bl	800ad84 <SDMMC_GetCmdResp1>
 800aa90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa92:	69fb      	ldr	r3, [r7, #28]
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3720      	adds	r7, #32
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b088      	sub	sp, #32
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800aaa8:	230c      	movs	r3, #12
 800aaaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aaac:	2340      	movs	r3, #64	; 0x40
 800aaae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aab0:	2300      	movs	r3, #0
 800aab2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aab8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aaba:	f107 0308 	add.w	r3, r7, #8
 800aabe:	4619      	mov	r1, r3
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f7ff fecb 	bl	800a85c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800aac6:	4a05      	ldr	r2, [pc, #20]	; (800aadc <SDMMC_CmdStopTransfer+0x40>)
 800aac8:	210c      	movs	r1, #12
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f000 f95a 	bl	800ad84 <SDMMC_GetCmdResp1>
 800aad0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aad2:	69fb      	ldr	r3, [r7, #28]
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3720      	adds	r7, #32
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}
 800aadc:	05f5e100 	.word	0x05f5e100

0800aae0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b08a      	sub	sp, #40	; 0x28
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800aaf0:	2307      	movs	r3, #7
 800aaf2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aaf4:	2340      	movs	r3, #64	; 0x40
 800aaf6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aafc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab00:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab02:	f107 0310 	add.w	r3, r7, #16
 800ab06:	4619      	mov	r1, r3
 800ab08:	68f8      	ldr	r0, [r7, #12]
 800ab0a:	f7ff fea7 	bl	800a85c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800ab0e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab12:	2107      	movs	r1, #7
 800ab14:	68f8      	ldr	r0, [r7, #12]
 800ab16:	f000 f935 	bl	800ad84 <SDMMC_GetCmdResp1>
 800ab1a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ab1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3728      	adds	r7, #40	; 0x28
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}

0800ab26 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800ab26:	b580      	push	{r7, lr}
 800ab28:	b088      	sub	sp, #32
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ab32:	2300      	movs	r3, #0
 800ab34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ab36:	2300      	movs	r3, #0
 800ab38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab44:	f107 0308 	add.w	r3, r7, #8
 800ab48:	4619      	mov	r1, r3
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f7ff fe86 	bl	800a85c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 f8eb 	bl	800ad2c <SDMMC_GetCmdError>
 800ab56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab58:	69fb      	ldr	r3, [r7, #28]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3720      	adds	r7, #32
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}

0800ab62 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800ab62:	b580      	push	{r7, lr}
 800ab64:	b088      	sub	sp, #32
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ab6a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ab6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ab70:	2308      	movs	r3, #8
 800ab72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ab74:	2340      	movs	r3, #64	; 0x40
 800ab76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab82:	f107 0308 	add.w	r3, r7, #8
 800ab86:	4619      	mov	r1, r3
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f7ff fe67 	bl	800a85c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 fae2 	bl	800b158 <SDMMC_GetCmdResp7>
 800ab94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab96:	69fb      	ldr	r3, [r7, #28]
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3720      	adds	r7, #32
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b088      	sub	sp, #32
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800abae:	2337      	movs	r3, #55	; 0x37
 800abb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800abb2:	2340      	movs	r3, #64	; 0x40
 800abb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800abb6:	2300      	movs	r3, #0
 800abb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800abba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abbe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800abc0:	f107 0308 	add.w	r3, r7, #8
 800abc4:	4619      	mov	r1, r3
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f7ff fe48 	bl	800a85c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800abcc:	f241 3288 	movw	r2, #5000	; 0x1388
 800abd0:	2137      	movs	r1, #55	; 0x37
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 f8d6 	bl	800ad84 <SDMMC_GetCmdResp1>
 800abd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abda:	69fb      	ldr	r3, [r7, #28]
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3720      	adds	r7, #32
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b088      	sub	sp, #32
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800abf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800abf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800abfa:	2329      	movs	r3, #41	; 0x29
 800abfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800abfe:	2340      	movs	r3, #64	; 0x40
 800ac00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac02:	2300      	movs	r3, #0
 800ac04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac0a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac0c:	f107 0308 	add.w	r3, r7, #8
 800ac10:	4619      	mov	r1, r3
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f7ff fe22 	bl	800a85c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f000 f9e9 	bl	800aff0 <SDMMC_GetCmdResp3>
 800ac1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac20:	69fb      	ldr	r3, [r7, #28]
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3720      	adds	r7, #32
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}

0800ac2a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800ac2a:	b580      	push	{r7, lr}
 800ac2c:	b088      	sub	sp, #32
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ac32:	2300      	movs	r3, #0
 800ac34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ac36:	2302      	movs	r3, #2
 800ac38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ac3a:	23c0      	movs	r3, #192	; 0xc0
 800ac3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac46:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac48:	f107 0308 	add.w	r3, r7, #8
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f7ff fe04 	bl	800a85c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f000 f983 	bl	800af60 <SDMMC_GetCmdResp2>
 800ac5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac5c:	69fb      	ldr	r3, [r7, #28]
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3720      	adds	r7, #32
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}

0800ac66 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ac66:	b580      	push	{r7, lr}
 800ac68:	b088      	sub	sp, #32
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
 800ac6e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ac74:	2309      	movs	r3, #9
 800ac76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ac78:	23c0      	movs	r3, #192	; 0xc0
 800ac7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac84:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac86:	f107 0308 	add.w	r3, r7, #8
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f7ff fde5 	bl	800a85c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 f964 	bl	800af60 <SDMMC_GetCmdResp2>
 800ac98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac9a:	69fb      	ldr	r3, [r7, #28]
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3720      	adds	r7, #32
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b088      	sub	sp, #32
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800acae:	2300      	movs	r3, #0
 800acb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800acb2:	2303      	movs	r3, #3
 800acb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800acb6:	2340      	movs	r3, #64	; 0x40
 800acb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800acba:	2300      	movs	r3, #0
 800acbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800acbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acc2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800acc4:	f107 0308 	add.w	r3, r7, #8
 800acc8:	4619      	mov	r1, r3
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f7ff fdc6 	bl	800a85c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800acd0:	683a      	ldr	r2, [r7, #0]
 800acd2:	2103      	movs	r1, #3
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f000 f9c9 	bl	800b06c <SDMMC_GetCmdResp6>
 800acda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acdc:	69fb      	ldr	r3, [r7, #28]
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3720      	adds	r7, #32
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}

0800ace6 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ace6:	b580      	push	{r7, lr}
 800ace8:	b088      	sub	sp, #32
 800acea:	af00      	add	r7, sp, #0
 800acec:	6078      	str	r0, [r7, #4]
 800acee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800acf4:	230d      	movs	r3, #13
 800acf6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800acf8:	2340      	movs	r3, #64	; 0x40
 800acfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800acfc:	2300      	movs	r3, #0
 800acfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad04:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad06:	f107 0308 	add.w	r3, r7, #8
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f7ff fda5 	bl	800a85c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800ad12:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad16:	210d      	movs	r1, #13
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 f833 	bl	800ad84 <SDMMC_GetCmdResp1>
 800ad1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad20:	69fb      	ldr	r3, [r7, #28]
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3720      	adds	r7, #32
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
	...

0800ad2c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b085      	sub	sp, #20
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ad34:	4b11      	ldr	r3, [pc, #68]	; (800ad7c <SDMMC_GetCmdError+0x50>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4a11      	ldr	r2, [pc, #68]	; (800ad80 <SDMMC_GetCmdError+0x54>)
 800ad3a:	fba2 2303 	umull	r2, r3, r2, r3
 800ad3e:	0a5b      	lsrs	r3, r3, #9
 800ad40:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad44:	fb02 f303 	mul.w	r3, r2, r3
 800ad48:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	1e5a      	subs	r2, r3, #1
 800ad4e:	60fa      	str	r2, [r7, #12]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d102      	bne.n	800ad5a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad58:	e009      	b.n	800ad6e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d0f1      	beq.n	800ad4a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	22c5      	movs	r2, #197	; 0xc5
 800ad6a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ad6c:	2300      	movs	r3, #0
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3714      	adds	r7, #20
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr
 800ad7a:	bf00      	nop
 800ad7c:	20000004 	.word	0x20000004
 800ad80:	10624dd3 	.word	0x10624dd3

0800ad84 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b088      	sub	sp, #32
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	60f8      	str	r0, [r7, #12]
 800ad8c:	460b      	mov	r3, r1
 800ad8e:	607a      	str	r2, [r7, #4]
 800ad90:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ad92:	4b70      	ldr	r3, [pc, #448]	; (800af54 <SDMMC_GetCmdResp1+0x1d0>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4a70      	ldr	r2, [pc, #448]	; (800af58 <SDMMC_GetCmdResp1+0x1d4>)
 800ad98:	fba2 2303 	umull	r2, r3, r2, r3
 800ad9c:	0a5a      	lsrs	r2, r3, #9
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	fb02 f303 	mul.w	r3, r2, r3
 800ada4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ada6:	69fb      	ldr	r3, [r7, #28]
 800ada8:	1e5a      	subs	r2, r3, #1
 800adaa:	61fa      	str	r2, [r7, #28]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d102      	bne.n	800adb6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800adb0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800adb4:	e0c9      	b.n	800af4a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adba:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800adbc:	69bb      	ldr	r3, [r7, #24]
 800adbe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d0ef      	beq.n	800ada6 <SDMMC_GetCmdResp1+0x22>
 800adc6:	69bb      	ldr	r3, [r7, #24]
 800adc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d1ea      	bne.n	800ada6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800add4:	f003 0304 	and.w	r3, r3, #4
 800add8:	2b00      	cmp	r3, #0
 800adda:	d004      	beq.n	800ade6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2204      	movs	r2, #4
 800ade0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ade2:	2304      	movs	r3, #4
 800ade4:	e0b1      	b.n	800af4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adea:	f003 0301 	and.w	r3, r3, #1
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d004      	beq.n	800adfc <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2201      	movs	r2, #1
 800adf6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800adf8:	2301      	movs	r3, #1
 800adfa:	e0a6      	b.n	800af4a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	22c5      	movs	r2, #197	; 0xc5
 800ae00:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ae02:	68f8      	ldr	r0, [r7, #12]
 800ae04:	f7ff fd54 	bl	800a8b0 <SDIO_GetCommandResponse>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	461a      	mov	r2, r3
 800ae0c:	7afb      	ldrb	r3, [r7, #11]
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d001      	beq.n	800ae16 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae12:	2301      	movs	r3, #1
 800ae14:	e099      	b.n	800af4a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ae16:	2100      	movs	r1, #0
 800ae18:	68f8      	ldr	r0, [r7, #12]
 800ae1a:	f7ff fd56 	bl	800a8ca <SDIO_GetResponse>
 800ae1e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ae20:	697a      	ldr	r2, [r7, #20]
 800ae22:	4b4e      	ldr	r3, [pc, #312]	; (800af5c <SDMMC_GetCmdResp1+0x1d8>)
 800ae24:	4013      	ands	r3, r2
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d101      	bne.n	800ae2e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	e08d      	b.n	800af4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	da02      	bge.n	800ae3a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ae34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ae38:	e087      	b.n	800af4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d001      	beq.n	800ae48 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ae44:	2340      	movs	r3, #64	; 0x40
 800ae46:	e080      	b.n	800af4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d001      	beq.n	800ae56 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ae52:	2380      	movs	r3, #128	; 0x80
 800ae54:	e079      	b.n	800af4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d002      	beq.n	800ae66 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ae60:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae64:	e071      	b.n	800af4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d002      	beq.n	800ae76 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ae70:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae74:	e069      	b.n	800af4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d002      	beq.n	800ae86 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ae80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae84:	e061      	b.n	800af4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d002      	beq.n	800ae96 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ae90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ae94:	e059      	b.n	800af4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d002      	beq.n	800aea6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800aea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aea4:	e051      	b.n	800af4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d002      	beq.n	800aeb6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800aeb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aeb4:	e049      	b.n	800af4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d002      	beq.n	800aec6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800aec0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aec4:	e041      	b.n	800af4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d002      	beq.n	800aed6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800aed0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aed4:	e039      	b.n	800af4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d002      	beq.n	800aee6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800aee0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800aee4:	e031      	b.n	800af4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d002      	beq.n	800aef6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800aef0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800aef4:	e029      	b.n	800af4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d002      	beq.n	800af06 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800af00:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800af04:	e021      	b.n	800af4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d002      	beq.n	800af16 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800af10:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800af14:	e019      	b.n	800af4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d002      	beq.n	800af26 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800af20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800af24:	e011      	b.n	800af4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d002      	beq.n	800af36 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800af30:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800af34:	e009      	b.n	800af4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	f003 0308 	and.w	r3, r3, #8
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d002      	beq.n	800af46 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800af40:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800af44:	e001      	b.n	800af4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800af46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3720      	adds	r7, #32
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}
 800af52:	bf00      	nop
 800af54:	20000004 	.word	0x20000004
 800af58:	10624dd3 	.word	0x10624dd3
 800af5c:	fdffe008 	.word	0xfdffe008

0800af60 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800af60:	b480      	push	{r7}
 800af62:	b085      	sub	sp, #20
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800af68:	4b1f      	ldr	r3, [pc, #124]	; (800afe8 <SDMMC_GetCmdResp2+0x88>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a1f      	ldr	r2, [pc, #124]	; (800afec <SDMMC_GetCmdResp2+0x8c>)
 800af6e:	fba2 2303 	umull	r2, r3, r2, r3
 800af72:	0a5b      	lsrs	r3, r3, #9
 800af74:	f241 3288 	movw	r2, #5000	; 0x1388
 800af78:	fb02 f303 	mul.w	r3, r2, r3
 800af7c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	1e5a      	subs	r2, r3, #1
 800af82:	60fa      	str	r2, [r7, #12]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d102      	bne.n	800af8e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af8c:	e026      	b.n	800afdc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af92:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d0ef      	beq.n	800af7e <SDMMC_GetCmdResp2+0x1e>
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d1ea      	bne.n	800af7e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afac:	f003 0304 	and.w	r3, r3, #4
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d004      	beq.n	800afbe <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2204      	movs	r2, #4
 800afb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800afba:	2304      	movs	r3, #4
 800afbc:	e00e      	b.n	800afdc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afc2:	f003 0301 	and.w	r3, r3, #1
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d004      	beq.n	800afd4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2201      	movs	r2, #1
 800afce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800afd0:	2301      	movs	r3, #1
 800afd2:	e003      	b.n	800afdc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	22c5      	movs	r2, #197	; 0xc5
 800afd8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800afda:	2300      	movs	r3, #0
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3714      	adds	r7, #20
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr
 800afe8:	20000004 	.word	0x20000004
 800afec:	10624dd3 	.word	0x10624dd3

0800aff0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b085      	sub	sp, #20
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aff8:	4b1a      	ldr	r3, [pc, #104]	; (800b064 <SDMMC_GetCmdResp3+0x74>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	4a1a      	ldr	r2, [pc, #104]	; (800b068 <SDMMC_GetCmdResp3+0x78>)
 800affe:	fba2 2303 	umull	r2, r3, r2, r3
 800b002:	0a5b      	lsrs	r3, r3, #9
 800b004:	f241 3288 	movw	r2, #5000	; 0x1388
 800b008:	fb02 f303 	mul.w	r3, r2, r3
 800b00c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	1e5a      	subs	r2, r3, #1
 800b012:	60fa      	str	r2, [r7, #12]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d102      	bne.n	800b01e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b018:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b01c:	e01b      	b.n	800b056 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b022:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d0ef      	beq.n	800b00e <SDMMC_GetCmdResp3+0x1e>
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b034:	2b00      	cmp	r3, #0
 800b036:	d1ea      	bne.n	800b00e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b03c:	f003 0304 	and.w	r3, r3, #4
 800b040:	2b00      	cmp	r3, #0
 800b042:	d004      	beq.n	800b04e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2204      	movs	r2, #4
 800b048:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b04a:	2304      	movs	r3, #4
 800b04c:	e003      	b.n	800b056 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	22c5      	movs	r2, #197	; 0xc5
 800b052:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b054:	2300      	movs	r3, #0
}
 800b056:	4618      	mov	r0, r3
 800b058:	3714      	adds	r7, #20
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr
 800b062:	bf00      	nop
 800b064:	20000004 	.word	0x20000004
 800b068:	10624dd3 	.word	0x10624dd3

0800b06c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b088      	sub	sp, #32
 800b070:	af00      	add	r7, sp, #0
 800b072:	60f8      	str	r0, [r7, #12]
 800b074:	460b      	mov	r3, r1
 800b076:	607a      	str	r2, [r7, #4]
 800b078:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b07a:	4b35      	ldr	r3, [pc, #212]	; (800b150 <SDMMC_GetCmdResp6+0xe4>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4a35      	ldr	r2, [pc, #212]	; (800b154 <SDMMC_GetCmdResp6+0xe8>)
 800b080:	fba2 2303 	umull	r2, r3, r2, r3
 800b084:	0a5b      	lsrs	r3, r3, #9
 800b086:	f241 3288 	movw	r2, #5000	; 0x1388
 800b08a:	fb02 f303 	mul.w	r3, r2, r3
 800b08e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b090:	69fb      	ldr	r3, [r7, #28]
 800b092:	1e5a      	subs	r2, r3, #1
 800b094:	61fa      	str	r2, [r7, #28]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d102      	bne.n	800b0a0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b09a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b09e:	e052      	b.n	800b146 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0a4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b0a6:	69bb      	ldr	r3, [r7, #24]
 800b0a8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d0ef      	beq.n	800b090 <SDMMC_GetCmdResp6+0x24>
 800b0b0:	69bb      	ldr	r3, [r7, #24]
 800b0b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d1ea      	bne.n	800b090 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0be:	f003 0304 	and.w	r3, r3, #4
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d004      	beq.n	800b0d0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2204      	movs	r2, #4
 800b0ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b0cc:	2304      	movs	r3, #4
 800b0ce:	e03a      	b.n	800b146 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0d4:	f003 0301 	and.w	r3, r3, #1
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d004      	beq.n	800b0e6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	2201      	movs	r2, #1
 800b0e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	e02f      	b.n	800b146 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b0e6:	68f8      	ldr	r0, [r7, #12]
 800b0e8:	f7ff fbe2 	bl	800a8b0 <SDIO_GetCommandResponse>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	7afb      	ldrb	r3, [r7, #11]
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d001      	beq.n	800b0fa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e025      	b.n	800b146 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	22c5      	movs	r2, #197	; 0xc5
 800b0fe:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b100:	2100      	movs	r1, #0
 800b102:	68f8      	ldr	r0, [r7, #12]
 800b104:	f7ff fbe1 	bl	800a8ca <SDIO_GetResponse>
 800b108:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b110:	2b00      	cmp	r3, #0
 800b112:	d106      	bne.n	800b122 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	0c1b      	lsrs	r3, r3, #16
 800b118:	b29a      	uxth	r2, r3
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b11e:	2300      	movs	r3, #0
 800b120:	e011      	b.n	800b146 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d002      	beq.n	800b132 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b12c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b130:	e009      	b.n	800b146 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d002      	beq.n	800b142 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b13c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b140:	e001      	b.n	800b146 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b142:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b146:	4618      	mov	r0, r3
 800b148:	3720      	adds	r7, #32
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	20000004 	.word	0x20000004
 800b154:	10624dd3 	.word	0x10624dd3

0800b158 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b158:	b480      	push	{r7}
 800b15a:	b085      	sub	sp, #20
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b160:	4b22      	ldr	r3, [pc, #136]	; (800b1ec <SDMMC_GetCmdResp7+0x94>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	4a22      	ldr	r2, [pc, #136]	; (800b1f0 <SDMMC_GetCmdResp7+0x98>)
 800b166:	fba2 2303 	umull	r2, r3, r2, r3
 800b16a:	0a5b      	lsrs	r3, r3, #9
 800b16c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b170:	fb02 f303 	mul.w	r3, r2, r3
 800b174:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	1e5a      	subs	r2, r3, #1
 800b17a:	60fa      	str	r2, [r7, #12]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d102      	bne.n	800b186 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b180:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b184:	e02c      	b.n	800b1e0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b18a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b192:	2b00      	cmp	r3, #0
 800b194:	d0ef      	beq.n	800b176 <SDMMC_GetCmdResp7+0x1e>
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d1ea      	bne.n	800b176 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1a4:	f003 0304 	and.w	r3, r3, #4
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d004      	beq.n	800b1b6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2204      	movs	r2, #4
 800b1b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b1b2:	2304      	movs	r3, #4
 800b1b4:	e014      	b.n	800b1e0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1ba:	f003 0301 	and.w	r3, r3, #1
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d004      	beq.n	800b1cc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	e009      	b.n	800b1e0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d002      	beq.n	800b1de <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2240      	movs	r2, #64	; 0x40
 800b1dc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b1de:	2300      	movs	r3, #0
  
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3714      	adds	r7, #20
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr
 800b1ec:	20000004 	.word	0x20000004
 800b1f0:	10624dd3 	.word	0x10624dd3

0800b1f4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b1f8:	4904      	ldr	r1, [pc, #16]	; (800b20c <MX_FATFS_Init+0x18>)
 800b1fa:	4805      	ldr	r0, [pc, #20]	; (800b210 <MX_FATFS_Init+0x1c>)
 800b1fc:	f002 fff0 	bl	800e1e0 <FATFS_LinkDriver>
 800b200:	4603      	mov	r3, r0
 800b202:	461a      	mov	r2, r3
 800b204:	4b03      	ldr	r3, [pc, #12]	; (800b214 <MX_FATFS_Init+0x20>)
 800b206:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b208:	bf00      	nop
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	200029b8 	.word	0x200029b8
 800b210:	08015dcc 	.word	0x08015dcc
 800b214:	200029b4 	.word	0x200029b4

0800b218 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b218:	b480      	push	{r7}
 800b21a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b21c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b21e:	4618      	mov	r0, r3
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr

0800b228 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b082      	sub	sp, #8
 800b22c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b22e:	2300      	movs	r3, #0
 800b230:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b232:	f000 f86b 	bl	800b30c <BSP_SD_IsDetected>
 800b236:	4603      	mov	r3, r0
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d001      	beq.n	800b240 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800b23c:	2301      	movs	r3, #1
 800b23e:	e005      	b.n	800b24c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800b240:	4804      	ldr	r0, [pc, #16]	; (800b254 <BSP_SD_Init+0x2c>)
 800b242:	f7fd fa63 	bl	800870c <HAL_SD_Init>
 800b246:	4603      	mov	r3, r0
 800b248:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800b24a:	79fb      	ldrb	r3, [r7, #7]
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3708      	adds	r7, #8
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}
 800b254:	200028d4 	.word	0x200028d4

0800b258 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b088      	sub	sp, #32
 800b25c:	af02      	add	r7, sp, #8
 800b25e:	60f8      	str	r0, [r7, #12]
 800b260:	60b9      	str	r1, [r7, #8]
 800b262:	607a      	str	r2, [r7, #4]
 800b264:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b266:	2300      	movs	r3, #0
 800b268:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	9300      	str	r3, [sp, #0]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	68ba      	ldr	r2, [r7, #8]
 800b272:	68f9      	ldr	r1, [r7, #12]
 800b274:	4806      	ldr	r0, [pc, #24]	; (800b290 <BSP_SD_ReadBlocks+0x38>)
 800b276:	f7fd faf7 	bl	8008868 <HAL_SD_ReadBlocks>
 800b27a:	4603      	mov	r3, r0
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d001      	beq.n	800b284 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b280:	2301      	movs	r3, #1
 800b282:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b284:	7dfb      	ldrb	r3, [r7, #23]
}
 800b286:	4618      	mov	r0, r3
 800b288:	3718      	adds	r7, #24
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}
 800b28e:	bf00      	nop
 800b290:	200028d4 	.word	0x200028d4

0800b294 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b088      	sub	sp, #32
 800b298:	af02      	add	r7, sp, #8
 800b29a:	60f8      	str	r0, [r7, #12]
 800b29c:	60b9      	str	r1, [r7, #8]
 800b29e:	607a      	str	r2, [r7, #4]
 800b2a0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	9300      	str	r3, [sp, #0]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	68ba      	ldr	r2, [r7, #8]
 800b2ae:	68f9      	ldr	r1, [r7, #12]
 800b2b0:	4806      	ldr	r0, [pc, #24]	; (800b2cc <BSP_SD_WriteBlocks+0x38>)
 800b2b2:	f7fd fcb7 	bl	8008c24 <HAL_SD_WriteBlocks>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d001      	beq.n	800b2c0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b2c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3718      	adds	r7, #24
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}
 800b2ca:	bf00      	nop
 800b2cc:	200028d4 	.word	0x200028d4

0800b2d0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b2d4:	4805      	ldr	r0, [pc, #20]	; (800b2ec <BSP_SD_GetCardState+0x1c>)
 800b2d6:	f7fd fffb 	bl	80092d0 <HAL_SD_GetCardState>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	2b04      	cmp	r3, #4
 800b2de:	bf14      	ite	ne
 800b2e0:	2301      	movne	r3, #1
 800b2e2:	2300      	moveq	r3, #0
 800b2e4:	b2db      	uxtb	r3, r3
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	200028d4 	.word	0x200028d4

0800b2f0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800b2f8:	6879      	ldr	r1, [r7, #4]
 800b2fa:	4803      	ldr	r0, [pc, #12]	; (800b308 <BSP_SD_GetCardInfo+0x18>)
 800b2fc:	f7fd ffbc 	bl	8009278 <HAL_SD_GetCardInfo>
}
 800b300:	bf00      	nop
 800b302:	3708      	adds	r7, #8
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}
 800b308:	200028d4 	.word	0x200028d4

0800b30c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b083      	sub	sp, #12
 800b310:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b312:	2301      	movs	r3, #1
 800b314:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800b316:	79fb      	ldrb	r3, [r7, #7]
 800b318:	b2db      	uxtb	r3, r3
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	370c      	adds	r7, #12
 800b31e:	46bd      	mov	sp, r7
 800b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b324:	4770      	bx	lr
	...

0800b328 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	4603      	mov	r3, r0
 800b330:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b332:	4b0b      	ldr	r3, [pc, #44]	; (800b360 <SD_CheckStatus+0x38>)
 800b334:	2201      	movs	r2, #1
 800b336:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b338:	f7ff ffca 	bl	800b2d0 <BSP_SD_GetCardState>
 800b33c:	4603      	mov	r3, r0
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d107      	bne.n	800b352 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b342:	4b07      	ldr	r3, [pc, #28]	; (800b360 <SD_CheckStatus+0x38>)
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	b2db      	uxtb	r3, r3
 800b348:	f023 0301 	bic.w	r3, r3, #1
 800b34c:	b2da      	uxtb	r2, r3
 800b34e:	4b04      	ldr	r3, [pc, #16]	; (800b360 <SD_CheckStatus+0x38>)
 800b350:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b352:	4b03      	ldr	r3, [pc, #12]	; (800b360 <SD_CheckStatus+0x38>)
 800b354:	781b      	ldrb	r3, [r3, #0]
 800b356:	b2db      	uxtb	r3, r3
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3708      	adds	r7, #8
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}
 800b360:	20000055 	.word	0x20000055

0800b364 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b082      	sub	sp, #8
 800b368:	af00      	add	r7, sp, #0
 800b36a:	4603      	mov	r3, r0
 800b36c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b36e:	4b0b      	ldr	r3, [pc, #44]	; (800b39c <SD_initialize+0x38>)
 800b370:	2201      	movs	r2, #1
 800b372:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b374:	f7ff ff58 	bl	800b228 <BSP_SD_Init>
 800b378:	4603      	mov	r3, r0
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d107      	bne.n	800b38e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800b37e:	79fb      	ldrb	r3, [r7, #7]
 800b380:	4618      	mov	r0, r3
 800b382:	f7ff ffd1 	bl	800b328 <SD_CheckStatus>
 800b386:	4603      	mov	r3, r0
 800b388:	461a      	mov	r2, r3
 800b38a:	4b04      	ldr	r3, [pc, #16]	; (800b39c <SD_initialize+0x38>)
 800b38c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b38e:	4b03      	ldr	r3, [pc, #12]	; (800b39c <SD_initialize+0x38>)
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	b2db      	uxtb	r3, r3
}
 800b394:	4618      	mov	r0, r3
 800b396:	3708      	adds	r7, #8
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}
 800b39c:	20000055 	.word	0x20000055

0800b3a0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b3aa:	79fb      	ldrb	r3, [r7, #7]
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f7ff ffbb 	bl	800b328 <SD_CheckStatus>
 800b3b2:	4603      	mov	r3, r0
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3708      	adds	r7, #8
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b086      	sub	sp, #24
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60b9      	str	r1, [r7, #8]
 800b3c4:	607a      	str	r2, [r7, #4]
 800b3c6:	603b      	str	r3, [r7, #0]
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800b3d0:	f04f 33ff 	mov.w	r3, #4294967295
 800b3d4:	683a      	ldr	r2, [r7, #0]
 800b3d6:	6879      	ldr	r1, [r7, #4]
 800b3d8:	68b8      	ldr	r0, [r7, #8]
 800b3da:	f7ff ff3d 	bl	800b258 <BSP_SD_ReadBlocks>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d107      	bne.n	800b3f4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b3e4:	bf00      	nop
 800b3e6:	f7ff ff73 	bl	800b2d0 <BSP_SD_GetCardState>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d1fa      	bne.n	800b3e6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b3f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3718      	adds	r7, #24
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}

0800b3fe <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b3fe:	b580      	push	{r7, lr}
 800b400:	b086      	sub	sp, #24
 800b402:	af00      	add	r7, sp, #0
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	607a      	str	r2, [r7, #4]
 800b408:	603b      	str	r3, [r7, #0]
 800b40a:	4603      	mov	r3, r0
 800b40c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b40e:	2301      	movs	r3, #1
 800b410:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800b412:	f04f 33ff 	mov.w	r3, #4294967295
 800b416:	683a      	ldr	r2, [r7, #0]
 800b418:	6879      	ldr	r1, [r7, #4]
 800b41a:	68b8      	ldr	r0, [r7, #8]
 800b41c:	f7ff ff3a 	bl	800b294 <BSP_SD_WriteBlocks>
 800b420:	4603      	mov	r3, r0
 800b422:	2b00      	cmp	r3, #0
 800b424:	d107      	bne.n	800b436 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800b426:	bf00      	nop
 800b428:	f7ff ff52 	bl	800b2d0 <BSP_SD_GetCardState>
 800b42c:	4603      	mov	r3, r0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d1fa      	bne.n	800b428 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800b432:	2300      	movs	r3, #0
 800b434:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b436:	7dfb      	ldrb	r3, [r7, #23]
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3718      	adds	r7, #24
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b08c      	sub	sp, #48	; 0x30
 800b444:	af00      	add	r7, sp, #0
 800b446:	4603      	mov	r3, r0
 800b448:	603a      	str	r2, [r7, #0]
 800b44a:	71fb      	strb	r3, [r7, #7]
 800b44c:	460b      	mov	r3, r1
 800b44e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b450:	2301      	movs	r3, #1
 800b452:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b456:	4b25      	ldr	r3, [pc, #148]	; (800b4ec <SD_ioctl+0xac>)
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	b2db      	uxtb	r3, r3
 800b45c:	f003 0301 	and.w	r3, r3, #1
 800b460:	2b00      	cmp	r3, #0
 800b462:	d001      	beq.n	800b468 <SD_ioctl+0x28>
 800b464:	2303      	movs	r3, #3
 800b466:	e03c      	b.n	800b4e2 <SD_ioctl+0xa2>

  switch (cmd)
 800b468:	79bb      	ldrb	r3, [r7, #6]
 800b46a:	2b03      	cmp	r3, #3
 800b46c:	d834      	bhi.n	800b4d8 <SD_ioctl+0x98>
 800b46e:	a201      	add	r2, pc, #4	; (adr r2, 800b474 <SD_ioctl+0x34>)
 800b470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b474:	0800b485 	.word	0x0800b485
 800b478:	0800b48d 	.word	0x0800b48d
 800b47c:	0800b4a5 	.word	0x0800b4a5
 800b480:	0800b4bf 	.word	0x0800b4bf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b484:	2300      	movs	r3, #0
 800b486:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b48a:	e028      	b.n	800b4de <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b48c:	f107 030c 	add.w	r3, r7, #12
 800b490:	4618      	mov	r0, r3
 800b492:	f7ff ff2d 	bl	800b2f0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b49c:	2300      	movs	r3, #0
 800b49e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b4a2:	e01c      	b.n	800b4de <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b4a4:	f107 030c 	add.w	r3, r7, #12
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f7ff ff21 	bl	800b2f0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4b0:	b29a      	uxth	r2, r3
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b4bc:	e00f      	b.n	800b4de <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b4be:	f107 030c 	add.w	r3, r7, #12
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f7ff ff14 	bl	800b2f0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ca:	0a5a      	lsrs	r2, r3, #9
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b4d6:	e002      	b.n	800b4de <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b4d8:	2304      	movs	r3, #4
 800b4da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b4de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3730      	adds	r7, #48	; 0x30
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	20000055 	.word	0x20000055

0800b4f0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b4fa:	79fb      	ldrb	r3, [r7, #7]
 800b4fc:	4a08      	ldr	r2, [pc, #32]	; (800b520 <disk_status+0x30>)
 800b4fe:	009b      	lsls	r3, r3, #2
 800b500:	4413      	add	r3, r2
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	79fa      	ldrb	r2, [r7, #7]
 800b508:	4905      	ldr	r1, [pc, #20]	; (800b520 <disk_status+0x30>)
 800b50a:	440a      	add	r2, r1
 800b50c:	7a12      	ldrb	r2, [r2, #8]
 800b50e:	4610      	mov	r0, r2
 800b510:	4798      	blx	r3
 800b512:	4603      	mov	r3, r0
 800b514:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b516:	7bfb      	ldrb	r3, [r7, #15]
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3710      	adds	r7, #16
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}
 800b520:	20002340 	.word	0x20002340

0800b524 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b084      	sub	sp, #16
 800b528:	af00      	add	r7, sp, #0
 800b52a:	4603      	mov	r3, r0
 800b52c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b52e:	2300      	movs	r3, #0
 800b530:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b532:	79fb      	ldrb	r3, [r7, #7]
 800b534:	4a0d      	ldr	r2, [pc, #52]	; (800b56c <disk_initialize+0x48>)
 800b536:	5cd3      	ldrb	r3, [r2, r3]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d111      	bne.n	800b560 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b53c:	79fb      	ldrb	r3, [r7, #7]
 800b53e:	4a0b      	ldr	r2, [pc, #44]	; (800b56c <disk_initialize+0x48>)
 800b540:	2101      	movs	r1, #1
 800b542:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b544:	79fb      	ldrb	r3, [r7, #7]
 800b546:	4a09      	ldr	r2, [pc, #36]	; (800b56c <disk_initialize+0x48>)
 800b548:	009b      	lsls	r3, r3, #2
 800b54a:	4413      	add	r3, r2
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	79fa      	ldrb	r2, [r7, #7]
 800b552:	4906      	ldr	r1, [pc, #24]	; (800b56c <disk_initialize+0x48>)
 800b554:	440a      	add	r2, r1
 800b556:	7a12      	ldrb	r2, [r2, #8]
 800b558:	4610      	mov	r0, r2
 800b55a:	4798      	blx	r3
 800b55c:	4603      	mov	r3, r0
 800b55e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b560:	7bfb      	ldrb	r3, [r7, #15]
}
 800b562:	4618      	mov	r0, r3
 800b564:	3710      	adds	r7, #16
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	20002340 	.word	0x20002340

0800b570 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b570:	b590      	push	{r4, r7, lr}
 800b572:	b087      	sub	sp, #28
 800b574:	af00      	add	r7, sp, #0
 800b576:	60b9      	str	r1, [r7, #8]
 800b578:	607a      	str	r2, [r7, #4]
 800b57a:	603b      	str	r3, [r7, #0]
 800b57c:	4603      	mov	r3, r0
 800b57e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b580:	7bfb      	ldrb	r3, [r7, #15]
 800b582:	4a0a      	ldr	r2, [pc, #40]	; (800b5ac <disk_read+0x3c>)
 800b584:	009b      	lsls	r3, r3, #2
 800b586:	4413      	add	r3, r2
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	689c      	ldr	r4, [r3, #8]
 800b58c:	7bfb      	ldrb	r3, [r7, #15]
 800b58e:	4a07      	ldr	r2, [pc, #28]	; (800b5ac <disk_read+0x3c>)
 800b590:	4413      	add	r3, r2
 800b592:	7a18      	ldrb	r0, [r3, #8]
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	68b9      	ldr	r1, [r7, #8]
 800b59a:	47a0      	blx	r4
 800b59c:	4603      	mov	r3, r0
 800b59e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b5a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	371c      	adds	r7, #28
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd90      	pop	{r4, r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	20002340 	.word	0x20002340

0800b5b0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b5b0:	b590      	push	{r4, r7, lr}
 800b5b2:	b087      	sub	sp, #28
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	60b9      	str	r1, [r7, #8]
 800b5b8:	607a      	str	r2, [r7, #4]
 800b5ba:	603b      	str	r3, [r7, #0]
 800b5bc:	4603      	mov	r3, r0
 800b5be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b5c0:	7bfb      	ldrb	r3, [r7, #15]
 800b5c2:	4a0a      	ldr	r2, [pc, #40]	; (800b5ec <disk_write+0x3c>)
 800b5c4:	009b      	lsls	r3, r3, #2
 800b5c6:	4413      	add	r3, r2
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	68dc      	ldr	r4, [r3, #12]
 800b5cc:	7bfb      	ldrb	r3, [r7, #15]
 800b5ce:	4a07      	ldr	r2, [pc, #28]	; (800b5ec <disk_write+0x3c>)
 800b5d0:	4413      	add	r3, r2
 800b5d2:	7a18      	ldrb	r0, [r3, #8]
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	687a      	ldr	r2, [r7, #4]
 800b5d8:	68b9      	ldr	r1, [r7, #8]
 800b5da:	47a0      	blx	r4
 800b5dc:	4603      	mov	r3, r0
 800b5de:	75fb      	strb	r3, [r7, #23]
  return res;
 800b5e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	371c      	adds	r7, #28
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd90      	pop	{r4, r7, pc}
 800b5ea:	bf00      	nop
 800b5ec:	20002340 	.word	0x20002340

0800b5f0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b084      	sub	sp, #16
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	603a      	str	r2, [r7, #0]
 800b5fa:	71fb      	strb	r3, [r7, #7]
 800b5fc:	460b      	mov	r3, r1
 800b5fe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b600:	79fb      	ldrb	r3, [r7, #7]
 800b602:	4a09      	ldr	r2, [pc, #36]	; (800b628 <disk_ioctl+0x38>)
 800b604:	009b      	lsls	r3, r3, #2
 800b606:	4413      	add	r3, r2
 800b608:	685b      	ldr	r3, [r3, #4]
 800b60a:	691b      	ldr	r3, [r3, #16]
 800b60c:	79fa      	ldrb	r2, [r7, #7]
 800b60e:	4906      	ldr	r1, [pc, #24]	; (800b628 <disk_ioctl+0x38>)
 800b610:	440a      	add	r2, r1
 800b612:	7a10      	ldrb	r0, [r2, #8]
 800b614:	79b9      	ldrb	r1, [r7, #6]
 800b616:	683a      	ldr	r2, [r7, #0]
 800b618:	4798      	blx	r3
 800b61a:	4603      	mov	r3, r0
 800b61c:	73fb      	strb	r3, [r7, #15]
  return res;
 800b61e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b620:	4618      	mov	r0, r3
 800b622:	3710      	adds	r7, #16
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}
 800b628:	20002340 	.word	0x20002340

0800b62c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b62c:	b480      	push	{r7}
 800b62e:	b085      	sub	sp, #20
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	3301      	adds	r3, #1
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b63c:	89fb      	ldrh	r3, [r7, #14]
 800b63e:	021b      	lsls	r3, r3, #8
 800b640:	b21a      	sxth	r2, r3
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	b21b      	sxth	r3, r3
 800b648:	4313      	orrs	r3, r2
 800b64a:	b21b      	sxth	r3, r3
 800b64c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b64e:	89fb      	ldrh	r3, [r7, #14]
}
 800b650:	4618      	mov	r0, r3
 800b652:	3714      	adds	r7, #20
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr

0800b65c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b65c:	b480      	push	{r7}
 800b65e:	b085      	sub	sp, #20
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	3303      	adds	r3, #3
 800b668:	781b      	ldrb	r3, [r3, #0]
 800b66a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	021b      	lsls	r3, r3, #8
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	3202      	adds	r2, #2
 800b674:	7812      	ldrb	r2, [r2, #0]
 800b676:	4313      	orrs	r3, r2
 800b678:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	021b      	lsls	r3, r3, #8
 800b67e:	687a      	ldr	r2, [r7, #4]
 800b680:	3201      	adds	r2, #1
 800b682:	7812      	ldrb	r2, [r2, #0]
 800b684:	4313      	orrs	r3, r2
 800b686:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	021b      	lsls	r3, r3, #8
 800b68c:	687a      	ldr	r2, [r7, #4]
 800b68e:	7812      	ldrb	r2, [r2, #0]
 800b690:	4313      	orrs	r3, r2
 800b692:	60fb      	str	r3, [r7, #12]
	return rv;
 800b694:	68fb      	ldr	r3, [r7, #12]
}
 800b696:	4618      	mov	r0, r3
 800b698:	3714      	adds	r7, #20
 800b69a:	46bd      	mov	sp, r7
 800b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a0:	4770      	bx	lr

0800b6a2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b6a2:	b480      	push	{r7}
 800b6a4:	b083      	sub	sp, #12
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	6078      	str	r0, [r7, #4]
 800b6aa:	460b      	mov	r3, r1
 800b6ac:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	1c5a      	adds	r2, r3, #1
 800b6b2:	607a      	str	r2, [r7, #4]
 800b6b4:	887a      	ldrh	r2, [r7, #2]
 800b6b6:	b2d2      	uxtb	r2, r2
 800b6b8:	701a      	strb	r2, [r3, #0]
 800b6ba:	887b      	ldrh	r3, [r7, #2]
 800b6bc:	0a1b      	lsrs	r3, r3, #8
 800b6be:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	1c5a      	adds	r2, r3, #1
 800b6c4:	607a      	str	r2, [r7, #4]
 800b6c6:	887a      	ldrh	r2, [r7, #2]
 800b6c8:	b2d2      	uxtb	r2, r2
 800b6ca:	701a      	strb	r2, [r3, #0]
}
 800b6cc:	bf00      	nop
 800b6ce:	370c      	adds	r7, #12
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b083      	sub	sp, #12
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	1c5a      	adds	r2, r3, #1
 800b6e6:	607a      	str	r2, [r7, #4]
 800b6e8:	683a      	ldr	r2, [r7, #0]
 800b6ea:	b2d2      	uxtb	r2, r2
 800b6ec:	701a      	strb	r2, [r3, #0]
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	0a1b      	lsrs	r3, r3, #8
 800b6f2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	1c5a      	adds	r2, r3, #1
 800b6f8:	607a      	str	r2, [r7, #4]
 800b6fa:	683a      	ldr	r2, [r7, #0]
 800b6fc:	b2d2      	uxtb	r2, r2
 800b6fe:	701a      	strb	r2, [r3, #0]
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	0a1b      	lsrs	r3, r3, #8
 800b704:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	1c5a      	adds	r2, r3, #1
 800b70a:	607a      	str	r2, [r7, #4]
 800b70c:	683a      	ldr	r2, [r7, #0]
 800b70e:	b2d2      	uxtb	r2, r2
 800b710:	701a      	strb	r2, [r3, #0]
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	0a1b      	lsrs	r3, r3, #8
 800b716:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	1c5a      	adds	r2, r3, #1
 800b71c:	607a      	str	r2, [r7, #4]
 800b71e:	683a      	ldr	r2, [r7, #0]
 800b720:	b2d2      	uxtb	r2, r2
 800b722:	701a      	strb	r2, [r3, #0]
}
 800b724:	bf00      	nop
 800b726:	370c      	adds	r7, #12
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr

0800b730 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b730:	b480      	push	{r7}
 800b732:	b087      	sub	sp, #28
 800b734:	af00      	add	r7, sp, #0
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	60b9      	str	r1, [r7, #8]
 800b73a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d00d      	beq.n	800b766 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b74a:	693a      	ldr	r2, [r7, #16]
 800b74c:	1c53      	adds	r3, r2, #1
 800b74e:	613b      	str	r3, [r7, #16]
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	1c59      	adds	r1, r3, #1
 800b754:	6179      	str	r1, [r7, #20]
 800b756:	7812      	ldrb	r2, [r2, #0]
 800b758:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	3b01      	subs	r3, #1
 800b75e:	607b      	str	r3, [r7, #4]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d1f1      	bne.n	800b74a <mem_cpy+0x1a>
	}
}
 800b766:	bf00      	nop
 800b768:	371c      	adds	r7, #28
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr

0800b772 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b772:	b480      	push	{r7}
 800b774:	b087      	sub	sp, #28
 800b776:	af00      	add	r7, sp, #0
 800b778:	60f8      	str	r0, [r7, #12]
 800b77a:	60b9      	str	r1, [r7, #8]
 800b77c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	1c5a      	adds	r2, r3, #1
 800b786:	617a      	str	r2, [r7, #20]
 800b788:	68ba      	ldr	r2, [r7, #8]
 800b78a:	b2d2      	uxtb	r2, r2
 800b78c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	3b01      	subs	r3, #1
 800b792:	607b      	str	r3, [r7, #4]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d1f3      	bne.n	800b782 <mem_set+0x10>
}
 800b79a:	bf00      	nop
 800b79c:	bf00      	nop
 800b79e:	371c      	adds	r7, #28
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr

0800b7a8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b7a8:	b480      	push	{r7}
 800b7aa:	b089      	sub	sp, #36	; 0x24
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	60b9      	str	r1, [r7, #8]
 800b7b2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	61fb      	str	r3, [r7, #28]
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b7c0:	69fb      	ldr	r3, [r7, #28]
 800b7c2:	1c5a      	adds	r2, r3, #1
 800b7c4:	61fa      	str	r2, [r7, #28]
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	69bb      	ldr	r3, [r7, #24]
 800b7cc:	1c5a      	adds	r2, r3, #1
 800b7ce:	61ba      	str	r2, [r7, #24]
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	1acb      	subs	r3, r1, r3
 800b7d4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	3b01      	subs	r3, #1
 800b7da:	607b      	str	r3, [r7, #4]
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d002      	beq.n	800b7e8 <mem_cmp+0x40>
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d0eb      	beq.n	800b7c0 <mem_cmp+0x18>

	return r;
 800b7e8:	697b      	ldr	r3, [r7, #20]
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3724      	adds	r7, #36	; 0x24
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f4:	4770      	bx	lr

0800b7f6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b7f6:	b480      	push	{r7}
 800b7f8:	b083      	sub	sp, #12
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	6078      	str	r0, [r7, #4]
 800b7fe:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b800:	e002      	b.n	800b808 <chk_chr+0x12>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	3301      	adds	r3, #1
 800b806:	607b      	str	r3, [r7, #4]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	781b      	ldrb	r3, [r3, #0]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d005      	beq.n	800b81c <chk_chr+0x26>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	781b      	ldrb	r3, [r3, #0]
 800b814:	461a      	mov	r2, r3
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	4293      	cmp	r3, r2
 800b81a:	d1f2      	bne.n	800b802 <chk_chr+0xc>
	return *str;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	781b      	ldrb	r3, [r3, #0]
}
 800b820:	4618      	mov	r0, r3
 800b822:	370c      	adds	r7, #12
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr

0800b82c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b085      	sub	sp, #20
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b836:	2300      	movs	r3, #0
 800b838:	60bb      	str	r3, [r7, #8]
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	60fb      	str	r3, [r7, #12]
 800b83e:	e029      	b.n	800b894 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b840:	4a27      	ldr	r2, [pc, #156]	; (800b8e0 <chk_lock+0xb4>)
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	011b      	lsls	r3, r3, #4
 800b846:	4413      	add	r3, r2
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d01d      	beq.n	800b88a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b84e:	4a24      	ldr	r2, [pc, #144]	; (800b8e0 <chk_lock+0xb4>)
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	011b      	lsls	r3, r3, #4
 800b854:	4413      	add	r3, r2
 800b856:	681a      	ldr	r2, [r3, #0]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d116      	bne.n	800b88e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b860:	4a1f      	ldr	r2, [pc, #124]	; (800b8e0 <chk_lock+0xb4>)
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	011b      	lsls	r3, r3, #4
 800b866:	4413      	add	r3, r2
 800b868:	3304      	adds	r3, #4
 800b86a:	681a      	ldr	r2, [r3, #0]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b870:	429a      	cmp	r2, r3
 800b872:	d10c      	bne.n	800b88e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b874:	4a1a      	ldr	r2, [pc, #104]	; (800b8e0 <chk_lock+0xb4>)
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	011b      	lsls	r3, r3, #4
 800b87a:	4413      	add	r3, r2
 800b87c:	3308      	adds	r3, #8
 800b87e:	681a      	ldr	r2, [r3, #0]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b884:	429a      	cmp	r2, r3
 800b886:	d102      	bne.n	800b88e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b888:	e007      	b.n	800b89a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b88a:	2301      	movs	r3, #1
 800b88c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	3301      	adds	r3, #1
 800b892:	60fb      	str	r3, [r7, #12]
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2b01      	cmp	r3, #1
 800b898:	d9d2      	bls.n	800b840 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2b02      	cmp	r3, #2
 800b89e:	d109      	bne.n	800b8b4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d102      	bne.n	800b8ac <chk_lock+0x80>
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	2b02      	cmp	r3, #2
 800b8aa:	d101      	bne.n	800b8b0 <chk_lock+0x84>
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	e010      	b.n	800b8d2 <chk_lock+0xa6>
 800b8b0:	2312      	movs	r3, #18
 800b8b2:	e00e      	b.n	800b8d2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d108      	bne.n	800b8cc <chk_lock+0xa0>
 800b8ba:	4a09      	ldr	r2, [pc, #36]	; (800b8e0 <chk_lock+0xb4>)
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	011b      	lsls	r3, r3, #4
 800b8c0:	4413      	add	r3, r2
 800b8c2:	330c      	adds	r3, #12
 800b8c4:	881b      	ldrh	r3, [r3, #0]
 800b8c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8ca:	d101      	bne.n	800b8d0 <chk_lock+0xa4>
 800b8cc:	2310      	movs	r3, #16
 800b8ce:	e000      	b.n	800b8d2 <chk_lock+0xa6>
 800b8d0:	2300      	movs	r3, #0
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3714      	adds	r7, #20
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8dc:	4770      	bx	lr
 800b8de:	bf00      	nop
 800b8e0:	200022dc 	.word	0x200022dc

0800b8e4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b083      	sub	sp, #12
 800b8e8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	607b      	str	r3, [r7, #4]
 800b8ee:	e002      	b.n	800b8f6 <enq_lock+0x12>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	607b      	str	r3, [r7, #4]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d806      	bhi.n	800b90a <enq_lock+0x26>
 800b8fc:	4a09      	ldr	r2, [pc, #36]	; (800b924 <enq_lock+0x40>)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	011b      	lsls	r3, r3, #4
 800b902:	4413      	add	r3, r2
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d1f2      	bne.n	800b8f0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2b02      	cmp	r3, #2
 800b90e:	bf14      	ite	ne
 800b910:	2301      	movne	r3, #1
 800b912:	2300      	moveq	r3, #0
 800b914:	b2db      	uxtb	r3, r3
}
 800b916:	4618      	mov	r0, r3
 800b918:	370c      	adds	r7, #12
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr
 800b922:	bf00      	nop
 800b924:	200022dc 	.word	0x200022dc

0800b928 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b928:	b480      	push	{r7}
 800b92a:	b085      	sub	sp, #20
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b932:	2300      	movs	r3, #0
 800b934:	60fb      	str	r3, [r7, #12]
 800b936:	e01f      	b.n	800b978 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b938:	4a41      	ldr	r2, [pc, #260]	; (800ba40 <inc_lock+0x118>)
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	011b      	lsls	r3, r3, #4
 800b93e:	4413      	add	r3, r2
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	429a      	cmp	r2, r3
 800b948:	d113      	bne.n	800b972 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b94a:	4a3d      	ldr	r2, [pc, #244]	; (800ba40 <inc_lock+0x118>)
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	011b      	lsls	r3, r3, #4
 800b950:	4413      	add	r3, r2
 800b952:	3304      	adds	r3, #4
 800b954:	681a      	ldr	r2, [r3, #0]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d109      	bne.n	800b972 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b95e:	4a38      	ldr	r2, [pc, #224]	; (800ba40 <inc_lock+0x118>)
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	011b      	lsls	r3, r3, #4
 800b964:	4413      	add	r3, r2
 800b966:	3308      	adds	r3, #8
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b96e:	429a      	cmp	r2, r3
 800b970:	d006      	beq.n	800b980 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	3301      	adds	r3, #1
 800b976:	60fb      	str	r3, [r7, #12]
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2b01      	cmp	r3, #1
 800b97c:	d9dc      	bls.n	800b938 <inc_lock+0x10>
 800b97e:	e000      	b.n	800b982 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b980:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2b02      	cmp	r3, #2
 800b986:	d132      	bne.n	800b9ee <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b988:	2300      	movs	r3, #0
 800b98a:	60fb      	str	r3, [r7, #12]
 800b98c:	e002      	b.n	800b994 <inc_lock+0x6c>
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	3301      	adds	r3, #1
 800b992:	60fb      	str	r3, [r7, #12]
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2b01      	cmp	r3, #1
 800b998:	d806      	bhi.n	800b9a8 <inc_lock+0x80>
 800b99a:	4a29      	ldr	r2, [pc, #164]	; (800ba40 <inc_lock+0x118>)
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	011b      	lsls	r3, r3, #4
 800b9a0:	4413      	add	r3, r2
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d1f2      	bne.n	800b98e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	2b02      	cmp	r3, #2
 800b9ac:	d101      	bne.n	800b9b2 <inc_lock+0x8a>
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	e040      	b.n	800ba34 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681a      	ldr	r2, [r3, #0]
 800b9b6:	4922      	ldr	r1, [pc, #136]	; (800ba40 <inc_lock+0x118>)
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	011b      	lsls	r3, r3, #4
 800b9bc:	440b      	add	r3, r1
 800b9be:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	689a      	ldr	r2, [r3, #8]
 800b9c4:	491e      	ldr	r1, [pc, #120]	; (800ba40 <inc_lock+0x118>)
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	011b      	lsls	r3, r3, #4
 800b9ca:	440b      	add	r3, r1
 800b9cc:	3304      	adds	r3, #4
 800b9ce:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	695a      	ldr	r2, [r3, #20]
 800b9d4:	491a      	ldr	r1, [pc, #104]	; (800ba40 <inc_lock+0x118>)
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	011b      	lsls	r3, r3, #4
 800b9da:	440b      	add	r3, r1
 800b9dc:	3308      	adds	r3, #8
 800b9de:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b9e0:	4a17      	ldr	r2, [pc, #92]	; (800ba40 <inc_lock+0x118>)
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	011b      	lsls	r3, r3, #4
 800b9e6:	4413      	add	r3, r2
 800b9e8:	330c      	adds	r3, #12
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d009      	beq.n	800ba08 <inc_lock+0xe0>
 800b9f4:	4a12      	ldr	r2, [pc, #72]	; (800ba40 <inc_lock+0x118>)
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	011b      	lsls	r3, r3, #4
 800b9fa:	4413      	add	r3, r2
 800b9fc:	330c      	adds	r3, #12
 800b9fe:	881b      	ldrh	r3, [r3, #0]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d001      	beq.n	800ba08 <inc_lock+0xe0>
 800ba04:	2300      	movs	r3, #0
 800ba06:	e015      	b.n	800ba34 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d108      	bne.n	800ba20 <inc_lock+0xf8>
 800ba0e:	4a0c      	ldr	r2, [pc, #48]	; (800ba40 <inc_lock+0x118>)
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	011b      	lsls	r3, r3, #4
 800ba14:	4413      	add	r3, r2
 800ba16:	330c      	adds	r3, #12
 800ba18:	881b      	ldrh	r3, [r3, #0]
 800ba1a:	3301      	adds	r3, #1
 800ba1c:	b29a      	uxth	r2, r3
 800ba1e:	e001      	b.n	800ba24 <inc_lock+0xfc>
 800ba20:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ba24:	4906      	ldr	r1, [pc, #24]	; (800ba40 <inc_lock+0x118>)
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	011b      	lsls	r3, r3, #4
 800ba2a:	440b      	add	r3, r1
 800ba2c:	330c      	adds	r3, #12
 800ba2e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	3301      	adds	r3, #1
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3714      	adds	r7, #20
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr
 800ba40:	200022dc 	.word	0x200022dc

0800ba44 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b085      	sub	sp, #20
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	3b01      	subs	r3, #1
 800ba50:	607b      	str	r3, [r7, #4]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2b01      	cmp	r3, #1
 800ba56:	d825      	bhi.n	800baa4 <dec_lock+0x60>
		n = Files[i].ctr;
 800ba58:	4a17      	ldr	r2, [pc, #92]	; (800bab8 <dec_lock+0x74>)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	011b      	lsls	r3, r3, #4
 800ba5e:	4413      	add	r3, r2
 800ba60:	330c      	adds	r3, #12
 800ba62:	881b      	ldrh	r3, [r3, #0]
 800ba64:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ba66:	89fb      	ldrh	r3, [r7, #14]
 800ba68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba6c:	d101      	bne.n	800ba72 <dec_lock+0x2e>
 800ba6e:	2300      	movs	r3, #0
 800ba70:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ba72:	89fb      	ldrh	r3, [r7, #14]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d002      	beq.n	800ba7e <dec_lock+0x3a>
 800ba78:	89fb      	ldrh	r3, [r7, #14]
 800ba7a:	3b01      	subs	r3, #1
 800ba7c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ba7e:	4a0e      	ldr	r2, [pc, #56]	; (800bab8 <dec_lock+0x74>)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	011b      	lsls	r3, r3, #4
 800ba84:	4413      	add	r3, r2
 800ba86:	330c      	adds	r3, #12
 800ba88:	89fa      	ldrh	r2, [r7, #14]
 800ba8a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ba8c:	89fb      	ldrh	r3, [r7, #14]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d105      	bne.n	800ba9e <dec_lock+0x5a>
 800ba92:	4a09      	ldr	r2, [pc, #36]	; (800bab8 <dec_lock+0x74>)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	011b      	lsls	r3, r3, #4
 800ba98:	4413      	add	r3, r2
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	737b      	strb	r3, [r7, #13]
 800baa2:	e001      	b.n	800baa8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800baa4:	2302      	movs	r3, #2
 800baa6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800baa8:	7b7b      	ldrb	r3, [r7, #13]
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3714      	adds	r7, #20
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr
 800bab6:	bf00      	nop
 800bab8:	200022dc 	.word	0x200022dc

0800babc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800babc:	b480      	push	{r7}
 800babe:	b085      	sub	sp, #20
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bac4:	2300      	movs	r3, #0
 800bac6:	60fb      	str	r3, [r7, #12]
 800bac8:	e010      	b.n	800baec <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800baca:	4a0d      	ldr	r2, [pc, #52]	; (800bb00 <clear_lock+0x44>)
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	011b      	lsls	r3, r3, #4
 800bad0:	4413      	add	r3, r2
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d105      	bne.n	800bae6 <clear_lock+0x2a>
 800bada:	4a09      	ldr	r2, [pc, #36]	; (800bb00 <clear_lock+0x44>)
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	011b      	lsls	r3, r3, #4
 800bae0:	4413      	add	r3, r2
 800bae2:	2200      	movs	r2, #0
 800bae4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	3301      	adds	r3, #1
 800baea:	60fb      	str	r3, [r7, #12]
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2b01      	cmp	r3, #1
 800baf0:	d9eb      	bls.n	800baca <clear_lock+0xe>
	}
}
 800baf2:	bf00      	nop
 800baf4:	bf00      	nop
 800baf6:	3714      	adds	r7, #20
 800baf8:	46bd      	mov	sp, r7
 800bafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafe:	4770      	bx	lr
 800bb00:	200022dc 	.word	0x200022dc

0800bb04 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b086      	sub	sp, #24
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	78db      	ldrb	r3, [r3, #3]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d034      	beq.n	800bb82 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb1c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	7858      	ldrb	r0, [r3, #1]
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bb28:	2301      	movs	r3, #1
 800bb2a:	697a      	ldr	r2, [r7, #20]
 800bb2c:	f7ff fd40 	bl	800b5b0 <disk_write>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d002      	beq.n	800bb3c <sync_window+0x38>
			res = FR_DISK_ERR;
 800bb36:	2301      	movs	r3, #1
 800bb38:	73fb      	strb	r3, [r7, #15]
 800bb3a:	e022      	b.n	800bb82 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb46:	697a      	ldr	r2, [r7, #20]
 800bb48:	1ad2      	subs	r2, r2, r3
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6a1b      	ldr	r3, [r3, #32]
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d217      	bcs.n	800bb82 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	789b      	ldrb	r3, [r3, #2]
 800bb56:	613b      	str	r3, [r7, #16]
 800bb58:	e010      	b.n	800bb7c <sync_window+0x78>
					wsect += fs->fsize;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6a1b      	ldr	r3, [r3, #32]
 800bb5e:	697a      	ldr	r2, [r7, #20]
 800bb60:	4413      	add	r3, r2
 800bb62:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	7858      	ldrb	r0, [r3, #1]
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bb6e:	2301      	movs	r3, #1
 800bb70:	697a      	ldr	r2, [r7, #20]
 800bb72:	f7ff fd1d 	bl	800b5b0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	3b01      	subs	r3, #1
 800bb7a:	613b      	str	r3, [r7, #16]
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	2b01      	cmp	r3, #1
 800bb80:	d8eb      	bhi.n	800bb5a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bb82:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3718      	adds	r7, #24
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b084      	sub	sp, #16
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bb96:	2300      	movs	r3, #0
 800bb98:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb9e:	683a      	ldr	r2, [r7, #0]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d01b      	beq.n	800bbdc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f7ff ffad 	bl	800bb04 <sync_window>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bbae:	7bfb      	ldrb	r3, [r7, #15]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d113      	bne.n	800bbdc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	7858      	ldrb	r0, [r3, #1]
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	683a      	ldr	r2, [r7, #0]
 800bbc2:	f7ff fcd5 	bl	800b570 <disk_read>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d004      	beq.n	800bbd6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bbcc:	f04f 33ff 	mov.w	r3, #4294967295
 800bbd0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	683a      	ldr	r2, [r7, #0]
 800bbda:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800bbdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3710      	adds	r7, #16
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
	...

0800bbe8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f7ff ff87 	bl	800bb04 <sync_window>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bbfa:	7bfb      	ldrb	r3, [r7, #15]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d159      	bne.n	800bcb4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	781b      	ldrb	r3, [r3, #0]
 800bc04:	2b03      	cmp	r3, #3
 800bc06:	d149      	bne.n	800bc9c <sync_fs+0xb4>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	791b      	ldrb	r3, [r3, #4]
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	d145      	bne.n	800bc9c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	899b      	ldrh	r3, [r3, #12]
 800bc1a:	461a      	mov	r2, r3
 800bc1c:	2100      	movs	r1, #0
 800bc1e:	f7ff fda8 	bl	800b772 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	3338      	adds	r3, #56	; 0x38
 800bc26:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bc2a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7ff fd37 	bl	800b6a2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	3338      	adds	r3, #56	; 0x38
 800bc38:	4921      	ldr	r1, [pc, #132]	; (800bcc0 <sync_fs+0xd8>)
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f7ff fd4c 	bl	800b6d8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	3338      	adds	r3, #56	; 0x38
 800bc44:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bc48:	491e      	ldr	r1, [pc, #120]	; (800bcc4 <sync_fs+0xdc>)
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f7ff fd44 	bl	800b6d8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	3338      	adds	r3, #56	; 0x38
 800bc54:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	699b      	ldr	r3, [r3, #24]
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	4610      	mov	r0, r2
 800bc60:	f7ff fd3a 	bl	800b6d8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	3338      	adds	r3, #56	; 0x38
 800bc68:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	695b      	ldr	r3, [r3, #20]
 800bc70:	4619      	mov	r1, r3
 800bc72:	4610      	mov	r0, r2
 800bc74:	f7ff fd30 	bl	800b6d8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc7c:	1c5a      	adds	r2, r3, #1
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	7858      	ldrb	r0, [r3, #1]
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc90:	2301      	movs	r3, #1
 800bc92:	f7ff fc8d 	bl	800b5b0 <disk_write>
			fs->fsi_flag = 0;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	785b      	ldrb	r3, [r3, #1]
 800bca0:	2200      	movs	r2, #0
 800bca2:	2100      	movs	r1, #0
 800bca4:	4618      	mov	r0, r3
 800bca6:	f7ff fca3 	bl	800b5f0 <disk_ioctl>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d001      	beq.n	800bcb4 <sync_fs+0xcc>
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bcb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3710      	adds	r7, #16
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	41615252 	.word	0x41615252
 800bcc4:	61417272 	.word	0x61417272

0800bcc8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b083      	sub	sp, #12
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	3b02      	subs	r3, #2
 800bcd6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	69db      	ldr	r3, [r3, #28]
 800bcdc:	3b02      	subs	r3, #2
 800bcde:	683a      	ldr	r2, [r7, #0]
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d301      	bcc.n	800bce8 <clust2sect+0x20>
 800bce4:	2300      	movs	r3, #0
 800bce6:	e008      	b.n	800bcfa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	895b      	ldrh	r3, [r3, #10]
 800bcec:	461a      	mov	r2, r3
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	fb03 f202 	mul.w	r2, r3, r2
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcf8:	4413      	add	r3, r2
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	370c      	adds	r7, #12
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr

0800bd06 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bd06:	b580      	push	{r7, lr}
 800bd08:	b086      	sub	sp, #24
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	6078      	str	r0, [r7, #4]
 800bd0e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	2b01      	cmp	r3, #1
 800bd1a:	d904      	bls.n	800bd26 <get_fat+0x20>
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	69db      	ldr	r3, [r3, #28]
 800bd20:	683a      	ldr	r2, [r7, #0]
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d302      	bcc.n	800bd2c <get_fat+0x26>
		val = 1;	/* Internal error */
 800bd26:	2301      	movs	r3, #1
 800bd28:	617b      	str	r3, [r7, #20]
 800bd2a:	e0bb      	b.n	800bea4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bd2c:	f04f 33ff 	mov.w	r3, #4294967295
 800bd30:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	781b      	ldrb	r3, [r3, #0]
 800bd36:	2b03      	cmp	r3, #3
 800bd38:	f000 8083 	beq.w	800be42 <get_fat+0x13c>
 800bd3c:	2b03      	cmp	r3, #3
 800bd3e:	f300 80a7 	bgt.w	800be90 <get_fat+0x18a>
 800bd42:	2b01      	cmp	r3, #1
 800bd44:	d002      	beq.n	800bd4c <get_fat+0x46>
 800bd46:	2b02      	cmp	r3, #2
 800bd48:	d056      	beq.n	800bdf8 <get_fat+0xf2>
 800bd4a:	e0a1      	b.n	800be90 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	60fb      	str	r3, [r7, #12]
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	085b      	lsrs	r3, r3, #1
 800bd54:	68fa      	ldr	r2, [r7, #12]
 800bd56:	4413      	add	r3, r2
 800bd58:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	899b      	ldrh	r3, [r3, #12]
 800bd62:	4619      	mov	r1, r3
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd6a:	4413      	add	r3, r2
 800bd6c:	4619      	mov	r1, r3
 800bd6e:	6938      	ldr	r0, [r7, #16]
 800bd70:	f7ff ff0c 	bl	800bb8c <move_window>
 800bd74:	4603      	mov	r3, r0
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	f040 808d 	bne.w	800be96 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	1c5a      	adds	r2, r3, #1
 800bd80:	60fa      	str	r2, [r7, #12]
 800bd82:	693a      	ldr	r2, [r7, #16]
 800bd84:	8992      	ldrh	r2, [r2, #12]
 800bd86:	fbb3 f1f2 	udiv	r1, r3, r2
 800bd8a:	fb02 f201 	mul.w	r2, r2, r1
 800bd8e:	1a9b      	subs	r3, r3, r2
 800bd90:	693a      	ldr	r2, [r7, #16]
 800bd92:	4413      	add	r3, r2
 800bd94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bd98:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	899b      	ldrh	r3, [r3, #12]
 800bda2:	4619      	mov	r1, r3
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	fbb3 f3f1 	udiv	r3, r3, r1
 800bdaa:	4413      	add	r3, r2
 800bdac:	4619      	mov	r1, r3
 800bdae:	6938      	ldr	r0, [r7, #16]
 800bdb0:	f7ff feec 	bl	800bb8c <move_window>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d16f      	bne.n	800be9a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	899b      	ldrh	r3, [r3, #12]
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	fbb3 f1f2 	udiv	r1, r3, r2
 800bdc6:	fb02 f201 	mul.w	r2, r2, r1
 800bdca:	1a9b      	subs	r3, r3, r2
 800bdcc:	693a      	ldr	r2, [r7, #16]
 800bdce:	4413      	add	r3, r2
 800bdd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bdd4:	021b      	lsls	r3, r3, #8
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	4313      	orrs	r3, r2
 800bddc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	f003 0301 	and.w	r3, r3, #1
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d002      	beq.n	800bdee <get_fat+0xe8>
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	091b      	lsrs	r3, r3, #4
 800bdec:	e002      	b.n	800bdf4 <get_fat+0xee>
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bdf4:	617b      	str	r3, [r7, #20]
			break;
 800bdf6:	e055      	b.n	800bea4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	899b      	ldrh	r3, [r3, #12]
 800be00:	085b      	lsrs	r3, r3, #1
 800be02:	b29b      	uxth	r3, r3
 800be04:	4619      	mov	r1, r3
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	fbb3 f3f1 	udiv	r3, r3, r1
 800be0c:	4413      	add	r3, r2
 800be0e:	4619      	mov	r1, r3
 800be10:	6938      	ldr	r0, [r7, #16]
 800be12:	f7ff febb 	bl	800bb8c <move_window>
 800be16:	4603      	mov	r3, r0
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d140      	bne.n	800be9e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800be1c:	693b      	ldr	r3, [r7, #16]
 800be1e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	005b      	lsls	r3, r3, #1
 800be26:	693a      	ldr	r2, [r7, #16]
 800be28:	8992      	ldrh	r2, [r2, #12]
 800be2a:	fbb3 f0f2 	udiv	r0, r3, r2
 800be2e:	fb02 f200 	mul.w	r2, r2, r0
 800be32:	1a9b      	subs	r3, r3, r2
 800be34:	440b      	add	r3, r1
 800be36:	4618      	mov	r0, r3
 800be38:	f7ff fbf8 	bl	800b62c <ld_word>
 800be3c:	4603      	mov	r3, r0
 800be3e:	617b      	str	r3, [r7, #20]
			break;
 800be40:	e030      	b.n	800bea4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	899b      	ldrh	r3, [r3, #12]
 800be4a:	089b      	lsrs	r3, r3, #2
 800be4c:	b29b      	uxth	r3, r3
 800be4e:	4619      	mov	r1, r3
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	fbb3 f3f1 	udiv	r3, r3, r1
 800be56:	4413      	add	r3, r2
 800be58:	4619      	mov	r1, r3
 800be5a:	6938      	ldr	r0, [r7, #16]
 800be5c:	f7ff fe96 	bl	800bb8c <move_window>
 800be60:	4603      	mov	r3, r0
 800be62:	2b00      	cmp	r3, #0
 800be64:	d11d      	bne.n	800bea2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	009b      	lsls	r3, r3, #2
 800be70:	693a      	ldr	r2, [r7, #16]
 800be72:	8992      	ldrh	r2, [r2, #12]
 800be74:	fbb3 f0f2 	udiv	r0, r3, r2
 800be78:	fb02 f200 	mul.w	r2, r2, r0
 800be7c:	1a9b      	subs	r3, r3, r2
 800be7e:	440b      	add	r3, r1
 800be80:	4618      	mov	r0, r3
 800be82:	f7ff fbeb 	bl	800b65c <ld_dword>
 800be86:	4603      	mov	r3, r0
 800be88:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800be8c:	617b      	str	r3, [r7, #20]
			break;
 800be8e:	e009      	b.n	800bea4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800be90:	2301      	movs	r3, #1
 800be92:	617b      	str	r3, [r7, #20]
 800be94:	e006      	b.n	800bea4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800be96:	bf00      	nop
 800be98:	e004      	b.n	800bea4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800be9a:	bf00      	nop
 800be9c:	e002      	b.n	800bea4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800be9e:	bf00      	nop
 800bea0:	e000      	b.n	800bea4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bea2:	bf00      	nop
		}
	}

	return val;
 800bea4:	697b      	ldr	r3, [r7, #20]
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3718      	adds	r7, #24
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}

0800beae <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800beae:	b590      	push	{r4, r7, lr}
 800beb0:	b089      	sub	sp, #36	; 0x24
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	60f8      	str	r0, [r7, #12]
 800beb6:	60b9      	str	r1, [r7, #8]
 800beb8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800beba:	2302      	movs	r3, #2
 800bebc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	2b01      	cmp	r3, #1
 800bec2:	f240 8102 	bls.w	800c0ca <put_fat+0x21c>
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	69db      	ldr	r3, [r3, #28]
 800beca:	68ba      	ldr	r2, [r7, #8]
 800becc:	429a      	cmp	r2, r3
 800bece:	f080 80fc 	bcs.w	800c0ca <put_fat+0x21c>
		switch (fs->fs_type) {
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	2b03      	cmp	r3, #3
 800bed8:	f000 80b6 	beq.w	800c048 <put_fat+0x19a>
 800bedc:	2b03      	cmp	r3, #3
 800bede:	f300 80fd 	bgt.w	800c0dc <put_fat+0x22e>
 800bee2:	2b01      	cmp	r3, #1
 800bee4:	d003      	beq.n	800beee <put_fat+0x40>
 800bee6:	2b02      	cmp	r3, #2
 800bee8:	f000 8083 	beq.w	800bff2 <put_fat+0x144>
 800beec:	e0f6      	b.n	800c0dc <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	61bb      	str	r3, [r7, #24]
 800bef2:	69bb      	ldr	r3, [r7, #24]
 800bef4:	085b      	lsrs	r3, r3, #1
 800bef6:	69ba      	ldr	r2, [r7, #24]
 800bef8:	4413      	add	r3, r2
 800befa:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	899b      	ldrh	r3, [r3, #12]
 800bf04:	4619      	mov	r1, r3
 800bf06:	69bb      	ldr	r3, [r7, #24]
 800bf08:	fbb3 f3f1 	udiv	r3, r3, r1
 800bf0c:	4413      	add	r3, r2
 800bf0e:	4619      	mov	r1, r3
 800bf10:	68f8      	ldr	r0, [r7, #12]
 800bf12:	f7ff fe3b 	bl	800bb8c <move_window>
 800bf16:	4603      	mov	r3, r0
 800bf18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf1a:	7ffb      	ldrb	r3, [r7, #31]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	f040 80d6 	bne.w	800c0ce <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bf28:	69bb      	ldr	r3, [r7, #24]
 800bf2a:	1c5a      	adds	r2, r3, #1
 800bf2c:	61ba      	str	r2, [r7, #24]
 800bf2e:	68fa      	ldr	r2, [r7, #12]
 800bf30:	8992      	ldrh	r2, [r2, #12]
 800bf32:	fbb3 f0f2 	udiv	r0, r3, r2
 800bf36:	fb02 f200 	mul.w	r2, r2, r0
 800bf3a:	1a9b      	subs	r3, r3, r2
 800bf3c:	440b      	add	r3, r1
 800bf3e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	f003 0301 	and.w	r3, r3, #1
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d00d      	beq.n	800bf66 <put_fat+0xb8>
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	781b      	ldrb	r3, [r3, #0]
 800bf4e:	b25b      	sxtb	r3, r3
 800bf50:	f003 030f 	and.w	r3, r3, #15
 800bf54:	b25a      	sxtb	r2, r3
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	b2db      	uxtb	r3, r3
 800bf5a:	011b      	lsls	r3, r3, #4
 800bf5c:	b25b      	sxtb	r3, r3
 800bf5e:	4313      	orrs	r3, r2
 800bf60:	b25b      	sxtb	r3, r3
 800bf62:	b2db      	uxtb	r3, r3
 800bf64:	e001      	b.n	800bf6a <put_fat+0xbc>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	b2db      	uxtb	r3, r3
 800bf6a:	697a      	ldr	r2, [r7, #20]
 800bf6c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2201      	movs	r2, #1
 800bf72:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	899b      	ldrh	r3, [r3, #12]
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	69bb      	ldr	r3, [r7, #24]
 800bf80:	fbb3 f3f1 	udiv	r3, r3, r1
 800bf84:	4413      	add	r3, r2
 800bf86:	4619      	mov	r1, r3
 800bf88:	68f8      	ldr	r0, [r7, #12]
 800bf8a:	f7ff fdff 	bl	800bb8c <move_window>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf92:	7ffb      	ldrb	r3, [r7, #31]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	f040 809c 	bne.w	800c0d2 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	899b      	ldrh	r3, [r3, #12]
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	69bb      	ldr	r3, [r7, #24]
 800bfa8:	fbb3 f0f2 	udiv	r0, r3, r2
 800bfac:	fb02 f200 	mul.w	r2, r2, r0
 800bfb0:	1a9b      	subs	r3, r3, r2
 800bfb2:	440b      	add	r3, r1
 800bfb4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	f003 0301 	and.w	r3, r3, #1
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d003      	beq.n	800bfc8 <put_fat+0x11a>
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	091b      	lsrs	r3, r3, #4
 800bfc4:	b2db      	uxtb	r3, r3
 800bfc6:	e00e      	b.n	800bfe6 <put_fat+0x138>
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	b25b      	sxtb	r3, r3
 800bfce:	f023 030f 	bic.w	r3, r3, #15
 800bfd2:	b25a      	sxtb	r2, r3
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	0a1b      	lsrs	r3, r3, #8
 800bfd8:	b25b      	sxtb	r3, r3
 800bfda:	f003 030f 	and.w	r3, r3, #15
 800bfde:	b25b      	sxtb	r3, r3
 800bfe0:	4313      	orrs	r3, r2
 800bfe2:	b25b      	sxtb	r3, r3
 800bfe4:	b2db      	uxtb	r3, r3
 800bfe6:	697a      	ldr	r2, [r7, #20]
 800bfe8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2201      	movs	r2, #1
 800bfee:	70da      	strb	r2, [r3, #3]
			break;
 800bff0:	e074      	b.n	800c0dc <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	899b      	ldrh	r3, [r3, #12]
 800bffa:	085b      	lsrs	r3, r3, #1
 800bffc:	b29b      	uxth	r3, r3
 800bffe:	4619      	mov	r1, r3
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	fbb3 f3f1 	udiv	r3, r3, r1
 800c006:	4413      	add	r3, r2
 800c008:	4619      	mov	r1, r3
 800c00a:	68f8      	ldr	r0, [r7, #12]
 800c00c:	f7ff fdbe 	bl	800bb8c <move_window>
 800c010:	4603      	mov	r3, r0
 800c012:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c014:	7ffb      	ldrb	r3, [r7, #31]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d15d      	bne.n	800c0d6 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	005b      	lsls	r3, r3, #1
 800c024:	68fa      	ldr	r2, [r7, #12]
 800c026:	8992      	ldrh	r2, [r2, #12]
 800c028:	fbb3 f0f2 	udiv	r0, r3, r2
 800c02c:	fb02 f200 	mul.w	r2, r2, r0
 800c030:	1a9b      	subs	r3, r3, r2
 800c032:	440b      	add	r3, r1
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	b292      	uxth	r2, r2
 800c038:	4611      	mov	r1, r2
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7ff fb31 	bl	800b6a2 <st_word>
			fs->wflag = 1;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	2201      	movs	r2, #1
 800c044:	70da      	strb	r2, [r3, #3]
			break;
 800c046:	e049      	b.n	800c0dc <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	899b      	ldrh	r3, [r3, #12]
 800c050:	089b      	lsrs	r3, r3, #2
 800c052:	b29b      	uxth	r3, r3
 800c054:	4619      	mov	r1, r3
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	fbb3 f3f1 	udiv	r3, r3, r1
 800c05c:	4413      	add	r3, r2
 800c05e:	4619      	mov	r1, r3
 800c060:	68f8      	ldr	r0, [r7, #12]
 800c062:	f7ff fd93 	bl	800bb8c <move_window>
 800c066:	4603      	mov	r3, r0
 800c068:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c06a:	7ffb      	ldrb	r3, [r7, #31]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d134      	bne.n	800c0da <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	009b      	lsls	r3, r3, #2
 800c080:	68fa      	ldr	r2, [r7, #12]
 800c082:	8992      	ldrh	r2, [r2, #12]
 800c084:	fbb3 f0f2 	udiv	r0, r3, r2
 800c088:	fb02 f200 	mul.w	r2, r2, r0
 800c08c:	1a9b      	subs	r3, r3, r2
 800c08e:	440b      	add	r3, r1
 800c090:	4618      	mov	r0, r3
 800c092:	f7ff fae3 	bl	800b65c <ld_dword>
 800c096:	4603      	mov	r3, r0
 800c098:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c09c:	4323      	orrs	r3, r4
 800c09e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	009b      	lsls	r3, r3, #2
 800c0aa:	68fa      	ldr	r2, [r7, #12]
 800c0ac:	8992      	ldrh	r2, [r2, #12]
 800c0ae:	fbb3 f0f2 	udiv	r0, r3, r2
 800c0b2:	fb02 f200 	mul.w	r2, r2, r0
 800c0b6:	1a9b      	subs	r3, r3, r2
 800c0b8:	440b      	add	r3, r1
 800c0ba:	6879      	ldr	r1, [r7, #4]
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7ff fb0b 	bl	800b6d8 <st_dword>
			fs->wflag = 1;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	2201      	movs	r2, #1
 800c0c6:	70da      	strb	r2, [r3, #3]
			break;
 800c0c8:	e008      	b.n	800c0dc <put_fat+0x22e>
		}
	}
 800c0ca:	bf00      	nop
 800c0cc:	e006      	b.n	800c0dc <put_fat+0x22e>
			if (res != FR_OK) break;
 800c0ce:	bf00      	nop
 800c0d0:	e004      	b.n	800c0dc <put_fat+0x22e>
			if (res != FR_OK) break;
 800c0d2:	bf00      	nop
 800c0d4:	e002      	b.n	800c0dc <put_fat+0x22e>
			if (res != FR_OK) break;
 800c0d6:	bf00      	nop
 800c0d8:	e000      	b.n	800c0dc <put_fat+0x22e>
			if (res != FR_OK) break;
 800c0da:	bf00      	nop
	return res;
 800c0dc:	7ffb      	ldrb	r3, [r7, #31]
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3724      	adds	r7, #36	; 0x24
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd90      	pop	{r4, r7, pc}

0800c0e6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c0e6:	b580      	push	{r7, lr}
 800c0e8:	b088      	sub	sp, #32
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	60f8      	str	r0, [r7, #12]
 800c0ee:	60b9      	str	r1, [r7, #8]
 800c0f0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	2b01      	cmp	r3, #1
 800c100:	d904      	bls.n	800c10c <remove_chain+0x26>
 800c102:	69bb      	ldr	r3, [r7, #24]
 800c104:	69db      	ldr	r3, [r3, #28]
 800c106:	68ba      	ldr	r2, [r7, #8]
 800c108:	429a      	cmp	r2, r3
 800c10a:	d301      	bcc.n	800c110 <remove_chain+0x2a>
 800c10c:	2302      	movs	r3, #2
 800c10e:	e04b      	b.n	800c1a8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d00c      	beq.n	800c130 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c116:	f04f 32ff 	mov.w	r2, #4294967295
 800c11a:	6879      	ldr	r1, [r7, #4]
 800c11c:	69b8      	ldr	r0, [r7, #24]
 800c11e:	f7ff fec6 	bl	800beae <put_fat>
 800c122:	4603      	mov	r3, r0
 800c124:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c126:	7ffb      	ldrb	r3, [r7, #31]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d001      	beq.n	800c130 <remove_chain+0x4a>
 800c12c:	7ffb      	ldrb	r3, [r7, #31]
 800c12e:	e03b      	b.n	800c1a8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c130:	68b9      	ldr	r1, [r7, #8]
 800c132:	68f8      	ldr	r0, [r7, #12]
 800c134:	f7ff fde7 	bl	800bd06 <get_fat>
 800c138:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d031      	beq.n	800c1a4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	2b01      	cmp	r3, #1
 800c144:	d101      	bne.n	800c14a <remove_chain+0x64>
 800c146:	2302      	movs	r3, #2
 800c148:	e02e      	b.n	800c1a8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c150:	d101      	bne.n	800c156 <remove_chain+0x70>
 800c152:	2301      	movs	r3, #1
 800c154:	e028      	b.n	800c1a8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c156:	2200      	movs	r2, #0
 800c158:	68b9      	ldr	r1, [r7, #8]
 800c15a:	69b8      	ldr	r0, [r7, #24]
 800c15c:	f7ff fea7 	bl	800beae <put_fat>
 800c160:	4603      	mov	r3, r0
 800c162:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c164:	7ffb      	ldrb	r3, [r7, #31]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d001      	beq.n	800c16e <remove_chain+0x88>
 800c16a:	7ffb      	ldrb	r3, [r7, #31]
 800c16c:	e01c      	b.n	800c1a8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c16e:	69bb      	ldr	r3, [r7, #24]
 800c170:	699a      	ldr	r2, [r3, #24]
 800c172:	69bb      	ldr	r3, [r7, #24]
 800c174:	69db      	ldr	r3, [r3, #28]
 800c176:	3b02      	subs	r3, #2
 800c178:	429a      	cmp	r2, r3
 800c17a:	d20b      	bcs.n	800c194 <remove_chain+0xae>
			fs->free_clst++;
 800c17c:	69bb      	ldr	r3, [r7, #24]
 800c17e:	699b      	ldr	r3, [r3, #24]
 800c180:	1c5a      	adds	r2, r3, #1
 800c182:	69bb      	ldr	r3, [r7, #24]
 800c184:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800c186:	69bb      	ldr	r3, [r7, #24]
 800c188:	791b      	ldrb	r3, [r3, #4]
 800c18a:	f043 0301 	orr.w	r3, r3, #1
 800c18e:	b2da      	uxtb	r2, r3
 800c190:	69bb      	ldr	r3, [r7, #24]
 800c192:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c198:	69bb      	ldr	r3, [r7, #24]
 800c19a:	69db      	ldr	r3, [r3, #28]
 800c19c:	68ba      	ldr	r2, [r7, #8]
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	d3c6      	bcc.n	800c130 <remove_chain+0x4a>
 800c1a2:	e000      	b.n	800c1a6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c1a4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c1a6:	2300      	movs	r3, #0
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3720      	adds	r7, #32
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}

0800c1b0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b088      	sub	sp, #32
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
 800c1b8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d10d      	bne.n	800c1e2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	695b      	ldr	r3, [r3, #20]
 800c1ca:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c1cc:	69bb      	ldr	r3, [r7, #24]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d004      	beq.n	800c1dc <create_chain+0x2c>
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	69db      	ldr	r3, [r3, #28]
 800c1d6:	69ba      	ldr	r2, [r7, #24]
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d31b      	bcc.n	800c214 <create_chain+0x64>
 800c1dc:	2301      	movs	r3, #1
 800c1de:	61bb      	str	r3, [r7, #24]
 800c1e0:	e018      	b.n	800c214 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c1e2:	6839      	ldr	r1, [r7, #0]
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f7ff fd8e 	bl	800bd06 <get_fat>
 800c1ea:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2b01      	cmp	r3, #1
 800c1f0:	d801      	bhi.n	800c1f6 <create_chain+0x46>
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	e070      	b.n	800c2d8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1fc:	d101      	bne.n	800c202 <create_chain+0x52>
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	e06a      	b.n	800c2d8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	69db      	ldr	r3, [r3, #28]
 800c206:	68fa      	ldr	r2, [r7, #12]
 800c208:	429a      	cmp	r2, r3
 800c20a:	d201      	bcs.n	800c210 <create_chain+0x60>
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	e063      	b.n	800c2d8 <create_chain+0x128>
		scl = clst;
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c214:	69bb      	ldr	r3, [r7, #24]
 800c216:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c218:	69fb      	ldr	r3, [r7, #28]
 800c21a:	3301      	adds	r3, #1
 800c21c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	69db      	ldr	r3, [r3, #28]
 800c222:	69fa      	ldr	r2, [r7, #28]
 800c224:	429a      	cmp	r2, r3
 800c226:	d307      	bcc.n	800c238 <create_chain+0x88>
				ncl = 2;
 800c228:	2302      	movs	r3, #2
 800c22a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c22c:	69fa      	ldr	r2, [r7, #28]
 800c22e:	69bb      	ldr	r3, [r7, #24]
 800c230:	429a      	cmp	r2, r3
 800c232:	d901      	bls.n	800c238 <create_chain+0x88>
 800c234:	2300      	movs	r3, #0
 800c236:	e04f      	b.n	800c2d8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c238:	69f9      	ldr	r1, [r7, #28]
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f7ff fd63 	bl	800bd06 <get_fat>
 800c240:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d00e      	beq.n	800c266 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	2b01      	cmp	r3, #1
 800c24c:	d003      	beq.n	800c256 <create_chain+0xa6>
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c254:	d101      	bne.n	800c25a <create_chain+0xaa>
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	e03e      	b.n	800c2d8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c25a:	69fa      	ldr	r2, [r7, #28]
 800c25c:	69bb      	ldr	r3, [r7, #24]
 800c25e:	429a      	cmp	r2, r3
 800c260:	d1da      	bne.n	800c218 <create_chain+0x68>
 800c262:	2300      	movs	r3, #0
 800c264:	e038      	b.n	800c2d8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c266:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c268:	f04f 32ff 	mov.w	r2, #4294967295
 800c26c:	69f9      	ldr	r1, [r7, #28]
 800c26e:	6938      	ldr	r0, [r7, #16]
 800c270:	f7ff fe1d 	bl	800beae <put_fat>
 800c274:	4603      	mov	r3, r0
 800c276:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c278:	7dfb      	ldrb	r3, [r7, #23]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d109      	bne.n	800c292 <create_chain+0xe2>
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d006      	beq.n	800c292 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c284:	69fa      	ldr	r2, [r7, #28]
 800c286:	6839      	ldr	r1, [r7, #0]
 800c288:	6938      	ldr	r0, [r7, #16]
 800c28a:	f7ff fe10 	bl	800beae <put_fat>
 800c28e:	4603      	mov	r3, r0
 800c290:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c292:	7dfb      	ldrb	r3, [r7, #23]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d116      	bne.n	800c2c6 <create_chain+0x116>
		fs->last_clst = ncl;
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	69fa      	ldr	r2, [r7, #28]
 800c29c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	699a      	ldr	r2, [r3, #24]
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	69db      	ldr	r3, [r3, #28]
 800c2a6:	3b02      	subs	r3, #2
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d804      	bhi.n	800c2b6 <create_chain+0x106>
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	699b      	ldr	r3, [r3, #24]
 800c2b0:	1e5a      	subs	r2, r3, #1
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	791b      	ldrb	r3, [r3, #4]
 800c2ba:	f043 0301 	orr.w	r3, r3, #1
 800c2be:	b2da      	uxtb	r2, r3
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	711a      	strb	r2, [r3, #4]
 800c2c4:	e007      	b.n	800c2d6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c2c6:	7dfb      	ldrb	r3, [r7, #23]
 800c2c8:	2b01      	cmp	r3, #1
 800c2ca:	d102      	bne.n	800c2d2 <create_chain+0x122>
 800c2cc:	f04f 33ff 	mov.w	r3, #4294967295
 800c2d0:	e000      	b.n	800c2d4 <create_chain+0x124>
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c2d6:	69fb      	ldr	r3, [r7, #28]
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3720      	adds	r7, #32
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}

0800c2e0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b087      	sub	sp, #28
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2f4:	3304      	adds	r3, #4
 800c2f6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	899b      	ldrh	r3, [r3, #12]
 800c2fc:	461a      	mov	r2, r3
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	fbb3 f3f2 	udiv	r3, r3, r2
 800c304:	68fa      	ldr	r2, [r7, #12]
 800c306:	8952      	ldrh	r2, [r2, #10]
 800c308:	fbb3 f3f2 	udiv	r3, r3, r2
 800c30c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	1d1a      	adds	r2, r3, #4
 800c312:	613a      	str	r2, [r7, #16]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d101      	bne.n	800c322 <clmt_clust+0x42>
 800c31e:	2300      	movs	r3, #0
 800c320:	e010      	b.n	800c344 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800c322:	697a      	ldr	r2, [r7, #20]
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	429a      	cmp	r2, r3
 800c328:	d307      	bcc.n	800c33a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800c32a:	697a      	ldr	r2, [r7, #20]
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	1ad3      	subs	r3, r2, r3
 800c330:	617b      	str	r3, [r7, #20]
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	3304      	adds	r3, #4
 800c336:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c338:	e7e9      	b.n	800c30e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800c33a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	681a      	ldr	r2, [r3, #0]
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	4413      	add	r3, r2
}
 800c344:	4618      	mov	r0, r3
 800c346:	371c      	adds	r7, #28
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr

0800c350 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b086      	sub	sp, #24
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
 800c358:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c366:	d204      	bcs.n	800c372 <dir_sdi+0x22>
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	f003 031f 	and.w	r3, r3, #31
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d001      	beq.n	800c376 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c372:	2302      	movs	r3, #2
 800c374:	e071      	b.n	800c45a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	683a      	ldr	r2, [r7, #0]
 800c37a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	689b      	ldr	r3, [r3, #8]
 800c380:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d106      	bne.n	800c396 <dir_sdi+0x46>
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	781b      	ldrb	r3, [r3, #0]
 800c38c:	2b02      	cmp	r3, #2
 800c38e:	d902      	bls.n	800c396 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c394:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d10c      	bne.n	800c3b6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	095b      	lsrs	r3, r3, #5
 800c3a0:	693a      	ldr	r2, [r7, #16]
 800c3a2:	8912      	ldrh	r2, [r2, #8]
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d301      	bcc.n	800c3ac <dir_sdi+0x5c>
 800c3a8:	2302      	movs	r3, #2
 800c3aa:	e056      	b.n	800c45a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	61da      	str	r2, [r3, #28]
 800c3b4:	e02d      	b.n	800c412 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	895b      	ldrh	r3, [r3, #10]
 800c3ba:	461a      	mov	r2, r3
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	899b      	ldrh	r3, [r3, #12]
 800c3c0:	fb03 f302 	mul.w	r3, r3, r2
 800c3c4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c3c6:	e019      	b.n	800c3fc <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6979      	ldr	r1, [r7, #20]
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f7ff fc9a 	bl	800bd06 <get_fat>
 800c3d2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3da:	d101      	bne.n	800c3e0 <dir_sdi+0x90>
 800c3dc:	2301      	movs	r3, #1
 800c3de:	e03c      	b.n	800c45a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	2b01      	cmp	r3, #1
 800c3e4:	d904      	bls.n	800c3f0 <dir_sdi+0xa0>
 800c3e6:	693b      	ldr	r3, [r7, #16]
 800c3e8:	69db      	ldr	r3, [r3, #28]
 800c3ea:	697a      	ldr	r2, [r7, #20]
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d301      	bcc.n	800c3f4 <dir_sdi+0xa4>
 800c3f0:	2302      	movs	r3, #2
 800c3f2:	e032      	b.n	800c45a <dir_sdi+0x10a>
			ofs -= csz;
 800c3f4:	683a      	ldr	r2, [r7, #0]
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	1ad3      	subs	r3, r2, r3
 800c3fa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c3fc:	683a      	ldr	r2, [r7, #0]
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	429a      	cmp	r2, r3
 800c402:	d2e1      	bcs.n	800c3c8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800c404:	6979      	ldr	r1, [r7, #20]
 800c406:	6938      	ldr	r0, [r7, #16]
 800c408:	f7ff fc5e 	bl	800bcc8 <clust2sect>
 800c40c:	4602      	mov	r2, r0
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	697a      	ldr	r2, [r7, #20]
 800c416:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	69db      	ldr	r3, [r3, #28]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d101      	bne.n	800c424 <dir_sdi+0xd4>
 800c420:	2302      	movs	r3, #2
 800c422:	e01a      	b.n	800c45a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	69da      	ldr	r2, [r3, #28]
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	899b      	ldrh	r3, [r3, #12]
 800c42c:	4619      	mov	r1, r3
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	fbb3 f3f1 	udiv	r3, r3, r1
 800c434:	441a      	add	r2, r3
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	899b      	ldrh	r3, [r3, #12]
 800c444:	461a      	mov	r2, r3
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	fbb3 f0f2 	udiv	r0, r3, r2
 800c44c:	fb02 f200 	mul.w	r2, r2, r0
 800c450:	1a9b      	subs	r3, r3, r2
 800c452:	18ca      	adds	r2, r1, r3
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c458:	2300      	movs	r3, #0
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3718      	adds	r7, #24
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}

0800c462 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c462:	b580      	push	{r7, lr}
 800c464:	b086      	sub	sp, #24
 800c466:	af00      	add	r7, sp, #0
 800c468:	6078      	str	r0, [r7, #4]
 800c46a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	695b      	ldr	r3, [r3, #20]
 800c476:	3320      	adds	r3, #32
 800c478:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	69db      	ldr	r3, [r3, #28]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d003      	beq.n	800c48a <dir_next+0x28>
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c488:	d301      	bcc.n	800c48e <dir_next+0x2c>
 800c48a:	2304      	movs	r3, #4
 800c48c:	e0bb      	b.n	800c606 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	899b      	ldrh	r3, [r3, #12]
 800c492:	461a      	mov	r2, r3
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	fbb3 f1f2 	udiv	r1, r3, r2
 800c49a:	fb02 f201 	mul.w	r2, r2, r1
 800c49e:	1a9b      	subs	r3, r3, r2
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	f040 809d 	bne.w	800c5e0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	69db      	ldr	r3, [r3, #28]
 800c4aa:	1c5a      	adds	r2, r3, #1
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	699b      	ldr	r3, [r3, #24]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d10b      	bne.n	800c4d0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	095b      	lsrs	r3, r3, #5
 800c4bc:	68fa      	ldr	r2, [r7, #12]
 800c4be:	8912      	ldrh	r2, [r2, #8]
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	f0c0 808d 	bcc.w	800c5e0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	61da      	str	r2, [r3, #28]
 800c4cc:	2304      	movs	r3, #4
 800c4ce:	e09a      	b.n	800c606 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	899b      	ldrh	r3, [r3, #12]
 800c4d4:	461a      	mov	r2, r3
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4dc:	68fa      	ldr	r2, [r7, #12]
 800c4de:	8952      	ldrh	r2, [r2, #10]
 800c4e0:	3a01      	subs	r2, #1
 800c4e2:	4013      	ands	r3, r2
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d17b      	bne.n	800c5e0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	699b      	ldr	r3, [r3, #24]
 800c4ee:	4619      	mov	r1, r3
 800c4f0:	4610      	mov	r0, r2
 800c4f2:	f7ff fc08 	bl	800bd06 <get_fat>
 800c4f6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	2b01      	cmp	r3, #1
 800c4fc:	d801      	bhi.n	800c502 <dir_next+0xa0>
 800c4fe:	2302      	movs	r3, #2
 800c500:	e081      	b.n	800c606 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c508:	d101      	bne.n	800c50e <dir_next+0xac>
 800c50a:	2301      	movs	r3, #1
 800c50c:	e07b      	b.n	800c606 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	69db      	ldr	r3, [r3, #28]
 800c512:	697a      	ldr	r2, [r7, #20]
 800c514:	429a      	cmp	r2, r3
 800c516:	d359      	bcc.n	800c5cc <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d104      	bne.n	800c528 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2200      	movs	r2, #0
 800c522:	61da      	str	r2, [r3, #28]
 800c524:	2304      	movs	r3, #4
 800c526:	e06e      	b.n	800c606 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c528:	687a      	ldr	r2, [r7, #4]
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	699b      	ldr	r3, [r3, #24]
 800c52e:	4619      	mov	r1, r3
 800c530:	4610      	mov	r0, r2
 800c532:	f7ff fe3d 	bl	800c1b0 <create_chain>
 800c536:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d101      	bne.n	800c542 <dir_next+0xe0>
 800c53e:	2307      	movs	r3, #7
 800c540:	e061      	b.n	800c606 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	2b01      	cmp	r3, #1
 800c546:	d101      	bne.n	800c54c <dir_next+0xea>
 800c548:	2302      	movs	r3, #2
 800c54a:	e05c      	b.n	800c606 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c552:	d101      	bne.n	800c558 <dir_next+0xf6>
 800c554:	2301      	movs	r3, #1
 800c556:	e056      	b.n	800c606 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c558:	68f8      	ldr	r0, [r7, #12]
 800c55a:	f7ff fad3 	bl	800bb04 <sync_window>
 800c55e:	4603      	mov	r3, r0
 800c560:	2b00      	cmp	r3, #0
 800c562:	d001      	beq.n	800c568 <dir_next+0x106>
 800c564:	2301      	movs	r3, #1
 800c566:	e04e      	b.n	800c606 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	899b      	ldrh	r3, [r3, #12]
 800c572:	461a      	mov	r2, r3
 800c574:	2100      	movs	r1, #0
 800c576:	f7ff f8fc 	bl	800b772 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c57a:	2300      	movs	r3, #0
 800c57c:	613b      	str	r3, [r7, #16]
 800c57e:	6979      	ldr	r1, [r7, #20]
 800c580:	68f8      	ldr	r0, [r7, #12]
 800c582:	f7ff fba1 	bl	800bcc8 <clust2sect>
 800c586:	4602      	mov	r2, r0
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	635a      	str	r2, [r3, #52]	; 0x34
 800c58c:	e012      	b.n	800c5b4 <dir_next+0x152>
						fs->wflag = 1;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	2201      	movs	r2, #1
 800c592:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c594:	68f8      	ldr	r0, [r7, #12]
 800c596:	f7ff fab5 	bl	800bb04 <sync_window>
 800c59a:	4603      	mov	r3, r0
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d001      	beq.n	800c5a4 <dir_next+0x142>
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	e030      	b.n	800c606 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c5a4:	693b      	ldr	r3, [r7, #16]
 800c5a6:	3301      	adds	r3, #1
 800c5a8:	613b      	str	r3, [r7, #16]
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5ae:	1c5a      	adds	r2, r3, #1
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	635a      	str	r2, [r3, #52]	; 0x34
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	895b      	ldrh	r3, [r3, #10]
 800c5b8:	461a      	mov	r2, r3
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d3e6      	bcc.n	800c58e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	1ad2      	subs	r2, r2, r3
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	697a      	ldr	r2, [r7, #20]
 800c5d0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c5d2:	6979      	ldr	r1, [r7, #20]
 800c5d4:	68f8      	ldr	r0, [r7, #12]
 800c5d6:	f7ff fb77 	bl	800bcc8 <clust2sect>
 800c5da:	4602      	mov	r2, r0
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	68ba      	ldr	r2, [r7, #8]
 800c5e4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	899b      	ldrh	r3, [r3, #12]
 800c5f0:	461a      	mov	r2, r3
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	fbb3 f0f2 	udiv	r0, r3, r2
 800c5f8:	fb02 f200 	mul.w	r2, r2, r0
 800c5fc:	1a9b      	subs	r3, r3, r2
 800c5fe:	18ca      	adds	r2, r1, r3
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c604:	2300      	movs	r3, #0
}
 800c606:	4618      	mov	r0, r3
 800c608:	3718      	adds	r7, #24
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}

0800c60e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c60e:	b580      	push	{r7, lr}
 800c610:	b086      	sub	sp, #24
 800c612:	af00      	add	r7, sp, #0
 800c614:	6078      	str	r0, [r7, #4]
 800c616:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c61e:	2100      	movs	r1, #0
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f7ff fe95 	bl	800c350 <dir_sdi>
 800c626:	4603      	mov	r3, r0
 800c628:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c62a:	7dfb      	ldrb	r3, [r7, #23]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d12b      	bne.n	800c688 <dir_alloc+0x7a>
		n = 0;
 800c630:	2300      	movs	r3, #0
 800c632:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	69db      	ldr	r3, [r3, #28]
 800c638:	4619      	mov	r1, r3
 800c63a:	68f8      	ldr	r0, [r7, #12]
 800c63c:	f7ff faa6 	bl	800bb8c <move_window>
 800c640:	4603      	mov	r3, r0
 800c642:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c644:	7dfb      	ldrb	r3, [r7, #23]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d11d      	bne.n	800c686 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6a1b      	ldr	r3, [r3, #32]
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	2be5      	cmp	r3, #229	; 0xe5
 800c652:	d004      	beq.n	800c65e <dir_alloc+0x50>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	6a1b      	ldr	r3, [r3, #32]
 800c658:	781b      	ldrb	r3, [r3, #0]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d107      	bne.n	800c66e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	3301      	adds	r3, #1
 800c662:	613b      	str	r3, [r7, #16]
 800c664:	693a      	ldr	r2, [r7, #16]
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	429a      	cmp	r2, r3
 800c66a:	d102      	bne.n	800c672 <dir_alloc+0x64>
 800c66c:	e00c      	b.n	800c688 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c66e:	2300      	movs	r3, #0
 800c670:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c672:	2101      	movs	r1, #1
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f7ff fef4 	bl	800c462 <dir_next>
 800c67a:	4603      	mov	r3, r0
 800c67c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c67e:	7dfb      	ldrb	r3, [r7, #23]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d0d7      	beq.n	800c634 <dir_alloc+0x26>
 800c684:	e000      	b.n	800c688 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c686:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c688:	7dfb      	ldrb	r3, [r7, #23]
 800c68a:	2b04      	cmp	r3, #4
 800c68c:	d101      	bne.n	800c692 <dir_alloc+0x84>
 800c68e:	2307      	movs	r3, #7
 800c690:	75fb      	strb	r3, [r7, #23]
	return res;
 800c692:	7dfb      	ldrb	r3, [r7, #23]
}
 800c694:	4618      	mov	r0, r3
 800c696:	3718      	adds	r7, #24
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b084      	sub	sp, #16
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	331a      	adds	r3, #26
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f7fe ffbe 	bl	800b62c <ld_word>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	2b03      	cmp	r3, #3
 800c6ba:	d109      	bne.n	800c6d0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	3314      	adds	r3, #20
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f7fe ffb3 	bl	800b62c <ld_word>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	041b      	lsls	r3, r3, #16
 800c6ca:	68fa      	ldr	r2, [r7, #12]
 800c6cc:	4313      	orrs	r3, r2
 800c6ce:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3710      	adds	r7, #16
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}

0800c6da <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c6da:	b580      	push	{r7, lr}
 800c6dc:	b084      	sub	sp, #16
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	60f8      	str	r0, [r7, #12]
 800c6e2:	60b9      	str	r1, [r7, #8]
 800c6e4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	331a      	adds	r3, #26
 800c6ea:	687a      	ldr	r2, [r7, #4]
 800c6ec:	b292      	uxth	r2, r2
 800c6ee:	4611      	mov	r1, r2
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f7fe ffd6 	bl	800b6a2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	781b      	ldrb	r3, [r3, #0]
 800c6fa:	2b03      	cmp	r3, #3
 800c6fc:	d109      	bne.n	800c712 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	f103 0214 	add.w	r2, r3, #20
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	0c1b      	lsrs	r3, r3, #16
 800c708:	b29b      	uxth	r3, r3
 800c70a:	4619      	mov	r1, r3
 800c70c:	4610      	mov	r0, r2
 800c70e:	f7fe ffc8 	bl	800b6a2 <st_word>
	}
}
 800c712:	bf00      	nop
 800c714:	3710      	adds	r7, #16
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
	...

0800c71c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c71c:	b590      	push	{r4, r7, lr}
 800c71e:	b087      	sub	sp, #28
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
 800c724:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	331a      	adds	r3, #26
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7fe ff7e 	bl	800b62c <ld_word>
 800c730:	4603      	mov	r3, r0
 800c732:	2b00      	cmp	r3, #0
 800c734:	d001      	beq.n	800c73a <cmp_lfn+0x1e>
 800c736:	2300      	movs	r3, #0
 800c738:	e059      	b.n	800c7ee <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c742:	1e5a      	subs	r2, r3, #1
 800c744:	4613      	mov	r3, r2
 800c746:	005b      	lsls	r3, r3, #1
 800c748:	4413      	add	r3, r2
 800c74a:	009b      	lsls	r3, r3, #2
 800c74c:	4413      	add	r3, r2
 800c74e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c750:	2301      	movs	r3, #1
 800c752:	81fb      	strh	r3, [r7, #14]
 800c754:	2300      	movs	r3, #0
 800c756:	613b      	str	r3, [r7, #16]
 800c758:	e033      	b.n	800c7c2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c75a:	4a27      	ldr	r2, [pc, #156]	; (800c7f8 <cmp_lfn+0xdc>)
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	4413      	add	r3, r2
 800c760:	781b      	ldrb	r3, [r3, #0]
 800c762:	461a      	mov	r2, r3
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	4413      	add	r3, r2
 800c768:	4618      	mov	r0, r3
 800c76a:	f7fe ff5f 	bl	800b62c <ld_word>
 800c76e:	4603      	mov	r3, r0
 800c770:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c772:	89fb      	ldrh	r3, [r7, #14]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d01a      	beq.n	800c7ae <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	2b1f      	cmp	r3, #31
 800c77c:	d812      	bhi.n	800c7a4 <cmp_lfn+0x88>
 800c77e:	89bb      	ldrh	r3, [r7, #12]
 800c780:	4618      	mov	r0, r3
 800c782:	f001 fd79 	bl	800e278 <ff_wtoupper>
 800c786:	4603      	mov	r3, r0
 800c788:	461c      	mov	r4, r3
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	1c5a      	adds	r2, r3, #1
 800c78e:	617a      	str	r2, [r7, #20]
 800c790:	005b      	lsls	r3, r3, #1
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	4413      	add	r3, r2
 800c796:	881b      	ldrh	r3, [r3, #0]
 800c798:	4618      	mov	r0, r3
 800c79a:	f001 fd6d 	bl	800e278 <ff_wtoupper>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	429c      	cmp	r4, r3
 800c7a2:	d001      	beq.n	800c7a8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	e022      	b.n	800c7ee <cmp_lfn+0xd2>
			}
			wc = uc;
 800c7a8:	89bb      	ldrh	r3, [r7, #12]
 800c7aa:	81fb      	strh	r3, [r7, #14]
 800c7ac:	e006      	b.n	800c7bc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c7ae:	89bb      	ldrh	r3, [r7, #12]
 800c7b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d001      	beq.n	800c7bc <cmp_lfn+0xa0>
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	e018      	b.n	800c7ee <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	3301      	adds	r3, #1
 800c7c0:	613b      	str	r3, [r7, #16]
 800c7c2:	693b      	ldr	r3, [r7, #16]
 800c7c4:	2b0c      	cmp	r3, #12
 800c7c6:	d9c8      	bls.n	800c75a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d00b      	beq.n	800c7ec <cmp_lfn+0xd0>
 800c7d4:	89fb      	ldrh	r3, [r7, #14]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d008      	beq.n	800c7ec <cmp_lfn+0xd0>
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	005b      	lsls	r3, r3, #1
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	4413      	add	r3, r2
 800c7e2:	881b      	ldrh	r3, [r3, #0]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d001      	beq.n	800c7ec <cmp_lfn+0xd0>
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	e000      	b.n	800c7ee <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c7ec:	2301      	movs	r3, #1
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	371c      	adds	r7, #28
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd90      	pop	{r4, r7, pc}
 800c7f6:	bf00      	nop
 800c7f8:	08015e60 	.word	0x08015e60

0800c7fc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b088      	sub	sp, #32
 800c800:	af00      	add	r7, sp, #0
 800c802:	60f8      	str	r0, [r7, #12]
 800c804:	60b9      	str	r1, [r7, #8]
 800c806:	4611      	mov	r1, r2
 800c808:	461a      	mov	r2, r3
 800c80a:	460b      	mov	r3, r1
 800c80c:	71fb      	strb	r3, [r7, #7]
 800c80e:	4613      	mov	r3, r2
 800c810:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	330d      	adds	r3, #13
 800c816:	79ba      	ldrb	r2, [r7, #6]
 800c818:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	330b      	adds	r3, #11
 800c81e:	220f      	movs	r2, #15
 800c820:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	330c      	adds	r3, #12
 800c826:	2200      	movs	r2, #0
 800c828:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	331a      	adds	r3, #26
 800c82e:	2100      	movs	r1, #0
 800c830:	4618      	mov	r0, r3
 800c832:	f7fe ff36 	bl	800b6a2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c836:	79fb      	ldrb	r3, [r7, #7]
 800c838:	1e5a      	subs	r2, r3, #1
 800c83a:	4613      	mov	r3, r2
 800c83c:	005b      	lsls	r3, r3, #1
 800c83e:	4413      	add	r3, r2
 800c840:	009b      	lsls	r3, r3, #2
 800c842:	4413      	add	r3, r2
 800c844:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c846:	2300      	movs	r3, #0
 800c848:	82fb      	strh	r3, [r7, #22]
 800c84a:	2300      	movs	r3, #0
 800c84c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c84e:	8afb      	ldrh	r3, [r7, #22]
 800c850:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c854:	4293      	cmp	r3, r2
 800c856:	d007      	beq.n	800c868 <put_lfn+0x6c>
 800c858:	69fb      	ldr	r3, [r7, #28]
 800c85a:	1c5a      	adds	r2, r3, #1
 800c85c:	61fa      	str	r2, [r7, #28]
 800c85e:	005b      	lsls	r3, r3, #1
 800c860:	68fa      	ldr	r2, [r7, #12]
 800c862:	4413      	add	r3, r2
 800c864:	881b      	ldrh	r3, [r3, #0]
 800c866:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c868:	4a17      	ldr	r2, [pc, #92]	; (800c8c8 <put_lfn+0xcc>)
 800c86a:	69bb      	ldr	r3, [r7, #24]
 800c86c:	4413      	add	r3, r2
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	461a      	mov	r2, r3
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	4413      	add	r3, r2
 800c876:	8afa      	ldrh	r2, [r7, #22]
 800c878:	4611      	mov	r1, r2
 800c87a:	4618      	mov	r0, r3
 800c87c:	f7fe ff11 	bl	800b6a2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c880:	8afb      	ldrh	r3, [r7, #22]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d102      	bne.n	800c88c <put_lfn+0x90>
 800c886:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c88a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c88c:	69bb      	ldr	r3, [r7, #24]
 800c88e:	3301      	adds	r3, #1
 800c890:	61bb      	str	r3, [r7, #24]
 800c892:	69bb      	ldr	r3, [r7, #24]
 800c894:	2b0c      	cmp	r3, #12
 800c896:	d9da      	bls.n	800c84e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c898:	8afb      	ldrh	r3, [r7, #22]
 800c89a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c89e:	4293      	cmp	r3, r2
 800c8a0:	d006      	beq.n	800c8b0 <put_lfn+0xb4>
 800c8a2:	69fb      	ldr	r3, [r7, #28]
 800c8a4:	005b      	lsls	r3, r3, #1
 800c8a6:	68fa      	ldr	r2, [r7, #12]
 800c8a8:	4413      	add	r3, r2
 800c8aa:	881b      	ldrh	r3, [r3, #0]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d103      	bne.n	800c8b8 <put_lfn+0xbc>
 800c8b0:	79fb      	ldrb	r3, [r7, #7]
 800c8b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8b6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	79fa      	ldrb	r2, [r7, #7]
 800c8bc:	701a      	strb	r2, [r3, #0]
}
 800c8be:	bf00      	nop
 800c8c0:	3720      	adds	r7, #32
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	08015e60 	.word	0x08015e60

0800c8cc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b08c      	sub	sp, #48	; 0x30
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	60f8      	str	r0, [r7, #12]
 800c8d4:	60b9      	str	r1, [r7, #8]
 800c8d6:	607a      	str	r2, [r7, #4]
 800c8d8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c8da:	220b      	movs	r2, #11
 800c8dc:	68b9      	ldr	r1, [r7, #8]
 800c8de:	68f8      	ldr	r0, [r7, #12]
 800c8e0:	f7fe ff26 	bl	800b730 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	2b05      	cmp	r3, #5
 800c8e8:	d92b      	bls.n	800c942 <gen_numname+0x76>
		sr = seq;
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c8ee:	e022      	b.n	800c936 <gen_numname+0x6a>
			wc = *lfn++;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	1c9a      	adds	r2, r3, #2
 800c8f4:	607a      	str	r2, [r7, #4]
 800c8f6:	881b      	ldrh	r3, [r3, #0]
 800c8f8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8fe:	e017      	b.n	800c930 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800c900:	69fb      	ldr	r3, [r7, #28]
 800c902:	005a      	lsls	r2, r3, #1
 800c904:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c906:	f003 0301 	and.w	r3, r3, #1
 800c90a:	4413      	add	r3, r2
 800c90c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c90e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c910:	085b      	lsrs	r3, r3, #1
 800c912:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c914:	69fb      	ldr	r3, [r7, #28]
 800c916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d005      	beq.n	800c92a <gen_numname+0x5e>
 800c91e:	69fb      	ldr	r3, [r7, #28]
 800c920:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800c924:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800c928:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c92c:	3301      	adds	r3, #1
 800c92e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c932:	2b0f      	cmp	r3, #15
 800c934:	d9e4      	bls.n	800c900 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	881b      	ldrh	r3, [r3, #0]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d1d8      	bne.n	800c8f0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c93e:	69fb      	ldr	r3, [r7, #28]
 800c940:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c942:	2307      	movs	r3, #7
 800c944:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	b2db      	uxtb	r3, r3
 800c94a:	f003 030f 	and.w	r3, r3, #15
 800c94e:	b2db      	uxtb	r3, r3
 800c950:	3330      	adds	r3, #48	; 0x30
 800c952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800c956:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c95a:	2b39      	cmp	r3, #57	; 0x39
 800c95c:	d904      	bls.n	800c968 <gen_numname+0x9c>
 800c95e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c962:	3307      	adds	r3, #7
 800c964:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800c968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c96a:	1e5a      	subs	r2, r3, #1
 800c96c:	62ba      	str	r2, [r7, #40]	; 0x28
 800c96e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c972:	4413      	add	r3, r2
 800c974:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c978:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	091b      	lsrs	r3, r3, #4
 800c980:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d1de      	bne.n	800c946 <gen_numname+0x7a>
	ns[i] = '~';
 800c988:	f107 0214 	add.w	r2, r7, #20
 800c98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c98e:	4413      	add	r3, r2
 800c990:	227e      	movs	r2, #126	; 0x7e
 800c992:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c994:	2300      	movs	r3, #0
 800c996:	627b      	str	r3, [r7, #36]	; 0x24
 800c998:	e002      	b.n	800c9a0 <gen_numname+0xd4>
 800c99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c99c:	3301      	adds	r3, #1
 800c99e:	627b      	str	r3, [r7, #36]	; 0x24
 800c9a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d205      	bcs.n	800c9b4 <gen_numname+0xe8>
 800c9a8:	68fa      	ldr	r2, [r7, #12]
 800c9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ac:	4413      	add	r3, r2
 800c9ae:	781b      	ldrb	r3, [r3, #0]
 800c9b0:	2b20      	cmp	r3, #32
 800c9b2:	d1f2      	bne.n	800c99a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b6:	2b07      	cmp	r3, #7
 800c9b8:	d808      	bhi.n	800c9cc <gen_numname+0x100>
 800c9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9bc:	1c5a      	adds	r2, r3, #1
 800c9be:	62ba      	str	r2, [r7, #40]	; 0x28
 800c9c0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c9c4:	4413      	add	r3, r2
 800c9c6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c9ca:	e000      	b.n	800c9ce <gen_numname+0x102>
 800c9cc:	2120      	movs	r1, #32
 800c9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d0:	1c5a      	adds	r2, r3, #1
 800c9d2:	627a      	str	r2, [r7, #36]	; 0x24
 800c9d4:	68fa      	ldr	r2, [r7, #12]
 800c9d6:	4413      	add	r3, r2
 800c9d8:	460a      	mov	r2, r1
 800c9da:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9de:	2b07      	cmp	r3, #7
 800c9e0:	d9e8      	bls.n	800c9b4 <gen_numname+0xe8>
}
 800c9e2:	bf00      	nop
 800c9e4:	bf00      	nop
 800c9e6:	3730      	adds	r7, #48	; 0x30
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}

0800c9ec <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b085      	sub	sp, #20
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c9f8:	230b      	movs	r3, #11
 800c9fa:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c9fc:	7bfb      	ldrb	r3, [r7, #15]
 800c9fe:	b2da      	uxtb	r2, r3
 800ca00:	0852      	lsrs	r2, r2, #1
 800ca02:	01db      	lsls	r3, r3, #7
 800ca04:	4313      	orrs	r3, r2
 800ca06:	b2da      	uxtb	r2, r3
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	1c59      	adds	r1, r3, #1
 800ca0c:	6079      	str	r1, [r7, #4]
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	4413      	add	r3, r2
 800ca12:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	3b01      	subs	r3, #1
 800ca18:	60bb      	str	r3, [r7, #8]
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d1ed      	bne.n	800c9fc <sum_sfn+0x10>
	return sum;
 800ca20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3714      	adds	r7, #20
 800ca26:	46bd      	mov	sp, r7
 800ca28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2c:	4770      	bx	lr

0800ca2e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ca2e:	b580      	push	{r7, lr}
 800ca30:	b086      	sub	sp, #24
 800ca32:	af00      	add	r7, sp, #0
 800ca34:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ca3c:	2100      	movs	r1, #0
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f7ff fc86 	bl	800c350 <dir_sdi>
 800ca44:	4603      	mov	r3, r0
 800ca46:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ca48:	7dfb      	ldrb	r3, [r7, #23]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d001      	beq.n	800ca52 <dir_find+0x24>
 800ca4e:	7dfb      	ldrb	r3, [r7, #23]
 800ca50:	e0a9      	b.n	800cba6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ca52:	23ff      	movs	r3, #255	; 0xff
 800ca54:	753b      	strb	r3, [r7, #20]
 800ca56:	7d3b      	ldrb	r3, [r7, #20]
 800ca58:	757b      	strb	r3, [r7, #21]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ca60:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	69db      	ldr	r3, [r3, #28]
 800ca66:	4619      	mov	r1, r3
 800ca68:	6938      	ldr	r0, [r7, #16]
 800ca6a:	f7ff f88f 	bl	800bb8c <move_window>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ca72:	7dfb      	ldrb	r3, [r7, #23]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	f040 8090 	bne.w	800cb9a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6a1b      	ldr	r3, [r3, #32]
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ca82:	7dbb      	ldrb	r3, [r7, #22]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d102      	bne.n	800ca8e <dir_find+0x60>
 800ca88:	2304      	movs	r3, #4
 800ca8a:	75fb      	strb	r3, [r7, #23]
 800ca8c:	e08a      	b.n	800cba4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6a1b      	ldr	r3, [r3, #32]
 800ca92:	330b      	adds	r3, #11
 800ca94:	781b      	ldrb	r3, [r3, #0]
 800ca96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca9a:	73fb      	strb	r3, [r7, #15]
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	7bfa      	ldrb	r2, [r7, #15]
 800caa0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800caa2:	7dbb      	ldrb	r3, [r7, #22]
 800caa4:	2be5      	cmp	r3, #229	; 0xe5
 800caa6:	d007      	beq.n	800cab8 <dir_find+0x8a>
 800caa8:	7bfb      	ldrb	r3, [r7, #15]
 800caaa:	f003 0308 	and.w	r3, r3, #8
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d009      	beq.n	800cac6 <dir_find+0x98>
 800cab2:	7bfb      	ldrb	r3, [r7, #15]
 800cab4:	2b0f      	cmp	r3, #15
 800cab6:	d006      	beq.n	800cac6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cab8:	23ff      	movs	r3, #255	; 0xff
 800caba:	757b      	strb	r3, [r7, #21]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f04f 32ff 	mov.w	r2, #4294967295
 800cac2:	631a      	str	r2, [r3, #48]	; 0x30
 800cac4:	e05e      	b.n	800cb84 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800cac6:	7bfb      	ldrb	r3, [r7, #15]
 800cac8:	2b0f      	cmp	r3, #15
 800caca:	d136      	bne.n	800cb3a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d154      	bne.n	800cb84 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800cada:	7dbb      	ldrb	r3, [r7, #22]
 800cadc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d00d      	beq.n	800cb00 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6a1b      	ldr	r3, [r3, #32]
 800cae8:	7b5b      	ldrb	r3, [r3, #13]
 800caea:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800caec:	7dbb      	ldrb	r3, [r7, #22]
 800caee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800caf2:	75bb      	strb	r3, [r7, #22]
 800caf4:	7dbb      	ldrb	r3, [r7, #22]
 800caf6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	695a      	ldr	r2, [r3, #20]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cb00:	7dba      	ldrb	r2, [r7, #22]
 800cb02:	7d7b      	ldrb	r3, [r7, #21]
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d115      	bne.n	800cb34 <dir_find+0x106>
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6a1b      	ldr	r3, [r3, #32]
 800cb0c:	330d      	adds	r3, #13
 800cb0e:	781b      	ldrb	r3, [r3, #0]
 800cb10:	7d3a      	ldrb	r2, [r7, #20]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d10e      	bne.n	800cb34 <dir_find+0x106>
 800cb16:	693b      	ldr	r3, [r7, #16]
 800cb18:	691a      	ldr	r2, [r3, #16]
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6a1b      	ldr	r3, [r3, #32]
 800cb1e:	4619      	mov	r1, r3
 800cb20:	4610      	mov	r0, r2
 800cb22:	f7ff fdfb 	bl	800c71c <cmp_lfn>
 800cb26:	4603      	mov	r3, r0
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d003      	beq.n	800cb34 <dir_find+0x106>
 800cb2c:	7d7b      	ldrb	r3, [r7, #21]
 800cb2e:	3b01      	subs	r3, #1
 800cb30:	b2db      	uxtb	r3, r3
 800cb32:	e000      	b.n	800cb36 <dir_find+0x108>
 800cb34:	23ff      	movs	r3, #255	; 0xff
 800cb36:	757b      	strb	r3, [r7, #21]
 800cb38:	e024      	b.n	800cb84 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cb3a:	7d7b      	ldrb	r3, [r7, #21]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d109      	bne.n	800cb54 <dir_find+0x126>
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6a1b      	ldr	r3, [r3, #32]
 800cb44:	4618      	mov	r0, r3
 800cb46:	f7ff ff51 	bl	800c9ec <sum_sfn>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	461a      	mov	r2, r3
 800cb4e:	7d3b      	ldrb	r3, [r7, #20]
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d024      	beq.n	800cb9e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cb5a:	f003 0301 	and.w	r3, r3, #1
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d10a      	bne.n	800cb78 <dir_find+0x14a>
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6a18      	ldr	r0, [r3, #32]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	3324      	adds	r3, #36	; 0x24
 800cb6a:	220b      	movs	r2, #11
 800cb6c:	4619      	mov	r1, r3
 800cb6e:	f7fe fe1b 	bl	800b7a8 <mem_cmp>
 800cb72:	4603      	mov	r3, r0
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d014      	beq.n	800cba2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cb78:	23ff      	movs	r3, #255	; 0xff
 800cb7a:	757b      	strb	r3, [r7, #21]
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f04f 32ff 	mov.w	r2, #4294967295
 800cb82:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cb84:	2100      	movs	r1, #0
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f7ff fc6b 	bl	800c462 <dir_next>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cb90:	7dfb      	ldrb	r3, [r7, #23]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	f43f af65 	beq.w	800ca62 <dir_find+0x34>
 800cb98:	e004      	b.n	800cba4 <dir_find+0x176>
		if (res != FR_OK) break;
 800cb9a:	bf00      	nop
 800cb9c:	e002      	b.n	800cba4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cb9e:	bf00      	nop
 800cba0:	e000      	b.n	800cba4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cba2:	bf00      	nop

	return res;
 800cba4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3718      	adds	r7, #24
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}
	...

0800cbb0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b08c      	sub	sp, #48	; 0x30
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cbc4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d001      	beq.n	800cbd0 <dir_register+0x20>
 800cbcc:	2306      	movs	r3, #6
 800cbce:	e0e0      	b.n	800cd92 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	627b      	str	r3, [r7, #36]	; 0x24
 800cbd4:	e002      	b.n	800cbdc <dir_register+0x2c>
 800cbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd8:	3301      	adds	r3, #1
 800cbda:	627b      	str	r3, [r7, #36]	; 0x24
 800cbdc:	69fb      	ldr	r3, [r7, #28]
 800cbde:	691a      	ldr	r2, [r3, #16]
 800cbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe2:	005b      	lsls	r3, r3, #1
 800cbe4:	4413      	add	r3, r2
 800cbe6:	881b      	ldrh	r3, [r3, #0]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d1f4      	bne.n	800cbd6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800cbf2:	f107 030c 	add.w	r3, r7, #12
 800cbf6:	220c      	movs	r2, #12
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f7fe fd99 	bl	800b730 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800cbfe:	7dfb      	ldrb	r3, [r7, #23]
 800cc00:	f003 0301 	and.w	r3, r3, #1
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d032      	beq.n	800cc6e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2240      	movs	r2, #64	; 0x40
 800cc0c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800cc10:	2301      	movs	r3, #1
 800cc12:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc14:	e016      	b.n	800cc44 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800cc1c:	69fb      	ldr	r3, [r7, #28]
 800cc1e:	691a      	ldr	r2, [r3, #16]
 800cc20:	f107 010c 	add.w	r1, r7, #12
 800cc24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc26:	f7ff fe51 	bl	800c8cc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f7ff feff 	bl	800ca2e <dir_find>
 800cc30:	4603      	mov	r3, r0
 800cc32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800cc36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d106      	bne.n	800cc4c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800cc3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc40:	3301      	adds	r3, #1
 800cc42:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc46:	2b63      	cmp	r3, #99	; 0x63
 800cc48:	d9e5      	bls.n	800cc16 <dir_register+0x66>
 800cc4a:	e000      	b.n	800cc4e <dir_register+0x9e>
			if (res != FR_OK) break;
 800cc4c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800cc4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc50:	2b64      	cmp	r3, #100	; 0x64
 800cc52:	d101      	bne.n	800cc58 <dir_register+0xa8>
 800cc54:	2307      	movs	r3, #7
 800cc56:	e09c      	b.n	800cd92 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800cc58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cc5c:	2b04      	cmp	r3, #4
 800cc5e:	d002      	beq.n	800cc66 <dir_register+0xb6>
 800cc60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cc64:	e095      	b.n	800cd92 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800cc66:	7dfa      	ldrb	r2, [r7, #23]
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800cc6e:	7dfb      	ldrb	r3, [r7, #23]
 800cc70:	f003 0302 	and.w	r3, r3, #2
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d007      	beq.n	800cc88 <dir_register+0xd8>
 800cc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc7a:	330c      	adds	r3, #12
 800cc7c:	4a47      	ldr	r2, [pc, #284]	; (800cd9c <dir_register+0x1ec>)
 800cc7e:	fba2 2303 	umull	r2, r3, r2, r3
 800cc82:	089b      	lsrs	r3, r3, #2
 800cc84:	3301      	adds	r3, #1
 800cc86:	e000      	b.n	800cc8a <dir_register+0xda>
 800cc88:	2301      	movs	r3, #1
 800cc8a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800cc8c:	6a39      	ldr	r1, [r7, #32]
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f7ff fcbd 	bl	800c60e <dir_alloc>
 800cc94:	4603      	mov	r3, r0
 800cc96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800cc9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d148      	bne.n	800cd34 <dir_register+0x184>
 800cca2:	6a3b      	ldr	r3, [r7, #32]
 800cca4:	3b01      	subs	r3, #1
 800cca6:	623b      	str	r3, [r7, #32]
 800cca8:	6a3b      	ldr	r3, [r7, #32]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d042      	beq.n	800cd34 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	695a      	ldr	r2, [r3, #20]
 800ccb2:	6a3b      	ldr	r3, [r7, #32]
 800ccb4:	015b      	lsls	r3, r3, #5
 800ccb6:	1ad3      	subs	r3, r2, r3
 800ccb8:	4619      	mov	r1, r3
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f7ff fb48 	bl	800c350 <dir_sdi>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ccc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d132      	bne.n	800cd34 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	3324      	adds	r3, #36	; 0x24
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f7ff fe8a 	bl	800c9ec <sum_sfn>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	69db      	ldr	r3, [r3, #28]
 800cce0:	4619      	mov	r1, r3
 800cce2:	69f8      	ldr	r0, [r7, #28]
 800cce4:	f7fe ff52 	bl	800bb8c <move_window>
 800cce8:	4603      	mov	r3, r0
 800ccea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800ccee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d11d      	bne.n	800cd32 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ccf6:	69fb      	ldr	r3, [r7, #28]
 800ccf8:	6918      	ldr	r0, [r3, #16]
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6a19      	ldr	r1, [r3, #32]
 800ccfe:	6a3b      	ldr	r3, [r7, #32]
 800cd00:	b2da      	uxtb	r2, r3
 800cd02:	7efb      	ldrb	r3, [r7, #27]
 800cd04:	f7ff fd7a 	bl	800c7fc <put_lfn>
				fs->wflag = 1;
 800cd08:	69fb      	ldr	r3, [r7, #28]
 800cd0a:	2201      	movs	r2, #1
 800cd0c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800cd0e:	2100      	movs	r1, #0
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f7ff fba6 	bl	800c462 <dir_next>
 800cd16:	4603      	mov	r3, r0
 800cd18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800cd1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d107      	bne.n	800cd34 <dir_register+0x184>
 800cd24:	6a3b      	ldr	r3, [r7, #32]
 800cd26:	3b01      	subs	r3, #1
 800cd28:	623b      	str	r3, [r7, #32]
 800cd2a:	6a3b      	ldr	r3, [r7, #32]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d1d5      	bne.n	800ccdc <dir_register+0x12c>
 800cd30:	e000      	b.n	800cd34 <dir_register+0x184>
				if (res != FR_OK) break;
 800cd32:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800cd34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d128      	bne.n	800cd8e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	69db      	ldr	r3, [r3, #28]
 800cd40:	4619      	mov	r1, r3
 800cd42:	69f8      	ldr	r0, [r7, #28]
 800cd44:	f7fe ff22 	bl	800bb8c <move_window>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800cd4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d11b      	bne.n	800cd8e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6a1b      	ldr	r3, [r3, #32]
 800cd5a:	2220      	movs	r2, #32
 800cd5c:	2100      	movs	r1, #0
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f7fe fd07 	bl	800b772 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6a18      	ldr	r0, [r3, #32]
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	3324      	adds	r3, #36	; 0x24
 800cd6c:	220b      	movs	r2, #11
 800cd6e:	4619      	mov	r1, r3
 800cd70:	f7fe fcde 	bl	800b730 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6a1b      	ldr	r3, [r3, #32]
 800cd7e:	330c      	adds	r3, #12
 800cd80:	f002 0218 	and.w	r2, r2, #24
 800cd84:	b2d2      	uxtb	r2, r2
 800cd86:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800cd88:	69fb      	ldr	r3, [r7, #28]
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800cd8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	3730      	adds	r7, #48	; 0x30
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}
 800cd9a:	bf00      	nop
 800cd9c:	4ec4ec4f 	.word	0x4ec4ec4f

0800cda0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b08a      	sub	sp, #40	; 0x28
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
 800cda8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	613b      	str	r3, [r7, #16]
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	691b      	ldr	r3, [r3, #16]
 800cdb6:	60fb      	str	r3, [r7, #12]
 800cdb8:	2300      	movs	r3, #0
 800cdba:	617b      	str	r3, [r7, #20]
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800cdc0:	69bb      	ldr	r3, [r7, #24]
 800cdc2:	1c5a      	adds	r2, r3, #1
 800cdc4:	61ba      	str	r2, [r7, #24]
 800cdc6:	693a      	ldr	r2, [r7, #16]
 800cdc8:	4413      	add	r3, r2
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800cdce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cdd0:	2b1f      	cmp	r3, #31
 800cdd2:	d940      	bls.n	800ce56 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800cdd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cdd6:	2b2f      	cmp	r3, #47	; 0x2f
 800cdd8:	d006      	beq.n	800cde8 <create_name+0x48>
 800cdda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cddc:	2b5c      	cmp	r3, #92	; 0x5c
 800cdde:	d110      	bne.n	800ce02 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800cde0:	e002      	b.n	800cde8 <create_name+0x48>
 800cde2:	69bb      	ldr	r3, [r7, #24]
 800cde4:	3301      	adds	r3, #1
 800cde6:	61bb      	str	r3, [r7, #24]
 800cde8:	693a      	ldr	r2, [r7, #16]
 800cdea:	69bb      	ldr	r3, [r7, #24]
 800cdec:	4413      	add	r3, r2
 800cdee:	781b      	ldrb	r3, [r3, #0]
 800cdf0:	2b2f      	cmp	r3, #47	; 0x2f
 800cdf2:	d0f6      	beq.n	800cde2 <create_name+0x42>
 800cdf4:	693a      	ldr	r2, [r7, #16]
 800cdf6:	69bb      	ldr	r3, [r7, #24]
 800cdf8:	4413      	add	r3, r2
 800cdfa:	781b      	ldrb	r3, [r3, #0]
 800cdfc:	2b5c      	cmp	r3, #92	; 0x5c
 800cdfe:	d0f0      	beq.n	800cde2 <create_name+0x42>
			break;
 800ce00:	e02a      	b.n	800ce58 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	2b1f      	cmp	r3, #31
 800ce06:	d901      	bls.n	800ce0c <create_name+0x6c>
 800ce08:	2306      	movs	r3, #6
 800ce0a:	e177      	b.n	800d0fc <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ce0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce0e:	b2db      	uxtb	r3, r3
 800ce10:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ce12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce14:	2101      	movs	r1, #1
 800ce16:	4618      	mov	r0, r3
 800ce18:	f001 f9f2 	bl	800e200 <ff_convert>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ce20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d101      	bne.n	800ce2a <create_name+0x8a>
 800ce26:	2306      	movs	r3, #6
 800ce28:	e168      	b.n	800d0fc <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ce2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce2c:	2b7f      	cmp	r3, #127	; 0x7f
 800ce2e:	d809      	bhi.n	800ce44 <create_name+0xa4>
 800ce30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce32:	4619      	mov	r1, r3
 800ce34:	48b3      	ldr	r0, [pc, #716]	; (800d104 <create_name+0x364>)
 800ce36:	f7fe fcde 	bl	800b7f6 <chk_chr>
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d001      	beq.n	800ce44 <create_name+0xa4>
 800ce40:	2306      	movs	r3, #6
 800ce42:	e15b      	b.n	800d0fc <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	1c5a      	adds	r2, r3, #1
 800ce48:	617a      	str	r2, [r7, #20]
 800ce4a:	005b      	lsls	r3, r3, #1
 800ce4c:	68fa      	ldr	r2, [r7, #12]
 800ce4e:	4413      	add	r3, r2
 800ce50:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ce52:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ce54:	e7b4      	b.n	800cdc0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ce56:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ce58:	693a      	ldr	r2, [r7, #16]
 800ce5a:	69bb      	ldr	r3, [r7, #24]
 800ce5c:	441a      	add	r2, r3
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ce62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce64:	2b1f      	cmp	r3, #31
 800ce66:	d801      	bhi.n	800ce6c <create_name+0xcc>
 800ce68:	2304      	movs	r3, #4
 800ce6a:	e000      	b.n	800ce6e <create_name+0xce>
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ce72:	e011      	b.n	800ce98 <create_name+0xf8>
		w = lfn[di - 1];
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ce7a:	3b01      	subs	r3, #1
 800ce7c:	005b      	lsls	r3, r3, #1
 800ce7e:	68fa      	ldr	r2, [r7, #12]
 800ce80:	4413      	add	r3, r2
 800ce82:	881b      	ldrh	r3, [r3, #0]
 800ce84:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800ce86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce88:	2b20      	cmp	r3, #32
 800ce8a:	d002      	beq.n	800ce92 <create_name+0xf2>
 800ce8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce8e:	2b2e      	cmp	r3, #46	; 0x2e
 800ce90:	d106      	bne.n	800cea0 <create_name+0x100>
		di--;
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	3b01      	subs	r3, #1
 800ce96:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d1ea      	bne.n	800ce74 <create_name+0xd4>
 800ce9e:	e000      	b.n	800cea2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800cea0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	005b      	lsls	r3, r3, #1
 800cea6:	68fa      	ldr	r2, [r7, #12]
 800cea8:	4413      	add	r3, r2
 800ceaa:	2200      	movs	r2, #0
 800ceac:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d101      	bne.n	800ceb8 <create_name+0x118>
 800ceb4:	2306      	movs	r3, #6
 800ceb6:	e121      	b.n	800d0fc <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	3324      	adds	r3, #36	; 0x24
 800cebc:	220b      	movs	r2, #11
 800cebe:	2120      	movs	r1, #32
 800cec0:	4618      	mov	r0, r3
 800cec2:	f7fe fc56 	bl	800b772 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800cec6:	2300      	movs	r3, #0
 800cec8:	61bb      	str	r3, [r7, #24]
 800ceca:	e002      	b.n	800ced2 <create_name+0x132>
 800cecc:	69bb      	ldr	r3, [r7, #24]
 800cece:	3301      	adds	r3, #1
 800ced0:	61bb      	str	r3, [r7, #24]
 800ced2:	69bb      	ldr	r3, [r7, #24]
 800ced4:	005b      	lsls	r3, r3, #1
 800ced6:	68fa      	ldr	r2, [r7, #12]
 800ced8:	4413      	add	r3, r2
 800ceda:	881b      	ldrh	r3, [r3, #0]
 800cedc:	2b20      	cmp	r3, #32
 800cede:	d0f5      	beq.n	800cecc <create_name+0x12c>
 800cee0:	69bb      	ldr	r3, [r7, #24]
 800cee2:	005b      	lsls	r3, r3, #1
 800cee4:	68fa      	ldr	r2, [r7, #12]
 800cee6:	4413      	add	r3, r2
 800cee8:	881b      	ldrh	r3, [r3, #0]
 800ceea:	2b2e      	cmp	r3, #46	; 0x2e
 800ceec:	d0ee      	beq.n	800cecc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ceee:	69bb      	ldr	r3, [r7, #24]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d009      	beq.n	800cf08 <create_name+0x168>
 800cef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cef8:	f043 0303 	orr.w	r3, r3, #3
 800cefc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800cf00:	e002      	b.n	800cf08 <create_name+0x168>
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	3b01      	subs	r3, #1
 800cf06:	617b      	str	r3, [r7, #20]
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d009      	beq.n	800cf22 <create_name+0x182>
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cf14:	3b01      	subs	r3, #1
 800cf16:	005b      	lsls	r3, r3, #1
 800cf18:	68fa      	ldr	r2, [r7, #12]
 800cf1a:	4413      	add	r3, r2
 800cf1c:	881b      	ldrh	r3, [r3, #0]
 800cf1e:	2b2e      	cmp	r3, #46	; 0x2e
 800cf20:	d1ef      	bne.n	800cf02 <create_name+0x162>

	i = b = 0; ni = 8;
 800cf22:	2300      	movs	r3, #0
 800cf24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cf28:	2300      	movs	r3, #0
 800cf2a:	623b      	str	r3, [r7, #32]
 800cf2c:	2308      	movs	r3, #8
 800cf2e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800cf30:	69bb      	ldr	r3, [r7, #24]
 800cf32:	1c5a      	adds	r2, r3, #1
 800cf34:	61ba      	str	r2, [r7, #24]
 800cf36:	005b      	lsls	r3, r3, #1
 800cf38:	68fa      	ldr	r2, [r7, #12]
 800cf3a:	4413      	add	r3, r2
 800cf3c:	881b      	ldrh	r3, [r3, #0]
 800cf3e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800cf40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	f000 8090 	beq.w	800d068 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800cf48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf4a:	2b20      	cmp	r3, #32
 800cf4c:	d006      	beq.n	800cf5c <create_name+0x1bc>
 800cf4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf50:	2b2e      	cmp	r3, #46	; 0x2e
 800cf52:	d10a      	bne.n	800cf6a <create_name+0x1ca>
 800cf54:	69ba      	ldr	r2, [r7, #24]
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	429a      	cmp	r2, r3
 800cf5a:	d006      	beq.n	800cf6a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800cf5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf60:	f043 0303 	orr.w	r3, r3, #3
 800cf64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf68:	e07d      	b.n	800d066 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800cf6a:	6a3a      	ldr	r2, [r7, #32]
 800cf6c:	69fb      	ldr	r3, [r7, #28]
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	d203      	bcs.n	800cf7a <create_name+0x1da>
 800cf72:	69ba      	ldr	r2, [r7, #24]
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d123      	bne.n	800cfc2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800cf7a:	69fb      	ldr	r3, [r7, #28]
 800cf7c:	2b0b      	cmp	r3, #11
 800cf7e:	d106      	bne.n	800cf8e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800cf80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf84:	f043 0303 	orr.w	r3, r3, #3
 800cf88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf8c:	e06f      	b.n	800d06e <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800cf8e:	69ba      	ldr	r2, [r7, #24]
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d005      	beq.n	800cfa2 <create_name+0x202>
 800cf96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf9a:	f043 0303 	orr.w	r3, r3, #3
 800cf9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800cfa2:	69ba      	ldr	r2, [r7, #24]
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d860      	bhi.n	800d06c <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	61bb      	str	r3, [r7, #24]
 800cfae:	2308      	movs	r3, #8
 800cfb0:	623b      	str	r3, [r7, #32]
 800cfb2:	230b      	movs	r3, #11
 800cfb4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800cfb6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cfba:	009b      	lsls	r3, r3, #2
 800cfbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cfc0:	e051      	b.n	800d066 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800cfc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cfc4:	2b7f      	cmp	r3, #127	; 0x7f
 800cfc6:	d914      	bls.n	800cff2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800cfc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cfca:	2100      	movs	r1, #0
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f001 f917 	bl	800e200 <ff_convert>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800cfd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d004      	beq.n	800cfe6 <create_name+0x246>
 800cfdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cfde:	3b80      	subs	r3, #128	; 0x80
 800cfe0:	4a49      	ldr	r2, [pc, #292]	; (800d108 <create_name+0x368>)
 800cfe2:	5cd3      	ldrb	r3, [r2, r3]
 800cfe4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800cfe6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfea:	f043 0302 	orr.w	r3, r3, #2
 800cfee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800cff2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d007      	beq.n	800d008 <create_name+0x268>
 800cff8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cffa:	4619      	mov	r1, r3
 800cffc:	4843      	ldr	r0, [pc, #268]	; (800d10c <create_name+0x36c>)
 800cffe:	f7fe fbfa 	bl	800b7f6 <chk_chr>
 800d002:	4603      	mov	r3, r0
 800d004:	2b00      	cmp	r3, #0
 800d006:	d008      	beq.n	800d01a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d008:	235f      	movs	r3, #95	; 0x5f
 800d00a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d00c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d010:	f043 0303 	orr.w	r3, r3, #3
 800d014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d018:	e01b      	b.n	800d052 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d01a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d01c:	2b40      	cmp	r3, #64	; 0x40
 800d01e:	d909      	bls.n	800d034 <create_name+0x294>
 800d020:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d022:	2b5a      	cmp	r3, #90	; 0x5a
 800d024:	d806      	bhi.n	800d034 <create_name+0x294>
					b |= 2;
 800d026:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d02a:	f043 0302 	orr.w	r3, r3, #2
 800d02e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d032:	e00e      	b.n	800d052 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d034:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d036:	2b60      	cmp	r3, #96	; 0x60
 800d038:	d90b      	bls.n	800d052 <create_name+0x2b2>
 800d03a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d03c:	2b7a      	cmp	r3, #122	; 0x7a
 800d03e:	d808      	bhi.n	800d052 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d040:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d044:	f043 0301 	orr.w	r3, r3, #1
 800d048:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d04c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d04e:	3b20      	subs	r3, #32
 800d050:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d052:	6a3b      	ldr	r3, [r7, #32]
 800d054:	1c5a      	adds	r2, r3, #1
 800d056:	623a      	str	r2, [r7, #32]
 800d058:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d05a:	b2d1      	uxtb	r1, r2
 800d05c:	687a      	ldr	r2, [r7, #4]
 800d05e:	4413      	add	r3, r2
 800d060:	460a      	mov	r2, r1
 800d062:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d066:	e763      	b.n	800cf30 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d068:	bf00      	nop
 800d06a:	e000      	b.n	800d06e <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800d06c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d074:	2be5      	cmp	r3, #229	; 0xe5
 800d076:	d103      	bne.n	800d080 <create_name+0x2e0>
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2205      	movs	r2, #5
 800d07c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800d080:	69fb      	ldr	r3, [r7, #28]
 800d082:	2b08      	cmp	r3, #8
 800d084:	d104      	bne.n	800d090 <create_name+0x2f0>
 800d086:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d08a:	009b      	lsls	r3, r3, #2
 800d08c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d090:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d094:	f003 030c 	and.w	r3, r3, #12
 800d098:	2b0c      	cmp	r3, #12
 800d09a:	d005      	beq.n	800d0a8 <create_name+0x308>
 800d09c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d0a0:	f003 0303 	and.w	r3, r3, #3
 800d0a4:	2b03      	cmp	r3, #3
 800d0a6:	d105      	bne.n	800d0b4 <create_name+0x314>
 800d0a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0ac:	f043 0302 	orr.w	r3, r3, #2
 800d0b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d0b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0b8:	f003 0302 	and.w	r3, r3, #2
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d117      	bne.n	800d0f0 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d0c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d0c4:	f003 0303 	and.w	r3, r3, #3
 800d0c8:	2b01      	cmp	r3, #1
 800d0ca:	d105      	bne.n	800d0d8 <create_name+0x338>
 800d0cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0d0:	f043 0310 	orr.w	r3, r3, #16
 800d0d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d0d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d0dc:	f003 030c 	and.w	r3, r3, #12
 800d0e0:	2b04      	cmp	r3, #4
 800d0e2:	d105      	bne.n	800d0f0 <create_name+0x350>
 800d0e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0e8:	f043 0308 	orr.w	r3, r3, #8
 800d0ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d0f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800d0fa:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3728      	adds	r7, #40	; 0x28
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}
 800d104:	08015d60 	.word	0x08015d60
 800d108:	08015de0 	.word	0x08015de0
 800d10c:	08015d6c 	.word	0x08015d6c

0800d110 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b086      	sub	sp, #24
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
 800d118:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d11e:	693b      	ldr	r3, [r7, #16]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d124:	e002      	b.n	800d12c <follow_path+0x1c>
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	3301      	adds	r3, #1
 800d12a:	603b      	str	r3, [r7, #0]
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	781b      	ldrb	r3, [r3, #0]
 800d130:	2b2f      	cmp	r3, #47	; 0x2f
 800d132:	d0f8      	beq.n	800d126 <follow_path+0x16>
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	781b      	ldrb	r3, [r3, #0]
 800d138:	2b5c      	cmp	r3, #92	; 0x5c
 800d13a:	d0f4      	beq.n	800d126 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d13c:	693b      	ldr	r3, [r7, #16]
 800d13e:	2200      	movs	r2, #0
 800d140:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	2b1f      	cmp	r3, #31
 800d148:	d80a      	bhi.n	800d160 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2280      	movs	r2, #128	; 0x80
 800d14e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d152:	2100      	movs	r1, #0
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f7ff f8fb 	bl	800c350 <dir_sdi>
 800d15a:	4603      	mov	r3, r0
 800d15c:	75fb      	strb	r3, [r7, #23]
 800d15e:	e048      	b.n	800d1f2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d160:	463b      	mov	r3, r7
 800d162:	4619      	mov	r1, r3
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f7ff fe1b 	bl	800cda0 <create_name>
 800d16a:	4603      	mov	r3, r0
 800d16c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d16e:	7dfb      	ldrb	r3, [r7, #23]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d139      	bne.n	800d1e8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	f7ff fc5a 	bl	800ca2e <dir_find>
 800d17a:	4603      	mov	r3, r0
 800d17c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d184:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d186:	7dfb      	ldrb	r3, [r7, #23]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d00a      	beq.n	800d1a2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d18c:	7dfb      	ldrb	r3, [r7, #23]
 800d18e:	2b04      	cmp	r3, #4
 800d190:	d12c      	bne.n	800d1ec <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d192:	7afb      	ldrb	r3, [r7, #11]
 800d194:	f003 0304 	and.w	r3, r3, #4
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d127      	bne.n	800d1ec <follow_path+0xdc>
 800d19c:	2305      	movs	r3, #5
 800d19e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d1a0:	e024      	b.n	800d1ec <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d1a2:	7afb      	ldrb	r3, [r7, #11]
 800d1a4:	f003 0304 	and.w	r3, r3, #4
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d121      	bne.n	800d1f0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d1ac:	693b      	ldr	r3, [r7, #16]
 800d1ae:	799b      	ldrb	r3, [r3, #6]
 800d1b0:	f003 0310 	and.w	r3, r3, #16
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d102      	bne.n	800d1be <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d1b8:	2305      	movs	r3, #5
 800d1ba:	75fb      	strb	r3, [r7, #23]
 800d1bc:	e019      	b.n	800d1f2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	695b      	ldr	r3, [r3, #20]
 800d1c8:	68fa      	ldr	r2, [r7, #12]
 800d1ca:	8992      	ldrh	r2, [r2, #12]
 800d1cc:	fbb3 f0f2 	udiv	r0, r3, r2
 800d1d0:	fb02 f200 	mul.w	r2, r2, r0
 800d1d4:	1a9b      	subs	r3, r3, r2
 800d1d6:	440b      	add	r3, r1
 800d1d8:	4619      	mov	r1, r3
 800d1da:	68f8      	ldr	r0, [r7, #12]
 800d1dc:	f7ff fa5e 	bl	800c69c <ld_clust>
 800d1e0:	4602      	mov	r2, r0
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d1e6:	e7bb      	b.n	800d160 <follow_path+0x50>
			if (res != FR_OK) break;
 800d1e8:	bf00      	nop
 800d1ea:	e002      	b.n	800d1f2 <follow_path+0xe2>
				break;
 800d1ec:	bf00      	nop
 800d1ee:	e000      	b.n	800d1f2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d1f0:	bf00      	nop
			}
		}
	}

	return res;
 800d1f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	3718      	adds	r7, #24
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd80      	pop	{r7, pc}

0800d1fc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d1fc:	b480      	push	{r7}
 800d1fe:	b087      	sub	sp, #28
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d204:	f04f 33ff 	mov.w	r3, #4294967295
 800d208:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d031      	beq.n	800d276 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	617b      	str	r3, [r7, #20]
 800d218:	e002      	b.n	800d220 <get_ldnumber+0x24>
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	3301      	adds	r3, #1
 800d21e:	617b      	str	r3, [r7, #20]
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	2b1f      	cmp	r3, #31
 800d226:	d903      	bls.n	800d230 <get_ldnumber+0x34>
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	781b      	ldrb	r3, [r3, #0]
 800d22c:	2b3a      	cmp	r3, #58	; 0x3a
 800d22e:	d1f4      	bne.n	800d21a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	781b      	ldrb	r3, [r3, #0]
 800d234:	2b3a      	cmp	r3, #58	; 0x3a
 800d236:	d11c      	bne.n	800d272 <get_ldnumber+0x76>
			tp = *path;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	1c5a      	adds	r2, r3, #1
 800d242:	60fa      	str	r2, [r7, #12]
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	3b30      	subs	r3, #48	; 0x30
 800d248:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	2b09      	cmp	r3, #9
 800d24e:	d80e      	bhi.n	800d26e <get_ldnumber+0x72>
 800d250:	68fa      	ldr	r2, [r7, #12]
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	429a      	cmp	r2, r3
 800d256:	d10a      	bne.n	800d26e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d107      	bne.n	800d26e <get_ldnumber+0x72>
					vol = (int)i;
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d262:	697b      	ldr	r3, [r7, #20]
 800d264:	3301      	adds	r3, #1
 800d266:	617b      	str	r3, [r7, #20]
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	697a      	ldr	r2, [r7, #20]
 800d26c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d26e:	693b      	ldr	r3, [r7, #16]
 800d270:	e002      	b.n	800d278 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d272:	2300      	movs	r3, #0
 800d274:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d276:	693b      	ldr	r3, [r7, #16]
}
 800d278:	4618      	mov	r0, r3
 800d27a:	371c      	adds	r7, #28
 800d27c:	46bd      	mov	sp, r7
 800d27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d282:	4770      	bx	lr

0800d284 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b082      	sub	sp, #8
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
 800d28c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2200      	movs	r2, #0
 800d292:	70da      	strb	r2, [r3, #3]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f04f 32ff 	mov.w	r2, #4294967295
 800d29a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d29c:	6839      	ldr	r1, [r7, #0]
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	f7fe fc74 	bl	800bb8c <move_window>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d001      	beq.n	800d2ae <check_fs+0x2a>
 800d2aa:	2304      	movs	r3, #4
 800d2ac:	e038      	b.n	800d320 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	3338      	adds	r3, #56	; 0x38
 800d2b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f7fe f9b8 	bl	800b62c <ld_word>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	461a      	mov	r2, r3
 800d2c0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d001      	beq.n	800d2cc <check_fs+0x48>
 800d2c8:	2303      	movs	r3, #3
 800d2ca:	e029      	b.n	800d320 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d2d2:	2be9      	cmp	r3, #233	; 0xe9
 800d2d4:	d009      	beq.n	800d2ea <check_fs+0x66>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d2dc:	2beb      	cmp	r3, #235	; 0xeb
 800d2de:	d11e      	bne.n	800d31e <check_fs+0x9a>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d2e6:	2b90      	cmp	r3, #144	; 0x90
 800d2e8:	d119      	bne.n	800d31e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	3338      	adds	r3, #56	; 0x38
 800d2ee:	3336      	adds	r3, #54	; 0x36
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f7fe f9b3 	bl	800b65c <ld_dword>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d2fc:	4a0a      	ldr	r2, [pc, #40]	; (800d328 <check_fs+0xa4>)
 800d2fe:	4293      	cmp	r3, r2
 800d300:	d101      	bne.n	800d306 <check_fs+0x82>
 800d302:	2300      	movs	r3, #0
 800d304:	e00c      	b.n	800d320 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	3338      	adds	r3, #56	; 0x38
 800d30a:	3352      	adds	r3, #82	; 0x52
 800d30c:	4618      	mov	r0, r3
 800d30e:	f7fe f9a5 	bl	800b65c <ld_dword>
 800d312:	4603      	mov	r3, r0
 800d314:	4a05      	ldr	r2, [pc, #20]	; (800d32c <check_fs+0xa8>)
 800d316:	4293      	cmp	r3, r2
 800d318:	d101      	bne.n	800d31e <check_fs+0x9a>
 800d31a:	2300      	movs	r3, #0
 800d31c:	e000      	b.n	800d320 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d31e:	2302      	movs	r3, #2
}
 800d320:	4618      	mov	r0, r3
 800d322:	3708      	adds	r7, #8
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}
 800d328:	00544146 	.word	0x00544146
 800d32c:	33544146 	.word	0x33544146

0800d330 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b096      	sub	sp, #88	; 0x58
 800d334:	af00      	add	r7, sp, #0
 800d336:	60f8      	str	r0, [r7, #12]
 800d338:	60b9      	str	r1, [r7, #8]
 800d33a:	4613      	mov	r3, r2
 800d33c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	2200      	movs	r2, #0
 800d342:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d344:	68f8      	ldr	r0, [r7, #12]
 800d346:	f7ff ff59 	bl	800d1fc <get_ldnumber>
 800d34a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d34c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d34e:	2b00      	cmp	r3, #0
 800d350:	da01      	bge.n	800d356 <find_volume+0x26>
 800d352:	230b      	movs	r3, #11
 800d354:	e268      	b.n	800d828 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d356:	4ab0      	ldr	r2, [pc, #704]	; (800d618 <find_volume+0x2e8>)
 800d358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d35a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d35e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d362:	2b00      	cmp	r3, #0
 800d364:	d101      	bne.n	800d36a <find_volume+0x3a>
 800d366:	230c      	movs	r3, #12
 800d368:	e25e      	b.n	800d828 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d36e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d370:	79fb      	ldrb	r3, [r7, #7]
 800d372:	f023 0301 	bic.w	r3, r3, #1
 800d376:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d37a:	781b      	ldrb	r3, [r3, #0]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d01a      	beq.n	800d3b6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d382:	785b      	ldrb	r3, [r3, #1]
 800d384:	4618      	mov	r0, r3
 800d386:	f7fe f8b3 	bl	800b4f0 <disk_status>
 800d38a:	4603      	mov	r3, r0
 800d38c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d390:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d394:	f003 0301 	and.w	r3, r3, #1
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d10c      	bne.n	800d3b6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d39c:	79fb      	ldrb	r3, [r7, #7]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d007      	beq.n	800d3b2 <find_volume+0x82>
 800d3a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d3a6:	f003 0304 	and.w	r3, r3, #4
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d001      	beq.n	800d3b2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d3ae:	230a      	movs	r3, #10
 800d3b0:	e23a      	b.n	800d828 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	e238      	b.n	800d828 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d3bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3be:	b2da      	uxtb	r2, r3
 800d3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c6:	785b      	ldrb	r3, [r3, #1]
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7fe f8ab 	bl	800b524 <disk_initialize>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d3d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d3d8:	f003 0301 	and.w	r3, r3, #1
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d001      	beq.n	800d3e4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d3e0:	2303      	movs	r3, #3
 800d3e2:	e221      	b.n	800d828 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d3e4:	79fb      	ldrb	r3, [r7, #7]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d007      	beq.n	800d3fa <find_volume+0xca>
 800d3ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d3ee:	f003 0304 	and.w	r3, r3, #4
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d001      	beq.n	800d3fa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d3f6:	230a      	movs	r3, #10
 800d3f8:	e216      	b.n	800d828 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800d3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3fc:	7858      	ldrb	r0, [r3, #1]
 800d3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d400:	330c      	adds	r3, #12
 800d402:	461a      	mov	r2, r3
 800d404:	2102      	movs	r1, #2
 800d406:	f7fe f8f3 	bl	800b5f0 <disk_ioctl>
 800d40a:	4603      	mov	r3, r0
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d001      	beq.n	800d414 <find_volume+0xe4>
 800d410:	2301      	movs	r3, #1
 800d412:	e209      	b.n	800d828 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800d414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d416:	899b      	ldrh	r3, [r3, #12]
 800d418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d41c:	d80d      	bhi.n	800d43a <find_volume+0x10a>
 800d41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d420:	899b      	ldrh	r3, [r3, #12]
 800d422:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d426:	d308      	bcc.n	800d43a <find_volume+0x10a>
 800d428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d42a:	899b      	ldrh	r3, [r3, #12]
 800d42c:	461a      	mov	r2, r3
 800d42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d430:	899b      	ldrh	r3, [r3, #12]
 800d432:	3b01      	subs	r3, #1
 800d434:	4013      	ands	r3, r2
 800d436:	2b00      	cmp	r3, #0
 800d438:	d001      	beq.n	800d43e <find_volume+0x10e>
 800d43a:	2301      	movs	r3, #1
 800d43c:	e1f4      	b.n	800d828 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d43e:	2300      	movs	r3, #0
 800d440:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d442:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d444:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d446:	f7ff ff1d 	bl	800d284 <check_fs>
 800d44a:	4603      	mov	r3, r0
 800d44c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d450:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d454:	2b02      	cmp	r3, #2
 800d456:	d14b      	bne.n	800d4f0 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d458:	2300      	movs	r3, #0
 800d45a:	643b      	str	r3, [r7, #64]	; 0x40
 800d45c:	e01f      	b.n	800d49e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d460:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d466:	011b      	lsls	r3, r3, #4
 800d468:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d46c:	4413      	add	r3, r2
 800d46e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d472:	3304      	adds	r3, #4
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d006      	beq.n	800d488 <find_volume+0x158>
 800d47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d47c:	3308      	adds	r3, #8
 800d47e:	4618      	mov	r0, r3
 800d480:	f7fe f8ec 	bl	800b65c <ld_dword>
 800d484:	4602      	mov	r2, r0
 800d486:	e000      	b.n	800d48a <find_volume+0x15a>
 800d488:	2200      	movs	r2, #0
 800d48a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d48c:	009b      	lsls	r3, r3, #2
 800d48e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d492:	440b      	add	r3, r1
 800d494:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d49a:	3301      	adds	r3, #1
 800d49c:	643b      	str	r3, [r7, #64]	; 0x40
 800d49e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4a0:	2b03      	cmp	r3, #3
 800d4a2:	d9dc      	bls.n	800d45e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d4a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d002      	beq.n	800d4b4 <find_volume+0x184>
 800d4ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4b0:	3b01      	subs	r3, #1
 800d4b2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d4b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4b6:	009b      	lsls	r3, r3, #2
 800d4b8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d4bc:	4413      	add	r3, r2
 800d4be:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d4c2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d4c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d005      	beq.n	800d4d6 <find_volume+0x1a6>
 800d4ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d4cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d4ce:	f7ff fed9 	bl	800d284 <check_fs>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	e000      	b.n	800d4d8 <find_volume+0x1a8>
 800d4d6:	2303      	movs	r3, #3
 800d4d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d4dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d4e0:	2b01      	cmp	r3, #1
 800d4e2:	d905      	bls.n	800d4f0 <find_volume+0x1c0>
 800d4e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	643b      	str	r3, [r7, #64]	; 0x40
 800d4ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4ec:	2b03      	cmp	r3, #3
 800d4ee:	d9e1      	bls.n	800d4b4 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d4f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d4f4:	2b04      	cmp	r3, #4
 800d4f6:	d101      	bne.n	800d4fc <find_volume+0x1cc>
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	e195      	b.n	800d828 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d4fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d500:	2b01      	cmp	r3, #1
 800d502:	d901      	bls.n	800d508 <find_volume+0x1d8>
 800d504:	230d      	movs	r3, #13
 800d506:	e18f      	b.n	800d828 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d50a:	3338      	adds	r3, #56	; 0x38
 800d50c:	330b      	adds	r3, #11
 800d50e:	4618      	mov	r0, r3
 800d510:	f7fe f88c 	bl	800b62c <ld_word>
 800d514:	4603      	mov	r3, r0
 800d516:	461a      	mov	r2, r3
 800d518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d51a:	899b      	ldrh	r3, [r3, #12]
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d001      	beq.n	800d524 <find_volume+0x1f4>
 800d520:	230d      	movs	r3, #13
 800d522:	e181      	b.n	800d828 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d526:	3338      	adds	r3, #56	; 0x38
 800d528:	3316      	adds	r3, #22
 800d52a:	4618      	mov	r0, r3
 800d52c:	f7fe f87e 	bl	800b62c <ld_word>
 800d530:	4603      	mov	r3, r0
 800d532:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d536:	2b00      	cmp	r3, #0
 800d538:	d106      	bne.n	800d548 <find_volume+0x218>
 800d53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d53c:	3338      	adds	r3, #56	; 0x38
 800d53e:	3324      	adds	r3, #36	; 0x24
 800d540:	4618      	mov	r0, r3
 800d542:	f7fe f88b 	bl	800b65c <ld_dword>
 800d546:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d54a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d54c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d550:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800d554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d556:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d55a:	789b      	ldrb	r3, [r3, #2]
 800d55c:	2b01      	cmp	r3, #1
 800d55e:	d005      	beq.n	800d56c <find_volume+0x23c>
 800d560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d562:	789b      	ldrb	r3, [r3, #2]
 800d564:	2b02      	cmp	r3, #2
 800d566:	d001      	beq.n	800d56c <find_volume+0x23c>
 800d568:	230d      	movs	r3, #13
 800d56a:	e15d      	b.n	800d828 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d56e:	789b      	ldrb	r3, [r3, #2]
 800d570:	461a      	mov	r2, r3
 800d572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d574:	fb02 f303 	mul.w	r3, r2, r3
 800d578:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d57c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d580:	b29a      	uxth	r2, r3
 800d582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d584:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d588:	895b      	ldrh	r3, [r3, #10]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d008      	beq.n	800d5a0 <find_volume+0x270>
 800d58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d590:	895b      	ldrh	r3, [r3, #10]
 800d592:	461a      	mov	r2, r3
 800d594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d596:	895b      	ldrh	r3, [r3, #10]
 800d598:	3b01      	subs	r3, #1
 800d59a:	4013      	ands	r3, r2
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d001      	beq.n	800d5a4 <find_volume+0x274>
 800d5a0:	230d      	movs	r3, #13
 800d5a2:	e141      	b.n	800d828 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5a6:	3338      	adds	r3, #56	; 0x38
 800d5a8:	3311      	adds	r3, #17
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f7fe f83e 	bl	800b62c <ld_word>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5b6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ba:	891b      	ldrh	r3, [r3, #8]
 800d5bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d5be:	8992      	ldrh	r2, [r2, #12]
 800d5c0:	0952      	lsrs	r2, r2, #5
 800d5c2:	b292      	uxth	r2, r2
 800d5c4:	fbb3 f1f2 	udiv	r1, r3, r2
 800d5c8:	fb02 f201 	mul.w	r2, r2, r1
 800d5cc:	1a9b      	subs	r3, r3, r2
 800d5ce:	b29b      	uxth	r3, r3
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d001      	beq.n	800d5d8 <find_volume+0x2a8>
 800d5d4:	230d      	movs	r3, #13
 800d5d6:	e127      	b.n	800d828 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5da:	3338      	adds	r3, #56	; 0x38
 800d5dc:	3313      	adds	r3, #19
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f7fe f824 	bl	800b62c <ld_word>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d5e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d106      	bne.n	800d5fc <find_volume+0x2cc>
 800d5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5f0:	3338      	adds	r3, #56	; 0x38
 800d5f2:	3320      	adds	r3, #32
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f7fe f831 	bl	800b65c <ld_dword>
 800d5fa:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5fe:	3338      	adds	r3, #56	; 0x38
 800d600:	330e      	adds	r3, #14
 800d602:	4618      	mov	r0, r3
 800d604:	f7fe f812 	bl	800b62c <ld_word>
 800d608:	4603      	mov	r3, r0
 800d60a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d60c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d104      	bne.n	800d61c <find_volume+0x2ec>
 800d612:	230d      	movs	r3, #13
 800d614:	e108      	b.n	800d828 <find_volume+0x4f8>
 800d616:	bf00      	nop
 800d618:	200022d4 	.word	0x200022d4

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d61c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d61e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d620:	4413      	add	r3, r2
 800d622:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d624:	8911      	ldrh	r1, [r2, #8]
 800d626:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d628:	8992      	ldrh	r2, [r2, #12]
 800d62a:	0952      	lsrs	r2, r2, #5
 800d62c:	b292      	uxth	r2, r2
 800d62e:	fbb1 f2f2 	udiv	r2, r1, r2
 800d632:	b292      	uxth	r2, r2
 800d634:	4413      	add	r3, r2
 800d636:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d638:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d63c:	429a      	cmp	r2, r3
 800d63e:	d201      	bcs.n	800d644 <find_volume+0x314>
 800d640:	230d      	movs	r3, #13
 800d642:	e0f1      	b.n	800d828 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d644:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d648:	1ad3      	subs	r3, r2, r3
 800d64a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d64c:	8952      	ldrh	r2, [r2, #10]
 800d64e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d652:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d656:	2b00      	cmp	r3, #0
 800d658:	d101      	bne.n	800d65e <find_volume+0x32e>
 800d65a:	230d      	movs	r3, #13
 800d65c:	e0e4      	b.n	800d828 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800d65e:	2303      	movs	r3, #3
 800d660:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d666:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d66a:	4293      	cmp	r3, r2
 800d66c:	d802      	bhi.n	800d674 <find_volume+0x344>
 800d66e:	2302      	movs	r3, #2
 800d670:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d676:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d67a:	4293      	cmp	r3, r2
 800d67c:	d802      	bhi.n	800d684 <find_volume+0x354>
 800d67e:	2301      	movs	r3, #1
 800d680:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d686:	1c9a      	adds	r2, r3, #2
 800d688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d68a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800d68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d68e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d690:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d692:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d696:	441a      	add	r2, r3
 800d698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d69a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800d69c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a0:	441a      	add	r2, r3
 800d6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6a4:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800d6a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d6aa:	2b03      	cmp	r3, #3
 800d6ac:	d11e      	bne.n	800d6ec <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b0:	3338      	adds	r3, #56	; 0x38
 800d6b2:	332a      	adds	r3, #42	; 0x2a
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f7fd ffb9 	bl	800b62c <ld_word>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d001      	beq.n	800d6c4 <find_volume+0x394>
 800d6c0:	230d      	movs	r3, #13
 800d6c2:	e0b1      	b.n	800d828 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6c6:	891b      	ldrh	r3, [r3, #8]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d001      	beq.n	800d6d0 <find_volume+0x3a0>
 800d6cc:	230d      	movs	r3, #13
 800d6ce:	e0ab      	b.n	800d828 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6d2:	3338      	adds	r3, #56	; 0x38
 800d6d4:	332c      	adds	r3, #44	; 0x2c
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f7fd ffc0 	bl	800b65c <ld_dword>
 800d6dc:	4602      	mov	r2, r0
 800d6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6e0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6e4:	69db      	ldr	r3, [r3, #28]
 800d6e6:	009b      	lsls	r3, r3, #2
 800d6e8:	647b      	str	r3, [r7, #68]	; 0x44
 800d6ea:	e01f      	b.n	800d72c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ee:	891b      	ldrh	r3, [r3, #8]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d101      	bne.n	800d6f8 <find_volume+0x3c8>
 800d6f4:	230d      	movs	r3, #13
 800d6f6:	e097      	b.n	800d828 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d6fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6fe:	441a      	add	r2, r3
 800d700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d702:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d704:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d708:	2b02      	cmp	r3, #2
 800d70a:	d103      	bne.n	800d714 <find_volume+0x3e4>
 800d70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d70e:	69db      	ldr	r3, [r3, #28]
 800d710:	005b      	lsls	r3, r3, #1
 800d712:	e00a      	b.n	800d72a <find_volume+0x3fa>
 800d714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d716:	69da      	ldr	r2, [r3, #28]
 800d718:	4613      	mov	r3, r2
 800d71a:	005b      	lsls	r3, r3, #1
 800d71c:	4413      	add	r3, r2
 800d71e:	085a      	lsrs	r2, r3, #1
 800d720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d722:	69db      	ldr	r3, [r3, #28]
 800d724:	f003 0301 	and.w	r3, r3, #1
 800d728:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d72a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d72e:	6a1a      	ldr	r2, [r3, #32]
 800d730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d732:	899b      	ldrh	r3, [r3, #12]
 800d734:	4619      	mov	r1, r3
 800d736:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d738:	440b      	add	r3, r1
 800d73a:	3b01      	subs	r3, #1
 800d73c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d73e:	8989      	ldrh	r1, [r1, #12]
 800d740:	fbb3 f3f1 	udiv	r3, r3, r1
 800d744:	429a      	cmp	r2, r3
 800d746:	d201      	bcs.n	800d74c <find_volume+0x41c>
 800d748:	230d      	movs	r3, #13
 800d74a:	e06d      	b.n	800d828 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d74e:	f04f 32ff 	mov.w	r2, #4294967295
 800d752:	619a      	str	r2, [r3, #24]
 800d754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d756:	699a      	ldr	r2, [r3, #24]
 800d758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d75a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800d75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d75e:	2280      	movs	r2, #128	; 0x80
 800d760:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d762:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d766:	2b03      	cmp	r3, #3
 800d768:	d149      	bne.n	800d7fe <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d76c:	3338      	adds	r3, #56	; 0x38
 800d76e:	3330      	adds	r3, #48	; 0x30
 800d770:	4618      	mov	r0, r3
 800d772:	f7fd ff5b 	bl	800b62c <ld_word>
 800d776:	4603      	mov	r3, r0
 800d778:	2b01      	cmp	r3, #1
 800d77a:	d140      	bne.n	800d7fe <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d77c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d77e:	3301      	adds	r3, #1
 800d780:	4619      	mov	r1, r3
 800d782:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d784:	f7fe fa02 	bl	800bb8c <move_window>
 800d788:	4603      	mov	r3, r0
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d137      	bne.n	800d7fe <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800d78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d790:	2200      	movs	r2, #0
 800d792:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d796:	3338      	adds	r3, #56	; 0x38
 800d798:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d79c:	4618      	mov	r0, r3
 800d79e:	f7fd ff45 	bl	800b62c <ld_word>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	461a      	mov	r2, r3
 800d7a6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d7aa:	429a      	cmp	r2, r3
 800d7ac:	d127      	bne.n	800d7fe <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b0:	3338      	adds	r3, #56	; 0x38
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f7fd ff52 	bl	800b65c <ld_dword>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	4a1d      	ldr	r2, [pc, #116]	; (800d830 <find_volume+0x500>)
 800d7bc:	4293      	cmp	r3, r2
 800d7be:	d11e      	bne.n	800d7fe <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7c2:	3338      	adds	r3, #56	; 0x38
 800d7c4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f7fd ff47 	bl	800b65c <ld_dword>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	4a18      	ldr	r2, [pc, #96]	; (800d834 <find_volume+0x504>)
 800d7d2:	4293      	cmp	r3, r2
 800d7d4:	d113      	bne.n	800d7fe <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d8:	3338      	adds	r3, #56	; 0x38
 800d7da:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f7fd ff3c 	bl	800b65c <ld_dword>
 800d7e4:	4602      	mov	r2, r0
 800d7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e8:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ec:	3338      	adds	r3, #56	; 0x38
 800d7ee:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f7fd ff32 	bl	800b65c <ld_dword>
 800d7f8:	4602      	mov	r2, r0
 800d7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7fc:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d800:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d804:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d806:	4b0c      	ldr	r3, [pc, #48]	; (800d838 <find_volume+0x508>)
 800d808:	881b      	ldrh	r3, [r3, #0]
 800d80a:	3301      	adds	r3, #1
 800d80c:	b29a      	uxth	r2, r3
 800d80e:	4b0a      	ldr	r3, [pc, #40]	; (800d838 <find_volume+0x508>)
 800d810:	801a      	strh	r2, [r3, #0]
 800d812:	4b09      	ldr	r3, [pc, #36]	; (800d838 <find_volume+0x508>)
 800d814:	881a      	ldrh	r2, [r3, #0]
 800d816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d818:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800d81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d81c:	4a07      	ldr	r2, [pc, #28]	; (800d83c <find_volume+0x50c>)
 800d81e:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d820:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d822:	f7fe f94b 	bl	800babc <clear_lock>
#endif
	return FR_OK;
 800d826:	2300      	movs	r3, #0
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3758      	adds	r7, #88	; 0x58
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}
 800d830:	41615252 	.word	0x41615252
 800d834:	61417272 	.word	0x61417272
 800d838:	200022d8 	.word	0x200022d8
 800d83c:	200022fc 	.word	0x200022fc

0800d840 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b084      	sub	sp, #16
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
 800d848:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d84a:	2309      	movs	r3, #9
 800d84c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d01c      	beq.n	800d88e <validate+0x4e>
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d018      	beq.n	800d88e <validate+0x4e>
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	781b      	ldrb	r3, [r3, #0]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d013      	beq.n	800d88e <validate+0x4e>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	889a      	ldrh	r2, [r3, #4]
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	88db      	ldrh	r3, [r3, #6]
 800d870:	429a      	cmp	r2, r3
 800d872:	d10c      	bne.n	800d88e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	785b      	ldrb	r3, [r3, #1]
 800d87a:	4618      	mov	r0, r3
 800d87c:	f7fd fe38 	bl	800b4f0 <disk_status>
 800d880:	4603      	mov	r3, r0
 800d882:	f003 0301 	and.w	r3, r3, #1
 800d886:	2b00      	cmp	r3, #0
 800d888:	d101      	bne.n	800d88e <validate+0x4e>
			res = FR_OK;
 800d88a:	2300      	movs	r3, #0
 800d88c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d88e:	7bfb      	ldrb	r3, [r7, #15]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d102      	bne.n	800d89a <validate+0x5a>
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	e000      	b.n	800d89c <validate+0x5c>
 800d89a:	2300      	movs	r3, #0
 800d89c:	683a      	ldr	r2, [r7, #0]
 800d89e:	6013      	str	r3, [r2, #0]
	return res;
 800d8a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3710      	adds	r7, #16
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}
	...

0800d8ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b088      	sub	sp, #32
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	60f8      	str	r0, [r7, #12]
 800d8b4:	60b9      	str	r1, [r7, #8]
 800d8b6:	4613      	mov	r3, r2
 800d8b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d8be:	f107 0310 	add.w	r3, r7, #16
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f7ff fc9a 	bl	800d1fc <get_ldnumber>
 800d8c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d8ca:	69fb      	ldr	r3, [r7, #28]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	da01      	bge.n	800d8d4 <f_mount+0x28>
 800d8d0:	230b      	movs	r3, #11
 800d8d2:	e02b      	b.n	800d92c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d8d4:	4a17      	ldr	r2, [pc, #92]	; (800d934 <f_mount+0x88>)
 800d8d6:	69fb      	ldr	r3, [r7, #28]
 800d8d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d8de:	69bb      	ldr	r3, [r7, #24]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d005      	beq.n	800d8f0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d8e4:	69b8      	ldr	r0, [r7, #24]
 800d8e6:	f7fe f8e9 	bl	800babc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d8ea:	69bb      	ldr	r3, [r7, #24]
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d002      	beq.n	800d8fc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d8fc:	68fa      	ldr	r2, [r7, #12]
 800d8fe:	490d      	ldr	r1, [pc, #52]	; (800d934 <f_mount+0x88>)
 800d900:	69fb      	ldr	r3, [r7, #28]
 800d902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d002      	beq.n	800d912 <f_mount+0x66>
 800d90c:	79fb      	ldrb	r3, [r7, #7]
 800d90e:	2b01      	cmp	r3, #1
 800d910:	d001      	beq.n	800d916 <f_mount+0x6a>
 800d912:	2300      	movs	r3, #0
 800d914:	e00a      	b.n	800d92c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d916:	f107 010c 	add.w	r1, r7, #12
 800d91a:	f107 0308 	add.w	r3, r7, #8
 800d91e:	2200      	movs	r2, #0
 800d920:	4618      	mov	r0, r3
 800d922:	f7ff fd05 	bl	800d330 <find_volume>
 800d926:	4603      	mov	r3, r0
 800d928:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d92a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d92c:	4618      	mov	r0, r3
 800d92e:	3720      	adds	r7, #32
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}
 800d934:	200022d4 	.word	0x200022d4

0800d938 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b09a      	sub	sp, #104	; 0x68
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	60f8      	str	r0, [r7, #12]
 800d940:	60b9      	str	r1, [r7, #8]
 800d942:	4613      	mov	r3, r2
 800d944:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d101      	bne.n	800d950 <f_open+0x18>
 800d94c:	2309      	movs	r3, #9
 800d94e:	e1bb      	b.n	800dcc8 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d950:	79fb      	ldrb	r3, [r7, #7]
 800d952:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d956:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d958:	79fa      	ldrb	r2, [r7, #7]
 800d95a:	f107 0114 	add.w	r1, r7, #20
 800d95e:	f107 0308 	add.w	r3, r7, #8
 800d962:	4618      	mov	r0, r3
 800d964:	f7ff fce4 	bl	800d330 <find_volume>
 800d968:	4603      	mov	r3, r0
 800d96a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800d96e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d972:	2b00      	cmp	r3, #0
 800d974:	f040 819f 	bne.w	800dcb6 <f_open+0x37e>
		dj.obj.fs = fs;
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d97c:	68ba      	ldr	r2, [r7, #8]
 800d97e:	f107 0318 	add.w	r3, r7, #24
 800d982:	4611      	mov	r1, r2
 800d984:	4618      	mov	r0, r3
 800d986:	f7ff fbc3 	bl	800d110 <follow_path>
 800d98a:	4603      	mov	r3, r0
 800d98c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d990:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d994:	2b00      	cmp	r3, #0
 800d996:	d11a      	bne.n	800d9ce <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d998:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d99c:	b25b      	sxtb	r3, r3
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	da03      	bge.n	800d9aa <f_open+0x72>
				res = FR_INVALID_NAME;
 800d9a2:	2306      	movs	r3, #6
 800d9a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d9a8:	e011      	b.n	800d9ce <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d9aa:	79fb      	ldrb	r3, [r7, #7]
 800d9ac:	f023 0301 	bic.w	r3, r3, #1
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	bf14      	ite	ne
 800d9b4:	2301      	movne	r3, #1
 800d9b6:	2300      	moveq	r3, #0
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	461a      	mov	r2, r3
 800d9bc:	f107 0318 	add.w	r3, r7, #24
 800d9c0:	4611      	mov	r1, r2
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f7fd ff32 	bl	800b82c <chk_lock>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d9ce:	79fb      	ldrb	r3, [r7, #7]
 800d9d0:	f003 031c 	and.w	r3, r3, #28
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d07f      	beq.n	800dad8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d9d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d017      	beq.n	800da10 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d9e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d9e4:	2b04      	cmp	r3, #4
 800d9e6:	d10e      	bne.n	800da06 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d9e8:	f7fd ff7c 	bl	800b8e4 <enq_lock>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d006      	beq.n	800da00 <f_open+0xc8>
 800d9f2:	f107 0318 	add.w	r3, r7, #24
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f7ff f8da 	bl	800cbb0 <dir_register>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	e000      	b.n	800da02 <f_open+0xca>
 800da00:	2312      	movs	r3, #18
 800da02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800da06:	79fb      	ldrb	r3, [r7, #7]
 800da08:	f043 0308 	orr.w	r3, r3, #8
 800da0c:	71fb      	strb	r3, [r7, #7]
 800da0e:	e010      	b.n	800da32 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800da10:	7fbb      	ldrb	r3, [r7, #30]
 800da12:	f003 0311 	and.w	r3, r3, #17
 800da16:	2b00      	cmp	r3, #0
 800da18:	d003      	beq.n	800da22 <f_open+0xea>
					res = FR_DENIED;
 800da1a:	2307      	movs	r3, #7
 800da1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800da20:	e007      	b.n	800da32 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800da22:	79fb      	ldrb	r3, [r7, #7]
 800da24:	f003 0304 	and.w	r3, r3, #4
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d002      	beq.n	800da32 <f_open+0xfa>
 800da2c:	2308      	movs	r3, #8
 800da2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800da32:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800da36:	2b00      	cmp	r3, #0
 800da38:	d168      	bne.n	800db0c <f_open+0x1d4>
 800da3a:	79fb      	ldrb	r3, [r7, #7]
 800da3c:	f003 0308 	and.w	r3, r3, #8
 800da40:	2b00      	cmp	r3, #0
 800da42:	d063      	beq.n	800db0c <f_open+0x1d4>
				dw = GET_FATTIME();
 800da44:	f7fd fbe8 	bl	800b218 <get_fattime>
 800da48:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800da4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da4c:	330e      	adds	r3, #14
 800da4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800da50:	4618      	mov	r0, r3
 800da52:	f7fd fe41 	bl	800b6d8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800da56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da58:	3316      	adds	r3, #22
 800da5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800da5c:	4618      	mov	r0, r3
 800da5e:	f7fd fe3b 	bl	800b6d8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800da62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da64:	330b      	adds	r3, #11
 800da66:	2220      	movs	r2, #32
 800da68:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da6e:	4611      	mov	r1, r2
 800da70:	4618      	mov	r0, r3
 800da72:	f7fe fe13 	bl	800c69c <ld_clust>
 800da76:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800da7c:	2200      	movs	r2, #0
 800da7e:	4618      	mov	r0, r3
 800da80:	f7fe fe2b 	bl	800c6da <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800da84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da86:	331c      	adds	r3, #28
 800da88:	2100      	movs	r1, #0
 800da8a:	4618      	mov	r0, r3
 800da8c:	f7fd fe24 	bl	800b6d8 <st_dword>
					fs->wflag = 1;
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	2201      	movs	r2, #1
 800da94:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800da96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d037      	beq.n	800db0c <f_open+0x1d4>
						dw = fs->winsect;
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daa0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800daa2:	f107 0318 	add.w	r3, r7, #24
 800daa6:	2200      	movs	r2, #0
 800daa8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800daaa:	4618      	mov	r0, r3
 800daac:	f7fe fb1b 	bl	800c0e6 <remove_chain>
 800dab0:	4603      	mov	r3, r0
 800dab2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800dab6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d126      	bne.n	800db0c <f_open+0x1d4>
							res = move_window(fs, dw);
 800dabe:	697b      	ldr	r3, [r7, #20]
 800dac0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dac2:	4618      	mov	r0, r3
 800dac4:	f7fe f862 	bl	800bb8c <move_window>
 800dac8:	4603      	mov	r3, r0
 800daca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dad2:	3a01      	subs	r2, #1
 800dad4:	615a      	str	r2, [r3, #20]
 800dad6:	e019      	b.n	800db0c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800dad8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d115      	bne.n	800db0c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800dae0:	7fbb      	ldrb	r3, [r7, #30]
 800dae2:	f003 0310 	and.w	r3, r3, #16
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d003      	beq.n	800daf2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800daea:	2304      	movs	r3, #4
 800daec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800daf0:	e00c      	b.n	800db0c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800daf2:	79fb      	ldrb	r3, [r7, #7]
 800daf4:	f003 0302 	and.w	r3, r3, #2
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d007      	beq.n	800db0c <f_open+0x1d4>
 800dafc:	7fbb      	ldrb	r3, [r7, #30]
 800dafe:	f003 0301 	and.w	r3, r3, #1
 800db02:	2b00      	cmp	r3, #0
 800db04:	d002      	beq.n	800db0c <f_open+0x1d4>
						res = FR_DENIED;
 800db06:	2307      	movs	r3, #7
 800db08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800db0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800db10:	2b00      	cmp	r3, #0
 800db12:	d128      	bne.n	800db66 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800db14:	79fb      	ldrb	r3, [r7, #7]
 800db16:	f003 0308 	and.w	r3, r3, #8
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d003      	beq.n	800db26 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800db1e:	79fb      	ldrb	r3, [r7, #7]
 800db20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db24:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800db2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800db34:	79fb      	ldrb	r3, [r7, #7]
 800db36:	f023 0301 	bic.w	r3, r3, #1
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	bf14      	ite	ne
 800db3e:	2301      	movne	r3, #1
 800db40:	2300      	moveq	r3, #0
 800db42:	b2db      	uxtb	r3, r3
 800db44:	461a      	mov	r2, r3
 800db46:	f107 0318 	add.w	r3, r7, #24
 800db4a:	4611      	mov	r1, r2
 800db4c:	4618      	mov	r0, r3
 800db4e:	f7fd feeb 	bl	800b928 <inc_lock>
 800db52:	4602      	mov	r2, r0
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	691b      	ldr	r3, [r3, #16]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d102      	bne.n	800db66 <f_open+0x22e>
 800db60:	2302      	movs	r3, #2
 800db62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800db66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	f040 80a3 	bne.w	800dcb6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800db70:	697b      	ldr	r3, [r7, #20]
 800db72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db74:	4611      	mov	r1, r2
 800db76:	4618      	mov	r0, r3
 800db78:	f7fe fd90 	bl	800c69c <ld_clust>
 800db7c:	4602      	mov	r2, r0
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800db82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db84:	331c      	adds	r3, #28
 800db86:	4618      	mov	r0, r3
 800db88:	f7fd fd68 	bl	800b65c <ld_dword>
 800db8c:	4602      	mov	r2, r0
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	2200      	movs	r2, #0
 800db96:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800db98:	697a      	ldr	r2, [r7, #20]
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	88da      	ldrh	r2, [r3, #6]
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	79fa      	ldrb	r2, [r7, #7]
 800dbaa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	2200      	movs	r2, #0
 800dbb0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	2200      	movs	r2, #0
 800dbbc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	3330      	adds	r3, #48	; 0x30
 800dbc2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800dbc6:	2100      	movs	r1, #0
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f7fd fdd2 	bl	800b772 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800dbce:	79fb      	ldrb	r3, [r7, #7]
 800dbd0:	f003 0320 	and.w	r3, r3, #32
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d06e      	beq.n	800dcb6 <f_open+0x37e>
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	68db      	ldr	r3, [r3, #12]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d06a      	beq.n	800dcb6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	68da      	ldr	r2, [r3, #12]
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800dbe8:	697b      	ldr	r3, [r7, #20]
 800dbea:	895b      	ldrh	r3, [r3, #10]
 800dbec:	461a      	mov	r2, r3
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	899b      	ldrh	r3, [r3, #12]
 800dbf2:	fb03 f302 	mul.w	r3, r3, r2
 800dbf6:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	689b      	ldr	r3, [r3, #8]
 800dbfc:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	68db      	ldr	r3, [r3, #12]
 800dc02:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dc04:	e016      	b.n	800dc34 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f7fe f87b 	bl	800bd06 <get_fat>
 800dc10:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800dc12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc14:	2b01      	cmp	r3, #1
 800dc16:	d802      	bhi.n	800dc1e <f_open+0x2e6>
 800dc18:	2302      	movs	r3, #2
 800dc1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800dc1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc24:	d102      	bne.n	800dc2c <f_open+0x2f4>
 800dc26:	2301      	movs	r3, #1
 800dc28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dc2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dc2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc30:	1ad3      	subs	r3, r2, r3
 800dc32:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dc34:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d103      	bne.n	800dc44 <f_open+0x30c>
 800dc3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dc3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc40:	429a      	cmp	r2, r3
 800dc42:	d8e0      	bhi.n	800dc06 <f_open+0x2ce>
				}
				fp->clust = clst;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dc48:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800dc4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d131      	bne.n	800dcb6 <f_open+0x37e>
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	899b      	ldrh	r3, [r3, #12]
 800dc56:	461a      	mov	r2, r3
 800dc58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc5a:	fbb3 f1f2 	udiv	r1, r3, r2
 800dc5e:	fb02 f201 	mul.w	r2, r2, r1
 800dc62:	1a9b      	subs	r3, r3, r2
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d026      	beq.n	800dcb6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f7fe f82b 	bl	800bcc8 <clust2sect>
 800dc72:	64f8      	str	r0, [r7, #76]	; 0x4c
 800dc74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d103      	bne.n	800dc82 <f_open+0x34a>
						res = FR_INT_ERR;
 800dc7a:	2302      	movs	r3, #2
 800dc7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800dc80:	e019      	b.n	800dcb6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800dc82:	697b      	ldr	r3, [r7, #20]
 800dc84:	899b      	ldrh	r3, [r3, #12]
 800dc86:	461a      	mov	r2, r3
 800dc88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc8a:	fbb3 f2f2 	udiv	r2, r3, r2
 800dc8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc90:	441a      	add	r2, r3
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	7858      	ldrb	r0, [r3, #1]
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	6a1a      	ldr	r2, [r3, #32]
 800dca4:	2301      	movs	r3, #1
 800dca6:	f7fd fc63 	bl	800b570 <disk_read>
 800dcaa:	4603      	mov	r3, r0
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d002      	beq.n	800dcb6 <f_open+0x37e>
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800dcb6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d002      	beq.n	800dcc4 <f_open+0x38c>
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800dcc4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3768      	adds	r7, #104	; 0x68
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}

0800dcd0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b08c      	sub	sp, #48	; 0x30
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	60f8      	str	r0, [r7, #12]
 800dcd8:	60b9      	str	r1, [r7, #8]
 800dcda:	607a      	str	r2, [r7, #4]
 800dcdc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	2200      	movs	r2, #0
 800dce6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	f107 0210 	add.w	r2, r7, #16
 800dcee:	4611      	mov	r1, r2
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f7ff fda5 	bl	800d840 <validate>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800dcfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d107      	bne.n	800dd14 <f_write+0x44>
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	7d5b      	ldrb	r3, [r3, #21]
 800dd08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800dd0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d002      	beq.n	800dd1a <f_write+0x4a>
 800dd14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd18:	e16a      	b.n	800dff0 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	7d1b      	ldrb	r3, [r3, #20]
 800dd1e:	f003 0302 	and.w	r3, r3, #2
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d101      	bne.n	800dd2a <f_write+0x5a>
 800dd26:	2307      	movs	r3, #7
 800dd28:	e162      	b.n	800dff0 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	699a      	ldr	r2, [r3, #24]
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	441a      	add	r2, r3
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	699b      	ldr	r3, [r3, #24]
 800dd36:	429a      	cmp	r2, r3
 800dd38:	f080 814c 	bcs.w	800dfd4 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	699b      	ldr	r3, [r3, #24]
 800dd40:	43db      	mvns	r3, r3
 800dd42:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800dd44:	e146      	b.n	800dfd4 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	699b      	ldr	r3, [r3, #24]
 800dd4a:	693a      	ldr	r2, [r7, #16]
 800dd4c:	8992      	ldrh	r2, [r2, #12]
 800dd4e:	fbb3 f1f2 	udiv	r1, r3, r2
 800dd52:	fb02 f201 	mul.w	r2, r2, r1
 800dd56:	1a9b      	subs	r3, r3, r2
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	f040 80f1 	bne.w	800df40 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	699b      	ldr	r3, [r3, #24]
 800dd62:	693a      	ldr	r2, [r7, #16]
 800dd64:	8992      	ldrh	r2, [r2, #12]
 800dd66:	fbb3 f3f2 	udiv	r3, r3, r2
 800dd6a:	693a      	ldr	r2, [r7, #16]
 800dd6c:	8952      	ldrh	r2, [r2, #10]
 800dd6e:	3a01      	subs	r2, #1
 800dd70:	4013      	ands	r3, r2
 800dd72:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800dd74:	69bb      	ldr	r3, [r7, #24]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d143      	bne.n	800de02 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	699b      	ldr	r3, [r3, #24]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d10c      	bne.n	800dd9c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	689b      	ldr	r3, [r3, #8]
 800dd86:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800dd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d11a      	bne.n	800ddc4 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	2100      	movs	r1, #0
 800dd92:	4618      	mov	r0, r3
 800dd94:	f7fe fa0c 	bl	800c1b0 <create_chain>
 800dd98:	62b8      	str	r0, [r7, #40]	; 0x28
 800dd9a:	e013      	b.n	800ddc4 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d007      	beq.n	800ddb4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	699b      	ldr	r3, [r3, #24]
 800dda8:	4619      	mov	r1, r3
 800ddaa:	68f8      	ldr	r0, [r7, #12]
 800ddac:	f7fe fa98 	bl	800c2e0 <clmt_clust>
 800ddb0:	62b8      	str	r0, [r7, #40]	; 0x28
 800ddb2:	e007      	b.n	800ddc4 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ddb4:	68fa      	ldr	r2, [r7, #12]
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	69db      	ldr	r3, [r3, #28]
 800ddba:	4619      	mov	r1, r3
 800ddbc:	4610      	mov	r0, r2
 800ddbe:	f7fe f9f7 	bl	800c1b0 <create_chain>
 800ddc2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ddc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	f000 8109 	beq.w	800dfde <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ddcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddce:	2b01      	cmp	r3, #1
 800ddd0:	d104      	bne.n	800dddc <f_write+0x10c>
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	2202      	movs	r2, #2
 800ddd6:	755a      	strb	r2, [r3, #21]
 800ddd8:	2302      	movs	r3, #2
 800ddda:	e109      	b.n	800dff0 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dde2:	d104      	bne.n	800ddee <f_write+0x11e>
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	2201      	movs	r2, #1
 800dde8:	755a      	strb	r2, [r3, #21]
 800ddea:	2301      	movs	r3, #1
 800ddec:	e100      	b.n	800dff0 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ddf2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	689b      	ldr	r3, [r3, #8]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d102      	bne.n	800de02 <f_write+0x132>
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de00:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	7d1b      	ldrb	r3, [r3, #20]
 800de06:	b25b      	sxtb	r3, r3
 800de08:	2b00      	cmp	r3, #0
 800de0a:	da18      	bge.n	800de3e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800de0c:	693b      	ldr	r3, [r7, #16]
 800de0e:	7858      	ldrb	r0, [r3, #1]
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	6a1a      	ldr	r2, [r3, #32]
 800de1a:	2301      	movs	r3, #1
 800de1c:	f7fd fbc8 	bl	800b5b0 <disk_write>
 800de20:	4603      	mov	r3, r0
 800de22:	2b00      	cmp	r3, #0
 800de24:	d004      	beq.n	800de30 <f_write+0x160>
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	2201      	movs	r2, #1
 800de2a:	755a      	strb	r2, [r3, #21]
 800de2c:	2301      	movs	r3, #1
 800de2e:	e0df      	b.n	800dff0 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	7d1b      	ldrb	r3, [r3, #20]
 800de34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de38:	b2da      	uxtb	r2, r3
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800de3e:	693a      	ldr	r2, [r7, #16]
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	69db      	ldr	r3, [r3, #28]
 800de44:	4619      	mov	r1, r3
 800de46:	4610      	mov	r0, r2
 800de48:	f7fd ff3e 	bl	800bcc8 <clust2sect>
 800de4c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d104      	bne.n	800de5e <f_write+0x18e>
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	2202      	movs	r2, #2
 800de58:	755a      	strb	r2, [r3, #21]
 800de5a:	2302      	movs	r3, #2
 800de5c:	e0c8      	b.n	800dff0 <f_write+0x320>
			sect += csect;
 800de5e:	697a      	ldr	r2, [r7, #20]
 800de60:	69bb      	ldr	r3, [r7, #24]
 800de62:	4413      	add	r3, r2
 800de64:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800de66:	693b      	ldr	r3, [r7, #16]
 800de68:	899b      	ldrh	r3, [r3, #12]
 800de6a:	461a      	mov	r2, r3
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	fbb3 f3f2 	udiv	r3, r3, r2
 800de72:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800de74:	6a3b      	ldr	r3, [r7, #32]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d043      	beq.n	800df02 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800de7a:	69ba      	ldr	r2, [r7, #24]
 800de7c:	6a3b      	ldr	r3, [r7, #32]
 800de7e:	4413      	add	r3, r2
 800de80:	693a      	ldr	r2, [r7, #16]
 800de82:	8952      	ldrh	r2, [r2, #10]
 800de84:	4293      	cmp	r3, r2
 800de86:	d905      	bls.n	800de94 <f_write+0x1c4>
					cc = fs->csize - csect;
 800de88:	693b      	ldr	r3, [r7, #16]
 800de8a:	895b      	ldrh	r3, [r3, #10]
 800de8c:	461a      	mov	r2, r3
 800de8e:	69bb      	ldr	r3, [r7, #24]
 800de90:	1ad3      	subs	r3, r2, r3
 800de92:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800de94:	693b      	ldr	r3, [r7, #16]
 800de96:	7858      	ldrb	r0, [r3, #1]
 800de98:	6a3b      	ldr	r3, [r7, #32]
 800de9a:	697a      	ldr	r2, [r7, #20]
 800de9c:	69f9      	ldr	r1, [r7, #28]
 800de9e:	f7fd fb87 	bl	800b5b0 <disk_write>
 800dea2:	4603      	mov	r3, r0
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d004      	beq.n	800deb2 <f_write+0x1e2>
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	2201      	movs	r2, #1
 800deac:	755a      	strb	r2, [r3, #21]
 800deae:	2301      	movs	r3, #1
 800deb0:	e09e      	b.n	800dff0 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	6a1a      	ldr	r2, [r3, #32]
 800deb6:	697b      	ldr	r3, [r7, #20]
 800deb8:	1ad3      	subs	r3, r2, r3
 800deba:	6a3a      	ldr	r2, [r7, #32]
 800debc:	429a      	cmp	r2, r3
 800debe:	d918      	bls.n	800def2 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	6a1a      	ldr	r2, [r3, #32]
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	1ad3      	subs	r3, r2, r3
 800dece:	693a      	ldr	r2, [r7, #16]
 800ded0:	8992      	ldrh	r2, [r2, #12]
 800ded2:	fb02 f303 	mul.w	r3, r2, r3
 800ded6:	69fa      	ldr	r2, [r7, #28]
 800ded8:	18d1      	adds	r1, r2, r3
 800deda:	693b      	ldr	r3, [r7, #16]
 800dedc:	899b      	ldrh	r3, [r3, #12]
 800dede:	461a      	mov	r2, r3
 800dee0:	f7fd fc26 	bl	800b730 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	7d1b      	ldrb	r3, [r3, #20]
 800dee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800deec:	b2da      	uxtb	r2, r3
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800def2:	693b      	ldr	r3, [r7, #16]
 800def4:	899b      	ldrh	r3, [r3, #12]
 800def6:	461a      	mov	r2, r3
 800def8:	6a3b      	ldr	r3, [r7, #32]
 800defa:	fb02 f303 	mul.w	r3, r2, r3
 800defe:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800df00:	e04b      	b.n	800df9a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	6a1b      	ldr	r3, [r3, #32]
 800df06:	697a      	ldr	r2, [r7, #20]
 800df08:	429a      	cmp	r2, r3
 800df0a:	d016      	beq.n	800df3a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	699a      	ldr	r2, [r3, #24]
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800df14:	429a      	cmp	r2, r3
 800df16:	d210      	bcs.n	800df3a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800df18:	693b      	ldr	r3, [r7, #16]
 800df1a:	7858      	ldrb	r0, [r3, #1]
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800df22:	2301      	movs	r3, #1
 800df24:	697a      	ldr	r2, [r7, #20]
 800df26:	f7fd fb23 	bl	800b570 <disk_read>
 800df2a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d004      	beq.n	800df3a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	2201      	movs	r2, #1
 800df34:	755a      	strb	r2, [r3, #21]
 800df36:	2301      	movs	r3, #1
 800df38:	e05a      	b.n	800dff0 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	697a      	ldr	r2, [r7, #20]
 800df3e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800df40:	693b      	ldr	r3, [r7, #16]
 800df42:	899b      	ldrh	r3, [r3, #12]
 800df44:	4618      	mov	r0, r3
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	699b      	ldr	r3, [r3, #24]
 800df4a:	693a      	ldr	r2, [r7, #16]
 800df4c:	8992      	ldrh	r2, [r2, #12]
 800df4e:	fbb3 f1f2 	udiv	r1, r3, r2
 800df52:	fb02 f201 	mul.w	r2, r2, r1
 800df56:	1a9b      	subs	r3, r3, r2
 800df58:	1ac3      	subs	r3, r0, r3
 800df5a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800df5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	429a      	cmp	r2, r3
 800df62:	d901      	bls.n	800df68 <f_write+0x298>
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	699b      	ldr	r3, [r3, #24]
 800df72:	693a      	ldr	r2, [r7, #16]
 800df74:	8992      	ldrh	r2, [r2, #12]
 800df76:	fbb3 f0f2 	udiv	r0, r3, r2
 800df7a:	fb02 f200 	mul.w	r2, r2, r0
 800df7e:	1a9b      	subs	r3, r3, r2
 800df80:	440b      	add	r3, r1
 800df82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df84:	69f9      	ldr	r1, [r7, #28]
 800df86:	4618      	mov	r0, r3
 800df88:	f7fd fbd2 	bl	800b730 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	7d1b      	ldrb	r3, [r3, #20]
 800df90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800df94:	b2da      	uxtb	r2, r3
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800df9a:	69fa      	ldr	r2, [r7, #28]
 800df9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df9e:	4413      	add	r3, r2
 800dfa0:	61fb      	str	r3, [r7, #28]
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	699a      	ldr	r2, [r3, #24]
 800dfa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa8:	441a      	add	r2, r3
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	619a      	str	r2, [r3, #24]
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	68da      	ldr	r2, [r3, #12]
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	699b      	ldr	r3, [r3, #24]
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	bf38      	it	cc
 800dfba:	461a      	movcc	r2, r3
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	60da      	str	r2, [r3, #12]
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	681a      	ldr	r2, [r3, #0]
 800dfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc6:	441a      	add	r2, r3
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	601a      	str	r2, [r3, #0]
 800dfcc:	687a      	ldr	r2, [r7, #4]
 800dfce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd0:	1ad3      	subs	r3, r2, r3
 800dfd2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	f47f aeb5 	bne.w	800dd46 <f_write+0x76>
 800dfdc:	e000      	b.n	800dfe0 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800dfde:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	7d1b      	ldrb	r3, [r3, #20]
 800dfe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfe8:	b2da      	uxtb	r2, r3
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800dfee:	2300      	movs	r3, #0
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3730      	adds	r7, #48	; 0x30
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b086      	sub	sp, #24
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f107 0208 	add.w	r2, r7, #8
 800e006:	4611      	mov	r1, r2
 800e008:	4618      	mov	r0, r3
 800e00a:	f7ff fc19 	bl	800d840 <validate>
 800e00e:	4603      	mov	r3, r0
 800e010:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e012:	7dfb      	ldrb	r3, [r7, #23]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d168      	bne.n	800e0ea <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	7d1b      	ldrb	r3, [r3, #20]
 800e01c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e020:	2b00      	cmp	r3, #0
 800e022:	d062      	beq.n	800e0ea <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	7d1b      	ldrb	r3, [r3, #20]
 800e028:	b25b      	sxtb	r3, r3
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	da15      	bge.n	800e05a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	7858      	ldrb	r0, [r3, #1]
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	6a1a      	ldr	r2, [r3, #32]
 800e03c:	2301      	movs	r3, #1
 800e03e:	f7fd fab7 	bl	800b5b0 <disk_write>
 800e042:	4603      	mov	r3, r0
 800e044:	2b00      	cmp	r3, #0
 800e046:	d001      	beq.n	800e04c <f_sync+0x54>
 800e048:	2301      	movs	r3, #1
 800e04a:	e04f      	b.n	800e0ec <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	7d1b      	ldrb	r3, [r3, #20]
 800e050:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e054:	b2da      	uxtb	r2, r3
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e05a:	f7fd f8dd 	bl	800b218 <get_fattime>
 800e05e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e060:	68ba      	ldr	r2, [r7, #8]
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e066:	4619      	mov	r1, r3
 800e068:	4610      	mov	r0, r2
 800e06a:	f7fd fd8f 	bl	800bb8c <move_window>
 800e06e:	4603      	mov	r3, r0
 800e070:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e072:	7dfb      	ldrb	r3, [r7, #23]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d138      	bne.n	800e0ea <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e07c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	330b      	adds	r3, #11
 800e082:	781a      	ldrb	r2, [r3, #0]
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	330b      	adds	r3, #11
 800e088:	f042 0220 	orr.w	r2, r2, #32
 800e08c:	b2d2      	uxtb	r2, r2
 800e08e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6818      	ldr	r0, [r3, #0]
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	689b      	ldr	r3, [r3, #8]
 800e098:	461a      	mov	r2, r3
 800e09a:	68f9      	ldr	r1, [r7, #12]
 800e09c:	f7fe fb1d 	bl	800c6da <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	f103 021c 	add.w	r2, r3, #28
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	68db      	ldr	r3, [r3, #12]
 800e0aa:	4619      	mov	r1, r3
 800e0ac:	4610      	mov	r0, r2
 800e0ae:	f7fd fb13 	bl	800b6d8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	3316      	adds	r3, #22
 800e0b6:	6939      	ldr	r1, [r7, #16]
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f7fd fb0d 	bl	800b6d8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	3312      	adds	r3, #18
 800e0c2:	2100      	movs	r1, #0
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f7fd faec 	bl	800b6a2 <st_word>
					fs->wflag = 1;
 800e0ca:	68bb      	ldr	r3, [r7, #8]
 800e0cc:	2201      	movs	r2, #1
 800e0ce:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e0d0:	68bb      	ldr	r3, [r7, #8]
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f7fd fd88 	bl	800bbe8 <sync_fs>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	7d1b      	ldrb	r3, [r3, #20]
 800e0e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e0e4:	b2da      	uxtb	r2, r3
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e0ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	3718      	adds	r7, #24
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}

0800e0f4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b084      	sub	sp, #16
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e0fc:	6878      	ldr	r0, [r7, #4]
 800e0fe:	f7ff ff7b 	bl	800dff8 <f_sync>
 800e102:	4603      	mov	r3, r0
 800e104:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e106:	7bfb      	ldrb	r3, [r7, #15]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d118      	bne.n	800e13e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f107 0208 	add.w	r2, r7, #8
 800e112:	4611      	mov	r1, r2
 800e114:	4618      	mov	r0, r3
 800e116:	f7ff fb93 	bl	800d840 <validate>
 800e11a:	4603      	mov	r3, r0
 800e11c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e11e:	7bfb      	ldrb	r3, [r7, #15]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d10c      	bne.n	800e13e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	691b      	ldr	r3, [r3, #16]
 800e128:	4618      	mov	r0, r3
 800e12a:	f7fd fc8b 	bl	800ba44 <dec_lock>
 800e12e:	4603      	mov	r3, r0
 800e130:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e132:	7bfb      	ldrb	r3, [r7, #15]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d102      	bne.n	800e13e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2200      	movs	r2, #0
 800e13c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e13e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e140:	4618      	mov	r0, r3
 800e142:	3710      	adds	r7, #16
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}

0800e148 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e148:	b480      	push	{r7}
 800e14a:	b087      	sub	sp, #28
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	60f8      	str	r0, [r7, #12]
 800e150:	60b9      	str	r1, [r7, #8]
 800e152:	4613      	mov	r3, r2
 800e154:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e156:	2301      	movs	r3, #1
 800e158:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e15a:	2300      	movs	r3, #0
 800e15c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e15e:	4b1f      	ldr	r3, [pc, #124]	; (800e1dc <FATFS_LinkDriverEx+0x94>)
 800e160:	7a5b      	ldrb	r3, [r3, #9]
 800e162:	b2db      	uxtb	r3, r3
 800e164:	2b00      	cmp	r3, #0
 800e166:	d131      	bne.n	800e1cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e168:	4b1c      	ldr	r3, [pc, #112]	; (800e1dc <FATFS_LinkDriverEx+0x94>)
 800e16a:	7a5b      	ldrb	r3, [r3, #9]
 800e16c:	b2db      	uxtb	r3, r3
 800e16e:	461a      	mov	r2, r3
 800e170:	4b1a      	ldr	r3, [pc, #104]	; (800e1dc <FATFS_LinkDriverEx+0x94>)
 800e172:	2100      	movs	r1, #0
 800e174:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e176:	4b19      	ldr	r3, [pc, #100]	; (800e1dc <FATFS_LinkDriverEx+0x94>)
 800e178:	7a5b      	ldrb	r3, [r3, #9]
 800e17a:	b2db      	uxtb	r3, r3
 800e17c:	4a17      	ldr	r2, [pc, #92]	; (800e1dc <FATFS_LinkDriverEx+0x94>)
 800e17e:	009b      	lsls	r3, r3, #2
 800e180:	4413      	add	r3, r2
 800e182:	68fa      	ldr	r2, [r7, #12]
 800e184:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e186:	4b15      	ldr	r3, [pc, #84]	; (800e1dc <FATFS_LinkDriverEx+0x94>)
 800e188:	7a5b      	ldrb	r3, [r3, #9]
 800e18a:	b2db      	uxtb	r3, r3
 800e18c:	461a      	mov	r2, r3
 800e18e:	4b13      	ldr	r3, [pc, #76]	; (800e1dc <FATFS_LinkDriverEx+0x94>)
 800e190:	4413      	add	r3, r2
 800e192:	79fa      	ldrb	r2, [r7, #7]
 800e194:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e196:	4b11      	ldr	r3, [pc, #68]	; (800e1dc <FATFS_LinkDriverEx+0x94>)
 800e198:	7a5b      	ldrb	r3, [r3, #9]
 800e19a:	b2db      	uxtb	r3, r3
 800e19c:	1c5a      	adds	r2, r3, #1
 800e19e:	b2d1      	uxtb	r1, r2
 800e1a0:	4a0e      	ldr	r2, [pc, #56]	; (800e1dc <FATFS_LinkDriverEx+0x94>)
 800e1a2:	7251      	strb	r1, [r2, #9]
 800e1a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e1a6:	7dbb      	ldrb	r3, [r7, #22]
 800e1a8:	3330      	adds	r3, #48	; 0x30
 800e1aa:	b2da      	uxtb	r2, r3
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	3301      	adds	r3, #1
 800e1b4:	223a      	movs	r2, #58	; 0x3a
 800e1b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	3302      	adds	r3, #2
 800e1bc:	222f      	movs	r2, #47	; 0x2f
 800e1be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e1c0:	68bb      	ldr	r3, [r7, #8]
 800e1c2:	3303      	adds	r3, #3
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e1cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	371c      	adds	r7, #28
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d8:	4770      	bx	lr
 800e1da:	bf00      	nop
 800e1dc:	20002340 	.word	0x20002340

0800e1e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b082      	sub	sp, #8
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	6839      	ldr	r1, [r7, #0]
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f7ff ffaa 	bl	800e148 <FATFS_LinkDriverEx>
 800e1f4:	4603      	mov	r3, r0
}
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	3708      	adds	r7, #8
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}
	...

0800e200 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800e200:	b480      	push	{r7}
 800e202:	b085      	sub	sp, #20
 800e204:	af00      	add	r7, sp, #0
 800e206:	4603      	mov	r3, r0
 800e208:	6039      	str	r1, [r7, #0]
 800e20a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e20c:	88fb      	ldrh	r3, [r7, #6]
 800e20e:	2b7f      	cmp	r3, #127	; 0x7f
 800e210:	d802      	bhi.n	800e218 <ff_convert+0x18>
		c = chr;
 800e212:	88fb      	ldrh	r3, [r7, #6]
 800e214:	81fb      	strh	r3, [r7, #14]
 800e216:	e025      	b.n	800e264 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800e218:	683b      	ldr	r3, [r7, #0]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d00b      	beq.n	800e236 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e21e:	88fb      	ldrh	r3, [r7, #6]
 800e220:	2bff      	cmp	r3, #255	; 0xff
 800e222:	d805      	bhi.n	800e230 <ff_convert+0x30>
 800e224:	88fb      	ldrh	r3, [r7, #6]
 800e226:	3b80      	subs	r3, #128	; 0x80
 800e228:	4a12      	ldr	r2, [pc, #72]	; (800e274 <ff_convert+0x74>)
 800e22a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e22e:	e000      	b.n	800e232 <ff_convert+0x32>
 800e230:	2300      	movs	r3, #0
 800e232:	81fb      	strh	r3, [r7, #14]
 800e234:	e016      	b.n	800e264 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800e236:	2300      	movs	r3, #0
 800e238:	81fb      	strh	r3, [r7, #14]
 800e23a:	e009      	b.n	800e250 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e23c:	89fb      	ldrh	r3, [r7, #14]
 800e23e:	4a0d      	ldr	r2, [pc, #52]	; (800e274 <ff_convert+0x74>)
 800e240:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e244:	88fa      	ldrh	r2, [r7, #6]
 800e246:	429a      	cmp	r2, r3
 800e248:	d006      	beq.n	800e258 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e24a:	89fb      	ldrh	r3, [r7, #14]
 800e24c:	3301      	adds	r3, #1
 800e24e:	81fb      	strh	r3, [r7, #14]
 800e250:	89fb      	ldrh	r3, [r7, #14]
 800e252:	2b7f      	cmp	r3, #127	; 0x7f
 800e254:	d9f2      	bls.n	800e23c <ff_convert+0x3c>
 800e256:	e000      	b.n	800e25a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e258:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e25a:	89fb      	ldrh	r3, [r7, #14]
 800e25c:	3380      	adds	r3, #128	; 0x80
 800e25e:	b29b      	uxth	r3, r3
 800e260:	b2db      	uxtb	r3, r3
 800e262:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e264:	89fb      	ldrh	r3, [r7, #14]
}
 800e266:	4618      	mov	r0, r3
 800e268:	3714      	adds	r7, #20
 800e26a:	46bd      	mov	sp, r7
 800e26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e270:	4770      	bx	lr
 800e272:	bf00      	nop
 800e274:	08015e70 	.word	0x08015e70

0800e278 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e278:	b480      	push	{r7}
 800e27a:	b087      	sub	sp, #28
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	4603      	mov	r3, r0
 800e280:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e282:	88fb      	ldrh	r3, [r7, #6]
 800e284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e288:	d201      	bcs.n	800e28e <ff_wtoupper+0x16>
 800e28a:	4b3e      	ldr	r3, [pc, #248]	; (800e384 <ff_wtoupper+0x10c>)
 800e28c:	e000      	b.n	800e290 <ff_wtoupper+0x18>
 800e28e:	4b3e      	ldr	r3, [pc, #248]	; (800e388 <ff_wtoupper+0x110>)
 800e290:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800e292:	697b      	ldr	r3, [r7, #20]
 800e294:	1c9a      	adds	r2, r3, #2
 800e296:	617a      	str	r2, [r7, #20]
 800e298:	881b      	ldrh	r3, [r3, #0]
 800e29a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800e29c:	8a7b      	ldrh	r3, [r7, #18]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d068      	beq.n	800e374 <ff_wtoupper+0xfc>
 800e2a2:	88fa      	ldrh	r2, [r7, #6]
 800e2a4:	8a7b      	ldrh	r3, [r7, #18]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d364      	bcc.n	800e374 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e2aa:	697b      	ldr	r3, [r7, #20]
 800e2ac:	1c9a      	adds	r2, r3, #2
 800e2ae:	617a      	str	r2, [r7, #20]
 800e2b0:	881b      	ldrh	r3, [r3, #0]
 800e2b2:	823b      	strh	r3, [r7, #16]
 800e2b4:	8a3b      	ldrh	r3, [r7, #16]
 800e2b6:	0a1b      	lsrs	r3, r3, #8
 800e2b8:	81fb      	strh	r3, [r7, #14]
 800e2ba:	8a3b      	ldrh	r3, [r7, #16]
 800e2bc:	b2db      	uxtb	r3, r3
 800e2be:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800e2c0:	88fa      	ldrh	r2, [r7, #6]
 800e2c2:	8a79      	ldrh	r1, [r7, #18]
 800e2c4:	8a3b      	ldrh	r3, [r7, #16]
 800e2c6:	440b      	add	r3, r1
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	da49      	bge.n	800e360 <ff_wtoupper+0xe8>
			switch (cmd) {
 800e2cc:	89fb      	ldrh	r3, [r7, #14]
 800e2ce:	2b08      	cmp	r3, #8
 800e2d0:	d84f      	bhi.n	800e372 <ff_wtoupper+0xfa>
 800e2d2:	a201      	add	r2, pc, #4	; (adr r2, 800e2d8 <ff_wtoupper+0x60>)
 800e2d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2d8:	0800e2fd 	.word	0x0800e2fd
 800e2dc:	0800e30f 	.word	0x0800e30f
 800e2e0:	0800e325 	.word	0x0800e325
 800e2e4:	0800e32d 	.word	0x0800e32d
 800e2e8:	0800e335 	.word	0x0800e335
 800e2ec:	0800e33d 	.word	0x0800e33d
 800e2f0:	0800e345 	.word	0x0800e345
 800e2f4:	0800e34d 	.word	0x0800e34d
 800e2f8:	0800e355 	.word	0x0800e355
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e2fc:	88fa      	ldrh	r2, [r7, #6]
 800e2fe:	8a7b      	ldrh	r3, [r7, #18]
 800e300:	1ad3      	subs	r3, r2, r3
 800e302:	005b      	lsls	r3, r3, #1
 800e304:	697a      	ldr	r2, [r7, #20]
 800e306:	4413      	add	r3, r2
 800e308:	881b      	ldrh	r3, [r3, #0]
 800e30a:	80fb      	strh	r3, [r7, #6]
 800e30c:	e027      	b.n	800e35e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e30e:	88fa      	ldrh	r2, [r7, #6]
 800e310:	8a7b      	ldrh	r3, [r7, #18]
 800e312:	1ad3      	subs	r3, r2, r3
 800e314:	b29b      	uxth	r3, r3
 800e316:	f003 0301 	and.w	r3, r3, #1
 800e31a:	b29b      	uxth	r3, r3
 800e31c:	88fa      	ldrh	r2, [r7, #6]
 800e31e:	1ad3      	subs	r3, r2, r3
 800e320:	80fb      	strh	r3, [r7, #6]
 800e322:	e01c      	b.n	800e35e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e324:	88fb      	ldrh	r3, [r7, #6]
 800e326:	3b10      	subs	r3, #16
 800e328:	80fb      	strh	r3, [r7, #6]
 800e32a:	e018      	b.n	800e35e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e32c:	88fb      	ldrh	r3, [r7, #6]
 800e32e:	3b20      	subs	r3, #32
 800e330:	80fb      	strh	r3, [r7, #6]
 800e332:	e014      	b.n	800e35e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e334:	88fb      	ldrh	r3, [r7, #6]
 800e336:	3b30      	subs	r3, #48	; 0x30
 800e338:	80fb      	strh	r3, [r7, #6]
 800e33a:	e010      	b.n	800e35e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e33c:	88fb      	ldrh	r3, [r7, #6]
 800e33e:	3b1a      	subs	r3, #26
 800e340:	80fb      	strh	r3, [r7, #6]
 800e342:	e00c      	b.n	800e35e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e344:	88fb      	ldrh	r3, [r7, #6]
 800e346:	3308      	adds	r3, #8
 800e348:	80fb      	strh	r3, [r7, #6]
 800e34a:	e008      	b.n	800e35e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e34c:	88fb      	ldrh	r3, [r7, #6]
 800e34e:	3b50      	subs	r3, #80	; 0x50
 800e350:	80fb      	strh	r3, [r7, #6]
 800e352:	e004      	b.n	800e35e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e354:	88fb      	ldrh	r3, [r7, #6]
 800e356:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800e35a:	80fb      	strh	r3, [r7, #6]
 800e35c:	bf00      	nop
			}
			break;
 800e35e:	e008      	b.n	800e372 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800e360:	89fb      	ldrh	r3, [r7, #14]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d195      	bne.n	800e292 <ff_wtoupper+0x1a>
 800e366:	8a3b      	ldrh	r3, [r7, #16]
 800e368:	005b      	lsls	r3, r3, #1
 800e36a:	697a      	ldr	r2, [r7, #20]
 800e36c:	4413      	add	r3, r2
 800e36e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800e370:	e78f      	b.n	800e292 <ff_wtoupper+0x1a>
			break;
 800e372:	bf00      	nop
	}

	return chr;
 800e374:	88fb      	ldrh	r3, [r7, #6]
}
 800e376:	4618      	mov	r0, r3
 800e378:	371c      	adds	r7, #28
 800e37a:	46bd      	mov	sp, r7
 800e37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e380:	4770      	bx	lr
 800e382:	bf00      	nop
 800e384:	08015f70 	.word	0x08015f70
 800e388:	08016164 	.word	0x08016164

0800e38c <_tdcgp21_CS>:
#include "../TDC-GP21_defs.h"
#include <stdbool.h>
extern SPI_HandleTypeDef hspi4;

static void _tdcgp21_CS(void * intf_ptr, bool mode)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b084      	sub	sp, #16
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
 800e394:	460b      	mov	r3, r1
 800e396:	70fb      	strb	r3, [r7, #3]
	tdcgp21_lovver_api_config_t *api_config = (tdcgp21_lovver_api_config_t *)intf_ptr;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	60fb      	str	r3, [r7, #12]
	tdcgp21_spi_pins_t *api_config_low = (tdcgp21_spi_pins_t *)api_config->intf_ptr;
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	689b      	ldr	r3, [r3, #8]
 800e3a0:	60bb      	str	r3, [r7, #8]
	if (mode)
 800e3a2:	78fb      	ldrb	r3, [r7, #3]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d008      	beq.n	800e3ba <_tdcgp21_CS+0x2e>
	{
		// Опускаем chip select для того, что бы начать общение с конкретным устройством.
		HAL_GPIO_WritePin(api_config_low->cs_port, api_config_low->cs_pin,  GPIO_PIN_RESET);
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	6898      	ldr	r0, [r3, #8]
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	899b      	ldrh	r3, [r3, #12]
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	4619      	mov	r1, r3
 800e3b4:	f7f8 fd58 	bl	8006e68 <HAL_GPIO_WritePin>
	{
		// Поднимаем chip select для того, что бы закончить общение с конкретным устройством.
		HAL_GPIO_WritePin(api_config_low->cs_port, api_config_low->cs_pin,  GPIO_PIN_SET);
		//HAL_Delay(100);
	}
}
 800e3b8:	e007      	b.n	800e3ca <_tdcgp21_CS+0x3e>
		HAL_GPIO_WritePin(api_config_low->cs_port, api_config_low->cs_pin,  GPIO_PIN_SET);
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	6898      	ldr	r0, [r3, #8]
 800e3be:	68bb      	ldr	r3, [r7, #8]
 800e3c0:	899b      	ldrh	r3, [r3, #12]
 800e3c2:	2201      	movs	r2, #1
 800e3c4:	4619      	mov	r1, r3
 800e3c6:	f7f8 fd4f 	bl	8006e68 <HAL_GPIO_WritePin>
}
 800e3ca:	bf00      	nop
 800e3cc:	3710      	adds	r7, #16
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}

0800e3d2 <tdcgp21_write_register>:


HAL_StatusTypeDef tdcgp21_write_register(void * intf_ptr, uint8_t reg_addr, const uint8_t * reg_data, size_t data_size)
{
 800e3d2:	b580      	push	{r7, lr}
 800e3d4:	b086      	sub	sp, #24
 800e3d6:	af00      	add	r7, sp, #0
 800e3d8:	60f8      	str	r0, [r7, #12]
 800e3da:	607a      	str	r2, [r7, #4]
 800e3dc:	603b      	str	r3, [r7, #0]
 800e3de:	460b      	mov	r3, r1
 800e3e0:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef errcode1;
	tdcgp21_lovver_api_config_t *api_config = (tdcgp21_lovver_api_config_t *)intf_ptr;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	617b      	str	r3, [r7, #20]
	api_config->tdc21_CS(intf_ptr, true);
 800e3e6:	697b      	ldr	r3, [r7, #20]
 800e3e8:	685b      	ldr	r3, [r3, #4]
 800e3ea:	2101      	movs	r1, #1
 800e3ec:	68f8      	ldr	r0, [r7, #12]
 800e3ee:	4798      	blx	r3

	// Добавляем в 5 битов адреса еще 3 бита для записи в регистр
	reg_addr = TDC21_W_REGISTER | reg_addr;
 800e3f0:	7afb      	ldrb	r3, [r7, #11]
 800e3f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e3f6:	b2db      	uxtb	r3, r3
 800e3f8:	72fb      	strb	r3, [r7, #11]

	// Передаем адресс регистра, в который пишем и пишем в регистр
	errcode1 = HAL_SPI_Transmit(api_config->hspi, &reg_addr, 1, HAL_MAX_DELAY);
 800e3fa:	697b      	ldr	r3, [r7, #20]
 800e3fc:	6818      	ldr	r0, [r3, #0]
 800e3fe:	f107 010b 	add.w	r1, r7, #11
 800e402:	f04f 33ff 	mov.w	r3, #4294967295
 800e406:	2201      	movs	r2, #1
 800e408:	f7fb f98d 	bl	8009726 <HAL_SPI_Transmit>
 800e40c:	4603      	mov	r3, r0
 800e40e:	74fb      	strb	r3, [r7, #19]
	if(errcode1)
 800e410:	7cfb      	ldrb	r3, [r7, #19]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d006      	beq.n	800e424 <tdcgp21_write_register+0x52>
	{
		api_config->tdc21_CS(intf_ptr, false);
 800e416:	697b      	ldr	r3, [r7, #20]
 800e418:	685b      	ldr	r3, [r3, #4]
 800e41a:	2100      	movs	r1, #0
 800e41c:	68f8      	ldr	r0, [r7, #12]
 800e41e:	4798      	blx	r3
		return errcode1;
 800e420:	7cfb      	ldrb	r3, [r7, #19]
 800e422:	e00e      	b.n	800e442 <tdcgp21_write_register+0x70>
	}
	HAL_SPI_Transmit(api_config->hspi, reg_data, data_size, HAL_MAX_DELAY);
 800e424:	697b      	ldr	r3, [r7, #20]
 800e426:	6818      	ldr	r0, [r3, #0]
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	b29a      	uxth	r2, r3
 800e42c:	f04f 33ff 	mov.w	r3, #4294967295
 800e430:	6879      	ldr	r1, [r7, #4]
 800e432:	f7fb f978 	bl	8009726 <HAL_SPI_Transmit>

	api_config->tdc21_CS(intf_ptr, false);
 800e436:	697b      	ldr	r3, [r7, #20]
 800e438:	685b      	ldr	r3, [r3, #4]
 800e43a:	2100      	movs	r1, #0
 800e43c:	68f8      	ldr	r0, [r7, #12]
 800e43e:	4798      	blx	r3
	return errcode1;
 800e440:	7cfb      	ldrb	r3, [r7, #19]
}
 800e442:	4618      	mov	r0, r3
 800e444:	3718      	adds	r7, #24
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}

0800e44a <tdc21_start_tof>:
	int popa  = TDC21_POWER_ON_RESET;
	HAL_SPI_Transmit(api_config->hspi, &popa, 1, HAL_MAX_DELAY);
}

void tdc21_start_tof(tdcgp21_lovver_api_config_t* api_config)
{
 800e44a:	b580      	push	{r7, lr}
 800e44c:	b084      	sub	sp, #16
 800e44e:	af00      	add	r7, sp, #0
 800e450:	6078      	str	r0, [r7, #4]
	int jopa = TDC21_START_TOF;
 800e452:	2301      	movs	r3, #1
 800e454:	60fb      	str	r3, [r7, #12]
	HAL_SPI_Transmit(api_config->hspi, &jopa, 1, HAL_MAX_DELAY);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6818      	ldr	r0, [r3, #0]
 800e45a:	f107 010c 	add.w	r1, r7, #12
 800e45e:	f04f 33ff 	mov.w	r3, #4294967295
 800e462:	2201      	movs	r2, #1
 800e464:	f7fb f95f 	bl	8009726 <HAL_SPI_Transmit>
}
 800e468:	bf00      	nop
 800e46a:	3710      	adds	r7, #16
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}

0800e470 <tdc21_spi_init>:

void tdc21_spi_init(tdcgp21_lovver_api_config_t* nrf24, SPI_HandleTypeDef *hspi, tdcgp21_spi_pins_t* pins)
{
 800e470:	b480      	push	{r7}
 800e472:	b085      	sub	sp, #20
 800e474:	af00      	add	r7, sp, #0
 800e476:	60f8      	str	r0, [r7, #12]
 800e478:	60b9      	str	r1, [r7, #8]
 800e47a:	607a      	str	r2, [r7, #4]
	nrf24->hspi = hspi;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	68ba      	ldr	r2, [r7, #8]
 800e480:	601a      	str	r2, [r3, #0]
	nrf24->tdc21_CS = _tdcgp21_CS;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	4a05      	ldr	r2, [pc, #20]	; (800e49c <tdc21_spi_init+0x2c>)
 800e486:	605a      	str	r2, [r3, #4]
	nrf24->intf_ptr = pins;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	687a      	ldr	r2, [r7, #4]
 800e48c:	609a      	str	r2, [r3, #8]
}
 800e48e:	bf00      	nop
 800e490:	3714      	adds	r7, #20
 800e492:	46bd      	mov	sp, r7
 800e494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e498:	4770      	bx	lr
 800e49a:	bf00      	nop
 800e49c:	0800e38d 	.word	0x0800e38d

0800e4a0 <tdc21_config>:
	return data*90;
}


tdc21_all_regs_t tdc21_config(void * intf_ptr)
{
 800e4a0:	b5b0      	push	{r4, r5, r7, lr}
 800e4a2:	b09a      	sub	sp, #104	; 0x68
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
 800e4a8:	6039      	str	r1, [r7, #0]
	config_all_value_ideal_t config_all_value;
	tdc21_all_regs_t reg_i;

	reg_i.reg0 = 0;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	60bb      	str	r3, [r7, #8]
	reg_i.reg1 = 0b00000000010000000000000000000000;
 800e4ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e4b2:	60fb      	str	r3, [r7, #12]
	reg_i.reg2 = 0;
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	613b      	str	r3, [r7, #16]
	reg_i.reg3 = 0;
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	617b      	str	r3, [r7, #20]
	reg_i.reg4 = 0b00100000000000000000000000000000;
 800e4bc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800e4c0:	61bb      	str	r3, [r7, #24]
	reg_i.reg5 = 0;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	61fb      	str	r3, [r7, #28]
	reg_i.reg6 = 0;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	623b      	str	r3, [r7, #32]

//настройки нулевого регистра!!!!00000000000
	config_all_value.ANZ_FIRE = 0b0010;
 800e4ca:	2302      	movs	r3, #2
 800e4cc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	config_all_value.DIV_FIRE = 0b0010;
 800e4d0:	2302      	movs	r3, #2
 800e4d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	config_all_value.ANZ_PER_CALRES = 0;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	config_all_value.DIV_CLKHS = 0;
 800e4dc:	2300      	movs	r3, #0
 800e4de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	config_all_value.START_CLKHS = 0b0001;
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	config_all_value.ANZ_PORT = 1;
 800e4e8:	2301      	movs	r3, #1
 800e4ea:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	config_all_value.TCYCLE = 0;
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	config_all_value.ANZ_FAKE = 0;
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	config_all_value.SEL_ECLK_TMP = 1;
 800e4fa:	2301      	movs	r3, #1
 800e4fc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	config_all_value.CALIBRATE = 1;
 800e500:	2301      	movs	r3, #1
 800e502:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	config_all_value.NO_CAL_AUTO = 0;
 800e506:	2300      	movs	r3, #0
 800e508:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	config_all_value.MESSB2 = 1;
 800e50c:	2301      	movs	r3, #1
 800e50e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	config_all_value.NEG_STOP2 = 0;
 800e512:	2300      	movs	r3, #0
 800e514:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	config_all_value.NEG_STOP1 = 0;
 800e518:	2300      	movs	r3, #0
 800e51a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	config_all_value.NEG_START = 0;
 800e51e:	2300      	movs	r3, #0
 800e520:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32


	///настройки первого регистра11111111111
	config_all_value.HIT1 = 0b0101;
 800e524:	2305      	movs	r3, #5
 800e526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	config_all_value.HIT2 = 0b0101;
 800e52a:	2305      	movs	r3, #5
 800e52c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	config_all_value.EN_FAST_INIT = 0;
 800e530:	2300      	movs	r3, #0
 800e532:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	config_all_value.HITIN2 = 0;
 800e536:	2300      	movs	r3, #0
 800e538:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	config_all_value.HITIN1 = 0;
 800e53c:	2300      	movs	r3, #0
 800e53e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	config_all_value.CURR32K = 1;
 800e542:	2301      	movs	r3, #1
 800e544:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	config_all_value.SEL_START_FIRE = 0;
 800e548:	2300      	movs	r3, #0
 800e54a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	config_all_value.SEL_TSTO2 = 0;
 800e54e:	2300      	movs	r3, #0
 800e550:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	config_all_value.SEL_TSTO1 = 0;
 800e554:	2300      	movs	r3, #0
 800e556:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b


	//настройки второго регистра2222222222
	config_all_value.EN_INT_TIMEOUT = 0;
 800e55a:	2300      	movs	r3, #0
 800e55c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	config_all_value.EN_INT_END_HITS = 0;
 800e560:	2300      	movs	r3, #0
 800e562:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	config_all_value.EN_INT_ALU	= 1;
 800e566:	2301      	movs	r3, #1
 800e568:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	config_all_value.RFEDGE2 = 0;
 800e56c:	2300      	movs	r3, #0
 800e56e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	config_all_value.RFEDGE1 = 0;
 800e572:	2300      	movs	r3, #0
 800e574:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	config_all_value.DELVAL1 = 0;
 800e578:	2300      	movs	r3, #0
 800e57a:	647b      	str	r3, [r7, #68]	; 0x44

	//настройки третьего регистра333333333
	config_all_value.EN_ERR_VAL = 0;
 800e57c:	2300      	movs	r3, #0
 800e57e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	config_all_value.SEL_TIMO_MB2  = 0b11;
 800e582:	2303      	movs	r3, #3
 800e584:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	config_all_value.DELVAL2 = 0b0010000000000000000;
 800e588:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e58c:	64fb      	str	r3, [r7, #76]	; 0x4c

	//настройка четвертого регистра444444444
	config_all_value.DELVAL3 = 0;
 800e58e:	2300      	movs	r3, #0
 800e590:	653b      	str	r3, [r7, #80]	; 0x50


	//настройка пятого регистра5555555555
	config_all_value.CONF_FIRE = TDC21_WREG5_FIRE_UP;
 800e592:	2302      	movs	r3, #2
 800e594:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	config_all_value.EN_STARTNOISE = 0;//
 800e598:	2300      	movs	r3, #0
 800e59a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	config_all_value.DIS_PHASESHIFT = 0;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	config_all_value.REPEAT_FIRE = 1;
 800e5a4:	2301      	movs	r3, #1
 800e5a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	config_all_value.PHASE_FIRE = TDC21_WREG5_PHASE_FIRE_NOT_INVERS;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

	//настройка шестого регистра66666666666
	config_all_value.EN_ANALOG = TDC21_WREG6_EN_ANALOG_STR1ST2_DIGITAL;
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	config_all_value.NEG_STOP_TEMP = TDC21_WREG6_NEG_STOP_TEMP_74HC14;
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	config_all_value.DA_korrt = TDC21_WREG6_DA_KORRT_0MV;
 800e5bc:	2300      	movs	r3, #0
 800e5be:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	config_all_value.TW2 = TDC21_WREG6_TW2_90MKS;
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	config_all_value.EN_INT_EEPROM = 1;//
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	config_all_value.CYCLE_TEMP = TDC21_WREG6_CYCLE_TEMP_1;
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	config_all_value.CYCLE_TOF = TDC21_WREG6_CYCLE_TOF_1;
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	config_all_value.HZ60 = TDC21_WREG6_HZ60_50_HZ;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	config_all_value.FIREO_DEF = TDC21_WREG6_FIREO_DEF_HIGHT_HZ;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	config_all_value.QUAD_RES = TDC21_WREG6_QUAD_RES_DISABLE;
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	config_all_value.DOUBLE_RES = TDC21_WREG6_DOUBLE_RES_DISABLE;
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	config_all_value.TEMP_PORTDIR = TDC21_WREG6_TEMP_PORTDIR_PT1_PT2_PT3_PT4;
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	config_all_value.ANZ_FIRE_2 = 0;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	reg_i.reg6 |= TDC21_WREG6_DOUBLE_RES(config_all_value.DOUBLE_RES);
	reg_i.reg6 |= TDC21_WREG6_TEMP_PORTDIR(config_all_value.TEMP_PORTDIR);
	reg_i.reg6 |= TDC21_WREG6_ANZ_FIRE((config_all_value.ANZ_FIRE >> 4));//////////////////////*/


	reg_i.reg0|= (uint32_t)1 << REG0_ANZ_FIRE; // 1 fire pulse
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e604:	60bb      	str	r3, [r7, #8]
	reg_i.reg0|= 1 << REG0_START_CLKHS_1_0; // 1 = Oscillator continuously on
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e60c:	60bb      	str	r3, [r7, #8]
	reg_i.reg0|= 0 << REG0_CALIBRATE; // Disable calibration
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	60bb      	str	r3, [r7, #8]
	reg_i.reg0|= 1 << REG0_NO_CAL_AUTO;// 1 = auto-calibration disabled
 800e612:	68bb      	ldr	r3, [r7, #8]
 800e614:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e618:	60bb      	str	r3, [r7, #8]
	reg_i.reg0|= 7 << REG0_DIV_FIRE; //7.= divided by 8
 800e61a:	68bb      	ldr	r3, [r7, #8]
 800e61c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800e620:	60bb      	str	r3, [r7, #8]
	reg_i.reg0|= 1 << REG0_DIV_CLKHS;//1 = clk divided by 2
 800e622:	68bb      	ldr	r3, [r7, #8]
 800e624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e628:	60bb      	str	r3, [r7, #8]

	reg_i.reg1|= (uint32_t)9 << REG1_HIT1; // 0x9 -> 1. Stop Ch2 (photo)
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
 800e630:	60fb      	str	r3, [r7, #12]
	reg_i.reg1|= 1 << REG1_HIT2; // 0x1 -> 1. Stop Ch1 (laser)
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e638:	60fb      	str	r3, [r7, #12]

	reg_i.reg1|= 1 << REG1_HITIN1; // 1 hit on ch1 expected (laser)
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e640:	60fb      	str	r3, [r7, #12]
	reg_i.reg1|= 2 << REG1_HITIN2; // 2 hits on ch2 expected (photo)
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e648:	60fb      	str	r3, [r7, #12]

	reg_i.reg1|= 1 << REG1_SEL_START_FIRE; // Fire pulse is used as TDC start
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e650:	60fb      	str	r3, [r7, #12]
	reg_i.reg1|= 7 << REG1_SEL_TSTO2;//7 = 4 kHz (32 kHz/8) clock - IMPORTANT
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800e658:	60fb      	str	r3, [r7, #12]

	reg_i.reg1|= 3 << REG1_SEL_TSTO1;//3 = STOP2 TDC output
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800e660:	60fb      	str	r3, [r7, #12]
	// *********************** REG 2
	reg_i.reg2|= (uint32_t)(1+4) << REG2_EN_INT_2_0; // 1 - timeout interr, 4 - ALU interr enable
 800e662:	693b      	ldr	r3, [r7, #16]
 800e664:	f043 4320 	orr.w	r3, r3, #2684354560	; 0xa0000000
 800e668:	613b      	str	r3, [r7, #16]
	reg_i.reg2|= 1 << REG2_RFEDGE2;//1 = rising and falling edge at channel2
 800e66a:	693b      	ldr	r3, [r7, #16]
 800e66c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e670:	613b      	str	r3, [r7, #16]

	//REG 3
	reg_i.reg3|= 1 << REG3_EN_ERR_VAL; // Timeout forces ALU to write ‘hFFFFFFFF
 800e672:	697b      	ldr	r3, [r7, #20]
 800e674:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e678:	617b      	str	r3, [r7, #20]

	//REG 5
	reg_i.reg5|= 2 << REG5_CONF_FIRE; //Bit 30 = 1: enable output FIRE_UP
 800e67a:	69fb      	ldr	r3, [r7, #28]
 800e67c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e680:	61fb      	str	r3, [r7, #28]
	reg_i.reg5|= 1 << REG5_DIS_PHASESHIFT;//Disable phase shift noise
 800e682:	69fb      	ldr	r3, [r7, #28]
 800e684:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e688:	61fb      	str	r3, [r7, #28]

	//REG 6
	//reg6|= (uint32_t)1 << REG6_EN_ANALOG;
	reg_i.reg6|= 1 << REG6_FIREO_DEF; //1 = LOW
 800e68a:	6a3b      	ldr	r3, [r7, #32]
 800e68c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e690:	623b      	str	r3, [r7, #32]

	//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=ЭТАП-=-ОТПРАВКИ=-=РЕГИСТРОВ-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-//
	tdcgp21_write_register(intf_ptr, TDC21_WREG0, (uint8_t*)&reg_i.reg0, 4);
 800e692:	f107 0208 	add.w	r2, r7, #8
 800e696:	2304      	movs	r3, #4
 800e698:	2100      	movs	r1, #0
 800e69a:	6838      	ldr	r0, [r7, #0]
 800e69c:	f7ff fe99 	bl	800e3d2 <tdcgp21_write_register>
	tdcgp21_write_register(intf_ptr, TDC21_WREG1, (uint8_t*)&reg_i.reg1, 4);
 800e6a0:	f107 0308 	add.w	r3, r7, #8
 800e6a4:	1d1a      	adds	r2, r3, #4
 800e6a6:	2304      	movs	r3, #4
 800e6a8:	2101      	movs	r1, #1
 800e6aa:	6838      	ldr	r0, [r7, #0]
 800e6ac:	f7ff fe91 	bl	800e3d2 <tdcgp21_write_register>
	tdcgp21_write_register(intf_ptr, TDC21_WREG2, (uint8_t*)&reg_i.reg2, 4);
 800e6b0:	f107 0308 	add.w	r3, r7, #8
 800e6b4:	f103 0208 	add.w	r2, r3, #8
 800e6b8:	2304      	movs	r3, #4
 800e6ba:	2102      	movs	r1, #2
 800e6bc:	6838      	ldr	r0, [r7, #0]
 800e6be:	f7ff fe88 	bl	800e3d2 <tdcgp21_write_register>
	tdcgp21_write_register(intf_ptr, TDC21_WREG3, (uint8_t*)&reg_i.reg3, 4);
 800e6c2:	f107 0308 	add.w	r3, r7, #8
 800e6c6:	f103 020c 	add.w	r2, r3, #12
 800e6ca:	2304      	movs	r3, #4
 800e6cc:	2103      	movs	r1, #3
 800e6ce:	6838      	ldr	r0, [r7, #0]
 800e6d0:	f7ff fe7f 	bl	800e3d2 <tdcgp21_write_register>
	tdcgp21_write_register(intf_ptr, TDC21_WREG4, (uint8_t*)&reg_i.reg4, 4);
 800e6d4:	f107 0308 	add.w	r3, r7, #8
 800e6d8:	f103 0210 	add.w	r2, r3, #16
 800e6dc:	2304      	movs	r3, #4
 800e6de:	2104      	movs	r1, #4
 800e6e0:	6838      	ldr	r0, [r7, #0]
 800e6e2:	f7ff fe76 	bl	800e3d2 <tdcgp21_write_register>
	tdcgp21_write_register(intf_ptr, TDC21_WREG5, (uint8_t*)&reg_i.reg5, 4);
 800e6e6:	f107 0308 	add.w	r3, r7, #8
 800e6ea:	f103 0214 	add.w	r2, r3, #20
 800e6ee:	2304      	movs	r3, #4
 800e6f0:	2105      	movs	r1, #5
 800e6f2:	6838      	ldr	r0, [r7, #0]
 800e6f4:	f7ff fe6d 	bl	800e3d2 <tdcgp21_write_register>
	tdcgp21_write_register(intf_ptr, TDC21_WREG6, (uint8_t*)&reg_i.reg6, 4);
 800e6f8:	f107 0308 	add.w	r3, r7, #8
 800e6fc:	f103 0218 	add.w	r2, r3, #24
 800e700:	2304      	movs	r3, #4
 800e702:	2106      	movs	r1, #6
 800e704:	6838      	ldr	r0, [r7, #0]
 800e706:	f7ff fe64 	bl	800e3d2 <tdcgp21_write_register>

    //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//
	return reg_i;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	461d      	mov	r5, r3
 800e70e:	f107 0408 	add.w	r4, r7, #8
 800e712:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e714:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e716:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800e71a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	3768      	adds	r7, #104	; 0x68
 800e722:	46bd      	mov	sp, r7
 800e724:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e728 <cb_push>:


#define GPS_SYMBOLS_PER_ACTS 500

static bool cb_push(uint8_t byte)
{
 800e728:	b480      	push	{r7}
 800e72a:	b085      	sub	sp, #20
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	4603      	mov	r3, r0
 800e730:	71fb      	strb	r3, [r7, #7]

	size_t next_head = uart_buffer_head + 1;
 800e732:	4b10      	ldr	r3, [pc, #64]	; (800e774 <cb_push+0x4c>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	3301      	adds	r3, #1
 800e738:	60fb      	str	r3, [r7, #12]
	if (next_head >= sizeof(uart_buffer) / sizeof(uart_buffer[0]))
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e740:	d301      	bcc.n	800e746 <cb_push+0x1e>
		next_head = 0;
 800e742:	2300      	movs	r3, #0
 800e744:	60fb      	str	r3, [r7, #12]

	if (next_head == uart_buffer_tail)
 800e746:	4b0c      	ldr	r3, [pc, #48]	; (800e778 <cb_push+0x50>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	68fa      	ldr	r2, [r7, #12]
 800e74c:	429a      	cmp	r2, r3
 800e74e:	d101      	bne.n	800e754 <cb_push+0x2c>
		return false;
 800e750:	2300      	movs	r3, #0
 800e752:	e008      	b.n	800e766 <cb_push+0x3e>

	uart_buffer[uart_buffer_head] = byte;
 800e754:	4b07      	ldr	r3, [pc, #28]	; (800e774 <cb_push+0x4c>)
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	4908      	ldr	r1, [pc, #32]	; (800e77c <cb_push+0x54>)
 800e75a:	79fa      	ldrb	r2, [r7, #7]
 800e75c:	54ca      	strb	r2, [r1, r3]
	uart_buffer_head = next_head;
 800e75e:	4a05      	ldr	r2, [pc, #20]	; (800e774 <cb_push+0x4c>)
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	6013      	str	r3, [r2, #0]
	return true;
 800e764:	2301      	movs	r3, #1
}
 800e766:	4618      	mov	r0, r3
 800e768:	3714      	adds	r7, #20
 800e76a:	46bd      	mov	sp, r7
 800e76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e770:	4770      	bx	lr
 800e772:	bf00      	nop
 800e774:	20002734 	.word	0x20002734
 800e778:	20002738 	.word	0x20002738
 800e77c:	2000234c 	.word	0x2000234c

0800e780 <gps_push_byte>:
	return 0;
}


int gps_push_byte(uint8_t byte)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b082      	sub	sp, #8
 800e784:	af00      	add	r7, sp, #0
 800e786:	4603      	mov	r3, r0
 800e788:	71fb      	strb	r3, [r7, #7]
	cb_push(byte);
 800e78a:	79fb      	ldrb	r3, [r7, #7]
 800e78c:	4618      	mov	r0, r3
 800e78e:	f7ff ffcb 	bl	800e728 <cb_push>
	return 0;
 800e792:	2300      	movs	r3, #0
}
 800e794:	4618      	mov	r0, r3
 800e796:	3708      	adds	r7, #8
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}

0800e79c <lis3mdl_write>:
#ifdef HAL_SPI_MODULE_ENABLED
extern SPI_HandleTypeDef hspi1;


static int32_t lis3mdl_write(void * intf_ptr, uint8_t reg_addr, const uint8_t * data, uint16_t data_size)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b086      	sub	sp, #24
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	60f8      	str	r0, [r7, #12]
 800e7a4:	607a      	str	r2, [r7, #4]
 800e7a6:	461a      	mov	r2, r3
 800e7a8:	460b      	mov	r3, r1
 800e7aa:	72fb      	strb	r3, [r7, #11]
 800e7ac:	4613      	mov	r3, r2
 800e7ae:	813b      	strh	r3, [r7, #8]

	struct lis_spi_intf* spi_intf = intf_ptr;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	617b      	str	r3, [r7, #20]

	reg_addr=reg_addr&~(1<<7);
 800e7b4:	7afb      	ldrb	r3, [r7, #11]
 800e7b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e7ba:	b2db      	uxtb	r3, r3
 800e7bc:	72fb      	strb	r3, [r7, #11]
	reg_addr=reg_addr|(1<<6);
 800e7be:	7afb      	ldrb	r3, [r7, #11]
 800e7c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7c4:	b2db      	uxtb	r3, r3
 800e7c6:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin (spi_intf->GPIO_Port,spi_intf->GPIO_Pin, GPIO_PIN_RESET);
 800e7c8:	697b      	ldr	r3, [r7, #20]
 800e7ca:	6818      	ldr	r0, [r3, #0]
 800e7cc:	697b      	ldr	r3, [r7, #20]
 800e7ce:	889b      	ldrh	r3, [r3, #4]
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	4619      	mov	r1, r3
 800e7d4:	f7f8 fb48 	bl	8006e68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi_intf->spi, &reg_addr, 1, HAL_MAX_DELAY);
 800e7d8:	697b      	ldr	r3, [r7, #20]
 800e7da:	6898      	ldr	r0, [r3, #8]
 800e7dc:	f107 010b 	add.w	r1, r7, #11
 800e7e0:	f04f 33ff 	mov.w	r3, #4294967295
 800e7e4:	2201      	movs	r2, #1
 800e7e6:	f7fa ff9e 	bl	8009726 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(spi_intf->spi, (uint8_t*)data, data_size, HAL_MAX_DELAY);
 800e7ea:	697b      	ldr	r3, [r7, #20]
 800e7ec:	6898      	ldr	r0, [r3, #8]
 800e7ee:	893a      	ldrh	r2, [r7, #8]
 800e7f0:	f04f 33ff 	mov.w	r3, #4294967295
 800e7f4:	6879      	ldr	r1, [r7, #4]
 800e7f6:	f7fa ff96 	bl	8009726 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_SET);
 800e7fa:	697b      	ldr	r3, [r7, #20]
 800e7fc:	6818      	ldr	r0, [r3, #0]
 800e7fe:	697b      	ldr	r3, [r7, #20]
 800e800:	889b      	ldrh	r3, [r3, #4]
 800e802:	2201      	movs	r2, #1
 800e804:	4619      	mov	r1, r3
 800e806:	f7f8 fb2f 	bl	8006e68 <HAL_GPIO_WritePin>
	return 0;
 800e80a:	2300      	movs	r3, #0
}
 800e80c:	4618      	mov	r0, r3
 800e80e:	3718      	adds	r7, #24
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}

0800e814 <lis3mdl_read>:


static int32_t lis3mdl_read(void * intf_ptr, uint8_t reg_addr, uint8_t * data, uint16_t data_size)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b086      	sub	sp, #24
 800e818:	af00      	add	r7, sp, #0
 800e81a:	60f8      	str	r0, [r7, #12]
 800e81c:	607a      	str	r2, [r7, #4]
 800e81e:	461a      	mov	r2, r3
 800e820:	460b      	mov	r3, r1
 800e822:	72fb      	strb	r3, [r7, #11]
 800e824:	4613      	mov	r3, r2
 800e826:	813b      	strh	r3, [r7, #8]
	struct lis_spi_intf* spi_intf = intf_ptr;
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	617b      	str	r3, [r7, #20]

	reg_addr=reg_addr|(1<<7);
 800e82c:	7afb      	ldrb	r3, [r7, #11]
 800e82e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e832:	b2db      	uxtb	r3, r3
 800e834:	72fb      	strb	r3, [r7, #11]
	reg_addr=reg_addr|(1<<6);
 800e836:	7afb      	ldrb	r3, [r7, #11]
 800e838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e83c:	b2db      	uxtb	r3, r3
 800e83e:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin (spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_RESET);
 800e840:	697b      	ldr	r3, [r7, #20]
 800e842:	6818      	ldr	r0, [r3, #0]
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	889b      	ldrh	r3, [r3, #4]
 800e848:	2200      	movs	r2, #0
 800e84a:	4619      	mov	r1, r3
 800e84c:	f7f8 fb0c 	bl	8006e68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi_intf->spi, &reg_addr, 1, HAL_MAX_DELAY);
 800e850:	697b      	ldr	r3, [r7, #20]
 800e852:	6898      	ldr	r0, [r3, #8]
 800e854:	f107 010b 	add.w	r1, r7, #11
 800e858:	f04f 33ff 	mov.w	r3, #4294967295
 800e85c:	2201      	movs	r2, #1
 800e85e:	f7fa ff62 	bl	8009726 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi_intf->spi, data, data_size, HAL_MAX_DELAY);
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	6898      	ldr	r0, [r3, #8]
 800e866:	893a      	ldrh	r2, [r7, #8]
 800e868:	f04f 33ff 	mov.w	r3, #4294967295
 800e86c:	6879      	ldr	r1, [r7, #4]
 800e86e:	f7fb f896 	bl	800999e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_SET);
 800e872:	697b      	ldr	r3, [r7, #20]
 800e874:	6818      	ldr	r0, [r3, #0]
 800e876:	697b      	ldr	r3, [r7, #20]
 800e878:	889b      	ldrh	r3, [r3, #4]
 800e87a:	2201      	movs	r2, #1
 800e87c:	4619      	mov	r1, r3
 800e87e:	f7f8 faf3 	bl	8006e68 <HAL_GPIO_WritePin>
	return 0;
 800e882:	2300      	movs	r3, #0
}
 800e884:	4618      	mov	r0, r3
 800e886:	3718      	adds	r7, #24
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}

0800e88c <lisset>:



void lisset(stmdev_ctx_t *ctx, struct lis_spi_intf *spi_interface)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b084      	sub	sp, #16
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
 800e894:	6039      	str	r1, [r7, #0]
// Настройка lismdl =-=-=-=-=-=-=-=-=-=-=-=-
	// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	ctx->handle = spi_interface;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	683a      	ldr	r2, [r7, #0]
 800e89a:	609a      	str	r2, [r3, #8]
	ctx->read_reg = lis3mdl_read;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	4a1a      	ldr	r2, [pc, #104]	; (800e908 <lisset+0x7c>)
 800e8a0:	605a      	str	r2, [r3, #4]
	ctx->write_reg = lis3mdl_write;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	4a19      	ldr	r2, [pc, #100]	; (800e90c <lisset+0x80>)
 800e8a6:	601a      	str	r2, [r3, #0]

	// Это придется делать прямо сразу еще до всего
	// так как иначе он с ним общаться не сможет (судя по доке по-крайней мере)
	lis3mdl_spi_mode_set(ctx, LIS3MDL_SPI_3_WIRE);
 800e8a8:	2101      	movs	r1, #1
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f000 f9e6 	bl	800ec7c <lis3mdl_spi_mode_set>

	uint8_t whoami_mag = 0x00;
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	73fb      	strb	r3, [r7, #15]
	lis3mdl_device_id_get(ctx, &whoami_mag);
 800e8b4:	f107 030f 	add.w	r3, r7, #15
 800e8b8:	4619      	mov	r1, r3
 800e8ba:	6878      	ldr	r0, [r7, #4]
 800e8bc:	f000 f9a7 	bl	800ec0e <lis3mdl_device_id_get>

	// Убедились что датчик тот который нам нужен
	// Сбросим его
	lis3mdl_reset_set(ctx, PROPERTY_ENABLE);
 800e8c0:	2101      	movs	r1, #1
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	f000 f9b4 	bl	800ec30 <lis3mdl_reset_set>
	HAL_Delay(100);
 800e8c8:	2064      	movs	r0, #100	; 0x64
 800e8ca:	f7f7 fb25 	bl	8005f18 <HAL_Delay>

	// Настраиваем
	// Обновление данных только целыми порциями
	lis3mdl_block_data_update_set(ctx, PROPERTY_ENABLE);
 800e8ce:	2101      	movs	r1, #1
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	f000 f92b 	bl	800eb2c <lis3mdl_block_data_update_set>
	// Без экономии энергии
	lis3mdl_fast_low_power_set(ctx, PROPERTY_DISABLE);
 800e8d6:	2100      	movs	r1, #0
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f000 f901 	bl	800eae0 <lis3mdl_fast_low_power_set>
	// Диапазон измерения (внимание LSM303 умеет только 16G)
	lis3mdl_full_scale_set(ctx, LIS3MDL_16_GAUSS);
 800e8de:	2103      	movs	r1, #3
 800e8e0:	6878      	ldr	r0, [r7, #4]
 800e8e2:	f000 f8b1 	bl	800ea48 <lis3mdl_full_scale_set>
	// Частота опроса
	// внимание для LSM303 запрещены значения
	// LIS3MDL_LP_1kHz, LIS3MDL_MP_560Hz, LIS3MDL_HP_300Hz, LIS3MDL_UHP_155Hz
	lis3mdl_data_rate_set(ctx, LIS3MDL_UHP_80Hz);
 800e8e6:	213e      	movs	r1, #62	; 0x3e
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	f000 f841 	bl	800e970 <lis3mdl_data_rate_set>
	// Включаем температурный сенсор
	lis3mdl_temperature_meas_set(ctx, PROPERTY_ENABLE);
 800e8ee:	2101      	movs	r1, #1
 800e8f0:	6878      	ldr	r0, [r7, #4]
 800e8f2:	f000 f883 	bl	800e9fc <lis3mdl_temperature_meas_set>
	// режим работы
	lis3mdl_operating_mode_set(ctx, LIS3MDL_CONTINUOUS_MODE);
 800e8f6:	2100      	movs	r1, #0
 800e8f8:	6878      	ldr	r0, [r7, #4]
 800e8fa:	f000 f8cb 	bl	800ea94 <lis3mdl_operating_mode_set>
}
 800e8fe:	bf00      	nop
 800e900:	3710      	adds	r7, #16
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}
 800e906:	bf00      	nop
 800e908:	0800e815 	.word	0x0800e815
 800e90c:	0800e79d 	.word	0x0800e79d

0800e910 <lis3mdl_read_reg>:
  *
  */
int32_t lis3mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800e910:	b590      	push	{r4, r7, lr}
 800e912:	b087      	sub	sp, #28
 800e914:	af00      	add	r7, sp, #0
 800e916:	60f8      	str	r0, [r7, #12]
 800e918:	607a      	str	r2, [r7, #4]
 800e91a:	461a      	mov	r2, r3
 800e91c:	460b      	mov	r3, r1
 800e91e:	72fb      	strb	r3, [r7, #11]
 800e920:	4613      	mov	r3, r2
 800e922:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	685c      	ldr	r4, [r3, #4]
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	6898      	ldr	r0, [r3, #8]
 800e92c:	893b      	ldrh	r3, [r7, #8]
 800e92e:	7af9      	ldrb	r1, [r7, #11]
 800e930:	687a      	ldr	r2, [r7, #4]
 800e932:	47a0      	blx	r4
 800e934:	6178      	str	r0, [r7, #20]

  return ret;
 800e936:	697b      	ldr	r3, [r7, #20]
}
 800e938:	4618      	mov	r0, r3
 800e93a:	371c      	adds	r7, #28
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd90      	pop	{r4, r7, pc}

0800e940 <lis3mdl_write_reg>:
  *
  */
int32_t lis3mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800e940:	b590      	push	{r4, r7, lr}
 800e942:	b087      	sub	sp, #28
 800e944:	af00      	add	r7, sp, #0
 800e946:	60f8      	str	r0, [r7, #12]
 800e948:	607a      	str	r2, [r7, #4]
 800e94a:	461a      	mov	r2, r3
 800e94c:	460b      	mov	r3, r1
 800e94e:	72fb      	strb	r3, [r7, #11]
 800e950:	4613      	mov	r3, r2
 800e952:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	681c      	ldr	r4, [r3, #0]
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	6898      	ldr	r0, [r3, #8]
 800e95c:	893b      	ldrh	r3, [r7, #8]
 800e95e:	7af9      	ldrb	r1, [r7, #11]
 800e960:	687a      	ldr	r2, [r7, #4]
 800e962:	47a0      	blx	r4
 800e964:	6178      	str	r0, [r7, #20]

  return ret;
 800e966:	697b      	ldr	r3, [r7, #20]
}
 800e968:	4618      	mov	r0, r3
 800e96a:	371c      	adds	r7, #28
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd90      	pop	{r4, r7, pc}

0800e970 <lis3mdl_data_rate_set>:
  * @param  val         change the values of om in reg CTRL_REG1
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_data_rate_set(stmdev_ctx_t *ctx, lis3mdl_om_t val)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b086      	sub	sp, #24
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	460b      	mov	r3, r1
 800e97a:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg1_t ctrl_reg1;
  lis3mdl_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800e97c:	f107 0210 	add.w	r2, r7, #16
 800e980:	2301      	movs	r3, #1
 800e982:	2120      	movs	r1, #32
 800e984:	6878      	ldr	r0, [r7, #4]
 800e986:	f7ff ffc3 	bl	800e910 <lis3mdl_read_reg>
 800e98a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800e98c:	697b      	ldr	r3, [r7, #20]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d10f      	bne.n	800e9b2 <lis3mdl_data_rate_set+0x42>
  {
    ctrl_reg1.om = (uint8_t)val;
 800e992:	78fb      	ldrb	r3, [r7, #3]
 800e994:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e998:	b2da      	uxtb	r2, r3
 800e99a:	7c3b      	ldrb	r3, [r7, #16]
 800e99c:	f362 0346 	bfi	r3, r2, #1, #6
 800e9a0:	743b      	strb	r3, [r7, #16]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800e9a2:	f107 0210 	add.w	r2, r7, #16
 800e9a6:	2301      	movs	r3, #1
 800e9a8:	2120      	movs	r1, #32
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f7ff ffc8 	bl	800e940 <lis3mdl_write_reg>
 800e9b0:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d107      	bne.n	800e9c8 <lis3mdl_data_rate_set+0x58>
  {
    /* set mode also for z axis, ctrl_reg4 -> omz */
    ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 800e9b8:	f107 020c 	add.w	r2, r7, #12
 800e9bc:	2301      	movs	r3, #1
 800e9be:	2123      	movs	r1, #35	; 0x23
 800e9c0:	6878      	ldr	r0, [r7, #4]
 800e9c2:	f7ff ffa5 	bl	800e910 <lis3mdl_read_reg>
 800e9c6:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800e9c8:	697b      	ldr	r3, [r7, #20]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d111      	bne.n	800e9f2 <lis3mdl_data_rate_set+0x82>
  {
    ctrl_reg4.omz = (uint8_t)(((uint8_t) val >> 4) & 0x03U);
 800e9ce:	78fb      	ldrb	r3, [r7, #3]
 800e9d0:	091b      	lsrs	r3, r3, #4
 800e9d2:	b2db      	uxtb	r3, r3
 800e9d4:	f003 0303 	and.w	r3, r3, #3
 800e9d8:	b2da      	uxtb	r2, r3
 800e9da:	7b3b      	ldrb	r3, [r7, #12]
 800e9dc:	f362 0383 	bfi	r3, r2, #2, #2
 800e9e0:	733b      	strb	r3, [r7, #12]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG4,
 800e9e2:	f107 020c 	add.w	r2, r7, #12
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	2123      	movs	r1, #35	; 0x23
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f7ff ffa8 	bl	800e940 <lis3mdl_write_reg>
 800e9f0:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 800e9f2:	697b      	ldr	r3, [r7, #20]
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	3718      	adds	r7, #24
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}

0800e9fc <lis3mdl_temperature_meas_set>:
  * @param  val      change the values of temp_en in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_temperature_meas_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b084      	sub	sp, #16
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
 800ea04:	460b      	mov	r3, r1
 800ea06:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800ea08:	f107 0208 	add.w	r2, r7, #8
 800ea0c:	2301      	movs	r3, #1
 800ea0e:	2120      	movs	r1, #32
 800ea10:	6878      	ldr	r0, [r7, #4]
 800ea12:	f7ff ff7d 	bl	800e910 <lis3mdl_read_reg>
 800ea16:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d10f      	bne.n	800ea3e <lis3mdl_temperature_meas_set+0x42>
  {
    ctrl_reg1.temp_en = val;
 800ea1e:	78fb      	ldrb	r3, [r7, #3]
 800ea20:	f003 0301 	and.w	r3, r3, #1
 800ea24:	b2da      	uxtb	r2, r3
 800ea26:	7a3b      	ldrb	r3, [r7, #8]
 800ea28:	f362 13c7 	bfi	r3, r2, #7, #1
 800ea2c:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800ea2e:	f107 0208 	add.w	r2, r7, #8
 800ea32:	2301      	movs	r3, #1
 800ea34:	2120      	movs	r1, #32
 800ea36:	6878      	ldr	r0, [r7, #4]
 800ea38:	f7ff ff82 	bl	800e940 <lis3mdl_write_reg>
 800ea3c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ea3e:	68fb      	ldr	r3, [r7, #12]
}
 800ea40:	4618      	mov	r0, r3
 800ea42:	3710      	adds	r7, #16
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}

0800ea48 <lis3mdl_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_full_scale_set(stmdev_ctx_t *ctx, lis3mdl_fs_t val)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b084      	sub	sp, #16
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
 800ea50:	460b      	mov	r3, r1
 800ea52:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800ea54:	f107 0208 	add.w	r2, r7, #8
 800ea58:	2301      	movs	r3, #1
 800ea5a:	2121      	movs	r1, #33	; 0x21
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	f7ff ff57 	bl	800e910 <lis3mdl_read_reg>
 800ea62:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d10f      	bne.n	800ea8a <lis3mdl_full_scale_set+0x42>
  {
    ctrl_reg2.fs = (uint8_t)val;
 800ea6a:	78fb      	ldrb	r3, [r7, #3]
 800ea6c:	f003 0303 	and.w	r3, r3, #3
 800ea70:	b2da      	uxtb	r2, r3
 800ea72:	7a3b      	ldrb	r3, [r7, #8]
 800ea74:	f362 1346 	bfi	r3, r2, #5, #2
 800ea78:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800ea7a:	f107 0208 	add.w	r2, r7, #8
 800ea7e:	2301      	movs	r3, #1
 800ea80:	2121      	movs	r1, #33	; 0x21
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f7ff ff5c 	bl	800e940 <lis3mdl_write_reg>
 800ea88:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
}
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	3710      	adds	r7, #16
 800ea90:	46bd      	mov	sp, r7
 800ea92:	bd80      	pop	{r7, pc}

0800ea94 <lis3mdl_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis3mdl_md_t val)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b084      	sub	sp, #16
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
 800ea9c:	460b      	mov	r3, r1
 800ea9e:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg3_t ctrl_reg3;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 800eaa0:	f107 0208 	add.w	r2, r7, #8
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	2122      	movs	r1, #34	; 0x22
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	f7ff ff31 	bl	800e910 <lis3mdl_read_reg>
 800eaae:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d10f      	bne.n	800ead6 <lis3mdl_operating_mode_set+0x42>
  {
    ctrl_reg3.md = (uint8_t)val;
 800eab6:	78fb      	ldrb	r3, [r7, #3]
 800eab8:	f003 0303 	and.w	r3, r3, #3
 800eabc:	b2da      	uxtb	r2, r3
 800eabe:	7a3b      	ldrb	r3, [r7, #8]
 800eac0:	f362 0301 	bfi	r3, r2, #0, #2
 800eac4:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 800eac6:	f107 0208 	add.w	r2, r7, #8
 800eaca:	2301      	movs	r3, #1
 800eacc:	2122      	movs	r1, #34	; 0x22
 800eace:	6878      	ldr	r0, [r7, #4]
 800ead0:	f7ff ff36 	bl	800e940 <lis3mdl_write_reg>
 800ead4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ead6:	68fb      	ldr	r3, [r7, #12]
}
 800ead8:	4618      	mov	r0, r3
 800eada:	3710      	adds	r7, #16
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}

0800eae0 <lis3mdl_fast_low_power_set>:
  * @param  val      change the values of lp in reg CTRL_REG3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_fast_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b084      	sub	sp, #16
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	460b      	mov	r3, r1
 800eaea:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg3_t ctrl_reg3;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 800eaec:	f107 0208 	add.w	r2, r7, #8
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	2122      	movs	r1, #34	; 0x22
 800eaf4:	6878      	ldr	r0, [r7, #4]
 800eaf6:	f7ff ff0b 	bl	800e910 <lis3mdl_read_reg>
 800eafa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d10f      	bne.n	800eb22 <lis3mdl_fast_low_power_set+0x42>
  {
    ctrl_reg3.lp = val;
 800eb02:	78fb      	ldrb	r3, [r7, #3]
 800eb04:	f003 0301 	and.w	r3, r3, #1
 800eb08:	b2da      	uxtb	r2, r3
 800eb0a:	7a3b      	ldrb	r3, [r7, #8]
 800eb0c:	f362 1345 	bfi	r3, r2, #5, #1
 800eb10:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 800eb12:	f107 0208 	add.w	r2, r7, #8
 800eb16:	2301      	movs	r3, #1
 800eb18:	2122      	movs	r1, #34	; 0x22
 800eb1a:	6878      	ldr	r0, [r7, #4]
 800eb1c:	f7ff ff10 	bl	800e940 <lis3mdl_write_reg>
 800eb20:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800eb22:	68fb      	ldr	r3, [r7, #12]
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	3710      	adds	r7, #16
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}

0800eb2c <lis3mdl_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG5
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b084      	sub	sp, #16
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
 800eb34:	460b      	mov	r3, r1
 800eb36:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg5_t ctrl_reg5;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 800eb38:	f107 0208 	add.w	r2, r7, #8
 800eb3c:	2301      	movs	r3, #1
 800eb3e:	2124      	movs	r1, #36	; 0x24
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f7ff fee5 	bl	800e910 <lis3mdl_read_reg>
 800eb46:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d10f      	bne.n	800eb6e <lis3mdl_block_data_update_set+0x42>
  {
    ctrl_reg5.bdu = val;
 800eb4e:	78fb      	ldrb	r3, [r7, #3]
 800eb50:	f003 0301 	and.w	r3, r3, #1
 800eb54:	b2da      	uxtb	r2, r3
 800eb56:	7a3b      	ldrb	r3, [r7, #8]
 800eb58:	f362 1386 	bfi	r3, r2, #6, #1
 800eb5c:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 800eb5e:	f107 0208 	add.w	r2, r7, #8
 800eb62:	2301      	movs	r3, #1
 800eb64:	2124      	movs	r1, #36	; 0x24
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f7ff feea 	bl	800e940 <lis3mdl_write_reg>
 800eb6c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800eb6e:	68fb      	ldr	r3, [r7, #12]
}
 800eb70:	4618      	mov	r0, r3
 800eb72:	3710      	adds	r7, #16
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}

0800eb78 <lis3mdl_magnetic_raw_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b086      	sub	sp, #24
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
 800eb80:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_OUT_X_L, (uint8_t *) buff, 6);
 800eb82:	f107 020c 	add.w	r2, r7, #12
 800eb86:	2306      	movs	r3, #6
 800eb88:	2128      	movs	r1, #40	; 0x28
 800eb8a:	6878      	ldr	r0, [r7, #4]
 800eb8c:	f7ff fec0 	bl	800e910 <lis3mdl_read_reg>
 800eb90:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800eb92:	7b7b      	ldrb	r3, [r7, #13]
 800eb94:	b21a      	sxth	r2, r3
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eba0:	b29b      	uxth	r3, r3
 800eba2:	021b      	lsls	r3, r3, #8
 800eba4:	b29a      	uxth	r2, r3
 800eba6:	7b3b      	ldrb	r3, [r7, #12]
 800eba8:	b29b      	uxth	r3, r3
 800ebaa:	4413      	add	r3, r2
 800ebac:	b29b      	uxth	r3, r3
 800ebae:	b21a      	sxth	r2, r3
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800ebb4:	7bfa      	ldrb	r2, [r7, #15]
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	3302      	adds	r3, #2
 800ebba:	b212      	sxth	r2, r2
 800ebbc:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	3302      	adds	r3, #2
 800ebc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ebc6:	b29b      	uxth	r3, r3
 800ebc8:	021b      	lsls	r3, r3, #8
 800ebca:	b29a      	uxth	r2, r3
 800ebcc:	7bbb      	ldrb	r3, [r7, #14]
 800ebce:	b29b      	uxth	r3, r3
 800ebd0:	4413      	add	r3, r2
 800ebd2:	b29a      	uxth	r2, r3
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	3302      	adds	r3, #2
 800ebd8:	b212      	sxth	r2, r2
 800ebda:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800ebdc:	7c7a      	ldrb	r2, [r7, #17]
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	3304      	adds	r3, #4
 800ebe2:	b212      	sxth	r2, r2
 800ebe4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	3304      	adds	r3, #4
 800ebea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ebee:	b29b      	uxth	r3, r3
 800ebf0:	021b      	lsls	r3, r3, #8
 800ebf2:	b29a      	uxth	r2, r3
 800ebf4:	7c3b      	ldrb	r3, [r7, #16]
 800ebf6:	b29b      	uxth	r3, r3
 800ebf8:	4413      	add	r3, r2
 800ebfa:	b29a      	uxth	r2, r3
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	3304      	adds	r3, #4
 800ec00:	b212      	sxth	r2, r2
 800ec02:	801a      	strh	r2, [r3, #0]

  return ret;
 800ec04:	697b      	ldr	r3, [r7, #20]
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3718      	adds	r7, #24
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}

0800ec0e <lis3mdl_device_id_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800ec0e:	b580      	push	{r7, lr}
 800ec10:	b084      	sub	sp, #16
 800ec12:	af00      	add	r7, sp, #0
 800ec14:	6078      	str	r0, [r7, #4]
 800ec16:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_WHO_AM_I, (uint8_t *) buff, 1);
 800ec18:	2301      	movs	r3, #1
 800ec1a:	683a      	ldr	r2, [r7, #0]
 800ec1c:	210f      	movs	r1, #15
 800ec1e:	6878      	ldr	r0, [r7, #4]
 800ec20:	f7ff fe76 	bl	800e910 <lis3mdl_read_reg>
 800ec24:	60f8      	str	r0, [r7, #12]

  return ret;
 800ec26:	68fb      	ldr	r3, [r7, #12]
}
 800ec28:	4618      	mov	r0, r3
 800ec2a:	3710      	adds	r7, #16
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}

0800ec30 <lis3mdl_reset_set>:
  * @param  val      change the values of soft_rst in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b084      	sub	sp, #16
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
 800ec38:	460b      	mov	r3, r1
 800ec3a:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800ec3c:	f107 0208 	add.w	r2, r7, #8
 800ec40:	2301      	movs	r3, #1
 800ec42:	2121      	movs	r1, #33	; 0x21
 800ec44:	6878      	ldr	r0, [r7, #4]
 800ec46:	f7ff fe63 	bl	800e910 <lis3mdl_read_reg>
 800ec4a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d10f      	bne.n	800ec72 <lis3mdl_reset_set+0x42>
  {
    ctrl_reg2.soft_rst = val;
 800ec52:	78fb      	ldrb	r3, [r7, #3]
 800ec54:	f003 0301 	and.w	r3, r3, #1
 800ec58:	b2da      	uxtb	r2, r3
 800ec5a:	7a3b      	ldrb	r3, [r7, #8]
 800ec5c:	f362 0382 	bfi	r3, r2, #2, #1
 800ec60:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800ec62:	f107 0208 	add.w	r2, r7, #8
 800ec66:	2301      	movs	r3, #1
 800ec68:	2121      	movs	r1, #33	; 0x21
 800ec6a:	6878      	ldr	r0, [r7, #4]
 800ec6c:	f7ff fe68 	bl	800e940 <lis3mdl_write_reg>
 800ec70:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ec72:	68fb      	ldr	r3, [r7, #12]
}
 800ec74:	4618      	mov	r0, r3
 800ec76:	3710      	adds	r7, #16
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	bd80      	pop	{r7, pc}

0800ec7c <lis3mdl_spi_mode_set>:
  * @param  val      change the values of sim in reg CTRL_REG3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_spi_mode_set(stmdev_ctx_t *ctx, lis3mdl_sim_t val)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b084      	sub	sp, #16
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
 800ec84:	460b      	mov	r3, r1
 800ec86:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg3_t ctrl_reg3;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 800ec88:	f107 0208 	add.w	r2, r7, #8
 800ec8c:	2301      	movs	r3, #1
 800ec8e:	2122      	movs	r1, #34	; 0x22
 800ec90:	6878      	ldr	r0, [r7, #4]
 800ec92:	f7ff fe3d 	bl	800e910 <lis3mdl_read_reg>
 800ec96:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d10f      	bne.n	800ecbe <lis3mdl_spi_mode_set+0x42>
  {
    ctrl_reg3.sim = (uint8_t)val;
 800ec9e:	78fb      	ldrb	r3, [r7, #3]
 800eca0:	f003 0301 	and.w	r3, r3, #1
 800eca4:	b2da      	uxtb	r2, r3
 800eca6:	7a3b      	ldrb	r3, [r7, #8]
 800eca8:	f362 0382 	bfi	r3, r2, #2, #1
 800ecac:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 800ecae:	f107 0208 	add.w	r2, r7, #8
 800ecb2:	2301      	movs	r3, #1
 800ecb4:	2122      	movs	r1, #34	; 0x22
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	f7ff fe42 	bl	800e940 <lis3mdl_write_reg>
 800ecbc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	3710      	adds	r7, #16
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}

0800ecc8 <lsmd6s3_write>:

#ifdef HAL_SPI_MODULE_ENABLED
extern SPI_HandleTypeDef hspi1;

int32_t lsmd6s3_write(void * intf_ptr, uint8_t reg_addr, const uint8_t * data, uint16_t data_size)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b086      	sub	sp, #24
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	60f8      	str	r0, [r7, #12]
 800ecd0:	607a      	str	r2, [r7, #4]
 800ecd2:	461a      	mov	r2, r3
 800ecd4:	460b      	mov	r3, r1
 800ecd6:	72fb      	strb	r3, [r7, #11]
 800ecd8:	4613      	mov	r3, r2
 800ecda:	813b      	strh	r3, [r7, #8]
	struct lsm_spi_intf* spi_intf = intf_ptr;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	617b      	str	r3, [r7, #20]


	reg_addr=reg_addr&~(1<<7);
 800ece0:	7afb      	ldrb	r3, [r7, #11]
 800ece2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ece6:	b2db      	uxtb	r3, r3
 800ece8:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin (spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_RESET);
 800ecea:	697b      	ldr	r3, [r7, #20]
 800ecec:	6818      	ldr	r0, [r3, #0]
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	889b      	ldrh	r3, [r3, #4]
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	4619      	mov	r1, r3
 800ecf6:	f7f8 f8b7 	bl	8006e68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi_intf->spi, &reg_addr, 1, HAL_MAX_DELAY);
 800ecfa:	697b      	ldr	r3, [r7, #20]
 800ecfc:	6898      	ldr	r0, [r3, #8]
 800ecfe:	f107 010b 	add.w	r1, r7, #11
 800ed02:	f04f 33ff 	mov.w	r3, #4294967295
 800ed06:	2201      	movs	r2, #1
 800ed08:	f7fa fd0d 	bl	8009726 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(spi_intf->spi, (uint8_t*)data, data_size, HAL_MAX_DELAY);
 800ed0c:	697b      	ldr	r3, [r7, #20]
 800ed0e:	6898      	ldr	r0, [r3, #8]
 800ed10:	893a      	ldrh	r2, [r7, #8]
 800ed12:	f04f 33ff 	mov.w	r3, #4294967295
 800ed16:	6879      	ldr	r1, [r7, #4]
 800ed18:	f7fa fd05 	bl	8009726 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_SET);
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	6818      	ldr	r0, [r3, #0]
 800ed20:	697b      	ldr	r3, [r7, #20]
 800ed22:	889b      	ldrh	r3, [r3, #4]
 800ed24:	2201      	movs	r2, #1
 800ed26:	4619      	mov	r1, r3
 800ed28:	f7f8 f89e 	bl	8006e68 <HAL_GPIO_WritePin>
	return 0;
 800ed2c:	2300      	movs	r3, #0
}
 800ed2e:	4618      	mov	r0, r3
 800ed30:	3718      	adds	r7, #24
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}

0800ed36 <lsm6ds3_read>:


int32_t lsm6ds3_read(void * intf_ptr, uint8_t reg_addr, uint8_t * data, uint16_t data_size)
{
 800ed36:	b580      	push	{r7, lr}
 800ed38:	b086      	sub	sp, #24
 800ed3a:	af00      	add	r7, sp, #0
 800ed3c:	60f8      	str	r0, [r7, #12]
 800ed3e:	607a      	str	r2, [r7, #4]
 800ed40:	461a      	mov	r2, r3
 800ed42:	460b      	mov	r3, r1
 800ed44:	72fb      	strb	r3, [r7, #11]
 800ed46:	4613      	mov	r3, r2
 800ed48:	813b      	strh	r3, [r7, #8]
	struct lsm_spi_intf* spi_intf = intf_ptr;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	617b      	str	r3, [r7, #20]


	reg_addr=reg_addr|(1<<7);
 800ed4e:	7afb      	ldrb	r3, [r7, #11]
 800ed50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ed54:	b2db      	uxtb	r3, r3
 800ed56:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin (spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_RESET);
 800ed58:	697b      	ldr	r3, [r7, #20]
 800ed5a:	6818      	ldr	r0, [r3, #0]
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	889b      	ldrh	r3, [r3, #4]
 800ed60:	2200      	movs	r2, #0
 800ed62:	4619      	mov	r1, r3
 800ed64:	f7f8 f880 	bl	8006e68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi_intf->spi, &reg_addr, 1, HAL_MAX_DELAY);
 800ed68:	697b      	ldr	r3, [r7, #20]
 800ed6a:	6898      	ldr	r0, [r3, #8]
 800ed6c:	f107 010b 	add.w	r1, r7, #11
 800ed70:	f04f 33ff 	mov.w	r3, #4294967295
 800ed74:	2201      	movs	r2, #1
 800ed76:	f7fa fcd6 	bl	8009726 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi_intf->spi, data, data_size, HAL_MAX_DELAY);
 800ed7a:	697b      	ldr	r3, [r7, #20]
 800ed7c:	6898      	ldr	r0, [r3, #8]
 800ed7e:	893a      	ldrh	r2, [r7, #8]
 800ed80:	f04f 33ff 	mov.w	r3, #4294967295
 800ed84:	6879      	ldr	r1, [r7, #4]
 800ed86:	f7fa fe0a 	bl	800999e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_SET);
 800ed8a:	697b      	ldr	r3, [r7, #20]
 800ed8c:	6818      	ldr	r0, [r3, #0]
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	889b      	ldrh	r3, [r3, #4]
 800ed92:	2201      	movs	r2, #1
 800ed94:	4619      	mov	r1, r3
 800ed96:	f7f8 f867 	bl	8006e68 <HAL_GPIO_WritePin>
	return 0;
 800ed9a:	2300      	movs	r3, #0
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3718      	adds	r7, #24
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}

0800eda4 <lsmset>:
	return 0;
}


void lsmset(stmdev_ctx_t *ctx, struct lsm_spi_intf *spi_interface)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b084      	sub	sp, #16
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
 800edac:	6039      	str	r1, [r7, #0]
	// Настройка lsm6ds3 =-=-=-=-=-=-=-=-=-=-=-=-
		// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

		ctx->handle = spi_interface;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	683a      	ldr	r2, [r7, #0]
 800edb2:	609a      	str	r2, [r3, #8]
		ctx->read_reg = lsm6ds3_read;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	4a14      	ldr	r2, [pc, #80]	; (800ee08 <lsmset+0x64>)
 800edb8:	605a      	str	r2, [r3, #4]
		ctx->write_reg = lsmd6s3_write;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	4a13      	ldr	r2, [pc, #76]	; (800ee0c <lsmset+0x68>)
 800edbe:	601a      	str	r2, [r3, #0]

		uint8_t whoami = 0x00;
 800edc0:	2300      	movs	r3, #0
 800edc2:	73fb      	strb	r3, [r7, #15]
		lsm6ds3_device_id_get(ctx, &whoami);
 800edc4:	f107 030f 	add.w	r3, r7, #15
 800edc8:	4619      	mov	r1, r3
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f000 f9a1 	bl	800f112 <lsm6ds3_device_id_get>

		lsm6ds3_reset_set(ctx, PROPERTY_ENABLE);
 800edd0:	2101      	movs	r1, #1
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	f000 f9ae 	bl	800f134 <lsm6ds3_reset_set>
		HAL_Delay(100);
 800edd8:	2064      	movs	r0, #100	; 0x64
 800edda:	f7f7 f89d 	bl	8005f18 <HAL_Delay>

		lsm6ds3_xl_full_scale_set(ctx, LSM6DS3_16g);
 800edde:	2101      	movs	r1, #1
 800ede0:	6878      	ldr	r0, [r7, #4]
 800ede2:	f000 f845 	bl	800ee70 <lsm6ds3_xl_full_scale_set>
		lsm6ds3_xl_data_rate_set(ctx, LSM6DS3_XL_ODR_104Hz);
 800ede6:	2104      	movs	r1, #4
 800ede8:	6878      	ldr	r0, [r7, #4]
 800edea:	f000 f867 	bl	800eebc <lsm6ds3_xl_data_rate_set>

		lsm6ds3_gy_full_scale_set(ctx, LSM6DS3_2000dps);
 800edee:	2106      	movs	r1, #6
 800edf0:	6878      	ldr	r0, [r7, #4]
 800edf2:	f000 f889 	bl	800ef08 <lsm6ds3_gy_full_scale_set>
		lsm6ds3_gy_data_rate_set(ctx, LSM6DS3_GY_ODR_104Hz);
 800edf6:	2104      	movs	r1, #4
 800edf8:	6878      	ldr	r0, [r7, #4]
 800edfa:	f000 f8ab 	bl	800ef54 <lsm6ds3_gy_data_rate_set>
}
 800edfe:	bf00      	nop
 800ee00:	3710      	adds	r7, #16
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}
 800ee06:	bf00      	nop
 800ee08:	0800ed37 	.word	0x0800ed37
 800ee0c:	0800ecc9 	.word	0x0800ecc9

0800ee10 <lsm6ds3_read_reg>:
  *
  */
int32_t lsm6ds3_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800ee10:	b590      	push	{r4, r7, lr}
 800ee12:	b087      	sub	sp, #28
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	60f8      	str	r0, [r7, #12]
 800ee18:	607a      	str	r2, [r7, #4]
 800ee1a:	461a      	mov	r2, r3
 800ee1c:	460b      	mov	r3, r1
 800ee1e:	72fb      	strb	r3, [r7, #11]
 800ee20:	4613      	mov	r3, r2
 800ee22:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	685c      	ldr	r4, [r3, #4]
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	6898      	ldr	r0, [r3, #8]
 800ee2c:	893b      	ldrh	r3, [r7, #8]
 800ee2e:	7af9      	ldrb	r1, [r7, #11]
 800ee30:	687a      	ldr	r2, [r7, #4]
 800ee32:	47a0      	blx	r4
 800ee34:	6178      	str	r0, [r7, #20]

  return ret;
 800ee36:	697b      	ldr	r3, [r7, #20]
}
 800ee38:	4618      	mov	r0, r3
 800ee3a:	371c      	adds	r7, #28
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd90      	pop	{r4, r7, pc}

0800ee40 <lsm6ds3_write_reg>:
  *
  */
int32_t lsm6ds3_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800ee40:	b590      	push	{r4, r7, lr}
 800ee42:	b087      	sub	sp, #28
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	60f8      	str	r0, [r7, #12]
 800ee48:	607a      	str	r2, [r7, #4]
 800ee4a:	461a      	mov	r2, r3
 800ee4c:	460b      	mov	r3, r1
 800ee4e:	72fb      	strb	r3, [r7, #11]
 800ee50:	4613      	mov	r3, r2
 800ee52:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	681c      	ldr	r4, [r3, #0]
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	6898      	ldr	r0, [r3, #8]
 800ee5c:	893b      	ldrh	r3, [r7, #8]
 800ee5e:	7af9      	ldrb	r1, [r7, #11]
 800ee60:	687a      	ldr	r2, [r7, #4]
 800ee62:	47a0      	blx	r4
 800ee64:	6178      	str	r0, [r7, #20]

  return ret;
 800ee66:	697b      	ldr	r3, [r7, #20]
}
 800ee68:	4618      	mov	r0, r3
 800ee6a:	371c      	adds	r7, #28
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	bd90      	pop	{r4, r7, pc}

0800ee70 <lsm6ds3_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6ds3_xl_fs_t val)
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b084      	sub	sp, #16
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
 800ee78:	460b      	mov	r3, r1
 800ee7a:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800ee7c:	f107 0208 	add.w	r2, r7, #8
 800ee80:	2301      	movs	r3, #1
 800ee82:	2110      	movs	r1, #16
 800ee84:	6878      	ldr	r0, [r7, #4]
 800ee86:	f7ff ffc3 	bl	800ee10 <lsm6ds3_read_reg>
 800ee8a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d10f      	bne.n	800eeb2 <lsm6ds3_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 800ee92:	78fb      	ldrb	r3, [r7, #3]
 800ee94:	f003 0303 	and.w	r3, r3, #3
 800ee98:	b2da      	uxtb	r2, r3
 800ee9a:	7a3b      	ldrb	r3, [r7, #8]
 800ee9c:	f362 0383 	bfi	r3, r2, #2, #2
 800eea0:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800eea2:	f107 0208 	add.w	r2, r7, #8
 800eea6:	2301      	movs	r3, #1
 800eea8:	2110      	movs	r1, #16
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f7ff ffc8 	bl	800ee40 <lsm6ds3_write_reg>
 800eeb0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800eeb2:	68fb      	ldr	r3, [r7, #12]
}
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	3710      	adds	r7, #16
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bd80      	pop	{r7, pc}

0800eebc <lsm6ds3_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6ds3_odr_xl_t val)
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b084      	sub	sp, #16
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
 800eec4:	460b      	mov	r3, r1
 800eec6:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800eec8:	f107 0208 	add.w	r2, r7, #8
 800eecc:	2301      	movs	r3, #1
 800eece:	2110      	movs	r1, #16
 800eed0:	6878      	ldr	r0, [r7, #4]
 800eed2:	f7ff ff9d 	bl	800ee10 <lsm6ds3_read_reg>
 800eed6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d10f      	bne.n	800eefe <lsm6ds3_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t)val;
 800eede:	78fb      	ldrb	r3, [r7, #3]
 800eee0:	f003 030f 	and.w	r3, r3, #15
 800eee4:	b2da      	uxtb	r2, r3
 800eee6:	7a3b      	ldrb	r3, [r7, #8]
 800eee8:	f362 1307 	bfi	r3, r2, #4, #4
 800eeec:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800eeee:	f107 0208 	add.w	r2, r7, #8
 800eef2:	2301      	movs	r3, #1
 800eef4:	2110      	movs	r1, #16
 800eef6:	6878      	ldr	r0, [r7, #4]
 800eef8:	f7ff ffa2 	bl	800ee40 <lsm6ds3_write_reg>
 800eefc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800eefe:	68fb      	ldr	r3, [r7, #12]
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	3710      	adds	r7, #16
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}

0800ef08 <lsm6ds3_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6ds3_fs_g_t val)
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b084      	sub	sp, #16
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
 800ef10:	460b      	mov	r3, r1
 800ef12:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800ef14:	f107 0208 	add.w	r2, r7, #8
 800ef18:	2301      	movs	r3, #1
 800ef1a:	2111      	movs	r1, #17
 800ef1c:	6878      	ldr	r0, [r7, #4]
 800ef1e:	f7ff ff77 	bl	800ee10 <lsm6ds3_read_reg>
 800ef22:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d10f      	bne.n	800ef4a <lsm6ds3_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 800ef2a:	78fb      	ldrb	r3, [r7, #3]
 800ef2c:	f003 0307 	and.w	r3, r3, #7
 800ef30:	b2da      	uxtb	r2, r3
 800ef32:	7a3b      	ldrb	r3, [r7, #8]
 800ef34:	f362 0343 	bfi	r3, r2, #1, #3
 800ef38:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800ef3a:	f107 0208 	add.w	r2, r7, #8
 800ef3e:	2301      	movs	r3, #1
 800ef40:	2111      	movs	r1, #17
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f7ff ff7c 	bl	800ee40 <lsm6ds3_write_reg>
 800ef48:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ef4a:	68fb      	ldr	r3, [r7, #12]
}
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	3710      	adds	r7, #16
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}

0800ef54 <lsm6ds3_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6ds3_odr_g_t val)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b084      	sub	sp, #16
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
 800ef5c:	460b      	mov	r3, r1
 800ef5e:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800ef60:	f107 0208 	add.w	r2, r7, #8
 800ef64:	2301      	movs	r3, #1
 800ef66:	2111      	movs	r1, #17
 800ef68:	6878      	ldr	r0, [r7, #4]
 800ef6a:	f7ff ff51 	bl	800ee10 <lsm6ds3_read_reg>
 800ef6e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d10f      	bne.n	800ef96 <lsm6ds3_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t)val;
 800ef76:	78fb      	ldrb	r3, [r7, #3]
 800ef78:	f003 030f 	and.w	r3, r3, #15
 800ef7c:	b2da      	uxtb	r2, r3
 800ef7e:	7a3b      	ldrb	r3, [r7, #8]
 800ef80:	f362 1307 	bfi	r3, r2, #4, #4
 800ef84:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800ef86:	f107 0208 	add.w	r2, r7, #8
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	2111      	movs	r1, #17
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f7ff ff56 	bl	800ee40 <lsm6ds3_write_reg>
 800ef94:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ef96:	68fb      	ldr	r3, [r7, #12]
}
 800ef98:	4618      	mov	r0, r3
 800ef9a:	3710      	adds	r7, #16
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bd80      	pop	{r7, pc}

0800efa0 <lsm6ds3_temperature_raw_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b084      	sub	sp, #16
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
 800efa8:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUT_TEMP_L, buff, 2);
 800efaa:	f107 0208 	add.w	r2, r7, #8
 800efae:	2302      	movs	r3, #2
 800efb0:	2120      	movs	r1, #32
 800efb2:	6878      	ldr	r0, [r7, #4]
 800efb4:	f7ff ff2c 	bl	800ee10 <lsm6ds3_read_reg>
 800efb8:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800efba:	7a7b      	ldrb	r3, [r7, #9]
 800efbc:	b21a      	sxth	r2, r3
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800efc8:	b29b      	uxth	r3, r3
 800efca:	021b      	lsls	r3, r3, #8
 800efcc:	b29a      	uxth	r2, r3
 800efce:	7a3b      	ldrb	r3, [r7, #8]
 800efd0:	b29b      	uxth	r3, r3
 800efd2:	4413      	add	r3, r2
 800efd4:	b29b      	uxth	r3, r3
 800efd6:	b21a      	sxth	r2, r3
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	801a      	strh	r2, [r3, #0]

  return ret;
 800efdc:	68fb      	ldr	r3, [r7, #12]
}
 800efde:	4618      	mov	r0, r3
 800efe0:	3710      	adds	r7, #16
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}

0800efe6 <lsm6ds3_angular_rate_raw_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800efe6:	b580      	push	{r7, lr}
 800efe8:	b086      	sub	sp, #24
 800efea:	af00      	add	r7, sp, #0
 800efec:	6078      	str	r0, [r7, #4]
 800efee:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUTX_L_G, buff, 6);
 800eff0:	f107 020c 	add.w	r2, r7, #12
 800eff4:	2306      	movs	r3, #6
 800eff6:	2122      	movs	r1, #34	; 0x22
 800eff8:	6878      	ldr	r0, [r7, #4]
 800effa:	f7ff ff09 	bl	800ee10 <lsm6ds3_read_reg>
 800effe:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800f000:	7b7b      	ldrb	r3, [r7, #13]
 800f002:	b21a      	sxth	r2, r3
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f00e:	b29b      	uxth	r3, r3
 800f010:	021b      	lsls	r3, r3, #8
 800f012:	b29a      	uxth	r2, r3
 800f014:	7b3b      	ldrb	r3, [r7, #12]
 800f016:	b29b      	uxth	r3, r3
 800f018:	4413      	add	r3, r2
 800f01a:	b29b      	uxth	r3, r3
 800f01c:	b21a      	sxth	r2, r3
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800f022:	7bfa      	ldrb	r2, [r7, #15]
 800f024:	683b      	ldr	r3, [r7, #0]
 800f026:	3302      	adds	r3, #2
 800f028:	b212      	sxth	r2, r2
 800f02a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	3302      	adds	r3, #2
 800f030:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f034:	b29b      	uxth	r3, r3
 800f036:	021b      	lsls	r3, r3, #8
 800f038:	b29a      	uxth	r2, r3
 800f03a:	7bbb      	ldrb	r3, [r7, #14]
 800f03c:	b29b      	uxth	r3, r3
 800f03e:	4413      	add	r3, r2
 800f040:	b29a      	uxth	r2, r3
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	3302      	adds	r3, #2
 800f046:	b212      	sxth	r2, r2
 800f048:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800f04a:	7c7a      	ldrb	r2, [r7, #17]
 800f04c:	683b      	ldr	r3, [r7, #0]
 800f04e:	3304      	adds	r3, #4
 800f050:	b212      	sxth	r2, r2
 800f052:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	3304      	adds	r3, #4
 800f058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f05c:	b29b      	uxth	r3, r3
 800f05e:	021b      	lsls	r3, r3, #8
 800f060:	b29a      	uxth	r2, r3
 800f062:	7c3b      	ldrb	r3, [r7, #16]
 800f064:	b29b      	uxth	r3, r3
 800f066:	4413      	add	r3, r2
 800f068:	b29a      	uxth	r2, r3
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	3304      	adds	r3, #4
 800f06e:	b212      	sxth	r2, r2
 800f070:	801a      	strh	r2, [r3, #0]

  return ret;
 800f072:	697b      	ldr	r3, [r7, #20]
}
 800f074:	4618      	mov	r0, r3
 800f076:	3718      	adds	r7, #24
 800f078:	46bd      	mov	sp, r7
 800f07a:	bd80      	pop	{r7, pc}

0800f07c <lsm6ds3_acceleration_raw_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b086      	sub	sp, #24
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
 800f084:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUTX_L_XL, buff, 6);
 800f086:	f107 020c 	add.w	r2, r7, #12
 800f08a:	2306      	movs	r3, #6
 800f08c:	2128      	movs	r1, #40	; 0x28
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f7ff febe 	bl	800ee10 <lsm6ds3_read_reg>
 800f094:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800f096:	7b7b      	ldrb	r3, [r7, #13]
 800f098:	b21a      	sxth	r2, r3
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f0a4:	b29b      	uxth	r3, r3
 800f0a6:	021b      	lsls	r3, r3, #8
 800f0a8:	b29a      	uxth	r2, r3
 800f0aa:	7b3b      	ldrb	r3, [r7, #12]
 800f0ac:	b29b      	uxth	r3, r3
 800f0ae:	4413      	add	r3, r2
 800f0b0:	b29b      	uxth	r3, r3
 800f0b2:	b21a      	sxth	r2, r3
 800f0b4:	683b      	ldr	r3, [r7, #0]
 800f0b6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800f0b8:	7bfa      	ldrb	r2, [r7, #15]
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	3302      	adds	r3, #2
 800f0be:	b212      	sxth	r2, r2
 800f0c0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	3302      	adds	r3, #2
 800f0c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f0ca:	b29b      	uxth	r3, r3
 800f0cc:	021b      	lsls	r3, r3, #8
 800f0ce:	b29a      	uxth	r2, r3
 800f0d0:	7bbb      	ldrb	r3, [r7, #14]
 800f0d2:	b29b      	uxth	r3, r3
 800f0d4:	4413      	add	r3, r2
 800f0d6:	b29a      	uxth	r2, r3
 800f0d8:	683b      	ldr	r3, [r7, #0]
 800f0da:	3302      	adds	r3, #2
 800f0dc:	b212      	sxth	r2, r2
 800f0de:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800f0e0:	7c7a      	ldrb	r2, [r7, #17]
 800f0e2:	683b      	ldr	r3, [r7, #0]
 800f0e4:	3304      	adds	r3, #4
 800f0e6:	b212      	sxth	r2, r2
 800f0e8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	3304      	adds	r3, #4
 800f0ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f0f2:	b29b      	uxth	r3, r3
 800f0f4:	021b      	lsls	r3, r3, #8
 800f0f6:	b29a      	uxth	r2, r3
 800f0f8:	7c3b      	ldrb	r3, [r7, #16]
 800f0fa:	b29b      	uxth	r3, r3
 800f0fc:	4413      	add	r3, r2
 800f0fe:	b29a      	uxth	r2, r3
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	3304      	adds	r3, #4
 800f104:	b212      	sxth	r2, r2
 800f106:	801a      	strh	r2, [r3, #0]

  return ret;
 800f108:	697b      	ldr	r3, [r7, #20]
}
 800f10a:	4618      	mov	r0, r3
 800f10c:	3718      	adds	r7, #24
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}

0800f112 <lsm6ds3_device_id_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800f112:	b580      	push	{r7, lr}
 800f114:	b084      	sub	sp, #16
 800f116:	af00      	add	r7, sp, #0
 800f118:	6078      	str	r0, [r7, #4]
 800f11a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_WHO_AM_I, buff, 1);
 800f11c:	2301      	movs	r3, #1
 800f11e:	683a      	ldr	r2, [r7, #0]
 800f120:	210f      	movs	r1, #15
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f7ff fe74 	bl	800ee10 <lsm6ds3_read_reg>
 800f128:	60f8      	str	r0, [r7, #12]

  return ret;
 800f12a:	68fb      	ldr	r3, [r7, #12]
}
 800f12c:	4618      	mov	r0, r3
 800f12e:	3710      	adds	r7, #16
 800f130:	46bd      	mov	sp, r7
 800f132:	bd80      	pop	{r7, pc}

0800f134 <lsm6ds3_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b084      	sub	sp, #16
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
 800f13c:	460b      	mov	r3, r1
 800f13e:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800f140:	f107 0208 	add.w	r2, r7, #8
 800f144:	2301      	movs	r3, #1
 800f146:	2112      	movs	r1, #18
 800f148:	6878      	ldr	r0, [r7, #4]
 800f14a:	f7ff fe61 	bl	800ee10 <lsm6ds3_read_reg>
 800f14e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d10f      	bne.n	800f176 <lsm6ds3_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 800f156:	78fb      	ldrb	r3, [r7, #3]
 800f158:	f003 0301 	and.w	r3, r3, #1
 800f15c:	b2da      	uxtb	r2, r3
 800f15e:	7a3b      	ldrb	r3, [r7, #8]
 800f160:	f362 0300 	bfi	r3, r2, #0, #1
 800f164:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800f166:	f107 0208 	add.w	r2, r7, #8
 800f16a:	2301      	movs	r3, #1
 800f16c:	2112      	movs	r1, #18
 800f16e:	6878      	ldr	r0, [r7, #4]
 800f170:	f7ff fe66 	bl	800ee40 <lsm6ds3_write_reg>
 800f174:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800f176:	68fb      	ldr	r3, [r7, #12]
}
 800f178:	4618      	mov	r0, r3
 800f17a:	3710      	adds	r7, #16
 800f17c:	46bd      	mov	sp, r7
 800f17e:	bd80      	pop	{r7, pc}

0800f180 <photorezistor_get_lux>:
#include "../photorezistor.h"

#ifdef HAL_ADC_MODULE_ENABLED


float photorezistor_get_lux(photorezistor_t ph) {
 800f180:	b5b0      	push	{r4, r5, r7, lr}
 800f182:	b086      	sub	sp, #24
 800f184:	af00      	add	r7, sp, #0
 800f186:	463b      	mov	r3, r7
 800f188:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_ADC_Start(ph.hadc);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	4618      	mov	r0, r3
 800f190:	f7f6 ff2a 	bl	8005fe8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(ph.hadc, 100);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2164      	movs	r1, #100	; 0x64
 800f198:	4618      	mov	r0, r3
 800f19a:	f7f7 f80c 	bl	80061b6 <HAL_ADC_PollForConversion>
	float volts = HAL_ADC_GetValue(ph.hadc) * 3.3 / 4095;	//Volts
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	f7f7 f893 	bl	80062cc <HAL_ADC_GetValue>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	f7f1 f9b3 	bl	8000514 <__aeabi_ui2d>
 800f1ae:	a347      	add	r3, pc, #284	; (adr r3, 800f2cc <photorezistor_get_lux+0x14c>)
 800f1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b4:	f7f1 fa28 	bl	8000608 <__aeabi_dmul>
 800f1b8:	4602      	mov	r2, r0
 800f1ba:	460b      	mov	r3, r1
 800f1bc:	4610      	mov	r0, r2
 800f1be:	4619      	mov	r1, r3
 800f1c0:	a344      	add	r3, pc, #272	; (adr r3, 800f2d4 <photorezistor_get_lux+0x154>)
 800f1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1c6:	f7f1 fb49 	bl	800085c <__aeabi_ddiv>
 800f1ca:	4602      	mov	r2, r0
 800f1cc:	460b      	mov	r3, r1
 800f1ce:	4610      	mov	r0, r2
 800f1d0:	4619      	mov	r1, r3
 800f1d2:	f7f1 fd11 	bl	8000bf8 <__aeabi_d2f>
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	617b      	str	r3, [r7, #20]
	float ohms = volts*(ph.resist)/(3.3-volts);		//Ohms
 800f1da:	ed97 7a00 	vldr	s14, [r7]
 800f1de:	edd7 7a05 	vldr	s15, [r7, #20]
 800f1e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1e6:	ee17 0a90 	vmov	r0, s15
 800f1ea:	f7f1 f9b5 	bl	8000558 <__aeabi_f2d>
 800f1ee:	4604      	mov	r4, r0
 800f1f0:	460d      	mov	r5, r1
 800f1f2:	6978      	ldr	r0, [r7, #20]
 800f1f4:	f7f1 f9b0 	bl	8000558 <__aeabi_f2d>
 800f1f8:	4602      	mov	r2, r0
 800f1fa:	460b      	mov	r3, r1
 800f1fc:	a133      	add	r1, pc, #204	; (adr r1, 800f2cc <photorezistor_get_lux+0x14c>)
 800f1fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f202:	f7f1 f849 	bl	8000298 <__aeabi_dsub>
 800f206:	4602      	mov	r2, r0
 800f208:	460b      	mov	r3, r1
 800f20a:	4620      	mov	r0, r4
 800f20c:	4629      	mov	r1, r5
 800f20e:	f7f1 fb25 	bl	800085c <__aeabi_ddiv>
 800f212:	4602      	mov	r2, r0
 800f214:	460b      	mov	r3, r1
 800f216:	4610      	mov	r0, r2
 800f218:	4619      	mov	r1, r3
 800f21a:	f7f1 fced 	bl	8000bf8 <__aeabi_d2f>
 800f21e:	4603      	mov	r3, r0
 800f220:	613b      	str	r3, [r7, #16]
	float lux = exp((3.823-log(ohms/1000))/0.816)*10.764;	//Lux
 800f222:	edd7 7a04 	vldr	s15, [r7, #16]
 800f226:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800f2c8 <photorezistor_get_lux+0x148>
 800f22a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800f22e:	ee16 0a90 	vmov	r0, s13
 800f232:	f7f1 f991 	bl	8000558 <__aeabi_f2d>
 800f236:	4602      	mov	r2, r0
 800f238:	460b      	mov	r3, r1
 800f23a:	ec43 2b10 	vmov	d0, r2, r3
 800f23e:	f005 f9f3 	bl	8014628 <log>
 800f242:	ec53 2b10 	vmov	r2, r3, d0
 800f246:	a11a      	add	r1, pc, #104	; (adr r1, 800f2b0 <photorezistor_get_lux+0x130>)
 800f248:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f24c:	f7f1 f824 	bl	8000298 <__aeabi_dsub>
 800f250:	4602      	mov	r2, r0
 800f252:	460b      	mov	r3, r1
 800f254:	4610      	mov	r0, r2
 800f256:	4619      	mov	r1, r3
 800f258:	a317      	add	r3, pc, #92	; (adr r3, 800f2b8 <photorezistor_get_lux+0x138>)
 800f25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f25e:	f7f1 fafd 	bl	800085c <__aeabi_ddiv>
 800f262:	4602      	mov	r2, r0
 800f264:	460b      	mov	r3, r1
 800f266:	ec43 2b17 	vmov	d7, r2, r3
 800f26a:	eeb0 0a47 	vmov.f32	s0, s14
 800f26e:	eef0 0a67 	vmov.f32	s1, s15
 800f272:	f005 f989 	bl	8014588 <exp>
 800f276:	ec51 0b10 	vmov	r0, r1, d0
 800f27a:	a311      	add	r3, pc, #68	; (adr r3, 800f2c0 <photorezistor_get_lux+0x140>)
 800f27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f280:	f7f1 f9c2 	bl	8000608 <__aeabi_dmul>
 800f284:	4602      	mov	r2, r0
 800f286:	460b      	mov	r3, r1
 800f288:	4610      	mov	r0, r2
 800f28a:	4619      	mov	r1, r3
 800f28c:	f7f1 fcb4 	bl	8000bf8 <__aeabi_d2f>
 800f290:	4603      	mov	r3, r0
 800f292:	60fb      	str	r3, [r7, #12]
	HAL_ADC_Stop(ph.hadc);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	4618      	mov	r0, r3
 800f298:	f7f6 ff5a 	bl	8006150 <HAL_ADC_Stop>
	return lux;
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	ee07 3a90 	vmov	s15, r3
}
 800f2a2:	eeb0 0a67 	vmov.f32	s0, s15
 800f2a6:	3718      	adds	r7, #24
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bdb0      	pop	{r4, r5, r7, pc}
 800f2ac:	f3af 8000 	nop.w
 800f2b0:	0624dd2f 	.word	0x0624dd2f
 800f2b4:	400e9581 	.word	0x400e9581
 800f2b8:	083126e9 	.word	0x083126e9
 800f2bc:	3fea1cac 	.word	0x3fea1cac
 800f2c0:	020c49ba 	.word	0x020c49ba
 800f2c4:	4025872b 	.word	0x4025872b
 800f2c8:	447a0000 	.word	0x447a0000
 800f2cc:	66666666 	.word	0x66666666
 800f2d0:	400a6666 	.word	0x400a6666
 800f2d4:	00000000 	.word	0x00000000
 800f2d8:	40affe00 	.word	0x40affe00

0800f2dc <_nrf24_CS>:
extern SPI_HandleTypeDef hspi2;



static void _nrf24_CS(void * intf_ptr, bool mode)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b084      	sub	sp, #16
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
 800f2e4:	460b      	mov	r3, r1
 800f2e6:	70fb      	strb	r3, [r7, #3]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	60fb      	str	r3, [r7, #12]
	nrf24_spi_pins_t *api_config_low = (nrf24_spi_pins_t *)api_config->intf_ptr;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	68db      	ldr	r3, [r3, #12]
 800f2f0:	60bb      	str	r3, [r7, #8]
	if (mode)
 800f2f2:	78fb      	ldrb	r3, [r7, #3]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d008      	beq.n	800f30a <_nrf24_CS+0x2e>
	{
		// Опускаем chip select для того, что бы начать общение с конкретным устройством.
		HAL_GPIO_WritePin(api_config_low->cs_port, api_config_low->cs_pin,  GPIO_PIN_RESET);
 800f2f8:	68bb      	ldr	r3, [r7, #8]
 800f2fa:	6898      	ldr	r0, [r3, #8]
 800f2fc:	68bb      	ldr	r3, [r7, #8]
 800f2fe:	899b      	ldrh	r3, [r3, #12]
 800f300:	2200      	movs	r2, #0
 800f302:	4619      	mov	r1, r3
 800f304:	f7f7 fdb0 	bl	8006e68 <HAL_GPIO_WritePin>
	{
		// Поднимаем chip select для того, что бы закончить общение с конкретным устройством.
		HAL_GPIO_WritePin(api_config_low->cs_port, api_config_low->cs_pin,  GPIO_PIN_SET);
		//HAL_Delay(100);
	}
}
 800f308:	e007      	b.n	800f31a <_nrf24_CS+0x3e>
		HAL_GPIO_WritePin(api_config_low->cs_port, api_config_low->cs_pin,  GPIO_PIN_SET);
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	6898      	ldr	r0, [r3, #8]
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	899b      	ldrh	r3, [r3, #12]
 800f312:	2201      	movs	r2, #1
 800f314:	4619      	mov	r1, r3
 800f316:	f7f7 fda7 	bl	8006e68 <HAL_GPIO_WritePin>
}
 800f31a:	bf00      	nop
 800f31c:	3710      	adds	r7, #16
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}

0800f322 <nrf24_read_register>:
		shift_reg_oe(api_config_low->this, false);
	}
}

void nrf24_read_register(void * intf_ptr, uint8_t reg_addr, uint8_t * reg_data, size_t data_size)
{
 800f322:	b580      	push	{r7, lr}
 800f324:	b086      	sub	sp, #24
 800f326:	af00      	add	r7, sp, #0
 800f328:	60f8      	str	r0, [r7, #12]
 800f32a:	607a      	str	r2, [r7, #4]
 800f32c:	603b      	str	r3, [r7, #0]
 800f32e:	460b      	mov	r3, r1
 800f330:	72fb      	strb	r3, [r7, #11]

	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	617b      	str	r3, [r7, #20]

	api_config->nrf24_CS(intf_ptr, true);
 800f336:	697b      	ldr	r3, [r7, #20]
 800f338:	685b      	ldr	r3, [r3, #4]
 800f33a:	2101      	movs	r1, #1
 800f33c:	68f8      	ldr	r0, [r7, #12]
 800f33e:	4798      	blx	r3

	// Добавляем в 5 битов адреса еще 3 бита для чтения из этого регистра
	reg_addr = reg_addr & ~((1 << 5) | (1 << 6) | (1 << 7));
 800f340:	7afb      	ldrb	r3, [r7, #11]
 800f342:	f003 031f 	and.w	r3, r3, #31
 800f346:	b2db      	uxtb	r3, r3
 800f348:	72fb      	strb	r3, [r7, #11]

	// Передаем адресс регистра, который читаем и читаем данные
	HAL_SPI_Transmit(api_config->hspi, &reg_addr, 1, HAL_MAX_DELAY);
 800f34a:	697b      	ldr	r3, [r7, #20]
 800f34c:	6818      	ldr	r0, [r3, #0]
 800f34e:	f107 010b 	add.w	r1, r7, #11
 800f352:	f04f 33ff 	mov.w	r3, #4294967295
 800f356:	2201      	movs	r2, #1
 800f358:	f7fa f9e5 	bl	8009726 <HAL_SPI_Transmit>
	HAL_SPI_Receive(api_config->hspi, reg_data, data_size, HAL_MAX_DELAY);
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	6818      	ldr	r0, [r3, #0]
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	b29a      	uxth	r2, r3
 800f364:	f04f 33ff 	mov.w	r3, #4294967295
 800f368:	6879      	ldr	r1, [r7, #4]
 800f36a:	f7fa fb18 	bl	800999e <HAL_SPI_Receive>

	api_config->nrf24_CS(intf_ptr, false);
 800f36e:	697b      	ldr	r3, [r7, #20]
 800f370:	685b      	ldr	r3, [r3, #4]
 800f372:	2100      	movs	r1, #0
 800f374:	68f8      	ldr	r0, [r7, #12]
 800f376:	4798      	blx	r3
}
 800f378:	bf00      	nop
 800f37a:	3718      	adds	r7, #24
 800f37c:	46bd      	mov	sp, r7
 800f37e:	bd80      	pop	{r7, pc}

0800f380 <nrf24_write_register>:

void nrf24_write_register(void * intf_ptr, uint8_t reg_addr, const uint8_t * reg_data, size_t data_size)
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b086      	sub	sp, #24
 800f384:	af00      	add	r7, sp, #0
 800f386:	60f8      	str	r0, [r7, #12]
 800f388:	607a      	str	r2, [r7, #4]
 800f38a:	603b      	str	r3, [r7, #0]
 800f38c:	460b      	mov	r3, r1
 800f38e:	72fb      	strb	r3, [r7, #11]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	617b      	str	r3, [r7, #20]
	api_config->nrf24_CS(intf_ptr, true);
 800f394:	697b      	ldr	r3, [r7, #20]
 800f396:	685b      	ldr	r3, [r3, #4]
 800f398:	2101      	movs	r1, #1
 800f39a:	68f8      	ldr	r0, [r7, #12]
 800f39c:	4798      	blx	r3

	// Добавляем в 5 битов адреса еще 3 бита для записи в регистр
	reg_addr = (reg_addr & ~((1 << 6) | (1 << 7))) | (1 << 5);
 800f39e:	7afb      	ldrb	r3, [r7, #11]
 800f3a0:	b25b      	sxtb	r3, r3
 800f3a2:	f003 031f 	and.w	r3, r3, #31
 800f3a6:	b25b      	sxtb	r3, r3
 800f3a8:	f043 0320 	orr.w	r3, r3, #32
 800f3ac:	b25b      	sxtb	r3, r3
 800f3ae:	b2db      	uxtb	r3, r3
 800f3b0:	72fb      	strb	r3, [r7, #11]

	// Передаем адресс регистра, в который пишем и пишем в регистр
	HAL_SPI_Transmit(api_config->hspi, &reg_addr, 1, HAL_MAX_DELAY);
 800f3b2:	697b      	ldr	r3, [r7, #20]
 800f3b4:	6818      	ldr	r0, [r3, #0]
 800f3b6:	f107 010b 	add.w	r1, r7, #11
 800f3ba:	f04f 33ff 	mov.w	r3, #4294967295
 800f3be:	2201      	movs	r2, #1
 800f3c0:	f7fa f9b1 	bl	8009726 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(api_config->hspi, (uint8_t*)reg_data, data_size, HAL_MAX_DELAY);
 800f3c4:	697b      	ldr	r3, [r7, #20]
 800f3c6:	6818      	ldr	r0, [r3, #0]
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	b29a      	uxth	r2, r3
 800f3cc:	f04f 33ff 	mov.w	r3, #4294967295
 800f3d0:	6879      	ldr	r1, [r7, #4]
 800f3d2:	f7fa f9a8 	bl	8009726 <HAL_SPI_Transmit>

	api_config->nrf24_CS(intf_ptr, false);
 800f3d6:	697b      	ldr	r3, [r7, #20]
 800f3d8:	685b      	ldr	r3, [r3, #4]
 800f3da:	2100      	movs	r1, #0
 800f3dc:	68f8      	ldr	r0, [r7, #12]
 800f3de:	4798      	blx	r3
}
 800f3e0:	bf00      	nop
 800f3e2:	3718      	adds	r7, #24
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd80      	pop	{r7, pc}

0800f3e8 <nrf24_read_rx_payload>:

void nrf24_read_rx_payload(void * intf_ptr, uint8_t * payload_buffer, size_t payload_buffer_size)
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b086      	sub	sp, #24
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	60f8      	str	r0, [r7, #12]
 800f3f0:	60b9      	str	r1, [r7, #8]
 800f3f2:	607a      	str	r2, [r7, #4]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	617b      	str	r3, [r7, #20]
	uint8_t command = NRF24_R_RX_PAYLOAD;
 800f3f8:	2361      	movs	r3, #97	; 0x61
 800f3fa:	74fb      	strb	r3, [r7, #19]
	uint8_t payload_size = 0;
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	74bb      	strb	r3, [r7, #18]
    // Считываем размер данных
	nrf24_get_rx_payload_size(intf_ptr, &payload_size);
 800f400:	f107 0312 	add.w	r3, r7, #18
 800f404:	4619      	mov	r1, r3
 800f406:	68f8      	ldr	r0, [r7, #12]
 800f408:	f000 f89d 	bl	800f546 <nrf24_get_rx_payload_size>
	// Если размер данных от 1 до 32, то читаем данные
	if (payload_size > 0 || payload_size < 32)
 800f40c:	7cbb      	ldrb	r3, [r7, #18]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d102      	bne.n	800f418 <nrf24_read_rx_payload+0x30>
 800f412:	7cbb      	ldrb	r3, [r7, #18]
 800f414:	2b1f      	cmp	r3, #31
 800f416:	d823      	bhi.n	800f460 <nrf24_read_rx_payload+0x78>
	{
		// Если места на запись меньше, чем у нас есть данных, читем сколько, сколько есть места
		if (payload_size > payload_buffer_size)
 800f418:	7cbb      	ldrb	r3, [r7, #18]
 800f41a:	461a      	mov	r2, r3
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	4293      	cmp	r3, r2
 800f420:	d202      	bcs.n	800f428 <nrf24_read_rx_payload+0x40>
		{
			payload_size = payload_buffer_size;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	b2db      	uxtb	r3, r3
 800f426:	74bb      	strb	r3, [r7, #18]
		}
		api_config->nrf24_CS(intf_ptr, true);
 800f428:	697b      	ldr	r3, [r7, #20]
 800f42a:	685b      	ldr	r3, [r3, #4]
 800f42c:	2101      	movs	r1, #1
 800f42e:	68f8      	ldr	r0, [r7, #12]
 800f430:	4798      	blx	r3
		// Читаем данные
		HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
 800f432:	697b      	ldr	r3, [r7, #20]
 800f434:	6818      	ldr	r0, [r3, #0]
 800f436:	f107 0113 	add.w	r1, r7, #19
 800f43a:	f04f 33ff 	mov.w	r3, #4294967295
 800f43e:	2201      	movs	r2, #1
 800f440:	f7fa f971 	bl	8009726 <HAL_SPI_Transmit>
		HAL_SPI_Receive(api_config->hspi, payload_buffer, payload_size, HAL_MAX_DELAY);
 800f444:	697b      	ldr	r3, [r7, #20]
 800f446:	6818      	ldr	r0, [r3, #0]
 800f448:	7cbb      	ldrb	r3, [r7, #18]
 800f44a:	b29a      	uxth	r2, r3
 800f44c:	f04f 33ff 	mov.w	r3, #4294967295
 800f450:	68b9      	ldr	r1, [r7, #8]
 800f452:	f7fa faa4 	bl	800999e <HAL_SPI_Receive>
		api_config->nrf24_CS(intf_ptr, false);
 800f456:	697b      	ldr	r3, [r7, #20]
 800f458:	685b      	ldr	r3, [r3, #4]
 800f45a:	2100      	movs	r1, #0
 800f45c:	68f8      	ldr	r0, [r7, #12]
 800f45e:	4798      	blx	r3
	}
}
 800f460:	bf00      	nop
 800f462:	3718      	adds	r7, #24
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}

0800f468 <nrf24_write_tx_payload>:

void nrf24_write_tx_payload(void * intf_ptr, const uint8_t * payload_buffer, size_t payload_size, bool use_ack)
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b086      	sub	sp, #24
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	60f8      	str	r0, [r7, #12]
 800f470:	60b9      	str	r1, [r7, #8]
 800f472:	607a      	str	r2, [r7, #4]
 800f474:	70fb      	strb	r3, [r7, #3]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	617b      	str	r3, [r7, #20]
	uint8_t command;
	api_config->nrf24_CS(intf_ptr, true);
 800f47a:	697b      	ldr	r3, [r7, #20]
 800f47c:	685b      	ldr	r3, [r3, #4]
 800f47e:	2101      	movs	r1, #1
 800f480:	68f8      	ldr	r0, [r7, #12]
 800f482:	4798      	blx	r3
	// Учитываем использование ack
	if (use_ack)
 800f484:	78fb      	ldrb	r3, [r7, #3]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d002      	beq.n	800f490 <nrf24_write_tx_payload+0x28>
	{
		command = NRF24_W_TX_PAYLOAD;
 800f48a:	23a0      	movs	r3, #160	; 0xa0
 800f48c:	74fb      	strb	r3, [r7, #19]
 800f48e:	e001      	b.n	800f494 <nrf24_write_tx_payload+0x2c>
	}
	else
	{
		command = NRF24_W_TX_PAYLOAD_NO_ACK;
 800f490:	23b0      	movs	r3, #176	; 0xb0
 800f492:	74fb      	strb	r3, [r7, #19]
	}
	// Передаем данные
	HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	6818      	ldr	r0, [r3, #0]
 800f498:	f107 0113 	add.w	r1, r7, #19
 800f49c:	f04f 33ff 	mov.w	r3, #4294967295
 800f4a0:	2201      	movs	r2, #1
 800f4a2:	f7fa f940 	bl	8009726 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(api_config->hspi, (uint8_t*)payload_buffer, payload_size, HAL_MAX_DELAY);
 800f4a6:	697b      	ldr	r3, [r7, #20]
 800f4a8:	6818      	ldr	r0, [r3, #0]
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	b29a      	uxth	r2, r3
 800f4ae:	f04f 33ff 	mov.w	r3, #4294967295
 800f4b2:	68b9      	ldr	r1, [r7, #8]
 800f4b4:	f7fa f937 	bl	8009726 <HAL_SPI_Transmit>

	api_config->nrf24_CS(intf_ptr, false);
 800f4b8:	697b      	ldr	r3, [r7, #20]
 800f4ba:	685b      	ldr	r3, [r3, #4]
 800f4bc:	2100      	movs	r1, #0
 800f4be:	68f8      	ldr	r0, [r7, #12]
 800f4c0:	4798      	blx	r3
}
 800f4c2:	bf00      	nop
 800f4c4:	3718      	adds	r7, #24
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	bd80      	pop	{r7, pc}

0800f4ca <nrf24_flush_rx>:

void nrf24_flush_rx(void * intf_ptr)
{
 800f4ca:	b580      	push	{r7, lr}
 800f4cc:	b084      	sub	sp, #16
 800f4ce:	af00      	add	r7, sp, #0
 800f4d0:	6078      	str	r0, [r7, #4]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	60fb      	str	r3, [r7, #12]
	uint8_t command = NRF24_FLUSH_RX;
 800f4d6:	23e2      	movs	r3, #226	; 0xe2
 800f4d8:	72fb      	strb	r3, [r7, #11]
	api_config->nrf24_CS(intf_ptr, true);
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	685b      	ldr	r3, [r3, #4]
 800f4de:	2101      	movs	r1, #1
 800f4e0:	6878      	ldr	r0, [r7, #4]
 800f4e2:	4798      	blx	r3
	HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	6818      	ldr	r0, [r3, #0]
 800f4e8:	f107 010b 	add.w	r1, r7, #11
 800f4ec:	f04f 33ff 	mov.w	r3, #4294967295
 800f4f0:	2201      	movs	r2, #1
 800f4f2:	f7fa f918 	bl	8009726 <HAL_SPI_Transmit>
	api_config->nrf24_CS(intf_ptr, false);
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	685b      	ldr	r3, [r3, #4]
 800f4fa:	2100      	movs	r1, #0
 800f4fc:	6878      	ldr	r0, [r7, #4]
 800f4fe:	4798      	blx	r3
}
 800f500:	bf00      	nop
 800f502:	3710      	adds	r7, #16
 800f504:	46bd      	mov	sp, r7
 800f506:	bd80      	pop	{r7, pc}

0800f508 <nrf24_flush_tx>:

void nrf24_flush_tx(void * intf_ptr)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b084      	sub	sp, #16
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	60fb      	str	r3, [r7, #12]
	uint8_t command = NRF24_FLUSH_TX;
 800f514:	23e1      	movs	r3, #225	; 0xe1
 800f516:	72fb      	strb	r3, [r7, #11]
	api_config->nrf24_CS(intf_ptr, true);
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	685b      	ldr	r3, [r3, #4]
 800f51c:	2101      	movs	r1, #1
 800f51e:	6878      	ldr	r0, [r7, #4]
 800f520:	4798      	blx	r3
	HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	6818      	ldr	r0, [r3, #0]
 800f526:	f107 010b 	add.w	r1, r7, #11
 800f52a:	f04f 33ff 	mov.w	r3, #4294967295
 800f52e:	2201      	movs	r2, #1
 800f530:	f7fa f8f9 	bl	8009726 <HAL_SPI_Transmit>
	api_config->nrf24_CS(intf_ptr, false);
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	685b      	ldr	r3, [r3, #4]
 800f538:	2100      	movs	r1, #0
 800f53a:	6878      	ldr	r0, [r7, #4]
 800f53c:	4798      	blx	r3
}
 800f53e:	bf00      	nop
 800f540:	3710      	adds	r7, #16
 800f542:	46bd      	mov	sp, r7
 800f544:	bd80      	pop	{r7, pc}

0800f546 <nrf24_get_rx_payload_size>:
	HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
	api_config->nrf24_CS(intf_ptr, false);
}

void nrf24_get_rx_payload_size(void * intf_ptr, uint8_t * payload_size)
{
 800f546:	b580      	push	{r7, lr}
 800f548:	b084      	sub	sp, #16
 800f54a:	af00      	add	r7, sp, #0
 800f54c:	6078      	str	r0, [r7, #4]
 800f54e:	6039      	str	r1, [r7, #0]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	60fb      	str	r3, [r7, #12]
	uint8_t command = NRF24_R_RX_PL_WID;
 800f554:	2360      	movs	r3, #96	; 0x60
 800f556:	72fb      	strb	r3, [r7, #11]
	api_config->nrf24_CS(intf_ptr, true);
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	685b      	ldr	r3, [r3, #4]
 800f55c:	2101      	movs	r1, #1
 800f55e:	6878      	ldr	r0, [r7, #4]
 800f560:	4798      	blx	r3
	HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	6818      	ldr	r0, [r3, #0]
 800f566:	f107 010b 	add.w	r1, r7, #11
 800f56a:	f04f 33ff 	mov.w	r3, #4294967295
 800f56e:	2201      	movs	r2, #1
 800f570:	f7fa f8d9 	bl	8009726 <HAL_SPI_Transmit>
	HAL_SPI_Receive(api_config->hspi, payload_size, 1, HAL_MAX_DELAY);
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	6818      	ldr	r0, [r3, #0]
 800f578:	f04f 33ff 	mov.w	r3, #4294967295
 800f57c:	2201      	movs	r2, #1
 800f57e:	6839      	ldr	r1, [r7, #0]
 800f580:	f7fa fa0d 	bl	800999e <HAL_SPI_Receive>
	api_config->nrf24_CS(intf_ptr, false);
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	685b      	ldr	r3, [r3, #4]
 800f588:	2100      	movs	r1, #0
 800f58a:	6878      	ldr	r0, [r7, #4]
 800f58c:	4798      	blx	r3
	// Если размер данных больше 32, то отчищаем rx буфер и зануляем его
    if (*payload_size > 32)
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	781b      	ldrb	r3, [r3, #0]
 800f592:	2b20      	cmp	r3, #32
 800f594:	d904      	bls.n	800f5a0 <nrf24_get_rx_payload_size+0x5a>
    {
    	nrf24_flush_rx(intf_ptr);
 800f596:	6878      	ldr	r0, [r7, #4]
 800f598:	f7ff ff97 	bl	800f4ca <nrf24_flush_rx>
    	payload_size = 0;
 800f59c:	2300      	movs	r3, #0
 800f59e:	603b      	str	r3, [r7, #0]
    }
}
 800f5a0:	bf00      	nop
 800f5a2:	3710      	adds	r7, #16
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	bd80      	pop	{r7, pc}

0800f5a8 <nrf24_get_status>:

	api_config->nrf24_CS(intf_ptr, false);
}

void nrf24_get_status(void * intf_ptr, uint8_t * status)
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b086      	sub	sp, #24
 800f5ac:	af02      	add	r7, sp, #8
 800f5ae:	6078      	str	r0, [r7, #4]
 800f5b0:	6039      	str	r1, [r7, #0]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	60fb      	str	r3, [r7, #12]
	uint8_t command = NRF24_NOP;
 800f5b6:	23ff      	movs	r3, #255	; 0xff
 800f5b8:	72fb      	strb	r3, [r7, #11]
	api_config->nrf24_CS(intf_ptr, true);
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	685b      	ldr	r3, [r3, #4]
 800f5be:	2101      	movs	r1, #1
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	4798      	blx	r3
	HAL_SPI_TransmitReceive(api_config->hspi, &command, status, 1, HAL_MAX_DELAY);
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	6818      	ldr	r0, [r3, #0]
 800f5c8:	f107 010b 	add.w	r1, r7, #11
 800f5cc:	f04f 33ff 	mov.w	r3, #4294967295
 800f5d0:	9300      	str	r3, [sp, #0]
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	683a      	ldr	r2, [r7, #0]
 800f5d6:	f7fa faf3 	bl	8009bc0 <HAL_SPI_TransmitReceive>
	api_config->nrf24_CS(intf_ptr, false);
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	685b      	ldr	r3, [r3, #4]
 800f5de:	2100      	movs	r1, #0
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	4798      	blx	r3
}
 800f5e4:	bf00      	nop
 800f5e6:	3710      	adds	r7, #16
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	bd80      	pop	{r7, pc}

0800f5ec <nrf24_ce_activate>:

void nrf24_ce_activate(void * intf_ptr, bool onoff)
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b084      	sub	sp, #16
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
 800f5f4:	460b      	mov	r3, r1
 800f5f6:	70fb      	strb	r3, [r7, #3]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	60fb      	str	r3, [r7, #12]
	api_config->nrf24_CE(intf_ptr, onoff);
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	689b      	ldr	r3, [r3, #8]
 800f600:	78fa      	ldrb	r2, [r7, #3]
 800f602:	4611      	mov	r1, r2
 800f604:	6878      	ldr	r0, [r7, #4]
 800f606:	4798      	blx	r3
}
 800f608:	bf00      	nop
 800f60a:	3710      	adds	r7, #16
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd80      	pop	{r7, pc}

0800f610 <_nrf24_CE>:

void _nrf24_CE(void * intf_ptr, bool onoff)
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b084      	sub	sp, #16
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
 800f618:	460b      	mov	r3, r1
 800f61a:	70fb      	strb	r3, [r7, #3]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	60fb      	str	r3, [r7, #12]
	nrf24_spi_pins_t *api_config_low = (nrf24_spi_pins_t *)api_config->intf_ptr;
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	68db      	ldr	r3, [r3, #12]
 800f624:	60bb      	str	r3, [r7, #8]
	if (onoff)
 800f626:	78fb      	ldrb	r3, [r7, #3]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d008      	beq.n	800f63e <_nrf24_CE+0x2e>
	{
		HAL_GPIO_WritePin(api_config_low->ce_port, api_config_low->ce_pin,  GPIO_PIN_SET);
 800f62c:	68bb      	ldr	r3, [r7, #8]
 800f62e:	6818      	ldr	r0, [r3, #0]
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	889b      	ldrh	r3, [r3, #4]
 800f634:	2201      	movs	r2, #1
 800f636:	4619      	mov	r1, r3
 800f638:	f7f7 fc16 	bl	8006e68 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(api_config_low->ce_port, api_config_low->ce_pin, GPIO_PIN_RESET);
	}
}
 800f63c:	e007      	b.n	800f64e <_nrf24_CE+0x3e>
		HAL_GPIO_WritePin(api_config_low->ce_port, api_config_low->ce_pin, GPIO_PIN_RESET);
 800f63e:	68bb      	ldr	r3, [r7, #8]
 800f640:	6818      	ldr	r0, [r3, #0]
 800f642:	68bb      	ldr	r3, [r7, #8]
 800f644:	889b      	ldrh	r3, [r3, #4]
 800f646:	2200      	movs	r2, #0
 800f648:	4619      	mov	r1, r3
 800f64a:	f7f7 fc0d 	bl	8006e68 <HAL_GPIO_WritePin>
}
 800f64e:	bf00      	nop
 800f650:	3710      	adds	r7, #16
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}
	...

0800f658 <nrf24_spi_init>:
	shift_reg_write_bit_8(api_config_low->this, api_config_low->pos_CE, onoff);
	shift_reg_oe(api_config_low->this, false);
}

void nrf24_spi_init(nrf24_lower_api_config_t* nrf24, SPI_HandleTypeDef *hspi, nrf24_spi_pins_t* pins)
{
 800f658:	b480      	push	{r7}
 800f65a:	b085      	sub	sp, #20
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	60f8      	str	r0, [r7, #12]
 800f660:	60b9      	str	r1, [r7, #8]
 800f662:	607a      	str	r2, [r7, #4]
	nrf24->hspi = hspi;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	68ba      	ldr	r2, [r7, #8]
 800f668:	601a      	str	r2, [r3, #0]
	nrf24->nrf24_CS = _nrf24_CS;
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	4a06      	ldr	r2, [pc, #24]	; (800f688 <nrf24_spi_init+0x30>)
 800f66e:	605a      	str	r2, [r3, #4]
	nrf24->nrf24_CE = _nrf24_CE;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	4a06      	ldr	r2, [pc, #24]	; (800f68c <nrf24_spi_init+0x34>)
 800f674:	609a      	str	r2, [r3, #8]
	nrf24->intf_ptr = pins;
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	687a      	ldr	r2, [r7, #4]
 800f67a:	60da      	str	r2, [r3, #12]
}
 800f67c:	bf00      	nop
 800f67e:	3714      	adds	r7, #20
 800f680:	46bd      	mov	sp, r7
 800f682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f686:	4770      	bx	lr
 800f688:	0800f2dd 	.word	0x0800f2dd
 800f68c:	0800f611 	.word	0x0800f611

0800f690 <nrf24_setup_rf>:
#include "../nrf24_lower_api.h"
#include "../nrf24_defs.h"


int nrf24_setup_rf(void * intf_ptr, const nrf24_rf_config_t * config)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b084      	sub	sp, #16
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
 800f698:	6039      	str	r1, [r7, #0]
	uint8_t rf_setup = 0;
 800f69a:	2300      	movs	r3, #0
 800f69c:	73fb      	strb	r3, [r7, #15]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_RF_SETUP, &rf_setup, 1);
 800f69e:	f107 020f 	add.w	r2, r7, #15
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	2106      	movs	r1, #6
 800f6a6:	6878      	ldr	r0, [r7, #4]
 800f6a8:	f7ff fe3b 	bl	800f322 <nrf24_read_register>
	switch (config->data_rate)
 800f6ac:	683b      	ldr	r3, [r7, #0]
 800f6ae:	781b      	ldrb	r3, [r3, #0]
 800f6b0:	2b02      	cmp	r3, #2
 800f6b2:	d01c      	beq.n	800f6ee <nrf24_setup_rf+0x5e>
 800f6b4:	2b02      	cmp	r3, #2
 800f6b6:	dc25      	bgt.n	800f704 <nrf24_setup_rf+0x74>
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d002      	beq.n	800f6c2 <nrf24_setup_rf+0x32>
 800f6bc:	2b01      	cmp	r3, #1
 800f6be:	d00b      	beq.n	800f6d8 <nrf24_setup_rf+0x48>
 800f6c0:	e020      	b.n	800f704 <nrf24_setup_rf+0x74>
	{
	case NRF24_DATARATE_250_KBIT:
		rf_setup |= NRF24_RFSETUP_RF_DR_LOW; // ставим 1
 800f6c2:	7bfb      	ldrb	r3, [r7, #15]
 800f6c4:	f043 0320 	orr.w	r3, r3, #32
 800f6c8:	b2db      	uxtb	r3, r3
 800f6ca:	73fb      	strb	r3, [r7, #15]
		rf_setup &= ~NRF24_RFSETUP_RF_DR_HIGH; // ставим 0
 800f6cc:	7bfb      	ldrb	r3, [r7, #15]
 800f6ce:	f023 0308 	bic.w	r3, r3, #8
 800f6d2:	b2db      	uxtb	r3, r3
 800f6d4:	73fb      	strb	r3, [r7, #15]
		break;
 800f6d6:	e015      	b.n	800f704 <nrf24_setup_rf+0x74>
	case NRF24_DATARATE_1000_KBIT :
		rf_setup &= ~NRF24_RFSETUP_RF_DR_LOW;
 800f6d8:	7bfb      	ldrb	r3, [r7, #15]
 800f6da:	f023 0320 	bic.w	r3, r3, #32
 800f6de:	b2db      	uxtb	r3, r3
 800f6e0:	73fb      	strb	r3, [r7, #15]
		rf_setup &= ~NRF24_RFSETUP_RF_DR_HIGH;
 800f6e2:	7bfb      	ldrb	r3, [r7, #15]
 800f6e4:	f023 0308 	bic.w	r3, r3, #8
 800f6e8:	b2db      	uxtb	r3, r3
 800f6ea:	73fb      	strb	r3, [r7, #15]
		break;
 800f6ec:	e00a      	b.n	800f704 <nrf24_setup_rf+0x74>
	case NRF24_DATARATE_2000_KBIT :
		rf_setup &= ~NRF24_RFSETUP_RF_DR_LOW;
 800f6ee:	7bfb      	ldrb	r3, [r7, #15]
 800f6f0:	f023 0320 	bic.w	r3, r3, #32
 800f6f4:	b2db      	uxtb	r3, r3
 800f6f6:	73fb      	strb	r3, [r7, #15]
		rf_setup |= NRF24_RFSETUP_RF_DR_HIGH;
 800f6f8:	7bfb      	ldrb	r3, [r7, #15]
 800f6fa:	f043 0308 	orr.w	r3, r3, #8
 800f6fe:	b2db      	uxtb	r3, r3
 800f700:	73fb      	strb	r3, [r7, #15]
		break;
 800f702:	bf00      	nop
	}

	rf_setup &= ~(NRF24_RFSETUP_RF_PWR_MASK << NRF24_RFSETUP_RF_PWR_OFFSET); // занулили
 800f704:	7bfb      	ldrb	r3, [r7, #15]
 800f706:	f023 0306 	bic.w	r3, r3, #6
 800f70a:	b2db      	uxtb	r3, r3
 800f70c:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (config->tx_power & NRF24_RFSETUP_RF_PWR_MASK) << NRF24_RFSETUP_RF_PWR_OFFSET; // записали
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	785b      	ldrb	r3, [r3, #1]
 800f712:	005b      	lsls	r3, r3, #1
 800f714:	b25b      	sxtb	r3, r3
 800f716:	f003 0306 	and.w	r3, r3, #6
 800f71a:	b25a      	sxtb	r2, r3
 800f71c:	7bfb      	ldrb	r3, [r7, #15]
 800f71e:	b25b      	sxtb	r3, r3
 800f720:	4313      	orrs	r3, r2
 800f722:	b25b      	sxtb	r3, r3
 800f724:	b2db      	uxtb	r3, r3
 800f726:	73fb      	strb	r3, [r7, #15]

	nrf24_write_register(intf_ptr, NRF24_REGADDR_RF_SETUP, &rf_setup, 1);
 800f728:	f107 020f 	add.w	r2, r7, #15
 800f72c:	2301      	movs	r3, #1
 800f72e:	2106      	movs	r1, #6
 800f730:	6878      	ldr	r0, [r7, #4]
 800f732:	f7ff fe25 	bl	800f380 <nrf24_write_register>

	uint8_t rf_channel = config->rf_channel;
 800f736:	683b      	ldr	r3, [r7, #0]
 800f738:	789b      	ldrb	r3, [r3, #2]
 800f73a:	73bb      	strb	r3, [r7, #14]
    nrf24_write_register(intf_ptr, NRF24_REGADDR_RF_CH, &rf_channel, 1);
 800f73c:	f107 020e 	add.w	r2, r7, #14
 800f740:	2301      	movs	r3, #1
 800f742:	2105      	movs	r1, #5
 800f744:	6878      	ldr	r0, [r7, #4]
 800f746:	f7ff fe1b 	bl	800f380 <nrf24_write_register>
	return 0;
 800f74a:	2300      	movs	r3, #0
}
 800f74c:	4618      	mov	r0, r3
 800f74e:	3710      	adds	r7, #16
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}

0800f754 <nrf24_setup_protocol>:


int nrf24_setup_protocol(void * intf_ptr, const nrf24_protocol_config_t * config)
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b084      	sub	sp, #16
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
 800f75c:	6039      	str	r1, [r7, #0]
    uint8_t conf_reg = 0;
 800f75e:	2300      	movs	r3, #0
 800f760:	73fb      	strb	r3, [r7, #15]
    nrf24_read_register(intf_ptr, NRF24_REGADDR_CONFIG, &conf_reg, 1);
 800f762:	f107 020f 	add.w	r2, r7, #15
 800f766:	2301      	movs	r3, #1
 800f768:	2100      	movs	r1, #0
 800f76a:	6878      	ldr	r0, [r7, #4]
 800f76c:	f7ff fdd9 	bl	800f322 <nrf24_read_register>
    switch (config->crc_size)
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	781b      	ldrb	r3, [r3, #0]
 800f774:	2b02      	cmp	r3, #2
 800f776:	d017      	beq.n	800f7a8 <nrf24_setup_protocol+0x54>
 800f778:	2b02      	cmp	r3, #2
 800f77a:	dc20      	bgt.n	800f7be <nrf24_setup_protocol+0x6a>
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d002      	beq.n	800f786 <nrf24_setup_protocol+0x32>
 800f780:	2b01      	cmp	r3, #1
 800f782:	d006      	beq.n	800f792 <nrf24_setup_protocol+0x3e>
 800f784:	e01b      	b.n	800f7be <nrf24_setup_protocol+0x6a>
    {
    case NRF24_CRCSIZE_DISABLE:
    	conf_reg &= ~NRF24_CONFIG_EN_CRC;
 800f786:	7bfb      	ldrb	r3, [r7, #15]
 800f788:	f023 0308 	bic.w	r3, r3, #8
 800f78c:	b2db      	uxtb	r3, r3
 800f78e:	73fb      	strb	r3, [r7, #15]
    	break;
 800f790:	e015      	b.n	800f7be <nrf24_setup_protocol+0x6a>
    case NRF24_CRCSIZE_1BYTE :
    	conf_reg |= NRF24_CONFIG_EN_CRC;
 800f792:	7bfb      	ldrb	r3, [r7, #15]
 800f794:	f043 0308 	orr.w	r3, r3, #8
 800f798:	b2db      	uxtb	r3, r3
 800f79a:	73fb      	strb	r3, [r7, #15]
    	conf_reg &= ~NRF24_CONFIG_CRCO;
 800f79c:	7bfb      	ldrb	r3, [r7, #15]
 800f79e:	f023 0304 	bic.w	r3, r3, #4
 800f7a2:	b2db      	uxtb	r3, r3
 800f7a4:	73fb      	strb	r3, [r7, #15]
    	break;
 800f7a6:	e00a      	b.n	800f7be <nrf24_setup_protocol+0x6a>
    case NRF24_CRCSIZE_2BYTE :
    	conf_reg |= NRF24_CONFIG_EN_CRC;
 800f7a8:	7bfb      	ldrb	r3, [r7, #15]
 800f7aa:	f043 0308 	orr.w	r3, r3, #8
 800f7ae:	b2db      	uxtb	r3, r3
 800f7b0:	73fb      	strb	r3, [r7, #15]
    	conf_reg |= NRF24_CONFIG_CRCO;
 800f7b2:	7bfb      	ldrb	r3, [r7, #15]
 800f7b4:	f043 0304 	orr.w	r3, r3, #4
 800f7b8:	b2db      	uxtb	r3, r3
 800f7ba:	73fb      	strb	r3, [r7, #15]
    	break;
 800f7bc:	bf00      	nop
    }
    nrf24_write_register(intf_ptr, NRF24_REGADDR_CONFIG, &conf_reg, 1);
 800f7be:	f107 020f 	add.w	r2, r7, #15
 800f7c2:	2301      	movs	r3, #1
 800f7c4:	2100      	movs	r1, #0
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f7ff fdda 	bl	800f380 <nrf24_write_register>

    uint8_t setup_aw = config->address_width;
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	785b      	ldrb	r3, [r3, #1]
 800f7d0:	73bb      	strb	r3, [r7, #14]
    nrf24_write_register(intf_ptr, NRF24_REGADDR_SETUP_AW, &setup_aw, 1);
 800f7d2:	f107 020e 	add.w	r2, r7, #14
 800f7d6:	2301      	movs	r3, #1
 800f7d8:	2103      	movs	r1, #3
 800f7da:	6878      	ldr	r0, [r7, #4]
 800f7dc:	f7ff fdd0 	bl	800f380 <nrf24_write_register>

    uint8_t features = 0;
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	737b      	strb	r3, [r7, #13]
    if (config->en_ack_payload)
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	78db      	ldrb	r3, [r3, #3]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d004      	beq.n	800f7f6 <nrf24_setup_protocol+0xa2>
    {
    	features |= NRF24_FEATURE_EN_ACK_PAY;
 800f7ec:	7b7b      	ldrb	r3, [r7, #13]
 800f7ee:	f043 0302 	orr.w	r3, r3, #2
 800f7f2:	b2db      	uxtb	r3, r3
 800f7f4:	737b      	strb	r3, [r7, #13]
    }
    if (config->en_dyn_ack)
 800f7f6:	683b      	ldr	r3, [r7, #0]
 800f7f8:	791b      	ldrb	r3, [r3, #4]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d004      	beq.n	800f808 <nrf24_setup_protocol+0xb4>
    {
    	features |= NRF24_FEATURE_EN_DYN_ACK;
 800f7fe:	7b7b      	ldrb	r3, [r7, #13]
 800f800:	f043 0301 	orr.w	r3, r3, #1
 800f804:	b2db      	uxtb	r3, r3
 800f806:	737b      	strb	r3, [r7, #13]
    }
    if (config->en_dyn_payload_size)
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	789b      	ldrb	r3, [r3, #2]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d004      	beq.n	800f81a <nrf24_setup_protocol+0xc6>
    {
    	features |= NRF24_FEATURE_EN_DPL;
 800f810:	7b7b      	ldrb	r3, [r7, #13]
 800f812:	f043 0304 	orr.w	r3, r3, #4
 800f816:	b2db      	uxtb	r3, r3
 800f818:	737b      	strb	r3, [r7, #13]
    }
    nrf24_write_register(intf_ptr, NRF24_REGADDR_FEATURE, &features, 1);
 800f81a:	f107 020d 	add.w	r2, r7, #13
 800f81e:	2301      	movs	r3, #1
 800f820:	211d      	movs	r1, #29
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	f7ff fdac 	bl	800f380 <nrf24_write_register>

    uint8_t setup_retr = (config->auto_retransmit_delay << 4) | (config->auto_retransmit_count & 0xf);
 800f828:	683b      	ldr	r3, [r7, #0]
 800f82a:	799b      	ldrb	r3, [r3, #6]
 800f82c:	011b      	lsls	r3, r3, #4
 800f82e:	b25a      	sxtb	r2, r3
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	795b      	ldrb	r3, [r3, #5]
 800f834:	b25b      	sxtb	r3, r3
 800f836:	f003 030f 	and.w	r3, r3, #15
 800f83a:	b25b      	sxtb	r3, r3
 800f83c:	4313      	orrs	r3, r2
 800f83e:	b25b      	sxtb	r3, r3
 800f840:	b2db      	uxtb	r3, r3
 800f842:	733b      	strb	r3, [r7, #12]
    nrf24_write_register(intf_ptr, NRF24_REGADDR_SETUP_RETR, &setup_retr, 1);
 800f844:	f107 020c 	add.w	r2, r7, #12
 800f848:	2301      	movs	r3, #1
 800f84a:	2104      	movs	r1, #4
 800f84c:	6878      	ldr	r0, [r7, #4]
 800f84e:	f7ff fd97 	bl	800f380 <nrf24_write_register>
	return 0;
 800f852:	2300      	movs	r3, #0
}
 800f854:	4618      	mov	r0, r3
 800f856:	3710      	adds	r7, #16
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}

0800f85c <nrf24_pipe_rx_start>:


int nrf24_pipe_rx_start(void * intf_ptr, uint8_t pipe_no, const nrf24_pipe_config_t * config)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b086      	sub	sp, #24
 800f860:	af00      	add	r7, sp, #0
 800f862:	60f8      	str	r0, [r7, #12]
 800f864:	460b      	mov	r3, r1
 800f866:	607a      	str	r2, [r7, #4]
 800f868:	72fb      	strb	r3, [r7, #11]
	uint8_t en_aa = 0 ;
 800f86a:	2300      	movs	r3, #0
 800f86c:	75bb      	strb	r3, [r7, #22]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_EN_AA, &en_aa, 1);
 800f86e:	f107 0216 	add.w	r2, r7, #22
 800f872:	2301      	movs	r3, #1
 800f874:	2101      	movs	r1, #1
 800f876:	68f8      	ldr	r0, [r7, #12]
 800f878:	f7ff fd53 	bl	800f322 <nrf24_read_register>
	if (config->enable_auto_ack)
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	781b      	ldrb	r3, [r3, #0]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d00b      	beq.n	800f89c <nrf24_pipe_rx_start+0x40>
	{
		en_aa |= (1 << pipe_no);
 800f884:	7afb      	ldrb	r3, [r7, #11]
 800f886:	2201      	movs	r2, #1
 800f888:	fa02 f303 	lsl.w	r3, r2, r3
 800f88c:	b25a      	sxtb	r2, r3
 800f88e:	7dbb      	ldrb	r3, [r7, #22]
 800f890:	b25b      	sxtb	r3, r3
 800f892:	4313      	orrs	r3, r2
 800f894:	b25b      	sxtb	r3, r3
 800f896:	b2db      	uxtb	r3, r3
 800f898:	75bb      	strb	r3, [r7, #22]
 800f89a:	e00c      	b.n	800f8b6 <nrf24_pipe_rx_start+0x5a>
	}
	else
	{
		en_aa &= ~(1 << pipe_no);
 800f89c:	7afb      	ldrb	r3, [r7, #11]
 800f89e:	2201      	movs	r2, #1
 800f8a0:	fa02 f303 	lsl.w	r3, r2, r3
 800f8a4:	b25b      	sxtb	r3, r3
 800f8a6:	43db      	mvns	r3, r3
 800f8a8:	b25a      	sxtb	r2, r3
 800f8aa:	7dbb      	ldrb	r3, [r7, #22]
 800f8ac:	b25b      	sxtb	r3, r3
 800f8ae:	4013      	ands	r3, r2
 800f8b0:	b25b      	sxtb	r3, r3
 800f8b2:	b2db      	uxtb	r3, r3
 800f8b4:	75bb      	strb	r3, [r7, #22]
	}
	nrf24_write_register(intf_ptr, NRF24_REGADDR_EN_AA, &en_aa, 1);
 800f8b6:	f107 0216 	add.w	r2, r7, #22
 800f8ba:	2301      	movs	r3, #1
 800f8bc:	2101      	movs	r1, #1
 800f8be:	68f8      	ldr	r0, [r7, #12]
 800f8c0:	f7ff fd5e 	bl	800f380 <nrf24_write_register>

	uint8_t en_rxaddr = 0;
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	757b      	strb	r3, [r7, #21]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_EN_RXADDR, &en_rxaddr, 1);
 800f8c8:	f107 0215 	add.w	r2, r7, #21
 800f8cc:	2301      	movs	r3, #1
 800f8ce:	2102      	movs	r1, #2
 800f8d0:	68f8      	ldr	r0, [r7, #12]
 800f8d2:	f7ff fd26 	bl	800f322 <nrf24_read_register>
	en_rxaddr |= (1 << pipe_no);
 800f8d6:	7afb      	ldrb	r3, [r7, #11]
 800f8d8:	2201      	movs	r2, #1
 800f8da:	fa02 f303 	lsl.w	r3, r2, r3
 800f8de:	b25a      	sxtb	r2, r3
 800f8e0:	7d7b      	ldrb	r3, [r7, #21]
 800f8e2:	b25b      	sxtb	r3, r3
 800f8e4:	4313      	orrs	r3, r2
 800f8e6:	b25b      	sxtb	r3, r3
 800f8e8:	b2db      	uxtb	r3, r3
 800f8ea:	757b      	strb	r3, [r7, #21]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_EN_RXADDR, &en_rxaddr, 1);
 800f8ec:	f107 0215 	add.w	r2, r7, #21
 800f8f0:	2301      	movs	r3, #1
 800f8f2:	2102      	movs	r1, #2
 800f8f4:	68f8      	ldr	r0, [r7, #12]
 800f8f6:	f7ff fd43 	bl	800f380 <nrf24_write_register>

	uint8_t rx_pw = 0;
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	75fb      	strb	r3, [r7, #23]
	switch (pipe_no)
 800f8fe:	7afb      	ldrb	r3, [r7, #11]
 800f900:	2b05      	cmp	r3, #5
 800f902:	d851      	bhi.n	800f9a8 <nrf24_pipe_rx_start+0x14c>
 800f904:	a201      	add	r2, pc, #4	; (adr r2, 800f90c <nrf24_pipe_rx_start+0xb0>)
 800f906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f90a:	bf00      	nop
 800f90c:	0800f925 	.word	0x0800f925
 800f910:	0800f93b 	.word	0x0800f93b
 800f914:	0800f951 	.word	0x0800f951
 800f918:	0800f967 	.word	0x0800f967
 800f91c:	0800f97d 	.word	0x0800f97d
 800f920:	0800f993 	.word	0x0800f993
	{
	case 0:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P0, (uint8_t *)(&config->address), 5);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	f103 0208 	add.w	r2, r3, #8
 800f92a:	2305      	movs	r3, #5
 800f92c:	210a      	movs	r1, #10
 800f92e:	68f8      	ldr	r0, [r7, #12]
 800f930:	f7ff fd26 	bl	800f380 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P0;
 800f934:	2311      	movs	r3, #17
 800f936:	75fb      	strb	r3, [r7, #23]
		break;
 800f938:	e036      	b.n	800f9a8 <nrf24_pipe_rx_start+0x14c>
	case 1:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P1, (uint8_t *)(&config->address), 5);
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	f103 0208 	add.w	r2, r3, #8
 800f940:	2305      	movs	r3, #5
 800f942:	210b      	movs	r1, #11
 800f944:	68f8      	ldr	r0, [r7, #12]
 800f946:	f7ff fd1b 	bl	800f380 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P1;
 800f94a:	2312      	movs	r3, #18
 800f94c:	75fb      	strb	r3, [r7, #23]
		break;
 800f94e:	e02b      	b.n	800f9a8 <nrf24_pipe_rx_start+0x14c>
	case 2:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P2, ((uint8_t *)(&config->address) + 4), 1);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	3308      	adds	r3, #8
 800f954:	1d1a      	adds	r2, r3, #4
 800f956:	2301      	movs	r3, #1
 800f958:	210c      	movs	r1, #12
 800f95a:	68f8      	ldr	r0, [r7, #12]
 800f95c:	f7ff fd10 	bl	800f380 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P2;
 800f960:	2313      	movs	r3, #19
 800f962:	75fb      	strb	r3, [r7, #23]
		break;
 800f964:	e020      	b.n	800f9a8 <nrf24_pipe_rx_start+0x14c>
	case 3:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P3, ((uint8_t *)(&config->address) + 4), 1);
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	3308      	adds	r3, #8
 800f96a:	1d1a      	adds	r2, r3, #4
 800f96c:	2301      	movs	r3, #1
 800f96e:	210d      	movs	r1, #13
 800f970:	68f8      	ldr	r0, [r7, #12]
 800f972:	f7ff fd05 	bl	800f380 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P3;
 800f976:	2314      	movs	r3, #20
 800f978:	75fb      	strb	r3, [r7, #23]
		break;
 800f97a:	e015      	b.n	800f9a8 <nrf24_pipe_rx_start+0x14c>
	case 4:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P4, ((uint8_t *)(&config->address) + 4), 1);
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	3308      	adds	r3, #8
 800f980:	1d1a      	adds	r2, r3, #4
 800f982:	2301      	movs	r3, #1
 800f984:	210e      	movs	r1, #14
 800f986:	68f8      	ldr	r0, [r7, #12]
 800f988:	f7ff fcfa 	bl	800f380 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P4;
 800f98c:	2315      	movs	r3, #21
 800f98e:	75fb      	strb	r3, [r7, #23]
		break;
 800f990:	e00a      	b.n	800f9a8 <nrf24_pipe_rx_start+0x14c>
	case 5:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P5, ((uint8_t *)(&config->address) + 4), 1);
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	3308      	adds	r3, #8
 800f996:	1d1a      	adds	r2, r3, #4
 800f998:	2301      	movs	r3, #1
 800f99a:	210f      	movs	r1, #15
 800f99c:	68f8      	ldr	r0, [r7, #12]
 800f99e:	f7ff fcef 	bl	800f380 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P5;
 800f9a2:	2316      	movs	r3, #22
 800f9a4:	75fb      	strb	r3, [r7, #23]
		break;
 800f9a6:	bf00      	nop
	}

	uint8_t dynpd = 0;
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	753b      	strb	r3, [r7, #20]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_DYNPD, &dynpd, 1);
 800f9ac:	f107 0214 	add.w	r2, r7, #20
 800f9b0:	2301      	movs	r3, #1
 800f9b2:	211c      	movs	r1, #28
 800f9b4:	68f8      	ldr	r0, [r7, #12]
 800f9b6:	f7ff fcb4 	bl	800f322 <nrf24_read_register>
	if (config->payload_size >= 0)
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	db15      	blt.n	800f9f0 <nrf24_pipe_rx_start+0x194>
	{
		nrf24_write_register(intf_ptr, rx_pw, (uint8_t *)(&config->payload_size), 1);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f103 0210 	add.w	r2, r3, #16
 800f9ca:	7df9      	ldrb	r1, [r7, #23]
 800f9cc:	2301      	movs	r3, #1
 800f9ce:	68f8      	ldr	r0, [r7, #12]
 800f9d0:	f7ff fcd6 	bl	800f380 <nrf24_write_register>
		dynpd &= ~(1 << pipe_no);
 800f9d4:	7afb      	ldrb	r3, [r7, #11]
 800f9d6:	2201      	movs	r2, #1
 800f9d8:	fa02 f303 	lsl.w	r3, r2, r3
 800f9dc:	b25b      	sxtb	r3, r3
 800f9de:	43db      	mvns	r3, r3
 800f9e0:	b25a      	sxtb	r2, r3
 800f9e2:	7d3b      	ldrb	r3, [r7, #20]
 800f9e4:	b25b      	sxtb	r3, r3
 800f9e6:	4013      	ands	r3, r2
 800f9e8:	b25b      	sxtb	r3, r3
 800f9ea:	b2db      	uxtb	r3, r3
 800f9ec:	753b      	strb	r3, [r7, #20]
 800f9ee:	e013      	b.n	800fa18 <nrf24_pipe_rx_start+0x1bc>
	}
	else
	{
		uint8_t pld_size = 32; // Нужно записать не 0, чтобы пайп в целом работал
 800f9f0:	2320      	movs	r3, #32
 800f9f2:	74fb      	strb	r3, [r7, #19]
		nrf24_write_register(intf_ptr, rx_pw, &pld_size, 1);
 800f9f4:	f107 0213 	add.w	r2, r7, #19
 800f9f8:	7df9      	ldrb	r1, [r7, #23]
 800f9fa:	2301      	movs	r3, #1
 800f9fc:	68f8      	ldr	r0, [r7, #12]
 800f9fe:	f7ff fcbf 	bl	800f380 <nrf24_write_register>
		dynpd |= (1 << pipe_no);
 800fa02:	7afb      	ldrb	r3, [r7, #11]
 800fa04:	2201      	movs	r2, #1
 800fa06:	fa02 f303 	lsl.w	r3, r2, r3
 800fa0a:	b25a      	sxtb	r2, r3
 800fa0c:	7d3b      	ldrb	r3, [r7, #20]
 800fa0e:	b25b      	sxtb	r3, r3
 800fa10:	4313      	orrs	r3, r2
 800fa12:	b25b      	sxtb	r3, r3
 800fa14:	b2db      	uxtb	r3, r3
 800fa16:	753b      	strb	r3, [r7, #20]
	}
	nrf24_write_register(intf_ptr, NRF24_REGADDR_DYNPD, &dynpd, 1);
 800fa18:	f107 0214 	add.w	r2, r7, #20
 800fa1c:	2301      	movs	r3, #1
 800fa1e:	211c      	movs	r1, #28
 800fa20:	68f8      	ldr	r0, [r7, #12]
 800fa22:	f7ff fcad 	bl	800f380 <nrf24_write_register>

	return 0;
 800fa26:	2300      	movs	r3, #0
}
 800fa28:	4618      	mov	r0, r3
 800fa2a:	3718      	adds	r7, #24
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	bd80      	pop	{r7, pc}

0800fa30 <nrf24_pipe_set_tx_addr>:
	return 0;
}


int nrf24_pipe_set_tx_addr(void * intf_ptr, uint64_t tx_addr)
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b084      	sub	sp, #16
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	60f8      	str	r0, [r7, #12]
 800fa38:	e9c7 2300 	strd	r2, r3, [r7]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_TX_ADDR, (uint8_t *)(&tx_addr), 5);
 800fa3c:	463a      	mov	r2, r7
 800fa3e:	2305      	movs	r3, #5
 800fa40:	2110      	movs	r1, #16
 800fa42:	68f8      	ldr	r0, [r7, #12]
 800fa44:	f7ff fc9c 	bl	800f380 <nrf24_write_register>
	return 0;
 800fa48:	2300      	movs	r3, #0
}
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	3710      	adds	r7, #16
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	bd80      	pop	{r7, pc}

0800fa52 <nrf24_mode_power_down>:


int nrf24_mode_power_down(void * intf_ptr)
{
 800fa52:	b580      	push	{r7, lr}
 800fa54:	b084      	sub	sp, #16
 800fa56:	af00      	add	r7, sp, #0
 800fa58:	6078      	str	r0, [r7, #4]
	uint8_t config_reg = 0;
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	73fb      	strb	r3, [r7, #15]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_CONFIG, &config_reg, 1);
 800fa5e:	f107 020f 	add.w	r2, r7, #15
 800fa62:	2301      	movs	r3, #1
 800fa64:	2100      	movs	r1, #0
 800fa66:	6878      	ldr	r0, [r7, #4]
 800fa68:	f7ff fc5b 	bl	800f322 <nrf24_read_register>
	config_reg &= ~NRF24_CONFIG_PWR_UP;
 800fa6c:	7bfb      	ldrb	r3, [r7, #15]
 800fa6e:	f023 0302 	bic.w	r3, r3, #2
 800fa72:	b2db      	uxtb	r3, r3
 800fa74:	73fb      	strb	r3, [r7, #15]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_CONFIG, &config_reg, 1);
 800fa76:	f107 020f 	add.w	r2, r7, #15
 800fa7a:	2301      	movs	r3, #1
 800fa7c:	2100      	movs	r1, #0
 800fa7e:	6878      	ldr	r0, [r7, #4]
 800fa80:	f7ff fc7e 	bl	800f380 <nrf24_write_register>
	return 0;
 800fa84:	2300      	movs	r3, #0
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	3710      	adds	r7, #16
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bd80      	pop	{r7, pc}

0800fa8e <nrf24_mode_standby>:


int nrf24_mode_standby(void * intf_ptr)
{
 800fa8e:	b580      	push	{r7, lr}
 800fa90:	b084      	sub	sp, #16
 800fa92:	af00      	add	r7, sp, #0
 800fa94:	6078      	str	r0, [r7, #4]
	uint8_t config_reg = 0;
 800fa96:	2300      	movs	r3, #0
 800fa98:	73fb      	strb	r3, [r7, #15]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_CONFIG, &config_reg, 1);
 800fa9a:	f107 020f 	add.w	r2, r7, #15
 800fa9e:	2301      	movs	r3, #1
 800faa0:	2100      	movs	r1, #0
 800faa2:	6878      	ldr	r0, [r7, #4]
 800faa4:	f7ff fc3d 	bl	800f322 <nrf24_read_register>
	config_reg |= NRF24_CONFIG_PWR_UP;
 800faa8:	7bfb      	ldrb	r3, [r7, #15]
 800faaa:	f043 0302 	orr.w	r3, r3, #2
 800faae:	b2db      	uxtb	r3, r3
 800fab0:	73fb      	strb	r3, [r7, #15]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_CONFIG, &config_reg, 1);
 800fab2:	f107 020f 	add.w	r2, r7, #15
 800fab6:	2301      	movs	r3, #1
 800fab8:	2100      	movs	r1, #0
 800faba:	6878      	ldr	r0, [r7, #4]
 800fabc:	f7ff fc60 	bl	800f380 <nrf24_write_register>
	nrf24_ce_activate(intf_ptr, false);
 800fac0:	2100      	movs	r1, #0
 800fac2:	6878      	ldr	r0, [r7, #4]
 800fac4:	f7ff fd92 	bl	800f5ec <nrf24_ce_activate>
	return 0;
 800fac8:	2300      	movs	r3, #0
}
 800faca:	4618      	mov	r0, r3
 800facc:	3710      	adds	r7, #16
 800face:	46bd      	mov	sp, r7
 800fad0:	bd80      	pop	{r7, pc}

0800fad2 <nrf24_mode_tx>:


int nrf24_mode_tx(void * intf_ptr)
{
 800fad2:	b580      	push	{r7, lr}
 800fad4:	b084      	sub	sp, #16
 800fad6:	af00      	add	r7, sp, #0
 800fad8:	6078      	str	r0, [r7, #4]
	uint8_t mode_tx = 0;
 800fada:	2300      	movs	r3, #0
 800fadc:	73fb      	strb	r3, [r7, #15]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_CONFIG, &mode_tx, 1);
 800fade:	f107 020f 	add.w	r2, r7, #15
 800fae2:	2301      	movs	r3, #1
 800fae4:	2100      	movs	r1, #0
 800fae6:	6878      	ldr	r0, [r7, #4]
 800fae8:	f7ff fc1b 	bl	800f322 <nrf24_read_register>
	mode_tx &= ~NRF24_CONFIG_PRIM_RX;
 800faec:	7bfb      	ldrb	r3, [r7, #15]
 800faee:	f023 0301 	bic.w	r3, r3, #1
 800faf2:	b2db      	uxtb	r3, r3
 800faf4:	73fb      	strb	r3, [r7, #15]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_CONFIG, &mode_tx, 1);
 800faf6:	f107 020f 	add.w	r2, r7, #15
 800fafa:	2301      	movs	r3, #1
 800fafc:	2100      	movs	r1, #0
 800fafe:	6878      	ldr	r0, [r7, #4]
 800fb00:	f7ff fc3e 	bl	800f380 <nrf24_write_register>
	nrf24_ce_activate(intf_ptr, true);
 800fb04:	2101      	movs	r1, #1
 800fb06:	6878      	ldr	r0, [r7, #4]
 800fb08:	f7ff fd70 	bl	800f5ec <nrf24_ce_activate>
	return 0;
 800fb0c:	2300      	movs	r3, #0
}
 800fb0e:	4618      	mov	r0, r3
 800fb10:	3710      	adds	r7, #16
 800fb12:	46bd      	mov	sp, r7
 800fb14:	bd80      	pop	{r7, pc}

0800fb16 <nrf24_fifo_status>:
	return 0;
}


int nrf24_fifo_status(void * intf_ptr, nrf24_fifo_status_t * rx_status, nrf24_fifo_status_t * tx_status)
{
 800fb16:	b580      	push	{r7, lr}
 800fb18:	b086      	sub	sp, #24
 800fb1a:	af00      	add	r7, sp, #0
 800fb1c:	60f8      	str	r0, [r7, #12]
 800fb1e:	60b9      	str	r1, [r7, #8]
 800fb20:	607a      	str	r2, [r7, #4]
	uint8_t fifo_satus = 0;
 800fb22:	2300      	movs	r3, #0
 800fb24:	75fb      	strb	r3, [r7, #23]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_FIFO_STATUS, &fifo_satus, 1);
 800fb26:	f107 0217 	add.w	r2, r7, #23
 800fb2a:	2301      	movs	r3, #1
 800fb2c:	2117      	movs	r1, #23
 800fb2e:	68f8      	ldr	r0, [r7, #12]
 800fb30:	f7ff fbf7 	bl	800f322 <nrf24_read_register>

	*rx_status = NRF24_FIFO_NOT_EMPTY;
 800fb34:	68bb      	ldr	r3, [r7, #8]
 800fb36:	2201      	movs	r2, #1
 800fb38:	701a      	strb	r2, [r3, #0]
	if (((fifo_satus >> NRF24_FIFO_STATUS_RX_EMPTY_OFFSET) & NRF24_FIFO_STATUS_RX_EMPTY_MASK) == 1)
 800fb3a:	7dfb      	ldrb	r3, [r7, #23]
 800fb3c:	f003 0301 	and.w	r3, r3, #1
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d002      	beq.n	800fb4a <nrf24_fifo_status+0x34>
	{
		*rx_status = NRF24_FIFO_EMPTY;
 800fb44:	68bb      	ldr	r3, [r7, #8]
 800fb46:	2200      	movs	r2, #0
 800fb48:	701a      	strb	r2, [r3, #0]
	}
	if (((fifo_satus >> NRF24_FIFO_STATUS_RX_FULL_OFFSET) & NRF24_FIFO_STATUS_RX_FULL_MASK) == 1)
 800fb4a:	7dfb      	ldrb	r3, [r7, #23]
 800fb4c:	085b      	lsrs	r3, r3, #1
 800fb4e:	b2db      	uxtb	r3, r3
 800fb50:	f003 0301 	and.w	r3, r3, #1
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d002      	beq.n	800fb5e <nrf24_fifo_status+0x48>
	{
		*rx_status = NRF24_FIFO_FULL;
 800fb58:	68bb      	ldr	r3, [r7, #8]
 800fb5a:	2202      	movs	r2, #2
 800fb5c:	701a      	strb	r2, [r3, #0]
	}

	*tx_status = NRF24_FIFO_NOT_EMPTY;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	2201      	movs	r2, #1
 800fb62:	701a      	strb	r2, [r3, #0]
	if (((fifo_satus >> NRF24_FIFO_STATUS_TX_EMPTY_OFFSET) & NRF24_FIFO_STATUS_TX_EMPTY_MASK) == 1)
 800fb64:	7dfb      	ldrb	r3, [r7, #23]
 800fb66:	091b      	lsrs	r3, r3, #4
 800fb68:	b2db      	uxtb	r3, r3
 800fb6a:	f003 0301 	and.w	r3, r3, #1
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d002      	beq.n	800fb78 <nrf24_fifo_status+0x62>
	{
		*tx_status = NRF24_FIFO_EMPTY;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	2200      	movs	r2, #0
 800fb76:	701a      	strb	r2, [r3, #0]
	}
	if (((fifo_satus >> NRF24_FIFO_STATUS_TX_FULL_OFFSET) & NRF24_FIFO_STATUS_TX_FULL_MASK) == 1)
 800fb78:	7dfb      	ldrb	r3, [r7, #23]
 800fb7a:	095b      	lsrs	r3, r3, #5
 800fb7c:	b2db      	uxtb	r3, r3
 800fb7e:	f003 0301 	and.w	r3, r3, #1
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d002      	beq.n	800fb8c <nrf24_fifo_status+0x76>
	{
		*tx_status = NRF24_FIFO_FULL;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	2202      	movs	r2, #2
 800fb8a:	701a      	strb	r2, [r3, #0]
	}
	return 0;
 800fb8c:	2300      	movs	r3, #0
}
 800fb8e:	4618      	mov	r0, r3
 800fb90:	3718      	adds	r7, #24
 800fb92:	46bd      	mov	sp, r7
 800fb94:	bd80      	pop	{r7, pc}

0800fb96 <nrf24_fifo_read>:


int nrf24_fifo_read(void * intf_ptr, uint8_t * packet_buffer, uint8_t packet_buffer_size)
{
 800fb96:	b580      	push	{r7, lr}
 800fb98:	b086      	sub	sp, #24
 800fb9a:	af00      	add	r7, sp, #0
 800fb9c:	60f8      	str	r0, [r7, #12]
 800fb9e:	60b9      	str	r1, [r7, #8]
 800fba0:	4613      	mov	r3, r2
 800fba2:	71fb      	strb	r3, [r7, #7]
	uint8_t payload_size = 0;
 800fba4:	2300      	movs	r3, #0
 800fba6:	75fb      	strb	r3, [r7, #23]
	nrf24_get_rx_payload_size(intf_ptr, &payload_size);
 800fba8:	f107 0317 	add.w	r3, r7, #23
 800fbac:	4619      	mov	r1, r3
 800fbae:	68f8      	ldr	r0, [r7, #12]
 800fbb0:	f7ff fcc9 	bl	800f546 <nrf24_get_rx_payload_size>
	if (payload_size > 0)
 800fbb4:	7dfb      	ldrb	r3, [r7, #23]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d005      	beq.n	800fbc6 <nrf24_fifo_read+0x30>
	{
		nrf24_read_rx_payload(intf_ptr, packet_buffer, packet_buffer_size);
 800fbba:	79fb      	ldrb	r3, [r7, #7]
 800fbbc:	461a      	mov	r2, r3
 800fbbe:	68b9      	ldr	r1, [r7, #8]
 800fbc0:	68f8      	ldr	r0, [r7, #12]
 800fbc2:	f7ff fc11 	bl	800f3e8 <nrf24_read_rx_payload>
	}
	return payload_size;
 800fbc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbc8:	4618      	mov	r0, r3
 800fbca:	3718      	adds	r7, #24
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	bd80      	pop	{r7, pc}

0800fbd0 <nrf24_fifo_write>:


int nrf24_fifo_write(void * intf_ptr, const uint8_t * packet, uint8_t packet_size, bool use_ack)
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b084      	sub	sp, #16
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	60f8      	str	r0, [r7, #12]
 800fbd8:	60b9      	str	r1, [r7, #8]
 800fbda:	4611      	mov	r1, r2
 800fbdc:	461a      	mov	r2, r3
 800fbde:	460b      	mov	r3, r1
 800fbe0:	71fb      	strb	r3, [r7, #7]
 800fbe2:	4613      	mov	r3, r2
 800fbe4:	71bb      	strb	r3, [r7, #6]
	if (packet_size == 0)
 800fbe6:	79fb      	ldrb	r3, [r7, #7]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d101      	bne.n	800fbf0 <nrf24_fifo_write+0x20>
	{
		return 0;
 800fbec:	2300      	movs	r3, #0
 800fbee:	e011      	b.n	800fc14 <nrf24_fifo_write+0x44>
	}
	if (packet_size <= 32)
 800fbf0:	79fb      	ldrb	r3, [r7, #7]
 800fbf2:	2b20      	cmp	r3, #32
 800fbf4:	d807      	bhi.n	800fc06 <nrf24_fifo_write+0x36>
	{
		nrf24_write_tx_payload(intf_ptr, packet,  packet_size,  use_ack);
 800fbf6:	79fa      	ldrb	r2, [r7, #7]
 800fbf8:	79bb      	ldrb	r3, [r7, #6]
 800fbfa:	68b9      	ldr	r1, [r7, #8]
 800fbfc:	68f8      	ldr	r0, [r7, #12]
 800fbfe:	f7ff fc33 	bl	800f468 <nrf24_write_tx_payload>
		return packet_size;
 800fc02:	79fb      	ldrb	r3, [r7, #7]
 800fc04:	e006      	b.n	800fc14 <nrf24_fifo_write+0x44>
	}
	else
	{
		nrf24_write_tx_payload(intf_ptr, packet,  32,  use_ack);
 800fc06:	79bb      	ldrb	r3, [r7, #6]
 800fc08:	2220      	movs	r2, #32
 800fc0a:	68b9      	ldr	r1, [r7, #8]
 800fc0c:	68f8      	ldr	r0, [r7, #12]
 800fc0e:	f7ff fc2b 	bl	800f468 <nrf24_write_tx_payload>
		return 32;
 800fc12:	2320      	movs	r3, #32
	}
}
 800fc14:	4618      	mov	r0, r3
 800fc16:	3710      	adds	r7, #16
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	bd80      	pop	{r7, pc}

0800fc1c <nrf24_fifo_flush_tx>:
	}
}


int nrf24_fifo_flush_tx(void * intf_ptr)
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b082      	sub	sp, #8
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
	nrf24_flush_tx(intf_ptr);
 800fc24:	6878      	ldr	r0, [r7, #4]
 800fc26:	f7ff fc6f 	bl	800f508 <nrf24_flush_tx>
	return 0;
 800fc2a:	2300      	movs	r3, #0
}
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	3708      	adds	r7, #8
 800fc30:	46bd      	mov	sp, r7
 800fc32:	bd80      	pop	{r7, pc}

0800fc34 <nrf24_fifo_flush_rx>:


int nrf24_fifo_flush_rx(void * intf_ptr)
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b082      	sub	sp, #8
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
	nrf24_flush_rx(intf_ptr);
 800fc3c:	6878      	ldr	r0, [r7, #4]
 800fc3e:	f7ff fc44 	bl	800f4ca <nrf24_flush_rx>
	return 0;
 800fc42:	2300      	movs	r3, #0
}
 800fc44:	4618      	mov	r0, r3
 800fc46:	3708      	adds	r7, #8
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bd80      	pop	{r7, pc}

0800fc4c <nrf24_irq_get>:
	return 0;
}


int nrf24_irq_get(void * intf_ptr, int * composition)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b084      	sub	sp, #16
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
 800fc54:	6039      	str	r1, [r7, #0]
	uint8_t status_reg = 0;
 800fc56:	2300      	movs	r3, #0
 800fc58:	73fb      	strb	r3, [r7, #15]
	nrf24_get_status(intf_ptr, &status_reg);
 800fc5a:	f107 030f 	add.w	r3, r7, #15
 800fc5e:	4619      	mov	r1, r3
 800fc60:	6878      	ldr	r0, [r7, #4]
 800fc62:	f7ff fca1 	bl	800f5a8 <nrf24_get_status>
	*composition = (status_reg >> NRF24_STATUS_FLAG_OFFSET) & NRF24_STATUS_FLAG_MASK;
 800fc66:	7bfb      	ldrb	r3, [r7, #15]
 800fc68:	091b      	lsrs	r3, r3, #4
 800fc6a:	b2db      	uxtb	r3, r3
 800fc6c:	f003 0207 	and.w	r2, r3, #7
 800fc70:	683b      	ldr	r3, [r7, #0]
 800fc72:	601a      	str	r2, [r3, #0]
	return 0;
 800fc74:	2300      	movs	r3, #0
}
 800fc76:	4618      	mov	r0, r3
 800fc78:	3710      	adds	r7, #16
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}

0800fc7e <nrf24_irq_clear>:


int nrf24_irq_clear(void * intf_ptr, int composition)
{
 800fc7e:	b580      	push	{r7, lr}
 800fc80:	b084      	sub	sp, #16
 800fc82:	af00      	add	r7, sp, #0
 800fc84:	6078      	str	r0, [r7, #4]
 800fc86:	6039      	str	r1, [r7, #0]
	uint8_t status_reg = (composition & NRF24_STATUS_FLAG_MASK) << NRF24_STATUS_FLAG_OFFSET;
 800fc88:	683b      	ldr	r3, [r7, #0]
 800fc8a:	011b      	lsls	r3, r3, #4
 800fc8c:	b2db      	uxtb	r3, r3
 800fc8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fc92:	b2db      	uxtb	r3, r3
 800fc94:	73fb      	strb	r3, [r7, #15]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_STATUS, &status_reg, 1);
 800fc96:	f107 020f 	add.w	r2, r7, #15
 800fc9a:	2301      	movs	r3, #1
 800fc9c:	2107      	movs	r1, #7
 800fc9e:	6878      	ldr	r0, [r7, #4]
 800fca0:	f7ff fb6e 	bl	800f380 <nrf24_write_register>
	return 0;
 800fca4:	2300      	movs	r3, #0
}
 800fca6:	4618      	mov	r0, r3
 800fca8:	3710      	adds	r7, #16
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	bd80      	pop	{r7, pc}
	...

0800fcb0 <__assert_func>:
 800fcb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fcb2:	4614      	mov	r4, r2
 800fcb4:	461a      	mov	r2, r3
 800fcb6:	4b09      	ldr	r3, [pc, #36]	; (800fcdc <__assert_func+0x2c>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	4605      	mov	r5, r0
 800fcbc:	68d8      	ldr	r0, [r3, #12]
 800fcbe:	b14c      	cbz	r4, 800fcd4 <__assert_func+0x24>
 800fcc0:	4b07      	ldr	r3, [pc, #28]	; (800fce0 <__assert_func+0x30>)
 800fcc2:	9100      	str	r1, [sp, #0]
 800fcc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fcc8:	4906      	ldr	r1, [pc, #24]	; (800fce4 <__assert_func+0x34>)
 800fcca:	462b      	mov	r3, r5
 800fccc:	f000 f814 	bl	800fcf8 <fiprintf>
 800fcd0:	f001 ffe4 	bl	8011c9c <abort>
 800fcd4:	4b04      	ldr	r3, [pc, #16]	; (800fce8 <__assert_func+0x38>)
 800fcd6:	461c      	mov	r4, r3
 800fcd8:	e7f3      	b.n	800fcc2 <__assert_func+0x12>
 800fcda:	bf00      	nop
 800fcdc:	20000058 	.word	0x20000058
 800fce0:	08016220 	.word	0x08016220
 800fce4:	0801622d 	.word	0x0801622d
 800fce8:	0801625b 	.word	0x0801625b

0800fcec <__errno>:
 800fcec:	4b01      	ldr	r3, [pc, #4]	; (800fcf4 <__errno+0x8>)
 800fcee:	6818      	ldr	r0, [r3, #0]
 800fcf0:	4770      	bx	lr
 800fcf2:	bf00      	nop
 800fcf4:	20000058 	.word	0x20000058

0800fcf8 <fiprintf>:
 800fcf8:	b40e      	push	{r1, r2, r3}
 800fcfa:	b503      	push	{r0, r1, lr}
 800fcfc:	4601      	mov	r1, r0
 800fcfe:	ab03      	add	r3, sp, #12
 800fd00:	4805      	ldr	r0, [pc, #20]	; (800fd18 <fiprintf+0x20>)
 800fd02:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd06:	6800      	ldr	r0, [r0, #0]
 800fd08:	9301      	str	r3, [sp, #4]
 800fd0a:	f000 f86b 	bl	800fde4 <_vfiprintf_r>
 800fd0e:	b002      	add	sp, #8
 800fd10:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd14:	b003      	add	sp, #12
 800fd16:	4770      	bx	lr
 800fd18:	20000058 	.word	0x20000058

0800fd1c <__libc_init_array>:
 800fd1c:	b570      	push	{r4, r5, r6, lr}
 800fd1e:	4d0d      	ldr	r5, [pc, #52]	; (800fd54 <__libc_init_array+0x38>)
 800fd20:	4c0d      	ldr	r4, [pc, #52]	; (800fd58 <__libc_init_array+0x3c>)
 800fd22:	1b64      	subs	r4, r4, r5
 800fd24:	10a4      	asrs	r4, r4, #2
 800fd26:	2600      	movs	r6, #0
 800fd28:	42a6      	cmp	r6, r4
 800fd2a:	d109      	bne.n	800fd40 <__libc_init_array+0x24>
 800fd2c:	4d0b      	ldr	r5, [pc, #44]	; (800fd5c <__libc_init_array+0x40>)
 800fd2e:	4c0c      	ldr	r4, [pc, #48]	; (800fd60 <__libc_init_array+0x44>)
 800fd30:	f005 ffd8 	bl	8015ce4 <_init>
 800fd34:	1b64      	subs	r4, r4, r5
 800fd36:	10a4      	asrs	r4, r4, #2
 800fd38:	2600      	movs	r6, #0
 800fd3a:	42a6      	cmp	r6, r4
 800fd3c:	d105      	bne.n	800fd4a <__libc_init_array+0x2e>
 800fd3e:	bd70      	pop	{r4, r5, r6, pc}
 800fd40:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd44:	4798      	blx	r3
 800fd46:	3601      	adds	r6, #1
 800fd48:	e7ee      	b.n	800fd28 <__libc_init_array+0xc>
 800fd4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd4e:	4798      	blx	r3
 800fd50:	3601      	adds	r6, #1
 800fd52:	e7f2      	b.n	800fd3a <__libc_init_array+0x1e>
 800fd54:	08016750 	.word	0x08016750
 800fd58:	08016750 	.word	0x08016750
 800fd5c:	08016750 	.word	0x08016750
 800fd60:	08016754 	.word	0x08016754

0800fd64 <memcpy>:
 800fd64:	440a      	add	r2, r1
 800fd66:	4291      	cmp	r1, r2
 800fd68:	f100 33ff 	add.w	r3, r0, #4294967295
 800fd6c:	d100      	bne.n	800fd70 <memcpy+0xc>
 800fd6e:	4770      	bx	lr
 800fd70:	b510      	push	{r4, lr}
 800fd72:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd76:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd7a:	4291      	cmp	r1, r2
 800fd7c:	d1f9      	bne.n	800fd72 <memcpy+0xe>
 800fd7e:	bd10      	pop	{r4, pc}

0800fd80 <memset>:
 800fd80:	4402      	add	r2, r0
 800fd82:	4603      	mov	r3, r0
 800fd84:	4293      	cmp	r3, r2
 800fd86:	d100      	bne.n	800fd8a <memset+0xa>
 800fd88:	4770      	bx	lr
 800fd8a:	f803 1b01 	strb.w	r1, [r3], #1
 800fd8e:	e7f9      	b.n	800fd84 <memset+0x4>

0800fd90 <__sfputc_r>:
 800fd90:	6893      	ldr	r3, [r2, #8]
 800fd92:	3b01      	subs	r3, #1
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	b410      	push	{r4}
 800fd98:	6093      	str	r3, [r2, #8]
 800fd9a:	da08      	bge.n	800fdae <__sfputc_r+0x1e>
 800fd9c:	6994      	ldr	r4, [r2, #24]
 800fd9e:	42a3      	cmp	r3, r4
 800fda0:	db01      	blt.n	800fda6 <__sfputc_r+0x16>
 800fda2:	290a      	cmp	r1, #10
 800fda4:	d103      	bne.n	800fdae <__sfputc_r+0x1e>
 800fda6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fdaa:	f001 beb7 	b.w	8011b1c <__swbuf_r>
 800fdae:	6813      	ldr	r3, [r2, #0]
 800fdb0:	1c58      	adds	r0, r3, #1
 800fdb2:	6010      	str	r0, [r2, #0]
 800fdb4:	7019      	strb	r1, [r3, #0]
 800fdb6:	4608      	mov	r0, r1
 800fdb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fdbc:	4770      	bx	lr

0800fdbe <__sfputs_r>:
 800fdbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdc0:	4606      	mov	r6, r0
 800fdc2:	460f      	mov	r7, r1
 800fdc4:	4614      	mov	r4, r2
 800fdc6:	18d5      	adds	r5, r2, r3
 800fdc8:	42ac      	cmp	r4, r5
 800fdca:	d101      	bne.n	800fdd0 <__sfputs_r+0x12>
 800fdcc:	2000      	movs	r0, #0
 800fdce:	e007      	b.n	800fde0 <__sfputs_r+0x22>
 800fdd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdd4:	463a      	mov	r2, r7
 800fdd6:	4630      	mov	r0, r6
 800fdd8:	f7ff ffda 	bl	800fd90 <__sfputc_r>
 800fddc:	1c43      	adds	r3, r0, #1
 800fdde:	d1f3      	bne.n	800fdc8 <__sfputs_r+0xa>
 800fde0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fde4 <_vfiprintf_r>:
 800fde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fde8:	460d      	mov	r5, r1
 800fdea:	b09d      	sub	sp, #116	; 0x74
 800fdec:	4614      	mov	r4, r2
 800fdee:	4698      	mov	r8, r3
 800fdf0:	4606      	mov	r6, r0
 800fdf2:	b118      	cbz	r0, 800fdfc <_vfiprintf_r+0x18>
 800fdf4:	6983      	ldr	r3, [r0, #24]
 800fdf6:	b90b      	cbnz	r3, 800fdfc <_vfiprintf_r+0x18>
 800fdf8:	f002 fee8 	bl	8012bcc <__sinit>
 800fdfc:	4b89      	ldr	r3, [pc, #548]	; (8010024 <_vfiprintf_r+0x240>)
 800fdfe:	429d      	cmp	r5, r3
 800fe00:	d11b      	bne.n	800fe3a <_vfiprintf_r+0x56>
 800fe02:	6875      	ldr	r5, [r6, #4]
 800fe04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe06:	07d9      	lsls	r1, r3, #31
 800fe08:	d405      	bmi.n	800fe16 <_vfiprintf_r+0x32>
 800fe0a:	89ab      	ldrh	r3, [r5, #12]
 800fe0c:	059a      	lsls	r2, r3, #22
 800fe0e:	d402      	bmi.n	800fe16 <_vfiprintf_r+0x32>
 800fe10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe12:	f003 faec 	bl	80133ee <__retarget_lock_acquire_recursive>
 800fe16:	89ab      	ldrh	r3, [r5, #12]
 800fe18:	071b      	lsls	r3, r3, #28
 800fe1a:	d501      	bpl.n	800fe20 <_vfiprintf_r+0x3c>
 800fe1c:	692b      	ldr	r3, [r5, #16]
 800fe1e:	b9eb      	cbnz	r3, 800fe5c <_vfiprintf_r+0x78>
 800fe20:	4629      	mov	r1, r5
 800fe22:	4630      	mov	r0, r6
 800fe24:	f001 fecc 	bl	8011bc0 <__swsetup_r>
 800fe28:	b1c0      	cbz	r0, 800fe5c <_vfiprintf_r+0x78>
 800fe2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe2c:	07dc      	lsls	r4, r3, #31
 800fe2e:	d50e      	bpl.n	800fe4e <_vfiprintf_r+0x6a>
 800fe30:	f04f 30ff 	mov.w	r0, #4294967295
 800fe34:	b01d      	add	sp, #116	; 0x74
 800fe36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe3a:	4b7b      	ldr	r3, [pc, #492]	; (8010028 <_vfiprintf_r+0x244>)
 800fe3c:	429d      	cmp	r5, r3
 800fe3e:	d101      	bne.n	800fe44 <_vfiprintf_r+0x60>
 800fe40:	68b5      	ldr	r5, [r6, #8]
 800fe42:	e7df      	b.n	800fe04 <_vfiprintf_r+0x20>
 800fe44:	4b79      	ldr	r3, [pc, #484]	; (801002c <_vfiprintf_r+0x248>)
 800fe46:	429d      	cmp	r5, r3
 800fe48:	bf08      	it	eq
 800fe4a:	68f5      	ldreq	r5, [r6, #12]
 800fe4c:	e7da      	b.n	800fe04 <_vfiprintf_r+0x20>
 800fe4e:	89ab      	ldrh	r3, [r5, #12]
 800fe50:	0598      	lsls	r0, r3, #22
 800fe52:	d4ed      	bmi.n	800fe30 <_vfiprintf_r+0x4c>
 800fe54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe56:	f003 facb 	bl	80133f0 <__retarget_lock_release_recursive>
 800fe5a:	e7e9      	b.n	800fe30 <_vfiprintf_r+0x4c>
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	9309      	str	r3, [sp, #36]	; 0x24
 800fe60:	2320      	movs	r3, #32
 800fe62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fe66:	f8cd 800c 	str.w	r8, [sp, #12]
 800fe6a:	2330      	movs	r3, #48	; 0x30
 800fe6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010030 <_vfiprintf_r+0x24c>
 800fe70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fe74:	f04f 0901 	mov.w	r9, #1
 800fe78:	4623      	mov	r3, r4
 800fe7a:	469a      	mov	sl, r3
 800fe7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe80:	b10a      	cbz	r2, 800fe86 <_vfiprintf_r+0xa2>
 800fe82:	2a25      	cmp	r2, #37	; 0x25
 800fe84:	d1f9      	bne.n	800fe7a <_vfiprintf_r+0x96>
 800fe86:	ebba 0b04 	subs.w	fp, sl, r4
 800fe8a:	d00b      	beq.n	800fea4 <_vfiprintf_r+0xc0>
 800fe8c:	465b      	mov	r3, fp
 800fe8e:	4622      	mov	r2, r4
 800fe90:	4629      	mov	r1, r5
 800fe92:	4630      	mov	r0, r6
 800fe94:	f7ff ff93 	bl	800fdbe <__sfputs_r>
 800fe98:	3001      	adds	r0, #1
 800fe9a:	f000 80aa 	beq.w	800fff2 <_vfiprintf_r+0x20e>
 800fe9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fea0:	445a      	add	r2, fp
 800fea2:	9209      	str	r2, [sp, #36]	; 0x24
 800fea4:	f89a 3000 	ldrb.w	r3, [sl]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	f000 80a2 	beq.w	800fff2 <_vfiprintf_r+0x20e>
 800feae:	2300      	movs	r3, #0
 800feb0:	f04f 32ff 	mov.w	r2, #4294967295
 800feb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800feb8:	f10a 0a01 	add.w	sl, sl, #1
 800febc:	9304      	str	r3, [sp, #16]
 800febe:	9307      	str	r3, [sp, #28]
 800fec0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fec4:	931a      	str	r3, [sp, #104]	; 0x68
 800fec6:	4654      	mov	r4, sl
 800fec8:	2205      	movs	r2, #5
 800feca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fece:	4858      	ldr	r0, [pc, #352]	; (8010030 <_vfiprintf_r+0x24c>)
 800fed0:	f7f0 f98e 	bl	80001f0 <memchr>
 800fed4:	9a04      	ldr	r2, [sp, #16]
 800fed6:	b9d8      	cbnz	r0, 800ff10 <_vfiprintf_r+0x12c>
 800fed8:	06d1      	lsls	r1, r2, #27
 800feda:	bf44      	itt	mi
 800fedc:	2320      	movmi	r3, #32
 800fede:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fee2:	0713      	lsls	r3, r2, #28
 800fee4:	bf44      	itt	mi
 800fee6:	232b      	movmi	r3, #43	; 0x2b
 800fee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800feec:	f89a 3000 	ldrb.w	r3, [sl]
 800fef0:	2b2a      	cmp	r3, #42	; 0x2a
 800fef2:	d015      	beq.n	800ff20 <_vfiprintf_r+0x13c>
 800fef4:	9a07      	ldr	r2, [sp, #28]
 800fef6:	4654      	mov	r4, sl
 800fef8:	2000      	movs	r0, #0
 800fefa:	f04f 0c0a 	mov.w	ip, #10
 800fefe:	4621      	mov	r1, r4
 800ff00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff04:	3b30      	subs	r3, #48	; 0x30
 800ff06:	2b09      	cmp	r3, #9
 800ff08:	d94e      	bls.n	800ffa8 <_vfiprintf_r+0x1c4>
 800ff0a:	b1b0      	cbz	r0, 800ff3a <_vfiprintf_r+0x156>
 800ff0c:	9207      	str	r2, [sp, #28]
 800ff0e:	e014      	b.n	800ff3a <_vfiprintf_r+0x156>
 800ff10:	eba0 0308 	sub.w	r3, r0, r8
 800ff14:	fa09 f303 	lsl.w	r3, r9, r3
 800ff18:	4313      	orrs	r3, r2
 800ff1a:	9304      	str	r3, [sp, #16]
 800ff1c:	46a2      	mov	sl, r4
 800ff1e:	e7d2      	b.n	800fec6 <_vfiprintf_r+0xe2>
 800ff20:	9b03      	ldr	r3, [sp, #12]
 800ff22:	1d19      	adds	r1, r3, #4
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	9103      	str	r1, [sp, #12]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	bfbb      	ittet	lt
 800ff2c:	425b      	neglt	r3, r3
 800ff2e:	f042 0202 	orrlt.w	r2, r2, #2
 800ff32:	9307      	strge	r3, [sp, #28]
 800ff34:	9307      	strlt	r3, [sp, #28]
 800ff36:	bfb8      	it	lt
 800ff38:	9204      	strlt	r2, [sp, #16]
 800ff3a:	7823      	ldrb	r3, [r4, #0]
 800ff3c:	2b2e      	cmp	r3, #46	; 0x2e
 800ff3e:	d10c      	bne.n	800ff5a <_vfiprintf_r+0x176>
 800ff40:	7863      	ldrb	r3, [r4, #1]
 800ff42:	2b2a      	cmp	r3, #42	; 0x2a
 800ff44:	d135      	bne.n	800ffb2 <_vfiprintf_r+0x1ce>
 800ff46:	9b03      	ldr	r3, [sp, #12]
 800ff48:	1d1a      	adds	r2, r3, #4
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	9203      	str	r2, [sp, #12]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	bfb8      	it	lt
 800ff52:	f04f 33ff 	movlt.w	r3, #4294967295
 800ff56:	3402      	adds	r4, #2
 800ff58:	9305      	str	r3, [sp, #20]
 800ff5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010040 <_vfiprintf_r+0x25c>
 800ff5e:	7821      	ldrb	r1, [r4, #0]
 800ff60:	2203      	movs	r2, #3
 800ff62:	4650      	mov	r0, sl
 800ff64:	f7f0 f944 	bl	80001f0 <memchr>
 800ff68:	b140      	cbz	r0, 800ff7c <_vfiprintf_r+0x198>
 800ff6a:	2340      	movs	r3, #64	; 0x40
 800ff6c:	eba0 000a 	sub.w	r0, r0, sl
 800ff70:	fa03 f000 	lsl.w	r0, r3, r0
 800ff74:	9b04      	ldr	r3, [sp, #16]
 800ff76:	4303      	orrs	r3, r0
 800ff78:	3401      	adds	r4, #1
 800ff7a:	9304      	str	r3, [sp, #16]
 800ff7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff80:	482c      	ldr	r0, [pc, #176]	; (8010034 <_vfiprintf_r+0x250>)
 800ff82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ff86:	2206      	movs	r2, #6
 800ff88:	f7f0 f932 	bl	80001f0 <memchr>
 800ff8c:	2800      	cmp	r0, #0
 800ff8e:	d03f      	beq.n	8010010 <_vfiprintf_r+0x22c>
 800ff90:	4b29      	ldr	r3, [pc, #164]	; (8010038 <_vfiprintf_r+0x254>)
 800ff92:	bb1b      	cbnz	r3, 800ffdc <_vfiprintf_r+0x1f8>
 800ff94:	9b03      	ldr	r3, [sp, #12]
 800ff96:	3307      	adds	r3, #7
 800ff98:	f023 0307 	bic.w	r3, r3, #7
 800ff9c:	3308      	adds	r3, #8
 800ff9e:	9303      	str	r3, [sp, #12]
 800ffa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffa2:	443b      	add	r3, r7
 800ffa4:	9309      	str	r3, [sp, #36]	; 0x24
 800ffa6:	e767      	b.n	800fe78 <_vfiprintf_r+0x94>
 800ffa8:	fb0c 3202 	mla	r2, ip, r2, r3
 800ffac:	460c      	mov	r4, r1
 800ffae:	2001      	movs	r0, #1
 800ffb0:	e7a5      	b.n	800fefe <_vfiprintf_r+0x11a>
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	3401      	adds	r4, #1
 800ffb6:	9305      	str	r3, [sp, #20]
 800ffb8:	4619      	mov	r1, r3
 800ffba:	f04f 0c0a 	mov.w	ip, #10
 800ffbe:	4620      	mov	r0, r4
 800ffc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ffc4:	3a30      	subs	r2, #48	; 0x30
 800ffc6:	2a09      	cmp	r2, #9
 800ffc8:	d903      	bls.n	800ffd2 <_vfiprintf_r+0x1ee>
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d0c5      	beq.n	800ff5a <_vfiprintf_r+0x176>
 800ffce:	9105      	str	r1, [sp, #20]
 800ffd0:	e7c3      	b.n	800ff5a <_vfiprintf_r+0x176>
 800ffd2:	fb0c 2101 	mla	r1, ip, r1, r2
 800ffd6:	4604      	mov	r4, r0
 800ffd8:	2301      	movs	r3, #1
 800ffda:	e7f0      	b.n	800ffbe <_vfiprintf_r+0x1da>
 800ffdc:	ab03      	add	r3, sp, #12
 800ffde:	9300      	str	r3, [sp, #0]
 800ffe0:	462a      	mov	r2, r5
 800ffe2:	4b16      	ldr	r3, [pc, #88]	; (801003c <_vfiprintf_r+0x258>)
 800ffe4:	a904      	add	r1, sp, #16
 800ffe6:	4630      	mov	r0, r6
 800ffe8:	f000 f8cc 	bl	8010184 <_printf_float>
 800ffec:	4607      	mov	r7, r0
 800ffee:	1c78      	adds	r0, r7, #1
 800fff0:	d1d6      	bne.n	800ffa0 <_vfiprintf_r+0x1bc>
 800fff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fff4:	07d9      	lsls	r1, r3, #31
 800fff6:	d405      	bmi.n	8010004 <_vfiprintf_r+0x220>
 800fff8:	89ab      	ldrh	r3, [r5, #12]
 800fffa:	059a      	lsls	r2, r3, #22
 800fffc:	d402      	bmi.n	8010004 <_vfiprintf_r+0x220>
 800fffe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010000:	f003 f9f6 	bl	80133f0 <__retarget_lock_release_recursive>
 8010004:	89ab      	ldrh	r3, [r5, #12]
 8010006:	065b      	lsls	r3, r3, #25
 8010008:	f53f af12 	bmi.w	800fe30 <_vfiprintf_r+0x4c>
 801000c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801000e:	e711      	b.n	800fe34 <_vfiprintf_r+0x50>
 8010010:	ab03      	add	r3, sp, #12
 8010012:	9300      	str	r3, [sp, #0]
 8010014:	462a      	mov	r2, r5
 8010016:	4b09      	ldr	r3, [pc, #36]	; (801003c <_vfiprintf_r+0x258>)
 8010018:	a904      	add	r1, sp, #16
 801001a:	4630      	mov	r0, r6
 801001c:	f000 fb56 	bl	80106cc <_printf_i>
 8010020:	e7e4      	b.n	800ffec <_vfiprintf_r+0x208>
 8010022:	bf00      	nop
 8010024:	080164b4 	.word	0x080164b4
 8010028:	080164d4 	.word	0x080164d4
 801002c:	08016494 	.word	0x08016494
 8010030:	08016364 	.word	0x08016364
 8010034:	0801636e 	.word	0x0801636e
 8010038:	08010185 	.word	0x08010185
 801003c:	0800fdbf 	.word	0x0800fdbf
 8010040:	0801636a 	.word	0x0801636a

08010044 <__cvt>:
 8010044:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010048:	ec55 4b10 	vmov	r4, r5, d0
 801004c:	2d00      	cmp	r5, #0
 801004e:	460e      	mov	r6, r1
 8010050:	4619      	mov	r1, r3
 8010052:	462b      	mov	r3, r5
 8010054:	bfbb      	ittet	lt
 8010056:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801005a:	461d      	movlt	r5, r3
 801005c:	2300      	movge	r3, #0
 801005e:	232d      	movlt	r3, #45	; 0x2d
 8010060:	700b      	strb	r3, [r1, #0]
 8010062:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010064:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010068:	4691      	mov	r9, r2
 801006a:	f023 0820 	bic.w	r8, r3, #32
 801006e:	bfbc      	itt	lt
 8010070:	4622      	movlt	r2, r4
 8010072:	4614      	movlt	r4, r2
 8010074:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010078:	d005      	beq.n	8010086 <__cvt+0x42>
 801007a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801007e:	d100      	bne.n	8010082 <__cvt+0x3e>
 8010080:	3601      	adds	r6, #1
 8010082:	2102      	movs	r1, #2
 8010084:	e000      	b.n	8010088 <__cvt+0x44>
 8010086:	2103      	movs	r1, #3
 8010088:	ab03      	add	r3, sp, #12
 801008a:	9301      	str	r3, [sp, #4]
 801008c:	ab02      	add	r3, sp, #8
 801008e:	9300      	str	r3, [sp, #0]
 8010090:	ec45 4b10 	vmov	d0, r4, r5
 8010094:	4653      	mov	r3, sl
 8010096:	4632      	mov	r2, r6
 8010098:	f001 fe92 	bl	8011dc0 <_dtoa_r>
 801009c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80100a0:	4607      	mov	r7, r0
 80100a2:	d102      	bne.n	80100aa <__cvt+0x66>
 80100a4:	f019 0f01 	tst.w	r9, #1
 80100a8:	d022      	beq.n	80100f0 <__cvt+0xac>
 80100aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80100ae:	eb07 0906 	add.w	r9, r7, r6
 80100b2:	d110      	bne.n	80100d6 <__cvt+0x92>
 80100b4:	783b      	ldrb	r3, [r7, #0]
 80100b6:	2b30      	cmp	r3, #48	; 0x30
 80100b8:	d10a      	bne.n	80100d0 <__cvt+0x8c>
 80100ba:	2200      	movs	r2, #0
 80100bc:	2300      	movs	r3, #0
 80100be:	4620      	mov	r0, r4
 80100c0:	4629      	mov	r1, r5
 80100c2:	f7f0 fd09 	bl	8000ad8 <__aeabi_dcmpeq>
 80100c6:	b918      	cbnz	r0, 80100d0 <__cvt+0x8c>
 80100c8:	f1c6 0601 	rsb	r6, r6, #1
 80100cc:	f8ca 6000 	str.w	r6, [sl]
 80100d0:	f8da 3000 	ldr.w	r3, [sl]
 80100d4:	4499      	add	r9, r3
 80100d6:	2200      	movs	r2, #0
 80100d8:	2300      	movs	r3, #0
 80100da:	4620      	mov	r0, r4
 80100dc:	4629      	mov	r1, r5
 80100de:	f7f0 fcfb 	bl	8000ad8 <__aeabi_dcmpeq>
 80100e2:	b108      	cbz	r0, 80100e8 <__cvt+0xa4>
 80100e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80100e8:	2230      	movs	r2, #48	; 0x30
 80100ea:	9b03      	ldr	r3, [sp, #12]
 80100ec:	454b      	cmp	r3, r9
 80100ee:	d307      	bcc.n	8010100 <__cvt+0xbc>
 80100f0:	9b03      	ldr	r3, [sp, #12]
 80100f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80100f4:	1bdb      	subs	r3, r3, r7
 80100f6:	4638      	mov	r0, r7
 80100f8:	6013      	str	r3, [r2, #0]
 80100fa:	b004      	add	sp, #16
 80100fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010100:	1c59      	adds	r1, r3, #1
 8010102:	9103      	str	r1, [sp, #12]
 8010104:	701a      	strb	r2, [r3, #0]
 8010106:	e7f0      	b.n	80100ea <__cvt+0xa6>

08010108 <__exponent>:
 8010108:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801010a:	4603      	mov	r3, r0
 801010c:	2900      	cmp	r1, #0
 801010e:	bfb8      	it	lt
 8010110:	4249      	neglt	r1, r1
 8010112:	f803 2b02 	strb.w	r2, [r3], #2
 8010116:	bfb4      	ite	lt
 8010118:	222d      	movlt	r2, #45	; 0x2d
 801011a:	222b      	movge	r2, #43	; 0x2b
 801011c:	2909      	cmp	r1, #9
 801011e:	7042      	strb	r2, [r0, #1]
 8010120:	dd2a      	ble.n	8010178 <__exponent+0x70>
 8010122:	f10d 0407 	add.w	r4, sp, #7
 8010126:	46a4      	mov	ip, r4
 8010128:	270a      	movs	r7, #10
 801012a:	46a6      	mov	lr, r4
 801012c:	460a      	mov	r2, r1
 801012e:	fb91 f6f7 	sdiv	r6, r1, r7
 8010132:	fb07 1516 	mls	r5, r7, r6, r1
 8010136:	3530      	adds	r5, #48	; 0x30
 8010138:	2a63      	cmp	r2, #99	; 0x63
 801013a:	f104 34ff 	add.w	r4, r4, #4294967295
 801013e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010142:	4631      	mov	r1, r6
 8010144:	dcf1      	bgt.n	801012a <__exponent+0x22>
 8010146:	3130      	adds	r1, #48	; 0x30
 8010148:	f1ae 0502 	sub.w	r5, lr, #2
 801014c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010150:	1c44      	adds	r4, r0, #1
 8010152:	4629      	mov	r1, r5
 8010154:	4561      	cmp	r1, ip
 8010156:	d30a      	bcc.n	801016e <__exponent+0x66>
 8010158:	f10d 0209 	add.w	r2, sp, #9
 801015c:	eba2 020e 	sub.w	r2, r2, lr
 8010160:	4565      	cmp	r5, ip
 8010162:	bf88      	it	hi
 8010164:	2200      	movhi	r2, #0
 8010166:	4413      	add	r3, r2
 8010168:	1a18      	subs	r0, r3, r0
 801016a:	b003      	add	sp, #12
 801016c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801016e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010172:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010176:	e7ed      	b.n	8010154 <__exponent+0x4c>
 8010178:	2330      	movs	r3, #48	; 0x30
 801017a:	3130      	adds	r1, #48	; 0x30
 801017c:	7083      	strb	r3, [r0, #2]
 801017e:	70c1      	strb	r1, [r0, #3]
 8010180:	1d03      	adds	r3, r0, #4
 8010182:	e7f1      	b.n	8010168 <__exponent+0x60>

08010184 <_printf_float>:
 8010184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010188:	ed2d 8b02 	vpush	{d8}
 801018c:	b08d      	sub	sp, #52	; 0x34
 801018e:	460c      	mov	r4, r1
 8010190:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010194:	4616      	mov	r6, r2
 8010196:	461f      	mov	r7, r3
 8010198:	4605      	mov	r5, r0
 801019a:	f003 f923 	bl	80133e4 <_localeconv_r>
 801019e:	f8d0 a000 	ldr.w	sl, [r0]
 80101a2:	4650      	mov	r0, sl
 80101a4:	f7f0 f81c 	bl	80001e0 <strlen>
 80101a8:	2300      	movs	r3, #0
 80101aa:	930a      	str	r3, [sp, #40]	; 0x28
 80101ac:	6823      	ldr	r3, [r4, #0]
 80101ae:	9305      	str	r3, [sp, #20]
 80101b0:	f8d8 3000 	ldr.w	r3, [r8]
 80101b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80101b8:	3307      	adds	r3, #7
 80101ba:	f023 0307 	bic.w	r3, r3, #7
 80101be:	f103 0208 	add.w	r2, r3, #8
 80101c2:	f8c8 2000 	str.w	r2, [r8]
 80101c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80101ce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80101d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80101d6:	9307      	str	r3, [sp, #28]
 80101d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80101dc:	ee08 0a10 	vmov	s16, r0
 80101e0:	4b9f      	ldr	r3, [pc, #636]	; (8010460 <_printf_float+0x2dc>)
 80101e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80101e6:	f04f 32ff 	mov.w	r2, #4294967295
 80101ea:	f7f0 fca7 	bl	8000b3c <__aeabi_dcmpun>
 80101ee:	bb88      	cbnz	r0, 8010254 <_printf_float+0xd0>
 80101f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80101f4:	4b9a      	ldr	r3, [pc, #616]	; (8010460 <_printf_float+0x2dc>)
 80101f6:	f04f 32ff 	mov.w	r2, #4294967295
 80101fa:	f7f0 fc81 	bl	8000b00 <__aeabi_dcmple>
 80101fe:	bb48      	cbnz	r0, 8010254 <_printf_float+0xd0>
 8010200:	2200      	movs	r2, #0
 8010202:	2300      	movs	r3, #0
 8010204:	4640      	mov	r0, r8
 8010206:	4649      	mov	r1, r9
 8010208:	f7f0 fc70 	bl	8000aec <__aeabi_dcmplt>
 801020c:	b110      	cbz	r0, 8010214 <_printf_float+0x90>
 801020e:	232d      	movs	r3, #45	; 0x2d
 8010210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010214:	4b93      	ldr	r3, [pc, #588]	; (8010464 <_printf_float+0x2e0>)
 8010216:	4894      	ldr	r0, [pc, #592]	; (8010468 <_printf_float+0x2e4>)
 8010218:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801021c:	bf94      	ite	ls
 801021e:	4698      	movls	r8, r3
 8010220:	4680      	movhi	r8, r0
 8010222:	2303      	movs	r3, #3
 8010224:	6123      	str	r3, [r4, #16]
 8010226:	9b05      	ldr	r3, [sp, #20]
 8010228:	f023 0204 	bic.w	r2, r3, #4
 801022c:	6022      	str	r2, [r4, #0]
 801022e:	f04f 0900 	mov.w	r9, #0
 8010232:	9700      	str	r7, [sp, #0]
 8010234:	4633      	mov	r3, r6
 8010236:	aa0b      	add	r2, sp, #44	; 0x2c
 8010238:	4621      	mov	r1, r4
 801023a:	4628      	mov	r0, r5
 801023c:	f000 f9d8 	bl	80105f0 <_printf_common>
 8010240:	3001      	adds	r0, #1
 8010242:	f040 8090 	bne.w	8010366 <_printf_float+0x1e2>
 8010246:	f04f 30ff 	mov.w	r0, #4294967295
 801024a:	b00d      	add	sp, #52	; 0x34
 801024c:	ecbd 8b02 	vpop	{d8}
 8010250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010254:	4642      	mov	r2, r8
 8010256:	464b      	mov	r3, r9
 8010258:	4640      	mov	r0, r8
 801025a:	4649      	mov	r1, r9
 801025c:	f7f0 fc6e 	bl	8000b3c <__aeabi_dcmpun>
 8010260:	b140      	cbz	r0, 8010274 <_printf_float+0xf0>
 8010262:	464b      	mov	r3, r9
 8010264:	2b00      	cmp	r3, #0
 8010266:	bfbc      	itt	lt
 8010268:	232d      	movlt	r3, #45	; 0x2d
 801026a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801026e:	487f      	ldr	r0, [pc, #508]	; (801046c <_printf_float+0x2e8>)
 8010270:	4b7f      	ldr	r3, [pc, #508]	; (8010470 <_printf_float+0x2ec>)
 8010272:	e7d1      	b.n	8010218 <_printf_float+0x94>
 8010274:	6863      	ldr	r3, [r4, #4]
 8010276:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801027a:	9206      	str	r2, [sp, #24]
 801027c:	1c5a      	adds	r2, r3, #1
 801027e:	d13f      	bne.n	8010300 <_printf_float+0x17c>
 8010280:	2306      	movs	r3, #6
 8010282:	6063      	str	r3, [r4, #4]
 8010284:	9b05      	ldr	r3, [sp, #20]
 8010286:	6861      	ldr	r1, [r4, #4]
 8010288:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801028c:	2300      	movs	r3, #0
 801028e:	9303      	str	r3, [sp, #12]
 8010290:	ab0a      	add	r3, sp, #40	; 0x28
 8010292:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010296:	ab09      	add	r3, sp, #36	; 0x24
 8010298:	ec49 8b10 	vmov	d0, r8, r9
 801029c:	9300      	str	r3, [sp, #0]
 801029e:	6022      	str	r2, [r4, #0]
 80102a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80102a4:	4628      	mov	r0, r5
 80102a6:	f7ff fecd 	bl	8010044 <__cvt>
 80102aa:	9b06      	ldr	r3, [sp, #24]
 80102ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80102ae:	2b47      	cmp	r3, #71	; 0x47
 80102b0:	4680      	mov	r8, r0
 80102b2:	d108      	bne.n	80102c6 <_printf_float+0x142>
 80102b4:	1cc8      	adds	r0, r1, #3
 80102b6:	db02      	blt.n	80102be <_printf_float+0x13a>
 80102b8:	6863      	ldr	r3, [r4, #4]
 80102ba:	4299      	cmp	r1, r3
 80102bc:	dd41      	ble.n	8010342 <_printf_float+0x1be>
 80102be:	f1ab 0b02 	sub.w	fp, fp, #2
 80102c2:	fa5f fb8b 	uxtb.w	fp, fp
 80102c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80102ca:	d820      	bhi.n	801030e <_printf_float+0x18a>
 80102cc:	3901      	subs	r1, #1
 80102ce:	465a      	mov	r2, fp
 80102d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80102d4:	9109      	str	r1, [sp, #36]	; 0x24
 80102d6:	f7ff ff17 	bl	8010108 <__exponent>
 80102da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80102dc:	1813      	adds	r3, r2, r0
 80102de:	2a01      	cmp	r2, #1
 80102e0:	4681      	mov	r9, r0
 80102e2:	6123      	str	r3, [r4, #16]
 80102e4:	dc02      	bgt.n	80102ec <_printf_float+0x168>
 80102e6:	6822      	ldr	r2, [r4, #0]
 80102e8:	07d2      	lsls	r2, r2, #31
 80102ea:	d501      	bpl.n	80102f0 <_printf_float+0x16c>
 80102ec:	3301      	adds	r3, #1
 80102ee:	6123      	str	r3, [r4, #16]
 80102f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d09c      	beq.n	8010232 <_printf_float+0xae>
 80102f8:	232d      	movs	r3, #45	; 0x2d
 80102fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80102fe:	e798      	b.n	8010232 <_printf_float+0xae>
 8010300:	9a06      	ldr	r2, [sp, #24]
 8010302:	2a47      	cmp	r2, #71	; 0x47
 8010304:	d1be      	bne.n	8010284 <_printf_float+0x100>
 8010306:	2b00      	cmp	r3, #0
 8010308:	d1bc      	bne.n	8010284 <_printf_float+0x100>
 801030a:	2301      	movs	r3, #1
 801030c:	e7b9      	b.n	8010282 <_printf_float+0xfe>
 801030e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010312:	d118      	bne.n	8010346 <_printf_float+0x1c2>
 8010314:	2900      	cmp	r1, #0
 8010316:	6863      	ldr	r3, [r4, #4]
 8010318:	dd0b      	ble.n	8010332 <_printf_float+0x1ae>
 801031a:	6121      	str	r1, [r4, #16]
 801031c:	b913      	cbnz	r3, 8010324 <_printf_float+0x1a0>
 801031e:	6822      	ldr	r2, [r4, #0]
 8010320:	07d0      	lsls	r0, r2, #31
 8010322:	d502      	bpl.n	801032a <_printf_float+0x1a6>
 8010324:	3301      	adds	r3, #1
 8010326:	440b      	add	r3, r1
 8010328:	6123      	str	r3, [r4, #16]
 801032a:	65a1      	str	r1, [r4, #88]	; 0x58
 801032c:	f04f 0900 	mov.w	r9, #0
 8010330:	e7de      	b.n	80102f0 <_printf_float+0x16c>
 8010332:	b913      	cbnz	r3, 801033a <_printf_float+0x1b6>
 8010334:	6822      	ldr	r2, [r4, #0]
 8010336:	07d2      	lsls	r2, r2, #31
 8010338:	d501      	bpl.n	801033e <_printf_float+0x1ba>
 801033a:	3302      	adds	r3, #2
 801033c:	e7f4      	b.n	8010328 <_printf_float+0x1a4>
 801033e:	2301      	movs	r3, #1
 8010340:	e7f2      	b.n	8010328 <_printf_float+0x1a4>
 8010342:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010348:	4299      	cmp	r1, r3
 801034a:	db05      	blt.n	8010358 <_printf_float+0x1d4>
 801034c:	6823      	ldr	r3, [r4, #0]
 801034e:	6121      	str	r1, [r4, #16]
 8010350:	07d8      	lsls	r0, r3, #31
 8010352:	d5ea      	bpl.n	801032a <_printf_float+0x1a6>
 8010354:	1c4b      	adds	r3, r1, #1
 8010356:	e7e7      	b.n	8010328 <_printf_float+0x1a4>
 8010358:	2900      	cmp	r1, #0
 801035a:	bfd4      	ite	le
 801035c:	f1c1 0202 	rsble	r2, r1, #2
 8010360:	2201      	movgt	r2, #1
 8010362:	4413      	add	r3, r2
 8010364:	e7e0      	b.n	8010328 <_printf_float+0x1a4>
 8010366:	6823      	ldr	r3, [r4, #0]
 8010368:	055a      	lsls	r2, r3, #21
 801036a:	d407      	bmi.n	801037c <_printf_float+0x1f8>
 801036c:	6923      	ldr	r3, [r4, #16]
 801036e:	4642      	mov	r2, r8
 8010370:	4631      	mov	r1, r6
 8010372:	4628      	mov	r0, r5
 8010374:	47b8      	blx	r7
 8010376:	3001      	adds	r0, #1
 8010378:	d12c      	bne.n	80103d4 <_printf_float+0x250>
 801037a:	e764      	b.n	8010246 <_printf_float+0xc2>
 801037c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010380:	f240 80e0 	bls.w	8010544 <_printf_float+0x3c0>
 8010384:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010388:	2200      	movs	r2, #0
 801038a:	2300      	movs	r3, #0
 801038c:	f7f0 fba4 	bl	8000ad8 <__aeabi_dcmpeq>
 8010390:	2800      	cmp	r0, #0
 8010392:	d034      	beq.n	80103fe <_printf_float+0x27a>
 8010394:	4a37      	ldr	r2, [pc, #220]	; (8010474 <_printf_float+0x2f0>)
 8010396:	2301      	movs	r3, #1
 8010398:	4631      	mov	r1, r6
 801039a:	4628      	mov	r0, r5
 801039c:	47b8      	blx	r7
 801039e:	3001      	adds	r0, #1
 80103a0:	f43f af51 	beq.w	8010246 <_printf_float+0xc2>
 80103a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80103a8:	429a      	cmp	r2, r3
 80103aa:	db02      	blt.n	80103b2 <_printf_float+0x22e>
 80103ac:	6823      	ldr	r3, [r4, #0]
 80103ae:	07d8      	lsls	r0, r3, #31
 80103b0:	d510      	bpl.n	80103d4 <_printf_float+0x250>
 80103b2:	ee18 3a10 	vmov	r3, s16
 80103b6:	4652      	mov	r2, sl
 80103b8:	4631      	mov	r1, r6
 80103ba:	4628      	mov	r0, r5
 80103bc:	47b8      	blx	r7
 80103be:	3001      	adds	r0, #1
 80103c0:	f43f af41 	beq.w	8010246 <_printf_float+0xc2>
 80103c4:	f04f 0800 	mov.w	r8, #0
 80103c8:	f104 091a 	add.w	r9, r4, #26
 80103cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103ce:	3b01      	subs	r3, #1
 80103d0:	4543      	cmp	r3, r8
 80103d2:	dc09      	bgt.n	80103e8 <_printf_float+0x264>
 80103d4:	6823      	ldr	r3, [r4, #0]
 80103d6:	079b      	lsls	r3, r3, #30
 80103d8:	f100 8105 	bmi.w	80105e6 <_printf_float+0x462>
 80103dc:	68e0      	ldr	r0, [r4, #12]
 80103de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80103e0:	4298      	cmp	r0, r3
 80103e2:	bfb8      	it	lt
 80103e4:	4618      	movlt	r0, r3
 80103e6:	e730      	b.n	801024a <_printf_float+0xc6>
 80103e8:	2301      	movs	r3, #1
 80103ea:	464a      	mov	r2, r9
 80103ec:	4631      	mov	r1, r6
 80103ee:	4628      	mov	r0, r5
 80103f0:	47b8      	blx	r7
 80103f2:	3001      	adds	r0, #1
 80103f4:	f43f af27 	beq.w	8010246 <_printf_float+0xc2>
 80103f8:	f108 0801 	add.w	r8, r8, #1
 80103fc:	e7e6      	b.n	80103cc <_printf_float+0x248>
 80103fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010400:	2b00      	cmp	r3, #0
 8010402:	dc39      	bgt.n	8010478 <_printf_float+0x2f4>
 8010404:	4a1b      	ldr	r2, [pc, #108]	; (8010474 <_printf_float+0x2f0>)
 8010406:	2301      	movs	r3, #1
 8010408:	4631      	mov	r1, r6
 801040a:	4628      	mov	r0, r5
 801040c:	47b8      	blx	r7
 801040e:	3001      	adds	r0, #1
 8010410:	f43f af19 	beq.w	8010246 <_printf_float+0xc2>
 8010414:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010418:	4313      	orrs	r3, r2
 801041a:	d102      	bne.n	8010422 <_printf_float+0x29e>
 801041c:	6823      	ldr	r3, [r4, #0]
 801041e:	07d9      	lsls	r1, r3, #31
 8010420:	d5d8      	bpl.n	80103d4 <_printf_float+0x250>
 8010422:	ee18 3a10 	vmov	r3, s16
 8010426:	4652      	mov	r2, sl
 8010428:	4631      	mov	r1, r6
 801042a:	4628      	mov	r0, r5
 801042c:	47b8      	blx	r7
 801042e:	3001      	adds	r0, #1
 8010430:	f43f af09 	beq.w	8010246 <_printf_float+0xc2>
 8010434:	f04f 0900 	mov.w	r9, #0
 8010438:	f104 0a1a 	add.w	sl, r4, #26
 801043c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801043e:	425b      	negs	r3, r3
 8010440:	454b      	cmp	r3, r9
 8010442:	dc01      	bgt.n	8010448 <_printf_float+0x2c4>
 8010444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010446:	e792      	b.n	801036e <_printf_float+0x1ea>
 8010448:	2301      	movs	r3, #1
 801044a:	4652      	mov	r2, sl
 801044c:	4631      	mov	r1, r6
 801044e:	4628      	mov	r0, r5
 8010450:	47b8      	blx	r7
 8010452:	3001      	adds	r0, #1
 8010454:	f43f aef7 	beq.w	8010246 <_printf_float+0xc2>
 8010458:	f109 0901 	add.w	r9, r9, #1
 801045c:	e7ee      	b.n	801043c <_printf_float+0x2b8>
 801045e:	bf00      	nop
 8010460:	7fefffff 	.word	0x7fefffff
 8010464:	08016375 	.word	0x08016375
 8010468:	08016379 	.word	0x08016379
 801046c:	08016381 	.word	0x08016381
 8010470:	0801637d 	.word	0x0801637d
 8010474:	08016385 	.word	0x08016385
 8010478:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801047a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801047c:	429a      	cmp	r2, r3
 801047e:	bfa8      	it	ge
 8010480:	461a      	movge	r2, r3
 8010482:	2a00      	cmp	r2, #0
 8010484:	4691      	mov	r9, r2
 8010486:	dc37      	bgt.n	80104f8 <_printf_float+0x374>
 8010488:	f04f 0b00 	mov.w	fp, #0
 801048c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010490:	f104 021a 	add.w	r2, r4, #26
 8010494:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010496:	9305      	str	r3, [sp, #20]
 8010498:	eba3 0309 	sub.w	r3, r3, r9
 801049c:	455b      	cmp	r3, fp
 801049e:	dc33      	bgt.n	8010508 <_printf_float+0x384>
 80104a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80104a4:	429a      	cmp	r2, r3
 80104a6:	db3b      	blt.n	8010520 <_printf_float+0x39c>
 80104a8:	6823      	ldr	r3, [r4, #0]
 80104aa:	07da      	lsls	r2, r3, #31
 80104ac:	d438      	bmi.n	8010520 <_printf_float+0x39c>
 80104ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80104b0:	9b05      	ldr	r3, [sp, #20]
 80104b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80104b4:	1ad3      	subs	r3, r2, r3
 80104b6:	eba2 0901 	sub.w	r9, r2, r1
 80104ba:	4599      	cmp	r9, r3
 80104bc:	bfa8      	it	ge
 80104be:	4699      	movge	r9, r3
 80104c0:	f1b9 0f00 	cmp.w	r9, #0
 80104c4:	dc35      	bgt.n	8010532 <_printf_float+0x3ae>
 80104c6:	f04f 0800 	mov.w	r8, #0
 80104ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80104ce:	f104 0a1a 	add.w	sl, r4, #26
 80104d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80104d6:	1a9b      	subs	r3, r3, r2
 80104d8:	eba3 0309 	sub.w	r3, r3, r9
 80104dc:	4543      	cmp	r3, r8
 80104de:	f77f af79 	ble.w	80103d4 <_printf_float+0x250>
 80104e2:	2301      	movs	r3, #1
 80104e4:	4652      	mov	r2, sl
 80104e6:	4631      	mov	r1, r6
 80104e8:	4628      	mov	r0, r5
 80104ea:	47b8      	blx	r7
 80104ec:	3001      	adds	r0, #1
 80104ee:	f43f aeaa 	beq.w	8010246 <_printf_float+0xc2>
 80104f2:	f108 0801 	add.w	r8, r8, #1
 80104f6:	e7ec      	b.n	80104d2 <_printf_float+0x34e>
 80104f8:	4613      	mov	r3, r2
 80104fa:	4631      	mov	r1, r6
 80104fc:	4642      	mov	r2, r8
 80104fe:	4628      	mov	r0, r5
 8010500:	47b8      	blx	r7
 8010502:	3001      	adds	r0, #1
 8010504:	d1c0      	bne.n	8010488 <_printf_float+0x304>
 8010506:	e69e      	b.n	8010246 <_printf_float+0xc2>
 8010508:	2301      	movs	r3, #1
 801050a:	4631      	mov	r1, r6
 801050c:	4628      	mov	r0, r5
 801050e:	9205      	str	r2, [sp, #20]
 8010510:	47b8      	blx	r7
 8010512:	3001      	adds	r0, #1
 8010514:	f43f ae97 	beq.w	8010246 <_printf_float+0xc2>
 8010518:	9a05      	ldr	r2, [sp, #20]
 801051a:	f10b 0b01 	add.w	fp, fp, #1
 801051e:	e7b9      	b.n	8010494 <_printf_float+0x310>
 8010520:	ee18 3a10 	vmov	r3, s16
 8010524:	4652      	mov	r2, sl
 8010526:	4631      	mov	r1, r6
 8010528:	4628      	mov	r0, r5
 801052a:	47b8      	blx	r7
 801052c:	3001      	adds	r0, #1
 801052e:	d1be      	bne.n	80104ae <_printf_float+0x32a>
 8010530:	e689      	b.n	8010246 <_printf_float+0xc2>
 8010532:	9a05      	ldr	r2, [sp, #20]
 8010534:	464b      	mov	r3, r9
 8010536:	4442      	add	r2, r8
 8010538:	4631      	mov	r1, r6
 801053a:	4628      	mov	r0, r5
 801053c:	47b8      	blx	r7
 801053e:	3001      	adds	r0, #1
 8010540:	d1c1      	bne.n	80104c6 <_printf_float+0x342>
 8010542:	e680      	b.n	8010246 <_printf_float+0xc2>
 8010544:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010546:	2a01      	cmp	r2, #1
 8010548:	dc01      	bgt.n	801054e <_printf_float+0x3ca>
 801054a:	07db      	lsls	r3, r3, #31
 801054c:	d538      	bpl.n	80105c0 <_printf_float+0x43c>
 801054e:	2301      	movs	r3, #1
 8010550:	4642      	mov	r2, r8
 8010552:	4631      	mov	r1, r6
 8010554:	4628      	mov	r0, r5
 8010556:	47b8      	blx	r7
 8010558:	3001      	adds	r0, #1
 801055a:	f43f ae74 	beq.w	8010246 <_printf_float+0xc2>
 801055e:	ee18 3a10 	vmov	r3, s16
 8010562:	4652      	mov	r2, sl
 8010564:	4631      	mov	r1, r6
 8010566:	4628      	mov	r0, r5
 8010568:	47b8      	blx	r7
 801056a:	3001      	adds	r0, #1
 801056c:	f43f ae6b 	beq.w	8010246 <_printf_float+0xc2>
 8010570:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010574:	2200      	movs	r2, #0
 8010576:	2300      	movs	r3, #0
 8010578:	f7f0 faae 	bl	8000ad8 <__aeabi_dcmpeq>
 801057c:	b9d8      	cbnz	r0, 80105b6 <_printf_float+0x432>
 801057e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010580:	f108 0201 	add.w	r2, r8, #1
 8010584:	3b01      	subs	r3, #1
 8010586:	4631      	mov	r1, r6
 8010588:	4628      	mov	r0, r5
 801058a:	47b8      	blx	r7
 801058c:	3001      	adds	r0, #1
 801058e:	d10e      	bne.n	80105ae <_printf_float+0x42a>
 8010590:	e659      	b.n	8010246 <_printf_float+0xc2>
 8010592:	2301      	movs	r3, #1
 8010594:	4652      	mov	r2, sl
 8010596:	4631      	mov	r1, r6
 8010598:	4628      	mov	r0, r5
 801059a:	47b8      	blx	r7
 801059c:	3001      	adds	r0, #1
 801059e:	f43f ae52 	beq.w	8010246 <_printf_float+0xc2>
 80105a2:	f108 0801 	add.w	r8, r8, #1
 80105a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105a8:	3b01      	subs	r3, #1
 80105aa:	4543      	cmp	r3, r8
 80105ac:	dcf1      	bgt.n	8010592 <_printf_float+0x40e>
 80105ae:	464b      	mov	r3, r9
 80105b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80105b4:	e6dc      	b.n	8010370 <_printf_float+0x1ec>
 80105b6:	f04f 0800 	mov.w	r8, #0
 80105ba:	f104 0a1a 	add.w	sl, r4, #26
 80105be:	e7f2      	b.n	80105a6 <_printf_float+0x422>
 80105c0:	2301      	movs	r3, #1
 80105c2:	4642      	mov	r2, r8
 80105c4:	e7df      	b.n	8010586 <_printf_float+0x402>
 80105c6:	2301      	movs	r3, #1
 80105c8:	464a      	mov	r2, r9
 80105ca:	4631      	mov	r1, r6
 80105cc:	4628      	mov	r0, r5
 80105ce:	47b8      	blx	r7
 80105d0:	3001      	adds	r0, #1
 80105d2:	f43f ae38 	beq.w	8010246 <_printf_float+0xc2>
 80105d6:	f108 0801 	add.w	r8, r8, #1
 80105da:	68e3      	ldr	r3, [r4, #12]
 80105dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80105de:	1a5b      	subs	r3, r3, r1
 80105e0:	4543      	cmp	r3, r8
 80105e2:	dcf0      	bgt.n	80105c6 <_printf_float+0x442>
 80105e4:	e6fa      	b.n	80103dc <_printf_float+0x258>
 80105e6:	f04f 0800 	mov.w	r8, #0
 80105ea:	f104 0919 	add.w	r9, r4, #25
 80105ee:	e7f4      	b.n	80105da <_printf_float+0x456>

080105f0 <_printf_common>:
 80105f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105f4:	4616      	mov	r6, r2
 80105f6:	4699      	mov	r9, r3
 80105f8:	688a      	ldr	r2, [r1, #8]
 80105fa:	690b      	ldr	r3, [r1, #16]
 80105fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010600:	4293      	cmp	r3, r2
 8010602:	bfb8      	it	lt
 8010604:	4613      	movlt	r3, r2
 8010606:	6033      	str	r3, [r6, #0]
 8010608:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801060c:	4607      	mov	r7, r0
 801060e:	460c      	mov	r4, r1
 8010610:	b10a      	cbz	r2, 8010616 <_printf_common+0x26>
 8010612:	3301      	adds	r3, #1
 8010614:	6033      	str	r3, [r6, #0]
 8010616:	6823      	ldr	r3, [r4, #0]
 8010618:	0699      	lsls	r1, r3, #26
 801061a:	bf42      	ittt	mi
 801061c:	6833      	ldrmi	r3, [r6, #0]
 801061e:	3302      	addmi	r3, #2
 8010620:	6033      	strmi	r3, [r6, #0]
 8010622:	6825      	ldr	r5, [r4, #0]
 8010624:	f015 0506 	ands.w	r5, r5, #6
 8010628:	d106      	bne.n	8010638 <_printf_common+0x48>
 801062a:	f104 0a19 	add.w	sl, r4, #25
 801062e:	68e3      	ldr	r3, [r4, #12]
 8010630:	6832      	ldr	r2, [r6, #0]
 8010632:	1a9b      	subs	r3, r3, r2
 8010634:	42ab      	cmp	r3, r5
 8010636:	dc26      	bgt.n	8010686 <_printf_common+0x96>
 8010638:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801063c:	1e13      	subs	r3, r2, #0
 801063e:	6822      	ldr	r2, [r4, #0]
 8010640:	bf18      	it	ne
 8010642:	2301      	movne	r3, #1
 8010644:	0692      	lsls	r2, r2, #26
 8010646:	d42b      	bmi.n	80106a0 <_printf_common+0xb0>
 8010648:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801064c:	4649      	mov	r1, r9
 801064e:	4638      	mov	r0, r7
 8010650:	47c0      	blx	r8
 8010652:	3001      	adds	r0, #1
 8010654:	d01e      	beq.n	8010694 <_printf_common+0xa4>
 8010656:	6823      	ldr	r3, [r4, #0]
 8010658:	68e5      	ldr	r5, [r4, #12]
 801065a:	6832      	ldr	r2, [r6, #0]
 801065c:	f003 0306 	and.w	r3, r3, #6
 8010660:	2b04      	cmp	r3, #4
 8010662:	bf08      	it	eq
 8010664:	1aad      	subeq	r5, r5, r2
 8010666:	68a3      	ldr	r3, [r4, #8]
 8010668:	6922      	ldr	r2, [r4, #16]
 801066a:	bf0c      	ite	eq
 801066c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010670:	2500      	movne	r5, #0
 8010672:	4293      	cmp	r3, r2
 8010674:	bfc4      	itt	gt
 8010676:	1a9b      	subgt	r3, r3, r2
 8010678:	18ed      	addgt	r5, r5, r3
 801067a:	2600      	movs	r6, #0
 801067c:	341a      	adds	r4, #26
 801067e:	42b5      	cmp	r5, r6
 8010680:	d11a      	bne.n	80106b8 <_printf_common+0xc8>
 8010682:	2000      	movs	r0, #0
 8010684:	e008      	b.n	8010698 <_printf_common+0xa8>
 8010686:	2301      	movs	r3, #1
 8010688:	4652      	mov	r2, sl
 801068a:	4649      	mov	r1, r9
 801068c:	4638      	mov	r0, r7
 801068e:	47c0      	blx	r8
 8010690:	3001      	adds	r0, #1
 8010692:	d103      	bne.n	801069c <_printf_common+0xac>
 8010694:	f04f 30ff 	mov.w	r0, #4294967295
 8010698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801069c:	3501      	adds	r5, #1
 801069e:	e7c6      	b.n	801062e <_printf_common+0x3e>
 80106a0:	18e1      	adds	r1, r4, r3
 80106a2:	1c5a      	adds	r2, r3, #1
 80106a4:	2030      	movs	r0, #48	; 0x30
 80106a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80106aa:	4422      	add	r2, r4
 80106ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80106b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80106b4:	3302      	adds	r3, #2
 80106b6:	e7c7      	b.n	8010648 <_printf_common+0x58>
 80106b8:	2301      	movs	r3, #1
 80106ba:	4622      	mov	r2, r4
 80106bc:	4649      	mov	r1, r9
 80106be:	4638      	mov	r0, r7
 80106c0:	47c0      	blx	r8
 80106c2:	3001      	adds	r0, #1
 80106c4:	d0e6      	beq.n	8010694 <_printf_common+0xa4>
 80106c6:	3601      	adds	r6, #1
 80106c8:	e7d9      	b.n	801067e <_printf_common+0x8e>
	...

080106cc <_printf_i>:
 80106cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80106d0:	460c      	mov	r4, r1
 80106d2:	4691      	mov	r9, r2
 80106d4:	7e27      	ldrb	r7, [r4, #24]
 80106d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80106d8:	2f78      	cmp	r7, #120	; 0x78
 80106da:	4680      	mov	r8, r0
 80106dc:	469a      	mov	sl, r3
 80106de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80106e2:	d807      	bhi.n	80106f4 <_printf_i+0x28>
 80106e4:	2f62      	cmp	r7, #98	; 0x62
 80106e6:	d80a      	bhi.n	80106fe <_printf_i+0x32>
 80106e8:	2f00      	cmp	r7, #0
 80106ea:	f000 80d8 	beq.w	801089e <_printf_i+0x1d2>
 80106ee:	2f58      	cmp	r7, #88	; 0x58
 80106f0:	f000 80a3 	beq.w	801083a <_printf_i+0x16e>
 80106f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80106f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80106fc:	e03a      	b.n	8010774 <_printf_i+0xa8>
 80106fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010702:	2b15      	cmp	r3, #21
 8010704:	d8f6      	bhi.n	80106f4 <_printf_i+0x28>
 8010706:	a001      	add	r0, pc, #4	; (adr r0, 801070c <_printf_i+0x40>)
 8010708:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801070c:	08010765 	.word	0x08010765
 8010710:	08010779 	.word	0x08010779
 8010714:	080106f5 	.word	0x080106f5
 8010718:	080106f5 	.word	0x080106f5
 801071c:	080106f5 	.word	0x080106f5
 8010720:	080106f5 	.word	0x080106f5
 8010724:	08010779 	.word	0x08010779
 8010728:	080106f5 	.word	0x080106f5
 801072c:	080106f5 	.word	0x080106f5
 8010730:	080106f5 	.word	0x080106f5
 8010734:	080106f5 	.word	0x080106f5
 8010738:	08010885 	.word	0x08010885
 801073c:	080107a9 	.word	0x080107a9
 8010740:	08010867 	.word	0x08010867
 8010744:	080106f5 	.word	0x080106f5
 8010748:	080106f5 	.word	0x080106f5
 801074c:	080108a7 	.word	0x080108a7
 8010750:	080106f5 	.word	0x080106f5
 8010754:	080107a9 	.word	0x080107a9
 8010758:	080106f5 	.word	0x080106f5
 801075c:	080106f5 	.word	0x080106f5
 8010760:	0801086f 	.word	0x0801086f
 8010764:	680b      	ldr	r3, [r1, #0]
 8010766:	1d1a      	adds	r2, r3, #4
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	600a      	str	r2, [r1, #0]
 801076c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010770:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010774:	2301      	movs	r3, #1
 8010776:	e0a3      	b.n	80108c0 <_printf_i+0x1f4>
 8010778:	6825      	ldr	r5, [r4, #0]
 801077a:	6808      	ldr	r0, [r1, #0]
 801077c:	062e      	lsls	r6, r5, #24
 801077e:	f100 0304 	add.w	r3, r0, #4
 8010782:	d50a      	bpl.n	801079a <_printf_i+0xce>
 8010784:	6805      	ldr	r5, [r0, #0]
 8010786:	600b      	str	r3, [r1, #0]
 8010788:	2d00      	cmp	r5, #0
 801078a:	da03      	bge.n	8010794 <_printf_i+0xc8>
 801078c:	232d      	movs	r3, #45	; 0x2d
 801078e:	426d      	negs	r5, r5
 8010790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010794:	485e      	ldr	r0, [pc, #376]	; (8010910 <_printf_i+0x244>)
 8010796:	230a      	movs	r3, #10
 8010798:	e019      	b.n	80107ce <_printf_i+0x102>
 801079a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801079e:	6805      	ldr	r5, [r0, #0]
 80107a0:	600b      	str	r3, [r1, #0]
 80107a2:	bf18      	it	ne
 80107a4:	b22d      	sxthne	r5, r5
 80107a6:	e7ef      	b.n	8010788 <_printf_i+0xbc>
 80107a8:	680b      	ldr	r3, [r1, #0]
 80107aa:	6825      	ldr	r5, [r4, #0]
 80107ac:	1d18      	adds	r0, r3, #4
 80107ae:	6008      	str	r0, [r1, #0]
 80107b0:	0628      	lsls	r0, r5, #24
 80107b2:	d501      	bpl.n	80107b8 <_printf_i+0xec>
 80107b4:	681d      	ldr	r5, [r3, #0]
 80107b6:	e002      	b.n	80107be <_printf_i+0xf2>
 80107b8:	0669      	lsls	r1, r5, #25
 80107ba:	d5fb      	bpl.n	80107b4 <_printf_i+0xe8>
 80107bc:	881d      	ldrh	r5, [r3, #0]
 80107be:	4854      	ldr	r0, [pc, #336]	; (8010910 <_printf_i+0x244>)
 80107c0:	2f6f      	cmp	r7, #111	; 0x6f
 80107c2:	bf0c      	ite	eq
 80107c4:	2308      	moveq	r3, #8
 80107c6:	230a      	movne	r3, #10
 80107c8:	2100      	movs	r1, #0
 80107ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80107ce:	6866      	ldr	r6, [r4, #4]
 80107d0:	60a6      	str	r6, [r4, #8]
 80107d2:	2e00      	cmp	r6, #0
 80107d4:	bfa2      	ittt	ge
 80107d6:	6821      	ldrge	r1, [r4, #0]
 80107d8:	f021 0104 	bicge.w	r1, r1, #4
 80107dc:	6021      	strge	r1, [r4, #0]
 80107de:	b90d      	cbnz	r5, 80107e4 <_printf_i+0x118>
 80107e0:	2e00      	cmp	r6, #0
 80107e2:	d04d      	beq.n	8010880 <_printf_i+0x1b4>
 80107e4:	4616      	mov	r6, r2
 80107e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80107ea:	fb03 5711 	mls	r7, r3, r1, r5
 80107ee:	5dc7      	ldrb	r7, [r0, r7]
 80107f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80107f4:	462f      	mov	r7, r5
 80107f6:	42bb      	cmp	r3, r7
 80107f8:	460d      	mov	r5, r1
 80107fa:	d9f4      	bls.n	80107e6 <_printf_i+0x11a>
 80107fc:	2b08      	cmp	r3, #8
 80107fe:	d10b      	bne.n	8010818 <_printf_i+0x14c>
 8010800:	6823      	ldr	r3, [r4, #0]
 8010802:	07df      	lsls	r7, r3, #31
 8010804:	d508      	bpl.n	8010818 <_printf_i+0x14c>
 8010806:	6923      	ldr	r3, [r4, #16]
 8010808:	6861      	ldr	r1, [r4, #4]
 801080a:	4299      	cmp	r1, r3
 801080c:	bfde      	ittt	le
 801080e:	2330      	movle	r3, #48	; 0x30
 8010810:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010814:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010818:	1b92      	subs	r2, r2, r6
 801081a:	6122      	str	r2, [r4, #16]
 801081c:	f8cd a000 	str.w	sl, [sp]
 8010820:	464b      	mov	r3, r9
 8010822:	aa03      	add	r2, sp, #12
 8010824:	4621      	mov	r1, r4
 8010826:	4640      	mov	r0, r8
 8010828:	f7ff fee2 	bl	80105f0 <_printf_common>
 801082c:	3001      	adds	r0, #1
 801082e:	d14c      	bne.n	80108ca <_printf_i+0x1fe>
 8010830:	f04f 30ff 	mov.w	r0, #4294967295
 8010834:	b004      	add	sp, #16
 8010836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801083a:	4835      	ldr	r0, [pc, #212]	; (8010910 <_printf_i+0x244>)
 801083c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010840:	6823      	ldr	r3, [r4, #0]
 8010842:	680e      	ldr	r6, [r1, #0]
 8010844:	061f      	lsls	r7, r3, #24
 8010846:	f856 5b04 	ldr.w	r5, [r6], #4
 801084a:	600e      	str	r6, [r1, #0]
 801084c:	d514      	bpl.n	8010878 <_printf_i+0x1ac>
 801084e:	07d9      	lsls	r1, r3, #31
 8010850:	bf44      	itt	mi
 8010852:	f043 0320 	orrmi.w	r3, r3, #32
 8010856:	6023      	strmi	r3, [r4, #0]
 8010858:	b91d      	cbnz	r5, 8010862 <_printf_i+0x196>
 801085a:	6823      	ldr	r3, [r4, #0]
 801085c:	f023 0320 	bic.w	r3, r3, #32
 8010860:	6023      	str	r3, [r4, #0]
 8010862:	2310      	movs	r3, #16
 8010864:	e7b0      	b.n	80107c8 <_printf_i+0xfc>
 8010866:	6823      	ldr	r3, [r4, #0]
 8010868:	f043 0320 	orr.w	r3, r3, #32
 801086c:	6023      	str	r3, [r4, #0]
 801086e:	2378      	movs	r3, #120	; 0x78
 8010870:	4828      	ldr	r0, [pc, #160]	; (8010914 <_printf_i+0x248>)
 8010872:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010876:	e7e3      	b.n	8010840 <_printf_i+0x174>
 8010878:	065e      	lsls	r6, r3, #25
 801087a:	bf48      	it	mi
 801087c:	b2ad      	uxthmi	r5, r5
 801087e:	e7e6      	b.n	801084e <_printf_i+0x182>
 8010880:	4616      	mov	r6, r2
 8010882:	e7bb      	b.n	80107fc <_printf_i+0x130>
 8010884:	680b      	ldr	r3, [r1, #0]
 8010886:	6826      	ldr	r6, [r4, #0]
 8010888:	6960      	ldr	r0, [r4, #20]
 801088a:	1d1d      	adds	r5, r3, #4
 801088c:	600d      	str	r5, [r1, #0]
 801088e:	0635      	lsls	r5, r6, #24
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	d501      	bpl.n	8010898 <_printf_i+0x1cc>
 8010894:	6018      	str	r0, [r3, #0]
 8010896:	e002      	b.n	801089e <_printf_i+0x1d2>
 8010898:	0671      	lsls	r1, r6, #25
 801089a:	d5fb      	bpl.n	8010894 <_printf_i+0x1c8>
 801089c:	8018      	strh	r0, [r3, #0]
 801089e:	2300      	movs	r3, #0
 80108a0:	6123      	str	r3, [r4, #16]
 80108a2:	4616      	mov	r6, r2
 80108a4:	e7ba      	b.n	801081c <_printf_i+0x150>
 80108a6:	680b      	ldr	r3, [r1, #0]
 80108a8:	1d1a      	adds	r2, r3, #4
 80108aa:	600a      	str	r2, [r1, #0]
 80108ac:	681e      	ldr	r6, [r3, #0]
 80108ae:	6862      	ldr	r2, [r4, #4]
 80108b0:	2100      	movs	r1, #0
 80108b2:	4630      	mov	r0, r6
 80108b4:	f7ef fc9c 	bl	80001f0 <memchr>
 80108b8:	b108      	cbz	r0, 80108be <_printf_i+0x1f2>
 80108ba:	1b80      	subs	r0, r0, r6
 80108bc:	6060      	str	r0, [r4, #4]
 80108be:	6863      	ldr	r3, [r4, #4]
 80108c0:	6123      	str	r3, [r4, #16]
 80108c2:	2300      	movs	r3, #0
 80108c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80108c8:	e7a8      	b.n	801081c <_printf_i+0x150>
 80108ca:	6923      	ldr	r3, [r4, #16]
 80108cc:	4632      	mov	r2, r6
 80108ce:	4649      	mov	r1, r9
 80108d0:	4640      	mov	r0, r8
 80108d2:	47d0      	blx	sl
 80108d4:	3001      	adds	r0, #1
 80108d6:	d0ab      	beq.n	8010830 <_printf_i+0x164>
 80108d8:	6823      	ldr	r3, [r4, #0]
 80108da:	079b      	lsls	r3, r3, #30
 80108dc:	d413      	bmi.n	8010906 <_printf_i+0x23a>
 80108de:	68e0      	ldr	r0, [r4, #12]
 80108e0:	9b03      	ldr	r3, [sp, #12]
 80108e2:	4298      	cmp	r0, r3
 80108e4:	bfb8      	it	lt
 80108e6:	4618      	movlt	r0, r3
 80108e8:	e7a4      	b.n	8010834 <_printf_i+0x168>
 80108ea:	2301      	movs	r3, #1
 80108ec:	4632      	mov	r2, r6
 80108ee:	4649      	mov	r1, r9
 80108f0:	4640      	mov	r0, r8
 80108f2:	47d0      	blx	sl
 80108f4:	3001      	adds	r0, #1
 80108f6:	d09b      	beq.n	8010830 <_printf_i+0x164>
 80108f8:	3501      	adds	r5, #1
 80108fa:	68e3      	ldr	r3, [r4, #12]
 80108fc:	9903      	ldr	r1, [sp, #12]
 80108fe:	1a5b      	subs	r3, r3, r1
 8010900:	42ab      	cmp	r3, r5
 8010902:	dcf2      	bgt.n	80108ea <_printf_i+0x21e>
 8010904:	e7eb      	b.n	80108de <_printf_i+0x212>
 8010906:	2500      	movs	r5, #0
 8010908:	f104 0619 	add.w	r6, r4, #25
 801090c:	e7f5      	b.n	80108fa <_printf_i+0x22e>
 801090e:	bf00      	nop
 8010910:	08016387 	.word	0x08016387
 8010914:	08016398 	.word	0x08016398

08010918 <_scanf_float>:
 8010918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801091c:	b087      	sub	sp, #28
 801091e:	4617      	mov	r7, r2
 8010920:	9303      	str	r3, [sp, #12]
 8010922:	688b      	ldr	r3, [r1, #8]
 8010924:	1e5a      	subs	r2, r3, #1
 8010926:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801092a:	bf83      	ittte	hi
 801092c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010930:	195b      	addhi	r3, r3, r5
 8010932:	9302      	strhi	r3, [sp, #8]
 8010934:	2300      	movls	r3, #0
 8010936:	bf86      	itte	hi
 8010938:	f240 135d 	movwhi	r3, #349	; 0x15d
 801093c:	608b      	strhi	r3, [r1, #8]
 801093e:	9302      	strls	r3, [sp, #8]
 8010940:	680b      	ldr	r3, [r1, #0]
 8010942:	468b      	mov	fp, r1
 8010944:	2500      	movs	r5, #0
 8010946:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801094a:	f84b 3b1c 	str.w	r3, [fp], #28
 801094e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010952:	4680      	mov	r8, r0
 8010954:	460c      	mov	r4, r1
 8010956:	465e      	mov	r6, fp
 8010958:	46aa      	mov	sl, r5
 801095a:	46a9      	mov	r9, r5
 801095c:	9501      	str	r5, [sp, #4]
 801095e:	68a2      	ldr	r2, [r4, #8]
 8010960:	b152      	cbz	r2, 8010978 <_scanf_float+0x60>
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	781b      	ldrb	r3, [r3, #0]
 8010966:	2b4e      	cmp	r3, #78	; 0x4e
 8010968:	d864      	bhi.n	8010a34 <_scanf_float+0x11c>
 801096a:	2b40      	cmp	r3, #64	; 0x40
 801096c:	d83c      	bhi.n	80109e8 <_scanf_float+0xd0>
 801096e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8010972:	b2c8      	uxtb	r0, r1
 8010974:	280e      	cmp	r0, #14
 8010976:	d93a      	bls.n	80109ee <_scanf_float+0xd6>
 8010978:	f1b9 0f00 	cmp.w	r9, #0
 801097c:	d003      	beq.n	8010986 <_scanf_float+0x6e>
 801097e:	6823      	ldr	r3, [r4, #0]
 8010980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010984:	6023      	str	r3, [r4, #0]
 8010986:	f10a 3aff 	add.w	sl, sl, #4294967295
 801098a:	f1ba 0f01 	cmp.w	sl, #1
 801098e:	f200 8113 	bhi.w	8010bb8 <_scanf_float+0x2a0>
 8010992:	455e      	cmp	r6, fp
 8010994:	f200 8105 	bhi.w	8010ba2 <_scanf_float+0x28a>
 8010998:	2501      	movs	r5, #1
 801099a:	4628      	mov	r0, r5
 801099c:	b007      	add	sp, #28
 801099e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109a2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80109a6:	2a0d      	cmp	r2, #13
 80109a8:	d8e6      	bhi.n	8010978 <_scanf_float+0x60>
 80109aa:	a101      	add	r1, pc, #4	; (adr r1, 80109b0 <_scanf_float+0x98>)
 80109ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80109b0:	08010aef 	.word	0x08010aef
 80109b4:	08010979 	.word	0x08010979
 80109b8:	08010979 	.word	0x08010979
 80109bc:	08010979 	.word	0x08010979
 80109c0:	08010b4f 	.word	0x08010b4f
 80109c4:	08010b27 	.word	0x08010b27
 80109c8:	08010979 	.word	0x08010979
 80109cc:	08010979 	.word	0x08010979
 80109d0:	08010afd 	.word	0x08010afd
 80109d4:	08010979 	.word	0x08010979
 80109d8:	08010979 	.word	0x08010979
 80109dc:	08010979 	.word	0x08010979
 80109e0:	08010979 	.word	0x08010979
 80109e4:	08010ab5 	.word	0x08010ab5
 80109e8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80109ec:	e7db      	b.n	80109a6 <_scanf_float+0x8e>
 80109ee:	290e      	cmp	r1, #14
 80109f0:	d8c2      	bhi.n	8010978 <_scanf_float+0x60>
 80109f2:	a001      	add	r0, pc, #4	; (adr r0, 80109f8 <_scanf_float+0xe0>)
 80109f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80109f8:	08010aa7 	.word	0x08010aa7
 80109fc:	08010979 	.word	0x08010979
 8010a00:	08010aa7 	.word	0x08010aa7
 8010a04:	08010b3b 	.word	0x08010b3b
 8010a08:	08010979 	.word	0x08010979
 8010a0c:	08010a55 	.word	0x08010a55
 8010a10:	08010a91 	.word	0x08010a91
 8010a14:	08010a91 	.word	0x08010a91
 8010a18:	08010a91 	.word	0x08010a91
 8010a1c:	08010a91 	.word	0x08010a91
 8010a20:	08010a91 	.word	0x08010a91
 8010a24:	08010a91 	.word	0x08010a91
 8010a28:	08010a91 	.word	0x08010a91
 8010a2c:	08010a91 	.word	0x08010a91
 8010a30:	08010a91 	.word	0x08010a91
 8010a34:	2b6e      	cmp	r3, #110	; 0x6e
 8010a36:	d809      	bhi.n	8010a4c <_scanf_float+0x134>
 8010a38:	2b60      	cmp	r3, #96	; 0x60
 8010a3a:	d8b2      	bhi.n	80109a2 <_scanf_float+0x8a>
 8010a3c:	2b54      	cmp	r3, #84	; 0x54
 8010a3e:	d077      	beq.n	8010b30 <_scanf_float+0x218>
 8010a40:	2b59      	cmp	r3, #89	; 0x59
 8010a42:	d199      	bne.n	8010978 <_scanf_float+0x60>
 8010a44:	2d07      	cmp	r5, #7
 8010a46:	d197      	bne.n	8010978 <_scanf_float+0x60>
 8010a48:	2508      	movs	r5, #8
 8010a4a:	e029      	b.n	8010aa0 <_scanf_float+0x188>
 8010a4c:	2b74      	cmp	r3, #116	; 0x74
 8010a4e:	d06f      	beq.n	8010b30 <_scanf_float+0x218>
 8010a50:	2b79      	cmp	r3, #121	; 0x79
 8010a52:	e7f6      	b.n	8010a42 <_scanf_float+0x12a>
 8010a54:	6821      	ldr	r1, [r4, #0]
 8010a56:	05c8      	lsls	r0, r1, #23
 8010a58:	d51a      	bpl.n	8010a90 <_scanf_float+0x178>
 8010a5a:	9b02      	ldr	r3, [sp, #8]
 8010a5c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010a60:	6021      	str	r1, [r4, #0]
 8010a62:	f109 0901 	add.w	r9, r9, #1
 8010a66:	b11b      	cbz	r3, 8010a70 <_scanf_float+0x158>
 8010a68:	3b01      	subs	r3, #1
 8010a6a:	3201      	adds	r2, #1
 8010a6c:	9302      	str	r3, [sp, #8]
 8010a6e:	60a2      	str	r2, [r4, #8]
 8010a70:	68a3      	ldr	r3, [r4, #8]
 8010a72:	3b01      	subs	r3, #1
 8010a74:	60a3      	str	r3, [r4, #8]
 8010a76:	6923      	ldr	r3, [r4, #16]
 8010a78:	3301      	adds	r3, #1
 8010a7a:	6123      	str	r3, [r4, #16]
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	3b01      	subs	r3, #1
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	607b      	str	r3, [r7, #4]
 8010a84:	f340 8084 	ble.w	8010b90 <_scanf_float+0x278>
 8010a88:	683b      	ldr	r3, [r7, #0]
 8010a8a:	3301      	adds	r3, #1
 8010a8c:	603b      	str	r3, [r7, #0]
 8010a8e:	e766      	b.n	801095e <_scanf_float+0x46>
 8010a90:	eb1a 0f05 	cmn.w	sl, r5
 8010a94:	f47f af70 	bne.w	8010978 <_scanf_float+0x60>
 8010a98:	6822      	ldr	r2, [r4, #0]
 8010a9a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8010a9e:	6022      	str	r2, [r4, #0]
 8010aa0:	f806 3b01 	strb.w	r3, [r6], #1
 8010aa4:	e7e4      	b.n	8010a70 <_scanf_float+0x158>
 8010aa6:	6822      	ldr	r2, [r4, #0]
 8010aa8:	0610      	lsls	r0, r2, #24
 8010aaa:	f57f af65 	bpl.w	8010978 <_scanf_float+0x60>
 8010aae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010ab2:	e7f4      	b.n	8010a9e <_scanf_float+0x186>
 8010ab4:	f1ba 0f00 	cmp.w	sl, #0
 8010ab8:	d10e      	bne.n	8010ad8 <_scanf_float+0x1c0>
 8010aba:	f1b9 0f00 	cmp.w	r9, #0
 8010abe:	d10e      	bne.n	8010ade <_scanf_float+0x1c6>
 8010ac0:	6822      	ldr	r2, [r4, #0]
 8010ac2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010ac6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010aca:	d108      	bne.n	8010ade <_scanf_float+0x1c6>
 8010acc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010ad0:	6022      	str	r2, [r4, #0]
 8010ad2:	f04f 0a01 	mov.w	sl, #1
 8010ad6:	e7e3      	b.n	8010aa0 <_scanf_float+0x188>
 8010ad8:	f1ba 0f02 	cmp.w	sl, #2
 8010adc:	d055      	beq.n	8010b8a <_scanf_float+0x272>
 8010ade:	2d01      	cmp	r5, #1
 8010ae0:	d002      	beq.n	8010ae8 <_scanf_float+0x1d0>
 8010ae2:	2d04      	cmp	r5, #4
 8010ae4:	f47f af48 	bne.w	8010978 <_scanf_float+0x60>
 8010ae8:	3501      	adds	r5, #1
 8010aea:	b2ed      	uxtb	r5, r5
 8010aec:	e7d8      	b.n	8010aa0 <_scanf_float+0x188>
 8010aee:	f1ba 0f01 	cmp.w	sl, #1
 8010af2:	f47f af41 	bne.w	8010978 <_scanf_float+0x60>
 8010af6:	f04f 0a02 	mov.w	sl, #2
 8010afa:	e7d1      	b.n	8010aa0 <_scanf_float+0x188>
 8010afc:	b97d      	cbnz	r5, 8010b1e <_scanf_float+0x206>
 8010afe:	f1b9 0f00 	cmp.w	r9, #0
 8010b02:	f47f af3c 	bne.w	801097e <_scanf_float+0x66>
 8010b06:	6822      	ldr	r2, [r4, #0]
 8010b08:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010b0c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010b10:	f47f af39 	bne.w	8010986 <_scanf_float+0x6e>
 8010b14:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010b18:	6022      	str	r2, [r4, #0]
 8010b1a:	2501      	movs	r5, #1
 8010b1c:	e7c0      	b.n	8010aa0 <_scanf_float+0x188>
 8010b1e:	2d03      	cmp	r5, #3
 8010b20:	d0e2      	beq.n	8010ae8 <_scanf_float+0x1d0>
 8010b22:	2d05      	cmp	r5, #5
 8010b24:	e7de      	b.n	8010ae4 <_scanf_float+0x1cc>
 8010b26:	2d02      	cmp	r5, #2
 8010b28:	f47f af26 	bne.w	8010978 <_scanf_float+0x60>
 8010b2c:	2503      	movs	r5, #3
 8010b2e:	e7b7      	b.n	8010aa0 <_scanf_float+0x188>
 8010b30:	2d06      	cmp	r5, #6
 8010b32:	f47f af21 	bne.w	8010978 <_scanf_float+0x60>
 8010b36:	2507      	movs	r5, #7
 8010b38:	e7b2      	b.n	8010aa0 <_scanf_float+0x188>
 8010b3a:	6822      	ldr	r2, [r4, #0]
 8010b3c:	0591      	lsls	r1, r2, #22
 8010b3e:	f57f af1b 	bpl.w	8010978 <_scanf_float+0x60>
 8010b42:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8010b46:	6022      	str	r2, [r4, #0]
 8010b48:	f8cd 9004 	str.w	r9, [sp, #4]
 8010b4c:	e7a8      	b.n	8010aa0 <_scanf_float+0x188>
 8010b4e:	6822      	ldr	r2, [r4, #0]
 8010b50:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010b54:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010b58:	d006      	beq.n	8010b68 <_scanf_float+0x250>
 8010b5a:	0550      	lsls	r0, r2, #21
 8010b5c:	f57f af0c 	bpl.w	8010978 <_scanf_float+0x60>
 8010b60:	f1b9 0f00 	cmp.w	r9, #0
 8010b64:	f43f af0f 	beq.w	8010986 <_scanf_float+0x6e>
 8010b68:	0591      	lsls	r1, r2, #22
 8010b6a:	bf58      	it	pl
 8010b6c:	9901      	ldrpl	r1, [sp, #4]
 8010b6e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010b72:	bf58      	it	pl
 8010b74:	eba9 0101 	subpl.w	r1, r9, r1
 8010b78:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010b7c:	bf58      	it	pl
 8010b7e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010b82:	6022      	str	r2, [r4, #0]
 8010b84:	f04f 0900 	mov.w	r9, #0
 8010b88:	e78a      	b.n	8010aa0 <_scanf_float+0x188>
 8010b8a:	f04f 0a03 	mov.w	sl, #3
 8010b8e:	e787      	b.n	8010aa0 <_scanf_float+0x188>
 8010b90:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010b94:	4639      	mov	r1, r7
 8010b96:	4640      	mov	r0, r8
 8010b98:	4798      	blx	r3
 8010b9a:	2800      	cmp	r0, #0
 8010b9c:	f43f aedf 	beq.w	801095e <_scanf_float+0x46>
 8010ba0:	e6ea      	b.n	8010978 <_scanf_float+0x60>
 8010ba2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010ba6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010baa:	463a      	mov	r2, r7
 8010bac:	4640      	mov	r0, r8
 8010bae:	4798      	blx	r3
 8010bb0:	6923      	ldr	r3, [r4, #16]
 8010bb2:	3b01      	subs	r3, #1
 8010bb4:	6123      	str	r3, [r4, #16]
 8010bb6:	e6ec      	b.n	8010992 <_scanf_float+0x7a>
 8010bb8:	1e6b      	subs	r3, r5, #1
 8010bba:	2b06      	cmp	r3, #6
 8010bbc:	d825      	bhi.n	8010c0a <_scanf_float+0x2f2>
 8010bbe:	2d02      	cmp	r5, #2
 8010bc0:	d836      	bhi.n	8010c30 <_scanf_float+0x318>
 8010bc2:	455e      	cmp	r6, fp
 8010bc4:	f67f aee8 	bls.w	8010998 <_scanf_float+0x80>
 8010bc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010bcc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010bd0:	463a      	mov	r2, r7
 8010bd2:	4640      	mov	r0, r8
 8010bd4:	4798      	blx	r3
 8010bd6:	6923      	ldr	r3, [r4, #16]
 8010bd8:	3b01      	subs	r3, #1
 8010bda:	6123      	str	r3, [r4, #16]
 8010bdc:	e7f1      	b.n	8010bc2 <_scanf_float+0x2aa>
 8010bde:	9802      	ldr	r0, [sp, #8]
 8010be0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010be4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8010be8:	9002      	str	r0, [sp, #8]
 8010bea:	463a      	mov	r2, r7
 8010bec:	4640      	mov	r0, r8
 8010bee:	4798      	blx	r3
 8010bf0:	6923      	ldr	r3, [r4, #16]
 8010bf2:	3b01      	subs	r3, #1
 8010bf4:	6123      	str	r3, [r4, #16]
 8010bf6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010bfa:	fa5f fa8a 	uxtb.w	sl, sl
 8010bfe:	f1ba 0f02 	cmp.w	sl, #2
 8010c02:	d1ec      	bne.n	8010bde <_scanf_float+0x2c6>
 8010c04:	3d03      	subs	r5, #3
 8010c06:	b2ed      	uxtb	r5, r5
 8010c08:	1b76      	subs	r6, r6, r5
 8010c0a:	6823      	ldr	r3, [r4, #0]
 8010c0c:	05da      	lsls	r2, r3, #23
 8010c0e:	d52f      	bpl.n	8010c70 <_scanf_float+0x358>
 8010c10:	055b      	lsls	r3, r3, #21
 8010c12:	d510      	bpl.n	8010c36 <_scanf_float+0x31e>
 8010c14:	455e      	cmp	r6, fp
 8010c16:	f67f aebf 	bls.w	8010998 <_scanf_float+0x80>
 8010c1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010c1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010c22:	463a      	mov	r2, r7
 8010c24:	4640      	mov	r0, r8
 8010c26:	4798      	blx	r3
 8010c28:	6923      	ldr	r3, [r4, #16]
 8010c2a:	3b01      	subs	r3, #1
 8010c2c:	6123      	str	r3, [r4, #16]
 8010c2e:	e7f1      	b.n	8010c14 <_scanf_float+0x2fc>
 8010c30:	46aa      	mov	sl, r5
 8010c32:	9602      	str	r6, [sp, #8]
 8010c34:	e7df      	b.n	8010bf6 <_scanf_float+0x2de>
 8010c36:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010c3a:	6923      	ldr	r3, [r4, #16]
 8010c3c:	2965      	cmp	r1, #101	; 0x65
 8010c3e:	f103 33ff 	add.w	r3, r3, #4294967295
 8010c42:	f106 35ff 	add.w	r5, r6, #4294967295
 8010c46:	6123      	str	r3, [r4, #16]
 8010c48:	d00c      	beq.n	8010c64 <_scanf_float+0x34c>
 8010c4a:	2945      	cmp	r1, #69	; 0x45
 8010c4c:	d00a      	beq.n	8010c64 <_scanf_float+0x34c>
 8010c4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010c52:	463a      	mov	r2, r7
 8010c54:	4640      	mov	r0, r8
 8010c56:	4798      	blx	r3
 8010c58:	6923      	ldr	r3, [r4, #16]
 8010c5a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010c5e:	3b01      	subs	r3, #1
 8010c60:	1eb5      	subs	r5, r6, #2
 8010c62:	6123      	str	r3, [r4, #16]
 8010c64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010c68:	463a      	mov	r2, r7
 8010c6a:	4640      	mov	r0, r8
 8010c6c:	4798      	blx	r3
 8010c6e:	462e      	mov	r6, r5
 8010c70:	6825      	ldr	r5, [r4, #0]
 8010c72:	f015 0510 	ands.w	r5, r5, #16
 8010c76:	d158      	bne.n	8010d2a <_scanf_float+0x412>
 8010c78:	7035      	strb	r5, [r6, #0]
 8010c7a:	6823      	ldr	r3, [r4, #0]
 8010c7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010c84:	d11c      	bne.n	8010cc0 <_scanf_float+0x3a8>
 8010c86:	9b01      	ldr	r3, [sp, #4]
 8010c88:	454b      	cmp	r3, r9
 8010c8a:	eba3 0209 	sub.w	r2, r3, r9
 8010c8e:	d124      	bne.n	8010cda <_scanf_float+0x3c2>
 8010c90:	2200      	movs	r2, #0
 8010c92:	4659      	mov	r1, fp
 8010c94:	4640      	mov	r0, r8
 8010c96:	f000 feb5 	bl	8011a04 <_strtod_r>
 8010c9a:	9b03      	ldr	r3, [sp, #12]
 8010c9c:	6821      	ldr	r1, [r4, #0]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	f011 0f02 	tst.w	r1, #2
 8010ca4:	ec57 6b10 	vmov	r6, r7, d0
 8010ca8:	f103 0204 	add.w	r2, r3, #4
 8010cac:	d020      	beq.n	8010cf0 <_scanf_float+0x3d8>
 8010cae:	9903      	ldr	r1, [sp, #12]
 8010cb0:	600a      	str	r2, [r1, #0]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	e9c3 6700 	strd	r6, r7, [r3]
 8010cb8:	68e3      	ldr	r3, [r4, #12]
 8010cba:	3301      	adds	r3, #1
 8010cbc:	60e3      	str	r3, [r4, #12]
 8010cbe:	e66c      	b.n	801099a <_scanf_float+0x82>
 8010cc0:	9b04      	ldr	r3, [sp, #16]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d0e4      	beq.n	8010c90 <_scanf_float+0x378>
 8010cc6:	9905      	ldr	r1, [sp, #20]
 8010cc8:	230a      	movs	r3, #10
 8010cca:	462a      	mov	r2, r5
 8010ccc:	3101      	adds	r1, #1
 8010cce:	4640      	mov	r0, r8
 8010cd0:	f000 ff22 	bl	8011b18 <_strtol_r>
 8010cd4:	9b04      	ldr	r3, [sp, #16]
 8010cd6:	9e05      	ldr	r6, [sp, #20]
 8010cd8:	1ac2      	subs	r2, r0, r3
 8010cda:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010cde:	429e      	cmp	r6, r3
 8010ce0:	bf28      	it	cs
 8010ce2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8010ce6:	4912      	ldr	r1, [pc, #72]	; (8010d30 <_scanf_float+0x418>)
 8010ce8:	4630      	mov	r0, r6
 8010cea:	f000 f843 	bl	8010d74 <siprintf>
 8010cee:	e7cf      	b.n	8010c90 <_scanf_float+0x378>
 8010cf0:	f011 0f04 	tst.w	r1, #4
 8010cf4:	9903      	ldr	r1, [sp, #12]
 8010cf6:	600a      	str	r2, [r1, #0]
 8010cf8:	d1db      	bne.n	8010cb2 <_scanf_float+0x39a>
 8010cfa:	f8d3 8000 	ldr.w	r8, [r3]
 8010cfe:	ee10 2a10 	vmov	r2, s0
 8010d02:	ee10 0a10 	vmov	r0, s0
 8010d06:	463b      	mov	r3, r7
 8010d08:	4639      	mov	r1, r7
 8010d0a:	f7ef ff17 	bl	8000b3c <__aeabi_dcmpun>
 8010d0e:	b128      	cbz	r0, 8010d1c <_scanf_float+0x404>
 8010d10:	4808      	ldr	r0, [pc, #32]	; (8010d34 <_scanf_float+0x41c>)
 8010d12:	f000 f829 	bl	8010d68 <nanf>
 8010d16:	ed88 0a00 	vstr	s0, [r8]
 8010d1a:	e7cd      	b.n	8010cb8 <_scanf_float+0x3a0>
 8010d1c:	4630      	mov	r0, r6
 8010d1e:	4639      	mov	r1, r7
 8010d20:	f7ef ff6a 	bl	8000bf8 <__aeabi_d2f>
 8010d24:	f8c8 0000 	str.w	r0, [r8]
 8010d28:	e7c6      	b.n	8010cb8 <_scanf_float+0x3a0>
 8010d2a:	2500      	movs	r5, #0
 8010d2c:	e635      	b.n	801099a <_scanf_float+0x82>
 8010d2e:	bf00      	nop
 8010d30:	080163a9 	.word	0x080163a9
 8010d34:	0801625b 	.word	0x0801625b

08010d38 <iprintf>:
 8010d38:	b40f      	push	{r0, r1, r2, r3}
 8010d3a:	4b0a      	ldr	r3, [pc, #40]	; (8010d64 <iprintf+0x2c>)
 8010d3c:	b513      	push	{r0, r1, r4, lr}
 8010d3e:	681c      	ldr	r4, [r3, #0]
 8010d40:	b124      	cbz	r4, 8010d4c <iprintf+0x14>
 8010d42:	69a3      	ldr	r3, [r4, #24]
 8010d44:	b913      	cbnz	r3, 8010d4c <iprintf+0x14>
 8010d46:	4620      	mov	r0, r4
 8010d48:	f001 ff40 	bl	8012bcc <__sinit>
 8010d4c:	ab05      	add	r3, sp, #20
 8010d4e:	9a04      	ldr	r2, [sp, #16]
 8010d50:	68a1      	ldr	r1, [r4, #8]
 8010d52:	9301      	str	r3, [sp, #4]
 8010d54:	4620      	mov	r0, r4
 8010d56:	f7ff f845 	bl	800fde4 <_vfiprintf_r>
 8010d5a:	b002      	add	sp, #8
 8010d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d60:	b004      	add	sp, #16
 8010d62:	4770      	bx	lr
 8010d64:	20000058 	.word	0x20000058

08010d68 <nanf>:
 8010d68:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010d70 <nanf+0x8>
 8010d6c:	4770      	bx	lr
 8010d6e:	bf00      	nop
 8010d70:	7fc00000 	.word	0x7fc00000

08010d74 <siprintf>:
 8010d74:	b40e      	push	{r1, r2, r3}
 8010d76:	b500      	push	{lr}
 8010d78:	b09c      	sub	sp, #112	; 0x70
 8010d7a:	ab1d      	add	r3, sp, #116	; 0x74
 8010d7c:	9002      	str	r0, [sp, #8]
 8010d7e:	9006      	str	r0, [sp, #24]
 8010d80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010d84:	4809      	ldr	r0, [pc, #36]	; (8010dac <siprintf+0x38>)
 8010d86:	9107      	str	r1, [sp, #28]
 8010d88:	9104      	str	r1, [sp, #16]
 8010d8a:	4909      	ldr	r1, [pc, #36]	; (8010db0 <siprintf+0x3c>)
 8010d8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d90:	9105      	str	r1, [sp, #20]
 8010d92:	6800      	ldr	r0, [r0, #0]
 8010d94:	9301      	str	r3, [sp, #4]
 8010d96:	a902      	add	r1, sp, #8
 8010d98:	f003 f9ba 	bl	8014110 <_svfiprintf_r>
 8010d9c:	9b02      	ldr	r3, [sp, #8]
 8010d9e:	2200      	movs	r2, #0
 8010da0:	701a      	strb	r2, [r3, #0]
 8010da2:	b01c      	add	sp, #112	; 0x70
 8010da4:	f85d eb04 	ldr.w	lr, [sp], #4
 8010da8:	b003      	add	sp, #12
 8010daa:	4770      	bx	lr
 8010dac:	20000058 	.word	0x20000058
 8010db0:	ffff0208 	.word	0xffff0208

08010db4 <sulp>:
 8010db4:	b570      	push	{r4, r5, r6, lr}
 8010db6:	4604      	mov	r4, r0
 8010db8:	460d      	mov	r5, r1
 8010dba:	ec45 4b10 	vmov	d0, r4, r5
 8010dbe:	4616      	mov	r6, r2
 8010dc0:	f002 ff1c 	bl	8013bfc <__ulp>
 8010dc4:	ec51 0b10 	vmov	r0, r1, d0
 8010dc8:	b17e      	cbz	r6, 8010dea <sulp+0x36>
 8010dca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010dce:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	dd09      	ble.n	8010dea <sulp+0x36>
 8010dd6:	051b      	lsls	r3, r3, #20
 8010dd8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010ddc:	2400      	movs	r4, #0
 8010dde:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010de2:	4622      	mov	r2, r4
 8010de4:	462b      	mov	r3, r5
 8010de6:	f7ef fc0f 	bl	8000608 <__aeabi_dmul>
 8010dea:	bd70      	pop	{r4, r5, r6, pc}
 8010dec:	0000      	movs	r0, r0
	...

08010df0 <_strtod_l>:
 8010df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010df4:	b0a3      	sub	sp, #140	; 0x8c
 8010df6:	461f      	mov	r7, r3
 8010df8:	2300      	movs	r3, #0
 8010dfa:	931e      	str	r3, [sp, #120]	; 0x78
 8010dfc:	4ba4      	ldr	r3, [pc, #656]	; (8011090 <_strtod_l+0x2a0>)
 8010dfe:	9219      	str	r2, [sp, #100]	; 0x64
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	9307      	str	r3, [sp, #28]
 8010e04:	4604      	mov	r4, r0
 8010e06:	4618      	mov	r0, r3
 8010e08:	4688      	mov	r8, r1
 8010e0a:	f7ef f9e9 	bl	80001e0 <strlen>
 8010e0e:	f04f 0a00 	mov.w	sl, #0
 8010e12:	4605      	mov	r5, r0
 8010e14:	f04f 0b00 	mov.w	fp, #0
 8010e18:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010e1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010e1e:	781a      	ldrb	r2, [r3, #0]
 8010e20:	2a2b      	cmp	r2, #43	; 0x2b
 8010e22:	d04c      	beq.n	8010ebe <_strtod_l+0xce>
 8010e24:	d839      	bhi.n	8010e9a <_strtod_l+0xaa>
 8010e26:	2a0d      	cmp	r2, #13
 8010e28:	d832      	bhi.n	8010e90 <_strtod_l+0xa0>
 8010e2a:	2a08      	cmp	r2, #8
 8010e2c:	d832      	bhi.n	8010e94 <_strtod_l+0xa4>
 8010e2e:	2a00      	cmp	r2, #0
 8010e30:	d03c      	beq.n	8010eac <_strtod_l+0xbc>
 8010e32:	2300      	movs	r3, #0
 8010e34:	930e      	str	r3, [sp, #56]	; 0x38
 8010e36:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8010e38:	7833      	ldrb	r3, [r6, #0]
 8010e3a:	2b30      	cmp	r3, #48	; 0x30
 8010e3c:	f040 80b4 	bne.w	8010fa8 <_strtod_l+0x1b8>
 8010e40:	7873      	ldrb	r3, [r6, #1]
 8010e42:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010e46:	2b58      	cmp	r3, #88	; 0x58
 8010e48:	d16c      	bne.n	8010f24 <_strtod_l+0x134>
 8010e4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010e4c:	9301      	str	r3, [sp, #4]
 8010e4e:	ab1e      	add	r3, sp, #120	; 0x78
 8010e50:	9702      	str	r7, [sp, #8]
 8010e52:	9300      	str	r3, [sp, #0]
 8010e54:	4a8f      	ldr	r2, [pc, #572]	; (8011094 <_strtod_l+0x2a4>)
 8010e56:	ab1f      	add	r3, sp, #124	; 0x7c
 8010e58:	a91d      	add	r1, sp, #116	; 0x74
 8010e5a:	4620      	mov	r0, r4
 8010e5c:	f001 ffba 	bl	8012dd4 <__gethex>
 8010e60:	f010 0707 	ands.w	r7, r0, #7
 8010e64:	4605      	mov	r5, r0
 8010e66:	d005      	beq.n	8010e74 <_strtod_l+0x84>
 8010e68:	2f06      	cmp	r7, #6
 8010e6a:	d12a      	bne.n	8010ec2 <_strtod_l+0xd2>
 8010e6c:	3601      	adds	r6, #1
 8010e6e:	2300      	movs	r3, #0
 8010e70:	961d      	str	r6, [sp, #116]	; 0x74
 8010e72:	930e      	str	r3, [sp, #56]	; 0x38
 8010e74:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	f040 8596 	bne.w	80119a8 <_strtod_l+0xbb8>
 8010e7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010e7e:	b1db      	cbz	r3, 8010eb8 <_strtod_l+0xc8>
 8010e80:	4652      	mov	r2, sl
 8010e82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010e86:	ec43 2b10 	vmov	d0, r2, r3
 8010e8a:	b023      	add	sp, #140	; 0x8c
 8010e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e90:	2a20      	cmp	r2, #32
 8010e92:	d1ce      	bne.n	8010e32 <_strtod_l+0x42>
 8010e94:	3301      	adds	r3, #1
 8010e96:	931d      	str	r3, [sp, #116]	; 0x74
 8010e98:	e7c0      	b.n	8010e1c <_strtod_l+0x2c>
 8010e9a:	2a2d      	cmp	r2, #45	; 0x2d
 8010e9c:	d1c9      	bne.n	8010e32 <_strtod_l+0x42>
 8010e9e:	2201      	movs	r2, #1
 8010ea0:	920e      	str	r2, [sp, #56]	; 0x38
 8010ea2:	1c5a      	adds	r2, r3, #1
 8010ea4:	921d      	str	r2, [sp, #116]	; 0x74
 8010ea6:	785b      	ldrb	r3, [r3, #1]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d1c4      	bne.n	8010e36 <_strtod_l+0x46>
 8010eac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010eae:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	f040 8576 	bne.w	80119a4 <_strtod_l+0xbb4>
 8010eb8:	4652      	mov	r2, sl
 8010eba:	465b      	mov	r3, fp
 8010ebc:	e7e3      	b.n	8010e86 <_strtod_l+0x96>
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	e7ee      	b.n	8010ea0 <_strtod_l+0xb0>
 8010ec2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010ec4:	b13a      	cbz	r2, 8010ed6 <_strtod_l+0xe6>
 8010ec6:	2135      	movs	r1, #53	; 0x35
 8010ec8:	a820      	add	r0, sp, #128	; 0x80
 8010eca:	f002 ffa2 	bl	8013e12 <__copybits>
 8010ece:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010ed0:	4620      	mov	r0, r4
 8010ed2:	f002 fb67 	bl	80135a4 <_Bfree>
 8010ed6:	3f01      	subs	r7, #1
 8010ed8:	2f05      	cmp	r7, #5
 8010eda:	d807      	bhi.n	8010eec <_strtod_l+0xfc>
 8010edc:	e8df f007 	tbb	[pc, r7]
 8010ee0:	1d180b0e 	.word	0x1d180b0e
 8010ee4:	030e      	.short	0x030e
 8010ee6:	f04f 0b00 	mov.w	fp, #0
 8010eea:	46da      	mov	sl, fp
 8010eec:	0728      	lsls	r0, r5, #28
 8010eee:	d5c1      	bpl.n	8010e74 <_strtod_l+0x84>
 8010ef0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8010ef4:	e7be      	b.n	8010e74 <_strtod_l+0x84>
 8010ef6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8010efa:	e7f7      	b.n	8010eec <_strtod_l+0xfc>
 8010efc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8010f00:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010f02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010f06:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010f0a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010f0e:	e7ed      	b.n	8010eec <_strtod_l+0xfc>
 8010f10:	f8df b184 	ldr.w	fp, [pc, #388]	; 8011098 <_strtod_l+0x2a8>
 8010f14:	f04f 0a00 	mov.w	sl, #0
 8010f18:	e7e8      	b.n	8010eec <_strtod_l+0xfc>
 8010f1a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8010f1e:	f04f 3aff 	mov.w	sl, #4294967295
 8010f22:	e7e3      	b.n	8010eec <_strtod_l+0xfc>
 8010f24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010f26:	1c5a      	adds	r2, r3, #1
 8010f28:	921d      	str	r2, [sp, #116]	; 0x74
 8010f2a:	785b      	ldrb	r3, [r3, #1]
 8010f2c:	2b30      	cmp	r3, #48	; 0x30
 8010f2e:	d0f9      	beq.n	8010f24 <_strtod_l+0x134>
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d09f      	beq.n	8010e74 <_strtod_l+0x84>
 8010f34:	2301      	movs	r3, #1
 8010f36:	f04f 0900 	mov.w	r9, #0
 8010f3a:	9304      	str	r3, [sp, #16]
 8010f3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010f3e:	930a      	str	r3, [sp, #40]	; 0x28
 8010f40:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8010f44:	464f      	mov	r7, r9
 8010f46:	220a      	movs	r2, #10
 8010f48:	981d      	ldr	r0, [sp, #116]	; 0x74
 8010f4a:	7806      	ldrb	r6, [r0, #0]
 8010f4c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010f50:	b2d9      	uxtb	r1, r3
 8010f52:	2909      	cmp	r1, #9
 8010f54:	d92a      	bls.n	8010fac <_strtod_l+0x1bc>
 8010f56:	9907      	ldr	r1, [sp, #28]
 8010f58:	462a      	mov	r2, r5
 8010f5a:	f003 fa78 	bl	801444e <strncmp>
 8010f5e:	b398      	cbz	r0, 8010fc8 <_strtod_l+0x1d8>
 8010f60:	2000      	movs	r0, #0
 8010f62:	4633      	mov	r3, r6
 8010f64:	463d      	mov	r5, r7
 8010f66:	9007      	str	r0, [sp, #28]
 8010f68:	4602      	mov	r2, r0
 8010f6a:	2b65      	cmp	r3, #101	; 0x65
 8010f6c:	d001      	beq.n	8010f72 <_strtod_l+0x182>
 8010f6e:	2b45      	cmp	r3, #69	; 0x45
 8010f70:	d118      	bne.n	8010fa4 <_strtod_l+0x1b4>
 8010f72:	b91d      	cbnz	r5, 8010f7c <_strtod_l+0x18c>
 8010f74:	9b04      	ldr	r3, [sp, #16]
 8010f76:	4303      	orrs	r3, r0
 8010f78:	d098      	beq.n	8010eac <_strtod_l+0xbc>
 8010f7a:	2500      	movs	r5, #0
 8010f7c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8010f80:	f108 0301 	add.w	r3, r8, #1
 8010f84:	931d      	str	r3, [sp, #116]	; 0x74
 8010f86:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010f8a:	2b2b      	cmp	r3, #43	; 0x2b
 8010f8c:	d075      	beq.n	801107a <_strtod_l+0x28a>
 8010f8e:	2b2d      	cmp	r3, #45	; 0x2d
 8010f90:	d07b      	beq.n	801108a <_strtod_l+0x29a>
 8010f92:	f04f 0c00 	mov.w	ip, #0
 8010f96:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8010f9a:	2909      	cmp	r1, #9
 8010f9c:	f240 8082 	bls.w	80110a4 <_strtod_l+0x2b4>
 8010fa0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010fa4:	2600      	movs	r6, #0
 8010fa6:	e09d      	b.n	80110e4 <_strtod_l+0x2f4>
 8010fa8:	2300      	movs	r3, #0
 8010faa:	e7c4      	b.n	8010f36 <_strtod_l+0x146>
 8010fac:	2f08      	cmp	r7, #8
 8010fae:	bfd8      	it	le
 8010fb0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8010fb2:	f100 0001 	add.w	r0, r0, #1
 8010fb6:	bfda      	itte	le
 8010fb8:	fb02 3301 	mlale	r3, r2, r1, r3
 8010fbc:	9309      	strle	r3, [sp, #36]	; 0x24
 8010fbe:	fb02 3909 	mlagt	r9, r2, r9, r3
 8010fc2:	3701      	adds	r7, #1
 8010fc4:	901d      	str	r0, [sp, #116]	; 0x74
 8010fc6:	e7bf      	b.n	8010f48 <_strtod_l+0x158>
 8010fc8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010fca:	195a      	adds	r2, r3, r5
 8010fcc:	921d      	str	r2, [sp, #116]	; 0x74
 8010fce:	5d5b      	ldrb	r3, [r3, r5]
 8010fd0:	2f00      	cmp	r7, #0
 8010fd2:	d037      	beq.n	8011044 <_strtod_l+0x254>
 8010fd4:	9007      	str	r0, [sp, #28]
 8010fd6:	463d      	mov	r5, r7
 8010fd8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8010fdc:	2a09      	cmp	r2, #9
 8010fde:	d912      	bls.n	8011006 <_strtod_l+0x216>
 8010fe0:	2201      	movs	r2, #1
 8010fe2:	e7c2      	b.n	8010f6a <_strtod_l+0x17a>
 8010fe4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010fe6:	1c5a      	adds	r2, r3, #1
 8010fe8:	921d      	str	r2, [sp, #116]	; 0x74
 8010fea:	785b      	ldrb	r3, [r3, #1]
 8010fec:	3001      	adds	r0, #1
 8010fee:	2b30      	cmp	r3, #48	; 0x30
 8010ff0:	d0f8      	beq.n	8010fe4 <_strtod_l+0x1f4>
 8010ff2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8010ff6:	2a08      	cmp	r2, #8
 8010ff8:	f200 84db 	bhi.w	80119b2 <_strtod_l+0xbc2>
 8010ffc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010ffe:	9007      	str	r0, [sp, #28]
 8011000:	2000      	movs	r0, #0
 8011002:	920a      	str	r2, [sp, #40]	; 0x28
 8011004:	4605      	mov	r5, r0
 8011006:	3b30      	subs	r3, #48	; 0x30
 8011008:	f100 0201 	add.w	r2, r0, #1
 801100c:	d014      	beq.n	8011038 <_strtod_l+0x248>
 801100e:	9907      	ldr	r1, [sp, #28]
 8011010:	4411      	add	r1, r2
 8011012:	9107      	str	r1, [sp, #28]
 8011014:	462a      	mov	r2, r5
 8011016:	eb00 0e05 	add.w	lr, r0, r5
 801101a:	210a      	movs	r1, #10
 801101c:	4572      	cmp	r2, lr
 801101e:	d113      	bne.n	8011048 <_strtod_l+0x258>
 8011020:	182a      	adds	r2, r5, r0
 8011022:	2a08      	cmp	r2, #8
 8011024:	f105 0501 	add.w	r5, r5, #1
 8011028:	4405      	add	r5, r0
 801102a:	dc1c      	bgt.n	8011066 <_strtod_l+0x276>
 801102c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801102e:	220a      	movs	r2, #10
 8011030:	fb02 3301 	mla	r3, r2, r1, r3
 8011034:	9309      	str	r3, [sp, #36]	; 0x24
 8011036:	2200      	movs	r2, #0
 8011038:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801103a:	1c59      	adds	r1, r3, #1
 801103c:	911d      	str	r1, [sp, #116]	; 0x74
 801103e:	785b      	ldrb	r3, [r3, #1]
 8011040:	4610      	mov	r0, r2
 8011042:	e7c9      	b.n	8010fd8 <_strtod_l+0x1e8>
 8011044:	4638      	mov	r0, r7
 8011046:	e7d2      	b.n	8010fee <_strtod_l+0x1fe>
 8011048:	2a08      	cmp	r2, #8
 801104a:	dc04      	bgt.n	8011056 <_strtod_l+0x266>
 801104c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801104e:	434e      	muls	r6, r1
 8011050:	9609      	str	r6, [sp, #36]	; 0x24
 8011052:	3201      	adds	r2, #1
 8011054:	e7e2      	b.n	801101c <_strtod_l+0x22c>
 8011056:	f102 0c01 	add.w	ip, r2, #1
 801105a:	f1bc 0f10 	cmp.w	ip, #16
 801105e:	bfd8      	it	le
 8011060:	fb01 f909 	mulle.w	r9, r1, r9
 8011064:	e7f5      	b.n	8011052 <_strtod_l+0x262>
 8011066:	2d10      	cmp	r5, #16
 8011068:	bfdc      	itt	le
 801106a:	220a      	movle	r2, #10
 801106c:	fb02 3909 	mlale	r9, r2, r9, r3
 8011070:	e7e1      	b.n	8011036 <_strtod_l+0x246>
 8011072:	2300      	movs	r3, #0
 8011074:	9307      	str	r3, [sp, #28]
 8011076:	2201      	movs	r2, #1
 8011078:	e77c      	b.n	8010f74 <_strtod_l+0x184>
 801107a:	f04f 0c00 	mov.w	ip, #0
 801107e:	f108 0302 	add.w	r3, r8, #2
 8011082:	931d      	str	r3, [sp, #116]	; 0x74
 8011084:	f898 3002 	ldrb.w	r3, [r8, #2]
 8011088:	e785      	b.n	8010f96 <_strtod_l+0x1a6>
 801108a:	f04f 0c01 	mov.w	ip, #1
 801108e:	e7f6      	b.n	801107e <_strtod_l+0x28e>
 8011090:	08016560 	.word	0x08016560
 8011094:	080163b0 	.word	0x080163b0
 8011098:	7ff00000 	.word	0x7ff00000
 801109c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801109e:	1c59      	adds	r1, r3, #1
 80110a0:	911d      	str	r1, [sp, #116]	; 0x74
 80110a2:	785b      	ldrb	r3, [r3, #1]
 80110a4:	2b30      	cmp	r3, #48	; 0x30
 80110a6:	d0f9      	beq.n	801109c <_strtod_l+0x2ac>
 80110a8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80110ac:	2908      	cmp	r1, #8
 80110ae:	f63f af79 	bhi.w	8010fa4 <_strtod_l+0x1b4>
 80110b2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80110b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80110b8:	9308      	str	r3, [sp, #32]
 80110ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80110bc:	1c59      	adds	r1, r3, #1
 80110be:	911d      	str	r1, [sp, #116]	; 0x74
 80110c0:	785b      	ldrb	r3, [r3, #1]
 80110c2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80110c6:	2e09      	cmp	r6, #9
 80110c8:	d937      	bls.n	801113a <_strtod_l+0x34a>
 80110ca:	9e08      	ldr	r6, [sp, #32]
 80110cc:	1b89      	subs	r1, r1, r6
 80110ce:	2908      	cmp	r1, #8
 80110d0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80110d4:	dc02      	bgt.n	80110dc <_strtod_l+0x2ec>
 80110d6:	4576      	cmp	r6, lr
 80110d8:	bfa8      	it	ge
 80110da:	4676      	movge	r6, lr
 80110dc:	f1bc 0f00 	cmp.w	ip, #0
 80110e0:	d000      	beq.n	80110e4 <_strtod_l+0x2f4>
 80110e2:	4276      	negs	r6, r6
 80110e4:	2d00      	cmp	r5, #0
 80110e6:	d14f      	bne.n	8011188 <_strtod_l+0x398>
 80110e8:	9904      	ldr	r1, [sp, #16]
 80110ea:	4301      	orrs	r1, r0
 80110ec:	f47f aec2 	bne.w	8010e74 <_strtod_l+0x84>
 80110f0:	2a00      	cmp	r2, #0
 80110f2:	f47f aedb 	bne.w	8010eac <_strtod_l+0xbc>
 80110f6:	2b69      	cmp	r3, #105	; 0x69
 80110f8:	d027      	beq.n	801114a <_strtod_l+0x35a>
 80110fa:	dc24      	bgt.n	8011146 <_strtod_l+0x356>
 80110fc:	2b49      	cmp	r3, #73	; 0x49
 80110fe:	d024      	beq.n	801114a <_strtod_l+0x35a>
 8011100:	2b4e      	cmp	r3, #78	; 0x4e
 8011102:	f47f aed3 	bne.w	8010eac <_strtod_l+0xbc>
 8011106:	499e      	ldr	r1, [pc, #632]	; (8011380 <_strtod_l+0x590>)
 8011108:	a81d      	add	r0, sp, #116	; 0x74
 801110a:	f002 f8bb 	bl	8013284 <__match>
 801110e:	2800      	cmp	r0, #0
 8011110:	f43f aecc 	beq.w	8010eac <_strtod_l+0xbc>
 8011114:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011116:	781b      	ldrb	r3, [r3, #0]
 8011118:	2b28      	cmp	r3, #40	; 0x28
 801111a:	d12d      	bne.n	8011178 <_strtod_l+0x388>
 801111c:	4999      	ldr	r1, [pc, #612]	; (8011384 <_strtod_l+0x594>)
 801111e:	aa20      	add	r2, sp, #128	; 0x80
 8011120:	a81d      	add	r0, sp, #116	; 0x74
 8011122:	f002 f8c3 	bl	80132ac <__hexnan>
 8011126:	2805      	cmp	r0, #5
 8011128:	d126      	bne.n	8011178 <_strtod_l+0x388>
 801112a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801112c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8011130:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011134:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011138:	e69c      	b.n	8010e74 <_strtod_l+0x84>
 801113a:	210a      	movs	r1, #10
 801113c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8011140:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8011144:	e7b9      	b.n	80110ba <_strtod_l+0x2ca>
 8011146:	2b6e      	cmp	r3, #110	; 0x6e
 8011148:	e7db      	b.n	8011102 <_strtod_l+0x312>
 801114a:	498f      	ldr	r1, [pc, #572]	; (8011388 <_strtod_l+0x598>)
 801114c:	a81d      	add	r0, sp, #116	; 0x74
 801114e:	f002 f899 	bl	8013284 <__match>
 8011152:	2800      	cmp	r0, #0
 8011154:	f43f aeaa 	beq.w	8010eac <_strtod_l+0xbc>
 8011158:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801115a:	498c      	ldr	r1, [pc, #560]	; (801138c <_strtod_l+0x59c>)
 801115c:	3b01      	subs	r3, #1
 801115e:	a81d      	add	r0, sp, #116	; 0x74
 8011160:	931d      	str	r3, [sp, #116]	; 0x74
 8011162:	f002 f88f 	bl	8013284 <__match>
 8011166:	b910      	cbnz	r0, 801116e <_strtod_l+0x37e>
 8011168:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801116a:	3301      	adds	r3, #1
 801116c:	931d      	str	r3, [sp, #116]	; 0x74
 801116e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801139c <_strtod_l+0x5ac>
 8011172:	f04f 0a00 	mov.w	sl, #0
 8011176:	e67d      	b.n	8010e74 <_strtod_l+0x84>
 8011178:	4885      	ldr	r0, [pc, #532]	; (8011390 <_strtod_l+0x5a0>)
 801117a:	f003 f8c9 	bl	8014310 <nan>
 801117e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8011182:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8011186:	e675      	b.n	8010e74 <_strtod_l+0x84>
 8011188:	9b07      	ldr	r3, [sp, #28]
 801118a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801118c:	1af3      	subs	r3, r6, r3
 801118e:	2f00      	cmp	r7, #0
 8011190:	bf08      	it	eq
 8011192:	462f      	moveq	r7, r5
 8011194:	2d10      	cmp	r5, #16
 8011196:	9308      	str	r3, [sp, #32]
 8011198:	46a8      	mov	r8, r5
 801119a:	bfa8      	it	ge
 801119c:	f04f 0810 	movge.w	r8, #16
 80111a0:	f7ef f9b8 	bl	8000514 <__aeabi_ui2d>
 80111a4:	2d09      	cmp	r5, #9
 80111a6:	4682      	mov	sl, r0
 80111a8:	468b      	mov	fp, r1
 80111aa:	dd13      	ble.n	80111d4 <_strtod_l+0x3e4>
 80111ac:	4b79      	ldr	r3, [pc, #484]	; (8011394 <_strtod_l+0x5a4>)
 80111ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80111b2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80111b6:	f7ef fa27 	bl	8000608 <__aeabi_dmul>
 80111ba:	4682      	mov	sl, r0
 80111bc:	4648      	mov	r0, r9
 80111be:	468b      	mov	fp, r1
 80111c0:	f7ef f9a8 	bl	8000514 <__aeabi_ui2d>
 80111c4:	4602      	mov	r2, r0
 80111c6:	460b      	mov	r3, r1
 80111c8:	4650      	mov	r0, sl
 80111ca:	4659      	mov	r1, fp
 80111cc:	f7ef f866 	bl	800029c <__adddf3>
 80111d0:	4682      	mov	sl, r0
 80111d2:	468b      	mov	fp, r1
 80111d4:	2d0f      	cmp	r5, #15
 80111d6:	dc38      	bgt.n	801124a <_strtod_l+0x45a>
 80111d8:	9b08      	ldr	r3, [sp, #32]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	f43f ae4a 	beq.w	8010e74 <_strtod_l+0x84>
 80111e0:	dd24      	ble.n	801122c <_strtod_l+0x43c>
 80111e2:	2b16      	cmp	r3, #22
 80111e4:	dc0b      	bgt.n	80111fe <_strtod_l+0x40e>
 80111e6:	4d6b      	ldr	r5, [pc, #428]	; (8011394 <_strtod_l+0x5a4>)
 80111e8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80111ec:	e9d5 0100 	ldrd	r0, r1, [r5]
 80111f0:	4652      	mov	r2, sl
 80111f2:	465b      	mov	r3, fp
 80111f4:	f7ef fa08 	bl	8000608 <__aeabi_dmul>
 80111f8:	4682      	mov	sl, r0
 80111fa:	468b      	mov	fp, r1
 80111fc:	e63a      	b.n	8010e74 <_strtod_l+0x84>
 80111fe:	9a08      	ldr	r2, [sp, #32]
 8011200:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8011204:	4293      	cmp	r3, r2
 8011206:	db20      	blt.n	801124a <_strtod_l+0x45a>
 8011208:	4c62      	ldr	r4, [pc, #392]	; (8011394 <_strtod_l+0x5a4>)
 801120a:	f1c5 050f 	rsb	r5, r5, #15
 801120e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011212:	4652      	mov	r2, sl
 8011214:	465b      	mov	r3, fp
 8011216:	e9d1 0100 	ldrd	r0, r1, [r1]
 801121a:	f7ef f9f5 	bl	8000608 <__aeabi_dmul>
 801121e:	9b08      	ldr	r3, [sp, #32]
 8011220:	1b5d      	subs	r5, r3, r5
 8011222:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011226:	e9d4 2300 	ldrd	r2, r3, [r4]
 801122a:	e7e3      	b.n	80111f4 <_strtod_l+0x404>
 801122c:	9b08      	ldr	r3, [sp, #32]
 801122e:	3316      	adds	r3, #22
 8011230:	db0b      	blt.n	801124a <_strtod_l+0x45a>
 8011232:	9b07      	ldr	r3, [sp, #28]
 8011234:	4a57      	ldr	r2, [pc, #348]	; (8011394 <_strtod_l+0x5a4>)
 8011236:	1b9e      	subs	r6, r3, r6
 8011238:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801123c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011240:	4650      	mov	r0, sl
 8011242:	4659      	mov	r1, fp
 8011244:	f7ef fb0a 	bl	800085c <__aeabi_ddiv>
 8011248:	e7d6      	b.n	80111f8 <_strtod_l+0x408>
 801124a:	9b08      	ldr	r3, [sp, #32]
 801124c:	eba5 0808 	sub.w	r8, r5, r8
 8011250:	4498      	add	r8, r3
 8011252:	f1b8 0f00 	cmp.w	r8, #0
 8011256:	dd71      	ble.n	801133c <_strtod_l+0x54c>
 8011258:	f018 030f 	ands.w	r3, r8, #15
 801125c:	d00a      	beq.n	8011274 <_strtod_l+0x484>
 801125e:	494d      	ldr	r1, [pc, #308]	; (8011394 <_strtod_l+0x5a4>)
 8011260:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011264:	4652      	mov	r2, sl
 8011266:	465b      	mov	r3, fp
 8011268:	e9d1 0100 	ldrd	r0, r1, [r1]
 801126c:	f7ef f9cc 	bl	8000608 <__aeabi_dmul>
 8011270:	4682      	mov	sl, r0
 8011272:	468b      	mov	fp, r1
 8011274:	f038 080f 	bics.w	r8, r8, #15
 8011278:	d04d      	beq.n	8011316 <_strtod_l+0x526>
 801127a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801127e:	dd22      	ble.n	80112c6 <_strtod_l+0x4d6>
 8011280:	2500      	movs	r5, #0
 8011282:	462e      	mov	r6, r5
 8011284:	9509      	str	r5, [sp, #36]	; 0x24
 8011286:	9507      	str	r5, [sp, #28]
 8011288:	2322      	movs	r3, #34	; 0x22
 801128a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801139c <_strtod_l+0x5ac>
 801128e:	6023      	str	r3, [r4, #0]
 8011290:	f04f 0a00 	mov.w	sl, #0
 8011294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011296:	2b00      	cmp	r3, #0
 8011298:	f43f adec 	beq.w	8010e74 <_strtod_l+0x84>
 801129c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801129e:	4620      	mov	r0, r4
 80112a0:	f002 f980 	bl	80135a4 <_Bfree>
 80112a4:	9907      	ldr	r1, [sp, #28]
 80112a6:	4620      	mov	r0, r4
 80112a8:	f002 f97c 	bl	80135a4 <_Bfree>
 80112ac:	4631      	mov	r1, r6
 80112ae:	4620      	mov	r0, r4
 80112b0:	f002 f978 	bl	80135a4 <_Bfree>
 80112b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80112b6:	4620      	mov	r0, r4
 80112b8:	f002 f974 	bl	80135a4 <_Bfree>
 80112bc:	4629      	mov	r1, r5
 80112be:	4620      	mov	r0, r4
 80112c0:	f002 f970 	bl	80135a4 <_Bfree>
 80112c4:	e5d6      	b.n	8010e74 <_strtod_l+0x84>
 80112c6:	2300      	movs	r3, #0
 80112c8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80112cc:	4650      	mov	r0, sl
 80112ce:	4659      	mov	r1, fp
 80112d0:	4699      	mov	r9, r3
 80112d2:	f1b8 0f01 	cmp.w	r8, #1
 80112d6:	dc21      	bgt.n	801131c <_strtod_l+0x52c>
 80112d8:	b10b      	cbz	r3, 80112de <_strtod_l+0x4ee>
 80112da:	4682      	mov	sl, r0
 80112dc:	468b      	mov	fp, r1
 80112de:	4b2e      	ldr	r3, [pc, #184]	; (8011398 <_strtod_l+0x5a8>)
 80112e0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80112e4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80112e8:	4652      	mov	r2, sl
 80112ea:	465b      	mov	r3, fp
 80112ec:	e9d9 0100 	ldrd	r0, r1, [r9]
 80112f0:	f7ef f98a 	bl	8000608 <__aeabi_dmul>
 80112f4:	4b29      	ldr	r3, [pc, #164]	; (801139c <_strtod_l+0x5ac>)
 80112f6:	460a      	mov	r2, r1
 80112f8:	400b      	ands	r3, r1
 80112fa:	4929      	ldr	r1, [pc, #164]	; (80113a0 <_strtod_l+0x5b0>)
 80112fc:	428b      	cmp	r3, r1
 80112fe:	4682      	mov	sl, r0
 8011300:	d8be      	bhi.n	8011280 <_strtod_l+0x490>
 8011302:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011306:	428b      	cmp	r3, r1
 8011308:	bf86      	itte	hi
 801130a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80113a4 <_strtod_l+0x5b4>
 801130e:	f04f 3aff 	movhi.w	sl, #4294967295
 8011312:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8011316:	2300      	movs	r3, #0
 8011318:	9304      	str	r3, [sp, #16]
 801131a:	e081      	b.n	8011420 <_strtod_l+0x630>
 801131c:	f018 0f01 	tst.w	r8, #1
 8011320:	d007      	beq.n	8011332 <_strtod_l+0x542>
 8011322:	4b1d      	ldr	r3, [pc, #116]	; (8011398 <_strtod_l+0x5a8>)
 8011324:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8011328:	e9d3 2300 	ldrd	r2, r3, [r3]
 801132c:	f7ef f96c 	bl	8000608 <__aeabi_dmul>
 8011330:	2301      	movs	r3, #1
 8011332:	f109 0901 	add.w	r9, r9, #1
 8011336:	ea4f 0868 	mov.w	r8, r8, asr #1
 801133a:	e7ca      	b.n	80112d2 <_strtod_l+0x4e2>
 801133c:	d0eb      	beq.n	8011316 <_strtod_l+0x526>
 801133e:	f1c8 0800 	rsb	r8, r8, #0
 8011342:	f018 020f 	ands.w	r2, r8, #15
 8011346:	d00a      	beq.n	801135e <_strtod_l+0x56e>
 8011348:	4b12      	ldr	r3, [pc, #72]	; (8011394 <_strtod_l+0x5a4>)
 801134a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801134e:	4650      	mov	r0, sl
 8011350:	4659      	mov	r1, fp
 8011352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011356:	f7ef fa81 	bl	800085c <__aeabi_ddiv>
 801135a:	4682      	mov	sl, r0
 801135c:	468b      	mov	fp, r1
 801135e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011362:	d0d8      	beq.n	8011316 <_strtod_l+0x526>
 8011364:	f1b8 0f1f 	cmp.w	r8, #31
 8011368:	dd1e      	ble.n	80113a8 <_strtod_l+0x5b8>
 801136a:	2500      	movs	r5, #0
 801136c:	462e      	mov	r6, r5
 801136e:	9509      	str	r5, [sp, #36]	; 0x24
 8011370:	9507      	str	r5, [sp, #28]
 8011372:	2322      	movs	r3, #34	; 0x22
 8011374:	f04f 0a00 	mov.w	sl, #0
 8011378:	f04f 0b00 	mov.w	fp, #0
 801137c:	6023      	str	r3, [r4, #0]
 801137e:	e789      	b.n	8011294 <_strtod_l+0x4a4>
 8011380:	08016382 	.word	0x08016382
 8011384:	080163c4 	.word	0x080163c4
 8011388:	0801637a 	.word	0x0801637a
 801138c:	08016403 	.word	0x08016403
 8011390:	0801625b 	.word	0x0801625b
 8011394:	08016600 	.word	0x08016600
 8011398:	080165d8 	.word	0x080165d8
 801139c:	7ff00000 	.word	0x7ff00000
 80113a0:	7ca00000 	.word	0x7ca00000
 80113a4:	7fefffff 	.word	0x7fefffff
 80113a8:	f018 0310 	ands.w	r3, r8, #16
 80113ac:	bf18      	it	ne
 80113ae:	236a      	movne	r3, #106	; 0x6a
 80113b0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8011768 <_strtod_l+0x978>
 80113b4:	9304      	str	r3, [sp, #16]
 80113b6:	4650      	mov	r0, sl
 80113b8:	4659      	mov	r1, fp
 80113ba:	2300      	movs	r3, #0
 80113bc:	f018 0f01 	tst.w	r8, #1
 80113c0:	d004      	beq.n	80113cc <_strtod_l+0x5dc>
 80113c2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80113c6:	f7ef f91f 	bl	8000608 <__aeabi_dmul>
 80113ca:	2301      	movs	r3, #1
 80113cc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80113d0:	f109 0908 	add.w	r9, r9, #8
 80113d4:	d1f2      	bne.n	80113bc <_strtod_l+0x5cc>
 80113d6:	b10b      	cbz	r3, 80113dc <_strtod_l+0x5ec>
 80113d8:	4682      	mov	sl, r0
 80113da:	468b      	mov	fp, r1
 80113dc:	9b04      	ldr	r3, [sp, #16]
 80113de:	b1bb      	cbz	r3, 8011410 <_strtod_l+0x620>
 80113e0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80113e4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	4659      	mov	r1, fp
 80113ec:	dd10      	ble.n	8011410 <_strtod_l+0x620>
 80113ee:	2b1f      	cmp	r3, #31
 80113f0:	f340 8128 	ble.w	8011644 <_strtod_l+0x854>
 80113f4:	2b34      	cmp	r3, #52	; 0x34
 80113f6:	bfde      	ittt	le
 80113f8:	3b20      	suble	r3, #32
 80113fa:	f04f 32ff 	movle.w	r2, #4294967295
 80113fe:	fa02 f303 	lslle.w	r3, r2, r3
 8011402:	f04f 0a00 	mov.w	sl, #0
 8011406:	bfcc      	ite	gt
 8011408:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801140c:	ea03 0b01 	andle.w	fp, r3, r1
 8011410:	2200      	movs	r2, #0
 8011412:	2300      	movs	r3, #0
 8011414:	4650      	mov	r0, sl
 8011416:	4659      	mov	r1, fp
 8011418:	f7ef fb5e 	bl	8000ad8 <__aeabi_dcmpeq>
 801141c:	2800      	cmp	r0, #0
 801141e:	d1a4      	bne.n	801136a <_strtod_l+0x57a>
 8011420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011422:	9300      	str	r3, [sp, #0]
 8011424:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011426:	462b      	mov	r3, r5
 8011428:	463a      	mov	r2, r7
 801142a:	4620      	mov	r0, r4
 801142c:	f002 f926 	bl	801367c <__s2b>
 8011430:	9009      	str	r0, [sp, #36]	; 0x24
 8011432:	2800      	cmp	r0, #0
 8011434:	f43f af24 	beq.w	8011280 <_strtod_l+0x490>
 8011438:	9b07      	ldr	r3, [sp, #28]
 801143a:	1b9e      	subs	r6, r3, r6
 801143c:	9b08      	ldr	r3, [sp, #32]
 801143e:	2b00      	cmp	r3, #0
 8011440:	bfb4      	ite	lt
 8011442:	4633      	movlt	r3, r6
 8011444:	2300      	movge	r3, #0
 8011446:	9310      	str	r3, [sp, #64]	; 0x40
 8011448:	9b08      	ldr	r3, [sp, #32]
 801144a:	2500      	movs	r5, #0
 801144c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011450:	9318      	str	r3, [sp, #96]	; 0x60
 8011452:	462e      	mov	r6, r5
 8011454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011456:	4620      	mov	r0, r4
 8011458:	6859      	ldr	r1, [r3, #4]
 801145a:	f002 f863 	bl	8013524 <_Balloc>
 801145e:	9007      	str	r0, [sp, #28]
 8011460:	2800      	cmp	r0, #0
 8011462:	f43f af11 	beq.w	8011288 <_strtod_l+0x498>
 8011466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011468:	691a      	ldr	r2, [r3, #16]
 801146a:	3202      	adds	r2, #2
 801146c:	f103 010c 	add.w	r1, r3, #12
 8011470:	0092      	lsls	r2, r2, #2
 8011472:	300c      	adds	r0, #12
 8011474:	f7fe fc76 	bl	800fd64 <memcpy>
 8011478:	ec4b ab10 	vmov	d0, sl, fp
 801147c:	aa20      	add	r2, sp, #128	; 0x80
 801147e:	a91f      	add	r1, sp, #124	; 0x7c
 8011480:	4620      	mov	r0, r4
 8011482:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8011486:	f002 fc35 	bl	8013cf4 <__d2b>
 801148a:	901e      	str	r0, [sp, #120]	; 0x78
 801148c:	2800      	cmp	r0, #0
 801148e:	f43f aefb 	beq.w	8011288 <_strtod_l+0x498>
 8011492:	2101      	movs	r1, #1
 8011494:	4620      	mov	r0, r4
 8011496:	f002 f98b 	bl	80137b0 <__i2b>
 801149a:	4606      	mov	r6, r0
 801149c:	2800      	cmp	r0, #0
 801149e:	f43f aef3 	beq.w	8011288 <_strtod_l+0x498>
 80114a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80114a4:	9904      	ldr	r1, [sp, #16]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	bfab      	itete	ge
 80114aa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80114ac:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80114ae:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80114b0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80114b4:	bfac      	ite	ge
 80114b6:	eb03 0902 	addge.w	r9, r3, r2
 80114ba:	1ad7      	sublt	r7, r2, r3
 80114bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80114be:	eba3 0801 	sub.w	r8, r3, r1
 80114c2:	4490      	add	r8, r2
 80114c4:	4ba3      	ldr	r3, [pc, #652]	; (8011754 <_strtod_l+0x964>)
 80114c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80114ca:	4598      	cmp	r8, r3
 80114cc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80114d0:	f280 80cc 	bge.w	801166c <_strtod_l+0x87c>
 80114d4:	eba3 0308 	sub.w	r3, r3, r8
 80114d8:	2b1f      	cmp	r3, #31
 80114da:	eba2 0203 	sub.w	r2, r2, r3
 80114de:	f04f 0101 	mov.w	r1, #1
 80114e2:	f300 80b6 	bgt.w	8011652 <_strtod_l+0x862>
 80114e6:	fa01 f303 	lsl.w	r3, r1, r3
 80114ea:	9311      	str	r3, [sp, #68]	; 0x44
 80114ec:	2300      	movs	r3, #0
 80114ee:	930c      	str	r3, [sp, #48]	; 0x30
 80114f0:	eb09 0802 	add.w	r8, r9, r2
 80114f4:	9b04      	ldr	r3, [sp, #16]
 80114f6:	45c1      	cmp	r9, r8
 80114f8:	4417      	add	r7, r2
 80114fa:	441f      	add	r7, r3
 80114fc:	464b      	mov	r3, r9
 80114fe:	bfa8      	it	ge
 8011500:	4643      	movge	r3, r8
 8011502:	42bb      	cmp	r3, r7
 8011504:	bfa8      	it	ge
 8011506:	463b      	movge	r3, r7
 8011508:	2b00      	cmp	r3, #0
 801150a:	bfc2      	ittt	gt
 801150c:	eba8 0803 	subgt.w	r8, r8, r3
 8011510:	1aff      	subgt	r7, r7, r3
 8011512:	eba9 0903 	subgt.w	r9, r9, r3
 8011516:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011518:	2b00      	cmp	r3, #0
 801151a:	dd17      	ble.n	801154c <_strtod_l+0x75c>
 801151c:	4631      	mov	r1, r6
 801151e:	461a      	mov	r2, r3
 8011520:	4620      	mov	r0, r4
 8011522:	f002 fa01 	bl	8013928 <__pow5mult>
 8011526:	4606      	mov	r6, r0
 8011528:	2800      	cmp	r0, #0
 801152a:	f43f aead 	beq.w	8011288 <_strtod_l+0x498>
 801152e:	4601      	mov	r1, r0
 8011530:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011532:	4620      	mov	r0, r4
 8011534:	f002 f952 	bl	80137dc <__multiply>
 8011538:	900f      	str	r0, [sp, #60]	; 0x3c
 801153a:	2800      	cmp	r0, #0
 801153c:	f43f aea4 	beq.w	8011288 <_strtod_l+0x498>
 8011540:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011542:	4620      	mov	r0, r4
 8011544:	f002 f82e 	bl	80135a4 <_Bfree>
 8011548:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801154a:	931e      	str	r3, [sp, #120]	; 0x78
 801154c:	f1b8 0f00 	cmp.w	r8, #0
 8011550:	f300 8091 	bgt.w	8011676 <_strtod_l+0x886>
 8011554:	9b08      	ldr	r3, [sp, #32]
 8011556:	2b00      	cmp	r3, #0
 8011558:	dd08      	ble.n	801156c <_strtod_l+0x77c>
 801155a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801155c:	9907      	ldr	r1, [sp, #28]
 801155e:	4620      	mov	r0, r4
 8011560:	f002 f9e2 	bl	8013928 <__pow5mult>
 8011564:	9007      	str	r0, [sp, #28]
 8011566:	2800      	cmp	r0, #0
 8011568:	f43f ae8e 	beq.w	8011288 <_strtod_l+0x498>
 801156c:	2f00      	cmp	r7, #0
 801156e:	dd08      	ble.n	8011582 <_strtod_l+0x792>
 8011570:	9907      	ldr	r1, [sp, #28]
 8011572:	463a      	mov	r2, r7
 8011574:	4620      	mov	r0, r4
 8011576:	f002 fa31 	bl	80139dc <__lshift>
 801157a:	9007      	str	r0, [sp, #28]
 801157c:	2800      	cmp	r0, #0
 801157e:	f43f ae83 	beq.w	8011288 <_strtod_l+0x498>
 8011582:	f1b9 0f00 	cmp.w	r9, #0
 8011586:	dd08      	ble.n	801159a <_strtod_l+0x7aa>
 8011588:	4631      	mov	r1, r6
 801158a:	464a      	mov	r2, r9
 801158c:	4620      	mov	r0, r4
 801158e:	f002 fa25 	bl	80139dc <__lshift>
 8011592:	4606      	mov	r6, r0
 8011594:	2800      	cmp	r0, #0
 8011596:	f43f ae77 	beq.w	8011288 <_strtod_l+0x498>
 801159a:	9a07      	ldr	r2, [sp, #28]
 801159c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801159e:	4620      	mov	r0, r4
 80115a0:	f002 faa4 	bl	8013aec <__mdiff>
 80115a4:	4605      	mov	r5, r0
 80115a6:	2800      	cmp	r0, #0
 80115a8:	f43f ae6e 	beq.w	8011288 <_strtod_l+0x498>
 80115ac:	68c3      	ldr	r3, [r0, #12]
 80115ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80115b0:	2300      	movs	r3, #0
 80115b2:	60c3      	str	r3, [r0, #12]
 80115b4:	4631      	mov	r1, r6
 80115b6:	f002 fa7d 	bl	8013ab4 <__mcmp>
 80115ba:	2800      	cmp	r0, #0
 80115bc:	da65      	bge.n	801168a <_strtod_l+0x89a>
 80115be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80115c0:	ea53 030a 	orrs.w	r3, r3, sl
 80115c4:	f040 8087 	bne.w	80116d6 <_strtod_l+0x8e6>
 80115c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	f040 8082 	bne.w	80116d6 <_strtod_l+0x8e6>
 80115d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80115d6:	0d1b      	lsrs	r3, r3, #20
 80115d8:	051b      	lsls	r3, r3, #20
 80115da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80115de:	d97a      	bls.n	80116d6 <_strtod_l+0x8e6>
 80115e0:	696b      	ldr	r3, [r5, #20]
 80115e2:	b913      	cbnz	r3, 80115ea <_strtod_l+0x7fa>
 80115e4:	692b      	ldr	r3, [r5, #16]
 80115e6:	2b01      	cmp	r3, #1
 80115e8:	dd75      	ble.n	80116d6 <_strtod_l+0x8e6>
 80115ea:	4629      	mov	r1, r5
 80115ec:	2201      	movs	r2, #1
 80115ee:	4620      	mov	r0, r4
 80115f0:	f002 f9f4 	bl	80139dc <__lshift>
 80115f4:	4631      	mov	r1, r6
 80115f6:	4605      	mov	r5, r0
 80115f8:	f002 fa5c 	bl	8013ab4 <__mcmp>
 80115fc:	2800      	cmp	r0, #0
 80115fe:	dd6a      	ble.n	80116d6 <_strtod_l+0x8e6>
 8011600:	9904      	ldr	r1, [sp, #16]
 8011602:	4a55      	ldr	r2, [pc, #340]	; (8011758 <_strtod_l+0x968>)
 8011604:	465b      	mov	r3, fp
 8011606:	2900      	cmp	r1, #0
 8011608:	f000 8085 	beq.w	8011716 <_strtod_l+0x926>
 801160c:	ea02 010b 	and.w	r1, r2, fp
 8011610:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011614:	dc7f      	bgt.n	8011716 <_strtod_l+0x926>
 8011616:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801161a:	f77f aeaa 	ble.w	8011372 <_strtod_l+0x582>
 801161e:	4a4f      	ldr	r2, [pc, #316]	; (801175c <_strtod_l+0x96c>)
 8011620:	2300      	movs	r3, #0
 8011622:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8011626:	4650      	mov	r0, sl
 8011628:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801162c:	4659      	mov	r1, fp
 801162e:	f7ee ffeb 	bl	8000608 <__aeabi_dmul>
 8011632:	460b      	mov	r3, r1
 8011634:	4303      	orrs	r3, r0
 8011636:	bf08      	it	eq
 8011638:	2322      	moveq	r3, #34	; 0x22
 801163a:	4682      	mov	sl, r0
 801163c:	468b      	mov	fp, r1
 801163e:	bf08      	it	eq
 8011640:	6023      	streq	r3, [r4, #0]
 8011642:	e62b      	b.n	801129c <_strtod_l+0x4ac>
 8011644:	f04f 32ff 	mov.w	r2, #4294967295
 8011648:	fa02 f303 	lsl.w	r3, r2, r3
 801164c:	ea03 0a0a 	and.w	sl, r3, sl
 8011650:	e6de      	b.n	8011410 <_strtod_l+0x620>
 8011652:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8011656:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801165a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801165e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8011662:	fa01 f308 	lsl.w	r3, r1, r8
 8011666:	930c      	str	r3, [sp, #48]	; 0x30
 8011668:	9111      	str	r1, [sp, #68]	; 0x44
 801166a:	e741      	b.n	80114f0 <_strtod_l+0x700>
 801166c:	2300      	movs	r3, #0
 801166e:	930c      	str	r3, [sp, #48]	; 0x30
 8011670:	2301      	movs	r3, #1
 8011672:	9311      	str	r3, [sp, #68]	; 0x44
 8011674:	e73c      	b.n	80114f0 <_strtod_l+0x700>
 8011676:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011678:	4642      	mov	r2, r8
 801167a:	4620      	mov	r0, r4
 801167c:	f002 f9ae 	bl	80139dc <__lshift>
 8011680:	901e      	str	r0, [sp, #120]	; 0x78
 8011682:	2800      	cmp	r0, #0
 8011684:	f47f af66 	bne.w	8011554 <_strtod_l+0x764>
 8011688:	e5fe      	b.n	8011288 <_strtod_l+0x498>
 801168a:	465f      	mov	r7, fp
 801168c:	d16e      	bne.n	801176c <_strtod_l+0x97c>
 801168e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011690:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011694:	b342      	cbz	r2, 80116e8 <_strtod_l+0x8f8>
 8011696:	4a32      	ldr	r2, [pc, #200]	; (8011760 <_strtod_l+0x970>)
 8011698:	4293      	cmp	r3, r2
 801169a:	d128      	bne.n	80116ee <_strtod_l+0x8fe>
 801169c:	9b04      	ldr	r3, [sp, #16]
 801169e:	4650      	mov	r0, sl
 80116a0:	b1eb      	cbz	r3, 80116de <_strtod_l+0x8ee>
 80116a2:	4a2d      	ldr	r2, [pc, #180]	; (8011758 <_strtod_l+0x968>)
 80116a4:	403a      	ands	r2, r7
 80116a6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80116aa:	f04f 31ff 	mov.w	r1, #4294967295
 80116ae:	d819      	bhi.n	80116e4 <_strtod_l+0x8f4>
 80116b0:	0d12      	lsrs	r2, r2, #20
 80116b2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80116b6:	fa01 f303 	lsl.w	r3, r1, r3
 80116ba:	4298      	cmp	r0, r3
 80116bc:	d117      	bne.n	80116ee <_strtod_l+0x8fe>
 80116be:	4b29      	ldr	r3, [pc, #164]	; (8011764 <_strtod_l+0x974>)
 80116c0:	429f      	cmp	r7, r3
 80116c2:	d102      	bne.n	80116ca <_strtod_l+0x8da>
 80116c4:	3001      	adds	r0, #1
 80116c6:	f43f addf 	beq.w	8011288 <_strtod_l+0x498>
 80116ca:	4b23      	ldr	r3, [pc, #140]	; (8011758 <_strtod_l+0x968>)
 80116cc:	403b      	ands	r3, r7
 80116ce:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80116d2:	f04f 0a00 	mov.w	sl, #0
 80116d6:	9b04      	ldr	r3, [sp, #16]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d1a0      	bne.n	801161e <_strtod_l+0x82e>
 80116dc:	e5de      	b.n	801129c <_strtod_l+0x4ac>
 80116de:	f04f 33ff 	mov.w	r3, #4294967295
 80116e2:	e7ea      	b.n	80116ba <_strtod_l+0x8ca>
 80116e4:	460b      	mov	r3, r1
 80116e6:	e7e8      	b.n	80116ba <_strtod_l+0x8ca>
 80116e8:	ea53 030a 	orrs.w	r3, r3, sl
 80116ec:	d088      	beq.n	8011600 <_strtod_l+0x810>
 80116ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80116f0:	b1db      	cbz	r3, 801172a <_strtod_l+0x93a>
 80116f2:	423b      	tst	r3, r7
 80116f4:	d0ef      	beq.n	80116d6 <_strtod_l+0x8e6>
 80116f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80116f8:	9a04      	ldr	r2, [sp, #16]
 80116fa:	4650      	mov	r0, sl
 80116fc:	4659      	mov	r1, fp
 80116fe:	b1c3      	cbz	r3, 8011732 <_strtod_l+0x942>
 8011700:	f7ff fb58 	bl	8010db4 <sulp>
 8011704:	4602      	mov	r2, r0
 8011706:	460b      	mov	r3, r1
 8011708:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801170c:	f7ee fdc6 	bl	800029c <__adddf3>
 8011710:	4682      	mov	sl, r0
 8011712:	468b      	mov	fp, r1
 8011714:	e7df      	b.n	80116d6 <_strtod_l+0x8e6>
 8011716:	4013      	ands	r3, r2
 8011718:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801171c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011720:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011724:	f04f 3aff 	mov.w	sl, #4294967295
 8011728:	e7d5      	b.n	80116d6 <_strtod_l+0x8e6>
 801172a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801172c:	ea13 0f0a 	tst.w	r3, sl
 8011730:	e7e0      	b.n	80116f4 <_strtod_l+0x904>
 8011732:	f7ff fb3f 	bl	8010db4 <sulp>
 8011736:	4602      	mov	r2, r0
 8011738:	460b      	mov	r3, r1
 801173a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801173e:	f7ee fdab 	bl	8000298 <__aeabi_dsub>
 8011742:	2200      	movs	r2, #0
 8011744:	2300      	movs	r3, #0
 8011746:	4682      	mov	sl, r0
 8011748:	468b      	mov	fp, r1
 801174a:	f7ef f9c5 	bl	8000ad8 <__aeabi_dcmpeq>
 801174e:	2800      	cmp	r0, #0
 8011750:	d0c1      	beq.n	80116d6 <_strtod_l+0x8e6>
 8011752:	e60e      	b.n	8011372 <_strtod_l+0x582>
 8011754:	fffffc02 	.word	0xfffffc02
 8011758:	7ff00000 	.word	0x7ff00000
 801175c:	39500000 	.word	0x39500000
 8011760:	000fffff 	.word	0x000fffff
 8011764:	7fefffff 	.word	0x7fefffff
 8011768:	080163d8 	.word	0x080163d8
 801176c:	4631      	mov	r1, r6
 801176e:	4628      	mov	r0, r5
 8011770:	f002 fb1c 	bl	8013dac <__ratio>
 8011774:	ec59 8b10 	vmov	r8, r9, d0
 8011778:	ee10 0a10 	vmov	r0, s0
 801177c:	2200      	movs	r2, #0
 801177e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011782:	4649      	mov	r1, r9
 8011784:	f7ef f9bc 	bl	8000b00 <__aeabi_dcmple>
 8011788:	2800      	cmp	r0, #0
 801178a:	d07c      	beq.n	8011886 <_strtod_l+0xa96>
 801178c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801178e:	2b00      	cmp	r3, #0
 8011790:	d04c      	beq.n	801182c <_strtod_l+0xa3c>
 8011792:	4b95      	ldr	r3, [pc, #596]	; (80119e8 <_strtod_l+0xbf8>)
 8011794:	2200      	movs	r2, #0
 8011796:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801179a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80119e8 <_strtod_l+0xbf8>
 801179e:	f04f 0800 	mov.w	r8, #0
 80117a2:	4b92      	ldr	r3, [pc, #584]	; (80119ec <_strtod_l+0xbfc>)
 80117a4:	403b      	ands	r3, r7
 80117a6:	9311      	str	r3, [sp, #68]	; 0x44
 80117a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80117aa:	4b91      	ldr	r3, [pc, #580]	; (80119f0 <_strtod_l+0xc00>)
 80117ac:	429a      	cmp	r2, r3
 80117ae:	f040 80b2 	bne.w	8011916 <_strtod_l+0xb26>
 80117b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80117b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80117ba:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80117be:	ec4b ab10 	vmov	d0, sl, fp
 80117c2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80117c6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80117ca:	f002 fa17 	bl	8013bfc <__ulp>
 80117ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80117d2:	ec53 2b10 	vmov	r2, r3, d0
 80117d6:	f7ee ff17 	bl	8000608 <__aeabi_dmul>
 80117da:	4652      	mov	r2, sl
 80117dc:	465b      	mov	r3, fp
 80117de:	f7ee fd5d 	bl	800029c <__adddf3>
 80117e2:	460b      	mov	r3, r1
 80117e4:	4981      	ldr	r1, [pc, #516]	; (80119ec <_strtod_l+0xbfc>)
 80117e6:	4a83      	ldr	r2, [pc, #524]	; (80119f4 <_strtod_l+0xc04>)
 80117e8:	4019      	ands	r1, r3
 80117ea:	4291      	cmp	r1, r2
 80117ec:	4682      	mov	sl, r0
 80117ee:	d95e      	bls.n	80118ae <_strtod_l+0xabe>
 80117f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80117f2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80117f6:	4293      	cmp	r3, r2
 80117f8:	d103      	bne.n	8011802 <_strtod_l+0xa12>
 80117fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117fc:	3301      	adds	r3, #1
 80117fe:	f43f ad43 	beq.w	8011288 <_strtod_l+0x498>
 8011802:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8011a00 <_strtod_l+0xc10>
 8011806:	f04f 3aff 	mov.w	sl, #4294967295
 801180a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801180c:	4620      	mov	r0, r4
 801180e:	f001 fec9 	bl	80135a4 <_Bfree>
 8011812:	9907      	ldr	r1, [sp, #28]
 8011814:	4620      	mov	r0, r4
 8011816:	f001 fec5 	bl	80135a4 <_Bfree>
 801181a:	4631      	mov	r1, r6
 801181c:	4620      	mov	r0, r4
 801181e:	f001 fec1 	bl	80135a4 <_Bfree>
 8011822:	4629      	mov	r1, r5
 8011824:	4620      	mov	r0, r4
 8011826:	f001 febd 	bl	80135a4 <_Bfree>
 801182a:	e613      	b.n	8011454 <_strtod_l+0x664>
 801182c:	f1ba 0f00 	cmp.w	sl, #0
 8011830:	d11b      	bne.n	801186a <_strtod_l+0xa7a>
 8011832:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011836:	b9f3      	cbnz	r3, 8011876 <_strtod_l+0xa86>
 8011838:	4b6b      	ldr	r3, [pc, #428]	; (80119e8 <_strtod_l+0xbf8>)
 801183a:	2200      	movs	r2, #0
 801183c:	4640      	mov	r0, r8
 801183e:	4649      	mov	r1, r9
 8011840:	f7ef f954 	bl	8000aec <__aeabi_dcmplt>
 8011844:	b9d0      	cbnz	r0, 801187c <_strtod_l+0xa8c>
 8011846:	4640      	mov	r0, r8
 8011848:	4649      	mov	r1, r9
 801184a:	4b6b      	ldr	r3, [pc, #428]	; (80119f8 <_strtod_l+0xc08>)
 801184c:	2200      	movs	r2, #0
 801184e:	f7ee fedb 	bl	8000608 <__aeabi_dmul>
 8011852:	4680      	mov	r8, r0
 8011854:	4689      	mov	r9, r1
 8011856:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801185a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801185e:	931b      	str	r3, [sp, #108]	; 0x6c
 8011860:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8011864:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011868:	e79b      	b.n	80117a2 <_strtod_l+0x9b2>
 801186a:	f1ba 0f01 	cmp.w	sl, #1
 801186e:	d102      	bne.n	8011876 <_strtod_l+0xa86>
 8011870:	2f00      	cmp	r7, #0
 8011872:	f43f ad7e 	beq.w	8011372 <_strtod_l+0x582>
 8011876:	4b61      	ldr	r3, [pc, #388]	; (80119fc <_strtod_l+0xc0c>)
 8011878:	2200      	movs	r2, #0
 801187a:	e78c      	b.n	8011796 <_strtod_l+0x9a6>
 801187c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80119f8 <_strtod_l+0xc08>
 8011880:	f04f 0800 	mov.w	r8, #0
 8011884:	e7e7      	b.n	8011856 <_strtod_l+0xa66>
 8011886:	4b5c      	ldr	r3, [pc, #368]	; (80119f8 <_strtod_l+0xc08>)
 8011888:	4640      	mov	r0, r8
 801188a:	4649      	mov	r1, r9
 801188c:	2200      	movs	r2, #0
 801188e:	f7ee febb 	bl	8000608 <__aeabi_dmul>
 8011892:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011894:	4680      	mov	r8, r0
 8011896:	4689      	mov	r9, r1
 8011898:	b933      	cbnz	r3, 80118a8 <_strtod_l+0xab8>
 801189a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801189e:	9012      	str	r0, [sp, #72]	; 0x48
 80118a0:	9313      	str	r3, [sp, #76]	; 0x4c
 80118a2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80118a6:	e7dd      	b.n	8011864 <_strtod_l+0xa74>
 80118a8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80118ac:	e7f9      	b.n	80118a2 <_strtod_l+0xab2>
 80118ae:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80118b2:	9b04      	ldr	r3, [sp, #16]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d1a8      	bne.n	801180a <_strtod_l+0xa1a>
 80118b8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80118bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80118be:	0d1b      	lsrs	r3, r3, #20
 80118c0:	051b      	lsls	r3, r3, #20
 80118c2:	429a      	cmp	r2, r3
 80118c4:	d1a1      	bne.n	801180a <_strtod_l+0xa1a>
 80118c6:	4640      	mov	r0, r8
 80118c8:	4649      	mov	r1, r9
 80118ca:	f7ef f9fd 	bl	8000cc8 <__aeabi_d2lz>
 80118ce:	f7ee fe6d 	bl	80005ac <__aeabi_l2d>
 80118d2:	4602      	mov	r2, r0
 80118d4:	460b      	mov	r3, r1
 80118d6:	4640      	mov	r0, r8
 80118d8:	4649      	mov	r1, r9
 80118da:	f7ee fcdd 	bl	8000298 <__aeabi_dsub>
 80118de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80118e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80118e4:	ea43 030a 	orr.w	r3, r3, sl
 80118e8:	4313      	orrs	r3, r2
 80118ea:	4680      	mov	r8, r0
 80118ec:	4689      	mov	r9, r1
 80118ee:	d053      	beq.n	8011998 <_strtod_l+0xba8>
 80118f0:	a335      	add	r3, pc, #212	; (adr r3, 80119c8 <_strtod_l+0xbd8>)
 80118f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118f6:	f7ef f8f9 	bl	8000aec <__aeabi_dcmplt>
 80118fa:	2800      	cmp	r0, #0
 80118fc:	f47f acce 	bne.w	801129c <_strtod_l+0x4ac>
 8011900:	a333      	add	r3, pc, #204	; (adr r3, 80119d0 <_strtod_l+0xbe0>)
 8011902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011906:	4640      	mov	r0, r8
 8011908:	4649      	mov	r1, r9
 801190a:	f7ef f90d 	bl	8000b28 <__aeabi_dcmpgt>
 801190e:	2800      	cmp	r0, #0
 8011910:	f43f af7b 	beq.w	801180a <_strtod_l+0xa1a>
 8011914:	e4c2      	b.n	801129c <_strtod_l+0x4ac>
 8011916:	9b04      	ldr	r3, [sp, #16]
 8011918:	b333      	cbz	r3, 8011968 <_strtod_l+0xb78>
 801191a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801191c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011920:	d822      	bhi.n	8011968 <_strtod_l+0xb78>
 8011922:	a32d      	add	r3, pc, #180	; (adr r3, 80119d8 <_strtod_l+0xbe8>)
 8011924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011928:	4640      	mov	r0, r8
 801192a:	4649      	mov	r1, r9
 801192c:	f7ef f8e8 	bl	8000b00 <__aeabi_dcmple>
 8011930:	b1a0      	cbz	r0, 801195c <_strtod_l+0xb6c>
 8011932:	4649      	mov	r1, r9
 8011934:	4640      	mov	r0, r8
 8011936:	f7ef f93f 	bl	8000bb8 <__aeabi_d2uiz>
 801193a:	2801      	cmp	r0, #1
 801193c:	bf38      	it	cc
 801193e:	2001      	movcc	r0, #1
 8011940:	f7ee fde8 	bl	8000514 <__aeabi_ui2d>
 8011944:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011946:	4680      	mov	r8, r0
 8011948:	4689      	mov	r9, r1
 801194a:	bb13      	cbnz	r3, 8011992 <_strtod_l+0xba2>
 801194c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011950:	9014      	str	r0, [sp, #80]	; 0x50
 8011952:	9315      	str	r3, [sp, #84]	; 0x54
 8011954:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011958:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801195c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801195e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011960:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011964:	1a9b      	subs	r3, r3, r2
 8011966:	930d      	str	r3, [sp, #52]	; 0x34
 8011968:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801196c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011970:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011974:	f002 f942 	bl	8013bfc <__ulp>
 8011978:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801197c:	ec53 2b10 	vmov	r2, r3, d0
 8011980:	f7ee fe42 	bl	8000608 <__aeabi_dmul>
 8011984:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011988:	f7ee fc88 	bl	800029c <__adddf3>
 801198c:	4682      	mov	sl, r0
 801198e:	468b      	mov	fp, r1
 8011990:	e78f      	b.n	80118b2 <_strtod_l+0xac2>
 8011992:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8011996:	e7dd      	b.n	8011954 <_strtod_l+0xb64>
 8011998:	a311      	add	r3, pc, #68	; (adr r3, 80119e0 <_strtod_l+0xbf0>)
 801199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801199e:	f7ef f8a5 	bl	8000aec <__aeabi_dcmplt>
 80119a2:	e7b4      	b.n	801190e <_strtod_l+0xb1e>
 80119a4:	2300      	movs	r3, #0
 80119a6:	930e      	str	r3, [sp, #56]	; 0x38
 80119a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80119aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80119ac:	6013      	str	r3, [r2, #0]
 80119ae:	f7ff ba65 	b.w	8010e7c <_strtod_l+0x8c>
 80119b2:	2b65      	cmp	r3, #101	; 0x65
 80119b4:	f43f ab5d 	beq.w	8011072 <_strtod_l+0x282>
 80119b8:	2b45      	cmp	r3, #69	; 0x45
 80119ba:	f43f ab5a 	beq.w	8011072 <_strtod_l+0x282>
 80119be:	2201      	movs	r2, #1
 80119c0:	f7ff bb92 	b.w	80110e8 <_strtod_l+0x2f8>
 80119c4:	f3af 8000 	nop.w
 80119c8:	94a03595 	.word	0x94a03595
 80119cc:	3fdfffff 	.word	0x3fdfffff
 80119d0:	35afe535 	.word	0x35afe535
 80119d4:	3fe00000 	.word	0x3fe00000
 80119d8:	ffc00000 	.word	0xffc00000
 80119dc:	41dfffff 	.word	0x41dfffff
 80119e0:	94a03595 	.word	0x94a03595
 80119e4:	3fcfffff 	.word	0x3fcfffff
 80119e8:	3ff00000 	.word	0x3ff00000
 80119ec:	7ff00000 	.word	0x7ff00000
 80119f0:	7fe00000 	.word	0x7fe00000
 80119f4:	7c9fffff 	.word	0x7c9fffff
 80119f8:	3fe00000 	.word	0x3fe00000
 80119fc:	bff00000 	.word	0xbff00000
 8011a00:	7fefffff 	.word	0x7fefffff

08011a04 <_strtod_r>:
 8011a04:	4b01      	ldr	r3, [pc, #4]	; (8011a0c <_strtod_r+0x8>)
 8011a06:	f7ff b9f3 	b.w	8010df0 <_strtod_l>
 8011a0a:	bf00      	nop
 8011a0c:	200000c0 	.word	0x200000c0

08011a10 <_strtol_l.isra.0>:
 8011a10:	2b01      	cmp	r3, #1
 8011a12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a16:	d001      	beq.n	8011a1c <_strtol_l.isra.0+0xc>
 8011a18:	2b24      	cmp	r3, #36	; 0x24
 8011a1a:	d906      	bls.n	8011a2a <_strtol_l.isra.0+0x1a>
 8011a1c:	f7fe f966 	bl	800fcec <__errno>
 8011a20:	2316      	movs	r3, #22
 8011a22:	6003      	str	r3, [r0, #0]
 8011a24:	2000      	movs	r0, #0
 8011a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a2a:	4f3a      	ldr	r7, [pc, #232]	; (8011b14 <_strtol_l.isra.0+0x104>)
 8011a2c:	468e      	mov	lr, r1
 8011a2e:	4676      	mov	r6, lr
 8011a30:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011a34:	5de5      	ldrb	r5, [r4, r7]
 8011a36:	f015 0508 	ands.w	r5, r5, #8
 8011a3a:	d1f8      	bne.n	8011a2e <_strtol_l.isra.0+0x1e>
 8011a3c:	2c2d      	cmp	r4, #45	; 0x2d
 8011a3e:	d134      	bne.n	8011aaa <_strtol_l.isra.0+0x9a>
 8011a40:	f89e 4000 	ldrb.w	r4, [lr]
 8011a44:	f04f 0801 	mov.w	r8, #1
 8011a48:	f106 0e02 	add.w	lr, r6, #2
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d05c      	beq.n	8011b0a <_strtol_l.isra.0+0xfa>
 8011a50:	2b10      	cmp	r3, #16
 8011a52:	d10c      	bne.n	8011a6e <_strtol_l.isra.0+0x5e>
 8011a54:	2c30      	cmp	r4, #48	; 0x30
 8011a56:	d10a      	bne.n	8011a6e <_strtol_l.isra.0+0x5e>
 8011a58:	f89e 4000 	ldrb.w	r4, [lr]
 8011a5c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011a60:	2c58      	cmp	r4, #88	; 0x58
 8011a62:	d14d      	bne.n	8011b00 <_strtol_l.isra.0+0xf0>
 8011a64:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8011a68:	2310      	movs	r3, #16
 8011a6a:	f10e 0e02 	add.w	lr, lr, #2
 8011a6e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8011a72:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011a76:	2600      	movs	r6, #0
 8011a78:	fbbc f9f3 	udiv	r9, ip, r3
 8011a7c:	4635      	mov	r5, r6
 8011a7e:	fb03 ca19 	mls	sl, r3, r9, ip
 8011a82:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8011a86:	2f09      	cmp	r7, #9
 8011a88:	d818      	bhi.n	8011abc <_strtol_l.isra.0+0xac>
 8011a8a:	463c      	mov	r4, r7
 8011a8c:	42a3      	cmp	r3, r4
 8011a8e:	dd24      	ble.n	8011ada <_strtol_l.isra.0+0xca>
 8011a90:	2e00      	cmp	r6, #0
 8011a92:	db1f      	blt.n	8011ad4 <_strtol_l.isra.0+0xc4>
 8011a94:	45a9      	cmp	r9, r5
 8011a96:	d31d      	bcc.n	8011ad4 <_strtol_l.isra.0+0xc4>
 8011a98:	d101      	bne.n	8011a9e <_strtol_l.isra.0+0x8e>
 8011a9a:	45a2      	cmp	sl, r4
 8011a9c:	db1a      	blt.n	8011ad4 <_strtol_l.isra.0+0xc4>
 8011a9e:	fb05 4503 	mla	r5, r5, r3, r4
 8011aa2:	2601      	movs	r6, #1
 8011aa4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011aa8:	e7eb      	b.n	8011a82 <_strtol_l.isra.0+0x72>
 8011aaa:	2c2b      	cmp	r4, #43	; 0x2b
 8011aac:	bf08      	it	eq
 8011aae:	f89e 4000 	ldrbeq.w	r4, [lr]
 8011ab2:	46a8      	mov	r8, r5
 8011ab4:	bf08      	it	eq
 8011ab6:	f106 0e02 	addeq.w	lr, r6, #2
 8011aba:	e7c7      	b.n	8011a4c <_strtol_l.isra.0+0x3c>
 8011abc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8011ac0:	2f19      	cmp	r7, #25
 8011ac2:	d801      	bhi.n	8011ac8 <_strtol_l.isra.0+0xb8>
 8011ac4:	3c37      	subs	r4, #55	; 0x37
 8011ac6:	e7e1      	b.n	8011a8c <_strtol_l.isra.0+0x7c>
 8011ac8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8011acc:	2f19      	cmp	r7, #25
 8011ace:	d804      	bhi.n	8011ada <_strtol_l.isra.0+0xca>
 8011ad0:	3c57      	subs	r4, #87	; 0x57
 8011ad2:	e7db      	b.n	8011a8c <_strtol_l.isra.0+0x7c>
 8011ad4:	f04f 36ff 	mov.w	r6, #4294967295
 8011ad8:	e7e4      	b.n	8011aa4 <_strtol_l.isra.0+0x94>
 8011ada:	2e00      	cmp	r6, #0
 8011adc:	da05      	bge.n	8011aea <_strtol_l.isra.0+0xda>
 8011ade:	2322      	movs	r3, #34	; 0x22
 8011ae0:	6003      	str	r3, [r0, #0]
 8011ae2:	4665      	mov	r5, ip
 8011ae4:	b942      	cbnz	r2, 8011af8 <_strtol_l.isra.0+0xe8>
 8011ae6:	4628      	mov	r0, r5
 8011ae8:	e79d      	b.n	8011a26 <_strtol_l.isra.0+0x16>
 8011aea:	f1b8 0f00 	cmp.w	r8, #0
 8011aee:	d000      	beq.n	8011af2 <_strtol_l.isra.0+0xe2>
 8011af0:	426d      	negs	r5, r5
 8011af2:	2a00      	cmp	r2, #0
 8011af4:	d0f7      	beq.n	8011ae6 <_strtol_l.isra.0+0xd6>
 8011af6:	b10e      	cbz	r6, 8011afc <_strtol_l.isra.0+0xec>
 8011af8:	f10e 31ff 	add.w	r1, lr, #4294967295
 8011afc:	6011      	str	r1, [r2, #0]
 8011afe:	e7f2      	b.n	8011ae6 <_strtol_l.isra.0+0xd6>
 8011b00:	2430      	movs	r4, #48	; 0x30
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d1b3      	bne.n	8011a6e <_strtol_l.isra.0+0x5e>
 8011b06:	2308      	movs	r3, #8
 8011b08:	e7b1      	b.n	8011a6e <_strtol_l.isra.0+0x5e>
 8011b0a:	2c30      	cmp	r4, #48	; 0x30
 8011b0c:	d0a4      	beq.n	8011a58 <_strtol_l.isra.0+0x48>
 8011b0e:	230a      	movs	r3, #10
 8011b10:	e7ad      	b.n	8011a6e <_strtol_l.isra.0+0x5e>
 8011b12:	bf00      	nop
 8011b14:	0801625d 	.word	0x0801625d

08011b18 <_strtol_r>:
 8011b18:	f7ff bf7a 	b.w	8011a10 <_strtol_l.isra.0>

08011b1c <__swbuf_r>:
 8011b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b1e:	460e      	mov	r6, r1
 8011b20:	4614      	mov	r4, r2
 8011b22:	4605      	mov	r5, r0
 8011b24:	b118      	cbz	r0, 8011b2e <__swbuf_r+0x12>
 8011b26:	6983      	ldr	r3, [r0, #24]
 8011b28:	b90b      	cbnz	r3, 8011b2e <__swbuf_r+0x12>
 8011b2a:	f001 f84f 	bl	8012bcc <__sinit>
 8011b2e:	4b21      	ldr	r3, [pc, #132]	; (8011bb4 <__swbuf_r+0x98>)
 8011b30:	429c      	cmp	r4, r3
 8011b32:	d12b      	bne.n	8011b8c <__swbuf_r+0x70>
 8011b34:	686c      	ldr	r4, [r5, #4]
 8011b36:	69a3      	ldr	r3, [r4, #24]
 8011b38:	60a3      	str	r3, [r4, #8]
 8011b3a:	89a3      	ldrh	r3, [r4, #12]
 8011b3c:	071a      	lsls	r2, r3, #28
 8011b3e:	d52f      	bpl.n	8011ba0 <__swbuf_r+0x84>
 8011b40:	6923      	ldr	r3, [r4, #16]
 8011b42:	b36b      	cbz	r3, 8011ba0 <__swbuf_r+0x84>
 8011b44:	6923      	ldr	r3, [r4, #16]
 8011b46:	6820      	ldr	r0, [r4, #0]
 8011b48:	1ac0      	subs	r0, r0, r3
 8011b4a:	6963      	ldr	r3, [r4, #20]
 8011b4c:	b2f6      	uxtb	r6, r6
 8011b4e:	4283      	cmp	r3, r0
 8011b50:	4637      	mov	r7, r6
 8011b52:	dc04      	bgt.n	8011b5e <__swbuf_r+0x42>
 8011b54:	4621      	mov	r1, r4
 8011b56:	4628      	mov	r0, r5
 8011b58:	f000 ffa4 	bl	8012aa4 <_fflush_r>
 8011b5c:	bb30      	cbnz	r0, 8011bac <__swbuf_r+0x90>
 8011b5e:	68a3      	ldr	r3, [r4, #8]
 8011b60:	3b01      	subs	r3, #1
 8011b62:	60a3      	str	r3, [r4, #8]
 8011b64:	6823      	ldr	r3, [r4, #0]
 8011b66:	1c5a      	adds	r2, r3, #1
 8011b68:	6022      	str	r2, [r4, #0]
 8011b6a:	701e      	strb	r6, [r3, #0]
 8011b6c:	6963      	ldr	r3, [r4, #20]
 8011b6e:	3001      	adds	r0, #1
 8011b70:	4283      	cmp	r3, r0
 8011b72:	d004      	beq.n	8011b7e <__swbuf_r+0x62>
 8011b74:	89a3      	ldrh	r3, [r4, #12]
 8011b76:	07db      	lsls	r3, r3, #31
 8011b78:	d506      	bpl.n	8011b88 <__swbuf_r+0x6c>
 8011b7a:	2e0a      	cmp	r6, #10
 8011b7c:	d104      	bne.n	8011b88 <__swbuf_r+0x6c>
 8011b7e:	4621      	mov	r1, r4
 8011b80:	4628      	mov	r0, r5
 8011b82:	f000 ff8f 	bl	8012aa4 <_fflush_r>
 8011b86:	b988      	cbnz	r0, 8011bac <__swbuf_r+0x90>
 8011b88:	4638      	mov	r0, r7
 8011b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b8c:	4b0a      	ldr	r3, [pc, #40]	; (8011bb8 <__swbuf_r+0x9c>)
 8011b8e:	429c      	cmp	r4, r3
 8011b90:	d101      	bne.n	8011b96 <__swbuf_r+0x7a>
 8011b92:	68ac      	ldr	r4, [r5, #8]
 8011b94:	e7cf      	b.n	8011b36 <__swbuf_r+0x1a>
 8011b96:	4b09      	ldr	r3, [pc, #36]	; (8011bbc <__swbuf_r+0xa0>)
 8011b98:	429c      	cmp	r4, r3
 8011b9a:	bf08      	it	eq
 8011b9c:	68ec      	ldreq	r4, [r5, #12]
 8011b9e:	e7ca      	b.n	8011b36 <__swbuf_r+0x1a>
 8011ba0:	4621      	mov	r1, r4
 8011ba2:	4628      	mov	r0, r5
 8011ba4:	f000 f80c 	bl	8011bc0 <__swsetup_r>
 8011ba8:	2800      	cmp	r0, #0
 8011baa:	d0cb      	beq.n	8011b44 <__swbuf_r+0x28>
 8011bac:	f04f 37ff 	mov.w	r7, #4294967295
 8011bb0:	e7ea      	b.n	8011b88 <__swbuf_r+0x6c>
 8011bb2:	bf00      	nop
 8011bb4:	080164b4 	.word	0x080164b4
 8011bb8:	080164d4 	.word	0x080164d4
 8011bbc:	08016494 	.word	0x08016494

08011bc0 <__swsetup_r>:
 8011bc0:	4b32      	ldr	r3, [pc, #200]	; (8011c8c <__swsetup_r+0xcc>)
 8011bc2:	b570      	push	{r4, r5, r6, lr}
 8011bc4:	681d      	ldr	r5, [r3, #0]
 8011bc6:	4606      	mov	r6, r0
 8011bc8:	460c      	mov	r4, r1
 8011bca:	b125      	cbz	r5, 8011bd6 <__swsetup_r+0x16>
 8011bcc:	69ab      	ldr	r3, [r5, #24]
 8011bce:	b913      	cbnz	r3, 8011bd6 <__swsetup_r+0x16>
 8011bd0:	4628      	mov	r0, r5
 8011bd2:	f000 fffb 	bl	8012bcc <__sinit>
 8011bd6:	4b2e      	ldr	r3, [pc, #184]	; (8011c90 <__swsetup_r+0xd0>)
 8011bd8:	429c      	cmp	r4, r3
 8011bda:	d10f      	bne.n	8011bfc <__swsetup_r+0x3c>
 8011bdc:	686c      	ldr	r4, [r5, #4]
 8011bde:	89a3      	ldrh	r3, [r4, #12]
 8011be0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011be4:	0719      	lsls	r1, r3, #28
 8011be6:	d42c      	bmi.n	8011c42 <__swsetup_r+0x82>
 8011be8:	06dd      	lsls	r5, r3, #27
 8011bea:	d411      	bmi.n	8011c10 <__swsetup_r+0x50>
 8011bec:	2309      	movs	r3, #9
 8011bee:	6033      	str	r3, [r6, #0]
 8011bf0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011bf4:	81a3      	strh	r3, [r4, #12]
 8011bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8011bfa:	e03e      	b.n	8011c7a <__swsetup_r+0xba>
 8011bfc:	4b25      	ldr	r3, [pc, #148]	; (8011c94 <__swsetup_r+0xd4>)
 8011bfe:	429c      	cmp	r4, r3
 8011c00:	d101      	bne.n	8011c06 <__swsetup_r+0x46>
 8011c02:	68ac      	ldr	r4, [r5, #8]
 8011c04:	e7eb      	b.n	8011bde <__swsetup_r+0x1e>
 8011c06:	4b24      	ldr	r3, [pc, #144]	; (8011c98 <__swsetup_r+0xd8>)
 8011c08:	429c      	cmp	r4, r3
 8011c0a:	bf08      	it	eq
 8011c0c:	68ec      	ldreq	r4, [r5, #12]
 8011c0e:	e7e6      	b.n	8011bde <__swsetup_r+0x1e>
 8011c10:	0758      	lsls	r0, r3, #29
 8011c12:	d512      	bpl.n	8011c3a <__swsetup_r+0x7a>
 8011c14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011c16:	b141      	cbz	r1, 8011c2a <__swsetup_r+0x6a>
 8011c18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011c1c:	4299      	cmp	r1, r3
 8011c1e:	d002      	beq.n	8011c26 <__swsetup_r+0x66>
 8011c20:	4630      	mov	r0, r6
 8011c22:	f002 f949 	bl	8013eb8 <_free_r>
 8011c26:	2300      	movs	r3, #0
 8011c28:	6363      	str	r3, [r4, #52]	; 0x34
 8011c2a:	89a3      	ldrh	r3, [r4, #12]
 8011c2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011c30:	81a3      	strh	r3, [r4, #12]
 8011c32:	2300      	movs	r3, #0
 8011c34:	6063      	str	r3, [r4, #4]
 8011c36:	6923      	ldr	r3, [r4, #16]
 8011c38:	6023      	str	r3, [r4, #0]
 8011c3a:	89a3      	ldrh	r3, [r4, #12]
 8011c3c:	f043 0308 	orr.w	r3, r3, #8
 8011c40:	81a3      	strh	r3, [r4, #12]
 8011c42:	6923      	ldr	r3, [r4, #16]
 8011c44:	b94b      	cbnz	r3, 8011c5a <__swsetup_r+0x9a>
 8011c46:	89a3      	ldrh	r3, [r4, #12]
 8011c48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011c50:	d003      	beq.n	8011c5a <__swsetup_r+0x9a>
 8011c52:	4621      	mov	r1, r4
 8011c54:	4630      	mov	r0, r6
 8011c56:	f001 fbf1 	bl	801343c <__smakebuf_r>
 8011c5a:	89a0      	ldrh	r0, [r4, #12]
 8011c5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011c60:	f010 0301 	ands.w	r3, r0, #1
 8011c64:	d00a      	beq.n	8011c7c <__swsetup_r+0xbc>
 8011c66:	2300      	movs	r3, #0
 8011c68:	60a3      	str	r3, [r4, #8]
 8011c6a:	6963      	ldr	r3, [r4, #20]
 8011c6c:	425b      	negs	r3, r3
 8011c6e:	61a3      	str	r3, [r4, #24]
 8011c70:	6923      	ldr	r3, [r4, #16]
 8011c72:	b943      	cbnz	r3, 8011c86 <__swsetup_r+0xc6>
 8011c74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011c78:	d1ba      	bne.n	8011bf0 <__swsetup_r+0x30>
 8011c7a:	bd70      	pop	{r4, r5, r6, pc}
 8011c7c:	0781      	lsls	r1, r0, #30
 8011c7e:	bf58      	it	pl
 8011c80:	6963      	ldrpl	r3, [r4, #20]
 8011c82:	60a3      	str	r3, [r4, #8]
 8011c84:	e7f4      	b.n	8011c70 <__swsetup_r+0xb0>
 8011c86:	2000      	movs	r0, #0
 8011c88:	e7f7      	b.n	8011c7a <__swsetup_r+0xba>
 8011c8a:	bf00      	nop
 8011c8c:	20000058 	.word	0x20000058
 8011c90:	080164b4 	.word	0x080164b4
 8011c94:	080164d4 	.word	0x080164d4
 8011c98:	08016494 	.word	0x08016494

08011c9c <abort>:
 8011c9c:	b508      	push	{r3, lr}
 8011c9e:	2006      	movs	r0, #6
 8011ca0:	f002 fb76 	bl	8014390 <raise>
 8011ca4:	2001      	movs	r0, #1
 8011ca6:	f7f2 fb7b 	bl	80043a0 <_exit>

08011caa <quorem>:
 8011caa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cae:	6903      	ldr	r3, [r0, #16]
 8011cb0:	690c      	ldr	r4, [r1, #16]
 8011cb2:	42a3      	cmp	r3, r4
 8011cb4:	4607      	mov	r7, r0
 8011cb6:	f2c0 8081 	blt.w	8011dbc <quorem+0x112>
 8011cba:	3c01      	subs	r4, #1
 8011cbc:	f101 0814 	add.w	r8, r1, #20
 8011cc0:	f100 0514 	add.w	r5, r0, #20
 8011cc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011cc8:	9301      	str	r3, [sp, #4]
 8011cca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011cce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011cd2:	3301      	adds	r3, #1
 8011cd4:	429a      	cmp	r2, r3
 8011cd6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011cda:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011cde:	fbb2 f6f3 	udiv	r6, r2, r3
 8011ce2:	d331      	bcc.n	8011d48 <quorem+0x9e>
 8011ce4:	f04f 0e00 	mov.w	lr, #0
 8011ce8:	4640      	mov	r0, r8
 8011cea:	46ac      	mov	ip, r5
 8011cec:	46f2      	mov	sl, lr
 8011cee:	f850 2b04 	ldr.w	r2, [r0], #4
 8011cf2:	b293      	uxth	r3, r2
 8011cf4:	fb06 e303 	mla	r3, r6, r3, lr
 8011cf8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011cfc:	b29b      	uxth	r3, r3
 8011cfe:	ebaa 0303 	sub.w	r3, sl, r3
 8011d02:	0c12      	lsrs	r2, r2, #16
 8011d04:	f8dc a000 	ldr.w	sl, [ip]
 8011d08:	fb06 e202 	mla	r2, r6, r2, lr
 8011d0c:	fa13 f38a 	uxtah	r3, r3, sl
 8011d10:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011d14:	fa1f fa82 	uxth.w	sl, r2
 8011d18:	f8dc 2000 	ldr.w	r2, [ip]
 8011d1c:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8011d20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011d24:	b29b      	uxth	r3, r3
 8011d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011d2a:	4581      	cmp	r9, r0
 8011d2c:	f84c 3b04 	str.w	r3, [ip], #4
 8011d30:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011d34:	d2db      	bcs.n	8011cee <quorem+0x44>
 8011d36:	f855 300b 	ldr.w	r3, [r5, fp]
 8011d3a:	b92b      	cbnz	r3, 8011d48 <quorem+0x9e>
 8011d3c:	9b01      	ldr	r3, [sp, #4]
 8011d3e:	3b04      	subs	r3, #4
 8011d40:	429d      	cmp	r5, r3
 8011d42:	461a      	mov	r2, r3
 8011d44:	d32e      	bcc.n	8011da4 <quorem+0xfa>
 8011d46:	613c      	str	r4, [r7, #16]
 8011d48:	4638      	mov	r0, r7
 8011d4a:	f001 feb3 	bl	8013ab4 <__mcmp>
 8011d4e:	2800      	cmp	r0, #0
 8011d50:	db24      	blt.n	8011d9c <quorem+0xf2>
 8011d52:	3601      	adds	r6, #1
 8011d54:	4628      	mov	r0, r5
 8011d56:	f04f 0c00 	mov.w	ip, #0
 8011d5a:	f858 2b04 	ldr.w	r2, [r8], #4
 8011d5e:	f8d0 e000 	ldr.w	lr, [r0]
 8011d62:	b293      	uxth	r3, r2
 8011d64:	ebac 0303 	sub.w	r3, ip, r3
 8011d68:	0c12      	lsrs	r2, r2, #16
 8011d6a:	fa13 f38e 	uxtah	r3, r3, lr
 8011d6e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011d72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011d76:	b29b      	uxth	r3, r3
 8011d78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011d7c:	45c1      	cmp	r9, r8
 8011d7e:	f840 3b04 	str.w	r3, [r0], #4
 8011d82:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011d86:	d2e8      	bcs.n	8011d5a <quorem+0xb0>
 8011d88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011d8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011d90:	b922      	cbnz	r2, 8011d9c <quorem+0xf2>
 8011d92:	3b04      	subs	r3, #4
 8011d94:	429d      	cmp	r5, r3
 8011d96:	461a      	mov	r2, r3
 8011d98:	d30a      	bcc.n	8011db0 <quorem+0x106>
 8011d9a:	613c      	str	r4, [r7, #16]
 8011d9c:	4630      	mov	r0, r6
 8011d9e:	b003      	add	sp, #12
 8011da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011da4:	6812      	ldr	r2, [r2, #0]
 8011da6:	3b04      	subs	r3, #4
 8011da8:	2a00      	cmp	r2, #0
 8011daa:	d1cc      	bne.n	8011d46 <quorem+0x9c>
 8011dac:	3c01      	subs	r4, #1
 8011dae:	e7c7      	b.n	8011d40 <quorem+0x96>
 8011db0:	6812      	ldr	r2, [r2, #0]
 8011db2:	3b04      	subs	r3, #4
 8011db4:	2a00      	cmp	r2, #0
 8011db6:	d1f0      	bne.n	8011d9a <quorem+0xf0>
 8011db8:	3c01      	subs	r4, #1
 8011dba:	e7eb      	b.n	8011d94 <quorem+0xea>
 8011dbc:	2000      	movs	r0, #0
 8011dbe:	e7ee      	b.n	8011d9e <quorem+0xf4>

08011dc0 <_dtoa_r>:
 8011dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dc4:	ed2d 8b02 	vpush	{d8}
 8011dc8:	ec57 6b10 	vmov	r6, r7, d0
 8011dcc:	b095      	sub	sp, #84	; 0x54
 8011dce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011dd0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011dd4:	9105      	str	r1, [sp, #20]
 8011dd6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8011dda:	4604      	mov	r4, r0
 8011ddc:	9209      	str	r2, [sp, #36]	; 0x24
 8011dde:	930f      	str	r3, [sp, #60]	; 0x3c
 8011de0:	b975      	cbnz	r5, 8011e00 <_dtoa_r+0x40>
 8011de2:	2010      	movs	r0, #16
 8011de4:	f001 fb6a 	bl	80134bc <malloc>
 8011de8:	4602      	mov	r2, r0
 8011dea:	6260      	str	r0, [r4, #36]	; 0x24
 8011dec:	b920      	cbnz	r0, 8011df8 <_dtoa_r+0x38>
 8011dee:	4bb2      	ldr	r3, [pc, #712]	; (80120b8 <_dtoa_r+0x2f8>)
 8011df0:	21ea      	movs	r1, #234	; 0xea
 8011df2:	48b2      	ldr	r0, [pc, #712]	; (80120bc <_dtoa_r+0x2fc>)
 8011df4:	f7fd ff5c 	bl	800fcb0 <__assert_func>
 8011df8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011dfc:	6005      	str	r5, [r0, #0]
 8011dfe:	60c5      	str	r5, [r0, #12]
 8011e00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011e02:	6819      	ldr	r1, [r3, #0]
 8011e04:	b151      	cbz	r1, 8011e1c <_dtoa_r+0x5c>
 8011e06:	685a      	ldr	r2, [r3, #4]
 8011e08:	604a      	str	r2, [r1, #4]
 8011e0a:	2301      	movs	r3, #1
 8011e0c:	4093      	lsls	r3, r2
 8011e0e:	608b      	str	r3, [r1, #8]
 8011e10:	4620      	mov	r0, r4
 8011e12:	f001 fbc7 	bl	80135a4 <_Bfree>
 8011e16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011e18:	2200      	movs	r2, #0
 8011e1a:	601a      	str	r2, [r3, #0]
 8011e1c:	1e3b      	subs	r3, r7, #0
 8011e1e:	bfb9      	ittee	lt
 8011e20:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011e24:	9303      	strlt	r3, [sp, #12]
 8011e26:	2300      	movge	r3, #0
 8011e28:	f8c8 3000 	strge.w	r3, [r8]
 8011e2c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8011e30:	4ba3      	ldr	r3, [pc, #652]	; (80120c0 <_dtoa_r+0x300>)
 8011e32:	bfbc      	itt	lt
 8011e34:	2201      	movlt	r2, #1
 8011e36:	f8c8 2000 	strlt.w	r2, [r8]
 8011e3a:	ea33 0309 	bics.w	r3, r3, r9
 8011e3e:	d11b      	bne.n	8011e78 <_dtoa_r+0xb8>
 8011e40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011e42:	f242 730f 	movw	r3, #9999	; 0x270f
 8011e46:	6013      	str	r3, [r2, #0]
 8011e48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011e4c:	4333      	orrs	r3, r6
 8011e4e:	f000 857a 	beq.w	8012946 <_dtoa_r+0xb86>
 8011e52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011e54:	b963      	cbnz	r3, 8011e70 <_dtoa_r+0xb0>
 8011e56:	4b9b      	ldr	r3, [pc, #620]	; (80120c4 <_dtoa_r+0x304>)
 8011e58:	e024      	b.n	8011ea4 <_dtoa_r+0xe4>
 8011e5a:	4b9b      	ldr	r3, [pc, #620]	; (80120c8 <_dtoa_r+0x308>)
 8011e5c:	9300      	str	r3, [sp, #0]
 8011e5e:	3308      	adds	r3, #8
 8011e60:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011e62:	6013      	str	r3, [r2, #0]
 8011e64:	9800      	ldr	r0, [sp, #0]
 8011e66:	b015      	add	sp, #84	; 0x54
 8011e68:	ecbd 8b02 	vpop	{d8}
 8011e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e70:	4b94      	ldr	r3, [pc, #592]	; (80120c4 <_dtoa_r+0x304>)
 8011e72:	9300      	str	r3, [sp, #0]
 8011e74:	3303      	adds	r3, #3
 8011e76:	e7f3      	b.n	8011e60 <_dtoa_r+0xa0>
 8011e78:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011e7c:	2200      	movs	r2, #0
 8011e7e:	ec51 0b17 	vmov	r0, r1, d7
 8011e82:	2300      	movs	r3, #0
 8011e84:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8011e88:	f7ee fe26 	bl	8000ad8 <__aeabi_dcmpeq>
 8011e8c:	4680      	mov	r8, r0
 8011e8e:	b158      	cbz	r0, 8011ea8 <_dtoa_r+0xe8>
 8011e90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011e92:	2301      	movs	r3, #1
 8011e94:	6013      	str	r3, [r2, #0]
 8011e96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	f000 8551 	beq.w	8012940 <_dtoa_r+0xb80>
 8011e9e:	488b      	ldr	r0, [pc, #556]	; (80120cc <_dtoa_r+0x30c>)
 8011ea0:	6018      	str	r0, [r3, #0]
 8011ea2:	1e43      	subs	r3, r0, #1
 8011ea4:	9300      	str	r3, [sp, #0]
 8011ea6:	e7dd      	b.n	8011e64 <_dtoa_r+0xa4>
 8011ea8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011eac:	aa12      	add	r2, sp, #72	; 0x48
 8011eae:	a913      	add	r1, sp, #76	; 0x4c
 8011eb0:	4620      	mov	r0, r4
 8011eb2:	f001 ff1f 	bl	8013cf4 <__d2b>
 8011eb6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011eba:	4683      	mov	fp, r0
 8011ebc:	2d00      	cmp	r5, #0
 8011ebe:	d07c      	beq.n	8011fba <_dtoa_r+0x1fa>
 8011ec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ec2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8011ec6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011eca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8011ece:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011ed2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8011ed6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011eda:	4b7d      	ldr	r3, [pc, #500]	; (80120d0 <_dtoa_r+0x310>)
 8011edc:	2200      	movs	r2, #0
 8011ede:	4630      	mov	r0, r6
 8011ee0:	4639      	mov	r1, r7
 8011ee2:	f7ee f9d9 	bl	8000298 <__aeabi_dsub>
 8011ee6:	a36e      	add	r3, pc, #440	; (adr r3, 80120a0 <_dtoa_r+0x2e0>)
 8011ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eec:	f7ee fb8c 	bl	8000608 <__aeabi_dmul>
 8011ef0:	a36d      	add	r3, pc, #436	; (adr r3, 80120a8 <_dtoa_r+0x2e8>)
 8011ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ef6:	f7ee f9d1 	bl	800029c <__adddf3>
 8011efa:	4606      	mov	r6, r0
 8011efc:	4628      	mov	r0, r5
 8011efe:	460f      	mov	r7, r1
 8011f00:	f7ee fb18 	bl	8000534 <__aeabi_i2d>
 8011f04:	a36a      	add	r3, pc, #424	; (adr r3, 80120b0 <_dtoa_r+0x2f0>)
 8011f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f0a:	f7ee fb7d 	bl	8000608 <__aeabi_dmul>
 8011f0e:	4602      	mov	r2, r0
 8011f10:	460b      	mov	r3, r1
 8011f12:	4630      	mov	r0, r6
 8011f14:	4639      	mov	r1, r7
 8011f16:	f7ee f9c1 	bl	800029c <__adddf3>
 8011f1a:	4606      	mov	r6, r0
 8011f1c:	460f      	mov	r7, r1
 8011f1e:	f7ee fe23 	bl	8000b68 <__aeabi_d2iz>
 8011f22:	2200      	movs	r2, #0
 8011f24:	4682      	mov	sl, r0
 8011f26:	2300      	movs	r3, #0
 8011f28:	4630      	mov	r0, r6
 8011f2a:	4639      	mov	r1, r7
 8011f2c:	f7ee fdde 	bl	8000aec <__aeabi_dcmplt>
 8011f30:	b148      	cbz	r0, 8011f46 <_dtoa_r+0x186>
 8011f32:	4650      	mov	r0, sl
 8011f34:	f7ee fafe 	bl	8000534 <__aeabi_i2d>
 8011f38:	4632      	mov	r2, r6
 8011f3a:	463b      	mov	r3, r7
 8011f3c:	f7ee fdcc 	bl	8000ad8 <__aeabi_dcmpeq>
 8011f40:	b908      	cbnz	r0, 8011f46 <_dtoa_r+0x186>
 8011f42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011f46:	f1ba 0f16 	cmp.w	sl, #22
 8011f4a:	d854      	bhi.n	8011ff6 <_dtoa_r+0x236>
 8011f4c:	4b61      	ldr	r3, [pc, #388]	; (80120d4 <_dtoa_r+0x314>)
 8011f4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011f5a:	f7ee fdc7 	bl	8000aec <__aeabi_dcmplt>
 8011f5e:	2800      	cmp	r0, #0
 8011f60:	d04b      	beq.n	8011ffa <_dtoa_r+0x23a>
 8011f62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011f66:	2300      	movs	r3, #0
 8011f68:	930e      	str	r3, [sp, #56]	; 0x38
 8011f6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011f6c:	1b5d      	subs	r5, r3, r5
 8011f6e:	1e6b      	subs	r3, r5, #1
 8011f70:	9304      	str	r3, [sp, #16]
 8011f72:	bf43      	ittte	mi
 8011f74:	2300      	movmi	r3, #0
 8011f76:	f1c5 0801 	rsbmi	r8, r5, #1
 8011f7a:	9304      	strmi	r3, [sp, #16]
 8011f7c:	f04f 0800 	movpl.w	r8, #0
 8011f80:	f1ba 0f00 	cmp.w	sl, #0
 8011f84:	db3b      	blt.n	8011ffe <_dtoa_r+0x23e>
 8011f86:	9b04      	ldr	r3, [sp, #16]
 8011f88:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8011f8c:	4453      	add	r3, sl
 8011f8e:	9304      	str	r3, [sp, #16]
 8011f90:	2300      	movs	r3, #0
 8011f92:	9306      	str	r3, [sp, #24]
 8011f94:	9b05      	ldr	r3, [sp, #20]
 8011f96:	2b09      	cmp	r3, #9
 8011f98:	d869      	bhi.n	801206e <_dtoa_r+0x2ae>
 8011f9a:	2b05      	cmp	r3, #5
 8011f9c:	bfc4      	itt	gt
 8011f9e:	3b04      	subgt	r3, #4
 8011fa0:	9305      	strgt	r3, [sp, #20]
 8011fa2:	9b05      	ldr	r3, [sp, #20]
 8011fa4:	f1a3 0302 	sub.w	r3, r3, #2
 8011fa8:	bfcc      	ite	gt
 8011faa:	2500      	movgt	r5, #0
 8011fac:	2501      	movle	r5, #1
 8011fae:	2b03      	cmp	r3, #3
 8011fb0:	d869      	bhi.n	8012086 <_dtoa_r+0x2c6>
 8011fb2:	e8df f003 	tbb	[pc, r3]
 8011fb6:	4e2c      	.short	0x4e2c
 8011fb8:	5a4c      	.short	0x5a4c
 8011fba:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8011fbe:	441d      	add	r5, r3
 8011fc0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011fc4:	2b20      	cmp	r3, #32
 8011fc6:	bfc1      	itttt	gt
 8011fc8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011fcc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011fd0:	fa09 f303 	lslgt.w	r3, r9, r3
 8011fd4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011fd8:	bfda      	itte	le
 8011fda:	f1c3 0320 	rsble	r3, r3, #32
 8011fde:	fa06 f003 	lslle.w	r0, r6, r3
 8011fe2:	4318      	orrgt	r0, r3
 8011fe4:	f7ee fa96 	bl	8000514 <__aeabi_ui2d>
 8011fe8:	2301      	movs	r3, #1
 8011fea:	4606      	mov	r6, r0
 8011fec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011ff0:	3d01      	subs	r5, #1
 8011ff2:	9310      	str	r3, [sp, #64]	; 0x40
 8011ff4:	e771      	b.n	8011eda <_dtoa_r+0x11a>
 8011ff6:	2301      	movs	r3, #1
 8011ff8:	e7b6      	b.n	8011f68 <_dtoa_r+0x1a8>
 8011ffa:	900e      	str	r0, [sp, #56]	; 0x38
 8011ffc:	e7b5      	b.n	8011f6a <_dtoa_r+0x1aa>
 8011ffe:	f1ca 0300 	rsb	r3, sl, #0
 8012002:	9306      	str	r3, [sp, #24]
 8012004:	2300      	movs	r3, #0
 8012006:	eba8 080a 	sub.w	r8, r8, sl
 801200a:	930d      	str	r3, [sp, #52]	; 0x34
 801200c:	e7c2      	b.n	8011f94 <_dtoa_r+0x1d4>
 801200e:	2300      	movs	r3, #0
 8012010:	9308      	str	r3, [sp, #32]
 8012012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012014:	2b00      	cmp	r3, #0
 8012016:	dc39      	bgt.n	801208c <_dtoa_r+0x2cc>
 8012018:	f04f 0901 	mov.w	r9, #1
 801201c:	f8cd 9004 	str.w	r9, [sp, #4]
 8012020:	464b      	mov	r3, r9
 8012022:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8012026:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012028:	2200      	movs	r2, #0
 801202a:	6042      	str	r2, [r0, #4]
 801202c:	2204      	movs	r2, #4
 801202e:	f102 0614 	add.w	r6, r2, #20
 8012032:	429e      	cmp	r6, r3
 8012034:	6841      	ldr	r1, [r0, #4]
 8012036:	d92f      	bls.n	8012098 <_dtoa_r+0x2d8>
 8012038:	4620      	mov	r0, r4
 801203a:	f001 fa73 	bl	8013524 <_Balloc>
 801203e:	9000      	str	r0, [sp, #0]
 8012040:	2800      	cmp	r0, #0
 8012042:	d14b      	bne.n	80120dc <_dtoa_r+0x31c>
 8012044:	4b24      	ldr	r3, [pc, #144]	; (80120d8 <_dtoa_r+0x318>)
 8012046:	4602      	mov	r2, r0
 8012048:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801204c:	e6d1      	b.n	8011df2 <_dtoa_r+0x32>
 801204e:	2301      	movs	r3, #1
 8012050:	e7de      	b.n	8012010 <_dtoa_r+0x250>
 8012052:	2300      	movs	r3, #0
 8012054:	9308      	str	r3, [sp, #32]
 8012056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012058:	eb0a 0903 	add.w	r9, sl, r3
 801205c:	f109 0301 	add.w	r3, r9, #1
 8012060:	2b01      	cmp	r3, #1
 8012062:	9301      	str	r3, [sp, #4]
 8012064:	bfb8      	it	lt
 8012066:	2301      	movlt	r3, #1
 8012068:	e7dd      	b.n	8012026 <_dtoa_r+0x266>
 801206a:	2301      	movs	r3, #1
 801206c:	e7f2      	b.n	8012054 <_dtoa_r+0x294>
 801206e:	2501      	movs	r5, #1
 8012070:	2300      	movs	r3, #0
 8012072:	9305      	str	r3, [sp, #20]
 8012074:	9508      	str	r5, [sp, #32]
 8012076:	f04f 39ff 	mov.w	r9, #4294967295
 801207a:	2200      	movs	r2, #0
 801207c:	f8cd 9004 	str.w	r9, [sp, #4]
 8012080:	2312      	movs	r3, #18
 8012082:	9209      	str	r2, [sp, #36]	; 0x24
 8012084:	e7cf      	b.n	8012026 <_dtoa_r+0x266>
 8012086:	2301      	movs	r3, #1
 8012088:	9308      	str	r3, [sp, #32]
 801208a:	e7f4      	b.n	8012076 <_dtoa_r+0x2b6>
 801208c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012090:	f8cd 9004 	str.w	r9, [sp, #4]
 8012094:	464b      	mov	r3, r9
 8012096:	e7c6      	b.n	8012026 <_dtoa_r+0x266>
 8012098:	3101      	adds	r1, #1
 801209a:	6041      	str	r1, [r0, #4]
 801209c:	0052      	lsls	r2, r2, #1
 801209e:	e7c6      	b.n	801202e <_dtoa_r+0x26e>
 80120a0:	636f4361 	.word	0x636f4361
 80120a4:	3fd287a7 	.word	0x3fd287a7
 80120a8:	8b60c8b3 	.word	0x8b60c8b3
 80120ac:	3fc68a28 	.word	0x3fc68a28
 80120b0:	509f79fb 	.word	0x509f79fb
 80120b4:	3fd34413 	.word	0x3fd34413
 80120b8:	0801640d 	.word	0x0801640d
 80120bc:	08016424 	.word	0x08016424
 80120c0:	7ff00000 	.word	0x7ff00000
 80120c4:	08016409 	.word	0x08016409
 80120c8:	08016400 	.word	0x08016400
 80120cc:	08016386 	.word	0x08016386
 80120d0:	3ff80000 	.word	0x3ff80000
 80120d4:	08016600 	.word	0x08016600
 80120d8:	08016483 	.word	0x08016483
 80120dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80120de:	9a00      	ldr	r2, [sp, #0]
 80120e0:	601a      	str	r2, [r3, #0]
 80120e2:	9b01      	ldr	r3, [sp, #4]
 80120e4:	2b0e      	cmp	r3, #14
 80120e6:	f200 80ad 	bhi.w	8012244 <_dtoa_r+0x484>
 80120ea:	2d00      	cmp	r5, #0
 80120ec:	f000 80aa 	beq.w	8012244 <_dtoa_r+0x484>
 80120f0:	f1ba 0f00 	cmp.w	sl, #0
 80120f4:	dd36      	ble.n	8012164 <_dtoa_r+0x3a4>
 80120f6:	4ac3      	ldr	r2, [pc, #780]	; (8012404 <_dtoa_r+0x644>)
 80120f8:	f00a 030f 	and.w	r3, sl, #15
 80120fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012100:	ed93 7b00 	vldr	d7, [r3]
 8012104:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8012108:	ea4f 172a 	mov.w	r7, sl, asr #4
 801210c:	eeb0 8a47 	vmov.f32	s16, s14
 8012110:	eef0 8a67 	vmov.f32	s17, s15
 8012114:	d016      	beq.n	8012144 <_dtoa_r+0x384>
 8012116:	4bbc      	ldr	r3, [pc, #752]	; (8012408 <_dtoa_r+0x648>)
 8012118:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801211c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012120:	f7ee fb9c 	bl	800085c <__aeabi_ddiv>
 8012124:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012128:	f007 070f 	and.w	r7, r7, #15
 801212c:	2503      	movs	r5, #3
 801212e:	4eb6      	ldr	r6, [pc, #728]	; (8012408 <_dtoa_r+0x648>)
 8012130:	b957      	cbnz	r7, 8012148 <_dtoa_r+0x388>
 8012132:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012136:	ec53 2b18 	vmov	r2, r3, d8
 801213a:	f7ee fb8f 	bl	800085c <__aeabi_ddiv>
 801213e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012142:	e029      	b.n	8012198 <_dtoa_r+0x3d8>
 8012144:	2502      	movs	r5, #2
 8012146:	e7f2      	b.n	801212e <_dtoa_r+0x36e>
 8012148:	07f9      	lsls	r1, r7, #31
 801214a:	d508      	bpl.n	801215e <_dtoa_r+0x39e>
 801214c:	ec51 0b18 	vmov	r0, r1, d8
 8012150:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012154:	f7ee fa58 	bl	8000608 <__aeabi_dmul>
 8012158:	ec41 0b18 	vmov	d8, r0, r1
 801215c:	3501      	adds	r5, #1
 801215e:	107f      	asrs	r7, r7, #1
 8012160:	3608      	adds	r6, #8
 8012162:	e7e5      	b.n	8012130 <_dtoa_r+0x370>
 8012164:	f000 80a6 	beq.w	80122b4 <_dtoa_r+0x4f4>
 8012168:	f1ca 0600 	rsb	r6, sl, #0
 801216c:	4ba5      	ldr	r3, [pc, #660]	; (8012404 <_dtoa_r+0x644>)
 801216e:	4fa6      	ldr	r7, [pc, #664]	; (8012408 <_dtoa_r+0x648>)
 8012170:	f006 020f 	and.w	r2, r6, #15
 8012174:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801217c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012180:	f7ee fa42 	bl	8000608 <__aeabi_dmul>
 8012184:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012188:	1136      	asrs	r6, r6, #4
 801218a:	2300      	movs	r3, #0
 801218c:	2502      	movs	r5, #2
 801218e:	2e00      	cmp	r6, #0
 8012190:	f040 8085 	bne.w	801229e <_dtoa_r+0x4de>
 8012194:	2b00      	cmp	r3, #0
 8012196:	d1d2      	bne.n	801213e <_dtoa_r+0x37e>
 8012198:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801219a:	2b00      	cmp	r3, #0
 801219c:	f000 808c 	beq.w	80122b8 <_dtoa_r+0x4f8>
 80121a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80121a4:	4b99      	ldr	r3, [pc, #612]	; (801240c <_dtoa_r+0x64c>)
 80121a6:	2200      	movs	r2, #0
 80121a8:	4630      	mov	r0, r6
 80121aa:	4639      	mov	r1, r7
 80121ac:	f7ee fc9e 	bl	8000aec <__aeabi_dcmplt>
 80121b0:	2800      	cmp	r0, #0
 80121b2:	f000 8081 	beq.w	80122b8 <_dtoa_r+0x4f8>
 80121b6:	9b01      	ldr	r3, [sp, #4]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d07d      	beq.n	80122b8 <_dtoa_r+0x4f8>
 80121bc:	f1b9 0f00 	cmp.w	r9, #0
 80121c0:	dd3c      	ble.n	801223c <_dtoa_r+0x47c>
 80121c2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80121c6:	9307      	str	r3, [sp, #28]
 80121c8:	2200      	movs	r2, #0
 80121ca:	4b91      	ldr	r3, [pc, #580]	; (8012410 <_dtoa_r+0x650>)
 80121cc:	4630      	mov	r0, r6
 80121ce:	4639      	mov	r1, r7
 80121d0:	f7ee fa1a 	bl	8000608 <__aeabi_dmul>
 80121d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80121d8:	3501      	adds	r5, #1
 80121da:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80121de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80121e2:	4628      	mov	r0, r5
 80121e4:	f7ee f9a6 	bl	8000534 <__aeabi_i2d>
 80121e8:	4632      	mov	r2, r6
 80121ea:	463b      	mov	r3, r7
 80121ec:	f7ee fa0c 	bl	8000608 <__aeabi_dmul>
 80121f0:	4b88      	ldr	r3, [pc, #544]	; (8012414 <_dtoa_r+0x654>)
 80121f2:	2200      	movs	r2, #0
 80121f4:	f7ee f852 	bl	800029c <__adddf3>
 80121f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80121fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012200:	9303      	str	r3, [sp, #12]
 8012202:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012204:	2b00      	cmp	r3, #0
 8012206:	d15c      	bne.n	80122c2 <_dtoa_r+0x502>
 8012208:	4b83      	ldr	r3, [pc, #524]	; (8012418 <_dtoa_r+0x658>)
 801220a:	2200      	movs	r2, #0
 801220c:	4630      	mov	r0, r6
 801220e:	4639      	mov	r1, r7
 8012210:	f7ee f842 	bl	8000298 <__aeabi_dsub>
 8012214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012218:	4606      	mov	r6, r0
 801221a:	460f      	mov	r7, r1
 801221c:	f7ee fc84 	bl	8000b28 <__aeabi_dcmpgt>
 8012220:	2800      	cmp	r0, #0
 8012222:	f040 8296 	bne.w	8012752 <_dtoa_r+0x992>
 8012226:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801222a:	4630      	mov	r0, r6
 801222c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012230:	4639      	mov	r1, r7
 8012232:	f7ee fc5b 	bl	8000aec <__aeabi_dcmplt>
 8012236:	2800      	cmp	r0, #0
 8012238:	f040 8288 	bne.w	801274c <_dtoa_r+0x98c>
 801223c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012240:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012244:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012246:	2b00      	cmp	r3, #0
 8012248:	f2c0 8158 	blt.w	80124fc <_dtoa_r+0x73c>
 801224c:	f1ba 0f0e 	cmp.w	sl, #14
 8012250:	f300 8154 	bgt.w	80124fc <_dtoa_r+0x73c>
 8012254:	4b6b      	ldr	r3, [pc, #428]	; (8012404 <_dtoa_r+0x644>)
 8012256:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801225a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801225e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012260:	2b00      	cmp	r3, #0
 8012262:	f280 80e3 	bge.w	801242c <_dtoa_r+0x66c>
 8012266:	9b01      	ldr	r3, [sp, #4]
 8012268:	2b00      	cmp	r3, #0
 801226a:	f300 80df 	bgt.w	801242c <_dtoa_r+0x66c>
 801226e:	f040 826d 	bne.w	801274c <_dtoa_r+0x98c>
 8012272:	4b69      	ldr	r3, [pc, #420]	; (8012418 <_dtoa_r+0x658>)
 8012274:	2200      	movs	r2, #0
 8012276:	4640      	mov	r0, r8
 8012278:	4649      	mov	r1, r9
 801227a:	f7ee f9c5 	bl	8000608 <__aeabi_dmul>
 801227e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012282:	f7ee fc47 	bl	8000b14 <__aeabi_dcmpge>
 8012286:	9e01      	ldr	r6, [sp, #4]
 8012288:	4637      	mov	r7, r6
 801228a:	2800      	cmp	r0, #0
 801228c:	f040 8243 	bne.w	8012716 <_dtoa_r+0x956>
 8012290:	9d00      	ldr	r5, [sp, #0]
 8012292:	2331      	movs	r3, #49	; 0x31
 8012294:	f805 3b01 	strb.w	r3, [r5], #1
 8012298:	f10a 0a01 	add.w	sl, sl, #1
 801229c:	e23f      	b.n	801271e <_dtoa_r+0x95e>
 801229e:	07f2      	lsls	r2, r6, #31
 80122a0:	d505      	bpl.n	80122ae <_dtoa_r+0x4ee>
 80122a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80122a6:	f7ee f9af 	bl	8000608 <__aeabi_dmul>
 80122aa:	3501      	adds	r5, #1
 80122ac:	2301      	movs	r3, #1
 80122ae:	1076      	asrs	r6, r6, #1
 80122b0:	3708      	adds	r7, #8
 80122b2:	e76c      	b.n	801218e <_dtoa_r+0x3ce>
 80122b4:	2502      	movs	r5, #2
 80122b6:	e76f      	b.n	8012198 <_dtoa_r+0x3d8>
 80122b8:	9b01      	ldr	r3, [sp, #4]
 80122ba:	f8cd a01c 	str.w	sl, [sp, #28]
 80122be:	930c      	str	r3, [sp, #48]	; 0x30
 80122c0:	e78d      	b.n	80121de <_dtoa_r+0x41e>
 80122c2:	9900      	ldr	r1, [sp, #0]
 80122c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80122c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80122c8:	4b4e      	ldr	r3, [pc, #312]	; (8012404 <_dtoa_r+0x644>)
 80122ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 80122ce:	4401      	add	r1, r0
 80122d0:	9102      	str	r1, [sp, #8]
 80122d2:	9908      	ldr	r1, [sp, #32]
 80122d4:	eeb0 8a47 	vmov.f32	s16, s14
 80122d8:	eef0 8a67 	vmov.f32	s17, s15
 80122dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80122e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80122e4:	2900      	cmp	r1, #0
 80122e6:	d045      	beq.n	8012374 <_dtoa_r+0x5b4>
 80122e8:	494c      	ldr	r1, [pc, #304]	; (801241c <_dtoa_r+0x65c>)
 80122ea:	2000      	movs	r0, #0
 80122ec:	f7ee fab6 	bl	800085c <__aeabi_ddiv>
 80122f0:	ec53 2b18 	vmov	r2, r3, d8
 80122f4:	f7ed ffd0 	bl	8000298 <__aeabi_dsub>
 80122f8:	9d00      	ldr	r5, [sp, #0]
 80122fa:	ec41 0b18 	vmov	d8, r0, r1
 80122fe:	4639      	mov	r1, r7
 8012300:	4630      	mov	r0, r6
 8012302:	f7ee fc31 	bl	8000b68 <__aeabi_d2iz>
 8012306:	900c      	str	r0, [sp, #48]	; 0x30
 8012308:	f7ee f914 	bl	8000534 <__aeabi_i2d>
 801230c:	4602      	mov	r2, r0
 801230e:	460b      	mov	r3, r1
 8012310:	4630      	mov	r0, r6
 8012312:	4639      	mov	r1, r7
 8012314:	f7ed ffc0 	bl	8000298 <__aeabi_dsub>
 8012318:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801231a:	3330      	adds	r3, #48	; 0x30
 801231c:	f805 3b01 	strb.w	r3, [r5], #1
 8012320:	ec53 2b18 	vmov	r2, r3, d8
 8012324:	4606      	mov	r6, r0
 8012326:	460f      	mov	r7, r1
 8012328:	f7ee fbe0 	bl	8000aec <__aeabi_dcmplt>
 801232c:	2800      	cmp	r0, #0
 801232e:	d165      	bne.n	80123fc <_dtoa_r+0x63c>
 8012330:	4632      	mov	r2, r6
 8012332:	463b      	mov	r3, r7
 8012334:	4935      	ldr	r1, [pc, #212]	; (801240c <_dtoa_r+0x64c>)
 8012336:	2000      	movs	r0, #0
 8012338:	f7ed ffae 	bl	8000298 <__aeabi_dsub>
 801233c:	ec53 2b18 	vmov	r2, r3, d8
 8012340:	f7ee fbd4 	bl	8000aec <__aeabi_dcmplt>
 8012344:	2800      	cmp	r0, #0
 8012346:	f040 80b9 	bne.w	80124bc <_dtoa_r+0x6fc>
 801234a:	9b02      	ldr	r3, [sp, #8]
 801234c:	429d      	cmp	r5, r3
 801234e:	f43f af75 	beq.w	801223c <_dtoa_r+0x47c>
 8012352:	4b2f      	ldr	r3, [pc, #188]	; (8012410 <_dtoa_r+0x650>)
 8012354:	ec51 0b18 	vmov	r0, r1, d8
 8012358:	2200      	movs	r2, #0
 801235a:	f7ee f955 	bl	8000608 <__aeabi_dmul>
 801235e:	4b2c      	ldr	r3, [pc, #176]	; (8012410 <_dtoa_r+0x650>)
 8012360:	ec41 0b18 	vmov	d8, r0, r1
 8012364:	2200      	movs	r2, #0
 8012366:	4630      	mov	r0, r6
 8012368:	4639      	mov	r1, r7
 801236a:	f7ee f94d 	bl	8000608 <__aeabi_dmul>
 801236e:	4606      	mov	r6, r0
 8012370:	460f      	mov	r7, r1
 8012372:	e7c4      	b.n	80122fe <_dtoa_r+0x53e>
 8012374:	ec51 0b17 	vmov	r0, r1, d7
 8012378:	f7ee f946 	bl	8000608 <__aeabi_dmul>
 801237c:	9b02      	ldr	r3, [sp, #8]
 801237e:	9d00      	ldr	r5, [sp, #0]
 8012380:	930c      	str	r3, [sp, #48]	; 0x30
 8012382:	ec41 0b18 	vmov	d8, r0, r1
 8012386:	4639      	mov	r1, r7
 8012388:	4630      	mov	r0, r6
 801238a:	f7ee fbed 	bl	8000b68 <__aeabi_d2iz>
 801238e:	9011      	str	r0, [sp, #68]	; 0x44
 8012390:	f7ee f8d0 	bl	8000534 <__aeabi_i2d>
 8012394:	4602      	mov	r2, r0
 8012396:	460b      	mov	r3, r1
 8012398:	4630      	mov	r0, r6
 801239a:	4639      	mov	r1, r7
 801239c:	f7ed ff7c 	bl	8000298 <__aeabi_dsub>
 80123a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80123a2:	3330      	adds	r3, #48	; 0x30
 80123a4:	f805 3b01 	strb.w	r3, [r5], #1
 80123a8:	9b02      	ldr	r3, [sp, #8]
 80123aa:	429d      	cmp	r5, r3
 80123ac:	4606      	mov	r6, r0
 80123ae:	460f      	mov	r7, r1
 80123b0:	f04f 0200 	mov.w	r2, #0
 80123b4:	d134      	bne.n	8012420 <_dtoa_r+0x660>
 80123b6:	4b19      	ldr	r3, [pc, #100]	; (801241c <_dtoa_r+0x65c>)
 80123b8:	ec51 0b18 	vmov	r0, r1, d8
 80123bc:	f7ed ff6e 	bl	800029c <__adddf3>
 80123c0:	4602      	mov	r2, r0
 80123c2:	460b      	mov	r3, r1
 80123c4:	4630      	mov	r0, r6
 80123c6:	4639      	mov	r1, r7
 80123c8:	f7ee fbae 	bl	8000b28 <__aeabi_dcmpgt>
 80123cc:	2800      	cmp	r0, #0
 80123ce:	d175      	bne.n	80124bc <_dtoa_r+0x6fc>
 80123d0:	ec53 2b18 	vmov	r2, r3, d8
 80123d4:	4911      	ldr	r1, [pc, #68]	; (801241c <_dtoa_r+0x65c>)
 80123d6:	2000      	movs	r0, #0
 80123d8:	f7ed ff5e 	bl	8000298 <__aeabi_dsub>
 80123dc:	4602      	mov	r2, r0
 80123de:	460b      	mov	r3, r1
 80123e0:	4630      	mov	r0, r6
 80123e2:	4639      	mov	r1, r7
 80123e4:	f7ee fb82 	bl	8000aec <__aeabi_dcmplt>
 80123e8:	2800      	cmp	r0, #0
 80123ea:	f43f af27 	beq.w	801223c <_dtoa_r+0x47c>
 80123ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80123f0:	1e6b      	subs	r3, r5, #1
 80123f2:	930c      	str	r3, [sp, #48]	; 0x30
 80123f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80123f8:	2b30      	cmp	r3, #48	; 0x30
 80123fa:	d0f8      	beq.n	80123ee <_dtoa_r+0x62e>
 80123fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012400:	e04a      	b.n	8012498 <_dtoa_r+0x6d8>
 8012402:	bf00      	nop
 8012404:	08016600 	.word	0x08016600
 8012408:	080165d8 	.word	0x080165d8
 801240c:	3ff00000 	.word	0x3ff00000
 8012410:	40240000 	.word	0x40240000
 8012414:	401c0000 	.word	0x401c0000
 8012418:	40140000 	.word	0x40140000
 801241c:	3fe00000 	.word	0x3fe00000
 8012420:	4baf      	ldr	r3, [pc, #700]	; (80126e0 <_dtoa_r+0x920>)
 8012422:	f7ee f8f1 	bl	8000608 <__aeabi_dmul>
 8012426:	4606      	mov	r6, r0
 8012428:	460f      	mov	r7, r1
 801242a:	e7ac      	b.n	8012386 <_dtoa_r+0x5c6>
 801242c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012430:	9d00      	ldr	r5, [sp, #0]
 8012432:	4642      	mov	r2, r8
 8012434:	464b      	mov	r3, r9
 8012436:	4630      	mov	r0, r6
 8012438:	4639      	mov	r1, r7
 801243a:	f7ee fa0f 	bl	800085c <__aeabi_ddiv>
 801243e:	f7ee fb93 	bl	8000b68 <__aeabi_d2iz>
 8012442:	9002      	str	r0, [sp, #8]
 8012444:	f7ee f876 	bl	8000534 <__aeabi_i2d>
 8012448:	4642      	mov	r2, r8
 801244a:	464b      	mov	r3, r9
 801244c:	f7ee f8dc 	bl	8000608 <__aeabi_dmul>
 8012450:	4602      	mov	r2, r0
 8012452:	460b      	mov	r3, r1
 8012454:	4630      	mov	r0, r6
 8012456:	4639      	mov	r1, r7
 8012458:	f7ed ff1e 	bl	8000298 <__aeabi_dsub>
 801245c:	9e02      	ldr	r6, [sp, #8]
 801245e:	9f01      	ldr	r7, [sp, #4]
 8012460:	3630      	adds	r6, #48	; 0x30
 8012462:	f805 6b01 	strb.w	r6, [r5], #1
 8012466:	9e00      	ldr	r6, [sp, #0]
 8012468:	1bae      	subs	r6, r5, r6
 801246a:	42b7      	cmp	r7, r6
 801246c:	4602      	mov	r2, r0
 801246e:	460b      	mov	r3, r1
 8012470:	d137      	bne.n	80124e2 <_dtoa_r+0x722>
 8012472:	f7ed ff13 	bl	800029c <__adddf3>
 8012476:	4642      	mov	r2, r8
 8012478:	464b      	mov	r3, r9
 801247a:	4606      	mov	r6, r0
 801247c:	460f      	mov	r7, r1
 801247e:	f7ee fb53 	bl	8000b28 <__aeabi_dcmpgt>
 8012482:	b9c8      	cbnz	r0, 80124b8 <_dtoa_r+0x6f8>
 8012484:	4642      	mov	r2, r8
 8012486:	464b      	mov	r3, r9
 8012488:	4630      	mov	r0, r6
 801248a:	4639      	mov	r1, r7
 801248c:	f7ee fb24 	bl	8000ad8 <__aeabi_dcmpeq>
 8012490:	b110      	cbz	r0, 8012498 <_dtoa_r+0x6d8>
 8012492:	9b02      	ldr	r3, [sp, #8]
 8012494:	07d9      	lsls	r1, r3, #31
 8012496:	d40f      	bmi.n	80124b8 <_dtoa_r+0x6f8>
 8012498:	4620      	mov	r0, r4
 801249a:	4659      	mov	r1, fp
 801249c:	f001 f882 	bl	80135a4 <_Bfree>
 80124a0:	2300      	movs	r3, #0
 80124a2:	702b      	strb	r3, [r5, #0]
 80124a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80124a6:	f10a 0001 	add.w	r0, sl, #1
 80124aa:	6018      	str	r0, [r3, #0]
 80124ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	f43f acd8 	beq.w	8011e64 <_dtoa_r+0xa4>
 80124b4:	601d      	str	r5, [r3, #0]
 80124b6:	e4d5      	b.n	8011e64 <_dtoa_r+0xa4>
 80124b8:	f8cd a01c 	str.w	sl, [sp, #28]
 80124bc:	462b      	mov	r3, r5
 80124be:	461d      	mov	r5, r3
 80124c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80124c4:	2a39      	cmp	r2, #57	; 0x39
 80124c6:	d108      	bne.n	80124da <_dtoa_r+0x71a>
 80124c8:	9a00      	ldr	r2, [sp, #0]
 80124ca:	429a      	cmp	r2, r3
 80124cc:	d1f7      	bne.n	80124be <_dtoa_r+0x6fe>
 80124ce:	9a07      	ldr	r2, [sp, #28]
 80124d0:	9900      	ldr	r1, [sp, #0]
 80124d2:	3201      	adds	r2, #1
 80124d4:	9207      	str	r2, [sp, #28]
 80124d6:	2230      	movs	r2, #48	; 0x30
 80124d8:	700a      	strb	r2, [r1, #0]
 80124da:	781a      	ldrb	r2, [r3, #0]
 80124dc:	3201      	adds	r2, #1
 80124de:	701a      	strb	r2, [r3, #0]
 80124e0:	e78c      	b.n	80123fc <_dtoa_r+0x63c>
 80124e2:	4b7f      	ldr	r3, [pc, #508]	; (80126e0 <_dtoa_r+0x920>)
 80124e4:	2200      	movs	r2, #0
 80124e6:	f7ee f88f 	bl	8000608 <__aeabi_dmul>
 80124ea:	2200      	movs	r2, #0
 80124ec:	2300      	movs	r3, #0
 80124ee:	4606      	mov	r6, r0
 80124f0:	460f      	mov	r7, r1
 80124f2:	f7ee faf1 	bl	8000ad8 <__aeabi_dcmpeq>
 80124f6:	2800      	cmp	r0, #0
 80124f8:	d09b      	beq.n	8012432 <_dtoa_r+0x672>
 80124fa:	e7cd      	b.n	8012498 <_dtoa_r+0x6d8>
 80124fc:	9a08      	ldr	r2, [sp, #32]
 80124fe:	2a00      	cmp	r2, #0
 8012500:	f000 80c4 	beq.w	801268c <_dtoa_r+0x8cc>
 8012504:	9a05      	ldr	r2, [sp, #20]
 8012506:	2a01      	cmp	r2, #1
 8012508:	f300 80a8 	bgt.w	801265c <_dtoa_r+0x89c>
 801250c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801250e:	2a00      	cmp	r2, #0
 8012510:	f000 80a0 	beq.w	8012654 <_dtoa_r+0x894>
 8012514:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012518:	9e06      	ldr	r6, [sp, #24]
 801251a:	4645      	mov	r5, r8
 801251c:	9a04      	ldr	r2, [sp, #16]
 801251e:	2101      	movs	r1, #1
 8012520:	441a      	add	r2, r3
 8012522:	4620      	mov	r0, r4
 8012524:	4498      	add	r8, r3
 8012526:	9204      	str	r2, [sp, #16]
 8012528:	f001 f942 	bl	80137b0 <__i2b>
 801252c:	4607      	mov	r7, r0
 801252e:	2d00      	cmp	r5, #0
 8012530:	dd0b      	ble.n	801254a <_dtoa_r+0x78a>
 8012532:	9b04      	ldr	r3, [sp, #16]
 8012534:	2b00      	cmp	r3, #0
 8012536:	dd08      	ble.n	801254a <_dtoa_r+0x78a>
 8012538:	42ab      	cmp	r3, r5
 801253a:	9a04      	ldr	r2, [sp, #16]
 801253c:	bfa8      	it	ge
 801253e:	462b      	movge	r3, r5
 8012540:	eba8 0803 	sub.w	r8, r8, r3
 8012544:	1aed      	subs	r5, r5, r3
 8012546:	1ad3      	subs	r3, r2, r3
 8012548:	9304      	str	r3, [sp, #16]
 801254a:	9b06      	ldr	r3, [sp, #24]
 801254c:	b1fb      	cbz	r3, 801258e <_dtoa_r+0x7ce>
 801254e:	9b08      	ldr	r3, [sp, #32]
 8012550:	2b00      	cmp	r3, #0
 8012552:	f000 809f 	beq.w	8012694 <_dtoa_r+0x8d4>
 8012556:	2e00      	cmp	r6, #0
 8012558:	dd11      	ble.n	801257e <_dtoa_r+0x7be>
 801255a:	4639      	mov	r1, r7
 801255c:	4632      	mov	r2, r6
 801255e:	4620      	mov	r0, r4
 8012560:	f001 f9e2 	bl	8013928 <__pow5mult>
 8012564:	465a      	mov	r2, fp
 8012566:	4601      	mov	r1, r0
 8012568:	4607      	mov	r7, r0
 801256a:	4620      	mov	r0, r4
 801256c:	f001 f936 	bl	80137dc <__multiply>
 8012570:	4659      	mov	r1, fp
 8012572:	9007      	str	r0, [sp, #28]
 8012574:	4620      	mov	r0, r4
 8012576:	f001 f815 	bl	80135a4 <_Bfree>
 801257a:	9b07      	ldr	r3, [sp, #28]
 801257c:	469b      	mov	fp, r3
 801257e:	9b06      	ldr	r3, [sp, #24]
 8012580:	1b9a      	subs	r2, r3, r6
 8012582:	d004      	beq.n	801258e <_dtoa_r+0x7ce>
 8012584:	4659      	mov	r1, fp
 8012586:	4620      	mov	r0, r4
 8012588:	f001 f9ce 	bl	8013928 <__pow5mult>
 801258c:	4683      	mov	fp, r0
 801258e:	2101      	movs	r1, #1
 8012590:	4620      	mov	r0, r4
 8012592:	f001 f90d 	bl	80137b0 <__i2b>
 8012596:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012598:	2b00      	cmp	r3, #0
 801259a:	4606      	mov	r6, r0
 801259c:	dd7c      	ble.n	8012698 <_dtoa_r+0x8d8>
 801259e:	461a      	mov	r2, r3
 80125a0:	4601      	mov	r1, r0
 80125a2:	4620      	mov	r0, r4
 80125a4:	f001 f9c0 	bl	8013928 <__pow5mult>
 80125a8:	9b05      	ldr	r3, [sp, #20]
 80125aa:	2b01      	cmp	r3, #1
 80125ac:	4606      	mov	r6, r0
 80125ae:	dd76      	ble.n	801269e <_dtoa_r+0x8de>
 80125b0:	2300      	movs	r3, #0
 80125b2:	9306      	str	r3, [sp, #24]
 80125b4:	6933      	ldr	r3, [r6, #16]
 80125b6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80125ba:	6918      	ldr	r0, [r3, #16]
 80125bc:	f001 f8a8 	bl	8013710 <__hi0bits>
 80125c0:	f1c0 0020 	rsb	r0, r0, #32
 80125c4:	9b04      	ldr	r3, [sp, #16]
 80125c6:	4418      	add	r0, r3
 80125c8:	f010 001f 	ands.w	r0, r0, #31
 80125cc:	f000 8086 	beq.w	80126dc <_dtoa_r+0x91c>
 80125d0:	f1c0 0320 	rsb	r3, r0, #32
 80125d4:	2b04      	cmp	r3, #4
 80125d6:	dd7f      	ble.n	80126d8 <_dtoa_r+0x918>
 80125d8:	f1c0 001c 	rsb	r0, r0, #28
 80125dc:	9b04      	ldr	r3, [sp, #16]
 80125de:	4403      	add	r3, r0
 80125e0:	4480      	add	r8, r0
 80125e2:	4405      	add	r5, r0
 80125e4:	9304      	str	r3, [sp, #16]
 80125e6:	f1b8 0f00 	cmp.w	r8, #0
 80125ea:	dd05      	ble.n	80125f8 <_dtoa_r+0x838>
 80125ec:	4659      	mov	r1, fp
 80125ee:	4642      	mov	r2, r8
 80125f0:	4620      	mov	r0, r4
 80125f2:	f001 f9f3 	bl	80139dc <__lshift>
 80125f6:	4683      	mov	fp, r0
 80125f8:	9b04      	ldr	r3, [sp, #16]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	dd05      	ble.n	801260a <_dtoa_r+0x84a>
 80125fe:	4631      	mov	r1, r6
 8012600:	461a      	mov	r2, r3
 8012602:	4620      	mov	r0, r4
 8012604:	f001 f9ea 	bl	80139dc <__lshift>
 8012608:	4606      	mov	r6, r0
 801260a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801260c:	2b00      	cmp	r3, #0
 801260e:	d069      	beq.n	80126e4 <_dtoa_r+0x924>
 8012610:	4631      	mov	r1, r6
 8012612:	4658      	mov	r0, fp
 8012614:	f001 fa4e 	bl	8013ab4 <__mcmp>
 8012618:	2800      	cmp	r0, #0
 801261a:	da63      	bge.n	80126e4 <_dtoa_r+0x924>
 801261c:	2300      	movs	r3, #0
 801261e:	4659      	mov	r1, fp
 8012620:	220a      	movs	r2, #10
 8012622:	4620      	mov	r0, r4
 8012624:	f000 ffe0 	bl	80135e8 <__multadd>
 8012628:	9b08      	ldr	r3, [sp, #32]
 801262a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801262e:	4683      	mov	fp, r0
 8012630:	2b00      	cmp	r3, #0
 8012632:	f000 818f 	beq.w	8012954 <_dtoa_r+0xb94>
 8012636:	4639      	mov	r1, r7
 8012638:	2300      	movs	r3, #0
 801263a:	220a      	movs	r2, #10
 801263c:	4620      	mov	r0, r4
 801263e:	f000 ffd3 	bl	80135e8 <__multadd>
 8012642:	f1b9 0f00 	cmp.w	r9, #0
 8012646:	4607      	mov	r7, r0
 8012648:	f300 808e 	bgt.w	8012768 <_dtoa_r+0x9a8>
 801264c:	9b05      	ldr	r3, [sp, #20]
 801264e:	2b02      	cmp	r3, #2
 8012650:	dc50      	bgt.n	80126f4 <_dtoa_r+0x934>
 8012652:	e089      	b.n	8012768 <_dtoa_r+0x9a8>
 8012654:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012656:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801265a:	e75d      	b.n	8012518 <_dtoa_r+0x758>
 801265c:	9b01      	ldr	r3, [sp, #4]
 801265e:	1e5e      	subs	r6, r3, #1
 8012660:	9b06      	ldr	r3, [sp, #24]
 8012662:	42b3      	cmp	r3, r6
 8012664:	bfbf      	itttt	lt
 8012666:	9b06      	ldrlt	r3, [sp, #24]
 8012668:	9606      	strlt	r6, [sp, #24]
 801266a:	1af2      	sublt	r2, r6, r3
 801266c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801266e:	bfb6      	itet	lt
 8012670:	189b      	addlt	r3, r3, r2
 8012672:	1b9e      	subge	r6, r3, r6
 8012674:	930d      	strlt	r3, [sp, #52]	; 0x34
 8012676:	9b01      	ldr	r3, [sp, #4]
 8012678:	bfb8      	it	lt
 801267a:	2600      	movlt	r6, #0
 801267c:	2b00      	cmp	r3, #0
 801267e:	bfb5      	itete	lt
 8012680:	eba8 0503 	sublt.w	r5, r8, r3
 8012684:	9b01      	ldrge	r3, [sp, #4]
 8012686:	2300      	movlt	r3, #0
 8012688:	4645      	movge	r5, r8
 801268a:	e747      	b.n	801251c <_dtoa_r+0x75c>
 801268c:	9e06      	ldr	r6, [sp, #24]
 801268e:	9f08      	ldr	r7, [sp, #32]
 8012690:	4645      	mov	r5, r8
 8012692:	e74c      	b.n	801252e <_dtoa_r+0x76e>
 8012694:	9a06      	ldr	r2, [sp, #24]
 8012696:	e775      	b.n	8012584 <_dtoa_r+0x7c4>
 8012698:	9b05      	ldr	r3, [sp, #20]
 801269a:	2b01      	cmp	r3, #1
 801269c:	dc18      	bgt.n	80126d0 <_dtoa_r+0x910>
 801269e:	9b02      	ldr	r3, [sp, #8]
 80126a0:	b9b3      	cbnz	r3, 80126d0 <_dtoa_r+0x910>
 80126a2:	9b03      	ldr	r3, [sp, #12]
 80126a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80126a8:	b9a3      	cbnz	r3, 80126d4 <_dtoa_r+0x914>
 80126aa:	9b03      	ldr	r3, [sp, #12]
 80126ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80126b0:	0d1b      	lsrs	r3, r3, #20
 80126b2:	051b      	lsls	r3, r3, #20
 80126b4:	b12b      	cbz	r3, 80126c2 <_dtoa_r+0x902>
 80126b6:	9b04      	ldr	r3, [sp, #16]
 80126b8:	3301      	adds	r3, #1
 80126ba:	9304      	str	r3, [sp, #16]
 80126bc:	f108 0801 	add.w	r8, r8, #1
 80126c0:	2301      	movs	r3, #1
 80126c2:	9306      	str	r3, [sp, #24]
 80126c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	f47f af74 	bne.w	80125b4 <_dtoa_r+0x7f4>
 80126cc:	2001      	movs	r0, #1
 80126ce:	e779      	b.n	80125c4 <_dtoa_r+0x804>
 80126d0:	2300      	movs	r3, #0
 80126d2:	e7f6      	b.n	80126c2 <_dtoa_r+0x902>
 80126d4:	9b02      	ldr	r3, [sp, #8]
 80126d6:	e7f4      	b.n	80126c2 <_dtoa_r+0x902>
 80126d8:	d085      	beq.n	80125e6 <_dtoa_r+0x826>
 80126da:	4618      	mov	r0, r3
 80126dc:	301c      	adds	r0, #28
 80126de:	e77d      	b.n	80125dc <_dtoa_r+0x81c>
 80126e0:	40240000 	.word	0x40240000
 80126e4:	9b01      	ldr	r3, [sp, #4]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	dc38      	bgt.n	801275c <_dtoa_r+0x99c>
 80126ea:	9b05      	ldr	r3, [sp, #20]
 80126ec:	2b02      	cmp	r3, #2
 80126ee:	dd35      	ble.n	801275c <_dtoa_r+0x99c>
 80126f0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80126f4:	f1b9 0f00 	cmp.w	r9, #0
 80126f8:	d10d      	bne.n	8012716 <_dtoa_r+0x956>
 80126fa:	4631      	mov	r1, r6
 80126fc:	464b      	mov	r3, r9
 80126fe:	2205      	movs	r2, #5
 8012700:	4620      	mov	r0, r4
 8012702:	f000 ff71 	bl	80135e8 <__multadd>
 8012706:	4601      	mov	r1, r0
 8012708:	4606      	mov	r6, r0
 801270a:	4658      	mov	r0, fp
 801270c:	f001 f9d2 	bl	8013ab4 <__mcmp>
 8012710:	2800      	cmp	r0, #0
 8012712:	f73f adbd 	bgt.w	8012290 <_dtoa_r+0x4d0>
 8012716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012718:	9d00      	ldr	r5, [sp, #0]
 801271a:	ea6f 0a03 	mvn.w	sl, r3
 801271e:	f04f 0800 	mov.w	r8, #0
 8012722:	4631      	mov	r1, r6
 8012724:	4620      	mov	r0, r4
 8012726:	f000 ff3d 	bl	80135a4 <_Bfree>
 801272a:	2f00      	cmp	r7, #0
 801272c:	f43f aeb4 	beq.w	8012498 <_dtoa_r+0x6d8>
 8012730:	f1b8 0f00 	cmp.w	r8, #0
 8012734:	d005      	beq.n	8012742 <_dtoa_r+0x982>
 8012736:	45b8      	cmp	r8, r7
 8012738:	d003      	beq.n	8012742 <_dtoa_r+0x982>
 801273a:	4641      	mov	r1, r8
 801273c:	4620      	mov	r0, r4
 801273e:	f000 ff31 	bl	80135a4 <_Bfree>
 8012742:	4639      	mov	r1, r7
 8012744:	4620      	mov	r0, r4
 8012746:	f000 ff2d 	bl	80135a4 <_Bfree>
 801274a:	e6a5      	b.n	8012498 <_dtoa_r+0x6d8>
 801274c:	2600      	movs	r6, #0
 801274e:	4637      	mov	r7, r6
 8012750:	e7e1      	b.n	8012716 <_dtoa_r+0x956>
 8012752:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012754:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012758:	4637      	mov	r7, r6
 801275a:	e599      	b.n	8012290 <_dtoa_r+0x4d0>
 801275c:	9b08      	ldr	r3, [sp, #32]
 801275e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012762:	2b00      	cmp	r3, #0
 8012764:	f000 80fd 	beq.w	8012962 <_dtoa_r+0xba2>
 8012768:	2d00      	cmp	r5, #0
 801276a:	dd05      	ble.n	8012778 <_dtoa_r+0x9b8>
 801276c:	4639      	mov	r1, r7
 801276e:	462a      	mov	r2, r5
 8012770:	4620      	mov	r0, r4
 8012772:	f001 f933 	bl	80139dc <__lshift>
 8012776:	4607      	mov	r7, r0
 8012778:	9b06      	ldr	r3, [sp, #24]
 801277a:	2b00      	cmp	r3, #0
 801277c:	d05c      	beq.n	8012838 <_dtoa_r+0xa78>
 801277e:	6879      	ldr	r1, [r7, #4]
 8012780:	4620      	mov	r0, r4
 8012782:	f000 fecf 	bl	8013524 <_Balloc>
 8012786:	4605      	mov	r5, r0
 8012788:	b928      	cbnz	r0, 8012796 <_dtoa_r+0x9d6>
 801278a:	4b80      	ldr	r3, [pc, #512]	; (801298c <_dtoa_r+0xbcc>)
 801278c:	4602      	mov	r2, r0
 801278e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012792:	f7ff bb2e 	b.w	8011df2 <_dtoa_r+0x32>
 8012796:	693a      	ldr	r2, [r7, #16]
 8012798:	3202      	adds	r2, #2
 801279a:	0092      	lsls	r2, r2, #2
 801279c:	f107 010c 	add.w	r1, r7, #12
 80127a0:	300c      	adds	r0, #12
 80127a2:	f7fd fadf 	bl	800fd64 <memcpy>
 80127a6:	2201      	movs	r2, #1
 80127a8:	4629      	mov	r1, r5
 80127aa:	4620      	mov	r0, r4
 80127ac:	f001 f916 	bl	80139dc <__lshift>
 80127b0:	9b00      	ldr	r3, [sp, #0]
 80127b2:	3301      	adds	r3, #1
 80127b4:	9301      	str	r3, [sp, #4]
 80127b6:	9b00      	ldr	r3, [sp, #0]
 80127b8:	444b      	add	r3, r9
 80127ba:	9307      	str	r3, [sp, #28]
 80127bc:	9b02      	ldr	r3, [sp, #8]
 80127be:	f003 0301 	and.w	r3, r3, #1
 80127c2:	46b8      	mov	r8, r7
 80127c4:	9306      	str	r3, [sp, #24]
 80127c6:	4607      	mov	r7, r0
 80127c8:	9b01      	ldr	r3, [sp, #4]
 80127ca:	4631      	mov	r1, r6
 80127cc:	3b01      	subs	r3, #1
 80127ce:	4658      	mov	r0, fp
 80127d0:	9302      	str	r3, [sp, #8]
 80127d2:	f7ff fa6a 	bl	8011caa <quorem>
 80127d6:	4603      	mov	r3, r0
 80127d8:	3330      	adds	r3, #48	; 0x30
 80127da:	9004      	str	r0, [sp, #16]
 80127dc:	4641      	mov	r1, r8
 80127de:	4658      	mov	r0, fp
 80127e0:	9308      	str	r3, [sp, #32]
 80127e2:	f001 f967 	bl	8013ab4 <__mcmp>
 80127e6:	463a      	mov	r2, r7
 80127e8:	4681      	mov	r9, r0
 80127ea:	4631      	mov	r1, r6
 80127ec:	4620      	mov	r0, r4
 80127ee:	f001 f97d 	bl	8013aec <__mdiff>
 80127f2:	68c2      	ldr	r2, [r0, #12]
 80127f4:	9b08      	ldr	r3, [sp, #32]
 80127f6:	4605      	mov	r5, r0
 80127f8:	bb02      	cbnz	r2, 801283c <_dtoa_r+0xa7c>
 80127fa:	4601      	mov	r1, r0
 80127fc:	4658      	mov	r0, fp
 80127fe:	f001 f959 	bl	8013ab4 <__mcmp>
 8012802:	9b08      	ldr	r3, [sp, #32]
 8012804:	4602      	mov	r2, r0
 8012806:	4629      	mov	r1, r5
 8012808:	4620      	mov	r0, r4
 801280a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801280e:	f000 fec9 	bl	80135a4 <_Bfree>
 8012812:	9b05      	ldr	r3, [sp, #20]
 8012814:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012816:	9d01      	ldr	r5, [sp, #4]
 8012818:	ea43 0102 	orr.w	r1, r3, r2
 801281c:	9b06      	ldr	r3, [sp, #24]
 801281e:	430b      	orrs	r3, r1
 8012820:	9b08      	ldr	r3, [sp, #32]
 8012822:	d10d      	bne.n	8012840 <_dtoa_r+0xa80>
 8012824:	2b39      	cmp	r3, #57	; 0x39
 8012826:	d029      	beq.n	801287c <_dtoa_r+0xabc>
 8012828:	f1b9 0f00 	cmp.w	r9, #0
 801282c:	dd01      	ble.n	8012832 <_dtoa_r+0xa72>
 801282e:	9b04      	ldr	r3, [sp, #16]
 8012830:	3331      	adds	r3, #49	; 0x31
 8012832:	9a02      	ldr	r2, [sp, #8]
 8012834:	7013      	strb	r3, [r2, #0]
 8012836:	e774      	b.n	8012722 <_dtoa_r+0x962>
 8012838:	4638      	mov	r0, r7
 801283a:	e7b9      	b.n	80127b0 <_dtoa_r+0x9f0>
 801283c:	2201      	movs	r2, #1
 801283e:	e7e2      	b.n	8012806 <_dtoa_r+0xa46>
 8012840:	f1b9 0f00 	cmp.w	r9, #0
 8012844:	db06      	blt.n	8012854 <_dtoa_r+0xa94>
 8012846:	9905      	ldr	r1, [sp, #20]
 8012848:	ea41 0909 	orr.w	r9, r1, r9
 801284c:	9906      	ldr	r1, [sp, #24]
 801284e:	ea59 0101 	orrs.w	r1, r9, r1
 8012852:	d120      	bne.n	8012896 <_dtoa_r+0xad6>
 8012854:	2a00      	cmp	r2, #0
 8012856:	ddec      	ble.n	8012832 <_dtoa_r+0xa72>
 8012858:	4659      	mov	r1, fp
 801285a:	2201      	movs	r2, #1
 801285c:	4620      	mov	r0, r4
 801285e:	9301      	str	r3, [sp, #4]
 8012860:	f001 f8bc 	bl	80139dc <__lshift>
 8012864:	4631      	mov	r1, r6
 8012866:	4683      	mov	fp, r0
 8012868:	f001 f924 	bl	8013ab4 <__mcmp>
 801286c:	2800      	cmp	r0, #0
 801286e:	9b01      	ldr	r3, [sp, #4]
 8012870:	dc02      	bgt.n	8012878 <_dtoa_r+0xab8>
 8012872:	d1de      	bne.n	8012832 <_dtoa_r+0xa72>
 8012874:	07da      	lsls	r2, r3, #31
 8012876:	d5dc      	bpl.n	8012832 <_dtoa_r+0xa72>
 8012878:	2b39      	cmp	r3, #57	; 0x39
 801287a:	d1d8      	bne.n	801282e <_dtoa_r+0xa6e>
 801287c:	9a02      	ldr	r2, [sp, #8]
 801287e:	2339      	movs	r3, #57	; 0x39
 8012880:	7013      	strb	r3, [r2, #0]
 8012882:	462b      	mov	r3, r5
 8012884:	461d      	mov	r5, r3
 8012886:	3b01      	subs	r3, #1
 8012888:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801288c:	2a39      	cmp	r2, #57	; 0x39
 801288e:	d050      	beq.n	8012932 <_dtoa_r+0xb72>
 8012890:	3201      	adds	r2, #1
 8012892:	701a      	strb	r2, [r3, #0]
 8012894:	e745      	b.n	8012722 <_dtoa_r+0x962>
 8012896:	2a00      	cmp	r2, #0
 8012898:	dd03      	ble.n	80128a2 <_dtoa_r+0xae2>
 801289a:	2b39      	cmp	r3, #57	; 0x39
 801289c:	d0ee      	beq.n	801287c <_dtoa_r+0xabc>
 801289e:	3301      	adds	r3, #1
 80128a0:	e7c7      	b.n	8012832 <_dtoa_r+0xa72>
 80128a2:	9a01      	ldr	r2, [sp, #4]
 80128a4:	9907      	ldr	r1, [sp, #28]
 80128a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80128aa:	428a      	cmp	r2, r1
 80128ac:	d02a      	beq.n	8012904 <_dtoa_r+0xb44>
 80128ae:	4659      	mov	r1, fp
 80128b0:	2300      	movs	r3, #0
 80128b2:	220a      	movs	r2, #10
 80128b4:	4620      	mov	r0, r4
 80128b6:	f000 fe97 	bl	80135e8 <__multadd>
 80128ba:	45b8      	cmp	r8, r7
 80128bc:	4683      	mov	fp, r0
 80128be:	f04f 0300 	mov.w	r3, #0
 80128c2:	f04f 020a 	mov.w	r2, #10
 80128c6:	4641      	mov	r1, r8
 80128c8:	4620      	mov	r0, r4
 80128ca:	d107      	bne.n	80128dc <_dtoa_r+0xb1c>
 80128cc:	f000 fe8c 	bl	80135e8 <__multadd>
 80128d0:	4680      	mov	r8, r0
 80128d2:	4607      	mov	r7, r0
 80128d4:	9b01      	ldr	r3, [sp, #4]
 80128d6:	3301      	adds	r3, #1
 80128d8:	9301      	str	r3, [sp, #4]
 80128da:	e775      	b.n	80127c8 <_dtoa_r+0xa08>
 80128dc:	f000 fe84 	bl	80135e8 <__multadd>
 80128e0:	4639      	mov	r1, r7
 80128e2:	4680      	mov	r8, r0
 80128e4:	2300      	movs	r3, #0
 80128e6:	220a      	movs	r2, #10
 80128e8:	4620      	mov	r0, r4
 80128ea:	f000 fe7d 	bl	80135e8 <__multadd>
 80128ee:	4607      	mov	r7, r0
 80128f0:	e7f0      	b.n	80128d4 <_dtoa_r+0xb14>
 80128f2:	f1b9 0f00 	cmp.w	r9, #0
 80128f6:	9a00      	ldr	r2, [sp, #0]
 80128f8:	bfcc      	ite	gt
 80128fa:	464d      	movgt	r5, r9
 80128fc:	2501      	movle	r5, #1
 80128fe:	4415      	add	r5, r2
 8012900:	f04f 0800 	mov.w	r8, #0
 8012904:	4659      	mov	r1, fp
 8012906:	2201      	movs	r2, #1
 8012908:	4620      	mov	r0, r4
 801290a:	9301      	str	r3, [sp, #4]
 801290c:	f001 f866 	bl	80139dc <__lshift>
 8012910:	4631      	mov	r1, r6
 8012912:	4683      	mov	fp, r0
 8012914:	f001 f8ce 	bl	8013ab4 <__mcmp>
 8012918:	2800      	cmp	r0, #0
 801291a:	dcb2      	bgt.n	8012882 <_dtoa_r+0xac2>
 801291c:	d102      	bne.n	8012924 <_dtoa_r+0xb64>
 801291e:	9b01      	ldr	r3, [sp, #4]
 8012920:	07db      	lsls	r3, r3, #31
 8012922:	d4ae      	bmi.n	8012882 <_dtoa_r+0xac2>
 8012924:	462b      	mov	r3, r5
 8012926:	461d      	mov	r5, r3
 8012928:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801292c:	2a30      	cmp	r2, #48	; 0x30
 801292e:	d0fa      	beq.n	8012926 <_dtoa_r+0xb66>
 8012930:	e6f7      	b.n	8012722 <_dtoa_r+0x962>
 8012932:	9a00      	ldr	r2, [sp, #0]
 8012934:	429a      	cmp	r2, r3
 8012936:	d1a5      	bne.n	8012884 <_dtoa_r+0xac4>
 8012938:	f10a 0a01 	add.w	sl, sl, #1
 801293c:	2331      	movs	r3, #49	; 0x31
 801293e:	e779      	b.n	8012834 <_dtoa_r+0xa74>
 8012940:	4b13      	ldr	r3, [pc, #76]	; (8012990 <_dtoa_r+0xbd0>)
 8012942:	f7ff baaf 	b.w	8011ea4 <_dtoa_r+0xe4>
 8012946:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012948:	2b00      	cmp	r3, #0
 801294a:	f47f aa86 	bne.w	8011e5a <_dtoa_r+0x9a>
 801294e:	4b11      	ldr	r3, [pc, #68]	; (8012994 <_dtoa_r+0xbd4>)
 8012950:	f7ff baa8 	b.w	8011ea4 <_dtoa_r+0xe4>
 8012954:	f1b9 0f00 	cmp.w	r9, #0
 8012958:	dc03      	bgt.n	8012962 <_dtoa_r+0xba2>
 801295a:	9b05      	ldr	r3, [sp, #20]
 801295c:	2b02      	cmp	r3, #2
 801295e:	f73f aec9 	bgt.w	80126f4 <_dtoa_r+0x934>
 8012962:	9d00      	ldr	r5, [sp, #0]
 8012964:	4631      	mov	r1, r6
 8012966:	4658      	mov	r0, fp
 8012968:	f7ff f99f 	bl	8011caa <quorem>
 801296c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012970:	f805 3b01 	strb.w	r3, [r5], #1
 8012974:	9a00      	ldr	r2, [sp, #0]
 8012976:	1aaa      	subs	r2, r5, r2
 8012978:	4591      	cmp	r9, r2
 801297a:	ddba      	ble.n	80128f2 <_dtoa_r+0xb32>
 801297c:	4659      	mov	r1, fp
 801297e:	2300      	movs	r3, #0
 8012980:	220a      	movs	r2, #10
 8012982:	4620      	mov	r0, r4
 8012984:	f000 fe30 	bl	80135e8 <__multadd>
 8012988:	4683      	mov	fp, r0
 801298a:	e7eb      	b.n	8012964 <_dtoa_r+0xba4>
 801298c:	08016483 	.word	0x08016483
 8012990:	08016385 	.word	0x08016385
 8012994:	08016400 	.word	0x08016400

08012998 <__sflush_r>:
 8012998:	898a      	ldrh	r2, [r1, #12]
 801299a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801299e:	4605      	mov	r5, r0
 80129a0:	0710      	lsls	r0, r2, #28
 80129a2:	460c      	mov	r4, r1
 80129a4:	d458      	bmi.n	8012a58 <__sflush_r+0xc0>
 80129a6:	684b      	ldr	r3, [r1, #4]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	dc05      	bgt.n	80129b8 <__sflush_r+0x20>
 80129ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	dc02      	bgt.n	80129b8 <__sflush_r+0x20>
 80129b2:	2000      	movs	r0, #0
 80129b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80129ba:	2e00      	cmp	r6, #0
 80129bc:	d0f9      	beq.n	80129b2 <__sflush_r+0x1a>
 80129be:	2300      	movs	r3, #0
 80129c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80129c4:	682f      	ldr	r7, [r5, #0]
 80129c6:	602b      	str	r3, [r5, #0]
 80129c8:	d032      	beq.n	8012a30 <__sflush_r+0x98>
 80129ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80129cc:	89a3      	ldrh	r3, [r4, #12]
 80129ce:	075a      	lsls	r2, r3, #29
 80129d0:	d505      	bpl.n	80129de <__sflush_r+0x46>
 80129d2:	6863      	ldr	r3, [r4, #4]
 80129d4:	1ac0      	subs	r0, r0, r3
 80129d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80129d8:	b10b      	cbz	r3, 80129de <__sflush_r+0x46>
 80129da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80129dc:	1ac0      	subs	r0, r0, r3
 80129de:	2300      	movs	r3, #0
 80129e0:	4602      	mov	r2, r0
 80129e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80129e4:	6a21      	ldr	r1, [r4, #32]
 80129e6:	4628      	mov	r0, r5
 80129e8:	47b0      	blx	r6
 80129ea:	1c43      	adds	r3, r0, #1
 80129ec:	89a3      	ldrh	r3, [r4, #12]
 80129ee:	d106      	bne.n	80129fe <__sflush_r+0x66>
 80129f0:	6829      	ldr	r1, [r5, #0]
 80129f2:	291d      	cmp	r1, #29
 80129f4:	d82c      	bhi.n	8012a50 <__sflush_r+0xb8>
 80129f6:	4a2a      	ldr	r2, [pc, #168]	; (8012aa0 <__sflush_r+0x108>)
 80129f8:	40ca      	lsrs	r2, r1
 80129fa:	07d6      	lsls	r6, r2, #31
 80129fc:	d528      	bpl.n	8012a50 <__sflush_r+0xb8>
 80129fe:	2200      	movs	r2, #0
 8012a00:	6062      	str	r2, [r4, #4]
 8012a02:	04d9      	lsls	r1, r3, #19
 8012a04:	6922      	ldr	r2, [r4, #16]
 8012a06:	6022      	str	r2, [r4, #0]
 8012a08:	d504      	bpl.n	8012a14 <__sflush_r+0x7c>
 8012a0a:	1c42      	adds	r2, r0, #1
 8012a0c:	d101      	bne.n	8012a12 <__sflush_r+0x7a>
 8012a0e:	682b      	ldr	r3, [r5, #0]
 8012a10:	b903      	cbnz	r3, 8012a14 <__sflush_r+0x7c>
 8012a12:	6560      	str	r0, [r4, #84]	; 0x54
 8012a14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012a16:	602f      	str	r7, [r5, #0]
 8012a18:	2900      	cmp	r1, #0
 8012a1a:	d0ca      	beq.n	80129b2 <__sflush_r+0x1a>
 8012a1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012a20:	4299      	cmp	r1, r3
 8012a22:	d002      	beq.n	8012a2a <__sflush_r+0x92>
 8012a24:	4628      	mov	r0, r5
 8012a26:	f001 fa47 	bl	8013eb8 <_free_r>
 8012a2a:	2000      	movs	r0, #0
 8012a2c:	6360      	str	r0, [r4, #52]	; 0x34
 8012a2e:	e7c1      	b.n	80129b4 <__sflush_r+0x1c>
 8012a30:	6a21      	ldr	r1, [r4, #32]
 8012a32:	2301      	movs	r3, #1
 8012a34:	4628      	mov	r0, r5
 8012a36:	47b0      	blx	r6
 8012a38:	1c41      	adds	r1, r0, #1
 8012a3a:	d1c7      	bne.n	80129cc <__sflush_r+0x34>
 8012a3c:	682b      	ldr	r3, [r5, #0]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d0c4      	beq.n	80129cc <__sflush_r+0x34>
 8012a42:	2b1d      	cmp	r3, #29
 8012a44:	d001      	beq.n	8012a4a <__sflush_r+0xb2>
 8012a46:	2b16      	cmp	r3, #22
 8012a48:	d101      	bne.n	8012a4e <__sflush_r+0xb6>
 8012a4a:	602f      	str	r7, [r5, #0]
 8012a4c:	e7b1      	b.n	80129b2 <__sflush_r+0x1a>
 8012a4e:	89a3      	ldrh	r3, [r4, #12]
 8012a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a54:	81a3      	strh	r3, [r4, #12]
 8012a56:	e7ad      	b.n	80129b4 <__sflush_r+0x1c>
 8012a58:	690f      	ldr	r7, [r1, #16]
 8012a5a:	2f00      	cmp	r7, #0
 8012a5c:	d0a9      	beq.n	80129b2 <__sflush_r+0x1a>
 8012a5e:	0793      	lsls	r3, r2, #30
 8012a60:	680e      	ldr	r6, [r1, #0]
 8012a62:	bf08      	it	eq
 8012a64:	694b      	ldreq	r3, [r1, #20]
 8012a66:	600f      	str	r7, [r1, #0]
 8012a68:	bf18      	it	ne
 8012a6a:	2300      	movne	r3, #0
 8012a6c:	eba6 0807 	sub.w	r8, r6, r7
 8012a70:	608b      	str	r3, [r1, #8]
 8012a72:	f1b8 0f00 	cmp.w	r8, #0
 8012a76:	dd9c      	ble.n	80129b2 <__sflush_r+0x1a>
 8012a78:	6a21      	ldr	r1, [r4, #32]
 8012a7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012a7c:	4643      	mov	r3, r8
 8012a7e:	463a      	mov	r2, r7
 8012a80:	4628      	mov	r0, r5
 8012a82:	47b0      	blx	r6
 8012a84:	2800      	cmp	r0, #0
 8012a86:	dc06      	bgt.n	8012a96 <__sflush_r+0xfe>
 8012a88:	89a3      	ldrh	r3, [r4, #12]
 8012a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a8e:	81a3      	strh	r3, [r4, #12]
 8012a90:	f04f 30ff 	mov.w	r0, #4294967295
 8012a94:	e78e      	b.n	80129b4 <__sflush_r+0x1c>
 8012a96:	4407      	add	r7, r0
 8012a98:	eba8 0800 	sub.w	r8, r8, r0
 8012a9c:	e7e9      	b.n	8012a72 <__sflush_r+0xda>
 8012a9e:	bf00      	nop
 8012aa0:	20400001 	.word	0x20400001

08012aa4 <_fflush_r>:
 8012aa4:	b538      	push	{r3, r4, r5, lr}
 8012aa6:	690b      	ldr	r3, [r1, #16]
 8012aa8:	4605      	mov	r5, r0
 8012aaa:	460c      	mov	r4, r1
 8012aac:	b913      	cbnz	r3, 8012ab4 <_fflush_r+0x10>
 8012aae:	2500      	movs	r5, #0
 8012ab0:	4628      	mov	r0, r5
 8012ab2:	bd38      	pop	{r3, r4, r5, pc}
 8012ab4:	b118      	cbz	r0, 8012abe <_fflush_r+0x1a>
 8012ab6:	6983      	ldr	r3, [r0, #24]
 8012ab8:	b90b      	cbnz	r3, 8012abe <_fflush_r+0x1a>
 8012aba:	f000 f887 	bl	8012bcc <__sinit>
 8012abe:	4b14      	ldr	r3, [pc, #80]	; (8012b10 <_fflush_r+0x6c>)
 8012ac0:	429c      	cmp	r4, r3
 8012ac2:	d11b      	bne.n	8012afc <_fflush_r+0x58>
 8012ac4:	686c      	ldr	r4, [r5, #4]
 8012ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d0ef      	beq.n	8012aae <_fflush_r+0xa>
 8012ace:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012ad0:	07d0      	lsls	r0, r2, #31
 8012ad2:	d404      	bmi.n	8012ade <_fflush_r+0x3a>
 8012ad4:	0599      	lsls	r1, r3, #22
 8012ad6:	d402      	bmi.n	8012ade <_fflush_r+0x3a>
 8012ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012ada:	f000 fc88 	bl	80133ee <__retarget_lock_acquire_recursive>
 8012ade:	4628      	mov	r0, r5
 8012ae0:	4621      	mov	r1, r4
 8012ae2:	f7ff ff59 	bl	8012998 <__sflush_r>
 8012ae6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012ae8:	07da      	lsls	r2, r3, #31
 8012aea:	4605      	mov	r5, r0
 8012aec:	d4e0      	bmi.n	8012ab0 <_fflush_r+0xc>
 8012aee:	89a3      	ldrh	r3, [r4, #12]
 8012af0:	059b      	lsls	r3, r3, #22
 8012af2:	d4dd      	bmi.n	8012ab0 <_fflush_r+0xc>
 8012af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012af6:	f000 fc7b 	bl	80133f0 <__retarget_lock_release_recursive>
 8012afa:	e7d9      	b.n	8012ab0 <_fflush_r+0xc>
 8012afc:	4b05      	ldr	r3, [pc, #20]	; (8012b14 <_fflush_r+0x70>)
 8012afe:	429c      	cmp	r4, r3
 8012b00:	d101      	bne.n	8012b06 <_fflush_r+0x62>
 8012b02:	68ac      	ldr	r4, [r5, #8]
 8012b04:	e7df      	b.n	8012ac6 <_fflush_r+0x22>
 8012b06:	4b04      	ldr	r3, [pc, #16]	; (8012b18 <_fflush_r+0x74>)
 8012b08:	429c      	cmp	r4, r3
 8012b0a:	bf08      	it	eq
 8012b0c:	68ec      	ldreq	r4, [r5, #12]
 8012b0e:	e7da      	b.n	8012ac6 <_fflush_r+0x22>
 8012b10:	080164b4 	.word	0x080164b4
 8012b14:	080164d4 	.word	0x080164d4
 8012b18:	08016494 	.word	0x08016494

08012b1c <std>:
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	b510      	push	{r4, lr}
 8012b20:	4604      	mov	r4, r0
 8012b22:	e9c0 3300 	strd	r3, r3, [r0]
 8012b26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012b2a:	6083      	str	r3, [r0, #8]
 8012b2c:	8181      	strh	r1, [r0, #12]
 8012b2e:	6643      	str	r3, [r0, #100]	; 0x64
 8012b30:	81c2      	strh	r2, [r0, #14]
 8012b32:	6183      	str	r3, [r0, #24]
 8012b34:	4619      	mov	r1, r3
 8012b36:	2208      	movs	r2, #8
 8012b38:	305c      	adds	r0, #92	; 0x5c
 8012b3a:	f7fd f921 	bl	800fd80 <memset>
 8012b3e:	4b05      	ldr	r3, [pc, #20]	; (8012b54 <std+0x38>)
 8012b40:	6263      	str	r3, [r4, #36]	; 0x24
 8012b42:	4b05      	ldr	r3, [pc, #20]	; (8012b58 <std+0x3c>)
 8012b44:	62a3      	str	r3, [r4, #40]	; 0x28
 8012b46:	4b05      	ldr	r3, [pc, #20]	; (8012b5c <std+0x40>)
 8012b48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012b4a:	4b05      	ldr	r3, [pc, #20]	; (8012b60 <std+0x44>)
 8012b4c:	6224      	str	r4, [r4, #32]
 8012b4e:	6323      	str	r3, [r4, #48]	; 0x30
 8012b50:	bd10      	pop	{r4, pc}
 8012b52:	bf00      	nop
 8012b54:	080143c9 	.word	0x080143c9
 8012b58:	080143eb 	.word	0x080143eb
 8012b5c:	08014423 	.word	0x08014423
 8012b60:	08014447 	.word	0x08014447

08012b64 <_cleanup_r>:
 8012b64:	4901      	ldr	r1, [pc, #4]	; (8012b6c <_cleanup_r+0x8>)
 8012b66:	f000 b8af 	b.w	8012cc8 <_fwalk_reent>
 8012b6a:	bf00      	nop
 8012b6c:	08012aa5 	.word	0x08012aa5

08012b70 <__sfmoreglue>:
 8012b70:	b570      	push	{r4, r5, r6, lr}
 8012b72:	1e4a      	subs	r2, r1, #1
 8012b74:	2568      	movs	r5, #104	; 0x68
 8012b76:	4355      	muls	r5, r2
 8012b78:	460e      	mov	r6, r1
 8012b7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012b7e:	f001 f9eb 	bl	8013f58 <_malloc_r>
 8012b82:	4604      	mov	r4, r0
 8012b84:	b140      	cbz	r0, 8012b98 <__sfmoreglue+0x28>
 8012b86:	2100      	movs	r1, #0
 8012b88:	e9c0 1600 	strd	r1, r6, [r0]
 8012b8c:	300c      	adds	r0, #12
 8012b8e:	60a0      	str	r0, [r4, #8]
 8012b90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012b94:	f7fd f8f4 	bl	800fd80 <memset>
 8012b98:	4620      	mov	r0, r4
 8012b9a:	bd70      	pop	{r4, r5, r6, pc}

08012b9c <__sfp_lock_acquire>:
 8012b9c:	4801      	ldr	r0, [pc, #4]	; (8012ba4 <__sfp_lock_acquire+0x8>)
 8012b9e:	f000 bc26 	b.w	80133ee <__retarget_lock_acquire_recursive>
 8012ba2:	bf00      	nop
 8012ba4:	20004a2c 	.word	0x20004a2c

08012ba8 <__sfp_lock_release>:
 8012ba8:	4801      	ldr	r0, [pc, #4]	; (8012bb0 <__sfp_lock_release+0x8>)
 8012baa:	f000 bc21 	b.w	80133f0 <__retarget_lock_release_recursive>
 8012bae:	bf00      	nop
 8012bb0:	20004a2c 	.word	0x20004a2c

08012bb4 <__sinit_lock_acquire>:
 8012bb4:	4801      	ldr	r0, [pc, #4]	; (8012bbc <__sinit_lock_acquire+0x8>)
 8012bb6:	f000 bc1a 	b.w	80133ee <__retarget_lock_acquire_recursive>
 8012bba:	bf00      	nop
 8012bbc:	20004a27 	.word	0x20004a27

08012bc0 <__sinit_lock_release>:
 8012bc0:	4801      	ldr	r0, [pc, #4]	; (8012bc8 <__sinit_lock_release+0x8>)
 8012bc2:	f000 bc15 	b.w	80133f0 <__retarget_lock_release_recursive>
 8012bc6:	bf00      	nop
 8012bc8:	20004a27 	.word	0x20004a27

08012bcc <__sinit>:
 8012bcc:	b510      	push	{r4, lr}
 8012bce:	4604      	mov	r4, r0
 8012bd0:	f7ff fff0 	bl	8012bb4 <__sinit_lock_acquire>
 8012bd4:	69a3      	ldr	r3, [r4, #24]
 8012bd6:	b11b      	cbz	r3, 8012be0 <__sinit+0x14>
 8012bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012bdc:	f7ff bff0 	b.w	8012bc0 <__sinit_lock_release>
 8012be0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012be4:	6523      	str	r3, [r4, #80]	; 0x50
 8012be6:	4b13      	ldr	r3, [pc, #76]	; (8012c34 <__sinit+0x68>)
 8012be8:	4a13      	ldr	r2, [pc, #76]	; (8012c38 <__sinit+0x6c>)
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	62a2      	str	r2, [r4, #40]	; 0x28
 8012bee:	42a3      	cmp	r3, r4
 8012bf0:	bf04      	itt	eq
 8012bf2:	2301      	moveq	r3, #1
 8012bf4:	61a3      	streq	r3, [r4, #24]
 8012bf6:	4620      	mov	r0, r4
 8012bf8:	f000 f820 	bl	8012c3c <__sfp>
 8012bfc:	6060      	str	r0, [r4, #4]
 8012bfe:	4620      	mov	r0, r4
 8012c00:	f000 f81c 	bl	8012c3c <__sfp>
 8012c04:	60a0      	str	r0, [r4, #8]
 8012c06:	4620      	mov	r0, r4
 8012c08:	f000 f818 	bl	8012c3c <__sfp>
 8012c0c:	2200      	movs	r2, #0
 8012c0e:	60e0      	str	r0, [r4, #12]
 8012c10:	2104      	movs	r1, #4
 8012c12:	6860      	ldr	r0, [r4, #4]
 8012c14:	f7ff ff82 	bl	8012b1c <std>
 8012c18:	68a0      	ldr	r0, [r4, #8]
 8012c1a:	2201      	movs	r2, #1
 8012c1c:	2109      	movs	r1, #9
 8012c1e:	f7ff ff7d 	bl	8012b1c <std>
 8012c22:	68e0      	ldr	r0, [r4, #12]
 8012c24:	2202      	movs	r2, #2
 8012c26:	2112      	movs	r1, #18
 8012c28:	f7ff ff78 	bl	8012b1c <std>
 8012c2c:	2301      	movs	r3, #1
 8012c2e:	61a3      	str	r3, [r4, #24]
 8012c30:	e7d2      	b.n	8012bd8 <__sinit+0xc>
 8012c32:	bf00      	nop
 8012c34:	08016360 	.word	0x08016360
 8012c38:	08012b65 	.word	0x08012b65

08012c3c <__sfp>:
 8012c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c3e:	4607      	mov	r7, r0
 8012c40:	f7ff ffac 	bl	8012b9c <__sfp_lock_acquire>
 8012c44:	4b1e      	ldr	r3, [pc, #120]	; (8012cc0 <__sfp+0x84>)
 8012c46:	681e      	ldr	r6, [r3, #0]
 8012c48:	69b3      	ldr	r3, [r6, #24]
 8012c4a:	b913      	cbnz	r3, 8012c52 <__sfp+0x16>
 8012c4c:	4630      	mov	r0, r6
 8012c4e:	f7ff ffbd 	bl	8012bcc <__sinit>
 8012c52:	3648      	adds	r6, #72	; 0x48
 8012c54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012c58:	3b01      	subs	r3, #1
 8012c5a:	d503      	bpl.n	8012c64 <__sfp+0x28>
 8012c5c:	6833      	ldr	r3, [r6, #0]
 8012c5e:	b30b      	cbz	r3, 8012ca4 <__sfp+0x68>
 8012c60:	6836      	ldr	r6, [r6, #0]
 8012c62:	e7f7      	b.n	8012c54 <__sfp+0x18>
 8012c64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012c68:	b9d5      	cbnz	r5, 8012ca0 <__sfp+0x64>
 8012c6a:	4b16      	ldr	r3, [pc, #88]	; (8012cc4 <__sfp+0x88>)
 8012c6c:	60e3      	str	r3, [r4, #12]
 8012c6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012c72:	6665      	str	r5, [r4, #100]	; 0x64
 8012c74:	f000 fbba 	bl	80133ec <__retarget_lock_init_recursive>
 8012c78:	f7ff ff96 	bl	8012ba8 <__sfp_lock_release>
 8012c7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012c80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012c84:	6025      	str	r5, [r4, #0]
 8012c86:	61a5      	str	r5, [r4, #24]
 8012c88:	2208      	movs	r2, #8
 8012c8a:	4629      	mov	r1, r5
 8012c8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012c90:	f7fd f876 	bl	800fd80 <memset>
 8012c94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012c98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012c9c:	4620      	mov	r0, r4
 8012c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ca0:	3468      	adds	r4, #104	; 0x68
 8012ca2:	e7d9      	b.n	8012c58 <__sfp+0x1c>
 8012ca4:	2104      	movs	r1, #4
 8012ca6:	4638      	mov	r0, r7
 8012ca8:	f7ff ff62 	bl	8012b70 <__sfmoreglue>
 8012cac:	4604      	mov	r4, r0
 8012cae:	6030      	str	r0, [r6, #0]
 8012cb0:	2800      	cmp	r0, #0
 8012cb2:	d1d5      	bne.n	8012c60 <__sfp+0x24>
 8012cb4:	f7ff ff78 	bl	8012ba8 <__sfp_lock_release>
 8012cb8:	230c      	movs	r3, #12
 8012cba:	603b      	str	r3, [r7, #0]
 8012cbc:	e7ee      	b.n	8012c9c <__sfp+0x60>
 8012cbe:	bf00      	nop
 8012cc0:	08016360 	.word	0x08016360
 8012cc4:	ffff0001 	.word	0xffff0001

08012cc8 <_fwalk_reent>:
 8012cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ccc:	4606      	mov	r6, r0
 8012cce:	4688      	mov	r8, r1
 8012cd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012cd4:	2700      	movs	r7, #0
 8012cd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012cda:	f1b9 0901 	subs.w	r9, r9, #1
 8012cde:	d505      	bpl.n	8012cec <_fwalk_reent+0x24>
 8012ce0:	6824      	ldr	r4, [r4, #0]
 8012ce2:	2c00      	cmp	r4, #0
 8012ce4:	d1f7      	bne.n	8012cd6 <_fwalk_reent+0xe>
 8012ce6:	4638      	mov	r0, r7
 8012ce8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012cec:	89ab      	ldrh	r3, [r5, #12]
 8012cee:	2b01      	cmp	r3, #1
 8012cf0:	d907      	bls.n	8012d02 <_fwalk_reent+0x3a>
 8012cf2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012cf6:	3301      	adds	r3, #1
 8012cf8:	d003      	beq.n	8012d02 <_fwalk_reent+0x3a>
 8012cfa:	4629      	mov	r1, r5
 8012cfc:	4630      	mov	r0, r6
 8012cfe:	47c0      	blx	r8
 8012d00:	4307      	orrs	r7, r0
 8012d02:	3568      	adds	r5, #104	; 0x68
 8012d04:	e7e9      	b.n	8012cda <_fwalk_reent+0x12>

08012d06 <rshift>:
 8012d06:	6903      	ldr	r3, [r0, #16]
 8012d08:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012d0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012d10:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012d14:	f100 0414 	add.w	r4, r0, #20
 8012d18:	dd45      	ble.n	8012da6 <rshift+0xa0>
 8012d1a:	f011 011f 	ands.w	r1, r1, #31
 8012d1e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012d22:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012d26:	d10c      	bne.n	8012d42 <rshift+0x3c>
 8012d28:	f100 0710 	add.w	r7, r0, #16
 8012d2c:	4629      	mov	r1, r5
 8012d2e:	42b1      	cmp	r1, r6
 8012d30:	d334      	bcc.n	8012d9c <rshift+0x96>
 8012d32:	1a9b      	subs	r3, r3, r2
 8012d34:	009b      	lsls	r3, r3, #2
 8012d36:	1eea      	subs	r2, r5, #3
 8012d38:	4296      	cmp	r6, r2
 8012d3a:	bf38      	it	cc
 8012d3c:	2300      	movcc	r3, #0
 8012d3e:	4423      	add	r3, r4
 8012d40:	e015      	b.n	8012d6e <rshift+0x68>
 8012d42:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012d46:	f1c1 0820 	rsb	r8, r1, #32
 8012d4a:	40cf      	lsrs	r7, r1
 8012d4c:	f105 0e04 	add.w	lr, r5, #4
 8012d50:	46a1      	mov	r9, r4
 8012d52:	4576      	cmp	r6, lr
 8012d54:	46f4      	mov	ip, lr
 8012d56:	d815      	bhi.n	8012d84 <rshift+0x7e>
 8012d58:	1a9b      	subs	r3, r3, r2
 8012d5a:	009a      	lsls	r2, r3, #2
 8012d5c:	3a04      	subs	r2, #4
 8012d5e:	3501      	adds	r5, #1
 8012d60:	42ae      	cmp	r6, r5
 8012d62:	bf38      	it	cc
 8012d64:	2200      	movcc	r2, #0
 8012d66:	18a3      	adds	r3, r4, r2
 8012d68:	50a7      	str	r7, [r4, r2]
 8012d6a:	b107      	cbz	r7, 8012d6e <rshift+0x68>
 8012d6c:	3304      	adds	r3, #4
 8012d6e:	1b1a      	subs	r2, r3, r4
 8012d70:	42a3      	cmp	r3, r4
 8012d72:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012d76:	bf08      	it	eq
 8012d78:	2300      	moveq	r3, #0
 8012d7a:	6102      	str	r2, [r0, #16]
 8012d7c:	bf08      	it	eq
 8012d7e:	6143      	streq	r3, [r0, #20]
 8012d80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d84:	f8dc c000 	ldr.w	ip, [ip]
 8012d88:	fa0c fc08 	lsl.w	ip, ip, r8
 8012d8c:	ea4c 0707 	orr.w	r7, ip, r7
 8012d90:	f849 7b04 	str.w	r7, [r9], #4
 8012d94:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012d98:	40cf      	lsrs	r7, r1
 8012d9a:	e7da      	b.n	8012d52 <rshift+0x4c>
 8012d9c:	f851 cb04 	ldr.w	ip, [r1], #4
 8012da0:	f847 cf04 	str.w	ip, [r7, #4]!
 8012da4:	e7c3      	b.n	8012d2e <rshift+0x28>
 8012da6:	4623      	mov	r3, r4
 8012da8:	e7e1      	b.n	8012d6e <rshift+0x68>

08012daa <__hexdig_fun>:
 8012daa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012dae:	2b09      	cmp	r3, #9
 8012db0:	d802      	bhi.n	8012db8 <__hexdig_fun+0xe>
 8012db2:	3820      	subs	r0, #32
 8012db4:	b2c0      	uxtb	r0, r0
 8012db6:	4770      	bx	lr
 8012db8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012dbc:	2b05      	cmp	r3, #5
 8012dbe:	d801      	bhi.n	8012dc4 <__hexdig_fun+0x1a>
 8012dc0:	3847      	subs	r0, #71	; 0x47
 8012dc2:	e7f7      	b.n	8012db4 <__hexdig_fun+0xa>
 8012dc4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012dc8:	2b05      	cmp	r3, #5
 8012dca:	d801      	bhi.n	8012dd0 <__hexdig_fun+0x26>
 8012dcc:	3827      	subs	r0, #39	; 0x27
 8012dce:	e7f1      	b.n	8012db4 <__hexdig_fun+0xa>
 8012dd0:	2000      	movs	r0, #0
 8012dd2:	4770      	bx	lr

08012dd4 <__gethex>:
 8012dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dd8:	ed2d 8b02 	vpush	{d8}
 8012ddc:	b089      	sub	sp, #36	; 0x24
 8012dde:	ee08 0a10 	vmov	s16, r0
 8012de2:	9304      	str	r3, [sp, #16]
 8012de4:	4bbc      	ldr	r3, [pc, #752]	; (80130d8 <__gethex+0x304>)
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	9301      	str	r3, [sp, #4]
 8012dea:	4618      	mov	r0, r3
 8012dec:	468b      	mov	fp, r1
 8012dee:	4690      	mov	r8, r2
 8012df0:	f7ed f9f6 	bl	80001e0 <strlen>
 8012df4:	9b01      	ldr	r3, [sp, #4]
 8012df6:	f8db 2000 	ldr.w	r2, [fp]
 8012dfa:	4403      	add	r3, r0
 8012dfc:	4682      	mov	sl, r0
 8012dfe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012e02:	9305      	str	r3, [sp, #20]
 8012e04:	1c93      	adds	r3, r2, #2
 8012e06:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012e0a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012e0e:	32fe      	adds	r2, #254	; 0xfe
 8012e10:	18d1      	adds	r1, r2, r3
 8012e12:	461f      	mov	r7, r3
 8012e14:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012e18:	9100      	str	r1, [sp, #0]
 8012e1a:	2830      	cmp	r0, #48	; 0x30
 8012e1c:	d0f8      	beq.n	8012e10 <__gethex+0x3c>
 8012e1e:	f7ff ffc4 	bl	8012daa <__hexdig_fun>
 8012e22:	4604      	mov	r4, r0
 8012e24:	2800      	cmp	r0, #0
 8012e26:	d13a      	bne.n	8012e9e <__gethex+0xca>
 8012e28:	9901      	ldr	r1, [sp, #4]
 8012e2a:	4652      	mov	r2, sl
 8012e2c:	4638      	mov	r0, r7
 8012e2e:	f001 fb0e 	bl	801444e <strncmp>
 8012e32:	4605      	mov	r5, r0
 8012e34:	2800      	cmp	r0, #0
 8012e36:	d168      	bne.n	8012f0a <__gethex+0x136>
 8012e38:	f817 000a 	ldrb.w	r0, [r7, sl]
 8012e3c:	eb07 060a 	add.w	r6, r7, sl
 8012e40:	f7ff ffb3 	bl	8012daa <__hexdig_fun>
 8012e44:	2800      	cmp	r0, #0
 8012e46:	d062      	beq.n	8012f0e <__gethex+0x13a>
 8012e48:	4633      	mov	r3, r6
 8012e4a:	7818      	ldrb	r0, [r3, #0]
 8012e4c:	2830      	cmp	r0, #48	; 0x30
 8012e4e:	461f      	mov	r7, r3
 8012e50:	f103 0301 	add.w	r3, r3, #1
 8012e54:	d0f9      	beq.n	8012e4a <__gethex+0x76>
 8012e56:	f7ff ffa8 	bl	8012daa <__hexdig_fun>
 8012e5a:	2301      	movs	r3, #1
 8012e5c:	fab0 f480 	clz	r4, r0
 8012e60:	0964      	lsrs	r4, r4, #5
 8012e62:	4635      	mov	r5, r6
 8012e64:	9300      	str	r3, [sp, #0]
 8012e66:	463a      	mov	r2, r7
 8012e68:	4616      	mov	r6, r2
 8012e6a:	3201      	adds	r2, #1
 8012e6c:	7830      	ldrb	r0, [r6, #0]
 8012e6e:	f7ff ff9c 	bl	8012daa <__hexdig_fun>
 8012e72:	2800      	cmp	r0, #0
 8012e74:	d1f8      	bne.n	8012e68 <__gethex+0x94>
 8012e76:	9901      	ldr	r1, [sp, #4]
 8012e78:	4652      	mov	r2, sl
 8012e7a:	4630      	mov	r0, r6
 8012e7c:	f001 fae7 	bl	801444e <strncmp>
 8012e80:	b980      	cbnz	r0, 8012ea4 <__gethex+0xd0>
 8012e82:	b94d      	cbnz	r5, 8012e98 <__gethex+0xc4>
 8012e84:	eb06 050a 	add.w	r5, r6, sl
 8012e88:	462a      	mov	r2, r5
 8012e8a:	4616      	mov	r6, r2
 8012e8c:	3201      	adds	r2, #1
 8012e8e:	7830      	ldrb	r0, [r6, #0]
 8012e90:	f7ff ff8b 	bl	8012daa <__hexdig_fun>
 8012e94:	2800      	cmp	r0, #0
 8012e96:	d1f8      	bne.n	8012e8a <__gethex+0xb6>
 8012e98:	1bad      	subs	r5, r5, r6
 8012e9a:	00ad      	lsls	r5, r5, #2
 8012e9c:	e004      	b.n	8012ea8 <__gethex+0xd4>
 8012e9e:	2400      	movs	r4, #0
 8012ea0:	4625      	mov	r5, r4
 8012ea2:	e7e0      	b.n	8012e66 <__gethex+0x92>
 8012ea4:	2d00      	cmp	r5, #0
 8012ea6:	d1f7      	bne.n	8012e98 <__gethex+0xc4>
 8012ea8:	7833      	ldrb	r3, [r6, #0]
 8012eaa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012eae:	2b50      	cmp	r3, #80	; 0x50
 8012eb0:	d13b      	bne.n	8012f2a <__gethex+0x156>
 8012eb2:	7873      	ldrb	r3, [r6, #1]
 8012eb4:	2b2b      	cmp	r3, #43	; 0x2b
 8012eb6:	d02c      	beq.n	8012f12 <__gethex+0x13e>
 8012eb8:	2b2d      	cmp	r3, #45	; 0x2d
 8012eba:	d02e      	beq.n	8012f1a <__gethex+0x146>
 8012ebc:	1c71      	adds	r1, r6, #1
 8012ebe:	f04f 0900 	mov.w	r9, #0
 8012ec2:	7808      	ldrb	r0, [r1, #0]
 8012ec4:	f7ff ff71 	bl	8012daa <__hexdig_fun>
 8012ec8:	1e43      	subs	r3, r0, #1
 8012eca:	b2db      	uxtb	r3, r3
 8012ecc:	2b18      	cmp	r3, #24
 8012ece:	d82c      	bhi.n	8012f2a <__gethex+0x156>
 8012ed0:	f1a0 0210 	sub.w	r2, r0, #16
 8012ed4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012ed8:	f7ff ff67 	bl	8012daa <__hexdig_fun>
 8012edc:	1e43      	subs	r3, r0, #1
 8012ede:	b2db      	uxtb	r3, r3
 8012ee0:	2b18      	cmp	r3, #24
 8012ee2:	d91d      	bls.n	8012f20 <__gethex+0x14c>
 8012ee4:	f1b9 0f00 	cmp.w	r9, #0
 8012ee8:	d000      	beq.n	8012eec <__gethex+0x118>
 8012eea:	4252      	negs	r2, r2
 8012eec:	4415      	add	r5, r2
 8012eee:	f8cb 1000 	str.w	r1, [fp]
 8012ef2:	b1e4      	cbz	r4, 8012f2e <__gethex+0x15a>
 8012ef4:	9b00      	ldr	r3, [sp, #0]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	bf14      	ite	ne
 8012efa:	2700      	movne	r7, #0
 8012efc:	2706      	moveq	r7, #6
 8012efe:	4638      	mov	r0, r7
 8012f00:	b009      	add	sp, #36	; 0x24
 8012f02:	ecbd 8b02 	vpop	{d8}
 8012f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f0a:	463e      	mov	r6, r7
 8012f0c:	4625      	mov	r5, r4
 8012f0e:	2401      	movs	r4, #1
 8012f10:	e7ca      	b.n	8012ea8 <__gethex+0xd4>
 8012f12:	f04f 0900 	mov.w	r9, #0
 8012f16:	1cb1      	adds	r1, r6, #2
 8012f18:	e7d3      	b.n	8012ec2 <__gethex+0xee>
 8012f1a:	f04f 0901 	mov.w	r9, #1
 8012f1e:	e7fa      	b.n	8012f16 <__gethex+0x142>
 8012f20:	230a      	movs	r3, #10
 8012f22:	fb03 0202 	mla	r2, r3, r2, r0
 8012f26:	3a10      	subs	r2, #16
 8012f28:	e7d4      	b.n	8012ed4 <__gethex+0x100>
 8012f2a:	4631      	mov	r1, r6
 8012f2c:	e7df      	b.n	8012eee <__gethex+0x11a>
 8012f2e:	1bf3      	subs	r3, r6, r7
 8012f30:	3b01      	subs	r3, #1
 8012f32:	4621      	mov	r1, r4
 8012f34:	2b07      	cmp	r3, #7
 8012f36:	dc0b      	bgt.n	8012f50 <__gethex+0x17c>
 8012f38:	ee18 0a10 	vmov	r0, s16
 8012f3c:	f000 faf2 	bl	8013524 <_Balloc>
 8012f40:	4604      	mov	r4, r0
 8012f42:	b940      	cbnz	r0, 8012f56 <__gethex+0x182>
 8012f44:	4b65      	ldr	r3, [pc, #404]	; (80130dc <__gethex+0x308>)
 8012f46:	4602      	mov	r2, r0
 8012f48:	21de      	movs	r1, #222	; 0xde
 8012f4a:	4865      	ldr	r0, [pc, #404]	; (80130e0 <__gethex+0x30c>)
 8012f4c:	f7fc feb0 	bl	800fcb0 <__assert_func>
 8012f50:	3101      	adds	r1, #1
 8012f52:	105b      	asrs	r3, r3, #1
 8012f54:	e7ee      	b.n	8012f34 <__gethex+0x160>
 8012f56:	f100 0914 	add.w	r9, r0, #20
 8012f5a:	f04f 0b00 	mov.w	fp, #0
 8012f5e:	f1ca 0301 	rsb	r3, sl, #1
 8012f62:	f8cd 9008 	str.w	r9, [sp, #8]
 8012f66:	f8cd b000 	str.w	fp, [sp]
 8012f6a:	9306      	str	r3, [sp, #24]
 8012f6c:	42b7      	cmp	r7, r6
 8012f6e:	d340      	bcc.n	8012ff2 <__gethex+0x21e>
 8012f70:	9802      	ldr	r0, [sp, #8]
 8012f72:	9b00      	ldr	r3, [sp, #0]
 8012f74:	f840 3b04 	str.w	r3, [r0], #4
 8012f78:	eba0 0009 	sub.w	r0, r0, r9
 8012f7c:	1080      	asrs	r0, r0, #2
 8012f7e:	0146      	lsls	r6, r0, #5
 8012f80:	6120      	str	r0, [r4, #16]
 8012f82:	4618      	mov	r0, r3
 8012f84:	f000 fbc4 	bl	8013710 <__hi0bits>
 8012f88:	1a30      	subs	r0, r6, r0
 8012f8a:	f8d8 6000 	ldr.w	r6, [r8]
 8012f8e:	42b0      	cmp	r0, r6
 8012f90:	dd63      	ble.n	801305a <__gethex+0x286>
 8012f92:	1b87      	subs	r7, r0, r6
 8012f94:	4639      	mov	r1, r7
 8012f96:	4620      	mov	r0, r4
 8012f98:	f000 ff5e 	bl	8013e58 <__any_on>
 8012f9c:	4682      	mov	sl, r0
 8012f9e:	b1a8      	cbz	r0, 8012fcc <__gethex+0x1f8>
 8012fa0:	1e7b      	subs	r3, r7, #1
 8012fa2:	1159      	asrs	r1, r3, #5
 8012fa4:	f003 021f 	and.w	r2, r3, #31
 8012fa8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012fac:	f04f 0a01 	mov.w	sl, #1
 8012fb0:	fa0a f202 	lsl.w	r2, sl, r2
 8012fb4:	420a      	tst	r2, r1
 8012fb6:	d009      	beq.n	8012fcc <__gethex+0x1f8>
 8012fb8:	4553      	cmp	r3, sl
 8012fba:	dd05      	ble.n	8012fc8 <__gethex+0x1f4>
 8012fbc:	1eb9      	subs	r1, r7, #2
 8012fbe:	4620      	mov	r0, r4
 8012fc0:	f000 ff4a 	bl	8013e58 <__any_on>
 8012fc4:	2800      	cmp	r0, #0
 8012fc6:	d145      	bne.n	8013054 <__gethex+0x280>
 8012fc8:	f04f 0a02 	mov.w	sl, #2
 8012fcc:	4639      	mov	r1, r7
 8012fce:	4620      	mov	r0, r4
 8012fd0:	f7ff fe99 	bl	8012d06 <rshift>
 8012fd4:	443d      	add	r5, r7
 8012fd6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012fda:	42ab      	cmp	r3, r5
 8012fdc:	da4c      	bge.n	8013078 <__gethex+0x2a4>
 8012fde:	ee18 0a10 	vmov	r0, s16
 8012fe2:	4621      	mov	r1, r4
 8012fe4:	f000 fade 	bl	80135a4 <_Bfree>
 8012fe8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012fea:	2300      	movs	r3, #0
 8012fec:	6013      	str	r3, [r2, #0]
 8012fee:	27a3      	movs	r7, #163	; 0xa3
 8012ff0:	e785      	b.n	8012efe <__gethex+0x12a>
 8012ff2:	1e73      	subs	r3, r6, #1
 8012ff4:	9a05      	ldr	r2, [sp, #20]
 8012ff6:	9303      	str	r3, [sp, #12]
 8012ff8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012ffc:	4293      	cmp	r3, r2
 8012ffe:	d019      	beq.n	8013034 <__gethex+0x260>
 8013000:	f1bb 0f20 	cmp.w	fp, #32
 8013004:	d107      	bne.n	8013016 <__gethex+0x242>
 8013006:	9b02      	ldr	r3, [sp, #8]
 8013008:	9a00      	ldr	r2, [sp, #0]
 801300a:	f843 2b04 	str.w	r2, [r3], #4
 801300e:	9302      	str	r3, [sp, #8]
 8013010:	2300      	movs	r3, #0
 8013012:	9300      	str	r3, [sp, #0]
 8013014:	469b      	mov	fp, r3
 8013016:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801301a:	f7ff fec6 	bl	8012daa <__hexdig_fun>
 801301e:	9b00      	ldr	r3, [sp, #0]
 8013020:	f000 000f 	and.w	r0, r0, #15
 8013024:	fa00 f00b 	lsl.w	r0, r0, fp
 8013028:	4303      	orrs	r3, r0
 801302a:	9300      	str	r3, [sp, #0]
 801302c:	f10b 0b04 	add.w	fp, fp, #4
 8013030:	9b03      	ldr	r3, [sp, #12]
 8013032:	e00d      	b.n	8013050 <__gethex+0x27c>
 8013034:	9b03      	ldr	r3, [sp, #12]
 8013036:	9a06      	ldr	r2, [sp, #24]
 8013038:	4413      	add	r3, r2
 801303a:	42bb      	cmp	r3, r7
 801303c:	d3e0      	bcc.n	8013000 <__gethex+0x22c>
 801303e:	4618      	mov	r0, r3
 8013040:	9901      	ldr	r1, [sp, #4]
 8013042:	9307      	str	r3, [sp, #28]
 8013044:	4652      	mov	r2, sl
 8013046:	f001 fa02 	bl	801444e <strncmp>
 801304a:	9b07      	ldr	r3, [sp, #28]
 801304c:	2800      	cmp	r0, #0
 801304e:	d1d7      	bne.n	8013000 <__gethex+0x22c>
 8013050:	461e      	mov	r6, r3
 8013052:	e78b      	b.n	8012f6c <__gethex+0x198>
 8013054:	f04f 0a03 	mov.w	sl, #3
 8013058:	e7b8      	b.n	8012fcc <__gethex+0x1f8>
 801305a:	da0a      	bge.n	8013072 <__gethex+0x29e>
 801305c:	1a37      	subs	r7, r6, r0
 801305e:	4621      	mov	r1, r4
 8013060:	ee18 0a10 	vmov	r0, s16
 8013064:	463a      	mov	r2, r7
 8013066:	f000 fcb9 	bl	80139dc <__lshift>
 801306a:	1bed      	subs	r5, r5, r7
 801306c:	4604      	mov	r4, r0
 801306e:	f100 0914 	add.w	r9, r0, #20
 8013072:	f04f 0a00 	mov.w	sl, #0
 8013076:	e7ae      	b.n	8012fd6 <__gethex+0x202>
 8013078:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801307c:	42a8      	cmp	r0, r5
 801307e:	dd72      	ble.n	8013166 <__gethex+0x392>
 8013080:	1b45      	subs	r5, r0, r5
 8013082:	42ae      	cmp	r6, r5
 8013084:	dc36      	bgt.n	80130f4 <__gethex+0x320>
 8013086:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801308a:	2b02      	cmp	r3, #2
 801308c:	d02a      	beq.n	80130e4 <__gethex+0x310>
 801308e:	2b03      	cmp	r3, #3
 8013090:	d02c      	beq.n	80130ec <__gethex+0x318>
 8013092:	2b01      	cmp	r3, #1
 8013094:	d115      	bne.n	80130c2 <__gethex+0x2ee>
 8013096:	42ae      	cmp	r6, r5
 8013098:	d113      	bne.n	80130c2 <__gethex+0x2ee>
 801309a:	2e01      	cmp	r6, #1
 801309c:	d10b      	bne.n	80130b6 <__gethex+0x2e2>
 801309e:	9a04      	ldr	r2, [sp, #16]
 80130a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80130a4:	6013      	str	r3, [r2, #0]
 80130a6:	2301      	movs	r3, #1
 80130a8:	6123      	str	r3, [r4, #16]
 80130aa:	f8c9 3000 	str.w	r3, [r9]
 80130ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80130b0:	2762      	movs	r7, #98	; 0x62
 80130b2:	601c      	str	r4, [r3, #0]
 80130b4:	e723      	b.n	8012efe <__gethex+0x12a>
 80130b6:	1e71      	subs	r1, r6, #1
 80130b8:	4620      	mov	r0, r4
 80130ba:	f000 fecd 	bl	8013e58 <__any_on>
 80130be:	2800      	cmp	r0, #0
 80130c0:	d1ed      	bne.n	801309e <__gethex+0x2ca>
 80130c2:	ee18 0a10 	vmov	r0, s16
 80130c6:	4621      	mov	r1, r4
 80130c8:	f000 fa6c 	bl	80135a4 <_Bfree>
 80130cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80130ce:	2300      	movs	r3, #0
 80130d0:	6013      	str	r3, [r2, #0]
 80130d2:	2750      	movs	r7, #80	; 0x50
 80130d4:	e713      	b.n	8012efe <__gethex+0x12a>
 80130d6:	bf00      	nop
 80130d8:	08016560 	.word	0x08016560
 80130dc:	08016483 	.word	0x08016483
 80130e0:	080164f4 	.word	0x080164f4
 80130e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d1eb      	bne.n	80130c2 <__gethex+0x2ee>
 80130ea:	e7d8      	b.n	801309e <__gethex+0x2ca>
 80130ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d1d5      	bne.n	801309e <__gethex+0x2ca>
 80130f2:	e7e6      	b.n	80130c2 <__gethex+0x2ee>
 80130f4:	1e6f      	subs	r7, r5, #1
 80130f6:	f1ba 0f00 	cmp.w	sl, #0
 80130fa:	d131      	bne.n	8013160 <__gethex+0x38c>
 80130fc:	b127      	cbz	r7, 8013108 <__gethex+0x334>
 80130fe:	4639      	mov	r1, r7
 8013100:	4620      	mov	r0, r4
 8013102:	f000 fea9 	bl	8013e58 <__any_on>
 8013106:	4682      	mov	sl, r0
 8013108:	117b      	asrs	r3, r7, #5
 801310a:	2101      	movs	r1, #1
 801310c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8013110:	f007 071f 	and.w	r7, r7, #31
 8013114:	fa01 f707 	lsl.w	r7, r1, r7
 8013118:	421f      	tst	r7, r3
 801311a:	4629      	mov	r1, r5
 801311c:	4620      	mov	r0, r4
 801311e:	bf18      	it	ne
 8013120:	f04a 0a02 	orrne.w	sl, sl, #2
 8013124:	1b76      	subs	r6, r6, r5
 8013126:	f7ff fdee 	bl	8012d06 <rshift>
 801312a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801312e:	2702      	movs	r7, #2
 8013130:	f1ba 0f00 	cmp.w	sl, #0
 8013134:	d048      	beq.n	80131c8 <__gethex+0x3f4>
 8013136:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801313a:	2b02      	cmp	r3, #2
 801313c:	d015      	beq.n	801316a <__gethex+0x396>
 801313e:	2b03      	cmp	r3, #3
 8013140:	d017      	beq.n	8013172 <__gethex+0x39e>
 8013142:	2b01      	cmp	r3, #1
 8013144:	d109      	bne.n	801315a <__gethex+0x386>
 8013146:	f01a 0f02 	tst.w	sl, #2
 801314a:	d006      	beq.n	801315a <__gethex+0x386>
 801314c:	f8d9 0000 	ldr.w	r0, [r9]
 8013150:	ea4a 0a00 	orr.w	sl, sl, r0
 8013154:	f01a 0f01 	tst.w	sl, #1
 8013158:	d10e      	bne.n	8013178 <__gethex+0x3a4>
 801315a:	f047 0710 	orr.w	r7, r7, #16
 801315e:	e033      	b.n	80131c8 <__gethex+0x3f4>
 8013160:	f04f 0a01 	mov.w	sl, #1
 8013164:	e7d0      	b.n	8013108 <__gethex+0x334>
 8013166:	2701      	movs	r7, #1
 8013168:	e7e2      	b.n	8013130 <__gethex+0x35c>
 801316a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801316c:	f1c3 0301 	rsb	r3, r3, #1
 8013170:	9315      	str	r3, [sp, #84]	; 0x54
 8013172:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013174:	2b00      	cmp	r3, #0
 8013176:	d0f0      	beq.n	801315a <__gethex+0x386>
 8013178:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801317c:	f104 0314 	add.w	r3, r4, #20
 8013180:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013184:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013188:	f04f 0c00 	mov.w	ip, #0
 801318c:	4618      	mov	r0, r3
 801318e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013192:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013196:	d01c      	beq.n	80131d2 <__gethex+0x3fe>
 8013198:	3201      	adds	r2, #1
 801319a:	6002      	str	r2, [r0, #0]
 801319c:	2f02      	cmp	r7, #2
 801319e:	f104 0314 	add.w	r3, r4, #20
 80131a2:	d13f      	bne.n	8013224 <__gethex+0x450>
 80131a4:	f8d8 2000 	ldr.w	r2, [r8]
 80131a8:	3a01      	subs	r2, #1
 80131aa:	42b2      	cmp	r2, r6
 80131ac:	d10a      	bne.n	80131c4 <__gethex+0x3f0>
 80131ae:	1171      	asrs	r1, r6, #5
 80131b0:	2201      	movs	r2, #1
 80131b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80131b6:	f006 061f 	and.w	r6, r6, #31
 80131ba:	fa02 f606 	lsl.w	r6, r2, r6
 80131be:	421e      	tst	r6, r3
 80131c0:	bf18      	it	ne
 80131c2:	4617      	movne	r7, r2
 80131c4:	f047 0720 	orr.w	r7, r7, #32
 80131c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80131ca:	601c      	str	r4, [r3, #0]
 80131cc:	9b04      	ldr	r3, [sp, #16]
 80131ce:	601d      	str	r5, [r3, #0]
 80131d0:	e695      	b.n	8012efe <__gethex+0x12a>
 80131d2:	4299      	cmp	r1, r3
 80131d4:	f843 cc04 	str.w	ip, [r3, #-4]
 80131d8:	d8d8      	bhi.n	801318c <__gethex+0x3b8>
 80131da:	68a3      	ldr	r3, [r4, #8]
 80131dc:	459b      	cmp	fp, r3
 80131de:	db19      	blt.n	8013214 <__gethex+0x440>
 80131e0:	6861      	ldr	r1, [r4, #4]
 80131e2:	ee18 0a10 	vmov	r0, s16
 80131e6:	3101      	adds	r1, #1
 80131e8:	f000 f99c 	bl	8013524 <_Balloc>
 80131ec:	4681      	mov	r9, r0
 80131ee:	b918      	cbnz	r0, 80131f8 <__gethex+0x424>
 80131f0:	4b1a      	ldr	r3, [pc, #104]	; (801325c <__gethex+0x488>)
 80131f2:	4602      	mov	r2, r0
 80131f4:	2184      	movs	r1, #132	; 0x84
 80131f6:	e6a8      	b.n	8012f4a <__gethex+0x176>
 80131f8:	6922      	ldr	r2, [r4, #16]
 80131fa:	3202      	adds	r2, #2
 80131fc:	f104 010c 	add.w	r1, r4, #12
 8013200:	0092      	lsls	r2, r2, #2
 8013202:	300c      	adds	r0, #12
 8013204:	f7fc fdae 	bl	800fd64 <memcpy>
 8013208:	4621      	mov	r1, r4
 801320a:	ee18 0a10 	vmov	r0, s16
 801320e:	f000 f9c9 	bl	80135a4 <_Bfree>
 8013212:	464c      	mov	r4, r9
 8013214:	6923      	ldr	r3, [r4, #16]
 8013216:	1c5a      	adds	r2, r3, #1
 8013218:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801321c:	6122      	str	r2, [r4, #16]
 801321e:	2201      	movs	r2, #1
 8013220:	615a      	str	r2, [r3, #20]
 8013222:	e7bb      	b.n	801319c <__gethex+0x3c8>
 8013224:	6922      	ldr	r2, [r4, #16]
 8013226:	455a      	cmp	r2, fp
 8013228:	dd0b      	ble.n	8013242 <__gethex+0x46e>
 801322a:	2101      	movs	r1, #1
 801322c:	4620      	mov	r0, r4
 801322e:	f7ff fd6a 	bl	8012d06 <rshift>
 8013232:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013236:	3501      	adds	r5, #1
 8013238:	42ab      	cmp	r3, r5
 801323a:	f6ff aed0 	blt.w	8012fde <__gethex+0x20a>
 801323e:	2701      	movs	r7, #1
 8013240:	e7c0      	b.n	80131c4 <__gethex+0x3f0>
 8013242:	f016 061f 	ands.w	r6, r6, #31
 8013246:	d0fa      	beq.n	801323e <__gethex+0x46a>
 8013248:	449a      	add	sl, r3
 801324a:	f1c6 0620 	rsb	r6, r6, #32
 801324e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8013252:	f000 fa5d 	bl	8013710 <__hi0bits>
 8013256:	42b0      	cmp	r0, r6
 8013258:	dbe7      	blt.n	801322a <__gethex+0x456>
 801325a:	e7f0      	b.n	801323e <__gethex+0x46a>
 801325c:	08016483 	.word	0x08016483

08013260 <L_shift>:
 8013260:	f1c2 0208 	rsb	r2, r2, #8
 8013264:	0092      	lsls	r2, r2, #2
 8013266:	b570      	push	{r4, r5, r6, lr}
 8013268:	f1c2 0620 	rsb	r6, r2, #32
 801326c:	6843      	ldr	r3, [r0, #4]
 801326e:	6804      	ldr	r4, [r0, #0]
 8013270:	fa03 f506 	lsl.w	r5, r3, r6
 8013274:	432c      	orrs	r4, r5
 8013276:	40d3      	lsrs	r3, r2
 8013278:	6004      	str	r4, [r0, #0]
 801327a:	f840 3f04 	str.w	r3, [r0, #4]!
 801327e:	4288      	cmp	r0, r1
 8013280:	d3f4      	bcc.n	801326c <L_shift+0xc>
 8013282:	bd70      	pop	{r4, r5, r6, pc}

08013284 <__match>:
 8013284:	b530      	push	{r4, r5, lr}
 8013286:	6803      	ldr	r3, [r0, #0]
 8013288:	3301      	adds	r3, #1
 801328a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801328e:	b914      	cbnz	r4, 8013296 <__match+0x12>
 8013290:	6003      	str	r3, [r0, #0]
 8013292:	2001      	movs	r0, #1
 8013294:	bd30      	pop	{r4, r5, pc}
 8013296:	f813 2b01 	ldrb.w	r2, [r3], #1
 801329a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801329e:	2d19      	cmp	r5, #25
 80132a0:	bf98      	it	ls
 80132a2:	3220      	addls	r2, #32
 80132a4:	42a2      	cmp	r2, r4
 80132a6:	d0f0      	beq.n	801328a <__match+0x6>
 80132a8:	2000      	movs	r0, #0
 80132aa:	e7f3      	b.n	8013294 <__match+0x10>

080132ac <__hexnan>:
 80132ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132b0:	680b      	ldr	r3, [r1, #0]
 80132b2:	6801      	ldr	r1, [r0, #0]
 80132b4:	115e      	asrs	r6, r3, #5
 80132b6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80132ba:	f013 031f 	ands.w	r3, r3, #31
 80132be:	b087      	sub	sp, #28
 80132c0:	bf18      	it	ne
 80132c2:	3604      	addne	r6, #4
 80132c4:	2500      	movs	r5, #0
 80132c6:	1f37      	subs	r7, r6, #4
 80132c8:	4682      	mov	sl, r0
 80132ca:	4690      	mov	r8, r2
 80132cc:	9301      	str	r3, [sp, #4]
 80132ce:	f846 5c04 	str.w	r5, [r6, #-4]
 80132d2:	46b9      	mov	r9, r7
 80132d4:	463c      	mov	r4, r7
 80132d6:	9502      	str	r5, [sp, #8]
 80132d8:	46ab      	mov	fp, r5
 80132da:	784a      	ldrb	r2, [r1, #1]
 80132dc:	1c4b      	adds	r3, r1, #1
 80132de:	9303      	str	r3, [sp, #12]
 80132e0:	b342      	cbz	r2, 8013334 <__hexnan+0x88>
 80132e2:	4610      	mov	r0, r2
 80132e4:	9105      	str	r1, [sp, #20]
 80132e6:	9204      	str	r2, [sp, #16]
 80132e8:	f7ff fd5f 	bl	8012daa <__hexdig_fun>
 80132ec:	2800      	cmp	r0, #0
 80132ee:	d14f      	bne.n	8013390 <__hexnan+0xe4>
 80132f0:	9a04      	ldr	r2, [sp, #16]
 80132f2:	9905      	ldr	r1, [sp, #20]
 80132f4:	2a20      	cmp	r2, #32
 80132f6:	d818      	bhi.n	801332a <__hexnan+0x7e>
 80132f8:	9b02      	ldr	r3, [sp, #8]
 80132fa:	459b      	cmp	fp, r3
 80132fc:	dd13      	ble.n	8013326 <__hexnan+0x7a>
 80132fe:	454c      	cmp	r4, r9
 8013300:	d206      	bcs.n	8013310 <__hexnan+0x64>
 8013302:	2d07      	cmp	r5, #7
 8013304:	dc04      	bgt.n	8013310 <__hexnan+0x64>
 8013306:	462a      	mov	r2, r5
 8013308:	4649      	mov	r1, r9
 801330a:	4620      	mov	r0, r4
 801330c:	f7ff ffa8 	bl	8013260 <L_shift>
 8013310:	4544      	cmp	r4, r8
 8013312:	d950      	bls.n	80133b6 <__hexnan+0x10a>
 8013314:	2300      	movs	r3, #0
 8013316:	f1a4 0904 	sub.w	r9, r4, #4
 801331a:	f844 3c04 	str.w	r3, [r4, #-4]
 801331e:	f8cd b008 	str.w	fp, [sp, #8]
 8013322:	464c      	mov	r4, r9
 8013324:	461d      	mov	r5, r3
 8013326:	9903      	ldr	r1, [sp, #12]
 8013328:	e7d7      	b.n	80132da <__hexnan+0x2e>
 801332a:	2a29      	cmp	r2, #41	; 0x29
 801332c:	d156      	bne.n	80133dc <__hexnan+0x130>
 801332e:	3102      	adds	r1, #2
 8013330:	f8ca 1000 	str.w	r1, [sl]
 8013334:	f1bb 0f00 	cmp.w	fp, #0
 8013338:	d050      	beq.n	80133dc <__hexnan+0x130>
 801333a:	454c      	cmp	r4, r9
 801333c:	d206      	bcs.n	801334c <__hexnan+0xa0>
 801333e:	2d07      	cmp	r5, #7
 8013340:	dc04      	bgt.n	801334c <__hexnan+0xa0>
 8013342:	462a      	mov	r2, r5
 8013344:	4649      	mov	r1, r9
 8013346:	4620      	mov	r0, r4
 8013348:	f7ff ff8a 	bl	8013260 <L_shift>
 801334c:	4544      	cmp	r4, r8
 801334e:	d934      	bls.n	80133ba <__hexnan+0x10e>
 8013350:	f1a8 0204 	sub.w	r2, r8, #4
 8013354:	4623      	mov	r3, r4
 8013356:	f853 1b04 	ldr.w	r1, [r3], #4
 801335a:	f842 1f04 	str.w	r1, [r2, #4]!
 801335e:	429f      	cmp	r7, r3
 8013360:	d2f9      	bcs.n	8013356 <__hexnan+0xaa>
 8013362:	1b3b      	subs	r3, r7, r4
 8013364:	f023 0303 	bic.w	r3, r3, #3
 8013368:	3304      	adds	r3, #4
 801336a:	3401      	adds	r4, #1
 801336c:	3e03      	subs	r6, #3
 801336e:	42b4      	cmp	r4, r6
 8013370:	bf88      	it	hi
 8013372:	2304      	movhi	r3, #4
 8013374:	4443      	add	r3, r8
 8013376:	2200      	movs	r2, #0
 8013378:	f843 2b04 	str.w	r2, [r3], #4
 801337c:	429f      	cmp	r7, r3
 801337e:	d2fb      	bcs.n	8013378 <__hexnan+0xcc>
 8013380:	683b      	ldr	r3, [r7, #0]
 8013382:	b91b      	cbnz	r3, 801338c <__hexnan+0xe0>
 8013384:	4547      	cmp	r7, r8
 8013386:	d127      	bne.n	80133d8 <__hexnan+0x12c>
 8013388:	2301      	movs	r3, #1
 801338a:	603b      	str	r3, [r7, #0]
 801338c:	2005      	movs	r0, #5
 801338e:	e026      	b.n	80133de <__hexnan+0x132>
 8013390:	3501      	adds	r5, #1
 8013392:	2d08      	cmp	r5, #8
 8013394:	f10b 0b01 	add.w	fp, fp, #1
 8013398:	dd06      	ble.n	80133a8 <__hexnan+0xfc>
 801339a:	4544      	cmp	r4, r8
 801339c:	d9c3      	bls.n	8013326 <__hexnan+0x7a>
 801339e:	2300      	movs	r3, #0
 80133a0:	f844 3c04 	str.w	r3, [r4, #-4]
 80133a4:	2501      	movs	r5, #1
 80133a6:	3c04      	subs	r4, #4
 80133a8:	6822      	ldr	r2, [r4, #0]
 80133aa:	f000 000f 	and.w	r0, r0, #15
 80133ae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80133b2:	6022      	str	r2, [r4, #0]
 80133b4:	e7b7      	b.n	8013326 <__hexnan+0x7a>
 80133b6:	2508      	movs	r5, #8
 80133b8:	e7b5      	b.n	8013326 <__hexnan+0x7a>
 80133ba:	9b01      	ldr	r3, [sp, #4]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d0df      	beq.n	8013380 <__hexnan+0xd4>
 80133c0:	f04f 32ff 	mov.w	r2, #4294967295
 80133c4:	f1c3 0320 	rsb	r3, r3, #32
 80133c8:	fa22 f303 	lsr.w	r3, r2, r3
 80133cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80133d0:	401a      	ands	r2, r3
 80133d2:	f846 2c04 	str.w	r2, [r6, #-4]
 80133d6:	e7d3      	b.n	8013380 <__hexnan+0xd4>
 80133d8:	3f04      	subs	r7, #4
 80133da:	e7d1      	b.n	8013380 <__hexnan+0xd4>
 80133dc:	2004      	movs	r0, #4
 80133de:	b007      	add	sp, #28
 80133e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080133e4 <_localeconv_r>:
 80133e4:	4800      	ldr	r0, [pc, #0]	; (80133e8 <_localeconv_r+0x4>)
 80133e6:	4770      	bx	lr
 80133e8:	200001b0 	.word	0x200001b0

080133ec <__retarget_lock_init_recursive>:
 80133ec:	4770      	bx	lr

080133ee <__retarget_lock_acquire_recursive>:
 80133ee:	4770      	bx	lr

080133f0 <__retarget_lock_release_recursive>:
 80133f0:	4770      	bx	lr

080133f2 <__swhatbuf_r>:
 80133f2:	b570      	push	{r4, r5, r6, lr}
 80133f4:	460e      	mov	r6, r1
 80133f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133fa:	2900      	cmp	r1, #0
 80133fc:	b096      	sub	sp, #88	; 0x58
 80133fe:	4614      	mov	r4, r2
 8013400:	461d      	mov	r5, r3
 8013402:	da07      	bge.n	8013414 <__swhatbuf_r+0x22>
 8013404:	2300      	movs	r3, #0
 8013406:	602b      	str	r3, [r5, #0]
 8013408:	89b3      	ldrh	r3, [r6, #12]
 801340a:	061a      	lsls	r2, r3, #24
 801340c:	d410      	bmi.n	8013430 <__swhatbuf_r+0x3e>
 801340e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013412:	e00e      	b.n	8013432 <__swhatbuf_r+0x40>
 8013414:	466a      	mov	r2, sp
 8013416:	f001 f85b 	bl	80144d0 <_fstat_r>
 801341a:	2800      	cmp	r0, #0
 801341c:	dbf2      	blt.n	8013404 <__swhatbuf_r+0x12>
 801341e:	9a01      	ldr	r2, [sp, #4]
 8013420:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013424:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013428:	425a      	negs	r2, r3
 801342a:	415a      	adcs	r2, r3
 801342c:	602a      	str	r2, [r5, #0]
 801342e:	e7ee      	b.n	801340e <__swhatbuf_r+0x1c>
 8013430:	2340      	movs	r3, #64	; 0x40
 8013432:	2000      	movs	r0, #0
 8013434:	6023      	str	r3, [r4, #0]
 8013436:	b016      	add	sp, #88	; 0x58
 8013438:	bd70      	pop	{r4, r5, r6, pc}
	...

0801343c <__smakebuf_r>:
 801343c:	898b      	ldrh	r3, [r1, #12]
 801343e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013440:	079d      	lsls	r5, r3, #30
 8013442:	4606      	mov	r6, r0
 8013444:	460c      	mov	r4, r1
 8013446:	d507      	bpl.n	8013458 <__smakebuf_r+0x1c>
 8013448:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801344c:	6023      	str	r3, [r4, #0]
 801344e:	6123      	str	r3, [r4, #16]
 8013450:	2301      	movs	r3, #1
 8013452:	6163      	str	r3, [r4, #20]
 8013454:	b002      	add	sp, #8
 8013456:	bd70      	pop	{r4, r5, r6, pc}
 8013458:	ab01      	add	r3, sp, #4
 801345a:	466a      	mov	r2, sp
 801345c:	f7ff ffc9 	bl	80133f2 <__swhatbuf_r>
 8013460:	9900      	ldr	r1, [sp, #0]
 8013462:	4605      	mov	r5, r0
 8013464:	4630      	mov	r0, r6
 8013466:	f000 fd77 	bl	8013f58 <_malloc_r>
 801346a:	b948      	cbnz	r0, 8013480 <__smakebuf_r+0x44>
 801346c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013470:	059a      	lsls	r2, r3, #22
 8013472:	d4ef      	bmi.n	8013454 <__smakebuf_r+0x18>
 8013474:	f023 0303 	bic.w	r3, r3, #3
 8013478:	f043 0302 	orr.w	r3, r3, #2
 801347c:	81a3      	strh	r3, [r4, #12]
 801347e:	e7e3      	b.n	8013448 <__smakebuf_r+0xc>
 8013480:	4b0d      	ldr	r3, [pc, #52]	; (80134b8 <__smakebuf_r+0x7c>)
 8013482:	62b3      	str	r3, [r6, #40]	; 0x28
 8013484:	89a3      	ldrh	r3, [r4, #12]
 8013486:	6020      	str	r0, [r4, #0]
 8013488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801348c:	81a3      	strh	r3, [r4, #12]
 801348e:	9b00      	ldr	r3, [sp, #0]
 8013490:	6163      	str	r3, [r4, #20]
 8013492:	9b01      	ldr	r3, [sp, #4]
 8013494:	6120      	str	r0, [r4, #16]
 8013496:	b15b      	cbz	r3, 80134b0 <__smakebuf_r+0x74>
 8013498:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801349c:	4630      	mov	r0, r6
 801349e:	f001 f829 	bl	80144f4 <_isatty_r>
 80134a2:	b128      	cbz	r0, 80134b0 <__smakebuf_r+0x74>
 80134a4:	89a3      	ldrh	r3, [r4, #12]
 80134a6:	f023 0303 	bic.w	r3, r3, #3
 80134aa:	f043 0301 	orr.w	r3, r3, #1
 80134ae:	81a3      	strh	r3, [r4, #12]
 80134b0:	89a0      	ldrh	r0, [r4, #12]
 80134b2:	4305      	orrs	r5, r0
 80134b4:	81a5      	strh	r5, [r4, #12]
 80134b6:	e7cd      	b.n	8013454 <__smakebuf_r+0x18>
 80134b8:	08012b65 	.word	0x08012b65

080134bc <malloc>:
 80134bc:	4b02      	ldr	r3, [pc, #8]	; (80134c8 <malloc+0xc>)
 80134be:	4601      	mov	r1, r0
 80134c0:	6818      	ldr	r0, [r3, #0]
 80134c2:	f000 bd49 	b.w	8013f58 <_malloc_r>
 80134c6:	bf00      	nop
 80134c8:	20000058 	.word	0x20000058

080134cc <__ascii_mbtowc>:
 80134cc:	b082      	sub	sp, #8
 80134ce:	b901      	cbnz	r1, 80134d2 <__ascii_mbtowc+0x6>
 80134d0:	a901      	add	r1, sp, #4
 80134d2:	b142      	cbz	r2, 80134e6 <__ascii_mbtowc+0x1a>
 80134d4:	b14b      	cbz	r3, 80134ea <__ascii_mbtowc+0x1e>
 80134d6:	7813      	ldrb	r3, [r2, #0]
 80134d8:	600b      	str	r3, [r1, #0]
 80134da:	7812      	ldrb	r2, [r2, #0]
 80134dc:	1e10      	subs	r0, r2, #0
 80134de:	bf18      	it	ne
 80134e0:	2001      	movne	r0, #1
 80134e2:	b002      	add	sp, #8
 80134e4:	4770      	bx	lr
 80134e6:	4610      	mov	r0, r2
 80134e8:	e7fb      	b.n	80134e2 <__ascii_mbtowc+0x16>
 80134ea:	f06f 0001 	mvn.w	r0, #1
 80134ee:	e7f8      	b.n	80134e2 <__ascii_mbtowc+0x16>

080134f0 <memmove>:
 80134f0:	4288      	cmp	r0, r1
 80134f2:	b510      	push	{r4, lr}
 80134f4:	eb01 0402 	add.w	r4, r1, r2
 80134f8:	d902      	bls.n	8013500 <memmove+0x10>
 80134fa:	4284      	cmp	r4, r0
 80134fc:	4623      	mov	r3, r4
 80134fe:	d807      	bhi.n	8013510 <memmove+0x20>
 8013500:	1e43      	subs	r3, r0, #1
 8013502:	42a1      	cmp	r1, r4
 8013504:	d008      	beq.n	8013518 <memmove+0x28>
 8013506:	f811 2b01 	ldrb.w	r2, [r1], #1
 801350a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801350e:	e7f8      	b.n	8013502 <memmove+0x12>
 8013510:	4402      	add	r2, r0
 8013512:	4601      	mov	r1, r0
 8013514:	428a      	cmp	r2, r1
 8013516:	d100      	bne.n	801351a <memmove+0x2a>
 8013518:	bd10      	pop	{r4, pc}
 801351a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801351e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013522:	e7f7      	b.n	8013514 <memmove+0x24>

08013524 <_Balloc>:
 8013524:	b570      	push	{r4, r5, r6, lr}
 8013526:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013528:	4604      	mov	r4, r0
 801352a:	460d      	mov	r5, r1
 801352c:	b976      	cbnz	r6, 801354c <_Balloc+0x28>
 801352e:	2010      	movs	r0, #16
 8013530:	f7ff ffc4 	bl	80134bc <malloc>
 8013534:	4602      	mov	r2, r0
 8013536:	6260      	str	r0, [r4, #36]	; 0x24
 8013538:	b920      	cbnz	r0, 8013544 <_Balloc+0x20>
 801353a:	4b18      	ldr	r3, [pc, #96]	; (801359c <_Balloc+0x78>)
 801353c:	4818      	ldr	r0, [pc, #96]	; (80135a0 <_Balloc+0x7c>)
 801353e:	2166      	movs	r1, #102	; 0x66
 8013540:	f7fc fbb6 	bl	800fcb0 <__assert_func>
 8013544:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013548:	6006      	str	r6, [r0, #0]
 801354a:	60c6      	str	r6, [r0, #12]
 801354c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801354e:	68f3      	ldr	r3, [r6, #12]
 8013550:	b183      	cbz	r3, 8013574 <_Balloc+0x50>
 8013552:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013554:	68db      	ldr	r3, [r3, #12]
 8013556:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801355a:	b9b8      	cbnz	r0, 801358c <_Balloc+0x68>
 801355c:	2101      	movs	r1, #1
 801355e:	fa01 f605 	lsl.w	r6, r1, r5
 8013562:	1d72      	adds	r2, r6, #5
 8013564:	0092      	lsls	r2, r2, #2
 8013566:	4620      	mov	r0, r4
 8013568:	f000 fc97 	bl	8013e9a <_calloc_r>
 801356c:	b160      	cbz	r0, 8013588 <_Balloc+0x64>
 801356e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013572:	e00e      	b.n	8013592 <_Balloc+0x6e>
 8013574:	2221      	movs	r2, #33	; 0x21
 8013576:	2104      	movs	r1, #4
 8013578:	4620      	mov	r0, r4
 801357a:	f000 fc8e 	bl	8013e9a <_calloc_r>
 801357e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013580:	60f0      	str	r0, [r6, #12]
 8013582:	68db      	ldr	r3, [r3, #12]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d1e4      	bne.n	8013552 <_Balloc+0x2e>
 8013588:	2000      	movs	r0, #0
 801358a:	bd70      	pop	{r4, r5, r6, pc}
 801358c:	6802      	ldr	r2, [r0, #0]
 801358e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013592:	2300      	movs	r3, #0
 8013594:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013598:	e7f7      	b.n	801358a <_Balloc+0x66>
 801359a:	bf00      	nop
 801359c:	0801640d 	.word	0x0801640d
 80135a0:	08016574 	.word	0x08016574

080135a4 <_Bfree>:
 80135a4:	b570      	push	{r4, r5, r6, lr}
 80135a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80135a8:	4605      	mov	r5, r0
 80135aa:	460c      	mov	r4, r1
 80135ac:	b976      	cbnz	r6, 80135cc <_Bfree+0x28>
 80135ae:	2010      	movs	r0, #16
 80135b0:	f7ff ff84 	bl	80134bc <malloc>
 80135b4:	4602      	mov	r2, r0
 80135b6:	6268      	str	r0, [r5, #36]	; 0x24
 80135b8:	b920      	cbnz	r0, 80135c4 <_Bfree+0x20>
 80135ba:	4b09      	ldr	r3, [pc, #36]	; (80135e0 <_Bfree+0x3c>)
 80135bc:	4809      	ldr	r0, [pc, #36]	; (80135e4 <_Bfree+0x40>)
 80135be:	218a      	movs	r1, #138	; 0x8a
 80135c0:	f7fc fb76 	bl	800fcb0 <__assert_func>
 80135c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80135c8:	6006      	str	r6, [r0, #0]
 80135ca:	60c6      	str	r6, [r0, #12]
 80135cc:	b13c      	cbz	r4, 80135de <_Bfree+0x3a>
 80135ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80135d0:	6862      	ldr	r2, [r4, #4]
 80135d2:	68db      	ldr	r3, [r3, #12]
 80135d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80135d8:	6021      	str	r1, [r4, #0]
 80135da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80135de:	bd70      	pop	{r4, r5, r6, pc}
 80135e0:	0801640d 	.word	0x0801640d
 80135e4:	08016574 	.word	0x08016574

080135e8 <__multadd>:
 80135e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135ec:	690e      	ldr	r6, [r1, #16]
 80135ee:	4607      	mov	r7, r0
 80135f0:	4698      	mov	r8, r3
 80135f2:	460c      	mov	r4, r1
 80135f4:	f101 0014 	add.w	r0, r1, #20
 80135f8:	2300      	movs	r3, #0
 80135fa:	6805      	ldr	r5, [r0, #0]
 80135fc:	b2a9      	uxth	r1, r5
 80135fe:	fb02 8101 	mla	r1, r2, r1, r8
 8013602:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8013606:	0c2d      	lsrs	r5, r5, #16
 8013608:	fb02 c505 	mla	r5, r2, r5, ip
 801360c:	b289      	uxth	r1, r1
 801360e:	3301      	adds	r3, #1
 8013610:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8013614:	429e      	cmp	r6, r3
 8013616:	f840 1b04 	str.w	r1, [r0], #4
 801361a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801361e:	dcec      	bgt.n	80135fa <__multadd+0x12>
 8013620:	f1b8 0f00 	cmp.w	r8, #0
 8013624:	d022      	beq.n	801366c <__multadd+0x84>
 8013626:	68a3      	ldr	r3, [r4, #8]
 8013628:	42b3      	cmp	r3, r6
 801362a:	dc19      	bgt.n	8013660 <__multadd+0x78>
 801362c:	6861      	ldr	r1, [r4, #4]
 801362e:	4638      	mov	r0, r7
 8013630:	3101      	adds	r1, #1
 8013632:	f7ff ff77 	bl	8013524 <_Balloc>
 8013636:	4605      	mov	r5, r0
 8013638:	b928      	cbnz	r0, 8013646 <__multadd+0x5e>
 801363a:	4602      	mov	r2, r0
 801363c:	4b0d      	ldr	r3, [pc, #52]	; (8013674 <__multadd+0x8c>)
 801363e:	480e      	ldr	r0, [pc, #56]	; (8013678 <__multadd+0x90>)
 8013640:	21b5      	movs	r1, #181	; 0xb5
 8013642:	f7fc fb35 	bl	800fcb0 <__assert_func>
 8013646:	6922      	ldr	r2, [r4, #16]
 8013648:	3202      	adds	r2, #2
 801364a:	f104 010c 	add.w	r1, r4, #12
 801364e:	0092      	lsls	r2, r2, #2
 8013650:	300c      	adds	r0, #12
 8013652:	f7fc fb87 	bl	800fd64 <memcpy>
 8013656:	4621      	mov	r1, r4
 8013658:	4638      	mov	r0, r7
 801365a:	f7ff ffa3 	bl	80135a4 <_Bfree>
 801365e:	462c      	mov	r4, r5
 8013660:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8013664:	3601      	adds	r6, #1
 8013666:	f8c3 8014 	str.w	r8, [r3, #20]
 801366a:	6126      	str	r6, [r4, #16]
 801366c:	4620      	mov	r0, r4
 801366e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013672:	bf00      	nop
 8013674:	08016483 	.word	0x08016483
 8013678:	08016574 	.word	0x08016574

0801367c <__s2b>:
 801367c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013680:	460c      	mov	r4, r1
 8013682:	4615      	mov	r5, r2
 8013684:	461f      	mov	r7, r3
 8013686:	2209      	movs	r2, #9
 8013688:	3308      	adds	r3, #8
 801368a:	4606      	mov	r6, r0
 801368c:	fb93 f3f2 	sdiv	r3, r3, r2
 8013690:	2100      	movs	r1, #0
 8013692:	2201      	movs	r2, #1
 8013694:	429a      	cmp	r2, r3
 8013696:	db09      	blt.n	80136ac <__s2b+0x30>
 8013698:	4630      	mov	r0, r6
 801369a:	f7ff ff43 	bl	8013524 <_Balloc>
 801369e:	b940      	cbnz	r0, 80136b2 <__s2b+0x36>
 80136a0:	4602      	mov	r2, r0
 80136a2:	4b19      	ldr	r3, [pc, #100]	; (8013708 <__s2b+0x8c>)
 80136a4:	4819      	ldr	r0, [pc, #100]	; (801370c <__s2b+0x90>)
 80136a6:	21ce      	movs	r1, #206	; 0xce
 80136a8:	f7fc fb02 	bl	800fcb0 <__assert_func>
 80136ac:	0052      	lsls	r2, r2, #1
 80136ae:	3101      	adds	r1, #1
 80136b0:	e7f0      	b.n	8013694 <__s2b+0x18>
 80136b2:	9b08      	ldr	r3, [sp, #32]
 80136b4:	6143      	str	r3, [r0, #20]
 80136b6:	2d09      	cmp	r5, #9
 80136b8:	f04f 0301 	mov.w	r3, #1
 80136bc:	6103      	str	r3, [r0, #16]
 80136be:	dd16      	ble.n	80136ee <__s2b+0x72>
 80136c0:	f104 0909 	add.w	r9, r4, #9
 80136c4:	46c8      	mov	r8, r9
 80136c6:	442c      	add	r4, r5
 80136c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80136cc:	4601      	mov	r1, r0
 80136ce:	3b30      	subs	r3, #48	; 0x30
 80136d0:	220a      	movs	r2, #10
 80136d2:	4630      	mov	r0, r6
 80136d4:	f7ff ff88 	bl	80135e8 <__multadd>
 80136d8:	45a0      	cmp	r8, r4
 80136da:	d1f5      	bne.n	80136c8 <__s2b+0x4c>
 80136dc:	f1a5 0408 	sub.w	r4, r5, #8
 80136e0:	444c      	add	r4, r9
 80136e2:	1b2d      	subs	r5, r5, r4
 80136e4:	1963      	adds	r3, r4, r5
 80136e6:	42bb      	cmp	r3, r7
 80136e8:	db04      	blt.n	80136f4 <__s2b+0x78>
 80136ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80136ee:	340a      	adds	r4, #10
 80136f0:	2509      	movs	r5, #9
 80136f2:	e7f6      	b.n	80136e2 <__s2b+0x66>
 80136f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80136f8:	4601      	mov	r1, r0
 80136fa:	3b30      	subs	r3, #48	; 0x30
 80136fc:	220a      	movs	r2, #10
 80136fe:	4630      	mov	r0, r6
 8013700:	f7ff ff72 	bl	80135e8 <__multadd>
 8013704:	e7ee      	b.n	80136e4 <__s2b+0x68>
 8013706:	bf00      	nop
 8013708:	08016483 	.word	0x08016483
 801370c:	08016574 	.word	0x08016574

08013710 <__hi0bits>:
 8013710:	0c03      	lsrs	r3, r0, #16
 8013712:	041b      	lsls	r3, r3, #16
 8013714:	b9d3      	cbnz	r3, 801374c <__hi0bits+0x3c>
 8013716:	0400      	lsls	r0, r0, #16
 8013718:	2310      	movs	r3, #16
 801371a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801371e:	bf04      	itt	eq
 8013720:	0200      	lsleq	r0, r0, #8
 8013722:	3308      	addeq	r3, #8
 8013724:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013728:	bf04      	itt	eq
 801372a:	0100      	lsleq	r0, r0, #4
 801372c:	3304      	addeq	r3, #4
 801372e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013732:	bf04      	itt	eq
 8013734:	0080      	lsleq	r0, r0, #2
 8013736:	3302      	addeq	r3, #2
 8013738:	2800      	cmp	r0, #0
 801373a:	db05      	blt.n	8013748 <__hi0bits+0x38>
 801373c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013740:	f103 0301 	add.w	r3, r3, #1
 8013744:	bf08      	it	eq
 8013746:	2320      	moveq	r3, #32
 8013748:	4618      	mov	r0, r3
 801374a:	4770      	bx	lr
 801374c:	2300      	movs	r3, #0
 801374e:	e7e4      	b.n	801371a <__hi0bits+0xa>

08013750 <__lo0bits>:
 8013750:	6803      	ldr	r3, [r0, #0]
 8013752:	f013 0207 	ands.w	r2, r3, #7
 8013756:	4601      	mov	r1, r0
 8013758:	d00b      	beq.n	8013772 <__lo0bits+0x22>
 801375a:	07da      	lsls	r2, r3, #31
 801375c:	d424      	bmi.n	80137a8 <__lo0bits+0x58>
 801375e:	0798      	lsls	r0, r3, #30
 8013760:	bf49      	itett	mi
 8013762:	085b      	lsrmi	r3, r3, #1
 8013764:	089b      	lsrpl	r3, r3, #2
 8013766:	2001      	movmi	r0, #1
 8013768:	600b      	strmi	r3, [r1, #0]
 801376a:	bf5c      	itt	pl
 801376c:	600b      	strpl	r3, [r1, #0]
 801376e:	2002      	movpl	r0, #2
 8013770:	4770      	bx	lr
 8013772:	b298      	uxth	r0, r3
 8013774:	b9b0      	cbnz	r0, 80137a4 <__lo0bits+0x54>
 8013776:	0c1b      	lsrs	r3, r3, #16
 8013778:	2010      	movs	r0, #16
 801377a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801377e:	bf04      	itt	eq
 8013780:	0a1b      	lsreq	r3, r3, #8
 8013782:	3008      	addeq	r0, #8
 8013784:	071a      	lsls	r2, r3, #28
 8013786:	bf04      	itt	eq
 8013788:	091b      	lsreq	r3, r3, #4
 801378a:	3004      	addeq	r0, #4
 801378c:	079a      	lsls	r2, r3, #30
 801378e:	bf04      	itt	eq
 8013790:	089b      	lsreq	r3, r3, #2
 8013792:	3002      	addeq	r0, #2
 8013794:	07da      	lsls	r2, r3, #31
 8013796:	d403      	bmi.n	80137a0 <__lo0bits+0x50>
 8013798:	085b      	lsrs	r3, r3, #1
 801379a:	f100 0001 	add.w	r0, r0, #1
 801379e:	d005      	beq.n	80137ac <__lo0bits+0x5c>
 80137a0:	600b      	str	r3, [r1, #0]
 80137a2:	4770      	bx	lr
 80137a4:	4610      	mov	r0, r2
 80137a6:	e7e8      	b.n	801377a <__lo0bits+0x2a>
 80137a8:	2000      	movs	r0, #0
 80137aa:	4770      	bx	lr
 80137ac:	2020      	movs	r0, #32
 80137ae:	4770      	bx	lr

080137b0 <__i2b>:
 80137b0:	b510      	push	{r4, lr}
 80137b2:	460c      	mov	r4, r1
 80137b4:	2101      	movs	r1, #1
 80137b6:	f7ff feb5 	bl	8013524 <_Balloc>
 80137ba:	4602      	mov	r2, r0
 80137bc:	b928      	cbnz	r0, 80137ca <__i2b+0x1a>
 80137be:	4b05      	ldr	r3, [pc, #20]	; (80137d4 <__i2b+0x24>)
 80137c0:	4805      	ldr	r0, [pc, #20]	; (80137d8 <__i2b+0x28>)
 80137c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80137c6:	f7fc fa73 	bl	800fcb0 <__assert_func>
 80137ca:	2301      	movs	r3, #1
 80137cc:	6144      	str	r4, [r0, #20]
 80137ce:	6103      	str	r3, [r0, #16]
 80137d0:	bd10      	pop	{r4, pc}
 80137d2:	bf00      	nop
 80137d4:	08016483 	.word	0x08016483
 80137d8:	08016574 	.word	0x08016574

080137dc <__multiply>:
 80137dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137e0:	4614      	mov	r4, r2
 80137e2:	690a      	ldr	r2, [r1, #16]
 80137e4:	6923      	ldr	r3, [r4, #16]
 80137e6:	429a      	cmp	r2, r3
 80137e8:	bfb8      	it	lt
 80137ea:	460b      	movlt	r3, r1
 80137ec:	460d      	mov	r5, r1
 80137ee:	bfbc      	itt	lt
 80137f0:	4625      	movlt	r5, r4
 80137f2:	461c      	movlt	r4, r3
 80137f4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80137f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80137fc:	68ab      	ldr	r3, [r5, #8]
 80137fe:	6869      	ldr	r1, [r5, #4]
 8013800:	eb0a 0709 	add.w	r7, sl, r9
 8013804:	42bb      	cmp	r3, r7
 8013806:	b085      	sub	sp, #20
 8013808:	bfb8      	it	lt
 801380a:	3101      	addlt	r1, #1
 801380c:	f7ff fe8a 	bl	8013524 <_Balloc>
 8013810:	b930      	cbnz	r0, 8013820 <__multiply+0x44>
 8013812:	4602      	mov	r2, r0
 8013814:	4b42      	ldr	r3, [pc, #264]	; (8013920 <__multiply+0x144>)
 8013816:	4843      	ldr	r0, [pc, #268]	; (8013924 <__multiply+0x148>)
 8013818:	f240 115d 	movw	r1, #349	; 0x15d
 801381c:	f7fc fa48 	bl	800fcb0 <__assert_func>
 8013820:	f100 0614 	add.w	r6, r0, #20
 8013824:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8013828:	4633      	mov	r3, r6
 801382a:	2200      	movs	r2, #0
 801382c:	4543      	cmp	r3, r8
 801382e:	d31e      	bcc.n	801386e <__multiply+0x92>
 8013830:	f105 0c14 	add.w	ip, r5, #20
 8013834:	f104 0314 	add.w	r3, r4, #20
 8013838:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801383c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8013840:	9202      	str	r2, [sp, #8]
 8013842:	ebac 0205 	sub.w	r2, ip, r5
 8013846:	3a15      	subs	r2, #21
 8013848:	f022 0203 	bic.w	r2, r2, #3
 801384c:	3204      	adds	r2, #4
 801384e:	f105 0115 	add.w	r1, r5, #21
 8013852:	458c      	cmp	ip, r1
 8013854:	bf38      	it	cc
 8013856:	2204      	movcc	r2, #4
 8013858:	9201      	str	r2, [sp, #4]
 801385a:	9a02      	ldr	r2, [sp, #8]
 801385c:	9303      	str	r3, [sp, #12]
 801385e:	429a      	cmp	r2, r3
 8013860:	d808      	bhi.n	8013874 <__multiply+0x98>
 8013862:	2f00      	cmp	r7, #0
 8013864:	dc55      	bgt.n	8013912 <__multiply+0x136>
 8013866:	6107      	str	r7, [r0, #16]
 8013868:	b005      	add	sp, #20
 801386a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801386e:	f843 2b04 	str.w	r2, [r3], #4
 8013872:	e7db      	b.n	801382c <__multiply+0x50>
 8013874:	f8b3 a000 	ldrh.w	sl, [r3]
 8013878:	f1ba 0f00 	cmp.w	sl, #0
 801387c:	d020      	beq.n	80138c0 <__multiply+0xe4>
 801387e:	f105 0e14 	add.w	lr, r5, #20
 8013882:	46b1      	mov	r9, r6
 8013884:	2200      	movs	r2, #0
 8013886:	f85e 4b04 	ldr.w	r4, [lr], #4
 801388a:	f8d9 b000 	ldr.w	fp, [r9]
 801388e:	b2a1      	uxth	r1, r4
 8013890:	fa1f fb8b 	uxth.w	fp, fp
 8013894:	fb0a b101 	mla	r1, sl, r1, fp
 8013898:	4411      	add	r1, r2
 801389a:	f8d9 2000 	ldr.w	r2, [r9]
 801389e:	0c24      	lsrs	r4, r4, #16
 80138a0:	0c12      	lsrs	r2, r2, #16
 80138a2:	fb0a 2404 	mla	r4, sl, r4, r2
 80138a6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80138aa:	b289      	uxth	r1, r1
 80138ac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80138b0:	45f4      	cmp	ip, lr
 80138b2:	f849 1b04 	str.w	r1, [r9], #4
 80138b6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80138ba:	d8e4      	bhi.n	8013886 <__multiply+0xaa>
 80138bc:	9901      	ldr	r1, [sp, #4]
 80138be:	5072      	str	r2, [r6, r1]
 80138c0:	9a03      	ldr	r2, [sp, #12]
 80138c2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80138c6:	3304      	adds	r3, #4
 80138c8:	f1b9 0f00 	cmp.w	r9, #0
 80138cc:	d01f      	beq.n	801390e <__multiply+0x132>
 80138ce:	6834      	ldr	r4, [r6, #0]
 80138d0:	f105 0114 	add.w	r1, r5, #20
 80138d4:	46b6      	mov	lr, r6
 80138d6:	f04f 0a00 	mov.w	sl, #0
 80138da:	880a      	ldrh	r2, [r1, #0]
 80138dc:	f8be b002 	ldrh.w	fp, [lr, #2]
 80138e0:	fb09 b202 	mla	r2, r9, r2, fp
 80138e4:	4492      	add	sl, r2
 80138e6:	b2a4      	uxth	r4, r4
 80138e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80138ec:	f84e 4b04 	str.w	r4, [lr], #4
 80138f0:	f851 4b04 	ldr.w	r4, [r1], #4
 80138f4:	f8be 2000 	ldrh.w	r2, [lr]
 80138f8:	0c24      	lsrs	r4, r4, #16
 80138fa:	fb09 2404 	mla	r4, r9, r4, r2
 80138fe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8013902:	458c      	cmp	ip, r1
 8013904:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013908:	d8e7      	bhi.n	80138da <__multiply+0xfe>
 801390a:	9a01      	ldr	r2, [sp, #4]
 801390c:	50b4      	str	r4, [r6, r2]
 801390e:	3604      	adds	r6, #4
 8013910:	e7a3      	b.n	801385a <__multiply+0x7e>
 8013912:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013916:	2b00      	cmp	r3, #0
 8013918:	d1a5      	bne.n	8013866 <__multiply+0x8a>
 801391a:	3f01      	subs	r7, #1
 801391c:	e7a1      	b.n	8013862 <__multiply+0x86>
 801391e:	bf00      	nop
 8013920:	08016483 	.word	0x08016483
 8013924:	08016574 	.word	0x08016574

08013928 <__pow5mult>:
 8013928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801392c:	4615      	mov	r5, r2
 801392e:	f012 0203 	ands.w	r2, r2, #3
 8013932:	4606      	mov	r6, r0
 8013934:	460f      	mov	r7, r1
 8013936:	d007      	beq.n	8013948 <__pow5mult+0x20>
 8013938:	4c25      	ldr	r4, [pc, #148]	; (80139d0 <__pow5mult+0xa8>)
 801393a:	3a01      	subs	r2, #1
 801393c:	2300      	movs	r3, #0
 801393e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013942:	f7ff fe51 	bl	80135e8 <__multadd>
 8013946:	4607      	mov	r7, r0
 8013948:	10ad      	asrs	r5, r5, #2
 801394a:	d03d      	beq.n	80139c8 <__pow5mult+0xa0>
 801394c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801394e:	b97c      	cbnz	r4, 8013970 <__pow5mult+0x48>
 8013950:	2010      	movs	r0, #16
 8013952:	f7ff fdb3 	bl	80134bc <malloc>
 8013956:	4602      	mov	r2, r0
 8013958:	6270      	str	r0, [r6, #36]	; 0x24
 801395a:	b928      	cbnz	r0, 8013968 <__pow5mult+0x40>
 801395c:	4b1d      	ldr	r3, [pc, #116]	; (80139d4 <__pow5mult+0xac>)
 801395e:	481e      	ldr	r0, [pc, #120]	; (80139d8 <__pow5mult+0xb0>)
 8013960:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013964:	f7fc f9a4 	bl	800fcb0 <__assert_func>
 8013968:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801396c:	6004      	str	r4, [r0, #0]
 801396e:	60c4      	str	r4, [r0, #12]
 8013970:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013974:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013978:	b94c      	cbnz	r4, 801398e <__pow5mult+0x66>
 801397a:	f240 2171 	movw	r1, #625	; 0x271
 801397e:	4630      	mov	r0, r6
 8013980:	f7ff ff16 	bl	80137b0 <__i2b>
 8013984:	2300      	movs	r3, #0
 8013986:	f8c8 0008 	str.w	r0, [r8, #8]
 801398a:	4604      	mov	r4, r0
 801398c:	6003      	str	r3, [r0, #0]
 801398e:	f04f 0900 	mov.w	r9, #0
 8013992:	07eb      	lsls	r3, r5, #31
 8013994:	d50a      	bpl.n	80139ac <__pow5mult+0x84>
 8013996:	4639      	mov	r1, r7
 8013998:	4622      	mov	r2, r4
 801399a:	4630      	mov	r0, r6
 801399c:	f7ff ff1e 	bl	80137dc <__multiply>
 80139a0:	4639      	mov	r1, r7
 80139a2:	4680      	mov	r8, r0
 80139a4:	4630      	mov	r0, r6
 80139a6:	f7ff fdfd 	bl	80135a4 <_Bfree>
 80139aa:	4647      	mov	r7, r8
 80139ac:	106d      	asrs	r5, r5, #1
 80139ae:	d00b      	beq.n	80139c8 <__pow5mult+0xa0>
 80139b0:	6820      	ldr	r0, [r4, #0]
 80139b2:	b938      	cbnz	r0, 80139c4 <__pow5mult+0x9c>
 80139b4:	4622      	mov	r2, r4
 80139b6:	4621      	mov	r1, r4
 80139b8:	4630      	mov	r0, r6
 80139ba:	f7ff ff0f 	bl	80137dc <__multiply>
 80139be:	6020      	str	r0, [r4, #0]
 80139c0:	f8c0 9000 	str.w	r9, [r0]
 80139c4:	4604      	mov	r4, r0
 80139c6:	e7e4      	b.n	8013992 <__pow5mult+0x6a>
 80139c8:	4638      	mov	r0, r7
 80139ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139ce:	bf00      	nop
 80139d0:	080166c8 	.word	0x080166c8
 80139d4:	0801640d 	.word	0x0801640d
 80139d8:	08016574 	.word	0x08016574

080139dc <__lshift>:
 80139dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139e0:	460c      	mov	r4, r1
 80139e2:	6849      	ldr	r1, [r1, #4]
 80139e4:	6923      	ldr	r3, [r4, #16]
 80139e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80139ea:	68a3      	ldr	r3, [r4, #8]
 80139ec:	4607      	mov	r7, r0
 80139ee:	4691      	mov	r9, r2
 80139f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80139f4:	f108 0601 	add.w	r6, r8, #1
 80139f8:	42b3      	cmp	r3, r6
 80139fa:	db0b      	blt.n	8013a14 <__lshift+0x38>
 80139fc:	4638      	mov	r0, r7
 80139fe:	f7ff fd91 	bl	8013524 <_Balloc>
 8013a02:	4605      	mov	r5, r0
 8013a04:	b948      	cbnz	r0, 8013a1a <__lshift+0x3e>
 8013a06:	4602      	mov	r2, r0
 8013a08:	4b28      	ldr	r3, [pc, #160]	; (8013aac <__lshift+0xd0>)
 8013a0a:	4829      	ldr	r0, [pc, #164]	; (8013ab0 <__lshift+0xd4>)
 8013a0c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013a10:	f7fc f94e 	bl	800fcb0 <__assert_func>
 8013a14:	3101      	adds	r1, #1
 8013a16:	005b      	lsls	r3, r3, #1
 8013a18:	e7ee      	b.n	80139f8 <__lshift+0x1c>
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	f100 0114 	add.w	r1, r0, #20
 8013a20:	f100 0210 	add.w	r2, r0, #16
 8013a24:	4618      	mov	r0, r3
 8013a26:	4553      	cmp	r3, sl
 8013a28:	db33      	blt.n	8013a92 <__lshift+0xb6>
 8013a2a:	6920      	ldr	r0, [r4, #16]
 8013a2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013a30:	f104 0314 	add.w	r3, r4, #20
 8013a34:	f019 091f 	ands.w	r9, r9, #31
 8013a38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013a3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013a40:	d02b      	beq.n	8013a9a <__lshift+0xbe>
 8013a42:	f1c9 0e20 	rsb	lr, r9, #32
 8013a46:	468a      	mov	sl, r1
 8013a48:	2200      	movs	r2, #0
 8013a4a:	6818      	ldr	r0, [r3, #0]
 8013a4c:	fa00 f009 	lsl.w	r0, r0, r9
 8013a50:	4302      	orrs	r2, r0
 8013a52:	f84a 2b04 	str.w	r2, [sl], #4
 8013a56:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a5a:	459c      	cmp	ip, r3
 8013a5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8013a60:	d8f3      	bhi.n	8013a4a <__lshift+0x6e>
 8013a62:	ebac 0304 	sub.w	r3, ip, r4
 8013a66:	3b15      	subs	r3, #21
 8013a68:	f023 0303 	bic.w	r3, r3, #3
 8013a6c:	3304      	adds	r3, #4
 8013a6e:	f104 0015 	add.w	r0, r4, #21
 8013a72:	4584      	cmp	ip, r0
 8013a74:	bf38      	it	cc
 8013a76:	2304      	movcc	r3, #4
 8013a78:	50ca      	str	r2, [r1, r3]
 8013a7a:	b10a      	cbz	r2, 8013a80 <__lshift+0xa4>
 8013a7c:	f108 0602 	add.w	r6, r8, #2
 8013a80:	3e01      	subs	r6, #1
 8013a82:	4638      	mov	r0, r7
 8013a84:	612e      	str	r6, [r5, #16]
 8013a86:	4621      	mov	r1, r4
 8013a88:	f7ff fd8c 	bl	80135a4 <_Bfree>
 8013a8c:	4628      	mov	r0, r5
 8013a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a92:	f842 0f04 	str.w	r0, [r2, #4]!
 8013a96:	3301      	adds	r3, #1
 8013a98:	e7c5      	b.n	8013a26 <__lshift+0x4a>
 8013a9a:	3904      	subs	r1, #4
 8013a9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013aa0:	f841 2f04 	str.w	r2, [r1, #4]!
 8013aa4:	459c      	cmp	ip, r3
 8013aa6:	d8f9      	bhi.n	8013a9c <__lshift+0xc0>
 8013aa8:	e7ea      	b.n	8013a80 <__lshift+0xa4>
 8013aaa:	bf00      	nop
 8013aac:	08016483 	.word	0x08016483
 8013ab0:	08016574 	.word	0x08016574

08013ab4 <__mcmp>:
 8013ab4:	b530      	push	{r4, r5, lr}
 8013ab6:	6902      	ldr	r2, [r0, #16]
 8013ab8:	690c      	ldr	r4, [r1, #16]
 8013aba:	1b12      	subs	r2, r2, r4
 8013abc:	d10e      	bne.n	8013adc <__mcmp+0x28>
 8013abe:	f100 0314 	add.w	r3, r0, #20
 8013ac2:	3114      	adds	r1, #20
 8013ac4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013ac8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013acc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013ad0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013ad4:	42a5      	cmp	r5, r4
 8013ad6:	d003      	beq.n	8013ae0 <__mcmp+0x2c>
 8013ad8:	d305      	bcc.n	8013ae6 <__mcmp+0x32>
 8013ada:	2201      	movs	r2, #1
 8013adc:	4610      	mov	r0, r2
 8013ade:	bd30      	pop	{r4, r5, pc}
 8013ae0:	4283      	cmp	r3, r0
 8013ae2:	d3f3      	bcc.n	8013acc <__mcmp+0x18>
 8013ae4:	e7fa      	b.n	8013adc <__mcmp+0x28>
 8013ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8013aea:	e7f7      	b.n	8013adc <__mcmp+0x28>

08013aec <__mdiff>:
 8013aec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013af0:	460c      	mov	r4, r1
 8013af2:	4606      	mov	r6, r0
 8013af4:	4611      	mov	r1, r2
 8013af6:	4620      	mov	r0, r4
 8013af8:	4617      	mov	r7, r2
 8013afa:	f7ff ffdb 	bl	8013ab4 <__mcmp>
 8013afe:	1e05      	subs	r5, r0, #0
 8013b00:	d110      	bne.n	8013b24 <__mdiff+0x38>
 8013b02:	4629      	mov	r1, r5
 8013b04:	4630      	mov	r0, r6
 8013b06:	f7ff fd0d 	bl	8013524 <_Balloc>
 8013b0a:	b930      	cbnz	r0, 8013b1a <__mdiff+0x2e>
 8013b0c:	4b39      	ldr	r3, [pc, #228]	; (8013bf4 <__mdiff+0x108>)
 8013b0e:	4602      	mov	r2, r0
 8013b10:	f240 2132 	movw	r1, #562	; 0x232
 8013b14:	4838      	ldr	r0, [pc, #224]	; (8013bf8 <__mdiff+0x10c>)
 8013b16:	f7fc f8cb 	bl	800fcb0 <__assert_func>
 8013b1a:	2301      	movs	r3, #1
 8013b1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013b20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b24:	bfa4      	itt	ge
 8013b26:	463b      	movge	r3, r7
 8013b28:	4627      	movge	r7, r4
 8013b2a:	4630      	mov	r0, r6
 8013b2c:	6879      	ldr	r1, [r7, #4]
 8013b2e:	bfa6      	itte	ge
 8013b30:	461c      	movge	r4, r3
 8013b32:	2500      	movge	r5, #0
 8013b34:	2501      	movlt	r5, #1
 8013b36:	f7ff fcf5 	bl	8013524 <_Balloc>
 8013b3a:	b920      	cbnz	r0, 8013b46 <__mdiff+0x5a>
 8013b3c:	4b2d      	ldr	r3, [pc, #180]	; (8013bf4 <__mdiff+0x108>)
 8013b3e:	4602      	mov	r2, r0
 8013b40:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013b44:	e7e6      	b.n	8013b14 <__mdiff+0x28>
 8013b46:	693e      	ldr	r6, [r7, #16]
 8013b48:	60c5      	str	r5, [r0, #12]
 8013b4a:	6925      	ldr	r5, [r4, #16]
 8013b4c:	f107 0114 	add.w	r1, r7, #20
 8013b50:	f104 0914 	add.w	r9, r4, #20
 8013b54:	f100 0e14 	add.w	lr, r0, #20
 8013b58:	f107 0210 	add.w	r2, r7, #16
 8013b5c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8013b60:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8013b64:	46f2      	mov	sl, lr
 8013b66:	2700      	movs	r7, #0
 8013b68:	f859 3b04 	ldr.w	r3, [r9], #4
 8013b6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013b70:	fa1f f883 	uxth.w	r8, r3
 8013b74:	fa17 f78b 	uxtah	r7, r7, fp
 8013b78:	0c1b      	lsrs	r3, r3, #16
 8013b7a:	eba7 0808 	sub.w	r8, r7, r8
 8013b7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013b82:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013b86:	fa1f f888 	uxth.w	r8, r8
 8013b8a:	141f      	asrs	r7, r3, #16
 8013b8c:	454d      	cmp	r5, r9
 8013b8e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013b92:	f84a 3b04 	str.w	r3, [sl], #4
 8013b96:	d8e7      	bhi.n	8013b68 <__mdiff+0x7c>
 8013b98:	1b2b      	subs	r3, r5, r4
 8013b9a:	3b15      	subs	r3, #21
 8013b9c:	f023 0303 	bic.w	r3, r3, #3
 8013ba0:	3304      	adds	r3, #4
 8013ba2:	3415      	adds	r4, #21
 8013ba4:	42a5      	cmp	r5, r4
 8013ba6:	bf38      	it	cc
 8013ba8:	2304      	movcc	r3, #4
 8013baa:	4419      	add	r1, r3
 8013bac:	4473      	add	r3, lr
 8013bae:	469e      	mov	lr, r3
 8013bb0:	460d      	mov	r5, r1
 8013bb2:	4565      	cmp	r5, ip
 8013bb4:	d30e      	bcc.n	8013bd4 <__mdiff+0xe8>
 8013bb6:	f10c 0203 	add.w	r2, ip, #3
 8013bba:	1a52      	subs	r2, r2, r1
 8013bbc:	f022 0203 	bic.w	r2, r2, #3
 8013bc0:	3903      	subs	r1, #3
 8013bc2:	458c      	cmp	ip, r1
 8013bc4:	bf38      	it	cc
 8013bc6:	2200      	movcc	r2, #0
 8013bc8:	441a      	add	r2, r3
 8013bca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013bce:	b17b      	cbz	r3, 8013bf0 <__mdiff+0x104>
 8013bd0:	6106      	str	r6, [r0, #16]
 8013bd2:	e7a5      	b.n	8013b20 <__mdiff+0x34>
 8013bd4:	f855 8b04 	ldr.w	r8, [r5], #4
 8013bd8:	fa17 f488 	uxtah	r4, r7, r8
 8013bdc:	1422      	asrs	r2, r4, #16
 8013bde:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8013be2:	b2a4      	uxth	r4, r4
 8013be4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8013be8:	f84e 4b04 	str.w	r4, [lr], #4
 8013bec:	1417      	asrs	r7, r2, #16
 8013bee:	e7e0      	b.n	8013bb2 <__mdiff+0xc6>
 8013bf0:	3e01      	subs	r6, #1
 8013bf2:	e7ea      	b.n	8013bca <__mdiff+0xde>
 8013bf4:	08016483 	.word	0x08016483
 8013bf8:	08016574 	.word	0x08016574

08013bfc <__ulp>:
 8013bfc:	b082      	sub	sp, #8
 8013bfe:	ed8d 0b00 	vstr	d0, [sp]
 8013c02:	9b01      	ldr	r3, [sp, #4]
 8013c04:	4912      	ldr	r1, [pc, #72]	; (8013c50 <__ulp+0x54>)
 8013c06:	4019      	ands	r1, r3
 8013c08:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8013c0c:	2900      	cmp	r1, #0
 8013c0e:	dd05      	ble.n	8013c1c <__ulp+0x20>
 8013c10:	2200      	movs	r2, #0
 8013c12:	460b      	mov	r3, r1
 8013c14:	ec43 2b10 	vmov	d0, r2, r3
 8013c18:	b002      	add	sp, #8
 8013c1a:	4770      	bx	lr
 8013c1c:	4249      	negs	r1, r1
 8013c1e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8013c22:	ea4f 5021 	mov.w	r0, r1, asr #20
 8013c26:	f04f 0200 	mov.w	r2, #0
 8013c2a:	f04f 0300 	mov.w	r3, #0
 8013c2e:	da04      	bge.n	8013c3a <__ulp+0x3e>
 8013c30:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8013c34:	fa41 f300 	asr.w	r3, r1, r0
 8013c38:	e7ec      	b.n	8013c14 <__ulp+0x18>
 8013c3a:	f1a0 0114 	sub.w	r1, r0, #20
 8013c3e:	291e      	cmp	r1, #30
 8013c40:	bfda      	itte	le
 8013c42:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8013c46:	fa20 f101 	lsrle.w	r1, r0, r1
 8013c4a:	2101      	movgt	r1, #1
 8013c4c:	460a      	mov	r2, r1
 8013c4e:	e7e1      	b.n	8013c14 <__ulp+0x18>
 8013c50:	7ff00000 	.word	0x7ff00000

08013c54 <__b2d>:
 8013c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c56:	6905      	ldr	r5, [r0, #16]
 8013c58:	f100 0714 	add.w	r7, r0, #20
 8013c5c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013c60:	1f2e      	subs	r6, r5, #4
 8013c62:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013c66:	4620      	mov	r0, r4
 8013c68:	f7ff fd52 	bl	8013710 <__hi0bits>
 8013c6c:	f1c0 0320 	rsb	r3, r0, #32
 8013c70:	280a      	cmp	r0, #10
 8013c72:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8013cf0 <__b2d+0x9c>
 8013c76:	600b      	str	r3, [r1, #0]
 8013c78:	dc14      	bgt.n	8013ca4 <__b2d+0x50>
 8013c7a:	f1c0 0e0b 	rsb	lr, r0, #11
 8013c7e:	fa24 f10e 	lsr.w	r1, r4, lr
 8013c82:	42b7      	cmp	r7, r6
 8013c84:	ea41 030c 	orr.w	r3, r1, ip
 8013c88:	bf34      	ite	cc
 8013c8a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013c8e:	2100      	movcs	r1, #0
 8013c90:	3015      	adds	r0, #21
 8013c92:	fa04 f000 	lsl.w	r0, r4, r0
 8013c96:	fa21 f10e 	lsr.w	r1, r1, lr
 8013c9a:	ea40 0201 	orr.w	r2, r0, r1
 8013c9e:	ec43 2b10 	vmov	d0, r2, r3
 8013ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ca4:	42b7      	cmp	r7, r6
 8013ca6:	bf3a      	itte	cc
 8013ca8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013cac:	f1a5 0608 	subcc.w	r6, r5, #8
 8013cb0:	2100      	movcs	r1, #0
 8013cb2:	380b      	subs	r0, #11
 8013cb4:	d017      	beq.n	8013ce6 <__b2d+0x92>
 8013cb6:	f1c0 0c20 	rsb	ip, r0, #32
 8013cba:	fa04 f500 	lsl.w	r5, r4, r0
 8013cbe:	42be      	cmp	r6, r7
 8013cc0:	fa21 f40c 	lsr.w	r4, r1, ip
 8013cc4:	ea45 0504 	orr.w	r5, r5, r4
 8013cc8:	bf8c      	ite	hi
 8013cca:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013cce:	2400      	movls	r4, #0
 8013cd0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8013cd4:	fa01 f000 	lsl.w	r0, r1, r0
 8013cd8:	fa24 f40c 	lsr.w	r4, r4, ip
 8013cdc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013ce0:	ea40 0204 	orr.w	r2, r0, r4
 8013ce4:	e7db      	b.n	8013c9e <__b2d+0x4a>
 8013ce6:	ea44 030c 	orr.w	r3, r4, ip
 8013cea:	460a      	mov	r2, r1
 8013cec:	e7d7      	b.n	8013c9e <__b2d+0x4a>
 8013cee:	bf00      	nop
 8013cf0:	3ff00000 	.word	0x3ff00000

08013cf4 <__d2b>:
 8013cf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013cf8:	4689      	mov	r9, r1
 8013cfa:	2101      	movs	r1, #1
 8013cfc:	ec57 6b10 	vmov	r6, r7, d0
 8013d00:	4690      	mov	r8, r2
 8013d02:	f7ff fc0f 	bl	8013524 <_Balloc>
 8013d06:	4604      	mov	r4, r0
 8013d08:	b930      	cbnz	r0, 8013d18 <__d2b+0x24>
 8013d0a:	4602      	mov	r2, r0
 8013d0c:	4b25      	ldr	r3, [pc, #148]	; (8013da4 <__d2b+0xb0>)
 8013d0e:	4826      	ldr	r0, [pc, #152]	; (8013da8 <__d2b+0xb4>)
 8013d10:	f240 310a 	movw	r1, #778	; 0x30a
 8013d14:	f7fb ffcc 	bl	800fcb0 <__assert_func>
 8013d18:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013d1c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013d20:	bb35      	cbnz	r5, 8013d70 <__d2b+0x7c>
 8013d22:	2e00      	cmp	r6, #0
 8013d24:	9301      	str	r3, [sp, #4]
 8013d26:	d028      	beq.n	8013d7a <__d2b+0x86>
 8013d28:	4668      	mov	r0, sp
 8013d2a:	9600      	str	r6, [sp, #0]
 8013d2c:	f7ff fd10 	bl	8013750 <__lo0bits>
 8013d30:	9900      	ldr	r1, [sp, #0]
 8013d32:	b300      	cbz	r0, 8013d76 <__d2b+0x82>
 8013d34:	9a01      	ldr	r2, [sp, #4]
 8013d36:	f1c0 0320 	rsb	r3, r0, #32
 8013d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8013d3e:	430b      	orrs	r3, r1
 8013d40:	40c2      	lsrs	r2, r0
 8013d42:	6163      	str	r3, [r4, #20]
 8013d44:	9201      	str	r2, [sp, #4]
 8013d46:	9b01      	ldr	r3, [sp, #4]
 8013d48:	61a3      	str	r3, [r4, #24]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	bf14      	ite	ne
 8013d4e:	2202      	movne	r2, #2
 8013d50:	2201      	moveq	r2, #1
 8013d52:	6122      	str	r2, [r4, #16]
 8013d54:	b1d5      	cbz	r5, 8013d8c <__d2b+0x98>
 8013d56:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013d5a:	4405      	add	r5, r0
 8013d5c:	f8c9 5000 	str.w	r5, [r9]
 8013d60:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013d64:	f8c8 0000 	str.w	r0, [r8]
 8013d68:	4620      	mov	r0, r4
 8013d6a:	b003      	add	sp, #12
 8013d6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013d74:	e7d5      	b.n	8013d22 <__d2b+0x2e>
 8013d76:	6161      	str	r1, [r4, #20]
 8013d78:	e7e5      	b.n	8013d46 <__d2b+0x52>
 8013d7a:	a801      	add	r0, sp, #4
 8013d7c:	f7ff fce8 	bl	8013750 <__lo0bits>
 8013d80:	9b01      	ldr	r3, [sp, #4]
 8013d82:	6163      	str	r3, [r4, #20]
 8013d84:	2201      	movs	r2, #1
 8013d86:	6122      	str	r2, [r4, #16]
 8013d88:	3020      	adds	r0, #32
 8013d8a:	e7e3      	b.n	8013d54 <__d2b+0x60>
 8013d8c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013d90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013d94:	f8c9 0000 	str.w	r0, [r9]
 8013d98:	6918      	ldr	r0, [r3, #16]
 8013d9a:	f7ff fcb9 	bl	8013710 <__hi0bits>
 8013d9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013da2:	e7df      	b.n	8013d64 <__d2b+0x70>
 8013da4:	08016483 	.word	0x08016483
 8013da8:	08016574 	.word	0x08016574

08013dac <__ratio>:
 8013dac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013db0:	4688      	mov	r8, r1
 8013db2:	4669      	mov	r1, sp
 8013db4:	4681      	mov	r9, r0
 8013db6:	f7ff ff4d 	bl	8013c54 <__b2d>
 8013dba:	a901      	add	r1, sp, #4
 8013dbc:	4640      	mov	r0, r8
 8013dbe:	ec55 4b10 	vmov	r4, r5, d0
 8013dc2:	f7ff ff47 	bl	8013c54 <__b2d>
 8013dc6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013dca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013dce:	eba3 0c02 	sub.w	ip, r3, r2
 8013dd2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013dd6:	1a9b      	subs	r3, r3, r2
 8013dd8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013ddc:	ec51 0b10 	vmov	r0, r1, d0
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	bfd6      	itet	le
 8013de4:	460a      	movle	r2, r1
 8013de6:	462a      	movgt	r2, r5
 8013de8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013dec:	468b      	mov	fp, r1
 8013dee:	462f      	mov	r7, r5
 8013df0:	bfd4      	ite	le
 8013df2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013df6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013dfa:	4620      	mov	r0, r4
 8013dfc:	ee10 2a10 	vmov	r2, s0
 8013e00:	465b      	mov	r3, fp
 8013e02:	4639      	mov	r1, r7
 8013e04:	f7ec fd2a 	bl	800085c <__aeabi_ddiv>
 8013e08:	ec41 0b10 	vmov	d0, r0, r1
 8013e0c:	b003      	add	sp, #12
 8013e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013e12 <__copybits>:
 8013e12:	3901      	subs	r1, #1
 8013e14:	b570      	push	{r4, r5, r6, lr}
 8013e16:	1149      	asrs	r1, r1, #5
 8013e18:	6914      	ldr	r4, [r2, #16]
 8013e1a:	3101      	adds	r1, #1
 8013e1c:	f102 0314 	add.w	r3, r2, #20
 8013e20:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013e24:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013e28:	1f05      	subs	r5, r0, #4
 8013e2a:	42a3      	cmp	r3, r4
 8013e2c:	d30c      	bcc.n	8013e48 <__copybits+0x36>
 8013e2e:	1aa3      	subs	r3, r4, r2
 8013e30:	3b11      	subs	r3, #17
 8013e32:	f023 0303 	bic.w	r3, r3, #3
 8013e36:	3211      	adds	r2, #17
 8013e38:	42a2      	cmp	r2, r4
 8013e3a:	bf88      	it	hi
 8013e3c:	2300      	movhi	r3, #0
 8013e3e:	4418      	add	r0, r3
 8013e40:	2300      	movs	r3, #0
 8013e42:	4288      	cmp	r0, r1
 8013e44:	d305      	bcc.n	8013e52 <__copybits+0x40>
 8013e46:	bd70      	pop	{r4, r5, r6, pc}
 8013e48:	f853 6b04 	ldr.w	r6, [r3], #4
 8013e4c:	f845 6f04 	str.w	r6, [r5, #4]!
 8013e50:	e7eb      	b.n	8013e2a <__copybits+0x18>
 8013e52:	f840 3b04 	str.w	r3, [r0], #4
 8013e56:	e7f4      	b.n	8013e42 <__copybits+0x30>

08013e58 <__any_on>:
 8013e58:	f100 0214 	add.w	r2, r0, #20
 8013e5c:	6900      	ldr	r0, [r0, #16]
 8013e5e:	114b      	asrs	r3, r1, #5
 8013e60:	4298      	cmp	r0, r3
 8013e62:	b510      	push	{r4, lr}
 8013e64:	db11      	blt.n	8013e8a <__any_on+0x32>
 8013e66:	dd0a      	ble.n	8013e7e <__any_on+0x26>
 8013e68:	f011 011f 	ands.w	r1, r1, #31
 8013e6c:	d007      	beq.n	8013e7e <__any_on+0x26>
 8013e6e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013e72:	fa24 f001 	lsr.w	r0, r4, r1
 8013e76:	fa00 f101 	lsl.w	r1, r0, r1
 8013e7a:	428c      	cmp	r4, r1
 8013e7c:	d10b      	bne.n	8013e96 <__any_on+0x3e>
 8013e7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013e82:	4293      	cmp	r3, r2
 8013e84:	d803      	bhi.n	8013e8e <__any_on+0x36>
 8013e86:	2000      	movs	r0, #0
 8013e88:	bd10      	pop	{r4, pc}
 8013e8a:	4603      	mov	r3, r0
 8013e8c:	e7f7      	b.n	8013e7e <__any_on+0x26>
 8013e8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013e92:	2900      	cmp	r1, #0
 8013e94:	d0f5      	beq.n	8013e82 <__any_on+0x2a>
 8013e96:	2001      	movs	r0, #1
 8013e98:	e7f6      	b.n	8013e88 <__any_on+0x30>

08013e9a <_calloc_r>:
 8013e9a:	b513      	push	{r0, r1, r4, lr}
 8013e9c:	434a      	muls	r2, r1
 8013e9e:	4611      	mov	r1, r2
 8013ea0:	9201      	str	r2, [sp, #4]
 8013ea2:	f000 f859 	bl	8013f58 <_malloc_r>
 8013ea6:	4604      	mov	r4, r0
 8013ea8:	b118      	cbz	r0, 8013eb2 <_calloc_r+0x18>
 8013eaa:	9a01      	ldr	r2, [sp, #4]
 8013eac:	2100      	movs	r1, #0
 8013eae:	f7fb ff67 	bl	800fd80 <memset>
 8013eb2:	4620      	mov	r0, r4
 8013eb4:	b002      	add	sp, #8
 8013eb6:	bd10      	pop	{r4, pc}

08013eb8 <_free_r>:
 8013eb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013eba:	2900      	cmp	r1, #0
 8013ebc:	d048      	beq.n	8013f50 <_free_r+0x98>
 8013ebe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013ec2:	9001      	str	r0, [sp, #4]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	f1a1 0404 	sub.w	r4, r1, #4
 8013eca:	bfb8      	it	lt
 8013ecc:	18e4      	addlt	r4, r4, r3
 8013ece:	f000 fb33 	bl	8014538 <__malloc_lock>
 8013ed2:	4a20      	ldr	r2, [pc, #128]	; (8013f54 <_free_r+0x9c>)
 8013ed4:	9801      	ldr	r0, [sp, #4]
 8013ed6:	6813      	ldr	r3, [r2, #0]
 8013ed8:	4615      	mov	r5, r2
 8013eda:	b933      	cbnz	r3, 8013eea <_free_r+0x32>
 8013edc:	6063      	str	r3, [r4, #4]
 8013ede:	6014      	str	r4, [r2, #0]
 8013ee0:	b003      	add	sp, #12
 8013ee2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013ee6:	f000 bb2d 	b.w	8014544 <__malloc_unlock>
 8013eea:	42a3      	cmp	r3, r4
 8013eec:	d90b      	bls.n	8013f06 <_free_r+0x4e>
 8013eee:	6821      	ldr	r1, [r4, #0]
 8013ef0:	1862      	adds	r2, r4, r1
 8013ef2:	4293      	cmp	r3, r2
 8013ef4:	bf04      	itt	eq
 8013ef6:	681a      	ldreq	r2, [r3, #0]
 8013ef8:	685b      	ldreq	r3, [r3, #4]
 8013efa:	6063      	str	r3, [r4, #4]
 8013efc:	bf04      	itt	eq
 8013efe:	1852      	addeq	r2, r2, r1
 8013f00:	6022      	streq	r2, [r4, #0]
 8013f02:	602c      	str	r4, [r5, #0]
 8013f04:	e7ec      	b.n	8013ee0 <_free_r+0x28>
 8013f06:	461a      	mov	r2, r3
 8013f08:	685b      	ldr	r3, [r3, #4]
 8013f0a:	b10b      	cbz	r3, 8013f10 <_free_r+0x58>
 8013f0c:	42a3      	cmp	r3, r4
 8013f0e:	d9fa      	bls.n	8013f06 <_free_r+0x4e>
 8013f10:	6811      	ldr	r1, [r2, #0]
 8013f12:	1855      	adds	r5, r2, r1
 8013f14:	42a5      	cmp	r5, r4
 8013f16:	d10b      	bne.n	8013f30 <_free_r+0x78>
 8013f18:	6824      	ldr	r4, [r4, #0]
 8013f1a:	4421      	add	r1, r4
 8013f1c:	1854      	adds	r4, r2, r1
 8013f1e:	42a3      	cmp	r3, r4
 8013f20:	6011      	str	r1, [r2, #0]
 8013f22:	d1dd      	bne.n	8013ee0 <_free_r+0x28>
 8013f24:	681c      	ldr	r4, [r3, #0]
 8013f26:	685b      	ldr	r3, [r3, #4]
 8013f28:	6053      	str	r3, [r2, #4]
 8013f2a:	4421      	add	r1, r4
 8013f2c:	6011      	str	r1, [r2, #0]
 8013f2e:	e7d7      	b.n	8013ee0 <_free_r+0x28>
 8013f30:	d902      	bls.n	8013f38 <_free_r+0x80>
 8013f32:	230c      	movs	r3, #12
 8013f34:	6003      	str	r3, [r0, #0]
 8013f36:	e7d3      	b.n	8013ee0 <_free_r+0x28>
 8013f38:	6825      	ldr	r5, [r4, #0]
 8013f3a:	1961      	adds	r1, r4, r5
 8013f3c:	428b      	cmp	r3, r1
 8013f3e:	bf04      	itt	eq
 8013f40:	6819      	ldreq	r1, [r3, #0]
 8013f42:	685b      	ldreq	r3, [r3, #4]
 8013f44:	6063      	str	r3, [r4, #4]
 8013f46:	bf04      	itt	eq
 8013f48:	1949      	addeq	r1, r1, r5
 8013f4a:	6021      	streq	r1, [r4, #0]
 8013f4c:	6054      	str	r4, [r2, #4]
 8013f4e:	e7c7      	b.n	8013ee0 <_free_r+0x28>
 8013f50:	b003      	add	sp, #12
 8013f52:	bd30      	pop	{r4, r5, pc}
 8013f54:	2000273c 	.word	0x2000273c

08013f58 <_malloc_r>:
 8013f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f5a:	1ccd      	adds	r5, r1, #3
 8013f5c:	f025 0503 	bic.w	r5, r5, #3
 8013f60:	3508      	adds	r5, #8
 8013f62:	2d0c      	cmp	r5, #12
 8013f64:	bf38      	it	cc
 8013f66:	250c      	movcc	r5, #12
 8013f68:	2d00      	cmp	r5, #0
 8013f6a:	4606      	mov	r6, r0
 8013f6c:	db01      	blt.n	8013f72 <_malloc_r+0x1a>
 8013f6e:	42a9      	cmp	r1, r5
 8013f70:	d903      	bls.n	8013f7a <_malloc_r+0x22>
 8013f72:	230c      	movs	r3, #12
 8013f74:	6033      	str	r3, [r6, #0]
 8013f76:	2000      	movs	r0, #0
 8013f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f7a:	f000 fadd 	bl	8014538 <__malloc_lock>
 8013f7e:	4921      	ldr	r1, [pc, #132]	; (8014004 <_malloc_r+0xac>)
 8013f80:	680a      	ldr	r2, [r1, #0]
 8013f82:	4614      	mov	r4, r2
 8013f84:	b99c      	cbnz	r4, 8013fae <_malloc_r+0x56>
 8013f86:	4f20      	ldr	r7, [pc, #128]	; (8014008 <_malloc_r+0xb0>)
 8013f88:	683b      	ldr	r3, [r7, #0]
 8013f8a:	b923      	cbnz	r3, 8013f96 <_malloc_r+0x3e>
 8013f8c:	4621      	mov	r1, r4
 8013f8e:	4630      	mov	r0, r6
 8013f90:	f000 f9c6 	bl	8014320 <_sbrk_r>
 8013f94:	6038      	str	r0, [r7, #0]
 8013f96:	4629      	mov	r1, r5
 8013f98:	4630      	mov	r0, r6
 8013f9a:	f000 f9c1 	bl	8014320 <_sbrk_r>
 8013f9e:	1c43      	adds	r3, r0, #1
 8013fa0:	d123      	bne.n	8013fea <_malloc_r+0x92>
 8013fa2:	230c      	movs	r3, #12
 8013fa4:	6033      	str	r3, [r6, #0]
 8013fa6:	4630      	mov	r0, r6
 8013fa8:	f000 facc 	bl	8014544 <__malloc_unlock>
 8013fac:	e7e3      	b.n	8013f76 <_malloc_r+0x1e>
 8013fae:	6823      	ldr	r3, [r4, #0]
 8013fb0:	1b5b      	subs	r3, r3, r5
 8013fb2:	d417      	bmi.n	8013fe4 <_malloc_r+0x8c>
 8013fb4:	2b0b      	cmp	r3, #11
 8013fb6:	d903      	bls.n	8013fc0 <_malloc_r+0x68>
 8013fb8:	6023      	str	r3, [r4, #0]
 8013fba:	441c      	add	r4, r3
 8013fbc:	6025      	str	r5, [r4, #0]
 8013fbe:	e004      	b.n	8013fca <_malloc_r+0x72>
 8013fc0:	6863      	ldr	r3, [r4, #4]
 8013fc2:	42a2      	cmp	r2, r4
 8013fc4:	bf0c      	ite	eq
 8013fc6:	600b      	streq	r3, [r1, #0]
 8013fc8:	6053      	strne	r3, [r2, #4]
 8013fca:	4630      	mov	r0, r6
 8013fcc:	f000 faba 	bl	8014544 <__malloc_unlock>
 8013fd0:	f104 000b 	add.w	r0, r4, #11
 8013fd4:	1d23      	adds	r3, r4, #4
 8013fd6:	f020 0007 	bic.w	r0, r0, #7
 8013fda:	1ac2      	subs	r2, r0, r3
 8013fdc:	d0cc      	beq.n	8013f78 <_malloc_r+0x20>
 8013fde:	1a1b      	subs	r3, r3, r0
 8013fe0:	50a3      	str	r3, [r4, r2]
 8013fe2:	e7c9      	b.n	8013f78 <_malloc_r+0x20>
 8013fe4:	4622      	mov	r2, r4
 8013fe6:	6864      	ldr	r4, [r4, #4]
 8013fe8:	e7cc      	b.n	8013f84 <_malloc_r+0x2c>
 8013fea:	1cc4      	adds	r4, r0, #3
 8013fec:	f024 0403 	bic.w	r4, r4, #3
 8013ff0:	42a0      	cmp	r0, r4
 8013ff2:	d0e3      	beq.n	8013fbc <_malloc_r+0x64>
 8013ff4:	1a21      	subs	r1, r4, r0
 8013ff6:	4630      	mov	r0, r6
 8013ff8:	f000 f992 	bl	8014320 <_sbrk_r>
 8013ffc:	3001      	adds	r0, #1
 8013ffe:	d1dd      	bne.n	8013fbc <_malloc_r+0x64>
 8014000:	e7cf      	b.n	8013fa2 <_malloc_r+0x4a>
 8014002:	bf00      	nop
 8014004:	2000273c 	.word	0x2000273c
 8014008:	20002740 	.word	0x20002740

0801400c <_realloc_r>:
 801400c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801400e:	4607      	mov	r7, r0
 8014010:	4614      	mov	r4, r2
 8014012:	460e      	mov	r6, r1
 8014014:	b921      	cbnz	r1, 8014020 <_realloc_r+0x14>
 8014016:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801401a:	4611      	mov	r1, r2
 801401c:	f7ff bf9c 	b.w	8013f58 <_malloc_r>
 8014020:	b922      	cbnz	r2, 801402c <_realloc_r+0x20>
 8014022:	f7ff ff49 	bl	8013eb8 <_free_r>
 8014026:	4625      	mov	r5, r4
 8014028:	4628      	mov	r0, r5
 801402a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801402c:	f000 fa90 	bl	8014550 <_malloc_usable_size_r>
 8014030:	42a0      	cmp	r0, r4
 8014032:	d20f      	bcs.n	8014054 <_realloc_r+0x48>
 8014034:	4621      	mov	r1, r4
 8014036:	4638      	mov	r0, r7
 8014038:	f7ff ff8e 	bl	8013f58 <_malloc_r>
 801403c:	4605      	mov	r5, r0
 801403e:	2800      	cmp	r0, #0
 8014040:	d0f2      	beq.n	8014028 <_realloc_r+0x1c>
 8014042:	4631      	mov	r1, r6
 8014044:	4622      	mov	r2, r4
 8014046:	f7fb fe8d 	bl	800fd64 <memcpy>
 801404a:	4631      	mov	r1, r6
 801404c:	4638      	mov	r0, r7
 801404e:	f7ff ff33 	bl	8013eb8 <_free_r>
 8014052:	e7e9      	b.n	8014028 <_realloc_r+0x1c>
 8014054:	4635      	mov	r5, r6
 8014056:	e7e7      	b.n	8014028 <_realloc_r+0x1c>

08014058 <__ssputs_r>:
 8014058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801405c:	688e      	ldr	r6, [r1, #8]
 801405e:	429e      	cmp	r6, r3
 8014060:	4682      	mov	sl, r0
 8014062:	460c      	mov	r4, r1
 8014064:	4690      	mov	r8, r2
 8014066:	461f      	mov	r7, r3
 8014068:	d838      	bhi.n	80140dc <__ssputs_r+0x84>
 801406a:	898a      	ldrh	r2, [r1, #12]
 801406c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014070:	d032      	beq.n	80140d8 <__ssputs_r+0x80>
 8014072:	6825      	ldr	r5, [r4, #0]
 8014074:	6909      	ldr	r1, [r1, #16]
 8014076:	eba5 0901 	sub.w	r9, r5, r1
 801407a:	6965      	ldr	r5, [r4, #20]
 801407c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014080:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014084:	3301      	adds	r3, #1
 8014086:	444b      	add	r3, r9
 8014088:	106d      	asrs	r5, r5, #1
 801408a:	429d      	cmp	r5, r3
 801408c:	bf38      	it	cc
 801408e:	461d      	movcc	r5, r3
 8014090:	0553      	lsls	r3, r2, #21
 8014092:	d531      	bpl.n	80140f8 <__ssputs_r+0xa0>
 8014094:	4629      	mov	r1, r5
 8014096:	f7ff ff5f 	bl	8013f58 <_malloc_r>
 801409a:	4606      	mov	r6, r0
 801409c:	b950      	cbnz	r0, 80140b4 <__ssputs_r+0x5c>
 801409e:	230c      	movs	r3, #12
 80140a0:	f8ca 3000 	str.w	r3, [sl]
 80140a4:	89a3      	ldrh	r3, [r4, #12]
 80140a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80140aa:	81a3      	strh	r3, [r4, #12]
 80140ac:	f04f 30ff 	mov.w	r0, #4294967295
 80140b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140b4:	6921      	ldr	r1, [r4, #16]
 80140b6:	464a      	mov	r2, r9
 80140b8:	f7fb fe54 	bl	800fd64 <memcpy>
 80140bc:	89a3      	ldrh	r3, [r4, #12]
 80140be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80140c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80140c6:	81a3      	strh	r3, [r4, #12]
 80140c8:	6126      	str	r6, [r4, #16]
 80140ca:	6165      	str	r5, [r4, #20]
 80140cc:	444e      	add	r6, r9
 80140ce:	eba5 0509 	sub.w	r5, r5, r9
 80140d2:	6026      	str	r6, [r4, #0]
 80140d4:	60a5      	str	r5, [r4, #8]
 80140d6:	463e      	mov	r6, r7
 80140d8:	42be      	cmp	r6, r7
 80140da:	d900      	bls.n	80140de <__ssputs_r+0x86>
 80140dc:	463e      	mov	r6, r7
 80140de:	4632      	mov	r2, r6
 80140e0:	6820      	ldr	r0, [r4, #0]
 80140e2:	4641      	mov	r1, r8
 80140e4:	f7ff fa04 	bl	80134f0 <memmove>
 80140e8:	68a3      	ldr	r3, [r4, #8]
 80140ea:	6822      	ldr	r2, [r4, #0]
 80140ec:	1b9b      	subs	r3, r3, r6
 80140ee:	4432      	add	r2, r6
 80140f0:	60a3      	str	r3, [r4, #8]
 80140f2:	6022      	str	r2, [r4, #0]
 80140f4:	2000      	movs	r0, #0
 80140f6:	e7db      	b.n	80140b0 <__ssputs_r+0x58>
 80140f8:	462a      	mov	r2, r5
 80140fa:	f7ff ff87 	bl	801400c <_realloc_r>
 80140fe:	4606      	mov	r6, r0
 8014100:	2800      	cmp	r0, #0
 8014102:	d1e1      	bne.n	80140c8 <__ssputs_r+0x70>
 8014104:	6921      	ldr	r1, [r4, #16]
 8014106:	4650      	mov	r0, sl
 8014108:	f7ff fed6 	bl	8013eb8 <_free_r>
 801410c:	e7c7      	b.n	801409e <__ssputs_r+0x46>
	...

08014110 <_svfiprintf_r>:
 8014110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014114:	4698      	mov	r8, r3
 8014116:	898b      	ldrh	r3, [r1, #12]
 8014118:	061b      	lsls	r3, r3, #24
 801411a:	b09d      	sub	sp, #116	; 0x74
 801411c:	4607      	mov	r7, r0
 801411e:	460d      	mov	r5, r1
 8014120:	4614      	mov	r4, r2
 8014122:	d50e      	bpl.n	8014142 <_svfiprintf_r+0x32>
 8014124:	690b      	ldr	r3, [r1, #16]
 8014126:	b963      	cbnz	r3, 8014142 <_svfiprintf_r+0x32>
 8014128:	2140      	movs	r1, #64	; 0x40
 801412a:	f7ff ff15 	bl	8013f58 <_malloc_r>
 801412e:	6028      	str	r0, [r5, #0]
 8014130:	6128      	str	r0, [r5, #16]
 8014132:	b920      	cbnz	r0, 801413e <_svfiprintf_r+0x2e>
 8014134:	230c      	movs	r3, #12
 8014136:	603b      	str	r3, [r7, #0]
 8014138:	f04f 30ff 	mov.w	r0, #4294967295
 801413c:	e0d1      	b.n	80142e2 <_svfiprintf_r+0x1d2>
 801413e:	2340      	movs	r3, #64	; 0x40
 8014140:	616b      	str	r3, [r5, #20]
 8014142:	2300      	movs	r3, #0
 8014144:	9309      	str	r3, [sp, #36]	; 0x24
 8014146:	2320      	movs	r3, #32
 8014148:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801414c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014150:	2330      	movs	r3, #48	; 0x30
 8014152:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80142fc <_svfiprintf_r+0x1ec>
 8014156:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801415a:	f04f 0901 	mov.w	r9, #1
 801415e:	4623      	mov	r3, r4
 8014160:	469a      	mov	sl, r3
 8014162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014166:	b10a      	cbz	r2, 801416c <_svfiprintf_r+0x5c>
 8014168:	2a25      	cmp	r2, #37	; 0x25
 801416a:	d1f9      	bne.n	8014160 <_svfiprintf_r+0x50>
 801416c:	ebba 0b04 	subs.w	fp, sl, r4
 8014170:	d00b      	beq.n	801418a <_svfiprintf_r+0x7a>
 8014172:	465b      	mov	r3, fp
 8014174:	4622      	mov	r2, r4
 8014176:	4629      	mov	r1, r5
 8014178:	4638      	mov	r0, r7
 801417a:	f7ff ff6d 	bl	8014058 <__ssputs_r>
 801417e:	3001      	adds	r0, #1
 8014180:	f000 80aa 	beq.w	80142d8 <_svfiprintf_r+0x1c8>
 8014184:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014186:	445a      	add	r2, fp
 8014188:	9209      	str	r2, [sp, #36]	; 0x24
 801418a:	f89a 3000 	ldrb.w	r3, [sl]
 801418e:	2b00      	cmp	r3, #0
 8014190:	f000 80a2 	beq.w	80142d8 <_svfiprintf_r+0x1c8>
 8014194:	2300      	movs	r3, #0
 8014196:	f04f 32ff 	mov.w	r2, #4294967295
 801419a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801419e:	f10a 0a01 	add.w	sl, sl, #1
 80141a2:	9304      	str	r3, [sp, #16]
 80141a4:	9307      	str	r3, [sp, #28]
 80141a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80141aa:	931a      	str	r3, [sp, #104]	; 0x68
 80141ac:	4654      	mov	r4, sl
 80141ae:	2205      	movs	r2, #5
 80141b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80141b4:	4851      	ldr	r0, [pc, #324]	; (80142fc <_svfiprintf_r+0x1ec>)
 80141b6:	f7ec f81b 	bl	80001f0 <memchr>
 80141ba:	9a04      	ldr	r2, [sp, #16]
 80141bc:	b9d8      	cbnz	r0, 80141f6 <_svfiprintf_r+0xe6>
 80141be:	06d0      	lsls	r0, r2, #27
 80141c0:	bf44      	itt	mi
 80141c2:	2320      	movmi	r3, #32
 80141c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80141c8:	0711      	lsls	r1, r2, #28
 80141ca:	bf44      	itt	mi
 80141cc:	232b      	movmi	r3, #43	; 0x2b
 80141ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80141d2:	f89a 3000 	ldrb.w	r3, [sl]
 80141d6:	2b2a      	cmp	r3, #42	; 0x2a
 80141d8:	d015      	beq.n	8014206 <_svfiprintf_r+0xf6>
 80141da:	9a07      	ldr	r2, [sp, #28]
 80141dc:	4654      	mov	r4, sl
 80141de:	2000      	movs	r0, #0
 80141e0:	f04f 0c0a 	mov.w	ip, #10
 80141e4:	4621      	mov	r1, r4
 80141e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80141ea:	3b30      	subs	r3, #48	; 0x30
 80141ec:	2b09      	cmp	r3, #9
 80141ee:	d94e      	bls.n	801428e <_svfiprintf_r+0x17e>
 80141f0:	b1b0      	cbz	r0, 8014220 <_svfiprintf_r+0x110>
 80141f2:	9207      	str	r2, [sp, #28]
 80141f4:	e014      	b.n	8014220 <_svfiprintf_r+0x110>
 80141f6:	eba0 0308 	sub.w	r3, r0, r8
 80141fa:	fa09 f303 	lsl.w	r3, r9, r3
 80141fe:	4313      	orrs	r3, r2
 8014200:	9304      	str	r3, [sp, #16]
 8014202:	46a2      	mov	sl, r4
 8014204:	e7d2      	b.n	80141ac <_svfiprintf_r+0x9c>
 8014206:	9b03      	ldr	r3, [sp, #12]
 8014208:	1d19      	adds	r1, r3, #4
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	9103      	str	r1, [sp, #12]
 801420e:	2b00      	cmp	r3, #0
 8014210:	bfbb      	ittet	lt
 8014212:	425b      	neglt	r3, r3
 8014214:	f042 0202 	orrlt.w	r2, r2, #2
 8014218:	9307      	strge	r3, [sp, #28]
 801421a:	9307      	strlt	r3, [sp, #28]
 801421c:	bfb8      	it	lt
 801421e:	9204      	strlt	r2, [sp, #16]
 8014220:	7823      	ldrb	r3, [r4, #0]
 8014222:	2b2e      	cmp	r3, #46	; 0x2e
 8014224:	d10c      	bne.n	8014240 <_svfiprintf_r+0x130>
 8014226:	7863      	ldrb	r3, [r4, #1]
 8014228:	2b2a      	cmp	r3, #42	; 0x2a
 801422a:	d135      	bne.n	8014298 <_svfiprintf_r+0x188>
 801422c:	9b03      	ldr	r3, [sp, #12]
 801422e:	1d1a      	adds	r2, r3, #4
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	9203      	str	r2, [sp, #12]
 8014234:	2b00      	cmp	r3, #0
 8014236:	bfb8      	it	lt
 8014238:	f04f 33ff 	movlt.w	r3, #4294967295
 801423c:	3402      	adds	r4, #2
 801423e:	9305      	str	r3, [sp, #20]
 8014240:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801430c <_svfiprintf_r+0x1fc>
 8014244:	7821      	ldrb	r1, [r4, #0]
 8014246:	2203      	movs	r2, #3
 8014248:	4650      	mov	r0, sl
 801424a:	f7eb ffd1 	bl	80001f0 <memchr>
 801424e:	b140      	cbz	r0, 8014262 <_svfiprintf_r+0x152>
 8014250:	2340      	movs	r3, #64	; 0x40
 8014252:	eba0 000a 	sub.w	r0, r0, sl
 8014256:	fa03 f000 	lsl.w	r0, r3, r0
 801425a:	9b04      	ldr	r3, [sp, #16]
 801425c:	4303      	orrs	r3, r0
 801425e:	3401      	adds	r4, #1
 8014260:	9304      	str	r3, [sp, #16]
 8014262:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014266:	4826      	ldr	r0, [pc, #152]	; (8014300 <_svfiprintf_r+0x1f0>)
 8014268:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801426c:	2206      	movs	r2, #6
 801426e:	f7eb ffbf 	bl	80001f0 <memchr>
 8014272:	2800      	cmp	r0, #0
 8014274:	d038      	beq.n	80142e8 <_svfiprintf_r+0x1d8>
 8014276:	4b23      	ldr	r3, [pc, #140]	; (8014304 <_svfiprintf_r+0x1f4>)
 8014278:	bb1b      	cbnz	r3, 80142c2 <_svfiprintf_r+0x1b2>
 801427a:	9b03      	ldr	r3, [sp, #12]
 801427c:	3307      	adds	r3, #7
 801427e:	f023 0307 	bic.w	r3, r3, #7
 8014282:	3308      	adds	r3, #8
 8014284:	9303      	str	r3, [sp, #12]
 8014286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014288:	4433      	add	r3, r6
 801428a:	9309      	str	r3, [sp, #36]	; 0x24
 801428c:	e767      	b.n	801415e <_svfiprintf_r+0x4e>
 801428e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014292:	460c      	mov	r4, r1
 8014294:	2001      	movs	r0, #1
 8014296:	e7a5      	b.n	80141e4 <_svfiprintf_r+0xd4>
 8014298:	2300      	movs	r3, #0
 801429a:	3401      	adds	r4, #1
 801429c:	9305      	str	r3, [sp, #20]
 801429e:	4619      	mov	r1, r3
 80142a0:	f04f 0c0a 	mov.w	ip, #10
 80142a4:	4620      	mov	r0, r4
 80142a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80142aa:	3a30      	subs	r2, #48	; 0x30
 80142ac:	2a09      	cmp	r2, #9
 80142ae:	d903      	bls.n	80142b8 <_svfiprintf_r+0x1a8>
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d0c5      	beq.n	8014240 <_svfiprintf_r+0x130>
 80142b4:	9105      	str	r1, [sp, #20]
 80142b6:	e7c3      	b.n	8014240 <_svfiprintf_r+0x130>
 80142b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80142bc:	4604      	mov	r4, r0
 80142be:	2301      	movs	r3, #1
 80142c0:	e7f0      	b.n	80142a4 <_svfiprintf_r+0x194>
 80142c2:	ab03      	add	r3, sp, #12
 80142c4:	9300      	str	r3, [sp, #0]
 80142c6:	462a      	mov	r2, r5
 80142c8:	4b0f      	ldr	r3, [pc, #60]	; (8014308 <_svfiprintf_r+0x1f8>)
 80142ca:	a904      	add	r1, sp, #16
 80142cc:	4638      	mov	r0, r7
 80142ce:	f7fb ff59 	bl	8010184 <_printf_float>
 80142d2:	1c42      	adds	r2, r0, #1
 80142d4:	4606      	mov	r6, r0
 80142d6:	d1d6      	bne.n	8014286 <_svfiprintf_r+0x176>
 80142d8:	89ab      	ldrh	r3, [r5, #12]
 80142da:	065b      	lsls	r3, r3, #25
 80142dc:	f53f af2c 	bmi.w	8014138 <_svfiprintf_r+0x28>
 80142e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80142e2:	b01d      	add	sp, #116	; 0x74
 80142e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142e8:	ab03      	add	r3, sp, #12
 80142ea:	9300      	str	r3, [sp, #0]
 80142ec:	462a      	mov	r2, r5
 80142ee:	4b06      	ldr	r3, [pc, #24]	; (8014308 <_svfiprintf_r+0x1f8>)
 80142f0:	a904      	add	r1, sp, #16
 80142f2:	4638      	mov	r0, r7
 80142f4:	f7fc f9ea 	bl	80106cc <_printf_i>
 80142f8:	e7eb      	b.n	80142d2 <_svfiprintf_r+0x1c2>
 80142fa:	bf00      	nop
 80142fc:	08016364 	.word	0x08016364
 8014300:	0801636e 	.word	0x0801636e
 8014304:	08010185 	.word	0x08010185
 8014308:	08014059 	.word	0x08014059
 801430c:	0801636a 	.word	0x0801636a

08014310 <nan>:
 8014310:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014318 <nan+0x8>
 8014314:	4770      	bx	lr
 8014316:	bf00      	nop
 8014318:	00000000 	.word	0x00000000
 801431c:	7ff80000 	.word	0x7ff80000

08014320 <_sbrk_r>:
 8014320:	b538      	push	{r3, r4, r5, lr}
 8014322:	4d06      	ldr	r5, [pc, #24]	; (801433c <_sbrk_r+0x1c>)
 8014324:	2300      	movs	r3, #0
 8014326:	4604      	mov	r4, r0
 8014328:	4608      	mov	r0, r1
 801432a:	602b      	str	r3, [r5, #0]
 801432c:	f7f0 f894 	bl	8004458 <_sbrk>
 8014330:	1c43      	adds	r3, r0, #1
 8014332:	d102      	bne.n	801433a <_sbrk_r+0x1a>
 8014334:	682b      	ldr	r3, [r5, #0]
 8014336:	b103      	cbz	r3, 801433a <_sbrk_r+0x1a>
 8014338:	6023      	str	r3, [r4, #0]
 801433a:	bd38      	pop	{r3, r4, r5, pc}
 801433c:	20004a30 	.word	0x20004a30

08014340 <_raise_r>:
 8014340:	291f      	cmp	r1, #31
 8014342:	b538      	push	{r3, r4, r5, lr}
 8014344:	4604      	mov	r4, r0
 8014346:	460d      	mov	r5, r1
 8014348:	d904      	bls.n	8014354 <_raise_r+0x14>
 801434a:	2316      	movs	r3, #22
 801434c:	6003      	str	r3, [r0, #0]
 801434e:	f04f 30ff 	mov.w	r0, #4294967295
 8014352:	bd38      	pop	{r3, r4, r5, pc}
 8014354:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014356:	b112      	cbz	r2, 801435e <_raise_r+0x1e>
 8014358:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801435c:	b94b      	cbnz	r3, 8014372 <_raise_r+0x32>
 801435e:	4620      	mov	r0, r4
 8014360:	f000 f830 	bl	80143c4 <_getpid_r>
 8014364:	462a      	mov	r2, r5
 8014366:	4601      	mov	r1, r0
 8014368:	4620      	mov	r0, r4
 801436a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801436e:	f000 b817 	b.w	80143a0 <_kill_r>
 8014372:	2b01      	cmp	r3, #1
 8014374:	d00a      	beq.n	801438c <_raise_r+0x4c>
 8014376:	1c59      	adds	r1, r3, #1
 8014378:	d103      	bne.n	8014382 <_raise_r+0x42>
 801437a:	2316      	movs	r3, #22
 801437c:	6003      	str	r3, [r0, #0]
 801437e:	2001      	movs	r0, #1
 8014380:	e7e7      	b.n	8014352 <_raise_r+0x12>
 8014382:	2400      	movs	r4, #0
 8014384:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014388:	4628      	mov	r0, r5
 801438a:	4798      	blx	r3
 801438c:	2000      	movs	r0, #0
 801438e:	e7e0      	b.n	8014352 <_raise_r+0x12>

08014390 <raise>:
 8014390:	4b02      	ldr	r3, [pc, #8]	; (801439c <raise+0xc>)
 8014392:	4601      	mov	r1, r0
 8014394:	6818      	ldr	r0, [r3, #0]
 8014396:	f7ff bfd3 	b.w	8014340 <_raise_r>
 801439a:	bf00      	nop
 801439c:	20000058 	.word	0x20000058

080143a0 <_kill_r>:
 80143a0:	b538      	push	{r3, r4, r5, lr}
 80143a2:	4d07      	ldr	r5, [pc, #28]	; (80143c0 <_kill_r+0x20>)
 80143a4:	2300      	movs	r3, #0
 80143a6:	4604      	mov	r4, r0
 80143a8:	4608      	mov	r0, r1
 80143aa:	4611      	mov	r1, r2
 80143ac:	602b      	str	r3, [r5, #0]
 80143ae:	f7ef ffe7 	bl	8004380 <_kill>
 80143b2:	1c43      	adds	r3, r0, #1
 80143b4:	d102      	bne.n	80143bc <_kill_r+0x1c>
 80143b6:	682b      	ldr	r3, [r5, #0]
 80143b8:	b103      	cbz	r3, 80143bc <_kill_r+0x1c>
 80143ba:	6023      	str	r3, [r4, #0]
 80143bc:	bd38      	pop	{r3, r4, r5, pc}
 80143be:	bf00      	nop
 80143c0:	20004a30 	.word	0x20004a30

080143c4 <_getpid_r>:
 80143c4:	f7ef bfd4 	b.w	8004370 <_getpid>

080143c8 <__sread>:
 80143c8:	b510      	push	{r4, lr}
 80143ca:	460c      	mov	r4, r1
 80143cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143d0:	f000 f8c6 	bl	8014560 <_read_r>
 80143d4:	2800      	cmp	r0, #0
 80143d6:	bfab      	itete	ge
 80143d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80143da:	89a3      	ldrhlt	r3, [r4, #12]
 80143dc:	181b      	addge	r3, r3, r0
 80143de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80143e2:	bfac      	ite	ge
 80143e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80143e6:	81a3      	strhlt	r3, [r4, #12]
 80143e8:	bd10      	pop	{r4, pc}

080143ea <__swrite>:
 80143ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143ee:	461f      	mov	r7, r3
 80143f0:	898b      	ldrh	r3, [r1, #12]
 80143f2:	05db      	lsls	r3, r3, #23
 80143f4:	4605      	mov	r5, r0
 80143f6:	460c      	mov	r4, r1
 80143f8:	4616      	mov	r6, r2
 80143fa:	d505      	bpl.n	8014408 <__swrite+0x1e>
 80143fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014400:	2302      	movs	r3, #2
 8014402:	2200      	movs	r2, #0
 8014404:	f000 f886 	bl	8014514 <_lseek_r>
 8014408:	89a3      	ldrh	r3, [r4, #12]
 801440a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801440e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014412:	81a3      	strh	r3, [r4, #12]
 8014414:	4632      	mov	r2, r6
 8014416:	463b      	mov	r3, r7
 8014418:	4628      	mov	r0, r5
 801441a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801441e:	f000 b835 	b.w	801448c <_write_r>

08014422 <__sseek>:
 8014422:	b510      	push	{r4, lr}
 8014424:	460c      	mov	r4, r1
 8014426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801442a:	f000 f873 	bl	8014514 <_lseek_r>
 801442e:	1c43      	adds	r3, r0, #1
 8014430:	89a3      	ldrh	r3, [r4, #12]
 8014432:	bf15      	itete	ne
 8014434:	6560      	strne	r0, [r4, #84]	; 0x54
 8014436:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801443a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801443e:	81a3      	strheq	r3, [r4, #12]
 8014440:	bf18      	it	ne
 8014442:	81a3      	strhne	r3, [r4, #12]
 8014444:	bd10      	pop	{r4, pc}

08014446 <__sclose>:
 8014446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801444a:	f000 b831 	b.w	80144b0 <_close_r>

0801444e <strncmp>:
 801444e:	b510      	push	{r4, lr}
 8014450:	b16a      	cbz	r2, 801446e <strncmp+0x20>
 8014452:	3901      	subs	r1, #1
 8014454:	1884      	adds	r4, r0, r2
 8014456:	f810 3b01 	ldrb.w	r3, [r0], #1
 801445a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801445e:	4293      	cmp	r3, r2
 8014460:	d103      	bne.n	801446a <strncmp+0x1c>
 8014462:	42a0      	cmp	r0, r4
 8014464:	d001      	beq.n	801446a <strncmp+0x1c>
 8014466:	2b00      	cmp	r3, #0
 8014468:	d1f5      	bne.n	8014456 <strncmp+0x8>
 801446a:	1a98      	subs	r0, r3, r2
 801446c:	bd10      	pop	{r4, pc}
 801446e:	4610      	mov	r0, r2
 8014470:	e7fc      	b.n	801446c <strncmp+0x1e>

08014472 <__ascii_wctomb>:
 8014472:	b149      	cbz	r1, 8014488 <__ascii_wctomb+0x16>
 8014474:	2aff      	cmp	r2, #255	; 0xff
 8014476:	bf85      	ittet	hi
 8014478:	238a      	movhi	r3, #138	; 0x8a
 801447a:	6003      	strhi	r3, [r0, #0]
 801447c:	700a      	strbls	r2, [r1, #0]
 801447e:	f04f 30ff 	movhi.w	r0, #4294967295
 8014482:	bf98      	it	ls
 8014484:	2001      	movls	r0, #1
 8014486:	4770      	bx	lr
 8014488:	4608      	mov	r0, r1
 801448a:	4770      	bx	lr

0801448c <_write_r>:
 801448c:	b538      	push	{r3, r4, r5, lr}
 801448e:	4d07      	ldr	r5, [pc, #28]	; (80144ac <_write_r+0x20>)
 8014490:	4604      	mov	r4, r0
 8014492:	4608      	mov	r0, r1
 8014494:	4611      	mov	r1, r2
 8014496:	2200      	movs	r2, #0
 8014498:	602a      	str	r2, [r5, #0]
 801449a:	461a      	mov	r2, r3
 801449c:	f7ec fdae 	bl	8000ffc <_write>
 80144a0:	1c43      	adds	r3, r0, #1
 80144a2:	d102      	bne.n	80144aa <_write_r+0x1e>
 80144a4:	682b      	ldr	r3, [r5, #0]
 80144a6:	b103      	cbz	r3, 80144aa <_write_r+0x1e>
 80144a8:	6023      	str	r3, [r4, #0]
 80144aa:	bd38      	pop	{r3, r4, r5, pc}
 80144ac:	20004a30 	.word	0x20004a30

080144b0 <_close_r>:
 80144b0:	b538      	push	{r3, r4, r5, lr}
 80144b2:	4d06      	ldr	r5, [pc, #24]	; (80144cc <_close_r+0x1c>)
 80144b4:	2300      	movs	r3, #0
 80144b6:	4604      	mov	r4, r0
 80144b8:	4608      	mov	r0, r1
 80144ba:	602b      	str	r3, [r5, #0]
 80144bc:	f7ef ff97 	bl	80043ee <_close>
 80144c0:	1c43      	adds	r3, r0, #1
 80144c2:	d102      	bne.n	80144ca <_close_r+0x1a>
 80144c4:	682b      	ldr	r3, [r5, #0]
 80144c6:	b103      	cbz	r3, 80144ca <_close_r+0x1a>
 80144c8:	6023      	str	r3, [r4, #0]
 80144ca:	bd38      	pop	{r3, r4, r5, pc}
 80144cc:	20004a30 	.word	0x20004a30

080144d0 <_fstat_r>:
 80144d0:	b538      	push	{r3, r4, r5, lr}
 80144d2:	4d07      	ldr	r5, [pc, #28]	; (80144f0 <_fstat_r+0x20>)
 80144d4:	2300      	movs	r3, #0
 80144d6:	4604      	mov	r4, r0
 80144d8:	4608      	mov	r0, r1
 80144da:	4611      	mov	r1, r2
 80144dc:	602b      	str	r3, [r5, #0]
 80144de:	f7ef ff92 	bl	8004406 <_fstat>
 80144e2:	1c43      	adds	r3, r0, #1
 80144e4:	d102      	bne.n	80144ec <_fstat_r+0x1c>
 80144e6:	682b      	ldr	r3, [r5, #0]
 80144e8:	b103      	cbz	r3, 80144ec <_fstat_r+0x1c>
 80144ea:	6023      	str	r3, [r4, #0]
 80144ec:	bd38      	pop	{r3, r4, r5, pc}
 80144ee:	bf00      	nop
 80144f0:	20004a30 	.word	0x20004a30

080144f4 <_isatty_r>:
 80144f4:	b538      	push	{r3, r4, r5, lr}
 80144f6:	4d06      	ldr	r5, [pc, #24]	; (8014510 <_isatty_r+0x1c>)
 80144f8:	2300      	movs	r3, #0
 80144fa:	4604      	mov	r4, r0
 80144fc:	4608      	mov	r0, r1
 80144fe:	602b      	str	r3, [r5, #0]
 8014500:	f7ef ff91 	bl	8004426 <_isatty>
 8014504:	1c43      	adds	r3, r0, #1
 8014506:	d102      	bne.n	801450e <_isatty_r+0x1a>
 8014508:	682b      	ldr	r3, [r5, #0]
 801450a:	b103      	cbz	r3, 801450e <_isatty_r+0x1a>
 801450c:	6023      	str	r3, [r4, #0]
 801450e:	bd38      	pop	{r3, r4, r5, pc}
 8014510:	20004a30 	.word	0x20004a30

08014514 <_lseek_r>:
 8014514:	b538      	push	{r3, r4, r5, lr}
 8014516:	4d07      	ldr	r5, [pc, #28]	; (8014534 <_lseek_r+0x20>)
 8014518:	4604      	mov	r4, r0
 801451a:	4608      	mov	r0, r1
 801451c:	4611      	mov	r1, r2
 801451e:	2200      	movs	r2, #0
 8014520:	602a      	str	r2, [r5, #0]
 8014522:	461a      	mov	r2, r3
 8014524:	f7ef ff8a 	bl	800443c <_lseek>
 8014528:	1c43      	adds	r3, r0, #1
 801452a:	d102      	bne.n	8014532 <_lseek_r+0x1e>
 801452c:	682b      	ldr	r3, [r5, #0]
 801452e:	b103      	cbz	r3, 8014532 <_lseek_r+0x1e>
 8014530:	6023      	str	r3, [r4, #0]
 8014532:	bd38      	pop	{r3, r4, r5, pc}
 8014534:	20004a30 	.word	0x20004a30

08014538 <__malloc_lock>:
 8014538:	4801      	ldr	r0, [pc, #4]	; (8014540 <__malloc_lock+0x8>)
 801453a:	f7fe bf58 	b.w	80133ee <__retarget_lock_acquire_recursive>
 801453e:	bf00      	nop
 8014540:	20004a28 	.word	0x20004a28

08014544 <__malloc_unlock>:
 8014544:	4801      	ldr	r0, [pc, #4]	; (801454c <__malloc_unlock+0x8>)
 8014546:	f7fe bf53 	b.w	80133f0 <__retarget_lock_release_recursive>
 801454a:	bf00      	nop
 801454c:	20004a28 	.word	0x20004a28

08014550 <_malloc_usable_size_r>:
 8014550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014554:	1f18      	subs	r0, r3, #4
 8014556:	2b00      	cmp	r3, #0
 8014558:	bfbc      	itt	lt
 801455a:	580b      	ldrlt	r3, [r1, r0]
 801455c:	18c0      	addlt	r0, r0, r3
 801455e:	4770      	bx	lr

08014560 <_read_r>:
 8014560:	b538      	push	{r3, r4, r5, lr}
 8014562:	4d07      	ldr	r5, [pc, #28]	; (8014580 <_read_r+0x20>)
 8014564:	4604      	mov	r4, r0
 8014566:	4608      	mov	r0, r1
 8014568:	4611      	mov	r1, r2
 801456a:	2200      	movs	r2, #0
 801456c:	602a      	str	r2, [r5, #0]
 801456e:	461a      	mov	r2, r3
 8014570:	f7ef ff20 	bl	80043b4 <_read>
 8014574:	1c43      	adds	r3, r0, #1
 8014576:	d102      	bne.n	801457e <_read_r+0x1e>
 8014578:	682b      	ldr	r3, [r5, #0]
 801457a:	b103      	cbz	r3, 801457e <_read_r+0x1e>
 801457c:	6023      	str	r3, [r4, #0]
 801457e:	bd38      	pop	{r3, r4, r5, pc}
 8014580:	20004a30 	.word	0x20004a30
 8014584:	00000000 	.word	0x00000000

08014588 <exp>:
 8014588:	b538      	push	{r3, r4, r5, lr}
 801458a:	ed2d 8b02 	vpush	{d8}
 801458e:	ec55 4b10 	vmov	r4, r5, d0
 8014592:	f000 f975 	bl	8014880 <__ieee754_exp>
 8014596:	4b22      	ldr	r3, [pc, #136]	; (8014620 <exp+0x98>)
 8014598:	eeb0 8a40 	vmov.f32	s16, s0
 801459c:	eef0 8a60 	vmov.f32	s17, s1
 80145a0:	f993 3000 	ldrsb.w	r3, [r3]
 80145a4:	3301      	adds	r3, #1
 80145a6:	d012      	beq.n	80145ce <exp+0x46>
 80145a8:	ec45 4b10 	vmov	d0, r4, r5
 80145ac:	f001 fa7f 	bl	8015aae <finite>
 80145b0:	b168      	cbz	r0, 80145ce <exp+0x46>
 80145b2:	a313      	add	r3, pc, #76	; (adr r3, 8014600 <exp+0x78>)
 80145b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145b8:	4620      	mov	r0, r4
 80145ba:	4629      	mov	r1, r5
 80145bc:	f7ec fab4 	bl	8000b28 <__aeabi_dcmpgt>
 80145c0:	b160      	cbz	r0, 80145dc <exp+0x54>
 80145c2:	f7fb fb93 	bl	800fcec <__errno>
 80145c6:	ed9f 8b10 	vldr	d8, [pc, #64]	; 8014608 <exp+0x80>
 80145ca:	2322      	movs	r3, #34	; 0x22
 80145cc:	6003      	str	r3, [r0, #0]
 80145ce:	eeb0 0a48 	vmov.f32	s0, s16
 80145d2:	eef0 0a68 	vmov.f32	s1, s17
 80145d6:	ecbd 8b02 	vpop	{d8}
 80145da:	bd38      	pop	{r3, r4, r5, pc}
 80145dc:	a30c      	add	r3, pc, #48	; (adr r3, 8014610 <exp+0x88>)
 80145de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145e2:	4620      	mov	r0, r4
 80145e4:	4629      	mov	r1, r5
 80145e6:	f7ec fa81 	bl	8000aec <__aeabi_dcmplt>
 80145ea:	2800      	cmp	r0, #0
 80145ec:	d0ef      	beq.n	80145ce <exp+0x46>
 80145ee:	f7fb fb7d 	bl	800fcec <__errno>
 80145f2:	2322      	movs	r3, #34	; 0x22
 80145f4:	ed9f 8b08 	vldr	d8, [pc, #32]	; 8014618 <exp+0x90>
 80145f8:	6003      	str	r3, [r0, #0]
 80145fa:	e7e8      	b.n	80145ce <exp+0x46>
 80145fc:	f3af 8000 	nop.w
 8014600:	fefa39ef 	.word	0xfefa39ef
 8014604:	40862e42 	.word	0x40862e42
 8014608:	00000000 	.word	0x00000000
 801460c:	7ff00000 	.word	0x7ff00000
 8014610:	d52d3051 	.word	0xd52d3051
 8014614:	c0874910 	.word	0xc0874910
	...
 8014620:	2000022c 	.word	0x2000022c
 8014624:	00000000 	.word	0x00000000

08014628 <log>:
 8014628:	b538      	push	{r3, r4, r5, lr}
 801462a:	ed2d 8b02 	vpush	{d8}
 801462e:	ec55 4b10 	vmov	r4, r5, d0
 8014632:	f000 faa1 	bl	8014b78 <__ieee754_log>
 8014636:	4b1e      	ldr	r3, [pc, #120]	; (80146b0 <log+0x88>)
 8014638:	eeb0 8a40 	vmov.f32	s16, s0
 801463c:	eef0 8a60 	vmov.f32	s17, s1
 8014640:	f993 3000 	ldrsb.w	r3, [r3]
 8014644:	3301      	adds	r3, #1
 8014646:	d01a      	beq.n	801467e <log+0x56>
 8014648:	4622      	mov	r2, r4
 801464a:	462b      	mov	r3, r5
 801464c:	4620      	mov	r0, r4
 801464e:	4629      	mov	r1, r5
 8014650:	f7ec fa74 	bl	8000b3c <__aeabi_dcmpun>
 8014654:	b998      	cbnz	r0, 801467e <log+0x56>
 8014656:	2200      	movs	r2, #0
 8014658:	2300      	movs	r3, #0
 801465a:	4620      	mov	r0, r4
 801465c:	4629      	mov	r1, r5
 801465e:	f7ec fa63 	bl	8000b28 <__aeabi_dcmpgt>
 8014662:	b960      	cbnz	r0, 801467e <log+0x56>
 8014664:	2200      	movs	r2, #0
 8014666:	2300      	movs	r3, #0
 8014668:	4620      	mov	r0, r4
 801466a:	4629      	mov	r1, r5
 801466c:	f7ec fa34 	bl	8000ad8 <__aeabi_dcmpeq>
 8014670:	b160      	cbz	r0, 801468c <log+0x64>
 8014672:	f7fb fb3b 	bl	800fcec <__errno>
 8014676:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 80146a8 <log+0x80>
 801467a:	2322      	movs	r3, #34	; 0x22
 801467c:	6003      	str	r3, [r0, #0]
 801467e:	eeb0 0a48 	vmov.f32	s0, s16
 8014682:	eef0 0a68 	vmov.f32	s1, s17
 8014686:	ecbd 8b02 	vpop	{d8}
 801468a:	bd38      	pop	{r3, r4, r5, pc}
 801468c:	f7fb fb2e 	bl	800fcec <__errno>
 8014690:	ecbd 8b02 	vpop	{d8}
 8014694:	2321      	movs	r3, #33	; 0x21
 8014696:	6003      	str	r3, [r0, #0]
 8014698:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801469c:	4805      	ldr	r0, [pc, #20]	; (80146b4 <log+0x8c>)
 801469e:	f7ff be37 	b.w	8014310 <nan>
 80146a2:	bf00      	nop
 80146a4:	f3af 8000 	nop.w
 80146a8:	00000000 	.word	0x00000000
 80146ac:	fff00000 	.word	0xfff00000
 80146b0:	2000022c 	.word	0x2000022c
 80146b4:	0801625b 	.word	0x0801625b

080146b8 <pow>:
 80146b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80146bc:	ec59 8b10 	vmov	r8, r9, d0
 80146c0:	ec57 6b11 	vmov	r6, r7, d1
 80146c4:	f000 fc14 	bl	8014ef0 <__ieee754_pow>
 80146c8:	4b4e      	ldr	r3, [pc, #312]	; (8014804 <pow+0x14c>)
 80146ca:	f993 3000 	ldrsb.w	r3, [r3]
 80146ce:	3301      	adds	r3, #1
 80146d0:	ec55 4b10 	vmov	r4, r5, d0
 80146d4:	d015      	beq.n	8014702 <pow+0x4a>
 80146d6:	4632      	mov	r2, r6
 80146d8:	463b      	mov	r3, r7
 80146da:	4630      	mov	r0, r6
 80146dc:	4639      	mov	r1, r7
 80146de:	f7ec fa2d 	bl	8000b3c <__aeabi_dcmpun>
 80146e2:	b970      	cbnz	r0, 8014702 <pow+0x4a>
 80146e4:	4642      	mov	r2, r8
 80146e6:	464b      	mov	r3, r9
 80146e8:	4640      	mov	r0, r8
 80146ea:	4649      	mov	r1, r9
 80146ec:	f7ec fa26 	bl	8000b3c <__aeabi_dcmpun>
 80146f0:	2200      	movs	r2, #0
 80146f2:	2300      	movs	r3, #0
 80146f4:	b148      	cbz	r0, 801470a <pow+0x52>
 80146f6:	4630      	mov	r0, r6
 80146f8:	4639      	mov	r1, r7
 80146fa:	f7ec f9ed 	bl	8000ad8 <__aeabi_dcmpeq>
 80146fe:	2800      	cmp	r0, #0
 8014700:	d17d      	bne.n	80147fe <pow+0x146>
 8014702:	ec45 4b10 	vmov	d0, r4, r5
 8014706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801470a:	4640      	mov	r0, r8
 801470c:	4649      	mov	r1, r9
 801470e:	f7ec f9e3 	bl	8000ad8 <__aeabi_dcmpeq>
 8014712:	b1e0      	cbz	r0, 801474e <pow+0x96>
 8014714:	2200      	movs	r2, #0
 8014716:	2300      	movs	r3, #0
 8014718:	4630      	mov	r0, r6
 801471a:	4639      	mov	r1, r7
 801471c:	f7ec f9dc 	bl	8000ad8 <__aeabi_dcmpeq>
 8014720:	2800      	cmp	r0, #0
 8014722:	d16c      	bne.n	80147fe <pow+0x146>
 8014724:	ec47 6b10 	vmov	d0, r6, r7
 8014728:	f001 f9c1 	bl	8015aae <finite>
 801472c:	2800      	cmp	r0, #0
 801472e:	d0e8      	beq.n	8014702 <pow+0x4a>
 8014730:	2200      	movs	r2, #0
 8014732:	2300      	movs	r3, #0
 8014734:	4630      	mov	r0, r6
 8014736:	4639      	mov	r1, r7
 8014738:	f7ec f9d8 	bl	8000aec <__aeabi_dcmplt>
 801473c:	2800      	cmp	r0, #0
 801473e:	d0e0      	beq.n	8014702 <pow+0x4a>
 8014740:	f7fb fad4 	bl	800fcec <__errno>
 8014744:	2321      	movs	r3, #33	; 0x21
 8014746:	6003      	str	r3, [r0, #0]
 8014748:	2400      	movs	r4, #0
 801474a:	4d2f      	ldr	r5, [pc, #188]	; (8014808 <pow+0x150>)
 801474c:	e7d9      	b.n	8014702 <pow+0x4a>
 801474e:	ec45 4b10 	vmov	d0, r4, r5
 8014752:	f001 f9ac 	bl	8015aae <finite>
 8014756:	bbb8      	cbnz	r0, 80147c8 <pow+0x110>
 8014758:	ec49 8b10 	vmov	d0, r8, r9
 801475c:	f001 f9a7 	bl	8015aae <finite>
 8014760:	b390      	cbz	r0, 80147c8 <pow+0x110>
 8014762:	ec47 6b10 	vmov	d0, r6, r7
 8014766:	f001 f9a2 	bl	8015aae <finite>
 801476a:	b368      	cbz	r0, 80147c8 <pow+0x110>
 801476c:	4622      	mov	r2, r4
 801476e:	462b      	mov	r3, r5
 8014770:	4620      	mov	r0, r4
 8014772:	4629      	mov	r1, r5
 8014774:	f7ec f9e2 	bl	8000b3c <__aeabi_dcmpun>
 8014778:	b160      	cbz	r0, 8014794 <pow+0xdc>
 801477a:	f7fb fab7 	bl	800fcec <__errno>
 801477e:	2321      	movs	r3, #33	; 0x21
 8014780:	6003      	str	r3, [r0, #0]
 8014782:	2200      	movs	r2, #0
 8014784:	2300      	movs	r3, #0
 8014786:	4610      	mov	r0, r2
 8014788:	4619      	mov	r1, r3
 801478a:	f7ec f867 	bl	800085c <__aeabi_ddiv>
 801478e:	4604      	mov	r4, r0
 8014790:	460d      	mov	r5, r1
 8014792:	e7b6      	b.n	8014702 <pow+0x4a>
 8014794:	f7fb faaa 	bl	800fcec <__errno>
 8014798:	2322      	movs	r3, #34	; 0x22
 801479a:	6003      	str	r3, [r0, #0]
 801479c:	2200      	movs	r2, #0
 801479e:	2300      	movs	r3, #0
 80147a0:	4640      	mov	r0, r8
 80147a2:	4649      	mov	r1, r9
 80147a4:	f7ec f9a2 	bl	8000aec <__aeabi_dcmplt>
 80147a8:	2400      	movs	r4, #0
 80147aa:	b158      	cbz	r0, 80147c4 <pow+0x10c>
 80147ac:	ec47 6b10 	vmov	d0, r6, r7
 80147b0:	f001 f988 	bl	8015ac4 <rint>
 80147b4:	4632      	mov	r2, r6
 80147b6:	ec51 0b10 	vmov	r0, r1, d0
 80147ba:	463b      	mov	r3, r7
 80147bc:	f7ec f98c 	bl	8000ad8 <__aeabi_dcmpeq>
 80147c0:	2800      	cmp	r0, #0
 80147c2:	d0c2      	beq.n	801474a <pow+0x92>
 80147c4:	4d11      	ldr	r5, [pc, #68]	; (801480c <pow+0x154>)
 80147c6:	e79c      	b.n	8014702 <pow+0x4a>
 80147c8:	2200      	movs	r2, #0
 80147ca:	2300      	movs	r3, #0
 80147cc:	4620      	mov	r0, r4
 80147ce:	4629      	mov	r1, r5
 80147d0:	f7ec f982 	bl	8000ad8 <__aeabi_dcmpeq>
 80147d4:	2800      	cmp	r0, #0
 80147d6:	d094      	beq.n	8014702 <pow+0x4a>
 80147d8:	ec49 8b10 	vmov	d0, r8, r9
 80147dc:	f001 f967 	bl	8015aae <finite>
 80147e0:	2800      	cmp	r0, #0
 80147e2:	d08e      	beq.n	8014702 <pow+0x4a>
 80147e4:	ec47 6b10 	vmov	d0, r6, r7
 80147e8:	f001 f961 	bl	8015aae <finite>
 80147ec:	2800      	cmp	r0, #0
 80147ee:	d088      	beq.n	8014702 <pow+0x4a>
 80147f0:	f7fb fa7c 	bl	800fcec <__errno>
 80147f4:	2322      	movs	r3, #34	; 0x22
 80147f6:	6003      	str	r3, [r0, #0]
 80147f8:	2400      	movs	r4, #0
 80147fa:	2500      	movs	r5, #0
 80147fc:	e781      	b.n	8014702 <pow+0x4a>
 80147fe:	4d04      	ldr	r5, [pc, #16]	; (8014810 <pow+0x158>)
 8014800:	2400      	movs	r4, #0
 8014802:	e77e      	b.n	8014702 <pow+0x4a>
 8014804:	2000022c 	.word	0x2000022c
 8014808:	fff00000 	.word	0xfff00000
 801480c:	7ff00000 	.word	0x7ff00000
 8014810:	3ff00000 	.word	0x3ff00000

08014814 <sqrt>:
 8014814:	b538      	push	{r3, r4, r5, lr}
 8014816:	ed2d 8b02 	vpush	{d8}
 801481a:	ec55 4b10 	vmov	r4, r5, d0
 801481e:	f001 f889 	bl	8015934 <__ieee754_sqrt>
 8014822:	4b15      	ldr	r3, [pc, #84]	; (8014878 <sqrt+0x64>)
 8014824:	eeb0 8a40 	vmov.f32	s16, s0
 8014828:	eef0 8a60 	vmov.f32	s17, s1
 801482c:	f993 3000 	ldrsb.w	r3, [r3]
 8014830:	3301      	adds	r3, #1
 8014832:	d019      	beq.n	8014868 <sqrt+0x54>
 8014834:	4622      	mov	r2, r4
 8014836:	462b      	mov	r3, r5
 8014838:	4620      	mov	r0, r4
 801483a:	4629      	mov	r1, r5
 801483c:	f7ec f97e 	bl	8000b3c <__aeabi_dcmpun>
 8014840:	b990      	cbnz	r0, 8014868 <sqrt+0x54>
 8014842:	2200      	movs	r2, #0
 8014844:	2300      	movs	r3, #0
 8014846:	4620      	mov	r0, r4
 8014848:	4629      	mov	r1, r5
 801484a:	f7ec f94f 	bl	8000aec <__aeabi_dcmplt>
 801484e:	b158      	cbz	r0, 8014868 <sqrt+0x54>
 8014850:	f7fb fa4c 	bl	800fcec <__errno>
 8014854:	2321      	movs	r3, #33	; 0x21
 8014856:	6003      	str	r3, [r0, #0]
 8014858:	2200      	movs	r2, #0
 801485a:	2300      	movs	r3, #0
 801485c:	4610      	mov	r0, r2
 801485e:	4619      	mov	r1, r3
 8014860:	f7eb fffc 	bl	800085c <__aeabi_ddiv>
 8014864:	ec41 0b18 	vmov	d8, r0, r1
 8014868:	eeb0 0a48 	vmov.f32	s0, s16
 801486c:	eef0 0a68 	vmov.f32	s1, s17
 8014870:	ecbd 8b02 	vpop	{d8}
 8014874:	bd38      	pop	{r3, r4, r5, pc}
 8014876:	bf00      	nop
 8014878:	2000022c 	.word	0x2000022c
 801487c:	00000000 	.word	0x00000000

08014880 <__ieee754_exp>:
 8014880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014884:	ec55 4b10 	vmov	r4, r5, d0
 8014888:	49b1      	ldr	r1, [pc, #708]	; (8014b50 <__ieee754_exp+0x2d0>)
 801488a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801488e:	428b      	cmp	r3, r1
 8014890:	ed2d 8b04 	vpush	{d8-d9}
 8014894:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8014898:	d937      	bls.n	801490a <__ieee754_exp+0x8a>
 801489a:	49ae      	ldr	r1, [pc, #696]	; (8014b54 <__ieee754_exp+0x2d4>)
 801489c:	428b      	cmp	r3, r1
 801489e:	d916      	bls.n	80148ce <__ieee754_exp+0x4e>
 80148a0:	ee10 3a10 	vmov	r3, s0
 80148a4:	f3c5 0213 	ubfx	r2, r5, #0, #20
 80148a8:	4313      	orrs	r3, r2
 80148aa:	d009      	beq.n	80148c0 <__ieee754_exp+0x40>
 80148ac:	ee10 2a10 	vmov	r2, s0
 80148b0:	462b      	mov	r3, r5
 80148b2:	4620      	mov	r0, r4
 80148b4:	4629      	mov	r1, r5
 80148b6:	f7eb fcf1 	bl	800029c <__adddf3>
 80148ba:	4604      	mov	r4, r0
 80148bc:	460d      	mov	r5, r1
 80148be:	e000      	b.n	80148c2 <__ieee754_exp+0x42>
 80148c0:	bb06      	cbnz	r6, 8014904 <__ieee754_exp+0x84>
 80148c2:	ecbd 8b04 	vpop	{d8-d9}
 80148c6:	ec45 4b10 	vmov	d0, r4, r5
 80148ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148ce:	a38a      	add	r3, pc, #552	; (adr r3, 8014af8 <__ieee754_exp+0x278>)
 80148d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148d4:	ee10 0a10 	vmov	r0, s0
 80148d8:	4629      	mov	r1, r5
 80148da:	f7ec f925 	bl	8000b28 <__aeabi_dcmpgt>
 80148de:	b138      	cbz	r0, 80148f0 <__ieee754_exp+0x70>
 80148e0:	a387      	add	r3, pc, #540	; (adr r3, 8014b00 <__ieee754_exp+0x280>)
 80148e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148e6:	4610      	mov	r0, r2
 80148e8:	4619      	mov	r1, r3
 80148ea:	f7eb fe8d 	bl	8000608 <__aeabi_dmul>
 80148ee:	e7e4      	b.n	80148ba <__ieee754_exp+0x3a>
 80148f0:	a385      	add	r3, pc, #532	; (adr r3, 8014b08 <__ieee754_exp+0x288>)
 80148f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148f6:	4620      	mov	r0, r4
 80148f8:	4629      	mov	r1, r5
 80148fa:	f7ec f8f7 	bl	8000aec <__aeabi_dcmplt>
 80148fe:	2800      	cmp	r0, #0
 8014900:	f000 8087 	beq.w	8014a12 <__ieee754_exp+0x192>
 8014904:	2400      	movs	r4, #0
 8014906:	2500      	movs	r5, #0
 8014908:	e7db      	b.n	80148c2 <__ieee754_exp+0x42>
 801490a:	4a93      	ldr	r2, [pc, #588]	; (8014b58 <__ieee754_exp+0x2d8>)
 801490c:	4293      	cmp	r3, r2
 801490e:	f240 80ac 	bls.w	8014a6a <__ieee754_exp+0x1ea>
 8014912:	4a92      	ldr	r2, [pc, #584]	; (8014b5c <__ieee754_exp+0x2dc>)
 8014914:	4293      	cmp	r3, r2
 8014916:	d87c      	bhi.n	8014a12 <__ieee754_exp+0x192>
 8014918:	4b91      	ldr	r3, [pc, #580]	; (8014b60 <__ieee754_exp+0x2e0>)
 801491a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801491e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014922:	ee10 0a10 	vmov	r0, s0
 8014926:	4629      	mov	r1, r5
 8014928:	f7eb fcb6 	bl	8000298 <__aeabi_dsub>
 801492c:	4b8d      	ldr	r3, [pc, #564]	; (8014b64 <__ieee754_exp+0x2e4>)
 801492e:	00f7      	lsls	r7, r6, #3
 8014930:	443b      	add	r3, r7
 8014932:	ed93 7b00 	vldr	d7, [r3]
 8014936:	f1c6 0a01 	rsb	sl, r6, #1
 801493a:	4680      	mov	r8, r0
 801493c:	4689      	mov	r9, r1
 801493e:	ebaa 0a06 	sub.w	sl, sl, r6
 8014942:	eeb0 8a47 	vmov.f32	s16, s14
 8014946:	eef0 8a67 	vmov.f32	s17, s15
 801494a:	ec53 2b18 	vmov	r2, r3, d8
 801494e:	4640      	mov	r0, r8
 8014950:	4649      	mov	r1, r9
 8014952:	f7eb fca1 	bl	8000298 <__aeabi_dsub>
 8014956:	4604      	mov	r4, r0
 8014958:	460d      	mov	r5, r1
 801495a:	4622      	mov	r2, r4
 801495c:	462b      	mov	r3, r5
 801495e:	4620      	mov	r0, r4
 8014960:	4629      	mov	r1, r5
 8014962:	f7eb fe51 	bl	8000608 <__aeabi_dmul>
 8014966:	a36a      	add	r3, pc, #424	; (adr r3, 8014b10 <__ieee754_exp+0x290>)
 8014968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801496c:	4606      	mov	r6, r0
 801496e:	460f      	mov	r7, r1
 8014970:	f7eb fe4a 	bl	8000608 <__aeabi_dmul>
 8014974:	a368      	add	r3, pc, #416	; (adr r3, 8014b18 <__ieee754_exp+0x298>)
 8014976:	e9d3 2300 	ldrd	r2, r3, [r3]
 801497a:	f7eb fc8d 	bl	8000298 <__aeabi_dsub>
 801497e:	4632      	mov	r2, r6
 8014980:	463b      	mov	r3, r7
 8014982:	f7eb fe41 	bl	8000608 <__aeabi_dmul>
 8014986:	a366      	add	r3, pc, #408	; (adr r3, 8014b20 <__ieee754_exp+0x2a0>)
 8014988:	e9d3 2300 	ldrd	r2, r3, [r3]
 801498c:	f7eb fc86 	bl	800029c <__adddf3>
 8014990:	4632      	mov	r2, r6
 8014992:	463b      	mov	r3, r7
 8014994:	f7eb fe38 	bl	8000608 <__aeabi_dmul>
 8014998:	a363      	add	r3, pc, #396	; (adr r3, 8014b28 <__ieee754_exp+0x2a8>)
 801499a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801499e:	f7eb fc7b 	bl	8000298 <__aeabi_dsub>
 80149a2:	4632      	mov	r2, r6
 80149a4:	463b      	mov	r3, r7
 80149a6:	f7eb fe2f 	bl	8000608 <__aeabi_dmul>
 80149aa:	a361      	add	r3, pc, #388	; (adr r3, 8014b30 <__ieee754_exp+0x2b0>)
 80149ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149b0:	f7eb fc74 	bl	800029c <__adddf3>
 80149b4:	4632      	mov	r2, r6
 80149b6:	463b      	mov	r3, r7
 80149b8:	f7eb fe26 	bl	8000608 <__aeabi_dmul>
 80149bc:	4602      	mov	r2, r0
 80149be:	460b      	mov	r3, r1
 80149c0:	4620      	mov	r0, r4
 80149c2:	4629      	mov	r1, r5
 80149c4:	f7eb fc68 	bl	8000298 <__aeabi_dsub>
 80149c8:	4602      	mov	r2, r0
 80149ca:	460b      	mov	r3, r1
 80149cc:	4606      	mov	r6, r0
 80149ce:	460f      	mov	r7, r1
 80149d0:	4620      	mov	r0, r4
 80149d2:	4629      	mov	r1, r5
 80149d4:	f7eb fe18 	bl	8000608 <__aeabi_dmul>
 80149d8:	ec41 0b19 	vmov	d9, r0, r1
 80149dc:	f1ba 0f00 	cmp.w	sl, #0
 80149e0:	d15d      	bne.n	8014a9e <__ieee754_exp+0x21e>
 80149e2:	2200      	movs	r2, #0
 80149e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80149e8:	4630      	mov	r0, r6
 80149ea:	4639      	mov	r1, r7
 80149ec:	f7eb fc54 	bl	8000298 <__aeabi_dsub>
 80149f0:	4602      	mov	r2, r0
 80149f2:	460b      	mov	r3, r1
 80149f4:	ec51 0b19 	vmov	r0, r1, d9
 80149f8:	f7eb ff30 	bl	800085c <__aeabi_ddiv>
 80149fc:	4622      	mov	r2, r4
 80149fe:	462b      	mov	r3, r5
 8014a00:	f7eb fc4a 	bl	8000298 <__aeabi_dsub>
 8014a04:	4602      	mov	r2, r0
 8014a06:	460b      	mov	r3, r1
 8014a08:	2000      	movs	r0, #0
 8014a0a:	4957      	ldr	r1, [pc, #348]	; (8014b68 <__ieee754_exp+0x2e8>)
 8014a0c:	f7eb fc44 	bl	8000298 <__aeabi_dsub>
 8014a10:	e753      	b.n	80148ba <__ieee754_exp+0x3a>
 8014a12:	4856      	ldr	r0, [pc, #344]	; (8014b6c <__ieee754_exp+0x2ec>)
 8014a14:	a348      	add	r3, pc, #288	; (adr r3, 8014b38 <__ieee754_exp+0x2b8>)
 8014a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a1a:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8014a1e:	4629      	mov	r1, r5
 8014a20:	4620      	mov	r0, r4
 8014a22:	f7eb fdf1 	bl	8000608 <__aeabi_dmul>
 8014a26:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014a2a:	f7eb fc37 	bl	800029c <__adddf3>
 8014a2e:	f7ec f89b 	bl	8000b68 <__aeabi_d2iz>
 8014a32:	4682      	mov	sl, r0
 8014a34:	f7eb fd7e 	bl	8000534 <__aeabi_i2d>
 8014a38:	a341      	add	r3, pc, #260	; (adr r3, 8014b40 <__ieee754_exp+0x2c0>)
 8014a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a3e:	4606      	mov	r6, r0
 8014a40:	460f      	mov	r7, r1
 8014a42:	f7eb fde1 	bl	8000608 <__aeabi_dmul>
 8014a46:	4602      	mov	r2, r0
 8014a48:	460b      	mov	r3, r1
 8014a4a:	4620      	mov	r0, r4
 8014a4c:	4629      	mov	r1, r5
 8014a4e:	f7eb fc23 	bl	8000298 <__aeabi_dsub>
 8014a52:	a33d      	add	r3, pc, #244	; (adr r3, 8014b48 <__ieee754_exp+0x2c8>)
 8014a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a58:	4680      	mov	r8, r0
 8014a5a:	4689      	mov	r9, r1
 8014a5c:	4630      	mov	r0, r6
 8014a5e:	4639      	mov	r1, r7
 8014a60:	f7eb fdd2 	bl	8000608 <__aeabi_dmul>
 8014a64:	ec41 0b18 	vmov	d8, r0, r1
 8014a68:	e76f      	b.n	801494a <__ieee754_exp+0xca>
 8014a6a:	4a41      	ldr	r2, [pc, #260]	; (8014b70 <__ieee754_exp+0x2f0>)
 8014a6c:	4293      	cmp	r3, r2
 8014a6e:	d811      	bhi.n	8014a94 <__ieee754_exp+0x214>
 8014a70:	a323      	add	r3, pc, #140	; (adr r3, 8014b00 <__ieee754_exp+0x280>)
 8014a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a76:	ee10 0a10 	vmov	r0, s0
 8014a7a:	4629      	mov	r1, r5
 8014a7c:	f7eb fc0e 	bl	800029c <__adddf3>
 8014a80:	4b39      	ldr	r3, [pc, #228]	; (8014b68 <__ieee754_exp+0x2e8>)
 8014a82:	2200      	movs	r2, #0
 8014a84:	f7ec f850 	bl	8000b28 <__aeabi_dcmpgt>
 8014a88:	b138      	cbz	r0, 8014a9a <__ieee754_exp+0x21a>
 8014a8a:	4b37      	ldr	r3, [pc, #220]	; (8014b68 <__ieee754_exp+0x2e8>)
 8014a8c:	2200      	movs	r2, #0
 8014a8e:	4620      	mov	r0, r4
 8014a90:	4629      	mov	r1, r5
 8014a92:	e710      	b.n	80148b6 <__ieee754_exp+0x36>
 8014a94:	f04f 0a00 	mov.w	sl, #0
 8014a98:	e75f      	b.n	801495a <__ieee754_exp+0xda>
 8014a9a:	4682      	mov	sl, r0
 8014a9c:	e75d      	b.n	801495a <__ieee754_exp+0xda>
 8014a9e:	4632      	mov	r2, r6
 8014aa0:	463b      	mov	r3, r7
 8014aa2:	2000      	movs	r0, #0
 8014aa4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8014aa8:	f7eb fbf6 	bl	8000298 <__aeabi_dsub>
 8014aac:	4602      	mov	r2, r0
 8014aae:	460b      	mov	r3, r1
 8014ab0:	ec51 0b19 	vmov	r0, r1, d9
 8014ab4:	f7eb fed2 	bl	800085c <__aeabi_ddiv>
 8014ab8:	4602      	mov	r2, r0
 8014aba:	460b      	mov	r3, r1
 8014abc:	ec51 0b18 	vmov	r0, r1, d8
 8014ac0:	f7eb fbea 	bl	8000298 <__aeabi_dsub>
 8014ac4:	4642      	mov	r2, r8
 8014ac6:	464b      	mov	r3, r9
 8014ac8:	f7eb fbe6 	bl	8000298 <__aeabi_dsub>
 8014acc:	4602      	mov	r2, r0
 8014ace:	460b      	mov	r3, r1
 8014ad0:	2000      	movs	r0, #0
 8014ad2:	4925      	ldr	r1, [pc, #148]	; (8014b68 <__ieee754_exp+0x2e8>)
 8014ad4:	f7eb fbe0 	bl	8000298 <__aeabi_dsub>
 8014ad8:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8014adc:	4592      	cmp	sl, r2
 8014ade:	db02      	blt.n	8014ae6 <__ieee754_exp+0x266>
 8014ae0:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8014ae4:	e6e9      	b.n	80148ba <__ieee754_exp+0x3a>
 8014ae6:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8014aea:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8014aee:	2200      	movs	r2, #0
 8014af0:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8014af4:	e6f9      	b.n	80148ea <__ieee754_exp+0x6a>
 8014af6:	bf00      	nop
 8014af8:	fefa39ef 	.word	0xfefa39ef
 8014afc:	40862e42 	.word	0x40862e42
 8014b00:	8800759c 	.word	0x8800759c
 8014b04:	7e37e43c 	.word	0x7e37e43c
 8014b08:	d52d3051 	.word	0xd52d3051
 8014b0c:	c0874910 	.word	0xc0874910
 8014b10:	72bea4d0 	.word	0x72bea4d0
 8014b14:	3e663769 	.word	0x3e663769
 8014b18:	c5d26bf1 	.word	0xc5d26bf1
 8014b1c:	3ebbbd41 	.word	0x3ebbbd41
 8014b20:	af25de2c 	.word	0xaf25de2c
 8014b24:	3f11566a 	.word	0x3f11566a
 8014b28:	16bebd93 	.word	0x16bebd93
 8014b2c:	3f66c16c 	.word	0x3f66c16c
 8014b30:	5555553e 	.word	0x5555553e
 8014b34:	3fc55555 	.word	0x3fc55555
 8014b38:	652b82fe 	.word	0x652b82fe
 8014b3c:	3ff71547 	.word	0x3ff71547
 8014b40:	fee00000 	.word	0xfee00000
 8014b44:	3fe62e42 	.word	0x3fe62e42
 8014b48:	35793c76 	.word	0x35793c76
 8014b4c:	3dea39ef 	.word	0x3dea39ef
 8014b50:	40862e41 	.word	0x40862e41
 8014b54:	7fefffff 	.word	0x7fefffff
 8014b58:	3fd62e42 	.word	0x3fd62e42
 8014b5c:	3ff0a2b1 	.word	0x3ff0a2b1
 8014b60:	080166e8 	.word	0x080166e8
 8014b64:	080166f8 	.word	0x080166f8
 8014b68:	3ff00000 	.word	0x3ff00000
 8014b6c:	080166d8 	.word	0x080166d8
 8014b70:	3e2fffff 	.word	0x3e2fffff
 8014b74:	00000000 	.word	0x00000000

08014b78 <__ieee754_log>:
 8014b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b7c:	ec51 0b10 	vmov	r0, r1, d0
 8014b80:	ed2d 8b04 	vpush	{d8-d9}
 8014b84:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8014b88:	b083      	sub	sp, #12
 8014b8a:	460d      	mov	r5, r1
 8014b8c:	da29      	bge.n	8014be2 <__ieee754_log+0x6a>
 8014b8e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014b92:	4303      	orrs	r3, r0
 8014b94:	ee10 2a10 	vmov	r2, s0
 8014b98:	d10c      	bne.n	8014bb4 <__ieee754_log+0x3c>
 8014b9a:	49cf      	ldr	r1, [pc, #828]	; (8014ed8 <__ieee754_log+0x360>)
 8014b9c:	2200      	movs	r2, #0
 8014b9e:	2300      	movs	r3, #0
 8014ba0:	2000      	movs	r0, #0
 8014ba2:	f7eb fe5b 	bl	800085c <__aeabi_ddiv>
 8014ba6:	ec41 0b10 	vmov	d0, r0, r1
 8014baa:	b003      	add	sp, #12
 8014bac:	ecbd 8b04 	vpop	{d8-d9}
 8014bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bb4:	2900      	cmp	r1, #0
 8014bb6:	da05      	bge.n	8014bc4 <__ieee754_log+0x4c>
 8014bb8:	460b      	mov	r3, r1
 8014bba:	f7eb fb6d 	bl	8000298 <__aeabi_dsub>
 8014bbe:	2200      	movs	r2, #0
 8014bc0:	2300      	movs	r3, #0
 8014bc2:	e7ee      	b.n	8014ba2 <__ieee754_log+0x2a>
 8014bc4:	4bc5      	ldr	r3, [pc, #788]	; (8014edc <__ieee754_log+0x364>)
 8014bc6:	2200      	movs	r2, #0
 8014bc8:	f7eb fd1e 	bl	8000608 <__aeabi_dmul>
 8014bcc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8014bd0:	460d      	mov	r5, r1
 8014bd2:	4ac3      	ldr	r2, [pc, #780]	; (8014ee0 <__ieee754_log+0x368>)
 8014bd4:	4295      	cmp	r5, r2
 8014bd6:	dd06      	ble.n	8014be6 <__ieee754_log+0x6e>
 8014bd8:	4602      	mov	r2, r0
 8014bda:	460b      	mov	r3, r1
 8014bdc:	f7eb fb5e 	bl	800029c <__adddf3>
 8014be0:	e7e1      	b.n	8014ba6 <__ieee754_log+0x2e>
 8014be2:	2300      	movs	r3, #0
 8014be4:	e7f5      	b.n	8014bd2 <__ieee754_log+0x5a>
 8014be6:	152c      	asrs	r4, r5, #20
 8014be8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8014bec:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8014bf0:	441c      	add	r4, r3
 8014bf2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8014bf6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8014bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014bfe:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8014c02:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8014c06:	ea42 0105 	orr.w	r1, r2, r5
 8014c0a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8014c0e:	2200      	movs	r2, #0
 8014c10:	4bb4      	ldr	r3, [pc, #720]	; (8014ee4 <__ieee754_log+0x36c>)
 8014c12:	f7eb fb41 	bl	8000298 <__aeabi_dsub>
 8014c16:	1cab      	adds	r3, r5, #2
 8014c18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014c1c:	2b02      	cmp	r3, #2
 8014c1e:	4682      	mov	sl, r0
 8014c20:	468b      	mov	fp, r1
 8014c22:	f04f 0200 	mov.w	r2, #0
 8014c26:	dc53      	bgt.n	8014cd0 <__ieee754_log+0x158>
 8014c28:	2300      	movs	r3, #0
 8014c2a:	f7eb ff55 	bl	8000ad8 <__aeabi_dcmpeq>
 8014c2e:	b1d0      	cbz	r0, 8014c66 <__ieee754_log+0xee>
 8014c30:	2c00      	cmp	r4, #0
 8014c32:	f000 8122 	beq.w	8014e7a <__ieee754_log+0x302>
 8014c36:	4620      	mov	r0, r4
 8014c38:	f7eb fc7c 	bl	8000534 <__aeabi_i2d>
 8014c3c:	a390      	add	r3, pc, #576	; (adr r3, 8014e80 <__ieee754_log+0x308>)
 8014c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c42:	4606      	mov	r6, r0
 8014c44:	460f      	mov	r7, r1
 8014c46:	f7eb fcdf 	bl	8000608 <__aeabi_dmul>
 8014c4a:	a38f      	add	r3, pc, #572	; (adr r3, 8014e88 <__ieee754_log+0x310>)
 8014c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c50:	4604      	mov	r4, r0
 8014c52:	460d      	mov	r5, r1
 8014c54:	4630      	mov	r0, r6
 8014c56:	4639      	mov	r1, r7
 8014c58:	f7eb fcd6 	bl	8000608 <__aeabi_dmul>
 8014c5c:	4602      	mov	r2, r0
 8014c5e:	460b      	mov	r3, r1
 8014c60:	4620      	mov	r0, r4
 8014c62:	4629      	mov	r1, r5
 8014c64:	e7ba      	b.n	8014bdc <__ieee754_log+0x64>
 8014c66:	a38a      	add	r3, pc, #552	; (adr r3, 8014e90 <__ieee754_log+0x318>)
 8014c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c6c:	4650      	mov	r0, sl
 8014c6e:	4659      	mov	r1, fp
 8014c70:	f7eb fcca 	bl	8000608 <__aeabi_dmul>
 8014c74:	4602      	mov	r2, r0
 8014c76:	460b      	mov	r3, r1
 8014c78:	2000      	movs	r0, #0
 8014c7a:	499b      	ldr	r1, [pc, #620]	; (8014ee8 <__ieee754_log+0x370>)
 8014c7c:	f7eb fb0c 	bl	8000298 <__aeabi_dsub>
 8014c80:	4652      	mov	r2, sl
 8014c82:	4606      	mov	r6, r0
 8014c84:	460f      	mov	r7, r1
 8014c86:	465b      	mov	r3, fp
 8014c88:	4650      	mov	r0, sl
 8014c8a:	4659      	mov	r1, fp
 8014c8c:	f7eb fcbc 	bl	8000608 <__aeabi_dmul>
 8014c90:	4602      	mov	r2, r0
 8014c92:	460b      	mov	r3, r1
 8014c94:	4630      	mov	r0, r6
 8014c96:	4639      	mov	r1, r7
 8014c98:	f7eb fcb6 	bl	8000608 <__aeabi_dmul>
 8014c9c:	4606      	mov	r6, r0
 8014c9e:	460f      	mov	r7, r1
 8014ca0:	b914      	cbnz	r4, 8014ca8 <__ieee754_log+0x130>
 8014ca2:	4632      	mov	r2, r6
 8014ca4:	463b      	mov	r3, r7
 8014ca6:	e0a2      	b.n	8014dee <__ieee754_log+0x276>
 8014ca8:	4620      	mov	r0, r4
 8014caa:	f7eb fc43 	bl	8000534 <__aeabi_i2d>
 8014cae:	a374      	add	r3, pc, #464	; (adr r3, 8014e80 <__ieee754_log+0x308>)
 8014cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cb4:	4680      	mov	r8, r0
 8014cb6:	4689      	mov	r9, r1
 8014cb8:	f7eb fca6 	bl	8000608 <__aeabi_dmul>
 8014cbc:	a372      	add	r3, pc, #456	; (adr r3, 8014e88 <__ieee754_log+0x310>)
 8014cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cc2:	4604      	mov	r4, r0
 8014cc4:	460d      	mov	r5, r1
 8014cc6:	4640      	mov	r0, r8
 8014cc8:	4649      	mov	r1, r9
 8014cca:	f7eb fc9d 	bl	8000608 <__aeabi_dmul>
 8014cce:	e0a7      	b.n	8014e20 <__ieee754_log+0x2a8>
 8014cd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014cd4:	f7eb fae2 	bl	800029c <__adddf3>
 8014cd8:	4602      	mov	r2, r0
 8014cda:	460b      	mov	r3, r1
 8014cdc:	4650      	mov	r0, sl
 8014cde:	4659      	mov	r1, fp
 8014ce0:	f7eb fdbc 	bl	800085c <__aeabi_ddiv>
 8014ce4:	ec41 0b18 	vmov	d8, r0, r1
 8014ce8:	4620      	mov	r0, r4
 8014cea:	f7eb fc23 	bl	8000534 <__aeabi_i2d>
 8014cee:	ec53 2b18 	vmov	r2, r3, d8
 8014cf2:	ec41 0b19 	vmov	d9, r0, r1
 8014cf6:	ec51 0b18 	vmov	r0, r1, d8
 8014cfa:	f7eb fc85 	bl	8000608 <__aeabi_dmul>
 8014cfe:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8014d02:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8014d06:	9301      	str	r3, [sp, #4]
 8014d08:	4602      	mov	r2, r0
 8014d0a:	460b      	mov	r3, r1
 8014d0c:	4680      	mov	r8, r0
 8014d0e:	4689      	mov	r9, r1
 8014d10:	f7eb fc7a 	bl	8000608 <__aeabi_dmul>
 8014d14:	a360      	add	r3, pc, #384	; (adr r3, 8014e98 <__ieee754_log+0x320>)
 8014d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d1a:	4606      	mov	r6, r0
 8014d1c:	460f      	mov	r7, r1
 8014d1e:	f7eb fc73 	bl	8000608 <__aeabi_dmul>
 8014d22:	a35f      	add	r3, pc, #380	; (adr r3, 8014ea0 <__ieee754_log+0x328>)
 8014d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d28:	f7eb fab8 	bl	800029c <__adddf3>
 8014d2c:	4632      	mov	r2, r6
 8014d2e:	463b      	mov	r3, r7
 8014d30:	f7eb fc6a 	bl	8000608 <__aeabi_dmul>
 8014d34:	a35c      	add	r3, pc, #368	; (adr r3, 8014ea8 <__ieee754_log+0x330>)
 8014d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d3a:	f7eb faaf 	bl	800029c <__adddf3>
 8014d3e:	4632      	mov	r2, r6
 8014d40:	463b      	mov	r3, r7
 8014d42:	f7eb fc61 	bl	8000608 <__aeabi_dmul>
 8014d46:	a35a      	add	r3, pc, #360	; (adr r3, 8014eb0 <__ieee754_log+0x338>)
 8014d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d4c:	f7eb faa6 	bl	800029c <__adddf3>
 8014d50:	4642      	mov	r2, r8
 8014d52:	464b      	mov	r3, r9
 8014d54:	f7eb fc58 	bl	8000608 <__aeabi_dmul>
 8014d58:	a357      	add	r3, pc, #348	; (adr r3, 8014eb8 <__ieee754_log+0x340>)
 8014d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d5e:	4680      	mov	r8, r0
 8014d60:	4689      	mov	r9, r1
 8014d62:	4630      	mov	r0, r6
 8014d64:	4639      	mov	r1, r7
 8014d66:	f7eb fc4f 	bl	8000608 <__aeabi_dmul>
 8014d6a:	a355      	add	r3, pc, #340	; (adr r3, 8014ec0 <__ieee754_log+0x348>)
 8014d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d70:	f7eb fa94 	bl	800029c <__adddf3>
 8014d74:	4632      	mov	r2, r6
 8014d76:	463b      	mov	r3, r7
 8014d78:	f7eb fc46 	bl	8000608 <__aeabi_dmul>
 8014d7c:	a352      	add	r3, pc, #328	; (adr r3, 8014ec8 <__ieee754_log+0x350>)
 8014d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d82:	f7eb fa8b 	bl	800029c <__adddf3>
 8014d86:	4632      	mov	r2, r6
 8014d88:	463b      	mov	r3, r7
 8014d8a:	f7eb fc3d 	bl	8000608 <__aeabi_dmul>
 8014d8e:	460b      	mov	r3, r1
 8014d90:	4602      	mov	r2, r0
 8014d92:	4649      	mov	r1, r9
 8014d94:	4640      	mov	r0, r8
 8014d96:	f7eb fa81 	bl	800029c <__adddf3>
 8014d9a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8014d9e:	9b01      	ldr	r3, [sp, #4]
 8014da0:	3551      	adds	r5, #81	; 0x51
 8014da2:	431d      	orrs	r5, r3
 8014da4:	2d00      	cmp	r5, #0
 8014da6:	4680      	mov	r8, r0
 8014da8:	4689      	mov	r9, r1
 8014daa:	dd48      	ble.n	8014e3e <__ieee754_log+0x2c6>
 8014dac:	4b4e      	ldr	r3, [pc, #312]	; (8014ee8 <__ieee754_log+0x370>)
 8014dae:	2200      	movs	r2, #0
 8014db0:	4650      	mov	r0, sl
 8014db2:	4659      	mov	r1, fp
 8014db4:	f7eb fc28 	bl	8000608 <__aeabi_dmul>
 8014db8:	4652      	mov	r2, sl
 8014dba:	465b      	mov	r3, fp
 8014dbc:	f7eb fc24 	bl	8000608 <__aeabi_dmul>
 8014dc0:	4602      	mov	r2, r0
 8014dc2:	460b      	mov	r3, r1
 8014dc4:	4606      	mov	r6, r0
 8014dc6:	460f      	mov	r7, r1
 8014dc8:	4640      	mov	r0, r8
 8014dca:	4649      	mov	r1, r9
 8014dcc:	f7eb fa66 	bl	800029c <__adddf3>
 8014dd0:	ec53 2b18 	vmov	r2, r3, d8
 8014dd4:	f7eb fc18 	bl	8000608 <__aeabi_dmul>
 8014dd8:	4680      	mov	r8, r0
 8014dda:	4689      	mov	r9, r1
 8014ddc:	b964      	cbnz	r4, 8014df8 <__ieee754_log+0x280>
 8014dde:	4602      	mov	r2, r0
 8014de0:	460b      	mov	r3, r1
 8014de2:	4630      	mov	r0, r6
 8014de4:	4639      	mov	r1, r7
 8014de6:	f7eb fa57 	bl	8000298 <__aeabi_dsub>
 8014dea:	4602      	mov	r2, r0
 8014dec:	460b      	mov	r3, r1
 8014dee:	4650      	mov	r0, sl
 8014df0:	4659      	mov	r1, fp
 8014df2:	f7eb fa51 	bl	8000298 <__aeabi_dsub>
 8014df6:	e6d6      	b.n	8014ba6 <__ieee754_log+0x2e>
 8014df8:	a321      	add	r3, pc, #132	; (adr r3, 8014e80 <__ieee754_log+0x308>)
 8014dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dfe:	ec51 0b19 	vmov	r0, r1, d9
 8014e02:	f7eb fc01 	bl	8000608 <__aeabi_dmul>
 8014e06:	a320      	add	r3, pc, #128	; (adr r3, 8014e88 <__ieee754_log+0x310>)
 8014e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e0c:	4604      	mov	r4, r0
 8014e0e:	460d      	mov	r5, r1
 8014e10:	ec51 0b19 	vmov	r0, r1, d9
 8014e14:	f7eb fbf8 	bl	8000608 <__aeabi_dmul>
 8014e18:	4642      	mov	r2, r8
 8014e1a:	464b      	mov	r3, r9
 8014e1c:	f7eb fa3e 	bl	800029c <__adddf3>
 8014e20:	4602      	mov	r2, r0
 8014e22:	460b      	mov	r3, r1
 8014e24:	4630      	mov	r0, r6
 8014e26:	4639      	mov	r1, r7
 8014e28:	f7eb fa36 	bl	8000298 <__aeabi_dsub>
 8014e2c:	4652      	mov	r2, sl
 8014e2e:	465b      	mov	r3, fp
 8014e30:	f7eb fa32 	bl	8000298 <__aeabi_dsub>
 8014e34:	4602      	mov	r2, r0
 8014e36:	460b      	mov	r3, r1
 8014e38:	4620      	mov	r0, r4
 8014e3a:	4629      	mov	r1, r5
 8014e3c:	e7d9      	b.n	8014df2 <__ieee754_log+0x27a>
 8014e3e:	4602      	mov	r2, r0
 8014e40:	460b      	mov	r3, r1
 8014e42:	4650      	mov	r0, sl
 8014e44:	4659      	mov	r1, fp
 8014e46:	f7eb fa27 	bl	8000298 <__aeabi_dsub>
 8014e4a:	ec53 2b18 	vmov	r2, r3, d8
 8014e4e:	f7eb fbdb 	bl	8000608 <__aeabi_dmul>
 8014e52:	4606      	mov	r6, r0
 8014e54:	460f      	mov	r7, r1
 8014e56:	2c00      	cmp	r4, #0
 8014e58:	f43f af23 	beq.w	8014ca2 <__ieee754_log+0x12a>
 8014e5c:	a308      	add	r3, pc, #32	; (adr r3, 8014e80 <__ieee754_log+0x308>)
 8014e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e62:	ec51 0b19 	vmov	r0, r1, d9
 8014e66:	f7eb fbcf 	bl	8000608 <__aeabi_dmul>
 8014e6a:	a307      	add	r3, pc, #28	; (adr r3, 8014e88 <__ieee754_log+0x310>)
 8014e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e70:	4604      	mov	r4, r0
 8014e72:	460d      	mov	r5, r1
 8014e74:	ec51 0b19 	vmov	r0, r1, d9
 8014e78:	e727      	b.n	8014cca <__ieee754_log+0x152>
 8014e7a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8014ed0 <__ieee754_log+0x358>
 8014e7e:	e694      	b.n	8014baa <__ieee754_log+0x32>
 8014e80:	fee00000 	.word	0xfee00000
 8014e84:	3fe62e42 	.word	0x3fe62e42
 8014e88:	35793c76 	.word	0x35793c76
 8014e8c:	3dea39ef 	.word	0x3dea39ef
 8014e90:	55555555 	.word	0x55555555
 8014e94:	3fd55555 	.word	0x3fd55555
 8014e98:	df3e5244 	.word	0xdf3e5244
 8014e9c:	3fc2f112 	.word	0x3fc2f112
 8014ea0:	96cb03de 	.word	0x96cb03de
 8014ea4:	3fc74664 	.word	0x3fc74664
 8014ea8:	94229359 	.word	0x94229359
 8014eac:	3fd24924 	.word	0x3fd24924
 8014eb0:	55555593 	.word	0x55555593
 8014eb4:	3fe55555 	.word	0x3fe55555
 8014eb8:	d078c69f 	.word	0xd078c69f
 8014ebc:	3fc39a09 	.word	0x3fc39a09
 8014ec0:	1d8e78af 	.word	0x1d8e78af
 8014ec4:	3fcc71c5 	.word	0x3fcc71c5
 8014ec8:	9997fa04 	.word	0x9997fa04
 8014ecc:	3fd99999 	.word	0x3fd99999
	...
 8014ed8:	c3500000 	.word	0xc3500000
 8014edc:	43500000 	.word	0x43500000
 8014ee0:	7fefffff 	.word	0x7fefffff
 8014ee4:	3ff00000 	.word	0x3ff00000
 8014ee8:	3fe00000 	.word	0x3fe00000
 8014eec:	00000000 	.word	0x00000000

08014ef0 <__ieee754_pow>:
 8014ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ef4:	ed2d 8b06 	vpush	{d8-d10}
 8014ef8:	b08d      	sub	sp, #52	; 0x34
 8014efa:	ed8d 1b02 	vstr	d1, [sp, #8]
 8014efe:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8014f02:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8014f06:	ea56 0100 	orrs.w	r1, r6, r0
 8014f0a:	ec53 2b10 	vmov	r2, r3, d0
 8014f0e:	f000 84d1 	beq.w	80158b4 <__ieee754_pow+0x9c4>
 8014f12:	497f      	ldr	r1, [pc, #508]	; (8015110 <__ieee754_pow+0x220>)
 8014f14:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8014f18:	428c      	cmp	r4, r1
 8014f1a:	ee10 8a10 	vmov	r8, s0
 8014f1e:	4699      	mov	r9, r3
 8014f20:	dc09      	bgt.n	8014f36 <__ieee754_pow+0x46>
 8014f22:	d103      	bne.n	8014f2c <__ieee754_pow+0x3c>
 8014f24:	b97a      	cbnz	r2, 8014f46 <__ieee754_pow+0x56>
 8014f26:	42a6      	cmp	r6, r4
 8014f28:	dd02      	ble.n	8014f30 <__ieee754_pow+0x40>
 8014f2a:	e00c      	b.n	8014f46 <__ieee754_pow+0x56>
 8014f2c:	428e      	cmp	r6, r1
 8014f2e:	dc02      	bgt.n	8014f36 <__ieee754_pow+0x46>
 8014f30:	428e      	cmp	r6, r1
 8014f32:	d110      	bne.n	8014f56 <__ieee754_pow+0x66>
 8014f34:	b178      	cbz	r0, 8014f56 <__ieee754_pow+0x66>
 8014f36:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8014f3a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014f3e:	ea54 0308 	orrs.w	r3, r4, r8
 8014f42:	f000 84b7 	beq.w	80158b4 <__ieee754_pow+0x9c4>
 8014f46:	4873      	ldr	r0, [pc, #460]	; (8015114 <__ieee754_pow+0x224>)
 8014f48:	b00d      	add	sp, #52	; 0x34
 8014f4a:	ecbd 8b06 	vpop	{d8-d10}
 8014f4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f52:	f7ff b9dd 	b.w	8014310 <nan>
 8014f56:	f1b9 0f00 	cmp.w	r9, #0
 8014f5a:	da36      	bge.n	8014fca <__ieee754_pow+0xda>
 8014f5c:	496e      	ldr	r1, [pc, #440]	; (8015118 <__ieee754_pow+0x228>)
 8014f5e:	428e      	cmp	r6, r1
 8014f60:	dc51      	bgt.n	8015006 <__ieee754_pow+0x116>
 8014f62:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8014f66:	428e      	cmp	r6, r1
 8014f68:	f340 84af 	ble.w	80158ca <__ieee754_pow+0x9da>
 8014f6c:	1531      	asrs	r1, r6, #20
 8014f6e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8014f72:	2914      	cmp	r1, #20
 8014f74:	dd0f      	ble.n	8014f96 <__ieee754_pow+0xa6>
 8014f76:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8014f7a:	fa20 fc01 	lsr.w	ip, r0, r1
 8014f7e:	fa0c f101 	lsl.w	r1, ip, r1
 8014f82:	4281      	cmp	r1, r0
 8014f84:	f040 84a1 	bne.w	80158ca <__ieee754_pow+0x9da>
 8014f88:	f00c 0c01 	and.w	ip, ip, #1
 8014f8c:	f1cc 0102 	rsb	r1, ip, #2
 8014f90:	9100      	str	r1, [sp, #0]
 8014f92:	b180      	cbz	r0, 8014fb6 <__ieee754_pow+0xc6>
 8014f94:	e059      	b.n	801504a <__ieee754_pow+0x15a>
 8014f96:	2800      	cmp	r0, #0
 8014f98:	d155      	bne.n	8015046 <__ieee754_pow+0x156>
 8014f9a:	f1c1 0114 	rsb	r1, r1, #20
 8014f9e:	fa46 fc01 	asr.w	ip, r6, r1
 8014fa2:	fa0c f101 	lsl.w	r1, ip, r1
 8014fa6:	42b1      	cmp	r1, r6
 8014fa8:	f040 848c 	bne.w	80158c4 <__ieee754_pow+0x9d4>
 8014fac:	f00c 0c01 	and.w	ip, ip, #1
 8014fb0:	f1cc 0102 	rsb	r1, ip, #2
 8014fb4:	9100      	str	r1, [sp, #0]
 8014fb6:	4959      	ldr	r1, [pc, #356]	; (801511c <__ieee754_pow+0x22c>)
 8014fb8:	428e      	cmp	r6, r1
 8014fba:	d12d      	bne.n	8015018 <__ieee754_pow+0x128>
 8014fbc:	2f00      	cmp	r7, #0
 8014fbe:	da79      	bge.n	80150b4 <__ieee754_pow+0x1c4>
 8014fc0:	4956      	ldr	r1, [pc, #344]	; (801511c <__ieee754_pow+0x22c>)
 8014fc2:	2000      	movs	r0, #0
 8014fc4:	f7eb fc4a 	bl	800085c <__aeabi_ddiv>
 8014fc8:	e016      	b.n	8014ff8 <__ieee754_pow+0x108>
 8014fca:	2100      	movs	r1, #0
 8014fcc:	9100      	str	r1, [sp, #0]
 8014fce:	2800      	cmp	r0, #0
 8014fd0:	d13b      	bne.n	801504a <__ieee754_pow+0x15a>
 8014fd2:	494f      	ldr	r1, [pc, #316]	; (8015110 <__ieee754_pow+0x220>)
 8014fd4:	428e      	cmp	r6, r1
 8014fd6:	d1ee      	bne.n	8014fb6 <__ieee754_pow+0xc6>
 8014fd8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8014fdc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8014fe0:	ea53 0308 	orrs.w	r3, r3, r8
 8014fe4:	f000 8466 	beq.w	80158b4 <__ieee754_pow+0x9c4>
 8014fe8:	4b4d      	ldr	r3, [pc, #308]	; (8015120 <__ieee754_pow+0x230>)
 8014fea:	429c      	cmp	r4, r3
 8014fec:	dd0d      	ble.n	801500a <__ieee754_pow+0x11a>
 8014fee:	2f00      	cmp	r7, #0
 8014ff0:	f280 8464 	bge.w	80158bc <__ieee754_pow+0x9cc>
 8014ff4:	2000      	movs	r0, #0
 8014ff6:	2100      	movs	r1, #0
 8014ff8:	ec41 0b10 	vmov	d0, r0, r1
 8014ffc:	b00d      	add	sp, #52	; 0x34
 8014ffe:	ecbd 8b06 	vpop	{d8-d10}
 8015002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015006:	2102      	movs	r1, #2
 8015008:	e7e0      	b.n	8014fcc <__ieee754_pow+0xdc>
 801500a:	2f00      	cmp	r7, #0
 801500c:	daf2      	bge.n	8014ff4 <__ieee754_pow+0x104>
 801500e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8015012:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8015016:	e7ef      	b.n	8014ff8 <__ieee754_pow+0x108>
 8015018:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 801501c:	d104      	bne.n	8015028 <__ieee754_pow+0x138>
 801501e:	4610      	mov	r0, r2
 8015020:	4619      	mov	r1, r3
 8015022:	f7eb faf1 	bl	8000608 <__aeabi_dmul>
 8015026:	e7e7      	b.n	8014ff8 <__ieee754_pow+0x108>
 8015028:	493e      	ldr	r1, [pc, #248]	; (8015124 <__ieee754_pow+0x234>)
 801502a:	428f      	cmp	r7, r1
 801502c:	d10d      	bne.n	801504a <__ieee754_pow+0x15a>
 801502e:	f1b9 0f00 	cmp.w	r9, #0
 8015032:	db0a      	blt.n	801504a <__ieee754_pow+0x15a>
 8015034:	ec43 2b10 	vmov	d0, r2, r3
 8015038:	b00d      	add	sp, #52	; 0x34
 801503a:	ecbd 8b06 	vpop	{d8-d10}
 801503e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015042:	f000 bc77 	b.w	8015934 <__ieee754_sqrt>
 8015046:	2100      	movs	r1, #0
 8015048:	9100      	str	r1, [sp, #0]
 801504a:	ec43 2b10 	vmov	d0, r2, r3
 801504e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015052:	f000 fd23 	bl	8015a9c <fabs>
 8015056:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801505a:	ec51 0b10 	vmov	r0, r1, d0
 801505e:	f1b8 0f00 	cmp.w	r8, #0
 8015062:	d12a      	bne.n	80150ba <__ieee754_pow+0x1ca>
 8015064:	b12c      	cbz	r4, 8015072 <__ieee754_pow+0x182>
 8015066:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 801511c <__ieee754_pow+0x22c>
 801506a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 801506e:	45e6      	cmp	lr, ip
 8015070:	d123      	bne.n	80150ba <__ieee754_pow+0x1ca>
 8015072:	2f00      	cmp	r7, #0
 8015074:	da05      	bge.n	8015082 <__ieee754_pow+0x192>
 8015076:	4602      	mov	r2, r0
 8015078:	460b      	mov	r3, r1
 801507a:	2000      	movs	r0, #0
 801507c:	4927      	ldr	r1, [pc, #156]	; (801511c <__ieee754_pow+0x22c>)
 801507e:	f7eb fbed 	bl	800085c <__aeabi_ddiv>
 8015082:	f1b9 0f00 	cmp.w	r9, #0
 8015086:	dab7      	bge.n	8014ff8 <__ieee754_pow+0x108>
 8015088:	9b00      	ldr	r3, [sp, #0]
 801508a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801508e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015092:	4323      	orrs	r3, r4
 8015094:	d108      	bne.n	80150a8 <__ieee754_pow+0x1b8>
 8015096:	4602      	mov	r2, r0
 8015098:	460b      	mov	r3, r1
 801509a:	4610      	mov	r0, r2
 801509c:	4619      	mov	r1, r3
 801509e:	f7eb f8fb 	bl	8000298 <__aeabi_dsub>
 80150a2:	4602      	mov	r2, r0
 80150a4:	460b      	mov	r3, r1
 80150a6:	e78d      	b.n	8014fc4 <__ieee754_pow+0xd4>
 80150a8:	9b00      	ldr	r3, [sp, #0]
 80150aa:	2b01      	cmp	r3, #1
 80150ac:	d1a4      	bne.n	8014ff8 <__ieee754_pow+0x108>
 80150ae:	4602      	mov	r2, r0
 80150b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80150b4:	4610      	mov	r0, r2
 80150b6:	4619      	mov	r1, r3
 80150b8:	e79e      	b.n	8014ff8 <__ieee754_pow+0x108>
 80150ba:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 80150be:	f10c 35ff 	add.w	r5, ip, #4294967295
 80150c2:	950a      	str	r5, [sp, #40]	; 0x28
 80150c4:	9d00      	ldr	r5, [sp, #0]
 80150c6:	46ac      	mov	ip, r5
 80150c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80150ca:	ea5c 0505 	orrs.w	r5, ip, r5
 80150ce:	d0e4      	beq.n	801509a <__ieee754_pow+0x1aa>
 80150d0:	4b15      	ldr	r3, [pc, #84]	; (8015128 <__ieee754_pow+0x238>)
 80150d2:	429e      	cmp	r6, r3
 80150d4:	f340 80fc 	ble.w	80152d0 <__ieee754_pow+0x3e0>
 80150d8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80150dc:	429e      	cmp	r6, r3
 80150de:	4b10      	ldr	r3, [pc, #64]	; (8015120 <__ieee754_pow+0x230>)
 80150e0:	dd07      	ble.n	80150f2 <__ieee754_pow+0x202>
 80150e2:	429c      	cmp	r4, r3
 80150e4:	dc0a      	bgt.n	80150fc <__ieee754_pow+0x20c>
 80150e6:	2f00      	cmp	r7, #0
 80150e8:	da84      	bge.n	8014ff4 <__ieee754_pow+0x104>
 80150ea:	a307      	add	r3, pc, #28	; (adr r3, 8015108 <__ieee754_pow+0x218>)
 80150ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150f0:	e795      	b.n	801501e <__ieee754_pow+0x12e>
 80150f2:	429c      	cmp	r4, r3
 80150f4:	dbf7      	blt.n	80150e6 <__ieee754_pow+0x1f6>
 80150f6:	4b09      	ldr	r3, [pc, #36]	; (801511c <__ieee754_pow+0x22c>)
 80150f8:	429c      	cmp	r4, r3
 80150fa:	dd17      	ble.n	801512c <__ieee754_pow+0x23c>
 80150fc:	2f00      	cmp	r7, #0
 80150fe:	dcf4      	bgt.n	80150ea <__ieee754_pow+0x1fa>
 8015100:	e778      	b.n	8014ff4 <__ieee754_pow+0x104>
 8015102:	bf00      	nop
 8015104:	f3af 8000 	nop.w
 8015108:	8800759c 	.word	0x8800759c
 801510c:	7e37e43c 	.word	0x7e37e43c
 8015110:	7ff00000 	.word	0x7ff00000
 8015114:	0801625b 	.word	0x0801625b
 8015118:	433fffff 	.word	0x433fffff
 801511c:	3ff00000 	.word	0x3ff00000
 8015120:	3fefffff 	.word	0x3fefffff
 8015124:	3fe00000 	.word	0x3fe00000
 8015128:	41e00000 	.word	0x41e00000
 801512c:	4b64      	ldr	r3, [pc, #400]	; (80152c0 <__ieee754_pow+0x3d0>)
 801512e:	2200      	movs	r2, #0
 8015130:	f7eb f8b2 	bl	8000298 <__aeabi_dsub>
 8015134:	a356      	add	r3, pc, #344	; (adr r3, 8015290 <__ieee754_pow+0x3a0>)
 8015136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801513a:	4604      	mov	r4, r0
 801513c:	460d      	mov	r5, r1
 801513e:	f7eb fa63 	bl	8000608 <__aeabi_dmul>
 8015142:	a355      	add	r3, pc, #340	; (adr r3, 8015298 <__ieee754_pow+0x3a8>)
 8015144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015148:	4606      	mov	r6, r0
 801514a:	460f      	mov	r7, r1
 801514c:	4620      	mov	r0, r4
 801514e:	4629      	mov	r1, r5
 8015150:	f7eb fa5a 	bl	8000608 <__aeabi_dmul>
 8015154:	4b5b      	ldr	r3, [pc, #364]	; (80152c4 <__ieee754_pow+0x3d4>)
 8015156:	4682      	mov	sl, r0
 8015158:	468b      	mov	fp, r1
 801515a:	2200      	movs	r2, #0
 801515c:	4620      	mov	r0, r4
 801515e:	4629      	mov	r1, r5
 8015160:	f7eb fa52 	bl	8000608 <__aeabi_dmul>
 8015164:	4602      	mov	r2, r0
 8015166:	460b      	mov	r3, r1
 8015168:	a14d      	add	r1, pc, #308	; (adr r1, 80152a0 <__ieee754_pow+0x3b0>)
 801516a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801516e:	f7eb f893 	bl	8000298 <__aeabi_dsub>
 8015172:	4622      	mov	r2, r4
 8015174:	462b      	mov	r3, r5
 8015176:	f7eb fa47 	bl	8000608 <__aeabi_dmul>
 801517a:	4602      	mov	r2, r0
 801517c:	460b      	mov	r3, r1
 801517e:	2000      	movs	r0, #0
 8015180:	4951      	ldr	r1, [pc, #324]	; (80152c8 <__ieee754_pow+0x3d8>)
 8015182:	f7eb f889 	bl	8000298 <__aeabi_dsub>
 8015186:	4622      	mov	r2, r4
 8015188:	4680      	mov	r8, r0
 801518a:	4689      	mov	r9, r1
 801518c:	462b      	mov	r3, r5
 801518e:	4620      	mov	r0, r4
 8015190:	4629      	mov	r1, r5
 8015192:	f7eb fa39 	bl	8000608 <__aeabi_dmul>
 8015196:	4602      	mov	r2, r0
 8015198:	460b      	mov	r3, r1
 801519a:	4640      	mov	r0, r8
 801519c:	4649      	mov	r1, r9
 801519e:	f7eb fa33 	bl	8000608 <__aeabi_dmul>
 80151a2:	a341      	add	r3, pc, #260	; (adr r3, 80152a8 <__ieee754_pow+0x3b8>)
 80151a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151a8:	f7eb fa2e 	bl	8000608 <__aeabi_dmul>
 80151ac:	4602      	mov	r2, r0
 80151ae:	460b      	mov	r3, r1
 80151b0:	4650      	mov	r0, sl
 80151b2:	4659      	mov	r1, fp
 80151b4:	f7eb f870 	bl	8000298 <__aeabi_dsub>
 80151b8:	4602      	mov	r2, r0
 80151ba:	460b      	mov	r3, r1
 80151bc:	4680      	mov	r8, r0
 80151be:	4689      	mov	r9, r1
 80151c0:	4630      	mov	r0, r6
 80151c2:	4639      	mov	r1, r7
 80151c4:	f7eb f86a 	bl	800029c <__adddf3>
 80151c8:	2400      	movs	r4, #0
 80151ca:	4632      	mov	r2, r6
 80151cc:	463b      	mov	r3, r7
 80151ce:	4620      	mov	r0, r4
 80151d0:	460d      	mov	r5, r1
 80151d2:	f7eb f861 	bl	8000298 <__aeabi_dsub>
 80151d6:	4602      	mov	r2, r0
 80151d8:	460b      	mov	r3, r1
 80151da:	4640      	mov	r0, r8
 80151dc:	4649      	mov	r1, r9
 80151de:	f7eb f85b 	bl	8000298 <__aeabi_dsub>
 80151e2:	9b00      	ldr	r3, [sp, #0]
 80151e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80151e6:	3b01      	subs	r3, #1
 80151e8:	4313      	orrs	r3, r2
 80151ea:	4682      	mov	sl, r0
 80151ec:	468b      	mov	fp, r1
 80151ee:	f040 81f1 	bne.w	80155d4 <__ieee754_pow+0x6e4>
 80151f2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80152b0 <__ieee754_pow+0x3c0>
 80151f6:	eeb0 8a47 	vmov.f32	s16, s14
 80151fa:	eef0 8a67 	vmov.f32	s17, s15
 80151fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8015202:	2600      	movs	r6, #0
 8015204:	4632      	mov	r2, r6
 8015206:	463b      	mov	r3, r7
 8015208:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801520c:	f7eb f844 	bl	8000298 <__aeabi_dsub>
 8015210:	4622      	mov	r2, r4
 8015212:	462b      	mov	r3, r5
 8015214:	f7eb f9f8 	bl	8000608 <__aeabi_dmul>
 8015218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801521c:	4680      	mov	r8, r0
 801521e:	4689      	mov	r9, r1
 8015220:	4650      	mov	r0, sl
 8015222:	4659      	mov	r1, fp
 8015224:	f7eb f9f0 	bl	8000608 <__aeabi_dmul>
 8015228:	4602      	mov	r2, r0
 801522a:	460b      	mov	r3, r1
 801522c:	4640      	mov	r0, r8
 801522e:	4649      	mov	r1, r9
 8015230:	f7eb f834 	bl	800029c <__adddf3>
 8015234:	4632      	mov	r2, r6
 8015236:	463b      	mov	r3, r7
 8015238:	4680      	mov	r8, r0
 801523a:	4689      	mov	r9, r1
 801523c:	4620      	mov	r0, r4
 801523e:	4629      	mov	r1, r5
 8015240:	f7eb f9e2 	bl	8000608 <__aeabi_dmul>
 8015244:	460b      	mov	r3, r1
 8015246:	4604      	mov	r4, r0
 8015248:	460d      	mov	r5, r1
 801524a:	4602      	mov	r2, r0
 801524c:	4649      	mov	r1, r9
 801524e:	4640      	mov	r0, r8
 8015250:	f7eb f824 	bl	800029c <__adddf3>
 8015254:	4b1d      	ldr	r3, [pc, #116]	; (80152cc <__ieee754_pow+0x3dc>)
 8015256:	4299      	cmp	r1, r3
 8015258:	ec45 4b19 	vmov	d9, r4, r5
 801525c:	4606      	mov	r6, r0
 801525e:	460f      	mov	r7, r1
 8015260:	468b      	mov	fp, r1
 8015262:	f340 82fe 	ble.w	8015862 <__ieee754_pow+0x972>
 8015266:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801526a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801526e:	4303      	orrs	r3, r0
 8015270:	f000 81f0 	beq.w	8015654 <__ieee754_pow+0x764>
 8015274:	a310      	add	r3, pc, #64	; (adr r3, 80152b8 <__ieee754_pow+0x3c8>)
 8015276:	e9d3 2300 	ldrd	r2, r3, [r3]
 801527a:	ec51 0b18 	vmov	r0, r1, d8
 801527e:	f7eb f9c3 	bl	8000608 <__aeabi_dmul>
 8015282:	a30d      	add	r3, pc, #52	; (adr r3, 80152b8 <__ieee754_pow+0x3c8>)
 8015284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015288:	e6cb      	b.n	8015022 <__ieee754_pow+0x132>
 801528a:	bf00      	nop
 801528c:	f3af 8000 	nop.w
 8015290:	60000000 	.word	0x60000000
 8015294:	3ff71547 	.word	0x3ff71547
 8015298:	f85ddf44 	.word	0xf85ddf44
 801529c:	3e54ae0b 	.word	0x3e54ae0b
 80152a0:	55555555 	.word	0x55555555
 80152a4:	3fd55555 	.word	0x3fd55555
 80152a8:	652b82fe 	.word	0x652b82fe
 80152ac:	3ff71547 	.word	0x3ff71547
 80152b0:	00000000 	.word	0x00000000
 80152b4:	bff00000 	.word	0xbff00000
 80152b8:	8800759c 	.word	0x8800759c
 80152bc:	7e37e43c 	.word	0x7e37e43c
 80152c0:	3ff00000 	.word	0x3ff00000
 80152c4:	3fd00000 	.word	0x3fd00000
 80152c8:	3fe00000 	.word	0x3fe00000
 80152cc:	408fffff 	.word	0x408fffff
 80152d0:	4bd7      	ldr	r3, [pc, #860]	; (8015630 <__ieee754_pow+0x740>)
 80152d2:	ea03 0309 	and.w	r3, r3, r9
 80152d6:	2200      	movs	r2, #0
 80152d8:	b92b      	cbnz	r3, 80152e6 <__ieee754_pow+0x3f6>
 80152da:	4bd6      	ldr	r3, [pc, #856]	; (8015634 <__ieee754_pow+0x744>)
 80152dc:	f7eb f994 	bl	8000608 <__aeabi_dmul>
 80152e0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80152e4:	460c      	mov	r4, r1
 80152e6:	1523      	asrs	r3, r4, #20
 80152e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80152ec:	4413      	add	r3, r2
 80152ee:	9309      	str	r3, [sp, #36]	; 0x24
 80152f0:	4bd1      	ldr	r3, [pc, #836]	; (8015638 <__ieee754_pow+0x748>)
 80152f2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80152f6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80152fa:	429c      	cmp	r4, r3
 80152fc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8015300:	dd08      	ble.n	8015314 <__ieee754_pow+0x424>
 8015302:	4bce      	ldr	r3, [pc, #824]	; (801563c <__ieee754_pow+0x74c>)
 8015304:	429c      	cmp	r4, r3
 8015306:	f340 8163 	ble.w	80155d0 <__ieee754_pow+0x6e0>
 801530a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801530c:	3301      	adds	r3, #1
 801530e:	9309      	str	r3, [sp, #36]	; 0x24
 8015310:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8015314:	2400      	movs	r4, #0
 8015316:	00e3      	lsls	r3, r4, #3
 8015318:	930b      	str	r3, [sp, #44]	; 0x2c
 801531a:	4bc9      	ldr	r3, [pc, #804]	; (8015640 <__ieee754_pow+0x750>)
 801531c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015320:	ed93 7b00 	vldr	d7, [r3]
 8015324:	4629      	mov	r1, r5
 8015326:	ec53 2b17 	vmov	r2, r3, d7
 801532a:	eeb0 8a47 	vmov.f32	s16, s14
 801532e:	eef0 8a67 	vmov.f32	s17, s15
 8015332:	4682      	mov	sl, r0
 8015334:	f7ea ffb0 	bl	8000298 <__aeabi_dsub>
 8015338:	4652      	mov	r2, sl
 801533a:	4606      	mov	r6, r0
 801533c:	460f      	mov	r7, r1
 801533e:	462b      	mov	r3, r5
 8015340:	ec51 0b18 	vmov	r0, r1, d8
 8015344:	f7ea ffaa 	bl	800029c <__adddf3>
 8015348:	4602      	mov	r2, r0
 801534a:	460b      	mov	r3, r1
 801534c:	2000      	movs	r0, #0
 801534e:	49bd      	ldr	r1, [pc, #756]	; (8015644 <__ieee754_pow+0x754>)
 8015350:	f7eb fa84 	bl	800085c <__aeabi_ddiv>
 8015354:	ec41 0b19 	vmov	d9, r0, r1
 8015358:	4602      	mov	r2, r0
 801535a:	460b      	mov	r3, r1
 801535c:	4630      	mov	r0, r6
 801535e:	4639      	mov	r1, r7
 8015360:	f7eb f952 	bl	8000608 <__aeabi_dmul>
 8015364:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015368:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801536c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015370:	2300      	movs	r3, #0
 8015372:	9304      	str	r3, [sp, #16]
 8015374:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8015378:	46ab      	mov	fp, r5
 801537a:	106d      	asrs	r5, r5, #1
 801537c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8015380:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8015384:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8015388:	2200      	movs	r2, #0
 801538a:	4640      	mov	r0, r8
 801538c:	4649      	mov	r1, r9
 801538e:	4614      	mov	r4, r2
 8015390:	461d      	mov	r5, r3
 8015392:	f7eb f939 	bl	8000608 <__aeabi_dmul>
 8015396:	4602      	mov	r2, r0
 8015398:	460b      	mov	r3, r1
 801539a:	4630      	mov	r0, r6
 801539c:	4639      	mov	r1, r7
 801539e:	f7ea ff7b 	bl	8000298 <__aeabi_dsub>
 80153a2:	ec53 2b18 	vmov	r2, r3, d8
 80153a6:	4606      	mov	r6, r0
 80153a8:	460f      	mov	r7, r1
 80153aa:	4620      	mov	r0, r4
 80153ac:	4629      	mov	r1, r5
 80153ae:	f7ea ff73 	bl	8000298 <__aeabi_dsub>
 80153b2:	4602      	mov	r2, r0
 80153b4:	460b      	mov	r3, r1
 80153b6:	4650      	mov	r0, sl
 80153b8:	4659      	mov	r1, fp
 80153ba:	f7ea ff6d 	bl	8000298 <__aeabi_dsub>
 80153be:	4642      	mov	r2, r8
 80153c0:	464b      	mov	r3, r9
 80153c2:	f7eb f921 	bl	8000608 <__aeabi_dmul>
 80153c6:	4602      	mov	r2, r0
 80153c8:	460b      	mov	r3, r1
 80153ca:	4630      	mov	r0, r6
 80153cc:	4639      	mov	r1, r7
 80153ce:	f7ea ff63 	bl	8000298 <__aeabi_dsub>
 80153d2:	ec53 2b19 	vmov	r2, r3, d9
 80153d6:	f7eb f917 	bl	8000608 <__aeabi_dmul>
 80153da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80153de:	ec41 0b18 	vmov	d8, r0, r1
 80153e2:	4610      	mov	r0, r2
 80153e4:	4619      	mov	r1, r3
 80153e6:	f7eb f90f 	bl	8000608 <__aeabi_dmul>
 80153ea:	a37d      	add	r3, pc, #500	; (adr r3, 80155e0 <__ieee754_pow+0x6f0>)
 80153ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153f0:	4604      	mov	r4, r0
 80153f2:	460d      	mov	r5, r1
 80153f4:	f7eb f908 	bl	8000608 <__aeabi_dmul>
 80153f8:	a37b      	add	r3, pc, #492	; (adr r3, 80155e8 <__ieee754_pow+0x6f8>)
 80153fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153fe:	f7ea ff4d 	bl	800029c <__adddf3>
 8015402:	4622      	mov	r2, r4
 8015404:	462b      	mov	r3, r5
 8015406:	f7eb f8ff 	bl	8000608 <__aeabi_dmul>
 801540a:	a379      	add	r3, pc, #484	; (adr r3, 80155f0 <__ieee754_pow+0x700>)
 801540c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015410:	f7ea ff44 	bl	800029c <__adddf3>
 8015414:	4622      	mov	r2, r4
 8015416:	462b      	mov	r3, r5
 8015418:	f7eb f8f6 	bl	8000608 <__aeabi_dmul>
 801541c:	a376      	add	r3, pc, #472	; (adr r3, 80155f8 <__ieee754_pow+0x708>)
 801541e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015422:	f7ea ff3b 	bl	800029c <__adddf3>
 8015426:	4622      	mov	r2, r4
 8015428:	462b      	mov	r3, r5
 801542a:	f7eb f8ed 	bl	8000608 <__aeabi_dmul>
 801542e:	a374      	add	r3, pc, #464	; (adr r3, 8015600 <__ieee754_pow+0x710>)
 8015430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015434:	f7ea ff32 	bl	800029c <__adddf3>
 8015438:	4622      	mov	r2, r4
 801543a:	462b      	mov	r3, r5
 801543c:	f7eb f8e4 	bl	8000608 <__aeabi_dmul>
 8015440:	a371      	add	r3, pc, #452	; (adr r3, 8015608 <__ieee754_pow+0x718>)
 8015442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015446:	f7ea ff29 	bl	800029c <__adddf3>
 801544a:	4622      	mov	r2, r4
 801544c:	4606      	mov	r6, r0
 801544e:	460f      	mov	r7, r1
 8015450:	462b      	mov	r3, r5
 8015452:	4620      	mov	r0, r4
 8015454:	4629      	mov	r1, r5
 8015456:	f7eb f8d7 	bl	8000608 <__aeabi_dmul>
 801545a:	4602      	mov	r2, r0
 801545c:	460b      	mov	r3, r1
 801545e:	4630      	mov	r0, r6
 8015460:	4639      	mov	r1, r7
 8015462:	f7eb f8d1 	bl	8000608 <__aeabi_dmul>
 8015466:	4642      	mov	r2, r8
 8015468:	4604      	mov	r4, r0
 801546a:	460d      	mov	r5, r1
 801546c:	464b      	mov	r3, r9
 801546e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015472:	f7ea ff13 	bl	800029c <__adddf3>
 8015476:	ec53 2b18 	vmov	r2, r3, d8
 801547a:	f7eb f8c5 	bl	8000608 <__aeabi_dmul>
 801547e:	4622      	mov	r2, r4
 8015480:	462b      	mov	r3, r5
 8015482:	f7ea ff0b 	bl	800029c <__adddf3>
 8015486:	4642      	mov	r2, r8
 8015488:	4682      	mov	sl, r0
 801548a:	468b      	mov	fp, r1
 801548c:	464b      	mov	r3, r9
 801548e:	4640      	mov	r0, r8
 8015490:	4649      	mov	r1, r9
 8015492:	f7eb f8b9 	bl	8000608 <__aeabi_dmul>
 8015496:	4b6c      	ldr	r3, [pc, #432]	; (8015648 <__ieee754_pow+0x758>)
 8015498:	2200      	movs	r2, #0
 801549a:	4606      	mov	r6, r0
 801549c:	460f      	mov	r7, r1
 801549e:	f7ea fefd 	bl	800029c <__adddf3>
 80154a2:	4652      	mov	r2, sl
 80154a4:	465b      	mov	r3, fp
 80154a6:	f7ea fef9 	bl	800029c <__adddf3>
 80154aa:	9c04      	ldr	r4, [sp, #16]
 80154ac:	460d      	mov	r5, r1
 80154ae:	4622      	mov	r2, r4
 80154b0:	460b      	mov	r3, r1
 80154b2:	4640      	mov	r0, r8
 80154b4:	4649      	mov	r1, r9
 80154b6:	f7eb f8a7 	bl	8000608 <__aeabi_dmul>
 80154ba:	4b63      	ldr	r3, [pc, #396]	; (8015648 <__ieee754_pow+0x758>)
 80154bc:	4680      	mov	r8, r0
 80154be:	4689      	mov	r9, r1
 80154c0:	2200      	movs	r2, #0
 80154c2:	4620      	mov	r0, r4
 80154c4:	4629      	mov	r1, r5
 80154c6:	f7ea fee7 	bl	8000298 <__aeabi_dsub>
 80154ca:	4632      	mov	r2, r6
 80154cc:	463b      	mov	r3, r7
 80154ce:	f7ea fee3 	bl	8000298 <__aeabi_dsub>
 80154d2:	4602      	mov	r2, r0
 80154d4:	460b      	mov	r3, r1
 80154d6:	4650      	mov	r0, sl
 80154d8:	4659      	mov	r1, fp
 80154da:	f7ea fedd 	bl	8000298 <__aeabi_dsub>
 80154de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80154e2:	f7eb f891 	bl	8000608 <__aeabi_dmul>
 80154e6:	4622      	mov	r2, r4
 80154e8:	4606      	mov	r6, r0
 80154ea:	460f      	mov	r7, r1
 80154ec:	462b      	mov	r3, r5
 80154ee:	ec51 0b18 	vmov	r0, r1, d8
 80154f2:	f7eb f889 	bl	8000608 <__aeabi_dmul>
 80154f6:	4602      	mov	r2, r0
 80154f8:	460b      	mov	r3, r1
 80154fa:	4630      	mov	r0, r6
 80154fc:	4639      	mov	r1, r7
 80154fe:	f7ea fecd 	bl	800029c <__adddf3>
 8015502:	4606      	mov	r6, r0
 8015504:	460f      	mov	r7, r1
 8015506:	4602      	mov	r2, r0
 8015508:	460b      	mov	r3, r1
 801550a:	4640      	mov	r0, r8
 801550c:	4649      	mov	r1, r9
 801550e:	f7ea fec5 	bl	800029c <__adddf3>
 8015512:	9c04      	ldr	r4, [sp, #16]
 8015514:	a33e      	add	r3, pc, #248	; (adr r3, 8015610 <__ieee754_pow+0x720>)
 8015516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801551a:	4620      	mov	r0, r4
 801551c:	460d      	mov	r5, r1
 801551e:	f7eb f873 	bl	8000608 <__aeabi_dmul>
 8015522:	4642      	mov	r2, r8
 8015524:	ec41 0b18 	vmov	d8, r0, r1
 8015528:	464b      	mov	r3, r9
 801552a:	4620      	mov	r0, r4
 801552c:	4629      	mov	r1, r5
 801552e:	f7ea feb3 	bl	8000298 <__aeabi_dsub>
 8015532:	4602      	mov	r2, r0
 8015534:	460b      	mov	r3, r1
 8015536:	4630      	mov	r0, r6
 8015538:	4639      	mov	r1, r7
 801553a:	f7ea fead 	bl	8000298 <__aeabi_dsub>
 801553e:	a336      	add	r3, pc, #216	; (adr r3, 8015618 <__ieee754_pow+0x728>)
 8015540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015544:	f7eb f860 	bl	8000608 <__aeabi_dmul>
 8015548:	a335      	add	r3, pc, #212	; (adr r3, 8015620 <__ieee754_pow+0x730>)
 801554a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801554e:	4606      	mov	r6, r0
 8015550:	460f      	mov	r7, r1
 8015552:	4620      	mov	r0, r4
 8015554:	4629      	mov	r1, r5
 8015556:	f7eb f857 	bl	8000608 <__aeabi_dmul>
 801555a:	4602      	mov	r2, r0
 801555c:	460b      	mov	r3, r1
 801555e:	4630      	mov	r0, r6
 8015560:	4639      	mov	r1, r7
 8015562:	f7ea fe9b 	bl	800029c <__adddf3>
 8015566:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015568:	4b38      	ldr	r3, [pc, #224]	; (801564c <__ieee754_pow+0x75c>)
 801556a:	4413      	add	r3, r2
 801556c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015570:	f7ea fe94 	bl	800029c <__adddf3>
 8015574:	4682      	mov	sl, r0
 8015576:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015578:	468b      	mov	fp, r1
 801557a:	f7ea ffdb 	bl	8000534 <__aeabi_i2d>
 801557e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015580:	4b33      	ldr	r3, [pc, #204]	; (8015650 <__ieee754_pow+0x760>)
 8015582:	4413      	add	r3, r2
 8015584:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015588:	4606      	mov	r6, r0
 801558a:	460f      	mov	r7, r1
 801558c:	4652      	mov	r2, sl
 801558e:	465b      	mov	r3, fp
 8015590:	ec51 0b18 	vmov	r0, r1, d8
 8015594:	f7ea fe82 	bl	800029c <__adddf3>
 8015598:	4642      	mov	r2, r8
 801559a:	464b      	mov	r3, r9
 801559c:	f7ea fe7e 	bl	800029c <__adddf3>
 80155a0:	4632      	mov	r2, r6
 80155a2:	463b      	mov	r3, r7
 80155a4:	f7ea fe7a 	bl	800029c <__adddf3>
 80155a8:	9c04      	ldr	r4, [sp, #16]
 80155aa:	4632      	mov	r2, r6
 80155ac:	463b      	mov	r3, r7
 80155ae:	4620      	mov	r0, r4
 80155b0:	460d      	mov	r5, r1
 80155b2:	f7ea fe71 	bl	8000298 <__aeabi_dsub>
 80155b6:	4642      	mov	r2, r8
 80155b8:	464b      	mov	r3, r9
 80155ba:	f7ea fe6d 	bl	8000298 <__aeabi_dsub>
 80155be:	ec53 2b18 	vmov	r2, r3, d8
 80155c2:	f7ea fe69 	bl	8000298 <__aeabi_dsub>
 80155c6:	4602      	mov	r2, r0
 80155c8:	460b      	mov	r3, r1
 80155ca:	4650      	mov	r0, sl
 80155cc:	4659      	mov	r1, fp
 80155ce:	e606      	b.n	80151de <__ieee754_pow+0x2ee>
 80155d0:	2401      	movs	r4, #1
 80155d2:	e6a0      	b.n	8015316 <__ieee754_pow+0x426>
 80155d4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8015628 <__ieee754_pow+0x738>
 80155d8:	e60d      	b.n	80151f6 <__ieee754_pow+0x306>
 80155da:	bf00      	nop
 80155dc:	f3af 8000 	nop.w
 80155e0:	4a454eef 	.word	0x4a454eef
 80155e4:	3fca7e28 	.word	0x3fca7e28
 80155e8:	93c9db65 	.word	0x93c9db65
 80155ec:	3fcd864a 	.word	0x3fcd864a
 80155f0:	a91d4101 	.word	0xa91d4101
 80155f4:	3fd17460 	.word	0x3fd17460
 80155f8:	518f264d 	.word	0x518f264d
 80155fc:	3fd55555 	.word	0x3fd55555
 8015600:	db6fabff 	.word	0xdb6fabff
 8015604:	3fdb6db6 	.word	0x3fdb6db6
 8015608:	33333303 	.word	0x33333303
 801560c:	3fe33333 	.word	0x3fe33333
 8015610:	e0000000 	.word	0xe0000000
 8015614:	3feec709 	.word	0x3feec709
 8015618:	dc3a03fd 	.word	0xdc3a03fd
 801561c:	3feec709 	.word	0x3feec709
 8015620:	145b01f5 	.word	0x145b01f5
 8015624:	be3e2fe0 	.word	0xbe3e2fe0
 8015628:	00000000 	.word	0x00000000
 801562c:	3ff00000 	.word	0x3ff00000
 8015630:	7ff00000 	.word	0x7ff00000
 8015634:	43400000 	.word	0x43400000
 8015638:	0003988e 	.word	0x0003988e
 801563c:	000bb679 	.word	0x000bb679
 8015640:	08016708 	.word	0x08016708
 8015644:	3ff00000 	.word	0x3ff00000
 8015648:	40080000 	.word	0x40080000
 801564c:	08016728 	.word	0x08016728
 8015650:	08016718 	.word	0x08016718
 8015654:	a3b5      	add	r3, pc, #724	; (adr r3, 801592c <__ieee754_pow+0xa3c>)
 8015656:	e9d3 2300 	ldrd	r2, r3, [r3]
 801565a:	4640      	mov	r0, r8
 801565c:	4649      	mov	r1, r9
 801565e:	f7ea fe1d 	bl	800029c <__adddf3>
 8015662:	4622      	mov	r2, r4
 8015664:	ec41 0b1a 	vmov	d10, r0, r1
 8015668:	462b      	mov	r3, r5
 801566a:	4630      	mov	r0, r6
 801566c:	4639      	mov	r1, r7
 801566e:	f7ea fe13 	bl	8000298 <__aeabi_dsub>
 8015672:	4602      	mov	r2, r0
 8015674:	460b      	mov	r3, r1
 8015676:	ec51 0b1a 	vmov	r0, r1, d10
 801567a:	f7eb fa55 	bl	8000b28 <__aeabi_dcmpgt>
 801567e:	2800      	cmp	r0, #0
 8015680:	f47f adf8 	bne.w	8015274 <__ieee754_pow+0x384>
 8015684:	4aa4      	ldr	r2, [pc, #656]	; (8015918 <__ieee754_pow+0xa28>)
 8015686:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801568a:	4293      	cmp	r3, r2
 801568c:	f340 810b 	ble.w	80158a6 <__ieee754_pow+0x9b6>
 8015690:	151b      	asrs	r3, r3, #20
 8015692:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8015696:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801569a:	fa4a f303 	asr.w	r3, sl, r3
 801569e:	445b      	add	r3, fp
 80156a0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80156a4:	4e9d      	ldr	r6, [pc, #628]	; (801591c <__ieee754_pow+0xa2c>)
 80156a6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80156aa:	4116      	asrs	r6, r2
 80156ac:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80156b0:	2000      	movs	r0, #0
 80156b2:	ea23 0106 	bic.w	r1, r3, r6
 80156b6:	f1c2 0214 	rsb	r2, r2, #20
 80156ba:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80156be:	fa4a fa02 	asr.w	sl, sl, r2
 80156c2:	f1bb 0f00 	cmp.w	fp, #0
 80156c6:	4602      	mov	r2, r0
 80156c8:	460b      	mov	r3, r1
 80156ca:	4620      	mov	r0, r4
 80156cc:	4629      	mov	r1, r5
 80156ce:	bfb8      	it	lt
 80156d0:	f1ca 0a00 	rsblt	sl, sl, #0
 80156d4:	f7ea fde0 	bl	8000298 <__aeabi_dsub>
 80156d8:	ec41 0b19 	vmov	d9, r0, r1
 80156dc:	4642      	mov	r2, r8
 80156de:	464b      	mov	r3, r9
 80156e0:	ec51 0b19 	vmov	r0, r1, d9
 80156e4:	f7ea fdda 	bl	800029c <__adddf3>
 80156e8:	2400      	movs	r4, #0
 80156ea:	a379      	add	r3, pc, #484	; (adr r3, 80158d0 <__ieee754_pow+0x9e0>)
 80156ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156f0:	4620      	mov	r0, r4
 80156f2:	460d      	mov	r5, r1
 80156f4:	f7ea ff88 	bl	8000608 <__aeabi_dmul>
 80156f8:	ec53 2b19 	vmov	r2, r3, d9
 80156fc:	4606      	mov	r6, r0
 80156fe:	460f      	mov	r7, r1
 8015700:	4620      	mov	r0, r4
 8015702:	4629      	mov	r1, r5
 8015704:	f7ea fdc8 	bl	8000298 <__aeabi_dsub>
 8015708:	4602      	mov	r2, r0
 801570a:	460b      	mov	r3, r1
 801570c:	4640      	mov	r0, r8
 801570e:	4649      	mov	r1, r9
 8015710:	f7ea fdc2 	bl	8000298 <__aeabi_dsub>
 8015714:	a370      	add	r3, pc, #448	; (adr r3, 80158d8 <__ieee754_pow+0x9e8>)
 8015716:	e9d3 2300 	ldrd	r2, r3, [r3]
 801571a:	f7ea ff75 	bl	8000608 <__aeabi_dmul>
 801571e:	a370      	add	r3, pc, #448	; (adr r3, 80158e0 <__ieee754_pow+0x9f0>)
 8015720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015724:	4680      	mov	r8, r0
 8015726:	4689      	mov	r9, r1
 8015728:	4620      	mov	r0, r4
 801572a:	4629      	mov	r1, r5
 801572c:	f7ea ff6c 	bl	8000608 <__aeabi_dmul>
 8015730:	4602      	mov	r2, r0
 8015732:	460b      	mov	r3, r1
 8015734:	4640      	mov	r0, r8
 8015736:	4649      	mov	r1, r9
 8015738:	f7ea fdb0 	bl	800029c <__adddf3>
 801573c:	4604      	mov	r4, r0
 801573e:	460d      	mov	r5, r1
 8015740:	4602      	mov	r2, r0
 8015742:	460b      	mov	r3, r1
 8015744:	4630      	mov	r0, r6
 8015746:	4639      	mov	r1, r7
 8015748:	f7ea fda8 	bl	800029c <__adddf3>
 801574c:	4632      	mov	r2, r6
 801574e:	463b      	mov	r3, r7
 8015750:	4680      	mov	r8, r0
 8015752:	4689      	mov	r9, r1
 8015754:	f7ea fda0 	bl	8000298 <__aeabi_dsub>
 8015758:	4602      	mov	r2, r0
 801575a:	460b      	mov	r3, r1
 801575c:	4620      	mov	r0, r4
 801575e:	4629      	mov	r1, r5
 8015760:	f7ea fd9a 	bl	8000298 <__aeabi_dsub>
 8015764:	4642      	mov	r2, r8
 8015766:	4606      	mov	r6, r0
 8015768:	460f      	mov	r7, r1
 801576a:	464b      	mov	r3, r9
 801576c:	4640      	mov	r0, r8
 801576e:	4649      	mov	r1, r9
 8015770:	f7ea ff4a 	bl	8000608 <__aeabi_dmul>
 8015774:	a35c      	add	r3, pc, #368	; (adr r3, 80158e8 <__ieee754_pow+0x9f8>)
 8015776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801577a:	4604      	mov	r4, r0
 801577c:	460d      	mov	r5, r1
 801577e:	f7ea ff43 	bl	8000608 <__aeabi_dmul>
 8015782:	a35b      	add	r3, pc, #364	; (adr r3, 80158f0 <__ieee754_pow+0xa00>)
 8015784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015788:	f7ea fd86 	bl	8000298 <__aeabi_dsub>
 801578c:	4622      	mov	r2, r4
 801578e:	462b      	mov	r3, r5
 8015790:	f7ea ff3a 	bl	8000608 <__aeabi_dmul>
 8015794:	a358      	add	r3, pc, #352	; (adr r3, 80158f8 <__ieee754_pow+0xa08>)
 8015796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801579a:	f7ea fd7f 	bl	800029c <__adddf3>
 801579e:	4622      	mov	r2, r4
 80157a0:	462b      	mov	r3, r5
 80157a2:	f7ea ff31 	bl	8000608 <__aeabi_dmul>
 80157a6:	a356      	add	r3, pc, #344	; (adr r3, 8015900 <__ieee754_pow+0xa10>)
 80157a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157ac:	f7ea fd74 	bl	8000298 <__aeabi_dsub>
 80157b0:	4622      	mov	r2, r4
 80157b2:	462b      	mov	r3, r5
 80157b4:	f7ea ff28 	bl	8000608 <__aeabi_dmul>
 80157b8:	a353      	add	r3, pc, #332	; (adr r3, 8015908 <__ieee754_pow+0xa18>)
 80157ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157be:	f7ea fd6d 	bl	800029c <__adddf3>
 80157c2:	4622      	mov	r2, r4
 80157c4:	462b      	mov	r3, r5
 80157c6:	f7ea ff1f 	bl	8000608 <__aeabi_dmul>
 80157ca:	4602      	mov	r2, r0
 80157cc:	460b      	mov	r3, r1
 80157ce:	4640      	mov	r0, r8
 80157d0:	4649      	mov	r1, r9
 80157d2:	f7ea fd61 	bl	8000298 <__aeabi_dsub>
 80157d6:	4604      	mov	r4, r0
 80157d8:	460d      	mov	r5, r1
 80157da:	4602      	mov	r2, r0
 80157dc:	460b      	mov	r3, r1
 80157de:	4640      	mov	r0, r8
 80157e0:	4649      	mov	r1, r9
 80157e2:	f7ea ff11 	bl	8000608 <__aeabi_dmul>
 80157e6:	2200      	movs	r2, #0
 80157e8:	ec41 0b19 	vmov	d9, r0, r1
 80157ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80157f0:	4620      	mov	r0, r4
 80157f2:	4629      	mov	r1, r5
 80157f4:	f7ea fd50 	bl	8000298 <__aeabi_dsub>
 80157f8:	4602      	mov	r2, r0
 80157fa:	460b      	mov	r3, r1
 80157fc:	ec51 0b19 	vmov	r0, r1, d9
 8015800:	f7eb f82c 	bl	800085c <__aeabi_ddiv>
 8015804:	4632      	mov	r2, r6
 8015806:	4604      	mov	r4, r0
 8015808:	460d      	mov	r5, r1
 801580a:	463b      	mov	r3, r7
 801580c:	4640      	mov	r0, r8
 801580e:	4649      	mov	r1, r9
 8015810:	f7ea fefa 	bl	8000608 <__aeabi_dmul>
 8015814:	4632      	mov	r2, r6
 8015816:	463b      	mov	r3, r7
 8015818:	f7ea fd40 	bl	800029c <__adddf3>
 801581c:	4602      	mov	r2, r0
 801581e:	460b      	mov	r3, r1
 8015820:	4620      	mov	r0, r4
 8015822:	4629      	mov	r1, r5
 8015824:	f7ea fd38 	bl	8000298 <__aeabi_dsub>
 8015828:	4642      	mov	r2, r8
 801582a:	464b      	mov	r3, r9
 801582c:	f7ea fd34 	bl	8000298 <__aeabi_dsub>
 8015830:	460b      	mov	r3, r1
 8015832:	4602      	mov	r2, r0
 8015834:	493a      	ldr	r1, [pc, #232]	; (8015920 <__ieee754_pow+0xa30>)
 8015836:	2000      	movs	r0, #0
 8015838:	f7ea fd2e 	bl	8000298 <__aeabi_dsub>
 801583c:	e9cd 0100 	strd	r0, r1, [sp]
 8015840:	9b01      	ldr	r3, [sp, #4]
 8015842:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8015846:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801584a:	da2f      	bge.n	80158ac <__ieee754_pow+0x9bc>
 801584c:	4650      	mov	r0, sl
 801584e:	ed9d 0b00 	vldr	d0, [sp]
 8015852:	f000 f9c1 	bl	8015bd8 <scalbn>
 8015856:	ec51 0b10 	vmov	r0, r1, d0
 801585a:	ec53 2b18 	vmov	r2, r3, d8
 801585e:	f7ff bbe0 	b.w	8015022 <__ieee754_pow+0x132>
 8015862:	4b30      	ldr	r3, [pc, #192]	; (8015924 <__ieee754_pow+0xa34>)
 8015864:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8015868:	429e      	cmp	r6, r3
 801586a:	f77f af0b 	ble.w	8015684 <__ieee754_pow+0x794>
 801586e:	4b2e      	ldr	r3, [pc, #184]	; (8015928 <__ieee754_pow+0xa38>)
 8015870:	440b      	add	r3, r1
 8015872:	4303      	orrs	r3, r0
 8015874:	d00b      	beq.n	801588e <__ieee754_pow+0x99e>
 8015876:	a326      	add	r3, pc, #152	; (adr r3, 8015910 <__ieee754_pow+0xa20>)
 8015878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801587c:	ec51 0b18 	vmov	r0, r1, d8
 8015880:	f7ea fec2 	bl	8000608 <__aeabi_dmul>
 8015884:	a322      	add	r3, pc, #136	; (adr r3, 8015910 <__ieee754_pow+0xa20>)
 8015886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801588a:	f7ff bbca 	b.w	8015022 <__ieee754_pow+0x132>
 801588e:	4622      	mov	r2, r4
 8015890:	462b      	mov	r3, r5
 8015892:	f7ea fd01 	bl	8000298 <__aeabi_dsub>
 8015896:	4642      	mov	r2, r8
 8015898:	464b      	mov	r3, r9
 801589a:	f7eb f93b 	bl	8000b14 <__aeabi_dcmpge>
 801589e:	2800      	cmp	r0, #0
 80158a0:	f43f aef0 	beq.w	8015684 <__ieee754_pow+0x794>
 80158a4:	e7e7      	b.n	8015876 <__ieee754_pow+0x986>
 80158a6:	f04f 0a00 	mov.w	sl, #0
 80158aa:	e717      	b.n	80156dc <__ieee754_pow+0x7ec>
 80158ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80158b0:	4619      	mov	r1, r3
 80158b2:	e7d2      	b.n	801585a <__ieee754_pow+0x96a>
 80158b4:	491a      	ldr	r1, [pc, #104]	; (8015920 <__ieee754_pow+0xa30>)
 80158b6:	2000      	movs	r0, #0
 80158b8:	f7ff bb9e 	b.w	8014ff8 <__ieee754_pow+0x108>
 80158bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80158c0:	f7ff bb9a 	b.w	8014ff8 <__ieee754_pow+0x108>
 80158c4:	9000      	str	r0, [sp, #0]
 80158c6:	f7ff bb76 	b.w	8014fb6 <__ieee754_pow+0xc6>
 80158ca:	2100      	movs	r1, #0
 80158cc:	f7ff bb60 	b.w	8014f90 <__ieee754_pow+0xa0>
 80158d0:	00000000 	.word	0x00000000
 80158d4:	3fe62e43 	.word	0x3fe62e43
 80158d8:	fefa39ef 	.word	0xfefa39ef
 80158dc:	3fe62e42 	.word	0x3fe62e42
 80158e0:	0ca86c39 	.word	0x0ca86c39
 80158e4:	be205c61 	.word	0xbe205c61
 80158e8:	72bea4d0 	.word	0x72bea4d0
 80158ec:	3e663769 	.word	0x3e663769
 80158f0:	c5d26bf1 	.word	0xc5d26bf1
 80158f4:	3ebbbd41 	.word	0x3ebbbd41
 80158f8:	af25de2c 	.word	0xaf25de2c
 80158fc:	3f11566a 	.word	0x3f11566a
 8015900:	16bebd93 	.word	0x16bebd93
 8015904:	3f66c16c 	.word	0x3f66c16c
 8015908:	5555553e 	.word	0x5555553e
 801590c:	3fc55555 	.word	0x3fc55555
 8015910:	c2f8f359 	.word	0xc2f8f359
 8015914:	01a56e1f 	.word	0x01a56e1f
 8015918:	3fe00000 	.word	0x3fe00000
 801591c:	000fffff 	.word	0x000fffff
 8015920:	3ff00000 	.word	0x3ff00000
 8015924:	4090cbff 	.word	0x4090cbff
 8015928:	3f6f3400 	.word	0x3f6f3400
 801592c:	652b82fe 	.word	0x652b82fe
 8015930:	3c971547 	.word	0x3c971547

08015934 <__ieee754_sqrt>:
 8015934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015938:	ec55 4b10 	vmov	r4, r5, d0
 801593c:	4e56      	ldr	r6, [pc, #344]	; (8015a98 <__ieee754_sqrt+0x164>)
 801593e:	43ae      	bics	r6, r5
 8015940:	ee10 0a10 	vmov	r0, s0
 8015944:	ee10 3a10 	vmov	r3, s0
 8015948:	4629      	mov	r1, r5
 801594a:	462a      	mov	r2, r5
 801594c:	d110      	bne.n	8015970 <__ieee754_sqrt+0x3c>
 801594e:	ee10 2a10 	vmov	r2, s0
 8015952:	462b      	mov	r3, r5
 8015954:	f7ea fe58 	bl	8000608 <__aeabi_dmul>
 8015958:	4602      	mov	r2, r0
 801595a:	460b      	mov	r3, r1
 801595c:	4620      	mov	r0, r4
 801595e:	4629      	mov	r1, r5
 8015960:	f7ea fc9c 	bl	800029c <__adddf3>
 8015964:	4604      	mov	r4, r0
 8015966:	460d      	mov	r5, r1
 8015968:	ec45 4b10 	vmov	d0, r4, r5
 801596c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015970:	2d00      	cmp	r5, #0
 8015972:	dc10      	bgt.n	8015996 <__ieee754_sqrt+0x62>
 8015974:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015978:	4330      	orrs	r0, r6
 801597a:	d0f5      	beq.n	8015968 <__ieee754_sqrt+0x34>
 801597c:	b15d      	cbz	r5, 8015996 <__ieee754_sqrt+0x62>
 801597e:	ee10 2a10 	vmov	r2, s0
 8015982:	462b      	mov	r3, r5
 8015984:	ee10 0a10 	vmov	r0, s0
 8015988:	f7ea fc86 	bl	8000298 <__aeabi_dsub>
 801598c:	4602      	mov	r2, r0
 801598e:	460b      	mov	r3, r1
 8015990:	f7ea ff64 	bl	800085c <__aeabi_ddiv>
 8015994:	e7e6      	b.n	8015964 <__ieee754_sqrt+0x30>
 8015996:	1509      	asrs	r1, r1, #20
 8015998:	d076      	beq.n	8015a88 <__ieee754_sqrt+0x154>
 801599a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801599e:	07ce      	lsls	r6, r1, #31
 80159a0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80159a4:	bf5e      	ittt	pl
 80159a6:	0fda      	lsrpl	r2, r3, #31
 80159a8:	005b      	lslpl	r3, r3, #1
 80159aa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80159ae:	0fda      	lsrs	r2, r3, #31
 80159b0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80159b4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80159b8:	2000      	movs	r0, #0
 80159ba:	106d      	asrs	r5, r5, #1
 80159bc:	005b      	lsls	r3, r3, #1
 80159be:	f04f 0e16 	mov.w	lr, #22
 80159c2:	4684      	mov	ip, r0
 80159c4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80159c8:	eb0c 0401 	add.w	r4, ip, r1
 80159cc:	4294      	cmp	r4, r2
 80159ce:	bfde      	ittt	le
 80159d0:	1b12      	suble	r2, r2, r4
 80159d2:	eb04 0c01 	addle.w	ip, r4, r1
 80159d6:	1840      	addle	r0, r0, r1
 80159d8:	0052      	lsls	r2, r2, #1
 80159da:	f1be 0e01 	subs.w	lr, lr, #1
 80159de:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80159e2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80159e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80159ea:	d1ed      	bne.n	80159c8 <__ieee754_sqrt+0x94>
 80159ec:	4671      	mov	r1, lr
 80159ee:	2720      	movs	r7, #32
 80159f0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80159f4:	4562      	cmp	r2, ip
 80159f6:	eb04 060e 	add.w	r6, r4, lr
 80159fa:	dc02      	bgt.n	8015a02 <__ieee754_sqrt+0xce>
 80159fc:	d113      	bne.n	8015a26 <__ieee754_sqrt+0xf2>
 80159fe:	429e      	cmp	r6, r3
 8015a00:	d811      	bhi.n	8015a26 <__ieee754_sqrt+0xf2>
 8015a02:	2e00      	cmp	r6, #0
 8015a04:	eb06 0e04 	add.w	lr, r6, r4
 8015a08:	da43      	bge.n	8015a92 <__ieee754_sqrt+0x15e>
 8015a0a:	f1be 0f00 	cmp.w	lr, #0
 8015a0e:	db40      	blt.n	8015a92 <__ieee754_sqrt+0x15e>
 8015a10:	f10c 0801 	add.w	r8, ip, #1
 8015a14:	eba2 020c 	sub.w	r2, r2, ip
 8015a18:	429e      	cmp	r6, r3
 8015a1a:	bf88      	it	hi
 8015a1c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8015a20:	1b9b      	subs	r3, r3, r6
 8015a22:	4421      	add	r1, r4
 8015a24:	46c4      	mov	ip, r8
 8015a26:	0052      	lsls	r2, r2, #1
 8015a28:	3f01      	subs	r7, #1
 8015a2a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8015a2e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8015a32:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015a36:	d1dd      	bne.n	80159f4 <__ieee754_sqrt+0xc0>
 8015a38:	4313      	orrs	r3, r2
 8015a3a:	d006      	beq.n	8015a4a <__ieee754_sqrt+0x116>
 8015a3c:	1c4c      	adds	r4, r1, #1
 8015a3e:	bf13      	iteet	ne
 8015a40:	3101      	addne	r1, #1
 8015a42:	3001      	addeq	r0, #1
 8015a44:	4639      	moveq	r1, r7
 8015a46:	f021 0101 	bicne.w	r1, r1, #1
 8015a4a:	1043      	asrs	r3, r0, #1
 8015a4c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8015a50:	0849      	lsrs	r1, r1, #1
 8015a52:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8015a56:	07c2      	lsls	r2, r0, #31
 8015a58:	bf48      	it	mi
 8015a5a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8015a5e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8015a62:	460c      	mov	r4, r1
 8015a64:	463d      	mov	r5, r7
 8015a66:	e77f      	b.n	8015968 <__ieee754_sqrt+0x34>
 8015a68:	0ada      	lsrs	r2, r3, #11
 8015a6a:	3815      	subs	r0, #21
 8015a6c:	055b      	lsls	r3, r3, #21
 8015a6e:	2a00      	cmp	r2, #0
 8015a70:	d0fa      	beq.n	8015a68 <__ieee754_sqrt+0x134>
 8015a72:	02d7      	lsls	r7, r2, #11
 8015a74:	d50a      	bpl.n	8015a8c <__ieee754_sqrt+0x158>
 8015a76:	f1c1 0420 	rsb	r4, r1, #32
 8015a7a:	fa23 f404 	lsr.w	r4, r3, r4
 8015a7e:	1e4d      	subs	r5, r1, #1
 8015a80:	408b      	lsls	r3, r1
 8015a82:	4322      	orrs	r2, r4
 8015a84:	1b41      	subs	r1, r0, r5
 8015a86:	e788      	b.n	801599a <__ieee754_sqrt+0x66>
 8015a88:	4608      	mov	r0, r1
 8015a8a:	e7f0      	b.n	8015a6e <__ieee754_sqrt+0x13a>
 8015a8c:	0052      	lsls	r2, r2, #1
 8015a8e:	3101      	adds	r1, #1
 8015a90:	e7ef      	b.n	8015a72 <__ieee754_sqrt+0x13e>
 8015a92:	46e0      	mov	r8, ip
 8015a94:	e7be      	b.n	8015a14 <__ieee754_sqrt+0xe0>
 8015a96:	bf00      	nop
 8015a98:	7ff00000 	.word	0x7ff00000

08015a9c <fabs>:
 8015a9c:	ec51 0b10 	vmov	r0, r1, d0
 8015aa0:	ee10 2a10 	vmov	r2, s0
 8015aa4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015aa8:	ec43 2b10 	vmov	d0, r2, r3
 8015aac:	4770      	bx	lr

08015aae <finite>:
 8015aae:	b082      	sub	sp, #8
 8015ab0:	ed8d 0b00 	vstr	d0, [sp]
 8015ab4:	9801      	ldr	r0, [sp, #4]
 8015ab6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8015aba:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8015abe:	0fc0      	lsrs	r0, r0, #31
 8015ac0:	b002      	add	sp, #8
 8015ac2:	4770      	bx	lr

08015ac4 <rint>:
 8015ac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015ac6:	ec51 0b10 	vmov	r0, r1, d0
 8015aca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015ace:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8015ad2:	2e13      	cmp	r6, #19
 8015ad4:	ee10 4a10 	vmov	r4, s0
 8015ad8:	460b      	mov	r3, r1
 8015ada:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8015ade:	dc58      	bgt.n	8015b92 <rint+0xce>
 8015ae0:	2e00      	cmp	r6, #0
 8015ae2:	da2b      	bge.n	8015b3c <rint+0x78>
 8015ae4:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8015ae8:	4302      	orrs	r2, r0
 8015aea:	d023      	beq.n	8015b34 <rint+0x70>
 8015aec:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8015af0:	4302      	orrs	r2, r0
 8015af2:	4254      	negs	r4, r2
 8015af4:	4314      	orrs	r4, r2
 8015af6:	0c4b      	lsrs	r3, r1, #17
 8015af8:	0b24      	lsrs	r4, r4, #12
 8015afa:	045b      	lsls	r3, r3, #17
 8015afc:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8015b00:	ea44 0103 	orr.w	r1, r4, r3
 8015b04:	4b32      	ldr	r3, [pc, #200]	; (8015bd0 <rint+0x10c>)
 8015b06:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8015b0a:	e9d3 6700 	ldrd	r6, r7, [r3]
 8015b0e:	4602      	mov	r2, r0
 8015b10:	460b      	mov	r3, r1
 8015b12:	4630      	mov	r0, r6
 8015b14:	4639      	mov	r1, r7
 8015b16:	f7ea fbc1 	bl	800029c <__adddf3>
 8015b1a:	e9cd 0100 	strd	r0, r1, [sp]
 8015b1e:	463b      	mov	r3, r7
 8015b20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015b24:	4632      	mov	r2, r6
 8015b26:	f7ea fbb7 	bl	8000298 <__aeabi_dsub>
 8015b2a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015b2e:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8015b32:	4639      	mov	r1, r7
 8015b34:	ec41 0b10 	vmov	d0, r0, r1
 8015b38:	b003      	add	sp, #12
 8015b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b3c:	4a25      	ldr	r2, [pc, #148]	; (8015bd4 <rint+0x110>)
 8015b3e:	4132      	asrs	r2, r6
 8015b40:	ea01 0702 	and.w	r7, r1, r2
 8015b44:	4307      	orrs	r7, r0
 8015b46:	d0f5      	beq.n	8015b34 <rint+0x70>
 8015b48:	0851      	lsrs	r1, r2, #1
 8015b4a:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8015b4e:	4314      	orrs	r4, r2
 8015b50:	d00c      	beq.n	8015b6c <rint+0xa8>
 8015b52:	ea23 0201 	bic.w	r2, r3, r1
 8015b56:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8015b5a:	2e13      	cmp	r6, #19
 8015b5c:	fa43 f606 	asr.w	r6, r3, r6
 8015b60:	bf0c      	ite	eq
 8015b62:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8015b66:	2400      	movne	r4, #0
 8015b68:	ea42 0306 	orr.w	r3, r2, r6
 8015b6c:	4918      	ldr	r1, [pc, #96]	; (8015bd0 <rint+0x10c>)
 8015b6e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8015b72:	4622      	mov	r2, r4
 8015b74:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015b78:	4620      	mov	r0, r4
 8015b7a:	4629      	mov	r1, r5
 8015b7c:	f7ea fb8e 	bl	800029c <__adddf3>
 8015b80:	e9cd 0100 	strd	r0, r1, [sp]
 8015b84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015b88:	4622      	mov	r2, r4
 8015b8a:	462b      	mov	r3, r5
 8015b8c:	f7ea fb84 	bl	8000298 <__aeabi_dsub>
 8015b90:	e7d0      	b.n	8015b34 <rint+0x70>
 8015b92:	2e33      	cmp	r6, #51	; 0x33
 8015b94:	dd07      	ble.n	8015ba6 <rint+0xe2>
 8015b96:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015b9a:	d1cb      	bne.n	8015b34 <rint+0x70>
 8015b9c:	ee10 2a10 	vmov	r2, s0
 8015ba0:	f7ea fb7c 	bl	800029c <__adddf3>
 8015ba4:	e7c6      	b.n	8015b34 <rint+0x70>
 8015ba6:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8015baa:	f04f 36ff 	mov.w	r6, #4294967295
 8015bae:	40d6      	lsrs	r6, r2
 8015bb0:	4230      	tst	r0, r6
 8015bb2:	d0bf      	beq.n	8015b34 <rint+0x70>
 8015bb4:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8015bb8:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8015bbc:	bf1f      	itttt	ne
 8015bbe:	ea24 0101 	bicne.w	r1, r4, r1
 8015bc2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8015bc6:	fa44 f202 	asrne.w	r2, r4, r2
 8015bca:	ea41 0402 	orrne.w	r4, r1, r2
 8015bce:	e7cd      	b.n	8015b6c <rint+0xa8>
 8015bd0:	08016738 	.word	0x08016738
 8015bd4:	000fffff 	.word	0x000fffff

08015bd8 <scalbn>:
 8015bd8:	b570      	push	{r4, r5, r6, lr}
 8015bda:	ec55 4b10 	vmov	r4, r5, d0
 8015bde:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8015be2:	4606      	mov	r6, r0
 8015be4:	462b      	mov	r3, r5
 8015be6:	b99a      	cbnz	r2, 8015c10 <scalbn+0x38>
 8015be8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015bec:	4323      	orrs	r3, r4
 8015bee:	d036      	beq.n	8015c5e <scalbn+0x86>
 8015bf0:	4b39      	ldr	r3, [pc, #228]	; (8015cd8 <scalbn+0x100>)
 8015bf2:	4629      	mov	r1, r5
 8015bf4:	ee10 0a10 	vmov	r0, s0
 8015bf8:	2200      	movs	r2, #0
 8015bfa:	f7ea fd05 	bl	8000608 <__aeabi_dmul>
 8015bfe:	4b37      	ldr	r3, [pc, #220]	; (8015cdc <scalbn+0x104>)
 8015c00:	429e      	cmp	r6, r3
 8015c02:	4604      	mov	r4, r0
 8015c04:	460d      	mov	r5, r1
 8015c06:	da10      	bge.n	8015c2a <scalbn+0x52>
 8015c08:	a32b      	add	r3, pc, #172	; (adr r3, 8015cb8 <scalbn+0xe0>)
 8015c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c0e:	e03a      	b.n	8015c86 <scalbn+0xae>
 8015c10:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015c14:	428a      	cmp	r2, r1
 8015c16:	d10c      	bne.n	8015c32 <scalbn+0x5a>
 8015c18:	ee10 2a10 	vmov	r2, s0
 8015c1c:	4620      	mov	r0, r4
 8015c1e:	4629      	mov	r1, r5
 8015c20:	f7ea fb3c 	bl	800029c <__adddf3>
 8015c24:	4604      	mov	r4, r0
 8015c26:	460d      	mov	r5, r1
 8015c28:	e019      	b.n	8015c5e <scalbn+0x86>
 8015c2a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015c2e:	460b      	mov	r3, r1
 8015c30:	3a36      	subs	r2, #54	; 0x36
 8015c32:	4432      	add	r2, r6
 8015c34:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8015c38:	428a      	cmp	r2, r1
 8015c3a:	dd08      	ble.n	8015c4e <scalbn+0x76>
 8015c3c:	2d00      	cmp	r5, #0
 8015c3e:	a120      	add	r1, pc, #128	; (adr r1, 8015cc0 <scalbn+0xe8>)
 8015c40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015c44:	da1c      	bge.n	8015c80 <scalbn+0xa8>
 8015c46:	a120      	add	r1, pc, #128	; (adr r1, 8015cc8 <scalbn+0xf0>)
 8015c48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015c4c:	e018      	b.n	8015c80 <scalbn+0xa8>
 8015c4e:	2a00      	cmp	r2, #0
 8015c50:	dd08      	ble.n	8015c64 <scalbn+0x8c>
 8015c52:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015c56:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015c5a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015c5e:	ec45 4b10 	vmov	d0, r4, r5
 8015c62:	bd70      	pop	{r4, r5, r6, pc}
 8015c64:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8015c68:	da19      	bge.n	8015c9e <scalbn+0xc6>
 8015c6a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015c6e:	429e      	cmp	r6, r3
 8015c70:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8015c74:	dd0a      	ble.n	8015c8c <scalbn+0xb4>
 8015c76:	a112      	add	r1, pc, #72	; (adr r1, 8015cc0 <scalbn+0xe8>)
 8015c78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d1e2      	bne.n	8015c46 <scalbn+0x6e>
 8015c80:	a30f      	add	r3, pc, #60	; (adr r3, 8015cc0 <scalbn+0xe8>)
 8015c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c86:	f7ea fcbf 	bl	8000608 <__aeabi_dmul>
 8015c8a:	e7cb      	b.n	8015c24 <scalbn+0x4c>
 8015c8c:	a10a      	add	r1, pc, #40	; (adr r1, 8015cb8 <scalbn+0xe0>)
 8015c8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d0b8      	beq.n	8015c08 <scalbn+0x30>
 8015c96:	a10e      	add	r1, pc, #56	; (adr r1, 8015cd0 <scalbn+0xf8>)
 8015c98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015c9c:	e7b4      	b.n	8015c08 <scalbn+0x30>
 8015c9e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015ca2:	3236      	adds	r2, #54	; 0x36
 8015ca4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015ca8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8015cac:	4620      	mov	r0, r4
 8015cae:	4b0c      	ldr	r3, [pc, #48]	; (8015ce0 <scalbn+0x108>)
 8015cb0:	2200      	movs	r2, #0
 8015cb2:	e7e8      	b.n	8015c86 <scalbn+0xae>
 8015cb4:	f3af 8000 	nop.w
 8015cb8:	c2f8f359 	.word	0xc2f8f359
 8015cbc:	01a56e1f 	.word	0x01a56e1f
 8015cc0:	8800759c 	.word	0x8800759c
 8015cc4:	7e37e43c 	.word	0x7e37e43c
 8015cc8:	8800759c 	.word	0x8800759c
 8015ccc:	fe37e43c 	.word	0xfe37e43c
 8015cd0:	c2f8f359 	.word	0xc2f8f359
 8015cd4:	81a56e1f 	.word	0x81a56e1f
 8015cd8:	43500000 	.word	0x43500000
 8015cdc:	ffff3cb0 	.word	0xffff3cb0
 8015ce0:	3c900000 	.word	0x3c900000

08015ce4 <_init>:
 8015ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ce6:	bf00      	nop
 8015ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015cea:	bc08      	pop	{r3}
 8015cec:	469e      	mov	lr, r3
 8015cee:	4770      	bx	lr

08015cf0 <_fini>:
 8015cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cf2:	bf00      	nop
 8015cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015cf6:	bc08      	pop	{r3}
 8015cf8:	469e      	mov	lr, r3
 8015cfa:	4770      	bx	lr
