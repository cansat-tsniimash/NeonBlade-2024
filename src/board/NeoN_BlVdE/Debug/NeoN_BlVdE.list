
NeoN_BlVdE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b10  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08006ca8  08006ca8  00016ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006eb0  08006eb0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006eb0  08006eb0  00016eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006eb8  08006eb8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006eb8  08006eb8  00016eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ebc  08006ebc  00016ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006ec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002864  20000070  08006f30  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200028d4  08006f30  000228d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026354  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b69  00000000  00000000  000463f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a28  00000000  00000000  00049f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019e8  00000000  00000000  0004b988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d57  00000000  00000000  0004d370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a100  00000000  00000000  000670c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098de5  00000000  00000000  000811c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00119fac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007138  00000000  00000000  0011a000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006c90 	.word	0x08006c90

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08006c90 	.word	0x08006c90

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96e 	b.w	80004f0 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468c      	mov	ip, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	f040 8083 	bne.w	8000342 <__udivmoddi4+0x116>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d947      	bls.n	80002d2 <__udivmoddi4+0xa6>
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	b142      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000248:	f1c2 0020 	rsb	r0, r2, #32
 800024c:	fa24 f000 	lsr.w	r0, r4, r0
 8000250:	4091      	lsls	r1, r2
 8000252:	4097      	lsls	r7, r2
 8000254:	ea40 0c01 	orr.w	ip, r0, r1
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbbc f6f8 	udiv	r6, ip, r8
 8000264:	fa1f fe87 	uxth.w	lr, r7
 8000268:	fb08 c116 	mls	r1, r8, r6, ip
 800026c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000270:	fb06 f10e 	mul.w	r1, r6, lr
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	f106 30ff 	add.w	r0, r6, #4294967295
 800027e:	f080 8119 	bcs.w	80004b4 <__udivmoddi4+0x288>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8116 	bls.w	80004b4 <__udivmoddi4+0x288>
 8000288:	3e02      	subs	r6, #2
 800028a:	443b      	add	r3, r7
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0f8 	udiv	r0, r3, r8
 8000294:	fb08 3310 	mls	r3, r8, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a0:	45a6      	cmp	lr, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	193c      	adds	r4, r7, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8105 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 80002ae:	45a6      	cmp	lr, r4
 80002b0:	f240 8102 	bls.w	80004b8 <__udivmoddi4+0x28c>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002bc:	eba4 040e 	sub.w	r4, r4, lr
 80002c0:	2600      	movs	r6, #0
 80002c2:	b11d      	cbz	r5, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c5 4300 	strd	r4, r3, [r5]
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	b902      	cbnz	r2, 80002d6 <__udivmoddi4+0xaa>
 80002d4:	deff      	udf	#255	; 0xff
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d150      	bne.n	8000380 <__udivmoddi4+0x154>
 80002de:	1bcb      	subs	r3, r1, r7
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f f887 	uxth.w	r8, r7
 80002e8:	2601      	movs	r6, #1
 80002ea:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ee:	0c21      	lsrs	r1, r4, #16
 80002f0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002f8:	fb08 f30c 	mul.w	r3, r8, ip
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000300:	1879      	adds	r1, r7, r1
 8000302:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0xe2>
 8000308:	428b      	cmp	r3, r1
 800030a:	f200 80e9 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 800030e:	4684      	mov	ip, r0
 8000310:	1ac9      	subs	r1, r1, r3
 8000312:	b2a3      	uxth	r3, r4
 8000314:	fbb1 f0fe 	udiv	r0, r1, lr
 8000318:	fb0e 1110 	mls	r1, lr, r0, r1
 800031c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000320:	fb08 f800 	mul.w	r8, r8, r0
 8000324:	45a0      	cmp	r8, r4
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x10c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x10a>
 8000330:	45a0      	cmp	r8, r4
 8000332:	f200 80d9 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 8000336:	4618      	mov	r0, r3
 8000338:	eba4 0408 	sub.w	r4, r4, r8
 800033c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000340:	e7bf      	b.n	80002c2 <__udivmoddi4+0x96>
 8000342:	428b      	cmp	r3, r1
 8000344:	d909      	bls.n	800035a <__udivmoddi4+0x12e>
 8000346:	2d00      	cmp	r5, #0
 8000348:	f000 80b1 	beq.w	80004ae <__udivmoddi4+0x282>
 800034c:	2600      	movs	r6, #0
 800034e:	e9c5 0100 	strd	r0, r1, [r5]
 8000352:	4630      	mov	r0, r6
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	fab3 f683 	clz	r6, r3
 800035e:	2e00      	cmp	r6, #0
 8000360:	d14a      	bne.n	80003f8 <__udivmoddi4+0x1cc>
 8000362:	428b      	cmp	r3, r1
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0x140>
 8000366:	4282      	cmp	r2, r0
 8000368:	f200 80b8 	bhi.w	80004dc <__udivmoddi4+0x2b0>
 800036c:	1a84      	subs	r4, r0, r2
 800036e:	eb61 0103 	sbc.w	r1, r1, r3
 8000372:	2001      	movs	r0, #1
 8000374:	468c      	mov	ip, r1
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0a8      	beq.n	80002cc <__udivmoddi4+0xa0>
 800037a:	e9c5 4c00 	strd	r4, ip, [r5]
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0xa0>
 8000380:	f1c2 0320 	rsb	r3, r2, #32
 8000384:	fa20 f603 	lsr.w	r6, r0, r3
 8000388:	4097      	lsls	r7, r2
 800038a:	fa01 f002 	lsl.w	r0, r1, r2
 800038e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000392:	40d9      	lsrs	r1, r3
 8000394:	4330      	orrs	r0, r6
 8000396:	0c03      	lsrs	r3, r0, #16
 8000398:	fbb1 f6fe 	udiv	r6, r1, lr
 800039c:	fa1f f887 	uxth.w	r8, r7
 80003a0:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a8:	fb06 f108 	mul.w	r1, r6, r8
 80003ac:	4299      	cmp	r1, r3
 80003ae:	fa04 f402 	lsl.w	r4, r4, r2
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x19c>
 80003b4:	18fb      	adds	r3, r7, r3
 80003b6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ba:	f080 808d 	bcs.w	80004d8 <__udivmoddi4+0x2ac>
 80003be:	4299      	cmp	r1, r3
 80003c0:	f240 808a 	bls.w	80004d8 <__udivmoddi4+0x2ac>
 80003c4:	3e02      	subs	r6, #2
 80003c6:	443b      	add	r3, r7
 80003c8:	1a5b      	subs	r3, r3, r1
 80003ca:	b281      	uxth	r1, r0
 80003cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d8:	fb00 f308 	mul.w	r3, r0, r8
 80003dc:	428b      	cmp	r3, r1
 80003de:	d907      	bls.n	80003f0 <__udivmoddi4+0x1c4>
 80003e0:	1879      	adds	r1, r7, r1
 80003e2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003e6:	d273      	bcs.n	80004d0 <__udivmoddi4+0x2a4>
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d971      	bls.n	80004d0 <__udivmoddi4+0x2a4>
 80003ec:	3802      	subs	r0, #2
 80003ee:	4439      	add	r1, r7
 80003f0:	1acb      	subs	r3, r1, r3
 80003f2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003f6:	e778      	b.n	80002ea <__udivmoddi4+0xbe>
 80003f8:	f1c6 0c20 	rsb	ip, r6, #32
 80003fc:	fa03 f406 	lsl.w	r4, r3, r6
 8000400:	fa22 f30c 	lsr.w	r3, r2, ip
 8000404:	431c      	orrs	r4, r3
 8000406:	fa20 f70c 	lsr.w	r7, r0, ip
 800040a:	fa01 f306 	lsl.w	r3, r1, r6
 800040e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000412:	fa21 f10c 	lsr.w	r1, r1, ip
 8000416:	431f      	orrs	r7, r3
 8000418:	0c3b      	lsrs	r3, r7, #16
 800041a:	fbb1 f9fe 	udiv	r9, r1, lr
 800041e:	fa1f f884 	uxth.w	r8, r4
 8000422:	fb0e 1119 	mls	r1, lr, r9, r1
 8000426:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042a:	fb09 fa08 	mul.w	sl, r9, r8
 800042e:	458a      	cmp	sl, r1
 8000430:	fa02 f206 	lsl.w	r2, r2, r6
 8000434:	fa00 f306 	lsl.w	r3, r0, r6
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x220>
 800043a:	1861      	adds	r1, r4, r1
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d248      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 8000442:	458a      	cmp	sl, r1
 8000444:	d946      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	4421      	add	r1, r4
 800044c:	eba1 010a 	sub.w	r1, r1, sl
 8000450:	b2bf      	uxth	r7, r7
 8000452:	fbb1 f0fe 	udiv	r0, r1, lr
 8000456:	fb0e 1110 	mls	r1, lr, r0, r1
 800045a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45b8      	cmp	r8, r7
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x24a>
 8000466:	19e7      	adds	r7, r4, r7
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d22e      	bcs.n	80004cc <__udivmoddi4+0x2a0>
 800046e:	45b8      	cmp	r8, r7
 8000470:	d92c      	bls.n	80004cc <__udivmoddi4+0x2a0>
 8000472:	3802      	subs	r0, #2
 8000474:	4427      	add	r7, r4
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba7 0708 	sub.w	r7, r7, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454f      	cmp	r7, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	4649      	mov	r1, r9
 8000488:	d31a      	bcc.n	80004c0 <__udivmoddi4+0x294>
 800048a:	d017      	beq.n	80004bc <__udivmoddi4+0x290>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x27a>
 800048e:	ebb3 020e 	subs.w	r2, r3, lr
 8000492:	eb67 0701 	sbc.w	r7, r7, r1
 8000496:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049a:	40f2      	lsrs	r2, r6
 800049c:	ea4c 0202 	orr.w	r2, ip, r2
 80004a0:	40f7      	lsrs	r7, r6
 80004a2:	e9c5 2700 	strd	r2, r7, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e70b      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e9      	b.n	800028c <__udivmoddi4+0x60>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6fd      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004bc:	4543      	cmp	r3, r8
 80004be:	d2e5      	bcs.n	800048c <__udivmoddi4+0x260>
 80004c0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c4:	eb69 0104 	sbc.w	r1, r9, r4
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7df      	b.n	800048c <__udivmoddi4+0x260>
 80004cc:	4608      	mov	r0, r1
 80004ce:	e7d2      	b.n	8000476 <__udivmoddi4+0x24a>
 80004d0:	4660      	mov	r0, ip
 80004d2:	e78d      	b.n	80003f0 <__udivmoddi4+0x1c4>
 80004d4:	4681      	mov	r9, r0
 80004d6:	e7b9      	b.n	800044c <__udivmoddi4+0x220>
 80004d8:	4666      	mov	r6, ip
 80004da:	e775      	b.n	80003c8 <__udivmoddi4+0x19c>
 80004dc:	4630      	mov	r0, r6
 80004de:	e74a      	b.n	8000376 <__udivmoddi4+0x14a>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	4439      	add	r1, r7
 80004e6:	e713      	b.n	8000310 <__udivmoddi4+0xe4>
 80004e8:	3802      	subs	r0, #2
 80004ea:	443c      	add	r4, r7
 80004ec:	e724      	b.n	8000338 <__udivmoddi4+0x10c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <app_main>:
		}
	}
}

int app_main()
{
 80004f4:	b590      	push	{r4, r7, lr}
 80004f6:	b0ed      	sub	sp, #436	; 0x1b4
 80004f8:	af02      	add	r7, sp, #8
	packet_ma_type_1_t packet_ma_type_1 = {3};
 80004fa:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80004fe:	2220      	movs	r2, #32
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f006 fb2e 	bl	8006b64 <memset>
 8000508:	2303      	movs	r3, #3
 800050a:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
 	packet_ma_type_2_t packet_ma_type_2 = {1};
 800050e:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000512:	221f      	movs	r2, #31
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f006 fb24 	bl	8006b64 <memset>
 800051c:	2301      	movs	r3, #1
 800051e:	f887 3144 	strb.w	r3, [r7, #324]	; 0x144


	float quaternion[4] = {0};
 8000522:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
	float seb_delta = 0;
 8000530:	f04f 0300 	mov.w	r3, #0
 8000534:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    int fix;
    int64_t cookie;


	float temp_lis;
	float mag[3] = {0};
 8000538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
	stmdev_ctx_t ctx = {0};
 8000544:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
    struct lis_spi_intf lis_spi;
	lis_spi.GPIO_Port = GPIOC;
 8000550:	4b52      	ldr	r3, [pc, #328]	; (800069c <app_main+0x1a8>)
 8000552:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	lis_spi.GPIO_Pin = GPIO_PIN_14;
 8000556:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800055a:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
	lis_spi.spi = &hspi1;
 800055e:	4b50      	ldr	r3, [pc, #320]	; (80006a0 <app_main+0x1ac>)
 8000560:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	lisset(&ctx, &lis_spi);
 8000564:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8000568:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800056c:	4611      	mov	r1, r2
 800056e:	4618      	mov	r0, r3
 8000570:	f005 ff48 	bl	8006404 <lisset>


	float temperature_celsius_gyro;
	float acc_g[3];
	float gyro_dps[3];
	stmdev_ctx_t lsmctx = {0};
 8000574:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
	struct lsm_spi_intf lsm_spi;
	lsm_spi.GPIO_Port = GPIOC;
 8000580:	4b46      	ldr	r3, [pc, #280]	; (800069c <app_main+0x1a8>)
 8000582:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	lsm_spi.GPIO_Pin = GPIO_PIN_13;
 8000586:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800058a:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
	lsm_spi.spi = &hspi1;
 800058e:	4b44      	ldr	r3, [pc, #272]	; (80006a0 <app_main+0x1ac>)
 8000590:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	lsmset(&lsmctx, &lsm_spi);
 8000594:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8000598:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800059c:	4611      	mov	r1, r2
 800059e:	4618      	mov	r0, r3
 80005a0:	f006 f972 	bl	8006888 <lsmset>


    if(GPS_FLAG)
    {
	gps_init();
 80005a4:	f005 fd9a 	bl	80060dc <gps_init>
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 80005a8:	4b3e      	ldr	r3, [pc, #248]	; (80006a4 <app_main+0x1b0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	68da      	ldr	r2, [r3, #12]
 80005ae:	4b3d      	ldr	r3, [pc, #244]	; (80006a4 <app_main+0x1b0>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f042 0220 	orr.w	r2, r2, #32
 80005b6:	60da      	str	r2, [r3, #12]
    bme_important_shit bme_important;//////////////////////////////////BME
    if(BME_FLAG == 1){
    its_bme280_init(UNKNXW);}


    int8_t state_sd = 0;//sd
 80005b8:	f107 0387 	add.w	r3, r7, #135	; 0x87
 80005bc:	2200      	movs	r2, #0
 80005be:	701a      	strb	r2, [r3, #0]
    uint8_t abobus;
    int retin;
    int time_sd, time_gps, time_lsm, time_lis, time_bme, time_prnt;//переменные для вывода через свисток в консоль
    uint16_t time_for_cycle= 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	f8a7 319e 	strh.w	r3, [r7, #414]	; 0x19e
    nrf24_fifo_flush_tx(&nrf24_api_config);
    //nrf24_mode_rx(&nrf24_api_config);
    //nrf24_mode_tx(&nrf24_api_config);
	nrf24_pipe_set_tx_addr(&nrf24_api_config, 0xacacacacac);
    }
	uint8_t rx_buffer[32] = {0};
 80005c6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	3304      	adds	r3, #4
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]
 80005dc:	615a      	str	r2, [r3, #20]
 80005de:	619a      	str	r2, [r3, #24]
	uint8_t tx_buffer[32] = {0};
 80005e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	3304      	adds	r3, #4
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]
 80005f6:	615a      	str	r2, [r3, #20]
 80005f8:	619a      	str	r2, [r3, #24]
	nrf24_fifo_status_t rx_status = 2;
 80005fa:	2302      	movs	r3, #2
 80005fc:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
    nrf24_fifo_status_t tx_status = 2;
 8000600:	2302      	movs	r3, #2
 8000602:	f887 319c 	strb.w	r3, [r7, #412]	; 0x19c

    int errrrrrrrrr, radio_read_err;//
	int IRQ_flags;///////////////////переменные для отладки радио
    bool radio_flag;////////////////
 	int irq_err = 10;//////////////
 8000606:	230a      	movs	r3, #10
 8000608:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 	int size_in_tx = 0;///////////
 800060c:	2300      	movs	r3, #0
 800060e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

		if(SD_FLAG)
		{
    	super_smart_write((uint8_t *)&packet_ma_type_1, sizeof(packet_ma_type_1), &state_sd);
		}
        time_sd = HAL_GetTick() - time_sd;
 8000612:	f000 fe05 	bl	8001220 <HAL_GetTick>
 8000616:	4602      	mov	r2, r0
 8000618:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800061c:	1ad3      	subs	r3, r2, r3
 800061e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

        time_gps = HAL_GetTick();
 8000622:	f000 fdfd 	bl	8001220 <HAL_GetTick>
 8000626:	4603      	mov	r3, r0
 8000628:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
		if(GPS_FLAG)
		{
			gps_work();
 800062c:	f005 fd86 	bl	800613c <gps_work>
			gps_get_coords(&cookie,  & latitude,  & lontitude,& altitude, &fix);
 8000630:	f507 7494 	add.w	r4, r7, #296	; 0x128
 8000634:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8000638:	f507 7198 	add.w	r1, r7, #304	; 0x130
 800063c:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8000640:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	4623      	mov	r3, r4
 8000648:	f005 fe36 	bl	80062b8 <gps_get_coords>
		}
		time_gps = HAL_GetTick() - time_gps;
 800064c:	f000 fde8 	bl	8001220 <HAL_GetTick>
 8000650:	4602      	mov	r2, r0
 8000652:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000656:	1ad3      	subs	r3, r2, r3
 8000658:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190

        time_lsm = HAL_GetTick();
 800065c:	f000 fde0 	bl	8001220 <HAL_GetTick>
 8000660:	4603      	mov	r3, r0
 8000662:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
		if (LSM_FLAG){
			lsmread(&lsmctx, &temperature_celsius_gyro, &acc_g, &gyro_dps);
			}
		time_lsm = HAL_GetTick() - time_lsm;
 8000666:	f000 fddb 	bl	8001220 <HAL_GetTick>
 800066a:	4602      	mov	r2, r0
 800066c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c

        time_lis = HAL_GetTick();
 8000676:	f000 fdd3 	bl	8001220 <HAL_GetTick>
 800067a:	4603      	mov	r3, r0
 800067c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
		if (LIS_FLAG)
			lisread(&ctx, &temp_lis, &mag);
		time_lis = HAL_GetTick() - time_lis;
 8000680:	f000 fdce 	bl	8001220 <HAL_GetTick>
 8000684:	4602      	mov	r2, r0
 8000686:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800068a:	1ad3      	subs	r3, r2, r3
 800068c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

        time_bme = HAL_GetTick();
 8000690:	f000 fdc6 	bl	8001220 <HAL_GetTick>
 8000694:	4603      	mov	r3, r0
 8000696:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
		if(SD_FLAG)
 800069a:	e7ba      	b.n	8000612 <app_main+0x11e>
 800069c:	40020800 	.word	0x40020800
 80006a0:	200007c4 	.word	0x200007c4
 80006a4:	200006a4 	.word	0x200006a4

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ac:	f000 fd52 	bl	8001154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b0:	f000 f816 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b4:	f000 f9c6 	bl	8000a44 <MX_GPIO_Init>
  MX_SPI5_Init();
 80006b8:	f000 f93a 	bl	8000930 <MX_SPI5_Init>
  MX_I2C1_Init();
 80006bc:	f000 f87a 	bl	80007b4 <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 80006c0:	f000 f8a6 	bl	8000810 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 80006c4:	f000 f8c8 	bl	8000858 <MX_SPI1_Init>
  MX_SPI4_Init();
 80006c8:	f000 f8fc 	bl	80008c4 <MX_SPI4_Init>
  MX_USART1_UART_Init();
 80006cc:	f000 f966 	bl	800099c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80006d0:	f000 f98e 	bl	80009f0 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80006d4:	f004 fcca 	bl	800506c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  app_main();
 80006d8:	f7ff ff0c 	bl	80004f4 <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <main+0x34>
	...

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b094      	sub	sp, #80	; 0x50
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 0320 	add.w	r3, r7, #32
 80006ea:	2230      	movs	r2, #48	; 0x30
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f006 fa38 	bl	8006b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000704:	2300      	movs	r3, #0
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	4b28      	ldr	r3, [pc, #160]	; (80007ac <SystemClock_Config+0xcc>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	4a27      	ldr	r2, [pc, #156]	; (80007ac <SystemClock_Config+0xcc>)
 800070e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000712:	6413      	str	r3, [r2, #64]	; 0x40
 8000714:	4b25      	ldr	r3, [pc, #148]	; (80007ac <SystemClock_Config+0xcc>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000720:	2300      	movs	r3, #0
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <SystemClock_Config+0xd0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a21      	ldr	r2, [pc, #132]	; (80007b0 <SystemClock_Config+0xd0>)
 800072a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <SystemClock_Config+0xd0>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800073c:	2302      	movs	r3, #2
 800073e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000740:	2301      	movs	r3, #1
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000744:	2310      	movs	r3, #16
 8000746:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000748:	2302      	movs	r3, #2
 800074a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800074c:	2300      	movs	r3, #0
 800074e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000750:	2308      	movs	r3, #8
 8000752:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000754:	2364      	movs	r3, #100	; 0x64
 8000756:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000758:	2302      	movs	r3, #2
 800075a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800075c:	2307      	movs	r3, #7
 800075e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	f107 0320 	add.w	r3, r7, #32
 8000764:	4618      	mov	r0, r3
 8000766:	f001 f97f 	bl	8001a68 <HAL_RCC_OscConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000770:	f000 f9d2 	bl	8000b18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000774:	230f      	movs	r3, #15
 8000776:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000778:	2302      	movs	r3, #2
 800077a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000780:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000784:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	2103      	movs	r1, #3
 8000792:	4618      	mov	r0, r3
 8000794:	f001 fbe0 	bl	8001f58 <HAL_RCC_ClockConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800079e:	f000 f9bb 	bl	8000b18 <Error_Handler>
  }
}
 80007a2:	bf00      	nop
 80007a4:	3750      	adds	r7, #80	; 0x50
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40007000 	.word	0x40007000

080007b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_I2C1_Init+0x50>)
 80007ba:	4a13      	ldr	r2, [pc, #76]	; (8000808 <MX_I2C1_Init+0x54>)
 80007bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_I2C1_Init+0x50>)
 80007c0:	4a12      	ldr	r2, [pc, #72]	; (800080c <MX_I2C1_Init+0x58>)
 80007c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_I2C1_Init+0x50>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_I2C1_Init+0x50>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_I2C1_Init+0x50>)
 80007d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <MX_I2C1_Init+0x50>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_I2C1_Init+0x50>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <MX_I2C1_Init+0x50>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_I2C1_Init+0x50>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_I2C1_Init+0x50>)
 80007f2:	f000 fff5 	bl	80017e0 <HAL_I2C_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007fc:	f000 f98c 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000650 	.word	0x20000650
 8000808:	40005400 	.word	0x40005400
 800080c:	000186a0 	.word	0x000186a0

08000810 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000814:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_SDIO_SD_Init+0x40>)
 8000816:	4a0f      	ldr	r2, [pc, #60]	; (8000854 <MX_SDIO_SD_Init+0x44>)
 8000818:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800081a:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <MX_SDIO_SD_Init+0x40>)
 800081c:	2200      	movs	r2, #0
 800081e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000820:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_SDIO_SD_Init+0x40>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000826:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <MX_SDIO_SD_Init+0x40>)
 8000828:	2200      	movs	r2, #0
 800082a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800082c:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_SDIO_SD_Init+0x40>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000832:	4b07      	ldr	r3, [pc, #28]	; (8000850 <MX_SDIO_SD_Init+0x40>)
 8000834:	2200      	movs	r2, #0
 8000836:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 3;
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <MX_SDIO_SD_Init+0x40>)
 800083a:	2203      	movs	r2, #3
 800083c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800083e:	4b04      	ldr	r3, [pc, #16]	; (8000850 <MX_SDIO_SD_Init+0x40>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  /* USER CODE END SDIO_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	20000740 	.word	0x20000740
 8000854:	40012c00 	.word	0x40012c00

08000858 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800085c:	4b17      	ldr	r3, [pc, #92]	; (80008bc <MX_SPI1_Init+0x64>)
 800085e:	4a18      	ldr	r2, [pc, #96]	; (80008c0 <MX_SPI1_Init+0x68>)
 8000860:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <MX_SPI1_Init+0x64>)
 8000864:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000868:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800086a:	4b14      	ldr	r3, [pc, #80]	; (80008bc <MX_SPI1_Init+0x64>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_SPI1_Init+0x64>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_SPI1_Init+0x64>)
 8000878:	2202      	movs	r2, #2
 800087a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_SPI1_Init+0x64>)
 800087e:	2201      	movs	r2, #1
 8000880:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_SPI1_Init+0x64>)
 8000884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000888:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_SPI1_Init+0x64>)
 800088c:	2230      	movs	r2, #48	; 0x30
 800088e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000890:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <MX_SPI1_Init+0x64>)
 8000892:	2200      	movs	r2, #0
 8000894:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_SPI1_Init+0x64>)
 8000898:	2200      	movs	r2, #0
 800089a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <MX_SPI1_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MX_SPI1_Init+0x64>)
 80008a4:	220a      	movs	r2, #10
 80008a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008a8:	4804      	ldr	r0, [pc, #16]	; (80008bc <MX_SPI1_Init+0x64>)
 80008aa:	f002 feac 	bl	8003606 <HAL_SPI_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008b4:	f000 f930 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200007c4 	.word	0x200007c4
 80008c0:	40013000 	.word	0x40013000

080008c4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <MX_SPI4_Init+0x64>)
 80008ca:	4a18      	ldr	r2, [pc, #96]	; (800092c <MX_SPI4_Init+0x68>)
 80008cc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80008ce:	4b16      	ldr	r3, [pc, #88]	; (8000928 <MX_SPI4_Init+0x64>)
 80008d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008d4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_SPI4_Init+0x64>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <MX_SPI4_Init+0x64>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_SPI4_Init+0x64>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_SPI4_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_SPI4_Init+0x64>)
 80008f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008f4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_SPI4_Init+0x64>)
 80008f8:	2228      	movs	r2, #40	; 0x28
 80008fa:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <MX_SPI4_Init+0x64>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_SPI4_Init+0x64>)
 8000904:	2200      	movs	r2, #0
 8000906:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000908:	4b07      	ldr	r3, [pc, #28]	; (8000928 <MX_SPI4_Init+0x64>)
 800090a:	2200      	movs	r2, #0
 800090c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_SPI4_Init+0x64>)
 8000910:	220a      	movs	r2, #10
 8000912:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000914:	4804      	ldr	r0, [pc, #16]	; (8000928 <MX_SPI4_Init+0x64>)
 8000916:	f002 fe76 	bl	8003606 <HAL_SPI_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8000920:	f000 f8fa 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	200006e8 	.word	0x200006e8
 800092c:	40013400 	.word	0x40013400

08000930 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000934:	4b17      	ldr	r3, [pc, #92]	; (8000994 <MX_SPI5_Init+0x64>)
 8000936:	4a18      	ldr	r2, [pc, #96]	; (8000998 <MX_SPI5_Init+0x68>)
 8000938:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800093a:	4b16      	ldr	r3, [pc, #88]	; (8000994 <MX_SPI5_Init+0x64>)
 800093c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000940:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000942:	4b14      	ldr	r3, [pc, #80]	; (8000994 <MX_SPI5_Init+0x64>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <MX_SPI5_Init+0x64>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <MX_SPI5_Init+0x64>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <MX_SPI5_Init+0x64>)
 8000956:	2200      	movs	r2, #0
 8000958:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <MX_SPI5_Init+0x64>)
 800095c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000960:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000962:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <MX_SPI5_Init+0x64>)
 8000964:	2230      	movs	r2, #48	; 0x30
 8000966:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000968:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <MX_SPI5_Init+0x64>)
 800096a:	2200      	movs	r2, #0
 800096c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <MX_SPI5_Init+0x64>)
 8000970:	2200      	movs	r2, #0
 8000972:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000974:	4b07      	ldr	r3, [pc, #28]	; (8000994 <MX_SPI5_Init+0x64>)
 8000976:	2200      	movs	r2, #0
 8000978:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <MX_SPI5_Init+0x64>)
 800097c:	220a      	movs	r2, #10
 800097e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000980:	4804      	ldr	r0, [pc, #16]	; (8000994 <MX_SPI5_Init+0x64>)
 8000982:	f002 fe40 	bl	8003606 <HAL_SPI_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800098c:	f000 f8c4 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	200005f8 	.word	0x200005f8
 8000998:	40015000 	.word	0x40015000

0800099c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_USART1_UART_Init+0x4c>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <MX_USART1_UART_Init+0x50>)
 80009a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <MX_USART1_UART_Init+0x4c>)
 80009a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_USART1_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_USART1_UART_Init+0x4c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <MX_USART1_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_USART1_UART_Init+0x4c>)
 80009c2:	220c      	movs	r2, #12
 80009c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <MX_USART1_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_USART1_UART_Init+0x4c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009d2:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_USART1_UART_Init+0x4c>)
 80009d4:	f003 fbc0 	bl	8004158 <HAL_UART_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009de:	f000 f89b 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200006a4 	.word	0x200006a4
 80009ec:	40011000 	.word	0x40011000

080009f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_USART2_UART_Init+0x4c>)
 80009f6:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <MX_USART2_UART_Init+0x50>)
 80009f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <MX_USART2_UART_Init+0x4c>)
 80009fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_USART2_UART_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_USART2_UART_Init+0x4c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <MX_USART2_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_USART2_UART_Init+0x4c>)
 8000a16:	220c      	movs	r2, #12
 8000a18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <MX_USART2_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_USART2_UART_Init+0x4c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_USART2_UART_Init+0x4c>)
 8000a28:	f003 fb96 	bl	8004158 <HAL_UART_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a32:	f000 f871 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	2000081c 	.word	0x2000081c
 8000a40:	40004400 	.word	0x40004400

08000a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4a:	f107 030c 	add.w	r3, r7, #12
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	4b2b      	ldr	r3, [pc, #172]	; (8000b0c <MX_GPIO_Init+0xc8>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a2a      	ldr	r2, [pc, #168]	; (8000b0c <MX_GPIO_Init+0xc8>)
 8000a64:	f043 0304 	orr.w	r3, r3, #4
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b28      	ldr	r3, [pc, #160]	; (8000b0c <MX_GPIO_Init+0xc8>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0304 	and.w	r3, r3, #4
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	4b24      	ldr	r3, [pc, #144]	; (8000b0c <MX_GPIO_Init+0xc8>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a23      	ldr	r2, [pc, #140]	; (8000b0c <MX_GPIO_Init+0xc8>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <MX_GPIO_Init+0xc8>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	603b      	str	r3, [r7, #0]
 8000a96:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <MX_GPIO_Init+0xc8>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a1c      	ldr	r2, [pc, #112]	; (8000b0c <MX_GPIO_Init+0xc8>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <MX_GPIO_Init+0xc8>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LSM_CS_Pin|LIS_CS_Pin, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000ab4:	4816      	ldr	r0, [pc, #88]	; (8000b10 <MX_GPIO_Init+0xcc>)
 8000ab6:	f000 fe79 	bl	80017ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF_CE_Pin|NRF_CS_Pin|CS_TDC_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f240 4106 	movw	r1, #1030	; 0x406
 8000ac0:	4814      	ldr	r0, [pc, #80]	; (8000b14 <MX_GPIO_Init+0xd0>)
 8000ac2:	f000 fe73 	bl	80017ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LSM_CS_Pin LIS_CS_Pin */
  GPIO_InitStruct.Pin = LSM_CS_Pin|LIS_CS_Pin;
 8000ac6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000aca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000acc:	2301      	movs	r3, #1
 8000ace:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	4619      	mov	r1, r3
 8000ade:	480c      	ldr	r0, [pc, #48]	; (8000b10 <MX_GPIO_Init+0xcc>)
 8000ae0:	f000 fce0 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CE_Pin NRF_CS_Pin CS_TDC_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CS_Pin|CS_TDC_Pin;
 8000ae4:	f240 4306 	movw	r3, #1030	; 0x406
 8000ae8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af6:	f107 030c 	add.w	r3, r7, #12
 8000afa:	4619      	mov	r1, r3
 8000afc:	4805      	ldr	r0, [pc, #20]	; (8000b14 <MX_GPIO_Init+0xd0>)
 8000afe:	f000 fcd1 	bl	80014a4 <HAL_GPIO_Init>

}
 8000b02:	bf00      	nop
 8000b04:	3720      	adds	r7, #32
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40020800 	.word	0x40020800
 8000b14:	40020400 	.word	0x40020400

08000b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1c:	b672      	cpsid	i
}
 8000b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <Error_Handler+0x8>
	...

08000b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	4a0f      	ldr	r2, [pc, #60]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b38:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	603b      	str	r3, [r7, #0]
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	4a08      	ldr	r2, [pc, #32]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b54:	6413      	str	r3, [r2, #64]	; 0x40
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800

08000b74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a19      	ldr	r2, [pc, #100]	; (8000bf8 <HAL_I2C_MspInit+0x84>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d12c      	bne.n	8000bf0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <HAL_I2C_MspInit+0x88>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a17      	ldr	r2, [pc, #92]	; (8000bfc <HAL_I2C_MspInit+0x88>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <HAL_I2C_MspInit+0x88>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000bb2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bb8:	2312      	movs	r3, #18
 8000bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	480c      	ldr	r0, [pc, #48]	; (8000c00 <HAL_I2C_MspInit+0x8c>)
 8000bd0:	f000 fc68 	bl	80014a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <HAL_I2C_MspInit+0x88>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bdc:	4a07      	ldr	r2, [pc, #28]	; (8000bfc <HAL_I2C_MspInit+0x88>)
 8000bde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000be2:	6413      	str	r3, [r2, #64]	; 0x40
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <HAL_I2C_MspInit+0x88>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bf0:	bf00      	nop
 8000bf2:	3728      	adds	r7, #40	; 0x28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40005400 	.word	0x40005400
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020400 	.word	0x40020400

08000c04 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a29      	ldr	r2, [pc, #164]	; (8000cc8 <HAL_SD_MspInit+0xc4>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d14b      	bne.n	8000cbe <HAL_SD_MspInit+0xba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	4b28      	ldr	r3, [pc, #160]	; (8000ccc <HAL_SD_MspInit+0xc8>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	4a27      	ldr	r2, [pc, #156]	; (8000ccc <HAL_SD_MspInit+0xc8>)
 8000c30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c34:	6453      	str	r3, [r2, #68]	; 0x44
 8000c36:	4b25      	ldr	r3, [pc, #148]	; (8000ccc <HAL_SD_MspInit+0xc8>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <HAL_SD_MspInit+0xc8>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a20      	ldr	r2, [pc, #128]	; (8000ccc <HAL_SD_MspInit+0xc8>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b1e      	ldr	r3, [pc, #120]	; (8000ccc <HAL_SD_MspInit+0xc8>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <HAL_SD_MspInit+0xc8>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a19      	ldr	r2, [pc, #100]	; (8000ccc <HAL_SD_MspInit+0xc8>)
 8000c68:	f043 0302 	orr.w	r3, r3, #2
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <HAL_SD_MspInit+0xc8>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8000c7a:	f44f 7350 	mov.w	r3, #832	; 0x340
 8000c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000c8c:	230c      	movs	r3, #12
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4619      	mov	r1, r3
 8000c96:	480e      	ldr	r0, [pc, #56]	; (8000cd0 <HAL_SD_MspInit+0xcc>)
 8000c98:	f000 fc04 	bl	80014a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 8000c9c:	f248 03a0 	movw	r3, #32928	; 0x80a0
 8000ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000cae:	230c      	movs	r3, #12
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4806      	ldr	r0, [pc, #24]	; (8000cd4 <HAL_SD_MspInit+0xd0>)
 8000cba:	f000 fbf3 	bl	80014a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000cbe:	bf00      	nop
 8000cc0:	3728      	adds	r7, #40	; 0x28
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40012c00 	.word	0x40012c00
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020000 	.word	0x40020000
 8000cd4:	40020400 	.word	0x40020400

08000cd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b090      	sub	sp, #64	; 0x40
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a81      	ldr	r2, [pc, #516]	; (8000efc <HAL_SPI_MspInit+0x224>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d14a      	bne.n	8000d90 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cfe:	4b80      	ldr	r3, [pc, #512]	; (8000f00 <HAL_SPI_MspInit+0x228>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	4a7f      	ldr	r2, [pc, #508]	; (8000f00 <HAL_SPI_MspInit+0x228>)
 8000d04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d08:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0a:	4b7d      	ldr	r3, [pc, #500]	; (8000f00 <HAL_SPI_MspInit+0x228>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d14:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
 8000d1a:	4b79      	ldr	r3, [pc, #484]	; (8000f00 <HAL_SPI_MspInit+0x228>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a78      	ldr	r2, [pc, #480]	; (8000f00 <HAL_SPI_MspInit+0x228>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b76      	ldr	r3, [pc, #472]	; (8000f00 <HAL_SPI_MspInit+0x228>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8000d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	623b      	str	r3, [r7, #32]
 8000d36:	4b72      	ldr	r3, [pc, #456]	; (8000f00 <HAL_SPI_MspInit+0x228>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a71      	ldr	r2, [pc, #452]	; (8000f00 <HAL_SPI_MspInit+0x228>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b6f      	ldr	r3, [pc, #444]	; (8000f00 <HAL_SPI_MspInit+0x228>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	623b      	str	r3, [r7, #32]
 8000d4c:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000d4e:	23a0      	movs	r3, #160	; 0xa0
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d5e:	2305      	movs	r3, #5
 8000d60:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d66:	4619      	mov	r1, r3
 8000d68:	4866      	ldr	r0, [pc, #408]	; (8000f04 <HAL_SPI_MspInit+0x22c>)
 8000d6a:	f000 fb9b 	bl	80014a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d6e:	2310      	movs	r3, #16
 8000d70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d7e:	2305      	movs	r3, #5
 8000d80:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d86:	4619      	mov	r1, r3
 8000d88:	485f      	ldr	r0, [pc, #380]	; (8000f08 <HAL_SPI_MspInit+0x230>)
 8000d8a:	f000 fb8b 	bl	80014a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000d8e:	e0b1      	b.n	8000ef4 <HAL_SPI_MspInit+0x21c>
  else if(hspi->Instance==SPI4)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a5d      	ldr	r2, [pc, #372]	; (8000f0c <HAL_SPI_MspInit+0x234>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d15c      	bne.n	8000e54 <HAL_SPI_MspInit+0x17c>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
 8000d9e:	4b58      	ldr	r3, [pc, #352]	; (8000f00 <HAL_SPI_MspInit+0x228>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	4a57      	ldr	r2, [pc, #348]	; (8000f00 <HAL_SPI_MspInit+0x228>)
 8000da4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000da8:	6453      	str	r3, [r2, #68]	; 0x44
 8000daa:	4b55      	ldr	r3, [pc, #340]	; (8000f00 <HAL_SPI_MspInit+0x228>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000db2:	61fb      	str	r3, [r7, #28]
 8000db4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	61bb      	str	r3, [r7, #24]
 8000dba:	4b51      	ldr	r3, [pc, #324]	; (8000f00 <HAL_SPI_MspInit+0x228>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a50      	ldr	r2, [pc, #320]	; (8000f00 <HAL_SPI_MspInit+0x228>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b4e      	ldr	r3, [pc, #312]	; (8000f00 <HAL_SPI_MspInit+0x228>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	61bb      	str	r3, [r7, #24]
 8000dd0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	4b4a      	ldr	r3, [pc, #296]	; (8000f00 <HAL_SPI_MspInit+0x228>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a49      	ldr	r2, [pc, #292]	; (8000f00 <HAL_SPI_MspInit+0x228>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b47      	ldr	r3, [pc, #284]	; (8000f00 <HAL_SPI_MspInit+0x228>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000dee:	2302      	movs	r3, #2
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000dfe:	2305      	movs	r3, #5
 8000e00:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e06:	4619      	mov	r1, r3
 8000e08:	483e      	ldr	r0, [pc, #248]	; (8000f04 <HAL_SPI_MspInit+0x22c>)
 8000e0a:	f000 fb4b 	bl	80014a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8000e20:	2306      	movs	r3, #6
 8000e22:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4837      	ldr	r0, [pc, #220]	; (8000f08 <HAL_SPI_MspInit+0x230>)
 8000e2c:	f000 fb3a 	bl	80014a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8000e42:	2306      	movs	r3, #6
 8000e44:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	482d      	ldr	r0, [pc, #180]	; (8000f04 <HAL_SPI_MspInit+0x22c>)
 8000e4e:	f000 fb29 	bl	80014a4 <HAL_GPIO_Init>
}
 8000e52:	e04f      	b.n	8000ef4 <HAL_SPI_MspInit+0x21c>
  else if(hspi->Instance==SPI5)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a2d      	ldr	r2, [pc, #180]	; (8000f10 <HAL_SPI_MspInit+0x238>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d14a      	bne.n	8000ef4 <HAL_SPI_MspInit+0x21c>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <HAL_SPI_MspInit+0x228>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e66:	4a26      	ldr	r2, [pc, #152]	; (8000f00 <HAL_SPI_MspInit+0x228>)
 8000e68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e6e:	4b24      	ldr	r3, [pc, #144]	; (8000f00 <HAL_SPI_MspInit+0x228>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	4b20      	ldr	r3, [pc, #128]	; (8000f00 <HAL_SPI_MspInit+0x228>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a1f      	ldr	r2, [pc, #124]	; (8000f00 <HAL_SPI_MspInit+0x228>)
 8000e84:	f043 0302 	orr.w	r3, r3, #2
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <HAL_SPI_MspInit+0x228>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <HAL_SPI_MspInit+0x228>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a18      	ldr	r2, [pc, #96]	; (8000f00 <HAL_SPI_MspInit+0x228>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <HAL_SPI_MspInit+0x228>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000ec2:	2306      	movs	r3, #6
 8000ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eca:	4619      	mov	r1, r3
 8000ecc:	480e      	ldr	r0, [pc, #56]	; (8000f08 <HAL_SPI_MspInit+0x230>)
 8000ece:	f000 fae9 	bl	80014a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000ed2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000ee4:	2306      	movs	r3, #6
 8000ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eec:	4619      	mov	r1, r3
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <HAL_SPI_MspInit+0x22c>)
 8000ef0:	f000 fad8 	bl	80014a4 <HAL_GPIO_Init>
}
 8000ef4:	bf00      	nop
 8000ef6:	3740      	adds	r7, #64	; 0x40
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40013000 	.word	0x40013000
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020000 	.word	0x40020000
 8000f08:	40020400 	.word	0x40020400
 8000f0c:	40013400 	.word	0x40013400
 8000f10:	40015000 	.word	0x40015000

08000f14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08c      	sub	sp, #48	; 0x30
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 031c 	add.w	r3, r7, #28
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a45      	ldr	r2, [pc, #276]	; (8001048 <HAL_UART_MspInit+0x134>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d153      	bne.n	8000fde <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
 8000f3a:	4b44      	ldr	r3, [pc, #272]	; (800104c <HAL_UART_MspInit+0x138>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	4a43      	ldr	r2, [pc, #268]	; (800104c <HAL_UART_MspInit+0x138>)
 8000f40:	f043 0310 	orr.w	r3, r3, #16
 8000f44:	6453      	str	r3, [r2, #68]	; 0x44
 8000f46:	4b41      	ldr	r3, [pc, #260]	; (800104c <HAL_UART_MspInit+0x138>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	f003 0310 	and.w	r3, r3, #16
 8000f4e:	61bb      	str	r3, [r7, #24]
 8000f50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	4b3d      	ldr	r3, [pc, #244]	; (800104c <HAL_UART_MspInit+0x138>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a3c      	ldr	r2, [pc, #240]	; (800104c <HAL_UART_MspInit+0x138>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b3a      	ldr	r3, [pc, #232]	; (800104c <HAL_UART_MspInit+0x138>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	4b36      	ldr	r3, [pc, #216]	; (800104c <HAL_UART_MspInit+0x138>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a35      	ldr	r2, [pc, #212]	; (800104c <HAL_UART_MspInit+0x138>)
 8000f78:	f043 0302 	orr.w	r3, r3, #2
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b33      	ldr	r3, [pc, #204]	; (800104c <HAL_UART_MspInit+0x138>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f9c:	2307      	movs	r3, #7
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	482a      	ldr	r0, [pc, #168]	; (8001050 <HAL_UART_MspInit+0x13c>)
 8000fa8:	f000 fa7c 	bl	80014a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fac:	2308      	movs	r3, #8
 8000fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fbc:	2307      	movs	r3, #7
 8000fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc0:	f107 031c 	add.w	r3, r7, #28
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4823      	ldr	r0, [pc, #140]	; (8001054 <HAL_UART_MspInit+0x140>)
 8000fc8:	f000 fa6c 	bl	80014a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2100      	movs	r1, #0
 8000fd0:	2025      	movs	r0, #37	; 0x25
 8000fd2:	f000 fa30 	bl	8001436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fd6:	2025      	movs	r0, #37	; 0x25
 8000fd8:	f000 fa49 	bl	800146e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fdc:	e030      	b.n	8001040 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART2)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a1d      	ldr	r2, [pc, #116]	; (8001058 <HAL_UART_MspInit+0x144>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d12b      	bne.n	8001040 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	4b17      	ldr	r3, [pc, #92]	; (800104c <HAL_UART_MspInit+0x138>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	4a16      	ldr	r2, [pc, #88]	; (800104c <HAL_UART_MspInit+0x138>)
 8000ff2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff8:	4b14      	ldr	r3, [pc, #80]	; (800104c <HAL_UART_MspInit+0x138>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	4b10      	ldr	r3, [pc, #64]	; (800104c <HAL_UART_MspInit+0x138>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100c:	4a0f      	ldr	r2, [pc, #60]	; (800104c <HAL_UART_MspInit+0x138>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	6313      	str	r3, [r2, #48]	; 0x30
 8001014:	4b0d      	ldr	r3, [pc, #52]	; (800104c <HAL_UART_MspInit+0x138>)
 8001016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001020:	230c      	movs	r3, #12
 8001022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102c:	2303      	movs	r3, #3
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001030:	2307      	movs	r3, #7
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001034:	f107 031c 	add.w	r3, r7, #28
 8001038:	4619      	mov	r1, r3
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <HAL_UART_MspInit+0x13c>)
 800103c:	f000 fa32 	bl	80014a4 <HAL_GPIO_Init>
}
 8001040:	bf00      	nop
 8001042:	3730      	adds	r7, #48	; 0x30
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40011000 	.word	0x40011000
 800104c:	40023800 	.word	0x40023800
 8001050:	40020000 	.word	0x40020000
 8001054:	40020400 	.word	0x40020400
 8001058:	40004400 	.word	0x40004400

0800105c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <NMI_Handler+0x4>

08001062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <HardFault_Handler+0x4>

08001068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <MemManage_Handler+0x4>

0800106e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <BusFault_Handler+0x4>

08001074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <UsageFault_Handler+0x4>

0800107a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a8:	f000 f8a6 	bl	80011f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
	 /* USER CODE BEGIN USART1_IRQn 0 */
		//__disable_irq();
		//#pragma GCC diagnostic push;
		//#pragma GCC diagnostic ignored "-Wunused-variable"
		    volatile uint32_t sr = huart1.Instance->SR;
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <USART1_IRQHandler+0x28>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	607b      	str	r3, [r7, #4]
		//#pragma GCC diagnostic pop
		    volatile uint32_t byte = huart1.Instance->DR;
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <USART1_IRQHandler+0x28>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	603b      	str	r3, [r7, #0]
		    //__enable_irq();

		    gps_push_byte(byte);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f005 f829 	bl	8006120 <gps_push_byte>
		    (void)sr;
 80010ce:	687b      	ldr	r3, [r7, #4]


	    return;
 80010d0:	bf00      	nop
	  /* USER CODE END USART1_IRQn 0 */
	  HAL_UART_IRQHandler(&huart1);
	  /* USER CODE BEGIN USART1_IRQn 1 */

	  /* USER CODE END USART1_IRQn 1 */
}
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200006a4 	.word	0x200006a4

080010dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <SystemInit+0x20>)
 80010e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010e6:	4a05      	ldr	r2, [pc, #20]	; (80010fc <SystemInit+0x20>)
 80010e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001100:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001138 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001104:	480d      	ldr	r0, [pc, #52]	; (800113c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001106:	490e      	ldr	r1, [pc, #56]	; (8001140 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001108:	4a0e      	ldr	r2, [pc, #56]	; (8001144 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800110a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800110c:	e002      	b.n	8001114 <LoopCopyDataInit>

0800110e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800110e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001112:	3304      	adds	r3, #4

08001114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001118:	d3f9      	bcc.n	800110e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111a:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800111c:	4c0b      	ldr	r4, [pc, #44]	; (800114c <LoopFillZerobss+0x26>)
  movs r3, #0
 800111e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001120:	e001      	b.n	8001126 <LoopFillZerobss>

08001122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001124:	3204      	adds	r2, #4

08001126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001128:	d3fb      	bcc.n	8001122 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800112a:	f7ff ffd7 	bl	80010dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800112e:	f005 fce7 	bl	8006b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001132:	f7ff fab9 	bl	80006a8 <main>
  bx  lr    
 8001136:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001138:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800113c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001140:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001144:	08006ec0 	.word	0x08006ec0
  ldr r2, =_sbss
 8001148:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800114c:	200028d4 	.word	0x200028d4

08001150 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001150:	e7fe      	b.n	8001150 <ADC_IRQHandler>
	...

08001154 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001158:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <HAL_Init+0x40>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a0d      	ldr	r2, [pc, #52]	; (8001194 <HAL_Init+0x40>)
 800115e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001162:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001164:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <HAL_Init+0x40>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <HAL_Init+0x40>)
 800116a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800116e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <HAL_Init+0x40>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a07      	ldr	r2, [pc, #28]	; (8001194 <HAL_Init+0x40>)
 8001176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800117a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117c:	2003      	movs	r0, #3
 800117e:	f000 f94f 	bl	8001420 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001182:	200f      	movs	r0, #15
 8001184:	f000 f808 	bl	8001198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001188:	f7ff fccc 	bl	8000b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40023c00 	.word	0x40023c00

08001198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_InitTick+0x54>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_InitTick+0x58>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	4619      	mov	r1, r3
 80011aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 f967 	bl	800148a <HAL_SYSTICK_Config>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00e      	b.n	80011e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b0f      	cmp	r3, #15
 80011ca:	d80a      	bhi.n	80011e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011cc:	2200      	movs	r2, #0
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295
 80011d4:	f000 f92f 	bl	8001436 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d8:	4a06      	ldr	r2, [pc, #24]	; (80011f4 <HAL_InitTick+0x5c>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	e000      	b.n	80011e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000000 	.word	0x20000000
 80011f0:	20000008 	.word	0x20000008
 80011f4:	20000004 	.word	0x20000004

080011f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_IncTick+0x20>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_IncTick+0x24>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4413      	add	r3, r2
 8001208:	4a04      	ldr	r2, [pc, #16]	; (800121c <HAL_IncTick+0x24>)
 800120a:	6013      	str	r3, [r2, #0]
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000008 	.word	0x20000008
 800121c:	20000860 	.word	0x20000860

08001220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return uwTick;
 8001224:	4b03      	ldr	r3, [pc, #12]	; (8001234 <HAL_GetTick+0x14>)
 8001226:	681b      	ldr	r3, [r3, #0]
}
 8001228:	4618      	mov	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20000860 	.word	0x20000860

08001238 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001240:	f7ff ffee 	bl	8001220 <HAL_GetTick>
 8001244:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001250:	d005      	beq.n	800125e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <HAL_Delay+0x44>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	461a      	mov	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4413      	add	r3, r2
 800125c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800125e:	bf00      	nop
 8001260:	f7ff ffde 	bl	8001220 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	429a      	cmp	r2, r3
 800126e:	d8f7      	bhi.n	8001260 <HAL_Delay+0x28>
  {
  }
}
 8001270:	bf00      	nop
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000008 	.word	0x20000008

08001280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800129c:	4013      	ands	r3, r2
 800129e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b2:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	60d3      	str	r3, [r2, #12]
}
 80012b8:	bf00      	nop
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	0a1b      	lsrs	r3, r3, #8
 80012d2:	f003 0307 	and.w	r3, r3, #7
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	db0b      	blt.n	800130e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	f003 021f 	and.w	r2, r3, #31
 80012fc:	4907      	ldr	r1, [pc, #28]	; (800131c <__NVIC_EnableIRQ+0x38>)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	095b      	lsrs	r3, r3, #5
 8001304:	2001      	movs	r0, #1
 8001306:	fa00 f202 	lsl.w	r2, r0, r2
 800130a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000e100 	.word	0xe000e100

08001320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001330:	2b00      	cmp	r3, #0
 8001332:	db0a      	blt.n	800134a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	b2da      	uxtb	r2, r3
 8001338:	490c      	ldr	r1, [pc, #48]	; (800136c <__NVIC_SetPriority+0x4c>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	0112      	lsls	r2, r2, #4
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	440b      	add	r3, r1
 8001344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001348:	e00a      	b.n	8001360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4908      	ldr	r1, [pc, #32]	; (8001370 <__NVIC_SetPriority+0x50>)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	3b04      	subs	r3, #4
 8001358:	0112      	lsls	r2, r2, #4
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	440b      	add	r3, r1
 800135e:	761a      	strb	r2, [r3, #24]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000e100 	.word	0xe000e100
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001374:	b480      	push	{r7}
 8001376:	b089      	sub	sp, #36	; 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f1c3 0307 	rsb	r3, r3, #7
 800138e:	2b04      	cmp	r3, #4
 8001390:	bf28      	it	cs
 8001392:	2304      	movcs	r3, #4
 8001394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3304      	adds	r3, #4
 800139a:	2b06      	cmp	r3, #6
 800139c:	d902      	bls.n	80013a4 <NVIC_EncodePriority+0x30>
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3b03      	subs	r3, #3
 80013a2:	e000      	b.n	80013a6 <NVIC_EncodePriority+0x32>
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43da      	mvns	r2, r3
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	401a      	ands	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013bc:	f04f 31ff 	mov.w	r1, #4294967295
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	43d9      	mvns	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	4313      	orrs	r3, r2
         );
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3724      	adds	r7, #36	; 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
	...

080013dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013ec:	d301      	bcc.n	80013f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ee:	2301      	movs	r3, #1
 80013f0:	e00f      	b.n	8001412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <SysTick_Config+0x40>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fa:	210f      	movs	r1, #15
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	f7ff ff8e 	bl	8001320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <SysTick_Config+0x40>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140a:	4b04      	ldr	r3, [pc, #16]	; (800141c <SysTick_Config+0x40>)
 800140c:	2207      	movs	r2, #7
 800140e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	e000e010 	.word	0xe000e010

08001420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ff29 	bl	8001280 <__NVIC_SetPriorityGrouping>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001436:	b580      	push	{r7, lr}
 8001438:	b086      	sub	sp, #24
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	60b9      	str	r1, [r7, #8]
 8001440:	607a      	str	r2, [r7, #4]
 8001442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001448:	f7ff ff3e 	bl	80012c8 <__NVIC_GetPriorityGrouping>
 800144c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	68b9      	ldr	r1, [r7, #8]
 8001452:	6978      	ldr	r0, [r7, #20]
 8001454:	f7ff ff8e 	bl	8001374 <NVIC_EncodePriority>
 8001458:	4602      	mov	r2, r0
 800145a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff5d 	bl	8001320 <__NVIC_SetPriority>
}
 8001466:	bf00      	nop
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	4603      	mov	r3, r0
 8001476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff31 	bl	80012e4 <__NVIC_EnableIRQ>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ffa2 	bl	80013dc <SysTick_Config>
 8001498:	4603      	mov	r3, r0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b089      	sub	sp, #36	; 0x24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
 80014be:	e159      	b.n	8001774 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014c0:	2201      	movs	r2, #1
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	4013      	ands	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	429a      	cmp	r2, r3
 80014da:	f040 8148 	bne.w	800176e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f003 0303 	and.w	r3, r3, #3
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d005      	beq.n	80014f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d130      	bne.n	8001558 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	2203      	movs	r2, #3
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4013      	ands	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	68da      	ldr	r2, [r3, #12]
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4313      	orrs	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800152c:	2201      	movs	r2, #1
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	091b      	lsrs	r3, r3, #4
 8001542:	f003 0201 	and.w	r2, r3, #1
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	2b03      	cmp	r3, #3
 8001562:	d017      	beq.n	8001594 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	2203      	movs	r2, #3
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4013      	ands	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 0303 	and.w	r3, r3, #3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d123      	bne.n	80015e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	08da      	lsrs	r2, r3, #3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3208      	adds	r2, #8
 80015a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	f003 0307 	and.w	r3, r3, #7
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	220f      	movs	r2, #15
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	691a      	ldr	r2, [r3, #16]
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	08da      	lsrs	r2, r3, #3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	3208      	adds	r2, #8
 80015e2:	69b9      	ldr	r1, [r7, #24]
 80015e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	2203      	movs	r2, #3
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0203 	and.w	r2, r3, #3
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 80a2 	beq.w	800176e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	4b57      	ldr	r3, [pc, #348]	; (800178c <HAL_GPIO_Init+0x2e8>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	4a56      	ldr	r2, [pc, #344]	; (800178c <HAL_GPIO_Init+0x2e8>)
 8001634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001638:	6453      	str	r3, [r2, #68]	; 0x44
 800163a:	4b54      	ldr	r3, [pc, #336]	; (800178c <HAL_GPIO_Init+0x2e8>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001646:	4a52      	ldr	r2, [pc, #328]	; (8001790 <HAL_GPIO_Init+0x2ec>)
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	089b      	lsrs	r3, r3, #2
 800164c:	3302      	adds	r3, #2
 800164e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	220f      	movs	r2, #15
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4013      	ands	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a49      	ldr	r2, [pc, #292]	; (8001794 <HAL_GPIO_Init+0x2f0>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d019      	beq.n	80016a6 <HAL_GPIO_Init+0x202>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a48      	ldr	r2, [pc, #288]	; (8001798 <HAL_GPIO_Init+0x2f4>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d013      	beq.n	80016a2 <HAL_GPIO_Init+0x1fe>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a47      	ldr	r2, [pc, #284]	; (800179c <HAL_GPIO_Init+0x2f8>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d00d      	beq.n	800169e <HAL_GPIO_Init+0x1fa>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a46      	ldr	r2, [pc, #280]	; (80017a0 <HAL_GPIO_Init+0x2fc>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d007      	beq.n	800169a <HAL_GPIO_Init+0x1f6>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a45      	ldr	r2, [pc, #276]	; (80017a4 <HAL_GPIO_Init+0x300>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d101      	bne.n	8001696 <HAL_GPIO_Init+0x1f2>
 8001692:	2304      	movs	r3, #4
 8001694:	e008      	b.n	80016a8 <HAL_GPIO_Init+0x204>
 8001696:	2307      	movs	r3, #7
 8001698:	e006      	b.n	80016a8 <HAL_GPIO_Init+0x204>
 800169a:	2303      	movs	r3, #3
 800169c:	e004      	b.n	80016a8 <HAL_GPIO_Init+0x204>
 800169e:	2302      	movs	r3, #2
 80016a0:	e002      	b.n	80016a8 <HAL_GPIO_Init+0x204>
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <HAL_GPIO_Init+0x204>
 80016a6:	2300      	movs	r3, #0
 80016a8:	69fa      	ldr	r2, [r7, #28]
 80016aa:	f002 0203 	and.w	r2, r2, #3
 80016ae:	0092      	lsls	r2, r2, #2
 80016b0:	4093      	lsls	r3, r2
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016b8:	4935      	ldr	r1, [pc, #212]	; (8001790 <HAL_GPIO_Init+0x2ec>)
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	089b      	lsrs	r3, r3, #2
 80016be:	3302      	adds	r3, #2
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016c6:	4b38      	ldr	r3, [pc, #224]	; (80017a8 <HAL_GPIO_Init+0x304>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	43db      	mvns	r3, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016ea:	4a2f      	ldr	r2, [pc, #188]	; (80017a8 <HAL_GPIO_Init+0x304>)
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016f0:	4b2d      	ldr	r3, [pc, #180]	; (80017a8 <HAL_GPIO_Init+0x304>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	43db      	mvns	r3, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4013      	ands	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d003      	beq.n	8001714 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	4313      	orrs	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001714:	4a24      	ldr	r2, [pc, #144]	; (80017a8 <HAL_GPIO_Init+0x304>)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800171a:	4b23      	ldr	r3, [pc, #140]	; (80017a8 <HAL_GPIO_Init+0x304>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	43db      	mvns	r3, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4013      	ands	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800173e:	4a1a      	ldr	r2, [pc, #104]	; (80017a8 <HAL_GPIO_Init+0x304>)
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001744:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <HAL_GPIO_Init+0x304>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001768:	4a0f      	ldr	r2, [pc, #60]	; (80017a8 <HAL_GPIO_Init+0x304>)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	3301      	adds	r3, #1
 8001772:	61fb      	str	r3, [r7, #28]
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	2b0f      	cmp	r3, #15
 8001778:	f67f aea2 	bls.w	80014c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800177c:	bf00      	nop
 800177e:	bf00      	nop
 8001780:	3724      	adds	r7, #36	; 0x24
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800
 8001790:	40013800 	.word	0x40013800
 8001794:	40020000 	.word	0x40020000
 8001798:	40020400 	.word	0x40020400
 800179c:	40020800 	.word	0x40020800
 80017a0:	40020c00 	.word	0x40020c00
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40013c00 	.word	0x40013c00

080017ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	807b      	strh	r3, [r7, #2]
 80017b8:	4613      	mov	r3, r2
 80017ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017bc:	787b      	ldrb	r3, [r7, #1]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017c2:	887a      	ldrh	r2, [r7, #2]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017c8:	e003      	b.n	80017d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017ca:	887b      	ldrh	r3, [r7, #2]
 80017cc:	041a      	lsls	r2, r3, #16
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	619a      	str	r2, [r3, #24]
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e12b      	b.n	8001a4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d106      	bne.n	800180c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff f9b4 	bl	8000b74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2224      	movs	r2, #36	; 0x24
 8001810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 0201 	bic.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001832:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001842:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001844:	f000 fd30 	bl	80022a8 <HAL_RCC_GetPCLK1Freq>
 8001848:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	4a81      	ldr	r2, [pc, #516]	; (8001a54 <HAL_I2C_Init+0x274>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d807      	bhi.n	8001864 <HAL_I2C_Init+0x84>
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4a80      	ldr	r2, [pc, #512]	; (8001a58 <HAL_I2C_Init+0x278>)
 8001858:	4293      	cmp	r3, r2
 800185a:	bf94      	ite	ls
 800185c:	2301      	movls	r3, #1
 800185e:	2300      	movhi	r3, #0
 8001860:	b2db      	uxtb	r3, r3
 8001862:	e006      	b.n	8001872 <HAL_I2C_Init+0x92>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4a7d      	ldr	r2, [pc, #500]	; (8001a5c <HAL_I2C_Init+0x27c>)
 8001868:	4293      	cmp	r3, r2
 800186a:	bf94      	ite	ls
 800186c:	2301      	movls	r3, #1
 800186e:	2300      	movhi	r3, #0
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e0e7      	b.n	8001a4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4a78      	ldr	r2, [pc, #480]	; (8001a60 <HAL_I2C_Init+0x280>)
 800187e:	fba2 2303 	umull	r2, r3, r2, r3
 8001882:	0c9b      	lsrs	r3, r3, #18
 8001884:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	68ba      	ldr	r2, [r7, #8]
 8001896:	430a      	orrs	r2, r1
 8001898:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	4a6a      	ldr	r2, [pc, #424]	; (8001a54 <HAL_I2C_Init+0x274>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d802      	bhi.n	80018b4 <HAL_I2C_Init+0xd4>
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	3301      	adds	r3, #1
 80018b2:	e009      	b.n	80018c8 <HAL_I2C_Init+0xe8>
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018ba:	fb02 f303 	mul.w	r3, r2, r3
 80018be:	4a69      	ldr	r2, [pc, #420]	; (8001a64 <HAL_I2C_Init+0x284>)
 80018c0:	fba2 2303 	umull	r2, r3, r2, r3
 80018c4:	099b      	lsrs	r3, r3, #6
 80018c6:	3301      	adds	r3, #1
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	430b      	orrs	r3, r1
 80018ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	495c      	ldr	r1, [pc, #368]	; (8001a54 <HAL_I2C_Init+0x274>)
 80018e4:	428b      	cmp	r3, r1
 80018e6:	d819      	bhi.n	800191c <HAL_I2C_Init+0x13c>
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	1e59      	subs	r1, r3, #1
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80018f6:	1c59      	adds	r1, r3, #1
 80018f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80018fc:	400b      	ands	r3, r1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00a      	beq.n	8001918 <HAL_I2C_Init+0x138>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	1e59      	subs	r1, r3, #1
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001910:	3301      	adds	r3, #1
 8001912:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001916:	e051      	b.n	80019bc <HAL_I2C_Init+0x1dc>
 8001918:	2304      	movs	r3, #4
 800191a:	e04f      	b.n	80019bc <HAL_I2C_Init+0x1dc>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d111      	bne.n	8001948 <HAL_I2C_Init+0x168>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	1e58      	subs	r0, r3, #1
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6859      	ldr	r1, [r3, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	440b      	add	r3, r1
 8001932:	fbb0 f3f3 	udiv	r3, r0, r3
 8001936:	3301      	adds	r3, #1
 8001938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800193c:	2b00      	cmp	r3, #0
 800193e:	bf0c      	ite	eq
 8001940:	2301      	moveq	r3, #1
 8001942:	2300      	movne	r3, #0
 8001944:	b2db      	uxtb	r3, r3
 8001946:	e012      	b.n	800196e <HAL_I2C_Init+0x18e>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	1e58      	subs	r0, r3, #1
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6859      	ldr	r1, [r3, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	0099      	lsls	r1, r3, #2
 8001958:	440b      	add	r3, r1
 800195a:	fbb0 f3f3 	udiv	r3, r0, r3
 800195e:	3301      	adds	r3, #1
 8001960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001964:	2b00      	cmp	r3, #0
 8001966:	bf0c      	ite	eq
 8001968:	2301      	moveq	r3, #1
 800196a:	2300      	movne	r3, #0
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_I2C_Init+0x196>
 8001972:	2301      	movs	r3, #1
 8001974:	e022      	b.n	80019bc <HAL_I2C_Init+0x1dc>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10e      	bne.n	800199c <HAL_I2C_Init+0x1bc>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	1e58      	subs	r0, r3, #1
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6859      	ldr	r1, [r3, #4]
 8001986:	460b      	mov	r3, r1
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	440b      	add	r3, r1
 800198c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001990:	3301      	adds	r3, #1
 8001992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800199a:	e00f      	b.n	80019bc <HAL_I2C_Init+0x1dc>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	1e58      	subs	r0, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6859      	ldr	r1, [r3, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	440b      	add	r3, r1
 80019aa:	0099      	lsls	r1, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80019b2:	3301      	adds	r3, #1
 80019b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	6809      	ldr	r1, [r1, #0]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69da      	ldr	r2, [r3, #28]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6911      	ldr	r1, [r2, #16]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	68d2      	ldr	r2, [r2, #12]
 80019f6:	4311      	orrs	r1, r2
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	430b      	orrs	r3, r1
 80019fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695a      	ldr	r2, [r3, #20]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	431a      	orrs	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 0201 	orr.w	r2, r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2220      	movs	r2, #32
 8001a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	000186a0 	.word	0x000186a0
 8001a58:	001e847f 	.word	0x001e847f
 8001a5c:	003d08ff 	.word	0x003d08ff
 8001a60:	431bde83 	.word	0x431bde83
 8001a64:	10624dd3 	.word	0x10624dd3

08001a68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e264      	b.n	8001f44 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d075      	beq.n	8001b72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a86:	4ba3      	ldr	r3, [pc, #652]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	d00c      	beq.n	8001aac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a92:	4ba0      	ldr	r3, [pc, #640]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a9a:	2b08      	cmp	r3, #8
 8001a9c:	d112      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a9e:	4b9d      	ldr	r3, [pc, #628]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001aaa:	d10b      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aac:	4b99      	ldr	r3, [pc, #612]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d05b      	beq.n	8001b70 <HAL_RCC_OscConfig+0x108>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d157      	bne.n	8001b70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e23f      	b.n	8001f44 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001acc:	d106      	bne.n	8001adc <HAL_RCC_OscConfig+0x74>
 8001ace:	4b91      	ldr	r3, [pc, #580]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a90      	ldr	r2, [pc, #576]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	e01d      	b.n	8001b18 <HAL_RCC_OscConfig+0xb0>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ae4:	d10c      	bne.n	8001b00 <HAL_RCC_OscConfig+0x98>
 8001ae6:	4b8b      	ldr	r3, [pc, #556]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a8a      	ldr	r2, [pc, #552]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	4b88      	ldr	r3, [pc, #544]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a87      	ldr	r2, [pc, #540]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	e00b      	b.n	8001b18 <HAL_RCC_OscConfig+0xb0>
 8001b00:	4b84      	ldr	r3, [pc, #528]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a83      	ldr	r2, [pc, #524]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	4b81      	ldr	r3, [pc, #516]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a80      	ldr	r2, [pc, #512]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d013      	beq.n	8001b48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b20:	f7ff fb7e 	bl	8001220 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b28:	f7ff fb7a 	bl	8001220 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b64      	cmp	r3, #100	; 0x64
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e204      	b.n	8001f44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3a:	4b76      	ldr	r3, [pc, #472]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f0      	beq.n	8001b28 <HAL_RCC_OscConfig+0xc0>
 8001b46:	e014      	b.n	8001b72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7ff fb6a 	bl	8001220 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b50:	f7ff fb66 	bl	8001220 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b64      	cmp	r3, #100	; 0x64
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e1f0      	b.n	8001f44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b62:	4b6c      	ldr	r3, [pc, #432]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0xe8>
 8001b6e:	e000      	b.n	8001b72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d063      	beq.n	8001c46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b7e:	4b65      	ldr	r3, [pc, #404]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 030c 	and.w	r3, r3, #12
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00b      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b8a:	4b62      	ldr	r3, [pc, #392]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b92:	2b08      	cmp	r3, #8
 8001b94:	d11c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b96:	4b5f      	ldr	r3, [pc, #380]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d116      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba2:	4b5c      	ldr	r3, [pc, #368]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d005      	beq.n	8001bba <HAL_RCC_OscConfig+0x152>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d001      	beq.n	8001bba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e1c4      	b.n	8001f44 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bba:	4b56      	ldr	r3, [pc, #344]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	4952      	ldr	r1, [pc, #328]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bce:	e03a      	b.n	8001c46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d020      	beq.n	8001c1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bd8:	4b4f      	ldr	r3, [pc, #316]	; (8001d18 <HAL_RCC_OscConfig+0x2b0>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bde:	f7ff fb1f 	bl	8001220 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001be6:	f7ff fb1b 	bl	8001220 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e1a5      	b.n	8001f44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf8:	4b46      	ldr	r3, [pc, #280]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0f0      	beq.n	8001be6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c04:	4b43      	ldr	r3, [pc, #268]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	4940      	ldr	r1, [pc, #256]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	600b      	str	r3, [r1, #0]
 8001c18:	e015      	b.n	8001c46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c1a:	4b3f      	ldr	r3, [pc, #252]	; (8001d18 <HAL_RCC_OscConfig+0x2b0>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c20:	f7ff fafe 	bl	8001220 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c28:	f7ff fafa 	bl	8001220 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e184      	b.n	8001f44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3a:	4b36      	ldr	r3, [pc, #216]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d030      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d016      	beq.n	8001c88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c5a:	4b30      	ldr	r3, [pc, #192]	; (8001d1c <HAL_RCC_OscConfig+0x2b4>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c60:	f7ff fade 	bl	8001220 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c68:	f7ff fada 	bl	8001220 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e164      	b.n	8001f44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7a:	4b26      	ldr	r3, [pc, #152]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f0      	beq.n	8001c68 <HAL_RCC_OscConfig+0x200>
 8001c86:	e015      	b.n	8001cb4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c88:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <HAL_RCC_OscConfig+0x2b4>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8e:	f7ff fac7 	bl	8001220 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c96:	f7ff fac3 	bl	8001220 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e14d      	b.n	8001f44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca8:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1f0      	bne.n	8001c96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 80a0 	beq.w	8001e02 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cc6:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10f      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	4a0e      	ldr	r2, [pc, #56]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <HAL_RCC_OscConfig+0x2b8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d121      	bne.n	8001d42 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cfe:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <HAL_RCC_OscConfig+0x2b8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a07      	ldr	r2, [pc, #28]	; (8001d20 <HAL_RCC_OscConfig+0x2b8>)
 8001d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d0a:	f7ff fa89 	bl	8001220 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d10:	e011      	b.n	8001d36 <HAL_RCC_OscConfig+0x2ce>
 8001d12:	bf00      	nop
 8001d14:	40023800 	.word	0x40023800
 8001d18:	42470000 	.word	0x42470000
 8001d1c:	42470e80 	.word	0x42470e80
 8001d20:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d24:	f7ff fa7c 	bl	8001220 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e106      	b.n	8001f44 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d36:	4b85      	ldr	r3, [pc, #532]	; (8001f4c <HAL_RCC_OscConfig+0x4e4>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d106      	bne.n	8001d58 <HAL_RCC_OscConfig+0x2f0>
 8001d4a:	4b81      	ldr	r3, [pc, #516]	; (8001f50 <HAL_RCC_OscConfig+0x4e8>)
 8001d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4e:	4a80      	ldr	r2, [pc, #512]	; (8001f50 <HAL_RCC_OscConfig+0x4e8>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	6713      	str	r3, [r2, #112]	; 0x70
 8001d56:	e01c      	b.n	8001d92 <HAL_RCC_OscConfig+0x32a>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	2b05      	cmp	r3, #5
 8001d5e:	d10c      	bne.n	8001d7a <HAL_RCC_OscConfig+0x312>
 8001d60:	4b7b      	ldr	r3, [pc, #492]	; (8001f50 <HAL_RCC_OscConfig+0x4e8>)
 8001d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d64:	4a7a      	ldr	r2, [pc, #488]	; (8001f50 <HAL_RCC_OscConfig+0x4e8>)
 8001d66:	f043 0304 	orr.w	r3, r3, #4
 8001d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d6c:	4b78      	ldr	r3, [pc, #480]	; (8001f50 <HAL_RCC_OscConfig+0x4e8>)
 8001d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d70:	4a77      	ldr	r2, [pc, #476]	; (8001f50 <HAL_RCC_OscConfig+0x4e8>)
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	6713      	str	r3, [r2, #112]	; 0x70
 8001d78:	e00b      	b.n	8001d92 <HAL_RCC_OscConfig+0x32a>
 8001d7a:	4b75      	ldr	r3, [pc, #468]	; (8001f50 <HAL_RCC_OscConfig+0x4e8>)
 8001d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7e:	4a74      	ldr	r2, [pc, #464]	; (8001f50 <HAL_RCC_OscConfig+0x4e8>)
 8001d80:	f023 0301 	bic.w	r3, r3, #1
 8001d84:	6713      	str	r3, [r2, #112]	; 0x70
 8001d86:	4b72      	ldr	r3, [pc, #456]	; (8001f50 <HAL_RCC_OscConfig+0x4e8>)
 8001d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8a:	4a71      	ldr	r2, [pc, #452]	; (8001f50 <HAL_RCC_OscConfig+0x4e8>)
 8001d8c:	f023 0304 	bic.w	r3, r3, #4
 8001d90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d015      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d9a:	f7ff fa41 	bl	8001220 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da0:	e00a      	b.n	8001db8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001da2:	f7ff fa3d 	bl	8001220 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e0c5      	b.n	8001f44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db8:	4b65      	ldr	r3, [pc, #404]	; (8001f50 <HAL_RCC_OscConfig+0x4e8>)
 8001dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0ee      	beq.n	8001da2 <HAL_RCC_OscConfig+0x33a>
 8001dc4:	e014      	b.n	8001df0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc6:	f7ff fa2b 	bl	8001220 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dcc:	e00a      	b.n	8001de4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dce:	f7ff fa27 	bl	8001220 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e0af      	b.n	8001f44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de4:	4b5a      	ldr	r3, [pc, #360]	; (8001f50 <HAL_RCC_OscConfig+0x4e8>)
 8001de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1ee      	bne.n	8001dce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001df0:	7dfb      	ldrb	r3, [r7, #23]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d105      	bne.n	8001e02 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001df6:	4b56      	ldr	r3, [pc, #344]	; (8001f50 <HAL_RCC_OscConfig+0x4e8>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	4a55      	ldr	r2, [pc, #340]	; (8001f50 <HAL_RCC_OscConfig+0x4e8>)
 8001dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 809b 	beq.w	8001f42 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e0c:	4b50      	ldr	r3, [pc, #320]	; (8001f50 <HAL_RCC_OscConfig+0x4e8>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 030c 	and.w	r3, r3, #12
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d05c      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d141      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e20:	4b4c      	ldr	r3, [pc, #304]	; (8001f54 <HAL_RCC_OscConfig+0x4ec>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e26:	f7ff f9fb 	bl	8001220 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e2e:	f7ff f9f7 	bl	8001220 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e081      	b.n	8001f44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e40:	4b43      	ldr	r3, [pc, #268]	; (8001f50 <HAL_RCC_OscConfig+0x4e8>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1f0      	bne.n	8001e2e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69da      	ldr	r2, [r3, #28]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	431a      	orrs	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	019b      	lsls	r3, r3, #6
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e62:	085b      	lsrs	r3, r3, #1
 8001e64:	3b01      	subs	r3, #1
 8001e66:	041b      	lsls	r3, r3, #16
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6e:	061b      	lsls	r3, r3, #24
 8001e70:	4937      	ldr	r1, [pc, #220]	; (8001f50 <HAL_RCC_OscConfig+0x4e8>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e76:	4b37      	ldr	r3, [pc, #220]	; (8001f54 <HAL_RCC_OscConfig+0x4ec>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7c:	f7ff f9d0 	bl	8001220 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e84:	f7ff f9cc 	bl	8001220 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e056      	b.n	8001f44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e96:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <HAL_RCC_OscConfig+0x4e8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCC_OscConfig+0x41c>
 8001ea2:	e04e      	b.n	8001f42 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea4:	4b2b      	ldr	r3, [pc, #172]	; (8001f54 <HAL_RCC_OscConfig+0x4ec>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eaa:	f7ff f9b9 	bl	8001220 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb2:	f7ff f9b5 	bl	8001220 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e03f      	b.n	8001f44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec4:	4b22      	ldr	r3, [pc, #136]	; (8001f50 <HAL_RCC_OscConfig+0x4e8>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1f0      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x44a>
 8001ed0:	e037      	b.n	8001f42 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e032      	b.n	8001f44 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ede:	4b1c      	ldr	r3, [pc, #112]	; (8001f50 <HAL_RCC_OscConfig+0x4e8>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d028      	beq.n	8001f3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d121      	bne.n	8001f3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d11a      	bne.n	8001f3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f0e:	4013      	ands	r3, r2
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f14:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d111      	bne.n	8001f3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f24:	085b      	lsrs	r3, r3, #1
 8001f26:	3b01      	subs	r3, #1
 8001f28:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d107      	bne.n	8001f3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f38:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d001      	beq.n	8001f42 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40007000 	.word	0x40007000
 8001f50:	40023800 	.word	0x40023800
 8001f54:	42470060 	.word	0x42470060

08001f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0cc      	b.n	8002106 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f6c:	4b68      	ldr	r3, [pc, #416]	; (8002110 <HAL_RCC_ClockConfig+0x1b8>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d90c      	bls.n	8001f94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7a:	4b65      	ldr	r3, [pc, #404]	; (8002110 <HAL_RCC_ClockConfig+0x1b8>)
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f82:	4b63      	ldr	r3, [pc, #396]	; (8002110 <HAL_RCC_ClockConfig+0x1b8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0b8      	b.n	8002106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d020      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d005      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fac:	4b59      	ldr	r3, [pc, #356]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	4a58      	ldr	r2, [pc, #352]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0308 	and.w	r3, r3, #8
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fc4:	4b53      	ldr	r3, [pc, #332]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	4a52      	ldr	r2, [pc, #328]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8001fca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd0:	4b50      	ldr	r3, [pc, #320]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	494d      	ldr	r1, [pc, #308]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d044      	beq.n	8002078 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d107      	bne.n	8002006 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff6:	4b47      	ldr	r3, [pc, #284]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d119      	bne.n	8002036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e07f      	b.n	8002106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b02      	cmp	r3, #2
 800200c:	d003      	beq.n	8002016 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002012:	2b03      	cmp	r3, #3
 8002014:	d107      	bne.n	8002026 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002016:	4b3f      	ldr	r3, [pc, #252]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d109      	bne.n	8002036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e06f      	b.n	8002106 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002026:	4b3b      	ldr	r3, [pc, #236]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e067      	b.n	8002106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002036:	4b37      	ldr	r3, [pc, #220]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f023 0203 	bic.w	r2, r3, #3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	4934      	ldr	r1, [pc, #208]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8002044:	4313      	orrs	r3, r2
 8002046:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002048:	f7ff f8ea 	bl	8001220 <HAL_GetTick>
 800204c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204e:	e00a      	b.n	8002066 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002050:	f7ff f8e6 	bl	8001220 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	f241 3288 	movw	r2, #5000	; 0x1388
 800205e:	4293      	cmp	r3, r2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e04f      	b.n	8002106 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002066:	4b2b      	ldr	r3, [pc, #172]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 020c 	and.w	r2, r3, #12
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	429a      	cmp	r2, r3
 8002076:	d1eb      	bne.n	8002050 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002078:	4b25      	ldr	r3, [pc, #148]	; (8002110 <HAL_RCC_ClockConfig+0x1b8>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	429a      	cmp	r2, r3
 8002084:	d20c      	bcs.n	80020a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002086:	4b22      	ldr	r3, [pc, #136]	; (8002110 <HAL_RCC_ClockConfig+0x1b8>)
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800208e:	4b20      	ldr	r3, [pc, #128]	; (8002110 <HAL_RCC_ClockConfig+0x1b8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	429a      	cmp	r2, r3
 800209a:	d001      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e032      	b.n	8002106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d008      	beq.n	80020be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020ac:	4b19      	ldr	r3, [pc, #100]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4916      	ldr	r1, [pc, #88]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d009      	beq.n	80020de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ca:	4b12      	ldr	r3, [pc, #72]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	490e      	ldr	r1, [pc, #56]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020de:	f000 f821 	bl	8002124 <HAL_RCC_GetSysClockFreq>
 80020e2:	4602      	mov	r2, r0
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	091b      	lsrs	r3, r3, #4
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	490a      	ldr	r1, [pc, #40]	; (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 80020f0:	5ccb      	ldrb	r3, [r1, r3]
 80020f2:	fa22 f303 	lsr.w	r3, r2, r3
 80020f6:	4a09      	ldr	r2, [pc, #36]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 80020f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020fa:	4b09      	ldr	r3, [pc, #36]	; (8002120 <HAL_RCC_ClockConfig+0x1c8>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff f84a 	bl	8001198 <HAL_InitTick>

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40023c00 	.word	0x40023c00
 8002114:	40023800 	.word	0x40023800
 8002118:	08006d20 	.word	0x08006d20
 800211c:	20000000 	.word	0x20000000
 8002120:	20000004 	.word	0x20000004

08002124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002124:	b5b0      	push	{r4, r5, r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800212a:	2100      	movs	r1, #0
 800212c:	6079      	str	r1, [r7, #4]
 800212e:	2100      	movs	r1, #0
 8002130:	60f9      	str	r1, [r7, #12]
 8002132:	2100      	movs	r1, #0
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002136:	2100      	movs	r1, #0
 8002138:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800213a:	4952      	ldr	r1, [pc, #328]	; (8002284 <HAL_RCC_GetSysClockFreq+0x160>)
 800213c:	6889      	ldr	r1, [r1, #8]
 800213e:	f001 010c 	and.w	r1, r1, #12
 8002142:	2908      	cmp	r1, #8
 8002144:	d00d      	beq.n	8002162 <HAL_RCC_GetSysClockFreq+0x3e>
 8002146:	2908      	cmp	r1, #8
 8002148:	f200 8094 	bhi.w	8002274 <HAL_RCC_GetSysClockFreq+0x150>
 800214c:	2900      	cmp	r1, #0
 800214e:	d002      	beq.n	8002156 <HAL_RCC_GetSysClockFreq+0x32>
 8002150:	2904      	cmp	r1, #4
 8002152:	d003      	beq.n	800215c <HAL_RCC_GetSysClockFreq+0x38>
 8002154:	e08e      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002156:	4b4c      	ldr	r3, [pc, #304]	; (8002288 <HAL_RCC_GetSysClockFreq+0x164>)
 8002158:	60bb      	str	r3, [r7, #8]
       break;
 800215a:	e08e      	b.n	800227a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800215c:	4b4b      	ldr	r3, [pc, #300]	; (800228c <HAL_RCC_GetSysClockFreq+0x168>)
 800215e:	60bb      	str	r3, [r7, #8]
      break;
 8002160:	e08b      	b.n	800227a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002162:	4948      	ldr	r1, [pc, #288]	; (8002284 <HAL_RCC_GetSysClockFreq+0x160>)
 8002164:	6849      	ldr	r1, [r1, #4]
 8002166:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800216a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800216c:	4945      	ldr	r1, [pc, #276]	; (8002284 <HAL_RCC_GetSysClockFreq+0x160>)
 800216e:	6849      	ldr	r1, [r1, #4]
 8002170:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002174:	2900      	cmp	r1, #0
 8002176:	d024      	beq.n	80021c2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002178:	4942      	ldr	r1, [pc, #264]	; (8002284 <HAL_RCC_GetSysClockFreq+0x160>)
 800217a:	6849      	ldr	r1, [r1, #4]
 800217c:	0989      	lsrs	r1, r1, #6
 800217e:	4608      	mov	r0, r1
 8002180:	f04f 0100 	mov.w	r1, #0
 8002184:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002188:	f04f 0500 	mov.w	r5, #0
 800218c:	ea00 0204 	and.w	r2, r0, r4
 8002190:	ea01 0305 	and.w	r3, r1, r5
 8002194:	493d      	ldr	r1, [pc, #244]	; (800228c <HAL_RCC_GetSysClockFreq+0x168>)
 8002196:	fb01 f003 	mul.w	r0, r1, r3
 800219a:	2100      	movs	r1, #0
 800219c:	fb01 f102 	mul.w	r1, r1, r2
 80021a0:	1844      	adds	r4, r0, r1
 80021a2:	493a      	ldr	r1, [pc, #232]	; (800228c <HAL_RCC_GetSysClockFreq+0x168>)
 80021a4:	fba2 0101 	umull	r0, r1, r2, r1
 80021a8:	1863      	adds	r3, r4, r1
 80021aa:	4619      	mov	r1, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	461a      	mov	r2, r3
 80021b0:	f04f 0300 	mov.w	r3, #0
 80021b4:	f7fe f822 	bl	80001fc <__aeabi_uldivmod>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4613      	mov	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	e04a      	b.n	8002258 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021c2:	4b30      	ldr	r3, [pc, #192]	; (8002284 <HAL_RCC_GetSysClockFreq+0x160>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	099b      	lsrs	r3, r3, #6
 80021c8:	461a      	mov	r2, r3
 80021ca:	f04f 0300 	mov.w	r3, #0
 80021ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80021d2:	f04f 0100 	mov.w	r1, #0
 80021d6:	ea02 0400 	and.w	r4, r2, r0
 80021da:	ea03 0501 	and.w	r5, r3, r1
 80021de:	4620      	mov	r0, r4
 80021e0:	4629      	mov	r1, r5
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	f04f 0300 	mov.w	r3, #0
 80021ea:	014b      	lsls	r3, r1, #5
 80021ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80021f0:	0142      	lsls	r2, r0, #5
 80021f2:	4610      	mov	r0, r2
 80021f4:	4619      	mov	r1, r3
 80021f6:	1b00      	subs	r0, r0, r4
 80021f8:	eb61 0105 	sbc.w	r1, r1, r5
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	f04f 0300 	mov.w	r3, #0
 8002204:	018b      	lsls	r3, r1, #6
 8002206:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800220a:	0182      	lsls	r2, r0, #6
 800220c:	1a12      	subs	r2, r2, r0
 800220e:	eb63 0301 	sbc.w	r3, r3, r1
 8002212:	f04f 0000 	mov.w	r0, #0
 8002216:	f04f 0100 	mov.w	r1, #0
 800221a:	00d9      	lsls	r1, r3, #3
 800221c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002220:	00d0      	lsls	r0, r2, #3
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	1912      	adds	r2, r2, r4
 8002228:	eb45 0303 	adc.w	r3, r5, r3
 800222c:	f04f 0000 	mov.w	r0, #0
 8002230:	f04f 0100 	mov.w	r1, #0
 8002234:	0299      	lsls	r1, r3, #10
 8002236:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800223a:	0290      	lsls	r0, r2, #10
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	4610      	mov	r0, r2
 8002242:	4619      	mov	r1, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	461a      	mov	r2, r3
 8002248:	f04f 0300 	mov.w	r3, #0
 800224c:	f7fd ffd6 	bl	80001fc <__aeabi_uldivmod>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	4613      	mov	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002258:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <HAL_RCC_GetSysClockFreq+0x160>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	0c1b      	lsrs	r3, r3, #16
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	3301      	adds	r3, #1
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002270:	60bb      	str	r3, [r7, #8]
      break;
 8002272:	e002      	b.n	800227a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002274:	4b04      	ldr	r3, [pc, #16]	; (8002288 <HAL_RCC_GetSysClockFreq+0x164>)
 8002276:	60bb      	str	r3, [r7, #8]
      break;
 8002278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800227a:	68bb      	ldr	r3, [r7, #8]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bdb0      	pop	{r4, r5, r7, pc}
 8002284:	40023800 	.word	0x40023800
 8002288:	00f42400 	.word	0x00f42400
 800228c:	017d7840 	.word	0x017d7840

08002290 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002294:	4b03      	ldr	r3, [pc, #12]	; (80022a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002296:	681b      	ldr	r3, [r3, #0]
}
 8002298:	4618      	mov	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	20000000 	.word	0x20000000

080022a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022ac:	f7ff fff0 	bl	8002290 <HAL_RCC_GetHCLKFreq>
 80022b0:	4602      	mov	r2, r0
 80022b2:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	0a9b      	lsrs	r3, r3, #10
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	4903      	ldr	r1, [pc, #12]	; (80022cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80022be:	5ccb      	ldrb	r3, [r1, r3]
 80022c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40023800 	.word	0x40023800
 80022cc:	08006d30 	.word	0x08006d30

080022d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80022d4:	f7ff ffdc 	bl	8002290 <HAL_RCC_GetHCLKFreq>
 80022d8:	4602      	mov	r2, r0
 80022da:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	0b5b      	lsrs	r3, r3, #13
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	4903      	ldr	r1, [pc, #12]	; (80022f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022e6:	5ccb      	ldrb	r3, [r1, r3]
 80022e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40023800 	.word	0x40023800
 80022f4:	08006d30 	.word	0x08006d30

080022f8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e022      	b.n	8002350 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d105      	bne.n	8002322 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7fe fc71 	bl	8000c04 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2203      	movs	r2, #3
 8002326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f814 	bl	8002358 <HAL_SD_InitCard>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e00a      	b.n	8002350 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002358:	b5b0      	push	{r4, r5, r7, lr}
 800235a:	b08e      	sub	sp, #56	; 0x38
 800235c:	af04      	add	r7, sp, #16
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002360:	2300      	movs	r3, #0
 8002362:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002364:	2300      	movs	r3, #0
 8002366:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002368:	2300      	movs	r3, #0
 800236a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002370:	2300      	movs	r3, #0
 8002372:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002374:	2376      	movs	r3, #118	; 0x76
 8002376:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681d      	ldr	r5, [r3, #0]
 800237c:	466c      	mov	r4, sp
 800237e:	f107 0314 	add.w	r3, r7, #20
 8002382:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002386:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800238a:	f107 0308 	add.w	r3, r7, #8
 800238e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002390:	4628      	mov	r0, r5
 8002392:	f002 f8f7 	bl	8004584 <SDIO_Init>
 8002396:	4603      	mov	r3, r0
 8002398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800239c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e04c      	b.n	8002442 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80023a8:	4b28      	ldr	r3, [pc, #160]	; (800244c <HAL_SD_InitCard+0xf4>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f002 f92f 	bl	8004616 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80023b8:	4b24      	ldr	r3, [pc, #144]	; (800244c <HAL_SD_InitCard+0xf4>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 ff02 	bl	80031c8 <SD_PowerON>
 80023c4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00b      	beq.n	80023e4 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023d8:	6a3b      	ldr	r3, [r7, #32]
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e02e      	b.n	8002442 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 fe23 	bl	8003030 <SD_InitCard>
 80023ea:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80023ec:	6a3b      	ldr	r3, [r7, #32]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00b      	beq.n	800240a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	431a      	orrs	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e01b      	b.n	8002442 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002412:	4618      	mov	r0, r3
 8002414:	f002 f992 	bl	800473c <SDMMC_CmdBlockLength>
 8002418:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00f      	beq.n	8002440 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <HAL_SD_InitCard+0xf8>)
 8002426:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e000      	b.n	8002442 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3728      	adds	r7, #40	; 0x28
 8002446:	46bd      	mov	sp, r7
 8002448:	bdb0      	pop	{r4, r5, r7, pc}
 800244a:	bf00      	nop
 800244c:	422580a0 	.word	0x422580a0
 8002450:	004005ff 	.word	0x004005ff

08002454 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b092      	sub	sp, #72	; 0x48
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
 8002460:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002462:	f7fe fedd 	bl	8001220 <HAL_GetTick>
 8002466:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d107      	bne.n	8002486 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e1bd      	b.n	8002802 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b01      	cmp	r3, #1
 8002490:	f040 81b0 	bne.w	80027f4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800249a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	441a      	add	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d907      	bls.n	80024b8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ac:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e1a4      	b.n	8002802 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2203      	movs	r2, #3
 80024bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2200      	movs	r2, #0
 80024c6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d002      	beq.n	80024d6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80024d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d2:	025b      	lsls	r3, r3, #9
 80024d4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80024d6:	f04f 33ff 	mov.w	r3, #4294967295
 80024da:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	025b      	lsls	r3, r3, #9
 80024e0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80024e2:	2390      	movs	r3, #144	; 0x90
 80024e4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80024e6:	2302      	movs	r3, #2
 80024e8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80024ee:	2301      	movs	r3, #1
 80024f0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f107 0214 	add.w	r2, r7, #20
 80024fa:	4611      	mov	r1, r2
 80024fc:	4618      	mov	r0, r3
 80024fe:	f002 f8f1 	bl	80046e4 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d90a      	bls.n	800251e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2202      	movs	r2, #2
 800250c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002514:	4618      	mov	r0, r3
 8002516:	f002 f955 	bl	80047c4 <SDMMC_CmdReadMultiBlock>
 800251a:	6478      	str	r0, [r7, #68]	; 0x44
 800251c:	e009      	b.n	8002532 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2201      	movs	r2, #1
 8002522:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800252a:	4618      	mov	r0, r3
 800252c:	f002 f928 	bl	8004780 <SDMMC_CmdReadSingleBlock>
 8002530:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002534:	2b00      	cmp	r3, #0
 8002536:	d012      	beq.n	800255e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a7a      	ldr	r2, [pc, #488]	; (8002728 <HAL_SD_ReadBlocks+0x2d4>)
 800253e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002546:	431a      	orrs	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e151      	b.n	8002802 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002562:	e061      	b.n	8002628 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d03c      	beq.n	80025ec <HAL_SD_ReadBlocks+0x198>
 8002572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002574:	2b00      	cmp	r3, #0
 8002576:	d039      	beq.n	80025ec <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002578:	2300      	movs	r3, #0
 800257a:	643b      	str	r3, [r7, #64]	; 0x40
 800257c:	e033      	b.n	80025e6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f002 f829 	bl	80045da <SDIO_ReadFIFO>
 8002588:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800258a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800258c:	b2da      	uxtb	r2, r3
 800258e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002590:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002594:	3301      	adds	r3, #1
 8002596:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800259a:	3b01      	subs	r3, #1
 800259c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800259e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a0:	0a1b      	lsrs	r3, r3, #8
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80025a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025aa:	3301      	adds	r3, #1
 80025ac:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80025ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025b0:	3b01      	subs	r3, #1
 80025b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80025b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b6:	0c1b      	lsrs	r3, r3, #16
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025bc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80025be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c0:	3301      	adds	r3, #1
 80025c2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80025c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025c6:	3b01      	subs	r3, #1
 80025c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80025ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025cc:	0e1b      	lsrs	r3, r3, #24
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80025d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d6:	3301      	adds	r3, #1
 80025d8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80025da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025dc:	3b01      	subs	r3, #1
 80025de:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80025e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025e2:	3301      	adds	r3, #1
 80025e4:	643b      	str	r3, [r7, #64]	; 0x40
 80025e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025e8:	2b07      	cmp	r3, #7
 80025ea:	d9c8      	bls.n	800257e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80025ec:	f7fe fe18 	bl	8001220 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d902      	bls.n	8002602 <HAL_SD_ReadBlocks+0x1ae>
 80025fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d112      	bne.n	8002628 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a48      	ldr	r2, [pc, #288]	; (8002728 <HAL_SD_ReadBlocks+0x2d4>)
 8002608:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e0ec      	b.n	8002802 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800262e:	f240 332a 	movw	r3, #810	; 0x32a
 8002632:	4013      	ands	r3, r2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d095      	beq.n	8002564 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800263e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002642:	2b00      	cmp	r3, #0
 8002644:	d022      	beq.n	800268c <HAL_SD_ReadBlocks+0x238>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d91f      	bls.n	800268c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002650:	2b03      	cmp	r3, #3
 8002652:	d01b      	beq.n	800268c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f002 f919 	bl	8004890 <SDMMC_CmdStopTransfer>
 800265e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002662:	2b00      	cmp	r3, #0
 8002664:	d012      	beq.n	800268c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a2f      	ldr	r2, [pc, #188]	; (8002728 <HAL_SD_ReadBlocks+0x2d4>)
 800266c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002674:	431a      	orrs	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0ba      	b.n	8002802 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d012      	beq.n	80026c0 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a22      	ldr	r2, [pc, #136]	; (8002728 <HAL_SD_ReadBlocks+0x2d4>)
 80026a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a6:	f043 0208 	orr.w	r2, r3, #8
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0a0      	b.n	8002802 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d012      	beq.n	80026f4 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a15      	ldr	r2, [pc, #84]	; (8002728 <HAL_SD_ReadBlocks+0x2d4>)
 80026d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026da:	f043 0202 	orr.w	r2, r3, #2
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e086      	b.n	8002802 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026fa:	f003 0320 	and.w	r3, r3, #32
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d063      	beq.n	80027ca <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a08      	ldr	r2, [pc, #32]	; (8002728 <HAL_SD_ReadBlocks+0x2d4>)
 8002708:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270e:	f043 0220 	orr.w	r2, r3, #32
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e06c      	b.n	8002802 <HAL_SD_ReadBlocks+0x3ae>
 8002728:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f001 ff52 	bl	80045da <SDIO_ReadFIFO>
 8002736:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800273a:	b2da      	uxtb	r2, r3
 800273c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800273e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002742:	3301      	adds	r3, #1
 8002744:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002748:	3b01      	subs	r3, #1
 800274a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800274c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274e:	0a1b      	lsrs	r3, r3, #8
 8002750:	b2da      	uxtb	r2, r3
 8002752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002754:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002758:	3301      	adds	r3, #1
 800275a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800275c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800275e:	3b01      	subs	r3, #1
 8002760:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002764:	0c1b      	lsrs	r3, r3, #16
 8002766:	b2da      	uxtb	r2, r3
 8002768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800276a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800276c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800276e:	3301      	adds	r3, #1
 8002770:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002774:	3b01      	subs	r3, #1
 8002776:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277a:	0e1b      	lsrs	r3, r3, #24
 800277c:	b2da      	uxtb	r2, r3
 800277e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002780:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002784:	3301      	adds	r3, #1
 8002786:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800278a:	3b01      	subs	r3, #1
 800278c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800278e:	f7fe fd47 	bl	8001220 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800279a:	429a      	cmp	r2, r3
 800279c:	d902      	bls.n	80027a4 <HAL_SD_ReadBlocks+0x350>
 800279e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d112      	bne.n	80027ca <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a18      	ldr	r2, [pc, #96]	; (800280c <HAL_SD_ReadBlocks+0x3b8>)
 80027aa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e01b      	b.n	8002802 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d002      	beq.n	80027de <HAL_SD_ReadBlocks+0x38a>
 80027d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1a6      	bne.n	800272c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f240 523a 	movw	r2, #1338	; 0x53a
 80027e6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80027f0:	2300      	movs	r3, #0
 80027f2:	e006      	b.n	8002802 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
  }
}
 8002802:	4618      	mov	r0, r3
 8002804:	3748      	adds	r7, #72	; 0x48
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	004005ff 	.word	0x004005ff

08002810 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b092      	sub	sp, #72	; 0x48
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
 800281c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800281e:	f7fe fcff 	bl	8001220 <HAL_GetTick>
 8002822:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d107      	bne.n	8002842 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002836:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e166      	b.n	8002b10 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b01      	cmp	r3, #1
 800284c:	f040 8159 	bne.w	8002b02 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002856:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	441a      	add	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002860:	429a      	cmp	r2, r3
 8002862:	d907      	bls.n	8002874 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002868:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e14d      	b.n	8002b10 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2203      	movs	r2, #3
 8002878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2200      	movs	r2, #0
 8002882:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002888:	2b01      	cmp	r3, #1
 800288a:	d002      	beq.n	8002892 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800288c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800288e:	025b      	lsls	r3, r3, #9
 8002890:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002892:	f04f 33ff 	mov.w	r3, #4294967295
 8002896:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	025b      	lsls	r3, r3, #9
 800289c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800289e:	2390      	movs	r3, #144	; 0x90
 80028a0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80028a2:	2300      	movs	r3, #0
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80028a6:	2300      	movs	r3, #0
 80028a8:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80028aa:	2301      	movs	r3, #1
 80028ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f107 0218 	add.w	r2, r7, #24
 80028b6:	4611      	mov	r1, r2
 80028b8:	4618      	mov	r0, r3
 80028ba:	f001 ff13 	bl	80046e4 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d90a      	bls.n	80028da <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2220      	movs	r2, #32
 80028c8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028d0:	4618      	mov	r0, r3
 80028d2:	f001 ffbb 	bl	800484c <SDMMC_CmdWriteMultiBlock>
 80028d6:	6478      	str	r0, [r7, #68]	; 0x44
 80028d8:	e009      	b.n	80028ee <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2210      	movs	r2, #16
 80028de:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028e6:	4618      	mov	r0, r3
 80028e8:	f001 ff8e 	bl	8004808 <SDMMC_CmdWriteSingleBlock>
 80028ec:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80028ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d012      	beq.n	800291a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a87      	ldr	r2, [pc, #540]	; (8002b18 <HAL_SD_WriteBlocks+0x308>)
 80028fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002902:	431a      	orrs	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e0fa      	b.n	8002b10 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800291e:	e065      	b.n	80029ec <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d040      	beq.n	80029b0 <HAL_SD_WriteBlocks+0x1a0>
 800292e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002930:	2b00      	cmp	r3, #0
 8002932:	d03d      	beq.n	80029b0 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8002934:	2300      	movs	r3, #0
 8002936:	643b      	str	r3, [r7, #64]	; 0x40
 8002938:	e037      	b.n	80029aa <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800293a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002942:	3301      	adds	r3, #1
 8002944:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002948:	3b01      	subs	r3, #1
 800294a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800294c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	021a      	lsls	r2, r3, #8
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	4313      	orrs	r3, r2
 8002956:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800295a:	3301      	adds	r3, #1
 800295c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800295e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002960:	3b01      	subs	r3, #1
 8002962:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	041a      	lsls	r2, r3, #16
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	4313      	orrs	r3, r2
 800296e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002972:	3301      	adds	r3, #1
 8002974:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002978:	3b01      	subs	r3, #1
 800297a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800297c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	061a      	lsls	r2, r3, #24
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	4313      	orrs	r3, r2
 8002986:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800298a:	3301      	adds	r3, #1
 800298c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800298e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002990:	3b01      	subs	r3, #1
 8002992:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f107 0214 	add.w	r2, r7, #20
 800299c:	4611      	mov	r1, r2
 800299e:	4618      	mov	r0, r3
 80029a0:	f001 fe28 	bl	80045f4 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80029a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029a6:	3301      	adds	r3, #1
 80029a8:	643b      	str	r3, [r7, #64]	; 0x40
 80029aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029ac:	2b07      	cmp	r3, #7
 80029ae:	d9c4      	bls.n	800293a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80029b0:	f7fe fc36 	bl	8001220 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80029bc:	429a      	cmp	r2, r3
 80029be:	d902      	bls.n	80029c6 <HAL_SD_WriteBlocks+0x1b6>
 80029c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d112      	bne.n	80029ec <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a53      	ldr	r2, [pc, #332]	; (8002b18 <HAL_SD_WriteBlocks+0x308>)
 80029cc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029d4:	431a      	orrs	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e091      	b.n	8002b10 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029f2:	f240 331a 	movw	r3, #794	; 0x31a
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d091      	beq.n	8002920 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d022      	beq.n	8002a50 <HAL_SD_WriteBlocks+0x240>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d91f      	bls.n	8002a50 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a14:	2b03      	cmp	r3, #3
 8002a16:	d01b      	beq.n	8002a50 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f001 ff37 	bl	8004890 <SDMMC_CmdStopTransfer>
 8002a22:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d012      	beq.n	8002a50 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a3a      	ldr	r2, [pc, #232]	; (8002b18 <HAL_SD_WriteBlocks+0x308>)
 8002a30:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e05f      	b.n	8002b10 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d012      	beq.n	8002a84 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a2d      	ldr	r2, [pc, #180]	; (8002b18 <HAL_SD_WriteBlocks+0x308>)
 8002a64:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6a:	f043 0208 	orr.w	r2, r3, #8
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e045      	b.n	8002b10 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d012      	beq.n	8002ab8 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a20      	ldr	r2, [pc, #128]	; (8002b18 <HAL_SD_WriteBlocks+0x308>)
 8002a98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9e:	f043 0202 	orr.w	r2, r3, #2
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e02b      	b.n	8002b10 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002abe:	f003 0310 	and.w	r3, r3, #16
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d012      	beq.n	8002aec <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a13      	ldr	r2, [pc, #76]	; (8002b18 <HAL_SD_WriteBlocks+0x308>)
 8002acc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad2:	f043 0210 	orr.w	r2, r3, #16
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e011      	b.n	8002b10 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f240 523a 	movw	r2, #1338	; 0x53a
 8002af4:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	e006      	b.n	8002b10 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b06:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
  }
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3748      	adds	r7, #72	; 0x48
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	004005ff 	.word	0x004005ff

08002b1c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b2a:	0f9b      	lsrs	r3, r3, #30
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b36:	0e9b      	lsrs	r3, r3, #26
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b48:	0e1b      	lsrs	r3, r3, #24
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	f003 0303 	and.w	r3, r3, #3
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b5a:	0c1b      	lsrs	r3, r3, #16
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b66:	0a1b      	lsrs	r3, r3, #8
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b7c:	0d1b      	lsrs	r3, r3, #20
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b88:	0c1b      	lsrs	r3, r3, #16
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	f003 030f 	and.w	r3, r3, #15
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b9a:	0bdb      	lsrs	r3, r3, #15
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bac:	0b9b      	lsrs	r3, r3, #14
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bbe:	0b5b      	lsrs	r3, r3, #13
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bd0:	0b1b      	lsrs	r3, r3, #12
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	2200      	movs	r2, #0
 8002be2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d163      	bne.n	8002cb4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bf0:	009a      	lsls	r2, r3, #2
 8002bf2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002bfc:	0f92      	lsrs	r2, r2, #30
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c08:	0edb      	lsrs	r3, r3, #27
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c1a:	0e1b      	lsrs	r3, r3, #24
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c2c:	0d5b      	lsrs	r3, r3, #21
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c3e:	0c9b      	lsrs	r3, r3, #18
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c50:	0bdb      	lsrs	r3, r3, #15
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	1c5a      	adds	r2, r3, #1
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	7e1b      	ldrb	r3, [r3, #24]
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	3302      	adds	r3, #2
 8002c74:	2201      	movs	r2, #1
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002c7e:	fb02 f203 	mul.w	r2, r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	7a1b      	ldrb	r3, [r3, #8]
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	f003 030f 	and.w	r3, r3, #15
 8002c90:	2201      	movs	r2, #1
 8002c92:	409a      	lsls	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002ca0:	0a52      	lsrs	r2, r2, #9
 8002ca2:	fb02 f203 	mul.w	r2, r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cb0:	661a      	str	r2, [r3, #96]	; 0x60
 8002cb2:	e031      	b.n	8002d18 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d11d      	bne.n	8002cf8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cc0:	041b      	lsls	r3, r3, #16
 8002cc2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cca:	0c1b      	lsrs	r3, r3, #16
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	029a      	lsls	r2, r3, #10
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cec:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	661a      	str	r2, [r3, #96]	; 0x60
 8002cf6:	e00f      	b.n	8002d18 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a58      	ldr	r2, [pc, #352]	; (8002e60 <HAL_SD_GetCardCSD+0x344>)
 8002cfe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e09d      	b.n	8002e54 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d1c:	0b9b      	lsrs	r3, r3, #14
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d2e:	09db      	lsrs	r3, r3, #7
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d50:	0fdb      	lsrs	r3, r3, #31
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5c:	0f5b      	lsrs	r3, r3, #29
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	f003 0303 	and.w	r3, r3, #3
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6e:	0e9b      	lsrs	r3, r3, #26
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d80:	0d9b      	lsrs	r3, r3, #22
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	f003 030f 	and.w	r3, r3, #15
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d92:	0d5b      	lsrs	r3, r3, #21
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dae:	0c1b      	lsrs	r3, r3, #16
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc2:	0bdb      	lsrs	r3, r3, #15
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd6:	0b9b      	lsrs	r3, r3, #14
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dea:	0b5b      	lsrs	r3, r3, #13
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfe:	0b1b      	lsrs	r3, r3, #12
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e12:	0a9b      	lsrs	r3, r3, #10
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e26:	0a1b      	lsrs	r3, r3, #8
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3a:	085b      	lsrs	r3, r3, #1
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	004005ff 	.word	0x004005ff

08002e64 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8002ebc:	b5b0      	push	{r4, r5, r7, lr}
 8002ebe:	b08e      	sub	sp, #56	; 0x38
 8002ec0:	af04      	add	r7, sp, #16
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2203      	movs	r2, #3
 8002ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed8:	2b03      	cmp	r3, #3
 8002eda:	d02e      	beq.n	8002f3a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee2:	d106      	bne.n	8002ef2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	639a      	str	r2, [r3, #56]	; 0x38
 8002ef0:	e029      	b.n	8002f46 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ef8:	d10a      	bne.n	8002f10 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 fa1a 	bl	8003334 <SD_WideBus_Enable>
 8002f00:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	639a      	str	r2, [r3, #56]	; 0x38
 8002f0e:	e01a      	b.n	8002f46 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10a      	bne.n	8002f2c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 fa57 	bl	80033ca <SD_WideBus_Disable>
 8002f1c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	431a      	orrs	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	639a      	str	r2, [r3, #56]	; 0x38
 8002f2a:	e00c      	b.n	8002f46 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f30:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	639a      	str	r2, [r3, #56]	; 0x38
 8002f38:	e005      	b.n	8002f46 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00b      	beq.n	8002f66 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a26      	ldr	r2, [pc, #152]	; (8002fec <HAL_SD_ConfigWideBusOperation+0x130>)
 8002f54:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002f64:	e01f      	b.n	8002fa6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681d      	ldr	r5, [r3, #0]
 8002f8c:	466c      	mov	r4, sp
 8002f8e:	f107 0314 	add.w	r3, r7, #20
 8002f92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002f9a:	f107 0308 	add.w	r3, r7, #8
 8002f9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fa0:	4628      	mov	r0, r5
 8002fa2:	f001 faef 	bl	8004584 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f001 fbc4 	bl	800473c <SDMMC_CmdBlockLength>
 8002fb4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002fb6:	6a3b      	ldr	r3, [r7, #32]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00c      	beq.n	8002fd6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a0a      	ldr	r2, [pc, #40]	; (8002fec <HAL_SD_ConfigWideBusOperation+0x130>)
 8002fc2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fc8:	6a3b      	ldr	r3, [r7, #32]
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8002fde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3728      	adds	r7, #40	; 0x28
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bdb0      	pop	{r4, r5, r7, pc}
 8002fea:	bf00      	nop
 8002fec:	004005ff 	.word	0x004005ff

08002ff0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002ffc:	f107 030c 	add.w	r3, r7, #12
 8003000:	4619      	mov	r1, r3
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f96e 	bl	80032e4 <SD_SendStatus>
 8003008:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d005      	beq.n	800301c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	0a5b      	lsrs	r3, r3, #9
 8003020:	f003 030f 	and.w	r3, r3, #15
 8003024:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003026:	693b      	ldr	r3, [r7, #16]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003030:	b5b0      	push	{r4, r5, r7, lr}
 8003032:	b094      	sub	sp, #80	; 0x50
 8003034:	af04      	add	r7, sp, #16
 8003036:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003038:	2301      	movs	r3, #1
 800303a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f001 faf7 	bl	8004634 <SDIO_GetPowerState>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d102      	bne.n	8003052 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800304c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003050:	e0b6      	b.n	80031c0 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003056:	2b03      	cmp	r3, #3
 8003058:	d02f      	beq.n	80030ba <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f001 fd20 	bl	8004aa4 <SDMMC_CmdSendCID>
 8003064:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <SD_InitCard+0x40>
    {
      return errorstate;
 800306c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800306e:	e0a7      	b.n	80031c0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2100      	movs	r1, #0
 8003076:	4618      	mov	r0, r3
 8003078:	f001 fb21 	bl	80046be <SDIO_GetResponse>
 800307c:	4602      	mov	r2, r0
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2104      	movs	r1, #4
 8003088:	4618      	mov	r0, r3
 800308a:	f001 fb18 	bl	80046be <SDIO_GetResponse>
 800308e:	4602      	mov	r2, r0
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2108      	movs	r1, #8
 800309a:	4618      	mov	r0, r3
 800309c:	f001 fb0f 	bl	80046be <SDIO_GetResponse>
 80030a0:	4602      	mov	r2, r0
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	210c      	movs	r1, #12
 80030ac:	4618      	mov	r0, r3
 80030ae:	f001 fb06 	bl	80046be <SDIO_GetResponse>
 80030b2:	4602      	mov	r2, r0
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030be:	2b03      	cmp	r3, #3
 80030c0:	d00d      	beq.n	80030de <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f107 020e 	add.w	r2, r7, #14
 80030ca:	4611      	mov	r1, r2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f001 fd26 	bl	8004b1e <SDMMC_CmdSetRelAdd>
 80030d2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80030d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <SD_InitCard+0xae>
    {
      return errorstate;
 80030da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030dc:	e070      	b.n	80031c0 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	2b03      	cmp	r3, #3
 80030e4:	d036      	beq.n	8003154 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80030e6:	89fb      	ldrh	r3, [r7, #14]
 80030e8:	461a      	mov	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f6:	041b      	lsls	r3, r3, #16
 80030f8:	4619      	mov	r1, r3
 80030fa:	4610      	mov	r0, r2
 80030fc:	f001 fcf0 	bl	8004ae0 <SDMMC_CmdSendCSD>
 8003100:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <SD_InitCard+0xdc>
    {
      return errorstate;
 8003108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800310a:	e059      	b.n	80031c0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2100      	movs	r1, #0
 8003112:	4618      	mov	r0, r3
 8003114:	f001 fad3 	bl	80046be <SDIO_GetResponse>
 8003118:	4602      	mov	r2, r0
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2104      	movs	r1, #4
 8003124:	4618      	mov	r0, r3
 8003126:	f001 faca 	bl	80046be <SDIO_GetResponse>
 800312a:	4602      	mov	r2, r0
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2108      	movs	r1, #8
 8003136:	4618      	mov	r0, r3
 8003138:	f001 fac1 	bl	80046be <SDIO_GetResponse>
 800313c:	4602      	mov	r2, r0
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	210c      	movs	r1, #12
 8003148:	4618      	mov	r0, r3
 800314a:	f001 fab8 	bl	80046be <SDIO_GetResponse>
 800314e:	4602      	mov	r2, r0
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2104      	movs	r1, #4
 800315a:	4618      	mov	r0, r3
 800315c:	f001 faaf 	bl	80046be <SDIO_GetResponse>
 8003160:	4603      	mov	r3, r0
 8003162:	0d1a      	lsrs	r2, r3, #20
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003168:	f107 0310 	add.w	r3, r7, #16
 800316c:	4619      	mov	r1, r3
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff fcd4 	bl	8002b1c <HAL_SD_GetCardCSD>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800317a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800317e:	e01f      	b.n	80031c0 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6819      	ldr	r1, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003188:	041b      	lsls	r3, r3, #16
 800318a:	461a      	mov	r2, r3
 800318c:	f04f 0300 	mov.w	r3, #0
 8003190:	4608      	mov	r0, r1
 8003192:	f001 fb9f 	bl	80048d4 <SDMMC_CmdSelDesel>
 8003196:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <SD_InitCard+0x172>
  {
    return errorstate;
 800319e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a0:	e00e      	b.n	80031c0 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681d      	ldr	r5, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	466c      	mov	r4, sp
 80031aa:	f103 0210 	add.w	r2, r3, #16
 80031ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80031b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80031b4:	3304      	adds	r3, #4
 80031b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031b8:	4628      	mov	r0, r5
 80031ba:	f001 f9e3 	bl	8004584 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3740      	adds	r7, #64	; 0x40
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bdb0      	pop	{r4, r5, r7, pc}

080031c8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	2300      	movs	r3, #0
 80031da:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f001 fb9a 	bl	800491a <SDMMC_CmdGoIdleState>
 80031e6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	e072      	b.n	80032d8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f001 fbad 	bl	8004956 <SDMMC_CmdOperCond>
 80031fc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00d      	beq.n	8003220 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f001 fb83 	bl	800491a <SDMMC_CmdGoIdleState>
 8003214:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d004      	beq.n	8003226 <SD_PowerON+0x5e>
    {
      return errorstate;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	e05b      	b.n	80032d8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800322a:	2b01      	cmp	r3, #1
 800322c:	d137      	bne.n	800329e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2100      	movs	r1, #0
 8003234:	4618      	mov	r0, r3
 8003236:	f001 fbad 	bl	8004994 <SDMMC_CmdAppCommand>
 800323a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d02d      	beq.n	800329e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003242:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003246:	e047      	b.n	80032d8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2100      	movs	r1, #0
 800324e:	4618      	mov	r0, r3
 8003250:	f001 fba0 	bl	8004994 <SDMMC_CmdAppCommand>
 8003254:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <SD_PowerON+0x98>
    {
      return errorstate;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	e03b      	b.n	80032d8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	491e      	ldr	r1, [pc, #120]	; (80032e0 <SD_PowerON+0x118>)
 8003266:	4618      	mov	r0, r3
 8003268:	f001 fbb6 	bl	80049d8 <SDMMC_CmdAppOperCommand>
 800326c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003274:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003278:	e02e      	b.n	80032d8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2100      	movs	r1, #0
 8003280:	4618      	mov	r0, r3
 8003282:	f001 fa1c 	bl	80046be <SDIO_GetResponse>
 8003286:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	0fdb      	lsrs	r3, r3, #31
 800328c:	2b01      	cmp	r3, #1
 800328e:	d101      	bne.n	8003294 <SD_PowerON+0xcc>
 8003290:	2301      	movs	r3, #1
 8003292:	e000      	b.n	8003296 <SD_PowerON+0xce>
 8003294:	2300      	movs	r3, #0
 8003296:	613b      	str	r3, [r7, #16]

    count++;
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	3301      	adds	r3, #1
 800329c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d802      	bhi.n	80032ae <SD_PowerON+0xe6>
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0cc      	beq.n	8003248 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d902      	bls.n	80032be <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80032b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032bc:	e00c      	b.n	80032d8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	645a      	str	r2, [r3, #68]	; 0x44
 80032ce:	e002      	b.n	80032d6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	c1100000 	.word	0xc1100000

080032e4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d102      	bne.n	80032fa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80032f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80032f8:	e018      	b.n	800332c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003302:	041b      	lsls	r3, r3, #16
 8003304:	4619      	mov	r1, r3
 8003306:	4610      	mov	r0, r2
 8003308:	f001 fc2a 	bl	8004b60 <SDMMC_CmdSendStatus>
 800330c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	e009      	b.n	800332c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2100      	movs	r1, #0
 800331e:	4618      	mov	r0, r3
 8003320:	f001 f9cd 	bl	80046be <SDIO_GetResponse>
 8003324:	4602      	mov	r2, r0
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800333c:	2300      	movs	r3, #0
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	2300      	movs	r3, #0
 8003342:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2100      	movs	r1, #0
 800334a:	4618      	mov	r0, r3
 800334c:	f001 f9b7 	bl	80046be <SDIO_GetResponse>
 8003350:	4603      	mov	r3, r0
 8003352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003356:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800335a:	d102      	bne.n	8003362 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800335c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003360:	e02f      	b.n	80033c2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003362:	f107 030c 	add.w	r3, r7, #12
 8003366:	4619      	mov	r1, r3
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f879 	bl	8003460 <SD_FindSCR>
 800336e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	e023      	b.n	80033c2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d01c      	beq.n	80033be <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800338c:	041b      	lsls	r3, r3, #16
 800338e:	4619      	mov	r1, r3
 8003390:	4610      	mov	r0, r2
 8003392:	f001 faff 	bl	8004994 <SDMMC_CmdAppCommand>
 8003396:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	e00f      	b.n	80033c2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2102      	movs	r1, #2
 80033a8:	4618      	mov	r0, r3
 80033aa:	f001 fb38 	bl	8004a1e <SDMMC_CmdBusWidth>
 80033ae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	e003      	b.n	80033c2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80033ba:	2300      	movs	r3, #0
 80033bc:	e001      	b.n	80033c2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80033be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b086      	sub	sp, #24
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80033d2:	2300      	movs	r3, #0
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	2300      	movs	r3, #0
 80033d8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2100      	movs	r1, #0
 80033e0:	4618      	mov	r0, r3
 80033e2:	f001 f96c 	bl	80046be <SDIO_GetResponse>
 80033e6:	4603      	mov	r3, r0
 80033e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033f0:	d102      	bne.n	80033f8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80033f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80033f6:	e02f      	b.n	8003458 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80033f8:	f107 030c 	add.w	r3, r7, #12
 80033fc:	4619      	mov	r1, r3
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f82e 	bl	8003460 <SD_FindSCR>
 8003404:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	e023      	b.n	8003458 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d01c      	beq.n	8003454 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003422:	041b      	lsls	r3, r3, #16
 8003424:	4619      	mov	r1, r3
 8003426:	4610      	mov	r0, r2
 8003428:	f001 fab4 	bl	8004994 <SDMMC_CmdAppCommand>
 800342c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	e00f      	b.n	8003458 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2100      	movs	r1, #0
 800343e:	4618      	mov	r0, r3
 8003440:	f001 faed 	bl	8004a1e <SDMMC_CmdBusWidth>
 8003444:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	e003      	b.n	8003458 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003450:	2300      	movs	r3, #0
 8003452:	e001      	b.n	8003458 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003454:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003458:	4618      	mov	r0, r3
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003460:	b590      	push	{r4, r7, lr}
 8003462:	b08f      	sub	sp, #60	; 0x3c
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800346a:	f7fd fed9 	bl	8001220 <HAL_GetTick>
 800346e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003474:	2300      	movs	r3, #0
 8003476:	60bb      	str	r3, [r7, #8]
 8003478:	2300      	movs	r3, #0
 800347a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2108      	movs	r1, #8
 8003486:	4618      	mov	r0, r3
 8003488:	f001 f958 	bl	800473c <SDMMC_CmdBlockLength>
 800348c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800348e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <SD_FindSCR+0x38>
  {
    return errorstate;
 8003494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003496:	e0b2      	b.n	80035fe <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a0:	041b      	lsls	r3, r3, #16
 80034a2:	4619      	mov	r1, r3
 80034a4:	4610      	mov	r0, r2
 80034a6:	f001 fa75 	bl	8004994 <SDMMC_CmdAppCommand>
 80034aa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80034ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80034b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b4:	e0a3      	b.n	80035fe <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80034b6:	f04f 33ff 	mov.w	r3, #4294967295
 80034ba:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80034bc:	2308      	movs	r3, #8
 80034be:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80034c0:	2330      	movs	r3, #48	; 0x30
 80034c2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80034c4:	2302      	movs	r3, #2
 80034c6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80034c8:	2300      	movs	r3, #0
 80034ca:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80034cc:	2301      	movs	r3, #1
 80034ce:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f107 0210 	add.w	r2, r7, #16
 80034d8:	4611      	mov	r1, r2
 80034da:	4618      	mov	r0, r3
 80034dc:	f001 f902 	bl	80046e4 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f001 fabc 	bl	8004a62 <SDMMC_CmdSendSCR>
 80034ea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80034ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d02a      	beq.n	8003548 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80034f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f4:	e083      	b.n	80035fe <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00f      	beq.n	8003524 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6819      	ldr	r1, [r3, #0]
 8003508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	f107 0208 	add.w	r2, r7, #8
 8003510:	18d4      	adds	r4, r2, r3
 8003512:	4608      	mov	r0, r1
 8003514:	f001 f861 	bl	80045da <SDIO_ReadFIFO>
 8003518:	4603      	mov	r3, r0
 800351a:	6023      	str	r3, [r4, #0]
      index++;
 800351c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800351e:	3301      	adds	r3, #1
 8003520:	637b      	str	r3, [r7, #52]	; 0x34
 8003522:	e006      	b.n	8003532 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800352a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d012      	beq.n	8003558 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003532:	f7fd fe75 	bl	8001220 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003540:	d102      	bne.n	8003548 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003542:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003546:	e05a      	b.n	80035fe <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0cf      	beq.n	80034f6 <SD_FindSCR+0x96>
 8003556:	e000      	b.n	800355a <SD_FindSCR+0xfa>
      break;
 8003558:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b00      	cmp	r3, #0
 8003566:	d005      	beq.n	8003574 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2208      	movs	r2, #8
 800356e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003570:	2308      	movs	r3, #8
 8003572:	e044      	b.n	80035fe <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d005      	beq.n	800358e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2202      	movs	r2, #2
 8003588:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800358a:	2302      	movs	r3, #2
 800358c:	e037      	b.n	80035fe <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003594:	f003 0320 	and.w	r3, r3, #32
 8003598:	2b00      	cmp	r3, #0
 800359a:	d005      	beq.n	80035a8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2220      	movs	r2, #32
 80035a2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80035a4:	2320      	movs	r3, #32
 80035a6:	e02a      	b.n	80035fe <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f240 523a 	movw	r2, #1338	; 0x53a
 80035b0:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	061a      	lsls	r2, r3, #24
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	021b      	lsls	r3, r3, #8
 80035ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80035be:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	0a1b      	lsrs	r3, r3, #8
 80035c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80035c8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	0e1b      	lsrs	r3, r3, #24
 80035ce:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80035d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d2:	601a      	str	r2, [r3, #0]
    scr++;
 80035d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d6:	3304      	adds	r3, #4
 80035d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	061a      	lsls	r2, r3, #24
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	021b      	lsls	r3, r3, #8
 80035e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80035e6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	0a1b      	lsrs	r3, r3, #8
 80035ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80035f0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	0e1b      	lsrs	r3, r3, #24
 80035f6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80035f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fa:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	373c      	adds	r7, #60	; 0x3c
 8003602:	46bd      	mov	sp, r7
 8003604:	bd90      	pop	{r4, r7, pc}

08003606 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b082      	sub	sp, #8
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e07b      	b.n	8003710 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	2b00      	cmp	r3, #0
 800361e:	d108      	bne.n	8003632 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003628:	d009      	beq.n	800363e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	61da      	str	r2, [r3, #28]
 8003630:	e005      	b.n	800363e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d106      	bne.n	800365e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f7fd fb3d 	bl	8000cd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2202      	movs	r2, #2
 8003662:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003674:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003690:	431a      	orrs	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	431a      	orrs	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	69db      	ldr	r3, [r3, #28]
 80036b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036b8:	431a      	orrs	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c2:	ea42 0103 	orr.w	r1, r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	0c1b      	lsrs	r3, r3, #16
 80036dc:	f003 0104 	and.w	r1, r3, #4
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	f003 0210 	and.w	r2, r3, #16
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	69da      	ldr	r2, [r3, #28]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	603b      	str	r3, [r7, #0]
 8003724:	4613      	mov	r3, r2
 8003726:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003732:	2b01      	cmp	r3, #1
 8003734:	d101      	bne.n	800373a <HAL_SPI_Transmit+0x22>
 8003736:	2302      	movs	r3, #2
 8003738:	e126      	b.n	8003988 <HAL_SPI_Transmit+0x270>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003742:	f7fd fd6d 	bl	8001220 <HAL_GetTick>
 8003746:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003748:	88fb      	ldrh	r3, [r7, #6]
 800374a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b01      	cmp	r3, #1
 8003756:	d002      	beq.n	800375e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003758:	2302      	movs	r3, #2
 800375a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800375c:	e10b      	b.n	8003976 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d002      	beq.n	800376a <HAL_SPI_Transmit+0x52>
 8003764:	88fb      	ldrh	r3, [r7, #6]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d102      	bne.n	8003770 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800376e:	e102      	b.n	8003976 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2203      	movs	r2, #3
 8003774:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	88fa      	ldrh	r2, [r7, #6]
 8003788:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	88fa      	ldrh	r2, [r7, #6]
 800378e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037b6:	d10f      	bne.n	80037d8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037d6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e2:	2b40      	cmp	r3, #64	; 0x40
 80037e4:	d007      	beq.n	80037f6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037fe:	d14b      	bne.n	8003898 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <HAL_SPI_Transmit+0xf6>
 8003808:	8afb      	ldrh	r3, [r7, #22]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d13e      	bne.n	800388c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003812:	881a      	ldrh	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	1c9a      	adds	r2, r3, #2
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003828:	b29b      	uxth	r3, r3
 800382a:	3b01      	subs	r3, #1
 800382c:	b29a      	uxth	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003832:	e02b      	b.n	800388c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b02      	cmp	r3, #2
 8003840:	d112      	bne.n	8003868 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	881a      	ldrh	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	1c9a      	adds	r2, r3, #2
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800385c:	b29b      	uxth	r3, r3
 800385e:	3b01      	subs	r3, #1
 8003860:	b29a      	uxth	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	86da      	strh	r2, [r3, #54]	; 0x36
 8003866:	e011      	b.n	800388c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003868:	f7fd fcda 	bl	8001220 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d803      	bhi.n	8003880 <HAL_SPI_Transmit+0x168>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387e:	d102      	bne.n	8003886 <HAL_SPI_Transmit+0x16e>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d102      	bne.n	800388c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	77fb      	strb	r3, [r7, #31]
          goto error;
 800388a:	e074      	b.n	8003976 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003890:	b29b      	uxth	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1ce      	bne.n	8003834 <HAL_SPI_Transmit+0x11c>
 8003896:	e04c      	b.n	8003932 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <HAL_SPI_Transmit+0x18e>
 80038a0:	8afb      	ldrh	r3, [r7, #22]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d140      	bne.n	8003928 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	330c      	adds	r3, #12
 80038b0:	7812      	ldrb	r2, [r2, #0]
 80038b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80038cc:	e02c      	b.n	8003928 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d113      	bne.n	8003904 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	330c      	adds	r3, #12
 80038e6:	7812      	ldrb	r2, [r2, #0]
 80038e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	86da      	strh	r2, [r3, #54]	; 0x36
 8003902:	e011      	b.n	8003928 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003904:	f7fd fc8c 	bl	8001220 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	429a      	cmp	r2, r3
 8003912:	d803      	bhi.n	800391c <HAL_SPI_Transmit+0x204>
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391a:	d102      	bne.n	8003922 <HAL_SPI_Transmit+0x20a>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d102      	bne.n	8003928 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003926:	e026      	b.n	8003976 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800392c:	b29b      	uxth	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1cd      	bne.n	80038ce <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	6839      	ldr	r1, [r7, #0]
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 fbcc 	bl	80040d4 <SPI_EndRxTxTransaction>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2220      	movs	r2, #32
 8003946:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10a      	bne.n	8003966 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003950:	2300      	movs	r3, #0
 8003952:	613b      	str	r3, [r7, #16]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	613b      	str	r3, [r7, #16]
 8003964:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	77fb      	strb	r3, [r7, #31]
 8003972:	e000      	b.n	8003976 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003974:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003986:	7ffb      	ldrb	r3, [r7, #31]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3720      	adds	r7, #32
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b088      	sub	sp, #32
 8003994:	af02      	add	r7, sp, #8
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	603b      	str	r3, [r7, #0]
 800399c:	4613      	mov	r3, r2
 800399e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039ac:	d112      	bne.n	80039d4 <HAL_SPI_Receive+0x44>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10e      	bne.n	80039d4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2204      	movs	r2, #4
 80039ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80039be:	88fa      	ldrh	r2, [r7, #6]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	4613      	mov	r3, r2
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	68b9      	ldr	r1, [r7, #8]
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f000 f8f1 	bl	8003bb2 <HAL_SPI_TransmitReceive>
 80039d0:	4603      	mov	r3, r0
 80039d2:	e0ea      	b.n	8003baa <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d101      	bne.n	80039e2 <HAL_SPI_Receive+0x52>
 80039de:	2302      	movs	r3, #2
 80039e0:	e0e3      	b.n	8003baa <HAL_SPI_Receive+0x21a>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039ea:	f7fd fc19 	bl	8001220 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d002      	beq.n	8003a02 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80039fc:	2302      	movs	r3, #2
 80039fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a00:	e0ca      	b.n	8003b98 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <HAL_SPI_Receive+0x7e>
 8003a08:	88fb      	ldrh	r3, [r7, #6]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d102      	bne.n	8003a14 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a12:	e0c1      	b.n	8003b98 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2204      	movs	r2, #4
 8003a18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	88fa      	ldrh	r2, [r7, #6]
 8003a2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	88fa      	ldrh	r2, [r7, #6]
 8003a32:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a5a:	d10f      	bne.n	8003a7c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a6a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a7a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a86:	2b40      	cmp	r3, #64	; 0x40
 8003a88:	d007      	beq.n	8003a9a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a98:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d162      	bne.n	8003b68 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003aa2:	e02e      	b.n	8003b02 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d115      	bne.n	8003ade <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f103 020c 	add.w	r2, r3, #12
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abe:	7812      	ldrb	r2, [r2, #0]
 8003ac0:	b2d2      	uxtb	r2, r2
 8003ac2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003adc:	e011      	b.n	8003b02 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ade:	f7fd fb9f 	bl	8001220 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d803      	bhi.n	8003af6 <HAL_SPI_Receive+0x166>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af4:	d102      	bne.n	8003afc <HAL_SPI_Receive+0x16c>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d102      	bne.n	8003b02 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003b00:	e04a      	b.n	8003b98 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1cb      	bne.n	8003aa4 <HAL_SPI_Receive+0x114>
 8003b0c:	e031      	b.n	8003b72 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d113      	bne.n	8003b44 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68da      	ldr	r2, [r3, #12]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b26:	b292      	uxth	r2, r2
 8003b28:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2e:	1c9a      	adds	r2, r3, #2
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b42:	e011      	b.n	8003b68 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b44:	f7fd fb6c 	bl	8001220 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d803      	bhi.n	8003b5c <HAL_SPI_Receive+0x1cc>
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5a:	d102      	bne.n	8003b62 <HAL_SPI_Receive+0x1d2>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d102      	bne.n	8003b68 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003b66:	e017      	b.n	8003b98 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1cd      	bne.n	8003b0e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	6839      	ldr	r1, [r7, #0]
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 fa46 	bl	8004008 <SPI_EndRxTransaction>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2220      	movs	r2, #32
 8003b86:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d002      	beq.n	8003b96 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	75fb      	strb	r3, [r7, #23]
 8003b94:	e000      	b.n	8003b98 <HAL_SPI_Receive+0x208>
  }

error :
 8003b96:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ba8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b08c      	sub	sp, #48	; 0x30
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	60f8      	str	r0, [r7, #12]
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	607a      	str	r2, [r7, #4]
 8003bbe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d101      	bne.n	8003bd8 <HAL_SPI_TransmitReceive+0x26>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	e18a      	b.n	8003eee <HAL_SPI_TransmitReceive+0x33c>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003be0:	f7fd fb1e 	bl	8001220 <HAL_GetTick>
 8003be4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003bf6:	887b      	ldrh	r3, [r7, #2]
 8003bf8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003bfa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d00f      	beq.n	8003c22 <HAL_SPI_TransmitReceive+0x70>
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c08:	d107      	bne.n	8003c1a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d103      	bne.n	8003c1a <HAL_SPI_TransmitReceive+0x68>
 8003c12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d003      	beq.n	8003c22 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c20:	e15b      	b.n	8003eda <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d005      	beq.n	8003c34 <HAL_SPI_TransmitReceive+0x82>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <HAL_SPI_TransmitReceive+0x82>
 8003c2e:	887b      	ldrh	r3, [r7, #2]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d103      	bne.n	8003c3c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c3a:	e14e      	b.n	8003eda <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d003      	beq.n	8003c50 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2205      	movs	r2, #5
 8003c4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	887a      	ldrh	r2, [r7, #2]
 8003c60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	887a      	ldrh	r2, [r7, #2]
 8003c66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	887a      	ldrh	r2, [r7, #2]
 8003c72:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	887a      	ldrh	r2, [r7, #2]
 8003c78:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c90:	2b40      	cmp	r3, #64	; 0x40
 8003c92:	d007      	beq.n	8003ca4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ca2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cac:	d178      	bne.n	8003da0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <HAL_SPI_TransmitReceive+0x10a>
 8003cb6:	8b7b      	ldrh	r3, [r7, #26]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d166      	bne.n	8003d8a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc0:	881a      	ldrh	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ccc:	1c9a      	adds	r2, r3, #2
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ce0:	e053      	b.n	8003d8a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d11b      	bne.n	8003d28 <HAL_SPI_TransmitReceive+0x176>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d016      	beq.n	8003d28 <HAL_SPI_TransmitReceive+0x176>
 8003cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d113      	bne.n	8003d28 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d04:	881a      	ldrh	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	1c9a      	adds	r2, r3, #2
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d119      	bne.n	8003d6a <HAL_SPI_TransmitReceive+0x1b8>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d014      	beq.n	8003d6a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4a:	b292      	uxth	r2, r2
 8003d4c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d52:	1c9a      	adds	r2, r3, #2
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d66:	2301      	movs	r3, #1
 8003d68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d6a:	f7fd fa59 	bl	8001220 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d807      	bhi.n	8003d8a <HAL_SPI_TransmitReceive+0x1d8>
 8003d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d80:	d003      	beq.n	8003d8a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d88:	e0a7      	b.n	8003eda <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1a6      	bne.n	8003ce2 <HAL_SPI_TransmitReceive+0x130>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1a1      	bne.n	8003ce2 <HAL_SPI_TransmitReceive+0x130>
 8003d9e:	e07c      	b.n	8003e9a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d002      	beq.n	8003dae <HAL_SPI_TransmitReceive+0x1fc>
 8003da8:	8b7b      	ldrh	r3, [r7, #26]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d16b      	bne.n	8003e86 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	330c      	adds	r3, #12
 8003db8:	7812      	ldrb	r2, [r2, #0]
 8003dba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc0:	1c5a      	adds	r2, r3, #1
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dd4:	e057      	b.n	8003e86 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d11c      	bne.n	8003e1e <HAL_SPI_TransmitReceive+0x26c>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d017      	beq.n	8003e1e <HAL_SPI_TransmitReceive+0x26c>
 8003dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d114      	bne.n	8003e1e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	330c      	adds	r3, #12
 8003dfe:	7812      	ldrb	r2, [r2, #0]
 8003e00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e06:	1c5a      	adds	r2, r3, #1
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	3b01      	subs	r3, #1
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d119      	bne.n	8003e60 <HAL_SPI_TransmitReceive+0x2ae>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d014      	beq.n	8003e60 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68da      	ldr	r2, [r3, #12]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e60:	f7fd f9de 	bl	8001220 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d803      	bhi.n	8003e78 <HAL_SPI_TransmitReceive+0x2c6>
 8003e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e76:	d102      	bne.n	8003e7e <HAL_SPI_TransmitReceive+0x2cc>
 8003e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d103      	bne.n	8003e86 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e84:	e029      	b.n	8003eda <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1a2      	bne.n	8003dd6 <HAL_SPI_TransmitReceive+0x224>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d19d      	bne.n	8003dd6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 f918 	bl	80040d4 <SPI_EndRxTxTransaction>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d006      	beq.n	8003eb8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003eb6:	e010      	b.n	8003eda <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10b      	bne.n	8003ed8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	e000      	b.n	8003eda <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003ed8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003eea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3730      	adds	r7, #48	; 0x30
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b088      	sub	sp, #32
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	4613      	mov	r3, r2
 8003f06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f08:	f7fd f98a 	bl	8001220 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f10:	1a9b      	subs	r3, r3, r2
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	4413      	add	r3, r2
 8003f16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f18:	f7fd f982 	bl	8001220 <HAL_GetTick>
 8003f1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f1e:	4b39      	ldr	r3, [pc, #228]	; (8004004 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	015b      	lsls	r3, r3, #5
 8003f24:	0d1b      	lsrs	r3, r3, #20
 8003f26:	69fa      	ldr	r2, [r7, #28]
 8003f28:	fb02 f303 	mul.w	r3, r2, r3
 8003f2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f2e:	e054      	b.n	8003fda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f36:	d050      	beq.n	8003fda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f38:	f7fd f972 	bl	8001220 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	69fa      	ldr	r2, [r7, #28]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d902      	bls.n	8003f4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d13d      	bne.n	8003fca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f66:	d111      	bne.n	8003f8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f70:	d004      	beq.n	8003f7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f7a:	d107      	bne.n	8003f8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f94:	d10f      	bne.n	8003fb6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e017      	b.n	8003ffa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	bf0c      	ite	eq
 8003fea:	2301      	moveq	r3, #1
 8003fec:	2300      	movne	r3, #0
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	79fb      	ldrb	r3, [r7, #7]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d19b      	bne.n	8003f30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3720      	adds	r7, #32
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	20000000 	.word	0x20000000

08004008 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af02      	add	r7, sp, #8
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800401c:	d111      	bne.n	8004042 <SPI_EndRxTransaction+0x3a>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004026:	d004      	beq.n	8004032 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004030:	d107      	bne.n	8004042 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004040:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800404a:	d12a      	bne.n	80040a2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004054:	d012      	beq.n	800407c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2200      	movs	r2, #0
 800405e:	2180      	movs	r1, #128	; 0x80
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f7ff ff49 	bl	8003ef8 <SPI_WaitFlagStateUntilTimeout>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d02d      	beq.n	80040c8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004070:	f043 0220 	orr.w	r2, r3, #32
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e026      	b.n	80040ca <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2200      	movs	r2, #0
 8004084:	2101      	movs	r1, #1
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f7ff ff36 	bl	8003ef8 <SPI_WaitFlagStateUntilTimeout>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d01a      	beq.n	80040c8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004096:	f043 0220 	orr.w	r2, r3, #32
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e013      	b.n	80040ca <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	2200      	movs	r2, #0
 80040aa:	2101      	movs	r1, #1
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f7ff ff23 	bl	8003ef8 <SPI_WaitFlagStateUntilTimeout>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d007      	beq.n	80040c8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040bc:	f043 0220 	orr.w	r2, r3, #32
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e000      	b.n	80040ca <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
	...

080040d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b088      	sub	sp, #32
 80040d8:	af02      	add	r7, sp, #8
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80040e0:	4b1b      	ldr	r3, [pc, #108]	; (8004150 <SPI_EndRxTxTransaction+0x7c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a1b      	ldr	r2, [pc, #108]	; (8004154 <SPI_EndRxTxTransaction+0x80>)
 80040e6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ea:	0d5b      	lsrs	r3, r3, #21
 80040ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040f0:	fb02 f303 	mul.w	r3, r2, r3
 80040f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040fe:	d112      	bne.n	8004126 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	2200      	movs	r2, #0
 8004108:	2180      	movs	r1, #128	; 0x80
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f7ff fef4 	bl	8003ef8 <SPI_WaitFlagStateUntilTimeout>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d016      	beq.n	8004144 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411a:	f043 0220 	orr.w	r2, r3, #32
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e00f      	b.n	8004146 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	3b01      	subs	r3, #1
 8004130:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800413c:	2b80      	cmp	r3, #128	; 0x80
 800413e:	d0f2      	beq.n	8004126 <SPI_EndRxTxTransaction+0x52>
 8004140:	e000      	b.n	8004144 <SPI_EndRxTxTransaction+0x70>
        break;
 8004142:	bf00      	nop
  }

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3718      	adds	r7, #24
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20000000 	.word	0x20000000
 8004154:	165e9f81 	.word	0x165e9f81

08004158 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e03f      	b.n	80041ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d106      	bne.n	8004184 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7fc fec8 	bl	8000f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2224      	movs	r2, #36	; 0x24
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800419a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f829 	bl	80041f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	691a      	ldr	r2, [r3, #16]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	695a      	ldr	r2, [r3, #20]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68da      	ldr	r2, [r3, #12]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2220      	movs	r2, #32
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2220      	movs	r2, #32
 80041e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
	...

080041f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041f8:	b09f      	sub	sp, #124	; 0x7c
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800420a:	68d9      	ldr	r1, [r3, #12]
 800420c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	ea40 0301 	orr.w	r3, r0, r1
 8004214:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004218:	689a      	ldr	r2, [r3, #8]
 800421a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	431a      	orrs	r2, r3
 8004220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	431a      	orrs	r2, r3
 8004226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	4313      	orrs	r3, r2
 800422c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800422e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004238:	f021 010c 	bic.w	r1, r1, #12
 800423c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004242:	430b      	orrs	r3, r1
 8004244:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004252:	6999      	ldr	r1, [r3, #24]
 8004254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	ea40 0301 	orr.w	r3, r0, r1
 800425c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800425e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	4bc5      	ldr	r3, [pc, #788]	; (8004578 <UART_SetConfig+0x384>)
 8004264:	429a      	cmp	r2, r3
 8004266:	d004      	beq.n	8004272 <UART_SetConfig+0x7e>
 8004268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	4bc3      	ldr	r3, [pc, #780]	; (800457c <UART_SetConfig+0x388>)
 800426e:	429a      	cmp	r2, r3
 8004270:	d103      	bne.n	800427a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004272:	f7fe f82d 	bl	80022d0 <HAL_RCC_GetPCLK2Freq>
 8004276:	6778      	str	r0, [r7, #116]	; 0x74
 8004278:	e002      	b.n	8004280 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800427a:	f7fe f815 	bl	80022a8 <HAL_RCC_GetPCLK1Freq>
 800427e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004288:	f040 80b6 	bne.w	80043f8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800428c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800428e:	461c      	mov	r4, r3
 8004290:	f04f 0500 	mov.w	r5, #0
 8004294:	4622      	mov	r2, r4
 8004296:	462b      	mov	r3, r5
 8004298:	1891      	adds	r1, r2, r2
 800429a:	6439      	str	r1, [r7, #64]	; 0x40
 800429c:	415b      	adcs	r3, r3
 800429e:	647b      	str	r3, [r7, #68]	; 0x44
 80042a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042a4:	1912      	adds	r2, r2, r4
 80042a6:	eb45 0303 	adc.w	r3, r5, r3
 80042aa:	f04f 0000 	mov.w	r0, #0
 80042ae:	f04f 0100 	mov.w	r1, #0
 80042b2:	00d9      	lsls	r1, r3, #3
 80042b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042b8:	00d0      	lsls	r0, r2, #3
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	1911      	adds	r1, r2, r4
 80042c0:	6639      	str	r1, [r7, #96]	; 0x60
 80042c2:	416b      	adcs	r3, r5
 80042c4:	667b      	str	r3, [r7, #100]	; 0x64
 80042c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	461a      	mov	r2, r3
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	1891      	adds	r1, r2, r2
 80042d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80042d4:	415b      	adcs	r3, r3
 80042d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80042dc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80042e0:	f7fb ff8c 	bl	80001fc <__aeabi_uldivmod>
 80042e4:	4602      	mov	r2, r0
 80042e6:	460b      	mov	r3, r1
 80042e8:	4ba5      	ldr	r3, [pc, #660]	; (8004580 <UART_SetConfig+0x38c>)
 80042ea:	fba3 2302 	umull	r2, r3, r3, r2
 80042ee:	095b      	lsrs	r3, r3, #5
 80042f0:	011e      	lsls	r6, r3, #4
 80042f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042f4:	461c      	mov	r4, r3
 80042f6:	f04f 0500 	mov.w	r5, #0
 80042fa:	4622      	mov	r2, r4
 80042fc:	462b      	mov	r3, r5
 80042fe:	1891      	adds	r1, r2, r2
 8004300:	6339      	str	r1, [r7, #48]	; 0x30
 8004302:	415b      	adcs	r3, r3
 8004304:	637b      	str	r3, [r7, #52]	; 0x34
 8004306:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800430a:	1912      	adds	r2, r2, r4
 800430c:	eb45 0303 	adc.w	r3, r5, r3
 8004310:	f04f 0000 	mov.w	r0, #0
 8004314:	f04f 0100 	mov.w	r1, #0
 8004318:	00d9      	lsls	r1, r3, #3
 800431a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800431e:	00d0      	lsls	r0, r2, #3
 8004320:	4602      	mov	r2, r0
 8004322:	460b      	mov	r3, r1
 8004324:	1911      	adds	r1, r2, r4
 8004326:	65b9      	str	r1, [r7, #88]	; 0x58
 8004328:	416b      	adcs	r3, r5
 800432a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800432c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	461a      	mov	r2, r3
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	1891      	adds	r1, r2, r2
 8004338:	62b9      	str	r1, [r7, #40]	; 0x28
 800433a:	415b      	adcs	r3, r3
 800433c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800433e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004342:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004346:	f7fb ff59 	bl	80001fc <__aeabi_uldivmod>
 800434a:	4602      	mov	r2, r0
 800434c:	460b      	mov	r3, r1
 800434e:	4b8c      	ldr	r3, [pc, #560]	; (8004580 <UART_SetConfig+0x38c>)
 8004350:	fba3 1302 	umull	r1, r3, r3, r2
 8004354:	095b      	lsrs	r3, r3, #5
 8004356:	2164      	movs	r1, #100	; 0x64
 8004358:	fb01 f303 	mul.w	r3, r1, r3
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	3332      	adds	r3, #50	; 0x32
 8004362:	4a87      	ldr	r2, [pc, #540]	; (8004580 <UART_SetConfig+0x38c>)
 8004364:	fba2 2303 	umull	r2, r3, r2, r3
 8004368:	095b      	lsrs	r3, r3, #5
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004370:	441e      	add	r6, r3
 8004372:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004374:	4618      	mov	r0, r3
 8004376:	f04f 0100 	mov.w	r1, #0
 800437a:	4602      	mov	r2, r0
 800437c:	460b      	mov	r3, r1
 800437e:	1894      	adds	r4, r2, r2
 8004380:	623c      	str	r4, [r7, #32]
 8004382:	415b      	adcs	r3, r3
 8004384:	627b      	str	r3, [r7, #36]	; 0x24
 8004386:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800438a:	1812      	adds	r2, r2, r0
 800438c:	eb41 0303 	adc.w	r3, r1, r3
 8004390:	f04f 0400 	mov.w	r4, #0
 8004394:	f04f 0500 	mov.w	r5, #0
 8004398:	00dd      	lsls	r5, r3, #3
 800439a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800439e:	00d4      	lsls	r4, r2, #3
 80043a0:	4622      	mov	r2, r4
 80043a2:	462b      	mov	r3, r5
 80043a4:	1814      	adds	r4, r2, r0
 80043a6:	653c      	str	r4, [r7, #80]	; 0x50
 80043a8:	414b      	adcs	r3, r1
 80043aa:	657b      	str	r3, [r7, #84]	; 0x54
 80043ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	461a      	mov	r2, r3
 80043b2:	f04f 0300 	mov.w	r3, #0
 80043b6:	1891      	adds	r1, r2, r2
 80043b8:	61b9      	str	r1, [r7, #24]
 80043ba:	415b      	adcs	r3, r3
 80043bc:	61fb      	str	r3, [r7, #28]
 80043be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043c2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80043c6:	f7fb ff19 	bl	80001fc <__aeabi_uldivmod>
 80043ca:	4602      	mov	r2, r0
 80043cc:	460b      	mov	r3, r1
 80043ce:	4b6c      	ldr	r3, [pc, #432]	; (8004580 <UART_SetConfig+0x38c>)
 80043d0:	fba3 1302 	umull	r1, r3, r3, r2
 80043d4:	095b      	lsrs	r3, r3, #5
 80043d6:	2164      	movs	r1, #100	; 0x64
 80043d8:	fb01 f303 	mul.w	r3, r1, r3
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	3332      	adds	r3, #50	; 0x32
 80043e2:	4a67      	ldr	r2, [pc, #412]	; (8004580 <UART_SetConfig+0x38c>)
 80043e4:	fba2 2303 	umull	r2, r3, r2, r3
 80043e8:	095b      	lsrs	r3, r3, #5
 80043ea:	f003 0207 	and.w	r2, r3, #7
 80043ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4432      	add	r2, r6
 80043f4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043f6:	e0b9      	b.n	800456c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043fa:	461c      	mov	r4, r3
 80043fc:	f04f 0500 	mov.w	r5, #0
 8004400:	4622      	mov	r2, r4
 8004402:	462b      	mov	r3, r5
 8004404:	1891      	adds	r1, r2, r2
 8004406:	6139      	str	r1, [r7, #16]
 8004408:	415b      	adcs	r3, r3
 800440a:	617b      	str	r3, [r7, #20]
 800440c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004410:	1912      	adds	r2, r2, r4
 8004412:	eb45 0303 	adc.w	r3, r5, r3
 8004416:	f04f 0000 	mov.w	r0, #0
 800441a:	f04f 0100 	mov.w	r1, #0
 800441e:	00d9      	lsls	r1, r3, #3
 8004420:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004424:	00d0      	lsls	r0, r2, #3
 8004426:	4602      	mov	r2, r0
 8004428:	460b      	mov	r3, r1
 800442a:	eb12 0804 	adds.w	r8, r2, r4
 800442e:	eb43 0905 	adc.w	r9, r3, r5
 8004432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	4618      	mov	r0, r3
 8004438:	f04f 0100 	mov.w	r1, #0
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	008b      	lsls	r3, r1, #2
 8004446:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800444a:	0082      	lsls	r2, r0, #2
 800444c:	4640      	mov	r0, r8
 800444e:	4649      	mov	r1, r9
 8004450:	f7fb fed4 	bl	80001fc <__aeabi_uldivmod>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	4b49      	ldr	r3, [pc, #292]	; (8004580 <UART_SetConfig+0x38c>)
 800445a:	fba3 2302 	umull	r2, r3, r3, r2
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	011e      	lsls	r6, r3, #4
 8004462:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004464:	4618      	mov	r0, r3
 8004466:	f04f 0100 	mov.w	r1, #0
 800446a:	4602      	mov	r2, r0
 800446c:	460b      	mov	r3, r1
 800446e:	1894      	adds	r4, r2, r2
 8004470:	60bc      	str	r4, [r7, #8]
 8004472:	415b      	adcs	r3, r3
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800447a:	1812      	adds	r2, r2, r0
 800447c:	eb41 0303 	adc.w	r3, r1, r3
 8004480:	f04f 0400 	mov.w	r4, #0
 8004484:	f04f 0500 	mov.w	r5, #0
 8004488:	00dd      	lsls	r5, r3, #3
 800448a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800448e:	00d4      	lsls	r4, r2, #3
 8004490:	4622      	mov	r2, r4
 8004492:	462b      	mov	r3, r5
 8004494:	1814      	adds	r4, r2, r0
 8004496:	64bc      	str	r4, [r7, #72]	; 0x48
 8004498:	414b      	adcs	r3, r1
 800449a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800449c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f04f 0100 	mov.w	r1, #0
 80044a6:	f04f 0200 	mov.w	r2, #0
 80044aa:	f04f 0300 	mov.w	r3, #0
 80044ae:	008b      	lsls	r3, r1, #2
 80044b0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80044b4:	0082      	lsls	r2, r0, #2
 80044b6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80044ba:	f7fb fe9f 	bl	80001fc <__aeabi_uldivmod>
 80044be:	4602      	mov	r2, r0
 80044c0:	460b      	mov	r3, r1
 80044c2:	4b2f      	ldr	r3, [pc, #188]	; (8004580 <UART_SetConfig+0x38c>)
 80044c4:	fba3 1302 	umull	r1, r3, r3, r2
 80044c8:	095b      	lsrs	r3, r3, #5
 80044ca:	2164      	movs	r1, #100	; 0x64
 80044cc:	fb01 f303 	mul.w	r3, r1, r3
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	3332      	adds	r3, #50	; 0x32
 80044d6:	4a2a      	ldr	r2, [pc, #168]	; (8004580 <UART_SetConfig+0x38c>)
 80044d8:	fba2 2303 	umull	r2, r3, r2, r3
 80044dc:	095b      	lsrs	r3, r3, #5
 80044de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044e2:	441e      	add	r6, r3
 80044e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044e6:	4618      	mov	r0, r3
 80044e8:	f04f 0100 	mov.w	r1, #0
 80044ec:	4602      	mov	r2, r0
 80044ee:	460b      	mov	r3, r1
 80044f0:	1894      	adds	r4, r2, r2
 80044f2:	603c      	str	r4, [r7, #0]
 80044f4:	415b      	adcs	r3, r3
 80044f6:	607b      	str	r3, [r7, #4]
 80044f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044fc:	1812      	adds	r2, r2, r0
 80044fe:	eb41 0303 	adc.w	r3, r1, r3
 8004502:	f04f 0400 	mov.w	r4, #0
 8004506:	f04f 0500 	mov.w	r5, #0
 800450a:	00dd      	lsls	r5, r3, #3
 800450c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004510:	00d4      	lsls	r4, r2, #3
 8004512:	4622      	mov	r2, r4
 8004514:	462b      	mov	r3, r5
 8004516:	eb12 0a00 	adds.w	sl, r2, r0
 800451a:	eb43 0b01 	adc.w	fp, r3, r1
 800451e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	4618      	mov	r0, r3
 8004524:	f04f 0100 	mov.w	r1, #0
 8004528:	f04f 0200 	mov.w	r2, #0
 800452c:	f04f 0300 	mov.w	r3, #0
 8004530:	008b      	lsls	r3, r1, #2
 8004532:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004536:	0082      	lsls	r2, r0, #2
 8004538:	4650      	mov	r0, sl
 800453a:	4659      	mov	r1, fp
 800453c:	f7fb fe5e 	bl	80001fc <__aeabi_uldivmod>
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4b0e      	ldr	r3, [pc, #56]	; (8004580 <UART_SetConfig+0x38c>)
 8004546:	fba3 1302 	umull	r1, r3, r3, r2
 800454a:	095b      	lsrs	r3, r3, #5
 800454c:	2164      	movs	r1, #100	; 0x64
 800454e:	fb01 f303 	mul.w	r3, r1, r3
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	3332      	adds	r3, #50	; 0x32
 8004558:	4a09      	ldr	r2, [pc, #36]	; (8004580 <UART_SetConfig+0x38c>)
 800455a:	fba2 2303 	umull	r2, r3, r2, r3
 800455e:	095b      	lsrs	r3, r3, #5
 8004560:	f003 020f 	and.w	r2, r3, #15
 8004564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4432      	add	r2, r6
 800456a:	609a      	str	r2, [r3, #8]
}
 800456c:	bf00      	nop
 800456e:	377c      	adds	r7, #124	; 0x7c
 8004570:	46bd      	mov	sp, r7
 8004572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004576:	bf00      	nop
 8004578:	40011000 	.word	0x40011000
 800457c:	40011400 	.word	0x40011400
 8004580:	51eb851f 	.word	0x51eb851f

08004584 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004584:	b084      	sub	sp, #16
 8004586:	b480      	push	{r7}
 8004588:	b085      	sub	sp, #20
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
 800458e:	f107 001c 	add.w	r0, r7, #28
 8004592:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004596:	2300      	movs	r3, #0
 8004598:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800459a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800459c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800459e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80045a2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80045a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80045a6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80045a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80045aa:	431a      	orrs	r2, r3
             Init.ClockDiv
 80045ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80045ae:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80045be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	431a      	orrs	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	b004      	add	sp, #16
 80045d8:	4770      	bx	lr

080045da <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004616:	b580      	push	{r7, lr}
 8004618:	b082      	sub	sp, #8
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2203      	movs	r2, #3
 8004622:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8004624:	2002      	movs	r0, #2
 8004626:	f7fc fe07 	bl	8001238 <HAL_Delay>
  
  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0303 	and.w	r3, r3, #3
}
 8004644:	4618      	mov	r0, r3
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800465a:	2300      	movs	r3, #0
 800465c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800466e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004674:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800467a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	4313      	orrs	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800468a:	f023 030f 	bic.w	r3, r3, #15
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	431a      	orrs	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	b2db      	uxtb	r3, r3
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80046be:	b480      	push	{r7}
 80046c0:	b085      	sub	sp, #20
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
 80046c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3314      	adds	r3, #20
 80046cc:	461a      	mov	r2, r3
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	4413      	add	r3, r2
 80046d2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
}  
 80046d8:	4618      	mov	r0, r3
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80046ee:	2300      	movs	r3, #0
 80046f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800470a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004710:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004716:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	4313      	orrs	r3, r2
 800471c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004722:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	431a      	orrs	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800472e:	2300      	movs	r3, #0

}
 8004730:	4618      	mov	r0, r3
 8004732:	3714      	adds	r7, #20
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b088      	sub	sp, #32
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800474a:	2310      	movs	r3, #16
 800474c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800474e:	2340      	movs	r3, #64	; 0x40
 8004750:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004752:	2300      	movs	r3, #0
 8004754:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800475a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800475c:	f107 0308 	add.w	r3, r7, #8
 8004760:	4619      	mov	r1, r3
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7ff ff74 	bl	8004650 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004768:	f241 3288 	movw	r2, #5000	; 0x1388
 800476c:	2110      	movs	r1, #16
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fa44 	bl	8004bfc <SDMMC_GetCmdResp1>
 8004774:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004776:	69fb      	ldr	r3, [r7, #28]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3720      	adds	r7, #32
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b088      	sub	sp, #32
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800478e:	2311      	movs	r3, #17
 8004790:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004792:	2340      	movs	r3, #64	; 0x40
 8004794:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004796:	2300      	movs	r3, #0
 8004798:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800479a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800479e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047a0:	f107 0308 	add.w	r3, r7, #8
 80047a4:	4619      	mov	r1, r3
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7ff ff52 	bl	8004650 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80047ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b0:	2111      	movs	r1, #17
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fa22 	bl	8004bfc <SDMMC_GetCmdResp1>
 80047b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80047ba:	69fb      	ldr	r3, [r7, #28]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3720      	adds	r7, #32
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b088      	sub	sp, #32
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80047d2:	2312      	movs	r3, #18
 80047d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80047d6:	2340      	movs	r3, #64	; 0x40
 80047d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047da:	2300      	movs	r3, #0
 80047dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047e4:	f107 0308 	add.w	r3, r7, #8
 80047e8:	4619      	mov	r1, r3
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7ff ff30 	bl	8004650 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80047f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f4:	2112      	movs	r1, #18
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fa00 	bl	8004bfc <SDMMC_GetCmdResp1>
 80047fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80047fe:	69fb      	ldr	r3, [r7, #28]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3720      	adds	r7, #32
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b088      	sub	sp, #32
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004816:	2318      	movs	r3, #24
 8004818:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800481a:	2340      	movs	r3, #64	; 0x40
 800481c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800481e:	2300      	movs	r3, #0
 8004820:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004826:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004828:	f107 0308 	add.w	r3, r7, #8
 800482c:	4619      	mov	r1, r3
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7ff ff0e 	bl	8004650 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004834:	f241 3288 	movw	r2, #5000	; 0x1388
 8004838:	2118      	movs	r1, #24
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f9de 	bl	8004bfc <SDMMC_GetCmdResp1>
 8004840:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004842:	69fb      	ldr	r3, [r7, #28]
}
 8004844:	4618      	mov	r0, r3
 8004846:	3720      	adds	r7, #32
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b088      	sub	sp, #32
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800485a:	2319      	movs	r3, #25
 800485c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800485e:	2340      	movs	r3, #64	; 0x40
 8004860:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004862:	2300      	movs	r3, #0
 8004864:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004866:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800486a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800486c:	f107 0308 	add.w	r3, r7, #8
 8004870:	4619      	mov	r1, r3
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7ff feec 	bl	8004650 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004878:	f241 3288 	movw	r2, #5000	; 0x1388
 800487c:	2119      	movs	r1, #25
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f9bc 	bl	8004bfc <SDMMC_GetCmdResp1>
 8004884:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004886:	69fb      	ldr	r3, [r7, #28]
}
 8004888:	4618      	mov	r0, r3
 800488a:	3720      	adds	r7, #32
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b088      	sub	sp, #32
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800489c:	230c      	movs	r3, #12
 800489e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80048a0:	2340      	movs	r3, #64	; 0x40
 80048a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048a4:	2300      	movs	r3, #0
 80048a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048ae:	f107 0308 	add.w	r3, r7, #8
 80048b2:	4619      	mov	r1, r3
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7ff fecb 	bl	8004650 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80048ba:	4a05      	ldr	r2, [pc, #20]	; (80048d0 <SDMMC_CmdStopTransfer+0x40>)
 80048bc:	210c      	movs	r1, #12
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f99c 	bl	8004bfc <SDMMC_GetCmdResp1>
 80048c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048c6:	69fb      	ldr	r3, [r7, #28]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3720      	adds	r7, #32
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	05f5e100 	.word	0x05f5e100

080048d4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b08a      	sub	sp, #40	; 0x28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80048e4:	2307      	movs	r3, #7
 80048e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80048e8:	2340      	movs	r3, #64	; 0x40
 80048ea:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048ec:	2300      	movs	r3, #0
 80048ee:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048f4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048f6:	f107 0310 	add.w	r3, r7, #16
 80048fa:	4619      	mov	r1, r3
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f7ff fea7 	bl	8004650 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004902:	f241 3288 	movw	r2, #5000	; 0x1388
 8004906:	2107      	movs	r1, #7
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f000 f977 	bl	8004bfc <SDMMC_GetCmdResp1>
 800490e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004912:	4618      	mov	r0, r3
 8004914:	3728      	adds	r7, #40	; 0x28
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b088      	sub	sp, #32
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004922:	2300      	movs	r3, #0
 8004924:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004926:	2300      	movs	r3, #0
 8004928:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800492a:	2300      	movs	r3, #0
 800492c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800492e:	2300      	movs	r3, #0
 8004930:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004936:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004938:	f107 0308 	add.w	r3, r7, #8
 800493c:	4619      	mov	r1, r3
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7ff fe86 	bl	8004650 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f92d 	bl	8004ba4 <SDMMC_GetCmdError>
 800494a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800494c:	69fb      	ldr	r3, [r7, #28]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3720      	adds	r7, #32
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b088      	sub	sp, #32
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800495e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004962:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004964:	2308      	movs	r3, #8
 8004966:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004968:	2340      	movs	r3, #64	; 0x40
 800496a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800496c:	2300      	movs	r3, #0
 800496e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004970:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004974:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004976:	f107 0308 	add.w	r3, r7, #8
 800497a:	4619      	mov	r1, r3
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7ff fe67 	bl	8004650 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 fb24 	bl	8004fd0 <SDMMC_GetCmdResp7>
 8004988:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800498a:	69fb      	ldr	r3, [r7, #28]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3720      	adds	r7, #32
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b088      	sub	sp, #32
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80049a2:	2337      	movs	r3, #55	; 0x37
 80049a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80049a6:	2340      	movs	r3, #64	; 0x40
 80049a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049aa:	2300      	movs	r3, #0
 80049ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049b4:	f107 0308 	add.w	r3, r7, #8
 80049b8:	4619      	mov	r1, r3
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f7ff fe48 	bl	8004650 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80049c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c4:	2137      	movs	r1, #55	; 0x37
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f918 	bl	8004bfc <SDMMC_GetCmdResp1>
 80049cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049ce:	69fb      	ldr	r3, [r7, #28]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3720      	adds	r7, #32
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b088      	sub	sp, #32
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80049ee:	2329      	movs	r3, #41	; 0x29
 80049f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80049f2:	2340      	movs	r3, #64	; 0x40
 80049f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049f6:	2300      	movs	r3, #0
 80049f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a00:	f107 0308 	add.w	r3, r7, #8
 8004a04:	4619      	mov	r1, r3
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7ff fe22 	bl	8004650 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 fa2b 	bl	8004e68 <SDMMC_GetCmdResp3>
 8004a12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a14:	69fb      	ldr	r3, [r7, #28]
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3720      	adds	r7, #32
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b088      	sub	sp, #32
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004a2c:	2306      	movs	r3, #6
 8004a2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a30:	2340      	movs	r3, #64	; 0x40
 8004a32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a34:	2300      	movs	r3, #0
 8004a36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a3c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a3e:	f107 0308 	add.w	r3, r7, #8
 8004a42:	4619      	mov	r1, r3
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f7ff fe03 	bl	8004650 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a4e:	2106      	movs	r1, #6
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 f8d3 	bl	8004bfc <SDMMC_GetCmdResp1>
 8004a56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a58:	69fb      	ldr	r3, [r7, #28]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3720      	adds	r7, #32
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b088      	sub	sp, #32
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004a6e:	2333      	movs	r3, #51	; 0x33
 8004a70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a72:	2340      	movs	r3, #64	; 0x40
 8004a74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a76:	2300      	movs	r3, #0
 8004a78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a80:	f107 0308 	add.w	r3, r7, #8
 8004a84:	4619      	mov	r1, r3
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7ff fde2 	bl	8004650 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a90:	2133      	movs	r1, #51	; 0x33
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f8b2 	bl	8004bfc <SDMMC_GetCmdResp1>
 8004a98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a9a:	69fb      	ldr	r3, [r7, #28]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3720      	adds	r7, #32
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b088      	sub	sp, #32
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004ab4:	23c0      	movs	r3, #192	; 0xc0
 8004ab6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004abc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ac0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ac2:	f107 0308 	add.w	r3, r7, #8
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f7ff fdc1 	bl	8004650 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f982 	bl	8004dd8 <SDMMC_GetCmdResp2>
 8004ad4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ad6:	69fb      	ldr	r3, [r7, #28]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3720      	adds	r7, #32
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b088      	sub	sp, #32
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004aee:	2309      	movs	r3, #9
 8004af0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004af2:	23c0      	movs	r3, #192	; 0xc0
 8004af4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004af6:	2300      	movs	r3, #0
 8004af8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004afa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004afe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b00:	f107 0308 	add.w	r3, r7, #8
 8004b04:	4619      	mov	r1, r3
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7ff fda2 	bl	8004650 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f963 	bl	8004dd8 <SDMMC_GetCmdResp2>
 8004b12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b14:	69fb      	ldr	r3, [r7, #28]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3720      	adds	r7, #32
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b088      	sub	sp, #32
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b30:	2340      	movs	r3, #64	; 0x40
 8004b32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b34:	2300      	movs	r3, #0
 8004b36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b3c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b3e:	f107 0308 	add.w	r3, r7, #8
 8004b42:	4619      	mov	r1, r3
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f7ff fd83 	bl	8004650 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	2103      	movs	r1, #3
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f9c8 	bl	8004ee4 <SDMMC_GetCmdResp6>
 8004b54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b56:	69fb      	ldr	r3, [r7, #28]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3720      	adds	r7, #32
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b088      	sub	sp, #32
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004b6e:	230d      	movs	r3, #13
 8004b70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b72:	2340      	movs	r3, #64	; 0x40
 8004b74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b76:	2300      	movs	r3, #0
 8004b78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b80:	f107 0308 	add.w	r3, r7, #8
 8004b84:	4619      	mov	r1, r3
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7ff fd62 	bl	8004650 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b90:	210d      	movs	r1, #13
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f832 	bl	8004bfc <SDMMC_GetCmdResp1>
 8004b98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b9a:	69fb      	ldr	r3, [r7, #28]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3720      	adds	r7, #32
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004bac:	4b11      	ldr	r3, [pc, #68]	; (8004bf4 <SDMMC_GetCmdError+0x50>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a11      	ldr	r2, [pc, #68]	; (8004bf8 <SDMMC_GetCmdError+0x54>)
 8004bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb6:	0a5b      	lsrs	r3, r3, #9
 8004bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bbc:	fb02 f303 	mul.w	r3, r2, r3
 8004bc0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	1e5a      	subs	r2, r3, #1
 8004bc6:	60fa      	str	r2, [r7, #12]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d102      	bne.n	8004bd2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004bcc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004bd0:	e009      	b.n	8004be6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d0f1      	beq.n	8004bc2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	22c5      	movs	r2, #197	; 0xc5
 8004be2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	20000000 	.word	0x20000000
 8004bf8:	10624dd3 	.word	0x10624dd3

08004bfc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b088      	sub	sp, #32
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	460b      	mov	r3, r1
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004c0a:	4b70      	ldr	r3, [pc, #448]	; (8004dcc <SDMMC_GetCmdResp1+0x1d0>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a70      	ldr	r2, [pc, #448]	; (8004dd0 <SDMMC_GetCmdResp1+0x1d4>)
 8004c10:	fba2 2303 	umull	r2, r3, r2, r3
 8004c14:	0a5a      	lsrs	r2, r3, #9
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	fb02 f303 	mul.w	r3, r2, r3
 8004c1c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	1e5a      	subs	r2, r3, #1
 8004c22:	61fa      	str	r2, [r7, #28]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d102      	bne.n	8004c2e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004c28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c2c:	e0c9      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c32:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0ef      	beq.n	8004c1e <SDMMC_GetCmdResp1+0x22>
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1ea      	bne.n	8004c1e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d004      	beq.n	8004c5e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2204      	movs	r2, #4
 8004c58:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004c5a:	2304      	movs	r3, #4
 8004c5c:	e0b1      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d004      	beq.n	8004c74 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e0a6      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	22c5      	movs	r2, #197	; 0xc5
 8004c78:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f7ff fd12 	bl	80046a4 <SDIO_GetCommandResponse>
 8004c80:	4603      	mov	r3, r0
 8004c82:	461a      	mov	r2, r3
 8004c84:	7afb      	ldrb	r3, [r7, #11]
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d001      	beq.n	8004c8e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e099      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004c8e:	2100      	movs	r1, #0
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f7ff fd14 	bl	80046be <SDIO_GetResponse>
 8004c96:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	4b4e      	ldr	r3, [pc, #312]	; (8004dd4 <SDMMC_GetCmdResp1+0x1d8>)
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	e08d      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	da02      	bge.n	8004cb2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004cac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cb0:	e087      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004cbc:	2340      	movs	r3, #64	; 0x40
 8004cbe:	e080      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004cca:	2380      	movs	r3, #128	; 0x80
 8004ccc:	e079      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d002      	beq.n	8004cde <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004cd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004cdc:	e071      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004ce8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cec:	e069      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d002      	beq.n	8004cfe <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004cf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cfc:	e061      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d002      	beq.n	8004d0e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004d08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d0c:	e059      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d1c:	e051      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d002      	beq.n	8004d2e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004d28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d2c:	e049      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004d38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d3c:	e041      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d002      	beq.n	8004d4e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004d48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d4c:	e039      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d002      	beq.n	8004d5e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004d58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d5c:	e031      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004d68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004d6c:	e029      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d002      	beq.n	8004d7e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004d78:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004d7c:	e021      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004d88:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004d8c:	e019      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004d98:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004d9c:	e011      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d002      	beq.n	8004dae <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004da8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004dac:	e009      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f003 0308 	and.w	r3, r3, #8
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004db8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004dbc:	e001      	b.n	8004dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004dbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3720      	adds	r7, #32
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	20000000 	.word	0x20000000
 8004dd0:	10624dd3 	.word	0x10624dd3
 8004dd4:	fdffe008 	.word	0xfdffe008

08004dd8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004de0:	4b1f      	ldr	r3, [pc, #124]	; (8004e60 <SDMMC_GetCmdResp2+0x88>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a1f      	ldr	r2, [pc, #124]	; (8004e64 <SDMMC_GetCmdResp2+0x8c>)
 8004de6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dea:	0a5b      	lsrs	r3, r3, #9
 8004dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df0:	fb02 f303 	mul.w	r3, r2, r3
 8004df4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	1e5a      	subs	r2, r3, #1
 8004dfa:	60fa      	str	r2, [r7, #12]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d102      	bne.n	8004e06 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004e00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e04:	e026      	b.n	8004e54 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e0a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0ef      	beq.n	8004df6 <SDMMC_GetCmdResp2+0x1e>
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1ea      	bne.n	8004df6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d004      	beq.n	8004e36 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2204      	movs	r2, #4
 8004e30:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004e32:	2304      	movs	r3, #4
 8004e34:	e00e      	b.n	8004e54 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d004      	beq.n	8004e4c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e003      	b.n	8004e54 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	22c5      	movs	r2, #197	; 0xc5
 8004e50:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3714      	adds	r7, #20
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	20000000 	.word	0x20000000
 8004e64:	10624dd3 	.word	0x10624dd3

08004e68 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004e70:	4b1a      	ldr	r3, [pc, #104]	; (8004edc <SDMMC_GetCmdResp3+0x74>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a1a      	ldr	r2, [pc, #104]	; (8004ee0 <SDMMC_GetCmdResp3+0x78>)
 8004e76:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7a:	0a5b      	lsrs	r3, r3, #9
 8004e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e80:	fb02 f303 	mul.w	r3, r2, r3
 8004e84:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	1e5a      	subs	r2, r3, #1
 8004e8a:	60fa      	str	r2, [r7, #12]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d102      	bne.n	8004e96 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004e90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e94:	e01b      	b.n	8004ece <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e9a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0ef      	beq.n	8004e86 <SDMMC_GetCmdResp3+0x1e>
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1ea      	bne.n	8004e86 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb4:	f003 0304 	and.w	r3, r3, #4
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d004      	beq.n	8004ec6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2204      	movs	r2, #4
 8004ec0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004ec2:	2304      	movs	r3, #4
 8004ec4:	e003      	b.n	8004ece <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	22c5      	movs	r2, #197	; 0xc5
 8004eca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	20000000 	.word	0x20000000
 8004ee0:	10624dd3 	.word	0x10624dd3

08004ee4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b088      	sub	sp, #32
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	460b      	mov	r3, r1
 8004eee:	607a      	str	r2, [r7, #4]
 8004ef0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004ef2:	4b35      	ldr	r3, [pc, #212]	; (8004fc8 <SDMMC_GetCmdResp6+0xe4>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a35      	ldr	r2, [pc, #212]	; (8004fcc <SDMMC_GetCmdResp6+0xe8>)
 8004ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8004efc:	0a5b      	lsrs	r3, r3, #9
 8004efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f02:	fb02 f303 	mul.w	r3, r2, r3
 8004f06:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	1e5a      	subs	r2, r3, #1
 8004f0c:	61fa      	str	r2, [r7, #28]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d102      	bne.n	8004f18 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f12:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f16:	e052      	b.n	8004fbe <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f1c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0ef      	beq.n	8004f08 <SDMMC_GetCmdResp6+0x24>
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1ea      	bne.n	8004f08 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f36:	f003 0304 	and.w	r3, r3, #4
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d004      	beq.n	8004f48 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2204      	movs	r2, #4
 8004f42:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004f44:	2304      	movs	r3, #4
 8004f46:	e03a      	b.n	8004fbe <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d004      	beq.n	8004f5e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2201      	movs	r2, #1
 8004f58:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e02f      	b.n	8004fbe <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f7ff fba0 	bl	80046a4 <SDIO_GetCommandResponse>
 8004f64:	4603      	mov	r3, r0
 8004f66:	461a      	mov	r2, r3
 8004f68:	7afb      	ldrb	r3, [r7, #11]
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d001      	beq.n	8004f72 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e025      	b.n	8004fbe <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	22c5      	movs	r2, #197	; 0xc5
 8004f76:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004f78:	2100      	movs	r1, #0
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f7ff fb9f 	bl	80046be <SDIO_GetResponse>
 8004f80:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d106      	bne.n	8004f9a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	0c1b      	lsrs	r3, r3, #16
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004f96:	2300      	movs	r3, #0
 8004f98:	e011      	b.n	8004fbe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d002      	beq.n	8004faa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004fa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fa8:	e009      	b.n	8004fbe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d002      	beq.n	8004fba <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fb8:	e001      	b.n	8004fbe <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004fba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3720      	adds	r7, #32
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20000000 	.word	0x20000000
 8004fcc:	10624dd3 	.word	0x10624dd3

08004fd0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004fd8:	4b22      	ldr	r3, [pc, #136]	; (8005064 <SDMMC_GetCmdResp7+0x94>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a22      	ldr	r2, [pc, #136]	; (8005068 <SDMMC_GetCmdResp7+0x98>)
 8004fde:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe2:	0a5b      	lsrs	r3, r3, #9
 8004fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe8:	fb02 f303 	mul.w	r3, r2, r3
 8004fec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	1e5a      	subs	r2, r3, #1
 8004ff2:	60fa      	str	r2, [r7, #12]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d102      	bne.n	8004ffe <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004ff8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004ffc:	e02c      	b.n	8005058 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005002:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0ef      	beq.n	8004fee <SDMMC_GetCmdResp7+0x1e>
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1ea      	bne.n	8004fee <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501c:	f003 0304 	and.w	r3, r3, #4
 8005020:	2b00      	cmp	r3, #0
 8005022:	d004      	beq.n	800502e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2204      	movs	r2, #4
 8005028:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800502a:	2304      	movs	r3, #4
 800502c:	e014      	b.n	8005058 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d004      	beq.n	8005044 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005040:	2301      	movs	r3, #1
 8005042:	e009      	b.n	8005058 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504c:	2b00      	cmp	r3, #0
 800504e:	d002      	beq.n	8005056 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2240      	movs	r2, #64	; 0x40
 8005054:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005056:	2300      	movs	r3, #0
  
}
 8005058:	4618      	mov	r0, r3
 800505a:	3714      	adds	r7, #20
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr
 8005064:	20000000 	.word	0x20000000
 8005068:	10624dd3 	.word	0x10624dd3

0800506c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005070:	4904      	ldr	r1, [pc, #16]	; (8005084 <MX_FATFS_Init+0x18>)
 8005072:	4805      	ldr	r0, [pc, #20]	; (8005088 <MX_FATFS_Init+0x1c>)
 8005074:	f000 f9ca 	bl	800540c <FATFS_LinkDriver>
 8005078:	4603      	mov	r3, r0
 800507a:	461a      	mov	r2, r3
 800507c:	4b03      	ldr	r3, [pc, #12]	; (800508c <MX_FATFS_Init+0x20>)
 800507e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005080:	bf00      	nop
 8005082:	bd80      	pop	{r7, pc}
 8005084:	20000868 	.word	0x20000868
 8005088:	08006d38 	.word	0x08006d38
 800508c:	20000864 	.word	0x20000864

08005090 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005096:	2300      	movs	r3, #0
 8005098:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800509a:	f000 f879 	bl	8005190 <BSP_SD_IsDetected>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d001      	beq.n	80050a8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e012      	b.n	80050ce <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80050a8:	480b      	ldr	r0, [pc, #44]	; (80050d8 <BSP_SD_Init+0x48>)
 80050aa:	f7fd f925 	bl	80022f8 <HAL_SD_Init>
 80050ae:	4603      	mov	r3, r0
 80050b0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80050b2:	79fb      	ldrb	r3, [r7, #7]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d109      	bne.n	80050cc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80050b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80050bc:	4806      	ldr	r0, [pc, #24]	; (80050d8 <BSP_SD_Init+0x48>)
 80050be:	f7fd fefd 	bl	8002ebc <HAL_SD_ConfigWideBusOperation>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80050cc:	79fb      	ldrb	r3, [r7, #7]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	20000740 	.word	0x20000740

080050dc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b088      	sub	sp, #32
 80050e0:	af02      	add	r7, sp, #8
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
 80050e8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80050ea:	2300      	movs	r3, #0
 80050ec:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	68f9      	ldr	r1, [r7, #12]
 80050f8:	4806      	ldr	r0, [pc, #24]	; (8005114 <BSP_SD_ReadBlocks+0x38>)
 80050fa:	f7fd f9ab 	bl	8002454 <HAL_SD_ReadBlocks>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005108:	7dfb      	ldrb	r3, [r7, #23]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3718      	adds	r7, #24
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	20000740 	.word	0x20000740

08005118 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b088      	sub	sp, #32
 800511c:	af02      	add	r7, sp, #8
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005126:	2300      	movs	r3, #0
 8005128:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	68f9      	ldr	r1, [r7, #12]
 8005134:	4806      	ldr	r0, [pc, #24]	; (8005150 <BSP_SD_WriteBlocks+0x38>)
 8005136:	f7fd fb6b 	bl	8002810 <HAL_SD_WriteBlocks>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005144:	7dfb      	ldrb	r3, [r7, #23]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3718      	adds	r7, #24
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	20000740 	.word	0x20000740

08005154 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005158:	4805      	ldr	r0, [pc, #20]	; (8005170 <BSP_SD_GetCardState+0x1c>)
 800515a:	f7fd ff49 	bl	8002ff0 <HAL_SD_GetCardState>
 800515e:	4603      	mov	r3, r0
 8005160:	2b04      	cmp	r3, #4
 8005162:	bf14      	ite	ne
 8005164:	2301      	movne	r3, #1
 8005166:	2300      	moveq	r3, #0
 8005168:	b2db      	uxtb	r3, r3
}
 800516a:	4618      	mov	r0, r3
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	20000740 	.word	0x20000740

08005174 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800517c:	6879      	ldr	r1, [r7, #4]
 800517e:	4803      	ldr	r0, [pc, #12]	; (800518c <BSP_SD_GetCardInfo+0x18>)
 8005180:	f7fd fe70 	bl	8002e64 <HAL_SD_GetCardInfo>
}
 8005184:	bf00      	nop
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	20000740 	.word	0x20000740

08005190 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005196:	2301      	movs	r3, #1
 8005198:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800519a:	79fb      	ldrb	r3, [r7, #7]
 800519c:	b2db      	uxtb	r3, r3
}
 800519e:	4618      	mov	r0, r3
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
	...

080051ac <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	4603      	mov	r3, r0
 80051b4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80051b6:	4b0b      	ldr	r3, [pc, #44]	; (80051e4 <SD_CheckStatus+0x38>)
 80051b8:	2201      	movs	r2, #1
 80051ba:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80051bc:	f7ff ffca 	bl	8005154 <BSP_SD_GetCardState>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d107      	bne.n	80051d6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80051c6:	4b07      	ldr	r3, [pc, #28]	; (80051e4 <SD_CheckStatus+0x38>)
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	f023 0301 	bic.w	r3, r3, #1
 80051d0:	b2da      	uxtb	r2, r3
 80051d2:	4b04      	ldr	r3, [pc, #16]	; (80051e4 <SD_CheckStatus+0x38>)
 80051d4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80051d6:	4b03      	ldr	r3, [pc, #12]	; (80051e4 <SD_CheckStatus+0x38>)
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	b2db      	uxtb	r3, r3
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	20000009 	.word	0x20000009

080051e8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	4603      	mov	r3, r0
 80051f0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80051f2:	4b0b      	ldr	r3, [pc, #44]	; (8005220 <SD_initialize+0x38>)
 80051f4:	2201      	movs	r2, #1
 80051f6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80051f8:	f7ff ff4a 	bl	8005090 <BSP_SD_Init>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d107      	bne.n	8005212 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005202:	79fb      	ldrb	r3, [r7, #7]
 8005204:	4618      	mov	r0, r3
 8005206:	f7ff ffd1 	bl	80051ac <SD_CheckStatus>
 800520a:	4603      	mov	r3, r0
 800520c:	461a      	mov	r2, r3
 800520e:	4b04      	ldr	r3, [pc, #16]	; (8005220 <SD_initialize+0x38>)
 8005210:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005212:	4b03      	ldr	r3, [pc, #12]	; (8005220 <SD_initialize+0x38>)
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	b2db      	uxtb	r3, r3
}
 8005218:	4618      	mov	r0, r3
 800521a:	3708      	adds	r7, #8
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	20000009 	.word	0x20000009

08005224 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	4603      	mov	r3, r0
 800522c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800522e:	79fb      	ldrb	r3, [r7, #7]
 8005230:	4618      	mov	r0, r3
 8005232:	f7ff ffbb 	bl	80051ac <SD_CheckStatus>
 8005236:	4603      	mov	r3, r0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3708      	adds	r7, #8
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	60b9      	str	r1, [r7, #8]
 8005248:	607a      	str	r2, [r7, #4]
 800524a:	603b      	str	r3, [r7, #0]
 800524c:	4603      	mov	r3, r0
 800524e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005254:	f04f 33ff 	mov.w	r3, #4294967295
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	6879      	ldr	r1, [r7, #4]
 800525c:	68b8      	ldr	r0, [r7, #8]
 800525e:	f7ff ff3d 	bl	80050dc <BSP_SD_ReadBlocks>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d107      	bne.n	8005278 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005268:	bf00      	nop
 800526a:	f7ff ff73 	bl	8005154 <BSP_SD_GetCardState>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1fa      	bne.n	800526a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005274:	2300      	movs	r3, #0
 8005276:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005278:	7dfb      	ldrb	r3, [r7, #23]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b086      	sub	sp, #24
 8005286:	af00      	add	r7, sp, #0
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
 800528c:	603b      	str	r3, [r7, #0]
 800528e:	4603      	mov	r3, r0
 8005290:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005296:	f04f 33ff 	mov.w	r3, #4294967295
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	6879      	ldr	r1, [r7, #4]
 800529e:	68b8      	ldr	r0, [r7, #8]
 80052a0:	f7ff ff3a 	bl	8005118 <BSP_SD_WriteBlocks>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d107      	bne.n	80052ba <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80052aa:	bf00      	nop
 80052ac:	f7ff ff52 	bl	8005154 <BSP_SD_GetCardState>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1fa      	bne.n	80052ac <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80052ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3718      	adds	r7, #24
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b08c      	sub	sp, #48	; 0x30
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	4603      	mov	r3, r0
 80052cc:	603a      	str	r2, [r7, #0]
 80052ce:	71fb      	strb	r3, [r7, #7]
 80052d0:	460b      	mov	r3, r1
 80052d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80052da:	4b25      	ldr	r3, [pc, #148]	; (8005370 <SD_ioctl+0xac>)
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <SD_ioctl+0x28>
 80052e8:	2303      	movs	r3, #3
 80052ea:	e03c      	b.n	8005366 <SD_ioctl+0xa2>

  switch (cmd)
 80052ec:	79bb      	ldrb	r3, [r7, #6]
 80052ee:	2b03      	cmp	r3, #3
 80052f0:	d834      	bhi.n	800535c <SD_ioctl+0x98>
 80052f2:	a201      	add	r2, pc, #4	; (adr r2, 80052f8 <SD_ioctl+0x34>)
 80052f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f8:	08005309 	.word	0x08005309
 80052fc:	08005311 	.word	0x08005311
 8005300:	08005329 	.word	0x08005329
 8005304:	08005343 	.word	0x08005343
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005308:	2300      	movs	r3, #0
 800530a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800530e:	e028      	b.n	8005362 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005310:	f107 030c 	add.w	r3, r7, #12
 8005314:	4618      	mov	r0, r3
 8005316:	f7ff ff2d 	bl	8005174 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800531a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005320:	2300      	movs	r3, #0
 8005322:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005326:	e01c      	b.n	8005362 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005328:	f107 030c 	add.w	r3, r7, #12
 800532c:	4618      	mov	r0, r3
 800532e:	f7ff ff21 	bl	8005174 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005334:	b29a      	uxth	r2, r3
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800533a:	2300      	movs	r3, #0
 800533c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005340:	e00f      	b.n	8005362 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005342:	f107 030c 	add.w	r3, r7, #12
 8005346:	4618      	mov	r0, r3
 8005348:	f7ff ff14 	bl	8005174 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800534c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534e:	0a5a      	lsrs	r2, r3, #9
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005354:	2300      	movs	r3, #0
 8005356:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800535a:	e002      	b.n	8005362 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800535c:	2304      	movs	r3, #4
 800535e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005362:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005366:	4618      	mov	r0, r3
 8005368:	3730      	adds	r7, #48	; 0x30
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	20000009 	.word	0x20000009

08005374 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005374:	b480      	push	{r7}
 8005376:	b087      	sub	sp, #28
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	4613      	mov	r3, r2
 8005380:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005382:	2301      	movs	r3, #1
 8005384:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005386:	2300      	movs	r3, #0
 8005388:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800538a:	4b1f      	ldr	r3, [pc, #124]	; (8005408 <FATFS_LinkDriverEx+0x94>)
 800538c:	7a5b      	ldrb	r3, [r3, #9]
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d131      	bne.n	80053f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005394:	4b1c      	ldr	r3, [pc, #112]	; (8005408 <FATFS_LinkDriverEx+0x94>)
 8005396:	7a5b      	ldrb	r3, [r3, #9]
 8005398:	b2db      	uxtb	r3, r3
 800539a:	461a      	mov	r2, r3
 800539c:	4b1a      	ldr	r3, [pc, #104]	; (8005408 <FATFS_LinkDriverEx+0x94>)
 800539e:	2100      	movs	r1, #0
 80053a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80053a2:	4b19      	ldr	r3, [pc, #100]	; (8005408 <FATFS_LinkDriverEx+0x94>)
 80053a4:	7a5b      	ldrb	r3, [r3, #9]
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	4a17      	ldr	r2, [pc, #92]	; (8005408 <FATFS_LinkDriverEx+0x94>)
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80053b2:	4b15      	ldr	r3, [pc, #84]	; (8005408 <FATFS_LinkDriverEx+0x94>)
 80053b4:	7a5b      	ldrb	r3, [r3, #9]
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	461a      	mov	r2, r3
 80053ba:	4b13      	ldr	r3, [pc, #76]	; (8005408 <FATFS_LinkDriverEx+0x94>)
 80053bc:	4413      	add	r3, r2
 80053be:	79fa      	ldrb	r2, [r7, #7]
 80053c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80053c2:	4b11      	ldr	r3, [pc, #68]	; (8005408 <FATFS_LinkDriverEx+0x94>)
 80053c4:	7a5b      	ldrb	r3, [r3, #9]
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	1c5a      	adds	r2, r3, #1
 80053ca:	b2d1      	uxtb	r1, r2
 80053cc:	4a0e      	ldr	r2, [pc, #56]	; (8005408 <FATFS_LinkDriverEx+0x94>)
 80053ce:	7251      	strb	r1, [r2, #9]
 80053d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80053d2:	7dbb      	ldrb	r3, [r7, #22]
 80053d4:	3330      	adds	r3, #48	; 0x30
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	3301      	adds	r3, #1
 80053e0:	223a      	movs	r2, #58	; 0x3a
 80053e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	3302      	adds	r3, #2
 80053e8:	222f      	movs	r2, #47	; 0x2f
 80053ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	3303      	adds	r3, #3
 80053f0:	2200      	movs	r2, #0
 80053f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80053f4:	2300      	movs	r3, #0
 80053f6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80053f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	371c      	adds	r7, #28
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	2000008c 	.word	0x2000008c

0800540c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005416:	2200      	movs	r2, #0
 8005418:	6839      	ldr	r1, [r7, #0]
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7ff ffaa 	bl	8005374 <FATFS_LinkDriverEx>
 8005420:	4603      	mov	r3, r0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <hex2int>:
#include <time.h>

#define boolstr(s) ((s) ? "true" : "false")

static int hex2int(char c)
{
 800542a:	b480      	push	{r7}
 800542c:	b083      	sub	sp, #12
 800542e:	af00      	add	r7, sp, #0
 8005430:	4603      	mov	r3, r0
 8005432:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9')
 8005434:	79fb      	ldrb	r3, [r7, #7]
 8005436:	2b2f      	cmp	r3, #47	; 0x2f
 8005438:	d905      	bls.n	8005446 <hex2int+0x1c>
 800543a:	79fb      	ldrb	r3, [r7, #7]
 800543c:	2b39      	cmp	r3, #57	; 0x39
 800543e:	d802      	bhi.n	8005446 <hex2int+0x1c>
        return c - '0';
 8005440:	79fb      	ldrb	r3, [r7, #7]
 8005442:	3b30      	subs	r3, #48	; 0x30
 8005444:	e013      	b.n	800546e <hex2int+0x44>
    if (c >= 'A' && c <= 'F')
 8005446:	79fb      	ldrb	r3, [r7, #7]
 8005448:	2b40      	cmp	r3, #64	; 0x40
 800544a:	d905      	bls.n	8005458 <hex2int+0x2e>
 800544c:	79fb      	ldrb	r3, [r7, #7]
 800544e:	2b46      	cmp	r3, #70	; 0x46
 8005450:	d802      	bhi.n	8005458 <hex2int+0x2e>
        return c - 'A' + 10;
 8005452:	79fb      	ldrb	r3, [r7, #7]
 8005454:	3b37      	subs	r3, #55	; 0x37
 8005456:	e00a      	b.n	800546e <hex2int+0x44>
    if (c >= 'a' && c <= 'f')
 8005458:	79fb      	ldrb	r3, [r7, #7]
 800545a:	2b60      	cmp	r3, #96	; 0x60
 800545c:	d905      	bls.n	800546a <hex2int+0x40>
 800545e:	79fb      	ldrb	r3, [r7, #7]
 8005460:	2b66      	cmp	r3, #102	; 0x66
 8005462:	d802      	bhi.n	800546a <hex2int+0x40>
        return c - 'a' + 10;
 8005464:	79fb      	ldrb	r3, [r7, #7]
 8005466:	3b57      	subs	r3, #87	; 0x57
 8005468:	e001      	b.n	800546e <hex2int+0x44>
    return -1;
 800546a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800546e:	4618      	mov	r0, r3
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
	...

0800547c <minmea_check>:

bool minmea_check(const char *sentence)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
    uint8_t checksum = 0x00;
 8005484:	2300      	movs	r3, #0
 8005486:	75fb      	strb	r3, [r7, #23]

    // Sequence length is limited.
    if (strlen(sentence) > MINMEA_MAX_LENGTH + 3)
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f7fa feaf 	bl	80001ec <strlen>
 800548e:	4603      	mov	r3, r0
 8005490:	2b53      	cmp	r3, #83	; 0x53
 8005492:	d901      	bls.n	8005498 <minmea_check+0x1c>
        return false;
 8005494:	2300      	movs	r3, #0
 8005496:	e063      	b.n	8005560 <minmea_check+0xe4>

    // A valid sentence starts with "$".
    if (*sentence++ != '$')
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	1c5a      	adds	r2, r3, #1
 800549c:	607a      	str	r2, [r7, #4]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	2b24      	cmp	r3, #36	; 0x24
 80054a2:	d008      	beq.n	80054b6 <minmea_check+0x3a>
        return false;
 80054a4:	2300      	movs	r3, #0
 80054a6:	e05b      	b.n	8005560 <minmea_check+0xe4>

    // The optional checksum is an XOR of all bytes between "$" and "*".
    while (*sentence && *sentence != '*' && isprint((unsigned char) *sentence))
        checksum ^= *sentence++;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	1c5a      	adds	r2, r3, #1
 80054ac:	607a      	str	r2, [r7, #4]
 80054ae:	781a      	ldrb	r2, [r3, #0]
 80054b0:	7dfb      	ldrb	r3, [r7, #23]
 80054b2:	4053      	eors	r3, r2
 80054b4:	75fb      	strb	r3, [r7, #23]
    while (*sentence && *sentence != '*' && isprint((unsigned char) *sentence))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00d      	beq.n	80054da <minmea_check+0x5e>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	2b2a      	cmp	r3, #42	; 0x2a
 80054c4:	d009      	beq.n	80054da <minmea_check+0x5e>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	3301      	adds	r3, #1
 80054cc:	4a26      	ldr	r2, [pc, #152]	; (8005568 <minmea_check+0xec>)
 80054ce:	4413      	add	r3, r2
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	f003 0397 	and.w	r3, r3, #151	; 0x97
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1e6      	bne.n	80054a8 <minmea_check+0x2c>

    if (*sentence == '*') {
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b2a      	cmp	r3, #42	; 0x2a
 80054e0:	d129      	bne.n	8005536 <minmea_check+0xba>
        // Extract checksum.
        sentence++;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	3301      	adds	r3, #1
 80054e6:	607b      	str	r3, [r7, #4]
        int upper = hex2int(*sentence++);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	1c5a      	adds	r2, r3, #1
 80054ec:	607a      	str	r2, [r7, #4]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7ff ff9a 	bl	800542a <hex2int>
 80054f6:	6138      	str	r0, [r7, #16]
        if (upper == -1)
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fe:	d101      	bne.n	8005504 <minmea_check+0x88>
            return false;
 8005500:	2300      	movs	r3, #0
 8005502:	e02d      	b.n	8005560 <minmea_check+0xe4>
        int lower = hex2int(*sentence++);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	1c5a      	adds	r2, r3, #1
 8005508:	607a      	str	r2, [r7, #4]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	4618      	mov	r0, r3
 800550e:	f7ff ff8c 	bl	800542a <hex2int>
 8005512:	60f8      	str	r0, [r7, #12]
        if (lower == -1)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551a:	d101      	bne.n	8005520 <minmea_check+0xa4>
            return false;
 800551c:	2300      	movs	r3, #0
 800551e:	e01f      	b.n	8005560 <minmea_check+0xe4>
        int expected = upper << 4 | lower;
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	011b      	lsls	r3, r3, #4
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	4313      	orrs	r3, r2
 8005528:	60bb      	str	r3, [r7, #8]

        // Check for checksum mismatch.
        if (checksum != expected)
 800552a:	7dfb      	ldrb	r3, [r7, #23]
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	429a      	cmp	r2, r3
 8005530:	d001      	beq.n	8005536 <minmea_check+0xba>
            return false;
 8005532:	2300      	movs	r3, #0
 8005534:	e014      	b.n	8005560 <minmea_check+0xe4>
    }

    // The only stuff allowed at this point is a newline.
    if (*sentence && strcmp(sentence, "\n") && strcmp(sentence, "\r\n"))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00f      	beq.n	800555e <minmea_check+0xe2>
 800553e:	490b      	ldr	r1, [pc, #44]	; (800556c <minmea_check+0xf0>)
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f7fa fe49 	bl	80001d8 <strcmp>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d008      	beq.n	800555e <minmea_check+0xe2>
 800554c:	4908      	ldr	r1, [pc, #32]	; (8005570 <minmea_check+0xf4>)
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7fa fe42 	bl	80001d8 <strcmp>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <minmea_check+0xe2>
        return false;
 800555a:	2300      	movs	r3, #0
 800555c:	e000      	b.n	8005560 <minmea_check+0xe4>

    return true;
 800555e:	2301      	movs	r3, #1
}
 8005560:	4618      	mov	r0, r3
 8005562:	3718      	adds	r7, #24
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	08006d4c 	.word	0x08006d4c
 800556c:	08006ca8 	.word	0x08006ca8
 8005570:	08006cac 	.word	0x08006cac

08005574 <minmea_isfield>:

static inline bool minmea_isfield(char c) {
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	4603      	mov	r3, r0
 800557c:	71fb      	strb	r3, [r7, #7]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 800557e:	79fb      	ldrb	r3, [r7, #7]
 8005580:	3301      	adds	r3, #1
 8005582:	4a0c      	ldr	r2, [pc, #48]	; (80055b4 <minmea_isfield+0x40>)
 8005584:	4413      	add	r3, r2
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	f003 0397 	and.w	r3, r3, #151	; 0x97
 800558c:	2b00      	cmp	r3, #0
 800558e:	d007      	beq.n	80055a0 <minmea_isfield+0x2c>
 8005590:	79fb      	ldrb	r3, [r7, #7]
 8005592:	2b2c      	cmp	r3, #44	; 0x2c
 8005594:	d004      	beq.n	80055a0 <minmea_isfield+0x2c>
 8005596:	79fb      	ldrb	r3, [r7, #7]
 8005598:	2b2a      	cmp	r3, #42	; 0x2a
 800559a:	d001      	beq.n	80055a0 <minmea_isfield+0x2c>
 800559c:	2301      	movs	r3, #1
 800559e:	e000      	b.n	80055a2 <minmea_isfield+0x2e>
 80055a0:	2300      	movs	r3, #0
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	b2db      	uxtb	r3, r3
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	08006d4c 	.word	0x08006d4c

080055b8 <minmea_scan>:

bool minmea_scan(const char *sentence, const char *format, ...)
{
 80055b8:	b40e      	push	{r1, r2, r3}
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b0a7      	sub	sp, #156	; 0x9c
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
    bool result = false;
 80055c2:	2300      	movs	r3, #0
 80055c4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    bool optional = false;
 80055c8:	2300      	movs	r3, #0
 80055ca:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
    va_list ap;
    va_start(ap, format);
 80055ce:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80055d2:	62fb      	str	r3, [r7, #44]	; 0x2c

    const char *field = sentence;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        } else { \
            field = NULL; \
        } \
    } while (0)

    while (*format) {
 80055da:	e379      	b.n	8005cd0 <minmea_scan+0x718>
        char type = *format++;
 80055dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80055e0:	1c5a      	adds	r2, r3, #1
 80055e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

        if (type == ';') {
 80055ec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80055f0:	2b3b      	cmp	r3, #59	; 0x3b
 80055f2:	d103      	bne.n	80055fc <minmea_scan+0x44>
            // All further fields are optional.
            optional = true;
 80055f4:	2301      	movs	r3, #1
 80055f6:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
            continue;
 80055fa:	e369      	b.n	8005cd0 <minmea_scan+0x718>
        }

        if (!field && !optional) {
 80055fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005600:	2b00      	cmp	r3, #0
 8005602:	d107      	bne.n	8005614 <minmea_scan+0x5c>
 8005604:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8005608:	f083 0301 	eor.w	r3, r3, #1
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	f040 8368 	bne.w	8005ce4 <minmea_scan+0x72c>
            // Field requested but we ran out if input. Bail out.
            goto parse_error;
        }

        switch (type) {
 8005614:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005618:	3b44      	subs	r3, #68	; 0x44
 800561a:	2b30      	cmp	r3, #48	; 0x30
 800561c:	f200 8364 	bhi.w	8005ce8 <minmea_scan+0x730>
 8005620:	a201      	add	r2, pc, #4	; (adr r2, 8005628 <minmea_scan+0x70>)
 8005622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005626:	bf00      	nop
 8005628:	08005a3b 	.word	0x08005a3b
 800562c:	08005ce9 	.word	0x08005ce9
 8005630:	08005ce9 	.word	0x08005ce9
 8005634:	08005ce9 	.word	0x08005ce9
 8005638:	08005ce9 	.word	0x08005ce9
 800563c:	08005ce9 	.word	0x08005ce9
 8005640:	08005ce9 	.word	0x08005ce9
 8005644:	08005ce9 	.word	0x08005ce9
 8005648:	08005ce9 	.word	0x08005ce9
 800564c:	08005ce9 	.word	0x08005ce9
 8005650:	08005ce9 	.word	0x08005ce9
 8005654:	08005ce9 	.word	0x08005ce9
 8005658:	08005ce9 	.word	0x08005ce9
 800565c:	08005ce9 	.word	0x08005ce9
 8005660:	08005ce9 	.word	0x08005ce9
 8005664:	08005ce9 	.word	0x08005ce9
 8005668:	08005b29 	.word	0x08005b29
 800566c:	08005ce9 	.word	0x08005ce9
 8005670:	08005ce9 	.word	0x08005ce9
 8005674:	08005ce9 	.word	0x08005ce9
 8005678:	08005ce9 	.word	0x08005ce9
 800567c:	08005ce9 	.word	0x08005ce9
 8005680:	08005ce9 	.word	0x08005ce9
 8005684:	08005ce9 	.word	0x08005ce9
 8005688:	08005ce9 	.word	0x08005ce9
 800568c:	08005ce9 	.word	0x08005ce9
 8005690:	08005ce9 	.word	0x08005ce9
 8005694:	08005c9b 	.word	0x08005c9b
 8005698:	08005ce9 	.word	0x08005ce9
 800569c:	08005ce9 	.word	0x08005ce9
 80056a0:	08005ce9 	.word	0x08005ce9
 80056a4:	080056ed 	.word	0x080056ed
 80056a8:	08005727 	.word	0x08005727
 80056ac:	08005ce9 	.word	0x08005ce9
 80056b0:	080057cd 	.word	0x080057cd
 80056b4:	08005ce9 	.word	0x08005ce9
 80056b8:	08005ce9 	.word	0x08005ce9
 80056bc:	0800594d 	.word	0x0800594d
 80056c0:	08005ce9 	.word	0x08005ce9
 80056c4:	08005ce9 	.word	0x08005ce9
 80056c8:	08005ce9 	.word	0x08005ce9
 80056cc:	08005ce9 	.word	0x08005ce9
 80056d0:	08005ce9 	.word	0x08005ce9
 80056d4:	08005ce9 	.word	0x08005ce9
 80056d8:	08005ce9 	.word	0x08005ce9
 80056dc:	08005ce9 	.word	0x08005ce9
 80056e0:	08005ce9 	.word	0x08005ce9
 80056e4:	0800598b 	.word	0x0800598b
 80056e8:	080059cd 	.word	0x080059cd
            case 'c': { // Single character field (char).
                char value = '\0';
 80056ec:	2300      	movs	r3, #0
 80056ee:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

                if (field && minmea_isfield(*field))
 80056f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00d      	beq.n	8005716 <minmea_scan+0x15e>
 80056fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	4618      	mov	r0, r3
 8005702:	f7ff ff37 	bl	8005574 <minmea_isfield>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d004      	beq.n	8005716 <minmea_scan+0x15e>
                    value = *field;
 800570c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

                *va_arg(ap, char *) = value;
 8005716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005718:	1d1a      	adds	r2, r3, #4
 800571a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8005722:	701a      	strb	r2, [r3, #0]
            } break;
 8005724:	e2ba      	b.n	8005c9c <minmea_scan+0x6e4>

            case 'd': { // Single character direction field (int).
                int value = 0;
 8005726:	2300      	movs	r3, #0
 8005728:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                if (field && minmea_isfield(*field)) {
 800572c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005730:	2b00      	cmp	r3, #0
 8005732:	d042      	beq.n	80057ba <minmea_scan+0x202>
 8005734:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	4618      	mov	r0, r3
 800573c:	f7ff ff1a 	bl	8005574 <minmea_isfield>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d039      	beq.n	80057ba <minmea_scan+0x202>
                    switch (*field) {
 8005746:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	3b45      	subs	r3, #69	; 0x45
 800574e:	2b12      	cmp	r3, #18
 8005750:	f200 82cc 	bhi.w	8005cec <minmea_scan+0x734>
 8005754:	a201      	add	r2, pc, #4	; (adr r2, 800575c <minmea_scan+0x1a4>)
 8005756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575a:	bf00      	nop
 800575c:	080057a9 	.word	0x080057a9
 8005760:	08005ced 	.word	0x08005ced
 8005764:	08005ced 	.word	0x08005ced
 8005768:	08005ced 	.word	0x08005ced
 800576c:	08005ced 	.word	0x08005ced
 8005770:	08005ced 	.word	0x08005ced
 8005774:	08005ced 	.word	0x08005ced
 8005778:	08005ced 	.word	0x08005ced
 800577c:	08005ced 	.word	0x08005ced
 8005780:	080057a9 	.word	0x080057a9
 8005784:	08005ced 	.word	0x08005ced
 8005788:	08005ced 	.word	0x08005ced
 800578c:	08005ced 	.word	0x08005ced
 8005790:	08005ced 	.word	0x08005ced
 8005794:	080057b1 	.word	0x080057b1
 8005798:	08005ced 	.word	0x08005ced
 800579c:	08005ced 	.word	0x08005ced
 80057a0:	08005ced 	.word	0x08005ced
 80057a4:	080057b1 	.word	0x080057b1
                        case 'N':
                        case 'E':
                            value = 1;
 80057a8:	2301      	movs	r3, #1
 80057aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                            break;
 80057ae:	e005      	b.n	80057bc <minmea_scan+0x204>
                        case 'S':
                        case 'W':
                            value = -1;
 80057b0:	f04f 33ff 	mov.w	r3, #4294967295
 80057b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                            break;
 80057b8:	e000      	b.n	80057bc <minmea_scan+0x204>
                        default:
                            goto parse_error;
                    }
                }
 80057ba:	bf00      	nop

                *va_arg(ap, int *) = value;
 80057bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057be:	1d1a      	adds	r2, r3, #4
 80057c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80057c8:	601a      	str	r2, [r3, #0]
            } break;
 80057ca:	e267      	b.n	8005c9c <minmea_scan+0x6e4>

            case 'f': { // Fractional value with scale (struct minmea_float).
                int sign = 0;
 80057cc:	2300      	movs	r3, #0
 80057ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                int_least32_t value = -1;
 80057d2:	f04f 33ff 	mov.w	r3, #4294967295
 80057d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                int_least32_t scale = 0;
 80057da:	2300      	movs	r3, #0
 80057dc:	67fb      	str	r3, [r7, #124]	; 0x7c

                if (field) {
 80057de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d07f      	beq.n	80058e6 <minmea_scan+0x32e>
                    while (minmea_isfield(*field)) {
 80057e6:	e075      	b.n	80058d4 <minmea_scan+0x31c>
                        if (*field == '+' && !sign && value == -1) {
 80057e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	2b2b      	cmp	r3, #43	; 0x2b
 80057f0:	d10c      	bne.n	800580c <minmea_scan+0x254>
 80057f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d108      	bne.n	800580c <minmea_scan+0x254>
 80057fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80057fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005802:	d103      	bne.n	800580c <minmea_scan+0x254>
                            sign = 1;
 8005804:	2301      	movs	r3, #1
 8005806:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800580a:	e05e      	b.n	80058ca <minmea_scan+0x312>
                        } else if (*field == '-' && !sign && value == -1) {
 800580c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	2b2d      	cmp	r3, #45	; 0x2d
 8005814:	d10d      	bne.n	8005832 <minmea_scan+0x27a>
 8005816:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800581a:	2b00      	cmp	r3, #0
 800581c:	d109      	bne.n	8005832 <minmea_scan+0x27a>
 800581e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005826:	d104      	bne.n	8005832 <minmea_scan+0x27a>
                            sign = -1;
 8005828:	f04f 33ff 	mov.w	r3, #4294967295
 800582c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005830:	e04b      	b.n	80058ca <minmea_scan+0x312>
                        } else if (isdigit((unsigned char) *field)) {
 8005832:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	3301      	adds	r3, #1
 800583a:	4ab9      	ldr	r2, [pc, #740]	; (8005b20 <minmea_scan+0x568>)
 800583c:	4413      	add	r3, r2
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	f003 0304 	and.w	r3, r3, #4
 8005844:	2b00      	cmp	r3, #0
 8005846:	d034      	beq.n	80058b2 <minmea_scan+0x2fa>
                            int digit = *field - '0';
 8005848:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	3b30      	subs	r3, #48	; 0x30
 8005850:	63bb      	str	r3, [r7, #56]	; 0x38
                            if (value == -1)
 8005852:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585a:	d102      	bne.n	8005862 <minmea_scan+0x2aa>
                                value = 0;
 800585c:	2300      	movs	r3, #0
 800585e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                            if (value > (INT_LEAST32_MAX-digit) / 10) {
 8005862:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005864:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8005868:	1a9b      	subs	r3, r3, r2
 800586a:	4aae      	ldr	r2, [pc, #696]	; (8005b24 <minmea_scan+0x56c>)
 800586c:	fb82 1203 	smull	r1, r2, r2, r3
 8005870:	1092      	asrs	r2, r2, #2
 8005872:	17db      	asrs	r3, r3, #31
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800587a:	429a      	cmp	r2, r3
 800587c:	dd04      	ble.n	8005888 <minmea_scan+0x2d0>
                                /* we ran out of bits, what do we do? */
                                if (scale) {
 800587e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 8235 	beq.w	8005cf0 <minmea_scan+0x738>
                                    /* truncate extra precision */
                                    break;
 8005886:	e02e      	b.n	80058e6 <minmea_scan+0x32e>
                                } else {
                                    /* integer overflow. bail out. */
                                    goto parse_error;
                                }
                            }
                            value = (10 * value) + digit;
 8005888:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800588c:	4613      	mov	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	005b      	lsls	r3, r3, #1
 8005894:	461a      	mov	r2, r3
 8005896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005898:	4413      	add	r3, r2
 800589a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                            if (scale)
 800589e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d012      	beq.n	80058ca <minmea_scan+0x312>
                                scale *= 10;
 80058a4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80058a6:	4613      	mov	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80058b0:	e00b      	b.n	80058ca <minmea_scan+0x312>
                        } else if (*field == '.' && scale == 0) {
 80058b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	2b2e      	cmp	r3, #46	; 0x2e
 80058ba:	f040 821b 	bne.w	8005cf4 <minmea_scan+0x73c>
 80058be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f040 8217 	bne.w	8005cf4 <minmea_scan+0x73c>
                            scale = 1;
 80058c6:	2301      	movs	r3, #1
 80058c8:	67fb      	str	r3, [r7, #124]	; 0x7c
                        } else {
                            goto parse_error;
                        }
                        field++;
 80058ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80058ce:	3301      	adds	r3, #1
 80058d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                    while (minmea_isfield(*field)) {
 80058d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	4618      	mov	r0, r3
 80058dc:	f7ff fe4a 	bl	8005574 <minmea_isfield>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d180      	bne.n	80057e8 <minmea_scan+0x230>
                    }
                }

                if ((sign || scale) && value == -1)
 80058e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d102      	bne.n	80058f4 <minmea_scan+0x33c>
 80058ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d005      	beq.n	8005900 <minmea_scan+0x348>
 80058f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80058f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fc:	f000 81fc 	beq.w	8005cf8 <minmea_scan+0x740>
                    goto parse_error;

                if (value == -1) {
 8005900:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005908:	d105      	bne.n	8005916 <minmea_scan+0x35e>
                    /* No digits were scanned. */
                    value = 0;
 800590a:	2300      	movs	r3, #0
 800590c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    scale = 0;
 8005910:	2300      	movs	r3, #0
 8005912:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005914:	e004      	b.n	8005920 <minmea_scan+0x368>
                } else if (scale == 0) {
 8005916:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <minmea_scan+0x368>
                    /* No decimal point. */
                    scale = 1;
 800591c:	2301      	movs	r3, #1
 800591e:	67fb      	str	r3, [r7, #124]	; 0x7c
                }
                if (sign)
 8005920:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005924:	2b00      	cmp	r3, #0
 8005926:	d007      	beq.n	8005938 <minmea_scan+0x380>
                    value *= sign;
 8005928:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800592c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005930:	fb02 f303 	mul.w	r3, r2, r3
 8005934:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                *va_arg(ap, struct minmea_float *) = (struct minmea_float) {value, scale};
 8005938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593a:	1d1a      	adds	r2, r3, #4
 800593c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005944:	601a      	str	r2, [r3, #0]
 8005946:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005948:	605a      	str	r2, [r3, #4]
            } break;
 800594a:	e1a7      	b.n	8005c9c <minmea_scan+0x6e4>

            case 'i': { // Integer value, default 0 (int).
                int value = 0;
 800594c:	2300      	movs	r3, #0
 800594e:	67bb      	str	r3, [r7, #120]	; 0x78

                if (field) {
 8005950:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005954:	2b00      	cmp	r3, #0
 8005956:	d011      	beq.n	800597c <minmea_scan+0x3c4>
                    char *endptr;
                    value = strtol(field, &endptr, 10);
 8005958:	f107 0320 	add.w	r3, r7, #32
 800595c:	220a      	movs	r2, #10
 800595e:	4619      	mov	r1, r3
 8005960:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8005964:	f001 f98a 	bl	8006c7c <strtol>
 8005968:	67b8      	str	r0, [r7, #120]	; 0x78
                    if (minmea_isfield(*endptr))
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	4618      	mov	r0, r3
 8005970:	f7ff fe00 	bl	8005574 <minmea_isfield>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	f040 81c0 	bne.w	8005cfc <minmea_scan+0x744>
                        goto parse_error;
                }

                *va_arg(ap, int *) = value;
 800597c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800597e:	1d1a      	adds	r2, r3, #4
 8005980:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005986:	601a      	str	r2, [r3, #0]
            } break;
 8005988:	e188      	b.n	8005c9c <minmea_scan+0x6e4>

            case 's': { // String value (char *).
                char *buf = va_arg(ap, char *);
 800598a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598c:	1d1a      	adds	r2, r3, #4
 800598e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	677b      	str	r3, [r7, #116]	; 0x74

                if (field) {
 8005994:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005998:	2b00      	cmp	r3, #0
 800599a:	d013      	beq.n	80059c4 <minmea_scan+0x40c>
                    while (minmea_isfield(*field))
 800599c:	e009      	b.n	80059b2 <minmea_scan+0x3fa>
                        *buf++ = *field++;
 800599e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80059a2:	1c53      	adds	r3, r2, #1
 80059a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80059a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059aa:	1c59      	adds	r1, r3, #1
 80059ac:	6779      	str	r1, [r7, #116]	; 0x74
 80059ae:	7812      	ldrb	r2, [r2, #0]
 80059b0:	701a      	strb	r2, [r3, #0]
                    while (minmea_isfield(*field))
 80059b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7ff fddb 	bl	8005574 <minmea_isfield>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1ec      	bne.n	800599e <minmea_scan+0x3e6>
                }

                *buf = '\0';
 80059c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059c6:	2200      	movs	r2, #0
 80059c8:	701a      	strb	r2, [r3, #0]
            } break;
 80059ca:	e167      	b.n	8005c9c <minmea_scan+0x6e4>

            case 't': { // NMEA talker+sentence identifier (char *).
                // This field is always mandatory.
                if (!field)
 80059cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f000 8195 	beq.w	8005d00 <minmea_scan+0x748>
                    goto parse_error;

                if (field[0] != '$')
 80059d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	2b24      	cmp	r3, #36	; 0x24
 80059de:	f040 8191 	bne.w	8005d04 <minmea_scan+0x74c>
                    goto parse_error;
                for (int i=0; i<5; i++)
 80059e2:	2300      	movs	r3, #0
 80059e4:	673b      	str	r3, [r7, #112]	; 0x70
 80059e6:	e013      	b.n	8005a10 <minmea_scan+0x458>
                    if (!minmea_isfield(field[1+i]))
 80059e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059ea:	3301      	adds	r3, #1
 80059ec:	461a      	mov	r2, r3
 80059ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059f2:	4413      	add	r3, r2
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff fdbc 	bl	8005574 <minmea_isfield>
 80059fc:	4603      	mov	r3, r0
 80059fe:	f083 0301 	eor.w	r3, r3, #1
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f040 817f 	bne.w	8005d08 <minmea_scan+0x750>
                for (int i=0; i<5; i++)
 8005a0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	673b      	str	r3, [r7, #112]	; 0x70
 8005a10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a12:	2b04      	cmp	r3, #4
 8005a14:	dde8      	ble.n	80059e8 <minmea_scan+0x430>
                        goto parse_error;

                char *buf = va_arg(ap, char *);
 8005a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a18:	1d1a      	adds	r2, r3, #4
 8005a1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
                memcpy(buf, field+1, 5);
 8005a20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a24:	3301      	adds	r3, #1
 8005a26:	2205      	movs	r2, #5
 8005a28:	4619      	mov	r1, r3
 8005a2a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005a2c:	f001 f88c 	bl	8006b48 <memcpy>
                buf[5] = '\0';
 8005a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a32:	3305      	adds	r3, #5
 8005a34:	2200      	movs	r2, #0
 8005a36:	701a      	strb	r2, [r3, #0]
            } break;
 8005a38:	e130      	b.n	8005c9c <minmea_scan+0x6e4>

            case 'D': { // Date (int, int, int), -1 if empty.
                struct minmea_date *date = va_arg(ap, struct minmea_date *);
 8005a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3c:	1d1a      	adds	r2, r3, #4
 8005a3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	633b      	str	r3, [r7, #48]	; 0x30

                int d = -1, m = -1, y = -1;
 8005a44:	f04f 33ff 	mov.w	r3, #4294967295
 8005a48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a50:	f04f 33ff 	mov.w	r3, #4294967295
 8005a54:	667b      	str	r3, [r7, #100]	; 0x64

                if (field && minmea_isfield(*field)) {
 8005a56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d055      	beq.n	8005b0a <minmea_scan+0x552>
 8005a5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7ff fd85 	bl	8005574 <minmea_isfield>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d04c      	beq.n	8005b0a <minmea_scan+0x552>
                    // Always six digits.
                    for (int i=0; i<6; i++)
 8005a70:	2300      	movs	r3, #0
 8005a72:	663b      	str	r3, [r7, #96]	; 0x60
 8005a74:	e010      	b.n	8005a98 <minmea_scan+0x4e0>
                        if (!isdigit((unsigned char) field[i]))
 8005a76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a78:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8005a7c:	4413      	add	r3, r2
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	3301      	adds	r3, #1
 8005a82:	4a27      	ldr	r2, [pc, #156]	; (8005b20 <minmea_scan+0x568>)
 8005a84:	4413      	add	r3, r2
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	f003 0304 	and.w	r3, r3, #4
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 813d 	beq.w	8005d0c <minmea_scan+0x754>
                    for (int i=0; i<6; i++)
 8005a92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a94:	3301      	adds	r3, #1
 8005a96:	663b      	str	r3, [r7, #96]	; 0x60
 8005a98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a9a:	2b05      	cmp	r3, #5
 8005a9c:	ddeb      	ble.n	8005a76 <minmea_scan+0x4be>
                            goto parse_error;

                    d = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 8005a9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	773b      	strb	r3, [r7, #28]
 8005aa6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005aaa:	785b      	ldrb	r3, [r3, #1]
 8005aac:	777b      	strb	r3, [r7, #29]
 8005aae:	2300      	movs	r3, #0
 8005ab0:	77bb      	strb	r3, [r7, #30]
 8005ab2:	f107 031c 	add.w	r3, r7, #28
 8005ab6:	220a      	movs	r2, #10
 8005ab8:	2100      	movs	r1, #0
 8005aba:	4618      	mov	r0, r3
 8005abc:	f001 f8de 	bl	8006c7c <strtol>
 8005ac0:	66f8      	str	r0, [r7, #108]	; 0x6c
                    m = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 8005ac2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ac6:	789b      	ldrb	r3, [r3, #2]
 8005ac8:	763b      	strb	r3, [r7, #24]
 8005aca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ace:	78db      	ldrb	r3, [r3, #3]
 8005ad0:	767b      	strb	r3, [r7, #25]
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	76bb      	strb	r3, [r7, #26]
 8005ad6:	f107 0318 	add.w	r3, r7, #24
 8005ada:	220a      	movs	r2, #10
 8005adc:	2100      	movs	r1, #0
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f001 f8cc 	bl	8006c7c <strtol>
 8005ae4:	66b8      	str	r0, [r7, #104]	; 0x68
                    y = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 8005ae6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005aea:	791b      	ldrb	r3, [r3, #4]
 8005aec:	753b      	strb	r3, [r7, #20]
 8005aee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005af2:	795b      	ldrb	r3, [r3, #5]
 8005af4:	757b      	strb	r3, [r7, #21]
 8005af6:	2300      	movs	r3, #0
 8005af8:	75bb      	strb	r3, [r7, #22]
 8005afa:	f107 0314 	add.w	r3, r7, #20
 8005afe:	220a      	movs	r2, #10
 8005b00:	2100      	movs	r1, #0
 8005b02:	4618      	mov	r0, r3
 8005b04:	f001 f8ba 	bl	8006c7c <strtol>
 8005b08:	6678      	str	r0, [r7, #100]	; 0x64
                }

                date->day = d;
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005b0e:	601a      	str	r2, [r3, #0]
                date->month = m;
 8005b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b14:	605a      	str	r2, [r3, #4]
                date->year = y;
 8005b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b18:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005b1a:	609a      	str	r2, [r3, #8]
            } break;
 8005b1c:	e0be      	b.n	8005c9c <minmea_scan+0x6e4>
 8005b1e:	bf00      	nop
 8005b20:	08006d4c 	.word	0x08006d4c
 8005b24:	66666667 	.word	0x66666667

            case 'T': { // Time (int, int, int, int), -1 if empty.
                struct minmea_time *time = va_arg(ap, struct minmea_time *);
 8005b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2a:	1d1a      	adds	r2, r3, #4
 8005b2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	637b      	str	r3, [r7, #52]	; 0x34

                int h = -1, i = -1, s = -1, u = -1;
 8005b32:	f04f 33ff 	mov.w	r3, #4294967295
 8005b36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b38:	f04f 33ff 	mov.w	r3, #4294967295
 8005b3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b42:	657b      	str	r3, [r7, #84]	; 0x54
 8005b44:	f04f 33ff 	mov.w	r3, #4294967295
 8005b48:	653b      	str	r3, [r7, #80]	; 0x50

                if (field && minmea_isfield(*field)) {
 8005b4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f000 8096 	beq.w	8005c80 <minmea_scan+0x6c8>
 8005b54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7ff fd0a 	bl	8005574 <minmea_isfield>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f000 808c 	beq.w	8005c80 <minmea_scan+0x6c8>
                    // Minimum required: integer time.
                    for (int i=0; i<6; i++)
 8005b68:	2300      	movs	r3, #0
 8005b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b6c:	e010      	b.n	8005b90 <minmea_scan+0x5d8>
                        if (!isdigit((unsigned char) field[i]))
 8005b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b70:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8005b74:	4413      	add	r3, r2
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	4a6a      	ldr	r2, [pc, #424]	; (8005d24 <minmea_scan+0x76c>)
 8005b7c:	4413      	add	r3, r2
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	f003 0304 	and.w	r3, r3, #4
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 80c3 	beq.w	8005d10 <minmea_scan+0x758>
                    for (int i=0; i<6; i++)
 8005b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b92:	2b05      	cmp	r3, #5
 8005b94:	ddeb      	ble.n	8005b6e <minmea_scan+0x5b6>
                            goto parse_error;

                    h = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 8005b96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	743b      	strb	r3, [r7, #16]
 8005b9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ba2:	785b      	ldrb	r3, [r3, #1]
 8005ba4:	747b      	strb	r3, [r7, #17]
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	74bb      	strb	r3, [r7, #18]
 8005baa:	f107 0310 	add.w	r3, r7, #16
 8005bae:	220a      	movs	r2, #10
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f001 f862 	bl	8006c7c <strtol>
 8005bb8:	65f8      	str	r0, [r7, #92]	; 0x5c
                    i = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 8005bba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005bbe:	789b      	ldrb	r3, [r3, #2]
 8005bc0:	733b      	strb	r3, [r7, #12]
 8005bc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005bc6:	78db      	ldrb	r3, [r3, #3]
 8005bc8:	737b      	strb	r3, [r7, #13]
 8005bca:	2300      	movs	r3, #0
 8005bcc:	73bb      	strb	r3, [r7, #14]
 8005bce:	f107 030c 	add.w	r3, r7, #12
 8005bd2:	220a      	movs	r2, #10
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f001 f850 	bl	8006c7c <strtol>
 8005bdc:	65b8      	str	r0, [r7, #88]	; 0x58
                    s = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 8005bde:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005be2:	791b      	ldrb	r3, [r3, #4]
 8005be4:	723b      	strb	r3, [r7, #8]
 8005be6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005bea:	795b      	ldrb	r3, [r3, #5]
 8005bec:	727b      	strb	r3, [r7, #9]
 8005bee:	2300      	movs	r3, #0
 8005bf0:	72bb      	strb	r3, [r7, #10]
 8005bf2:	f107 0308 	add.w	r3, r7, #8
 8005bf6:	220a      	movs	r2, #10
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f001 f83e 	bl	8006c7c <strtol>
 8005c00:	6578      	str	r0, [r7, #84]	; 0x54
                    field += 6;
 8005c02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c06:	3306      	adds	r3, #6
 8005c08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                    // Extra: fractional time. Saved as microseconds.
                    if (*field++ == '.') {
 8005c0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c10:	1c5a      	adds	r2, r3, #1
 8005c12:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	2b2e      	cmp	r3, #46	; 0x2e
 8005c1a:	d12f      	bne.n	8005c7c <minmea_scan+0x6c4>
                        int value = 0;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	64bb      	str	r3, [r7, #72]	; 0x48
                        int scale = 1000000;
 8005c20:	4b41      	ldr	r3, [pc, #260]	; (8005d28 <minmea_scan+0x770>)
 8005c22:	647b      	str	r3, [r7, #68]	; 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 8005c24:	e016      	b.n	8005c54 <minmea_scan+0x69c>
                            value = (value * 10) + (*field++ - '0');
 8005c26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c28:	4613      	mov	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	4619      	mov	r1, r3
 8005c32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c36:	1c5a      	adds	r2, r3, #1
 8005c38:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	3b30      	subs	r3, #48	; 0x30
 8005c40:	440b      	add	r3, r1
 8005c42:	64bb      	str	r3, [r7, #72]	; 0x48
                            scale /= 10;
 8005c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c46:	4a39      	ldr	r2, [pc, #228]	; (8005d2c <minmea_scan+0x774>)
 8005c48:	fb82 1203 	smull	r1, r2, r2, r3
 8005c4c:	1092      	asrs	r2, r2, #2
 8005c4e:	17db      	asrs	r3, r3, #31
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	647b      	str	r3, [r7, #68]	; 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 8005c54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	4a31      	ldr	r2, [pc, #196]	; (8005d24 <minmea_scan+0x76c>)
 8005c5e:	4413      	add	r3, r2
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	f003 0304 	and.w	r3, r3, #4
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <minmea_scan+0x6b8>
 8005c6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	dcda      	bgt.n	8005c26 <minmea_scan+0x66e>
                        }
                        u = value * scale;
 8005c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c74:	fb02 f303 	mul.w	r3, r2, r3
 8005c78:	653b      	str	r3, [r7, #80]	; 0x50
 8005c7a:	e001      	b.n	8005c80 <minmea_scan+0x6c8>
                    } else {
                        u = 0;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	653b      	str	r3, [r7, #80]	; 0x50
                    }
                }

                time->hours = h;
 8005c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c82:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c84:	601a      	str	r2, [r3, #0]
                time->minutes = i;
 8005c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c8a:	605a      	str	r2, [r3, #4]
                time->seconds = s;
 8005c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c8e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c90:	609a      	str	r2, [r3, #8]
                time->microseconds = u;
 8005c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c94:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c96:	60da      	str	r2, [r3, #12]
            } break;
 8005c98:	e000      	b.n	8005c9c <minmea_scan+0x6e4>

            case '_': { // Ignore the field.
            } break;
 8005c9a:	bf00      	nop
            default: { // Unknown.
                goto parse_error;
            } break;
        }

        next_field();
 8005c9c:	e002      	b.n	8005ca4 <minmea_scan+0x6ec>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	607b      	str	r3, [r7, #4]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7ff fc63 	bl	8005574 <minmea_isfield>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1f4      	bne.n	8005c9e <minmea_scan+0x6e6>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	2b2c      	cmp	r3, #44	; 0x2c
 8005cba:	d106      	bne.n	8005cca <minmea_scan+0x712>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	607b      	str	r3, [r7, #4]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005cc8:	e002      	b.n	8005cd0 <minmea_scan+0x718>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    while (*format) {
 8005cd0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	f47f ac80 	bne.w	80055dc <minmea_scan+0x24>
    }

    result = true;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8005ce2:	e016      	b.n	8005d12 <minmea_scan+0x75a>
            goto parse_error;
 8005ce4:	bf00      	nop
 8005ce6:	e014      	b.n	8005d12 <minmea_scan+0x75a>
                goto parse_error;
 8005ce8:	bf00      	nop
 8005cea:	e012      	b.n	8005d12 <minmea_scan+0x75a>
                            goto parse_error;
 8005cec:	bf00      	nop
 8005cee:	e010      	b.n	8005d12 <minmea_scan+0x75a>
                                    goto parse_error;
 8005cf0:	bf00      	nop
 8005cf2:	e00e      	b.n	8005d12 <minmea_scan+0x75a>
                            goto parse_error;
 8005cf4:	bf00      	nop
 8005cf6:	e00c      	b.n	8005d12 <minmea_scan+0x75a>
                    goto parse_error;
 8005cf8:	bf00      	nop
 8005cfa:	e00a      	b.n	8005d12 <minmea_scan+0x75a>
                        goto parse_error;
 8005cfc:	bf00      	nop
 8005cfe:	e008      	b.n	8005d12 <minmea_scan+0x75a>
                    goto parse_error;
 8005d00:	bf00      	nop
 8005d02:	e006      	b.n	8005d12 <minmea_scan+0x75a>
                    goto parse_error;
 8005d04:	bf00      	nop
 8005d06:	e004      	b.n	8005d12 <minmea_scan+0x75a>
                        goto parse_error;
 8005d08:	bf00      	nop
 8005d0a:	e002      	b.n	8005d12 <minmea_scan+0x75a>
                            goto parse_error;
 8005d0c:	bf00      	nop
 8005d0e:	e000      	b.n	8005d12 <minmea_scan+0x75a>
                            goto parse_error;
 8005d10:	bf00      	nop

parse_error:
    va_end(ap);
    return result;
 8005d12:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	379c      	adds	r7, #156	; 0x9c
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d20:	b003      	add	sp, #12
 8005d22:	4770      	bx	lr
 8005d24:	08006d4c 	.word	0x08006d4c
 8005d28:	000f4240 	.word	0x000f4240
 8005d2c:	66666667 	.word	0x66666667

08005d30 <minmea_sentence_id>:

    return true;
}

enum minmea_sentence_id minmea_sentence_id(const char *sentence)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
    if (!minmea_check(sentence))
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f7ff fb9f 	bl	800547c <minmea_check>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	f083 0301 	eor.w	r3, r3, #1
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d002      	beq.n	8005d50 <minmea_sentence_id+0x20>
        return MINMEA_INVALID;
 8005d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d4e:	e04c      	b.n	8005dea <minmea_sentence_id+0xba>

    char type[6];
    if (!minmea_scan(sentence, "t", type))
 8005d50:	f107 0308 	add.w	r3, r7, #8
 8005d54:	461a      	mov	r2, r3
 8005d56:	4927      	ldr	r1, [pc, #156]	; (8005df4 <minmea_sentence_id+0xc4>)
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f7ff fc2d 	bl	80055b8 <minmea_scan>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	f083 0301 	eor.w	r3, r3, #1
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d002      	beq.n	8005d70 <minmea_sentence_id+0x40>
        return MINMEA_INVALID;
 8005d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d6e:	e03c      	b.n	8005dea <minmea_sentence_id+0xba>

    if (!strcmp(type+2, "RMC"))
 8005d70:	f107 0308 	add.w	r3, r7, #8
 8005d74:	3302      	adds	r3, #2
 8005d76:	4920      	ldr	r1, [pc, #128]	; (8005df8 <minmea_sentence_id+0xc8>)
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7fa fa2d 	bl	80001d8 <strcmp>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d101      	bne.n	8005d88 <minmea_sentence_id+0x58>
        return MINMEA_SENTENCE_RMC;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e030      	b.n	8005dea <minmea_sentence_id+0xba>
    if (!strcmp(type+2, "GGA"))
 8005d88:	f107 0308 	add.w	r3, r7, #8
 8005d8c:	3302      	adds	r3, #2
 8005d8e:	491b      	ldr	r1, [pc, #108]	; (8005dfc <minmea_sentence_id+0xcc>)
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7fa fa21 	bl	80001d8 <strcmp>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d101      	bne.n	8005da0 <minmea_sentence_id+0x70>
        return MINMEA_SENTENCE_GGA;
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	e024      	b.n	8005dea <minmea_sentence_id+0xba>
    if (!strcmp(type+2, "GSA"))
 8005da0:	f107 0308 	add.w	r3, r7, #8
 8005da4:	3302      	adds	r3, #2
 8005da6:	4916      	ldr	r1, [pc, #88]	; (8005e00 <minmea_sentence_id+0xd0>)
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7fa fa15 	bl	80001d8 <strcmp>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d101      	bne.n	8005db8 <minmea_sentence_id+0x88>
        return MINMEA_SENTENCE_GSA;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e018      	b.n	8005dea <minmea_sentence_id+0xba>
    if (!strcmp(type+2, "GST"))
 8005db8:	f107 0308 	add.w	r3, r7, #8
 8005dbc:	3302      	adds	r3, #2
 8005dbe:	4911      	ldr	r1, [pc, #68]	; (8005e04 <minmea_sentence_id+0xd4>)
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7fa fa09 	bl	80001d8 <strcmp>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d101      	bne.n	8005dd0 <minmea_sentence_id+0xa0>
        return MINMEA_SENTENCE_GST;
 8005dcc:	2304      	movs	r3, #4
 8005dce:	e00c      	b.n	8005dea <minmea_sentence_id+0xba>
    if (!strcmp(type+2, "GSV"))
 8005dd0:	f107 0308 	add.w	r3, r7, #8
 8005dd4:	3302      	adds	r3, #2
 8005dd6:	490c      	ldr	r1, [pc, #48]	; (8005e08 <minmea_sentence_id+0xd8>)
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7fa f9fd 	bl	80001d8 <strcmp>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d101      	bne.n	8005de8 <minmea_sentence_id+0xb8>
        return MINMEA_SENTENCE_GSV;
 8005de4:	2305      	movs	r3, #5
 8005de6:	e000      	b.n	8005dea <minmea_sentence_id+0xba>

    return MINMEA_UNKNOWN;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	08006cb0 	.word	0x08006cb0
 8005df8:	08006cb4 	.word	0x08006cb4
 8005dfc:	08006cb8 	.word	0x08006cb8
 8005e00:	08006cbc 	.word	0x08006cbc
 8005e04:	08006cc0 	.word	0x08006cc0
 8005e08:	08006cc4 	.word	0x08006cc4

08005e0c <minmea_parse_gga>:

    return true;
}

bool minmea_parse_gga(struct minmea_sentence_gga *frame, const char *sentence)
{
 8005e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e0e:	b097      	sub	sp, #92	; 0x5c
 8005e10:	af0c      	add	r7, sp, #48	; 0x30
 8005e12:	6178      	str	r0, [r7, #20]
 8005e14:	6139      	str	r1, [r7, #16]
    // $GPGGA,123519,4807.038,N,01131.000,E,1,08,0.9,545.4,M,46.9,M,,*47
    char type[6];
    int latitude_direction;
    int longitude_direction;

    if (!minmea_scan(sentence, "tTfdfdiiffcfci_",
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	60fb      	str	r3, [r7, #12]
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	3310      	adds	r3, #16
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	3218      	adds	r2, #24
 8005e22:	60ba      	str	r2, [r7, #8]
 8005e24:	6979      	ldr	r1, [r7, #20]
 8005e26:	3120      	adds	r1, #32
 8005e28:	6978      	ldr	r0, [r7, #20]
 8005e2a:	3024      	adds	r0, #36	; 0x24
 8005e2c:	697c      	ldr	r4, [r7, #20]
 8005e2e:	3428      	adds	r4, #40	; 0x28
 8005e30:	697d      	ldr	r5, [r7, #20]
 8005e32:	3530      	adds	r5, #48	; 0x30
 8005e34:	697e      	ldr	r6, [r7, #20]
 8005e36:	3638      	adds	r6, #56	; 0x38
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	323c      	adds	r2, #60	; 0x3c
 8005e3c:	607a      	str	r2, [r7, #4]
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	3244      	adds	r2, #68	; 0x44
 8005e42:	603a      	str	r2, [r7, #0]
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	3248      	adds	r2, #72	; 0x48
 8005e48:	f107 0c20 	add.w	ip, r7, #32
 8005e4c:	920b      	str	r2, [sp, #44]	; 0x2c
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	920a      	str	r2, [sp, #40]	; 0x28
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	9209      	str	r2, [sp, #36]	; 0x24
 8005e56:	9608      	str	r6, [sp, #32]
 8005e58:	9507      	str	r5, [sp, #28]
 8005e5a:	9406      	str	r4, [sp, #24]
 8005e5c:	9005      	str	r0, [sp, #20]
 8005e5e:	9104      	str	r1, [sp, #16]
 8005e60:	f107 0118 	add.w	r1, r7, #24
 8005e64:	9103      	str	r1, [sp, #12]
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	9202      	str	r2, [sp, #8]
 8005e6a:	f107 021c 	add.w	r2, r7, #28
 8005e6e:	9201      	str	r2, [sp, #4]
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	4662      	mov	r2, ip
 8005e76:	4915      	ldr	r1, [pc, #84]	; (8005ecc <minmea_parse_gga+0xc0>)
 8005e78:	6938      	ldr	r0, [r7, #16]
 8005e7a:	f7ff fb9d 	bl	80055b8 <minmea_scan>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	f083 0301 	eor.w	r3, r3, #1
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d001      	beq.n	8005e8e <minmea_parse_gga+0x82>
            &frame->satellites_tracked,
            &frame->hdop,
            &frame->altitude, &frame->altitude_units,
            &frame->height, &frame->height_units,
            &frame->dgps_age))
        return false;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	e01a      	b.n	8005ec4 <minmea_parse_gga+0xb8>
    if (strcmp(type+2, "GGA"))
 8005e8e:	f107 0320 	add.w	r3, r7, #32
 8005e92:	3302      	adds	r3, #2
 8005e94:	490e      	ldr	r1, [pc, #56]	; (8005ed0 <minmea_parse_gga+0xc4>)
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fa f99e 	bl	80001d8 <strcmp>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d001      	beq.n	8005ea6 <minmea_parse_gga+0x9a>
        return false;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	e00e      	b.n	8005ec4 <minmea_parse_gga+0xb8>

    frame->latitude.value *= latitude_direction;
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	69fa      	ldr	r2, [r7, #28]
 8005eac:	fb02 f203 	mul.w	r2, r2, r3
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	611a      	str	r2, [r3, #16]
    frame->longitude.value *= longitude_direction;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	69ba      	ldr	r2, [r7, #24]
 8005eba:	fb02 f203 	mul.w	r2, r2, r3
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	619a      	str	r2, [r3, #24]

    return true;
 8005ec2:	2301      	movs	r3, #1
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	372c      	adds	r7, #44	; 0x2c
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ecc:	08006cd8 	.word	0x08006cd8
 8005ed0:	08006cb8 	.word	0x08006cb8

08005ed4 <minmea_tofloat>:
/**
 * Convert a fixed-point value to a floating-point value.
 * Returns NaN for "unknown" values.
 */
static inline float minmea_tofloat(struct minmea_float *f)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
    if (f->scale == 0)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d102      	bne.n	8005eea <minmea_tofloat+0x16>
        return NAN;
 8005ee4:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8005f18 <minmea_tofloat+0x44>
 8005ee8:	e00d      	b.n	8005f06 <minmea_tofloat+0x32>
    return (float) f->value / (float) f->scale;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	ee07 3a90 	vmov	s15, r3
 8005ef2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	ee07 3a90 	vmov	s15, r3
 8005efe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f02:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005f06:	eef0 7a66 	vmov.f32	s15, s13
}
 8005f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr
 8005f18:	7fc00000 	.word	0x7fc00000

08005f1c <minmea_tocoord>:
/**
 * Convert a raw coordinate to a floating point DD.DDD... value.
 * Returns NaN for "unknown" values.
 */
static inline float minmea_tocoord(struct minmea_float *f)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
    if (f->scale == 0)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d102      	bne.n	8005f32 <minmea_tocoord+0x16>
        return NAN;
 8005f2c:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8005fa0 <minmea_tocoord+0x84>
 8005f30:	e02e      	b.n	8005f90 <minmea_tocoord+0x74>
    int_least32_t degrees = f->value / (f->scale * 100);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	2164      	movs	r1, #100	; 0x64
 8005f3c:	fb01 f303 	mul.w	r3, r1, r3
 8005f40:	fb92 f3f3 	sdiv	r3, r2, r3
 8005f44:	60fb      	str	r3, [r7, #12]
    int_least32_t minutes = f->value % (f->scale * 100);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	6852      	ldr	r2, [r2, #4]
 8005f4e:	2164      	movs	r1, #100	; 0x64
 8005f50:	fb01 f202 	mul.w	r2, r1, r2
 8005f54:	fb93 f1f2 	sdiv	r1, r3, r2
 8005f58:	fb02 f201 	mul.w	r2, r2, r1
 8005f5c:	1a9b      	subs	r3, r3, r2
 8005f5e:	60bb      	str	r3, [r7, #8]
    return (float) degrees + (float) minutes / (60 * f->scale);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	ee07 3a90 	vmov	s15, r3
 8005f66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	ee07 3a90 	vmov	s15, r3
 8005f70:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685a      	ldr	r2, [r3, #4]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	011b      	lsls	r3, r3, #4
 8005f7c:	1a9b      	subs	r3, r3, r2
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	ee07 3a90 	vmov	s15, r3
 8005f84:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005f88:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005f8c:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8005f90:	eeb0 0a67 	vmov.f32	s0, s15
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	7fc00000 	.word	0x7fc00000

08005fa4 <cb_push>:


#define GPS_SYMBOLS_PER_ACTS 500

static bool cb_push(uint8_t byte)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	4603      	mov	r3, r0
 8005fac:	71fb      	strb	r3, [r7, #7]

	size_t next_head = uart_buffer_head + 1;
 8005fae:	4b10      	ldr	r3, [pc, #64]	; (8005ff0 <cb_push+0x4c>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	60fb      	str	r3, [r7, #12]
	if (next_head >= sizeof(uart_buffer) / sizeof(uart_buffer[0]))
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fbc:	d301      	bcc.n	8005fc2 <cb_push+0x1e>
		next_head = 0;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	60fb      	str	r3, [r7, #12]

	if (next_head == uart_buffer_tail)
 8005fc2:	4b0c      	ldr	r3, [pc, #48]	; (8005ff4 <cb_push+0x50>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d101      	bne.n	8005fd0 <cb_push+0x2c>
		return false;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	e008      	b.n	8005fe2 <cb_push+0x3e>

	uart_buffer[uart_buffer_head] = byte;
 8005fd0:	4b07      	ldr	r3, [pc, #28]	; (8005ff0 <cb_push+0x4c>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4908      	ldr	r1, [pc, #32]	; (8005ff8 <cb_push+0x54>)
 8005fd6:	79fa      	ldrb	r2, [r7, #7]
 8005fd8:	54ca      	strb	r2, [r1, r3]
	uart_buffer_head = next_head;
 8005fda:	4a05      	ldr	r2, [pc, #20]	; (8005ff0 <cb_push+0x4c>)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6013      	str	r3, [r2, #0]
	return true;
 8005fe0:	2301      	movs	r3, #1
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	20000484 	.word	0x20000484
 8005ff4:	20000488 	.word	0x20000488
 8005ff8:	2000009c 	.word	0x2000009c

08005ffc <cb_pop>:


static bool cb_pop(uint8_t *byte)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
	if (uart_buffer_head == uart_buffer_tail)
 8006004:	4b10      	ldr	r3, [pc, #64]	; (8006048 <cb_pop+0x4c>)
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	4b10      	ldr	r3, [pc, #64]	; (800604c <cb_pop+0x50>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	429a      	cmp	r2, r3
 800600e:	d101      	bne.n	8006014 <cb_pop+0x18>
		return false;
 8006010:	2300      	movs	r3, #0
 8006012:	e013      	b.n	800603c <cb_pop+0x40>

	*byte = uart_buffer[uart_buffer_tail];
 8006014:	4b0d      	ldr	r3, [pc, #52]	; (800604c <cb_pop+0x50>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a0d      	ldr	r2, [pc, #52]	; (8006050 <cb_pop+0x54>)
 800601a:	5cd2      	ldrb	r2, [r2, r3]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	701a      	strb	r2, [r3, #0]
	uart_buffer_tail += 1;
 8006020:	4b0a      	ldr	r3, [pc, #40]	; (800604c <cb_pop+0x50>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	3301      	adds	r3, #1
 8006026:	4a09      	ldr	r2, [pc, #36]	; (800604c <cb_pop+0x50>)
 8006028:	6013      	str	r3, [r2, #0]
	if (uart_buffer_tail >= sizeof(uart_buffer) / sizeof(uart_buffer[0]))
 800602a:	4b08      	ldr	r3, [pc, #32]	; (800604c <cb_pop+0x50>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006032:	d302      	bcc.n	800603a <cb_pop+0x3e>
		uart_buffer_tail = 0;
 8006034:	4b05      	ldr	r3, [pc, #20]	; (800604c <cb_pop+0x50>)
 8006036:	2200      	movs	r2, #0
 8006038:	601a      	str	r2, [r3, #0]

	return true;
 800603a:	2301      	movs	r3, #1
}
 800603c:	4618      	mov	r0, r3
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr
 8006048:	20000484 	.word	0x20000484
 800604c:	20000488 	.word	0x20000488
 8006050:	2000009c 	.word	0x2000009c

08006054 <gps_parse>:




static int gps_parse(uint8_t byte)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	4603      	mov	r3, r0
 800605c:	71fb      	strb	r3, [r7, #7]
	if (pavel_gps_sost == 0)
 800605e:	4b1c      	ldr	r3, [pc, #112]	; (80060d0 <gps_parse+0x7c>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10c      	bne.n	8006080 <gps_parse+0x2c>
	{
		if (byte == '$')
 8006066:	79fb      	ldrb	r3, [r7, #7]
 8006068:	2b24      	cmp	r3, #36	; 0x24
 800606a:	d129      	bne.n	80060c0 <gps_parse+0x6c>
		{
			pavel_gps_buffer[0]='$';
 800606c:	4b19      	ldr	r3, [pc, #100]	; (80060d4 <gps_parse+0x80>)
 800606e:	2224      	movs	r2, #36	; 0x24
 8006070:	701a      	strb	r2, [r3, #0]
			pavel_gps_sost = 1;
 8006072:	4b17      	ldr	r3, [pc, #92]	; (80060d0 <gps_parse+0x7c>)
 8006074:	2201      	movs	r2, #1
 8006076:	601a      	str	r2, [r3, #0]
			pavel_gps_carret = 1;
 8006078:	4b17      	ldr	r3, [pc, #92]	; (80060d8 <gps_parse+0x84>)
 800607a:	2201      	movs	r2, #1
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	e01f      	b.n	80060c0 <gps_parse+0x6c>
		}
	}
	else
	{
		if (pavel_gps_carret >= sizeof(pavel_gps_buffer) / sizeof(pavel_gps_buffer[0]))
 8006080:	4b15      	ldr	r3, [pc, #84]	; (80060d8 <gps_parse+0x84>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8006088:	d305      	bcc.n	8006096 <gps_parse+0x42>
		{
			pavel_gps_sost = 0;
 800608a:	4b11      	ldr	r3, [pc, #68]	; (80060d0 <gps_parse+0x7c>)
 800608c:	2200      	movs	r2, #0
 800608e:	601a      	str	r2, [r3, #0]
			return pavel_gps_sost;
 8006090:	4b0f      	ldr	r3, [pc, #60]	; (80060d0 <gps_parse+0x7c>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	e016      	b.n	80060c4 <gps_parse+0x70>
		}

		pavel_gps_buffer[pavel_gps_carret] = byte;
 8006096:	4b10      	ldr	r3, [pc, #64]	; (80060d8 <gps_parse+0x84>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	490e      	ldr	r1, [pc, #56]	; (80060d4 <gps_parse+0x80>)
 800609c:	79fa      	ldrb	r2, [r7, #7]
 800609e:	54ca      	strb	r2, [r1, r3]
		pavel_gps_carret = pavel_gps_carret + 1;
 80060a0:	4b0d      	ldr	r3, [pc, #52]	; (80060d8 <gps_parse+0x84>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3301      	adds	r3, #1
 80060a6:	4a0c      	ldr	r2, [pc, #48]	; (80060d8 <gps_parse+0x84>)
 80060a8:	6013      	str	r3, [r2, #0]
		if (byte == '\n' )
 80060aa:	79fb      	ldrb	r3, [r7, #7]
 80060ac:	2b0a      	cmp	r3, #10
 80060ae:	d107      	bne.n	80060c0 <gps_parse+0x6c>
		{
			pavel_gps_sost = 2;
 80060b0:	4b07      	ldr	r3, [pc, #28]	; (80060d0 <gps_parse+0x7c>)
 80060b2:	2202      	movs	r2, #2
 80060b4:	601a      	str	r2, [r3, #0]
			pavel_gps_buffer[pavel_gps_carret] =0;
 80060b6:	4b08      	ldr	r3, [pc, #32]	; (80060d8 <gps_parse+0x84>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a06      	ldr	r2, [pc, #24]	; (80060d4 <gps_parse+0x80>)
 80060bc:	2100      	movs	r1, #0
 80060be:	54d1      	strb	r1, [r2, r3]
		}
	}

	return pavel_gps_sost;
 80060c0:	4b03      	ldr	r3, [pc, #12]	; (80060d0 <gps_parse+0x7c>)
 80060c2:	681b      	ldr	r3, [r3, #0]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr
 80060d0:	2000048c 	.word	0x2000048c
 80060d4:	20000490 	.word	0x20000490
 80060d8:	200005bc 	.word	0x200005bc

080060dc <gps_init>:


int gps_init()
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	af00      	add	r7, sp, #0
	memset(uart_buffer, 0x00, sizeof(uart_buffer));
 80060e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80060e4:	2100      	movs	r1, #0
 80060e6:	4809      	ldr	r0, [pc, #36]	; (800610c <gps_init+0x30>)
 80060e8:	f000 fd3c 	bl	8006b64 <memset>
	uart_buffer_head = 0;
 80060ec:	4b08      	ldr	r3, [pc, #32]	; (8006110 <gps_init+0x34>)
 80060ee:	2200      	movs	r2, #0
 80060f0:	601a      	str	r2, [r3, #0]
	uart_buffer_tail = 0;
 80060f2:	4b08      	ldr	r3, [pc, #32]	; (8006114 <gps_init+0x38>)
 80060f4:	2200      	movs	r2, #0
 80060f6:	601a      	str	r2, [r3, #0]
	pavel_gps_sost = 0;
 80060f8:	4b07      	ldr	r3, [pc, #28]	; (8006118 <gps_init+0x3c>)
 80060fa:	2200      	movs	r2, #0
 80060fc:	601a      	str	r2, [r3, #0]

	pavel_gps_carret = 0;
 80060fe:	4b07      	ldr	r3, [pc, #28]	; (800611c <gps_init+0x40>)
 8006100:	2200      	movs	r2, #0
 8006102:	601a      	str	r2, [r3, #0]
	return 0;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	2000009c 	.word	0x2000009c
 8006110:	20000484 	.word	0x20000484
 8006114:	20000488 	.word	0x20000488
 8006118:	2000048c 	.word	0x2000048c
 800611c:	200005bc 	.word	0x200005bc

08006120 <gps_push_byte>:


int gps_push_byte(uint8_t byte)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	4603      	mov	r3, r0
 8006128:	71fb      	strb	r3, [r7, #7]
	cb_push(byte);
 800612a:	79fb      	ldrb	r3, [r7, #7]
 800612c:	4618      	mov	r0, r3
 800612e:	f7ff ff39 	bl	8005fa4 <cb_push>
	return 0;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3708      	adds	r7, #8
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <gps_work>:
		return pavel_gps_sost;
}


int gps_work()
{
 800613c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006140:	b094      	sub	sp, #80	; 0x50
 8006142:	af00      	add	r7, sp, #0
	uint8_t byte;
	for (schetchik = 0; schetchik < GPS_SYMBOLS_PER_ACTS; schetchik++)
 8006144:	4b50      	ldr	r3, [pc, #320]	; (8006288 <gps_work+0x14c>)
 8006146:	2200      	movs	r2, #0
 8006148:	801a      	strh	r2, [r3, #0]
 800614a:	e08f      	b.n	800626c <gps_work+0x130>
	{
		if (cb_pop(&byte) == false)
 800614c:	f107 034d 	add.w	r3, r7, #77	; 0x4d
 8006150:	4618      	mov	r0, r3
 8006152:	f7ff ff53 	bl	8005ffc <cb_pop>
 8006156:	4603      	mov	r3, r0
 8006158:	f083 0301 	eor.w	r3, r3, #1
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	f040 808b 	bne.w	800627a <gps_work+0x13e>
		{
			break;
		}
		gps_parse(byte);
 8006164:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006168:	4618      	mov	r0, r3
 800616a:	f7ff ff73 	bl	8006054 <gps_parse>
		if (pavel_gps_sost == 2)
 800616e:	4b47      	ldr	r3, [pc, #284]	; (800628c <gps_work+0x150>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2b02      	cmp	r3, #2
 8006174:	d174      	bne.n	8006260 <gps_work+0x124>
		{
			// Мы накопили сообщение. Можно его разбирать
			pavel_gps_sost = 0;
 8006176:	4b45      	ldr	r3, [pc, #276]	; (800628c <gps_work+0x150>)
 8006178:	2200      	movs	r2, #0
 800617a:	601a      	str	r2, [r3, #0]
			enum minmea_sentence_id id;
			id = minmea_sentence_id(pavel_gps_buffer);
 800617c:	4844      	ldr	r0, [pc, #272]	; (8006290 <gps_work+0x154>)
 800617e:	f7ff fdd7 	bl	8005d30 <minmea_sentence_id>
 8006182:	4603      	mov	r3, r0
 8006184:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			if (id != MINMEA_SENTENCE_GGA)
 8006188:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800618c:	2b02      	cmp	r3, #2
 800618e:	d164      	bne.n	800625a <gps_work+0x11e>
			{
				continue;
			}

			struct minmea_sentence_gga gga;
			bool succes = minmea_parse_gga(&gga, pavel_gps_buffer);
 8006190:	463b      	mov	r3, r7
 8006192:	493f      	ldr	r1, [pc, #252]	; (8006290 <gps_work+0x154>)
 8006194:	4618      	mov	r0, r3
 8006196:	f7ff fe39 	bl	8005e0c <minmea_parse_gga>
 800619a:	4603      	mov	r3, r0
 800619c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
			if (!succes)
 80061a0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80061a4:	f083 0301 	eor.w	r3, r3, #1
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d157      	bne.n	800625e <gps_work+0x122>
			{
				continue;
			}
			time_us = gga.time.microseconds;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	461a      	mov	r2, r3
 80061b2:	4b38      	ldr	r3, [pc, #224]	; (8006294 <gps_work+0x158>)
 80061b4:	601a      	str	r2, [r3, #0]
			time_s = 3600*gga.time.hours + 60*gga.time.minutes + gga.time.seconds;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80061bc:	fb02 f103 	mul.w	r1, r2, r3
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	4613      	mov	r3, r2
 80061c4:	011b      	lsls	r3, r3, #4
 80061c6:	1a9b      	subs	r3, r3, r2
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	18ca      	adds	r2, r1, r3
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	4413      	add	r3, r2
 80061d0:	461a      	mov	r2, r3
 80061d2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80061d6:	4930      	ldr	r1, [pc, #192]	; (8006298 <gps_work+0x15c>)
 80061d8:	e9c1 2300 	strd	r2, r3, [r1]
			lat = minmea_tocoord(&gga.latitude);
 80061dc:	463b      	mov	r3, r7
 80061de:	3310      	adds	r3, #16
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7ff fe9b 	bl	8005f1c <minmea_tocoord>
 80061e6:	eef0 7a40 	vmov.f32	s15, s0
 80061ea:	4b2c      	ldr	r3, [pc, #176]	; (800629c <gps_work+0x160>)
 80061ec:	edc3 7a00 	vstr	s15, [r3]
			lon = minmea_tocoord(&gga.longitude);
 80061f0:	463b      	mov	r3, r7
 80061f2:	3318      	adds	r3, #24
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7ff fe91 	bl	8005f1c <minmea_tocoord>
 80061fa:	eef0 7a40 	vmov.f32	s15, s0
 80061fe:	4b28      	ldr	r3, [pc, #160]	; (80062a0 <gps_work+0x164>)
 8006200:	edc3 7a00 	vstr	s15, [r3]
			alt = minmea_tofloat(&gga.altitude);
 8006204:	463b      	mov	r3, r7
 8006206:	3330      	adds	r3, #48	; 0x30
 8006208:	4618      	mov	r0, r3
 800620a:	f7ff fe63 	bl	8005ed4 <minmea_tofloat>
 800620e:	eef0 7a40 	vmov.f32	s15, s0
 8006212:	4b24      	ldr	r3, [pc, #144]	; (80062a4 <gps_work+0x168>)
 8006214:	edc3 7a00 	vstr	s15, [r3]
			fix = gga.fix_quality;
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	4a23      	ldr	r2, [pc, #140]	; (80062a8 <gps_work+0x16c>)
 800621c:	6013      	str	r3, [r2, #0]
			pos_cookie++;
 800621e:	4b23      	ldr	r3, [pc, #140]	; (80062ac <gps_work+0x170>)
 8006220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006224:	1c54      	adds	r4, r2, #1
 8006226:	f143 0500 	adc.w	r5, r3, #0
 800622a:	4b20      	ldr	r3, [pc, #128]	; (80062ac <gps_work+0x170>)
 800622c:	e9c3 4500 	strd	r4, r5, [r3]
			alt_cookie++;
 8006230:	4b1f      	ldr	r3, [pc, #124]	; (80062b0 <gps_work+0x174>)
 8006232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006236:	f112 0801 	adds.w	r8, r2, #1
 800623a:	f143 0900 	adc.w	r9, r3, #0
 800623e:	4b1c      	ldr	r3, [pc, #112]	; (80062b0 <gps_work+0x174>)
 8006240:	e9c3 8900 	strd	r8, r9, [r3]
			time_cookie++;
 8006244:	4b1b      	ldr	r3, [pc, #108]	; (80062b4 <gps_work+0x178>)
 8006246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624a:	f112 0a01 	adds.w	sl, r2, #1
 800624e:	f143 0b00 	adc.w	fp, r3, #0
 8006252:	4b18      	ldr	r3, [pc, #96]	; (80062b4 <gps_work+0x178>)
 8006254:	e9c3 ab00 	strd	sl, fp, [r3]
 8006258:	e002      	b.n	8006260 <gps_work+0x124>
				continue;
 800625a:	bf00      	nop
 800625c:	e000      	b.n	8006260 <gps_work+0x124>
				continue;
 800625e:	bf00      	nop
	for (schetchik = 0; schetchik < GPS_SYMBOLS_PER_ACTS; schetchik++)
 8006260:	4b09      	ldr	r3, [pc, #36]	; (8006288 <gps_work+0x14c>)
 8006262:	881b      	ldrh	r3, [r3, #0]
 8006264:	3301      	adds	r3, #1
 8006266:	b29a      	uxth	r2, r3
 8006268:	4b07      	ldr	r3, [pc, #28]	; (8006288 <gps_work+0x14c>)
 800626a:	801a      	strh	r2, [r3, #0]
 800626c:	4b06      	ldr	r3, [pc, #24]	; (8006288 <gps_work+0x14c>)
 800626e:	881b      	ldrh	r3, [r3, #0]
 8006270:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006274:	f4ff af6a 	bcc.w	800614c <gps_work+0x10>
 8006278:	e000      	b.n	800627c <gps_work+0x140>
			break;
 800627a:	bf00      	nop

		}
	}
	return 0;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3750      	adds	r7, #80	; 0x50
 8006282:	46bd      	mov	sp, r7
 8006284:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006288:	200005f4 	.word	0x200005f4
 800628c:	2000048c 	.word	0x2000048c
 8006290:	20000490 	.word	0x20000490
 8006294:	200005f0 	.word	0x200005f0
 8006298:	200005e8 	.word	0x200005e8
 800629c:	200005c8 	.word	0x200005c8
 80062a0:	200005cc 	.word	0x200005cc
 80062a4:	200005d8 	.word	0x200005d8
 80062a8:	20000098 	.word	0x20000098
 80062ac:	200005c0 	.word	0x200005c0
 80062b0:	200005d0 	.word	0x200005d0
 80062b4:	200005e0 	.word	0x200005e0

080062b8 <gps_get_coords>:



int gps_get_coords(int64_t * cookie, float * lat_, float * lon_, float * alt_, int *fix_)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
 80062c4:	603b      	str	r3, [r7, #0]
	*cookie = pos_cookie;
 80062c6:	4b0e      	ldr	r3, [pc, #56]	; (8006300 <gps_get_coords+0x48>)
 80062c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062cc:	68f9      	ldr	r1, [r7, #12]
 80062ce:	e9c1 2300 	strd	r2, r3, [r1]
	*lat_ = lat;
 80062d2:	4b0c      	ldr	r3, [pc, #48]	; (8006304 <gps_get_coords+0x4c>)
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	601a      	str	r2, [r3, #0]
	*lon_ = lon;
 80062da:	4b0b      	ldr	r3, [pc, #44]	; (8006308 <gps_get_coords+0x50>)
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	601a      	str	r2, [r3, #0]
	*alt_ = alt;
 80062e2:	4b0a      	ldr	r3, [pc, #40]	; (800630c <gps_get_coords+0x54>)
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	601a      	str	r2, [r3, #0]
	*fix_ = fix;
 80062ea:	4b09      	ldr	r3, [pc, #36]	; (8006310 <gps_get_coords+0x58>)
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	601a      	str	r2, [r3, #0]
	return 0;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr
 8006300:	200005c0 	.word	0x200005c0
 8006304:	200005c8 	.word	0x200005c8
 8006308:	200005cc 	.word	0x200005cc
 800630c:	200005d8 	.word	0x200005d8
 8006310:	20000098 	.word	0x20000098

08006314 <lis3mdl_write>:
#ifdef HAL_SPI_MODULE_ENABLED
extern SPI_HandleTypeDef hspi1;


static int32_t lis3mdl_write(void * intf_ptr, uint8_t reg_addr, const uint8_t * data, uint16_t data_size)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b086      	sub	sp, #24
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	607a      	str	r2, [r7, #4]
 800631e:	461a      	mov	r2, r3
 8006320:	460b      	mov	r3, r1
 8006322:	72fb      	strb	r3, [r7, #11]
 8006324:	4613      	mov	r3, r2
 8006326:	813b      	strh	r3, [r7, #8]
//	hspi1.Instance->CR1 |= (uint32_t)(0b11); // Делаем CPHA CPOL как надо
	struct lis_spi_intf* spi_intf = intf_ptr;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	617b      	str	r3, [r7, #20]

	reg_addr=reg_addr&~(1<<7);
 800632c:	7afb      	ldrb	r3, [r7, #11]
 800632e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006332:	b2db      	uxtb	r3, r3
 8006334:	72fb      	strb	r3, [r7, #11]
	reg_addr=reg_addr|(1<<6);
 8006336:	7afb      	ldrb	r3, [r7, #11]
 8006338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800633c:	b2db      	uxtb	r3, r3
 800633e:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin (spi_intf->GPIO_Port,spi_intf->GPIO_Pin, GPIO_PIN_RESET);
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	6818      	ldr	r0, [r3, #0]
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	889b      	ldrh	r3, [r3, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	4619      	mov	r1, r3
 800634c:	f7fb fa2e 	bl	80017ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi_intf->spi, &reg_addr, 1, HAL_MAX_DELAY);
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	6898      	ldr	r0, [r3, #8]
 8006354:	f107 010b 	add.w	r1, r7, #11
 8006358:	f04f 33ff 	mov.w	r3, #4294967295
 800635c:	2201      	movs	r2, #1
 800635e:	f7fd f9db 	bl	8003718 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(spi_intf->spi, (uint8_t*)data, data_size, HAL_MAX_DELAY);
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	6898      	ldr	r0, [r3, #8]
 8006366:	893a      	ldrh	r2, [r7, #8]
 8006368:	f04f 33ff 	mov.w	r3, #4294967295
 800636c:	6879      	ldr	r1, [r7, #4]
 800636e:	f7fd f9d3 	bl	8003718 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_SET);
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	6818      	ldr	r0, [r3, #0]
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	889b      	ldrh	r3, [r3, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	4619      	mov	r1, r3
 800637e:	f7fb fa15 	bl	80017ac <HAL_GPIO_WritePin>
	return 0;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3718      	adds	r7, #24
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <lis3mdl_read>:


static int32_t lis3mdl_read(void * intf_ptr, uint8_t reg_addr, uint8_t * data, uint16_t data_size)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	607a      	str	r2, [r7, #4]
 8006396:	461a      	mov	r2, r3
 8006398:	460b      	mov	r3, r1
 800639a:	72fb      	strb	r3, [r7, #11]
 800639c:	4613      	mov	r3, r2
 800639e:	813b      	strh	r3, [r7, #8]
//	hspi1.Instance->CR1 |= (uint32_t)(0b11); // Делаем CPHA CPOL как надо

	struct lis_spi_intf* spi_intf = intf_ptr;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	617b      	str	r3, [r7, #20]

	reg_addr=reg_addr|(1<<7);
 80063a4:	7afb      	ldrb	r3, [r7, #11]
 80063a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	72fb      	strb	r3, [r7, #11]
	reg_addr=reg_addr|(1<<6);
 80063ae:	7afb      	ldrb	r3, [r7, #11]
 80063b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin (spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_RESET);
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	6818      	ldr	r0, [r3, #0]
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	889b      	ldrh	r3, [r3, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	4619      	mov	r1, r3
 80063c4:	f7fb f9f2 	bl	80017ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi_intf->spi, &reg_addr, 1, HAL_MAX_DELAY);
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	6898      	ldr	r0, [r3, #8]
 80063cc:	f107 010b 	add.w	r1, r7, #11
 80063d0:	f04f 33ff 	mov.w	r3, #4294967295
 80063d4:	2201      	movs	r2, #1
 80063d6:	f7fd f99f 	bl	8003718 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi_intf->spi, data, data_size, HAL_MAX_DELAY);
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	6898      	ldr	r0, [r3, #8]
 80063de:	893a      	ldrh	r2, [r7, #8]
 80063e0:	f04f 33ff 	mov.w	r3, #4294967295
 80063e4:	6879      	ldr	r1, [r7, #4]
 80063e6:	f7fd fad3 	bl	8003990 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_SET);
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	6818      	ldr	r0, [r3, #0]
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	889b      	ldrh	r3, [r3, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	4619      	mov	r1, r3
 80063f6:	f7fb f9d9 	bl	80017ac <HAL_GPIO_WritePin>
	return 0;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3718      	adds	r7, #24
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <lisset>:



void lisset(stmdev_ctx_t *ctx, struct lis_spi_intf *spi_interface)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
// Настройка lismdl =-=-=-=-=-=-=-=-=-=-=-=-
	// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	ctx->handle = spi_interface;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	609a      	str	r2, [r3, #8]
	ctx->read_reg = lis3mdl_read;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a1a      	ldr	r2, [pc, #104]	; (8006480 <lisset+0x7c>)
 8006418:	605a      	str	r2, [r3, #4]
	ctx->write_reg = lis3mdl_write;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a19      	ldr	r2, [pc, #100]	; (8006484 <lisset+0x80>)
 800641e:	601a      	str	r2, [r3, #0]

	// Это придется делать прямо сразу еще до всего
	// так как иначе он с ним общаться не сможет (судя по доке по-крайней мере)
	lis3mdl_spi_mode_set(ctx, LIS3MDL_SPI_3_WIRE);
 8006420:	2101      	movs	r1, #1
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 f99b 	bl	800675e <lis3mdl_spi_mode_set>

	uint8_t whoami_mag = 0x00;
 8006428:	2300      	movs	r3, #0
 800642a:	73fb      	strb	r3, [r7, #15]
	lis3mdl_device_id_get(ctx, &whoami_mag);
 800642c:	f107 030f 	add.w	r3, r7, #15
 8006430:	4619      	mov	r1, r3
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f95c 	bl	80066f0 <lis3mdl_device_id_get>

	// Убедились что датчик тот который нам нужен
	// Сбросим его
	lis3mdl_reset_set(ctx, PROPERTY_ENABLE);
 8006438:	2101      	movs	r1, #1
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f969 	bl	8006712 <lis3mdl_reset_set>
	HAL_Delay(100);
 8006440:	2064      	movs	r0, #100	; 0x64
 8006442:	f7fa fef9 	bl	8001238 <HAL_Delay>

	// Настраиваем
	// Обновление данных только целыми порциями
	lis3mdl_block_data_update_set(ctx, PROPERTY_ENABLE);
 8006446:	2101      	movs	r1, #1
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f92b 	bl	80066a4 <lis3mdl_block_data_update_set>
	// Без экономии энергии
	lis3mdl_fast_low_power_set(ctx, PROPERTY_DISABLE);
 800644e:	2100      	movs	r1, #0
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 f901 	bl	8006658 <lis3mdl_fast_low_power_set>
	// Диапазон измерения (внимание LSM303 умеет только 16G)
	lis3mdl_full_scale_set(ctx, LIS3MDL_16_GAUSS);
 8006456:	2103      	movs	r1, #3
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 f8b1 	bl	80065c0 <lis3mdl_full_scale_set>
	// Частота опроса
	// внимание для LSM303 запрещены значения
	// LIS3MDL_LP_1kHz, LIS3MDL_MP_560Hz, LIS3MDL_HP_300Hz, LIS3MDL_UHP_155Hz
	lis3mdl_data_rate_set(ctx, LIS3MDL_UHP_80Hz);
 800645e:	213e      	movs	r1, #62	; 0x3e
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f841 	bl	80064e8 <lis3mdl_data_rate_set>
	// Включаем температурный сенсор
	lis3mdl_temperature_meas_set(ctx, PROPERTY_ENABLE);
 8006466:	2101      	movs	r1, #1
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 f883 	bl	8006574 <lis3mdl_temperature_meas_set>
	// режим работы
	lis3mdl_operating_mode_set(ctx, LIS3MDL_CONTINUOUS_MODE);
 800646e:	2100      	movs	r1, #0
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f8cb 	bl	800660c <lis3mdl_operating_mode_set>
}
 8006476:	bf00      	nop
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	0800638d 	.word	0x0800638d
 8006484:	08006315 	.word	0x08006315

08006488 <lis3mdl_read_reg>:
  *
  */
int32_t lis3mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8006488:	b590      	push	{r4, r7, lr}
 800648a:	b087      	sub	sp, #28
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	607a      	str	r2, [r7, #4]
 8006492:	461a      	mov	r2, r3
 8006494:	460b      	mov	r3, r1
 8006496:	72fb      	strb	r3, [r7, #11]
 8006498:	4613      	mov	r3, r2
 800649a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	685c      	ldr	r4, [r3, #4]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6898      	ldr	r0, [r3, #8]
 80064a4:	893b      	ldrh	r3, [r7, #8]
 80064a6:	7af9      	ldrb	r1, [r7, #11]
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	47a0      	blx	r4
 80064ac:	6178      	str	r0, [r7, #20]

  return ret;
 80064ae:	697b      	ldr	r3, [r7, #20]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	371c      	adds	r7, #28
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd90      	pop	{r4, r7, pc}

080064b8 <lis3mdl_write_reg>:
  *
  */
int32_t lis3mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80064b8:	b590      	push	{r4, r7, lr}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	607a      	str	r2, [r7, #4]
 80064c2:	461a      	mov	r2, r3
 80064c4:	460b      	mov	r3, r1
 80064c6:	72fb      	strb	r3, [r7, #11]
 80064c8:	4613      	mov	r3, r2
 80064ca:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681c      	ldr	r4, [r3, #0]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6898      	ldr	r0, [r3, #8]
 80064d4:	893b      	ldrh	r3, [r7, #8]
 80064d6:	7af9      	ldrb	r1, [r7, #11]
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	47a0      	blx	r4
 80064dc:	6178      	str	r0, [r7, #20]

  return ret;
 80064de:	697b      	ldr	r3, [r7, #20]
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	371c      	adds	r7, #28
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd90      	pop	{r4, r7, pc}

080064e8 <lis3mdl_data_rate_set>:
  * @param  val         change the values of om in reg CTRL_REG1
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_data_rate_set(stmdev_ctx_t *ctx, lis3mdl_om_t val)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	460b      	mov	r3, r1
 80064f2:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg1_t ctrl_reg1;
  lis3mdl_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80064f4:	f107 0210 	add.w	r2, r7, #16
 80064f8:	2301      	movs	r3, #1
 80064fa:	2120      	movs	r1, #32
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f7ff ffc3 	bl	8006488 <lis3mdl_read_reg>
 8006502:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10f      	bne.n	800652a <lis3mdl_data_rate_set+0x42>
  {
    ctrl_reg1.om = (uint8_t)val;
 800650a:	78fb      	ldrb	r3, [r7, #3]
 800650c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006510:	b2da      	uxtb	r2, r3
 8006512:	7c3b      	ldrb	r3, [r7, #16]
 8006514:	f362 0346 	bfi	r3, r2, #1, #6
 8006518:	743b      	strb	r3, [r7, #16]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800651a:	f107 0210 	add.w	r2, r7, #16
 800651e:	2301      	movs	r3, #1
 8006520:	2120      	movs	r1, #32
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f7ff ffc8 	bl	80064b8 <lis3mdl_write_reg>
 8006528:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d107      	bne.n	8006540 <lis3mdl_data_rate_set+0x58>
  {
    /* set mode also for z axis, ctrl_reg4 -> omz */
    ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8006530:	f107 020c 	add.w	r2, r7, #12
 8006534:	2301      	movs	r3, #1
 8006536:	2123      	movs	r1, #35	; 0x23
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f7ff ffa5 	bl	8006488 <lis3mdl_read_reg>
 800653e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d111      	bne.n	800656a <lis3mdl_data_rate_set+0x82>
  {
    ctrl_reg4.omz = (uint8_t)(((uint8_t) val >> 4) & 0x03U);
 8006546:	78fb      	ldrb	r3, [r7, #3]
 8006548:	091b      	lsrs	r3, r3, #4
 800654a:	b2db      	uxtb	r3, r3
 800654c:	f003 0303 	and.w	r3, r3, #3
 8006550:	b2da      	uxtb	r2, r3
 8006552:	7b3b      	ldrb	r3, [r7, #12]
 8006554:	f362 0383 	bfi	r3, r2, #2, #2
 8006558:	733b      	strb	r3, [r7, #12]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG4,
 800655a:	f107 020c 	add.w	r2, r7, #12
 800655e:	2301      	movs	r3, #1
 8006560:	2123      	movs	r1, #35	; 0x23
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7ff ffa8 	bl	80064b8 <lis3mdl_write_reg>
 8006568:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 800656a:	697b      	ldr	r3, [r7, #20]
}
 800656c:	4618      	mov	r0, r3
 800656e:	3718      	adds	r7, #24
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <lis3mdl_temperature_meas_set>:
  * @param  val      change the values of temp_en in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_temperature_meas_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	460b      	mov	r3, r1
 800657e:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8006580:	f107 0208 	add.w	r2, r7, #8
 8006584:	2301      	movs	r3, #1
 8006586:	2120      	movs	r1, #32
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f7ff ff7d 	bl	8006488 <lis3mdl_read_reg>
 800658e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10f      	bne.n	80065b6 <lis3mdl_temperature_meas_set+0x42>
  {
    ctrl_reg1.temp_en = val;
 8006596:	78fb      	ldrb	r3, [r7, #3]
 8006598:	f003 0301 	and.w	r3, r3, #1
 800659c:	b2da      	uxtb	r2, r3
 800659e:	7a3b      	ldrb	r3, [r7, #8]
 80065a0:	f362 13c7 	bfi	r3, r2, #7, #1
 80065a4:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80065a6:	f107 0208 	add.w	r2, r7, #8
 80065aa:	2301      	movs	r3, #1
 80065ac:	2120      	movs	r1, #32
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f7ff ff82 	bl	80064b8 <lis3mdl_write_reg>
 80065b4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80065b6:	68fb      	ldr	r3, [r7, #12]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <lis3mdl_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_full_scale_set(stmdev_ctx_t *ctx, lis3mdl_fs_t val)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	460b      	mov	r3, r1
 80065ca:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80065cc:	f107 0208 	add.w	r2, r7, #8
 80065d0:	2301      	movs	r3, #1
 80065d2:	2121      	movs	r1, #33	; 0x21
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f7ff ff57 	bl	8006488 <lis3mdl_read_reg>
 80065da:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10f      	bne.n	8006602 <lis3mdl_full_scale_set+0x42>
  {
    ctrl_reg2.fs = (uint8_t)val;
 80065e2:	78fb      	ldrb	r3, [r7, #3]
 80065e4:	f003 0303 	and.w	r3, r3, #3
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	7a3b      	ldrb	r3, [r7, #8]
 80065ec:	f362 1346 	bfi	r3, r2, #5, #2
 80065f0:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80065f2:	f107 0208 	add.w	r2, r7, #8
 80065f6:	2301      	movs	r3, #1
 80065f8:	2121      	movs	r1, #33	; 0x21
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7ff ff5c 	bl	80064b8 <lis3mdl_write_reg>
 8006600:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006602:	68fb      	ldr	r3, [r7, #12]
}
 8006604:	4618      	mov	r0, r3
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <lis3mdl_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis3mdl_md_t val)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	460b      	mov	r3, r1
 8006616:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg3_t ctrl_reg3;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 8006618:	f107 0208 	add.w	r2, r7, #8
 800661c:	2301      	movs	r3, #1
 800661e:	2122      	movs	r1, #34	; 0x22
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f7ff ff31 	bl	8006488 <lis3mdl_read_reg>
 8006626:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10f      	bne.n	800664e <lis3mdl_operating_mode_set+0x42>
  {
    ctrl_reg3.md = (uint8_t)val;
 800662e:	78fb      	ldrb	r3, [r7, #3]
 8006630:	f003 0303 	and.w	r3, r3, #3
 8006634:	b2da      	uxtb	r2, r3
 8006636:	7a3b      	ldrb	r3, [r7, #8]
 8006638:	f362 0301 	bfi	r3, r2, #0, #2
 800663c:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 800663e:	f107 0208 	add.w	r2, r7, #8
 8006642:	2301      	movs	r3, #1
 8006644:	2122      	movs	r1, #34	; 0x22
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f7ff ff36 	bl	80064b8 <lis3mdl_write_reg>
 800664c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800664e:	68fb      	ldr	r3, [r7, #12]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <lis3mdl_fast_low_power_set>:
  * @param  val      change the values of lp in reg CTRL_REG3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_fast_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	460b      	mov	r3, r1
 8006662:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg3_t ctrl_reg3;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 8006664:	f107 0208 	add.w	r2, r7, #8
 8006668:	2301      	movs	r3, #1
 800666a:	2122      	movs	r1, #34	; 0x22
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f7ff ff0b 	bl	8006488 <lis3mdl_read_reg>
 8006672:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10f      	bne.n	800669a <lis3mdl_fast_low_power_set+0x42>
  {
    ctrl_reg3.lp = val;
 800667a:	78fb      	ldrb	r3, [r7, #3]
 800667c:	f003 0301 	and.w	r3, r3, #1
 8006680:	b2da      	uxtb	r2, r3
 8006682:	7a3b      	ldrb	r3, [r7, #8]
 8006684:	f362 1345 	bfi	r3, r2, #5, #1
 8006688:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 800668a:	f107 0208 	add.w	r2, r7, #8
 800668e:	2301      	movs	r3, #1
 8006690:	2122      	movs	r1, #34	; 0x22
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7ff ff10 	bl	80064b8 <lis3mdl_write_reg>
 8006698:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800669a:	68fb      	ldr	r3, [r7, #12]
}
 800669c:	4618      	mov	r0, r3
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <lis3mdl_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG5
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	460b      	mov	r3, r1
 80066ae:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg5_t ctrl_reg5;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 80066b0:	f107 0208 	add.w	r2, r7, #8
 80066b4:	2301      	movs	r3, #1
 80066b6:	2124      	movs	r1, #36	; 0x24
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7ff fee5 	bl	8006488 <lis3mdl_read_reg>
 80066be:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10f      	bne.n	80066e6 <lis3mdl_block_data_update_set+0x42>
  {
    ctrl_reg5.bdu = val;
 80066c6:	78fb      	ldrb	r3, [r7, #3]
 80066c8:	f003 0301 	and.w	r3, r3, #1
 80066cc:	b2da      	uxtb	r2, r3
 80066ce:	7a3b      	ldrb	r3, [r7, #8]
 80066d0:	f362 1386 	bfi	r3, r2, #6, #1
 80066d4:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 80066d6:	f107 0208 	add.w	r2, r7, #8
 80066da:	2301      	movs	r3, #1
 80066dc:	2124      	movs	r1, #36	; 0x24
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7ff feea 	bl	80064b8 <lis3mdl_write_reg>
 80066e4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80066e6:	68fb      	ldr	r3, [r7, #12]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <lis3mdl_device_id_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_WHO_AM_I, (uint8_t *) buff, 1);
 80066fa:	2301      	movs	r3, #1
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	210f      	movs	r1, #15
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f7ff fec1 	bl	8006488 <lis3mdl_read_reg>
 8006706:	60f8      	str	r0, [r7, #12]

  return ret;
 8006708:	68fb      	ldr	r3, [r7, #12]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <lis3mdl_reset_set>:
  * @param  val      change the values of soft_rst in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b084      	sub	sp, #16
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
 800671a:	460b      	mov	r3, r1
 800671c:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800671e:	f107 0208 	add.w	r2, r7, #8
 8006722:	2301      	movs	r3, #1
 8006724:	2121      	movs	r1, #33	; 0x21
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f7ff feae 	bl	8006488 <lis3mdl_read_reg>
 800672c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10f      	bne.n	8006754 <lis3mdl_reset_set+0x42>
  {
    ctrl_reg2.soft_rst = val;
 8006734:	78fb      	ldrb	r3, [r7, #3]
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	b2da      	uxtb	r2, r3
 800673c:	7a3b      	ldrb	r3, [r7, #8]
 800673e:	f362 0382 	bfi	r3, r2, #2, #1
 8006742:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8006744:	f107 0208 	add.w	r2, r7, #8
 8006748:	2301      	movs	r3, #1
 800674a:	2121      	movs	r1, #33	; 0x21
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7ff feb3 	bl	80064b8 <lis3mdl_write_reg>
 8006752:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006754:	68fb      	ldr	r3, [r7, #12]
}
 8006756:	4618      	mov	r0, r3
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <lis3mdl_spi_mode_set>:
  * @param  val      change the values of sim in reg CTRL_REG3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_spi_mode_set(stmdev_ctx_t *ctx, lis3mdl_sim_t val)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b084      	sub	sp, #16
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
 8006766:	460b      	mov	r3, r1
 8006768:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg3_t ctrl_reg3;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 800676a:	f107 0208 	add.w	r2, r7, #8
 800676e:	2301      	movs	r3, #1
 8006770:	2122      	movs	r1, #34	; 0x22
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7ff fe88 	bl	8006488 <lis3mdl_read_reg>
 8006778:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10f      	bne.n	80067a0 <lis3mdl_spi_mode_set+0x42>
  {
    ctrl_reg3.sim = (uint8_t)val;
 8006780:	78fb      	ldrb	r3, [r7, #3]
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	b2da      	uxtb	r2, r3
 8006788:	7a3b      	ldrb	r3, [r7, #8]
 800678a:	f362 0382 	bfi	r3, r2, #2, #1
 800678e:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 8006790:	f107 0208 	add.w	r2, r7, #8
 8006794:	2301      	movs	r3, #1
 8006796:	2122      	movs	r1, #34	; 0x22
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f7ff fe8d 	bl	80064b8 <lis3mdl_write_reg>
 800679e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80067a0:	68fb      	ldr	r3, [r7, #12]
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <lsmd6s3_write>:

#ifdef HAL_SPI_MODULE_ENABLED
extern SPI_HandleTypeDef hspi1;

static int32_t lsmd6s3_write(void * intf_ptr, uint8_t reg_addr, const uint8_t * data, uint16_t data_size)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b086      	sub	sp, #24
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	60f8      	str	r0, [r7, #12]
 80067b2:	607a      	str	r2, [r7, #4]
 80067b4:	461a      	mov	r2, r3
 80067b6:	460b      	mov	r3, r1
 80067b8:	72fb      	strb	r3, [r7, #11]
 80067ba:	4613      	mov	r3, r2
 80067bc:	813b      	strh	r3, [r7, #8]
	//hspi1.Instance->CR1 |= (uint32_t)(0b11); // Делаем CPHA CPOL как надо

	struct lsm_spi_intf* spi_intf = intf_ptr;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	617b      	str	r3, [r7, #20]


	reg_addr=reg_addr&~(1<<7);
 80067c2:	7afb      	ldrb	r3, [r7, #11]
 80067c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin (spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_RESET);
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	6818      	ldr	r0, [r3, #0]
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	889b      	ldrh	r3, [r3, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	4619      	mov	r1, r3
 80067d8:	f7fa ffe8 	bl	80017ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi_intf->spi, &reg_addr, 1, HAL_MAX_DELAY);
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	6898      	ldr	r0, [r3, #8]
 80067e0:	f107 010b 	add.w	r1, r7, #11
 80067e4:	f04f 33ff 	mov.w	r3, #4294967295
 80067e8:	2201      	movs	r2, #1
 80067ea:	f7fc ff95 	bl	8003718 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(spi_intf->spi, (uint8_t*)data, data_size, HAL_MAX_DELAY);
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	6898      	ldr	r0, [r3, #8]
 80067f2:	893a      	ldrh	r2, [r7, #8]
 80067f4:	f04f 33ff 	mov.w	r3, #4294967295
 80067f8:	6879      	ldr	r1, [r7, #4]
 80067fa:	f7fc ff8d 	bl	8003718 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_SET);
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	6818      	ldr	r0, [r3, #0]
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	889b      	ldrh	r3, [r3, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	4619      	mov	r1, r3
 800680a:	f7fa ffcf 	bl	80017ac <HAL_GPIO_WritePin>
	return 0;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3718      	adds	r7, #24
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <lsm6ds3_read>:


static int32_t lsm6ds3_read(void * intf_ptr, uint8_t reg_addr, uint8_t * data, uint16_t data_size)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	607a      	str	r2, [r7, #4]
 8006822:	461a      	mov	r2, r3
 8006824:	460b      	mov	r3, r1
 8006826:	72fb      	strb	r3, [r7, #11]
 8006828:	4613      	mov	r3, r2
 800682a:	813b      	strh	r3, [r7, #8]
	//hspi1.Instance->CR1 |= (uint32_t)(0b11); // Делаем CPHA CPOL как надо

	struct lsm_spi_intf* spi_intf = intf_ptr;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	617b      	str	r3, [r7, #20]


	reg_addr=reg_addr|(1<<7);
 8006830:	7afb      	ldrb	r3, [r7, #11]
 8006832:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006836:	b2db      	uxtb	r3, r3
 8006838:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin (spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_RESET);
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	6818      	ldr	r0, [r3, #0]
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	889b      	ldrh	r3, [r3, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	4619      	mov	r1, r3
 8006846:	f7fa ffb1 	bl	80017ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi_intf->spi, &reg_addr, 1, HAL_MAX_DELAY);
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	6898      	ldr	r0, [r3, #8]
 800684e:	f107 010b 	add.w	r1, r7, #11
 8006852:	f04f 33ff 	mov.w	r3, #4294967295
 8006856:	2201      	movs	r2, #1
 8006858:	f7fc ff5e 	bl	8003718 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi_intf->spi, data, data_size, HAL_MAX_DELAY);
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	6898      	ldr	r0, [r3, #8]
 8006860:	893a      	ldrh	r2, [r7, #8]
 8006862:	f04f 33ff 	mov.w	r3, #4294967295
 8006866:	6879      	ldr	r1, [r7, #4]
 8006868:	f7fd f892 	bl	8003990 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_SET);
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	6818      	ldr	r0, [r3, #0]
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	889b      	ldrh	r3, [r3, #4]
 8006874:	2201      	movs	r2, #1
 8006876:	4619      	mov	r1, r3
 8006878:	f7fa ff98 	bl	80017ac <HAL_GPIO_WritePin>
	return 0;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3718      	adds	r7, #24
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
	...

08006888 <lsmset>:
	return 0;
}


void lsmset(stmdev_ctx_t *ctx, struct lsm_spi_intf *spi_interface)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
	// Настройка lsm6ds3 =-=-=-=-=-=-=-=-=-=-=-=-
		// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

		ctx->handle = spi_interface;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	683a      	ldr	r2, [r7, #0]
 8006896:	609a      	str	r2, [r3, #8]
		ctx->read_reg = lsm6ds3_read;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a14      	ldr	r2, [pc, #80]	; (80068ec <lsmset+0x64>)
 800689c:	605a      	str	r2, [r3, #4]
		ctx->write_reg = lsmd6s3_write;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a13      	ldr	r2, [pc, #76]	; (80068f0 <lsmset+0x68>)
 80068a2:	601a      	str	r2, [r3, #0]

		uint8_t whoami = 0x00;
 80068a4:	2300      	movs	r3, #0
 80068a6:	73fb      	strb	r3, [r7, #15]
		lsm6ds3_device_id_get(ctx, &whoami);
 80068a8:	f107 030f 	add.w	r3, r7, #15
 80068ac:	4619      	mov	r1, r3
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f8e8 	bl	8006a84 <lsm6ds3_device_id_get>

		lsm6ds3_reset_set(ctx, PROPERTY_ENABLE);
 80068b4:	2101      	movs	r1, #1
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f8f5 	bl	8006aa6 <lsm6ds3_reset_set>
		HAL_Delay(100);
 80068bc:	2064      	movs	r0, #100	; 0x64
 80068be:	f7fa fcbb 	bl	8001238 <HAL_Delay>

		lsm6ds3_xl_full_scale_set(ctx, LSM6DS3_16g);
 80068c2:	2101      	movs	r1, #1
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f845 	bl	8006954 <lsm6ds3_xl_full_scale_set>
		lsm6ds3_xl_data_rate_set(ctx, LSM6DS3_XL_ODR_104Hz);
 80068ca:	2104      	movs	r1, #4
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 f867 	bl	80069a0 <lsm6ds3_xl_data_rate_set>

		lsm6ds3_gy_full_scale_set(ctx, LSM6DS3_2000dps);
 80068d2:	2106      	movs	r1, #6
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 f889 	bl	80069ec <lsm6ds3_gy_full_scale_set>
		lsm6ds3_gy_data_rate_set(ctx, LSM6DS3_GY_ODR_104Hz);
 80068da:	2104      	movs	r1, #4
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f8ab 	bl	8006a38 <lsm6ds3_gy_data_rate_set>
}
 80068e2:	bf00      	nop
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	08006819 	.word	0x08006819
 80068f0:	080067ab 	.word	0x080067ab

080068f4 <lsm6ds3_read_reg>:
  *
  */
int32_t lsm6ds3_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80068f4:	b590      	push	{r4, r7, lr}
 80068f6:	b087      	sub	sp, #28
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	607a      	str	r2, [r7, #4]
 80068fe:	461a      	mov	r2, r3
 8006900:	460b      	mov	r3, r1
 8006902:	72fb      	strb	r3, [r7, #11]
 8006904:	4613      	mov	r3, r2
 8006906:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	685c      	ldr	r4, [r3, #4]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6898      	ldr	r0, [r3, #8]
 8006910:	893b      	ldrh	r3, [r7, #8]
 8006912:	7af9      	ldrb	r1, [r7, #11]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	47a0      	blx	r4
 8006918:	6178      	str	r0, [r7, #20]

  return ret;
 800691a:	697b      	ldr	r3, [r7, #20]
}
 800691c:	4618      	mov	r0, r3
 800691e:	371c      	adds	r7, #28
 8006920:	46bd      	mov	sp, r7
 8006922:	bd90      	pop	{r4, r7, pc}

08006924 <lsm6ds3_write_reg>:
  *
  */
int32_t lsm6ds3_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8006924:	b590      	push	{r4, r7, lr}
 8006926:	b087      	sub	sp, #28
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	607a      	str	r2, [r7, #4]
 800692e:	461a      	mov	r2, r3
 8006930:	460b      	mov	r3, r1
 8006932:	72fb      	strb	r3, [r7, #11]
 8006934:	4613      	mov	r3, r2
 8006936:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681c      	ldr	r4, [r3, #0]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6898      	ldr	r0, [r3, #8]
 8006940:	893b      	ldrh	r3, [r7, #8]
 8006942:	7af9      	ldrb	r1, [r7, #11]
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	47a0      	blx	r4
 8006948:	6178      	str	r0, [r7, #20]

  return ret;
 800694a:	697b      	ldr	r3, [r7, #20]
}
 800694c:	4618      	mov	r0, r3
 800694e:	371c      	adds	r7, #28
 8006950:	46bd      	mov	sp, r7
 8006952:	bd90      	pop	{r4, r7, pc}

08006954 <lsm6ds3_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6ds3_xl_fs_t val)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	460b      	mov	r3, r1
 800695e:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006960:	f107 0208 	add.w	r2, r7, #8
 8006964:	2301      	movs	r3, #1
 8006966:	2110      	movs	r1, #16
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f7ff ffc3 	bl	80068f4 <lsm6ds3_read_reg>
 800696e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10f      	bne.n	8006996 <lsm6ds3_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8006976:	78fb      	ldrb	r3, [r7, #3]
 8006978:	f003 0303 	and.w	r3, r3, #3
 800697c:	b2da      	uxtb	r2, r3
 800697e:	7a3b      	ldrb	r3, [r7, #8]
 8006980:	f362 0383 	bfi	r3, r2, #2, #2
 8006984:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006986:	f107 0208 	add.w	r2, r7, #8
 800698a:	2301      	movs	r3, #1
 800698c:	2110      	movs	r1, #16
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7ff ffc8 	bl	8006924 <lsm6ds3_write_reg>
 8006994:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006996:	68fb      	ldr	r3, [r7, #12]
}
 8006998:	4618      	mov	r0, r3
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <lsm6ds3_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6ds3_odr_xl_t val)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	460b      	mov	r3, r1
 80069aa:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80069ac:	f107 0208 	add.w	r2, r7, #8
 80069b0:	2301      	movs	r3, #1
 80069b2:	2110      	movs	r1, #16
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7ff ff9d 	bl	80068f4 <lsm6ds3_read_reg>
 80069ba:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10f      	bne.n	80069e2 <lsm6ds3_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t)val;
 80069c2:	78fb      	ldrb	r3, [r7, #3]
 80069c4:	f003 030f 	and.w	r3, r3, #15
 80069c8:	b2da      	uxtb	r2, r3
 80069ca:	7a3b      	ldrb	r3, [r7, #8]
 80069cc:	f362 1307 	bfi	r3, r2, #4, #4
 80069d0:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80069d2:	f107 0208 	add.w	r2, r7, #8
 80069d6:	2301      	movs	r3, #1
 80069d8:	2110      	movs	r1, #16
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f7ff ffa2 	bl	8006924 <lsm6ds3_write_reg>
 80069e0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80069e2:	68fb      	ldr	r3, [r7, #12]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <lsm6ds3_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6ds3_fs_g_t val)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	460b      	mov	r3, r1
 80069f6:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80069f8:	f107 0208 	add.w	r2, r7, #8
 80069fc:	2301      	movs	r3, #1
 80069fe:	2111      	movs	r1, #17
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f7ff ff77 	bl	80068f4 <lsm6ds3_read_reg>
 8006a06:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10f      	bne.n	8006a2e <lsm6ds3_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8006a0e:	78fb      	ldrb	r3, [r7, #3]
 8006a10:	f003 0307 	and.w	r3, r3, #7
 8006a14:	b2da      	uxtb	r2, r3
 8006a16:	7a3b      	ldrb	r3, [r7, #8]
 8006a18:	f362 0343 	bfi	r3, r2, #1, #3
 8006a1c:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006a1e:	f107 0208 	add.w	r2, r7, #8
 8006a22:	2301      	movs	r3, #1
 8006a24:	2111      	movs	r1, #17
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7ff ff7c 	bl	8006924 <lsm6ds3_write_reg>
 8006a2c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <lsm6ds3_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6ds3_odr_g_t val)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	460b      	mov	r3, r1
 8006a42:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006a44:	f107 0208 	add.w	r2, r7, #8
 8006a48:	2301      	movs	r3, #1
 8006a4a:	2111      	movs	r1, #17
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f7ff ff51 	bl	80068f4 <lsm6ds3_read_reg>
 8006a52:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10f      	bne.n	8006a7a <lsm6ds3_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t)val;
 8006a5a:	78fb      	ldrb	r3, [r7, #3]
 8006a5c:	f003 030f 	and.w	r3, r3, #15
 8006a60:	b2da      	uxtb	r2, r3
 8006a62:	7a3b      	ldrb	r3, [r7, #8]
 8006a64:	f362 1307 	bfi	r3, r2, #4, #4
 8006a68:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006a6a:	f107 0208 	add.w	r2, r7, #8
 8006a6e:	2301      	movs	r3, #1
 8006a70:	2111      	movs	r1, #17
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7ff ff56 	bl	8006924 <lsm6ds3_write_reg>
 8006a78:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <lsm6ds3_device_id_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_WHO_AM_I, buff, 1);
 8006a8e:	2301      	movs	r3, #1
 8006a90:	683a      	ldr	r2, [r7, #0]
 8006a92:	210f      	movs	r1, #15
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7ff ff2d 	bl	80068f4 <lsm6ds3_read_reg>
 8006a9a:	60f8      	str	r0, [r7, #12]

  return ret;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <lsm6ds3_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b084      	sub	sp, #16
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
 8006aae:	460b      	mov	r3, r1
 8006ab0:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006ab2:	f107 0208 	add.w	r2, r7, #8
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	2112      	movs	r1, #18
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7ff ff1a 	bl	80068f4 <lsm6ds3_read_reg>
 8006ac0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10f      	bne.n	8006ae8 <lsm6ds3_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8006ac8:	78fb      	ldrb	r3, [r7, #3]
 8006aca:	f003 0301 	and.w	r3, r3, #1
 8006ace:	b2da      	uxtb	r2, r3
 8006ad0:	7a3b      	ldrb	r3, [r7, #8]
 8006ad2:	f362 0300 	bfi	r3, r2, #0, #1
 8006ad6:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006ad8:	f107 0208 	add.w	r2, r7, #8
 8006adc:	2301      	movs	r3, #1
 8006ade:	2112      	movs	r1, #18
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f7ff ff1f 	bl	8006924 <lsm6ds3_write_reg>
 8006ae6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
	...

08006af4 <__errno>:
 8006af4:	4b01      	ldr	r3, [pc, #4]	; (8006afc <__errno+0x8>)
 8006af6:	6818      	ldr	r0, [r3, #0]
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	2000000c 	.word	0x2000000c

08006b00 <__libc_init_array>:
 8006b00:	b570      	push	{r4, r5, r6, lr}
 8006b02:	4d0d      	ldr	r5, [pc, #52]	; (8006b38 <__libc_init_array+0x38>)
 8006b04:	4c0d      	ldr	r4, [pc, #52]	; (8006b3c <__libc_init_array+0x3c>)
 8006b06:	1b64      	subs	r4, r4, r5
 8006b08:	10a4      	asrs	r4, r4, #2
 8006b0a:	2600      	movs	r6, #0
 8006b0c:	42a6      	cmp	r6, r4
 8006b0e:	d109      	bne.n	8006b24 <__libc_init_array+0x24>
 8006b10:	4d0b      	ldr	r5, [pc, #44]	; (8006b40 <__libc_init_array+0x40>)
 8006b12:	4c0c      	ldr	r4, [pc, #48]	; (8006b44 <__libc_init_array+0x44>)
 8006b14:	f000 f8bc 	bl	8006c90 <_init>
 8006b18:	1b64      	subs	r4, r4, r5
 8006b1a:	10a4      	asrs	r4, r4, #2
 8006b1c:	2600      	movs	r6, #0
 8006b1e:	42a6      	cmp	r6, r4
 8006b20:	d105      	bne.n	8006b2e <__libc_init_array+0x2e>
 8006b22:	bd70      	pop	{r4, r5, r6, pc}
 8006b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b28:	4798      	blx	r3
 8006b2a:	3601      	adds	r6, #1
 8006b2c:	e7ee      	b.n	8006b0c <__libc_init_array+0xc>
 8006b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b32:	4798      	blx	r3
 8006b34:	3601      	adds	r6, #1
 8006b36:	e7f2      	b.n	8006b1e <__libc_init_array+0x1e>
 8006b38:	08006eb8 	.word	0x08006eb8
 8006b3c:	08006eb8 	.word	0x08006eb8
 8006b40:	08006eb8 	.word	0x08006eb8
 8006b44:	08006ebc 	.word	0x08006ebc

08006b48 <memcpy>:
 8006b48:	440a      	add	r2, r1
 8006b4a:	4291      	cmp	r1, r2
 8006b4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b50:	d100      	bne.n	8006b54 <memcpy+0xc>
 8006b52:	4770      	bx	lr
 8006b54:	b510      	push	{r4, lr}
 8006b56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b5e:	4291      	cmp	r1, r2
 8006b60:	d1f9      	bne.n	8006b56 <memcpy+0xe>
 8006b62:	bd10      	pop	{r4, pc}

08006b64 <memset>:
 8006b64:	4402      	add	r2, r0
 8006b66:	4603      	mov	r3, r0
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d100      	bne.n	8006b6e <memset+0xa>
 8006b6c:	4770      	bx	lr
 8006b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8006b72:	e7f9      	b.n	8006b68 <memset+0x4>

08006b74 <_strtol_l.isra.0>:
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b7a:	d001      	beq.n	8006b80 <_strtol_l.isra.0+0xc>
 8006b7c:	2b24      	cmp	r3, #36	; 0x24
 8006b7e:	d906      	bls.n	8006b8e <_strtol_l.isra.0+0x1a>
 8006b80:	f7ff ffb8 	bl	8006af4 <__errno>
 8006b84:	2316      	movs	r3, #22
 8006b86:	6003      	str	r3, [r0, #0]
 8006b88:	2000      	movs	r0, #0
 8006b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b8e:	4f3a      	ldr	r7, [pc, #232]	; (8006c78 <_strtol_l.isra.0+0x104>)
 8006b90:	468e      	mov	lr, r1
 8006b92:	4676      	mov	r6, lr
 8006b94:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006b98:	5de5      	ldrb	r5, [r4, r7]
 8006b9a:	f015 0508 	ands.w	r5, r5, #8
 8006b9e:	d1f8      	bne.n	8006b92 <_strtol_l.isra.0+0x1e>
 8006ba0:	2c2d      	cmp	r4, #45	; 0x2d
 8006ba2:	d134      	bne.n	8006c0e <_strtol_l.isra.0+0x9a>
 8006ba4:	f89e 4000 	ldrb.w	r4, [lr]
 8006ba8:	f04f 0801 	mov.w	r8, #1
 8006bac:	f106 0e02 	add.w	lr, r6, #2
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d05c      	beq.n	8006c6e <_strtol_l.isra.0+0xfa>
 8006bb4:	2b10      	cmp	r3, #16
 8006bb6:	d10c      	bne.n	8006bd2 <_strtol_l.isra.0+0x5e>
 8006bb8:	2c30      	cmp	r4, #48	; 0x30
 8006bba:	d10a      	bne.n	8006bd2 <_strtol_l.isra.0+0x5e>
 8006bbc:	f89e 4000 	ldrb.w	r4, [lr]
 8006bc0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006bc4:	2c58      	cmp	r4, #88	; 0x58
 8006bc6:	d14d      	bne.n	8006c64 <_strtol_l.isra.0+0xf0>
 8006bc8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006bcc:	2310      	movs	r3, #16
 8006bce:	f10e 0e02 	add.w	lr, lr, #2
 8006bd2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8006bd6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006bda:	2600      	movs	r6, #0
 8006bdc:	fbbc f9f3 	udiv	r9, ip, r3
 8006be0:	4635      	mov	r5, r6
 8006be2:	fb03 ca19 	mls	sl, r3, r9, ip
 8006be6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006bea:	2f09      	cmp	r7, #9
 8006bec:	d818      	bhi.n	8006c20 <_strtol_l.isra.0+0xac>
 8006bee:	463c      	mov	r4, r7
 8006bf0:	42a3      	cmp	r3, r4
 8006bf2:	dd24      	ble.n	8006c3e <_strtol_l.isra.0+0xca>
 8006bf4:	2e00      	cmp	r6, #0
 8006bf6:	db1f      	blt.n	8006c38 <_strtol_l.isra.0+0xc4>
 8006bf8:	45a9      	cmp	r9, r5
 8006bfa:	d31d      	bcc.n	8006c38 <_strtol_l.isra.0+0xc4>
 8006bfc:	d101      	bne.n	8006c02 <_strtol_l.isra.0+0x8e>
 8006bfe:	45a2      	cmp	sl, r4
 8006c00:	db1a      	blt.n	8006c38 <_strtol_l.isra.0+0xc4>
 8006c02:	fb05 4503 	mla	r5, r5, r3, r4
 8006c06:	2601      	movs	r6, #1
 8006c08:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006c0c:	e7eb      	b.n	8006be6 <_strtol_l.isra.0+0x72>
 8006c0e:	2c2b      	cmp	r4, #43	; 0x2b
 8006c10:	bf08      	it	eq
 8006c12:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006c16:	46a8      	mov	r8, r5
 8006c18:	bf08      	it	eq
 8006c1a:	f106 0e02 	addeq.w	lr, r6, #2
 8006c1e:	e7c7      	b.n	8006bb0 <_strtol_l.isra.0+0x3c>
 8006c20:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006c24:	2f19      	cmp	r7, #25
 8006c26:	d801      	bhi.n	8006c2c <_strtol_l.isra.0+0xb8>
 8006c28:	3c37      	subs	r4, #55	; 0x37
 8006c2a:	e7e1      	b.n	8006bf0 <_strtol_l.isra.0+0x7c>
 8006c2c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006c30:	2f19      	cmp	r7, #25
 8006c32:	d804      	bhi.n	8006c3e <_strtol_l.isra.0+0xca>
 8006c34:	3c57      	subs	r4, #87	; 0x57
 8006c36:	e7db      	b.n	8006bf0 <_strtol_l.isra.0+0x7c>
 8006c38:	f04f 36ff 	mov.w	r6, #4294967295
 8006c3c:	e7e4      	b.n	8006c08 <_strtol_l.isra.0+0x94>
 8006c3e:	2e00      	cmp	r6, #0
 8006c40:	da05      	bge.n	8006c4e <_strtol_l.isra.0+0xda>
 8006c42:	2322      	movs	r3, #34	; 0x22
 8006c44:	6003      	str	r3, [r0, #0]
 8006c46:	4665      	mov	r5, ip
 8006c48:	b942      	cbnz	r2, 8006c5c <_strtol_l.isra.0+0xe8>
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	e79d      	b.n	8006b8a <_strtol_l.isra.0+0x16>
 8006c4e:	f1b8 0f00 	cmp.w	r8, #0
 8006c52:	d000      	beq.n	8006c56 <_strtol_l.isra.0+0xe2>
 8006c54:	426d      	negs	r5, r5
 8006c56:	2a00      	cmp	r2, #0
 8006c58:	d0f7      	beq.n	8006c4a <_strtol_l.isra.0+0xd6>
 8006c5a:	b10e      	cbz	r6, 8006c60 <_strtol_l.isra.0+0xec>
 8006c5c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006c60:	6011      	str	r1, [r2, #0]
 8006c62:	e7f2      	b.n	8006c4a <_strtol_l.isra.0+0xd6>
 8006c64:	2430      	movs	r4, #48	; 0x30
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1b3      	bne.n	8006bd2 <_strtol_l.isra.0+0x5e>
 8006c6a:	2308      	movs	r3, #8
 8006c6c:	e7b1      	b.n	8006bd2 <_strtol_l.isra.0+0x5e>
 8006c6e:	2c30      	cmp	r4, #48	; 0x30
 8006c70:	d0a4      	beq.n	8006bbc <_strtol_l.isra.0+0x48>
 8006c72:	230a      	movs	r3, #10
 8006c74:	e7ad      	b.n	8006bd2 <_strtol_l.isra.0+0x5e>
 8006c76:	bf00      	nop
 8006c78:	08006d4d 	.word	0x08006d4d

08006c7c <strtol>:
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	460a      	mov	r2, r1
 8006c80:	4601      	mov	r1, r0
 8006c82:	4802      	ldr	r0, [pc, #8]	; (8006c8c <strtol+0x10>)
 8006c84:	6800      	ldr	r0, [r0, #0]
 8006c86:	f7ff bf75 	b.w	8006b74 <_strtol_l.isra.0>
 8006c8a:	bf00      	nop
 8006c8c:	2000000c 	.word	0x2000000c

08006c90 <_init>:
 8006c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c92:	bf00      	nop
 8006c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c96:	bc08      	pop	{r3}
 8006c98:	469e      	mov	lr, r3
 8006c9a:	4770      	bx	lr

08006c9c <_fini>:
 8006c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c9e:	bf00      	nop
 8006ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ca2:	bc08      	pop	{r3}
 8006ca4:	469e      	mov	lr, r3
 8006ca6:	4770      	bx	lr
