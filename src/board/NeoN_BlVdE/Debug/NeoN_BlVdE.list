
NeoN_BlVdE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015e64  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a48  08016008  08016008  00026008  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016a50  08016a50  00030230  2**0
                  CONTENTS
  4 .ARM          00000008  08016a50  08016a50  00026a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016a58  08016a58  00030230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016a58  08016a58  00026a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016a5c  08016a5c  00026a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  08016a60  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004804  20000230  08016c90  00030230  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a34  08016c90  00034a34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY
 12 .debug_info   000368b9  00000000  00000000  00030260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057e2  00000000  00000000  00066b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021e0  00000000  00000000  0006c300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fd0  00000000  00000000  0006e4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f626  00000000  00000000  000704b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027d7f  00000000  00000000  0008fad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9ccf  00000000  00000000  000b7855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00161524  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a738  00000000  00000000  00161578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000230 	.word	0x20000230
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08015fec 	.word	0x08015fec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000234 	.word	0x20000234
 80001dc:	08015fec 	.word	0x08015fec

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <_write>:
	}
	return crc;
}

int _write (int file, char *ptr, int len)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY); return 0;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	b29a      	uxth	r2, r3
 800100c:	f04f 33ff 	mov.w	r3, #4294967295
 8001010:	68b9      	ldr	r1, [r7, #8]
 8001012:	4804      	ldr	r0, [pc, #16]	; (8001024 <_write+0x28>)
 8001014:	f009 f923 	bl	800a25e <HAL_UART_Transmit>
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20002838 	.word	0x20002838

08001028 <super_smart_write>:
int super_smart_write(unsigned char *buf, unsigned short len, int8_t * state_sd_from_m)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	460b      	mov	r3, r1
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	817b      	strh	r3, [r7, #10]
		static FATFS fileSystem; // переменная типа FATFS
		static FIL testFile; // хендлер файла
		static UINT bw;
		static FRESULT res;
		static int8_t state_sd = 0;
		const char * path = "testFile.bin"; // название файла
 8001036:	4b4d      	ldr	r3, [pc, #308]	; (800116c <super_smart_write+0x144>)
 8001038:	617b      	str	r3, [r7, #20]

		if(state_sd == 0)
 800103a:	4b4d      	ldr	r3, [pc, #308]	; (8001170 <super_smart_write+0x148>)
 800103c:	f993 3000 	ldrsb.w	r3, [r3]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d12a      	bne.n	800109a <super_smart_write+0x72>
		{
			extern Disk_drvTypeDef  disk;
			disk.is_initialized[0] = 0;
 8001044:	4b4b      	ldr	r3, [pc, #300]	; (8001174 <super_smart_write+0x14c>)
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
			memset(&fileSystem, 0x00, sizeof(fileSystem));
 800104a:	f241 0238 	movw	r2, #4152	; 0x1038
 800104e:	2100      	movs	r1, #0
 8001050:	4849      	ldr	r0, [pc, #292]	; (8001178 <super_smart_write+0x150>)
 8001052:	f00f f819 	bl	8010088 <memset>
			res = f_mount(&fileSystem, "0", 1);
 8001056:	2201      	movs	r2, #1
 8001058:	4948      	ldr	r1, [pc, #288]	; (800117c <super_smart_write+0x154>)
 800105a:	4847      	ldr	r0, [pc, #284]	; (8001178 <super_smart_write+0x150>)
 800105c:	f00c fc56 	bl	800d90c <f_mount>
 8001060:	4603      	mov	r3, r0
 8001062:	461a      	mov	r2, r3
 8001064:	4b46      	ldr	r3, [pc, #280]	; (8001180 <super_smart_write+0x158>)
 8001066:	701a      	strb	r2, [r3, #0]
			if(res == FR_OK){state_sd = 1; *state_sd_from_m = state_sd;}
 8001068:	4b45      	ldr	r3, [pc, #276]	; (8001180 <super_smart_write+0x158>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d108      	bne.n	8001082 <super_smart_write+0x5a>
 8001070:	4b3f      	ldr	r3, [pc, #252]	; (8001170 <super_smart_write+0x148>)
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
 8001076:	4b3e      	ldr	r3, [pc, #248]	; (8001170 <super_smart_write+0x148>)
 8001078:	f993 2000 	ldrsb.w	r2, [r3]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	701a      	strb	r2, [r3, #0]
 8001080:	e00b      	b.n	800109a <super_smart_write+0x72>
			else
			{
				res = f_mount(0, "0", 1);
 8001082:	2201      	movs	r2, #1
 8001084:	493d      	ldr	r1, [pc, #244]	; (800117c <super_smart_write+0x154>)
 8001086:	2000      	movs	r0, #0
 8001088:	f00c fc40 	bl	800d90c <f_mount>
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	4b3b      	ldr	r3, [pc, #236]	; (8001180 <super_smart_write+0x158>)
 8001092:	701a      	strb	r2, [r3, #0]
				return -1;
 8001094:	f04f 33ff 	mov.w	r3, #4294967295
 8001098:	e064      	b.n	8001164 <super_smart_write+0x13c>
			}
		}
		if(state_sd == 1)
 800109a:	4b35      	ldr	r3, [pc, #212]	; (8001170 <super_smart_write+0x148>)
 800109c:	f993 3000 	ldrsb.w	r3, [r3]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d121      	bne.n	80010e8 <super_smart_write+0xc0>
		{
			 *state_sd_from_m = state_sd;
 80010a4:	4b32      	ldr	r3, [pc, #200]	; (8001170 <super_smart_write+0x148>)
 80010a6:	f993 2000 	ldrsb.w	r2, [r3]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	701a      	strb	r2, [r3, #0]
			res = f_open(&testFile, path, FA_WRITE | FA_OPEN_APPEND);
 80010ae:	2232      	movs	r2, #50	; 0x32
 80010b0:	6979      	ldr	r1, [r7, #20]
 80010b2:	4834      	ldr	r0, [pc, #208]	; (8001184 <super_smart_write+0x15c>)
 80010b4:	f00c fc70 	bl	800d998 <f_open>
 80010b8:	4603      	mov	r3, r0
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b30      	ldr	r3, [pc, #192]	; (8001180 <super_smart_write+0x158>)
 80010be:	701a      	strb	r2, [r3, #0]
			if(res == FR_OK) state_sd = 2;
 80010c0:	4b2f      	ldr	r3, [pc, #188]	; (8001180 <super_smart_write+0x158>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d103      	bne.n	80010d0 <super_smart_write+0xa8>
 80010c8:	4b29      	ldr	r3, [pc, #164]	; (8001170 <super_smart_write+0x148>)
 80010ca:	2202      	movs	r2, #2
 80010cc:	701a      	strb	r2, [r3, #0]
 80010ce:	e00b      	b.n	80010e8 <super_smart_write+0xc0>
			else
			{
				state_sd = 0;
 80010d0:	4b27      	ldr	r3, [pc, #156]	; (8001170 <super_smart_write+0x148>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
				res = f_mount(0, "0", 1);
 80010d6:	2201      	movs	r2, #1
 80010d8:	4928      	ldr	r1, [pc, #160]	; (800117c <super_smart_write+0x154>)
 80010da:	2000      	movs	r0, #0
 80010dc:	f00c fc16 	bl	800d90c <f_mount>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	4b26      	ldr	r3, [pc, #152]	; (8001180 <super_smart_write+0x158>)
 80010e6:	701a      	strb	r2, [r3, #0]
			}
		}
		if (state_sd == 2)
 80010e8:	4b21      	ldr	r3, [pc, #132]	; (8001170 <super_smart_write+0x148>)
 80010ea:	f993 3000 	ldrsb.w	r3, [r3]
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d1a1      	bne.n	8001036 <super_smart_write+0xe>
		{
			 *state_sd_from_m = state_sd;
 80010f2:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <super_smart_write+0x148>)
 80010f4:	f993 2000 	ldrsb.w	r2, [r3]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	701a      	strb	r2, [r3, #0]
            res = f_write (&testFile,  (uint8_t *)buf, len, &bw);
 80010fc:	897a      	ldrh	r2, [r7, #10]
 80010fe:	4b22      	ldr	r3, [pc, #136]	; (8001188 <super_smart_write+0x160>)
 8001100:	68f9      	ldr	r1, [r7, #12]
 8001102:	4820      	ldr	r0, [pc, #128]	; (8001184 <super_smart_write+0x15c>)
 8001104:	f00c fe14 	bl	800dd30 <f_write>
 8001108:	4603      	mov	r3, r0
 800110a:	461a      	mov	r2, r3
 800110c:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <super_smart_write+0x158>)
 800110e:	701a      	strb	r2, [r3, #0]
            if (HAL_GetTick() - start_time >= 10)
 8001110:	f004 ff26 	bl	8005f60 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	4b1d      	ldr	r3, [pc, #116]	; (800118c <super_smart_write+0x164>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b09      	cmp	r3, #9
 800111e:	d90b      	bls.n	8001138 <super_smart_write+0x110>
            {
            	res = f_sync(&testFile);
 8001120:	4818      	ldr	r0, [pc, #96]	; (8001184 <super_smart_write+0x15c>)
 8001122:	f00c ff99 	bl	800e058 <f_sync>
 8001126:	4603      	mov	r3, r0
 8001128:	461a      	mov	r2, r3
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <super_smart_write+0x158>)
 800112c:	701a      	strb	r2, [r3, #0]
                start_time  = HAL_GetTick();
 800112e:	f004 ff17 	bl	8005f60 <HAL_GetTick>
 8001132:	4603      	mov	r3, r0
 8001134:	4a15      	ldr	r2, [pc, #84]	; (800118c <super_smart_write+0x164>)
 8001136:	6013      	str	r3, [r2, #0]
            }
	        if (res == FR_OK) return 0;
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <super_smart_write+0x158>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d101      	bne.n	8001144 <super_smart_write+0x11c>
 8001140:	2300      	movs	r3, #0
 8001142:	e00f      	b.n	8001164 <super_smart_write+0x13c>
            if (res != FR_OK)
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <super_smart_write+0x158>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	f43f af74 	beq.w	8001036 <super_smart_write+0xe>
            {
    			res = f_close(&testFile);
 800114e:	480d      	ldr	r0, [pc, #52]	; (8001184 <super_smart_write+0x15c>)
 8001150:	f00d f800 	bl	800e154 <f_close>
 8001154:	4603      	mov	r3, r0
 8001156:	461a      	mov	r2, r3
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <super_smart_write+0x158>)
 800115a:	701a      	strb	r2, [r3, #0]
            	state_sd = 1;
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <super_smart_write+0x148>)
 800115e:	2201      	movs	r2, #1
 8001160:	701a      	strb	r2, [r3, #0]
	{
 8001162:	e768      	b.n	8001036 <super_smart_write+0xe>
            }
		}
	}
}
 8001164:	4618      	mov	r0, r3
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	08016008 	.word	0x08016008
 8001170:	2000024c 	.word	0x2000024c
 8001174:	20002340 	.word	0x20002340
 8001178:	20000250 	.word	0x20000250
 800117c:	08016018 	.word	0x08016018
 8001180:	20001288 	.word	0x20001288
 8001184:	2000128c 	.word	0x2000128c
 8001188:	200022bc 	.word	0x200022bc
 800118c:	200022c0 	.word	0x200022c0

08001190 <app_main>:
	STATE_FOUND_ME_PLS
}state_t;


int app_main()
{
 8001190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001194:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8001198:	af00      	add	r7, sp, #0
	float lux_sun = 0;
 800119a:	f04f 0300 	mov.w	r3, #0
 800119e:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
	uint32_t start_time_io = HAL_GetTick();
 80011a2:	f004 fedd 	bl	8005f60 <HAL_GetTick>
 80011a6:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
	packet_ma_type_11_t packet_ma_type_11;
	packet_ma_type_12_t packet_ma_type_12 ;
 	packet_ma_type_2_t packet_ma_type_2 ;

	float quaternion[4] = {0};
 80011aa:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
	float seb_time_prev = 0;
 80011b8:	f04f 0300 	mov.w	r3, #0
 80011bc:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
	float seb_time = 0;
 80011c0:	f04f 0300 	mov.w	r3, #0
 80011c4:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    float altitude;
    int fix;
    int64_t cookie;

    photorezistor_t photorezist;
    photorezist.resist = 2000;
 80011c8:	4b8f      	ldr	r3, [pc, #572]	; (8001408 <app_main+0x278>)
 80011ca:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    photorezist.hadc = 	&hadc1;
 80011ce:	4b8f      	ldr	r3, [pc, #572]	; (800140c <app_main+0x27c>)
 80011d0:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174

	int16_t temp_lis;
	int16_t mag[3] = {0};
 80011d4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	809a      	strh	r2, [r3, #4]

	stmdev_ctx_t ctx = {0};
 80011de:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80011e2:	461a      	mov	r2, r3
 80011e4:	2300      	movs	r3, #0
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	6053      	str	r3, [r2, #4]
 80011ea:	6093      	str	r3, [r2, #8]
    struct lis_spi_intf lis_spi;
	lis_spi.GPIO_Port = GPIOA;
 80011ec:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80011f0:	4a87      	ldr	r2, [pc, #540]	; (8001410 <app_main+0x280>)
 80011f2:	601a      	str	r2, [r3, #0]
	lis_spi.GPIO_Pin = GPIO_PIN_4;
 80011f4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80011f8:	2210      	movs	r2, #16
 80011fa:	809a      	strh	r2, [r3, #4]
	lis_spi.spi = &hspi1;
 80011fc:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001200:	4a84      	ldr	r2, [pc, #528]	; (8001414 <app_main+0x284>)
 8001202:	609a      	str	r2, [r3, #8]
	lisset(&ctx, &lis_spi);
 8001204:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8001208:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800120c:	4611      	mov	r1, r2
 800120e:	4618      	mov	r0, r3
 8001210:	f00d fb6c 	bl	800e8ec <lisset>


	int16_t temperature_celsius_gyro;
	int16_t acc_g[3];
	int16_t gyro_dps[3];
	stmdev_ctx_t lsmctx = {0};
 8001214:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001218:	461a      	mov	r2, r3
 800121a:	2300      	movs	r3, #0
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	6053      	str	r3, [r2, #4]
 8001220:	6093      	str	r3, [r2, #8]
	struct lsm_spi_intf lsm_spi;
	lsm_spi.GPIO_Port = GPIOC;
 8001222:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001226:	4a7c      	ldr	r2, [pc, #496]	; (8001418 <app_main+0x288>)
 8001228:	601a      	str	r2, [r3, #0]
	lsm_spi.GPIO_Pin = GPIO_PIN_13;
 800122a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800122e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001232:	809a      	strh	r2, [r3, #4]
	lsm_spi.spi = &hspi1;
 8001234:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001238:	4a76      	ldr	r2, [pc, #472]	; (8001414 <app_main+0x284>)
 800123a:	609a      	str	r2, [r3, #8]
	lsmset(&lsmctx, &lsm_spi);
 800123c:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001240:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001244:	4611      	mov	r1, r2
 8001246:	4618      	mov	r0, r3
 8001248:	f00d fe70 	bl	800ef2c <lsmset>
	gps_init();
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
	//__HAL_UART_ENABLE_IT(&huart1, UART_IT_ERR);
    }

    int bmeinit = 10000;
 800124c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001250:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
    bme_important_shit bme_important;//////////////////////////////////BME
    if(BME_FLAG == 1){
    bmeinit = its_bme280_init(UNKNXW);
 8001254:	2000      	movs	r0, #0
 8001256:	f004 fc80 	bl	8005b5a <its_bme280_init>
 800125a:	f8c7 0224 	str.w	r0, [r7, #548]	; 0x224
    }
    uint8_t bme_gnd_cnt = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
    double bme_press_ground = 0;
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	f04f 0300 	mov.w	r3, #0
 800126c:	e9c7 2394 	strd	r2, r3, [r7, #592]	; 0x250
    for(int i = 0; i < 10; i++)
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8001276:	e027      	b.n	80012c8 <app_main+0x138>
    {
    	its_bme280_read(UNKNXW, &bme_important);
 8001278:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800127c:	4619      	mov	r1, r3
 800127e:	2000      	movs	r0, #0
 8001280:	f004 fcb2 	bl	8005be8 <its_bme280_read>
    	if(bme_important.pressure>90000){
 8001284:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001288:	e9d3 0100 	ldrd	r0, r1, [r3]
 800128c:	a35c      	add	r3, pc, #368	; (adr r3, 8001400 <app_main+0x270>)
 800128e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001292:	f7ff fc49 	bl	8000b28 <__aeabi_dcmpgt>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d010      	beq.n	80012be <app_main+0x12e>
    	bme_press_ground += bme_important.pressure;bme_gnd_cnt++;}
 800129c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	; 0x250
 80012a8:	f7fe fff8 	bl	800029c <__adddf3>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	e9c7 2394 	strd	r2, r3, [r7, #592]	; 0x250
 80012b4:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 80012b8:	3301      	adds	r3, #1
 80012ba:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
    for(int i = 0; i < 10; i++)
 80012be:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80012c2:	3301      	adds	r3, #1
 80012c4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80012c8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80012cc:	2b09      	cmp	r3, #9
 80012ce:	ddd3      	ble.n	8001278 <app_main+0xe8>
    }
    bme_press_ground = bme_press_ground/bme_gnd_cnt;
 80012d0:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff f92d 	bl	8000534 <__aeabi_i2d>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	; 0x250
 80012e2:	f7ff fabb 	bl	800085c <__aeabi_ddiv>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	e9c7 2394 	strd	r2, r3, [r7, #592]	; 0x250

    int8_t state_sd = 0;//sd
 80012ee:	f107 03f7 	add.w	r3, r7, #247	; 0xf7
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
    int retin;

    tdc21_all_regs_t tdc21_all_regs;
    //создаем и настраиваем дескриптор тдс21
    tdcgp21_spi_pins_t tdcgp21_spi_pins;
    tdcgp21_spi_pins.ce_pin = 0;
 80012f6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80012fa:	2200      	movs	r2, #0
 80012fc:	809a      	strh	r2, [r3, #4]
    tdcgp21_spi_pins.ce_port = 0;
 80012fe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
    tdcgp21_spi_pins.cs_pin = GPIO_PIN_10;
 8001306:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800130a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800130e:	819a      	strh	r2, [r3, #12]
    tdcgp21_spi_pins.cs_port = GPIOB;
 8001310:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001314:	4a41      	ldr	r2, [pc, #260]	; (800141c <app_main+0x28c>)
 8001316:	609a      	str	r2, [r3, #8]
    tdcgp21_lovver_api_config_t tdcgp21_api_config;
    tdc21_spi_init(&tdcgp21_api_config, &hspi4, &tdcgp21_spi_pins);
 8001318:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800131c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001320:	493f      	ldr	r1, [pc, #252]	; (8001420 <app_main+0x290>)
 8001322:	4618      	mov	r0, r3
 8001324:	f00d f8d4 	bl	800e4d0 <tdc21_spi_init>
    tdc21_all_regs = tdc21_config(&tdcgp21_api_config);
 8001328:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800132c:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8001330:	4611      	mov	r1, r2
 8001332:	4618      	mov	r0, r3
 8001334:	f00d f8e4 	bl	800e500 <tdc21_config>
	tdcgp21_write_register(&tdcgp21_api_config, TDC21_WREG6, (uint8_t*)&r6, 4);*/


	//Создаем и настраиваем дескриптор радиомодуля nRF24L01
	nrf24_spi_pins_t nrf24_spi_pins;
	nrf24_spi_pins.ce_pin = GPIO_PIN_1;
 8001338:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800133c:	2202      	movs	r2, #2
 800133e:	809a      	strh	r2, [r3, #4]
	nrf24_spi_pins.ce_port = GPIOB;
 8001340:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001344:	4a35      	ldr	r2, [pc, #212]	; (800141c <app_main+0x28c>)
 8001346:	601a      	str	r2, [r3, #0]
	nrf24_spi_pins.cs_pin = GPIO_PIN_2;
 8001348:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800134c:	2204      	movs	r2, #4
 800134e:	819a      	strh	r2, [r3, #12]
	nrf24_spi_pins.cs_port = GPIOB;
 8001350:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001354:	4a31      	ldr	r2, [pc, #196]	; (800141c <app_main+0x28c>)
 8001356:	609a      	str	r2, [r3, #8]
	nrf24_lower_api_config_t nrf24_api_config;
	nrf24_spi_init(&nrf24_api_config, &hspi5, &nrf24_spi_pins);
 8001358:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800135c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001360:	4930      	ldr	r1, [pc, #192]	; (8001424 <app_main+0x294>)
 8001362:	4618      	mov	r0, r3
 8001364:	f00e fafc 	bl	800f960 <nrf24_spi_init>

	//Перед настройкой регистров радио переводим его в standby mode
	//nrf24_mode_standby(&nrf24_api_config);
	nrf24_mode_power_down(&nrf24_api_config);
 8001368:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800136c:	4618      	mov	r0, r3
 800136e:	f00e fcf4 	bl	800fd5a <nrf24_mode_power_down>

	// Настраиваем параметры радиопередачи
	nrf24_rf_config_t nrf24_rf_config;
	nrf24_rf_config.data_rate = NRF24_DATARATE_250_KBIT;
 8001372:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]
	nrf24_rf_config.rf_channel = 110;
 800137a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800137e:	226e      	movs	r2, #110	; 0x6e
 8001380:	709a      	strb	r2, [r3, #2]
	nrf24_rf_config.tx_power = NRF24_TXPOWER_MINUS_18_DBM;
 8001382:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001386:	2200      	movs	r2, #0
 8001388:	705a      	strb	r2, [r3, #1]
	nrf24_setup_rf(&nrf24_api_config, &nrf24_rf_config);
 800138a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800138e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001392:	4611      	mov	r1, r2
 8001394:	4618      	mov	r0, r3
 8001396:	f00e faff 	bl	800f998 <nrf24_setup_rf>

	// Настраиваем протокол радиопередачи
	nrf24_protocol_config_t nrf24_protocol_config;
	nrf24_protocol_config.address_width = NRF24_ADDRES_WIDTH_5_BYTES;
 800139a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800139e:	2203      	movs	r2, #3
 80013a0:	705a      	strb	r2, [r3, #1]
	nrf24_protocol_config.auto_retransmit_count = 0;
 80013a2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80013a6:	2200      	movs	r2, #0
 80013a8:	715a      	strb	r2, [r3, #5]
	nrf24_protocol_config.auto_retransmit_delay = 0;
 80013aa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80013ae:	2200      	movs	r2, #0
 80013b0:	719a      	strb	r2, [r3, #6]
	nrf24_protocol_config.crc_size = NRF24_CRCSIZE_1BYTE;
 80013b2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]
	nrf24_protocol_config.en_ack_payload = false;/// НАДО тру
 80013ba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80013be:	2200      	movs	r2, #0
 80013c0:	70da      	strb	r2, [r3, #3]
	nrf24_protocol_config.en_dyn_ack = false;//НАДО фалс
 80013c2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80013c6:	2200      	movs	r2, #0
 80013c8:	711a      	strb	r2, [r3, #4]
	nrf24_protocol_config.en_dyn_payload_size = true;//НАДО ФАЛС
 80013ca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80013ce:	2201      	movs	r2, #1
 80013d0:	709a      	strb	r2, [r3, #2]
	nrf24_setup_protocol(&nrf24_api_config, &nrf24_protocol_config);
 80013d2:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80013d6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013da:	4611      	mov	r1, r2
 80013dc:	4618      	mov	r0, r3
 80013de:	f00e fb3d 	bl	800fa5c <nrf24_setup_protocol>
	nrf24_pipe_set_tx_addr(&nrf24_api_config, 0xacacacacac);
 80013e2:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 80013e6:	f04f 32ac 	mov.w	r2, #2896997548	; 0xacacacac
 80013ea:	f04f 03ac 	mov.w	r3, #172	; 0xac
 80013ee:	4608      	mov	r0, r1
 80013f0:	f00e fca2 	bl	800fd38 <nrf24_pipe_set_tx_addr>


	nrf24_pipe_config_t pipe_config;
	for (int i = 1; i < 6; i++)
 80013f4:	2301      	movs	r3, #1
 80013f6:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80013fa:	e054      	b.n	80014a6 <app_main+0x316>
 80013fc:	f3af 8000 	nop.w
 8001400:	00000000 	.word	0x00000000
 8001404:	40f5f900 	.word	0x40f5f900
 8001408:	44fa0000 	.word	0x44fa0000
 800140c:	200027f0 	.word	0x200027f0
 8001410:	40020000 	.word	0x40020000
 8001414:	20002958 	.word	0x20002958
 8001418:	40020800 	.word	0x40020800
 800141c:	40020400 	.word	0x40020400
 8001420:	2000287c 	.word	0x2000287c
 8001424:	20002744 	.word	0x20002744
	{
		pipe_config.address = 0xacacacacac;
 8001428:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800142c:	f04f 32ac 	mov.w	r2, #2896997548	; 0xacacacac
 8001430:	f04f 03ac 	mov.w	r3, #172	; 0xac
 8001434:	e9c1 2302 	strd	r2, r3, [r1, #8]
		pipe_config.address = (pipe_config.address & ~((uint64_t)0xff << 32)) | ((uint64_t)(i + 7) << 32);
 8001438:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800143c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
 8001444:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8001448:	ea02 0400 	and.w	r4, r2, r0
 800144c:	ea03 0501 	and.w	r5, r3, r1
 8001450:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8001454:	3307      	adds	r3, #7
 8001456:	4618      	mov	r0, r3
 8001458:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	f04f 0300 	mov.w	r3, #0
 8001464:	0003      	movs	r3, r0
 8001466:	2200      	movs	r2, #0
 8001468:	ea44 0802 	orr.w	r8, r4, r2
 800146c:	ea45 0903 	orr.w	r9, r5, r3
 8001470:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001474:	e9c3 8902 	strd	r8, r9, [r3, #8]
		pipe_config.enable_auto_ack = false;
 8001478:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
		pipe_config.payload_size = -1;
 8001480:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001484:	22ff      	movs	r2, #255	; 0xff
 8001486:	741a      	strb	r2, [r3, #16]
		nrf24_pipe_rx_start(&nrf24_api_config, i, &pipe_config);
 8001488:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800148c:	b2d9      	uxtb	r1, r3
 800148e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001492:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001496:	4618      	mov	r0, r3
 8001498:	f00e fb64 	bl	800fb64 <nrf24_pipe_rx_start>
	for (int i = 1; i < 6; i++)
 800149c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80014a0:	3301      	adds	r3, #1
 80014a2:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80014a6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80014aa:	2b05      	cmp	r3, #5
 80014ac:	ddbc      	ble.n	8001428 <app_main+0x298>
	}

	pipe_config.address = 0xafafafaf01;
 80014ae:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80014b2:	4ae7      	ldr	r2, [pc, #924]	; (8001850 <app_main+0x6c0>)
 80014b4:	f04f 03af 	mov.w	r3, #175	; 0xaf
 80014b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	pipe_config.enable_auto_ack = false;
 80014bc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
	pipe_config.payload_size = -1;
 80014c4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80014c8:	22ff      	movs	r2, #255	; 0xff
 80014ca:	741a      	strb	r2, [r3, #16]
	nrf24_pipe_rx_start(&nrf24_api_config, 0, &pipe_config);
 80014cc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80014d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f00e fb44 	bl	800fb64 <nrf24_pipe_rx_start>

	nrf24_mode_standby(&nrf24_api_config);
 80014dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014e0:	4618      	mov	r0, r3
 80014e2:	f00e fc58 	bl	800fd96 <nrf24_mode_standby>
	nrf24_mode_tx(&nrf24_api_config);
 80014e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014ea:	4618      	mov	r0, r3
 80014ec:	f00e fc75 	bl	800fdda <nrf24_mode_tx>




	uint8_t rx_buffer[32] = {0};
 80014f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	3304      	adds	r3, #4
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	611a      	str	r2, [r3, #16]
 8001506:	615a      	str	r2, [r3, #20]
 8001508:	619a      	str	r2, [r3, #24]
	uint8_t tx_buffer[32] = {0};
 800150a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	3304      	adds	r3, #4
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
 8001520:	615a      	str	r2, [r3, #20]
 8001522:	619a      	str	r2, [r3, #24]
	nrf24_fifo_status_t rx_status = 2;
 8001524:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8001528:	2202      	movs	r2, #2
 800152a:	701a      	strb	r2, [r3, #0]
    nrf24_fifo_status_t tx_status = 2;
 800152c:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8001530:	2202      	movs	r2, #2
 8001532:	701a      	strb	r2, [r3, #0]

    int errrrrrrrrr, radio_read_err;//
	int IRQ_flags;///////////////////переменные для отладки радио
    bool radio_flag;////////////////
 	int irq_err = 10;//////////////
 8001534:	230a      	movs	r3, #10
 8001536:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 	int size_in_tx = 0;///////////
 800153a:	2300      	movs	r3, #0
 800153c:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 	float time_for_madgwik = 0;
 8001540:	f04f 0300 	mov.w	r3, #0
 8001544:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 	for(int i = 0; i < 10; i++)
 		packet_ma_type_12.null[i] = 0;
 	for(int i = 0; i < 3; i++)
 		packet_ma_type_2.nulll[i] = 0;*/
 	uint8_t data_nrf_tx_ds;
 	int num1 = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 	int num2 = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 	int time_on_board = 0;//время на борте
 8001554:	2300      	movs	r3, #0
 8001556:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    float lux;


    state_t fckng_state = STATE_ON_GND;
 800155a:	2300      	movs	r3, #0
 800155c:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
    uint32_t start_time_to;

    uint32_t time_parashute = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

    float LSM_TEMP = 0;
 8001566:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
    float accc[3] = {0};
 8001570:	f107 031c 	add.w	r3, r7, #28
 8001574:	461a      	mov	r2, r3
 8001576:	2300      	movs	r3, #0
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	6053      	str	r3, [r2, #4]
 800157c:	6093      	str	r3, [r2, #8]
    float gyrooo[3] = {0};
 800157e:	f107 0310 	add.w	r3, r7, #16
 8001582:	461a      	mov	r2, r3
 8001584:	2300      	movs	r3, #0
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	6053      	str	r3, [r2, #4]
 800158a:	6093      	str	r3, [r2, #8]
    float magfloat[3] = {0};
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	461a      	mov	r2, r3
 8001590:	2300      	movs	r3, #0
 8001592:	6013      	str	r3, [r2, #0]
 8001594:	6053      	str	r3, [r2, #4]
 8001596:	6093      	str	r3, [r2, #8]
    float temp_lis_float;
 	while(true)
	{
 		packet_ma_type_11.flag = 0xFF;
 8001598:	23ff      	movs	r3, #255	; 0xff
 800159a:	f887 31e0 	strb.w	r3, [r7, #480]	; 0x1e0
 		packet_ma_type_12.flag = 0xFA;
 800159e:	23fa      	movs	r3, #250	; 0xfa
 80015a0:	f887 31c0 	strb.w	r3, [r7, #448]	; 0x1c0
 		packet_ma_type_2.flag = 0xAA;
 80015a4:	23aa      	movs	r3, #170	; 0xaa
 80015a6:	f887 31a0 	strb.w	r3, [r7, #416]	; 0x1a0
 		packet_ma_type_11.time = time_on_board;
 80015aa:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80015ae:	f8c7 31e3 	str.w	r3, [r7, #483]	; 0x1e3
 		packet_ma_type_12.time = time_on_board;
 80015b2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80015b6:	f8c7 31c3 	str.w	r3, [r7, #451]	; 0x1c3
 		packet_ma_type_2.time = time_on_board;
 80015ba:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80015be:	f8c7 31a3 	str.w	r3, [r7, #419]	; 0x1a3
		packet_ma_type_11.num = num1;
 80015c2:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	f8a7 31e1 	strh.w	r3, [r7, #481]	; 0x1e1
		packet_ma_type_12.num = num1;
 80015cc:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	f8a7 31c1 	strh.w	r3, [r7, #449]	; 0x1c1
		packet_ma_type_2.num = num2;
 80015d6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80015da:	b29b      	uxth	r3, r3
 80015dc:	f8a7 31a1 	strh.w	r3, [r7, #417]	; 0x1a1
    	num1++;
 80015e0:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80015e4:	3301      	adds	r3, #1
 80015e6:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
    	num2++;
 80015ea:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80015ee:	3301      	adds	r3, #1
 80015f0:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    	lux = photorezistor_get_lux(photorezist);
 80015f4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80015f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015fc:	f00d ff44 	bl	800f488 <photorezistor_get_lux>
 8001600:	ed87 0a84 	vstr	s0, [r7, #528]	; 0x210
 		time_on_board = HAL_GetTick();
 8001604:	f004 fcac 	bl	8005f60 <HAL_GetTick>
 8001608:	4603      	mov	r3, r0
 800160a:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		retin = lis3mdl_read_reg(&ctx, 0x0F , (uint8_t *) &abobus, 6);
 800160e:	f107 02f6 	add.w	r2, r7, #246	; 0xf6
 8001612:	f507 70ae 	add.w	r0, r7, #348	; 0x15c
 8001616:	2306      	movs	r3, #6
 8001618:	210f      	movs	r1, #15
 800161a:	f00d f9e5 	bl	800e9e8 <lis3mdl_read_reg>
 800161e:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
 			tdc21_read_register(&tdcgp21_api_config, TDC21_REG1, (uint8_t*)&reg1wr, 1);
			tdc21_full_reset(&tdcgp21_api_config);
 			HAL_Delay(125);
 			tdc21_read_register(&tdcgp21_api_config, TDC21_REG1, (uint8_t*)&reg1wr, 1);
 			HAL_Delay(5);*/
 			tdc21_start_tof(&tdcgp21_api_config);
 8001622:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001626:	4618      	mov	r0, r3
 8001628:	f00c ff3f 	bl	800e4aa <tdc21_start_tof>
 			HAL_Delay(5);
 800162c:	2005      	movs	r0, #5
 800162e:	f004 fca3 	bl	8005f78 <HAL_Delay>
		}

		if(SD_FLAG)
		{
			super_smart_write((uint8_t *)&packet_ma_type_11, 32, &state_sd);
 8001632:	f107 02f7 	add.w	r2, r7, #247	; 0xf7
 8001636:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800163a:	2120      	movs	r1, #32
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fcf3 	bl	8001028 <super_smart_write>
			super_smart_write((uint8_t *)&packet_ma_type_12, 32, &state_sd);
 8001642:	f107 02f7 	add.w	r2, r7, #247	; 0xf7
 8001646:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800164a:	2120      	movs	r1, #32
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fceb 	bl	8001028 <super_smart_write>
			super_smart_write((uint8_t *)&packet_ma_type_2, 32, &state_sd);
 8001652:	f107 02f7 	add.w	r2, r7, #247	; 0xf7
 8001656:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800165a:	2120      	movs	r1, #32
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fce3 	bl	8001028 <super_smart_write>
			//printf("%f %f %f           %ld\n", (double)latitude, (double)lontitude, (double)altitude, fix);
		}

		if (LSM_FLAG)
		{
			lsmread(&lsmctx, &LSM_TEMP, &accc, &gyrooo);
 8001662:	f107 0310 	add.w	r3, r7, #16
 8001666:	f107 021c 	add.w	r2, r7, #28
 800166a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800166e:	f507 709a 	add.w	r0, r7, #308	; 0x134
 8001672:	f00d fc91 	bl	800ef98 <lsmread>
			lsm6ds3_temperature_raw_get(&lsmctx, &temperature_celsius_gyro);//ЗАПРОС СЫРЫХ ДАННЫХ
 8001676:	f507 72a7 	add.w	r2, r7, #334	; 0x14e
 800167a:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800167e:	4611      	mov	r1, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f00d fe0f 	bl	800f2a4 <lsm6ds3_temperature_raw_get>
 			lsm6ds3_acceleration_raw_get(&lsmctx, acc_g);
 8001686:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800168a:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800168e:	4611      	mov	r1, r2
 8001690:	4618      	mov	r0, r3
 8001692:	f00d fe75 	bl	800f380 <lsm6ds3_acceleration_raw_get>
			lsm6ds3_angular_rate_raw_get(&lsmctx, gyro_dps);
 8001696:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800169a:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800169e:	4611      	mov	r1, r2
 80016a0:	4618      	mov	r0, r3
 80016a2:	f00d fe22 	bl	800f2ea <lsm6ds3_angular_rate_raw_get>
			packet_ma_type_2.acc_mg[0] = acc_g[0];
 80016a6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80016aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ae:	f8a7 31a7 	strh.w	r3, [r7, #423]	; 0x1a7
			packet_ma_type_2.acc_mg[1] = acc_g[1];
 80016b2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80016b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016ba:	f8a7 31a9 	strh.w	r3, [r7, #425]	; 0x1a9
			packet_ma_type_2.acc_mg[2] = acc_g[2];
 80016be:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80016c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016c6:	f8a7 31ab 	strh.w	r3, [r7, #427]	; 0x1ab
			/*gyro_dps[0]-=0,48461538;
			gyro_dps[1]+=3,45999986923;
			gyro_dps[2]+=2,561433749;*/
			packet_ma_type_2.gyro_mdps[0] = gyro_dps[0];
 80016ca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80016ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d2:	f8a7 31ad 	strh.w	r3, [r7, #429]	; 0x1ad
			packet_ma_type_2.gyro_mdps[1] = gyro_dps[1];
 80016d6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80016da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016de:	f8a7 31af 	strh.w	r3, [r7, #431]	; 0x1af
			packet_ma_type_2.gyro_mdps[2] = gyro_dps[2];
 80016e2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80016e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016ea:	f8a7 31b1 	strh.w	r3, [r7, #433]	; 0x1b1
			}

		if (LIS_FLAG)
		{
			lisread(&ctx, &temp_lis_float, &magfloat);
 80016ee:	1d3a      	adds	r2, r7, #4
 80016f0:	4639      	mov	r1, r7
 80016f2:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80016f6:	4618      	mov	r0, r3
 80016f8:	f00d f93a 	bl	800e970 <lisread>
			lis3mdl_magnetic_raw_get(&ctx, mag);
 80016fc:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8001700:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8001704:	4611      	mov	r1, r2
 8001706:	4618      	mov	r0, r3
 8001708:	f00d fad6 	bl	800ecb8 <lis3mdl_magnetic_raw_get>
			//lis3mdl_temperature_raw_get(&ctx, &temp_lis);//ЗАПРОС СЫРЫХ ДАННЫХ
			packet_ma_type_2.LIS3MDL_magnetometer[0] = mag[0];
 800170c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001710:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001714:	f8a7 31b3 	strh.w	r3, [r7, #435]	; 0x1b3
			packet_ma_type_2.LIS3MDL_magnetometer[1] = mag[1];
 8001718:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800171c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001720:	f8a7 31b5 	strh.w	r3, [r7, #437]	; 0x1b5
			packet_ma_type_2.LIS3MDL_magnetometer[2] = mag[2];
 8001724:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001728:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800172c:	f8a7 31b7 	strh.w	r3, [r7, #439]	; 0x1b7

		}

		if(BME_FLAG == 1)
		{
			its_bme280_read(UNKNXW, &bme_important);
 8001730:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001734:	4619      	mov	r1, r3
 8001736:	2000      	movs	r0, #0
 8001738:	f004 fa56 	bl	8005be8 <its_bme280_read>
			packet_ma_type_11.BME280_pressure = bme_important.pressure;
 800173c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f207 11e7 	addw	r1, r7, #487	; 0x1e7
 8001748:	600a      	str	r2, [r1, #0]
 800174a:	604b      	str	r3, [r1, #4]
			packet_ma_type_11.BME280_temperature = (float)bme_important.temperature;
 800174c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001750:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001754:	4610      	mov	r0, r2
 8001756:	4619      	mov	r1, r3
 8001758:	f7ff fa4e 	bl	8000bf8 <__aeabi_d2f>
 800175c:	4603      	mov	r3, r0
 800175e:	f8c7 31ef 	str.w	r3, [r7, #495]	; 0x1ef
			packet_ma_type_11.height_bme = 44330.0*(1.0 - pow((float)packet_ma_type_11.BME280_pressure/bme_press_ground, 1.0/5.255));
 8001762:	f8d7 21e7 	ldr.w	r2, [r7, #487]	; 0x1e7
 8001766:	f8d7 31eb 	ldr.w	r3, [r7, #491]	; 0x1eb
 800176a:	4610      	mov	r0, r2
 800176c:	4619      	mov	r1, r3
 800176e:	f7ff fa43 	bl	8000bf8 <__aeabi_d2f>
 8001772:	4603      	mov	r3, r0
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe feef 	bl	8000558 <__aeabi_f2d>
 800177a:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 800177e:	f7ff f86d 	bl	800085c <__aeabi_ddiv>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	ec43 2b17 	vmov	d7, r2, r3
 800178a:	ed9f 1b2b 	vldr	d1, [pc, #172]	; 8001838 <app_main+0x6a8>
 800178e:	eeb0 0a47 	vmov.f32	s0, s14
 8001792:	eef0 0a67 	vmov.f32	s1, s15
 8001796:	f013 f913 	bl	80149c0 <pow>
 800179a:	ec53 2b10 	vmov	r2, r3, d0
 800179e:	f04f 0000 	mov.w	r0, #0
 80017a2:	492c      	ldr	r1, [pc, #176]	; (8001854 <app_main+0x6c4>)
 80017a4:	f7fe fd78 	bl	8000298 <__aeabi_dsub>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4610      	mov	r0, r2
 80017ae:	4619      	mov	r1, r3
 80017b0:	a323      	add	r3, pc, #140	; (adr r3, 8001840 <app_main+0x6b0>)
 80017b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b6:	f7fe ff27 	bl	8000608 <__aeabi_dmul>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	f207 11f3 	addw	r1, r7, #499	; 0x1f3
 80017c2:	600a      	str	r2, [r1, #0]
 80017c4:	604b      	str	r3, [r1, #4]
		}

		seb_time = HAL_GetTick();
 80017c6:	f004 fbcb 	bl	8005f60 <HAL_GetTick>
 80017ca:	ee07 0a90 	vmov	s15, r0
 80017ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017d2:	edc7 7a8a 	vstr	s15, [r7, #552]	; 0x228
		//printf("mX = %f\tmY = %f\tmZ = %f\n", (double)-1* mag[0], (double) -1 * mag[1], (double)mag[2]);
		MadgwickAHRSupdate(quaternion, gyro_dps[0] * 3.1415 / 180, gyro_dps[1] * 3.1415 / 180, gyro_dps[2] * 3.1415 / 180,  acc_g[0] *9.81, acc_g[1] *9.81, acc_g[2] *9.81, -1* mag[0], -1 * mag[1], mag[2], (seb_time - seb_time_prev) / 1000.0, 0.3);
 80017d6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80017da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe fea8 	bl	8000534 <__aeabi_i2d>
 80017e4:	a318      	add	r3, pc, #96	; (adr r3, 8001848 <app_main+0x6b8>)
 80017e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ea:	f7fe ff0d 	bl	8000608 <__aeabi_dmul>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	4610      	mov	r0, r2
 80017f4:	4619      	mov	r1, r3
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	4b17      	ldr	r3, [pc, #92]	; (8001858 <app_main+0x6c8>)
 80017fc:	f7ff f82e 	bl	800085c <__aeabi_ddiv>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
 8001808:	f7ff f9f6 	bl	8000bf8 <__aeabi_d2f>
 800180c:	4604      	mov	r4, r0
 800180e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001812:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fe8c 	bl	8000534 <__aeabi_i2d>
 800181c:	a30a      	add	r3, pc, #40	; (adr r3, 8001848 <app_main+0x6b8>)
 800181e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001822:	f7fe fef1 	bl	8000608 <__aeabi_dmul>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	e013      	b.n	800185c <app_main+0x6cc>
 8001834:	f3af 8000 	nop.w
 8001838:	ccd9456c 	.word	0xccd9456c
 800183c:	3fc85b95 	.word	0x3fc85b95
 8001840:	00000000 	.word	0x00000000
 8001844:	40e5a540 	.word	0x40e5a540
 8001848:	c083126f 	.word	0xc083126f
 800184c:	400921ca 	.word	0x400921ca
 8001850:	afafaf01 	.word	0xafafaf01
 8001854:	3ff00000 	.word	0x3ff00000
 8001858:	40668000 	.word	0x40668000
 800185c:	4bec      	ldr	r3, [pc, #944]	; (8001c10 <app_main+0xa80>)
 800185e:	f7fe fffd 	bl	800085c <__aeabi_ddiv>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4610      	mov	r0, r2
 8001868:	4619      	mov	r1, r3
 800186a:	f7ff f9c5 	bl	8000bf8 <__aeabi_d2f>
 800186e:	4605      	mov	r5, r0
 8001870:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001874:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fe5b 	bl	8000534 <__aeabi_i2d>
 800187e:	a3e0      	add	r3, pc, #896	; (adr r3, 8001c00 <app_main+0xa70>)
 8001880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001884:	f7fe fec0 	bl	8000608 <__aeabi_dmul>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	4bde      	ldr	r3, [pc, #888]	; (8001c10 <app_main+0xa80>)
 8001896:	f7fe ffe1 	bl	800085c <__aeabi_ddiv>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4610      	mov	r0, r2
 80018a0:	4619      	mov	r1, r3
 80018a2:	f7ff f9a9 	bl	8000bf8 <__aeabi_d2f>
 80018a6:	4606      	mov	r6, r0
 80018a8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80018ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fe3f 	bl	8000534 <__aeabi_i2d>
 80018b6:	a3d4      	add	r3, pc, #848	; (adr r3, 8001c08 <app_main+0xa78>)
 80018b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018bc:	f7fe fea4 	bl	8000608 <__aeabi_dmul>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	f7ff f996 	bl	8000bf8 <__aeabi_d2f>
 80018cc:	4680      	mov	r8, r0
 80018ce:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80018d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7fe fe2c 	bl	8000534 <__aeabi_i2d>
 80018dc:	a3ca      	add	r3, pc, #808	; (adr r3, 8001c08 <app_main+0xa78>)
 80018de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e2:	f7fe fe91 	bl	8000608 <__aeabi_dmul>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4610      	mov	r0, r2
 80018ec:	4619      	mov	r1, r3
 80018ee:	f7ff f983 	bl	8000bf8 <__aeabi_d2f>
 80018f2:	4681      	mov	r9, r0
 80018f4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80018f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe fe19 	bl	8000534 <__aeabi_i2d>
 8001902:	a3c1      	add	r3, pc, #772	; (adr r3, 8001c08 <app_main+0xa78>)
 8001904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001908:	f7fe fe7e 	bl	8000608 <__aeabi_dmul>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	f7ff f970 	bl	8000bf8 <__aeabi_d2f>
 8001918:	4602      	mov	r2, r0
 800191a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800191e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001922:	425b      	negs	r3, r3
 8001924:	ee07 3a90 	vmov	s15, r3
 8001928:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800192c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001930:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001934:	425b      	negs	r3, r3
 8001936:	ee07 3a90 	vmov	s15, r3
 800193a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800193e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001942:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001946:	ee07 3a90 	vmov	s15, r3
 800194a:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800194e:	ed97 7a8a 	vldr	s14, [r7, #552]	; 0x228
 8001952:	edd7 7a97 	vldr	s15, [r7, #604]	; 0x25c
 8001956:	ee77 7a67 	vsub.f32	s15, s14, s15
 800195a:	ed9f 5aae 	vldr	s10, [pc, #696]	; 8001c14 <app_main+0xa84>
 800195e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8001962:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001966:	ed9f 5aac 	vldr	s10, [pc, #688]	; 8001c18 <app_main+0xa88>
 800196a:	eef0 4a47 	vmov.f32	s9, s14
 800196e:	eeb0 4a65 	vmov.f32	s8, s11
 8001972:	eef0 3a46 	vmov.f32	s7, s12
 8001976:	eeb0 3a66 	vmov.f32	s6, s13
 800197a:	ee02 2a90 	vmov	s5, r2
 800197e:	ee02 9a10 	vmov	s4, r9
 8001982:	ee01 8a90 	vmov	s3, r8
 8001986:	ee01 6a10 	vmov	s2, r6
 800198a:	ee00 5a90 	vmov	s1, r5
 800198e:	ee00 4a10 	vmov	s0, r4
 8001992:	4618      	mov	r0, r3
 8001994:	f000 fa3e 	bl	8001e14 <MadgwickAHRSupdate>
		seb_time_prev = seb_time;
 8001998:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800199c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
		//MadgwickAHRSupdateIMU(quaternion, gyro_dps[0], gyro_dps[1], gyro_dps[2],  acc_g[0] *9.81, acc_g[1] *9.81, acc_g[2] *9.81, HAL_GetTick() - seb_delta, 0.3);
		time_for_madgwik = (HAL_GetTick() )/1000.0;
 80019a0:	f004 fade 	bl	8005f60 <HAL_GetTick>
 80019a4:	4603      	mov	r3, r0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fdb4 	bl	8000514 <__aeabi_ui2d>
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	4b9a      	ldr	r3, [pc, #616]	; (8001c1c <app_main+0xa8c>)
 80019b2:	f7fe ff53 	bl	800085c <__aeabi_ddiv>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4610      	mov	r0, r2
 80019bc:	4619      	mov	r1, r3
 80019be:	f7ff f91b 	bl	8000bf8 <__aeabi_d2f>
 80019c2:	4603      	mov	r3, r0
 80019c4:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218

		time_prnt = HAL_GetTick() - time_prnt;
		printf("принт:  %ld\n", time_prnt);
		seb_delta = HAL_GetTick();*/

		nrf24_mode_tx(&nrf24_api_config);
 80019c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019cc:	4618      	mov	r0, r3
 80019ce:	f00e fa04 	bl	800fdda <nrf24_mode_tx>
	    //nrf24_mode_tx(&nrf24_api_config);


        if(NRF_FLAG)
        {
        	nrf24_fifo_status(&nrf24_api_config, &rx_status, &tx_status);
 80019d2:	f107 0236 	add.w	r2, r7, #54	; 0x36
 80019d6:	f107 0137 	add.w	r1, r7, #55	; 0x37
 80019da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019de:	4618      	mov	r0, r3
 80019e0:	f00e fa1d 	bl	800fe1e <nrf24_fifo_status>
			nrf24_fifo_flush_tx(&nrf24_api_config);
 80019e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019e8:	4618      	mov	r0, r3
 80019ea:	f00e fa9b 	bl	800ff24 <nrf24_fifo_flush_tx>
			errrrrrrrrr = nrf24_irq_clear(&nrf24_api_config, IRQ_flags);
 80019ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019f8:	4611      	mov	r1, r2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f00e fac3 	bl	800ff86 <nrf24_irq_clear>
 8001a00:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208
			nrf24_irq_get(&nrf24_api_config, &IRQ_flags);
 8001a04:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001a08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f00e faa0 	bl	800ff54 <nrf24_irq_get>
			nrf24_fifo_status(&nrf24_api_config, &rx_status, &tx_status);
 8001a14:	f107 0236 	add.w	r2, r7, #54	; 0x36
 8001a18:	f107 0137 	add.w	r1, r7, #55	; 0x37
 8001a1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a20:	4618      	mov	r0, r3
 8001a22:	f00e f9fc 	bl	800fe1e <nrf24_fifo_status>
			nrf24_irq_get(&nrf24_api_config, &IRQ_flags);
 8001a26:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001a2a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a2e:	4611      	mov	r1, r2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f00e fa8f 	bl	800ff54 <nrf24_irq_get>


			size_in_tx = nrf24_fifo_write(&nrf24_api_config, (uint8_t *)&packet_ma_type_11, 32, false);// sizeof(packet_ma_type_1)
 8001a36:	f507 71f0 	add.w	r1, r7, #480	; 0x1e0
 8001a3a:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 8001a3e:	2300      	movs	r3, #0
 8001a40:	2220      	movs	r2, #32
 8001a42:	f00e fa49 	bl	800fed8 <nrf24_fifo_write>
 8001a46:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
			HAL_Delay(50);
 8001a4a:	2032      	movs	r0, #50	; 0x32
 8001a4c:	f004 fa94 	bl	8005f78 <HAL_Delay>
			size_in_tx = nrf24_fifo_write(&nrf24_api_config, (uint8_t *)&packet_ma_type_12, 32, false);
 8001a50:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
 8001a54:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 8001a58:	2300      	movs	r3, #0
 8001a5a:	2220      	movs	r2, #32
 8001a5c:	f00e fa3c 	bl	800fed8 <nrf24_fifo_write>
 8001a60:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
			HAL_Delay(50);
 8001a64:	2032      	movs	r0, #50	; 0x32
 8001a66:	f004 fa87 	bl	8005f78 <HAL_Delay>
			size_in_tx = nrf24_fifo_write(&nrf24_api_config, (uint8_t *)&packet_ma_type_2, 32, false);
 8001a6a:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 8001a6e:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 8001a72:	2300      	movs	r3, #0
 8001a74:	2220      	movs	r2, #32
 8001a76:	f00e fa2f 	bl	800fed8 <nrf24_fifo_write>
 8001a7a:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
			HAL_Delay(50);
 8001a7e:	2032      	movs	r0, #50	; 0x32
 8001a80:	f004 fa7a 	bl	8005f78 <HAL_Delay>
			nrf24_read_register(&nrf24_api_config, NRF24_REGADDR_STATUS, &data_nrf_tx_ds, sizeof(data_nrf_tx_ds));
 8001a84:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 8001a88:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	2107      	movs	r1, #7
 8001a90:	f00d fdcb 	bl	800f62a <nrf24_read_register>

			nrf24_fifo_status(&nrf24_api_config, &rx_status, &tx_status);
 8001a94:	f107 0236 	add.w	r2, r7, #54	; 0x36
 8001a98:	f107 0137 	add.w	r1, r7, #55	; 0x37
 8001a9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f00e f9bc 	bl	800fe1e <nrf24_fifo_status>
			printf("                   ");
 8001aa6:	485e      	ldr	r0, [pc, #376]	; (8001c20 <app_main+0xa90>)
 8001aa8:	f00f faca 	bl	8011040 <iprintf>
			//nrf24_mode_tx(&nrf24_api_config);
			HAL_Delay(100);
 8001aac:	2064      	movs	r0, #100	; 0x64
 8001aae:	f004 fa63 	bl	8005f78 <HAL_Delay>
			//nrf24_mode_standby(&nrf24_api_config);


			//nrf24_dump_registers(&nrf24_api_config);

			nrf24_fifo_status(&nrf24_api_config, &rx_status, &tx_status);
 8001ab2:	f107 0236 	add.w	r2, r7, #54	; 0x36
 8001ab6:	f107 0137 	add.w	r1, r7, #55	; 0x37
 8001aba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f00e f9ad 	bl	800fe1e <nrf24_fifo_status>
			nrf24_irq_get(&nrf24_api_config, &IRQ_flags);
 8001ac4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001ac8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001acc:	4611      	mov	r1, r2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f00e fa40 	bl	800ff54 <nrf24_irq_get>


						if (rx_status != NRF24_FIFO_EMPTY)
 8001ad4:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d02e      	beq.n	8001b3c <app_main+0x9ac>
						{
							radio_read_err = nrf24_fifo_read(&nrf24_api_config, rx_buffer, 32);
 8001ade:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001ae2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f00e f9d8 	bl	800fe9e <nrf24_fifo_read>
 8001aee:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
							//HAL_GPIO_WritePin(GPIOC , GPIO_PIN_13, GPIO_PIN_RESET);
							nrf24_fifo_flush_rx(&nrf24_api_config);
 8001af2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001af6:	4618      	mov	r0, r3
 8001af8:	f00e fa20 	bl	800ff3c <nrf24_fifo_flush_rx>
						   if(rx_status == NRF24_FIFO_FULL)
 8001afc:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d11a      	bne.n	8001b3c <app_main+0x9ac>
							{
								nrf24_fifo_flush_rx(&nrf24_api_config);
 8001b06:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f00e fa16 	bl	800ff3c <nrf24_fifo_flush_rx>
								nrf24_fifo_status(&nrf24_api_config, &rx_status, &tx_status);
 8001b10:	f107 0236 	add.w	r2, r7, #54	; 0x36
 8001b14:	f107 0137 	add.w	r1, r7, #55	; 0x37
 8001b18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f00e f97e 	bl	800fe1e <nrf24_fifo_status>
								for(int i = 0; i < 5; i++)
 8001b22:	2300      	movs	r3, #0
 8001b24:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8001b28:	e004      	b.n	8001b34 <app_main+0x9a4>
 8001b2a:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001b2e:	3301      	adds	r3, #1
 8001b30:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8001b34:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001b38:	2b04      	cmp	r3, #4
 8001b3a:	ddf6      	ble.n	8001b2a <app_main+0x99a>
								}

							}
						}

						if (tx_status == NRF24_FIFO_EMPTY)
 8001b3c:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d11f      	bne.n	8001b86 <app_main+0x9f6>
						{
							nrf24_fifo_flush_tx(&nrf24_api_config);
 8001b46:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f00e f9ea 	bl	800ff24 <nrf24_fifo_flush_tx>
							nrf24_fifo_status(&nrf24_api_config, &rx_status, &tx_status);
 8001b50:	f107 0236 	add.w	r2, r7, #54	; 0x36
 8001b54:	f107 0137 	add.w	r1, r7, #55	; 0x37
 8001b58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f00e f95e 	bl	800fe1e <nrf24_fifo_status>
							//errrrrrrrrr = nrf24_fifo_write_ack_pld(&nrf24_api_config, 0, (uint8_t *)&packet_ma_type_11, sizeof(packet_ma_type_11));
							radio_flag = !radio_flag;//изменения от плт
 8001b62:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	bf14      	ite	ne
 8001b6a:	2301      	movne	r3, #1
 8001b6c:	2300      	moveq	r3, #0
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	f083 0301 	eor.w	r3, r3, #1
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
 8001b7a:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
						}

						//опускаем флаги
						nrf24_irq_get(&nrf24_api_config, &IRQ_flags);
 8001b86:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001b8a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b8e:	4611      	mov	r1, r2
 8001b90:	4618      	mov	r0, r3
 8001b92:	f00e f9df 	bl	800ff54 <nrf24_irq_get>
						irq_err = nrf24_irq_clear(&nrf24_api_config, NRF24_IRQ_RX_DR | NRF24_IRQ_TX_DR | NRF24_IRQ_MAX_RT);
 8001b96:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b9a:	2107      	movs	r1, #7
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f00e f9f2 	bl	800ff86 <nrf24_irq_clear>
 8001ba2:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
          }
        switch(fckng_state)
 8001ba6:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8001baa:	2b05      	cmp	r3, #5
 8001bac:	f63f acf4 	bhi.w	8001598 <app_main+0x408>
 8001bb0:	a201      	add	r2, pc, #4	; (adr r2, 8001bb8 <app_main+0xa28>)
 8001bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb6:	bf00      	nop
 8001bb8:	08001bd1 	.word	0x08001bd1
 8001bbc:	08001c87 	.word	0x08001c87
 8001bc0:	08001ced 	.word	0x08001ced
 8001bc4:	08001d0f 	.word	0x08001d0f
 8001bc8:	08001d3f 	.word	0x08001d3f
 8001bcc:	08001d9d 	.word	0x08001d9d
        {
        case STATE_ON_GND:
        	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == true)
 8001bd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bd4:	4813      	ldr	r0, [pc, #76]	; (8001c24 <app_main+0xa94>)
 8001bd6:	f005 f95f 	bl	8006e98 <HAL_GPIO_ReadPin>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d14d      	bne.n	8001c7c <app_main+0xaec>
        	{
        		if(HAL_GetTick() >= start_time_io + 50)
 8001be0:	f004 f9be 	bl	8005f60 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8001bea:	3332      	adds	r3, #50	; 0x32
 8001bec:	429a      	cmp	r2, r3
 8001bee:	f0c0 80d8 	bcc.w	8001da2 <app_main+0xc12>
				{
					for(int i = 0; i < 10; i++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8001bf8:	e029      	b.n	8001c4e <app_main+0xabe>
 8001bfa:	bf00      	nop
 8001bfc:	f3af 8000 	nop.w
 8001c00:	c083126f 	.word	0xc083126f
 8001c04:	400921ca 	.word	0x400921ca
 8001c08:	51eb851f 	.word	0x51eb851f
 8001c0c:	40239eb8 	.word	0x40239eb8
 8001c10:	40668000 	.word	0x40668000
 8001c14:	447a0000 	.word	0x447a0000
 8001c18:	3e99999a 	.word	0x3e99999a
 8001c1c:	408f4000 	.word	0x408f4000
 8001c20:	0801601c 	.word	0x0801601c
 8001c24:	40020800 	.word	0x40020800
					{
						lux_sun+=photorezistor_get_lux(photorezist);
 8001c28:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001c2c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c30:	f00d fc2a 	bl	800f488 <photorezistor_get_lux>
 8001c34:	eeb0 7a40 	vmov.f32	s14, s0
 8001c38:	edd7 7a99 	vldr	s15, [r7, #612]	; 0x264
 8001c3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c40:	edc7 7a99 	vstr	s15, [r7, #612]	; 0x264
					for(int i = 0; i < 10; i++)
 8001c44:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001c48:	3301      	adds	r3, #1
 8001c4a:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8001c4e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001c52:	2b09      	cmp	r3, #9
 8001c54:	dde8      	ble.n	8001c28 <app_main+0xa98>
					}
					lux_sun = lux_sun/10;
 8001c56:	ed97 7a99 	vldr	s14, [r7, #612]	; 0x264
 8001c5a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001c5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c62:	edc7 7a99 	vstr	s15, [r7, #612]	; 0x264
					fckng_state = STATE_IN_ROCKET;
 8001c66:	2301      	movs	r3, #1
 8001c68:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
					packet_ma_type_11.state = 1;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
					start_time_io = HAL_GetTick();
 8001c72:	f004 f975 	bl	8005f60 <HAL_GetTick>
 8001c76:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
        	else
        	{
        		start_time_io = HAL_GetTick();
        	}

        	break;
 8001c7a:	e092      	b.n	8001da2 <app_main+0xc12>
        		start_time_io = HAL_GetTick();
 8001c7c:	f004 f970 	bl	8005f60 <HAL_GetTick>
 8001c80:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
        	break;
 8001c84:	e08d      	b.n	8001da2 <app_main+0xc12>

        case STATE_IN_ROCKET:
        	if((lux_sun - lux)*KOF < photorezistor_get_lux(photorezist))
 8001c86:	ed97 7a99 	vldr	s14, [r7, #612]	; 0x264
 8001c8a:	edd7 7a84 	vldr	s15, [r7, #528]	; 0x210
 8001c8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c92:	ee17 0a90 	vmov	r0, s15
 8001c96:	f7fe fc5f 	bl	8000558 <__aeabi_f2d>
 8001c9a:	a347      	add	r3, pc, #284	; (adr r3, 8001db8 <app_main+0xc28>)
 8001c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca0:	f7fe fcb2 	bl	8000608 <__aeabi_dmul>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4614      	mov	r4, r2
 8001caa:	461d      	mov	r5, r3
 8001cac:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001cb0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001cb4:	f00d fbe8 	bl	800f488 <photorezistor_get_lux>
 8001cb8:	ee10 3a10 	vmov	r3, s0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fc4b 	bl	8000558 <__aeabi_f2d>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	4629      	mov	r1, r5
 8001cca:	f7fe ff0f 	bl	8000aec <__aeabi_dcmplt>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d100      	bne.n	8001cd6 <app_main+0xb46>
			{
        		fckng_state = STATE_FALL_OF_THE_STONE;
	        	start_time_io = HAL_GetTick();
				packet_ma_type_11.state = 2;
			}
        	break;
 8001cd4:	e069      	b.n	8001daa <app_main+0xc1a>
        		fckng_state = STATE_FALL_OF_THE_STONE;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
	        	start_time_io = HAL_GetTick();
 8001cdc:	f004 f940 	bl	8005f60 <HAL_GetTick>
 8001ce0:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
				packet_ma_type_11.state = 2;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
        	break;
 8001cea:	e05e      	b.n	8001daa <app_main+0xc1a>

        case STATE_FALL_OF_THE_STONE:
        	if(HAL_GetTick() - start_time_io >= TIME_STONE)
 8001cec:	f004 f938 	bl	8005f60 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	f241 3287 	movw	r2, #4999	; 0x1387
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d953      	bls.n	8001da8 <app_main+0xc18>
        	{
        		fckng_state = STATE_FALL_IS_NOT_A_STONE;
 8001d00:	2303      	movs	r3, #3
 8001d02:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
        		packet_ma_type_11.state = 3;
 8001d06:	2303      	movs	r3, #3
 8001d08:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
        	}
        break;
 8001d0c:	e04c      	b.n	8001da8 <app_main+0xc18>

        case STATE_FALL_IS_NOT_A_STONE:
        	//функция для открфтия лепестков
        	if(packet_ma_type_11.height_bme <= 350)
 8001d0e:	f8d7 01f3 	ldr.w	r0, [r7, #499]	; 0x1f3
 8001d12:	f8d7 11f7 	ldr.w	r1, [r7, #503]	; 0x1f7
 8001d16:	a32a      	add	r3, pc, #168	; (adr r3, 8001dc0 <app_main+0xc30>)
 8001d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1c:	f7fe fef0 	bl	8000b00 <__aeabi_dcmple>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d100      	bne.n	8001d28 <app_main+0xb98>
        	{
        		fckng_state = STATE_FALL_ON_PARACHUTE;
        		packet_ma_type_11.state = 4;
        		start_time_to = HAL_GetTick();
        	}
            break;
 8001d26:	e040      	b.n	8001daa <app_main+0xc1a>
        		fckng_state = STATE_FALL_ON_PARACHUTE;
 8001d28:	2304      	movs	r3, #4
 8001d2a:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
        		packet_ma_type_11.state = 4;
 8001d2e:	2304      	movs	r3, #4
 8001d30:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
        		start_time_to = HAL_GetTick();
 8001d34:	f004 f914 	bl	8005f60 <HAL_GetTick>
 8001d38:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
            break;
 8001d3c:	e035      	b.n	8001daa <app_main+0xc1a>

        case STATE_FALL_ON_PARACHUTE:
        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);//откр парашюь
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d44:	481a      	ldr	r0, [pc, #104]	; (8001db0 <app_main+0xc20>)
 8001d46:	f005 f8bf 	bl	8006ec8 <HAL_GPIO_WritePin>
        	time_parashute = HAL_GetTick();
 8001d4a:	f004 f909 	bl	8005f60 <HAL_GetTick>
 8001d4e:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
        	if(HAL_GetTick() - start_time_io >= TIME_LIDAR)
 8001d52:	f004 f905 	bl	8005f60 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001d62:	d21b      	bcs.n	8001d9c <app_main+0xc0c>
        	{
        		//ФУНКЦИЯ ЛИДАРА
        	}
        	else if(packet_ma_type_11.height_bme < 10 && (HAL_GetTick() - time_parashute >= TIME_PARASHUTE))
 8001d64:	f8d7 01f3 	ldr.w	r0, [r7, #499]	; 0x1f3
 8001d68:	f8d7 11f7 	ldr.w	r1, [r7, #503]	; 0x1f7
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <app_main+0xc24>)
 8001d72:	f7fe febb 	bl	8000aec <__aeabi_dcmplt>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00f      	beq.n	8001d9c <app_main+0xc0c>
 8001d7c:	f004 f8f0 	bl	8005f60 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001d8c:	d306      	bcc.n	8001d9c <app_main+0xc0c>
        	{
        		fckng_state = STATE_FOUND_ME_PLS;
 8001d8e:	2305      	movs	r3, #5
 8001d90:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
        		packet_ma_type_11.state = 5;
 8001d94:	2305      	movs	r3, #5
 8001d96:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
        		break;
 8001d9a:	e006      	b.n	8001daa <app_main+0xc1a>
        	}
        case STATE_FOUND_ME_PLS:
        	//вкл сис поиска
        	if(HAL_GetTick() - start_time_io >= TIME_LIDAR)
 8001d9c:	f004 f8e0 	bl	8005f60 <HAL_GetTick>
			{
				//ФУНКЦИЯ ЛИДАРА
			}
    		break;
 8001da0:	e003      	b.n	8001daa <app_main+0xc1a>
        	break;
 8001da2:	bf00      	nop
 8001da4:	f7ff bbf8 	b.w	8001598 <app_main+0x408>
        break;
 8001da8:	bf00      	nop
 		packet_ma_type_11.flag = 0xFF;
 8001daa:	f7ff bbf5 	b.w	8001598 <app_main+0x408>
 8001dae:	bf00      	nop
 8001db0:	40020800 	.word	0x40020800
 8001db4:	40240000 	.word	0x40240000
 8001db8:	9999999a 	.word	0x9999999a
 8001dbc:	3fe99999 	.word	0x3fe99999
 8001dc0:	00000000 	.word	0x00000000
 8001dc4:	4075e000 	.word	0x4075e000

08001dc8 <invSqrt>:
//#define sampleFreq	512.0f		// sample frequency in Hz
//#define betaDef		0.1f		// 2 * proportional gain

volatile float q0 = 1.0f, q1 = 0.0f, q2 = 0.0f, q3 = 0.0f;

static float invSqrt(float x) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	ed87 0a01 	vstr	s0, [r7, #4]
	i = 0x5f3759df - (i>>1);
	y = *(float*)&i;
	y = y * (1.5f - (halfx * y * y));
	return y;*/

	return 1/sqrt(x);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7fe fbc0 	bl	8000558 <__aeabi_f2d>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	ec43 2b10 	vmov	d0, r2, r3
 8001de0:	f012 fe9c 	bl	8014b1c <sqrt>
 8001de4:	ec53 2b10 	vmov	r2, r3, d0
 8001de8:	f04f 0000 	mov.w	r0, #0
 8001dec:	4908      	ldr	r1, [pc, #32]	; (8001e10 <invSqrt+0x48>)
 8001dee:	f7fe fd35 	bl	800085c <__aeabi_ddiv>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4610      	mov	r0, r2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f7fe fefd 	bl	8000bf8 <__aeabi_d2f>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	ee07 3a90 	vmov	s15, r3
}
 8001e04:	eeb0 0a67 	vmov.f32	s0, s15
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	3ff00000 	.word	0x3ff00000

08001e14 <MadgwickAHRSupdate>:

void MadgwickAHRSupdate(float* quaternion, float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz, float dt, float beta) {
 8001e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e18:	b0b6      	sub	sp, #216	; 0xd8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001e1e:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
 8001e22:	edc7 0a0d 	vstr	s1, [r7, #52]	; 0x34
 8001e26:	ed87 1a0c 	vstr	s2, [r7, #48]	; 0x30
 8001e2a:	edc7 1a0b 	vstr	s3, [r7, #44]	; 0x2c
 8001e2e:	ed87 2a0a 	vstr	s4, [r7, #40]	; 0x28
 8001e32:	edc7 2a09 	vstr	s5, [r7, #36]	; 0x24
 8001e36:	ed87 3a08 	vstr	s6, [r7, #32]
 8001e3a:	edc7 3a07 	vstr	s7, [r7, #28]
 8001e3e:	ed87 4a06 	vstr	s8, [r7, #24]
 8001e42:	edc7 4a05 	vstr	s9, [r7, #20]
 8001e46:	ed87 5a04 	vstr	s10, [r7, #16]
#	pragma GCC diagnostic ignored "-Wunused-but-set-variable"
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;
#	pragma GCC diagnostic pop

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8001e4a:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e4e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e56:	d122      	bne.n	8001e9e <MadgwickAHRSupdate+0x8a>
 8001e58:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e5c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e64:	d11b      	bne.n	8001e9e <MadgwickAHRSupdate+0x8a>
 8001e66:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e6a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e72:	d114      	bne.n	8001e9e <MadgwickAHRSupdate+0x8a>
		MadgwickAHRSupdateIMU(quaternion, gx, gy, gz, ax, ay, az, dt, beta);
 8001e74:	edd7 3a04 	vldr	s7, [r7, #16]
 8001e78:	ed97 3a05 	vldr	s6, [r7, #20]
 8001e7c:	edd7 2a09 	vldr	s5, [r7, #36]	; 0x24
 8001e80:	ed97 2a0a 	vldr	s4, [r7, #40]	; 0x28
 8001e84:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 8001e88:	ed97 1a0c 	vldr	s2, [r7, #48]	; 0x30
 8001e8c:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 8001e90:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8001e94:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001e96:	f001 f99d 	bl	80031d4 <MadgwickAHRSupdateIMU>
		return;
 8001e9a:	f001 b98c 	b.w	80031b6 <MadgwickAHRSupdate+0x13a2>
	}

	float sampleFreq = 1 / dt;
 8001e9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ea2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ea6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eaa:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8001eae:	4be6      	ldr	r3, [pc, #920]	; (8002248 <MadgwickAHRSupdate+0x434>)
 8001eb0:	edd3 7a00 	vldr	s15, [r3]
 8001eb4:	eeb1 7a67 	vneg.f32	s14, s15
 8001eb8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001ebc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ec0:	4be2      	ldr	r3, [pc, #904]	; (800224c <MadgwickAHRSupdate+0x438>)
 8001ec2:	edd3 6a00 	vldr	s13, [r3]
 8001ec6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001eca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ece:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ed2:	4bdf      	ldr	r3, [pc, #892]	; (8002250 <MadgwickAHRSupdate+0x43c>)
 8001ed4:	edd3 6a00 	vldr	s13, [r3]
 8001ed8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001edc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ee0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ee4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001ee8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eec:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8001ef0:	4bd8      	ldr	r3, [pc, #864]	; (8002254 <MadgwickAHRSupdate+0x440>)
 8001ef2:	ed93 7a00 	vldr	s14, [r3]
 8001ef6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001efa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001efe:	4bd3      	ldr	r3, [pc, #844]	; (800224c <MadgwickAHRSupdate+0x438>)
 8001f00:	edd3 6a00 	vldr	s13, [r3]
 8001f04:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f10:	4bcf      	ldr	r3, [pc, #828]	; (8002250 <MadgwickAHRSupdate+0x43c>)
 8001f12:	edd3 6a00 	vldr	s13, [r3]
 8001f16:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f22:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001f26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f2a:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8001f2e:	4bc9      	ldr	r3, [pc, #804]	; (8002254 <MadgwickAHRSupdate+0x440>)
 8001f30:	ed93 7a00 	vldr	s14, [r3]
 8001f34:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f3c:	4bc2      	ldr	r3, [pc, #776]	; (8002248 <MadgwickAHRSupdate+0x434>)
 8001f3e:	edd3 6a00 	vldr	s13, [r3]
 8001f42:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f4e:	4bc0      	ldr	r3, [pc, #768]	; (8002250 <MadgwickAHRSupdate+0x43c>)
 8001f50:	edd3 6a00 	vldr	s13, [r3]
 8001f54:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001f58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f60:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001f64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f68:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8001f6c:	4bb9      	ldr	r3, [pc, #740]	; (8002254 <MadgwickAHRSupdate+0x440>)
 8001f6e:	ed93 7a00 	vldr	s14, [r3]
 8001f72:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f7a:	4bb3      	ldr	r3, [pc, #716]	; (8002248 <MadgwickAHRSupdate+0x434>)
 8001f7c:	edd3 6a00 	vldr	s13, [r3]
 8001f80:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f8c:	4baf      	ldr	r3, [pc, #700]	; (800224c <MadgwickAHRSupdate+0x438>)
 8001f8e:	edd3 6a00 	vldr	s13, [r3]
 8001f92:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001f96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f9e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fa6:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001faa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001fae:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb6:	d10e      	bne.n	8001fd6 <MadgwickAHRSupdate+0x1c2>
 8001fb8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001fbc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc4:	d107      	bne.n	8001fd6 <MadgwickAHRSupdate+0x1c2>
 8001fc6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001fca:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd2:	f001 8041 	beq.w	8003058 <MadgwickAHRSupdate+0x1244>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001fd6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001fda:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001fde:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001fe2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001fe6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001fee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8001ffa:	f7ff fee5 	bl	8001dc8 <invSqrt>
 8001ffe:	ed87 0a30 	vstr	s0, [r7, #192]	; 0xc0
		ax *= recipNorm;
 8002002:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002006:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800200a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800200e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		ay *= recipNorm;
 8002012:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002016:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800201a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		az *= recipNorm;
 8002022:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002026:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800202a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800202e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8002032:	edd7 7a08 	vldr	s15, [r7, #32]
 8002036:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800203a:	edd7 7a07 	vldr	s15, [r7, #28]
 800203e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002042:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002046:	edd7 7a06 	vldr	s15, [r7, #24]
 800204a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800204e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002052:	eeb0 0a67 	vmov.f32	s0, s15
 8002056:	f7ff feb7 	bl	8001dc8 <invSqrt>
 800205a:	ed87 0a30 	vstr	s0, [r7, #192]	; 0xc0
		mx *= recipNorm;
 800205e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002062:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800206a:	edc7 7a08 	vstr	s15, [r7, #32]
		my *= recipNorm;
 800206e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002072:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800207a:	edc7 7a07 	vstr	s15, [r7, #28]
		mz *= recipNorm;
 800207e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002082:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800208a:	edc7 7a06 	vstr	s15, [r7, #24]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 800208e:	4b71      	ldr	r3, [pc, #452]	; (8002254 <MadgwickAHRSupdate+0x440>)
 8002090:	edd3 7a00 	vldr	s15, [r3]
 8002094:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002098:	ed97 7a08 	vldr	s14, [r7, #32]
 800209c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a0:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
		_2q0my = 2.0f * q0 * my;
 80020a4:	4b6b      	ldr	r3, [pc, #428]	; (8002254 <MadgwickAHRSupdate+0x440>)
 80020a6:	edd3 7a00 	vldr	s15, [r3]
 80020aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020ae:	ed97 7a07 	vldr	s14, [r7, #28]
 80020b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020b6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
		_2q0mz = 2.0f * q0 * mz;
 80020ba:	4b66      	ldr	r3, [pc, #408]	; (8002254 <MadgwickAHRSupdate+0x440>)
 80020bc:	edd3 7a00 	vldr	s15, [r3]
 80020c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020c4:	ed97 7a06 	vldr	s14, [r7, #24]
 80020c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020cc:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		_2q1mx = 2.0f * q1 * mx;
 80020d0:	4b5d      	ldr	r3, [pc, #372]	; (8002248 <MadgwickAHRSupdate+0x434>)
 80020d2:	edd3 7a00 	vldr	s15, [r3]
 80020d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020da:	ed97 7a08 	vldr	s14, [r7, #32]
 80020de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		_2q0 = 2.0f * q0;
 80020e6:	4b5b      	ldr	r3, [pc, #364]	; (8002254 <MadgwickAHRSupdate+0x440>)
 80020e8:	edd3 7a00 	vldr	s15, [r3]
 80020ec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020f0:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		_2q1 = 2.0f * q1;
 80020f4:	4b54      	ldr	r3, [pc, #336]	; (8002248 <MadgwickAHRSupdate+0x434>)
 80020f6:	edd3 7a00 	vldr	s15, [r3]
 80020fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020fe:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
		_2q2 = 2.0f * q2;
 8002102:	4b52      	ldr	r3, [pc, #328]	; (800224c <MadgwickAHRSupdate+0x438>)
 8002104:	edd3 7a00 	vldr	s15, [r3]
 8002108:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800210c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
		_2q3 = 2.0f * q3;
 8002110:	4b4f      	ldr	r3, [pc, #316]	; (8002250 <MadgwickAHRSupdate+0x43c>)
 8002112:	edd3 7a00 	vldr	s15, [r3]
 8002116:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800211a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		_2q0q2 = 2.0f * q0 * q2;
 800211e:	4b4d      	ldr	r3, [pc, #308]	; (8002254 <MadgwickAHRSupdate+0x440>)
 8002120:	edd3 7a00 	vldr	s15, [r3]
 8002124:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002128:	4b48      	ldr	r3, [pc, #288]	; (800224c <MadgwickAHRSupdate+0x438>)
 800212a:	edd3 7a00 	vldr	s15, [r3]
 800212e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002132:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		_2q2q3 = 2.0f * q2 * q3;
 8002136:	4b45      	ldr	r3, [pc, #276]	; (800224c <MadgwickAHRSupdate+0x438>)
 8002138:	edd3 7a00 	vldr	s15, [r3]
 800213c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002140:	4b43      	ldr	r3, [pc, #268]	; (8002250 <MadgwickAHRSupdate+0x43c>)
 8002142:	edd3 7a00 	vldr	s15, [r3]
 8002146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800214a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		q0q0 = q0 * q0;
 800214e:	4b41      	ldr	r3, [pc, #260]	; (8002254 <MadgwickAHRSupdate+0x440>)
 8002150:	ed93 7a00 	vldr	s14, [r3]
 8002154:	4b3f      	ldr	r3, [pc, #252]	; (8002254 <MadgwickAHRSupdate+0x440>)
 8002156:	edd3 7a00 	vldr	s15, [r3]
 800215a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800215e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		q0q1 = q0 * q1;
 8002162:	4b3c      	ldr	r3, [pc, #240]	; (8002254 <MadgwickAHRSupdate+0x440>)
 8002164:	ed93 7a00 	vldr	s14, [r3]
 8002168:	4b37      	ldr	r3, [pc, #220]	; (8002248 <MadgwickAHRSupdate+0x434>)
 800216a:	edd3 7a00 	vldr	s15, [r3]
 800216e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002172:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		q0q2 = q0 * q2;
 8002176:	4b37      	ldr	r3, [pc, #220]	; (8002254 <MadgwickAHRSupdate+0x440>)
 8002178:	ed93 7a00 	vldr	s14, [r3]
 800217c:	4b33      	ldr	r3, [pc, #204]	; (800224c <MadgwickAHRSupdate+0x438>)
 800217e:	edd3 7a00 	vldr	s15, [r3]
 8002182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002186:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		q0q3 = q0 * q3;
 800218a:	4b32      	ldr	r3, [pc, #200]	; (8002254 <MadgwickAHRSupdate+0x440>)
 800218c:	ed93 7a00 	vldr	s14, [r3]
 8002190:	4b2f      	ldr	r3, [pc, #188]	; (8002250 <MadgwickAHRSupdate+0x43c>)
 8002192:	edd3 7a00 	vldr	s15, [r3]
 8002196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800219a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		q1q1 = q1 * q1;
 800219e:	4b2a      	ldr	r3, [pc, #168]	; (8002248 <MadgwickAHRSupdate+0x434>)
 80021a0:	ed93 7a00 	vldr	s14, [r3]
 80021a4:	4b28      	ldr	r3, [pc, #160]	; (8002248 <MadgwickAHRSupdate+0x434>)
 80021a6:	edd3 7a00 	vldr	s15, [r3]
 80021aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ae:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		q1q2 = q1 * q2;
 80021b2:	4b25      	ldr	r3, [pc, #148]	; (8002248 <MadgwickAHRSupdate+0x434>)
 80021b4:	ed93 7a00 	vldr	s14, [r3]
 80021b8:	4b24      	ldr	r3, [pc, #144]	; (800224c <MadgwickAHRSupdate+0x438>)
 80021ba:	edd3 7a00 	vldr	s15, [r3]
 80021be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		q1q3 = q1 * q3;
 80021c6:	4b20      	ldr	r3, [pc, #128]	; (8002248 <MadgwickAHRSupdate+0x434>)
 80021c8:	ed93 7a00 	vldr	s14, [r3]
 80021cc:	4b20      	ldr	r3, [pc, #128]	; (8002250 <MadgwickAHRSupdate+0x43c>)
 80021ce:	edd3 7a00 	vldr	s15, [r3]
 80021d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021d6:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q2q2 = q2 * q2;
 80021da:	4b1c      	ldr	r3, [pc, #112]	; (800224c <MadgwickAHRSupdate+0x438>)
 80021dc:	ed93 7a00 	vldr	s14, [r3]
 80021e0:	4b1a      	ldr	r3, [pc, #104]	; (800224c <MadgwickAHRSupdate+0x438>)
 80021e2:	edd3 7a00 	vldr	s15, [r3]
 80021e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ea:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q2q3 = q2 * q3;
 80021ee:	4b17      	ldr	r3, [pc, #92]	; (800224c <MadgwickAHRSupdate+0x438>)
 80021f0:	ed93 7a00 	vldr	s14, [r3]
 80021f4:	4b16      	ldr	r3, [pc, #88]	; (8002250 <MadgwickAHRSupdate+0x43c>)
 80021f6:	edd3 7a00 	vldr	s15, [r3]
 80021fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021fe:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q3q3 = q3 * q3;
 8002202:	4b13      	ldr	r3, [pc, #76]	; (8002250 <MadgwickAHRSupdate+0x43c>)
 8002204:	ed93 7a00 	vldr	s14, [r3]
 8002208:	4b11      	ldr	r3, [pc, #68]	; (8002250 <MadgwickAHRSupdate+0x43c>)
 800220a:	edd3 7a00 	vldr	s15, [r3]
 800220e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002212:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8002216:	ed97 7a08 	vldr	s14, [r7, #32]
 800221a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800221e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002222:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <MadgwickAHRSupdate+0x43c>)
 8002224:	edd3 6a00 	vldr	s13, [r3]
 8002228:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800222c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002230:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002234:	4b05      	ldr	r3, [pc, #20]	; (800224c <MadgwickAHRSupdate+0x438>)
 8002236:	edd3 6a00 	vldr	s13, [r3]
 800223a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800223e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002242:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002246:	e007      	b.n	8002258 <MadgwickAHRSupdate+0x444>
 8002248:	200022c4 	.word	0x200022c4
 800224c:	200022c8 	.word	0x200022c8
 8002250:	200022cc 	.word	0x200022cc
 8002254:	20000000 	.word	0x20000000
 8002258:	edd7 6a08 	vldr	s13, [r7, #32]
 800225c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002260:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002264:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002268:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 800226c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002270:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002274:	4bef      	ldr	r3, [pc, #956]	; (8002634 <MadgwickAHRSupdate+0x820>)
 8002276:	edd3 7a00 	vldr	s15, [r3]
 800227a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800227e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002282:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8002286:	edd7 7a06 	vldr	s15, [r7, #24]
 800228a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800228e:	4bea      	ldr	r3, [pc, #936]	; (8002638 <MadgwickAHRSupdate+0x824>)
 8002290:	edd3 7a00 	vldr	s15, [r3]
 8002294:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002298:	ee37 7a27 	vadd.f32	s14, s14, s15
 800229c:	edd7 6a08 	vldr	s13, [r7, #32]
 80022a0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80022a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022ac:	edd7 6a08 	vldr	s13, [r7, #32]
 80022b0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80022b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022bc:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 80022c0:	4bdd      	ldr	r3, [pc, #884]	; (8002638 <MadgwickAHRSupdate+0x824>)
 80022c2:	ed93 7a00 	vldr	s14, [r3]
 80022c6:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80022ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80022d2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80022d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022de:	4bd7      	ldr	r3, [pc, #860]	; (800263c <MadgwickAHRSupdate+0x828>)
 80022e0:	edd3 6a00 	vldr	s13, [r3]
 80022e4:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80022e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022f0:	4bd0      	ldr	r3, [pc, #832]	; (8002634 <MadgwickAHRSupdate+0x820>)
 80022f2:	edd3 6a00 	vldr	s13, [r3]
 80022f6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80022fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002302:	edd7 6a07 	vldr	s13, [r7, #28]
 8002306:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800230a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800230e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002312:	edd7 6a07 	vldr	s13, [r7, #28]
 8002316:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800231a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800231e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002322:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8002326:	edd7 7a06 	vldr	s15, [r7, #24]
 800232a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800232e:	4bc2      	ldr	r3, [pc, #776]	; (8002638 <MadgwickAHRSupdate+0x824>)
 8002330:	edd3 7a00 	vldr	s15, [r3]
 8002334:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002338:	ee37 7a27 	vadd.f32	s14, s14, s15
 800233c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002340:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002344:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002348:	ee77 7a67 	vsub.f32	s15, s14, s15
 800234c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		_2bx = sqrt(hx * hx + hy * hy);
 8002350:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002354:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002358:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800235c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002360:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002364:	ee17 0a90 	vmov	r0, s15
 8002368:	f7fe f8f6 	bl	8000558 <__aeabi_f2d>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	ec43 2b10 	vmov	d0, r2, r3
 8002374:	f012 fbd2 	bl	8014b1c <sqrt>
 8002378:	ec53 2b10 	vmov	r2, r3, d0
 800237c:	4610      	mov	r0, r2
 800237e:	4619      	mov	r1, r3
 8002380:	f7fe fc3a 	bl	8000bf8 <__aeabi_d2f>
 8002384:	4603      	mov	r3, r0
 8002386:	667b      	str	r3, [r7, #100]	; 0x64
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8002388:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800238c:	eeb1 7a67 	vneg.f32	s14, s15
 8002390:	4ba8      	ldr	r3, [pc, #672]	; (8002634 <MadgwickAHRSupdate+0x820>)
 8002392:	edd3 7a00 	vldr	s15, [r3]
 8002396:	ee27 7a27 	vmul.f32	s14, s14, s15
 800239a:	4ba8      	ldr	r3, [pc, #672]	; (800263c <MadgwickAHRSupdate+0x828>)
 800239c:	edd3 6a00 	vldr	s13, [r3]
 80023a0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80023a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023ac:	edd7 6a06 	vldr	s13, [r7, #24]
 80023b0:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80023b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023bc:	4b9e      	ldr	r3, [pc, #632]	; (8002638 <MadgwickAHRSupdate+0x824>)
 80023be:	edd3 6a00 	vldr	s13, [r3]
 80023c2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80023c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023ce:	edd7 6a06 	vldr	s13, [r7, #24]
 80023d2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80023d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023de:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 80023e2:	edd7 7a07 	vldr	s15, [r7, #28]
 80023e6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023ea:	4b93      	ldr	r3, [pc, #588]	; (8002638 <MadgwickAHRSupdate+0x824>)
 80023ec:	edd3 7a00 	vldr	s15, [r3]
 80023f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023f8:	edd7 6a06 	vldr	s13, [r7, #24]
 80023fc:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002400:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002404:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002408:	edd7 6a06 	vldr	s13, [r7, #24]
 800240c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002410:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002414:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002418:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		_4bx = 2.0f * _2bx;
 800241c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002420:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002424:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		_4bz = 2.0f * _2bz;
 8002428:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800242c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002430:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		float _8bx = 2.0f * _4bx;
 8002434:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002438:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800243c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		float _8bz = 2.0f * _4bz;
 8002440:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002444:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002448:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

		// Gradient decent algorithm corrective step
		s0= -_2q2*(2*(q1q3 - q0q2) - ax)    +   _2q1*(2*(q0q1 + q2q3) - ay)   +  -_4bz*q2*(_4bx*(0.5 - q2q2 - q3q3) + _4bz*(q1q3 - q0q2) - mx)   +   (-_4bx*q3+_4bz*q1)*(_4bx*(q1q2 - q0q3) + _4bz*(q0q1 + q2q3) - my)    +   _4bx*q2*(_4bx*(q0q2 + q1q3) + _4bz*(0.5 - q1q1 - q2q2) - mz);
 800244c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002450:	eeb1 7a67 	vneg.f32	s14, s15
 8002454:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8002458:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800245c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002460:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002464:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002468:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800246c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002470:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8002474:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002478:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800247c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002480:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002484:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002488:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800248c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002490:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002494:	ee17 0a90 	vmov	r0, s15
 8002498:	f7fe f85e 	bl	8000558 <__aeabi_f2d>
 800249c:	4604      	mov	r4, r0
 800249e:	460d      	mov	r5, r1
 80024a0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80024a4:	eeb1 7a67 	vneg.f32	s14, s15
 80024a8:	4b62      	ldr	r3, [pc, #392]	; (8002634 <MadgwickAHRSupdate+0x820>)
 80024aa:	edd3 7a00 	vldr	s15, [r3]
 80024ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b2:	ee17 0a90 	vmov	r0, s15
 80024b6:	f7fe f84f 	bl	8000558 <__aeabi_f2d>
 80024ba:	4680      	mov	r8, r0
 80024bc:	4689      	mov	r9, r1
 80024be:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80024c0:	f7fe f84a 	bl	8000558 <__aeabi_f2d>
 80024c4:	4682      	mov	sl, r0
 80024c6:	468b      	mov	fp, r1
 80024c8:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80024ca:	f7fe f845 	bl	8000558 <__aeabi_f2d>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	f04f 0000 	mov.w	r0, #0
 80024d6:	495a      	ldr	r1, [pc, #360]	; (8002640 <MadgwickAHRSupdate+0x82c>)
 80024d8:	f7fd fede 	bl	8000298 <__aeabi_dsub>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80024e4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80024e6:	f7fe f837 	bl	8000558 <__aeabi_f2d>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024f2:	f7fd fed1 	bl	8000298 <__aeabi_dsub>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	4650      	mov	r0, sl
 80024fc:	4659      	mov	r1, fp
 80024fe:	f7fe f883 	bl	8000608 <__aeabi_dmul>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	4692      	mov	sl, r2
 8002508:	469b      	mov	fp, r3
 800250a:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800250e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002512:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002516:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800251a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800251e:	ee17 0a90 	vmov	r0, s15
 8002522:	f7fe f819 	bl	8000558 <__aeabi_f2d>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4650      	mov	r0, sl
 800252c:	4659      	mov	r1, fp
 800252e:	f7fd feb5 	bl	800029c <__adddf3>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4692      	mov	sl, r2
 8002538:	469b      	mov	fp, r3
 800253a:	6a38      	ldr	r0, [r7, #32]
 800253c:	f7fe f80c 	bl	8000558 <__aeabi_f2d>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4650      	mov	r0, sl
 8002546:	4659      	mov	r1, fp
 8002548:	f7fd fea6 	bl	8000298 <__aeabi_dsub>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	4640      	mov	r0, r8
 8002552:	4649      	mov	r1, r9
 8002554:	f7fe f858 	bl	8000608 <__aeabi_dmul>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4620      	mov	r0, r4
 800255e:	4629      	mov	r1, r5
 8002560:	f7fd fe9c 	bl	800029c <__adddf3>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	4614      	mov	r4, r2
 800256a:	461d      	mov	r5, r3
 800256c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002570:	eeb1 7a67 	vneg.f32	s14, s15
 8002574:	4b30      	ldr	r3, [pc, #192]	; (8002638 <MadgwickAHRSupdate+0x824>)
 8002576:	edd3 7a00 	vldr	s15, [r3]
 800257a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800257e:	4b2f      	ldr	r3, [pc, #188]	; (800263c <MadgwickAHRSupdate+0x828>)
 8002580:	edd3 6a00 	vldr	s13, [r3]
 8002584:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002588:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800258c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002590:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8002594:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002598:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800259c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80025a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80025a4:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 80025a8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80025ac:	ee36 6a27 	vadd.f32	s12, s12, s15
 80025b0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80025b4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80025b8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80025bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80025c0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80025c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025c8:	ee17 0a90 	vmov	r0, s15
 80025cc:	f7fd ffc4 	bl	8000558 <__aeabi_f2d>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4620      	mov	r0, r4
 80025d6:	4629      	mov	r1, r5
 80025d8:	f7fd fe60 	bl	800029c <__adddf3>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80025e4:	4b13      	ldr	r3, [pc, #76]	; (8002634 <MadgwickAHRSupdate+0x820>)
 80025e6:	ed93 7a00 	vldr	s14, [r3]
 80025ea:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80025ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025f2:	ee17 0a90 	vmov	r0, s15
 80025f6:	f7fd ffaf 	bl	8000558 <__aeabi_f2d>
 80025fa:	4680      	mov	r8, r0
 80025fc:	4689      	mov	r9, r1
 80025fe:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002602:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002606:	ee37 7a27 	vadd.f32	s14, s14, s15
 800260a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800260e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002612:	ee17 0a90 	vmov	r0, s15
 8002616:	f7fd ff9f 	bl	8000558 <__aeabi_f2d>
 800261a:	4682      	mov	sl, r0
 800261c:	468b      	mov	fp, r1
 800261e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002620:	f7fd ff9a 	bl	8000558 <__aeabi_f2d>
 8002624:	e9c7 0100 	strd	r0, r1, [r7]
 8002628:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800262c:	f7fd ff94 	bl	8000558 <__aeabi_f2d>
 8002630:	e008      	b.n	8002644 <MadgwickAHRSupdate+0x830>
 8002632:	bf00      	nop
 8002634:	200022c8 	.word	0x200022c8
 8002638:	200022cc 	.word	0x200022cc
 800263c:	200022c4 	.word	0x200022c4
 8002640:	3fe00000 	.word	0x3fe00000
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	f04f 0000 	mov.w	r0, #0
 800264c:	49e9      	ldr	r1, [pc, #932]	; (80029f4 <MadgwickAHRSupdate+0xbe0>)
 800264e:	f7fd fe23 	bl	8000298 <__aeabi_dsub>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4614      	mov	r4, r2
 8002658:	461d      	mov	r5, r3
 800265a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800265c:	f7fd ff7c 	bl	8000558 <__aeabi_f2d>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	4620      	mov	r0, r4
 8002666:	4629      	mov	r1, r5
 8002668:	f7fd fe16 	bl	8000298 <__aeabi_dsub>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002674:	f7fd ffc8 	bl	8000608 <__aeabi_dmul>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	4650      	mov	r0, sl
 800267e:	4659      	mov	r1, fp
 8002680:	f7fd fe0c 	bl	800029c <__adddf3>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4614      	mov	r4, r2
 800268a:	461d      	mov	r5, r3
 800268c:	69b8      	ldr	r0, [r7, #24]
 800268e:	f7fd ff63 	bl	8000558 <__aeabi_f2d>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4620      	mov	r0, r4
 8002698:	4629      	mov	r1, r5
 800269a:	f7fd fdfd 	bl	8000298 <__aeabi_dsub>
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	4640      	mov	r0, r8
 80026a4:	4649      	mov	r1, r9
 80026a6:	f7fd ffaf 	bl	8000608 <__aeabi_dmul>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026b2:	f7fd fdf3 	bl	800029c <__adddf3>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4610      	mov	r0, r2
 80026bc:	4619      	mov	r1, r3
 80026be:	f7fe fa9b 	bl	8000bf8 <__aeabi_d2f>
 80026c2:	4603      	mov	r3, r0
 80026c4:	64fb      	str	r3, [r7, #76]	; 0x4c
		s1= _2q3*(2*(q1q3 - q0q2) - ax) +   _2q0*(2*(q0q1 + q2q3) - ay) +   -4*q1*(2*(0.5 - q1q1 - q2q2) - az)    +   _4bz*q3*(_4bx*(0.5 - q2q2 - q3q3) + _4bz*(q1q3 - q0q2) - mx)   + (_4bx*q2+_4bz*q0)*(_4bx*(q1q2 - q0q3) + _4bz*(q0q1 + q2q3) - my)   +   (_4bx*q3-_8bz*q1)*(_4bx*(q0q2 + q1q3) + _4bz*(0.5 - q1q1 - q2q2) - mz);
 80026c6:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80026ca:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80026ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026d2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80026d6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80026da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026de:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80026e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026e6:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 80026ea:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80026ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026f2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80026f6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80026fa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80026fe:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002702:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002706:	ee77 7a27 	vadd.f32	s15, s14, s15
 800270a:	ee17 0a90 	vmov	r0, s15
 800270e:	f7fd ff23 	bl	8000558 <__aeabi_f2d>
 8002712:	4604      	mov	r4, r0
 8002714:	460d      	mov	r5, r1
 8002716:	4bb8      	ldr	r3, [pc, #736]	; (80029f8 <MadgwickAHRSupdate+0xbe4>)
 8002718:	edd3 7a00 	vldr	s15, [r3]
 800271c:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 8002720:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002724:	ee17 0a90 	vmov	r0, s15
 8002728:	f7fd ff16 	bl	8000558 <__aeabi_f2d>
 800272c:	4680      	mov	r8, r0
 800272e:	4689      	mov	r9, r1
 8002730:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002734:	f7fd ff10 	bl	8000558 <__aeabi_f2d>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	f04f 0000 	mov.w	r0, #0
 8002740:	49ac      	ldr	r1, [pc, #688]	; (80029f4 <MadgwickAHRSupdate+0xbe0>)
 8002742:	f7fd fda9 	bl	8000298 <__aeabi_dsub>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	4692      	mov	sl, r2
 800274c:	469b      	mov	fp, r3
 800274e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002750:	f7fd ff02 	bl	8000558 <__aeabi_f2d>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4650      	mov	r0, sl
 800275a:	4659      	mov	r1, fp
 800275c:	f7fd fd9c 	bl	8000298 <__aeabi_dsub>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	f7fd fd96 	bl	800029c <__adddf3>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4692      	mov	sl, r2
 8002776:	469b      	mov	fp, r3
 8002778:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800277a:	f7fd feed 	bl	8000558 <__aeabi_f2d>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4650      	mov	r0, sl
 8002784:	4659      	mov	r1, fp
 8002786:	f7fd fd87 	bl	8000298 <__aeabi_dsub>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	4640      	mov	r0, r8
 8002790:	4649      	mov	r1, r9
 8002792:	f7fd ff39 	bl	8000608 <__aeabi_dmul>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	4620      	mov	r0, r4
 800279c:	4629      	mov	r1, r5
 800279e:	f7fd fd7d 	bl	800029c <__adddf3>
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	4692      	mov	sl, r2
 80027a8:	469b      	mov	fp, r3
 80027aa:	4b94      	ldr	r3, [pc, #592]	; (80029fc <MadgwickAHRSupdate+0xbe8>)
 80027ac:	ed93 7a00 	vldr	s14, [r3]
 80027b0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80027b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b8:	ee17 0a90 	vmov	r0, s15
 80027bc:	f7fd fecc 	bl	8000558 <__aeabi_f2d>
 80027c0:	4604      	mov	r4, r0
 80027c2:	460d      	mov	r5, r1
 80027c4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80027c6:	f7fd fec7 	bl	8000558 <__aeabi_f2d>
 80027ca:	4680      	mov	r8, r0
 80027cc:	4689      	mov	r9, r1
 80027ce:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80027d0:	f7fd fec2 	bl	8000558 <__aeabi_f2d>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	f04f 0000 	mov.w	r0, #0
 80027dc:	4985      	ldr	r1, [pc, #532]	; (80029f4 <MadgwickAHRSupdate+0xbe0>)
 80027de:	f7fd fd5b 	bl	8000298 <__aeabi_dsub>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80027ea:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80027ec:	f7fd feb4 	bl	8000558 <__aeabi_f2d>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027f8:	f7fd fd4e 	bl	8000298 <__aeabi_dsub>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4640      	mov	r0, r8
 8002802:	4649      	mov	r1, r9
 8002804:	f7fd ff00 	bl	8000608 <__aeabi_dmul>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4690      	mov	r8, r2
 800280e:	4699      	mov	r9, r3
 8002810:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002814:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002818:	ee37 7a67 	vsub.f32	s14, s14, s15
 800281c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002824:	ee17 0a90 	vmov	r0, s15
 8002828:	f7fd fe96 	bl	8000558 <__aeabi_f2d>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4640      	mov	r0, r8
 8002832:	4649      	mov	r1, r9
 8002834:	f7fd fd32 	bl	800029c <__adddf3>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4690      	mov	r8, r2
 800283e:	4699      	mov	r9, r3
 8002840:	6a38      	ldr	r0, [r7, #32]
 8002842:	f7fd fe89 	bl	8000558 <__aeabi_f2d>
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	4640      	mov	r0, r8
 800284c:	4649      	mov	r1, r9
 800284e:	f7fd fd23 	bl	8000298 <__aeabi_dsub>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	4620      	mov	r0, r4
 8002858:	4629      	mov	r1, r5
 800285a:	f7fd fed5 	bl	8000608 <__aeabi_dmul>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	4650      	mov	r0, sl
 8002864:	4659      	mov	r1, fp
 8002866:	f7fd fd19 	bl	800029c <__adddf3>
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	4614      	mov	r4, r2
 8002870:	461d      	mov	r5, r3
 8002872:	4b63      	ldr	r3, [pc, #396]	; (8002a00 <MadgwickAHRSupdate+0xbec>)
 8002874:	ed93 7a00 	vldr	s14, [r3]
 8002878:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800287c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002880:	4b60      	ldr	r3, [pc, #384]	; (8002a04 <MadgwickAHRSupdate+0xbf0>)
 8002882:	edd3 6a00 	vldr	s13, [r3]
 8002886:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800288a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800288e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002892:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8002896:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800289a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800289e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80028a2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80028a6:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 80028aa:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80028ae:	ee36 6a27 	vadd.f32	s12, s12, s15
 80028b2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80028b6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80028ba:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80028be:	edd7 7a07 	vldr	s15, [r7, #28]
 80028c2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80028c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ca:	ee17 0a90 	vmov	r0, s15
 80028ce:	f7fd fe43 	bl	8000558 <__aeabi_f2d>
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	4620      	mov	r0, r4
 80028d8:	4629      	mov	r1, r5
 80028da:	f7fd fcdf 	bl	800029c <__adddf3>
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80028e6:	4b45      	ldr	r3, [pc, #276]	; (80029fc <MadgwickAHRSupdate+0xbe8>)
 80028e8:	ed93 7a00 	vldr	s14, [r3]
 80028ec:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80028f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028f4:	4b40      	ldr	r3, [pc, #256]	; (80029f8 <MadgwickAHRSupdate+0xbe4>)
 80028f6:	edd3 6a00 	vldr	s13, [r3]
 80028fa:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80028fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002902:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002906:	ee17 0a90 	vmov	r0, s15
 800290a:	f7fd fe25 	bl	8000558 <__aeabi_f2d>
 800290e:	4680      	mov	r8, r0
 8002910:	4689      	mov	r9, r1
 8002912:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002916:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800291a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800291e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002926:	ee17 0a90 	vmov	r0, s15
 800292a:	f7fd fe15 	bl	8000558 <__aeabi_f2d>
 800292e:	4682      	mov	sl, r0
 8002930:	468b      	mov	fp, r1
 8002932:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002934:	f7fd fe10 	bl	8000558 <__aeabi_f2d>
 8002938:	e9c7 0100 	strd	r0, r1, [r7]
 800293c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002940:	f7fd fe0a 	bl	8000558 <__aeabi_f2d>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	f04f 0000 	mov.w	r0, #0
 800294c:	4929      	ldr	r1, [pc, #164]	; (80029f4 <MadgwickAHRSupdate+0xbe0>)
 800294e:	f7fd fca3 	bl	8000298 <__aeabi_dsub>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4614      	mov	r4, r2
 8002958:	461d      	mov	r5, r3
 800295a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800295c:	f7fd fdfc 	bl	8000558 <__aeabi_f2d>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4620      	mov	r0, r4
 8002966:	4629      	mov	r1, r5
 8002968:	f7fd fc96 	bl	8000298 <__aeabi_dsub>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002974:	f7fd fe48 	bl	8000608 <__aeabi_dmul>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4650      	mov	r0, sl
 800297e:	4659      	mov	r1, fp
 8002980:	f7fd fc8c 	bl	800029c <__adddf3>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4614      	mov	r4, r2
 800298a:	461d      	mov	r5, r3
 800298c:	69b8      	ldr	r0, [r7, #24]
 800298e:	f7fd fde3 	bl	8000558 <__aeabi_f2d>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	4620      	mov	r0, r4
 8002998:	4629      	mov	r1, r5
 800299a:	f7fd fc7d 	bl	8000298 <__aeabi_dsub>
 800299e:	4602      	mov	r2, r0
 80029a0:	460b      	mov	r3, r1
 80029a2:	4640      	mov	r0, r8
 80029a4:	4649      	mov	r1, r9
 80029a6:	f7fd fe2f 	bl	8000608 <__aeabi_dmul>
 80029aa:	4602      	mov	r2, r0
 80029ac:	460b      	mov	r3, r1
 80029ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029b2:	f7fd fc73 	bl	800029c <__adddf3>
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	4610      	mov	r0, r2
 80029bc:	4619      	mov	r1, r3
 80029be:	f7fe f91b 	bl	8000bf8 <__aeabi_d2f>
 80029c2:	4603      	mov	r3, r0
 80029c4:	64bb      	str	r3, [r7, #72]	; 0x48
		s2= -_2q0*(2*(q1q3 - q0q2) - ax)    +     _2q3*(2*(q0q1 + q2q3) - ay)   +   (-4*q2)*(2*(0.5 - q1q1 - q2q2) - az) +   (-_8bx*q2-_4bz*q0)*(_4bx*(0.5 - q2q2 - q3q3) + _4bz*(q1q3 - q0q2) - mx)+(_4bx*q1+_4bz*q3)*(_4bx*(q1q2 - q0q3) + _4bz*(q0q1 + q2q3) - my)+(_4bx*q0-_8bz*q2)*(_4bx*(q0q2 + q1q3) + _4bz*(0.5 - q1q1 - q2q2) - mz);
 80029c6:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80029ca:	eeb1 7a67 	vneg.f32	s14, s15
 80029ce:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 80029d2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80029d6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80029da:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80029de:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80029e2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80029e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029ea:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 80029ee:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80029f2:	e009      	b.n	8002a08 <MadgwickAHRSupdate+0xbf4>
 80029f4:	3fe00000 	.word	0x3fe00000
 80029f8:	200022c4 	.word	0x200022c4
 80029fc:	200022cc 	.word	0x200022cc
 8002a00:	200022c8 	.word	0x200022c8
 8002a04:	20000000 	.word	0x20000000
 8002a08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a0c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002a10:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002a14:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002a18:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002a1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a24:	ee17 0a90 	vmov	r0, s15
 8002a28:	f7fd fd96 	bl	8000558 <__aeabi_f2d>
 8002a2c:	4604      	mov	r4, r0
 8002a2e:	460d      	mov	r5, r1
 8002a30:	4be8      	ldr	r3, [pc, #928]	; (8002dd4 <MadgwickAHRSupdate+0xfc0>)
 8002a32:	edd3 7a00 	vldr	s15, [r3]
 8002a36:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 8002a3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a3e:	ee17 0a90 	vmov	r0, s15
 8002a42:	f7fd fd89 	bl	8000558 <__aeabi_f2d>
 8002a46:	4680      	mov	r8, r0
 8002a48:	4689      	mov	r9, r1
 8002a4a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002a4e:	f7fd fd83 	bl	8000558 <__aeabi_f2d>
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	f04f 0000 	mov.w	r0, #0
 8002a5a:	49df      	ldr	r1, [pc, #892]	; (8002dd8 <MadgwickAHRSupdate+0xfc4>)
 8002a5c:	f7fd fc1c 	bl	8000298 <__aeabi_dsub>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4692      	mov	sl, r2
 8002a66:	469b      	mov	fp, r3
 8002a68:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002a6a:	f7fd fd75 	bl	8000558 <__aeabi_f2d>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	4650      	mov	r0, sl
 8002a74:	4659      	mov	r1, fp
 8002a76:	f7fd fc0f 	bl	8000298 <__aeabi_dsub>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	4610      	mov	r0, r2
 8002a80:	4619      	mov	r1, r3
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	f7fd fc09 	bl	800029c <__adddf3>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4692      	mov	sl, r2
 8002a90:	469b      	mov	fp, r3
 8002a92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a94:	f7fd fd60 	bl	8000558 <__aeabi_f2d>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4650      	mov	r0, sl
 8002a9e:	4659      	mov	r1, fp
 8002aa0:	f7fd fbfa 	bl	8000298 <__aeabi_dsub>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4640      	mov	r0, r8
 8002aaa:	4649      	mov	r1, r9
 8002aac:	f7fd fdac 	bl	8000608 <__aeabi_dmul>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4620      	mov	r0, r4
 8002ab6:	4629      	mov	r1, r5
 8002ab8:	f7fd fbf0 	bl	800029c <__adddf3>
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4692      	mov	sl, r2
 8002ac2:	469b      	mov	fp, r3
 8002ac4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002ac8:	eeb1 7a67 	vneg.f32	s14, s15
 8002acc:	4bc1      	ldr	r3, [pc, #772]	; (8002dd4 <MadgwickAHRSupdate+0xfc0>)
 8002ace:	edd3 7a00 	vldr	s15, [r3]
 8002ad2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ad6:	4bc1      	ldr	r3, [pc, #772]	; (8002ddc <MadgwickAHRSupdate+0xfc8>)
 8002ad8:	edd3 6a00 	vldr	s13, [r3]
 8002adc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002ae0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ae4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ae8:	ee17 0a90 	vmov	r0, s15
 8002aec:	f7fd fd34 	bl	8000558 <__aeabi_f2d>
 8002af0:	4604      	mov	r4, r0
 8002af2:	460d      	mov	r5, r1
 8002af4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002af6:	f7fd fd2f 	bl	8000558 <__aeabi_f2d>
 8002afa:	4680      	mov	r8, r0
 8002afc:	4689      	mov	r9, r1
 8002afe:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002b00:	f7fd fd2a 	bl	8000558 <__aeabi_f2d>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	f04f 0000 	mov.w	r0, #0
 8002b0c:	49b2      	ldr	r1, [pc, #712]	; (8002dd8 <MadgwickAHRSupdate+0xfc4>)
 8002b0e:	f7fd fbc3 	bl	8000298 <__aeabi_dsub>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002b1a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002b1c:	f7fd fd1c 	bl	8000558 <__aeabi_f2d>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b28:	f7fd fbb6 	bl	8000298 <__aeabi_dsub>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4640      	mov	r0, r8
 8002b32:	4649      	mov	r1, r9
 8002b34:	f7fd fd68 	bl	8000608 <__aeabi_dmul>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4690      	mov	r8, r2
 8002b3e:	4699      	mov	r9, r3
 8002b40:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002b44:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002b48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b4c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002b50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b54:	ee17 0a90 	vmov	r0, s15
 8002b58:	f7fd fcfe 	bl	8000558 <__aeabi_f2d>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4640      	mov	r0, r8
 8002b62:	4649      	mov	r1, r9
 8002b64:	f7fd fb9a 	bl	800029c <__adddf3>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4690      	mov	r8, r2
 8002b6e:	4699      	mov	r9, r3
 8002b70:	6a38      	ldr	r0, [r7, #32]
 8002b72:	f7fd fcf1 	bl	8000558 <__aeabi_f2d>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4640      	mov	r0, r8
 8002b7c:	4649      	mov	r1, r9
 8002b7e:	f7fd fb8b 	bl	8000298 <__aeabi_dsub>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4620      	mov	r0, r4
 8002b88:	4629      	mov	r1, r5
 8002b8a:	f7fd fd3d 	bl	8000608 <__aeabi_dmul>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	4650      	mov	r0, sl
 8002b94:	4659      	mov	r1, fp
 8002b96:	f7fd fb81 	bl	800029c <__adddf3>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4614      	mov	r4, r2
 8002ba0:	461d      	mov	r5, r3
 8002ba2:	4b8f      	ldr	r3, [pc, #572]	; (8002de0 <MadgwickAHRSupdate+0xfcc>)
 8002ba4:	ed93 7a00 	vldr	s14, [r3]
 8002ba8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002bac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bb0:	4b8c      	ldr	r3, [pc, #560]	; (8002de4 <MadgwickAHRSupdate+0xfd0>)
 8002bb2:	edd3 6a00 	vldr	s13, [r3]
 8002bb6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002bba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bc2:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8002bc6:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002bca:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002bce:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002bd2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002bd6:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 8002bda:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002bde:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002be2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002be6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002bea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002bee:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bf2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bfa:	ee17 0a90 	vmov	r0, s15
 8002bfe:	f7fd fcab 	bl	8000558 <__aeabi_f2d>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4620      	mov	r0, r4
 8002c08:	4629      	mov	r1, r5
 8002c0a:	f7fd fb47 	bl	800029c <__adddf3>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002c16:	4b71      	ldr	r3, [pc, #452]	; (8002ddc <MadgwickAHRSupdate+0xfc8>)
 8002c18:	ed93 7a00 	vldr	s14, [r3]
 8002c1c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002c20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c24:	4b6b      	ldr	r3, [pc, #428]	; (8002dd4 <MadgwickAHRSupdate+0xfc0>)
 8002c26:	edd3 6a00 	vldr	s13, [r3]
 8002c2a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002c2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c36:	ee17 0a90 	vmov	r0, s15
 8002c3a:	f7fd fc8d 	bl	8000558 <__aeabi_f2d>
 8002c3e:	4680      	mov	r8, r0
 8002c40:	4689      	mov	r9, r1
 8002c42:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002c46:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002c4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c4e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c56:	ee17 0a90 	vmov	r0, s15
 8002c5a:	f7fd fc7d 	bl	8000558 <__aeabi_f2d>
 8002c5e:	4682      	mov	sl, r0
 8002c60:	468b      	mov	fp, r1
 8002c62:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002c64:	f7fd fc78 	bl	8000558 <__aeabi_f2d>
 8002c68:	e9c7 0100 	strd	r0, r1, [r7]
 8002c6c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002c70:	f7fd fc72 	bl	8000558 <__aeabi_f2d>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	f04f 0000 	mov.w	r0, #0
 8002c7c:	4956      	ldr	r1, [pc, #344]	; (8002dd8 <MadgwickAHRSupdate+0xfc4>)
 8002c7e:	f7fd fb0b 	bl	8000298 <__aeabi_dsub>
 8002c82:	4602      	mov	r2, r0
 8002c84:	460b      	mov	r3, r1
 8002c86:	4614      	mov	r4, r2
 8002c88:	461d      	mov	r5, r3
 8002c8a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002c8c:	f7fd fc64 	bl	8000558 <__aeabi_f2d>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4620      	mov	r0, r4
 8002c96:	4629      	mov	r1, r5
 8002c98:	f7fd fafe 	bl	8000298 <__aeabi_dsub>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ca4:	f7fd fcb0 	bl	8000608 <__aeabi_dmul>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4650      	mov	r0, sl
 8002cae:	4659      	mov	r1, fp
 8002cb0:	f7fd faf4 	bl	800029c <__adddf3>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	4614      	mov	r4, r2
 8002cba:	461d      	mov	r5, r3
 8002cbc:	69b8      	ldr	r0, [r7, #24]
 8002cbe:	f7fd fc4b 	bl	8000558 <__aeabi_f2d>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	4629      	mov	r1, r5
 8002cca:	f7fd fae5 	bl	8000298 <__aeabi_dsub>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4640      	mov	r0, r8
 8002cd4:	4649      	mov	r1, r9
 8002cd6:	f7fd fc97 	bl	8000608 <__aeabi_dmul>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ce2:	f7fd fadb 	bl	800029c <__adddf3>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	4610      	mov	r0, r2
 8002cec:	4619      	mov	r1, r3
 8002cee:	f7fd ff83 	bl	8000bf8 <__aeabi_d2f>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	647b      	str	r3, [r7, #68]	; 0x44
		s3= _2q1*(2*(q1q3 - q0q2) - ax) +   _2q2*(2*(q0q1 + q2q3) - ay)+(-_8bx*q3+_4bz*q1)*(_4bx*(0.5 - q2q2 - q3q3) + _4bz*(q1q3 - q0q2) - mx)+(-_4bx*q0+_4bz*q2)*(_4bx*(q1q2 - q0q3) + _4bz*(q0q1 + q2q3) - my)+(_4bx*q1)*(_4bx*(q0q2 + q1q3) + _4bz*(0.5 - q1q1 - q2q2) - mz);
 8002cf6:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002cfa:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002cfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d02:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002d06:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002d0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d0e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002d12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d16:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8002d1a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d22:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002d26:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002d2a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002d2e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002d32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d3a:	ee17 0a90 	vmov	r0, s15
 8002d3e:	f7fd fc0b 	bl	8000558 <__aeabi_f2d>
 8002d42:	4604      	mov	r4, r0
 8002d44:	460d      	mov	r5, r1
 8002d46:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002d4a:	eeb1 7a67 	vneg.f32	s14, s15
 8002d4e:	4b25      	ldr	r3, [pc, #148]	; (8002de4 <MadgwickAHRSupdate+0xfd0>)
 8002d50:	edd3 7a00 	vldr	s15, [r3]
 8002d54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d58:	4b21      	ldr	r3, [pc, #132]	; (8002de0 <MadgwickAHRSupdate+0xfcc>)
 8002d5a:	edd3 6a00 	vldr	s13, [r3]
 8002d5e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002d62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d6a:	ee17 0a90 	vmov	r0, s15
 8002d6e:	f7fd fbf3 	bl	8000558 <__aeabi_f2d>
 8002d72:	4680      	mov	r8, r0
 8002d74:	4689      	mov	r9, r1
 8002d76:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002d78:	f7fd fbee 	bl	8000558 <__aeabi_f2d>
 8002d7c:	4682      	mov	sl, r0
 8002d7e:	468b      	mov	fp, r1
 8002d80:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002d82:	f7fd fbe9 	bl	8000558 <__aeabi_f2d>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	f04f 0000 	mov.w	r0, #0
 8002d8e:	4912      	ldr	r1, [pc, #72]	; (8002dd8 <MadgwickAHRSupdate+0xfc4>)
 8002d90:	f7fd fa82 	bl	8000298 <__aeabi_dsub>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002d9c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002d9e:	f7fd fbdb 	bl	8000558 <__aeabi_f2d>
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002daa:	f7fd fa75 	bl	8000298 <__aeabi_dsub>
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	4650      	mov	r0, sl
 8002db4:	4659      	mov	r1, fp
 8002db6:	f7fd fc27 	bl	8000608 <__aeabi_dmul>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4692      	mov	sl, r2
 8002dc0:	469b      	mov	fp, r3
 8002dc2:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002dc6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002dca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002dce:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002dd2:	e009      	b.n	8002de8 <MadgwickAHRSupdate+0xfd4>
 8002dd4:	200022c8 	.word	0x200022c8
 8002dd8:	3fe00000 	.word	0x3fe00000
 8002ddc:	20000000 	.word	0x20000000
 8002de0:	200022c4 	.word	0x200022c4
 8002de4:	200022cc 	.word	0x200022cc
 8002de8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dec:	ee17 0a90 	vmov	r0, s15
 8002df0:	f7fd fbb2 	bl	8000558 <__aeabi_f2d>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4650      	mov	r0, sl
 8002dfa:	4659      	mov	r1, fp
 8002dfc:	f7fd fa4e 	bl	800029c <__adddf3>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4692      	mov	sl, r2
 8002e06:	469b      	mov	fp, r3
 8002e08:	6a38      	ldr	r0, [r7, #32]
 8002e0a:	f7fd fba5 	bl	8000558 <__aeabi_f2d>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4650      	mov	r0, sl
 8002e14:	4659      	mov	r1, fp
 8002e16:	f7fd fa3f 	bl	8000298 <__aeabi_dsub>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4640      	mov	r0, r8
 8002e20:	4649      	mov	r1, r9
 8002e22:	f7fd fbf1 	bl	8000608 <__aeabi_dmul>
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	4629      	mov	r1, r5
 8002e2e:	f7fd fa35 	bl	800029c <__adddf3>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4614      	mov	r4, r2
 8002e38:	461d      	mov	r5, r3
 8002e3a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002e3e:	eeb1 7a67 	vneg.f32	s14, s15
 8002e42:	4bdf      	ldr	r3, [pc, #892]	; (80031c0 <MadgwickAHRSupdate+0x13ac>)
 8002e44:	edd3 7a00 	vldr	s15, [r3]
 8002e48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e4c:	4bdd      	ldr	r3, [pc, #884]	; (80031c4 <MadgwickAHRSupdate+0x13b0>)
 8002e4e:	edd3 6a00 	vldr	s13, [r3]
 8002e52:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002e56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e5e:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8002e62:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002e66:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002e6a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002e6e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e72:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 8002e76:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002e7a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002e7e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002e82:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e86:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002e8a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e8e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e96:	ee17 0a90 	vmov	r0, s15
 8002e9a:	f7fd fb5d 	bl	8000558 <__aeabi_f2d>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4620      	mov	r0, r4
 8002ea4:	4629      	mov	r1, r5
 8002ea6:	f7fd f9f9 	bl	800029c <__adddf3>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002eb2:	4bc5      	ldr	r3, [pc, #788]	; (80031c8 <MadgwickAHRSupdate+0x13b4>)
 8002eb4:	ed93 7a00 	vldr	s14, [r3]
 8002eb8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ec0:	ee17 0a90 	vmov	r0, s15
 8002ec4:	f7fd fb48 	bl	8000558 <__aeabi_f2d>
 8002ec8:	4680      	mov	r8, r0
 8002eca:	4689      	mov	r9, r1
 8002ecc:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002ed0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002ed4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ed8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ee0:	ee17 0a90 	vmov	r0, s15
 8002ee4:	f7fd fb38 	bl	8000558 <__aeabi_f2d>
 8002ee8:	4682      	mov	sl, r0
 8002eea:	468b      	mov	fp, r1
 8002eec:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002eee:	f7fd fb33 	bl	8000558 <__aeabi_f2d>
 8002ef2:	e9c7 0100 	strd	r0, r1, [r7]
 8002ef6:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002efa:	f7fd fb2d 	bl	8000558 <__aeabi_f2d>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	f04f 0000 	mov.w	r0, #0
 8002f06:	49b1      	ldr	r1, [pc, #708]	; (80031cc <MadgwickAHRSupdate+0x13b8>)
 8002f08:	f7fd f9c6 	bl	8000298 <__aeabi_dsub>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4614      	mov	r4, r2
 8002f12:	461d      	mov	r5, r3
 8002f14:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002f16:	f7fd fb1f 	bl	8000558 <__aeabi_f2d>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4620      	mov	r0, r4
 8002f20:	4629      	mov	r1, r5
 8002f22:	f7fd f9b9 	bl	8000298 <__aeabi_dsub>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f2e:	f7fd fb6b 	bl	8000608 <__aeabi_dmul>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4650      	mov	r0, sl
 8002f38:	4659      	mov	r1, fp
 8002f3a:	f7fd f9af 	bl	800029c <__adddf3>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	4614      	mov	r4, r2
 8002f44:	461d      	mov	r5, r3
 8002f46:	69b8      	ldr	r0, [r7, #24]
 8002f48:	f7fd fb06 	bl	8000558 <__aeabi_f2d>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4620      	mov	r0, r4
 8002f52:	4629      	mov	r1, r5
 8002f54:	f7fd f9a0 	bl	8000298 <__aeabi_dsub>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4640      	mov	r0, r8
 8002f5e:	4649      	mov	r1, r9
 8002f60:	f7fd fb52 	bl	8000608 <__aeabi_dmul>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f6c:	f7fd f996 	bl	800029c <__adddf3>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4610      	mov	r0, r2
 8002f76:	4619      	mov	r1, r3
 8002f78:	f7fd fe3e 	bl	8000bf8 <__aeabi_d2f>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	643b      	str	r3, [r7, #64]	; 0x40
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002f80:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002f84:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002f88:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002f8c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f94:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002f98:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fa0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002fa4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fac:	eeb0 0a67 	vmov.f32	s0, s15
 8002fb0:	f7fe ff0a 	bl	8001dc8 <invSqrt>
 8002fb4:	ed87 0a30 	vstr	s0, [r7, #192]	; 0xc0
		s0 *= recipNorm;
 8002fb8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002fbc:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		s1 *= recipNorm;
 8002fc8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002fcc:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fd4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		s2 *= recipNorm;
 8002fd8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002fdc:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fe4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		s3 *= recipNorm;
 8002fe8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002fec:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ff4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

		// Apply feedback step
		qDot1 -= beta * s0;
 8002ff8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ffc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003004:	ed97 7a35 	vldr	s14, [r7, #212]	; 0xd4
 8003008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800300c:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
		qDot2 -= beta * s1;
 8003010:	ed97 7a04 	vldr	s14, [r7, #16]
 8003014:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800301c:	ed97 7a34 	vldr	s14, [r7, #208]	; 0xd0
 8003020:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003024:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
		qDot3 -= beta * s2;
 8003028:	ed97 7a04 	vldr	s14, [r7, #16]
 800302c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003034:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 8003038:	ee77 7a67 	vsub.f32	s15, s14, s15
 800303c:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
		qDot4 -= beta * s3;
 8003040:	ed97 7a04 	vldr	s14, [r7, #16]
 8003044:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800304c:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8003050:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003054:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8003058:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800305c:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8003060:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003064:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8003068:	ee27 7a27 	vmul.f32	s14, s14, s15
 800306c:	4b54      	ldr	r3, [pc, #336]	; (80031c0 <MadgwickAHRSupdate+0x13ac>)
 800306e:	edd3 7a00 	vldr	s15, [r3]
 8003072:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003076:	4b52      	ldr	r3, [pc, #328]	; (80031c0 <MadgwickAHRSupdate+0x13ac>)
 8003078:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 800307c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003080:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8003084:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003088:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 800308c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003090:	4b4d      	ldr	r3, [pc, #308]	; (80031c8 <MadgwickAHRSupdate+0x13b4>)
 8003092:	edd3 7a00 	vldr	s15, [r3]
 8003096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800309a:	4b4b      	ldr	r3, [pc, #300]	; (80031c8 <MadgwickAHRSupdate+0x13b4>)
 800309c:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 80030a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030a4:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80030a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030ac:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 80030b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030b4:	4b43      	ldr	r3, [pc, #268]	; (80031c4 <MadgwickAHRSupdate+0x13b0>)
 80030b6:	edd3 7a00 	vldr	s15, [r3]
 80030ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030be:	4b41      	ldr	r3, [pc, #260]	; (80031c4 <MadgwickAHRSupdate+0x13b0>)
 80030c0:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 80030c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030c8:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80030cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030d0:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 80030d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030d8:	4b3d      	ldr	r3, [pc, #244]	; (80031d0 <MadgwickAHRSupdate+0x13bc>)
 80030da:	edd3 7a00 	vldr	s15, [r3]
 80030de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030e2:	4b3b      	ldr	r3, [pc, #236]	; (80031d0 <MadgwickAHRSupdate+0x13bc>)
 80030e4:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80030e8:	4b35      	ldr	r3, [pc, #212]	; (80031c0 <MadgwickAHRSupdate+0x13ac>)
 80030ea:	ed93 7a00 	vldr	s14, [r3]
 80030ee:	4b34      	ldr	r3, [pc, #208]	; (80031c0 <MadgwickAHRSupdate+0x13ac>)
 80030f0:	edd3 7a00 	vldr	s15, [r3]
 80030f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030f8:	4b33      	ldr	r3, [pc, #204]	; (80031c8 <MadgwickAHRSupdate+0x13b4>)
 80030fa:	edd3 6a00 	vldr	s13, [r3]
 80030fe:	4b32      	ldr	r3, [pc, #200]	; (80031c8 <MadgwickAHRSupdate+0x13b4>)
 8003100:	edd3 7a00 	vldr	s15, [r3]
 8003104:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003108:	ee37 7a27 	vadd.f32	s14, s14, s15
 800310c:	4b2d      	ldr	r3, [pc, #180]	; (80031c4 <MadgwickAHRSupdate+0x13b0>)
 800310e:	edd3 6a00 	vldr	s13, [r3]
 8003112:	4b2c      	ldr	r3, [pc, #176]	; (80031c4 <MadgwickAHRSupdate+0x13b0>)
 8003114:	edd3 7a00 	vldr	s15, [r3]
 8003118:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800311c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003120:	4b2b      	ldr	r3, [pc, #172]	; (80031d0 <MadgwickAHRSupdate+0x13bc>)
 8003122:	edd3 6a00 	vldr	s13, [r3]
 8003126:	4b2a      	ldr	r3, [pc, #168]	; (80031d0 <MadgwickAHRSupdate+0x13bc>)
 8003128:	edd3 7a00 	vldr	s15, [r3]
 800312c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003134:	eeb0 0a67 	vmov.f32	s0, s15
 8003138:	f7fe fe46 	bl	8001dc8 <invSqrt>
 800313c:	ed87 0a30 	vstr	s0, [r7, #192]	; 0xc0
	q0 *= recipNorm;
 8003140:	4b1f      	ldr	r3, [pc, #124]	; (80031c0 <MadgwickAHRSupdate+0x13ac>)
 8003142:	ed93 7a00 	vldr	s14, [r3]
 8003146:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800314a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800314e:	4b1c      	ldr	r3, [pc, #112]	; (80031c0 <MadgwickAHRSupdate+0x13ac>)
 8003150:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8003154:	4b1c      	ldr	r3, [pc, #112]	; (80031c8 <MadgwickAHRSupdate+0x13b4>)
 8003156:	ed93 7a00 	vldr	s14, [r3]
 800315a:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800315e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003162:	4b19      	ldr	r3, [pc, #100]	; (80031c8 <MadgwickAHRSupdate+0x13b4>)
 8003164:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8003168:	4b16      	ldr	r3, [pc, #88]	; (80031c4 <MadgwickAHRSupdate+0x13b0>)
 800316a:	ed93 7a00 	vldr	s14, [r3]
 800316e:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8003172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003176:	4b13      	ldr	r3, [pc, #76]	; (80031c4 <MadgwickAHRSupdate+0x13b0>)
 8003178:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 800317c:	4b14      	ldr	r3, [pc, #80]	; (80031d0 <MadgwickAHRSupdate+0x13bc>)
 800317e:	ed93 7a00 	vldr	s14, [r3]
 8003182:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8003186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800318a:	4b11      	ldr	r3, [pc, #68]	; (80031d0 <MadgwickAHRSupdate+0x13bc>)
 800318c:	edc3 7a00 	vstr	s15, [r3]

	quaternion[0] = q0;
 8003190:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <MadgwickAHRSupdate+0x13ac>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003196:	601a      	str	r2, [r3, #0]
	quaternion[1] = q1;
 8003198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800319a:	3304      	adds	r3, #4
 800319c:	4a0a      	ldr	r2, [pc, #40]	; (80031c8 <MadgwickAHRSupdate+0x13b4>)
 800319e:	6812      	ldr	r2, [r2, #0]
 80031a0:	601a      	str	r2, [r3, #0]
	quaternion[2] = q2;
 80031a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a4:	3308      	adds	r3, #8
 80031a6:	4a07      	ldr	r2, [pc, #28]	; (80031c4 <MadgwickAHRSupdate+0x13b0>)
 80031a8:	6812      	ldr	r2, [r2, #0]
 80031aa:	601a      	str	r2, [r3, #0]
	quaternion[3] = q3;
 80031ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ae:	330c      	adds	r3, #12
 80031b0:	4a07      	ldr	r2, [pc, #28]	; (80031d0 <MadgwickAHRSupdate+0x13bc>)
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	601a      	str	r2, [r3, #0]
}
 80031b6:	37d8      	adds	r7, #216	; 0xd8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031be:	bf00      	nop
 80031c0:	20000000 	.word	0x20000000
 80031c4:	200022c8 	.word	0x200022c8
 80031c8:	200022c4 	.word	0x200022c4
 80031cc:	3fe00000 	.word	0x3fe00000
 80031d0:	200022cc 	.word	0x200022cc

080031d4 <MadgwickAHRSupdateIMU>:

void MadgwickAHRSupdateIMU(float* quaternion, float gx, float gy, float gz, float ax, float ay, float az, float dt, float beta) {
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b0a2      	sub	sp, #136	; 0x88
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6278      	str	r0, [r7, #36]	; 0x24
 80031dc:	ed87 0a08 	vstr	s0, [r7, #32]
 80031e0:	edc7 0a07 	vstr	s1, [r7, #28]
 80031e4:	ed87 1a06 	vstr	s2, [r7, #24]
 80031e8:	edc7 1a05 	vstr	s3, [r7, #20]
 80031ec:	ed87 2a04 	vstr	s4, [r7, #16]
 80031f0:	edc7 2a03 	vstr	s5, [r7, #12]
 80031f4:	ed87 3a02 	vstr	s6, [r7, #8]
 80031f8:	edc7 3a01 	vstr	s7, [r7, #4]
	float recipNorm;
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	float sampleFreq = 1 / dt;
 80031fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003200:	ed97 7a02 	vldr	s14, [r7, #8]
 8003204:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003208:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800320c:	4bed      	ldr	r3, [pc, #948]	; (80035c4 <MadgwickAHRSupdateIMU+0x3f0>)
 800320e:	edd3 7a00 	vldr	s15, [r3]
 8003212:	eeb1 7a67 	vneg.f32	s14, s15
 8003216:	edd7 7a08 	vldr	s15, [r7, #32]
 800321a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800321e:	4bea      	ldr	r3, [pc, #936]	; (80035c8 <MadgwickAHRSupdateIMU+0x3f4>)
 8003220:	edd3 6a00 	vldr	s13, [r3]
 8003224:	edd7 7a07 	vldr	s15, [r7, #28]
 8003228:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800322c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003230:	4be6      	ldr	r3, [pc, #920]	; (80035cc <MadgwickAHRSupdateIMU+0x3f8>)
 8003232:	edd3 6a00 	vldr	s13, [r3]
 8003236:	edd7 7a06 	vldr	s15, [r7, #24]
 800323a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800323e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003242:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003246:	ee67 7a87 	vmul.f32	s15, s15, s14
 800324a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800324e:	4be0      	ldr	r3, [pc, #896]	; (80035d0 <MadgwickAHRSupdateIMU+0x3fc>)
 8003250:	ed93 7a00 	vldr	s14, [r3]
 8003254:	edd7 7a08 	vldr	s15, [r7, #32]
 8003258:	ee27 7a27 	vmul.f32	s14, s14, s15
 800325c:	4bda      	ldr	r3, [pc, #872]	; (80035c8 <MadgwickAHRSupdateIMU+0x3f4>)
 800325e:	edd3 6a00 	vldr	s13, [r3]
 8003262:	edd7 7a06 	vldr	s15, [r7, #24]
 8003266:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800326a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800326e:	4bd7      	ldr	r3, [pc, #860]	; (80035cc <MadgwickAHRSupdateIMU+0x3f8>)
 8003270:	edd3 6a00 	vldr	s13, [r3]
 8003274:	edd7 7a07 	vldr	s15, [r7, #28]
 8003278:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800327c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003280:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003284:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003288:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800328c:	4bd0      	ldr	r3, [pc, #832]	; (80035d0 <MadgwickAHRSupdateIMU+0x3fc>)
 800328e:	ed93 7a00 	vldr	s14, [r3]
 8003292:	edd7 7a07 	vldr	s15, [r7, #28]
 8003296:	ee27 7a27 	vmul.f32	s14, s14, s15
 800329a:	4bca      	ldr	r3, [pc, #808]	; (80035c4 <MadgwickAHRSupdateIMU+0x3f0>)
 800329c:	edd3 6a00 	vldr	s13, [r3]
 80032a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80032a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032ac:	4bc7      	ldr	r3, [pc, #796]	; (80035cc <MadgwickAHRSupdateIMU+0x3f8>)
 80032ae:	edd3 6a00 	vldr	s13, [r3]
 80032b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80032b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032be:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80032c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032c6:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80032ca:	4bc1      	ldr	r3, [pc, #772]	; (80035d0 <MadgwickAHRSupdateIMU+0x3fc>)
 80032cc:	ed93 7a00 	vldr	s14, [r3]
 80032d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80032d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032d8:	4bba      	ldr	r3, [pc, #744]	; (80035c4 <MadgwickAHRSupdateIMU+0x3f0>)
 80032da:	edd3 6a00 	vldr	s13, [r3]
 80032de:	edd7 7a07 	vldr	s15, [r7, #28]
 80032e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032ea:	4bb7      	ldr	r3, [pc, #732]	; (80035c8 <MadgwickAHRSupdateIMU+0x3f4>)
 80032ec:	edd3 6a00 	vldr	s13, [r3]
 80032f0:	edd7 7a08 	vldr	s15, [r7, #32]
 80032f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032fc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003300:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003304:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8003308:	edd7 7a05 	vldr	s15, [r7, #20]
 800330c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003314:	d10e      	bne.n	8003334 <MadgwickAHRSupdateIMU+0x160>
 8003316:	edd7 7a04 	vldr	s15, [r7, #16]
 800331a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800331e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003322:	d107      	bne.n	8003334 <MadgwickAHRSupdateIMU+0x160>
 8003324:	edd7 7a03 	vldr	s15, [r7, #12]
 8003328:	eef5 7a40 	vcmp.f32	s15, #0.0
 800332c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003330:	f000 81e0 	beq.w	80036f4 <MadgwickAHRSupdateIMU+0x520>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8003334:	edd7 7a05 	vldr	s15, [r7, #20]
 8003338:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800333c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003340:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003344:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003348:	edd7 7a03 	vldr	s15, [r7, #12]
 800334c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003354:	eeb0 0a67 	vmov.f32	s0, s15
 8003358:	f7fe fd36 	bl	8001dc8 <invSqrt>
 800335c:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
		ax *= recipNorm;
 8003360:	ed97 7a05 	vldr	s14, [r7, #20]
 8003364:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003368:	ee67 7a27 	vmul.f32	s15, s14, s15
 800336c:	edc7 7a05 	vstr	s15, [r7, #20]
		ay *= recipNorm;
 8003370:	ed97 7a04 	vldr	s14, [r7, #16]
 8003374:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800337c:	edc7 7a04 	vstr	s15, [r7, #16]
		az *= recipNorm;
 8003380:	ed97 7a03 	vldr	s14, [r7, #12]
 8003384:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800338c:	edc7 7a03 	vstr	s15, [r7, #12]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8003390:	4b8f      	ldr	r3, [pc, #572]	; (80035d0 <MadgwickAHRSupdateIMU+0x3fc>)
 8003392:	edd3 7a00 	vldr	s15, [r3]
 8003396:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800339a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		_2q1 = 2.0f * q1;
 800339e:	4b89      	ldr	r3, [pc, #548]	; (80035c4 <MadgwickAHRSupdateIMU+0x3f0>)
 80033a0:	edd3 7a00 	vldr	s15, [r3]
 80033a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80033a8:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		_2q2 = 2.0f * q2;
 80033ac:	4b86      	ldr	r3, [pc, #536]	; (80035c8 <MadgwickAHRSupdateIMU+0x3f4>)
 80033ae:	edd3 7a00 	vldr	s15, [r3]
 80033b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80033b6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		_2q3 = 2.0f * q3;
 80033ba:	4b84      	ldr	r3, [pc, #528]	; (80035cc <MadgwickAHRSupdateIMU+0x3f8>)
 80033bc:	edd3 7a00 	vldr	s15, [r3]
 80033c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80033c4:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		_4q0 = 4.0f * q0;
 80033c8:	4b81      	ldr	r3, [pc, #516]	; (80035d0 <MadgwickAHRSupdateIMU+0x3fc>)
 80033ca:	edd3 7a00 	vldr	s15, [r3]
 80033ce:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80033d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033d6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		_4q1 = 4.0f * q1;
 80033da:	4b7a      	ldr	r3, [pc, #488]	; (80035c4 <MadgwickAHRSupdateIMU+0x3f0>)
 80033dc:	edd3 7a00 	vldr	s15, [r3]
 80033e0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80033e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033e8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_4q2 = 4.0f * q2;
 80033ec:	4b76      	ldr	r3, [pc, #472]	; (80035c8 <MadgwickAHRSupdateIMU+0x3f4>)
 80033ee:	edd3 7a00 	vldr	s15, [r3]
 80033f2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80033f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033fa:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_8q1 = 8.0f * q1;
 80033fe:	4b71      	ldr	r3, [pc, #452]	; (80035c4 <MadgwickAHRSupdateIMU+0x3f0>)
 8003400:	edd3 7a00 	vldr	s15, [r3]
 8003404:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8003408:	ee67 7a87 	vmul.f32	s15, s15, s14
 800340c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_8q2 = 8.0f * q2;
 8003410:	4b6d      	ldr	r3, [pc, #436]	; (80035c8 <MadgwickAHRSupdateIMU+0x3f4>)
 8003412:	edd3 7a00 	vldr	s15, [r3]
 8003416:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800341a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800341e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		q0q0 = q0 * q0;
 8003422:	4b6b      	ldr	r3, [pc, #428]	; (80035d0 <MadgwickAHRSupdateIMU+0x3fc>)
 8003424:	ed93 7a00 	vldr	s14, [r3]
 8003428:	4b69      	ldr	r3, [pc, #420]	; (80035d0 <MadgwickAHRSupdateIMU+0x3fc>)
 800342a:	edd3 7a00 	vldr	s15, [r3]
 800342e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003432:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		q1q1 = q1 * q1;
 8003436:	4b63      	ldr	r3, [pc, #396]	; (80035c4 <MadgwickAHRSupdateIMU+0x3f0>)
 8003438:	ed93 7a00 	vldr	s14, [r3]
 800343c:	4b61      	ldr	r3, [pc, #388]	; (80035c4 <MadgwickAHRSupdateIMU+0x3f0>)
 800343e:	edd3 7a00 	vldr	s15, [r3]
 8003442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003446:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		q2q2 = q2 * q2;
 800344a:	4b5f      	ldr	r3, [pc, #380]	; (80035c8 <MadgwickAHRSupdateIMU+0x3f4>)
 800344c:	ed93 7a00 	vldr	s14, [r3]
 8003450:	4b5d      	ldr	r3, [pc, #372]	; (80035c8 <MadgwickAHRSupdateIMU+0x3f4>)
 8003452:	edd3 7a00 	vldr	s15, [r3]
 8003456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800345a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		q3q3 = q3 * q3;
 800345e:	4b5b      	ldr	r3, [pc, #364]	; (80035cc <MadgwickAHRSupdateIMU+0x3f8>)
 8003460:	ed93 7a00 	vldr	s14, [r3]
 8003464:	4b59      	ldr	r3, [pc, #356]	; (80035cc <MadgwickAHRSupdateIMU+0x3f8>)
 8003466:	edd3 7a00 	vldr	s15, [r3]
 800346a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800346e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8003472:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003476:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800347a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800347e:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8003482:	edd7 7a05 	vldr	s15, [r7, #20]
 8003486:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800348a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800348e:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8003492:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003496:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800349a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800349e:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 80034a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80034a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034ae:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80034b2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80034b6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80034ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034be:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 80034c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80034c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034ce:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80034d2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80034d6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80034da:	4b3a      	ldr	r3, [pc, #232]	; (80035c4 <MadgwickAHRSupdateIMU+0x3f0>)
 80034dc:	edd3 7a00 	vldr	s15, [r3]
 80034e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034e8:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80034ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80034f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034f8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80034fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003500:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8003504:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003508:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800350c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003510:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8003514:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003518:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800351c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003520:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8003524:	edd7 7a03 	vldr	s15, [r7, #12]
 8003528:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800352c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003530:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8003534:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003538:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800353c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003540:	4b21      	ldr	r3, [pc, #132]	; (80035c8 <MadgwickAHRSupdateIMU+0x3f4>)
 8003542:	edd3 7a00 	vldr	s15, [r3]
 8003546:	ee27 7a27 	vmul.f32	s14, s14, s15
 800354a:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800354e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003552:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003556:	ee37 7a27 	vadd.f32	s14, s14, s15
 800355a:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800355e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003562:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003566:	ee37 7a27 	vadd.f32	s14, s14, s15
 800356a:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800356e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003572:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003576:	ee37 7a67 	vsub.f32	s14, s14, s15
 800357a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800357e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003582:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8003586:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800358a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800358e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003592:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8003596:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800359a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800359e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035a2:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80035a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80035aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035b2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 80035b6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80035ba:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80035be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80035c2:	e007      	b.n	80035d4 <MadgwickAHRSupdateIMU+0x400>
 80035c4:	200022c4 	.word	0x200022c4
 80035c8:	200022c8 	.word	0x200022c8
 80035cc:	200022cc 	.word	0x200022cc
 80035d0:	20000000 	.word	0x20000000
 80035d4:	4ba1      	ldr	r3, [pc, #644]	; (800385c <MadgwickAHRSupdateIMU+0x688>)
 80035d6:	edd3 7a00 	vldr	s15, [r3]
 80035da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035de:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 80035e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80035e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035ee:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80035f2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80035f6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80035fa:	4b98      	ldr	r3, [pc, #608]	; (800385c <MadgwickAHRSupdateIMU+0x688>)
 80035fc:	edd3 7a00 	vldr	s15, [r3]
 8003600:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003604:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003608:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800360c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003610:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003614:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003618:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800361c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003620:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003624:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003628:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800362c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003630:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003634:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003638:	ee37 7a27 	vadd.f32	s14, s14, s15
 800363c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003640:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003644:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003648:	eeb0 0a67 	vmov.f32	s0, s15
 800364c:	f7fe fbbc 	bl	8001dc8 <invSqrt>
 8003650:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
		s0 *= recipNorm;
 8003654:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003658:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800365c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003660:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 *= recipNorm;
 8003664:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003668:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800366c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003670:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 *= recipNorm;
 8003674:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003678:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800367c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003680:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 *= recipNorm;
 8003684:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003688:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800368c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003690:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 8003694:	ed97 7a01 	vldr	s14, [r7, #4]
 8003698:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800369c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036a0:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80036a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036a8:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		qDot2 -= beta * s1;
 80036ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80036b0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80036b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036b8:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80036bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036c0:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		qDot3 -= beta * s2;
 80036c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80036c8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80036cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036d0:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80036d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036d8:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		qDot4 -= beta * s3;
 80036dc:	ed97 7a01 	vldr	s14, [r7, #4]
 80036e0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80036e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e8:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80036ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036f0:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 80036f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036f8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80036fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003700:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003704:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003708:	4b55      	ldr	r3, [pc, #340]	; (8003860 <MadgwickAHRSupdateIMU+0x68c>)
 800370a:	edd3 7a00 	vldr	s15, [r3]
 800370e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003712:	4b53      	ldr	r3, [pc, #332]	; (8003860 <MadgwickAHRSupdateIMU+0x68c>)
 8003714:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8003718:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800371c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003720:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003724:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003728:	ee27 7a27 	vmul.f32	s14, s14, s15
 800372c:	4b4d      	ldr	r3, [pc, #308]	; (8003864 <MadgwickAHRSupdateIMU+0x690>)
 800372e:	edd3 7a00 	vldr	s15, [r3]
 8003732:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003736:	4b4b      	ldr	r3, [pc, #300]	; (8003864 <MadgwickAHRSupdateIMU+0x690>)
 8003738:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 800373c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003740:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003744:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003748:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800374c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003750:	4b45      	ldr	r3, [pc, #276]	; (8003868 <MadgwickAHRSupdateIMU+0x694>)
 8003752:	edd3 7a00 	vldr	s15, [r3]
 8003756:	ee77 7a27 	vadd.f32	s15, s14, s15
 800375a:	4b43      	ldr	r3, [pc, #268]	; (8003868 <MadgwickAHRSupdateIMU+0x694>)
 800375c:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8003760:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003764:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003768:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800376c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8003770:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003774:	4b39      	ldr	r3, [pc, #228]	; (800385c <MadgwickAHRSupdateIMU+0x688>)
 8003776:	edd3 7a00 	vldr	s15, [r3]
 800377a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800377e:	4b37      	ldr	r3, [pc, #220]	; (800385c <MadgwickAHRSupdateIMU+0x688>)
 8003780:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8003784:	4b36      	ldr	r3, [pc, #216]	; (8003860 <MadgwickAHRSupdateIMU+0x68c>)
 8003786:	ed93 7a00 	vldr	s14, [r3]
 800378a:	4b35      	ldr	r3, [pc, #212]	; (8003860 <MadgwickAHRSupdateIMU+0x68c>)
 800378c:	edd3 7a00 	vldr	s15, [r3]
 8003790:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003794:	4b33      	ldr	r3, [pc, #204]	; (8003864 <MadgwickAHRSupdateIMU+0x690>)
 8003796:	edd3 6a00 	vldr	s13, [r3]
 800379a:	4b32      	ldr	r3, [pc, #200]	; (8003864 <MadgwickAHRSupdateIMU+0x690>)
 800379c:	edd3 7a00 	vldr	s15, [r3]
 80037a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037a8:	4b2f      	ldr	r3, [pc, #188]	; (8003868 <MadgwickAHRSupdateIMU+0x694>)
 80037aa:	edd3 6a00 	vldr	s13, [r3]
 80037ae:	4b2e      	ldr	r3, [pc, #184]	; (8003868 <MadgwickAHRSupdateIMU+0x694>)
 80037b0:	edd3 7a00 	vldr	s15, [r3]
 80037b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037bc:	4b27      	ldr	r3, [pc, #156]	; (800385c <MadgwickAHRSupdateIMU+0x688>)
 80037be:	edd3 6a00 	vldr	s13, [r3]
 80037c2:	4b26      	ldr	r3, [pc, #152]	; (800385c <MadgwickAHRSupdateIMU+0x688>)
 80037c4:	edd3 7a00 	vldr	s15, [r3]
 80037c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037d0:	eeb0 0a67 	vmov.f32	s0, s15
 80037d4:	f7fe faf8 	bl	8001dc8 <invSqrt>
 80037d8:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
	q0 *= recipNorm;
 80037dc:	4b20      	ldr	r3, [pc, #128]	; (8003860 <MadgwickAHRSupdateIMU+0x68c>)
 80037de:	ed93 7a00 	vldr	s14, [r3]
 80037e2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80037e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ea:	4b1d      	ldr	r3, [pc, #116]	; (8003860 <MadgwickAHRSupdateIMU+0x68c>)
 80037ec:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 80037f0:	4b1c      	ldr	r3, [pc, #112]	; (8003864 <MadgwickAHRSupdateIMU+0x690>)
 80037f2:	ed93 7a00 	vldr	s14, [r3]
 80037f6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80037fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037fe:	4b19      	ldr	r3, [pc, #100]	; (8003864 <MadgwickAHRSupdateIMU+0x690>)
 8003800:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8003804:	4b18      	ldr	r3, [pc, #96]	; (8003868 <MadgwickAHRSupdateIMU+0x694>)
 8003806:	ed93 7a00 	vldr	s14, [r3]
 800380a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800380e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003812:	4b15      	ldr	r3, [pc, #84]	; (8003868 <MadgwickAHRSupdateIMU+0x694>)
 8003814:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8003818:	4b10      	ldr	r3, [pc, #64]	; (800385c <MadgwickAHRSupdateIMU+0x688>)
 800381a:	ed93 7a00 	vldr	s14, [r3]
 800381e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003826:	4b0d      	ldr	r3, [pc, #52]	; (800385c <MadgwickAHRSupdateIMU+0x688>)
 8003828:	edc3 7a00 	vstr	s15, [r3]

	quaternion[0] = q0;
 800382c:	4b0c      	ldr	r3, [pc, #48]	; (8003860 <MadgwickAHRSupdateIMU+0x68c>)
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	601a      	str	r2, [r3, #0]
	quaternion[1] = q1;
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	3304      	adds	r3, #4
 8003838:	4a0a      	ldr	r2, [pc, #40]	; (8003864 <MadgwickAHRSupdateIMU+0x690>)
 800383a:	6812      	ldr	r2, [r2, #0]
 800383c:	601a      	str	r2, [r3, #0]
	quaternion[2] = q2;
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	3308      	adds	r3, #8
 8003842:	4a09      	ldr	r2, [pc, #36]	; (8003868 <MadgwickAHRSupdateIMU+0x694>)
 8003844:	6812      	ldr	r2, [r2, #0]
 8003846:	601a      	str	r2, [r3, #0]
	quaternion[3] = q3;
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	330c      	adds	r3, #12
 800384c:	4a03      	ldr	r2, [pc, #12]	; (800385c <MadgwickAHRSupdateIMU+0x688>)
 800384e:	6812      	ldr	r2, [r2, #0]
 8003850:	601a      	str	r2, [r3, #0]
}
 8003852:	bf00      	nop
 8003854:	3788      	adds	r7, #136	; 0x88
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	200022cc 	.word	0x200022cc
 8003860:	20000000 	.word	0x20000000
 8003864:	200022c4 	.word	0x200022c4
 8003868:	200022c8 	.word	0x200022c8

0800386c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003870:	f002 fb10 	bl	8005e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003874:	f000 f816 	bl	80038a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003878:	f000 f9ee 	bl	8003c58 <MX_GPIO_Init>
  MX_SPI5_Init();
 800387c:	f000 f98c 	bl	8003b98 <MX_SPI5_Init>
  MX_I2C1_Init();
 8003880:	f000 f8cc 	bl	8003a1c <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 8003884:	f000 f8f8 	bl	8003a78 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8003888:	f000 f91a 	bl	8003ac0 <MX_SPI1_Init>
  MX_SPI4_Init();
 800388c:	f000 f94e 	bl	8003b2c <MX_SPI4_Init>
  MX_USART1_UART_Init();
 8003890:	f000 f9b8 	bl	8003c04 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8003894:	f007 fcde 	bl	800b254 <MX_FATFS_Init>
  MX_ADC1_Init();
 8003898:	f000 f86e 	bl	8003978 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  app_main();
 800389c:	f7fd fc78 	bl	8001190 <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80038a0:	e7fe      	b.n	80038a0 <main+0x34>
	...

080038a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b094      	sub	sp, #80	; 0x50
 80038a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80038aa:	f107 0320 	add.w	r3, r7, #32
 80038ae:	2230      	movs	r2, #48	; 0x30
 80038b0:	2100      	movs	r1, #0
 80038b2:	4618      	mov	r0, r3
 80038b4:	f00c fbe8 	bl	8010088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80038b8:	f107 030c 	add.w	r3, r7, #12
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	605a      	str	r2, [r3, #4]
 80038c2:	609a      	str	r2, [r3, #8]
 80038c4:	60da      	str	r2, [r3, #12]
 80038c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80038c8:	2300      	movs	r3, #0
 80038ca:	60bb      	str	r3, [r7, #8]
 80038cc:	4b28      	ldr	r3, [pc, #160]	; (8003970 <SystemClock_Config+0xcc>)
 80038ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d0:	4a27      	ldr	r2, [pc, #156]	; (8003970 <SystemClock_Config+0xcc>)
 80038d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d6:	6413      	str	r3, [r2, #64]	; 0x40
 80038d8:	4b25      	ldr	r3, [pc, #148]	; (8003970 <SystemClock_Config+0xcc>)
 80038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e0:	60bb      	str	r3, [r7, #8]
 80038e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80038e4:	2300      	movs	r3, #0
 80038e6:	607b      	str	r3, [r7, #4]
 80038e8:	4b22      	ldr	r3, [pc, #136]	; (8003974 <SystemClock_Config+0xd0>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a21      	ldr	r2, [pc, #132]	; (8003974 <SystemClock_Config+0xd0>)
 80038ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038f2:	6013      	str	r3, [r2, #0]
 80038f4:	4b1f      	ldr	r3, [pc, #124]	; (8003974 <SystemClock_Config+0xd0>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80038fc:	607b      	str	r3, [r7, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003900:	2302      	movs	r3, #2
 8003902:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003904:	2301      	movs	r3, #1
 8003906:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003908:	2310      	movs	r3, #16
 800390a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800390c:	2302      	movs	r3, #2
 800390e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003910:	2300      	movs	r3, #0
 8003912:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003914:	2308      	movs	r3, #8
 8003916:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003918:	2364      	movs	r3, #100	; 0x64
 800391a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800391c:	2302      	movs	r3, #2
 800391e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003920:	2307      	movs	r3, #7
 8003922:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003924:	f107 0320 	add.w	r3, r7, #32
 8003928:	4618      	mov	r0, r3
 800392a:	f004 fad7 	bl	8007edc <HAL_RCC_OscConfig>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003934:	f000 fa38 	bl	8003da8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003938:	230f      	movs	r3, #15
 800393a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800393c:	2302      	movs	r3, #2
 800393e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003940:	2300      	movs	r3, #0
 8003942:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003944:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003948:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800394a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800394e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003950:	f107 030c 	add.w	r3, r7, #12
 8003954:	2103      	movs	r1, #3
 8003956:	4618      	mov	r0, r3
 8003958:	f004 fd38 	bl	80083cc <HAL_RCC_ClockConfig>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003962:	f000 fa21 	bl	8003da8 <Error_Handler>
  }
}
 8003966:	bf00      	nop
 8003968:	3750      	adds	r7, #80	; 0x50
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	40023800 	.word	0x40023800
 8003974:	40007000 	.word	0x40007000

08003978 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800397e:	463b      	mov	r3, r7
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	605a      	str	r2, [r3, #4]
 8003986:	609a      	str	r2, [r3, #8]
 8003988:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800398a:	4b21      	ldr	r3, [pc, #132]	; (8003a10 <MX_ADC1_Init+0x98>)
 800398c:	4a21      	ldr	r2, [pc, #132]	; (8003a14 <MX_ADC1_Init+0x9c>)
 800398e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003990:	4b1f      	ldr	r3, [pc, #124]	; (8003a10 <MX_ADC1_Init+0x98>)
 8003992:	2200      	movs	r2, #0
 8003994:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003996:	4b1e      	ldr	r3, [pc, #120]	; (8003a10 <MX_ADC1_Init+0x98>)
 8003998:	2200      	movs	r2, #0
 800399a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800399c:	4b1c      	ldr	r3, [pc, #112]	; (8003a10 <MX_ADC1_Init+0x98>)
 800399e:	2200      	movs	r2, #0
 80039a0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80039a2:	4b1b      	ldr	r3, [pc, #108]	; (8003a10 <MX_ADC1_Init+0x98>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80039a8:	4b19      	ldr	r3, [pc, #100]	; (8003a10 <MX_ADC1_Init+0x98>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80039b0:	4b17      	ldr	r3, [pc, #92]	; (8003a10 <MX_ADC1_Init+0x98>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80039b6:	4b16      	ldr	r3, [pc, #88]	; (8003a10 <MX_ADC1_Init+0x98>)
 80039b8:	4a17      	ldr	r2, [pc, #92]	; (8003a18 <MX_ADC1_Init+0xa0>)
 80039ba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80039bc:	4b14      	ldr	r3, [pc, #80]	; (8003a10 <MX_ADC1_Init+0x98>)
 80039be:	2200      	movs	r2, #0
 80039c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80039c2:	4b13      	ldr	r3, [pc, #76]	; (8003a10 <MX_ADC1_Init+0x98>)
 80039c4:	2201      	movs	r2, #1
 80039c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80039c8:	4b11      	ldr	r3, [pc, #68]	; (8003a10 <MX_ADC1_Init+0x98>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80039d0:	4b0f      	ldr	r3, [pc, #60]	; (8003a10 <MX_ADC1_Init+0x98>)
 80039d2:	2201      	movs	r2, #1
 80039d4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80039d6:	480e      	ldr	r0, [pc, #56]	; (8003a10 <MX_ADC1_Init+0x98>)
 80039d8:	f002 faf2 	bl	8005fc0 <HAL_ADC_Init>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80039e2:	f000 f9e1 	bl	8003da8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80039e6:	2300      	movs	r3, #0
 80039e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80039ea:	2301      	movs	r3, #1
 80039ec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80039ee:	2300      	movs	r3, #0
 80039f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039f2:	463b      	mov	r3, r7
 80039f4:	4619      	mov	r1, r3
 80039f6:	4806      	ldr	r0, [pc, #24]	; (8003a10 <MX_ADC1_Init+0x98>)
 80039f8:	f002 fca6 	bl	8006348 <HAL_ADC_ConfigChannel>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8003a02:	f000 f9d1 	bl	8003da8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003a06:	bf00      	nop
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	200027f0 	.word	0x200027f0
 8003a14:	40012000 	.word	0x40012000
 8003a18:	0f000001 	.word	0x0f000001

08003a1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003a20:	4b12      	ldr	r3, [pc, #72]	; (8003a6c <MX_I2C1_Init+0x50>)
 8003a22:	4a13      	ldr	r2, [pc, #76]	; (8003a70 <MX_I2C1_Init+0x54>)
 8003a24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003a26:	4b11      	ldr	r3, [pc, #68]	; (8003a6c <MX_I2C1_Init+0x50>)
 8003a28:	4a12      	ldr	r2, [pc, #72]	; (8003a74 <MX_I2C1_Init+0x58>)
 8003a2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003a2c:	4b0f      	ldr	r3, [pc, #60]	; (8003a6c <MX_I2C1_Init+0x50>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003a32:	4b0e      	ldr	r3, [pc, #56]	; (8003a6c <MX_I2C1_Init+0x50>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a38:	4b0c      	ldr	r3, [pc, #48]	; (8003a6c <MX_I2C1_Init+0x50>)
 8003a3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a40:	4b0a      	ldr	r3, [pc, #40]	; (8003a6c <MX_I2C1_Init+0x50>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003a46:	4b09      	ldr	r3, [pc, #36]	; (8003a6c <MX_I2C1_Init+0x50>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a4c:	4b07      	ldr	r3, [pc, #28]	; (8003a6c <MX_I2C1_Init+0x50>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a52:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <MX_I2C1_Init+0x50>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003a58:	4804      	ldr	r0, [pc, #16]	; (8003a6c <MX_I2C1_Init+0x50>)
 8003a5a:	f003 fa4f 	bl	8006efc <HAL_I2C_Init>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003a64:	f000 f9a0 	bl	8003da8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003a68:	bf00      	nop
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	2000279c 	.word	0x2000279c
 8003a70:	40005400 	.word	0x40005400
 8003a74:	000186a0 	.word	0x000186a0

08003a78 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003a7c:	4b0e      	ldr	r3, [pc, #56]	; (8003ab8 <MX_SDIO_SD_Init+0x40>)
 8003a7e:	4a0f      	ldr	r2, [pc, #60]	; (8003abc <MX_SDIO_SD_Init+0x44>)
 8003a80:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003a82:	4b0d      	ldr	r3, [pc, #52]	; (8003ab8 <MX_SDIO_SD_Init+0x40>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003a88:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <MX_SDIO_SD_Init+0x40>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003a8e:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <MX_SDIO_SD_Init+0x40>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003a94:	4b08      	ldr	r3, [pc, #32]	; (8003ab8 <MX_SDIO_SD_Init+0x40>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003a9a:	4b07      	ldr	r3, [pc, #28]	; (8003ab8 <MX_SDIO_SD_Init+0x40>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 3;
 8003aa0:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <MX_SDIO_SD_Init+0x40>)
 8003aa2:	2203      	movs	r2, #3
 8003aa4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003aa6:	4b04      	ldr	r3, [pc, #16]	; (8003ab8 <MX_SDIO_SD_Init+0x40>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	611a      	str	r2, [r3, #16]
  /* USER CODE END SDIO_Init 2 */

}
 8003aac:	bf00      	nop
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	200028d4 	.word	0x200028d4
 8003abc:	40012c00 	.word	0x40012c00

08003ac0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003ac4:	4b17      	ldr	r3, [pc, #92]	; (8003b24 <MX_SPI1_Init+0x64>)
 8003ac6:	4a18      	ldr	r2, [pc, #96]	; (8003b28 <MX_SPI1_Init+0x68>)
 8003ac8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003aca:	4b16      	ldr	r3, [pc, #88]	; (8003b24 <MX_SPI1_Init+0x64>)
 8003acc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ad0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003ad2:	4b14      	ldr	r3, [pc, #80]	; (8003b24 <MX_SPI1_Init+0x64>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ad8:	4b12      	ldr	r3, [pc, #72]	; (8003b24 <MX_SPI1_Init+0x64>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003ade:	4b11      	ldr	r3, [pc, #68]	; (8003b24 <MX_SPI1_Init+0x64>)
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003ae4:	4b0f      	ldr	r3, [pc, #60]	; (8003b24 <MX_SPI1_Init+0x64>)
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003aea:	4b0e      	ldr	r3, [pc, #56]	; (8003b24 <MX_SPI1_Init+0x64>)
 8003aec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003af0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003af2:	4b0c      	ldr	r3, [pc, #48]	; (8003b24 <MX_SPI1_Init+0x64>)
 8003af4:	2230      	movs	r2, #48	; 0x30
 8003af6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003af8:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <MX_SPI1_Init+0x64>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003afe:	4b09      	ldr	r3, [pc, #36]	; (8003b24 <MX_SPI1_Init+0x64>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b04:	4b07      	ldr	r3, [pc, #28]	; (8003b24 <MX_SPI1_Init+0x64>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003b0a:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <MX_SPI1_Init+0x64>)
 8003b0c:	220a      	movs	r2, #10
 8003b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003b10:	4804      	ldr	r0, [pc, #16]	; (8003b24 <MX_SPI1_Init+0x64>)
 8003b12:	f005 fdaf 	bl	8009674 <HAL_SPI_Init>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003b1c:	f000 f944 	bl	8003da8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003b20:	bf00      	nop
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	20002958 	.word	0x20002958
 8003b28:	40013000 	.word	0x40013000

08003b2c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8003b30:	4b17      	ldr	r3, [pc, #92]	; (8003b90 <MX_SPI4_Init+0x64>)
 8003b32:	4a18      	ldr	r2, [pc, #96]	; (8003b94 <MX_SPI4_Init+0x68>)
 8003b34:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8003b36:	4b16      	ldr	r3, [pc, #88]	; (8003b90 <MX_SPI4_Init+0x64>)
 8003b38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b3c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003b3e:	4b14      	ldr	r3, [pc, #80]	; (8003b90 <MX_SPI4_Init+0x64>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b44:	4b12      	ldr	r3, [pc, #72]	; (8003b90 <MX_SPI4_Init+0x64>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b4a:	4b11      	ldr	r3, [pc, #68]	; (8003b90 <MX_SPI4_Init+0x64>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003b50:	4b0f      	ldr	r3, [pc, #60]	; (8003b90 <MX_SPI4_Init+0x64>)
 8003b52:	2201      	movs	r2, #1
 8003b54:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003b56:	4b0e      	ldr	r3, [pc, #56]	; (8003b90 <MX_SPI4_Init+0x64>)
 8003b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b5c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003b5e:	4b0c      	ldr	r3, [pc, #48]	; (8003b90 <MX_SPI4_Init+0x64>)
 8003b60:	2228      	movs	r2, #40	; 0x28
 8003b62:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b64:	4b0a      	ldr	r3, [pc, #40]	; (8003b90 <MX_SPI4_Init+0x64>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b6a:	4b09      	ldr	r3, [pc, #36]	; (8003b90 <MX_SPI4_Init+0x64>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b70:	4b07      	ldr	r3, [pc, #28]	; (8003b90 <MX_SPI4_Init+0x64>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8003b76:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <MX_SPI4_Init+0x64>)
 8003b78:	220a      	movs	r2, #10
 8003b7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003b7c:	4804      	ldr	r0, [pc, #16]	; (8003b90 <MX_SPI4_Init+0x64>)
 8003b7e:	f005 fd79 	bl	8009674 <HAL_SPI_Init>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8003b88:	f000 f90e 	bl	8003da8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8003b8c:	bf00      	nop
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	2000287c 	.word	0x2000287c
 8003b94:	40013400 	.word	0x40013400

08003b98 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8003b9c:	4b17      	ldr	r3, [pc, #92]	; (8003bfc <MX_SPI5_Init+0x64>)
 8003b9e:	4a18      	ldr	r2, [pc, #96]	; (8003c00 <MX_SPI5_Init+0x68>)
 8003ba0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003ba2:	4b16      	ldr	r3, [pc, #88]	; (8003bfc <MX_SPI5_Init+0x64>)
 8003ba4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ba8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003baa:	4b14      	ldr	r3, [pc, #80]	; (8003bfc <MX_SPI5_Init+0x64>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003bb0:	4b12      	ldr	r3, [pc, #72]	; (8003bfc <MX_SPI5_Init+0x64>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bb6:	4b11      	ldr	r3, [pc, #68]	; (8003bfc <MX_SPI5_Init+0x64>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003bbc:	4b0f      	ldr	r3, [pc, #60]	; (8003bfc <MX_SPI5_Init+0x64>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8003bc2:	4b0e      	ldr	r3, [pc, #56]	; (8003bfc <MX_SPI5_Init+0x64>)
 8003bc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bc8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003bca:	4b0c      	ldr	r3, [pc, #48]	; (8003bfc <MX_SPI5_Init+0x64>)
 8003bcc:	2230      	movs	r2, #48	; 0x30
 8003bce:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003bd0:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <MX_SPI5_Init+0x64>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003bd6:	4b09      	ldr	r3, [pc, #36]	; (8003bfc <MX_SPI5_Init+0x64>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bdc:	4b07      	ldr	r3, [pc, #28]	; (8003bfc <MX_SPI5_Init+0x64>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8003be2:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <MX_SPI5_Init+0x64>)
 8003be4:	220a      	movs	r2, #10
 8003be6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003be8:	4804      	ldr	r0, [pc, #16]	; (8003bfc <MX_SPI5_Init+0x64>)
 8003bea:	f005 fd43 	bl	8009674 <HAL_SPI_Init>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8003bf4:	f000 f8d8 	bl	8003da8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8003bf8:	bf00      	nop
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	20002744 	.word	0x20002744
 8003c00:	40015000 	.word	0x40015000

08003c04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c08:	4b11      	ldr	r3, [pc, #68]	; (8003c50 <MX_USART1_UART_Init+0x4c>)
 8003c0a:	4a12      	ldr	r2, [pc, #72]	; (8003c54 <MX_USART1_UART_Init+0x50>)
 8003c0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003c0e:	4b10      	ldr	r3, [pc, #64]	; (8003c50 <MX_USART1_UART_Init+0x4c>)
 8003c10:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003c14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c16:	4b0e      	ldr	r3, [pc, #56]	; (8003c50 <MX_USART1_UART_Init+0x4c>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c1c:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <MX_USART1_UART_Init+0x4c>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c22:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <MX_USART1_UART_Init+0x4c>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c28:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <MX_USART1_UART_Init+0x4c>)
 8003c2a:	220c      	movs	r2, #12
 8003c2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c2e:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <MX_USART1_UART_Init+0x4c>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c34:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <MX_USART1_UART_Init+0x4c>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c3a:	4805      	ldr	r0, [pc, #20]	; (8003c50 <MX_USART1_UART_Init+0x4c>)
 8003c3c:	f006 fac2 	bl	800a1c4 <HAL_UART_Init>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003c46:	f000 f8af 	bl	8003da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003c4a:	bf00      	nop
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	20002838 	.word	0x20002838
 8003c54:	40011000 	.word	0x40011000

08003c58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08a      	sub	sp, #40	; 0x28
 8003c5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c5e:	f107 0314 	add.w	r3, r7, #20
 8003c62:	2200      	movs	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	605a      	str	r2, [r3, #4]
 8003c68:	609a      	str	r2, [r3, #8]
 8003c6a:	60da      	str	r2, [r3, #12]
 8003c6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c6e:	2300      	movs	r3, #0
 8003c70:	613b      	str	r3, [r7, #16]
 8003c72:	4b48      	ldr	r3, [pc, #288]	; (8003d94 <MX_GPIO_Init+0x13c>)
 8003c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c76:	4a47      	ldr	r2, [pc, #284]	; (8003d94 <MX_GPIO_Init+0x13c>)
 8003c78:	f043 0304 	orr.w	r3, r3, #4
 8003c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c7e:	4b45      	ldr	r3, [pc, #276]	; (8003d94 <MX_GPIO_Init+0x13c>)
 8003c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	4b41      	ldr	r3, [pc, #260]	; (8003d94 <MX_GPIO_Init+0x13c>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c92:	4a40      	ldr	r2, [pc, #256]	; (8003d94 <MX_GPIO_Init+0x13c>)
 8003c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c98:	6313      	str	r3, [r2, #48]	; 0x30
 8003c9a:	4b3e      	ldr	r3, [pc, #248]	; (8003d94 <MX_GPIO_Init+0x13c>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	4b3a      	ldr	r3, [pc, #232]	; (8003d94 <MX_GPIO_Init+0x13c>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	4a39      	ldr	r2, [pc, #228]	; (8003d94 <MX_GPIO_Init+0x13c>)
 8003cb0:	f043 0301 	orr.w	r3, r3, #1
 8003cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cb6:	4b37      	ldr	r3, [pc, #220]	; (8003d94 <MX_GPIO_Init+0x13c>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	60bb      	str	r3, [r7, #8]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	607b      	str	r3, [r7, #4]
 8003cc6:	4b33      	ldr	r3, [pc, #204]	; (8003d94 <MX_GPIO_Init+0x13c>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	4a32      	ldr	r2, [pc, #200]	; (8003d94 <MX_GPIO_Init+0x13c>)
 8003ccc:	f043 0302 	orr.w	r3, r3, #2
 8003cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8003cd2:	4b30      	ldr	r3, [pc, #192]	; (8003d94 <MX_GPIO_Init+0x13c>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	607b      	str	r3, [r7, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LSM_CS_Pin|MOTOR_Pin, GPIO_PIN_RESET);
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8003ce4:	482c      	ldr	r0, [pc, #176]	; (8003d98 <MX_GPIO_Init+0x140>)
 8003ce6:	f003 f8ef 	bl	8006ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TDC_SHIM_Pin|LIS_CS_Pin, GPIO_PIN_RESET);
 8003cea:	2200      	movs	r2, #0
 8003cec:	2114      	movs	r1, #20
 8003cee:	482b      	ldr	r0, [pc, #172]	; (8003d9c <MX_GPIO_Init+0x144>)
 8003cf0:	f003 f8ea 	bl	8006ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF_CE_Pin|NRF_CS_Pin|CS_TDC_Pin|PEREGIGATEL_Pin
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f245 4106 	movw	r1, #21510	; 0x5406
 8003cfa:	4829      	ldr	r0, [pc, #164]	; (8003da0 <MX_GPIO_Init+0x148>)
 8003cfc:	f003 f8e4 	bl	8006ec8 <HAL_GPIO_WritePin>
                          |LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LSM_CS_Pin MOTOR_Pin */
  GPIO_InitStruct.Pin = LSM_CS_Pin|MOTOR_Pin;
 8003d00:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003d04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d06:	2301      	movs	r3, #1
 8003d08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d12:	f107 0314 	add.w	r3, r7, #20
 8003d16:	4619      	mov	r1, r3
 8003d18:	481f      	ldr	r0, [pc, #124]	; (8003d98 <MX_GPIO_Init+0x140>)
 8003d1a:	f002 fe55 	bl	80069c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : STATE_Pin */
  GPIO_InitStruct.Pin = STATE_Pin;
 8003d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d24:	2300      	movs	r3, #0
 8003d26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(STATE_GPIO_Port, &GPIO_InitStruct);
 8003d2c:	f107 0314 	add.w	r3, r7, #20
 8003d30:	4619      	mov	r1, r3
 8003d32:	4819      	ldr	r0, [pc, #100]	; (8003d98 <MX_GPIO_Init+0x140>)
 8003d34:	f002 fe48 	bl	80069c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TDC_INT_Pin */
  GPIO_InitStruct.Pin = TDC_INT_Pin;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d40:	2300      	movs	r3, #0
 8003d42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TDC_INT_GPIO_Port, &GPIO_InitStruct);
 8003d44:	f107 0314 	add.w	r3, r7, #20
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4816      	ldr	r0, [pc, #88]	; (8003da4 <MX_GPIO_Init+0x14c>)
 8003d4c:	f002 fe3c 	bl	80069c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TDC_SHIM_Pin LIS_CS_Pin */
  GPIO_InitStruct.Pin = TDC_SHIM_Pin|LIS_CS_Pin;
 8003d50:	2314      	movs	r3, #20
 8003d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d54:	2301      	movs	r3, #1
 8003d56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d60:	f107 0314 	add.w	r3, r7, #20
 8003d64:	4619      	mov	r1, r3
 8003d66:	480d      	ldr	r0, [pc, #52]	; (8003d9c <MX_GPIO_Init+0x144>)
 8003d68:	f002 fe2e 	bl	80069c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CE_Pin NRF_CS_Pin CS_TDC_Pin PEREGIGATEL_Pin
                           LED_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CS_Pin|CS_TDC_Pin|PEREGIGATEL_Pin
 8003d6c:	f245 4306 	movw	r3, #21510	; 0x5406
 8003d70:	617b      	str	r3, [r7, #20]
                          |LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d72:	2301      	movs	r3, #1
 8003d74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d76:	2300      	movs	r3, #0
 8003d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d7e:	f107 0314 	add.w	r3, r7, #20
 8003d82:	4619      	mov	r1, r3
 8003d84:	4806      	ldr	r0, [pc, #24]	; (8003da0 <MX_GPIO_Init+0x148>)
 8003d86:	f002 fe1f 	bl	80069c8 <HAL_GPIO_Init>

}
 8003d8a:	bf00      	nop
 8003d8c:	3728      	adds	r7, #40	; 0x28
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	40023800 	.word	0x40023800
 8003d98:	40020800 	.word	0x40020800
 8003d9c:	40020000 	.word	0x40020000
 8003da0:	40020400 	.word	0x40020400
 8003da4:	40021c00 	.word	0x40021c00

08003da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003dac:	b672      	cpsid	i
}
 8003dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003db0:	e7fe      	b.n	8003db0 <Error_Handler+0x8>
	...

08003db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dba:	2300      	movs	r3, #0
 8003dbc:	607b      	str	r3, [r7, #4]
 8003dbe:	4b10      	ldr	r3, [pc, #64]	; (8003e00 <HAL_MspInit+0x4c>)
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc2:	4a0f      	ldr	r2, [pc, #60]	; (8003e00 <HAL_MspInit+0x4c>)
 8003dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8003dca:	4b0d      	ldr	r3, [pc, #52]	; (8003e00 <HAL_MspInit+0x4c>)
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dd2:	607b      	str	r3, [r7, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	603b      	str	r3, [r7, #0]
 8003dda:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <HAL_MspInit+0x4c>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	4a08      	ldr	r2, [pc, #32]	; (8003e00 <HAL_MspInit+0x4c>)
 8003de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003de4:	6413      	str	r3, [r2, #64]	; 0x40
 8003de6:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <HAL_MspInit+0x4c>)
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dee:	603b      	str	r3, [r7, #0]
 8003df0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	40023800 	.word	0x40023800

08003e04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08a      	sub	sp, #40	; 0x28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e0c:	f107 0314 	add.w	r3, r7, #20
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	605a      	str	r2, [r3, #4]
 8003e16:	609a      	str	r2, [r3, #8]
 8003e18:	60da      	str	r2, [r3, #12]
 8003e1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a17      	ldr	r2, [pc, #92]	; (8003e80 <HAL_ADC_MspInit+0x7c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d127      	bne.n	8003e76 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003e26:	2300      	movs	r3, #0
 8003e28:	613b      	str	r3, [r7, #16]
 8003e2a:	4b16      	ldr	r3, [pc, #88]	; (8003e84 <HAL_ADC_MspInit+0x80>)
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2e:	4a15      	ldr	r2, [pc, #84]	; (8003e84 <HAL_ADC_MspInit+0x80>)
 8003e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e34:	6453      	str	r3, [r2, #68]	; 0x44
 8003e36:	4b13      	ldr	r3, [pc, #76]	; (8003e84 <HAL_ADC_MspInit+0x80>)
 8003e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3e:	613b      	str	r3, [r7, #16]
 8003e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e42:	2300      	movs	r3, #0
 8003e44:	60fb      	str	r3, [r7, #12]
 8003e46:	4b0f      	ldr	r3, [pc, #60]	; (8003e84 <HAL_ADC_MspInit+0x80>)
 8003e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4a:	4a0e      	ldr	r2, [pc, #56]	; (8003e84 <HAL_ADC_MspInit+0x80>)
 8003e4c:	f043 0301 	orr.w	r3, r3, #1
 8003e50:	6313      	str	r3, [r2, #48]	; 0x30
 8003e52:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <HAL_ADC_MspInit+0x80>)
 8003e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e62:	2303      	movs	r3, #3
 8003e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e6a:	f107 0314 	add.w	r3, r7, #20
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4805      	ldr	r0, [pc, #20]	; (8003e88 <HAL_ADC_MspInit+0x84>)
 8003e72:	f002 fda9 	bl	80069c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003e76:	bf00      	nop
 8003e78:	3728      	adds	r7, #40	; 0x28
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	40012000 	.word	0x40012000
 8003e84:	40023800 	.word	0x40023800
 8003e88:	40020000 	.word	0x40020000

08003e8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b08a      	sub	sp, #40	; 0x28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e94:	f107 0314 	add.w	r3, r7, #20
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	605a      	str	r2, [r3, #4]
 8003e9e:	609a      	str	r2, [r3, #8]
 8003ea0:	60da      	str	r2, [r3, #12]
 8003ea2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a19      	ldr	r2, [pc, #100]	; (8003f10 <HAL_I2C_MspInit+0x84>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d12c      	bne.n	8003f08 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eae:	2300      	movs	r3, #0
 8003eb0:	613b      	str	r3, [r7, #16]
 8003eb2:	4b18      	ldr	r3, [pc, #96]	; (8003f14 <HAL_I2C_MspInit+0x88>)
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb6:	4a17      	ldr	r2, [pc, #92]	; (8003f14 <HAL_I2C_MspInit+0x88>)
 8003eb8:	f043 0302 	orr.w	r3, r3, #2
 8003ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ebe:	4b15      	ldr	r3, [pc, #84]	; (8003f14 <HAL_I2C_MspInit+0x88>)
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	613b      	str	r3, [r7, #16]
 8003ec8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8003eca:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ed0:	2312      	movs	r3, #18
 8003ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003edc:	2304      	movs	r3, #4
 8003ede:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ee0:	f107 0314 	add.w	r3, r7, #20
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	480c      	ldr	r0, [pc, #48]	; (8003f18 <HAL_I2C_MspInit+0x8c>)
 8003ee8:	f002 fd6e 	bl	80069c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003eec:	2300      	movs	r3, #0
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	4b08      	ldr	r3, [pc, #32]	; (8003f14 <HAL_I2C_MspInit+0x88>)
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef4:	4a07      	ldr	r2, [pc, #28]	; (8003f14 <HAL_I2C_MspInit+0x88>)
 8003ef6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003efa:	6413      	str	r3, [r2, #64]	; 0x40
 8003efc:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <HAL_I2C_MspInit+0x88>)
 8003efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003f08:	bf00      	nop
 8003f0a:	3728      	adds	r7, #40	; 0x28
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40005400 	.word	0x40005400
 8003f14:	40023800 	.word	0x40023800
 8003f18:	40020400 	.word	0x40020400

08003f1c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a0a      	ldr	r2, [pc, #40]	; (8003f54 <HAL_I2C_MspDeInit+0x38>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d10e      	bne.n	8003f4c <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003f2e:	4b0a      	ldr	r3, [pc, #40]	; (8003f58 <HAL_I2C_MspDeInit+0x3c>)
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	4a09      	ldr	r2, [pc, #36]	; (8003f58 <HAL_I2C_MspDeInit+0x3c>)
 8003f34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f38:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8003f3a:	2140      	movs	r1, #64	; 0x40
 8003f3c:	4807      	ldr	r0, [pc, #28]	; (8003f5c <HAL_I2C_MspDeInit+0x40>)
 8003f3e:	f002 fec7 	bl	8006cd0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8003f42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f46:	4805      	ldr	r0, [pc, #20]	; (8003f5c <HAL_I2C_MspDeInit+0x40>)
 8003f48:	f002 fec2 	bl	8006cd0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8003f4c:	bf00      	nop
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40005400 	.word	0x40005400
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	40020400 	.word	0x40020400

08003f60 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b08a      	sub	sp, #40	; 0x28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f68:	f107 0314 	add.w	r3, r7, #20
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	605a      	str	r2, [r3, #4]
 8003f72:	609a      	str	r2, [r3, #8]
 8003f74:	60da      	str	r2, [r3, #12]
 8003f76:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a29      	ldr	r2, [pc, #164]	; (8004024 <HAL_SD_MspInit+0xc4>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d14b      	bne.n	800401a <HAL_SD_MspInit+0xba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003f82:	2300      	movs	r3, #0
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	4b28      	ldr	r3, [pc, #160]	; (8004028 <HAL_SD_MspInit+0xc8>)
 8003f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8a:	4a27      	ldr	r2, [pc, #156]	; (8004028 <HAL_SD_MspInit+0xc8>)
 8003f8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f90:	6453      	str	r3, [r2, #68]	; 0x44
 8003f92:	4b25      	ldr	r3, [pc, #148]	; (8004028 <HAL_SD_MspInit+0xc8>)
 8003f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f9a:	613b      	str	r3, [r7, #16]
 8003f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	4b21      	ldr	r3, [pc, #132]	; (8004028 <HAL_SD_MspInit+0xc8>)
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa6:	4a20      	ldr	r2, [pc, #128]	; (8004028 <HAL_SD_MspInit+0xc8>)
 8003fa8:	f043 0301 	orr.w	r3, r3, #1
 8003fac:	6313      	str	r3, [r2, #48]	; 0x30
 8003fae:	4b1e      	ldr	r3, [pc, #120]	; (8004028 <HAL_SD_MspInit+0xc8>)
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60bb      	str	r3, [r7, #8]
 8003fbe:	4b1a      	ldr	r3, [pc, #104]	; (8004028 <HAL_SD_MspInit+0xc8>)
 8003fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc2:	4a19      	ldr	r2, [pc, #100]	; (8004028 <HAL_SD_MspInit+0xc8>)
 8003fc4:	f043 0302 	orr.w	r3, r3, #2
 8003fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8003fca:	4b17      	ldr	r3, [pc, #92]	; (8004028 <HAL_SD_MspInit+0xc8>)
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	60bb      	str	r3, [r7, #8]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8003fd6:	f44f 7350 	mov.w	r3, #832	; 0x340
 8003fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fdc:	2302      	movs	r3, #2
 8003fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003fe8:	230c      	movs	r3, #12
 8003fea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fec:	f107 0314 	add.w	r3, r7, #20
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	480e      	ldr	r0, [pc, #56]	; (800402c <HAL_SD_MspInit+0xcc>)
 8003ff4:	f002 fce8 	bl	80069c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 8003ff8:	f248 03a0 	movw	r3, #32928	; 0x80a0
 8003ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ffe:	2302      	movs	r3, #2
 8004000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004002:	2300      	movs	r3, #0
 8004004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004006:	2303      	movs	r3, #3
 8004008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800400a:	230c      	movs	r3, #12
 800400c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800400e:	f107 0314 	add.w	r3, r7, #20
 8004012:	4619      	mov	r1, r3
 8004014:	4806      	ldr	r0, [pc, #24]	; (8004030 <HAL_SD_MspInit+0xd0>)
 8004016:	f002 fcd7 	bl	80069c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800401a:	bf00      	nop
 800401c:	3728      	adds	r7, #40	; 0x28
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	40012c00 	.word	0x40012c00
 8004028:	40023800 	.word	0x40023800
 800402c:	40020000 	.word	0x40020000
 8004030:	40020400 	.word	0x40020400

08004034 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b090      	sub	sp, #64	; 0x40
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800403c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	605a      	str	r2, [r3, #4]
 8004046:	609a      	str	r2, [r3, #8]
 8004048:	60da      	str	r2, [r3, #12]
 800404a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a81      	ldr	r2, [pc, #516]	; (8004258 <HAL_SPI_MspInit+0x224>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d14a      	bne.n	80040ec <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004056:	2300      	movs	r3, #0
 8004058:	62bb      	str	r3, [r7, #40]	; 0x28
 800405a:	4b80      	ldr	r3, [pc, #512]	; (800425c <HAL_SPI_MspInit+0x228>)
 800405c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405e:	4a7f      	ldr	r2, [pc, #508]	; (800425c <HAL_SPI_MspInit+0x228>)
 8004060:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004064:	6453      	str	r3, [r2, #68]	; 0x44
 8004066:	4b7d      	ldr	r3, [pc, #500]	; (800425c <HAL_SPI_MspInit+0x228>)
 8004068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800406e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004070:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004072:	2300      	movs	r3, #0
 8004074:	627b      	str	r3, [r7, #36]	; 0x24
 8004076:	4b79      	ldr	r3, [pc, #484]	; (800425c <HAL_SPI_MspInit+0x228>)
 8004078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407a:	4a78      	ldr	r2, [pc, #480]	; (800425c <HAL_SPI_MspInit+0x228>)
 800407c:	f043 0301 	orr.w	r3, r3, #1
 8004080:	6313      	str	r3, [r2, #48]	; 0x30
 8004082:	4b76      	ldr	r3, [pc, #472]	; (800425c <HAL_SPI_MspInit+0x228>)
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	627b      	str	r3, [r7, #36]	; 0x24
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800408e:	2300      	movs	r3, #0
 8004090:	623b      	str	r3, [r7, #32]
 8004092:	4b72      	ldr	r3, [pc, #456]	; (800425c <HAL_SPI_MspInit+0x228>)
 8004094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004096:	4a71      	ldr	r2, [pc, #452]	; (800425c <HAL_SPI_MspInit+0x228>)
 8004098:	f043 0302 	orr.w	r3, r3, #2
 800409c:	6313      	str	r3, [r2, #48]	; 0x30
 800409e:	4b6f      	ldr	r3, [pc, #444]	; (800425c <HAL_SPI_MspInit+0x228>)
 80040a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	623b      	str	r3, [r7, #32]
 80040a8:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80040aa:	23a0      	movs	r3, #160	; 0xa0
 80040ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ae:	2302      	movs	r3, #2
 80040b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b2:	2300      	movs	r3, #0
 80040b4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040b6:	2303      	movs	r3, #3
 80040b8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80040ba:	2305      	movs	r3, #5
 80040bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040c2:	4619      	mov	r1, r3
 80040c4:	4866      	ldr	r0, [pc, #408]	; (8004260 <HAL_SPI_MspInit+0x22c>)
 80040c6:	f002 fc7f 	bl	80069c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80040ca:	2310      	movs	r3, #16
 80040cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ce:	2302      	movs	r3, #2
 80040d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d2:	2300      	movs	r3, #0
 80040d4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040d6:	2303      	movs	r3, #3
 80040d8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80040da:	2305      	movs	r3, #5
 80040dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040e2:	4619      	mov	r1, r3
 80040e4:	485f      	ldr	r0, [pc, #380]	; (8004264 <HAL_SPI_MspInit+0x230>)
 80040e6:	f002 fc6f 	bl	80069c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80040ea:	e0b1      	b.n	8004250 <HAL_SPI_MspInit+0x21c>
  else if(hspi->Instance==SPI4)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a5d      	ldr	r2, [pc, #372]	; (8004268 <HAL_SPI_MspInit+0x234>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d15c      	bne.n	80041b0 <HAL_SPI_MspInit+0x17c>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80040f6:	2300      	movs	r3, #0
 80040f8:	61fb      	str	r3, [r7, #28]
 80040fa:	4b58      	ldr	r3, [pc, #352]	; (800425c <HAL_SPI_MspInit+0x228>)
 80040fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fe:	4a57      	ldr	r2, [pc, #348]	; (800425c <HAL_SPI_MspInit+0x228>)
 8004100:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004104:	6453      	str	r3, [r2, #68]	; 0x44
 8004106:	4b55      	ldr	r3, [pc, #340]	; (800425c <HAL_SPI_MspInit+0x228>)
 8004108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800410e:	61fb      	str	r3, [r7, #28]
 8004110:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004112:	2300      	movs	r3, #0
 8004114:	61bb      	str	r3, [r7, #24]
 8004116:	4b51      	ldr	r3, [pc, #324]	; (800425c <HAL_SPI_MspInit+0x228>)
 8004118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411a:	4a50      	ldr	r2, [pc, #320]	; (800425c <HAL_SPI_MspInit+0x228>)
 800411c:	f043 0301 	orr.w	r3, r3, #1
 8004120:	6313      	str	r3, [r2, #48]	; 0x30
 8004122:	4b4e      	ldr	r3, [pc, #312]	; (800425c <HAL_SPI_MspInit+0x228>)
 8004124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	61bb      	str	r3, [r7, #24]
 800412c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800412e:	2300      	movs	r3, #0
 8004130:	617b      	str	r3, [r7, #20]
 8004132:	4b4a      	ldr	r3, [pc, #296]	; (800425c <HAL_SPI_MspInit+0x228>)
 8004134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004136:	4a49      	ldr	r2, [pc, #292]	; (800425c <HAL_SPI_MspInit+0x228>)
 8004138:	f043 0302 	orr.w	r3, r3, #2
 800413c:	6313      	str	r3, [r2, #48]	; 0x30
 800413e:	4b47      	ldr	r3, [pc, #284]	; (800425c <HAL_SPI_MspInit+0x228>)
 8004140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	617b      	str	r3, [r7, #20]
 8004148:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800414a:	2302      	movs	r3, #2
 800414c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800414e:	2302      	movs	r3, #2
 8004150:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004152:	2300      	movs	r3, #0
 8004154:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004156:	2303      	movs	r3, #3
 8004158:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800415a:	2305      	movs	r3, #5
 800415c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800415e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004162:	4619      	mov	r1, r3
 8004164:	483e      	ldr	r0, [pc, #248]	; (8004260 <HAL_SPI_MspInit+0x22c>)
 8004166:	f002 fc2f 	bl	80069c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800416a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800416e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004170:	2302      	movs	r3, #2
 8004172:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004174:	2300      	movs	r3, #0
 8004176:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004178:	2303      	movs	r3, #3
 800417a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 800417c:	2306      	movs	r3, #6
 800417e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004180:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004184:	4619      	mov	r1, r3
 8004186:	4837      	ldr	r0, [pc, #220]	; (8004264 <HAL_SPI_MspInit+0x230>)
 8004188:	f002 fc1e 	bl	80069c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800418c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004190:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004192:	2302      	movs	r3, #2
 8004194:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004196:	2300      	movs	r3, #0
 8004198:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800419a:	2303      	movs	r3, #3
 800419c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 800419e:	2306      	movs	r3, #6
 80041a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041a6:	4619      	mov	r1, r3
 80041a8:	482d      	ldr	r0, [pc, #180]	; (8004260 <HAL_SPI_MspInit+0x22c>)
 80041aa:	f002 fc0d 	bl	80069c8 <HAL_GPIO_Init>
}
 80041ae:	e04f      	b.n	8004250 <HAL_SPI_MspInit+0x21c>
  else if(hspi->Instance==SPI5)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a2d      	ldr	r2, [pc, #180]	; (800426c <HAL_SPI_MspInit+0x238>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d14a      	bne.n	8004250 <HAL_SPI_MspInit+0x21c>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80041ba:	2300      	movs	r3, #0
 80041bc:	613b      	str	r3, [r7, #16]
 80041be:	4b27      	ldr	r3, [pc, #156]	; (800425c <HAL_SPI_MspInit+0x228>)
 80041c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c2:	4a26      	ldr	r2, [pc, #152]	; (800425c <HAL_SPI_MspInit+0x228>)
 80041c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041c8:	6453      	str	r3, [r2, #68]	; 0x44
 80041ca:	4b24      	ldr	r3, [pc, #144]	; (800425c <HAL_SPI_MspInit+0x228>)
 80041cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041d2:	613b      	str	r3, [r7, #16]
 80041d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041d6:	2300      	movs	r3, #0
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	4b20      	ldr	r3, [pc, #128]	; (800425c <HAL_SPI_MspInit+0x228>)
 80041dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041de:	4a1f      	ldr	r2, [pc, #124]	; (800425c <HAL_SPI_MspInit+0x228>)
 80041e0:	f043 0302 	orr.w	r3, r3, #2
 80041e4:	6313      	str	r3, [r2, #48]	; 0x30
 80041e6:	4b1d      	ldr	r3, [pc, #116]	; (800425c <HAL_SPI_MspInit+0x228>)
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041f2:	2300      	movs	r3, #0
 80041f4:	60bb      	str	r3, [r7, #8]
 80041f6:	4b19      	ldr	r3, [pc, #100]	; (800425c <HAL_SPI_MspInit+0x228>)
 80041f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fa:	4a18      	ldr	r2, [pc, #96]	; (800425c <HAL_SPI_MspInit+0x228>)
 80041fc:	f043 0301 	orr.w	r3, r3, #1
 8004200:	6313      	str	r3, [r2, #48]	; 0x30
 8004202:	4b16      	ldr	r3, [pc, #88]	; (800425c <HAL_SPI_MspInit+0x228>)
 8004204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	60bb      	str	r3, [r7, #8]
 800420c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800420e:	2301      	movs	r3, #1
 8004210:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004212:	2302      	movs	r3, #2
 8004214:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004216:	2300      	movs	r3, #0
 8004218:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800421a:	2303      	movs	r3, #3
 800421c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 800421e:	2306      	movs	r3, #6
 8004220:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004222:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004226:	4619      	mov	r1, r3
 8004228:	480e      	ldr	r0, [pc, #56]	; (8004264 <HAL_SPI_MspInit+0x230>)
 800422a:	f002 fbcd 	bl	80069c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800422e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004232:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004234:	2302      	movs	r3, #2
 8004236:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004238:	2300      	movs	r3, #0
 800423a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800423c:	2303      	movs	r3, #3
 800423e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8004240:	2306      	movs	r3, #6
 8004242:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004244:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004248:	4619      	mov	r1, r3
 800424a:	4805      	ldr	r0, [pc, #20]	; (8004260 <HAL_SPI_MspInit+0x22c>)
 800424c:	f002 fbbc 	bl	80069c8 <HAL_GPIO_Init>
}
 8004250:	bf00      	nop
 8004252:	3740      	adds	r7, #64	; 0x40
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40013000 	.word	0x40013000
 800425c:	40023800 	.word	0x40023800
 8004260:	40020000 	.word	0x40020000
 8004264:	40020400 	.word	0x40020400
 8004268:	40013400 	.word	0x40013400
 800426c:	40015000 	.word	0x40015000

08004270 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08a      	sub	sp, #40	; 0x28
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004278:	f107 0314 	add.w	r3, r7, #20
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	605a      	str	r2, [r3, #4]
 8004282:	609a      	str	r2, [r3, #8]
 8004284:	60da      	str	r2, [r3, #12]
 8004286:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a2c      	ldr	r2, [pc, #176]	; (8004340 <HAL_UART_MspInit+0xd0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d152      	bne.n	8004338 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004292:	2300      	movs	r3, #0
 8004294:	613b      	str	r3, [r7, #16]
 8004296:	4b2b      	ldr	r3, [pc, #172]	; (8004344 <HAL_UART_MspInit+0xd4>)
 8004298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429a:	4a2a      	ldr	r2, [pc, #168]	; (8004344 <HAL_UART_MspInit+0xd4>)
 800429c:	f043 0310 	orr.w	r3, r3, #16
 80042a0:	6453      	str	r3, [r2, #68]	; 0x44
 80042a2:	4b28      	ldr	r3, [pc, #160]	; (8004344 <HAL_UART_MspInit+0xd4>)
 80042a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a6:	f003 0310 	and.w	r3, r3, #16
 80042aa:	613b      	str	r3, [r7, #16]
 80042ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ae:	2300      	movs	r3, #0
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	4b24      	ldr	r3, [pc, #144]	; (8004344 <HAL_UART_MspInit+0xd4>)
 80042b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b6:	4a23      	ldr	r2, [pc, #140]	; (8004344 <HAL_UART_MspInit+0xd4>)
 80042b8:	f043 0301 	orr.w	r3, r3, #1
 80042bc:	6313      	str	r3, [r2, #48]	; 0x30
 80042be:	4b21      	ldr	r3, [pc, #132]	; (8004344 <HAL_UART_MspInit+0xd4>)
 80042c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042ca:	2300      	movs	r3, #0
 80042cc:	60bb      	str	r3, [r7, #8]
 80042ce:	4b1d      	ldr	r3, [pc, #116]	; (8004344 <HAL_UART_MspInit+0xd4>)
 80042d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d2:	4a1c      	ldr	r2, [pc, #112]	; (8004344 <HAL_UART_MspInit+0xd4>)
 80042d4:	f043 0302 	orr.w	r3, r3, #2
 80042d8:	6313      	str	r3, [r2, #48]	; 0x30
 80042da:	4b1a      	ldr	r3, [pc, #104]	; (8004344 <HAL_UART_MspInit+0xd4>)
 80042dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	60bb      	str	r3, [r7, #8]
 80042e4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80042e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ec:	2302      	movs	r3, #2
 80042ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f0:	2300      	movs	r3, #0
 80042f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042f4:	2303      	movs	r3, #3
 80042f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042f8:	2307      	movs	r3, #7
 80042fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042fc:	f107 0314 	add.w	r3, r7, #20
 8004300:	4619      	mov	r1, r3
 8004302:	4811      	ldr	r0, [pc, #68]	; (8004348 <HAL_UART_MspInit+0xd8>)
 8004304:	f002 fb60 	bl	80069c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004308:	2308      	movs	r3, #8
 800430a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800430c:	2302      	movs	r3, #2
 800430e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004310:	2300      	movs	r3, #0
 8004312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004314:	2303      	movs	r3, #3
 8004316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004318:	2307      	movs	r3, #7
 800431a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800431c:	f107 0314 	add.w	r3, r7, #20
 8004320:	4619      	mov	r1, r3
 8004322:	480a      	ldr	r0, [pc, #40]	; (800434c <HAL_UART_MspInit+0xdc>)
 8004324:	f002 fb50 	bl	80069c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004328:	2200      	movs	r2, #0
 800432a:	2100      	movs	r1, #0
 800432c:	2025      	movs	r0, #37	; 0x25
 800432e:	f002 fb14 	bl	800695a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004332:	2025      	movs	r0, #37	; 0x25
 8004334:	f002 fb2d 	bl	8006992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004338:	bf00      	nop
 800433a:	3728      	adds	r7, #40	; 0x28
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	40011000 	.word	0x40011000
 8004344:	40023800 	.word	0x40023800
 8004348:	40020000 	.word	0x40020000
 800434c:	40020400 	.word	0x40020400

08004350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004354:	e7fe      	b.n	8004354 <NMI_Handler+0x4>

08004356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004356:	b480      	push	{r7}
 8004358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800435a:	e7fe      	b.n	800435a <HardFault_Handler+0x4>

0800435c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004360:	e7fe      	b.n	8004360 <MemManage_Handler+0x4>

08004362 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004362:	b480      	push	{r7}
 8004364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004366:	e7fe      	b.n	8004366 <BusFault_Handler+0x4>

08004368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800436c:	e7fe      	b.n	800436c <UsageFault_Handler+0x4>

0800436e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800436e:	b480      	push	{r7}
 8004370:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004372:	bf00      	nop
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004380:	bf00      	nop
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800438a:	b480      	push	{r7}
 800438c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800438e:	bf00      	nop
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800439c:	f001 fdcc 	bl	8005f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043a0:	bf00      	nop
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
		//__disable_irq();
		//#pragma GCC diagnostic push;
		//#pragma GCC diagnostic ignored "-Wunused-variable"
		    volatile uint32_t sr = huart1.Instance->SR;
 80043aa:	4b08      	ldr	r3, [pc, #32]	; (80043cc <USART1_IRQHandler+0x28>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	607b      	str	r3, [r7, #4]
		//#pragma GCC diagnostic pop
		    volatile uint32_t byte = huart1.Instance->DR;
 80043b2:	4b06      	ldr	r3, [pc, #24]	; (80043cc <USART1_IRQHandler+0x28>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	603b      	str	r3, [r7, #0]
		    //__enable_irq();

		    gps_push_byte(byte);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	4618      	mov	r0, r3
 80043be:	f00a fa0f 	bl	800e7e0 <gps_push_byte>
		    (void)sr;
 80043c2:	687b      	ldr	r3, [r7, #4]


	    return;
 80043c4:	bf00      	nop
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80043c6:	3708      	adds	r7, #8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	20002838 	.word	0x20002838

080043d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
	return 1;
 80043d4:	2301      	movs	r3, #1
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <_kill>:

int _kill(int pid, int sig)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80043ea:	f00b fe03 	bl	800fff4 <__errno>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2216      	movs	r2, #22
 80043f2:	601a      	str	r2, [r3, #0]
	return -1;
 80043f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3708      	adds	r7, #8
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <_exit>:

void _exit (int status)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004408:	f04f 31ff 	mov.w	r1, #4294967295
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f7ff ffe7 	bl	80043e0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004412:	e7fe      	b.n	8004412 <_exit+0x12>

08004414 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004420:	2300      	movs	r3, #0
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	e00a      	b.n	800443c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004426:	f3af 8000 	nop.w
 800442a:	4601      	mov	r1, r0
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	1c5a      	adds	r2, r3, #1
 8004430:	60ba      	str	r2, [r7, #8]
 8004432:	b2ca      	uxtb	r2, r1
 8004434:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	3301      	adds	r3, #1
 800443a:	617b      	str	r3, [r7, #20]
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	429a      	cmp	r2, r3
 8004442:	dbf0      	blt.n	8004426 <_read+0x12>
	}

return len;
 8004444:	687b      	ldr	r3, [r7, #4]
}
 8004446:	4618      	mov	r0, r3
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <_close>:
	}
	return len;
}

int _close(int file)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
	return -1;
 8004456:	f04f 33ff 	mov.w	r3, #4294967295
}
 800445a:	4618      	mov	r0, r3
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
 800446e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004476:	605a      	str	r2, [r3, #4]
	return 0;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <_isatty>:

int _isatty(int file)
{
 8004486:	b480      	push	{r7}
 8004488:	b083      	sub	sp, #12
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
	return 1;
 800448e:	2301      	movs	r3, #1
}
 8004490:	4618      	mov	r0, r3
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
	return 0;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
	...

080044b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044c0:	4a14      	ldr	r2, [pc, #80]	; (8004514 <_sbrk+0x5c>)
 80044c2:	4b15      	ldr	r3, [pc, #84]	; (8004518 <_sbrk+0x60>)
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80044cc:	4b13      	ldr	r3, [pc, #76]	; (800451c <_sbrk+0x64>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d102      	bne.n	80044da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80044d4:	4b11      	ldr	r3, [pc, #68]	; (800451c <_sbrk+0x64>)
 80044d6:	4a12      	ldr	r2, [pc, #72]	; (8004520 <_sbrk+0x68>)
 80044d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80044da:	4b10      	ldr	r3, [pc, #64]	; (800451c <_sbrk+0x64>)
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4413      	add	r3, r2
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d207      	bcs.n	80044f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80044e8:	f00b fd84 	bl	800fff4 <__errno>
 80044ec:	4603      	mov	r3, r0
 80044ee:	220c      	movs	r2, #12
 80044f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80044f2:	f04f 33ff 	mov.w	r3, #4294967295
 80044f6:	e009      	b.n	800450c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80044f8:	4b08      	ldr	r3, [pc, #32]	; (800451c <_sbrk+0x64>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80044fe:	4b07      	ldr	r3, [pc, #28]	; (800451c <_sbrk+0x64>)
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4413      	add	r3, r2
 8004506:	4a05      	ldr	r2, [pc, #20]	; (800451c <_sbrk+0x64>)
 8004508:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800450a:	68fb      	ldr	r3, [r7, #12]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3718      	adds	r7, #24
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	20020000 	.word	0x20020000
 8004518:	00000400 	.word	0x00000400
 800451c:	200022d0 	.word	0x200022d0
 8004520:	20004a38 	.word	0x20004a38

08004524 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004528:	4b06      	ldr	r3, [pc, #24]	; (8004544 <SystemInit+0x20>)
 800452a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452e:	4a05      	ldr	r2, [pc, #20]	; (8004544 <SystemInit+0x20>)
 8004530:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004534:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004538:	bf00      	nop
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	e000ed00 	.word	0xe000ed00

08004548 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004548:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004580 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800454c:	480d      	ldr	r0, [pc, #52]	; (8004584 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800454e:	490e      	ldr	r1, [pc, #56]	; (8004588 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004550:	4a0e      	ldr	r2, [pc, #56]	; (800458c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004554:	e002      	b.n	800455c <LoopCopyDataInit>

08004556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800455a:	3304      	adds	r3, #4

0800455c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800455c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800455e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004560:	d3f9      	bcc.n	8004556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004562:	4a0b      	ldr	r2, [pc, #44]	; (8004590 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004564:	4c0b      	ldr	r4, [pc, #44]	; (8004594 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004568:	e001      	b.n	800456e <LoopFillZerobss>

0800456a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800456a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800456c:	3204      	adds	r2, #4

0800456e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800456e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004570:	d3fb      	bcc.n	800456a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004572:	f7ff ffd7 	bl	8004524 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004576:	f00b fd55 	bl	8010024 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800457a:	f7ff f977 	bl	800386c <main>
  bx  lr    
 800457e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004580:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004588:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 800458c:	08016a60 	.word	0x08016a60
  ldr r2, =_sbss
 8004590:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8004594:	20004a34 	.word	0x20004a34

08004598 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004598:	e7fe      	b.n	8004598 <ADC_IRQHandler>

0800459a <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b084      	sub	sp, #16
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* chip id read try count */
    uint8_t try_count = 5;
 80045a2:	2305      	movs	r3, #5
 80045a4:	73bb      	strb	r3, [r7, #14]
    uint8_t chip_id = 0;
 80045a6:	2300      	movs	r3, #0
 80045a8:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f001 fa16 	bl	80059dc <null_ptr_check>
 80045b0:	4603      	mov	r3, r0
 80045b2:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 80045b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d130      	bne.n	800461e <bme280_init+0x84>
    {
        while (try_count)
 80045bc:	e025      	b.n	800460a <bme280_init+0x70>
        {
            /* Read the chip-id of bme280 sensor */
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 80045be:	f107 010d 	add.w	r1, r7, #13
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	20d0      	movs	r0, #208	; 0xd0
 80045c8:	f000 f82f 	bl	800462a <bme280_get_regs>
 80045cc:	4603      	mov	r3, r0
 80045ce:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BME280_OK))
 80045d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d111      	bne.n	80045fc <bme280_init+0x62>
            {
                dev->chip_id = chip_id;
 80045d8:	7b7a      	ldrb	r2, [r7, #13]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bme280_soft_reset(dev);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f978 	bl	80048d4 <bme280_soft_reset>
 80045e4:	4603      	mov	r3, r0
 80045e6:	73fb      	strb	r3, [r7, #15]
                if (rslt == BME280_OK)
 80045e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d110      	bne.n	8004612 <bme280_init+0x78>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f001 f869 	bl	80056c8 <get_calib_data>
 80045f6:	4603      	mov	r3, r0
 80045f8:	73fb      	strb	r3, [r7, #15]
                }
                break;
 80045fa:	e00a      	b.n	8004612 <bme280_init+0x78>
            }

            /* Wait for 1 ms */
            dev->delay_ms(1);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	2001      	movs	r0, #1
 8004602:	4798      	blx	r3
            --try_count;
 8004604:	7bbb      	ldrb	r3, [r7, #14]
 8004606:	3b01      	subs	r3, #1
 8004608:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 800460a:	7bbb      	ldrb	r3, [r7, #14]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1d6      	bne.n	80045be <bme280_init+0x24>
 8004610:	e000      	b.n	8004614 <bme280_init+0x7a>
                break;
 8004612:	bf00      	nop
        }

        /* Chip id check failed */
        if (!try_count)
 8004614:	7bbb      	ldrb	r3, [r7, #14]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <bme280_init+0x84>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 800461a:	23fe      	movs	r3, #254	; 0xfe
 800461c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800461e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 800462a:	b590      	push	{r4, r7, lr}
 800462c:	b087      	sub	sp, #28
 800462e:	af00      	add	r7, sp, #0
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607b      	str	r3, [r7, #4]
 8004634:	4603      	mov	r3, r0
 8004636:	73fb      	strb	r3, [r7, #15]
 8004638:	4613      	mov	r3, r2
 800463a:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f001 f9cd 	bl	80059dc <null_ptr_check>
 8004642:	4603      	mov	r3, r0
 8004644:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8004646:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d117      	bne.n	800467e <bme280_get_regs+0x54>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	789b      	ldrb	r3, [r3, #2]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d003      	beq.n	800465e <bme280_get_regs+0x34>
        {
            reg_addr = reg_addr | 0x80;
 8004656:	7bfb      	ldrb	r3, [r7, #15]
 8004658:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800465c:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data  */
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685c      	ldr	r4, [r3, #4]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	7858      	ldrb	r0, [r3, #1]
 8004666:	89bb      	ldrh	r3, [r7, #12]
 8004668:	7bf9      	ldrb	r1, [r7, #15]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	47a0      	blx	r4
 800466e:	4603      	mov	r3, r0
 8004670:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error */
        if (rslt != BME280_OK)
 8004672:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <bme280_get_regs+0x54>
        {
            rslt = BME280_E_COMM_FAIL;
 800467a:	23fc      	movs	r3, #252	; 0xfc
 800467c:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 800467e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004682:	4618      	mov	r0, r3
 8004684:	371c      	adds	r7, #28
 8004686:	46bd      	mov	sp, r7
 8004688:	bd90      	pop	{r4, r7, pc}

0800468a <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 800468a:	b590      	push	{r4, r7, lr}
 800468c:	b08d      	sub	sp, #52	; 0x34
 800468e:	af00      	add	r7, sp, #0
 8004690:	60f8      	str	r0, [r7, #12]
 8004692:	60b9      	str	r1, [r7, #8]
 8004694:	603b      	str	r3, [r7, #0]
 8004696:	4613      	mov	r3, r2
 8004698:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 800469a:	79fb      	ldrb	r3, [r7, #7]
 800469c:	2b0a      	cmp	r3, #10
 800469e:	d901      	bls.n	80046a4 <bme280_set_regs+0x1a>
    {
        len = 10;
 80046a0:	230a      	movs	r3, #10
 80046a2:	71fb      	strb	r3, [r7, #7]
    }
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80046a4:	6838      	ldr	r0, [r7, #0]
 80046a6:	f001 f999 	bl	80059dc <null_ptr_check>
 80046aa:	4603      	mov	r3, r0
 80046ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 80046b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d156      	bne.n	8004766 <bme280_set_regs+0xdc>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d053      	beq.n	8004766 <bme280_set_regs+0xdc>
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d050      	beq.n	8004766 <bme280_set_regs+0xdc>
    {
        if (len != 0)
 80046c4:	79fb      	ldrb	r3, [r7, #7]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d049      	beq.n	800475e <bme280_set_regs+0xd4>
        {
            temp_buff[0] = reg_data[0];
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	753b      	strb	r3, [r7, #20]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	789b      	ldrb	r3, [r3, #2]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d01a      	beq.n	800470e <bme280_set_regs+0x84>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80046d8:	2300      	movs	r3, #0
 80046da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046de:	e011      	b.n	8004704 <bme280_set_regs+0x7a>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80046e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	4413      	add	r3, r2
 80046e8:	781a      	ldrb	r2, [r3, #0]
 80046ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80046ee:	68f9      	ldr	r1, [r7, #12]
 80046f0:	440b      	add	r3, r1
 80046f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80046fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80046fe:	3301      	adds	r3, #1
 8004700:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004704:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004708:	79fb      	ldrb	r3, [r7, #7]
 800470a:	429a      	cmp	r2, r3
 800470c:	d3e8      	bcc.n	80046e0 <bme280_set_regs+0x56>
                }
            }

            /* Burst write mode */
            if (len > 1)
 800470e:	79fb      	ldrb	r3, [r7, #7]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d90d      	bls.n	8004730 <bme280_set_regs+0xa6>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8004714:	79fb      	ldrb	r3, [r7, #7]
 8004716:	f107 0114 	add.w	r1, r7, #20
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f001 f818 	bl	8005752 <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 8004722:	79fb      	ldrb	r3, [r7, #7]
 8004724:	b29b      	uxth	r3, r3
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	b29b      	uxth	r3, r3
 800472a:	3b01      	subs	r3, #1
 800472c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800472e:	e001      	b.n	8004734 <bme280_set_regs+0xaa>
            }
            else
            {
                temp_len = len;
 8004730:	79fb      	ldrb	r3, [r7, #7]
 8004732:	85bb      	strh	r3, [r7, #44]	; 0x2c
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	689c      	ldr	r4, [r3, #8]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	7858      	ldrb	r0, [r3, #1]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	7819      	ldrb	r1, [r3, #0]
 8004740:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004742:	f107 0214 	add.w	r2, r7, #20
 8004746:	47a0      	blx	r4
 8004748:	4603      	mov	r3, r0
 800474a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            /* Check for communication error */
            if (rslt != BME280_OK)
 800474e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00b      	beq.n	800476e <bme280_set_regs+0xe4>
            {
                rslt = BME280_E_COMM_FAIL;
 8004756:	23fc      	movs	r3, #252	; 0xfc
 8004758:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 800475c:	e007      	b.n	800476e <bme280_set_regs+0xe4>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 800475e:	23fd      	movs	r3, #253	; 0xfd
 8004760:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 8004764:	e003      	b.n	800476e <bme280_set_regs+0xe4>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8004766:	23ff      	movs	r3, #255	; 0xff
 8004768:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800476c:	e000      	b.n	8004770 <bme280_set_regs+0xe6>
        if (len != 0)
 800476e:	bf00      	nop
    }

    return rslt;
 8004770:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004774:	4618      	mov	r0, r3
 8004776:	3734      	adds	r7, #52	; 0x34
 8004778:	46bd      	mov	sp, r7
 800477a:	bd90      	pop	{r4, r7, pc}

0800477c <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	4603      	mov	r3, r0
 8004784:	6039      	str	r1, [r7, #0]
 8004786:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t sensor_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8004788:	6838      	ldr	r0, [r7, #0]
 800478a:	f001 f927 	bl	80059dc <null_ptr_check>
 800478e:	4603      	mov	r3, r0
 8004790:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8004792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d13f      	bne.n	800481a <bme280_set_sensor_settings+0x9e>
    {
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 800479a:	f107 030e 	add.w	r3, r7, #14
 800479e:	6839      	ldr	r1, [r7, #0]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 f874 	bl	800488e <bme280_get_sensor_mode>
 80047a6:	4603      	mov	r3, r0
 80047a8:	73fb      	strb	r3, [r7, #15]
        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 80047aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d107      	bne.n	80047c2 <bme280_set_sensor_settings+0x46>
 80047b2:	7bbb      	ldrb	r3, [r7, #14]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d004      	beq.n	80047c2 <bme280_set_sensor_settings+0x46>
        {
            rslt = put_device_to_sleep(dev);
 80047b8:	6838      	ldr	r0, [r7, #0]
 80047ba:	f000 fb74 	bl	8004ea6 <put_device_to_sleep>
 80047be:	4603      	mov	r3, r0
 80047c0:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BME280_OK)
 80047c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d127      	bne.n	800481a <bme280_set_sensor_settings+0x9e>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 80047ca:	79fb      	ldrb	r3, [r7, #7]
 80047cc:	4619      	mov	r1, r3
 80047ce:	2007      	movs	r0, #7
 80047d0:	f001 f8e8 	bl	80059a4 <are_settings_changed>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d009      	beq.n	80047ee <bme280_set_sensor_settings+0x72>
            {
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80047e0:	79fb      	ldrb	r3, [r7, #7]
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 f9b0 	bl	8004b4a <set_osr_settings>
 80047ea:	4603      	mov	r3, r0
 80047ec:	73fb      	strb	r3, [r7, #15]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 80047ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d111      	bne.n	800481a <bme280_set_sensor_settings+0x9e>
 80047f6:	79fb      	ldrb	r3, [r7, #7]
 80047f8:	4619      	mov	r1, r3
 80047fa:	2018      	movs	r0, #24
 80047fc:	f001 f8d2 	bl	80059a4 <are_settings_changed>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d009      	beq.n	800481a <bme280_set_sensor_settings+0x9e>
            {
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800480c:	79fb      	ldrb	r3, [r7, #7]
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	4618      	mov	r0, r3
 8004812:	f000 fa37 	bl	8004c84 <set_filter_standby_settings>
 8004816:	4603      	mov	r3, r0
 8004818:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800481a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b084      	sub	sp, #16
 800482a:	af00      	add	r7, sp, #0
 800482c:	4603      	mov	r3, r0
 800482e:	6039      	str	r1, [r7, #0]
 8004830:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8004832:	6838      	ldr	r0, [r7, #0]
 8004834:	f001 f8d2 	bl	80059dc <null_ptr_check>
 8004838:	4603      	mov	r3, r0
 800483a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME280_OK)
 800483c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d11e      	bne.n	8004882 <bme280_set_sensor_mode+0x5c>
    {
        rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8004844:	f107 030e 	add.w	r3, r7, #14
 8004848:	6839      	ldr	r1, [r7, #0]
 800484a:	4618      	mov	r0, r3
 800484c:	f000 f81f 	bl	800488e <bme280_get_sensor_mode>
 8004850:	4603      	mov	r3, r0
 8004852:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode
         */
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8004854:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d107      	bne.n	800486c <bme280_set_sensor_mode+0x46>
 800485c:	7bbb      	ldrb	r3, [r7, #14]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d004      	beq.n	800486c <bme280_set_sensor_mode+0x46>
        {
            rslt = put_device_to_sleep(dev);
 8004862:	6838      	ldr	r0, [r7, #0]
 8004864:	f000 fb1f 	bl	8004ea6 <put_device_to_sleep>
 8004868:	4603      	mov	r3, r0
 800486a:	73fb      	strb	r3, [r7, #15]
        }

        /* Set the power mode */
        if (rslt == BME280_OK)
 800486c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d106      	bne.n	8004882 <bme280_set_sensor_mode+0x5c>
        {
            rslt = write_power_mode(sensor_mode, dev);
 8004874:	79fb      	ldrb	r3, [r7, #7]
 8004876:	6839      	ldr	r1, [r7, #0]
 8004878:	4618      	mov	r0, r3
 800487a:	f000 fae1 	bl	8004e40 <write_power_mode>
 800487e:	4603      	mov	r3, r0
 8004880:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004882:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b084      	sub	sp, #16
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
 8004896:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8004898:	6838      	ldr	r0, [r7, #0]
 800489a:	f001 f89f 	bl	80059dc <null_ptr_check>
 800489e:	4603      	mov	r3, r0
 80048a0:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME280_OK)
 80048a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10e      	bne.n	80048c8 <bme280_get_sensor_mode+0x3a>
    {
        /* Read the power mode register */
        rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2201      	movs	r2, #1
 80048ae:	6879      	ldr	r1, [r7, #4]
 80048b0:	20f4      	movs	r0, #244	; 0xf4
 80048b2:	f7ff feba 	bl	800462a <bme280_get_regs>
 80048b6:	4603      	mov	r3, r0
 80048b8:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80048c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_RESET_ADDR;
 80048dc:	23e0      	movs	r3, #224	; 0xe0
 80048de:	737b      	strb	r3, [r7, #13]
    uint8_t status_reg = 0;
 80048e0:	2300      	movs	r3, #0
 80048e2:	733b      	strb	r3, [r7, #12]
    uint8_t try_run = 5;
 80048e4:	2305      	movs	r3, #5
 80048e6:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 80048e8:	23b6      	movs	r3, #182	; 0xb6
 80048ea:	72fb      	strb	r3, [r7, #11]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f001 f875 	bl	80059dc <null_ptr_check>
 80048f2:	4603      	mov	r3, r0
 80048f4:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 80048f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d12f      	bne.n	800495e <bme280_soft_reset+0x8a>
    {
        /* Write the soft reset command in the sensor */
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80048fe:	f107 010b 	add.w	r1, r7, #11
 8004902:	f107 000d 	add.w	r0, r7, #13
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f7ff febe 	bl	800468a <bme280_set_regs>
 800490e:	4603      	mov	r3, r0
 8004910:	73fb      	strb	r3, [r7, #15]

        if (rslt == BME280_OK)
 8004912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d121      	bne.n	800495e <bme280_soft_reset+0x8a>
        {
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                dev->delay_ms(2);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	2002      	movs	r0, #2
 8004920:	4798      	blx	r3
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 8004922:	f107 010c 	add.w	r1, r7, #12
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	20f3      	movs	r0, #243	; 0xf3
 800492c:	f7ff fe7d 	bl	800462a <bme280_get_regs>
 8004930:	4603      	mov	r3, r0
 8004932:	73fb      	strb	r3, [r7, #15]
            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 8004934:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d109      	bne.n	8004950 <bme280_soft_reset+0x7c>
 800493c:	7bbb      	ldrb	r3, [r7, #14]
 800493e:	1e5a      	subs	r2, r3, #1
 8004940:	73ba      	strb	r2, [r7, #14]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d004      	beq.n	8004950 <bme280_soft_reset+0x7c>
 8004946:	7b3b      	ldrb	r3, [r7, #12]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1e4      	bne.n	800491a <bme280_soft_reset+0x46>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 8004950:	7b3b      	ldrb	r3, [r7, #12]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <bme280_soft_reset+0x8a>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 800495a:	23fa      	movs	r3, #250	; 0xfa
 800495c:	73fb      	strb	r3, [r7, #15]
            }

        }
    }

    return rslt;
 800495e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004962:	4618      	mov	r0, r3
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b08a      	sub	sp, #40	; 0x28
 800496e:	af00      	add	r7, sp, #0
 8004970:	4603      	mov	r3, r0
 8004972:	60b9      	str	r1, [r7, #8]
 8004974:	607a      	str	r2, [r7, #4]
 8004976:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 8004978:	2300      	movs	r3, #0
 800497a:	61fb      	str	r3, [r7, #28]
 800497c:	2300      	movs	r3, #0
 800497e:	623b      	str	r3, [r7, #32]
    struct bme280_uncomp_data uncomp_data = { 0 };
 8004980:	f107 0310 	add.w	r3, r7, #16
 8004984:	2200      	movs	r2, #0
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	605a      	str	r2, [r3, #4]
 800498a:	609a      	str	r2, [r3, #8]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f001 f825 	bl	80059dc <null_ptr_check>
 8004992:	4603      	mov	r3, r0
 8004994:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if ((rslt == BME280_OK) && (comp_data != NULL))
 8004998:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800499c:	2b00      	cmp	r3, #0
 800499e:	d124      	bne.n	80049ea <bme280_get_sensor_data+0x80>
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d021      	beq.n	80049ea <bme280_get_sensor_data+0x80>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 80049a6:	f107 011c 	add.w	r1, r7, #28
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2208      	movs	r2, #8
 80049ae:	20f7      	movs	r0, #247	; 0xf7
 80049b0:	f7ff fe3b 	bl	800462a <bme280_get_regs>
 80049b4:	4603      	mov	r3, r0
 80049b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 80049ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d116      	bne.n	80049f0 <bme280_get_sensor_data+0x86>
        {
            /* Parse the read data from the sensor */
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 80049c2:	f107 0210 	add.w	r2, r7, #16
 80049c6:	f107 031c 	add.w	r3, r7, #28
 80049ca:	4611      	mov	r1, r2
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 f815 	bl	80049fc <bme280_parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	3310      	adds	r3, #16
 80049d6:	f107 0110 	add.w	r1, r7, #16
 80049da:	7bf8      	ldrb	r0, [r7, #15]
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	f000 f853 	bl	8004a88 <bme280_compensate_data>
 80049e2:	4603      	mov	r3, r0
 80049e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 80049e8:	e002      	b.n	80049f0 <bme280_get_sensor_data+0x86>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80049ea:	23ff      	movs	r3, #255	; 0xff
 80049ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 80049f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3728      	adds	r7, #40	; 0x28
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	031b      	lsls	r3, r3, #12
 8004a0c:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	3301      	adds	r3, #1
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	011b      	lsls	r3, r3, #4
 8004a16:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3302      	adds	r3, #2
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	091b      	lsrs	r3, r3, #4
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << 12;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3303      	adds	r3, #3
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	031b      	lsls	r3, r3, #12
 8004a3a:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 4;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3304      	adds	r3, #4
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	011b      	lsls	r3, r3, #4
 8004a44:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	3305      	adds	r3, #5
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	091b      	lsrs	r3, r3, #4
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	431a      	orrs	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for humidity data */
    data_msb = (uint32_t)reg_data[6] << 8;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3306      	adds	r3, #6
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	021b      	lsls	r3, r3, #8
 8004a68:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[7];
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	3307      	adds	r3, #7
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	613b      	str	r3, [r7, #16]
    uncomp_data->humidity = data_msb | data_lsb;
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	431a      	orrs	r2, r3
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	609a      	str	r2, [r3, #8]
}
 8004a7c:	bf00      	nop
 8004a7e:	371c      	adds	r7, #28
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	607a      	str	r2, [r7, #4]
 8004a92:	603b      	str	r3, [r7, #0]
 8004a94:	4603      	mov	r3, r0
 8004a96:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_OK;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d04b      	beq.n	8004b3a <bme280_compensate_data+0xb2>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d048      	beq.n	8004b3a <bme280_compensate_data+0xb2>
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d045      	beq.n	8004b3a <bme280_compensate_data+0xb2>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8004aae:	6879      	ldr	r1, [r7, #4]
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	f04f 0300 	mov.w	r3, #0
 8004ab8:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 8004abc:	6879      	ldr	r1, [r7, #4]
 8004abe:	f04f 0200 	mov.w	r2, #0
 8004ac2:	f04f 0300 	mov.w	r3, #0
 8004ac6:	e9c1 2300 	strd	r2, r3, [r1]
        comp_data->humidity = 0;
 8004aca:	6879      	ldr	r1, [r7, #4]
 8004acc:	f04f 0200 	mov.w	r2, #0
 8004ad0:	f04f 0300 	mov.w	r3, #0
 8004ad4:	e9c1 2304 	strd	r2, r3, [r1, #16]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 8004ad8:	7bfb      	ldrb	r3, [r7, #15]
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <bme280_compensate_data+0x70>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8004ae2:	6839      	ldr	r1, [r7, #0]
 8004ae4:	68b8      	ldr	r0, [r7, #8]
 8004ae6:	f000 fa2b 	bl	8004f40 <compensate_temperature>
 8004aea:	eeb0 7a40 	vmov.f32	s14, s0
 8004aee:	eef0 7a60 	vmov.f32	s15, s1
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	ed83 7b02 	vstr	d7, [r3, #8]
        }
        if (sensor_comp & BME280_PRESS)
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00a      	beq.n	8004b18 <bme280_compensate_data+0x90>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8004b02:	6839      	ldr	r1, [r7, #0]
 8004b04:	68b8      	ldr	r0, [r7, #8]
 8004b06:	f000 faef 	bl	80050e8 <compensate_pressure>
 8004b0a:	eeb0 7a40 	vmov.f32	s14, s0
 8004b0e:	eef0 7a60 	vmov.f32	s15, s1
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	ed83 7b00 	vstr	d7, [r3]
        }
        if (sensor_comp & BME280_HUM)
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
 8004b1a:	f003 0304 	and.w	r3, r3, #4
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00d      	beq.n	8004b3e <bme280_compensate_data+0xb6>
        {
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8004b22:	6839      	ldr	r1, [r7, #0]
 8004b24:	68b8      	ldr	r0, [r7, #8]
 8004b26:	f000 fcaf 	bl	8005488 <compensate_humidity>
 8004b2a:	eeb0 7a40 	vmov.f32	s14, s0
 8004b2e:	eef0 7a60 	vmov.f32	s15, s1
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	ed83 7b04 	vstr	d7, [r3, #16]
        if (sensor_comp & BME280_HUM)
 8004b38:	e001      	b.n	8004b3e <bme280_compensate_data+0xb6>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8004b3a:	23ff      	movs	r3, #255	; 0xff
 8004b3c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004b3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3718      	adds	r7, #24
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <set_osr_settings>:
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings,
                               const struct bme280_settings *settings,
                               const struct bme280_dev *dev)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b086      	sub	sp, #24
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	4603      	mov	r3, r0
 8004b52:	60b9      	str	r1, [r7, #8]
 8004b54:	607a      	str	r2, [r7, #4]
 8004b56:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	75fb      	strb	r3, [r7, #23]

    if (desired_settings & BME280_OSR_HUM_SEL)
 8004b5c:	7bfb      	ldrb	r3, [r7, #15]
 8004b5e:	f003 0304 	and.w	r3, r3, #4
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d005      	beq.n	8004b72 <set_osr_settings+0x28>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 8004b66:	6879      	ldr	r1, [r7, #4]
 8004b68:	68b8      	ldr	r0, [r7, #8]
 8004b6a:	f000 f815 	bl	8004b98 <set_osr_humidity_settings>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	75fb      	strb	r3, [r7, #23]
    }
    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8004b72:	7bfb      	ldrb	r3, [r7, #15]
 8004b74:	f003 0303 	and.w	r3, r3, #3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d007      	beq.n	8004b8c <set_osr_settings+0x42>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	68b9      	ldr	r1, [r7, #8]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 f842 	bl	8004c0c <set_osr_press_temp_settings>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004b8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3718      	adds	r7, #24
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8004ba2:	23f2      	movs	r3, #242	; 0xf2
 8004ba4:	733b      	strb	r3, [r7, #12]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	789b      	ldrb	r3, [r3, #2]
 8004baa:	f003 0307 	and.w	r3, r3, #7
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	73bb      	strb	r3, [r7, #14]

    /* Write the humidity control value in the register */
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8004bb2:	f107 010e 	add.w	r1, r7, #14
 8004bb6:	f107 000c 	add.w	r0, r7, #12
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f7ff fd64 	bl	800468a <bme280_set_regs>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	73fb      	strb	r3, [r7, #15]

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 8004bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d118      	bne.n	8004c00 <set_osr_humidity_settings+0x68>
    {
        reg_addr = BME280_CTRL_MEAS_ADDR;
 8004bce:	23f4      	movs	r3, #244	; 0xf4
 8004bd0:	733b      	strb	r3, [r7, #12]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8004bd2:	7b38      	ldrb	r0, [r7, #12]
 8004bd4:	f107 010d 	add.w	r1, r7, #13
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f7ff fd25 	bl	800462a <bme280_get_regs>
 8004be0:	4603      	mov	r3, r0
 8004be2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME280_OK)
 8004be4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d109      	bne.n	8004c00 <set_osr_humidity_settings+0x68>
        {
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8004bec:	f107 010d 	add.w	r1, r7, #13
 8004bf0:	f107 000c 	add.w	r0, r7, #12
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f7ff fd47 	bl	800468a <bme280_set_regs>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          const struct bme280_dev *dev)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	4603      	mov	r3, r0
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
 8004c18:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8004c1a:	23f4      	movs	r3, #244	; 0xf4
 8004c1c:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8004c1e:	7db8      	ldrb	r0, [r7, #22]
 8004c20:	f107 0115 	add.w	r1, r7, #21
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f7ff fcff 	bl	800462a <bme280_get_regs>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	75fb      	strb	r3, [r7, #23]
    if (rslt == BME280_OK)
 8004c30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d11f      	bne.n	8004c78 <set_osr_press_temp_settings+0x6c>
    {
        if (desired_settings & BME280_OSR_PRESS_SEL)
 8004c38:	7bfb      	ldrb	r3, [r7, #15]
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d005      	beq.n	8004c4e <set_osr_press_temp_settings+0x42>
        {
            fill_osr_press_settings(&reg_data, settings);
 8004c42:	f107 0315 	add.w	r3, r7, #21
 8004c46:	68b9      	ldr	r1, [r7, #8]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f000 f88e 	bl	8004d6a <fill_osr_press_settings>
        }
        if (desired_settings & BME280_OSR_TEMP_SEL)
 8004c4e:	7bfb      	ldrb	r3, [r7, #15]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d005      	beq.n	8004c64 <set_osr_press_temp_settings+0x58>
        {
            fill_osr_temp_settings(&reg_data, settings);
 8004c58:	f107 0315 	add.w	r3, r7, #21
 8004c5c:	68b9      	ldr	r1, [r7, #8]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 f8a0 	bl	8004da4 <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8004c64:	f107 0115 	add.w	r1, r7, #21
 8004c68:	f107 0016 	add.w	r0, r7, #22
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f7ff fd0b 	bl	800468a <bme280_set_regs>
 8004c74:	4603      	mov	r3, r0
 8004c76:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004c78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3718      	adds	r7, #24
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          const struct bme280_dev *dev)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
 8004c90:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 8004c92:	23f5      	movs	r3, #245	; 0xf5
 8004c94:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8004c96:	7db8      	ldrb	r0, [r7, #22]
 8004c98:	f107 0115 	add.w	r1, r7, #21
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f7ff fcc3 	bl	800462a <bme280_get_regs>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	75fb      	strb	r3, [r7, #23]
    if (rslt == BME280_OK)
 8004ca8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d11f      	bne.n	8004cf0 <set_filter_standby_settings+0x6c>
    {
        if (desired_settings & BME280_FILTER_SEL)
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
 8004cb2:	f003 0308 	and.w	r3, r3, #8
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d005      	beq.n	8004cc6 <set_filter_standby_settings+0x42>
        {
            fill_filter_settings(&reg_data, settings);
 8004cba:	f107 0315 	add.w	r3, r7, #21
 8004cbe:	68b9      	ldr	r1, [r7, #8]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f000 f81b 	bl	8004cfc <fill_filter_settings>
        }
        if (desired_settings & BME280_STANDBY_SEL)
 8004cc6:	7bfb      	ldrb	r3, [r7, #15]
 8004cc8:	f003 0310 	and.w	r3, r3, #16
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d005      	beq.n	8004cdc <set_filter_standby_settings+0x58>
        {
            fill_standby_settings(&reg_data, settings);
 8004cd0:	f107 0315 	add.w	r3, r7, #21
 8004cd4:	68b9      	ldr	r1, [r7, #8]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 f82d 	bl	8004d36 <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8004cdc:	f107 0115 	add.w	r1, r7, #21
 8004ce0:	f107 0016 	add.w	r0, r7, #22
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f7ff fccf 	bl	800468a <bme280_set_regs>
 8004cec:	4603      	mov	r3, r0
 8004cee:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004cf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3718      	adds	r7, #24
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	b25b      	sxtb	r3, r3
 8004d0c:	f023 031c 	bic.w	r3, r3, #28
 8004d10:	b25a      	sxtb	r2, r3
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	78db      	ldrb	r3, [r3, #3]
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	b25b      	sxtb	r3, r3
 8004d1a:	f003 031c 	and.w	r3, r3, #28
 8004d1e:	b25b      	sxtb	r3, r3
 8004d20:	4313      	orrs	r3, r2
 8004d22:	b25b      	sxtb	r3, r3
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	701a      	strb	r2, [r3, #0]
}
 8004d2a:	bf00      	nop
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8004d36:	b480      	push	{r7}
 8004d38:	b083      	sub	sp, #12
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
 8004d3e:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	b25b      	sxtb	r3, r3
 8004d46:	f003 031f 	and.w	r3, r3, #31
 8004d4a:	b25a      	sxtb	r2, r3
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	791b      	ldrb	r3, [r3, #4]
 8004d50:	015b      	lsls	r3, r3, #5
 8004d52:	b25b      	sxtb	r3, r3
 8004d54:	4313      	orrs	r3, r2
 8004d56:	b25b      	sxtb	r3, r3
 8004d58:	b2da      	uxtb	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	701a      	strb	r2, [r3, #0]
}
 8004d5e:	bf00      	nop
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
 8004d72:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	b25b      	sxtb	r3, r3
 8004d7a:	f023 031c 	bic.w	r3, r3, #28
 8004d7e:	b25a      	sxtb	r2, r3
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	b25b      	sxtb	r3, r3
 8004d88:	f003 031c 	and.w	r3, r3, #28
 8004d8c:	b25b      	sxtb	r3, r3
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	b25b      	sxtb	r3, r3
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	701a      	strb	r2, [r3, #0]
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	b25b      	sxtb	r3, r3
 8004db4:	f003 031f 	and.w	r3, r3, #31
 8004db8:	b25a      	sxtb	r2, r3
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	785b      	ldrb	r3, [r3, #1]
 8004dbe:	015b      	lsls	r3, r3, #5
 8004dc0:	b25b      	sxtb	r3, r3
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	b25b      	sxtb	r3, r3
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	701a      	strb	r2, [r3, #0]
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	b2da      	uxtb	r2, r3
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	3302      	adds	r3, #2
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	109b      	asrs	r3, r3, #2
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	f003 0307 	and.w	r3, r3, #7
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	3302      	adds	r3, #2
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	095b      	lsrs	r3, r3, #5
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	3303      	adds	r3, #3
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	109b      	asrs	r3, r3, #2
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	f003 0307 	and.w	r3, r3, #7
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	3303      	adds	r3, #3
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	095b      	lsrs	r3, r3, #5
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	711a      	strb	r2, [r3, #4]
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	4603      	mov	r3, r0
 8004e48:	6039      	str	r1, [r7, #0]
 8004e4a:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8004e4c:	23f4      	movs	r3, #244	; 0xf4
 8004e4e:	73bb      	strb	r3, [r7, #14]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8004e50:	7bb8      	ldrb	r0, [r7, #14]
 8004e52:	f107 010d 	add.w	r1, r7, #13
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f7ff fbe6 	bl	800462a <bme280_get_regs>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BME280_OK)
 8004e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d117      	bne.n	8004e9a <write_power_mode+0x5a>
    {
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8004e6a:	7b7b      	ldrb	r3, [r7, #13]
 8004e6c:	b25b      	sxtb	r3, r3
 8004e6e:	f023 0303 	bic.w	r3, r3, #3
 8004e72:	b25a      	sxtb	r2, r3
 8004e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e78:	f003 0303 	and.w	r3, r3, #3
 8004e7c:	b25b      	sxtb	r3, r3
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	b25b      	sxtb	r3, r3
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8004e86:	f107 010d 	add.w	r1, r7, #13
 8004e8a:	f107 000e 	add.w	r0, r7, #14
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f7ff fbfa 	bl	800468a <bme280_set_regs>
 8004e96:	4603      	mov	r3, r0
 8004e98:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b086      	sub	sp, #24
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];
    struct bme280_settings settings;

    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8004eae:	f107 0110 	add.w	r1, r7, #16
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2204      	movs	r2, #4
 8004eb6:	20f2      	movs	r0, #242	; 0xf2
 8004eb8:	f7ff fbb7 	bl	800462a <bme280_get_regs>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	75fb      	strb	r3, [r7, #23]
    if (rslt == BME280_OK)
 8004ec0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d118      	bne.n	8004efa <put_device_to_sleep+0x54>
    {
        parse_device_settings(reg_data, &settings);
 8004ec8:	f107 0208 	add.w	r2, r7, #8
 8004ecc:	f107 0310 	add.w	r3, r7, #16
 8004ed0:	4611      	mov	r1, r2
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7ff ff80 	bl	8004dd8 <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7ff fcfb 	bl	80048d4 <bme280_soft_reset>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	75fb      	strb	r3, [r7, #23]
        if (rslt == BME280_OK)
 8004ee2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d107      	bne.n	8004efa <put_device_to_sleep+0x54>
        {
            rslt = reload_device_settings(&settings, dev);
 8004eea:	f107 0308 	add.w	r3, r7, #8
 8004eee:	6879      	ldr	r1, [r7, #4]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 f808 	bl	8004f06 <reload_device_settings>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8004efa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3718      	adds	r7, #24
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b084      	sub	sp, #16
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	201f      	movs	r0, #31
 8004f16:	f7ff fe18 	bl	8004b4a <set_osr_settings>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME280_OK)
 8004f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d106      	bne.n	8004f34 <reload_device_settings+0x2e>
    {
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8004f26:	683a      	ldr	r2, [r7, #0]
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	201f      	movs	r0, #31
 8004f2c:	f7ff feaa 	bl	8004c84 <set_filter_standby_settings>
 8004f30:	4603      	mov	r3, r0
 8004f32:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <compensate_temperature>:
/*!
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data, struct bme280_calib_data *calib_data)
{
 8004f40:	b5b0      	push	{r4, r5, r7, lr}
 8004f42:	b08c      	sub	sp, #48	; 0x30
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double temperature;
    double temperature_min = -40;
 8004f4a:	f04f 0200 	mov.w	r2, #0
 8004f4e:	4b5f      	ldr	r3, [pc, #380]	; (80050cc <compensate_temperature+0x18c>)
 8004f50:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double temperature_max = 85;
 8004f54:	f04f 0200 	mov.w	r2, #0
 8004f58:	4b5d      	ldr	r3, [pc, #372]	; (80050d0 <compensate_temperature+0x190>)
 8004f5a:	e9c7 2306 	strd	r2, r3, [r7, #24]

    var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_t1) / 1024.0;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fb fad6 	bl	8000514 <__aeabi_ui2d>
 8004f68:	f04f 0200 	mov.w	r2, #0
 8004f6c:	4b59      	ldr	r3, [pc, #356]	; (80050d4 <compensate_temperature+0x194>)
 8004f6e:	f7fb fc75 	bl	800085c <__aeabi_ddiv>
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	4614      	mov	r4, r2
 8004f78:	461d      	mov	r5, r3
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	881b      	ldrh	r3, [r3, #0]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fb fac8 	bl	8000514 <__aeabi_ui2d>
 8004f84:	f04f 0200 	mov.w	r2, #0
 8004f88:	4b53      	ldr	r3, [pc, #332]	; (80050d8 <compensate_temperature+0x198>)
 8004f8a:	f7fb fc67 	bl	800085c <__aeabi_ddiv>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	460b      	mov	r3, r1
 8004f92:	4620      	mov	r0, r4
 8004f94:	4629      	mov	r1, r5
 8004f96:	f7fb f97f 	bl	8000298 <__aeabi_dsub>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = var1 * ((double)calib_data->dig_t2);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7fb fac3 	bl	8000534 <__aeabi_i2d>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004fb6:	f7fb fb27 	bl	8000608 <__aeabi_dmul>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_t1) / 8192.0);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7fb faa4 	bl	8000514 <__aeabi_ui2d>
 8004fcc:	f04f 0200 	mov.w	r2, #0
 8004fd0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8004fd4:	f7fb fc42 	bl	800085c <__aeabi_ddiv>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4614      	mov	r4, r2
 8004fde:	461d      	mov	r5, r3
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7fb fa95 	bl	8000514 <__aeabi_ui2d>
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	4b3b      	ldr	r3, [pc, #236]	; (80050dc <compensate_temperature+0x19c>)
 8004ff0:	f7fb fc34 	bl	800085c <__aeabi_ddiv>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	4629      	mov	r1, r5
 8004ffc:	f7fb f94c 	bl	8000298 <__aeabi_dsub>
 8005000:	4602      	mov	r2, r0
 8005002:	460b      	mov	r3, r1
 8005004:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var2 = (var2 * var2) * ((double)calib_data->dig_t3);
 8005008:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800500c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005010:	f7fb fafa 	bl	8000608 <__aeabi_dmul>
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	4614      	mov	r4, r2
 800501a:	461d      	mov	r5, r3
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005022:	4618      	mov	r0, r3
 8005024:	f7fb fa86 	bl	8000534 <__aeabi_i2d>
 8005028:	4602      	mov	r2, r0
 800502a:	460b      	mov	r3, r1
 800502c:	4620      	mov	r0, r4
 800502e:	4629      	mov	r1, r5
 8005030:	f7fb faea 	bl	8000608 <__aeabi_dmul>
 8005034:	4602      	mov	r2, r0
 8005036:	460b      	mov	r3, r1
 8005038:	e9c7 2302 	strd	r2, r3, [r7, #8]
    calib_data->t_fine = (int32_t)(var1 + var2);
 800503c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005040:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005044:	f7fb f92a 	bl	800029c <__adddf3>
 8005048:	4602      	mov	r2, r0
 800504a:	460b      	mov	r3, r1
 800504c:	4610      	mov	r0, r2
 800504e:	4619      	mov	r1, r3
 8005050:	f7fb fd8a 	bl	8000b68 <__aeabi_d2iz>
 8005054:	4602      	mov	r2, r0
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	625a      	str	r2, [r3, #36]	; 0x24
    temperature = (var1 + var2) / 5120.0;
 800505a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800505e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005062:	f7fb f91b 	bl	800029c <__adddf3>
 8005066:	4602      	mov	r2, r0
 8005068:	460b      	mov	r3, r1
 800506a:	4610      	mov	r0, r2
 800506c:	4619      	mov	r1, r3
 800506e:	f04f 0200 	mov.w	r2, #0
 8005072:	4b1b      	ldr	r3, [pc, #108]	; (80050e0 <compensate_temperature+0x1a0>)
 8005074:	f7fb fbf2 	bl	800085c <__aeabi_ddiv>
 8005078:	4602      	mov	r2, r0
 800507a:	460b      	mov	r3, r1
 800507c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    if (temperature < temperature_min)
 8005080:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005084:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005088:	f7fb fd30 	bl	8000aec <__aeabi_dcmplt>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d004      	beq.n	800509c <compensate_temperature+0x15c>
    {
        temperature = temperature_min;
 8005092:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005096:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800509a:	e00c      	b.n	80050b6 <compensate_temperature+0x176>
    }
    else if (temperature > temperature_max)
 800509c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050a0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80050a4:	f7fb fd40 	bl	8000b28 <__aeabi_dcmpgt>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <compensate_temperature+0x176>
    {
        temperature = temperature_max;
 80050ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050b2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    }

    return temperature;
 80050b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050ba:	ec43 2b17 	vmov	d7, r2, r3
}
 80050be:	eeb0 0a47 	vmov.f32	s0, s14
 80050c2:	eef0 0a67 	vmov.f32	s1, s15
 80050c6:	3730      	adds	r7, #48	; 0x30
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bdb0      	pop	{r4, r5, r7, pc}
 80050cc:	c0440000 	.word	0xc0440000
 80050d0:	40554000 	.word	0x40554000
 80050d4:	40d00000 	.word	0x40d00000
 80050d8:	40900000 	.word	0x40900000
 80050dc:	40c00000 	.word	0x40c00000
 80050e0:	40b40000 	.word	0x40b40000
 80050e4:	00000000 	.word	0x00000000

080050e8 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 80050e8:	b5b0      	push	{r4, r5, r7, lr}
 80050ea:	b08e      	sub	sp, #56	; 0x38
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double var3;
    double pressure;
    double pressure_min = 30000.0;
 80050f2:	a3d9      	add	r3, pc, #868	; (adr r3, 8005458 <compensate_pressure+0x370>)
 80050f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double pressure_max = 110000.0;
 80050fc:	a3d8      	add	r3, pc, #864	; (adr r3, 8005460 <compensate_pressure+0x378>)
 80050fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005102:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510a:	4618      	mov	r0, r3
 800510c:	f7fb fa12 	bl	8000534 <__aeabi_i2d>
 8005110:	f04f 0200 	mov.w	r2, #0
 8005114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005118:	f7fb fba0 	bl	800085c <__aeabi_ddiv>
 800511c:	4602      	mov	r2, r0
 800511e:	460b      	mov	r3, r1
 8005120:	4610      	mov	r0, r2
 8005122:	4619      	mov	r1, r3
 8005124:	f04f 0200 	mov.w	r2, #0
 8005128:	4bc1      	ldr	r3, [pc, #772]	; (8005430 <compensate_pressure+0x348>)
 800512a:	f7fb f8b5 	bl	8000298 <__aeabi_dsub>
 800512e:	4602      	mov	r2, r0
 8005130:	460b      	mov	r3, r1
 8005132:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double)calib_data->dig_p6) / 32768.0;
 8005136:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800513a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800513e:	f7fb fa63 	bl	8000608 <__aeabi_dmul>
 8005142:	4602      	mov	r2, r0
 8005144:	460b      	mov	r3, r1
 8005146:	4614      	mov	r4, r2
 8005148:	461d      	mov	r5, r3
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005150:	4618      	mov	r0, r3
 8005152:	f7fb f9ef 	bl	8000534 <__aeabi_i2d>
 8005156:	4602      	mov	r2, r0
 8005158:	460b      	mov	r3, r1
 800515a:	4620      	mov	r0, r4
 800515c:	4629      	mov	r1, r5
 800515e:	f7fb fa53 	bl	8000608 <__aeabi_dmul>
 8005162:	4602      	mov	r2, r0
 8005164:	460b      	mov	r3, r1
 8005166:	4610      	mov	r0, r2
 8005168:	4619      	mov	r1, r3
 800516a:	f04f 0200 	mov.w	r2, #0
 800516e:	4bb1      	ldr	r3, [pc, #708]	; (8005434 <compensate_pressure+0x34c>)
 8005170:	f7fb fb74 	bl	800085c <__aeabi_ddiv>
 8005174:	4602      	mov	r2, r0
 8005176:	460b      	mov	r3, r1
 8005178:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double)calib_data->dig_p5) * 2.0;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005182:	4618      	mov	r0, r3
 8005184:	f7fb f9d6 	bl	8000534 <__aeabi_i2d>
 8005188:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800518c:	f7fb fa3c 	bl	8000608 <__aeabi_dmul>
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	4610      	mov	r0, r2
 8005196:	4619      	mov	r1, r3
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	f7fb f87e 	bl	800029c <__adddf3>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80051a8:	f7fb f878 	bl	800029c <__adddf3>
 80051ac:	4602      	mov	r2, r0
 80051ae:	460b      	mov	r3, r1
 80051b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double)calib_data->dig_p4) * 65536.0);
 80051b4:	f04f 0200 	mov.w	r2, #0
 80051b8:	4b9f      	ldr	r3, [pc, #636]	; (8005438 <compensate_pressure+0x350>)
 80051ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80051be:	f7fb fb4d 	bl	800085c <__aeabi_ddiv>
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	4614      	mov	r4, r2
 80051c8:	461d      	mov	r5, r3
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7fb f9af 	bl	8000534 <__aeabi_i2d>
 80051d6:	f04f 0200 	mov.w	r2, #0
 80051da:	4b98      	ldr	r3, [pc, #608]	; (800543c <compensate_pressure+0x354>)
 80051dc:	f7fb fa14 	bl	8000608 <__aeabi_dmul>
 80051e0:	4602      	mov	r2, r0
 80051e2:	460b      	mov	r3, r1
 80051e4:	4620      	mov	r0, r4
 80051e6:	4629      	mov	r1, r5
 80051e8:	f7fb f858 	bl	800029c <__adddf3>
 80051ec:	4602      	mov	r2, r0
 80051ee:	460b      	mov	r3, r1
 80051f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var3 = ((double)calib_data->dig_p3) * var1 * var1 / 524288.0;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7fb f99a 	bl	8000534 <__aeabi_i2d>
 8005200:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005204:	f7fb fa00 	bl	8000608 <__aeabi_dmul>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	4610      	mov	r0, r2
 800520e:	4619      	mov	r1, r3
 8005210:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005214:	f7fb f9f8 	bl	8000608 <__aeabi_dmul>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	4610      	mov	r0, r2
 800521e:	4619      	mov	r1, r3
 8005220:	f04f 0200 	mov.w	r2, #0
 8005224:	4b86      	ldr	r3, [pc, #536]	; (8005440 <compensate_pressure+0x358>)
 8005226:	f7fb fb19 	bl	800085c <__aeabi_ddiv>
 800522a:	4602      	mov	r2, r0
 800522c:	460b      	mov	r3, r1
 800522e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var1 = (var3 + ((double)calib_data->dig_p2) * var1) / 524288.0;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005238:	4618      	mov	r0, r3
 800523a:	f7fb f97b 	bl	8000534 <__aeabi_i2d>
 800523e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005242:	f7fb f9e1 	bl	8000608 <__aeabi_dmul>
 8005246:	4602      	mov	r2, r0
 8005248:	460b      	mov	r3, r1
 800524a:	4610      	mov	r0, r2
 800524c:	4619      	mov	r1, r3
 800524e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005252:	f7fb f823 	bl	800029c <__adddf3>
 8005256:	4602      	mov	r2, r0
 8005258:	460b      	mov	r3, r1
 800525a:	4610      	mov	r0, r2
 800525c:	4619      	mov	r1, r3
 800525e:	f04f 0200 	mov.w	r2, #0
 8005262:	4b77      	ldr	r3, [pc, #476]	; (8005440 <compensate_pressure+0x358>)
 8005264:	f7fb fafa 	bl	800085c <__aeabi_ddiv>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_p1);
 8005270:	f04f 0200 	mov.w	r2, #0
 8005274:	4b6f      	ldr	r3, [pc, #444]	; (8005434 <compensate_pressure+0x34c>)
 8005276:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800527a:	f7fb faef 	bl	800085c <__aeabi_ddiv>
 800527e:	4602      	mov	r2, r0
 8005280:	460b      	mov	r3, r1
 8005282:	4610      	mov	r0, r2
 8005284:	4619      	mov	r1, r3
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	4b6e      	ldr	r3, [pc, #440]	; (8005444 <compensate_pressure+0x35c>)
 800528c:	f7fb f806 	bl	800029c <__adddf3>
 8005290:	4602      	mov	r2, r0
 8005292:	460b      	mov	r3, r1
 8005294:	4614      	mov	r4, r2
 8005296:	461d      	mov	r5, r3
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	88db      	ldrh	r3, [r3, #6]
 800529c:	4618      	mov	r0, r3
 800529e:	f7fb f939 	bl	8000514 <__aeabi_ui2d>
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	4620      	mov	r0, r4
 80052a8:	4629      	mov	r1, r5
 80052aa:	f7fb f9ad 	bl	8000608 <__aeabi_dmul>
 80052ae:	4602      	mov	r2, r0
 80052b0:	460b      	mov	r3, r1
 80052b2:	e9c7 2306 	strd	r2, r3, [r7, #24]

    /* avoid exception caused by division by zero */
    if (var1 > (0.0))
 80052b6:	f04f 0200 	mov.w	r2, #0
 80052ba:	f04f 0300 	mov.w	r3, #0
 80052be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80052c2:	f7fb fc31 	bl	8000b28 <__aeabi_dcmpgt>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 80cd 	beq.w	8005468 <compensate_pressure+0x380>
    {
        pressure = 1048576.0 - (double) uncomp_data->pressure;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fb f91e 	bl	8000514 <__aeabi_ui2d>
 80052d8:	4602      	mov	r2, r0
 80052da:	460b      	mov	r3, r1
 80052dc:	f04f 0000 	mov.w	r0, #0
 80052e0:	4959      	ldr	r1, [pc, #356]	; (8005448 <compensate_pressure+0x360>)
 80052e2:	f7fa ffd9 	bl	8000298 <__aeabi_dsub>
 80052e6:	4602      	mov	r2, r0
 80052e8:	460b      	mov	r3, r1
 80052ea:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 80052ee:	f04f 0200 	mov.w	r2, #0
 80052f2:	4b56      	ldr	r3, [pc, #344]	; (800544c <compensate_pressure+0x364>)
 80052f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80052f8:	f7fb fab0 	bl	800085c <__aeabi_ddiv>
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005304:	f7fa ffc8 	bl	8000298 <__aeabi_dsub>
 8005308:	4602      	mov	r2, r0
 800530a:	460b      	mov	r3, r1
 800530c:	4610      	mov	r0, r2
 800530e:	4619      	mov	r1, r3
 8005310:	a345      	add	r3, pc, #276	; (adr r3, 8005428 <compensate_pressure+0x340>)
 8005312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005316:	f7fb f977 	bl	8000608 <__aeabi_dmul>
 800531a:	4602      	mov	r2, r0
 800531c:	460b      	mov	r3, r1
 800531e:	4610      	mov	r0, r2
 8005320:	4619      	mov	r1, r3
 8005322:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005326:	f7fb fa99 	bl	800085c <__aeabi_ddiv>
 800532a:	4602      	mov	r2, r0
 800532c:	460b      	mov	r3, r1
 800532e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        var1 = ((double)calib_data->dig_p9) * pressure * pressure / 2147483648.0;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005338:	4618      	mov	r0, r3
 800533a:	f7fb f8fb 	bl	8000534 <__aeabi_i2d>
 800533e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005342:	f7fb f961 	bl	8000608 <__aeabi_dmul>
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	4610      	mov	r0, r2
 800534c:	4619      	mov	r1, r3
 800534e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005352:	f7fb f959 	bl	8000608 <__aeabi_dmul>
 8005356:	4602      	mov	r2, r0
 8005358:	460b      	mov	r3, r1
 800535a:	4610      	mov	r0, r2
 800535c:	4619      	mov	r1, r3
 800535e:	f04f 0200 	mov.w	r2, #0
 8005362:	4b3b      	ldr	r3, [pc, #236]	; (8005450 <compensate_pressure+0x368>)
 8005364:	f7fb fa7a 	bl	800085c <__aeabi_ddiv>
 8005368:	4602      	mov	r2, r0
 800536a:	460b      	mov	r3, r1
 800536c:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)calib_data->dig_p8) / 32768.0;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8005376:	4618      	mov	r0, r3
 8005378:	f7fb f8dc 	bl	8000534 <__aeabi_i2d>
 800537c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005380:	f7fb f942 	bl	8000608 <__aeabi_dmul>
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	4610      	mov	r0, r2
 800538a:	4619      	mov	r1, r3
 800538c:	f04f 0200 	mov.w	r2, #0
 8005390:	4b28      	ldr	r3, [pc, #160]	; (8005434 <compensate_pressure+0x34c>)
 8005392:	f7fb fa63 	bl	800085c <__aeabi_ddiv>
 8005396:	4602      	mov	r2, r0
 8005398:	460b      	mov	r3, r1
 800539a:	e9c7 2304 	strd	r2, r3, [r7, #16]
        pressure = pressure + (var1 + var2 + ((double)calib_data->dig_p7)) / 16.0;
 800539e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80053a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80053a6:	f7fa ff79 	bl	800029c <__adddf3>
 80053aa:	4602      	mov	r2, r0
 80053ac:	460b      	mov	r3, r1
 80053ae:	4614      	mov	r4, r2
 80053b0:	461d      	mov	r5, r3
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7fb f8bb 	bl	8000534 <__aeabi_i2d>
 80053be:	4602      	mov	r2, r0
 80053c0:	460b      	mov	r3, r1
 80053c2:	4620      	mov	r0, r4
 80053c4:	4629      	mov	r1, r5
 80053c6:	f7fa ff69 	bl	800029c <__adddf3>
 80053ca:	4602      	mov	r2, r0
 80053cc:	460b      	mov	r3, r1
 80053ce:	4610      	mov	r0, r2
 80053d0:	4619      	mov	r1, r3
 80053d2:	f04f 0200 	mov.w	r2, #0
 80053d6:	4b1f      	ldr	r3, [pc, #124]	; (8005454 <compensate_pressure+0x36c>)
 80053d8:	f7fb fa40 	bl	800085c <__aeabi_ddiv>
 80053dc:	4602      	mov	r2, r0
 80053de:	460b      	mov	r3, r1
 80053e0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80053e4:	f7fa ff5a 	bl	800029c <__adddf3>
 80053e8:	4602      	mov	r2, r0
 80053ea:	460b      	mov	r3, r1
 80053ec:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        if (pressure < pressure_min)
 80053f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053f4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80053f8:	f7fb fb78 	bl	8000aec <__aeabi_dcmplt>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d004      	beq.n	800540c <compensate_pressure+0x324>
        {
            pressure = pressure_min;
 8005402:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005406:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800540a:	e031      	b.n	8005470 <compensate_pressure+0x388>
        }
        else if (pressure > pressure_max)
 800540c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005410:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005414:	f7fb fb88 	bl	8000b28 <__aeabi_dcmpgt>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d028      	beq.n	8005470 <compensate_pressure+0x388>
        {
            pressure = pressure_max;
 800541e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005422:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8005426:	e023      	b.n	8005470 <compensate_pressure+0x388>
 8005428:	00000000 	.word	0x00000000
 800542c:	40b86a00 	.word	0x40b86a00
 8005430:	40ef4000 	.word	0x40ef4000
 8005434:	40e00000 	.word	0x40e00000
 8005438:	40100000 	.word	0x40100000
 800543c:	40f00000 	.word	0x40f00000
 8005440:	41200000 	.word	0x41200000
 8005444:	3ff00000 	.word	0x3ff00000
 8005448:	41300000 	.word	0x41300000
 800544c:	40b00000 	.word	0x40b00000
 8005450:	41e00000 	.word	0x41e00000
 8005454:	40300000 	.word	0x40300000
 8005458:	00000000 	.word	0x00000000
 800545c:	40dd4c00 	.word	0x40dd4c00
 8005460:	00000000 	.word	0x00000000
 8005464:	40fadb00 	.word	0x40fadb00
        }
    }
    else /* Invalid case */
    {
        pressure = pressure_min;
 8005468:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800546c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    }

    return pressure;
 8005470:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005474:	ec43 2b17 	vmov	d7, r2, r3
}
 8005478:	eeb0 0a47 	vmov.f32	s0, s14
 800547c:	eef0 0a67 	vmov.f32	s1, s15
 8005480:	3738      	adds	r7, #56	; 0x38
 8005482:	46bd      	mov	sp, r7
 8005484:	bdb0      	pop	{r4, r5, r7, pc}
 8005486:	bf00      	nop

08005488 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8005488:	b5b0      	push	{r4, r5, r7, lr}
 800548a:	b094      	sub	sp, #80	; 0x50
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
    double humidity;
    double humidity_min = 0.0;
 8005492:	f04f 0200 	mov.w	r2, #0
 8005496:	f04f 0300 	mov.w	r3, #0
 800549a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    double humidity_max = 100.0;
 800549e:	f04f 0200 	mov.w	r2, #0
 80054a2:	4b81      	ldr	r3, [pc, #516]	; (80056a8 <compensate_humidity+0x220>)
 80054a4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double var3;
    double var4;
    double var5;
    double var6;

    var1 = ((double)calib_data->t_fine) - 76800.0;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7fb f841 	bl	8000534 <__aeabi_i2d>
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	4b7d      	ldr	r3, [pc, #500]	; (80056ac <compensate_humidity+0x224>)
 80054b8:	f7fa feee 	bl	8000298 <__aeabi_dsub>
 80054bc:	4602      	mov	r2, r0
 80054be:	460b      	mov	r3, r1
 80054c0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    var2 = (((double)calib_data->dig_h4) * 64.0 + (((double)calib_data->dig_h5) / 16384.0) * var1);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7fb f832 	bl	8000534 <__aeabi_i2d>
 80054d0:	f04f 0200 	mov.w	r2, #0
 80054d4:	4b76      	ldr	r3, [pc, #472]	; (80056b0 <compensate_humidity+0x228>)
 80054d6:	f7fb f897 	bl	8000608 <__aeabi_dmul>
 80054da:	4602      	mov	r2, r0
 80054dc:	460b      	mov	r3, r1
 80054de:	4614      	mov	r4, r2
 80054e0:	461d      	mov	r5, r3
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7fb f823 	bl	8000534 <__aeabi_i2d>
 80054ee:	f04f 0200 	mov.w	r2, #0
 80054f2:	4b70      	ldr	r3, [pc, #448]	; (80056b4 <compensate_humidity+0x22c>)
 80054f4:	f7fb f9b2 	bl	800085c <__aeabi_ddiv>
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	4610      	mov	r0, r2
 80054fe:	4619      	mov	r1, r3
 8005500:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005504:	f7fb f880 	bl	8000608 <__aeabi_dmul>
 8005508:	4602      	mov	r2, r0
 800550a:	460b      	mov	r3, r1
 800550c:	4620      	mov	r0, r4
 800550e:	4629      	mov	r1, r5
 8005510:	f7fa fec4 	bl	800029c <__adddf3>
 8005514:	4602      	mov	r2, r0
 8005516:	460b      	mov	r3, r1
 8005518:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    var3 = uncomp_data->humidity - var2;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	4618      	mov	r0, r3
 8005522:	f7fa fff7 	bl	8000514 <__aeabi_ui2d>
 8005526:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800552a:	f7fa feb5 	bl	8000298 <__aeabi_dsub>
 800552e:	4602      	mov	r2, r0
 8005530:	460b      	mov	r3, r1
 8005532:	e9c7 2308 	strd	r2, r3, [r7, #32]
    var4 = ((double)calib_data->dig_h2) / 65536.0;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800553c:	4618      	mov	r0, r3
 800553e:	f7fa fff9 	bl	8000534 <__aeabi_i2d>
 8005542:	f04f 0200 	mov.w	r2, #0
 8005546:	4b5c      	ldr	r3, [pc, #368]	; (80056b8 <compensate_humidity+0x230>)
 8005548:	f7fb f988 	bl	800085c <__aeabi_ddiv>
 800554c:	4602      	mov	r2, r0
 800554e:	460b      	mov	r3, r1
 8005550:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var5 = (1.0 + (((double)calib_data->dig_h3) / 67108864.0) * var1);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	7f1b      	ldrb	r3, [r3, #28]
 8005558:	4618      	mov	r0, r3
 800555a:	f7fa ffdb 	bl	8000514 <__aeabi_ui2d>
 800555e:	f04f 0200 	mov.w	r2, #0
 8005562:	4b56      	ldr	r3, [pc, #344]	; (80056bc <compensate_humidity+0x234>)
 8005564:	f7fb f97a 	bl	800085c <__aeabi_ddiv>
 8005568:	4602      	mov	r2, r0
 800556a:	460b      	mov	r3, r1
 800556c:	4610      	mov	r0, r2
 800556e:	4619      	mov	r1, r3
 8005570:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005574:	f7fb f848 	bl	8000608 <__aeabi_dmul>
 8005578:	4602      	mov	r2, r0
 800557a:	460b      	mov	r3, r1
 800557c:	4610      	mov	r0, r2
 800557e:	4619      	mov	r1, r3
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	4b4e      	ldr	r3, [pc, #312]	; (80056c0 <compensate_humidity+0x238>)
 8005586:	f7fa fe89 	bl	800029c <__adddf3>
 800558a:	4602      	mov	r2, r0
 800558c:	460b      	mov	r3, r1
 800558e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var6 = 1.0 + (((double)calib_data->dig_h6) / 67108864.0) * var1 * var5;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8005598:	4618      	mov	r0, r3
 800559a:	f7fa ffcb 	bl	8000534 <__aeabi_i2d>
 800559e:	f04f 0200 	mov.w	r2, #0
 80055a2:	4b46      	ldr	r3, [pc, #280]	; (80056bc <compensate_humidity+0x234>)
 80055a4:	f7fb f95a 	bl	800085c <__aeabi_ddiv>
 80055a8:	4602      	mov	r2, r0
 80055aa:	460b      	mov	r3, r1
 80055ac:	4610      	mov	r0, r2
 80055ae:	4619      	mov	r1, r3
 80055b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80055b4:	f7fb f828 	bl	8000608 <__aeabi_dmul>
 80055b8:	4602      	mov	r2, r0
 80055ba:	460b      	mov	r3, r1
 80055bc:	4610      	mov	r0, r2
 80055be:	4619      	mov	r1, r3
 80055c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80055c4:	f7fb f820 	bl	8000608 <__aeabi_dmul>
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	4610      	mov	r0, r2
 80055ce:	4619      	mov	r1, r3
 80055d0:	f04f 0200 	mov.w	r2, #0
 80055d4:	4b3a      	ldr	r3, [pc, #232]	; (80056c0 <compensate_humidity+0x238>)
 80055d6:	f7fa fe61 	bl	800029c <__adddf3>
 80055da:	4602      	mov	r2, r0
 80055dc:	460b      	mov	r3, r1
 80055de:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var6 = var3 * var4 * (var5 * var6);
 80055e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055e6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80055ea:	f7fb f80d 	bl	8000608 <__aeabi_dmul>
 80055ee:	4602      	mov	r2, r0
 80055f0:	460b      	mov	r3, r1
 80055f2:	4614      	mov	r4, r2
 80055f4:	461d      	mov	r5, r3
 80055f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80055fe:	f7fb f803 	bl	8000608 <__aeabi_dmul>
 8005602:	4602      	mov	r2, r0
 8005604:	460b      	mov	r3, r1
 8005606:	4620      	mov	r0, r4
 8005608:	4629      	mov	r1, r5
 800560a:	f7fa fffd 	bl	8000608 <__aeabi_dmul>
 800560e:	4602      	mov	r2, r0
 8005610:	460b      	mov	r3, r1
 8005612:	e9c7 2302 	strd	r2, r3, [r7, #8]
    humidity = var6 * (1.0 - ((double)calib_data->dig_h1) * var6 / 524288.0);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	7e1b      	ldrb	r3, [r3, #24]
 800561a:	4618      	mov	r0, r3
 800561c:	f7fa ff7a 	bl	8000514 <__aeabi_ui2d>
 8005620:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005624:	f7fa fff0 	bl	8000608 <__aeabi_dmul>
 8005628:	4602      	mov	r2, r0
 800562a:	460b      	mov	r3, r1
 800562c:	4610      	mov	r0, r2
 800562e:	4619      	mov	r1, r3
 8005630:	f04f 0200 	mov.w	r2, #0
 8005634:	4b23      	ldr	r3, [pc, #140]	; (80056c4 <compensate_humidity+0x23c>)
 8005636:	f7fb f911 	bl	800085c <__aeabi_ddiv>
 800563a:	4602      	mov	r2, r0
 800563c:	460b      	mov	r3, r1
 800563e:	f04f 0000 	mov.w	r0, #0
 8005642:	491f      	ldr	r1, [pc, #124]	; (80056c0 <compensate_humidity+0x238>)
 8005644:	f7fa fe28 	bl	8000298 <__aeabi_dsub>
 8005648:	4602      	mov	r2, r0
 800564a:	460b      	mov	r3, r1
 800564c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005650:	f7fa ffda 	bl	8000608 <__aeabi_dmul>
 8005654:	4602      	mov	r2, r0
 8005656:	460b      	mov	r3, r1
 8005658:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    if (humidity > humidity_max)
 800565c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005660:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005664:	f7fb fa60 	bl	8000b28 <__aeabi_dcmpgt>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d004      	beq.n	8005678 <compensate_humidity+0x1f0>
    {
        humidity = humidity_max;
 800566e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005672:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8005676:	e00c      	b.n	8005692 <compensate_humidity+0x20a>
    }
    else if (humidity < humidity_min)
 8005678:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800567c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005680:	f7fb fa34 	bl	8000aec <__aeabi_dcmplt>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <compensate_humidity+0x20a>
    {
        humidity = humidity_min;
 800568a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800568e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    }

    return humidity;
 8005692:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005696:	ec43 2b17 	vmov	d7, r2, r3
}
 800569a:	eeb0 0a47 	vmov.f32	s0, s14
 800569e:	eef0 0a67 	vmov.f32	s1, s15
 80056a2:	3750      	adds	r7, #80	; 0x50
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bdb0      	pop	{r4, r5, r7, pc}
 80056a8:	40590000 	.word	0x40590000
 80056ac:	40f2c000 	.word	0x40f2c000
 80056b0:	40500000 	.word	0x40500000
 80056b4:	40d00000 	.word	0x40d00000
 80056b8:	40f00000 	.word	0x40f00000
 80056bc:	41900000 	.word	0x41900000
 80056c0:	3ff00000 	.word	0x3ff00000
 80056c4:	41200000 	.word	0x41200000

080056c8 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b08a      	sub	sp, #40	; 0x28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 80056d0:	2388      	movs	r3, #136	; 0x88
 80056d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 80056d6:	2300      	movs	r3, #0
 80056d8:	60fb      	str	r3, [r7, #12]
 80056da:	f107 0310 	add.w	r3, r7, #16
 80056de:	2200      	movs	r2, #0
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	605a      	str	r2, [r3, #4]
 80056e4:	609a      	str	r2, [r3, #8]
 80056e6:	60da      	str	r2, [r3, #12]
 80056e8:	611a      	str	r2, [r3, #16]
 80056ea:	829a      	strh	r2, [r3, #20]

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 80056ec:	f107 010c 	add.w	r1, r7, #12
 80056f0:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	221a      	movs	r2, #26
 80056f8:	f7fe ff97 	bl	800462a <bme280_get_regs>
 80056fc:	4603      	mov	r3, r0
 80056fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BME280_OK)
 8005702:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005706:	2b00      	cmp	r3, #0
 8005708:	d11d      	bne.n	8005746 <get_calib_data+0x7e>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 800570a:	f107 030c 	add.w	r3, r7, #12
 800570e:	6879      	ldr	r1, [r7, #4]
 8005710:	4618      	mov	r0, r3
 8005712:	f000 f84a 	bl	80057aa <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8005716:	23e1      	movs	r3, #225	; 0xe1
 8005718:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 800571c:	f107 010c 	add.w	r1, r7, #12
 8005720:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2207      	movs	r2, #7
 8005728:	f7fe ff7f 	bl	800462a <bme280_get_regs>
 800572c:	4603      	mov	r3, r0
 800572e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 8005732:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005736:	2b00      	cmp	r3, #0
 8005738:	d105      	bne.n	8005746 <get_calib_data+0x7e>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 800573a:	f107 030c 	add.w	r3, r7, #12
 800573e:	6879      	ldr	r1, [r7, #4]
 8005740:	4618      	mov	r0, r3
 8005742:	f000 f8e1 	bl	8005908 <parse_humidity_calib_data>
        }
    }

    return rslt;
 8005746:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800574a:	4618      	mov	r0, r3
 800574c:	3728      	adds	r7, #40	; 0x28
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8005752:	b480      	push	{r7}
 8005754:	b087      	sub	sp, #28
 8005756:	af00      	add	r7, sp, #0
 8005758:	60f8      	str	r0, [r7, #12]
 800575a:	60b9      	str	r1, [r7, #8]
 800575c:	607a      	str	r2, [r7, #4]
 800575e:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8005760:	2301      	movs	r3, #1
 8005762:	75fb      	strb	r3, [r7, #23]
 8005764:	e016      	b.n	8005794 <interleave_reg_addr+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8005766:	7dfb      	ldrb	r3, [r7, #23]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	441a      	add	r2, r3
 800576c:	7dfb      	ldrb	r3, [r7, #23]
 800576e:	005b      	lsls	r3, r3, #1
 8005770:	3b01      	subs	r3, #1
 8005772:	68b9      	ldr	r1, [r7, #8]
 8005774:	440b      	add	r3, r1
 8005776:	7812      	ldrb	r2, [r2, #0]
 8005778:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 800577a:	7dfb      	ldrb	r3, [r7, #23]
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	441a      	add	r2, r3
 8005780:	7dfb      	ldrb	r3, [r7, #23]
 8005782:	005b      	lsls	r3, r3, #1
 8005784:	4619      	mov	r1, r3
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	440b      	add	r3, r1
 800578a:	7812      	ldrb	r2, [r2, #0]
 800578c:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800578e:	7dfb      	ldrb	r3, [r7, #23]
 8005790:	3301      	adds	r3, #1
 8005792:	75fb      	strb	r3, [r7, #23]
 8005794:	7dfa      	ldrb	r2, [r7, #23]
 8005796:	78fb      	ldrb	r3, [r7, #3]
 8005798:	429a      	cmp	r2, r3
 800579a:	d3e4      	bcc.n	8005766 <interleave_reg_addr+0x14>
    }
}
 800579c:	bf00      	nop
 800579e:	bf00      	nop
 80057a0:	371c      	adds	r7, #28
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b085      	sub	sp, #20
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
 80057b2:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	3310      	adds	r3, #16
 80057b8:	60fb      	str	r3, [r7, #12]

    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	3301      	adds	r3, #1
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	021b      	lsls	r3, r3, #8
 80057c2:	b21a      	sxth	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	b21b      	sxth	r3, r3
 80057ca:	4313      	orrs	r3, r2
 80057cc:	b21b      	sxth	r3, r3
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	801a      	strh	r2, [r3, #0]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	3303      	adds	r3, #3
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	021b      	lsls	r3, r3, #8
 80057dc:	b21a      	sxth	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	3302      	adds	r3, #2
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	b21b      	sxth	r3, r3
 80057e6:	4313      	orrs	r3, r2
 80057e8:	b21a      	sxth	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	805a      	strh	r2, [r3, #2]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	3305      	adds	r3, #5
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	021b      	lsls	r3, r3, #8
 80057f6:	b21a      	sxth	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	3304      	adds	r3, #4
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	b21b      	sxth	r3, r3
 8005800:	4313      	orrs	r3, r2
 8005802:	b21a      	sxth	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	809a      	strh	r2, [r3, #4]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	3307      	adds	r3, #7
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	021b      	lsls	r3, r3, #8
 8005810:	b21a      	sxth	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	3306      	adds	r3, #6
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	b21b      	sxth	r3, r3
 800581a:	4313      	orrs	r3, r2
 800581c:	b21b      	sxth	r3, r3
 800581e:	b29a      	uxth	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	80da      	strh	r2, [r3, #6]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	3309      	adds	r3, #9
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	021b      	lsls	r3, r3, #8
 800582c:	b21a      	sxth	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	3308      	adds	r3, #8
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	b21b      	sxth	r3, r3
 8005836:	4313      	orrs	r3, r2
 8005838:	b21a      	sxth	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	811a      	strh	r2, [r3, #8]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	330b      	adds	r3, #11
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	021b      	lsls	r3, r3, #8
 8005846:	b21a      	sxth	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	330a      	adds	r3, #10
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	b21b      	sxth	r3, r3
 8005850:	4313      	orrs	r3, r2
 8005852:	b21a      	sxth	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	815a      	strh	r2, [r3, #10]
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	330d      	adds	r3, #13
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	021b      	lsls	r3, r3, #8
 8005860:	b21a      	sxth	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	330c      	adds	r3, #12
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	b21b      	sxth	r3, r3
 800586a:	4313      	orrs	r3, r2
 800586c:	b21a      	sxth	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	819a      	strh	r2, [r3, #12]
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	330f      	adds	r3, #15
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	021b      	lsls	r3, r3, #8
 800587a:	b21a      	sxth	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	330e      	adds	r3, #14
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	b21b      	sxth	r3, r3
 8005884:	4313      	orrs	r3, r2
 8005886:	b21a      	sxth	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	81da      	strh	r2, [r3, #14]
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	3311      	adds	r3, #17
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	021b      	lsls	r3, r3, #8
 8005894:	b21a      	sxth	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	3310      	adds	r3, #16
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	b21b      	sxth	r3, r3
 800589e:	4313      	orrs	r3, r2
 80058a0:	b21a      	sxth	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	821a      	strh	r2, [r3, #16]
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	3313      	adds	r3, #19
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	021b      	lsls	r3, r3, #8
 80058ae:	b21a      	sxth	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	3312      	adds	r3, #18
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	b21b      	sxth	r3, r3
 80058b8:	4313      	orrs	r3, r2
 80058ba:	b21a      	sxth	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	825a      	strh	r2, [r3, #18]
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	3315      	adds	r3, #21
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	021b      	lsls	r3, r3, #8
 80058c8:	b21a      	sxth	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	3314      	adds	r3, #20
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	b21b      	sxth	r3, r3
 80058d2:	4313      	orrs	r3, r2
 80058d4:	b21a      	sxth	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	829a      	strh	r2, [r3, #20]
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	3317      	adds	r3, #23
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	021b      	lsls	r3, r3, #8
 80058e2:	b21a      	sxth	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3316      	adds	r3, #22
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	b21b      	sxth	r3, r3
 80058ec:	4313      	orrs	r3, r2
 80058ee:	b21a      	sxth	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	82da      	strh	r2, [r3, #22]
    calib_data->dig_h1 = reg_data[25];
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	7e5a      	ldrb	r2, [r3, #25]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	761a      	strb	r2, [r3, #24]
}
 80058fc:	bf00      	nop
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8005908:	b480      	push	{r7}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	3310      	adds	r3, #16
 8005916:	617b      	str	r3, [r7, #20]
    int16_t dig_h4_lsb;
    int16_t dig_h4_msb;
    int16_t dig_h5_lsb;
    int16_t dig_h5_msb;

    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	3301      	adds	r3, #1
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	021b      	lsls	r3, r3, #8
 8005920:	b21a      	sxth	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	b21b      	sxth	r3, r3
 8005928:	4313      	orrs	r3, r2
 800592a:	b21a      	sxth	r2, r3
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	835a      	strh	r2, [r3, #26]
    calib_data->dig_h3 = reg_data[2];
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	789a      	ldrb	r2, [r3, #2]
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	771a      	strb	r2, [r3, #28]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	3303      	adds	r3, #3
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	b25b      	sxtb	r3, r3
 8005940:	b29b      	uxth	r3, r3
 8005942:	011b      	lsls	r3, r3, #4
 8005944:	b29b      	uxth	r3, r3
 8005946:	827b      	strh	r3, [r7, #18]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	3304      	adds	r3, #4
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	b21b      	sxth	r3, r3
 8005950:	f003 030f 	and.w	r3, r3, #15
 8005954:	823b      	strh	r3, [r7, #16]
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 8005956:	8a7a      	ldrh	r2, [r7, #18]
 8005958:	8a3b      	ldrh	r3, [r7, #16]
 800595a:	4313      	orrs	r3, r2
 800595c:	b21a      	sxth	r2, r3
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	83da      	strh	r2, [r3, #30]
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	3305      	adds	r3, #5
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	b25b      	sxtb	r3, r3
 800596a:	b29b      	uxth	r3, r3
 800596c:	011b      	lsls	r3, r3, #4
 800596e:	b29b      	uxth	r3, r3
 8005970:	81fb      	strh	r3, [r7, #14]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	3304      	adds	r3, #4
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	091b      	lsrs	r3, r3, #4
 800597a:	b2db      	uxtb	r3, r3
 800597c:	81bb      	strh	r3, [r7, #12]
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 800597e:	89fa      	ldrh	r2, [r7, #14]
 8005980:	89bb      	ldrh	r3, [r7, #12]
 8005982:	4313      	orrs	r3, r2
 8005984:	b21a      	sxth	r2, r3
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	841a      	strh	r2, [r3, #32]
    calib_data->dig_h6 = (int8_t)reg_data[6];
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	3306      	adds	r3, #6
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	b25a      	sxtb	r2, r3
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8005998:	bf00      	nop
 800599a:	371c      	adds	r7, #28
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	4603      	mov	r3, r0
 80059ac:	460a      	mov	r2, r1
 80059ae:	71fb      	strb	r3, [r7, #7]
 80059b0:	4613      	mov	r3, r2
 80059b2:	71bb      	strb	r3, [r7, #6]
    uint8_t settings_changed = FALSE;
 80059b4:	2300      	movs	r3, #0
 80059b6:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 80059b8:	79fa      	ldrb	r2, [r7, #7]
 80059ba:	79bb      	ldrb	r3, [r7, #6]
 80059bc:	4013      	ands	r3, r2
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d002      	beq.n	80059ca <are_settings_changed+0x26>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 80059c4:	2301      	movs	r3, #1
 80059c6:	73fb      	strb	r3, [r7, #15]
 80059c8:	e001      	b.n	80059ce <are_settings_changed+0x2a>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 80059ca:	2300      	movs	r3, #0
 80059cc:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 80059ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3714      	adds	r7, #20
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00b      	beq.n	8005a02 <null_ptr_check+0x26>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d007      	beq.n	8005a02 <null_ptr_check+0x26>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d003      	beq.n	8005a02 <null_ptr_check+0x26>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d102      	bne.n	8005a08 <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 8005a02:	23ff      	movs	r3, #255	; 0xff
 8005a04:	73fb      	strb	r3, [r7, #15]
 8005a06:	e001      	b.n	8005a0c <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <_dev_by_id>:
	}
};


static its_bme280_t * _dev_by_id(its_bme280_id_t id)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	4603      	mov	r3, r0
 8005a24:	71fb      	strb	r3, [r7, #7]
	assert(id >= 0 && id < 1);
 8005a26:	79fb      	ldrb	r3, [r7, #7]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d005      	beq.n	8005a38 <_dev_by_id+0x1c>
 8005a2c:	4b09      	ldr	r3, [pc, #36]	; (8005a54 <_dev_by_id+0x38>)
 8005a2e:	4a0a      	ldr	r2, [pc, #40]	; (8005a58 <_dev_by_id+0x3c>)
 8005a30:	2143      	movs	r1, #67	; 0x43
 8005a32:	480a      	ldr	r0, [pc, #40]	; (8005a5c <_dev_by_id+0x40>)
 8005a34:	f00a fac0 	bl	800ffb8 <__assert_func>
	its_bme280_t * const dev = &_devices[id];
 8005a38:	79fa      	ldrb	r2, [r7, #7]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	00db      	lsls	r3, r3, #3
 8005a3e:	4413      	add	r3, r2
 8005a40:	00db      	lsls	r3, r3, #3
 8005a42:	4a07      	ldr	r2, [pc, #28]	; (8005a60 <_dev_by_id+0x44>)
 8005a44:	4413      	add	r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]

	return dev;
 8005a48:	68fb      	ldr	r3, [r7, #12]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	08016030 	.word	0x08016030
 8005a58:	080160c8 	.word	0x080160c8
 8005a5c:	08016044 	.word	0x08016044
 8005a60:	20000008 	.word	0x20000008

08005a64 <_i2c_read>:


static int8_t _i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b088      	sub	sp, #32
 8005a68:	af04      	add	r7, sp, #16
 8005a6a:	603a      	str	r2, [r7, #0]
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	4603      	mov	r3, r0
 8005a70:	71fb      	strb	r3, [r7, #7]
 8005a72:	460b      	mov	r3, r1
 8005a74:	71bb      	strb	r3, [r7, #6]
 8005a76:	4613      	mov	r3, r2
 8005a78:	80bb      	strh	r3, [r7, #4]
	its_bme280_t * dev = _dev_by_id(id);
 8005a7a:	79fb      	ldrb	r3, [r7, #7]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7ff ffcd 	bl	8005a1c <_dev_by_id>
 8005a82:	60f8      	str	r0, [r7, #12]

	HAL_StatusTypeDef hrc = HAL_I2C_Mem_Read(
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6818      	ldr	r0, [r3, #0]
			dev->bus,
			dev->addr << 1,
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	791b      	ldrb	r3, [r3, #4]
 8005a8c:	b29b      	uxth	r3, r3
	HAL_StatusTypeDef hrc = HAL_I2C_Mem_Read(
 8005a8e:	005b      	lsls	r3, r3, #1
 8005a90:	b299      	uxth	r1, r3
 8005a92:	79bb      	ldrb	r3, [r7, #6]
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005a9a:	9302      	str	r3, [sp, #8]
 8005a9c:	88bb      	ldrh	r3, [r7, #4]
 8005a9e:	9301      	str	r3, [sp, #4]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	f001 fc97 	bl	80073d8 <HAL_I2C_Mem_Read>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	72fb      	strb	r3, [r7, #11]
			data,
			len,
			ITS_BME_HAL_TIMEOUT
	);

	if (hrc != HAL_OK)
 8005aae:	7afb      	ldrb	r3, [r7, #11]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d006      	beq.n	8005ac2 <_i2c_read+0x5e>
	{
		I2C_ClearBusyFlagErratum(&hi2c1, 120);
 8005ab4:	2178      	movs	r1, #120	; 0x78
 8005ab6:	4806      	ldr	r0, [pc, #24]	; (8005ad0 <_i2c_read+0x6c>)
 8005ab8:	f000 f938 	bl	8005d2c <I2C_ClearBusyFlagErratum>
		return (int8_t)hrc;
 8005abc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005ac0:	e001      	b.n	8005ac6 <_i2c_read+0x62>


	}

	return (int8_t)hrc;
 8005ac2:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	2000279c 	.word	0x2000279c

08005ad4 <_i2c_write>:


static int8_t _i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b088      	sub	sp, #32
 8005ad8:	af04      	add	r7, sp, #16
 8005ada:	603a      	str	r2, [r7, #0]
 8005adc:	461a      	mov	r2, r3
 8005ade:	4603      	mov	r3, r0
 8005ae0:	71fb      	strb	r3, [r7, #7]
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	71bb      	strb	r3, [r7, #6]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	80bb      	strh	r3, [r7, #4]
	its_bme280_t * dev = _dev_by_id(id);
 8005aea:	79fb      	ldrb	r3, [r7, #7]
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7ff ff95 	bl	8005a1c <_dev_by_id>
 8005af2:	60f8      	str	r0, [r7, #12]

	HAL_StatusTypeDef hrc = HAL_I2C_Mem_Write(
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6818      	ldr	r0, [r3, #0]
			dev->bus,
			dev->addr << 1,
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	791b      	ldrb	r3, [r3, #4]
 8005afc:	b29b      	uxth	r3, r3
	HAL_StatusTypeDef hrc = HAL_I2C_Mem_Write(
 8005afe:	005b      	lsls	r3, r3, #1
 8005b00:	b299      	uxth	r1, r3
 8005b02:	79bb      	ldrb	r3, [r7, #6]
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005b0a:	9302      	str	r3, [sp, #8]
 8005b0c:	88bb      	ldrh	r3, [r7, #4]
 8005b0e:	9301      	str	r3, [sp, #4]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	2301      	movs	r3, #1
 8005b16:	f001 fb65 	bl	80071e4 <HAL_I2C_Mem_Write>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	72fb      	strb	r3, [r7, #11]
			1,
			data,
			len,
			ITS_BME_HAL_TIMEOUT
	);
	if (hrc == HAL_BUSY)
 8005b1e:	7afb      	ldrb	r3, [r7, #11]
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d106      	bne.n	8005b32 <_i2c_write+0x5e>
	{
		I2C_ClearBusyFlagErratum(&hi2c1, 120);
 8005b24:	2178      	movs	r1, #120	; 0x78
 8005b26:	4806      	ldr	r0, [pc, #24]	; (8005b40 <_i2c_write+0x6c>)
 8005b28:	f000 f900 	bl	8005d2c <I2C_ClearBusyFlagErratum>
		return (int8_t)hrc;
 8005b2c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005b30:	e001      	b.n	8005b36 <_i2c_write+0x62>

	}
	return (int8_t)hrc;
 8005b32:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	2000279c 	.word	0x2000279c

08005b44 <_delay_ms>:



static void _delay_ms(uint32_t ms)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 fa13 	bl	8005f78 <HAL_Delay>
}
 8005b52:	bf00      	nop
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <its_bme280_init>:


int its_bme280_init(its_bme280_id_t id)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b084      	sub	sp, #16
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	4603      	mov	r3, r0
 8005b62:	71fb      	strb	r3, [r7, #7]
	its_bme280_t * const dev = _dev_by_id(id);
 8005b64:	79fb      	ldrb	r3, [r7, #7]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7ff ff58 	bl	8005a1c <_dev_by_id>
 8005b6c:	60f8      	str	r0, [r7, #12]

	int rc = bme280_soft_reset(&dev->driver);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	3308      	adds	r3, #8
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7fe feae 	bl	80048d4 <bme280_soft_reset>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	60bb      	str	r3, [r7, #8]
	if (0 != rc)
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <its_bme280_init+0x2c>
		return rc;
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	e029      	b.n	8005bda <its_bme280_init+0x80>

	rc = bme280_init(&dev->driver);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	3308      	adds	r3, #8
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7fe fd05 	bl	800459a <bme280_init>
 8005b90:	4603      	mov	r3, r0
 8005b92:	60bb      	str	r3, [r7, #8]
	if (0 != rc)
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <its_bme280_init+0x44>
		return rc;
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	e01d      	b.n	8005bda <its_bme280_init+0x80>

	rc = bme280_set_sensor_settings(BME280_ALL_SETTINGS_SEL, &dev->driver);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	3308      	adds	r3, #8
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	201f      	movs	r0, #31
 8005ba6:	f7fe fde9 	bl	800477c <bme280_set_sensor_settings>
 8005baa:	4603      	mov	r3, r0
 8005bac:	60bb      	str	r3, [r7, #8]
	if (0 != rc)
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d001      	beq.n	8005bb8 <its_bme280_init+0x5e>
		return rc;
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	e010      	b.n	8005bda <its_bme280_init+0x80>

	rc = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev->driver);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	3308      	adds	r3, #8
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	2003      	movs	r0, #3
 8005bc0:	f7fe fe31 	bl	8004826 <bme280_set_sensor_mode>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	60bb      	str	r3, [r7, #8]
	if (0 != rc)
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <its_bme280_init+0x78>
		return rc;
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	e003      	b.n	8005bda <its_bme280_init+0x80>

	HAL_Delay(10); // Иначе первые данные получаются плохие
 8005bd2:	200a      	movs	r0, #10
 8005bd4:	f000 f9d0 	bl	8005f78 <HAL_Delay>
	return 0;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	0000      	movs	r0, r0
 8005be4:	0000      	movs	r0, r0
	...

08005be8 <its_bme280_read>:
}


//Заменить в функци структура мавлинка на собственную
int its_bme280_read(its_bme280_id_t id, bme_important_shit * data)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b08a      	sub	sp, #40	; 0x28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	4603      	mov	r3, r0
 8005bf0:	6039      	str	r1, [r7, #0]
 8005bf2:	71fb      	strb	r3, [r7, #7]
	its_bme280_t * const dev = _dev_by_id(id);
 8005bf4:	79fb      	ldrb	r3, [r7, #7]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7ff ff10 	bl	8005a1c <_dev_by_id>
 8005bfc:	6278      	str	r0, [r7, #36]	; 0x24

	struct bme280_data bme280_data;

	int rc = bme280_get_sensor_data(BME280_ALL, &bme280_data, &dev->driver);
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	f103 0208 	add.w	r2, r3, #8
 8005c04:	f107 0308 	add.w	r3, r7, #8
 8005c08:	4619      	mov	r1, r3
 8005c0a:	2007      	movs	r0, #7
 8005c0c:	f7fe fead 	bl	800496a <bme280_get_sensor_data>
 8005c10:	4603      	mov	r3, r0
 8005c12:	623b      	str	r3, [r7, #32]
	if (0 != rc)
 8005c14:	6a3b      	ldr	r3, [r7, #32]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <its_bme280_read+0x36>
		return rc;
 8005c1a:	6a3b      	ldr	r3, [r7, #32]
 8005c1c:	e044      	b.n	8005ca8 <its_bme280_read+0xc0>

	data->time_steady = HAL_GetTick();
 8005c1e:	f000 f99f 	bl	8005f60 <HAL_GetTick>
 8005c22:	4602      	mov	r2, r0
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	611a      	str	r2, [r3, #16]

	data->pressure = bme280_data.pressure;
 8005c28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c2c:	6839      	ldr	r1, [r7, #0]
 8005c2e:	e9c1 2300 	strd	r2, r3, [r1]
	data->temperature = bme280_data.temperature;
 8005c32:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005c36:	6839      	ldr	r1, [r7, #0]
 8005c38:	e9c1 2306 	strd	r2, r3, [r1, #24]
	data->humidity = bme280_data.humidity;
 8005c3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c40:	6839      	ldr	r1, [r7, #0]
 8005c42:	e9c1 2308 	strd	r2, r3, [r1, #32]
	data->altitude =  44330.0*(1.0 - pow((float)bme280_data.pressure/data->bme_pres_grow, 1.0/5.255)); // Написать функцию пересчета в высоту
 8005c46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c4a:	4610      	mov	r0, r2
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	f7fa ffd3 	bl	8000bf8 <__aeabi_d2f>
 8005c52:	4603      	mov	r3, r0
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7fa fc7f 	bl	8000558 <__aeabi_f2d>
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005c60:	f7fa fdfc 	bl	800085c <__aeabi_ddiv>
 8005c64:	4602      	mov	r2, r0
 8005c66:	460b      	mov	r3, r1
 8005c68:	ec43 2b17 	vmov	d7, r2, r3
 8005c6c:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8005cb0 <its_bme280_read+0xc8>
 8005c70:	eeb0 0a47 	vmov.f32	s0, s14
 8005c74:	eef0 0a67 	vmov.f32	s1, s15
 8005c78:	f00e fea2 	bl	80149c0 <pow>
 8005c7c:	ec53 2b10 	vmov	r2, r3, d0
 8005c80:	f04f 0000 	mov.w	r0, #0
 8005c84:	490e      	ldr	r1, [pc, #56]	; (8005cc0 <its_bme280_read+0xd8>)
 8005c86:	f7fa fb07 	bl	8000298 <__aeabi_dsub>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	4610      	mov	r0, r2
 8005c90:	4619      	mov	r1, r3
 8005c92:	a309      	add	r3, pc, #36	; (adr r3, 8005cb8 <its_bme280_read+0xd0>)
 8005c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c98:	f7fa fcb6 	bl	8000608 <__aeabi_dmul>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	6839      	ldr	r1, [r7, #0]
 8005ca2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	return 0;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3728      	adds	r7, #40	; 0x28
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	ccd9456c 	.word	0xccd9456c
 8005cb4:	3fc85b95 	.word	0x3fc85b95
 8005cb8:	00000000 	.word	0x00000000
 8005cbc:	40e5a540 	.word	0x40e5a540
 8005cc0:	3ff00000 	.word	0x3ff00000

08005cc4 <wait_for_gpio_state_timeout>:

#define SDA_PORT GPIOB
#define SDA_PIN  GPIO_PIN_9

static uint8_t wait_for_gpio_state_timeout(GPIO_TypeDef *port, uint16_t pin, GPIO_PinState state, uint32_t timeout)
 {
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	607b      	str	r3, [r7, #4]
 8005cce:	460b      	mov	r3, r1
 8005cd0:	817b      	strh	r3, [r7, #10]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	727b      	strb	r3, [r7, #9]
    uint32_t Tickstart = HAL_GetTick();
 8005cd6:	f000 f943 	bl	8005f60 <HAL_GetTick>
 8005cda:	6138      	str	r0, [r7, #16]
    uint8_t ret = 1;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	75fb      	strb	r3, [r7, #23]

    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (1 == ret);) // Wait until flag is set
 8005ce0:	e011      	b.n	8005d06 <wait_for_gpio_state_timeout+0x42>
    {
        if(timeout != HAL_MAX_DELAY) // Check for the timeout
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce8:	d00c      	beq.n	8005d04 <wait_for_gpio_state_timeout+0x40>
        {
            if((timeout == 0U) || ((HAL_GetTick() - Tickstart) > timeout)) ret = 0;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d007      	beq.n	8005d00 <wait_for_gpio_state_timeout+0x3c>
 8005cf0:	f000 f936 	bl	8005f60 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d201      	bcs.n	8005d04 <wait_for_gpio_state_timeout+0x40>
 8005d00:	2300      	movs	r3, #0
 8005d02:	75fb      	strb	r3, [r7, #23]
        }

        asm("nop");
 8005d04:	bf00      	nop
    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (1 == ret);) // Wait until flag is set
 8005d06:	897b      	ldrh	r3, [r7, #10]
 8005d08:	4619      	mov	r1, r3
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f001 f8c4 	bl	8006e98 <HAL_GPIO_ReadPin>
 8005d10:	4603      	mov	r3, r0
 8005d12:	461a      	mov	r2, r3
 8005d14:	7a7b      	ldrb	r3, [r7, #9]
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d002      	beq.n	8005d20 <wait_for_gpio_state_timeout+0x5c>
 8005d1a:	7dfb      	ldrb	r3, [r7, #23]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d0e0      	beq.n	8005ce2 <wait_for_gpio_state_timeout+0x1e>
    }
    return ret;
 8005d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3718      	adds	r7, #24
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
	...

08005d2c <I2C_ClearBusyFlagErratum>:

void I2C_ClearBusyFlagErratum(I2C_HandleTypeDef *hi2c, uint32_t timeout)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b088      	sub	sp, #32
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
        // 2.13.7 I2C analog filter may provide wrong value, locking BUSY. STM32F10xx8 STM32F10xxB Errata sheet

    GPIO_InitTypeDef GPIO_InitStructure = {0};
 8005d36:	f107 030c 	add.w	r3, r7, #12
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	605a      	str	r2, [r3, #4]
 8005d40:	609a      	str	r2, [r3, #8]
 8005d42:	60da      	str	r2, [r3, #12]
 8005d44:	611a      	str	r2, [r3, #16]

    // 1. Clear PE bit.
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_PE);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 0201 	bic.w	r2, r2, #1
 8005d54:	601a      	str	r2, [r3, #0]

    //  2. Configure the SCL and SDA I/Os as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_I2C_DeInit(hi2c);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f001 fa14 	bl	8007184 <HAL_I2C_DeInit>

    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 8005d5c:	2311      	movs	r3, #17
 8005d5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 8005d60:	2300      	movs	r3, #0
 8005d62:	617b      	str	r3, [r7, #20]

    GPIO_InitStructure.Pin = SCL_PIN; // SCL // если пин другой, то укажите нужный
 8005d64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d68:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SCL_PORT, &GPIO_InitStructure); // если порт другой, то укажите нужную букву GPIOх, и ниже там все порты и пины поменяйте на своё
 8005d6a:	f107 030c 	add.w	r3, r7, #12
 8005d6e:	4619      	mov	r1, r3
 8005d70:	4847      	ldr	r0, [pc, #284]	; (8005e90 <I2C_ClearBusyFlagErratum+0x164>)
 8005d72:	f000 fe29 	bl	80069c8 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = SDA_PIN; // SDA
 8005d76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d7a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SDA_PORT, &GPIO_InitStructure);
 8005d7c:	f107 030c 	add.w	r3, r7, #12
 8005d80:	4619      	mov	r1, r3
 8005d82:	4843      	ldr	r0, [pc, #268]	; (8005e90 <I2C_ClearBusyFlagErratum+0x164>)
 8005d84:	f000 fe20 	bl	80069c8 <HAL_GPIO_Init>

    // 3. Check SCL and SDA High level in GPIOx_IDR.
    HAL_GPIO_WritePin(SDA_PORT, SDA_PIN, GPIO_PIN_SET);
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d8e:	4840      	ldr	r0, [pc, #256]	; (8005e90 <I2C_ClearBusyFlagErratum+0x164>)
 8005d90:	f001 f89a 	bl	8006ec8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_SET);
 8005d94:	2201      	movs	r2, #1
 8005d96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d9a:	483d      	ldr	r0, [pc, #244]	; (8005e90 <I2C_ClearBusyFlagErratum+0x164>)
 8005d9c:	f001 f894 	bl	8006ec8 <HAL_GPIO_WritePin>

    wait_for_gpio_state_timeout(SCL_PORT, SCL_PIN, GPIO_PIN_SET, timeout);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005da8:	4839      	ldr	r0, [pc, #228]	; (8005e90 <I2C_ClearBusyFlagErratum+0x164>)
 8005daa:	f7ff ff8b 	bl	8005cc4 <wait_for_gpio_state_timeout>
    wait_for_gpio_state_timeout(SDA_PORT, SDA_PIN, GPIO_PIN_SET, timeout);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005db6:	4836      	ldr	r0, [pc, #216]	; (8005e90 <I2C_ClearBusyFlagErratum+0x164>)
 8005db8:	f7ff ff84 	bl	8005cc4 <wait_for_gpio_state_timeout>

    // 4. Configure the SDA I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(SDA_PORT, SDA_PIN, GPIO_PIN_RESET);
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005dc2:	4833      	ldr	r0, [pc, #204]	; (8005e90 <I2C_ClearBusyFlagErratum+0x164>)
 8005dc4:	f001 f880 	bl	8006ec8 <HAL_GPIO_WritePin>

    // 5. Check SDA Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(SDA_PORT, SDA_PIN, GPIO_PIN_RESET, timeout);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005dd0:	482f      	ldr	r0, [pc, #188]	; (8005e90 <I2C_ClearBusyFlagErratum+0x164>)
 8005dd2:	f7ff ff77 	bl	8005cc4 <wait_for_gpio_state_timeout>

    // 6. Configure the SCL I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_RESET);
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ddc:	482c      	ldr	r0, [pc, #176]	; (8005e90 <I2C_ClearBusyFlagErratum+0x164>)
 8005dde:	f001 f873 	bl	8006ec8 <HAL_GPIO_WritePin>

    // 7. Check SCL Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(SCL_PORT, SCL_PIN, GPIO_PIN_RESET, timeout);
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005dea:	4829      	ldr	r0, [pc, #164]	; (8005e90 <I2C_ClearBusyFlagErratum+0x164>)
 8005dec:	f7ff ff6a 	bl	8005cc4 <wait_for_gpio_state_timeout>

    // 8. Configure the SCL I/O as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_SET);
 8005df0:	2201      	movs	r2, #1
 8005df2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005df6:	4826      	ldr	r0, [pc, #152]	; (8005e90 <I2C_ClearBusyFlagErratum+0x164>)
 8005df8:	f001 f866 	bl	8006ec8 <HAL_GPIO_WritePin>

    // 9. Check SCL High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(SCL_PORT, SCL_PIN, GPIO_PIN_SET, timeout);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e04:	4822      	ldr	r0, [pc, #136]	; (8005e90 <I2C_ClearBusyFlagErratum+0x164>)
 8005e06:	f7ff ff5d 	bl	8005cc4 <wait_for_gpio_state_timeout>

    // 10. Configure the SDA I/O as General Purpose Output Open-Drain , High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(SDA_PORT, SDA_PIN, GPIO_PIN_SET);
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e10:	481f      	ldr	r0, [pc, #124]	; (8005e90 <I2C_ClearBusyFlagErratum+0x164>)
 8005e12:	f001 f859 	bl	8006ec8 <HAL_GPIO_WritePin>

    // 11. Check SDA High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(SDA_PORT, SDA_PIN, GPIO_PIN_SET, timeout);
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e1e:	481c      	ldr	r0, [pc, #112]	; (8005e90 <I2C_ClearBusyFlagErratum+0x164>)
 8005e20:	f7ff ff50 	bl	8005cc4 <wait_for_gpio_state_timeout>

    // 12. Configure the SCL and SDA I/Os as Alternate function Open-Drain.
    GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8005e24:	2312      	movs	r3, #18
 8005e26:	613b      	str	r3, [r7, #16]
    //GPIO_InitStructure.Alternate = GPIO_AF4_I2C2; // F4

    GPIO_InitStructure.Pin = SCL_PIN;
 8005e28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e2c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SCL_PORT, &GPIO_InitStructure);
 8005e2e:	f107 030c 	add.w	r3, r7, #12
 8005e32:	4619      	mov	r1, r3
 8005e34:	4816      	ldr	r0, [pc, #88]	; (8005e90 <I2C_ClearBusyFlagErratum+0x164>)
 8005e36:	f000 fdc7 	bl	80069c8 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = SDA_PIN;
 8005e3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e3e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SDA_PORT, &GPIO_InitStructure);
 8005e40:	f107 030c 	add.w	r3, r7, #12
 8005e44:	4619      	mov	r1, r3
 8005e46:	4812      	ldr	r0, [pc, #72]	; (8005e90 <I2C_ClearBusyFlagErratum+0x164>)
 8005e48:	f000 fdbe 	bl	80069c8 <HAL_GPIO_Init>

    // 13. Set SWRST bit in I2Cx_CR1 register.
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e5a:	601a      	str	r2, [r3, #0]
    asm("nop");
 8005e5c:	bf00      	nop

    /* 14. Clear SWRST bit in I2Cx_CR1 register. */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e6c:	601a      	str	r2, [r3, #0]
    asm("nop");
 8005e6e:	bf00      	nop

    /* 15. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_PE);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f042 0201 	orr.w	r2, r2, #1
 8005e7e:	601a      	str	r2, [r3, #0]
    asm("nop");
 8005e80:	bf00      	nop

    // Call initialization function.
    HAL_I2C_Init(hi2c);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f001 f83a 	bl	8006efc <HAL_I2C_Init>
}
 8005e88:	bf00      	nop
 8005e8a:	3720      	adds	r7, #32
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	40020400 	.word	0x40020400

08005e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005e98:	4b0e      	ldr	r3, [pc, #56]	; (8005ed4 <HAL_Init+0x40>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a0d      	ldr	r2, [pc, #52]	; (8005ed4 <HAL_Init+0x40>)
 8005e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ea2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005ea4:	4b0b      	ldr	r3, [pc, #44]	; (8005ed4 <HAL_Init+0x40>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a0a      	ldr	r2, [pc, #40]	; (8005ed4 <HAL_Init+0x40>)
 8005eaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005eae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005eb0:	4b08      	ldr	r3, [pc, #32]	; (8005ed4 <HAL_Init+0x40>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a07      	ldr	r2, [pc, #28]	; (8005ed4 <HAL_Init+0x40>)
 8005eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ebc:	2003      	movs	r0, #3
 8005ebe:	f000 fd41 	bl	8006944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005ec2:	200f      	movs	r0, #15
 8005ec4:	f000 f808 	bl	8005ed8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005ec8:	f7fd ff74 	bl	8003db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	40023c00 	.word	0x40023c00

08005ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005ee0:	4b12      	ldr	r3, [pc, #72]	; (8005f2c <HAL_InitTick+0x54>)
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	4b12      	ldr	r3, [pc, #72]	; (8005f30 <HAL_InitTick+0x58>)
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	4619      	mov	r1, r3
 8005eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 fd59 	bl	80069ae <HAL_SYSTICK_Config>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e00e      	b.n	8005f24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2b0f      	cmp	r3, #15
 8005f0a:	d80a      	bhi.n	8005f22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	6879      	ldr	r1, [r7, #4]
 8005f10:	f04f 30ff 	mov.w	r0, #4294967295
 8005f14:	f000 fd21 	bl	800695a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005f18:	4a06      	ldr	r2, [pc, #24]	; (8005f34 <HAL_InitTick+0x5c>)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	e000      	b.n	8005f24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3708      	adds	r7, #8
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	20000004 	.word	0x20000004
 8005f30:	20000054 	.word	0x20000054
 8005f34:	20000050 	.word	0x20000050

08005f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005f3c:	4b06      	ldr	r3, [pc, #24]	; (8005f58 <HAL_IncTick+0x20>)
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	461a      	mov	r2, r3
 8005f42:	4b06      	ldr	r3, [pc, #24]	; (8005f5c <HAL_IncTick+0x24>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4413      	add	r3, r2
 8005f48:	4a04      	ldr	r2, [pc, #16]	; (8005f5c <HAL_IncTick+0x24>)
 8005f4a:	6013      	str	r3, [r2, #0]
}
 8005f4c:	bf00      	nop
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	20000054 	.word	0x20000054
 8005f5c:	200029b0 	.word	0x200029b0

08005f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f60:	b480      	push	{r7}
 8005f62:	af00      	add	r7, sp, #0
  return uwTick;
 8005f64:	4b03      	ldr	r3, [pc, #12]	; (8005f74 <HAL_GetTick+0x14>)
 8005f66:	681b      	ldr	r3, [r3, #0]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	200029b0 	.word	0x200029b0

08005f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005f80:	f7ff ffee 	bl	8005f60 <HAL_GetTick>
 8005f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f90:	d005      	beq.n	8005f9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005f92:	4b0a      	ldr	r3, [pc, #40]	; (8005fbc <HAL_Delay+0x44>)
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	461a      	mov	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005f9e:	bf00      	nop
 8005fa0:	f7ff ffde 	bl	8005f60 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d8f7      	bhi.n	8005fa0 <HAL_Delay+0x28>
  {
  }
}
 8005fb0:	bf00      	nop
 8005fb2:	bf00      	nop
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	20000054 	.word	0x20000054

08005fc0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e033      	b.n	800603e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d109      	bne.n	8005ff2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7fd ff10 	bl	8003e04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff6:	f003 0310 	and.w	r3, r3, #16
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d118      	bne.n	8006030 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006006:	f023 0302 	bic.w	r3, r3, #2
 800600a:	f043 0202 	orr.w	r2, r3, #2
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 faca 	bl	80065ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006022:	f023 0303 	bic.w	r3, r3, #3
 8006026:	f043 0201 	orr.w	r2, r3, #1
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	641a      	str	r2, [r3, #64]	; 0x40
 800602e:	e001      	b.n	8006034 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800603c:	7bfb      	ldrb	r3, [r7, #15]
}
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
	...

08006048 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006050:	2300      	movs	r3, #0
 8006052:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800605a:	2b01      	cmp	r3, #1
 800605c:	d101      	bne.n	8006062 <HAL_ADC_Start+0x1a>
 800605e:	2302      	movs	r3, #2
 8006060:	e097      	b.n	8006192 <HAL_ADC_Start+0x14a>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b01      	cmp	r3, #1
 8006076:	d018      	beq.n	80060aa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689a      	ldr	r2, [r3, #8]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f042 0201 	orr.w	r2, r2, #1
 8006086:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006088:	4b45      	ldr	r3, [pc, #276]	; (80061a0 <HAL_ADC_Start+0x158>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a45      	ldr	r2, [pc, #276]	; (80061a4 <HAL_ADC_Start+0x15c>)
 800608e:	fba2 2303 	umull	r2, r3, r2, r3
 8006092:	0c9a      	lsrs	r2, r3, #18
 8006094:	4613      	mov	r3, r2
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	4413      	add	r3, r2
 800609a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800609c:	e002      	b.n	80060a4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	3b01      	subs	r3, #1
 80060a2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1f9      	bne.n	800609e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d15f      	bne.n	8006178 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060bc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80060c0:	f023 0301 	bic.w	r3, r3, #1
 80060c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d007      	beq.n	80060ea <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80060e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060f6:	d106      	bne.n	8006106 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060fc:	f023 0206 	bic.w	r2, r3, #6
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	645a      	str	r2, [r3, #68]	; 0x44
 8006104:	e002      	b.n	800610c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006114:	4b24      	ldr	r3, [pc, #144]	; (80061a8 <HAL_ADC_Start+0x160>)
 8006116:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006120:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	f003 031f 	and.w	r3, r3, #31
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10f      	bne.n	800614e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d129      	bne.n	8006190 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	689a      	ldr	r2, [r3, #8]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800614a:	609a      	str	r2, [r3, #8]
 800614c:	e020      	b.n	8006190 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a16      	ldr	r2, [pc, #88]	; (80061ac <HAL_ADC_Start+0x164>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d11b      	bne.n	8006190 <HAL_ADC_Start+0x148>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d114      	bne.n	8006190 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	689a      	ldr	r2, [r3, #8]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006174:	609a      	str	r2, [r3, #8]
 8006176:	e00b      	b.n	8006190 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617c:	f043 0210 	orr.w	r2, r3, #16
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006188:	f043 0201 	orr.w	r2, r3, #1
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	20000004 	.word	0x20000004
 80061a4:	431bde83 	.word	0x431bde83
 80061a8:	40012300 	.word	0x40012300
 80061ac:	40012000 	.word	0x40012000

080061b0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d101      	bne.n	80061c6 <HAL_ADC_Stop+0x16>
 80061c2:	2302      	movs	r3, #2
 80061c4:	e021      	b.n	800620a <HAL_ADC_Stop+0x5a>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	689a      	ldr	r2, [r3, #8]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f022 0201 	bic.w	r2, r2, #1
 80061dc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d109      	bne.n	8006200 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80061f4:	f023 0301 	bic.w	r3, r3, #1
 80061f8:	f043 0201 	orr.w	r2, r3, #1
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	370c      	adds	r7, #12
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006216:	b580      	push	{r7, lr}
 8006218:	b084      	sub	sp, #16
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
 800621e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006220:	2300      	movs	r3, #0
 8006222:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800622e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006232:	d113      	bne.n	800625c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800623e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006242:	d10b      	bne.n	800625c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006248:	f043 0220 	orr.w	r2, r3, #32
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e063      	b.n	8006324 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800625c:	f7ff fe80 	bl	8005f60 <HAL_GetTick>
 8006260:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006262:	e021      	b.n	80062a8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626a:	d01d      	beq.n	80062a8 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d007      	beq.n	8006282 <HAL_ADC_PollForConversion+0x6c>
 8006272:	f7ff fe75 	bl	8005f60 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	429a      	cmp	r2, r3
 8006280:	d212      	bcs.n	80062a8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0302 	and.w	r3, r3, #2
 800628c:	2b02      	cmp	r3, #2
 800628e:	d00b      	beq.n	80062a8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006294:	f043 0204 	orr.w	r2, r3, #4
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e03d      	b.n	8006324 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d1d6      	bne.n	8006264 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f06f 0212 	mvn.w	r2, #18
 80062be:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d123      	bne.n	8006322 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d11f      	bne.n	8006322 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d006      	beq.n	80062fe <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d111      	bne.n	8006322 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006302:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d105      	bne.n	8006322 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631a:	f043 0201 	orr.w	r2, r3, #1
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3710      	adds	r7, #16
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800633a:	4618      	mov	r0, r3
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
	...

08006348 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006352:	2300      	movs	r3, #0
 8006354:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800635c:	2b01      	cmp	r3, #1
 800635e:	d101      	bne.n	8006364 <HAL_ADC_ConfigChannel+0x1c>
 8006360:	2302      	movs	r3, #2
 8006362:	e113      	b.n	800658c <HAL_ADC_ConfigChannel+0x244>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2b09      	cmp	r3, #9
 8006372:	d925      	bls.n	80063c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68d9      	ldr	r1, [r3, #12]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	b29b      	uxth	r3, r3
 8006380:	461a      	mov	r2, r3
 8006382:	4613      	mov	r3, r2
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	4413      	add	r3, r2
 8006388:	3b1e      	subs	r3, #30
 800638a:	2207      	movs	r2, #7
 800638c:	fa02 f303 	lsl.w	r3, r2, r3
 8006390:	43da      	mvns	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	400a      	ands	r2, r1
 8006398:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68d9      	ldr	r1, [r3, #12]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	689a      	ldr	r2, [r3, #8]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	4618      	mov	r0, r3
 80063ac:	4603      	mov	r3, r0
 80063ae:	005b      	lsls	r3, r3, #1
 80063b0:	4403      	add	r3, r0
 80063b2:	3b1e      	subs	r3, #30
 80063b4:	409a      	lsls	r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	60da      	str	r2, [r3, #12]
 80063be:	e022      	b.n	8006406 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	6919      	ldr	r1, [r3, #16]
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	461a      	mov	r2, r3
 80063ce:	4613      	mov	r3, r2
 80063d0:	005b      	lsls	r3, r3, #1
 80063d2:	4413      	add	r3, r2
 80063d4:	2207      	movs	r2, #7
 80063d6:	fa02 f303 	lsl.w	r3, r2, r3
 80063da:	43da      	mvns	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	400a      	ands	r2, r1
 80063e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6919      	ldr	r1, [r3, #16]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	689a      	ldr	r2, [r3, #8]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	4618      	mov	r0, r3
 80063f6:	4603      	mov	r3, r0
 80063f8:	005b      	lsls	r3, r3, #1
 80063fa:	4403      	add	r3, r0
 80063fc:	409a      	lsls	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	430a      	orrs	r2, r1
 8006404:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	2b06      	cmp	r3, #6
 800640c:	d824      	bhi.n	8006458 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	4613      	mov	r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4413      	add	r3, r2
 800641e:	3b05      	subs	r3, #5
 8006420:	221f      	movs	r2, #31
 8006422:	fa02 f303 	lsl.w	r3, r2, r3
 8006426:	43da      	mvns	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	400a      	ands	r2, r1
 800642e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	b29b      	uxth	r3, r3
 800643c:	4618      	mov	r0, r3
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	685a      	ldr	r2, [r3, #4]
 8006442:	4613      	mov	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4413      	add	r3, r2
 8006448:	3b05      	subs	r3, #5
 800644a:	fa00 f203 	lsl.w	r2, r0, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	430a      	orrs	r2, r1
 8006454:	635a      	str	r2, [r3, #52]	; 0x34
 8006456:	e04c      	b.n	80064f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	2b0c      	cmp	r3, #12
 800645e:	d824      	bhi.n	80064aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	685a      	ldr	r2, [r3, #4]
 800646a:	4613      	mov	r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4413      	add	r3, r2
 8006470:	3b23      	subs	r3, #35	; 0x23
 8006472:	221f      	movs	r2, #31
 8006474:	fa02 f303 	lsl.w	r3, r2, r3
 8006478:	43da      	mvns	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	400a      	ands	r2, r1
 8006480:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	b29b      	uxth	r3, r3
 800648e:	4618      	mov	r0, r3
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	4613      	mov	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	3b23      	subs	r3, #35	; 0x23
 800649c:	fa00 f203 	lsl.w	r2, r0, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	430a      	orrs	r2, r1
 80064a6:	631a      	str	r2, [r3, #48]	; 0x30
 80064a8:	e023      	b.n	80064f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	685a      	ldr	r2, [r3, #4]
 80064b4:	4613      	mov	r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4413      	add	r3, r2
 80064ba:	3b41      	subs	r3, #65	; 0x41
 80064bc:	221f      	movs	r2, #31
 80064be:	fa02 f303 	lsl.w	r3, r2, r3
 80064c2:	43da      	mvns	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	400a      	ands	r2, r1
 80064ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	4618      	mov	r0, r3
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	685a      	ldr	r2, [r3, #4]
 80064de:	4613      	mov	r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	4413      	add	r3, r2
 80064e4:	3b41      	subs	r3, #65	; 0x41
 80064e6:	fa00 f203 	lsl.w	r2, r0, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	430a      	orrs	r2, r1
 80064f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80064f2:	4b29      	ldr	r3, [pc, #164]	; (8006598 <HAL_ADC_ConfigChannel+0x250>)
 80064f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a28      	ldr	r2, [pc, #160]	; (800659c <HAL_ADC_ConfigChannel+0x254>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d10f      	bne.n	8006520 <HAL_ADC_ConfigChannel+0x1d8>
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b12      	cmp	r3, #18
 8006506:	d10b      	bne.n	8006520 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a1d      	ldr	r2, [pc, #116]	; (800659c <HAL_ADC_ConfigChannel+0x254>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d12b      	bne.n	8006582 <HAL_ADC_ConfigChannel+0x23a>
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a1c      	ldr	r2, [pc, #112]	; (80065a0 <HAL_ADC_ConfigChannel+0x258>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d003      	beq.n	800653c <HAL_ADC_ConfigChannel+0x1f4>
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b11      	cmp	r3, #17
 800653a:	d122      	bne.n	8006582 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a11      	ldr	r2, [pc, #68]	; (80065a0 <HAL_ADC_ConfigChannel+0x258>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d111      	bne.n	8006582 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800655e:	4b11      	ldr	r3, [pc, #68]	; (80065a4 <HAL_ADC_ConfigChannel+0x25c>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a11      	ldr	r2, [pc, #68]	; (80065a8 <HAL_ADC_ConfigChannel+0x260>)
 8006564:	fba2 2303 	umull	r2, r3, r2, r3
 8006568:	0c9a      	lsrs	r2, r3, #18
 800656a:	4613      	mov	r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4413      	add	r3, r2
 8006570:	005b      	lsls	r3, r3, #1
 8006572:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006574:	e002      	b.n	800657c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	3b01      	subs	r3, #1
 800657a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1f9      	bne.n	8006576 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3714      	adds	r7, #20
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	40012300 	.word	0x40012300
 800659c:	40012000 	.word	0x40012000
 80065a0:	10000012 	.word	0x10000012
 80065a4:	20000004 	.word	0x20000004
 80065a8:	431bde83 	.word	0x431bde83

080065ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80065b4:	4b79      	ldr	r3, [pc, #484]	; (800679c <ADC_Init+0x1f0>)
 80065b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	685a      	ldr	r2, [r3, #4]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	431a      	orrs	r2, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	6859      	ldr	r1, [r3, #4]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	021a      	lsls	r2, r3, #8
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	430a      	orrs	r2, r1
 80065f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	685a      	ldr	r2, [r3, #4]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006604:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	6859      	ldr	r1, [r3, #4]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	689a      	ldr	r2, [r3, #8]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	430a      	orrs	r2, r1
 8006616:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	689a      	ldr	r2, [r3, #8]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006626:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6899      	ldr	r1, [r3, #8]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	68da      	ldr	r2, [r3, #12]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	430a      	orrs	r2, r1
 8006638:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663e:	4a58      	ldr	r2, [pc, #352]	; (80067a0 <ADC_Init+0x1f4>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d022      	beq.n	800668a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	689a      	ldr	r2, [r3, #8]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006652:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6899      	ldr	r1, [r3, #8]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	430a      	orrs	r2, r1
 8006664:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	689a      	ldr	r2, [r3, #8]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006674:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	6899      	ldr	r1, [r3, #8]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	430a      	orrs	r2, r1
 8006686:	609a      	str	r2, [r3, #8]
 8006688:	e00f      	b.n	80066aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	689a      	ldr	r2, [r3, #8]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006698:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	689a      	ldr	r2, [r3, #8]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80066a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689a      	ldr	r2, [r3, #8]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 0202 	bic.w	r2, r2, #2
 80066b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	6899      	ldr	r1, [r3, #8]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	7e1b      	ldrb	r3, [r3, #24]
 80066c4:	005a      	lsls	r2, r3, #1
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d01b      	beq.n	8006710 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	685a      	ldr	r2, [r3, #4]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80066f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6859      	ldr	r1, [r3, #4]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006702:	3b01      	subs	r3, #1
 8006704:	035a      	lsls	r2, r3, #13
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	430a      	orrs	r2, r1
 800670c:	605a      	str	r2, [r3, #4]
 800670e:	e007      	b.n	8006720 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	685a      	ldr	r2, [r3, #4]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800671e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800672e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	69db      	ldr	r3, [r3, #28]
 800673a:	3b01      	subs	r3, #1
 800673c:	051a      	lsls	r2, r3, #20
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	430a      	orrs	r2, r1
 8006744:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	689a      	ldr	r2, [r3, #8]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006754:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	6899      	ldr	r1, [r3, #8]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006762:	025a      	lsls	r2, r3, #9
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	430a      	orrs	r2, r1
 800676a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689a      	ldr	r2, [r3, #8]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800677a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6899      	ldr	r1, [r3, #8]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	029a      	lsls	r2, r3, #10
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	430a      	orrs	r2, r1
 800678e:	609a      	str	r2, [r3, #8]
}
 8006790:	bf00      	nop
 8006792:	3714      	adds	r7, #20
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr
 800679c:	40012300 	.word	0x40012300
 80067a0:	0f000001 	.word	0x0f000001

080067a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f003 0307 	and.w	r3, r3, #7
 80067b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80067b4:	4b0c      	ldr	r3, [pc, #48]	; (80067e8 <__NVIC_SetPriorityGrouping+0x44>)
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80067c0:	4013      	ands	r3, r2
 80067c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80067cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80067d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80067d6:	4a04      	ldr	r2, [pc, #16]	; (80067e8 <__NVIC_SetPriorityGrouping+0x44>)
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	60d3      	str	r3, [r2, #12]
}
 80067dc:	bf00      	nop
 80067de:	3714      	adds	r7, #20
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr
 80067e8:	e000ed00 	.word	0xe000ed00

080067ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80067ec:	b480      	push	{r7}
 80067ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80067f0:	4b04      	ldr	r3, [pc, #16]	; (8006804 <__NVIC_GetPriorityGrouping+0x18>)
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	0a1b      	lsrs	r3, r3, #8
 80067f6:	f003 0307 	and.w	r3, r3, #7
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr
 8006804:	e000ed00 	.word	0xe000ed00

08006808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	4603      	mov	r3, r0
 8006810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006816:	2b00      	cmp	r3, #0
 8006818:	db0b      	blt.n	8006832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800681a:	79fb      	ldrb	r3, [r7, #7]
 800681c:	f003 021f 	and.w	r2, r3, #31
 8006820:	4907      	ldr	r1, [pc, #28]	; (8006840 <__NVIC_EnableIRQ+0x38>)
 8006822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006826:	095b      	lsrs	r3, r3, #5
 8006828:	2001      	movs	r0, #1
 800682a:	fa00 f202 	lsl.w	r2, r0, r2
 800682e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006832:	bf00      	nop
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	e000e100 	.word	0xe000e100

08006844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	4603      	mov	r3, r0
 800684c:	6039      	str	r1, [r7, #0]
 800684e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006854:	2b00      	cmp	r3, #0
 8006856:	db0a      	blt.n	800686e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	b2da      	uxtb	r2, r3
 800685c:	490c      	ldr	r1, [pc, #48]	; (8006890 <__NVIC_SetPriority+0x4c>)
 800685e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006862:	0112      	lsls	r2, r2, #4
 8006864:	b2d2      	uxtb	r2, r2
 8006866:	440b      	add	r3, r1
 8006868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800686c:	e00a      	b.n	8006884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	b2da      	uxtb	r2, r3
 8006872:	4908      	ldr	r1, [pc, #32]	; (8006894 <__NVIC_SetPriority+0x50>)
 8006874:	79fb      	ldrb	r3, [r7, #7]
 8006876:	f003 030f 	and.w	r3, r3, #15
 800687a:	3b04      	subs	r3, #4
 800687c:	0112      	lsls	r2, r2, #4
 800687e:	b2d2      	uxtb	r2, r2
 8006880:	440b      	add	r3, r1
 8006882:	761a      	strb	r2, [r3, #24]
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr
 8006890:	e000e100 	.word	0xe000e100
 8006894:	e000ed00 	.word	0xe000ed00

08006898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006898:	b480      	push	{r7}
 800689a:	b089      	sub	sp, #36	; 0x24
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f003 0307 	and.w	r3, r3, #7
 80068aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	f1c3 0307 	rsb	r3, r3, #7
 80068b2:	2b04      	cmp	r3, #4
 80068b4:	bf28      	it	cs
 80068b6:	2304      	movcs	r3, #4
 80068b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	3304      	adds	r3, #4
 80068be:	2b06      	cmp	r3, #6
 80068c0:	d902      	bls.n	80068c8 <NVIC_EncodePriority+0x30>
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	3b03      	subs	r3, #3
 80068c6:	e000      	b.n	80068ca <NVIC_EncodePriority+0x32>
 80068c8:	2300      	movs	r3, #0
 80068ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068cc:	f04f 32ff 	mov.w	r2, #4294967295
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	fa02 f303 	lsl.w	r3, r2, r3
 80068d6:	43da      	mvns	r2, r3
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	401a      	ands	r2, r3
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80068e0:	f04f 31ff 	mov.w	r1, #4294967295
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	fa01 f303 	lsl.w	r3, r1, r3
 80068ea:	43d9      	mvns	r1, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068f0:	4313      	orrs	r3, r2
         );
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3724      	adds	r7, #36	; 0x24
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
	...

08006900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	3b01      	subs	r3, #1
 800690c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006910:	d301      	bcc.n	8006916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006912:	2301      	movs	r3, #1
 8006914:	e00f      	b.n	8006936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006916:	4a0a      	ldr	r2, [pc, #40]	; (8006940 <SysTick_Config+0x40>)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	3b01      	subs	r3, #1
 800691c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800691e:	210f      	movs	r1, #15
 8006920:	f04f 30ff 	mov.w	r0, #4294967295
 8006924:	f7ff ff8e 	bl	8006844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006928:	4b05      	ldr	r3, [pc, #20]	; (8006940 <SysTick_Config+0x40>)
 800692a:	2200      	movs	r2, #0
 800692c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800692e:	4b04      	ldr	r3, [pc, #16]	; (8006940 <SysTick_Config+0x40>)
 8006930:	2207      	movs	r2, #7
 8006932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3708      	adds	r7, #8
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	e000e010 	.word	0xe000e010

08006944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f7ff ff29 	bl	80067a4 <__NVIC_SetPriorityGrouping>
}
 8006952:	bf00      	nop
 8006954:	3708      	adds	r7, #8
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800695a:	b580      	push	{r7, lr}
 800695c:	b086      	sub	sp, #24
 800695e:	af00      	add	r7, sp, #0
 8006960:	4603      	mov	r3, r0
 8006962:	60b9      	str	r1, [r7, #8]
 8006964:	607a      	str	r2, [r7, #4]
 8006966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006968:	2300      	movs	r3, #0
 800696a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800696c:	f7ff ff3e 	bl	80067ec <__NVIC_GetPriorityGrouping>
 8006970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	68b9      	ldr	r1, [r7, #8]
 8006976:	6978      	ldr	r0, [r7, #20]
 8006978:	f7ff ff8e 	bl	8006898 <NVIC_EncodePriority>
 800697c:	4602      	mov	r2, r0
 800697e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006982:	4611      	mov	r1, r2
 8006984:	4618      	mov	r0, r3
 8006986:	f7ff ff5d 	bl	8006844 <__NVIC_SetPriority>
}
 800698a:	bf00      	nop
 800698c:	3718      	adds	r7, #24
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b082      	sub	sp, #8
 8006996:	af00      	add	r7, sp, #0
 8006998:	4603      	mov	r3, r0
 800699a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800699c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7ff ff31 	bl	8006808 <__NVIC_EnableIRQ>
}
 80069a6:	bf00      	nop
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b082      	sub	sp, #8
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7ff ffa2 	bl	8006900 <SysTick_Config>
 80069bc:	4603      	mov	r3, r0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
	...

080069c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b089      	sub	sp, #36	; 0x24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80069d2:	2300      	movs	r3, #0
 80069d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80069d6:	2300      	movs	r3, #0
 80069d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80069da:	2300      	movs	r3, #0
 80069dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80069de:	2300      	movs	r3, #0
 80069e0:	61fb      	str	r3, [r7, #28]
 80069e2:	e159      	b.n	8006c98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80069e4:	2201      	movs	r2, #1
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	fa02 f303 	lsl.w	r3, r2, r3
 80069ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	4013      	ands	r3, r2
 80069f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	f040 8148 	bne.w	8006c92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f003 0303 	and.w	r3, r3, #3
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d005      	beq.n	8006a1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d130      	bne.n	8006a7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	005b      	lsls	r3, r3, #1
 8006a24:	2203      	movs	r2, #3
 8006a26:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2a:	43db      	mvns	r3, r3
 8006a2c:	69ba      	ldr	r2, [r7, #24]
 8006a2e:	4013      	ands	r3, r2
 8006a30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	68da      	ldr	r2, [r3, #12]
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	005b      	lsls	r3, r3, #1
 8006a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a3e:	69ba      	ldr	r2, [r7, #24]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	69ba      	ldr	r2, [r7, #24]
 8006a48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006a50:	2201      	movs	r2, #1
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	fa02 f303 	lsl.w	r3, r2, r3
 8006a58:	43db      	mvns	r3, r3
 8006a5a:	69ba      	ldr	r2, [r7, #24]
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	091b      	lsrs	r3, r3, #4
 8006a66:	f003 0201 	and.w	r2, r3, #1
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a70:	69ba      	ldr	r2, [r7, #24]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	69ba      	ldr	r2, [r7, #24]
 8006a7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f003 0303 	and.w	r3, r3, #3
 8006a84:	2b03      	cmp	r3, #3
 8006a86:	d017      	beq.n	8006ab8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	005b      	lsls	r3, r3, #1
 8006a92:	2203      	movs	r2, #3
 8006a94:	fa02 f303 	lsl.w	r3, r2, r3
 8006a98:	43db      	mvns	r3, r3
 8006a9a:	69ba      	ldr	r2, [r7, #24]
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	689a      	ldr	r2, [r3, #8]
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	005b      	lsls	r3, r3, #1
 8006aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8006aac:	69ba      	ldr	r2, [r7, #24]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	69ba      	ldr	r2, [r7, #24]
 8006ab6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f003 0303 	and.w	r3, r3, #3
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d123      	bne.n	8006b0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	08da      	lsrs	r2, r3, #3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	3208      	adds	r2, #8
 8006acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	f003 0307 	and.w	r3, r3, #7
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	220f      	movs	r2, #15
 8006adc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae0:	43db      	mvns	r3, r3
 8006ae2:	69ba      	ldr	r2, [r7, #24]
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	691a      	ldr	r2, [r3, #16]
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	f003 0307 	and.w	r3, r3, #7
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	fa02 f303 	lsl.w	r3, r2, r3
 8006af8:	69ba      	ldr	r2, [r7, #24]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	08da      	lsrs	r2, r3, #3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	3208      	adds	r2, #8
 8006b06:	69b9      	ldr	r1, [r7, #24]
 8006b08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	005b      	lsls	r3, r3, #1
 8006b16:	2203      	movs	r2, #3
 8006b18:	fa02 f303 	lsl.w	r3, r2, r3
 8006b1c:	43db      	mvns	r3, r3
 8006b1e:	69ba      	ldr	r2, [r7, #24]
 8006b20:	4013      	ands	r3, r2
 8006b22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f003 0203 	and.w	r2, r3, #3
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	005b      	lsls	r3, r3, #1
 8006b30:	fa02 f303 	lsl.w	r3, r2, r3
 8006b34:	69ba      	ldr	r2, [r7, #24]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	69ba      	ldr	r2, [r7, #24]
 8006b3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f000 80a2 	beq.w	8006c92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60fb      	str	r3, [r7, #12]
 8006b52:	4b57      	ldr	r3, [pc, #348]	; (8006cb0 <HAL_GPIO_Init+0x2e8>)
 8006b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b56:	4a56      	ldr	r2, [pc, #344]	; (8006cb0 <HAL_GPIO_Init+0x2e8>)
 8006b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8006b5e:	4b54      	ldr	r3, [pc, #336]	; (8006cb0 <HAL_GPIO_Init+0x2e8>)
 8006b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b66:	60fb      	str	r3, [r7, #12]
 8006b68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b6a:	4a52      	ldr	r2, [pc, #328]	; (8006cb4 <HAL_GPIO_Init+0x2ec>)
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	089b      	lsrs	r3, r3, #2
 8006b70:	3302      	adds	r3, #2
 8006b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	f003 0303 	and.w	r3, r3, #3
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	220f      	movs	r2, #15
 8006b82:	fa02 f303 	lsl.w	r3, r2, r3
 8006b86:	43db      	mvns	r3, r3
 8006b88:	69ba      	ldr	r2, [r7, #24]
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a49      	ldr	r2, [pc, #292]	; (8006cb8 <HAL_GPIO_Init+0x2f0>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d019      	beq.n	8006bca <HAL_GPIO_Init+0x202>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a48      	ldr	r2, [pc, #288]	; (8006cbc <HAL_GPIO_Init+0x2f4>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d013      	beq.n	8006bc6 <HAL_GPIO_Init+0x1fe>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a47      	ldr	r2, [pc, #284]	; (8006cc0 <HAL_GPIO_Init+0x2f8>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d00d      	beq.n	8006bc2 <HAL_GPIO_Init+0x1fa>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a46      	ldr	r2, [pc, #280]	; (8006cc4 <HAL_GPIO_Init+0x2fc>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d007      	beq.n	8006bbe <HAL_GPIO_Init+0x1f6>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a45      	ldr	r2, [pc, #276]	; (8006cc8 <HAL_GPIO_Init+0x300>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d101      	bne.n	8006bba <HAL_GPIO_Init+0x1f2>
 8006bb6:	2304      	movs	r3, #4
 8006bb8:	e008      	b.n	8006bcc <HAL_GPIO_Init+0x204>
 8006bba:	2307      	movs	r3, #7
 8006bbc:	e006      	b.n	8006bcc <HAL_GPIO_Init+0x204>
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e004      	b.n	8006bcc <HAL_GPIO_Init+0x204>
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	e002      	b.n	8006bcc <HAL_GPIO_Init+0x204>
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e000      	b.n	8006bcc <HAL_GPIO_Init+0x204>
 8006bca:	2300      	movs	r3, #0
 8006bcc:	69fa      	ldr	r2, [r7, #28]
 8006bce:	f002 0203 	and.w	r2, r2, #3
 8006bd2:	0092      	lsls	r2, r2, #2
 8006bd4:	4093      	lsls	r3, r2
 8006bd6:	69ba      	ldr	r2, [r7, #24]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006bdc:	4935      	ldr	r1, [pc, #212]	; (8006cb4 <HAL_GPIO_Init+0x2ec>)
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	089b      	lsrs	r3, r3, #2
 8006be2:	3302      	adds	r3, #2
 8006be4:	69ba      	ldr	r2, [r7, #24]
 8006be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006bea:	4b38      	ldr	r3, [pc, #224]	; (8006ccc <HAL_GPIO_Init+0x304>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	43db      	mvns	r3, r3
 8006bf4:	69ba      	ldr	r2, [r7, #24]
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d003      	beq.n	8006c0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006c06:	69ba      	ldr	r2, [r7, #24]
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006c0e:	4a2f      	ldr	r2, [pc, #188]	; (8006ccc <HAL_GPIO_Init+0x304>)
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006c14:	4b2d      	ldr	r3, [pc, #180]	; (8006ccc <HAL_GPIO_Init+0x304>)
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	43db      	mvns	r3, r3
 8006c1e:	69ba      	ldr	r2, [r7, #24]
 8006c20:	4013      	ands	r3, r2
 8006c22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d003      	beq.n	8006c38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006c30:	69ba      	ldr	r2, [r7, #24]
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006c38:	4a24      	ldr	r2, [pc, #144]	; (8006ccc <HAL_GPIO_Init+0x304>)
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006c3e:	4b23      	ldr	r3, [pc, #140]	; (8006ccc <HAL_GPIO_Init+0x304>)
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	43db      	mvns	r3, r3
 8006c48:	69ba      	ldr	r2, [r7, #24]
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d003      	beq.n	8006c62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006c5a:	69ba      	ldr	r2, [r7, #24]
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006c62:	4a1a      	ldr	r2, [pc, #104]	; (8006ccc <HAL_GPIO_Init+0x304>)
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006c68:	4b18      	ldr	r3, [pc, #96]	; (8006ccc <HAL_GPIO_Init+0x304>)
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	43db      	mvns	r3, r3
 8006c72:	69ba      	ldr	r2, [r7, #24]
 8006c74:	4013      	ands	r3, r2
 8006c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d003      	beq.n	8006c8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006c84:	69ba      	ldr	r2, [r7, #24]
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006c8c:	4a0f      	ldr	r2, [pc, #60]	; (8006ccc <HAL_GPIO_Init+0x304>)
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	3301      	adds	r3, #1
 8006c96:	61fb      	str	r3, [r7, #28]
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	2b0f      	cmp	r3, #15
 8006c9c:	f67f aea2 	bls.w	80069e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006ca0:	bf00      	nop
 8006ca2:	bf00      	nop
 8006ca4:	3724      	adds	r7, #36	; 0x24
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	40023800 	.word	0x40023800
 8006cb4:	40013800 	.word	0x40013800
 8006cb8:	40020000 	.word	0x40020000
 8006cbc:	40020400 	.word	0x40020400
 8006cc0:	40020800 	.word	0x40020800
 8006cc4:	40020c00 	.word	0x40020c00
 8006cc8:	40021000 	.word	0x40021000
 8006ccc:	40013c00 	.word	0x40013c00

08006cd0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b087      	sub	sp, #28
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	617b      	str	r3, [r7, #20]
 8006cea:	e0bb      	b.n	8006e64 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006cec:	2201      	movs	r2, #1
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	f040 80ab 	bne.w	8006e5e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006d08:	4a5c      	ldr	r2, [pc, #368]	; (8006e7c <HAL_GPIO_DeInit+0x1ac>)
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	089b      	lsrs	r3, r3, #2
 8006d0e:	3302      	adds	r3, #2
 8006d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d14:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	f003 0303 	and.w	r3, r3, #3
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	220f      	movs	r2, #15
 8006d20:	fa02 f303 	lsl.w	r3, r2, r3
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	4013      	ands	r3, r2
 8006d28:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a54      	ldr	r2, [pc, #336]	; (8006e80 <HAL_GPIO_DeInit+0x1b0>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d019      	beq.n	8006d66 <HAL_GPIO_DeInit+0x96>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a53      	ldr	r2, [pc, #332]	; (8006e84 <HAL_GPIO_DeInit+0x1b4>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d013      	beq.n	8006d62 <HAL_GPIO_DeInit+0x92>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a52      	ldr	r2, [pc, #328]	; (8006e88 <HAL_GPIO_DeInit+0x1b8>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d00d      	beq.n	8006d5e <HAL_GPIO_DeInit+0x8e>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a51      	ldr	r2, [pc, #324]	; (8006e8c <HAL_GPIO_DeInit+0x1bc>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d007      	beq.n	8006d5a <HAL_GPIO_DeInit+0x8a>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a50      	ldr	r2, [pc, #320]	; (8006e90 <HAL_GPIO_DeInit+0x1c0>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d101      	bne.n	8006d56 <HAL_GPIO_DeInit+0x86>
 8006d52:	2304      	movs	r3, #4
 8006d54:	e008      	b.n	8006d68 <HAL_GPIO_DeInit+0x98>
 8006d56:	2307      	movs	r3, #7
 8006d58:	e006      	b.n	8006d68 <HAL_GPIO_DeInit+0x98>
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e004      	b.n	8006d68 <HAL_GPIO_DeInit+0x98>
 8006d5e:	2302      	movs	r3, #2
 8006d60:	e002      	b.n	8006d68 <HAL_GPIO_DeInit+0x98>
 8006d62:	2301      	movs	r3, #1
 8006d64:	e000      	b.n	8006d68 <HAL_GPIO_DeInit+0x98>
 8006d66:	2300      	movs	r3, #0
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	f002 0203 	and.w	r2, r2, #3
 8006d6e:	0092      	lsls	r2, r2, #2
 8006d70:	4093      	lsls	r3, r2
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d132      	bne.n	8006dde <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006d78:	4b46      	ldr	r3, [pc, #280]	; (8006e94 <HAL_GPIO_DeInit+0x1c4>)
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	43db      	mvns	r3, r3
 8006d80:	4944      	ldr	r1, [pc, #272]	; (8006e94 <HAL_GPIO_DeInit+0x1c4>)
 8006d82:	4013      	ands	r3, r2
 8006d84:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006d86:	4b43      	ldr	r3, [pc, #268]	; (8006e94 <HAL_GPIO_DeInit+0x1c4>)
 8006d88:	685a      	ldr	r2, [r3, #4]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	43db      	mvns	r3, r3
 8006d8e:	4941      	ldr	r1, [pc, #260]	; (8006e94 <HAL_GPIO_DeInit+0x1c4>)
 8006d90:	4013      	ands	r3, r2
 8006d92:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006d94:	4b3f      	ldr	r3, [pc, #252]	; (8006e94 <HAL_GPIO_DeInit+0x1c4>)
 8006d96:	689a      	ldr	r2, [r3, #8]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	43db      	mvns	r3, r3
 8006d9c:	493d      	ldr	r1, [pc, #244]	; (8006e94 <HAL_GPIO_DeInit+0x1c4>)
 8006d9e:	4013      	ands	r3, r2
 8006da0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006da2:	4b3c      	ldr	r3, [pc, #240]	; (8006e94 <HAL_GPIO_DeInit+0x1c4>)
 8006da4:	68da      	ldr	r2, [r3, #12]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	43db      	mvns	r3, r3
 8006daa:	493a      	ldr	r1, [pc, #232]	; (8006e94 <HAL_GPIO_DeInit+0x1c4>)
 8006dac:	4013      	ands	r3, r2
 8006dae:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	f003 0303 	and.w	r3, r3, #3
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	220f      	movs	r2, #15
 8006dba:	fa02 f303 	lsl.w	r3, r2, r3
 8006dbe:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006dc0:	4a2e      	ldr	r2, [pc, #184]	; (8006e7c <HAL_GPIO_DeInit+0x1ac>)
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	089b      	lsrs	r3, r3, #2
 8006dc6:	3302      	adds	r3, #2
 8006dc8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	43da      	mvns	r2, r3
 8006dd0:	482a      	ldr	r0, [pc, #168]	; (8006e7c <HAL_GPIO_DeInit+0x1ac>)
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	089b      	lsrs	r3, r3, #2
 8006dd6:	400a      	ands	r2, r1
 8006dd8:	3302      	adds	r3, #2
 8006dda:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	005b      	lsls	r3, r3, #1
 8006de6:	2103      	movs	r1, #3
 8006de8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dec:	43db      	mvns	r3, r3
 8006dee:	401a      	ands	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	08da      	lsrs	r2, r3, #3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	3208      	adds	r2, #8
 8006dfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	f003 0307 	and.w	r3, r3, #7
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	220f      	movs	r2, #15
 8006e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e0e:	43db      	mvns	r3, r3
 8006e10:	697a      	ldr	r2, [r7, #20]
 8006e12:	08d2      	lsrs	r2, r2, #3
 8006e14:	4019      	ands	r1, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	3208      	adds	r2, #8
 8006e1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68da      	ldr	r2, [r3, #12]
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	005b      	lsls	r3, r3, #1
 8006e26:	2103      	movs	r1, #3
 8006e28:	fa01 f303 	lsl.w	r3, r1, r3
 8006e2c:	43db      	mvns	r3, r3
 8006e2e:	401a      	ands	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685a      	ldr	r2, [r3, #4]
 8006e38:	2101      	movs	r1, #1
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e40:	43db      	mvns	r3, r3
 8006e42:	401a      	ands	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	689a      	ldr	r2, [r3, #8]
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	005b      	lsls	r3, r3, #1
 8006e50:	2103      	movs	r1, #3
 8006e52:	fa01 f303 	lsl.w	r3, r1, r3
 8006e56:	43db      	mvns	r3, r3
 8006e58:	401a      	ands	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	3301      	adds	r3, #1
 8006e62:	617b      	str	r3, [r7, #20]
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	2b0f      	cmp	r3, #15
 8006e68:	f67f af40 	bls.w	8006cec <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006e6c:	bf00      	nop
 8006e6e:	bf00      	nop
 8006e70:	371c      	adds	r7, #28
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	40013800 	.word	0x40013800
 8006e80:	40020000 	.word	0x40020000
 8006e84:	40020400 	.word	0x40020400
 8006e88:	40020800 	.word	0x40020800
 8006e8c:	40020c00 	.word	0x40020c00
 8006e90:	40021000 	.word	0x40021000
 8006e94:	40013c00 	.word	0x40013c00

08006e98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	691a      	ldr	r2, [r3, #16]
 8006ea8:	887b      	ldrh	r3, [r7, #2]
 8006eaa:	4013      	ands	r3, r2
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d002      	beq.n	8006eb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	73fb      	strb	r3, [r7, #15]
 8006eb4:	e001      	b.n	8006eba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3714      	adds	r7, #20
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	807b      	strh	r3, [r7, #2]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006ed8:	787b      	ldrb	r3, [r7, #1]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ede:	887a      	ldrh	r2, [r7, #2]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006ee4:	e003      	b.n	8006eee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006ee6:	887b      	ldrh	r3, [r7, #2]
 8006ee8:	041a      	lsls	r2, r3, #16
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	619a      	str	r2, [r3, #24]
}
 8006eee:	bf00      	nop
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
	...

08006efc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d101      	bne.n	8006f0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e12b      	b.n	8007166 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d106      	bne.n	8006f28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f7fc ffb2 	bl	8003e8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2224      	movs	r2, #36	; 0x24
 8006f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f022 0201 	bic.w	r2, r2, #1
 8006f3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006f60:	f001 fbdc 	bl	800871c <HAL_RCC_GetPCLK1Freq>
 8006f64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	4a81      	ldr	r2, [pc, #516]	; (8007170 <HAL_I2C_Init+0x274>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d807      	bhi.n	8006f80 <HAL_I2C_Init+0x84>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	4a80      	ldr	r2, [pc, #512]	; (8007174 <HAL_I2C_Init+0x278>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	bf94      	ite	ls
 8006f78:	2301      	movls	r3, #1
 8006f7a:	2300      	movhi	r3, #0
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	e006      	b.n	8006f8e <HAL_I2C_Init+0x92>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	4a7d      	ldr	r2, [pc, #500]	; (8007178 <HAL_I2C_Init+0x27c>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	bf94      	ite	ls
 8006f88:	2301      	movls	r3, #1
 8006f8a:	2300      	movhi	r3, #0
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d001      	beq.n	8006f96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e0e7      	b.n	8007166 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	4a78      	ldr	r2, [pc, #480]	; (800717c <HAL_I2C_Init+0x280>)
 8006f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f9e:	0c9b      	lsrs	r3, r3, #18
 8006fa0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	430a      	orrs	r2, r1
 8006fb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	6a1b      	ldr	r3, [r3, #32]
 8006fbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	4a6a      	ldr	r2, [pc, #424]	; (8007170 <HAL_I2C_Init+0x274>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d802      	bhi.n	8006fd0 <HAL_I2C_Init+0xd4>
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	3301      	adds	r3, #1
 8006fce:	e009      	b.n	8006fe4 <HAL_I2C_Init+0xe8>
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006fd6:	fb02 f303 	mul.w	r3, r2, r3
 8006fda:	4a69      	ldr	r2, [pc, #420]	; (8007180 <HAL_I2C_Init+0x284>)
 8006fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe0:	099b      	lsrs	r3, r3, #6
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	6812      	ldr	r2, [r2, #0]
 8006fe8:	430b      	orrs	r3, r1
 8006fea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006ff6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	495c      	ldr	r1, [pc, #368]	; (8007170 <HAL_I2C_Init+0x274>)
 8007000:	428b      	cmp	r3, r1
 8007002:	d819      	bhi.n	8007038 <HAL_I2C_Init+0x13c>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	1e59      	subs	r1, r3, #1
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	005b      	lsls	r3, r3, #1
 800700e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007012:	1c59      	adds	r1, r3, #1
 8007014:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007018:	400b      	ands	r3, r1
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00a      	beq.n	8007034 <HAL_I2C_Init+0x138>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	1e59      	subs	r1, r3, #1
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	005b      	lsls	r3, r3, #1
 8007028:	fbb1 f3f3 	udiv	r3, r1, r3
 800702c:	3301      	adds	r3, #1
 800702e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007032:	e051      	b.n	80070d8 <HAL_I2C_Init+0x1dc>
 8007034:	2304      	movs	r3, #4
 8007036:	e04f      	b.n	80070d8 <HAL_I2C_Init+0x1dc>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d111      	bne.n	8007064 <HAL_I2C_Init+0x168>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	1e58      	subs	r0, r3, #1
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6859      	ldr	r1, [r3, #4]
 8007048:	460b      	mov	r3, r1
 800704a:	005b      	lsls	r3, r3, #1
 800704c:	440b      	add	r3, r1
 800704e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007052:	3301      	adds	r3, #1
 8007054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007058:	2b00      	cmp	r3, #0
 800705a:	bf0c      	ite	eq
 800705c:	2301      	moveq	r3, #1
 800705e:	2300      	movne	r3, #0
 8007060:	b2db      	uxtb	r3, r3
 8007062:	e012      	b.n	800708a <HAL_I2C_Init+0x18e>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	1e58      	subs	r0, r3, #1
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6859      	ldr	r1, [r3, #4]
 800706c:	460b      	mov	r3, r1
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	440b      	add	r3, r1
 8007072:	0099      	lsls	r1, r3, #2
 8007074:	440b      	add	r3, r1
 8007076:	fbb0 f3f3 	udiv	r3, r0, r3
 800707a:	3301      	adds	r3, #1
 800707c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007080:	2b00      	cmp	r3, #0
 8007082:	bf0c      	ite	eq
 8007084:	2301      	moveq	r3, #1
 8007086:	2300      	movne	r3, #0
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	d001      	beq.n	8007092 <HAL_I2C_Init+0x196>
 800708e:	2301      	movs	r3, #1
 8007090:	e022      	b.n	80070d8 <HAL_I2C_Init+0x1dc>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d10e      	bne.n	80070b8 <HAL_I2C_Init+0x1bc>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	1e58      	subs	r0, r3, #1
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6859      	ldr	r1, [r3, #4]
 80070a2:	460b      	mov	r3, r1
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	440b      	add	r3, r1
 80070a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80070ac:	3301      	adds	r3, #1
 80070ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070b6:	e00f      	b.n	80070d8 <HAL_I2C_Init+0x1dc>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	1e58      	subs	r0, r3, #1
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6859      	ldr	r1, [r3, #4]
 80070c0:	460b      	mov	r3, r1
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	440b      	add	r3, r1
 80070c6:	0099      	lsls	r1, r3, #2
 80070c8:	440b      	add	r3, r1
 80070ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80070ce:	3301      	adds	r3, #1
 80070d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070d8:	6879      	ldr	r1, [r7, #4]
 80070da:	6809      	ldr	r1, [r1, #0]
 80070dc:	4313      	orrs	r3, r2
 80070de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	69da      	ldr	r2, [r3, #28]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	431a      	orrs	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	430a      	orrs	r2, r1
 80070fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007106:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	6911      	ldr	r1, [r2, #16]
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	68d2      	ldr	r2, [r2, #12]
 8007112:	4311      	orrs	r1, r2
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	6812      	ldr	r2, [r2, #0]
 8007118:	430b      	orrs	r3, r1
 800711a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	695a      	ldr	r2, [r3, #20]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	431a      	orrs	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	430a      	orrs	r2, r1
 8007136:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f042 0201 	orr.w	r2, r2, #1
 8007146:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2220      	movs	r2, #32
 8007152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	000186a0 	.word	0x000186a0
 8007174:	001e847f 	.word	0x001e847f
 8007178:	003d08ff 	.word	0x003d08ff
 800717c:	431bde83 	.word	0x431bde83
 8007180:	10624dd3 	.word	0x10624dd3

08007184 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d101      	bne.n	8007196 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e021      	b.n	80071da <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2224      	movs	r2, #36	; 0x24
 800719a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f022 0201 	bic.w	r2, r2, #1
 80071ac:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f7fc feb4 	bl	8003f1c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
	...

080071e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b088      	sub	sp, #32
 80071e8:	af02      	add	r7, sp, #8
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	4608      	mov	r0, r1
 80071ee:	4611      	mov	r1, r2
 80071f0:	461a      	mov	r2, r3
 80071f2:	4603      	mov	r3, r0
 80071f4:	817b      	strh	r3, [r7, #10]
 80071f6:	460b      	mov	r3, r1
 80071f8:	813b      	strh	r3, [r7, #8]
 80071fa:	4613      	mov	r3, r2
 80071fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80071fe:	f7fe feaf 	bl	8005f60 <HAL_GetTick>
 8007202:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b20      	cmp	r3, #32
 800720e:	f040 80d9 	bne.w	80073c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	9300      	str	r3, [sp, #0]
 8007216:	2319      	movs	r3, #25
 8007218:	2201      	movs	r2, #1
 800721a:	496d      	ldr	r1, [pc, #436]	; (80073d0 <HAL_I2C_Mem_Write+0x1ec>)
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f000 fc7f 	bl	8007b20 <I2C_WaitOnFlagUntilTimeout>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d001      	beq.n	800722c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007228:	2302      	movs	r3, #2
 800722a:	e0cc      	b.n	80073c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007232:	2b01      	cmp	r3, #1
 8007234:	d101      	bne.n	800723a <HAL_I2C_Mem_Write+0x56>
 8007236:	2302      	movs	r3, #2
 8007238:	e0c5      	b.n	80073c6 <HAL_I2C_Mem_Write+0x1e2>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 0301 	and.w	r3, r3, #1
 800724c:	2b01      	cmp	r3, #1
 800724e:	d007      	beq.n	8007260 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f042 0201 	orr.w	r2, r2, #1
 800725e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800726e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2221      	movs	r2, #33	; 0x21
 8007274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2240      	movs	r2, #64	; 0x40
 800727c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2200      	movs	r2, #0
 8007284:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6a3a      	ldr	r2, [r7, #32]
 800728a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007290:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007296:	b29a      	uxth	r2, r3
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	4a4d      	ldr	r2, [pc, #308]	; (80073d4 <HAL_I2C_Mem_Write+0x1f0>)
 80072a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80072a2:	88f8      	ldrh	r0, [r7, #6]
 80072a4:	893a      	ldrh	r2, [r7, #8]
 80072a6:	8979      	ldrh	r1, [r7, #10]
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	9301      	str	r3, [sp, #4]
 80072ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ae:	9300      	str	r3, [sp, #0]
 80072b0:	4603      	mov	r3, r0
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f000 fab6 	bl	8007824 <I2C_RequestMemoryWrite>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d052      	beq.n	8007364 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e081      	b.n	80073c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072c2:	697a      	ldr	r2, [r7, #20]
 80072c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f000 fd00 	bl	8007ccc <I2C_WaitOnTXEFlagUntilTimeout>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00d      	beq.n	80072ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d6:	2b04      	cmp	r3, #4
 80072d8:	d107      	bne.n	80072ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e06b      	b.n	80073c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f2:	781a      	ldrb	r2, [r3, #0]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fe:	1c5a      	adds	r2, r3, #1
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007308:	3b01      	subs	r3, #1
 800730a:	b29a      	uxth	r2, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007314:	b29b      	uxth	r3, r3
 8007316:	3b01      	subs	r3, #1
 8007318:	b29a      	uxth	r2, r3
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	695b      	ldr	r3, [r3, #20]
 8007324:	f003 0304 	and.w	r3, r3, #4
 8007328:	2b04      	cmp	r3, #4
 800732a:	d11b      	bne.n	8007364 <HAL_I2C_Mem_Write+0x180>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007330:	2b00      	cmp	r3, #0
 8007332:	d017      	beq.n	8007364 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007338:	781a      	ldrb	r2, [r3, #0]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007344:	1c5a      	adds	r2, r3, #1
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800734e:	3b01      	subs	r3, #1
 8007350:	b29a      	uxth	r2, r3
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800735a:	b29b      	uxth	r3, r3
 800735c:	3b01      	subs	r3, #1
 800735e:	b29a      	uxth	r2, r3
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1aa      	bne.n	80072c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f000 fcec 	bl	8007d4e <I2C_WaitOnBTFFlagUntilTimeout>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00d      	beq.n	8007398 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007380:	2b04      	cmp	r3, #4
 8007382:	d107      	bne.n	8007394 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007392:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	e016      	b.n	80073c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2220      	movs	r2, #32
 80073ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80073c0:	2300      	movs	r3, #0
 80073c2:	e000      	b.n	80073c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80073c4:	2302      	movs	r3, #2
  }
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3718      	adds	r7, #24
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	00100002 	.word	0x00100002
 80073d4:	ffff0000 	.word	0xffff0000

080073d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b08c      	sub	sp, #48	; 0x30
 80073dc:	af02      	add	r7, sp, #8
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	4608      	mov	r0, r1
 80073e2:	4611      	mov	r1, r2
 80073e4:	461a      	mov	r2, r3
 80073e6:	4603      	mov	r3, r0
 80073e8:	817b      	strh	r3, [r7, #10]
 80073ea:	460b      	mov	r3, r1
 80073ec:	813b      	strh	r3, [r7, #8]
 80073ee:	4613      	mov	r3, r2
 80073f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80073f2:	f7fe fdb5 	bl	8005f60 <HAL_GetTick>
 80073f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	2b20      	cmp	r3, #32
 8007402:	f040 8208 	bne.w	8007816 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007408:	9300      	str	r3, [sp, #0]
 800740a:	2319      	movs	r3, #25
 800740c:	2201      	movs	r2, #1
 800740e:	497b      	ldr	r1, [pc, #492]	; (80075fc <HAL_I2C_Mem_Read+0x224>)
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f000 fb85 	bl	8007b20 <I2C_WaitOnFlagUntilTimeout>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d001      	beq.n	8007420 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800741c:	2302      	movs	r3, #2
 800741e:	e1fb      	b.n	8007818 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007426:	2b01      	cmp	r3, #1
 8007428:	d101      	bne.n	800742e <HAL_I2C_Mem_Read+0x56>
 800742a:	2302      	movs	r3, #2
 800742c:	e1f4      	b.n	8007818 <HAL_I2C_Mem_Read+0x440>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2201      	movs	r2, #1
 8007432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	2b01      	cmp	r3, #1
 8007442:	d007      	beq.n	8007454 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f042 0201 	orr.w	r2, r2, #1
 8007452:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007462:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2222      	movs	r2, #34	; 0x22
 8007468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2240      	movs	r2, #64	; 0x40
 8007470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800747e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007484:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800748a:	b29a      	uxth	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	4a5b      	ldr	r2, [pc, #364]	; (8007600 <HAL_I2C_Mem_Read+0x228>)
 8007494:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007496:	88f8      	ldrh	r0, [r7, #6]
 8007498:	893a      	ldrh	r2, [r7, #8]
 800749a:	8979      	ldrh	r1, [r7, #10]
 800749c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749e:	9301      	str	r3, [sp, #4]
 80074a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a2:	9300      	str	r3, [sp, #0]
 80074a4:	4603      	mov	r3, r0
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f000 fa52 	bl	8007950 <I2C_RequestMemoryRead>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d001      	beq.n	80074b6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e1b0      	b.n	8007818 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d113      	bne.n	80074e6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074be:	2300      	movs	r3, #0
 80074c0:	623b      	str	r3, [r7, #32]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	695b      	ldr	r3, [r3, #20]
 80074c8:	623b      	str	r3, [r7, #32]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	623b      	str	r3, [r7, #32]
 80074d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074e2:	601a      	str	r2, [r3, #0]
 80074e4:	e184      	b.n	80077f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d11b      	bne.n	8007526 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074fe:	2300      	movs	r3, #0
 8007500:	61fb      	str	r3, [r7, #28]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	695b      	ldr	r3, [r3, #20]
 8007508:	61fb      	str	r3, [r7, #28]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	61fb      	str	r3, [r7, #28]
 8007512:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007522:	601a      	str	r2, [r3, #0]
 8007524:	e164      	b.n	80077f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800752a:	2b02      	cmp	r3, #2
 800752c:	d11b      	bne.n	8007566 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800753c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800754c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800754e:	2300      	movs	r3, #0
 8007550:	61bb      	str	r3, [r7, #24]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	695b      	ldr	r3, [r3, #20]
 8007558:	61bb      	str	r3, [r7, #24]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	699b      	ldr	r3, [r3, #24]
 8007560:	61bb      	str	r3, [r7, #24]
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	e144      	b.n	80077f0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007566:	2300      	movs	r3, #0
 8007568:	617b      	str	r3, [r7, #20]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	695b      	ldr	r3, [r3, #20]
 8007570:	617b      	str	r3, [r7, #20]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	699b      	ldr	r3, [r3, #24]
 8007578:	617b      	str	r3, [r7, #20]
 800757a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800757c:	e138      	b.n	80077f0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007582:	2b03      	cmp	r3, #3
 8007584:	f200 80f1 	bhi.w	800776a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800758c:	2b01      	cmp	r3, #1
 800758e:	d123      	bne.n	80075d8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007592:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f000 fc1b 	bl	8007dd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d001      	beq.n	80075a4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e139      	b.n	8007818 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	691a      	ldr	r2, [r3, #16]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ae:	b2d2      	uxtb	r2, r2
 80075b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b6:	1c5a      	adds	r2, r3, #1
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075c0:	3b01      	subs	r3, #1
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	3b01      	subs	r3, #1
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80075d6:	e10b      	b.n	80077f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d14e      	bne.n	800767e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80075e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e6:	2200      	movs	r2, #0
 80075e8:	4906      	ldr	r1, [pc, #24]	; (8007604 <HAL_I2C_Mem_Read+0x22c>)
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f000 fa98 	bl	8007b20 <I2C_WaitOnFlagUntilTimeout>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d008      	beq.n	8007608 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e10e      	b.n	8007818 <HAL_I2C_Mem_Read+0x440>
 80075fa:	bf00      	nop
 80075fc:	00100002 	.word	0x00100002
 8007600:	ffff0000 	.word	0xffff0000
 8007604:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007616:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	691a      	ldr	r2, [r3, #16]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007622:	b2d2      	uxtb	r2, r2
 8007624:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762a:	1c5a      	adds	r2, r3, #1
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007634:	3b01      	subs	r3, #1
 8007636:	b29a      	uxth	r2, r3
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007640:	b29b      	uxth	r3, r3
 8007642:	3b01      	subs	r3, #1
 8007644:	b29a      	uxth	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	691a      	ldr	r2, [r3, #16]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007654:	b2d2      	uxtb	r2, r2
 8007656:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765c:	1c5a      	adds	r2, r3, #1
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007666:	3b01      	subs	r3, #1
 8007668:	b29a      	uxth	r2, r3
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007672:	b29b      	uxth	r3, r3
 8007674:	3b01      	subs	r3, #1
 8007676:	b29a      	uxth	r2, r3
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800767c:	e0b8      	b.n	80077f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800767e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007684:	2200      	movs	r2, #0
 8007686:	4966      	ldr	r1, [pc, #408]	; (8007820 <HAL_I2C_Mem_Read+0x448>)
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f000 fa49 	bl	8007b20 <I2C_WaitOnFlagUntilTimeout>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d001      	beq.n	8007698 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e0bf      	b.n	8007818 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	691a      	ldr	r2, [r3, #16]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b2:	b2d2      	uxtb	r2, r2
 80076b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ba:	1c5a      	adds	r2, r3, #1
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076c4:	3b01      	subs	r3, #1
 80076c6:	b29a      	uxth	r2, r3
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	3b01      	subs	r3, #1
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80076da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e0:	2200      	movs	r2, #0
 80076e2:	494f      	ldr	r1, [pc, #316]	; (8007820 <HAL_I2C_Mem_Read+0x448>)
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f000 fa1b 	bl	8007b20 <I2C_WaitOnFlagUntilTimeout>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d001      	beq.n	80076f4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e091      	b.n	8007818 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007702:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	691a      	ldr	r2, [r3, #16]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770e:	b2d2      	uxtb	r2, r2
 8007710:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007716:	1c5a      	adds	r2, r3, #1
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007720:	3b01      	subs	r3, #1
 8007722:	b29a      	uxth	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800772c:	b29b      	uxth	r3, r3
 800772e:	3b01      	subs	r3, #1
 8007730:	b29a      	uxth	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	691a      	ldr	r2, [r3, #16]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007740:	b2d2      	uxtb	r2, r2
 8007742:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007748:	1c5a      	adds	r2, r3, #1
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007752:	3b01      	subs	r3, #1
 8007754:	b29a      	uxth	r2, r3
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800775e:	b29b      	uxth	r3, r3
 8007760:	3b01      	subs	r3, #1
 8007762:	b29a      	uxth	r2, r3
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007768:	e042      	b.n	80077f0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800776a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800776c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	f000 fb2e 	bl	8007dd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d001      	beq.n	800777e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e04c      	b.n	8007818 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	691a      	ldr	r2, [r3, #16]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007788:	b2d2      	uxtb	r2, r2
 800778a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007790:	1c5a      	adds	r2, r3, #1
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800779a:	3b01      	subs	r3, #1
 800779c:	b29a      	uxth	r2, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	3b01      	subs	r3, #1
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	f003 0304 	and.w	r3, r3, #4
 80077ba:	2b04      	cmp	r3, #4
 80077bc:	d118      	bne.n	80077f0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	691a      	ldr	r2, [r3, #16]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c8:	b2d2      	uxtb	r2, r2
 80077ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d0:	1c5a      	adds	r2, r3, #1
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077da:	3b01      	subs	r3, #1
 80077dc:	b29a      	uxth	r2, r3
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	3b01      	subs	r3, #1
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f47f aec2 	bne.w	800757e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2220      	movs	r2, #32
 80077fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007812:	2300      	movs	r3, #0
 8007814:	e000      	b.n	8007818 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007816:	2302      	movs	r3, #2
  }
}
 8007818:	4618      	mov	r0, r3
 800781a:	3728      	adds	r7, #40	; 0x28
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}
 8007820:	00010004 	.word	0x00010004

08007824 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b088      	sub	sp, #32
 8007828:	af02      	add	r7, sp, #8
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	4608      	mov	r0, r1
 800782e:	4611      	mov	r1, r2
 8007830:	461a      	mov	r2, r3
 8007832:	4603      	mov	r3, r0
 8007834:	817b      	strh	r3, [r7, #10]
 8007836:	460b      	mov	r3, r1
 8007838:	813b      	strh	r3, [r7, #8]
 800783a:	4613      	mov	r3, r2
 800783c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800784c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800784e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007850:	9300      	str	r3, [sp, #0]
 8007852:	6a3b      	ldr	r3, [r7, #32]
 8007854:	2200      	movs	r2, #0
 8007856:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f000 f960 	bl	8007b20 <I2C_WaitOnFlagUntilTimeout>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00d      	beq.n	8007882 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007870:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007874:	d103      	bne.n	800787e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800787c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800787e:	2303      	movs	r3, #3
 8007880:	e05f      	b.n	8007942 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007882:	897b      	ldrh	r3, [r7, #10]
 8007884:	b2db      	uxtb	r3, r3
 8007886:	461a      	mov	r2, r3
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007890:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007894:	6a3a      	ldr	r2, [r7, #32]
 8007896:	492d      	ldr	r1, [pc, #180]	; (800794c <I2C_RequestMemoryWrite+0x128>)
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f000 f998 	bl	8007bce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d001      	beq.n	80078a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e04c      	b.n	8007942 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078a8:	2300      	movs	r3, #0
 80078aa:	617b      	str	r3, [r7, #20]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	695b      	ldr	r3, [r3, #20]
 80078b2:	617b      	str	r3, [r7, #20]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	699b      	ldr	r3, [r3, #24]
 80078ba:	617b      	str	r3, [r7, #20]
 80078bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078c0:	6a39      	ldr	r1, [r7, #32]
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f000 fa02 	bl	8007ccc <I2C_WaitOnTXEFlagUntilTimeout>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00d      	beq.n	80078ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d2:	2b04      	cmp	r3, #4
 80078d4:	d107      	bne.n	80078e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e02b      	b.n	8007942 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80078ea:	88fb      	ldrh	r3, [r7, #6]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d105      	bne.n	80078fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80078f0:	893b      	ldrh	r3, [r7, #8]
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	611a      	str	r2, [r3, #16]
 80078fa:	e021      	b.n	8007940 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80078fc:	893b      	ldrh	r3, [r7, #8]
 80078fe:	0a1b      	lsrs	r3, r3, #8
 8007900:	b29b      	uxth	r3, r3
 8007902:	b2da      	uxtb	r2, r3
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800790a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800790c:	6a39      	ldr	r1, [r7, #32]
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f000 f9dc 	bl	8007ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00d      	beq.n	8007936 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791e:	2b04      	cmp	r3, #4
 8007920:	d107      	bne.n	8007932 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007930:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	e005      	b.n	8007942 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007936:	893b      	ldrh	r3, [r7, #8]
 8007938:	b2da      	uxtb	r2, r3
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3718      	adds	r7, #24
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	00010002 	.word	0x00010002

08007950 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b088      	sub	sp, #32
 8007954:	af02      	add	r7, sp, #8
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	4608      	mov	r0, r1
 800795a:	4611      	mov	r1, r2
 800795c:	461a      	mov	r2, r3
 800795e:	4603      	mov	r3, r0
 8007960:	817b      	strh	r3, [r7, #10]
 8007962:	460b      	mov	r3, r1
 8007964:	813b      	strh	r3, [r7, #8]
 8007966:	4613      	mov	r3, r2
 8007968:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007978:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007988:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800798a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798c:	9300      	str	r3, [sp, #0]
 800798e:	6a3b      	ldr	r3, [r7, #32]
 8007990:	2200      	movs	r2, #0
 8007992:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007996:	68f8      	ldr	r0, [r7, #12]
 8007998:	f000 f8c2 	bl	8007b20 <I2C_WaitOnFlagUntilTimeout>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00d      	beq.n	80079be <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079b0:	d103      	bne.n	80079ba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e0aa      	b.n	8007b14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80079be:	897b      	ldrh	r3, [r7, #10]
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	461a      	mov	r2, r3
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80079cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80079ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d0:	6a3a      	ldr	r2, [r7, #32]
 80079d2:	4952      	ldr	r1, [pc, #328]	; (8007b1c <I2C_RequestMemoryRead+0x1cc>)
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f000 f8fa 	bl	8007bce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d001      	beq.n	80079e4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	e097      	b.n	8007b14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079e4:	2300      	movs	r3, #0
 80079e6:	617b      	str	r3, [r7, #20]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	695b      	ldr	r3, [r3, #20]
 80079ee:	617b      	str	r3, [r7, #20]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	699b      	ldr	r3, [r3, #24]
 80079f6:	617b      	str	r3, [r7, #20]
 80079f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079fc:	6a39      	ldr	r1, [r7, #32]
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	f000 f964 	bl	8007ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8007a04:	4603      	mov	r3, r0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00d      	beq.n	8007a26 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0e:	2b04      	cmp	r3, #4
 8007a10:	d107      	bne.n	8007a22 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e076      	b.n	8007b14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a26:	88fb      	ldrh	r3, [r7, #6]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d105      	bne.n	8007a38 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a2c:	893b      	ldrh	r3, [r7, #8]
 8007a2e:	b2da      	uxtb	r2, r3
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	611a      	str	r2, [r3, #16]
 8007a36:	e021      	b.n	8007a7c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007a38:	893b      	ldrh	r3, [r7, #8]
 8007a3a:	0a1b      	lsrs	r3, r3, #8
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	b2da      	uxtb	r2, r3
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a48:	6a39      	ldr	r1, [r7, #32]
 8007a4a:	68f8      	ldr	r0, [r7, #12]
 8007a4c:	f000 f93e 	bl	8007ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00d      	beq.n	8007a72 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5a:	2b04      	cmp	r3, #4
 8007a5c:	d107      	bne.n	8007a6e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e050      	b.n	8007b14 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a72:	893b      	ldrh	r3, [r7, #8]
 8007a74:	b2da      	uxtb	r2, r3
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a7e:	6a39      	ldr	r1, [r7, #32]
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f000 f923 	bl	8007ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00d      	beq.n	8007aa8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a90:	2b04      	cmp	r3, #4
 8007a92:	d107      	bne.n	8007aa4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007aa2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e035      	b.n	8007b14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ab6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aba:	9300      	str	r3, [sp, #0]
 8007abc:	6a3b      	ldr	r3, [r7, #32]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f000 f82b 	bl	8007b20 <I2C_WaitOnFlagUntilTimeout>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00d      	beq.n	8007aec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ade:	d103      	bne.n	8007ae8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ae6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007ae8:	2303      	movs	r3, #3
 8007aea:	e013      	b.n	8007b14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007aec:	897b      	ldrh	r3, [r7, #10]
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	f043 0301 	orr.w	r3, r3, #1
 8007af4:	b2da      	uxtb	r2, r3
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afe:	6a3a      	ldr	r2, [r7, #32]
 8007b00:	4906      	ldr	r1, [pc, #24]	; (8007b1c <I2C_RequestMemoryRead+0x1cc>)
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f000 f863 	bl	8007bce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d001      	beq.n	8007b12 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e000      	b.n	8007b14 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3718      	adds	r7, #24
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	00010002 	.word	0x00010002

08007b20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	603b      	str	r3, [r7, #0]
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b30:	e025      	b.n	8007b7e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b38:	d021      	beq.n	8007b7e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b3a:	f7fe fa11 	bl	8005f60 <HAL_GetTick>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	1ad3      	subs	r3, r2, r3
 8007b44:	683a      	ldr	r2, [r7, #0]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d302      	bcc.n	8007b50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d116      	bne.n	8007b7e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2200      	movs	r2, #0
 8007b54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2220      	movs	r2, #32
 8007b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b6a:	f043 0220 	orr.w	r2, r3, #32
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e023      	b.n	8007bc6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	0c1b      	lsrs	r3, r3, #16
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d10d      	bne.n	8007ba4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	695b      	ldr	r3, [r3, #20]
 8007b8e:	43da      	mvns	r2, r3
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	4013      	ands	r3, r2
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	bf0c      	ite	eq
 8007b9a:	2301      	moveq	r3, #1
 8007b9c:	2300      	movne	r3, #0
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	e00c      	b.n	8007bbe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	699b      	ldr	r3, [r3, #24]
 8007baa:	43da      	mvns	r2, r3
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	4013      	ands	r3, r2
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	bf0c      	ite	eq
 8007bb6:	2301      	moveq	r3, #1
 8007bb8:	2300      	movne	r3, #0
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	79fb      	ldrb	r3, [r7, #7]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d0b6      	beq.n	8007b32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b084      	sub	sp, #16
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	60f8      	str	r0, [r7, #12]
 8007bd6:	60b9      	str	r1, [r7, #8]
 8007bd8:	607a      	str	r2, [r7, #4]
 8007bda:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007bdc:	e051      	b.n	8007c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	695b      	ldr	r3, [r3, #20]
 8007be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bec:	d123      	bne.n	8007c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bfc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c06:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2220      	movs	r2, #32
 8007c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c22:	f043 0204 	orr.w	r2, r3, #4
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	e046      	b.n	8007cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c3c:	d021      	beq.n	8007c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c3e:	f7fe f98f 	bl	8005f60 <HAL_GetTick>
 8007c42:	4602      	mov	r2, r0
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	1ad3      	subs	r3, r2, r3
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d302      	bcc.n	8007c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d116      	bne.n	8007c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2220      	movs	r2, #32
 8007c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6e:	f043 0220 	orr.w	r2, r3, #32
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e020      	b.n	8007cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	0c1b      	lsrs	r3, r3, #16
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d10c      	bne.n	8007ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	43da      	mvns	r2, r3
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	4013      	ands	r3, r2
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	bf14      	ite	ne
 8007c9e:	2301      	movne	r3, #1
 8007ca0:	2300      	moveq	r3, #0
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	e00b      	b.n	8007cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	43da      	mvns	r2, r3
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	bf14      	ite	ne
 8007cb8:	2301      	movne	r3, #1
 8007cba:	2300      	moveq	r3, #0
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d18d      	bne.n	8007bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007cd8:	e02d      	b.n	8007d36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f000 f8ce 	bl	8007e7c <I2C_IsAcknowledgeFailed>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d001      	beq.n	8007cea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e02d      	b.n	8007d46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf0:	d021      	beq.n	8007d36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cf2:	f7fe f935 	bl	8005f60 <HAL_GetTick>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	68ba      	ldr	r2, [r7, #8]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d302      	bcc.n	8007d08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d116      	bne.n	8007d36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2220      	movs	r2, #32
 8007d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d22:	f043 0220 	orr.w	r2, r3, #32
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e007      	b.n	8007d46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	695b      	ldr	r3, [r3, #20]
 8007d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d40:	2b80      	cmp	r3, #128	; 0x80
 8007d42:	d1ca      	bne.n	8007cda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b084      	sub	sp, #16
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	60f8      	str	r0, [r7, #12]
 8007d56:	60b9      	str	r1, [r7, #8]
 8007d58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d5a:	e02d      	b.n	8007db8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f000 f88d 	bl	8007e7c <I2C_IsAcknowledgeFailed>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d001      	beq.n	8007d6c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e02d      	b.n	8007dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d72:	d021      	beq.n	8007db8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d74:	f7fe f8f4 	bl	8005f60 <HAL_GetTick>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	68ba      	ldr	r2, [r7, #8]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d302      	bcc.n	8007d8a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d116      	bne.n	8007db8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2220      	movs	r2, #32
 8007d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da4:	f043 0220 	orr.w	r2, r3, #32
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	e007      	b.n	8007dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	f003 0304 	and.w	r3, r3, #4
 8007dc2:	2b04      	cmp	r3, #4
 8007dc4:	d1ca      	bne.n	8007d5c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007ddc:	e042      	b.n	8007e64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	695b      	ldr	r3, [r3, #20]
 8007de4:	f003 0310 	and.w	r3, r3, #16
 8007de8:	2b10      	cmp	r3, #16
 8007dea:	d119      	bne.n	8007e20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f06f 0210 	mvn.w	r2, #16
 8007df4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2220      	movs	r2, #32
 8007e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e029      	b.n	8007e74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e20:	f7fe f89e 	bl	8005f60 <HAL_GetTick>
 8007e24:	4602      	mov	r2, r0
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d302      	bcc.n	8007e36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d116      	bne.n	8007e64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2220      	movs	r2, #32
 8007e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e50:	f043 0220 	orr.w	r2, r3, #32
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e007      	b.n	8007e74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	695b      	ldr	r3, [r3, #20]
 8007e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e6e:	2b40      	cmp	r3, #64	; 0x40
 8007e70:	d1b5      	bne.n	8007dde <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e92:	d11b      	bne.n	8007ecc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2220      	movs	r2, #32
 8007ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb8:	f043 0204 	orr.w	r2, r3, #4
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e000      	b.n	8007ece <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	370c      	adds	r7, #12
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr
	...

08007edc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b086      	sub	sp, #24
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d101      	bne.n	8007eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e264      	b.n	80083b8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 0301 	and.w	r3, r3, #1
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d075      	beq.n	8007fe6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007efa:	4ba3      	ldr	r3, [pc, #652]	; (8008188 <HAL_RCC_OscConfig+0x2ac>)
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	f003 030c 	and.w	r3, r3, #12
 8007f02:	2b04      	cmp	r3, #4
 8007f04:	d00c      	beq.n	8007f20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f06:	4ba0      	ldr	r3, [pc, #640]	; (8008188 <HAL_RCC_OscConfig+0x2ac>)
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f0e:	2b08      	cmp	r3, #8
 8007f10:	d112      	bne.n	8007f38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f12:	4b9d      	ldr	r3, [pc, #628]	; (8008188 <HAL_RCC_OscConfig+0x2ac>)
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f1e:	d10b      	bne.n	8007f38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f20:	4b99      	ldr	r3, [pc, #612]	; (8008188 <HAL_RCC_OscConfig+0x2ac>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d05b      	beq.n	8007fe4 <HAL_RCC_OscConfig+0x108>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d157      	bne.n	8007fe4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	e23f      	b.n	80083b8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f40:	d106      	bne.n	8007f50 <HAL_RCC_OscConfig+0x74>
 8007f42:	4b91      	ldr	r3, [pc, #580]	; (8008188 <HAL_RCC_OscConfig+0x2ac>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a90      	ldr	r2, [pc, #576]	; (8008188 <HAL_RCC_OscConfig+0x2ac>)
 8007f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f4c:	6013      	str	r3, [r2, #0]
 8007f4e:	e01d      	b.n	8007f8c <HAL_RCC_OscConfig+0xb0>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f58:	d10c      	bne.n	8007f74 <HAL_RCC_OscConfig+0x98>
 8007f5a:	4b8b      	ldr	r3, [pc, #556]	; (8008188 <HAL_RCC_OscConfig+0x2ac>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a8a      	ldr	r2, [pc, #552]	; (8008188 <HAL_RCC_OscConfig+0x2ac>)
 8007f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f64:	6013      	str	r3, [r2, #0]
 8007f66:	4b88      	ldr	r3, [pc, #544]	; (8008188 <HAL_RCC_OscConfig+0x2ac>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a87      	ldr	r2, [pc, #540]	; (8008188 <HAL_RCC_OscConfig+0x2ac>)
 8007f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f70:	6013      	str	r3, [r2, #0]
 8007f72:	e00b      	b.n	8007f8c <HAL_RCC_OscConfig+0xb0>
 8007f74:	4b84      	ldr	r3, [pc, #528]	; (8008188 <HAL_RCC_OscConfig+0x2ac>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a83      	ldr	r2, [pc, #524]	; (8008188 <HAL_RCC_OscConfig+0x2ac>)
 8007f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f7e:	6013      	str	r3, [r2, #0]
 8007f80:	4b81      	ldr	r3, [pc, #516]	; (8008188 <HAL_RCC_OscConfig+0x2ac>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a80      	ldr	r2, [pc, #512]	; (8008188 <HAL_RCC_OscConfig+0x2ac>)
 8007f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d013      	beq.n	8007fbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f94:	f7fd ffe4 	bl	8005f60 <HAL_GetTick>
 8007f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f9a:	e008      	b.n	8007fae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f9c:	f7fd ffe0 	bl	8005f60 <HAL_GetTick>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	1ad3      	subs	r3, r2, r3
 8007fa6:	2b64      	cmp	r3, #100	; 0x64
 8007fa8:	d901      	bls.n	8007fae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007faa:	2303      	movs	r3, #3
 8007fac:	e204      	b.n	80083b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fae:	4b76      	ldr	r3, [pc, #472]	; (8008188 <HAL_RCC_OscConfig+0x2ac>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d0f0      	beq.n	8007f9c <HAL_RCC_OscConfig+0xc0>
 8007fba:	e014      	b.n	8007fe6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fbc:	f7fd ffd0 	bl	8005f60 <HAL_GetTick>
 8007fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007fc2:	e008      	b.n	8007fd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007fc4:	f7fd ffcc 	bl	8005f60 <HAL_GetTick>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	1ad3      	subs	r3, r2, r3
 8007fce:	2b64      	cmp	r3, #100	; 0x64
 8007fd0:	d901      	bls.n	8007fd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e1f0      	b.n	80083b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007fd6:	4b6c      	ldr	r3, [pc, #432]	; (8008188 <HAL_RCC_OscConfig+0x2ac>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d1f0      	bne.n	8007fc4 <HAL_RCC_OscConfig+0xe8>
 8007fe2:	e000      	b.n	8007fe6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 0302 	and.w	r3, r3, #2
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d063      	beq.n	80080ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007ff2:	4b65      	ldr	r3, [pc, #404]	; (8008188 <HAL_RCC_OscConfig+0x2ac>)
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	f003 030c 	and.w	r3, r3, #12
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00b      	beq.n	8008016 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ffe:	4b62      	ldr	r3, [pc, #392]	; (8008188 <HAL_RCC_OscConfig+0x2ac>)
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008006:	2b08      	cmp	r3, #8
 8008008:	d11c      	bne.n	8008044 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800800a:	4b5f      	ldr	r3, [pc, #380]	; (8008188 <HAL_RCC_OscConfig+0x2ac>)
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008012:	2b00      	cmp	r3, #0
 8008014:	d116      	bne.n	8008044 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008016:	4b5c      	ldr	r3, [pc, #368]	; (8008188 <HAL_RCC_OscConfig+0x2ac>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 0302 	and.w	r3, r3, #2
 800801e:	2b00      	cmp	r3, #0
 8008020:	d005      	beq.n	800802e <HAL_RCC_OscConfig+0x152>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	2b01      	cmp	r3, #1
 8008028:	d001      	beq.n	800802e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	e1c4      	b.n	80083b8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800802e:	4b56      	ldr	r3, [pc, #344]	; (8008188 <HAL_RCC_OscConfig+0x2ac>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	00db      	lsls	r3, r3, #3
 800803c:	4952      	ldr	r1, [pc, #328]	; (8008188 <HAL_RCC_OscConfig+0x2ac>)
 800803e:	4313      	orrs	r3, r2
 8008040:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008042:	e03a      	b.n	80080ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d020      	beq.n	800808e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800804c:	4b4f      	ldr	r3, [pc, #316]	; (800818c <HAL_RCC_OscConfig+0x2b0>)
 800804e:	2201      	movs	r2, #1
 8008050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008052:	f7fd ff85 	bl	8005f60 <HAL_GetTick>
 8008056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008058:	e008      	b.n	800806c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800805a:	f7fd ff81 	bl	8005f60 <HAL_GetTick>
 800805e:	4602      	mov	r2, r0
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	1ad3      	subs	r3, r2, r3
 8008064:	2b02      	cmp	r3, #2
 8008066:	d901      	bls.n	800806c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008068:	2303      	movs	r3, #3
 800806a:	e1a5      	b.n	80083b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800806c:	4b46      	ldr	r3, [pc, #280]	; (8008188 <HAL_RCC_OscConfig+0x2ac>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 0302 	and.w	r3, r3, #2
 8008074:	2b00      	cmp	r3, #0
 8008076:	d0f0      	beq.n	800805a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008078:	4b43      	ldr	r3, [pc, #268]	; (8008188 <HAL_RCC_OscConfig+0x2ac>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	00db      	lsls	r3, r3, #3
 8008086:	4940      	ldr	r1, [pc, #256]	; (8008188 <HAL_RCC_OscConfig+0x2ac>)
 8008088:	4313      	orrs	r3, r2
 800808a:	600b      	str	r3, [r1, #0]
 800808c:	e015      	b.n	80080ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800808e:	4b3f      	ldr	r3, [pc, #252]	; (800818c <HAL_RCC_OscConfig+0x2b0>)
 8008090:	2200      	movs	r2, #0
 8008092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008094:	f7fd ff64 	bl	8005f60 <HAL_GetTick>
 8008098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800809a:	e008      	b.n	80080ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800809c:	f7fd ff60 	bl	8005f60 <HAL_GetTick>
 80080a0:	4602      	mov	r2, r0
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	1ad3      	subs	r3, r2, r3
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	d901      	bls.n	80080ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80080aa:	2303      	movs	r3, #3
 80080ac:	e184      	b.n	80083b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080ae:	4b36      	ldr	r3, [pc, #216]	; (8008188 <HAL_RCC_OscConfig+0x2ac>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 0302 	and.w	r3, r3, #2
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1f0      	bne.n	800809c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f003 0308 	and.w	r3, r3, #8
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d030      	beq.n	8008128 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	695b      	ldr	r3, [r3, #20]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d016      	beq.n	80080fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080ce:	4b30      	ldr	r3, [pc, #192]	; (8008190 <HAL_RCC_OscConfig+0x2b4>)
 80080d0:	2201      	movs	r2, #1
 80080d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080d4:	f7fd ff44 	bl	8005f60 <HAL_GetTick>
 80080d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080da:	e008      	b.n	80080ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080dc:	f7fd ff40 	bl	8005f60 <HAL_GetTick>
 80080e0:	4602      	mov	r2, r0
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	1ad3      	subs	r3, r2, r3
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d901      	bls.n	80080ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80080ea:	2303      	movs	r3, #3
 80080ec:	e164      	b.n	80083b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080ee:	4b26      	ldr	r3, [pc, #152]	; (8008188 <HAL_RCC_OscConfig+0x2ac>)
 80080f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080f2:	f003 0302 	and.w	r3, r3, #2
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d0f0      	beq.n	80080dc <HAL_RCC_OscConfig+0x200>
 80080fa:	e015      	b.n	8008128 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80080fc:	4b24      	ldr	r3, [pc, #144]	; (8008190 <HAL_RCC_OscConfig+0x2b4>)
 80080fe:	2200      	movs	r2, #0
 8008100:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008102:	f7fd ff2d 	bl	8005f60 <HAL_GetTick>
 8008106:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008108:	e008      	b.n	800811c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800810a:	f7fd ff29 	bl	8005f60 <HAL_GetTick>
 800810e:	4602      	mov	r2, r0
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	1ad3      	subs	r3, r2, r3
 8008114:	2b02      	cmp	r3, #2
 8008116:	d901      	bls.n	800811c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008118:	2303      	movs	r3, #3
 800811a:	e14d      	b.n	80083b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800811c:	4b1a      	ldr	r3, [pc, #104]	; (8008188 <HAL_RCC_OscConfig+0x2ac>)
 800811e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008120:	f003 0302 	and.w	r3, r3, #2
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1f0      	bne.n	800810a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 0304 	and.w	r3, r3, #4
 8008130:	2b00      	cmp	r3, #0
 8008132:	f000 80a0 	beq.w	8008276 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008136:	2300      	movs	r3, #0
 8008138:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800813a:	4b13      	ldr	r3, [pc, #76]	; (8008188 <HAL_RCC_OscConfig+0x2ac>)
 800813c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008142:	2b00      	cmp	r3, #0
 8008144:	d10f      	bne.n	8008166 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008146:	2300      	movs	r3, #0
 8008148:	60bb      	str	r3, [r7, #8]
 800814a:	4b0f      	ldr	r3, [pc, #60]	; (8008188 <HAL_RCC_OscConfig+0x2ac>)
 800814c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814e:	4a0e      	ldr	r2, [pc, #56]	; (8008188 <HAL_RCC_OscConfig+0x2ac>)
 8008150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008154:	6413      	str	r3, [r2, #64]	; 0x40
 8008156:	4b0c      	ldr	r3, [pc, #48]	; (8008188 <HAL_RCC_OscConfig+0x2ac>)
 8008158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800815e:	60bb      	str	r3, [r7, #8]
 8008160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008162:	2301      	movs	r3, #1
 8008164:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008166:	4b0b      	ldr	r3, [pc, #44]	; (8008194 <HAL_RCC_OscConfig+0x2b8>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800816e:	2b00      	cmp	r3, #0
 8008170:	d121      	bne.n	80081b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008172:	4b08      	ldr	r3, [pc, #32]	; (8008194 <HAL_RCC_OscConfig+0x2b8>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a07      	ldr	r2, [pc, #28]	; (8008194 <HAL_RCC_OscConfig+0x2b8>)
 8008178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800817c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800817e:	f7fd feef 	bl	8005f60 <HAL_GetTick>
 8008182:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008184:	e011      	b.n	80081aa <HAL_RCC_OscConfig+0x2ce>
 8008186:	bf00      	nop
 8008188:	40023800 	.word	0x40023800
 800818c:	42470000 	.word	0x42470000
 8008190:	42470e80 	.word	0x42470e80
 8008194:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008198:	f7fd fee2 	bl	8005f60 <HAL_GetTick>
 800819c:	4602      	mov	r2, r0
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	1ad3      	subs	r3, r2, r3
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d901      	bls.n	80081aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80081a6:	2303      	movs	r3, #3
 80081a8:	e106      	b.n	80083b8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081aa:	4b85      	ldr	r3, [pc, #532]	; (80083c0 <HAL_RCC_OscConfig+0x4e4>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d0f0      	beq.n	8008198 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d106      	bne.n	80081cc <HAL_RCC_OscConfig+0x2f0>
 80081be:	4b81      	ldr	r3, [pc, #516]	; (80083c4 <HAL_RCC_OscConfig+0x4e8>)
 80081c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081c2:	4a80      	ldr	r2, [pc, #512]	; (80083c4 <HAL_RCC_OscConfig+0x4e8>)
 80081c4:	f043 0301 	orr.w	r3, r3, #1
 80081c8:	6713      	str	r3, [r2, #112]	; 0x70
 80081ca:	e01c      	b.n	8008206 <HAL_RCC_OscConfig+0x32a>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	2b05      	cmp	r3, #5
 80081d2:	d10c      	bne.n	80081ee <HAL_RCC_OscConfig+0x312>
 80081d4:	4b7b      	ldr	r3, [pc, #492]	; (80083c4 <HAL_RCC_OscConfig+0x4e8>)
 80081d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d8:	4a7a      	ldr	r2, [pc, #488]	; (80083c4 <HAL_RCC_OscConfig+0x4e8>)
 80081da:	f043 0304 	orr.w	r3, r3, #4
 80081de:	6713      	str	r3, [r2, #112]	; 0x70
 80081e0:	4b78      	ldr	r3, [pc, #480]	; (80083c4 <HAL_RCC_OscConfig+0x4e8>)
 80081e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081e4:	4a77      	ldr	r2, [pc, #476]	; (80083c4 <HAL_RCC_OscConfig+0x4e8>)
 80081e6:	f043 0301 	orr.w	r3, r3, #1
 80081ea:	6713      	str	r3, [r2, #112]	; 0x70
 80081ec:	e00b      	b.n	8008206 <HAL_RCC_OscConfig+0x32a>
 80081ee:	4b75      	ldr	r3, [pc, #468]	; (80083c4 <HAL_RCC_OscConfig+0x4e8>)
 80081f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081f2:	4a74      	ldr	r2, [pc, #464]	; (80083c4 <HAL_RCC_OscConfig+0x4e8>)
 80081f4:	f023 0301 	bic.w	r3, r3, #1
 80081f8:	6713      	str	r3, [r2, #112]	; 0x70
 80081fa:	4b72      	ldr	r3, [pc, #456]	; (80083c4 <HAL_RCC_OscConfig+0x4e8>)
 80081fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081fe:	4a71      	ldr	r2, [pc, #452]	; (80083c4 <HAL_RCC_OscConfig+0x4e8>)
 8008200:	f023 0304 	bic.w	r3, r3, #4
 8008204:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d015      	beq.n	800823a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800820e:	f7fd fea7 	bl	8005f60 <HAL_GetTick>
 8008212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008214:	e00a      	b.n	800822c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008216:	f7fd fea3 	bl	8005f60 <HAL_GetTick>
 800821a:	4602      	mov	r2, r0
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	f241 3288 	movw	r2, #5000	; 0x1388
 8008224:	4293      	cmp	r3, r2
 8008226:	d901      	bls.n	800822c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008228:	2303      	movs	r3, #3
 800822a:	e0c5      	b.n	80083b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800822c:	4b65      	ldr	r3, [pc, #404]	; (80083c4 <HAL_RCC_OscConfig+0x4e8>)
 800822e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008230:	f003 0302 	and.w	r3, r3, #2
 8008234:	2b00      	cmp	r3, #0
 8008236:	d0ee      	beq.n	8008216 <HAL_RCC_OscConfig+0x33a>
 8008238:	e014      	b.n	8008264 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800823a:	f7fd fe91 	bl	8005f60 <HAL_GetTick>
 800823e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008240:	e00a      	b.n	8008258 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008242:	f7fd fe8d 	bl	8005f60 <HAL_GetTick>
 8008246:	4602      	mov	r2, r0
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	1ad3      	subs	r3, r2, r3
 800824c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008250:	4293      	cmp	r3, r2
 8008252:	d901      	bls.n	8008258 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008254:	2303      	movs	r3, #3
 8008256:	e0af      	b.n	80083b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008258:	4b5a      	ldr	r3, [pc, #360]	; (80083c4 <HAL_RCC_OscConfig+0x4e8>)
 800825a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800825c:	f003 0302 	and.w	r3, r3, #2
 8008260:	2b00      	cmp	r3, #0
 8008262:	d1ee      	bne.n	8008242 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008264:	7dfb      	ldrb	r3, [r7, #23]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d105      	bne.n	8008276 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800826a:	4b56      	ldr	r3, [pc, #344]	; (80083c4 <HAL_RCC_OscConfig+0x4e8>)
 800826c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826e:	4a55      	ldr	r2, [pc, #340]	; (80083c4 <HAL_RCC_OscConfig+0x4e8>)
 8008270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008274:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	699b      	ldr	r3, [r3, #24]
 800827a:	2b00      	cmp	r3, #0
 800827c:	f000 809b 	beq.w	80083b6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008280:	4b50      	ldr	r3, [pc, #320]	; (80083c4 <HAL_RCC_OscConfig+0x4e8>)
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	f003 030c 	and.w	r3, r3, #12
 8008288:	2b08      	cmp	r3, #8
 800828a:	d05c      	beq.n	8008346 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	699b      	ldr	r3, [r3, #24]
 8008290:	2b02      	cmp	r3, #2
 8008292:	d141      	bne.n	8008318 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008294:	4b4c      	ldr	r3, [pc, #304]	; (80083c8 <HAL_RCC_OscConfig+0x4ec>)
 8008296:	2200      	movs	r2, #0
 8008298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800829a:	f7fd fe61 	bl	8005f60 <HAL_GetTick>
 800829e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082a0:	e008      	b.n	80082b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082a2:	f7fd fe5d 	bl	8005f60 <HAL_GetTick>
 80082a6:	4602      	mov	r2, r0
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d901      	bls.n	80082b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80082b0:	2303      	movs	r3, #3
 80082b2:	e081      	b.n	80083b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082b4:	4b43      	ldr	r3, [pc, #268]	; (80083c4 <HAL_RCC_OscConfig+0x4e8>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1f0      	bne.n	80082a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	69da      	ldr	r2, [r3, #28]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a1b      	ldr	r3, [r3, #32]
 80082c8:	431a      	orrs	r2, r3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ce:	019b      	lsls	r3, r3, #6
 80082d0:	431a      	orrs	r2, r3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d6:	085b      	lsrs	r3, r3, #1
 80082d8:	3b01      	subs	r3, #1
 80082da:	041b      	lsls	r3, r3, #16
 80082dc:	431a      	orrs	r2, r3
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e2:	061b      	lsls	r3, r3, #24
 80082e4:	4937      	ldr	r1, [pc, #220]	; (80083c4 <HAL_RCC_OscConfig+0x4e8>)
 80082e6:	4313      	orrs	r3, r2
 80082e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80082ea:	4b37      	ldr	r3, [pc, #220]	; (80083c8 <HAL_RCC_OscConfig+0x4ec>)
 80082ec:	2201      	movs	r2, #1
 80082ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082f0:	f7fd fe36 	bl	8005f60 <HAL_GetTick>
 80082f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082f6:	e008      	b.n	800830a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082f8:	f7fd fe32 	bl	8005f60 <HAL_GetTick>
 80082fc:	4602      	mov	r2, r0
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	2b02      	cmp	r3, #2
 8008304:	d901      	bls.n	800830a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008306:	2303      	movs	r3, #3
 8008308:	e056      	b.n	80083b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800830a:	4b2e      	ldr	r3, [pc, #184]	; (80083c4 <HAL_RCC_OscConfig+0x4e8>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008312:	2b00      	cmp	r3, #0
 8008314:	d0f0      	beq.n	80082f8 <HAL_RCC_OscConfig+0x41c>
 8008316:	e04e      	b.n	80083b6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008318:	4b2b      	ldr	r3, [pc, #172]	; (80083c8 <HAL_RCC_OscConfig+0x4ec>)
 800831a:	2200      	movs	r2, #0
 800831c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800831e:	f7fd fe1f 	bl	8005f60 <HAL_GetTick>
 8008322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008324:	e008      	b.n	8008338 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008326:	f7fd fe1b 	bl	8005f60 <HAL_GetTick>
 800832a:	4602      	mov	r2, r0
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	2b02      	cmp	r3, #2
 8008332:	d901      	bls.n	8008338 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008334:	2303      	movs	r3, #3
 8008336:	e03f      	b.n	80083b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008338:	4b22      	ldr	r3, [pc, #136]	; (80083c4 <HAL_RCC_OscConfig+0x4e8>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008340:	2b00      	cmp	r3, #0
 8008342:	d1f0      	bne.n	8008326 <HAL_RCC_OscConfig+0x44a>
 8008344:	e037      	b.n	80083b6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	699b      	ldr	r3, [r3, #24]
 800834a:	2b01      	cmp	r3, #1
 800834c:	d101      	bne.n	8008352 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	e032      	b.n	80083b8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008352:	4b1c      	ldr	r3, [pc, #112]	; (80083c4 <HAL_RCC_OscConfig+0x4e8>)
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	699b      	ldr	r3, [r3, #24]
 800835c:	2b01      	cmp	r3, #1
 800835e:	d028      	beq.n	80083b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800836a:	429a      	cmp	r2, r3
 800836c:	d121      	bne.n	80083b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008378:	429a      	cmp	r2, r3
 800837a:	d11a      	bne.n	80083b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008382:	4013      	ands	r3, r2
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008388:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800838a:	4293      	cmp	r3, r2
 800838c:	d111      	bne.n	80083b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008398:	085b      	lsrs	r3, r3, #1
 800839a:	3b01      	subs	r3, #1
 800839c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800839e:	429a      	cmp	r2, r3
 80083a0:	d107      	bne.n	80083b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d001      	beq.n	80083b6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e000      	b.n	80083b8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3718      	adds	r7, #24
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	40007000 	.word	0x40007000
 80083c4:	40023800 	.word	0x40023800
 80083c8:	42470060 	.word	0x42470060

080083cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d101      	bne.n	80083e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	e0cc      	b.n	800857a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80083e0:	4b68      	ldr	r3, [pc, #416]	; (8008584 <HAL_RCC_ClockConfig+0x1b8>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 0307 	and.w	r3, r3, #7
 80083e8:	683a      	ldr	r2, [r7, #0]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d90c      	bls.n	8008408 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083ee:	4b65      	ldr	r3, [pc, #404]	; (8008584 <HAL_RCC_ClockConfig+0x1b8>)
 80083f0:	683a      	ldr	r2, [r7, #0]
 80083f2:	b2d2      	uxtb	r2, r2
 80083f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083f6:	4b63      	ldr	r3, [pc, #396]	; (8008584 <HAL_RCC_ClockConfig+0x1b8>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f003 0307 	and.w	r3, r3, #7
 80083fe:	683a      	ldr	r2, [r7, #0]
 8008400:	429a      	cmp	r2, r3
 8008402:	d001      	beq.n	8008408 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	e0b8      	b.n	800857a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f003 0302 	and.w	r3, r3, #2
 8008410:	2b00      	cmp	r3, #0
 8008412:	d020      	beq.n	8008456 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f003 0304 	and.w	r3, r3, #4
 800841c:	2b00      	cmp	r3, #0
 800841e:	d005      	beq.n	800842c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008420:	4b59      	ldr	r3, [pc, #356]	; (8008588 <HAL_RCC_ClockConfig+0x1bc>)
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	4a58      	ldr	r2, [pc, #352]	; (8008588 <HAL_RCC_ClockConfig+0x1bc>)
 8008426:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800842a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f003 0308 	and.w	r3, r3, #8
 8008434:	2b00      	cmp	r3, #0
 8008436:	d005      	beq.n	8008444 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008438:	4b53      	ldr	r3, [pc, #332]	; (8008588 <HAL_RCC_ClockConfig+0x1bc>)
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	4a52      	ldr	r2, [pc, #328]	; (8008588 <HAL_RCC_ClockConfig+0x1bc>)
 800843e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008442:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008444:	4b50      	ldr	r3, [pc, #320]	; (8008588 <HAL_RCC_ClockConfig+0x1bc>)
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	494d      	ldr	r1, [pc, #308]	; (8008588 <HAL_RCC_ClockConfig+0x1bc>)
 8008452:	4313      	orrs	r3, r2
 8008454:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 0301 	and.w	r3, r3, #1
 800845e:	2b00      	cmp	r3, #0
 8008460:	d044      	beq.n	80084ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	2b01      	cmp	r3, #1
 8008468:	d107      	bne.n	800847a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800846a:	4b47      	ldr	r3, [pc, #284]	; (8008588 <HAL_RCC_ClockConfig+0x1bc>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008472:	2b00      	cmp	r3, #0
 8008474:	d119      	bne.n	80084aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	e07f      	b.n	800857a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	2b02      	cmp	r3, #2
 8008480:	d003      	beq.n	800848a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008486:	2b03      	cmp	r3, #3
 8008488:	d107      	bne.n	800849a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800848a:	4b3f      	ldr	r3, [pc, #252]	; (8008588 <HAL_RCC_ClockConfig+0x1bc>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008492:	2b00      	cmp	r3, #0
 8008494:	d109      	bne.n	80084aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e06f      	b.n	800857a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800849a:	4b3b      	ldr	r3, [pc, #236]	; (8008588 <HAL_RCC_ClockConfig+0x1bc>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 0302 	and.w	r3, r3, #2
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d101      	bne.n	80084aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	e067      	b.n	800857a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80084aa:	4b37      	ldr	r3, [pc, #220]	; (8008588 <HAL_RCC_ClockConfig+0x1bc>)
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	f023 0203 	bic.w	r2, r3, #3
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	4934      	ldr	r1, [pc, #208]	; (8008588 <HAL_RCC_ClockConfig+0x1bc>)
 80084b8:	4313      	orrs	r3, r2
 80084ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80084bc:	f7fd fd50 	bl	8005f60 <HAL_GetTick>
 80084c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084c2:	e00a      	b.n	80084da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084c4:	f7fd fd4c 	bl	8005f60 <HAL_GetTick>
 80084c8:	4602      	mov	r2, r0
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	1ad3      	subs	r3, r2, r3
 80084ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d901      	bls.n	80084da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80084d6:	2303      	movs	r3, #3
 80084d8:	e04f      	b.n	800857a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084da:	4b2b      	ldr	r3, [pc, #172]	; (8008588 <HAL_RCC_ClockConfig+0x1bc>)
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	f003 020c 	and.w	r2, r3, #12
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d1eb      	bne.n	80084c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80084ec:	4b25      	ldr	r3, [pc, #148]	; (8008584 <HAL_RCC_ClockConfig+0x1b8>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 0307 	and.w	r3, r3, #7
 80084f4:	683a      	ldr	r2, [r7, #0]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d20c      	bcs.n	8008514 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084fa:	4b22      	ldr	r3, [pc, #136]	; (8008584 <HAL_RCC_ClockConfig+0x1b8>)
 80084fc:	683a      	ldr	r2, [r7, #0]
 80084fe:	b2d2      	uxtb	r2, r2
 8008500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008502:	4b20      	ldr	r3, [pc, #128]	; (8008584 <HAL_RCC_ClockConfig+0x1b8>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 0307 	and.w	r3, r3, #7
 800850a:	683a      	ldr	r2, [r7, #0]
 800850c:	429a      	cmp	r2, r3
 800850e:	d001      	beq.n	8008514 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008510:	2301      	movs	r3, #1
 8008512:	e032      	b.n	800857a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 0304 	and.w	r3, r3, #4
 800851c:	2b00      	cmp	r3, #0
 800851e:	d008      	beq.n	8008532 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008520:	4b19      	ldr	r3, [pc, #100]	; (8008588 <HAL_RCC_ClockConfig+0x1bc>)
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	4916      	ldr	r1, [pc, #88]	; (8008588 <HAL_RCC_ClockConfig+0x1bc>)
 800852e:	4313      	orrs	r3, r2
 8008530:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f003 0308 	and.w	r3, r3, #8
 800853a:	2b00      	cmp	r3, #0
 800853c:	d009      	beq.n	8008552 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800853e:	4b12      	ldr	r3, [pc, #72]	; (8008588 <HAL_RCC_ClockConfig+0x1bc>)
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	00db      	lsls	r3, r3, #3
 800854c:	490e      	ldr	r1, [pc, #56]	; (8008588 <HAL_RCC_ClockConfig+0x1bc>)
 800854e:	4313      	orrs	r3, r2
 8008550:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008552:	f000 f821 	bl	8008598 <HAL_RCC_GetSysClockFreq>
 8008556:	4602      	mov	r2, r0
 8008558:	4b0b      	ldr	r3, [pc, #44]	; (8008588 <HAL_RCC_ClockConfig+0x1bc>)
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	091b      	lsrs	r3, r3, #4
 800855e:	f003 030f 	and.w	r3, r3, #15
 8008562:	490a      	ldr	r1, [pc, #40]	; (800858c <HAL_RCC_ClockConfig+0x1c0>)
 8008564:	5ccb      	ldrb	r3, [r1, r3]
 8008566:	fa22 f303 	lsr.w	r3, r2, r3
 800856a:	4a09      	ldr	r2, [pc, #36]	; (8008590 <HAL_RCC_ClockConfig+0x1c4>)
 800856c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800856e:	4b09      	ldr	r3, [pc, #36]	; (8008594 <HAL_RCC_ClockConfig+0x1c8>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4618      	mov	r0, r3
 8008574:	f7fd fcb0 	bl	8005ed8 <HAL_InitTick>

  return HAL_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	40023c00 	.word	0x40023c00
 8008588:	40023800 	.word	0x40023800
 800858c:	080160b0 	.word	0x080160b0
 8008590:	20000004 	.word	0x20000004
 8008594:	20000050 	.word	0x20000050

08008598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008598:	b5b0      	push	{r4, r5, r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800859e:	2100      	movs	r1, #0
 80085a0:	6079      	str	r1, [r7, #4]
 80085a2:	2100      	movs	r1, #0
 80085a4:	60f9      	str	r1, [r7, #12]
 80085a6:	2100      	movs	r1, #0
 80085a8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80085aa:	2100      	movs	r1, #0
 80085ac:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80085ae:	4952      	ldr	r1, [pc, #328]	; (80086f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80085b0:	6889      	ldr	r1, [r1, #8]
 80085b2:	f001 010c 	and.w	r1, r1, #12
 80085b6:	2908      	cmp	r1, #8
 80085b8:	d00d      	beq.n	80085d6 <HAL_RCC_GetSysClockFreq+0x3e>
 80085ba:	2908      	cmp	r1, #8
 80085bc:	f200 8094 	bhi.w	80086e8 <HAL_RCC_GetSysClockFreq+0x150>
 80085c0:	2900      	cmp	r1, #0
 80085c2:	d002      	beq.n	80085ca <HAL_RCC_GetSysClockFreq+0x32>
 80085c4:	2904      	cmp	r1, #4
 80085c6:	d003      	beq.n	80085d0 <HAL_RCC_GetSysClockFreq+0x38>
 80085c8:	e08e      	b.n	80086e8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80085ca:	4b4c      	ldr	r3, [pc, #304]	; (80086fc <HAL_RCC_GetSysClockFreq+0x164>)
 80085cc:	60bb      	str	r3, [r7, #8]
       break;
 80085ce:	e08e      	b.n	80086ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80085d0:	4b4b      	ldr	r3, [pc, #300]	; (8008700 <HAL_RCC_GetSysClockFreq+0x168>)
 80085d2:	60bb      	str	r3, [r7, #8]
      break;
 80085d4:	e08b      	b.n	80086ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80085d6:	4948      	ldr	r1, [pc, #288]	; (80086f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80085d8:	6849      	ldr	r1, [r1, #4]
 80085da:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80085de:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80085e0:	4945      	ldr	r1, [pc, #276]	; (80086f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80085e2:	6849      	ldr	r1, [r1, #4]
 80085e4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80085e8:	2900      	cmp	r1, #0
 80085ea:	d024      	beq.n	8008636 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085ec:	4942      	ldr	r1, [pc, #264]	; (80086f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80085ee:	6849      	ldr	r1, [r1, #4]
 80085f0:	0989      	lsrs	r1, r1, #6
 80085f2:	4608      	mov	r0, r1
 80085f4:	f04f 0100 	mov.w	r1, #0
 80085f8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80085fc:	f04f 0500 	mov.w	r5, #0
 8008600:	ea00 0204 	and.w	r2, r0, r4
 8008604:	ea01 0305 	and.w	r3, r1, r5
 8008608:	493d      	ldr	r1, [pc, #244]	; (8008700 <HAL_RCC_GetSysClockFreq+0x168>)
 800860a:	fb01 f003 	mul.w	r0, r1, r3
 800860e:	2100      	movs	r1, #0
 8008610:	fb01 f102 	mul.w	r1, r1, r2
 8008614:	1844      	adds	r4, r0, r1
 8008616:	493a      	ldr	r1, [pc, #232]	; (8008700 <HAL_RCC_GetSysClockFreq+0x168>)
 8008618:	fba2 0101 	umull	r0, r1, r2, r1
 800861c:	1863      	adds	r3, r4, r1
 800861e:	4619      	mov	r1, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	461a      	mov	r2, r3
 8008624:	f04f 0300 	mov.w	r3, #0
 8008628:	f7f8 fb36 	bl	8000c98 <__aeabi_uldivmod>
 800862c:	4602      	mov	r2, r0
 800862e:	460b      	mov	r3, r1
 8008630:	4613      	mov	r3, r2
 8008632:	60fb      	str	r3, [r7, #12]
 8008634:	e04a      	b.n	80086cc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008636:	4b30      	ldr	r3, [pc, #192]	; (80086f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	099b      	lsrs	r3, r3, #6
 800863c:	461a      	mov	r2, r3
 800863e:	f04f 0300 	mov.w	r3, #0
 8008642:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008646:	f04f 0100 	mov.w	r1, #0
 800864a:	ea02 0400 	and.w	r4, r2, r0
 800864e:	ea03 0501 	and.w	r5, r3, r1
 8008652:	4620      	mov	r0, r4
 8008654:	4629      	mov	r1, r5
 8008656:	f04f 0200 	mov.w	r2, #0
 800865a:	f04f 0300 	mov.w	r3, #0
 800865e:	014b      	lsls	r3, r1, #5
 8008660:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008664:	0142      	lsls	r2, r0, #5
 8008666:	4610      	mov	r0, r2
 8008668:	4619      	mov	r1, r3
 800866a:	1b00      	subs	r0, r0, r4
 800866c:	eb61 0105 	sbc.w	r1, r1, r5
 8008670:	f04f 0200 	mov.w	r2, #0
 8008674:	f04f 0300 	mov.w	r3, #0
 8008678:	018b      	lsls	r3, r1, #6
 800867a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800867e:	0182      	lsls	r2, r0, #6
 8008680:	1a12      	subs	r2, r2, r0
 8008682:	eb63 0301 	sbc.w	r3, r3, r1
 8008686:	f04f 0000 	mov.w	r0, #0
 800868a:	f04f 0100 	mov.w	r1, #0
 800868e:	00d9      	lsls	r1, r3, #3
 8008690:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008694:	00d0      	lsls	r0, r2, #3
 8008696:	4602      	mov	r2, r0
 8008698:	460b      	mov	r3, r1
 800869a:	1912      	adds	r2, r2, r4
 800869c:	eb45 0303 	adc.w	r3, r5, r3
 80086a0:	f04f 0000 	mov.w	r0, #0
 80086a4:	f04f 0100 	mov.w	r1, #0
 80086a8:	0299      	lsls	r1, r3, #10
 80086aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80086ae:	0290      	lsls	r0, r2, #10
 80086b0:	4602      	mov	r2, r0
 80086b2:	460b      	mov	r3, r1
 80086b4:	4610      	mov	r0, r2
 80086b6:	4619      	mov	r1, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	461a      	mov	r2, r3
 80086bc:	f04f 0300 	mov.w	r3, #0
 80086c0:	f7f8 faea 	bl	8000c98 <__aeabi_uldivmod>
 80086c4:	4602      	mov	r2, r0
 80086c6:	460b      	mov	r3, r1
 80086c8:	4613      	mov	r3, r2
 80086ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80086cc:	4b0a      	ldr	r3, [pc, #40]	; (80086f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	0c1b      	lsrs	r3, r3, #16
 80086d2:	f003 0303 	and.w	r3, r3, #3
 80086d6:	3301      	adds	r3, #1
 80086d8:	005b      	lsls	r3, r3, #1
 80086da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80086e4:	60bb      	str	r3, [r7, #8]
      break;
 80086e6:	e002      	b.n	80086ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80086e8:	4b04      	ldr	r3, [pc, #16]	; (80086fc <HAL_RCC_GetSysClockFreq+0x164>)
 80086ea:	60bb      	str	r3, [r7, #8]
      break;
 80086ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80086ee:	68bb      	ldr	r3, [r7, #8]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3710      	adds	r7, #16
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bdb0      	pop	{r4, r5, r7, pc}
 80086f8:	40023800 	.word	0x40023800
 80086fc:	00f42400 	.word	0x00f42400
 8008700:	017d7840 	.word	0x017d7840

08008704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008704:	b480      	push	{r7}
 8008706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008708:	4b03      	ldr	r3, [pc, #12]	; (8008718 <HAL_RCC_GetHCLKFreq+0x14>)
 800870a:	681b      	ldr	r3, [r3, #0]
}
 800870c:	4618      	mov	r0, r3
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	20000004 	.word	0x20000004

0800871c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008720:	f7ff fff0 	bl	8008704 <HAL_RCC_GetHCLKFreq>
 8008724:	4602      	mov	r2, r0
 8008726:	4b05      	ldr	r3, [pc, #20]	; (800873c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	0a9b      	lsrs	r3, r3, #10
 800872c:	f003 0307 	and.w	r3, r3, #7
 8008730:	4903      	ldr	r1, [pc, #12]	; (8008740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008732:	5ccb      	ldrb	r3, [r1, r3]
 8008734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008738:	4618      	mov	r0, r3
 800873a:	bd80      	pop	{r7, pc}
 800873c:	40023800 	.word	0x40023800
 8008740:	080160c0 	.word	0x080160c0

08008744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008748:	f7ff ffdc 	bl	8008704 <HAL_RCC_GetHCLKFreq>
 800874c:	4602      	mov	r2, r0
 800874e:	4b05      	ldr	r3, [pc, #20]	; (8008764 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	0b5b      	lsrs	r3, r3, #13
 8008754:	f003 0307 	and.w	r3, r3, #7
 8008758:	4903      	ldr	r1, [pc, #12]	; (8008768 <HAL_RCC_GetPCLK2Freq+0x24>)
 800875a:	5ccb      	ldrb	r3, [r1, r3]
 800875c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008760:	4618      	mov	r0, r3
 8008762:	bd80      	pop	{r7, pc}
 8008764:	40023800 	.word	0x40023800
 8008768:	080160c0 	.word	0x080160c0

0800876c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d101      	bne.n	800877e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	e022      	b.n	80087c4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008784:	b2db      	uxtb	r3, r3
 8008786:	2b00      	cmp	r3, #0
 8008788:	d105      	bne.n	8008796 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f7fb fbe5 	bl	8003f60 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2203      	movs	r2, #3
 800879a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 f814 	bl	80087cc <HAL_SD_InitCard>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e00a      	b.n	80087c4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2201      	movs	r2, #1
 80087be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3708      	adds	r7, #8
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80087cc:	b5b0      	push	{r4, r5, r7, lr}
 80087ce:	b08e      	sub	sp, #56	; 0x38
 80087d0:	af04      	add	r7, sp, #16
 80087d2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80087d4:	2300      	movs	r3, #0
 80087d6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80087d8:	2300      	movs	r3, #0
 80087da:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80087dc:	2300      	movs	r3, #0
 80087de:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80087e0:	2300      	movs	r3, #0
 80087e2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80087e4:	2300      	movs	r3, #0
 80087e6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80087e8:	2376      	movs	r3, #118	; 0x76
 80087ea:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681d      	ldr	r5, [r3, #0]
 80087f0:	466c      	mov	r4, sp
 80087f2:	f107 0314 	add.w	r3, r7, #20
 80087f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80087fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80087fe:	f107 0308 	add.w	r3, r7, #8
 8008802:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008804:	4628      	mov	r0, r5
 8008806:	f001 fff3 	bl	800a7f0 <SDIO_Init>
 800880a:	4603      	mov	r3, r0
 800880c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008810:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008814:	2b00      	cmp	r3, #0
 8008816:	d001      	beq.n	800881c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	e04c      	b.n	80088b6 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800881c:	4b28      	ldr	r3, [pc, #160]	; (80088c0 <HAL_SD_InitCard+0xf4>)
 800881e:	2200      	movs	r2, #0
 8008820:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4618      	mov	r0, r3
 8008828:	f002 f82b 	bl	800a882 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800882c:	4b24      	ldr	r3, [pc, #144]	; (80088c0 <HAL_SD_InitCard+0xf4>)
 800882e:	2201      	movs	r2, #1
 8008830:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 fe68 	bl	8009508 <SD_PowerON>
 8008838:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800883a:	6a3b      	ldr	r3, [r7, #32]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00b      	beq.n	8008858 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800884c:	6a3b      	ldr	r3, [r7, #32]
 800884e:	431a      	orrs	r2, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	e02e      	b.n	80088b6 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fd89 	bl	8009370 <SD_InitCard>
 800885e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008860:	6a3b      	ldr	r3, [r7, #32]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d00b      	beq.n	800887e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2201      	movs	r2, #1
 800886a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008872:	6a3b      	ldr	r3, [r7, #32]
 8008874:	431a      	orrs	r2, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	e01b      	b.n	80088b6 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008886:	4618      	mov	r0, r3
 8008888:	f002 f88e 	bl	800a9a8 <SDMMC_CmdBlockLength>
 800888c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800888e:	6a3b      	ldr	r3, [r7, #32]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d00f      	beq.n	80088b4 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a0a      	ldr	r2, [pc, #40]	; (80088c4 <HAL_SD_InitCard+0xf8>)
 800889a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088a0:	6a3b      	ldr	r3, [r7, #32]
 80088a2:	431a      	orrs	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	e000      	b.n	80088b6 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3728      	adds	r7, #40	; 0x28
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bdb0      	pop	{r4, r5, r7, pc}
 80088be:	bf00      	nop
 80088c0:	422580a0 	.word	0x422580a0
 80088c4:	004005ff 	.word	0x004005ff

080088c8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b092      	sub	sp, #72	; 0x48
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	607a      	str	r2, [r7, #4]
 80088d4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80088d6:	f7fd fb43 	bl	8005f60 <HAL_GetTick>
 80088da:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d107      	bne.n	80088fa <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	e1bd      	b.n	8008c76 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008900:	b2db      	uxtb	r3, r3
 8008902:	2b01      	cmp	r3, #1
 8008904:	f040 81b0 	bne.w	8008c68 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800890e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	441a      	add	r2, r3
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008918:	429a      	cmp	r2, r3
 800891a:	d907      	bls.n	800892c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008920:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	e1a4      	b.n	8008c76 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2203      	movs	r2, #3
 8008930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2200      	movs	r2, #0
 800893a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008940:	2b01      	cmp	r3, #1
 8008942:	d002      	beq.n	800894a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008946:	025b      	lsls	r3, r3, #9
 8008948:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800894a:	f04f 33ff 	mov.w	r3, #4294967295
 800894e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	025b      	lsls	r3, r3, #9
 8008954:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008956:	2390      	movs	r3, #144	; 0x90
 8008958:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800895a:	2302      	movs	r3, #2
 800895c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800895e:	2300      	movs	r3, #0
 8008960:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008962:	2301      	movs	r3, #1
 8008964:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f107 0214 	add.w	r2, r7, #20
 800896e:	4611      	mov	r1, r2
 8008970:	4618      	mov	r0, r3
 8008972:	f001 ffed 	bl	800a950 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	2b01      	cmp	r3, #1
 800897a:	d90a      	bls.n	8008992 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2202      	movs	r2, #2
 8008980:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008988:	4618      	mov	r0, r3
 800898a:	f002 f851 	bl	800aa30 <SDMMC_CmdReadMultiBlock>
 800898e:	6478      	str	r0, [r7, #68]	; 0x44
 8008990:	e009      	b.n	80089a6 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2201      	movs	r2, #1
 8008996:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800899e:	4618      	mov	r0, r3
 80089a0:	f002 f824 	bl	800a9ec <SDMMC_CmdReadSingleBlock>
 80089a4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80089a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d012      	beq.n	80089d2 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a7a      	ldr	r2, [pc, #488]	; (8008b9c <HAL_SD_ReadBlocks+0x2d4>)
 80089b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089ba:	431a      	orrs	r2, r3
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	e151      	b.n	8008c76 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80089d6:	e061      	b.n	8008a9c <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d03c      	beq.n	8008a60 <HAL_SD_ReadBlocks+0x198>
 80089e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d039      	beq.n	8008a60 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80089ec:	2300      	movs	r3, #0
 80089ee:	643b      	str	r3, [r7, #64]	; 0x40
 80089f0:	e033      	b.n	8008a5a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4618      	mov	r0, r3
 80089f8:	f001 ff25 	bl	800a846 <SDIO_ReadFIFO>
 80089fc:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80089fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a00:	b2da      	uxtb	r2, r3
 8008a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a04:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a08:	3301      	adds	r3, #1
 8008a0a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a0e:	3b01      	subs	r3, #1
 8008a10:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a14:	0a1b      	lsrs	r3, r3, #8
 8008a16:	b2da      	uxtb	r2, r3
 8008a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a1a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a1e:	3301      	adds	r3, #1
 8008a20:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a24:	3b01      	subs	r3, #1
 8008a26:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2a:	0c1b      	lsrs	r3, r3, #16
 8008a2c:	b2da      	uxtb	r2, r3
 8008a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a30:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a34:	3301      	adds	r3, #1
 8008a36:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a40:	0e1b      	lsrs	r3, r3, #24
 8008a42:	b2da      	uxtb	r2, r3
 8008a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a46:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a50:	3b01      	subs	r3, #1
 8008a52:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8008a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a56:	3301      	adds	r3, #1
 8008a58:	643b      	str	r3, [r7, #64]	; 0x40
 8008a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a5c:	2b07      	cmp	r3, #7
 8008a5e:	d9c8      	bls.n	80089f2 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008a60:	f7fd fa7e 	bl	8005f60 <HAL_GetTick>
 8008a64:	4602      	mov	r2, r0
 8008a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d902      	bls.n	8008a76 <HAL_SD_ReadBlocks+0x1ae>
 8008a70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d112      	bne.n	8008a9c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a48      	ldr	r2, [pc, #288]	; (8008b9c <HAL_SD_ReadBlocks+0x2d4>)
 8008a7c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a82:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008a98:	2303      	movs	r3, #3
 8008a9a:	e0ec      	b.n	8008c76 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008aa2:	f240 332a 	movw	r3, #810	; 0x32a
 8008aa6:	4013      	ands	r3, r2
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d095      	beq.n	80089d8 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d022      	beq.n	8008b00 <HAL_SD_ReadBlocks+0x238>
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d91f      	bls.n	8008b00 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ac4:	2b03      	cmp	r3, #3
 8008ac6:	d01b      	beq.n	8008b00 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4618      	mov	r0, r3
 8008ace:	f002 f815 	bl	800aafc <SDMMC_CmdStopTransfer>
 8008ad2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d012      	beq.n	8008b00 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a2f      	ldr	r2, [pc, #188]	; (8008b9c <HAL_SD_ReadBlocks+0x2d4>)
 8008ae0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ae6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ae8:	431a      	orrs	r2, r3
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2201      	movs	r2, #1
 8008af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2200      	movs	r2, #0
 8008afa:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008afc:	2301      	movs	r3, #1
 8008afe:	e0ba      	b.n	8008c76 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b06:	f003 0308 	and.w	r3, r3, #8
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d012      	beq.n	8008b34 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a22      	ldr	r2, [pc, #136]	; (8008b9c <HAL_SD_ReadBlocks+0x2d4>)
 8008b14:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b1a:	f043 0208 	orr.w	r2, r3, #8
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2201      	movs	r2, #1
 8008b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008b30:	2301      	movs	r3, #1
 8008b32:	e0a0      	b.n	8008c76 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b3a:	f003 0302 	and.w	r3, r3, #2
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d012      	beq.n	8008b68 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a15      	ldr	r2, [pc, #84]	; (8008b9c <HAL_SD_ReadBlocks+0x2d4>)
 8008b48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4e:	f043 0202 	orr.w	r2, r3, #2
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2200      	movs	r2, #0
 8008b62:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008b64:	2301      	movs	r3, #1
 8008b66:	e086      	b.n	8008c76 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b6e:	f003 0320 	and.w	r3, r3, #32
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d063      	beq.n	8008c3e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a08      	ldr	r2, [pc, #32]	; (8008b9c <HAL_SD_ReadBlocks+0x2d4>)
 8008b7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b82:	f043 0220 	orr.w	r2, r3, #32
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2200      	movs	r2, #0
 8008b96:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e06c      	b.n	8008c76 <HAL_SD_ReadBlocks+0x3ae>
 8008b9c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f001 fe4e 	bl	800a846 <SDIO_ReadFIFO>
 8008baa:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8008bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bae:	b2da      	uxtb	r2, r3
 8008bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bbc:	3b01      	subs	r3, #1
 8008bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc2:	0a1b      	lsrs	r3, r3, #8
 8008bc4:	b2da      	uxtb	r2, r3
 8008bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bc8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bcc:	3301      	adds	r3, #1
 8008bce:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bd2:	3b01      	subs	r3, #1
 8008bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd8:	0c1b      	lsrs	r3, r3, #16
 8008bda:	b2da      	uxtb	r2, r3
 8008bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bde:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008be2:	3301      	adds	r3, #1
 8008be4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008be8:	3b01      	subs	r3, #1
 8008bea:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bee:	0e1b      	lsrs	r3, r3, #24
 8008bf0:	b2da      	uxtb	r2, r3
 8008bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bf4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008c02:	f7fd f9ad 	bl	8005f60 <HAL_GetTick>
 8008c06:	4602      	mov	r2, r0
 8008c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c0a:	1ad3      	subs	r3, r2, r3
 8008c0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d902      	bls.n	8008c18 <HAL_SD_ReadBlocks+0x350>
 8008c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d112      	bne.n	8008c3e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a18      	ldr	r2, [pc, #96]	; (8008c80 <HAL_SD_ReadBlocks+0x3b8>)
 8008c1e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c24:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2200      	movs	r2, #0
 8008c38:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e01b      	b.n	8008c76 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d002      	beq.n	8008c52 <HAL_SD_ReadBlocks+0x38a>
 8008c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d1a6      	bne.n	8008ba0 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f240 523a 	movw	r2, #1338	; 0x53a
 8008c5a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008c64:	2300      	movs	r3, #0
 8008c66:	e006      	b.n	8008c76 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c6c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008c74:	2301      	movs	r3, #1
  }
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3748      	adds	r7, #72	; 0x48
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	004005ff 	.word	0x004005ff

08008c84 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b092      	sub	sp, #72	; 0x48
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	60b9      	str	r1, [r7, #8]
 8008c8e:	607a      	str	r2, [r7, #4]
 8008c90:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008c92:	f7fd f965 	bl	8005f60 <HAL_GetTick>
 8008c96:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d107      	bne.n	8008cb6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008caa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e166      	b.n	8008f84 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	f040 8159 	bne.w	8008f76 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008cca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	441a      	add	r2, r3
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d907      	bls.n	8008ce8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cdc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e14d      	b.n	8008f84 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2203      	movs	r2, #3
 8008cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d002      	beq.n	8008d06 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d02:	025b      	lsls	r3, r3, #9
 8008d04:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008d06:	f04f 33ff 	mov.w	r3, #4294967295
 8008d0a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	025b      	lsls	r3, r3, #9
 8008d10:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008d12:	2390      	movs	r3, #144	; 0x90
 8008d14:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8008d16:	2300      	movs	r3, #0
 8008d18:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f107 0218 	add.w	r2, r7, #24
 8008d2a:	4611      	mov	r1, r2
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f001 fe0f 	bl	800a950 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d90a      	bls.n	8008d4e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2220      	movs	r2, #32
 8008d3c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d44:	4618      	mov	r0, r3
 8008d46:	f001 feb7 	bl	800aab8 <SDMMC_CmdWriteMultiBlock>
 8008d4a:	6478      	str	r0, [r7, #68]	; 0x44
 8008d4c:	e009      	b.n	8008d62 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2210      	movs	r2, #16
 8008d52:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f001 fe8a 	bl	800aa74 <SDMMC_CmdWriteSingleBlock>
 8008d60:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d012      	beq.n	8008d8e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a87      	ldr	r2, [pc, #540]	; (8008f8c <HAL_SD_WriteBlocks+0x308>)
 8008d6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d76:	431a      	orrs	r2, r3
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2200      	movs	r2, #0
 8008d88:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e0fa      	b.n	8008f84 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008d92:	e065      	b.n	8008e60 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d040      	beq.n	8008e24 <HAL_SD_WriteBlocks+0x1a0>
 8008da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d03d      	beq.n	8008e24 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8008da8:	2300      	movs	r3, #0
 8008daa:	643b      	str	r3, [r7, #64]	; 0x40
 8008dac:	e037      	b.n	8008e1e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8008dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db6:	3301      	adds	r3, #1
 8008db8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	021a      	lsls	r2, r3, #8
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dce:	3301      	adds	r3, #1
 8008dd0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dd4:	3b01      	subs	r3, #1
 8008dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	041a      	lsls	r2, r3, #16
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	4313      	orrs	r3, r2
 8008de2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de6:	3301      	adds	r3, #1
 8008de8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dec:	3b01      	subs	r3, #1
 8008dee:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	061a      	lsls	r2, r3, #24
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dfe:	3301      	adds	r3, #1
 8008e00:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e04:	3b01      	subs	r3, #1
 8008e06:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f107 0214 	add.w	r2, r7, #20
 8008e10:	4611      	mov	r1, r2
 8008e12:	4618      	mov	r0, r3
 8008e14:	f001 fd24 	bl	800a860 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	643b      	str	r3, [r7, #64]	; 0x40
 8008e1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e20:	2b07      	cmp	r3, #7
 8008e22:	d9c4      	bls.n	8008dae <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008e24:	f7fd f89c 	bl	8005f60 <HAL_GetTick>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2c:	1ad3      	subs	r3, r2, r3
 8008e2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d902      	bls.n	8008e3a <HAL_SD_WriteBlocks+0x1b6>
 8008e34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d112      	bne.n	8008e60 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a53      	ldr	r2, [pc, #332]	; (8008f8c <HAL_SD_WriteBlocks+0x308>)
 8008e40:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e48:	431a      	orrs	r2, r3
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2201      	movs	r2, #1
 8008e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	e091      	b.n	8008f84 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e66:	f240 331a 	movw	r3, #794	; 0x31a
 8008e6a:	4013      	ands	r3, r2
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d091      	beq.n	8008d94 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d022      	beq.n	8008ec4 <HAL_SD_WriteBlocks+0x240>
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d91f      	bls.n	8008ec4 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e88:	2b03      	cmp	r3, #3
 8008e8a:	d01b      	beq.n	8008ec4 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4618      	mov	r0, r3
 8008e92:	f001 fe33 	bl	800aafc <SDMMC_CmdStopTransfer>
 8008e96:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d012      	beq.n	8008ec4 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a3a      	ldr	r2, [pc, #232]	; (8008f8c <HAL_SD_WriteBlocks+0x308>)
 8008ea4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008eaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008eac:	431a      	orrs	r2, r3
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e05f      	b.n	8008f84 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eca:	f003 0308 	and.w	r3, r3, #8
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d012      	beq.n	8008ef8 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a2d      	ldr	r2, [pc, #180]	; (8008f8c <HAL_SD_WriteBlocks+0x308>)
 8008ed8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ede:	f043 0208 	orr.w	r2, r3, #8
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e045      	b.n	8008f84 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008efe:	f003 0302 	and.w	r3, r3, #2
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d012      	beq.n	8008f2c <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a20      	ldr	r2, [pc, #128]	; (8008f8c <HAL_SD_WriteBlocks+0x308>)
 8008f0c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f12:	f043 0202 	orr.w	r2, r3, #2
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2200      	movs	r2, #0
 8008f26:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e02b      	b.n	8008f84 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f32:	f003 0310 	and.w	r3, r3, #16
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d012      	beq.n	8008f60 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a13      	ldr	r2, [pc, #76]	; (8008f8c <HAL_SD_WriteBlocks+0x308>)
 8008f40:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f46:	f043 0210 	orr.w	r2, r3, #16
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2201      	movs	r2, #1
 8008f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e011      	b.n	8008f84 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f240 523a 	movw	r2, #1338	; 0x53a
 8008f68:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008f72:	2300      	movs	r3, #0
 8008f74:	e006      	b.n	8008f84 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f7a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008f82:	2301      	movs	r3, #1
  }
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3748      	adds	r7, #72	; 0x48
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	004005ff 	.word	0x004005ff

08008f90 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f9e:	0f9b      	lsrs	r3, r3, #30
 8008fa0:	b2da      	uxtb	r2, r3
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008faa:	0e9b      	lsrs	r3, r3, #26
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	f003 030f 	and.w	r3, r3, #15
 8008fb2:	b2da      	uxtb	r2, r3
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fbc:	0e1b      	lsrs	r3, r3, #24
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	f003 0303 	and.w	r3, r3, #3
 8008fc4:	b2da      	uxtb	r2, r3
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fce:	0c1b      	lsrs	r3, r3, #16
 8008fd0:	b2da      	uxtb	r2, r3
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fda:	0a1b      	lsrs	r3, r3, #8
 8008fdc:	b2da      	uxtb	r2, r3
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fe6:	b2da      	uxtb	r2, r3
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ff0:	0d1b      	lsrs	r3, r3, #20
 8008ff2:	b29a      	uxth	r2, r3
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ffc:	0c1b      	lsrs	r3, r3, #16
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	f003 030f 	and.w	r3, r3, #15
 8009004:	b2da      	uxtb	r2, r3
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800900e:	0bdb      	lsrs	r3, r3, #15
 8009010:	b2db      	uxtb	r3, r3
 8009012:	f003 0301 	and.w	r3, r3, #1
 8009016:	b2da      	uxtb	r2, r3
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009020:	0b9b      	lsrs	r3, r3, #14
 8009022:	b2db      	uxtb	r3, r3
 8009024:	f003 0301 	and.w	r3, r3, #1
 8009028:	b2da      	uxtb	r2, r3
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009032:	0b5b      	lsrs	r3, r3, #13
 8009034:	b2db      	uxtb	r3, r3
 8009036:	f003 0301 	and.w	r3, r3, #1
 800903a:	b2da      	uxtb	r2, r3
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009044:	0b1b      	lsrs	r3, r3, #12
 8009046:	b2db      	uxtb	r3, r3
 8009048:	f003 0301 	and.w	r3, r3, #1
 800904c:	b2da      	uxtb	r2, r3
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	2200      	movs	r2, #0
 8009056:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800905c:	2b00      	cmp	r3, #0
 800905e:	d163      	bne.n	8009128 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009064:	009a      	lsls	r2, r3, #2
 8009066:	f640 73fc 	movw	r3, #4092	; 0xffc
 800906a:	4013      	ands	r3, r2
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009070:	0f92      	lsrs	r2, r2, #30
 8009072:	431a      	orrs	r2, r3
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800907c:	0edb      	lsrs	r3, r3, #27
 800907e:	b2db      	uxtb	r3, r3
 8009080:	f003 0307 	and.w	r3, r3, #7
 8009084:	b2da      	uxtb	r2, r3
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800908e:	0e1b      	lsrs	r3, r3, #24
 8009090:	b2db      	uxtb	r3, r3
 8009092:	f003 0307 	and.w	r3, r3, #7
 8009096:	b2da      	uxtb	r2, r3
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090a0:	0d5b      	lsrs	r3, r3, #21
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	f003 0307 	and.w	r3, r3, #7
 80090a8:	b2da      	uxtb	r2, r3
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090b2:	0c9b      	lsrs	r3, r3, #18
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	f003 0307 	and.w	r3, r3, #7
 80090ba:	b2da      	uxtb	r2, r3
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090c4:	0bdb      	lsrs	r3, r3, #15
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	f003 0307 	and.w	r3, r3, #7
 80090cc:	b2da      	uxtb	r2, r3
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	1c5a      	adds	r2, r3, #1
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	7e1b      	ldrb	r3, [r3, #24]
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	f003 0307 	and.w	r3, r3, #7
 80090e6:	3302      	adds	r3, #2
 80090e8:	2201      	movs	r2, #1
 80090ea:	fa02 f303 	lsl.w	r3, r2, r3
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80090f2:	fb02 f203 	mul.w	r2, r2, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	7a1b      	ldrb	r3, [r3, #8]
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	f003 030f 	and.w	r3, r3, #15
 8009104:	2201      	movs	r2, #1
 8009106:	409a      	lsls	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009114:	0a52      	lsrs	r2, r2, #9
 8009116:	fb02 f203 	mul.w	r2, r2, r3
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009124:	661a      	str	r2, [r3, #96]	; 0x60
 8009126:	e031      	b.n	800918c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800912c:	2b01      	cmp	r3, #1
 800912e:	d11d      	bne.n	800916c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009134:	041b      	lsls	r3, r3, #16
 8009136:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800913e:	0c1b      	lsrs	r3, r3, #16
 8009140:	431a      	orrs	r2, r3
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	691b      	ldr	r3, [r3, #16]
 800914a:	3301      	adds	r3, #1
 800914c:	029a      	lsls	r2, r3, #10
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009160:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	661a      	str	r2, [r3, #96]	; 0x60
 800916a:	e00f      	b.n	800918c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a58      	ldr	r2, [pc, #352]	; (80092d4 <HAL_SD_GetCardCSD+0x344>)
 8009172:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009178:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	e09d      	b.n	80092c8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009190:	0b9b      	lsrs	r3, r3, #14
 8009192:	b2db      	uxtb	r3, r3
 8009194:	f003 0301 	and.w	r3, r3, #1
 8009198:	b2da      	uxtb	r2, r3
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091a2:	09db      	lsrs	r3, r3, #7
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091aa:	b2da      	uxtb	r2, r3
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091ba:	b2da      	uxtb	r2, r3
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091c4:	0fdb      	lsrs	r3, r3, #31
 80091c6:	b2da      	uxtb	r2, r3
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091d0:	0f5b      	lsrs	r3, r3, #29
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	f003 0303 	and.w	r3, r3, #3
 80091d8:	b2da      	uxtb	r2, r3
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091e2:	0e9b      	lsrs	r3, r3, #26
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	f003 0307 	and.w	r3, r3, #7
 80091ea:	b2da      	uxtb	r2, r3
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091f4:	0d9b      	lsrs	r3, r3, #22
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	f003 030f 	and.w	r3, r3, #15
 80091fc:	b2da      	uxtb	r2, r3
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009206:	0d5b      	lsrs	r3, r3, #21
 8009208:	b2db      	uxtb	r3, r3
 800920a:	f003 0301 	and.w	r3, r3, #1
 800920e:	b2da      	uxtb	r2, r3
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	2200      	movs	r2, #0
 800921a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009222:	0c1b      	lsrs	r3, r3, #16
 8009224:	b2db      	uxtb	r3, r3
 8009226:	f003 0301 	and.w	r3, r3, #1
 800922a:	b2da      	uxtb	r2, r3
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009236:	0bdb      	lsrs	r3, r3, #15
 8009238:	b2db      	uxtb	r3, r3
 800923a:	f003 0301 	and.w	r3, r3, #1
 800923e:	b2da      	uxtb	r2, r3
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800924a:	0b9b      	lsrs	r3, r3, #14
 800924c:	b2db      	uxtb	r3, r3
 800924e:	f003 0301 	and.w	r3, r3, #1
 8009252:	b2da      	uxtb	r2, r3
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800925e:	0b5b      	lsrs	r3, r3, #13
 8009260:	b2db      	uxtb	r3, r3
 8009262:	f003 0301 	and.w	r3, r3, #1
 8009266:	b2da      	uxtb	r2, r3
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009272:	0b1b      	lsrs	r3, r3, #12
 8009274:	b2db      	uxtb	r3, r3
 8009276:	f003 0301 	and.w	r3, r3, #1
 800927a:	b2da      	uxtb	r2, r3
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009286:	0a9b      	lsrs	r3, r3, #10
 8009288:	b2db      	uxtb	r3, r3
 800928a:	f003 0303 	and.w	r3, r3, #3
 800928e:	b2da      	uxtb	r2, r3
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800929a:	0a1b      	lsrs	r3, r3, #8
 800929c:	b2db      	uxtb	r3, r3
 800929e:	f003 0303 	and.w	r3, r3, #3
 80092a2:	b2da      	uxtb	r2, r3
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ae:	085b      	lsrs	r3, r3, #1
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092b6:	b2da      	uxtb	r2, r3
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	2201      	movs	r2, #1
 80092c2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr
 80092d4:	004005ff 	.word	0x004005ff

080092d8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80092d8:	b480      	push	{r7}
 80092da:	b083      	sub	sp, #12
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b086      	sub	sp, #24
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009338:	2300      	movs	r3, #0
 800933a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800933c:	f107 030c 	add.w	r3, r7, #12
 8009340:	4619      	mov	r1, r3
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 f96e 	bl	8009624 <SD_SendStatus>
 8009348:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d005      	beq.n	800935c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	431a      	orrs	r2, r3
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	0a5b      	lsrs	r3, r3, #9
 8009360:	f003 030f 	and.w	r3, r3, #15
 8009364:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009366:	693b      	ldr	r3, [r7, #16]
}
 8009368:	4618      	mov	r0, r3
 800936a:	3718      	adds	r7, #24
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009370:	b5b0      	push	{r4, r5, r7, lr}
 8009372:	b094      	sub	sp, #80	; 0x50
 8009374:	af04      	add	r7, sp, #16
 8009376:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009378:	2301      	movs	r3, #1
 800937a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4618      	mov	r0, r3
 8009382:	f001 fa8d 	bl	800a8a0 <SDIO_GetPowerState>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d102      	bne.n	8009392 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800938c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009390:	e0b6      	b.n	8009500 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009396:	2b03      	cmp	r3, #3
 8009398:	d02f      	beq.n	80093fa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4618      	mov	r0, r3
 80093a0:	f001 fc73 	bl	800ac8a <SDMMC_CmdSendCID>
 80093a4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80093a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d001      	beq.n	80093b0 <SD_InitCard+0x40>
    {
      return errorstate;
 80093ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093ae:	e0a7      	b.n	8009500 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	2100      	movs	r1, #0
 80093b6:	4618      	mov	r0, r3
 80093b8:	f001 fab7 	bl	800a92a <SDIO_GetResponse>
 80093bc:	4602      	mov	r2, r0
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2104      	movs	r1, #4
 80093c8:	4618      	mov	r0, r3
 80093ca:	f001 faae 	bl	800a92a <SDIO_GetResponse>
 80093ce:	4602      	mov	r2, r0
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2108      	movs	r1, #8
 80093da:	4618      	mov	r0, r3
 80093dc:	f001 faa5 	bl	800a92a <SDIO_GetResponse>
 80093e0:	4602      	mov	r2, r0
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	210c      	movs	r1, #12
 80093ec:	4618      	mov	r0, r3
 80093ee:	f001 fa9c 	bl	800a92a <SDIO_GetResponse>
 80093f2:	4602      	mov	r2, r0
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093fe:	2b03      	cmp	r3, #3
 8009400:	d00d      	beq.n	800941e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f107 020e 	add.w	r2, r7, #14
 800940a:	4611      	mov	r1, r2
 800940c:	4618      	mov	r0, r3
 800940e:	f001 fc79 	bl	800ad04 <SDMMC_CmdSetRelAdd>
 8009412:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009416:	2b00      	cmp	r3, #0
 8009418:	d001      	beq.n	800941e <SD_InitCard+0xae>
    {
      return errorstate;
 800941a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800941c:	e070      	b.n	8009500 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009422:	2b03      	cmp	r3, #3
 8009424:	d036      	beq.n	8009494 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009426:	89fb      	ldrh	r3, [r7, #14]
 8009428:	461a      	mov	r2, r3
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009436:	041b      	lsls	r3, r3, #16
 8009438:	4619      	mov	r1, r3
 800943a:	4610      	mov	r0, r2
 800943c:	f001 fc43 	bl	800acc6 <SDMMC_CmdSendCSD>
 8009440:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009444:	2b00      	cmp	r3, #0
 8009446:	d001      	beq.n	800944c <SD_InitCard+0xdc>
    {
      return errorstate;
 8009448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800944a:	e059      	b.n	8009500 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2100      	movs	r1, #0
 8009452:	4618      	mov	r0, r3
 8009454:	f001 fa69 	bl	800a92a <SDIO_GetResponse>
 8009458:	4602      	mov	r2, r0
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2104      	movs	r1, #4
 8009464:	4618      	mov	r0, r3
 8009466:	f001 fa60 	bl	800a92a <SDIO_GetResponse>
 800946a:	4602      	mov	r2, r0
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2108      	movs	r1, #8
 8009476:	4618      	mov	r0, r3
 8009478:	f001 fa57 	bl	800a92a <SDIO_GetResponse>
 800947c:	4602      	mov	r2, r0
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	210c      	movs	r1, #12
 8009488:	4618      	mov	r0, r3
 800948a:	f001 fa4e 	bl	800a92a <SDIO_GetResponse>
 800948e:	4602      	mov	r2, r0
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2104      	movs	r1, #4
 800949a:	4618      	mov	r0, r3
 800949c:	f001 fa45 	bl	800a92a <SDIO_GetResponse>
 80094a0:	4603      	mov	r3, r0
 80094a2:	0d1a      	lsrs	r2, r3, #20
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80094a8:	f107 0310 	add.w	r3, r7, #16
 80094ac:	4619      	mov	r1, r3
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f7ff fd6e 	bl	8008f90 <HAL_SD_GetCardCSD>
 80094b4:	4603      	mov	r3, r0
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d002      	beq.n	80094c0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80094be:	e01f      	b.n	8009500 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6819      	ldr	r1, [r3, #0]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094c8:	041b      	lsls	r3, r3, #16
 80094ca:	461a      	mov	r2, r3
 80094cc:	f04f 0300 	mov.w	r3, #0
 80094d0:	4608      	mov	r0, r1
 80094d2:	f001 fb35 	bl	800ab40 <SDMMC_CmdSelDesel>
 80094d6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80094d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d001      	beq.n	80094e2 <SD_InitCard+0x172>
  {
    return errorstate;
 80094de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094e0:	e00e      	b.n	8009500 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681d      	ldr	r5, [r3, #0]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	466c      	mov	r4, sp
 80094ea:	f103 0210 	add.w	r2, r3, #16
 80094ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80094f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80094f4:	3304      	adds	r3, #4
 80094f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80094f8:	4628      	mov	r0, r5
 80094fa:	f001 f979 	bl	800a7f0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80094fe:	2300      	movs	r3, #0
}
 8009500:	4618      	mov	r0, r3
 8009502:	3740      	adds	r7, #64	; 0x40
 8009504:	46bd      	mov	sp, r7
 8009506:	bdb0      	pop	{r4, r5, r7, pc}

08009508 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b086      	sub	sp, #24
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009510:	2300      	movs	r3, #0
 8009512:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009514:	2300      	movs	r3, #0
 8009516:	617b      	str	r3, [r7, #20]
 8009518:	2300      	movs	r3, #0
 800951a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4618      	mov	r0, r3
 8009522:	f001 fb30 	bl	800ab86 <SDMMC_CmdGoIdleState>
 8009526:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d001      	beq.n	8009532 <SD_PowerON+0x2a>
  {
    return errorstate;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	e072      	b.n	8009618 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4618      	mov	r0, r3
 8009538:	f001 fb43 	bl	800abc2 <SDMMC_CmdOperCond>
 800953c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d00d      	beq.n	8009560 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4618      	mov	r0, r3
 8009550:	f001 fb19 	bl	800ab86 <SDMMC_CmdGoIdleState>
 8009554:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d004      	beq.n	8009566 <SD_PowerON+0x5e>
    {
      return errorstate;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	e05b      	b.n	8009618 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2201      	movs	r2, #1
 8009564:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800956a:	2b01      	cmp	r3, #1
 800956c:	d137      	bne.n	80095de <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	2100      	movs	r1, #0
 8009574:	4618      	mov	r0, r3
 8009576:	f001 fb43 	bl	800ac00 <SDMMC_CmdAppCommand>
 800957a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d02d      	beq.n	80095de <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009582:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009586:	e047      	b.n	8009618 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2100      	movs	r1, #0
 800958e:	4618      	mov	r0, r3
 8009590:	f001 fb36 	bl	800ac00 <SDMMC_CmdAppCommand>
 8009594:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d001      	beq.n	80095a0 <SD_PowerON+0x98>
    {
      return errorstate;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	e03b      	b.n	8009618 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	491e      	ldr	r1, [pc, #120]	; (8009620 <SD_PowerON+0x118>)
 80095a6:	4618      	mov	r0, r3
 80095a8:	f001 fb4c 	bl	800ac44 <SDMMC_CmdAppOperCommand>
 80095ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d002      	beq.n	80095ba <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80095b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80095b8:	e02e      	b.n	8009618 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2100      	movs	r1, #0
 80095c0:	4618      	mov	r0, r3
 80095c2:	f001 f9b2 	bl	800a92a <SDIO_GetResponse>
 80095c6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	0fdb      	lsrs	r3, r3, #31
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d101      	bne.n	80095d4 <SD_PowerON+0xcc>
 80095d0:	2301      	movs	r3, #1
 80095d2:	e000      	b.n	80095d6 <SD_PowerON+0xce>
 80095d4:	2300      	movs	r3, #0
 80095d6:	613b      	str	r3, [r7, #16]

    count++;
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	3301      	adds	r3, #1
 80095dc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d802      	bhi.n	80095ee <SD_PowerON+0xe6>
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d0cc      	beq.n	8009588 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d902      	bls.n	80095fe <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80095f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80095fc:	e00c      	b.n	8009618 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009604:	2b00      	cmp	r3, #0
 8009606:	d003      	beq.n	8009610 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	645a      	str	r2, [r3, #68]	; 0x44
 800960e:	e002      	b.n	8009616 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009616:	2300      	movs	r3, #0
}
 8009618:	4618      	mov	r0, r3
 800961a:	3718      	adds	r7, #24
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	c1100000 	.word	0xc1100000

08009624 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d102      	bne.n	800963a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009634:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009638:	e018      	b.n	800966c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009642:	041b      	lsls	r3, r3, #16
 8009644:	4619      	mov	r1, r3
 8009646:	4610      	mov	r0, r2
 8009648:	f001 fb7d 	bl	800ad46 <SDMMC_CmdSendStatus>
 800964c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d001      	beq.n	8009658 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	e009      	b.n	800966c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2100      	movs	r1, #0
 800965e:	4618      	mov	r0, r3
 8009660:	f001 f963 	bl	800a92a <SDIO_GetResponse>
 8009664:	4602      	mov	r2, r0
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3710      	adds	r7, #16
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d101      	bne.n	8009686 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009682:	2301      	movs	r3, #1
 8009684:	e07b      	b.n	800977e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968a:	2b00      	cmp	r3, #0
 800968c:	d108      	bne.n	80096a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009696:	d009      	beq.n	80096ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2200      	movs	r2, #0
 800969c:	61da      	str	r2, [r3, #28]
 800969e:	e005      	b.n	80096ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d106      	bne.n	80096cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f7fa fcb4 	bl	8004034 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2202      	movs	r2, #2
 80096d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80096f4:	431a      	orrs	r2, r3
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096fe:	431a      	orrs	r2, r3
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	691b      	ldr	r3, [r3, #16]
 8009704:	f003 0302 	and.w	r3, r3, #2
 8009708:	431a      	orrs	r2, r3
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	695b      	ldr	r3, [r3, #20]
 800970e:	f003 0301 	and.w	r3, r3, #1
 8009712:	431a      	orrs	r2, r3
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	699b      	ldr	r3, [r3, #24]
 8009718:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800971c:	431a      	orrs	r2, r3
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	69db      	ldr	r3, [r3, #28]
 8009722:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009726:	431a      	orrs	r2, r3
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6a1b      	ldr	r3, [r3, #32]
 800972c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009730:	ea42 0103 	orr.w	r1, r2, r3
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009738:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	430a      	orrs	r2, r1
 8009742:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	699b      	ldr	r3, [r3, #24]
 8009748:	0c1b      	lsrs	r3, r3, #16
 800974a:	f003 0104 	and.w	r1, r3, #4
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009752:	f003 0210 	and.w	r2, r3, #16
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	430a      	orrs	r2, r1
 800975c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	69da      	ldr	r2, [r3, #28]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800976c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2201      	movs	r2, #1
 8009778:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800977c:	2300      	movs	r3, #0
}
 800977e:	4618      	mov	r0, r3
 8009780:	3708      	adds	r7, #8
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b088      	sub	sp, #32
 800978a:	af00      	add	r7, sp, #0
 800978c:	60f8      	str	r0, [r7, #12]
 800978e:	60b9      	str	r1, [r7, #8]
 8009790:	603b      	str	r3, [r7, #0]
 8009792:	4613      	mov	r3, r2
 8009794:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009796:	2300      	movs	r3, #0
 8009798:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d101      	bne.n	80097a8 <HAL_SPI_Transmit+0x22>
 80097a4:	2302      	movs	r3, #2
 80097a6:	e126      	b.n	80099f6 <HAL_SPI_Transmit+0x270>
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2201      	movs	r2, #1
 80097ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80097b0:	f7fc fbd6 	bl	8005f60 <HAL_GetTick>
 80097b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80097b6:	88fb      	ldrh	r3, [r7, #6]
 80097b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d002      	beq.n	80097cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80097c6:	2302      	movs	r3, #2
 80097c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80097ca:	e10b      	b.n	80099e4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d002      	beq.n	80097d8 <HAL_SPI_Transmit+0x52>
 80097d2:	88fb      	ldrh	r3, [r7, #6]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d102      	bne.n	80097de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80097d8:	2301      	movs	r3, #1
 80097da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80097dc:	e102      	b.n	80099e4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2203      	movs	r2, #3
 80097e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2200      	movs	r2, #0
 80097ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	68ba      	ldr	r2, [r7, #8]
 80097f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	88fa      	ldrh	r2, [r7, #6]
 80097f6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	88fa      	ldrh	r2, [r7, #6]
 80097fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2200      	movs	r2, #0
 8009802:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2200      	movs	r2, #0
 8009808:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2200      	movs	r2, #0
 800980e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2200      	movs	r2, #0
 8009814:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2200      	movs	r2, #0
 800981a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009824:	d10f      	bne.n	8009846 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009834:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009844:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009850:	2b40      	cmp	r3, #64	; 0x40
 8009852:	d007      	beq.n	8009864 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009862:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	68db      	ldr	r3, [r3, #12]
 8009868:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800986c:	d14b      	bne.n	8009906 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d002      	beq.n	800987c <HAL_SPI_Transmit+0xf6>
 8009876:	8afb      	ldrh	r3, [r7, #22]
 8009878:	2b01      	cmp	r3, #1
 800987a:	d13e      	bne.n	80098fa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009880:	881a      	ldrh	r2, [r3, #0]
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800988c:	1c9a      	adds	r2, r3, #2
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009896:	b29b      	uxth	r3, r3
 8009898:	3b01      	subs	r3, #1
 800989a:	b29a      	uxth	r2, r3
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80098a0:	e02b      	b.n	80098fa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	689b      	ldr	r3, [r3, #8]
 80098a8:	f003 0302 	and.w	r3, r3, #2
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	d112      	bne.n	80098d6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098b4:	881a      	ldrh	r2, [r3, #0]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098c0:	1c9a      	adds	r2, r3, #2
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	3b01      	subs	r3, #1
 80098ce:	b29a      	uxth	r2, r3
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80098d4:	e011      	b.n	80098fa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80098d6:	f7fc fb43 	bl	8005f60 <HAL_GetTick>
 80098da:	4602      	mov	r2, r0
 80098dc:	69bb      	ldr	r3, [r7, #24]
 80098de:	1ad3      	subs	r3, r2, r3
 80098e0:	683a      	ldr	r2, [r7, #0]
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d803      	bhi.n	80098ee <HAL_SPI_Transmit+0x168>
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ec:	d102      	bne.n	80098f4 <HAL_SPI_Transmit+0x16e>
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d102      	bne.n	80098fa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80098f4:	2303      	movs	r3, #3
 80098f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80098f8:	e074      	b.n	80099e4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098fe:	b29b      	uxth	r3, r3
 8009900:	2b00      	cmp	r3, #0
 8009902:	d1ce      	bne.n	80098a2 <HAL_SPI_Transmit+0x11c>
 8009904:	e04c      	b.n	80099a0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d002      	beq.n	8009914 <HAL_SPI_Transmit+0x18e>
 800990e:	8afb      	ldrh	r3, [r7, #22]
 8009910:	2b01      	cmp	r3, #1
 8009912:	d140      	bne.n	8009996 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	330c      	adds	r3, #12
 800991e:	7812      	ldrb	r2, [r2, #0]
 8009920:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009926:	1c5a      	adds	r2, r3, #1
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009930:	b29b      	uxth	r3, r3
 8009932:	3b01      	subs	r3, #1
 8009934:	b29a      	uxth	r2, r3
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800993a:	e02c      	b.n	8009996 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	f003 0302 	and.w	r3, r3, #2
 8009946:	2b02      	cmp	r3, #2
 8009948:	d113      	bne.n	8009972 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	330c      	adds	r3, #12
 8009954:	7812      	ldrb	r2, [r2, #0]
 8009956:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800995c:	1c5a      	adds	r2, r3, #1
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009966:	b29b      	uxth	r3, r3
 8009968:	3b01      	subs	r3, #1
 800996a:	b29a      	uxth	r2, r3
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	86da      	strh	r2, [r3, #54]	; 0x36
 8009970:	e011      	b.n	8009996 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009972:	f7fc faf5 	bl	8005f60 <HAL_GetTick>
 8009976:	4602      	mov	r2, r0
 8009978:	69bb      	ldr	r3, [r7, #24]
 800997a:	1ad3      	subs	r3, r2, r3
 800997c:	683a      	ldr	r2, [r7, #0]
 800997e:	429a      	cmp	r2, r3
 8009980:	d803      	bhi.n	800998a <HAL_SPI_Transmit+0x204>
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009988:	d102      	bne.n	8009990 <HAL_SPI_Transmit+0x20a>
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d102      	bne.n	8009996 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009990:	2303      	movs	r3, #3
 8009992:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009994:	e026      	b.n	80099e4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800999a:	b29b      	uxth	r3, r3
 800999c:	2b00      	cmp	r3, #0
 800999e:	d1cd      	bne.n	800993c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80099a0:	69ba      	ldr	r2, [r7, #24]
 80099a2:	6839      	ldr	r1, [r7, #0]
 80099a4:	68f8      	ldr	r0, [r7, #12]
 80099a6:	f000 fbcb 	bl	800a140 <SPI_EndRxTxTransaction>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d002      	beq.n	80099b6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2220      	movs	r2, #32
 80099b4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d10a      	bne.n	80099d4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80099be:	2300      	movs	r3, #0
 80099c0:	613b      	str	r3, [r7, #16]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	613b      	str	r3, [r7, #16]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	613b      	str	r3, [r7, #16]
 80099d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d002      	beq.n	80099e2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	77fb      	strb	r3, [r7, #31]
 80099e0:	e000      	b.n	80099e4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80099e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2200      	movs	r2, #0
 80099f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80099f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3720      	adds	r7, #32
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}

080099fe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b088      	sub	sp, #32
 8009a02:	af02      	add	r7, sp, #8
 8009a04:	60f8      	str	r0, [r7, #12]
 8009a06:	60b9      	str	r1, [r7, #8]
 8009a08:	603b      	str	r3, [r7, #0]
 8009a0a:	4613      	mov	r3, r2
 8009a0c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a1a:	d112      	bne.n	8009a42 <HAL_SPI_Receive+0x44>
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d10e      	bne.n	8009a42 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2204      	movs	r2, #4
 8009a28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009a2c:	88fa      	ldrh	r2, [r7, #6]
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	9300      	str	r3, [sp, #0]
 8009a32:	4613      	mov	r3, r2
 8009a34:	68ba      	ldr	r2, [r7, #8]
 8009a36:	68b9      	ldr	r1, [r7, #8]
 8009a38:	68f8      	ldr	r0, [r7, #12]
 8009a3a:	f000 f8f1 	bl	8009c20 <HAL_SPI_TransmitReceive>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	e0ea      	b.n	8009c18 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d101      	bne.n	8009a50 <HAL_SPI_Receive+0x52>
 8009a4c:	2302      	movs	r3, #2
 8009a4e:	e0e3      	b.n	8009c18 <HAL_SPI_Receive+0x21a>
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2201      	movs	r2, #1
 8009a54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009a58:	f7fc fa82 	bl	8005f60 <HAL_GetTick>
 8009a5c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d002      	beq.n	8009a70 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009a6a:	2302      	movs	r3, #2
 8009a6c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009a6e:	e0ca      	b.n	8009c06 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d002      	beq.n	8009a7c <HAL_SPI_Receive+0x7e>
 8009a76:	88fb      	ldrh	r3, [r7, #6]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d102      	bne.n	8009a82 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009a80:	e0c1      	b.n	8009c06 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2204      	movs	r2, #4
 8009a86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	68ba      	ldr	r2, [r7, #8]
 8009a94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	88fa      	ldrh	r2, [r7, #6]
 8009a9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	88fa      	ldrh	r2, [r7, #6]
 8009aa0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2200      	movs	r2, #0
 8009abe:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ac8:	d10f      	bne.n	8009aea <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ad8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009ae8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009af4:	2b40      	cmp	r3, #64	; 0x40
 8009af6:	d007      	beq.n	8009b08 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b06:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d162      	bne.n	8009bd6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009b10:	e02e      	b.n	8009b70 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	f003 0301 	and.w	r3, r3, #1
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d115      	bne.n	8009b4c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f103 020c 	add.w	r2, r3, #12
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b2c:	7812      	ldrb	r2, [r2, #0]
 8009b2e:	b2d2      	uxtb	r2, r2
 8009b30:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b36:	1c5a      	adds	r2, r3, #1
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	3b01      	subs	r3, #1
 8009b44:	b29a      	uxth	r2, r3
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009b4a:	e011      	b.n	8009b70 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b4c:	f7fc fa08 	bl	8005f60 <HAL_GetTick>
 8009b50:	4602      	mov	r2, r0
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	1ad3      	subs	r3, r2, r3
 8009b56:	683a      	ldr	r2, [r7, #0]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d803      	bhi.n	8009b64 <HAL_SPI_Receive+0x166>
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b62:	d102      	bne.n	8009b6a <HAL_SPI_Receive+0x16c>
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d102      	bne.n	8009b70 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009b6a:	2303      	movs	r3, #3
 8009b6c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009b6e:	e04a      	b.n	8009c06 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d1cb      	bne.n	8009b12 <HAL_SPI_Receive+0x114>
 8009b7a:	e031      	b.n	8009be0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	689b      	ldr	r3, [r3, #8]
 8009b82:	f003 0301 	and.w	r3, r3, #1
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d113      	bne.n	8009bb2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	68da      	ldr	r2, [r3, #12]
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b94:	b292      	uxth	r2, r2
 8009b96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b9c:	1c9a      	adds	r2, r3, #2
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	3b01      	subs	r3, #1
 8009baa:	b29a      	uxth	r2, r3
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009bb0:	e011      	b.n	8009bd6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009bb2:	f7fc f9d5 	bl	8005f60 <HAL_GetTick>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	1ad3      	subs	r3, r2, r3
 8009bbc:	683a      	ldr	r2, [r7, #0]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d803      	bhi.n	8009bca <HAL_SPI_Receive+0x1cc>
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bc8:	d102      	bne.n	8009bd0 <HAL_SPI_Receive+0x1d2>
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d102      	bne.n	8009bd6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009bd0:	2303      	movs	r3, #3
 8009bd2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009bd4:	e017      	b.n	8009c06 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d1cd      	bne.n	8009b7c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009be0:	693a      	ldr	r2, [r7, #16]
 8009be2:	6839      	ldr	r1, [r7, #0]
 8009be4:	68f8      	ldr	r0, [r7, #12]
 8009be6:	f000 fa45 	bl	800a074 <SPI_EndRxTransaction>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d002      	beq.n	8009bf6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2220      	movs	r2, #32
 8009bf4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d002      	beq.n	8009c04 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	75fb      	strb	r3, [r7, #23]
 8009c02:	e000      	b.n	8009c06 <HAL_SPI_Receive+0x208>
  }

error :
 8009c04:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2201      	movs	r2, #1
 8009c0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3718      	adds	r7, #24
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b08c      	sub	sp, #48	; 0x30
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	60f8      	str	r0, [r7, #12]
 8009c28:	60b9      	str	r1, [r7, #8]
 8009c2a:	607a      	str	r2, [r7, #4]
 8009c2c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009c32:	2300      	movs	r3, #0
 8009c34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d101      	bne.n	8009c46 <HAL_SPI_TransmitReceive+0x26>
 8009c42:	2302      	movs	r3, #2
 8009c44:	e18a      	b.n	8009f5c <HAL_SPI_TransmitReceive+0x33c>
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2201      	movs	r2, #1
 8009c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c4e:	f7fc f987 	bl	8005f60 <HAL_GetTick>
 8009c52:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009c64:	887b      	ldrh	r3, [r7, #2]
 8009c66:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009c68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d00f      	beq.n	8009c90 <HAL_SPI_TransmitReceive+0x70>
 8009c70:	69fb      	ldr	r3, [r7, #28]
 8009c72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c76:	d107      	bne.n	8009c88 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d103      	bne.n	8009c88 <HAL_SPI_TransmitReceive+0x68>
 8009c80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c84:	2b04      	cmp	r3, #4
 8009c86:	d003      	beq.n	8009c90 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009c88:	2302      	movs	r3, #2
 8009c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009c8e:	e15b      	b.n	8009f48 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d005      	beq.n	8009ca2 <HAL_SPI_TransmitReceive+0x82>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d002      	beq.n	8009ca2 <HAL_SPI_TransmitReceive+0x82>
 8009c9c:	887b      	ldrh	r3, [r7, #2]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d103      	bne.n	8009caa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009ca8:	e14e      	b.n	8009f48 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	2b04      	cmp	r3, #4
 8009cb4:	d003      	beq.n	8009cbe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2205      	movs	r2, #5
 8009cba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	887a      	ldrh	r2, [r7, #2]
 8009cce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	887a      	ldrh	r2, [r7, #2]
 8009cd4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	68ba      	ldr	r2, [r7, #8]
 8009cda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	887a      	ldrh	r2, [r7, #2]
 8009ce0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	887a      	ldrh	r2, [r7, #2]
 8009ce6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2200      	movs	r2, #0
 8009cec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cfe:	2b40      	cmp	r3, #64	; 0x40
 8009d00:	d007      	beq.n	8009d12 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	681a      	ldr	r2, [r3, #0]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	68db      	ldr	r3, [r3, #12]
 8009d16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d1a:	d178      	bne.n	8009e0e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d002      	beq.n	8009d2a <HAL_SPI_TransmitReceive+0x10a>
 8009d24:	8b7b      	ldrh	r3, [r7, #26]
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d166      	bne.n	8009df8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d2e:	881a      	ldrh	r2, [r3, #0]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d3a:	1c9a      	adds	r2, r3, #2
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	3b01      	subs	r3, #1
 8009d48:	b29a      	uxth	r2, r3
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d4e:	e053      	b.n	8009df8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	689b      	ldr	r3, [r3, #8]
 8009d56:	f003 0302 	and.w	r3, r3, #2
 8009d5a:	2b02      	cmp	r3, #2
 8009d5c:	d11b      	bne.n	8009d96 <HAL_SPI_TransmitReceive+0x176>
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d016      	beq.n	8009d96 <HAL_SPI_TransmitReceive+0x176>
 8009d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d113      	bne.n	8009d96 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d72:	881a      	ldrh	r2, [r3, #0]
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d7e:	1c9a      	adds	r2, r3, #2
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	3b01      	subs	r3, #1
 8009d8c:	b29a      	uxth	r2, r3
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009d92:	2300      	movs	r3, #0
 8009d94:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	f003 0301 	and.w	r3, r3, #1
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d119      	bne.n	8009dd8 <HAL_SPI_TransmitReceive+0x1b8>
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d014      	beq.n	8009dd8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	68da      	ldr	r2, [r3, #12]
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db8:	b292      	uxth	r2, r2
 8009dba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc0:	1c9a      	adds	r2, r3, #2
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	3b01      	subs	r3, #1
 8009dce:	b29a      	uxth	r2, r3
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009dd8:	f7fc f8c2 	bl	8005f60 <HAL_GetTick>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de0:	1ad3      	subs	r3, r2, r3
 8009de2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d807      	bhi.n	8009df8 <HAL_SPI_TransmitReceive+0x1d8>
 8009de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dee:	d003      	beq.n	8009df8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009df0:	2303      	movs	r3, #3
 8009df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009df6:	e0a7      	b.n	8009f48 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d1a6      	bne.n	8009d50 <HAL_SPI_TransmitReceive+0x130>
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d1a1      	bne.n	8009d50 <HAL_SPI_TransmitReceive+0x130>
 8009e0c:	e07c      	b.n	8009f08 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d002      	beq.n	8009e1c <HAL_SPI_TransmitReceive+0x1fc>
 8009e16:	8b7b      	ldrh	r3, [r7, #26]
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d16b      	bne.n	8009ef4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	330c      	adds	r3, #12
 8009e26:	7812      	ldrb	r2, [r2, #0]
 8009e28:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e2e:	1c5a      	adds	r2, r3, #1
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	3b01      	subs	r3, #1
 8009e3c:	b29a      	uxth	r2, r3
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e42:	e057      	b.n	8009ef4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	689b      	ldr	r3, [r3, #8]
 8009e4a:	f003 0302 	and.w	r3, r3, #2
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	d11c      	bne.n	8009e8c <HAL_SPI_TransmitReceive+0x26c>
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d017      	beq.n	8009e8c <HAL_SPI_TransmitReceive+0x26c>
 8009e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d114      	bne.n	8009e8c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	330c      	adds	r3, #12
 8009e6c:	7812      	ldrb	r2, [r2, #0]
 8009e6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e74:	1c5a      	adds	r2, r3, #1
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	3b01      	subs	r3, #1
 8009e82:	b29a      	uxth	r2, r3
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	689b      	ldr	r3, [r3, #8]
 8009e92:	f003 0301 	and.w	r3, r3, #1
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d119      	bne.n	8009ece <HAL_SPI_TransmitReceive+0x2ae>
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d014      	beq.n	8009ece <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	68da      	ldr	r2, [r3, #12]
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eae:	b2d2      	uxtb	r2, r2
 8009eb0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb6:	1c5a      	adds	r2, r3, #1
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ec0:	b29b      	uxth	r3, r3
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	b29a      	uxth	r2, r3
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009ece:	f7fc f847 	bl	8005f60 <HAL_GetTick>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed6:	1ad3      	subs	r3, r2, r3
 8009ed8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d803      	bhi.n	8009ee6 <HAL_SPI_TransmitReceive+0x2c6>
 8009ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ee4:	d102      	bne.n	8009eec <HAL_SPI_TransmitReceive+0x2cc>
 8009ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d103      	bne.n	8009ef4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009eec:	2303      	movs	r3, #3
 8009eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009ef2:	e029      	b.n	8009f48 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d1a2      	bne.n	8009e44 <HAL_SPI_TransmitReceive+0x224>
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d19d      	bne.n	8009e44 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f0c:	68f8      	ldr	r0, [r7, #12]
 8009f0e:	f000 f917 	bl	800a140 <SPI_EndRxTxTransaction>
 8009f12:	4603      	mov	r3, r0
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d006      	beq.n	8009f26 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009f18:	2301      	movs	r3, #1
 8009f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2220      	movs	r2, #32
 8009f22:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009f24:	e010      	b.n	8009f48 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	689b      	ldr	r3, [r3, #8]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d10b      	bne.n	8009f46 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009f2e:	2300      	movs	r3, #0
 8009f30:	617b      	str	r3, [r7, #20]
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	68db      	ldr	r3, [r3, #12]
 8009f38:	617b      	str	r3, [r7, #20]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	617b      	str	r3, [r7, #20]
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	e000      	b.n	8009f48 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009f46:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2200      	movs	r2, #0
 8009f54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009f58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3730      	adds	r7, #48	; 0x30
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b088      	sub	sp, #32
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	603b      	str	r3, [r7, #0]
 8009f70:	4613      	mov	r3, r2
 8009f72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009f74:	f7fb fff4 	bl	8005f60 <HAL_GetTick>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7c:	1a9b      	subs	r3, r3, r2
 8009f7e:	683a      	ldr	r2, [r7, #0]
 8009f80:	4413      	add	r3, r2
 8009f82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009f84:	f7fb ffec 	bl	8005f60 <HAL_GetTick>
 8009f88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009f8a:	4b39      	ldr	r3, [pc, #228]	; (800a070 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	015b      	lsls	r3, r3, #5
 8009f90:	0d1b      	lsrs	r3, r3, #20
 8009f92:	69fa      	ldr	r2, [r7, #28]
 8009f94:	fb02 f303 	mul.w	r3, r2, r3
 8009f98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009f9a:	e054      	b.n	800a046 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fa2:	d050      	beq.n	800a046 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009fa4:	f7fb ffdc 	bl	8005f60 <HAL_GetTick>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	69bb      	ldr	r3, [r7, #24]
 8009fac:	1ad3      	subs	r3, r2, r3
 8009fae:	69fa      	ldr	r2, [r7, #28]
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d902      	bls.n	8009fba <SPI_WaitFlagStateUntilTimeout+0x56>
 8009fb4:	69fb      	ldr	r3, [r7, #28]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d13d      	bne.n	800a036 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	685a      	ldr	r2, [r3, #4]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009fc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009fd2:	d111      	bne.n	8009ff8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fdc:	d004      	beq.n	8009fe8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fe6:	d107      	bne.n	8009ff8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ff6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a000:	d10f      	bne.n	800a022 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a010:	601a      	str	r2, [r3, #0]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a020:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2201      	movs	r2, #1
 800a026:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2200      	movs	r2, #0
 800a02e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a032:	2303      	movs	r3, #3
 800a034:	e017      	b.n	800a066 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d101      	bne.n	800a040 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a03c:	2300      	movs	r3, #0
 800a03e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	3b01      	subs	r3, #1
 800a044:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	689a      	ldr	r2, [r3, #8]
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	4013      	ands	r3, r2
 800a050:	68ba      	ldr	r2, [r7, #8]
 800a052:	429a      	cmp	r2, r3
 800a054:	bf0c      	ite	eq
 800a056:	2301      	moveq	r3, #1
 800a058:	2300      	movne	r3, #0
 800a05a:	b2db      	uxtb	r3, r3
 800a05c:	461a      	mov	r2, r3
 800a05e:	79fb      	ldrb	r3, [r7, #7]
 800a060:	429a      	cmp	r2, r3
 800a062:	d19b      	bne.n	8009f9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a064:	2300      	movs	r3, #0
}
 800a066:	4618      	mov	r0, r3
 800a068:	3720      	adds	r7, #32
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	20000004 	.word	0x20000004

0800a074 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b086      	sub	sp, #24
 800a078:	af02      	add	r7, sp, #8
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a088:	d111      	bne.n	800a0ae <SPI_EndRxTransaction+0x3a>
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	689b      	ldr	r3, [r3, #8]
 800a08e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a092:	d004      	beq.n	800a09e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a09c:	d107      	bne.n	800a0ae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0ac:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a0b6:	d12a      	bne.n	800a10e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0c0:	d012      	beq.n	800a0e8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	9300      	str	r3, [sp, #0]
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	2180      	movs	r1, #128	; 0x80
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	f7ff ff49 	bl	8009f64 <SPI_WaitFlagStateUntilTimeout>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d02d      	beq.n	800a134 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0dc:	f043 0220 	orr.w	r2, r3, #32
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a0e4:	2303      	movs	r3, #3
 800a0e6:	e026      	b.n	800a136 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	9300      	str	r3, [sp, #0]
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	2101      	movs	r1, #1
 800a0f2:	68f8      	ldr	r0, [r7, #12]
 800a0f4:	f7ff ff36 	bl	8009f64 <SPI_WaitFlagStateUntilTimeout>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d01a      	beq.n	800a134 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a102:	f043 0220 	orr.w	r2, r3, #32
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a10a:	2303      	movs	r3, #3
 800a10c:	e013      	b.n	800a136 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	9300      	str	r3, [sp, #0]
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	2200      	movs	r2, #0
 800a116:	2101      	movs	r1, #1
 800a118:	68f8      	ldr	r0, [r7, #12]
 800a11a:	f7ff ff23 	bl	8009f64 <SPI_WaitFlagStateUntilTimeout>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b00      	cmp	r3, #0
 800a122:	d007      	beq.n	800a134 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a128:	f043 0220 	orr.w	r2, r3, #32
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a130:	2303      	movs	r3, #3
 800a132:	e000      	b.n	800a136 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3710      	adds	r7, #16
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
	...

0800a140 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b088      	sub	sp, #32
 800a144:	af02      	add	r7, sp, #8
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a14c:	4b1b      	ldr	r3, [pc, #108]	; (800a1bc <SPI_EndRxTxTransaction+0x7c>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a1b      	ldr	r2, [pc, #108]	; (800a1c0 <SPI_EndRxTxTransaction+0x80>)
 800a152:	fba2 2303 	umull	r2, r3, r2, r3
 800a156:	0d5b      	lsrs	r3, r3, #21
 800a158:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a15c:	fb02 f303 	mul.w	r3, r2, r3
 800a160:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a16a:	d112      	bne.n	800a192 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	9300      	str	r3, [sp, #0]
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	2200      	movs	r2, #0
 800a174:	2180      	movs	r1, #128	; 0x80
 800a176:	68f8      	ldr	r0, [r7, #12]
 800a178:	f7ff fef4 	bl	8009f64 <SPI_WaitFlagStateUntilTimeout>
 800a17c:	4603      	mov	r3, r0
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d016      	beq.n	800a1b0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a186:	f043 0220 	orr.w	r2, r3, #32
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a18e:	2303      	movs	r3, #3
 800a190:	e00f      	b.n	800a1b2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d00a      	beq.n	800a1ae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	3b01      	subs	r3, #1
 800a19c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	689b      	ldr	r3, [r3, #8]
 800a1a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1a8:	2b80      	cmp	r3, #128	; 0x80
 800a1aa:	d0f2      	beq.n	800a192 <SPI_EndRxTxTransaction+0x52>
 800a1ac:	e000      	b.n	800a1b0 <SPI_EndRxTxTransaction+0x70>
        break;
 800a1ae:	bf00      	nop
  }

  return HAL_OK;
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3718      	adds	r7, #24
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	20000004 	.word	0x20000004
 800a1c0:	165e9f81 	.word	0x165e9f81

0800a1c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d101      	bne.n	800a1d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	e03f      	b.n	800a256 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d106      	bne.n	800a1f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f7fa f840 	bl	8004270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2224      	movs	r2, #36	; 0x24
 800a1f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	68da      	ldr	r2, [r3, #12]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a206:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 f929 	bl	800a460 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	691a      	ldr	r2, [r3, #16]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a21c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	695a      	ldr	r2, [r3, #20]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a22c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	68da      	ldr	r2, [r3, #12]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a23c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2200      	movs	r2, #0
 800a242:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2220      	movs	r2, #32
 800a248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2220      	movs	r2, #32
 800a250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a254:	2300      	movs	r3, #0
}
 800a256:	4618      	mov	r0, r3
 800a258:	3708      	adds	r7, #8
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}

0800a25e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a25e:	b580      	push	{r7, lr}
 800a260:	b08a      	sub	sp, #40	; 0x28
 800a262:	af02      	add	r7, sp, #8
 800a264:	60f8      	str	r0, [r7, #12]
 800a266:	60b9      	str	r1, [r7, #8]
 800a268:	603b      	str	r3, [r7, #0]
 800a26a:	4613      	mov	r3, r2
 800a26c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a26e:	2300      	movs	r3, #0
 800a270:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	2b20      	cmp	r3, #32
 800a27c:	d17c      	bne.n	800a378 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d002      	beq.n	800a28a <HAL_UART_Transmit+0x2c>
 800a284:	88fb      	ldrh	r3, [r7, #6]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d101      	bne.n	800a28e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a28a:	2301      	movs	r3, #1
 800a28c:	e075      	b.n	800a37a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a294:	2b01      	cmp	r3, #1
 800a296:	d101      	bne.n	800a29c <HAL_UART_Transmit+0x3e>
 800a298:	2302      	movs	r3, #2
 800a29a:	e06e      	b.n	800a37a <HAL_UART_Transmit+0x11c>
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2201      	movs	r2, #1
 800a2a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2221      	movs	r2, #33	; 0x21
 800a2ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a2b2:	f7fb fe55 	bl	8005f60 <HAL_GetTick>
 800a2b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	88fa      	ldrh	r2, [r7, #6]
 800a2bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	88fa      	ldrh	r2, [r7, #6]
 800a2c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2cc:	d108      	bne.n	800a2e0 <HAL_UART_Transmit+0x82>
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	691b      	ldr	r3, [r3, #16]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d104      	bne.n	800a2e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	61bb      	str	r3, [r7, #24]
 800a2de:	e003      	b.n	800a2e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a2f0:	e02a      	b.n	800a348 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	9300      	str	r3, [sp, #0]
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	2180      	movs	r1, #128	; 0x80
 800a2fc:	68f8      	ldr	r0, [r7, #12]
 800a2fe:	f000 f840 	bl	800a382 <UART_WaitOnFlagUntilTimeout>
 800a302:	4603      	mov	r3, r0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d001      	beq.n	800a30c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a308:	2303      	movs	r3, #3
 800a30a:	e036      	b.n	800a37a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a30c:	69fb      	ldr	r3, [r7, #28]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d10b      	bne.n	800a32a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a312:	69bb      	ldr	r3, [r7, #24]
 800a314:	881b      	ldrh	r3, [r3, #0]
 800a316:	461a      	mov	r2, r3
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a320:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	3302      	adds	r3, #2
 800a326:	61bb      	str	r3, [r7, #24]
 800a328:	e007      	b.n	800a33a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a32a:	69fb      	ldr	r3, [r7, #28]
 800a32c:	781a      	ldrb	r2, [r3, #0]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	3301      	adds	r3, #1
 800a338:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a33e:	b29b      	uxth	r3, r3
 800a340:	3b01      	subs	r3, #1
 800a342:	b29a      	uxth	r2, r3
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d1cf      	bne.n	800a2f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	9300      	str	r3, [sp, #0]
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	2200      	movs	r2, #0
 800a35a:	2140      	movs	r1, #64	; 0x40
 800a35c:	68f8      	ldr	r0, [r7, #12]
 800a35e:	f000 f810 	bl	800a382 <UART_WaitOnFlagUntilTimeout>
 800a362:	4603      	mov	r3, r0
 800a364:	2b00      	cmp	r3, #0
 800a366:	d001      	beq.n	800a36c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a368:	2303      	movs	r3, #3
 800a36a:	e006      	b.n	800a37a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2220      	movs	r2, #32
 800a370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a374:	2300      	movs	r3, #0
 800a376:	e000      	b.n	800a37a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a378:	2302      	movs	r3, #2
  }
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3720      	adds	r7, #32
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a382:	b580      	push	{r7, lr}
 800a384:	b090      	sub	sp, #64	; 0x40
 800a386:	af00      	add	r7, sp, #0
 800a388:	60f8      	str	r0, [r7, #12]
 800a38a:	60b9      	str	r1, [r7, #8]
 800a38c:	603b      	str	r3, [r7, #0]
 800a38e:	4613      	mov	r3, r2
 800a390:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a392:	e050      	b.n	800a436 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a39a:	d04c      	beq.n	800a436 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a39c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d007      	beq.n	800a3b2 <UART_WaitOnFlagUntilTimeout+0x30>
 800a3a2:	f7fb fddd 	bl	8005f60 <HAL_GetTick>
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	1ad3      	subs	r3, r2, r3
 800a3ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d241      	bcs.n	800a436 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	330c      	adds	r3, #12
 800a3b8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3bc:	e853 3f00 	ldrex	r3, [r3]
 800a3c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a3c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	330c      	adds	r3, #12
 800a3d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a3d2:	637a      	str	r2, [r7, #52]	; 0x34
 800a3d4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a3d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3da:	e841 2300 	strex	r3, r2, [r1]
 800a3de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d1e5      	bne.n	800a3b2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	3314      	adds	r3, #20
 800a3ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	e853 3f00 	ldrex	r3, [r3]
 800a3f4:	613b      	str	r3, [r7, #16]
   return(result);
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	f023 0301 	bic.w	r3, r3, #1
 800a3fc:	63bb      	str	r3, [r7, #56]	; 0x38
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	3314      	adds	r3, #20
 800a404:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a406:	623a      	str	r2, [r7, #32]
 800a408:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a40a:	69f9      	ldr	r1, [r7, #28]
 800a40c:	6a3a      	ldr	r2, [r7, #32]
 800a40e:	e841 2300 	strex	r3, r2, [r1]
 800a412:	61bb      	str	r3, [r7, #24]
   return(result);
 800a414:	69bb      	ldr	r3, [r7, #24]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d1e5      	bne.n	800a3e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2220      	movs	r2, #32
 800a41e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	2220      	movs	r2, #32
 800a426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2200      	movs	r2, #0
 800a42e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a432:	2303      	movs	r3, #3
 800a434:	e00f      	b.n	800a456 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	681a      	ldr	r2, [r3, #0]
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	4013      	ands	r3, r2
 800a440:	68ba      	ldr	r2, [r7, #8]
 800a442:	429a      	cmp	r2, r3
 800a444:	bf0c      	ite	eq
 800a446:	2301      	moveq	r3, #1
 800a448:	2300      	movne	r3, #0
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	461a      	mov	r2, r3
 800a44e:	79fb      	ldrb	r3, [r7, #7]
 800a450:	429a      	cmp	r2, r3
 800a452:	d09f      	beq.n	800a394 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a454:	2300      	movs	r3, #0
}
 800a456:	4618      	mov	r0, r3
 800a458:	3740      	adds	r7, #64	; 0x40
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
	...

0800a460 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a464:	b09f      	sub	sp, #124	; 0x7c
 800a466:	af00      	add	r7, sp, #0
 800a468:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a46a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	691b      	ldr	r3, [r3, #16]
 800a470:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a476:	68d9      	ldr	r1, [r3, #12]
 800a478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a47a:	681a      	ldr	r2, [r3, #0]
 800a47c:	ea40 0301 	orr.w	r3, r0, r1
 800a480:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a484:	689a      	ldr	r2, [r3, #8]
 800a486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	431a      	orrs	r2, r3
 800a48c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a48e:	695b      	ldr	r3, [r3, #20]
 800a490:	431a      	orrs	r2, r3
 800a492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a494:	69db      	ldr	r3, [r3, #28]
 800a496:	4313      	orrs	r3, r2
 800a498:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a49a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	68db      	ldr	r3, [r3, #12]
 800a4a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a4a4:	f021 010c 	bic.w	r1, r1, #12
 800a4a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a4ae:	430b      	orrs	r3, r1
 800a4b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a4b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	695b      	ldr	r3, [r3, #20]
 800a4b8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a4bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4be:	6999      	ldr	r1, [r3, #24]
 800a4c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	ea40 0301 	orr.w	r3, r0, r1
 800a4c8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a4ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4cc:	681a      	ldr	r2, [r3, #0]
 800a4ce:	4bc5      	ldr	r3, [pc, #788]	; (800a7e4 <UART_SetConfig+0x384>)
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d004      	beq.n	800a4de <UART_SetConfig+0x7e>
 800a4d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	4bc3      	ldr	r3, [pc, #780]	; (800a7e8 <UART_SetConfig+0x388>)
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d103      	bne.n	800a4e6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a4de:	f7fe f931 	bl	8008744 <HAL_RCC_GetPCLK2Freq>
 800a4e2:	6778      	str	r0, [r7, #116]	; 0x74
 800a4e4:	e002      	b.n	800a4ec <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a4e6:	f7fe f919 	bl	800871c <HAL_RCC_GetPCLK1Freq>
 800a4ea:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a4ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4ee:	69db      	ldr	r3, [r3, #28]
 800a4f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4f4:	f040 80b6 	bne.w	800a664 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a4f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4fa:	461c      	mov	r4, r3
 800a4fc:	f04f 0500 	mov.w	r5, #0
 800a500:	4622      	mov	r2, r4
 800a502:	462b      	mov	r3, r5
 800a504:	1891      	adds	r1, r2, r2
 800a506:	6439      	str	r1, [r7, #64]	; 0x40
 800a508:	415b      	adcs	r3, r3
 800a50a:	647b      	str	r3, [r7, #68]	; 0x44
 800a50c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a510:	1912      	adds	r2, r2, r4
 800a512:	eb45 0303 	adc.w	r3, r5, r3
 800a516:	f04f 0000 	mov.w	r0, #0
 800a51a:	f04f 0100 	mov.w	r1, #0
 800a51e:	00d9      	lsls	r1, r3, #3
 800a520:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a524:	00d0      	lsls	r0, r2, #3
 800a526:	4602      	mov	r2, r0
 800a528:	460b      	mov	r3, r1
 800a52a:	1911      	adds	r1, r2, r4
 800a52c:	6639      	str	r1, [r7, #96]	; 0x60
 800a52e:	416b      	adcs	r3, r5
 800a530:	667b      	str	r3, [r7, #100]	; 0x64
 800a532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	461a      	mov	r2, r3
 800a538:	f04f 0300 	mov.w	r3, #0
 800a53c:	1891      	adds	r1, r2, r2
 800a53e:	63b9      	str	r1, [r7, #56]	; 0x38
 800a540:	415b      	adcs	r3, r3
 800a542:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a544:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a548:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a54c:	f7f6 fba4 	bl	8000c98 <__aeabi_uldivmod>
 800a550:	4602      	mov	r2, r0
 800a552:	460b      	mov	r3, r1
 800a554:	4ba5      	ldr	r3, [pc, #660]	; (800a7ec <UART_SetConfig+0x38c>)
 800a556:	fba3 2302 	umull	r2, r3, r3, r2
 800a55a:	095b      	lsrs	r3, r3, #5
 800a55c:	011e      	lsls	r6, r3, #4
 800a55e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a560:	461c      	mov	r4, r3
 800a562:	f04f 0500 	mov.w	r5, #0
 800a566:	4622      	mov	r2, r4
 800a568:	462b      	mov	r3, r5
 800a56a:	1891      	adds	r1, r2, r2
 800a56c:	6339      	str	r1, [r7, #48]	; 0x30
 800a56e:	415b      	adcs	r3, r3
 800a570:	637b      	str	r3, [r7, #52]	; 0x34
 800a572:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a576:	1912      	adds	r2, r2, r4
 800a578:	eb45 0303 	adc.w	r3, r5, r3
 800a57c:	f04f 0000 	mov.w	r0, #0
 800a580:	f04f 0100 	mov.w	r1, #0
 800a584:	00d9      	lsls	r1, r3, #3
 800a586:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a58a:	00d0      	lsls	r0, r2, #3
 800a58c:	4602      	mov	r2, r0
 800a58e:	460b      	mov	r3, r1
 800a590:	1911      	adds	r1, r2, r4
 800a592:	65b9      	str	r1, [r7, #88]	; 0x58
 800a594:	416b      	adcs	r3, r5
 800a596:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	461a      	mov	r2, r3
 800a59e:	f04f 0300 	mov.w	r3, #0
 800a5a2:	1891      	adds	r1, r2, r2
 800a5a4:	62b9      	str	r1, [r7, #40]	; 0x28
 800a5a6:	415b      	adcs	r3, r3
 800a5a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a5aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a5ae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a5b2:	f7f6 fb71 	bl	8000c98 <__aeabi_uldivmod>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	4b8c      	ldr	r3, [pc, #560]	; (800a7ec <UART_SetConfig+0x38c>)
 800a5bc:	fba3 1302 	umull	r1, r3, r3, r2
 800a5c0:	095b      	lsrs	r3, r3, #5
 800a5c2:	2164      	movs	r1, #100	; 0x64
 800a5c4:	fb01 f303 	mul.w	r3, r1, r3
 800a5c8:	1ad3      	subs	r3, r2, r3
 800a5ca:	00db      	lsls	r3, r3, #3
 800a5cc:	3332      	adds	r3, #50	; 0x32
 800a5ce:	4a87      	ldr	r2, [pc, #540]	; (800a7ec <UART_SetConfig+0x38c>)
 800a5d0:	fba2 2303 	umull	r2, r3, r2, r3
 800a5d4:	095b      	lsrs	r3, r3, #5
 800a5d6:	005b      	lsls	r3, r3, #1
 800a5d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a5dc:	441e      	add	r6, r3
 800a5de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f04f 0100 	mov.w	r1, #0
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	1894      	adds	r4, r2, r2
 800a5ec:	623c      	str	r4, [r7, #32]
 800a5ee:	415b      	adcs	r3, r3
 800a5f0:	627b      	str	r3, [r7, #36]	; 0x24
 800a5f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a5f6:	1812      	adds	r2, r2, r0
 800a5f8:	eb41 0303 	adc.w	r3, r1, r3
 800a5fc:	f04f 0400 	mov.w	r4, #0
 800a600:	f04f 0500 	mov.w	r5, #0
 800a604:	00dd      	lsls	r5, r3, #3
 800a606:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a60a:	00d4      	lsls	r4, r2, #3
 800a60c:	4622      	mov	r2, r4
 800a60e:	462b      	mov	r3, r5
 800a610:	1814      	adds	r4, r2, r0
 800a612:	653c      	str	r4, [r7, #80]	; 0x50
 800a614:	414b      	adcs	r3, r1
 800a616:	657b      	str	r3, [r7, #84]	; 0x54
 800a618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	461a      	mov	r2, r3
 800a61e:	f04f 0300 	mov.w	r3, #0
 800a622:	1891      	adds	r1, r2, r2
 800a624:	61b9      	str	r1, [r7, #24]
 800a626:	415b      	adcs	r3, r3
 800a628:	61fb      	str	r3, [r7, #28]
 800a62a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a62e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a632:	f7f6 fb31 	bl	8000c98 <__aeabi_uldivmod>
 800a636:	4602      	mov	r2, r0
 800a638:	460b      	mov	r3, r1
 800a63a:	4b6c      	ldr	r3, [pc, #432]	; (800a7ec <UART_SetConfig+0x38c>)
 800a63c:	fba3 1302 	umull	r1, r3, r3, r2
 800a640:	095b      	lsrs	r3, r3, #5
 800a642:	2164      	movs	r1, #100	; 0x64
 800a644:	fb01 f303 	mul.w	r3, r1, r3
 800a648:	1ad3      	subs	r3, r2, r3
 800a64a:	00db      	lsls	r3, r3, #3
 800a64c:	3332      	adds	r3, #50	; 0x32
 800a64e:	4a67      	ldr	r2, [pc, #412]	; (800a7ec <UART_SetConfig+0x38c>)
 800a650:	fba2 2303 	umull	r2, r3, r2, r3
 800a654:	095b      	lsrs	r3, r3, #5
 800a656:	f003 0207 	and.w	r2, r3, #7
 800a65a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	4432      	add	r2, r6
 800a660:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a662:	e0b9      	b.n	800a7d8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a664:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a666:	461c      	mov	r4, r3
 800a668:	f04f 0500 	mov.w	r5, #0
 800a66c:	4622      	mov	r2, r4
 800a66e:	462b      	mov	r3, r5
 800a670:	1891      	adds	r1, r2, r2
 800a672:	6139      	str	r1, [r7, #16]
 800a674:	415b      	adcs	r3, r3
 800a676:	617b      	str	r3, [r7, #20]
 800a678:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a67c:	1912      	adds	r2, r2, r4
 800a67e:	eb45 0303 	adc.w	r3, r5, r3
 800a682:	f04f 0000 	mov.w	r0, #0
 800a686:	f04f 0100 	mov.w	r1, #0
 800a68a:	00d9      	lsls	r1, r3, #3
 800a68c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a690:	00d0      	lsls	r0, r2, #3
 800a692:	4602      	mov	r2, r0
 800a694:	460b      	mov	r3, r1
 800a696:	eb12 0804 	adds.w	r8, r2, r4
 800a69a:	eb43 0905 	adc.w	r9, r3, r5
 800a69e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f04f 0100 	mov.w	r1, #0
 800a6a8:	f04f 0200 	mov.w	r2, #0
 800a6ac:	f04f 0300 	mov.w	r3, #0
 800a6b0:	008b      	lsls	r3, r1, #2
 800a6b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a6b6:	0082      	lsls	r2, r0, #2
 800a6b8:	4640      	mov	r0, r8
 800a6ba:	4649      	mov	r1, r9
 800a6bc:	f7f6 faec 	bl	8000c98 <__aeabi_uldivmod>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	4b49      	ldr	r3, [pc, #292]	; (800a7ec <UART_SetConfig+0x38c>)
 800a6c6:	fba3 2302 	umull	r2, r3, r3, r2
 800a6ca:	095b      	lsrs	r3, r3, #5
 800a6cc:	011e      	lsls	r6, r3, #4
 800a6ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f04f 0100 	mov.w	r1, #0
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	460b      	mov	r3, r1
 800a6da:	1894      	adds	r4, r2, r2
 800a6dc:	60bc      	str	r4, [r7, #8]
 800a6de:	415b      	adcs	r3, r3
 800a6e0:	60fb      	str	r3, [r7, #12]
 800a6e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a6e6:	1812      	adds	r2, r2, r0
 800a6e8:	eb41 0303 	adc.w	r3, r1, r3
 800a6ec:	f04f 0400 	mov.w	r4, #0
 800a6f0:	f04f 0500 	mov.w	r5, #0
 800a6f4:	00dd      	lsls	r5, r3, #3
 800a6f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a6fa:	00d4      	lsls	r4, r2, #3
 800a6fc:	4622      	mov	r2, r4
 800a6fe:	462b      	mov	r3, r5
 800a700:	1814      	adds	r4, r2, r0
 800a702:	64bc      	str	r4, [r7, #72]	; 0x48
 800a704:	414b      	adcs	r3, r1
 800a706:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a70a:	685b      	ldr	r3, [r3, #4]
 800a70c:	4618      	mov	r0, r3
 800a70e:	f04f 0100 	mov.w	r1, #0
 800a712:	f04f 0200 	mov.w	r2, #0
 800a716:	f04f 0300 	mov.w	r3, #0
 800a71a:	008b      	lsls	r3, r1, #2
 800a71c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a720:	0082      	lsls	r2, r0, #2
 800a722:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a726:	f7f6 fab7 	bl	8000c98 <__aeabi_uldivmod>
 800a72a:	4602      	mov	r2, r0
 800a72c:	460b      	mov	r3, r1
 800a72e:	4b2f      	ldr	r3, [pc, #188]	; (800a7ec <UART_SetConfig+0x38c>)
 800a730:	fba3 1302 	umull	r1, r3, r3, r2
 800a734:	095b      	lsrs	r3, r3, #5
 800a736:	2164      	movs	r1, #100	; 0x64
 800a738:	fb01 f303 	mul.w	r3, r1, r3
 800a73c:	1ad3      	subs	r3, r2, r3
 800a73e:	011b      	lsls	r3, r3, #4
 800a740:	3332      	adds	r3, #50	; 0x32
 800a742:	4a2a      	ldr	r2, [pc, #168]	; (800a7ec <UART_SetConfig+0x38c>)
 800a744:	fba2 2303 	umull	r2, r3, r2, r3
 800a748:	095b      	lsrs	r3, r3, #5
 800a74a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a74e:	441e      	add	r6, r3
 800a750:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a752:	4618      	mov	r0, r3
 800a754:	f04f 0100 	mov.w	r1, #0
 800a758:	4602      	mov	r2, r0
 800a75a:	460b      	mov	r3, r1
 800a75c:	1894      	adds	r4, r2, r2
 800a75e:	603c      	str	r4, [r7, #0]
 800a760:	415b      	adcs	r3, r3
 800a762:	607b      	str	r3, [r7, #4]
 800a764:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a768:	1812      	adds	r2, r2, r0
 800a76a:	eb41 0303 	adc.w	r3, r1, r3
 800a76e:	f04f 0400 	mov.w	r4, #0
 800a772:	f04f 0500 	mov.w	r5, #0
 800a776:	00dd      	lsls	r5, r3, #3
 800a778:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a77c:	00d4      	lsls	r4, r2, #3
 800a77e:	4622      	mov	r2, r4
 800a780:	462b      	mov	r3, r5
 800a782:	eb12 0a00 	adds.w	sl, r2, r0
 800a786:	eb43 0b01 	adc.w	fp, r3, r1
 800a78a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	4618      	mov	r0, r3
 800a790:	f04f 0100 	mov.w	r1, #0
 800a794:	f04f 0200 	mov.w	r2, #0
 800a798:	f04f 0300 	mov.w	r3, #0
 800a79c:	008b      	lsls	r3, r1, #2
 800a79e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a7a2:	0082      	lsls	r2, r0, #2
 800a7a4:	4650      	mov	r0, sl
 800a7a6:	4659      	mov	r1, fp
 800a7a8:	f7f6 fa76 	bl	8000c98 <__aeabi_uldivmod>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	4b0e      	ldr	r3, [pc, #56]	; (800a7ec <UART_SetConfig+0x38c>)
 800a7b2:	fba3 1302 	umull	r1, r3, r3, r2
 800a7b6:	095b      	lsrs	r3, r3, #5
 800a7b8:	2164      	movs	r1, #100	; 0x64
 800a7ba:	fb01 f303 	mul.w	r3, r1, r3
 800a7be:	1ad3      	subs	r3, r2, r3
 800a7c0:	011b      	lsls	r3, r3, #4
 800a7c2:	3332      	adds	r3, #50	; 0x32
 800a7c4:	4a09      	ldr	r2, [pc, #36]	; (800a7ec <UART_SetConfig+0x38c>)
 800a7c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a7ca:	095b      	lsrs	r3, r3, #5
 800a7cc:	f003 020f 	and.w	r2, r3, #15
 800a7d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4432      	add	r2, r6
 800a7d6:	609a      	str	r2, [r3, #8]
}
 800a7d8:	bf00      	nop
 800a7da:	377c      	adds	r7, #124	; 0x7c
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7e2:	bf00      	nop
 800a7e4:	40011000 	.word	0x40011000
 800a7e8:	40011400 	.word	0x40011400
 800a7ec:	51eb851f 	.word	0x51eb851f

0800a7f0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a7f0:	b084      	sub	sp, #16
 800a7f2:	b480      	push	{r7}
 800a7f4:	b085      	sub	sp, #20
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	6078      	str	r0, [r7, #4]
 800a7fa:	f107 001c 	add.w	r0, r7, #28
 800a7fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a802:	2300      	movs	r3, #0
 800a804:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a806:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a808:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a80a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a80e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a810:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a812:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a816:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a81a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a81c:	68fa      	ldr	r2, [r7, #12]
 800a81e:	4313      	orrs	r3, r2
 800a820:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800a82a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a82e:	68fa      	ldr	r2, [r7, #12]
 800a830:	431a      	orrs	r2, r3
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a836:	2300      	movs	r3, #0
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3714      	adds	r7, #20
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	b004      	add	sp, #16
 800a844:	4770      	bx	lr

0800a846 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a846:	b480      	push	{r7}
 800a848:	b083      	sub	sp, #12
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a854:	4618      	mov	r0, r3
 800a856:	370c      	adds	r7, #12
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr

0800a860 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a860:	b480      	push	{r7}
 800a862:	b083      	sub	sp, #12
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a874:	2300      	movs	r3, #0
}
 800a876:	4618      	mov	r0, r3
 800a878:	370c      	adds	r7, #12
 800a87a:	46bd      	mov	sp, r7
 800a87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a880:	4770      	bx	lr

0800a882 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a882:	b580      	push	{r7, lr}
 800a884:	b082      	sub	sp, #8
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2203      	movs	r2, #3
 800a88e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800a890:	2002      	movs	r0, #2
 800a892:	f7fb fb71 	bl	8005f78 <HAL_Delay>
  
  return HAL_OK;
 800a896:	2300      	movs	r3, #0
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3708      	adds	r7, #8
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b083      	sub	sp, #12
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f003 0303 	and.w	r3, r3, #3
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	681a      	ldr	r2, [r3, #0]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a8da:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a8e0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a8e6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a8e8:	68fa      	ldr	r2, [r7, #12]
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	68db      	ldr	r3, [r3, #12]
 800a8f2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a8f6:	f023 030f 	bic.w	r3, r3, #15
 800a8fa:	68fa      	ldr	r2, [r7, #12]
 800a8fc:	431a      	orrs	r2, r3
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a902:	2300      	movs	r3, #0
}
 800a904:	4618      	mov	r0, r3
 800a906:	3714      	adds	r7, #20
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr

0800a910 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a910:	b480      	push	{r7}
 800a912:	b083      	sub	sp, #12
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	691b      	ldr	r3, [r3, #16]
 800a91c:	b2db      	uxtb	r3, r3
}
 800a91e:	4618      	mov	r0, r3
 800a920:	370c      	adds	r7, #12
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr

0800a92a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a92a:	b480      	push	{r7}
 800a92c:	b085      	sub	sp, #20
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
 800a932:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	3314      	adds	r3, #20
 800a938:	461a      	mov	r2, r3
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	4413      	add	r3, r2
 800a93e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
}  
 800a944:	4618      	mov	r0, r3
 800a946:	3714      	adds	r7, #20
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr

0800a950 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a950:	b480      	push	{r7}
 800a952:	b085      	sub	sp, #20
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a95a:	2300      	movs	r3, #0
 800a95c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	685a      	ldr	r2, [r3, #4]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a976:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a97c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a982:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a984:	68fa      	ldr	r2, [r7, #12]
 800a986:	4313      	orrs	r3, r2
 800a988:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a98e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	431a      	orrs	r2, r3
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a99a:	2300      	movs	r3, #0

}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3714      	adds	r7, #20
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr

0800a9a8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b088      	sub	sp, #32
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a9b6:	2310      	movs	r3, #16
 800a9b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a9ba:	2340      	movs	r3, #64	; 0x40
 800a9bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a9c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a9c8:	f107 0308 	add.w	r3, r7, #8
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f7ff ff74 	bl	800a8bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a9d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9d8:	2110      	movs	r1, #16
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 fa02 	bl	800ade4 <SDMMC_GetCmdResp1>
 800a9e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9e2:	69fb      	ldr	r3, [r7, #28]
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3720      	adds	r7, #32
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b088      	sub	sp, #32
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a9fa:	2311      	movs	r3, #17
 800a9fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a9fe:	2340      	movs	r3, #64	; 0x40
 800aa00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa02:	2300      	movs	r3, #0
 800aa04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa0a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa0c:	f107 0308 	add.w	r3, r7, #8
 800aa10:	4619      	mov	r1, r3
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f7ff ff52 	bl	800a8bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800aa18:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa1c:	2111      	movs	r1, #17
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 f9e0 	bl	800ade4 <SDMMC_GetCmdResp1>
 800aa24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa26:	69fb      	ldr	r3, [r7, #28]
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3720      	adds	r7, #32
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b088      	sub	sp, #32
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800aa3e:	2312      	movs	r3, #18
 800aa40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aa42:	2340      	movs	r3, #64	; 0x40
 800aa44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa46:	2300      	movs	r3, #0
 800aa48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa50:	f107 0308 	add.w	r3, r7, #8
 800aa54:	4619      	mov	r1, r3
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f7ff ff30 	bl	800a8bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800aa5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa60:	2112      	movs	r1, #18
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f000 f9be 	bl	800ade4 <SDMMC_GetCmdResp1>
 800aa68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa6a:	69fb      	ldr	r3, [r7, #28]
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3720      	adds	r7, #32
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b088      	sub	sp, #32
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800aa82:	2318      	movs	r3, #24
 800aa84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aa86:	2340      	movs	r3, #64	; 0x40
 800aa88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa94:	f107 0308 	add.w	r3, r7, #8
 800aa98:	4619      	mov	r1, r3
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f7ff ff0e 	bl	800a8bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800aaa0:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaa4:	2118      	movs	r1, #24
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 f99c 	bl	800ade4 <SDMMC_GetCmdResp1>
 800aaac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aaae:	69fb      	ldr	r3, [r7, #28]
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3720      	adds	r7, #32
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b088      	sub	sp, #32
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800aac6:	2319      	movs	r3, #25
 800aac8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aaca:	2340      	movs	r3, #64	; 0x40
 800aacc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aace:	2300      	movs	r3, #0
 800aad0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aad6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aad8:	f107 0308 	add.w	r3, r7, #8
 800aadc:	4619      	mov	r1, r3
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f7ff feec 	bl	800a8bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800aae4:	f241 3288 	movw	r2, #5000	; 0x1388
 800aae8:	2119      	movs	r1, #25
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 f97a 	bl	800ade4 <SDMMC_GetCmdResp1>
 800aaf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aaf2:	69fb      	ldr	r3, [r7, #28]
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3720      	adds	r7, #32
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b088      	sub	sp, #32
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ab04:	2300      	movs	r3, #0
 800ab06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ab08:	230c      	movs	r3, #12
 800ab0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ab0c:	2340      	movs	r3, #64	; 0x40
 800ab0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab10:	2300      	movs	r3, #0
 800ab12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab1a:	f107 0308 	add.w	r3, r7, #8
 800ab1e:	4619      	mov	r1, r3
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f7ff fecb 	bl	800a8bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800ab26:	4a05      	ldr	r2, [pc, #20]	; (800ab3c <SDMMC_CmdStopTransfer+0x40>)
 800ab28:	210c      	movs	r1, #12
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f000 f95a 	bl	800ade4 <SDMMC_GetCmdResp1>
 800ab30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab32:	69fb      	ldr	r3, [r7, #28]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3720      	adds	r7, #32
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	05f5e100 	.word	0x05f5e100

0800ab40 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b08a      	sub	sp, #40	; 0x28
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ab50:	2307      	movs	r3, #7
 800ab52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ab54:	2340      	movs	r3, #64	; 0x40
 800ab56:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab60:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab62:	f107 0310 	add.w	r3, r7, #16
 800ab66:	4619      	mov	r1, r3
 800ab68:	68f8      	ldr	r0, [r7, #12]
 800ab6a:	f7ff fea7 	bl	800a8bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800ab6e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab72:	2107      	movs	r1, #7
 800ab74:	68f8      	ldr	r0, [r7, #12]
 800ab76:	f000 f935 	bl	800ade4 <SDMMC_GetCmdResp1>
 800ab7a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ab7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3728      	adds	r7, #40	; 0x28
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}

0800ab86 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800ab86:	b580      	push	{r7, lr}
 800ab88:	b088      	sub	sp, #32
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ab92:	2300      	movs	r3, #0
 800ab94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ab96:	2300      	movs	r3, #0
 800ab98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aba2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aba4:	f107 0308 	add.w	r3, r7, #8
 800aba8:	4619      	mov	r1, r3
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f7ff fe86 	bl	800a8bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f000 f8eb 	bl	800ad8c <SDMMC_GetCmdError>
 800abb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abb8:	69fb      	ldr	r3, [r7, #28]
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3720      	adds	r7, #32
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b088      	sub	sp, #32
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800abca:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800abce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800abd0:	2308      	movs	r3, #8
 800abd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800abd4:	2340      	movs	r3, #64	; 0x40
 800abd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800abd8:	2300      	movs	r3, #0
 800abda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800abdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abe0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800abe2:	f107 0308 	add.w	r3, r7, #8
 800abe6:	4619      	mov	r1, r3
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f7ff fe67 	bl	800a8bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 fae2 	bl	800b1b8 <SDMMC_GetCmdResp7>
 800abf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abf6:	69fb      	ldr	r3, [r7, #28]
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3720      	adds	r7, #32
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b088      	sub	sp, #32
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ac0e:	2337      	movs	r3, #55	; 0x37
 800ac10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac12:	2340      	movs	r3, #64	; 0x40
 800ac14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac16:	2300      	movs	r3, #0
 800ac18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac1e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac20:	f107 0308 	add.w	r3, r7, #8
 800ac24:	4619      	mov	r1, r3
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f7ff fe48 	bl	800a8bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800ac2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac30:	2137      	movs	r1, #55	; 0x37
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 f8d6 	bl	800ade4 <SDMMC_GetCmdResp1>
 800ac38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac3a:	69fb      	ldr	r3, [r7, #28]
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3720      	adds	r7, #32
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b088      	sub	sp, #32
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ac5a:	2329      	movs	r3, #41	; 0x29
 800ac5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac5e:	2340      	movs	r3, #64	; 0x40
 800ac60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac62:	2300      	movs	r3, #0
 800ac64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac6c:	f107 0308 	add.w	r3, r7, #8
 800ac70:	4619      	mov	r1, r3
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f7ff fe22 	bl	800a8bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 f9e9 	bl	800b050 <SDMMC_GetCmdResp3>
 800ac7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac80:	69fb      	ldr	r3, [r7, #28]
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3720      	adds	r7, #32
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}

0800ac8a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800ac8a:	b580      	push	{r7, lr}
 800ac8c:	b088      	sub	sp, #32
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ac92:	2300      	movs	r3, #0
 800ac94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ac96:	2302      	movs	r3, #2
 800ac98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ac9a:	23c0      	movs	r3, #192	; 0xc0
 800ac9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aca6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aca8:	f107 0308 	add.w	r3, r7, #8
 800acac:	4619      	mov	r1, r3
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f7ff fe04 	bl	800a8bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f000 f983 	bl	800afc0 <SDMMC_GetCmdResp2>
 800acba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acbc:	69fb      	ldr	r3, [r7, #28]
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3720      	adds	r7, #32
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b088      	sub	sp, #32
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
 800acce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800acd4:	2309      	movs	r3, #9
 800acd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800acd8:	23c0      	movs	r3, #192	; 0xc0
 800acda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800acdc:	2300      	movs	r3, #0
 800acde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ace0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ace4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ace6:	f107 0308 	add.w	r3, r7, #8
 800acea:	4619      	mov	r1, r3
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f7ff fde5 	bl	800a8bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 f964 	bl	800afc0 <SDMMC_GetCmdResp2>
 800acf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acfa:	69fb      	ldr	r3, [r7, #28]
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3720      	adds	r7, #32
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}

0800ad04 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b088      	sub	sp, #32
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ad12:	2303      	movs	r3, #3
 800ad14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad16:	2340      	movs	r3, #64	; 0x40
 800ad18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad24:	f107 0308 	add.w	r3, r7, #8
 800ad28:	4619      	mov	r1, r3
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f7ff fdc6 	bl	800a8bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ad30:	683a      	ldr	r2, [r7, #0]
 800ad32:	2103      	movs	r1, #3
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 f9c9 	bl	800b0cc <SDMMC_GetCmdResp6>
 800ad3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad3c:	69fb      	ldr	r3, [r7, #28]
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3720      	adds	r7, #32
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}

0800ad46 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ad46:	b580      	push	{r7, lr}
 800ad48:	b088      	sub	sp, #32
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	6078      	str	r0, [r7, #4]
 800ad4e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ad54:	230d      	movs	r3, #13
 800ad56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad58:	2340      	movs	r3, #64	; 0x40
 800ad5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad66:	f107 0308 	add.w	r3, r7, #8
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f7ff fda5 	bl	800a8bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800ad72:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad76:	210d      	movs	r1, #13
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f000 f833 	bl	800ade4 <SDMMC_GetCmdResp1>
 800ad7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad80:	69fb      	ldr	r3, [r7, #28]
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3720      	adds	r7, #32
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
	...

0800ad8c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b085      	sub	sp, #20
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ad94:	4b11      	ldr	r3, [pc, #68]	; (800addc <SDMMC_GetCmdError+0x50>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4a11      	ldr	r2, [pc, #68]	; (800ade0 <SDMMC_GetCmdError+0x54>)
 800ad9a:	fba2 2303 	umull	r2, r3, r2, r3
 800ad9e:	0a5b      	lsrs	r3, r3, #9
 800ada0:	f241 3288 	movw	r2, #5000	; 0x1388
 800ada4:	fb02 f303 	mul.w	r3, r2, r3
 800ada8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	1e5a      	subs	r2, r3, #1
 800adae:	60fa      	str	r2, [r7, #12]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d102      	bne.n	800adba <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800adb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800adb8:	e009      	b.n	800adce <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d0f1      	beq.n	800adaa <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	22c5      	movs	r2, #197	; 0xc5
 800adca:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800adcc:	2300      	movs	r3, #0
}
 800adce:	4618      	mov	r0, r3
 800add0:	3714      	adds	r7, #20
 800add2:	46bd      	mov	sp, r7
 800add4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add8:	4770      	bx	lr
 800adda:	bf00      	nop
 800addc:	20000004 	.word	0x20000004
 800ade0:	10624dd3 	.word	0x10624dd3

0800ade4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b088      	sub	sp, #32
 800ade8:	af00      	add	r7, sp, #0
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	460b      	mov	r3, r1
 800adee:	607a      	str	r2, [r7, #4]
 800adf0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800adf2:	4b70      	ldr	r3, [pc, #448]	; (800afb4 <SDMMC_GetCmdResp1+0x1d0>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	4a70      	ldr	r2, [pc, #448]	; (800afb8 <SDMMC_GetCmdResp1+0x1d4>)
 800adf8:	fba2 2303 	umull	r2, r3, r2, r3
 800adfc:	0a5a      	lsrs	r2, r3, #9
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	fb02 f303 	mul.w	r3, r2, r3
 800ae04:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ae06:	69fb      	ldr	r3, [r7, #28]
 800ae08:	1e5a      	subs	r2, r3, #1
 800ae0a:	61fa      	str	r2, [r7, #28]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d102      	bne.n	800ae16 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ae14:	e0c9      	b.n	800afaa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae1a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ae1c:	69bb      	ldr	r3, [r7, #24]
 800ae1e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d0ef      	beq.n	800ae06 <SDMMC_GetCmdResp1+0x22>
 800ae26:	69bb      	ldr	r3, [r7, #24]
 800ae28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d1ea      	bne.n	800ae06 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae34:	f003 0304 	and.w	r3, r3, #4
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d004      	beq.n	800ae46 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2204      	movs	r2, #4
 800ae40:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae42:	2304      	movs	r3, #4
 800ae44:	e0b1      	b.n	800afaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae4a:	f003 0301 	and.w	r3, r3, #1
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d004      	beq.n	800ae5c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2201      	movs	r2, #1
 800ae56:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae58:	2301      	movs	r3, #1
 800ae5a:	e0a6      	b.n	800afaa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	22c5      	movs	r2, #197	; 0xc5
 800ae60:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ae62:	68f8      	ldr	r0, [r7, #12]
 800ae64:	f7ff fd54 	bl	800a910 <SDIO_GetCommandResponse>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	7afb      	ldrb	r3, [r7, #11]
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d001      	beq.n	800ae76 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae72:	2301      	movs	r3, #1
 800ae74:	e099      	b.n	800afaa <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ae76:	2100      	movs	r1, #0
 800ae78:	68f8      	ldr	r0, [r7, #12]
 800ae7a:	f7ff fd56 	bl	800a92a <SDIO_GetResponse>
 800ae7e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ae80:	697a      	ldr	r2, [r7, #20]
 800ae82:	4b4e      	ldr	r3, [pc, #312]	; (800afbc <SDMMC_GetCmdResp1+0x1d8>)
 800ae84:	4013      	ands	r3, r2
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d101      	bne.n	800ae8e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	e08d      	b.n	800afaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	da02      	bge.n	800ae9a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ae94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ae98:	e087      	b.n	800afaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d001      	beq.n	800aea8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800aea4:	2340      	movs	r3, #64	; 0x40
 800aea6:	e080      	b.n	800afaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d001      	beq.n	800aeb6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800aeb2:	2380      	movs	r3, #128	; 0x80
 800aeb4:	e079      	b.n	800afaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d002      	beq.n	800aec6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800aec0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aec4:	e071      	b.n	800afaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d002      	beq.n	800aed6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800aed0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aed4:	e069      	b.n	800afaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d002      	beq.n	800aee6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800aee0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aee4:	e061      	b.n	800afaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d002      	beq.n	800aef6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800aef0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aef4:	e059      	b.n	800afaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d002      	beq.n	800af06 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800af00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af04:	e051      	b.n	800afaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d002      	beq.n	800af16 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800af10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800af14:	e049      	b.n	800afaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d002      	beq.n	800af26 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800af20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800af24:	e041      	b.n	800afaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d002      	beq.n	800af36 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800af30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af34:	e039      	b.n	800afaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d002      	beq.n	800af46 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800af40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800af44:	e031      	b.n	800afaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d002      	beq.n	800af56 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800af50:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800af54:	e029      	b.n	800afaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d002      	beq.n	800af66 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800af60:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800af64:	e021      	b.n	800afaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d002      	beq.n	800af76 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800af70:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800af74:	e019      	b.n	800afaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d002      	beq.n	800af86 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800af80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800af84:	e011      	b.n	800afaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d002      	beq.n	800af96 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800af90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800af94:	e009      	b.n	800afaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	f003 0308 	and.w	r3, r3, #8
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d002      	beq.n	800afa6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800afa0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800afa4:	e001      	b.n	800afaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800afa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3720      	adds	r7, #32
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	20000004 	.word	0x20000004
 800afb8:	10624dd3 	.word	0x10624dd3
 800afbc:	fdffe008 	.word	0xfdffe008

0800afc0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b085      	sub	sp, #20
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800afc8:	4b1f      	ldr	r3, [pc, #124]	; (800b048 <SDMMC_GetCmdResp2+0x88>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4a1f      	ldr	r2, [pc, #124]	; (800b04c <SDMMC_GetCmdResp2+0x8c>)
 800afce:	fba2 2303 	umull	r2, r3, r2, r3
 800afd2:	0a5b      	lsrs	r3, r3, #9
 800afd4:	f241 3288 	movw	r2, #5000	; 0x1388
 800afd8:	fb02 f303 	mul.w	r3, r2, r3
 800afdc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	1e5a      	subs	r2, r3, #1
 800afe2:	60fa      	str	r2, [r7, #12]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d102      	bne.n	800afee <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800afe8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800afec:	e026      	b.n	800b03c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aff2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800affa:	2b00      	cmp	r3, #0
 800affc:	d0ef      	beq.n	800afde <SDMMC_GetCmdResp2+0x1e>
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b004:	2b00      	cmp	r3, #0
 800b006:	d1ea      	bne.n	800afde <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b00c:	f003 0304 	and.w	r3, r3, #4
 800b010:	2b00      	cmp	r3, #0
 800b012:	d004      	beq.n	800b01e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2204      	movs	r2, #4
 800b018:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b01a:	2304      	movs	r3, #4
 800b01c:	e00e      	b.n	800b03c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b022:	f003 0301 	and.w	r3, r3, #1
 800b026:	2b00      	cmp	r3, #0
 800b028:	d004      	beq.n	800b034 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2201      	movs	r2, #1
 800b02e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b030:	2301      	movs	r3, #1
 800b032:	e003      	b.n	800b03c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	22c5      	movs	r2, #197	; 0xc5
 800b038:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b03a:	2300      	movs	r3, #0
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3714      	adds	r7, #20
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr
 800b048:	20000004 	.word	0x20000004
 800b04c:	10624dd3 	.word	0x10624dd3

0800b050 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b050:	b480      	push	{r7}
 800b052:	b085      	sub	sp, #20
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b058:	4b1a      	ldr	r3, [pc, #104]	; (800b0c4 <SDMMC_GetCmdResp3+0x74>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a1a      	ldr	r2, [pc, #104]	; (800b0c8 <SDMMC_GetCmdResp3+0x78>)
 800b05e:	fba2 2303 	umull	r2, r3, r2, r3
 800b062:	0a5b      	lsrs	r3, r3, #9
 800b064:	f241 3288 	movw	r2, #5000	; 0x1388
 800b068:	fb02 f303 	mul.w	r3, r2, r3
 800b06c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	1e5a      	subs	r2, r3, #1
 800b072:	60fa      	str	r2, [r7, #12]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d102      	bne.n	800b07e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b078:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b07c:	e01b      	b.n	800b0b6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b082:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d0ef      	beq.n	800b06e <SDMMC_GetCmdResp3+0x1e>
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b094:	2b00      	cmp	r3, #0
 800b096:	d1ea      	bne.n	800b06e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b09c:	f003 0304 	and.w	r3, r3, #4
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d004      	beq.n	800b0ae <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2204      	movs	r2, #4
 800b0a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b0aa:	2304      	movs	r3, #4
 800b0ac:	e003      	b.n	800b0b6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	22c5      	movs	r2, #197	; 0xc5
 800b0b2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b0b4:	2300      	movs	r3, #0
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3714      	adds	r7, #20
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c0:	4770      	bx	lr
 800b0c2:	bf00      	nop
 800b0c4:	20000004 	.word	0x20000004
 800b0c8:	10624dd3 	.word	0x10624dd3

0800b0cc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b088      	sub	sp, #32
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	60f8      	str	r0, [r7, #12]
 800b0d4:	460b      	mov	r3, r1
 800b0d6:	607a      	str	r2, [r7, #4]
 800b0d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b0da:	4b35      	ldr	r3, [pc, #212]	; (800b1b0 <SDMMC_GetCmdResp6+0xe4>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	4a35      	ldr	r2, [pc, #212]	; (800b1b4 <SDMMC_GetCmdResp6+0xe8>)
 800b0e0:	fba2 2303 	umull	r2, r3, r2, r3
 800b0e4:	0a5b      	lsrs	r3, r3, #9
 800b0e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0ea:	fb02 f303 	mul.w	r3, r2, r3
 800b0ee:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b0f0:	69fb      	ldr	r3, [r7, #28]
 800b0f2:	1e5a      	subs	r2, r3, #1
 800b0f4:	61fa      	str	r2, [r7, #28]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d102      	bne.n	800b100 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b0fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b0fe:	e052      	b.n	800b1a6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b104:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b106:	69bb      	ldr	r3, [r7, #24]
 800b108:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d0ef      	beq.n	800b0f0 <SDMMC_GetCmdResp6+0x24>
 800b110:	69bb      	ldr	r3, [r7, #24]
 800b112:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b116:	2b00      	cmp	r3, #0
 800b118:	d1ea      	bne.n	800b0f0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b11e:	f003 0304 	and.w	r3, r3, #4
 800b122:	2b00      	cmp	r3, #0
 800b124:	d004      	beq.n	800b130 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2204      	movs	r2, #4
 800b12a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b12c:	2304      	movs	r3, #4
 800b12e:	e03a      	b.n	800b1a6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b134:	f003 0301 	and.w	r3, r3, #1
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d004      	beq.n	800b146 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2201      	movs	r2, #1
 800b140:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b142:	2301      	movs	r3, #1
 800b144:	e02f      	b.n	800b1a6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b146:	68f8      	ldr	r0, [r7, #12]
 800b148:	f7ff fbe2 	bl	800a910 <SDIO_GetCommandResponse>
 800b14c:	4603      	mov	r3, r0
 800b14e:	461a      	mov	r2, r3
 800b150:	7afb      	ldrb	r3, [r7, #11]
 800b152:	4293      	cmp	r3, r2
 800b154:	d001      	beq.n	800b15a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b156:	2301      	movs	r3, #1
 800b158:	e025      	b.n	800b1a6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	22c5      	movs	r2, #197	; 0xc5
 800b15e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b160:	2100      	movs	r1, #0
 800b162:	68f8      	ldr	r0, [r7, #12]
 800b164:	f7ff fbe1 	bl	800a92a <SDIO_GetResponse>
 800b168:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b170:	2b00      	cmp	r3, #0
 800b172:	d106      	bne.n	800b182 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	0c1b      	lsrs	r3, r3, #16
 800b178:	b29a      	uxth	r2, r3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b17e:	2300      	movs	r3, #0
 800b180:	e011      	b.n	800b1a6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d002      	beq.n	800b192 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b18c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b190:	e009      	b.n	800b1a6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d002      	beq.n	800b1a2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b19c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b1a0:	e001      	b.n	800b1a6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b1a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3720      	adds	r7, #32
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	20000004 	.word	0x20000004
 800b1b4:	10624dd3 	.word	0x10624dd3

0800b1b8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b085      	sub	sp, #20
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b1c0:	4b22      	ldr	r3, [pc, #136]	; (800b24c <SDMMC_GetCmdResp7+0x94>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4a22      	ldr	r2, [pc, #136]	; (800b250 <SDMMC_GetCmdResp7+0x98>)
 800b1c6:	fba2 2303 	umull	r2, r3, r2, r3
 800b1ca:	0a5b      	lsrs	r3, r3, #9
 800b1cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1d0:	fb02 f303 	mul.w	r3, r2, r3
 800b1d4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	1e5a      	subs	r2, r3, #1
 800b1da:	60fa      	str	r2, [r7, #12]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d102      	bne.n	800b1e6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1e4:	e02c      	b.n	800b240 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1ea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d0ef      	beq.n	800b1d6 <SDMMC_GetCmdResp7+0x1e>
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d1ea      	bne.n	800b1d6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b204:	f003 0304 	and.w	r3, r3, #4
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d004      	beq.n	800b216 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2204      	movs	r2, #4
 800b210:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b212:	2304      	movs	r3, #4
 800b214:	e014      	b.n	800b240 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b21a:	f003 0301 	and.w	r3, r3, #1
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d004      	beq.n	800b22c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2201      	movs	r2, #1
 800b226:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b228:	2301      	movs	r3, #1
 800b22a:	e009      	b.n	800b240 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b234:	2b00      	cmp	r3, #0
 800b236:	d002      	beq.n	800b23e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2240      	movs	r2, #64	; 0x40
 800b23c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b23e:	2300      	movs	r3, #0
  
}
 800b240:	4618      	mov	r0, r3
 800b242:	3714      	adds	r7, #20
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr
 800b24c:	20000004 	.word	0x20000004
 800b250:	10624dd3 	.word	0x10624dd3

0800b254 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b258:	4904      	ldr	r1, [pc, #16]	; (800b26c <MX_FATFS_Init+0x18>)
 800b25a:	4805      	ldr	r0, [pc, #20]	; (800b270 <MX_FATFS_Init+0x1c>)
 800b25c:	f002 fff0 	bl	800e240 <FATFS_LinkDriver>
 800b260:	4603      	mov	r3, r0
 800b262:	461a      	mov	r2, r3
 800b264:	4b03      	ldr	r3, [pc, #12]	; (800b274 <MX_FATFS_Init+0x20>)
 800b266:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b268:	bf00      	nop
 800b26a:	bd80      	pop	{r7, pc}
 800b26c:	200029b8 	.word	0x200029b8
 800b270:	080160d4 	.word	0x080160d4
 800b274:	200029b4 	.word	0x200029b4

0800b278 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b278:	b480      	push	{r7}
 800b27a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b27c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b27e:	4618      	mov	r0, r3
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr

0800b288 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b28e:	2300      	movs	r3, #0
 800b290:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b292:	f000 f86b 	bl	800b36c <BSP_SD_IsDetected>
 800b296:	4603      	mov	r3, r0
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d001      	beq.n	800b2a0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800b29c:	2301      	movs	r3, #1
 800b29e:	e005      	b.n	800b2ac <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800b2a0:	4804      	ldr	r0, [pc, #16]	; (800b2b4 <BSP_SD_Init+0x2c>)
 800b2a2:	f7fd fa63 	bl	800876c <HAL_SD_Init>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800b2aa:	79fb      	ldrb	r3, [r7, #7]
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3708      	adds	r7, #8
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}
 800b2b4:	200028d4 	.word	0x200028d4

0800b2b8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b088      	sub	sp, #32
 800b2bc:	af02      	add	r7, sp, #8
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	60b9      	str	r1, [r7, #8]
 800b2c2:	607a      	str	r2, [r7, #4]
 800b2c4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	9300      	str	r3, [sp, #0]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	68ba      	ldr	r2, [r7, #8]
 800b2d2:	68f9      	ldr	r1, [r7, #12]
 800b2d4:	4806      	ldr	r0, [pc, #24]	; (800b2f0 <BSP_SD_ReadBlocks+0x38>)
 800b2d6:	f7fd faf7 	bl	80088c8 <HAL_SD_ReadBlocks>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d001      	beq.n	800b2e4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b2e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3718      	adds	r7, #24
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	200028d4 	.word	0x200028d4

0800b2f4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b088      	sub	sp, #32
 800b2f8:	af02      	add	r7, sp, #8
 800b2fa:	60f8      	str	r0, [r7, #12]
 800b2fc:	60b9      	str	r1, [r7, #8]
 800b2fe:	607a      	str	r2, [r7, #4]
 800b300:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b302:	2300      	movs	r3, #0
 800b304:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	9300      	str	r3, [sp, #0]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	68ba      	ldr	r2, [r7, #8]
 800b30e:	68f9      	ldr	r1, [r7, #12]
 800b310:	4806      	ldr	r0, [pc, #24]	; (800b32c <BSP_SD_WriteBlocks+0x38>)
 800b312:	f7fd fcb7 	bl	8008c84 <HAL_SD_WriteBlocks>
 800b316:	4603      	mov	r3, r0
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d001      	beq.n	800b320 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b31c:	2301      	movs	r3, #1
 800b31e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b320:	7dfb      	ldrb	r3, [r7, #23]
}
 800b322:	4618      	mov	r0, r3
 800b324:	3718      	adds	r7, #24
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}
 800b32a:	bf00      	nop
 800b32c:	200028d4 	.word	0x200028d4

0800b330 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b334:	4805      	ldr	r0, [pc, #20]	; (800b34c <BSP_SD_GetCardState+0x1c>)
 800b336:	f7fd fffb 	bl	8009330 <HAL_SD_GetCardState>
 800b33a:	4603      	mov	r3, r0
 800b33c:	2b04      	cmp	r3, #4
 800b33e:	bf14      	ite	ne
 800b340:	2301      	movne	r3, #1
 800b342:	2300      	moveq	r3, #0
 800b344:	b2db      	uxtb	r3, r3
}
 800b346:	4618      	mov	r0, r3
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	200028d4 	.word	0x200028d4

0800b350 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800b358:	6879      	ldr	r1, [r7, #4]
 800b35a:	4803      	ldr	r0, [pc, #12]	; (800b368 <BSP_SD_GetCardInfo+0x18>)
 800b35c:	f7fd ffbc 	bl	80092d8 <HAL_SD_GetCardInfo>
}
 800b360:	bf00      	nop
 800b362:	3708      	adds	r7, #8
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}
 800b368:	200028d4 	.word	0x200028d4

0800b36c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b083      	sub	sp, #12
 800b370:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b372:	2301      	movs	r3, #1
 800b374:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800b376:	79fb      	ldrb	r3, [r7, #7]
 800b378:	b2db      	uxtb	r3, r3
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	370c      	adds	r7, #12
 800b37e:	46bd      	mov	sp, r7
 800b380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b384:	4770      	bx	lr
	...

0800b388 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b082      	sub	sp, #8
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	4603      	mov	r3, r0
 800b390:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b392:	4b0b      	ldr	r3, [pc, #44]	; (800b3c0 <SD_CheckStatus+0x38>)
 800b394:	2201      	movs	r2, #1
 800b396:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b398:	f7ff ffca 	bl	800b330 <BSP_SD_GetCardState>
 800b39c:	4603      	mov	r3, r0
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d107      	bne.n	800b3b2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b3a2:	4b07      	ldr	r3, [pc, #28]	; (800b3c0 <SD_CheckStatus+0x38>)
 800b3a4:	781b      	ldrb	r3, [r3, #0]
 800b3a6:	b2db      	uxtb	r3, r3
 800b3a8:	f023 0301 	bic.w	r3, r3, #1
 800b3ac:	b2da      	uxtb	r2, r3
 800b3ae:	4b04      	ldr	r3, [pc, #16]	; (800b3c0 <SD_CheckStatus+0x38>)
 800b3b0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b3b2:	4b03      	ldr	r3, [pc, #12]	; (800b3c0 <SD_CheckStatus+0x38>)
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	b2db      	uxtb	r3, r3
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3708      	adds	r7, #8
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}
 800b3c0:	20000055 	.word	0x20000055

0800b3c4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b082      	sub	sp, #8
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b3ce:	4b0b      	ldr	r3, [pc, #44]	; (800b3fc <SD_initialize+0x38>)
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b3d4:	f7ff ff58 	bl	800b288 <BSP_SD_Init>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d107      	bne.n	800b3ee <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800b3de:	79fb      	ldrb	r3, [r7, #7]
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f7ff ffd1 	bl	800b388 <SD_CheckStatus>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	4b04      	ldr	r3, [pc, #16]	; (800b3fc <SD_initialize+0x38>)
 800b3ec:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b3ee:	4b03      	ldr	r3, [pc, #12]	; (800b3fc <SD_initialize+0x38>)
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	b2db      	uxtb	r3, r3
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3708      	adds	r7, #8
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}
 800b3fc:	20000055 	.word	0x20000055

0800b400 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b082      	sub	sp, #8
 800b404:	af00      	add	r7, sp, #0
 800b406:	4603      	mov	r3, r0
 800b408:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b40a:	79fb      	ldrb	r3, [r7, #7]
 800b40c:	4618      	mov	r0, r3
 800b40e:	f7ff ffbb 	bl	800b388 <SD_CheckStatus>
 800b412:	4603      	mov	r3, r0
}
 800b414:	4618      	mov	r0, r3
 800b416:	3708      	adds	r7, #8
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}

0800b41c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b086      	sub	sp, #24
 800b420:	af00      	add	r7, sp, #0
 800b422:	60b9      	str	r1, [r7, #8]
 800b424:	607a      	str	r2, [r7, #4]
 800b426:	603b      	str	r3, [r7, #0]
 800b428:	4603      	mov	r3, r0
 800b42a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b42c:	2301      	movs	r3, #1
 800b42e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800b430:	f04f 33ff 	mov.w	r3, #4294967295
 800b434:	683a      	ldr	r2, [r7, #0]
 800b436:	6879      	ldr	r1, [r7, #4]
 800b438:	68b8      	ldr	r0, [r7, #8]
 800b43a:	f7ff ff3d 	bl	800b2b8 <BSP_SD_ReadBlocks>
 800b43e:	4603      	mov	r3, r0
 800b440:	2b00      	cmp	r3, #0
 800b442:	d107      	bne.n	800b454 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b444:	bf00      	nop
 800b446:	f7ff ff73 	bl	800b330 <BSP_SD_GetCardState>
 800b44a:	4603      	mov	r3, r0
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d1fa      	bne.n	800b446 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800b450:	2300      	movs	r3, #0
 800b452:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b454:	7dfb      	ldrb	r3, [r7, #23]
}
 800b456:	4618      	mov	r0, r3
 800b458:	3718      	adds	r7, #24
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}

0800b45e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b45e:	b580      	push	{r7, lr}
 800b460:	b086      	sub	sp, #24
 800b462:	af00      	add	r7, sp, #0
 800b464:	60b9      	str	r1, [r7, #8]
 800b466:	607a      	str	r2, [r7, #4]
 800b468:	603b      	str	r3, [r7, #0]
 800b46a:	4603      	mov	r3, r0
 800b46c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b46e:	2301      	movs	r3, #1
 800b470:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800b472:	f04f 33ff 	mov.w	r3, #4294967295
 800b476:	683a      	ldr	r2, [r7, #0]
 800b478:	6879      	ldr	r1, [r7, #4]
 800b47a:	68b8      	ldr	r0, [r7, #8]
 800b47c:	f7ff ff3a 	bl	800b2f4 <BSP_SD_WriteBlocks>
 800b480:	4603      	mov	r3, r0
 800b482:	2b00      	cmp	r3, #0
 800b484:	d107      	bne.n	800b496 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800b486:	bf00      	nop
 800b488:	f7ff ff52 	bl	800b330 <BSP_SD_GetCardState>
 800b48c:	4603      	mov	r3, r0
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d1fa      	bne.n	800b488 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800b492:	2300      	movs	r3, #0
 800b494:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b496:	7dfb      	ldrb	r3, [r7, #23]
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3718      	adds	r7, #24
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b08c      	sub	sp, #48	; 0x30
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	603a      	str	r2, [r7, #0]
 800b4aa:	71fb      	strb	r3, [r7, #7]
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b4b6:	4b25      	ldr	r3, [pc, #148]	; (800b54c <SD_ioctl+0xac>)
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	f003 0301 	and.w	r3, r3, #1
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d001      	beq.n	800b4c8 <SD_ioctl+0x28>
 800b4c4:	2303      	movs	r3, #3
 800b4c6:	e03c      	b.n	800b542 <SD_ioctl+0xa2>

  switch (cmd)
 800b4c8:	79bb      	ldrb	r3, [r7, #6]
 800b4ca:	2b03      	cmp	r3, #3
 800b4cc:	d834      	bhi.n	800b538 <SD_ioctl+0x98>
 800b4ce:	a201      	add	r2, pc, #4	; (adr r2, 800b4d4 <SD_ioctl+0x34>)
 800b4d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4d4:	0800b4e5 	.word	0x0800b4e5
 800b4d8:	0800b4ed 	.word	0x0800b4ed
 800b4dc:	0800b505 	.word	0x0800b505
 800b4e0:	0800b51f 	.word	0x0800b51f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b4ea:	e028      	b.n	800b53e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b4ec:	f107 030c 	add.w	r3, r7, #12
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f7ff ff2d 	bl	800b350 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b4f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b502:	e01c      	b.n	800b53e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b504:	f107 030c 	add.w	r3, r7, #12
 800b508:	4618      	mov	r0, r3
 800b50a:	f7ff ff21 	bl	800b350 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b510:	b29a      	uxth	r2, r3
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b516:	2300      	movs	r3, #0
 800b518:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b51c:	e00f      	b.n	800b53e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b51e:	f107 030c 	add.w	r3, r7, #12
 800b522:	4618      	mov	r0, r3
 800b524:	f7ff ff14 	bl	800b350 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b52a:	0a5a      	lsrs	r2, r3, #9
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b530:	2300      	movs	r3, #0
 800b532:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b536:	e002      	b.n	800b53e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b538:	2304      	movs	r3, #4
 800b53a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b53e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b542:	4618      	mov	r0, r3
 800b544:	3730      	adds	r7, #48	; 0x30
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop
 800b54c:	20000055 	.word	0x20000055

0800b550 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b084      	sub	sp, #16
 800b554:	af00      	add	r7, sp, #0
 800b556:	4603      	mov	r3, r0
 800b558:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b55a:	79fb      	ldrb	r3, [r7, #7]
 800b55c:	4a08      	ldr	r2, [pc, #32]	; (800b580 <disk_status+0x30>)
 800b55e:	009b      	lsls	r3, r3, #2
 800b560:	4413      	add	r3, r2
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	685b      	ldr	r3, [r3, #4]
 800b566:	79fa      	ldrb	r2, [r7, #7]
 800b568:	4905      	ldr	r1, [pc, #20]	; (800b580 <disk_status+0x30>)
 800b56a:	440a      	add	r2, r1
 800b56c:	7a12      	ldrb	r2, [r2, #8]
 800b56e:	4610      	mov	r0, r2
 800b570:	4798      	blx	r3
 800b572:	4603      	mov	r3, r0
 800b574:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b576:	7bfb      	ldrb	r3, [r7, #15]
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3710      	adds	r7, #16
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}
 800b580:	20002340 	.word	0x20002340

0800b584 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b084      	sub	sp, #16
 800b588:	af00      	add	r7, sp, #0
 800b58a:	4603      	mov	r3, r0
 800b58c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b58e:	2300      	movs	r3, #0
 800b590:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b592:	79fb      	ldrb	r3, [r7, #7]
 800b594:	4a0d      	ldr	r2, [pc, #52]	; (800b5cc <disk_initialize+0x48>)
 800b596:	5cd3      	ldrb	r3, [r2, r3]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d111      	bne.n	800b5c0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b59c:	79fb      	ldrb	r3, [r7, #7]
 800b59e:	4a0b      	ldr	r2, [pc, #44]	; (800b5cc <disk_initialize+0x48>)
 800b5a0:	2101      	movs	r1, #1
 800b5a2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b5a4:	79fb      	ldrb	r3, [r7, #7]
 800b5a6:	4a09      	ldr	r2, [pc, #36]	; (800b5cc <disk_initialize+0x48>)
 800b5a8:	009b      	lsls	r3, r3, #2
 800b5aa:	4413      	add	r3, r2
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	79fa      	ldrb	r2, [r7, #7]
 800b5b2:	4906      	ldr	r1, [pc, #24]	; (800b5cc <disk_initialize+0x48>)
 800b5b4:	440a      	add	r2, r1
 800b5b6:	7a12      	ldrb	r2, [r2, #8]
 800b5b8:	4610      	mov	r0, r2
 800b5ba:	4798      	blx	r3
 800b5bc:	4603      	mov	r3, r0
 800b5be:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b5c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3710      	adds	r7, #16
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	20002340 	.word	0x20002340

0800b5d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b5d0:	b590      	push	{r4, r7, lr}
 800b5d2:	b087      	sub	sp, #28
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	60b9      	str	r1, [r7, #8]
 800b5d8:	607a      	str	r2, [r7, #4]
 800b5da:	603b      	str	r3, [r7, #0]
 800b5dc:	4603      	mov	r3, r0
 800b5de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b5e0:	7bfb      	ldrb	r3, [r7, #15]
 800b5e2:	4a0a      	ldr	r2, [pc, #40]	; (800b60c <disk_read+0x3c>)
 800b5e4:	009b      	lsls	r3, r3, #2
 800b5e6:	4413      	add	r3, r2
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	689c      	ldr	r4, [r3, #8]
 800b5ec:	7bfb      	ldrb	r3, [r7, #15]
 800b5ee:	4a07      	ldr	r2, [pc, #28]	; (800b60c <disk_read+0x3c>)
 800b5f0:	4413      	add	r3, r2
 800b5f2:	7a18      	ldrb	r0, [r3, #8]
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	687a      	ldr	r2, [r7, #4]
 800b5f8:	68b9      	ldr	r1, [r7, #8]
 800b5fa:	47a0      	blx	r4
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	75fb      	strb	r3, [r7, #23]
  return res;
 800b600:	7dfb      	ldrb	r3, [r7, #23]
}
 800b602:	4618      	mov	r0, r3
 800b604:	371c      	adds	r7, #28
 800b606:	46bd      	mov	sp, r7
 800b608:	bd90      	pop	{r4, r7, pc}
 800b60a:	bf00      	nop
 800b60c:	20002340 	.word	0x20002340

0800b610 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b610:	b590      	push	{r4, r7, lr}
 800b612:	b087      	sub	sp, #28
 800b614:	af00      	add	r7, sp, #0
 800b616:	60b9      	str	r1, [r7, #8]
 800b618:	607a      	str	r2, [r7, #4]
 800b61a:	603b      	str	r3, [r7, #0]
 800b61c:	4603      	mov	r3, r0
 800b61e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b620:	7bfb      	ldrb	r3, [r7, #15]
 800b622:	4a0a      	ldr	r2, [pc, #40]	; (800b64c <disk_write+0x3c>)
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	4413      	add	r3, r2
 800b628:	685b      	ldr	r3, [r3, #4]
 800b62a:	68dc      	ldr	r4, [r3, #12]
 800b62c:	7bfb      	ldrb	r3, [r7, #15]
 800b62e:	4a07      	ldr	r2, [pc, #28]	; (800b64c <disk_write+0x3c>)
 800b630:	4413      	add	r3, r2
 800b632:	7a18      	ldrb	r0, [r3, #8]
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	687a      	ldr	r2, [r7, #4]
 800b638:	68b9      	ldr	r1, [r7, #8]
 800b63a:	47a0      	blx	r4
 800b63c:	4603      	mov	r3, r0
 800b63e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b640:	7dfb      	ldrb	r3, [r7, #23]
}
 800b642:	4618      	mov	r0, r3
 800b644:	371c      	adds	r7, #28
 800b646:	46bd      	mov	sp, r7
 800b648:	bd90      	pop	{r4, r7, pc}
 800b64a:	bf00      	nop
 800b64c:	20002340 	.word	0x20002340

0800b650 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af00      	add	r7, sp, #0
 800b656:	4603      	mov	r3, r0
 800b658:	603a      	str	r2, [r7, #0]
 800b65a:	71fb      	strb	r3, [r7, #7]
 800b65c:	460b      	mov	r3, r1
 800b65e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b660:	79fb      	ldrb	r3, [r7, #7]
 800b662:	4a09      	ldr	r2, [pc, #36]	; (800b688 <disk_ioctl+0x38>)
 800b664:	009b      	lsls	r3, r3, #2
 800b666:	4413      	add	r3, r2
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	691b      	ldr	r3, [r3, #16]
 800b66c:	79fa      	ldrb	r2, [r7, #7]
 800b66e:	4906      	ldr	r1, [pc, #24]	; (800b688 <disk_ioctl+0x38>)
 800b670:	440a      	add	r2, r1
 800b672:	7a10      	ldrb	r0, [r2, #8]
 800b674:	79b9      	ldrb	r1, [r7, #6]
 800b676:	683a      	ldr	r2, [r7, #0]
 800b678:	4798      	blx	r3
 800b67a:	4603      	mov	r3, r0
 800b67c:	73fb      	strb	r3, [r7, #15]
  return res;
 800b67e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b680:	4618      	mov	r0, r3
 800b682:	3710      	adds	r7, #16
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	20002340 	.word	0x20002340

0800b68c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b68c:	b480      	push	{r7}
 800b68e:	b085      	sub	sp, #20
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	3301      	adds	r3, #1
 800b698:	781b      	ldrb	r3, [r3, #0]
 800b69a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b69c:	89fb      	ldrh	r3, [r7, #14]
 800b69e:	021b      	lsls	r3, r3, #8
 800b6a0:	b21a      	sxth	r2, r3
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	b21b      	sxth	r3, r3
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	b21b      	sxth	r3, r3
 800b6ac:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b6ae:	89fb      	ldrh	r3, [r7, #14]
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3714      	adds	r7, #20
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr

0800b6bc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b085      	sub	sp, #20
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	3303      	adds	r3, #3
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	021b      	lsls	r3, r3, #8
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	3202      	adds	r2, #2
 800b6d4:	7812      	ldrb	r2, [r2, #0]
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	021b      	lsls	r3, r3, #8
 800b6de:	687a      	ldr	r2, [r7, #4]
 800b6e0:	3201      	adds	r2, #1
 800b6e2:	7812      	ldrb	r2, [r2, #0]
 800b6e4:	4313      	orrs	r3, r2
 800b6e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	021b      	lsls	r3, r3, #8
 800b6ec:	687a      	ldr	r2, [r7, #4]
 800b6ee:	7812      	ldrb	r2, [r2, #0]
 800b6f0:	4313      	orrs	r3, r2
 800b6f2:	60fb      	str	r3, [r7, #12]
	return rv;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3714      	adds	r7, #20
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr

0800b702 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b702:	b480      	push	{r7}
 800b704:	b083      	sub	sp, #12
 800b706:	af00      	add	r7, sp, #0
 800b708:	6078      	str	r0, [r7, #4]
 800b70a:	460b      	mov	r3, r1
 800b70c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	1c5a      	adds	r2, r3, #1
 800b712:	607a      	str	r2, [r7, #4]
 800b714:	887a      	ldrh	r2, [r7, #2]
 800b716:	b2d2      	uxtb	r2, r2
 800b718:	701a      	strb	r2, [r3, #0]
 800b71a:	887b      	ldrh	r3, [r7, #2]
 800b71c:	0a1b      	lsrs	r3, r3, #8
 800b71e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	1c5a      	adds	r2, r3, #1
 800b724:	607a      	str	r2, [r7, #4]
 800b726:	887a      	ldrh	r2, [r7, #2]
 800b728:	b2d2      	uxtb	r2, r2
 800b72a:	701a      	strb	r2, [r3, #0]
}
 800b72c:	bf00      	nop
 800b72e:	370c      	adds	r7, #12
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr

0800b738 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b738:	b480      	push	{r7}
 800b73a:	b083      	sub	sp, #12
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	1c5a      	adds	r2, r3, #1
 800b746:	607a      	str	r2, [r7, #4]
 800b748:	683a      	ldr	r2, [r7, #0]
 800b74a:	b2d2      	uxtb	r2, r2
 800b74c:	701a      	strb	r2, [r3, #0]
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	0a1b      	lsrs	r3, r3, #8
 800b752:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	1c5a      	adds	r2, r3, #1
 800b758:	607a      	str	r2, [r7, #4]
 800b75a:	683a      	ldr	r2, [r7, #0]
 800b75c:	b2d2      	uxtb	r2, r2
 800b75e:	701a      	strb	r2, [r3, #0]
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	0a1b      	lsrs	r3, r3, #8
 800b764:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	1c5a      	adds	r2, r3, #1
 800b76a:	607a      	str	r2, [r7, #4]
 800b76c:	683a      	ldr	r2, [r7, #0]
 800b76e:	b2d2      	uxtb	r2, r2
 800b770:	701a      	strb	r2, [r3, #0]
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	0a1b      	lsrs	r3, r3, #8
 800b776:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	1c5a      	adds	r2, r3, #1
 800b77c:	607a      	str	r2, [r7, #4]
 800b77e:	683a      	ldr	r2, [r7, #0]
 800b780:	b2d2      	uxtb	r2, r2
 800b782:	701a      	strb	r2, [r3, #0]
}
 800b784:	bf00      	nop
 800b786:	370c      	adds	r7, #12
 800b788:	46bd      	mov	sp, r7
 800b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78e:	4770      	bx	lr

0800b790 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b790:	b480      	push	{r7}
 800b792:	b087      	sub	sp, #28
 800b794:	af00      	add	r7, sp, #0
 800b796:	60f8      	str	r0, [r7, #12]
 800b798:	60b9      	str	r1, [r7, #8]
 800b79a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d00d      	beq.n	800b7c6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b7aa:	693a      	ldr	r2, [r7, #16]
 800b7ac:	1c53      	adds	r3, r2, #1
 800b7ae:	613b      	str	r3, [r7, #16]
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	1c59      	adds	r1, r3, #1
 800b7b4:	6179      	str	r1, [r7, #20]
 800b7b6:	7812      	ldrb	r2, [r2, #0]
 800b7b8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	3b01      	subs	r3, #1
 800b7be:	607b      	str	r3, [r7, #4]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d1f1      	bne.n	800b7aa <mem_cpy+0x1a>
	}
}
 800b7c6:	bf00      	nop
 800b7c8:	371c      	adds	r7, #28
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d0:	4770      	bx	lr

0800b7d2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b7d2:	b480      	push	{r7}
 800b7d4:	b087      	sub	sp, #28
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	60f8      	str	r0, [r7, #12]
 800b7da:	60b9      	str	r1, [r7, #8]
 800b7dc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	1c5a      	adds	r2, r3, #1
 800b7e6:	617a      	str	r2, [r7, #20]
 800b7e8:	68ba      	ldr	r2, [r7, #8]
 800b7ea:	b2d2      	uxtb	r2, r2
 800b7ec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	3b01      	subs	r3, #1
 800b7f2:	607b      	str	r3, [r7, #4]
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d1f3      	bne.n	800b7e2 <mem_set+0x10>
}
 800b7fa:	bf00      	nop
 800b7fc:	bf00      	nop
 800b7fe:	371c      	adds	r7, #28
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr

0800b808 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b808:	b480      	push	{r7}
 800b80a:	b089      	sub	sp, #36	; 0x24
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	60f8      	str	r0, [r7, #12]
 800b810:	60b9      	str	r1, [r7, #8]
 800b812:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	61fb      	str	r3, [r7, #28]
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b81c:	2300      	movs	r3, #0
 800b81e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b820:	69fb      	ldr	r3, [r7, #28]
 800b822:	1c5a      	adds	r2, r3, #1
 800b824:	61fa      	str	r2, [r7, #28]
 800b826:	781b      	ldrb	r3, [r3, #0]
 800b828:	4619      	mov	r1, r3
 800b82a:	69bb      	ldr	r3, [r7, #24]
 800b82c:	1c5a      	adds	r2, r3, #1
 800b82e:	61ba      	str	r2, [r7, #24]
 800b830:	781b      	ldrb	r3, [r3, #0]
 800b832:	1acb      	subs	r3, r1, r3
 800b834:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	3b01      	subs	r3, #1
 800b83a:	607b      	str	r3, [r7, #4]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d002      	beq.n	800b848 <mem_cmp+0x40>
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d0eb      	beq.n	800b820 <mem_cmp+0x18>

	return r;
 800b848:	697b      	ldr	r3, [r7, #20]
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3724      	adds	r7, #36	; 0x24
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr

0800b856 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b856:	b480      	push	{r7}
 800b858:	b083      	sub	sp, #12
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	6078      	str	r0, [r7, #4]
 800b85e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b860:	e002      	b.n	800b868 <chk_chr+0x12>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	3301      	adds	r3, #1
 800b866:	607b      	str	r3, [r7, #4]
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	781b      	ldrb	r3, [r3, #0]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d005      	beq.n	800b87c <chk_chr+0x26>
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	781b      	ldrb	r3, [r3, #0]
 800b874:	461a      	mov	r2, r3
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	4293      	cmp	r3, r2
 800b87a:	d1f2      	bne.n	800b862 <chk_chr+0xc>
	return *str;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	781b      	ldrb	r3, [r3, #0]
}
 800b880:	4618      	mov	r0, r3
 800b882:	370c      	adds	r7, #12
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr

0800b88c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b085      	sub	sp, #20
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b896:	2300      	movs	r3, #0
 800b898:	60bb      	str	r3, [r7, #8]
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	60fb      	str	r3, [r7, #12]
 800b89e:	e029      	b.n	800b8f4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b8a0:	4a27      	ldr	r2, [pc, #156]	; (800b940 <chk_lock+0xb4>)
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	011b      	lsls	r3, r3, #4
 800b8a6:	4413      	add	r3, r2
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d01d      	beq.n	800b8ea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b8ae:	4a24      	ldr	r2, [pc, #144]	; (800b940 <chk_lock+0xb4>)
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	011b      	lsls	r3, r3, #4
 800b8b4:	4413      	add	r3, r2
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d116      	bne.n	800b8ee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b8c0:	4a1f      	ldr	r2, [pc, #124]	; (800b940 <chk_lock+0xb4>)
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	011b      	lsls	r3, r3, #4
 800b8c6:	4413      	add	r3, r2
 800b8c8:	3304      	adds	r3, #4
 800b8ca:	681a      	ldr	r2, [r3, #0]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d10c      	bne.n	800b8ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b8d4:	4a1a      	ldr	r2, [pc, #104]	; (800b940 <chk_lock+0xb4>)
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	011b      	lsls	r3, r3, #4
 800b8da:	4413      	add	r3, r2
 800b8dc:	3308      	adds	r3, #8
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	d102      	bne.n	800b8ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b8e8:	e007      	b.n	800b8fa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	60fb      	str	r3, [r7, #12]
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	d9d2      	bls.n	800b8a0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2b02      	cmp	r3, #2
 800b8fe:	d109      	bne.n	800b914 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d102      	bne.n	800b90c <chk_lock+0x80>
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	2b02      	cmp	r3, #2
 800b90a:	d101      	bne.n	800b910 <chk_lock+0x84>
 800b90c:	2300      	movs	r3, #0
 800b90e:	e010      	b.n	800b932 <chk_lock+0xa6>
 800b910:	2312      	movs	r3, #18
 800b912:	e00e      	b.n	800b932 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d108      	bne.n	800b92c <chk_lock+0xa0>
 800b91a:	4a09      	ldr	r2, [pc, #36]	; (800b940 <chk_lock+0xb4>)
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	011b      	lsls	r3, r3, #4
 800b920:	4413      	add	r3, r2
 800b922:	330c      	adds	r3, #12
 800b924:	881b      	ldrh	r3, [r3, #0]
 800b926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b92a:	d101      	bne.n	800b930 <chk_lock+0xa4>
 800b92c:	2310      	movs	r3, #16
 800b92e:	e000      	b.n	800b932 <chk_lock+0xa6>
 800b930:	2300      	movs	r3, #0
}
 800b932:	4618      	mov	r0, r3
 800b934:	3714      	adds	r7, #20
 800b936:	46bd      	mov	sp, r7
 800b938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93c:	4770      	bx	lr
 800b93e:	bf00      	nop
 800b940:	200022dc 	.word	0x200022dc

0800b944 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b94a:	2300      	movs	r3, #0
 800b94c:	607b      	str	r3, [r7, #4]
 800b94e:	e002      	b.n	800b956 <enq_lock+0x12>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	3301      	adds	r3, #1
 800b954:	607b      	str	r3, [r7, #4]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2b01      	cmp	r3, #1
 800b95a:	d806      	bhi.n	800b96a <enq_lock+0x26>
 800b95c:	4a09      	ldr	r2, [pc, #36]	; (800b984 <enq_lock+0x40>)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	011b      	lsls	r3, r3, #4
 800b962:	4413      	add	r3, r2
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d1f2      	bne.n	800b950 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2b02      	cmp	r3, #2
 800b96e:	bf14      	ite	ne
 800b970:	2301      	movne	r3, #1
 800b972:	2300      	moveq	r3, #0
 800b974:	b2db      	uxtb	r3, r3
}
 800b976:	4618      	mov	r0, r3
 800b978:	370c      	adds	r7, #12
 800b97a:	46bd      	mov	sp, r7
 800b97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b980:	4770      	bx	lr
 800b982:	bf00      	nop
 800b984:	200022dc 	.word	0x200022dc

0800b988 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b988:	b480      	push	{r7}
 800b98a:	b085      	sub	sp, #20
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b992:	2300      	movs	r3, #0
 800b994:	60fb      	str	r3, [r7, #12]
 800b996:	e01f      	b.n	800b9d8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b998:	4a41      	ldr	r2, [pc, #260]	; (800baa0 <inc_lock+0x118>)
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	011b      	lsls	r3, r3, #4
 800b99e:	4413      	add	r3, r2
 800b9a0:	681a      	ldr	r2, [r3, #0]
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d113      	bne.n	800b9d2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b9aa:	4a3d      	ldr	r2, [pc, #244]	; (800baa0 <inc_lock+0x118>)
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	011b      	lsls	r3, r3, #4
 800b9b0:	4413      	add	r3, r2
 800b9b2:	3304      	adds	r3, #4
 800b9b4:	681a      	ldr	r2, [r3, #0]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d109      	bne.n	800b9d2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b9be:	4a38      	ldr	r2, [pc, #224]	; (800baa0 <inc_lock+0x118>)
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	011b      	lsls	r3, r3, #4
 800b9c4:	4413      	add	r3, r2
 800b9c6:	3308      	adds	r3, #8
 800b9c8:	681a      	ldr	r2, [r3, #0]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d006      	beq.n	800b9e0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	3301      	adds	r3, #1
 800b9d6:	60fb      	str	r3, [r7, #12]
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	2b01      	cmp	r3, #1
 800b9dc:	d9dc      	bls.n	800b998 <inc_lock+0x10>
 800b9de:	e000      	b.n	800b9e2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b9e0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2b02      	cmp	r3, #2
 800b9e6:	d132      	bne.n	800ba4e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	60fb      	str	r3, [r7, #12]
 800b9ec:	e002      	b.n	800b9f4 <inc_lock+0x6c>
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	60fb      	str	r3, [r7, #12]
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d806      	bhi.n	800ba08 <inc_lock+0x80>
 800b9fa:	4a29      	ldr	r2, [pc, #164]	; (800baa0 <inc_lock+0x118>)
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	011b      	lsls	r3, r3, #4
 800ba00:	4413      	add	r3, r2
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d1f2      	bne.n	800b9ee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2b02      	cmp	r3, #2
 800ba0c:	d101      	bne.n	800ba12 <inc_lock+0x8a>
 800ba0e:	2300      	movs	r3, #0
 800ba10:	e040      	b.n	800ba94 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681a      	ldr	r2, [r3, #0]
 800ba16:	4922      	ldr	r1, [pc, #136]	; (800baa0 <inc_lock+0x118>)
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	011b      	lsls	r3, r3, #4
 800ba1c:	440b      	add	r3, r1
 800ba1e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	689a      	ldr	r2, [r3, #8]
 800ba24:	491e      	ldr	r1, [pc, #120]	; (800baa0 <inc_lock+0x118>)
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	011b      	lsls	r3, r3, #4
 800ba2a:	440b      	add	r3, r1
 800ba2c:	3304      	adds	r3, #4
 800ba2e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	695a      	ldr	r2, [r3, #20]
 800ba34:	491a      	ldr	r1, [pc, #104]	; (800baa0 <inc_lock+0x118>)
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	011b      	lsls	r3, r3, #4
 800ba3a:	440b      	add	r3, r1
 800ba3c:	3308      	adds	r3, #8
 800ba3e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ba40:	4a17      	ldr	r2, [pc, #92]	; (800baa0 <inc_lock+0x118>)
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	011b      	lsls	r3, r3, #4
 800ba46:	4413      	add	r3, r2
 800ba48:	330c      	adds	r3, #12
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d009      	beq.n	800ba68 <inc_lock+0xe0>
 800ba54:	4a12      	ldr	r2, [pc, #72]	; (800baa0 <inc_lock+0x118>)
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	011b      	lsls	r3, r3, #4
 800ba5a:	4413      	add	r3, r2
 800ba5c:	330c      	adds	r3, #12
 800ba5e:	881b      	ldrh	r3, [r3, #0]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d001      	beq.n	800ba68 <inc_lock+0xe0>
 800ba64:	2300      	movs	r3, #0
 800ba66:	e015      	b.n	800ba94 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d108      	bne.n	800ba80 <inc_lock+0xf8>
 800ba6e:	4a0c      	ldr	r2, [pc, #48]	; (800baa0 <inc_lock+0x118>)
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	011b      	lsls	r3, r3, #4
 800ba74:	4413      	add	r3, r2
 800ba76:	330c      	adds	r3, #12
 800ba78:	881b      	ldrh	r3, [r3, #0]
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	b29a      	uxth	r2, r3
 800ba7e:	e001      	b.n	800ba84 <inc_lock+0xfc>
 800ba80:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ba84:	4906      	ldr	r1, [pc, #24]	; (800baa0 <inc_lock+0x118>)
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	011b      	lsls	r3, r3, #4
 800ba8a:	440b      	add	r3, r1
 800ba8c:	330c      	adds	r3, #12
 800ba8e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	3301      	adds	r3, #1
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	3714      	adds	r7, #20
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9e:	4770      	bx	lr
 800baa0:	200022dc 	.word	0x200022dc

0800baa4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b085      	sub	sp, #20
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	3b01      	subs	r3, #1
 800bab0:	607b      	str	r3, [r7, #4]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2b01      	cmp	r3, #1
 800bab6:	d825      	bhi.n	800bb04 <dec_lock+0x60>
		n = Files[i].ctr;
 800bab8:	4a17      	ldr	r2, [pc, #92]	; (800bb18 <dec_lock+0x74>)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	011b      	lsls	r3, r3, #4
 800babe:	4413      	add	r3, r2
 800bac0:	330c      	adds	r3, #12
 800bac2:	881b      	ldrh	r3, [r3, #0]
 800bac4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bac6:	89fb      	ldrh	r3, [r7, #14]
 800bac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bacc:	d101      	bne.n	800bad2 <dec_lock+0x2e>
 800bace:	2300      	movs	r3, #0
 800bad0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bad2:	89fb      	ldrh	r3, [r7, #14]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d002      	beq.n	800bade <dec_lock+0x3a>
 800bad8:	89fb      	ldrh	r3, [r7, #14]
 800bada:	3b01      	subs	r3, #1
 800badc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bade:	4a0e      	ldr	r2, [pc, #56]	; (800bb18 <dec_lock+0x74>)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	011b      	lsls	r3, r3, #4
 800bae4:	4413      	add	r3, r2
 800bae6:	330c      	adds	r3, #12
 800bae8:	89fa      	ldrh	r2, [r7, #14]
 800baea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800baec:	89fb      	ldrh	r3, [r7, #14]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d105      	bne.n	800bafe <dec_lock+0x5a>
 800baf2:	4a09      	ldr	r2, [pc, #36]	; (800bb18 <dec_lock+0x74>)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	011b      	lsls	r3, r3, #4
 800baf8:	4413      	add	r3, r2
 800bafa:	2200      	movs	r2, #0
 800bafc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bafe:	2300      	movs	r3, #0
 800bb00:	737b      	strb	r3, [r7, #13]
 800bb02:	e001      	b.n	800bb08 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bb04:	2302      	movs	r3, #2
 800bb06:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bb08:	7b7b      	ldrb	r3, [r7, #13]
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3714      	adds	r7, #20
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb14:	4770      	bx	lr
 800bb16:	bf00      	nop
 800bb18:	200022dc 	.word	0x200022dc

0800bb1c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b085      	sub	sp, #20
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bb24:	2300      	movs	r3, #0
 800bb26:	60fb      	str	r3, [r7, #12]
 800bb28:	e010      	b.n	800bb4c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bb2a:	4a0d      	ldr	r2, [pc, #52]	; (800bb60 <clear_lock+0x44>)
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	011b      	lsls	r3, r3, #4
 800bb30:	4413      	add	r3, r2
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	687a      	ldr	r2, [r7, #4]
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d105      	bne.n	800bb46 <clear_lock+0x2a>
 800bb3a:	4a09      	ldr	r2, [pc, #36]	; (800bb60 <clear_lock+0x44>)
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	011b      	lsls	r3, r3, #4
 800bb40:	4413      	add	r3, r2
 800bb42:	2200      	movs	r2, #0
 800bb44:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	3301      	adds	r3, #1
 800bb4a:	60fb      	str	r3, [r7, #12]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	d9eb      	bls.n	800bb2a <clear_lock+0xe>
	}
}
 800bb52:	bf00      	nop
 800bb54:	bf00      	nop
 800bb56:	3714      	adds	r7, #20
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr
 800bb60:	200022dc 	.word	0x200022dc

0800bb64 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b086      	sub	sp, #24
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	78db      	ldrb	r3, [r3, #3]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d034      	beq.n	800bbe2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb7c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	7858      	ldrb	r0, [r3, #1]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bb88:	2301      	movs	r3, #1
 800bb8a:	697a      	ldr	r2, [r7, #20]
 800bb8c:	f7ff fd40 	bl	800b610 <disk_write>
 800bb90:	4603      	mov	r3, r0
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d002      	beq.n	800bb9c <sync_window+0x38>
			res = FR_DISK_ERR;
 800bb96:	2301      	movs	r3, #1
 800bb98:	73fb      	strb	r3, [r7, #15]
 800bb9a:	e022      	b.n	800bbe2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bba6:	697a      	ldr	r2, [r7, #20]
 800bba8:	1ad2      	subs	r2, r2, r3
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6a1b      	ldr	r3, [r3, #32]
 800bbae:	429a      	cmp	r2, r3
 800bbb0:	d217      	bcs.n	800bbe2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	789b      	ldrb	r3, [r3, #2]
 800bbb6:	613b      	str	r3, [r7, #16]
 800bbb8:	e010      	b.n	800bbdc <sync_window+0x78>
					wsect += fs->fsize;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6a1b      	ldr	r3, [r3, #32]
 800bbbe:	697a      	ldr	r2, [r7, #20]
 800bbc0:	4413      	add	r3, r2
 800bbc2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	7858      	ldrb	r0, [r3, #1]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bbce:	2301      	movs	r3, #1
 800bbd0:	697a      	ldr	r2, [r7, #20]
 800bbd2:	f7ff fd1d 	bl	800b610 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	3b01      	subs	r3, #1
 800bbda:	613b      	str	r3, [r7, #16]
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	2b01      	cmp	r3, #1
 800bbe0:	d8eb      	bhi.n	800bbba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bbe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3718      	adds	r7, #24
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}

0800bbec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b084      	sub	sp, #16
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
 800bbf4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbfe:	683a      	ldr	r2, [r7, #0]
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d01b      	beq.n	800bc3c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f7ff ffad 	bl	800bb64 <sync_window>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bc0e:	7bfb      	ldrb	r3, [r7, #15]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d113      	bne.n	800bc3c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	7858      	ldrb	r0, [r3, #1]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bc1e:	2301      	movs	r3, #1
 800bc20:	683a      	ldr	r2, [r7, #0]
 800bc22:	f7ff fcd5 	bl	800b5d0 <disk_read>
 800bc26:	4603      	mov	r3, r0
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d004      	beq.n	800bc36 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bc2c:	f04f 33ff 	mov.w	r3, #4294967295
 800bc30:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bc32:	2301      	movs	r3, #1
 800bc34:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	683a      	ldr	r2, [r7, #0]
 800bc3a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800bc3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3710      	adds	r7, #16
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
	...

0800bc48 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b084      	sub	sp, #16
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f7ff ff87 	bl	800bb64 <sync_window>
 800bc56:	4603      	mov	r3, r0
 800bc58:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bc5a:	7bfb      	ldrb	r3, [r7, #15]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d159      	bne.n	800bd14 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	781b      	ldrb	r3, [r3, #0]
 800bc64:	2b03      	cmp	r3, #3
 800bc66:	d149      	bne.n	800bcfc <sync_fs+0xb4>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	791b      	ldrb	r3, [r3, #4]
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	d145      	bne.n	800bcfc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	899b      	ldrh	r3, [r3, #12]
 800bc7a:	461a      	mov	r2, r3
 800bc7c:	2100      	movs	r1, #0
 800bc7e:	f7ff fda8 	bl	800b7d2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	3338      	adds	r3, #56	; 0x38
 800bc86:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bc8a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7ff fd37 	bl	800b702 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	3338      	adds	r3, #56	; 0x38
 800bc98:	4921      	ldr	r1, [pc, #132]	; (800bd20 <sync_fs+0xd8>)
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f7ff fd4c 	bl	800b738 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	3338      	adds	r3, #56	; 0x38
 800bca4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bca8:	491e      	ldr	r1, [pc, #120]	; (800bd24 <sync_fs+0xdc>)
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f7ff fd44 	bl	800b738 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	3338      	adds	r3, #56	; 0x38
 800bcb4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	699b      	ldr	r3, [r3, #24]
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	4610      	mov	r0, r2
 800bcc0:	f7ff fd3a 	bl	800b738 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	3338      	adds	r3, #56	; 0x38
 800bcc8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	695b      	ldr	r3, [r3, #20]
 800bcd0:	4619      	mov	r1, r3
 800bcd2:	4610      	mov	r0, r2
 800bcd4:	f7ff fd30 	bl	800b738 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcdc:	1c5a      	adds	r2, r3, #1
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	7858      	ldrb	r0, [r3, #1]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	f7ff fc8d 	bl	800b610 <disk_write>
			fs->fsi_flag = 0;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	785b      	ldrb	r3, [r3, #1]
 800bd00:	2200      	movs	r2, #0
 800bd02:	2100      	movs	r1, #0
 800bd04:	4618      	mov	r0, r3
 800bd06:	f7ff fca3 	bl	800b650 <disk_ioctl>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d001      	beq.n	800bd14 <sync_fs+0xcc>
 800bd10:	2301      	movs	r3, #1
 800bd12:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bd14:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3710      	adds	r7, #16
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}
 800bd1e:	bf00      	nop
 800bd20:	41615252 	.word	0x41615252
 800bd24:	61417272 	.word	0x61417272

0800bd28 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b083      	sub	sp, #12
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
 800bd30:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	3b02      	subs	r3, #2
 800bd36:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	69db      	ldr	r3, [r3, #28]
 800bd3c:	3b02      	subs	r3, #2
 800bd3e:	683a      	ldr	r2, [r7, #0]
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d301      	bcc.n	800bd48 <clust2sect+0x20>
 800bd44:	2300      	movs	r3, #0
 800bd46:	e008      	b.n	800bd5a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	895b      	ldrh	r3, [r3, #10]
 800bd4c:	461a      	mov	r2, r3
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	fb03 f202 	mul.w	r2, r3, r2
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd58:	4413      	add	r3, r2
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	370c      	adds	r7, #12
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd64:	4770      	bx	lr

0800bd66 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bd66:	b580      	push	{r7, lr}
 800bd68:	b086      	sub	sp, #24
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	6078      	str	r0, [r7, #4]
 800bd6e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d904      	bls.n	800bd86 <get_fat+0x20>
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	69db      	ldr	r3, [r3, #28]
 800bd80:	683a      	ldr	r2, [r7, #0]
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d302      	bcc.n	800bd8c <get_fat+0x26>
		val = 1;	/* Internal error */
 800bd86:	2301      	movs	r3, #1
 800bd88:	617b      	str	r3, [r7, #20]
 800bd8a:	e0bb      	b.n	800bf04 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bd8c:	f04f 33ff 	mov.w	r3, #4294967295
 800bd90:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	2b03      	cmp	r3, #3
 800bd98:	f000 8083 	beq.w	800bea2 <get_fat+0x13c>
 800bd9c:	2b03      	cmp	r3, #3
 800bd9e:	f300 80a7 	bgt.w	800bef0 <get_fat+0x18a>
 800bda2:	2b01      	cmp	r3, #1
 800bda4:	d002      	beq.n	800bdac <get_fat+0x46>
 800bda6:	2b02      	cmp	r3, #2
 800bda8:	d056      	beq.n	800be58 <get_fat+0xf2>
 800bdaa:	e0a1      	b.n	800bef0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	60fb      	str	r3, [r7, #12]
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	085b      	lsrs	r3, r3, #1
 800bdb4:	68fa      	ldr	r2, [r7, #12]
 800bdb6:	4413      	add	r3, r2
 800bdb8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	899b      	ldrh	r3, [r3, #12]
 800bdc2:	4619      	mov	r1, r3
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	fbb3 f3f1 	udiv	r3, r3, r1
 800bdca:	4413      	add	r3, r2
 800bdcc:	4619      	mov	r1, r3
 800bdce:	6938      	ldr	r0, [r7, #16]
 800bdd0:	f7ff ff0c 	bl	800bbec <move_window>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	f040 808d 	bne.w	800bef6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	1c5a      	adds	r2, r3, #1
 800bde0:	60fa      	str	r2, [r7, #12]
 800bde2:	693a      	ldr	r2, [r7, #16]
 800bde4:	8992      	ldrh	r2, [r2, #12]
 800bde6:	fbb3 f1f2 	udiv	r1, r3, r2
 800bdea:	fb02 f201 	mul.w	r2, r2, r1
 800bdee:	1a9b      	subs	r3, r3, r2
 800bdf0:	693a      	ldr	r2, [r7, #16]
 800bdf2:	4413      	add	r3, r2
 800bdf4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bdf8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	899b      	ldrh	r3, [r3, #12]
 800be02:	4619      	mov	r1, r3
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	fbb3 f3f1 	udiv	r3, r3, r1
 800be0a:	4413      	add	r3, r2
 800be0c:	4619      	mov	r1, r3
 800be0e:	6938      	ldr	r0, [r7, #16]
 800be10:	f7ff feec 	bl	800bbec <move_window>
 800be14:	4603      	mov	r3, r0
 800be16:	2b00      	cmp	r3, #0
 800be18:	d16f      	bne.n	800befa <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	899b      	ldrh	r3, [r3, #12]
 800be1e:	461a      	mov	r2, r3
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	fbb3 f1f2 	udiv	r1, r3, r2
 800be26:	fb02 f201 	mul.w	r2, r2, r1
 800be2a:	1a9b      	subs	r3, r3, r2
 800be2c:	693a      	ldr	r2, [r7, #16]
 800be2e:	4413      	add	r3, r2
 800be30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800be34:	021b      	lsls	r3, r3, #8
 800be36:	461a      	mov	r2, r3
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	4313      	orrs	r3, r2
 800be3c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	f003 0301 	and.w	r3, r3, #1
 800be44:	2b00      	cmp	r3, #0
 800be46:	d002      	beq.n	800be4e <get_fat+0xe8>
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	091b      	lsrs	r3, r3, #4
 800be4c:	e002      	b.n	800be54 <get_fat+0xee>
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800be54:	617b      	str	r3, [r7, #20]
			break;
 800be56:	e055      	b.n	800bf04 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	899b      	ldrh	r3, [r3, #12]
 800be60:	085b      	lsrs	r3, r3, #1
 800be62:	b29b      	uxth	r3, r3
 800be64:	4619      	mov	r1, r3
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	fbb3 f3f1 	udiv	r3, r3, r1
 800be6c:	4413      	add	r3, r2
 800be6e:	4619      	mov	r1, r3
 800be70:	6938      	ldr	r0, [r7, #16]
 800be72:	f7ff febb 	bl	800bbec <move_window>
 800be76:	4603      	mov	r3, r0
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d140      	bne.n	800befe <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	005b      	lsls	r3, r3, #1
 800be86:	693a      	ldr	r2, [r7, #16]
 800be88:	8992      	ldrh	r2, [r2, #12]
 800be8a:	fbb3 f0f2 	udiv	r0, r3, r2
 800be8e:	fb02 f200 	mul.w	r2, r2, r0
 800be92:	1a9b      	subs	r3, r3, r2
 800be94:	440b      	add	r3, r1
 800be96:	4618      	mov	r0, r3
 800be98:	f7ff fbf8 	bl	800b68c <ld_word>
 800be9c:	4603      	mov	r3, r0
 800be9e:	617b      	str	r3, [r7, #20]
			break;
 800bea0:	e030      	b.n	800bf04 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	899b      	ldrh	r3, [r3, #12]
 800beaa:	089b      	lsrs	r3, r3, #2
 800beac:	b29b      	uxth	r3, r3
 800beae:	4619      	mov	r1, r3
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	fbb3 f3f1 	udiv	r3, r3, r1
 800beb6:	4413      	add	r3, r2
 800beb8:	4619      	mov	r1, r3
 800beba:	6938      	ldr	r0, [r7, #16]
 800bebc:	f7ff fe96 	bl	800bbec <move_window>
 800bec0:	4603      	mov	r3, r0
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d11d      	bne.n	800bf02 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	009b      	lsls	r3, r3, #2
 800bed0:	693a      	ldr	r2, [r7, #16]
 800bed2:	8992      	ldrh	r2, [r2, #12]
 800bed4:	fbb3 f0f2 	udiv	r0, r3, r2
 800bed8:	fb02 f200 	mul.w	r2, r2, r0
 800bedc:	1a9b      	subs	r3, r3, r2
 800bede:	440b      	add	r3, r1
 800bee0:	4618      	mov	r0, r3
 800bee2:	f7ff fbeb 	bl	800b6bc <ld_dword>
 800bee6:	4603      	mov	r3, r0
 800bee8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800beec:	617b      	str	r3, [r7, #20]
			break;
 800beee:	e009      	b.n	800bf04 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bef0:	2301      	movs	r3, #1
 800bef2:	617b      	str	r3, [r7, #20]
 800bef4:	e006      	b.n	800bf04 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bef6:	bf00      	nop
 800bef8:	e004      	b.n	800bf04 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800befa:	bf00      	nop
 800befc:	e002      	b.n	800bf04 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800befe:	bf00      	nop
 800bf00:	e000      	b.n	800bf04 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bf02:	bf00      	nop
		}
	}

	return val;
 800bf04:	697b      	ldr	r3, [r7, #20]
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3718      	adds	r7, #24
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}

0800bf0e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bf0e:	b590      	push	{r4, r7, lr}
 800bf10:	b089      	sub	sp, #36	; 0x24
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	60f8      	str	r0, [r7, #12]
 800bf16:	60b9      	str	r1, [r7, #8]
 800bf18:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bf1a:	2302      	movs	r3, #2
 800bf1c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	f240 8102 	bls.w	800c12a <put_fat+0x21c>
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	69db      	ldr	r3, [r3, #28]
 800bf2a:	68ba      	ldr	r2, [r7, #8]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	f080 80fc 	bcs.w	800c12a <put_fat+0x21c>
		switch (fs->fs_type) {
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	781b      	ldrb	r3, [r3, #0]
 800bf36:	2b03      	cmp	r3, #3
 800bf38:	f000 80b6 	beq.w	800c0a8 <put_fat+0x19a>
 800bf3c:	2b03      	cmp	r3, #3
 800bf3e:	f300 80fd 	bgt.w	800c13c <put_fat+0x22e>
 800bf42:	2b01      	cmp	r3, #1
 800bf44:	d003      	beq.n	800bf4e <put_fat+0x40>
 800bf46:	2b02      	cmp	r3, #2
 800bf48:	f000 8083 	beq.w	800c052 <put_fat+0x144>
 800bf4c:	e0f6      	b.n	800c13c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	61bb      	str	r3, [r7, #24]
 800bf52:	69bb      	ldr	r3, [r7, #24]
 800bf54:	085b      	lsrs	r3, r3, #1
 800bf56:	69ba      	ldr	r2, [r7, #24]
 800bf58:	4413      	add	r3, r2
 800bf5a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	899b      	ldrh	r3, [r3, #12]
 800bf64:	4619      	mov	r1, r3
 800bf66:	69bb      	ldr	r3, [r7, #24]
 800bf68:	fbb3 f3f1 	udiv	r3, r3, r1
 800bf6c:	4413      	add	r3, r2
 800bf6e:	4619      	mov	r1, r3
 800bf70:	68f8      	ldr	r0, [r7, #12]
 800bf72:	f7ff fe3b 	bl	800bbec <move_window>
 800bf76:	4603      	mov	r3, r0
 800bf78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf7a:	7ffb      	ldrb	r3, [r7, #31]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	f040 80d6 	bne.w	800c12e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bf88:	69bb      	ldr	r3, [r7, #24]
 800bf8a:	1c5a      	adds	r2, r3, #1
 800bf8c:	61ba      	str	r2, [r7, #24]
 800bf8e:	68fa      	ldr	r2, [r7, #12]
 800bf90:	8992      	ldrh	r2, [r2, #12]
 800bf92:	fbb3 f0f2 	udiv	r0, r3, r2
 800bf96:	fb02 f200 	mul.w	r2, r2, r0
 800bf9a:	1a9b      	subs	r3, r3, r2
 800bf9c:	440b      	add	r3, r1
 800bf9e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	f003 0301 	and.w	r3, r3, #1
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d00d      	beq.n	800bfc6 <put_fat+0xb8>
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	b25b      	sxtb	r3, r3
 800bfb0:	f003 030f 	and.w	r3, r3, #15
 800bfb4:	b25a      	sxtb	r2, r3
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	b2db      	uxtb	r3, r3
 800bfba:	011b      	lsls	r3, r3, #4
 800bfbc:	b25b      	sxtb	r3, r3
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	b25b      	sxtb	r3, r3
 800bfc2:	b2db      	uxtb	r3, r3
 800bfc4:	e001      	b.n	800bfca <put_fat+0xbc>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	b2db      	uxtb	r3, r3
 800bfca:	697a      	ldr	r2, [r7, #20]
 800bfcc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	899b      	ldrh	r3, [r3, #12]
 800bfdc:	4619      	mov	r1, r3
 800bfde:	69bb      	ldr	r3, [r7, #24]
 800bfe0:	fbb3 f3f1 	udiv	r3, r3, r1
 800bfe4:	4413      	add	r3, r2
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	68f8      	ldr	r0, [r7, #12]
 800bfea:	f7ff fdff 	bl	800bbec <move_window>
 800bfee:	4603      	mov	r3, r0
 800bff0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bff2:	7ffb      	ldrb	r3, [r7, #31]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	f040 809c 	bne.w	800c132 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	899b      	ldrh	r3, [r3, #12]
 800c004:	461a      	mov	r2, r3
 800c006:	69bb      	ldr	r3, [r7, #24]
 800c008:	fbb3 f0f2 	udiv	r0, r3, r2
 800c00c:	fb02 f200 	mul.w	r2, r2, r0
 800c010:	1a9b      	subs	r3, r3, r2
 800c012:	440b      	add	r3, r1
 800c014:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	f003 0301 	and.w	r3, r3, #1
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d003      	beq.n	800c028 <put_fat+0x11a>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	091b      	lsrs	r3, r3, #4
 800c024:	b2db      	uxtb	r3, r3
 800c026:	e00e      	b.n	800c046 <put_fat+0x138>
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	b25b      	sxtb	r3, r3
 800c02e:	f023 030f 	bic.w	r3, r3, #15
 800c032:	b25a      	sxtb	r2, r3
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	0a1b      	lsrs	r3, r3, #8
 800c038:	b25b      	sxtb	r3, r3
 800c03a:	f003 030f 	and.w	r3, r3, #15
 800c03e:	b25b      	sxtb	r3, r3
 800c040:	4313      	orrs	r3, r2
 800c042:	b25b      	sxtb	r3, r3
 800c044:	b2db      	uxtb	r3, r3
 800c046:	697a      	ldr	r2, [r7, #20]
 800c048:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	2201      	movs	r2, #1
 800c04e:	70da      	strb	r2, [r3, #3]
			break;
 800c050:	e074      	b.n	800c13c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	899b      	ldrh	r3, [r3, #12]
 800c05a:	085b      	lsrs	r3, r3, #1
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	4619      	mov	r1, r3
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	fbb3 f3f1 	udiv	r3, r3, r1
 800c066:	4413      	add	r3, r2
 800c068:	4619      	mov	r1, r3
 800c06a:	68f8      	ldr	r0, [r7, #12]
 800c06c:	f7ff fdbe 	bl	800bbec <move_window>
 800c070:	4603      	mov	r3, r0
 800c072:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c074:	7ffb      	ldrb	r3, [r7, #31]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d15d      	bne.n	800c136 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	005b      	lsls	r3, r3, #1
 800c084:	68fa      	ldr	r2, [r7, #12]
 800c086:	8992      	ldrh	r2, [r2, #12]
 800c088:	fbb3 f0f2 	udiv	r0, r3, r2
 800c08c:	fb02 f200 	mul.w	r2, r2, r0
 800c090:	1a9b      	subs	r3, r3, r2
 800c092:	440b      	add	r3, r1
 800c094:	687a      	ldr	r2, [r7, #4]
 800c096:	b292      	uxth	r2, r2
 800c098:	4611      	mov	r1, r2
 800c09a:	4618      	mov	r0, r3
 800c09c:	f7ff fb31 	bl	800b702 <st_word>
			fs->wflag = 1;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	70da      	strb	r2, [r3, #3]
			break;
 800c0a6:	e049      	b.n	800c13c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	899b      	ldrh	r3, [r3, #12]
 800c0b0:	089b      	lsrs	r3, r3, #2
 800c0b2:	b29b      	uxth	r3, r3
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	fbb3 f3f1 	udiv	r3, r3, r1
 800c0bc:	4413      	add	r3, r2
 800c0be:	4619      	mov	r1, r3
 800c0c0:	68f8      	ldr	r0, [r7, #12]
 800c0c2:	f7ff fd93 	bl	800bbec <move_window>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c0ca:	7ffb      	ldrb	r3, [r7, #31]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d134      	bne.n	800c13a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	009b      	lsls	r3, r3, #2
 800c0e0:	68fa      	ldr	r2, [r7, #12]
 800c0e2:	8992      	ldrh	r2, [r2, #12]
 800c0e4:	fbb3 f0f2 	udiv	r0, r3, r2
 800c0e8:	fb02 f200 	mul.w	r2, r2, r0
 800c0ec:	1a9b      	subs	r3, r3, r2
 800c0ee:	440b      	add	r3, r1
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7ff fae3 	bl	800b6bc <ld_dword>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c0fc:	4323      	orrs	r3, r4
 800c0fe:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	68fa      	ldr	r2, [r7, #12]
 800c10c:	8992      	ldrh	r2, [r2, #12]
 800c10e:	fbb3 f0f2 	udiv	r0, r3, r2
 800c112:	fb02 f200 	mul.w	r2, r2, r0
 800c116:	1a9b      	subs	r3, r3, r2
 800c118:	440b      	add	r3, r1
 800c11a:	6879      	ldr	r1, [r7, #4]
 800c11c:	4618      	mov	r0, r3
 800c11e:	f7ff fb0b 	bl	800b738 <st_dword>
			fs->wflag = 1;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2201      	movs	r2, #1
 800c126:	70da      	strb	r2, [r3, #3]
			break;
 800c128:	e008      	b.n	800c13c <put_fat+0x22e>
		}
	}
 800c12a:	bf00      	nop
 800c12c:	e006      	b.n	800c13c <put_fat+0x22e>
			if (res != FR_OK) break;
 800c12e:	bf00      	nop
 800c130:	e004      	b.n	800c13c <put_fat+0x22e>
			if (res != FR_OK) break;
 800c132:	bf00      	nop
 800c134:	e002      	b.n	800c13c <put_fat+0x22e>
			if (res != FR_OK) break;
 800c136:	bf00      	nop
 800c138:	e000      	b.n	800c13c <put_fat+0x22e>
			if (res != FR_OK) break;
 800c13a:	bf00      	nop
	return res;
 800c13c:	7ffb      	ldrb	r3, [r7, #31]
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3724      	adds	r7, #36	; 0x24
 800c142:	46bd      	mov	sp, r7
 800c144:	bd90      	pop	{r4, r7, pc}

0800c146 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c146:	b580      	push	{r7, lr}
 800c148:	b088      	sub	sp, #32
 800c14a:	af00      	add	r7, sp, #0
 800c14c:	60f8      	str	r0, [r7, #12]
 800c14e:	60b9      	str	r1, [r7, #8]
 800c150:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c152:	2300      	movs	r3, #0
 800c154:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	2b01      	cmp	r3, #1
 800c160:	d904      	bls.n	800c16c <remove_chain+0x26>
 800c162:	69bb      	ldr	r3, [r7, #24]
 800c164:	69db      	ldr	r3, [r3, #28]
 800c166:	68ba      	ldr	r2, [r7, #8]
 800c168:	429a      	cmp	r2, r3
 800c16a:	d301      	bcc.n	800c170 <remove_chain+0x2a>
 800c16c:	2302      	movs	r3, #2
 800c16e:	e04b      	b.n	800c208 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d00c      	beq.n	800c190 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c176:	f04f 32ff 	mov.w	r2, #4294967295
 800c17a:	6879      	ldr	r1, [r7, #4]
 800c17c:	69b8      	ldr	r0, [r7, #24]
 800c17e:	f7ff fec6 	bl	800bf0e <put_fat>
 800c182:	4603      	mov	r3, r0
 800c184:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c186:	7ffb      	ldrb	r3, [r7, #31]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d001      	beq.n	800c190 <remove_chain+0x4a>
 800c18c:	7ffb      	ldrb	r3, [r7, #31]
 800c18e:	e03b      	b.n	800c208 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c190:	68b9      	ldr	r1, [r7, #8]
 800c192:	68f8      	ldr	r0, [r7, #12]
 800c194:	f7ff fde7 	bl	800bd66 <get_fat>
 800c198:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d031      	beq.n	800c204 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	2b01      	cmp	r3, #1
 800c1a4:	d101      	bne.n	800c1aa <remove_chain+0x64>
 800c1a6:	2302      	movs	r3, #2
 800c1a8:	e02e      	b.n	800c208 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1b0:	d101      	bne.n	800c1b6 <remove_chain+0x70>
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	e028      	b.n	800c208 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	68b9      	ldr	r1, [r7, #8]
 800c1ba:	69b8      	ldr	r0, [r7, #24]
 800c1bc:	f7ff fea7 	bl	800bf0e <put_fat>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c1c4:	7ffb      	ldrb	r3, [r7, #31]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d001      	beq.n	800c1ce <remove_chain+0x88>
 800c1ca:	7ffb      	ldrb	r3, [r7, #31]
 800c1cc:	e01c      	b.n	800c208 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c1ce:	69bb      	ldr	r3, [r7, #24]
 800c1d0:	699a      	ldr	r2, [r3, #24]
 800c1d2:	69bb      	ldr	r3, [r7, #24]
 800c1d4:	69db      	ldr	r3, [r3, #28]
 800c1d6:	3b02      	subs	r3, #2
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d20b      	bcs.n	800c1f4 <remove_chain+0xae>
			fs->free_clst++;
 800c1dc:	69bb      	ldr	r3, [r7, #24]
 800c1de:	699b      	ldr	r3, [r3, #24]
 800c1e0:	1c5a      	adds	r2, r3, #1
 800c1e2:	69bb      	ldr	r3, [r7, #24]
 800c1e4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800c1e6:	69bb      	ldr	r3, [r7, #24]
 800c1e8:	791b      	ldrb	r3, [r3, #4]
 800c1ea:	f043 0301 	orr.w	r3, r3, #1
 800c1ee:	b2da      	uxtb	r2, r3
 800c1f0:	69bb      	ldr	r3, [r7, #24]
 800c1f2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c1f8:	69bb      	ldr	r3, [r7, #24]
 800c1fa:	69db      	ldr	r3, [r3, #28]
 800c1fc:	68ba      	ldr	r2, [r7, #8]
 800c1fe:	429a      	cmp	r2, r3
 800c200:	d3c6      	bcc.n	800c190 <remove_chain+0x4a>
 800c202:	e000      	b.n	800c206 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c204:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c206:	2300      	movs	r3, #0
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3720      	adds	r7, #32
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b088      	sub	sp, #32
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d10d      	bne.n	800c242 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	695b      	ldr	r3, [r3, #20]
 800c22a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c22c:	69bb      	ldr	r3, [r7, #24]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d004      	beq.n	800c23c <create_chain+0x2c>
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	69db      	ldr	r3, [r3, #28]
 800c236:	69ba      	ldr	r2, [r7, #24]
 800c238:	429a      	cmp	r2, r3
 800c23a:	d31b      	bcc.n	800c274 <create_chain+0x64>
 800c23c:	2301      	movs	r3, #1
 800c23e:	61bb      	str	r3, [r7, #24]
 800c240:	e018      	b.n	800c274 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c242:	6839      	ldr	r1, [r7, #0]
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f7ff fd8e 	bl	800bd66 <get_fat>
 800c24a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2b01      	cmp	r3, #1
 800c250:	d801      	bhi.n	800c256 <create_chain+0x46>
 800c252:	2301      	movs	r3, #1
 800c254:	e070      	b.n	800c338 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c25c:	d101      	bne.n	800c262 <create_chain+0x52>
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	e06a      	b.n	800c338 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	69db      	ldr	r3, [r3, #28]
 800c266:	68fa      	ldr	r2, [r7, #12]
 800c268:	429a      	cmp	r2, r3
 800c26a:	d201      	bcs.n	800c270 <create_chain+0x60>
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	e063      	b.n	800c338 <create_chain+0x128>
		scl = clst;
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c274:	69bb      	ldr	r3, [r7, #24]
 800c276:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c278:	69fb      	ldr	r3, [r7, #28]
 800c27a:	3301      	adds	r3, #1
 800c27c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	69db      	ldr	r3, [r3, #28]
 800c282:	69fa      	ldr	r2, [r7, #28]
 800c284:	429a      	cmp	r2, r3
 800c286:	d307      	bcc.n	800c298 <create_chain+0x88>
				ncl = 2;
 800c288:	2302      	movs	r3, #2
 800c28a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c28c:	69fa      	ldr	r2, [r7, #28]
 800c28e:	69bb      	ldr	r3, [r7, #24]
 800c290:	429a      	cmp	r2, r3
 800c292:	d901      	bls.n	800c298 <create_chain+0x88>
 800c294:	2300      	movs	r3, #0
 800c296:	e04f      	b.n	800c338 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c298:	69f9      	ldr	r1, [r7, #28]
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f7ff fd63 	bl	800bd66 <get_fat>
 800c2a0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d00e      	beq.n	800c2c6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	2b01      	cmp	r3, #1
 800c2ac:	d003      	beq.n	800c2b6 <create_chain+0xa6>
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2b4:	d101      	bne.n	800c2ba <create_chain+0xaa>
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	e03e      	b.n	800c338 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c2ba:	69fa      	ldr	r2, [r7, #28]
 800c2bc:	69bb      	ldr	r3, [r7, #24]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d1da      	bne.n	800c278 <create_chain+0x68>
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	e038      	b.n	800c338 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c2c6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c2c8:	f04f 32ff 	mov.w	r2, #4294967295
 800c2cc:	69f9      	ldr	r1, [r7, #28]
 800c2ce:	6938      	ldr	r0, [r7, #16]
 800c2d0:	f7ff fe1d 	bl	800bf0e <put_fat>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c2d8:	7dfb      	ldrb	r3, [r7, #23]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d109      	bne.n	800c2f2 <create_chain+0xe2>
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d006      	beq.n	800c2f2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c2e4:	69fa      	ldr	r2, [r7, #28]
 800c2e6:	6839      	ldr	r1, [r7, #0]
 800c2e8:	6938      	ldr	r0, [r7, #16]
 800c2ea:	f7ff fe10 	bl	800bf0e <put_fat>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c2f2:	7dfb      	ldrb	r3, [r7, #23]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d116      	bne.n	800c326 <create_chain+0x116>
		fs->last_clst = ncl;
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	69fa      	ldr	r2, [r7, #28]
 800c2fc:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	699a      	ldr	r2, [r3, #24]
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	69db      	ldr	r3, [r3, #28]
 800c306:	3b02      	subs	r3, #2
 800c308:	429a      	cmp	r2, r3
 800c30a:	d804      	bhi.n	800c316 <create_chain+0x106>
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	699b      	ldr	r3, [r3, #24]
 800c310:	1e5a      	subs	r2, r3, #1
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800c316:	693b      	ldr	r3, [r7, #16]
 800c318:	791b      	ldrb	r3, [r3, #4]
 800c31a:	f043 0301 	orr.w	r3, r3, #1
 800c31e:	b2da      	uxtb	r2, r3
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	711a      	strb	r2, [r3, #4]
 800c324:	e007      	b.n	800c336 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c326:	7dfb      	ldrb	r3, [r7, #23]
 800c328:	2b01      	cmp	r3, #1
 800c32a:	d102      	bne.n	800c332 <create_chain+0x122>
 800c32c:	f04f 33ff 	mov.w	r3, #4294967295
 800c330:	e000      	b.n	800c334 <create_chain+0x124>
 800c332:	2301      	movs	r3, #1
 800c334:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c336:	69fb      	ldr	r3, [r7, #28]
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3720      	adds	r7, #32
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}

0800c340 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c340:	b480      	push	{r7}
 800c342:	b087      	sub	sp, #28
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c354:	3304      	adds	r3, #4
 800c356:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	899b      	ldrh	r3, [r3, #12]
 800c35c:	461a      	mov	r2, r3
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	fbb3 f3f2 	udiv	r3, r3, r2
 800c364:	68fa      	ldr	r2, [r7, #12]
 800c366:	8952      	ldrh	r2, [r2, #10]
 800c368:	fbb3 f3f2 	udiv	r3, r3, r2
 800c36c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	1d1a      	adds	r2, r3, #4
 800c372:	613a      	str	r2, [r7, #16]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d101      	bne.n	800c382 <clmt_clust+0x42>
 800c37e:	2300      	movs	r3, #0
 800c380:	e010      	b.n	800c3a4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800c382:	697a      	ldr	r2, [r7, #20]
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	429a      	cmp	r2, r3
 800c388:	d307      	bcc.n	800c39a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800c38a:	697a      	ldr	r2, [r7, #20]
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	1ad3      	subs	r3, r2, r3
 800c390:	617b      	str	r3, [r7, #20]
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	3304      	adds	r3, #4
 800c396:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c398:	e7e9      	b.n	800c36e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800c39a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	4413      	add	r3, r2
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	371c      	adds	r7, #28
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr

0800c3b0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b086      	sub	sp, #24
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c3c6:	d204      	bcs.n	800c3d2 <dir_sdi+0x22>
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	f003 031f 	and.w	r3, r3, #31
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d001      	beq.n	800c3d6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c3d2:	2302      	movs	r3, #2
 800c3d4:	e071      	b.n	800c4ba <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	683a      	ldr	r2, [r7, #0]
 800c3da:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	689b      	ldr	r3, [r3, #8]
 800c3e0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d106      	bne.n	800c3f6 <dir_sdi+0x46>
 800c3e8:	693b      	ldr	r3, [r7, #16]
 800c3ea:	781b      	ldrb	r3, [r3, #0]
 800c3ec:	2b02      	cmp	r3, #2
 800c3ee:	d902      	bls.n	800c3f6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3f4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d10c      	bne.n	800c416 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	095b      	lsrs	r3, r3, #5
 800c400:	693a      	ldr	r2, [r7, #16]
 800c402:	8912      	ldrh	r2, [r2, #8]
 800c404:	4293      	cmp	r3, r2
 800c406:	d301      	bcc.n	800c40c <dir_sdi+0x5c>
 800c408:	2302      	movs	r3, #2
 800c40a:	e056      	b.n	800c4ba <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	61da      	str	r2, [r3, #28]
 800c414:	e02d      	b.n	800c472 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	895b      	ldrh	r3, [r3, #10]
 800c41a:	461a      	mov	r2, r3
 800c41c:	693b      	ldr	r3, [r7, #16]
 800c41e:	899b      	ldrh	r3, [r3, #12]
 800c420:	fb03 f302 	mul.w	r3, r3, r2
 800c424:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c426:	e019      	b.n	800c45c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6979      	ldr	r1, [r7, #20]
 800c42c:	4618      	mov	r0, r3
 800c42e:	f7ff fc9a 	bl	800bd66 <get_fat>
 800c432:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c434:	697b      	ldr	r3, [r7, #20]
 800c436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c43a:	d101      	bne.n	800c440 <dir_sdi+0x90>
 800c43c:	2301      	movs	r3, #1
 800c43e:	e03c      	b.n	800c4ba <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	2b01      	cmp	r3, #1
 800c444:	d904      	bls.n	800c450 <dir_sdi+0xa0>
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	69db      	ldr	r3, [r3, #28]
 800c44a:	697a      	ldr	r2, [r7, #20]
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d301      	bcc.n	800c454 <dir_sdi+0xa4>
 800c450:	2302      	movs	r3, #2
 800c452:	e032      	b.n	800c4ba <dir_sdi+0x10a>
			ofs -= csz;
 800c454:	683a      	ldr	r2, [r7, #0]
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	1ad3      	subs	r3, r2, r3
 800c45a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c45c:	683a      	ldr	r2, [r7, #0]
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	429a      	cmp	r2, r3
 800c462:	d2e1      	bcs.n	800c428 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800c464:	6979      	ldr	r1, [r7, #20]
 800c466:	6938      	ldr	r0, [r7, #16]
 800c468:	f7ff fc5e 	bl	800bd28 <clust2sect>
 800c46c:	4602      	mov	r2, r0
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	697a      	ldr	r2, [r7, #20]
 800c476:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	69db      	ldr	r3, [r3, #28]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d101      	bne.n	800c484 <dir_sdi+0xd4>
 800c480:	2302      	movs	r3, #2
 800c482:	e01a      	b.n	800c4ba <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	69da      	ldr	r2, [r3, #28]
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	899b      	ldrh	r3, [r3, #12]
 800c48c:	4619      	mov	r1, r3
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	fbb3 f3f1 	udiv	r3, r3, r1
 800c494:	441a      	add	r2, r3
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	899b      	ldrh	r3, [r3, #12]
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	fbb3 f0f2 	udiv	r0, r3, r2
 800c4ac:	fb02 f200 	mul.w	r2, r2, r0
 800c4b0:	1a9b      	subs	r3, r3, r2
 800c4b2:	18ca      	adds	r2, r1, r3
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c4b8:	2300      	movs	r3, #0
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	3718      	adds	r7, #24
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}

0800c4c2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c4c2:	b580      	push	{r7, lr}
 800c4c4:	b086      	sub	sp, #24
 800c4c6:	af00      	add	r7, sp, #0
 800c4c8:	6078      	str	r0, [r7, #4]
 800c4ca:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	695b      	ldr	r3, [r3, #20]
 800c4d6:	3320      	adds	r3, #32
 800c4d8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	69db      	ldr	r3, [r3, #28]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d003      	beq.n	800c4ea <dir_next+0x28>
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c4e8:	d301      	bcc.n	800c4ee <dir_next+0x2c>
 800c4ea:	2304      	movs	r3, #4
 800c4ec:	e0bb      	b.n	800c666 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	899b      	ldrh	r3, [r3, #12]
 800c4f2:	461a      	mov	r2, r3
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	fbb3 f1f2 	udiv	r1, r3, r2
 800c4fa:	fb02 f201 	mul.w	r2, r2, r1
 800c4fe:	1a9b      	subs	r3, r3, r2
 800c500:	2b00      	cmp	r3, #0
 800c502:	f040 809d 	bne.w	800c640 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	69db      	ldr	r3, [r3, #28]
 800c50a:	1c5a      	adds	r2, r3, #1
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	699b      	ldr	r3, [r3, #24]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d10b      	bne.n	800c530 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	095b      	lsrs	r3, r3, #5
 800c51c:	68fa      	ldr	r2, [r7, #12]
 800c51e:	8912      	ldrh	r2, [r2, #8]
 800c520:	4293      	cmp	r3, r2
 800c522:	f0c0 808d 	bcc.w	800c640 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2200      	movs	r2, #0
 800c52a:	61da      	str	r2, [r3, #28]
 800c52c:	2304      	movs	r3, #4
 800c52e:	e09a      	b.n	800c666 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	899b      	ldrh	r3, [r3, #12]
 800c534:	461a      	mov	r2, r3
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	fbb3 f3f2 	udiv	r3, r3, r2
 800c53c:	68fa      	ldr	r2, [r7, #12]
 800c53e:	8952      	ldrh	r2, [r2, #10]
 800c540:	3a01      	subs	r2, #1
 800c542:	4013      	ands	r3, r2
 800c544:	2b00      	cmp	r3, #0
 800c546:	d17b      	bne.n	800c640 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c548:	687a      	ldr	r2, [r7, #4]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	699b      	ldr	r3, [r3, #24]
 800c54e:	4619      	mov	r1, r3
 800c550:	4610      	mov	r0, r2
 800c552:	f7ff fc08 	bl	800bd66 <get_fat>
 800c556:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	2b01      	cmp	r3, #1
 800c55c:	d801      	bhi.n	800c562 <dir_next+0xa0>
 800c55e:	2302      	movs	r3, #2
 800c560:	e081      	b.n	800c666 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c568:	d101      	bne.n	800c56e <dir_next+0xac>
 800c56a:	2301      	movs	r3, #1
 800c56c:	e07b      	b.n	800c666 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	69db      	ldr	r3, [r3, #28]
 800c572:	697a      	ldr	r2, [r7, #20]
 800c574:	429a      	cmp	r2, r3
 800c576:	d359      	bcc.n	800c62c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d104      	bne.n	800c588 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2200      	movs	r2, #0
 800c582:	61da      	str	r2, [r3, #28]
 800c584:	2304      	movs	r3, #4
 800c586:	e06e      	b.n	800c666 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c588:	687a      	ldr	r2, [r7, #4]
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	699b      	ldr	r3, [r3, #24]
 800c58e:	4619      	mov	r1, r3
 800c590:	4610      	mov	r0, r2
 800c592:	f7ff fe3d 	bl	800c210 <create_chain>
 800c596:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d101      	bne.n	800c5a2 <dir_next+0xe0>
 800c59e:	2307      	movs	r3, #7
 800c5a0:	e061      	b.n	800c666 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d101      	bne.n	800c5ac <dir_next+0xea>
 800c5a8:	2302      	movs	r3, #2
 800c5aa:	e05c      	b.n	800c666 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5b2:	d101      	bne.n	800c5b8 <dir_next+0xf6>
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	e056      	b.n	800c666 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c5b8:	68f8      	ldr	r0, [r7, #12]
 800c5ba:	f7ff fad3 	bl	800bb64 <sync_window>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d001      	beq.n	800c5c8 <dir_next+0x106>
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	e04e      	b.n	800c666 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	899b      	ldrh	r3, [r3, #12]
 800c5d2:	461a      	mov	r2, r3
 800c5d4:	2100      	movs	r1, #0
 800c5d6:	f7ff f8fc 	bl	800b7d2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c5da:	2300      	movs	r3, #0
 800c5dc:	613b      	str	r3, [r7, #16]
 800c5de:	6979      	ldr	r1, [r7, #20]
 800c5e0:	68f8      	ldr	r0, [r7, #12]
 800c5e2:	f7ff fba1 	bl	800bd28 <clust2sect>
 800c5e6:	4602      	mov	r2, r0
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	635a      	str	r2, [r3, #52]	; 0x34
 800c5ec:	e012      	b.n	800c614 <dir_next+0x152>
						fs->wflag = 1;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c5f4:	68f8      	ldr	r0, [r7, #12]
 800c5f6:	f7ff fab5 	bl	800bb64 <sync_window>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d001      	beq.n	800c604 <dir_next+0x142>
 800c600:	2301      	movs	r3, #1
 800c602:	e030      	b.n	800c666 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c604:	693b      	ldr	r3, [r7, #16]
 800c606:	3301      	adds	r3, #1
 800c608:	613b      	str	r3, [r7, #16]
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c60e:	1c5a      	adds	r2, r3, #1
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	635a      	str	r2, [r3, #52]	; 0x34
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	895b      	ldrh	r3, [r3, #10]
 800c618:	461a      	mov	r2, r3
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	4293      	cmp	r3, r2
 800c61e:	d3e6      	bcc.n	800c5ee <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	1ad2      	subs	r2, r2, r3
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	697a      	ldr	r2, [r7, #20]
 800c630:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c632:	6979      	ldr	r1, [r7, #20]
 800c634:	68f8      	ldr	r0, [r7, #12]
 800c636:	f7ff fb77 	bl	800bd28 <clust2sect>
 800c63a:	4602      	mov	r2, r0
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	68ba      	ldr	r2, [r7, #8]
 800c644:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	899b      	ldrh	r3, [r3, #12]
 800c650:	461a      	mov	r2, r3
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	fbb3 f0f2 	udiv	r0, r3, r2
 800c658:	fb02 f200 	mul.w	r2, r2, r0
 800c65c:	1a9b      	subs	r3, r3, r2
 800c65e:	18ca      	adds	r2, r1, r3
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c664:	2300      	movs	r3, #0
}
 800c666:	4618      	mov	r0, r3
 800c668:	3718      	adds	r7, #24
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}

0800c66e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c66e:	b580      	push	{r7, lr}
 800c670:	b086      	sub	sp, #24
 800c672:	af00      	add	r7, sp, #0
 800c674:	6078      	str	r0, [r7, #4]
 800c676:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c67e:	2100      	movs	r1, #0
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f7ff fe95 	bl	800c3b0 <dir_sdi>
 800c686:	4603      	mov	r3, r0
 800c688:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c68a:	7dfb      	ldrb	r3, [r7, #23]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d12b      	bne.n	800c6e8 <dir_alloc+0x7a>
		n = 0;
 800c690:	2300      	movs	r3, #0
 800c692:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	69db      	ldr	r3, [r3, #28]
 800c698:	4619      	mov	r1, r3
 800c69a:	68f8      	ldr	r0, [r7, #12]
 800c69c:	f7ff faa6 	bl	800bbec <move_window>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c6a4:	7dfb      	ldrb	r3, [r7, #23]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d11d      	bne.n	800c6e6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6a1b      	ldr	r3, [r3, #32]
 800c6ae:	781b      	ldrb	r3, [r3, #0]
 800c6b0:	2be5      	cmp	r3, #229	; 0xe5
 800c6b2:	d004      	beq.n	800c6be <dir_alloc+0x50>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6a1b      	ldr	r3, [r3, #32]
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d107      	bne.n	800c6ce <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	3301      	adds	r3, #1
 800c6c2:	613b      	str	r3, [r7, #16]
 800c6c4:	693a      	ldr	r2, [r7, #16]
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d102      	bne.n	800c6d2 <dir_alloc+0x64>
 800c6cc:	e00c      	b.n	800c6e8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c6d2:	2101      	movs	r1, #1
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f7ff fef4 	bl	800c4c2 <dir_next>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c6de:	7dfb      	ldrb	r3, [r7, #23]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d0d7      	beq.n	800c694 <dir_alloc+0x26>
 800c6e4:	e000      	b.n	800c6e8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c6e6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c6e8:	7dfb      	ldrb	r3, [r7, #23]
 800c6ea:	2b04      	cmp	r3, #4
 800c6ec:	d101      	bne.n	800c6f2 <dir_alloc+0x84>
 800c6ee:	2307      	movs	r3, #7
 800c6f0:	75fb      	strb	r3, [r7, #23]
	return res;
 800c6f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3718      	adds	r7, #24
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}

0800c6fc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b084      	sub	sp, #16
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	331a      	adds	r3, #26
 800c70a:	4618      	mov	r0, r3
 800c70c:	f7fe ffbe 	bl	800b68c <ld_word>
 800c710:	4603      	mov	r3, r0
 800c712:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	2b03      	cmp	r3, #3
 800c71a:	d109      	bne.n	800c730 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	3314      	adds	r3, #20
 800c720:	4618      	mov	r0, r3
 800c722:	f7fe ffb3 	bl	800b68c <ld_word>
 800c726:	4603      	mov	r3, r0
 800c728:	041b      	lsls	r3, r3, #16
 800c72a:	68fa      	ldr	r2, [r7, #12]
 800c72c:	4313      	orrs	r3, r2
 800c72e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c730:	68fb      	ldr	r3, [r7, #12]
}
 800c732:	4618      	mov	r0, r3
 800c734:	3710      	adds	r7, #16
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}

0800c73a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c73a:	b580      	push	{r7, lr}
 800c73c:	b084      	sub	sp, #16
 800c73e:	af00      	add	r7, sp, #0
 800c740:	60f8      	str	r0, [r7, #12]
 800c742:	60b9      	str	r1, [r7, #8]
 800c744:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	331a      	adds	r3, #26
 800c74a:	687a      	ldr	r2, [r7, #4]
 800c74c:	b292      	uxth	r2, r2
 800c74e:	4611      	mov	r1, r2
 800c750:	4618      	mov	r0, r3
 800c752:	f7fe ffd6 	bl	800b702 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	781b      	ldrb	r3, [r3, #0]
 800c75a:	2b03      	cmp	r3, #3
 800c75c:	d109      	bne.n	800c772 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	f103 0214 	add.w	r2, r3, #20
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	0c1b      	lsrs	r3, r3, #16
 800c768:	b29b      	uxth	r3, r3
 800c76a:	4619      	mov	r1, r3
 800c76c:	4610      	mov	r0, r2
 800c76e:	f7fe ffc8 	bl	800b702 <st_word>
	}
}
 800c772:	bf00      	nop
 800c774:	3710      	adds	r7, #16
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}
	...

0800c77c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c77c:	b590      	push	{r4, r7, lr}
 800c77e:	b087      	sub	sp, #28
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
 800c784:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	331a      	adds	r3, #26
 800c78a:	4618      	mov	r0, r3
 800c78c:	f7fe ff7e 	bl	800b68c <ld_word>
 800c790:	4603      	mov	r3, r0
 800c792:	2b00      	cmp	r3, #0
 800c794:	d001      	beq.n	800c79a <cmp_lfn+0x1e>
 800c796:	2300      	movs	r3, #0
 800c798:	e059      	b.n	800c84e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	781b      	ldrb	r3, [r3, #0]
 800c79e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7a2:	1e5a      	subs	r2, r3, #1
 800c7a4:	4613      	mov	r3, r2
 800c7a6:	005b      	lsls	r3, r3, #1
 800c7a8:	4413      	add	r3, r2
 800c7aa:	009b      	lsls	r3, r3, #2
 800c7ac:	4413      	add	r3, r2
 800c7ae:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	81fb      	strh	r3, [r7, #14]
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	613b      	str	r3, [r7, #16]
 800c7b8:	e033      	b.n	800c822 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c7ba:	4a27      	ldr	r2, [pc, #156]	; (800c858 <cmp_lfn+0xdc>)
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	4413      	add	r3, r2
 800c7c0:	781b      	ldrb	r3, [r3, #0]
 800c7c2:	461a      	mov	r2, r3
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	4413      	add	r3, r2
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	f7fe ff5f 	bl	800b68c <ld_word>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c7d2:	89fb      	ldrh	r3, [r7, #14]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d01a      	beq.n	800c80e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	2b1f      	cmp	r3, #31
 800c7dc:	d812      	bhi.n	800c804 <cmp_lfn+0x88>
 800c7de:	89bb      	ldrh	r3, [r7, #12]
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f001 fd79 	bl	800e2d8 <ff_wtoupper>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	461c      	mov	r4, r3
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	1c5a      	adds	r2, r3, #1
 800c7ee:	617a      	str	r2, [r7, #20]
 800c7f0:	005b      	lsls	r3, r3, #1
 800c7f2:	687a      	ldr	r2, [r7, #4]
 800c7f4:	4413      	add	r3, r2
 800c7f6:	881b      	ldrh	r3, [r3, #0]
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f001 fd6d 	bl	800e2d8 <ff_wtoupper>
 800c7fe:	4603      	mov	r3, r0
 800c800:	429c      	cmp	r4, r3
 800c802:	d001      	beq.n	800c808 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c804:	2300      	movs	r3, #0
 800c806:	e022      	b.n	800c84e <cmp_lfn+0xd2>
			}
			wc = uc;
 800c808:	89bb      	ldrh	r3, [r7, #12]
 800c80a:	81fb      	strh	r3, [r7, #14]
 800c80c:	e006      	b.n	800c81c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c80e:	89bb      	ldrh	r3, [r7, #12]
 800c810:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c814:	4293      	cmp	r3, r2
 800c816:	d001      	beq.n	800c81c <cmp_lfn+0xa0>
 800c818:	2300      	movs	r3, #0
 800c81a:	e018      	b.n	800c84e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	3301      	adds	r3, #1
 800c820:	613b      	str	r3, [r7, #16]
 800c822:	693b      	ldr	r3, [r7, #16]
 800c824:	2b0c      	cmp	r3, #12
 800c826:	d9c8      	bls.n	800c7ba <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c830:	2b00      	cmp	r3, #0
 800c832:	d00b      	beq.n	800c84c <cmp_lfn+0xd0>
 800c834:	89fb      	ldrh	r3, [r7, #14]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d008      	beq.n	800c84c <cmp_lfn+0xd0>
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	005b      	lsls	r3, r3, #1
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	4413      	add	r3, r2
 800c842:	881b      	ldrh	r3, [r3, #0]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d001      	beq.n	800c84c <cmp_lfn+0xd0>
 800c848:	2300      	movs	r3, #0
 800c84a:	e000      	b.n	800c84e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c84c:	2301      	movs	r3, #1
}
 800c84e:	4618      	mov	r0, r3
 800c850:	371c      	adds	r7, #28
 800c852:	46bd      	mov	sp, r7
 800c854:	bd90      	pop	{r4, r7, pc}
 800c856:	bf00      	nop
 800c858:	08016168 	.word	0x08016168

0800c85c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b088      	sub	sp, #32
 800c860:	af00      	add	r7, sp, #0
 800c862:	60f8      	str	r0, [r7, #12]
 800c864:	60b9      	str	r1, [r7, #8]
 800c866:	4611      	mov	r1, r2
 800c868:	461a      	mov	r2, r3
 800c86a:	460b      	mov	r3, r1
 800c86c:	71fb      	strb	r3, [r7, #7]
 800c86e:	4613      	mov	r3, r2
 800c870:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	330d      	adds	r3, #13
 800c876:	79ba      	ldrb	r2, [r7, #6]
 800c878:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	330b      	adds	r3, #11
 800c87e:	220f      	movs	r2, #15
 800c880:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	330c      	adds	r3, #12
 800c886:	2200      	movs	r2, #0
 800c888:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	331a      	adds	r3, #26
 800c88e:	2100      	movs	r1, #0
 800c890:	4618      	mov	r0, r3
 800c892:	f7fe ff36 	bl	800b702 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c896:	79fb      	ldrb	r3, [r7, #7]
 800c898:	1e5a      	subs	r2, r3, #1
 800c89a:	4613      	mov	r3, r2
 800c89c:	005b      	lsls	r3, r3, #1
 800c89e:	4413      	add	r3, r2
 800c8a0:	009b      	lsls	r3, r3, #2
 800c8a2:	4413      	add	r3, r2
 800c8a4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	82fb      	strh	r3, [r7, #22]
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c8ae:	8afb      	ldrh	r3, [r7, #22]
 800c8b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d007      	beq.n	800c8c8 <put_lfn+0x6c>
 800c8b8:	69fb      	ldr	r3, [r7, #28]
 800c8ba:	1c5a      	adds	r2, r3, #1
 800c8bc:	61fa      	str	r2, [r7, #28]
 800c8be:	005b      	lsls	r3, r3, #1
 800c8c0:	68fa      	ldr	r2, [r7, #12]
 800c8c2:	4413      	add	r3, r2
 800c8c4:	881b      	ldrh	r3, [r3, #0]
 800c8c6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c8c8:	4a17      	ldr	r2, [pc, #92]	; (800c928 <put_lfn+0xcc>)
 800c8ca:	69bb      	ldr	r3, [r7, #24]
 800c8cc:	4413      	add	r3, r2
 800c8ce:	781b      	ldrb	r3, [r3, #0]
 800c8d0:	461a      	mov	r2, r3
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	4413      	add	r3, r2
 800c8d6:	8afa      	ldrh	r2, [r7, #22]
 800c8d8:	4611      	mov	r1, r2
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f7fe ff11 	bl	800b702 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c8e0:	8afb      	ldrh	r3, [r7, #22]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d102      	bne.n	800c8ec <put_lfn+0x90>
 800c8e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c8ea:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c8ec:	69bb      	ldr	r3, [r7, #24]
 800c8ee:	3301      	adds	r3, #1
 800c8f0:	61bb      	str	r3, [r7, #24]
 800c8f2:	69bb      	ldr	r3, [r7, #24]
 800c8f4:	2b0c      	cmp	r3, #12
 800c8f6:	d9da      	bls.n	800c8ae <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c8f8:	8afb      	ldrh	r3, [r7, #22]
 800c8fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d006      	beq.n	800c910 <put_lfn+0xb4>
 800c902:	69fb      	ldr	r3, [r7, #28]
 800c904:	005b      	lsls	r3, r3, #1
 800c906:	68fa      	ldr	r2, [r7, #12]
 800c908:	4413      	add	r3, r2
 800c90a:	881b      	ldrh	r3, [r3, #0]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d103      	bne.n	800c918 <put_lfn+0xbc>
 800c910:	79fb      	ldrb	r3, [r7, #7]
 800c912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c916:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	79fa      	ldrb	r2, [r7, #7]
 800c91c:	701a      	strb	r2, [r3, #0]
}
 800c91e:	bf00      	nop
 800c920:	3720      	adds	r7, #32
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
 800c926:	bf00      	nop
 800c928:	08016168 	.word	0x08016168

0800c92c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b08c      	sub	sp, #48	; 0x30
 800c930:	af00      	add	r7, sp, #0
 800c932:	60f8      	str	r0, [r7, #12]
 800c934:	60b9      	str	r1, [r7, #8]
 800c936:	607a      	str	r2, [r7, #4]
 800c938:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c93a:	220b      	movs	r2, #11
 800c93c:	68b9      	ldr	r1, [r7, #8]
 800c93e:	68f8      	ldr	r0, [r7, #12]
 800c940:	f7fe ff26 	bl	800b790 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	2b05      	cmp	r3, #5
 800c948:	d92b      	bls.n	800c9a2 <gen_numname+0x76>
		sr = seq;
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c94e:	e022      	b.n	800c996 <gen_numname+0x6a>
			wc = *lfn++;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	1c9a      	adds	r2, r3, #2
 800c954:	607a      	str	r2, [r7, #4]
 800c956:	881b      	ldrh	r3, [r3, #0]
 800c958:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800c95a:	2300      	movs	r3, #0
 800c95c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c95e:	e017      	b.n	800c990 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800c960:	69fb      	ldr	r3, [r7, #28]
 800c962:	005a      	lsls	r2, r3, #1
 800c964:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c966:	f003 0301 	and.w	r3, r3, #1
 800c96a:	4413      	add	r3, r2
 800c96c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c96e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c970:	085b      	lsrs	r3, r3, #1
 800c972:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c974:	69fb      	ldr	r3, [r7, #28]
 800c976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d005      	beq.n	800c98a <gen_numname+0x5e>
 800c97e:	69fb      	ldr	r3, [r7, #28]
 800c980:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800c984:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800c988:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c98c:	3301      	adds	r3, #1
 800c98e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c992:	2b0f      	cmp	r3, #15
 800c994:	d9e4      	bls.n	800c960 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	881b      	ldrh	r3, [r3, #0]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d1d8      	bne.n	800c950 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c99e:	69fb      	ldr	r3, [r7, #28]
 800c9a0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c9a2:	2307      	movs	r3, #7
 800c9a4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	b2db      	uxtb	r3, r3
 800c9aa:	f003 030f 	and.w	r3, r3, #15
 800c9ae:	b2db      	uxtb	r3, r3
 800c9b0:	3330      	adds	r3, #48	; 0x30
 800c9b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800c9b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c9ba:	2b39      	cmp	r3, #57	; 0x39
 800c9bc:	d904      	bls.n	800c9c8 <gen_numname+0x9c>
 800c9be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c9c2:	3307      	adds	r3, #7
 800c9c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800c9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ca:	1e5a      	subs	r2, r3, #1
 800c9cc:	62ba      	str	r2, [r7, #40]	; 0x28
 800c9ce:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c9d2:	4413      	add	r3, r2
 800c9d4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c9d8:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	091b      	lsrs	r3, r3, #4
 800c9e0:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d1de      	bne.n	800c9a6 <gen_numname+0x7a>
	ns[i] = '~';
 800c9e8:	f107 0214 	add.w	r2, r7, #20
 800c9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ee:	4413      	add	r3, r2
 800c9f0:	227e      	movs	r2, #126	; 0x7e
 800c9f2:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	627b      	str	r3, [r7, #36]	; 0x24
 800c9f8:	e002      	b.n	800ca00 <gen_numname+0xd4>
 800c9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fc:	3301      	adds	r3, #1
 800c9fe:	627b      	str	r3, [r7, #36]	; 0x24
 800ca00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca04:	429a      	cmp	r2, r3
 800ca06:	d205      	bcs.n	800ca14 <gen_numname+0xe8>
 800ca08:	68fa      	ldr	r2, [r7, #12]
 800ca0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca0c:	4413      	add	r3, r2
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	2b20      	cmp	r3, #32
 800ca12:	d1f2      	bne.n	800c9fa <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ca14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca16:	2b07      	cmp	r3, #7
 800ca18:	d808      	bhi.n	800ca2c <gen_numname+0x100>
 800ca1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca1c:	1c5a      	adds	r2, r3, #1
 800ca1e:	62ba      	str	r2, [r7, #40]	; 0x28
 800ca20:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ca24:	4413      	add	r3, r2
 800ca26:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ca2a:	e000      	b.n	800ca2e <gen_numname+0x102>
 800ca2c:	2120      	movs	r1, #32
 800ca2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca30:	1c5a      	adds	r2, r3, #1
 800ca32:	627a      	str	r2, [r7, #36]	; 0x24
 800ca34:	68fa      	ldr	r2, [r7, #12]
 800ca36:	4413      	add	r3, r2
 800ca38:	460a      	mov	r2, r1
 800ca3a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ca3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca3e:	2b07      	cmp	r3, #7
 800ca40:	d9e8      	bls.n	800ca14 <gen_numname+0xe8>
}
 800ca42:	bf00      	nop
 800ca44:	bf00      	nop
 800ca46:	3730      	adds	r7, #48	; 0x30
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}

0800ca4c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b085      	sub	sp, #20
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ca54:	2300      	movs	r3, #0
 800ca56:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ca58:	230b      	movs	r3, #11
 800ca5a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ca5c:	7bfb      	ldrb	r3, [r7, #15]
 800ca5e:	b2da      	uxtb	r2, r3
 800ca60:	0852      	lsrs	r2, r2, #1
 800ca62:	01db      	lsls	r3, r3, #7
 800ca64:	4313      	orrs	r3, r2
 800ca66:	b2da      	uxtb	r2, r3
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	1c59      	adds	r1, r3, #1
 800ca6c:	6079      	str	r1, [r7, #4]
 800ca6e:	781b      	ldrb	r3, [r3, #0]
 800ca70:	4413      	add	r3, r2
 800ca72:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	3b01      	subs	r3, #1
 800ca78:	60bb      	str	r3, [r7, #8]
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d1ed      	bne.n	800ca5c <sum_sfn+0x10>
	return sum;
 800ca80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3714      	adds	r7, #20
 800ca86:	46bd      	mov	sp, r7
 800ca88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8c:	4770      	bx	lr

0800ca8e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ca8e:	b580      	push	{r7, lr}
 800ca90:	b086      	sub	sp, #24
 800ca92:	af00      	add	r7, sp, #0
 800ca94:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ca9c:	2100      	movs	r1, #0
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f7ff fc86 	bl	800c3b0 <dir_sdi>
 800caa4:	4603      	mov	r3, r0
 800caa6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800caa8:	7dfb      	ldrb	r3, [r7, #23]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d001      	beq.n	800cab2 <dir_find+0x24>
 800caae:	7dfb      	ldrb	r3, [r7, #23]
 800cab0:	e0a9      	b.n	800cc06 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cab2:	23ff      	movs	r3, #255	; 0xff
 800cab4:	753b      	strb	r3, [r7, #20]
 800cab6:	7d3b      	ldrb	r3, [r7, #20]
 800cab8:	757b      	strb	r3, [r7, #21]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f04f 32ff 	mov.w	r2, #4294967295
 800cac0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	69db      	ldr	r3, [r3, #28]
 800cac6:	4619      	mov	r1, r3
 800cac8:	6938      	ldr	r0, [r7, #16]
 800caca:	f7ff f88f 	bl	800bbec <move_window>
 800cace:	4603      	mov	r3, r0
 800cad0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cad2:	7dfb      	ldrb	r3, [r7, #23]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	f040 8090 	bne.w	800cbfa <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6a1b      	ldr	r3, [r3, #32]
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cae2:	7dbb      	ldrb	r3, [r7, #22]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d102      	bne.n	800caee <dir_find+0x60>
 800cae8:	2304      	movs	r3, #4
 800caea:	75fb      	strb	r3, [r7, #23]
 800caec:	e08a      	b.n	800cc04 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6a1b      	ldr	r3, [r3, #32]
 800caf2:	330b      	adds	r3, #11
 800caf4:	781b      	ldrb	r3, [r3, #0]
 800caf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cafa:	73fb      	strb	r3, [r7, #15]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	7bfa      	ldrb	r2, [r7, #15]
 800cb00:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800cb02:	7dbb      	ldrb	r3, [r7, #22]
 800cb04:	2be5      	cmp	r3, #229	; 0xe5
 800cb06:	d007      	beq.n	800cb18 <dir_find+0x8a>
 800cb08:	7bfb      	ldrb	r3, [r7, #15]
 800cb0a:	f003 0308 	and.w	r3, r3, #8
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d009      	beq.n	800cb26 <dir_find+0x98>
 800cb12:	7bfb      	ldrb	r3, [r7, #15]
 800cb14:	2b0f      	cmp	r3, #15
 800cb16:	d006      	beq.n	800cb26 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cb18:	23ff      	movs	r3, #255	; 0xff
 800cb1a:	757b      	strb	r3, [r7, #21]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f04f 32ff 	mov.w	r2, #4294967295
 800cb22:	631a      	str	r2, [r3, #48]	; 0x30
 800cb24:	e05e      	b.n	800cbe4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800cb26:	7bfb      	ldrb	r3, [r7, #15]
 800cb28:	2b0f      	cmp	r3, #15
 800cb2a:	d136      	bne.n	800cb9a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cb32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d154      	bne.n	800cbe4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800cb3a:	7dbb      	ldrb	r3, [r7, #22]
 800cb3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d00d      	beq.n	800cb60 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6a1b      	ldr	r3, [r3, #32]
 800cb48:	7b5b      	ldrb	r3, [r3, #13]
 800cb4a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800cb4c:	7dbb      	ldrb	r3, [r7, #22]
 800cb4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb52:	75bb      	strb	r3, [r7, #22]
 800cb54:	7dbb      	ldrb	r3, [r7, #22]
 800cb56:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	695a      	ldr	r2, [r3, #20]
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cb60:	7dba      	ldrb	r2, [r7, #22]
 800cb62:	7d7b      	ldrb	r3, [r7, #21]
 800cb64:	429a      	cmp	r2, r3
 800cb66:	d115      	bne.n	800cb94 <dir_find+0x106>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6a1b      	ldr	r3, [r3, #32]
 800cb6c:	330d      	adds	r3, #13
 800cb6e:	781b      	ldrb	r3, [r3, #0]
 800cb70:	7d3a      	ldrb	r2, [r7, #20]
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d10e      	bne.n	800cb94 <dir_find+0x106>
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	691a      	ldr	r2, [r3, #16]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6a1b      	ldr	r3, [r3, #32]
 800cb7e:	4619      	mov	r1, r3
 800cb80:	4610      	mov	r0, r2
 800cb82:	f7ff fdfb 	bl	800c77c <cmp_lfn>
 800cb86:	4603      	mov	r3, r0
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d003      	beq.n	800cb94 <dir_find+0x106>
 800cb8c:	7d7b      	ldrb	r3, [r7, #21]
 800cb8e:	3b01      	subs	r3, #1
 800cb90:	b2db      	uxtb	r3, r3
 800cb92:	e000      	b.n	800cb96 <dir_find+0x108>
 800cb94:	23ff      	movs	r3, #255	; 0xff
 800cb96:	757b      	strb	r3, [r7, #21]
 800cb98:	e024      	b.n	800cbe4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cb9a:	7d7b      	ldrb	r3, [r7, #21]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d109      	bne.n	800cbb4 <dir_find+0x126>
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6a1b      	ldr	r3, [r3, #32]
 800cba4:	4618      	mov	r0, r3
 800cba6:	f7ff ff51 	bl	800ca4c <sum_sfn>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	461a      	mov	r2, r3
 800cbae:	7d3b      	ldrb	r3, [r7, #20]
 800cbb0:	4293      	cmp	r3, r2
 800cbb2:	d024      	beq.n	800cbfe <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cbba:	f003 0301 	and.w	r3, r3, #1
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d10a      	bne.n	800cbd8 <dir_find+0x14a>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6a18      	ldr	r0, [r3, #32]
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	3324      	adds	r3, #36	; 0x24
 800cbca:	220b      	movs	r2, #11
 800cbcc:	4619      	mov	r1, r3
 800cbce:	f7fe fe1b 	bl	800b808 <mem_cmp>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d014      	beq.n	800cc02 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cbd8:	23ff      	movs	r3, #255	; 0xff
 800cbda:	757b      	strb	r3, [r7, #21]
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f04f 32ff 	mov.w	r2, #4294967295
 800cbe2:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cbe4:	2100      	movs	r1, #0
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f7ff fc6b 	bl	800c4c2 <dir_next>
 800cbec:	4603      	mov	r3, r0
 800cbee:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cbf0:	7dfb      	ldrb	r3, [r7, #23]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	f43f af65 	beq.w	800cac2 <dir_find+0x34>
 800cbf8:	e004      	b.n	800cc04 <dir_find+0x176>
		if (res != FR_OK) break;
 800cbfa:	bf00      	nop
 800cbfc:	e002      	b.n	800cc04 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cbfe:	bf00      	nop
 800cc00:	e000      	b.n	800cc04 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cc02:	bf00      	nop

	return res;
 800cc04:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3718      	adds	r7, #24
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}
	...

0800cc10 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b08c      	sub	sp, #48	; 0x30
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cc24:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d001      	beq.n	800cc30 <dir_register+0x20>
 800cc2c:	2306      	movs	r3, #6
 800cc2e:	e0e0      	b.n	800cdf2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800cc30:	2300      	movs	r3, #0
 800cc32:	627b      	str	r3, [r7, #36]	; 0x24
 800cc34:	e002      	b.n	800cc3c <dir_register+0x2c>
 800cc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc38:	3301      	adds	r3, #1
 800cc3a:	627b      	str	r3, [r7, #36]	; 0x24
 800cc3c:	69fb      	ldr	r3, [r7, #28]
 800cc3e:	691a      	ldr	r2, [r3, #16]
 800cc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc42:	005b      	lsls	r3, r3, #1
 800cc44:	4413      	add	r3, r2
 800cc46:	881b      	ldrh	r3, [r3, #0]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d1f4      	bne.n	800cc36 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800cc52:	f107 030c 	add.w	r3, r7, #12
 800cc56:	220c      	movs	r2, #12
 800cc58:	4618      	mov	r0, r3
 800cc5a:	f7fe fd99 	bl	800b790 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800cc5e:	7dfb      	ldrb	r3, [r7, #23]
 800cc60:	f003 0301 	and.w	r3, r3, #1
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d032      	beq.n	800ccce <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2240      	movs	r2, #64	; 0x40
 800cc6c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800cc70:	2301      	movs	r3, #1
 800cc72:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc74:	e016      	b.n	800cca4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800cc7c:	69fb      	ldr	r3, [r7, #28]
 800cc7e:	691a      	ldr	r2, [r3, #16]
 800cc80:	f107 010c 	add.w	r1, r7, #12
 800cc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc86:	f7ff fe51 	bl	800c92c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f7ff feff 	bl	800ca8e <dir_find>
 800cc90:	4603      	mov	r3, r0
 800cc92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800cc96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d106      	bne.n	800ccac <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800cc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca0:	3301      	adds	r3, #1
 800cca2:	62bb      	str	r3, [r7, #40]	; 0x28
 800cca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca6:	2b63      	cmp	r3, #99	; 0x63
 800cca8:	d9e5      	bls.n	800cc76 <dir_register+0x66>
 800ccaa:	e000      	b.n	800ccae <dir_register+0x9e>
			if (res != FR_OK) break;
 800ccac:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ccae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccb0:	2b64      	cmp	r3, #100	; 0x64
 800ccb2:	d101      	bne.n	800ccb8 <dir_register+0xa8>
 800ccb4:	2307      	movs	r3, #7
 800ccb6:	e09c      	b.n	800cdf2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ccb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ccbc:	2b04      	cmp	r3, #4
 800ccbe:	d002      	beq.n	800ccc6 <dir_register+0xb6>
 800ccc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ccc4:	e095      	b.n	800cdf2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800ccc6:	7dfa      	ldrb	r2, [r7, #23]
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ccce:	7dfb      	ldrb	r3, [r7, #23]
 800ccd0:	f003 0302 	and.w	r3, r3, #2
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d007      	beq.n	800cce8 <dir_register+0xd8>
 800ccd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccda:	330c      	adds	r3, #12
 800ccdc:	4a47      	ldr	r2, [pc, #284]	; (800cdfc <dir_register+0x1ec>)
 800ccde:	fba2 2303 	umull	r2, r3, r2, r3
 800cce2:	089b      	lsrs	r3, r3, #2
 800cce4:	3301      	adds	r3, #1
 800cce6:	e000      	b.n	800ccea <dir_register+0xda>
 800cce8:	2301      	movs	r3, #1
 800ccea:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ccec:	6a39      	ldr	r1, [r7, #32]
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f7ff fcbd 	bl	800c66e <dir_alloc>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ccfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d148      	bne.n	800cd94 <dir_register+0x184>
 800cd02:	6a3b      	ldr	r3, [r7, #32]
 800cd04:	3b01      	subs	r3, #1
 800cd06:	623b      	str	r3, [r7, #32]
 800cd08:	6a3b      	ldr	r3, [r7, #32]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d042      	beq.n	800cd94 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	695a      	ldr	r2, [r3, #20]
 800cd12:	6a3b      	ldr	r3, [r7, #32]
 800cd14:	015b      	lsls	r3, r3, #5
 800cd16:	1ad3      	subs	r3, r2, r3
 800cd18:	4619      	mov	r1, r3
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f7ff fb48 	bl	800c3b0 <dir_sdi>
 800cd20:	4603      	mov	r3, r0
 800cd22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800cd26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d132      	bne.n	800cd94 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	3324      	adds	r3, #36	; 0x24
 800cd32:	4618      	mov	r0, r3
 800cd34:	f7ff fe8a 	bl	800ca4c <sum_sfn>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	69db      	ldr	r3, [r3, #28]
 800cd40:	4619      	mov	r1, r3
 800cd42:	69f8      	ldr	r0, [r7, #28]
 800cd44:	f7fe ff52 	bl	800bbec <move_window>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800cd4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d11d      	bne.n	800cd92 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800cd56:	69fb      	ldr	r3, [r7, #28]
 800cd58:	6918      	ldr	r0, [r3, #16]
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6a19      	ldr	r1, [r3, #32]
 800cd5e:	6a3b      	ldr	r3, [r7, #32]
 800cd60:	b2da      	uxtb	r2, r3
 800cd62:	7efb      	ldrb	r3, [r7, #27]
 800cd64:	f7ff fd7a 	bl	800c85c <put_lfn>
				fs->wflag = 1;
 800cd68:	69fb      	ldr	r3, [r7, #28]
 800cd6a:	2201      	movs	r2, #1
 800cd6c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800cd6e:	2100      	movs	r1, #0
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f7ff fba6 	bl	800c4c2 <dir_next>
 800cd76:	4603      	mov	r3, r0
 800cd78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800cd7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d107      	bne.n	800cd94 <dir_register+0x184>
 800cd84:	6a3b      	ldr	r3, [r7, #32]
 800cd86:	3b01      	subs	r3, #1
 800cd88:	623b      	str	r3, [r7, #32]
 800cd8a:	6a3b      	ldr	r3, [r7, #32]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d1d5      	bne.n	800cd3c <dir_register+0x12c>
 800cd90:	e000      	b.n	800cd94 <dir_register+0x184>
				if (res != FR_OK) break;
 800cd92:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800cd94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d128      	bne.n	800cdee <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	69db      	ldr	r3, [r3, #28]
 800cda0:	4619      	mov	r1, r3
 800cda2:	69f8      	ldr	r0, [r7, #28]
 800cda4:	f7fe ff22 	bl	800bbec <move_window>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800cdae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d11b      	bne.n	800cdee <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6a1b      	ldr	r3, [r3, #32]
 800cdba:	2220      	movs	r2, #32
 800cdbc:	2100      	movs	r1, #0
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f7fe fd07 	bl	800b7d2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	6a18      	ldr	r0, [r3, #32]
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	3324      	adds	r3, #36	; 0x24
 800cdcc:	220b      	movs	r2, #11
 800cdce:	4619      	mov	r1, r3
 800cdd0:	f7fe fcde 	bl	800b790 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6a1b      	ldr	r3, [r3, #32]
 800cdde:	330c      	adds	r3, #12
 800cde0:	f002 0218 	and.w	r2, r2, #24
 800cde4:	b2d2      	uxtb	r2, r2
 800cde6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800cde8:	69fb      	ldr	r3, [r7, #28]
 800cdea:	2201      	movs	r2, #1
 800cdec:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800cdee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	3730      	adds	r7, #48	; 0x30
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}
 800cdfa:	bf00      	nop
 800cdfc:	4ec4ec4f 	.word	0x4ec4ec4f

0800ce00 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b08a      	sub	sp, #40	; 0x28
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
 800ce08:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	613b      	str	r3, [r7, #16]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	691b      	ldr	r3, [r3, #16]
 800ce16:	60fb      	str	r3, [r7, #12]
 800ce18:	2300      	movs	r3, #0
 800ce1a:	617b      	str	r3, [r7, #20]
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800ce20:	69bb      	ldr	r3, [r7, #24]
 800ce22:	1c5a      	adds	r2, r3, #1
 800ce24:	61ba      	str	r2, [r7, #24]
 800ce26:	693a      	ldr	r2, [r7, #16]
 800ce28:	4413      	add	r3, r2
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800ce2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce30:	2b1f      	cmp	r3, #31
 800ce32:	d940      	bls.n	800ceb6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ce34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce36:	2b2f      	cmp	r3, #47	; 0x2f
 800ce38:	d006      	beq.n	800ce48 <create_name+0x48>
 800ce3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce3c:	2b5c      	cmp	r3, #92	; 0x5c
 800ce3e:	d110      	bne.n	800ce62 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ce40:	e002      	b.n	800ce48 <create_name+0x48>
 800ce42:	69bb      	ldr	r3, [r7, #24]
 800ce44:	3301      	adds	r3, #1
 800ce46:	61bb      	str	r3, [r7, #24]
 800ce48:	693a      	ldr	r2, [r7, #16]
 800ce4a:	69bb      	ldr	r3, [r7, #24]
 800ce4c:	4413      	add	r3, r2
 800ce4e:	781b      	ldrb	r3, [r3, #0]
 800ce50:	2b2f      	cmp	r3, #47	; 0x2f
 800ce52:	d0f6      	beq.n	800ce42 <create_name+0x42>
 800ce54:	693a      	ldr	r2, [r7, #16]
 800ce56:	69bb      	ldr	r3, [r7, #24]
 800ce58:	4413      	add	r3, r2
 800ce5a:	781b      	ldrb	r3, [r3, #0]
 800ce5c:	2b5c      	cmp	r3, #92	; 0x5c
 800ce5e:	d0f0      	beq.n	800ce42 <create_name+0x42>
			break;
 800ce60:	e02a      	b.n	800ceb8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	2b1f      	cmp	r3, #31
 800ce66:	d901      	bls.n	800ce6c <create_name+0x6c>
 800ce68:	2306      	movs	r3, #6
 800ce6a:	e177      	b.n	800d15c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ce6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce6e:	b2db      	uxtb	r3, r3
 800ce70:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ce72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce74:	2101      	movs	r1, #1
 800ce76:	4618      	mov	r0, r3
 800ce78:	f001 f9f2 	bl	800e260 <ff_convert>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ce80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d101      	bne.n	800ce8a <create_name+0x8a>
 800ce86:	2306      	movs	r3, #6
 800ce88:	e168      	b.n	800d15c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ce8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce8c:	2b7f      	cmp	r3, #127	; 0x7f
 800ce8e:	d809      	bhi.n	800cea4 <create_name+0xa4>
 800ce90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce92:	4619      	mov	r1, r3
 800ce94:	48b3      	ldr	r0, [pc, #716]	; (800d164 <create_name+0x364>)
 800ce96:	f7fe fcde 	bl	800b856 <chk_chr>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d001      	beq.n	800cea4 <create_name+0xa4>
 800cea0:	2306      	movs	r3, #6
 800cea2:	e15b      	b.n	800d15c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800cea4:	697b      	ldr	r3, [r7, #20]
 800cea6:	1c5a      	adds	r2, r3, #1
 800cea8:	617a      	str	r2, [r7, #20]
 800ceaa:	005b      	lsls	r3, r3, #1
 800ceac:	68fa      	ldr	r2, [r7, #12]
 800ceae:	4413      	add	r3, r2
 800ceb0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ceb2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ceb4:	e7b4      	b.n	800ce20 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ceb6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ceb8:	693a      	ldr	r2, [r7, #16]
 800ceba:	69bb      	ldr	r3, [r7, #24]
 800cebc:	441a      	add	r2, r3
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cec2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cec4:	2b1f      	cmp	r3, #31
 800cec6:	d801      	bhi.n	800cecc <create_name+0xcc>
 800cec8:	2304      	movs	r3, #4
 800ceca:	e000      	b.n	800cece <create_name+0xce>
 800cecc:	2300      	movs	r3, #0
 800cece:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ced2:	e011      	b.n	800cef8 <create_name+0xf8>
		w = lfn[di - 1];
 800ced4:	697b      	ldr	r3, [r7, #20]
 800ced6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ceda:	3b01      	subs	r3, #1
 800cedc:	005b      	lsls	r3, r3, #1
 800cede:	68fa      	ldr	r2, [r7, #12]
 800cee0:	4413      	add	r3, r2
 800cee2:	881b      	ldrh	r3, [r3, #0]
 800cee4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800cee6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cee8:	2b20      	cmp	r3, #32
 800ceea:	d002      	beq.n	800cef2 <create_name+0xf2>
 800ceec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ceee:	2b2e      	cmp	r3, #46	; 0x2e
 800cef0:	d106      	bne.n	800cf00 <create_name+0x100>
		di--;
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	3b01      	subs	r3, #1
 800cef6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800cef8:	697b      	ldr	r3, [r7, #20]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d1ea      	bne.n	800ced4 <create_name+0xd4>
 800cefe:	e000      	b.n	800cf02 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800cf00:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	005b      	lsls	r3, r3, #1
 800cf06:	68fa      	ldr	r2, [r7, #12]
 800cf08:	4413      	add	r3, r2
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d101      	bne.n	800cf18 <create_name+0x118>
 800cf14:	2306      	movs	r3, #6
 800cf16:	e121      	b.n	800d15c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	3324      	adds	r3, #36	; 0x24
 800cf1c:	220b      	movs	r2, #11
 800cf1e:	2120      	movs	r1, #32
 800cf20:	4618      	mov	r0, r3
 800cf22:	f7fe fc56 	bl	800b7d2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800cf26:	2300      	movs	r3, #0
 800cf28:	61bb      	str	r3, [r7, #24]
 800cf2a:	e002      	b.n	800cf32 <create_name+0x132>
 800cf2c:	69bb      	ldr	r3, [r7, #24]
 800cf2e:	3301      	adds	r3, #1
 800cf30:	61bb      	str	r3, [r7, #24]
 800cf32:	69bb      	ldr	r3, [r7, #24]
 800cf34:	005b      	lsls	r3, r3, #1
 800cf36:	68fa      	ldr	r2, [r7, #12]
 800cf38:	4413      	add	r3, r2
 800cf3a:	881b      	ldrh	r3, [r3, #0]
 800cf3c:	2b20      	cmp	r3, #32
 800cf3e:	d0f5      	beq.n	800cf2c <create_name+0x12c>
 800cf40:	69bb      	ldr	r3, [r7, #24]
 800cf42:	005b      	lsls	r3, r3, #1
 800cf44:	68fa      	ldr	r2, [r7, #12]
 800cf46:	4413      	add	r3, r2
 800cf48:	881b      	ldrh	r3, [r3, #0]
 800cf4a:	2b2e      	cmp	r3, #46	; 0x2e
 800cf4c:	d0ee      	beq.n	800cf2c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800cf4e:	69bb      	ldr	r3, [r7, #24]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d009      	beq.n	800cf68 <create_name+0x168>
 800cf54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf58:	f043 0303 	orr.w	r3, r3, #3
 800cf5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800cf60:	e002      	b.n	800cf68 <create_name+0x168>
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	3b01      	subs	r3, #1
 800cf66:	617b      	str	r3, [r7, #20]
 800cf68:	697b      	ldr	r3, [r7, #20]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d009      	beq.n	800cf82 <create_name+0x182>
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cf74:	3b01      	subs	r3, #1
 800cf76:	005b      	lsls	r3, r3, #1
 800cf78:	68fa      	ldr	r2, [r7, #12]
 800cf7a:	4413      	add	r3, r2
 800cf7c:	881b      	ldrh	r3, [r3, #0]
 800cf7e:	2b2e      	cmp	r3, #46	; 0x2e
 800cf80:	d1ef      	bne.n	800cf62 <create_name+0x162>

	i = b = 0; ni = 8;
 800cf82:	2300      	movs	r3, #0
 800cf84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cf88:	2300      	movs	r3, #0
 800cf8a:	623b      	str	r3, [r7, #32]
 800cf8c:	2308      	movs	r3, #8
 800cf8e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800cf90:	69bb      	ldr	r3, [r7, #24]
 800cf92:	1c5a      	adds	r2, r3, #1
 800cf94:	61ba      	str	r2, [r7, #24]
 800cf96:	005b      	lsls	r3, r3, #1
 800cf98:	68fa      	ldr	r2, [r7, #12]
 800cf9a:	4413      	add	r3, r2
 800cf9c:	881b      	ldrh	r3, [r3, #0]
 800cf9e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800cfa0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	f000 8090 	beq.w	800d0c8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800cfa8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cfaa:	2b20      	cmp	r3, #32
 800cfac:	d006      	beq.n	800cfbc <create_name+0x1bc>
 800cfae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cfb0:	2b2e      	cmp	r3, #46	; 0x2e
 800cfb2:	d10a      	bne.n	800cfca <create_name+0x1ca>
 800cfb4:	69ba      	ldr	r2, [r7, #24]
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d006      	beq.n	800cfca <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800cfbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfc0:	f043 0303 	orr.w	r3, r3, #3
 800cfc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cfc8:	e07d      	b.n	800d0c6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800cfca:	6a3a      	ldr	r2, [r7, #32]
 800cfcc:	69fb      	ldr	r3, [r7, #28]
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d203      	bcs.n	800cfda <create_name+0x1da>
 800cfd2:	69ba      	ldr	r2, [r7, #24]
 800cfd4:	697b      	ldr	r3, [r7, #20]
 800cfd6:	429a      	cmp	r2, r3
 800cfd8:	d123      	bne.n	800d022 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800cfda:	69fb      	ldr	r3, [r7, #28]
 800cfdc:	2b0b      	cmp	r3, #11
 800cfde:	d106      	bne.n	800cfee <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800cfe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfe4:	f043 0303 	orr.w	r3, r3, #3
 800cfe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cfec:	e06f      	b.n	800d0ce <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800cfee:	69ba      	ldr	r2, [r7, #24]
 800cff0:	697b      	ldr	r3, [r7, #20]
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d005      	beq.n	800d002 <create_name+0x202>
 800cff6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cffa:	f043 0303 	orr.w	r3, r3, #3
 800cffe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800d002:	69ba      	ldr	r2, [r7, #24]
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	429a      	cmp	r2, r3
 800d008:	d860      	bhi.n	800d0cc <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d00a:	697b      	ldr	r3, [r7, #20]
 800d00c:	61bb      	str	r3, [r7, #24]
 800d00e:	2308      	movs	r3, #8
 800d010:	623b      	str	r3, [r7, #32]
 800d012:	230b      	movs	r3, #11
 800d014:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d016:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d01a:	009b      	lsls	r3, r3, #2
 800d01c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d020:	e051      	b.n	800d0c6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d022:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d024:	2b7f      	cmp	r3, #127	; 0x7f
 800d026:	d914      	bls.n	800d052 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d028:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d02a:	2100      	movs	r1, #0
 800d02c:	4618      	mov	r0, r3
 800d02e:	f001 f917 	bl	800e260 <ff_convert>
 800d032:	4603      	mov	r3, r0
 800d034:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d036:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d004      	beq.n	800d046 <create_name+0x246>
 800d03c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d03e:	3b80      	subs	r3, #128	; 0x80
 800d040:	4a49      	ldr	r2, [pc, #292]	; (800d168 <create_name+0x368>)
 800d042:	5cd3      	ldrb	r3, [r2, r3]
 800d044:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d046:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d04a:	f043 0302 	orr.w	r3, r3, #2
 800d04e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d052:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d054:	2b00      	cmp	r3, #0
 800d056:	d007      	beq.n	800d068 <create_name+0x268>
 800d058:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d05a:	4619      	mov	r1, r3
 800d05c:	4843      	ldr	r0, [pc, #268]	; (800d16c <create_name+0x36c>)
 800d05e:	f7fe fbfa 	bl	800b856 <chk_chr>
 800d062:	4603      	mov	r3, r0
 800d064:	2b00      	cmp	r3, #0
 800d066:	d008      	beq.n	800d07a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d068:	235f      	movs	r3, #95	; 0x5f
 800d06a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d06c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d070:	f043 0303 	orr.w	r3, r3, #3
 800d074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d078:	e01b      	b.n	800d0b2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d07a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d07c:	2b40      	cmp	r3, #64	; 0x40
 800d07e:	d909      	bls.n	800d094 <create_name+0x294>
 800d080:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d082:	2b5a      	cmp	r3, #90	; 0x5a
 800d084:	d806      	bhi.n	800d094 <create_name+0x294>
					b |= 2;
 800d086:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d08a:	f043 0302 	orr.w	r3, r3, #2
 800d08e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d092:	e00e      	b.n	800d0b2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d094:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d096:	2b60      	cmp	r3, #96	; 0x60
 800d098:	d90b      	bls.n	800d0b2 <create_name+0x2b2>
 800d09a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d09c:	2b7a      	cmp	r3, #122	; 0x7a
 800d09e:	d808      	bhi.n	800d0b2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d0a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d0a4:	f043 0301 	orr.w	r3, r3, #1
 800d0a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d0ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0ae:	3b20      	subs	r3, #32
 800d0b0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d0b2:	6a3b      	ldr	r3, [r7, #32]
 800d0b4:	1c5a      	adds	r2, r3, #1
 800d0b6:	623a      	str	r2, [r7, #32]
 800d0b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d0ba:	b2d1      	uxtb	r1, r2
 800d0bc:	687a      	ldr	r2, [r7, #4]
 800d0be:	4413      	add	r3, r2
 800d0c0:	460a      	mov	r2, r1
 800d0c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d0c6:	e763      	b.n	800cf90 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d0c8:	bf00      	nop
 800d0ca:	e000      	b.n	800d0ce <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800d0cc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d0d4:	2be5      	cmp	r3, #229	; 0xe5
 800d0d6:	d103      	bne.n	800d0e0 <create_name+0x2e0>
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2205      	movs	r2, #5
 800d0dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800d0e0:	69fb      	ldr	r3, [r7, #28]
 800d0e2:	2b08      	cmp	r3, #8
 800d0e4:	d104      	bne.n	800d0f0 <create_name+0x2f0>
 800d0e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d0ea:	009b      	lsls	r3, r3, #2
 800d0ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d0f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d0f4:	f003 030c 	and.w	r3, r3, #12
 800d0f8:	2b0c      	cmp	r3, #12
 800d0fa:	d005      	beq.n	800d108 <create_name+0x308>
 800d0fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d100:	f003 0303 	and.w	r3, r3, #3
 800d104:	2b03      	cmp	r3, #3
 800d106:	d105      	bne.n	800d114 <create_name+0x314>
 800d108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d10c:	f043 0302 	orr.w	r3, r3, #2
 800d110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d114:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d118:	f003 0302 	and.w	r3, r3, #2
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d117      	bne.n	800d150 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d120:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d124:	f003 0303 	and.w	r3, r3, #3
 800d128:	2b01      	cmp	r3, #1
 800d12a:	d105      	bne.n	800d138 <create_name+0x338>
 800d12c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d130:	f043 0310 	orr.w	r3, r3, #16
 800d134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d138:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d13c:	f003 030c 	and.w	r3, r3, #12
 800d140:	2b04      	cmp	r3, #4
 800d142:	d105      	bne.n	800d150 <create_name+0x350>
 800d144:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d148:	f043 0308 	orr.w	r3, r3, #8
 800d14c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d156:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800d15a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3728      	adds	r7, #40	; 0x28
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}
 800d164:	08016068 	.word	0x08016068
 800d168:	080160e8 	.word	0x080160e8
 800d16c:	08016074 	.word	0x08016074

0800d170 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b086      	sub	sp, #24
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d184:	e002      	b.n	800d18c <follow_path+0x1c>
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	3301      	adds	r3, #1
 800d18a:	603b      	str	r3, [r7, #0]
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	781b      	ldrb	r3, [r3, #0]
 800d190:	2b2f      	cmp	r3, #47	; 0x2f
 800d192:	d0f8      	beq.n	800d186 <follow_path+0x16>
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	781b      	ldrb	r3, [r3, #0]
 800d198:	2b5c      	cmp	r3, #92	; 0x5c
 800d19a:	d0f4      	beq.n	800d186 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d19c:	693b      	ldr	r3, [r7, #16]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	781b      	ldrb	r3, [r3, #0]
 800d1a6:	2b1f      	cmp	r3, #31
 800d1a8:	d80a      	bhi.n	800d1c0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2280      	movs	r2, #128	; 0x80
 800d1ae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d1b2:	2100      	movs	r1, #0
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f7ff f8fb 	bl	800c3b0 <dir_sdi>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	75fb      	strb	r3, [r7, #23]
 800d1be:	e048      	b.n	800d252 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d1c0:	463b      	mov	r3, r7
 800d1c2:	4619      	mov	r1, r3
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f7ff fe1b 	bl	800ce00 <create_name>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d1ce:	7dfb      	ldrb	r3, [r7, #23]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d139      	bne.n	800d248 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	f7ff fc5a 	bl	800ca8e <dir_find>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d1e4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d1e6:	7dfb      	ldrb	r3, [r7, #23]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d00a      	beq.n	800d202 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d1ec:	7dfb      	ldrb	r3, [r7, #23]
 800d1ee:	2b04      	cmp	r3, #4
 800d1f0:	d12c      	bne.n	800d24c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d1f2:	7afb      	ldrb	r3, [r7, #11]
 800d1f4:	f003 0304 	and.w	r3, r3, #4
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d127      	bne.n	800d24c <follow_path+0xdc>
 800d1fc:	2305      	movs	r3, #5
 800d1fe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d200:	e024      	b.n	800d24c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d202:	7afb      	ldrb	r3, [r7, #11]
 800d204:	f003 0304 	and.w	r3, r3, #4
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d121      	bne.n	800d250 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	799b      	ldrb	r3, [r3, #6]
 800d210:	f003 0310 	and.w	r3, r3, #16
 800d214:	2b00      	cmp	r3, #0
 800d216:	d102      	bne.n	800d21e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d218:	2305      	movs	r3, #5
 800d21a:	75fb      	strb	r3, [r7, #23]
 800d21c:	e019      	b.n	800d252 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	695b      	ldr	r3, [r3, #20]
 800d228:	68fa      	ldr	r2, [r7, #12]
 800d22a:	8992      	ldrh	r2, [r2, #12]
 800d22c:	fbb3 f0f2 	udiv	r0, r3, r2
 800d230:	fb02 f200 	mul.w	r2, r2, r0
 800d234:	1a9b      	subs	r3, r3, r2
 800d236:	440b      	add	r3, r1
 800d238:	4619      	mov	r1, r3
 800d23a:	68f8      	ldr	r0, [r7, #12]
 800d23c:	f7ff fa5e 	bl	800c6fc <ld_clust>
 800d240:	4602      	mov	r2, r0
 800d242:	693b      	ldr	r3, [r7, #16]
 800d244:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d246:	e7bb      	b.n	800d1c0 <follow_path+0x50>
			if (res != FR_OK) break;
 800d248:	bf00      	nop
 800d24a:	e002      	b.n	800d252 <follow_path+0xe2>
				break;
 800d24c:	bf00      	nop
 800d24e:	e000      	b.n	800d252 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d250:	bf00      	nop
			}
		}
	}

	return res;
 800d252:	7dfb      	ldrb	r3, [r7, #23]
}
 800d254:	4618      	mov	r0, r3
 800d256:	3718      	adds	r7, #24
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}

0800d25c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d25c:	b480      	push	{r7}
 800d25e:	b087      	sub	sp, #28
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d264:	f04f 33ff 	mov.w	r3, #4294967295
 800d268:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d031      	beq.n	800d2d6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	617b      	str	r3, [r7, #20]
 800d278:	e002      	b.n	800d280 <get_ldnumber+0x24>
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	3301      	adds	r3, #1
 800d27e:	617b      	str	r3, [r7, #20]
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	781b      	ldrb	r3, [r3, #0]
 800d284:	2b1f      	cmp	r3, #31
 800d286:	d903      	bls.n	800d290 <get_ldnumber+0x34>
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	781b      	ldrb	r3, [r3, #0]
 800d28c:	2b3a      	cmp	r3, #58	; 0x3a
 800d28e:	d1f4      	bne.n	800d27a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	781b      	ldrb	r3, [r3, #0]
 800d294:	2b3a      	cmp	r3, #58	; 0x3a
 800d296:	d11c      	bne.n	800d2d2 <get_ldnumber+0x76>
			tp = *path;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	1c5a      	adds	r2, r3, #1
 800d2a2:	60fa      	str	r2, [r7, #12]
 800d2a4:	781b      	ldrb	r3, [r3, #0]
 800d2a6:	3b30      	subs	r3, #48	; 0x30
 800d2a8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	2b09      	cmp	r3, #9
 800d2ae:	d80e      	bhi.n	800d2ce <get_ldnumber+0x72>
 800d2b0:	68fa      	ldr	r2, [r7, #12]
 800d2b2:	697b      	ldr	r3, [r7, #20]
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d10a      	bne.n	800d2ce <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d2b8:	68bb      	ldr	r3, [r7, #8]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d107      	bne.n	800d2ce <get_ldnumber+0x72>
					vol = (int)i;
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	617b      	str	r3, [r7, #20]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	697a      	ldr	r2, [r7, #20]
 800d2cc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d2ce:	693b      	ldr	r3, [r7, #16]
 800d2d0:	e002      	b.n	800d2d8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d2d6:	693b      	ldr	r3, [r7, #16]
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	371c      	adds	r7, #28
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e2:	4770      	bx	lr

0800d2e4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b082      	sub	sp, #8
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
 800d2ec:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	70da      	strb	r2, [r3, #3]
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f04f 32ff 	mov.w	r2, #4294967295
 800d2fa:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d2fc:	6839      	ldr	r1, [r7, #0]
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f7fe fc74 	bl	800bbec <move_window>
 800d304:	4603      	mov	r3, r0
 800d306:	2b00      	cmp	r3, #0
 800d308:	d001      	beq.n	800d30e <check_fs+0x2a>
 800d30a:	2304      	movs	r3, #4
 800d30c:	e038      	b.n	800d380 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	3338      	adds	r3, #56	; 0x38
 800d312:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d316:	4618      	mov	r0, r3
 800d318:	f7fe f9b8 	bl	800b68c <ld_word>
 800d31c:	4603      	mov	r3, r0
 800d31e:	461a      	mov	r2, r3
 800d320:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d324:	429a      	cmp	r2, r3
 800d326:	d001      	beq.n	800d32c <check_fs+0x48>
 800d328:	2303      	movs	r3, #3
 800d32a:	e029      	b.n	800d380 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d332:	2be9      	cmp	r3, #233	; 0xe9
 800d334:	d009      	beq.n	800d34a <check_fs+0x66>
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d33c:	2beb      	cmp	r3, #235	; 0xeb
 800d33e:	d11e      	bne.n	800d37e <check_fs+0x9a>
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d346:	2b90      	cmp	r3, #144	; 0x90
 800d348:	d119      	bne.n	800d37e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	3338      	adds	r3, #56	; 0x38
 800d34e:	3336      	adds	r3, #54	; 0x36
 800d350:	4618      	mov	r0, r3
 800d352:	f7fe f9b3 	bl	800b6bc <ld_dword>
 800d356:	4603      	mov	r3, r0
 800d358:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d35c:	4a0a      	ldr	r2, [pc, #40]	; (800d388 <check_fs+0xa4>)
 800d35e:	4293      	cmp	r3, r2
 800d360:	d101      	bne.n	800d366 <check_fs+0x82>
 800d362:	2300      	movs	r3, #0
 800d364:	e00c      	b.n	800d380 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	3338      	adds	r3, #56	; 0x38
 800d36a:	3352      	adds	r3, #82	; 0x52
 800d36c:	4618      	mov	r0, r3
 800d36e:	f7fe f9a5 	bl	800b6bc <ld_dword>
 800d372:	4603      	mov	r3, r0
 800d374:	4a05      	ldr	r2, [pc, #20]	; (800d38c <check_fs+0xa8>)
 800d376:	4293      	cmp	r3, r2
 800d378:	d101      	bne.n	800d37e <check_fs+0x9a>
 800d37a:	2300      	movs	r3, #0
 800d37c:	e000      	b.n	800d380 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d37e:	2302      	movs	r3, #2
}
 800d380:	4618      	mov	r0, r3
 800d382:	3708      	adds	r7, #8
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}
 800d388:	00544146 	.word	0x00544146
 800d38c:	33544146 	.word	0x33544146

0800d390 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b096      	sub	sp, #88	; 0x58
 800d394:	af00      	add	r7, sp, #0
 800d396:	60f8      	str	r0, [r7, #12]
 800d398:	60b9      	str	r1, [r7, #8]
 800d39a:	4613      	mov	r3, r2
 800d39c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d39e:	68bb      	ldr	r3, [r7, #8]
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d3a4:	68f8      	ldr	r0, [r7, #12]
 800d3a6:	f7ff ff59 	bl	800d25c <get_ldnumber>
 800d3aa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d3ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	da01      	bge.n	800d3b6 <find_volume+0x26>
 800d3b2:	230b      	movs	r3, #11
 800d3b4:	e268      	b.n	800d888 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d3b6:	4ab0      	ldr	r2, [pc, #704]	; (800d678 <find_volume+0x2e8>)
 800d3b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3be:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d101      	bne.n	800d3ca <find_volume+0x3a>
 800d3c6:	230c      	movs	r3, #12
 800d3c8:	e25e      	b.n	800d888 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d3ca:	68bb      	ldr	r3, [r7, #8]
 800d3cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d3ce:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d3d0:	79fb      	ldrb	r3, [r7, #7]
 800d3d2:	f023 0301 	bic.w	r3, r3, #1
 800d3d6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3da:	781b      	ldrb	r3, [r3, #0]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d01a      	beq.n	800d416 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e2:	785b      	ldrb	r3, [r3, #1]
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f7fe f8b3 	bl	800b550 <disk_status>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d3f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d3f4:	f003 0301 	and.w	r3, r3, #1
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d10c      	bne.n	800d416 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d3fc:	79fb      	ldrb	r3, [r7, #7]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d007      	beq.n	800d412 <find_volume+0x82>
 800d402:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d406:	f003 0304 	and.w	r3, r3, #4
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d001      	beq.n	800d412 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d40e:	230a      	movs	r3, #10
 800d410:	e23a      	b.n	800d888 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800d412:	2300      	movs	r3, #0
 800d414:	e238      	b.n	800d888 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d418:	2200      	movs	r2, #0
 800d41a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d41c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d41e:	b2da      	uxtb	r2, r3
 800d420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d422:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d426:	785b      	ldrb	r3, [r3, #1]
 800d428:	4618      	mov	r0, r3
 800d42a:	f7fe f8ab 	bl	800b584 <disk_initialize>
 800d42e:	4603      	mov	r3, r0
 800d430:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d434:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d438:	f003 0301 	and.w	r3, r3, #1
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d001      	beq.n	800d444 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d440:	2303      	movs	r3, #3
 800d442:	e221      	b.n	800d888 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d444:	79fb      	ldrb	r3, [r7, #7]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d007      	beq.n	800d45a <find_volume+0xca>
 800d44a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d44e:	f003 0304 	and.w	r3, r3, #4
 800d452:	2b00      	cmp	r3, #0
 800d454:	d001      	beq.n	800d45a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d456:	230a      	movs	r3, #10
 800d458:	e216      	b.n	800d888 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800d45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d45c:	7858      	ldrb	r0, [r3, #1]
 800d45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d460:	330c      	adds	r3, #12
 800d462:	461a      	mov	r2, r3
 800d464:	2102      	movs	r1, #2
 800d466:	f7fe f8f3 	bl	800b650 <disk_ioctl>
 800d46a:	4603      	mov	r3, r0
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d001      	beq.n	800d474 <find_volume+0xe4>
 800d470:	2301      	movs	r3, #1
 800d472:	e209      	b.n	800d888 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800d474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d476:	899b      	ldrh	r3, [r3, #12]
 800d478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d47c:	d80d      	bhi.n	800d49a <find_volume+0x10a>
 800d47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d480:	899b      	ldrh	r3, [r3, #12]
 800d482:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d486:	d308      	bcc.n	800d49a <find_volume+0x10a>
 800d488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d48a:	899b      	ldrh	r3, [r3, #12]
 800d48c:	461a      	mov	r2, r3
 800d48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d490:	899b      	ldrh	r3, [r3, #12]
 800d492:	3b01      	subs	r3, #1
 800d494:	4013      	ands	r3, r2
 800d496:	2b00      	cmp	r3, #0
 800d498:	d001      	beq.n	800d49e <find_volume+0x10e>
 800d49a:	2301      	movs	r3, #1
 800d49c:	e1f4      	b.n	800d888 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d4a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d4a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d4a6:	f7ff ff1d 	bl	800d2e4 <check_fs>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d4b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d4b4:	2b02      	cmp	r3, #2
 800d4b6:	d14b      	bne.n	800d550 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	643b      	str	r3, [r7, #64]	; 0x40
 800d4bc:	e01f      	b.n	800d4fe <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4c0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d4c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4c6:	011b      	lsls	r3, r3, #4
 800d4c8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d4cc:	4413      	add	r3, r2
 800d4ce:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d2:	3304      	adds	r3, #4
 800d4d4:	781b      	ldrb	r3, [r3, #0]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d006      	beq.n	800d4e8 <find_volume+0x158>
 800d4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4dc:	3308      	adds	r3, #8
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f7fe f8ec 	bl	800b6bc <ld_dword>
 800d4e4:	4602      	mov	r2, r0
 800d4e6:	e000      	b.n	800d4ea <find_volume+0x15a>
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4ec:	009b      	lsls	r3, r3, #2
 800d4ee:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d4f2:	440b      	add	r3, r1
 800d4f4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d4f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4fa:	3301      	adds	r3, #1
 800d4fc:	643b      	str	r3, [r7, #64]	; 0x40
 800d4fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d500:	2b03      	cmp	r3, #3
 800d502:	d9dc      	bls.n	800d4be <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d504:	2300      	movs	r3, #0
 800d506:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d002      	beq.n	800d514 <find_volume+0x184>
 800d50e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d510:	3b01      	subs	r3, #1
 800d512:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d516:	009b      	lsls	r3, r3, #2
 800d518:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d51c:	4413      	add	r3, r2
 800d51e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d522:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d526:	2b00      	cmp	r3, #0
 800d528:	d005      	beq.n	800d536 <find_volume+0x1a6>
 800d52a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d52c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d52e:	f7ff fed9 	bl	800d2e4 <check_fs>
 800d532:	4603      	mov	r3, r0
 800d534:	e000      	b.n	800d538 <find_volume+0x1a8>
 800d536:	2303      	movs	r3, #3
 800d538:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d53c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d540:	2b01      	cmp	r3, #1
 800d542:	d905      	bls.n	800d550 <find_volume+0x1c0>
 800d544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d546:	3301      	adds	r3, #1
 800d548:	643b      	str	r3, [r7, #64]	; 0x40
 800d54a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d54c:	2b03      	cmp	r3, #3
 800d54e:	d9e1      	bls.n	800d514 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d550:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d554:	2b04      	cmp	r3, #4
 800d556:	d101      	bne.n	800d55c <find_volume+0x1cc>
 800d558:	2301      	movs	r3, #1
 800d55a:	e195      	b.n	800d888 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d55c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d560:	2b01      	cmp	r3, #1
 800d562:	d901      	bls.n	800d568 <find_volume+0x1d8>
 800d564:	230d      	movs	r3, #13
 800d566:	e18f      	b.n	800d888 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d56a:	3338      	adds	r3, #56	; 0x38
 800d56c:	330b      	adds	r3, #11
 800d56e:	4618      	mov	r0, r3
 800d570:	f7fe f88c 	bl	800b68c <ld_word>
 800d574:	4603      	mov	r3, r0
 800d576:	461a      	mov	r2, r3
 800d578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d57a:	899b      	ldrh	r3, [r3, #12]
 800d57c:	429a      	cmp	r2, r3
 800d57e:	d001      	beq.n	800d584 <find_volume+0x1f4>
 800d580:	230d      	movs	r3, #13
 800d582:	e181      	b.n	800d888 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d586:	3338      	adds	r3, #56	; 0x38
 800d588:	3316      	adds	r3, #22
 800d58a:	4618      	mov	r0, r3
 800d58c:	f7fe f87e 	bl	800b68c <ld_word>
 800d590:	4603      	mov	r3, r0
 800d592:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d596:	2b00      	cmp	r3, #0
 800d598:	d106      	bne.n	800d5a8 <find_volume+0x218>
 800d59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d59c:	3338      	adds	r3, #56	; 0x38
 800d59e:	3324      	adds	r3, #36	; 0x24
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	f7fe f88b 	bl	800b6bc <ld_dword>
 800d5a6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d5ac:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5b0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800d5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5b6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ba:	789b      	ldrb	r3, [r3, #2]
 800d5bc:	2b01      	cmp	r3, #1
 800d5be:	d005      	beq.n	800d5cc <find_volume+0x23c>
 800d5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5c2:	789b      	ldrb	r3, [r3, #2]
 800d5c4:	2b02      	cmp	r3, #2
 800d5c6:	d001      	beq.n	800d5cc <find_volume+0x23c>
 800d5c8:	230d      	movs	r3, #13
 800d5ca:	e15d      	b.n	800d888 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ce:	789b      	ldrb	r3, [r3, #2]
 800d5d0:	461a      	mov	r2, r3
 800d5d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5d4:	fb02 f303 	mul.w	r3, r2, r3
 800d5d8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d5e0:	b29a      	uxth	r2, r3
 800d5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5e4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5e8:	895b      	ldrh	r3, [r3, #10]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d008      	beq.n	800d600 <find_volume+0x270>
 800d5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5f0:	895b      	ldrh	r3, [r3, #10]
 800d5f2:	461a      	mov	r2, r3
 800d5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5f6:	895b      	ldrh	r3, [r3, #10]
 800d5f8:	3b01      	subs	r3, #1
 800d5fa:	4013      	ands	r3, r2
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d001      	beq.n	800d604 <find_volume+0x274>
 800d600:	230d      	movs	r3, #13
 800d602:	e141      	b.n	800d888 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d606:	3338      	adds	r3, #56	; 0x38
 800d608:	3311      	adds	r3, #17
 800d60a:	4618      	mov	r0, r3
 800d60c:	f7fe f83e 	bl	800b68c <ld_word>
 800d610:	4603      	mov	r3, r0
 800d612:	461a      	mov	r2, r3
 800d614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d616:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d61a:	891b      	ldrh	r3, [r3, #8]
 800d61c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d61e:	8992      	ldrh	r2, [r2, #12]
 800d620:	0952      	lsrs	r2, r2, #5
 800d622:	b292      	uxth	r2, r2
 800d624:	fbb3 f1f2 	udiv	r1, r3, r2
 800d628:	fb02 f201 	mul.w	r2, r2, r1
 800d62c:	1a9b      	subs	r3, r3, r2
 800d62e:	b29b      	uxth	r3, r3
 800d630:	2b00      	cmp	r3, #0
 800d632:	d001      	beq.n	800d638 <find_volume+0x2a8>
 800d634:	230d      	movs	r3, #13
 800d636:	e127      	b.n	800d888 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d63a:	3338      	adds	r3, #56	; 0x38
 800d63c:	3313      	adds	r3, #19
 800d63e:	4618      	mov	r0, r3
 800d640:	f7fe f824 	bl	800b68c <ld_word>
 800d644:	4603      	mov	r3, r0
 800d646:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d106      	bne.n	800d65c <find_volume+0x2cc>
 800d64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d650:	3338      	adds	r3, #56	; 0x38
 800d652:	3320      	adds	r3, #32
 800d654:	4618      	mov	r0, r3
 800d656:	f7fe f831 	bl	800b6bc <ld_dword>
 800d65a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d65e:	3338      	adds	r3, #56	; 0x38
 800d660:	330e      	adds	r3, #14
 800d662:	4618      	mov	r0, r3
 800d664:	f7fe f812 	bl	800b68c <ld_word>
 800d668:	4603      	mov	r3, r0
 800d66a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d66c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d104      	bne.n	800d67c <find_volume+0x2ec>
 800d672:	230d      	movs	r3, #13
 800d674:	e108      	b.n	800d888 <find_volume+0x4f8>
 800d676:	bf00      	nop
 800d678:	200022d4 	.word	0x200022d4

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d67c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d67e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d680:	4413      	add	r3, r2
 800d682:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d684:	8911      	ldrh	r1, [r2, #8]
 800d686:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d688:	8992      	ldrh	r2, [r2, #12]
 800d68a:	0952      	lsrs	r2, r2, #5
 800d68c:	b292      	uxth	r2, r2
 800d68e:	fbb1 f2f2 	udiv	r2, r1, r2
 800d692:	b292      	uxth	r2, r2
 800d694:	4413      	add	r3, r2
 800d696:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d698:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d69c:	429a      	cmp	r2, r3
 800d69e:	d201      	bcs.n	800d6a4 <find_volume+0x314>
 800d6a0:	230d      	movs	r3, #13
 800d6a2:	e0f1      	b.n	800d888 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d6a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a8:	1ad3      	subs	r3, r2, r3
 800d6aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d6ac:	8952      	ldrh	r2, [r2, #10]
 800d6ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800d6b2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d101      	bne.n	800d6be <find_volume+0x32e>
 800d6ba:	230d      	movs	r3, #13
 800d6bc:	e0e4      	b.n	800d888 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800d6be:	2303      	movs	r3, #3
 800d6c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d6ca:	4293      	cmp	r3, r2
 800d6cc:	d802      	bhi.n	800d6d4 <find_volume+0x344>
 800d6ce:	2302      	movs	r3, #2
 800d6d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d6:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d802      	bhi.n	800d6e4 <find_volume+0x354>
 800d6de:	2301      	movs	r3, #1
 800d6e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e6:	1c9a      	adds	r2, r3, #2
 800d6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ea:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800d6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d6f0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d6f2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d6f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6f6:	441a      	add	r2, r3
 800d6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6fa:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800d6fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d700:	441a      	add	r2, r3
 800d702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d704:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800d706:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d70a:	2b03      	cmp	r3, #3
 800d70c:	d11e      	bne.n	800d74c <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d710:	3338      	adds	r3, #56	; 0x38
 800d712:	332a      	adds	r3, #42	; 0x2a
 800d714:	4618      	mov	r0, r3
 800d716:	f7fd ffb9 	bl	800b68c <ld_word>
 800d71a:	4603      	mov	r3, r0
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d001      	beq.n	800d724 <find_volume+0x394>
 800d720:	230d      	movs	r3, #13
 800d722:	e0b1      	b.n	800d888 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d726:	891b      	ldrh	r3, [r3, #8]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d001      	beq.n	800d730 <find_volume+0x3a0>
 800d72c:	230d      	movs	r3, #13
 800d72e:	e0ab      	b.n	800d888 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d732:	3338      	adds	r3, #56	; 0x38
 800d734:	332c      	adds	r3, #44	; 0x2c
 800d736:	4618      	mov	r0, r3
 800d738:	f7fd ffc0 	bl	800b6bc <ld_dword>
 800d73c:	4602      	mov	r2, r0
 800d73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d740:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d744:	69db      	ldr	r3, [r3, #28]
 800d746:	009b      	lsls	r3, r3, #2
 800d748:	647b      	str	r3, [r7, #68]	; 0x44
 800d74a:	e01f      	b.n	800d78c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d74e:	891b      	ldrh	r3, [r3, #8]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d101      	bne.n	800d758 <find_volume+0x3c8>
 800d754:	230d      	movs	r3, #13
 800d756:	e097      	b.n	800d888 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d75a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d75c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d75e:	441a      	add	r2, r3
 800d760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d762:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d764:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d768:	2b02      	cmp	r3, #2
 800d76a:	d103      	bne.n	800d774 <find_volume+0x3e4>
 800d76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d76e:	69db      	ldr	r3, [r3, #28]
 800d770:	005b      	lsls	r3, r3, #1
 800d772:	e00a      	b.n	800d78a <find_volume+0x3fa>
 800d774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d776:	69da      	ldr	r2, [r3, #28]
 800d778:	4613      	mov	r3, r2
 800d77a:	005b      	lsls	r3, r3, #1
 800d77c:	4413      	add	r3, r2
 800d77e:	085a      	lsrs	r2, r3, #1
 800d780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d782:	69db      	ldr	r3, [r3, #28]
 800d784:	f003 0301 	and.w	r3, r3, #1
 800d788:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d78a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d78e:	6a1a      	ldr	r2, [r3, #32]
 800d790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d792:	899b      	ldrh	r3, [r3, #12]
 800d794:	4619      	mov	r1, r3
 800d796:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d798:	440b      	add	r3, r1
 800d79a:	3b01      	subs	r3, #1
 800d79c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d79e:	8989      	ldrh	r1, [r1, #12]
 800d7a0:	fbb3 f3f1 	udiv	r3, r3, r1
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d201      	bcs.n	800d7ac <find_volume+0x41c>
 800d7a8:	230d      	movs	r3, #13
 800d7aa:	e06d      	b.n	800d888 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d7b2:	619a      	str	r2, [r3, #24]
 800d7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b6:	699a      	ldr	r2, [r3, #24]
 800d7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ba:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800d7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7be:	2280      	movs	r2, #128	; 0x80
 800d7c0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d7c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d7c6:	2b03      	cmp	r3, #3
 800d7c8:	d149      	bne.n	800d85e <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7cc:	3338      	adds	r3, #56	; 0x38
 800d7ce:	3330      	adds	r3, #48	; 0x30
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f7fd ff5b 	bl	800b68c <ld_word>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	2b01      	cmp	r3, #1
 800d7da:	d140      	bne.n	800d85e <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d7dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7de:	3301      	adds	r3, #1
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d7e4:	f7fe fa02 	bl	800bbec <move_window>
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d137      	bne.n	800d85e <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800d7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7f6:	3338      	adds	r3, #56	; 0x38
 800d7f8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f7fd ff45 	bl	800b68c <ld_word>
 800d802:	4603      	mov	r3, r0
 800d804:	461a      	mov	r2, r3
 800d806:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d127      	bne.n	800d85e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d810:	3338      	adds	r3, #56	; 0x38
 800d812:	4618      	mov	r0, r3
 800d814:	f7fd ff52 	bl	800b6bc <ld_dword>
 800d818:	4603      	mov	r3, r0
 800d81a:	4a1d      	ldr	r2, [pc, #116]	; (800d890 <find_volume+0x500>)
 800d81c:	4293      	cmp	r3, r2
 800d81e:	d11e      	bne.n	800d85e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d822:	3338      	adds	r3, #56	; 0x38
 800d824:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d828:	4618      	mov	r0, r3
 800d82a:	f7fd ff47 	bl	800b6bc <ld_dword>
 800d82e:	4603      	mov	r3, r0
 800d830:	4a18      	ldr	r2, [pc, #96]	; (800d894 <find_volume+0x504>)
 800d832:	4293      	cmp	r3, r2
 800d834:	d113      	bne.n	800d85e <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d838:	3338      	adds	r3, #56	; 0x38
 800d83a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d83e:	4618      	mov	r0, r3
 800d840:	f7fd ff3c 	bl	800b6bc <ld_dword>
 800d844:	4602      	mov	r2, r0
 800d846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d848:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d84c:	3338      	adds	r3, #56	; 0x38
 800d84e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d852:	4618      	mov	r0, r3
 800d854:	f7fd ff32 	bl	800b6bc <ld_dword>
 800d858:	4602      	mov	r2, r0
 800d85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d85c:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d860:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d864:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d866:	4b0c      	ldr	r3, [pc, #48]	; (800d898 <find_volume+0x508>)
 800d868:	881b      	ldrh	r3, [r3, #0]
 800d86a:	3301      	adds	r3, #1
 800d86c:	b29a      	uxth	r2, r3
 800d86e:	4b0a      	ldr	r3, [pc, #40]	; (800d898 <find_volume+0x508>)
 800d870:	801a      	strh	r2, [r3, #0]
 800d872:	4b09      	ldr	r3, [pc, #36]	; (800d898 <find_volume+0x508>)
 800d874:	881a      	ldrh	r2, [r3, #0]
 800d876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d878:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800d87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d87c:	4a07      	ldr	r2, [pc, #28]	; (800d89c <find_volume+0x50c>)
 800d87e:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d880:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d882:	f7fe f94b 	bl	800bb1c <clear_lock>
#endif
	return FR_OK;
 800d886:	2300      	movs	r3, #0
}
 800d888:	4618      	mov	r0, r3
 800d88a:	3758      	adds	r7, #88	; 0x58
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}
 800d890:	41615252 	.word	0x41615252
 800d894:	61417272 	.word	0x61417272
 800d898:	200022d8 	.word	0x200022d8
 800d89c:	200022fc 	.word	0x200022fc

0800d8a0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b084      	sub	sp, #16
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d8aa:	2309      	movs	r3, #9
 800d8ac:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d01c      	beq.n	800d8ee <validate+0x4e>
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d018      	beq.n	800d8ee <validate+0x4e>
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	781b      	ldrb	r3, [r3, #0]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d013      	beq.n	800d8ee <validate+0x4e>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	889a      	ldrh	r2, [r3, #4]
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	88db      	ldrh	r3, [r3, #6]
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d10c      	bne.n	800d8ee <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	785b      	ldrb	r3, [r3, #1]
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f7fd fe38 	bl	800b550 <disk_status>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	f003 0301 	and.w	r3, r3, #1
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d101      	bne.n	800d8ee <validate+0x4e>
			res = FR_OK;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d8ee:	7bfb      	ldrb	r3, [r7, #15]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d102      	bne.n	800d8fa <validate+0x5a>
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	e000      	b.n	800d8fc <validate+0x5c>
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	683a      	ldr	r2, [r7, #0]
 800d8fe:	6013      	str	r3, [r2, #0]
	return res;
 800d900:	7bfb      	ldrb	r3, [r7, #15]
}
 800d902:	4618      	mov	r0, r3
 800d904:	3710      	adds	r7, #16
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}
	...

0800d90c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b088      	sub	sp, #32
 800d910:	af00      	add	r7, sp, #0
 800d912:	60f8      	str	r0, [r7, #12]
 800d914:	60b9      	str	r1, [r7, #8]
 800d916:	4613      	mov	r3, r2
 800d918:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d91e:	f107 0310 	add.w	r3, r7, #16
 800d922:	4618      	mov	r0, r3
 800d924:	f7ff fc9a 	bl	800d25c <get_ldnumber>
 800d928:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d92a:	69fb      	ldr	r3, [r7, #28]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	da01      	bge.n	800d934 <f_mount+0x28>
 800d930:	230b      	movs	r3, #11
 800d932:	e02b      	b.n	800d98c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d934:	4a17      	ldr	r2, [pc, #92]	; (800d994 <f_mount+0x88>)
 800d936:	69fb      	ldr	r3, [r7, #28]
 800d938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d93c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d93e:	69bb      	ldr	r3, [r7, #24]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d005      	beq.n	800d950 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d944:	69b8      	ldr	r0, [r7, #24]
 800d946:	f7fe f8e9 	bl	800bb1c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d94a:	69bb      	ldr	r3, [r7, #24]
 800d94c:	2200      	movs	r2, #0
 800d94e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d002      	beq.n	800d95c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	2200      	movs	r2, #0
 800d95a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d95c:	68fa      	ldr	r2, [r7, #12]
 800d95e:	490d      	ldr	r1, [pc, #52]	; (800d994 <f_mount+0x88>)
 800d960:	69fb      	ldr	r3, [r7, #28]
 800d962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d002      	beq.n	800d972 <f_mount+0x66>
 800d96c:	79fb      	ldrb	r3, [r7, #7]
 800d96e:	2b01      	cmp	r3, #1
 800d970:	d001      	beq.n	800d976 <f_mount+0x6a>
 800d972:	2300      	movs	r3, #0
 800d974:	e00a      	b.n	800d98c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d976:	f107 010c 	add.w	r1, r7, #12
 800d97a:	f107 0308 	add.w	r3, r7, #8
 800d97e:	2200      	movs	r2, #0
 800d980:	4618      	mov	r0, r3
 800d982:	f7ff fd05 	bl	800d390 <find_volume>
 800d986:	4603      	mov	r3, r0
 800d988:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d98a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	3720      	adds	r7, #32
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}
 800d994:	200022d4 	.word	0x200022d4

0800d998 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b09a      	sub	sp, #104	; 0x68
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	60f8      	str	r0, [r7, #12]
 800d9a0:	60b9      	str	r1, [r7, #8]
 800d9a2:	4613      	mov	r3, r2
 800d9a4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d101      	bne.n	800d9b0 <f_open+0x18>
 800d9ac:	2309      	movs	r3, #9
 800d9ae:	e1bb      	b.n	800dd28 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d9b0:	79fb      	ldrb	r3, [r7, #7]
 800d9b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d9b6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d9b8:	79fa      	ldrb	r2, [r7, #7]
 800d9ba:	f107 0114 	add.w	r1, r7, #20
 800d9be:	f107 0308 	add.w	r3, r7, #8
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f7ff fce4 	bl	800d390 <find_volume>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800d9ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	f040 819f 	bne.w	800dd16 <f_open+0x37e>
		dj.obj.fs = fs;
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d9dc:	68ba      	ldr	r2, [r7, #8]
 800d9de:	f107 0318 	add.w	r3, r7, #24
 800d9e2:	4611      	mov	r1, r2
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	f7ff fbc3 	bl	800d170 <follow_path>
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d9f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d11a      	bne.n	800da2e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d9f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d9fc:	b25b      	sxtb	r3, r3
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	da03      	bge.n	800da0a <f_open+0x72>
				res = FR_INVALID_NAME;
 800da02:	2306      	movs	r3, #6
 800da04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800da08:	e011      	b.n	800da2e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800da0a:	79fb      	ldrb	r3, [r7, #7]
 800da0c:	f023 0301 	bic.w	r3, r3, #1
 800da10:	2b00      	cmp	r3, #0
 800da12:	bf14      	ite	ne
 800da14:	2301      	movne	r3, #1
 800da16:	2300      	moveq	r3, #0
 800da18:	b2db      	uxtb	r3, r3
 800da1a:	461a      	mov	r2, r3
 800da1c:	f107 0318 	add.w	r3, r7, #24
 800da20:	4611      	mov	r1, r2
 800da22:	4618      	mov	r0, r3
 800da24:	f7fd ff32 	bl	800b88c <chk_lock>
 800da28:	4603      	mov	r3, r0
 800da2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800da2e:	79fb      	ldrb	r3, [r7, #7]
 800da30:	f003 031c 	and.w	r3, r3, #28
 800da34:	2b00      	cmp	r3, #0
 800da36:	d07f      	beq.n	800db38 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800da38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d017      	beq.n	800da70 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800da40:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800da44:	2b04      	cmp	r3, #4
 800da46:	d10e      	bne.n	800da66 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800da48:	f7fd ff7c 	bl	800b944 <enq_lock>
 800da4c:	4603      	mov	r3, r0
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d006      	beq.n	800da60 <f_open+0xc8>
 800da52:	f107 0318 	add.w	r3, r7, #24
 800da56:	4618      	mov	r0, r3
 800da58:	f7ff f8da 	bl	800cc10 <dir_register>
 800da5c:	4603      	mov	r3, r0
 800da5e:	e000      	b.n	800da62 <f_open+0xca>
 800da60:	2312      	movs	r3, #18
 800da62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800da66:	79fb      	ldrb	r3, [r7, #7]
 800da68:	f043 0308 	orr.w	r3, r3, #8
 800da6c:	71fb      	strb	r3, [r7, #7]
 800da6e:	e010      	b.n	800da92 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800da70:	7fbb      	ldrb	r3, [r7, #30]
 800da72:	f003 0311 	and.w	r3, r3, #17
 800da76:	2b00      	cmp	r3, #0
 800da78:	d003      	beq.n	800da82 <f_open+0xea>
					res = FR_DENIED;
 800da7a:	2307      	movs	r3, #7
 800da7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800da80:	e007      	b.n	800da92 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800da82:	79fb      	ldrb	r3, [r7, #7]
 800da84:	f003 0304 	and.w	r3, r3, #4
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d002      	beq.n	800da92 <f_open+0xfa>
 800da8c:	2308      	movs	r3, #8
 800da8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800da92:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800da96:	2b00      	cmp	r3, #0
 800da98:	d168      	bne.n	800db6c <f_open+0x1d4>
 800da9a:	79fb      	ldrb	r3, [r7, #7]
 800da9c:	f003 0308 	and.w	r3, r3, #8
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d063      	beq.n	800db6c <f_open+0x1d4>
				dw = GET_FATTIME();
 800daa4:	f7fd fbe8 	bl	800b278 <get_fattime>
 800daa8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800daaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daac:	330e      	adds	r3, #14
 800daae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dab0:	4618      	mov	r0, r3
 800dab2:	f7fd fe41 	bl	800b738 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800dab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dab8:	3316      	adds	r3, #22
 800daba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dabc:	4618      	mov	r0, r3
 800dabe:	f7fd fe3b 	bl	800b738 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800dac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dac4:	330b      	adds	r3, #11
 800dac6:	2220      	movs	r2, #32
 800dac8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dace:	4611      	mov	r1, r2
 800dad0:	4618      	mov	r0, r3
 800dad2:	f7fe fe13 	bl	800c6fc <ld_clust>
 800dad6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dadc:	2200      	movs	r2, #0
 800dade:	4618      	mov	r0, r3
 800dae0:	f7fe fe2b 	bl	800c73a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800dae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dae6:	331c      	adds	r3, #28
 800dae8:	2100      	movs	r1, #0
 800daea:	4618      	mov	r0, r3
 800daec:	f7fd fe24 	bl	800b738 <st_dword>
					fs->wflag = 1;
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	2201      	movs	r2, #1
 800daf4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800daf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d037      	beq.n	800db6c <f_open+0x1d4>
						dw = fs->winsect;
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db00:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800db02:	f107 0318 	add.w	r3, r7, #24
 800db06:	2200      	movs	r2, #0
 800db08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7fe fb1b 	bl	800c146 <remove_chain>
 800db10:	4603      	mov	r3, r0
 800db12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800db16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d126      	bne.n	800db6c <f_open+0x1d4>
							res = move_window(fs, dw);
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800db22:	4618      	mov	r0, r3
 800db24:	f7fe f862 	bl	800bbec <move_window>
 800db28:	4603      	mov	r3, r0
 800db2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800db32:	3a01      	subs	r2, #1
 800db34:	615a      	str	r2, [r3, #20]
 800db36:	e019      	b.n	800db6c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800db38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d115      	bne.n	800db6c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800db40:	7fbb      	ldrb	r3, [r7, #30]
 800db42:	f003 0310 	and.w	r3, r3, #16
 800db46:	2b00      	cmp	r3, #0
 800db48:	d003      	beq.n	800db52 <f_open+0x1ba>
					res = FR_NO_FILE;
 800db4a:	2304      	movs	r3, #4
 800db4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800db50:	e00c      	b.n	800db6c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800db52:	79fb      	ldrb	r3, [r7, #7]
 800db54:	f003 0302 	and.w	r3, r3, #2
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d007      	beq.n	800db6c <f_open+0x1d4>
 800db5c:	7fbb      	ldrb	r3, [r7, #30]
 800db5e:	f003 0301 	and.w	r3, r3, #1
 800db62:	2b00      	cmp	r3, #0
 800db64:	d002      	beq.n	800db6c <f_open+0x1d4>
						res = FR_DENIED;
 800db66:	2307      	movs	r3, #7
 800db68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800db6c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800db70:	2b00      	cmp	r3, #0
 800db72:	d128      	bne.n	800dbc6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800db74:	79fb      	ldrb	r3, [r7, #7]
 800db76:	f003 0308 	and.w	r3, r3, #8
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d003      	beq.n	800db86 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800db7e:	79fb      	ldrb	r3, [r7, #7]
 800db80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db84:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800db86:	697b      	ldr	r3, [r7, #20]
 800db88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800db8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800db94:	79fb      	ldrb	r3, [r7, #7]
 800db96:	f023 0301 	bic.w	r3, r3, #1
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	bf14      	ite	ne
 800db9e:	2301      	movne	r3, #1
 800dba0:	2300      	moveq	r3, #0
 800dba2:	b2db      	uxtb	r3, r3
 800dba4:	461a      	mov	r2, r3
 800dba6:	f107 0318 	add.w	r3, r7, #24
 800dbaa:	4611      	mov	r1, r2
 800dbac:	4618      	mov	r0, r3
 800dbae:	f7fd feeb 	bl	800b988 <inc_lock>
 800dbb2:	4602      	mov	r2, r0
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	691b      	ldr	r3, [r3, #16]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d102      	bne.n	800dbc6 <f_open+0x22e>
 800dbc0:	2302      	movs	r3, #2
 800dbc2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800dbc6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	f040 80a3 	bne.w	800dd16 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800dbd0:	697b      	ldr	r3, [r7, #20]
 800dbd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dbd4:	4611      	mov	r1, r2
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f7fe fd90 	bl	800c6fc <ld_clust>
 800dbdc:	4602      	mov	r2, r0
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800dbe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbe4:	331c      	adds	r3, #28
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f7fd fd68 	bl	800b6bc <ld_dword>
 800dbec:	4602      	mov	r2, r0
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800dbf8:	697a      	ldr	r2, [r7, #20]
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	88da      	ldrh	r2, [r3, #6]
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	79fa      	ldrb	r2, [r7, #7]
 800dc0a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	2200      	movs	r2, #0
 800dc10:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	2200      	movs	r2, #0
 800dc16:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	3330      	adds	r3, #48	; 0x30
 800dc22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800dc26:	2100      	movs	r1, #0
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f7fd fdd2 	bl	800b7d2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800dc2e:	79fb      	ldrb	r3, [r7, #7]
 800dc30:	f003 0320 	and.w	r3, r3, #32
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d06e      	beq.n	800dd16 <f_open+0x37e>
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	68db      	ldr	r3, [r3, #12]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d06a      	beq.n	800dd16 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	68da      	ldr	r2, [r3, #12]
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	895b      	ldrh	r3, [r3, #10]
 800dc4c:	461a      	mov	r2, r3
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	899b      	ldrh	r3, [r3, #12]
 800dc52:	fb03 f302 	mul.w	r3, r3, r2
 800dc56:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	689b      	ldr	r3, [r3, #8]
 800dc5c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	68db      	ldr	r3, [r3, #12]
 800dc62:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dc64:	e016      	b.n	800dc94 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7fe f87b 	bl	800bd66 <get_fat>
 800dc70:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800dc72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc74:	2b01      	cmp	r3, #1
 800dc76:	d802      	bhi.n	800dc7e <f_open+0x2e6>
 800dc78:	2302      	movs	r3, #2
 800dc7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800dc7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc84:	d102      	bne.n	800dc8c <f_open+0x2f4>
 800dc86:	2301      	movs	r3, #1
 800dc88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dc8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dc8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc90:	1ad3      	subs	r3, r2, r3
 800dc92:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dc94:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d103      	bne.n	800dca4 <f_open+0x30c>
 800dc9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dc9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dca0:	429a      	cmp	r2, r3
 800dca2:	d8e0      	bhi.n	800dc66 <f_open+0x2ce>
				}
				fp->clust = clst;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dca8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800dcaa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d131      	bne.n	800dd16 <f_open+0x37e>
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	899b      	ldrh	r3, [r3, #12]
 800dcb6:	461a      	mov	r2, r3
 800dcb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcba:	fbb3 f1f2 	udiv	r1, r3, r2
 800dcbe:	fb02 f201 	mul.w	r2, r2, r1
 800dcc2:	1a9b      	subs	r3, r3, r2
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d026      	beq.n	800dd16 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800dcc8:	697b      	ldr	r3, [r7, #20]
 800dcca:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dccc:	4618      	mov	r0, r3
 800dcce:	f7fe f82b 	bl	800bd28 <clust2sect>
 800dcd2:	64f8      	str	r0, [r7, #76]	; 0x4c
 800dcd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d103      	bne.n	800dce2 <f_open+0x34a>
						res = FR_INT_ERR;
 800dcda:	2302      	movs	r3, #2
 800dcdc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800dce0:	e019      	b.n	800dd16 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800dce2:	697b      	ldr	r3, [r7, #20]
 800dce4:	899b      	ldrh	r3, [r3, #12]
 800dce6:	461a      	mov	r2, r3
 800dce8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcea:	fbb3 f2f2 	udiv	r2, r3, r2
 800dcee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcf0:	441a      	add	r2, r3
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	7858      	ldrb	r0, [r3, #1]
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	6a1a      	ldr	r2, [r3, #32]
 800dd04:	2301      	movs	r3, #1
 800dd06:	f7fd fc63 	bl	800b5d0 <disk_read>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d002      	beq.n	800dd16 <f_open+0x37e>
 800dd10:	2301      	movs	r3, #1
 800dd12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800dd16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d002      	beq.n	800dd24 <f_open+0x38c>
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	2200      	movs	r2, #0
 800dd22:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800dd24:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3768      	adds	r7, #104	; 0x68
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}

0800dd30 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b08c      	sub	sp, #48	; 0x30
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	60f8      	str	r0, [r7, #12]
 800dd38:	60b9      	str	r1, [r7, #8]
 800dd3a:	607a      	str	r2, [r7, #4]
 800dd3c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	2200      	movs	r2, #0
 800dd46:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	f107 0210 	add.w	r2, r7, #16
 800dd4e:	4611      	mov	r1, r2
 800dd50:	4618      	mov	r0, r3
 800dd52:	f7ff fda5 	bl	800d8a0 <validate>
 800dd56:	4603      	mov	r3, r0
 800dd58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800dd5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d107      	bne.n	800dd74 <f_write+0x44>
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	7d5b      	ldrb	r3, [r3, #21]
 800dd68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800dd6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d002      	beq.n	800dd7a <f_write+0x4a>
 800dd74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd78:	e16a      	b.n	800e050 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	7d1b      	ldrb	r3, [r3, #20]
 800dd7e:	f003 0302 	and.w	r3, r3, #2
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d101      	bne.n	800dd8a <f_write+0x5a>
 800dd86:	2307      	movs	r3, #7
 800dd88:	e162      	b.n	800e050 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	699a      	ldr	r2, [r3, #24]
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	441a      	add	r2, r3
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	699b      	ldr	r3, [r3, #24]
 800dd96:	429a      	cmp	r2, r3
 800dd98:	f080 814c 	bcs.w	800e034 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	699b      	ldr	r3, [r3, #24]
 800dda0:	43db      	mvns	r3, r3
 800dda2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800dda4:	e146      	b.n	800e034 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	699b      	ldr	r3, [r3, #24]
 800ddaa:	693a      	ldr	r2, [r7, #16]
 800ddac:	8992      	ldrh	r2, [r2, #12]
 800ddae:	fbb3 f1f2 	udiv	r1, r3, r2
 800ddb2:	fb02 f201 	mul.w	r2, r2, r1
 800ddb6:	1a9b      	subs	r3, r3, r2
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	f040 80f1 	bne.w	800dfa0 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	699b      	ldr	r3, [r3, #24]
 800ddc2:	693a      	ldr	r2, [r7, #16]
 800ddc4:	8992      	ldrh	r2, [r2, #12]
 800ddc6:	fbb3 f3f2 	udiv	r3, r3, r2
 800ddca:	693a      	ldr	r2, [r7, #16]
 800ddcc:	8952      	ldrh	r2, [r2, #10]
 800ddce:	3a01      	subs	r2, #1
 800ddd0:	4013      	ands	r3, r2
 800ddd2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ddd4:	69bb      	ldr	r3, [r7, #24]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d143      	bne.n	800de62 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	699b      	ldr	r3, [r3, #24]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d10c      	bne.n	800ddfc <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	689b      	ldr	r3, [r3, #8]
 800dde6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800dde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d11a      	bne.n	800de24 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	2100      	movs	r1, #0
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f7fe fa0c 	bl	800c210 <create_chain>
 800ddf8:	62b8      	str	r0, [r7, #40]	; 0x28
 800ddfa:	e013      	b.n	800de24 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de00:	2b00      	cmp	r3, #0
 800de02:	d007      	beq.n	800de14 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	699b      	ldr	r3, [r3, #24]
 800de08:	4619      	mov	r1, r3
 800de0a:	68f8      	ldr	r0, [r7, #12]
 800de0c:	f7fe fa98 	bl	800c340 <clmt_clust>
 800de10:	62b8      	str	r0, [r7, #40]	; 0x28
 800de12:	e007      	b.n	800de24 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800de14:	68fa      	ldr	r2, [r7, #12]
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	69db      	ldr	r3, [r3, #28]
 800de1a:	4619      	mov	r1, r3
 800de1c:	4610      	mov	r0, r2
 800de1e:	f7fe f9f7 	bl	800c210 <create_chain>
 800de22:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800de24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de26:	2b00      	cmp	r3, #0
 800de28:	f000 8109 	beq.w	800e03e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800de2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de2e:	2b01      	cmp	r3, #1
 800de30:	d104      	bne.n	800de3c <f_write+0x10c>
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	2202      	movs	r2, #2
 800de36:	755a      	strb	r2, [r3, #21]
 800de38:	2302      	movs	r3, #2
 800de3a:	e109      	b.n	800e050 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800de3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de42:	d104      	bne.n	800de4e <f_write+0x11e>
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	2201      	movs	r2, #1
 800de48:	755a      	strb	r2, [r3, #21]
 800de4a:	2301      	movs	r3, #1
 800de4c:	e100      	b.n	800e050 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de52:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	689b      	ldr	r3, [r3, #8]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d102      	bne.n	800de62 <f_write+0x132>
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de60:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	7d1b      	ldrb	r3, [r3, #20]
 800de66:	b25b      	sxtb	r3, r3
 800de68:	2b00      	cmp	r3, #0
 800de6a:	da18      	bge.n	800de9e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800de6c:	693b      	ldr	r3, [r7, #16]
 800de6e:	7858      	ldrb	r0, [r3, #1]
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	6a1a      	ldr	r2, [r3, #32]
 800de7a:	2301      	movs	r3, #1
 800de7c:	f7fd fbc8 	bl	800b610 <disk_write>
 800de80:	4603      	mov	r3, r0
 800de82:	2b00      	cmp	r3, #0
 800de84:	d004      	beq.n	800de90 <f_write+0x160>
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	2201      	movs	r2, #1
 800de8a:	755a      	strb	r2, [r3, #21]
 800de8c:	2301      	movs	r3, #1
 800de8e:	e0df      	b.n	800e050 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	7d1b      	ldrb	r3, [r3, #20]
 800de94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de98:	b2da      	uxtb	r2, r3
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800de9e:	693a      	ldr	r2, [r7, #16]
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	69db      	ldr	r3, [r3, #28]
 800dea4:	4619      	mov	r1, r3
 800dea6:	4610      	mov	r0, r2
 800dea8:	f7fd ff3e 	bl	800bd28 <clust2sect>
 800deac:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d104      	bne.n	800debe <f_write+0x18e>
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	2202      	movs	r2, #2
 800deb8:	755a      	strb	r2, [r3, #21]
 800deba:	2302      	movs	r3, #2
 800debc:	e0c8      	b.n	800e050 <f_write+0x320>
			sect += csect;
 800debe:	697a      	ldr	r2, [r7, #20]
 800dec0:	69bb      	ldr	r3, [r7, #24]
 800dec2:	4413      	add	r3, r2
 800dec4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	899b      	ldrh	r3, [r3, #12]
 800deca:	461a      	mov	r2, r3
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	fbb3 f3f2 	udiv	r3, r3, r2
 800ded2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ded4:	6a3b      	ldr	r3, [r7, #32]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d043      	beq.n	800df62 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800deda:	69ba      	ldr	r2, [r7, #24]
 800dedc:	6a3b      	ldr	r3, [r7, #32]
 800dede:	4413      	add	r3, r2
 800dee0:	693a      	ldr	r2, [r7, #16]
 800dee2:	8952      	ldrh	r2, [r2, #10]
 800dee4:	4293      	cmp	r3, r2
 800dee6:	d905      	bls.n	800def4 <f_write+0x1c4>
					cc = fs->csize - csect;
 800dee8:	693b      	ldr	r3, [r7, #16]
 800deea:	895b      	ldrh	r3, [r3, #10]
 800deec:	461a      	mov	r2, r3
 800deee:	69bb      	ldr	r3, [r7, #24]
 800def0:	1ad3      	subs	r3, r2, r3
 800def2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800def4:	693b      	ldr	r3, [r7, #16]
 800def6:	7858      	ldrb	r0, [r3, #1]
 800def8:	6a3b      	ldr	r3, [r7, #32]
 800defa:	697a      	ldr	r2, [r7, #20]
 800defc:	69f9      	ldr	r1, [r7, #28]
 800defe:	f7fd fb87 	bl	800b610 <disk_write>
 800df02:	4603      	mov	r3, r0
 800df04:	2b00      	cmp	r3, #0
 800df06:	d004      	beq.n	800df12 <f_write+0x1e2>
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	2201      	movs	r2, #1
 800df0c:	755a      	strb	r2, [r3, #21]
 800df0e:	2301      	movs	r3, #1
 800df10:	e09e      	b.n	800e050 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	6a1a      	ldr	r2, [r3, #32]
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	1ad3      	subs	r3, r2, r3
 800df1a:	6a3a      	ldr	r2, [r7, #32]
 800df1c:	429a      	cmp	r2, r3
 800df1e:	d918      	bls.n	800df52 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	6a1a      	ldr	r2, [r3, #32]
 800df2a:	697b      	ldr	r3, [r7, #20]
 800df2c:	1ad3      	subs	r3, r2, r3
 800df2e:	693a      	ldr	r2, [r7, #16]
 800df30:	8992      	ldrh	r2, [r2, #12]
 800df32:	fb02 f303 	mul.w	r3, r2, r3
 800df36:	69fa      	ldr	r2, [r7, #28]
 800df38:	18d1      	adds	r1, r2, r3
 800df3a:	693b      	ldr	r3, [r7, #16]
 800df3c:	899b      	ldrh	r3, [r3, #12]
 800df3e:	461a      	mov	r2, r3
 800df40:	f7fd fc26 	bl	800b790 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	7d1b      	ldrb	r3, [r3, #20]
 800df48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df4c:	b2da      	uxtb	r2, r3
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800df52:	693b      	ldr	r3, [r7, #16]
 800df54:	899b      	ldrh	r3, [r3, #12]
 800df56:	461a      	mov	r2, r3
 800df58:	6a3b      	ldr	r3, [r7, #32]
 800df5a:	fb02 f303 	mul.w	r3, r2, r3
 800df5e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800df60:	e04b      	b.n	800dffa <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	6a1b      	ldr	r3, [r3, #32]
 800df66:	697a      	ldr	r2, [r7, #20]
 800df68:	429a      	cmp	r2, r3
 800df6a:	d016      	beq.n	800df9a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	699a      	ldr	r2, [r3, #24]
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800df74:	429a      	cmp	r2, r3
 800df76:	d210      	bcs.n	800df9a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	7858      	ldrb	r0, [r3, #1]
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800df82:	2301      	movs	r3, #1
 800df84:	697a      	ldr	r2, [r7, #20]
 800df86:	f7fd fb23 	bl	800b5d0 <disk_read>
 800df8a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d004      	beq.n	800df9a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	2201      	movs	r2, #1
 800df94:	755a      	strb	r2, [r3, #21]
 800df96:	2301      	movs	r3, #1
 800df98:	e05a      	b.n	800e050 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	697a      	ldr	r2, [r7, #20]
 800df9e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800dfa0:	693b      	ldr	r3, [r7, #16]
 800dfa2:	899b      	ldrh	r3, [r3, #12]
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	699b      	ldr	r3, [r3, #24]
 800dfaa:	693a      	ldr	r2, [r7, #16]
 800dfac:	8992      	ldrh	r2, [r2, #12]
 800dfae:	fbb3 f1f2 	udiv	r1, r3, r2
 800dfb2:	fb02 f201 	mul.w	r2, r2, r1
 800dfb6:	1a9b      	subs	r3, r3, r2
 800dfb8:	1ac3      	subs	r3, r0, r3
 800dfba:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800dfbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d901      	bls.n	800dfc8 <f_write+0x298>
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	699b      	ldr	r3, [r3, #24]
 800dfd2:	693a      	ldr	r2, [r7, #16]
 800dfd4:	8992      	ldrh	r2, [r2, #12]
 800dfd6:	fbb3 f0f2 	udiv	r0, r3, r2
 800dfda:	fb02 f200 	mul.w	r2, r2, r0
 800dfde:	1a9b      	subs	r3, r3, r2
 800dfe0:	440b      	add	r3, r1
 800dfe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfe4:	69f9      	ldr	r1, [r7, #28]
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f7fd fbd2 	bl	800b790 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	7d1b      	ldrb	r3, [r3, #20]
 800dff0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dff4:	b2da      	uxtb	r2, r3
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800dffa:	69fa      	ldr	r2, [r7, #28]
 800dffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dffe:	4413      	add	r3, r2
 800e000:	61fb      	str	r3, [r7, #28]
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	699a      	ldr	r2, [r3, #24]
 800e006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e008:	441a      	add	r2, r3
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	619a      	str	r2, [r3, #24]
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	68da      	ldr	r2, [r3, #12]
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	699b      	ldr	r3, [r3, #24]
 800e016:	429a      	cmp	r2, r3
 800e018:	bf38      	it	cc
 800e01a:	461a      	movcc	r2, r3
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	60da      	str	r2, [r3, #12]
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	681a      	ldr	r2, [r3, #0]
 800e024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e026:	441a      	add	r2, r3
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	601a      	str	r2, [r3, #0]
 800e02c:	687a      	ldr	r2, [r7, #4]
 800e02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e030:	1ad3      	subs	r3, r2, r3
 800e032:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2b00      	cmp	r3, #0
 800e038:	f47f aeb5 	bne.w	800dda6 <f_write+0x76>
 800e03c:	e000      	b.n	800e040 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e03e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	7d1b      	ldrb	r3, [r3, #20]
 800e044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e048:	b2da      	uxtb	r2, r3
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e04e:	2300      	movs	r3, #0
}
 800e050:	4618      	mov	r0, r3
 800e052:	3730      	adds	r7, #48	; 0x30
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}

0800e058 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b086      	sub	sp, #24
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f107 0208 	add.w	r2, r7, #8
 800e066:	4611      	mov	r1, r2
 800e068:	4618      	mov	r0, r3
 800e06a:	f7ff fc19 	bl	800d8a0 <validate>
 800e06e:	4603      	mov	r3, r0
 800e070:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e072:	7dfb      	ldrb	r3, [r7, #23]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d168      	bne.n	800e14a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	7d1b      	ldrb	r3, [r3, #20]
 800e07c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e080:	2b00      	cmp	r3, #0
 800e082:	d062      	beq.n	800e14a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	7d1b      	ldrb	r3, [r3, #20]
 800e088:	b25b      	sxtb	r3, r3
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	da15      	bge.n	800e0ba <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	7858      	ldrb	r0, [r3, #1]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	6a1a      	ldr	r2, [r3, #32]
 800e09c:	2301      	movs	r3, #1
 800e09e:	f7fd fab7 	bl	800b610 <disk_write>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d001      	beq.n	800e0ac <f_sync+0x54>
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	e04f      	b.n	800e14c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	7d1b      	ldrb	r3, [r3, #20]
 800e0b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0b4:	b2da      	uxtb	r2, r3
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e0ba:	f7fd f8dd 	bl	800b278 <get_fattime>
 800e0be:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e0c0:	68ba      	ldr	r2, [r7, #8]
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0c6:	4619      	mov	r1, r3
 800e0c8:	4610      	mov	r0, r2
 800e0ca:	f7fd fd8f 	bl	800bbec <move_window>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e0d2:	7dfb      	ldrb	r3, [r7, #23]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d138      	bne.n	800e14a <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0dc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	330b      	adds	r3, #11
 800e0e2:	781a      	ldrb	r2, [r3, #0]
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	330b      	adds	r3, #11
 800e0e8:	f042 0220 	orr.w	r2, r2, #32
 800e0ec:	b2d2      	uxtb	r2, r2
 800e0ee:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	6818      	ldr	r0, [r3, #0]
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	689b      	ldr	r3, [r3, #8]
 800e0f8:	461a      	mov	r2, r3
 800e0fa:	68f9      	ldr	r1, [r7, #12]
 800e0fc:	f7fe fb1d 	bl	800c73a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	f103 021c 	add.w	r2, r3, #28
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	68db      	ldr	r3, [r3, #12]
 800e10a:	4619      	mov	r1, r3
 800e10c:	4610      	mov	r0, r2
 800e10e:	f7fd fb13 	bl	800b738 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	3316      	adds	r3, #22
 800e116:	6939      	ldr	r1, [r7, #16]
 800e118:	4618      	mov	r0, r3
 800e11a:	f7fd fb0d 	bl	800b738 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	3312      	adds	r3, #18
 800e122:	2100      	movs	r1, #0
 800e124:	4618      	mov	r0, r3
 800e126:	f7fd faec 	bl	800b702 <st_word>
					fs->wflag = 1;
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	2201      	movs	r2, #1
 800e12e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	4618      	mov	r0, r3
 800e134:	f7fd fd88 	bl	800bc48 <sync_fs>
 800e138:	4603      	mov	r3, r0
 800e13a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	7d1b      	ldrb	r3, [r3, #20]
 800e140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e144:	b2da      	uxtb	r2, r3
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e14a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	3718      	adds	r7, #24
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}

0800e154 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e15c:	6878      	ldr	r0, [r7, #4]
 800e15e:	f7ff ff7b 	bl	800e058 <f_sync>
 800e162:	4603      	mov	r3, r0
 800e164:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e166:	7bfb      	ldrb	r3, [r7, #15]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d118      	bne.n	800e19e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f107 0208 	add.w	r2, r7, #8
 800e172:	4611      	mov	r1, r2
 800e174:	4618      	mov	r0, r3
 800e176:	f7ff fb93 	bl	800d8a0 <validate>
 800e17a:	4603      	mov	r3, r0
 800e17c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e17e:	7bfb      	ldrb	r3, [r7, #15]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d10c      	bne.n	800e19e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	691b      	ldr	r3, [r3, #16]
 800e188:	4618      	mov	r0, r3
 800e18a:	f7fd fc8b 	bl	800baa4 <dec_lock>
 800e18e:	4603      	mov	r3, r0
 800e190:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e192:	7bfb      	ldrb	r3, [r7, #15]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d102      	bne.n	800e19e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2200      	movs	r2, #0
 800e19c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e19e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3710      	adds	r7, #16
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}

0800e1a8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b087      	sub	sp, #28
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	60f8      	str	r0, [r7, #12]
 800e1b0:	60b9      	str	r1, [r7, #8]
 800e1b2:	4613      	mov	r3, r2
 800e1b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e1b6:	2301      	movs	r3, #1
 800e1b8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e1be:	4b1f      	ldr	r3, [pc, #124]	; (800e23c <FATFS_LinkDriverEx+0x94>)
 800e1c0:	7a5b      	ldrb	r3, [r3, #9]
 800e1c2:	b2db      	uxtb	r3, r3
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d131      	bne.n	800e22c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e1c8:	4b1c      	ldr	r3, [pc, #112]	; (800e23c <FATFS_LinkDriverEx+0x94>)
 800e1ca:	7a5b      	ldrb	r3, [r3, #9]
 800e1cc:	b2db      	uxtb	r3, r3
 800e1ce:	461a      	mov	r2, r3
 800e1d0:	4b1a      	ldr	r3, [pc, #104]	; (800e23c <FATFS_LinkDriverEx+0x94>)
 800e1d2:	2100      	movs	r1, #0
 800e1d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e1d6:	4b19      	ldr	r3, [pc, #100]	; (800e23c <FATFS_LinkDriverEx+0x94>)
 800e1d8:	7a5b      	ldrb	r3, [r3, #9]
 800e1da:	b2db      	uxtb	r3, r3
 800e1dc:	4a17      	ldr	r2, [pc, #92]	; (800e23c <FATFS_LinkDriverEx+0x94>)
 800e1de:	009b      	lsls	r3, r3, #2
 800e1e0:	4413      	add	r3, r2
 800e1e2:	68fa      	ldr	r2, [r7, #12]
 800e1e4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e1e6:	4b15      	ldr	r3, [pc, #84]	; (800e23c <FATFS_LinkDriverEx+0x94>)
 800e1e8:	7a5b      	ldrb	r3, [r3, #9]
 800e1ea:	b2db      	uxtb	r3, r3
 800e1ec:	461a      	mov	r2, r3
 800e1ee:	4b13      	ldr	r3, [pc, #76]	; (800e23c <FATFS_LinkDriverEx+0x94>)
 800e1f0:	4413      	add	r3, r2
 800e1f2:	79fa      	ldrb	r2, [r7, #7]
 800e1f4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e1f6:	4b11      	ldr	r3, [pc, #68]	; (800e23c <FATFS_LinkDriverEx+0x94>)
 800e1f8:	7a5b      	ldrb	r3, [r3, #9]
 800e1fa:	b2db      	uxtb	r3, r3
 800e1fc:	1c5a      	adds	r2, r3, #1
 800e1fe:	b2d1      	uxtb	r1, r2
 800e200:	4a0e      	ldr	r2, [pc, #56]	; (800e23c <FATFS_LinkDriverEx+0x94>)
 800e202:	7251      	strb	r1, [r2, #9]
 800e204:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e206:	7dbb      	ldrb	r3, [r7, #22]
 800e208:	3330      	adds	r3, #48	; 0x30
 800e20a:	b2da      	uxtb	r2, r3
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e210:	68bb      	ldr	r3, [r7, #8]
 800e212:	3301      	adds	r3, #1
 800e214:	223a      	movs	r2, #58	; 0x3a
 800e216:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e218:	68bb      	ldr	r3, [r7, #8]
 800e21a:	3302      	adds	r3, #2
 800e21c:	222f      	movs	r2, #47	; 0x2f
 800e21e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e220:	68bb      	ldr	r3, [r7, #8]
 800e222:	3303      	adds	r3, #3
 800e224:	2200      	movs	r2, #0
 800e226:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e228:	2300      	movs	r3, #0
 800e22a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e22c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e22e:	4618      	mov	r0, r3
 800e230:	371c      	adds	r7, #28
 800e232:	46bd      	mov	sp, r7
 800e234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e238:	4770      	bx	lr
 800e23a:	bf00      	nop
 800e23c:	20002340 	.word	0x20002340

0800e240 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b082      	sub	sp, #8
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
 800e248:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e24a:	2200      	movs	r2, #0
 800e24c:	6839      	ldr	r1, [r7, #0]
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	f7ff ffaa 	bl	800e1a8 <FATFS_LinkDriverEx>
 800e254:	4603      	mov	r3, r0
}
 800e256:	4618      	mov	r0, r3
 800e258:	3708      	adds	r7, #8
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}
	...

0800e260 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800e260:	b480      	push	{r7}
 800e262:	b085      	sub	sp, #20
 800e264:	af00      	add	r7, sp, #0
 800e266:	4603      	mov	r3, r0
 800e268:	6039      	str	r1, [r7, #0]
 800e26a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e26c:	88fb      	ldrh	r3, [r7, #6]
 800e26e:	2b7f      	cmp	r3, #127	; 0x7f
 800e270:	d802      	bhi.n	800e278 <ff_convert+0x18>
		c = chr;
 800e272:	88fb      	ldrh	r3, [r7, #6]
 800e274:	81fb      	strh	r3, [r7, #14]
 800e276:	e025      	b.n	800e2c4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d00b      	beq.n	800e296 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e27e:	88fb      	ldrh	r3, [r7, #6]
 800e280:	2bff      	cmp	r3, #255	; 0xff
 800e282:	d805      	bhi.n	800e290 <ff_convert+0x30>
 800e284:	88fb      	ldrh	r3, [r7, #6]
 800e286:	3b80      	subs	r3, #128	; 0x80
 800e288:	4a12      	ldr	r2, [pc, #72]	; (800e2d4 <ff_convert+0x74>)
 800e28a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e28e:	e000      	b.n	800e292 <ff_convert+0x32>
 800e290:	2300      	movs	r3, #0
 800e292:	81fb      	strh	r3, [r7, #14]
 800e294:	e016      	b.n	800e2c4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800e296:	2300      	movs	r3, #0
 800e298:	81fb      	strh	r3, [r7, #14]
 800e29a:	e009      	b.n	800e2b0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e29c:	89fb      	ldrh	r3, [r7, #14]
 800e29e:	4a0d      	ldr	r2, [pc, #52]	; (800e2d4 <ff_convert+0x74>)
 800e2a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e2a4:	88fa      	ldrh	r2, [r7, #6]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d006      	beq.n	800e2b8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e2aa:	89fb      	ldrh	r3, [r7, #14]
 800e2ac:	3301      	adds	r3, #1
 800e2ae:	81fb      	strh	r3, [r7, #14]
 800e2b0:	89fb      	ldrh	r3, [r7, #14]
 800e2b2:	2b7f      	cmp	r3, #127	; 0x7f
 800e2b4:	d9f2      	bls.n	800e29c <ff_convert+0x3c>
 800e2b6:	e000      	b.n	800e2ba <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e2b8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e2ba:	89fb      	ldrh	r3, [r7, #14]
 800e2bc:	3380      	adds	r3, #128	; 0x80
 800e2be:	b29b      	uxth	r3, r3
 800e2c0:	b2db      	uxtb	r3, r3
 800e2c2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e2c4:	89fb      	ldrh	r3, [r7, #14]
}
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	3714      	adds	r7, #20
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d0:	4770      	bx	lr
 800e2d2:	bf00      	nop
 800e2d4:	08016178 	.word	0x08016178

0800e2d8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e2d8:	b480      	push	{r7}
 800e2da:	b087      	sub	sp, #28
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	4603      	mov	r3, r0
 800e2e0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e2e2:	88fb      	ldrh	r3, [r7, #6]
 800e2e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e2e8:	d201      	bcs.n	800e2ee <ff_wtoupper+0x16>
 800e2ea:	4b3e      	ldr	r3, [pc, #248]	; (800e3e4 <ff_wtoupper+0x10c>)
 800e2ec:	e000      	b.n	800e2f0 <ff_wtoupper+0x18>
 800e2ee:	4b3e      	ldr	r3, [pc, #248]	; (800e3e8 <ff_wtoupper+0x110>)
 800e2f0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800e2f2:	697b      	ldr	r3, [r7, #20]
 800e2f4:	1c9a      	adds	r2, r3, #2
 800e2f6:	617a      	str	r2, [r7, #20]
 800e2f8:	881b      	ldrh	r3, [r3, #0]
 800e2fa:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800e2fc:	8a7b      	ldrh	r3, [r7, #18]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d068      	beq.n	800e3d4 <ff_wtoupper+0xfc>
 800e302:	88fa      	ldrh	r2, [r7, #6]
 800e304:	8a7b      	ldrh	r3, [r7, #18]
 800e306:	429a      	cmp	r2, r3
 800e308:	d364      	bcc.n	800e3d4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e30a:	697b      	ldr	r3, [r7, #20]
 800e30c:	1c9a      	adds	r2, r3, #2
 800e30e:	617a      	str	r2, [r7, #20]
 800e310:	881b      	ldrh	r3, [r3, #0]
 800e312:	823b      	strh	r3, [r7, #16]
 800e314:	8a3b      	ldrh	r3, [r7, #16]
 800e316:	0a1b      	lsrs	r3, r3, #8
 800e318:	81fb      	strh	r3, [r7, #14]
 800e31a:	8a3b      	ldrh	r3, [r7, #16]
 800e31c:	b2db      	uxtb	r3, r3
 800e31e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800e320:	88fa      	ldrh	r2, [r7, #6]
 800e322:	8a79      	ldrh	r1, [r7, #18]
 800e324:	8a3b      	ldrh	r3, [r7, #16]
 800e326:	440b      	add	r3, r1
 800e328:	429a      	cmp	r2, r3
 800e32a:	da49      	bge.n	800e3c0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800e32c:	89fb      	ldrh	r3, [r7, #14]
 800e32e:	2b08      	cmp	r3, #8
 800e330:	d84f      	bhi.n	800e3d2 <ff_wtoupper+0xfa>
 800e332:	a201      	add	r2, pc, #4	; (adr r2, 800e338 <ff_wtoupper+0x60>)
 800e334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e338:	0800e35d 	.word	0x0800e35d
 800e33c:	0800e36f 	.word	0x0800e36f
 800e340:	0800e385 	.word	0x0800e385
 800e344:	0800e38d 	.word	0x0800e38d
 800e348:	0800e395 	.word	0x0800e395
 800e34c:	0800e39d 	.word	0x0800e39d
 800e350:	0800e3a5 	.word	0x0800e3a5
 800e354:	0800e3ad 	.word	0x0800e3ad
 800e358:	0800e3b5 	.word	0x0800e3b5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e35c:	88fa      	ldrh	r2, [r7, #6]
 800e35e:	8a7b      	ldrh	r3, [r7, #18]
 800e360:	1ad3      	subs	r3, r2, r3
 800e362:	005b      	lsls	r3, r3, #1
 800e364:	697a      	ldr	r2, [r7, #20]
 800e366:	4413      	add	r3, r2
 800e368:	881b      	ldrh	r3, [r3, #0]
 800e36a:	80fb      	strh	r3, [r7, #6]
 800e36c:	e027      	b.n	800e3be <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e36e:	88fa      	ldrh	r2, [r7, #6]
 800e370:	8a7b      	ldrh	r3, [r7, #18]
 800e372:	1ad3      	subs	r3, r2, r3
 800e374:	b29b      	uxth	r3, r3
 800e376:	f003 0301 	and.w	r3, r3, #1
 800e37a:	b29b      	uxth	r3, r3
 800e37c:	88fa      	ldrh	r2, [r7, #6]
 800e37e:	1ad3      	subs	r3, r2, r3
 800e380:	80fb      	strh	r3, [r7, #6]
 800e382:	e01c      	b.n	800e3be <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e384:	88fb      	ldrh	r3, [r7, #6]
 800e386:	3b10      	subs	r3, #16
 800e388:	80fb      	strh	r3, [r7, #6]
 800e38a:	e018      	b.n	800e3be <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e38c:	88fb      	ldrh	r3, [r7, #6]
 800e38e:	3b20      	subs	r3, #32
 800e390:	80fb      	strh	r3, [r7, #6]
 800e392:	e014      	b.n	800e3be <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e394:	88fb      	ldrh	r3, [r7, #6]
 800e396:	3b30      	subs	r3, #48	; 0x30
 800e398:	80fb      	strh	r3, [r7, #6]
 800e39a:	e010      	b.n	800e3be <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e39c:	88fb      	ldrh	r3, [r7, #6]
 800e39e:	3b1a      	subs	r3, #26
 800e3a0:	80fb      	strh	r3, [r7, #6]
 800e3a2:	e00c      	b.n	800e3be <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e3a4:	88fb      	ldrh	r3, [r7, #6]
 800e3a6:	3308      	adds	r3, #8
 800e3a8:	80fb      	strh	r3, [r7, #6]
 800e3aa:	e008      	b.n	800e3be <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e3ac:	88fb      	ldrh	r3, [r7, #6]
 800e3ae:	3b50      	subs	r3, #80	; 0x50
 800e3b0:	80fb      	strh	r3, [r7, #6]
 800e3b2:	e004      	b.n	800e3be <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e3b4:	88fb      	ldrh	r3, [r7, #6]
 800e3b6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800e3ba:	80fb      	strh	r3, [r7, #6]
 800e3bc:	bf00      	nop
			}
			break;
 800e3be:	e008      	b.n	800e3d2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800e3c0:	89fb      	ldrh	r3, [r7, #14]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d195      	bne.n	800e2f2 <ff_wtoupper+0x1a>
 800e3c6:	8a3b      	ldrh	r3, [r7, #16]
 800e3c8:	005b      	lsls	r3, r3, #1
 800e3ca:	697a      	ldr	r2, [r7, #20]
 800e3cc:	4413      	add	r3, r2
 800e3ce:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800e3d0:	e78f      	b.n	800e2f2 <ff_wtoupper+0x1a>
			break;
 800e3d2:	bf00      	nop
	}

	return chr;
 800e3d4:	88fb      	ldrh	r3, [r7, #6]
}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	371c      	adds	r7, #28
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e0:	4770      	bx	lr
 800e3e2:	bf00      	nop
 800e3e4:	08016278 	.word	0x08016278
 800e3e8:	0801646c 	.word	0x0801646c

0800e3ec <_tdcgp21_CS>:
#include "../TDC-GP21_defs.h"
#include <stdbool.h>
extern SPI_HandleTypeDef hspi4;

static void _tdcgp21_CS(void * intf_ptr, bool mode)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b084      	sub	sp, #16
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
 800e3f4:	460b      	mov	r3, r1
 800e3f6:	70fb      	strb	r3, [r7, #3]
	tdcgp21_lovver_api_config_t *api_config = (tdcgp21_lovver_api_config_t *)intf_ptr;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	60fb      	str	r3, [r7, #12]
	tdcgp21_spi_pins_t *api_config_low = (tdcgp21_spi_pins_t *)api_config->intf_ptr;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	689b      	ldr	r3, [r3, #8]
 800e400:	60bb      	str	r3, [r7, #8]
	if (mode)
 800e402:	78fb      	ldrb	r3, [r7, #3]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d008      	beq.n	800e41a <_tdcgp21_CS+0x2e>
	{
		// Опускаем chip select для того, что бы начать общение с конкретным устройством.
		HAL_GPIO_WritePin(api_config_low->cs_port, api_config_low->cs_pin,  GPIO_PIN_RESET);
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	6898      	ldr	r0, [r3, #8]
 800e40c:	68bb      	ldr	r3, [r7, #8]
 800e40e:	899b      	ldrh	r3, [r3, #12]
 800e410:	2200      	movs	r2, #0
 800e412:	4619      	mov	r1, r3
 800e414:	f7f8 fd58 	bl	8006ec8 <HAL_GPIO_WritePin>
	{
		// Поднимаем chip select для того, что бы закончить общение с конкретным устройством.
		HAL_GPIO_WritePin(api_config_low->cs_port, api_config_low->cs_pin,  GPIO_PIN_SET);
		//HAL_Delay(100);
	}
}
 800e418:	e007      	b.n	800e42a <_tdcgp21_CS+0x3e>
		HAL_GPIO_WritePin(api_config_low->cs_port, api_config_low->cs_pin,  GPIO_PIN_SET);
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	6898      	ldr	r0, [r3, #8]
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	899b      	ldrh	r3, [r3, #12]
 800e422:	2201      	movs	r2, #1
 800e424:	4619      	mov	r1, r3
 800e426:	f7f8 fd4f 	bl	8006ec8 <HAL_GPIO_WritePin>
}
 800e42a:	bf00      	nop
 800e42c:	3710      	adds	r7, #16
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}

0800e432 <tdcgp21_write_register>:


HAL_StatusTypeDef tdcgp21_write_register(void * intf_ptr, uint8_t reg_addr, const uint8_t * reg_data, size_t data_size)
{
 800e432:	b580      	push	{r7, lr}
 800e434:	b086      	sub	sp, #24
 800e436:	af00      	add	r7, sp, #0
 800e438:	60f8      	str	r0, [r7, #12]
 800e43a:	607a      	str	r2, [r7, #4]
 800e43c:	603b      	str	r3, [r7, #0]
 800e43e:	460b      	mov	r3, r1
 800e440:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef errcode1;
	tdcgp21_lovver_api_config_t *api_config = (tdcgp21_lovver_api_config_t *)intf_ptr;
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	617b      	str	r3, [r7, #20]
	api_config->tdc21_CS(intf_ptr, true);
 800e446:	697b      	ldr	r3, [r7, #20]
 800e448:	685b      	ldr	r3, [r3, #4]
 800e44a:	2101      	movs	r1, #1
 800e44c:	68f8      	ldr	r0, [r7, #12]
 800e44e:	4798      	blx	r3

	// Добавляем в 5 битов адреса еще 3 бита для записи в регистр
	reg_addr = TDC21_W_REGISTER | reg_addr;
 800e450:	7afb      	ldrb	r3, [r7, #11]
 800e452:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e456:	b2db      	uxtb	r3, r3
 800e458:	72fb      	strb	r3, [r7, #11]

	// Передаем адресс регистра, в который пишем и пишем в регистр
	errcode1 = HAL_SPI_Transmit(api_config->hspi, &reg_addr, 1, HAL_MAX_DELAY);
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	6818      	ldr	r0, [r3, #0]
 800e45e:	f107 010b 	add.w	r1, r7, #11
 800e462:	f04f 33ff 	mov.w	r3, #4294967295
 800e466:	2201      	movs	r2, #1
 800e468:	f7fb f98d 	bl	8009786 <HAL_SPI_Transmit>
 800e46c:	4603      	mov	r3, r0
 800e46e:	74fb      	strb	r3, [r7, #19]
	if(errcode1)
 800e470:	7cfb      	ldrb	r3, [r7, #19]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d006      	beq.n	800e484 <tdcgp21_write_register+0x52>
	{
		api_config->tdc21_CS(intf_ptr, false);
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	685b      	ldr	r3, [r3, #4]
 800e47a:	2100      	movs	r1, #0
 800e47c:	68f8      	ldr	r0, [r7, #12]
 800e47e:	4798      	blx	r3
		return errcode1;
 800e480:	7cfb      	ldrb	r3, [r7, #19]
 800e482:	e00e      	b.n	800e4a2 <tdcgp21_write_register+0x70>
	}
	HAL_SPI_Transmit(api_config->hspi, reg_data, data_size, HAL_MAX_DELAY);
 800e484:	697b      	ldr	r3, [r7, #20]
 800e486:	6818      	ldr	r0, [r3, #0]
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	b29a      	uxth	r2, r3
 800e48c:	f04f 33ff 	mov.w	r3, #4294967295
 800e490:	6879      	ldr	r1, [r7, #4]
 800e492:	f7fb f978 	bl	8009786 <HAL_SPI_Transmit>

	api_config->tdc21_CS(intf_ptr, false);
 800e496:	697b      	ldr	r3, [r7, #20]
 800e498:	685b      	ldr	r3, [r3, #4]
 800e49a:	2100      	movs	r1, #0
 800e49c:	68f8      	ldr	r0, [r7, #12]
 800e49e:	4798      	blx	r3
	return errcode1;
 800e4a0:	7cfb      	ldrb	r3, [r7, #19]
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	3718      	adds	r7, #24
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	bd80      	pop	{r7, pc}

0800e4aa <tdc21_start_tof>:
	int popa  = TDC21_POWER_ON_RESET;
	HAL_SPI_Transmit(api_config->hspi, &popa, 1, HAL_MAX_DELAY);
}

void tdc21_start_tof(tdcgp21_lovver_api_config_t* api_config)
{
 800e4aa:	b580      	push	{r7, lr}
 800e4ac:	b084      	sub	sp, #16
 800e4ae:	af00      	add	r7, sp, #0
 800e4b0:	6078      	str	r0, [r7, #4]
	int jopa = TDC21_START_TOF;
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	60fb      	str	r3, [r7, #12]
	HAL_SPI_Transmit(api_config->hspi, &jopa, 1, HAL_MAX_DELAY);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6818      	ldr	r0, [r3, #0]
 800e4ba:	f107 010c 	add.w	r1, r7, #12
 800e4be:	f04f 33ff 	mov.w	r3, #4294967295
 800e4c2:	2201      	movs	r2, #1
 800e4c4:	f7fb f95f 	bl	8009786 <HAL_SPI_Transmit>
}
 800e4c8:	bf00      	nop
 800e4ca:	3710      	adds	r7, #16
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}

0800e4d0 <tdc21_spi_init>:

void tdc21_spi_init(tdcgp21_lovver_api_config_t* nrf24, SPI_HandleTypeDef *hspi, tdcgp21_spi_pins_t* pins)
{
 800e4d0:	b480      	push	{r7}
 800e4d2:	b085      	sub	sp, #20
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	60f8      	str	r0, [r7, #12]
 800e4d8:	60b9      	str	r1, [r7, #8]
 800e4da:	607a      	str	r2, [r7, #4]
	nrf24->hspi = hspi;
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	68ba      	ldr	r2, [r7, #8]
 800e4e0:	601a      	str	r2, [r3, #0]
	nrf24->tdc21_CS = _tdcgp21_CS;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	4a05      	ldr	r2, [pc, #20]	; (800e4fc <tdc21_spi_init+0x2c>)
 800e4e6:	605a      	str	r2, [r3, #4]
	nrf24->intf_ptr = pins;
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	687a      	ldr	r2, [r7, #4]
 800e4ec:	609a      	str	r2, [r3, #8]
}
 800e4ee:	bf00      	nop
 800e4f0:	3714      	adds	r7, #20
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f8:	4770      	bx	lr
 800e4fa:	bf00      	nop
 800e4fc:	0800e3ed 	.word	0x0800e3ed

0800e500 <tdc21_config>:
	return data*90;
}


tdc21_all_regs_t tdc21_config(void * intf_ptr)
{
 800e500:	b5b0      	push	{r4, r5, r7, lr}
 800e502:	b09a      	sub	sp, #104	; 0x68
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
 800e508:	6039      	str	r1, [r7, #0]
	config_all_value_ideal_t config_all_value;
	tdc21_all_regs_t reg_i;

	reg_i.reg0 = 0;
 800e50a:	2300      	movs	r3, #0
 800e50c:	60bb      	str	r3, [r7, #8]
	reg_i.reg1 = 0b00000000010000000000000000000000;
 800e50e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e512:	60fb      	str	r3, [r7, #12]
	reg_i.reg2 = 0;
 800e514:	2300      	movs	r3, #0
 800e516:	613b      	str	r3, [r7, #16]
	reg_i.reg3 = 0;
 800e518:	2300      	movs	r3, #0
 800e51a:	617b      	str	r3, [r7, #20]
	reg_i.reg4 = 0b00100000000000000000000000000000;
 800e51c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800e520:	61bb      	str	r3, [r7, #24]
	reg_i.reg5 = 0;
 800e522:	2300      	movs	r3, #0
 800e524:	61fb      	str	r3, [r7, #28]
	reg_i.reg6 = 0;
 800e526:	2300      	movs	r3, #0
 800e528:	623b      	str	r3, [r7, #32]

//настройки нулевого регистра!!!!00000000000
	config_all_value.ANZ_FIRE = 0b0010;
 800e52a:	2302      	movs	r3, #2
 800e52c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	config_all_value.DIV_FIRE = 0b0010;
 800e530:	2302      	movs	r3, #2
 800e532:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	config_all_value.ANZ_PER_CALRES = 0;
 800e536:	2300      	movs	r3, #0
 800e538:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	config_all_value.DIV_CLKHS = 0;
 800e53c:	2300      	movs	r3, #0
 800e53e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	config_all_value.START_CLKHS = 0b0001;
 800e542:	2301      	movs	r3, #1
 800e544:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	config_all_value.ANZ_PORT = 1;
 800e548:	2301      	movs	r3, #1
 800e54a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	config_all_value.TCYCLE = 0;
 800e54e:	2300      	movs	r3, #0
 800e550:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	config_all_value.ANZ_FAKE = 0;
 800e554:	2300      	movs	r3, #0
 800e556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	config_all_value.SEL_ECLK_TMP = 1;
 800e55a:	2301      	movs	r3, #1
 800e55c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	config_all_value.CALIBRATE = 1;
 800e560:	2301      	movs	r3, #1
 800e562:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	config_all_value.NO_CAL_AUTO = 0;
 800e566:	2300      	movs	r3, #0
 800e568:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	config_all_value.MESSB2 = 1;
 800e56c:	2301      	movs	r3, #1
 800e56e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	config_all_value.NEG_STOP2 = 0;
 800e572:	2300      	movs	r3, #0
 800e574:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	config_all_value.NEG_STOP1 = 0;
 800e578:	2300      	movs	r3, #0
 800e57a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	config_all_value.NEG_START = 0;
 800e57e:	2300      	movs	r3, #0
 800e580:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32


	///настройки первого регистра11111111111
	config_all_value.HIT1 = 0b0101;
 800e584:	2305      	movs	r3, #5
 800e586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	config_all_value.HIT2 = 0b0101;
 800e58a:	2305      	movs	r3, #5
 800e58c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	config_all_value.EN_FAST_INIT = 0;
 800e590:	2300      	movs	r3, #0
 800e592:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	config_all_value.HITIN2 = 0;
 800e596:	2300      	movs	r3, #0
 800e598:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	config_all_value.HITIN1 = 0;
 800e59c:	2300      	movs	r3, #0
 800e59e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	config_all_value.CURR32K = 1;
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	config_all_value.SEL_START_FIRE = 0;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	config_all_value.SEL_TSTO2 = 0;
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	config_all_value.SEL_TSTO1 = 0;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b


	//настройки второго регистра2222222222
	config_all_value.EN_INT_TIMEOUT = 0;
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	config_all_value.EN_INT_END_HITS = 0;
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	config_all_value.EN_INT_ALU	= 1;
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	config_all_value.RFEDGE2 = 0;
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	config_all_value.RFEDGE1 = 0;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	config_all_value.DELVAL1 = 0;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	647b      	str	r3, [r7, #68]	; 0x44

	//настройки третьего регистра333333333
	config_all_value.EN_ERR_VAL = 0;
 800e5dc:	2300      	movs	r3, #0
 800e5de:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	config_all_value.SEL_TIMO_MB2  = 0b11;
 800e5e2:	2303      	movs	r3, #3
 800e5e4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	config_all_value.DELVAL2 = 0b0010000000000000000;
 800e5e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e5ec:	64fb      	str	r3, [r7, #76]	; 0x4c

	//настройка четвертого регистра444444444
	config_all_value.DELVAL3 = 0;
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	653b      	str	r3, [r7, #80]	; 0x50


	//настройка пятого регистра5555555555
	config_all_value.CONF_FIRE = TDC21_WREG5_FIRE_UP;
 800e5f2:	2302      	movs	r3, #2
 800e5f4:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	config_all_value.EN_STARTNOISE = 0;//
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	config_all_value.DIS_PHASESHIFT = 0;
 800e5fe:	2300      	movs	r3, #0
 800e600:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	config_all_value.REPEAT_FIRE = 1;
 800e604:	2301      	movs	r3, #1
 800e606:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	config_all_value.PHASE_FIRE = TDC21_WREG5_PHASE_FIRE_NOT_INVERS;
 800e60a:	2300      	movs	r3, #0
 800e60c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

	//настройка шестого регистра66666666666
	config_all_value.EN_ANALOG = TDC21_WREG6_EN_ANALOG_STR1ST2_DIGITAL;
 800e610:	2300      	movs	r3, #0
 800e612:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	config_all_value.NEG_STOP_TEMP = TDC21_WREG6_NEG_STOP_TEMP_74HC14;
 800e616:	2300      	movs	r3, #0
 800e618:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	config_all_value.DA_korrt = TDC21_WREG6_DA_KORRT_0MV;
 800e61c:	2300      	movs	r3, #0
 800e61e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	config_all_value.TW2 = TDC21_WREG6_TW2_90MKS;
 800e622:	2300      	movs	r3, #0
 800e624:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	config_all_value.EN_INT_EEPROM = 1;//
 800e628:	2301      	movs	r3, #1
 800e62a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	config_all_value.CYCLE_TEMP = TDC21_WREG6_CYCLE_TEMP_1;
 800e62e:	2300      	movs	r3, #0
 800e630:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	config_all_value.CYCLE_TOF = TDC21_WREG6_CYCLE_TOF_1;
 800e634:	2300      	movs	r3, #0
 800e636:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	config_all_value.HZ60 = TDC21_WREG6_HZ60_50_HZ;
 800e63a:	2300      	movs	r3, #0
 800e63c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	config_all_value.FIREO_DEF = TDC21_WREG6_FIREO_DEF_HIGHT_HZ;
 800e640:	2300      	movs	r3, #0
 800e642:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	config_all_value.QUAD_RES = TDC21_WREG6_QUAD_RES_DISABLE;
 800e646:	2300      	movs	r3, #0
 800e648:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	config_all_value.DOUBLE_RES = TDC21_WREG6_DOUBLE_RES_DISABLE;
 800e64c:	2300      	movs	r3, #0
 800e64e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	config_all_value.TEMP_PORTDIR = TDC21_WREG6_TEMP_PORTDIR_PT1_PT2_PT3_PT4;
 800e652:	2300      	movs	r3, #0
 800e654:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	config_all_value.ANZ_FIRE_2 = 0;
 800e658:	2300      	movs	r3, #0
 800e65a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	reg_i.reg6 |= TDC21_WREG6_DOUBLE_RES(config_all_value.DOUBLE_RES);
	reg_i.reg6 |= TDC21_WREG6_TEMP_PORTDIR(config_all_value.TEMP_PORTDIR);
	reg_i.reg6 |= TDC21_WREG6_ANZ_FIRE((config_all_value.ANZ_FIRE >> 4));//////////////////////*/


	reg_i.reg0|= (uint32_t)1 << REG0_ANZ_FIRE; // 1 fire pulse
 800e65e:	68bb      	ldr	r3, [r7, #8]
 800e660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e664:	60bb      	str	r3, [r7, #8]
	reg_i.reg0|= 1 << REG0_START_CLKHS_1_0; // 1 = Oscillator continuously on
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e66c:	60bb      	str	r3, [r7, #8]
	reg_i.reg0|= 0 << REG0_CALIBRATE; // Disable calibration
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	60bb      	str	r3, [r7, #8]
	reg_i.reg0|= 1 << REG0_NO_CAL_AUTO;// 1 = auto-calibration disabled
 800e672:	68bb      	ldr	r3, [r7, #8]
 800e674:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e678:	60bb      	str	r3, [r7, #8]
	reg_i.reg0|= 7 << REG0_DIV_FIRE; //7.= divided by 8
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800e680:	60bb      	str	r3, [r7, #8]
	reg_i.reg0|= 1 << REG0_DIV_CLKHS;//1 = clk divided by 2
 800e682:	68bb      	ldr	r3, [r7, #8]
 800e684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e688:	60bb      	str	r3, [r7, #8]

	reg_i.reg1|= (uint32_t)9 << REG1_HIT1; // 0x9 -> 1. Stop Ch2 (photo)
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
 800e690:	60fb      	str	r3, [r7, #12]
	reg_i.reg1|= 1 << REG1_HIT2; // 0x1 -> 1. Stop Ch1 (laser)
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e698:	60fb      	str	r3, [r7, #12]

	reg_i.reg1|= 1 << REG1_HITIN1; // 1 hit on ch1 expected (laser)
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e6a0:	60fb      	str	r3, [r7, #12]
	reg_i.reg1|= 2 << REG1_HITIN2; // 2 hits on ch2 expected (photo)
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e6a8:	60fb      	str	r3, [r7, #12]

	reg_i.reg1|= 1 << REG1_SEL_START_FIRE; // Fire pulse is used as TDC start
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e6b0:	60fb      	str	r3, [r7, #12]
	reg_i.reg1|= 7 << REG1_SEL_TSTO2;//7 = 4 kHz (32 kHz/8) clock - IMPORTANT
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800e6b8:	60fb      	str	r3, [r7, #12]

	reg_i.reg1|= 3 << REG1_SEL_TSTO1;//3 = STOP2 TDC output
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800e6c0:	60fb      	str	r3, [r7, #12]
	// *********************** REG 2
	reg_i.reg2|= (uint32_t)(1+4) << REG2_EN_INT_2_0; // 1 - timeout interr, 4 - ALU interr enable
 800e6c2:	693b      	ldr	r3, [r7, #16]
 800e6c4:	f043 4320 	orr.w	r3, r3, #2684354560	; 0xa0000000
 800e6c8:	613b      	str	r3, [r7, #16]
	reg_i.reg2|= 1 << REG2_RFEDGE2;//1 = rising and falling edge at channel2
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e6d0:	613b      	str	r3, [r7, #16]

	//REG 3
	reg_i.reg3|= 1 << REG3_EN_ERR_VAL; // Timeout forces ALU to write ‘hFFFFFFFF
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e6d8:	617b      	str	r3, [r7, #20]

	//REG 5
	reg_i.reg5|= 2 << REG5_CONF_FIRE; //Bit 30 = 1: enable output FIRE_UP
 800e6da:	69fb      	ldr	r3, [r7, #28]
 800e6dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e6e0:	61fb      	str	r3, [r7, #28]
	reg_i.reg5|= 1 << REG5_DIS_PHASESHIFT;//Disable phase shift noise
 800e6e2:	69fb      	ldr	r3, [r7, #28]
 800e6e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e6e8:	61fb      	str	r3, [r7, #28]

	//REG 6
	//reg6|= (uint32_t)1 << REG6_EN_ANALOG;
	reg_i.reg6|= 1 << REG6_FIREO_DEF; //1 = LOW
 800e6ea:	6a3b      	ldr	r3, [r7, #32]
 800e6ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e6f0:	623b      	str	r3, [r7, #32]

	//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=ЭТАП-=-ОТПРАВКИ=-=РЕГИСТРОВ-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-//
	tdcgp21_write_register(intf_ptr, TDC21_WREG0, (uint8_t*)&reg_i.reg0, 4);
 800e6f2:	f107 0208 	add.w	r2, r7, #8
 800e6f6:	2304      	movs	r3, #4
 800e6f8:	2100      	movs	r1, #0
 800e6fa:	6838      	ldr	r0, [r7, #0]
 800e6fc:	f7ff fe99 	bl	800e432 <tdcgp21_write_register>
	tdcgp21_write_register(intf_ptr, TDC21_WREG1, (uint8_t*)&reg_i.reg1, 4);
 800e700:	f107 0308 	add.w	r3, r7, #8
 800e704:	1d1a      	adds	r2, r3, #4
 800e706:	2304      	movs	r3, #4
 800e708:	2101      	movs	r1, #1
 800e70a:	6838      	ldr	r0, [r7, #0]
 800e70c:	f7ff fe91 	bl	800e432 <tdcgp21_write_register>
	tdcgp21_write_register(intf_ptr, TDC21_WREG2, (uint8_t*)&reg_i.reg2, 4);
 800e710:	f107 0308 	add.w	r3, r7, #8
 800e714:	f103 0208 	add.w	r2, r3, #8
 800e718:	2304      	movs	r3, #4
 800e71a:	2102      	movs	r1, #2
 800e71c:	6838      	ldr	r0, [r7, #0]
 800e71e:	f7ff fe88 	bl	800e432 <tdcgp21_write_register>
	tdcgp21_write_register(intf_ptr, TDC21_WREG3, (uint8_t*)&reg_i.reg3, 4);
 800e722:	f107 0308 	add.w	r3, r7, #8
 800e726:	f103 020c 	add.w	r2, r3, #12
 800e72a:	2304      	movs	r3, #4
 800e72c:	2103      	movs	r1, #3
 800e72e:	6838      	ldr	r0, [r7, #0]
 800e730:	f7ff fe7f 	bl	800e432 <tdcgp21_write_register>
	tdcgp21_write_register(intf_ptr, TDC21_WREG4, (uint8_t*)&reg_i.reg4, 4);
 800e734:	f107 0308 	add.w	r3, r7, #8
 800e738:	f103 0210 	add.w	r2, r3, #16
 800e73c:	2304      	movs	r3, #4
 800e73e:	2104      	movs	r1, #4
 800e740:	6838      	ldr	r0, [r7, #0]
 800e742:	f7ff fe76 	bl	800e432 <tdcgp21_write_register>
	tdcgp21_write_register(intf_ptr, TDC21_WREG5, (uint8_t*)&reg_i.reg5, 4);
 800e746:	f107 0308 	add.w	r3, r7, #8
 800e74a:	f103 0214 	add.w	r2, r3, #20
 800e74e:	2304      	movs	r3, #4
 800e750:	2105      	movs	r1, #5
 800e752:	6838      	ldr	r0, [r7, #0]
 800e754:	f7ff fe6d 	bl	800e432 <tdcgp21_write_register>
	tdcgp21_write_register(intf_ptr, TDC21_WREG6, (uint8_t*)&reg_i.reg6, 4);
 800e758:	f107 0308 	add.w	r3, r7, #8
 800e75c:	f103 0218 	add.w	r2, r3, #24
 800e760:	2304      	movs	r3, #4
 800e762:	2106      	movs	r1, #6
 800e764:	6838      	ldr	r0, [r7, #0]
 800e766:	f7ff fe64 	bl	800e432 <tdcgp21_write_register>

    //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//
	return reg_i;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	461d      	mov	r5, r3
 800e76e:	f107 0408 	add.w	r4, r7, #8
 800e772:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e774:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e776:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800e77a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	3768      	adds	r7, #104	; 0x68
 800e782:	46bd      	mov	sp, r7
 800e784:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e788 <cb_push>:


#define GPS_SYMBOLS_PER_ACTS 500

static bool cb_push(uint8_t byte)
{
 800e788:	b480      	push	{r7}
 800e78a:	b085      	sub	sp, #20
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	4603      	mov	r3, r0
 800e790:	71fb      	strb	r3, [r7, #7]

	size_t next_head = uart_buffer_head + 1;
 800e792:	4b10      	ldr	r3, [pc, #64]	; (800e7d4 <cb_push+0x4c>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	3301      	adds	r3, #1
 800e798:	60fb      	str	r3, [r7, #12]
	if (next_head >= sizeof(uart_buffer) / sizeof(uart_buffer[0]))
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e7a0:	d301      	bcc.n	800e7a6 <cb_push+0x1e>
		next_head = 0;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	60fb      	str	r3, [r7, #12]

	if (next_head == uart_buffer_tail)
 800e7a6:	4b0c      	ldr	r3, [pc, #48]	; (800e7d8 <cb_push+0x50>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	68fa      	ldr	r2, [r7, #12]
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	d101      	bne.n	800e7b4 <cb_push+0x2c>
		return false;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	e008      	b.n	800e7c6 <cb_push+0x3e>

	uart_buffer[uart_buffer_head] = byte;
 800e7b4:	4b07      	ldr	r3, [pc, #28]	; (800e7d4 <cb_push+0x4c>)
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	4908      	ldr	r1, [pc, #32]	; (800e7dc <cb_push+0x54>)
 800e7ba:	79fa      	ldrb	r2, [r7, #7]
 800e7bc:	54ca      	strb	r2, [r1, r3]
	uart_buffer_head = next_head;
 800e7be:	4a05      	ldr	r2, [pc, #20]	; (800e7d4 <cb_push+0x4c>)
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	6013      	str	r3, [r2, #0]
	return true;
 800e7c4:	2301      	movs	r3, #1
}
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	3714      	adds	r7, #20
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d0:	4770      	bx	lr
 800e7d2:	bf00      	nop
 800e7d4:	20002734 	.word	0x20002734
 800e7d8:	20002738 	.word	0x20002738
 800e7dc:	2000234c 	.word	0x2000234c

0800e7e0 <gps_push_byte>:
	return 0;
}


int gps_push_byte(uint8_t byte)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b082      	sub	sp, #8
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	71fb      	strb	r3, [r7, #7]
	cb_push(byte);
 800e7ea:	79fb      	ldrb	r3, [r7, #7]
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f7ff ffcb 	bl	800e788 <cb_push>
	return 0;
 800e7f2:	2300      	movs	r3, #0
}
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	3708      	adds	r7, #8
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	bd80      	pop	{r7, pc}

0800e7fc <lis3mdl_write>:
#ifdef HAL_SPI_MODULE_ENABLED
extern SPI_HandleTypeDef hspi1;


static int32_t lis3mdl_write(void * intf_ptr, uint8_t reg_addr, const uint8_t * data, uint16_t data_size)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b086      	sub	sp, #24
 800e800:	af00      	add	r7, sp, #0
 800e802:	60f8      	str	r0, [r7, #12]
 800e804:	607a      	str	r2, [r7, #4]
 800e806:	461a      	mov	r2, r3
 800e808:	460b      	mov	r3, r1
 800e80a:	72fb      	strb	r3, [r7, #11]
 800e80c:	4613      	mov	r3, r2
 800e80e:	813b      	strh	r3, [r7, #8]

	struct lis_spi_intf* spi_intf = intf_ptr;
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	617b      	str	r3, [r7, #20]

	reg_addr=reg_addr&~(1<<7);
 800e814:	7afb      	ldrb	r3, [r7, #11]
 800e816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e81a:	b2db      	uxtb	r3, r3
 800e81c:	72fb      	strb	r3, [r7, #11]
	reg_addr=reg_addr|(1<<6);
 800e81e:	7afb      	ldrb	r3, [r7, #11]
 800e820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e824:	b2db      	uxtb	r3, r3
 800e826:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin (spi_intf->GPIO_Port,spi_intf->GPIO_Pin, GPIO_PIN_RESET);
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	6818      	ldr	r0, [r3, #0]
 800e82c:	697b      	ldr	r3, [r7, #20]
 800e82e:	889b      	ldrh	r3, [r3, #4]
 800e830:	2200      	movs	r2, #0
 800e832:	4619      	mov	r1, r3
 800e834:	f7f8 fb48 	bl	8006ec8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi_intf->spi, &reg_addr, 1, HAL_MAX_DELAY);
 800e838:	697b      	ldr	r3, [r7, #20]
 800e83a:	6898      	ldr	r0, [r3, #8]
 800e83c:	f107 010b 	add.w	r1, r7, #11
 800e840:	f04f 33ff 	mov.w	r3, #4294967295
 800e844:	2201      	movs	r2, #1
 800e846:	f7fa ff9e 	bl	8009786 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(spi_intf->spi, (uint8_t*)data, data_size, HAL_MAX_DELAY);
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	6898      	ldr	r0, [r3, #8]
 800e84e:	893a      	ldrh	r2, [r7, #8]
 800e850:	f04f 33ff 	mov.w	r3, #4294967295
 800e854:	6879      	ldr	r1, [r7, #4]
 800e856:	f7fa ff96 	bl	8009786 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_SET);
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	6818      	ldr	r0, [r3, #0]
 800e85e:	697b      	ldr	r3, [r7, #20]
 800e860:	889b      	ldrh	r3, [r3, #4]
 800e862:	2201      	movs	r2, #1
 800e864:	4619      	mov	r1, r3
 800e866:	f7f8 fb2f 	bl	8006ec8 <HAL_GPIO_WritePin>
	return 0;
 800e86a:	2300      	movs	r3, #0
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	3718      	adds	r7, #24
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}

0800e874 <lis3mdl_read>:


static int32_t lis3mdl_read(void * intf_ptr, uint8_t reg_addr, uint8_t * data, uint16_t data_size)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b086      	sub	sp, #24
 800e878:	af00      	add	r7, sp, #0
 800e87a:	60f8      	str	r0, [r7, #12]
 800e87c:	607a      	str	r2, [r7, #4]
 800e87e:	461a      	mov	r2, r3
 800e880:	460b      	mov	r3, r1
 800e882:	72fb      	strb	r3, [r7, #11]
 800e884:	4613      	mov	r3, r2
 800e886:	813b      	strh	r3, [r7, #8]
	struct lis_spi_intf* spi_intf = intf_ptr;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	617b      	str	r3, [r7, #20]

	reg_addr=reg_addr|(1<<7);
 800e88c:	7afb      	ldrb	r3, [r7, #11]
 800e88e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e892:	b2db      	uxtb	r3, r3
 800e894:	72fb      	strb	r3, [r7, #11]
	reg_addr=reg_addr|(1<<6);
 800e896:	7afb      	ldrb	r3, [r7, #11]
 800e898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e89c:	b2db      	uxtb	r3, r3
 800e89e:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin (spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_RESET);
 800e8a0:	697b      	ldr	r3, [r7, #20]
 800e8a2:	6818      	ldr	r0, [r3, #0]
 800e8a4:	697b      	ldr	r3, [r7, #20]
 800e8a6:	889b      	ldrh	r3, [r3, #4]
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	4619      	mov	r1, r3
 800e8ac:	f7f8 fb0c 	bl	8006ec8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi_intf->spi, &reg_addr, 1, HAL_MAX_DELAY);
 800e8b0:	697b      	ldr	r3, [r7, #20]
 800e8b2:	6898      	ldr	r0, [r3, #8]
 800e8b4:	f107 010b 	add.w	r1, r7, #11
 800e8b8:	f04f 33ff 	mov.w	r3, #4294967295
 800e8bc:	2201      	movs	r2, #1
 800e8be:	f7fa ff62 	bl	8009786 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi_intf->spi, data, data_size, HAL_MAX_DELAY);
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	6898      	ldr	r0, [r3, #8]
 800e8c6:	893a      	ldrh	r2, [r7, #8]
 800e8c8:	f04f 33ff 	mov.w	r3, #4294967295
 800e8cc:	6879      	ldr	r1, [r7, #4]
 800e8ce:	f7fb f896 	bl	80099fe <HAL_SPI_Receive>
	HAL_GPIO_WritePin(spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_SET);
 800e8d2:	697b      	ldr	r3, [r7, #20]
 800e8d4:	6818      	ldr	r0, [r3, #0]
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	889b      	ldrh	r3, [r3, #4]
 800e8da:	2201      	movs	r2, #1
 800e8dc:	4619      	mov	r1, r3
 800e8de:	f7f8 faf3 	bl	8006ec8 <HAL_GPIO_WritePin>
	return 0;
 800e8e2:	2300      	movs	r3, #0
}
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	3718      	adds	r7, #24
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bd80      	pop	{r7, pc}

0800e8ec <lisset>:



void lisset(stmdev_ctx_t *ctx, struct lis_spi_intf *spi_interface)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b084      	sub	sp, #16
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	6039      	str	r1, [r7, #0]
// Настройка lismdl =-=-=-=-=-=-=-=-=-=-=-=-
	// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	ctx->handle = spi_interface;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	683a      	ldr	r2, [r7, #0]
 800e8fa:	609a      	str	r2, [r3, #8]
	ctx->read_reg = lis3mdl_read;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	4a1a      	ldr	r2, [pc, #104]	; (800e968 <lisset+0x7c>)
 800e900:	605a      	str	r2, [r3, #4]
	ctx->write_reg = lis3mdl_write;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	4a19      	ldr	r2, [pc, #100]	; (800e96c <lisset+0x80>)
 800e906:	601a      	str	r2, [r3, #0]

	// Это придется делать прямо сразу еще до всего
	// так как иначе он с ним общаться не сможет (судя по доке по-крайней мере)
	lis3mdl_spi_mode_set(ctx, LIS3MDL_SPI_3_WIRE);
 800e908:	2101      	movs	r1, #1
 800e90a:	6878      	ldr	r0, [r7, #4]
 800e90c:	f000 fa79 	bl	800ee02 <lis3mdl_spi_mode_set>

	uint8_t whoami_mag = 0x00;
 800e910:	2300      	movs	r3, #0
 800e912:	73fb      	strb	r3, [r7, #15]
	lis3mdl_device_id_get(ctx, &whoami_mag);
 800e914:	f107 030f 	add.w	r3, r7, #15
 800e918:	4619      	mov	r1, r3
 800e91a:	6878      	ldr	r0, [r7, #4]
 800e91c:	f000 fa3a 	bl	800ed94 <lis3mdl_device_id_get>

	// Убедились что датчик тот который нам нужен
	// Сбросим его
	lis3mdl_reset_set(ctx, PROPERTY_ENABLE);
 800e920:	2101      	movs	r1, #1
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	f000 fa47 	bl	800edb6 <lis3mdl_reset_set>
	HAL_Delay(100);
 800e928:	2064      	movs	r0, #100	; 0x64
 800e92a:	f7f7 fb25 	bl	8005f78 <HAL_Delay>

	// Настраиваем
	// Обновление данных только целыми порциями
	lis3mdl_block_data_update_set(ctx, PROPERTY_ENABLE);
 800e92e:	2101      	movs	r1, #1
 800e930:	6878      	ldr	r0, [r7, #4]
 800e932:	f000 f99b 	bl	800ec6c <lis3mdl_block_data_update_set>
	// Без экономии энергии
	lis3mdl_fast_low_power_set(ctx, PROPERTY_DISABLE);
 800e936:	2100      	movs	r1, #0
 800e938:	6878      	ldr	r0, [r7, #4]
 800e93a:	f000 f971 	bl	800ec20 <lis3mdl_fast_low_power_set>
	// Диапазон измерения (внимание LSM303 умеет только 16G)
	lis3mdl_full_scale_set(ctx, LIS3MDL_16_GAUSS);
 800e93e:	2103      	movs	r1, #3
 800e940:	6878      	ldr	r0, [r7, #4]
 800e942:	f000 f921 	bl	800eb88 <lis3mdl_full_scale_set>
	// Частота опроса
	// внимание для LSM303 запрещены значения
	// LIS3MDL_LP_1kHz, LIS3MDL_MP_560Hz, LIS3MDL_HP_300Hz, LIS3MDL_UHP_155Hz
	lis3mdl_data_rate_set(ctx, LIS3MDL_UHP_80Hz);
 800e946:	213e      	movs	r1, #62	; 0x3e
 800e948:	6878      	ldr	r0, [r7, #4]
 800e94a:	f000 f8b1 	bl	800eab0 <lis3mdl_data_rate_set>
	// Включаем температурный сенсор
	lis3mdl_temperature_meas_set(ctx, PROPERTY_ENABLE);
 800e94e:	2101      	movs	r1, #1
 800e950:	6878      	ldr	r0, [r7, #4]
 800e952:	f000 f8f3 	bl	800eb3c <lis3mdl_temperature_meas_set>
	// режим работы
	lis3mdl_operating_mode_set(ctx, LIS3MDL_CONTINUOUS_MODE);
 800e956:	2100      	movs	r1, #0
 800e958:	6878      	ldr	r0, [r7, #4]
 800e95a:	f000 f93b 	bl	800ebd4 <lis3mdl_operating_mode_set>
}
 800e95e:	bf00      	nop
 800e960:	3710      	adds	r7, #16
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}
 800e966:	bf00      	nop
 800e968:	0800e875 	.word	0x0800e875
 800e96c:	0800e7fd 	.word	0x0800e7fd

0800e970 <lisread>:
	// режим работы
	lis3mdl_operating_mode_set(ctx, LIS3MDL_CONTINUOUS_MODE);
}

void lisread(stmdev_ctx_t *ctx, float *temperature_celsius_mag, float (*mag)[3])
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b088      	sub	sp, #32
 800e974:	af00      	add	r7, sp, #0
 800e976:	60f8      	str	r0, [r7, #12]
 800e978:	60b9      	str	r1, [r7, #8]
 800e97a:	607a      	str	r2, [r7, #4]
    int16_t temperataure_raw_mag;
	int16_t mag_raw[3];
	lis3mdl_magnetic_raw_get(ctx, mag_raw);
 800e97c:	f107 0314 	add.w	r3, r7, #20
 800e980:	4619      	mov	r1, r3
 800e982:	68f8      	ldr	r0, [r7, #12]
 800e984:	f000 f998 	bl	800ecb8 <lis3mdl_magnetic_raw_get>
	lis3mdl_temperature_raw_get(ctx, &temperataure_raw_mag);
 800e988:	f107 031a 	add.w	r3, r7, #26
 800e98c:	4619      	mov	r1, r3
 800e98e:	68f8      	ldr	r0, [r7, #12]
 800e990:	f000 f9dd 	bl	800ed4e <lis3mdl_temperature_raw_get>
	*temperature_celsius_mag = lis3mdl_from_lsb_to_celsius(temperataure_raw_mag);
 800e994:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800e998:	4618      	mov	r0, r3
 800e99a:	f000 f86f 	bl	800ea7c <lis3mdl_from_lsb_to_celsius>
 800e99e:	eef0 7a40 	vmov.f32	s15, s0
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 3; i++)
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	61fb      	str	r3, [r7, #28]
 800e9ac:	e014      	b.n	800e9d8 <lisread+0x68>
		(*mag)[i] = lis3mdl_from_fs16_to_gauss(mag_raw[i]);
 800e9ae:	69fb      	ldr	r3, [r7, #28]
 800e9b0:	005b      	lsls	r3, r3, #1
 800e9b2:	f107 0220 	add.w	r2, r7, #32
 800e9b6:	4413      	add	r3, r2
 800e9b8:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f000 f843 	bl	800ea48 <lis3mdl_from_fs16_to_gauss>
 800e9c2:	eef0 7a40 	vmov.f32	s15, s0
 800e9c6:	687a      	ldr	r2, [r7, #4]
 800e9c8:	69fb      	ldr	r3, [r7, #28]
 800e9ca:	009b      	lsls	r3, r3, #2
 800e9cc:	4413      	add	r3, r2
 800e9ce:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 3; i++)
 800e9d2:	69fb      	ldr	r3, [r7, #28]
 800e9d4:	3301      	adds	r3, #1
 800e9d6:	61fb      	str	r3, [r7, #28]
 800e9d8:	69fb      	ldr	r3, [r7, #28]
 800e9da:	2b02      	cmp	r3, #2
 800e9dc:	dde7      	ble.n	800e9ae <lisread+0x3e>
}
 800e9de:	bf00      	nop
 800e9e0:	bf00      	nop
 800e9e2:	3720      	adds	r7, #32
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <lis3mdl_read_reg>:
  *
  */
int32_t lis3mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800e9e8:	b590      	push	{r4, r7, lr}
 800e9ea:	b087      	sub	sp, #28
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	60f8      	str	r0, [r7, #12]
 800e9f0:	607a      	str	r2, [r7, #4]
 800e9f2:	461a      	mov	r2, r3
 800e9f4:	460b      	mov	r3, r1
 800e9f6:	72fb      	strb	r3, [r7, #11]
 800e9f8:	4613      	mov	r3, r2
 800e9fa:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	685c      	ldr	r4, [r3, #4]
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	6898      	ldr	r0, [r3, #8]
 800ea04:	893b      	ldrh	r3, [r7, #8]
 800ea06:	7af9      	ldrb	r1, [r7, #11]
 800ea08:	687a      	ldr	r2, [r7, #4]
 800ea0a:	47a0      	blx	r4
 800ea0c:	6178      	str	r0, [r7, #20]

  return ret;
 800ea0e:	697b      	ldr	r3, [r7, #20]
}
 800ea10:	4618      	mov	r0, r3
 800ea12:	371c      	adds	r7, #28
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd90      	pop	{r4, r7, pc}

0800ea18 <lis3mdl_write_reg>:
  *
  */
int32_t lis3mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800ea18:	b590      	push	{r4, r7, lr}
 800ea1a:	b087      	sub	sp, #28
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	60f8      	str	r0, [r7, #12]
 800ea20:	607a      	str	r2, [r7, #4]
 800ea22:	461a      	mov	r2, r3
 800ea24:	460b      	mov	r3, r1
 800ea26:	72fb      	strb	r3, [r7, #11]
 800ea28:	4613      	mov	r3, r2
 800ea2a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	681c      	ldr	r4, [r3, #0]
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	6898      	ldr	r0, [r3, #8]
 800ea34:	893b      	ldrh	r3, [r7, #8]
 800ea36:	7af9      	ldrb	r1, [r7, #11]
 800ea38:	687a      	ldr	r2, [r7, #4]
 800ea3a:	47a0      	blx	r4
 800ea3c:	6178      	str	r0, [r7, #20]

  return ret;
 800ea3e:	697b      	ldr	r3, [r7, #20]
}
 800ea40:	4618      	mov	r0, r3
 800ea42:	371c      	adds	r7, #28
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd90      	pop	{r4, r7, pc}

0800ea48 <lis3mdl_from_fs16_to_gauss>:
{
  return ((float_t)lsb / 2281.0f);
}

float_t lis3mdl_from_fs16_to_gauss(int16_t lsb)
{
 800ea48:	b480      	push	{r7}
 800ea4a:	b083      	sub	sp, #12
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	4603      	mov	r3, r0
 800ea50:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 1711.0f);
 800ea52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ea56:	ee07 3a90 	vmov	s15, r3
 800ea5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ea5e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800ea78 <lis3mdl_from_fs16_to_gauss+0x30>
 800ea62:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ea66:	eef0 7a66 	vmov.f32	s15, s13
}
 800ea6a:	eeb0 0a67 	vmov.f32	s0, s15
 800ea6e:	370c      	adds	r7, #12
 800ea70:	46bd      	mov	sp, r7
 800ea72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea76:	4770      	bx	lr
 800ea78:	44d5e000 	.word	0x44d5e000

0800ea7c <lis3mdl_from_lsb_to_celsius>:

float_t lis3mdl_from_lsb_to_celsius(int16_t lsb)
{
 800ea7c:	b480      	push	{r7}
 800ea7e:	b083      	sub	sp, #12
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	4603      	mov	r3, r0
 800ea84:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 8.0f) + (25.0f);
 800ea86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ea8a:	ee07 3a90 	vmov	s15, r3
 800ea8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ea92:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800ea96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ea9a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800ea9e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800eaa2:	eeb0 0a67 	vmov.f32	s0, s15
 800eaa6:	370c      	adds	r7, #12
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaae:	4770      	bx	lr

0800eab0 <lis3mdl_data_rate_set>:
  * @param  val         change the values of om in reg CTRL_REG1
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_data_rate_set(stmdev_ctx_t *ctx, lis3mdl_om_t val)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b086      	sub	sp, #24
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
 800eab8:	460b      	mov	r3, r1
 800eaba:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg1_t ctrl_reg1;
  lis3mdl_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800eabc:	f107 0210 	add.w	r2, r7, #16
 800eac0:	2301      	movs	r3, #1
 800eac2:	2120      	movs	r1, #32
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f7ff ff8f 	bl	800e9e8 <lis3mdl_read_reg>
 800eaca:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800eacc:	697b      	ldr	r3, [r7, #20]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d10f      	bne.n	800eaf2 <lis3mdl_data_rate_set+0x42>
  {
    ctrl_reg1.om = (uint8_t)val;
 800ead2:	78fb      	ldrb	r3, [r7, #3]
 800ead4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ead8:	b2da      	uxtb	r2, r3
 800eada:	7c3b      	ldrb	r3, [r7, #16]
 800eadc:	f362 0346 	bfi	r3, r2, #1, #6
 800eae0:	743b      	strb	r3, [r7, #16]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800eae2:	f107 0210 	add.w	r2, r7, #16
 800eae6:	2301      	movs	r3, #1
 800eae8:	2120      	movs	r1, #32
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f7ff ff94 	bl	800ea18 <lis3mdl_write_reg>
 800eaf0:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800eaf2:	697b      	ldr	r3, [r7, #20]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d107      	bne.n	800eb08 <lis3mdl_data_rate_set+0x58>
  {
    /* set mode also for z axis, ctrl_reg4 -> omz */
    ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 800eaf8:	f107 020c 	add.w	r2, r7, #12
 800eafc:	2301      	movs	r3, #1
 800eafe:	2123      	movs	r1, #35	; 0x23
 800eb00:	6878      	ldr	r0, [r7, #4]
 800eb02:	f7ff ff71 	bl	800e9e8 <lis3mdl_read_reg>
 800eb06:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800eb08:	697b      	ldr	r3, [r7, #20]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d111      	bne.n	800eb32 <lis3mdl_data_rate_set+0x82>
  {
    ctrl_reg4.omz = (uint8_t)(((uint8_t) val >> 4) & 0x03U);
 800eb0e:	78fb      	ldrb	r3, [r7, #3]
 800eb10:	091b      	lsrs	r3, r3, #4
 800eb12:	b2db      	uxtb	r3, r3
 800eb14:	f003 0303 	and.w	r3, r3, #3
 800eb18:	b2da      	uxtb	r2, r3
 800eb1a:	7b3b      	ldrb	r3, [r7, #12]
 800eb1c:	f362 0383 	bfi	r3, r2, #2, #2
 800eb20:	733b      	strb	r3, [r7, #12]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG4,
 800eb22:	f107 020c 	add.w	r2, r7, #12
 800eb26:	2301      	movs	r3, #1
 800eb28:	2123      	movs	r1, #35	; 0x23
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f7ff ff74 	bl	800ea18 <lis3mdl_write_reg>
 800eb30:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 800eb32:	697b      	ldr	r3, [r7, #20]
}
 800eb34:	4618      	mov	r0, r3
 800eb36:	3718      	adds	r7, #24
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd80      	pop	{r7, pc}

0800eb3c <lis3mdl_temperature_meas_set>:
  * @param  val      change the values of temp_en in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_temperature_meas_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b084      	sub	sp, #16
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	460b      	mov	r3, r1
 800eb46:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800eb48:	f107 0208 	add.w	r2, r7, #8
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	2120      	movs	r1, #32
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	f7ff ff49 	bl	800e9e8 <lis3mdl_read_reg>
 800eb56:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d10f      	bne.n	800eb7e <lis3mdl_temperature_meas_set+0x42>
  {
    ctrl_reg1.temp_en = val;
 800eb5e:	78fb      	ldrb	r3, [r7, #3]
 800eb60:	f003 0301 	and.w	r3, r3, #1
 800eb64:	b2da      	uxtb	r2, r3
 800eb66:	7a3b      	ldrb	r3, [r7, #8]
 800eb68:	f362 13c7 	bfi	r3, r2, #7, #1
 800eb6c:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800eb6e:	f107 0208 	add.w	r2, r7, #8
 800eb72:	2301      	movs	r3, #1
 800eb74:	2120      	movs	r1, #32
 800eb76:	6878      	ldr	r0, [r7, #4]
 800eb78:	f7ff ff4e 	bl	800ea18 <lis3mdl_write_reg>
 800eb7c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
}
 800eb80:	4618      	mov	r0, r3
 800eb82:	3710      	adds	r7, #16
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}

0800eb88 <lis3mdl_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_full_scale_set(stmdev_ctx_t *ctx, lis3mdl_fs_t val)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b084      	sub	sp, #16
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
 800eb90:	460b      	mov	r3, r1
 800eb92:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800eb94:	f107 0208 	add.w	r2, r7, #8
 800eb98:	2301      	movs	r3, #1
 800eb9a:	2121      	movs	r1, #33	; 0x21
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f7ff ff23 	bl	800e9e8 <lis3mdl_read_reg>
 800eba2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d10f      	bne.n	800ebca <lis3mdl_full_scale_set+0x42>
  {
    ctrl_reg2.fs = (uint8_t)val;
 800ebaa:	78fb      	ldrb	r3, [r7, #3]
 800ebac:	f003 0303 	and.w	r3, r3, #3
 800ebb0:	b2da      	uxtb	r2, r3
 800ebb2:	7a3b      	ldrb	r3, [r7, #8]
 800ebb4:	f362 1346 	bfi	r3, r2, #5, #2
 800ebb8:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800ebba:	f107 0208 	add.w	r2, r7, #8
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	2121      	movs	r1, #33	; 0x21
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f7ff ff28 	bl	800ea18 <lis3mdl_write_reg>
 800ebc8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ebca:	68fb      	ldr	r3, [r7, #12]
}
 800ebcc:	4618      	mov	r0, r3
 800ebce:	3710      	adds	r7, #16
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}

0800ebd4 <lis3mdl_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis3mdl_md_t val)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b084      	sub	sp, #16
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
 800ebdc:	460b      	mov	r3, r1
 800ebde:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg3_t ctrl_reg3;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 800ebe0:	f107 0208 	add.w	r2, r7, #8
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	2122      	movs	r1, #34	; 0x22
 800ebe8:	6878      	ldr	r0, [r7, #4]
 800ebea:	f7ff fefd 	bl	800e9e8 <lis3mdl_read_reg>
 800ebee:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d10f      	bne.n	800ec16 <lis3mdl_operating_mode_set+0x42>
  {
    ctrl_reg3.md = (uint8_t)val;
 800ebf6:	78fb      	ldrb	r3, [r7, #3]
 800ebf8:	f003 0303 	and.w	r3, r3, #3
 800ebfc:	b2da      	uxtb	r2, r3
 800ebfe:	7a3b      	ldrb	r3, [r7, #8]
 800ec00:	f362 0301 	bfi	r3, r2, #0, #2
 800ec04:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 800ec06:	f107 0208 	add.w	r2, r7, #8
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	2122      	movs	r1, #34	; 0x22
 800ec0e:	6878      	ldr	r0, [r7, #4]
 800ec10:	f7ff ff02 	bl	800ea18 <lis3mdl_write_reg>
 800ec14:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ec16:	68fb      	ldr	r3, [r7, #12]
}
 800ec18:	4618      	mov	r0, r3
 800ec1a:	3710      	adds	r7, #16
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd80      	pop	{r7, pc}

0800ec20 <lis3mdl_fast_low_power_set>:
  * @param  val      change the values of lp in reg CTRL_REG3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_fast_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b084      	sub	sp, #16
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
 800ec28:	460b      	mov	r3, r1
 800ec2a:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg3_t ctrl_reg3;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 800ec2c:	f107 0208 	add.w	r2, r7, #8
 800ec30:	2301      	movs	r3, #1
 800ec32:	2122      	movs	r1, #34	; 0x22
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	f7ff fed7 	bl	800e9e8 <lis3mdl_read_reg>
 800ec3a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d10f      	bne.n	800ec62 <lis3mdl_fast_low_power_set+0x42>
  {
    ctrl_reg3.lp = val;
 800ec42:	78fb      	ldrb	r3, [r7, #3]
 800ec44:	f003 0301 	and.w	r3, r3, #1
 800ec48:	b2da      	uxtb	r2, r3
 800ec4a:	7a3b      	ldrb	r3, [r7, #8]
 800ec4c:	f362 1345 	bfi	r3, r2, #5, #1
 800ec50:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 800ec52:	f107 0208 	add.w	r2, r7, #8
 800ec56:	2301      	movs	r3, #1
 800ec58:	2122      	movs	r1, #34	; 0x22
 800ec5a:	6878      	ldr	r0, [r7, #4]
 800ec5c:	f7ff fedc 	bl	800ea18 <lis3mdl_write_reg>
 800ec60:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ec62:	68fb      	ldr	r3, [r7, #12]
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	3710      	adds	r7, #16
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}

0800ec6c <lis3mdl_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG5
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b084      	sub	sp, #16
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
 800ec74:	460b      	mov	r3, r1
 800ec76:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg5_t ctrl_reg5;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 800ec78:	f107 0208 	add.w	r2, r7, #8
 800ec7c:	2301      	movs	r3, #1
 800ec7e:	2124      	movs	r1, #36	; 0x24
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f7ff feb1 	bl	800e9e8 <lis3mdl_read_reg>
 800ec86:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d10f      	bne.n	800ecae <lis3mdl_block_data_update_set+0x42>
  {
    ctrl_reg5.bdu = val;
 800ec8e:	78fb      	ldrb	r3, [r7, #3]
 800ec90:	f003 0301 	and.w	r3, r3, #1
 800ec94:	b2da      	uxtb	r2, r3
 800ec96:	7a3b      	ldrb	r3, [r7, #8]
 800ec98:	f362 1386 	bfi	r3, r2, #6, #1
 800ec9c:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 800ec9e:	f107 0208 	add.w	r2, r7, #8
 800eca2:	2301      	movs	r3, #1
 800eca4:	2124      	movs	r1, #36	; 0x24
 800eca6:	6878      	ldr	r0, [r7, #4]
 800eca8:	f7ff feb6 	bl	800ea18 <lis3mdl_write_reg>
 800ecac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ecae:	68fb      	ldr	r3, [r7, #12]
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	3710      	adds	r7, #16
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}

0800ecb8 <lis3mdl_magnetic_raw_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b086      	sub	sp, #24
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
 800ecc0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_OUT_X_L, (uint8_t *) buff, 6);
 800ecc2:	f107 020c 	add.w	r2, r7, #12
 800ecc6:	2306      	movs	r3, #6
 800ecc8:	2128      	movs	r1, #40	; 0x28
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	f7ff fe8c 	bl	800e9e8 <lis3mdl_read_reg>
 800ecd0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800ecd2:	7b7b      	ldrb	r3, [r7, #13]
 800ecd4:	b21a      	sxth	r2, r3
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ece0:	b29b      	uxth	r3, r3
 800ece2:	021b      	lsls	r3, r3, #8
 800ece4:	b29a      	uxth	r2, r3
 800ece6:	7b3b      	ldrb	r3, [r7, #12]
 800ece8:	b29b      	uxth	r3, r3
 800ecea:	4413      	add	r3, r2
 800ecec:	b29b      	uxth	r3, r3
 800ecee:	b21a      	sxth	r2, r3
 800ecf0:	683b      	ldr	r3, [r7, #0]
 800ecf2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800ecf4:	7bfa      	ldrb	r2, [r7, #15]
 800ecf6:	683b      	ldr	r3, [r7, #0]
 800ecf8:	3302      	adds	r3, #2
 800ecfa:	b212      	sxth	r2, r2
 800ecfc:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	3302      	adds	r3, #2
 800ed02:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ed06:	b29b      	uxth	r3, r3
 800ed08:	021b      	lsls	r3, r3, #8
 800ed0a:	b29a      	uxth	r2, r3
 800ed0c:	7bbb      	ldrb	r3, [r7, #14]
 800ed0e:	b29b      	uxth	r3, r3
 800ed10:	4413      	add	r3, r2
 800ed12:	b29a      	uxth	r2, r3
 800ed14:	683b      	ldr	r3, [r7, #0]
 800ed16:	3302      	adds	r3, #2
 800ed18:	b212      	sxth	r2, r2
 800ed1a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800ed1c:	7c7a      	ldrb	r2, [r7, #17]
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	3304      	adds	r3, #4
 800ed22:	b212      	sxth	r2, r2
 800ed24:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	3304      	adds	r3, #4
 800ed2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ed2e:	b29b      	uxth	r3, r3
 800ed30:	021b      	lsls	r3, r3, #8
 800ed32:	b29a      	uxth	r2, r3
 800ed34:	7c3b      	ldrb	r3, [r7, #16]
 800ed36:	b29b      	uxth	r3, r3
 800ed38:	4413      	add	r3, r2
 800ed3a:	b29a      	uxth	r2, r3
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	3304      	adds	r3, #4
 800ed40:	b212      	sxth	r2, r2
 800ed42:	801a      	strh	r2, [r3, #0]

  return ret;
 800ed44:	697b      	ldr	r3, [r7, #20]
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3718      	adds	r7, #24
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}

0800ed4e <lis3mdl_temperature_raw_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800ed4e:	b580      	push	{r7, lr}
 800ed50:	b084      	sub	sp, #16
 800ed52:	af00      	add	r7, sp, #0
 800ed54:	6078      	str	r0, [r7, #4]
 800ed56:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_TEMP_OUT_L, (uint8_t *) buff, 2);
 800ed58:	f107 0208 	add.w	r2, r7, #8
 800ed5c:	2302      	movs	r3, #2
 800ed5e:	212e      	movs	r1, #46	; 0x2e
 800ed60:	6878      	ldr	r0, [r7, #4]
 800ed62:	f7ff fe41 	bl	800e9e8 <lis3mdl_read_reg>
 800ed66:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800ed68:	7a7b      	ldrb	r3, [r7, #9]
 800ed6a:	b21a      	sxth	r2, r3
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ed76:	b29b      	uxth	r3, r3
 800ed78:	021b      	lsls	r3, r3, #8
 800ed7a:	b29a      	uxth	r2, r3
 800ed7c:	7a3b      	ldrb	r3, [r7, #8]
 800ed7e:	b29b      	uxth	r3, r3
 800ed80:	4413      	add	r3, r2
 800ed82:	b29b      	uxth	r3, r3
 800ed84:	b21a      	sxth	r2, r3
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	801a      	strh	r2, [r3, #0]

  return ret;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
}
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	3710      	adds	r7, #16
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd80      	pop	{r7, pc}

0800ed94 <lis3mdl_device_id_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b084      	sub	sp, #16
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
 800ed9c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_WHO_AM_I, (uint8_t *) buff, 1);
 800ed9e:	2301      	movs	r3, #1
 800eda0:	683a      	ldr	r2, [r7, #0]
 800eda2:	210f      	movs	r1, #15
 800eda4:	6878      	ldr	r0, [r7, #4]
 800eda6:	f7ff fe1f 	bl	800e9e8 <lis3mdl_read_reg>
 800edaa:	60f8      	str	r0, [r7, #12]

  return ret;
 800edac:	68fb      	ldr	r3, [r7, #12]
}
 800edae:	4618      	mov	r0, r3
 800edb0:	3710      	adds	r7, #16
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}

0800edb6 <lis3mdl_reset_set>:
  * @param  val      change the values of soft_rst in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800edb6:	b580      	push	{r7, lr}
 800edb8:	b084      	sub	sp, #16
 800edba:	af00      	add	r7, sp, #0
 800edbc:	6078      	str	r0, [r7, #4]
 800edbe:	460b      	mov	r3, r1
 800edc0:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800edc2:	f107 0208 	add.w	r2, r7, #8
 800edc6:	2301      	movs	r3, #1
 800edc8:	2121      	movs	r1, #33	; 0x21
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f7ff fe0c 	bl	800e9e8 <lis3mdl_read_reg>
 800edd0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d10f      	bne.n	800edf8 <lis3mdl_reset_set+0x42>
  {
    ctrl_reg2.soft_rst = val;
 800edd8:	78fb      	ldrb	r3, [r7, #3]
 800edda:	f003 0301 	and.w	r3, r3, #1
 800edde:	b2da      	uxtb	r2, r3
 800ede0:	7a3b      	ldrb	r3, [r7, #8]
 800ede2:	f362 0382 	bfi	r3, r2, #2, #1
 800ede6:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800ede8:	f107 0208 	add.w	r2, r7, #8
 800edec:	2301      	movs	r3, #1
 800edee:	2121      	movs	r1, #33	; 0x21
 800edf0:	6878      	ldr	r0, [r7, #4]
 800edf2:	f7ff fe11 	bl	800ea18 <lis3mdl_write_reg>
 800edf6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800edf8:	68fb      	ldr	r3, [r7, #12]
}
 800edfa:	4618      	mov	r0, r3
 800edfc:	3710      	adds	r7, #16
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd80      	pop	{r7, pc}

0800ee02 <lis3mdl_spi_mode_set>:
  * @param  val      change the values of sim in reg CTRL_REG3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_spi_mode_set(stmdev_ctx_t *ctx, lis3mdl_sim_t val)
{
 800ee02:	b580      	push	{r7, lr}
 800ee04:	b084      	sub	sp, #16
 800ee06:	af00      	add	r7, sp, #0
 800ee08:	6078      	str	r0, [r7, #4]
 800ee0a:	460b      	mov	r3, r1
 800ee0c:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg3_t ctrl_reg3;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 800ee0e:	f107 0208 	add.w	r2, r7, #8
 800ee12:	2301      	movs	r3, #1
 800ee14:	2122      	movs	r1, #34	; 0x22
 800ee16:	6878      	ldr	r0, [r7, #4]
 800ee18:	f7ff fde6 	bl	800e9e8 <lis3mdl_read_reg>
 800ee1c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d10f      	bne.n	800ee44 <lis3mdl_spi_mode_set+0x42>
  {
    ctrl_reg3.sim = (uint8_t)val;
 800ee24:	78fb      	ldrb	r3, [r7, #3]
 800ee26:	f003 0301 	and.w	r3, r3, #1
 800ee2a:	b2da      	uxtb	r2, r3
 800ee2c:	7a3b      	ldrb	r3, [r7, #8]
 800ee2e:	f362 0382 	bfi	r3, r2, #2, #1
 800ee32:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 800ee34:	f107 0208 	add.w	r2, r7, #8
 800ee38:	2301      	movs	r3, #1
 800ee3a:	2122      	movs	r1, #34	; 0x22
 800ee3c:	6878      	ldr	r0, [r7, #4]
 800ee3e:	f7ff fdeb 	bl	800ea18 <lis3mdl_write_reg>
 800ee42:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ee44:	68fb      	ldr	r3, [r7, #12]
}
 800ee46:	4618      	mov	r0, r3
 800ee48:	3710      	adds	r7, #16
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	bd80      	pop	{r7, pc}

0800ee4e <lsmd6s3_write>:

#ifdef HAL_SPI_MODULE_ENABLED
extern SPI_HandleTypeDef hspi1;

int32_t lsmd6s3_write(void * intf_ptr, uint8_t reg_addr, const uint8_t * data, uint16_t data_size)
{
 800ee4e:	b580      	push	{r7, lr}
 800ee50:	b086      	sub	sp, #24
 800ee52:	af00      	add	r7, sp, #0
 800ee54:	60f8      	str	r0, [r7, #12]
 800ee56:	607a      	str	r2, [r7, #4]
 800ee58:	461a      	mov	r2, r3
 800ee5a:	460b      	mov	r3, r1
 800ee5c:	72fb      	strb	r3, [r7, #11]
 800ee5e:	4613      	mov	r3, r2
 800ee60:	813b      	strh	r3, [r7, #8]
	struct lsm_spi_intf* spi_intf = intf_ptr;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	617b      	str	r3, [r7, #20]


	reg_addr=reg_addr&~(1<<7);
 800ee66:	7afb      	ldrb	r3, [r7, #11]
 800ee68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee6c:	b2db      	uxtb	r3, r3
 800ee6e:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin (spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_RESET);
 800ee70:	697b      	ldr	r3, [r7, #20]
 800ee72:	6818      	ldr	r0, [r3, #0]
 800ee74:	697b      	ldr	r3, [r7, #20]
 800ee76:	889b      	ldrh	r3, [r3, #4]
 800ee78:	2200      	movs	r2, #0
 800ee7a:	4619      	mov	r1, r3
 800ee7c:	f7f8 f824 	bl	8006ec8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi_intf->spi, &reg_addr, 1, HAL_MAX_DELAY);
 800ee80:	697b      	ldr	r3, [r7, #20]
 800ee82:	6898      	ldr	r0, [r3, #8]
 800ee84:	f107 010b 	add.w	r1, r7, #11
 800ee88:	f04f 33ff 	mov.w	r3, #4294967295
 800ee8c:	2201      	movs	r2, #1
 800ee8e:	f7fa fc7a 	bl	8009786 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(spi_intf->spi, (uint8_t*)data, data_size, HAL_MAX_DELAY);
 800ee92:	697b      	ldr	r3, [r7, #20]
 800ee94:	6898      	ldr	r0, [r3, #8]
 800ee96:	893a      	ldrh	r2, [r7, #8]
 800ee98:	f04f 33ff 	mov.w	r3, #4294967295
 800ee9c:	6879      	ldr	r1, [r7, #4]
 800ee9e:	f7fa fc72 	bl	8009786 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_SET);
 800eea2:	697b      	ldr	r3, [r7, #20]
 800eea4:	6818      	ldr	r0, [r3, #0]
 800eea6:	697b      	ldr	r3, [r7, #20]
 800eea8:	889b      	ldrh	r3, [r3, #4]
 800eeaa:	2201      	movs	r2, #1
 800eeac:	4619      	mov	r1, r3
 800eeae:	f7f8 f80b 	bl	8006ec8 <HAL_GPIO_WritePin>
	return 0;
 800eeb2:	2300      	movs	r3, #0
}
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	3718      	adds	r7, #24
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bd80      	pop	{r7, pc}

0800eebc <lsm6ds3_read>:


int32_t lsm6ds3_read(void * intf_ptr, uint8_t reg_addr, uint8_t * data, uint16_t data_size)
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b086      	sub	sp, #24
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	60f8      	str	r0, [r7, #12]
 800eec4:	607a      	str	r2, [r7, #4]
 800eec6:	461a      	mov	r2, r3
 800eec8:	460b      	mov	r3, r1
 800eeca:	72fb      	strb	r3, [r7, #11]
 800eecc:	4613      	mov	r3, r2
 800eece:	813b      	strh	r3, [r7, #8]
	struct lsm_spi_intf* spi_intf = intf_ptr;
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	617b      	str	r3, [r7, #20]


	reg_addr=reg_addr|(1<<7);
 800eed4:	7afb      	ldrb	r3, [r7, #11]
 800eed6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800eeda:	b2db      	uxtb	r3, r3
 800eedc:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin (spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_RESET);
 800eede:	697b      	ldr	r3, [r7, #20]
 800eee0:	6818      	ldr	r0, [r3, #0]
 800eee2:	697b      	ldr	r3, [r7, #20]
 800eee4:	889b      	ldrh	r3, [r3, #4]
 800eee6:	2200      	movs	r2, #0
 800eee8:	4619      	mov	r1, r3
 800eeea:	f7f7 ffed 	bl	8006ec8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi_intf->spi, &reg_addr, 1, HAL_MAX_DELAY);
 800eeee:	697b      	ldr	r3, [r7, #20]
 800eef0:	6898      	ldr	r0, [r3, #8]
 800eef2:	f107 010b 	add.w	r1, r7, #11
 800eef6:	f04f 33ff 	mov.w	r3, #4294967295
 800eefa:	2201      	movs	r2, #1
 800eefc:	f7fa fc43 	bl	8009786 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi_intf->spi, data, data_size, HAL_MAX_DELAY);
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	6898      	ldr	r0, [r3, #8]
 800ef04:	893a      	ldrh	r2, [r7, #8]
 800ef06:	f04f 33ff 	mov.w	r3, #4294967295
 800ef0a:	6879      	ldr	r1, [r7, #4]
 800ef0c:	f7fa fd77 	bl	80099fe <HAL_SPI_Receive>
	HAL_GPIO_WritePin(spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_SET);
 800ef10:	697b      	ldr	r3, [r7, #20]
 800ef12:	6818      	ldr	r0, [r3, #0]
 800ef14:	697b      	ldr	r3, [r7, #20]
 800ef16:	889b      	ldrh	r3, [r3, #4]
 800ef18:	2201      	movs	r2, #1
 800ef1a:	4619      	mov	r1, r3
 800ef1c:	f7f7 ffd4 	bl	8006ec8 <HAL_GPIO_WritePin>
	return 0;
 800ef20:	2300      	movs	r3, #0
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	3718      	adds	r7, #24
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
	...

0800ef2c <lsmset>:
	return 0;
}


void lsmset(stmdev_ctx_t *ctx, struct lsm_spi_intf *spi_interface)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b084      	sub	sp, #16
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
 800ef34:	6039      	str	r1, [r7, #0]
	// Настройка lsm6ds3 =-=-=-=-=-=-=-=-=-=-=-=-
		// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

		ctx->handle = spi_interface;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	683a      	ldr	r2, [r7, #0]
 800ef3a:	609a      	str	r2, [r3, #8]
		ctx->read_reg = lsm6ds3_read;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	4a14      	ldr	r2, [pc, #80]	; (800ef90 <lsmset+0x64>)
 800ef40:	605a      	str	r2, [r3, #4]
		ctx->write_reg = lsmd6s3_write;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	4a13      	ldr	r2, [pc, #76]	; (800ef94 <lsmset+0x68>)
 800ef46:	601a      	str	r2, [r3, #0]

		uint8_t whoami = 0x00;
 800ef48:	2300      	movs	r3, #0
 800ef4a:	73fb      	strb	r3, [r7, #15]
		lsm6ds3_device_id_get(ctx, &whoami);
 800ef4c:	f107 030f 	add.w	r3, r7, #15
 800ef50:	4619      	mov	r1, r3
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	f000 fa5f 	bl	800f416 <lsm6ds3_device_id_get>

		lsm6ds3_reset_set(ctx, PROPERTY_ENABLE);
 800ef58:	2101      	movs	r1, #1
 800ef5a:	6878      	ldr	r0, [r7, #4]
 800ef5c:	f000 fa6c 	bl	800f438 <lsm6ds3_reset_set>
		HAL_Delay(100);
 800ef60:	2064      	movs	r0, #100	; 0x64
 800ef62:	f7f7 f809 	bl	8005f78 <HAL_Delay>

		lsm6ds3_xl_full_scale_set(ctx, LSM6DS3_16g);
 800ef66:	2101      	movs	r1, #1
 800ef68:	6878      	ldr	r0, [r7, #4]
 800ef6a:	f000 f903 	bl	800f174 <lsm6ds3_xl_full_scale_set>
		lsm6ds3_xl_data_rate_set(ctx, LSM6DS3_XL_ODR_104Hz);
 800ef6e:	2104      	movs	r1, #4
 800ef70:	6878      	ldr	r0, [r7, #4]
 800ef72:	f000 f925 	bl	800f1c0 <lsm6ds3_xl_data_rate_set>

		lsm6ds3_gy_full_scale_set(ctx, LSM6DS3_2000dps);
 800ef76:	2106      	movs	r1, #6
 800ef78:	6878      	ldr	r0, [r7, #4]
 800ef7a:	f000 f947 	bl	800f20c <lsm6ds3_gy_full_scale_set>
		lsm6ds3_gy_data_rate_set(ctx, LSM6DS3_GY_ODR_104Hz);
 800ef7e:	2104      	movs	r1, #4
 800ef80:	6878      	ldr	r0, [r7, #4]
 800ef82:	f000 f969 	bl	800f258 <lsm6ds3_gy_data_rate_set>
}
 800ef86:	bf00      	nop
 800ef88:	3710      	adds	r7, #16
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}
 800ef8e:	bf00      	nop
 800ef90:	0800eebd 	.word	0x0800eebd
 800ef94:	0800ee4f 	.word	0x0800ee4f

0800ef98 <lsmread>:

		lsm6ds3_gy_full_scale_set(ctx, LSM6DS3_2000dps);
		lsm6ds3_gy_data_rate_set(ctx, LSM6DS3_GY_ODR_104Hz);
}*/
void lsmread(stmdev_ctx_t *ctx, float *temperature_celsius_gyro, float (*acc_g)[3], float (*gyro_dps)[3])
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b08a      	sub	sp, #40	; 0x28
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	60f8      	str	r0, [r7, #12]
 800efa0:	60b9      	str	r1, [r7, #8]
 800efa2:	607a      	str	r2, [r7, #4]
 800efa4:	603b      	str	r3, [r7, #0]
	// Чтение данных из lsm6ds3
		// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
		int16_t temperature_raw_gyro = {0};
 800efa6:	2300      	movs	r3, #0
 800efa8:	847b      	strh	r3, [r7, #34]	; 0x22
		int16_t acc_raw[3] = {0};
 800efaa:	f107 031c 	add.w	r3, r7, #28
 800efae:	2200      	movs	r2, #0
 800efb0:	601a      	str	r2, [r3, #0]
 800efb2:	809a      	strh	r2, [r3, #4]
		int16_t gyro_raw[3] = {0};
 800efb4:	f107 0314 	add.w	r3, r7, #20
 800efb8:	2200      	movs	r2, #0
 800efba:	601a      	str	r2, [r3, #0]
 800efbc:	809a      	strh	r2, [r3, #4]
		lsm6ds3_temperature_raw_get(ctx, &temperature_raw_gyro);
 800efbe:	f107 0322 	add.w	r3, r7, #34	; 0x22
 800efc2:	4619      	mov	r1, r3
 800efc4:	68f8      	ldr	r0, [r7, #12]
 800efc6:	f000 f96d 	bl	800f2a4 <lsm6ds3_temperature_raw_get>
		lsm6ds3_acceleration_raw_get(ctx, acc_raw);
 800efca:	f107 031c 	add.w	r3, r7, #28
 800efce:	4619      	mov	r1, r3
 800efd0:	68f8      	ldr	r0, [r7, #12]
 800efd2:	f000 f9d5 	bl	800f380 <lsm6ds3_acceleration_raw_get>
		lsm6ds3_angular_rate_raw_get(ctx, gyro_raw);
 800efd6:	f107 0314 	add.w	r3, r7, #20
 800efda:	4619      	mov	r1, r3
 800efdc:	68f8      	ldr	r0, [r7, #12]
 800efde:	f000 f984 	bl	800f2ea <lsm6ds3_angular_rate_raw_get>

		// Пересчет из попугаев в человеческие величины
		*temperature_celsius_gyro = lsm6ds3_from_lsb_to_celsius(temperature_raw_gyro);
 800efe2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800efe6:	4618      	mov	r0, r3
 800efe8:	f000 f8aa 	bl	800f140 <lsm6ds3_from_lsb_to_celsius>
 800efec:	eef0 7a40 	vmov.f32	s15, s0
 800eff0:	68bb      	ldr	r3, [r7, #8]
 800eff2:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < 3; i++)
 800eff6:	2300      	movs	r3, #0
 800eff8:	627b      	str	r3, [r7, #36]	; 0x24
 800effa:	e02e      	b.n	800f05a <lsmread+0xc2>
		{
			(*acc_g)[i] = lsm6ds3_from_fs16g_to_mg(acc_raw[i]) / 1000;
 800effc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800effe:	005b      	lsls	r3, r3, #1
 800f000:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f004:	4413      	add	r3, r2
 800f006:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 800f00a:	4618      	mov	r0, r3
 800f00c:	f000 f860 	bl	800f0d0 <lsm6ds3_from_fs16g_to_mg>
 800f010:	eeb0 7a40 	vmov.f32	s14, s0
 800f014:	eddf 6a15 	vldr	s13, [pc, #84]	; 800f06c <lsmread+0xd4>
 800f018:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f01c:	687a      	ldr	r2, [r7, #4]
 800f01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f020:	009b      	lsls	r3, r3, #2
 800f022:	4413      	add	r3, r2
 800f024:	edc3 7a00 	vstr	s15, [r3]
			(*gyro_dps)[i] = lsm6ds3_from_fs2000dps_to_mdps(gyro_raw[i]) / 1000;
 800f028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f02a:	005b      	lsls	r3, r3, #1
 800f02c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f030:	4413      	add	r3, r2
 800f032:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 800f036:	4618      	mov	r0, r3
 800f038:	f000 f86a 	bl	800f110 <lsm6ds3_from_fs2000dps_to_mdps>
 800f03c:	eeb0 7a40 	vmov.f32	s14, s0
 800f040:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800f06c <lsmread+0xd4>
 800f044:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f048:	683a      	ldr	r2, [r7, #0]
 800f04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f04c:	009b      	lsls	r3, r3, #2
 800f04e:	4413      	add	r3, r2
 800f050:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < 3; i++)
 800f054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f056:	3301      	adds	r3, #1
 800f058:	627b      	str	r3, [r7, #36]	; 0x24
 800f05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f05c:	2b02      	cmp	r3, #2
 800f05e:	ddcd      	ble.n	800effc <lsmread+0x64>
		}
}
 800f060:	bf00      	nop
 800f062:	bf00      	nop
 800f064:	3728      	adds	r7, #40	; 0x28
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
 800f06a:	bf00      	nop
 800f06c:	447a0000 	.word	0x447a0000

0800f070 <lsm6ds3_read_reg>:
  *
  */
int32_t lsm6ds3_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800f070:	b590      	push	{r4, r7, lr}
 800f072:	b087      	sub	sp, #28
 800f074:	af00      	add	r7, sp, #0
 800f076:	60f8      	str	r0, [r7, #12]
 800f078:	607a      	str	r2, [r7, #4]
 800f07a:	461a      	mov	r2, r3
 800f07c:	460b      	mov	r3, r1
 800f07e:	72fb      	strb	r3, [r7, #11]
 800f080:	4613      	mov	r3, r2
 800f082:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	685c      	ldr	r4, [r3, #4]
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	6898      	ldr	r0, [r3, #8]
 800f08c:	893b      	ldrh	r3, [r7, #8]
 800f08e:	7af9      	ldrb	r1, [r7, #11]
 800f090:	687a      	ldr	r2, [r7, #4]
 800f092:	47a0      	blx	r4
 800f094:	6178      	str	r0, [r7, #20]

  return ret;
 800f096:	697b      	ldr	r3, [r7, #20]
}
 800f098:	4618      	mov	r0, r3
 800f09a:	371c      	adds	r7, #28
 800f09c:	46bd      	mov	sp, r7
 800f09e:	bd90      	pop	{r4, r7, pc}

0800f0a0 <lsm6ds3_write_reg>:
  *
  */
int32_t lsm6ds3_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800f0a0:	b590      	push	{r4, r7, lr}
 800f0a2:	b087      	sub	sp, #28
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	60f8      	str	r0, [r7, #12]
 800f0a8:	607a      	str	r2, [r7, #4]
 800f0aa:	461a      	mov	r2, r3
 800f0ac:	460b      	mov	r3, r1
 800f0ae:	72fb      	strb	r3, [r7, #11]
 800f0b0:	4613      	mov	r3, r2
 800f0b2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	681c      	ldr	r4, [r3, #0]
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	6898      	ldr	r0, [r3, #8]
 800f0bc:	893b      	ldrh	r3, [r7, #8]
 800f0be:	7af9      	ldrb	r1, [r7, #11]
 800f0c0:	687a      	ldr	r2, [r7, #4]
 800f0c2:	47a0      	blx	r4
 800f0c4:	6178      	str	r0, [r7, #20]

  return ret;
 800f0c6:	697b      	ldr	r3, [r7, #20]
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	371c      	adds	r7, #28
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd90      	pop	{r4, r7, pc}

0800f0d0 <lsm6ds3_from_fs16g_to_mg>:
{
  return ((float_t)lsb * 244.0f / 1000.0f);
}

float_t lsm6ds3_from_fs16g_to_mg(int16_t lsb)
{
 800f0d0:	b480      	push	{r7}
 800f0d2:	b083      	sub	sp, #12
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 488.0f / 1000.0f);
 800f0da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f0de:	ee07 3a90 	vmov	s15, r3
 800f0e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f0e6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800f108 <lsm6ds3_from_fs16g_to_mg+0x38>
 800f0ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f0ee:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800f10c <lsm6ds3_from_fs16g_to_mg+0x3c>
 800f0f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800f0f6:	eef0 7a66 	vmov.f32	s15, s13
}
 800f0fa:	eeb0 0a67 	vmov.f32	s0, s15
 800f0fe:	370c      	adds	r7, #12
 800f100:	46bd      	mov	sp, r7
 800f102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f106:	4770      	bx	lr
 800f108:	43f40000 	.word	0x43f40000
 800f10c:	447a0000 	.word	0x447a0000

0800f110 <lsm6ds3_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6ds3_from_fs2000dps_to_mdps(int16_t lsb)
{
 800f110:	b480      	push	{r7}
 800f112:	b083      	sub	sp, #12
 800f114:	af00      	add	r7, sp, #0
 800f116:	4603      	mov	r3, r0
 800f118:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 800f11a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f11e:	ee07 3a90 	vmov	s15, r3
 800f122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f126:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800f13c <lsm6ds3_from_fs2000dps_to_mdps+0x2c>
 800f12a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800f12e:	eeb0 0a67 	vmov.f32	s0, s15
 800f132:	370c      	adds	r7, #12
 800f134:	46bd      	mov	sp, r7
 800f136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13a:	4770      	bx	lr
 800f13c:	428c0000 	.word	0x428c0000

0800f140 <lsm6ds3_from_lsb_to_celsius>:

float_t lsm6ds3_from_lsb_to_celsius(int16_t lsb)
{
 800f140:	b480      	push	{r7}
 800f142:	b083      	sub	sp, #12
 800f144:	af00      	add	r7, sp, #0
 800f146:	4603      	mov	r3, r0
 800f148:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 16.0f + 25.0f);
 800f14a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f14e:	ee07 3a90 	vmov	s15, r3
 800f152:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f156:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800f15a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f15e:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800f162:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800f166:	eeb0 0a67 	vmov.f32	s0, s15
 800f16a:	370c      	adds	r7, #12
 800f16c:	46bd      	mov	sp, r7
 800f16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f172:	4770      	bx	lr

0800f174 <lsm6ds3_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6ds3_xl_fs_t val)
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b084      	sub	sp, #16
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
 800f17c:	460b      	mov	r3, r1
 800f17e:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800f180:	f107 0208 	add.w	r2, r7, #8
 800f184:	2301      	movs	r3, #1
 800f186:	2110      	movs	r1, #16
 800f188:	6878      	ldr	r0, [r7, #4]
 800f18a:	f7ff ff71 	bl	800f070 <lsm6ds3_read_reg>
 800f18e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d10f      	bne.n	800f1b6 <lsm6ds3_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 800f196:	78fb      	ldrb	r3, [r7, #3]
 800f198:	f003 0303 	and.w	r3, r3, #3
 800f19c:	b2da      	uxtb	r2, r3
 800f19e:	7a3b      	ldrb	r3, [r7, #8]
 800f1a0:	f362 0383 	bfi	r3, r2, #2, #2
 800f1a4:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800f1a6:	f107 0208 	add.w	r2, r7, #8
 800f1aa:	2301      	movs	r3, #1
 800f1ac:	2110      	movs	r1, #16
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	f7ff ff76 	bl	800f0a0 <lsm6ds3_write_reg>
 800f1b4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800f1b6:	68fb      	ldr	r3, [r7, #12]
}
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	3710      	adds	r7, #16
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	bd80      	pop	{r7, pc}

0800f1c0 <lsm6ds3_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6ds3_odr_xl_t val)
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b084      	sub	sp, #16
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
 800f1c8:	460b      	mov	r3, r1
 800f1ca:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800f1cc:	f107 0208 	add.w	r2, r7, #8
 800f1d0:	2301      	movs	r3, #1
 800f1d2:	2110      	movs	r1, #16
 800f1d4:	6878      	ldr	r0, [r7, #4]
 800f1d6:	f7ff ff4b 	bl	800f070 <lsm6ds3_read_reg>
 800f1da:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d10f      	bne.n	800f202 <lsm6ds3_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t)val;
 800f1e2:	78fb      	ldrb	r3, [r7, #3]
 800f1e4:	f003 030f 	and.w	r3, r3, #15
 800f1e8:	b2da      	uxtb	r2, r3
 800f1ea:	7a3b      	ldrb	r3, [r7, #8]
 800f1ec:	f362 1307 	bfi	r3, r2, #4, #4
 800f1f0:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800f1f2:	f107 0208 	add.w	r2, r7, #8
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	2110      	movs	r1, #16
 800f1fa:	6878      	ldr	r0, [r7, #4]
 800f1fc:	f7ff ff50 	bl	800f0a0 <lsm6ds3_write_reg>
 800f200:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800f202:	68fb      	ldr	r3, [r7, #12]
}
 800f204:	4618      	mov	r0, r3
 800f206:	3710      	adds	r7, #16
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}

0800f20c <lsm6ds3_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6ds3_fs_g_t val)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b084      	sub	sp, #16
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
 800f214:	460b      	mov	r3, r1
 800f216:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800f218:	f107 0208 	add.w	r2, r7, #8
 800f21c:	2301      	movs	r3, #1
 800f21e:	2111      	movs	r1, #17
 800f220:	6878      	ldr	r0, [r7, #4]
 800f222:	f7ff ff25 	bl	800f070 <lsm6ds3_read_reg>
 800f226:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d10f      	bne.n	800f24e <lsm6ds3_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 800f22e:	78fb      	ldrb	r3, [r7, #3]
 800f230:	f003 0307 	and.w	r3, r3, #7
 800f234:	b2da      	uxtb	r2, r3
 800f236:	7a3b      	ldrb	r3, [r7, #8]
 800f238:	f362 0343 	bfi	r3, r2, #1, #3
 800f23c:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800f23e:	f107 0208 	add.w	r2, r7, #8
 800f242:	2301      	movs	r3, #1
 800f244:	2111      	movs	r1, #17
 800f246:	6878      	ldr	r0, [r7, #4]
 800f248:	f7ff ff2a 	bl	800f0a0 <lsm6ds3_write_reg>
 800f24c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800f24e:	68fb      	ldr	r3, [r7, #12]
}
 800f250:	4618      	mov	r0, r3
 800f252:	3710      	adds	r7, #16
 800f254:	46bd      	mov	sp, r7
 800f256:	bd80      	pop	{r7, pc}

0800f258 <lsm6ds3_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6ds3_odr_g_t val)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b084      	sub	sp, #16
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
 800f260:	460b      	mov	r3, r1
 800f262:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800f264:	f107 0208 	add.w	r2, r7, #8
 800f268:	2301      	movs	r3, #1
 800f26a:	2111      	movs	r1, #17
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f7ff feff 	bl	800f070 <lsm6ds3_read_reg>
 800f272:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d10f      	bne.n	800f29a <lsm6ds3_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t)val;
 800f27a:	78fb      	ldrb	r3, [r7, #3]
 800f27c:	f003 030f 	and.w	r3, r3, #15
 800f280:	b2da      	uxtb	r2, r3
 800f282:	7a3b      	ldrb	r3, [r7, #8]
 800f284:	f362 1307 	bfi	r3, r2, #4, #4
 800f288:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800f28a:	f107 0208 	add.w	r2, r7, #8
 800f28e:	2301      	movs	r3, #1
 800f290:	2111      	movs	r1, #17
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	f7ff ff04 	bl	800f0a0 <lsm6ds3_write_reg>
 800f298:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800f29a:	68fb      	ldr	r3, [r7, #12]
}
 800f29c:	4618      	mov	r0, r3
 800f29e:	3710      	adds	r7, #16
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd80      	pop	{r7, pc}

0800f2a4 <lsm6ds3_temperature_raw_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b084      	sub	sp, #16
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
 800f2ac:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUT_TEMP_L, buff, 2);
 800f2ae:	f107 0208 	add.w	r2, r7, #8
 800f2b2:	2302      	movs	r3, #2
 800f2b4:	2120      	movs	r1, #32
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	f7ff feda 	bl	800f070 <lsm6ds3_read_reg>
 800f2bc:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800f2be:	7a7b      	ldrb	r3, [r7, #9]
 800f2c0:	b21a      	sxth	r2, r3
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2cc:	b29b      	uxth	r3, r3
 800f2ce:	021b      	lsls	r3, r3, #8
 800f2d0:	b29a      	uxth	r2, r3
 800f2d2:	7a3b      	ldrb	r3, [r7, #8]
 800f2d4:	b29b      	uxth	r3, r3
 800f2d6:	4413      	add	r3, r2
 800f2d8:	b29b      	uxth	r3, r3
 800f2da:	b21a      	sxth	r2, r3
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	801a      	strh	r2, [r3, #0]

  return ret;
 800f2e0:	68fb      	ldr	r3, [r7, #12]
}
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	3710      	adds	r7, #16
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}

0800f2ea <lsm6ds3_angular_rate_raw_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800f2ea:	b580      	push	{r7, lr}
 800f2ec:	b086      	sub	sp, #24
 800f2ee:	af00      	add	r7, sp, #0
 800f2f0:	6078      	str	r0, [r7, #4]
 800f2f2:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUTX_L_G, buff, 6);
 800f2f4:	f107 020c 	add.w	r2, r7, #12
 800f2f8:	2306      	movs	r3, #6
 800f2fa:	2122      	movs	r1, #34	; 0x22
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f7ff feb7 	bl	800f070 <lsm6ds3_read_reg>
 800f302:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800f304:	7b7b      	ldrb	r3, [r7, #13]
 800f306:	b21a      	sxth	r2, r3
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f312:	b29b      	uxth	r3, r3
 800f314:	021b      	lsls	r3, r3, #8
 800f316:	b29a      	uxth	r2, r3
 800f318:	7b3b      	ldrb	r3, [r7, #12]
 800f31a:	b29b      	uxth	r3, r3
 800f31c:	4413      	add	r3, r2
 800f31e:	b29b      	uxth	r3, r3
 800f320:	b21a      	sxth	r2, r3
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800f326:	7bfa      	ldrb	r2, [r7, #15]
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	3302      	adds	r3, #2
 800f32c:	b212      	sxth	r2, r2
 800f32e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	3302      	adds	r3, #2
 800f334:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f338:	b29b      	uxth	r3, r3
 800f33a:	021b      	lsls	r3, r3, #8
 800f33c:	b29a      	uxth	r2, r3
 800f33e:	7bbb      	ldrb	r3, [r7, #14]
 800f340:	b29b      	uxth	r3, r3
 800f342:	4413      	add	r3, r2
 800f344:	b29a      	uxth	r2, r3
 800f346:	683b      	ldr	r3, [r7, #0]
 800f348:	3302      	adds	r3, #2
 800f34a:	b212      	sxth	r2, r2
 800f34c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800f34e:	7c7a      	ldrb	r2, [r7, #17]
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	3304      	adds	r3, #4
 800f354:	b212      	sxth	r2, r2
 800f356:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	3304      	adds	r3, #4
 800f35c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f360:	b29b      	uxth	r3, r3
 800f362:	021b      	lsls	r3, r3, #8
 800f364:	b29a      	uxth	r2, r3
 800f366:	7c3b      	ldrb	r3, [r7, #16]
 800f368:	b29b      	uxth	r3, r3
 800f36a:	4413      	add	r3, r2
 800f36c:	b29a      	uxth	r2, r3
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	3304      	adds	r3, #4
 800f372:	b212      	sxth	r2, r2
 800f374:	801a      	strh	r2, [r3, #0]

  return ret;
 800f376:	697b      	ldr	r3, [r7, #20]
}
 800f378:	4618      	mov	r0, r3
 800f37a:	3718      	adds	r7, #24
 800f37c:	46bd      	mov	sp, r7
 800f37e:	bd80      	pop	{r7, pc}

0800f380 <lsm6ds3_acceleration_raw_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b086      	sub	sp, #24
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
 800f388:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUTX_L_XL, buff, 6);
 800f38a:	f107 020c 	add.w	r2, r7, #12
 800f38e:	2306      	movs	r3, #6
 800f390:	2128      	movs	r1, #40	; 0x28
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	f7ff fe6c 	bl	800f070 <lsm6ds3_read_reg>
 800f398:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800f39a:	7b7b      	ldrb	r3, [r7, #13]
 800f39c:	b21a      	sxth	r2, r3
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f3a8:	b29b      	uxth	r3, r3
 800f3aa:	021b      	lsls	r3, r3, #8
 800f3ac:	b29a      	uxth	r2, r3
 800f3ae:	7b3b      	ldrb	r3, [r7, #12]
 800f3b0:	b29b      	uxth	r3, r3
 800f3b2:	4413      	add	r3, r2
 800f3b4:	b29b      	uxth	r3, r3
 800f3b6:	b21a      	sxth	r2, r3
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800f3bc:	7bfa      	ldrb	r2, [r7, #15]
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	3302      	adds	r3, #2
 800f3c2:	b212      	sxth	r2, r2
 800f3c4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	3302      	adds	r3, #2
 800f3ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f3ce:	b29b      	uxth	r3, r3
 800f3d0:	021b      	lsls	r3, r3, #8
 800f3d2:	b29a      	uxth	r2, r3
 800f3d4:	7bbb      	ldrb	r3, [r7, #14]
 800f3d6:	b29b      	uxth	r3, r3
 800f3d8:	4413      	add	r3, r2
 800f3da:	b29a      	uxth	r2, r3
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	3302      	adds	r3, #2
 800f3e0:	b212      	sxth	r2, r2
 800f3e2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800f3e4:	7c7a      	ldrb	r2, [r7, #17]
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	3304      	adds	r3, #4
 800f3ea:	b212      	sxth	r2, r2
 800f3ec:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800f3ee:	683b      	ldr	r3, [r7, #0]
 800f3f0:	3304      	adds	r3, #4
 800f3f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f3f6:	b29b      	uxth	r3, r3
 800f3f8:	021b      	lsls	r3, r3, #8
 800f3fa:	b29a      	uxth	r2, r3
 800f3fc:	7c3b      	ldrb	r3, [r7, #16]
 800f3fe:	b29b      	uxth	r3, r3
 800f400:	4413      	add	r3, r2
 800f402:	b29a      	uxth	r2, r3
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	3304      	adds	r3, #4
 800f408:	b212      	sxth	r2, r2
 800f40a:	801a      	strh	r2, [r3, #0]

  return ret;
 800f40c:	697b      	ldr	r3, [r7, #20]
}
 800f40e:	4618      	mov	r0, r3
 800f410:	3718      	adds	r7, #24
 800f412:	46bd      	mov	sp, r7
 800f414:	bd80      	pop	{r7, pc}

0800f416 <lsm6ds3_device_id_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800f416:	b580      	push	{r7, lr}
 800f418:	b084      	sub	sp, #16
 800f41a:	af00      	add	r7, sp, #0
 800f41c:	6078      	str	r0, [r7, #4]
 800f41e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_WHO_AM_I, buff, 1);
 800f420:	2301      	movs	r3, #1
 800f422:	683a      	ldr	r2, [r7, #0]
 800f424:	210f      	movs	r1, #15
 800f426:	6878      	ldr	r0, [r7, #4]
 800f428:	f7ff fe22 	bl	800f070 <lsm6ds3_read_reg>
 800f42c:	60f8      	str	r0, [r7, #12]

  return ret;
 800f42e:	68fb      	ldr	r3, [r7, #12]
}
 800f430:	4618      	mov	r0, r3
 800f432:	3710      	adds	r7, #16
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}

0800f438 <lsm6ds3_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b084      	sub	sp, #16
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	460b      	mov	r3, r1
 800f442:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800f444:	f107 0208 	add.w	r2, r7, #8
 800f448:	2301      	movs	r3, #1
 800f44a:	2112      	movs	r1, #18
 800f44c:	6878      	ldr	r0, [r7, #4]
 800f44e:	f7ff fe0f 	bl	800f070 <lsm6ds3_read_reg>
 800f452:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d10f      	bne.n	800f47a <lsm6ds3_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 800f45a:	78fb      	ldrb	r3, [r7, #3]
 800f45c:	f003 0301 	and.w	r3, r3, #1
 800f460:	b2da      	uxtb	r2, r3
 800f462:	7a3b      	ldrb	r3, [r7, #8]
 800f464:	f362 0300 	bfi	r3, r2, #0, #1
 800f468:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800f46a:	f107 0208 	add.w	r2, r7, #8
 800f46e:	2301      	movs	r3, #1
 800f470:	2112      	movs	r1, #18
 800f472:	6878      	ldr	r0, [r7, #4]
 800f474:	f7ff fe14 	bl	800f0a0 <lsm6ds3_write_reg>
 800f478:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800f47a:	68fb      	ldr	r3, [r7, #12]
}
 800f47c:	4618      	mov	r0, r3
 800f47e:	3710      	adds	r7, #16
 800f480:	46bd      	mov	sp, r7
 800f482:	bd80      	pop	{r7, pc}
 800f484:	0000      	movs	r0, r0
	...

0800f488 <photorezistor_get_lux>:
#include "../photorezistor.h"

#ifdef HAL_ADC_MODULE_ENABLED


float photorezistor_get_lux(photorezistor_t ph) {
 800f488:	b5b0      	push	{r4, r5, r7, lr}
 800f48a:	b086      	sub	sp, #24
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	463b      	mov	r3, r7
 800f490:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_ADC_Start(ph.hadc);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	4618      	mov	r0, r3
 800f498:	f7f6 fdd6 	bl	8006048 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(ph.hadc, 100);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	2164      	movs	r1, #100	; 0x64
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	f7f6 feb8 	bl	8006216 <HAL_ADC_PollForConversion>
	float volts = HAL_ADC_GetValue(ph.hadc) * 3.3 / 4095;	//Volts
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	f7f6 ff3f 	bl	800632c <HAL_ADC_GetValue>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	f7f1 f82f 	bl	8000514 <__aeabi_ui2d>
 800f4b6:	a347      	add	r3, pc, #284	; (adr r3, 800f5d4 <photorezistor_get_lux+0x14c>)
 800f4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4bc:	f7f1 f8a4 	bl	8000608 <__aeabi_dmul>
 800f4c0:	4602      	mov	r2, r0
 800f4c2:	460b      	mov	r3, r1
 800f4c4:	4610      	mov	r0, r2
 800f4c6:	4619      	mov	r1, r3
 800f4c8:	a344      	add	r3, pc, #272	; (adr r3, 800f5dc <photorezistor_get_lux+0x154>)
 800f4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ce:	f7f1 f9c5 	bl	800085c <__aeabi_ddiv>
 800f4d2:	4602      	mov	r2, r0
 800f4d4:	460b      	mov	r3, r1
 800f4d6:	4610      	mov	r0, r2
 800f4d8:	4619      	mov	r1, r3
 800f4da:	f7f1 fb8d 	bl	8000bf8 <__aeabi_d2f>
 800f4de:	4603      	mov	r3, r0
 800f4e0:	617b      	str	r3, [r7, #20]
	float ohms = volts*(ph.resist)/(3.3-volts);		//Ohms
 800f4e2:	ed97 7a00 	vldr	s14, [r7]
 800f4e6:	edd7 7a05 	vldr	s15, [r7, #20]
 800f4ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4ee:	ee17 0a90 	vmov	r0, s15
 800f4f2:	f7f1 f831 	bl	8000558 <__aeabi_f2d>
 800f4f6:	4604      	mov	r4, r0
 800f4f8:	460d      	mov	r5, r1
 800f4fa:	6978      	ldr	r0, [r7, #20]
 800f4fc:	f7f1 f82c 	bl	8000558 <__aeabi_f2d>
 800f500:	4602      	mov	r2, r0
 800f502:	460b      	mov	r3, r1
 800f504:	a133      	add	r1, pc, #204	; (adr r1, 800f5d4 <photorezistor_get_lux+0x14c>)
 800f506:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f50a:	f7f0 fec5 	bl	8000298 <__aeabi_dsub>
 800f50e:	4602      	mov	r2, r0
 800f510:	460b      	mov	r3, r1
 800f512:	4620      	mov	r0, r4
 800f514:	4629      	mov	r1, r5
 800f516:	f7f1 f9a1 	bl	800085c <__aeabi_ddiv>
 800f51a:	4602      	mov	r2, r0
 800f51c:	460b      	mov	r3, r1
 800f51e:	4610      	mov	r0, r2
 800f520:	4619      	mov	r1, r3
 800f522:	f7f1 fb69 	bl	8000bf8 <__aeabi_d2f>
 800f526:	4603      	mov	r3, r0
 800f528:	613b      	str	r3, [r7, #16]
	float lux = exp((3.823-log(ohms/1000))/0.816)*10.764;	//Lux
 800f52a:	edd7 7a04 	vldr	s15, [r7, #16]
 800f52e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800f5d0 <photorezistor_get_lux+0x148>
 800f532:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800f536:	ee16 0a90 	vmov	r0, s13
 800f53a:	f7f1 f80d 	bl	8000558 <__aeabi_f2d>
 800f53e:	4602      	mov	r2, r0
 800f540:	460b      	mov	r3, r1
 800f542:	ec43 2b10 	vmov	d0, r2, r3
 800f546:	f005 f9f3 	bl	8014930 <log>
 800f54a:	ec53 2b10 	vmov	r2, r3, d0
 800f54e:	a11a      	add	r1, pc, #104	; (adr r1, 800f5b8 <photorezistor_get_lux+0x130>)
 800f550:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f554:	f7f0 fea0 	bl	8000298 <__aeabi_dsub>
 800f558:	4602      	mov	r2, r0
 800f55a:	460b      	mov	r3, r1
 800f55c:	4610      	mov	r0, r2
 800f55e:	4619      	mov	r1, r3
 800f560:	a317      	add	r3, pc, #92	; (adr r3, 800f5c0 <photorezistor_get_lux+0x138>)
 800f562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f566:	f7f1 f979 	bl	800085c <__aeabi_ddiv>
 800f56a:	4602      	mov	r2, r0
 800f56c:	460b      	mov	r3, r1
 800f56e:	ec43 2b17 	vmov	d7, r2, r3
 800f572:	eeb0 0a47 	vmov.f32	s0, s14
 800f576:	eef0 0a67 	vmov.f32	s1, s15
 800f57a:	f005 f989 	bl	8014890 <exp>
 800f57e:	ec51 0b10 	vmov	r0, r1, d0
 800f582:	a311      	add	r3, pc, #68	; (adr r3, 800f5c8 <photorezistor_get_lux+0x140>)
 800f584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f588:	f7f1 f83e 	bl	8000608 <__aeabi_dmul>
 800f58c:	4602      	mov	r2, r0
 800f58e:	460b      	mov	r3, r1
 800f590:	4610      	mov	r0, r2
 800f592:	4619      	mov	r1, r3
 800f594:	f7f1 fb30 	bl	8000bf8 <__aeabi_d2f>
 800f598:	4603      	mov	r3, r0
 800f59a:	60fb      	str	r3, [r7, #12]
	HAL_ADC_Stop(ph.hadc);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f7f6 fe06 	bl	80061b0 <HAL_ADC_Stop>
	return lux;
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	ee07 3a90 	vmov	s15, r3
}
 800f5aa:	eeb0 0a67 	vmov.f32	s0, s15
 800f5ae:	3718      	adds	r7, #24
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	bdb0      	pop	{r4, r5, r7, pc}
 800f5b4:	f3af 8000 	nop.w
 800f5b8:	0624dd2f 	.word	0x0624dd2f
 800f5bc:	400e9581 	.word	0x400e9581
 800f5c0:	083126e9 	.word	0x083126e9
 800f5c4:	3fea1cac 	.word	0x3fea1cac
 800f5c8:	020c49ba 	.word	0x020c49ba
 800f5cc:	4025872b 	.word	0x4025872b
 800f5d0:	447a0000 	.word	0x447a0000
 800f5d4:	66666666 	.word	0x66666666
 800f5d8:	400a6666 	.word	0x400a6666
 800f5dc:	00000000 	.word	0x00000000
 800f5e0:	40affe00 	.word	0x40affe00

0800f5e4 <_nrf24_CS>:
extern SPI_HandleTypeDef hspi2;



static void _nrf24_CS(void * intf_ptr, bool mode)
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b084      	sub	sp, #16
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
 800f5ec:	460b      	mov	r3, r1
 800f5ee:	70fb      	strb	r3, [r7, #3]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	60fb      	str	r3, [r7, #12]
	nrf24_spi_pins_t *api_config_low = (nrf24_spi_pins_t *)api_config->intf_ptr;
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	68db      	ldr	r3, [r3, #12]
 800f5f8:	60bb      	str	r3, [r7, #8]
	if (mode)
 800f5fa:	78fb      	ldrb	r3, [r7, #3]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d008      	beq.n	800f612 <_nrf24_CS+0x2e>
	{
		// Опускаем chip select для того, что бы начать общение с конкретным устройством.
		HAL_GPIO_WritePin(api_config_low->cs_port, api_config_low->cs_pin,  GPIO_PIN_RESET);
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	6898      	ldr	r0, [r3, #8]
 800f604:	68bb      	ldr	r3, [r7, #8]
 800f606:	899b      	ldrh	r3, [r3, #12]
 800f608:	2200      	movs	r2, #0
 800f60a:	4619      	mov	r1, r3
 800f60c:	f7f7 fc5c 	bl	8006ec8 <HAL_GPIO_WritePin>
	{
		// Поднимаем chip select для того, что бы закончить общение с конкретным устройством.
		HAL_GPIO_WritePin(api_config_low->cs_port, api_config_low->cs_pin,  GPIO_PIN_SET);
		//HAL_Delay(100);
	}
}
 800f610:	e007      	b.n	800f622 <_nrf24_CS+0x3e>
		HAL_GPIO_WritePin(api_config_low->cs_port, api_config_low->cs_pin,  GPIO_PIN_SET);
 800f612:	68bb      	ldr	r3, [r7, #8]
 800f614:	6898      	ldr	r0, [r3, #8]
 800f616:	68bb      	ldr	r3, [r7, #8]
 800f618:	899b      	ldrh	r3, [r3, #12]
 800f61a:	2201      	movs	r2, #1
 800f61c:	4619      	mov	r1, r3
 800f61e:	f7f7 fc53 	bl	8006ec8 <HAL_GPIO_WritePin>
}
 800f622:	bf00      	nop
 800f624:	3710      	adds	r7, #16
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}

0800f62a <nrf24_read_register>:
		shift_reg_oe(api_config_low->this, false);
	}
}

void nrf24_read_register(void * intf_ptr, uint8_t reg_addr, uint8_t * reg_data, size_t data_size)
{
 800f62a:	b580      	push	{r7, lr}
 800f62c:	b086      	sub	sp, #24
 800f62e:	af00      	add	r7, sp, #0
 800f630:	60f8      	str	r0, [r7, #12]
 800f632:	607a      	str	r2, [r7, #4]
 800f634:	603b      	str	r3, [r7, #0]
 800f636:	460b      	mov	r3, r1
 800f638:	72fb      	strb	r3, [r7, #11]

	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	617b      	str	r3, [r7, #20]

	api_config->nrf24_CS(intf_ptr, true);
 800f63e:	697b      	ldr	r3, [r7, #20]
 800f640:	685b      	ldr	r3, [r3, #4]
 800f642:	2101      	movs	r1, #1
 800f644:	68f8      	ldr	r0, [r7, #12]
 800f646:	4798      	blx	r3

	// Добавляем в 5 битов адреса еще 3 бита для чтения из этого регистра
	reg_addr = reg_addr & ~((1 << 5) | (1 << 6) | (1 << 7));
 800f648:	7afb      	ldrb	r3, [r7, #11]
 800f64a:	f003 031f 	and.w	r3, r3, #31
 800f64e:	b2db      	uxtb	r3, r3
 800f650:	72fb      	strb	r3, [r7, #11]

	// Передаем адресс регистра, который читаем и читаем данные
	HAL_SPI_Transmit(api_config->hspi, &reg_addr, 1, HAL_MAX_DELAY);
 800f652:	697b      	ldr	r3, [r7, #20]
 800f654:	6818      	ldr	r0, [r3, #0]
 800f656:	f107 010b 	add.w	r1, r7, #11
 800f65a:	f04f 33ff 	mov.w	r3, #4294967295
 800f65e:	2201      	movs	r2, #1
 800f660:	f7fa f891 	bl	8009786 <HAL_SPI_Transmit>
	HAL_SPI_Receive(api_config->hspi, reg_data, data_size, HAL_MAX_DELAY);
 800f664:	697b      	ldr	r3, [r7, #20]
 800f666:	6818      	ldr	r0, [r3, #0]
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	b29a      	uxth	r2, r3
 800f66c:	f04f 33ff 	mov.w	r3, #4294967295
 800f670:	6879      	ldr	r1, [r7, #4]
 800f672:	f7fa f9c4 	bl	80099fe <HAL_SPI_Receive>

	api_config->nrf24_CS(intf_ptr, false);
 800f676:	697b      	ldr	r3, [r7, #20]
 800f678:	685b      	ldr	r3, [r3, #4]
 800f67a:	2100      	movs	r1, #0
 800f67c:	68f8      	ldr	r0, [r7, #12]
 800f67e:	4798      	blx	r3
}
 800f680:	bf00      	nop
 800f682:	3718      	adds	r7, #24
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}

0800f688 <nrf24_write_register>:

void nrf24_write_register(void * intf_ptr, uint8_t reg_addr, const uint8_t * reg_data, size_t data_size)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b086      	sub	sp, #24
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	60f8      	str	r0, [r7, #12]
 800f690:	607a      	str	r2, [r7, #4]
 800f692:	603b      	str	r3, [r7, #0]
 800f694:	460b      	mov	r3, r1
 800f696:	72fb      	strb	r3, [r7, #11]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	617b      	str	r3, [r7, #20]
	api_config->nrf24_CS(intf_ptr, true);
 800f69c:	697b      	ldr	r3, [r7, #20]
 800f69e:	685b      	ldr	r3, [r3, #4]
 800f6a0:	2101      	movs	r1, #1
 800f6a2:	68f8      	ldr	r0, [r7, #12]
 800f6a4:	4798      	blx	r3

	// Добавляем в 5 битов адреса еще 3 бита для записи в регистр
	reg_addr = (reg_addr & ~((1 << 6) | (1 << 7))) | (1 << 5);
 800f6a6:	7afb      	ldrb	r3, [r7, #11]
 800f6a8:	b25b      	sxtb	r3, r3
 800f6aa:	f003 031f 	and.w	r3, r3, #31
 800f6ae:	b25b      	sxtb	r3, r3
 800f6b0:	f043 0320 	orr.w	r3, r3, #32
 800f6b4:	b25b      	sxtb	r3, r3
 800f6b6:	b2db      	uxtb	r3, r3
 800f6b8:	72fb      	strb	r3, [r7, #11]

	// Передаем адресс регистра, в который пишем и пишем в регистр
	HAL_SPI_Transmit(api_config->hspi, &reg_addr, 1, HAL_MAX_DELAY);
 800f6ba:	697b      	ldr	r3, [r7, #20]
 800f6bc:	6818      	ldr	r0, [r3, #0]
 800f6be:	f107 010b 	add.w	r1, r7, #11
 800f6c2:	f04f 33ff 	mov.w	r3, #4294967295
 800f6c6:	2201      	movs	r2, #1
 800f6c8:	f7fa f85d 	bl	8009786 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(api_config->hspi, (uint8_t*)reg_data, data_size, HAL_MAX_DELAY);
 800f6cc:	697b      	ldr	r3, [r7, #20]
 800f6ce:	6818      	ldr	r0, [r3, #0]
 800f6d0:	683b      	ldr	r3, [r7, #0]
 800f6d2:	b29a      	uxth	r2, r3
 800f6d4:	f04f 33ff 	mov.w	r3, #4294967295
 800f6d8:	6879      	ldr	r1, [r7, #4]
 800f6da:	f7fa f854 	bl	8009786 <HAL_SPI_Transmit>

	api_config->nrf24_CS(intf_ptr, false);
 800f6de:	697b      	ldr	r3, [r7, #20]
 800f6e0:	685b      	ldr	r3, [r3, #4]
 800f6e2:	2100      	movs	r1, #0
 800f6e4:	68f8      	ldr	r0, [r7, #12]
 800f6e6:	4798      	blx	r3
}
 800f6e8:	bf00      	nop
 800f6ea:	3718      	adds	r7, #24
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	bd80      	pop	{r7, pc}

0800f6f0 <nrf24_read_rx_payload>:

void nrf24_read_rx_payload(void * intf_ptr, uint8_t * payload_buffer, size_t payload_buffer_size)
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b086      	sub	sp, #24
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	60f8      	str	r0, [r7, #12]
 800f6f8:	60b9      	str	r1, [r7, #8]
 800f6fa:	607a      	str	r2, [r7, #4]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	617b      	str	r3, [r7, #20]
	uint8_t command = NRF24_R_RX_PAYLOAD;
 800f700:	2361      	movs	r3, #97	; 0x61
 800f702:	74fb      	strb	r3, [r7, #19]
	uint8_t payload_size = 0;
 800f704:	2300      	movs	r3, #0
 800f706:	74bb      	strb	r3, [r7, #18]
    // Считываем размер данных
	nrf24_get_rx_payload_size(intf_ptr, &payload_size);
 800f708:	f107 0312 	add.w	r3, r7, #18
 800f70c:	4619      	mov	r1, r3
 800f70e:	68f8      	ldr	r0, [r7, #12]
 800f710:	f000 f89d 	bl	800f84e <nrf24_get_rx_payload_size>
	// Если размер данных от 1 до 32, то читаем данные
	if (payload_size > 0 || payload_size < 32)
 800f714:	7cbb      	ldrb	r3, [r7, #18]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d102      	bne.n	800f720 <nrf24_read_rx_payload+0x30>
 800f71a:	7cbb      	ldrb	r3, [r7, #18]
 800f71c:	2b1f      	cmp	r3, #31
 800f71e:	d823      	bhi.n	800f768 <nrf24_read_rx_payload+0x78>
	{
		// Если места на запись меньше, чем у нас есть данных, читем сколько, сколько есть места
		if (payload_size > payload_buffer_size)
 800f720:	7cbb      	ldrb	r3, [r7, #18]
 800f722:	461a      	mov	r2, r3
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	4293      	cmp	r3, r2
 800f728:	d202      	bcs.n	800f730 <nrf24_read_rx_payload+0x40>
		{
			payload_size = payload_buffer_size;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	b2db      	uxtb	r3, r3
 800f72e:	74bb      	strb	r3, [r7, #18]
		}
		api_config->nrf24_CS(intf_ptr, true);
 800f730:	697b      	ldr	r3, [r7, #20]
 800f732:	685b      	ldr	r3, [r3, #4]
 800f734:	2101      	movs	r1, #1
 800f736:	68f8      	ldr	r0, [r7, #12]
 800f738:	4798      	blx	r3
		// Читаем данные
		HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
 800f73a:	697b      	ldr	r3, [r7, #20]
 800f73c:	6818      	ldr	r0, [r3, #0]
 800f73e:	f107 0113 	add.w	r1, r7, #19
 800f742:	f04f 33ff 	mov.w	r3, #4294967295
 800f746:	2201      	movs	r2, #1
 800f748:	f7fa f81d 	bl	8009786 <HAL_SPI_Transmit>
		HAL_SPI_Receive(api_config->hspi, payload_buffer, payload_size, HAL_MAX_DELAY);
 800f74c:	697b      	ldr	r3, [r7, #20]
 800f74e:	6818      	ldr	r0, [r3, #0]
 800f750:	7cbb      	ldrb	r3, [r7, #18]
 800f752:	b29a      	uxth	r2, r3
 800f754:	f04f 33ff 	mov.w	r3, #4294967295
 800f758:	68b9      	ldr	r1, [r7, #8]
 800f75a:	f7fa f950 	bl	80099fe <HAL_SPI_Receive>
		api_config->nrf24_CS(intf_ptr, false);
 800f75e:	697b      	ldr	r3, [r7, #20]
 800f760:	685b      	ldr	r3, [r3, #4]
 800f762:	2100      	movs	r1, #0
 800f764:	68f8      	ldr	r0, [r7, #12]
 800f766:	4798      	blx	r3
	}
}
 800f768:	bf00      	nop
 800f76a:	3718      	adds	r7, #24
 800f76c:	46bd      	mov	sp, r7
 800f76e:	bd80      	pop	{r7, pc}

0800f770 <nrf24_write_tx_payload>:

void nrf24_write_tx_payload(void * intf_ptr, const uint8_t * payload_buffer, size_t payload_size, bool use_ack)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b086      	sub	sp, #24
 800f774:	af00      	add	r7, sp, #0
 800f776:	60f8      	str	r0, [r7, #12]
 800f778:	60b9      	str	r1, [r7, #8]
 800f77a:	607a      	str	r2, [r7, #4]
 800f77c:	70fb      	strb	r3, [r7, #3]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	617b      	str	r3, [r7, #20]
	uint8_t command;
	api_config->nrf24_CS(intf_ptr, true);
 800f782:	697b      	ldr	r3, [r7, #20]
 800f784:	685b      	ldr	r3, [r3, #4]
 800f786:	2101      	movs	r1, #1
 800f788:	68f8      	ldr	r0, [r7, #12]
 800f78a:	4798      	blx	r3
	// Учитываем использование ack
	if (use_ack)
 800f78c:	78fb      	ldrb	r3, [r7, #3]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d002      	beq.n	800f798 <nrf24_write_tx_payload+0x28>
	{
		command = NRF24_W_TX_PAYLOAD;
 800f792:	23a0      	movs	r3, #160	; 0xa0
 800f794:	74fb      	strb	r3, [r7, #19]
 800f796:	e001      	b.n	800f79c <nrf24_write_tx_payload+0x2c>
	}
	else
	{
		command = NRF24_W_TX_PAYLOAD_NO_ACK;
 800f798:	23b0      	movs	r3, #176	; 0xb0
 800f79a:	74fb      	strb	r3, [r7, #19]
	}
	// Передаем данные
	HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
 800f79c:	697b      	ldr	r3, [r7, #20]
 800f79e:	6818      	ldr	r0, [r3, #0]
 800f7a0:	f107 0113 	add.w	r1, r7, #19
 800f7a4:	f04f 33ff 	mov.w	r3, #4294967295
 800f7a8:	2201      	movs	r2, #1
 800f7aa:	f7f9 ffec 	bl	8009786 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(api_config->hspi, (uint8_t*)payload_buffer, payload_size, HAL_MAX_DELAY);
 800f7ae:	697b      	ldr	r3, [r7, #20]
 800f7b0:	6818      	ldr	r0, [r3, #0]
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	b29a      	uxth	r2, r3
 800f7b6:	f04f 33ff 	mov.w	r3, #4294967295
 800f7ba:	68b9      	ldr	r1, [r7, #8]
 800f7bc:	f7f9 ffe3 	bl	8009786 <HAL_SPI_Transmit>

	api_config->nrf24_CS(intf_ptr, false);
 800f7c0:	697b      	ldr	r3, [r7, #20]
 800f7c2:	685b      	ldr	r3, [r3, #4]
 800f7c4:	2100      	movs	r1, #0
 800f7c6:	68f8      	ldr	r0, [r7, #12]
 800f7c8:	4798      	blx	r3
}
 800f7ca:	bf00      	nop
 800f7cc:	3718      	adds	r7, #24
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}

0800f7d2 <nrf24_flush_rx>:

void nrf24_flush_rx(void * intf_ptr)
{
 800f7d2:	b580      	push	{r7, lr}
 800f7d4:	b084      	sub	sp, #16
 800f7d6:	af00      	add	r7, sp, #0
 800f7d8:	6078      	str	r0, [r7, #4]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	60fb      	str	r3, [r7, #12]
	uint8_t command = NRF24_FLUSH_RX;
 800f7de:	23e2      	movs	r3, #226	; 0xe2
 800f7e0:	72fb      	strb	r3, [r7, #11]
	api_config->nrf24_CS(intf_ptr, true);
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	685b      	ldr	r3, [r3, #4]
 800f7e6:	2101      	movs	r1, #1
 800f7e8:	6878      	ldr	r0, [r7, #4]
 800f7ea:	4798      	blx	r3
	HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	6818      	ldr	r0, [r3, #0]
 800f7f0:	f107 010b 	add.w	r1, r7, #11
 800f7f4:	f04f 33ff 	mov.w	r3, #4294967295
 800f7f8:	2201      	movs	r2, #1
 800f7fa:	f7f9 ffc4 	bl	8009786 <HAL_SPI_Transmit>
	api_config->nrf24_CS(intf_ptr, false);
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	685b      	ldr	r3, [r3, #4]
 800f802:	2100      	movs	r1, #0
 800f804:	6878      	ldr	r0, [r7, #4]
 800f806:	4798      	blx	r3
}
 800f808:	bf00      	nop
 800f80a:	3710      	adds	r7, #16
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}

0800f810 <nrf24_flush_tx>:

void nrf24_flush_tx(void * intf_ptr)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b084      	sub	sp, #16
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	60fb      	str	r3, [r7, #12]
	uint8_t command = NRF24_FLUSH_TX;
 800f81c:	23e1      	movs	r3, #225	; 0xe1
 800f81e:	72fb      	strb	r3, [r7, #11]
	api_config->nrf24_CS(intf_ptr, true);
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	685b      	ldr	r3, [r3, #4]
 800f824:	2101      	movs	r1, #1
 800f826:	6878      	ldr	r0, [r7, #4]
 800f828:	4798      	blx	r3
	HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	6818      	ldr	r0, [r3, #0]
 800f82e:	f107 010b 	add.w	r1, r7, #11
 800f832:	f04f 33ff 	mov.w	r3, #4294967295
 800f836:	2201      	movs	r2, #1
 800f838:	f7f9 ffa5 	bl	8009786 <HAL_SPI_Transmit>
	api_config->nrf24_CS(intf_ptr, false);
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	685b      	ldr	r3, [r3, #4]
 800f840:	2100      	movs	r1, #0
 800f842:	6878      	ldr	r0, [r7, #4]
 800f844:	4798      	blx	r3
}
 800f846:	bf00      	nop
 800f848:	3710      	adds	r7, #16
 800f84a:	46bd      	mov	sp, r7
 800f84c:	bd80      	pop	{r7, pc}

0800f84e <nrf24_get_rx_payload_size>:
	HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
	api_config->nrf24_CS(intf_ptr, false);
}

void nrf24_get_rx_payload_size(void * intf_ptr, uint8_t * payload_size)
{
 800f84e:	b580      	push	{r7, lr}
 800f850:	b084      	sub	sp, #16
 800f852:	af00      	add	r7, sp, #0
 800f854:	6078      	str	r0, [r7, #4]
 800f856:	6039      	str	r1, [r7, #0]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	60fb      	str	r3, [r7, #12]
	uint8_t command = NRF24_R_RX_PL_WID;
 800f85c:	2360      	movs	r3, #96	; 0x60
 800f85e:	72fb      	strb	r3, [r7, #11]
	api_config->nrf24_CS(intf_ptr, true);
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	685b      	ldr	r3, [r3, #4]
 800f864:	2101      	movs	r1, #1
 800f866:	6878      	ldr	r0, [r7, #4]
 800f868:	4798      	blx	r3
	HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	6818      	ldr	r0, [r3, #0]
 800f86e:	f107 010b 	add.w	r1, r7, #11
 800f872:	f04f 33ff 	mov.w	r3, #4294967295
 800f876:	2201      	movs	r2, #1
 800f878:	f7f9 ff85 	bl	8009786 <HAL_SPI_Transmit>
	HAL_SPI_Receive(api_config->hspi, payload_size, 1, HAL_MAX_DELAY);
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	6818      	ldr	r0, [r3, #0]
 800f880:	f04f 33ff 	mov.w	r3, #4294967295
 800f884:	2201      	movs	r2, #1
 800f886:	6839      	ldr	r1, [r7, #0]
 800f888:	f7fa f8b9 	bl	80099fe <HAL_SPI_Receive>
	api_config->nrf24_CS(intf_ptr, false);
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	685b      	ldr	r3, [r3, #4]
 800f890:	2100      	movs	r1, #0
 800f892:	6878      	ldr	r0, [r7, #4]
 800f894:	4798      	blx	r3
	// Если размер данных больше 32, то отчищаем rx буфер и зануляем его
    if (*payload_size > 32)
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	781b      	ldrb	r3, [r3, #0]
 800f89a:	2b20      	cmp	r3, #32
 800f89c:	d904      	bls.n	800f8a8 <nrf24_get_rx_payload_size+0x5a>
    {
    	nrf24_flush_rx(intf_ptr);
 800f89e:	6878      	ldr	r0, [r7, #4]
 800f8a0:	f7ff ff97 	bl	800f7d2 <nrf24_flush_rx>
    	payload_size = 0;
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	603b      	str	r3, [r7, #0]
    }
}
 800f8a8:	bf00      	nop
 800f8aa:	3710      	adds	r7, #16
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	bd80      	pop	{r7, pc}

0800f8b0 <nrf24_get_status>:

	api_config->nrf24_CS(intf_ptr, false);
}

void nrf24_get_status(void * intf_ptr, uint8_t * status)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b086      	sub	sp, #24
 800f8b4:	af02      	add	r7, sp, #8
 800f8b6:	6078      	str	r0, [r7, #4]
 800f8b8:	6039      	str	r1, [r7, #0]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	60fb      	str	r3, [r7, #12]
	uint8_t command = NRF24_NOP;
 800f8be:	23ff      	movs	r3, #255	; 0xff
 800f8c0:	72fb      	strb	r3, [r7, #11]
	api_config->nrf24_CS(intf_ptr, true);
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	685b      	ldr	r3, [r3, #4]
 800f8c6:	2101      	movs	r1, #1
 800f8c8:	6878      	ldr	r0, [r7, #4]
 800f8ca:	4798      	blx	r3
	HAL_SPI_TransmitReceive(api_config->hspi, &command, status, 1, HAL_MAX_DELAY);
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	6818      	ldr	r0, [r3, #0]
 800f8d0:	f107 010b 	add.w	r1, r7, #11
 800f8d4:	f04f 33ff 	mov.w	r3, #4294967295
 800f8d8:	9300      	str	r3, [sp, #0]
 800f8da:	2301      	movs	r3, #1
 800f8dc:	683a      	ldr	r2, [r7, #0]
 800f8de:	f7fa f99f 	bl	8009c20 <HAL_SPI_TransmitReceive>
	api_config->nrf24_CS(intf_ptr, false);
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	685b      	ldr	r3, [r3, #4]
 800f8e6:	2100      	movs	r1, #0
 800f8e8:	6878      	ldr	r0, [r7, #4]
 800f8ea:	4798      	blx	r3
}
 800f8ec:	bf00      	nop
 800f8ee:	3710      	adds	r7, #16
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}

0800f8f4 <nrf24_ce_activate>:

void nrf24_ce_activate(void * intf_ptr, bool onoff)
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b084      	sub	sp, #16
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
 800f8fc:	460b      	mov	r3, r1
 800f8fe:	70fb      	strb	r3, [r7, #3]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	60fb      	str	r3, [r7, #12]
	api_config->nrf24_CE(intf_ptr, onoff);
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	689b      	ldr	r3, [r3, #8]
 800f908:	78fa      	ldrb	r2, [r7, #3]
 800f90a:	4611      	mov	r1, r2
 800f90c:	6878      	ldr	r0, [r7, #4]
 800f90e:	4798      	blx	r3
}
 800f910:	bf00      	nop
 800f912:	3710      	adds	r7, #16
 800f914:	46bd      	mov	sp, r7
 800f916:	bd80      	pop	{r7, pc}

0800f918 <_nrf24_CE>:

void _nrf24_CE(void * intf_ptr, bool onoff)
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b084      	sub	sp, #16
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
 800f920:	460b      	mov	r3, r1
 800f922:	70fb      	strb	r3, [r7, #3]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	60fb      	str	r3, [r7, #12]
	nrf24_spi_pins_t *api_config_low = (nrf24_spi_pins_t *)api_config->intf_ptr;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	68db      	ldr	r3, [r3, #12]
 800f92c:	60bb      	str	r3, [r7, #8]
	if (onoff)
 800f92e:	78fb      	ldrb	r3, [r7, #3]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d008      	beq.n	800f946 <_nrf24_CE+0x2e>
	{
		HAL_GPIO_WritePin(api_config_low->ce_port, api_config_low->ce_pin,  GPIO_PIN_SET);
 800f934:	68bb      	ldr	r3, [r7, #8]
 800f936:	6818      	ldr	r0, [r3, #0]
 800f938:	68bb      	ldr	r3, [r7, #8]
 800f93a:	889b      	ldrh	r3, [r3, #4]
 800f93c:	2201      	movs	r2, #1
 800f93e:	4619      	mov	r1, r3
 800f940:	f7f7 fac2 	bl	8006ec8 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(api_config_low->ce_port, api_config_low->ce_pin, GPIO_PIN_RESET);
	}
}
 800f944:	e007      	b.n	800f956 <_nrf24_CE+0x3e>
		HAL_GPIO_WritePin(api_config_low->ce_port, api_config_low->ce_pin, GPIO_PIN_RESET);
 800f946:	68bb      	ldr	r3, [r7, #8]
 800f948:	6818      	ldr	r0, [r3, #0]
 800f94a:	68bb      	ldr	r3, [r7, #8]
 800f94c:	889b      	ldrh	r3, [r3, #4]
 800f94e:	2200      	movs	r2, #0
 800f950:	4619      	mov	r1, r3
 800f952:	f7f7 fab9 	bl	8006ec8 <HAL_GPIO_WritePin>
}
 800f956:	bf00      	nop
 800f958:	3710      	adds	r7, #16
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}
	...

0800f960 <nrf24_spi_init>:
	shift_reg_write_bit_8(api_config_low->this, api_config_low->pos_CE, onoff);
	shift_reg_oe(api_config_low->this, false);
}

void nrf24_spi_init(nrf24_lower_api_config_t* nrf24, SPI_HandleTypeDef *hspi, nrf24_spi_pins_t* pins)
{
 800f960:	b480      	push	{r7}
 800f962:	b085      	sub	sp, #20
 800f964:	af00      	add	r7, sp, #0
 800f966:	60f8      	str	r0, [r7, #12]
 800f968:	60b9      	str	r1, [r7, #8]
 800f96a:	607a      	str	r2, [r7, #4]
	nrf24->hspi = hspi;
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	68ba      	ldr	r2, [r7, #8]
 800f970:	601a      	str	r2, [r3, #0]
	nrf24->nrf24_CS = _nrf24_CS;
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	4a06      	ldr	r2, [pc, #24]	; (800f990 <nrf24_spi_init+0x30>)
 800f976:	605a      	str	r2, [r3, #4]
	nrf24->nrf24_CE = _nrf24_CE;
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	4a06      	ldr	r2, [pc, #24]	; (800f994 <nrf24_spi_init+0x34>)
 800f97c:	609a      	str	r2, [r3, #8]
	nrf24->intf_ptr = pins;
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	687a      	ldr	r2, [r7, #4]
 800f982:	60da      	str	r2, [r3, #12]
}
 800f984:	bf00      	nop
 800f986:	3714      	adds	r7, #20
 800f988:	46bd      	mov	sp, r7
 800f98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98e:	4770      	bx	lr
 800f990:	0800f5e5 	.word	0x0800f5e5
 800f994:	0800f919 	.word	0x0800f919

0800f998 <nrf24_setup_rf>:
#include "../nrf24_lower_api.h"
#include "../nrf24_defs.h"


int nrf24_setup_rf(void * intf_ptr, const nrf24_rf_config_t * config)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b084      	sub	sp, #16
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
 800f9a0:	6039      	str	r1, [r7, #0]
	uint8_t rf_setup = 0;
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	73fb      	strb	r3, [r7, #15]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_RF_SETUP, &rf_setup, 1);
 800f9a6:	f107 020f 	add.w	r2, r7, #15
 800f9aa:	2301      	movs	r3, #1
 800f9ac:	2106      	movs	r1, #6
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f7ff fe3b 	bl	800f62a <nrf24_read_register>
	switch (config->data_rate)
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	781b      	ldrb	r3, [r3, #0]
 800f9b8:	2b02      	cmp	r3, #2
 800f9ba:	d01c      	beq.n	800f9f6 <nrf24_setup_rf+0x5e>
 800f9bc:	2b02      	cmp	r3, #2
 800f9be:	dc25      	bgt.n	800fa0c <nrf24_setup_rf+0x74>
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d002      	beq.n	800f9ca <nrf24_setup_rf+0x32>
 800f9c4:	2b01      	cmp	r3, #1
 800f9c6:	d00b      	beq.n	800f9e0 <nrf24_setup_rf+0x48>
 800f9c8:	e020      	b.n	800fa0c <nrf24_setup_rf+0x74>
	{
	case NRF24_DATARATE_250_KBIT:
		rf_setup |= NRF24_RFSETUP_RF_DR_LOW; // ставим 1
 800f9ca:	7bfb      	ldrb	r3, [r7, #15]
 800f9cc:	f043 0320 	orr.w	r3, r3, #32
 800f9d0:	b2db      	uxtb	r3, r3
 800f9d2:	73fb      	strb	r3, [r7, #15]
		rf_setup &= ~NRF24_RFSETUP_RF_DR_HIGH; // ставим 0
 800f9d4:	7bfb      	ldrb	r3, [r7, #15]
 800f9d6:	f023 0308 	bic.w	r3, r3, #8
 800f9da:	b2db      	uxtb	r3, r3
 800f9dc:	73fb      	strb	r3, [r7, #15]
		break;
 800f9de:	e015      	b.n	800fa0c <nrf24_setup_rf+0x74>
	case NRF24_DATARATE_1000_KBIT :
		rf_setup &= ~NRF24_RFSETUP_RF_DR_LOW;
 800f9e0:	7bfb      	ldrb	r3, [r7, #15]
 800f9e2:	f023 0320 	bic.w	r3, r3, #32
 800f9e6:	b2db      	uxtb	r3, r3
 800f9e8:	73fb      	strb	r3, [r7, #15]
		rf_setup &= ~NRF24_RFSETUP_RF_DR_HIGH;
 800f9ea:	7bfb      	ldrb	r3, [r7, #15]
 800f9ec:	f023 0308 	bic.w	r3, r3, #8
 800f9f0:	b2db      	uxtb	r3, r3
 800f9f2:	73fb      	strb	r3, [r7, #15]
		break;
 800f9f4:	e00a      	b.n	800fa0c <nrf24_setup_rf+0x74>
	case NRF24_DATARATE_2000_KBIT :
		rf_setup &= ~NRF24_RFSETUP_RF_DR_LOW;
 800f9f6:	7bfb      	ldrb	r3, [r7, #15]
 800f9f8:	f023 0320 	bic.w	r3, r3, #32
 800f9fc:	b2db      	uxtb	r3, r3
 800f9fe:	73fb      	strb	r3, [r7, #15]
		rf_setup |= NRF24_RFSETUP_RF_DR_HIGH;
 800fa00:	7bfb      	ldrb	r3, [r7, #15]
 800fa02:	f043 0308 	orr.w	r3, r3, #8
 800fa06:	b2db      	uxtb	r3, r3
 800fa08:	73fb      	strb	r3, [r7, #15]
		break;
 800fa0a:	bf00      	nop
	}

	rf_setup &= ~(NRF24_RFSETUP_RF_PWR_MASK << NRF24_RFSETUP_RF_PWR_OFFSET); // занулили
 800fa0c:	7bfb      	ldrb	r3, [r7, #15]
 800fa0e:	f023 0306 	bic.w	r3, r3, #6
 800fa12:	b2db      	uxtb	r3, r3
 800fa14:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (config->tx_power & NRF24_RFSETUP_RF_PWR_MASK) << NRF24_RFSETUP_RF_PWR_OFFSET; // записали
 800fa16:	683b      	ldr	r3, [r7, #0]
 800fa18:	785b      	ldrb	r3, [r3, #1]
 800fa1a:	005b      	lsls	r3, r3, #1
 800fa1c:	b25b      	sxtb	r3, r3
 800fa1e:	f003 0306 	and.w	r3, r3, #6
 800fa22:	b25a      	sxtb	r2, r3
 800fa24:	7bfb      	ldrb	r3, [r7, #15]
 800fa26:	b25b      	sxtb	r3, r3
 800fa28:	4313      	orrs	r3, r2
 800fa2a:	b25b      	sxtb	r3, r3
 800fa2c:	b2db      	uxtb	r3, r3
 800fa2e:	73fb      	strb	r3, [r7, #15]

	nrf24_write_register(intf_ptr, NRF24_REGADDR_RF_SETUP, &rf_setup, 1);
 800fa30:	f107 020f 	add.w	r2, r7, #15
 800fa34:	2301      	movs	r3, #1
 800fa36:	2106      	movs	r1, #6
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	f7ff fe25 	bl	800f688 <nrf24_write_register>

	uint8_t rf_channel = config->rf_channel;
 800fa3e:	683b      	ldr	r3, [r7, #0]
 800fa40:	789b      	ldrb	r3, [r3, #2]
 800fa42:	73bb      	strb	r3, [r7, #14]
    nrf24_write_register(intf_ptr, NRF24_REGADDR_RF_CH, &rf_channel, 1);
 800fa44:	f107 020e 	add.w	r2, r7, #14
 800fa48:	2301      	movs	r3, #1
 800fa4a:	2105      	movs	r1, #5
 800fa4c:	6878      	ldr	r0, [r7, #4]
 800fa4e:	f7ff fe1b 	bl	800f688 <nrf24_write_register>
	return 0;
 800fa52:	2300      	movs	r3, #0
}
 800fa54:	4618      	mov	r0, r3
 800fa56:	3710      	adds	r7, #16
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	bd80      	pop	{r7, pc}

0800fa5c <nrf24_setup_protocol>:


int nrf24_setup_protocol(void * intf_ptr, const nrf24_protocol_config_t * config)
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b084      	sub	sp, #16
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
 800fa64:	6039      	str	r1, [r7, #0]
    uint8_t conf_reg = 0;
 800fa66:	2300      	movs	r3, #0
 800fa68:	73fb      	strb	r3, [r7, #15]
    nrf24_read_register(intf_ptr, NRF24_REGADDR_CONFIG, &conf_reg, 1);
 800fa6a:	f107 020f 	add.w	r2, r7, #15
 800fa6e:	2301      	movs	r3, #1
 800fa70:	2100      	movs	r1, #0
 800fa72:	6878      	ldr	r0, [r7, #4]
 800fa74:	f7ff fdd9 	bl	800f62a <nrf24_read_register>
    switch (config->crc_size)
 800fa78:	683b      	ldr	r3, [r7, #0]
 800fa7a:	781b      	ldrb	r3, [r3, #0]
 800fa7c:	2b02      	cmp	r3, #2
 800fa7e:	d017      	beq.n	800fab0 <nrf24_setup_protocol+0x54>
 800fa80:	2b02      	cmp	r3, #2
 800fa82:	dc20      	bgt.n	800fac6 <nrf24_setup_protocol+0x6a>
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d002      	beq.n	800fa8e <nrf24_setup_protocol+0x32>
 800fa88:	2b01      	cmp	r3, #1
 800fa8a:	d006      	beq.n	800fa9a <nrf24_setup_protocol+0x3e>
 800fa8c:	e01b      	b.n	800fac6 <nrf24_setup_protocol+0x6a>
    {
    case NRF24_CRCSIZE_DISABLE:
    	conf_reg &= ~NRF24_CONFIG_EN_CRC;
 800fa8e:	7bfb      	ldrb	r3, [r7, #15]
 800fa90:	f023 0308 	bic.w	r3, r3, #8
 800fa94:	b2db      	uxtb	r3, r3
 800fa96:	73fb      	strb	r3, [r7, #15]
    	break;
 800fa98:	e015      	b.n	800fac6 <nrf24_setup_protocol+0x6a>
    case NRF24_CRCSIZE_1BYTE :
    	conf_reg |= NRF24_CONFIG_EN_CRC;
 800fa9a:	7bfb      	ldrb	r3, [r7, #15]
 800fa9c:	f043 0308 	orr.w	r3, r3, #8
 800faa0:	b2db      	uxtb	r3, r3
 800faa2:	73fb      	strb	r3, [r7, #15]
    	conf_reg &= ~NRF24_CONFIG_CRCO;
 800faa4:	7bfb      	ldrb	r3, [r7, #15]
 800faa6:	f023 0304 	bic.w	r3, r3, #4
 800faaa:	b2db      	uxtb	r3, r3
 800faac:	73fb      	strb	r3, [r7, #15]
    	break;
 800faae:	e00a      	b.n	800fac6 <nrf24_setup_protocol+0x6a>
    case NRF24_CRCSIZE_2BYTE :
    	conf_reg |= NRF24_CONFIG_EN_CRC;
 800fab0:	7bfb      	ldrb	r3, [r7, #15]
 800fab2:	f043 0308 	orr.w	r3, r3, #8
 800fab6:	b2db      	uxtb	r3, r3
 800fab8:	73fb      	strb	r3, [r7, #15]
    	conf_reg |= NRF24_CONFIG_CRCO;
 800faba:	7bfb      	ldrb	r3, [r7, #15]
 800fabc:	f043 0304 	orr.w	r3, r3, #4
 800fac0:	b2db      	uxtb	r3, r3
 800fac2:	73fb      	strb	r3, [r7, #15]
    	break;
 800fac4:	bf00      	nop
    }
    nrf24_write_register(intf_ptr, NRF24_REGADDR_CONFIG, &conf_reg, 1);
 800fac6:	f107 020f 	add.w	r2, r7, #15
 800faca:	2301      	movs	r3, #1
 800facc:	2100      	movs	r1, #0
 800face:	6878      	ldr	r0, [r7, #4]
 800fad0:	f7ff fdda 	bl	800f688 <nrf24_write_register>

    uint8_t setup_aw = config->address_width;
 800fad4:	683b      	ldr	r3, [r7, #0]
 800fad6:	785b      	ldrb	r3, [r3, #1]
 800fad8:	73bb      	strb	r3, [r7, #14]
    nrf24_write_register(intf_ptr, NRF24_REGADDR_SETUP_AW, &setup_aw, 1);
 800fada:	f107 020e 	add.w	r2, r7, #14
 800fade:	2301      	movs	r3, #1
 800fae0:	2103      	movs	r1, #3
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	f7ff fdd0 	bl	800f688 <nrf24_write_register>

    uint8_t features = 0;
 800fae8:	2300      	movs	r3, #0
 800faea:	737b      	strb	r3, [r7, #13]
    if (config->en_ack_payload)
 800faec:	683b      	ldr	r3, [r7, #0]
 800faee:	78db      	ldrb	r3, [r3, #3]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d004      	beq.n	800fafe <nrf24_setup_protocol+0xa2>
    {
    	features |= NRF24_FEATURE_EN_ACK_PAY;
 800faf4:	7b7b      	ldrb	r3, [r7, #13]
 800faf6:	f043 0302 	orr.w	r3, r3, #2
 800fafa:	b2db      	uxtb	r3, r3
 800fafc:	737b      	strb	r3, [r7, #13]
    }
    if (config->en_dyn_ack)
 800fafe:	683b      	ldr	r3, [r7, #0]
 800fb00:	791b      	ldrb	r3, [r3, #4]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d004      	beq.n	800fb10 <nrf24_setup_protocol+0xb4>
    {
    	features |= NRF24_FEATURE_EN_DYN_ACK;
 800fb06:	7b7b      	ldrb	r3, [r7, #13]
 800fb08:	f043 0301 	orr.w	r3, r3, #1
 800fb0c:	b2db      	uxtb	r3, r3
 800fb0e:	737b      	strb	r3, [r7, #13]
    }
    if (config->en_dyn_payload_size)
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	789b      	ldrb	r3, [r3, #2]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d004      	beq.n	800fb22 <nrf24_setup_protocol+0xc6>
    {
    	features |= NRF24_FEATURE_EN_DPL;
 800fb18:	7b7b      	ldrb	r3, [r7, #13]
 800fb1a:	f043 0304 	orr.w	r3, r3, #4
 800fb1e:	b2db      	uxtb	r3, r3
 800fb20:	737b      	strb	r3, [r7, #13]
    }
    nrf24_write_register(intf_ptr, NRF24_REGADDR_FEATURE, &features, 1);
 800fb22:	f107 020d 	add.w	r2, r7, #13
 800fb26:	2301      	movs	r3, #1
 800fb28:	211d      	movs	r1, #29
 800fb2a:	6878      	ldr	r0, [r7, #4]
 800fb2c:	f7ff fdac 	bl	800f688 <nrf24_write_register>

    uint8_t setup_retr = (config->auto_retransmit_delay << 4) | (config->auto_retransmit_count & 0xf);
 800fb30:	683b      	ldr	r3, [r7, #0]
 800fb32:	799b      	ldrb	r3, [r3, #6]
 800fb34:	011b      	lsls	r3, r3, #4
 800fb36:	b25a      	sxtb	r2, r3
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	795b      	ldrb	r3, [r3, #5]
 800fb3c:	b25b      	sxtb	r3, r3
 800fb3e:	f003 030f 	and.w	r3, r3, #15
 800fb42:	b25b      	sxtb	r3, r3
 800fb44:	4313      	orrs	r3, r2
 800fb46:	b25b      	sxtb	r3, r3
 800fb48:	b2db      	uxtb	r3, r3
 800fb4a:	733b      	strb	r3, [r7, #12]
    nrf24_write_register(intf_ptr, NRF24_REGADDR_SETUP_RETR, &setup_retr, 1);
 800fb4c:	f107 020c 	add.w	r2, r7, #12
 800fb50:	2301      	movs	r3, #1
 800fb52:	2104      	movs	r1, #4
 800fb54:	6878      	ldr	r0, [r7, #4]
 800fb56:	f7ff fd97 	bl	800f688 <nrf24_write_register>
	return 0;
 800fb5a:	2300      	movs	r3, #0
}
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	3710      	adds	r7, #16
 800fb60:	46bd      	mov	sp, r7
 800fb62:	bd80      	pop	{r7, pc}

0800fb64 <nrf24_pipe_rx_start>:


int nrf24_pipe_rx_start(void * intf_ptr, uint8_t pipe_no, const nrf24_pipe_config_t * config)
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b086      	sub	sp, #24
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	60f8      	str	r0, [r7, #12]
 800fb6c:	460b      	mov	r3, r1
 800fb6e:	607a      	str	r2, [r7, #4]
 800fb70:	72fb      	strb	r3, [r7, #11]
	uint8_t en_aa = 0 ;
 800fb72:	2300      	movs	r3, #0
 800fb74:	75bb      	strb	r3, [r7, #22]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_EN_AA, &en_aa, 1);
 800fb76:	f107 0216 	add.w	r2, r7, #22
 800fb7a:	2301      	movs	r3, #1
 800fb7c:	2101      	movs	r1, #1
 800fb7e:	68f8      	ldr	r0, [r7, #12]
 800fb80:	f7ff fd53 	bl	800f62a <nrf24_read_register>
	if (config->enable_auto_ack)
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	781b      	ldrb	r3, [r3, #0]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d00b      	beq.n	800fba4 <nrf24_pipe_rx_start+0x40>
	{
		en_aa |= (1 << pipe_no);
 800fb8c:	7afb      	ldrb	r3, [r7, #11]
 800fb8e:	2201      	movs	r2, #1
 800fb90:	fa02 f303 	lsl.w	r3, r2, r3
 800fb94:	b25a      	sxtb	r2, r3
 800fb96:	7dbb      	ldrb	r3, [r7, #22]
 800fb98:	b25b      	sxtb	r3, r3
 800fb9a:	4313      	orrs	r3, r2
 800fb9c:	b25b      	sxtb	r3, r3
 800fb9e:	b2db      	uxtb	r3, r3
 800fba0:	75bb      	strb	r3, [r7, #22]
 800fba2:	e00c      	b.n	800fbbe <nrf24_pipe_rx_start+0x5a>
	}
	else
	{
		en_aa &= ~(1 << pipe_no);
 800fba4:	7afb      	ldrb	r3, [r7, #11]
 800fba6:	2201      	movs	r2, #1
 800fba8:	fa02 f303 	lsl.w	r3, r2, r3
 800fbac:	b25b      	sxtb	r3, r3
 800fbae:	43db      	mvns	r3, r3
 800fbb0:	b25a      	sxtb	r2, r3
 800fbb2:	7dbb      	ldrb	r3, [r7, #22]
 800fbb4:	b25b      	sxtb	r3, r3
 800fbb6:	4013      	ands	r3, r2
 800fbb8:	b25b      	sxtb	r3, r3
 800fbba:	b2db      	uxtb	r3, r3
 800fbbc:	75bb      	strb	r3, [r7, #22]
	}
	nrf24_write_register(intf_ptr, NRF24_REGADDR_EN_AA, &en_aa, 1);
 800fbbe:	f107 0216 	add.w	r2, r7, #22
 800fbc2:	2301      	movs	r3, #1
 800fbc4:	2101      	movs	r1, #1
 800fbc6:	68f8      	ldr	r0, [r7, #12]
 800fbc8:	f7ff fd5e 	bl	800f688 <nrf24_write_register>

	uint8_t en_rxaddr = 0;
 800fbcc:	2300      	movs	r3, #0
 800fbce:	757b      	strb	r3, [r7, #21]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_EN_RXADDR, &en_rxaddr, 1);
 800fbd0:	f107 0215 	add.w	r2, r7, #21
 800fbd4:	2301      	movs	r3, #1
 800fbd6:	2102      	movs	r1, #2
 800fbd8:	68f8      	ldr	r0, [r7, #12]
 800fbda:	f7ff fd26 	bl	800f62a <nrf24_read_register>
	en_rxaddr |= (1 << pipe_no);
 800fbde:	7afb      	ldrb	r3, [r7, #11]
 800fbe0:	2201      	movs	r2, #1
 800fbe2:	fa02 f303 	lsl.w	r3, r2, r3
 800fbe6:	b25a      	sxtb	r2, r3
 800fbe8:	7d7b      	ldrb	r3, [r7, #21]
 800fbea:	b25b      	sxtb	r3, r3
 800fbec:	4313      	orrs	r3, r2
 800fbee:	b25b      	sxtb	r3, r3
 800fbf0:	b2db      	uxtb	r3, r3
 800fbf2:	757b      	strb	r3, [r7, #21]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_EN_RXADDR, &en_rxaddr, 1);
 800fbf4:	f107 0215 	add.w	r2, r7, #21
 800fbf8:	2301      	movs	r3, #1
 800fbfa:	2102      	movs	r1, #2
 800fbfc:	68f8      	ldr	r0, [r7, #12]
 800fbfe:	f7ff fd43 	bl	800f688 <nrf24_write_register>

	uint8_t rx_pw = 0;
 800fc02:	2300      	movs	r3, #0
 800fc04:	75fb      	strb	r3, [r7, #23]
	switch (pipe_no)
 800fc06:	7afb      	ldrb	r3, [r7, #11]
 800fc08:	2b05      	cmp	r3, #5
 800fc0a:	d851      	bhi.n	800fcb0 <nrf24_pipe_rx_start+0x14c>
 800fc0c:	a201      	add	r2, pc, #4	; (adr r2, 800fc14 <nrf24_pipe_rx_start+0xb0>)
 800fc0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc12:	bf00      	nop
 800fc14:	0800fc2d 	.word	0x0800fc2d
 800fc18:	0800fc43 	.word	0x0800fc43
 800fc1c:	0800fc59 	.word	0x0800fc59
 800fc20:	0800fc6f 	.word	0x0800fc6f
 800fc24:	0800fc85 	.word	0x0800fc85
 800fc28:	0800fc9b 	.word	0x0800fc9b
	{
	case 0:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P0, (uint8_t *)(&config->address), 5);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	f103 0208 	add.w	r2, r3, #8
 800fc32:	2305      	movs	r3, #5
 800fc34:	210a      	movs	r1, #10
 800fc36:	68f8      	ldr	r0, [r7, #12]
 800fc38:	f7ff fd26 	bl	800f688 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P0;
 800fc3c:	2311      	movs	r3, #17
 800fc3e:	75fb      	strb	r3, [r7, #23]
		break;
 800fc40:	e036      	b.n	800fcb0 <nrf24_pipe_rx_start+0x14c>
	case 1:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P1, (uint8_t *)(&config->address), 5);
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	f103 0208 	add.w	r2, r3, #8
 800fc48:	2305      	movs	r3, #5
 800fc4a:	210b      	movs	r1, #11
 800fc4c:	68f8      	ldr	r0, [r7, #12]
 800fc4e:	f7ff fd1b 	bl	800f688 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P1;
 800fc52:	2312      	movs	r3, #18
 800fc54:	75fb      	strb	r3, [r7, #23]
		break;
 800fc56:	e02b      	b.n	800fcb0 <nrf24_pipe_rx_start+0x14c>
	case 2:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P2, ((uint8_t *)(&config->address) + 4), 1);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	3308      	adds	r3, #8
 800fc5c:	1d1a      	adds	r2, r3, #4
 800fc5e:	2301      	movs	r3, #1
 800fc60:	210c      	movs	r1, #12
 800fc62:	68f8      	ldr	r0, [r7, #12]
 800fc64:	f7ff fd10 	bl	800f688 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P2;
 800fc68:	2313      	movs	r3, #19
 800fc6a:	75fb      	strb	r3, [r7, #23]
		break;
 800fc6c:	e020      	b.n	800fcb0 <nrf24_pipe_rx_start+0x14c>
	case 3:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P3, ((uint8_t *)(&config->address) + 4), 1);
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	3308      	adds	r3, #8
 800fc72:	1d1a      	adds	r2, r3, #4
 800fc74:	2301      	movs	r3, #1
 800fc76:	210d      	movs	r1, #13
 800fc78:	68f8      	ldr	r0, [r7, #12]
 800fc7a:	f7ff fd05 	bl	800f688 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P3;
 800fc7e:	2314      	movs	r3, #20
 800fc80:	75fb      	strb	r3, [r7, #23]
		break;
 800fc82:	e015      	b.n	800fcb0 <nrf24_pipe_rx_start+0x14c>
	case 4:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P4, ((uint8_t *)(&config->address) + 4), 1);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	3308      	adds	r3, #8
 800fc88:	1d1a      	adds	r2, r3, #4
 800fc8a:	2301      	movs	r3, #1
 800fc8c:	210e      	movs	r1, #14
 800fc8e:	68f8      	ldr	r0, [r7, #12]
 800fc90:	f7ff fcfa 	bl	800f688 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P4;
 800fc94:	2315      	movs	r3, #21
 800fc96:	75fb      	strb	r3, [r7, #23]
		break;
 800fc98:	e00a      	b.n	800fcb0 <nrf24_pipe_rx_start+0x14c>
	case 5:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P5, ((uint8_t *)(&config->address) + 4), 1);
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	3308      	adds	r3, #8
 800fc9e:	1d1a      	adds	r2, r3, #4
 800fca0:	2301      	movs	r3, #1
 800fca2:	210f      	movs	r1, #15
 800fca4:	68f8      	ldr	r0, [r7, #12]
 800fca6:	f7ff fcef 	bl	800f688 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P5;
 800fcaa:	2316      	movs	r3, #22
 800fcac:	75fb      	strb	r3, [r7, #23]
		break;
 800fcae:	bf00      	nop
	}

	uint8_t dynpd = 0;
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	753b      	strb	r3, [r7, #20]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_DYNPD, &dynpd, 1);
 800fcb4:	f107 0214 	add.w	r2, r7, #20
 800fcb8:	2301      	movs	r3, #1
 800fcba:	211c      	movs	r1, #28
 800fcbc:	68f8      	ldr	r0, [r7, #12]
 800fcbe:	f7ff fcb4 	bl	800f62a <nrf24_read_register>
	if (config->payload_size >= 0)
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	db15      	blt.n	800fcf8 <nrf24_pipe_rx_start+0x194>
	{
		nrf24_write_register(intf_ptr, rx_pw, (uint8_t *)(&config->payload_size), 1);
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	f103 0210 	add.w	r2, r3, #16
 800fcd2:	7df9      	ldrb	r1, [r7, #23]
 800fcd4:	2301      	movs	r3, #1
 800fcd6:	68f8      	ldr	r0, [r7, #12]
 800fcd8:	f7ff fcd6 	bl	800f688 <nrf24_write_register>
		dynpd &= ~(1 << pipe_no);
 800fcdc:	7afb      	ldrb	r3, [r7, #11]
 800fcde:	2201      	movs	r2, #1
 800fce0:	fa02 f303 	lsl.w	r3, r2, r3
 800fce4:	b25b      	sxtb	r3, r3
 800fce6:	43db      	mvns	r3, r3
 800fce8:	b25a      	sxtb	r2, r3
 800fcea:	7d3b      	ldrb	r3, [r7, #20]
 800fcec:	b25b      	sxtb	r3, r3
 800fcee:	4013      	ands	r3, r2
 800fcf0:	b25b      	sxtb	r3, r3
 800fcf2:	b2db      	uxtb	r3, r3
 800fcf4:	753b      	strb	r3, [r7, #20]
 800fcf6:	e013      	b.n	800fd20 <nrf24_pipe_rx_start+0x1bc>
	}
	else
	{
		uint8_t pld_size = 32; // Нужно записать не 0, чтобы пайп в целом работал
 800fcf8:	2320      	movs	r3, #32
 800fcfa:	74fb      	strb	r3, [r7, #19]
		nrf24_write_register(intf_ptr, rx_pw, &pld_size, 1);
 800fcfc:	f107 0213 	add.w	r2, r7, #19
 800fd00:	7df9      	ldrb	r1, [r7, #23]
 800fd02:	2301      	movs	r3, #1
 800fd04:	68f8      	ldr	r0, [r7, #12]
 800fd06:	f7ff fcbf 	bl	800f688 <nrf24_write_register>
		dynpd |= (1 << pipe_no);
 800fd0a:	7afb      	ldrb	r3, [r7, #11]
 800fd0c:	2201      	movs	r2, #1
 800fd0e:	fa02 f303 	lsl.w	r3, r2, r3
 800fd12:	b25a      	sxtb	r2, r3
 800fd14:	7d3b      	ldrb	r3, [r7, #20]
 800fd16:	b25b      	sxtb	r3, r3
 800fd18:	4313      	orrs	r3, r2
 800fd1a:	b25b      	sxtb	r3, r3
 800fd1c:	b2db      	uxtb	r3, r3
 800fd1e:	753b      	strb	r3, [r7, #20]
	}
	nrf24_write_register(intf_ptr, NRF24_REGADDR_DYNPD, &dynpd, 1);
 800fd20:	f107 0214 	add.w	r2, r7, #20
 800fd24:	2301      	movs	r3, #1
 800fd26:	211c      	movs	r1, #28
 800fd28:	68f8      	ldr	r0, [r7, #12]
 800fd2a:	f7ff fcad 	bl	800f688 <nrf24_write_register>

	return 0;
 800fd2e:	2300      	movs	r3, #0
}
 800fd30:	4618      	mov	r0, r3
 800fd32:	3718      	adds	r7, #24
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd80      	pop	{r7, pc}

0800fd38 <nrf24_pipe_set_tx_addr>:
	return 0;
}


int nrf24_pipe_set_tx_addr(void * intf_ptr, uint64_t tx_addr)
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b084      	sub	sp, #16
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	60f8      	str	r0, [r7, #12]
 800fd40:	e9c7 2300 	strd	r2, r3, [r7]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_TX_ADDR, (uint8_t *)(&tx_addr), 5);
 800fd44:	463a      	mov	r2, r7
 800fd46:	2305      	movs	r3, #5
 800fd48:	2110      	movs	r1, #16
 800fd4a:	68f8      	ldr	r0, [r7, #12]
 800fd4c:	f7ff fc9c 	bl	800f688 <nrf24_write_register>
	return 0;
 800fd50:	2300      	movs	r3, #0
}
 800fd52:	4618      	mov	r0, r3
 800fd54:	3710      	adds	r7, #16
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd80      	pop	{r7, pc}

0800fd5a <nrf24_mode_power_down>:


int nrf24_mode_power_down(void * intf_ptr)
{
 800fd5a:	b580      	push	{r7, lr}
 800fd5c:	b084      	sub	sp, #16
 800fd5e:	af00      	add	r7, sp, #0
 800fd60:	6078      	str	r0, [r7, #4]
	uint8_t config_reg = 0;
 800fd62:	2300      	movs	r3, #0
 800fd64:	73fb      	strb	r3, [r7, #15]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_CONFIG, &config_reg, 1);
 800fd66:	f107 020f 	add.w	r2, r7, #15
 800fd6a:	2301      	movs	r3, #1
 800fd6c:	2100      	movs	r1, #0
 800fd6e:	6878      	ldr	r0, [r7, #4]
 800fd70:	f7ff fc5b 	bl	800f62a <nrf24_read_register>
	config_reg &= ~NRF24_CONFIG_PWR_UP;
 800fd74:	7bfb      	ldrb	r3, [r7, #15]
 800fd76:	f023 0302 	bic.w	r3, r3, #2
 800fd7a:	b2db      	uxtb	r3, r3
 800fd7c:	73fb      	strb	r3, [r7, #15]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_CONFIG, &config_reg, 1);
 800fd7e:	f107 020f 	add.w	r2, r7, #15
 800fd82:	2301      	movs	r3, #1
 800fd84:	2100      	movs	r1, #0
 800fd86:	6878      	ldr	r0, [r7, #4]
 800fd88:	f7ff fc7e 	bl	800f688 <nrf24_write_register>
	return 0;
 800fd8c:	2300      	movs	r3, #0
}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	3710      	adds	r7, #16
 800fd92:	46bd      	mov	sp, r7
 800fd94:	bd80      	pop	{r7, pc}

0800fd96 <nrf24_mode_standby>:


int nrf24_mode_standby(void * intf_ptr)
{
 800fd96:	b580      	push	{r7, lr}
 800fd98:	b084      	sub	sp, #16
 800fd9a:	af00      	add	r7, sp, #0
 800fd9c:	6078      	str	r0, [r7, #4]
	uint8_t config_reg = 0;
 800fd9e:	2300      	movs	r3, #0
 800fda0:	73fb      	strb	r3, [r7, #15]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_CONFIG, &config_reg, 1);
 800fda2:	f107 020f 	add.w	r2, r7, #15
 800fda6:	2301      	movs	r3, #1
 800fda8:	2100      	movs	r1, #0
 800fdaa:	6878      	ldr	r0, [r7, #4]
 800fdac:	f7ff fc3d 	bl	800f62a <nrf24_read_register>
	config_reg |= NRF24_CONFIG_PWR_UP;
 800fdb0:	7bfb      	ldrb	r3, [r7, #15]
 800fdb2:	f043 0302 	orr.w	r3, r3, #2
 800fdb6:	b2db      	uxtb	r3, r3
 800fdb8:	73fb      	strb	r3, [r7, #15]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_CONFIG, &config_reg, 1);
 800fdba:	f107 020f 	add.w	r2, r7, #15
 800fdbe:	2301      	movs	r3, #1
 800fdc0:	2100      	movs	r1, #0
 800fdc2:	6878      	ldr	r0, [r7, #4]
 800fdc4:	f7ff fc60 	bl	800f688 <nrf24_write_register>
	nrf24_ce_activate(intf_ptr, false);
 800fdc8:	2100      	movs	r1, #0
 800fdca:	6878      	ldr	r0, [r7, #4]
 800fdcc:	f7ff fd92 	bl	800f8f4 <nrf24_ce_activate>
	return 0;
 800fdd0:	2300      	movs	r3, #0
}
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	3710      	adds	r7, #16
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	bd80      	pop	{r7, pc}

0800fdda <nrf24_mode_tx>:


int nrf24_mode_tx(void * intf_ptr)
{
 800fdda:	b580      	push	{r7, lr}
 800fddc:	b084      	sub	sp, #16
 800fdde:	af00      	add	r7, sp, #0
 800fde0:	6078      	str	r0, [r7, #4]
	uint8_t mode_tx = 0;
 800fde2:	2300      	movs	r3, #0
 800fde4:	73fb      	strb	r3, [r7, #15]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_CONFIG, &mode_tx, 1);
 800fde6:	f107 020f 	add.w	r2, r7, #15
 800fdea:	2301      	movs	r3, #1
 800fdec:	2100      	movs	r1, #0
 800fdee:	6878      	ldr	r0, [r7, #4]
 800fdf0:	f7ff fc1b 	bl	800f62a <nrf24_read_register>
	mode_tx &= ~NRF24_CONFIG_PRIM_RX;
 800fdf4:	7bfb      	ldrb	r3, [r7, #15]
 800fdf6:	f023 0301 	bic.w	r3, r3, #1
 800fdfa:	b2db      	uxtb	r3, r3
 800fdfc:	73fb      	strb	r3, [r7, #15]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_CONFIG, &mode_tx, 1);
 800fdfe:	f107 020f 	add.w	r2, r7, #15
 800fe02:	2301      	movs	r3, #1
 800fe04:	2100      	movs	r1, #0
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	f7ff fc3e 	bl	800f688 <nrf24_write_register>
	nrf24_ce_activate(intf_ptr, true);
 800fe0c:	2101      	movs	r1, #1
 800fe0e:	6878      	ldr	r0, [r7, #4]
 800fe10:	f7ff fd70 	bl	800f8f4 <nrf24_ce_activate>
	return 0;
 800fe14:	2300      	movs	r3, #0
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	3710      	adds	r7, #16
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}

0800fe1e <nrf24_fifo_status>:
	return 0;
}


int nrf24_fifo_status(void * intf_ptr, nrf24_fifo_status_t * rx_status, nrf24_fifo_status_t * tx_status)
{
 800fe1e:	b580      	push	{r7, lr}
 800fe20:	b086      	sub	sp, #24
 800fe22:	af00      	add	r7, sp, #0
 800fe24:	60f8      	str	r0, [r7, #12]
 800fe26:	60b9      	str	r1, [r7, #8]
 800fe28:	607a      	str	r2, [r7, #4]
	uint8_t fifo_satus = 0;
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	75fb      	strb	r3, [r7, #23]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_FIFO_STATUS, &fifo_satus, 1);
 800fe2e:	f107 0217 	add.w	r2, r7, #23
 800fe32:	2301      	movs	r3, #1
 800fe34:	2117      	movs	r1, #23
 800fe36:	68f8      	ldr	r0, [r7, #12]
 800fe38:	f7ff fbf7 	bl	800f62a <nrf24_read_register>

	*rx_status = NRF24_FIFO_NOT_EMPTY;
 800fe3c:	68bb      	ldr	r3, [r7, #8]
 800fe3e:	2201      	movs	r2, #1
 800fe40:	701a      	strb	r2, [r3, #0]
	if (((fifo_satus >> NRF24_FIFO_STATUS_RX_EMPTY_OFFSET) & NRF24_FIFO_STATUS_RX_EMPTY_MASK) == 1)
 800fe42:	7dfb      	ldrb	r3, [r7, #23]
 800fe44:	f003 0301 	and.w	r3, r3, #1
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d002      	beq.n	800fe52 <nrf24_fifo_status+0x34>
	{
		*rx_status = NRF24_FIFO_EMPTY;
 800fe4c:	68bb      	ldr	r3, [r7, #8]
 800fe4e:	2200      	movs	r2, #0
 800fe50:	701a      	strb	r2, [r3, #0]
	}
	if (((fifo_satus >> NRF24_FIFO_STATUS_RX_FULL_OFFSET) & NRF24_FIFO_STATUS_RX_FULL_MASK) == 1)
 800fe52:	7dfb      	ldrb	r3, [r7, #23]
 800fe54:	085b      	lsrs	r3, r3, #1
 800fe56:	b2db      	uxtb	r3, r3
 800fe58:	f003 0301 	and.w	r3, r3, #1
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d002      	beq.n	800fe66 <nrf24_fifo_status+0x48>
	{
		*rx_status = NRF24_FIFO_FULL;
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	2202      	movs	r2, #2
 800fe64:	701a      	strb	r2, [r3, #0]
	}

	*tx_status = NRF24_FIFO_NOT_EMPTY;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	2201      	movs	r2, #1
 800fe6a:	701a      	strb	r2, [r3, #0]
	if (((fifo_satus >> NRF24_FIFO_STATUS_TX_EMPTY_OFFSET) & NRF24_FIFO_STATUS_TX_EMPTY_MASK) == 1)
 800fe6c:	7dfb      	ldrb	r3, [r7, #23]
 800fe6e:	091b      	lsrs	r3, r3, #4
 800fe70:	b2db      	uxtb	r3, r3
 800fe72:	f003 0301 	and.w	r3, r3, #1
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d002      	beq.n	800fe80 <nrf24_fifo_status+0x62>
	{
		*tx_status = NRF24_FIFO_EMPTY;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	701a      	strb	r2, [r3, #0]
	}
	if (((fifo_satus >> NRF24_FIFO_STATUS_TX_FULL_OFFSET) & NRF24_FIFO_STATUS_TX_FULL_MASK) == 1)
 800fe80:	7dfb      	ldrb	r3, [r7, #23]
 800fe82:	095b      	lsrs	r3, r3, #5
 800fe84:	b2db      	uxtb	r3, r3
 800fe86:	f003 0301 	and.w	r3, r3, #1
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d002      	beq.n	800fe94 <nrf24_fifo_status+0x76>
	{
		*tx_status = NRF24_FIFO_FULL;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	2202      	movs	r2, #2
 800fe92:	701a      	strb	r2, [r3, #0]
	}
	return 0;
 800fe94:	2300      	movs	r3, #0
}
 800fe96:	4618      	mov	r0, r3
 800fe98:	3718      	adds	r7, #24
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	bd80      	pop	{r7, pc}

0800fe9e <nrf24_fifo_read>:


int nrf24_fifo_read(void * intf_ptr, uint8_t * packet_buffer, uint8_t packet_buffer_size)
{
 800fe9e:	b580      	push	{r7, lr}
 800fea0:	b086      	sub	sp, #24
 800fea2:	af00      	add	r7, sp, #0
 800fea4:	60f8      	str	r0, [r7, #12]
 800fea6:	60b9      	str	r1, [r7, #8]
 800fea8:	4613      	mov	r3, r2
 800feaa:	71fb      	strb	r3, [r7, #7]
	uint8_t payload_size = 0;
 800feac:	2300      	movs	r3, #0
 800feae:	75fb      	strb	r3, [r7, #23]
	nrf24_get_rx_payload_size(intf_ptr, &payload_size);
 800feb0:	f107 0317 	add.w	r3, r7, #23
 800feb4:	4619      	mov	r1, r3
 800feb6:	68f8      	ldr	r0, [r7, #12]
 800feb8:	f7ff fcc9 	bl	800f84e <nrf24_get_rx_payload_size>
	if (payload_size > 0)
 800febc:	7dfb      	ldrb	r3, [r7, #23]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d005      	beq.n	800fece <nrf24_fifo_read+0x30>
	{
		nrf24_read_rx_payload(intf_ptr, packet_buffer, packet_buffer_size);
 800fec2:	79fb      	ldrb	r3, [r7, #7]
 800fec4:	461a      	mov	r2, r3
 800fec6:	68b9      	ldr	r1, [r7, #8]
 800fec8:	68f8      	ldr	r0, [r7, #12]
 800feca:	f7ff fc11 	bl	800f6f0 <nrf24_read_rx_payload>
	}
	return payload_size;
 800fece:	7dfb      	ldrb	r3, [r7, #23]
}
 800fed0:	4618      	mov	r0, r3
 800fed2:	3718      	adds	r7, #24
 800fed4:	46bd      	mov	sp, r7
 800fed6:	bd80      	pop	{r7, pc}

0800fed8 <nrf24_fifo_write>:


int nrf24_fifo_write(void * intf_ptr, const uint8_t * packet, uint8_t packet_size, bool use_ack)
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b084      	sub	sp, #16
 800fedc:	af00      	add	r7, sp, #0
 800fede:	60f8      	str	r0, [r7, #12]
 800fee0:	60b9      	str	r1, [r7, #8]
 800fee2:	4611      	mov	r1, r2
 800fee4:	461a      	mov	r2, r3
 800fee6:	460b      	mov	r3, r1
 800fee8:	71fb      	strb	r3, [r7, #7]
 800feea:	4613      	mov	r3, r2
 800feec:	71bb      	strb	r3, [r7, #6]
	if (packet_size == 0)
 800feee:	79fb      	ldrb	r3, [r7, #7]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d101      	bne.n	800fef8 <nrf24_fifo_write+0x20>
	{
		return 0;
 800fef4:	2300      	movs	r3, #0
 800fef6:	e011      	b.n	800ff1c <nrf24_fifo_write+0x44>
	}
	if (packet_size <= 32)
 800fef8:	79fb      	ldrb	r3, [r7, #7]
 800fefa:	2b20      	cmp	r3, #32
 800fefc:	d807      	bhi.n	800ff0e <nrf24_fifo_write+0x36>
	{
		nrf24_write_tx_payload(intf_ptr, packet,  packet_size,  use_ack);
 800fefe:	79fa      	ldrb	r2, [r7, #7]
 800ff00:	79bb      	ldrb	r3, [r7, #6]
 800ff02:	68b9      	ldr	r1, [r7, #8]
 800ff04:	68f8      	ldr	r0, [r7, #12]
 800ff06:	f7ff fc33 	bl	800f770 <nrf24_write_tx_payload>
		return packet_size;
 800ff0a:	79fb      	ldrb	r3, [r7, #7]
 800ff0c:	e006      	b.n	800ff1c <nrf24_fifo_write+0x44>
	}
	else
	{
		nrf24_write_tx_payload(intf_ptr, packet,  32,  use_ack);
 800ff0e:	79bb      	ldrb	r3, [r7, #6]
 800ff10:	2220      	movs	r2, #32
 800ff12:	68b9      	ldr	r1, [r7, #8]
 800ff14:	68f8      	ldr	r0, [r7, #12]
 800ff16:	f7ff fc2b 	bl	800f770 <nrf24_write_tx_payload>
		return 32;
 800ff1a:	2320      	movs	r3, #32
	}
}
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	3710      	adds	r7, #16
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd80      	pop	{r7, pc}

0800ff24 <nrf24_fifo_flush_tx>:
	}
}


int nrf24_fifo_flush_tx(void * intf_ptr)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b082      	sub	sp, #8
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
	nrf24_flush_tx(intf_ptr);
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	f7ff fc6f 	bl	800f810 <nrf24_flush_tx>
	return 0;
 800ff32:	2300      	movs	r3, #0
}
 800ff34:	4618      	mov	r0, r3
 800ff36:	3708      	adds	r7, #8
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	bd80      	pop	{r7, pc}

0800ff3c <nrf24_fifo_flush_rx>:


int nrf24_fifo_flush_rx(void * intf_ptr)
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b082      	sub	sp, #8
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
	nrf24_flush_rx(intf_ptr);
 800ff44:	6878      	ldr	r0, [r7, #4]
 800ff46:	f7ff fc44 	bl	800f7d2 <nrf24_flush_rx>
	return 0;
 800ff4a:	2300      	movs	r3, #0
}
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	3708      	adds	r7, #8
 800ff50:	46bd      	mov	sp, r7
 800ff52:	bd80      	pop	{r7, pc}

0800ff54 <nrf24_irq_get>:
	return 0;
}


int nrf24_irq_get(void * intf_ptr, int * composition)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b084      	sub	sp, #16
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
 800ff5c:	6039      	str	r1, [r7, #0]
	uint8_t status_reg = 0;
 800ff5e:	2300      	movs	r3, #0
 800ff60:	73fb      	strb	r3, [r7, #15]
	nrf24_get_status(intf_ptr, &status_reg);
 800ff62:	f107 030f 	add.w	r3, r7, #15
 800ff66:	4619      	mov	r1, r3
 800ff68:	6878      	ldr	r0, [r7, #4]
 800ff6a:	f7ff fca1 	bl	800f8b0 <nrf24_get_status>
	*composition = (status_reg >> NRF24_STATUS_FLAG_OFFSET) & NRF24_STATUS_FLAG_MASK;
 800ff6e:	7bfb      	ldrb	r3, [r7, #15]
 800ff70:	091b      	lsrs	r3, r3, #4
 800ff72:	b2db      	uxtb	r3, r3
 800ff74:	f003 0207 	and.w	r2, r3, #7
 800ff78:	683b      	ldr	r3, [r7, #0]
 800ff7a:	601a      	str	r2, [r3, #0]
	return 0;
 800ff7c:	2300      	movs	r3, #0
}
 800ff7e:	4618      	mov	r0, r3
 800ff80:	3710      	adds	r7, #16
 800ff82:	46bd      	mov	sp, r7
 800ff84:	bd80      	pop	{r7, pc}

0800ff86 <nrf24_irq_clear>:


int nrf24_irq_clear(void * intf_ptr, int composition)
{
 800ff86:	b580      	push	{r7, lr}
 800ff88:	b084      	sub	sp, #16
 800ff8a:	af00      	add	r7, sp, #0
 800ff8c:	6078      	str	r0, [r7, #4]
 800ff8e:	6039      	str	r1, [r7, #0]
	uint8_t status_reg = (composition & NRF24_STATUS_FLAG_MASK) << NRF24_STATUS_FLAG_OFFSET;
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	011b      	lsls	r3, r3, #4
 800ff94:	b2db      	uxtb	r3, r3
 800ff96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ff9a:	b2db      	uxtb	r3, r3
 800ff9c:	73fb      	strb	r3, [r7, #15]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_STATUS, &status_reg, 1);
 800ff9e:	f107 020f 	add.w	r2, r7, #15
 800ffa2:	2301      	movs	r3, #1
 800ffa4:	2107      	movs	r1, #7
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	f7ff fb6e 	bl	800f688 <nrf24_write_register>
	return 0;
 800ffac:	2300      	movs	r3, #0
}
 800ffae:	4618      	mov	r0, r3
 800ffb0:	3710      	adds	r7, #16
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	bd80      	pop	{r7, pc}
	...

0800ffb8 <__assert_func>:
 800ffb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ffba:	4614      	mov	r4, r2
 800ffbc:	461a      	mov	r2, r3
 800ffbe:	4b09      	ldr	r3, [pc, #36]	; (800ffe4 <__assert_func+0x2c>)
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	4605      	mov	r5, r0
 800ffc4:	68d8      	ldr	r0, [r3, #12]
 800ffc6:	b14c      	cbz	r4, 800ffdc <__assert_func+0x24>
 800ffc8:	4b07      	ldr	r3, [pc, #28]	; (800ffe8 <__assert_func+0x30>)
 800ffca:	9100      	str	r1, [sp, #0]
 800ffcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ffd0:	4906      	ldr	r1, [pc, #24]	; (800ffec <__assert_func+0x34>)
 800ffd2:	462b      	mov	r3, r5
 800ffd4:	f000 f814 	bl	8010000 <fiprintf>
 800ffd8:	f001 ffe4 	bl	8011fa4 <abort>
 800ffdc:	4b04      	ldr	r3, [pc, #16]	; (800fff0 <__assert_func+0x38>)
 800ffde:	461c      	mov	r4, r3
 800ffe0:	e7f3      	b.n	800ffca <__assert_func+0x12>
 800ffe2:	bf00      	nop
 800ffe4:	20000058 	.word	0x20000058
 800ffe8:	08016528 	.word	0x08016528
 800ffec:	08016535 	.word	0x08016535
 800fff0:	08016563 	.word	0x08016563

0800fff4 <__errno>:
 800fff4:	4b01      	ldr	r3, [pc, #4]	; (800fffc <__errno+0x8>)
 800fff6:	6818      	ldr	r0, [r3, #0]
 800fff8:	4770      	bx	lr
 800fffa:	bf00      	nop
 800fffc:	20000058 	.word	0x20000058

08010000 <fiprintf>:
 8010000:	b40e      	push	{r1, r2, r3}
 8010002:	b503      	push	{r0, r1, lr}
 8010004:	4601      	mov	r1, r0
 8010006:	ab03      	add	r3, sp, #12
 8010008:	4805      	ldr	r0, [pc, #20]	; (8010020 <fiprintf+0x20>)
 801000a:	f853 2b04 	ldr.w	r2, [r3], #4
 801000e:	6800      	ldr	r0, [r0, #0]
 8010010:	9301      	str	r3, [sp, #4]
 8010012:	f000 f86b 	bl	80100ec <_vfiprintf_r>
 8010016:	b002      	add	sp, #8
 8010018:	f85d eb04 	ldr.w	lr, [sp], #4
 801001c:	b003      	add	sp, #12
 801001e:	4770      	bx	lr
 8010020:	20000058 	.word	0x20000058

08010024 <__libc_init_array>:
 8010024:	b570      	push	{r4, r5, r6, lr}
 8010026:	4d0d      	ldr	r5, [pc, #52]	; (801005c <__libc_init_array+0x38>)
 8010028:	4c0d      	ldr	r4, [pc, #52]	; (8010060 <__libc_init_array+0x3c>)
 801002a:	1b64      	subs	r4, r4, r5
 801002c:	10a4      	asrs	r4, r4, #2
 801002e:	2600      	movs	r6, #0
 8010030:	42a6      	cmp	r6, r4
 8010032:	d109      	bne.n	8010048 <__libc_init_array+0x24>
 8010034:	4d0b      	ldr	r5, [pc, #44]	; (8010064 <__libc_init_array+0x40>)
 8010036:	4c0c      	ldr	r4, [pc, #48]	; (8010068 <__libc_init_array+0x44>)
 8010038:	f005 ffd8 	bl	8015fec <_init>
 801003c:	1b64      	subs	r4, r4, r5
 801003e:	10a4      	asrs	r4, r4, #2
 8010040:	2600      	movs	r6, #0
 8010042:	42a6      	cmp	r6, r4
 8010044:	d105      	bne.n	8010052 <__libc_init_array+0x2e>
 8010046:	bd70      	pop	{r4, r5, r6, pc}
 8010048:	f855 3b04 	ldr.w	r3, [r5], #4
 801004c:	4798      	blx	r3
 801004e:	3601      	adds	r6, #1
 8010050:	e7ee      	b.n	8010030 <__libc_init_array+0xc>
 8010052:	f855 3b04 	ldr.w	r3, [r5], #4
 8010056:	4798      	blx	r3
 8010058:	3601      	adds	r6, #1
 801005a:	e7f2      	b.n	8010042 <__libc_init_array+0x1e>
 801005c:	08016a58 	.word	0x08016a58
 8010060:	08016a58 	.word	0x08016a58
 8010064:	08016a58 	.word	0x08016a58
 8010068:	08016a5c 	.word	0x08016a5c

0801006c <memcpy>:
 801006c:	440a      	add	r2, r1
 801006e:	4291      	cmp	r1, r2
 8010070:	f100 33ff 	add.w	r3, r0, #4294967295
 8010074:	d100      	bne.n	8010078 <memcpy+0xc>
 8010076:	4770      	bx	lr
 8010078:	b510      	push	{r4, lr}
 801007a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801007e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010082:	4291      	cmp	r1, r2
 8010084:	d1f9      	bne.n	801007a <memcpy+0xe>
 8010086:	bd10      	pop	{r4, pc}

08010088 <memset>:
 8010088:	4402      	add	r2, r0
 801008a:	4603      	mov	r3, r0
 801008c:	4293      	cmp	r3, r2
 801008e:	d100      	bne.n	8010092 <memset+0xa>
 8010090:	4770      	bx	lr
 8010092:	f803 1b01 	strb.w	r1, [r3], #1
 8010096:	e7f9      	b.n	801008c <memset+0x4>

08010098 <__sfputc_r>:
 8010098:	6893      	ldr	r3, [r2, #8]
 801009a:	3b01      	subs	r3, #1
 801009c:	2b00      	cmp	r3, #0
 801009e:	b410      	push	{r4}
 80100a0:	6093      	str	r3, [r2, #8]
 80100a2:	da08      	bge.n	80100b6 <__sfputc_r+0x1e>
 80100a4:	6994      	ldr	r4, [r2, #24]
 80100a6:	42a3      	cmp	r3, r4
 80100a8:	db01      	blt.n	80100ae <__sfputc_r+0x16>
 80100aa:	290a      	cmp	r1, #10
 80100ac:	d103      	bne.n	80100b6 <__sfputc_r+0x1e>
 80100ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100b2:	f001 beb7 	b.w	8011e24 <__swbuf_r>
 80100b6:	6813      	ldr	r3, [r2, #0]
 80100b8:	1c58      	adds	r0, r3, #1
 80100ba:	6010      	str	r0, [r2, #0]
 80100bc:	7019      	strb	r1, [r3, #0]
 80100be:	4608      	mov	r0, r1
 80100c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100c4:	4770      	bx	lr

080100c6 <__sfputs_r>:
 80100c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100c8:	4606      	mov	r6, r0
 80100ca:	460f      	mov	r7, r1
 80100cc:	4614      	mov	r4, r2
 80100ce:	18d5      	adds	r5, r2, r3
 80100d0:	42ac      	cmp	r4, r5
 80100d2:	d101      	bne.n	80100d8 <__sfputs_r+0x12>
 80100d4:	2000      	movs	r0, #0
 80100d6:	e007      	b.n	80100e8 <__sfputs_r+0x22>
 80100d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100dc:	463a      	mov	r2, r7
 80100de:	4630      	mov	r0, r6
 80100e0:	f7ff ffda 	bl	8010098 <__sfputc_r>
 80100e4:	1c43      	adds	r3, r0, #1
 80100e6:	d1f3      	bne.n	80100d0 <__sfputs_r+0xa>
 80100e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080100ec <_vfiprintf_r>:
 80100ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100f0:	460d      	mov	r5, r1
 80100f2:	b09d      	sub	sp, #116	; 0x74
 80100f4:	4614      	mov	r4, r2
 80100f6:	4698      	mov	r8, r3
 80100f8:	4606      	mov	r6, r0
 80100fa:	b118      	cbz	r0, 8010104 <_vfiprintf_r+0x18>
 80100fc:	6983      	ldr	r3, [r0, #24]
 80100fe:	b90b      	cbnz	r3, 8010104 <_vfiprintf_r+0x18>
 8010100:	f002 fee8 	bl	8012ed4 <__sinit>
 8010104:	4b89      	ldr	r3, [pc, #548]	; (801032c <_vfiprintf_r+0x240>)
 8010106:	429d      	cmp	r5, r3
 8010108:	d11b      	bne.n	8010142 <_vfiprintf_r+0x56>
 801010a:	6875      	ldr	r5, [r6, #4]
 801010c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801010e:	07d9      	lsls	r1, r3, #31
 8010110:	d405      	bmi.n	801011e <_vfiprintf_r+0x32>
 8010112:	89ab      	ldrh	r3, [r5, #12]
 8010114:	059a      	lsls	r2, r3, #22
 8010116:	d402      	bmi.n	801011e <_vfiprintf_r+0x32>
 8010118:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801011a:	f003 faec 	bl	80136f6 <__retarget_lock_acquire_recursive>
 801011e:	89ab      	ldrh	r3, [r5, #12]
 8010120:	071b      	lsls	r3, r3, #28
 8010122:	d501      	bpl.n	8010128 <_vfiprintf_r+0x3c>
 8010124:	692b      	ldr	r3, [r5, #16]
 8010126:	b9eb      	cbnz	r3, 8010164 <_vfiprintf_r+0x78>
 8010128:	4629      	mov	r1, r5
 801012a:	4630      	mov	r0, r6
 801012c:	f001 fecc 	bl	8011ec8 <__swsetup_r>
 8010130:	b1c0      	cbz	r0, 8010164 <_vfiprintf_r+0x78>
 8010132:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010134:	07dc      	lsls	r4, r3, #31
 8010136:	d50e      	bpl.n	8010156 <_vfiprintf_r+0x6a>
 8010138:	f04f 30ff 	mov.w	r0, #4294967295
 801013c:	b01d      	add	sp, #116	; 0x74
 801013e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010142:	4b7b      	ldr	r3, [pc, #492]	; (8010330 <_vfiprintf_r+0x244>)
 8010144:	429d      	cmp	r5, r3
 8010146:	d101      	bne.n	801014c <_vfiprintf_r+0x60>
 8010148:	68b5      	ldr	r5, [r6, #8]
 801014a:	e7df      	b.n	801010c <_vfiprintf_r+0x20>
 801014c:	4b79      	ldr	r3, [pc, #484]	; (8010334 <_vfiprintf_r+0x248>)
 801014e:	429d      	cmp	r5, r3
 8010150:	bf08      	it	eq
 8010152:	68f5      	ldreq	r5, [r6, #12]
 8010154:	e7da      	b.n	801010c <_vfiprintf_r+0x20>
 8010156:	89ab      	ldrh	r3, [r5, #12]
 8010158:	0598      	lsls	r0, r3, #22
 801015a:	d4ed      	bmi.n	8010138 <_vfiprintf_r+0x4c>
 801015c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801015e:	f003 facb 	bl	80136f8 <__retarget_lock_release_recursive>
 8010162:	e7e9      	b.n	8010138 <_vfiprintf_r+0x4c>
 8010164:	2300      	movs	r3, #0
 8010166:	9309      	str	r3, [sp, #36]	; 0x24
 8010168:	2320      	movs	r3, #32
 801016a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801016e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010172:	2330      	movs	r3, #48	; 0x30
 8010174:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010338 <_vfiprintf_r+0x24c>
 8010178:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801017c:	f04f 0901 	mov.w	r9, #1
 8010180:	4623      	mov	r3, r4
 8010182:	469a      	mov	sl, r3
 8010184:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010188:	b10a      	cbz	r2, 801018e <_vfiprintf_r+0xa2>
 801018a:	2a25      	cmp	r2, #37	; 0x25
 801018c:	d1f9      	bne.n	8010182 <_vfiprintf_r+0x96>
 801018e:	ebba 0b04 	subs.w	fp, sl, r4
 8010192:	d00b      	beq.n	80101ac <_vfiprintf_r+0xc0>
 8010194:	465b      	mov	r3, fp
 8010196:	4622      	mov	r2, r4
 8010198:	4629      	mov	r1, r5
 801019a:	4630      	mov	r0, r6
 801019c:	f7ff ff93 	bl	80100c6 <__sfputs_r>
 80101a0:	3001      	adds	r0, #1
 80101a2:	f000 80aa 	beq.w	80102fa <_vfiprintf_r+0x20e>
 80101a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80101a8:	445a      	add	r2, fp
 80101aa:	9209      	str	r2, [sp, #36]	; 0x24
 80101ac:	f89a 3000 	ldrb.w	r3, [sl]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	f000 80a2 	beq.w	80102fa <_vfiprintf_r+0x20e>
 80101b6:	2300      	movs	r3, #0
 80101b8:	f04f 32ff 	mov.w	r2, #4294967295
 80101bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80101c0:	f10a 0a01 	add.w	sl, sl, #1
 80101c4:	9304      	str	r3, [sp, #16]
 80101c6:	9307      	str	r3, [sp, #28]
 80101c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80101cc:	931a      	str	r3, [sp, #104]	; 0x68
 80101ce:	4654      	mov	r4, sl
 80101d0:	2205      	movs	r2, #5
 80101d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101d6:	4858      	ldr	r0, [pc, #352]	; (8010338 <_vfiprintf_r+0x24c>)
 80101d8:	f7f0 f80a 	bl	80001f0 <memchr>
 80101dc:	9a04      	ldr	r2, [sp, #16]
 80101de:	b9d8      	cbnz	r0, 8010218 <_vfiprintf_r+0x12c>
 80101e0:	06d1      	lsls	r1, r2, #27
 80101e2:	bf44      	itt	mi
 80101e4:	2320      	movmi	r3, #32
 80101e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101ea:	0713      	lsls	r3, r2, #28
 80101ec:	bf44      	itt	mi
 80101ee:	232b      	movmi	r3, #43	; 0x2b
 80101f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101f4:	f89a 3000 	ldrb.w	r3, [sl]
 80101f8:	2b2a      	cmp	r3, #42	; 0x2a
 80101fa:	d015      	beq.n	8010228 <_vfiprintf_r+0x13c>
 80101fc:	9a07      	ldr	r2, [sp, #28]
 80101fe:	4654      	mov	r4, sl
 8010200:	2000      	movs	r0, #0
 8010202:	f04f 0c0a 	mov.w	ip, #10
 8010206:	4621      	mov	r1, r4
 8010208:	f811 3b01 	ldrb.w	r3, [r1], #1
 801020c:	3b30      	subs	r3, #48	; 0x30
 801020e:	2b09      	cmp	r3, #9
 8010210:	d94e      	bls.n	80102b0 <_vfiprintf_r+0x1c4>
 8010212:	b1b0      	cbz	r0, 8010242 <_vfiprintf_r+0x156>
 8010214:	9207      	str	r2, [sp, #28]
 8010216:	e014      	b.n	8010242 <_vfiprintf_r+0x156>
 8010218:	eba0 0308 	sub.w	r3, r0, r8
 801021c:	fa09 f303 	lsl.w	r3, r9, r3
 8010220:	4313      	orrs	r3, r2
 8010222:	9304      	str	r3, [sp, #16]
 8010224:	46a2      	mov	sl, r4
 8010226:	e7d2      	b.n	80101ce <_vfiprintf_r+0xe2>
 8010228:	9b03      	ldr	r3, [sp, #12]
 801022a:	1d19      	adds	r1, r3, #4
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	9103      	str	r1, [sp, #12]
 8010230:	2b00      	cmp	r3, #0
 8010232:	bfbb      	ittet	lt
 8010234:	425b      	neglt	r3, r3
 8010236:	f042 0202 	orrlt.w	r2, r2, #2
 801023a:	9307      	strge	r3, [sp, #28]
 801023c:	9307      	strlt	r3, [sp, #28]
 801023e:	bfb8      	it	lt
 8010240:	9204      	strlt	r2, [sp, #16]
 8010242:	7823      	ldrb	r3, [r4, #0]
 8010244:	2b2e      	cmp	r3, #46	; 0x2e
 8010246:	d10c      	bne.n	8010262 <_vfiprintf_r+0x176>
 8010248:	7863      	ldrb	r3, [r4, #1]
 801024a:	2b2a      	cmp	r3, #42	; 0x2a
 801024c:	d135      	bne.n	80102ba <_vfiprintf_r+0x1ce>
 801024e:	9b03      	ldr	r3, [sp, #12]
 8010250:	1d1a      	adds	r2, r3, #4
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	9203      	str	r2, [sp, #12]
 8010256:	2b00      	cmp	r3, #0
 8010258:	bfb8      	it	lt
 801025a:	f04f 33ff 	movlt.w	r3, #4294967295
 801025e:	3402      	adds	r4, #2
 8010260:	9305      	str	r3, [sp, #20]
 8010262:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010348 <_vfiprintf_r+0x25c>
 8010266:	7821      	ldrb	r1, [r4, #0]
 8010268:	2203      	movs	r2, #3
 801026a:	4650      	mov	r0, sl
 801026c:	f7ef ffc0 	bl	80001f0 <memchr>
 8010270:	b140      	cbz	r0, 8010284 <_vfiprintf_r+0x198>
 8010272:	2340      	movs	r3, #64	; 0x40
 8010274:	eba0 000a 	sub.w	r0, r0, sl
 8010278:	fa03 f000 	lsl.w	r0, r3, r0
 801027c:	9b04      	ldr	r3, [sp, #16]
 801027e:	4303      	orrs	r3, r0
 8010280:	3401      	adds	r4, #1
 8010282:	9304      	str	r3, [sp, #16]
 8010284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010288:	482c      	ldr	r0, [pc, #176]	; (801033c <_vfiprintf_r+0x250>)
 801028a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801028e:	2206      	movs	r2, #6
 8010290:	f7ef ffae 	bl	80001f0 <memchr>
 8010294:	2800      	cmp	r0, #0
 8010296:	d03f      	beq.n	8010318 <_vfiprintf_r+0x22c>
 8010298:	4b29      	ldr	r3, [pc, #164]	; (8010340 <_vfiprintf_r+0x254>)
 801029a:	bb1b      	cbnz	r3, 80102e4 <_vfiprintf_r+0x1f8>
 801029c:	9b03      	ldr	r3, [sp, #12]
 801029e:	3307      	adds	r3, #7
 80102a0:	f023 0307 	bic.w	r3, r3, #7
 80102a4:	3308      	adds	r3, #8
 80102a6:	9303      	str	r3, [sp, #12]
 80102a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102aa:	443b      	add	r3, r7
 80102ac:	9309      	str	r3, [sp, #36]	; 0x24
 80102ae:	e767      	b.n	8010180 <_vfiprintf_r+0x94>
 80102b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80102b4:	460c      	mov	r4, r1
 80102b6:	2001      	movs	r0, #1
 80102b8:	e7a5      	b.n	8010206 <_vfiprintf_r+0x11a>
 80102ba:	2300      	movs	r3, #0
 80102bc:	3401      	adds	r4, #1
 80102be:	9305      	str	r3, [sp, #20]
 80102c0:	4619      	mov	r1, r3
 80102c2:	f04f 0c0a 	mov.w	ip, #10
 80102c6:	4620      	mov	r0, r4
 80102c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80102cc:	3a30      	subs	r2, #48	; 0x30
 80102ce:	2a09      	cmp	r2, #9
 80102d0:	d903      	bls.n	80102da <_vfiprintf_r+0x1ee>
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d0c5      	beq.n	8010262 <_vfiprintf_r+0x176>
 80102d6:	9105      	str	r1, [sp, #20]
 80102d8:	e7c3      	b.n	8010262 <_vfiprintf_r+0x176>
 80102da:	fb0c 2101 	mla	r1, ip, r1, r2
 80102de:	4604      	mov	r4, r0
 80102e0:	2301      	movs	r3, #1
 80102e2:	e7f0      	b.n	80102c6 <_vfiprintf_r+0x1da>
 80102e4:	ab03      	add	r3, sp, #12
 80102e6:	9300      	str	r3, [sp, #0]
 80102e8:	462a      	mov	r2, r5
 80102ea:	4b16      	ldr	r3, [pc, #88]	; (8010344 <_vfiprintf_r+0x258>)
 80102ec:	a904      	add	r1, sp, #16
 80102ee:	4630      	mov	r0, r6
 80102f0:	f000 f8cc 	bl	801048c <_printf_float>
 80102f4:	4607      	mov	r7, r0
 80102f6:	1c78      	adds	r0, r7, #1
 80102f8:	d1d6      	bne.n	80102a8 <_vfiprintf_r+0x1bc>
 80102fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80102fc:	07d9      	lsls	r1, r3, #31
 80102fe:	d405      	bmi.n	801030c <_vfiprintf_r+0x220>
 8010300:	89ab      	ldrh	r3, [r5, #12]
 8010302:	059a      	lsls	r2, r3, #22
 8010304:	d402      	bmi.n	801030c <_vfiprintf_r+0x220>
 8010306:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010308:	f003 f9f6 	bl	80136f8 <__retarget_lock_release_recursive>
 801030c:	89ab      	ldrh	r3, [r5, #12]
 801030e:	065b      	lsls	r3, r3, #25
 8010310:	f53f af12 	bmi.w	8010138 <_vfiprintf_r+0x4c>
 8010314:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010316:	e711      	b.n	801013c <_vfiprintf_r+0x50>
 8010318:	ab03      	add	r3, sp, #12
 801031a:	9300      	str	r3, [sp, #0]
 801031c:	462a      	mov	r2, r5
 801031e:	4b09      	ldr	r3, [pc, #36]	; (8010344 <_vfiprintf_r+0x258>)
 8010320:	a904      	add	r1, sp, #16
 8010322:	4630      	mov	r0, r6
 8010324:	f000 fb56 	bl	80109d4 <_printf_i>
 8010328:	e7e4      	b.n	80102f4 <_vfiprintf_r+0x208>
 801032a:	bf00      	nop
 801032c:	080167bc 	.word	0x080167bc
 8010330:	080167dc 	.word	0x080167dc
 8010334:	0801679c 	.word	0x0801679c
 8010338:	0801666c 	.word	0x0801666c
 801033c:	08016676 	.word	0x08016676
 8010340:	0801048d 	.word	0x0801048d
 8010344:	080100c7 	.word	0x080100c7
 8010348:	08016672 	.word	0x08016672

0801034c <__cvt>:
 801034c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010350:	ec55 4b10 	vmov	r4, r5, d0
 8010354:	2d00      	cmp	r5, #0
 8010356:	460e      	mov	r6, r1
 8010358:	4619      	mov	r1, r3
 801035a:	462b      	mov	r3, r5
 801035c:	bfbb      	ittet	lt
 801035e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010362:	461d      	movlt	r5, r3
 8010364:	2300      	movge	r3, #0
 8010366:	232d      	movlt	r3, #45	; 0x2d
 8010368:	700b      	strb	r3, [r1, #0]
 801036a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801036c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010370:	4691      	mov	r9, r2
 8010372:	f023 0820 	bic.w	r8, r3, #32
 8010376:	bfbc      	itt	lt
 8010378:	4622      	movlt	r2, r4
 801037a:	4614      	movlt	r4, r2
 801037c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010380:	d005      	beq.n	801038e <__cvt+0x42>
 8010382:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010386:	d100      	bne.n	801038a <__cvt+0x3e>
 8010388:	3601      	adds	r6, #1
 801038a:	2102      	movs	r1, #2
 801038c:	e000      	b.n	8010390 <__cvt+0x44>
 801038e:	2103      	movs	r1, #3
 8010390:	ab03      	add	r3, sp, #12
 8010392:	9301      	str	r3, [sp, #4]
 8010394:	ab02      	add	r3, sp, #8
 8010396:	9300      	str	r3, [sp, #0]
 8010398:	ec45 4b10 	vmov	d0, r4, r5
 801039c:	4653      	mov	r3, sl
 801039e:	4632      	mov	r2, r6
 80103a0:	f001 fe92 	bl	80120c8 <_dtoa_r>
 80103a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80103a8:	4607      	mov	r7, r0
 80103aa:	d102      	bne.n	80103b2 <__cvt+0x66>
 80103ac:	f019 0f01 	tst.w	r9, #1
 80103b0:	d022      	beq.n	80103f8 <__cvt+0xac>
 80103b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80103b6:	eb07 0906 	add.w	r9, r7, r6
 80103ba:	d110      	bne.n	80103de <__cvt+0x92>
 80103bc:	783b      	ldrb	r3, [r7, #0]
 80103be:	2b30      	cmp	r3, #48	; 0x30
 80103c0:	d10a      	bne.n	80103d8 <__cvt+0x8c>
 80103c2:	2200      	movs	r2, #0
 80103c4:	2300      	movs	r3, #0
 80103c6:	4620      	mov	r0, r4
 80103c8:	4629      	mov	r1, r5
 80103ca:	f7f0 fb85 	bl	8000ad8 <__aeabi_dcmpeq>
 80103ce:	b918      	cbnz	r0, 80103d8 <__cvt+0x8c>
 80103d0:	f1c6 0601 	rsb	r6, r6, #1
 80103d4:	f8ca 6000 	str.w	r6, [sl]
 80103d8:	f8da 3000 	ldr.w	r3, [sl]
 80103dc:	4499      	add	r9, r3
 80103de:	2200      	movs	r2, #0
 80103e0:	2300      	movs	r3, #0
 80103e2:	4620      	mov	r0, r4
 80103e4:	4629      	mov	r1, r5
 80103e6:	f7f0 fb77 	bl	8000ad8 <__aeabi_dcmpeq>
 80103ea:	b108      	cbz	r0, 80103f0 <__cvt+0xa4>
 80103ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80103f0:	2230      	movs	r2, #48	; 0x30
 80103f2:	9b03      	ldr	r3, [sp, #12]
 80103f4:	454b      	cmp	r3, r9
 80103f6:	d307      	bcc.n	8010408 <__cvt+0xbc>
 80103f8:	9b03      	ldr	r3, [sp, #12]
 80103fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80103fc:	1bdb      	subs	r3, r3, r7
 80103fe:	4638      	mov	r0, r7
 8010400:	6013      	str	r3, [r2, #0]
 8010402:	b004      	add	sp, #16
 8010404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010408:	1c59      	adds	r1, r3, #1
 801040a:	9103      	str	r1, [sp, #12]
 801040c:	701a      	strb	r2, [r3, #0]
 801040e:	e7f0      	b.n	80103f2 <__cvt+0xa6>

08010410 <__exponent>:
 8010410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010412:	4603      	mov	r3, r0
 8010414:	2900      	cmp	r1, #0
 8010416:	bfb8      	it	lt
 8010418:	4249      	neglt	r1, r1
 801041a:	f803 2b02 	strb.w	r2, [r3], #2
 801041e:	bfb4      	ite	lt
 8010420:	222d      	movlt	r2, #45	; 0x2d
 8010422:	222b      	movge	r2, #43	; 0x2b
 8010424:	2909      	cmp	r1, #9
 8010426:	7042      	strb	r2, [r0, #1]
 8010428:	dd2a      	ble.n	8010480 <__exponent+0x70>
 801042a:	f10d 0407 	add.w	r4, sp, #7
 801042e:	46a4      	mov	ip, r4
 8010430:	270a      	movs	r7, #10
 8010432:	46a6      	mov	lr, r4
 8010434:	460a      	mov	r2, r1
 8010436:	fb91 f6f7 	sdiv	r6, r1, r7
 801043a:	fb07 1516 	mls	r5, r7, r6, r1
 801043e:	3530      	adds	r5, #48	; 0x30
 8010440:	2a63      	cmp	r2, #99	; 0x63
 8010442:	f104 34ff 	add.w	r4, r4, #4294967295
 8010446:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801044a:	4631      	mov	r1, r6
 801044c:	dcf1      	bgt.n	8010432 <__exponent+0x22>
 801044e:	3130      	adds	r1, #48	; 0x30
 8010450:	f1ae 0502 	sub.w	r5, lr, #2
 8010454:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010458:	1c44      	adds	r4, r0, #1
 801045a:	4629      	mov	r1, r5
 801045c:	4561      	cmp	r1, ip
 801045e:	d30a      	bcc.n	8010476 <__exponent+0x66>
 8010460:	f10d 0209 	add.w	r2, sp, #9
 8010464:	eba2 020e 	sub.w	r2, r2, lr
 8010468:	4565      	cmp	r5, ip
 801046a:	bf88      	it	hi
 801046c:	2200      	movhi	r2, #0
 801046e:	4413      	add	r3, r2
 8010470:	1a18      	subs	r0, r3, r0
 8010472:	b003      	add	sp, #12
 8010474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010476:	f811 2b01 	ldrb.w	r2, [r1], #1
 801047a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801047e:	e7ed      	b.n	801045c <__exponent+0x4c>
 8010480:	2330      	movs	r3, #48	; 0x30
 8010482:	3130      	adds	r1, #48	; 0x30
 8010484:	7083      	strb	r3, [r0, #2]
 8010486:	70c1      	strb	r1, [r0, #3]
 8010488:	1d03      	adds	r3, r0, #4
 801048a:	e7f1      	b.n	8010470 <__exponent+0x60>

0801048c <_printf_float>:
 801048c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010490:	ed2d 8b02 	vpush	{d8}
 8010494:	b08d      	sub	sp, #52	; 0x34
 8010496:	460c      	mov	r4, r1
 8010498:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801049c:	4616      	mov	r6, r2
 801049e:	461f      	mov	r7, r3
 80104a0:	4605      	mov	r5, r0
 80104a2:	f003 f923 	bl	80136ec <_localeconv_r>
 80104a6:	f8d0 a000 	ldr.w	sl, [r0]
 80104aa:	4650      	mov	r0, sl
 80104ac:	f7ef fe98 	bl	80001e0 <strlen>
 80104b0:	2300      	movs	r3, #0
 80104b2:	930a      	str	r3, [sp, #40]	; 0x28
 80104b4:	6823      	ldr	r3, [r4, #0]
 80104b6:	9305      	str	r3, [sp, #20]
 80104b8:	f8d8 3000 	ldr.w	r3, [r8]
 80104bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80104c0:	3307      	adds	r3, #7
 80104c2:	f023 0307 	bic.w	r3, r3, #7
 80104c6:	f103 0208 	add.w	r2, r3, #8
 80104ca:	f8c8 2000 	str.w	r2, [r8]
 80104ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80104d6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80104da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80104de:	9307      	str	r3, [sp, #28]
 80104e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80104e4:	ee08 0a10 	vmov	s16, r0
 80104e8:	4b9f      	ldr	r3, [pc, #636]	; (8010768 <_printf_float+0x2dc>)
 80104ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80104ee:	f04f 32ff 	mov.w	r2, #4294967295
 80104f2:	f7f0 fb23 	bl	8000b3c <__aeabi_dcmpun>
 80104f6:	bb88      	cbnz	r0, 801055c <_printf_float+0xd0>
 80104f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80104fc:	4b9a      	ldr	r3, [pc, #616]	; (8010768 <_printf_float+0x2dc>)
 80104fe:	f04f 32ff 	mov.w	r2, #4294967295
 8010502:	f7f0 fafd 	bl	8000b00 <__aeabi_dcmple>
 8010506:	bb48      	cbnz	r0, 801055c <_printf_float+0xd0>
 8010508:	2200      	movs	r2, #0
 801050a:	2300      	movs	r3, #0
 801050c:	4640      	mov	r0, r8
 801050e:	4649      	mov	r1, r9
 8010510:	f7f0 faec 	bl	8000aec <__aeabi_dcmplt>
 8010514:	b110      	cbz	r0, 801051c <_printf_float+0x90>
 8010516:	232d      	movs	r3, #45	; 0x2d
 8010518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801051c:	4b93      	ldr	r3, [pc, #588]	; (801076c <_printf_float+0x2e0>)
 801051e:	4894      	ldr	r0, [pc, #592]	; (8010770 <_printf_float+0x2e4>)
 8010520:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010524:	bf94      	ite	ls
 8010526:	4698      	movls	r8, r3
 8010528:	4680      	movhi	r8, r0
 801052a:	2303      	movs	r3, #3
 801052c:	6123      	str	r3, [r4, #16]
 801052e:	9b05      	ldr	r3, [sp, #20]
 8010530:	f023 0204 	bic.w	r2, r3, #4
 8010534:	6022      	str	r2, [r4, #0]
 8010536:	f04f 0900 	mov.w	r9, #0
 801053a:	9700      	str	r7, [sp, #0]
 801053c:	4633      	mov	r3, r6
 801053e:	aa0b      	add	r2, sp, #44	; 0x2c
 8010540:	4621      	mov	r1, r4
 8010542:	4628      	mov	r0, r5
 8010544:	f000 f9d8 	bl	80108f8 <_printf_common>
 8010548:	3001      	adds	r0, #1
 801054a:	f040 8090 	bne.w	801066e <_printf_float+0x1e2>
 801054e:	f04f 30ff 	mov.w	r0, #4294967295
 8010552:	b00d      	add	sp, #52	; 0x34
 8010554:	ecbd 8b02 	vpop	{d8}
 8010558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801055c:	4642      	mov	r2, r8
 801055e:	464b      	mov	r3, r9
 8010560:	4640      	mov	r0, r8
 8010562:	4649      	mov	r1, r9
 8010564:	f7f0 faea 	bl	8000b3c <__aeabi_dcmpun>
 8010568:	b140      	cbz	r0, 801057c <_printf_float+0xf0>
 801056a:	464b      	mov	r3, r9
 801056c:	2b00      	cmp	r3, #0
 801056e:	bfbc      	itt	lt
 8010570:	232d      	movlt	r3, #45	; 0x2d
 8010572:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010576:	487f      	ldr	r0, [pc, #508]	; (8010774 <_printf_float+0x2e8>)
 8010578:	4b7f      	ldr	r3, [pc, #508]	; (8010778 <_printf_float+0x2ec>)
 801057a:	e7d1      	b.n	8010520 <_printf_float+0x94>
 801057c:	6863      	ldr	r3, [r4, #4]
 801057e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010582:	9206      	str	r2, [sp, #24]
 8010584:	1c5a      	adds	r2, r3, #1
 8010586:	d13f      	bne.n	8010608 <_printf_float+0x17c>
 8010588:	2306      	movs	r3, #6
 801058a:	6063      	str	r3, [r4, #4]
 801058c:	9b05      	ldr	r3, [sp, #20]
 801058e:	6861      	ldr	r1, [r4, #4]
 8010590:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010594:	2300      	movs	r3, #0
 8010596:	9303      	str	r3, [sp, #12]
 8010598:	ab0a      	add	r3, sp, #40	; 0x28
 801059a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801059e:	ab09      	add	r3, sp, #36	; 0x24
 80105a0:	ec49 8b10 	vmov	d0, r8, r9
 80105a4:	9300      	str	r3, [sp, #0]
 80105a6:	6022      	str	r2, [r4, #0]
 80105a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80105ac:	4628      	mov	r0, r5
 80105ae:	f7ff fecd 	bl	801034c <__cvt>
 80105b2:	9b06      	ldr	r3, [sp, #24]
 80105b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80105b6:	2b47      	cmp	r3, #71	; 0x47
 80105b8:	4680      	mov	r8, r0
 80105ba:	d108      	bne.n	80105ce <_printf_float+0x142>
 80105bc:	1cc8      	adds	r0, r1, #3
 80105be:	db02      	blt.n	80105c6 <_printf_float+0x13a>
 80105c0:	6863      	ldr	r3, [r4, #4]
 80105c2:	4299      	cmp	r1, r3
 80105c4:	dd41      	ble.n	801064a <_printf_float+0x1be>
 80105c6:	f1ab 0b02 	sub.w	fp, fp, #2
 80105ca:	fa5f fb8b 	uxtb.w	fp, fp
 80105ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80105d2:	d820      	bhi.n	8010616 <_printf_float+0x18a>
 80105d4:	3901      	subs	r1, #1
 80105d6:	465a      	mov	r2, fp
 80105d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80105dc:	9109      	str	r1, [sp, #36]	; 0x24
 80105de:	f7ff ff17 	bl	8010410 <__exponent>
 80105e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80105e4:	1813      	adds	r3, r2, r0
 80105e6:	2a01      	cmp	r2, #1
 80105e8:	4681      	mov	r9, r0
 80105ea:	6123      	str	r3, [r4, #16]
 80105ec:	dc02      	bgt.n	80105f4 <_printf_float+0x168>
 80105ee:	6822      	ldr	r2, [r4, #0]
 80105f0:	07d2      	lsls	r2, r2, #31
 80105f2:	d501      	bpl.n	80105f8 <_printf_float+0x16c>
 80105f4:	3301      	adds	r3, #1
 80105f6:	6123      	str	r3, [r4, #16]
 80105f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d09c      	beq.n	801053a <_printf_float+0xae>
 8010600:	232d      	movs	r3, #45	; 0x2d
 8010602:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010606:	e798      	b.n	801053a <_printf_float+0xae>
 8010608:	9a06      	ldr	r2, [sp, #24]
 801060a:	2a47      	cmp	r2, #71	; 0x47
 801060c:	d1be      	bne.n	801058c <_printf_float+0x100>
 801060e:	2b00      	cmp	r3, #0
 8010610:	d1bc      	bne.n	801058c <_printf_float+0x100>
 8010612:	2301      	movs	r3, #1
 8010614:	e7b9      	b.n	801058a <_printf_float+0xfe>
 8010616:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801061a:	d118      	bne.n	801064e <_printf_float+0x1c2>
 801061c:	2900      	cmp	r1, #0
 801061e:	6863      	ldr	r3, [r4, #4]
 8010620:	dd0b      	ble.n	801063a <_printf_float+0x1ae>
 8010622:	6121      	str	r1, [r4, #16]
 8010624:	b913      	cbnz	r3, 801062c <_printf_float+0x1a0>
 8010626:	6822      	ldr	r2, [r4, #0]
 8010628:	07d0      	lsls	r0, r2, #31
 801062a:	d502      	bpl.n	8010632 <_printf_float+0x1a6>
 801062c:	3301      	adds	r3, #1
 801062e:	440b      	add	r3, r1
 8010630:	6123      	str	r3, [r4, #16]
 8010632:	65a1      	str	r1, [r4, #88]	; 0x58
 8010634:	f04f 0900 	mov.w	r9, #0
 8010638:	e7de      	b.n	80105f8 <_printf_float+0x16c>
 801063a:	b913      	cbnz	r3, 8010642 <_printf_float+0x1b6>
 801063c:	6822      	ldr	r2, [r4, #0]
 801063e:	07d2      	lsls	r2, r2, #31
 8010640:	d501      	bpl.n	8010646 <_printf_float+0x1ba>
 8010642:	3302      	adds	r3, #2
 8010644:	e7f4      	b.n	8010630 <_printf_float+0x1a4>
 8010646:	2301      	movs	r3, #1
 8010648:	e7f2      	b.n	8010630 <_printf_float+0x1a4>
 801064a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801064e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010650:	4299      	cmp	r1, r3
 8010652:	db05      	blt.n	8010660 <_printf_float+0x1d4>
 8010654:	6823      	ldr	r3, [r4, #0]
 8010656:	6121      	str	r1, [r4, #16]
 8010658:	07d8      	lsls	r0, r3, #31
 801065a:	d5ea      	bpl.n	8010632 <_printf_float+0x1a6>
 801065c:	1c4b      	adds	r3, r1, #1
 801065e:	e7e7      	b.n	8010630 <_printf_float+0x1a4>
 8010660:	2900      	cmp	r1, #0
 8010662:	bfd4      	ite	le
 8010664:	f1c1 0202 	rsble	r2, r1, #2
 8010668:	2201      	movgt	r2, #1
 801066a:	4413      	add	r3, r2
 801066c:	e7e0      	b.n	8010630 <_printf_float+0x1a4>
 801066e:	6823      	ldr	r3, [r4, #0]
 8010670:	055a      	lsls	r2, r3, #21
 8010672:	d407      	bmi.n	8010684 <_printf_float+0x1f8>
 8010674:	6923      	ldr	r3, [r4, #16]
 8010676:	4642      	mov	r2, r8
 8010678:	4631      	mov	r1, r6
 801067a:	4628      	mov	r0, r5
 801067c:	47b8      	blx	r7
 801067e:	3001      	adds	r0, #1
 8010680:	d12c      	bne.n	80106dc <_printf_float+0x250>
 8010682:	e764      	b.n	801054e <_printf_float+0xc2>
 8010684:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010688:	f240 80e0 	bls.w	801084c <_printf_float+0x3c0>
 801068c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010690:	2200      	movs	r2, #0
 8010692:	2300      	movs	r3, #0
 8010694:	f7f0 fa20 	bl	8000ad8 <__aeabi_dcmpeq>
 8010698:	2800      	cmp	r0, #0
 801069a:	d034      	beq.n	8010706 <_printf_float+0x27a>
 801069c:	4a37      	ldr	r2, [pc, #220]	; (801077c <_printf_float+0x2f0>)
 801069e:	2301      	movs	r3, #1
 80106a0:	4631      	mov	r1, r6
 80106a2:	4628      	mov	r0, r5
 80106a4:	47b8      	blx	r7
 80106a6:	3001      	adds	r0, #1
 80106a8:	f43f af51 	beq.w	801054e <_printf_float+0xc2>
 80106ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80106b0:	429a      	cmp	r2, r3
 80106b2:	db02      	blt.n	80106ba <_printf_float+0x22e>
 80106b4:	6823      	ldr	r3, [r4, #0]
 80106b6:	07d8      	lsls	r0, r3, #31
 80106b8:	d510      	bpl.n	80106dc <_printf_float+0x250>
 80106ba:	ee18 3a10 	vmov	r3, s16
 80106be:	4652      	mov	r2, sl
 80106c0:	4631      	mov	r1, r6
 80106c2:	4628      	mov	r0, r5
 80106c4:	47b8      	blx	r7
 80106c6:	3001      	adds	r0, #1
 80106c8:	f43f af41 	beq.w	801054e <_printf_float+0xc2>
 80106cc:	f04f 0800 	mov.w	r8, #0
 80106d0:	f104 091a 	add.w	r9, r4, #26
 80106d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106d6:	3b01      	subs	r3, #1
 80106d8:	4543      	cmp	r3, r8
 80106da:	dc09      	bgt.n	80106f0 <_printf_float+0x264>
 80106dc:	6823      	ldr	r3, [r4, #0]
 80106de:	079b      	lsls	r3, r3, #30
 80106e0:	f100 8105 	bmi.w	80108ee <_printf_float+0x462>
 80106e4:	68e0      	ldr	r0, [r4, #12]
 80106e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80106e8:	4298      	cmp	r0, r3
 80106ea:	bfb8      	it	lt
 80106ec:	4618      	movlt	r0, r3
 80106ee:	e730      	b.n	8010552 <_printf_float+0xc6>
 80106f0:	2301      	movs	r3, #1
 80106f2:	464a      	mov	r2, r9
 80106f4:	4631      	mov	r1, r6
 80106f6:	4628      	mov	r0, r5
 80106f8:	47b8      	blx	r7
 80106fa:	3001      	adds	r0, #1
 80106fc:	f43f af27 	beq.w	801054e <_printf_float+0xc2>
 8010700:	f108 0801 	add.w	r8, r8, #1
 8010704:	e7e6      	b.n	80106d4 <_printf_float+0x248>
 8010706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010708:	2b00      	cmp	r3, #0
 801070a:	dc39      	bgt.n	8010780 <_printf_float+0x2f4>
 801070c:	4a1b      	ldr	r2, [pc, #108]	; (801077c <_printf_float+0x2f0>)
 801070e:	2301      	movs	r3, #1
 8010710:	4631      	mov	r1, r6
 8010712:	4628      	mov	r0, r5
 8010714:	47b8      	blx	r7
 8010716:	3001      	adds	r0, #1
 8010718:	f43f af19 	beq.w	801054e <_printf_float+0xc2>
 801071c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010720:	4313      	orrs	r3, r2
 8010722:	d102      	bne.n	801072a <_printf_float+0x29e>
 8010724:	6823      	ldr	r3, [r4, #0]
 8010726:	07d9      	lsls	r1, r3, #31
 8010728:	d5d8      	bpl.n	80106dc <_printf_float+0x250>
 801072a:	ee18 3a10 	vmov	r3, s16
 801072e:	4652      	mov	r2, sl
 8010730:	4631      	mov	r1, r6
 8010732:	4628      	mov	r0, r5
 8010734:	47b8      	blx	r7
 8010736:	3001      	adds	r0, #1
 8010738:	f43f af09 	beq.w	801054e <_printf_float+0xc2>
 801073c:	f04f 0900 	mov.w	r9, #0
 8010740:	f104 0a1a 	add.w	sl, r4, #26
 8010744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010746:	425b      	negs	r3, r3
 8010748:	454b      	cmp	r3, r9
 801074a:	dc01      	bgt.n	8010750 <_printf_float+0x2c4>
 801074c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801074e:	e792      	b.n	8010676 <_printf_float+0x1ea>
 8010750:	2301      	movs	r3, #1
 8010752:	4652      	mov	r2, sl
 8010754:	4631      	mov	r1, r6
 8010756:	4628      	mov	r0, r5
 8010758:	47b8      	blx	r7
 801075a:	3001      	adds	r0, #1
 801075c:	f43f aef7 	beq.w	801054e <_printf_float+0xc2>
 8010760:	f109 0901 	add.w	r9, r9, #1
 8010764:	e7ee      	b.n	8010744 <_printf_float+0x2b8>
 8010766:	bf00      	nop
 8010768:	7fefffff 	.word	0x7fefffff
 801076c:	0801667d 	.word	0x0801667d
 8010770:	08016681 	.word	0x08016681
 8010774:	08016689 	.word	0x08016689
 8010778:	08016685 	.word	0x08016685
 801077c:	0801668d 	.word	0x0801668d
 8010780:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010782:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010784:	429a      	cmp	r2, r3
 8010786:	bfa8      	it	ge
 8010788:	461a      	movge	r2, r3
 801078a:	2a00      	cmp	r2, #0
 801078c:	4691      	mov	r9, r2
 801078e:	dc37      	bgt.n	8010800 <_printf_float+0x374>
 8010790:	f04f 0b00 	mov.w	fp, #0
 8010794:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010798:	f104 021a 	add.w	r2, r4, #26
 801079c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801079e:	9305      	str	r3, [sp, #20]
 80107a0:	eba3 0309 	sub.w	r3, r3, r9
 80107a4:	455b      	cmp	r3, fp
 80107a6:	dc33      	bgt.n	8010810 <_printf_float+0x384>
 80107a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80107ac:	429a      	cmp	r2, r3
 80107ae:	db3b      	blt.n	8010828 <_printf_float+0x39c>
 80107b0:	6823      	ldr	r3, [r4, #0]
 80107b2:	07da      	lsls	r2, r3, #31
 80107b4:	d438      	bmi.n	8010828 <_printf_float+0x39c>
 80107b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80107b8:	9b05      	ldr	r3, [sp, #20]
 80107ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80107bc:	1ad3      	subs	r3, r2, r3
 80107be:	eba2 0901 	sub.w	r9, r2, r1
 80107c2:	4599      	cmp	r9, r3
 80107c4:	bfa8      	it	ge
 80107c6:	4699      	movge	r9, r3
 80107c8:	f1b9 0f00 	cmp.w	r9, #0
 80107cc:	dc35      	bgt.n	801083a <_printf_float+0x3ae>
 80107ce:	f04f 0800 	mov.w	r8, #0
 80107d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80107d6:	f104 0a1a 	add.w	sl, r4, #26
 80107da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80107de:	1a9b      	subs	r3, r3, r2
 80107e0:	eba3 0309 	sub.w	r3, r3, r9
 80107e4:	4543      	cmp	r3, r8
 80107e6:	f77f af79 	ble.w	80106dc <_printf_float+0x250>
 80107ea:	2301      	movs	r3, #1
 80107ec:	4652      	mov	r2, sl
 80107ee:	4631      	mov	r1, r6
 80107f0:	4628      	mov	r0, r5
 80107f2:	47b8      	blx	r7
 80107f4:	3001      	adds	r0, #1
 80107f6:	f43f aeaa 	beq.w	801054e <_printf_float+0xc2>
 80107fa:	f108 0801 	add.w	r8, r8, #1
 80107fe:	e7ec      	b.n	80107da <_printf_float+0x34e>
 8010800:	4613      	mov	r3, r2
 8010802:	4631      	mov	r1, r6
 8010804:	4642      	mov	r2, r8
 8010806:	4628      	mov	r0, r5
 8010808:	47b8      	blx	r7
 801080a:	3001      	adds	r0, #1
 801080c:	d1c0      	bne.n	8010790 <_printf_float+0x304>
 801080e:	e69e      	b.n	801054e <_printf_float+0xc2>
 8010810:	2301      	movs	r3, #1
 8010812:	4631      	mov	r1, r6
 8010814:	4628      	mov	r0, r5
 8010816:	9205      	str	r2, [sp, #20]
 8010818:	47b8      	blx	r7
 801081a:	3001      	adds	r0, #1
 801081c:	f43f ae97 	beq.w	801054e <_printf_float+0xc2>
 8010820:	9a05      	ldr	r2, [sp, #20]
 8010822:	f10b 0b01 	add.w	fp, fp, #1
 8010826:	e7b9      	b.n	801079c <_printf_float+0x310>
 8010828:	ee18 3a10 	vmov	r3, s16
 801082c:	4652      	mov	r2, sl
 801082e:	4631      	mov	r1, r6
 8010830:	4628      	mov	r0, r5
 8010832:	47b8      	blx	r7
 8010834:	3001      	adds	r0, #1
 8010836:	d1be      	bne.n	80107b6 <_printf_float+0x32a>
 8010838:	e689      	b.n	801054e <_printf_float+0xc2>
 801083a:	9a05      	ldr	r2, [sp, #20]
 801083c:	464b      	mov	r3, r9
 801083e:	4442      	add	r2, r8
 8010840:	4631      	mov	r1, r6
 8010842:	4628      	mov	r0, r5
 8010844:	47b8      	blx	r7
 8010846:	3001      	adds	r0, #1
 8010848:	d1c1      	bne.n	80107ce <_printf_float+0x342>
 801084a:	e680      	b.n	801054e <_printf_float+0xc2>
 801084c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801084e:	2a01      	cmp	r2, #1
 8010850:	dc01      	bgt.n	8010856 <_printf_float+0x3ca>
 8010852:	07db      	lsls	r3, r3, #31
 8010854:	d538      	bpl.n	80108c8 <_printf_float+0x43c>
 8010856:	2301      	movs	r3, #1
 8010858:	4642      	mov	r2, r8
 801085a:	4631      	mov	r1, r6
 801085c:	4628      	mov	r0, r5
 801085e:	47b8      	blx	r7
 8010860:	3001      	adds	r0, #1
 8010862:	f43f ae74 	beq.w	801054e <_printf_float+0xc2>
 8010866:	ee18 3a10 	vmov	r3, s16
 801086a:	4652      	mov	r2, sl
 801086c:	4631      	mov	r1, r6
 801086e:	4628      	mov	r0, r5
 8010870:	47b8      	blx	r7
 8010872:	3001      	adds	r0, #1
 8010874:	f43f ae6b 	beq.w	801054e <_printf_float+0xc2>
 8010878:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801087c:	2200      	movs	r2, #0
 801087e:	2300      	movs	r3, #0
 8010880:	f7f0 f92a 	bl	8000ad8 <__aeabi_dcmpeq>
 8010884:	b9d8      	cbnz	r0, 80108be <_printf_float+0x432>
 8010886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010888:	f108 0201 	add.w	r2, r8, #1
 801088c:	3b01      	subs	r3, #1
 801088e:	4631      	mov	r1, r6
 8010890:	4628      	mov	r0, r5
 8010892:	47b8      	blx	r7
 8010894:	3001      	adds	r0, #1
 8010896:	d10e      	bne.n	80108b6 <_printf_float+0x42a>
 8010898:	e659      	b.n	801054e <_printf_float+0xc2>
 801089a:	2301      	movs	r3, #1
 801089c:	4652      	mov	r2, sl
 801089e:	4631      	mov	r1, r6
 80108a0:	4628      	mov	r0, r5
 80108a2:	47b8      	blx	r7
 80108a4:	3001      	adds	r0, #1
 80108a6:	f43f ae52 	beq.w	801054e <_printf_float+0xc2>
 80108aa:	f108 0801 	add.w	r8, r8, #1
 80108ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108b0:	3b01      	subs	r3, #1
 80108b2:	4543      	cmp	r3, r8
 80108b4:	dcf1      	bgt.n	801089a <_printf_float+0x40e>
 80108b6:	464b      	mov	r3, r9
 80108b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80108bc:	e6dc      	b.n	8010678 <_printf_float+0x1ec>
 80108be:	f04f 0800 	mov.w	r8, #0
 80108c2:	f104 0a1a 	add.w	sl, r4, #26
 80108c6:	e7f2      	b.n	80108ae <_printf_float+0x422>
 80108c8:	2301      	movs	r3, #1
 80108ca:	4642      	mov	r2, r8
 80108cc:	e7df      	b.n	801088e <_printf_float+0x402>
 80108ce:	2301      	movs	r3, #1
 80108d0:	464a      	mov	r2, r9
 80108d2:	4631      	mov	r1, r6
 80108d4:	4628      	mov	r0, r5
 80108d6:	47b8      	blx	r7
 80108d8:	3001      	adds	r0, #1
 80108da:	f43f ae38 	beq.w	801054e <_printf_float+0xc2>
 80108de:	f108 0801 	add.w	r8, r8, #1
 80108e2:	68e3      	ldr	r3, [r4, #12]
 80108e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80108e6:	1a5b      	subs	r3, r3, r1
 80108e8:	4543      	cmp	r3, r8
 80108ea:	dcf0      	bgt.n	80108ce <_printf_float+0x442>
 80108ec:	e6fa      	b.n	80106e4 <_printf_float+0x258>
 80108ee:	f04f 0800 	mov.w	r8, #0
 80108f2:	f104 0919 	add.w	r9, r4, #25
 80108f6:	e7f4      	b.n	80108e2 <_printf_float+0x456>

080108f8 <_printf_common>:
 80108f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108fc:	4616      	mov	r6, r2
 80108fe:	4699      	mov	r9, r3
 8010900:	688a      	ldr	r2, [r1, #8]
 8010902:	690b      	ldr	r3, [r1, #16]
 8010904:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010908:	4293      	cmp	r3, r2
 801090a:	bfb8      	it	lt
 801090c:	4613      	movlt	r3, r2
 801090e:	6033      	str	r3, [r6, #0]
 8010910:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010914:	4607      	mov	r7, r0
 8010916:	460c      	mov	r4, r1
 8010918:	b10a      	cbz	r2, 801091e <_printf_common+0x26>
 801091a:	3301      	adds	r3, #1
 801091c:	6033      	str	r3, [r6, #0]
 801091e:	6823      	ldr	r3, [r4, #0]
 8010920:	0699      	lsls	r1, r3, #26
 8010922:	bf42      	ittt	mi
 8010924:	6833      	ldrmi	r3, [r6, #0]
 8010926:	3302      	addmi	r3, #2
 8010928:	6033      	strmi	r3, [r6, #0]
 801092a:	6825      	ldr	r5, [r4, #0]
 801092c:	f015 0506 	ands.w	r5, r5, #6
 8010930:	d106      	bne.n	8010940 <_printf_common+0x48>
 8010932:	f104 0a19 	add.w	sl, r4, #25
 8010936:	68e3      	ldr	r3, [r4, #12]
 8010938:	6832      	ldr	r2, [r6, #0]
 801093a:	1a9b      	subs	r3, r3, r2
 801093c:	42ab      	cmp	r3, r5
 801093e:	dc26      	bgt.n	801098e <_printf_common+0x96>
 8010940:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010944:	1e13      	subs	r3, r2, #0
 8010946:	6822      	ldr	r2, [r4, #0]
 8010948:	bf18      	it	ne
 801094a:	2301      	movne	r3, #1
 801094c:	0692      	lsls	r2, r2, #26
 801094e:	d42b      	bmi.n	80109a8 <_printf_common+0xb0>
 8010950:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010954:	4649      	mov	r1, r9
 8010956:	4638      	mov	r0, r7
 8010958:	47c0      	blx	r8
 801095a:	3001      	adds	r0, #1
 801095c:	d01e      	beq.n	801099c <_printf_common+0xa4>
 801095e:	6823      	ldr	r3, [r4, #0]
 8010960:	68e5      	ldr	r5, [r4, #12]
 8010962:	6832      	ldr	r2, [r6, #0]
 8010964:	f003 0306 	and.w	r3, r3, #6
 8010968:	2b04      	cmp	r3, #4
 801096a:	bf08      	it	eq
 801096c:	1aad      	subeq	r5, r5, r2
 801096e:	68a3      	ldr	r3, [r4, #8]
 8010970:	6922      	ldr	r2, [r4, #16]
 8010972:	bf0c      	ite	eq
 8010974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010978:	2500      	movne	r5, #0
 801097a:	4293      	cmp	r3, r2
 801097c:	bfc4      	itt	gt
 801097e:	1a9b      	subgt	r3, r3, r2
 8010980:	18ed      	addgt	r5, r5, r3
 8010982:	2600      	movs	r6, #0
 8010984:	341a      	adds	r4, #26
 8010986:	42b5      	cmp	r5, r6
 8010988:	d11a      	bne.n	80109c0 <_printf_common+0xc8>
 801098a:	2000      	movs	r0, #0
 801098c:	e008      	b.n	80109a0 <_printf_common+0xa8>
 801098e:	2301      	movs	r3, #1
 8010990:	4652      	mov	r2, sl
 8010992:	4649      	mov	r1, r9
 8010994:	4638      	mov	r0, r7
 8010996:	47c0      	blx	r8
 8010998:	3001      	adds	r0, #1
 801099a:	d103      	bne.n	80109a4 <_printf_common+0xac>
 801099c:	f04f 30ff 	mov.w	r0, #4294967295
 80109a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109a4:	3501      	adds	r5, #1
 80109a6:	e7c6      	b.n	8010936 <_printf_common+0x3e>
 80109a8:	18e1      	adds	r1, r4, r3
 80109aa:	1c5a      	adds	r2, r3, #1
 80109ac:	2030      	movs	r0, #48	; 0x30
 80109ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80109b2:	4422      	add	r2, r4
 80109b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80109b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80109bc:	3302      	adds	r3, #2
 80109be:	e7c7      	b.n	8010950 <_printf_common+0x58>
 80109c0:	2301      	movs	r3, #1
 80109c2:	4622      	mov	r2, r4
 80109c4:	4649      	mov	r1, r9
 80109c6:	4638      	mov	r0, r7
 80109c8:	47c0      	blx	r8
 80109ca:	3001      	adds	r0, #1
 80109cc:	d0e6      	beq.n	801099c <_printf_common+0xa4>
 80109ce:	3601      	adds	r6, #1
 80109d0:	e7d9      	b.n	8010986 <_printf_common+0x8e>
	...

080109d4 <_printf_i>:
 80109d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80109d8:	460c      	mov	r4, r1
 80109da:	4691      	mov	r9, r2
 80109dc:	7e27      	ldrb	r7, [r4, #24]
 80109de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80109e0:	2f78      	cmp	r7, #120	; 0x78
 80109e2:	4680      	mov	r8, r0
 80109e4:	469a      	mov	sl, r3
 80109e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80109ea:	d807      	bhi.n	80109fc <_printf_i+0x28>
 80109ec:	2f62      	cmp	r7, #98	; 0x62
 80109ee:	d80a      	bhi.n	8010a06 <_printf_i+0x32>
 80109f0:	2f00      	cmp	r7, #0
 80109f2:	f000 80d8 	beq.w	8010ba6 <_printf_i+0x1d2>
 80109f6:	2f58      	cmp	r7, #88	; 0x58
 80109f8:	f000 80a3 	beq.w	8010b42 <_printf_i+0x16e>
 80109fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010a00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010a04:	e03a      	b.n	8010a7c <_printf_i+0xa8>
 8010a06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010a0a:	2b15      	cmp	r3, #21
 8010a0c:	d8f6      	bhi.n	80109fc <_printf_i+0x28>
 8010a0e:	a001      	add	r0, pc, #4	; (adr r0, 8010a14 <_printf_i+0x40>)
 8010a10:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010a14:	08010a6d 	.word	0x08010a6d
 8010a18:	08010a81 	.word	0x08010a81
 8010a1c:	080109fd 	.word	0x080109fd
 8010a20:	080109fd 	.word	0x080109fd
 8010a24:	080109fd 	.word	0x080109fd
 8010a28:	080109fd 	.word	0x080109fd
 8010a2c:	08010a81 	.word	0x08010a81
 8010a30:	080109fd 	.word	0x080109fd
 8010a34:	080109fd 	.word	0x080109fd
 8010a38:	080109fd 	.word	0x080109fd
 8010a3c:	080109fd 	.word	0x080109fd
 8010a40:	08010b8d 	.word	0x08010b8d
 8010a44:	08010ab1 	.word	0x08010ab1
 8010a48:	08010b6f 	.word	0x08010b6f
 8010a4c:	080109fd 	.word	0x080109fd
 8010a50:	080109fd 	.word	0x080109fd
 8010a54:	08010baf 	.word	0x08010baf
 8010a58:	080109fd 	.word	0x080109fd
 8010a5c:	08010ab1 	.word	0x08010ab1
 8010a60:	080109fd 	.word	0x080109fd
 8010a64:	080109fd 	.word	0x080109fd
 8010a68:	08010b77 	.word	0x08010b77
 8010a6c:	680b      	ldr	r3, [r1, #0]
 8010a6e:	1d1a      	adds	r2, r3, #4
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	600a      	str	r2, [r1, #0]
 8010a74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010a78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010a7c:	2301      	movs	r3, #1
 8010a7e:	e0a3      	b.n	8010bc8 <_printf_i+0x1f4>
 8010a80:	6825      	ldr	r5, [r4, #0]
 8010a82:	6808      	ldr	r0, [r1, #0]
 8010a84:	062e      	lsls	r6, r5, #24
 8010a86:	f100 0304 	add.w	r3, r0, #4
 8010a8a:	d50a      	bpl.n	8010aa2 <_printf_i+0xce>
 8010a8c:	6805      	ldr	r5, [r0, #0]
 8010a8e:	600b      	str	r3, [r1, #0]
 8010a90:	2d00      	cmp	r5, #0
 8010a92:	da03      	bge.n	8010a9c <_printf_i+0xc8>
 8010a94:	232d      	movs	r3, #45	; 0x2d
 8010a96:	426d      	negs	r5, r5
 8010a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a9c:	485e      	ldr	r0, [pc, #376]	; (8010c18 <_printf_i+0x244>)
 8010a9e:	230a      	movs	r3, #10
 8010aa0:	e019      	b.n	8010ad6 <_printf_i+0x102>
 8010aa2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010aa6:	6805      	ldr	r5, [r0, #0]
 8010aa8:	600b      	str	r3, [r1, #0]
 8010aaa:	bf18      	it	ne
 8010aac:	b22d      	sxthne	r5, r5
 8010aae:	e7ef      	b.n	8010a90 <_printf_i+0xbc>
 8010ab0:	680b      	ldr	r3, [r1, #0]
 8010ab2:	6825      	ldr	r5, [r4, #0]
 8010ab4:	1d18      	adds	r0, r3, #4
 8010ab6:	6008      	str	r0, [r1, #0]
 8010ab8:	0628      	lsls	r0, r5, #24
 8010aba:	d501      	bpl.n	8010ac0 <_printf_i+0xec>
 8010abc:	681d      	ldr	r5, [r3, #0]
 8010abe:	e002      	b.n	8010ac6 <_printf_i+0xf2>
 8010ac0:	0669      	lsls	r1, r5, #25
 8010ac2:	d5fb      	bpl.n	8010abc <_printf_i+0xe8>
 8010ac4:	881d      	ldrh	r5, [r3, #0]
 8010ac6:	4854      	ldr	r0, [pc, #336]	; (8010c18 <_printf_i+0x244>)
 8010ac8:	2f6f      	cmp	r7, #111	; 0x6f
 8010aca:	bf0c      	ite	eq
 8010acc:	2308      	moveq	r3, #8
 8010ace:	230a      	movne	r3, #10
 8010ad0:	2100      	movs	r1, #0
 8010ad2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010ad6:	6866      	ldr	r6, [r4, #4]
 8010ad8:	60a6      	str	r6, [r4, #8]
 8010ada:	2e00      	cmp	r6, #0
 8010adc:	bfa2      	ittt	ge
 8010ade:	6821      	ldrge	r1, [r4, #0]
 8010ae0:	f021 0104 	bicge.w	r1, r1, #4
 8010ae4:	6021      	strge	r1, [r4, #0]
 8010ae6:	b90d      	cbnz	r5, 8010aec <_printf_i+0x118>
 8010ae8:	2e00      	cmp	r6, #0
 8010aea:	d04d      	beq.n	8010b88 <_printf_i+0x1b4>
 8010aec:	4616      	mov	r6, r2
 8010aee:	fbb5 f1f3 	udiv	r1, r5, r3
 8010af2:	fb03 5711 	mls	r7, r3, r1, r5
 8010af6:	5dc7      	ldrb	r7, [r0, r7]
 8010af8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010afc:	462f      	mov	r7, r5
 8010afe:	42bb      	cmp	r3, r7
 8010b00:	460d      	mov	r5, r1
 8010b02:	d9f4      	bls.n	8010aee <_printf_i+0x11a>
 8010b04:	2b08      	cmp	r3, #8
 8010b06:	d10b      	bne.n	8010b20 <_printf_i+0x14c>
 8010b08:	6823      	ldr	r3, [r4, #0]
 8010b0a:	07df      	lsls	r7, r3, #31
 8010b0c:	d508      	bpl.n	8010b20 <_printf_i+0x14c>
 8010b0e:	6923      	ldr	r3, [r4, #16]
 8010b10:	6861      	ldr	r1, [r4, #4]
 8010b12:	4299      	cmp	r1, r3
 8010b14:	bfde      	ittt	le
 8010b16:	2330      	movle	r3, #48	; 0x30
 8010b18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010b1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010b20:	1b92      	subs	r2, r2, r6
 8010b22:	6122      	str	r2, [r4, #16]
 8010b24:	f8cd a000 	str.w	sl, [sp]
 8010b28:	464b      	mov	r3, r9
 8010b2a:	aa03      	add	r2, sp, #12
 8010b2c:	4621      	mov	r1, r4
 8010b2e:	4640      	mov	r0, r8
 8010b30:	f7ff fee2 	bl	80108f8 <_printf_common>
 8010b34:	3001      	adds	r0, #1
 8010b36:	d14c      	bne.n	8010bd2 <_printf_i+0x1fe>
 8010b38:	f04f 30ff 	mov.w	r0, #4294967295
 8010b3c:	b004      	add	sp, #16
 8010b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b42:	4835      	ldr	r0, [pc, #212]	; (8010c18 <_printf_i+0x244>)
 8010b44:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010b48:	6823      	ldr	r3, [r4, #0]
 8010b4a:	680e      	ldr	r6, [r1, #0]
 8010b4c:	061f      	lsls	r7, r3, #24
 8010b4e:	f856 5b04 	ldr.w	r5, [r6], #4
 8010b52:	600e      	str	r6, [r1, #0]
 8010b54:	d514      	bpl.n	8010b80 <_printf_i+0x1ac>
 8010b56:	07d9      	lsls	r1, r3, #31
 8010b58:	bf44      	itt	mi
 8010b5a:	f043 0320 	orrmi.w	r3, r3, #32
 8010b5e:	6023      	strmi	r3, [r4, #0]
 8010b60:	b91d      	cbnz	r5, 8010b6a <_printf_i+0x196>
 8010b62:	6823      	ldr	r3, [r4, #0]
 8010b64:	f023 0320 	bic.w	r3, r3, #32
 8010b68:	6023      	str	r3, [r4, #0]
 8010b6a:	2310      	movs	r3, #16
 8010b6c:	e7b0      	b.n	8010ad0 <_printf_i+0xfc>
 8010b6e:	6823      	ldr	r3, [r4, #0]
 8010b70:	f043 0320 	orr.w	r3, r3, #32
 8010b74:	6023      	str	r3, [r4, #0]
 8010b76:	2378      	movs	r3, #120	; 0x78
 8010b78:	4828      	ldr	r0, [pc, #160]	; (8010c1c <_printf_i+0x248>)
 8010b7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010b7e:	e7e3      	b.n	8010b48 <_printf_i+0x174>
 8010b80:	065e      	lsls	r6, r3, #25
 8010b82:	bf48      	it	mi
 8010b84:	b2ad      	uxthmi	r5, r5
 8010b86:	e7e6      	b.n	8010b56 <_printf_i+0x182>
 8010b88:	4616      	mov	r6, r2
 8010b8a:	e7bb      	b.n	8010b04 <_printf_i+0x130>
 8010b8c:	680b      	ldr	r3, [r1, #0]
 8010b8e:	6826      	ldr	r6, [r4, #0]
 8010b90:	6960      	ldr	r0, [r4, #20]
 8010b92:	1d1d      	adds	r5, r3, #4
 8010b94:	600d      	str	r5, [r1, #0]
 8010b96:	0635      	lsls	r5, r6, #24
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	d501      	bpl.n	8010ba0 <_printf_i+0x1cc>
 8010b9c:	6018      	str	r0, [r3, #0]
 8010b9e:	e002      	b.n	8010ba6 <_printf_i+0x1d2>
 8010ba0:	0671      	lsls	r1, r6, #25
 8010ba2:	d5fb      	bpl.n	8010b9c <_printf_i+0x1c8>
 8010ba4:	8018      	strh	r0, [r3, #0]
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	6123      	str	r3, [r4, #16]
 8010baa:	4616      	mov	r6, r2
 8010bac:	e7ba      	b.n	8010b24 <_printf_i+0x150>
 8010bae:	680b      	ldr	r3, [r1, #0]
 8010bb0:	1d1a      	adds	r2, r3, #4
 8010bb2:	600a      	str	r2, [r1, #0]
 8010bb4:	681e      	ldr	r6, [r3, #0]
 8010bb6:	6862      	ldr	r2, [r4, #4]
 8010bb8:	2100      	movs	r1, #0
 8010bba:	4630      	mov	r0, r6
 8010bbc:	f7ef fb18 	bl	80001f0 <memchr>
 8010bc0:	b108      	cbz	r0, 8010bc6 <_printf_i+0x1f2>
 8010bc2:	1b80      	subs	r0, r0, r6
 8010bc4:	6060      	str	r0, [r4, #4]
 8010bc6:	6863      	ldr	r3, [r4, #4]
 8010bc8:	6123      	str	r3, [r4, #16]
 8010bca:	2300      	movs	r3, #0
 8010bcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010bd0:	e7a8      	b.n	8010b24 <_printf_i+0x150>
 8010bd2:	6923      	ldr	r3, [r4, #16]
 8010bd4:	4632      	mov	r2, r6
 8010bd6:	4649      	mov	r1, r9
 8010bd8:	4640      	mov	r0, r8
 8010bda:	47d0      	blx	sl
 8010bdc:	3001      	adds	r0, #1
 8010bde:	d0ab      	beq.n	8010b38 <_printf_i+0x164>
 8010be0:	6823      	ldr	r3, [r4, #0]
 8010be2:	079b      	lsls	r3, r3, #30
 8010be4:	d413      	bmi.n	8010c0e <_printf_i+0x23a>
 8010be6:	68e0      	ldr	r0, [r4, #12]
 8010be8:	9b03      	ldr	r3, [sp, #12]
 8010bea:	4298      	cmp	r0, r3
 8010bec:	bfb8      	it	lt
 8010bee:	4618      	movlt	r0, r3
 8010bf0:	e7a4      	b.n	8010b3c <_printf_i+0x168>
 8010bf2:	2301      	movs	r3, #1
 8010bf4:	4632      	mov	r2, r6
 8010bf6:	4649      	mov	r1, r9
 8010bf8:	4640      	mov	r0, r8
 8010bfa:	47d0      	blx	sl
 8010bfc:	3001      	adds	r0, #1
 8010bfe:	d09b      	beq.n	8010b38 <_printf_i+0x164>
 8010c00:	3501      	adds	r5, #1
 8010c02:	68e3      	ldr	r3, [r4, #12]
 8010c04:	9903      	ldr	r1, [sp, #12]
 8010c06:	1a5b      	subs	r3, r3, r1
 8010c08:	42ab      	cmp	r3, r5
 8010c0a:	dcf2      	bgt.n	8010bf2 <_printf_i+0x21e>
 8010c0c:	e7eb      	b.n	8010be6 <_printf_i+0x212>
 8010c0e:	2500      	movs	r5, #0
 8010c10:	f104 0619 	add.w	r6, r4, #25
 8010c14:	e7f5      	b.n	8010c02 <_printf_i+0x22e>
 8010c16:	bf00      	nop
 8010c18:	0801668f 	.word	0x0801668f
 8010c1c:	080166a0 	.word	0x080166a0

08010c20 <_scanf_float>:
 8010c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c24:	b087      	sub	sp, #28
 8010c26:	4617      	mov	r7, r2
 8010c28:	9303      	str	r3, [sp, #12]
 8010c2a:	688b      	ldr	r3, [r1, #8]
 8010c2c:	1e5a      	subs	r2, r3, #1
 8010c2e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010c32:	bf83      	ittte	hi
 8010c34:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010c38:	195b      	addhi	r3, r3, r5
 8010c3a:	9302      	strhi	r3, [sp, #8]
 8010c3c:	2300      	movls	r3, #0
 8010c3e:	bf86      	itte	hi
 8010c40:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010c44:	608b      	strhi	r3, [r1, #8]
 8010c46:	9302      	strls	r3, [sp, #8]
 8010c48:	680b      	ldr	r3, [r1, #0]
 8010c4a:	468b      	mov	fp, r1
 8010c4c:	2500      	movs	r5, #0
 8010c4e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8010c52:	f84b 3b1c 	str.w	r3, [fp], #28
 8010c56:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010c5a:	4680      	mov	r8, r0
 8010c5c:	460c      	mov	r4, r1
 8010c5e:	465e      	mov	r6, fp
 8010c60:	46aa      	mov	sl, r5
 8010c62:	46a9      	mov	r9, r5
 8010c64:	9501      	str	r5, [sp, #4]
 8010c66:	68a2      	ldr	r2, [r4, #8]
 8010c68:	b152      	cbz	r2, 8010c80 <_scanf_float+0x60>
 8010c6a:	683b      	ldr	r3, [r7, #0]
 8010c6c:	781b      	ldrb	r3, [r3, #0]
 8010c6e:	2b4e      	cmp	r3, #78	; 0x4e
 8010c70:	d864      	bhi.n	8010d3c <_scanf_float+0x11c>
 8010c72:	2b40      	cmp	r3, #64	; 0x40
 8010c74:	d83c      	bhi.n	8010cf0 <_scanf_float+0xd0>
 8010c76:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8010c7a:	b2c8      	uxtb	r0, r1
 8010c7c:	280e      	cmp	r0, #14
 8010c7e:	d93a      	bls.n	8010cf6 <_scanf_float+0xd6>
 8010c80:	f1b9 0f00 	cmp.w	r9, #0
 8010c84:	d003      	beq.n	8010c8e <_scanf_float+0x6e>
 8010c86:	6823      	ldr	r3, [r4, #0]
 8010c88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010c8c:	6023      	str	r3, [r4, #0]
 8010c8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010c92:	f1ba 0f01 	cmp.w	sl, #1
 8010c96:	f200 8113 	bhi.w	8010ec0 <_scanf_float+0x2a0>
 8010c9a:	455e      	cmp	r6, fp
 8010c9c:	f200 8105 	bhi.w	8010eaa <_scanf_float+0x28a>
 8010ca0:	2501      	movs	r5, #1
 8010ca2:	4628      	mov	r0, r5
 8010ca4:	b007      	add	sp, #28
 8010ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010caa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8010cae:	2a0d      	cmp	r2, #13
 8010cb0:	d8e6      	bhi.n	8010c80 <_scanf_float+0x60>
 8010cb2:	a101      	add	r1, pc, #4	; (adr r1, 8010cb8 <_scanf_float+0x98>)
 8010cb4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010cb8:	08010df7 	.word	0x08010df7
 8010cbc:	08010c81 	.word	0x08010c81
 8010cc0:	08010c81 	.word	0x08010c81
 8010cc4:	08010c81 	.word	0x08010c81
 8010cc8:	08010e57 	.word	0x08010e57
 8010ccc:	08010e2f 	.word	0x08010e2f
 8010cd0:	08010c81 	.word	0x08010c81
 8010cd4:	08010c81 	.word	0x08010c81
 8010cd8:	08010e05 	.word	0x08010e05
 8010cdc:	08010c81 	.word	0x08010c81
 8010ce0:	08010c81 	.word	0x08010c81
 8010ce4:	08010c81 	.word	0x08010c81
 8010ce8:	08010c81 	.word	0x08010c81
 8010cec:	08010dbd 	.word	0x08010dbd
 8010cf0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8010cf4:	e7db      	b.n	8010cae <_scanf_float+0x8e>
 8010cf6:	290e      	cmp	r1, #14
 8010cf8:	d8c2      	bhi.n	8010c80 <_scanf_float+0x60>
 8010cfa:	a001      	add	r0, pc, #4	; (adr r0, 8010d00 <_scanf_float+0xe0>)
 8010cfc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010d00:	08010daf 	.word	0x08010daf
 8010d04:	08010c81 	.word	0x08010c81
 8010d08:	08010daf 	.word	0x08010daf
 8010d0c:	08010e43 	.word	0x08010e43
 8010d10:	08010c81 	.word	0x08010c81
 8010d14:	08010d5d 	.word	0x08010d5d
 8010d18:	08010d99 	.word	0x08010d99
 8010d1c:	08010d99 	.word	0x08010d99
 8010d20:	08010d99 	.word	0x08010d99
 8010d24:	08010d99 	.word	0x08010d99
 8010d28:	08010d99 	.word	0x08010d99
 8010d2c:	08010d99 	.word	0x08010d99
 8010d30:	08010d99 	.word	0x08010d99
 8010d34:	08010d99 	.word	0x08010d99
 8010d38:	08010d99 	.word	0x08010d99
 8010d3c:	2b6e      	cmp	r3, #110	; 0x6e
 8010d3e:	d809      	bhi.n	8010d54 <_scanf_float+0x134>
 8010d40:	2b60      	cmp	r3, #96	; 0x60
 8010d42:	d8b2      	bhi.n	8010caa <_scanf_float+0x8a>
 8010d44:	2b54      	cmp	r3, #84	; 0x54
 8010d46:	d077      	beq.n	8010e38 <_scanf_float+0x218>
 8010d48:	2b59      	cmp	r3, #89	; 0x59
 8010d4a:	d199      	bne.n	8010c80 <_scanf_float+0x60>
 8010d4c:	2d07      	cmp	r5, #7
 8010d4e:	d197      	bne.n	8010c80 <_scanf_float+0x60>
 8010d50:	2508      	movs	r5, #8
 8010d52:	e029      	b.n	8010da8 <_scanf_float+0x188>
 8010d54:	2b74      	cmp	r3, #116	; 0x74
 8010d56:	d06f      	beq.n	8010e38 <_scanf_float+0x218>
 8010d58:	2b79      	cmp	r3, #121	; 0x79
 8010d5a:	e7f6      	b.n	8010d4a <_scanf_float+0x12a>
 8010d5c:	6821      	ldr	r1, [r4, #0]
 8010d5e:	05c8      	lsls	r0, r1, #23
 8010d60:	d51a      	bpl.n	8010d98 <_scanf_float+0x178>
 8010d62:	9b02      	ldr	r3, [sp, #8]
 8010d64:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010d68:	6021      	str	r1, [r4, #0]
 8010d6a:	f109 0901 	add.w	r9, r9, #1
 8010d6e:	b11b      	cbz	r3, 8010d78 <_scanf_float+0x158>
 8010d70:	3b01      	subs	r3, #1
 8010d72:	3201      	adds	r2, #1
 8010d74:	9302      	str	r3, [sp, #8]
 8010d76:	60a2      	str	r2, [r4, #8]
 8010d78:	68a3      	ldr	r3, [r4, #8]
 8010d7a:	3b01      	subs	r3, #1
 8010d7c:	60a3      	str	r3, [r4, #8]
 8010d7e:	6923      	ldr	r3, [r4, #16]
 8010d80:	3301      	adds	r3, #1
 8010d82:	6123      	str	r3, [r4, #16]
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	3b01      	subs	r3, #1
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	607b      	str	r3, [r7, #4]
 8010d8c:	f340 8084 	ble.w	8010e98 <_scanf_float+0x278>
 8010d90:	683b      	ldr	r3, [r7, #0]
 8010d92:	3301      	adds	r3, #1
 8010d94:	603b      	str	r3, [r7, #0]
 8010d96:	e766      	b.n	8010c66 <_scanf_float+0x46>
 8010d98:	eb1a 0f05 	cmn.w	sl, r5
 8010d9c:	f47f af70 	bne.w	8010c80 <_scanf_float+0x60>
 8010da0:	6822      	ldr	r2, [r4, #0]
 8010da2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8010da6:	6022      	str	r2, [r4, #0]
 8010da8:	f806 3b01 	strb.w	r3, [r6], #1
 8010dac:	e7e4      	b.n	8010d78 <_scanf_float+0x158>
 8010dae:	6822      	ldr	r2, [r4, #0]
 8010db0:	0610      	lsls	r0, r2, #24
 8010db2:	f57f af65 	bpl.w	8010c80 <_scanf_float+0x60>
 8010db6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010dba:	e7f4      	b.n	8010da6 <_scanf_float+0x186>
 8010dbc:	f1ba 0f00 	cmp.w	sl, #0
 8010dc0:	d10e      	bne.n	8010de0 <_scanf_float+0x1c0>
 8010dc2:	f1b9 0f00 	cmp.w	r9, #0
 8010dc6:	d10e      	bne.n	8010de6 <_scanf_float+0x1c6>
 8010dc8:	6822      	ldr	r2, [r4, #0]
 8010dca:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010dce:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010dd2:	d108      	bne.n	8010de6 <_scanf_float+0x1c6>
 8010dd4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010dd8:	6022      	str	r2, [r4, #0]
 8010dda:	f04f 0a01 	mov.w	sl, #1
 8010dde:	e7e3      	b.n	8010da8 <_scanf_float+0x188>
 8010de0:	f1ba 0f02 	cmp.w	sl, #2
 8010de4:	d055      	beq.n	8010e92 <_scanf_float+0x272>
 8010de6:	2d01      	cmp	r5, #1
 8010de8:	d002      	beq.n	8010df0 <_scanf_float+0x1d0>
 8010dea:	2d04      	cmp	r5, #4
 8010dec:	f47f af48 	bne.w	8010c80 <_scanf_float+0x60>
 8010df0:	3501      	adds	r5, #1
 8010df2:	b2ed      	uxtb	r5, r5
 8010df4:	e7d8      	b.n	8010da8 <_scanf_float+0x188>
 8010df6:	f1ba 0f01 	cmp.w	sl, #1
 8010dfa:	f47f af41 	bne.w	8010c80 <_scanf_float+0x60>
 8010dfe:	f04f 0a02 	mov.w	sl, #2
 8010e02:	e7d1      	b.n	8010da8 <_scanf_float+0x188>
 8010e04:	b97d      	cbnz	r5, 8010e26 <_scanf_float+0x206>
 8010e06:	f1b9 0f00 	cmp.w	r9, #0
 8010e0a:	f47f af3c 	bne.w	8010c86 <_scanf_float+0x66>
 8010e0e:	6822      	ldr	r2, [r4, #0]
 8010e10:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010e14:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010e18:	f47f af39 	bne.w	8010c8e <_scanf_float+0x6e>
 8010e1c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010e20:	6022      	str	r2, [r4, #0]
 8010e22:	2501      	movs	r5, #1
 8010e24:	e7c0      	b.n	8010da8 <_scanf_float+0x188>
 8010e26:	2d03      	cmp	r5, #3
 8010e28:	d0e2      	beq.n	8010df0 <_scanf_float+0x1d0>
 8010e2a:	2d05      	cmp	r5, #5
 8010e2c:	e7de      	b.n	8010dec <_scanf_float+0x1cc>
 8010e2e:	2d02      	cmp	r5, #2
 8010e30:	f47f af26 	bne.w	8010c80 <_scanf_float+0x60>
 8010e34:	2503      	movs	r5, #3
 8010e36:	e7b7      	b.n	8010da8 <_scanf_float+0x188>
 8010e38:	2d06      	cmp	r5, #6
 8010e3a:	f47f af21 	bne.w	8010c80 <_scanf_float+0x60>
 8010e3e:	2507      	movs	r5, #7
 8010e40:	e7b2      	b.n	8010da8 <_scanf_float+0x188>
 8010e42:	6822      	ldr	r2, [r4, #0]
 8010e44:	0591      	lsls	r1, r2, #22
 8010e46:	f57f af1b 	bpl.w	8010c80 <_scanf_float+0x60>
 8010e4a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8010e4e:	6022      	str	r2, [r4, #0]
 8010e50:	f8cd 9004 	str.w	r9, [sp, #4]
 8010e54:	e7a8      	b.n	8010da8 <_scanf_float+0x188>
 8010e56:	6822      	ldr	r2, [r4, #0]
 8010e58:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010e5c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010e60:	d006      	beq.n	8010e70 <_scanf_float+0x250>
 8010e62:	0550      	lsls	r0, r2, #21
 8010e64:	f57f af0c 	bpl.w	8010c80 <_scanf_float+0x60>
 8010e68:	f1b9 0f00 	cmp.w	r9, #0
 8010e6c:	f43f af0f 	beq.w	8010c8e <_scanf_float+0x6e>
 8010e70:	0591      	lsls	r1, r2, #22
 8010e72:	bf58      	it	pl
 8010e74:	9901      	ldrpl	r1, [sp, #4]
 8010e76:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010e7a:	bf58      	it	pl
 8010e7c:	eba9 0101 	subpl.w	r1, r9, r1
 8010e80:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010e84:	bf58      	it	pl
 8010e86:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010e8a:	6022      	str	r2, [r4, #0]
 8010e8c:	f04f 0900 	mov.w	r9, #0
 8010e90:	e78a      	b.n	8010da8 <_scanf_float+0x188>
 8010e92:	f04f 0a03 	mov.w	sl, #3
 8010e96:	e787      	b.n	8010da8 <_scanf_float+0x188>
 8010e98:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010e9c:	4639      	mov	r1, r7
 8010e9e:	4640      	mov	r0, r8
 8010ea0:	4798      	blx	r3
 8010ea2:	2800      	cmp	r0, #0
 8010ea4:	f43f aedf 	beq.w	8010c66 <_scanf_float+0x46>
 8010ea8:	e6ea      	b.n	8010c80 <_scanf_float+0x60>
 8010eaa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010eae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010eb2:	463a      	mov	r2, r7
 8010eb4:	4640      	mov	r0, r8
 8010eb6:	4798      	blx	r3
 8010eb8:	6923      	ldr	r3, [r4, #16]
 8010eba:	3b01      	subs	r3, #1
 8010ebc:	6123      	str	r3, [r4, #16]
 8010ebe:	e6ec      	b.n	8010c9a <_scanf_float+0x7a>
 8010ec0:	1e6b      	subs	r3, r5, #1
 8010ec2:	2b06      	cmp	r3, #6
 8010ec4:	d825      	bhi.n	8010f12 <_scanf_float+0x2f2>
 8010ec6:	2d02      	cmp	r5, #2
 8010ec8:	d836      	bhi.n	8010f38 <_scanf_float+0x318>
 8010eca:	455e      	cmp	r6, fp
 8010ecc:	f67f aee8 	bls.w	8010ca0 <_scanf_float+0x80>
 8010ed0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010ed4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010ed8:	463a      	mov	r2, r7
 8010eda:	4640      	mov	r0, r8
 8010edc:	4798      	blx	r3
 8010ede:	6923      	ldr	r3, [r4, #16]
 8010ee0:	3b01      	subs	r3, #1
 8010ee2:	6123      	str	r3, [r4, #16]
 8010ee4:	e7f1      	b.n	8010eca <_scanf_float+0x2aa>
 8010ee6:	9802      	ldr	r0, [sp, #8]
 8010ee8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010eec:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8010ef0:	9002      	str	r0, [sp, #8]
 8010ef2:	463a      	mov	r2, r7
 8010ef4:	4640      	mov	r0, r8
 8010ef6:	4798      	blx	r3
 8010ef8:	6923      	ldr	r3, [r4, #16]
 8010efa:	3b01      	subs	r3, #1
 8010efc:	6123      	str	r3, [r4, #16]
 8010efe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010f02:	fa5f fa8a 	uxtb.w	sl, sl
 8010f06:	f1ba 0f02 	cmp.w	sl, #2
 8010f0a:	d1ec      	bne.n	8010ee6 <_scanf_float+0x2c6>
 8010f0c:	3d03      	subs	r5, #3
 8010f0e:	b2ed      	uxtb	r5, r5
 8010f10:	1b76      	subs	r6, r6, r5
 8010f12:	6823      	ldr	r3, [r4, #0]
 8010f14:	05da      	lsls	r2, r3, #23
 8010f16:	d52f      	bpl.n	8010f78 <_scanf_float+0x358>
 8010f18:	055b      	lsls	r3, r3, #21
 8010f1a:	d510      	bpl.n	8010f3e <_scanf_float+0x31e>
 8010f1c:	455e      	cmp	r6, fp
 8010f1e:	f67f aebf 	bls.w	8010ca0 <_scanf_float+0x80>
 8010f22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010f26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010f2a:	463a      	mov	r2, r7
 8010f2c:	4640      	mov	r0, r8
 8010f2e:	4798      	blx	r3
 8010f30:	6923      	ldr	r3, [r4, #16]
 8010f32:	3b01      	subs	r3, #1
 8010f34:	6123      	str	r3, [r4, #16]
 8010f36:	e7f1      	b.n	8010f1c <_scanf_float+0x2fc>
 8010f38:	46aa      	mov	sl, r5
 8010f3a:	9602      	str	r6, [sp, #8]
 8010f3c:	e7df      	b.n	8010efe <_scanf_float+0x2de>
 8010f3e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010f42:	6923      	ldr	r3, [r4, #16]
 8010f44:	2965      	cmp	r1, #101	; 0x65
 8010f46:	f103 33ff 	add.w	r3, r3, #4294967295
 8010f4a:	f106 35ff 	add.w	r5, r6, #4294967295
 8010f4e:	6123      	str	r3, [r4, #16]
 8010f50:	d00c      	beq.n	8010f6c <_scanf_float+0x34c>
 8010f52:	2945      	cmp	r1, #69	; 0x45
 8010f54:	d00a      	beq.n	8010f6c <_scanf_float+0x34c>
 8010f56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010f5a:	463a      	mov	r2, r7
 8010f5c:	4640      	mov	r0, r8
 8010f5e:	4798      	blx	r3
 8010f60:	6923      	ldr	r3, [r4, #16]
 8010f62:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010f66:	3b01      	subs	r3, #1
 8010f68:	1eb5      	subs	r5, r6, #2
 8010f6a:	6123      	str	r3, [r4, #16]
 8010f6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010f70:	463a      	mov	r2, r7
 8010f72:	4640      	mov	r0, r8
 8010f74:	4798      	blx	r3
 8010f76:	462e      	mov	r6, r5
 8010f78:	6825      	ldr	r5, [r4, #0]
 8010f7a:	f015 0510 	ands.w	r5, r5, #16
 8010f7e:	d158      	bne.n	8011032 <_scanf_float+0x412>
 8010f80:	7035      	strb	r5, [r6, #0]
 8010f82:	6823      	ldr	r3, [r4, #0]
 8010f84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010f8c:	d11c      	bne.n	8010fc8 <_scanf_float+0x3a8>
 8010f8e:	9b01      	ldr	r3, [sp, #4]
 8010f90:	454b      	cmp	r3, r9
 8010f92:	eba3 0209 	sub.w	r2, r3, r9
 8010f96:	d124      	bne.n	8010fe2 <_scanf_float+0x3c2>
 8010f98:	2200      	movs	r2, #0
 8010f9a:	4659      	mov	r1, fp
 8010f9c:	4640      	mov	r0, r8
 8010f9e:	f000 feb5 	bl	8011d0c <_strtod_r>
 8010fa2:	9b03      	ldr	r3, [sp, #12]
 8010fa4:	6821      	ldr	r1, [r4, #0]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	f011 0f02 	tst.w	r1, #2
 8010fac:	ec57 6b10 	vmov	r6, r7, d0
 8010fb0:	f103 0204 	add.w	r2, r3, #4
 8010fb4:	d020      	beq.n	8010ff8 <_scanf_float+0x3d8>
 8010fb6:	9903      	ldr	r1, [sp, #12]
 8010fb8:	600a      	str	r2, [r1, #0]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	e9c3 6700 	strd	r6, r7, [r3]
 8010fc0:	68e3      	ldr	r3, [r4, #12]
 8010fc2:	3301      	adds	r3, #1
 8010fc4:	60e3      	str	r3, [r4, #12]
 8010fc6:	e66c      	b.n	8010ca2 <_scanf_float+0x82>
 8010fc8:	9b04      	ldr	r3, [sp, #16]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d0e4      	beq.n	8010f98 <_scanf_float+0x378>
 8010fce:	9905      	ldr	r1, [sp, #20]
 8010fd0:	230a      	movs	r3, #10
 8010fd2:	462a      	mov	r2, r5
 8010fd4:	3101      	adds	r1, #1
 8010fd6:	4640      	mov	r0, r8
 8010fd8:	f000 ff22 	bl	8011e20 <_strtol_r>
 8010fdc:	9b04      	ldr	r3, [sp, #16]
 8010fde:	9e05      	ldr	r6, [sp, #20]
 8010fe0:	1ac2      	subs	r2, r0, r3
 8010fe2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010fe6:	429e      	cmp	r6, r3
 8010fe8:	bf28      	it	cs
 8010fea:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8010fee:	4912      	ldr	r1, [pc, #72]	; (8011038 <_scanf_float+0x418>)
 8010ff0:	4630      	mov	r0, r6
 8010ff2:	f000 f843 	bl	801107c <siprintf>
 8010ff6:	e7cf      	b.n	8010f98 <_scanf_float+0x378>
 8010ff8:	f011 0f04 	tst.w	r1, #4
 8010ffc:	9903      	ldr	r1, [sp, #12]
 8010ffe:	600a      	str	r2, [r1, #0]
 8011000:	d1db      	bne.n	8010fba <_scanf_float+0x39a>
 8011002:	f8d3 8000 	ldr.w	r8, [r3]
 8011006:	ee10 2a10 	vmov	r2, s0
 801100a:	ee10 0a10 	vmov	r0, s0
 801100e:	463b      	mov	r3, r7
 8011010:	4639      	mov	r1, r7
 8011012:	f7ef fd93 	bl	8000b3c <__aeabi_dcmpun>
 8011016:	b128      	cbz	r0, 8011024 <_scanf_float+0x404>
 8011018:	4808      	ldr	r0, [pc, #32]	; (801103c <_scanf_float+0x41c>)
 801101a:	f000 f829 	bl	8011070 <nanf>
 801101e:	ed88 0a00 	vstr	s0, [r8]
 8011022:	e7cd      	b.n	8010fc0 <_scanf_float+0x3a0>
 8011024:	4630      	mov	r0, r6
 8011026:	4639      	mov	r1, r7
 8011028:	f7ef fde6 	bl	8000bf8 <__aeabi_d2f>
 801102c:	f8c8 0000 	str.w	r0, [r8]
 8011030:	e7c6      	b.n	8010fc0 <_scanf_float+0x3a0>
 8011032:	2500      	movs	r5, #0
 8011034:	e635      	b.n	8010ca2 <_scanf_float+0x82>
 8011036:	bf00      	nop
 8011038:	080166b1 	.word	0x080166b1
 801103c:	08016563 	.word	0x08016563

08011040 <iprintf>:
 8011040:	b40f      	push	{r0, r1, r2, r3}
 8011042:	4b0a      	ldr	r3, [pc, #40]	; (801106c <iprintf+0x2c>)
 8011044:	b513      	push	{r0, r1, r4, lr}
 8011046:	681c      	ldr	r4, [r3, #0]
 8011048:	b124      	cbz	r4, 8011054 <iprintf+0x14>
 801104a:	69a3      	ldr	r3, [r4, #24]
 801104c:	b913      	cbnz	r3, 8011054 <iprintf+0x14>
 801104e:	4620      	mov	r0, r4
 8011050:	f001 ff40 	bl	8012ed4 <__sinit>
 8011054:	ab05      	add	r3, sp, #20
 8011056:	9a04      	ldr	r2, [sp, #16]
 8011058:	68a1      	ldr	r1, [r4, #8]
 801105a:	9301      	str	r3, [sp, #4]
 801105c:	4620      	mov	r0, r4
 801105e:	f7ff f845 	bl	80100ec <_vfiprintf_r>
 8011062:	b002      	add	sp, #8
 8011064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011068:	b004      	add	sp, #16
 801106a:	4770      	bx	lr
 801106c:	20000058 	.word	0x20000058

08011070 <nanf>:
 8011070:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011078 <nanf+0x8>
 8011074:	4770      	bx	lr
 8011076:	bf00      	nop
 8011078:	7fc00000 	.word	0x7fc00000

0801107c <siprintf>:
 801107c:	b40e      	push	{r1, r2, r3}
 801107e:	b500      	push	{lr}
 8011080:	b09c      	sub	sp, #112	; 0x70
 8011082:	ab1d      	add	r3, sp, #116	; 0x74
 8011084:	9002      	str	r0, [sp, #8]
 8011086:	9006      	str	r0, [sp, #24]
 8011088:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801108c:	4809      	ldr	r0, [pc, #36]	; (80110b4 <siprintf+0x38>)
 801108e:	9107      	str	r1, [sp, #28]
 8011090:	9104      	str	r1, [sp, #16]
 8011092:	4909      	ldr	r1, [pc, #36]	; (80110b8 <siprintf+0x3c>)
 8011094:	f853 2b04 	ldr.w	r2, [r3], #4
 8011098:	9105      	str	r1, [sp, #20]
 801109a:	6800      	ldr	r0, [r0, #0]
 801109c:	9301      	str	r3, [sp, #4]
 801109e:	a902      	add	r1, sp, #8
 80110a0:	f003 f9ba 	bl	8014418 <_svfiprintf_r>
 80110a4:	9b02      	ldr	r3, [sp, #8]
 80110a6:	2200      	movs	r2, #0
 80110a8:	701a      	strb	r2, [r3, #0]
 80110aa:	b01c      	add	sp, #112	; 0x70
 80110ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80110b0:	b003      	add	sp, #12
 80110b2:	4770      	bx	lr
 80110b4:	20000058 	.word	0x20000058
 80110b8:	ffff0208 	.word	0xffff0208

080110bc <sulp>:
 80110bc:	b570      	push	{r4, r5, r6, lr}
 80110be:	4604      	mov	r4, r0
 80110c0:	460d      	mov	r5, r1
 80110c2:	ec45 4b10 	vmov	d0, r4, r5
 80110c6:	4616      	mov	r6, r2
 80110c8:	f002 ff1c 	bl	8013f04 <__ulp>
 80110cc:	ec51 0b10 	vmov	r0, r1, d0
 80110d0:	b17e      	cbz	r6, 80110f2 <sulp+0x36>
 80110d2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80110d6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80110da:	2b00      	cmp	r3, #0
 80110dc:	dd09      	ble.n	80110f2 <sulp+0x36>
 80110de:	051b      	lsls	r3, r3, #20
 80110e0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80110e4:	2400      	movs	r4, #0
 80110e6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80110ea:	4622      	mov	r2, r4
 80110ec:	462b      	mov	r3, r5
 80110ee:	f7ef fa8b 	bl	8000608 <__aeabi_dmul>
 80110f2:	bd70      	pop	{r4, r5, r6, pc}
 80110f4:	0000      	movs	r0, r0
	...

080110f8 <_strtod_l>:
 80110f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110fc:	b0a3      	sub	sp, #140	; 0x8c
 80110fe:	461f      	mov	r7, r3
 8011100:	2300      	movs	r3, #0
 8011102:	931e      	str	r3, [sp, #120]	; 0x78
 8011104:	4ba4      	ldr	r3, [pc, #656]	; (8011398 <_strtod_l+0x2a0>)
 8011106:	9219      	str	r2, [sp, #100]	; 0x64
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	9307      	str	r3, [sp, #28]
 801110c:	4604      	mov	r4, r0
 801110e:	4618      	mov	r0, r3
 8011110:	4688      	mov	r8, r1
 8011112:	f7ef f865 	bl	80001e0 <strlen>
 8011116:	f04f 0a00 	mov.w	sl, #0
 801111a:	4605      	mov	r5, r0
 801111c:	f04f 0b00 	mov.w	fp, #0
 8011120:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8011124:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011126:	781a      	ldrb	r2, [r3, #0]
 8011128:	2a2b      	cmp	r2, #43	; 0x2b
 801112a:	d04c      	beq.n	80111c6 <_strtod_l+0xce>
 801112c:	d839      	bhi.n	80111a2 <_strtod_l+0xaa>
 801112e:	2a0d      	cmp	r2, #13
 8011130:	d832      	bhi.n	8011198 <_strtod_l+0xa0>
 8011132:	2a08      	cmp	r2, #8
 8011134:	d832      	bhi.n	801119c <_strtod_l+0xa4>
 8011136:	2a00      	cmp	r2, #0
 8011138:	d03c      	beq.n	80111b4 <_strtod_l+0xbc>
 801113a:	2300      	movs	r3, #0
 801113c:	930e      	str	r3, [sp, #56]	; 0x38
 801113e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8011140:	7833      	ldrb	r3, [r6, #0]
 8011142:	2b30      	cmp	r3, #48	; 0x30
 8011144:	f040 80b4 	bne.w	80112b0 <_strtod_l+0x1b8>
 8011148:	7873      	ldrb	r3, [r6, #1]
 801114a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801114e:	2b58      	cmp	r3, #88	; 0x58
 8011150:	d16c      	bne.n	801122c <_strtod_l+0x134>
 8011152:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011154:	9301      	str	r3, [sp, #4]
 8011156:	ab1e      	add	r3, sp, #120	; 0x78
 8011158:	9702      	str	r7, [sp, #8]
 801115a:	9300      	str	r3, [sp, #0]
 801115c:	4a8f      	ldr	r2, [pc, #572]	; (801139c <_strtod_l+0x2a4>)
 801115e:	ab1f      	add	r3, sp, #124	; 0x7c
 8011160:	a91d      	add	r1, sp, #116	; 0x74
 8011162:	4620      	mov	r0, r4
 8011164:	f001 ffba 	bl	80130dc <__gethex>
 8011168:	f010 0707 	ands.w	r7, r0, #7
 801116c:	4605      	mov	r5, r0
 801116e:	d005      	beq.n	801117c <_strtod_l+0x84>
 8011170:	2f06      	cmp	r7, #6
 8011172:	d12a      	bne.n	80111ca <_strtod_l+0xd2>
 8011174:	3601      	adds	r6, #1
 8011176:	2300      	movs	r3, #0
 8011178:	961d      	str	r6, [sp, #116]	; 0x74
 801117a:	930e      	str	r3, [sp, #56]	; 0x38
 801117c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801117e:	2b00      	cmp	r3, #0
 8011180:	f040 8596 	bne.w	8011cb0 <_strtod_l+0xbb8>
 8011184:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011186:	b1db      	cbz	r3, 80111c0 <_strtod_l+0xc8>
 8011188:	4652      	mov	r2, sl
 801118a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801118e:	ec43 2b10 	vmov	d0, r2, r3
 8011192:	b023      	add	sp, #140	; 0x8c
 8011194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011198:	2a20      	cmp	r2, #32
 801119a:	d1ce      	bne.n	801113a <_strtod_l+0x42>
 801119c:	3301      	adds	r3, #1
 801119e:	931d      	str	r3, [sp, #116]	; 0x74
 80111a0:	e7c0      	b.n	8011124 <_strtod_l+0x2c>
 80111a2:	2a2d      	cmp	r2, #45	; 0x2d
 80111a4:	d1c9      	bne.n	801113a <_strtod_l+0x42>
 80111a6:	2201      	movs	r2, #1
 80111a8:	920e      	str	r2, [sp, #56]	; 0x38
 80111aa:	1c5a      	adds	r2, r3, #1
 80111ac:	921d      	str	r2, [sp, #116]	; 0x74
 80111ae:	785b      	ldrb	r3, [r3, #1]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d1c4      	bne.n	801113e <_strtod_l+0x46>
 80111b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80111b6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	f040 8576 	bne.w	8011cac <_strtod_l+0xbb4>
 80111c0:	4652      	mov	r2, sl
 80111c2:	465b      	mov	r3, fp
 80111c4:	e7e3      	b.n	801118e <_strtod_l+0x96>
 80111c6:	2200      	movs	r2, #0
 80111c8:	e7ee      	b.n	80111a8 <_strtod_l+0xb0>
 80111ca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80111cc:	b13a      	cbz	r2, 80111de <_strtod_l+0xe6>
 80111ce:	2135      	movs	r1, #53	; 0x35
 80111d0:	a820      	add	r0, sp, #128	; 0x80
 80111d2:	f002 ffa2 	bl	801411a <__copybits>
 80111d6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80111d8:	4620      	mov	r0, r4
 80111da:	f002 fb67 	bl	80138ac <_Bfree>
 80111de:	3f01      	subs	r7, #1
 80111e0:	2f05      	cmp	r7, #5
 80111e2:	d807      	bhi.n	80111f4 <_strtod_l+0xfc>
 80111e4:	e8df f007 	tbb	[pc, r7]
 80111e8:	1d180b0e 	.word	0x1d180b0e
 80111ec:	030e      	.short	0x030e
 80111ee:	f04f 0b00 	mov.w	fp, #0
 80111f2:	46da      	mov	sl, fp
 80111f4:	0728      	lsls	r0, r5, #28
 80111f6:	d5c1      	bpl.n	801117c <_strtod_l+0x84>
 80111f8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80111fc:	e7be      	b.n	801117c <_strtod_l+0x84>
 80111fe:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8011202:	e7f7      	b.n	80111f4 <_strtod_l+0xfc>
 8011204:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8011208:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801120a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801120e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011212:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011216:	e7ed      	b.n	80111f4 <_strtod_l+0xfc>
 8011218:	f8df b184 	ldr.w	fp, [pc, #388]	; 80113a0 <_strtod_l+0x2a8>
 801121c:	f04f 0a00 	mov.w	sl, #0
 8011220:	e7e8      	b.n	80111f4 <_strtod_l+0xfc>
 8011222:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8011226:	f04f 3aff 	mov.w	sl, #4294967295
 801122a:	e7e3      	b.n	80111f4 <_strtod_l+0xfc>
 801122c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801122e:	1c5a      	adds	r2, r3, #1
 8011230:	921d      	str	r2, [sp, #116]	; 0x74
 8011232:	785b      	ldrb	r3, [r3, #1]
 8011234:	2b30      	cmp	r3, #48	; 0x30
 8011236:	d0f9      	beq.n	801122c <_strtod_l+0x134>
 8011238:	2b00      	cmp	r3, #0
 801123a:	d09f      	beq.n	801117c <_strtod_l+0x84>
 801123c:	2301      	movs	r3, #1
 801123e:	f04f 0900 	mov.w	r9, #0
 8011242:	9304      	str	r3, [sp, #16]
 8011244:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011246:	930a      	str	r3, [sp, #40]	; 0x28
 8011248:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801124c:	464f      	mov	r7, r9
 801124e:	220a      	movs	r2, #10
 8011250:	981d      	ldr	r0, [sp, #116]	; 0x74
 8011252:	7806      	ldrb	r6, [r0, #0]
 8011254:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8011258:	b2d9      	uxtb	r1, r3
 801125a:	2909      	cmp	r1, #9
 801125c:	d92a      	bls.n	80112b4 <_strtod_l+0x1bc>
 801125e:	9907      	ldr	r1, [sp, #28]
 8011260:	462a      	mov	r2, r5
 8011262:	f003 fa78 	bl	8014756 <strncmp>
 8011266:	b398      	cbz	r0, 80112d0 <_strtod_l+0x1d8>
 8011268:	2000      	movs	r0, #0
 801126a:	4633      	mov	r3, r6
 801126c:	463d      	mov	r5, r7
 801126e:	9007      	str	r0, [sp, #28]
 8011270:	4602      	mov	r2, r0
 8011272:	2b65      	cmp	r3, #101	; 0x65
 8011274:	d001      	beq.n	801127a <_strtod_l+0x182>
 8011276:	2b45      	cmp	r3, #69	; 0x45
 8011278:	d118      	bne.n	80112ac <_strtod_l+0x1b4>
 801127a:	b91d      	cbnz	r5, 8011284 <_strtod_l+0x18c>
 801127c:	9b04      	ldr	r3, [sp, #16]
 801127e:	4303      	orrs	r3, r0
 8011280:	d098      	beq.n	80111b4 <_strtod_l+0xbc>
 8011282:	2500      	movs	r5, #0
 8011284:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8011288:	f108 0301 	add.w	r3, r8, #1
 801128c:	931d      	str	r3, [sp, #116]	; 0x74
 801128e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011292:	2b2b      	cmp	r3, #43	; 0x2b
 8011294:	d075      	beq.n	8011382 <_strtod_l+0x28a>
 8011296:	2b2d      	cmp	r3, #45	; 0x2d
 8011298:	d07b      	beq.n	8011392 <_strtod_l+0x29a>
 801129a:	f04f 0c00 	mov.w	ip, #0
 801129e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80112a2:	2909      	cmp	r1, #9
 80112a4:	f240 8082 	bls.w	80113ac <_strtod_l+0x2b4>
 80112a8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80112ac:	2600      	movs	r6, #0
 80112ae:	e09d      	b.n	80113ec <_strtod_l+0x2f4>
 80112b0:	2300      	movs	r3, #0
 80112b2:	e7c4      	b.n	801123e <_strtod_l+0x146>
 80112b4:	2f08      	cmp	r7, #8
 80112b6:	bfd8      	it	le
 80112b8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80112ba:	f100 0001 	add.w	r0, r0, #1
 80112be:	bfda      	itte	le
 80112c0:	fb02 3301 	mlale	r3, r2, r1, r3
 80112c4:	9309      	strle	r3, [sp, #36]	; 0x24
 80112c6:	fb02 3909 	mlagt	r9, r2, r9, r3
 80112ca:	3701      	adds	r7, #1
 80112cc:	901d      	str	r0, [sp, #116]	; 0x74
 80112ce:	e7bf      	b.n	8011250 <_strtod_l+0x158>
 80112d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80112d2:	195a      	adds	r2, r3, r5
 80112d4:	921d      	str	r2, [sp, #116]	; 0x74
 80112d6:	5d5b      	ldrb	r3, [r3, r5]
 80112d8:	2f00      	cmp	r7, #0
 80112da:	d037      	beq.n	801134c <_strtod_l+0x254>
 80112dc:	9007      	str	r0, [sp, #28]
 80112de:	463d      	mov	r5, r7
 80112e0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80112e4:	2a09      	cmp	r2, #9
 80112e6:	d912      	bls.n	801130e <_strtod_l+0x216>
 80112e8:	2201      	movs	r2, #1
 80112ea:	e7c2      	b.n	8011272 <_strtod_l+0x17a>
 80112ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80112ee:	1c5a      	adds	r2, r3, #1
 80112f0:	921d      	str	r2, [sp, #116]	; 0x74
 80112f2:	785b      	ldrb	r3, [r3, #1]
 80112f4:	3001      	adds	r0, #1
 80112f6:	2b30      	cmp	r3, #48	; 0x30
 80112f8:	d0f8      	beq.n	80112ec <_strtod_l+0x1f4>
 80112fa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80112fe:	2a08      	cmp	r2, #8
 8011300:	f200 84db 	bhi.w	8011cba <_strtod_l+0xbc2>
 8011304:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011306:	9007      	str	r0, [sp, #28]
 8011308:	2000      	movs	r0, #0
 801130a:	920a      	str	r2, [sp, #40]	; 0x28
 801130c:	4605      	mov	r5, r0
 801130e:	3b30      	subs	r3, #48	; 0x30
 8011310:	f100 0201 	add.w	r2, r0, #1
 8011314:	d014      	beq.n	8011340 <_strtod_l+0x248>
 8011316:	9907      	ldr	r1, [sp, #28]
 8011318:	4411      	add	r1, r2
 801131a:	9107      	str	r1, [sp, #28]
 801131c:	462a      	mov	r2, r5
 801131e:	eb00 0e05 	add.w	lr, r0, r5
 8011322:	210a      	movs	r1, #10
 8011324:	4572      	cmp	r2, lr
 8011326:	d113      	bne.n	8011350 <_strtod_l+0x258>
 8011328:	182a      	adds	r2, r5, r0
 801132a:	2a08      	cmp	r2, #8
 801132c:	f105 0501 	add.w	r5, r5, #1
 8011330:	4405      	add	r5, r0
 8011332:	dc1c      	bgt.n	801136e <_strtod_l+0x276>
 8011334:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011336:	220a      	movs	r2, #10
 8011338:	fb02 3301 	mla	r3, r2, r1, r3
 801133c:	9309      	str	r3, [sp, #36]	; 0x24
 801133e:	2200      	movs	r2, #0
 8011340:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011342:	1c59      	adds	r1, r3, #1
 8011344:	911d      	str	r1, [sp, #116]	; 0x74
 8011346:	785b      	ldrb	r3, [r3, #1]
 8011348:	4610      	mov	r0, r2
 801134a:	e7c9      	b.n	80112e0 <_strtod_l+0x1e8>
 801134c:	4638      	mov	r0, r7
 801134e:	e7d2      	b.n	80112f6 <_strtod_l+0x1fe>
 8011350:	2a08      	cmp	r2, #8
 8011352:	dc04      	bgt.n	801135e <_strtod_l+0x266>
 8011354:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8011356:	434e      	muls	r6, r1
 8011358:	9609      	str	r6, [sp, #36]	; 0x24
 801135a:	3201      	adds	r2, #1
 801135c:	e7e2      	b.n	8011324 <_strtod_l+0x22c>
 801135e:	f102 0c01 	add.w	ip, r2, #1
 8011362:	f1bc 0f10 	cmp.w	ip, #16
 8011366:	bfd8      	it	le
 8011368:	fb01 f909 	mulle.w	r9, r1, r9
 801136c:	e7f5      	b.n	801135a <_strtod_l+0x262>
 801136e:	2d10      	cmp	r5, #16
 8011370:	bfdc      	itt	le
 8011372:	220a      	movle	r2, #10
 8011374:	fb02 3909 	mlale	r9, r2, r9, r3
 8011378:	e7e1      	b.n	801133e <_strtod_l+0x246>
 801137a:	2300      	movs	r3, #0
 801137c:	9307      	str	r3, [sp, #28]
 801137e:	2201      	movs	r2, #1
 8011380:	e77c      	b.n	801127c <_strtod_l+0x184>
 8011382:	f04f 0c00 	mov.w	ip, #0
 8011386:	f108 0302 	add.w	r3, r8, #2
 801138a:	931d      	str	r3, [sp, #116]	; 0x74
 801138c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8011390:	e785      	b.n	801129e <_strtod_l+0x1a6>
 8011392:	f04f 0c01 	mov.w	ip, #1
 8011396:	e7f6      	b.n	8011386 <_strtod_l+0x28e>
 8011398:	08016868 	.word	0x08016868
 801139c:	080166b8 	.word	0x080166b8
 80113a0:	7ff00000 	.word	0x7ff00000
 80113a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80113a6:	1c59      	adds	r1, r3, #1
 80113a8:	911d      	str	r1, [sp, #116]	; 0x74
 80113aa:	785b      	ldrb	r3, [r3, #1]
 80113ac:	2b30      	cmp	r3, #48	; 0x30
 80113ae:	d0f9      	beq.n	80113a4 <_strtod_l+0x2ac>
 80113b0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80113b4:	2908      	cmp	r1, #8
 80113b6:	f63f af79 	bhi.w	80112ac <_strtod_l+0x1b4>
 80113ba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80113be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80113c0:	9308      	str	r3, [sp, #32]
 80113c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80113c4:	1c59      	adds	r1, r3, #1
 80113c6:	911d      	str	r1, [sp, #116]	; 0x74
 80113c8:	785b      	ldrb	r3, [r3, #1]
 80113ca:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80113ce:	2e09      	cmp	r6, #9
 80113d0:	d937      	bls.n	8011442 <_strtod_l+0x34a>
 80113d2:	9e08      	ldr	r6, [sp, #32]
 80113d4:	1b89      	subs	r1, r1, r6
 80113d6:	2908      	cmp	r1, #8
 80113d8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80113dc:	dc02      	bgt.n	80113e4 <_strtod_l+0x2ec>
 80113de:	4576      	cmp	r6, lr
 80113e0:	bfa8      	it	ge
 80113e2:	4676      	movge	r6, lr
 80113e4:	f1bc 0f00 	cmp.w	ip, #0
 80113e8:	d000      	beq.n	80113ec <_strtod_l+0x2f4>
 80113ea:	4276      	negs	r6, r6
 80113ec:	2d00      	cmp	r5, #0
 80113ee:	d14f      	bne.n	8011490 <_strtod_l+0x398>
 80113f0:	9904      	ldr	r1, [sp, #16]
 80113f2:	4301      	orrs	r1, r0
 80113f4:	f47f aec2 	bne.w	801117c <_strtod_l+0x84>
 80113f8:	2a00      	cmp	r2, #0
 80113fa:	f47f aedb 	bne.w	80111b4 <_strtod_l+0xbc>
 80113fe:	2b69      	cmp	r3, #105	; 0x69
 8011400:	d027      	beq.n	8011452 <_strtod_l+0x35a>
 8011402:	dc24      	bgt.n	801144e <_strtod_l+0x356>
 8011404:	2b49      	cmp	r3, #73	; 0x49
 8011406:	d024      	beq.n	8011452 <_strtod_l+0x35a>
 8011408:	2b4e      	cmp	r3, #78	; 0x4e
 801140a:	f47f aed3 	bne.w	80111b4 <_strtod_l+0xbc>
 801140e:	499e      	ldr	r1, [pc, #632]	; (8011688 <_strtod_l+0x590>)
 8011410:	a81d      	add	r0, sp, #116	; 0x74
 8011412:	f002 f8bb 	bl	801358c <__match>
 8011416:	2800      	cmp	r0, #0
 8011418:	f43f aecc 	beq.w	80111b4 <_strtod_l+0xbc>
 801141c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801141e:	781b      	ldrb	r3, [r3, #0]
 8011420:	2b28      	cmp	r3, #40	; 0x28
 8011422:	d12d      	bne.n	8011480 <_strtod_l+0x388>
 8011424:	4999      	ldr	r1, [pc, #612]	; (801168c <_strtod_l+0x594>)
 8011426:	aa20      	add	r2, sp, #128	; 0x80
 8011428:	a81d      	add	r0, sp, #116	; 0x74
 801142a:	f002 f8c3 	bl	80135b4 <__hexnan>
 801142e:	2805      	cmp	r0, #5
 8011430:	d126      	bne.n	8011480 <_strtod_l+0x388>
 8011432:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011434:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8011438:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801143c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011440:	e69c      	b.n	801117c <_strtod_l+0x84>
 8011442:	210a      	movs	r1, #10
 8011444:	fb01 3e0e 	mla	lr, r1, lr, r3
 8011448:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801144c:	e7b9      	b.n	80113c2 <_strtod_l+0x2ca>
 801144e:	2b6e      	cmp	r3, #110	; 0x6e
 8011450:	e7db      	b.n	801140a <_strtod_l+0x312>
 8011452:	498f      	ldr	r1, [pc, #572]	; (8011690 <_strtod_l+0x598>)
 8011454:	a81d      	add	r0, sp, #116	; 0x74
 8011456:	f002 f899 	bl	801358c <__match>
 801145a:	2800      	cmp	r0, #0
 801145c:	f43f aeaa 	beq.w	80111b4 <_strtod_l+0xbc>
 8011460:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011462:	498c      	ldr	r1, [pc, #560]	; (8011694 <_strtod_l+0x59c>)
 8011464:	3b01      	subs	r3, #1
 8011466:	a81d      	add	r0, sp, #116	; 0x74
 8011468:	931d      	str	r3, [sp, #116]	; 0x74
 801146a:	f002 f88f 	bl	801358c <__match>
 801146e:	b910      	cbnz	r0, 8011476 <_strtod_l+0x37e>
 8011470:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011472:	3301      	adds	r3, #1
 8011474:	931d      	str	r3, [sp, #116]	; 0x74
 8011476:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80116a4 <_strtod_l+0x5ac>
 801147a:	f04f 0a00 	mov.w	sl, #0
 801147e:	e67d      	b.n	801117c <_strtod_l+0x84>
 8011480:	4885      	ldr	r0, [pc, #532]	; (8011698 <_strtod_l+0x5a0>)
 8011482:	f003 f8c9 	bl	8014618 <nan>
 8011486:	ed8d 0b04 	vstr	d0, [sp, #16]
 801148a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801148e:	e675      	b.n	801117c <_strtod_l+0x84>
 8011490:	9b07      	ldr	r3, [sp, #28]
 8011492:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011494:	1af3      	subs	r3, r6, r3
 8011496:	2f00      	cmp	r7, #0
 8011498:	bf08      	it	eq
 801149a:	462f      	moveq	r7, r5
 801149c:	2d10      	cmp	r5, #16
 801149e:	9308      	str	r3, [sp, #32]
 80114a0:	46a8      	mov	r8, r5
 80114a2:	bfa8      	it	ge
 80114a4:	f04f 0810 	movge.w	r8, #16
 80114a8:	f7ef f834 	bl	8000514 <__aeabi_ui2d>
 80114ac:	2d09      	cmp	r5, #9
 80114ae:	4682      	mov	sl, r0
 80114b0:	468b      	mov	fp, r1
 80114b2:	dd13      	ble.n	80114dc <_strtod_l+0x3e4>
 80114b4:	4b79      	ldr	r3, [pc, #484]	; (801169c <_strtod_l+0x5a4>)
 80114b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80114ba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80114be:	f7ef f8a3 	bl	8000608 <__aeabi_dmul>
 80114c2:	4682      	mov	sl, r0
 80114c4:	4648      	mov	r0, r9
 80114c6:	468b      	mov	fp, r1
 80114c8:	f7ef f824 	bl	8000514 <__aeabi_ui2d>
 80114cc:	4602      	mov	r2, r0
 80114ce:	460b      	mov	r3, r1
 80114d0:	4650      	mov	r0, sl
 80114d2:	4659      	mov	r1, fp
 80114d4:	f7ee fee2 	bl	800029c <__adddf3>
 80114d8:	4682      	mov	sl, r0
 80114da:	468b      	mov	fp, r1
 80114dc:	2d0f      	cmp	r5, #15
 80114de:	dc38      	bgt.n	8011552 <_strtod_l+0x45a>
 80114e0:	9b08      	ldr	r3, [sp, #32]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	f43f ae4a 	beq.w	801117c <_strtod_l+0x84>
 80114e8:	dd24      	ble.n	8011534 <_strtod_l+0x43c>
 80114ea:	2b16      	cmp	r3, #22
 80114ec:	dc0b      	bgt.n	8011506 <_strtod_l+0x40e>
 80114ee:	4d6b      	ldr	r5, [pc, #428]	; (801169c <_strtod_l+0x5a4>)
 80114f0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80114f4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80114f8:	4652      	mov	r2, sl
 80114fa:	465b      	mov	r3, fp
 80114fc:	f7ef f884 	bl	8000608 <__aeabi_dmul>
 8011500:	4682      	mov	sl, r0
 8011502:	468b      	mov	fp, r1
 8011504:	e63a      	b.n	801117c <_strtod_l+0x84>
 8011506:	9a08      	ldr	r2, [sp, #32]
 8011508:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801150c:	4293      	cmp	r3, r2
 801150e:	db20      	blt.n	8011552 <_strtod_l+0x45a>
 8011510:	4c62      	ldr	r4, [pc, #392]	; (801169c <_strtod_l+0x5a4>)
 8011512:	f1c5 050f 	rsb	r5, r5, #15
 8011516:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801151a:	4652      	mov	r2, sl
 801151c:	465b      	mov	r3, fp
 801151e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011522:	f7ef f871 	bl	8000608 <__aeabi_dmul>
 8011526:	9b08      	ldr	r3, [sp, #32]
 8011528:	1b5d      	subs	r5, r3, r5
 801152a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801152e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011532:	e7e3      	b.n	80114fc <_strtod_l+0x404>
 8011534:	9b08      	ldr	r3, [sp, #32]
 8011536:	3316      	adds	r3, #22
 8011538:	db0b      	blt.n	8011552 <_strtod_l+0x45a>
 801153a:	9b07      	ldr	r3, [sp, #28]
 801153c:	4a57      	ldr	r2, [pc, #348]	; (801169c <_strtod_l+0x5a4>)
 801153e:	1b9e      	subs	r6, r3, r6
 8011540:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8011544:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011548:	4650      	mov	r0, sl
 801154a:	4659      	mov	r1, fp
 801154c:	f7ef f986 	bl	800085c <__aeabi_ddiv>
 8011550:	e7d6      	b.n	8011500 <_strtod_l+0x408>
 8011552:	9b08      	ldr	r3, [sp, #32]
 8011554:	eba5 0808 	sub.w	r8, r5, r8
 8011558:	4498      	add	r8, r3
 801155a:	f1b8 0f00 	cmp.w	r8, #0
 801155e:	dd71      	ble.n	8011644 <_strtod_l+0x54c>
 8011560:	f018 030f 	ands.w	r3, r8, #15
 8011564:	d00a      	beq.n	801157c <_strtod_l+0x484>
 8011566:	494d      	ldr	r1, [pc, #308]	; (801169c <_strtod_l+0x5a4>)
 8011568:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801156c:	4652      	mov	r2, sl
 801156e:	465b      	mov	r3, fp
 8011570:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011574:	f7ef f848 	bl	8000608 <__aeabi_dmul>
 8011578:	4682      	mov	sl, r0
 801157a:	468b      	mov	fp, r1
 801157c:	f038 080f 	bics.w	r8, r8, #15
 8011580:	d04d      	beq.n	801161e <_strtod_l+0x526>
 8011582:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8011586:	dd22      	ble.n	80115ce <_strtod_l+0x4d6>
 8011588:	2500      	movs	r5, #0
 801158a:	462e      	mov	r6, r5
 801158c:	9509      	str	r5, [sp, #36]	; 0x24
 801158e:	9507      	str	r5, [sp, #28]
 8011590:	2322      	movs	r3, #34	; 0x22
 8011592:	f8df b110 	ldr.w	fp, [pc, #272]	; 80116a4 <_strtod_l+0x5ac>
 8011596:	6023      	str	r3, [r4, #0]
 8011598:	f04f 0a00 	mov.w	sl, #0
 801159c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801159e:	2b00      	cmp	r3, #0
 80115a0:	f43f adec 	beq.w	801117c <_strtod_l+0x84>
 80115a4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80115a6:	4620      	mov	r0, r4
 80115a8:	f002 f980 	bl	80138ac <_Bfree>
 80115ac:	9907      	ldr	r1, [sp, #28]
 80115ae:	4620      	mov	r0, r4
 80115b0:	f002 f97c 	bl	80138ac <_Bfree>
 80115b4:	4631      	mov	r1, r6
 80115b6:	4620      	mov	r0, r4
 80115b8:	f002 f978 	bl	80138ac <_Bfree>
 80115bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80115be:	4620      	mov	r0, r4
 80115c0:	f002 f974 	bl	80138ac <_Bfree>
 80115c4:	4629      	mov	r1, r5
 80115c6:	4620      	mov	r0, r4
 80115c8:	f002 f970 	bl	80138ac <_Bfree>
 80115cc:	e5d6      	b.n	801117c <_strtod_l+0x84>
 80115ce:	2300      	movs	r3, #0
 80115d0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80115d4:	4650      	mov	r0, sl
 80115d6:	4659      	mov	r1, fp
 80115d8:	4699      	mov	r9, r3
 80115da:	f1b8 0f01 	cmp.w	r8, #1
 80115de:	dc21      	bgt.n	8011624 <_strtod_l+0x52c>
 80115e0:	b10b      	cbz	r3, 80115e6 <_strtod_l+0x4ee>
 80115e2:	4682      	mov	sl, r0
 80115e4:	468b      	mov	fp, r1
 80115e6:	4b2e      	ldr	r3, [pc, #184]	; (80116a0 <_strtod_l+0x5a8>)
 80115e8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80115ec:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80115f0:	4652      	mov	r2, sl
 80115f2:	465b      	mov	r3, fp
 80115f4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80115f8:	f7ef f806 	bl	8000608 <__aeabi_dmul>
 80115fc:	4b29      	ldr	r3, [pc, #164]	; (80116a4 <_strtod_l+0x5ac>)
 80115fe:	460a      	mov	r2, r1
 8011600:	400b      	ands	r3, r1
 8011602:	4929      	ldr	r1, [pc, #164]	; (80116a8 <_strtod_l+0x5b0>)
 8011604:	428b      	cmp	r3, r1
 8011606:	4682      	mov	sl, r0
 8011608:	d8be      	bhi.n	8011588 <_strtod_l+0x490>
 801160a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801160e:	428b      	cmp	r3, r1
 8011610:	bf86      	itte	hi
 8011612:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80116ac <_strtod_l+0x5b4>
 8011616:	f04f 3aff 	movhi.w	sl, #4294967295
 801161a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801161e:	2300      	movs	r3, #0
 8011620:	9304      	str	r3, [sp, #16]
 8011622:	e081      	b.n	8011728 <_strtod_l+0x630>
 8011624:	f018 0f01 	tst.w	r8, #1
 8011628:	d007      	beq.n	801163a <_strtod_l+0x542>
 801162a:	4b1d      	ldr	r3, [pc, #116]	; (80116a0 <_strtod_l+0x5a8>)
 801162c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8011630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011634:	f7ee ffe8 	bl	8000608 <__aeabi_dmul>
 8011638:	2301      	movs	r3, #1
 801163a:	f109 0901 	add.w	r9, r9, #1
 801163e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011642:	e7ca      	b.n	80115da <_strtod_l+0x4e2>
 8011644:	d0eb      	beq.n	801161e <_strtod_l+0x526>
 8011646:	f1c8 0800 	rsb	r8, r8, #0
 801164a:	f018 020f 	ands.w	r2, r8, #15
 801164e:	d00a      	beq.n	8011666 <_strtod_l+0x56e>
 8011650:	4b12      	ldr	r3, [pc, #72]	; (801169c <_strtod_l+0x5a4>)
 8011652:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011656:	4650      	mov	r0, sl
 8011658:	4659      	mov	r1, fp
 801165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801165e:	f7ef f8fd 	bl	800085c <__aeabi_ddiv>
 8011662:	4682      	mov	sl, r0
 8011664:	468b      	mov	fp, r1
 8011666:	ea5f 1828 	movs.w	r8, r8, asr #4
 801166a:	d0d8      	beq.n	801161e <_strtod_l+0x526>
 801166c:	f1b8 0f1f 	cmp.w	r8, #31
 8011670:	dd1e      	ble.n	80116b0 <_strtod_l+0x5b8>
 8011672:	2500      	movs	r5, #0
 8011674:	462e      	mov	r6, r5
 8011676:	9509      	str	r5, [sp, #36]	; 0x24
 8011678:	9507      	str	r5, [sp, #28]
 801167a:	2322      	movs	r3, #34	; 0x22
 801167c:	f04f 0a00 	mov.w	sl, #0
 8011680:	f04f 0b00 	mov.w	fp, #0
 8011684:	6023      	str	r3, [r4, #0]
 8011686:	e789      	b.n	801159c <_strtod_l+0x4a4>
 8011688:	0801668a 	.word	0x0801668a
 801168c:	080166cc 	.word	0x080166cc
 8011690:	08016682 	.word	0x08016682
 8011694:	0801670b 	.word	0x0801670b
 8011698:	08016563 	.word	0x08016563
 801169c:	08016908 	.word	0x08016908
 80116a0:	080168e0 	.word	0x080168e0
 80116a4:	7ff00000 	.word	0x7ff00000
 80116a8:	7ca00000 	.word	0x7ca00000
 80116ac:	7fefffff 	.word	0x7fefffff
 80116b0:	f018 0310 	ands.w	r3, r8, #16
 80116b4:	bf18      	it	ne
 80116b6:	236a      	movne	r3, #106	; 0x6a
 80116b8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8011a70 <_strtod_l+0x978>
 80116bc:	9304      	str	r3, [sp, #16]
 80116be:	4650      	mov	r0, sl
 80116c0:	4659      	mov	r1, fp
 80116c2:	2300      	movs	r3, #0
 80116c4:	f018 0f01 	tst.w	r8, #1
 80116c8:	d004      	beq.n	80116d4 <_strtod_l+0x5dc>
 80116ca:	e9d9 2300 	ldrd	r2, r3, [r9]
 80116ce:	f7ee ff9b 	bl	8000608 <__aeabi_dmul>
 80116d2:	2301      	movs	r3, #1
 80116d4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80116d8:	f109 0908 	add.w	r9, r9, #8
 80116dc:	d1f2      	bne.n	80116c4 <_strtod_l+0x5cc>
 80116de:	b10b      	cbz	r3, 80116e4 <_strtod_l+0x5ec>
 80116e0:	4682      	mov	sl, r0
 80116e2:	468b      	mov	fp, r1
 80116e4:	9b04      	ldr	r3, [sp, #16]
 80116e6:	b1bb      	cbz	r3, 8011718 <_strtod_l+0x620>
 80116e8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80116ec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	4659      	mov	r1, fp
 80116f4:	dd10      	ble.n	8011718 <_strtod_l+0x620>
 80116f6:	2b1f      	cmp	r3, #31
 80116f8:	f340 8128 	ble.w	801194c <_strtod_l+0x854>
 80116fc:	2b34      	cmp	r3, #52	; 0x34
 80116fe:	bfde      	ittt	le
 8011700:	3b20      	suble	r3, #32
 8011702:	f04f 32ff 	movle.w	r2, #4294967295
 8011706:	fa02 f303 	lslle.w	r3, r2, r3
 801170a:	f04f 0a00 	mov.w	sl, #0
 801170e:	bfcc      	ite	gt
 8011710:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011714:	ea03 0b01 	andle.w	fp, r3, r1
 8011718:	2200      	movs	r2, #0
 801171a:	2300      	movs	r3, #0
 801171c:	4650      	mov	r0, sl
 801171e:	4659      	mov	r1, fp
 8011720:	f7ef f9da 	bl	8000ad8 <__aeabi_dcmpeq>
 8011724:	2800      	cmp	r0, #0
 8011726:	d1a4      	bne.n	8011672 <_strtod_l+0x57a>
 8011728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801172a:	9300      	str	r3, [sp, #0]
 801172c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801172e:	462b      	mov	r3, r5
 8011730:	463a      	mov	r2, r7
 8011732:	4620      	mov	r0, r4
 8011734:	f002 f926 	bl	8013984 <__s2b>
 8011738:	9009      	str	r0, [sp, #36]	; 0x24
 801173a:	2800      	cmp	r0, #0
 801173c:	f43f af24 	beq.w	8011588 <_strtod_l+0x490>
 8011740:	9b07      	ldr	r3, [sp, #28]
 8011742:	1b9e      	subs	r6, r3, r6
 8011744:	9b08      	ldr	r3, [sp, #32]
 8011746:	2b00      	cmp	r3, #0
 8011748:	bfb4      	ite	lt
 801174a:	4633      	movlt	r3, r6
 801174c:	2300      	movge	r3, #0
 801174e:	9310      	str	r3, [sp, #64]	; 0x40
 8011750:	9b08      	ldr	r3, [sp, #32]
 8011752:	2500      	movs	r5, #0
 8011754:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011758:	9318      	str	r3, [sp, #96]	; 0x60
 801175a:	462e      	mov	r6, r5
 801175c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801175e:	4620      	mov	r0, r4
 8011760:	6859      	ldr	r1, [r3, #4]
 8011762:	f002 f863 	bl	801382c <_Balloc>
 8011766:	9007      	str	r0, [sp, #28]
 8011768:	2800      	cmp	r0, #0
 801176a:	f43f af11 	beq.w	8011590 <_strtod_l+0x498>
 801176e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011770:	691a      	ldr	r2, [r3, #16]
 8011772:	3202      	adds	r2, #2
 8011774:	f103 010c 	add.w	r1, r3, #12
 8011778:	0092      	lsls	r2, r2, #2
 801177a:	300c      	adds	r0, #12
 801177c:	f7fe fc76 	bl	801006c <memcpy>
 8011780:	ec4b ab10 	vmov	d0, sl, fp
 8011784:	aa20      	add	r2, sp, #128	; 0x80
 8011786:	a91f      	add	r1, sp, #124	; 0x7c
 8011788:	4620      	mov	r0, r4
 801178a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801178e:	f002 fc35 	bl	8013ffc <__d2b>
 8011792:	901e      	str	r0, [sp, #120]	; 0x78
 8011794:	2800      	cmp	r0, #0
 8011796:	f43f aefb 	beq.w	8011590 <_strtod_l+0x498>
 801179a:	2101      	movs	r1, #1
 801179c:	4620      	mov	r0, r4
 801179e:	f002 f98b 	bl	8013ab8 <__i2b>
 80117a2:	4606      	mov	r6, r0
 80117a4:	2800      	cmp	r0, #0
 80117a6:	f43f aef3 	beq.w	8011590 <_strtod_l+0x498>
 80117aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80117ac:	9904      	ldr	r1, [sp, #16]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	bfab      	itete	ge
 80117b2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80117b4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80117b6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80117b8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80117bc:	bfac      	ite	ge
 80117be:	eb03 0902 	addge.w	r9, r3, r2
 80117c2:	1ad7      	sublt	r7, r2, r3
 80117c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80117c6:	eba3 0801 	sub.w	r8, r3, r1
 80117ca:	4490      	add	r8, r2
 80117cc:	4ba3      	ldr	r3, [pc, #652]	; (8011a5c <_strtod_l+0x964>)
 80117ce:	f108 38ff 	add.w	r8, r8, #4294967295
 80117d2:	4598      	cmp	r8, r3
 80117d4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80117d8:	f280 80cc 	bge.w	8011974 <_strtod_l+0x87c>
 80117dc:	eba3 0308 	sub.w	r3, r3, r8
 80117e0:	2b1f      	cmp	r3, #31
 80117e2:	eba2 0203 	sub.w	r2, r2, r3
 80117e6:	f04f 0101 	mov.w	r1, #1
 80117ea:	f300 80b6 	bgt.w	801195a <_strtod_l+0x862>
 80117ee:	fa01 f303 	lsl.w	r3, r1, r3
 80117f2:	9311      	str	r3, [sp, #68]	; 0x44
 80117f4:	2300      	movs	r3, #0
 80117f6:	930c      	str	r3, [sp, #48]	; 0x30
 80117f8:	eb09 0802 	add.w	r8, r9, r2
 80117fc:	9b04      	ldr	r3, [sp, #16]
 80117fe:	45c1      	cmp	r9, r8
 8011800:	4417      	add	r7, r2
 8011802:	441f      	add	r7, r3
 8011804:	464b      	mov	r3, r9
 8011806:	bfa8      	it	ge
 8011808:	4643      	movge	r3, r8
 801180a:	42bb      	cmp	r3, r7
 801180c:	bfa8      	it	ge
 801180e:	463b      	movge	r3, r7
 8011810:	2b00      	cmp	r3, #0
 8011812:	bfc2      	ittt	gt
 8011814:	eba8 0803 	subgt.w	r8, r8, r3
 8011818:	1aff      	subgt	r7, r7, r3
 801181a:	eba9 0903 	subgt.w	r9, r9, r3
 801181e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011820:	2b00      	cmp	r3, #0
 8011822:	dd17      	ble.n	8011854 <_strtod_l+0x75c>
 8011824:	4631      	mov	r1, r6
 8011826:	461a      	mov	r2, r3
 8011828:	4620      	mov	r0, r4
 801182a:	f002 fa01 	bl	8013c30 <__pow5mult>
 801182e:	4606      	mov	r6, r0
 8011830:	2800      	cmp	r0, #0
 8011832:	f43f aead 	beq.w	8011590 <_strtod_l+0x498>
 8011836:	4601      	mov	r1, r0
 8011838:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801183a:	4620      	mov	r0, r4
 801183c:	f002 f952 	bl	8013ae4 <__multiply>
 8011840:	900f      	str	r0, [sp, #60]	; 0x3c
 8011842:	2800      	cmp	r0, #0
 8011844:	f43f aea4 	beq.w	8011590 <_strtod_l+0x498>
 8011848:	991e      	ldr	r1, [sp, #120]	; 0x78
 801184a:	4620      	mov	r0, r4
 801184c:	f002 f82e 	bl	80138ac <_Bfree>
 8011850:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011852:	931e      	str	r3, [sp, #120]	; 0x78
 8011854:	f1b8 0f00 	cmp.w	r8, #0
 8011858:	f300 8091 	bgt.w	801197e <_strtod_l+0x886>
 801185c:	9b08      	ldr	r3, [sp, #32]
 801185e:	2b00      	cmp	r3, #0
 8011860:	dd08      	ble.n	8011874 <_strtod_l+0x77c>
 8011862:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011864:	9907      	ldr	r1, [sp, #28]
 8011866:	4620      	mov	r0, r4
 8011868:	f002 f9e2 	bl	8013c30 <__pow5mult>
 801186c:	9007      	str	r0, [sp, #28]
 801186e:	2800      	cmp	r0, #0
 8011870:	f43f ae8e 	beq.w	8011590 <_strtod_l+0x498>
 8011874:	2f00      	cmp	r7, #0
 8011876:	dd08      	ble.n	801188a <_strtod_l+0x792>
 8011878:	9907      	ldr	r1, [sp, #28]
 801187a:	463a      	mov	r2, r7
 801187c:	4620      	mov	r0, r4
 801187e:	f002 fa31 	bl	8013ce4 <__lshift>
 8011882:	9007      	str	r0, [sp, #28]
 8011884:	2800      	cmp	r0, #0
 8011886:	f43f ae83 	beq.w	8011590 <_strtod_l+0x498>
 801188a:	f1b9 0f00 	cmp.w	r9, #0
 801188e:	dd08      	ble.n	80118a2 <_strtod_l+0x7aa>
 8011890:	4631      	mov	r1, r6
 8011892:	464a      	mov	r2, r9
 8011894:	4620      	mov	r0, r4
 8011896:	f002 fa25 	bl	8013ce4 <__lshift>
 801189a:	4606      	mov	r6, r0
 801189c:	2800      	cmp	r0, #0
 801189e:	f43f ae77 	beq.w	8011590 <_strtod_l+0x498>
 80118a2:	9a07      	ldr	r2, [sp, #28]
 80118a4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80118a6:	4620      	mov	r0, r4
 80118a8:	f002 faa4 	bl	8013df4 <__mdiff>
 80118ac:	4605      	mov	r5, r0
 80118ae:	2800      	cmp	r0, #0
 80118b0:	f43f ae6e 	beq.w	8011590 <_strtod_l+0x498>
 80118b4:	68c3      	ldr	r3, [r0, #12]
 80118b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80118b8:	2300      	movs	r3, #0
 80118ba:	60c3      	str	r3, [r0, #12]
 80118bc:	4631      	mov	r1, r6
 80118be:	f002 fa7d 	bl	8013dbc <__mcmp>
 80118c2:	2800      	cmp	r0, #0
 80118c4:	da65      	bge.n	8011992 <_strtod_l+0x89a>
 80118c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80118c8:	ea53 030a 	orrs.w	r3, r3, sl
 80118cc:	f040 8087 	bne.w	80119de <_strtod_l+0x8e6>
 80118d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	f040 8082 	bne.w	80119de <_strtod_l+0x8e6>
 80118da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80118de:	0d1b      	lsrs	r3, r3, #20
 80118e0:	051b      	lsls	r3, r3, #20
 80118e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80118e6:	d97a      	bls.n	80119de <_strtod_l+0x8e6>
 80118e8:	696b      	ldr	r3, [r5, #20]
 80118ea:	b913      	cbnz	r3, 80118f2 <_strtod_l+0x7fa>
 80118ec:	692b      	ldr	r3, [r5, #16]
 80118ee:	2b01      	cmp	r3, #1
 80118f0:	dd75      	ble.n	80119de <_strtod_l+0x8e6>
 80118f2:	4629      	mov	r1, r5
 80118f4:	2201      	movs	r2, #1
 80118f6:	4620      	mov	r0, r4
 80118f8:	f002 f9f4 	bl	8013ce4 <__lshift>
 80118fc:	4631      	mov	r1, r6
 80118fe:	4605      	mov	r5, r0
 8011900:	f002 fa5c 	bl	8013dbc <__mcmp>
 8011904:	2800      	cmp	r0, #0
 8011906:	dd6a      	ble.n	80119de <_strtod_l+0x8e6>
 8011908:	9904      	ldr	r1, [sp, #16]
 801190a:	4a55      	ldr	r2, [pc, #340]	; (8011a60 <_strtod_l+0x968>)
 801190c:	465b      	mov	r3, fp
 801190e:	2900      	cmp	r1, #0
 8011910:	f000 8085 	beq.w	8011a1e <_strtod_l+0x926>
 8011914:	ea02 010b 	and.w	r1, r2, fp
 8011918:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801191c:	dc7f      	bgt.n	8011a1e <_strtod_l+0x926>
 801191e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011922:	f77f aeaa 	ble.w	801167a <_strtod_l+0x582>
 8011926:	4a4f      	ldr	r2, [pc, #316]	; (8011a64 <_strtod_l+0x96c>)
 8011928:	2300      	movs	r3, #0
 801192a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801192e:	4650      	mov	r0, sl
 8011930:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8011934:	4659      	mov	r1, fp
 8011936:	f7ee fe67 	bl	8000608 <__aeabi_dmul>
 801193a:	460b      	mov	r3, r1
 801193c:	4303      	orrs	r3, r0
 801193e:	bf08      	it	eq
 8011940:	2322      	moveq	r3, #34	; 0x22
 8011942:	4682      	mov	sl, r0
 8011944:	468b      	mov	fp, r1
 8011946:	bf08      	it	eq
 8011948:	6023      	streq	r3, [r4, #0]
 801194a:	e62b      	b.n	80115a4 <_strtod_l+0x4ac>
 801194c:	f04f 32ff 	mov.w	r2, #4294967295
 8011950:	fa02 f303 	lsl.w	r3, r2, r3
 8011954:	ea03 0a0a 	and.w	sl, r3, sl
 8011958:	e6de      	b.n	8011718 <_strtod_l+0x620>
 801195a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801195e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8011962:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8011966:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801196a:	fa01 f308 	lsl.w	r3, r1, r8
 801196e:	930c      	str	r3, [sp, #48]	; 0x30
 8011970:	9111      	str	r1, [sp, #68]	; 0x44
 8011972:	e741      	b.n	80117f8 <_strtod_l+0x700>
 8011974:	2300      	movs	r3, #0
 8011976:	930c      	str	r3, [sp, #48]	; 0x30
 8011978:	2301      	movs	r3, #1
 801197a:	9311      	str	r3, [sp, #68]	; 0x44
 801197c:	e73c      	b.n	80117f8 <_strtod_l+0x700>
 801197e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011980:	4642      	mov	r2, r8
 8011982:	4620      	mov	r0, r4
 8011984:	f002 f9ae 	bl	8013ce4 <__lshift>
 8011988:	901e      	str	r0, [sp, #120]	; 0x78
 801198a:	2800      	cmp	r0, #0
 801198c:	f47f af66 	bne.w	801185c <_strtod_l+0x764>
 8011990:	e5fe      	b.n	8011590 <_strtod_l+0x498>
 8011992:	465f      	mov	r7, fp
 8011994:	d16e      	bne.n	8011a74 <_strtod_l+0x97c>
 8011996:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011998:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801199c:	b342      	cbz	r2, 80119f0 <_strtod_l+0x8f8>
 801199e:	4a32      	ldr	r2, [pc, #200]	; (8011a68 <_strtod_l+0x970>)
 80119a0:	4293      	cmp	r3, r2
 80119a2:	d128      	bne.n	80119f6 <_strtod_l+0x8fe>
 80119a4:	9b04      	ldr	r3, [sp, #16]
 80119a6:	4650      	mov	r0, sl
 80119a8:	b1eb      	cbz	r3, 80119e6 <_strtod_l+0x8ee>
 80119aa:	4a2d      	ldr	r2, [pc, #180]	; (8011a60 <_strtod_l+0x968>)
 80119ac:	403a      	ands	r2, r7
 80119ae:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80119b2:	f04f 31ff 	mov.w	r1, #4294967295
 80119b6:	d819      	bhi.n	80119ec <_strtod_l+0x8f4>
 80119b8:	0d12      	lsrs	r2, r2, #20
 80119ba:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80119be:	fa01 f303 	lsl.w	r3, r1, r3
 80119c2:	4298      	cmp	r0, r3
 80119c4:	d117      	bne.n	80119f6 <_strtod_l+0x8fe>
 80119c6:	4b29      	ldr	r3, [pc, #164]	; (8011a6c <_strtod_l+0x974>)
 80119c8:	429f      	cmp	r7, r3
 80119ca:	d102      	bne.n	80119d2 <_strtod_l+0x8da>
 80119cc:	3001      	adds	r0, #1
 80119ce:	f43f addf 	beq.w	8011590 <_strtod_l+0x498>
 80119d2:	4b23      	ldr	r3, [pc, #140]	; (8011a60 <_strtod_l+0x968>)
 80119d4:	403b      	ands	r3, r7
 80119d6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80119da:	f04f 0a00 	mov.w	sl, #0
 80119de:	9b04      	ldr	r3, [sp, #16]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d1a0      	bne.n	8011926 <_strtod_l+0x82e>
 80119e4:	e5de      	b.n	80115a4 <_strtod_l+0x4ac>
 80119e6:	f04f 33ff 	mov.w	r3, #4294967295
 80119ea:	e7ea      	b.n	80119c2 <_strtod_l+0x8ca>
 80119ec:	460b      	mov	r3, r1
 80119ee:	e7e8      	b.n	80119c2 <_strtod_l+0x8ca>
 80119f0:	ea53 030a 	orrs.w	r3, r3, sl
 80119f4:	d088      	beq.n	8011908 <_strtod_l+0x810>
 80119f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80119f8:	b1db      	cbz	r3, 8011a32 <_strtod_l+0x93a>
 80119fa:	423b      	tst	r3, r7
 80119fc:	d0ef      	beq.n	80119de <_strtod_l+0x8e6>
 80119fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011a00:	9a04      	ldr	r2, [sp, #16]
 8011a02:	4650      	mov	r0, sl
 8011a04:	4659      	mov	r1, fp
 8011a06:	b1c3      	cbz	r3, 8011a3a <_strtod_l+0x942>
 8011a08:	f7ff fb58 	bl	80110bc <sulp>
 8011a0c:	4602      	mov	r2, r0
 8011a0e:	460b      	mov	r3, r1
 8011a10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011a14:	f7ee fc42 	bl	800029c <__adddf3>
 8011a18:	4682      	mov	sl, r0
 8011a1a:	468b      	mov	fp, r1
 8011a1c:	e7df      	b.n	80119de <_strtod_l+0x8e6>
 8011a1e:	4013      	ands	r3, r2
 8011a20:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011a24:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011a28:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011a2c:	f04f 3aff 	mov.w	sl, #4294967295
 8011a30:	e7d5      	b.n	80119de <_strtod_l+0x8e6>
 8011a32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011a34:	ea13 0f0a 	tst.w	r3, sl
 8011a38:	e7e0      	b.n	80119fc <_strtod_l+0x904>
 8011a3a:	f7ff fb3f 	bl	80110bc <sulp>
 8011a3e:	4602      	mov	r2, r0
 8011a40:	460b      	mov	r3, r1
 8011a42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011a46:	f7ee fc27 	bl	8000298 <__aeabi_dsub>
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	4682      	mov	sl, r0
 8011a50:	468b      	mov	fp, r1
 8011a52:	f7ef f841 	bl	8000ad8 <__aeabi_dcmpeq>
 8011a56:	2800      	cmp	r0, #0
 8011a58:	d0c1      	beq.n	80119de <_strtod_l+0x8e6>
 8011a5a:	e60e      	b.n	801167a <_strtod_l+0x582>
 8011a5c:	fffffc02 	.word	0xfffffc02
 8011a60:	7ff00000 	.word	0x7ff00000
 8011a64:	39500000 	.word	0x39500000
 8011a68:	000fffff 	.word	0x000fffff
 8011a6c:	7fefffff 	.word	0x7fefffff
 8011a70:	080166e0 	.word	0x080166e0
 8011a74:	4631      	mov	r1, r6
 8011a76:	4628      	mov	r0, r5
 8011a78:	f002 fb1c 	bl	80140b4 <__ratio>
 8011a7c:	ec59 8b10 	vmov	r8, r9, d0
 8011a80:	ee10 0a10 	vmov	r0, s0
 8011a84:	2200      	movs	r2, #0
 8011a86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011a8a:	4649      	mov	r1, r9
 8011a8c:	f7ef f838 	bl	8000b00 <__aeabi_dcmple>
 8011a90:	2800      	cmp	r0, #0
 8011a92:	d07c      	beq.n	8011b8e <_strtod_l+0xa96>
 8011a94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d04c      	beq.n	8011b34 <_strtod_l+0xa3c>
 8011a9a:	4b95      	ldr	r3, [pc, #596]	; (8011cf0 <_strtod_l+0xbf8>)
 8011a9c:	2200      	movs	r2, #0
 8011a9e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011aa2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8011cf0 <_strtod_l+0xbf8>
 8011aa6:	f04f 0800 	mov.w	r8, #0
 8011aaa:	4b92      	ldr	r3, [pc, #584]	; (8011cf4 <_strtod_l+0xbfc>)
 8011aac:	403b      	ands	r3, r7
 8011aae:	9311      	str	r3, [sp, #68]	; 0x44
 8011ab0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011ab2:	4b91      	ldr	r3, [pc, #580]	; (8011cf8 <_strtod_l+0xc00>)
 8011ab4:	429a      	cmp	r2, r3
 8011ab6:	f040 80b2 	bne.w	8011c1e <_strtod_l+0xb26>
 8011aba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011abe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011ac2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8011ac6:	ec4b ab10 	vmov	d0, sl, fp
 8011aca:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8011ace:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011ad2:	f002 fa17 	bl	8013f04 <__ulp>
 8011ad6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011ada:	ec53 2b10 	vmov	r2, r3, d0
 8011ade:	f7ee fd93 	bl	8000608 <__aeabi_dmul>
 8011ae2:	4652      	mov	r2, sl
 8011ae4:	465b      	mov	r3, fp
 8011ae6:	f7ee fbd9 	bl	800029c <__adddf3>
 8011aea:	460b      	mov	r3, r1
 8011aec:	4981      	ldr	r1, [pc, #516]	; (8011cf4 <_strtod_l+0xbfc>)
 8011aee:	4a83      	ldr	r2, [pc, #524]	; (8011cfc <_strtod_l+0xc04>)
 8011af0:	4019      	ands	r1, r3
 8011af2:	4291      	cmp	r1, r2
 8011af4:	4682      	mov	sl, r0
 8011af6:	d95e      	bls.n	8011bb6 <_strtod_l+0xabe>
 8011af8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011afa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8011afe:	4293      	cmp	r3, r2
 8011b00:	d103      	bne.n	8011b0a <_strtod_l+0xa12>
 8011b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b04:	3301      	adds	r3, #1
 8011b06:	f43f ad43 	beq.w	8011590 <_strtod_l+0x498>
 8011b0a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8011d08 <_strtod_l+0xc10>
 8011b0e:	f04f 3aff 	mov.w	sl, #4294967295
 8011b12:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011b14:	4620      	mov	r0, r4
 8011b16:	f001 fec9 	bl	80138ac <_Bfree>
 8011b1a:	9907      	ldr	r1, [sp, #28]
 8011b1c:	4620      	mov	r0, r4
 8011b1e:	f001 fec5 	bl	80138ac <_Bfree>
 8011b22:	4631      	mov	r1, r6
 8011b24:	4620      	mov	r0, r4
 8011b26:	f001 fec1 	bl	80138ac <_Bfree>
 8011b2a:	4629      	mov	r1, r5
 8011b2c:	4620      	mov	r0, r4
 8011b2e:	f001 febd 	bl	80138ac <_Bfree>
 8011b32:	e613      	b.n	801175c <_strtod_l+0x664>
 8011b34:	f1ba 0f00 	cmp.w	sl, #0
 8011b38:	d11b      	bne.n	8011b72 <_strtod_l+0xa7a>
 8011b3a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011b3e:	b9f3      	cbnz	r3, 8011b7e <_strtod_l+0xa86>
 8011b40:	4b6b      	ldr	r3, [pc, #428]	; (8011cf0 <_strtod_l+0xbf8>)
 8011b42:	2200      	movs	r2, #0
 8011b44:	4640      	mov	r0, r8
 8011b46:	4649      	mov	r1, r9
 8011b48:	f7ee ffd0 	bl	8000aec <__aeabi_dcmplt>
 8011b4c:	b9d0      	cbnz	r0, 8011b84 <_strtod_l+0xa8c>
 8011b4e:	4640      	mov	r0, r8
 8011b50:	4649      	mov	r1, r9
 8011b52:	4b6b      	ldr	r3, [pc, #428]	; (8011d00 <_strtod_l+0xc08>)
 8011b54:	2200      	movs	r2, #0
 8011b56:	f7ee fd57 	bl	8000608 <__aeabi_dmul>
 8011b5a:	4680      	mov	r8, r0
 8011b5c:	4689      	mov	r9, r1
 8011b5e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011b62:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8011b66:	931b      	str	r3, [sp, #108]	; 0x6c
 8011b68:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8011b6c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011b70:	e79b      	b.n	8011aaa <_strtod_l+0x9b2>
 8011b72:	f1ba 0f01 	cmp.w	sl, #1
 8011b76:	d102      	bne.n	8011b7e <_strtod_l+0xa86>
 8011b78:	2f00      	cmp	r7, #0
 8011b7a:	f43f ad7e 	beq.w	801167a <_strtod_l+0x582>
 8011b7e:	4b61      	ldr	r3, [pc, #388]	; (8011d04 <_strtod_l+0xc0c>)
 8011b80:	2200      	movs	r2, #0
 8011b82:	e78c      	b.n	8011a9e <_strtod_l+0x9a6>
 8011b84:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8011d00 <_strtod_l+0xc08>
 8011b88:	f04f 0800 	mov.w	r8, #0
 8011b8c:	e7e7      	b.n	8011b5e <_strtod_l+0xa66>
 8011b8e:	4b5c      	ldr	r3, [pc, #368]	; (8011d00 <_strtod_l+0xc08>)
 8011b90:	4640      	mov	r0, r8
 8011b92:	4649      	mov	r1, r9
 8011b94:	2200      	movs	r2, #0
 8011b96:	f7ee fd37 	bl	8000608 <__aeabi_dmul>
 8011b9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011b9c:	4680      	mov	r8, r0
 8011b9e:	4689      	mov	r9, r1
 8011ba0:	b933      	cbnz	r3, 8011bb0 <_strtod_l+0xab8>
 8011ba2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011ba6:	9012      	str	r0, [sp, #72]	; 0x48
 8011ba8:	9313      	str	r3, [sp, #76]	; 0x4c
 8011baa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8011bae:	e7dd      	b.n	8011b6c <_strtod_l+0xa74>
 8011bb0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8011bb4:	e7f9      	b.n	8011baa <_strtod_l+0xab2>
 8011bb6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8011bba:	9b04      	ldr	r3, [sp, #16]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d1a8      	bne.n	8011b12 <_strtod_l+0xa1a>
 8011bc0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011bc4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011bc6:	0d1b      	lsrs	r3, r3, #20
 8011bc8:	051b      	lsls	r3, r3, #20
 8011bca:	429a      	cmp	r2, r3
 8011bcc:	d1a1      	bne.n	8011b12 <_strtod_l+0xa1a>
 8011bce:	4640      	mov	r0, r8
 8011bd0:	4649      	mov	r1, r9
 8011bd2:	f7ef f879 	bl	8000cc8 <__aeabi_d2lz>
 8011bd6:	f7ee fce9 	bl	80005ac <__aeabi_l2d>
 8011bda:	4602      	mov	r2, r0
 8011bdc:	460b      	mov	r3, r1
 8011bde:	4640      	mov	r0, r8
 8011be0:	4649      	mov	r1, r9
 8011be2:	f7ee fb59 	bl	8000298 <__aeabi_dsub>
 8011be6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011be8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011bec:	ea43 030a 	orr.w	r3, r3, sl
 8011bf0:	4313      	orrs	r3, r2
 8011bf2:	4680      	mov	r8, r0
 8011bf4:	4689      	mov	r9, r1
 8011bf6:	d053      	beq.n	8011ca0 <_strtod_l+0xba8>
 8011bf8:	a335      	add	r3, pc, #212	; (adr r3, 8011cd0 <_strtod_l+0xbd8>)
 8011bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bfe:	f7ee ff75 	bl	8000aec <__aeabi_dcmplt>
 8011c02:	2800      	cmp	r0, #0
 8011c04:	f47f acce 	bne.w	80115a4 <_strtod_l+0x4ac>
 8011c08:	a333      	add	r3, pc, #204	; (adr r3, 8011cd8 <_strtod_l+0xbe0>)
 8011c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c0e:	4640      	mov	r0, r8
 8011c10:	4649      	mov	r1, r9
 8011c12:	f7ee ff89 	bl	8000b28 <__aeabi_dcmpgt>
 8011c16:	2800      	cmp	r0, #0
 8011c18:	f43f af7b 	beq.w	8011b12 <_strtod_l+0xa1a>
 8011c1c:	e4c2      	b.n	80115a4 <_strtod_l+0x4ac>
 8011c1e:	9b04      	ldr	r3, [sp, #16]
 8011c20:	b333      	cbz	r3, 8011c70 <_strtod_l+0xb78>
 8011c22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011c24:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011c28:	d822      	bhi.n	8011c70 <_strtod_l+0xb78>
 8011c2a:	a32d      	add	r3, pc, #180	; (adr r3, 8011ce0 <_strtod_l+0xbe8>)
 8011c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c30:	4640      	mov	r0, r8
 8011c32:	4649      	mov	r1, r9
 8011c34:	f7ee ff64 	bl	8000b00 <__aeabi_dcmple>
 8011c38:	b1a0      	cbz	r0, 8011c64 <_strtod_l+0xb6c>
 8011c3a:	4649      	mov	r1, r9
 8011c3c:	4640      	mov	r0, r8
 8011c3e:	f7ee ffbb 	bl	8000bb8 <__aeabi_d2uiz>
 8011c42:	2801      	cmp	r0, #1
 8011c44:	bf38      	it	cc
 8011c46:	2001      	movcc	r0, #1
 8011c48:	f7ee fc64 	bl	8000514 <__aeabi_ui2d>
 8011c4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011c4e:	4680      	mov	r8, r0
 8011c50:	4689      	mov	r9, r1
 8011c52:	bb13      	cbnz	r3, 8011c9a <_strtod_l+0xba2>
 8011c54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011c58:	9014      	str	r0, [sp, #80]	; 0x50
 8011c5a:	9315      	str	r3, [sp, #84]	; 0x54
 8011c5c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011c60:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011c64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011c66:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011c68:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011c6c:	1a9b      	subs	r3, r3, r2
 8011c6e:	930d      	str	r3, [sp, #52]	; 0x34
 8011c70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011c74:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011c78:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011c7c:	f002 f942 	bl	8013f04 <__ulp>
 8011c80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011c84:	ec53 2b10 	vmov	r2, r3, d0
 8011c88:	f7ee fcbe 	bl	8000608 <__aeabi_dmul>
 8011c8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011c90:	f7ee fb04 	bl	800029c <__adddf3>
 8011c94:	4682      	mov	sl, r0
 8011c96:	468b      	mov	fp, r1
 8011c98:	e78f      	b.n	8011bba <_strtod_l+0xac2>
 8011c9a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8011c9e:	e7dd      	b.n	8011c5c <_strtod_l+0xb64>
 8011ca0:	a311      	add	r3, pc, #68	; (adr r3, 8011ce8 <_strtod_l+0xbf0>)
 8011ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ca6:	f7ee ff21 	bl	8000aec <__aeabi_dcmplt>
 8011caa:	e7b4      	b.n	8011c16 <_strtod_l+0xb1e>
 8011cac:	2300      	movs	r3, #0
 8011cae:	930e      	str	r3, [sp, #56]	; 0x38
 8011cb0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011cb2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011cb4:	6013      	str	r3, [r2, #0]
 8011cb6:	f7ff ba65 	b.w	8011184 <_strtod_l+0x8c>
 8011cba:	2b65      	cmp	r3, #101	; 0x65
 8011cbc:	f43f ab5d 	beq.w	801137a <_strtod_l+0x282>
 8011cc0:	2b45      	cmp	r3, #69	; 0x45
 8011cc2:	f43f ab5a 	beq.w	801137a <_strtod_l+0x282>
 8011cc6:	2201      	movs	r2, #1
 8011cc8:	f7ff bb92 	b.w	80113f0 <_strtod_l+0x2f8>
 8011ccc:	f3af 8000 	nop.w
 8011cd0:	94a03595 	.word	0x94a03595
 8011cd4:	3fdfffff 	.word	0x3fdfffff
 8011cd8:	35afe535 	.word	0x35afe535
 8011cdc:	3fe00000 	.word	0x3fe00000
 8011ce0:	ffc00000 	.word	0xffc00000
 8011ce4:	41dfffff 	.word	0x41dfffff
 8011ce8:	94a03595 	.word	0x94a03595
 8011cec:	3fcfffff 	.word	0x3fcfffff
 8011cf0:	3ff00000 	.word	0x3ff00000
 8011cf4:	7ff00000 	.word	0x7ff00000
 8011cf8:	7fe00000 	.word	0x7fe00000
 8011cfc:	7c9fffff 	.word	0x7c9fffff
 8011d00:	3fe00000 	.word	0x3fe00000
 8011d04:	bff00000 	.word	0xbff00000
 8011d08:	7fefffff 	.word	0x7fefffff

08011d0c <_strtod_r>:
 8011d0c:	4b01      	ldr	r3, [pc, #4]	; (8011d14 <_strtod_r+0x8>)
 8011d0e:	f7ff b9f3 	b.w	80110f8 <_strtod_l>
 8011d12:	bf00      	nop
 8011d14:	200000c0 	.word	0x200000c0

08011d18 <_strtol_l.isra.0>:
 8011d18:	2b01      	cmp	r3, #1
 8011d1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d1e:	d001      	beq.n	8011d24 <_strtol_l.isra.0+0xc>
 8011d20:	2b24      	cmp	r3, #36	; 0x24
 8011d22:	d906      	bls.n	8011d32 <_strtol_l.isra.0+0x1a>
 8011d24:	f7fe f966 	bl	800fff4 <__errno>
 8011d28:	2316      	movs	r3, #22
 8011d2a:	6003      	str	r3, [r0, #0]
 8011d2c:	2000      	movs	r0, #0
 8011d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d32:	4f3a      	ldr	r7, [pc, #232]	; (8011e1c <_strtol_l.isra.0+0x104>)
 8011d34:	468e      	mov	lr, r1
 8011d36:	4676      	mov	r6, lr
 8011d38:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011d3c:	5de5      	ldrb	r5, [r4, r7]
 8011d3e:	f015 0508 	ands.w	r5, r5, #8
 8011d42:	d1f8      	bne.n	8011d36 <_strtol_l.isra.0+0x1e>
 8011d44:	2c2d      	cmp	r4, #45	; 0x2d
 8011d46:	d134      	bne.n	8011db2 <_strtol_l.isra.0+0x9a>
 8011d48:	f89e 4000 	ldrb.w	r4, [lr]
 8011d4c:	f04f 0801 	mov.w	r8, #1
 8011d50:	f106 0e02 	add.w	lr, r6, #2
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d05c      	beq.n	8011e12 <_strtol_l.isra.0+0xfa>
 8011d58:	2b10      	cmp	r3, #16
 8011d5a:	d10c      	bne.n	8011d76 <_strtol_l.isra.0+0x5e>
 8011d5c:	2c30      	cmp	r4, #48	; 0x30
 8011d5e:	d10a      	bne.n	8011d76 <_strtol_l.isra.0+0x5e>
 8011d60:	f89e 4000 	ldrb.w	r4, [lr]
 8011d64:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011d68:	2c58      	cmp	r4, #88	; 0x58
 8011d6a:	d14d      	bne.n	8011e08 <_strtol_l.isra.0+0xf0>
 8011d6c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8011d70:	2310      	movs	r3, #16
 8011d72:	f10e 0e02 	add.w	lr, lr, #2
 8011d76:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8011d7a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011d7e:	2600      	movs	r6, #0
 8011d80:	fbbc f9f3 	udiv	r9, ip, r3
 8011d84:	4635      	mov	r5, r6
 8011d86:	fb03 ca19 	mls	sl, r3, r9, ip
 8011d8a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8011d8e:	2f09      	cmp	r7, #9
 8011d90:	d818      	bhi.n	8011dc4 <_strtol_l.isra.0+0xac>
 8011d92:	463c      	mov	r4, r7
 8011d94:	42a3      	cmp	r3, r4
 8011d96:	dd24      	ble.n	8011de2 <_strtol_l.isra.0+0xca>
 8011d98:	2e00      	cmp	r6, #0
 8011d9a:	db1f      	blt.n	8011ddc <_strtol_l.isra.0+0xc4>
 8011d9c:	45a9      	cmp	r9, r5
 8011d9e:	d31d      	bcc.n	8011ddc <_strtol_l.isra.0+0xc4>
 8011da0:	d101      	bne.n	8011da6 <_strtol_l.isra.0+0x8e>
 8011da2:	45a2      	cmp	sl, r4
 8011da4:	db1a      	blt.n	8011ddc <_strtol_l.isra.0+0xc4>
 8011da6:	fb05 4503 	mla	r5, r5, r3, r4
 8011daa:	2601      	movs	r6, #1
 8011dac:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011db0:	e7eb      	b.n	8011d8a <_strtol_l.isra.0+0x72>
 8011db2:	2c2b      	cmp	r4, #43	; 0x2b
 8011db4:	bf08      	it	eq
 8011db6:	f89e 4000 	ldrbeq.w	r4, [lr]
 8011dba:	46a8      	mov	r8, r5
 8011dbc:	bf08      	it	eq
 8011dbe:	f106 0e02 	addeq.w	lr, r6, #2
 8011dc2:	e7c7      	b.n	8011d54 <_strtol_l.isra.0+0x3c>
 8011dc4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8011dc8:	2f19      	cmp	r7, #25
 8011dca:	d801      	bhi.n	8011dd0 <_strtol_l.isra.0+0xb8>
 8011dcc:	3c37      	subs	r4, #55	; 0x37
 8011dce:	e7e1      	b.n	8011d94 <_strtol_l.isra.0+0x7c>
 8011dd0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8011dd4:	2f19      	cmp	r7, #25
 8011dd6:	d804      	bhi.n	8011de2 <_strtol_l.isra.0+0xca>
 8011dd8:	3c57      	subs	r4, #87	; 0x57
 8011dda:	e7db      	b.n	8011d94 <_strtol_l.isra.0+0x7c>
 8011ddc:	f04f 36ff 	mov.w	r6, #4294967295
 8011de0:	e7e4      	b.n	8011dac <_strtol_l.isra.0+0x94>
 8011de2:	2e00      	cmp	r6, #0
 8011de4:	da05      	bge.n	8011df2 <_strtol_l.isra.0+0xda>
 8011de6:	2322      	movs	r3, #34	; 0x22
 8011de8:	6003      	str	r3, [r0, #0]
 8011dea:	4665      	mov	r5, ip
 8011dec:	b942      	cbnz	r2, 8011e00 <_strtol_l.isra.0+0xe8>
 8011dee:	4628      	mov	r0, r5
 8011df0:	e79d      	b.n	8011d2e <_strtol_l.isra.0+0x16>
 8011df2:	f1b8 0f00 	cmp.w	r8, #0
 8011df6:	d000      	beq.n	8011dfa <_strtol_l.isra.0+0xe2>
 8011df8:	426d      	negs	r5, r5
 8011dfa:	2a00      	cmp	r2, #0
 8011dfc:	d0f7      	beq.n	8011dee <_strtol_l.isra.0+0xd6>
 8011dfe:	b10e      	cbz	r6, 8011e04 <_strtol_l.isra.0+0xec>
 8011e00:	f10e 31ff 	add.w	r1, lr, #4294967295
 8011e04:	6011      	str	r1, [r2, #0]
 8011e06:	e7f2      	b.n	8011dee <_strtol_l.isra.0+0xd6>
 8011e08:	2430      	movs	r4, #48	; 0x30
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d1b3      	bne.n	8011d76 <_strtol_l.isra.0+0x5e>
 8011e0e:	2308      	movs	r3, #8
 8011e10:	e7b1      	b.n	8011d76 <_strtol_l.isra.0+0x5e>
 8011e12:	2c30      	cmp	r4, #48	; 0x30
 8011e14:	d0a4      	beq.n	8011d60 <_strtol_l.isra.0+0x48>
 8011e16:	230a      	movs	r3, #10
 8011e18:	e7ad      	b.n	8011d76 <_strtol_l.isra.0+0x5e>
 8011e1a:	bf00      	nop
 8011e1c:	08016565 	.word	0x08016565

08011e20 <_strtol_r>:
 8011e20:	f7ff bf7a 	b.w	8011d18 <_strtol_l.isra.0>

08011e24 <__swbuf_r>:
 8011e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e26:	460e      	mov	r6, r1
 8011e28:	4614      	mov	r4, r2
 8011e2a:	4605      	mov	r5, r0
 8011e2c:	b118      	cbz	r0, 8011e36 <__swbuf_r+0x12>
 8011e2e:	6983      	ldr	r3, [r0, #24]
 8011e30:	b90b      	cbnz	r3, 8011e36 <__swbuf_r+0x12>
 8011e32:	f001 f84f 	bl	8012ed4 <__sinit>
 8011e36:	4b21      	ldr	r3, [pc, #132]	; (8011ebc <__swbuf_r+0x98>)
 8011e38:	429c      	cmp	r4, r3
 8011e3a:	d12b      	bne.n	8011e94 <__swbuf_r+0x70>
 8011e3c:	686c      	ldr	r4, [r5, #4]
 8011e3e:	69a3      	ldr	r3, [r4, #24]
 8011e40:	60a3      	str	r3, [r4, #8]
 8011e42:	89a3      	ldrh	r3, [r4, #12]
 8011e44:	071a      	lsls	r2, r3, #28
 8011e46:	d52f      	bpl.n	8011ea8 <__swbuf_r+0x84>
 8011e48:	6923      	ldr	r3, [r4, #16]
 8011e4a:	b36b      	cbz	r3, 8011ea8 <__swbuf_r+0x84>
 8011e4c:	6923      	ldr	r3, [r4, #16]
 8011e4e:	6820      	ldr	r0, [r4, #0]
 8011e50:	1ac0      	subs	r0, r0, r3
 8011e52:	6963      	ldr	r3, [r4, #20]
 8011e54:	b2f6      	uxtb	r6, r6
 8011e56:	4283      	cmp	r3, r0
 8011e58:	4637      	mov	r7, r6
 8011e5a:	dc04      	bgt.n	8011e66 <__swbuf_r+0x42>
 8011e5c:	4621      	mov	r1, r4
 8011e5e:	4628      	mov	r0, r5
 8011e60:	f000 ffa4 	bl	8012dac <_fflush_r>
 8011e64:	bb30      	cbnz	r0, 8011eb4 <__swbuf_r+0x90>
 8011e66:	68a3      	ldr	r3, [r4, #8]
 8011e68:	3b01      	subs	r3, #1
 8011e6a:	60a3      	str	r3, [r4, #8]
 8011e6c:	6823      	ldr	r3, [r4, #0]
 8011e6e:	1c5a      	adds	r2, r3, #1
 8011e70:	6022      	str	r2, [r4, #0]
 8011e72:	701e      	strb	r6, [r3, #0]
 8011e74:	6963      	ldr	r3, [r4, #20]
 8011e76:	3001      	adds	r0, #1
 8011e78:	4283      	cmp	r3, r0
 8011e7a:	d004      	beq.n	8011e86 <__swbuf_r+0x62>
 8011e7c:	89a3      	ldrh	r3, [r4, #12]
 8011e7e:	07db      	lsls	r3, r3, #31
 8011e80:	d506      	bpl.n	8011e90 <__swbuf_r+0x6c>
 8011e82:	2e0a      	cmp	r6, #10
 8011e84:	d104      	bne.n	8011e90 <__swbuf_r+0x6c>
 8011e86:	4621      	mov	r1, r4
 8011e88:	4628      	mov	r0, r5
 8011e8a:	f000 ff8f 	bl	8012dac <_fflush_r>
 8011e8e:	b988      	cbnz	r0, 8011eb4 <__swbuf_r+0x90>
 8011e90:	4638      	mov	r0, r7
 8011e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e94:	4b0a      	ldr	r3, [pc, #40]	; (8011ec0 <__swbuf_r+0x9c>)
 8011e96:	429c      	cmp	r4, r3
 8011e98:	d101      	bne.n	8011e9e <__swbuf_r+0x7a>
 8011e9a:	68ac      	ldr	r4, [r5, #8]
 8011e9c:	e7cf      	b.n	8011e3e <__swbuf_r+0x1a>
 8011e9e:	4b09      	ldr	r3, [pc, #36]	; (8011ec4 <__swbuf_r+0xa0>)
 8011ea0:	429c      	cmp	r4, r3
 8011ea2:	bf08      	it	eq
 8011ea4:	68ec      	ldreq	r4, [r5, #12]
 8011ea6:	e7ca      	b.n	8011e3e <__swbuf_r+0x1a>
 8011ea8:	4621      	mov	r1, r4
 8011eaa:	4628      	mov	r0, r5
 8011eac:	f000 f80c 	bl	8011ec8 <__swsetup_r>
 8011eb0:	2800      	cmp	r0, #0
 8011eb2:	d0cb      	beq.n	8011e4c <__swbuf_r+0x28>
 8011eb4:	f04f 37ff 	mov.w	r7, #4294967295
 8011eb8:	e7ea      	b.n	8011e90 <__swbuf_r+0x6c>
 8011eba:	bf00      	nop
 8011ebc:	080167bc 	.word	0x080167bc
 8011ec0:	080167dc 	.word	0x080167dc
 8011ec4:	0801679c 	.word	0x0801679c

08011ec8 <__swsetup_r>:
 8011ec8:	4b32      	ldr	r3, [pc, #200]	; (8011f94 <__swsetup_r+0xcc>)
 8011eca:	b570      	push	{r4, r5, r6, lr}
 8011ecc:	681d      	ldr	r5, [r3, #0]
 8011ece:	4606      	mov	r6, r0
 8011ed0:	460c      	mov	r4, r1
 8011ed2:	b125      	cbz	r5, 8011ede <__swsetup_r+0x16>
 8011ed4:	69ab      	ldr	r3, [r5, #24]
 8011ed6:	b913      	cbnz	r3, 8011ede <__swsetup_r+0x16>
 8011ed8:	4628      	mov	r0, r5
 8011eda:	f000 fffb 	bl	8012ed4 <__sinit>
 8011ede:	4b2e      	ldr	r3, [pc, #184]	; (8011f98 <__swsetup_r+0xd0>)
 8011ee0:	429c      	cmp	r4, r3
 8011ee2:	d10f      	bne.n	8011f04 <__swsetup_r+0x3c>
 8011ee4:	686c      	ldr	r4, [r5, #4]
 8011ee6:	89a3      	ldrh	r3, [r4, #12]
 8011ee8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011eec:	0719      	lsls	r1, r3, #28
 8011eee:	d42c      	bmi.n	8011f4a <__swsetup_r+0x82>
 8011ef0:	06dd      	lsls	r5, r3, #27
 8011ef2:	d411      	bmi.n	8011f18 <__swsetup_r+0x50>
 8011ef4:	2309      	movs	r3, #9
 8011ef6:	6033      	str	r3, [r6, #0]
 8011ef8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011efc:	81a3      	strh	r3, [r4, #12]
 8011efe:	f04f 30ff 	mov.w	r0, #4294967295
 8011f02:	e03e      	b.n	8011f82 <__swsetup_r+0xba>
 8011f04:	4b25      	ldr	r3, [pc, #148]	; (8011f9c <__swsetup_r+0xd4>)
 8011f06:	429c      	cmp	r4, r3
 8011f08:	d101      	bne.n	8011f0e <__swsetup_r+0x46>
 8011f0a:	68ac      	ldr	r4, [r5, #8]
 8011f0c:	e7eb      	b.n	8011ee6 <__swsetup_r+0x1e>
 8011f0e:	4b24      	ldr	r3, [pc, #144]	; (8011fa0 <__swsetup_r+0xd8>)
 8011f10:	429c      	cmp	r4, r3
 8011f12:	bf08      	it	eq
 8011f14:	68ec      	ldreq	r4, [r5, #12]
 8011f16:	e7e6      	b.n	8011ee6 <__swsetup_r+0x1e>
 8011f18:	0758      	lsls	r0, r3, #29
 8011f1a:	d512      	bpl.n	8011f42 <__swsetup_r+0x7a>
 8011f1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011f1e:	b141      	cbz	r1, 8011f32 <__swsetup_r+0x6a>
 8011f20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011f24:	4299      	cmp	r1, r3
 8011f26:	d002      	beq.n	8011f2e <__swsetup_r+0x66>
 8011f28:	4630      	mov	r0, r6
 8011f2a:	f002 f949 	bl	80141c0 <_free_r>
 8011f2e:	2300      	movs	r3, #0
 8011f30:	6363      	str	r3, [r4, #52]	; 0x34
 8011f32:	89a3      	ldrh	r3, [r4, #12]
 8011f34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011f38:	81a3      	strh	r3, [r4, #12]
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	6063      	str	r3, [r4, #4]
 8011f3e:	6923      	ldr	r3, [r4, #16]
 8011f40:	6023      	str	r3, [r4, #0]
 8011f42:	89a3      	ldrh	r3, [r4, #12]
 8011f44:	f043 0308 	orr.w	r3, r3, #8
 8011f48:	81a3      	strh	r3, [r4, #12]
 8011f4a:	6923      	ldr	r3, [r4, #16]
 8011f4c:	b94b      	cbnz	r3, 8011f62 <__swsetup_r+0x9a>
 8011f4e:	89a3      	ldrh	r3, [r4, #12]
 8011f50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011f58:	d003      	beq.n	8011f62 <__swsetup_r+0x9a>
 8011f5a:	4621      	mov	r1, r4
 8011f5c:	4630      	mov	r0, r6
 8011f5e:	f001 fbf1 	bl	8013744 <__smakebuf_r>
 8011f62:	89a0      	ldrh	r0, [r4, #12]
 8011f64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011f68:	f010 0301 	ands.w	r3, r0, #1
 8011f6c:	d00a      	beq.n	8011f84 <__swsetup_r+0xbc>
 8011f6e:	2300      	movs	r3, #0
 8011f70:	60a3      	str	r3, [r4, #8]
 8011f72:	6963      	ldr	r3, [r4, #20]
 8011f74:	425b      	negs	r3, r3
 8011f76:	61a3      	str	r3, [r4, #24]
 8011f78:	6923      	ldr	r3, [r4, #16]
 8011f7a:	b943      	cbnz	r3, 8011f8e <__swsetup_r+0xc6>
 8011f7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011f80:	d1ba      	bne.n	8011ef8 <__swsetup_r+0x30>
 8011f82:	bd70      	pop	{r4, r5, r6, pc}
 8011f84:	0781      	lsls	r1, r0, #30
 8011f86:	bf58      	it	pl
 8011f88:	6963      	ldrpl	r3, [r4, #20]
 8011f8a:	60a3      	str	r3, [r4, #8]
 8011f8c:	e7f4      	b.n	8011f78 <__swsetup_r+0xb0>
 8011f8e:	2000      	movs	r0, #0
 8011f90:	e7f7      	b.n	8011f82 <__swsetup_r+0xba>
 8011f92:	bf00      	nop
 8011f94:	20000058 	.word	0x20000058
 8011f98:	080167bc 	.word	0x080167bc
 8011f9c:	080167dc 	.word	0x080167dc
 8011fa0:	0801679c 	.word	0x0801679c

08011fa4 <abort>:
 8011fa4:	b508      	push	{r3, lr}
 8011fa6:	2006      	movs	r0, #6
 8011fa8:	f002 fb76 	bl	8014698 <raise>
 8011fac:	2001      	movs	r0, #1
 8011fae:	f7f2 fa27 	bl	8004400 <_exit>

08011fb2 <quorem>:
 8011fb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fb6:	6903      	ldr	r3, [r0, #16]
 8011fb8:	690c      	ldr	r4, [r1, #16]
 8011fba:	42a3      	cmp	r3, r4
 8011fbc:	4607      	mov	r7, r0
 8011fbe:	f2c0 8081 	blt.w	80120c4 <quorem+0x112>
 8011fc2:	3c01      	subs	r4, #1
 8011fc4:	f101 0814 	add.w	r8, r1, #20
 8011fc8:	f100 0514 	add.w	r5, r0, #20
 8011fcc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011fd0:	9301      	str	r3, [sp, #4]
 8011fd2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011fd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011fda:	3301      	adds	r3, #1
 8011fdc:	429a      	cmp	r2, r3
 8011fde:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011fe2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011fe6:	fbb2 f6f3 	udiv	r6, r2, r3
 8011fea:	d331      	bcc.n	8012050 <quorem+0x9e>
 8011fec:	f04f 0e00 	mov.w	lr, #0
 8011ff0:	4640      	mov	r0, r8
 8011ff2:	46ac      	mov	ip, r5
 8011ff4:	46f2      	mov	sl, lr
 8011ff6:	f850 2b04 	ldr.w	r2, [r0], #4
 8011ffa:	b293      	uxth	r3, r2
 8011ffc:	fb06 e303 	mla	r3, r6, r3, lr
 8012000:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012004:	b29b      	uxth	r3, r3
 8012006:	ebaa 0303 	sub.w	r3, sl, r3
 801200a:	0c12      	lsrs	r2, r2, #16
 801200c:	f8dc a000 	ldr.w	sl, [ip]
 8012010:	fb06 e202 	mla	r2, r6, r2, lr
 8012014:	fa13 f38a 	uxtah	r3, r3, sl
 8012018:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801201c:	fa1f fa82 	uxth.w	sl, r2
 8012020:	f8dc 2000 	ldr.w	r2, [ip]
 8012024:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8012028:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801202c:	b29b      	uxth	r3, r3
 801202e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012032:	4581      	cmp	r9, r0
 8012034:	f84c 3b04 	str.w	r3, [ip], #4
 8012038:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801203c:	d2db      	bcs.n	8011ff6 <quorem+0x44>
 801203e:	f855 300b 	ldr.w	r3, [r5, fp]
 8012042:	b92b      	cbnz	r3, 8012050 <quorem+0x9e>
 8012044:	9b01      	ldr	r3, [sp, #4]
 8012046:	3b04      	subs	r3, #4
 8012048:	429d      	cmp	r5, r3
 801204a:	461a      	mov	r2, r3
 801204c:	d32e      	bcc.n	80120ac <quorem+0xfa>
 801204e:	613c      	str	r4, [r7, #16]
 8012050:	4638      	mov	r0, r7
 8012052:	f001 feb3 	bl	8013dbc <__mcmp>
 8012056:	2800      	cmp	r0, #0
 8012058:	db24      	blt.n	80120a4 <quorem+0xf2>
 801205a:	3601      	adds	r6, #1
 801205c:	4628      	mov	r0, r5
 801205e:	f04f 0c00 	mov.w	ip, #0
 8012062:	f858 2b04 	ldr.w	r2, [r8], #4
 8012066:	f8d0 e000 	ldr.w	lr, [r0]
 801206a:	b293      	uxth	r3, r2
 801206c:	ebac 0303 	sub.w	r3, ip, r3
 8012070:	0c12      	lsrs	r2, r2, #16
 8012072:	fa13 f38e 	uxtah	r3, r3, lr
 8012076:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801207a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801207e:	b29b      	uxth	r3, r3
 8012080:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012084:	45c1      	cmp	r9, r8
 8012086:	f840 3b04 	str.w	r3, [r0], #4
 801208a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801208e:	d2e8      	bcs.n	8012062 <quorem+0xb0>
 8012090:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012094:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012098:	b922      	cbnz	r2, 80120a4 <quorem+0xf2>
 801209a:	3b04      	subs	r3, #4
 801209c:	429d      	cmp	r5, r3
 801209e:	461a      	mov	r2, r3
 80120a0:	d30a      	bcc.n	80120b8 <quorem+0x106>
 80120a2:	613c      	str	r4, [r7, #16]
 80120a4:	4630      	mov	r0, r6
 80120a6:	b003      	add	sp, #12
 80120a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120ac:	6812      	ldr	r2, [r2, #0]
 80120ae:	3b04      	subs	r3, #4
 80120b0:	2a00      	cmp	r2, #0
 80120b2:	d1cc      	bne.n	801204e <quorem+0x9c>
 80120b4:	3c01      	subs	r4, #1
 80120b6:	e7c7      	b.n	8012048 <quorem+0x96>
 80120b8:	6812      	ldr	r2, [r2, #0]
 80120ba:	3b04      	subs	r3, #4
 80120bc:	2a00      	cmp	r2, #0
 80120be:	d1f0      	bne.n	80120a2 <quorem+0xf0>
 80120c0:	3c01      	subs	r4, #1
 80120c2:	e7eb      	b.n	801209c <quorem+0xea>
 80120c4:	2000      	movs	r0, #0
 80120c6:	e7ee      	b.n	80120a6 <quorem+0xf4>

080120c8 <_dtoa_r>:
 80120c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120cc:	ed2d 8b02 	vpush	{d8}
 80120d0:	ec57 6b10 	vmov	r6, r7, d0
 80120d4:	b095      	sub	sp, #84	; 0x54
 80120d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80120d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80120dc:	9105      	str	r1, [sp, #20]
 80120de:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80120e2:	4604      	mov	r4, r0
 80120e4:	9209      	str	r2, [sp, #36]	; 0x24
 80120e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80120e8:	b975      	cbnz	r5, 8012108 <_dtoa_r+0x40>
 80120ea:	2010      	movs	r0, #16
 80120ec:	f001 fb6a 	bl	80137c4 <malloc>
 80120f0:	4602      	mov	r2, r0
 80120f2:	6260      	str	r0, [r4, #36]	; 0x24
 80120f4:	b920      	cbnz	r0, 8012100 <_dtoa_r+0x38>
 80120f6:	4bb2      	ldr	r3, [pc, #712]	; (80123c0 <_dtoa_r+0x2f8>)
 80120f8:	21ea      	movs	r1, #234	; 0xea
 80120fa:	48b2      	ldr	r0, [pc, #712]	; (80123c4 <_dtoa_r+0x2fc>)
 80120fc:	f7fd ff5c 	bl	800ffb8 <__assert_func>
 8012100:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012104:	6005      	str	r5, [r0, #0]
 8012106:	60c5      	str	r5, [r0, #12]
 8012108:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801210a:	6819      	ldr	r1, [r3, #0]
 801210c:	b151      	cbz	r1, 8012124 <_dtoa_r+0x5c>
 801210e:	685a      	ldr	r2, [r3, #4]
 8012110:	604a      	str	r2, [r1, #4]
 8012112:	2301      	movs	r3, #1
 8012114:	4093      	lsls	r3, r2
 8012116:	608b      	str	r3, [r1, #8]
 8012118:	4620      	mov	r0, r4
 801211a:	f001 fbc7 	bl	80138ac <_Bfree>
 801211e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012120:	2200      	movs	r2, #0
 8012122:	601a      	str	r2, [r3, #0]
 8012124:	1e3b      	subs	r3, r7, #0
 8012126:	bfb9      	ittee	lt
 8012128:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801212c:	9303      	strlt	r3, [sp, #12]
 801212e:	2300      	movge	r3, #0
 8012130:	f8c8 3000 	strge.w	r3, [r8]
 8012134:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8012138:	4ba3      	ldr	r3, [pc, #652]	; (80123c8 <_dtoa_r+0x300>)
 801213a:	bfbc      	itt	lt
 801213c:	2201      	movlt	r2, #1
 801213e:	f8c8 2000 	strlt.w	r2, [r8]
 8012142:	ea33 0309 	bics.w	r3, r3, r9
 8012146:	d11b      	bne.n	8012180 <_dtoa_r+0xb8>
 8012148:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801214a:	f242 730f 	movw	r3, #9999	; 0x270f
 801214e:	6013      	str	r3, [r2, #0]
 8012150:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012154:	4333      	orrs	r3, r6
 8012156:	f000 857a 	beq.w	8012c4e <_dtoa_r+0xb86>
 801215a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801215c:	b963      	cbnz	r3, 8012178 <_dtoa_r+0xb0>
 801215e:	4b9b      	ldr	r3, [pc, #620]	; (80123cc <_dtoa_r+0x304>)
 8012160:	e024      	b.n	80121ac <_dtoa_r+0xe4>
 8012162:	4b9b      	ldr	r3, [pc, #620]	; (80123d0 <_dtoa_r+0x308>)
 8012164:	9300      	str	r3, [sp, #0]
 8012166:	3308      	adds	r3, #8
 8012168:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801216a:	6013      	str	r3, [r2, #0]
 801216c:	9800      	ldr	r0, [sp, #0]
 801216e:	b015      	add	sp, #84	; 0x54
 8012170:	ecbd 8b02 	vpop	{d8}
 8012174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012178:	4b94      	ldr	r3, [pc, #592]	; (80123cc <_dtoa_r+0x304>)
 801217a:	9300      	str	r3, [sp, #0]
 801217c:	3303      	adds	r3, #3
 801217e:	e7f3      	b.n	8012168 <_dtoa_r+0xa0>
 8012180:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012184:	2200      	movs	r2, #0
 8012186:	ec51 0b17 	vmov	r0, r1, d7
 801218a:	2300      	movs	r3, #0
 801218c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012190:	f7ee fca2 	bl	8000ad8 <__aeabi_dcmpeq>
 8012194:	4680      	mov	r8, r0
 8012196:	b158      	cbz	r0, 80121b0 <_dtoa_r+0xe8>
 8012198:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801219a:	2301      	movs	r3, #1
 801219c:	6013      	str	r3, [r2, #0]
 801219e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	f000 8551 	beq.w	8012c48 <_dtoa_r+0xb80>
 80121a6:	488b      	ldr	r0, [pc, #556]	; (80123d4 <_dtoa_r+0x30c>)
 80121a8:	6018      	str	r0, [r3, #0]
 80121aa:	1e43      	subs	r3, r0, #1
 80121ac:	9300      	str	r3, [sp, #0]
 80121ae:	e7dd      	b.n	801216c <_dtoa_r+0xa4>
 80121b0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80121b4:	aa12      	add	r2, sp, #72	; 0x48
 80121b6:	a913      	add	r1, sp, #76	; 0x4c
 80121b8:	4620      	mov	r0, r4
 80121ba:	f001 ff1f 	bl	8013ffc <__d2b>
 80121be:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80121c2:	4683      	mov	fp, r0
 80121c4:	2d00      	cmp	r5, #0
 80121c6:	d07c      	beq.n	80122c2 <_dtoa_r+0x1fa>
 80121c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80121ca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80121ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80121d2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80121d6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80121da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80121de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80121e2:	4b7d      	ldr	r3, [pc, #500]	; (80123d8 <_dtoa_r+0x310>)
 80121e4:	2200      	movs	r2, #0
 80121e6:	4630      	mov	r0, r6
 80121e8:	4639      	mov	r1, r7
 80121ea:	f7ee f855 	bl	8000298 <__aeabi_dsub>
 80121ee:	a36e      	add	r3, pc, #440	; (adr r3, 80123a8 <_dtoa_r+0x2e0>)
 80121f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121f4:	f7ee fa08 	bl	8000608 <__aeabi_dmul>
 80121f8:	a36d      	add	r3, pc, #436	; (adr r3, 80123b0 <_dtoa_r+0x2e8>)
 80121fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121fe:	f7ee f84d 	bl	800029c <__adddf3>
 8012202:	4606      	mov	r6, r0
 8012204:	4628      	mov	r0, r5
 8012206:	460f      	mov	r7, r1
 8012208:	f7ee f994 	bl	8000534 <__aeabi_i2d>
 801220c:	a36a      	add	r3, pc, #424	; (adr r3, 80123b8 <_dtoa_r+0x2f0>)
 801220e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012212:	f7ee f9f9 	bl	8000608 <__aeabi_dmul>
 8012216:	4602      	mov	r2, r0
 8012218:	460b      	mov	r3, r1
 801221a:	4630      	mov	r0, r6
 801221c:	4639      	mov	r1, r7
 801221e:	f7ee f83d 	bl	800029c <__adddf3>
 8012222:	4606      	mov	r6, r0
 8012224:	460f      	mov	r7, r1
 8012226:	f7ee fc9f 	bl	8000b68 <__aeabi_d2iz>
 801222a:	2200      	movs	r2, #0
 801222c:	4682      	mov	sl, r0
 801222e:	2300      	movs	r3, #0
 8012230:	4630      	mov	r0, r6
 8012232:	4639      	mov	r1, r7
 8012234:	f7ee fc5a 	bl	8000aec <__aeabi_dcmplt>
 8012238:	b148      	cbz	r0, 801224e <_dtoa_r+0x186>
 801223a:	4650      	mov	r0, sl
 801223c:	f7ee f97a 	bl	8000534 <__aeabi_i2d>
 8012240:	4632      	mov	r2, r6
 8012242:	463b      	mov	r3, r7
 8012244:	f7ee fc48 	bl	8000ad8 <__aeabi_dcmpeq>
 8012248:	b908      	cbnz	r0, 801224e <_dtoa_r+0x186>
 801224a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801224e:	f1ba 0f16 	cmp.w	sl, #22
 8012252:	d854      	bhi.n	80122fe <_dtoa_r+0x236>
 8012254:	4b61      	ldr	r3, [pc, #388]	; (80123dc <_dtoa_r+0x314>)
 8012256:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801225a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801225e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012262:	f7ee fc43 	bl	8000aec <__aeabi_dcmplt>
 8012266:	2800      	cmp	r0, #0
 8012268:	d04b      	beq.n	8012302 <_dtoa_r+0x23a>
 801226a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801226e:	2300      	movs	r3, #0
 8012270:	930e      	str	r3, [sp, #56]	; 0x38
 8012272:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012274:	1b5d      	subs	r5, r3, r5
 8012276:	1e6b      	subs	r3, r5, #1
 8012278:	9304      	str	r3, [sp, #16]
 801227a:	bf43      	ittte	mi
 801227c:	2300      	movmi	r3, #0
 801227e:	f1c5 0801 	rsbmi	r8, r5, #1
 8012282:	9304      	strmi	r3, [sp, #16]
 8012284:	f04f 0800 	movpl.w	r8, #0
 8012288:	f1ba 0f00 	cmp.w	sl, #0
 801228c:	db3b      	blt.n	8012306 <_dtoa_r+0x23e>
 801228e:	9b04      	ldr	r3, [sp, #16]
 8012290:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8012294:	4453      	add	r3, sl
 8012296:	9304      	str	r3, [sp, #16]
 8012298:	2300      	movs	r3, #0
 801229a:	9306      	str	r3, [sp, #24]
 801229c:	9b05      	ldr	r3, [sp, #20]
 801229e:	2b09      	cmp	r3, #9
 80122a0:	d869      	bhi.n	8012376 <_dtoa_r+0x2ae>
 80122a2:	2b05      	cmp	r3, #5
 80122a4:	bfc4      	itt	gt
 80122a6:	3b04      	subgt	r3, #4
 80122a8:	9305      	strgt	r3, [sp, #20]
 80122aa:	9b05      	ldr	r3, [sp, #20]
 80122ac:	f1a3 0302 	sub.w	r3, r3, #2
 80122b0:	bfcc      	ite	gt
 80122b2:	2500      	movgt	r5, #0
 80122b4:	2501      	movle	r5, #1
 80122b6:	2b03      	cmp	r3, #3
 80122b8:	d869      	bhi.n	801238e <_dtoa_r+0x2c6>
 80122ba:	e8df f003 	tbb	[pc, r3]
 80122be:	4e2c      	.short	0x4e2c
 80122c0:	5a4c      	.short	0x5a4c
 80122c2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80122c6:	441d      	add	r5, r3
 80122c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80122cc:	2b20      	cmp	r3, #32
 80122ce:	bfc1      	itttt	gt
 80122d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80122d4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80122d8:	fa09 f303 	lslgt.w	r3, r9, r3
 80122dc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80122e0:	bfda      	itte	le
 80122e2:	f1c3 0320 	rsble	r3, r3, #32
 80122e6:	fa06 f003 	lslle.w	r0, r6, r3
 80122ea:	4318      	orrgt	r0, r3
 80122ec:	f7ee f912 	bl	8000514 <__aeabi_ui2d>
 80122f0:	2301      	movs	r3, #1
 80122f2:	4606      	mov	r6, r0
 80122f4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80122f8:	3d01      	subs	r5, #1
 80122fa:	9310      	str	r3, [sp, #64]	; 0x40
 80122fc:	e771      	b.n	80121e2 <_dtoa_r+0x11a>
 80122fe:	2301      	movs	r3, #1
 8012300:	e7b6      	b.n	8012270 <_dtoa_r+0x1a8>
 8012302:	900e      	str	r0, [sp, #56]	; 0x38
 8012304:	e7b5      	b.n	8012272 <_dtoa_r+0x1aa>
 8012306:	f1ca 0300 	rsb	r3, sl, #0
 801230a:	9306      	str	r3, [sp, #24]
 801230c:	2300      	movs	r3, #0
 801230e:	eba8 080a 	sub.w	r8, r8, sl
 8012312:	930d      	str	r3, [sp, #52]	; 0x34
 8012314:	e7c2      	b.n	801229c <_dtoa_r+0x1d4>
 8012316:	2300      	movs	r3, #0
 8012318:	9308      	str	r3, [sp, #32]
 801231a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801231c:	2b00      	cmp	r3, #0
 801231e:	dc39      	bgt.n	8012394 <_dtoa_r+0x2cc>
 8012320:	f04f 0901 	mov.w	r9, #1
 8012324:	f8cd 9004 	str.w	r9, [sp, #4]
 8012328:	464b      	mov	r3, r9
 801232a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801232e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012330:	2200      	movs	r2, #0
 8012332:	6042      	str	r2, [r0, #4]
 8012334:	2204      	movs	r2, #4
 8012336:	f102 0614 	add.w	r6, r2, #20
 801233a:	429e      	cmp	r6, r3
 801233c:	6841      	ldr	r1, [r0, #4]
 801233e:	d92f      	bls.n	80123a0 <_dtoa_r+0x2d8>
 8012340:	4620      	mov	r0, r4
 8012342:	f001 fa73 	bl	801382c <_Balloc>
 8012346:	9000      	str	r0, [sp, #0]
 8012348:	2800      	cmp	r0, #0
 801234a:	d14b      	bne.n	80123e4 <_dtoa_r+0x31c>
 801234c:	4b24      	ldr	r3, [pc, #144]	; (80123e0 <_dtoa_r+0x318>)
 801234e:	4602      	mov	r2, r0
 8012350:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012354:	e6d1      	b.n	80120fa <_dtoa_r+0x32>
 8012356:	2301      	movs	r3, #1
 8012358:	e7de      	b.n	8012318 <_dtoa_r+0x250>
 801235a:	2300      	movs	r3, #0
 801235c:	9308      	str	r3, [sp, #32]
 801235e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012360:	eb0a 0903 	add.w	r9, sl, r3
 8012364:	f109 0301 	add.w	r3, r9, #1
 8012368:	2b01      	cmp	r3, #1
 801236a:	9301      	str	r3, [sp, #4]
 801236c:	bfb8      	it	lt
 801236e:	2301      	movlt	r3, #1
 8012370:	e7dd      	b.n	801232e <_dtoa_r+0x266>
 8012372:	2301      	movs	r3, #1
 8012374:	e7f2      	b.n	801235c <_dtoa_r+0x294>
 8012376:	2501      	movs	r5, #1
 8012378:	2300      	movs	r3, #0
 801237a:	9305      	str	r3, [sp, #20]
 801237c:	9508      	str	r5, [sp, #32]
 801237e:	f04f 39ff 	mov.w	r9, #4294967295
 8012382:	2200      	movs	r2, #0
 8012384:	f8cd 9004 	str.w	r9, [sp, #4]
 8012388:	2312      	movs	r3, #18
 801238a:	9209      	str	r2, [sp, #36]	; 0x24
 801238c:	e7cf      	b.n	801232e <_dtoa_r+0x266>
 801238e:	2301      	movs	r3, #1
 8012390:	9308      	str	r3, [sp, #32]
 8012392:	e7f4      	b.n	801237e <_dtoa_r+0x2b6>
 8012394:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012398:	f8cd 9004 	str.w	r9, [sp, #4]
 801239c:	464b      	mov	r3, r9
 801239e:	e7c6      	b.n	801232e <_dtoa_r+0x266>
 80123a0:	3101      	adds	r1, #1
 80123a2:	6041      	str	r1, [r0, #4]
 80123a4:	0052      	lsls	r2, r2, #1
 80123a6:	e7c6      	b.n	8012336 <_dtoa_r+0x26e>
 80123a8:	636f4361 	.word	0x636f4361
 80123ac:	3fd287a7 	.word	0x3fd287a7
 80123b0:	8b60c8b3 	.word	0x8b60c8b3
 80123b4:	3fc68a28 	.word	0x3fc68a28
 80123b8:	509f79fb 	.word	0x509f79fb
 80123bc:	3fd34413 	.word	0x3fd34413
 80123c0:	08016715 	.word	0x08016715
 80123c4:	0801672c 	.word	0x0801672c
 80123c8:	7ff00000 	.word	0x7ff00000
 80123cc:	08016711 	.word	0x08016711
 80123d0:	08016708 	.word	0x08016708
 80123d4:	0801668e 	.word	0x0801668e
 80123d8:	3ff80000 	.word	0x3ff80000
 80123dc:	08016908 	.word	0x08016908
 80123e0:	0801678b 	.word	0x0801678b
 80123e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80123e6:	9a00      	ldr	r2, [sp, #0]
 80123e8:	601a      	str	r2, [r3, #0]
 80123ea:	9b01      	ldr	r3, [sp, #4]
 80123ec:	2b0e      	cmp	r3, #14
 80123ee:	f200 80ad 	bhi.w	801254c <_dtoa_r+0x484>
 80123f2:	2d00      	cmp	r5, #0
 80123f4:	f000 80aa 	beq.w	801254c <_dtoa_r+0x484>
 80123f8:	f1ba 0f00 	cmp.w	sl, #0
 80123fc:	dd36      	ble.n	801246c <_dtoa_r+0x3a4>
 80123fe:	4ac3      	ldr	r2, [pc, #780]	; (801270c <_dtoa_r+0x644>)
 8012400:	f00a 030f 	and.w	r3, sl, #15
 8012404:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012408:	ed93 7b00 	vldr	d7, [r3]
 801240c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8012410:	ea4f 172a 	mov.w	r7, sl, asr #4
 8012414:	eeb0 8a47 	vmov.f32	s16, s14
 8012418:	eef0 8a67 	vmov.f32	s17, s15
 801241c:	d016      	beq.n	801244c <_dtoa_r+0x384>
 801241e:	4bbc      	ldr	r3, [pc, #752]	; (8012710 <_dtoa_r+0x648>)
 8012420:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012424:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012428:	f7ee fa18 	bl	800085c <__aeabi_ddiv>
 801242c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012430:	f007 070f 	and.w	r7, r7, #15
 8012434:	2503      	movs	r5, #3
 8012436:	4eb6      	ldr	r6, [pc, #728]	; (8012710 <_dtoa_r+0x648>)
 8012438:	b957      	cbnz	r7, 8012450 <_dtoa_r+0x388>
 801243a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801243e:	ec53 2b18 	vmov	r2, r3, d8
 8012442:	f7ee fa0b 	bl	800085c <__aeabi_ddiv>
 8012446:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801244a:	e029      	b.n	80124a0 <_dtoa_r+0x3d8>
 801244c:	2502      	movs	r5, #2
 801244e:	e7f2      	b.n	8012436 <_dtoa_r+0x36e>
 8012450:	07f9      	lsls	r1, r7, #31
 8012452:	d508      	bpl.n	8012466 <_dtoa_r+0x39e>
 8012454:	ec51 0b18 	vmov	r0, r1, d8
 8012458:	e9d6 2300 	ldrd	r2, r3, [r6]
 801245c:	f7ee f8d4 	bl	8000608 <__aeabi_dmul>
 8012460:	ec41 0b18 	vmov	d8, r0, r1
 8012464:	3501      	adds	r5, #1
 8012466:	107f      	asrs	r7, r7, #1
 8012468:	3608      	adds	r6, #8
 801246a:	e7e5      	b.n	8012438 <_dtoa_r+0x370>
 801246c:	f000 80a6 	beq.w	80125bc <_dtoa_r+0x4f4>
 8012470:	f1ca 0600 	rsb	r6, sl, #0
 8012474:	4ba5      	ldr	r3, [pc, #660]	; (801270c <_dtoa_r+0x644>)
 8012476:	4fa6      	ldr	r7, [pc, #664]	; (8012710 <_dtoa_r+0x648>)
 8012478:	f006 020f 	and.w	r2, r6, #15
 801247c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012484:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012488:	f7ee f8be 	bl	8000608 <__aeabi_dmul>
 801248c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012490:	1136      	asrs	r6, r6, #4
 8012492:	2300      	movs	r3, #0
 8012494:	2502      	movs	r5, #2
 8012496:	2e00      	cmp	r6, #0
 8012498:	f040 8085 	bne.w	80125a6 <_dtoa_r+0x4de>
 801249c:	2b00      	cmp	r3, #0
 801249e:	d1d2      	bne.n	8012446 <_dtoa_r+0x37e>
 80124a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	f000 808c 	beq.w	80125c0 <_dtoa_r+0x4f8>
 80124a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80124ac:	4b99      	ldr	r3, [pc, #612]	; (8012714 <_dtoa_r+0x64c>)
 80124ae:	2200      	movs	r2, #0
 80124b0:	4630      	mov	r0, r6
 80124b2:	4639      	mov	r1, r7
 80124b4:	f7ee fb1a 	bl	8000aec <__aeabi_dcmplt>
 80124b8:	2800      	cmp	r0, #0
 80124ba:	f000 8081 	beq.w	80125c0 <_dtoa_r+0x4f8>
 80124be:	9b01      	ldr	r3, [sp, #4]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d07d      	beq.n	80125c0 <_dtoa_r+0x4f8>
 80124c4:	f1b9 0f00 	cmp.w	r9, #0
 80124c8:	dd3c      	ble.n	8012544 <_dtoa_r+0x47c>
 80124ca:	f10a 33ff 	add.w	r3, sl, #4294967295
 80124ce:	9307      	str	r3, [sp, #28]
 80124d0:	2200      	movs	r2, #0
 80124d2:	4b91      	ldr	r3, [pc, #580]	; (8012718 <_dtoa_r+0x650>)
 80124d4:	4630      	mov	r0, r6
 80124d6:	4639      	mov	r1, r7
 80124d8:	f7ee f896 	bl	8000608 <__aeabi_dmul>
 80124dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80124e0:	3501      	adds	r5, #1
 80124e2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80124e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80124ea:	4628      	mov	r0, r5
 80124ec:	f7ee f822 	bl	8000534 <__aeabi_i2d>
 80124f0:	4632      	mov	r2, r6
 80124f2:	463b      	mov	r3, r7
 80124f4:	f7ee f888 	bl	8000608 <__aeabi_dmul>
 80124f8:	4b88      	ldr	r3, [pc, #544]	; (801271c <_dtoa_r+0x654>)
 80124fa:	2200      	movs	r2, #0
 80124fc:	f7ed fece 	bl	800029c <__adddf3>
 8012500:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8012504:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012508:	9303      	str	r3, [sp, #12]
 801250a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801250c:	2b00      	cmp	r3, #0
 801250e:	d15c      	bne.n	80125ca <_dtoa_r+0x502>
 8012510:	4b83      	ldr	r3, [pc, #524]	; (8012720 <_dtoa_r+0x658>)
 8012512:	2200      	movs	r2, #0
 8012514:	4630      	mov	r0, r6
 8012516:	4639      	mov	r1, r7
 8012518:	f7ed febe 	bl	8000298 <__aeabi_dsub>
 801251c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012520:	4606      	mov	r6, r0
 8012522:	460f      	mov	r7, r1
 8012524:	f7ee fb00 	bl	8000b28 <__aeabi_dcmpgt>
 8012528:	2800      	cmp	r0, #0
 801252a:	f040 8296 	bne.w	8012a5a <_dtoa_r+0x992>
 801252e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012532:	4630      	mov	r0, r6
 8012534:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012538:	4639      	mov	r1, r7
 801253a:	f7ee fad7 	bl	8000aec <__aeabi_dcmplt>
 801253e:	2800      	cmp	r0, #0
 8012540:	f040 8288 	bne.w	8012a54 <_dtoa_r+0x98c>
 8012544:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012548:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801254c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801254e:	2b00      	cmp	r3, #0
 8012550:	f2c0 8158 	blt.w	8012804 <_dtoa_r+0x73c>
 8012554:	f1ba 0f0e 	cmp.w	sl, #14
 8012558:	f300 8154 	bgt.w	8012804 <_dtoa_r+0x73c>
 801255c:	4b6b      	ldr	r3, [pc, #428]	; (801270c <_dtoa_r+0x644>)
 801255e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012562:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012568:	2b00      	cmp	r3, #0
 801256a:	f280 80e3 	bge.w	8012734 <_dtoa_r+0x66c>
 801256e:	9b01      	ldr	r3, [sp, #4]
 8012570:	2b00      	cmp	r3, #0
 8012572:	f300 80df 	bgt.w	8012734 <_dtoa_r+0x66c>
 8012576:	f040 826d 	bne.w	8012a54 <_dtoa_r+0x98c>
 801257a:	4b69      	ldr	r3, [pc, #420]	; (8012720 <_dtoa_r+0x658>)
 801257c:	2200      	movs	r2, #0
 801257e:	4640      	mov	r0, r8
 8012580:	4649      	mov	r1, r9
 8012582:	f7ee f841 	bl	8000608 <__aeabi_dmul>
 8012586:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801258a:	f7ee fac3 	bl	8000b14 <__aeabi_dcmpge>
 801258e:	9e01      	ldr	r6, [sp, #4]
 8012590:	4637      	mov	r7, r6
 8012592:	2800      	cmp	r0, #0
 8012594:	f040 8243 	bne.w	8012a1e <_dtoa_r+0x956>
 8012598:	9d00      	ldr	r5, [sp, #0]
 801259a:	2331      	movs	r3, #49	; 0x31
 801259c:	f805 3b01 	strb.w	r3, [r5], #1
 80125a0:	f10a 0a01 	add.w	sl, sl, #1
 80125a4:	e23f      	b.n	8012a26 <_dtoa_r+0x95e>
 80125a6:	07f2      	lsls	r2, r6, #31
 80125a8:	d505      	bpl.n	80125b6 <_dtoa_r+0x4ee>
 80125aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80125ae:	f7ee f82b 	bl	8000608 <__aeabi_dmul>
 80125b2:	3501      	adds	r5, #1
 80125b4:	2301      	movs	r3, #1
 80125b6:	1076      	asrs	r6, r6, #1
 80125b8:	3708      	adds	r7, #8
 80125ba:	e76c      	b.n	8012496 <_dtoa_r+0x3ce>
 80125bc:	2502      	movs	r5, #2
 80125be:	e76f      	b.n	80124a0 <_dtoa_r+0x3d8>
 80125c0:	9b01      	ldr	r3, [sp, #4]
 80125c2:	f8cd a01c 	str.w	sl, [sp, #28]
 80125c6:	930c      	str	r3, [sp, #48]	; 0x30
 80125c8:	e78d      	b.n	80124e6 <_dtoa_r+0x41e>
 80125ca:	9900      	ldr	r1, [sp, #0]
 80125cc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80125ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80125d0:	4b4e      	ldr	r3, [pc, #312]	; (801270c <_dtoa_r+0x644>)
 80125d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80125d6:	4401      	add	r1, r0
 80125d8:	9102      	str	r1, [sp, #8]
 80125da:	9908      	ldr	r1, [sp, #32]
 80125dc:	eeb0 8a47 	vmov.f32	s16, s14
 80125e0:	eef0 8a67 	vmov.f32	s17, s15
 80125e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80125e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80125ec:	2900      	cmp	r1, #0
 80125ee:	d045      	beq.n	801267c <_dtoa_r+0x5b4>
 80125f0:	494c      	ldr	r1, [pc, #304]	; (8012724 <_dtoa_r+0x65c>)
 80125f2:	2000      	movs	r0, #0
 80125f4:	f7ee f932 	bl	800085c <__aeabi_ddiv>
 80125f8:	ec53 2b18 	vmov	r2, r3, d8
 80125fc:	f7ed fe4c 	bl	8000298 <__aeabi_dsub>
 8012600:	9d00      	ldr	r5, [sp, #0]
 8012602:	ec41 0b18 	vmov	d8, r0, r1
 8012606:	4639      	mov	r1, r7
 8012608:	4630      	mov	r0, r6
 801260a:	f7ee faad 	bl	8000b68 <__aeabi_d2iz>
 801260e:	900c      	str	r0, [sp, #48]	; 0x30
 8012610:	f7ed ff90 	bl	8000534 <__aeabi_i2d>
 8012614:	4602      	mov	r2, r0
 8012616:	460b      	mov	r3, r1
 8012618:	4630      	mov	r0, r6
 801261a:	4639      	mov	r1, r7
 801261c:	f7ed fe3c 	bl	8000298 <__aeabi_dsub>
 8012620:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012622:	3330      	adds	r3, #48	; 0x30
 8012624:	f805 3b01 	strb.w	r3, [r5], #1
 8012628:	ec53 2b18 	vmov	r2, r3, d8
 801262c:	4606      	mov	r6, r0
 801262e:	460f      	mov	r7, r1
 8012630:	f7ee fa5c 	bl	8000aec <__aeabi_dcmplt>
 8012634:	2800      	cmp	r0, #0
 8012636:	d165      	bne.n	8012704 <_dtoa_r+0x63c>
 8012638:	4632      	mov	r2, r6
 801263a:	463b      	mov	r3, r7
 801263c:	4935      	ldr	r1, [pc, #212]	; (8012714 <_dtoa_r+0x64c>)
 801263e:	2000      	movs	r0, #0
 8012640:	f7ed fe2a 	bl	8000298 <__aeabi_dsub>
 8012644:	ec53 2b18 	vmov	r2, r3, d8
 8012648:	f7ee fa50 	bl	8000aec <__aeabi_dcmplt>
 801264c:	2800      	cmp	r0, #0
 801264e:	f040 80b9 	bne.w	80127c4 <_dtoa_r+0x6fc>
 8012652:	9b02      	ldr	r3, [sp, #8]
 8012654:	429d      	cmp	r5, r3
 8012656:	f43f af75 	beq.w	8012544 <_dtoa_r+0x47c>
 801265a:	4b2f      	ldr	r3, [pc, #188]	; (8012718 <_dtoa_r+0x650>)
 801265c:	ec51 0b18 	vmov	r0, r1, d8
 8012660:	2200      	movs	r2, #0
 8012662:	f7ed ffd1 	bl	8000608 <__aeabi_dmul>
 8012666:	4b2c      	ldr	r3, [pc, #176]	; (8012718 <_dtoa_r+0x650>)
 8012668:	ec41 0b18 	vmov	d8, r0, r1
 801266c:	2200      	movs	r2, #0
 801266e:	4630      	mov	r0, r6
 8012670:	4639      	mov	r1, r7
 8012672:	f7ed ffc9 	bl	8000608 <__aeabi_dmul>
 8012676:	4606      	mov	r6, r0
 8012678:	460f      	mov	r7, r1
 801267a:	e7c4      	b.n	8012606 <_dtoa_r+0x53e>
 801267c:	ec51 0b17 	vmov	r0, r1, d7
 8012680:	f7ed ffc2 	bl	8000608 <__aeabi_dmul>
 8012684:	9b02      	ldr	r3, [sp, #8]
 8012686:	9d00      	ldr	r5, [sp, #0]
 8012688:	930c      	str	r3, [sp, #48]	; 0x30
 801268a:	ec41 0b18 	vmov	d8, r0, r1
 801268e:	4639      	mov	r1, r7
 8012690:	4630      	mov	r0, r6
 8012692:	f7ee fa69 	bl	8000b68 <__aeabi_d2iz>
 8012696:	9011      	str	r0, [sp, #68]	; 0x44
 8012698:	f7ed ff4c 	bl	8000534 <__aeabi_i2d>
 801269c:	4602      	mov	r2, r0
 801269e:	460b      	mov	r3, r1
 80126a0:	4630      	mov	r0, r6
 80126a2:	4639      	mov	r1, r7
 80126a4:	f7ed fdf8 	bl	8000298 <__aeabi_dsub>
 80126a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80126aa:	3330      	adds	r3, #48	; 0x30
 80126ac:	f805 3b01 	strb.w	r3, [r5], #1
 80126b0:	9b02      	ldr	r3, [sp, #8]
 80126b2:	429d      	cmp	r5, r3
 80126b4:	4606      	mov	r6, r0
 80126b6:	460f      	mov	r7, r1
 80126b8:	f04f 0200 	mov.w	r2, #0
 80126bc:	d134      	bne.n	8012728 <_dtoa_r+0x660>
 80126be:	4b19      	ldr	r3, [pc, #100]	; (8012724 <_dtoa_r+0x65c>)
 80126c0:	ec51 0b18 	vmov	r0, r1, d8
 80126c4:	f7ed fdea 	bl	800029c <__adddf3>
 80126c8:	4602      	mov	r2, r0
 80126ca:	460b      	mov	r3, r1
 80126cc:	4630      	mov	r0, r6
 80126ce:	4639      	mov	r1, r7
 80126d0:	f7ee fa2a 	bl	8000b28 <__aeabi_dcmpgt>
 80126d4:	2800      	cmp	r0, #0
 80126d6:	d175      	bne.n	80127c4 <_dtoa_r+0x6fc>
 80126d8:	ec53 2b18 	vmov	r2, r3, d8
 80126dc:	4911      	ldr	r1, [pc, #68]	; (8012724 <_dtoa_r+0x65c>)
 80126de:	2000      	movs	r0, #0
 80126e0:	f7ed fdda 	bl	8000298 <__aeabi_dsub>
 80126e4:	4602      	mov	r2, r0
 80126e6:	460b      	mov	r3, r1
 80126e8:	4630      	mov	r0, r6
 80126ea:	4639      	mov	r1, r7
 80126ec:	f7ee f9fe 	bl	8000aec <__aeabi_dcmplt>
 80126f0:	2800      	cmp	r0, #0
 80126f2:	f43f af27 	beq.w	8012544 <_dtoa_r+0x47c>
 80126f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80126f8:	1e6b      	subs	r3, r5, #1
 80126fa:	930c      	str	r3, [sp, #48]	; 0x30
 80126fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012700:	2b30      	cmp	r3, #48	; 0x30
 8012702:	d0f8      	beq.n	80126f6 <_dtoa_r+0x62e>
 8012704:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012708:	e04a      	b.n	80127a0 <_dtoa_r+0x6d8>
 801270a:	bf00      	nop
 801270c:	08016908 	.word	0x08016908
 8012710:	080168e0 	.word	0x080168e0
 8012714:	3ff00000 	.word	0x3ff00000
 8012718:	40240000 	.word	0x40240000
 801271c:	401c0000 	.word	0x401c0000
 8012720:	40140000 	.word	0x40140000
 8012724:	3fe00000 	.word	0x3fe00000
 8012728:	4baf      	ldr	r3, [pc, #700]	; (80129e8 <_dtoa_r+0x920>)
 801272a:	f7ed ff6d 	bl	8000608 <__aeabi_dmul>
 801272e:	4606      	mov	r6, r0
 8012730:	460f      	mov	r7, r1
 8012732:	e7ac      	b.n	801268e <_dtoa_r+0x5c6>
 8012734:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012738:	9d00      	ldr	r5, [sp, #0]
 801273a:	4642      	mov	r2, r8
 801273c:	464b      	mov	r3, r9
 801273e:	4630      	mov	r0, r6
 8012740:	4639      	mov	r1, r7
 8012742:	f7ee f88b 	bl	800085c <__aeabi_ddiv>
 8012746:	f7ee fa0f 	bl	8000b68 <__aeabi_d2iz>
 801274a:	9002      	str	r0, [sp, #8]
 801274c:	f7ed fef2 	bl	8000534 <__aeabi_i2d>
 8012750:	4642      	mov	r2, r8
 8012752:	464b      	mov	r3, r9
 8012754:	f7ed ff58 	bl	8000608 <__aeabi_dmul>
 8012758:	4602      	mov	r2, r0
 801275a:	460b      	mov	r3, r1
 801275c:	4630      	mov	r0, r6
 801275e:	4639      	mov	r1, r7
 8012760:	f7ed fd9a 	bl	8000298 <__aeabi_dsub>
 8012764:	9e02      	ldr	r6, [sp, #8]
 8012766:	9f01      	ldr	r7, [sp, #4]
 8012768:	3630      	adds	r6, #48	; 0x30
 801276a:	f805 6b01 	strb.w	r6, [r5], #1
 801276e:	9e00      	ldr	r6, [sp, #0]
 8012770:	1bae      	subs	r6, r5, r6
 8012772:	42b7      	cmp	r7, r6
 8012774:	4602      	mov	r2, r0
 8012776:	460b      	mov	r3, r1
 8012778:	d137      	bne.n	80127ea <_dtoa_r+0x722>
 801277a:	f7ed fd8f 	bl	800029c <__adddf3>
 801277e:	4642      	mov	r2, r8
 8012780:	464b      	mov	r3, r9
 8012782:	4606      	mov	r6, r0
 8012784:	460f      	mov	r7, r1
 8012786:	f7ee f9cf 	bl	8000b28 <__aeabi_dcmpgt>
 801278a:	b9c8      	cbnz	r0, 80127c0 <_dtoa_r+0x6f8>
 801278c:	4642      	mov	r2, r8
 801278e:	464b      	mov	r3, r9
 8012790:	4630      	mov	r0, r6
 8012792:	4639      	mov	r1, r7
 8012794:	f7ee f9a0 	bl	8000ad8 <__aeabi_dcmpeq>
 8012798:	b110      	cbz	r0, 80127a0 <_dtoa_r+0x6d8>
 801279a:	9b02      	ldr	r3, [sp, #8]
 801279c:	07d9      	lsls	r1, r3, #31
 801279e:	d40f      	bmi.n	80127c0 <_dtoa_r+0x6f8>
 80127a0:	4620      	mov	r0, r4
 80127a2:	4659      	mov	r1, fp
 80127a4:	f001 f882 	bl	80138ac <_Bfree>
 80127a8:	2300      	movs	r3, #0
 80127aa:	702b      	strb	r3, [r5, #0]
 80127ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80127ae:	f10a 0001 	add.w	r0, sl, #1
 80127b2:	6018      	str	r0, [r3, #0]
 80127b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	f43f acd8 	beq.w	801216c <_dtoa_r+0xa4>
 80127bc:	601d      	str	r5, [r3, #0]
 80127be:	e4d5      	b.n	801216c <_dtoa_r+0xa4>
 80127c0:	f8cd a01c 	str.w	sl, [sp, #28]
 80127c4:	462b      	mov	r3, r5
 80127c6:	461d      	mov	r5, r3
 80127c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80127cc:	2a39      	cmp	r2, #57	; 0x39
 80127ce:	d108      	bne.n	80127e2 <_dtoa_r+0x71a>
 80127d0:	9a00      	ldr	r2, [sp, #0]
 80127d2:	429a      	cmp	r2, r3
 80127d4:	d1f7      	bne.n	80127c6 <_dtoa_r+0x6fe>
 80127d6:	9a07      	ldr	r2, [sp, #28]
 80127d8:	9900      	ldr	r1, [sp, #0]
 80127da:	3201      	adds	r2, #1
 80127dc:	9207      	str	r2, [sp, #28]
 80127de:	2230      	movs	r2, #48	; 0x30
 80127e0:	700a      	strb	r2, [r1, #0]
 80127e2:	781a      	ldrb	r2, [r3, #0]
 80127e4:	3201      	adds	r2, #1
 80127e6:	701a      	strb	r2, [r3, #0]
 80127e8:	e78c      	b.n	8012704 <_dtoa_r+0x63c>
 80127ea:	4b7f      	ldr	r3, [pc, #508]	; (80129e8 <_dtoa_r+0x920>)
 80127ec:	2200      	movs	r2, #0
 80127ee:	f7ed ff0b 	bl	8000608 <__aeabi_dmul>
 80127f2:	2200      	movs	r2, #0
 80127f4:	2300      	movs	r3, #0
 80127f6:	4606      	mov	r6, r0
 80127f8:	460f      	mov	r7, r1
 80127fa:	f7ee f96d 	bl	8000ad8 <__aeabi_dcmpeq>
 80127fe:	2800      	cmp	r0, #0
 8012800:	d09b      	beq.n	801273a <_dtoa_r+0x672>
 8012802:	e7cd      	b.n	80127a0 <_dtoa_r+0x6d8>
 8012804:	9a08      	ldr	r2, [sp, #32]
 8012806:	2a00      	cmp	r2, #0
 8012808:	f000 80c4 	beq.w	8012994 <_dtoa_r+0x8cc>
 801280c:	9a05      	ldr	r2, [sp, #20]
 801280e:	2a01      	cmp	r2, #1
 8012810:	f300 80a8 	bgt.w	8012964 <_dtoa_r+0x89c>
 8012814:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012816:	2a00      	cmp	r2, #0
 8012818:	f000 80a0 	beq.w	801295c <_dtoa_r+0x894>
 801281c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012820:	9e06      	ldr	r6, [sp, #24]
 8012822:	4645      	mov	r5, r8
 8012824:	9a04      	ldr	r2, [sp, #16]
 8012826:	2101      	movs	r1, #1
 8012828:	441a      	add	r2, r3
 801282a:	4620      	mov	r0, r4
 801282c:	4498      	add	r8, r3
 801282e:	9204      	str	r2, [sp, #16]
 8012830:	f001 f942 	bl	8013ab8 <__i2b>
 8012834:	4607      	mov	r7, r0
 8012836:	2d00      	cmp	r5, #0
 8012838:	dd0b      	ble.n	8012852 <_dtoa_r+0x78a>
 801283a:	9b04      	ldr	r3, [sp, #16]
 801283c:	2b00      	cmp	r3, #0
 801283e:	dd08      	ble.n	8012852 <_dtoa_r+0x78a>
 8012840:	42ab      	cmp	r3, r5
 8012842:	9a04      	ldr	r2, [sp, #16]
 8012844:	bfa8      	it	ge
 8012846:	462b      	movge	r3, r5
 8012848:	eba8 0803 	sub.w	r8, r8, r3
 801284c:	1aed      	subs	r5, r5, r3
 801284e:	1ad3      	subs	r3, r2, r3
 8012850:	9304      	str	r3, [sp, #16]
 8012852:	9b06      	ldr	r3, [sp, #24]
 8012854:	b1fb      	cbz	r3, 8012896 <_dtoa_r+0x7ce>
 8012856:	9b08      	ldr	r3, [sp, #32]
 8012858:	2b00      	cmp	r3, #0
 801285a:	f000 809f 	beq.w	801299c <_dtoa_r+0x8d4>
 801285e:	2e00      	cmp	r6, #0
 8012860:	dd11      	ble.n	8012886 <_dtoa_r+0x7be>
 8012862:	4639      	mov	r1, r7
 8012864:	4632      	mov	r2, r6
 8012866:	4620      	mov	r0, r4
 8012868:	f001 f9e2 	bl	8013c30 <__pow5mult>
 801286c:	465a      	mov	r2, fp
 801286e:	4601      	mov	r1, r0
 8012870:	4607      	mov	r7, r0
 8012872:	4620      	mov	r0, r4
 8012874:	f001 f936 	bl	8013ae4 <__multiply>
 8012878:	4659      	mov	r1, fp
 801287a:	9007      	str	r0, [sp, #28]
 801287c:	4620      	mov	r0, r4
 801287e:	f001 f815 	bl	80138ac <_Bfree>
 8012882:	9b07      	ldr	r3, [sp, #28]
 8012884:	469b      	mov	fp, r3
 8012886:	9b06      	ldr	r3, [sp, #24]
 8012888:	1b9a      	subs	r2, r3, r6
 801288a:	d004      	beq.n	8012896 <_dtoa_r+0x7ce>
 801288c:	4659      	mov	r1, fp
 801288e:	4620      	mov	r0, r4
 8012890:	f001 f9ce 	bl	8013c30 <__pow5mult>
 8012894:	4683      	mov	fp, r0
 8012896:	2101      	movs	r1, #1
 8012898:	4620      	mov	r0, r4
 801289a:	f001 f90d 	bl	8013ab8 <__i2b>
 801289e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	4606      	mov	r6, r0
 80128a4:	dd7c      	ble.n	80129a0 <_dtoa_r+0x8d8>
 80128a6:	461a      	mov	r2, r3
 80128a8:	4601      	mov	r1, r0
 80128aa:	4620      	mov	r0, r4
 80128ac:	f001 f9c0 	bl	8013c30 <__pow5mult>
 80128b0:	9b05      	ldr	r3, [sp, #20]
 80128b2:	2b01      	cmp	r3, #1
 80128b4:	4606      	mov	r6, r0
 80128b6:	dd76      	ble.n	80129a6 <_dtoa_r+0x8de>
 80128b8:	2300      	movs	r3, #0
 80128ba:	9306      	str	r3, [sp, #24]
 80128bc:	6933      	ldr	r3, [r6, #16]
 80128be:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80128c2:	6918      	ldr	r0, [r3, #16]
 80128c4:	f001 f8a8 	bl	8013a18 <__hi0bits>
 80128c8:	f1c0 0020 	rsb	r0, r0, #32
 80128cc:	9b04      	ldr	r3, [sp, #16]
 80128ce:	4418      	add	r0, r3
 80128d0:	f010 001f 	ands.w	r0, r0, #31
 80128d4:	f000 8086 	beq.w	80129e4 <_dtoa_r+0x91c>
 80128d8:	f1c0 0320 	rsb	r3, r0, #32
 80128dc:	2b04      	cmp	r3, #4
 80128de:	dd7f      	ble.n	80129e0 <_dtoa_r+0x918>
 80128e0:	f1c0 001c 	rsb	r0, r0, #28
 80128e4:	9b04      	ldr	r3, [sp, #16]
 80128e6:	4403      	add	r3, r0
 80128e8:	4480      	add	r8, r0
 80128ea:	4405      	add	r5, r0
 80128ec:	9304      	str	r3, [sp, #16]
 80128ee:	f1b8 0f00 	cmp.w	r8, #0
 80128f2:	dd05      	ble.n	8012900 <_dtoa_r+0x838>
 80128f4:	4659      	mov	r1, fp
 80128f6:	4642      	mov	r2, r8
 80128f8:	4620      	mov	r0, r4
 80128fa:	f001 f9f3 	bl	8013ce4 <__lshift>
 80128fe:	4683      	mov	fp, r0
 8012900:	9b04      	ldr	r3, [sp, #16]
 8012902:	2b00      	cmp	r3, #0
 8012904:	dd05      	ble.n	8012912 <_dtoa_r+0x84a>
 8012906:	4631      	mov	r1, r6
 8012908:	461a      	mov	r2, r3
 801290a:	4620      	mov	r0, r4
 801290c:	f001 f9ea 	bl	8013ce4 <__lshift>
 8012910:	4606      	mov	r6, r0
 8012912:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012914:	2b00      	cmp	r3, #0
 8012916:	d069      	beq.n	80129ec <_dtoa_r+0x924>
 8012918:	4631      	mov	r1, r6
 801291a:	4658      	mov	r0, fp
 801291c:	f001 fa4e 	bl	8013dbc <__mcmp>
 8012920:	2800      	cmp	r0, #0
 8012922:	da63      	bge.n	80129ec <_dtoa_r+0x924>
 8012924:	2300      	movs	r3, #0
 8012926:	4659      	mov	r1, fp
 8012928:	220a      	movs	r2, #10
 801292a:	4620      	mov	r0, r4
 801292c:	f000 ffe0 	bl	80138f0 <__multadd>
 8012930:	9b08      	ldr	r3, [sp, #32]
 8012932:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012936:	4683      	mov	fp, r0
 8012938:	2b00      	cmp	r3, #0
 801293a:	f000 818f 	beq.w	8012c5c <_dtoa_r+0xb94>
 801293e:	4639      	mov	r1, r7
 8012940:	2300      	movs	r3, #0
 8012942:	220a      	movs	r2, #10
 8012944:	4620      	mov	r0, r4
 8012946:	f000 ffd3 	bl	80138f0 <__multadd>
 801294a:	f1b9 0f00 	cmp.w	r9, #0
 801294e:	4607      	mov	r7, r0
 8012950:	f300 808e 	bgt.w	8012a70 <_dtoa_r+0x9a8>
 8012954:	9b05      	ldr	r3, [sp, #20]
 8012956:	2b02      	cmp	r3, #2
 8012958:	dc50      	bgt.n	80129fc <_dtoa_r+0x934>
 801295a:	e089      	b.n	8012a70 <_dtoa_r+0x9a8>
 801295c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801295e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012962:	e75d      	b.n	8012820 <_dtoa_r+0x758>
 8012964:	9b01      	ldr	r3, [sp, #4]
 8012966:	1e5e      	subs	r6, r3, #1
 8012968:	9b06      	ldr	r3, [sp, #24]
 801296a:	42b3      	cmp	r3, r6
 801296c:	bfbf      	itttt	lt
 801296e:	9b06      	ldrlt	r3, [sp, #24]
 8012970:	9606      	strlt	r6, [sp, #24]
 8012972:	1af2      	sublt	r2, r6, r3
 8012974:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8012976:	bfb6      	itet	lt
 8012978:	189b      	addlt	r3, r3, r2
 801297a:	1b9e      	subge	r6, r3, r6
 801297c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801297e:	9b01      	ldr	r3, [sp, #4]
 8012980:	bfb8      	it	lt
 8012982:	2600      	movlt	r6, #0
 8012984:	2b00      	cmp	r3, #0
 8012986:	bfb5      	itete	lt
 8012988:	eba8 0503 	sublt.w	r5, r8, r3
 801298c:	9b01      	ldrge	r3, [sp, #4]
 801298e:	2300      	movlt	r3, #0
 8012990:	4645      	movge	r5, r8
 8012992:	e747      	b.n	8012824 <_dtoa_r+0x75c>
 8012994:	9e06      	ldr	r6, [sp, #24]
 8012996:	9f08      	ldr	r7, [sp, #32]
 8012998:	4645      	mov	r5, r8
 801299a:	e74c      	b.n	8012836 <_dtoa_r+0x76e>
 801299c:	9a06      	ldr	r2, [sp, #24]
 801299e:	e775      	b.n	801288c <_dtoa_r+0x7c4>
 80129a0:	9b05      	ldr	r3, [sp, #20]
 80129a2:	2b01      	cmp	r3, #1
 80129a4:	dc18      	bgt.n	80129d8 <_dtoa_r+0x910>
 80129a6:	9b02      	ldr	r3, [sp, #8]
 80129a8:	b9b3      	cbnz	r3, 80129d8 <_dtoa_r+0x910>
 80129aa:	9b03      	ldr	r3, [sp, #12]
 80129ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80129b0:	b9a3      	cbnz	r3, 80129dc <_dtoa_r+0x914>
 80129b2:	9b03      	ldr	r3, [sp, #12]
 80129b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80129b8:	0d1b      	lsrs	r3, r3, #20
 80129ba:	051b      	lsls	r3, r3, #20
 80129bc:	b12b      	cbz	r3, 80129ca <_dtoa_r+0x902>
 80129be:	9b04      	ldr	r3, [sp, #16]
 80129c0:	3301      	adds	r3, #1
 80129c2:	9304      	str	r3, [sp, #16]
 80129c4:	f108 0801 	add.w	r8, r8, #1
 80129c8:	2301      	movs	r3, #1
 80129ca:	9306      	str	r3, [sp, #24]
 80129cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	f47f af74 	bne.w	80128bc <_dtoa_r+0x7f4>
 80129d4:	2001      	movs	r0, #1
 80129d6:	e779      	b.n	80128cc <_dtoa_r+0x804>
 80129d8:	2300      	movs	r3, #0
 80129da:	e7f6      	b.n	80129ca <_dtoa_r+0x902>
 80129dc:	9b02      	ldr	r3, [sp, #8]
 80129de:	e7f4      	b.n	80129ca <_dtoa_r+0x902>
 80129e0:	d085      	beq.n	80128ee <_dtoa_r+0x826>
 80129e2:	4618      	mov	r0, r3
 80129e4:	301c      	adds	r0, #28
 80129e6:	e77d      	b.n	80128e4 <_dtoa_r+0x81c>
 80129e8:	40240000 	.word	0x40240000
 80129ec:	9b01      	ldr	r3, [sp, #4]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	dc38      	bgt.n	8012a64 <_dtoa_r+0x99c>
 80129f2:	9b05      	ldr	r3, [sp, #20]
 80129f4:	2b02      	cmp	r3, #2
 80129f6:	dd35      	ble.n	8012a64 <_dtoa_r+0x99c>
 80129f8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80129fc:	f1b9 0f00 	cmp.w	r9, #0
 8012a00:	d10d      	bne.n	8012a1e <_dtoa_r+0x956>
 8012a02:	4631      	mov	r1, r6
 8012a04:	464b      	mov	r3, r9
 8012a06:	2205      	movs	r2, #5
 8012a08:	4620      	mov	r0, r4
 8012a0a:	f000 ff71 	bl	80138f0 <__multadd>
 8012a0e:	4601      	mov	r1, r0
 8012a10:	4606      	mov	r6, r0
 8012a12:	4658      	mov	r0, fp
 8012a14:	f001 f9d2 	bl	8013dbc <__mcmp>
 8012a18:	2800      	cmp	r0, #0
 8012a1a:	f73f adbd 	bgt.w	8012598 <_dtoa_r+0x4d0>
 8012a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a20:	9d00      	ldr	r5, [sp, #0]
 8012a22:	ea6f 0a03 	mvn.w	sl, r3
 8012a26:	f04f 0800 	mov.w	r8, #0
 8012a2a:	4631      	mov	r1, r6
 8012a2c:	4620      	mov	r0, r4
 8012a2e:	f000 ff3d 	bl	80138ac <_Bfree>
 8012a32:	2f00      	cmp	r7, #0
 8012a34:	f43f aeb4 	beq.w	80127a0 <_dtoa_r+0x6d8>
 8012a38:	f1b8 0f00 	cmp.w	r8, #0
 8012a3c:	d005      	beq.n	8012a4a <_dtoa_r+0x982>
 8012a3e:	45b8      	cmp	r8, r7
 8012a40:	d003      	beq.n	8012a4a <_dtoa_r+0x982>
 8012a42:	4641      	mov	r1, r8
 8012a44:	4620      	mov	r0, r4
 8012a46:	f000 ff31 	bl	80138ac <_Bfree>
 8012a4a:	4639      	mov	r1, r7
 8012a4c:	4620      	mov	r0, r4
 8012a4e:	f000 ff2d 	bl	80138ac <_Bfree>
 8012a52:	e6a5      	b.n	80127a0 <_dtoa_r+0x6d8>
 8012a54:	2600      	movs	r6, #0
 8012a56:	4637      	mov	r7, r6
 8012a58:	e7e1      	b.n	8012a1e <_dtoa_r+0x956>
 8012a5a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012a5c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012a60:	4637      	mov	r7, r6
 8012a62:	e599      	b.n	8012598 <_dtoa_r+0x4d0>
 8012a64:	9b08      	ldr	r3, [sp, #32]
 8012a66:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	f000 80fd 	beq.w	8012c6a <_dtoa_r+0xba2>
 8012a70:	2d00      	cmp	r5, #0
 8012a72:	dd05      	ble.n	8012a80 <_dtoa_r+0x9b8>
 8012a74:	4639      	mov	r1, r7
 8012a76:	462a      	mov	r2, r5
 8012a78:	4620      	mov	r0, r4
 8012a7a:	f001 f933 	bl	8013ce4 <__lshift>
 8012a7e:	4607      	mov	r7, r0
 8012a80:	9b06      	ldr	r3, [sp, #24]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d05c      	beq.n	8012b40 <_dtoa_r+0xa78>
 8012a86:	6879      	ldr	r1, [r7, #4]
 8012a88:	4620      	mov	r0, r4
 8012a8a:	f000 fecf 	bl	801382c <_Balloc>
 8012a8e:	4605      	mov	r5, r0
 8012a90:	b928      	cbnz	r0, 8012a9e <_dtoa_r+0x9d6>
 8012a92:	4b80      	ldr	r3, [pc, #512]	; (8012c94 <_dtoa_r+0xbcc>)
 8012a94:	4602      	mov	r2, r0
 8012a96:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012a9a:	f7ff bb2e 	b.w	80120fa <_dtoa_r+0x32>
 8012a9e:	693a      	ldr	r2, [r7, #16]
 8012aa0:	3202      	adds	r2, #2
 8012aa2:	0092      	lsls	r2, r2, #2
 8012aa4:	f107 010c 	add.w	r1, r7, #12
 8012aa8:	300c      	adds	r0, #12
 8012aaa:	f7fd fadf 	bl	801006c <memcpy>
 8012aae:	2201      	movs	r2, #1
 8012ab0:	4629      	mov	r1, r5
 8012ab2:	4620      	mov	r0, r4
 8012ab4:	f001 f916 	bl	8013ce4 <__lshift>
 8012ab8:	9b00      	ldr	r3, [sp, #0]
 8012aba:	3301      	adds	r3, #1
 8012abc:	9301      	str	r3, [sp, #4]
 8012abe:	9b00      	ldr	r3, [sp, #0]
 8012ac0:	444b      	add	r3, r9
 8012ac2:	9307      	str	r3, [sp, #28]
 8012ac4:	9b02      	ldr	r3, [sp, #8]
 8012ac6:	f003 0301 	and.w	r3, r3, #1
 8012aca:	46b8      	mov	r8, r7
 8012acc:	9306      	str	r3, [sp, #24]
 8012ace:	4607      	mov	r7, r0
 8012ad0:	9b01      	ldr	r3, [sp, #4]
 8012ad2:	4631      	mov	r1, r6
 8012ad4:	3b01      	subs	r3, #1
 8012ad6:	4658      	mov	r0, fp
 8012ad8:	9302      	str	r3, [sp, #8]
 8012ada:	f7ff fa6a 	bl	8011fb2 <quorem>
 8012ade:	4603      	mov	r3, r0
 8012ae0:	3330      	adds	r3, #48	; 0x30
 8012ae2:	9004      	str	r0, [sp, #16]
 8012ae4:	4641      	mov	r1, r8
 8012ae6:	4658      	mov	r0, fp
 8012ae8:	9308      	str	r3, [sp, #32]
 8012aea:	f001 f967 	bl	8013dbc <__mcmp>
 8012aee:	463a      	mov	r2, r7
 8012af0:	4681      	mov	r9, r0
 8012af2:	4631      	mov	r1, r6
 8012af4:	4620      	mov	r0, r4
 8012af6:	f001 f97d 	bl	8013df4 <__mdiff>
 8012afa:	68c2      	ldr	r2, [r0, #12]
 8012afc:	9b08      	ldr	r3, [sp, #32]
 8012afe:	4605      	mov	r5, r0
 8012b00:	bb02      	cbnz	r2, 8012b44 <_dtoa_r+0xa7c>
 8012b02:	4601      	mov	r1, r0
 8012b04:	4658      	mov	r0, fp
 8012b06:	f001 f959 	bl	8013dbc <__mcmp>
 8012b0a:	9b08      	ldr	r3, [sp, #32]
 8012b0c:	4602      	mov	r2, r0
 8012b0e:	4629      	mov	r1, r5
 8012b10:	4620      	mov	r0, r4
 8012b12:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8012b16:	f000 fec9 	bl	80138ac <_Bfree>
 8012b1a:	9b05      	ldr	r3, [sp, #20]
 8012b1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b1e:	9d01      	ldr	r5, [sp, #4]
 8012b20:	ea43 0102 	orr.w	r1, r3, r2
 8012b24:	9b06      	ldr	r3, [sp, #24]
 8012b26:	430b      	orrs	r3, r1
 8012b28:	9b08      	ldr	r3, [sp, #32]
 8012b2a:	d10d      	bne.n	8012b48 <_dtoa_r+0xa80>
 8012b2c:	2b39      	cmp	r3, #57	; 0x39
 8012b2e:	d029      	beq.n	8012b84 <_dtoa_r+0xabc>
 8012b30:	f1b9 0f00 	cmp.w	r9, #0
 8012b34:	dd01      	ble.n	8012b3a <_dtoa_r+0xa72>
 8012b36:	9b04      	ldr	r3, [sp, #16]
 8012b38:	3331      	adds	r3, #49	; 0x31
 8012b3a:	9a02      	ldr	r2, [sp, #8]
 8012b3c:	7013      	strb	r3, [r2, #0]
 8012b3e:	e774      	b.n	8012a2a <_dtoa_r+0x962>
 8012b40:	4638      	mov	r0, r7
 8012b42:	e7b9      	b.n	8012ab8 <_dtoa_r+0x9f0>
 8012b44:	2201      	movs	r2, #1
 8012b46:	e7e2      	b.n	8012b0e <_dtoa_r+0xa46>
 8012b48:	f1b9 0f00 	cmp.w	r9, #0
 8012b4c:	db06      	blt.n	8012b5c <_dtoa_r+0xa94>
 8012b4e:	9905      	ldr	r1, [sp, #20]
 8012b50:	ea41 0909 	orr.w	r9, r1, r9
 8012b54:	9906      	ldr	r1, [sp, #24]
 8012b56:	ea59 0101 	orrs.w	r1, r9, r1
 8012b5a:	d120      	bne.n	8012b9e <_dtoa_r+0xad6>
 8012b5c:	2a00      	cmp	r2, #0
 8012b5e:	ddec      	ble.n	8012b3a <_dtoa_r+0xa72>
 8012b60:	4659      	mov	r1, fp
 8012b62:	2201      	movs	r2, #1
 8012b64:	4620      	mov	r0, r4
 8012b66:	9301      	str	r3, [sp, #4]
 8012b68:	f001 f8bc 	bl	8013ce4 <__lshift>
 8012b6c:	4631      	mov	r1, r6
 8012b6e:	4683      	mov	fp, r0
 8012b70:	f001 f924 	bl	8013dbc <__mcmp>
 8012b74:	2800      	cmp	r0, #0
 8012b76:	9b01      	ldr	r3, [sp, #4]
 8012b78:	dc02      	bgt.n	8012b80 <_dtoa_r+0xab8>
 8012b7a:	d1de      	bne.n	8012b3a <_dtoa_r+0xa72>
 8012b7c:	07da      	lsls	r2, r3, #31
 8012b7e:	d5dc      	bpl.n	8012b3a <_dtoa_r+0xa72>
 8012b80:	2b39      	cmp	r3, #57	; 0x39
 8012b82:	d1d8      	bne.n	8012b36 <_dtoa_r+0xa6e>
 8012b84:	9a02      	ldr	r2, [sp, #8]
 8012b86:	2339      	movs	r3, #57	; 0x39
 8012b88:	7013      	strb	r3, [r2, #0]
 8012b8a:	462b      	mov	r3, r5
 8012b8c:	461d      	mov	r5, r3
 8012b8e:	3b01      	subs	r3, #1
 8012b90:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012b94:	2a39      	cmp	r2, #57	; 0x39
 8012b96:	d050      	beq.n	8012c3a <_dtoa_r+0xb72>
 8012b98:	3201      	adds	r2, #1
 8012b9a:	701a      	strb	r2, [r3, #0]
 8012b9c:	e745      	b.n	8012a2a <_dtoa_r+0x962>
 8012b9e:	2a00      	cmp	r2, #0
 8012ba0:	dd03      	ble.n	8012baa <_dtoa_r+0xae2>
 8012ba2:	2b39      	cmp	r3, #57	; 0x39
 8012ba4:	d0ee      	beq.n	8012b84 <_dtoa_r+0xabc>
 8012ba6:	3301      	adds	r3, #1
 8012ba8:	e7c7      	b.n	8012b3a <_dtoa_r+0xa72>
 8012baa:	9a01      	ldr	r2, [sp, #4]
 8012bac:	9907      	ldr	r1, [sp, #28]
 8012bae:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012bb2:	428a      	cmp	r2, r1
 8012bb4:	d02a      	beq.n	8012c0c <_dtoa_r+0xb44>
 8012bb6:	4659      	mov	r1, fp
 8012bb8:	2300      	movs	r3, #0
 8012bba:	220a      	movs	r2, #10
 8012bbc:	4620      	mov	r0, r4
 8012bbe:	f000 fe97 	bl	80138f0 <__multadd>
 8012bc2:	45b8      	cmp	r8, r7
 8012bc4:	4683      	mov	fp, r0
 8012bc6:	f04f 0300 	mov.w	r3, #0
 8012bca:	f04f 020a 	mov.w	r2, #10
 8012bce:	4641      	mov	r1, r8
 8012bd0:	4620      	mov	r0, r4
 8012bd2:	d107      	bne.n	8012be4 <_dtoa_r+0xb1c>
 8012bd4:	f000 fe8c 	bl	80138f0 <__multadd>
 8012bd8:	4680      	mov	r8, r0
 8012bda:	4607      	mov	r7, r0
 8012bdc:	9b01      	ldr	r3, [sp, #4]
 8012bde:	3301      	adds	r3, #1
 8012be0:	9301      	str	r3, [sp, #4]
 8012be2:	e775      	b.n	8012ad0 <_dtoa_r+0xa08>
 8012be4:	f000 fe84 	bl	80138f0 <__multadd>
 8012be8:	4639      	mov	r1, r7
 8012bea:	4680      	mov	r8, r0
 8012bec:	2300      	movs	r3, #0
 8012bee:	220a      	movs	r2, #10
 8012bf0:	4620      	mov	r0, r4
 8012bf2:	f000 fe7d 	bl	80138f0 <__multadd>
 8012bf6:	4607      	mov	r7, r0
 8012bf8:	e7f0      	b.n	8012bdc <_dtoa_r+0xb14>
 8012bfa:	f1b9 0f00 	cmp.w	r9, #0
 8012bfe:	9a00      	ldr	r2, [sp, #0]
 8012c00:	bfcc      	ite	gt
 8012c02:	464d      	movgt	r5, r9
 8012c04:	2501      	movle	r5, #1
 8012c06:	4415      	add	r5, r2
 8012c08:	f04f 0800 	mov.w	r8, #0
 8012c0c:	4659      	mov	r1, fp
 8012c0e:	2201      	movs	r2, #1
 8012c10:	4620      	mov	r0, r4
 8012c12:	9301      	str	r3, [sp, #4]
 8012c14:	f001 f866 	bl	8013ce4 <__lshift>
 8012c18:	4631      	mov	r1, r6
 8012c1a:	4683      	mov	fp, r0
 8012c1c:	f001 f8ce 	bl	8013dbc <__mcmp>
 8012c20:	2800      	cmp	r0, #0
 8012c22:	dcb2      	bgt.n	8012b8a <_dtoa_r+0xac2>
 8012c24:	d102      	bne.n	8012c2c <_dtoa_r+0xb64>
 8012c26:	9b01      	ldr	r3, [sp, #4]
 8012c28:	07db      	lsls	r3, r3, #31
 8012c2a:	d4ae      	bmi.n	8012b8a <_dtoa_r+0xac2>
 8012c2c:	462b      	mov	r3, r5
 8012c2e:	461d      	mov	r5, r3
 8012c30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012c34:	2a30      	cmp	r2, #48	; 0x30
 8012c36:	d0fa      	beq.n	8012c2e <_dtoa_r+0xb66>
 8012c38:	e6f7      	b.n	8012a2a <_dtoa_r+0x962>
 8012c3a:	9a00      	ldr	r2, [sp, #0]
 8012c3c:	429a      	cmp	r2, r3
 8012c3e:	d1a5      	bne.n	8012b8c <_dtoa_r+0xac4>
 8012c40:	f10a 0a01 	add.w	sl, sl, #1
 8012c44:	2331      	movs	r3, #49	; 0x31
 8012c46:	e779      	b.n	8012b3c <_dtoa_r+0xa74>
 8012c48:	4b13      	ldr	r3, [pc, #76]	; (8012c98 <_dtoa_r+0xbd0>)
 8012c4a:	f7ff baaf 	b.w	80121ac <_dtoa_r+0xe4>
 8012c4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	f47f aa86 	bne.w	8012162 <_dtoa_r+0x9a>
 8012c56:	4b11      	ldr	r3, [pc, #68]	; (8012c9c <_dtoa_r+0xbd4>)
 8012c58:	f7ff baa8 	b.w	80121ac <_dtoa_r+0xe4>
 8012c5c:	f1b9 0f00 	cmp.w	r9, #0
 8012c60:	dc03      	bgt.n	8012c6a <_dtoa_r+0xba2>
 8012c62:	9b05      	ldr	r3, [sp, #20]
 8012c64:	2b02      	cmp	r3, #2
 8012c66:	f73f aec9 	bgt.w	80129fc <_dtoa_r+0x934>
 8012c6a:	9d00      	ldr	r5, [sp, #0]
 8012c6c:	4631      	mov	r1, r6
 8012c6e:	4658      	mov	r0, fp
 8012c70:	f7ff f99f 	bl	8011fb2 <quorem>
 8012c74:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012c78:	f805 3b01 	strb.w	r3, [r5], #1
 8012c7c:	9a00      	ldr	r2, [sp, #0]
 8012c7e:	1aaa      	subs	r2, r5, r2
 8012c80:	4591      	cmp	r9, r2
 8012c82:	ddba      	ble.n	8012bfa <_dtoa_r+0xb32>
 8012c84:	4659      	mov	r1, fp
 8012c86:	2300      	movs	r3, #0
 8012c88:	220a      	movs	r2, #10
 8012c8a:	4620      	mov	r0, r4
 8012c8c:	f000 fe30 	bl	80138f0 <__multadd>
 8012c90:	4683      	mov	fp, r0
 8012c92:	e7eb      	b.n	8012c6c <_dtoa_r+0xba4>
 8012c94:	0801678b 	.word	0x0801678b
 8012c98:	0801668d 	.word	0x0801668d
 8012c9c:	08016708 	.word	0x08016708

08012ca0 <__sflush_r>:
 8012ca0:	898a      	ldrh	r2, [r1, #12]
 8012ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ca6:	4605      	mov	r5, r0
 8012ca8:	0710      	lsls	r0, r2, #28
 8012caa:	460c      	mov	r4, r1
 8012cac:	d458      	bmi.n	8012d60 <__sflush_r+0xc0>
 8012cae:	684b      	ldr	r3, [r1, #4]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	dc05      	bgt.n	8012cc0 <__sflush_r+0x20>
 8012cb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	dc02      	bgt.n	8012cc0 <__sflush_r+0x20>
 8012cba:	2000      	movs	r0, #0
 8012cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012cc2:	2e00      	cmp	r6, #0
 8012cc4:	d0f9      	beq.n	8012cba <__sflush_r+0x1a>
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012ccc:	682f      	ldr	r7, [r5, #0]
 8012cce:	602b      	str	r3, [r5, #0]
 8012cd0:	d032      	beq.n	8012d38 <__sflush_r+0x98>
 8012cd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012cd4:	89a3      	ldrh	r3, [r4, #12]
 8012cd6:	075a      	lsls	r2, r3, #29
 8012cd8:	d505      	bpl.n	8012ce6 <__sflush_r+0x46>
 8012cda:	6863      	ldr	r3, [r4, #4]
 8012cdc:	1ac0      	subs	r0, r0, r3
 8012cde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012ce0:	b10b      	cbz	r3, 8012ce6 <__sflush_r+0x46>
 8012ce2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012ce4:	1ac0      	subs	r0, r0, r3
 8012ce6:	2300      	movs	r3, #0
 8012ce8:	4602      	mov	r2, r0
 8012cea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012cec:	6a21      	ldr	r1, [r4, #32]
 8012cee:	4628      	mov	r0, r5
 8012cf0:	47b0      	blx	r6
 8012cf2:	1c43      	adds	r3, r0, #1
 8012cf4:	89a3      	ldrh	r3, [r4, #12]
 8012cf6:	d106      	bne.n	8012d06 <__sflush_r+0x66>
 8012cf8:	6829      	ldr	r1, [r5, #0]
 8012cfa:	291d      	cmp	r1, #29
 8012cfc:	d82c      	bhi.n	8012d58 <__sflush_r+0xb8>
 8012cfe:	4a2a      	ldr	r2, [pc, #168]	; (8012da8 <__sflush_r+0x108>)
 8012d00:	40ca      	lsrs	r2, r1
 8012d02:	07d6      	lsls	r6, r2, #31
 8012d04:	d528      	bpl.n	8012d58 <__sflush_r+0xb8>
 8012d06:	2200      	movs	r2, #0
 8012d08:	6062      	str	r2, [r4, #4]
 8012d0a:	04d9      	lsls	r1, r3, #19
 8012d0c:	6922      	ldr	r2, [r4, #16]
 8012d0e:	6022      	str	r2, [r4, #0]
 8012d10:	d504      	bpl.n	8012d1c <__sflush_r+0x7c>
 8012d12:	1c42      	adds	r2, r0, #1
 8012d14:	d101      	bne.n	8012d1a <__sflush_r+0x7a>
 8012d16:	682b      	ldr	r3, [r5, #0]
 8012d18:	b903      	cbnz	r3, 8012d1c <__sflush_r+0x7c>
 8012d1a:	6560      	str	r0, [r4, #84]	; 0x54
 8012d1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012d1e:	602f      	str	r7, [r5, #0]
 8012d20:	2900      	cmp	r1, #0
 8012d22:	d0ca      	beq.n	8012cba <__sflush_r+0x1a>
 8012d24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012d28:	4299      	cmp	r1, r3
 8012d2a:	d002      	beq.n	8012d32 <__sflush_r+0x92>
 8012d2c:	4628      	mov	r0, r5
 8012d2e:	f001 fa47 	bl	80141c0 <_free_r>
 8012d32:	2000      	movs	r0, #0
 8012d34:	6360      	str	r0, [r4, #52]	; 0x34
 8012d36:	e7c1      	b.n	8012cbc <__sflush_r+0x1c>
 8012d38:	6a21      	ldr	r1, [r4, #32]
 8012d3a:	2301      	movs	r3, #1
 8012d3c:	4628      	mov	r0, r5
 8012d3e:	47b0      	blx	r6
 8012d40:	1c41      	adds	r1, r0, #1
 8012d42:	d1c7      	bne.n	8012cd4 <__sflush_r+0x34>
 8012d44:	682b      	ldr	r3, [r5, #0]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d0c4      	beq.n	8012cd4 <__sflush_r+0x34>
 8012d4a:	2b1d      	cmp	r3, #29
 8012d4c:	d001      	beq.n	8012d52 <__sflush_r+0xb2>
 8012d4e:	2b16      	cmp	r3, #22
 8012d50:	d101      	bne.n	8012d56 <__sflush_r+0xb6>
 8012d52:	602f      	str	r7, [r5, #0]
 8012d54:	e7b1      	b.n	8012cba <__sflush_r+0x1a>
 8012d56:	89a3      	ldrh	r3, [r4, #12]
 8012d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d5c:	81a3      	strh	r3, [r4, #12]
 8012d5e:	e7ad      	b.n	8012cbc <__sflush_r+0x1c>
 8012d60:	690f      	ldr	r7, [r1, #16]
 8012d62:	2f00      	cmp	r7, #0
 8012d64:	d0a9      	beq.n	8012cba <__sflush_r+0x1a>
 8012d66:	0793      	lsls	r3, r2, #30
 8012d68:	680e      	ldr	r6, [r1, #0]
 8012d6a:	bf08      	it	eq
 8012d6c:	694b      	ldreq	r3, [r1, #20]
 8012d6e:	600f      	str	r7, [r1, #0]
 8012d70:	bf18      	it	ne
 8012d72:	2300      	movne	r3, #0
 8012d74:	eba6 0807 	sub.w	r8, r6, r7
 8012d78:	608b      	str	r3, [r1, #8]
 8012d7a:	f1b8 0f00 	cmp.w	r8, #0
 8012d7e:	dd9c      	ble.n	8012cba <__sflush_r+0x1a>
 8012d80:	6a21      	ldr	r1, [r4, #32]
 8012d82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012d84:	4643      	mov	r3, r8
 8012d86:	463a      	mov	r2, r7
 8012d88:	4628      	mov	r0, r5
 8012d8a:	47b0      	blx	r6
 8012d8c:	2800      	cmp	r0, #0
 8012d8e:	dc06      	bgt.n	8012d9e <__sflush_r+0xfe>
 8012d90:	89a3      	ldrh	r3, [r4, #12]
 8012d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d96:	81a3      	strh	r3, [r4, #12]
 8012d98:	f04f 30ff 	mov.w	r0, #4294967295
 8012d9c:	e78e      	b.n	8012cbc <__sflush_r+0x1c>
 8012d9e:	4407      	add	r7, r0
 8012da0:	eba8 0800 	sub.w	r8, r8, r0
 8012da4:	e7e9      	b.n	8012d7a <__sflush_r+0xda>
 8012da6:	bf00      	nop
 8012da8:	20400001 	.word	0x20400001

08012dac <_fflush_r>:
 8012dac:	b538      	push	{r3, r4, r5, lr}
 8012dae:	690b      	ldr	r3, [r1, #16]
 8012db0:	4605      	mov	r5, r0
 8012db2:	460c      	mov	r4, r1
 8012db4:	b913      	cbnz	r3, 8012dbc <_fflush_r+0x10>
 8012db6:	2500      	movs	r5, #0
 8012db8:	4628      	mov	r0, r5
 8012dba:	bd38      	pop	{r3, r4, r5, pc}
 8012dbc:	b118      	cbz	r0, 8012dc6 <_fflush_r+0x1a>
 8012dbe:	6983      	ldr	r3, [r0, #24]
 8012dc0:	b90b      	cbnz	r3, 8012dc6 <_fflush_r+0x1a>
 8012dc2:	f000 f887 	bl	8012ed4 <__sinit>
 8012dc6:	4b14      	ldr	r3, [pc, #80]	; (8012e18 <_fflush_r+0x6c>)
 8012dc8:	429c      	cmp	r4, r3
 8012dca:	d11b      	bne.n	8012e04 <_fflush_r+0x58>
 8012dcc:	686c      	ldr	r4, [r5, #4]
 8012dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d0ef      	beq.n	8012db6 <_fflush_r+0xa>
 8012dd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012dd8:	07d0      	lsls	r0, r2, #31
 8012dda:	d404      	bmi.n	8012de6 <_fflush_r+0x3a>
 8012ddc:	0599      	lsls	r1, r3, #22
 8012dde:	d402      	bmi.n	8012de6 <_fflush_r+0x3a>
 8012de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012de2:	f000 fc88 	bl	80136f6 <__retarget_lock_acquire_recursive>
 8012de6:	4628      	mov	r0, r5
 8012de8:	4621      	mov	r1, r4
 8012dea:	f7ff ff59 	bl	8012ca0 <__sflush_r>
 8012dee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012df0:	07da      	lsls	r2, r3, #31
 8012df2:	4605      	mov	r5, r0
 8012df4:	d4e0      	bmi.n	8012db8 <_fflush_r+0xc>
 8012df6:	89a3      	ldrh	r3, [r4, #12]
 8012df8:	059b      	lsls	r3, r3, #22
 8012dfa:	d4dd      	bmi.n	8012db8 <_fflush_r+0xc>
 8012dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012dfe:	f000 fc7b 	bl	80136f8 <__retarget_lock_release_recursive>
 8012e02:	e7d9      	b.n	8012db8 <_fflush_r+0xc>
 8012e04:	4b05      	ldr	r3, [pc, #20]	; (8012e1c <_fflush_r+0x70>)
 8012e06:	429c      	cmp	r4, r3
 8012e08:	d101      	bne.n	8012e0e <_fflush_r+0x62>
 8012e0a:	68ac      	ldr	r4, [r5, #8]
 8012e0c:	e7df      	b.n	8012dce <_fflush_r+0x22>
 8012e0e:	4b04      	ldr	r3, [pc, #16]	; (8012e20 <_fflush_r+0x74>)
 8012e10:	429c      	cmp	r4, r3
 8012e12:	bf08      	it	eq
 8012e14:	68ec      	ldreq	r4, [r5, #12]
 8012e16:	e7da      	b.n	8012dce <_fflush_r+0x22>
 8012e18:	080167bc 	.word	0x080167bc
 8012e1c:	080167dc 	.word	0x080167dc
 8012e20:	0801679c 	.word	0x0801679c

08012e24 <std>:
 8012e24:	2300      	movs	r3, #0
 8012e26:	b510      	push	{r4, lr}
 8012e28:	4604      	mov	r4, r0
 8012e2a:	e9c0 3300 	strd	r3, r3, [r0]
 8012e2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012e32:	6083      	str	r3, [r0, #8]
 8012e34:	8181      	strh	r1, [r0, #12]
 8012e36:	6643      	str	r3, [r0, #100]	; 0x64
 8012e38:	81c2      	strh	r2, [r0, #14]
 8012e3a:	6183      	str	r3, [r0, #24]
 8012e3c:	4619      	mov	r1, r3
 8012e3e:	2208      	movs	r2, #8
 8012e40:	305c      	adds	r0, #92	; 0x5c
 8012e42:	f7fd f921 	bl	8010088 <memset>
 8012e46:	4b05      	ldr	r3, [pc, #20]	; (8012e5c <std+0x38>)
 8012e48:	6263      	str	r3, [r4, #36]	; 0x24
 8012e4a:	4b05      	ldr	r3, [pc, #20]	; (8012e60 <std+0x3c>)
 8012e4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8012e4e:	4b05      	ldr	r3, [pc, #20]	; (8012e64 <std+0x40>)
 8012e50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012e52:	4b05      	ldr	r3, [pc, #20]	; (8012e68 <std+0x44>)
 8012e54:	6224      	str	r4, [r4, #32]
 8012e56:	6323      	str	r3, [r4, #48]	; 0x30
 8012e58:	bd10      	pop	{r4, pc}
 8012e5a:	bf00      	nop
 8012e5c:	080146d1 	.word	0x080146d1
 8012e60:	080146f3 	.word	0x080146f3
 8012e64:	0801472b 	.word	0x0801472b
 8012e68:	0801474f 	.word	0x0801474f

08012e6c <_cleanup_r>:
 8012e6c:	4901      	ldr	r1, [pc, #4]	; (8012e74 <_cleanup_r+0x8>)
 8012e6e:	f000 b8af 	b.w	8012fd0 <_fwalk_reent>
 8012e72:	bf00      	nop
 8012e74:	08012dad 	.word	0x08012dad

08012e78 <__sfmoreglue>:
 8012e78:	b570      	push	{r4, r5, r6, lr}
 8012e7a:	1e4a      	subs	r2, r1, #1
 8012e7c:	2568      	movs	r5, #104	; 0x68
 8012e7e:	4355      	muls	r5, r2
 8012e80:	460e      	mov	r6, r1
 8012e82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012e86:	f001 f9eb 	bl	8014260 <_malloc_r>
 8012e8a:	4604      	mov	r4, r0
 8012e8c:	b140      	cbz	r0, 8012ea0 <__sfmoreglue+0x28>
 8012e8e:	2100      	movs	r1, #0
 8012e90:	e9c0 1600 	strd	r1, r6, [r0]
 8012e94:	300c      	adds	r0, #12
 8012e96:	60a0      	str	r0, [r4, #8]
 8012e98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012e9c:	f7fd f8f4 	bl	8010088 <memset>
 8012ea0:	4620      	mov	r0, r4
 8012ea2:	bd70      	pop	{r4, r5, r6, pc}

08012ea4 <__sfp_lock_acquire>:
 8012ea4:	4801      	ldr	r0, [pc, #4]	; (8012eac <__sfp_lock_acquire+0x8>)
 8012ea6:	f000 bc26 	b.w	80136f6 <__retarget_lock_acquire_recursive>
 8012eaa:	bf00      	nop
 8012eac:	20004a2c 	.word	0x20004a2c

08012eb0 <__sfp_lock_release>:
 8012eb0:	4801      	ldr	r0, [pc, #4]	; (8012eb8 <__sfp_lock_release+0x8>)
 8012eb2:	f000 bc21 	b.w	80136f8 <__retarget_lock_release_recursive>
 8012eb6:	bf00      	nop
 8012eb8:	20004a2c 	.word	0x20004a2c

08012ebc <__sinit_lock_acquire>:
 8012ebc:	4801      	ldr	r0, [pc, #4]	; (8012ec4 <__sinit_lock_acquire+0x8>)
 8012ebe:	f000 bc1a 	b.w	80136f6 <__retarget_lock_acquire_recursive>
 8012ec2:	bf00      	nop
 8012ec4:	20004a27 	.word	0x20004a27

08012ec8 <__sinit_lock_release>:
 8012ec8:	4801      	ldr	r0, [pc, #4]	; (8012ed0 <__sinit_lock_release+0x8>)
 8012eca:	f000 bc15 	b.w	80136f8 <__retarget_lock_release_recursive>
 8012ece:	bf00      	nop
 8012ed0:	20004a27 	.word	0x20004a27

08012ed4 <__sinit>:
 8012ed4:	b510      	push	{r4, lr}
 8012ed6:	4604      	mov	r4, r0
 8012ed8:	f7ff fff0 	bl	8012ebc <__sinit_lock_acquire>
 8012edc:	69a3      	ldr	r3, [r4, #24]
 8012ede:	b11b      	cbz	r3, 8012ee8 <__sinit+0x14>
 8012ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ee4:	f7ff bff0 	b.w	8012ec8 <__sinit_lock_release>
 8012ee8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012eec:	6523      	str	r3, [r4, #80]	; 0x50
 8012eee:	4b13      	ldr	r3, [pc, #76]	; (8012f3c <__sinit+0x68>)
 8012ef0:	4a13      	ldr	r2, [pc, #76]	; (8012f40 <__sinit+0x6c>)
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	62a2      	str	r2, [r4, #40]	; 0x28
 8012ef6:	42a3      	cmp	r3, r4
 8012ef8:	bf04      	itt	eq
 8012efa:	2301      	moveq	r3, #1
 8012efc:	61a3      	streq	r3, [r4, #24]
 8012efe:	4620      	mov	r0, r4
 8012f00:	f000 f820 	bl	8012f44 <__sfp>
 8012f04:	6060      	str	r0, [r4, #4]
 8012f06:	4620      	mov	r0, r4
 8012f08:	f000 f81c 	bl	8012f44 <__sfp>
 8012f0c:	60a0      	str	r0, [r4, #8]
 8012f0e:	4620      	mov	r0, r4
 8012f10:	f000 f818 	bl	8012f44 <__sfp>
 8012f14:	2200      	movs	r2, #0
 8012f16:	60e0      	str	r0, [r4, #12]
 8012f18:	2104      	movs	r1, #4
 8012f1a:	6860      	ldr	r0, [r4, #4]
 8012f1c:	f7ff ff82 	bl	8012e24 <std>
 8012f20:	68a0      	ldr	r0, [r4, #8]
 8012f22:	2201      	movs	r2, #1
 8012f24:	2109      	movs	r1, #9
 8012f26:	f7ff ff7d 	bl	8012e24 <std>
 8012f2a:	68e0      	ldr	r0, [r4, #12]
 8012f2c:	2202      	movs	r2, #2
 8012f2e:	2112      	movs	r1, #18
 8012f30:	f7ff ff78 	bl	8012e24 <std>
 8012f34:	2301      	movs	r3, #1
 8012f36:	61a3      	str	r3, [r4, #24]
 8012f38:	e7d2      	b.n	8012ee0 <__sinit+0xc>
 8012f3a:	bf00      	nop
 8012f3c:	08016668 	.word	0x08016668
 8012f40:	08012e6d 	.word	0x08012e6d

08012f44 <__sfp>:
 8012f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f46:	4607      	mov	r7, r0
 8012f48:	f7ff ffac 	bl	8012ea4 <__sfp_lock_acquire>
 8012f4c:	4b1e      	ldr	r3, [pc, #120]	; (8012fc8 <__sfp+0x84>)
 8012f4e:	681e      	ldr	r6, [r3, #0]
 8012f50:	69b3      	ldr	r3, [r6, #24]
 8012f52:	b913      	cbnz	r3, 8012f5a <__sfp+0x16>
 8012f54:	4630      	mov	r0, r6
 8012f56:	f7ff ffbd 	bl	8012ed4 <__sinit>
 8012f5a:	3648      	adds	r6, #72	; 0x48
 8012f5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012f60:	3b01      	subs	r3, #1
 8012f62:	d503      	bpl.n	8012f6c <__sfp+0x28>
 8012f64:	6833      	ldr	r3, [r6, #0]
 8012f66:	b30b      	cbz	r3, 8012fac <__sfp+0x68>
 8012f68:	6836      	ldr	r6, [r6, #0]
 8012f6a:	e7f7      	b.n	8012f5c <__sfp+0x18>
 8012f6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012f70:	b9d5      	cbnz	r5, 8012fa8 <__sfp+0x64>
 8012f72:	4b16      	ldr	r3, [pc, #88]	; (8012fcc <__sfp+0x88>)
 8012f74:	60e3      	str	r3, [r4, #12]
 8012f76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012f7a:	6665      	str	r5, [r4, #100]	; 0x64
 8012f7c:	f000 fbba 	bl	80136f4 <__retarget_lock_init_recursive>
 8012f80:	f7ff ff96 	bl	8012eb0 <__sfp_lock_release>
 8012f84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012f88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012f8c:	6025      	str	r5, [r4, #0]
 8012f8e:	61a5      	str	r5, [r4, #24]
 8012f90:	2208      	movs	r2, #8
 8012f92:	4629      	mov	r1, r5
 8012f94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012f98:	f7fd f876 	bl	8010088 <memset>
 8012f9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012fa0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012fa4:	4620      	mov	r0, r4
 8012fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fa8:	3468      	adds	r4, #104	; 0x68
 8012faa:	e7d9      	b.n	8012f60 <__sfp+0x1c>
 8012fac:	2104      	movs	r1, #4
 8012fae:	4638      	mov	r0, r7
 8012fb0:	f7ff ff62 	bl	8012e78 <__sfmoreglue>
 8012fb4:	4604      	mov	r4, r0
 8012fb6:	6030      	str	r0, [r6, #0]
 8012fb8:	2800      	cmp	r0, #0
 8012fba:	d1d5      	bne.n	8012f68 <__sfp+0x24>
 8012fbc:	f7ff ff78 	bl	8012eb0 <__sfp_lock_release>
 8012fc0:	230c      	movs	r3, #12
 8012fc2:	603b      	str	r3, [r7, #0]
 8012fc4:	e7ee      	b.n	8012fa4 <__sfp+0x60>
 8012fc6:	bf00      	nop
 8012fc8:	08016668 	.word	0x08016668
 8012fcc:	ffff0001 	.word	0xffff0001

08012fd0 <_fwalk_reent>:
 8012fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fd4:	4606      	mov	r6, r0
 8012fd6:	4688      	mov	r8, r1
 8012fd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012fdc:	2700      	movs	r7, #0
 8012fde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012fe2:	f1b9 0901 	subs.w	r9, r9, #1
 8012fe6:	d505      	bpl.n	8012ff4 <_fwalk_reent+0x24>
 8012fe8:	6824      	ldr	r4, [r4, #0]
 8012fea:	2c00      	cmp	r4, #0
 8012fec:	d1f7      	bne.n	8012fde <_fwalk_reent+0xe>
 8012fee:	4638      	mov	r0, r7
 8012ff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ff4:	89ab      	ldrh	r3, [r5, #12]
 8012ff6:	2b01      	cmp	r3, #1
 8012ff8:	d907      	bls.n	801300a <_fwalk_reent+0x3a>
 8012ffa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012ffe:	3301      	adds	r3, #1
 8013000:	d003      	beq.n	801300a <_fwalk_reent+0x3a>
 8013002:	4629      	mov	r1, r5
 8013004:	4630      	mov	r0, r6
 8013006:	47c0      	blx	r8
 8013008:	4307      	orrs	r7, r0
 801300a:	3568      	adds	r5, #104	; 0x68
 801300c:	e7e9      	b.n	8012fe2 <_fwalk_reent+0x12>

0801300e <rshift>:
 801300e:	6903      	ldr	r3, [r0, #16]
 8013010:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013018:	ea4f 1261 	mov.w	r2, r1, asr #5
 801301c:	f100 0414 	add.w	r4, r0, #20
 8013020:	dd45      	ble.n	80130ae <rshift+0xa0>
 8013022:	f011 011f 	ands.w	r1, r1, #31
 8013026:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801302a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801302e:	d10c      	bne.n	801304a <rshift+0x3c>
 8013030:	f100 0710 	add.w	r7, r0, #16
 8013034:	4629      	mov	r1, r5
 8013036:	42b1      	cmp	r1, r6
 8013038:	d334      	bcc.n	80130a4 <rshift+0x96>
 801303a:	1a9b      	subs	r3, r3, r2
 801303c:	009b      	lsls	r3, r3, #2
 801303e:	1eea      	subs	r2, r5, #3
 8013040:	4296      	cmp	r6, r2
 8013042:	bf38      	it	cc
 8013044:	2300      	movcc	r3, #0
 8013046:	4423      	add	r3, r4
 8013048:	e015      	b.n	8013076 <rshift+0x68>
 801304a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801304e:	f1c1 0820 	rsb	r8, r1, #32
 8013052:	40cf      	lsrs	r7, r1
 8013054:	f105 0e04 	add.w	lr, r5, #4
 8013058:	46a1      	mov	r9, r4
 801305a:	4576      	cmp	r6, lr
 801305c:	46f4      	mov	ip, lr
 801305e:	d815      	bhi.n	801308c <rshift+0x7e>
 8013060:	1a9b      	subs	r3, r3, r2
 8013062:	009a      	lsls	r2, r3, #2
 8013064:	3a04      	subs	r2, #4
 8013066:	3501      	adds	r5, #1
 8013068:	42ae      	cmp	r6, r5
 801306a:	bf38      	it	cc
 801306c:	2200      	movcc	r2, #0
 801306e:	18a3      	adds	r3, r4, r2
 8013070:	50a7      	str	r7, [r4, r2]
 8013072:	b107      	cbz	r7, 8013076 <rshift+0x68>
 8013074:	3304      	adds	r3, #4
 8013076:	1b1a      	subs	r2, r3, r4
 8013078:	42a3      	cmp	r3, r4
 801307a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801307e:	bf08      	it	eq
 8013080:	2300      	moveq	r3, #0
 8013082:	6102      	str	r2, [r0, #16]
 8013084:	bf08      	it	eq
 8013086:	6143      	streq	r3, [r0, #20]
 8013088:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801308c:	f8dc c000 	ldr.w	ip, [ip]
 8013090:	fa0c fc08 	lsl.w	ip, ip, r8
 8013094:	ea4c 0707 	orr.w	r7, ip, r7
 8013098:	f849 7b04 	str.w	r7, [r9], #4
 801309c:	f85e 7b04 	ldr.w	r7, [lr], #4
 80130a0:	40cf      	lsrs	r7, r1
 80130a2:	e7da      	b.n	801305a <rshift+0x4c>
 80130a4:	f851 cb04 	ldr.w	ip, [r1], #4
 80130a8:	f847 cf04 	str.w	ip, [r7, #4]!
 80130ac:	e7c3      	b.n	8013036 <rshift+0x28>
 80130ae:	4623      	mov	r3, r4
 80130b0:	e7e1      	b.n	8013076 <rshift+0x68>

080130b2 <__hexdig_fun>:
 80130b2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80130b6:	2b09      	cmp	r3, #9
 80130b8:	d802      	bhi.n	80130c0 <__hexdig_fun+0xe>
 80130ba:	3820      	subs	r0, #32
 80130bc:	b2c0      	uxtb	r0, r0
 80130be:	4770      	bx	lr
 80130c0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80130c4:	2b05      	cmp	r3, #5
 80130c6:	d801      	bhi.n	80130cc <__hexdig_fun+0x1a>
 80130c8:	3847      	subs	r0, #71	; 0x47
 80130ca:	e7f7      	b.n	80130bc <__hexdig_fun+0xa>
 80130cc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80130d0:	2b05      	cmp	r3, #5
 80130d2:	d801      	bhi.n	80130d8 <__hexdig_fun+0x26>
 80130d4:	3827      	subs	r0, #39	; 0x27
 80130d6:	e7f1      	b.n	80130bc <__hexdig_fun+0xa>
 80130d8:	2000      	movs	r0, #0
 80130da:	4770      	bx	lr

080130dc <__gethex>:
 80130dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130e0:	ed2d 8b02 	vpush	{d8}
 80130e4:	b089      	sub	sp, #36	; 0x24
 80130e6:	ee08 0a10 	vmov	s16, r0
 80130ea:	9304      	str	r3, [sp, #16]
 80130ec:	4bbc      	ldr	r3, [pc, #752]	; (80133e0 <__gethex+0x304>)
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	9301      	str	r3, [sp, #4]
 80130f2:	4618      	mov	r0, r3
 80130f4:	468b      	mov	fp, r1
 80130f6:	4690      	mov	r8, r2
 80130f8:	f7ed f872 	bl	80001e0 <strlen>
 80130fc:	9b01      	ldr	r3, [sp, #4]
 80130fe:	f8db 2000 	ldr.w	r2, [fp]
 8013102:	4403      	add	r3, r0
 8013104:	4682      	mov	sl, r0
 8013106:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801310a:	9305      	str	r3, [sp, #20]
 801310c:	1c93      	adds	r3, r2, #2
 801310e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8013112:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8013116:	32fe      	adds	r2, #254	; 0xfe
 8013118:	18d1      	adds	r1, r2, r3
 801311a:	461f      	mov	r7, r3
 801311c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013120:	9100      	str	r1, [sp, #0]
 8013122:	2830      	cmp	r0, #48	; 0x30
 8013124:	d0f8      	beq.n	8013118 <__gethex+0x3c>
 8013126:	f7ff ffc4 	bl	80130b2 <__hexdig_fun>
 801312a:	4604      	mov	r4, r0
 801312c:	2800      	cmp	r0, #0
 801312e:	d13a      	bne.n	80131a6 <__gethex+0xca>
 8013130:	9901      	ldr	r1, [sp, #4]
 8013132:	4652      	mov	r2, sl
 8013134:	4638      	mov	r0, r7
 8013136:	f001 fb0e 	bl	8014756 <strncmp>
 801313a:	4605      	mov	r5, r0
 801313c:	2800      	cmp	r0, #0
 801313e:	d168      	bne.n	8013212 <__gethex+0x136>
 8013140:	f817 000a 	ldrb.w	r0, [r7, sl]
 8013144:	eb07 060a 	add.w	r6, r7, sl
 8013148:	f7ff ffb3 	bl	80130b2 <__hexdig_fun>
 801314c:	2800      	cmp	r0, #0
 801314e:	d062      	beq.n	8013216 <__gethex+0x13a>
 8013150:	4633      	mov	r3, r6
 8013152:	7818      	ldrb	r0, [r3, #0]
 8013154:	2830      	cmp	r0, #48	; 0x30
 8013156:	461f      	mov	r7, r3
 8013158:	f103 0301 	add.w	r3, r3, #1
 801315c:	d0f9      	beq.n	8013152 <__gethex+0x76>
 801315e:	f7ff ffa8 	bl	80130b2 <__hexdig_fun>
 8013162:	2301      	movs	r3, #1
 8013164:	fab0 f480 	clz	r4, r0
 8013168:	0964      	lsrs	r4, r4, #5
 801316a:	4635      	mov	r5, r6
 801316c:	9300      	str	r3, [sp, #0]
 801316e:	463a      	mov	r2, r7
 8013170:	4616      	mov	r6, r2
 8013172:	3201      	adds	r2, #1
 8013174:	7830      	ldrb	r0, [r6, #0]
 8013176:	f7ff ff9c 	bl	80130b2 <__hexdig_fun>
 801317a:	2800      	cmp	r0, #0
 801317c:	d1f8      	bne.n	8013170 <__gethex+0x94>
 801317e:	9901      	ldr	r1, [sp, #4]
 8013180:	4652      	mov	r2, sl
 8013182:	4630      	mov	r0, r6
 8013184:	f001 fae7 	bl	8014756 <strncmp>
 8013188:	b980      	cbnz	r0, 80131ac <__gethex+0xd0>
 801318a:	b94d      	cbnz	r5, 80131a0 <__gethex+0xc4>
 801318c:	eb06 050a 	add.w	r5, r6, sl
 8013190:	462a      	mov	r2, r5
 8013192:	4616      	mov	r6, r2
 8013194:	3201      	adds	r2, #1
 8013196:	7830      	ldrb	r0, [r6, #0]
 8013198:	f7ff ff8b 	bl	80130b2 <__hexdig_fun>
 801319c:	2800      	cmp	r0, #0
 801319e:	d1f8      	bne.n	8013192 <__gethex+0xb6>
 80131a0:	1bad      	subs	r5, r5, r6
 80131a2:	00ad      	lsls	r5, r5, #2
 80131a4:	e004      	b.n	80131b0 <__gethex+0xd4>
 80131a6:	2400      	movs	r4, #0
 80131a8:	4625      	mov	r5, r4
 80131aa:	e7e0      	b.n	801316e <__gethex+0x92>
 80131ac:	2d00      	cmp	r5, #0
 80131ae:	d1f7      	bne.n	80131a0 <__gethex+0xc4>
 80131b0:	7833      	ldrb	r3, [r6, #0]
 80131b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80131b6:	2b50      	cmp	r3, #80	; 0x50
 80131b8:	d13b      	bne.n	8013232 <__gethex+0x156>
 80131ba:	7873      	ldrb	r3, [r6, #1]
 80131bc:	2b2b      	cmp	r3, #43	; 0x2b
 80131be:	d02c      	beq.n	801321a <__gethex+0x13e>
 80131c0:	2b2d      	cmp	r3, #45	; 0x2d
 80131c2:	d02e      	beq.n	8013222 <__gethex+0x146>
 80131c4:	1c71      	adds	r1, r6, #1
 80131c6:	f04f 0900 	mov.w	r9, #0
 80131ca:	7808      	ldrb	r0, [r1, #0]
 80131cc:	f7ff ff71 	bl	80130b2 <__hexdig_fun>
 80131d0:	1e43      	subs	r3, r0, #1
 80131d2:	b2db      	uxtb	r3, r3
 80131d4:	2b18      	cmp	r3, #24
 80131d6:	d82c      	bhi.n	8013232 <__gethex+0x156>
 80131d8:	f1a0 0210 	sub.w	r2, r0, #16
 80131dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80131e0:	f7ff ff67 	bl	80130b2 <__hexdig_fun>
 80131e4:	1e43      	subs	r3, r0, #1
 80131e6:	b2db      	uxtb	r3, r3
 80131e8:	2b18      	cmp	r3, #24
 80131ea:	d91d      	bls.n	8013228 <__gethex+0x14c>
 80131ec:	f1b9 0f00 	cmp.w	r9, #0
 80131f0:	d000      	beq.n	80131f4 <__gethex+0x118>
 80131f2:	4252      	negs	r2, r2
 80131f4:	4415      	add	r5, r2
 80131f6:	f8cb 1000 	str.w	r1, [fp]
 80131fa:	b1e4      	cbz	r4, 8013236 <__gethex+0x15a>
 80131fc:	9b00      	ldr	r3, [sp, #0]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	bf14      	ite	ne
 8013202:	2700      	movne	r7, #0
 8013204:	2706      	moveq	r7, #6
 8013206:	4638      	mov	r0, r7
 8013208:	b009      	add	sp, #36	; 0x24
 801320a:	ecbd 8b02 	vpop	{d8}
 801320e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013212:	463e      	mov	r6, r7
 8013214:	4625      	mov	r5, r4
 8013216:	2401      	movs	r4, #1
 8013218:	e7ca      	b.n	80131b0 <__gethex+0xd4>
 801321a:	f04f 0900 	mov.w	r9, #0
 801321e:	1cb1      	adds	r1, r6, #2
 8013220:	e7d3      	b.n	80131ca <__gethex+0xee>
 8013222:	f04f 0901 	mov.w	r9, #1
 8013226:	e7fa      	b.n	801321e <__gethex+0x142>
 8013228:	230a      	movs	r3, #10
 801322a:	fb03 0202 	mla	r2, r3, r2, r0
 801322e:	3a10      	subs	r2, #16
 8013230:	e7d4      	b.n	80131dc <__gethex+0x100>
 8013232:	4631      	mov	r1, r6
 8013234:	e7df      	b.n	80131f6 <__gethex+0x11a>
 8013236:	1bf3      	subs	r3, r6, r7
 8013238:	3b01      	subs	r3, #1
 801323a:	4621      	mov	r1, r4
 801323c:	2b07      	cmp	r3, #7
 801323e:	dc0b      	bgt.n	8013258 <__gethex+0x17c>
 8013240:	ee18 0a10 	vmov	r0, s16
 8013244:	f000 faf2 	bl	801382c <_Balloc>
 8013248:	4604      	mov	r4, r0
 801324a:	b940      	cbnz	r0, 801325e <__gethex+0x182>
 801324c:	4b65      	ldr	r3, [pc, #404]	; (80133e4 <__gethex+0x308>)
 801324e:	4602      	mov	r2, r0
 8013250:	21de      	movs	r1, #222	; 0xde
 8013252:	4865      	ldr	r0, [pc, #404]	; (80133e8 <__gethex+0x30c>)
 8013254:	f7fc feb0 	bl	800ffb8 <__assert_func>
 8013258:	3101      	adds	r1, #1
 801325a:	105b      	asrs	r3, r3, #1
 801325c:	e7ee      	b.n	801323c <__gethex+0x160>
 801325e:	f100 0914 	add.w	r9, r0, #20
 8013262:	f04f 0b00 	mov.w	fp, #0
 8013266:	f1ca 0301 	rsb	r3, sl, #1
 801326a:	f8cd 9008 	str.w	r9, [sp, #8]
 801326e:	f8cd b000 	str.w	fp, [sp]
 8013272:	9306      	str	r3, [sp, #24]
 8013274:	42b7      	cmp	r7, r6
 8013276:	d340      	bcc.n	80132fa <__gethex+0x21e>
 8013278:	9802      	ldr	r0, [sp, #8]
 801327a:	9b00      	ldr	r3, [sp, #0]
 801327c:	f840 3b04 	str.w	r3, [r0], #4
 8013280:	eba0 0009 	sub.w	r0, r0, r9
 8013284:	1080      	asrs	r0, r0, #2
 8013286:	0146      	lsls	r6, r0, #5
 8013288:	6120      	str	r0, [r4, #16]
 801328a:	4618      	mov	r0, r3
 801328c:	f000 fbc4 	bl	8013a18 <__hi0bits>
 8013290:	1a30      	subs	r0, r6, r0
 8013292:	f8d8 6000 	ldr.w	r6, [r8]
 8013296:	42b0      	cmp	r0, r6
 8013298:	dd63      	ble.n	8013362 <__gethex+0x286>
 801329a:	1b87      	subs	r7, r0, r6
 801329c:	4639      	mov	r1, r7
 801329e:	4620      	mov	r0, r4
 80132a0:	f000 ff5e 	bl	8014160 <__any_on>
 80132a4:	4682      	mov	sl, r0
 80132a6:	b1a8      	cbz	r0, 80132d4 <__gethex+0x1f8>
 80132a8:	1e7b      	subs	r3, r7, #1
 80132aa:	1159      	asrs	r1, r3, #5
 80132ac:	f003 021f 	and.w	r2, r3, #31
 80132b0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80132b4:	f04f 0a01 	mov.w	sl, #1
 80132b8:	fa0a f202 	lsl.w	r2, sl, r2
 80132bc:	420a      	tst	r2, r1
 80132be:	d009      	beq.n	80132d4 <__gethex+0x1f8>
 80132c0:	4553      	cmp	r3, sl
 80132c2:	dd05      	ble.n	80132d0 <__gethex+0x1f4>
 80132c4:	1eb9      	subs	r1, r7, #2
 80132c6:	4620      	mov	r0, r4
 80132c8:	f000 ff4a 	bl	8014160 <__any_on>
 80132cc:	2800      	cmp	r0, #0
 80132ce:	d145      	bne.n	801335c <__gethex+0x280>
 80132d0:	f04f 0a02 	mov.w	sl, #2
 80132d4:	4639      	mov	r1, r7
 80132d6:	4620      	mov	r0, r4
 80132d8:	f7ff fe99 	bl	801300e <rshift>
 80132dc:	443d      	add	r5, r7
 80132de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80132e2:	42ab      	cmp	r3, r5
 80132e4:	da4c      	bge.n	8013380 <__gethex+0x2a4>
 80132e6:	ee18 0a10 	vmov	r0, s16
 80132ea:	4621      	mov	r1, r4
 80132ec:	f000 fade 	bl	80138ac <_Bfree>
 80132f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80132f2:	2300      	movs	r3, #0
 80132f4:	6013      	str	r3, [r2, #0]
 80132f6:	27a3      	movs	r7, #163	; 0xa3
 80132f8:	e785      	b.n	8013206 <__gethex+0x12a>
 80132fa:	1e73      	subs	r3, r6, #1
 80132fc:	9a05      	ldr	r2, [sp, #20]
 80132fe:	9303      	str	r3, [sp, #12]
 8013300:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013304:	4293      	cmp	r3, r2
 8013306:	d019      	beq.n	801333c <__gethex+0x260>
 8013308:	f1bb 0f20 	cmp.w	fp, #32
 801330c:	d107      	bne.n	801331e <__gethex+0x242>
 801330e:	9b02      	ldr	r3, [sp, #8]
 8013310:	9a00      	ldr	r2, [sp, #0]
 8013312:	f843 2b04 	str.w	r2, [r3], #4
 8013316:	9302      	str	r3, [sp, #8]
 8013318:	2300      	movs	r3, #0
 801331a:	9300      	str	r3, [sp, #0]
 801331c:	469b      	mov	fp, r3
 801331e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8013322:	f7ff fec6 	bl	80130b2 <__hexdig_fun>
 8013326:	9b00      	ldr	r3, [sp, #0]
 8013328:	f000 000f 	and.w	r0, r0, #15
 801332c:	fa00 f00b 	lsl.w	r0, r0, fp
 8013330:	4303      	orrs	r3, r0
 8013332:	9300      	str	r3, [sp, #0]
 8013334:	f10b 0b04 	add.w	fp, fp, #4
 8013338:	9b03      	ldr	r3, [sp, #12]
 801333a:	e00d      	b.n	8013358 <__gethex+0x27c>
 801333c:	9b03      	ldr	r3, [sp, #12]
 801333e:	9a06      	ldr	r2, [sp, #24]
 8013340:	4413      	add	r3, r2
 8013342:	42bb      	cmp	r3, r7
 8013344:	d3e0      	bcc.n	8013308 <__gethex+0x22c>
 8013346:	4618      	mov	r0, r3
 8013348:	9901      	ldr	r1, [sp, #4]
 801334a:	9307      	str	r3, [sp, #28]
 801334c:	4652      	mov	r2, sl
 801334e:	f001 fa02 	bl	8014756 <strncmp>
 8013352:	9b07      	ldr	r3, [sp, #28]
 8013354:	2800      	cmp	r0, #0
 8013356:	d1d7      	bne.n	8013308 <__gethex+0x22c>
 8013358:	461e      	mov	r6, r3
 801335a:	e78b      	b.n	8013274 <__gethex+0x198>
 801335c:	f04f 0a03 	mov.w	sl, #3
 8013360:	e7b8      	b.n	80132d4 <__gethex+0x1f8>
 8013362:	da0a      	bge.n	801337a <__gethex+0x29e>
 8013364:	1a37      	subs	r7, r6, r0
 8013366:	4621      	mov	r1, r4
 8013368:	ee18 0a10 	vmov	r0, s16
 801336c:	463a      	mov	r2, r7
 801336e:	f000 fcb9 	bl	8013ce4 <__lshift>
 8013372:	1bed      	subs	r5, r5, r7
 8013374:	4604      	mov	r4, r0
 8013376:	f100 0914 	add.w	r9, r0, #20
 801337a:	f04f 0a00 	mov.w	sl, #0
 801337e:	e7ae      	b.n	80132de <__gethex+0x202>
 8013380:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013384:	42a8      	cmp	r0, r5
 8013386:	dd72      	ble.n	801346e <__gethex+0x392>
 8013388:	1b45      	subs	r5, r0, r5
 801338a:	42ae      	cmp	r6, r5
 801338c:	dc36      	bgt.n	80133fc <__gethex+0x320>
 801338e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013392:	2b02      	cmp	r3, #2
 8013394:	d02a      	beq.n	80133ec <__gethex+0x310>
 8013396:	2b03      	cmp	r3, #3
 8013398:	d02c      	beq.n	80133f4 <__gethex+0x318>
 801339a:	2b01      	cmp	r3, #1
 801339c:	d115      	bne.n	80133ca <__gethex+0x2ee>
 801339e:	42ae      	cmp	r6, r5
 80133a0:	d113      	bne.n	80133ca <__gethex+0x2ee>
 80133a2:	2e01      	cmp	r6, #1
 80133a4:	d10b      	bne.n	80133be <__gethex+0x2e2>
 80133a6:	9a04      	ldr	r2, [sp, #16]
 80133a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80133ac:	6013      	str	r3, [r2, #0]
 80133ae:	2301      	movs	r3, #1
 80133b0:	6123      	str	r3, [r4, #16]
 80133b2:	f8c9 3000 	str.w	r3, [r9]
 80133b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80133b8:	2762      	movs	r7, #98	; 0x62
 80133ba:	601c      	str	r4, [r3, #0]
 80133bc:	e723      	b.n	8013206 <__gethex+0x12a>
 80133be:	1e71      	subs	r1, r6, #1
 80133c0:	4620      	mov	r0, r4
 80133c2:	f000 fecd 	bl	8014160 <__any_on>
 80133c6:	2800      	cmp	r0, #0
 80133c8:	d1ed      	bne.n	80133a6 <__gethex+0x2ca>
 80133ca:	ee18 0a10 	vmov	r0, s16
 80133ce:	4621      	mov	r1, r4
 80133d0:	f000 fa6c 	bl	80138ac <_Bfree>
 80133d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80133d6:	2300      	movs	r3, #0
 80133d8:	6013      	str	r3, [r2, #0]
 80133da:	2750      	movs	r7, #80	; 0x50
 80133dc:	e713      	b.n	8013206 <__gethex+0x12a>
 80133de:	bf00      	nop
 80133e0:	08016868 	.word	0x08016868
 80133e4:	0801678b 	.word	0x0801678b
 80133e8:	080167fc 	.word	0x080167fc
 80133ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d1eb      	bne.n	80133ca <__gethex+0x2ee>
 80133f2:	e7d8      	b.n	80133a6 <__gethex+0x2ca>
 80133f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d1d5      	bne.n	80133a6 <__gethex+0x2ca>
 80133fa:	e7e6      	b.n	80133ca <__gethex+0x2ee>
 80133fc:	1e6f      	subs	r7, r5, #1
 80133fe:	f1ba 0f00 	cmp.w	sl, #0
 8013402:	d131      	bne.n	8013468 <__gethex+0x38c>
 8013404:	b127      	cbz	r7, 8013410 <__gethex+0x334>
 8013406:	4639      	mov	r1, r7
 8013408:	4620      	mov	r0, r4
 801340a:	f000 fea9 	bl	8014160 <__any_on>
 801340e:	4682      	mov	sl, r0
 8013410:	117b      	asrs	r3, r7, #5
 8013412:	2101      	movs	r1, #1
 8013414:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8013418:	f007 071f 	and.w	r7, r7, #31
 801341c:	fa01 f707 	lsl.w	r7, r1, r7
 8013420:	421f      	tst	r7, r3
 8013422:	4629      	mov	r1, r5
 8013424:	4620      	mov	r0, r4
 8013426:	bf18      	it	ne
 8013428:	f04a 0a02 	orrne.w	sl, sl, #2
 801342c:	1b76      	subs	r6, r6, r5
 801342e:	f7ff fdee 	bl	801300e <rshift>
 8013432:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013436:	2702      	movs	r7, #2
 8013438:	f1ba 0f00 	cmp.w	sl, #0
 801343c:	d048      	beq.n	80134d0 <__gethex+0x3f4>
 801343e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013442:	2b02      	cmp	r3, #2
 8013444:	d015      	beq.n	8013472 <__gethex+0x396>
 8013446:	2b03      	cmp	r3, #3
 8013448:	d017      	beq.n	801347a <__gethex+0x39e>
 801344a:	2b01      	cmp	r3, #1
 801344c:	d109      	bne.n	8013462 <__gethex+0x386>
 801344e:	f01a 0f02 	tst.w	sl, #2
 8013452:	d006      	beq.n	8013462 <__gethex+0x386>
 8013454:	f8d9 0000 	ldr.w	r0, [r9]
 8013458:	ea4a 0a00 	orr.w	sl, sl, r0
 801345c:	f01a 0f01 	tst.w	sl, #1
 8013460:	d10e      	bne.n	8013480 <__gethex+0x3a4>
 8013462:	f047 0710 	orr.w	r7, r7, #16
 8013466:	e033      	b.n	80134d0 <__gethex+0x3f4>
 8013468:	f04f 0a01 	mov.w	sl, #1
 801346c:	e7d0      	b.n	8013410 <__gethex+0x334>
 801346e:	2701      	movs	r7, #1
 8013470:	e7e2      	b.n	8013438 <__gethex+0x35c>
 8013472:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013474:	f1c3 0301 	rsb	r3, r3, #1
 8013478:	9315      	str	r3, [sp, #84]	; 0x54
 801347a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801347c:	2b00      	cmp	r3, #0
 801347e:	d0f0      	beq.n	8013462 <__gethex+0x386>
 8013480:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013484:	f104 0314 	add.w	r3, r4, #20
 8013488:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801348c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013490:	f04f 0c00 	mov.w	ip, #0
 8013494:	4618      	mov	r0, r3
 8013496:	f853 2b04 	ldr.w	r2, [r3], #4
 801349a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801349e:	d01c      	beq.n	80134da <__gethex+0x3fe>
 80134a0:	3201      	adds	r2, #1
 80134a2:	6002      	str	r2, [r0, #0]
 80134a4:	2f02      	cmp	r7, #2
 80134a6:	f104 0314 	add.w	r3, r4, #20
 80134aa:	d13f      	bne.n	801352c <__gethex+0x450>
 80134ac:	f8d8 2000 	ldr.w	r2, [r8]
 80134b0:	3a01      	subs	r2, #1
 80134b2:	42b2      	cmp	r2, r6
 80134b4:	d10a      	bne.n	80134cc <__gethex+0x3f0>
 80134b6:	1171      	asrs	r1, r6, #5
 80134b8:	2201      	movs	r2, #1
 80134ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80134be:	f006 061f 	and.w	r6, r6, #31
 80134c2:	fa02 f606 	lsl.w	r6, r2, r6
 80134c6:	421e      	tst	r6, r3
 80134c8:	bf18      	it	ne
 80134ca:	4617      	movne	r7, r2
 80134cc:	f047 0720 	orr.w	r7, r7, #32
 80134d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80134d2:	601c      	str	r4, [r3, #0]
 80134d4:	9b04      	ldr	r3, [sp, #16]
 80134d6:	601d      	str	r5, [r3, #0]
 80134d8:	e695      	b.n	8013206 <__gethex+0x12a>
 80134da:	4299      	cmp	r1, r3
 80134dc:	f843 cc04 	str.w	ip, [r3, #-4]
 80134e0:	d8d8      	bhi.n	8013494 <__gethex+0x3b8>
 80134e2:	68a3      	ldr	r3, [r4, #8]
 80134e4:	459b      	cmp	fp, r3
 80134e6:	db19      	blt.n	801351c <__gethex+0x440>
 80134e8:	6861      	ldr	r1, [r4, #4]
 80134ea:	ee18 0a10 	vmov	r0, s16
 80134ee:	3101      	adds	r1, #1
 80134f0:	f000 f99c 	bl	801382c <_Balloc>
 80134f4:	4681      	mov	r9, r0
 80134f6:	b918      	cbnz	r0, 8013500 <__gethex+0x424>
 80134f8:	4b1a      	ldr	r3, [pc, #104]	; (8013564 <__gethex+0x488>)
 80134fa:	4602      	mov	r2, r0
 80134fc:	2184      	movs	r1, #132	; 0x84
 80134fe:	e6a8      	b.n	8013252 <__gethex+0x176>
 8013500:	6922      	ldr	r2, [r4, #16]
 8013502:	3202      	adds	r2, #2
 8013504:	f104 010c 	add.w	r1, r4, #12
 8013508:	0092      	lsls	r2, r2, #2
 801350a:	300c      	adds	r0, #12
 801350c:	f7fc fdae 	bl	801006c <memcpy>
 8013510:	4621      	mov	r1, r4
 8013512:	ee18 0a10 	vmov	r0, s16
 8013516:	f000 f9c9 	bl	80138ac <_Bfree>
 801351a:	464c      	mov	r4, r9
 801351c:	6923      	ldr	r3, [r4, #16]
 801351e:	1c5a      	adds	r2, r3, #1
 8013520:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013524:	6122      	str	r2, [r4, #16]
 8013526:	2201      	movs	r2, #1
 8013528:	615a      	str	r2, [r3, #20]
 801352a:	e7bb      	b.n	80134a4 <__gethex+0x3c8>
 801352c:	6922      	ldr	r2, [r4, #16]
 801352e:	455a      	cmp	r2, fp
 8013530:	dd0b      	ble.n	801354a <__gethex+0x46e>
 8013532:	2101      	movs	r1, #1
 8013534:	4620      	mov	r0, r4
 8013536:	f7ff fd6a 	bl	801300e <rshift>
 801353a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801353e:	3501      	adds	r5, #1
 8013540:	42ab      	cmp	r3, r5
 8013542:	f6ff aed0 	blt.w	80132e6 <__gethex+0x20a>
 8013546:	2701      	movs	r7, #1
 8013548:	e7c0      	b.n	80134cc <__gethex+0x3f0>
 801354a:	f016 061f 	ands.w	r6, r6, #31
 801354e:	d0fa      	beq.n	8013546 <__gethex+0x46a>
 8013550:	449a      	add	sl, r3
 8013552:	f1c6 0620 	rsb	r6, r6, #32
 8013556:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801355a:	f000 fa5d 	bl	8013a18 <__hi0bits>
 801355e:	42b0      	cmp	r0, r6
 8013560:	dbe7      	blt.n	8013532 <__gethex+0x456>
 8013562:	e7f0      	b.n	8013546 <__gethex+0x46a>
 8013564:	0801678b 	.word	0x0801678b

08013568 <L_shift>:
 8013568:	f1c2 0208 	rsb	r2, r2, #8
 801356c:	0092      	lsls	r2, r2, #2
 801356e:	b570      	push	{r4, r5, r6, lr}
 8013570:	f1c2 0620 	rsb	r6, r2, #32
 8013574:	6843      	ldr	r3, [r0, #4]
 8013576:	6804      	ldr	r4, [r0, #0]
 8013578:	fa03 f506 	lsl.w	r5, r3, r6
 801357c:	432c      	orrs	r4, r5
 801357e:	40d3      	lsrs	r3, r2
 8013580:	6004      	str	r4, [r0, #0]
 8013582:	f840 3f04 	str.w	r3, [r0, #4]!
 8013586:	4288      	cmp	r0, r1
 8013588:	d3f4      	bcc.n	8013574 <L_shift+0xc>
 801358a:	bd70      	pop	{r4, r5, r6, pc}

0801358c <__match>:
 801358c:	b530      	push	{r4, r5, lr}
 801358e:	6803      	ldr	r3, [r0, #0]
 8013590:	3301      	adds	r3, #1
 8013592:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013596:	b914      	cbnz	r4, 801359e <__match+0x12>
 8013598:	6003      	str	r3, [r0, #0]
 801359a:	2001      	movs	r0, #1
 801359c:	bd30      	pop	{r4, r5, pc}
 801359e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80135a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80135a6:	2d19      	cmp	r5, #25
 80135a8:	bf98      	it	ls
 80135aa:	3220      	addls	r2, #32
 80135ac:	42a2      	cmp	r2, r4
 80135ae:	d0f0      	beq.n	8013592 <__match+0x6>
 80135b0:	2000      	movs	r0, #0
 80135b2:	e7f3      	b.n	801359c <__match+0x10>

080135b4 <__hexnan>:
 80135b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135b8:	680b      	ldr	r3, [r1, #0]
 80135ba:	6801      	ldr	r1, [r0, #0]
 80135bc:	115e      	asrs	r6, r3, #5
 80135be:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80135c2:	f013 031f 	ands.w	r3, r3, #31
 80135c6:	b087      	sub	sp, #28
 80135c8:	bf18      	it	ne
 80135ca:	3604      	addne	r6, #4
 80135cc:	2500      	movs	r5, #0
 80135ce:	1f37      	subs	r7, r6, #4
 80135d0:	4682      	mov	sl, r0
 80135d2:	4690      	mov	r8, r2
 80135d4:	9301      	str	r3, [sp, #4]
 80135d6:	f846 5c04 	str.w	r5, [r6, #-4]
 80135da:	46b9      	mov	r9, r7
 80135dc:	463c      	mov	r4, r7
 80135de:	9502      	str	r5, [sp, #8]
 80135e0:	46ab      	mov	fp, r5
 80135e2:	784a      	ldrb	r2, [r1, #1]
 80135e4:	1c4b      	adds	r3, r1, #1
 80135e6:	9303      	str	r3, [sp, #12]
 80135e8:	b342      	cbz	r2, 801363c <__hexnan+0x88>
 80135ea:	4610      	mov	r0, r2
 80135ec:	9105      	str	r1, [sp, #20]
 80135ee:	9204      	str	r2, [sp, #16]
 80135f0:	f7ff fd5f 	bl	80130b2 <__hexdig_fun>
 80135f4:	2800      	cmp	r0, #0
 80135f6:	d14f      	bne.n	8013698 <__hexnan+0xe4>
 80135f8:	9a04      	ldr	r2, [sp, #16]
 80135fa:	9905      	ldr	r1, [sp, #20]
 80135fc:	2a20      	cmp	r2, #32
 80135fe:	d818      	bhi.n	8013632 <__hexnan+0x7e>
 8013600:	9b02      	ldr	r3, [sp, #8]
 8013602:	459b      	cmp	fp, r3
 8013604:	dd13      	ble.n	801362e <__hexnan+0x7a>
 8013606:	454c      	cmp	r4, r9
 8013608:	d206      	bcs.n	8013618 <__hexnan+0x64>
 801360a:	2d07      	cmp	r5, #7
 801360c:	dc04      	bgt.n	8013618 <__hexnan+0x64>
 801360e:	462a      	mov	r2, r5
 8013610:	4649      	mov	r1, r9
 8013612:	4620      	mov	r0, r4
 8013614:	f7ff ffa8 	bl	8013568 <L_shift>
 8013618:	4544      	cmp	r4, r8
 801361a:	d950      	bls.n	80136be <__hexnan+0x10a>
 801361c:	2300      	movs	r3, #0
 801361e:	f1a4 0904 	sub.w	r9, r4, #4
 8013622:	f844 3c04 	str.w	r3, [r4, #-4]
 8013626:	f8cd b008 	str.w	fp, [sp, #8]
 801362a:	464c      	mov	r4, r9
 801362c:	461d      	mov	r5, r3
 801362e:	9903      	ldr	r1, [sp, #12]
 8013630:	e7d7      	b.n	80135e2 <__hexnan+0x2e>
 8013632:	2a29      	cmp	r2, #41	; 0x29
 8013634:	d156      	bne.n	80136e4 <__hexnan+0x130>
 8013636:	3102      	adds	r1, #2
 8013638:	f8ca 1000 	str.w	r1, [sl]
 801363c:	f1bb 0f00 	cmp.w	fp, #0
 8013640:	d050      	beq.n	80136e4 <__hexnan+0x130>
 8013642:	454c      	cmp	r4, r9
 8013644:	d206      	bcs.n	8013654 <__hexnan+0xa0>
 8013646:	2d07      	cmp	r5, #7
 8013648:	dc04      	bgt.n	8013654 <__hexnan+0xa0>
 801364a:	462a      	mov	r2, r5
 801364c:	4649      	mov	r1, r9
 801364e:	4620      	mov	r0, r4
 8013650:	f7ff ff8a 	bl	8013568 <L_shift>
 8013654:	4544      	cmp	r4, r8
 8013656:	d934      	bls.n	80136c2 <__hexnan+0x10e>
 8013658:	f1a8 0204 	sub.w	r2, r8, #4
 801365c:	4623      	mov	r3, r4
 801365e:	f853 1b04 	ldr.w	r1, [r3], #4
 8013662:	f842 1f04 	str.w	r1, [r2, #4]!
 8013666:	429f      	cmp	r7, r3
 8013668:	d2f9      	bcs.n	801365e <__hexnan+0xaa>
 801366a:	1b3b      	subs	r3, r7, r4
 801366c:	f023 0303 	bic.w	r3, r3, #3
 8013670:	3304      	adds	r3, #4
 8013672:	3401      	adds	r4, #1
 8013674:	3e03      	subs	r6, #3
 8013676:	42b4      	cmp	r4, r6
 8013678:	bf88      	it	hi
 801367a:	2304      	movhi	r3, #4
 801367c:	4443      	add	r3, r8
 801367e:	2200      	movs	r2, #0
 8013680:	f843 2b04 	str.w	r2, [r3], #4
 8013684:	429f      	cmp	r7, r3
 8013686:	d2fb      	bcs.n	8013680 <__hexnan+0xcc>
 8013688:	683b      	ldr	r3, [r7, #0]
 801368a:	b91b      	cbnz	r3, 8013694 <__hexnan+0xe0>
 801368c:	4547      	cmp	r7, r8
 801368e:	d127      	bne.n	80136e0 <__hexnan+0x12c>
 8013690:	2301      	movs	r3, #1
 8013692:	603b      	str	r3, [r7, #0]
 8013694:	2005      	movs	r0, #5
 8013696:	e026      	b.n	80136e6 <__hexnan+0x132>
 8013698:	3501      	adds	r5, #1
 801369a:	2d08      	cmp	r5, #8
 801369c:	f10b 0b01 	add.w	fp, fp, #1
 80136a0:	dd06      	ble.n	80136b0 <__hexnan+0xfc>
 80136a2:	4544      	cmp	r4, r8
 80136a4:	d9c3      	bls.n	801362e <__hexnan+0x7a>
 80136a6:	2300      	movs	r3, #0
 80136a8:	f844 3c04 	str.w	r3, [r4, #-4]
 80136ac:	2501      	movs	r5, #1
 80136ae:	3c04      	subs	r4, #4
 80136b0:	6822      	ldr	r2, [r4, #0]
 80136b2:	f000 000f 	and.w	r0, r0, #15
 80136b6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80136ba:	6022      	str	r2, [r4, #0]
 80136bc:	e7b7      	b.n	801362e <__hexnan+0x7a>
 80136be:	2508      	movs	r5, #8
 80136c0:	e7b5      	b.n	801362e <__hexnan+0x7a>
 80136c2:	9b01      	ldr	r3, [sp, #4]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d0df      	beq.n	8013688 <__hexnan+0xd4>
 80136c8:	f04f 32ff 	mov.w	r2, #4294967295
 80136cc:	f1c3 0320 	rsb	r3, r3, #32
 80136d0:	fa22 f303 	lsr.w	r3, r2, r3
 80136d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80136d8:	401a      	ands	r2, r3
 80136da:	f846 2c04 	str.w	r2, [r6, #-4]
 80136de:	e7d3      	b.n	8013688 <__hexnan+0xd4>
 80136e0:	3f04      	subs	r7, #4
 80136e2:	e7d1      	b.n	8013688 <__hexnan+0xd4>
 80136e4:	2004      	movs	r0, #4
 80136e6:	b007      	add	sp, #28
 80136e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080136ec <_localeconv_r>:
 80136ec:	4800      	ldr	r0, [pc, #0]	; (80136f0 <_localeconv_r+0x4>)
 80136ee:	4770      	bx	lr
 80136f0:	200001b0 	.word	0x200001b0

080136f4 <__retarget_lock_init_recursive>:
 80136f4:	4770      	bx	lr

080136f6 <__retarget_lock_acquire_recursive>:
 80136f6:	4770      	bx	lr

080136f8 <__retarget_lock_release_recursive>:
 80136f8:	4770      	bx	lr

080136fa <__swhatbuf_r>:
 80136fa:	b570      	push	{r4, r5, r6, lr}
 80136fc:	460e      	mov	r6, r1
 80136fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013702:	2900      	cmp	r1, #0
 8013704:	b096      	sub	sp, #88	; 0x58
 8013706:	4614      	mov	r4, r2
 8013708:	461d      	mov	r5, r3
 801370a:	da07      	bge.n	801371c <__swhatbuf_r+0x22>
 801370c:	2300      	movs	r3, #0
 801370e:	602b      	str	r3, [r5, #0]
 8013710:	89b3      	ldrh	r3, [r6, #12]
 8013712:	061a      	lsls	r2, r3, #24
 8013714:	d410      	bmi.n	8013738 <__swhatbuf_r+0x3e>
 8013716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801371a:	e00e      	b.n	801373a <__swhatbuf_r+0x40>
 801371c:	466a      	mov	r2, sp
 801371e:	f001 f85b 	bl	80147d8 <_fstat_r>
 8013722:	2800      	cmp	r0, #0
 8013724:	dbf2      	blt.n	801370c <__swhatbuf_r+0x12>
 8013726:	9a01      	ldr	r2, [sp, #4]
 8013728:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801372c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013730:	425a      	negs	r2, r3
 8013732:	415a      	adcs	r2, r3
 8013734:	602a      	str	r2, [r5, #0]
 8013736:	e7ee      	b.n	8013716 <__swhatbuf_r+0x1c>
 8013738:	2340      	movs	r3, #64	; 0x40
 801373a:	2000      	movs	r0, #0
 801373c:	6023      	str	r3, [r4, #0]
 801373e:	b016      	add	sp, #88	; 0x58
 8013740:	bd70      	pop	{r4, r5, r6, pc}
	...

08013744 <__smakebuf_r>:
 8013744:	898b      	ldrh	r3, [r1, #12]
 8013746:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013748:	079d      	lsls	r5, r3, #30
 801374a:	4606      	mov	r6, r0
 801374c:	460c      	mov	r4, r1
 801374e:	d507      	bpl.n	8013760 <__smakebuf_r+0x1c>
 8013750:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013754:	6023      	str	r3, [r4, #0]
 8013756:	6123      	str	r3, [r4, #16]
 8013758:	2301      	movs	r3, #1
 801375a:	6163      	str	r3, [r4, #20]
 801375c:	b002      	add	sp, #8
 801375e:	bd70      	pop	{r4, r5, r6, pc}
 8013760:	ab01      	add	r3, sp, #4
 8013762:	466a      	mov	r2, sp
 8013764:	f7ff ffc9 	bl	80136fa <__swhatbuf_r>
 8013768:	9900      	ldr	r1, [sp, #0]
 801376a:	4605      	mov	r5, r0
 801376c:	4630      	mov	r0, r6
 801376e:	f000 fd77 	bl	8014260 <_malloc_r>
 8013772:	b948      	cbnz	r0, 8013788 <__smakebuf_r+0x44>
 8013774:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013778:	059a      	lsls	r2, r3, #22
 801377a:	d4ef      	bmi.n	801375c <__smakebuf_r+0x18>
 801377c:	f023 0303 	bic.w	r3, r3, #3
 8013780:	f043 0302 	orr.w	r3, r3, #2
 8013784:	81a3      	strh	r3, [r4, #12]
 8013786:	e7e3      	b.n	8013750 <__smakebuf_r+0xc>
 8013788:	4b0d      	ldr	r3, [pc, #52]	; (80137c0 <__smakebuf_r+0x7c>)
 801378a:	62b3      	str	r3, [r6, #40]	; 0x28
 801378c:	89a3      	ldrh	r3, [r4, #12]
 801378e:	6020      	str	r0, [r4, #0]
 8013790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013794:	81a3      	strh	r3, [r4, #12]
 8013796:	9b00      	ldr	r3, [sp, #0]
 8013798:	6163      	str	r3, [r4, #20]
 801379a:	9b01      	ldr	r3, [sp, #4]
 801379c:	6120      	str	r0, [r4, #16]
 801379e:	b15b      	cbz	r3, 80137b8 <__smakebuf_r+0x74>
 80137a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80137a4:	4630      	mov	r0, r6
 80137a6:	f001 f829 	bl	80147fc <_isatty_r>
 80137aa:	b128      	cbz	r0, 80137b8 <__smakebuf_r+0x74>
 80137ac:	89a3      	ldrh	r3, [r4, #12]
 80137ae:	f023 0303 	bic.w	r3, r3, #3
 80137b2:	f043 0301 	orr.w	r3, r3, #1
 80137b6:	81a3      	strh	r3, [r4, #12]
 80137b8:	89a0      	ldrh	r0, [r4, #12]
 80137ba:	4305      	orrs	r5, r0
 80137bc:	81a5      	strh	r5, [r4, #12]
 80137be:	e7cd      	b.n	801375c <__smakebuf_r+0x18>
 80137c0:	08012e6d 	.word	0x08012e6d

080137c4 <malloc>:
 80137c4:	4b02      	ldr	r3, [pc, #8]	; (80137d0 <malloc+0xc>)
 80137c6:	4601      	mov	r1, r0
 80137c8:	6818      	ldr	r0, [r3, #0]
 80137ca:	f000 bd49 	b.w	8014260 <_malloc_r>
 80137ce:	bf00      	nop
 80137d0:	20000058 	.word	0x20000058

080137d4 <__ascii_mbtowc>:
 80137d4:	b082      	sub	sp, #8
 80137d6:	b901      	cbnz	r1, 80137da <__ascii_mbtowc+0x6>
 80137d8:	a901      	add	r1, sp, #4
 80137da:	b142      	cbz	r2, 80137ee <__ascii_mbtowc+0x1a>
 80137dc:	b14b      	cbz	r3, 80137f2 <__ascii_mbtowc+0x1e>
 80137de:	7813      	ldrb	r3, [r2, #0]
 80137e0:	600b      	str	r3, [r1, #0]
 80137e2:	7812      	ldrb	r2, [r2, #0]
 80137e4:	1e10      	subs	r0, r2, #0
 80137e6:	bf18      	it	ne
 80137e8:	2001      	movne	r0, #1
 80137ea:	b002      	add	sp, #8
 80137ec:	4770      	bx	lr
 80137ee:	4610      	mov	r0, r2
 80137f0:	e7fb      	b.n	80137ea <__ascii_mbtowc+0x16>
 80137f2:	f06f 0001 	mvn.w	r0, #1
 80137f6:	e7f8      	b.n	80137ea <__ascii_mbtowc+0x16>

080137f8 <memmove>:
 80137f8:	4288      	cmp	r0, r1
 80137fa:	b510      	push	{r4, lr}
 80137fc:	eb01 0402 	add.w	r4, r1, r2
 8013800:	d902      	bls.n	8013808 <memmove+0x10>
 8013802:	4284      	cmp	r4, r0
 8013804:	4623      	mov	r3, r4
 8013806:	d807      	bhi.n	8013818 <memmove+0x20>
 8013808:	1e43      	subs	r3, r0, #1
 801380a:	42a1      	cmp	r1, r4
 801380c:	d008      	beq.n	8013820 <memmove+0x28>
 801380e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013812:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013816:	e7f8      	b.n	801380a <memmove+0x12>
 8013818:	4402      	add	r2, r0
 801381a:	4601      	mov	r1, r0
 801381c:	428a      	cmp	r2, r1
 801381e:	d100      	bne.n	8013822 <memmove+0x2a>
 8013820:	bd10      	pop	{r4, pc}
 8013822:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013826:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801382a:	e7f7      	b.n	801381c <memmove+0x24>

0801382c <_Balloc>:
 801382c:	b570      	push	{r4, r5, r6, lr}
 801382e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013830:	4604      	mov	r4, r0
 8013832:	460d      	mov	r5, r1
 8013834:	b976      	cbnz	r6, 8013854 <_Balloc+0x28>
 8013836:	2010      	movs	r0, #16
 8013838:	f7ff ffc4 	bl	80137c4 <malloc>
 801383c:	4602      	mov	r2, r0
 801383e:	6260      	str	r0, [r4, #36]	; 0x24
 8013840:	b920      	cbnz	r0, 801384c <_Balloc+0x20>
 8013842:	4b18      	ldr	r3, [pc, #96]	; (80138a4 <_Balloc+0x78>)
 8013844:	4818      	ldr	r0, [pc, #96]	; (80138a8 <_Balloc+0x7c>)
 8013846:	2166      	movs	r1, #102	; 0x66
 8013848:	f7fc fbb6 	bl	800ffb8 <__assert_func>
 801384c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013850:	6006      	str	r6, [r0, #0]
 8013852:	60c6      	str	r6, [r0, #12]
 8013854:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013856:	68f3      	ldr	r3, [r6, #12]
 8013858:	b183      	cbz	r3, 801387c <_Balloc+0x50>
 801385a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801385c:	68db      	ldr	r3, [r3, #12]
 801385e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013862:	b9b8      	cbnz	r0, 8013894 <_Balloc+0x68>
 8013864:	2101      	movs	r1, #1
 8013866:	fa01 f605 	lsl.w	r6, r1, r5
 801386a:	1d72      	adds	r2, r6, #5
 801386c:	0092      	lsls	r2, r2, #2
 801386e:	4620      	mov	r0, r4
 8013870:	f000 fc97 	bl	80141a2 <_calloc_r>
 8013874:	b160      	cbz	r0, 8013890 <_Balloc+0x64>
 8013876:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801387a:	e00e      	b.n	801389a <_Balloc+0x6e>
 801387c:	2221      	movs	r2, #33	; 0x21
 801387e:	2104      	movs	r1, #4
 8013880:	4620      	mov	r0, r4
 8013882:	f000 fc8e 	bl	80141a2 <_calloc_r>
 8013886:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013888:	60f0      	str	r0, [r6, #12]
 801388a:	68db      	ldr	r3, [r3, #12]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d1e4      	bne.n	801385a <_Balloc+0x2e>
 8013890:	2000      	movs	r0, #0
 8013892:	bd70      	pop	{r4, r5, r6, pc}
 8013894:	6802      	ldr	r2, [r0, #0]
 8013896:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801389a:	2300      	movs	r3, #0
 801389c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80138a0:	e7f7      	b.n	8013892 <_Balloc+0x66>
 80138a2:	bf00      	nop
 80138a4:	08016715 	.word	0x08016715
 80138a8:	0801687c 	.word	0x0801687c

080138ac <_Bfree>:
 80138ac:	b570      	push	{r4, r5, r6, lr}
 80138ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80138b0:	4605      	mov	r5, r0
 80138b2:	460c      	mov	r4, r1
 80138b4:	b976      	cbnz	r6, 80138d4 <_Bfree+0x28>
 80138b6:	2010      	movs	r0, #16
 80138b8:	f7ff ff84 	bl	80137c4 <malloc>
 80138bc:	4602      	mov	r2, r0
 80138be:	6268      	str	r0, [r5, #36]	; 0x24
 80138c0:	b920      	cbnz	r0, 80138cc <_Bfree+0x20>
 80138c2:	4b09      	ldr	r3, [pc, #36]	; (80138e8 <_Bfree+0x3c>)
 80138c4:	4809      	ldr	r0, [pc, #36]	; (80138ec <_Bfree+0x40>)
 80138c6:	218a      	movs	r1, #138	; 0x8a
 80138c8:	f7fc fb76 	bl	800ffb8 <__assert_func>
 80138cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80138d0:	6006      	str	r6, [r0, #0]
 80138d2:	60c6      	str	r6, [r0, #12]
 80138d4:	b13c      	cbz	r4, 80138e6 <_Bfree+0x3a>
 80138d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80138d8:	6862      	ldr	r2, [r4, #4]
 80138da:	68db      	ldr	r3, [r3, #12]
 80138dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80138e0:	6021      	str	r1, [r4, #0]
 80138e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80138e6:	bd70      	pop	{r4, r5, r6, pc}
 80138e8:	08016715 	.word	0x08016715
 80138ec:	0801687c 	.word	0x0801687c

080138f0 <__multadd>:
 80138f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138f4:	690e      	ldr	r6, [r1, #16]
 80138f6:	4607      	mov	r7, r0
 80138f8:	4698      	mov	r8, r3
 80138fa:	460c      	mov	r4, r1
 80138fc:	f101 0014 	add.w	r0, r1, #20
 8013900:	2300      	movs	r3, #0
 8013902:	6805      	ldr	r5, [r0, #0]
 8013904:	b2a9      	uxth	r1, r5
 8013906:	fb02 8101 	mla	r1, r2, r1, r8
 801390a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801390e:	0c2d      	lsrs	r5, r5, #16
 8013910:	fb02 c505 	mla	r5, r2, r5, ip
 8013914:	b289      	uxth	r1, r1
 8013916:	3301      	adds	r3, #1
 8013918:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801391c:	429e      	cmp	r6, r3
 801391e:	f840 1b04 	str.w	r1, [r0], #4
 8013922:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8013926:	dcec      	bgt.n	8013902 <__multadd+0x12>
 8013928:	f1b8 0f00 	cmp.w	r8, #0
 801392c:	d022      	beq.n	8013974 <__multadd+0x84>
 801392e:	68a3      	ldr	r3, [r4, #8]
 8013930:	42b3      	cmp	r3, r6
 8013932:	dc19      	bgt.n	8013968 <__multadd+0x78>
 8013934:	6861      	ldr	r1, [r4, #4]
 8013936:	4638      	mov	r0, r7
 8013938:	3101      	adds	r1, #1
 801393a:	f7ff ff77 	bl	801382c <_Balloc>
 801393e:	4605      	mov	r5, r0
 8013940:	b928      	cbnz	r0, 801394e <__multadd+0x5e>
 8013942:	4602      	mov	r2, r0
 8013944:	4b0d      	ldr	r3, [pc, #52]	; (801397c <__multadd+0x8c>)
 8013946:	480e      	ldr	r0, [pc, #56]	; (8013980 <__multadd+0x90>)
 8013948:	21b5      	movs	r1, #181	; 0xb5
 801394a:	f7fc fb35 	bl	800ffb8 <__assert_func>
 801394e:	6922      	ldr	r2, [r4, #16]
 8013950:	3202      	adds	r2, #2
 8013952:	f104 010c 	add.w	r1, r4, #12
 8013956:	0092      	lsls	r2, r2, #2
 8013958:	300c      	adds	r0, #12
 801395a:	f7fc fb87 	bl	801006c <memcpy>
 801395e:	4621      	mov	r1, r4
 8013960:	4638      	mov	r0, r7
 8013962:	f7ff ffa3 	bl	80138ac <_Bfree>
 8013966:	462c      	mov	r4, r5
 8013968:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801396c:	3601      	adds	r6, #1
 801396e:	f8c3 8014 	str.w	r8, [r3, #20]
 8013972:	6126      	str	r6, [r4, #16]
 8013974:	4620      	mov	r0, r4
 8013976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801397a:	bf00      	nop
 801397c:	0801678b 	.word	0x0801678b
 8013980:	0801687c 	.word	0x0801687c

08013984 <__s2b>:
 8013984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013988:	460c      	mov	r4, r1
 801398a:	4615      	mov	r5, r2
 801398c:	461f      	mov	r7, r3
 801398e:	2209      	movs	r2, #9
 8013990:	3308      	adds	r3, #8
 8013992:	4606      	mov	r6, r0
 8013994:	fb93 f3f2 	sdiv	r3, r3, r2
 8013998:	2100      	movs	r1, #0
 801399a:	2201      	movs	r2, #1
 801399c:	429a      	cmp	r2, r3
 801399e:	db09      	blt.n	80139b4 <__s2b+0x30>
 80139a0:	4630      	mov	r0, r6
 80139a2:	f7ff ff43 	bl	801382c <_Balloc>
 80139a6:	b940      	cbnz	r0, 80139ba <__s2b+0x36>
 80139a8:	4602      	mov	r2, r0
 80139aa:	4b19      	ldr	r3, [pc, #100]	; (8013a10 <__s2b+0x8c>)
 80139ac:	4819      	ldr	r0, [pc, #100]	; (8013a14 <__s2b+0x90>)
 80139ae:	21ce      	movs	r1, #206	; 0xce
 80139b0:	f7fc fb02 	bl	800ffb8 <__assert_func>
 80139b4:	0052      	lsls	r2, r2, #1
 80139b6:	3101      	adds	r1, #1
 80139b8:	e7f0      	b.n	801399c <__s2b+0x18>
 80139ba:	9b08      	ldr	r3, [sp, #32]
 80139bc:	6143      	str	r3, [r0, #20]
 80139be:	2d09      	cmp	r5, #9
 80139c0:	f04f 0301 	mov.w	r3, #1
 80139c4:	6103      	str	r3, [r0, #16]
 80139c6:	dd16      	ble.n	80139f6 <__s2b+0x72>
 80139c8:	f104 0909 	add.w	r9, r4, #9
 80139cc:	46c8      	mov	r8, r9
 80139ce:	442c      	add	r4, r5
 80139d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80139d4:	4601      	mov	r1, r0
 80139d6:	3b30      	subs	r3, #48	; 0x30
 80139d8:	220a      	movs	r2, #10
 80139da:	4630      	mov	r0, r6
 80139dc:	f7ff ff88 	bl	80138f0 <__multadd>
 80139e0:	45a0      	cmp	r8, r4
 80139e2:	d1f5      	bne.n	80139d0 <__s2b+0x4c>
 80139e4:	f1a5 0408 	sub.w	r4, r5, #8
 80139e8:	444c      	add	r4, r9
 80139ea:	1b2d      	subs	r5, r5, r4
 80139ec:	1963      	adds	r3, r4, r5
 80139ee:	42bb      	cmp	r3, r7
 80139f0:	db04      	blt.n	80139fc <__s2b+0x78>
 80139f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139f6:	340a      	adds	r4, #10
 80139f8:	2509      	movs	r5, #9
 80139fa:	e7f6      	b.n	80139ea <__s2b+0x66>
 80139fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013a00:	4601      	mov	r1, r0
 8013a02:	3b30      	subs	r3, #48	; 0x30
 8013a04:	220a      	movs	r2, #10
 8013a06:	4630      	mov	r0, r6
 8013a08:	f7ff ff72 	bl	80138f0 <__multadd>
 8013a0c:	e7ee      	b.n	80139ec <__s2b+0x68>
 8013a0e:	bf00      	nop
 8013a10:	0801678b 	.word	0x0801678b
 8013a14:	0801687c 	.word	0x0801687c

08013a18 <__hi0bits>:
 8013a18:	0c03      	lsrs	r3, r0, #16
 8013a1a:	041b      	lsls	r3, r3, #16
 8013a1c:	b9d3      	cbnz	r3, 8013a54 <__hi0bits+0x3c>
 8013a1e:	0400      	lsls	r0, r0, #16
 8013a20:	2310      	movs	r3, #16
 8013a22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013a26:	bf04      	itt	eq
 8013a28:	0200      	lsleq	r0, r0, #8
 8013a2a:	3308      	addeq	r3, #8
 8013a2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013a30:	bf04      	itt	eq
 8013a32:	0100      	lsleq	r0, r0, #4
 8013a34:	3304      	addeq	r3, #4
 8013a36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013a3a:	bf04      	itt	eq
 8013a3c:	0080      	lsleq	r0, r0, #2
 8013a3e:	3302      	addeq	r3, #2
 8013a40:	2800      	cmp	r0, #0
 8013a42:	db05      	blt.n	8013a50 <__hi0bits+0x38>
 8013a44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013a48:	f103 0301 	add.w	r3, r3, #1
 8013a4c:	bf08      	it	eq
 8013a4e:	2320      	moveq	r3, #32
 8013a50:	4618      	mov	r0, r3
 8013a52:	4770      	bx	lr
 8013a54:	2300      	movs	r3, #0
 8013a56:	e7e4      	b.n	8013a22 <__hi0bits+0xa>

08013a58 <__lo0bits>:
 8013a58:	6803      	ldr	r3, [r0, #0]
 8013a5a:	f013 0207 	ands.w	r2, r3, #7
 8013a5e:	4601      	mov	r1, r0
 8013a60:	d00b      	beq.n	8013a7a <__lo0bits+0x22>
 8013a62:	07da      	lsls	r2, r3, #31
 8013a64:	d424      	bmi.n	8013ab0 <__lo0bits+0x58>
 8013a66:	0798      	lsls	r0, r3, #30
 8013a68:	bf49      	itett	mi
 8013a6a:	085b      	lsrmi	r3, r3, #1
 8013a6c:	089b      	lsrpl	r3, r3, #2
 8013a6e:	2001      	movmi	r0, #1
 8013a70:	600b      	strmi	r3, [r1, #0]
 8013a72:	bf5c      	itt	pl
 8013a74:	600b      	strpl	r3, [r1, #0]
 8013a76:	2002      	movpl	r0, #2
 8013a78:	4770      	bx	lr
 8013a7a:	b298      	uxth	r0, r3
 8013a7c:	b9b0      	cbnz	r0, 8013aac <__lo0bits+0x54>
 8013a7e:	0c1b      	lsrs	r3, r3, #16
 8013a80:	2010      	movs	r0, #16
 8013a82:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013a86:	bf04      	itt	eq
 8013a88:	0a1b      	lsreq	r3, r3, #8
 8013a8a:	3008      	addeq	r0, #8
 8013a8c:	071a      	lsls	r2, r3, #28
 8013a8e:	bf04      	itt	eq
 8013a90:	091b      	lsreq	r3, r3, #4
 8013a92:	3004      	addeq	r0, #4
 8013a94:	079a      	lsls	r2, r3, #30
 8013a96:	bf04      	itt	eq
 8013a98:	089b      	lsreq	r3, r3, #2
 8013a9a:	3002      	addeq	r0, #2
 8013a9c:	07da      	lsls	r2, r3, #31
 8013a9e:	d403      	bmi.n	8013aa8 <__lo0bits+0x50>
 8013aa0:	085b      	lsrs	r3, r3, #1
 8013aa2:	f100 0001 	add.w	r0, r0, #1
 8013aa6:	d005      	beq.n	8013ab4 <__lo0bits+0x5c>
 8013aa8:	600b      	str	r3, [r1, #0]
 8013aaa:	4770      	bx	lr
 8013aac:	4610      	mov	r0, r2
 8013aae:	e7e8      	b.n	8013a82 <__lo0bits+0x2a>
 8013ab0:	2000      	movs	r0, #0
 8013ab2:	4770      	bx	lr
 8013ab4:	2020      	movs	r0, #32
 8013ab6:	4770      	bx	lr

08013ab8 <__i2b>:
 8013ab8:	b510      	push	{r4, lr}
 8013aba:	460c      	mov	r4, r1
 8013abc:	2101      	movs	r1, #1
 8013abe:	f7ff feb5 	bl	801382c <_Balloc>
 8013ac2:	4602      	mov	r2, r0
 8013ac4:	b928      	cbnz	r0, 8013ad2 <__i2b+0x1a>
 8013ac6:	4b05      	ldr	r3, [pc, #20]	; (8013adc <__i2b+0x24>)
 8013ac8:	4805      	ldr	r0, [pc, #20]	; (8013ae0 <__i2b+0x28>)
 8013aca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013ace:	f7fc fa73 	bl	800ffb8 <__assert_func>
 8013ad2:	2301      	movs	r3, #1
 8013ad4:	6144      	str	r4, [r0, #20]
 8013ad6:	6103      	str	r3, [r0, #16]
 8013ad8:	bd10      	pop	{r4, pc}
 8013ada:	bf00      	nop
 8013adc:	0801678b 	.word	0x0801678b
 8013ae0:	0801687c 	.word	0x0801687c

08013ae4 <__multiply>:
 8013ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ae8:	4614      	mov	r4, r2
 8013aea:	690a      	ldr	r2, [r1, #16]
 8013aec:	6923      	ldr	r3, [r4, #16]
 8013aee:	429a      	cmp	r2, r3
 8013af0:	bfb8      	it	lt
 8013af2:	460b      	movlt	r3, r1
 8013af4:	460d      	mov	r5, r1
 8013af6:	bfbc      	itt	lt
 8013af8:	4625      	movlt	r5, r4
 8013afa:	461c      	movlt	r4, r3
 8013afc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8013b00:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013b04:	68ab      	ldr	r3, [r5, #8]
 8013b06:	6869      	ldr	r1, [r5, #4]
 8013b08:	eb0a 0709 	add.w	r7, sl, r9
 8013b0c:	42bb      	cmp	r3, r7
 8013b0e:	b085      	sub	sp, #20
 8013b10:	bfb8      	it	lt
 8013b12:	3101      	addlt	r1, #1
 8013b14:	f7ff fe8a 	bl	801382c <_Balloc>
 8013b18:	b930      	cbnz	r0, 8013b28 <__multiply+0x44>
 8013b1a:	4602      	mov	r2, r0
 8013b1c:	4b42      	ldr	r3, [pc, #264]	; (8013c28 <__multiply+0x144>)
 8013b1e:	4843      	ldr	r0, [pc, #268]	; (8013c2c <__multiply+0x148>)
 8013b20:	f240 115d 	movw	r1, #349	; 0x15d
 8013b24:	f7fc fa48 	bl	800ffb8 <__assert_func>
 8013b28:	f100 0614 	add.w	r6, r0, #20
 8013b2c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8013b30:	4633      	mov	r3, r6
 8013b32:	2200      	movs	r2, #0
 8013b34:	4543      	cmp	r3, r8
 8013b36:	d31e      	bcc.n	8013b76 <__multiply+0x92>
 8013b38:	f105 0c14 	add.w	ip, r5, #20
 8013b3c:	f104 0314 	add.w	r3, r4, #20
 8013b40:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8013b44:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8013b48:	9202      	str	r2, [sp, #8]
 8013b4a:	ebac 0205 	sub.w	r2, ip, r5
 8013b4e:	3a15      	subs	r2, #21
 8013b50:	f022 0203 	bic.w	r2, r2, #3
 8013b54:	3204      	adds	r2, #4
 8013b56:	f105 0115 	add.w	r1, r5, #21
 8013b5a:	458c      	cmp	ip, r1
 8013b5c:	bf38      	it	cc
 8013b5e:	2204      	movcc	r2, #4
 8013b60:	9201      	str	r2, [sp, #4]
 8013b62:	9a02      	ldr	r2, [sp, #8]
 8013b64:	9303      	str	r3, [sp, #12]
 8013b66:	429a      	cmp	r2, r3
 8013b68:	d808      	bhi.n	8013b7c <__multiply+0x98>
 8013b6a:	2f00      	cmp	r7, #0
 8013b6c:	dc55      	bgt.n	8013c1a <__multiply+0x136>
 8013b6e:	6107      	str	r7, [r0, #16]
 8013b70:	b005      	add	sp, #20
 8013b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b76:	f843 2b04 	str.w	r2, [r3], #4
 8013b7a:	e7db      	b.n	8013b34 <__multiply+0x50>
 8013b7c:	f8b3 a000 	ldrh.w	sl, [r3]
 8013b80:	f1ba 0f00 	cmp.w	sl, #0
 8013b84:	d020      	beq.n	8013bc8 <__multiply+0xe4>
 8013b86:	f105 0e14 	add.w	lr, r5, #20
 8013b8a:	46b1      	mov	r9, r6
 8013b8c:	2200      	movs	r2, #0
 8013b8e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8013b92:	f8d9 b000 	ldr.w	fp, [r9]
 8013b96:	b2a1      	uxth	r1, r4
 8013b98:	fa1f fb8b 	uxth.w	fp, fp
 8013b9c:	fb0a b101 	mla	r1, sl, r1, fp
 8013ba0:	4411      	add	r1, r2
 8013ba2:	f8d9 2000 	ldr.w	r2, [r9]
 8013ba6:	0c24      	lsrs	r4, r4, #16
 8013ba8:	0c12      	lsrs	r2, r2, #16
 8013baa:	fb0a 2404 	mla	r4, sl, r4, r2
 8013bae:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8013bb2:	b289      	uxth	r1, r1
 8013bb4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8013bb8:	45f4      	cmp	ip, lr
 8013bba:	f849 1b04 	str.w	r1, [r9], #4
 8013bbe:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8013bc2:	d8e4      	bhi.n	8013b8e <__multiply+0xaa>
 8013bc4:	9901      	ldr	r1, [sp, #4]
 8013bc6:	5072      	str	r2, [r6, r1]
 8013bc8:	9a03      	ldr	r2, [sp, #12]
 8013bca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013bce:	3304      	adds	r3, #4
 8013bd0:	f1b9 0f00 	cmp.w	r9, #0
 8013bd4:	d01f      	beq.n	8013c16 <__multiply+0x132>
 8013bd6:	6834      	ldr	r4, [r6, #0]
 8013bd8:	f105 0114 	add.w	r1, r5, #20
 8013bdc:	46b6      	mov	lr, r6
 8013bde:	f04f 0a00 	mov.w	sl, #0
 8013be2:	880a      	ldrh	r2, [r1, #0]
 8013be4:	f8be b002 	ldrh.w	fp, [lr, #2]
 8013be8:	fb09 b202 	mla	r2, r9, r2, fp
 8013bec:	4492      	add	sl, r2
 8013bee:	b2a4      	uxth	r4, r4
 8013bf0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8013bf4:	f84e 4b04 	str.w	r4, [lr], #4
 8013bf8:	f851 4b04 	ldr.w	r4, [r1], #4
 8013bfc:	f8be 2000 	ldrh.w	r2, [lr]
 8013c00:	0c24      	lsrs	r4, r4, #16
 8013c02:	fb09 2404 	mla	r4, r9, r4, r2
 8013c06:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8013c0a:	458c      	cmp	ip, r1
 8013c0c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013c10:	d8e7      	bhi.n	8013be2 <__multiply+0xfe>
 8013c12:	9a01      	ldr	r2, [sp, #4]
 8013c14:	50b4      	str	r4, [r6, r2]
 8013c16:	3604      	adds	r6, #4
 8013c18:	e7a3      	b.n	8013b62 <__multiply+0x7e>
 8013c1a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d1a5      	bne.n	8013b6e <__multiply+0x8a>
 8013c22:	3f01      	subs	r7, #1
 8013c24:	e7a1      	b.n	8013b6a <__multiply+0x86>
 8013c26:	bf00      	nop
 8013c28:	0801678b 	.word	0x0801678b
 8013c2c:	0801687c 	.word	0x0801687c

08013c30 <__pow5mult>:
 8013c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c34:	4615      	mov	r5, r2
 8013c36:	f012 0203 	ands.w	r2, r2, #3
 8013c3a:	4606      	mov	r6, r0
 8013c3c:	460f      	mov	r7, r1
 8013c3e:	d007      	beq.n	8013c50 <__pow5mult+0x20>
 8013c40:	4c25      	ldr	r4, [pc, #148]	; (8013cd8 <__pow5mult+0xa8>)
 8013c42:	3a01      	subs	r2, #1
 8013c44:	2300      	movs	r3, #0
 8013c46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013c4a:	f7ff fe51 	bl	80138f0 <__multadd>
 8013c4e:	4607      	mov	r7, r0
 8013c50:	10ad      	asrs	r5, r5, #2
 8013c52:	d03d      	beq.n	8013cd0 <__pow5mult+0xa0>
 8013c54:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013c56:	b97c      	cbnz	r4, 8013c78 <__pow5mult+0x48>
 8013c58:	2010      	movs	r0, #16
 8013c5a:	f7ff fdb3 	bl	80137c4 <malloc>
 8013c5e:	4602      	mov	r2, r0
 8013c60:	6270      	str	r0, [r6, #36]	; 0x24
 8013c62:	b928      	cbnz	r0, 8013c70 <__pow5mult+0x40>
 8013c64:	4b1d      	ldr	r3, [pc, #116]	; (8013cdc <__pow5mult+0xac>)
 8013c66:	481e      	ldr	r0, [pc, #120]	; (8013ce0 <__pow5mult+0xb0>)
 8013c68:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013c6c:	f7fc f9a4 	bl	800ffb8 <__assert_func>
 8013c70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013c74:	6004      	str	r4, [r0, #0]
 8013c76:	60c4      	str	r4, [r0, #12]
 8013c78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013c7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013c80:	b94c      	cbnz	r4, 8013c96 <__pow5mult+0x66>
 8013c82:	f240 2171 	movw	r1, #625	; 0x271
 8013c86:	4630      	mov	r0, r6
 8013c88:	f7ff ff16 	bl	8013ab8 <__i2b>
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013c92:	4604      	mov	r4, r0
 8013c94:	6003      	str	r3, [r0, #0]
 8013c96:	f04f 0900 	mov.w	r9, #0
 8013c9a:	07eb      	lsls	r3, r5, #31
 8013c9c:	d50a      	bpl.n	8013cb4 <__pow5mult+0x84>
 8013c9e:	4639      	mov	r1, r7
 8013ca0:	4622      	mov	r2, r4
 8013ca2:	4630      	mov	r0, r6
 8013ca4:	f7ff ff1e 	bl	8013ae4 <__multiply>
 8013ca8:	4639      	mov	r1, r7
 8013caa:	4680      	mov	r8, r0
 8013cac:	4630      	mov	r0, r6
 8013cae:	f7ff fdfd 	bl	80138ac <_Bfree>
 8013cb2:	4647      	mov	r7, r8
 8013cb4:	106d      	asrs	r5, r5, #1
 8013cb6:	d00b      	beq.n	8013cd0 <__pow5mult+0xa0>
 8013cb8:	6820      	ldr	r0, [r4, #0]
 8013cba:	b938      	cbnz	r0, 8013ccc <__pow5mult+0x9c>
 8013cbc:	4622      	mov	r2, r4
 8013cbe:	4621      	mov	r1, r4
 8013cc0:	4630      	mov	r0, r6
 8013cc2:	f7ff ff0f 	bl	8013ae4 <__multiply>
 8013cc6:	6020      	str	r0, [r4, #0]
 8013cc8:	f8c0 9000 	str.w	r9, [r0]
 8013ccc:	4604      	mov	r4, r0
 8013cce:	e7e4      	b.n	8013c9a <__pow5mult+0x6a>
 8013cd0:	4638      	mov	r0, r7
 8013cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cd6:	bf00      	nop
 8013cd8:	080169d0 	.word	0x080169d0
 8013cdc:	08016715 	.word	0x08016715
 8013ce0:	0801687c 	.word	0x0801687c

08013ce4 <__lshift>:
 8013ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ce8:	460c      	mov	r4, r1
 8013cea:	6849      	ldr	r1, [r1, #4]
 8013cec:	6923      	ldr	r3, [r4, #16]
 8013cee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013cf2:	68a3      	ldr	r3, [r4, #8]
 8013cf4:	4607      	mov	r7, r0
 8013cf6:	4691      	mov	r9, r2
 8013cf8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013cfc:	f108 0601 	add.w	r6, r8, #1
 8013d00:	42b3      	cmp	r3, r6
 8013d02:	db0b      	blt.n	8013d1c <__lshift+0x38>
 8013d04:	4638      	mov	r0, r7
 8013d06:	f7ff fd91 	bl	801382c <_Balloc>
 8013d0a:	4605      	mov	r5, r0
 8013d0c:	b948      	cbnz	r0, 8013d22 <__lshift+0x3e>
 8013d0e:	4602      	mov	r2, r0
 8013d10:	4b28      	ldr	r3, [pc, #160]	; (8013db4 <__lshift+0xd0>)
 8013d12:	4829      	ldr	r0, [pc, #164]	; (8013db8 <__lshift+0xd4>)
 8013d14:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013d18:	f7fc f94e 	bl	800ffb8 <__assert_func>
 8013d1c:	3101      	adds	r1, #1
 8013d1e:	005b      	lsls	r3, r3, #1
 8013d20:	e7ee      	b.n	8013d00 <__lshift+0x1c>
 8013d22:	2300      	movs	r3, #0
 8013d24:	f100 0114 	add.w	r1, r0, #20
 8013d28:	f100 0210 	add.w	r2, r0, #16
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	4553      	cmp	r3, sl
 8013d30:	db33      	blt.n	8013d9a <__lshift+0xb6>
 8013d32:	6920      	ldr	r0, [r4, #16]
 8013d34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013d38:	f104 0314 	add.w	r3, r4, #20
 8013d3c:	f019 091f 	ands.w	r9, r9, #31
 8013d40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013d44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013d48:	d02b      	beq.n	8013da2 <__lshift+0xbe>
 8013d4a:	f1c9 0e20 	rsb	lr, r9, #32
 8013d4e:	468a      	mov	sl, r1
 8013d50:	2200      	movs	r2, #0
 8013d52:	6818      	ldr	r0, [r3, #0]
 8013d54:	fa00 f009 	lsl.w	r0, r0, r9
 8013d58:	4302      	orrs	r2, r0
 8013d5a:	f84a 2b04 	str.w	r2, [sl], #4
 8013d5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d62:	459c      	cmp	ip, r3
 8013d64:	fa22 f20e 	lsr.w	r2, r2, lr
 8013d68:	d8f3      	bhi.n	8013d52 <__lshift+0x6e>
 8013d6a:	ebac 0304 	sub.w	r3, ip, r4
 8013d6e:	3b15      	subs	r3, #21
 8013d70:	f023 0303 	bic.w	r3, r3, #3
 8013d74:	3304      	adds	r3, #4
 8013d76:	f104 0015 	add.w	r0, r4, #21
 8013d7a:	4584      	cmp	ip, r0
 8013d7c:	bf38      	it	cc
 8013d7e:	2304      	movcc	r3, #4
 8013d80:	50ca      	str	r2, [r1, r3]
 8013d82:	b10a      	cbz	r2, 8013d88 <__lshift+0xa4>
 8013d84:	f108 0602 	add.w	r6, r8, #2
 8013d88:	3e01      	subs	r6, #1
 8013d8a:	4638      	mov	r0, r7
 8013d8c:	612e      	str	r6, [r5, #16]
 8013d8e:	4621      	mov	r1, r4
 8013d90:	f7ff fd8c 	bl	80138ac <_Bfree>
 8013d94:	4628      	mov	r0, r5
 8013d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8013d9e:	3301      	adds	r3, #1
 8013da0:	e7c5      	b.n	8013d2e <__lshift+0x4a>
 8013da2:	3904      	subs	r1, #4
 8013da4:	f853 2b04 	ldr.w	r2, [r3], #4
 8013da8:	f841 2f04 	str.w	r2, [r1, #4]!
 8013dac:	459c      	cmp	ip, r3
 8013dae:	d8f9      	bhi.n	8013da4 <__lshift+0xc0>
 8013db0:	e7ea      	b.n	8013d88 <__lshift+0xa4>
 8013db2:	bf00      	nop
 8013db4:	0801678b 	.word	0x0801678b
 8013db8:	0801687c 	.word	0x0801687c

08013dbc <__mcmp>:
 8013dbc:	b530      	push	{r4, r5, lr}
 8013dbe:	6902      	ldr	r2, [r0, #16]
 8013dc0:	690c      	ldr	r4, [r1, #16]
 8013dc2:	1b12      	subs	r2, r2, r4
 8013dc4:	d10e      	bne.n	8013de4 <__mcmp+0x28>
 8013dc6:	f100 0314 	add.w	r3, r0, #20
 8013dca:	3114      	adds	r1, #20
 8013dcc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013dd0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013dd4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013dd8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013ddc:	42a5      	cmp	r5, r4
 8013dde:	d003      	beq.n	8013de8 <__mcmp+0x2c>
 8013de0:	d305      	bcc.n	8013dee <__mcmp+0x32>
 8013de2:	2201      	movs	r2, #1
 8013de4:	4610      	mov	r0, r2
 8013de6:	bd30      	pop	{r4, r5, pc}
 8013de8:	4283      	cmp	r3, r0
 8013dea:	d3f3      	bcc.n	8013dd4 <__mcmp+0x18>
 8013dec:	e7fa      	b.n	8013de4 <__mcmp+0x28>
 8013dee:	f04f 32ff 	mov.w	r2, #4294967295
 8013df2:	e7f7      	b.n	8013de4 <__mcmp+0x28>

08013df4 <__mdiff>:
 8013df4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013df8:	460c      	mov	r4, r1
 8013dfa:	4606      	mov	r6, r0
 8013dfc:	4611      	mov	r1, r2
 8013dfe:	4620      	mov	r0, r4
 8013e00:	4617      	mov	r7, r2
 8013e02:	f7ff ffdb 	bl	8013dbc <__mcmp>
 8013e06:	1e05      	subs	r5, r0, #0
 8013e08:	d110      	bne.n	8013e2c <__mdiff+0x38>
 8013e0a:	4629      	mov	r1, r5
 8013e0c:	4630      	mov	r0, r6
 8013e0e:	f7ff fd0d 	bl	801382c <_Balloc>
 8013e12:	b930      	cbnz	r0, 8013e22 <__mdiff+0x2e>
 8013e14:	4b39      	ldr	r3, [pc, #228]	; (8013efc <__mdiff+0x108>)
 8013e16:	4602      	mov	r2, r0
 8013e18:	f240 2132 	movw	r1, #562	; 0x232
 8013e1c:	4838      	ldr	r0, [pc, #224]	; (8013f00 <__mdiff+0x10c>)
 8013e1e:	f7fc f8cb 	bl	800ffb8 <__assert_func>
 8013e22:	2301      	movs	r3, #1
 8013e24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013e28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e2c:	bfa4      	itt	ge
 8013e2e:	463b      	movge	r3, r7
 8013e30:	4627      	movge	r7, r4
 8013e32:	4630      	mov	r0, r6
 8013e34:	6879      	ldr	r1, [r7, #4]
 8013e36:	bfa6      	itte	ge
 8013e38:	461c      	movge	r4, r3
 8013e3a:	2500      	movge	r5, #0
 8013e3c:	2501      	movlt	r5, #1
 8013e3e:	f7ff fcf5 	bl	801382c <_Balloc>
 8013e42:	b920      	cbnz	r0, 8013e4e <__mdiff+0x5a>
 8013e44:	4b2d      	ldr	r3, [pc, #180]	; (8013efc <__mdiff+0x108>)
 8013e46:	4602      	mov	r2, r0
 8013e48:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013e4c:	e7e6      	b.n	8013e1c <__mdiff+0x28>
 8013e4e:	693e      	ldr	r6, [r7, #16]
 8013e50:	60c5      	str	r5, [r0, #12]
 8013e52:	6925      	ldr	r5, [r4, #16]
 8013e54:	f107 0114 	add.w	r1, r7, #20
 8013e58:	f104 0914 	add.w	r9, r4, #20
 8013e5c:	f100 0e14 	add.w	lr, r0, #20
 8013e60:	f107 0210 	add.w	r2, r7, #16
 8013e64:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8013e68:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8013e6c:	46f2      	mov	sl, lr
 8013e6e:	2700      	movs	r7, #0
 8013e70:	f859 3b04 	ldr.w	r3, [r9], #4
 8013e74:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013e78:	fa1f f883 	uxth.w	r8, r3
 8013e7c:	fa17 f78b 	uxtah	r7, r7, fp
 8013e80:	0c1b      	lsrs	r3, r3, #16
 8013e82:	eba7 0808 	sub.w	r8, r7, r8
 8013e86:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013e8a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013e8e:	fa1f f888 	uxth.w	r8, r8
 8013e92:	141f      	asrs	r7, r3, #16
 8013e94:	454d      	cmp	r5, r9
 8013e96:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013e9a:	f84a 3b04 	str.w	r3, [sl], #4
 8013e9e:	d8e7      	bhi.n	8013e70 <__mdiff+0x7c>
 8013ea0:	1b2b      	subs	r3, r5, r4
 8013ea2:	3b15      	subs	r3, #21
 8013ea4:	f023 0303 	bic.w	r3, r3, #3
 8013ea8:	3304      	adds	r3, #4
 8013eaa:	3415      	adds	r4, #21
 8013eac:	42a5      	cmp	r5, r4
 8013eae:	bf38      	it	cc
 8013eb0:	2304      	movcc	r3, #4
 8013eb2:	4419      	add	r1, r3
 8013eb4:	4473      	add	r3, lr
 8013eb6:	469e      	mov	lr, r3
 8013eb8:	460d      	mov	r5, r1
 8013eba:	4565      	cmp	r5, ip
 8013ebc:	d30e      	bcc.n	8013edc <__mdiff+0xe8>
 8013ebe:	f10c 0203 	add.w	r2, ip, #3
 8013ec2:	1a52      	subs	r2, r2, r1
 8013ec4:	f022 0203 	bic.w	r2, r2, #3
 8013ec8:	3903      	subs	r1, #3
 8013eca:	458c      	cmp	ip, r1
 8013ecc:	bf38      	it	cc
 8013ece:	2200      	movcc	r2, #0
 8013ed0:	441a      	add	r2, r3
 8013ed2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013ed6:	b17b      	cbz	r3, 8013ef8 <__mdiff+0x104>
 8013ed8:	6106      	str	r6, [r0, #16]
 8013eda:	e7a5      	b.n	8013e28 <__mdiff+0x34>
 8013edc:	f855 8b04 	ldr.w	r8, [r5], #4
 8013ee0:	fa17 f488 	uxtah	r4, r7, r8
 8013ee4:	1422      	asrs	r2, r4, #16
 8013ee6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8013eea:	b2a4      	uxth	r4, r4
 8013eec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8013ef0:	f84e 4b04 	str.w	r4, [lr], #4
 8013ef4:	1417      	asrs	r7, r2, #16
 8013ef6:	e7e0      	b.n	8013eba <__mdiff+0xc6>
 8013ef8:	3e01      	subs	r6, #1
 8013efa:	e7ea      	b.n	8013ed2 <__mdiff+0xde>
 8013efc:	0801678b 	.word	0x0801678b
 8013f00:	0801687c 	.word	0x0801687c

08013f04 <__ulp>:
 8013f04:	b082      	sub	sp, #8
 8013f06:	ed8d 0b00 	vstr	d0, [sp]
 8013f0a:	9b01      	ldr	r3, [sp, #4]
 8013f0c:	4912      	ldr	r1, [pc, #72]	; (8013f58 <__ulp+0x54>)
 8013f0e:	4019      	ands	r1, r3
 8013f10:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8013f14:	2900      	cmp	r1, #0
 8013f16:	dd05      	ble.n	8013f24 <__ulp+0x20>
 8013f18:	2200      	movs	r2, #0
 8013f1a:	460b      	mov	r3, r1
 8013f1c:	ec43 2b10 	vmov	d0, r2, r3
 8013f20:	b002      	add	sp, #8
 8013f22:	4770      	bx	lr
 8013f24:	4249      	negs	r1, r1
 8013f26:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8013f2a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8013f2e:	f04f 0200 	mov.w	r2, #0
 8013f32:	f04f 0300 	mov.w	r3, #0
 8013f36:	da04      	bge.n	8013f42 <__ulp+0x3e>
 8013f38:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8013f3c:	fa41 f300 	asr.w	r3, r1, r0
 8013f40:	e7ec      	b.n	8013f1c <__ulp+0x18>
 8013f42:	f1a0 0114 	sub.w	r1, r0, #20
 8013f46:	291e      	cmp	r1, #30
 8013f48:	bfda      	itte	le
 8013f4a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8013f4e:	fa20 f101 	lsrle.w	r1, r0, r1
 8013f52:	2101      	movgt	r1, #1
 8013f54:	460a      	mov	r2, r1
 8013f56:	e7e1      	b.n	8013f1c <__ulp+0x18>
 8013f58:	7ff00000 	.word	0x7ff00000

08013f5c <__b2d>:
 8013f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f5e:	6905      	ldr	r5, [r0, #16]
 8013f60:	f100 0714 	add.w	r7, r0, #20
 8013f64:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013f68:	1f2e      	subs	r6, r5, #4
 8013f6a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013f6e:	4620      	mov	r0, r4
 8013f70:	f7ff fd52 	bl	8013a18 <__hi0bits>
 8013f74:	f1c0 0320 	rsb	r3, r0, #32
 8013f78:	280a      	cmp	r0, #10
 8013f7a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8013ff8 <__b2d+0x9c>
 8013f7e:	600b      	str	r3, [r1, #0]
 8013f80:	dc14      	bgt.n	8013fac <__b2d+0x50>
 8013f82:	f1c0 0e0b 	rsb	lr, r0, #11
 8013f86:	fa24 f10e 	lsr.w	r1, r4, lr
 8013f8a:	42b7      	cmp	r7, r6
 8013f8c:	ea41 030c 	orr.w	r3, r1, ip
 8013f90:	bf34      	ite	cc
 8013f92:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013f96:	2100      	movcs	r1, #0
 8013f98:	3015      	adds	r0, #21
 8013f9a:	fa04 f000 	lsl.w	r0, r4, r0
 8013f9e:	fa21 f10e 	lsr.w	r1, r1, lr
 8013fa2:	ea40 0201 	orr.w	r2, r0, r1
 8013fa6:	ec43 2b10 	vmov	d0, r2, r3
 8013faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013fac:	42b7      	cmp	r7, r6
 8013fae:	bf3a      	itte	cc
 8013fb0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013fb4:	f1a5 0608 	subcc.w	r6, r5, #8
 8013fb8:	2100      	movcs	r1, #0
 8013fba:	380b      	subs	r0, #11
 8013fbc:	d017      	beq.n	8013fee <__b2d+0x92>
 8013fbe:	f1c0 0c20 	rsb	ip, r0, #32
 8013fc2:	fa04 f500 	lsl.w	r5, r4, r0
 8013fc6:	42be      	cmp	r6, r7
 8013fc8:	fa21 f40c 	lsr.w	r4, r1, ip
 8013fcc:	ea45 0504 	orr.w	r5, r5, r4
 8013fd0:	bf8c      	ite	hi
 8013fd2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013fd6:	2400      	movls	r4, #0
 8013fd8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8013fdc:	fa01 f000 	lsl.w	r0, r1, r0
 8013fe0:	fa24 f40c 	lsr.w	r4, r4, ip
 8013fe4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013fe8:	ea40 0204 	orr.w	r2, r0, r4
 8013fec:	e7db      	b.n	8013fa6 <__b2d+0x4a>
 8013fee:	ea44 030c 	orr.w	r3, r4, ip
 8013ff2:	460a      	mov	r2, r1
 8013ff4:	e7d7      	b.n	8013fa6 <__b2d+0x4a>
 8013ff6:	bf00      	nop
 8013ff8:	3ff00000 	.word	0x3ff00000

08013ffc <__d2b>:
 8013ffc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014000:	4689      	mov	r9, r1
 8014002:	2101      	movs	r1, #1
 8014004:	ec57 6b10 	vmov	r6, r7, d0
 8014008:	4690      	mov	r8, r2
 801400a:	f7ff fc0f 	bl	801382c <_Balloc>
 801400e:	4604      	mov	r4, r0
 8014010:	b930      	cbnz	r0, 8014020 <__d2b+0x24>
 8014012:	4602      	mov	r2, r0
 8014014:	4b25      	ldr	r3, [pc, #148]	; (80140ac <__d2b+0xb0>)
 8014016:	4826      	ldr	r0, [pc, #152]	; (80140b0 <__d2b+0xb4>)
 8014018:	f240 310a 	movw	r1, #778	; 0x30a
 801401c:	f7fb ffcc 	bl	800ffb8 <__assert_func>
 8014020:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014024:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014028:	bb35      	cbnz	r5, 8014078 <__d2b+0x7c>
 801402a:	2e00      	cmp	r6, #0
 801402c:	9301      	str	r3, [sp, #4]
 801402e:	d028      	beq.n	8014082 <__d2b+0x86>
 8014030:	4668      	mov	r0, sp
 8014032:	9600      	str	r6, [sp, #0]
 8014034:	f7ff fd10 	bl	8013a58 <__lo0bits>
 8014038:	9900      	ldr	r1, [sp, #0]
 801403a:	b300      	cbz	r0, 801407e <__d2b+0x82>
 801403c:	9a01      	ldr	r2, [sp, #4]
 801403e:	f1c0 0320 	rsb	r3, r0, #32
 8014042:	fa02 f303 	lsl.w	r3, r2, r3
 8014046:	430b      	orrs	r3, r1
 8014048:	40c2      	lsrs	r2, r0
 801404a:	6163      	str	r3, [r4, #20]
 801404c:	9201      	str	r2, [sp, #4]
 801404e:	9b01      	ldr	r3, [sp, #4]
 8014050:	61a3      	str	r3, [r4, #24]
 8014052:	2b00      	cmp	r3, #0
 8014054:	bf14      	ite	ne
 8014056:	2202      	movne	r2, #2
 8014058:	2201      	moveq	r2, #1
 801405a:	6122      	str	r2, [r4, #16]
 801405c:	b1d5      	cbz	r5, 8014094 <__d2b+0x98>
 801405e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014062:	4405      	add	r5, r0
 8014064:	f8c9 5000 	str.w	r5, [r9]
 8014068:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801406c:	f8c8 0000 	str.w	r0, [r8]
 8014070:	4620      	mov	r0, r4
 8014072:	b003      	add	sp, #12
 8014074:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014078:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801407c:	e7d5      	b.n	801402a <__d2b+0x2e>
 801407e:	6161      	str	r1, [r4, #20]
 8014080:	e7e5      	b.n	801404e <__d2b+0x52>
 8014082:	a801      	add	r0, sp, #4
 8014084:	f7ff fce8 	bl	8013a58 <__lo0bits>
 8014088:	9b01      	ldr	r3, [sp, #4]
 801408a:	6163      	str	r3, [r4, #20]
 801408c:	2201      	movs	r2, #1
 801408e:	6122      	str	r2, [r4, #16]
 8014090:	3020      	adds	r0, #32
 8014092:	e7e3      	b.n	801405c <__d2b+0x60>
 8014094:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014098:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801409c:	f8c9 0000 	str.w	r0, [r9]
 80140a0:	6918      	ldr	r0, [r3, #16]
 80140a2:	f7ff fcb9 	bl	8013a18 <__hi0bits>
 80140a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80140aa:	e7df      	b.n	801406c <__d2b+0x70>
 80140ac:	0801678b 	.word	0x0801678b
 80140b0:	0801687c 	.word	0x0801687c

080140b4 <__ratio>:
 80140b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140b8:	4688      	mov	r8, r1
 80140ba:	4669      	mov	r1, sp
 80140bc:	4681      	mov	r9, r0
 80140be:	f7ff ff4d 	bl	8013f5c <__b2d>
 80140c2:	a901      	add	r1, sp, #4
 80140c4:	4640      	mov	r0, r8
 80140c6:	ec55 4b10 	vmov	r4, r5, d0
 80140ca:	f7ff ff47 	bl	8013f5c <__b2d>
 80140ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80140d2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80140d6:	eba3 0c02 	sub.w	ip, r3, r2
 80140da:	e9dd 3200 	ldrd	r3, r2, [sp]
 80140de:	1a9b      	subs	r3, r3, r2
 80140e0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80140e4:	ec51 0b10 	vmov	r0, r1, d0
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	bfd6      	itet	le
 80140ec:	460a      	movle	r2, r1
 80140ee:	462a      	movgt	r2, r5
 80140f0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80140f4:	468b      	mov	fp, r1
 80140f6:	462f      	mov	r7, r5
 80140f8:	bfd4      	ite	le
 80140fa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80140fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8014102:	4620      	mov	r0, r4
 8014104:	ee10 2a10 	vmov	r2, s0
 8014108:	465b      	mov	r3, fp
 801410a:	4639      	mov	r1, r7
 801410c:	f7ec fba6 	bl	800085c <__aeabi_ddiv>
 8014110:	ec41 0b10 	vmov	d0, r0, r1
 8014114:	b003      	add	sp, #12
 8014116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801411a <__copybits>:
 801411a:	3901      	subs	r1, #1
 801411c:	b570      	push	{r4, r5, r6, lr}
 801411e:	1149      	asrs	r1, r1, #5
 8014120:	6914      	ldr	r4, [r2, #16]
 8014122:	3101      	adds	r1, #1
 8014124:	f102 0314 	add.w	r3, r2, #20
 8014128:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801412c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014130:	1f05      	subs	r5, r0, #4
 8014132:	42a3      	cmp	r3, r4
 8014134:	d30c      	bcc.n	8014150 <__copybits+0x36>
 8014136:	1aa3      	subs	r3, r4, r2
 8014138:	3b11      	subs	r3, #17
 801413a:	f023 0303 	bic.w	r3, r3, #3
 801413e:	3211      	adds	r2, #17
 8014140:	42a2      	cmp	r2, r4
 8014142:	bf88      	it	hi
 8014144:	2300      	movhi	r3, #0
 8014146:	4418      	add	r0, r3
 8014148:	2300      	movs	r3, #0
 801414a:	4288      	cmp	r0, r1
 801414c:	d305      	bcc.n	801415a <__copybits+0x40>
 801414e:	bd70      	pop	{r4, r5, r6, pc}
 8014150:	f853 6b04 	ldr.w	r6, [r3], #4
 8014154:	f845 6f04 	str.w	r6, [r5, #4]!
 8014158:	e7eb      	b.n	8014132 <__copybits+0x18>
 801415a:	f840 3b04 	str.w	r3, [r0], #4
 801415e:	e7f4      	b.n	801414a <__copybits+0x30>

08014160 <__any_on>:
 8014160:	f100 0214 	add.w	r2, r0, #20
 8014164:	6900      	ldr	r0, [r0, #16]
 8014166:	114b      	asrs	r3, r1, #5
 8014168:	4298      	cmp	r0, r3
 801416a:	b510      	push	{r4, lr}
 801416c:	db11      	blt.n	8014192 <__any_on+0x32>
 801416e:	dd0a      	ble.n	8014186 <__any_on+0x26>
 8014170:	f011 011f 	ands.w	r1, r1, #31
 8014174:	d007      	beq.n	8014186 <__any_on+0x26>
 8014176:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801417a:	fa24 f001 	lsr.w	r0, r4, r1
 801417e:	fa00 f101 	lsl.w	r1, r0, r1
 8014182:	428c      	cmp	r4, r1
 8014184:	d10b      	bne.n	801419e <__any_on+0x3e>
 8014186:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801418a:	4293      	cmp	r3, r2
 801418c:	d803      	bhi.n	8014196 <__any_on+0x36>
 801418e:	2000      	movs	r0, #0
 8014190:	bd10      	pop	{r4, pc}
 8014192:	4603      	mov	r3, r0
 8014194:	e7f7      	b.n	8014186 <__any_on+0x26>
 8014196:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801419a:	2900      	cmp	r1, #0
 801419c:	d0f5      	beq.n	801418a <__any_on+0x2a>
 801419e:	2001      	movs	r0, #1
 80141a0:	e7f6      	b.n	8014190 <__any_on+0x30>

080141a2 <_calloc_r>:
 80141a2:	b513      	push	{r0, r1, r4, lr}
 80141a4:	434a      	muls	r2, r1
 80141a6:	4611      	mov	r1, r2
 80141a8:	9201      	str	r2, [sp, #4]
 80141aa:	f000 f859 	bl	8014260 <_malloc_r>
 80141ae:	4604      	mov	r4, r0
 80141b0:	b118      	cbz	r0, 80141ba <_calloc_r+0x18>
 80141b2:	9a01      	ldr	r2, [sp, #4]
 80141b4:	2100      	movs	r1, #0
 80141b6:	f7fb ff67 	bl	8010088 <memset>
 80141ba:	4620      	mov	r0, r4
 80141bc:	b002      	add	sp, #8
 80141be:	bd10      	pop	{r4, pc}

080141c0 <_free_r>:
 80141c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80141c2:	2900      	cmp	r1, #0
 80141c4:	d048      	beq.n	8014258 <_free_r+0x98>
 80141c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80141ca:	9001      	str	r0, [sp, #4]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	f1a1 0404 	sub.w	r4, r1, #4
 80141d2:	bfb8      	it	lt
 80141d4:	18e4      	addlt	r4, r4, r3
 80141d6:	f000 fb33 	bl	8014840 <__malloc_lock>
 80141da:	4a20      	ldr	r2, [pc, #128]	; (801425c <_free_r+0x9c>)
 80141dc:	9801      	ldr	r0, [sp, #4]
 80141de:	6813      	ldr	r3, [r2, #0]
 80141e0:	4615      	mov	r5, r2
 80141e2:	b933      	cbnz	r3, 80141f2 <_free_r+0x32>
 80141e4:	6063      	str	r3, [r4, #4]
 80141e6:	6014      	str	r4, [r2, #0]
 80141e8:	b003      	add	sp, #12
 80141ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80141ee:	f000 bb2d 	b.w	801484c <__malloc_unlock>
 80141f2:	42a3      	cmp	r3, r4
 80141f4:	d90b      	bls.n	801420e <_free_r+0x4e>
 80141f6:	6821      	ldr	r1, [r4, #0]
 80141f8:	1862      	adds	r2, r4, r1
 80141fa:	4293      	cmp	r3, r2
 80141fc:	bf04      	itt	eq
 80141fe:	681a      	ldreq	r2, [r3, #0]
 8014200:	685b      	ldreq	r3, [r3, #4]
 8014202:	6063      	str	r3, [r4, #4]
 8014204:	bf04      	itt	eq
 8014206:	1852      	addeq	r2, r2, r1
 8014208:	6022      	streq	r2, [r4, #0]
 801420a:	602c      	str	r4, [r5, #0]
 801420c:	e7ec      	b.n	80141e8 <_free_r+0x28>
 801420e:	461a      	mov	r2, r3
 8014210:	685b      	ldr	r3, [r3, #4]
 8014212:	b10b      	cbz	r3, 8014218 <_free_r+0x58>
 8014214:	42a3      	cmp	r3, r4
 8014216:	d9fa      	bls.n	801420e <_free_r+0x4e>
 8014218:	6811      	ldr	r1, [r2, #0]
 801421a:	1855      	adds	r5, r2, r1
 801421c:	42a5      	cmp	r5, r4
 801421e:	d10b      	bne.n	8014238 <_free_r+0x78>
 8014220:	6824      	ldr	r4, [r4, #0]
 8014222:	4421      	add	r1, r4
 8014224:	1854      	adds	r4, r2, r1
 8014226:	42a3      	cmp	r3, r4
 8014228:	6011      	str	r1, [r2, #0]
 801422a:	d1dd      	bne.n	80141e8 <_free_r+0x28>
 801422c:	681c      	ldr	r4, [r3, #0]
 801422e:	685b      	ldr	r3, [r3, #4]
 8014230:	6053      	str	r3, [r2, #4]
 8014232:	4421      	add	r1, r4
 8014234:	6011      	str	r1, [r2, #0]
 8014236:	e7d7      	b.n	80141e8 <_free_r+0x28>
 8014238:	d902      	bls.n	8014240 <_free_r+0x80>
 801423a:	230c      	movs	r3, #12
 801423c:	6003      	str	r3, [r0, #0]
 801423e:	e7d3      	b.n	80141e8 <_free_r+0x28>
 8014240:	6825      	ldr	r5, [r4, #0]
 8014242:	1961      	adds	r1, r4, r5
 8014244:	428b      	cmp	r3, r1
 8014246:	bf04      	itt	eq
 8014248:	6819      	ldreq	r1, [r3, #0]
 801424a:	685b      	ldreq	r3, [r3, #4]
 801424c:	6063      	str	r3, [r4, #4]
 801424e:	bf04      	itt	eq
 8014250:	1949      	addeq	r1, r1, r5
 8014252:	6021      	streq	r1, [r4, #0]
 8014254:	6054      	str	r4, [r2, #4]
 8014256:	e7c7      	b.n	80141e8 <_free_r+0x28>
 8014258:	b003      	add	sp, #12
 801425a:	bd30      	pop	{r4, r5, pc}
 801425c:	2000273c 	.word	0x2000273c

08014260 <_malloc_r>:
 8014260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014262:	1ccd      	adds	r5, r1, #3
 8014264:	f025 0503 	bic.w	r5, r5, #3
 8014268:	3508      	adds	r5, #8
 801426a:	2d0c      	cmp	r5, #12
 801426c:	bf38      	it	cc
 801426e:	250c      	movcc	r5, #12
 8014270:	2d00      	cmp	r5, #0
 8014272:	4606      	mov	r6, r0
 8014274:	db01      	blt.n	801427a <_malloc_r+0x1a>
 8014276:	42a9      	cmp	r1, r5
 8014278:	d903      	bls.n	8014282 <_malloc_r+0x22>
 801427a:	230c      	movs	r3, #12
 801427c:	6033      	str	r3, [r6, #0]
 801427e:	2000      	movs	r0, #0
 8014280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014282:	f000 fadd 	bl	8014840 <__malloc_lock>
 8014286:	4921      	ldr	r1, [pc, #132]	; (801430c <_malloc_r+0xac>)
 8014288:	680a      	ldr	r2, [r1, #0]
 801428a:	4614      	mov	r4, r2
 801428c:	b99c      	cbnz	r4, 80142b6 <_malloc_r+0x56>
 801428e:	4f20      	ldr	r7, [pc, #128]	; (8014310 <_malloc_r+0xb0>)
 8014290:	683b      	ldr	r3, [r7, #0]
 8014292:	b923      	cbnz	r3, 801429e <_malloc_r+0x3e>
 8014294:	4621      	mov	r1, r4
 8014296:	4630      	mov	r0, r6
 8014298:	f000 f9c6 	bl	8014628 <_sbrk_r>
 801429c:	6038      	str	r0, [r7, #0]
 801429e:	4629      	mov	r1, r5
 80142a0:	4630      	mov	r0, r6
 80142a2:	f000 f9c1 	bl	8014628 <_sbrk_r>
 80142a6:	1c43      	adds	r3, r0, #1
 80142a8:	d123      	bne.n	80142f2 <_malloc_r+0x92>
 80142aa:	230c      	movs	r3, #12
 80142ac:	6033      	str	r3, [r6, #0]
 80142ae:	4630      	mov	r0, r6
 80142b0:	f000 facc 	bl	801484c <__malloc_unlock>
 80142b4:	e7e3      	b.n	801427e <_malloc_r+0x1e>
 80142b6:	6823      	ldr	r3, [r4, #0]
 80142b8:	1b5b      	subs	r3, r3, r5
 80142ba:	d417      	bmi.n	80142ec <_malloc_r+0x8c>
 80142bc:	2b0b      	cmp	r3, #11
 80142be:	d903      	bls.n	80142c8 <_malloc_r+0x68>
 80142c0:	6023      	str	r3, [r4, #0]
 80142c2:	441c      	add	r4, r3
 80142c4:	6025      	str	r5, [r4, #0]
 80142c6:	e004      	b.n	80142d2 <_malloc_r+0x72>
 80142c8:	6863      	ldr	r3, [r4, #4]
 80142ca:	42a2      	cmp	r2, r4
 80142cc:	bf0c      	ite	eq
 80142ce:	600b      	streq	r3, [r1, #0]
 80142d0:	6053      	strne	r3, [r2, #4]
 80142d2:	4630      	mov	r0, r6
 80142d4:	f000 faba 	bl	801484c <__malloc_unlock>
 80142d8:	f104 000b 	add.w	r0, r4, #11
 80142dc:	1d23      	adds	r3, r4, #4
 80142de:	f020 0007 	bic.w	r0, r0, #7
 80142e2:	1ac2      	subs	r2, r0, r3
 80142e4:	d0cc      	beq.n	8014280 <_malloc_r+0x20>
 80142e6:	1a1b      	subs	r3, r3, r0
 80142e8:	50a3      	str	r3, [r4, r2]
 80142ea:	e7c9      	b.n	8014280 <_malloc_r+0x20>
 80142ec:	4622      	mov	r2, r4
 80142ee:	6864      	ldr	r4, [r4, #4]
 80142f0:	e7cc      	b.n	801428c <_malloc_r+0x2c>
 80142f2:	1cc4      	adds	r4, r0, #3
 80142f4:	f024 0403 	bic.w	r4, r4, #3
 80142f8:	42a0      	cmp	r0, r4
 80142fa:	d0e3      	beq.n	80142c4 <_malloc_r+0x64>
 80142fc:	1a21      	subs	r1, r4, r0
 80142fe:	4630      	mov	r0, r6
 8014300:	f000 f992 	bl	8014628 <_sbrk_r>
 8014304:	3001      	adds	r0, #1
 8014306:	d1dd      	bne.n	80142c4 <_malloc_r+0x64>
 8014308:	e7cf      	b.n	80142aa <_malloc_r+0x4a>
 801430a:	bf00      	nop
 801430c:	2000273c 	.word	0x2000273c
 8014310:	20002740 	.word	0x20002740

08014314 <_realloc_r>:
 8014314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014316:	4607      	mov	r7, r0
 8014318:	4614      	mov	r4, r2
 801431a:	460e      	mov	r6, r1
 801431c:	b921      	cbnz	r1, 8014328 <_realloc_r+0x14>
 801431e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014322:	4611      	mov	r1, r2
 8014324:	f7ff bf9c 	b.w	8014260 <_malloc_r>
 8014328:	b922      	cbnz	r2, 8014334 <_realloc_r+0x20>
 801432a:	f7ff ff49 	bl	80141c0 <_free_r>
 801432e:	4625      	mov	r5, r4
 8014330:	4628      	mov	r0, r5
 8014332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014334:	f000 fa90 	bl	8014858 <_malloc_usable_size_r>
 8014338:	42a0      	cmp	r0, r4
 801433a:	d20f      	bcs.n	801435c <_realloc_r+0x48>
 801433c:	4621      	mov	r1, r4
 801433e:	4638      	mov	r0, r7
 8014340:	f7ff ff8e 	bl	8014260 <_malloc_r>
 8014344:	4605      	mov	r5, r0
 8014346:	2800      	cmp	r0, #0
 8014348:	d0f2      	beq.n	8014330 <_realloc_r+0x1c>
 801434a:	4631      	mov	r1, r6
 801434c:	4622      	mov	r2, r4
 801434e:	f7fb fe8d 	bl	801006c <memcpy>
 8014352:	4631      	mov	r1, r6
 8014354:	4638      	mov	r0, r7
 8014356:	f7ff ff33 	bl	80141c0 <_free_r>
 801435a:	e7e9      	b.n	8014330 <_realloc_r+0x1c>
 801435c:	4635      	mov	r5, r6
 801435e:	e7e7      	b.n	8014330 <_realloc_r+0x1c>

08014360 <__ssputs_r>:
 8014360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014364:	688e      	ldr	r6, [r1, #8]
 8014366:	429e      	cmp	r6, r3
 8014368:	4682      	mov	sl, r0
 801436a:	460c      	mov	r4, r1
 801436c:	4690      	mov	r8, r2
 801436e:	461f      	mov	r7, r3
 8014370:	d838      	bhi.n	80143e4 <__ssputs_r+0x84>
 8014372:	898a      	ldrh	r2, [r1, #12]
 8014374:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014378:	d032      	beq.n	80143e0 <__ssputs_r+0x80>
 801437a:	6825      	ldr	r5, [r4, #0]
 801437c:	6909      	ldr	r1, [r1, #16]
 801437e:	eba5 0901 	sub.w	r9, r5, r1
 8014382:	6965      	ldr	r5, [r4, #20]
 8014384:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014388:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801438c:	3301      	adds	r3, #1
 801438e:	444b      	add	r3, r9
 8014390:	106d      	asrs	r5, r5, #1
 8014392:	429d      	cmp	r5, r3
 8014394:	bf38      	it	cc
 8014396:	461d      	movcc	r5, r3
 8014398:	0553      	lsls	r3, r2, #21
 801439a:	d531      	bpl.n	8014400 <__ssputs_r+0xa0>
 801439c:	4629      	mov	r1, r5
 801439e:	f7ff ff5f 	bl	8014260 <_malloc_r>
 80143a2:	4606      	mov	r6, r0
 80143a4:	b950      	cbnz	r0, 80143bc <__ssputs_r+0x5c>
 80143a6:	230c      	movs	r3, #12
 80143a8:	f8ca 3000 	str.w	r3, [sl]
 80143ac:	89a3      	ldrh	r3, [r4, #12]
 80143ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80143b2:	81a3      	strh	r3, [r4, #12]
 80143b4:	f04f 30ff 	mov.w	r0, #4294967295
 80143b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143bc:	6921      	ldr	r1, [r4, #16]
 80143be:	464a      	mov	r2, r9
 80143c0:	f7fb fe54 	bl	801006c <memcpy>
 80143c4:	89a3      	ldrh	r3, [r4, #12]
 80143c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80143ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80143ce:	81a3      	strh	r3, [r4, #12]
 80143d0:	6126      	str	r6, [r4, #16]
 80143d2:	6165      	str	r5, [r4, #20]
 80143d4:	444e      	add	r6, r9
 80143d6:	eba5 0509 	sub.w	r5, r5, r9
 80143da:	6026      	str	r6, [r4, #0]
 80143dc:	60a5      	str	r5, [r4, #8]
 80143de:	463e      	mov	r6, r7
 80143e0:	42be      	cmp	r6, r7
 80143e2:	d900      	bls.n	80143e6 <__ssputs_r+0x86>
 80143e4:	463e      	mov	r6, r7
 80143e6:	4632      	mov	r2, r6
 80143e8:	6820      	ldr	r0, [r4, #0]
 80143ea:	4641      	mov	r1, r8
 80143ec:	f7ff fa04 	bl	80137f8 <memmove>
 80143f0:	68a3      	ldr	r3, [r4, #8]
 80143f2:	6822      	ldr	r2, [r4, #0]
 80143f4:	1b9b      	subs	r3, r3, r6
 80143f6:	4432      	add	r2, r6
 80143f8:	60a3      	str	r3, [r4, #8]
 80143fa:	6022      	str	r2, [r4, #0]
 80143fc:	2000      	movs	r0, #0
 80143fe:	e7db      	b.n	80143b8 <__ssputs_r+0x58>
 8014400:	462a      	mov	r2, r5
 8014402:	f7ff ff87 	bl	8014314 <_realloc_r>
 8014406:	4606      	mov	r6, r0
 8014408:	2800      	cmp	r0, #0
 801440a:	d1e1      	bne.n	80143d0 <__ssputs_r+0x70>
 801440c:	6921      	ldr	r1, [r4, #16]
 801440e:	4650      	mov	r0, sl
 8014410:	f7ff fed6 	bl	80141c0 <_free_r>
 8014414:	e7c7      	b.n	80143a6 <__ssputs_r+0x46>
	...

08014418 <_svfiprintf_r>:
 8014418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801441c:	4698      	mov	r8, r3
 801441e:	898b      	ldrh	r3, [r1, #12]
 8014420:	061b      	lsls	r3, r3, #24
 8014422:	b09d      	sub	sp, #116	; 0x74
 8014424:	4607      	mov	r7, r0
 8014426:	460d      	mov	r5, r1
 8014428:	4614      	mov	r4, r2
 801442a:	d50e      	bpl.n	801444a <_svfiprintf_r+0x32>
 801442c:	690b      	ldr	r3, [r1, #16]
 801442e:	b963      	cbnz	r3, 801444a <_svfiprintf_r+0x32>
 8014430:	2140      	movs	r1, #64	; 0x40
 8014432:	f7ff ff15 	bl	8014260 <_malloc_r>
 8014436:	6028      	str	r0, [r5, #0]
 8014438:	6128      	str	r0, [r5, #16]
 801443a:	b920      	cbnz	r0, 8014446 <_svfiprintf_r+0x2e>
 801443c:	230c      	movs	r3, #12
 801443e:	603b      	str	r3, [r7, #0]
 8014440:	f04f 30ff 	mov.w	r0, #4294967295
 8014444:	e0d1      	b.n	80145ea <_svfiprintf_r+0x1d2>
 8014446:	2340      	movs	r3, #64	; 0x40
 8014448:	616b      	str	r3, [r5, #20]
 801444a:	2300      	movs	r3, #0
 801444c:	9309      	str	r3, [sp, #36]	; 0x24
 801444e:	2320      	movs	r3, #32
 8014450:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014454:	f8cd 800c 	str.w	r8, [sp, #12]
 8014458:	2330      	movs	r3, #48	; 0x30
 801445a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014604 <_svfiprintf_r+0x1ec>
 801445e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014462:	f04f 0901 	mov.w	r9, #1
 8014466:	4623      	mov	r3, r4
 8014468:	469a      	mov	sl, r3
 801446a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801446e:	b10a      	cbz	r2, 8014474 <_svfiprintf_r+0x5c>
 8014470:	2a25      	cmp	r2, #37	; 0x25
 8014472:	d1f9      	bne.n	8014468 <_svfiprintf_r+0x50>
 8014474:	ebba 0b04 	subs.w	fp, sl, r4
 8014478:	d00b      	beq.n	8014492 <_svfiprintf_r+0x7a>
 801447a:	465b      	mov	r3, fp
 801447c:	4622      	mov	r2, r4
 801447e:	4629      	mov	r1, r5
 8014480:	4638      	mov	r0, r7
 8014482:	f7ff ff6d 	bl	8014360 <__ssputs_r>
 8014486:	3001      	adds	r0, #1
 8014488:	f000 80aa 	beq.w	80145e0 <_svfiprintf_r+0x1c8>
 801448c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801448e:	445a      	add	r2, fp
 8014490:	9209      	str	r2, [sp, #36]	; 0x24
 8014492:	f89a 3000 	ldrb.w	r3, [sl]
 8014496:	2b00      	cmp	r3, #0
 8014498:	f000 80a2 	beq.w	80145e0 <_svfiprintf_r+0x1c8>
 801449c:	2300      	movs	r3, #0
 801449e:	f04f 32ff 	mov.w	r2, #4294967295
 80144a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80144a6:	f10a 0a01 	add.w	sl, sl, #1
 80144aa:	9304      	str	r3, [sp, #16]
 80144ac:	9307      	str	r3, [sp, #28]
 80144ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80144b2:	931a      	str	r3, [sp, #104]	; 0x68
 80144b4:	4654      	mov	r4, sl
 80144b6:	2205      	movs	r2, #5
 80144b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144bc:	4851      	ldr	r0, [pc, #324]	; (8014604 <_svfiprintf_r+0x1ec>)
 80144be:	f7eb fe97 	bl	80001f0 <memchr>
 80144c2:	9a04      	ldr	r2, [sp, #16]
 80144c4:	b9d8      	cbnz	r0, 80144fe <_svfiprintf_r+0xe6>
 80144c6:	06d0      	lsls	r0, r2, #27
 80144c8:	bf44      	itt	mi
 80144ca:	2320      	movmi	r3, #32
 80144cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80144d0:	0711      	lsls	r1, r2, #28
 80144d2:	bf44      	itt	mi
 80144d4:	232b      	movmi	r3, #43	; 0x2b
 80144d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80144da:	f89a 3000 	ldrb.w	r3, [sl]
 80144de:	2b2a      	cmp	r3, #42	; 0x2a
 80144e0:	d015      	beq.n	801450e <_svfiprintf_r+0xf6>
 80144e2:	9a07      	ldr	r2, [sp, #28]
 80144e4:	4654      	mov	r4, sl
 80144e6:	2000      	movs	r0, #0
 80144e8:	f04f 0c0a 	mov.w	ip, #10
 80144ec:	4621      	mov	r1, r4
 80144ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80144f2:	3b30      	subs	r3, #48	; 0x30
 80144f4:	2b09      	cmp	r3, #9
 80144f6:	d94e      	bls.n	8014596 <_svfiprintf_r+0x17e>
 80144f8:	b1b0      	cbz	r0, 8014528 <_svfiprintf_r+0x110>
 80144fa:	9207      	str	r2, [sp, #28]
 80144fc:	e014      	b.n	8014528 <_svfiprintf_r+0x110>
 80144fe:	eba0 0308 	sub.w	r3, r0, r8
 8014502:	fa09 f303 	lsl.w	r3, r9, r3
 8014506:	4313      	orrs	r3, r2
 8014508:	9304      	str	r3, [sp, #16]
 801450a:	46a2      	mov	sl, r4
 801450c:	e7d2      	b.n	80144b4 <_svfiprintf_r+0x9c>
 801450e:	9b03      	ldr	r3, [sp, #12]
 8014510:	1d19      	adds	r1, r3, #4
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	9103      	str	r1, [sp, #12]
 8014516:	2b00      	cmp	r3, #0
 8014518:	bfbb      	ittet	lt
 801451a:	425b      	neglt	r3, r3
 801451c:	f042 0202 	orrlt.w	r2, r2, #2
 8014520:	9307      	strge	r3, [sp, #28]
 8014522:	9307      	strlt	r3, [sp, #28]
 8014524:	bfb8      	it	lt
 8014526:	9204      	strlt	r2, [sp, #16]
 8014528:	7823      	ldrb	r3, [r4, #0]
 801452a:	2b2e      	cmp	r3, #46	; 0x2e
 801452c:	d10c      	bne.n	8014548 <_svfiprintf_r+0x130>
 801452e:	7863      	ldrb	r3, [r4, #1]
 8014530:	2b2a      	cmp	r3, #42	; 0x2a
 8014532:	d135      	bne.n	80145a0 <_svfiprintf_r+0x188>
 8014534:	9b03      	ldr	r3, [sp, #12]
 8014536:	1d1a      	adds	r2, r3, #4
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	9203      	str	r2, [sp, #12]
 801453c:	2b00      	cmp	r3, #0
 801453e:	bfb8      	it	lt
 8014540:	f04f 33ff 	movlt.w	r3, #4294967295
 8014544:	3402      	adds	r4, #2
 8014546:	9305      	str	r3, [sp, #20]
 8014548:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014614 <_svfiprintf_r+0x1fc>
 801454c:	7821      	ldrb	r1, [r4, #0]
 801454e:	2203      	movs	r2, #3
 8014550:	4650      	mov	r0, sl
 8014552:	f7eb fe4d 	bl	80001f0 <memchr>
 8014556:	b140      	cbz	r0, 801456a <_svfiprintf_r+0x152>
 8014558:	2340      	movs	r3, #64	; 0x40
 801455a:	eba0 000a 	sub.w	r0, r0, sl
 801455e:	fa03 f000 	lsl.w	r0, r3, r0
 8014562:	9b04      	ldr	r3, [sp, #16]
 8014564:	4303      	orrs	r3, r0
 8014566:	3401      	adds	r4, #1
 8014568:	9304      	str	r3, [sp, #16]
 801456a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801456e:	4826      	ldr	r0, [pc, #152]	; (8014608 <_svfiprintf_r+0x1f0>)
 8014570:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014574:	2206      	movs	r2, #6
 8014576:	f7eb fe3b 	bl	80001f0 <memchr>
 801457a:	2800      	cmp	r0, #0
 801457c:	d038      	beq.n	80145f0 <_svfiprintf_r+0x1d8>
 801457e:	4b23      	ldr	r3, [pc, #140]	; (801460c <_svfiprintf_r+0x1f4>)
 8014580:	bb1b      	cbnz	r3, 80145ca <_svfiprintf_r+0x1b2>
 8014582:	9b03      	ldr	r3, [sp, #12]
 8014584:	3307      	adds	r3, #7
 8014586:	f023 0307 	bic.w	r3, r3, #7
 801458a:	3308      	adds	r3, #8
 801458c:	9303      	str	r3, [sp, #12]
 801458e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014590:	4433      	add	r3, r6
 8014592:	9309      	str	r3, [sp, #36]	; 0x24
 8014594:	e767      	b.n	8014466 <_svfiprintf_r+0x4e>
 8014596:	fb0c 3202 	mla	r2, ip, r2, r3
 801459a:	460c      	mov	r4, r1
 801459c:	2001      	movs	r0, #1
 801459e:	e7a5      	b.n	80144ec <_svfiprintf_r+0xd4>
 80145a0:	2300      	movs	r3, #0
 80145a2:	3401      	adds	r4, #1
 80145a4:	9305      	str	r3, [sp, #20]
 80145a6:	4619      	mov	r1, r3
 80145a8:	f04f 0c0a 	mov.w	ip, #10
 80145ac:	4620      	mov	r0, r4
 80145ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80145b2:	3a30      	subs	r2, #48	; 0x30
 80145b4:	2a09      	cmp	r2, #9
 80145b6:	d903      	bls.n	80145c0 <_svfiprintf_r+0x1a8>
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d0c5      	beq.n	8014548 <_svfiprintf_r+0x130>
 80145bc:	9105      	str	r1, [sp, #20]
 80145be:	e7c3      	b.n	8014548 <_svfiprintf_r+0x130>
 80145c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80145c4:	4604      	mov	r4, r0
 80145c6:	2301      	movs	r3, #1
 80145c8:	e7f0      	b.n	80145ac <_svfiprintf_r+0x194>
 80145ca:	ab03      	add	r3, sp, #12
 80145cc:	9300      	str	r3, [sp, #0]
 80145ce:	462a      	mov	r2, r5
 80145d0:	4b0f      	ldr	r3, [pc, #60]	; (8014610 <_svfiprintf_r+0x1f8>)
 80145d2:	a904      	add	r1, sp, #16
 80145d4:	4638      	mov	r0, r7
 80145d6:	f7fb ff59 	bl	801048c <_printf_float>
 80145da:	1c42      	adds	r2, r0, #1
 80145dc:	4606      	mov	r6, r0
 80145de:	d1d6      	bne.n	801458e <_svfiprintf_r+0x176>
 80145e0:	89ab      	ldrh	r3, [r5, #12]
 80145e2:	065b      	lsls	r3, r3, #25
 80145e4:	f53f af2c 	bmi.w	8014440 <_svfiprintf_r+0x28>
 80145e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80145ea:	b01d      	add	sp, #116	; 0x74
 80145ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145f0:	ab03      	add	r3, sp, #12
 80145f2:	9300      	str	r3, [sp, #0]
 80145f4:	462a      	mov	r2, r5
 80145f6:	4b06      	ldr	r3, [pc, #24]	; (8014610 <_svfiprintf_r+0x1f8>)
 80145f8:	a904      	add	r1, sp, #16
 80145fa:	4638      	mov	r0, r7
 80145fc:	f7fc f9ea 	bl	80109d4 <_printf_i>
 8014600:	e7eb      	b.n	80145da <_svfiprintf_r+0x1c2>
 8014602:	bf00      	nop
 8014604:	0801666c 	.word	0x0801666c
 8014608:	08016676 	.word	0x08016676
 801460c:	0801048d 	.word	0x0801048d
 8014610:	08014361 	.word	0x08014361
 8014614:	08016672 	.word	0x08016672

08014618 <nan>:
 8014618:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014620 <nan+0x8>
 801461c:	4770      	bx	lr
 801461e:	bf00      	nop
 8014620:	00000000 	.word	0x00000000
 8014624:	7ff80000 	.word	0x7ff80000

08014628 <_sbrk_r>:
 8014628:	b538      	push	{r3, r4, r5, lr}
 801462a:	4d06      	ldr	r5, [pc, #24]	; (8014644 <_sbrk_r+0x1c>)
 801462c:	2300      	movs	r3, #0
 801462e:	4604      	mov	r4, r0
 8014630:	4608      	mov	r0, r1
 8014632:	602b      	str	r3, [r5, #0]
 8014634:	f7ef ff40 	bl	80044b8 <_sbrk>
 8014638:	1c43      	adds	r3, r0, #1
 801463a:	d102      	bne.n	8014642 <_sbrk_r+0x1a>
 801463c:	682b      	ldr	r3, [r5, #0]
 801463e:	b103      	cbz	r3, 8014642 <_sbrk_r+0x1a>
 8014640:	6023      	str	r3, [r4, #0]
 8014642:	bd38      	pop	{r3, r4, r5, pc}
 8014644:	20004a30 	.word	0x20004a30

08014648 <_raise_r>:
 8014648:	291f      	cmp	r1, #31
 801464a:	b538      	push	{r3, r4, r5, lr}
 801464c:	4604      	mov	r4, r0
 801464e:	460d      	mov	r5, r1
 8014650:	d904      	bls.n	801465c <_raise_r+0x14>
 8014652:	2316      	movs	r3, #22
 8014654:	6003      	str	r3, [r0, #0]
 8014656:	f04f 30ff 	mov.w	r0, #4294967295
 801465a:	bd38      	pop	{r3, r4, r5, pc}
 801465c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801465e:	b112      	cbz	r2, 8014666 <_raise_r+0x1e>
 8014660:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014664:	b94b      	cbnz	r3, 801467a <_raise_r+0x32>
 8014666:	4620      	mov	r0, r4
 8014668:	f000 f830 	bl	80146cc <_getpid_r>
 801466c:	462a      	mov	r2, r5
 801466e:	4601      	mov	r1, r0
 8014670:	4620      	mov	r0, r4
 8014672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014676:	f000 b817 	b.w	80146a8 <_kill_r>
 801467a:	2b01      	cmp	r3, #1
 801467c:	d00a      	beq.n	8014694 <_raise_r+0x4c>
 801467e:	1c59      	adds	r1, r3, #1
 8014680:	d103      	bne.n	801468a <_raise_r+0x42>
 8014682:	2316      	movs	r3, #22
 8014684:	6003      	str	r3, [r0, #0]
 8014686:	2001      	movs	r0, #1
 8014688:	e7e7      	b.n	801465a <_raise_r+0x12>
 801468a:	2400      	movs	r4, #0
 801468c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014690:	4628      	mov	r0, r5
 8014692:	4798      	blx	r3
 8014694:	2000      	movs	r0, #0
 8014696:	e7e0      	b.n	801465a <_raise_r+0x12>

08014698 <raise>:
 8014698:	4b02      	ldr	r3, [pc, #8]	; (80146a4 <raise+0xc>)
 801469a:	4601      	mov	r1, r0
 801469c:	6818      	ldr	r0, [r3, #0]
 801469e:	f7ff bfd3 	b.w	8014648 <_raise_r>
 80146a2:	bf00      	nop
 80146a4:	20000058 	.word	0x20000058

080146a8 <_kill_r>:
 80146a8:	b538      	push	{r3, r4, r5, lr}
 80146aa:	4d07      	ldr	r5, [pc, #28]	; (80146c8 <_kill_r+0x20>)
 80146ac:	2300      	movs	r3, #0
 80146ae:	4604      	mov	r4, r0
 80146b0:	4608      	mov	r0, r1
 80146b2:	4611      	mov	r1, r2
 80146b4:	602b      	str	r3, [r5, #0]
 80146b6:	f7ef fe93 	bl	80043e0 <_kill>
 80146ba:	1c43      	adds	r3, r0, #1
 80146bc:	d102      	bne.n	80146c4 <_kill_r+0x1c>
 80146be:	682b      	ldr	r3, [r5, #0]
 80146c0:	b103      	cbz	r3, 80146c4 <_kill_r+0x1c>
 80146c2:	6023      	str	r3, [r4, #0]
 80146c4:	bd38      	pop	{r3, r4, r5, pc}
 80146c6:	bf00      	nop
 80146c8:	20004a30 	.word	0x20004a30

080146cc <_getpid_r>:
 80146cc:	f7ef be80 	b.w	80043d0 <_getpid>

080146d0 <__sread>:
 80146d0:	b510      	push	{r4, lr}
 80146d2:	460c      	mov	r4, r1
 80146d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146d8:	f000 f8c6 	bl	8014868 <_read_r>
 80146dc:	2800      	cmp	r0, #0
 80146de:	bfab      	itete	ge
 80146e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80146e2:	89a3      	ldrhlt	r3, [r4, #12]
 80146e4:	181b      	addge	r3, r3, r0
 80146e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80146ea:	bfac      	ite	ge
 80146ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80146ee:	81a3      	strhlt	r3, [r4, #12]
 80146f0:	bd10      	pop	{r4, pc}

080146f2 <__swrite>:
 80146f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146f6:	461f      	mov	r7, r3
 80146f8:	898b      	ldrh	r3, [r1, #12]
 80146fa:	05db      	lsls	r3, r3, #23
 80146fc:	4605      	mov	r5, r0
 80146fe:	460c      	mov	r4, r1
 8014700:	4616      	mov	r6, r2
 8014702:	d505      	bpl.n	8014710 <__swrite+0x1e>
 8014704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014708:	2302      	movs	r3, #2
 801470a:	2200      	movs	r2, #0
 801470c:	f000 f886 	bl	801481c <_lseek_r>
 8014710:	89a3      	ldrh	r3, [r4, #12]
 8014712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014716:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801471a:	81a3      	strh	r3, [r4, #12]
 801471c:	4632      	mov	r2, r6
 801471e:	463b      	mov	r3, r7
 8014720:	4628      	mov	r0, r5
 8014722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014726:	f000 b835 	b.w	8014794 <_write_r>

0801472a <__sseek>:
 801472a:	b510      	push	{r4, lr}
 801472c:	460c      	mov	r4, r1
 801472e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014732:	f000 f873 	bl	801481c <_lseek_r>
 8014736:	1c43      	adds	r3, r0, #1
 8014738:	89a3      	ldrh	r3, [r4, #12]
 801473a:	bf15      	itete	ne
 801473c:	6560      	strne	r0, [r4, #84]	; 0x54
 801473e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014742:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014746:	81a3      	strheq	r3, [r4, #12]
 8014748:	bf18      	it	ne
 801474a:	81a3      	strhne	r3, [r4, #12]
 801474c:	bd10      	pop	{r4, pc}

0801474e <__sclose>:
 801474e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014752:	f000 b831 	b.w	80147b8 <_close_r>

08014756 <strncmp>:
 8014756:	b510      	push	{r4, lr}
 8014758:	b16a      	cbz	r2, 8014776 <strncmp+0x20>
 801475a:	3901      	subs	r1, #1
 801475c:	1884      	adds	r4, r0, r2
 801475e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014762:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014766:	4293      	cmp	r3, r2
 8014768:	d103      	bne.n	8014772 <strncmp+0x1c>
 801476a:	42a0      	cmp	r0, r4
 801476c:	d001      	beq.n	8014772 <strncmp+0x1c>
 801476e:	2b00      	cmp	r3, #0
 8014770:	d1f5      	bne.n	801475e <strncmp+0x8>
 8014772:	1a98      	subs	r0, r3, r2
 8014774:	bd10      	pop	{r4, pc}
 8014776:	4610      	mov	r0, r2
 8014778:	e7fc      	b.n	8014774 <strncmp+0x1e>

0801477a <__ascii_wctomb>:
 801477a:	b149      	cbz	r1, 8014790 <__ascii_wctomb+0x16>
 801477c:	2aff      	cmp	r2, #255	; 0xff
 801477e:	bf85      	ittet	hi
 8014780:	238a      	movhi	r3, #138	; 0x8a
 8014782:	6003      	strhi	r3, [r0, #0]
 8014784:	700a      	strbls	r2, [r1, #0]
 8014786:	f04f 30ff 	movhi.w	r0, #4294967295
 801478a:	bf98      	it	ls
 801478c:	2001      	movls	r0, #1
 801478e:	4770      	bx	lr
 8014790:	4608      	mov	r0, r1
 8014792:	4770      	bx	lr

08014794 <_write_r>:
 8014794:	b538      	push	{r3, r4, r5, lr}
 8014796:	4d07      	ldr	r5, [pc, #28]	; (80147b4 <_write_r+0x20>)
 8014798:	4604      	mov	r4, r0
 801479a:	4608      	mov	r0, r1
 801479c:	4611      	mov	r1, r2
 801479e:	2200      	movs	r2, #0
 80147a0:	602a      	str	r2, [r5, #0]
 80147a2:	461a      	mov	r2, r3
 80147a4:	f7ec fc2a 	bl	8000ffc <_write>
 80147a8:	1c43      	adds	r3, r0, #1
 80147aa:	d102      	bne.n	80147b2 <_write_r+0x1e>
 80147ac:	682b      	ldr	r3, [r5, #0]
 80147ae:	b103      	cbz	r3, 80147b2 <_write_r+0x1e>
 80147b0:	6023      	str	r3, [r4, #0]
 80147b2:	bd38      	pop	{r3, r4, r5, pc}
 80147b4:	20004a30 	.word	0x20004a30

080147b8 <_close_r>:
 80147b8:	b538      	push	{r3, r4, r5, lr}
 80147ba:	4d06      	ldr	r5, [pc, #24]	; (80147d4 <_close_r+0x1c>)
 80147bc:	2300      	movs	r3, #0
 80147be:	4604      	mov	r4, r0
 80147c0:	4608      	mov	r0, r1
 80147c2:	602b      	str	r3, [r5, #0]
 80147c4:	f7ef fe43 	bl	800444e <_close>
 80147c8:	1c43      	adds	r3, r0, #1
 80147ca:	d102      	bne.n	80147d2 <_close_r+0x1a>
 80147cc:	682b      	ldr	r3, [r5, #0]
 80147ce:	b103      	cbz	r3, 80147d2 <_close_r+0x1a>
 80147d0:	6023      	str	r3, [r4, #0]
 80147d2:	bd38      	pop	{r3, r4, r5, pc}
 80147d4:	20004a30 	.word	0x20004a30

080147d8 <_fstat_r>:
 80147d8:	b538      	push	{r3, r4, r5, lr}
 80147da:	4d07      	ldr	r5, [pc, #28]	; (80147f8 <_fstat_r+0x20>)
 80147dc:	2300      	movs	r3, #0
 80147de:	4604      	mov	r4, r0
 80147e0:	4608      	mov	r0, r1
 80147e2:	4611      	mov	r1, r2
 80147e4:	602b      	str	r3, [r5, #0]
 80147e6:	f7ef fe3e 	bl	8004466 <_fstat>
 80147ea:	1c43      	adds	r3, r0, #1
 80147ec:	d102      	bne.n	80147f4 <_fstat_r+0x1c>
 80147ee:	682b      	ldr	r3, [r5, #0]
 80147f0:	b103      	cbz	r3, 80147f4 <_fstat_r+0x1c>
 80147f2:	6023      	str	r3, [r4, #0]
 80147f4:	bd38      	pop	{r3, r4, r5, pc}
 80147f6:	bf00      	nop
 80147f8:	20004a30 	.word	0x20004a30

080147fc <_isatty_r>:
 80147fc:	b538      	push	{r3, r4, r5, lr}
 80147fe:	4d06      	ldr	r5, [pc, #24]	; (8014818 <_isatty_r+0x1c>)
 8014800:	2300      	movs	r3, #0
 8014802:	4604      	mov	r4, r0
 8014804:	4608      	mov	r0, r1
 8014806:	602b      	str	r3, [r5, #0]
 8014808:	f7ef fe3d 	bl	8004486 <_isatty>
 801480c:	1c43      	adds	r3, r0, #1
 801480e:	d102      	bne.n	8014816 <_isatty_r+0x1a>
 8014810:	682b      	ldr	r3, [r5, #0]
 8014812:	b103      	cbz	r3, 8014816 <_isatty_r+0x1a>
 8014814:	6023      	str	r3, [r4, #0]
 8014816:	bd38      	pop	{r3, r4, r5, pc}
 8014818:	20004a30 	.word	0x20004a30

0801481c <_lseek_r>:
 801481c:	b538      	push	{r3, r4, r5, lr}
 801481e:	4d07      	ldr	r5, [pc, #28]	; (801483c <_lseek_r+0x20>)
 8014820:	4604      	mov	r4, r0
 8014822:	4608      	mov	r0, r1
 8014824:	4611      	mov	r1, r2
 8014826:	2200      	movs	r2, #0
 8014828:	602a      	str	r2, [r5, #0]
 801482a:	461a      	mov	r2, r3
 801482c:	f7ef fe36 	bl	800449c <_lseek>
 8014830:	1c43      	adds	r3, r0, #1
 8014832:	d102      	bne.n	801483a <_lseek_r+0x1e>
 8014834:	682b      	ldr	r3, [r5, #0]
 8014836:	b103      	cbz	r3, 801483a <_lseek_r+0x1e>
 8014838:	6023      	str	r3, [r4, #0]
 801483a:	bd38      	pop	{r3, r4, r5, pc}
 801483c:	20004a30 	.word	0x20004a30

08014840 <__malloc_lock>:
 8014840:	4801      	ldr	r0, [pc, #4]	; (8014848 <__malloc_lock+0x8>)
 8014842:	f7fe bf58 	b.w	80136f6 <__retarget_lock_acquire_recursive>
 8014846:	bf00      	nop
 8014848:	20004a28 	.word	0x20004a28

0801484c <__malloc_unlock>:
 801484c:	4801      	ldr	r0, [pc, #4]	; (8014854 <__malloc_unlock+0x8>)
 801484e:	f7fe bf53 	b.w	80136f8 <__retarget_lock_release_recursive>
 8014852:	bf00      	nop
 8014854:	20004a28 	.word	0x20004a28

08014858 <_malloc_usable_size_r>:
 8014858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801485c:	1f18      	subs	r0, r3, #4
 801485e:	2b00      	cmp	r3, #0
 8014860:	bfbc      	itt	lt
 8014862:	580b      	ldrlt	r3, [r1, r0]
 8014864:	18c0      	addlt	r0, r0, r3
 8014866:	4770      	bx	lr

08014868 <_read_r>:
 8014868:	b538      	push	{r3, r4, r5, lr}
 801486a:	4d07      	ldr	r5, [pc, #28]	; (8014888 <_read_r+0x20>)
 801486c:	4604      	mov	r4, r0
 801486e:	4608      	mov	r0, r1
 8014870:	4611      	mov	r1, r2
 8014872:	2200      	movs	r2, #0
 8014874:	602a      	str	r2, [r5, #0]
 8014876:	461a      	mov	r2, r3
 8014878:	f7ef fdcc 	bl	8004414 <_read>
 801487c:	1c43      	adds	r3, r0, #1
 801487e:	d102      	bne.n	8014886 <_read_r+0x1e>
 8014880:	682b      	ldr	r3, [r5, #0]
 8014882:	b103      	cbz	r3, 8014886 <_read_r+0x1e>
 8014884:	6023      	str	r3, [r4, #0]
 8014886:	bd38      	pop	{r3, r4, r5, pc}
 8014888:	20004a30 	.word	0x20004a30
 801488c:	00000000 	.word	0x00000000

08014890 <exp>:
 8014890:	b538      	push	{r3, r4, r5, lr}
 8014892:	ed2d 8b02 	vpush	{d8}
 8014896:	ec55 4b10 	vmov	r4, r5, d0
 801489a:	f000 f975 	bl	8014b88 <__ieee754_exp>
 801489e:	4b22      	ldr	r3, [pc, #136]	; (8014928 <exp+0x98>)
 80148a0:	eeb0 8a40 	vmov.f32	s16, s0
 80148a4:	eef0 8a60 	vmov.f32	s17, s1
 80148a8:	f993 3000 	ldrsb.w	r3, [r3]
 80148ac:	3301      	adds	r3, #1
 80148ae:	d012      	beq.n	80148d6 <exp+0x46>
 80148b0:	ec45 4b10 	vmov	d0, r4, r5
 80148b4:	f001 fa7f 	bl	8015db6 <finite>
 80148b8:	b168      	cbz	r0, 80148d6 <exp+0x46>
 80148ba:	a313      	add	r3, pc, #76	; (adr r3, 8014908 <exp+0x78>)
 80148bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148c0:	4620      	mov	r0, r4
 80148c2:	4629      	mov	r1, r5
 80148c4:	f7ec f930 	bl	8000b28 <__aeabi_dcmpgt>
 80148c8:	b160      	cbz	r0, 80148e4 <exp+0x54>
 80148ca:	f7fb fb93 	bl	800fff4 <__errno>
 80148ce:	ed9f 8b10 	vldr	d8, [pc, #64]	; 8014910 <exp+0x80>
 80148d2:	2322      	movs	r3, #34	; 0x22
 80148d4:	6003      	str	r3, [r0, #0]
 80148d6:	eeb0 0a48 	vmov.f32	s0, s16
 80148da:	eef0 0a68 	vmov.f32	s1, s17
 80148de:	ecbd 8b02 	vpop	{d8}
 80148e2:	bd38      	pop	{r3, r4, r5, pc}
 80148e4:	a30c      	add	r3, pc, #48	; (adr r3, 8014918 <exp+0x88>)
 80148e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148ea:	4620      	mov	r0, r4
 80148ec:	4629      	mov	r1, r5
 80148ee:	f7ec f8fd 	bl	8000aec <__aeabi_dcmplt>
 80148f2:	2800      	cmp	r0, #0
 80148f4:	d0ef      	beq.n	80148d6 <exp+0x46>
 80148f6:	f7fb fb7d 	bl	800fff4 <__errno>
 80148fa:	2322      	movs	r3, #34	; 0x22
 80148fc:	ed9f 8b08 	vldr	d8, [pc, #32]	; 8014920 <exp+0x90>
 8014900:	6003      	str	r3, [r0, #0]
 8014902:	e7e8      	b.n	80148d6 <exp+0x46>
 8014904:	f3af 8000 	nop.w
 8014908:	fefa39ef 	.word	0xfefa39ef
 801490c:	40862e42 	.word	0x40862e42
 8014910:	00000000 	.word	0x00000000
 8014914:	7ff00000 	.word	0x7ff00000
 8014918:	d52d3051 	.word	0xd52d3051
 801491c:	c0874910 	.word	0xc0874910
	...
 8014928:	2000022c 	.word	0x2000022c
 801492c:	00000000 	.word	0x00000000

08014930 <log>:
 8014930:	b538      	push	{r3, r4, r5, lr}
 8014932:	ed2d 8b02 	vpush	{d8}
 8014936:	ec55 4b10 	vmov	r4, r5, d0
 801493a:	f000 faa1 	bl	8014e80 <__ieee754_log>
 801493e:	4b1e      	ldr	r3, [pc, #120]	; (80149b8 <log+0x88>)
 8014940:	eeb0 8a40 	vmov.f32	s16, s0
 8014944:	eef0 8a60 	vmov.f32	s17, s1
 8014948:	f993 3000 	ldrsb.w	r3, [r3]
 801494c:	3301      	adds	r3, #1
 801494e:	d01a      	beq.n	8014986 <log+0x56>
 8014950:	4622      	mov	r2, r4
 8014952:	462b      	mov	r3, r5
 8014954:	4620      	mov	r0, r4
 8014956:	4629      	mov	r1, r5
 8014958:	f7ec f8f0 	bl	8000b3c <__aeabi_dcmpun>
 801495c:	b998      	cbnz	r0, 8014986 <log+0x56>
 801495e:	2200      	movs	r2, #0
 8014960:	2300      	movs	r3, #0
 8014962:	4620      	mov	r0, r4
 8014964:	4629      	mov	r1, r5
 8014966:	f7ec f8df 	bl	8000b28 <__aeabi_dcmpgt>
 801496a:	b960      	cbnz	r0, 8014986 <log+0x56>
 801496c:	2200      	movs	r2, #0
 801496e:	2300      	movs	r3, #0
 8014970:	4620      	mov	r0, r4
 8014972:	4629      	mov	r1, r5
 8014974:	f7ec f8b0 	bl	8000ad8 <__aeabi_dcmpeq>
 8014978:	b160      	cbz	r0, 8014994 <log+0x64>
 801497a:	f7fb fb3b 	bl	800fff4 <__errno>
 801497e:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 80149b0 <log+0x80>
 8014982:	2322      	movs	r3, #34	; 0x22
 8014984:	6003      	str	r3, [r0, #0]
 8014986:	eeb0 0a48 	vmov.f32	s0, s16
 801498a:	eef0 0a68 	vmov.f32	s1, s17
 801498e:	ecbd 8b02 	vpop	{d8}
 8014992:	bd38      	pop	{r3, r4, r5, pc}
 8014994:	f7fb fb2e 	bl	800fff4 <__errno>
 8014998:	ecbd 8b02 	vpop	{d8}
 801499c:	2321      	movs	r3, #33	; 0x21
 801499e:	6003      	str	r3, [r0, #0]
 80149a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80149a4:	4805      	ldr	r0, [pc, #20]	; (80149bc <log+0x8c>)
 80149a6:	f7ff be37 	b.w	8014618 <nan>
 80149aa:	bf00      	nop
 80149ac:	f3af 8000 	nop.w
 80149b0:	00000000 	.word	0x00000000
 80149b4:	fff00000 	.word	0xfff00000
 80149b8:	2000022c 	.word	0x2000022c
 80149bc:	08016563 	.word	0x08016563

080149c0 <pow>:
 80149c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80149c4:	ec59 8b10 	vmov	r8, r9, d0
 80149c8:	ec57 6b11 	vmov	r6, r7, d1
 80149cc:	f000 fc14 	bl	80151f8 <__ieee754_pow>
 80149d0:	4b4e      	ldr	r3, [pc, #312]	; (8014b0c <pow+0x14c>)
 80149d2:	f993 3000 	ldrsb.w	r3, [r3]
 80149d6:	3301      	adds	r3, #1
 80149d8:	ec55 4b10 	vmov	r4, r5, d0
 80149dc:	d015      	beq.n	8014a0a <pow+0x4a>
 80149de:	4632      	mov	r2, r6
 80149e0:	463b      	mov	r3, r7
 80149e2:	4630      	mov	r0, r6
 80149e4:	4639      	mov	r1, r7
 80149e6:	f7ec f8a9 	bl	8000b3c <__aeabi_dcmpun>
 80149ea:	b970      	cbnz	r0, 8014a0a <pow+0x4a>
 80149ec:	4642      	mov	r2, r8
 80149ee:	464b      	mov	r3, r9
 80149f0:	4640      	mov	r0, r8
 80149f2:	4649      	mov	r1, r9
 80149f4:	f7ec f8a2 	bl	8000b3c <__aeabi_dcmpun>
 80149f8:	2200      	movs	r2, #0
 80149fa:	2300      	movs	r3, #0
 80149fc:	b148      	cbz	r0, 8014a12 <pow+0x52>
 80149fe:	4630      	mov	r0, r6
 8014a00:	4639      	mov	r1, r7
 8014a02:	f7ec f869 	bl	8000ad8 <__aeabi_dcmpeq>
 8014a06:	2800      	cmp	r0, #0
 8014a08:	d17d      	bne.n	8014b06 <pow+0x146>
 8014a0a:	ec45 4b10 	vmov	d0, r4, r5
 8014a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a12:	4640      	mov	r0, r8
 8014a14:	4649      	mov	r1, r9
 8014a16:	f7ec f85f 	bl	8000ad8 <__aeabi_dcmpeq>
 8014a1a:	b1e0      	cbz	r0, 8014a56 <pow+0x96>
 8014a1c:	2200      	movs	r2, #0
 8014a1e:	2300      	movs	r3, #0
 8014a20:	4630      	mov	r0, r6
 8014a22:	4639      	mov	r1, r7
 8014a24:	f7ec f858 	bl	8000ad8 <__aeabi_dcmpeq>
 8014a28:	2800      	cmp	r0, #0
 8014a2a:	d16c      	bne.n	8014b06 <pow+0x146>
 8014a2c:	ec47 6b10 	vmov	d0, r6, r7
 8014a30:	f001 f9c1 	bl	8015db6 <finite>
 8014a34:	2800      	cmp	r0, #0
 8014a36:	d0e8      	beq.n	8014a0a <pow+0x4a>
 8014a38:	2200      	movs	r2, #0
 8014a3a:	2300      	movs	r3, #0
 8014a3c:	4630      	mov	r0, r6
 8014a3e:	4639      	mov	r1, r7
 8014a40:	f7ec f854 	bl	8000aec <__aeabi_dcmplt>
 8014a44:	2800      	cmp	r0, #0
 8014a46:	d0e0      	beq.n	8014a0a <pow+0x4a>
 8014a48:	f7fb fad4 	bl	800fff4 <__errno>
 8014a4c:	2321      	movs	r3, #33	; 0x21
 8014a4e:	6003      	str	r3, [r0, #0]
 8014a50:	2400      	movs	r4, #0
 8014a52:	4d2f      	ldr	r5, [pc, #188]	; (8014b10 <pow+0x150>)
 8014a54:	e7d9      	b.n	8014a0a <pow+0x4a>
 8014a56:	ec45 4b10 	vmov	d0, r4, r5
 8014a5a:	f001 f9ac 	bl	8015db6 <finite>
 8014a5e:	bbb8      	cbnz	r0, 8014ad0 <pow+0x110>
 8014a60:	ec49 8b10 	vmov	d0, r8, r9
 8014a64:	f001 f9a7 	bl	8015db6 <finite>
 8014a68:	b390      	cbz	r0, 8014ad0 <pow+0x110>
 8014a6a:	ec47 6b10 	vmov	d0, r6, r7
 8014a6e:	f001 f9a2 	bl	8015db6 <finite>
 8014a72:	b368      	cbz	r0, 8014ad0 <pow+0x110>
 8014a74:	4622      	mov	r2, r4
 8014a76:	462b      	mov	r3, r5
 8014a78:	4620      	mov	r0, r4
 8014a7a:	4629      	mov	r1, r5
 8014a7c:	f7ec f85e 	bl	8000b3c <__aeabi_dcmpun>
 8014a80:	b160      	cbz	r0, 8014a9c <pow+0xdc>
 8014a82:	f7fb fab7 	bl	800fff4 <__errno>
 8014a86:	2321      	movs	r3, #33	; 0x21
 8014a88:	6003      	str	r3, [r0, #0]
 8014a8a:	2200      	movs	r2, #0
 8014a8c:	2300      	movs	r3, #0
 8014a8e:	4610      	mov	r0, r2
 8014a90:	4619      	mov	r1, r3
 8014a92:	f7eb fee3 	bl	800085c <__aeabi_ddiv>
 8014a96:	4604      	mov	r4, r0
 8014a98:	460d      	mov	r5, r1
 8014a9a:	e7b6      	b.n	8014a0a <pow+0x4a>
 8014a9c:	f7fb faaa 	bl	800fff4 <__errno>
 8014aa0:	2322      	movs	r3, #34	; 0x22
 8014aa2:	6003      	str	r3, [r0, #0]
 8014aa4:	2200      	movs	r2, #0
 8014aa6:	2300      	movs	r3, #0
 8014aa8:	4640      	mov	r0, r8
 8014aaa:	4649      	mov	r1, r9
 8014aac:	f7ec f81e 	bl	8000aec <__aeabi_dcmplt>
 8014ab0:	2400      	movs	r4, #0
 8014ab2:	b158      	cbz	r0, 8014acc <pow+0x10c>
 8014ab4:	ec47 6b10 	vmov	d0, r6, r7
 8014ab8:	f001 f988 	bl	8015dcc <rint>
 8014abc:	4632      	mov	r2, r6
 8014abe:	ec51 0b10 	vmov	r0, r1, d0
 8014ac2:	463b      	mov	r3, r7
 8014ac4:	f7ec f808 	bl	8000ad8 <__aeabi_dcmpeq>
 8014ac8:	2800      	cmp	r0, #0
 8014aca:	d0c2      	beq.n	8014a52 <pow+0x92>
 8014acc:	4d11      	ldr	r5, [pc, #68]	; (8014b14 <pow+0x154>)
 8014ace:	e79c      	b.n	8014a0a <pow+0x4a>
 8014ad0:	2200      	movs	r2, #0
 8014ad2:	2300      	movs	r3, #0
 8014ad4:	4620      	mov	r0, r4
 8014ad6:	4629      	mov	r1, r5
 8014ad8:	f7eb fffe 	bl	8000ad8 <__aeabi_dcmpeq>
 8014adc:	2800      	cmp	r0, #0
 8014ade:	d094      	beq.n	8014a0a <pow+0x4a>
 8014ae0:	ec49 8b10 	vmov	d0, r8, r9
 8014ae4:	f001 f967 	bl	8015db6 <finite>
 8014ae8:	2800      	cmp	r0, #0
 8014aea:	d08e      	beq.n	8014a0a <pow+0x4a>
 8014aec:	ec47 6b10 	vmov	d0, r6, r7
 8014af0:	f001 f961 	bl	8015db6 <finite>
 8014af4:	2800      	cmp	r0, #0
 8014af6:	d088      	beq.n	8014a0a <pow+0x4a>
 8014af8:	f7fb fa7c 	bl	800fff4 <__errno>
 8014afc:	2322      	movs	r3, #34	; 0x22
 8014afe:	6003      	str	r3, [r0, #0]
 8014b00:	2400      	movs	r4, #0
 8014b02:	2500      	movs	r5, #0
 8014b04:	e781      	b.n	8014a0a <pow+0x4a>
 8014b06:	4d04      	ldr	r5, [pc, #16]	; (8014b18 <pow+0x158>)
 8014b08:	2400      	movs	r4, #0
 8014b0a:	e77e      	b.n	8014a0a <pow+0x4a>
 8014b0c:	2000022c 	.word	0x2000022c
 8014b10:	fff00000 	.word	0xfff00000
 8014b14:	7ff00000 	.word	0x7ff00000
 8014b18:	3ff00000 	.word	0x3ff00000

08014b1c <sqrt>:
 8014b1c:	b538      	push	{r3, r4, r5, lr}
 8014b1e:	ed2d 8b02 	vpush	{d8}
 8014b22:	ec55 4b10 	vmov	r4, r5, d0
 8014b26:	f001 f889 	bl	8015c3c <__ieee754_sqrt>
 8014b2a:	4b15      	ldr	r3, [pc, #84]	; (8014b80 <sqrt+0x64>)
 8014b2c:	eeb0 8a40 	vmov.f32	s16, s0
 8014b30:	eef0 8a60 	vmov.f32	s17, s1
 8014b34:	f993 3000 	ldrsb.w	r3, [r3]
 8014b38:	3301      	adds	r3, #1
 8014b3a:	d019      	beq.n	8014b70 <sqrt+0x54>
 8014b3c:	4622      	mov	r2, r4
 8014b3e:	462b      	mov	r3, r5
 8014b40:	4620      	mov	r0, r4
 8014b42:	4629      	mov	r1, r5
 8014b44:	f7eb fffa 	bl	8000b3c <__aeabi_dcmpun>
 8014b48:	b990      	cbnz	r0, 8014b70 <sqrt+0x54>
 8014b4a:	2200      	movs	r2, #0
 8014b4c:	2300      	movs	r3, #0
 8014b4e:	4620      	mov	r0, r4
 8014b50:	4629      	mov	r1, r5
 8014b52:	f7eb ffcb 	bl	8000aec <__aeabi_dcmplt>
 8014b56:	b158      	cbz	r0, 8014b70 <sqrt+0x54>
 8014b58:	f7fb fa4c 	bl	800fff4 <__errno>
 8014b5c:	2321      	movs	r3, #33	; 0x21
 8014b5e:	6003      	str	r3, [r0, #0]
 8014b60:	2200      	movs	r2, #0
 8014b62:	2300      	movs	r3, #0
 8014b64:	4610      	mov	r0, r2
 8014b66:	4619      	mov	r1, r3
 8014b68:	f7eb fe78 	bl	800085c <__aeabi_ddiv>
 8014b6c:	ec41 0b18 	vmov	d8, r0, r1
 8014b70:	eeb0 0a48 	vmov.f32	s0, s16
 8014b74:	eef0 0a68 	vmov.f32	s1, s17
 8014b78:	ecbd 8b02 	vpop	{d8}
 8014b7c:	bd38      	pop	{r3, r4, r5, pc}
 8014b7e:	bf00      	nop
 8014b80:	2000022c 	.word	0x2000022c
 8014b84:	00000000 	.word	0x00000000

08014b88 <__ieee754_exp>:
 8014b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b8c:	ec55 4b10 	vmov	r4, r5, d0
 8014b90:	49b1      	ldr	r1, [pc, #708]	; (8014e58 <__ieee754_exp+0x2d0>)
 8014b92:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014b96:	428b      	cmp	r3, r1
 8014b98:	ed2d 8b04 	vpush	{d8-d9}
 8014b9c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8014ba0:	d937      	bls.n	8014c12 <__ieee754_exp+0x8a>
 8014ba2:	49ae      	ldr	r1, [pc, #696]	; (8014e5c <__ieee754_exp+0x2d4>)
 8014ba4:	428b      	cmp	r3, r1
 8014ba6:	d916      	bls.n	8014bd6 <__ieee754_exp+0x4e>
 8014ba8:	ee10 3a10 	vmov	r3, s0
 8014bac:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8014bb0:	4313      	orrs	r3, r2
 8014bb2:	d009      	beq.n	8014bc8 <__ieee754_exp+0x40>
 8014bb4:	ee10 2a10 	vmov	r2, s0
 8014bb8:	462b      	mov	r3, r5
 8014bba:	4620      	mov	r0, r4
 8014bbc:	4629      	mov	r1, r5
 8014bbe:	f7eb fb6d 	bl	800029c <__adddf3>
 8014bc2:	4604      	mov	r4, r0
 8014bc4:	460d      	mov	r5, r1
 8014bc6:	e000      	b.n	8014bca <__ieee754_exp+0x42>
 8014bc8:	bb06      	cbnz	r6, 8014c0c <__ieee754_exp+0x84>
 8014bca:	ecbd 8b04 	vpop	{d8-d9}
 8014bce:	ec45 4b10 	vmov	d0, r4, r5
 8014bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014bd6:	a38a      	add	r3, pc, #552	; (adr r3, 8014e00 <__ieee754_exp+0x278>)
 8014bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bdc:	ee10 0a10 	vmov	r0, s0
 8014be0:	4629      	mov	r1, r5
 8014be2:	f7eb ffa1 	bl	8000b28 <__aeabi_dcmpgt>
 8014be6:	b138      	cbz	r0, 8014bf8 <__ieee754_exp+0x70>
 8014be8:	a387      	add	r3, pc, #540	; (adr r3, 8014e08 <__ieee754_exp+0x280>)
 8014bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bee:	4610      	mov	r0, r2
 8014bf0:	4619      	mov	r1, r3
 8014bf2:	f7eb fd09 	bl	8000608 <__aeabi_dmul>
 8014bf6:	e7e4      	b.n	8014bc2 <__ieee754_exp+0x3a>
 8014bf8:	a385      	add	r3, pc, #532	; (adr r3, 8014e10 <__ieee754_exp+0x288>)
 8014bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bfe:	4620      	mov	r0, r4
 8014c00:	4629      	mov	r1, r5
 8014c02:	f7eb ff73 	bl	8000aec <__aeabi_dcmplt>
 8014c06:	2800      	cmp	r0, #0
 8014c08:	f000 8087 	beq.w	8014d1a <__ieee754_exp+0x192>
 8014c0c:	2400      	movs	r4, #0
 8014c0e:	2500      	movs	r5, #0
 8014c10:	e7db      	b.n	8014bca <__ieee754_exp+0x42>
 8014c12:	4a93      	ldr	r2, [pc, #588]	; (8014e60 <__ieee754_exp+0x2d8>)
 8014c14:	4293      	cmp	r3, r2
 8014c16:	f240 80ac 	bls.w	8014d72 <__ieee754_exp+0x1ea>
 8014c1a:	4a92      	ldr	r2, [pc, #584]	; (8014e64 <__ieee754_exp+0x2dc>)
 8014c1c:	4293      	cmp	r3, r2
 8014c1e:	d87c      	bhi.n	8014d1a <__ieee754_exp+0x192>
 8014c20:	4b91      	ldr	r3, [pc, #580]	; (8014e68 <__ieee754_exp+0x2e0>)
 8014c22:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c2a:	ee10 0a10 	vmov	r0, s0
 8014c2e:	4629      	mov	r1, r5
 8014c30:	f7eb fb32 	bl	8000298 <__aeabi_dsub>
 8014c34:	4b8d      	ldr	r3, [pc, #564]	; (8014e6c <__ieee754_exp+0x2e4>)
 8014c36:	00f7      	lsls	r7, r6, #3
 8014c38:	443b      	add	r3, r7
 8014c3a:	ed93 7b00 	vldr	d7, [r3]
 8014c3e:	f1c6 0a01 	rsb	sl, r6, #1
 8014c42:	4680      	mov	r8, r0
 8014c44:	4689      	mov	r9, r1
 8014c46:	ebaa 0a06 	sub.w	sl, sl, r6
 8014c4a:	eeb0 8a47 	vmov.f32	s16, s14
 8014c4e:	eef0 8a67 	vmov.f32	s17, s15
 8014c52:	ec53 2b18 	vmov	r2, r3, d8
 8014c56:	4640      	mov	r0, r8
 8014c58:	4649      	mov	r1, r9
 8014c5a:	f7eb fb1d 	bl	8000298 <__aeabi_dsub>
 8014c5e:	4604      	mov	r4, r0
 8014c60:	460d      	mov	r5, r1
 8014c62:	4622      	mov	r2, r4
 8014c64:	462b      	mov	r3, r5
 8014c66:	4620      	mov	r0, r4
 8014c68:	4629      	mov	r1, r5
 8014c6a:	f7eb fccd 	bl	8000608 <__aeabi_dmul>
 8014c6e:	a36a      	add	r3, pc, #424	; (adr r3, 8014e18 <__ieee754_exp+0x290>)
 8014c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c74:	4606      	mov	r6, r0
 8014c76:	460f      	mov	r7, r1
 8014c78:	f7eb fcc6 	bl	8000608 <__aeabi_dmul>
 8014c7c:	a368      	add	r3, pc, #416	; (adr r3, 8014e20 <__ieee754_exp+0x298>)
 8014c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c82:	f7eb fb09 	bl	8000298 <__aeabi_dsub>
 8014c86:	4632      	mov	r2, r6
 8014c88:	463b      	mov	r3, r7
 8014c8a:	f7eb fcbd 	bl	8000608 <__aeabi_dmul>
 8014c8e:	a366      	add	r3, pc, #408	; (adr r3, 8014e28 <__ieee754_exp+0x2a0>)
 8014c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c94:	f7eb fb02 	bl	800029c <__adddf3>
 8014c98:	4632      	mov	r2, r6
 8014c9a:	463b      	mov	r3, r7
 8014c9c:	f7eb fcb4 	bl	8000608 <__aeabi_dmul>
 8014ca0:	a363      	add	r3, pc, #396	; (adr r3, 8014e30 <__ieee754_exp+0x2a8>)
 8014ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ca6:	f7eb faf7 	bl	8000298 <__aeabi_dsub>
 8014caa:	4632      	mov	r2, r6
 8014cac:	463b      	mov	r3, r7
 8014cae:	f7eb fcab 	bl	8000608 <__aeabi_dmul>
 8014cb2:	a361      	add	r3, pc, #388	; (adr r3, 8014e38 <__ieee754_exp+0x2b0>)
 8014cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cb8:	f7eb faf0 	bl	800029c <__adddf3>
 8014cbc:	4632      	mov	r2, r6
 8014cbe:	463b      	mov	r3, r7
 8014cc0:	f7eb fca2 	bl	8000608 <__aeabi_dmul>
 8014cc4:	4602      	mov	r2, r0
 8014cc6:	460b      	mov	r3, r1
 8014cc8:	4620      	mov	r0, r4
 8014cca:	4629      	mov	r1, r5
 8014ccc:	f7eb fae4 	bl	8000298 <__aeabi_dsub>
 8014cd0:	4602      	mov	r2, r0
 8014cd2:	460b      	mov	r3, r1
 8014cd4:	4606      	mov	r6, r0
 8014cd6:	460f      	mov	r7, r1
 8014cd8:	4620      	mov	r0, r4
 8014cda:	4629      	mov	r1, r5
 8014cdc:	f7eb fc94 	bl	8000608 <__aeabi_dmul>
 8014ce0:	ec41 0b19 	vmov	d9, r0, r1
 8014ce4:	f1ba 0f00 	cmp.w	sl, #0
 8014ce8:	d15d      	bne.n	8014da6 <__ieee754_exp+0x21e>
 8014cea:	2200      	movs	r2, #0
 8014cec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014cf0:	4630      	mov	r0, r6
 8014cf2:	4639      	mov	r1, r7
 8014cf4:	f7eb fad0 	bl	8000298 <__aeabi_dsub>
 8014cf8:	4602      	mov	r2, r0
 8014cfa:	460b      	mov	r3, r1
 8014cfc:	ec51 0b19 	vmov	r0, r1, d9
 8014d00:	f7eb fdac 	bl	800085c <__aeabi_ddiv>
 8014d04:	4622      	mov	r2, r4
 8014d06:	462b      	mov	r3, r5
 8014d08:	f7eb fac6 	bl	8000298 <__aeabi_dsub>
 8014d0c:	4602      	mov	r2, r0
 8014d0e:	460b      	mov	r3, r1
 8014d10:	2000      	movs	r0, #0
 8014d12:	4957      	ldr	r1, [pc, #348]	; (8014e70 <__ieee754_exp+0x2e8>)
 8014d14:	f7eb fac0 	bl	8000298 <__aeabi_dsub>
 8014d18:	e753      	b.n	8014bc2 <__ieee754_exp+0x3a>
 8014d1a:	4856      	ldr	r0, [pc, #344]	; (8014e74 <__ieee754_exp+0x2ec>)
 8014d1c:	a348      	add	r3, pc, #288	; (adr r3, 8014e40 <__ieee754_exp+0x2b8>)
 8014d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d22:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8014d26:	4629      	mov	r1, r5
 8014d28:	4620      	mov	r0, r4
 8014d2a:	f7eb fc6d 	bl	8000608 <__aeabi_dmul>
 8014d2e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014d32:	f7eb fab3 	bl	800029c <__adddf3>
 8014d36:	f7eb ff17 	bl	8000b68 <__aeabi_d2iz>
 8014d3a:	4682      	mov	sl, r0
 8014d3c:	f7eb fbfa 	bl	8000534 <__aeabi_i2d>
 8014d40:	a341      	add	r3, pc, #260	; (adr r3, 8014e48 <__ieee754_exp+0x2c0>)
 8014d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d46:	4606      	mov	r6, r0
 8014d48:	460f      	mov	r7, r1
 8014d4a:	f7eb fc5d 	bl	8000608 <__aeabi_dmul>
 8014d4e:	4602      	mov	r2, r0
 8014d50:	460b      	mov	r3, r1
 8014d52:	4620      	mov	r0, r4
 8014d54:	4629      	mov	r1, r5
 8014d56:	f7eb fa9f 	bl	8000298 <__aeabi_dsub>
 8014d5a:	a33d      	add	r3, pc, #244	; (adr r3, 8014e50 <__ieee754_exp+0x2c8>)
 8014d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d60:	4680      	mov	r8, r0
 8014d62:	4689      	mov	r9, r1
 8014d64:	4630      	mov	r0, r6
 8014d66:	4639      	mov	r1, r7
 8014d68:	f7eb fc4e 	bl	8000608 <__aeabi_dmul>
 8014d6c:	ec41 0b18 	vmov	d8, r0, r1
 8014d70:	e76f      	b.n	8014c52 <__ieee754_exp+0xca>
 8014d72:	4a41      	ldr	r2, [pc, #260]	; (8014e78 <__ieee754_exp+0x2f0>)
 8014d74:	4293      	cmp	r3, r2
 8014d76:	d811      	bhi.n	8014d9c <__ieee754_exp+0x214>
 8014d78:	a323      	add	r3, pc, #140	; (adr r3, 8014e08 <__ieee754_exp+0x280>)
 8014d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d7e:	ee10 0a10 	vmov	r0, s0
 8014d82:	4629      	mov	r1, r5
 8014d84:	f7eb fa8a 	bl	800029c <__adddf3>
 8014d88:	4b39      	ldr	r3, [pc, #228]	; (8014e70 <__ieee754_exp+0x2e8>)
 8014d8a:	2200      	movs	r2, #0
 8014d8c:	f7eb fecc 	bl	8000b28 <__aeabi_dcmpgt>
 8014d90:	b138      	cbz	r0, 8014da2 <__ieee754_exp+0x21a>
 8014d92:	4b37      	ldr	r3, [pc, #220]	; (8014e70 <__ieee754_exp+0x2e8>)
 8014d94:	2200      	movs	r2, #0
 8014d96:	4620      	mov	r0, r4
 8014d98:	4629      	mov	r1, r5
 8014d9a:	e710      	b.n	8014bbe <__ieee754_exp+0x36>
 8014d9c:	f04f 0a00 	mov.w	sl, #0
 8014da0:	e75f      	b.n	8014c62 <__ieee754_exp+0xda>
 8014da2:	4682      	mov	sl, r0
 8014da4:	e75d      	b.n	8014c62 <__ieee754_exp+0xda>
 8014da6:	4632      	mov	r2, r6
 8014da8:	463b      	mov	r3, r7
 8014daa:	2000      	movs	r0, #0
 8014dac:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8014db0:	f7eb fa72 	bl	8000298 <__aeabi_dsub>
 8014db4:	4602      	mov	r2, r0
 8014db6:	460b      	mov	r3, r1
 8014db8:	ec51 0b19 	vmov	r0, r1, d9
 8014dbc:	f7eb fd4e 	bl	800085c <__aeabi_ddiv>
 8014dc0:	4602      	mov	r2, r0
 8014dc2:	460b      	mov	r3, r1
 8014dc4:	ec51 0b18 	vmov	r0, r1, d8
 8014dc8:	f7eb fa66 	bl	8000298 <__aeabi_dsub>
 8014dcc:	4642      	mov	r2, r8
 8014dce:	464b      	mov	r3, r9
 8014dd0:	f7eb fa62 	bl	8000298 <__aeabi_dsub>
 8014dd4:	4602      	mov	r2, r0
 8014dd6:	460b      	mov	r3, r1
 8014dd8:	2000      	movs	r0, #0
 8014dda:	4925      	ldr	r1, [pc, #148]	; (8014e70 <__ieee754_exp+0x2e8>)
 8014ddc:	f7eb fa5c 	bl	8000298 <__aeabi_dsub>
 8014de0:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8014de4:	4592      	cmp	sl, r2
 8014de6:	db02      	blt.n	8014dee <__ieee754_exp+0x266>
 8014de8:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8014dec:	e6e9      	b.n	8014bc2 <__ieee754_exp+0x3a>
 8014dee:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8014df2:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8014df6:	2200      	movs	r2, #0
 8014df8:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8014dfc:	e6f9      	b.n	8014bf2 <__ieee754_exp+0x6a>
 8014dfe:	bf00      	nop
 8014e00:	fefa39ef 	.word	0xfefa39ef
 8014e04:	40862e42 	.word	0x40862e42
 8014e08:	8800759c 	.word	0x8800759c
 8014e0c:	7e37e43c 	.word	0x7e37e43c
 8014e10:	d52d3051 	.word	0xd52d3051
 8014e14:	c0874910 	.word	0xc0874910
 8014e18:	72bea4d0 	.word	0x72bea4d0
 8014e1c:	3e663769 	.word	0x3e663769
 8014e20:	c5d26bf1 	.word	0xc5d26bf1
 8014e24:	3ebbbd41 	.word	0x3ebbbd41
 8014e28:	af25de2c 	.word	0xaf25de2c
 8014e2c:	3f11566a 	.word	0x3f11566a
 8014e30:	16bebd93 	.word	0x16bebd93
 8014e34:	3f66c16c 	.word	0x3f66c16c
 8014e38:	5555553e 	.word	0x5555553e
 8014e3c:	3fc55555 	.word	0x3fc55555
 8014e40:	652b82fe 	.word	0x652b82fe
 8014e44:	3ff71547 	.word	0x3ff71547
 8014e48:	fee00000 	.word	0xfee00000
 8014e4c:	3fe62e42 	.word	0x3fe62e42
 8014e50:	35793c76 	.word	0x35793c76
 8014e54:	3dea39ef 	.word	0x3dea39ef
 8014e58:	40862e41 	.word	0x40862e41
 8014e5c:	7fefffff 	.word	0x7fefffff
 8014e60:	3fd62e42 	.word	0x3fd62e42
 8014e64:	3ff0a2b1 	.word	0x3ff0a2b1
 8014e68:	080169f0 	.word	0x080169f0
 8014e6c:	08016a00 	.word	0x08016a00
 8014e70:	3ff00000 	.word	0x3ff00000
 8014e74:	080169e0 	.word	0x080169e0
 8014e78:	3e2fffff 	.word	0x3e2fffff
 8014e7c:	00000000 	.word	0x00000000

08014e80 <__ieee754_log>:
 8014e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e84:	ec51 0b10 	vmov	r0, r1, d0
 8014e88:	ed2d 8b04 	vpush	{d8-d9}
 8014e8c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8014e90:	b083      	sub	sp, #12
 8014e92:	460d      	mov	r5, r1
 8014e94:	da29      	bge.n	8014eea <__ieee754_log+0x6a>
 8014e96:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014e9a:	4303      	orrs	r3, r0
 8014e9c:	ee10 2a10 	vmov	r2, s0
 8014ea0:	d10c      	bne.n	8014ebc <__ieee754_log+0x3c>
 8014ea2:	49cf      	ldr	r1, [pc, #828]	; (80151e0 <__ieee754_log+0x360>)
 8014ea4:	2200      	movs	r2, #0
 8014ea6:	2300      	movs	r3, #0
 8014ea8:	2000      	movs	r0, #0
 8014eaa:	f7eb fcd7 	bl	800085c <__aeabi_ddiv>
 8014eae:	ec41 0b10 	vmov	d0, r0, r1
 8014eb2:	b003      	add	sp, #12
 8014eb4:	ecbd 8b04 	vpop	{d8-d9}
 8014eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ebc:	2900      	cmp	r1, #0
 8014ebe:	da05      	bge.n	8014ecc <__ieee754_log+0x4c>
 8014ec0:	460b      	mov	r3, r1
 8014ec2:	f7eb f9e9 	bl	8000298 <__aeabi_dsub>
 8014ec6:	2200      	movs	r2, #0
 8014ec8:	2300      	movs	r3, #0
 8014eca:	e7ee      	b.n	8014eaa <__ieee754_log+0x2a>
 8014ecc:	4bc5      	ldr	r3, [pc, #788]	; (80151e4 <__ieee754_log+0x364>)
 8014ece:	2200      	movs	r2, #0
 8014ed0:	f7eb fb9a 	bl	8000608 <__aeabi_dmul>
 8014ed4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8014ed8:	460d      	mov	r5, r1
 8014eda:	4ac3      	ldr	r2, [pc, #780]	; (80151e8 <__ieee754_log+0x368>)
 8014edc:	4295      	cmp	r5, r2
 8014ede:	dd06      	ble.n	8014eee <__ieee754_log+0x6e>
 8014ee0:	4602      	mov	r2, r0
 8014ee2:	460b      	mov	r3, r1
 8014ee4:	f7eb f9da 	bl	800029c <__adddf3>
 8014ee8:	e7e1      	b.n	8014eae <__ieee754_log+0x2e>
 8014eea:	2300      	movs	r3, #0
 8014eec:	e7f5      	b.n	8014eda <__ieee754_log+0x5a>
 8014eee:	152c      	asrs	r4, r5, #20
 8014ef0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8014ef4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8014ef8:	441c      	add	r4, r3
 8014efa:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8014efe:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8014f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014f06:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8014f0a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8014f0e:	ea42 0105 	orr.w	r1, r2, r5
 8014f12:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8014f16:	2200      	movs	r2, #0
 8014f18:	4bb4      	ldr	r3, [pc, #720]	; (80151ec <__ieee754_log+0x36c>)
 8014f1a:	f7eb f9bd 	bl	8000298 <__aeabi_dsub>
 8014f1e:	1cab      	adds	r3, r5, #2
 8014f20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014f24:	2b02      	cmp	r3, #2
 8014f26:	4682      	mov	sl, r0
 8014f28:	468b      	mov	fp, r1
 8014f2a:	f04f 0200 	mov.w	r2, #0
 8014f2e:	dc53      	bgt.n	8014fd8 <__ieee754_log+0x158>
 8014f30:	2300      	movs	r3, #0
 8014f32:	f7eb fdd1 	bl	8000ad8 <__aeabi_dcmpeq>
 8014f36:	b1d0      	cbz	r0, 8014f6e <__ieee754_log+0xee>
 8014f38:	2c00      	cmp	r4, #0
 8014f3a:	f000 8122 	beq.w	8015182 <__ieee754_log+0x302>
 8014f3e:	4620      	mov	r0, r4
 8014f40:	f7eb faf8 	bl	8000534 <__aeabi_i2d>
 8014f44:	a390      	add	r3, pc, #576	; (adr r3, 8015188 <__ieee754_log+0x308>)
 8014f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f4a:	4606      	mov	r6, r0
 8014f4c:	460f      	mov	r7, r1
 8014f4e:	f7eb fb5b 	bl	8000608 <__aeabi_dmul>
 8014f52:	a38f      	add	r3, pc, #572	; (adr r3, 8015190 <__ieee754_log+0x310>)
 8014f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f58:	4604      	mov	r4, r0
 8014f5a:	460d      	mov	r5, r1
 8014f5c:	4630      	mov	r0, r6
 8014f5e:	4639      	mov	r1, r7
 8014f60:	f7eb fb52 	bl	8000608 <__aeabi_dmul>
 8014f64:	4602      	mov	r2, r0
 8014f66:	460b      	mov	r3, r1
 8014f68:	4620      	mov	r0, r4
 8014f6a:	4629      	mov	r1, r5
 8014f6c:	e7ba      	b.n	8014ee4 <__ieee754_log+0x64>
 8014f6e:	a38a      	add	r3, pc, #552	; (adr r3, 8015198 <__ieee754_log+0x318>)
 8014f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f74:	4650      	mov	r0, sl
 8014f76:	4659      	mov	r1, fp
 8014f78:	f7eb fb46 	bl	8000608 <__aeabi_dmul>
 8014f7c:	4602      	mov	r2, r0
 8014f7e:	460b      	mov	r3, r1
 8014f80:	2000      	movs	r0, #0
 8014f82:	499b      	ldr	r1, [pc, #620]	; (80151f0 <__ieee754_log+0x370>)
 8014f84:	f7eb f988 	bl	8000298 <__aeabi_dsub>
 8014f88:	4652      	mov	r2, sl
 8014f8a:	4606      	mov	r6, r0
 8014f8c:	460f      	mov	r7, r1
 8014f8e:	465b      	mov	r3, fp
 8014f90:	4650      	mov	r0, sl
 8014f92:	4659      	mov	r1, fp
 8014f94:	f7eb fb38 	bl	8000608 <__aeabi_dmul>
 8014f98:	4602      	mov	r2, r0
 8014f9a:	460b      	mov	r3, r1
 8014f9c:	4630      	mov	r0, r6
 8014f9e:	4639      	mov	r1, r7
 8014fa0:	f7eb fb32 	bl	8000608 <__aeabi_dmul>
 8014fa4:	4606      	mov	r6, r0
 8014fa6:	460f      	mov	r7, r1
 8014fa8:	b914      	cbnz	r4, 8014fb0 <__ieee754_log+0x130>
 8014faa:	4632      	mov	r2, r6
 8014fac:	463b      	mov	r3, r7
 8014fae:	e0a2      	b.n	80150f6 <__ieee754_log+0x276>
 8014fb0:	4620      	mov	r0, r4
 8014fb2:	f7eb fabf 	bl	8000534 <__aeabi_i2d>
 8014fb6:	a374      	add	r3, pc, #464	; (adr r3, 8015188 <__ieee754_log+0x308>)
 8014fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fbc:	4680      	mov	r8, r0
 8014fbe:	4689      	mov	r9, r1
 8014fc0:	f7eb fb22 	bl	8000608 <__aeabi_dmul>
 8014fc4:	a372      	add	r3, pc, #456	; (adr r3, 8015190 <__ieee754_log+0x310>)
 8014fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fca:	4604      	mov	r4, r0
 8014fcc:	460d      	mov	r5, r1
 8014fce:	4640      	mov	r0, r8
 8014fd0:	4649      	mov	r1, r9
 8014fd2:	f7eb fb19 	bl	8000608 <__aeabi_dmul>
 8014fd6:	e0a7      	b.n	8015128 <__ieee754_log+0x2a8>
 8014fd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014fdc:	f7eb f95e 	bl	800029c <__adddf3>
 8014fe0:	4602      	mov	r2, r0
 8014fe2:	460b      	mov	r3, r1
 8014fe4:	4650      	mov	r0, sl
 8014fe6:	4659      	mov	r1, fp
 8014fe8:	f7eb fc38 	bl	800085c <__aeabi_ddiv>
 8014fec:	ec41 0b18 	vmov	d8, r0, r1
 8014ff0:	4620      	mov	r0, r4
 8014ff2:	f7eb fa9f 	bl	8000534 <__aeabi_i2d>
 8014ff6:	ec53 2b18 	vmov	r2, r3, d8
 8014ffa:	ec41 0b19 	vmov	d9, r0, r1
 8014ffe:	ec51 0b18 	vmov	r0, r1, d8
 8015002:	f7eb fb01 	bl	8000608 <__aeabi_dmul>
 8015006:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 801500a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 801500e:	9301      	str	r3, [sp, #4]
 8015010:	4602      	mov	r2, r0
 8015012:	460b      	mov	r3, r1
 8015014:	4680      	mov	r8, r0
 8015016:	4689      	mov	r9, r1
 8015018:	f7eb faf6 	bl	8000608 <__aeabi_dmul>
 801501c:	a360      	add	r3, pc, #384	; (adr r3, 80151a0 <__ieee754_log+0x320>)
 801501e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015022:	4606      	mov	r6, r0
 8015024:	460f      	mov	r7, r1
 8015026:	f7eb faef 	bl	8000608 <__aeabi_dmul>
 801502a:	a35f      	add	r3, pc, #380	; (adr r3, 80151a8 <__ieee754_log+0x328>)
 801502c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015030:	f7eb f934 	bl	800029c <__adddf3>
 8015034:	4632      	mov	r2, r6
 8015036:	463b      	mov	r3, r7
 8015038:	f7eb fae6 	bl	8000608 <__aeabi_dmul>
 801503c:	a35c      	add	r3, pc, #368	; (adr r3, 80151b0 <__ieee754_log+0x330>)
 801503e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015042:	f7eb f92b 	bl	800029c <__adddf3>
 8015046:	4632      	mov	r2, r6
 8015048:	463b      	mov	r3, r7
 801504a:	f7eb fadd 	bl	8000608 <__aeabi_dmul>
 801504e:	a35a      	add	r3, pc, #360	; (adr r3, 80151b8 <__ieee754_log+0x338>)
 8015050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015054:	f7eb f922 	bl	800029c <__adddf3>
 8015058:	4642      	mov	r2, r8
 801505a:	464b      	mov	r3, r9
 801505c:	f7eb fad4 	bl	8000608 <__aeabi_dmul>
 8015060:	a357      	add	r3, pc, #348	; (adr r3, 80151c0 <__ieee754_log+0x340>)
 8015062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015066:	4680      	mov	r8, r0
 8015068:	4689      	mov	r9, r1
 801506a:	4630      	mov	r0, r6
 801506c:	4639      	mov	r1, r7
 801506e:	f7eb facb 	bl	8000608 <__aeabi_dmul>
 8015072:	a355      	add	r3, pc, #340	; (adr r3, 80151c8 <__ieee754_log+0x348>)
 8015074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015078:	f7eb f910 	bl	800029c <__adddf3>
 801507c:	4632      	mov	r2, r6
 801507e:	463b      	mov	r3, r7
 8015080:	f7eb fac2 	bl	8000608 <__aeabi_dmul>
 8015084:	a352      	add	r3, pc, #328	; (adr r3, 80151d0 <__ieee754_log+0x350>)
 8015086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801508a:	f7eb f907 	bl	800029c <__adddf3>
 801508e:	4632      	mov	r2, r6
 8015090:	463b      	mov	r3, r7
 8015092:	f7eb fab9 	bl	8000608 <__aeabi_dmul>
 8015096:	460b      	mov	r3, r1
 8015098:	4602      	mov	r2, r0
 801509a:	4649      	mov	r1, r9
 801509c:	4640      	mov	r0, r8
 801509e:	f7eb f8fd 	bl	800029c <__adddf3>
 80150a2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80150a6:	9b01      	ldr	r3, [sp, #4]
 80150a8:	3551      	adds	r5, #81	; 0x51
 80150aa:	431d      	orrs	r5, r3
 80150ac:	2d00      	cmp	r5, #0
 80150ae:	4680      	mov	r8, r0
 80150b0:	4689      	mov	r9, r1
 80150b2:	dd48      	ble.n	8015146 <__ieee754_log+0x2c6>
 80150b4:	4b4e      	ldr	r3, [pc, #312]	; (80151f0 <__ieee754_log+0x370>)
 80150b6:	2200      	movs	r2, #0
 80150b8:	4650      	mov	r0, sl
 80150ba:	4659      	mov	r1, fp
 80150bc:	f7eb faa4 	bl	8000608 <__aeabi_dmul>
 80150c0:	4652      	mov	r2, sl
 80150c2:	465b      	mov	r3, fp
 80150c4:	f7eb faa0 	bl	8000608 <__aeabi_dmul>
 80150c8:	4602      	mov	r2, r0
 80150ca:	460b      	mov	r3, r1
 80150cc:	4606      	mov	r6, r0
 80150ce:	460f      	mov	r7, r1
 80150d0:	4640      	mov	r0, r8
 80150d2:	4649      	mov	r1, r9
 80150d4:	f7eb f8e2 	bl	800029c <__adddf3>
 80150d8:	ec53 2b18 	vmov	r2, r3, d8
 80150dc:	f7eb fa94 	bl	8000608 <__aeabi_dmul>
 80150e0:	4680      	mov	r8, r0
 80150e2:	4689      	mov	r9, r1
 80150e4:	b964      	cbnz	r4, 8015100 <__ieee754_log+0x280>
 80150e6:	4602      	mov	r2, r0
 80150e8:	460b      	mov	r3, r1
 80150ea:	4630      	mov	r0, r6
 80150ec:	4639      	mov	r1, r7
 80150ee:	f7eb f8d3 	bl	8000298 <__aeabi_dsub>
 80150f2:	4602      	mov	r2, r0
 80150f4:	460b      	mov	r3, r1
 80150f6:	4650      	mov	r0, sl
 80150f8:	4659      	mov	r1, fp
 80150fa:	f7eb f8cd 	bl	8000298 <__aeabi_dsub>
 80150fe:	e6d6      	b.n	8014eae <__ieee754_log+0x2e>
 8015100:	a321      	add	r3, pc, #132	; (adr r3, 8015188 <__ieee754_log+0x308>)
 8015102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015106:	ec51 0b19 	vmov	r0, r1, d9
 801510a:	f7eb fa7d 	bl	8000608 <__aeabi_dmul>
 801510e:	a320      	add	r3, pc, #128	; (adr r3, 8015190 <__ieee754_log+0x310>)
 8015110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015114:	4604      	mov	r4, r0
 8015116:	460d      	mov	r5, r1
 8015118:	ec51 0b19 	vmov	r0, r1, d9
 801511c:	f7eb fa74 	bl	8000608 <__aeabi_dmul>
 8015120:	4642      	mov	r2, r8
 8015122:	464b      	mov	r3, r9
 8015124:	f7eb f8ba 	bl	800029c <__adddf3>
 8015128:	4602      	mov	r2, r0
 801512a:	460b      	mov	r3, r1
 801512c:	4630      	mov	r0, r6
 801512e:	4639      	mov	r1, r7
 8015130:	f7eb f8b2 	bl	8000298 <__aeabi_dsub>
 8015134:	4652      	mov	r2, sl
 8015136:	465b      	mov	r3, fp
 8015138:	f7eb f8ae 	bl	8000298 <__aeabi_dsub>
 801513c:	4602      	mov	r2, r0
 801513e:	460b      	mov	r3, r1
 8015140:	4620      	mov	r0, r4
 8015142:	4629      	mov	r1, r5
 8015144:	e7d9      	b.n	80150fa <__ieee754_log+0x27a>
 8015146:	4602      	mov	r2, r0
 8015148:	460b      	mov	r3, r1
 801514a:	4650      	mov	r0, sl
 801514c:	4659      	mov	r1, fp
 801514e:	f7eb f8a3 	bl	8000298 <__aeabi_dsub>
 8015152:	ec53 2b18 	vmov	r2, r3, d8
 8015156:	f7eb fa57 	bl	8000608 <__aeabi_dmul>
 801515a:	4606      	mov	r6, r0
 801515c:	460f      	mov	r7, r1
 801515e:	2c00      	cmp	r4, #0
 8015160:	f43f af23 	beq.w	8014faa <__ieee754_log+0x12a>
 8015164:	a308      	add	r3, pc, #32	; (adr r3, 8015188 <__ieee754_log+0x308>)
 8015166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801516a:	ec51 0b19 	vmov	r0, r1, d9
 801516e:	f7eb fa4b 	bl	8000608 <__aeabi_dmul>
 8015172:	a307      	add	r3, pc, #28	; (adr r3, 8015190 <__ieee754_log+0x310>)
 8015174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015178:	4604      	mov	r4, r0
 801517a:	460d      	mov	r5, r1
 801517c:	ec51 0b19 	vmov	r0, r1, d9
 8015180:	e727      	b.n	8014fd2 <__ieee754_log+0x152>
 8015182:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80151d8 <__ieee754_log+0x358>
 8015186:	e694      	b.n	8014eb2 <__ieee754_log+0x32>
 8015188:	fee00000 	.word	0xfee00000
 801518c:	3fe62e42 	.word	0x3fe62e42
 8015190:	35793c76 	.word	0x35793c76
 8015194:	3dea39ef 	.word	0x3dea39ef
 8015198:	55555555 	.word	0x55555555
 801519c:	3fd55555 	.word	0x3fd55555
 80151a0:	df3e5244 	.word	0xdf3e5244
 80151a4:	3fc2f112 	.word	0x3fc2f112
 80151a8:	96cb03de 	.word	0x96cb03de
 80151ac:	3fc74664 	.word	0x3fc74664
 80151b0:	94229359 	.word	0x94229359
 80151b4:	3fd24924 	.word	0x3fd24924
 80151b8:	55555593 	.word	0x55555593
 80151bc:	3fe55555 	.word	0x3fe55555
 80151c0:	d078c69f 	.word	0xd078c69f
 80151c4:	3fc39a09 	.word	0x3fc39a09
 80151c8:	1d8e78af 	.word	0x1d8e78af
 80151cc:	3fcc71c5 	.word	0x3fcc71c5
 80151d0:	9997fa04 	.word	0x9997fa04
 80151d4:	3fd99999 	.word	0x3fd99999
	...
 80151e0:	c3500000 	.word	0xc3500000
 80151e4:	43500000 	.word	0x43500000
 80151e8:	7fefffff 	.word	0x7fefffff
 80151ec:	3ff00000 	.word	0x3ff00000
 80151f0:	3fe00000 	.word	0x3fe00000
 80151f4:	00000000 	.word	0x00000000

080151f8 <__ieee754_pow>:
 80151f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151fc:	ed2d 8b06 	vpush	{d8-d10}
 8015200:	b08d      	sub	sp, #52	; 0x34
 8015202:	ed8d 1b02 	vstr	d1, [sp, #8]
 8015206:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 801520a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 801520e:	ea56 0100 	orrs.w	r1, r6, r0
 8015212:	ec53 2b10 	vmov	r2, r3, d0
 8015216:	f000 84d1 	beq.w	8015bbc <__ieee754_pow+0x9c4>
 801521a:	497f      	ldr	r1, [pc, #508]	; (8015418 <__ieee754_pow+0x220>)
 801521c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8015220:	428c      	cmp	r4, r1
 8015222:	ee10 8a10 	vmov	r8, s0
 8015226:	4699      	mov	r9, r3
 8015228:	dc09      	bgt.n	801523e <__ieee754_pow+0x46>
 801522a:	d103      	bne.n	8015234 <__ieee754_pow+0x3c>
 801522c:	b97a      	cbnz	r2, 801524e <__ieee754_pow+0x56>
 801522e:	42a6      	cmp	r6, r4
 8015230:	dd02      	ble.n	8015238 <__ieee754_pow+0x40>
 8015232:	e00c      	b.n	801524e <__ieee754_pow+0x56>
 8015234:	428e      	cmp	r6, r1
 8015236:	dc02      	bgt.n	801523e <__ieee754_pow+0x46>
 8015238:	428e      	cmp	r6, r1
 801523a:	d110      	bne.n	801525e <__ieee754_pow+0x66>
 801523c:	b178      	cbz	r0, 801525e <__ieee754_pow+0x66>
 801523e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8015242:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015246:	ea54 0308 	orrs.w	r3, r4, r8
 801524a:	f000 84b7 	beq.w	8015bbc <__ieee754_pow+0x9c4>
 801524e:	4873      	ldr	r0, [pc, #460]	; (801541c <__ieee754_pow+0x224>)
 8015250:	b00d      	add	sp, #52	; 0x34
 8015252:	ecbd 8b06 	vpop	{d8-d10}
 8015256:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801525a:	f7ff b9dd 	b.w	8014618 <nan>
 801525e:	f1b9 0f00 	cmp.w	r9, #0
 8015262:	da36      	bge.n	80152d2 <__ieee754_pow+0xda>
 8015264:	496e      	ldr	r1, [pc, #440]	; (8015420 <__ieee754_pow+0x228>)
 8015266:	428e      	cmp	r6, r1
 8015268:	dc51      	bgt.n	801530e <__ieee754_pow+0x116>
 801526a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 801526e:	428e      	cmp	r6, r1
 8015270:	f340 84af 	ble.w	8015bd2 <__ieee754_pow+0x9da>
 8015274:	1531      	asrs	r1, r6, #20
 8015276:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801527a:	2914      	cmp	r1, #20
 801527c:	dd0f      	ble.n	801529e <__ieee754_pow+0xa6>
 801527e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8015282:	fa20 fc01 	lsr.w	ip, r0, r1
 8015286:	fa0c f101 	lsl.w	r1, ip, r1
 801528a:	4281      	cmp	r1, r0
 801528c:	f040 84a1 	bne.w	8015bd2 <__ieee754_pow+0x9da>
 8015290:	f00c 0c01 	and.w	ip, ip, #1
 8015294:	f1cc 0102 	rsb	r1, ip, #2
 8015298:	9100      	str	r1, [sp, #0]
 801529a:	b180      	cbz	r0, 80152be <__ieee754_pow+0xc6>
 801529c:	e059      	b.n	8015352 <__ieee754_pow+0x15a>
 801529e:	2800      	cmp	r0, #0
 80152a0:	d155      	bne.n	801534e <__ieee754_pow+0x156>
 80152a2:	f1c1 0114 	rsb	r1, r1, #20
 80152a6:	fa46 fc01 	asr.w	ip, r6, r1
 80152aa:	fa0c f101 	lsl.w	r1, ip, r1
 80152ae:	42b1      	cmp	r1, r6
 80152b0:	f040 848c 	bne.w	8015bcc <__ieee754_pow+0x9d4>
 80152b4:	f00c 0c01 	and.w	ip, ip, #1
 80152b8:	f1cc 0102 	rsb	r1, ip, #2
 80152bc:	9100      	str	r1, [sp, #0]
 80152be:	4959      	ldr	r1, [pc, #356]	; (8015424 <__ieee754_pow+0x22c>)
 80152c0:	428e      	cmp	r6, r1
 80152c2:	d12d      	bne.n	8015320 <__ieee754_pow+0x128>
 80152c4:	2f00      	cmp	r7, #0
 80152c6:	da79      	bge.n	80153bc <__ieee754_pow+0x1c4>
 80152c8:	4956      	ldr	r1, [pc, #344]	; (8015424 <__ieee754_pow+0x22c>)
 80152ca:	2000      	movs	r0, #0
 80152cc:	f7eb fac6 	bl	800085c <__aeabi_ddiv>
 80152d0:	e016      	b.n	8015300 <__ieee754_pow+0x108>
 80152d2:	2100      	movs	r1, #0
 80152d4:	9100      	str	r1, [sp, #0]
 80152d6:	2800      	cmp	r0, #0
 80152d8:	d13b      	bne.n	8015352 <__ieee754_pow+0x15a>
 80152da:	494f      	ldr	r1, [pc, #316]	; (8015418 <__ieee754_pow+0x220>)
 80152dc:	428e      	cmp	r6, r1
 80152de:	d1ee      	bne.n	80152be <__ieee754_pow+0xc6>
 80152e0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80152e4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80152e8:	ea53 0308 	orrs.w	r3, r3, r8
 80152ec:	f000 8466 	beq.w	8015bbc <__ieee754_pow+0x9c4>
 80152f0:	4b4d      	ldr	r3, [pc, #308]	; (8015428 <__ieee754_pow+0x230>)
 80152f2:	429c      	cmp	r4, r3
 80152f4:	dd0d      	ble.n	8015312 <__ieee754_pow+0x11a>
 80152f6:	2f00      	cmp	r7, #0
 80152f8:	f280 8464 	bge.w	8015bc4 <__ieee754_pow+0x9cc>
 80152fc:	2000      	movs	r0, #0
 80152fe:	2100      	movs	r1, #0
 8015300:	ec41 0b10 	vmov	d0, r0, r1
 8015304:	b00d      	add	sp, #52	; 0x34
 8015306:	ecbd 8b06 	vpop	{d8-d10}
 801530a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801530e:	2102      	movs	r1, #2
 8015310:	e7e0      	b.n	80152d4 <__ieee754_pow+0xdc>
 8015312:	2f00      	cmp	r7, #0
 8015314:	daf2      	bge.n	80152fc <__ieee754_pow+0x104>
 8015316:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 801531a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801531e:	e7ef      	b.n	8015300 <__ieee754_pow+0x108>
 8015320:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8015324:	d104      	bne.n	8015330 <__ieee754_pow+0x138>
 8015326:	4610      	mov	r0, r2
 8015328:	4619      	mov	r1, r3
 801532a:	f7eb f96d 	bl	8000608 <__aeabi_dmul>
 801532e:	e7e7      	b.n	8015300 <__ieee754_pow+0x108>
 8015330:	493e      	ldr	r1, [pc, #248]	; (801542c <__ieee754_pow+0x234>)
 8015332:	428f      	cmp	r7, r1
 8015334:	d10d      	bne.n	8015352 <__ieee754_pow+0x15a>
 8015336:	f1b9 0f00 	cmp.w	r9, #0
 801533a:	db0a      	blt.n	8015352 <__ieee754_pow+0x15a>
 801533c:	ec43 2b10 	vmov	d0, r2, r3
 8015340:	b00d      	add	sp, #52	; 0x34
 8015342:	ecbd 8b06 	vpop	{d8-d10}
 8015346:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801534a:	f000 bc77 	b.w	8015c3c <__ieee754_sqrt>
 801534e:	2100      	movs	r1, #0
 8015350:	9100      	str	r1, [sp, #0]
 8015352:	ec43 2b10 	vmov	d0, r2, r3
 8015356:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801535a:	f000 fd23 	bl	8015da4 <fabs>
 801535e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015362:	ec51 0b10 	vmov	r0, r1, d0
 8015366:	f1b8 0f00 	cmp.w	r8, #0
 801536a:	d12a      	bne.n	80153c2 <__ieee754_pow+0x1ca>
 801536c:	b12c      	cbz	r4, 801537a <__ieee754_pow+0x182>
 801536e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8015424 <__ieee754_pow+0x22c>
 8015372:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8015376:	45e6      	cmp	lr, ip
 8015378:	d123      	bne.n	80153c2 <__ieee754_pow+0x1ca>
 801537a:	2f00      	cmp	r7, #0
 801537c:	da05      	bge.n	801538a <__ieee754_pow+0x192>
 801537e:	4602      	mov	r2, r0
 8015380:	460b      	mov	r3, r1
 8015382:	2000      	movs	r0, #0
 8015384:	4927      	ldr	r1, [pc, #156]	; (8015424 <__ieee754_pow+0x22c>)
 8015386:	f7eb fa69 	bl	800085c <__aeabi_ddiv>
 801538a:	f1b9 0f00 	cmp.w	r9, #0
 801538e:	dab7      	bge.n	8015300 <__ieee754_pow+0x108>
 8015390:	9b00      	ldr	r3, [sp, #0]
 8015392:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8015396:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801539a:	4323      	orrs	r3, r4
 801539c:	d108      	bne.n	80153b0 <__ieee754_pow+0x1b8>
 801539e:	4602      	mov	r2, r0
 80153a0:	460b      	mov	r3, r1
 80153a2:	4610      	mov	r0, r2
 80153a4:	4619      	mov	r1, r3
 80153a6:	f7ea ff77 	bl	8000298 <__aeabi_dsub>
 80153aa:	4602      	mov	r2, r0
 80153ac:	460b      	mov	r3, r1
 80153ae:	e78d      	b.n	80152cc <__ieee754_pow+0xd4>
 80153b0:	9b00      	ldr	r3, [sp, #0]
 80153b2:	2b01      	cmp	r3, #1
 80153b4:	d1a4      	bne.n	8015300 <__ieee754_pow+0x108>
 80153b6:	4602      	mov	r2, r0
 80153b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80153bc:	4610      	mov	r0, r2
 80153be:	4619      	mov	r1, r3
 80153c0:	e79e      	b.n	8015300 <__ieee754_pow+0x108>
 80153c2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 80153c6:	f10c 35ff 	add.w	r5, ip, #4294967295
 80153ca:	950a      	str	r5, [sp, #40]	; 0x28
 80153cc:	9d00      	ldr	r5, [sp, #0]
 80153ce:	46ac      	mov	ip, r5
 80153d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80153d2:	ea5c 0505 	orrs.w	r5, ip, r5
 80153d6:	d0e4      	beq.n	80153a2 <__ieee754_pow+0x1aa>
 80153d8:	4b15      	ldr	r3, [pc, #84]	; (8015430 <__ieee754_pow+0x238>)
 80153da:	429e      	cmp	r6, r3
 80153dc:	f340 80fc 	ble.w	80155d8 <__ieee754_pow+0x3e0>
 80153e0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80153e4:	429e      	cmp	r6, r3
 80153e6:	4b10      	ldr	r3, [pc, #64]	; (8015428 <__ieee754_pow+0x230>)
 80153e8:	dd07      	ble.n	80153fa <__ieee754_pow+0x202>
 80153ea:	429c      	cmp	r4, r3
 80153ec:	dc0a      	bgt.n	8015404 <__ieee754_pow+0x20c>
 80153ee:	2f00      	cmp	r7, #0
 80153f0:	da84      	bge.n	80152fc <__ieee754_pow+0x104>
 80153f2:	a307      	add	r3, pc, #28	; (adr r3, 8015410 <__ieee754_pow+0x218>)
 80153f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153f8:	e795      	b.n	8015326 <__ieee754_pow+0x12e>
 80153fa:	429c      	cmp	r4, r3
 80153fc:	dbf7      	blt.n	80153ee <__ieee754_pow+0x1f6>
 80153fe:	4b09      	ldr	r3, [pc, #36]	; (8015424 <__ieee754_pow+0x22c>)
 8015400:	429c      	cmp	r4, r3
 8015402:	dd17      	ble.n	8015434 <__ieee754_pow+0x23c>
 8015404:	2f00      	cmp	r7, #0
 8015406:	dcf4      	bgt.n	80153f2 <__ieee754_pow+0x1fa>
 8015408:	e778      	b.n	80152fc <__ieee754_pow+0x104>
 801540a:	bf00      	nop
 801540c:	f3af 8000 	nop.w
 8015410:	8800759c 	.word	0x8800759c
 8015414:	7e37e43c 	.word	0x7e37e43c
 8015418:	7ff00000 	.word	0x7ff00000
 801541c:	08016563 	.word	0x08016563
 8015420:	433fffff 	.word	0x433fffff
 8015424:	3ff00000 	.word	0x3ff00000
 8015428:	3fefffff 	.word	0x3fefffff
 801542c:	3fe00000 	.word	0x3fe00000
 8015430:	41e00000 	.word	0x41e00000
 8015434:	4b64      	ldr	r3, [pc, #400]	; (80155c8 <__ieee754_pow+0x3d0>)
 8015436:	2200      	movs	r2, #0
 8015438:	f7ea ff2e 	bl	8000298 <__aeabi_dsub>
 801543c:	a356      	add	r3, pc, #344	; (adr r3, 8015598 <__ieee754_pow+0x3a0>)
 801543e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015442:	4604      	mov	r4, r0
 8015444:	460d      	mov	r5, r1
 8015446:	f7eb f8df 	bl	8000608 <__aeabi_dmul>
 801544a:	a355      	add	r3, pc, #340	; (adr r3, 80155a0 <__ieee754_pow+0x3a8>)
 801544c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015450:	4606      	mov	r6, r0
 8015452:	460f      	mov	r7, r1
 8015454:	4620      	mov	r0, r4
 8015456:	4629      	mov	r1, r5
 8015458:	f7eb f8d6 	bl	8000608 <__aeabi_dmul>
 801545c:	4b5b      	ldr	r3, [pc, #364]	; (80155cc <__ieee754_pow+0x3d4>)
 801545e:	4682      	mov	sl, r0
 8015460:	468b      	mov	fp, r1
 8015462:	2200      	movs	r2, #0
 8015464:	4620      	mov	r0, r4
 8015466:	4629      	mov	r1, r5
 8015468:	f7eb f8ce 	bl	8000608 <__aeabi_dmul>
 801546c:	4602      	mov	r2, r0
 801546e:	460b      	mov	r3, r1
 8015470:	a14d      	add	r1, pc, #308	; (adr r1, 80155a8 <__ieee754_pow+0x3b0>)
 8015472:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015476:	f7ea ff0f 	bl	8000298 <__aeabi_dsub>
 801547a:	4622      	mov	r2, r4
 801547c:	462b      	mov	r3, r5
 801547e:	f7eb f8c3 	bl	8000608 <__aeabi_dmul>
 8015482:	4602      	mov	r2, r0
 8015484:	460b      	mov	r3, r1
 8015486:	2000      	movs	r0, #0
 8015488:	4951      	ldr	r1, [pc, #324]	; (80155d0 <__ieee754_pow+0x3d8>)
 801548a:	f7ea ff05 	bl	8000298 <__aeabi_dsub>
 801548e:	4622      	mov	r2, r4
 8015490:	4680      	mov	r8, r0
 8015492:	4689      	mov	r9, r1
 8015494:	462b      	mov	r3, r5
 8015496:	4620      	mov	r0, r4
 8015498:	4629      	mov	r1, r5
 801549a:	f7eb f8b5 	bl	8000608 <__aeabi_dmul>
 801549e:	4602      	mov	r2, r0
 80154a0:	460b      	mov	r3, r1
 80154a2:	4640      	mov	r0, r8
 80154a4:	4649      	mov	r1, r9
 80154a6:	f7eb f8af 	bl	8000608 <__aeabi_dmul>
 80154aa:	a341      	add	r3, pc, #260	; (adr r3, 80155b0 <__ieee754_pow+0x3b8>)
 80154ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154b0:	f7eb f8aa 	bl	8000608 <__aeabi_dmul>
 80154b4:	4602      	mov	r2, r0
 80154b6:	460b      	mov	r3, r1
 80154b8:	4650      	mov	r0, sl
 80154ba:	4659      	mov	r1, fp
 80154bc:	f7ea feec 	bl	8000298 <__aeabi_dsub>
 80154c0:	4602      	mov	r2, r0
 80154c2:	460b      	mov	r3, r1
 80154c4:	4680      	mov	r8, r0
 80154c6:	4689      	mov	r9, r1
 80154c8:	4630      	mov	r0, r6
 80154ca:	4639      	mov	r1, r7
 80154cc:	f7ea fee6 	bl	800029c <__adddf3>
 80154d0:	2400      	movs	r4, #0
 80154d2:	4632      	mov	r2, r6
 80154d4:	463b      	mov	r3, r7
 80154d6:	4620      	mov	r0, r4
 80154d8:	460d      	mov	r5, r1
 80154da:	f7ea fedd 	bl	8000298 <__aeabi_dsub>
 80154de:	4602      	mov	r2, r0
 80154e0:	460b      	mov	r3, r1
 80154e2:	4640      	mov	r0, r8
 80154e4:	4649      	mov	r1, r9
 80154e6:	f7ea fed7 	bl	8000298 <__aeabi_dsub>
 80154ea:	9b00      	ldr	r3, [sp, #0]
 80154ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80154ee:	3b01      	subs	r3, #1
 80154f0:	4313      	orrs	r3, r2
 80154f2:	4682      	mov	sl, r0
 80154f4:	468b      	mov	fp, r1
 80154f6:	f040 81f1 	bne.w	80158dc <__ieee754_pow+0x6e4>
 80154fa:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80155b8 <__ieee754_pow+0x3c0>
 80154fe:	eeb0 8a47 	vmov.f32	s16, s14
 8015502:	eef0 8a67 	vmov.f32	s17, s15
 8015506:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801550a:	2600      	movs	r6, #0
 801550c:	4632      	mov	r2, r6
 801550e:	463b      	mov	r3, r7
 8015510:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015514:	f7ea fec0 	bl	8000298 <__aeabi_dsub>
 8015518:	4622      	mov	r2, r4
 801551a:	462b      	mov	r3, r5
 801551c:	f7eb f874 	bl	8000608 <__aeabi_dmul>
 8015520:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015524:	4680      	mov	r8, r0
 8015526:	4689      	mov	r9, r1
 8015528:	4650      	mov	r0, sl
 801552a:	4659      	mov	r1, fp
 801552c:	f7eb f86c 	bl	8000608 <__aeabi_dmul>
 8015530:	4602      	mov	r2, r0
 8015532:	460b      	mov	r3, r1
 8015534:	4640      	mov	r0, r8
 8015536:	4649      	mov	r1, r9
 8015538:	f7ea feb0 	bl	800029c <__adddf3>
 801553c:	4632      	mov	r2, r6
 801553e:	463b      	mov	r3, r7
 8015540:	4680      	mov	r8, r0
 8015542:	4689      	mov	r9, r1
 8015544:	4620      	mov	r0, r4
 8015546:	4629      	mov	r1, r5
 8015548:	f7eb f85e 	bl	8000608 <__aeabi_dmul>
 801554c:	460b      	mov	r3, r1
 801554e:	4604      	mov	r4, r0
 8015550:	460d      	mov	r5, r1
 8015552:	4602      	mov	r2, r0
 8015554:	4649      	mov	r1, r9
 8015556:	4640      	mov	r0, r8
 8015558:	f7ea fea0 	bl	800029c <__adddf3>
 801555c:	4b1d      	ldr	r3, [pc, #116]	; (80155d4 <__ieee754_pow+0x3dc>)
 801555e:	4299      	cmp	r1, r3
 8015560:	ec45 4b19 	vmov	d9, r4, r5
 8015564:	4606      	mov	r6, r0
 8015566:	460f      	mov	r7, r1
 8015568:	468b      	mov	fp, r1
 801556a:	f340 82fe 	ble.w	8015b6a <__ieee754_pow+0x972>
 801556e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8015572:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8015576:	4303      	orrs	r3, r0
 8015578:	f000 81f0 	beq.w	801595c <__ieee754_pow+0x764>
 801557c:	a310      	add	r3, pc, #64	; (adr r3, 80155c0 <__ieee754_pow+0x3c8>)
 801557e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015582:	ec51 0b18 	vmov	r0, r1, d8
 8015586:	f7eb f83f 	bl	8000608 <__aeabi_dmul>
 801558a:	a30d      	add	r3, pc, #52	; (adr r3, 80155c0 <__ieee754_pow+0x3c8>)
 801558c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015590:	e6cb      	b.n	801532a <__ieee754_pow+0x132>
 8015592:	bf00      	nop
 8015594:	f3af 8000 	nop.w
 8015598:	60000000 	.word	0x60000000
 801559c:	3ff71547 	.word	0x3ff71547
 80155a0:	f85ddf44 	.word	0xf85ddf44
 80155a4:	3e54ae0b 	.word	0x3e54ae0b
 80155a8:	55555555 	.word	0x55555555
 80155ac:	3fd55555 	.word	0x3fd55555
 80155b0:	652b82fe 	.word	0x652b82fe
 80155b4:	3ff71547 	.word	0x3ff71547
 80155b8:	00000000 	.word	0x00000000
 80155bc:	bff00000 	.word	0xbff00000
 80155c0:	8800759c 	.word	0x8800759c
 80155c4:	7e37e43c 	.word	0x7e37e43c
 80155c8:	3ff00000 	.word	0x3ff00000
 80155cc:	3fd00000 	.word	0x3fd00000
 80155d0:	3fe00000 	.word	0x3fe00000
 80155d4:	408fffff 	.word	0x408fffff
 80155d8:	4bd7      	ldr	r3, [pc, #860]	; (8015938 <__ieee754_pow+0x740>)
 80155da:	ea03 0309 	and.w	r3, r3, r9
 80155de:	2200      	movs	r2, #0
 80155e0:	b92b      	cbnz	r3, 80155ee <__ieee754_pow+0x3f6>
 80155e2:	4bd6      	ldr	r3, [pc, #856]	; (801593c <__ieee754_pow+0x744>)
 80155e4:	f7eb f810 	bl	8000608 <__aeabi_dmul>
 80155e8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80155ec:	460c      	mov	r4, r1
 80155ee:	1523      	asrs	r3, r4, #20
 80155f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80155f4:	4413      	add	r3, r2
 80155f6:	9309      	str	r3, [sp, #36]	; 0x24
 80155f8:	4bd1      	ldr	r3, [pc, #836]	; (8015940 <__ieee754_pow+0x748>)
 80155fa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80155fe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8015602:	429c      	cmp	r4, r3
 8015604:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8015608:	dd08      	ble.n	801561c <__ieee754_pow+0x424>
 801560a:	4bce      	ldr	r3, [pc, #824]	; (8015944 <__ieee754_pow+0x74c>)
 801560c:	429c      	cmp	r4, r3
 801560e:	f340 8163 	ble.w	80158d8 <__ieee754_pow+0x6e0>
 8015612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015614:	3301      	adds	r3, #1
 8015616:	9309      	str	r3, [sp, #36]	; 0x24
 8015618:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801561c:	2400      	movs	r4, #0
 801561e:	00e3      	lsls	r3, r4, #3
 8015620:	930b      	str	r3, [sp, #44]	; 0x2c
 8015622:	4bc9      	ldr	r3, [pc, #804]	; (8015948 <__ieee754_pow+0x750>)
 8015624:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015628:	ed93 7b00 	vldr	d7, [r3]
 801562c:	4629      	mov	r1, r5
 801562e:	ec53 2b17 	vmov	r2, r3, d7
 8015632:	eeb0 8a47 	vmov.f32	s16, s14
 8015636:	eef0 8a67 	vmov.f32	s17, s15
 801563a:	4682      	mov	sl, r0
 801563c:	f7ea fe2c 	bl	8000298 <__aeabi_dsub>
 8015640:	4652      	mov	r2, sl
 8015642:	4606      	mov	r6, r0
 8015644:	460f      	mov	r7, r1
 8015646:	462b      	mov	r3, r5
 8015648:	ec51 0b18 	vmov	r0, r1, d8
 801564c:	f7ea fe26 	bl	800029c <__adddf3>
 8015650:	4602      	mov	r2, r0
 8015652:	460b      	mov	r3, r1
 8015654:	2000      	movs	r0, #0
 8015656:	49bd      	ldr	r1, [pc, #756]	; (801594c <__ieee754_pow+0x754>)
 8015658:	f7eb f900 	bl	800085c <__aeabi_ddiv>
 801565c:	ec41 0b19 	vmov	d9, r0, r1
 8015660:	4602      	mov	r2, r0
 8015662:	460b      	mov	r3, r1
 8015664:	4630      	mov	r0, r6
 8015666:	4639      	mov	r1, r7
 8015668:	f7ea ffce 	bl	8000608 <__aeabi_dmul>
 801566c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015670:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015674:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015678:	2300      	movs	r3, #0
 801567a:	9304      	str	r3, [sp, #16]
 801567c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8015680:	46ab      	mov	fp, r5
 8015682:	106d      	asrs	r5, r5, #1
 8015684:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8015688:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801568c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8015690:	2200      	movs	r2, #0
 8015692:	4640      	mov	r0, r8
 8015694:	4649      	mov	r1, r9
 8015696:	4614      	mov	r4, r2
 8015698:	461d      	mov	r5, r3
 801569a:	f7ea ffb5 	bl	8000608 <__aeabi_dmul>
 801569e:	4602      	mov	r2, r0
 80156a0:	460b      	mov	r3, r1
 80156a2:	4630      	mov	r0, r6
 80156a4:	4639      	mov	r1, r7
 80156a6:	f7ea fdf7 	bl	8000298 <__aeabi_dsub>
 80156aa:	ec53 2b18 	vmov	r2, r3, d8
 80156ae:	4606      	mov	r6, r0
 80156b0:	460f      	mov	r7, r1
 80156b2:	4620      	mov	r0, r4
 80156b4:	4629      	mov	r1, r5
 80156b6:	f7ea fdef 	bl	8000298 <__aeabi_dsub>
 80156ba:	4602      	mov	r2, r0
 80156bc:	460b      	mov	r3, r1
 80156be:	4650      	mov	r0, sl
 80156c0:	4659      	mov	r1, fp
 80156c2:	f7ea fde9 	bl	8000298 <__aeabi_dsub>
 80156c6:	4642      	mov	r2, r8
 80156c8:	464b      	mov	r3, r9
 80156ca:	f7ea ff9d 	bl	8000608 <__aeabi_dmul>
 80156ce:	4602      	mov	r2, r0
 80156d0:	460b      	mov	r3, r1
 80156d2:	4630      	mov	r0, r6
 80156d4:	4639      	mov	r1, r7
 80156d6:	f7ea fddf 	bl	8000298 <__aeabi_dsub>
 80156da:	ec53 2b19 	vmov	r2, r3, d9
 80156de:	f7ea ff93 	bl	8000608 <__aeabi_dmul>
 80156e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80156e6:	ec41 0b18 	vmov	d8, r0, r1
 80156ea:	4610      	mov	r0, r2
 80156ec:	4619      	mov	r1, r3
 80156ee:	f7ea ff8b 	bl	8000608 <__aeabi_dmul>
 80156f2:	a37d      	add	r3, pc, #500	; (adr r3, 80158e8 <__ieee754_pow+0x6f0>)
 80156f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156f8:	4604      	mov	r4, r0
 80156fa:	460d      	mov	r5, r1
 80156fc:	f7ea ff84 	bl	8000608 <__aeabi_dmul>
 8015700:	a37b      	add	r3, pc, #492	; (adr r3, 80158f0 <__ieee754_pow+0x6f8>)
 8015702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015706:	f7ea fdc9 	bl	800029c <__adddf3>
 801570a:	4622      	mov	r2, r4
 801570c:	462b      	mov	r3, r5
 801570e:	f7ea ff7b 	bl	8000608 <__aeabi_dmul>
 8015712:	a379      	add	r3, pc, #484	; (adr r3, 80158f8 <__ieee754_pow+0x700>)
 8015714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015718:	f7ea fdc0 	bl	800029c <__adddf3>
 801571c:	4622      	mov	r2, r4
 801571e:	462b      	mov	r3, r5
 8015720:	f7ea ff72 	bl	8000608 <__aeabi_dmul>
 8015724:	a376      	add	r3, pc, #472	; (adr r3, 8015900 <__ieee754_pow+0x708>)
 8015726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801572a:	f7ea fdb7 	bl	800029c <__adddf3>
 801572e:	4622      	mov	r2, r4
 8015730:	462b      	mov	r3, r5
 8015732:	f7ea ff69 	bl	8000608 <__aeabi_dmul>
 8015736:	a374      	add	r3, pc, #464	; (adr r3, 8015908 <__ieee754_pow+0x710>)
 8015738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801573c:	f7ea fdae 	bl	800029c <__adddf3>
 8015740:	4622      	mov	r2, r4
 8015742:	462b      	mov	r3, r5
 8015744:	f7ea ff60 	bl	8000608 <__aeabi_dmul>
 8015748:	a371      	add	r3, pc, #452	; (adr r3, 8015910 <__ieee754_pow+0x718>)
 801574a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801574e:	f7ea fda5 	bl	800029c <__adddf3>
 8015752:	4622      	mov	r2, r4
 8015754:	4606      	mov	r6, r0
 8015756:	460f      	mov	r7, r1
 8015758:	462b      	mov	r3, r5
 801575a:	4620      	mov	r0, r4
 801575c:	4629      	mov	r1, r5
 801575e:	f7ea ff53 	bl	8000608 <__aeabi_dmul>
 8015762:	4602      	mov	r2, r0
 8015764:	460b      	mov	r3, r1
 8015766:	4630      	mov	r0, r6
 8015768:	4639      	mov	r1, r7
 801576a:	f7ea ff4d 	bl	8000608 <__aeabi_dmul>
 801576e:	4642      	mov	r2, r8
 8015770:	4604      	mov	r4, r0
 8015772:	460d      	mov	r5, r1
 8015774:	464b      	mov	r3, r9
 8015776:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801577a:	f7ea fd8f 	bl	800029c <__adddf3>
 801577e:	ec53 2b18 	vmov	r2, r3, d8
 8015782:	f7ea ff41 	bl	8000608 <__aeabi_dmul>
 8015786:	4622      	mov	r2, r4
 8015788:	462b      	mov	r3, r5
 801578a:	f7ea fd87 	bl	800029c <__adddf3>
 801578e:	4642      	mov	r2, r8
 8015790:	4682      	mov	sl, r0
 8015792:	468b      	mov	fp, r1
 8015794:	464b      	mov	r3, r9
 8015796:	4640      	mov	r0, r8
 8015798:	4649      	mov	r1, r9
 801579a:	f7ea ff35 	bl	8000608 <__aeabi_dmul>
 801579e:	4b6c      	ldr	r3, [pc, #432]	; (8015950 <__ieee754_pow+0x758>)
 80157a0:	2200      	movs	r2, #0
 80157a2:	4606      	mov	r6, r0
 80157a4:	460f      	mov	r7, r1
 80157a6:	f7ea fd79 	bl	800029c <__adddf3>
 80157aa:	4652      	mov	r2, sl
 80157ac:	465b      	mov	r3, fp
 80157ae:	f7ea fd75 	bl	800029c <__adddf3>
 80157b2:	9c04      	ldr	r4, [sp, #16]
 80157b4:	460d      	mov	r5, r1
 80157b6:	4622      	mov	r2, r4
 80157b8:	460b      	mov	r3, r1
 80157ba:	4640      	mov	r0, r8
 80157bc:	4649      	mov	r1, r9
 80157be:	f7ea ff23 	bl	8000608 <__aeabi_dmul>
 80157c2:	4b63      	ldr	r3, [pc, #396]	; (8015950 <__ieee754_pow+0x758>)
 80157c4:	4680      	mov	r8, r0
 80157c6:	4689      	mov	r9, r1
 80157c8:	2200      	movs	r2, #0
 80157ca:	4620      	mov	r0, r4
 80157cc:	4629      	mov	r1, r5
 80157ce:	f7ea fd63 	bl	8000298 <__aeabi_dsub>
 80157d2:	4632      	mov	r2, r6
 80157d4:	463b      	mov	r3, r7
 80157d6:	f7ea fd5f 	bl	8000298 <__aeabi_dsub>
 80157da:	4602      	mov	r2, r0
 80157dc:	460b      	mov	r3, r1
 80157de:	4650      	mov	r0, sl
 80157e0:	4659      	mov	r1, fp
 80157e2:	f7ea fd59 	bl	8000298 <__aeabi_dsub>
 80157e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80157ea:	f7ea ff0d 	bl	8000608 <__aeabi_dmul>
 80157ee:	4622      	mov	r2, r4
 80157f0:	4606      	mov	r6, r0
 80157f2:	460f      	mov	r7, r1
 80157f4:	462b      	mov	r3, r5
 80157f6:	ec51 0b18 	vmov	r0, r1, d8
 80157fa:	f7ea ff05 	bl	8000608 <__aeabi_dmul>
 80157fe:	4602      	mov	r2, r0
 8015800:	460b      	mov	r3, r1
 8015802:	4630      	mov	r0, r6
 8015804:	4639      	mov	r1, r7
 8015806:	f7ea fd49 	bl	800029c <__adddf3>
 801580a:	4606      	mov	r6, r0
 801580c:	460f      	mov	r7, r1
 801580e:	4602      	mov	r2, r0
 8015810:	460b      	mov	r3, r1
 8015812:	4640      	mov	r0, r8
 8015814:	4649      	mov	r1, r9
 8015816:	f7ea fd41 	bl	800029c <__adddf3>
 801581a:	9c04      	ldr	r4, [sp, #16]
 801581c:	a33e      	add	r3, pc, #248	; (adr r3, 8015918 <__ieee754_pow+0x720>)
 801581e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015822:	4620      	mov	r0, r4
 8015824:	460d      	mov	r5, r1
 8015826:	f7ea feef 	bl	8000608 <__aeabi_dmul>
 801582a:	4642      	mov	r2, r8
 801582c:	ec41 0b18 	vmov	d8, r0, r1
 8015830:	464b      	mov	r3, r9
 8015832:	4620      	mov	r0, r4
 8015834:	4629      	mov	r1, r5
 8015836:	f7ea fd2f 	bl	8000298 <__aeabi_dsub>
 801583a:	4602      	mov	r2, r0
 801583c:	460b      	mov	r3, r1
 801583e:	4630      	mov	r0, r6
 8015840:	4639      	mov	r1, r7
 8015842:	f7ea fd29 	bl	8000298 <__aeabi_dsub>
 8015846:	a336      	add	r3, pc, #216	; (adr r3, 8015920 <__ieee754_pow+0x728>)
 8015848:	e9d3 2300 	ldrd	r2, r3, [r3]
 801584c:	f7ea fedc 	bl	8000608 <__aeabi_dmul>
 8015850:	a335      	add	r3, pc, #212	; (adr r3, 8015928 <__ieee754_pow+0x730>)
 8015852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015856:	4606      	mov	r6, r0
 8015858:	460f      	mov	r7, r1
 801585a:	4620      	mov	r0, r4
 801585c:	4629      	mov	r1, r5
 801585e:	f7ea fed3 	bl	8000608 <__aeabi_dmul>
 8015862:	4602      	mov	r2, r0
 8015864:	460b      	mov	r3, r1
 8015866:	4630      	mov	r0, r6
 8015868:	4639      	mov	r1, r7
 801586a:	f7ea fd17 	bl	800029c <__adddf3>
 801586e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015870:	4b38      	ldr	r3, [pc, #224]	; (8015954 <__ieee754_pow+0x75c>)
 8015872:	4413      	add	r3, r2
 8015874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015878:	f7ea fd10 	bl	800029c <__adddf3>
 801587c:	4682      	mov	sl, r0
 801587e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015880:	468b      	mov	fp, r1
 8015882:	f7ea fe57 	bl	8000534 <__aeabi_i2d>
 8015886:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015888:	4b33      	ldr	r3, [pc, #204]	; (8015958 <__ieee754_pow+0x760>)
 801588a:	4413      	add	r3, r2
 801588c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015890:	4606      	mov	r6, r0
 8015892:	460f      	mov	r7, r1
 8015894:	4652      	mov	r2, sl
 8015896:	465b      	mov	r3, fp
 8015898:	ec51 0b18 	vmov	r0, r1, d8
 801589c:	f7ea fcfe 	bl	800029c <__adddf3>
 80158a0:	4642      	mov	r2, r8
 80158a2:	464b      	mov	r3, r9
 80158a4:	f7ea fcfa 	bl	800029c <__adddf3>
 80158a8:	4632      	mov	r2, r6
 80158aa:	463b      	mov	r3, r7
 80158ac:	f7ea fcf6 	bl	800029c <__adddf3>
 80158b0:	9c04      	ldr	r4, [sp, #16]
 80158b2:	4632      	mov	r2, r6
 80158b4:	463b      	mov	r3, r7
 80158b6:	4620      	mov	r0, r4
 80158b8:	460d      	mov	r5, r1
 80158ba:	f7ea fced 	bl	8000298 <__aeabi_dsub>
 80158be:	4642      	mov	r2, r8
 80158c0:	464b      	mov	r3, r9
 80158c2:	f7ea fce9 	bl	8000298 <__aeabi_dsub>
 80158c6:	ec53 2b18 	vmov	r2, r3, d8
 80158ca:	f7ea fce5 	bl	8000298 <__aeabi_dsub>
 80158ce:	4602      	mov	r2, r0
 80158d0:	460b      	mov	r3, r1
 80158d2:	4650      	mov	r0, sl
 80158d4:	4659      	mov	r1, fp
 80158d6:	e606      	b.n	80154e6 <__ieee754_pow+0x2ee>
 80158d8:	2401      	movs	r4, #1
 80158da:	e6a0      	b.n	801561e <__ieee754_pow+0x426>
 80158dc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8015930 <__ieee754_pow+0x738>
 80158e0:	e60d      	b.n	80154fe <__ieee754_pow+0x306>
 80158e2:	bf00      	nop
 80158e4:	f3af 8000 	nop.w
 80158e8:	4a454eef 	.word	0x4a454eef
 80158ec:	3fca7e28 	.word	0x3fca7e28
 80158f0:	93c9db65 	.word	0x93c9db65
 80158f4:	3fcd864a 	.word	0x3fcd864a
 80158f8:	a91d4101 	.word	0xa91d4101
 80158fc:	3fd17460 	.word	0x3fd17460
 8015900:	518f264d 	.word	0x518f264d
 8015904:	3fd55555 	.word	0x3fd55555
 8015908:	db6fabff 	.word	0xdb6fabff
 801590c:	3fdb6db6 	.word	0x3fdb6db6
 8015910:	33333303 	.word	0x33333303
 8015914:	3fe33333 	.word	0x3fe33333
 8015918:	e0000000 	.word	0xe0000000
 801591c:	3feec709 	.word	0x3feec709
 8015920:	dc3a03fd 	.word	0xdc3a03fd
 8015924:	3feec709 	.word	0x3feec709
 8015928:	145b01f5 	.word	0x145b01f5
 801592c:	be3e2fe0 	.word	0xbe3e2fe0
 8015930:	00000000 	.word	0x00000000
 8015934:	3ff00000 	.word	0x3ff00000
 8015938:	7ff00000 	.word	0x7ff00000
 801593c:	43400000 	.word	0x43400000
 8015940:	0003988e 	.word	0x0003988e
 8015944:	000bb679 	.word	0x000bb679
 8015948:	08016a10 	.word	0x08016a10
 801594c:	3ff00000 	.word	0x3ff00000
 8015950:	40080000 	.word	0x40080000
 8015954:	08016a30 	.word	0x08016a30
 8015958:	08016a20 	.word	0x08016a20
 801595c:	a3b5      	add	r3, pc, #724	; (adr r3, 8015c34 <__ieee754_pow+0xa3c>)
 801595e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015962:	4640      	mov	r0, r8
 8015964:	4649      	mov	r1, r9
 8015966:	f7ea fc99 	bl	800029c <__adddf3>
 801596a:	4622      	mov	r2, r4
 801596c:	ec41 0b1a 	vmov	d10, r0, r1
 8015970:	462b      	mov	r3, r5
 8015972:	4630      	mov	r0, r6
 8015974:	4639      	mov	r1, r7
 8015976:	f7ea fc8f 	bl	8000298 <__aeabi_dsub>
 801597a:	4602      	mov	r2, r0
 801597c:	460b      	mov	r3, r1
 801597e:	ec51 0b1a 	vmov	r0, r1, d10
 8015982:	f7eb f8d1 	bl	8000b28 <__aeabi_dcmpgt>
 8015986:	2800      	cmp	r0, #0
 8015988:	f47f adf8 	bne.w	801557c <__ieee754_pow+0x384>
 801598c:	4aa4      	ldr	r2, [pc, #656]	; (8015c20 <__ieee754_pow+0xa28>)
 801598e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015992:	4293      	cmp	r3, r2
 8015994:	f340 810b 	ble.w	8015bae <__ieee754_pow+0x9b6>
 8015998:	151b      	asrs	r3, r3, #20
 801599a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801599e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80159a2:	fa4a f303 	asr.w	r3, sl, r3
 80159a6:	445b      	add	r3, fp
 80159a8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80159ac:	4e9d      	ldr	r6, [pc, #628]	; (8015c24 <__ieee754_pow+0xa2c>)
 80159ae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80159b2:	4116      	asrs	r6, r2
 80159b4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80159b8:	2000      	movs	r0, #0
 80159ba:	ea23 0106 	bic.w	r1, r3, r6
 80159be:	f1c2 0214 	rsb	r2, r2, #20
 80159c2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80159c6:	fa4a fa02 	asr.w	sl, sl, r2
 80159ca:	f1bb 0f00 	cmp.w	fp, #0
 80159ce:	4602      	mov	r2, r0
 80159d0:	460b      	mov	r3, r1
 80159d2:	4620      	mov	r0, r4
 80159d4:	4629      	mov	r1, r5
 80159d6:	bfb8      	it	lt
 80159d8:	f1ca 0a00 	rsblt	sl, sl, #0
 80159dc:	f7ea fc5c 	bl	8000298 <__aeabi_dsub>
 80159e0:	ec41 0b19 	vmov	d9, r0, r1
 80159e4:	4642      	mov	r2, r8
 80159e6:	464b      	mov	r3, r9
 80159e8:	ec51 0b19 	vmov	r0, r1, d9
 80159ec:	f7ea fc56 	bl	800029c <__adddf3>
 80159f0:	2400      	movs	r4, #0
 80159f2:	a379      	add	r3, pc, #484	; (adr r3, 8015bd8 <__ieee754_pow+0x9e0>)
 80159f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159f8:	4620      	mov	r0, r4
 80159fa:	460d      	mov	r5, r1
 80159fc:	f7ea fe04 	bl	8000608 <__aeabi_dmul>
 8015a00:	ec53 2b19 	vmov	r2, r3, d9
 8015a04:	4606      	mov	r6, r0
 8015a06:	460f      	mov	r7, r1
 8015a08:	4620      	mov	r0, r4
 8015a0a:	4629      	mov	r1, r5
 8015a0c:	f7ea fc44 	bl	8000298 <__aeabi_dsub>
 8015a10:	4602      	mov	r2, r0
 8015a12:	460b      	mov	r3, r1
 8015a14:	4640      	mov	r0, r8
 8015a16:	4649      	mov	r1, r9
 8015a18:	f7ea fc3e 	bl	8000298 <__aeabi_dsub>
 8015a1c:	a370      	add	r3, pc, #448	; (adr r3, 8015be0 <__ieee754_pow+0x9e8>)
 8015a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a22:	f7ea fdf1 	bl	8000608 <__aeabi_dmul>
 8015a26:	a370      	add	r3, pc, #448	; (adr r3, 8015be8 <__ieee754_pow+0x9f0>)
 8015a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a2c:	4680      	mov	r8, r0
 8015a2e:	4689      	mov	r9, r1
 8015a30:	4620      	mov	r0, r4
 8015a32:	4629      	mov	r1, r5
 8015a34:	f7ea fde8 	bl	8000608 <__aeabi_dmul>
 8015a38:	4602      	mov	r2, r0
 8015a3a:	460b      	mov	r3, r1
 8015a3c:	4640      	mov	r0, r8
 8015a3e:	4649      	mov	r1, r9
 8015a40:	f7ea fc2c 	bl	800029c <__adddf3>
 8015a44:	4604      	mov	r4, r0
 8015a46:	460d      	mov	r5, r1
 8015a48:	4602      	mov	r2, r0
 8015a4a:	460b      	mov	r3, r1
 8015a4c:	4630      	mov	r0, r6
 8015a4e:	4639      	mov	r1, r7
 8015a50:	f7ea fc24 	bl	800029c <__adddf3>
 8015a54:	4632      	mov	r2, r6
 8015a56:	463b      	mov	r3, r7
 8015a58:	4680      	mov	r8, r0
 8015a5a:	4689      	mov	r9, r1
 8015a5c:	f7ea fc1c 	bl	8000298 <__aeabi_dsub>
 8015a60:	4602      	mov	r2, r0
 8015a62:	460b      	mov	r3, r1
 8015a64:	4620      	mov	r0, r4
 8015a66:	4629      	mov	r1, r5
 8015a68:	f7ea fc16 	bl	8000298 <__aeabi_dsub>
 8015a6c:	4642      	mov	r2, r8
 8015a6e:	4606      	mov	r6, r0
 8015a70:	460f      	mov	r7, r1
 8015a72:	464b      	mov	r3, r9
 8015a74:	4640      	mov	r0, r8
 8015a76:	4649      	mov	r1, r9
 8015a78:	f7ea fdc6 	bl	8000608 <__aeabi_dmul>
 8015a7c:	a35c      	add	r3, pc, #368	; (adr r3, 8015bf0 <__ieee754_pow+0x9f8>)
 8015a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a82:	4604      	mov	r4, r0
 8015a84:	460d      	mov	r5, r1
 8015a86:	f7ea fdbf 	bl	8000608 <__aeabi_dmul>
 8015a8a:	a35b      	add	r3, pc, #364	; (adr r3, 8015bf8 <__ieee754_pow+0xa00>)
 8015a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a90:	f7ea fc02 	bl	8000298 <__aeabi_dsub>
 8015a94:	4622      	mov	r2, r4
 8015a96:	462b      	mov	r3, r5
 8015a98:	f7ea fdb6 	bl	8000608 <__aeabi_dmul>
 8015a9c:	a358      	add	r3, pc, #352	; (adr r3, 8015c00 <__ieee754_pow+0xa08>)
 8015a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aa2:	f7ea fbfb 	bl	800029c <__adddf3>
 8015aa6:	4622      	mov	r2, r4
 8015aa8:	462b      	mov	r3, r5
 8015aaa:	f7ea fdad 	bl	8000608 <__aeabi_dmul>
 8015aae:	a356      	add	r3, pc, #344	; (adr r3, 8015c08 <__ieee754_pow+0xa10>)
 8015ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ab4:	f7ea fbf0 	bl	8000298 <__aeabi_dsub>
 8015ab8:	4622      	mov	r2, r4
 8015aba:	462b      	mov	r3, r5
 8015abc:	f7ea fda4 	bl	8000608 <__aeabi_dmul>
 8015ac0:	a353      	add	r3, pc, #332	; (adr r3, 8015c10 <__ieee754_pow+0xa18>)
 8015ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ac6:	f7ea fbe9 	bl	800029c <__adddf3>
 8015aca:	4622      	mov	r2, r4
 8015acc:	462b      	mov	r3, r5
 8015ace:	f7ea fd9b 	bl	8000608 <__aeabi_dmul>
 8015ad2:	4602      	mov	r2, r0
 8015ad4:	460b      	mov	r3, r1
 8015ad6:	4640      	mov	r0, r8
 8015ad8:	4649      	mov	r1, r9
 8015ada:	f7ea fbdd 	bl	8000298 <__aeabi_dsub>
 8015ade:	4604      	mov	r4, r0
 8015ae0:	460d      	mov	r5, r1
 8015ae2:	4602      	mov	r2, r0
 8015ae4:	460b      	mov	r3, r1
 8015ae6:	4640      	mov	r0, r8
 8015ae8:	4649      	mov	r1, r9
 8015aea:	f7ea fd8d 	bl	8000608 <__aeabi_dmul>
 8015aee:	2200      	movs	r2, #0
 8015af0:	ec41 0b19 	vmov	d9, r0, r1
 8015af4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015af8:	4620      	mov	r0, r4
 8015afa:	4629      	mov	r1, r5
 8015afc:	f7ea fbcc 	bl	8000298 <__aeabi_dsub>
 8015b00:	4602      	mov	r2, r0
 8015b02:	460b      	mov	r3, r1
 8015b04:	ec51 0b19 	vmov	r0, r1, d9
 8015b08:	f7ea fea8 	bl	800085c <__aeabi_ddiv>
 8015b0c:	4632      	mov	r2, r6
 8015b0e:	4604      	mov	r4, r0
 8015b10:	460d      	mov	r5, r1
 8015b12:	463b      	mov	r3, r7
 8015b14:	4640      	mov	r0, r8
 8015b16:	4649      	mov	r1, r9
 8015b18:	f7ea fd76 	bl	8000608 <__aeabi_dmul>
 8015b1c:	4632      	mov	r2, r6
 8015b1e:	463b      	mov	r3, r7
 8015b20:	f7ea fbbc 	bl	800029c <__adddf3>
 8015b24:	4602      	mov	r2, r0
 8015b26:	460b      	mov	r3, r1
 8015b28:	4620      	mov	r0, r4
 8015b2a:	4629      	mov	r1, r5
 8015b2c:	f7ea fbb4 	bl	8000298 <__aeabi_dsub>
 8015b30:	4642      	mov	r2, r8
 8015b32:	464b      	mov	r3, r9
 8015b34:	f7ea fbb0 	bl	8000298 <__aeabi_dsub>
 8015b38:	460b      	mov	r3, r1
 8015b3a:	4602      	mov	r2, r0
 8015b3c:	493a      	ldr	r1, [pc, #232]	; (8015c28 <__ieee754_pow+0xa30>)
 8015b3e:	2000      	movs	r0, #0
 8015b40:	f7ea fbaa 	bl	8000298 <__aeabi_dsub>
 8015b44:	e9cd 0100 	strd	r0, r1, [sp]
 8015b48:	9b01      	ldr	r3, [sp, #4]
 8015b4a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8015b4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015b52:	da2f      	bge.n	8015bb4 <__ieee754_pow+0x9bc>
 8015b54:	4650      	mov	r0, sl
 8015b56:	ed9d 0b00 	vldr	d0, [sp]
 8015b5a:	f000 f9c1 	bl	8015ee0 <scalbn>
 8015b5e:	ec51 0b10 	vmov	r0, r1, d0
 8015b62:	ec53 2b18 	vmov	r2, r3, d8
 8015b66:	f7ff bbe0 	b.w	801532a <__ieee754_pow+0x132>
 8015b6a:	4b30      	ldr	r3, [pc, #192]	; (8015c2c <__ieee754_pow+0xa34>)
 8015b6c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8015b70:	429e      	cmp	r6, r3
 8015b72:	f77f af0b 	ble.w	801598c <__ieee754_pow+0x794>
 8015b76:	4b2e      	ldr	r3, [pc, #184]	; (8015c30 <__ieee754_pow+0xa38>)
 8015b78:	440b      	add	r3, r1
 8015b7a:	4303      	orrs	r3, r0
 8015b7c:	d00b      	beq.n	8015b96 <__ieee754_pow+0x99e>
 8015b7e:	a326      	add	r3, pc, #152	; (adr r3, 8015c18 <__ieee754_pow+0xa20>)
 8015b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b84:	ec51 0b18 	vmov	r0, r1, d8
 8015b88:	f7ea fd3e 	bl	8000608 <__aeabi_dmul>
 8015b8c:	a322      	add	r3, pc, #136	; (adr r3, 8015c18 <__ieee754_pow+0xa20>)
 8015b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b92:	f7ff bbca 	b.w	801532a <__ieee754_pow+0x132>
 8015b96:	4622      	mov	r2, r4
 8015b98:	462b      	mov	r3, r5
 8015b9a:	f7ea fb7d 	bl	8000298 <__aeabi_dsub>
 8015b9e:	4642      	mov	r2, r8
 8015ba0:	464b      	mov	r3, r9
 8015ba2:	f7ea ffb7 	bl	8000b14 <__aeabi_dcmpge>
 8015ba6:	2800      	cmp	r0, #0
 8015ba8:	f43f aef0 	beq.w	801598c <__ieee754_pow+0x794>
 8015bac:	e7e7      	b.n	8015b7e <__ieee754_pow+0x986>
 8015bae:	f04f 0a00 	mov.w	sl, #0
 8015bb2:	e717      	b.n	80159e4 <__ieee754_pow+0x7ec>
 8015bb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015bb8:	4619      	mov	r1, r3
 8015bba:	e7d2      	b.n	8015b62 <__ieee754_pow+0x96a>
 8015bbc:	491a      	ldr	r1, [pc, #104]	; (8015c28 <__ieee754_pow+0xa30>)
 8015bbe:	2000      	movs	r0, #0
 8015bc0:	f7ff bb9e 	b.w	8015300 <__ieee754_pow+0x108>
 8015bc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015bc8:	f7ff bb9a 	b.w	8015300 <__ieee754_pow+0x108>
 8015bcc:	9000      	str	r0, [sp, #0]
 8015bce:	f7ff bb76 	b.w	80152be <__ieee754_pow+0xc6>
 8015bd2:	2100      	movs	r1, #0
 8015bd4:	f7ff bb60 	b.w	8015298 <__ieee754_pow+0xa0>
 8015bd8:	00000000 	.word	0x00000000
 8015bdc:	3fe62e43 	.word	0x3fe62e43
 8015be0:	fefa39ef 	.word	0xfefa39ef
 8015be4:	3fe62e42 	.word	0x3fe62e42
 8015be8:	0ca86c39 	.word	0x0ca86c39
 8015bec:	be205c61 	.word	0xbe205c61
 8015bf0:	72bea4d0 	.word	0x72bea4d0
 8015bf4:	3e663769 	.word	0x3e663769
 8015bf8:	c5d26bf1 	.word	0xc5d26bf1
 8015bfc:	3ebbbd41 	.word	0x3ebbbd41
 8015c00:	af25de2c 	.word	0xaf25de2c
 8015c04:	3f11566a 	.word	0x3f11566a
 8015c08:	16bebd93 	.word	0x16bebd93
 8015c0c:	3f66c16c 	.word	0x3f66c16c
 8015c10:	5555553e 	.word	0x5555553e
 8015c14:	3fc55555 	.word	0x3fc55555
 8015c18:	c2f8f359 	.word	0xc2f8f359
 8015c1c:	01a56e1f 	.word	0x01a56e1f
 8015c20:	3fe00000 	.word	0x3fe00000
 8015c24:	000fffff 	.word	0x000fffff
 8015c28:	3ff00000 	.word	0x3ff00000
 8015c2c:	4090cbff 	.word	0x4090cbff
 8015c30:	3f6f3400 	.word	0x3f6f3400
 8015c34:	652b82fe 	.word	0x652b82fe
 8015c38:	3c971547 	.word	0x3c971547

08015c3c <__ieee754_sqrt>:
 8015c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c40:	ec55 4b10 	vmov	r4, r5, d0
 8015c44:	4e56      	ldr	r6, [pc, #344]	; (8015da0 <__ieee754_sqrt+0x164>)
 8015c46:	43ae      	bics	r6, r5
 8015c48:	ee10 0a10 	vmov	r0, s0
 8015c4c:	ee10 3a10 	vmov	r3, s0
 8015c50:	4629      	mov	r1, r5
 8015c52:	462a      	mov	r2, r5
 8015c54:	d110      	bne.n	8015c78 <__ieee754_sqrt+0x3c>
 8015c56:	ee10 2a10 	vmov	r2, s0
 8015c5a:	462b      	mov	r3, r5
 8015c5c:	f7ea fcd4 	bl	8000608 <__aeabi_dmul>
 8015c60:	4602      	mov	r2, r0
 8015c62:	460b      	mov	r3, r1
 8015c64:	4620      	mov	r0, r4
 8015c66:	4629      	mov	r1, r5
 8015c68:	f7ea fb18 	bl	800029c <__adddf3>
 8015c6c:	4604      	mov	r4, r0
 8015c6e:	460d      	mov	r5, r1
 8015c70:	ec45 4b10 	vmov	d0, r4, r5
 8015c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c78:	2d00      	cmp	r5, #0
 8015c7a:	dc10      	bgt.n	8015c9e <__ieee754_sqrt+0x62>
 8015c7c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015c80:	4330      	orrs	r0, r6
 8015c82:	d0f5      	beq.n	8015c70 <__ieee754_sqrt+0x34>
 8015c84:	b15d      	cbz	r5, 8015c9e <__ieee754_sqrt+0x62>
 8015c86:	ee10 2a10 	vmov	r2, s0
 8015c8a:	462b      	mov	r3, r5
 8015c8c:	ee10 0a10 	vmov	r0, s0
 8015c90:	f7ea fb02 	bl	8000298 <__aeabi_dsub>
 8015c94:	4602      	mov	r2, r0
 8015c96:	460b      	mov	r3, r1
 8015c98:	f7ea fde0 	bl	800085c <__aeabi_ddiv>
 8015c9c:	e7e6      	b.n	8015c6c <__ieee754_sqrt+0x30>
 8015c9e:	1509      	asrs	r1, r1, #20
 8015ca0:	d076      	beq.n	8015d90 <__ieee754_sqrt+0x154>
 8015ca2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8015ca6:	07ce      	lsls	r6, r1, #31
 8015ca8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8015cac:	bf5e      	ittt	pl
 8015cae:	0fda      	lsrpl	r2, r3, #31
 8015cb0:	005b      	lslpl	r3, r3, #1
 8015cb2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8015cb6:	0fda      	lsrs	r2, r3, #31
 8015cb8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8015cbc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8015cc0:	2000      	movs	r0, #0
 8015cc2:	106d      	asrs	r5, r5, #1
 8015cc4:	005b      	lsls	r3, r3, #1
 8015cc6:	f04f 0e16 	mov.w	lr, #22
 8015cca:	4684      	mov	ip, r0
 8015ccc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015cd0:	eb0c 0401 	add.w	r4, ip, r1
 8015cd4:	4294      	cmp	r4, r2
 8015cd6:	bfde      	ittt	le
 8015cd8:	1b12      	suble	r2, r2, r4
 8015cda:	eb04 0c01 	addle.w	ip, r4, r1
 8015cde:	1840      	addle	r0, r0, r1
 8015ce0:	0052      	lsls	r2, r2, #1
 8015ce2:	f1be 0e01 	subs.w	lr, lr, #1
 8015ce6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8015cea:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8015cee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015cf2:	d1ed      	bne.n	8015cd0 <__ieee754_sqrt+0x94>
 8015cf4:	4671      	mov	r1, lr
 8015cf6:	2720      	movs	r7, #32
 8015cf8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8015cfc:	4562      	cmp	r2, ip
 8015cfe:	eb04 060e 	add.w	r6, r4, lr
 8015d02:	dc02      	bgt.n	8015d0a <__ieee754_sqrt+0xce>
 8015d04:	d113      	bne.n	8015d2e <__ieee754_sqrt+0xf2>
 8015d06:	429e      	cmp	r6, r3
 8015d08:	d811      	bhi.n	8015d2e <__ieee754_sqrt+0xf2>
 8015d0a:	2e00      	cmp	r6, #0
 8015d0c:	eb06 0e04 	add.w	lr, r6, r4
 8015d10:	da43      	bge.n	8015d9a <__ieee754_sqrt+0x15e>
 8015d12:	f1be 0f00 	cmp.w	lr, #0
 8015d16:	db40      	blt.n	8015d9a <__ieee754_sqrt+0x15e>
 8015d18:	f10c 0801 	add.w	r8, ip, #1
 8015d1c:	eba2 020c 	sub.w	r2, r2, ip
 8015d20:	429e      	cmp	r6, r3
 8015d22:	bf88      	it	hi
 8015d24:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8015d28:	1b9b      	subs	r3, r3, r6
 8015d2a:	4421      	add	r1, r4
 8015d2c:	46c4      	mov	ip, r8
 8015d2e:	0052      	lsls	r2, r2, #1
 8015d30:	3f01      	subs	r7, #1
 8015d32:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8015d36:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8015d3a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015d3e:	d1dd      	bne.n	8015cfc <__ieee754_sqrt+0xc0>
 8015d40:	4313      	orrs	r3, r2
 8015d42:	d006      	beq.n	8015d52 <__ieee754_sqrt+0x116>
 8015d44:	1c4c      	adds	r4, r1, #1
 8015d46:	bf13      	iteet	ne
 8015d48:	3101      	addne	r1, #1
 8015d4a:	3001      	addeq	r0, #1
 8015d4c:	4639      	moveq	r1, r7
 8015d4e:	f021 0101 	bicne.w	r1, r1, #1
 8015d52:	1043      	asrs	r3, r0, #1
 8015d54:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8015d58:	0849      	lsrs	r1, r1, #1
 8015d5a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8015d5e:	07c2      	lsls	r2, r0, #31
 8015d60:	bf48      	it	mi
 8015d62:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8015d66:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8015d6a:	460c      	mov	r4, r1
 8015d6c:	463d      	mov	r5, r7
 8015d6e:	e77f      	b.n	8015c70 <__ieee754_sqrt+0x34>
 8015d70:	0ada      	lsrs	r2, r3, #11
 8015d72:	3815      	subs	r0, #21
 8015d74:	055b      	lsls	r3, r3, #21
 8015d76:	2a00      	cmp	r2, #0
 8015d78:	d0fa      	beq.n	8015d70 <__ieee754_sqrt+0x134>
 8015d7a:	02d7      	lsls	r7, r2, #11
 8015d7c:	d50a      	bpl.n	8015d94 <__ieee754_sqrt+0x158>
 8015d7e:	f1c1 0420 	rsb	r4, r1, #32
 8015d82:	fa23 f404 	lsr.w	r4, r3, r4
 8015d86:	1e4d      	subs	r5, r1, #1
 8015d88:	408b      	lsls	r3, r1
 8015d8a:	4322      	orrs	r2, r4
 8015d8c:	1b41      	subs	r1, r0, r5
 8015d8e:	e788      	b.n	8015ca2 <__ieee754_sqrt+0x66>
 8015d90:	4608      	mov	r0, r1
 8015d92:	e7f0      	b.n	8015d76 <__ieee754_sqrt+0x13a>
 8015d94:	0052      	lsls	r2, r2, #1
 8015d96:	3101      	adds	r1, #1
 8015d98:	e7ef      	b.n	8015d7a <__ieee754_sqrt+0x13e>
 8015d9a:	46e0      	mov	r8, ip
 8015d9c:	e7be      	b.n	8015d1c <__ieee754_sqrt+0xe0>
 8015d9e:	bf00      	nop
 8015da0:	7ff00000 	.word	0x7ff00000

08015da4 <fabs>:
 8015da4:	ec51 0b10 	vmov	r0, r1, d0
 8015da8:	ee10 2a10 	vmov	r2, s0
 8015dac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015db0:	ec43 2b10 	vmov	d0, r2, r3
 8015db4:	4770      	bx	lr

08015db6 <finite>:
 8015db6:	b082      	sub	sp, #8
 8015db8:	ed8d 0b00 	vstr	d0, [sp]
 8015dbc:	9801      	ldr	r0, [sp, #4]
 8015dbe:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8015dc2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8015dc6:	0fc0      	lsrs	r0, r0, #31
 8015dc8:	b002      	add	sp, #8
 8015dca:	4770      	bx	lr

08015dcc <rint>:
 8015dcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015dce:	ec51 0b10 	vmov	r0, r1, d0
 8015dd2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015dd6:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8015dda:	2e13      	cmp	r6, #19
 8015ddc:	ee10 4a10 	vmov	r4, s0
 8015de0:	460b      	mov	r3, r1
 8015de2:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8015de6:	dc58      	bgt.n	8015e9a <rint+0xce>
 8015de8:	2e00      	cmp	r6, #0
 8015dea:	da2b      	bge.n	8015e44 <rint+0x78>
 8015dec:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8015df0:	4302      	orrs	r2, r0
 8015df2:	d023      	beq.n	8015e3c <rint+0x70>
 8015df4:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8015df8:	4302      	orrs	r2, r0
 8015dfa:	4254      	negs	r4, r2
 8015dfc:	4314      	orrs	r4, r2
 8015dfe:	0c4b      	lsrs	r3, r1, #17
 8015e00:	0b24      	lsrs	r4, r4, #12
 8015e02:	045b      	lsls	r3, r3, #17
 8015e04:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8015e08:	ea44 0103 	orr.w	r1, r4, r3
 8015e0c:	4b32      	ldr	r3, [pc, #200]	; (8015ed8 <rint+0x10c>)
 8015e0e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8015e12:	e9d3 6700 	ldrd	r6, r7, [r3]
 8015e16:	4602      	mov	r2, r0
 8015e18:	460b      	mov	r3, r1
 8015e1a:	4630      	mov	r0, r6
 8015e1c:	4639      	mov	r1, r7
 8015e1e:	f7ea fa3d 	bl	800029c <__adddf3>
 8015e22:	e9cd 0100 	strd	r0, r1, [sp]
 8015e26:	463b      	mov	r3, r7
 8015e28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015e2c:	4632      	mov	r2, r6
 8015e2e:	f7ea fa33 	bl	8000298 <__aeabi_dsub>
 8015e32:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015e36:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8015e3a:	4639      	mov	r1, r7
 8015e3c:	ec41 0b10 	vmov	d0, r0, r1
 8015e40:	b003      	add	sp, #12
 8015e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e44:	4a25      	ldr	r2, [pc, #148]	; (8015edc <rint+0x110>)
 8015e46:	4132      	asrs	r2, r6
 8015e48:	ea01 0702 	and.w	r7, r1, r2
 8015e4c:	4307      	orrs	r7, r0
 8015e4e:	d0f5      	beq.n	8015e3c <rint+0x70>
 8015e50:	0851      	lsrs	r1, r2, #1
 8015e52:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8015e56:	4314      	orrs	r4, r2
 8015e58:	d00c      	beq.n	8015e74 <rint+0xa8>
 8015e5a:	ea23 0201 	bic.w	r2, r3, r1
 8015e5e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8015e62:	2e13      	cmp	r6, #19
 8015e64:	fa43 f606 	asr.w	r6, r3, r6
 8015e68:	bf0c      	ite	eq
 8015e6a:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8015e6e:	2400      	movne	r4, #0
 8015e70:	ea42 0306 	orr.w	r3, r2, r6
 8015e74:	4918      	ldr	r1, [pc, #96]	; (8015ed8 <rint+0x10c>)
 8015e76:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8015e7a:	4622      	mov	r2, r4
 8015e7c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015e80:	4620      	mov	r0, r4
 8015e82:	4629      	mov	r1, r5
 8015e84:	f7ea fa0a 	bl	800029c <__adddf3>
 8015e88:	e9cd 0100 	strd	r0, r1, [sp]
 8015e8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015e90:	4622      	mov	r2, r4
 8015e92:	462b      	mov	r3, r5
 8015e94:	f7ea fa00 	bl	8000298 <__aeabi_dsub>
 8015e98:	e7d0      	b.n	8015e3c <rint+0x70>
 8015e9a:	2e33      	cmp	r6, #51	; 0x33
 8015e9c:	dd07      	ble.n	8015eae <rint+0xe2>
 8015e9e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015ea2:	d1cb      	bne.n	8015e3c <rint+0x70>
 8015ea4:	ee10 2a10 	vmov	r2, s0
 8015ea8:	f7ea f9f8 	bl	800029c <__adddf3>
 8015eac:	e7c6      	b.n	8015e3c <rint+0x70>
 8015eae:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8015eb2:	f04f 36ff 	mov.w	r6, #4294967295
 8015eb6:	40d6      	lsrs	r6, r2
 8015eb8:	4230      	tst	r0, r6
 8015eba:	d0bf      	beq.n	8015e3c <rint+0x70>
 8015ebc:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8015ec0:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8015ec4:	bf1f      	itttt	ne
 8015ec6:	ea24 0101 	bicne.w	r1, r4, r1
 8015eca:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8015ece:	fa44 f202 	asrne.w	r2, r4, r2
 8015ed2:	ea41 0402 	orrne.w	r4, r1, r2
 8015ed6:	e7cd      	b.n	8015e74 <rint+0xa8>
 8015ed8:	08016a40 	.word	0x08016a40
 8015edc:	000fffff 	.word	0x000fffff

08015ee0 <scalbn>:
 8015ee0:	b570      	push	{r4, r5, r6, lr}
 8015ee2:	ec55 4b10 	vmov	r4, r5, d0
 8015ee6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8015eea:	4606      	mov	r6, r0
 8015eec:	462b      	mov	r3, r5
 8015eee:	b99a      	cbnz	r2, 8015f18 <scalbn+0x38>
 8015ef0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015ef4:	4323      	orrs	r3, r4
 8015ef6:	d036      	beq.n	8015f66 <scalbn+0x86>
 8015ef8:	4b39      	ldr	r3, [pc, #228]	; (8015fe0 <scalbn+0x100>)
 8015efa:	4629      	mov	r1, r5
 8015efc:	ee10 0a10 	vmov	r0, s0
 8015f00:	2200      	movs	r2, #0
 8015f02:	f7ea fb81 	bl	8000608 <__aeabi_dmul>
 8015f06:	4b37      	ldr	r3, [pc, #220]	; (8015fe4 <scalbn+0x104>)
 8015f08:	429e      	cmp	r6, r3
 8015f0a:	4604      	mov	r4, r0
 8015f0c:	460d      	mov	r5, r1
 8015f0e:	da10      	bge.n	8015f32 <scalbn+0x52>
 8015f10:	a32b      	add	r3, pc, #172	; (adr r3, 8015fc0 <scalbn+0xe0>)
 8015f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f16:	e03a      	b.n	8015f8e <scalbn+0xae>
 8015f18:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015f1c:	428a      	cmp	r2, r1
 8015f1e:	d10c      	bne.n	8015f3a <scalbn+0x5a>
 8015f20:	ee10 2a10 	vmov	r2, s0
 8015f24:	4620      	mov	r0, r4
 8015f26:	4629      	mov	r1, r5
 8015f28:	f7ea f9b8 	bl	800029c <__adddf3>
 8015f2c:	4604      	mov	r4, r0
 8015f2e:	460d      	mov	r5, r1
 8015f30:	e019      	b.n	8015f66 <scalbn+0x86>
 8015f32:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015f36:	460b      	mov	r3, r1
 8015f38:	3a36      	subs	r2, #54	; 0x36
 8015f3a:	4432      	add	r2, r6
 8015f3c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8015f40:	428a      	cmp	r2, r1
 8015f42:	dd08      	ble.n	8015f56 <scalbn+0x76>
 8015f44:	2d00      	cmp	r5, #0
 8015f46:	a120      	add	r1, pc, #128	; (adr r1, 8015fc8 <scalbn+0xe8>)
 8015f48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015f4c:	da1c      	bge.n	8015f88 <scalbn+0xa8>
 8015f4e:	a120      	add	r1, pc, #128	; (adr r1, 8015fd0 <scalbn+0xf0>)
 8015f50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015f54:	e018      	b.n	8015f88 <scalbn+0xa8>
 8015f56:	2a00      	cmp	r2, #0
 8015f58:	dd08      	ble.n	8015f6c <scalbn+0x8c>
 8015f5a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015f5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015f62:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015f66:	ec45 4b10 	vmov	d0, r4, r5
 8015f6a:	bd70      	pop	{r4, r5, r6, pc}
 8015f6c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8015f70:	da19      	bge.n	8015fa6 <scalbn+0xc6>
 8015f72:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015f76:	429e      	cmp	r6, r3
 8015f78:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8015f7c:	dd0a      	ble.n	8015f94 <scalbn+0xb4>
 8015f7e:	a112      	add	r1, pc, #72	; (adr r1, 8015fc8 <scalbn+0xe8>)
 8015f80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d1e2      	bne.n	8015f4e <scalbn+0x6e>
 8015f88:	a30f      	add	r3, pc, #60	; (adr r3, 8015fc8 <scalbn+0xe8>)
 8015f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f8e:	f7ea fb3b 	bl	8000608 <__aeabi_dmul>
 8015f92:	e7cb      	b.n	8015f2c <scalbn+0x4c>
 8015f94:	a10a      	add	r1, pc, #40	; (adr r1, 8015fc0 <scalbn+0xe0>)
 8015f96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d0b8      	beq.n	8015f10 <scalbn+0x30>
 8015f9e:	a10e      	add	r1, pc, #56	; (adr r1, 8015fd8 <scalbn+0xf8>)
 8015fa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015fa4:	e7b4      	b.n	8015f10 <scalbn+0x30>
 8015fa6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015faa:	3236      	adds	r2, #54	; 0x36
 8015fac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015fb0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8015fb4:	4620      	mov	r0, r4
 8015fb6:	4b0c      	ldr	r3, [pc, #48]	; (8015fe8 <scalbn+0x108>)
 8015fb8:	2200      	movs	r2, #0
 8015fba:	e7e8      	b.n	8015f8e <scalbn+0xae>
 8015fbc:	f3af 8000 	nop.w
 8015fc0:	c2f8f359 	.word	0xc2f8f359
 8015fc4:	01a56e1f 	.word	0x01a56e1f
 8015fc8:	8800759c 	.word	0x8800759c
 8015fcc:	7e37e43c 	.word	0x7e37e43c
 8015fd0:	8800759c 	.word	0x8800759c
 8015fd4:	fe37e43c 	.word	0xfe37e43c
 8015fd8:	c2f8f359 	.word	0xc2f8f359
 8015fdc:	81a56e1f 	.word	0x81a56e1f
 8015fe0:	43500000 	.word	0x43500000
 8015fe4:	ffff3cb0 	.word	0xffff3cb0
 8015fe8:	3c900000 	.word	0x3c900000

08015fec <_init>:
 8015fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fee:	bf00      	nop
 8015ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015ff2:	bc08      	pop	{r3}
 8015ff4:	469e      	mov	lr, r3
 8015ff6:	4770      	bx	lr

08015ff8 <_fini>:
 8015ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ffa:	bf00      	nop
 8015ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015ffe:	bc08      	pop	{r3}
 8016000:	469e      	mov	lr, r3
 8016002:	4770      	bx	lr
