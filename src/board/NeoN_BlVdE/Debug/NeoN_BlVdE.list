
NeoN_BlVdE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017a14  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ab0  08017bb8  08017bb8  00027bb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018668  08018668  00030234  2**0
                  CONTENTS
  4 .ARM          00000008  08018668  08018668  00028668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018670  08018670  00030234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018670  08018670  00028670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018674  08018674  00028674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  08018678  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049c0  20000238  080188ac  00030238  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004bf8  080188ac  00034bf8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003ca5e  00000000  00000000  00030264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006053  00000000  00000000  0006ccc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027b0  00000000  00000000  00072d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002660  00000000  00000000  000754c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020988  00000000  00000000  00077b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e082  00000000  00000000  000984b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2f4f  00000000  00000000  000c6532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00179481  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c180  00000000  00000000  001794d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000238 	.word	0x20000238
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08017b9c 	.word	0x08017b9c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000023c 	.word	0x2000023c
 80001dc:	08017b9c 	.word	0x08017b9c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <_write>:
	}
	return crc;
}

int _write (int file, char *ptr, int len)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY); return 0;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	b29a      	uxth	r2, r3
 800102c:	f04f 33ff 	mov.w	r3, #4294967295
 8001030:	68b9      	ldr	r1, [r7, #8]
 8001032:	4804      	ldr	r0, [pc, #16]	; (8001044 <_write+0x28>)
 8001034:	f00a f861 	bl	800b0fa <HAL_UART_Transmit>
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200029fc 	.word	0x200029fc

08001048 <super_smart_write>:
int super_smart_write(unsigned char *buf, unsigned short len, int8_t * state_sd_from_m)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	460b      	mov	r3, r1
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	817b      	strh	r3, [r7, #10]
		static FATFS fileSystem; // переменная типа FATFS
		static FIL testFile; // хендлер файла
		static UINT bw;
		static FRESULT res;
		static int8_t state_sd = 0;
		const char * path = "testFile.bin"; // название файла
 8001056:	4b4d      	ldr	r3, [pc, #308]	; (800118c <super_smart_write+0x144>)
 8001058:	617b      	str	r3, [r7, #20]

		if(state_sd == 0)
 800105a:	4b4d      	ldr	r3, [pc, #308]	; (8001190 <super_smart_write+0x148>)
 800105c:	f993 3000 	ldrsb.w	r3, [r3]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d12a      	bne.n	80010ba <super_smart_write+0x72>
		{
			extern Disk_drvTypeDef  disk;
			disk.is_initialized[0] = 0;
 8001064:	4b4b      	ldr	r3, [pc, #300]	; (8001194 <super_smart_write+0x14c>)
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]
			memset(&fileSystem, 0x00, sizeof(fileSystem));
 800106a:	f241 0238 	movw	r2, #4152	; 0x1038
 800106e:	2100      	movs	r1, #0
 8001070:	4849      	ldr	r0, [pc, #292]	; (8001198 <super_smart_write+0x150>)
 8001072:	f010 fded 	bl	8011c50 <memset>
			res = f_mount(&fileSystem, "0", 1);
 8001076:	2201      	movs	r2, #1
 8001078:	4948      	ldr	r1, [pc, #288]	; (800119c <super_smart_write+0x154>)
 800107a:	4847      	ldr	r0, [pc, #284]	; (8001198 <super_smart_write+0x150>)
 800107c:	f00d fb94 	bl	800e7a8 <f_mount>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	4b46      	ldr	r3, [pc, #280]	; (80011a0 <super_smart_write+0x158>)
 8001086:	701a      	strb	r2, [r3, #0]
			if(res == FR_OK){state_sd = 1; *state_sd_from_m = state_sd;}
 8001088:	4b45      	ldr	r3, [pc, #276]	; (80011a0 <super_smart_write+0x158>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d108      	bne.n	80010a2 <super_smart_write+0x5a>
 8001090:	4b3f      	ldr	r3, [pc, #252]	; (8001190 <super_smart_write+0x148>)
 8001092:	2201      	movs	r2, #1
 8001094:	701a      	strb	r2, [r3, #0]
 8001096:	4b3e      	ldr	r3, [pc, #248]	; (8001190 <super_smart_write+0x148>)
 8001098:	f993 2000 	ldrsb.w	r2, [r3]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	701a      	strb	r2, [r3, #0]
 80010a0:	e00b      	b.n	80010ba <super_smart_write+0x72>
			else
			{
				res = f_mount(0, "0", 1);
 80010a2:	2201      	movs	r2, #1
 80010a4:	493d      	ldr	r1, [pc, #244]	; (800119c <super_smart_write+0x154>)
 80010a6:	2000      	movs	r0, #0
 80010a8:	f00d fb7e 	bl	800e7a8 <f_mount>
 80010ac:	4603      	mov	r3, r0
 80010ae:	461a      	mov	r2, r3
 80010b0:	4b3b      	ldr	r3, [pc, #236]	; (80011a0 <super_smart_write+0x158>)
 80010b2:	701a      	strb	r2, [r3, #0]
				return -1;
 80010b4:	f04f 33ff 	mov.w	r3, #4294967295
 80010b8:	e064      	b.n	8001184 <super_smart_write+0x13c>
			}
		}
		if(state_sd == 1)
 80010ba:	4b35      	ldr	r3, [pc, #212]	; (8001190 <super_smart_write+0x148>)
 80010bc:	f993 3000 	ldrsb.w	r3, [r3]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d121      	bne.n	8001108 <super_smart_write+0xc0>
		{
			 *state_sd_from_m = state_sd;
 80010c4:	4b32      	ldr	r3, [pc, #200]	; (8001190 <super_smart_write+0x148>)
 80010c6:	f993 2000 	ldrsb.w	r2, [r3]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	701a      	strb	r2, [r3, #0]
			res = f_open(&testFile, path, FA_WRITE | FA_OPEN_APPEND);
 80010ce:	2232      	movs	r2, #50	; 0x32
 80010d0:	6979      	ldr	r1, [r7, #20]
 80010d2:	4834      	ldr	r0, [pc, #208]	; (80011a4 <super_smart_write+0x15c>)
 80010d4:	f00d fbae 	bl	800e834 <f_open>
 80010d8:	4603      	mov	r3, r0
 80010da:	461a      	mov	r2, r3
 80010dc:	4b30      	ldr	r3, [pc, #192]	; (80011a0 <super_smart_write+0x158>)
 80010de:	701a      	strb	r2, [r3, #0]
			if(res == FR_OK) state_sd = 2;
 80010e0:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <super_smart_write+0x158>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d103      	bne.n	80010f0 <super_smart_write+0xa8>
 80010e8:	4b29      	ldr	r3, [pc, #164]	; (8001190 <super_smart_write+0x148>)
 80010ea:	2202      	movs	r2, #2
 80010ec:	701a      	strb	r2, [r3, #0]
 80010ee:	e00b      	b.n	8001108 <super_smart_write+0xc0>
			else
			{
				state_sd = 0;
 80010f0:	4b27      	ldr	r3, [pc, #156]	; (8001190 <super_smart_write+0x148>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]
				res = f_mount(0, "0", 1);
 80010f6:	2201      	movs	r2, #1
 80010f8:	4928      	ldr	r1, [pc, #160]	; (800119c <super_smart_write+0x154>)
 80010fa:	2000      	movs	r0, #0
 80010fc:	f00d fb54 	bl	800e7a8 <f_mount>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <super_smart_write+0x158>)
 8001106:	701a      	strb	r2, [r3, #0]
			}
		}
		if (state_sd == 2)
 8001108:	4b21      	ldr	r3, [pc, #132]	; (8001190 <super_smart_write+0x148>)
 800110a:	f993 3000 	ldrsb.w	r3, [r3]
 800110e:	2b02      	cmp	r3, #2
 8001110:	d1a1      	bne.n	8001056 <super_smart_write+0xe>
		{
			 *state_sd_from_m = state_sd;
 8001112:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <super_smart_write+0x148>)
 8001114:	f993 2000 	ldrsb.w	r2, [r3]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	701a      	strb	r2, [r3, #0]
            res = f_write (&testFile,  (uint8_t *)buf, len, &bw);
 800111c:	897a      	ldrh	r2, [r7, #10]
 800111e:	4b22      	ldr	r3, [pc, #136]	; (80011a8 <super_smart_write+0x160>)
 8001120:	68f9      	ldr	r1, [r7, #12]
 8001122:	4820      	ldr	r0, [pc, #128]	; (80011a4 <super_smart_write+0x15c>)
 8001124:	f00d fd52 	bl	800ebcc <f_write>
 8001128:	4603      	mov	r3, r0
 800112a:	461a      	mov	r2, r3
 800112c:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <super_smart_write+0x158>)
 800112e:	701a      	strb	r2, [r3, #0]
            if (HAL_GetTick() - start_time >= 10)
 8001130:	f005 fa02 	bl	8006538 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <super_smart_write+0x164>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	2b09      	cmp	r3, #9
 800113e:	d90b      	bls.n	8001158 <super_smart_write+0x110>
            {
            	res = f_sync(&testFile);
 8001140:	4818      	ldr	r0, [pc, #96]	; (80011a4 <super_smart_write+0x15c>)
 8001142:	f00d fed7 	bl	800eef4 <f_sync>
 8001146:	4603      	mov	r3, r0
 8001148:	461a      	mov	r2, r3
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <super_smart_write+0x158>)
 800114c:	701a      	strb	r2, [r3, #0]
                start_time  = HAL_GetTick();
 800114e:	f005 f9f3 	bl	8006538 <HAL_GetTick>
 8001152:	4603      	mov	r3, r0
 8001154:	4a15      	ldr	r2, [pc, #84]	; (80011ac <super_smart_write+0x164>)
 8001156:	6013      	str	r3, [r2, #0]
            }
	        if (res == FR_OK) return 0;
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <super_smart_write+0x158>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d101      	bne.n	8001164 <super_smart_write+0x11c>
 8001160:	2300      	movs	r3, #0
 8001162:	e00f      	b.n	8001184 <super_smart_write+0x13c>
            if (res != FR_OK)
 8001164:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <super_smart_write+0x158>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	f43f af74 	beq.w	8001056 <super_smart_write+0xe>
            {
    			res = f_close(&testFile);
 800116e:	480d      	ldr	r0, [pc, #52]	; (80011a4 <super_smart_write+0x15c>)
 8001170:	f00d ff3e 	bl	800eff0 <f_close>
 8001174:	4603      	mov	r3, r0
 8001176:	461a      	mov	r2, r3
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <super_smart_write+0x158>)
 800117a:	701a      	strb	r2, [r3, #0]
            	state_sd = 1;
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <super_smart_write+0x148>)
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
	{
 8001182:	e768      	b.n	8001056 <super_smart_write+0xe>
            }
		}
	}
}
 8001184:	4618      	mov	r0, r3
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	08017bb8 	.word	0x08017bb8
 8001190:	20000254 	.word	0x20000254
 8001194:	20002348 	.word	0x20002348
 8001198:	20000258 	.word	0x20000258
 800119c:	08017bc8 	.word	0x08017bc8
 80011a0:	20001290 	.word	0x20001290
 80011a4:	20001294 	.word	0x20001294
 80011a8:	200022c4 	.word	0x200022c4
 80011ac:	200022c8 	.word	0x200022c8

080011b0 <app_main>:
	STATE_FOUND_ME_PLS
}state_t;


int app_main()
{
 80011b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011b4:	f5ad 7d21 	sub.w	sp, sp, #644	; 0x284
 80011b8:	af02      	add	r7, sp, #8
	float lux_sun = 0;
 80011ba:	f04f 0300 	mov.w	r3, #0
 80011be:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
	uint32_t start_time_io = HAL_GetTick();
 80011c2:	f005 f9b9 	bl	8006538 <HAL_GetTick>
 80011c6:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
	packet_ma_type_11_t packet_ma_type_11;
	packet_ma_type_12_t packet_ma_type_12 ;
 	packet_ma_type_2_t packet_ma_type_2 ;

	float quaternion[4] = {0};
 80011ca:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
	float seb_time_prev = 0;
 80011d8:	f04f 0300 	mov.w	r3, #0
 80011dc:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
	float seb_time = 0;
 80011e0:	f04f 0300 	mov.w	r3, #0
 80011e4:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    float altitude;
    int fix;
    int64_t cookie;

    photorezistor_t photorezist;
    photorezist.resist = 2000;
 80011e8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80011ec:	4a98      	ldr	r2, [pc, #608]	; (8001450 <app_main+0x2a0>)
 80011ee:	601a      	str	r2, [r3, #0]
    photorezist.hadc = 	&hadc1;
 80011f0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80011f4:	4a97      	ldr	r2, [pc, #604]	; (8001454 <app_main+0x2a4>)
 80011f6:	605a      	str	r2, [r3, #4]

	int16_t temp_lis;
	int16_t mag[3] = {0};
 80011f8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	809a      	strh	r2, [r3, #4]

	stmdev_ctx_t ctx = {0};
 8001202:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8001206:	461a      	mov	r2, r3
 8001208:	2300      	movs	r3, #0
 800120a:	6013      	str	r3, [r2, #0]
 800120c:	6053      	str	r3, [r2, #4]
 800120e:	6093      	str	r3, [r2, #8]
    struct lis_spi_intf lis_spi;
	lis_spi.GPIO_Port = GPIOA;
 8001210:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001214:	4a90      	ldr	r2, [pc, #576]	; (8001458 <app_main+0x2a8>)
 8001216:	601a      	str	r2, [r3, #0]
	lis_spi.GPIO_Pin = GPIO_PIN_4;
 8001218:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800121c:	2210      	movs	r2, #16
 800121e:	809a      	strh	r2, [r3, #4]
	lis_spi.spi = &hspi1;
 8001220:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001224:	4a8d      	ldr	r2, [pc, #564]	; (800145c <app_main+0x2ac>)
 8001226:	609a      	str	r2, [r3, #8]
	lisset(&ctx, &lis_spi);
 8001228:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800122c:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8001230:	4611      	mov	r1, r2
 8001232:	4618      	mov	r0, r3
 8001234:	f00f f9e2 	bl	80105fc <lisset>


	int16_t temperature_celsius_gyro;
	int16_t acc_g[3];
	int16_t gyro_dps[3];
	stmdev_ctx_t lsmctx = {0};
 8001238:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800123c:	461a      	mov	r2, r3
 800123e:	2300      	movs	r3, #0
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	6053      	str	r3, [r2, #4]
 8001244:	6093      	str	r3, [r2, #8]
	struct lsm_spi_intf lsm_spi;
	lsm_spi.GPIO_Port = GPIOC;
 8001246:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800124a:	4a85      	ldr	r2, [pc, #532]	; (8001460 <app_main+0x2b0>)
 800124c:	601a      	str	r2, [r3, #0]
	lsm_spi.GPIO_Pin = GPIO_PIN_13;
 800124e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001252:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001256:	809a      	strh	r2, [r3, #4]
	lsm_spi.spi = &hspi1;
 8001258:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800125c:	4a7f      	ldr	r2, [pc, #508]	; (800145c <app_main+0x2ac>)
 800125e:	609a      	str	r2, [r3, #8]
	lsmset(&lsmctx, &lsm_spi);
 8001260:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001264:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001268:	4611      	mov	r1, r2
 800126a:	4618      	mov	r0, r3
 800126c:	f00f fcf2 	bl	8010c54 <lsmset>
	//lsm6ds3_write_reg(&lsmctx, 0x11, lsm_data, 8);


    if(GPS_FLAG)
    {
	gps_init();
 8001270:	f00f f81e 	bl	80102b0 <gps_init>
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8001274:	4b7b      	ldr	r3, [pc, #492]	; (8001464 <app_main+0x2b4>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	68da      	ldr	r2, [r3, #12]
 800127a:	4b7a      	ldr	r3, [pc, #488]	; (8001464 <app_main+0x2b4>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f042 0220 	orr.w	r2, r2, #32
 8001282:	60da      	str	r2, [r3, #12]
	//__HAL_UART_ENABLE_IT(&huart1, UART_IT_ERR);
    }

    int bmeinit = 10000;
 8001284:	f242 7310 	movw	r3, #10000	; 0x2710
 8001288:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
    bme_important_shit bme_important;//////////////////////////////////BME
    if(BME_FLAG == 1){
    bmeinit = its_bme280_init(UNKNXW);
 800128c:	2000      	movs	r0, #0
 800128e:	f004 ff50 	bl	8006132 <its_bme280_init>
 8001292:	f8c7 0224 	str.w	r0, [r7, #548]	; 0x224
    }
    uint8_t bme_gnd_cnt = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	f887 326b 	strb.w	r3, [r7, #619]	; 0x26b
    double bme_press_ground = 0;
 800129c:	f04f 0200 	mov.w	r2, #0
 80012a0:	f04f 0300 	mov.w	r3, #0
 80012a4:	e9c7 2398 	strd	r2, r3, [r7, #608]	; 0x260
    for(int i = 0; i < 10; i++)
 80012a8:	2300      	movs	r3, #0
 80012aa:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80012ae:	e02a      	b.n	8001306 <app_main+0x156>
    {
    	HAL_Delay(100);
 80012b0:	2064      	movs	r0, #100	; 0x64
 80012b2:	f005 f94d 	bl	8006550 <HAL_Delay>
    	its_bme280_read(UNKNXW, &bme_important);
 80012b6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80012ba:	4619      	mov	r1, r3
 80012bc:	2000      	movs	r0, #0
 80012be:	f004 ff7f 	bl	80061c0 <its_bme280_read>
    	if(bme_important.pressure>90000){
 80012c2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80012c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012ca:	a35f      	add	r3, pc, #380	; (adr r3, 8001448 <app_main+0x298>)
 80012cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d0:	f7ff fc3a 	bl	8000b48 <__aeabi_dcmpgt>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d010      	beq.n	80012fc <app_main+0x14c>
    	bme_press_ground += bme_important.pressure;
 80012da:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80012de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e2:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	; 0x260
 80012e6:	f7fe ffe9 	bl	80002bc <__adddf3>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	e9c7 2398 	strd	r2, r3, [r7, #608]	; 0x260
    		bme_gnd_cnt++;}
 80012f2:	f897 326b 	ldrb.w	r3, [r7, #619]	; 0x26b
 80012f6:	3301      	adds	r3, #1
 80012f8:	f887 326b 	strb.w	r3, [r7, #619]	; 0x26b
    for(int i = 0; i < 10; i++)
 80012fc:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8001300:	3301      	adds	r3, #1
 8001302:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8001306:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800130a:	2b09      	cmp	r3, #9
 800130c:	ddd0      	ble.n	80012b0 <app_main+0x100>
    }
    if(bme_gnd_cnt > 0)
 800130e:	f897 326b 	ldrb.w	r3, [r7, #619]	; 0x26b
 8001312:	2b00      	cmp	r3, #0
 8001314:	d00e      	beq.n	8001334 <app_main+0x184>
    bme_press_ground = bme_press_ground/bme_gnd_cnt;
 8001316:	f897 326b 	ldrb.w	r3, [r7, #619]	; 0x26b
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f91a 	bl	8000554 <__aeabi_i2d>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	; 0x260
 8001328:	f7ff faa8 	bl	800087c <__aeabi_ddiv>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	e9c7 2398 	strd	r2, r3, [r7, #608]	; 0x260

    int8_t state_sd = 0;//sd
 8001334:	f107 03f7 	add.w	r3, r7, #247	; 0xf7
 8001338:	2200      	movs	r2, #0
 800133a:	701a      	strb	r2, [r3, #0]
    int retin;

    tdc21_all_regs_t tdc21_all_regs;
    //создаем и настраиваем дескриптор тдс21
    tdcgp21_spi_pins_t tdcgp21_spi_pins;
    tdcgp21_spi_pins.ce_pin = 0;
 800133c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001340:	2200      	movs	r2, #0
 8001342:	809a      	strh	r2, [r3, #4]
    tdcgp21_spi_pins.ce_port = 0;
 8001344:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
    tdcgp21_spi_pins.cs_pin = GPIO_PIN_10;
 800134c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001350:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001354:	819a      	strh	r2, [r3, #12]
    tdcgp21_spi_pins.cs_port = GPIOB;
 8001356:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800135a:	4a43      	ldr	r2, [pc, #268]	; (8001468 <app_main+0x2b8>)
 800135c:	609a      	str	r2, [r3, #8]
    tdcgp21_lovver_api_config_t tdcgp21_api_config;
    tdc21_spi_init(&tdcgp21_api_config, &hspi4, &tdcgp21_spi_pins);
 800135e:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001362:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001366:	4941      	ldr	r1, [pc, #260]	; (800146c <app_main+0x2bc>)
 8001368:	4618      	mov	r0, r3
 800136a:	f00d ffed 	bl	800f348 <tdc21_spi_init>
    tdc21_all_regs = tdc21_config(&tdcgp21_api_config);
 800136e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001372:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8001376:	4611      	mov	r1, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f00d fffd 	bl	800f378 <tdc21_config>
	tdcgp21_write_register(&tdcgp21_api_config, TDC21_WREG6, (uint8_t*)&r6, 4);*/


	//Создаем и настраиваем дескриптор радиомодуля nRF24L01
	nrf24_spi_pins_t nrf24_spi_pins;
	nrf24_spi_pins.ce_pin = GPIO_PIN_1;
 800137e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001382:	2202      	movs	r2, #2
 8001384:	809a      	strh	r2, [r3, #4]
	nrf24_spi_pins.ce_port = GPIOB;
 8001386:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800138a:	4a37      	ldr	r2, [pc, #220]	; (8001468 <app_main+0x2b8>)
 800138c:	601a      	str	r2, [r3, #0]
	nrf24_spi_pins.cs_pin = GPIO_PIN_2;
 800138e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001392:	2204      	movs	r2, #4
 8001394:	819a      	strh	r2, [r3, #12]
	nrf24_spi_pins.cs_port = GPIOB;
 8001396:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800139a:	4a33      	ldr	r2, [pc, #204]	; (8001468 <app_main+0x2b8>)
 800139c:	609a      	str	r2, [r3, #8]
	nrf24_lower_api_config_t nrf24_api_config;
	nrf24_spi_init(&nrf24_api_config, &hspi5, &nrf24_spi_pins);
 800139e:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80013a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013a6:	4932      	ldr	r1, [pc, #200]	; (8001470 <app_main+0x2c0>)
 80013a8:	4618      	mov	r0, r3
 80013aa:	f010 f8bd 	bl	8011528 <nrf24_spi_init>

	//Перед настройкой регистров радио переводим его в standby mode
	//nrf24_mode_standby(&nrf24_api_config);
	nrf24_mode_power_down(&nrf24_api_config);
 80013ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013b2:	4618      	mov	r0, r3
 80013b4:	f010 fab5 	bl	8011922 <nrf24_mode_power_down>

	// Настраиваем параметры радиопередачи
	nrf24_rf_config_t nrf24_rf_config;
	nrf24_rf_config.data_rate = NRF24_DATARATE_250_KBIT;
 80013b8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80013bc:	2200      	movs	r2, #0
 80013be:	701a      	strb	r2, [r3, #0]
	nrf24_rf_config.rf_channel = 110;
 80013c0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80013c4:	226e      	movs	r2, #110	; 0x6e
 80013c6:	709a      	strb	r2, [r3, #2]
	nrf24_rf_config.tx_power = NRF24_TXPOWER_MINUS_18_DBM;
 80013c8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80013cc:	2200      	movs	r2, #0
 80013ce:	705a      	strb	r2, [r3, #1]
	nrf24_setup_rf(&nrf24_api_config, &nrf24_rf_config);
 80013d0:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80013d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013d8:	4611      	mov	r1, r2
 80013da:	4618      	mov	r0, r3
 80013dc:	f010 f8c0 	bl	8011560 <nrf24_setup_rf>

	// Настраиваем протокол радиопередачи
	nrf24_protocol_config_t nrf24_protocol_config;
	nrf24_protocol_config.address_width = NRF24_ADDRES_WIDTH_5_BYTES;
 80013e0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80013e4:	2203      	movs	r2, #3
 80013e6:	705a      	strb	r2, [r3, #1]
	nrf24_protocol_config.auto_retransmit_count = 0;
 80013e8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80013ec:	2200      	movs	r2, #0
 80013ee:	715a      	strb	r2, [r3, #5]
	nrf24_protocol_config.auto_retransmit_delay = 0;
 80013f0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80013f4:	2200      	movs	r2, #0
 80013f6:	719a      	strb	r2, [r3, #6]
	nrf24_protocol_config.crc_size = NRF24_CRCSIZE_1BYTE;
 80013f8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80013fc:	2201      	movs	r2, #1
 80013fe:	701a      	strb	r2, [r3, #0]
	nrf24_protocol_config.en_ack_payload = false;/// НАДО тру
 8001400:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001404:	2200      	movs	r2, #0
 8001406:	70da      	strb	r2, [r3, #3]
	nrf24_protocol_config.en_dyn_ack = false;//НАДО фалс
 8001408:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800140c:	2200      	movs	r2, #0
 800140e:	711a      	strb	r2, [r3, #4]
	nrf24_protocol_config.en_dyn_payload_size = true;//НАДО ФАЛС
 8001410:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001414:	2201      	movs	r2, #1
 8001416:	709a      	strb	r2, [r3, #2]
	nrf24_setup_protocol(&nrf24_api_config, &nrf24_protocol_config);
 8001418:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800141c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001420:	4611      	mov	r1, r2
 8001422:	4618      	mov	r0, r3
 8001424:	f010 f8fe 	bl	8011624 <nrf24_setup_protocol>
	nrf24_pipe_set_tx_addr(&nrf24_api_config, 0xacacacacac);
 8001428:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 800142c:	f04f 32ac 	mov.w	r2, #2896997548	; 0xacacacac
 8001430:	f04f 03ac 	mov.w	r3, #172	; 0xac
 8001434:	4608      	mov	r0, r1
 8001436:	f010 fa63 	bl	8011900 <nrf24_pipe_set_tx_addr>


	nrf24_pipe_config_t pipe_config;
	for (int i = 1; i < 6; i++)
 800143a:	2301      	movs	r3, #1
 800143c:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 8001440:	e057      	b.n	80014f2 <app_main+0x342>
 8001442:	bf00      	nop
 8001444:	f3af 8000 	nop.w
 8001448:	00000000 	.word	0x00000000
 800144c:	40f5f900 	.word	0x40f5f900
 8001450:	44fa0000 	.word	0x44fa0000
 8001454:	200029b4 	.word	0x200029b4
 8001458:	40020000 	.word	0x40020000
 800145c:	20002b1c 	.word	0x20002b1c
 8001460:	40020800 	.word	0x40020800
 8001464:	200029fc 	.word	0x200029fc
 8001468:	40020400 	.word	0x40020400
 800146c:	20002a40 	.word	0x20002a40
 8001470:	200028c0 	.word	0x200028c0
	{
		pipe_config.address = 0xacacacacac;
 8001474:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001478:	f04f 32ac 	mov.w	r2, #2896997548	; 0xacacacac
 800147c:	f04f 03ac 	mov.w	r3, #172	; 0xac
 8001480:	e9c1 2302 	strd	r2, r3, [r1, #8]
		pipe_config.address = (pipe_config.address & ~((uint64_t)0xff << 32)) | ((uint64_t)(i + 7) << 32);
 8001484:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001488:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800148c:	f04f 30ff 	mov.w	r0, #4294967295
 8001490:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8001494:	ea02 0400 	and.w	r4, r2, r0
 8001498:	ea03 0501 	and.w	r5, r3, r1
 800149c:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80014a0:	3307      	adds	r3, #7
 80014a2:	4618      	mov	r0, r3
 80014a4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	f04f 0300 	mov.w	r3, #0
 80014b0:	0003      	movs	r3, r0
 80014b2:	2200      	movs	r2, #0
 80014b4:	ea44 0802 	orr.w	r8, r4, r2
 80014b8:	ea45 0903 	orr.w	r9, r5, r3
 80014bc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80014c0:	e9c3 8902 	strd	r8, r9, [r3, #8]
		pipe_config.enable_auto_ack = false;
 80014c4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
		pipe_config.payload_size = -1;
 80014cc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80014d0:	22ff      	movs	r2, #255	; 0xff
 80014d2:	741a      	strb	r2, [r3, #16]
		nrf24_pipe_rx_start(&nrf24_api_config, i, &pipe_config);
 80014d4:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80014d8:	b2d9      	uxtb	r1, r3
 80014da:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80014de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014e2:	4618      	mov	r0, r3
 80014e4:	f010 f922 	bl	801172c <nrf24_pipe_rx_start>
	for (int i = 1; i < 6; i++)
 80014e8:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80014ec:	3301      	adds	r3, #1
 80014ee:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 80014f2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80014f6:	2b05      	cmp	r3, #5
 80014f8:	ddbc      	ble.n	8001474 <app_main+0x2c4>
	}

	pipe_config.address = 0xafafafaf01;
 80014fa:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80014fe:	4ade      	ldr	r2, [pc, #888]	; (8001878 <app_main+0x6c8>)
 8001500:	f04f 03af 	mov.w	r3, #175	; 0xaf
 8001504:	e9c1 2302 	strd	r2, r3, [r1, #8]
	pipe_config.enable_auto_ack = false;
 8001508:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800150c:	2200      	movs	r2, #0
 800150e:	701a      	strb	r2, [r3, #0]
	pipe_config.payload_size = -1;
 8001510:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001514:	22ff      	movs	r2, #255	; 0xff
 8001516:	741a      	strb	r2, [r3, #16]
	nrf24_pipe_rx_start(&nrf24_api_config, 0, &pipe_config);
 8001518:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800151c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f010 f902 	bl	801172c <nrf24_pipe_rx_start>

	nrf24_mode_standby(&nrf24_api_config);
 8001528:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800152c:	4618      	mov	r0, r3
 800152e:	f010 fa16 	bl	801195e <nrf24_mode_standby>
	nrf24_mode_tx(&nrf24_api_config);
 8001532:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001536:	4618      	mov	r0, r3
 8001538:	f010 fa33 	bl	80119a2 <nrf24_mode_tx>




	uint8_t rx_buffer[32] = {0};
 800153c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	3304      	adds	r3, #4
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
 8001550:	611a      	str	r2, [r3, #16]
 8001552:	615a      	str	r2, [r3, #20]
 8001554:	619a      	str	r2, [r3, #24]
	uint8_t tx_buffer[32] = {0};
 8001556:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	3304      	adds	r3, #4
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
 800156c:	615a      	str	r2, [r3, #20]
 800156e:	619a      	str	r2, [r3, #24]
	nrf24_fifo_status_t rx_status = 2;
 8001570:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8001574:	2202      	movs	r2, #2
 8001576:	701a      	strb	r2, [r3, #0]
    nrf24_fifo_status_t tx_status = 2;
 8001578:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800157c:	2202      	movs	r2, #2
 800157e:	701a      	strb	r2, [r3, #0]

    int errrrrrrrrr, radio_read_err;//
	int IRQ_flags;///////////////////переменные для отладки радио
    bool radio_flag;////////////////
 	int irq_err = 10;//////////////
 8001580:	230a      	movs	r3, #10
 8001582:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 	int size_in_tx = 0;///////////
 8001586:	2300      	movs	r3, #0
 8001588:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 	float time_for_madgwik = 0;
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 	for(int i = 0; i < 10; i++)
 		packet_ma_type_12.null[i] = 0;
 	for(int i = 0; i < 3; i++)
 		packet_ma_type_2.nulll[i] = 0;*/
 	uint8_t data_nrf_tx_ds;
 	int num1 = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 	int num2 = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 	int time_on_board = 0;//время на борте
 80015a0:	2300      	movs	r3, #0
 80015a2:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    float lux;


    state_t fckng_state = STATE_ON_GND;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243
    uint32_t start_time_to;

    uint32_t time_parashute = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

    float LSM_TEMP = 0;
 80015b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
    float accc[3] = {0};
 80015bc:	f107 0320 	add.w	r3, r7, #32
 80015c0:	461a      	mov	r2, r3
 80015c2:	2300      	movs	r3, #0
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	6053      	str	r3, [r2, #4]
 80015c8:	6093      	str	r3, [r2, #8]
    float gyrooo[3] = {0};
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	461a      	mov	r2, r3
 80015d0:	2300      	movs	r3, #0
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	6053      	str	r3, [r2, #4]
 80015d6:	6093      	str	r3, [r2, #8]
    float magfloat[3] = {0};
 80015d8:	f107 0308 	add.w	r3, r7, #8
 80015dc:	461a      	mov	r2, r3
 80015de:	2300      	movs	r3, #0
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	6053      	str	r3, [r2, #4]
 80015e4:	6093      	str	r3, [r2, #8]
    float temp_lis_float;

    int time_to_fast_sens = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    int time_to_slow_sens = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    bool impulse = false;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237

	packet_ma_type_11.flag = 0xFF;
 80015f8:	23ff      	movs	r3, #255	; 0xff
 80015fa:	f887 31e0 	strb.w	r3, [r7, #480]	; 0x1e0
	packet_ma_type_12.flag = 0xFA;
 80015fe:	23fa      	movs	r3, #250	; 0xfa
 8001600:	f887 31c0 	strb.w	r3, [r7, #448]	; 0x1c0
	packet_ma_type_2.flag = 0xAA;
 8001604:	23aa      	movs	r3, #170	; 0xaa
 8001606:	f887 31a0 	strb.w	r3, [r7, #416]	; 0x1a0


	time_to_fast_sens = HAL_GetTick();
 800160a:	f004 ff95 	bl	8006538 <HAL_GetTick>
 800160e:	4603      	mov	r3, r0
 8001610:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
	time_to_slow_sens = HAL_GetTick();
 8001614:	f004 ff90 	bl	8006538 <HAL_GetTick>
 8001618:	4603      	mov	r3, r0
 800161a:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
	float volts;

	int pulse_sosa = 250;
 800161e:	23fa      	movs	r3, #250	; 0xfa
 8001620:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230

 	while(true)
	{

			nrf24_mode_tx(&nrf24_api_config);
 8001624:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001628:	4618      	mov	r0, r3
 800162a:	f010 f9ba 	bl	80119a2 <nrf24_mode_tx>
		for(int i = 0; i < 1000; i++)
		{
			__HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_3, i);
			HAL_Delay(5);
		}*/
 		if(HAL_GetTick() - time_to_fast_sens > TIME_FAST_SENS)
 800162e:	f004 ff83 	bl	8006538 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b05      	cmp	r3, #5
 800163c:	f240 811e 	bls.w	800187c <app_main+0x6cc>
 		{
			time_to_fast_sens = HAL_GetTick();
 8001640:	f004 ff7a 	bl	8006538 <HAL_GetTick>
 8001644:	4603      	mov	r3, r0
 8001646:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 			if (LSM_FLAG)
 					{
 						lsmread(&lsmctx, &LSM_TEMP, &accc, &gyrooo);
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	f107 0220 	add.w	r2, r7, #32
 8001652:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001656:	f507 709a 	add.w	r0, r7, #308	; 0x134
 800165a:	f00f fb31 	bl	8010cc0 <lsmread>
 						lsm6ds3_temperature_raw_get(&lsmctx, &temperature_celsius_gyro);//ЗАПРОС СЫРЫХ ДАННЫХ
 800165e:	f507 72a7 	add.w	r2, r7, #334	; 0x14e
 8001662:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001666:	4611      	mov	r1, r2
 8001668:	4618      	mov	r0, r3
 800166a:	f00f fcaf 	bl	8010fcc <lsm6ds3_temperature_raw_get>
 			 			lsm6ds3_acceleration_raw_get(&lsmctx, acc_g);
 800166e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8001672:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f00f fd15 	bl	80110a8 <lsm6ds3_acceleration_raw_get>
 						lsm6ds3_angular_rate_raw_get(&lsmctx, gyro_dps);
 800167e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8001682:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001686:	4611      	mov	r1, r2
 8001688:	4618      	mov	r0, r3
 800168a:	f00f fcc2 	bl	8011012 <lsm6ds3_angular_rate_raw_get>
 						packet_ma_type_2.acc_mg[0] = acc_g[0];
 800168e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001692:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001696:	f8a7 31a7 	strh.w	r3, [r7, #423]	; 0x1a7
 						packet_ma_type_2.acc_mg[1] = acc_g[1];
 800169a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800169e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016a2:	f8a7 31a9 	strh.w	r3, [r7, #425]	; 0x1a9
 						packet_ma_type_2.acc_mg[2] = acc_g[2];
 80016a6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80016aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016ae:	f8a7 31ab 	strh.w	r3, [r7, #427]	; 0x1ab
 						/*gyro_dps[0]-=0,48461538;
 						gyro_dps[1]+=3,45999986923;
 						gyro_dps[2]+=2,561433749;*/
 						packet_ma_type_2.gyro_mdps[0] = gyro_dps[0];
 80016b2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80016b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ba:	f8a7 31ad 	strh.w	r3, [r7, #429]	; 0x1ad
 						packet_ma_type_2.gyro_mdps[1] = gyro_dps[1];
 80016be:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80016c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016c6:	f8a7 31af 	strh.w	r3, [r7, #431]	; 0x1af
 						packet_ma_type_2.gyro_mdps[2] = gyro_dps[2];
 80016ca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80016ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016d2:	f8a7 31b1 	strh.w	r3, [r7, #433]	; 0x1b1
 						}

 					if (LIS_FLAG)
 					{
 						lisread(&ctx, &temp_lis_float, &magfloat);
 80016d6:	f107 0208 	add.w	r2, r7, #8
 80016da:	1d39      	adds	r1, r7, #4
 80016dc:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80016e0:	4618      	mov	r0, r3
 80016e2:	f00e ffd3 	bl	801068c <lisread>
 						lis3mdl_magnetic_raw_get(&ctx, mag);
 80016e6:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80016ea:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80016ee:	4611      	mov	r1, r2
 80016f0:	4618      	mov	r0, r3
 80016f2:	f00f f975 	bl	80109e0 <lis3mdl_magnetic_raw_get>
 						//lis3mdl_temperature_raw_get(&ctx, &temp_lis);//ЗАПРОС СЫРЫХ ДАННЫХ
 						packet_ma_type_2.LIS3MDL_magnetometer[0] = mag[0];
 80016f6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80016fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016fe:	f8a7 31b3 	strh.w	r3, [r7, #435]	; 0x1b3
 						packet_ma_type_2.LIS3MDL_magnetometer[1] = mag[1];
 8001702:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001706:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800170a:	f8a7 31b5 	strh.w	r3, [r7, #437]	; 0x1b5
 						packet_ma_type_2.LIS3MDL_magnetometer[2] = mag[2];
 800170e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001712:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001716:	f8a7 31b7 	strh.w	r3, [r7, #439]	; 0x1b7

 					}

 					if(SD_FLAG)
 					{
 						super_smart_write((uint8_t *)&packet_ma_type_11, 32, &state_sd);
 800171a:	f107 02f7 	add.w	r2, r7, #247	; 0xf7
 800171e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001722:	2120      	movs	r1, #32
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fc8f 	bl	8001048 <super_smart_write>
 						super_smart_write((uint8_t *)&packet_ma_type_12, 32, &state_sd);
 800172a:	f107 02f7 	add.w	r2, r7, #247	; 0xf7
 800172e:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001732:	2120      	movs	r1, #32
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fc87 	bl	8001048 <super_smart_write>
 						super_smart_write((uint8_t *)&packet_ma_type_2, 32, &state_sd);
 800173a:	f107 02f7 	add.w	r2, r7, #247	; 0xf7
 800173e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001742:	2120      	movs	r1, #32
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fc7f 	bl	8001048 <super_smart_write>
 			 			//HAL_Delay(5);
 					}

 			       if(NRF_FLAG)
 			        {
 			    	   	num2++;
 800174a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800174e:	3301      	adds	r3, #1
 8001750:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 						nrf24_fifo_flush_tx(&nrf24_api_config);
 8001754:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001758:	4618      	mov	r0, r3
 800175a:	f010 f9c7 	bl	8011aec <nrf24_fifo_flush_tx>
 						errrrrrrrrr = nrf24_irq_clear(&nrf24_api_config, IRQ_flags);
 800175e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001768:	4611      	mov	r1, r2
 800176a:	4618      	mov	r0, r3
 800176c:	f010 f9ef 	bl	8011b4e <nrf24_irq_clear>
 8001770:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
 						size_in_tx = nrf24_fifo_write(&nrf24_api_config, (uint8_t *)&packet_ma_type_2, 32, false);
 8001774:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 8001778:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 800177c:	2300      	movs	r3, #0
 800177e:	2220      	movs	r2, #32
 8001780:	f010 f98e 	bl	8011aa0 <nrf24_fifo_write>
 8001784:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
 						nrf24_fifo_status(&nrf24_api_config, &rx_status, &tx_status);
 8001788:	f107 0236 	add.w	r2, r7, #54	; 0x36
 800178c:	f107 0137 	add.w	r1, r7, #55	; 0x37
 8001790:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001794:	4618      	mov	r0, r3
 8001796:	f010 f926 	bl	80119e6 <nrf24_fifo_status>
 						nrf24_fifo_status(&nrf24_api_config, &rx_status, &tx_status);
 800179a:	f107 0236 	add.w	r2, r7, #54	; 0x36
 800179e:	f107 0137 	add.w	r1, r7, #55	; 0x37
 80017a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017a6:	4618      	mov	r0, r3
 80017a8:	f010 f91d 	bl	80119e6 <nrf24_fifo_status>
 						nrf24_irq_get(&nrf24_api_config, &IRQ_flags);
 80017ac:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80017b0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017b4:	4611      	mov	r1, r2
 80017b6:	4618      	mov	r0, r3
 80017b8:	f010 f9b0 	bl	8011b1c <nrf24_irq_get>
						if (rx_status != NRF24_FIFO_EMPTY)
 80017bc:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d021      	beq.n	800180a <app_main+0x65a>
						{
							radio_read_err = nrf24_fifo_read(&nrf24_api_config, rx_buffer, 32);
 80017c6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80017ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017ce:	2220      	movs	r2, #32
 80017d0:	4618      	mov	r0, r3
 80017d2:	f010 f948 	bl	8011a66 <nrf24_fifo_read>
 80017d6:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
							nrf24_fifo_flush_rx(&nrf24_api_config);
 80017da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017de:	4618      	mov	r0, r3
 80017e0:	f010 f990 	bl	8011b04 <nrf24_fifo_flush_rx>
						   if(rx_status == NRF24_FIFO_FULL)
 80017e4:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d10d      	bne.n	800180a <app_main+0x65a>
							{
								nrf24_fifo_flush_rx(&nrf24_api_config);
 80017ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017f2:	4618      	mov	r0, r3
 80017f4:	f010 f986 	bl	8011b04 <nrf24_fifo_flush_rx>
								nrf24_fifo_status(&nrf24_api_config, &rx_status, &tx_status);
 80017f8:	f107 0236 	add.w	r2, r7, #54	; 0x36
 80017fc:	f107 0137 	add.w	r1, r7, #55	; 0x37
 8001800:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001804:	4618      	mov	r0, r3
 8001806:	f010 f8ee 	bl	80119e6 <nrf24_fifo_status>
							}
						}
						if (tx_status == NRF24_FIFO_EMPTY)
 800180a:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d11f      	bne.n	8001854 <app_main+0x6a4>
						{
							nrf24_fifo_flush_tx(&nrf24_api_config);
 8001814:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001818:	4618      	mov	r0, r3
 800181a:	f010 f967 	bl	8011aec <nrf24_fifo_flush_tx>
							nrf24_fifo_status(&nrf24_api_config, &rx_status, &tx_status);
 800181e:	f107 0236 	add.w	r2, r7, #54	; 0x36
 8001822:	f107 0137 	add.w	r1, r7, #55	; 0x37
 8001826:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800182a:	4618      	mov	r0, r3
 800182c:	f010 f8db 	bl	80119e6 <nrf24_fifo_status>
							//errrrrrrrrr = nrf24_fifo_write_ack_pld(&nrf24_api_config, 0, (uint8_t *)&packet_ma_type_11, sizeof(packet_ma_type_11));
							radio_flag = !radio_flag;//изменения от плт
 8001830:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8001834:	2b00      	cmp	r3, #0
 8001836:	bf14      	ite	ne
 8001838:	2301      	movne	r3, #1
 800183a:	2300      	moveq	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	f083 0301 	eor.w	r3, r3, #1
 8001842:	b2db      	uxtb	r3, r3
 8001844:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 8001848:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
						}
						//опускаем флаги
						nrf24_irq_get(&nrf24_api_config, &IRQ_flags);
 8001854:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001858:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800185c:	4611      	mov	r1, r2
 800185e:	4618      	mov	r0, r3
 8001860:	f010 f95c 	bl	8011b1c <nrf24_irq_get>
						irq_err = nrf24_irq_clear(&nrf24_api_config, NRF24_IRQ_RX_DR | NRF24_IRQ_TX_DR | NRF24_IRQ_MAX_RT);
 8001864:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001868:	2107      	movs	r1, #7
 800186a:	4618      	mov	r0, r3
 800186c:	f010 f96f 	bl	8011b4e <nrf24_irq_clear>
 8001870:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
 8001874:	e002      	b.n	800187c <app_main+0x6cc>
 8001876:	bf00      	nop
 8001878:	afafaf01 	.word	0xafafaf01
 			        }
 		}

 		if(HAL_GetTick() - time_to_slow_sens > TIME_SLOW_SENS)
 800187c:	f004 fe5c 	bl	8006538 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b64      	cmp	r3, #100	; 0x64
 800188a:	f240 811c 	bls.w	8001ac6 <app_main+0x916>
 	 	{
 			time_to_slow_sens = HAL_GetTick();
 800188e:	f004 fe53 	bl	8006538 <HAL_GetTick>
 8001892:	4603      	mov	r3, r0
 8001894:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 	    	if(PHOTOREZ_FLAG){
 	    	lux = photorezistor_get_lux(photorezist);
 8001898:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800189c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018a0:	f000 fbaa 	bl	8001ff8 <photorezistor_get_lux>
 80018a4:	ed87 0a91 	vstr	s0, [r7, #580]	; 0x244
   	    	packet_ma_type_12.lux = lux;
 80018a8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80018ac:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 	    	}
 			if(GPS_FLAG)
 			{
 				gps_work();
 80018b0:	f00e fd2e 	bl	8010310 <gps_work>
 				gps_get_coords(&cookie,  &latitude,  &lontitude,&altitude, &fix);
 80018b4:	f507 74c2 	add.w	r4, r7, #388	; 0x184
 80018b8:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80018bc:	f507 71c6 	add.w	r1, r7, #396	; 0x18c
 80018c0:	f507 70bc 	add.w	r0, r7, #376	; 0x178
 80018c4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	4623      	mov	r3, r4
 80018cc:	f00e fdde 	bl	801048c <gps_get_coords>
 				packet_ma_type_12.latitude = latitude;
 80018d0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80018d4:	f8c7 31c7 	str.w	r3, [r7, #455]	; 0x1c7
 				packet_ma_type_12.longitude =lontitude;
 80018d8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80018dc:	f8c7 31cb 	str.w	r3, [r7, #459]	; 0x1cb
 				packet_ma_type_12.altitude = altitude;
 80018e0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80018e4:	f8c7 31cf 	str.w	r3, [r7, #463]	; 0x1cf
 				packet_ma_type_12.fix = fix;
 80018e8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	f887 31d3 	strb.w	r3, [r7, #467]	; 0x1d3
 				//printf("%f %f %f           %ld\n", (double)latitude, (double)lontitude, (double)altitude, fix);
 			}

 			if(BME_FLAG)
 			{
 				its_bme280_read(UNKNXW, &bme_important);
 80018f2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80018f6:	4619      	mov	r1, r3
 80018f8:	2000      	movs	r0, #0
 80018fa:	f004 fc61 	bl	80061c0 <its_bme280_read>
 				packet_ma_type_11.BME280_pressure = bme_important.pressure;
 80018fe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001906:	f207 11e7 	addw	r1, r7, #487	; 0x1e7
 800190a:	600a      	str	r2, [r1, #0]
 800190c:	604b      	str	r3, [r1, #4]
 				packet_ma_type_11.BME280_temperature = (float)bme_important.temperature;
 800190e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001912:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	f7ff f97d 	bl	8000c18 <__aeabi_d2f>
 800191e:	4603      	mov	r3, r0
 8001920:	f8c7 31ef 	str.w	r3, [r7, #495]	; 0x1ef
 				packet_ma_type_11.height_bme = 44330.0*(1.0 - pow((float)packet_ma_type_11.BME280_pressure/bme_press_ground, 1.0/5.255));
 8001924:	f8d7 21e7 	ldr.w	r2, [r7, #487]	; 0x1e7
 8001928:	f8d7 31eb 	ldr.w	r3, [r7, #491]	; 0x1eb
 800192c:	4610      	mov	r0, r2
 800192e:	4619      	mov	r1, r3
 8001930:	f7ff f972 	bl	8000c18 <__aeabi_d2f>
 8001934:	4603      	mov	r3, r0
 8001936:	4618      	mov	r0, r3
 8001938:	f7fe fe1e 	bl	8000578 <__aeabi_f2d>
 800193c:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 8001940:	f7fe ff9c 	bl	800087c <__aeabi_ddiv>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	ec43 2b17 	vmov	d7, r2, r3
 800194c:	ed9f 1b84 	vldr	d1, [pc, #528]	; 8001b60 <app_main+0x9b0>
 8001950:	eeb0 0a47 	vmov.f32	s0, s14
 8001954:	eef0 0a67 	vmov.f32	s1, s15
 8001958:	f014 fe0a 	bl	8016570 <pow>
 800195c:	ec53 2b10 	vmov	r2, r3, d0
 8001960:	f04f 0000 	mov.w	r0, #0
 8001964:	4982      	ldr	r1, [pc, #520]	; (8001b70 <app_main+0x9c0>)
 8001966:	f7fe fca7 	bl	80002b8 <__aeabi_dsub>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4610      	mov	r0, r2
 8001970:	4619      	mov	r1, r3
 8001972:	a37d      	add	r3, pc, #500	; (adr r3, 8001b68 <app_main+0x9b8>)
 8001974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001978:	f7fe fe56 	bl	8000628 <__aeabi_dmul>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	f207 11f3 	addw	r1, r7, #499	; 0x1f3
 8001984:	600a      	str	r2, [r1, #0]
 8001986:	604b      	str	r3, [r1, #4]
 			}

 	        if(NRF_FLAG)
 	        {
 	       	    num1++;
 8001988:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800198c:	3301      	adds	r3, #1
 800198e:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 				nrf24_fifo_flush_tx(&nrf24_api_config);
 8001992:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001996:	4618      	mov	r0, r3
 8001998:	f010 f8a8 	bl	8011aec <nrf24_fifo_flush_tx>
 				errrrrrrrrr = nrf24_irq_clear(&nrf24_api_config, IRQ_flags);
 800199c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019a6:	4611      	mov	r1, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f010 f8d0 	bl	8011b4e <nrf24_irq_clear>
 80019ae:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
 				size_in_tx = nrf24_fifo_write(&nrf24_api_config, (uint8_t *)&packet_ma_type_11, 32, false);// sizeof(packet_ma_type_1)
 80019b2:	f507 71f0 	add.w	r1, r7, #480	; 0x1e0
 80019b6:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 80019ba:	2300      	movs	r3, #0
 80019bc:	2220      	movs	r2, #32
 80019be:	f010 f86f 	bl	8011aa0 <nrf24_fifo_write>
 80019c2:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
 				size_in_tx = nrf24_fifo_write(&nrf24_api_config, (uint8_t *)&packet_ma_type_12, 32, false);
 80019c6:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
 80019ca:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 80019ce:	2300      	movs	r3, #0
 80019d0:	2220      	movs	r2, #32
 80019d2:	f010 f865 	bl	8011aa0 <nrf24_fifo_write>
 80019d6:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
 				nrf24_fifo_status(&nrf24_api_config, &rx_status, &tx_status);
 80019da:	f107 0236 	add.w	r2, r7, #54	; 0x36
 80019de:	f107 0137 	add.w	r1, r7, #55	; 0x37
 80019e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019e6:	4618      	mov	r0, r3
 80019e8:	f00f fffd 	bl	80119e6 <nrf24_fifo_status>
 				nrf24_fifo_status(&nrf24_api_config, &rx_status, &tx_status);
 80019ec:	f107 0236 	add.w	r2, r7, #54	; 0x36
 80019f0:	f107 0137 	add.w	r1, r7, #55	; 0x37
 80019f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019f8:	4618      	mov	r0, r3
 80019fa:	f00f fff4 	bl	80119e6 <nrf24_fifo_status>
 				nrf24_irq_get(&nrf24_api_config, &IRQ_flags);
 80019fe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001a02:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a06:	4611      	mov	r1, r2
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f010 f887 	bl	8011b1c <nrf24_irq_get>
				if (rx_status != NRF24_FIFO_EMPTY)
 8001a0e:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d021      	beq.n	8001a5c <app_main+0x8ac>
				{
					radio_read_err = nrf24_fifo_read(&nrf24_api_config, rx_buffer, 32);
 8001a18:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001a1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a20:	2220      	movs	r2, #32
 8001a22:	4618      	mov	r0, r3
 8001a24:	f010 f81f 	bl	8011a66 <nrf24_fifo_read>
 8001a28:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
					nrf24_fifo_flush_rx(&nrf24_api_config);
 8001a2c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a30:	4618      	mov	r0, r3
 8001a32:	f010 f867 	bl	8011b04 <nrf24_fifo_flush_rx>
				   if(rx_status == NRF24_FIFO_FULL)
 8001a36:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d10d      	bne.n	8001a5c <app_main+0x8ac>
					{
						nrf24_fifo_flush_rx(&nrf24_api_config);
 8001a40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a44:	4618      	mov	r0, r3
 8001a46:	f010 f85d 	bl	8011b04 <nrf24_fifo_flush_rx>
						nrf24_fifo_status(&nrf24_api_config, &rx_status, &tx_status);
 8001a4a:	f107 0236 	add.w	r2, r7, #54	; 0x36
 8001a4e:	f107 0137 	add.w	r1, r7, #55	; 0x37
 8001a52:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a56:	4618      	mov	r0, r3
 8001a58:	f00f ffc5 	bl	80119e6 <nrf24_fifo_status>
					}
				}
				if (tx_status == NRF24_FIFO_EMPTY)
 8001a5c:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d11f      	bne.n	8001aa6 <app_main+0x8f6>
				{
					nrf24_fifo_flush_tx(&nrf24_api_config);
 8001a66:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f010 f83e 	bl	8011aec <nrf24_fifo_flush_tx>
					nrf24_fifo_status(&nrf24_api_config, &rx_status, &tx_status);
 8001a70:	f107 0236 	add.w	r2, r7, #54	; 0x36
 8001a74:	f107 0137 	add.w	r1, r7, #55	; 0x37
 8001a78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f00f ffb2 	bl	80119e6 <nrf24_fifo_status>
					//errrrrrrrrr = nrf24_fifo_write_ack_pld(&nrf24_api_config, 0, (uint8_t *)&packet_ma_type_11, sizeof(packet_ma_type_11));
					radio_flag = !radio_flag;//изменения от плт
 8001a82:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	bf14      	ite	ne
 8001a8a:	2301      	movne	r3, #1
 8001a8c:	2300      	moveq	r3, #0
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	f083 0301 	eor.w	r3, r3, #1
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 8001a9a:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
				}
				//опускаем флаги
				nrf24_irq_get(&nrf24_api_config, &IRQ_flags);
 8001aa6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001aaa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001aae:	4611      	mov	r1, r2
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f010 f833 	bl	8011b1c <nrf24_irq_get>
				irq_err = nrf24_irq_clear(&nrf24_api_config, NRF24_IRQ_RX_DR | NRF24_IRQ_TX_DR | NRF24_IRQ_MAX_RT);
 8001ab6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001aba:	2107      	movs	r1, #7
 8001abc:	4618      	mov	r0, r3
 8001abe:	f010 f846 	bl	8011b4e <nrf24_irq_clear>
 8001ac2:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220

 		if(VOLT_FLAG)
 		{
    	 	//HAL_ADC_Start(&hadc1);
 			//HAL_ADC_PollForConversion(&hadc1, 100);
 	 		volts = get_voltage_cheto();	//Volts
 8001ac6:	f000 fb5b 	bl	8002180 <get_voltage_cheto>
 8001aca:	ed87 0a82 	vstr	s0, [r7, #520]	; 0x208
 			if(volts <= OPORNOE_VOLT && pulse_sosa <= 950)
 8001ace:	4b29      	ldr	r3, [pc, #164]	; (8001b74 <app_main+0x9c4>)
 8001ad0:	edd3 7a00 	vldr	s15, [r3]
 8001ad4:	ed97 7a82 	vldr	s14, [r7, #520]	; 0x208
 8001ad8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae0:	d810      	bhi.n	8001b04 <app_main+0x954>
 8001ae2:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001ae6:	f240 32b6 	movw	r2, #950	; 0x3b6
 8001aea:	4293      	cmp	r3, r2
 8001aec:	dc0a      	bgt.n	8001b04 <app_main+0x954>
 			{
 				pulse_sosa=pulse_sosa+5;
 8001aee:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001af2:	3305      	adds	r3, #5
 8001af4:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 				__HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_3, pulse_sosa);
 8001af8:	4b1f      	ldr	r3, [pc, #124]	; (8001b78 <app_main+0x9c8>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 8001b00:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b02:	e017      	b.n	8001b34 <app_main+0x984>
 			}
 			else if(volts >= OPORNOE_VOLT && pulse_sosa >= 20){
 8001b04:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <app_main+0x9c4>)
 8001b06:	edd3 7a00 	vldr	s15, [r3]
 8001b0a:	ed97 7a82 	vldr	s14, [r7, #520]	; 0x208
 8001b0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b16:	db0d      	blt.n	8001b34 <app_main+0x984>
 8001b18:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001b1c:	2b13      	cmp	r3, #19
 8001b1e:	dd09      	ble.n	8001b34 <app_main+0x984>
 				pulse_sosa=pulse_sosa-5;
 8001b20:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001b24:	3b05      	subs	r3, #5
 8001b26:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 				__HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_3, pulse_sosa);
 8001b2a:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <app_main+0x9c8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 8001b32:	63da      	str	r2, [r3, #60]	; 0x3c
 			}

 		}
 		packet_ma_type_12.volts = volts;
 8001b34:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8001b38:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4

 		if(impulse == false)
 8001b3c:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8001b40:	f083 0301 	eor.w	r3, r3, #1
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d01a      	beq.n	8001b80 <app_main+0x9d0>
 		{
 			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	2108      	movs	r1, #8
 8001b4e:	480b      	ldr	r0, [pc, #44]	; (8001b7c <app_main+0x9cc>)
 8001b50:	f005 fca6 	bl	80074a0 <HAL_GPIO_WritePin>
 			impulse = true;
 8001b54:	2301      	movs	r3, #1
 8001b56:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
 8001b5a:	e019      	b.n	8001b90 <app_main+0x9e0>
 8001b5c:	f3af 8000 	nop.w
 8001b60:	ccd9456c 	.word	0xccd9456c
 8001b64:	3fc85b95 	.word	0x3fc85b95
 8001b68:	00000000 	.word	0x00000000
 8001b6c:	40e5a540 	.word	0x40e5a540
 8001b70:	3ff00000 	.word	0x3ff00000
 8001b74:	20000000 	.word	0x20000000
 8001b78:	2000296c 	.word	0x2000296c
 8001b7c:	40020000 	.word	0x40020000
 		}
 		else
 		{
 			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2108      	movs	r1, #8
 8001b84:	48e4      	ldr	r0, [pc, #912]	; (8001f18 <app_main+0xd68>)
 8001b86:	f005 fc8b 	bl	80074a0 <HAL_GPIO_WritePin>
 			impulse = false;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
 		}

 		packet_ma_type_11.time = time_on_board;
 8001b90:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8001b94:	f8c7 31e3 	str.w	r3, [r7, #483]	; 0x1e3
 		packet_ma_type_12.time = time_on_board;
 8001b98:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8001b9c:	f8c7 31c3 	str.w	r3, [r7, #451]	; 0x1c3
 		packet_ma_type_2.time = time_on_board;
 8001ba0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8001ba4:	f8c7 31a3 	str.w	r3, [r7, #419]	; 0x1a3
		packet_ma_type_11.num = num1;
 8001ba8:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	f8a7 31e1 	strh.w	r3, [r7, #481]	; 0x1e1
		packet_ma_type_12.num = num1;
 8001bb2:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	f8a7 31c1 	strh.w	r3, [r7, #449]	; 0x1c1
		packet_ma_type_2.num = num2;
 8001bbc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	f8a7 31a1 	strh.w	r3, [r7, #417]	; 0x1a1

    	time_on_board = HAL_GetTick();
 8001bc6:	f004 fcb7 	bl	8006538 <HAL_GetTick>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
		retin = lis3mdl_read_reg(&ctx, 0x0F , (uint8_t *) &abobus, 6);
 8001bd0:	f107 02f6 	add.w	r2, r7, #246	; 0xf6
 8001bd4:	f507 70ae 	add.w	r0, r7, #348	; 0x15c
 8001bd8:	2306      	movs	r3, #6
 8001bda:	210f      	movs	r1, #15
 8001bdc:	f00e fd97 	bl	801070e <lis3mdl_read_reg>
 8001be0:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204

		seb_time = HAL_GetTick();
 8001be4:	f004 fca8 	bl	8006538 <HAL_GetTick>
 8001be8:	ee07 0a90 	vmov	s15, r0
 8001bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bf0:	edc7 7a8a 	vstr	s15, [r7, #552]	; 0x228
		//printf("mX = %f\tmY = %f\tmZ = %f\n", (double)-1* mag[0], (double) -1 * mag[1], (double)mag[2]);
		MadgwickAHRSupdate(quaternion, gyro_dps[0] * 3.1415 / 180, gyro_dps[1] * 3.1415 / 180, gyro_dps[2] * 3.1415 / 180,  acc_g[0] *9.81, acc_g[1] *9.81, acc_g[2] *9.81, -1* mag[0], -1 * mag[1], mag[2], (seb_time - seb_time_prev) / 1000.0, 0.3);
 8001bf4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001bf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7fe fca9 	bl	8000554 <__aeabi_i2d>
 8001c02:	a3bf      	add	r3, pc, #764	; (adr r3, 8001f00 <app_main+0xd50>)
 8001c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c08:	f7fe fd0e 	bl	8000628 <__aeabi_dmul>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4610      	mov	r0, r2
 8001c12:	4619      	mov	r1, r3
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	4bc0      	ldr	r3, [pc, #768]	; (8001f1c <app_main+0xd6c>)
 8001c1a:	f7fe fe2f 	bl	800087c <__aeabi_ddiv>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4610      	mov	r0, r2
 8001c24:	4619      	mov	r1, r3
 8001c26:	f7fe fff7 	bl	8000c18 <__aeabi_d2f>
 8001c2a:	4604      	mov	r4, r0
 8001c2c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001c30:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7fe fc8d 	bl	8000554 <__aeabi_i2d>
 8001c3a:	a3b1      	add	r3, pc, #708	; (adr r3, 8001f00 <app_main+0xd50>)
 8001c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c40:	f7fe fcf2 	bl	8000628 <__aeabi_dmul>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	4bb2      	ldr	r3, [pc, #712]	; (8001f1c <app_main+0xd6c>)
 8001c52:	f7fe fe13 	bl	800087c <__aeabi_ddiv>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f7fe ffdb 	bl	8000c18 <__aeabi_d2f>
 8001c62:	4605      	mov	r5, r0
 8001c64:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001c68:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe fc71 	bl	8000554 <__aeabi_i2d>
 8001c72:	a3a3      	add	r3, pc, #652	; (adr r3, 8001f00 <app_main+0xd50>)
 8001c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c78:	f7fe fcd6 	bl	8000628 <__aeabi_dmul>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4610      	mov	r0, r2
 8001c82:	4619      	mov	r1, r3
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	4ba4      	ldr	r3, [pc, #656]	; (8001f1c <app_main+0xd6c>)
 8001c8a:	f7fe fdf7 	bl	800087c <__aeabi_ddiv>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4610      	mov	r0, r2
 8001c94:	4619      	mov	r1, r3
 8001c96:	f7fe ffbf 	bl	8000c18 <__aeabi_d2f>
 8001c9a:	4606      	mov	r6, r0
 8001c9c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001ca0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7fe fc55 	bl	8000554 <__aeabi_i2d>
 8001caa:	a397      	add	r3, pc, #604	; (adr r3, 8001f08 <app_main+0xd58>)
 8001cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb0:	f7fe fcba 	bl	8000628 <__aeabi_dmul>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f7fe ffac 	bl	8000c18 <__aeabi_d2f>
 8001cc0:	4680      	mov	r8, r0
 8001cc2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001cc6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fc42 	bl	8000554 <__aeabi_i2d>
 8001cd0:	a38d      	add	r3, pc, #564	; (adr r3, 8001f08 <app_main+0xd58>)
 8001cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd6:	f7fe fca7 	bl	8000628 <__aeabi_dmul>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4610      	mov	r0, r2
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f7fe ff99 	bl	8000c18 <__aeabi_d2f>
 8001ce6:	4681      	mov	r9, r0
 8001ce8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001cec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fc2f 	bl	8000554 <__aeabi_i2d>
 8001cf6:	a384      	add	r3, pc, #528	; (adr r3, 8001f08 <app_main+0xd58>)
 8001cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfc:	f7fe fc94 	bl	8000628 <__aeabi_dmul>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4610      	mov	r0, r2
 8001d06:	4619      	mov	r1, r3
 8001d08:	f7fe ff86 	bl	8000c18 <__aeabi_d2f>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001d12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d16:	425b      	negs	r3, r3
 8001d18:	ee07 3a90 	vmov	s15, r3
 8001d1c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d20:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001d24:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d28:	425b      	negs	r3, r3
 8001d2a:	ee07 3a90 	vmov	s15, r3
 8001d2e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001d32:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001d36:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d3a:	ee07 3a90 	vmov	s15, r3
 8001d3e:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8001d42:	ed97 7a8a 	vldr	s14, [r7, #552]	; 0x228
 8001d46:	edd7 7a9b 	vldr	s15, [r7, #620]	; 0x26c
 8001d4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d4e:	ed9f 5a74 	vldr	s10, [pc, #464]	; 8001f20 <app_main+0xd70>
 8001d52:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8001d56:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001d5a:	ed9f 5a72 	vldr	s10, [pc, #456]	; 8001f24 <app_main+0xd74>
 8001d5e:	eef0 4a47 	vmov.f32	s9, s14
 8001d62:	eeb0 4a65 	vmov.f32	s8, s11
 8001d66:	eef0 3a46 	vmov.f32	s7, s12
 8001d6a:	eeb0 3a66 	vmov.f32	s6, s13
 8001d6e:	ee02 2a90 	vmov	s5, r2
 8001d72:	ee02 9a10 	vmov	s4, r9
 8001d76:	ee01 8a90 	vmov	s3, r8
 8001d7a:	ee01 6a10 	vmov	s2, r6
 8001d7e:	ee00 5a90 	vmov	s1, r5
 8001d82:	ee00 4a10 	vmov	s0, r4
 8001d86:	4618      	mov	r0, r3
 8001d88:	f000 fa6e 	bl	8002268 <MadgwickAHRSupdate>
		seb_time_prev = seb_time;
 8001d8c:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001d90:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
		//MadgwickAHRSupdateIMU(quaternion, gyro_dps[0], gyro_dps[1], gyro_dps[2],  acc_g[0] *9.81, acc_g[1] *9.81, acc_g[2] *9.81, HAL_GetTick() - seb_delta, 0.3);
		time_for_madgwik = (HAL_GetTick() )/1000.0;
 8001d94:	f004 fbd0 	bl	8006538 <HAL_GetTick>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fbca 	bl	8000534 <__aeabi_ui2d>
 8001da0:	f04f 0200 	mov.w	r2, #0
 8001da4:	4b60      	ldr	r3, [pc, #384]	; (8001f28 <app_main+0xd78>)
 8001da6:	f7fe fd69 	bl	800087c <__aeabi_ddiv>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	4610      	mov	r0, r2
 8001db0:	4619      	mov	r1, r3
 8001db2:	f7fe ff31 	bl	8000c18 <__aeabi_d2f>
 8001db6:	4603      	mov	r3, r0
 8001db8:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218

		time_prnt = HAL_GetTick() - time_prnt;
		printf("принт:  %ld\n", time_prnt);
		seb_delta = HAL_GetTick();*/

		nrf24_mode_tx(&nrf24_api_config);
 8001dbc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f00f fdee 	bl	80119a2 <nrf24_mode_tx>
	    //nrf24_mode_tx(&nrf24_api_config);


        switch(fckng_state)
 8001dc6:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8001dca:	2b05      	cmp	r3, #5
 8001dcc:	f63f ac2a 	bhi.w	8001624 <app_main+0x474>
 8001dd0:	a201      	add	r2, pc, #4	; (adr r2, 8001dd8 <app_main+0xc28>)
 8001dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd6:	bf00      	nop
 8001dd8:	08001df1 	.word	0x08001df1
 8001ddc:	08001e79 	.word	0x08001e79
 8001de0:	08001edf 	.word	0x08001edf
 8001de4:	08001f35 	.word	0x08001f35
 8001de8:	08001f71 	.word	0x08001f71
 8001dec:	08001fcf 	.word	0x08001fcf
        {
        case STATE_ON_GND:

			HAL_GPIO_WritePin(LED_PORT, LED_PIN, 1);
 8001df0:	2201      	movs	r2, #1
 8001df2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001df6:	484d      	ldr	r0, [pc, #308]	; (8001f2c <app_main+0xd7c>)
 8001df8:	f005 fb52 	bl	80074a0 <HAL_GPIO_WritePin>
        	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == true)
 8001dfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e00:	484b      	ldr	r0, [pc, #300]	; (8001f30 <app_main+0xd80>)
 8001e02:	f005 fb35 	bl	8007470 <HAL_GPIO_ReadPin>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d130      	bne.n	8001e6e <app_main+0xcbe>
        	{
        		HAL_Delay(100);
 8001e0c:	2064      	movs	r0, #100	; 0x64
 8001e0e:	f004 fb9f 	bl	8006550 <HAL_Delay>
					for(int i = 0; i < 10; i++)
 8001e12:	2300      	movs	r3, #0
 8001e14:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8001e18:	e012      	b.n	8001e40 <app_main+0xc90>
					{
						lux_sun+=photorezistor_get_lux(photorezist);
 8001e1a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001e1e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e22:	f000 f8e9 	bl	8001ff8 <photorezistor_get_lux>
 8001e26:	eeb0 7a40 	vmov.f32	s14, s0
 8001e2a:	edd7 7a9d 	vldr	s15, [r7, #628]	; 0x274
 8001e2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e32:	edc7 7a9d 	vstr	s15, [r7, #628]	; 0x274
					for(int i = 0; i < 10; i++)
 8001e36:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8001e40:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001e44:	2b09      	cmp	r3, #9
 8001e46:	dde8      	ble.n	8001e1a <app_main+0xc6a>
					}
					lux_sun = lux_sun/10;
 8001e48:	ed97 7a9d 	vldr	s14, [r7, #628]	; 0x274
 8001e4c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001e50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e54:	edc7 7a9d 	vstr	s15, [r7, #628]	; 0x274
					fckng_state = STATE_IN_ROCKET;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243
					packet_ma_type_11.state = 1;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
					start_time_io = HAL_GetTick();
 8001e64:	f004 fb68 	bl	8006538 <HAL_GetTick>
 8001e68:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
        	else
        	{
        		start_time_io = HAL_GetTick();
        	}

        	break;
 8001e6c:	e0b3      	b.n	8001fd6 <app_main+0xe26>
        		start_time_io = HAL_GetTick();
 8001e6e:	f004 fb63 	bl	8006538 <HAL_GetTick>
 8001e72:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
        	break;
 8001e76:	e0ae      	b.n	8001fd6 <app_main+0xe26>

        case STATE_IN_ROCKET:
        	if((lux_sun - lux)*KOF < photorezistor_get_lux(photorezist))
 8001e78:	ed97 7a9d 	vldr	s14, [r7, #628]	; 0x274
 8001e7c:	edd7 7a91 	vldr	s15, [r7, #580]	; 0x244
 8001e80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e84:	ee17 0a90 	vmov	r0, s15
 8001e88:	f7fe fb76 	bl	8000578 <__aeabi_f2d>
 8001e8c:	a320      	add	r3, pc, #128	; (adr r3, 8001f10 <app_main+0xd60>)
 8001e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e92:	f7fe fbc9 	bl	8000628 <__aeabi_dmul>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4614      	mov	r4, r2
 8001e9c:	461d      	mov	r5, r3
 8001e9e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001ea2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ea6:	f000 f8a7 	bl	8001ff8 <photorezistor_get_lux>
 8001eaa:	ee10 3a10 	vmov	r3, s0
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7fe fb62 	bl	8000578 <__aeabi_f2d>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4620      	mov	r0, r4
 8001eba:	4629      	mov	r1, r5
 8001ebc:	f7fe fe26 	bl	8000b0c <__aeabi_dcmplt>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d100      	bne.n	8001ec8 <app_main+0xd18>
			{
        		fckng_state = STATE_FALL_OF_THE_STONE;
	        	start_time_io = HAL_GetTick();
				packet_ma_type_11.state = 2;
			}
        	break;
 8001ec6:	e086      	b.n	8001fd6 <app_main+0xe26>
        		fckng_state = STATE_FALL_OF_THE_STONE;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243
	        	start_time_io = HAL_GetTick();
 8001ece:	f004 fb33 	bl	8006538 <HAL_GetTick>
 8001ed2:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
				packet_ma_type_11.state = 2;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
        	break;
 8001edc:	e07b      	b.n	8001fd6 <app_main+0xe26>

        case STATE_FALL_OF_THE_STONE:
        	if(HAL_GetTick() - start_time_io >= TIME_STONE)
 8001ede:	f004 fb2b 	bl	8006538 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	f241 3287 	movw	r2, #4999	; 0x1387
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d970      	bls.n	8001fd4 <app_main+0xe24>
        	{
        		fckng_state = STATE_FALL_IS_NOT_A_STONE;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243
        		packet_ma_type_11.state = 3;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
        	}
        break;
 8001efe:	e069      	b.n	8001fd4 <app_main+0xe24>
 8001f00:	c083126f 	.word	0xc083126f
 8001f04:	400921ca 	.word	0x400921ca
 8001f08:	51eb851f 	.word	0x51eb851f
 8001f0c:	40239eb8 	.word	0x40239eb8
 8001f10:	9999999a 	.word	0x9999999a
 8001f14:	3fe99999 	.word	0x3fe99999
 8001f18:	40020000 	.word	0x40020000
 8001f1c:	40668000 	.word	0x40668000
 8001f20:	447a0000 	.word	0x447a0000
 8001f24:	3e99999a 	.word	0x3e99999a
 8001f28:	408f4000 	.word	0x408f4000
 8001f2c:	40020400 	.word	0x40020400
 8001f30:	40020800 	.word	0x40020800

        case STATE_FALL_IS_NOT_A_STONE:
			HAL_GPIO_WritePin(PEREGIGATEL_PORT, PEREGIGATEL_PIN, 1);//функция для открфтия лепестков
 8001f34:	2201      	movs	r2, #1
 8001f36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f3a:	482b      	ldr	r0, [pc, #172]	; (8001fe8 <app_main+0xe38>)
 8001f3c:	f005 fab0 	bl	80074a0 <HAL_GPIO_WritePin>
        	if(packet_ma_type_11.height_bme <= 350)
 8001f40:	f8d7 01f3 	ldr.w	r0, [r7, #499]	; 0x1f3
 8001f44:	f8d7 11f7 	ldr.w	r1, [r7, #503]	; 0x1f7
 8001f48:	a325      	add	r3, pc, #148	; (adr r3, 8001fe0 <app_main+0xe30>)
 8001f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4e:	f7fe fde7 	bl	8000b20 <__aeabi_dcmple>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d100      	bne.n	8001f5a <app_main+0xdaa>
        	{
        		fckng_state = STATE_FALL_ON_PARACHUTE;
        		packet_ma_type_11.state = 4;
        		start_time_to = HAL_GetTick();
        	}
            break;
 8001f58:	e03d      	b.n	8001fd6 <app_main+0xe26>
        		fckng_state = STATE_FALL_ON_PARACHUTE;
 8001f5a:	2304      	movs	r3, #4
 8001f5c:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243
        		packet_ma_type_11.state = 4;
 8001f60:	2304      	movs	r3, #4
 8001f62:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
        		start_time_to = HAL_GetTick();
 8001f66:	f004 fae7 	bl	8006538 <HAL_GetTick>
 8001f6a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
            break;
 8001f6e:	e032      	b.n	8001fd6 <app_main+0xe26>

        case STATE_FALL_ON_PARACHUTE:
        	HAL_GPIO_WritePin(PARASHUTE_PORT, PARASHUTE_PIN, 1);//откр парашюь
 8001f70:	2201      	movs	r2, #1
 8001f72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f76:	481d      	ldr	r0, [pc, #116]	; (8001fec <app_main+0xe3c>)
 8001f78:	f005 fa92 	bl	80074a0 <HAL_GPIO_WritePin>
        	time_parashute = HAL_GetTick();
 8001f7c:	f004 fadc 	bl	8006538 <HAL_GetTick>
 8001f80:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
        	if(HAL_GetTick() - start_time_io >= TIME_LIDAR)
 8001f84:	f004 fad8 	bl	8006538 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f94:	d21b      	bcs.n	8001fce <app_main+0xe1e>
        	{
        		//ФУНКЦИЯ ЛИДАРА
        	}
        	else if(packet_ma_type_11.height_bme < 10 && (HAL_GetTick() - time_parashute >= TIME_PARASHUTE))
 8001f96:	f8d7 01f3 	ldr.w	r0, [r7, #499]	; 0x1f3
 8001f9a:	f8d7 11f7 	ldr.w	r1, [r7, #503]	; 0x1f7
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <app_main+0xe40>)
 8001fa4:	f7fe fdb2 	bl	8000b0c <__aeabi_dcmplt>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00f      	beq.n	8001fce <app_main+0xe1e>
 8001fae:	f004 fac3 	bl	8006538 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001fbe:	d306      	bcc.n	8001fce <app_main+0xe1e>
        	{
        		fckng_state = STATE_FOUND_ME_PLS;
 8001fc0:	2305      	movs	r3, #5
 8001fc2:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243
        		packet_ma_type_11.state = 5;
 8001fc6:	2305      	movs	r3, #5
 8001fc8:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
        		break;
 8001fcc:	e003      	b.n	8001fd6 <app_main+0xe26>
        	}
        case STATE_FOUND_ME_PLS:
        	//вкл сис поиска
        	if(HAL_GetTick() - start_time_io >= TIME_LIDAR)
 8001fce:	f004 fab3 	bl	8006538 <HAL_GetTick>
			{
				//ФУНКЦИЯ ЛИДАРА
			}
    		break;
 8001fd2:	e000      	b.n	8001fd6 <app_main+0xe26>
        break;
 8001fd4:	bf00      	nop
			nrf24_mode_tx(&nrf24_api_config);
 8001fd6:	f7ff bb25 	b.w	8001624 <app_main+0x474>
 8001fda:	bf00      	nop
 8001fdc:	f3af 8000 	nop.w
 8001fe0:	00000000 	.word	0x00000000
 8001fe4:	4075e000 	.word	0x4075e000
 8001fe8:	40020400 	.word	0x40020400
 8001fec:	40020800 	.word	0x40020800
 8001ff0:	40240000 	.word	0x40240000
 8001ff4:	00000000 	.word	0x00000000

08001ff8 <photorezistor_get_lux>:
#ifdef HAL_ADC_MODULE_ENABLED

extern ADC_HandleTypeDef hadc1;


float photorezistor_get_lux(photorezistor_t ph) {
 8001ff8:	b5b0      	push	{r4, r5, r7, lr}
 8001ffa:	b08a      	sub	sp, #40	; 0x28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	463b      	mov	r3, r7
 8002000:	e883 0003 	stmia.w	r3, {r0, r1}

    ADC_ChannelConfTypeDef sConfig = {0};
 8002004:	f107 030c 	add.w	r3, r7, #12
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
    sConfig.Rank = 1;
 8002012:	2301      	movs	r3, #1
 8002014:	613b      	str	r3, [r7, #16]
    sConfig.Channel = ADC_CHANNEL_0;
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800201a:	2307      	movs	r3, #7
 800201c:	617b      	str	r3, [r7, #20]
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800201e:	f107 030c 	add.w	r3, r7, #12
 8002022:	4619      	mov	r1, r3
 8002024:	4854      	ldr	r0, [pc, #336]	; (8002178 <photorezistor_get_lux+0x180>)
 8002026:	f004 fc7b 	bl	8006920 <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(ph.hadc);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4618      	mov	r0, r3
 800202e:	f004 faf7 	bl	8006620 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(ph.hadc, 100);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2164      	movs	r1, #100	; 0x64
 8002036:	4618      	mov	r0, r3
 8002038:	f004 fbd9 	bl	80067ee <HAL_ADC_PollForConversion>
	float volts = HAL_ADC_GetValue(ph.hadc) * 3.3 / 4095;	//Volts
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4618      	mov	r0, r3
 8002040:	f004 fc60 	bl	8006904 <HAL_ADC_GetValue>
 8002044:	4603      	mov	r3, r0
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fa74 	bl	8000534 <__aeabi_ui2d>
 800204c:	a340      	add	r3, pc, #256	; (adr r3, 8002150 <photorezistor_get_lux+0x158>)
 800204e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002052:	f7fe fae9 	bl	8000628 <__aeabi_dmul>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4610      	mov	r0, r2
 800205c:	4619      	mov	r1, r3
 800205e:	a33e      	add	r3, pc, #248	; (adr r3, 8002158 <photorezistor_get_lux+0x160>)
 8002060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002064:	f7fe fc0a 	bl	800087c <__aeabi_ddiv>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4610      	mov	r0, r2
 800206e:	4619      	mov	r1, r3
 8002070:	f7fe fdd2 	bl	8000c18 <__aeabi_d2f>
 8002074:	4603      	mov	r3, r0
 8002076:	627b      	str	r3, [r7, #36]	; 0x24
	float ohms = volts*(ph.resist)/(3.3-volts);		//Ohms
 8002078:	ed97 7a00 	vldr	s14, [r7]
 800207c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002084:	ee17 0a90 	vmov	r0, s15
 8002088:	f7fe fa76 	bl	8000578 <__aeabi_f2d>
 800208c:	4604      	mov	r4, r0
 800208e:	460d      	mov	r5, r1
 8002090:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002092:	f7fe fa71 	bl	8000578 <__aeabi_f2d>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	a12d      	add	r1, pc, #180	; (adr r1, 8002150 <photorezistor_get_lux+0x158>)
 800209c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80020a0:	f7fe f90a 	bl	80002b8 <__aeabi_dsub>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4620      	mov	r0, r4
 80020aa:	4629      	mov	r1, r5
 80020ac:	f7fe fbe6 	bl	800087c <__aeabi_ddiv>
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	4610      	mov	r0, r2
 80020b6:	4619      	mov	r1, r3
 80020b8:	f7fe fdae 	bl	8000c18 <__aeabi_d2f>
 80020bc:	4603      	mov	r3, r0
 80020be:	623b      	str	r3, [r7, #32]
	float lux = exp((3.823-log(ohms/1000))/0.816)*10.764;	//Lux
 80020c0:	edd7 7a08 	vldr	s15, [r7, #32]
 80020c4:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800217c <photorezistor_get_lux+0x184>
 80020c8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80020cc:	ee16 0a90 	vmov	r0, s13
 80020d0:	f7fe fa52 	bl	8000578 <__aeabi_f2d>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	ec43 2b10 	vmov	d0, r2, r3
 80020dc:	f014 fa00 	bl	80164e0 <log>
 80020e0:	ec53 2b10 	vmov	r2, r3, d0
 80020e4:	a11e      	add	r1, pc, #120	; (adr r1, 8002160 <photorezistor_get_lux+0x168>)
 80020e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80020ea:	f7fe f8e5 	bl	80002b8 <__aeabi_dsub>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4610      	mov	r0, r2
 80020f4:	4619      	mov	r1, r3
 80020f6:	a31c      	add	r3, pc, #112	; (adr r3, 8002168 <photorezistor_get_lux+0x170>)
 80020f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fc:	f7fe fbbe 	bl	800087c <__aeabi_ddiv>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	ec43 2b17 	vmov	d7, r2, r3
 8002108:	eeb0 0a47 	vmov.f32	s0, s14
 800210c:	eef0 0a67 	vmov.f32	s1, s15
 8002110:	f014 f996 	bl	8016440 <exp>
 8002114:	ec51 0b10 	vmov	r0, r1, d0
 8002118:	a315      	add	r3, pc, #84	; (adr r3, 8002170 <photorezistor_get_lux+0x178>)
 800211a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211e:	f7fe fa83 	bl	8000628 <__aeabi_dmul>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4610      	mov	r0, r2
 8002128:	4619      	mov	r1, r3
 800212a:	f7fe fd75 	bl	8000c18 <__aeabi_d2f>
 800212e:	4603      	mov	r3, r0
 8002130:	61fb      	str	r3, [r7, #28]
	HAL_ADC_Stop(ph.hadc);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4618      	mov	r0, r3
 8002136:	f004 fb27 	bl	8006788 <HAL_ADC_Stop>
	return lux;
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	ee07 3a90 	vmov	s15, r3
}
 8002140:	eeb0 0a67 	vmov.f32	s0, s15
 8002144:	3728      	adds	r7, #40	; 0x28
 8002146:	46bd      	mov	sp, r7
 8002148:	bdb0      	pop	{r4, r5, r7, pc}
 800214a:	bf00      	nop
 800214c:	f3af 8000 	nop.w
 8002150:	66666666 	.word	0x66666666
 8002154:	400a6666 	.word	0x400a6666
 8002158:	00000000 	.word	0x00000000
 800215c:	40affe00 	.word	0x40affe00
 8002160:	0624dd2f 	.word	0x0624dd2f
 8002164:	400e9581 	.word	0x400e9581
 8002168:	083126e9 	.word	0x083126e9
 800216c:	3fea1cac 	.word	0x3fea1cac
 8002170:	020c49ba 	.word	0x020c49ba
 8002174:	4025872b 	.word	0x4025872b
 8002178:	200029b4 	.word	0x200029b4
 800217c:	447a0000 	.word	0x447a0000

08002180 <get_voltage_cheto>:


float get_voltage_cheto()
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 8002186:	1d3b      	adds	r3, r7, #4
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
    sConfig.Rank = 1;
 8002192:	2301      	movs	r3, #1
 8002194:	60bb      	str	r3, [r7, #8]
    sConfig.Channel = ADC_CHANNEL_3;
 8002196:	2303      	movs	r3, #3
 8002198:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800219a:	2307      	movs	r3, #7
 800219c:	60fb      	str	r3, [r7, #12]
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800219e:	1d3b      	adds	r3, r7, #4
 80021a0:	4619      	mov	r1, r3
 80021a2:	481d      	ldr	r0, [pc, #116]	; (8002218 <get_voltage_cheto+0x98>)
 80021a4:	f004 fbbc 	bl	8006920 <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(&hadc1);
 80021a8:	481b      	ldr	r0, [pc, #108]	; (8002218 <get_voltage_cheto+0x98>)
 80021aa:	f004 fa39 	bl	8006620 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 80021ae:	2164      	movs	r1, #100	; 0x64
 80021b0:	4819      	ldr	r0, [pc, #100]	; (8002218 <get_voltage_cheto+0x98>)
 80021b2:	f004 fb1c 	bl	80067ee <HAL_ADC_PollForConversion>
	float volts = HAL_ADC_GetValue(&hadc1) * 3.3 / 4095;	//Volts
 80021b6:	4818      	ldr	r0, [pc, #96]	; (8002218 <get_voltage_cheto+0x98>)
 80021b8:	f004 fba4 	bl	8006904 <HAL_ADC_GetValue>
 80021bc:	4603      	mov	r3, r0
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe f9b8 	bl	8000534 <__aeabi_ui2d>
 80021c4:	a310      	add	r3, pc, #64	; (adr r3, 8002208 <get_voltage_cheto+0x88>)
 80021c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ca:	f7fe fa2d 	bl	8000628 <__aeabi_dmul>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4610      	mov	r0, r2
 80021d4:	4619      	mov	r1, r3
 80021d6:	a30e      	add	r3, pc, #56	; (adr r3, 8002210 <get_voltage_cheto+0x90>)
 80021d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021dc:	f7fe fb4e 	bl	800087c <__aeabi_ddiv>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4610      	mov	r0, r2
 80021e6:	4619      	mov	r1, r3
 80021e8:	f7fe fd16 	bl	8000c18 <__aeabi_d2f>
 80021ec:	4603      	mov	r3, r0
 80021ee:	617b      	str	r3, [r7, #20]
	HAL_ADC_Stop(&hadc1);
 80021f0:	4809      	ldr	r0, [pc, #36]	; (8002218 <get_voltage_cheto+0x98>)
 80021f2:	f004 fac9 	bl	8006788 <HAL_ADC_Stop>
	return volts;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	ee07 3a90 	vmov	s15, r3

}
 80021fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	66666666 	.word	0x66666666
 800220c:	400a6666 	.word	0x400a6666
 8002210:	00000000 	.word	0x00000000
 8002214:	40affe00 	.word	0x40affe00
 8002218:	200029b4 	.word	0x200029b4

0800221c <invSqrt>:
//#define sampleFreq	512.0f		// sample frequency in Hz
//#define betaDef		0.1f		// 2 * proportional gain

volatile float q0 = 1.0f, q1 = 0.0f, q2 = 0.0f, q3 = 0.0f;

static float invSqrt(float x) {
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	ed87 0a01 	vstr	s0, [r7, #4]
	i = 0x5f3759df - (i>>1);
	y = *(float*)&i;
	y = y * (1.5f - (halfx * y * y));
	return y;*/

	return 1/sqrt(x);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7fe f9a6 	bl	8000578 <__aeabi_f2d>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	ec43 2b10 	vmov	d0, r2, r3
 8002234:	f014 fa4a 	bl	80166cc <sqrt>
 8002238:	ec53 2b10 	vmov	r2, r3, d0
 800223c:	f04f 0000 	mov.w	r0, #0
 8002240:	4908      	ldr	r1, [pc, #32]	; (8002264 <invSqrt+0x48>)
 8002242:	f7fe fb1b 	bl	800087c <__aeabi_ddiv>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	4610      	mov	r0, r2
 800224c:	4619      	mov	r1, r3
 800224e:	f7fe fce3 	bl	8000c18 <__aeabi_d2f>
 8002252:	4603      	mov	r3, r0
 8002254:	ee07 3a90 	vmov	s15, r3
}
 8002258:	eeb0 0a67 	vmov.f32	s0, s15
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	3ff00000 	.word	0x3ff00000

08002268 <MadgwickAHRSupdate>:

void MadgwickAHRSupdate(float* quaternion, float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz, float dt, float beta) {
 8002268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800226c:	b0b6      	sub	sp, #216	; 0xd8
 800226e:	af00      	add	r7, sp, #0
 8002270:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002272:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
 8002276:	edc7 0a0d 	vstr	s1, [r7, #52]	; 0x34
 800227a:	ed87 1a0c 	vstr	s2, [r7, #48]	; 0x30
 800227e:	edc7 1a0b 	vstr	s3, [r7, #44]	; 0x2c
 8002282:	ed87 2a0a 	vstr	s4, [r7, #40]	; 0x28
 8002286:	edc7 2a09 	vstr	s5, [r7, #36]	; 0x24
 800228a:	ed87 3a08 	vstr	s6, [r7, #32]
 800228e:	edc7 3a07 	vstr	s7, [r7, #28]
 8002292:	ed87 4a06 	vstr	s8, [r7, #24]
 8002296:	edc7 4a05 	vstr	s9, [r7, #20]
 800229a:	ed87 5a04 	vstr	s10, [r7, #16]
#	pragma GCC diagnostic ignored "-Wunused-but-set-variable"
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;
#	pragma GCC diagnostic pop

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 800229e:	edd7 7a08 	vldr	s15, [r7, #32]
 80022a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80022a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022aa:	d122      	bne.n	80022f2 <MadgwickAHRSupdate+0x8a>
 80022ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80022b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80022b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b8:	d11b      	bne.n	80022f2 <MadgwickAHRSupdate+0x8a>
 80022ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80022be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80022c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c6:	d114      	bne.n	80022f2 <MadgwickAHRSupdate+0x8a>
		MadgwickAHRSupdateIMU(quaternion, gx, gy, gz, ax, ay, az, dt, beta);
 80022c8:	edd7 3a04 	vldr	s7, [r7, #16]
 80022cc:	ed97 3a05 	vldr	s6, [r7, #20]
 80022d0:	edd7 2a09 	vldr	s5, [r7, #36]	; 0x24
 80022d4:	ed97 2a0a 	vldr	s4, [r7, #40]	; 0x28
 80022d8:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 80022dc:	ed97 1a0c 	vldr	s2, [r7, #48]	; 0x30
 80022e0:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 80022e4:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 80022e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80022ea:	f001 f99d 	bl	8003628 <MadgwickAHRSupdateIMU>
		return;
 80022ee:	f001 b98c 	b.w	800360a <MadgwickAHRSupdate+0x13a2>
	}

	float sampleFreq = 1 / dt;
 80022f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022f6:	ed97 7a05 	vldr	s14, [r7, #20]
 80022fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022fe:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8002302:	4be6      	ldr	r3, [pc, #920]	; (800269c <MadgwickAHRSupdate+0x434>)
 8002304:	edd3 7a00 	vldr	s15, [r3]
 8002308:	eeb1 7a67 	vneg.f32	s14, s15
 800230c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002310:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002314:	4be2      	ldr	r3, [pc, #904]	; (80026a0 <MadgwickAHRSupdate+0x438>)
 8002316:	edd3 6a00 	vldr	s13, [r3]
 800231a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800231e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002322:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002326:	4bdf      	ldr	r3, [pc, #892]	; (80026a4 <MadgwickAHRSupdate+0x43c>)
 8002328:	edd3 6a00 	vldr	s13, [r3]
 800232c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002330:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002334:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002338:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800233c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002340:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8002344:	4bd8      	ldr	r3, [pc, #864]	; (80026a8 <MadgwickAHRSupdate+0x440>)
 8002346:	ed93 7a00 	vldr	s14, [r3]
 800234a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800234e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002352:	4bd3      	ldr	r3, [pc, #844]	; (80026a0 <MadgwickAHRSupdate+0x438>)
 8002354:	edd3 6a00 	vldr	s13, [r3]
 8002358:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800235c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002360:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002364:	4bcf      	ldr	r3, [pc, #828]	; (80026a4 <MadgwickAHRSupdate+0x43c>)
 8002366:	edd3 6a00 	vldr	s13, [r3]
 800236a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800236e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002372:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002376:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800237a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800237e:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8002382:	4bc9      	ldr	r3, [pc, #804]	; (80026a8 <MadgwickAHRSupdate+0x440>)
 8002384:	ed93 7a00 	vldr	s14, [r3]
 8002388:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800238c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002390:	4bc2      	ldr	r3, [pc, #776]	; (800269c <MadgwickAHRSupdate+0x434>)
 8002392:	edd3 6a00 	vldr	s13, [r3]
 8002396:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800239a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800239e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023a2:	4bc0      	ldr	r3, [pc, #768]	; (80026a4 <MadgwickAHRSupdate+0x43c>)
 80023a4:	edd3 6a00 	vldr	s13, [r3]
 80023a8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80023ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80023b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023bc:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80023c0:	4bb9      	ldr	r3, [pc, #740]	; (80026a8 <MadgwickAHRSupdate+0x440>)
 80023c2:	ed93 7a00 	vldr	s14, [r3]
 80023c6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80023ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023ce:	4bb3      	ldr	r3, [pc, #716]	; (800269c <MadgwickAHRSupdate+0x434>)
 80023d0:	edd3 6a00 	vldr	s13, [r3]
 80023d4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80023d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023e0:	4baf      	ldr	r3, [pc, #700]	; (80026a0 <MadgwickAHRSupdate+0x438>)
 80023e2:	edd3 6a00 	vldr	s13, [r3]
 80023e6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80023ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023f2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80023f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023fa:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80023fe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002402:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800240a:	d10e      	bne.n	800242a <MadgwickAHRSupdate+0x1c2>
 800240c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002410:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002418:	d107      	bne.n	800242a <MadgwickAHRSupdate+0x1c2>
 800241a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800241e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002426:	f001 8041 	beq.w	80034ac <MadgwickAHRSupdate+0x1244>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800242a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800242e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002432:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002436:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800243a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800243e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002442:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002446:	ee77 7a27 	vadd.f32	s15, s14, s15
 800244a:	eeb0 0a67 	vmov.f32	s0, s15
 800244e:	f7ff fee5 	bl	800221c <invSqrt>
 8002452:	ed87 0a30 	vstr	s0, [r7, #192]	; 0xc0
		ax *= recipNorm;
 8002456:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800245a:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800245e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002462:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		ay *= recipNorm;
 8002466:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800246a:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800246e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002472:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		az *= recipNorm;
 8002476:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800247a:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800247e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002482:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8002486:	edd7 7a08 	vldr	s15, [r7, #32]
 800248a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800248e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002492:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002496:	ee37 7a27 	vadd.f32	s14, s14, s15
 800249a:	edd7 7a06 	vldr	s15, [r7, #24]
 800249e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024a6:	eeb0 0a67 	vmov.f32	s0, s15
 80024aa:	f7ff feb7 	bl	800221c <invSqrt>
 80024ae:	ed87 0a30 	vstr	s0, [r7, #192]	; 0xc0
		mx *= recipNorm;
 80024b2:	ed97 7a08 	vldr	s14, [r7, #32]
 80024b6:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80024ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024be:	edc7 7a08 	vstr	s15, [r7, #32]
		my *= recipNorm;
 80024c2:	ed97 7a07 	vldr	s14, [r7, #28]
 80024c6:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80024ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ce:	edc7 7a07 	vstr	s15, [r7, #28]
		mz *= recipNorm;
 80024d2:	ed97 7a06 	vldr	s14, [r7, #24]
 80024d6:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80024da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024de:	edc7 7a06 	vstr	s15, [r7, #24]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 80024e2:	4b71      	ldr	r3, [pc, #452]	; (80026a8 <MadgwickAHRSupdate+0x440>)
 80024e4:	edd3 7a00 	vldr	s15, [r3]
 80024e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024ec:	ed97 7a08 	vldr	s14, [r7, #32]
 80024f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f4:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
		_2q0my = 2.0f * q0 * my;
 80024f8:	4b6b      	ldr	r3, [pc, #428]	; (80026a8 <MadgwickAHRSupdate+0x440>)
 80024fa:	edd3 7a00 	vldr	s15, [r3]
 80024fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002502:	ed97 7a07 	vldr	s14, [r7, #28]
 8002506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800250a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
		_2q0mz = 2.0f * q0 * mz;
 800250e:	4b66      	ldr	r3, [pc, #408]	; (80026a8 <MadgwickAHRSupdate+0x440>)
 8002510:	edd3 7a00 	vldr	s15, [r3]
 8002514:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002518:	ed97 7a06 	vldr	s14, [r7, #24]
 800251c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002520:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		_2q1mx = 2.0f * q1 * mx;
 8002524:	4b5d      	ldr	r3, [pc, #372]	; (800269c <MadgwickAHRSupdate+0x434>)
 8002526:	edd3 7a00 	vldr	s15, [r3]
 800252a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800252e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002536:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		_2q0 = 2.0f * q0;
 800253a:	4b5b      	ldr	r3, [pc, #364]	; (80026a8 <MadgwickAHRSupdate+0x440>)
 800253c:	edd3 7a00 	vldr	s15, [r3]
 8002540:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002544:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		_2q1 = 2.0f * q1;
 8002548:	4b54      	ldr	r3, [pc, #336]	; (800269c <MadgwickAHRSupdate+0x434>)
 800254a:	edd3 7a00 	vldr	s15, [r3]
 800254e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002552:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
		_2q2 = 2.0f * q2;
 8002556:	4b52      	ldr	r3, [pc, #328]	; (80026a0 <MadgwickAHRSupdate+0x438>)
 8002558:	edd3 7a00 	vldr	s15, [r3]
 800255c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002560:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
		_2q3 = 2.0f * q3;
 8002564:	4b4f      	ldr	r3, [pc, #316]	; (80026a4 <MadgwickAHRSupdate+0x43c>)
 8002566:	edd3 7a00 	vldr	s15, [r3]
 800256a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800256e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		_2q0q2 = 2.0f * q0 * q2;
 8002572:	4b4d      	ldr	r3, [pc, #308]	; (80026a8 <MadgwickAHRSupdate+0x440>)
 8002574:	edd3 7a00 	vldr	s15, [r3]
 8002578:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800257c:	4b48      	ldr	r3, [pc, #288]	; (80026a0 <MadgwickAHRSupdate+0x438>)
 800257e:	edd3 7a00 	vldr	s15, [r3]
 8002582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002586:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		_2q2q3 = 2.0f * q2 * q3;
 800258a:	4b45      	ldr	r3, [pc, #276]	; (80026a0 <MadgwickAHRSupdate+0x438>)
 800258c:	edd3 7a00 	vldr	s15, [r3]
 8002590:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002594:	4b43      	ldr	r3, [pc, #268]	; (80026a4 <MadgwickAHRSupdate+0x43c>)
 8002596:	edd3 7a00 	vldr	s15, [r3]
 800259a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800259e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		q0q0 = q0 * q0;
 80025a2:	4b41      	ldr	r3, [pc, #260]	; (80026a8 <MadgwickAHRSupdate+0x440>)
 80025a4:	ed93 7a00 	vldr	s14, [r3]
 80025a8:	4b3f      	ldr	r3, [pc, #252]	; (80026a8 <MadgwickAHRSupdate+0x440>)
 80025aa:	edd3 7a00 	vldr	s15, [r3]
 80025ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b2:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		q0q1 = q0 * q1;
 80025b6:	4b3c      	ldr	r3, [pc, #240]	; (80026a8 <MadgwickAHRSupdate+0x440>)
 80025b8:	ed93 7a00 	vldr	s14, [r3]
 80025bc:	4b37      	ldr	r3, [pc, #220]	; (800269c <MadgwickAHRSupdate+0x434>)
 80025be:	edd3 7a00 	vldr	s15, [r3]
 80025c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025c6:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		q0q2 = q0 * q2;
 80025ca:	4b37      	ldr	r3, [pc, #220]	; (80026a8 <MadgwickAHRSupdate+0x440>)
 80025cc:	ed93 7a00 	vldr	s14, [r3]
 80025d0:	4b33      	ldr	r3, [pc, #204]	; (80026a0 <MadgwickAHRSupdate+0x438>)
 80025d2:	edd3 7a00 	vldr	s15, [r3]
 80025d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025da:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		q0q3 = q0 * q3;
 80025de:	4b32      	ldr	r3, [pc, #200]	; (80026a8 <MadgwickAHRSupdate+0x440>)
 80025e0:	ed93 7a00 	vldr	s14, [r3]
 80025e4:	4b2f      	ldr	r3, [pc, #188]	; (80026a4 <MadgwickAHRSupdate+0x43c>)
 80025e6:	edd3 7a00 	vldr	s15, [r3]
 80025ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ee:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		q1q1 = q1 * q1;
 80025f2:	4b2a      	ldr	r3, [pc, #168]	; (800269c <MadgwickAHRSupdate+0x434>)
 80025f4:	ed93 7a00 	vldr	s14, [r3]
 80025f8:	4b28      	ldr	r3, [pc, #160]	; (800269c <MadgwickAHRSupdate+0x434>)
 80025fa:	edd3 7a00 	vldr	s15, [r3]
 80025fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002602:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		q1q2 = q1 * q2;
 8002606:	4b25      	ldr	r3, [pc, #148]	; (800269c <MadgwickAHRSupdate+0x434>)
 8002608:	ed93 7a00 	vldr	s14, [r3]
 800260c:	4b24      	ldr	r3, [pc, #144]	; (80026a0 <MadgwickAHRSupdate+0x438>)
 800260e:	edd3 7a00 	vldr	s15, [r3]
 8002612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002616:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		q1q3 = q1 * q3;
 800261a:	4b20      	ldr	r3, [pc, #128]	; (800269c <MadgwickAHRSupdate+0x434>)
 800261c:	ed93 7a00 	vldr	s14, [r3]
 8002620:	4b20      	ldr	r3, [pc, #128]	; (80026a4 <MadgwickAHRSupdate+0x43c>)
 8002622:	edd3 7a00 	vldr	s15, [r3]
 8002626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800262a:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q2q2 = q2 * q2;
 800262e:	4b1c      	ldr	r3, [pc, #112]	; (80026a0 <MadgwickAHRSupdate+0x438>)
 8002630:	ed93 7a00 	vldr	s14, [r3]
 8002634:	4b1a      	ldr	r3, [pc, #104]	; (80026a0 <MadgwickAHRSupdate+0x438>)
 8002636:	edd3 7a00 	vldr	s15, [r3]
 800263a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800263e:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q2q3 = q2 * q3;
 8002642:	4b17      	ldr	r3, [pc, #92]	; (80026a0 <MadgwickAHRSupdate+0x438>)
 8002644:	ed93 7a00 	vldr	s14, [r3]
 8002648:	4b16      	ldr	r3, [pc, #88]	; (80026a4 <MadgwickAHRSupdate+0x43c>)
 800264a:	edd3 7a00 	vldr	s15, [r3]
 800264e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002652:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q3q3 = q3 * q3;
 8002656:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <MadgwickAHRSupdate+0x43c>)
 8002658:	ed93 7a00 	vldr	s14, [r3]
 800265c:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <MadgwickAHRSupdate+0x43c>)
 800265e:	edd3 7a00 	vldr	s15, [r3]
 8002662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002666:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 800266a:	ed97 7a08 	vldr	s14, [r7, #32]
 800266e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002672:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002676:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <MadgwickAHRSupdate+0x43c>)
 8002678:	edd3 6a00 	vldr	s13, [r3]
 800267c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002680:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002684:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <MadgwickAHRSupdate+0x438>)
 800268a:	edd3 6a00 	vldr	s13, [r3]
 800268e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8002692:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002696:	ee37 7a27 	vadd.f32	s14, s14, s15
 800269a:	e007      	b.n	80026ac <MadgwickAHRSupdate+0x444>
 800269c:	200022cc 	.word	0x200022cc
 80026a0:	200022d0 	.word	0x200022d0
 80026a4:	200022d4 	.word	0x200022d4
 80026a8:	20000004 	.word	0x20000004
 80026ac:	edd7 6a08 	vldr	s13, [r7, #32]
 80026b0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80026b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026bc:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 80026c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80026c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80026c8:	4bef      	ldr	r3, [pc, #956]	; (8002a88 <MadgwickAHRSupdate+0x820>)
 80026ca:	edd3 7a00 	vldr	s15, [r3]
 80026ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026d6:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 80026da:	edd7 7a06 	vldr	s15, [r7, #24]
 80026de:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80026e2:	4bea      	ldr	r3, [pc, #936]	; (8002a8c <MadgwickAHRSupdate+0x824>)
 80026e4:	edd3 7a00 	vldr	s15, [r3]
 80026e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026f0:	edd7 6a08 	vldr	s13, [r7, #32]
 80026f4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80026f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002700:	edd7 6a08 	vldr	s13, [r7, #32]
 8002704:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002708:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800270c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002710:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8002714:	4bdd      	ldr	r3, [pc, #884]	; (8002a8c <MadgwickAHRSupdate+0x824>)
 8002716:	ed93 7a00 	vldr	s14, [r3]
 800271a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800271e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002722:	edd7 6a07 	vldr	s13, [r7, #28]
 8002726:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800272a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800272e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002732:	4bd7      	ldr	r3, [pc, #860]	; (8002a90 <MadgwickAHRSupdate+0x828>)
 8002734:	edd3 6a00 	vldr	s13, [r3]
 8002738:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800273c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002740:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002744:	4bd0      	ldr	r3, [pc, #832]	; (8002a88 <MadgwickAHRSupdate+0x820>)
 8002746:	edd3 6a00 	vldr	s13, [r3]
 800274a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800274e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002752:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002756:	edd7 6a07 	vldr	s13, [r7, #28]
 800275a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800275e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002762:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002766:	edd7 6a07 	vldr	s13, [r7, #28]
 800276a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800276e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002772:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002776:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 800277a:	edd7 7a06 	vldr	s15, [r7, #24]
 800277e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002782:	4bc2      	ldr	r3, [pc, #776]	; (8002a8c <MadgwickAHRSupdate+0x824>)
 8002784:	edd3 7a00 	vldr	s15, [r3]
 8002788:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800278c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002790:	edd7 6a07 	vldr	s13, [r7, #28]
 8002794:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002798:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800279c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027a0:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		_2bx = sqrt(hx * hx + hy * hy);
 80027a4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80027a8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80027ac:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80027b0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80027b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b8:	ee17 0a90 	vmov	r0, s15
 80027bc:	f7fd fedc 	bl	8000578 <__aeabi_f2d>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	ec43 2b10 	vmov	d0, r2, r3
 80027c8:	f013 ff80 	bl	80166cc <sqrt>
 80027cc:	ec53 2b10 	vmov	r2, r3, d0
 80027d0:	4610      	mov	r0, r2
 80027d2:	4619      	mov	r1, r3
 80027d4:	f7fe fa20 	bl	8000c18 <__aeabi_d2f>
 80027d8:	4603      	mov	r3, r0
 80027da:	667b      	str	r3, [r7, #100]	; 0x64
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 80027dc:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80027e0:	eeb1 7a67 	vneg.f32	s14, s15
 80027e4:	4ba8      	ldr	r3, [pc, #672]	; (8002a88 <MadgwickAHRSupdate+0x820>)
 80027e6:	edd3 7a00 	vldr	s15, [r3]
 80027ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027ee:	4ba8      	ldr	r3, [pc, #672]	; (8002a90 <MadgwickAHRSupdate+0x828>)
 80027f0:	edd3 6a00 	vldr	s13, [r3]
 80027f4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80027f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002800:	edd7 6a06 	vldr	s13, [r7, #24]
 8002804:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002808:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800280c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002810:	4b9e      	ldr	r3, [pc, #632]	; (8002a8c <MadgwickAHRSupdate+0x824>)
 8002812:	edd3 6a00 	vldr	s13, [r3]
 8002816:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800281a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800281e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002822:	edd7 6a06 	vldr	s13, [r7, #24]
 8002826:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800282a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800282e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002832:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8002836:	edd7 7a07 	vldr	s15, [r7, #28]
 800283a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800283e:	4b93      	ldr	r3, [pc, #588]	; (8002a8c <MadgwickAHRSupdate+0x824>)
 8002840:	edd3 7a00 	vldr	s15, [r3]
 8002844:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002848:	ee37 7a27 	vadd.f32	s14, s14, s15
 800284c:	edd7 6a06 	vldr	s13, [r7, #24]
 8002850:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002854:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002858:	ee37 7a67 	vsub.f32	s14, s14, s15
 800285c:	edd7 6a06 	vldr	s13, [r7, #24]
 8002860:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002864:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800286c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		_4bx = 2.0f * _2bx;
 8002870:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002874:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002878:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		_4bz = 2.0f * _2bz;
 800287c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002880:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002884:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		float _8bx = 2.0f * _4bx;
 8002888:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800288c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002890:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		float _8bz = 2.0f * _4bz;
 8002894:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002898:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800289c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

		// Gradient decent algorithm corrective step
		s0= -_2q2*(2*(q1q3 - q0q2) - ax)    +   _2q1*(2*(q0q1 + q2q3) - ay)   +  -_4bz*q2*(_4bx*(0.5 - q2q2 - q3q3) + _4bz*(q1q3 - q0q2) - mx)   +   (-_4bx*q3+_4bz*q1)*(_4bx*(q1q2 - q0q3) + _4bz*(q0q1 + q2q3) - my)    +   _4bx*q2*(_4bx*(q0q2 + q1q3) + _4bz*(0.5 - q1q1 - q2q2) - mz);
 80028a0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80028a4:	eeb1 7a67 	vneg.f32	s14, s15
 80028a8:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 80028ac:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80028b0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80028b4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80028b8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80028bc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80028c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028c4:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 80028c8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80028cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028d0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80028d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80028d8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80028dc:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80028e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028e8:	ee17 0a90 	vmov	r0, s15
 80028ec:	f7fd fe44 	bl	8000578 <__aeabi_f2d>
 80028f0:	4604      	mov	r4, r0
 80028f2:	460d      	mov	r5, r1
 80028f4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80028f8:	eeb1 7a67 	vneg.f32	s14, s15
 80028fc:	4b62      	ldr	r3, [pc, #392]	; (8002a88 <MadgwickAHRSupdate+0x820>)
 80028fe:	edd3 7a00 	vldr	s15, [r3]
 8002902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002906:	ee17 0a90 	vmov	r0, s15
 800290a:	f7fd fe35 	bl	8000578 <__aeabi_f2d>
 800290e:	4680      	mov	r8, r0
 8002910:	4689      	mov	r9, r1
 8002912:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002914:	f7fd fe30 	bl	8000578 <__aeabi_f2d>
 8002918:	4682      	mov	sl, r0
 800291a:	468b      	mov	fp, r1
 800291c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800291e:	f7fd fe2b 	bl	8000578 <__aeabi_f2d>
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	f04f 0000 	mov.w	r0, #0
 800292a:	495a      	ldr	r1, [pc, #360]	; (8002a94 <MadgwickAHRSupdate+0x82c>)
 800292c:	f7fd fcc4 	bl	80002b8 <__aeabi_dsub>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002938:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800293a:	f7fd fe1d 	bl	8000578 <__aeabi_f2d>
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002946:	f7fd fcb7 	bl	80002b8 <__aeabi_dsub>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4650      	mov	r0, sl
 8002950:	4659      	mov	r1, fp
 8002952:	f7fd fe69 	bl	8000628 <__aeabi_dmul>
 8002956:	4602      	mov	r2, r0
 8002958:	460b      	mov	r3, r1
 800295a:	4692      	mov	sl, r2
 800295c:	469b      	mov	fp, r3
 800295e:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002962:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002966:	ee37 7a67 	vsub.f32	s14, s14, s15
 800296a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800296e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002972:	ee17 0a90 	vmov	r0, s15
 8002976:	f7fd fdff 	bl	8000578 <__aeabi_f2d>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	4650      	mov	r0, sl
 8002980:	4659      	mov	r1, fp
 8002982:	f7fd fc9b 	bl	80002bc <__adddf3>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	4692      	mov	sl, r2
 800298c:	469b      	mov	fp, r3
 800298e:	6a38      	ldr	r0, [r7, #32]
 8002990:	f7fd fdf2 	bl	8000578 <__aeabi_f2d>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4650      	mov	r0, sl
 800299a:	4659      	mov	r1, fp
 800299c:	f7fd fc8c 	bl	80002b8 <__aeabi_dsub>
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	4640      	mov	r0, r8
 80029a6:	4649      	mov	r1, r9
 80029a8:	f7fd fe3e 	bl	8000628 <__aeabi_dmul>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4620      	mov	r0, r4
 80029b2:	4629      	mov	r1, r5
 80029b4:	f7fd fc82 	bl	80002bc <__adddf3>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4614      	mov	r4, r2
 80029be:	461d      	mov	r5, r3
 80029c0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80029c4:	eeb1 7a67 	vneg.f32	s14, s15
 80029c8:	4b30      	ldr	r3, [pc, #192]	; (8002a8c <MadgwickAHRSupdate+0x824>)
 80029ca:	edd3 7a00 	vldr	s15, [r3]
 80029ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029d2:	4b2f      	ldr	r3, [pc, #188]	; (8002a90 <MadgwickAHRSupdate+0x828>)
 80029d4:	edd3 6a00 	vldr	s13, [r3]
 80029d8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80029dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029e4:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 80029e8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80029ec:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80029f0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80029f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80029f8:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 80029fc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002a00:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002a04:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002a08:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002a0c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002a10:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a14:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a1c:	ee17 0a90 	vmov	r0, s15
 8002a20:	f7fd fdaa 	bl	8000578 <__aeabi_f2d>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4620      	mov	r0, r4
 8002a2a:	4629      	mov	r1, r5
 8002a2c:	f7fd fc46 	bl	80002bc <__adddf3>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002a38:	4b13      	ldr	r3, [pc, #76]	; (8002a88 <MadgwickAHRSupdate+0x820>)
 8002a3a:	ed93 7a00 	vldr	s14, [r3]
 8002a3e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a46:	ee17 0a90 	vmov	r0, s15
 8002a4a:	f7fd fd95 	bl	8000578 <__aeabi_f2d>
 8002a4e:	4680      	mov	r8, r0
 8002a50:	4689      	mov	r9, r1
 8002a52:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002a56:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002a5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a5e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a66:	ee17 0a90 	vmov	r0, s15
 8002a6a:	f7fd fd85 	bl	8000578 <__aeabi_f2d>
 8002a6e:	4682      	mov	sl, r0
 8002a70:	468b      	mov	fp, r1
 8002a72:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002a74:	f7fd fd80 	bl	8000578 <__aeabi_f2d>
 8002a78:	e9c7 0100 	strd	r0, r1, [r7]
 8002a7c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002a80:	f7fd fd7a 	bl	8000578 <__aeabi_f2d>
 8002a84:	e008      	b.n	8002a98 <MadgwickAHRSupdate+0x830>
 8002a86:	bf00      	nop
 8002a88:	200022d0 	.word	0x200022d0
 8002a8c:	200022d4 	.word	0x200022d4
 8002a90:	200022cc 	.word	0x200022cc
 8002a94:	3fe00000 	.word	0x3fe00000
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	f04f 0000 	mov.w	r0, #0
 8002aa0:	49e9      	ldr	r1, [pc, #932]	; (8002e48 <MadgwickAHRSupdate+0xbe0>)
 8002aa2:	f7fd fc09 	bl	80002b8 <__aeabi_dsub>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4614      	mov	r4, r2
 8002aac:	461d      	mov	r5, r3
 8002aae:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002ab0:	f7fd fd62 	bl	8000578 <__aeabi_f2d>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	4620      	mov	r0, r4
 8002aba:	4629      	mov	r1, r5
 8002abc:	f7fd fbfc 	bl	80002b8 <__aeabi_dsub>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ac8:	f7fd fdae 	bl	8000628 <__aeabi_dmul>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4650      	mov	r0, sl
 8002ad2:	4659      	mov	r1, fp
 8002ad4:	f7fd fbf2 	bl	80002bc <__adddf3>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4614      	mov	r4, r2
 8002ade:	461d      	mov	r5, r3
 8002ae0:	69b8      	ldr	r0, [r7, #24]
 8002ae2:	f7fd fd49 	bl	8000578 <__aeabi_f2d>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4620      	mov	r0, r4
 8002aec:	4629      	mov	r1, r5
 8002aee:	f7fd fbe3 	bl	80002b8 <__aeabi_dsub>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	4640      	mov	r0, r8
 8002af8:	4649      	mov	r1, r9
 8002afa:	f7fd fd95 	bl	8000628 <__aeabi_dmul>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b06:	f7fd fbd9 	bl	80002bc <__adddf3>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	4610      	mov	r0, r2
 8002b10:	4619      	mov	r1, r3
 8002b12:	f7fe f881 	bl	8000c18 <__aeabi_d2f>
 8002b16:	4603      	mov	r3, r0
 8002b18:	64fb      	str	r3, [r7, #76]	; 0x4c
		s1= _2q3*(2*(q1q3 - q0q2) - ax) +   _2q0*(2*(q0q1 + q2q3) - ay) +   -4*q1*(2*(0.5 - q1q1 - q2q2) - az)    +   _4bz*q3*(_4bx*(0.5 - q2q2 - q3q3) + _4bz*(q1q3 - q0q2) - mx)   + (_4bx*q2+_4bz*q0)*(_4bx*(q1q2 - q0q3) + _4bz*(q0q1 + q2q3) - my)   +   (_4bx*q3-_8bz*q1)*(_4bx*(q0q2 + q1q3) + _4bz*(0.5 - q1q1 - q2q2) - mz);
 8002b1a:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002b1e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002b22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b26:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002b2a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002b2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b32:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002b36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b3a:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8002b3e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b46:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002b4a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002b4e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002b52:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002b56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b5e:	ee17 0a90 	vmov	r0, s15
 8002b62:	f7fd fd09 	bl	8000578 <__aeabi_f2d>
 8002b66:	4604      	mov	r4, r0
 8002b68:	460d      	mov	r5, r1
 8002b6a:	4bb8      	ldr	r3, [pc, #736]	; (8002e4c <MadgwickAHRSupdate+0xbe4>)
 8002b6c:	edd3 7a00 	vldr	s15, [r3]
 8002b70:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 8002b74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b78:	ee17 0a90 	vmov	r0, s15
 8002b7c:	f7fd fcfc 	bl	8000578 <__aeabi_f2d>
 8002b80:	4680      	mov	r8, r0
 8002b82:	4689      	mov	r9, r1
 8002b84:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002b88:	f7fd fcf6 	bl	8000578 <__aeabi_f2d>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	f04f 0000 	mov.w	r0, #0
 8002b94:	49ac      	ldr	r1, [pc, #688]	; (8002e48 <MadgwickAHRSupdate+0xbe0>)
 8002b96:	f7fd fb8f 	bl	80002b8 <__aeabi_dsub>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4692      	mov	sl, r2
 8002ba0:	469b      	mov	fp, r3
 8002ba2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002ba4:	f7fd fce8 	bl	8000578 <__aeabi_f2d>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	460b      	mov	r3, r1
 8002bac:	4650      	mov	r0, sl
 8002bae:	4659      	mov	r1, fp
 8002bb0:	f7fd fb82 	bl	80002b8 <__aeabi_dsub>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4610      	mov	r0, r2
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	f7fd fb7c 	bl	80002bc <__adddf3>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4692      	mov	sl, r2
 8002bca:	469b      	mov	fp, r3
 8002bcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bce:	f7fd fcd3 	bl	8000578 <__aeabi_f2d>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4650      	mov	r0, sl
 8002bd8:	4659      	mov	r1, fp
 8002bda:	f7fd fb6d 	bl	80002b8 <__aeabi_dsub>
 8002bde:	4602      	mov	r2, r0
 8002be0:	460b      	mov	r3, r1
 8002be2:	4640      	mov	r0, r8
 8002be4:	4649      	mov	r1, r9
 8002be6:	f7fd fd1f 	bl	8000628 <__aeabi_dmul>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4620      	mov	r0, r4
 8002bf0:	4629      	mov	r1, r5
 8002bf2:	f7fd fb63 	bl	80002bc <__adddf3>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4692      	mov	sl, r2
 8002bfc:	469b      	mov	fp, r3
 8002bfe:	4b94      	ldr	r3, [pc, #592]	; (8002e50 <MadgwickAHRSupdate+0xbe8>)
 8002c00:	ed93 7a00 	vldr	s14, [r3]
 8002c04:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002c08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c0c:	ee17 0a90 	vmov	r0, s15
 8002c10:	f7fd fcb2 	bl	8000578 <__aeabi_f2d>
 8002c14:	4604      	mov	r4, r0
 8002c16:	460d      	mov	r5, r1
 8002c18:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002c1a:	f7fd fcad 	bl	8000578 <__aeabi_f2d>
 8002c1e:	4680      	mov	r8, r0
 8002c20:	4689      	mov	r9, r1
 8002c22:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002c24:	f7fd fca8 	bl	8000578 <__aeabi_f2d>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	f04f 0000 	mov.w	r0, #0
 8002c30:	4985      	ldr	r1, [pc, #532]	; (8002e48 <MadgwickAHRSupdate+0xbe0>)
 8002c32:	f7fd fb41 	bl	80002b8 <__aeabi_dsub>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002c3e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002c40:	f7fd fc9a 	bl	8000578 <__aeabi_f2d>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c4c:	f7fd fb34 	bl	80002b8 <__aeabi_dsub>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4640      	mov	r0, r8
 8002c56:	4649      	mov	r1, r9
 8002c58:	f7fd fce6 	bl	8000628 <__aeabi_dmul>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4690      	mov	r8, r2
 8002c62:	4699      	mov	r9, r3
 8002c64:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002c68:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002c6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c70:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c78:	ee17 0a90 	vmov	r0, s15
 8002c7c:	f7fd fc7c 	bl	8000578 <__aeabi_f2d>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4640      	mov	r0, r8
 8002c86:	4649      	mov	r1, r9
 8002c88:	f7fd fb18 	bl	80002bc <__adddf3>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4690      	mov	r8, r2
 8002c92:	4699      	mov	r9, r3
 8002c94:	6a38      	ldr	r0, [r7, #32]
 8002c96:	f7fd fc6f 	bl	8000578 <__aeabi_f2d>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4640      	mov	r0, r8
 8002ca0:	4649      	mov	r1, r9
 8002ca2:	f7fd fb09 	bl	80002b8 <__aeabi_dsub>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	4620      	mov	r0, r4
 8002cac:	4629      	mov	r1, r5
 8002cae:	f7fd fcbb 	bl	8000628 <__aeabi_dmul>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	4650      	mov	r0, sl
 8002cb8:	4659      	mov	r1, fp
 8002cba:	f7fd faff 	bl	80002bc <__adddf3>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	4614      	mov	r4, r2
 8002cc4:	461d      	mov	r5, r3
 8002cc6:	4b63      	ldr	r3, [pc, #396]	; (8002e54 <MadgwickAHRSupdate+0xbec>)
 8002cc8:	ed93 7a00 	vldr	s14, [r3]
 8002ccc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002cd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cd4:	4b60      	ldr	r3, [pc, #384]	; (8002e58 <MadgwickAHRSupdate+0xbf0>)
 8002cd6:	edd3 6a00 	vldr	s13, [r3]
 8002cda:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002cde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ce2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ce6:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8002cea:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002cee:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002cf2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002cf6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002cfa:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 8002cfe:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002d02:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002d06:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002d0a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002d0e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002d12:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d16:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d1e:	ee17 0a90 	vmov	r0, s15
 8002d22:	f7fd fc29 	bl	8000578 <__aeabi_f2d>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	4629      	mov	r1, r5
 8002d2e:	f7fd fac5 	bl	80002bc <__adddf3>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002d3a:	4b45      	ldr	r3, [pc, #276]	; (8002e50 <MadgwickAHRSupdate+0xbe8>)
 8002d3c:	ed93 7a00 	vldr	s14, [r3]
 8002d40:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002d44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d48:	4b40      	ldr	r3, [pc, #256]	; (8002e4c <MadgwickAHRSupdate+0xbe4>)
 8002d4a:	edd3 6a00 	vldr	s13, [r3]
 8002d4e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002d52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d5a:	ee17 0a90 	vmov	r0, s15
 8002d5e:	f7fd fc0b 	bl	8000578 <__aeabi_f2d>
 8002d62:	4680      	mov	r8, r0
 8002d64:	4689      	mov	r9, r1
 8002d66:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002d6a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002d6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d72:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d7a:	ee17 0a90 	vmov	r0, s15
 8002d7e:	f7fd fbfb 	bl	8000578 <__aeabi_f2d>
 8002d82:	4682      	mov	sl, r0
 8002d84:	468b      	mov	fp, r1
 8002d86:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002d88:	f7fd fbf6 	bl	8000578 <__aeabi_f2d>
 8002d8c:	e9c7 0100 	strd	r0, r1, [r7]
 8002d90:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002d94:	f7fd fbf0 	bl	8000578 <__aeabi_f2d>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	f04f 0000 	mov.w	r0, #0
 8002da0:	4929      	ldr	r1, [pc, #164]	; (8002e48 <MadgwickAHRSupdate+0xbe0>)
 8002da2:	f7fd fa89 	bl	80002b8 <__aeabi_dsub>
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4614      	mov	r4, r2
 8002dac:	461d      	mov	r5, r3
 8002dae:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002db0:	f7fd fbe2 	bl	8000578 <__aeabi_f2d>
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	4620      	mov	r0, r4
 8002dba:	4629      	mov	r1, r5
 8002dbc:	f7fd fa7c 	bl	80002b8 <__aeabi_dsub>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002dc8:	f7fd fc2e 	bl	8000628 <__aeabi_dmul>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4650      	mov	r0, sl
 8002dd2:	4659      	mov	r1, fp
 8002dd4:	f7fd fa72 	bl	80002bc <__adddf3>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4614      	mov	r4, r2
 8002dde:	461d      	mov	r5, r3
 8002de0:	69b8      	ldr	r0, [r7, #24]
 8002de2:	f7fd fbc9 	bl	8000578 <__aeabi_f2d>
 8002de6:	4602      	mov	r2, r0
 8002de8:	460b      	mov	r3, r1
 8002dea:	4620      	mov	r0, r4
 8002dec:	4629      	mov	r1, r5
 8002dee:	f7fd fa63 	bl	80002b8 <__aeabi_dsub>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4640      	mov	r0, r8
 8002df8:	4649      	mov	r1, r9
 8002dfa:	f7fd fc15 	bl	8000628 <__aeabi_dmul>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e06:	f7fd fa59 	bl	80002bc <__adddf3>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4610      	mov	r0, r2
 8002e10:	4619      	mov	r1, r3
 8002e12:	f7fd ff01 	bl	8000c18 <__aeabi_d2f>
 8002e16:	4603      	mov	r3, r0
 8002e18:	64bb      	str	r3, [r7, #72]	; 0x48
		s2= -_2q0*(2*(q1q3 - q0q2) - ax)    +     _2q3*(2*(q0q1 + q2q3) - ay)   +   (-4*q2)*(2*(0.5 - q1q1 - q2q2) - az) +   (-_8bx*q2-_4bz*q0)*(_4bx*(0.5 - q2q2 - q3q3) + _4bz*(q1q3 - q0q2) - mx)+(_4bx*q1+_4bz*q3)*(_4bx*(q1q2 - q0q3) + _4bz*(q0q1 + q2q3) - my)+(_4bx*q0-_8bz*q2)*(_4bx*(q0q2 + q1q3) + _4bz*(0.5 - q1q1 - q2q2) - mz);
 8002e1a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002e1e:	eeb1 7a67 	vneg.f32	s14, s15
 8002e22:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8002e26:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002e2a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e2e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002e32:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002e36:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e3e:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8002e42:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002e46:	e009      	b.n	8002e5c <MadgwickAHRSupdate+0xbf4>
 8002e48:	3fe00000 	.word	0x3fe00000
 8002e4c:	200022cc 	.word	0x200022cc
 8002e50:	200022d4 	.word	0x200022d4
 8002e54:	200022d0 	.word	0x200022d0
 8002e58:	20000004 	.word	0x20000004
 8002e5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e60:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002e64:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002e68:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002e6c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002e70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e78:	ee17 0a90 	vmov	r0, s15
 8002e7c:	f7fd fb7c 	bl	8000578 <__aeabi_f2d>
 8002e80:	4604      	mov	r4, r0
 8002e82:	460d      	mov	r5, r1
 8002e84:	4be8      	ldr	r3, [pc, #928]	; (8003228 <MadgwickAHRSupdate+0xfc0>)
 8002e86:	edd3 7a00 	vldr	s15, [r3]
 8002e8a:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 8002e8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e92:	ee17 0a90 	vmov	r0, s15
 8002e96:	f7fd fb6f 	bl	8000578 <__aeabi_f2d>
 8002e9a:	4680      	mov	r8, r0
 8002e9c:	4689      	mov	r9, r1
 8002e9e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002ea2:	f7fd fb69 	bl	8000578 <__aeabi_f2d>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	f04f 0000 	mov.w	r0, #0
 8002eae:	49df      	ldr	r1, [pc, #892]	; (800322c <MadgwickAHRSupdate+0xfc4>)
 8002eb0:	f7fd fa02 	bl	80002b8 <__aeabi_dsub>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4692      	mov	sl, r2
 8002eba:	469b      	mov	fp, r3
 8002ebc:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002ebe:	f7fd fb5b 	bl	8000578 <__aeabi_f2d>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4650      	mov	r0, sl
 8002ec8:	4659      	mov	r1, fp
 8002eca:	f7fd f9f5 	bl	80002b8 <__aeabi_dsub>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	4610      	mov	r0, r2
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	f7fd f9ef 	bl	80002bc <__adddf3>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4692      	mov	sl, r2
 8002ee4:	469b      	mov	fp, r3
 8002ee6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ee8:	f7fd fb46 	bl	8000578 <__aeabi_f2d>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4650      	mov	r0, sl
 8002ef2:	4659      	mov	r1, fp
 8002ef4:	f7fd f9e0 	bl	80002b8 <__aeabi_dsub>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4640      	mov	r0, r8
 8002efe:	4649      	mov	r1, r9
 8002f00:	f7fd fb92 	bl	8000628 <__aeabi_dmul>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4620      	mov	r0, r4
 8002f0a:	4629      	mov	r1, r5
 8002f0c:	f7fd f9d6 	bl	80002bc <__adddf3>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4692      	mov	sl, r2
 8002f16:	469b      	mov	fp, r3
 8002f18:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002f1c:	eeb1 7a67 	vneg.f32	s14, s15
 8002f20:	4bc1      	ldr	r3, [pc, #772]	; (8003228 <MadgwickAHRSupdate+0xfc0>)
 8002f22:	edd3 7a00 	vldr	s15, [r3]
 8002f26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f2a:	4bc1      	ldr	r3, [pc, #772]	; (8003230 <MadgwickAHRSupdate+0xfc8>)
 8002f2c:	edd3 6a00 	vldr	s13, [r3]
 8002f30:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002f34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f3c:	ee17 0a90 	vmov	r0, s15
 8002f40:	f7fd fb1a 	bl	8000578 <__aeabi_f2d>
 8002f44:	4604      	mov	r4, r0
 8002f46:	460d      	mov	r5, r1
 8002f48:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002f4a:	f7fd fb15 	bl	8000578 <__aeabi_f2d>
 8002f4e:	4680      	mov	r8, r0
 8002f50:	4689      	mov	r9, r1
 8002f52:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002f54:	f7fd fb10 	bl	8000578 <__aeabi_f2d>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	f04f 0000 	mov.w	r0, #0
 8002f60:	49b2      	ldr	r1, [pc, #712]	; (800322c <MadgwickAHRSupdate+0xfc4>)
 8002f62:	f7fd f9a9 	bl	80002b8 <__aeabi_dsub>
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002f6e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002f70:	f7fd fb02 	bl	8000578 <__aeabi_f2d>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f7c:	f7fd f99c 	bl	80002b8 <__aeabi_dsub>
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	4640      	mov	r0, r8
 8002f86:	4649      	mov	r1, r9
 8002f88:	f7fd fb4e 	bl	8000628 <__aeabi_dmul>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4690      	mov	r8, r2
 8002f92:	4699      	mov	r9, r3
 8002f94:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002f98:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002f9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fa0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fa8:	ee17 0a90 	vmov	r0, s15
 8002fac:	f7fd fae4 	bl	8000578 <__aeabi_f2d>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	4640      	mov	r0, r8
 8002fb6:	4649      	mov	r1, r9
 8002fb8:	f7fd f980 	bl	80002bc <__adddf3>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4690      	mov	r8, r2
 8002fc2:	4699      	mov	r9, r3
 8002fc4:	6a38      	ldr	r0, [r7, #32]
 8002fc6:	f7fd fad7 	bl	8000578 <__aeabi_f2d>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4640      	mov	r0, r8
 8002fd0:	4649      	mov	r1, r9
 8002fd2:	f7fd f971 	bl	80002b8 <__aeabi_dsub>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4620      	mov	r0, r4
 8002fdc:	4629      	mov	r1, r5
 8002fde:	f7fd fb23 	bl	8000628 <__aeabi_dmul>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	4650      	mov	r0, sl
 8002fe8:	4659      	mov	r1, fp
 8002fea:	f7fd f967 	bl	80002bc <__adddf3>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	4614      	mov	r4, r2
 8002ff4:	461d      	mov	r5, r3
 8002ff6:	4b8f      	ldr	r3, [pc, #572]	; (8003234 <MadgwickAHRSupdate+0xfcc>)
 8002ff8:	ed93 7a00 	vldr	s14, [r3]
 8002ffc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003000:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003004:	4b8c      	ldr	r3, [pc, #560]	; (8003238 <MadgwickAHRSupdate+0xfd0>)
 8003006:	edd3 6a00 	vldr	s13, [r3]
 800300a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800300e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003012:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003016:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 800301a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800301e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003022:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003026:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800302a:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 800302e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003032:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003036:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800303a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800303e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003042:	edd7 7a07 	vldr	s15, [r7, #28]
 8003046:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800304a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800304e:	ee17 0a90 	vmov	r0, s15
 8003052:	f7fd fa91 	bl	8000578 <__aeabi_f2d>
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	4620      	mov	r0, r4
 800305c:	4629      	mov	r1, r5
 800305e:	f7fd f92d 	bl	80002bc <__adddf3>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800306a:	4b71      	ldr	r3, [pc, #452]	; (8003230 <MadgwickAHRSupdate+0xfc8>)
 800306c:	ed93 7a00 	vldr	s14, [r3]
 8003070:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003074:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003078:	4b6b      	ldr	r3, [pc, #428]	; (8003228 <MadgwickAHRSupdate+0xfc0>)
 800307a:	edd3 6a00 	vldr	s13, [r3]
 800307e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003082:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003086:	ee77 7a67 	vsub.f32	s15, s14, s15
 800308a:	ee17 0a90 	vmov	r0, s15
 800308e:	f7fd fa73 	bl	8000578 <__aeabi_f2d>
 8003092:	4680      	mov	r8, r0
 8003094:	4689      	mov	r9, r1
 8003096:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 800309a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800309e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030a2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80030a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030aa:	ee17 0a90 	vmov	r0, s15
 80030ae:	f7fd fa63 	bl	8000578 <__aeabi_f2d>
 80030b2:	4682      	mov	sl, r0
 80030b4:	468b      	mov	fp, r1
 80030b6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80030b8:	f7fd fa5e 	bl	8000578 <__aeabi_f2d>
 80030bc:	e9c7 0100 	strd	r0, r1, [r7]
 80030c0:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80030c4:	f7fd fa58 	bl	8000578 <__aeabi_f2d>
 80030c8:	4602      	mov	r2, r0
 80030ca:	460b      	mov	r3, r1
 80030cc:	f04f 0000 	mov.w	r0, #0
 80030d0:	4956      	ldr	r1, [pc, #344]	; (800322c <MadgwickAHRSupdate+0xfc4>)
 80030d2:	f7fd f8f1 	bl	80002b8 <__aeabi_dsub>
 80030d6:	4602      	mov	r2, r0
 80030d8:	460b      	mov	r3, r1
 80030da:	4614      	mov	r4, r2
 80030dc:	461d      	mov	r5, r3
 80030de:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80030e0:	f7fd fa4a 	bl	8000578 <__aeabi_f2d>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4620      	mov	r0, r4
 80030ea:	4629      	mov	r1, r5
 80030ec:	f7fd f8e4 	bl	80002b8 <__aeabi_dsub>
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030f8:	f7fd fa96 	bl	8000628 <__aeabi_dmul>
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	4650      	mov	r0, sl
 8003102:	4659      	mov	r1, fp
 8003104:	f7fd f8da 	bl	80002bc <__adddf3>
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	4614      	mov	r4, r2
 800310e:	461d      	mov	r5, r3
 8003110:	69b8      	ldr	r0, [r7, #24]
 8003112:	f7fd fa31 	bl	8000578 <__aeabi_f2d>
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	4620      	mov	r0, r4
 800311c:	4629      	mov	r1, r5
 800311e:	f7fd f8cb 	bl	80002b8 <__aeabi_dsub>
 8003122:	4602      	mov	r2, r0
 8003124:	460b      	mov	r3, r1
 8003126:	4640      	mov	r0, r8
 8003128:	4649      	mov	r1, r9
 800312a:	f7fd fa7d 	bl	8000628 <__aeabi_dmul>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003136:	f7fd f8c1 	bl	80002bc <__adddf3>
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	4610      	mov	r0, r2
 8003140:	4619      	mov	r1, r3
 8003142:	f7fd fd69 	bl	8000c18 <__aeabi_d2f>
 8003146:	4603      	mov	r3, r0
 8003148:	647b      	str	r3, [r7, #68]	; 0x44
		s3= _2q1*(2*(q1q3 - q0q2) - ax) +   _2q2*(2*(q0q1 + q2q3) - ay)+(-_8bx*q3+_4bz*q1)*(_4bx*(0.5 - q2q2 - q3q3) + _4bz*(q1q3 - q0q2) - mx)+(-_4bx*q0+_4bz*q2)*(_4bx*(q1q2 - q0q3) + _4bz*(q0q1 + q2q3) - my)+(_4bx*q1)*(_4bx*(q0q2 + q1q3) + _4bz*(0.5 - q1q1 - q2q2) - mz);
 800314a:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800314e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003152:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003156:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800315a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800315e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003162:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003166:	ee27 7a27 	vmul.f32	s14, s14, s15
 800316a:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 800316e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003176:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800317a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800317e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003182:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8003186:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800318a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800318e:	ee17 0a90 	vmov	r0, s15
 8003192:	f7fd f9f1 	bl	8000578 <__aeabi_f2d>
 8003196:	4604      	mov	r4, r0
 8003198:	460d      	mov	r5, r1
 800319a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800319e:	eeb1 7a67 	vneg.f32	s14, s15
 80031a2:	4b25      	ldr	r3, [pc, #148]	; (8003238 <MadgwickAHRSupdate+0xfd0>)
 80031a4:	edd3 7a00 	vldr	s15, [r3]
 80031a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031ac:	4b21      	ldr	r3, [pc, #132]	; (8003234 <MadgwickAHRSupdate+0xfcc>)
 80031ae:	edd3 6a00 	vldr	s13, [r3]
 80031b2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80031b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031be:	ee17 0a90 	vmov	r0, s15
 80031c2:	f7fd f9d9 	bl	8000578 <__aeabi_f2d>
 80031c6:	4680      	mov	r8, r0
 80031c8:	4689      	mov	r9, r1
 80031ca:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80031cc:	f7fd f9d4 	bl	8000578 <__aeabi_f2d>
 80031d0:	4682      	mov	sl, r0
 80031d2:	468b      	mov	fp, r1
 80031d4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80031d6:	f7fd f9cf 	bl	8000578 <__aeabi_f2d>
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	f04f 0000 	mov.w	r0, #0
 80031e2:	4912      	ldr	r1, [pc, #72]	; (800322c <MadgwickAHRSupdate+0xfc4>)
 80031e4:	f7fd f868 	bl	80002b8 <__aeabi_dsub>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80031f0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80031f2:	f7fd f9c1 	bl	8000578 <__aeabi_f2d>
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031fe:	f7fd f85b 	bl	80002b8 <__aeabi_dsub>
 8003202:	4602      	mov	r2, r0
 8003204:	460b      	mov	r3, r1
 8003206:	4650      	mov	r0, sl
 8003208:	4659      	mov	r1, fp
 800320a:	f7fd fa0d 	bl	8000628 <__aeabi_dmul>
 800320e:	4602      	mov	r2, r0
 8003210:	460b      	mov	r3, r1
 8003212:	4692      	mov	sl, r2
 8003214:	469b      	mov	fp, r3
 8003216:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800321a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800321e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003222:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003226:	e009      	b.n	800323c <MadgwickAHRSupdate+0xfd4>
 8003228:	200022d0 	.word	0x200022d0
 800322c:	3fe00000 	.word	0x3fe00000
 8003230:	20000004 	.word	0x20000004
 8003234:	200022cc 	.word	0x200022cc
 8003238:	200022d4 	.word	0x200022d4
 800323c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003240:	ee17 0a90 	vmov	r0, s15
 8003244:	f7fd f998 	bl	8000578 <__aeabi_f2d>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	4650      	mov	r0, sl
 800324e:	4659      	mov	r1, fp
 8003250:	f7fd f834 	bl	80002bc <__adddf3>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	4692      	mov	sl, r2
 800325a:	469b      	mov	fp, r3
 800325c:	6a38      	ldr	r0, [r7, #32]
 800325e:	f7fd f98b 	bl	8000578 <__aeabi_f2d>
 8003262:	4602      	mov	r2, r0
 8003264:	460b      	mov	r3, r1
 8003266:	4650      	mov	r0, sl
 8003268:	4659      	mov	r1, fp
 800326a:	f7fd f825 	bl	80002b8 <__aeabi_dsub>
 800326e:	4602      	mov	r2, r0
 8003270:	460b      	mov	r3, r1
 8003272:	4640      	mov	r0, r8
 8003274:	4649      	mov	r1, r9
 8003276:	f7fd f9d7 	bl	8000628 <__aeabi_dmul>
 800327a:	4602      	mov	r2, r0
 800327c:	460b      	mov	r3, r1
 800327e:	4620      	mov	r0, r4
 8003280:	4629      	mov	r1, r5
 8003282:	f7fd f81b 	bl	80002bc <__adddf3>
 8003286:	4602      	mov	r2, r0
 8003288:	460b      	mov	r3, r1
 800328a:	4614      	mov	r4, r2
 800328c:	461d      	mov	r5, r3
 800328e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003292:	eeb1 7a67 	vneg.f32	s14, s15
 8003296:	4bdf      	ldr	r3, [pc, #892]	; (8003614 <MadgwickAHRSupdate+0x13ac>)
 8003298:	edd3 7a00 	vldr	s15, [r3]
 800329c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032a0:	4bdd      	ldr	r3, [pc, #884]	; (8003618 <MadgwickAHRSupdate+0x13b0>)
 80032a2:	edd3 6a00 	vldr	s13, [r3]
 80032a6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80032aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032b2:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 80032b6:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80032ba:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80032be:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80032c2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80032c6:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 80032ca:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80032ce:	ee36 6a27 	vadd.f32	s12, s12, s15
 80032d2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80032d6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80032da:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80032de:	edd7 7a07 	vldr	s15, [r7, #28]
 80032e2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80032e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ea:	ee17 0a90 	vmov	r0, s15
 80032ee:	f7fd f943 	bl	8000578 <__aeabi_f2d>
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	4620      	mov	r0, r4
 80032f8:	4629      	mov	r1, r5
 80032fa:	f7fc ffdf 	bl	80002bc <__adddf3>
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8003306:	4bc5      	ldr	r3, [pc, #788]	; (800361c <MadgwickAHRSupdate+0x13b4>)
 8003308:	ed93 7a00 	vldr	s14, [r3]
 800330c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003314:	ee17 0a90 	vmov	r0, s15
 8003318:	f7fd f92e 	bl	8000578 <__aeabi_f2d>
 800331c:	4680      	mov	r8, r0
 800331e:	4689      	mov	r9, r1
 8003320:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8003324:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8003328:	ee37 7a27 	vadd.f32	s14, s14, s15
 800332c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003334:	ee17 0a90 	vmov	r0, s15
 8003338:	f7fd f91e 	bl	8000578 <__aeabi_f2d>
 800333c:	4682      	mov	sl, r0
 800333e:	468b      	mov	fp, r1
 8003340:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003342:	f7fd f919 	bl	8000578 <__aeabi_f2d>
 8003346:	e9c7 0100 	strd	r0, r1, [r7]
 800334a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800334e:	f7fd f913 	bl	8000578 <__aeabi_f2d>
 8003352:	4602      	mov	r2, r0
 8003354:	460b      	mov	r3, r1
 8003356:	f04f 0000 	mov.w	r0, #0
 800335a:	49b1      	ldr	r1, [pc, #708]	; (8003620 <MadgwickAHRSupdate+0x13b8>)
 800335c:	f7fc ffac 	bl	80002b8 <__aeabi_dsub>
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	4614      	mov	r4, r2
 8003366:	461d      	mov	r5, r3
 8003368:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800336a:	f7fd f905 	bl	8000578 <__aeabi_f2d>
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	4620      	mov	r0, r4
 8003374:	4629      	mov	r1, r5
 8003376:	f7fc ff9f 	bl	80002b8 <__aeabi_dsub>
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003382:	f7fd f951 	bl	8000628 <__aeabi_dmul>
 8003386:	4602      	mov	r2, r0
 8003388:	460b      	mov	r3, r1
 800338a:	4650      	mov	r0, sl
 800338c:	4659      	mov	r1, fp
 800338e:	f7fc ff95 	bl	80002bc <__adddf3>
 8003392:	4602      	mov	r2, r0
 8003394:	460b      	mov	r3, r1
 8003396:	4614      	mov	r4, r2
 8003398:	461d      	mov	r5, r3
 800339a:	69b8      	ldr	r0, [r7, #24]
 800339c:	f7fd f8ec 	bl	8000578 <__aeabi_f2d>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	4620      	mov	r0, r4
 80033a6:	4629      	mov	r1, r5
 80033a8:	f7fc ff86 	bl	80002b8 <__aeabi_dsub>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	4640      	mov	r0, r8
 80033b2:	4649      	mov	r1, r9
 80033b4:	f7fd f938 	bl	8000628 <__aeabi_dmul>
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033c0:	f7fc ff7c 	bl	80002bc <__adddf3>
 80033c4:	4602      	mov	r2, r0
 80033c6:	460b      	mov	r3, r1
 80033c8:	4610      	mov	r0, r2
 80033ca:	4619      	mov	r1, r3
 80033cc:	f7fd fc24 	bl	8000c18 <__aeabi_d2f>
 80033d0:	4603      	mov	r3, r0
 80033d2:	643b      	str	r3, [r7, #64]	; 0x40
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80033d4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80033d8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80033dc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80033e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80033e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033e8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80033ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80033f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033f4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80033f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80033fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003400:	eeb0 0a67 	vmov.f32	s0, s15
 8003404:	f7fe ff0a 	bl	800221c <invSqrt>
 8003408:	ed87 0a30 	vstr	s0, [r7, #192]	; 0xc0
		s0 *= recipNorm;
 800340c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003410:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8003414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003418:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		s1 *= recipNorm;
 800341c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003420:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8003424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003428:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		s2 *= recipNorm;
 800342c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003430:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8003434:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003438:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		s3 *= recipNorm;
 800343c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003440:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8003444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003448:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

		// Apply feedback step
		qDot1 -= beta * s0;
 800344c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003450:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003458:	ed97 7a35 	vldr	s14, [r7, #212]	; 0xd4
 800345c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003460:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
		qDot2 -= beta * s1;
 8003464:	ed97 7a04 	vldr	s14, [r7, #16]
 8003468:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800346c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003470:	ed97 7a34 	vldr	s14, [r7, #208]	; 0xd0
 8003474:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003478:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
		qDot3 -= beta * s2;
 800347c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003480:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003484:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003488:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 800348c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003490:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
		qDot4 -= beta * s3;
 8003494:	ed97 7a04 	vldr	s14, [r7, #16]
 8003498:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800349c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034a0:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 80034a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034a8:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 80034ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034b0:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80034b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034b8:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80034bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034c0:	4b54      	ldr	r3, [pc, #336]	; (8003614 <MadgwickAHRSupdate+0x13ac>)
 80034c2:	edd3 7a00 	vldr	s15, [r3]
 80034c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ca:	4b52      	ldr	r3, [pc, #328]	; (8003614 <MadgwickAHRSupdate+0x13ac>)
 80034cc:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 80034d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034d4:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80034d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034dc:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 80034e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034e4:	4b4d      	ldr	r3, [pc, #308]	; (800361c <MadgwickAHRSupdate+0x13b4>)
 80034e6:	edd3 7a00 	vldr	s15, [r3]
 80034ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ee:	4b4b      	ldr	r3, [pc, #300]	; (800361c <MadgwickAHRSupdate+0x13b4>)
 80034f0:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 80034f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034f8:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80034fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003500:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8003504:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003508:	4b43      	ldr	r3, [pc, #268]	; (8003618 <MadgwickAHRSupdate+0x13b0>)
 800350a:	edd3 7a00 	vldr	s15, [r3]
 800350e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003512:	4b41      	ldr	r3, [pc, #260]	; (8003618 <MadgwickAHRSupdate+0x13b0>)
 8003514:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8003518:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800351c:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8003520:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003524:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8003528:	ee27 7a27 	vmul.f32	s14, s14, s15
 800352c:	4b3d      	ldr	r3, [pc, #244]	; (8003624 <MadgwickAHRSupdate+0x13bc>)
 800352e:	edd3 7a00 	vldr	s15, [r3]
 8003532:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003536:	4b3b      	ldr	r3, [pc, #236]	; (8003624 <MadgwickAHRSupdate+0x13bc>)
 8003538:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800353c:	4b35      	ldr	r3, [pc, #212]	; (8003614 <MadgwickAHRSupdate+0x13ac>)
 800353e:	ed93 7a00 	vldr	s14, [r3]
 8003542:	4b34      	ldr	r3, [pc, #208]	; (8003614 <MadgwickAHRSupdate+0x13ac>)
 8003544:	edd3 7a00 	vldr	s15, [r3]
 8003548:	ee27 7a27 	vmul.f32	s14, s14, s15
 800354c:	4b33      	ldr	r3, [pc, #204]	; (800361c <MadgwickAHRSupdate+0x13b4>)
 800354e:	edd3 6a00 	vldr	s13, [r3]
 8003552:	4b32      	ldr	r3, [pc, #200]	; (800361c <MadgwickAHRSupdate+0x13b4>)
 8003554:	edd3 7a00 	vldr	s15, [r3]
 8003558:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800355c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003560:	4b2d      	ldr	r3, [pc, #180]	; (8003618 <MadgwickAHRSupdate+0x13b0>)
 8003562:	edd3 6a00 	vldr	s13, [r3]
 8003566:	4b2c      	ldr	r3, [pc, #176]	; (8003618 <MadgwickAHRSupdate+0x13b0>)
 8003568:	edd3 7a00 	vldr	s15, [r3]
 800356c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003570:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003574:	4b2b      	ldr	r3, [pc, #172]	; (8003624 <MadgwickAHRSupdate+0x13bc>)
 8003576:	edd3 6a00 	vldr	s13, [r3]
 800357a:	4b2a      	ldr	r3, [pc, #168]	; (8003624 <MadgwickAHRSupdate+0x13bc>)
 800357c:	edd3 7a00 	vldr	s15, [r3]
 8003580:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003584:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003588:	eeb0 0a67 	vmov.f32	s0, s15
 800358c:	f7fe fe46 	bl	800221c <invSqrt>
 8003590:	ed87 0a30 	vstr	s0, [r7, #192]	; 0xc0
	q0 *= recipNorm;
 8003594:	4b1f      	ldr	r3, [pc, #124]	; (8003614 <MadgwickAHRSupdate+0x13ac>)
 8003596:	ed93 7a00 	vldr	s14, [r3]
 800359a:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800359e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035a2:	4b1c      	ldr	r3, [pc, #112]	; (8003614 <MadgwickAHRSupdate+0x13ac>)
 80035a4:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 80035a8:	4b1c      	ldr	r3, [pc, #112]	; (800361c <MadgwickAHRSupdate+0x13b4>)
 80035aa:	ed93 7a00 	vldr	s14, [r3]
 80035ae:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80035b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035b6:	4b19      	ldr	r3, [pc, #100]	; (800361c <MadgwickAHRSupdate+0x13b4>)
 80035b8:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 80035bc:	4b16      	ldr	r3, [pc, #88]	; (8003618 <MadgwickAHRSupdate+0x13b0>)
 80035be:	ed93 7a00 	vldr	s14, [r3]
 80035c2:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80035c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ca:	4b13      	ldr	r3, [pc, #76]	; (8003618 <MadgwickAHRSupdate+0x13b0>)
 80035cc:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 80035d0:	4b14      	ldr	r3, [pc, #80]	; (8003624 <MadgwickAHRSupdate+0x13bc>)
 80035d2:	ed93 7a00 	vldr	s14, [r3]
 80035d6:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80035da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035de:	4b11      	ldr	r3, [pc, #68]	; (8003624 <MadgwickAHRSupdate+0x13bc>)
 80035e0:	edc3 7a00 	vstr	s15, [r3]

	quaternion[0] = q0;
 80035e4:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <MadgwickAHRSupdate+0x13ac>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ea:	601a      	str	r2, [r3, #0]
	quaternion[1] = q1;
 80035ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ee:	3304      	adds	r3, #4
 80035f0:	4a0a      	ldr	r2, [pc, #40]	; (800361c <MadgwickAHRSupdate+0x13b4>)
 80035f2:	6812      	ldr	r2, [r2, #0]
 80035f4:	601a      	str	r2, [r3, #0]
	quaternion[2] = q2;
 80035f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035f8:	3308      	adds	r3, #8
 80035fa:	4a07      	ldr	r2, [pc, #28]	; (8003618 <MadgwickAHRSupdate+0x13b0>)
 80035fc:	6812      	ldr	r2, [r2, #0]
 80035fe:	601a      	str	r2, [r3, #0]
	quaternion[3] = q3;
 8003600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003602:	330c      	adds	r3, #12
 8003604:	4a07      	ldr	r2, [pc, #28]	; (8003624 <MadgwickAHRSupdate+0x13bc>)
 8003606:	6812      	ldr	r2, [r2, #0]
 8003608:	601a      	str	r2, [r3, #0]
}
 800360a:	37d8      	adds	r7, #216	; 0xd8
 800360c:	46bd      	mov	sp, r7
 800360e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003612:	bf00      	nop
 8003614:	20000004 	.word	0x20000004
 8003618:	200022d0 	.word	0x200022d0
 800361c:	200022cc 	.word	0x200022cc
 8003620:	3fe00000 	.word	0x3fe00000
 8003624:	200022d4 	.word	0x200022d4

08003628 <MadgwickAHRSupdateIMU>:

void MadgwickAHRSupdateIMU(float* quaternion, float gx, float gy, float gz, float ax, float ay, float az, float dt, float beta) {
 8003628:	b580      	push	{r7, lr}
 800362a:	b0a2      	sub	sp, #136	; 0x88
 800362c:	af00      	add	r7, sp, #0
 800362e:	6278      	str	r0, [r7, #36]	; 0x24
 8003630:	ed87 0a08 	vstr	s0, [r7, #32]
 8003634:	edc7 0a07 	vstr	s1, [r7, #28]
 8003638:	ed87 1a06 	vstr	s2, [r7, #24]
 800363c:	edc7 1a05 	vstr	s3, [r7, #20]
 8003640:	ed87 2a04 	vstr	s4, [r7, #16]
 8003644:	edc7 2a03 	vstr	s5, [r7, #12]
 8003648:	ed87 3a02 	vstr	s6, [r7, #8]
 800364c:	edc7 3a01 	vstr	s7, [r7, #4]
	float recipNorm;
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	float sampleFreq = 1 / dt;
 8003650:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003654:	ed97 7a02 	vldr	s14, [r7, #8]
 8003658:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800365c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8003660:	4bed      	ldr	r3, [pc, #948]	; (8003a18 <MadgwickAHRSupdateIMU+0x3f0>)
 8003662:	edd3 7a00 	vldr	s15, [r3]
 8003666:	eeb1 7a67 	vneg.f32	s14, s15
 800366a:	edd7 7a08 	vldr	s15, [r7, #32]
 800366e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003672:	4bea      	ldr	r3, [pc, #936]	; (8003a1c <MadgwickAHRSupdateIMU+0x3f4>)
 8003674:	edd3 6a00 	vldr	s13, [r3]
 8003678:	edd7 7a07 	vldr	s15, [r7, #28]
 800367c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003680:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003684:	4be6      	ldr	r3, [pc, #920]	; (8003a20 <MadgwickAHRSupdateIMU+0x3f8>)
 8003686:	edd3 6a00 	vldr	s13, [r3]
 800368a:	edd7 7a06 	vldr	s15, [r7, #24]
 800368e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003692:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003696:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800369a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800369e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80036a2:	4be0      	ldr	r3, [pc, #896]	; (8003a24 <MadgwickAHRSupdateIMU+0x3fc>)
 80036a4:	ed93 7a00 	vldr	s14, [r3]
 80036a8:	edd7 7a08 	vldr	s15, [r7, #32]
 80036ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036b0:	4bda      	ldr	r3, [pc, #872]	; (8003a1c <MadgwickAHRSupdateIMU+0x3f4>)
 80036b2:	edd3 6a00 	vldr	s13, [r3]
 80036b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80036ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036c2:	4bd7      	ldr	r3, [pc, #860]	; (8003a20 <MadgwickAHRSupdateIMU+0x3f8>)
 80036c4:	edd3 6a00 	vldr	s13, [r3]
 80036c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80036cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036d4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80036d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036dc:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80036e0:	4bd0      	ldr	r3, [pc, #832]	; (8003a24 <MadgwickAHRSupdateIMU+0x3fc>)
 80036e2:	ed93 7a00 	vldr	s14, [r3]
 80036e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80036ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036ee:	4bca      	ldr	r3, [pc, #808]	; (8003a18 <MadgwickAHRSupdateIMU+0x3f0>)
 80036f0:	edd3 6a00 	vldr	s13, [r3]
 80036f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80036f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003700:	4bc7      	ldr	r3, [pc, #796]	; (8003a20 <MadgwickAHRSupdateIMU+0x3f8>)
 8003702:	edd3 6a00 	vldr	s13, [r3]
 8003706:	edd7 7a08 	vldr	s15, [r7, #32]
 800370a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800370e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003712:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003716:	ee67 7a87 	vmul.f32	s15, s15, s14
 800371a:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800371e:	4bc1      	ldr	r3, [pc, #772]	; (8003a24 <MadgwickAHRSupdateIMU+0x3fc>)
 8003720:	ed93 7a00 	vldr	s14, [r3]
 8003724:	edd7 7a06 	vldr	s15, [r7, #24]
 8003728:	ee27 7a27 	vmul.f32	s14, s14, s15
 800372c:	4bba      	ldr	r3, [pc, #744]	; (8003a18 <MadgwickAHRSupdateIMU+0x3f0>)
 800372e:	edd3 6a00 	vldr	s13, [r3]
 8003732:	edd7 7a07 	vldr	s15, [r7, #28]
 8003736:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800373a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800373e:	4bb7      	ldr	r3, [pc, #732]	; (8003a1c <MadgwickAHRSupdateIMU+0x3f4>)
 8003740:	edd3 6a00 	vldr	s13, [r3]
 8003744:	edd7 7a08 	vldr	s15, [r7, #32]
 8003748:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800374c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003750:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003754:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003758:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 800375c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003760:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003768:	d10e      	bne.n	8003788 <MadgwickAHRSupdateIMU+0x160>
 800376a:	edd7 7a04 	vldr	s15, [r7, #16]
 800376e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003776:	d107      	bne.n	8003788 <MadgwickAHRSupdateIMU+0x160>
 8003778:	edd7 7a03 	vldr	s15, [r7, #12]
 800377c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003784:	f000 81e0 	beq.w	8003b48 <MadgwickAHRSupdateIMU+0x520>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8003788:	edd7 7a05 	vldr	s15, [r7, #20]
 800378c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003790:	edd7 7a04 	vldr	s15, [r7, #16]
 8003794:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003798:	ee37 7a27 	vadd.f32	s14, s14, s15
 800379c:	edd7 7a03 	vldr	s15, [r7, #12]
 80037a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80037a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037a8:	eeb0 0a67 	vmov.f32	s0, s15
 80037ac:	f7fe fd36 	bl	800221c <invSqrt>
 80037b0:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
		ax *= recipNorm;
 80037b4:	ed97 7a05 	vldr	s14, [r7, #20]
 80037b8:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80037bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037c0:	edc7 7a05 	vstr	s15, [r7, #20]
		ay *= recipNorm;
 80037c4:	ed97 7a04 	vldr	s14, [r7, #16]
 80037c8:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80037cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037d0:	edc7 7a04 	vstr	s15, [r7, #16]
		az *= recipNorm;
 80037d4:	ed97 7a03 	vldr	s14, [r7, #12]
 80037d8:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80037dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037e0:	edc7 7a03 	vstr	s15, [r7, #12]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 80037e4:	4b8f      	ldr	r3, [pc, #572]	; (8003a24 <MadgwickAHRSupdateIMU+0x3fc>)
 80037e6:	edd3 7a00 	vldr	s15, [r3]
 80037ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80037ee:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		_2q1 = 2.0f * q1;
 80037f2:	4b89      	ldr	r3, [pc, #548]	; (8003a18 <MadgwickAHRSupdateIMU+0x3f0>)
 80037f4:	edd3 7a00 	vldr	s15, [r3]
 80037f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80037fc:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		_2q2 = 2.0f * q2;
 8003800:	4b86      	ldr	r3, [pc, #536]	; (8003a1c <MadgwickAHRSupdateIMU+0x3f4>)
 8003802:	edd3 7a00 	vldr	s15, [r3]
 8003806:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800380a:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		_2q3 = 2.0f * q3;
 800380e:	4b84      	ldr	r3, [pc, #528]	; (8003a20 <MadgwickAHRSupdateIMU+0x3f8>)
 8003810:	edd3 7a00 	vldr	s15, [r3]
 8003814:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003818:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		_4q0 = 4.0f * q0;
 800381c:	4b81      	ldr	r3, [pc, #516]	; (8003a24 <MadgwickAHRSupdateIMU+0x3fc>)
 800381e:	edd3 7a00 	vldr	s15, [r3]
 8003822:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003826:	ee67 7a87 	vmul.f32	s15, s15, s14
 800382a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		_4q1 = 4.0f * q1;
 800382e:	4b7a      	ldr	r3, [pc, #488]	; (8003a18 <MadgwickAHRSupdateIMU+0x3f0>)
 8003830:	edd3 7a00 	vldr	s15, [r3]
 8003834:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003838:	ee67 7a87 	vmul.f32	s15, s15, s14
 800383c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_4q2 = 4.0f * q2;
 8003840:	4b76      	ldr	r3, [pc, #472]	; (8003a1c <MadgwickAHRSupdateIMU+0x3f4>)
 8003842:	edd3 7a00 	vldr	s15, [r3]
 8003846:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800384a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800384e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_8q1 = 8.0f * q1;
 8003852:	4b71      	ldr	r3, [pc, #452]	; (8003a18 <MadgwickAHRSupdateIMU+0x3f0>)
 8003854:	edd3 7a00 	vldr	s15, [r3]
 8003858:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800385c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003860:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_8q2 = 8.0f * q2;
 8003864:	4b6d      	ldr	r3, [pc, #436]	; (8003a1c <MadgwickAHRSupdateIMU+0x3f4>)
 8003866:	edd3 7a00 	vldr	s15, [r3]
 800386a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800386e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003872:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		q0q0 = q0 * q0;
 8003876:	4b6b      	ldr	r3, [pc, #428]	; (8003a24 <MadgwickAHRSupdateIMU+0x3fc>)
 8003878:	ed93 7a00 	vldr	s14, [r3]
 800387c:	4b69      	ldr	r3, [pc, #420]	; (8003a24 <MadgwickAHRSupdateIMU+0x3fc>)
 800387e:	edd3 7a00 	vldr	s15, [r3]
 8003882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003886:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		q1q1 = q1 * q1;
 800388a:	4b63      	ldr	r3, [pc, #396]	; (8003a18 <MadgwickAHRSupdateIMU+0x3f0>)
 800388c:	ed93 7a00 	vldr	s14, [r3]
 8003890:	4b61      	ldr	r3, [pc, #388]	; (8003a18 <MadgwickAHRSupdateIMU+0x3f0>)
 8003892:	edd3 7a00 	vldr	s15, [r3]
 8003896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800389a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		q2q2 = q2 * q2;
 800389e:	4b5f      	ldr	r3, [pc, #380]	; (8003a1c <MadgwickAHRSupdateIMU+0x3f4>)
 80038a0:	ed93 7a00 	vldr	s14, [r3]
 80038a4:	4b5d      	ldr	r3, [pc, #372]	; (8003a1c <MadgwickAHRSupdateIMU+0x3f4>)
 80038a6:	edd3 7a00 	vldr	s15, [r3]
 80038aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ae:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		q3q3 = q3 * q3;
 80038b2:	4b5b      	ldr	r3, [pc, #364]	; (8003a20 <MadgwickAHRSupdateIMU+0x3f8>)
 80038b4:	ed93 7a00 	vldr	s14, [r3]
 80038b8:	4b59      	ldr	r3, [pc, #356]	; (8003a20 <MadgwickAHRSupdateIMU+0x3f8>)
 80038ba:	edd3 7a00 	vldr	s15, [r3]
 80038be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038c2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 80038c6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80038ca:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80038ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038d2:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80038d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80038da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038e2:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80038e6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80038ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038f2:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 80038f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80038fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003902:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8003906:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800390a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800390e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003912:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8003916:	edd7 7a05 	vldr	s15, [r7, #20]
 800391a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800391e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003922:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003926:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800392a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800392e:	4b3a      	ldr	r3, [pc, #232]	; (8003a18 <MadgwickAHRSupdateIMU+0x3f0>)
 8003930:	edd3 7a00 	vldr	s15, [r3]
 8003934:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003938:	ee37 7a27 	vadd.f32	s14, s14, s15
 800393c:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8003940:	edd7 7a04 	vldr	s15, [r7, #16]
 8003944:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003948:	ee37 7a67 	vsub.f32	s14, s14, s15
 800394c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003950:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003954:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8003958:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800395c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003960:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003964:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8003968:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800396c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003970:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003974:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8003978:	edd7 7a03 	vldr	s15, [r7, #12]
 800397c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003980:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003984:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8003988:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800398c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003990:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003994:	4b21      	ldr	r3, [pc, #132]	; (8003a1c <MadgwickAHRSupdateIMU+0x3f4>)
 8003996:	edd3 7a00 	vldr	s15, [r3]
 800399a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800399e:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80039a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80039a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039ae:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80039b2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80039b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039be:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 80039c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80039c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80039ce:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80039d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80039d6:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80039da:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80039de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039e6:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80039ea:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80039ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039f6:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80039fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80039fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a06:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8003a0a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003a0e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003a12:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a16:	e007      	b.n	8003a28 <MadgwickAHRSupdateIMU+0x400>
 8003a18:	200022cc 	.word	0x200022cc
 8003a1c:	200022d0 	.word	0x200022d0
 8003a20:	200022d4 	.word	0x200022d4
 8003a24:	20000004 	.word	0x20000004
 8003a28:	4ba1      	ldr	r3, [pc, #644]	; (8003cb0 <MadgwickAHRSupdateIMU+0x688>)
 8003a2a:	edd3 7a00 	vldr	s15, [r3]
 8003a2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a32:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8003a36:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a42:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003a46:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8003a4a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003a4e:	4b98      	ldr	r3, [pc, #608]	; (8003cb0 <MadgwickAHRSupdateIMU+0x688>)
 8003a50:	edd3 7a00 	vldr	s15, [r3]
 8003a54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a5c:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8003a60:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a6c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8003a70:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003a74:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003a78:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003a7c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003a80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a84:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003a88:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003a8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a90:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003a94:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003a98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a9c:	eeb0 0a67 	vmov.f32	s0, s15
 8003aa0:	f7fe fbbc 	bl	800221c <invSqrt>
 8003aa4:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
		s0 *= recipNorm;
 8003aa8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003aac:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003ab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ab4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 *= recipNorm;
 8003ab8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003abc:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ac4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 *= recipNorm;
 8003ac8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003acc:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ad4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 *= recipNorm;
 8003ad8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003adc:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003ae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 8003ae8:	ed97 7a01 	vldr	s14, [r7, #4]
 8003aec:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003af4:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8003af8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003afc:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		qDot2 -= beta * s1;
 8003b00:	ed97 7a01 	vldr	s14, [r7, #4]
 8003b04:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b0c:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8003b10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b14:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		qDot3 -= beta * s2;
 8003b18:	ed97 7a01 	vldr	s14, [r7, #4]
 8003b1c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003b20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b24:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8003b28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b2c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		qDot4 -= beta * s3;
 8003b30:	ed97 7a01 	vldr	s14, [r7, #4]
 8003b34:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b3c:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8003b40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b44:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8003b48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b4c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003b50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b54:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003b58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b5c:	4b55      	ldr	r3, [pc, #340]	; (8003cb4 <MadgwickAHRSupdateIMU+0x68c>)
 8003b5e:	edd3 7a00 	vldr	s15, [r3]
 8003b62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b66:	4b53      	ldr	r3, [pc, #332]	; (8003cb4 <MadgwickAHRSupdateIMU+0x68c>)
 8003b68:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8003b6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b70:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003b74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b78:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003b7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b80:	4b4d      	ldr	r3, [pc, #308]	; (8003cb8 <MadgwickAHRSupdateIMU+0x690>)
 8003b82:	edd3 7a00 	vldr	s15, [r3]
 8003b86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b8a:	4b4b      	ldr	r3, [pc, #300]	; (8003cb8 <MadgwickAHRSupdateIMU+0x690>)
 8003b8c:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8003b90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b94:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003b98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b9c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8003ba0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ba4:	4b45      	ldr	r3, [pc, #276]	; (8003cbc <MadgwickAHRSupdateIMU+0x694>)
 8003ba6:	edd3 7a00 	vldr	s15, [r3]
 8003baa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bae:	4b43      	ldr	r3, [pc, #268]	; (8003cbc <MadgwickAHRSupdateIMU+0x694>)
 8003bb0:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8003bb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bb8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003bbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bc0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8003bc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bc8:	4b39      	ldr	r3, [pc, #228]	; (8003cb0 <MadgwickAHRSupdateIMU+0x688>)
 8003bca:	edd3 7a00 	vldr	s15, [r3]
 8003bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bd2:	4b37      	ldr	r3, [pc, #220]	; (8003cb0 <MadgwickAHRSupdateIMU+0x688>)
 8003bd4:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8003bd8:	4b36      	ldr	r3, [pc, #216]	; (8003cb4 <MadgwickAHRSupdateIMU+0x68c>)
 8003bda:	ed93 7a00 	vldr	s14, [r3]
 8003bde:	4b35      	ldr	r3, [pc, #212]	; (8003cb4 <MadgwickAHRSupdateIMU+0x68c>)
 8003be0:	edd3 7a00 	vldr	s15, [r3]
 8003be4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003be8:	4b33      	ldr	r3, [pc, #204]	; (8003cb8 <MadgwickAHRSupdateIMU+0x690>)
 8003bea:	edd3 6a00 	vldr	s13, [r3]
 8003bee:	4b32      	ldr	r3, [pc, #200]	; (8003cb8 <MadgwickAHRSupdateIMU+0x690>)
 8003bf0:	edd3 7a00 	vldr	s15, [r3]
 8003bf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bfc:	4b2f      	ldr	r3, [pc, #188]	; (8003cbc <MadgwickAHRSupdateIMU+0x694>)
 8003bfe:	edd3 6a00 	vldr	s13, [r3]
 8003c02:	4b2e      	ldr	r3, [pc, #184]	; (8003cbc <MadgwickAHRSupdateIMU+0x694>)
 8003c04:	edd3 7a00 	vldr	s15, [r3]
 8003c08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c10:	4b27      	ldr	r3, [pc, #156]	; (8003cb0 <MadgwickAHRSupdateIMU+0x688>)
 8003c12:	edd3 6a00 	vldr	s13, [r3]
 8003c16:	4b26      	ldr	r3, [pc, #152]	; (8003cb0 <MadgwickAHRSupdateIMU+0x688>)
 8003c18:	edd3 7a00 	vldr	s15, [r3]
 8003c1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c24:	eeb0 0a67 	vmov.f32	s0, s15
 8003c28:	f7fe faf8 	bl	800221c <invSqrt>
 8003c2c:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
	q0 *= recipNorm;
 8003c30:	4b20      	ldr	r3, [pc, #128]	; (8003cb4 <MadgwickAHRSupdateIMU+0x68c>)
 8003c32:	ed93 7a00 	vldr	s14, [r3]
 8003c36:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c3e:	4b1d      	ldr	r3, [pc, #116]	; (8003cb4 <MadgwickAHRSupdateIMU+0x68c>)
 8003c40:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8003c44:	4b1c      	ldr	r3, [pc, #112]	; (8003cb8 <MadgwickAHRSupdateIMU+0x690>)
 8003c46:	ed93 7a00 	vldr	s14, [r3]
 8003c4a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c52:	4b19      	ldr	r3, [pc, #100]	; (8003cb8 <MadgwickAHRSupdateIMU+0x690>)
 8003c54:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8003c58:	4b18      	ldr	r3, [pc, #96]	; (8003cbc <MadgwickAHRSupdateIMU+0x694>)
 8003c5a:	ed93 7a00 	vldr	s14, [r3]
 8003c5e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c66:	4b15      	ldr	r3, [pc, #84]	; (8003cbc <MadgwickAHRSupdateIMU+0x694>)
 8003c68:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8003c6c:	4b10      	ldr	r3, [pc, #64]	; (8003cb0 <MadgwickAHRSupdateIMU+0x688>)
 8003c6e:	ed93 7a00 	vldr	s14, [r3]
 8003c72:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c7a:	4b0d      	ldr	r3, [pc, #52]	; (8003cb0 <MadgwickAHRSupdateIMU+0x688>)
 8003c7c:	edc3 7a00 	vstr	s15, [r3]

	quaternion[0] = q0;
 8003c80:	4b0c      	ldr	r3, [pc, #48]	; (8003cb4 <MadgwickAHRSupdateIMU+0x68c>)
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	601a      	str	r2, [r3, #0]
	quaternion[1] = q1;
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	4a0a      	ldr	r2, [pc, #40]	; (8003cb8 <MadgwickAHRSupdateIMU+0x690>)
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	601a      	str	r2, [r3, #0]
	quaternion[2] = q2;
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	3308      	adds	r3, #8
 8003c96:	4a09      	ldr	r2, [pc, #36]	; (8003cbc <MadgwickAHRSupdateIMU+0x694>)
 8003c98:	6812      	ldr	r2, [r2, #0]
 8003c9a:	601a      	str	r2, [r3, #0]
	quaternion[3] = q3;
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	330c      	adds	r3, #12
 8003ca0:	4a03      	ldr	r2, [pc, #12]	; (8003cb0 <MadgwickAHRSupdateIMU+0x688>)
 8003ca2:	6812      	ldr	r2, [r2, #0]
 8003ca4:	601a      	str	r2, [r3, #0]
}
 8003ca6:	bf00      	nop
 8003ca8:	3788      	adds	r7, #136	; 0x88
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	200022d4 	.word	0x200022d4
 8003cb4:	20000004 	.word	0x20000004
 8003cb8:	200022cc 	.word	0x200022cc
 8003cbc:	200022d0 	.word	0x200022d0

08003cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

   HAL_Init();
 8003cc4:	f002 fbd2 	bl	800646c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003cc8:	f000 f81e 	bl	8003d08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003ccc:	f000 fa50 	bl	8004170 <MX_GPIO_Init>
  MX_SPI5_Init();
 8003cd0:	f000 f994 	bl	8003ffc <MX_SPI5_Init>
  MX_I2C1_Init();
 8003cd4:	f000 f8d4 	bl	8003e80 <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 8003cd8:	f000 f900 	bl	8003edc <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8003cdc:	f000 f922 	bl	8003f24 <MX_SPI1_Init>
  MX_SPI4_Init();
 8003ce0:	f000 f956 	bl	8003f90 <MX_SPI4_Init>
  MX_USART1_UART_Init();
 8003ce4:	f000 fa1a 	bl	800411c <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8003ce8:	f008 fa02 	bl	800c0f0 <MX_FATFS_Init>
  MX_ADC1_Init();
 8003cec:	f000 f876 	bl	8003ddc <MX_ADC1_Init>
  MX_TIM5_Init();
 8003cf0:	f000 f9ba 	bl	8004068 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start_IT(&htim1);//////////////////////////////////////////////////////////////////////////////////////////////////////////
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8003cf4:	2108      	movs	r1, #8
 8003cf6:	4803      	ldr	r0, [pc, #12]	; (8003d04 <main+0x44>)
 8003cf8:	f006 fda0 	bl	800a83c <HAL_TIM_PWM_Start>
  app_main();
 8003cfc:	f7fd fa58 	bl	80011b0 <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003d00:	e7fe      	b.n	8003d00 <main+0x40>
 8003d02:	bf00      	nop
 8003d04:	2000296c 	.word	0x2000296c

08003d08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b094      	sub	sp, #80	; 0x50
 8003d0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d0e:	f107 0320 	add.w	r3, r7, #32
 8003d12:	2230      	movs	r2, #48	; 0x30
 8003d14:	2100      	movs	r1, #0
 8003d16:	4618      	mov	r0, r3
 8003d18:	f00d ff9a 	bl	8011c50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d1c:	f107 030c 	add.w	r3, r7, #12
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	605a      	str	r2, [r3, #4]
 8003d26:	609a      	str	r2, [r3, #8]
 8003d28:	60da      	str	r2, [r3, #12]
 8003d2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	60bb      	str	r3, [r7, #8]
 8003d30:	4b28      	ldr	r3, [pc, #160]	; (8003dd4 <SystemClock_Config+0xcc>)
 8003d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d34:	4a27      	ldr	r2, [pc, #156]	; (8003dd4 <SystemClock_Config+0xcc>)
 8003d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d3a:	6413      	str	r3, [r2, #64]	; 0x40
 8003d3c:	4b25      	ldr	r3, [pc, #148]	; (8003dd4 <SystemClock_Config+0xcc>)
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d44:	60bb      	str	r3, [r7, #8]
 8003d46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d48:	2300      	movs	r3, #0
 8003d4a:	607b      	str	r3, [r7, #4]
 8003d4c:	4b22      	ldr	r3, [pc, #136]	; (8003dd8 <SystemClock_Config+0xd0>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a21      	ldr	r2, [pc, #132]	; (8003dd8 <SystemClock_Config+0xd0>)
 8003d52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d56:	6013      	str	r3, [r2, #0]
 8003d58:	4b1f      	ldr	r3, [pc, #124]	; (8003dd8 <SystemClock_Config+0xd0>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003d60:	607b      	str	r3, [r7, #4]
 8003d62:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003d64:	2302      	movs	r3, #2
 8003d66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003d6c:	2310      	movs	r3, #16
 8003d6e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d70:	2302      	movs	r3, #2
 8003d72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003d74:	2300      	movs	r3, #0
 8003d76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003d78:	2308      	movs	r3, #8
 8003d7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003d7c:	2364      	movs	r3, #100	; 0x64
 8003d7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003d80:	2302      	movs	r3, #2
 8003d82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003d84:	2307      	movs	r3, #7
 8003d86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d88:	f107 0320 	add.w	r3, r7, #32
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f004 fb91 	bl	80084b4 <HAL_RCC_OscConfig>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003d98:	f000 fa98 	bl	80042cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d9c:	230f      	movs	r3, #15
 8003d9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003da0:	2302      	movs	r3, #2
 8003da2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003da4:	2300      	movs	r3, #0
 8003da6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003da8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003dac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003dae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003db2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003db4:	f107 030c 	add.w	r3, r7, #12
 8003db8:	2103      	movs	r1, #3
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f004 fdf2 	bl	80089a4 <HAL_RCC_ClockConfig>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003dc6:	f000 fa81 	bl	80042cc <Error_Handler>
  }
}
 8003dca:	bf00      	nop
 8003dcc:	3750      	adds	r7, #80	; 0x50
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40023800 	.word	0x40023800
 8003dd8:	40007000 	.word	0x40007000

08003ddc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003de2:	463b      	mov	r3, r7
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	605a      	str	r2, [r3, #4]
 8003dea:	609a      	str	r2, [r3, #8]
 8003dec:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003dee:	4b21      	ldr	r3, [pc, #132]	; (8003e74 <MX_ADC1_Init+0x98>)
 8003df0:	4a21      	ldr	r2, [pc, #132]	; (8003e78 <MX_ADC1_Init+0x9c>)
 8003df2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003df4:	4b1f      	ldr	r3, [pc, #124]	; (8003e74 <MX_ADC1_Init+0x98>)
 8003df6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003dfa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003dfc:	4b1d      	ldr	r3, [pc, #116]	; (8003e74 <MX_ADC1_Init+0x98>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003e02:	4b1c      	ldr	r3, [pc, #112]	; (8003e74 <MX_ADC1_Init+0x98>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003e08:	4b1a      	ldr	r3, [pc, #104]	; (8003e74 <MX_ADC1_Init+0x98>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003e0e:	4b19      	ldr	r3, [pc, #100]	; (8003e74 <MX_ADC1_Init+0x98>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003e16:	4b17      	ldr	r3, [pc, #92]	; (8003e74 <MX_ADC1_Init+0x98>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003e1c:	4b15      	ldr	r3, [pc, #84]	; (8003e74 <MX_ADC1_Init+0x98>)
 8003e1e:	4a17      	ldr	r2, [pc, #92]	; (8003e7c <MX_ADC1_Init+0xa0>)
 8003e20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003e22:	4b14      	ldr	r3, [pc, #80]	; (8003e74 <MX_ADC1_Init+0x98>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003e28:	4b12      	ldr	r3, [pc, #72]	; (8003e74 <MX_ADC1_Init+0x98>)
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003e2e:	4b11      	ldr	r3, [pc, #68]	; (8003e74 <MX_ADC1_Init+0x98>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003e36:	4b0f      	ldr	r3, [pc, #60]	; (8003e74 <MX_ADC1_Init+0x98>)
 8003e38:	2201      	movs	r2, #1
 8003e3a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003e3c:	480d      	ldr	r0, [pc, #52]	; (8003e74 <MX_ADC1_Init+0x98>)
 8003e3e:	f002 fbab 	bl	8006598 <HAL_ADC_Init>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003e48:	f000 fa40 	bl	80042cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003e50:	2301      	movs	r3, #1
 8003e52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003e54:	2307      	movs	r3, #7
 8003e56:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e58:	463b      	mov	r3, r7
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4805      	ldr	r0, [pc, #20]	; (8003e74 <MX_ADC1_Init+0x98>)
 8003e5e:	f002 fd5f 	bl	8006920 <HAL_ADC_ConfigChannel>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003e68:	f000 fa30 	bl	80042cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003e6c:	bf00      	nop
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	200029b4 	.word	0x200029b4
 8003e78:	40012000 	.word	0x40012000
 8003e7c:	0f000001 	.word	0x0f000001

08003e80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003e84:	4b12      	ldr	r3, [pc, #72]	; (8003ed0 <MX_I2C1_Init+0x50>)
 8003e86:	4a13      	ldr	r2, [pc, #76]	; (8003ed4 <MX_I2C1_Init+0x54>)
 8003e88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003e8a:	4b11      	ldr	r3, [pc, #68]	; (8003ed0 <MX_I2C1_Init+0x50>)
 8003e8c:	4a12      	ldr	r2, [pc, #72]	; (8003ed8 <MX_I2C1_Init+0x58>)
 8003e8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e90:	4b0f      	ldr	r3, [pc, #60]	; (8003ed0 <MX_I2C1_Init+0x50>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003e96:	4b0e      	ldr	r3, [pc, #56]	; (8003ed0 <MX_I2C1_Init+0x50>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ed0 <MX_I2C1_Init+0x50>)
 8003e9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ea2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ea4:	4b0a      	ldr	r3, [pc, #40]	; (8003ed0 <MX_I2C1_Init+0x50>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003eaa:	4b09      	ldr	r3, [pc, #36]	; (8003ed0 <MX_I2C1_Init+0x50>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003eb0:	4b07      	ldr	r3, [pc, #28]	; (8003ed0 <MX_I2C1_Init+0x50>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003eb6:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <MX_I2C1_Init+0x50>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003ebc:	4804      	ldr	r0, [pc, #16]	; (8003ed0 <MX_I2C1_Init+0x50>)
 8003ebe:	f003 fb09 	bl	80074d4 <HAL_I2C_Init>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003ec8:	f000 fa00 	bl	80042cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003ecc:	bf00      	nop
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	20002918 	.word	0x20002918
 8003ed4:	40005400 	.word	0x40005400
 8003ed8:	000186a0 	.word	0x000186a0

08003edc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003ee0:	4b0e      	ldr	r3, [pc, #56]	; (8003f1c <MX_SDIO_SD_Init+0x40>)
 8003ee2:	4a0f      	ldr	r2, [pc, #60]	; (8003f20 <MX_SDIO_SD_Init+0x44>)
 8003ee4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003ee6:	4b0d      	ldr	r3, [pc, #52]	; (8003f1c <MX_SDIO_SD_Init+0x40>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003eec:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <MX_SDIO_SD_Init+0x40>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003ef2:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <MX_SDIO_SD_Init+0x40>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003ef8:	4b08      	ldr	r3, [pc, #32]	; (8003f1c <MX_SDIO_SD_Init+0x40>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003efe:	4b07      	ldr	r3, [pc, #28]	; (8003f1c <MX_SDIO_SD_Init+0x40>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 3;
 8003f04:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <MX_SDIO_SD_Init+0x40>)
 8003f06:	2203      	movs	r2, #3
 8003f08:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003f0a:	4b04      	ldr	r3, [pc, #16]	; (8003f1c <MX_SDIO_SD_Init+0x40>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	611a      	str	r2, [r3, #16]
  /* USER CODE END SDIO_Init 2 */

}
 8003f10:	bf00      	nop
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	20002a98 	.word	0x20002a98
 8003f20:	40012c00 	.word	0x40012c00

08003f24 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003f28:	4b17      	ldr	r3, [pc, #92]	; (8003f88 <MX_SPI1_Init+0x64>)
 8003f2a:	4a18      	ldr	r2, [pc, #96]	; (8003f8c <MX_SPI1_Init+0x68>)
 8003f2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003f2e:	4b16      	ldr	r3, [pc, #88]	; (8003f88 <MX_SPI1_Init+0x64>)
 8003f30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003f36:	4b14      	ldr	r3, [pc, #80]	; (8003f88 <MX_SPI1_Init+0x64>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f3c:	4b12      	ldr	r3, [pc, #72]	; (8003f88 <MX_SPI1_Init+0x64>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003f42:	4b11      	ldr	r3, [pc, #68]	; (8003f88 <MX_SPI1_Init+0x64>)
 8003f44:	2202      	movs	r2, #2
 8003f46:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003f48:	4b0f      	ldr	r3, [pc, #60]	; (8003f88 <MX_SPI1_Init+0x64>)
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003f4e:	4b0e      	ldr	r3, [pc, #56]	; (8003f88 <MX_SPI1_Init+0x64>)
 8003f50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003f56:	4b0c      	ldr	r3, [pc, #48]	; (8003f88 <MX_SPI1_Init+0x64>)
 8003f58:	2230      	movs	r2, #48	; 0x30
 8003f5a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f5c:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <MX_SPI1_Init+0x64>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f62:	4b09      	ldr	r3, [pc, #36]	; (8003f88 <MX_SPI1_Init+0x64>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f68:	4b07      	ldr	r3, [pc, #28]	; (8003f88 <MX_SPI1_Init+0x64>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003f6e:	4b06      	ldr	r3, [pc, #24]	; (8003f88 <MX_SPI1_Init+0x64>)
 8003f70:	220a      	movs	r2, #10
 8003f72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003f74:	4804      	ldr	r0, [pc, #16]	; (8003f88 <MX_SPI1_Init+0x64>)
 8003f76:	f005 fe69 	bl	8009c4c <HAL_SPI_Init>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003f80:	f000 f9a4 	bl	80042cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003f84:	bf00      	nop
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	20002b1c 	.word	0x20002b1c
 8003f8c:	40013000 	.word	0x40013000

08003f90 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8003f94:	4b17      	ldr	r3, [pc, #92]	; (8003ff4 <MX_SPI4_Init+0x64>)
 8003f96:	4a18      	ldr	r2, [pc, #96]	; (8003ff8 <MX_SPI4_Init+0x68>)
 8003f98:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8003f9a:	4b16      	ldr	r3, [pc, #88]	; (8003ff4 <MX_SPI4_Init+0x64>)
 8003f9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003fa0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003fa2:	4b14      	ldr	r3, [pc, #80]	; (8003ff4 <MX_SPI4_Init+0x64>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003fa8:	4b12      	ldr	r3, [pc, #72]	; (8003ff4 <MX_SPI4_Init+0x64>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fae:	4b11      	ldr	r3, [pc, #68]	; (8003ff4 <MX_SPI4_Init+0x64>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003fb4:	4b0f      	ldr	r3, [pc, #60]	; (8003ff4 <MX_SPI4_Init+0x64>)
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003fba:	4b0e      	ldr	r3, [pc, #56]	; (8003ff4 <MX_SPI4_Init+0x64>)
 8003fbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fc0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003fc2:	4b0c      	ldr	r3, [pc, #48]	; (8003ff4 <MX_SPI4_Init+0x64>)
 8003fc4:	2228      	movs	r2, #40	; 0x28
 8003fc6:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003fc8:	4b0a      	ldr	r3, [pc, #40]	; (8003ff4 <MX_SPI4_Init+0x64>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003fce:	4b09      	ldr	r3, [pc, #36]	; (8003ff4 <MX_SPI4_Init+0x64>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fd4:	4b07      	ldr	r3, [pc, #28]	; (8003ff4 <MX_SPI4_Init+0x64>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8003fda:	4b06      	ldr	r3, [pc, #24]	; (8003ff4 <MX_SPI4_Init+0x64>)
 8003fdc:	220a      	movs	r2, #10
 8003fde:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003fe0:	4804      	ldr	r0, [pc, #16]	; (8003ff4 <MX_SPI4_Init+0x64>)
 8003fe2:	f005 fe33 	bl	8009c4c <HAL_SPI_Init>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8003fec:	f000 f96e 	bl	80042cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8003ff0:	bf00      	nop
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	20002a40 	.word	0x20002a40
 8003ff8:	40013400 	.word	0x40013400

08003ffc <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8004000:	4b17      	ldr	r3, [pc, #92]	; (8004060 <MX_SPI5_Init+0x64>)
 8004002:	4a18      	ldr	r2, [pc, #96]	; (8004064 <MX_SPI5_Init+0x68>)
 8004004:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8004006:	4b16      	ldr	r3, [pc, #88]	; (8004060 <MX_SPI5_Init+0x64>)
 8004008:	f44f 7282 	mov.w	r2, #260	; 0x104
 800400c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800400e:	4b14      	ldr	r3, [pc, #80]	; (8004060 <MX_SPI5_Init+0x64>)
 8004010:	2200      	movs	r2, #0
 8004012:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8004014:	4b12      	ldr	r3, [pc, #72]	; (8004060 <MX_SPI5_Init+0x64>)
 8004016:	2200      	movs	r2, #0
 8004018:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800401a:	4b11      	ldr	r3, [pc, #68]	; (8004060 <MX_SPI5_Init+0x64>)
 800401c:	2200      	movs	r2, #0
 800401e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004020:	4b0f      	ldr	r3, [pc, #60]	; (8004060 <MX_SPI5_Init+0x64>)
 8004022:	2200      	movs	r2, #0
 8004024:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8004026:	4b0e      	ldr	r3, [pc, #56]	; (8004060 <MX_SPI5_Init+0x64>)
 8004028:	f44f 7200 	mov.w	r2, #512	; 0x200
 800402c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800402e:	4b0c      	ldr	r3, [pc, #48]	; (8004060 <MX_SPI5_Init+0x64>)
 8004030:	2230      	movs	r2, #48	; 0x30
 8004032:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004034:	4b0a      	ldr	r3, [pc, #40]	; (8004060 <MX_SPI5_Init+0x64>)
 8004036:	2200      	movs	r2, #0
 8004038:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800403a:	4b09      	ldr	r3, [pc, #36]	; (8004060 <MX_SPI5_Init+0x64>)
 800403c:	2200      	movs	r2, #0
 800403e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004040:	4b07      	ldr	r3, [pc, #28]	; (8004060 <MX_SPI5_Init+0x64>)
 8004042:	2200      	movs	r2, #0
 8004044:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8004046:	4b06      	ldr	r3, [pc, #24]	; (8004060 <MX_SPI5_Init+0x64>)
 8004048:	220a      	movs	r2, #10
 800404a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800404c:	4804      	ldr	r0, [pc, #16]	; (8004060 <MX_SPI5_Init+0x64>)
 800404e:	f005 fdfd 	bl	8009c4c <HAL_SPI_Init>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8004058:	f000 f938 	bl	80042cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800405c:	bf00      	nop
 800405e:	bd80      	pop	{r7, pc}
 8004060:	200028c0 	.word	0x200028c0
 8004064:	40015000 	.word	0x40015000

08004068 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b08a      	sub	sp, #40	; 0x28
 800406c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800406e:	f107 0320 	add.w	r3, r7, #32
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004078:	1d3b      	adds	r3, r7, #4
 800407a:	2200      	movs	r2, #0
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	605a      	str	r2, [r3, #4]
 8004080:	609a      	str	r2, [r3, #8]
 8004082:	60da      	str	r2, [r3, #12]
 8004084:	611a      	str	r2, [r3, #16]
 8004086:	615a      	str	r2, [r3, #20]
 8004088:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800408a:	4b22      	ldr	r3, [pc, #136]	; (8004114 <MX_TIM5_Init+0xac>)
 800408c:	4a22      	ldr	r2, [pc, #136]	; (8004118 <MX_TIM5_Init+0xb0>)
 800408e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1;
 8004090:	4b20      	ldr	r3, [pc, #128]	; (8004114 <MX_TIM5_Init+0xac>)
 8004092:	2201      	movs	r2, #1
 8004094:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004096:	4b1f      	ldr	r3, [pc, #124]	; (8004114 <MX_TIM5_Init+0xac>)
 8004098:	2200      	movs	r2, #0
 800409a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 800409c:	4b1d      	ldr	r3, [pc, #116]	; (8004114 <MX_TIM5_Init+0xac>)
 800409e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80040a2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040a4:	4b1b      	ldr	r3, [pc, #108]	; (8004114 <MX_TIM5_Init+0xac>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040aa:	4b1a      	ldr	r3, [pc, #104]	; (8004114 <MX_TIM5_Init+0xac>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80040b0:	4818      	ldr	r0, [pc, #96]	; (8004114 <MX_TIM5_Init+0xac>)
 80040b2:	f006 fb73 	bl	800a79c <HAL_TIM_PWM_Init>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80040bc:	f000 f906 	bl	80042cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040c0:	2300      	movs	r3, #0
 80040c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040c4:	2300      	movs	r3, #0
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80040c8:	f107 0320 	add.w	r3, r7, #32
 80040cc:	4619      	mov	r1, r3
 80040ce:	4811      	ldr	r0, [pc, #68]	; (8004114 <MX_TIM5_Init+0xac>)
 80040d0:	f006 ff58 	bl	800af84 <HAL_TIMEx_MasterConfigSynchronization>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80040da:	f000 f8f7 	bl	80042cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040de:	2360      	movs	r3, #96	; 0x60
 80040e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 125;
 80040e2:	237d      	movs	r3, #125	; 0x7d
 80040e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040ea:	2300      	movs	r3, #0
 80040ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80040ee:	1d3b      	adds	r3, r7, #4
 80040f0:	2208      	movs	r2, #8
 80040f2:	4619      	mov	r1, r3
 80040f4:	4807      	ldr	r0, [pc, #28]	; (8004114 <MX_TIM5_Init+0xac>)
 80040f6:	f006 fc51 	bl	800a99c <HAL_TIM_PWM_ConfigChannel>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8004100:	f000 f8e4 	bl	80042cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8004104:	4803      	ldr	r0, [pc, #12]	; (8004114 <MX_TIM5_Init+0xac>)
 8004106:	f000 fb67 	bl	80047d8 <HAL_TIM_MspPostInit>

}
 800410a:	bf00      	nop
 800410c:	3728      	adds	r7, #40	; 0x28
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	2000296c 	.word	0x2000296c
 8004118:	40000c00 	.word	0x40000c00

0800411c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004120:	4b11      	ldr	r3, [pc, #68]	; (8004168 <MX_USART1_UART_Init+0x4c>)
 8004122:	4a12      	ldr	r2, [pc, #72]	; (800416c <MX_USART1_UART_Init+0x50>)
 8004124:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8004126:	4b10      	ldr	r3, [pc, #64]	; (8004168 <MX_USART1_UART_Init+0x4c>)
 8004128:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800412c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800412e:	4b0e      	ldr	r3, [pc, #56]	; (8004168 <MX_USART1_UART_Init+0x4c>)
 8004130:	2200      	movs	r2, #0
 8004132:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004134:	4b0c      	ldr	r3, [pc, #48]	; (8004168 <MX_USART1_UART_Init+0x4c>)
 8004136:	2200      	movs	r2, #0
 8004138:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800413a:	4b0b      	ldr	r3, [pc, #44]	; (8004168 <MX_USART1_UART_Init+0x4c>)
 800413c:	2200      	movs	r2, #0
 800413e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004140:	4b09      	ldr	r3, [pc, #36]	; (8004168 <MX_USART1_UART_Init+0x4c>)
 8004142:	220c      	movs	r2, #12
 8004144:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004146:	4b08      	ldr	r3, [pc, #32]	; (8004168 <MX_USART1_UART_Init+0x4c>)
 8004148:	2200      	movs	r2, #0
 800414a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800414c:	4b06      	ldr	r3, [pc, #24]	; (8004168 <MX_USART1_UART_Init+0x4c>)
 800414e:	2200      	movs	r2, #0
 8004150:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004152:	4805      	ldr	r0, [pc, #20]	; (8004168 <MX_USART1_UART_Init+0x4c>)
 8004154:	f006 ff84 	bl	800b060 <HAL_UART_Init>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800415e:	f000 f8b5 	bl	80042cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004162:	bf00      	nop
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	200029fc 	.word	0x200029fc
 800416c:	40011000 	.word	0x40011000

08004170 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b08a      	sub	sp, #40	; 0x28
 8004174:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004176:	f107 0314 	add.w	r3, r7, #20
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	605a      	str	r2, [r3, #4]
 8004180:	609a      	str	r2, [r3, #8]
 8004182:	60da      	str	r2, [r3, #12]
 8004184:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004186:	2300      	movs	r3, #0
 8004188:	613b      	str	r3, [r7, #16]
 800418a:	4b4b      	ldr	r3, [pc, #300]	; (80042b8 <MX_GPIO_Init+0x148>)
 800418c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418e:	4a4a      	ldr	r2, [pc, #296]	; (80042b8 <MX_GPIO_Init+0x148>)
 8004190:	f043 0304 	orr.w	r3, r3, #4
 8004194:	6313      	str	r3, [r2, #48]	; 0x30
 8004196:	4b48      	ldr	r3, [pc, #288]	; (80042b8 <MX_GPIO_Init+0x148>)
 8004198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419a:	f003 0304 	and.w	r3, r3, #4
 800419e:	613b      	str	r3, [r7, #16]
 80041a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80041a2:	2300      	movs	r3, #0
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	4b44      	ldr	r3, [pc, #272]	; (80042b8 <MX_GPIO_Init+0x148>)
 80041a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041aa:	4a43      	ldr	r2, [pc, #268]	; (80042b8 <MX_GPIO_Init+0x148>)
 80041ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041b0:	6313      	str	r3, [r2, #48]	; 0x30
 80041b2:	4b41      	ldr	r3, [pc, #260]	; (80042b8 <MX_GPIO_Init+0x148>)
 80041b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041be:	2300      	movs	r3, #0
 80041c0:	60bb      	str	r3, [r7, #8]
 80041c2:	4b3d      	ldr	r3, [pc, #244]	; (80042b8 <MX_GPIO_Init+0x148>)
 80041c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c6:	4a3c      	ldr	r2, [pc, #240]	; (80042b8 <MX_GPIO_Init+0x148>)
 80041c8:	f043 0301 	orr.w	r3, r3, #1
 80041cc:	6313      	str	r3, [r2, #48]	; 0x30
 80041ce:	4b3a      	ldr	r3, [pc, #232]	; (80042b8 <MX_GPIO_Init+0x148>)
 80041d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	60bb      	str	r3, [r7, #8]
 80041d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80041da:	2300      	movs	r3, #0
 80041dc:	607b      	str	r3, [r7, #4]
 80041de:	4b36      	ldr	r3, [pc, #216]	; (80042b8 <MX_GPIO_Init+0x148>)
 80041e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e2:	4a35      	ldr	r2, [pc, #212]	; (80042b8 <MX_GPIO_Init+0x148>)
 80041e4:	f043 0302 	orr.w	r3, r3, #2
 80041e8:	6313      	str	r3, [r2, #48]	; 0x30
 80041ea:	4b33      	ldr	r3, [pc, #204]	; (80042b8 <MX_GPIO_Init+0x148>)
 80041ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	607b      	str	r3, [r7, #4]
 80041f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LSM_CS_GPIO_Port, LSM_CS_Pin, GPIO_PIN_SET);
 80041f6:	2201      	movs	r2, #1
 80041f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80041fc:	482f      	ldr	r0, [pc, #188]	; (80042bc <MX_GPIO_Init+0x14c>)
 80041fe:	f003 f94f 	bl	80074a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_GPIO_Port, MOTOR_Pin, GPIO_PIN_RESET);
 8004202:	2200      	movs	r2, #0
 8004204:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004208:	482c      	ldr	r0, [pc, #176]	; (80042bc <MX_GPIO_Init+0x14c>)
 800420a:	f003 f949 	bl	80074a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIS_CS_GPIO_Port, LIS_CS_Pin, GPIO_PIN_SET);
 800420e:	2201      	movs	r2, #1
 8004210:	2110      	movs	r1, #16
 8004212:	482b      	ldr	r0, [pc, #172]	; (80042c0 <MX_GPIO_Init+0x150>)
 8004214:	f003 f944 	bl	80074a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF_CE_Pin|NRF_CS_Pin|CS_TDC_Pin|PEREGIGATEL_Pin
 8004218:	2200      	movs	r2, #0
 800421a:	f245 5106 	movw	r1, #21766	; 0x5506
 800421e:	4829      	ldr	r0, [pc, #164]	; (80042c4 <MX_GPIO_Init+0x154>)
 8004220:	f003 f93e 	bl	80074a0 <HAL_GPIO_WritePin>
                          |LED_Pin|BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LSM_CS_Pin MOTOR_Pin */
  GPIO_InitStruct.Pin = LSM_CS_Pin|MOTOR_Pin;
 8004224:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004228:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800422a:	2301      	movs	r3, #1
 800422c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422e:	2300      	movs	r3, #0
 8004230:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004232:	2300      	movs	r3, #0
 8004234:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004236:	f107 0314 	add.w	r3, r7, #20
 800423a:	4619      	mov	r1, r3
 800423c:	481f      	ldr	r0, [pc, #124]	; (80042bc <MX_GPIO_Init+0x14c>)
 800423e:	f002 feaf 	bl	8006fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : STATE_Pin */
  GPIO_InitStruct.Pin = STATE_Pin;
 8004242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004248:	2300      	movs	r3, #0
 800424a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800424c:	2300      	movs	r3, #0
 800424e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(STATE_GPIO_Port, &GPIO_InitStruct);
 8004250:	f107 0314 	add.w	r3, r7, #20
 8004254:	4619      	mov	r1, r3
 8004256:	4819      	ldr	r0, [pc, #100]	; (80042bc <MX_GPIO_Init+0x14c>)
 8004258:	f002 fea2 	bl	8006fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TDC_INT_Pin */
  GPIO_InitStruct.Pin = TDC_INT_Pin;
 800425c:	2301      	movs	r3, #1
 800425e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004260:	2300      	movs	r3, #0
 8004262:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004264:	2300      	movs	r3, #0
 8004266:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TDC_INT_GPIO_Port, &GPIO_InitStruct);
 8004268:	f107 0314 	add.w	r3, r7, #20
 800426c:	4619      	mov	r1, r3
 800426e:	4816      	ldr	r0, [pc, #88]	; (80042c8 <MX_GPIO_Init+0x158>)
 8004270:	f002 fe96 	bl	8006fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIS_CS_Pin */
  GPIO_InitStruct.Pin = LIS_CS_Pin;
 8004274:	2310      	movs	r3, #16
 8004276:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004278:	2301      	movs	r3, #1
 800427a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800427c:	2300      	movs	r3, #0
 800427e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004280:	2300      	movs	r3, #0
 8004282:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LIS_CS_GPIO_Port, &GPIO_InitStruct);
 8004284:	f107 0314 	add.w	r3, r7, #20
 8004288:	4619      	mov	r1, r3
 800428a:	480d      	ldr	r0, [pc, #52]	; (80042c0 <MX_GPIO_Init+0x150>)
 800428c:	f002 fe88 	bl	8006fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CE_Pin NRF_CS_Pin CS_TDC_Pin PEREGIGATEL_Pin
                           LED_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CS_Pin|CS_TDC_Pin|PEREGIGATEL_Pin
 8004290:	f245 5306 	movw	r3, #21766	; 0x5506
 8004294:	617b      	str	r3, [r7, #20]
                          |LED_Pin|BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004296:	2301      	movs	r3, #1
 8004298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800429a:	2300      	movs	r3, #0
 800429c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800429e:	2300      	movs	r3, #0
 80042a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042a2:	f107 0314 	add.w	r3, r7, #20
 80042a6:	4619      	mov	r1, r3
 80042a8:	4806      	ldr	r0, [pc, #24]	; (80042c4 <MX_GPIO_Init+0x154>)
 80042aa:	f002 fe79 	bl	8006fa0 <HAL_GPIO_Init>

}
 80042ae:	bf00      	nop
 80042b0:	3728      	adds	r7, #40	; 0x28
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40023800 	.word	0x40023800
 80042bc:	40020800 	.word	0x40020800
 80042c0:	40020000 	.word	0x40020000
 80042c4:	40020400 	.word	0x40020400
 80042c8:	40021c00 	.word	0x40021c00

080042cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80042d0:	b672      	cpsid	i
}
 80042d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80042d4:	e7fe      	b.n	80042d4 <Error_Handler+0x8>
	...

080042d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042de:	2300      	movs	r3, #0
 80042e0:	607b      	str	r3, [r7, #4]
 80042e2:	4b10      	ldr	r3, [pc, #64]	; (8004324 <HAL_MspInit+0x4c>)
 80042e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e6:	4a0f      	ldr	r2, [pc, #60]	; (8004324 <HAL_MspInit+0x4c>)
 80042e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042ec:	6453      	str	r3, [r2, #68]	; 0x44
 80042ee:	4b0d      	ldr	r3, [pc, #52]	; (8004324 <HAL_MspInit+0x4c>)
 80042f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042f6:	607b      	str	r3, [r7, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042fa:	2300      	movs	r3, #0
 80042fc:	603b      	str	r3, [r7, #0]
 80042fe:	4b09      	ldr	r3, [pc, #36]	; (8004324 <HAL_MspInit+0x4c>)
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	4a08      	ldr	r2, [pc, #32]	; (8004324 <HAL_MspInit+0x4c>)
 8004304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004308:	6413      	str	r3, [r2, #64]	; 0x40
 800430a:	4b06      	ldr	r3, [pc, #24]	; (8004324 <HAL_MspInit+0x4c>)
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004312:	603b      	str	r3, [r7, #0]
 8004314:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004316:	bf00      	nop
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	40023800 	.word	0x40023800

08004328 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b08a      	sub	sp, #40	; 0x28
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004330:	f107 0314 	add.w	r3, r7, #20
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	605a      	str	r2, [r3, #4]
 800433a:	609a      	str	r2, [r3, #8]
 800433c:	60da      	str	r2, [r3, #12]
 800433e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a17      	ldr	r2, [pc, #92]	; (80043a4 <HAL_ADC_MspInit+0x7c>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d127      	bne.n	800439a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800434a:	2300      	movs	r3, #0
 800434c:	613b      	str	r3, [r7, #16]
 800434e:	4b16      	ldr	r3, [pc, #88]	; (80043a8 <HAL_ADC_MspInit+0x80>)
 8004350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004352:	4a15      	ldr	r2, [pc, #84]	; (80043a8 <HAL_ADC_MspInit+0x80>)
 8004354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004358:	6453      	str	r3, [r2, #68]	; 0x44
 800435a:	4b13      	ldr	r3, [pc, #76]	; (80043a8 <HAL_ADC_MspInit+0x80>)
 800435c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004362:	613b      	str	r3, [r7, #16]
 8004364:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004366:	2300      	movs	r3, #0
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	4b0f      	ldr	r3, [pc, #60]	; (80043a8 <HAL_ADC_MspInit+0x80>)
 800436c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436e:	4a0e      	ldr	r2, [pc, #56]	; (80043a8 <HAL_ADC_MspInit+0x80>)
 8004370:	f043 0301 	orr.w	r3, r3, #1
 8004374:	6313      	str	r3, [r2, #48]	; 0x30
 8004376:	4b0c      	ldr	r3, [pc, #48]	; (80043a8 <HAL_ADC_MspInit+0x80>)
 8004378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|APD_FB_VOLT_Pin;
 8004382:	2309      	movs	r3, #9
 8004384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004386:	2303      	movs	r3, #3
 8004388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800438a:	2300      	movs	r3, #0
 800438c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800438e:	f107 0314 	add.w	r3, r7, #20
 8004392:	4619      	mov	r1, r3
 8004394:	4805      	ldr	r0, [pc, #20]	; (80043ac <HAL_ADC_MspInit+0x84>)
 8004396:	f002 fe03 	bl	8006fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800439a:	bf00      	nop
 800439c:	3728      	adds	r7, #40	; 0x28
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	40012000 	.word	0x40012000
 80043a8:	40023800 	.word	0x40023800
 80043ac:	40020000 	.word	0x40020000

080043b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b08a      	sub	sp, #40	; 0x28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043b8:	f107 0314 	add.w	r3, r7, #20
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	605a      	str	r2, [r3, #4]
 80043c2:	609a      	str	r2, [r3, #8]
 80043c4:	60da      	str	r2, [r3, #12]
 80043c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a19      	ldr	r2, [pc, #100]	; (8004434 <HAL_I2C_MspInit+0x84>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d12c      	bne.n	800442c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043d2:	2300      	movs	r3, #0
 80043d4:	613b      	str	r3, [r7, #16]
 80043d6:	4b18      	ldr	r3, [pc, #96]	; (8004438 <HAL_I2C_MspInit+0x88>)
 80043d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043da:	4a17      	ldr	r2, [pc, #92]	; (8004438 <HAL_I2C_MspInit+0x88>)
 80043dc:	f043 0302 	orr.w	r3, r3, #2
 80043e0:	6313      	str	r3, [r2, #48]	; 0x30
 80043e2:	4b15      	ldr	r3, [pc, #84]	; (8004438 <HAL_I2C_MspInit+0x88>)
 80043e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	613b      	str	r3, [r7, #16]
 80043ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80043ee:	f44f 7310 	mov.w	r3, #576	; 0x240
 80043f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043f4:	2312      	movs	r3, #18
 80043f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f8:	2300      	movs	r3, #0
 80043fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043fc:	2303      	movs	r3, #3
 80043fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004400:	2304      	movs	r3, #4
 8004402:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004404:	f107 0314 	add.w	r3, r7, #20
 8004408:	4619      	mov	r1, r3
 800440a:	480c      	ldr	r0, [pc, #48]	; (800443c <HAL_I2C_MspInit+0x8c>)
 800440c:	f002 fdc8 	bl	8006fa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004410:	2300      	movs	r3, #0
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	4b08      	ldr	r3, [pc, #32]	; (8004438 <HAL_I2C_MspInit+0x88>)
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	4a07      	ldr	r2, [pc, #28]	; (8004438 <HAL_I2C_MspInit+0x88>)
 800441a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800441e:	6413      	str	r3, [r2, #64]	; 0x40
 8004420:	4b05      	ldr	r3, [pc, #20]	; (8004438 <HAL_I2C_MspInit+0x88>)
 8004422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004428:	60fb      	str	r3, [r7, #12]
 800442a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800442c:	bf00      	nop
 800442e:	3728      	adds	r7, #40	; 0x28
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40005400 	.word	0x40005400
 8004438:	40023800 	.word	0x40023800
 800443c:	40020400 	.word	0x40020400

08004440 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a0a      	ldr	r2, [pc, #40]	; (8004478 <HAL_I2C_MspDeInit+0x38>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d10e      	bne.n	8004470 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004452:	4b0a      	ldr	r3, [pc, #40]	; (800447c <HAL_I2C_MspDeInit+0x3c>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	4a09      	ldr	r2, [pc, #36]	; (800447c <HAL_I2C_MspDeInit+0x3c>)
 8004458:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800445c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800445e:	2140      	movs	r1, #64	; 0x40
 8004460:	4807      	ldr	r0, [pc, #28]	; (8004480 <HAL_I2C_MspDeInit+0x40>)
 8004462:	f002 ff21 	bl	80072a8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8004466:	f44f 7100 	mov.w	r1, #512	; 0x200
 800446a:	4805      	ldr	r0, [pc, #20]	; (8004480 <HAL_I2C_MspDeInit+0x40>)
 800446c:	f002 ff1c 	bl	80072a8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8004470:	bf00      	nop
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40005400 	.word	0x40005400
 800447c:	40023800 	.word	0x40023800
 8004480:	40020400 	.word	0x40020400

08004484 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b08a      	sub	sp, #40	; 0x28
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800448c:	f107 0314 	add.w	r3, r7, #20
 8004490:	2200      	movs	r2, #0
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	605a      	str	r2, [r3, #4]
 8004496:	609a      	str	r2, [r3, #8]
 8004498:	60da      	str	r2, [r3, #12]
 800449a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a29      	ldr	r2, [pc, #164]	; (8004548 <HAL_SD_MspInit+0xc4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d14b      	bne.n	800453e <HAL_SD_MspInit+0xba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80044a6:	2300      	movs	r3, #0
 80044a8:	613b      	str	r3, [r7, #16]
 80044aa:	4b28      	ldr	r3, [pc, #160]	; (800454c <HAL_SD_MspInit+0xc8>)
 80044ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ae:	4a27      	ldr	r2, [pc, #156]	; (800454c <HAL_SD_MspInit+0xc8>)
 80044b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80044b4:	6453      	str	r3, [r2, #68]	; 0x44
 80044b6:	4b25      	ldr	r3, [pc, #148]	; (800454c <HAL_SD_MspInit+0xc8>)
 80044b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044be:	613b      	str	r3, [r7, #16]
 80044c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044c2:	2300      	movs	r3, #0
 80044c4:	60fb      	str	r3, [r7, #12]
 80044c6:	4b21      	ldr	r3, [pc, #132]	; (800454c <HAL_SD_MspInit+0xc8>)
 80044c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ca:	4a20      	ldr	r2, [pc, #128]	; (800454c <HAL_SD_MspInit+0xc8>)
 80044cc:	f043 0301 	orr.w	r3, r3, #1
 80044d0:	6313      	str	r3, [r2, #48]	; 0x30
 80044d2:	4b1e      	ldr	r3, [pc, #120]	; (800454c <HAL_SD_MspInit+0xc8>)
 80044d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044de:	2300      	movs	r3, #0
 80044e0:	60bb      	str	r3, [r7, #8]
 80044e2:	4b1a      	ldr	r3, [pc, #104]	; (800454c <HAL_SD_MspInit+0xc8>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	4a19      	ldr	r2, [pc, #100]	; (800454c <HAL_SD_MspInit+0xc8>)
 80044e8:	f043 0302 	orr.w	r3, r3, #2
 80044ec:	6313      	str	r3, [r2, #48]	; 0x30
 80044ee:	4b17      	ldr	r3, [pc, #92]	; (800454c <HAL_SD_MspInit+0xc8>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	60bb      	str	r3, [r7, #8]
 80044f8:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80044fa:	f44f 7350 	mov.w	r3, #832	; 0x340
 80044fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004500:	2302      	movs	r3, #2
 8004502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004504:	2300      	movs	r3, #0
 8004506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004508:	2303      	movs	r3, #3
 800450a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800450c:	230c      	movs	r3, #12
 800450e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004510:	f107 0314 	add.w	r3, r7, #20
 8004514:	4619      	mov	r1, r3
 8004516:	480e      	ldr	r0, [pc, #56]	; (8004550 <HAL_SD_MspInit+0xcc>)
 8004518:	f002 fd42 	bl	8006fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 800451c:	f248 03a0 	movw	r3, #32928	; 0x80a0
 8004520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004522:	2302      	movs	r3, #2
 8004524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004526:	2300      	movs	r3, #0
 8004528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800452a:	2303      	movs	r3, #3
 800452c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800452e:	230c      	movs	r3, #12
 8004530:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004532:	f107 0314 	add.w	r3, r7, #20
 8004536:	4619      	mov	r1, r3
 8004538:	4806      	ldr	r0, [pc, #24]	; (8004554 <HAL_SD_MspInit+0xd0>)
 800453a:	f002 fd31 	bl	8006fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800453e:	bf00      	nop
 8004540:	3728      	adds	r7, #40	; 0x28
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	40012c00 	.word	0x40012c00
 800454c:	40023800 	.word	0x40023800
 8004550:	40020000 	.word	0x40020000
 8004554:	40020400 	.word	0x40020400

08004558 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b090      	sub	sp, #64	; 0x40
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004560:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004564:	2200      	movs	r2, #0
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	605a      	str	r2, [r3, #4]
 800456a:	609a      	str	r2, [r3, #8]
 800456c:	60da      	str	r2, [r3, #12]
 800456e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a81      	ldr	r2, [pc, #516]	; (800477c <HAL_SPI_MspInit+0x224>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d14a      	bne.n	8004610 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800457a:	2300      	movs	r3, #0
 800457c:	62bb      	str	r3, [r7, #40]	; 0x28
 800457e:	4b80      	ldr	r3, [pc, #512]	; (8004780 <HAL_SPI_MspInit+0x228>)
 8004580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004582:	4a7f      	ldr	r2, [pc, #508]	; (8004780 <HAL_SPI_MspInit+0x228>)
 8004584:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004588:	6453      	str	r3, [r2, #68]	; 0x44
 800458a:	4b7d      	ldr	r3, [pc, #500]	; (8004780 <HAL_SPI_MspInit+0x228>)
 800458c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004592:	62bb      	str	r3, [r7, #40]	; 0x28
 8004594:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004596:	2300      	movs	r3, #0
 8004598:	627b      	str	r3, [r7, #36]	; 0x24
 800459a:	4b79      	ldr	r3, [pc, #484]	; (8004780 <HAL_SPI_MspInit+0x228>)
 800459c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459e:	4a78      	ldr	r2, [pc, #480]	; (8004780 <HAL_SPI_MspInit+0x228>)
 80045a0:	f043 0301 	orr.w	r3, r3, #1
 80045a4:	6313      	str	r3, [r2, #48]	; 0x30
 80045a6:	4b76      	ldr	r3, [pc, #472]	; (8004780 <HAL_SPI_MspInit+0x228>)
 80045a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	627b      	str	r3, [r7, #36]	; 0x24
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045b2:	2300      	movs	r3, #0
 80045b4:	623b      	str	r3, [r7, #32]
 80045b6:	4b72      	ldr	r3, [pc, #456]	; (8004780 <HAL_SPI_MspInit+0x228>)
 80045b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ba:	4a71      	ldr	r2, [pc, #452]	; (8004780 <HAL_SPI_MspInit+0x228>)
 80045bc:	f043 0302 	orr.w	r3, r3, #2
 80045c0:	6313      	str	r3, [r2, #48]	; 0x30
 80045c2:	4b6f      	ldr	r3, [pc, #444]	; (8004780 <HAL_SPI_MspInit+0x228>)
 80045c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	623b      	str	r3, [r7, #32]
 80045cc:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80045ce:	23a0      	movs	r3, #160	; 0xa0
 80045d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045d2:	2302      	movs	r3, #2
 80045d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d6:	2300      	movs	r3, #0
 80045d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045da:	2303      	movs	r3, #3
 80045dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80045de:	2305      	movs	r3, #5
 80045e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045e6:	4619      	mov	r1, r3
 80045e8:	4866      	ldr	r0, [pc, #408]	; (8004784 <HAL_SPI_MspInit+0x22c>)
 80045ea:	f002 fcd9 	bl	8006fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80045ee:	2310      	movs	r3, #16
 80045f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f2:	2302      	movs	r3, #2
 80045f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f6:	2300      	movs	r3, #0
 80045f8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045fa:	2303      	movs	r3, #3
 80045fc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80045fe:	2305      	movs	r3, #5
 8004600:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004602:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004606:	4619      	mov	r1, r3
 8004608:	485f      	ldr	r0, [pc, #380]	; (8004788 <HAL_SPI_MspInit+0x230>)
 800460a:	f002 fcc9 	bl	8006fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800460e:	e0b1      	b.n	8004774 <HAL_SPI_MspInit+0x21c>
  else if(hspi->Instance==SPI4)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a5d      	ldr	r2, [pc, #372]	; (800478c <HAL_SPI_MspInit+0x234>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d15c      	bne.n	80046d4 <HAL_SPI_MspInit+0x17c>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800461a:	2300      	movs	r3, #0
 800461c:	61fb      	str	r3, [r7, #28]
 800461e:	4b58      	ldr	r3, [pc, #352]	; (8004780 <HAL_SPI_MspInit+0x228>)
 8004620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004622:	4a57      	ldr	r2, [pc, #348]	; (8004780 <HAL_SPI_MspInit+0x228>)
 8004624:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004628:	6453      	str	r3, [r2, #68]	; 0x44
 800462a:	4b55      	ldr	r3, [pc, #340]	; (8004780 <HAL_SPI_MspInit+0x228>)
 800462c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004632:	61fb      	str	r3, [r7, #28]
 8004634:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004636:	2300      	movs	r3, #0
 8004638:	61bb      	str	r3, [r7, #24]
 800463a:	4b51      	ldr	r3, [pc, #324]	; (8004780 <HAL_SPI_MspInit+0x228>)
 800463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463e:	4a50      	ldr	r2, [pc, #320]	; (8004780 <HAL_SPI_MspInit+0x228>)
 8004640:	f043 0301 	orr.w	r3, r3, #1
 8004644:	6313      	str	r3, [r2, #48]	; 0x30
 8004646:	4b4e      	ldr	r3, [pc, #312]	; (8004780 <HAL_SPI_MspInit+0x228>)
 8004648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	61bb      	str	r3, [r7, #24]
 8004650:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004652:	2300      	movs	r3, #0
 8004654:	617b      	str	r3, [r7, #20]
 8004656:	4b4a      	ldr	r3, [pc, #296]	; (8004780 <HAL_SPI_MspInit+0x228>)
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	4a49      	ldr	r2, [pc, #292]	; (8004780 <HAL_SPI_MspInit+0x228>)
 800465c:	f043 0302 	orr.w	r3, r3, #2
 8004660:	6313      	str	r3, [r2, #48]	; 0x30
 8004662:	4b47      	ldr	r3, [pc, #284]	; (8004780 <HAL_SPI_MspInit+0x228>)
 8004664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800466e:	2302      	movs	r3, #2
 8004670:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004672:	2302      	movs	r3, #2
 8004674:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004676:	2300      	movs	r3, #0
 8004678:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800467a:	2303      	movs	r3, #3
 800467c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800467e:	2305      	movs	r3, #5
 8004680:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004682:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004686:	4619      	mov	r1, r3
 8004688:	483e      	ldr	r0, [pc, #248]	; (8004784 <HAL_SPI_MspInit+0x22c>)
 800468a:	f002 fc89 	bl	8006fa0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800468e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004692:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004694:	2302      	movs	r3, #2
 8004696:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004698:	2300      	movs	r3, #0
 800469a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800469c:	2303      	movs	r3, #3
 800469e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 80046a0:	2306      	movs	r3, #6
 80046a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046a8:	4619      	mov	r1, r3
 80046aa:	4837      	ldr	r0, [pc, #220]	; (8004788 <HAL_SPI_MspInit+0x230>)
 80046ac:	f002 fc78 	bl	8006fa0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80046b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80046b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046b6:	2302      	movs	r3, #2
 80046b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ba:	2300      	movs	r3, #0
 80046bc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046be:	2303      	movs	r3, #3
 80046c0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 80046c2:	2306      	movs	r3, #6
 80046c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046ca:	4619      	mov	r1, r3
 80046cc:	482d      	ldr	r0, [pc, #180]	; (8004784 <HAL_SPI_MspInit+0x22c>)
 80046ce:	f002 fc67 	bl	8006fa0 <HAL_GPIO_Init>
}
 80046d2:	e04f      	b.n	8004774 <HAL_SPI_MspInit+0x21c>
  else if(hspi->Instance==SPI5)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a2d      	ldr	r2, [pc, #180]	; (8004790 <HAL_SPI_MspInit+0x238>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d14a      	bne.n	8004774 <HAL_SPI_MspInit+0x21c>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80046de:	2300      	movs	r3, #0
 80046e0:	613b      	str	r3, [r7, #16]
 80046e2:	4b27      	ldr	r3, [pc, #156]	; (8004780 <HAL_SPI_MspInit+0x228>)
 80046e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e6:	4a26      	ldr	r2, [pc, #152]	; (8004780 <HAL_SPI_MspInit+0x228>)
 80046e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ec:	6453      	str	r3, [r2, #68]	; 0x44
 80046ee:	4b24      	ldr	r3, [pc, #144]	; (8004780 <HAL_SPI_MspInit+0x228>)
 80046f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046f6:	613b      	str	r3, [r7, #16]
 80046f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046fa:	2300      	movs	r3, #0
 80046fc:	60fb      	str	r3, [r7, #12]
 80046fe:	4b20      	ldr	r3, [pc, #128]	; (8004780 <HAL_SPI_MspInit+0x228>)
 8004700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004702:	4a1f      	ldr	r2, [pc, #124]	; (8004780 <HAL_SPI_MspInit+0x228>)
 8004704:	f043 0302 	orr.w	r3, r3, #2
 8004708:	6313      	str	r3, [r2, #48]	; 0x30
 800470a:	4b1d      	ldr	r3, [pc, #116]	; (8004780 <HAL_SPI_MspInit+0x228>)
 800470c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004716:	2300      	movs	r3, #0
 8004718:	60bb      	str	r3, [r7, #8]
 800471a:	4b19      	ldr	r3, [pc, #100]	; (8004780 <HAL_SPI_MspInit+0x228>)
 800471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471e:	4a18      	ldr	r2, [pc, #96]	; (8004780 <HAL_SPI_MspInit+0x228>)
 8004720:	f043 0301 	orr.w	r3, r3, #1
 8004724:	6313      	str	r3, [r2, #48]	; 0x30
 8004726:	4b16      	ldr	r3, [pc, #88]	; (8004780 <HAL_SPI_MspInit+0x228>)
 8004728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	60bb      	str	r3, [r7, #8]
 8004730:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004732:	2301      	movs	r3, #1
 8004734:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004736:	2302      	movs	r3, #2
 8004738:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800473a:	2300      	movs	r3, #0
 800473c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800473e:	2303      	movs	r3, #3
 8004740:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8004742:	2306      	movs	r3, #6
 8004744:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004746:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800474a:	4619      	mov	r1, r3
 800474c:	480e      	ldr	r0, [pc, #56]	; (8004788 <HAL_SPI_MspInit+0x230>)
 800474e:	f002 fc27 	bl	8006fa0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8004752:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004756:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004758:	2302      	movs	r3, #2
 800475a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800475c:	2300      	movs	r3, #0
 800475e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004760:	2303      	movs	r3, #3
 8004762:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8004764:	2306      	movs	r3, #6
 8004766:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004768:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800476c:	4619      	mov	r1, r3
 800476e:	4805      	ldr	r0, [pc, #20]	; (8004784 <HAL_SPI_MspInit+0x22c>)
 8004770:	f002 fc16 	bl	8006fa0 <HAL_GPIO_Init>
}
 8004774:	bf00      	nop
 8004776:	3740      	adds	r7, #64	; 0x40
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	40013000 	.word	0x40013000
 8004780:	40023800 	.word	0x40023800
 8004784:	40020000 	.word	0x40020000
 8004788:	40020400 	.word	0x40020400
 800478c:	40013400 	.word	0x40013400
 8004790:	40015000 	.word	0x40015000

08004794 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a0b      	ldr	r2, [pc, #44]	; (80047d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d10d      	bne.n	80047c2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]
 80047aa:	4b0a      	ldr	r3, [pc, #40]	; (80047d4 <HAL_TIM_PWM_MspInit+0x40>)
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	4a09      	ldr	r2, [pc, #36]	; (80047d4 <HAL_TIM_PWM_MspInit+0x40>)
 80047b0:	f043 0308 	orr.w	r3, r3, #8
 80047b4:	6413      	str	r3, [r2, #64]	; 0x40
 80047b6:	4b07      	ldr	r3, [pc, #28]	; (80047d4 <HAL_TIM_PWM_MspInit+0x40>)
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80047c2:	bf00      	nop
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	40000c00 	.word	0x40000c00
 80047d4:	40023800 	.word	0x40023800

080047d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b088      	sub	sp, #32
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047e0:	f107 030c 	add.w	r3, r7, #12
 80047e4:	2200      	movs	r2, #0
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	605a      	str	r2, [r3, #4]
 80047ea:	609a      	str	r2, [r3, #8]
 80047ec:	60da      	str	r2, [r3, #12]
 80047ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a12      	ldr	r2, [pc, #72]	; (8004840 <HAL_TIM_MspPostInit+0x68>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d11d      	bne.n	8004836 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047fa:	2300      	movs	r3, #0
 80047fc:	60bb      	str	r3, [r7, #8]
 80047fe:	4b11      	ldr	r3, [pc, #68]	; (8004844 <HAL_TIM_MspPostInit+0x6c>)
 8004800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004802:	4a10      	ldr	r2, [pc, #64]	; (8004844 <HAL_TIM_MspPostInit+0x6c>)
 8004804:	f043 0301 	orr.w	r3, r3, #1
 8004808:	6313      	str	r3, [r2, #48]	; 0x30
 800480a:	4b0e      	ldr	r3, [pc, #56]	; (8004844 <HAL_TIM_MspPostInit+0x6c>)
 800480c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	60bb      	str	r3, [r7, #8]
 8004814:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA2     ------> TIM5_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004816:	2304      	movs	r3, #4
 8004818:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800481a:	2302      	movs	r3, #2
 800481c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800481e:	2300      	movs	r3, #0
 8004820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004822:	2300      	movs	r3, #0
 8004824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004826:	2302      	movs	r3, #2
 8004828:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800482a:	f107 030c 	add.w	r3, r7, #12
 800482e:	4619      	mov	r1, r3
 8004830:	4805      	ldr	r0, [pc, #20]	; (8004848 <HAL_TIM_MspPostInit+0x70>)
 8004832:	f002 fbb5 	bl	8006fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8004836:	bf00      	nop
 8004838:	3720      	adds	r7, #32
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	40000c00 	.word	0x40000c00
 8004844:	40023800 	.word	0x40023800
 8004848:	40020000 	.word	0x40020000

0800484c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b08a      	sub	sp, #40	; 0x28
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004854:	f107 0314 	add.w	r3, r7, #20
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	605a      	str	r2, [r3, #4]
 800485e:	609a      	str	r2, [r3, #8]
 8004860:	60da      	str	r2, [r3, #12]
 8004862:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a2c      	ldr	r2, [pc, #176]	; (800491c <HAL_UART_MspInit+0xd0>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d152      	bne.n	8004914 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800486e:	2300      	movs	r3, #0
 8004870:	613b      	str	r3, [r7, #16]
 8004872:	4b2b      	ldr	r3, [pc, #172]	; (8004920 <HAL_UART_MspInit+0xd4>)
 8004874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004876:	4a2a      	ldr	r2, [pc, #168]	; (8004920 <HAL_UART_MspInit+0xd4>)
 8004878:	f043 0310 	orr.w	r3, r3, #16
 800487c:	6453      	str	r3, [r2, #68]	; 0x44
 800487e:	4b28      	ldr	r3, [pc, #160]	; (8004920 <HAL_UART_MspInit+0xd4>)
 8004880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004882:	f003 0310 	and.w	r3, r3, #16
 8004886:	613b      	str	r3, [r7, #16]
 8004888:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800488a:	2300      	movs	r3, #0
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	4b24      	ldr	r3, [pc, #144]	; (8004920 <HAL_UART_MspInit+0xd4>)
 8004890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004892:	4a23      	ldr	r2, [pc, #140]	; (8004920 <HAL_UART_MspInit+0xd4>)
 8004894:	f043 0301 	orr.w	r3, r3, #1
 8004898:	6313      	str	r3, [r2, #48]	; 0x30
 800489a:	4b21      	ldr	r3, [pc, #132]	; (8004920 <HAL_UART_MspInit+0xd4>)
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048a6:	2300      	movs	r3, #0
 80048a8:	60bb      	str	r3, [r7, #8]
 80048aa:	4b1d      	ldr	r3, [pc, #116]	; (8004920 <HAL_UART_MspInit+0xd4>)
 80048ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ae:	4a1c      	ldr	r2, [pc, #112]	; (8004920 <HAL_UART_MspInit+0xd4>)
 80048b0:	f043 0302 	orr.w	r3, r3, #2
 80048b4:	6313      	str	r3, [r2, #48]	; 0x30
 80048b6:	4b1a      	ldr	r3, [pc, #104]	; (8004920 <HAL_UART_MspInit+0xd4>)
 80048b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	60bb      	str	r3, [r7, #8]
 80048c0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80048c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048c8:	2302      	movs	r3, #2
 80048ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048cc:	2300      	movs	r3, #0
 80048ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048d0:	2303      	movs	r3, #3
 80048d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80048d4:	2307      	movs	r3, #7
 80048d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048d8:	f107 0314 	add.w	r3, r7, #20
 80048dc:	4619      	mov	r1, r3
 80048de:	4811      	ldr	r0, [pc, #68]	; (8004924 <HAL_UART_MspInit+0xd8>)
 80048e0:	f002 fb5e 	bl	8006fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80048e4:	2308      	movs	r3, #8
 80048e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048e8:	2302      	movs	r3, #2
 80048ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ec:	2300      	movs	r3, #0
 80048ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048f0:	2303      	movs	r3, #3
 80048f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80048f4:	2307      	movs	r3, #7
 80048f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048f8:	f107 0314 	add.w	r3, r7, #20
 80048fc:	4619      	mov	r1, r3
 80048fe:	480a      	ldr	r0, [pc, #40]	; (8004928 <HAL_UART_MspInit+0xdc>)
 8004900:	f002 fb4e 	bl	8006fa0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004904:	2200      	movs	r2, #0
 8004906:	2100      	movs	r1, #0
 8004908:	2025      	movs	r0, #37	; 0x25
 800490a:	f002 fb12 	bl	8006f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800490e:	2025      	movs	r0, #37	; 0x25
 8004910:	f002 fb2b 	bl	8006f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004914:	bf00      	nop
 8004916:	3728      	adds	r7, #40	; 0x28
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	40011000 	.word	0x40011000
 8004920:	40023800 	.word	0x40023800
 8004924:	40020000 	.word	0x40020000
 8004928:	40020400 	.word	0x40020400

0800492c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004930:	e7fe      	b.n	8004930 <NMI_Handler+0x4>

08004932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004932:	b480      	push	{r7}
 8004934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004936:	e7fe      	b.n	8004936 <HardFault_Handler+0x4>

08004938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800493c:	e7fe      	b.n	800493c <MemManage_Handler+0x4>

0800493e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800493e:	b480      	push	{r7}
 8004940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004942:	e7fe      	b.n	8004942 <BusFault_Handler+0x4>

08004944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004948:	e7fe      	b.n	8004948 <UsageFault_Handler+0x4>

0800494a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800494a:	b480      	push	{r7}
 800494c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800494e:	bf00      	nop
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800495c:	bf00      	nop
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004966:	b480      	push	{r7}
 8004968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800496a:	bf00      	nop
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004978:	f001 fdca 	bl	8006510 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800497c:	bf00      	nop
 800497e:	bd80      	pop	{r7, pc}

08004980 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
		//__disable_irq();
		//#pragma GCC diagnostic push;
		//#pragma GCC diagnostic ignored "-Wunused-variable"
		    volatile uint32_t sr = huart1.Instance->SR;
 8004986:	4b08      	ldr	r3, [pc, #32]	; (80049a8 <USART1_IRQHandler+0x28>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	607b      	str	r3, [r7, #4]
		//#pragma GCC diagnostic pop
		    volatile uint32_t byte = huart1.Instance->DR;
 800498e:	4b06      	ldr	r3, [pc, #24]	; (80049a8 <USART1_IRQHandler+0x28>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	603b      	str	r3, [r7, #0]
		    //__enable_irq();

		    gps_push_byte(byte);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	4618      	mov	r0, r3
 800499a:	f00b fcab 	bl	80102f4 <gps_push_byte>
		    (void)sr;
 800499e:	687b      	ldr	r3, [r7, #4]


	    return;
 80049a0:	bf00      	nop
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	200029fc 	.word	0x200029fc

080049ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
	return 1;
 80049b0:	2301      	movs	r3, #1
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <_kill>:

int _kill(int pid, int sig)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80049c6:	f00d f8f9 	bl	8011bbc <__errno>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2216      	movs	r2, #22
 80049ce:	601a      	str	r2, [r3, #0]
	return -1;
 80049d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <_exit>:

void _exit (int status)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80049e4:	f04f 31ff 	mov.w	r1, #4294967295
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7ff ffe7 	bl	80049bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80049ee:	e7fe      	b.n	80049ee <_exit+0x12>

080049f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049fc:	2300      	movs	r3, #0
 80049fe:	617b      	str	r3, [r7, #20]
 8004a00:	e00a      	b.n	8004a18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004a02:	f3af 8000 	nop.w
 8004a06:	4601      	mov	r1, r0
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	1c5a      	adds	r2, r3, #1
 8004a0c:	60ba      	str	r2, [r7, #8]
 8004a0e:	b2ca      	uxtb	r2, r1
 8004a10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	3301      	adds	r3, #1
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	dbf0      	blt.n	8004a02 <_read+0x12>
	}

return len;
 8004a20:	687b      	ldr	r3, [r7, #4]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <_close>:
	}
	return len;
}

int _close(int file)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
	return -1;
 8004a32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b083      	sub	sp, #12
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
 8004a4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a52:	605a      	str	r2, [r3, #4]
	return 0;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <_isatty>:

int _isatty(int file)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
	return 1;
 8004a6a:	2301      	movs	r3, #1
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
	return 0;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
	...

08004a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a9c:	4a14      	ldr	r2, [pc, #80]	; (8004af0 <_sbrk+0x5c>)
 8004a9e:	4b15      	ldr	r3, [pc, #84]	; (8004af4 <_sbrk+0x60>)
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004aa8:	4b13      	ldr	r3, [pc, #76]	; (8004af8 <_sbrk+0x64>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d102      	bne.n	8004ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ab0:	4b11      	ldr	r3, [pc, #68]	; (8004af8 <_sbrk+0x64>)
 8004ab2:	4a12      	ldr	r2, [pc, #72]	; (8004afc <_sbrk+0x68>)
 8004ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ab6:	4b10      	ldr	r3, [pc, #64]	; (8004af8 <_sbrk+0x64>)
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4413      	add	r3, r2
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d207      	bcs.n	8004ad4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ac4:	f00d f87a 	bl	8011bbc <__errno>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	220c      	movs	r2, #12
 8004acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004ace:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad2:	e009      	b.n	8004ae8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ad4:	4b08      	ldr	r3, [pc, #32]	; (8004af8 <_sbrk+0x64>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ada:	4b07      	ldr	r3, [pc, #28]	; (8004af8 <_sbrk+0x64>)
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	4a05      	ldr	r2, [pc, #20]	; (8004af8 <_sbrk+0x64>)
 8004ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3718      	adds	r7, #24
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	20020000 	.word	0x20020000
 8004af4:	00000400 	.word	0x00000400
 8004af8:	200022d8 	.word	0x200022d8
 8004afc:	20004bf8 	.word	0x20004bf8

08004b00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b04:	4b06      	ldr	r3, [pc, #24]	; (8004b20 <SystemInit+0x20>)
 8004b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0a:	4a05      	ldr	r2, [pc, #20]	; (8004b20 <SystemInit+0x20>)
 8004b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b14:	bf00      	nop
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	e000ed00 	.word	0xe000ed00

08004b24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004b24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004b28:	480d      	ldr	r0, [pc, #52]	; (8004b60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004b2a:	490e      	ldr	r1, [pc, #56]	; (8004b64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004b2c:	4a0e      	ldr	r2, [pc, #56]	; (8004b68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b30:	e002      	b.n	8004b38 <LoopCopyDataInit>

08004b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b36:	3304      	adds	r3, #4

08004b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b3c:	d3f9      	bcc.n	8004b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b3e:	4a0b      	ldr	r2, [pc, #44]	; (8004b6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004b40:	4c0b      	ldr	r4, [pc, #44]	; (8004b70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b44:	e001      	b.n	8004b4a <LoopFillZerobss>

08004b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b48:	3204      	adds	r2, #4

08004b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b4c:	d3fb      	bcc.n	8004b46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004b4e:	f7ff ffd7 	bl	8004b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b52:	f00d f84b 	bl	8011bec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b56:	f7ff f8b3 	bl	8003cc0 <main>
  bx  lr    
 8004b5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004b5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b64:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8004b68:	08018678 	.word	0x08018678
  ldr r2, =_sbss
 8004b6c:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8004b70:	20004bf8 	.word	0x20004bf8

08004b74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b74:	e7fe      	b.n	8004b74 <ADC_IRQHandler>

08004b76 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b084      	sub	sp, #16
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* chip id read try count */
    uint8_t try_count = 5;
 8004b7e:	2305      	movs	r3, #5
 8004b80:	73bb      	strb	r3, [r7, #14]
    uint8_t chip_id = 0;
 8004b82:	2300      	movs	r3, #0
 8004b84:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f001 fa14 	bl	8005fb4 <null_ptr_check>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8004b90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d130      	bne.n	8004bfa <bme280_init+0x84>
    {
        while (try_count)
 8004b98:	e025      	b.n	8004be6 <bme280_init+0x70>
        {
            /* Read the chip-id of bme280 sensor */
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8004b9a:	f107 010d 	add.w	r1, r7, #13
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	20d0      	movs	r0, #208	; 0xd0
 8004ba4:	f000 f82f 	bl	8004c06 <bme280_get_regs>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BME280_OK))
 8004bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d111      	bne.n	8004bd8 <bme280_init+0x62>
            {
                dev->chip_id = chip_id;
 8004bb4:	7b7a      	ldrb	r2, [r7, #13]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bme280_soft_reset(dev);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f978 	bl	8004eb0 <bme280_soft_reset>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	73fb      	strb	r3, [r7, #15]
                if (rslt == BME280_OK)
 8004bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d110      	bne.n	8004bee <bme280_init+0x78>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f001 f867 	bl	8005ca0 <get_calib_data>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	73fb      	strb	r3, [r7, #15]
                }
                break;
 8004bd6:	e00a      	b.n	8004bee <bme280_init+0x78>
            }

            /* Wait for 1 ms */
            dev->delay_ms(1);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	2001      	movs	r0, #1
 8004bde:	4798      	blx	r3
            --try_count;
 8004be0:	7bbb      	ldrb	r3, [r7, #14]
 8004be2:	3b01      	subs	r3, #1
 8004be4:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 8004be6:	7bbb      	ldrb	r3, [r7, #14]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1d6      	bne.n	8004b9a <bme280_init+0x24>
 8004bec:	e000      	b.n	8004bf0 <bme280_init+0x7a>
                break;
 8004bee:	bf00      	nop
        }

        /* Chip id check failed */
        if (!try_count)
 8004bf0:	7bbb      	ldrb	r3, [r7, #14]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <bme280_init+0x84>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 8004bf6:	23fe      	movs	r3, #254	; 0xfe
 8004bf8:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8004c06:	b590      	push	{r4, r7, lr}
 8004c08:	b087      	sub	sp, #28
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607b      	str	r3, [r7, #4]
 8004c10:	4603      	mov	r3, r0
 8004c12:	73fb      	strb	r3, [r7, #15]
 8004c14:	4613      	mov	r3, r2
 8004c16:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f001 f9cb 	bl	8005fb4 <null_ptr_check>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8004c22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d117      	bne.n	8004c5a <bme280_get_regs+0x54>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	789b      	ldrb	r3, [r3, #2]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d003      	beq.n	8004c3a <bme280_get_regs+0x34>
        {
            reg_addr = reg_addr | 0x80;
 8004c32:	7bfb      	ldrb	r3, [r7, #15]
 8004c34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c38:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data  */
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685c      	ldr	r4, [r3, #4]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	7858      	ldrb	r0, [r3, #1]
 8004c42:	89bb      	ldrh	r3, [r7, #12]
 8004c44:	7bf9      	ldrb	r1, [r7, #15]
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	47a0      	blx	r4
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error */
        if (rslt != BME280_OK)
 8004c4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d001      	beq.n	8004c5a <bme280_get_regs+0x54>
        {
            rslt = BME280_E_COMM_FAIL;
 8004c56:	23fc      	movs	r3, #252	; 0xfc
 8004c58:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8004c5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	371c      	adds	r7, #28
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd90      	pop	{r4, r7, pc}

08004c66 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8004c66:	b590      	push	{r4, r7, lr}
 8004c68:	b08d      	sub	sp, #52	; 0x34
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	60f8      	str	r0, [r7, #12]
 8004c6e:	60b9      	str	r1, [r7, #8]
 8004c70:	603b      	str	r3, [r7, #0]
 8004c72:	4613      	mov	r3, r2
 8004c74:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 8004c76:	79fb      	ldrb	r3, [r7, #7]
 8004c78:	2b0a      	cmp	r3, #10
 8004c7a:	d901      	bls.n	8004c80 <bme280_set_regs+0x1a>
    {
        len = 10;
 8004c7c:	230a      	movs	r3, #10
 8004c7e:	71fb      	strb	r3, [r7, #7]
    }
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8004c80:	6838      	ldr	r0, [r7, #0]
 8004c82:	f001 f997 	bl	8005fb4 <null_ptr_check>
 8004c86:	4603      	mov	r3, r0
 8004c88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8004c8c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d156      	bne.n	8004d42 <bme280_set_regs+0xdc>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d053      	beq.n	8004d42 <bme280_set_regs+0xdc>
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d050      	beq.n	8004d42 <bme280_set_regs+0xdc>
    {
        if (len != 0)
 8004ca0:	79fb      	ldrb	r3, [r7, #7]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d049      	beq.n	8004d3a <bme280_set_regs+0xd4>
        {
            temp_buff[0] = reg_data[0];
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	753b      	strb	r3, [r7, #20]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	789b      	ldrb	r3, [r3, #2]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d01a      	beq.n	8004cea <bme280_set_regs+0x84>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cba:	e011      	b.n	8004ce0 <bme280_set_regs+0x7a>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8004cbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	781a      	ldrb	r2, [r3, #0]
 8004cc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004cca:	68f9      	ldr	r1, [r7, #12]
 8004ccc:	440b      	add	r3, r1
 8004cce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004cd2:	b2d2      	uxtb	r2, r2
 8004cd4:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8004cd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004cda:	3301      	adds	r3, #1
 8004cdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ce0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004ce4:	79fb      	ldrb	r3, [r7, #7]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d3e8      	bcc.n	8004cbc <bme280_set_regs+0x56>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8004cea:	79fb      	ldrb	r3, [r7, #7]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d90d      	bls.n	8004d0c <bme280_set_regs+0xa6>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8004cf0:	79fb      	ldrb	r3, [r7, #7]
 8004cf2:	f107 0114 	add.w	r1, r7, #20
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f001 f816 	bl	8005d2a <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 8004cfe:	79fb      	ldrb	r3, [r7, #7]
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	3b01      	subs	r3, #1
 8004d08:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004d0a:	e001      	b.n	8004d10 <bme280_set_regs+0xaa>
            }
            else
            {
                temp_len = len;
 8004d0c:	79fb      	ldrb	r3, [r7, #7]
 8004d0e:	85bb      	strh	r3, [r7, #44]	; 0x2c
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	689c      	ldr	r4, [r3, #8]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	7858      	ldrb	r0, [r3, #1]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	7819      	ldrb	r1, [r3, #0]
 8004d1c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004d1e:	f107 0214 	add.w	r2, r7, #20
 8004d22:	47a0      	blx	r4
 8004d24:	4603      	mov	r3, r0
 8004d26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            /* Check for communication error */
            if (rslt != BME280_OK)
 8004d2a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00b      	beq.n	8004d4a <bme280_set_regs+0xe4>
            {
                rslt = BME280_E_COMM_FAIL;
 8004d32:	23fc      	movs	r3, #252	; 0xfc
 8004d34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 8004d38:	e007      	b.n	8004d4a <bme280_set_regs+0xe4>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 8004d3a:	23fd      	movs	r3, #253	; 0xfd
 8004d3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 8004d40:	e003      	b.n	8004d4a <bme280_set_regs+0xe4>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8004d42:	23ff      	movs	r3, #255	; 0xff
 8004d44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004d48:	e000      	b.n	8004d4c <bme280_set_regs+0xe6>
        if (len != 0)
 8004d4a:	bf00      	nop
    }

    return rslt;
 8004d4c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3734      	adds	r7, #52	; 0x34
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd90      	pop	{r4, r7, pc}

08004d58 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	4603      	mov	r3, r0
 8004d60:	6039      	str	r1, [r7, #0]
 8004d62:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t sensor_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8004d64:	6838      	ldr	r0, [r7, #0]
 8004d66:	f001 f925 	bl	8005fb4 <null_ptr_check>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8004d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d13f      	bne.n	8004df6 <bme280_set_sensor_settings+0x9e>
    {
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8004d76:	f107 030e 	add.w	r3, r7, #14
 8004d7a:	6839      	ldr	r1, [r7, #0]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 f874 	bl	8004e6a <bme280_get_sensor_mode>
 8004d82:	4603      	mov	r3, r0
 8004d84:	73fb      	strb	r3, [r7, #15]
        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8004d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d107      	bne.n	8004d9e <bme280_set_sensor_settings+0x46>
 8004d8e:	7bbb      	ldrb	r3, [r7, #14]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d004      	beq.n	8004d9e <bme280_set_sensor_settings+0x46>
        {
            rslt = put_device_to_sleep(dev);
 8004d94:	6838      	ldr	r0, [r7, #0]
 8004d96:	f000 fb74 	bl	8005482 <put_device_to_sleep>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BME280_OK)
 8004d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d127      	bne.n	8004df6 <bme280_set_sensor_settings+0x9e>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8004da6:	79fb      	ldrb	r3, [r7, #7]
 8004da8:	4619      	mov	r1, r3
 8004daa:	2007      	movs	r0, #7
 8004dac:	f001 f8e6 	bl	8005f7c <are_settings_changed>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d009      	beq.n	8004dca <bme280_set_sensor_settings+0x72>
            {
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004dbc:	79fb      	ldrb	r3, [r7, #7]
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 f9b0 	bl	8005126 <set_osr_settings>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	73fb      	strb	r3, [r7, #15]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8004dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d111      	bne.n	8004df6 <bme280_set_sensor_settings+0x9e>
 8004dd2:	79fb      	ldrb	r3, [r7, #7]
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	2018      	movs	r0, #24
 8004dd8:	f001 f8d0 	bl	8005f7c <are_settings_changed>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d009      	beq.n	8004df6 <bme280_set_sensor_settings+0x9e>
            {
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004de8:	79fb      	ldrb	r3, [r7, #7]
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 fa37 	bl	8005260 <set_filter_standby_settings>
 8004df2:	4603      	mov	r3, r0
 8004df4:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8004df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b084      	sub	sp, #16
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	4603      	mov	r3, r0
 8004e0a:	6039      	str	r1, [r7, #0]
 8004e0c:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8004e0e:	6838      	ldr	r0, [r7, #0]
 8004e10:	f001 f8d0 	bl	8005fb4 <null_ptr_check>
 8004e14:	4603      	mov	r3, r0
 8004e16:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME280_OK)
 8004e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d11e      	bne.n	8004e5e <bme280_set_sensor_mode+0x5c>
    {
        rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8004e20:	f107 030e 	add.w	r3, r7, #14
 8004e24:	6839      	ldr	r1, [r7, #0]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 f81f 	bl	8004e6a <bme280_get_sensor_mode>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode
         */
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8004e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d107      	bne.n	8004e48 <bme280_set_sensor_mode+0x46>
 8004e38:	7bbb      	ldrb	r3, [r7, #14]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d004      	beq.n	8004e48 <bme280_set_sensor_mode+0x46>
        {
            rslt = put_device_to_sleep(dev);
 8004e3e:	6838      	ldr	r0, [r7, #0]
 8004e40:	f000 fb1f 	bl	8005482 <put_device_to_sleep>
 8004e44:	4603      	mov	r3, r0
 8004e46:	73fb      	strb	r3, [r7, #15]
        }

        /* Set the power mode */
        if (rslt == BME280_OK)
 8004e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d106      	bne.n	8004e5e <bme280_set_sensor_mode+0x5c>
        {
            rslt = write_power_mode(sensor_mode, dev);
 8004e50:	79fb      	ldrb	r3, [r7, #7]
 8004e52:	6839      	ldr	r1, [r7, #0]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 fae1 	bl	800541c <write_power_mode>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b084      	sub	sp, #16
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8004e74:	6838      	ldr	r0, [r7, #0]
 8004e76:	f001 f89d 	bl	8005fb4 <null_ptr_check>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME280_OK)
 8004e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10e      	bne.n	8004ea4 <bme280_get_sensor_mode+0x3a>
    {
        /* Read the power mode register */
        rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	6879      	ldr	r1, [r7, #4]
 8004e8c:	20f4      	movs	r0, #244	; 0xf4
 8004e8e:	f7ff feba 	bl	8004c06 <bme280_get_regs>
 8004e92:	4603      	mov	r3, r0
 8004e94:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	f003 0303 	and.w	r3, r3, #3
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8004ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_RESET_ADDR;
 8004eb8:	23e0      	movs	r3, #224	; 0xe0
 8004eba:	737b      	strb	r3, [r7, #13]
    uint8_t status_reg = 0;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	733b      	strb	r3, [r7, #12]
    uint8_t try_run = 5;
 8004ec0:	2305      	movs	r3, #5
 8004ec2:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 8004ec4:	23b6      	movs	r3, #182	; 0xb6
 8004ec6:	72fb      	strb	r3, [r7, #11]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f001 f873 	bl	8005fb4 <null_ptr_check>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8004ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d12f      	bne.n	8004f3a <bme280_soft_reset+0x8a>
    {
        /* Write the soft reset command in the sensor */
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8004eda:	f107 010b 	add.w	r1, r7, #11
 8004ede:	f107 000d 	add.w	r0, r7, #13
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f7ff febe 	bl	8004c66 <bme280_set_regs>
 8004eea:	4603      	mov	r3, r0
 8004eec:	73fb      	strb	r3, [r7, #15]

        if (rslt == BME280_OK)
 8004eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d121      	bne.n	8004f3a <bme280_soft_reset+0x8a>
        {
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                dev->delay_ms(2);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	2002      	movs	r0, #2
 8004efc:	4798      	blx	r3
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 8004efe:	f107 010c 	add.w	r1, r7, #12
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	20f3      	movs	r0, #243	; 0xf3
 8004f08:	f7ff fe7d 	bl	8004c06 <bme280_get_regs>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	73fb      	strb	r3, [r7, #15]
            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 8004f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d109      	bne.n	8004f2c <bme280_soft_reset+0x7c>
 8004f18:	7bbb      	ldrb	r3, [r7, #14]
 8004f1a:	1e5a      	subs	r2, r3, #1
 8004f1c:	73ba      	strb	r2, [r7, #14]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d004      	beq.n	8004f2c <bme280_soft_reset+0x7c>
 8004f22:	7b3b      	ldrb	r3, [r7, #12]
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1e4      	bne.n	8004ef6 <bme280_soft_reset+0x46>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 8004f2c:	7b3b      	ldrb	r3, [r7, #12]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <bme280_soft_reset+0x8a>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 8004f36:	23fa      	movs	r3, #250	; 0xfa
 8004f38:	73fb      	strb	r3, [r7, #15]
            }

        }
    }

    return rslt;
 8004f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b08a      	sub	sp, #40	; 0x28
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	60b9      	str	r1, [r7, #8]
 8004f50:	607a      	str	r2, [r7, #4]
 8004f52:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 8004f54:	2300      	movs	r3, #0
 8004f56:	61fb      	str	r3, [r7, #28]
 8004f58:	2300      	movs	r3, #0
 8004f5a:	623b      	str	r3, [r7, #32]
    struct bme280_uncomp_data uncomp_data = { 0 };
 8004f5c:	f107 0310 	add.w	r3, r7, #16
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	605a      	str	r2, [r3, #4]
 8004f66:	609a      	str	r2, [r3, #8]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f001 f823 	bl	8005fb4 <null_ptr_check>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if ((rslt == BME280_OK) && (comp_data != NULL))
 8004f74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d124      	bne.n	8004fc6 <bme280_get_sensor_data+0x80>
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d021      	beq.n	8004fc6 <bme280_get_sensor_data+0x80>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8004f82:	f107 011c 	add.w	r1, r7, #28
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2208      	movs	r2, #8
 8004f8a:	20f7      	movs	r0, #247	; 0xf7
 8004f8c:	f7ff fe3b 	bl	8004c06 <bme280_get_regs>
 8004f90:	4603      	mov	r3, r0
 8004f92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 8004f96:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d116      	bne.n	8004fcc <bme280_get_sensor_data+0x86>
        {
            /* Parse the read data from the sensor */
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 8004f9e:	f107 0210 	add.w	r2, r7, #16
 8004fa2:	f107 031c 	add.w	r3, r7, #28
 8004fa6:	4611      	mov	r1, r2
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 f815 	bl	8004fd8 <bme280_parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	3310      	adds	r3, #16
 8004fb2:	f107 0110 	add.w	r1, r7, #16
 8004fb6:	7bf8      	ldrb	r0, [r7, #15]
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	f000 f853 	bl	8005064 <bme280_compensate_data>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 8004fc4:	e002      	b.n	8004fcc <bme280_get_sensor_data+0x86>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8004fc6:	23ff      	movs	r3, #255	; 0xff
 8004fc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 8004fcc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3728      	adds	r7, #40	; 0x28
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b087      	sub	sp, #28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	031b      	lsls	r3, r3, #12
 8004fe8:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	3301      	adds	r3, #1
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	011b      	lsls	r3, r3, #4
 8004ff2:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	3302      	adds	r3, #2
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	091b      	lsrs	r3, r3, #4
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	431a      	orrs	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	431a      	orrs	r2, r3
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << 12;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	3303      	adds	r3, #3
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	031b      	lsls	r3, r3, #12
 8005016:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 4;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	3304      	adds	r3, #4
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	011b      	lsls	r3, r3, #4
 8005020:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	3305      	adds	r3, #5
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	091b      	lsrs	r3, r3, #4
 800502a:	b2db      	uxtb	r3, r3
 800502c:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	431a      	orrs	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	431a      	orrs	r2, r3
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for humidity data */
    data_msb = (uint32_t)reg_data[6] << 8;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3306      	adds	r3, #6
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	021b      	lsls	r3, r3, #8
 8005044:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[7];
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	3307      	adds	r3, #7
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	613b      	str	r3, [r7, #16]
    uncomp_data->humidity = data_msb | data_lsb;
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	431a      	orrs	r2, r3
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	609a      	str	r2, [r3, #8]
}
 8005058:	bf00      	nop
 800505a:	371c      	adds	r7, #28
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	60b9      	str	r1, [r7, #8]
 800506c:	607a      	str	r2, [r7, #4]
 800506e:	603b      	str	r3, [r7, #0]
 8005070:	4603      	mov	r3, r0
 8005072:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_OK;
 8005074:	2300      	movs	r3, #0
 8005076:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d04b      	beq.n	8005116 <bme280_compensate_data+0xb2>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d048      	beq.n	8005116 <bme280_compensate_data+0xb2>
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d045      	beq.n	8005116 <bme280_compensate_data+0xb2>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 800508a:	6879      	ldr	r1, [r7, #4]
 800508c:	f04f 0200 	mov.w	r2, #0
 8005090:	f04f 0300 	mov.w	r3, #0
 8005094:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 8005098:	6879      	ldr	r1, [r7, #4]
 800509a:	f04f 0200 	mov.w	r2, #0
 800509e:	f04f 0300 	mov.w	r3, #0
 80050a2:	e9c1 2300 	strd	r2, r3, [r1]
        comp_data->humidity = 0;
 80050a6:	6879      	ldr	r1, [r7, #4]
 80050a8:	f04f 0200 	mov.w	r2, #0
 80050ac:	f04f 0300 	mov.w	r3, #0
 80050b0:	e9c1 2304 	strd	r2, r3, [r1, #16]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 80050b4:	7bfb      	ldrb	r3, [r7, #15]
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00a      	beq.n	80050d4 <bme280_compensate_data+0x70>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 80050be:	6839      	ldr	r1, [r7, #0]
 80050c0:	68b8      	ldr	r0, [r7, #8]
 80050c2:	f000 fa2b 	bl	800551c <compensate_temperature>
 80050c6:	eeb0 7a40 	vmov.f32	s14, s0
 80050ca:	eef0 7a60 	vmov.f32	s15, s1
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	ed83 7b02 	vstr	d7, [r3, #8]
        }
        if (sensor_comp & BME280_PRESS)
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00a      	beq.n	80050f4 <bme280_compensate_data+0x90>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 80050de:	6839      	ldr	r1, [r7, #0]
 80050e0:	68b8      	ldr	r0, [r7, #8]
 80050e2:	f000 faed 	bl	80056c0 <compensate_pressure>
 80050e6:	eeb0 7a40 	vmov.f32	s14, s0
 80050ea:	eef0 7a60 	vmov.f32	s15, s1
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	ed83 7b00 	vstr	d7, [r3]
        }
        if (sensor_comp & BME280_HUM)
 80050f4:	7bfb      	ldrb	r3, [r7, #15]
 80050f6:	f003 0304 	and.w	r3, r3, #4
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00d      	beq.n	800511a <bme280_compensate_data+0xb6>
        {
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 80050fe:	6839      	ldr	r1, [r7, #0]
 8005100:	68b8      	ldr	r0, [r7, #8]
 8005102:	f000 fcad 	bl	8005a60 <compensate_humidity>
 8005106:	eeb0 7a40 	vmov.f32	s14, s0
 800510a:	eef0 7a60 	vmov.f32	s15, s1
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	ed83 7b04 	vstr	d7, [r3, #16]
        if (sensor_comp & BME280_HUM)
 8005114:	e001      	b.n	800511a <bme280_compensate_data+0xb6>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8005116:	23ff      	movs	r3, #255	; 0xff
 8005118:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800511a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800511e:	4618      	mov	r0, r3
 8005120:	3718      	adds	r7, #24
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <set_osr_settings>:
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings,
                               const struct bme280_settings *settings,
                               const struct bme280_dev *dev)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b086      	sub	sp, #24
 800512a:	af00      	add	r7, sp, #0
 800512c:	4603      	mov	r3, r0
 800512e:	60b9      	str	r1, [r7, #8]
 8005130:	607a      	str	r2, [r7, #4]
 8005132:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8005134:	2301      	movs	r3, #1
 8005136:	75fb      	strb	r3, [r7, #23]

    if (desired_settings & BME280_OSR_HUM_SEL)
 8005138:	7bfb      	ldrb	r3, [r7, #15]
 800513a:	f003 0304 	and.w	r3, r3, #4
 800513e:	2b00      	cmp	r3, #0
 8005140:	d005      	beq.n	800514e <set_osr_settings+0x28>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 8005142:	6879      	ldr	r1, [r7, #4]
 8005144:	68b8      	ldr	r0, [r7, #8]
 8005146:	f000 f815 	bl	8005174 <set_osr_humidity_settings>
 800514a:	4603      	mov	r3, r0
 800514c:	75fb      	strb	r3, [r7, #23]
    }
    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 800514e:	7bfb      	ldrb	r3, [r7, #15]
 8005150:	f003 0303 	and.w	r3, r3, #3
 8005154:	2b00      	cmp	r3, #0
 8005156:	d007      	beq.n	8005168 <set_osr_settings+0x42>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8005158:	7bfb      	ldrb	r3, [r7, #15]
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	68b9      	ldr	r1, [r7, #8]
 800515e:	4618      	mov	r0, r3
 8005160:	f000 f842 	bl	80051e8 <set_osr_press_temp_settings>
 8005164:	4603      	mov	r3, r0
 8005166:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8005168:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800516c:	4618      	mov	r0, r3
 800516e:	3718      	adds	r7, #24
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 800517e:	23f2      	movs	r3, #242	; 0xf2
 8005180:	733b      	strb	r3, [r7, #12]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	789b      	ldrb	r3, [r3, #2]
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	b2db      	uxtb	r3, r3
 800518c:	73bb      	strb	r3, [r7, #14]

    /* Write the humidity control value in the register */
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 800518e:	f107 010e 	add.w	r1, r7, #14
 8005192:	f107 000c 	add.w	r0, r7, #12
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2201      	movs	r2, #1
 800519a:	f7ff fd64 	bl	8004c66 <bme280_set_regs>
 800519e:	4603      	mov	r3, r0
 80051a0:	73fb      	strb	r3, [r7, #15]

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 80051a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d118      	bne.n	80051dc <set_osr_humidity_settings+0x68>
    {
        reg_addr = BME280_CTRL_MEAS_ADDR;
 80051aa:	23f4      	movs	r3, #244	; 0xf4
 80051ac:	733b      	strb	r3, [r7, #12]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 80051ae:	7b38      	ldrb	r0, [r7, #12]
 80051b0:	f107 010d 	add.w	r1, r7, #13
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f7ff fd25 	bl	8004c06 <bme280_get_regs>
 80051bc:	4603      	mov	r3, r0
 80051be:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME280_OK)
 80051c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d109      	bne.n	80051dc <set_osr_humidity_settings+0x68>
        {
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 80051c8:	f107 010d 	add.w	r1, r7, #13
 80051cc:	f107 000c 	add.w	r0, r7, #12
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f7ff fd47 	bl	8004c66 <bme280_set_regs>
 80051d8:	4603      	mov	r3, r0
 80051da:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80051dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          const struct bme280_dev *dev)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	4603      	mov	r3, r0
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
 80051f4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 80051f6:	23f4      	movs	r3, #244	; 0xf4
 80051f8:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80051fa:	7db8      	ldrb	r0, [r7, #22]
 80051fc:	f107 0115 	add.w	r1, r7, #21
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f7ff fcff 	bl	8004c06 <bme280_get_regs>
 8005208:	4603      	mov	r3, r0
 800520a:	75fb      	strb	r3, [r7, #23]
    if (rslt == BME280_OK)
 800520c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d11f      	bne.n	8005254 <set_osr_press_temp_settings+0x6c>
    {
        if (desired_settings & BME280_OSR_PRESS_SEL)
 8005214:	7bfb      	ldrb	r3, [r7, #15]
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d005      	beq.n	800522a <set_osr_press_temp_settings+0x42>
        {
            fill_osr_press_settings(&reg_data, settings);
 800521e:	f107 0315 	add.w	r3, r7, #21
 8005222:	68b9      	ldr	r1, [r7, #8]
 8005224:	4618      	mov	r0, r3
 8005226:	f000 f88e 	bl	8005346 <fill_osr_press_settings>
        }
        if (desired_settings & BME280_OSR_TEMP_SEL)
 800522a:	7bfb      	ldrb	r3, [r7, #15]
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b00      	cmp	r3, #0
 8005232:	d005      	beq.n	8005240 <set_osr_press_temp_settings+0x58>
        {
            fill_osr_temp_settings(&reg_data, settings);
 8005234:	f107 0315 	add.w	r3, r7, #21
 8005238:	68b9      	ldr	r1, [r7, #8]
 800523a:	4618      	mov	r0, r3
 800523c:	f000 f8a0 	bl	8005380 <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8005240:	f107 0115 	add.w	r1, r7, #21
 8005244:	f107 0016 	add.w	r0, r7, #22
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f7ff fd0b 	bl	8004c66 <bme280_set_regs>
 8005250:	4603      	mov	r3, r0
 8005252:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8005254:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005258:	4618      	mov	r0, r3
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          const struct bme280_dev *dev)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
 8005266:	4603      	mov	r3, r0
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
 800526c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 800526e:	23f5      	movs	r3, #245	; 0xf5
 8005270:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8005272:	7db8      	ldrb	r0, [r7, #22]
 8005274:	f107 0115 	add.w	r1, r7, #21
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f7ff fcc3 	bl	8004c06 <bme280_get_regs>
 8005280:	4603      	mov	r3, r0
 8005282:	75fb      	strb	r3, [r7, #23]
    if (rslt == BME280_OK)
 8005284:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d11f      	bne.n	80052cc <set_filter_standby_settings+0x6c>
    {
        if (desired_settings & BME280_FILTER_SEL)
 800528c:	7bfb      	ldrb	r3, [r7, #15]
 800528e:	f003 0308 	and.w	r3, r3, #8
 8005292:	2b00      	cmp	r3, #0
 8005294:	d005      	beq.n	80052a2 <set_filter_standby_settings+0x42>
        {
            fill_filter_settings(&reg_data, settings);
 8005296:	f107 0315 	add.w	r3, r7, #21
 800529a:	68b9      	ldr	r1, [r7, #8]
 800529c:	4618      	mov	r0, r3
 800529e:	f000 f81b 	bl	80052d8 <fill_filter_settings>
        }
        if (desired_settings & BME280_STANDBY_SEL)
 80052a2:	7bfb      	ldrb	r3, [r7, #15]
 80052a4:	f003 0310 	and.w	r3, r3, #16
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d005      	beq.n	80052b8 <set_filter_standby_settings+0x58>
        {
            fill_standby_settings(&reg_data, settings);
 80052ac:	f107 0315 	add.w	r3, r7, #21
 80052b0:	68b9      	ldr	r1, [r7, #8]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 f82d 	bl	8005312 <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80052b8:	f107 0115 	add.w	r1, r7, #21
 80052bc:	f107 0016 	add.w	r0, r7, #22
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f7ff fccf 	bl	8004c66 <bme280_set_regs>
 80052c8:	4603      	mov	r3, r0
 80052ca:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80052cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3718      	adds	r7, #24
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	b25b      	sxtb	r3, r3
 80052e8:	f023 031c 	bic.w	r3, r3, #28
 80052ec:	b25a      	sxtb	r2, r3
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	78db      	ldrb	r3, [r3, #3]
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	b25b      	sxtb	r3, r3
 80052f6:	f003 031c 	and.w	r3, r3, #28
 80052fa:	b25b      	sxtb	r3, r3
 80052fc:	4313      	orrs	r3, r2
 80052fe:	b25b      	sxtb	r3, r3
 8005300:	b2da      	uxtb	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	701a      	strb	r2, [r3, #0]
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8005312:	b480      	push	{r7}
 8005314:	b083      	sub	sp, #12
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
 800531a:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	b25b      	sxtb	r3, r3
 8005322:	f003 031f 	and.w	r3, r3, #31
 8005326:	b25a      	sxtb	r2, r3
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	791b      	ldrb	r3, [r3, #4]
 800532c:	015b      	lsls	r3, r3, #5
 800532e:	b25b      	sxtb	r3, r3
 8005330:	4313      	orrs	r3, r2
 8005332:	b25b      	sxtb	r3, r3
 8005334:	b2da      	uxtb	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	701a      	strb	r2, [r3, #0]
}
 800533a:	bf00      	nop
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8005346:	b480      	push	{r7}
 8005348:	b083      	sub	sp, #12
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
 800534e:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	b25b      	sxtb	r3, r3
 8005356:	f023 031c 	bic.w	r3, r3, #28
 800535a:	b25a      	sxtb	r2, r3
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	b25b      	sxtb	r3, r3
 8005364:	f003 031c 	and.w	r3, r3, #28
 8005368:	b25b      	sxtb	r3, r3
 800536a:	4313      	orrs	r3, r2
 800536c:	b25b      	sxtb	r3, r3
 800536e:	b2da      	uxtb	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	701a      	strb	r2, [r3, #0]
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	b25b      	sxtb	r3, r3
 8005390:	f003 031f 	and.w	r3, r3, #31
 8005394:	b25a      	sxtb	r2, r3
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	785b      	ldrb	r3, [r3, #1]
 800539a:	015b      	lsls	r3, r3, #5
 800539c:	b25b      	sxtb	r3, r3
 800539e:	4313      	orrs	r3, r2
 80053a0:	b25b      	sxtb	r3, r3
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	701a      	strb	r2, [r3, #0]
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	f003 0307 	and.w	r3, r3, #7
 80053c6:	b2da      	uxtb	r2, r3
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	3302      	adds	r3, #2
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	109b      	asrs	r3, r3, #2
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3302      	adds	r3, #2
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	095b      	lsrs	r3, r3, #5
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	3303      	adds	r3, #3
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	109b      	asrs	r3, r3, #2
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	f003 0307 	and.w	r3, r3, #7
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	3303      	adds	r3, #3
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	095b      	lsrs	r3, r3, #5
 800540a:	b2da      	uxtb	r2, r3
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	711a      	strb	r2, [r3, #4]
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	4603      	mov	r3, r0
 8005424:	6039      	str	r1, [r7, #0]
 8005426:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8005428:	23f4      	movs	r3, #244	; 0xf4
 800542a:	73bb      	strb	r3, [r7, #14]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 800542c:	7bb8      	ldrb	r0, [r7, #14]
 800542e:	f107 010d 	add.w	r1, r7, #13
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2201      	movs	r2, #1
 8005436:	f7ff fbe6 	bl	8004c06 <bme280_get_regs>
 800543a:	4603      	mov	r3, r0
 800543c:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BME280_OK)
 800543e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d117      	bne.n	8005476 <write_power_mode+0x5a>
    {
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8005446:	7b7b      	ldrb	r3, [r7, #13]
 8005448:	b25b      	sxtb	r3, r3
 800544a:	f023 0303 	bic.w	r3, r3, #3
 800544e:	b25a      	sxtb	r2, r3
 8005450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005454:	f003 0303 	and.w	r3, r3, #3
 8005458:	b25b      	sxtb	r3, r3
 800545a:	4313      	orrs	r3, r2
 800545c:	b25b      	sxtb	r3, r3
 800545e:	b2db      	uxtb	r3, r3
 8005460:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8005462:	f107 010d 	add.w	r1, r7, #13
 8005466:	f107 000e 	add.w	r0, r7, #14
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2201      	movs	r2, #1
 800546e:	f7ff fbfa 	bl	8004c66 <bme280_set_regs>
 8005472:	4603      	mov	r3, r0
 8005474:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005476:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b086      	sub	sp, #24
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];
    struct bme280_settings settings;

    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 800548a:	f107 0110 	add.w	r1, r7, #16
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2204      	movs	r2, #4
 8005492:	20f2      	movs	r0, #242	; 0xf2
 8005494:	f7ff fbb7 	bl	8004c06 <bme280_get_regs>
 8005498:	4603      	mov	r3, r0
 800549a:	75fb      	strb	r3, [r7, #23]
    if (rslt == BME280_OK)
 800549c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d118      	bne.n	80054d6 <put_device_to_sleep+0x54>
    {
        parse_device_settings(reg_data, &settings);
 80054a4:	f107 0208 	add.w	r2, r7, #8
 80054a8:	f107 0310 	add.w	r3, r7, #16
 80054ac:	4611      	mov	r1, r2
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7ff ff80 	bl	80053b4 <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f7ff fcfb 	bl	8004eb0 <bme280_soft_reset>
 80054ba:	4603      	mov	r3, r0
 80054bc:	75fb      	strb	r3, [r7, #23]
        if (rslt == BME280_OK)
 80054be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d107      	bne.n	80054d6 <put_device_to_sleep+0x54>
        {
            rslt = reload_device_settings(&settings, dev);
 80054c6:	f107 0308 	add.w	r3, r7, #8
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 f808 	bl	80054e2 <reload_device_settings>
 80054d2:	4603      	mov	r3, r0
 80054d4:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 80054d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3718      	adds	r7, #24
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b084      	sub	sp, #16
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
 80054ea:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80054ec:	683a      	ldr	r2, [r7, #0]
 80054ee:	6879      	ldr	r1, [r7, #4]
 80054f0:	201f      	movs	r0, #31
 80054f2:	f7ff fe18 	bl	8005126 <set_osr_settings>
 80054f6:	4603      	mov	r3, r0
 80054f8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME280_OK)
 80054fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d106      	bne.n	8005510 <reload_device_settings+0x2e>
    {
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	6879      	ldr	r1, [r7, #4]
 8005506:	201f      	movs	r0, #31
 8005508:	f7ff feaa 	bl	8005260 <set_filter_standby_settings>
 800550c:	4603      	mov	r3, r0
 800550e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005510:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005514:	4618      	mov	r0, r3
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <compensate_temperature>:
/*!
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data, struct bme280_calib_data *calib_data)
{
 800551c:	b5b0      	push	{r4, r5, r7, lr}
 800551e:	b08c      	sub	sp, #48	; 0x30
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double temperature;
    double temperature_min = -40;
 8005526:	f04f 0200 	mov.w	r2, #0
 800552a:	4b5f      	ldr	r3, [pc, #380]	; (80056a8 <compensate_temperature+0x18c>)
 800552c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double temperature_max = 85;
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	4b5d      	ldr	r3, [pc, #372]	; (80056ac <compensate_temperature+0x190>)
 8005536:	e9c7 2306 	strd	r2, r3, [r7, #24]

    var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_t1) / 1024.0;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	4618      	mov	r0, r3
 8005540:	f7fa fff8 	bl	8000534 <__aeabi_ui2d>
 8005544:	f04f 0200 	mov.w	r2, #0
 8005548:	4b59      	ldr	r3, [pc, #356]	; (80056b0 <compensate_temperature+0x194>)
 800554a:	f7fb f997 	bl	800087c <__aeabi_ddiv>
 800554e:	4602      	mov	r2, r0
 8005550:	460b      	mov	r3, r1
 8005552:	4614      	mov	r4, r2
 8005554:	461d      	mov	r5, r3
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	881b      	ldrh	r3, [r3, #0]
 800555a:	4618      	mov	r0, r3
 800555c:	f7fa ffea 	bl	8000534 <__aeabi_ui2d>
 8005560:	f04f 0200 	mov.w	r2, #0
 8005564:	4b53      	ldr	r3, [pc, #332]	; (80056b4 <compensate_temperature+0x198>)
 8005566:	f7fb f989 	bl	800087c <__aeabi_ddiv>
 800556a:	4602      	mov	r2, r0
 800556c:	460b      	mov	r3, r1
 800556e:	4620      	mov	r0, r4
 8005570:	4629      	mov	r1, r5
 8005572:	f7fa fea1 	bl	80002b8 <__aeabi_dsub>
 8005576:	4602      	mov	r2, r0
 8005578:	460b      	mov	r3, r1
 800557a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = var1 * ((double)calib_data->dig_t2);
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005584:	4618      	mov	r0, r3
 8005586:	f7fa ffe5 	bl	8000554 <__aeabi_i2d>
 800558a:	4602      	mov	r2, r0
 800558c:	460b      	mov	r3, r1
 800558e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005592:	f7fb f849 	bl	8000628 <__aeabi_dmul>
 8005596:	4602      	mov	r2, r0
 8005598:	460b      	mov	r3, r1
 800559a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_t1) / 8192.0);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fa ffc6 	bl	8000534 <__aeabi_ui2d>
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80055b0:	f7fb f964 	bl	800087c <__aeabi_ddiv>
 80055b4:	4602      	mov	r2, r0
 80055b6:	460b      	mov	r3, r1
 80055b8:	4614      	mov	r4, r2
 80055ba:	461d      	mov	r5, r3
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	881b      	ldrh	r3, [r3, #0]
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7fa ffb7 	bl	8000534 <__aeabi_ui2d>
 80055c6:	f04f 0200 	mov.w	r2, #0
 80055ca:	4b3b      	ldr	r3, [pc, #236]	; (80056b8 <compensate_temperature+0x19c>)
 80055cc:	f7fb f956 	bl	800087c <__aeabi_ddiv>
 80055d0:	4602      	mov	r2, r0
 80055d2:	460b      	mov	r3, r1
 80055d4:	4620      	mov	r0, r4
 80055d6:	4629      	mov	r1, r5
 80055d8:	f7fa fe6e 	bl	80002b8 <__aeabi_dsub>
 80055dc:	4602      	mov	r2, r0
 80055de:	460b      	mov	r3, r1
 80055e0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var2 = (var2 * var2) * ((double)calib_data->dig_t3);
 80055e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055ec:	f7fb f81c 	bl	8000628 <__aeabi_dmul>
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	4614      	mov	r4, r2
 80055f6:	461d      	mov	r5, r3
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80055fe:	4618      	mov	r0, r3
 8005600:	f7fa ffa8 	bl	8000554 <__aeabi_i2d>
 8005604:	4602      	mov	r2, r0
 8005606:	460b      	mov	r3, r1
 8005608:	4620      	mov	r0, r4
 800560a:	4629      	mov	r1, r5
 800560c:	f7fb f80c 	bl	8000628 <__aeabi_dmul>
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
 8005614:	e9c7 2302 	strd	r2, r3, [r7, #8]
    calib_data->t_fine = (int32_t)(var1 + var2);
 8005618:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800561c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005620:	f7fa fe4c 	bl	80002bc <__adddf3>
 8005624:	4602      	mov	r2, r0
 8005626:	460b      	mov	r3, r1
 8005628:	4610      	mov	r0, r2
 800562a:	4619      	mov	r1, r3
 800562c:	f7fb faac 	bl	8000b88 <__aeabi_d2iz>
 8005630:	4602      	mov	r2, r0
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	625a      	str	r2, [r3, #36]	; 0x24
    temperature = (var1 + var2) / 5120.0;
 8005636:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800563a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800563e:	f7fa fe3d 	bl	80002bc <__adddf3>
 8005642:	4602      	mov	r2, r0
 8005644:	460b      	mov	r3, r1
 8005646:	4610      	mov	r0, r2
 8005648:	4619      	mov	r1, r3
 800564a:	f04f 0200 	mov.w	r2, #0
 800564e:	4b1b      	ldr	r3, [pc, #108]	; (80056bc <compensate_temperature+0x1a0>)
 8005650:	f7fb f914 	bl	800087c <__aeabi_ddiv>
 8005654:	4602      	mov	r2, r0
 8005656:	460b      	mov	r3, r1
 8005658:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    if (temperature < temperature_min)
 800565c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005660:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005664:	f7fb fa52 	bl	8000b0c <__aeabi_dcmplt>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d004      	beq.n	8005678 <compensate_temperature+0x15c>
    {
        temperature = temperature_min;
 800566e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005672:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8005676:	e00c      	b.n	8005692 <compensate_temperature+0x176>
    }
    else if (temperature > temperature_max)
 8005678:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800567c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005680:	f7fb fa62 	bl	8000b48 <__aeabi_dcmpgt>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <compensate_temperature+0x176>
    {
        temperature = temperature_max;
 800568a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800568e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    }

    return temperature;
 8005692:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005696:	ec43 2b17 	vmov	d7, r2, r3
}
 800569a:	eeb0 0a47 	vmov.f32	s0, s14
 800569e:	eef0 0a67 	vmov.f32	s1, s15
 80056a2:	3730      	adds	r7, #48	; 0x30
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bdb0      	pop	{r4, r5, r7, pc}
 80056a8:	c0440000 	.word	0xc0440000
 80056ac:	40554000 	.word	0x40554000
 80056b0:	40d00000 	.word	0x40d00000
 80056b4:	40900000 	.word	0x40900000
 80056b8:	40c00000 	.word	0x40c00000
 80056bc:	40b40000 	.word	0x40b40000

080056c0 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 80056c0:	b5b0      	push	{r4, r5, r7, lr}
 80056c2:	b08e      	sub	sp, #56	; 0x38
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double var3;
    double pressure;
    double pressure_min = 30000.0;
 80056ca:	a3d9      	add	r3, pc, #868	; (adr r3, 8005a30 <compensate_pressure+0x370>)
 80056cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double pressure_max = 110000.0;
 80056d4:	a3d8      	add	r3, pc, #864	; (adr r3, 8005a38 <compensate_pressure+0x378>)
 80056d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056da:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7fa ff36 	bl	8000554 <__aeabi_i2d>
 80056e8:	f04f 0200 	mov.w	r2, #0
 80056ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056f0:	f7fb f8c4 	bl	800087c <__aeabi_ddiv>
 80056f4:	4602      	mov	r2, r0
 80056f6:	460b      	mov	r3, r1
 80056f8:	4610      	mov	r0, r2
 80056fa:	4619      	mov	r1, r3
 80056fc:	f04f 0200 	mov.w	r2, #0
 8005700:	4bc1      	ldr	r3, [pc, #772]	; (8005a08 <compensate_pressure+0x348>)
 8005702:	f7fa fdd9 	bl	80002b8 <__aeabi_dsub>
 8005706:	4602      	mov	r2, r0
 8005708:	460b      	mov	r3, r1
 800570a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double)calib_data->dig_p6) / 32768.0;
 800570e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005712:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005716:	f7fa ff87 	bl	8000628 <__aeabi_dmul>
 800571a:	4602      	mov	r2, r0
 800571c:	460b      	mov	r3, r1
 800571e:	4614      	mov	r4, r2
 8005720:	461d      	mov	r5, r3
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005728:	4618      	mov	r0, r3
 800572a:	f7fa ff13 	bl	8000554 <__aeabi_i2d>
 800572e:	4602      	mov	r2, r0
 8005730:	460b      	mov	r3, r1
 8005732:	4620      	mov	r0, r4
 8005734:	4629      	mov	r1, r5
 8005736:	f7fa ff77 	bl	8000628 <__aeabi_dmul>
 800573a:	4602      	mov	r2, r0
 800573c:	460b      	mov	r3, r1
 800573e:	4610      	mov	r0, r2
 8005740:	4619      	mov	r1, r3
 8005742:	f04f 0200 	mov.w	r2, #0
 8005746:	4bb1      	ldr	r3, [pc, #708]	; (8005a0c <compensate_pressure+0x34c>)
 8005748:	f7fb f898 	bl	800087c <__aeabi_ddiv>
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double)calib_data->dig_p5) * 2.0;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800575a:	4618      	mov	r0, r3
 800575c:	f7fa fefa 	bl	8000554 <__aeabi_i2d>
 8005760:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005764:	f7fa ff60 	bl	8000628 <__aeabi_dmul>
 8005768:	4602      	mov	r2, r0
 800576a:	460b      	mov	r3, r1
 800576c:	4610      	mov	r0, r2
 800576e:	4619      	mov	r1, r3
 8005770:	4602      	mov	r2, r0
 8005772:	460b      	mov	r3, r1
 8005774:	f7fa fda2 	bl	80002bc <__adddf3>
 8005778:	4602      	mov	r2, r0
 800577a:	460b      	mov	r3, r1
 800577c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005780:	f7fa fd9c 	bl	80002bc <__adddf3>
 8005784:	4602      	mov	r2, r0
 8005786:	460b      	mov	r3, r1
 8005788:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double)calib_data->dig_p4) * 65536.0);
 800578c:	f04f 0200 	mov.w	r2, #0
 8005790:	4b9f      	ldr	r3, [pc, #636]	; (8005a10 <compensate_pressure+0x350>)
 8005792:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005796:	f7fb f871 	bl	800087c <__aeabi_ddiv>
 800579a:	4602      	mov	r2, r0
 800579c:	460b      	mov	r3, r1
 800579e:	4614      	mov	r4, r2
 80057a0:	461d      	mov	r5, r3
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7fa fed3 	bl	8000554 <__aeabi_i2d>
 80057ae:	f04f 0200 	mov.w	r2, #0
 80057b2:	4b98      	ldr	r3, [pc, #608]	; (8005a14 <compensate_pressure+0x354>)
 80057b4:	f7fa ff38 	bl	8000628 <__aeabi_dmul>
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	4620      	mov	r0, r4
 80057be:	4629      	mov	r1, r5
 80057c0:	f7fa fd7c 	bl	80002bc <__adddf3>
 80057c4:	4602      	mov	r2, r0
 80057c6:	460b      	mov	r3, r1
 80057c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var3 = ((double)calib_data->dig_p3) * var1 * var1 / 524288.0;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fa febe 	bl	8000554 <__aeabi_i2d>
 80057d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057dc:	f7fa ff24 	bl	8000628 <__aeabi_dmul>
 80057e0:	4602      	mov	r2, r0
 80057e2:	460b      	mov	r3, r1
 80057e4:	4610      	mov	r0, r2
 80057e6:	4619      	mov	r1, r3
 80057e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057ec:	f7fa ff1c 	bl	8000628 <__aeabi_dmul>
 80057f0:	4602      	mov	r2, r0
 80057f2:	460b      	mov	r3, r1
 80057f4:	4610      	mov	r0, r2
 80057f6:	4619      	mov	r1, r3
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	4b86      	ldr	r3, [pc, #536]	; (8005a18 <compensate_pressure+0x358>)
 80057fe:	f7fb f83d 	bl	800087c <__aeabi_ddiv>
 8005802:	4602      	mov	r2, r0
 8005804:	460b      	mov	r3, r1
 8005806:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var1 = (var3 + ((double)calib_data->dig_p2) * var1) / 524288.0;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005810:	4618      	mov	r0, r3
 8005812:	f7fa fe9f 	bl	8000554 <__aeabi_i2d>
 8005816:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800581a:	f7fa ff05 	bl	8000628 <__aeabi_dmul>
 800581e:	4602      	mov	r2, r0
 8005820:	460b      	mov	r3, r1
 8005822:	4610      	mov	r0, r2
 8005824:	4619      	mov	r1, r3
 8005826:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800582a:	f7fa fd47 	bl	80002bc <__adddf3>
 800582e:	4602      	mov	r2, r0
 8005830:	460b      	mov	r3, r1
 8005832:	4610      	mov	r0, r2
 8005834:	4619      	mov	r1, r3
 8005836:	f04f 0200 	mov.w	r2, #0
 800583a:	4b77      	ldr	r3, [pc, #476]	; (8005a18 <compensate_pressure+0x358>)
 800583c:	f7fb f81e 	bl	800087c <__aeabi_ddiv>
 8005840:	4602      	mov	r2, r0
 8005842:	460b      	mov	r3, r1
 8005844:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_p1);
 8005848:	f04f 0200 	mov.w	r2, #0
 800584c:	4b6f      	ldr	r3, [pc, #444]	; (8005a0c <compensate_pressure+0x34c>)
 800584e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005852:	f7fb f813 	bl	800087c <__aeabi_ddiv>
 8005856:	4602      	mov	r2, r0
 8005858:	460b      	mov	r3, r1
 800585a:	4610      	mov	r0, r2
 800585c:	4619      	mov	r1, r3
 800585e:	f04f 0200 	mov.w	r2, #0
 8005862:	4b6e      	ldr	r3, [pc, #440]	; (8005a1c <compensate_pressure+0x35c>)
 8005864:	f7fa fd2a 	bl	80002bc <__adddf3>
 8005868:	4602      	mov	r2, r0
 800586a:	460b      	mov	r3, r1
 800586c:	4614      	mov	r4, r2
 800586e:	461d      	mov	r5, r3
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	88db      	ldrh	r3, [r3, #6]
 8005874:	4618      	mov	r0, r3
 8005876:	f7fa fe5d 	bl	8000534 <__aeabi_ui2d>
 800587a:	4602      	mov	r2, r0
 800587c:	460b      	mov	r3, r1
 800587e:	4620      	mov	r0, r4
 8005880:	4629      	mov	r1, r5
 8005882:	f7fa fed1 	bl	8000628 <__aeabi_dmul>
 8005886:	4602      	mov	r2, r0
 8005888:	460b      	mov	r3, r1
 800588a:	e9c7 2306 	strd	r2, r3, [r7, #24]

    /* avoid exception caused by division by zero */
    if (var1 > (0.0))
 800588e:	f04f 0200 	mov.w	r2, #0
 8005892:	f04f 0300 	mov.w	r3, #0
 8005896:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800589a:	f7fb f955 	bl	8000b48 <__aeabi_dcmpgt>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 80cd 	beq.w	8005a40 <compensate_pressure+0x380>
    {
        pressure = 1048576.0 - (double) uncomp_data->pressure;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fa fe42 	bl	8000534 <__aeabi_ui2d>
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	f04f 0000 	mov.w	r0, #0
 80058b8:	4959      	ldr	r1, [pc, #356]	; (8005a20 <compensate_pressure+0x360>)
 80058ba:	f7fa fcfd 	bl	80002b8 <__aeabi_dsub>
 80058be:	4602      	mov	r2, r0
 80058c0:	460b      	mov	r3, r1
 80058c2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 80058c6:	f04f 0200 	mov.w	r2, #0
 80058ca:	4b56      	ldr	r3, [pc, #344]	; (8005a24 <compensate_pressure+0x364>)
 80058cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80058d0:	f7fa ffd4 	bl	800087c <__aeabi_ddiv>
 80058d4:	4602      	mov	r2, r0
 80058d6:	460b      	mov	r3, r1
 80058d8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80058dc:	f7fa fcec 	bl	80002b8 <__aeabi_dsub>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	4610      	mov	r0, r2
 80058e6:	4619      	mov	r1, r3
 80058e8:	a345      	add	r3, pc, #276	; (adr r3, 8005a00 <compensate_pressure+0x340>)
 80058ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ee:	f7fa fe9b 	bl	8000628 <__aeabi_dmul>
 80058f2:	4602      	mov	r2, r0
 80058f4:	460b      	mov	r3, r1
 80058f6:	4610      	mov	r0, r2
 80058f8:	4619      	mov	r1, r3
 80058fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058fe:	f7fa ffbd 	bl	800087c <__aeabi_ddiv>
 8005902:	4602      	mov	r2, r0
 8005904:	460b      	mov	r3, r1
 8005906:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        var1 = ((double)calib_data->dig_p9) * pressure * pressure / 2147483648.0;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005910:	4618      	mov	r0, r3
 8005912:	f7fa fe1f 	bl	8000554 <__aeabi_i2d>
 8005916:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800591a:	f7fa fe85 	bl	8000628 <__aeabi_dmul>
 800591e:	4602      	mov	r2, r0
 8005920:	460b      	mov	r3, r1
 8005922:	4610      	mov	r0, r2
 8005924:	4619      	mov	r1, r3
 8005926:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800592a:	f7fa fe7d 	bl	8000628 <__aeabi_dmul>
 800592e:	4602      	mov	r2, r0
 8005930:	460b      	mov	r3, r1
 8005932:	4610      	mov	r0, r2
 8005934:	4619      	mov	r1, r3
 8005936:	f04f 0200 	mov.w	r2, #0
 800593a:	4b3b      	ldr	r3, [pc, #236]	; (8005a28 <compensate_pressure+0x368>)
 800593c:	f7fa ff9e 	bl	800087c <__aeabi_ddiv>
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)calib_data->dig_p8) / 32768.0;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800594e:	4618      	mov	r0, r3
 8005950:	f7fa fe00 	bl	8000554 <__aeabi_i2d>
 8005954:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005958:	f7fa fe66 	bl	8000628 <__aeabi_dmul>
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	4610      	mov	r0, r2
 8005962:	4619      	mov	r1, r3
 8005964:	f04f 0200 	mov.w	r2, #0
 8005968:	4b28      	ldr	r3, [pc, #160]	; (8005a0c <compensate_pressure+0x34c>)
 800596a:	f7fa ff87 	bl	800087c <__aeabi_ddiv>
 800596e:	4602      	mov	r2, r0
 8005970:	460b      	mov	r3, r1
 8005972:	e9c7 2304 	strd	r2, r3, [r7, #16]
        pressure = pressure + (var1 + var2 + ((double)calib_data->dig_p7)) / 16.0;
 8005976:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800597a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800597e:	f7fa fc9d 	bl	80002bc <__adddf3>
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	4614      	mov	r4, r2
 8005988:	461d      	mov	r5, r3
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005990:	4618      	mov	r0, r3
 8005992:	f7fa fddf 	bl	8000554 <__aeabi_i2d>
 8005996:	4602      	mov	r2, r0
 8005998:	460b      	mov	r3, r1
 800599a:	4620      	mov	r0, r4
 800599c:	4629      	mov	r1, r5
 800599e:	f7fa fc8d 	bl	80002bc <__adddf3>
 80059a2:	4602      	mov	r2, r0
 80059a4:	460b      	mov	r3, r1
 80059a6:	4610      	mov	r0, r2
 80059a8:	4619      	mov	r1, r3
 80059aa:	f04f 0200 	mov.w	r2, #0
 80059ae:	4b1f      	ldr	r3, [pc, #124]	; (8005a2c <compensate_pressure+0x36c>)
 80059b0:	f7fa ff64 	bl	800087c <__aeabi_ddiv>
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80059bc:	f7fa fc7e 	bl	80002bc <__adddf3>
 80059c0:	4602      	mov	r2, r0
 80059c2:	460b      	mov	r3, r1
 80059c4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        if (pressure < pressure_min)
 80059c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059cc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80059d0:	f7fb f89c 	bl	8000b0c <__aeabi_dcmplt>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d004      	beq.n	80059e4 <compensate_pressure+0x324>
        {
            pressure = pressure_min;
 80059da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059de:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80059e2:	e031      	b.n	8005a48 <compensate_pressure+0x388>
        }
        else if (pressure > pressure_max)
 80059e4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059e8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80059ec:	f7fb f8ac 	bl	8000b48 <__aeabi_dcmpgt>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d028      	beq.n	8005a48 <compensate_pressure+0x388>
        {
            pressure = pressure_max;
 80059f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059fa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80059fe:	e023      	b.n	8005a48 <compensate_pressure+0x388>
 8005a00:	00000000 	.word	0x00000000
 8005a04:	40b86a00 	.word	0x40b86a00
 8005a08:	40ef4000 	.word	0x40ef4000
 8005a0c:	40e00000 	.word	0x40e00000
 8005a10:	40100000 	.word	0x40100000
 8005a14:	40f00000 	.word	0x40f00000
 8005a18:	41200000 	.word	0x41200000
 8005a1c:	3ff00000 	.word	0x3ff00000
 8005a20:	41300000 	.word	0x41300000
 8005a24:	40b00000 	.word	0x40b00000
 8005a28:	41e00000 	.word	0x41e00000
 8005a2c:	40300000 	.word	0x40300000
 8005a30:	00000000 	.word	0x00000000
 8005a34:	40dd4c00 	.word	0x40dd4c00
 8005a38:	00000000 	.word	0x00000000
 8005a3c:	40fadb00 	.word	0x40fadb00
        }
    }
    else /* Invalid case */
    {
        pressure = pressure_min;
 8005a40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a44:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    }

    return pressure;
 8005a48:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005a4c:	ec43 2b17 	vmov	d7, r2, r3
}
 8005a50:	eeb0 0a47 	vmov.f32	s0, s14
 8005a54:	eef0 0a67 	vmov.f32	s1, s15
 8005a58:	3738      	adds	r7, #56	; 0x38
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bdb0      	pop	{r4, r5, r7, pc}
 8005a5e:	bf00      	nop

08005a60 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8005a60:	b5b0      	push	{r4, r5, r7, lr}
 8005a62:	b094      	sub	sp, #80	; 0x50
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
    double humidity;
    double humidity_min = 0.0;
 8005a6a:	f04f 0200 	mov.w	r2, #0
 8005a6e:	f04f 0300 	mov.w	r3, #0
 8005a72:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    double humidity_max = 100.0;
 8005a76:	f04f 0200 	mov.w	r2, #0
 8005a7a:	4b81      	ldr	r3, [pc, #516]	; (8005c80 <compensate_humidity+0x220>)
 8005a7c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double var3;
    double var4;
    double var5;
    double var6;

    var1 = ((double)calib_data->t_fine) - 76800.0;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7fa fd65 	bl	8000554 <__aeabi_i2d>
 8005a8a:	f04f 0200 	mov.w	r2, #0
 8005a8e:	4b7d      	ldr	r3, [pc, #500]	; (8005c84 <compensate_humidity+0x224>)
 8005a90:	f7fa fc12 	bl	80002b8 <__aeabi_dsub>
 8005a94:	4602      	mov	r2, r0
 8005a96:	460b      	mov	r3, r1
 8005a98:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    var2 = (((double)calib_data->dig_h4) * 64.0 + (((double)calib_data->dig_h5) / 16384.0) * var1);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7fa fd56 	bl	8000554 <__aeabi_i2d>
 8005aa8:	f04f 0200 	mov.w	r2, #0
 8005aac:	4b76      	ldr	r3, [pc, #472]	; (8005c88 <compensate_humidity+0x228>)
 8005aae:	f7fa fdbb 	bl	8000628 <__aeabi_dmul>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	4614      	mov	r4, r2
 8005ab8:	461d      	mov	r5, r3
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7fa fd47 	bl	8000554 <__aeabi_i2d>
 8005ac6:	f04f 0200 	mov.w	r2, #0
 8005aca:	4b70      	ldr	r3, [pc, #448]	; (8005c8c <compensate_humidity+0x22c>)
 8005acc:	f7fa fed6 	bl	800087c <__aeabi_ddiv>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	4610      	mov	r0, r2
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005adc:	f7fa fda4 	bl	8000628 <__aeabi_dmul>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	4629      	mov	r1, r5
 8005ae8:	f7fa fbe8 	bl	80002bc <__adddf3>
 8005aec:	4602      	mov	r2, r0
 8005aee:	460b      	mov	r3, r1
 8005af0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    var3 = uncomp_data->humidity - var2;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7fa fd1b 	bl	8000534 <__aeabi_ui2d>
 8005afe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b02:	f7fa fbd9 	bl	80002b8 <__aeabi_dsub>
 8005b06:	4602      	mov	r2, r0
 8005b08:	460b      	mov	r3, r1
 8005b0a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    var4 = ((double)calib_data->dig_h2) / 65536.0;
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7fa fd1d 	bl	8000554 <__aeabi_i2d>
 8005b1a:	f04f 0200 	mov.w	r2, #0
 8005b1e:	4b5c      	ldr	r3, [pc, #368]	; (8005c90 <compensate_humidity+0x230>)
 8005b20:	f7fa feac 	bl	800087c <__aeabi_ddiv>
 8005b24:	4602      	mov	r2, r0
 8005b26:	460b      	mov	r3, r1
 8005b28:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var5 = (1.0 + (((double)calib_data->dig_h3) / 67108864.0) * var1);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	7f1b      	ldrb	r3, [r3, #28]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7fa fcff 	bl	8000534 <__aeabi_ui2d>
 8005b36:	f04f 0200 	mov.w	r2, #0
 8005b3a:	4b56      	ldr	r3, [pc, #344]	; (8005c94 <compensate_humidity+0x234>)
 8005b3c:	f7fa fe9e 	bl	800087c <__aeabi_ddiv>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	4610      	mov	r0, r2
 8005b46:	4619      	mov	r1, r3
 8005b48:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005b4c:	f7fa fd6c 	bl	8000628 <__aeabi_dmul>
 8005b50:	4602      	mov	r2, r0
 8005b52:	460b      	mov	r3, r1
 8005b54:	4610      	mov	r0, r2
 8005b56:	4619      	mov	r1, r3
 8005b58:	f04f 0200 	mov.w	r2, #0
 8005b5c:	4b4e      	ldr	r3, [pc, #312]	; (8005c98 <compensate_humidity+0x238>)
 8005b5e:	f7fa fbad 	bl	80002bc <__adddf3>
 8005b62:	4602      	mov	r2, r0
 8005b64:	460b      	mov	r3, r1
 8005b66:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var6 = 1.0 + (((double)calib_data->dig_h6) / 67108864.0) * var1 * var5;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7fa fcef 	bl	8000554 <__aeabi_i2d>
 8005b76:	f04f 0200 	mov.w	r2, #0
 8005b7a:	4b46      	ldr	r3, [pc, #280]	; (8005c94 <compensate_humidity+0x234>)
 8005b7c:	f7fa fe7e 	bl	800087c <__aeabi_ddiv>
 8005b80:	4602      	mov	r2, r0
 8005b82:	460b      	mov	r3, r1
 8005b84:	4610      	mov	r0, r2
 8005b86:	4619      	mov	r1, r3
 8005b88:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005b8c:	f7fa fd4c 	bl	8000628 <__aeabi_dmul>
 8005b90:	4602      	mov	r2, r0
 8005b92:	460b      	mov	r3, r1
 8005b94:	4610      	mov	r0, r2
 8005b96:	4619      	mov	r1, r3
 8005b98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005b9c:	f7fa fd44 	bl	8000628 <__aeabi_dmul>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	4610      	mov	r0, r2
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	f04f 0200 	mov.w	r2, #0
 8005bac:	4b3a      	ldr	r3, [pc, #232]	; (8005c98 <compensate_humidity+0x238>)
 8005bae:	f7fa fb85 	bl	80002bc <__adddf3>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var6 = var3 * var4 * (var5 * var6);
 8005bba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bbe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005bc2:	f7fa fd31 	bl	8000628 <__aeabi_dmul>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	460b      	mov	r3, r1
 8005bca:	4614      	mov	r4, r2
 8005bcc:	461d      	mov	r5, r3
 8005bce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bd2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005bd6:	f7fa fd27 	bl	8000628 <__aeabi_dmul>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	460b      	mov	r3, r1
 8005bde:	4620      	mov	r0, r4
 8005be0:	4629      	mov	r1, r5
 8005be2:	f7fa fd21 	bl	8000628 <__aeabi_dmul>
 8005be6:	4602      	mov	r2, r0
 8005be8:	460b      	mov	r3, r1
 8005bea:	e9c7 2302 	strd	r2, r3, [r7, #8]
    humidity = var6 * (1.0 - ((double)calib_data->dig_h1) * var6 / 524288.0);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	7e1b      	ldrb	r3, [r3, #24]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fa fc9e 	bl	8000534 <__aeabi_ui2d>
 8005bf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bfc:	f7fa fd14 	bl	8000628 <__aeabi_dmul>
 8005c00:	4602      	mov	r2, r0
 8005c02:	460b      	mov	r3, r1
 8005c04:	4610      	mov	r0, r2
 8005c06:	4619      	mov	r1, r3
 8005c08:	f04f 0200 	mov.w	r2, #0
 8005c0c:	4b23      	ldr	r3, [pc, #140]	; (8005c9c <compensate_humidity+0x23c>)
 8005c0e:	f7fa fe35 	bl	800087c <__aeabi_ddiv>
 8005c12:	4602      	mov	r2, r0
 8005c14:	460b      	mov	r3, r1
 8005c16:	f04f 0000 	mov.w	r0, #0
 8005c1a:	491f      	ldr	r1, [pc, #124]	; (8005c98 <compensate_humidity+0x238>)
 8005c1c:	f7fa fb4c 	bl	80002b8 <__aeabi_dsub>
 8005c20:	4602      	mov	r2, r0
 8005c22:	460b      	mov	r3, r1
 8005c24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c28:	f7fa fcfe 	bl	8000628 <__aeabi_dmul>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	460b      	mov	r3, r1
 8005c30:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    if (humidity > humidity_max)
 8005c34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c38:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005c3c:	f7fa ff84 	bl	8000b48 <__aeabi_dcmpgt>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d004      	beq.n	8005c50 <compensate_humidity+0x1f0>
    {
        humidity = humidity_max;
 8005c46:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c4a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8005c4e:	e00c      	b.n	8005c6a <compensate_humidity+0x20a>
    }
    else if (humidity < humidity_min)
 8005c50:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c54:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005c58:	f7fa ff58 	bl	8000b0c <__aeabi_dcmplt>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d003      	beq.n	8005c6a <compensate_humidity+0x20a>
    {
        humidity = humidity_min;
 8005c62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c66:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    }

    return humidity;
 8005c6a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c6e:	ec43 2b17 	vmov	d7, r2, r3
}
 8005c72:	eeb0 0a47 	vmov.f32	s0, s14
 8005c76:	eef0 0a67 	vmov.f32	s1, s15
 8005c7a:	3750      	adds	r7, #80	; 0x50
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bdb0      	pop	{r4, r5, r7, pc}
 8005c80:	40590000 	.word	0x40590000
 8005c84:	40f2c000 	.word	0x40f2c000
 8005c88:	40500000 	.word	0x40500000
 8005c8c:	40d00000 	.word	0x40d00000
 8005c90:	40f00000 	.word	0x40f00000
 8005c94:	41900000 	.word	0x41900000
 8005c98:	3ff00000 	.word	0x3ff00000
 8005c9c:	41200000 	.word	0x41200000

08005ca0 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b08a      	sub	sp, #40	; 0x28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8005ca8:	2388      	movs	r3, #136	; 0x88
 8005caa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 8005cae:	2300      	movs	r3, #0
 8005cb0:	60fb      	str	r3, [r7, #12]
 8005cb2:	f107 0310 	add.w	r3, r7, #16
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	601a      	str	r2, [r3, #0]
 8005cba:	605a      	str	r2, [r3, #4]
 8005cbc:	609a      	str	r2, [r3, #8]
 8005cbe:	60da      	str	r2, [r3, #12]
 8005cc0:	611a      	str	r2, [r3, #16]
 8005cc2:	829a      	strh	r2, [r3, #20]

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8005cc4:	f107 010c 	add.w	r1, r7, #12
 8005cc8:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	221a      	movs	r2, #26
 8005cd0:	f7fe ff99 	bl	8004c06 <bme280_get_regs>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BME280_OK)
 8005cda:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d11d      	bne.n	8005d1e <get_calib_data+0x7e>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 8005ce2:	f107 030c 	add.w	r3, r7, #12
 8005ce6:	6879      	ldr	r1, [r7, #4]
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f000 f84a 	bl	8005d82 <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8005cee:	23e1      	movs	r3, #225	; 0xe1
 8005cf0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8005cf4:	f107 010c 	add.w	r1, r7, #12
 8005cf8:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2207      	movs	r2, #7
 8005d00:	f7fe ff81 	bl	8004c06 <bme280_get_regs>
 8005d04:	4603      	mov	r3, r0
 8005d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 8005d0a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d105      	bne.n	8005d1e <get_calib_data+0x7e>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 8005d12:	f107 030c 	add.w	r3, r7, #12
 8005d16:	6879      	ldr	r1, [r7, #4]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f000 f8e1 	bl	8005ee0 <parse_humidity_calib_data>
        }
    }

    return rslt;
 8005d1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3728      	adds	r7, #40	; 0x28
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b087      	sub	sp, #28
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	60f8      	str	r0, [r7, #12]
 8005d32:	60b9      	str	r1, [r7, #8]
 8005d34:	607a      	str	r2, [r7, #4]
 8005d36:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8005d38:	2301      	movs	r3, #1
 8005d3a:	75fb      	strb	r3, [r7, #23]
 8005d3c:	e016      	b.n	8005d6c <interleave_reg_addr+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8005d3e:	7dfb      	ldrb	r3, [r7, #23]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	441a      	add	r2, r3
 8005d44:	7dfb      	ldrb	r3, [r7, #23]
 8005d46:	005b      	lsls	r3, r3, #1
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	68b9      	ldr	r1, [r7, #8]
 8005d4c:	440b      	add	r3, r1
 8005d4e:	7812      	ldrb	r2, [r2, #0]
 8005d50:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8005d52:	7dfb      	ldrb	r3, [r7, #23]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	441a      	add	r2, r3
 8005d58:	7dfb      	ldrb	r3, [r7, #23]
 8005d5a:	005b      	lsls	r3, r3, #1
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	440b      	add	r3, r1
 8005d62:	7812      	ldrb	r2, [r2, #0]
 8005d64:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8005d66:	7dfb      	ldrb	r3, [r7, #23]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	75fb      	strb	r3, [r7, #23]
 8005d6c:	7dfa      	ldrb	r2, [r7, #23]
 8005d6e:	78fb      	ldrb	r3, [r7, #3]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d3e4      	bcc.n	8005d3e <interleave_reg_addr+0x14>
    }
}
 8005d74:	bf00      	nop
 8005d76:	bf00      	nop
 8005d78:	371c      	adds	r7, #28
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b085      	sub	sp, #20
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	3310      	adds	r3, #16
 8005d90:	60fb      	str	r3, [r7, #12]

    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	3301      	adds	r3, #1
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	021b      	lsls	r3, r3, #8
 8005d9a:	b21a      	sxth	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	b21b      	sxth	r3, r3
 8005da2:	4313      	orrs	r3, r2
 8005da4:	b21b      	sxth	r3, r3
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	801a      	strh	r2, [r3, #0]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	3303      	adds	r3, #3
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	021b      	lsls	r3, r3, #8
 8005db4:	b21a      	sxth	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	3302      	adds	r3, #2
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	b21b      	sxth	r3, r3
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	b21a      	sxth	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	805a      	strh	r2, [r3, #2]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	3305      	adds	r3, #5
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	021b      	lsls	r3, r3, #8
 8005dce:	b21a      	sxth	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	b21b      	sxth	r3, r3
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	b21a      	sxth	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	809a      	strh	r2, [r3, #4]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	3307      	adds	r3, #7
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	021b      	lsls	r3, r3, #8
 8005de8:	b21a      	sxth	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	3306      	adds	r3, #6
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	b21b      	sxth	r3, r3
 8005df2:	4313      	orrs	r3, r2
 8005df4:	b21b      	sxth	r3, r3
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	80da      	strh	r2, [r3, #6]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	3309      	adds	r3, #9
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	021b      	lsls	r3, r3, #8
 8005e04:	b21a      	sxth	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	3308      	adds	r3, #8
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	b21b      	sxth	r3, r3
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	b21a      	sxth	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	811a      	strh	r2, [r3, #8]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	330b      	adds	r3, #11
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	021b      	lsls	r3, r3, #8
 8005e1e:	b21a      	sxth	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	330a      	adds	r3, #10
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	b21b      	sxth	r3, r3
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	b21a      	sxth	r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	815a      	strh	r2, [r3, #10]
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	330d      	adds	r3, #13
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	021b      	lsls	r3, r3, #8
 8005e38:	b21a      	sxth	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	330c      	adds	r3, #12
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	b21b      	sxth	r3, r3
 8005e42:	4313      	orrs	r3, r2
 8005e44:	b21a      	sxth	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	819a      	strh	r2, [r3, #12]
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	330f      	adds	r3, #15
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	021b      	lsls	r3, r3, #8
 8005e52:	b21a      	sxth	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	330e      	adds	r3, #14
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	b21b      	sxth	r3, r3
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	b21a      	sxth	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	81da      	strh	r2, [r3, #14]
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	3311      	adds	r3, #17
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	021b      	lsls	r3, r3, #8
 8005e6c:	b21a      	sxth	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	3310      	adds	r3, #16
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	b21b      	sxth	r3, r3
 8005e76:	4313      	orrs	r3, r2
 8005e78:	b21a      	sxth	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	821a      	strh	r2, [r3, #16]
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	3313      	adds	r3, #19
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	021b      	lsls	r3, r3, #8
 8005e86:	b21a      	sxth	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3312      	adds	r3, #18
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	b21b      	sxth	r3, r3
 8005e90:	4313      	orrs	r3, r2
 8005e92:	b21a      	sxth	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	825a      	strh	r2, [r3, #18]
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	3315      	adds	r3, #21
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	021b      	lsls	r3, r3, #8
 8005ea0:	b21a      	sxth	r2, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	3314      	adds	r3, #20
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	b21b      	sxth	r3, r3
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	b21a      	sxth	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	829a      	strh	r2, [r3, #20]
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	3317      	adds	r3, #23
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	021b      	lsls	r3, r3, #8
 8005eba:	b21a      	sxth	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	3316      	adds	r3, #22
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	b21b      	sxth	r3, r3
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	b21a      	sxth	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	82da      	strh	r2, [r3, #22]
    calib_data->dig_h1 = reg_data[25];
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	7e5a      	ldrb	r2, [r3, #25]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	761a      	strb	r2, [r3, #24]
}
 8005ed4:	bf00      	nop
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b087      	sub	sp, #28
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	3310      	adds	r3, #16
 8005eee:	617b      	str	r3, [r7, #20]
    int16_t dig_h4_lsb;
    int16_t dig_h4_msb;
    int16_t dig_h5_lsb;
    int16_t dig_h5_msb;

    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	021b      	lsls	r3, r3, #8
 8005ef8:	b21a      	sxth	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	b21b      	sxth	r3, r3
 8005f00:	4313      	orrs	r3, r2
 8005f02:	b21a      	sxth	r2, r3
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	835a      	strh	r2, [r3, #26]
    calib_data->dig_h3 = reg_data[2];
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	789a      	ldrb	r2, [r3, #2]
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	771a      	strb	r2, [r3, #28]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	3303      	adds	r3, #3
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	b25b      	sxtb	r3, r3
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	011b      	lsls	r3, r3, #4
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	827b      	strh	r3, [r7, #18]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	3304      	adds	r3, #4
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	b21b      	sxth	r3, r3
 8005f28:	f003 030f 	and.w	r3, r3, #15
 8005f2c:	823b      	strh	r3, [r7, #16]
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 8005f2e:	8a7a      	ldrh	r2, [r7, #18]
 8005f30:	8a3b      	ldrh	r3, [r7, #16]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	b21a      	sxth	r2, r3
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	83da      	strh	r2, [r3, #30]
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	3305      	adds	r3, #5
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	b25b      	sxtb	r3, r3
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	011b      	lsls	r3, r3, #4
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	81fb      	strh	r3, [r7, #14]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	3304      	adds	r3, #4
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	091b      	lsrs	r3, r3, #4
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	81bb      	strh	r3, [r7, #12]
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 8005f56:	89fa      	ldrh	r2, [r7, #14]
 8005f58:	89bb      	ldrh	r3, [r7, #12]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	b21a      	sxth	r2, r3
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	841a      	strh	r2, [r3, #32]
    calib_data->dig_h6 = (int8_t)reg_data[6];
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	3306      	adds	r3, #6
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	b25a      	sxtb	r2, r3
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8005f70:	bf00      	nop
 8005f72:	371c      	adds	r7, #28
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	4603      	mov	r3, r0
 8005f84:	460a      	mov	r2, r1
 8005f86:	71fb      	strb	r3, [r7, #7]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	71bb      	strb	r3, [r7, #6]
    uint8_t settings_changed = FALSE;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 8005f90:	79fa      	ldrb	r2, [r7, #7]
 8005f92:	79bb      	ldrb	r3, [r7, #6]
 8005f94:	4013      	ands	r3, r2
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d002      	beq.n	8005fa2 <are_settings_changed+0x26>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	73fb      	strb	r3, [r7, #15]
 8005fa0:	e001      	b.n	8005fa6 <are_settings_changed+0x2a>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 8005fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3714      	adds	r7, #20
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00b      	beq.n	8005fda <null_ptr_check+0x26>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d007      	beq.n	8005fda <null_ptr_check+0x26>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d003      	beq.n	8005fda <null_ptr_check+0x26>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d102      	bne.n	8005fe0 <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 8005fda:	23ff      	movs	r3, #255	; 0xff
 8005fdc:	73fb      	strb	r3, [r7, #15]
 8005fde:	e001      	b.n	8005fe4 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3714      	adds	r7, #20
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <_dev_by_id>:
	}
};


static its_bme280_t * _dev_by_id(its_bme280_id_t id)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	71fb      	strb	r3, [r7, #7]
	assert(id >= 0 && id < 1);
 8005ffe:	79fb      	ldrb	r3, [r7, #7]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d005      	beq.n	8006010 <_dev_by_id+0x1c>
 8006004:	4b09      	ldr	r3, [pc, #36]	; (800602c <_dev_by_id+0x38>)
 8006006:	4a0a      	ldr	r2, [pc, #40]	; (8006030 <_dev_by_id+0x3c>)
 8006008:	2143      	movs	r1, #67	; 0x43
 800600a:	480a      	ldr	r0, [pc, #40]	; (8006034 <_dev_by_id+0x40>)
 800600c:	f00b fdb8 	bl	8011b80 <__assert_func>
	its_bme280_t * const dev = &_devices[id];
 8006010:	79fa      	ldrb	r2, [r7, #7]
 8006012:	4613      	mov	r3, r2
 8006014:	00db      	lsls	r3, r3, #3
 8006016:	4413      	add	r3, r2
 8006018:	00db      	lsls	r3, r3, #3
 800601a:	4a07      	ldr	r2, [pc, #28]	; (8006038 <_dev_by_id+0x44>)
 800601c:	4413      	add	r3, r2
 800601e:	60fb      	str	r3, [r7, #12]

	return dev;
 8006020:	68fb      	ldr	r3, [r7, #12]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	08017bcc 	.word	0x08017bcc
 8006030:	08017cdc 	.word	0x08017cdc
 8006034:	08017be0 	.word	0x08017be0
 8006038:	2000000c 	.word	0x2000000c

0800603c <_i2c_read>:


static int8_t _i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b088      	sub	sp, #32
 8006040:	af04      	add	r7, sp, #16
 8006042:	603a      	str	r2, [r7, #0]
 8006044:	461a      	mov	r2, r3
 8006046:	4603      	mov	r3, r0
 8006048:	71fb      	strb	r3, [r7, #7]
 800604a:	460b      	mov	r3, r1
 800604c:	71bb      	strb	r3, [r7, #6]
 800604e:	4613      	mov	r3, r2
 8006050:	80bb      	strh	r3, [r7, #4]
	its_bme280_t * dev = _dev_by_id(id);
 8006052:	79fb      	ldrb	r3, [r7, #7]
 8006054:	4618      	mov	r0, r3
 8006056:	f7ff ffcd 	bl	8005ff4 <_dev_by_id>
 800605a:	60f8      	str	r0, [r7, #12]

	HAL_StatusTypeDef hrc = HAL_I2C_Mem_Read(
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6818      	ldr	r0, [r3, #0]
			dev->bus,
			dev->addr << 1,
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	791b      	ldrb	r3, [r3, #4]
 8006064:	b29b      	uxth	r3, r3
	HAL_StatusTypeDef hrc = HAL_I2C_Mem_Read(
 8006066:	005b      	lsls	r3, r3, #1
 8006068:	b299      	uxth	r1, r3
 800606a:	79bb      	ldrb	r3, [r7, #6]
 800606c:	b29a      	uxth	r2, r3
 800606e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8006072:	9302      	str	r3, [sp, #8]
 8006074:	88bb      	ldrh	r3, [r7, #4]
 8006076:	9301      	str	r3, [sp, #4]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	9300      	str	r3, [sp, #0]
 800607c:	2301      	movs	r3, #1
 800607e:	f001 fc97 	bl	80079b0 <HAL_I2C_Mem_Read>
 8006082:	4603      	mov	r3, r0
 8006084:	72fb      	strb	r3, [r7, #11]
			data,
			len,
			ITS_BME_HAL_TIMEOUT
	);

	if (hrc != HAL_OK)
 8006086:	7afb      	ldrb	r3, [r7, #11]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d006      	beq.n	800609a <_i2c_read+0x5e>
	{
		I2C_ClearBusyFlagErratum(&hi2c1, 120);
 800608c:	2178      	movs	r1, #120	; 0x78
 800608e:	4806      	ldr	r0, [pc, #24]	; (80060a8 <_i2c_read+0x6c>)
 8006090:	f000 f938 	bl	8006304 <I2C_ClearBusyFlagErratum>
		return (int8_t)hrc;
 8006094:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006098:	e001      	b.n	800609e <_i2c_read+0x62>


	}

	return (int8_t)hrc;
 800609a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	20002918 	.word	0x20002918

080060ac <_i2c_write>:


static int8_t _i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b088      	sub	sp, #32
 80060b0:	af04      	add	r7, sp, #16
 80060b2:	603a      	str	r2, [r7, #0]
 80060b4:	461a      	mov	r2, r3
 80060b6:	4603      	mov	r3, r0
 80060b8:	71fb      	strb	r3, [r7, #7]
 80060ba:	460b      	mov	r3, r1
 80060bc:	71bb      	strb	r3, [r7, #6]
 80060be:	4613      	mov	r3, r2
 80060c0:	80bb      	strh	r3, [r7, #4]
	its_bme280_t * dev = _dev_by_id(id);
 80060c2:	79fb      	ldrb	r3, [r7, #7]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7ff ff95 	bl	8005ff4 <_dev_by_id>
 80060ca:	60f8      	str	r0, [r7, #12]

	HAL_StatusTypeDef hrc = HAL_I2C_Mem_Write(
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6818      	ldr	r0, [r3, #0]
			dev->bus,
			dev->addr << 1,
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	791b      	ldrb	r3, [r3, #4]
 80060d4:	b29b      	uxth	r3, r3
	HAL_StatusTypeDef hrc = HAL_I2C_Mem_Write(
 80060d6:	005b      	lsls	r3, r3, #1
 80060d8:	b299      	uxth	r1, r3
 80060da:	79bb      	ldrb	r3, [r7, #6]
 80060dc:	b29a      	uxth	r2, r3
 80060de:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80060e2:	9302      	str	r3, [sp, #8]
 80060e4:	88bb      	ldrh	r3, [r7, #4]
 80060e6:	9301      	str	r3, [sp, #4]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	2301      	movs	r3, #1
 80060ee:	f001 fb65 	bl	80077bc <HAL_I2C_Mem_Write>
 80060f2:	4603      	mov	r3, r0
 80060f4:	72fb      	strb	r3, [r7, #11]
			1,
			data,
			len,
			ITS_BME_HAL_TIMEOUT
	);
	if (hrc == HAL_BUSY)
 80060f6:	7afb      	ldrb	r3, [r7, #11]
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d106      	bne.n	800610a <_i2c_write+0x5e>
	{
		I2C_ClearBusyFlagErratum(&hi2c1, 120);
 80060fc:	2178      	movs	r1, #120	; 0x78
 80060fe:	4806      	ldr	r0, [pc, #24]	; (8006118 <_i2c_write+0x6c>)
 8006100:	f000 f900 	bl	8006304 <I2C_ClearBusyFlagErratum>
		return (int8_t)hrc;
 8006104:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006108:	e001      	b.n	800610e <_i2c_write+0x62>

	}
	return (int8_t)hrc;
 800610a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800610e:	4618      	mov	r0, r3
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	20002918 	.word	0x20002918

0800611c <_delay_ms>:



static void _delay_ms(uint32_t ms)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 fa13 	bl	8006550 <HAL_Delay>
}
 800612a:	bf00      	nop
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <its_bme280_init>:


int its_bme280_init(its_bme280_id_t id)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b084      	sub	sp, #16
 8006136:	af00      	add	r7, sp, #0
 8006138:	4603      	mov	r3, r0
 800613a:	71fb      	strb	r3, [r7, #7]
	its_bme280_t * const dev = _dev_by_id(id);
 800613c:	79fb      	ldrb	r3, [r7, #7]
 800613e:	4618      	mov	r0, r3
 8006140:	f7ff ff58 	bl	8005ff4 <_dev_by_id>
 8006144:	60f8      	str	r0, [r7, #12]

	int rc = bme280_soft_reset(&dev->driver);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	3308      	adds	r3, #8
 800614a:	4618      	mov	r0, r3
 800614c:	f7fe feb0 	bl	8004eb0 <bme280_soft_reset>
 8006150:	4603      	mov	r3, r0
 8006152:	60bb      	str	r3, [r7, #8]
	if (0 != rc)
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <its_bme280_init+0x2c>
		return rc;
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	e029      	b.n	80061b2 <its_bme280_init+0x80>

	rc = bme280_init(&dev->driver);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	3308      	adds	r3, #8
 8006162:	4618      	mov	r0, r3
 8006164:	f7fe fd07 	bl	8004b76 <bme280_init>
 8006168:	4603      	mov	r3, r0
 800616a:	60bb      	str	r3, [r7, #8]
	if (0 != rc)
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <its_bme280_init+0x44>
		return rc;
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	e01d      	b.n	80061b2 <its_bme280_init+0x80>

	rc = bme280_set_sensor_settings(BME280_ALL_SETTINGS_SEL, &dev->driver);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	3308      	adds	r3, #8
 800617a:	4619      	mov	r1, r3
 800617c:	201f      	movs	r0, #31
 800617e:	f7fe fdeb 	bl	8004d58 <bme280_set_sensor_settings>
 8006182:	4603      	mov	r3, r0
 8006184:	60bb      	str	r3, [r7, #8]
	if (0 != rc)
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d001      	beq.n	8006190 <its_bme280_init+0x5e>
		return rc;
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	e010      	b.n	80061b2 <its_bme280_init+0x80>

	rc = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev->driver);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	3308      	adds	r3, #8
 8006194:	4619      	mov	r1, r3
 8006196:	2003      	movs	r0, #3
 8006198:	f7fe fe33 	bl	8004e02 <bme280_set_sensor_mode>
 800619c:	4603      	mov	r3, r0
 800619e:	60bb      	str	r3, [r7, #8]
	if (0 != rc)
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <its_bme280_init+0x78>
		return rc;
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	e003      	b.n	80061b2 <its_bme280_init+0x80>

	HAL_Delay(10); // Иначе первые данные получаются плохие
 80061aa:	200a      	movs	r0, #10
 80061ac:	f000 f9d0 	bl	8006550 <HAL_Delay>
	return 0;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	0000      	movs	r0, r0
 80061bc:	0000      	movs	r0, r0
	...

080061c0 <its_bme280_read>:
}


//Заменить в функци структура мавлинка на собственную
int its_bme280_read(its_bme280_id_t id, bme_important_shit * data)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b08a      	sub	sp, #40	; 0x28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	4603      	mov	r3, r0
 80061c8:	6039      	str	r1, [r7, #0]
 80061ca:	71fb      	strb	r3, [r7, #7]
	its_bme280_t * const dev = _dev_by_id(id);
 80061cc:	79fb      	ldrb	r3, [r7, #7]
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7ff ff10 	bl	8005ff4 <_dev_by_id>
 80061d4:	6278      	str	r0, [r7, #36]	; 0x24

	struct bme280_data bme280_data;

	int rc = bme280_get_sensor_data(BME280_ALL, &bme280_data, &dev->driver);
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	f103 0208 	add.w	r2, r3, #8
 80061dc:	f107 0308 	add.w	r3, r7, #8
 80061e0:	4619      	mov	r1, r3
 80061e2:	2007      	movs	r0, #7
 80061e4:	f7fe feaf 	bl	8004f46 <bme280_get_sensor_data>
 80061e8:	4603      	mov	r3, r0
 80061ea:	623b      	str	r3, [r7, #32]
	if (0 != rc)
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <its_bme280_read+0x36>
		return rc;
 80061f2:	6a3b      	ldr	r3, [r7, #32]
 80061f4:	e044      	b.n	8006280 <its_bme280_read+0xc0>

	data->time_steady = HAL_GetTick();
 80061f6:	f000 f99f 	bl	8006538 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	611a      	str	r2, [r3, #16]

	data->pressure = bme280_data.pressure;
 8006200:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006204:	6839      	ldr	r1, [r7, #0]
 8006206:	e9c1 2300 	strd	r2, r3, [r1]
	data->temperature = bme280_data.temperature;
 800620a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800620e:	6839      	ldr	r1, [r7, #0]
 8006210:	e9c1 2306 	strd	r2, r3, [r1, #24]
	data->humidity = bme280_data.humidity;
 8006214:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006218:	6839      	ldr	r1, [r7, #0]
 800621a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	data->altitude =  44330.0*(1.0 - pow((float)bme280_data.pressure/data->bme_pres_grow, 1.0/5.255)); // Написать функцию пересчета в высоту
 800621e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006222:	4610      	mov	r0, r2
 8006224:	4619      	mov	r1, r3
 8006226:	f7fa fcf7 	bl	8000c18 <__aeabi_d2f>
 800622a:	4603      	mov	r3, r0
 800622c:	4618      	mov	r0, r3
 800622e:	f7fa f9a3 	bl	8000578 <__aeabi_f2d>
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006238:	f7fa fb20 	bl	800087c <__aeabi_ddiv>
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	ec43 2b17 	vmov	d7, r2, r3
 8006244:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8006288 <its_bme280_read+0xc8>
 8006248:	eeb0 0a47 	vmov.f32	s0, s14
 800624c:	eef0 0a67 	vmov.f32	s1, s15
 8006250:	f010 f98e 	bl	8016570 <pow>
 8006254:	ec53 2b10 	vmov	r2, r3, d0
 8006258:	f04f 0000 	mov.w	r0, #0
 800625c:	490e      	ldr	r1, [pc, #56]	; (8006298 <its_bme280_read+0xd8>)
 800625e:	f7fa f82b 	bl	80002b8 <__aeabi_dsub>
 8006262:	4602      	mov	r2, r0
 8006264:	460b      	mov	r3, r1
 8006266:	4610      	mov	r0, r2
 8006268:	4619      	mov	r1, r3
 800626a:	a309      	add	r3, pc, #36	; (adr r3, 8006290 <its_bme280_read+0xd0>)
 800626c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006270:	f7fa f9da 	bl	8000628 <__aeabi_dmul>
 8006274:	4602      	mov	r2, r0
 8006276:	460b      	mov	r3, r1
 8006278:	6839      	ldr	r1, [r7, #0]
 800627a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	return 0;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3728      	adds	r7, #40	; 0x28
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	ccd9456c 	.word	0xccd9456c
 800628c:	3fc85b95 	.word	0x3fc85b95
 8006290:	00000000 	.word	0x00000000
 8006294:	40e5a540 	.word	0x40e5a540
 8006298:	3ff00000 	.word	0x3ff00000

0800629c <wait_for_gpio_state_timeout>:

#define SDA_PORT GPIOB
#define SDA_PIN  GPIO_PIN_9

static uint8_t wait_for_gpio_state_timeout(GPIO_TypeDef *port, uint16_t pin, GPIO_PinState state, uint32_t timeout)
 {
 800629c:	b580      	push	{r7, lr}
 800629e:	b086      	sub	sp, #24
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	607b      	str	r3, [r7, #4]
 80062a6:	460b      	mov	r3, r1
 80062a8:	817b      	strh	r3, [r7, #10]
 80062aa:	4613      	mov	r3, r2
 80062ac:	727b      	strb	r3, [r7, #9]
    uint32_t Tickstart = HAL_GetTick();
 80062ae:	f000 f943 	bl	8006538 <HAL_GetTick>
 80062b2:	6138      	str	r0, [r7, #16]
    uint8_t ret = 1;
 80062b4:	2301      	movs	r3, #1
 80062b6:	75fb      	strb	r3, [r7, #23]

    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (1 == ret);) // Wait until flag is set
 80062b8:	e011      	b.n	80062de <wait_for_gpio_state_timeout+0x42>
    {
        if(timeout != HAL_MAX_DELAY) // Check for the timeout
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c0:	d00c      	beq.n	80062dc <wait_for_gpio_state_timeout+0x40>
        {
            if((timeout == 0U) || ((HAL_GetTick() - Tickstart) > timeout)) ret = 0;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d007      	beq.n	80062d8 <wait_for_gpio_state_timeout+0x3c>
 80062c8:	f000 f936 	bl	8006538 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d201      	bcs.n	80062dc <wait_for_gpio_state_timeout+0x40>
 80062d8:	2300      	movs	r3, #0
 80062da:	75fb      	strb	r3, [r7, #23]
        }

        asm("nop");
 80062dc:	bf00      	nop
    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (1 == ret);) // Wait until flag is set
 80062de:	897b      	ldrh	r3, [r7, #10]
 80062e0:	4619      	mov	r1, r3
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f001 f8c4 	bl	8007470 <HAL_GPIO_ReadPin>
 80062e8:	4603      	mov	r3, r0
 80062ea:	461a      	mov	r2, r3
 80062ec:	7a7b      	ldrb	r3, [r7, #9]
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d002      	beq.n	80062f8 <wait_for_gpio_state_timeout+0x5c>
 80062f2:	7dfb      	ldrb	r3, [r7, #23]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d0e0      	beq.n	80062ba <wait_for_gpio_state_timeout+0x1e>
    }
    return ret;
 80062f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3718      	adds	r7, #24
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
	...

08006304 <I2C_ClearBusyFlagErratum>:

void I2C_ClearBusyFlagErratum(I2C_HandleTypeDef *hi2c, uint32_t timeout)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b088      	sub	sp, #32
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
        // 2.13.7 I2C analog filter may provide wrong value, locking BUSY. STM32F10xx8 STM32F10xxB Errata sheet

    GPIO_InitTypeDef GPIO_InitStructure = {0};
 800630e:	f107 030c 	add.w	r3, r7, #12
 8006312:	2200      	movs	r2, #0
 8006314:	601a      	str	r2, [r3, #0]
 8006316:	605a      	str	r2, [r3, #4]
 8006318:	609a      	str	r2, [r3, #8]
 800631a:	60da      	str	r2, [r3, #12]
 800631c:	611a      	str	r2, [r3, #16]

    // 1. Clear PE bit.
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_PE);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f022 0201 	bic.w	r2, r2, #1
 800632c:	601a      	str	r2, [r3, #0]

    //  2. Configure the SCL and SDA I/Os as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_I2C_DeInit(hi2c);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f001 fa14 	bl	800775c <HAL_I2C_DeInit>

    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 8006334:	2311      	movs	r3, #17
 8006336:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 8006338:	2300      	movs	r3, #0
 800633a:	617b      	str	r3, [r7, #20]

    GPIO_InitStructure.Pin = SCL_PIN; // SCL // если пин другой, то укажите нужный
 800633c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006340:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SCL_PORT, &GPIO_InitStructure); // если порт другой, то укажите нужную букву GPIOх, и ниже там все порты и пины поменяйте на своё
 8006342:	f107 030c 	add.w	r3, r7, #12
 8006346:	4619      	mov	r1, r3
 8006348:	4847      	ldr	r0, [pc, #284]	; (8006468 <I2C_ClearBusyFlagErratum+0x164>)
 800634a:	f000 fe29 	bl	8006fa0 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = SDA_PIN; // SDA
 800634e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006352:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SDA_PORT, &GPIO_InitStructure);
 8006354:	f107 030c 	add.w	r3, r7, #12
 8006358:	4619      	mov	r1, r3
 800635a:	4843      	ldr	r0, [pc, #268]	; (8006468 <I2C_ClearBusyFlagErratum+0x164>)
 800635c:	f000 fe20 	bl	8006fa0 <HAL_GPIO_Init>

    // 3. Check SCL and SDA High level in GPIOx_IDR.
    HAL_GPIO_WritePin(SDA_PORT, SDA_PIN, GPIO_PIN_SET);
 8006360:	2201      	movs	r2, #1
 8006362:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006366:	4840      	ldr	r0, [pc, #256]	; (8006468 <I2C_ClearBusyFlagErratum+0x164>)
 8006368:	f001 f89a 	bl	80074a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_SET);
 800636c:	2201      	movs	r2, #1
 800636e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006372:	483d      	ldr	r0, [pc, #244]	; (8006468 <I2C_ClearBusyFlagErratum+0x164>)
 8006374:	f001 f894 	bl	80074a0 <HAL_GPIO_WritePin>

    wait_for_gpio_state_timeout(SCL_PORT, SCL_PIN, GPIO_PIN_SET, timeout);
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	2201      	movs	r2, #1
 800637c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006380:	4839      	ldr	r0, [pc, #228]	; (8006468 <I2C_ClearBusyFlagErratum+0x164>)
 8006382:	f7ff ff8b 	bl	800629c <wait_for_gpio_state_timeout>
    wait_for_gpio_state_timeout(SDA_PORT, SDA_PIN, GPIO_PIN_SET, timeout);
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	2201      	movs	r2, #1
 800638a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800638e:	4836      	ldr	r0, [pc, #216]	; (8006468 <I2C_ClearBusyFlagErratum+0x164>)
 8006390:	f7ff ff84 	bl	800629c <wait_for_gpio_state_timeout>

    // 4. Configure the SDA I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(SDA_PORT, SDA_PIN, GPIO_PIN_RESET);
 8006394:	2200      	movs	r2, #0
 8006396:	f44f 7100 	mov.w	r1, #512	; 0x200
 800639a:	4833      	ldr	r0, [pc, #204]	; (8006468 <I2C_ClearBusyFlagErratum+0x164>)
 800639c:	f001 f880 	bl	80074a0 <HAL_GPIO_WritePin>

    // 5. Check SDA Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(SDA_PORT, SDA_PIN, GPIO_PIN_RESET, timeout);
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80063a8:	482f      	ldr	r0, [pc, #188]	; (8006468 <I2C_ClearBusyFlagErratum+0x164>)
 80063aa:	f7ff ff77 	bl	800629c <wait_for_gpio_state_timeout>

    // 6. Configure the SCL I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_RESET);
 80063ae:	2200      	movs	r2, #0
 80063b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063b4:	482c      	ldr	r0, [pc, #176]	; (8006468 <I2C_ClearBusyFlagErratum+0x164>)
 80063b6:	f001 f873 	bl	80074a0 <HAL_GPIO_WritePin>

    // 7. Check SCL Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(SCL_PORT, SCL_PIN, GPIO_PIN_RESET, timeout);
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2200      	movs	r2, #0
 80063be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063c2:	4829      	ldr	r0, [pc, #164]	; (8006468 <I2C_ClearBusyFlagErratum+0x164>)
 80063c4:	f7ff ff6a 	bl	800629c <wait_for_gpio_state_timeout>

    // 8. Configure the SCL I/O as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_SET);
 80063c8:	2201      	movs	r2, #1
 80063ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063ce:	4826      	ldr	r0, [pc, #152]	; (8006468 <I2C_ClearBusyFlagErratum+0x164>)
 80063d0:	f001 f866 	bl	80074a0 <HAL_GPIO_WritePin>

    // 9. Check SCL High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(SCL_PORT, SCL_PIN, GPIO_PIN_SET, timeout);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063dc:	4822      	ldr	r0, [pc, #136]	; (8006468 <I2C_ClearBusyFlagErratum+0x164>)
 80063de:	f7ff ff5d 	bl	800629c <wait_for_gpio_state_timeout>

    // 10. Configure the SDA I/O as General Purpose Output Open-Drain , High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(SDA_PORT, SDA_PIN, GPIO_PIN_SET);
 80063e2:	2201      	movs	r2, #1
 80063e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80063e8:	481f      	ldr	r0, [pc, #124]	; (8006468 <I2C_ClearBusyFlagErratum+0x164>)
 80063ea:	f001 f859 	bl	80074a0 <HAL_GPIO_WritePin>

    // 11. Check SDA High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(SDA_PORT, SDA_PIN, GPIO_PIN_SET, timeout);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80063f6:	481c      	ldr	r0, [pc, #112]	; (8006468 <I2C_ClearBusyFlagErratum+0x164>)
 80063f8:	f7ff ff50 	bl	800629c <wait_for_gpio_state_timeout>

    // 12. Configure the SCL and SDA I/Os as Alternate function Open-Drain.
    GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 80063fc:	2312      	movs	r3, #18
 80063fe:	613b      	str	r3, [r7, #16]
    //GPIO_InitStructure.Alternate = GPIO_AF4_I2C2; // F4

    GPIO_InitStructure.Pin = SCL_PIN;
 8006400:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006404:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SCL_PORT, &GPIO_InitStructure);
 8006406:	f107 030c 	add.w	r3, r7, #12
 800640a:	4619      	mov	r1, r3
 800640c:	4816      	ldr	r0, [pc, #88]	; (8006468 <I2C_ClearBusyFlagErratum+0x164>)
 800640e:	f000 fdc7 	bl	8006fa0 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = SDA_PIN;
 8006412:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006416:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SDA_PORT, &GPIO_InitStructure);
 8006418:	f107 030c 	add.w	r3, r7, #12
 800641c:	4619      	mov	r1, r3
 800641e:	4812      	ldr	r0, [pc, #72]	; (8006468 <I2C_ClearBusyFlagErratum+0x164>)
 8006420:	f000 fdbe 	bl	8006fa0 <HAL_GPIO_Init>

    // 13. Set SWRST bit in I2Cx_CR1 register.
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006432:	601a      	str	r2, [r3, #0]
    asm("nop");
 8006434:	bf00      	nop

    /* 14. Clear SWRST bit in I2Cx_CR1 register. */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006444:	601a      	str	r2, [r3, #0]
    asm("nop");
 8006446:	bf00      	nop

    /* 15. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_PE);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f042 0201 	orr.w	r2, r2, #1
 8006456:	601a      	str	r2, [r3, #0]
    asm("nop");
 8006458:	bf00      	nop

    // Call initialization function.
    HAL_I2C_Init(hi2c);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f001 f83a 	bl	80074d4 <HAL_I2C_Init>
}
 8006460:	bf00      	nop
 8006462:	3720      	adds	r7, #32
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	40020400 	.word	0x40020400

0800646c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006470:	4b0e      	ldr	r3, [pc, #56]	; (80064ac <HAL_Init+0x40>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a0d      	ldr	r2, [pc, #52]	; (80064ac <HAL_Init+0x40>)
 8006476:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800647a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800647c:	4b0b      	ldr	r3, [pc, #44]	; (80064ac <HAL_Init+0x40>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a0a      	ldr	r2, [pc, #40]	; (80064ac <HAL_Init+0x40>)
 8006482:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006486:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006488:	4b08      	ldr	r3, [pc, #32]	; (80064ac <HAL_Init+0x40>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a07      	ldr	r2, [pc, #28]	; (80064ac <HAL_Init+0x40>)
 800648e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006492:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006494:	2003      	movs	r0, #3
 8006496:	f000 fd41 	bl	8006f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800649a:	200f      	movs	r0, #15
 800649c:	f000 f808 	bl	80064b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80064a0:	f7fd ff1a 	bl	80042d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	40023c00 	.word	0x40023c00

080064b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80064b8:	4b12      	ldr	r3, [pc, #72]	; (8006504 <HAL_InitTick+0x54>)
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	4b12      	ldr	r3, [pc, #72]	; (8006508 <HAL_InitTick+0x58>)
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	4619      	mov	r1, r3
 80064c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80064ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ce:	4618      	mov	r0, r3
 80064d0:	f000 fd59 	bl	8006f86 <HAL_SYSTICK_Config>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e00e      	b.n	80064fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2b0f      	cmp	r3, #15
 80064e2:	d80a      	bhi.n	80064fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80064e4:	2200      	movs	r2, #0
 80064e6:	6879      	ldr	r1, [r7, #4]
 80064e8:	f04f 30ff 	mov.w	r0, #4294967295
 80064ec:	f000 fd21 	bl	8006f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80064f0:	4a06      	ldr	r2, [pc, #24]	; (800650c <HAL_InitTick+0x5c>)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
 80064f8:	e000      	b.n	80064fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3708      	adds	r7, #8
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	20000008 	.word	0x20000008
 8006508:	20000058 	.word	0x20000058
 800650c:	20000054 	.word	0x20000054

08006510 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006510:	b480      	push	{r7}
 8006512:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006514:	4b06      	ldr	r3, [pc, #24]	; (8006530 <HAL_IncTick+0x20>)
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	461a      	mov	r2, r3
 800651a:	4b06      	ldr	r3, [pc, #24]	; (8006534 <HAL_IncTick+0x24>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4413      	add	r3, r2
 8006520:	4a04      	ldr	r2, [pc, #16]	; (8006534 <HAL_IncTick+0x24>)
 8006522:	6013      	str	r3, [r2, #0]
}
 8006524:	bf00      	nop
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	20000058 	.word	0x20000058
 8006534:	20002b74 	.word	0x20002b74

08006538 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006538:	b480      	push	{r7}
 800653a:	af00      	add	r7, sp, #0
  return uwTick;
 800653c:	4b03      	ldr	r3, [pc, #12]	; (800654c <HAL_GetTick+0x14>)
 800653e:	681b      	ldr	r3, [r3, #0]
}
 8006540:	4618      	mov	r0, r3
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	20002b74 	.word	0x20002b74

08006550 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006558:	f7ff ffee 	bl	8006538 <HAL_GetTick>
 800655c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006568:	d005      	beq.n	8006576 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800656a:	4b0a      	ldr	r3, [pc, #40]	; (8006594 <HAL_Delay+0x44>)
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	461a      	mov	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	4413      	add	r3, r2
 8006574:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006576:	bf00      	nop
 8006578:	f7ff ffde 	bl	8006538 <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	429a      	cmp	r2, r3
 8006586:	d8f7      	bhi.n	8006578 <HAL_Delay+0x28>
  {
  }
}
 8006588:	bf00      	nop
 800658a:	bf00      	nop
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	20000058 	.word	0x20000058

08006598 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80065a0:	2300      	movs	r3, #0
 80065a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e033      	b.n	8006616 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d109      	bne.n	80065ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7fd feb6 	bl	8004328 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ce:	f003 0310 	and.w	r3, r3, #16
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d118      	bne.n	8006608 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80065de:	f023 0302 	bic.w	r3, r3, #2
 80065e2:	f043 0202 	orr.w	r2, r3, #2
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 faca 	bl	8006b84 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	f023 0303 	bic.w	r3, r3, #3
 80065fe:	f043 0201 	orr.w	r2, r3, #1
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	641a      	str	r2, [r3, #64]	; 0x40
 8006606:	e001      	b.n	800660c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006614:	7bfb      	ldrb	r3, [r7, #15]
}
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
	...

08006620 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006628:	2300      	movs	r3, #0
 800662a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006632:	2b01      	cmp	r3, #1
 8006634:	d101      	bne.n	800663a <HAL_ADC_Start+0x1a>
 8006636:	2302      	movs	r3, #2
 8006638:	e097      	b.n	800676a <HAL_ADC_Start+0x14a>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f003 0301 	and.w	r3, r3, #1
 800664c:	2b01      	cmp	r3, #1
 800664e:	d018      	beq.n	8006682 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689a      	ldr	r2, [r3, #8]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f042 0201 	orr.w	r2, r2, #1
 800665e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006660:	4b45      	ldr	r3, [pc, #276]	; (8006778 <HAL_ADC_Start+0x158>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a45      	ldr	r2, [pc, #276]	; (800677c <HAL_ADC_Start+0x15c>)
 8006666:	fba2 2303 	umull	r2, r3, r2, r3
 800666a:	0c9a      	lsrs	r2, r3, #18
 800666c:	4613      	mov	r3, r2
 800666e:	005b      	lsls	r3, r3, #1
 8006670:	4413      	add	r3, r2
 8006672:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006674:	e002      	b.n	800667c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	3b01      	subs	r3, #1
 800667a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1f9      	bne.n	8006676 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f003 0301 	and.w	r3, r3, #1
 800668c:	2b01      	cmp	r3, #1
 800668e:	d15f      	bne.n	8006750 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006694:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006698:	f023 0301 	bic.w	r3, r3, #1
 800669c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d007      	beq.n	80066c2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80066ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ce:	d106      	bne.n	80066de <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d4:	f023 0206 	bic.w	r2, r3, #6
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	645a      	str	r2, [r3, #68]	; 0x44
 80066dc:	e002      	b.n	80066e4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80066ec:	4b24      	ldr	r3, [pc, #144]	; (8006780 <HAL_ADC_Start+0x160>)
 80066ee:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80066f8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f003 031f 	and.w	r3, r3, #31
 8006702:	2b00      	cmp	r3, #0
 8006704:	d10f      	bne.n	8006726 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d129      	bne.n	8006768 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	689a      	ldr	r2, [r3, #8]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006722:	609a      	str	r2, [r3, #8]
 8006724:	e020      	b.n	8006768 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a16      	ldr	r2, [pc, #88]	; (8006784 <HAL_ADC_Start+0x164>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d11b      	bne.n	8006768 <HAL_ADC_Start+0x148>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d114      	bne.n	8006768 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	689a      	ldr	r2, [r3, #8]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800674c:	609a      	str	r2, [r3, #8]
 800674e:	e00b      	b.n	8006768 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006754:	f043 0210 	orr.w	r2, r3, #16
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006760:	f043 0201 	orr.w	r2, r3, #1
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3714      	adds	r7, #20
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	20000008 	.word	0x20000008
 800677c:	431bde83 	.word	0x431bde83
 8006780:	40012300 	.word	0x40012300
 8006784:	40012000 	.word	0x40012000

08006788 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006796:	2b01      	cmp	r3, #1
 8006798:	d101      	bne.n	800679e <HAL_ADC_Stop+0x16>
 800679a:	2302      	movs	r3, #2
 800679c:	e021      	b.n	80067e2 <HAL_ADC_Stop+0x5a>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	689a      	ldr	r2, [r3, #8]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f022 0201 	bic.w	r2, r2, #1
 80067b4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f003 0301 	and.w	r3, r3, #1
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d109      	bne.n	80067d8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80067cc:	f023 0301 	bic.w	r3, r3, #1
 80067d0:	f043 0201 	orr.w	r2, r3, #1
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b084      	sub	sp, #16
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80067f8:	2300      	movs	r3, #0
 80067fa:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800680a:	d113      	bne.n	8006834 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800681a:	d10b      	bne.n	8006834 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006820:	f043 0220 	orr.w	r2, r3, #32
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e063      	b.n	80068fc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006834:	f7ff fe80 	bl	8006538 <HAL_GetTick>
 8006838:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800683a:	e021      	b.n	8006880 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006842:	d01d      	beq.n	8006880 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d007      	beq.n	800685a <HAL_ADC_PollForConversion+0x6c>
 800684a:	f7ff fe75 	bl	8006538 <HAL_GetTick>
 800684e:	4602      	mov	r2, r0
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	683a      	ldr	r2, [r7, #0]
 8006856:	429a      	cmp	r2, r3
 8006858:	d212      	bcs.n	8006880 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0302 	and.w	r3, r3, #2
 8006864:	2b02      	cmp	r3, #2
 8006866:	d00b      	beq.n	8006880 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686c:	f043 0204 	orr.w	r2, r3, #4
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e03d      	b.n	80068fc <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0302 	and.w	r3, r3, #2
 800688a:	2b02      	cmp	r3, #2
 800688c:	d1d6      	bne.n	800683c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f06f 0212 	mvn.w	r2, #18
 8006896:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d123      	bne.n	80068fa <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d11f      	bne.n	80068fa <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d006      	beq.n	80068d6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d111      	bne.n	80068fa <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d105      	bne.n	80068fa <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f2:	f043 0201 	orr.w	r2, r3, #1
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006912:	4618      	mov	r0, r3
 8006914:	370c      	adds	r7, #12
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
	...

08006920 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800692a:	2300      	movs	r3, #0
 800692c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006934:	2b01      	cmp	r3, #1
 8006936:	d101      	bne.n	800693c <HAL_ADC_ConfigChannel+0x1c>
 8006938:	2302      	movs	r3, #2
 800693a:	e113      	b.n	8006b64 <HAL_ADC_ConfigChannel+0x244>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2b09      	cmp	r3, #9
 800694a:	d925      	bls.n	8006998 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68d9      	ldr	r1, [r3, #12]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	b29b      	uxth	r3, r3
 8006958:	461a      	mov	r2, r3
 800695a:	4613      	mov	r3, r2
 800695c:	005b      	lsls	r3, r3, #1
 800695e:	4413      	add	r3, r2
 8006960:	3b1e      	subs	r3, #30
 8006962:	2207      	movs	r2, #7
 8006964:	fa02 f303 	lsl.w	r3, r2, r3
 8006968:	43da      	mvns	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	400a      	ands	r2, r1
 8006970:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68d9      	ldr	r1, [r3, #12]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	689a      	ldr	r2, [r3, #8]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	b29b      	uxth	r3, r3
 8006982:	4618      	mov	r0, r3
 8006984:	4603      	mov	r3, r0
 8006986:	005b      	lsls	r3, r3, #1
 8006988:	4403      	add	r3, r0
 800698a:	3b1e      	subs	r3, #30
 800698c:	409a      	lsls	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	430a      	orrs	r2, r1
 8006994:	60da      	str	r2, [r3, #12]
 8006996:	e022      	b.n	80069de <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	6919      	ldr	r1, [r3, #16]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	461a      	mov	r2, r3
 80069a6:	4613      	mov	r3, r2
 80069a8:	005b      	lsls	r3, r3, #1
 80069aa:	4413      	add	r3, r2
 80069ac:	2207      	movs	r2, #7
 80069ae:	fa02 f303 	lsl.w	r3, r2, r3
 80069b2:	43da      	mvns	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	400a      	ands	r2, r1
 80069ba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	6919      	ldr	r1, [r3, #16]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	689a      	ldr	r2, [r3, #8]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	4618      	mov	r0, r3
 80069ce:	4603      	mov	r3, r0
 80069d0:	005b      	lsls	r3, r3, #1
 80069d2:	4403      	add	r3, r0
 80069d4:	409a      	lsls	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	2b06      	cmp	r3, #6
 80069e4:	d824      	bhi.n	8006a30 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	685a      	ldr	r2, [r3, #4]
 80069f0:	4613      	mov	r3, r2
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	3b05      	subs	r3, #5
 80069f8:	221f      	movs	r2, #31
 80069fa:	fa02 f303 	lsl.w	r3, r2, r3
 80069fe:	43da      	mvns	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	400a      	ands	r2, r1
 8006a06:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	4618      	mov	r0, r3
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	685a      	ldr	r2, [r3, #4]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4413      	add	r3, r2
 8006a20:	3b05      	subs	r3, #5
 8006a22:	fa00 f203 	lsl.w	r2, r0, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	635a      	str	r2, [r3, #52]	; 0x34
 8006a2e:	e04c      	b.n	8006aca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	2b0c      	cmp	r3, #12
 8006a36:	d824      	bhi.n	8006a82 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	685a      	ldr	r2, [r3, #4]
 8006a42:	4613      	mov	r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	4413      	add	r3, r2
 8006a48:	3b23      	subs	r3, #35	; 0x23
 8006a4a:	221f      	movs	r2, #31
 8006a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a50:	43da      	mvns	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	400a      	ands	r2, r1
 8006a58:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	4618      	mov	r0, r3
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	4413      	add	r3, r2
 8006a72:	3b23      	subs	r3, #35	; 0x23
 8006a74:	fa00 f203 	lsl.w	r2, r0, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	430a      	orrs	r2, r1
 8006a7e:	631a      	str	r2, [r3, #48]	; 0x30
 8006a80:	e023      	b.n	8006aca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	685a      	ldr	r2, [r3, #4]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	3b41      	subs	r3, #65	; 0x41
 8006a94:	221f      	movs	r2, #31
 8006a96:	fa02 f303 	lsl.w	r3, r2, r3
 8006a9a:	43da      	mvns	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	400a      	ands	r2, r1
 8006aa2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	685a      	ldr	r2, [r3, #4]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4413      	add	r3, r2
 8006abc:	3b41      	subs	r3, #65	; 0x41
 8006abe:	fa00 f203 	lsl.w	r2, r0, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006aca:	4b29      	ldr	r3, [pc, #164]	; (8006b70 <HAL_ADC_ConfigChannel+0x250>)
 8006acc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a28      	ldr	r2, [pc, #160]	; (8006b74 <HAL_ADC_ConfigChannel+0x254>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d10f      	bne.n	8006af8 <HAL_ADC_ConfigChannel+0x1d8>
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b12      	cmp	r3, #18
 8006ade:	d10b      	bne.n	8006af8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a1d      	ldr	r2, [pc, #116]	; (8006b74 <HAL_ADC_ConfigChannel+0x254>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d12b      	bne.n	8006b5a <HAL_ADC_ConfigChannel+0x23a>
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a1c      	ldr	r2, [pc, #112]	; (8006b78 <HAL_ADC_ConfigChannel+0x258>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d003      	beq.n	8006b14 <HAL_ADC_ConfigChannel+0x1f4>
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b11      	cmp	r3, #17
 8006b12:	d122      	bne.n	8006b5a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a11      	ldr	r2, [pc, #68]	; (8006b78 <HAL_ADC_ConfigChannel+0x258>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d111      	bne.n	8006b5a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006b36:	4b11      	ldr	r3, [pc, #68]	; (8006b7c <HAL_ADC_ConfigChannel+0x25c>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a11      	ldr	r2, [pc, #68]	; (8006b80 <HAL_ADC_ConfigChannel+0x260>)
 8006b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b40:	0c9a      	lsrs	r2, r3, #18
 8006b42:	4613      	mov	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	005b      	lsls	r3, r3, #1
 8006b4a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006b4c:	e002      	b.n	8006b54 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	3b01      	subs	r3, #1
 8006b52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1f9      	bne.n	8006b4e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3714      	adds	r7, #20
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr
 8006b70:	40012300 	.word	0x40012300
 8006b74:	40012000 	.word	0x40012000
 8006b78:	10000012 	.word	0x10000012
 8006b7c:	20000008 	.word	0x20000008
 8006b80:	431bde83 	.word	0x431bde83

08006b84 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006b8c:	4b79      	ldr	r3, [pc, #484]	; (8006d74 <ADC_Init+0x1f0>)
 8006b8e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	431a      	orrs	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	685a      	ldr	r2, [r3, #4]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	6859      	ldr	r1, [r3, #4]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	021a      	lsls	r2, r3, #8
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	430a      	orrs	r2, r1
 8006bcc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	685a      	ldr	r2, [r3, #4]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006bdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	6859      	ldr	r1, [r3, #4]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	689a      	ldr	r2, [r3, #8]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	430a      	orrs	r2, r1
 8006bee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	689a      	ldr	r2, [r3, #8]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	6899      	ldr	r1, [r3, #8]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68da      	ldr	r2, [r3, #12]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c16:	4a58      	ldr	r2, [pc, #352]	; (8006d78 <ADC_Init+0x1f4>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d022      	beq.n	8006c62 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689a      	ldr	r2, [r3, #8]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006c2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6899      	ldr	r1, [r3, #8]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	689a      	ldr	r2, [r3, #8]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006c4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	6899      	ldr	r1, [r3, #8]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	430a      	orrs	r2, r1
 8006c5e:	609a      	str	r2, [r3, #8]
 8006c60:	e00f      	b.n	8006c82 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	689a      	ldr	r2, [r3, #8]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006c70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	689a      	ldr	r2, [r3, #8]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006c80:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	689a      	ldr	r2, [r3, #8]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f022 0202 	bic.w	r2, r2, #2
 8006c90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	6899      	ldr	r1, [r3, #8]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	7e1b      	ldrb	r3, [r3, #24]
 8006c9c:	005a      	lsls	r2, r3, #1
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d01b      	beq.n	8006ce8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cbe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006cce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6859      	ldr	r1, [r3, #4]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	035a      	lsls	r2, r3, #13
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	605a      	str	r2, [r3, #4]
 8006ce6:	e007      	b.n	8006cf8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	685a      	ldr	r2, [r3, #4]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cf6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006d06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	69db      	ldr	r3, [r3, #28]
 8006d12:	3b01      	subs	r3, #1
 8006d14:	051a      	lsls	r2, r3, #20
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	689a      	ldr	r2, [r3, #8]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006d2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6899      	ldr	r1, [r3, #8]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d3a:	025a      	lsls	r2, r3, #9
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	430a      	orrs	r2, r1
 8006d42:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	689a      	ldr	r2, [r3, #8]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	6899      	ldr	r1, [r3, #8]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	029a      	lsls	r2, r3, #10
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	430a      	orrs	r2, r1
 8006d66:	609a      	str	r2, [r3, #8]
}
 8006d68:	bf00      	nop
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr
 8006d74:	40012300 	.word	0x40012300
 8006d78:	0f000001 	.word	0x0f000001

08006d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f003 0307 	and.w	r3, r3, #7
 8006d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d8c:	4b0c      	ldr	r3, [pc, #48]	; (8006dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d92:	68ba      	ldr	r2, [r7, #8]
 8006d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006d98:	4013      	ands	r3, r2
 8006d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006da4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006dae:	4a04      	ldr	r2, [pc, #16]	; (8006dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	60d3      	str	r3, [r2, #12]
}
 8006db4:	bf00      	nop
 8006db6:	3714      	adds	r7, #20
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr
 8006dc0:	e000ed00 	.word	0xe000ed00

08006dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006dc8:	4b04      	ldr	r3, [pc, #16]	; (8006ddc <__NVIC_GetPriorityGrouping+0x18>)
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	0a1b      	lsrs	r3, r3, #8
 8006dce:	f003 0307 	and.w	r3, r3, #7
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr
 8006ddc:	e000ed00 	.word	0xe000ed00

08006de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	4603      	mov	r3, r0
 8006de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	db0b      	blt.n	8006e0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006df2:	79fb      	ldrb	r3, [r7, #7]
 8006df4:	f003 021f 	and.w	r2, r3, #31
 8006df8:	4907      	ldr	r1, [pc, #28]	; (8006e18 <__NVIC_EnableIRQ+0x38>)
 8006dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dfe:	095b      	lsrs	r3, r3, #5
 8006e00:	2001      	movs	r0, #1
 8006e02:	fa00 f202 	lsl.w	r2, r0, r2
 8006e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006e0a:	bf00      	nop
 8006e0c:	370c      	adds	r7, #12
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	e000e100 	.word	0xe000e100

08006e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	4603      	mov	r3, r0
 8006e24:	6039      	str	r1, [r7, #0]
 8006e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	db0a      	blt.n	8006e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	b2da      	uxtb	r2, r3
 8006e34:	490c      	ldr	r1, [pc, #48]	; (8006e68 <__NVIC_SetPriority+0x4c>)
 8006e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e3a:	0112      	lsls	r2, r2, #4
 8006e3c:	b2d2      	uxtb	r2, r2
 8006e3e:	440b      	add	r3, r1
 8006e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006e44:	e00a      	b.n	8006e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	b2da      	uxtb	r2, r3
 8006e4a:	4908      	ldr	r1, [pc, #32]	; (8006e6c <__NVIC_SetPriority+0x50>)
 8006e4c:	79fb      	ldrb	r3, [r7, #7]
 8006e4e:	f003 030f 	and.w	r3, r3, #15
 8006e52:	3b04      	subs	r3, #4
 8006e54:	0112      	lsls	r2, r2, #4
 8006e56:	b2d2      	uxtb	r2, r2
 8006e58:	440b      	add	r3, r1
 8006e5a:	761a      	strb	r2, [r3, #24]
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	e000e100 	.word	0xe000e100
 8006e6c:	e000ed00 	.word	0xe000ed00

08006e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b089      	sub	sp, #36	; 0x24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f003 0307 	and.w	r3, r3, #7
 8006e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	f1c3 0307 	rsb	r3, r3, #7
 8006e8a:	2b04      	cmp	r3, #4
 8006e8c:	bf28      	it	cs
 8006e8e:	2304      	movcs	r3, #4
 8006e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	3304      	adds	r3, #4
 8006e96:	2b06      	cmp	r3, #6
 8006e98:	d902      	bls.n	8006ea0 <NVIC_EncodePriority+0x30>
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	3b03      	subs	r3, #3
 8006e9e:	e000      	b.n	8006ea2 <NVIC_EncodePriority+0x32>
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8006eae:	43da      	mvns	r2, r3
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	401a      	ands	r2, r3
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8006ec2:	43d9      	mvns	r1, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ec8:	4313      	orrs	r3, r2
         );
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3724      	adds	r7, #36	; 0x24
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
	...

08006ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ee8:	d301      	bcc.n	8006eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006eea:	2301      	movs	r3, #1
 8006eec:	e00f      	b.n	8006f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006eee:	4a0a      	ldr	r2, [pc, #40]	; (8006f18 <SysTick_Config+0x40>)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006ef6:	210f      	movs	r1, #15
 8006ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8006efc:	f7ff ff8e 	bl	8006e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f00:	4b05      	ldr	r3, [pc, #20]	; (8006f18 <SysTick_Config+0x40>)
 8006f02:	2200      	movs	r2, #0
 8006f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f06:	4b04      	ldr	r3, [pc, #16]	; (8006f18 <SysTick_Config+0x40>)
 8006f08:	2207      	movs	r2, #7
 8006f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	e000e010 	.word	0xe000e010

08006f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f7ff ff29 	bl	8006d7c <__NVIC_SetPriorityGrouping>
}
 8006f2a:	bf00      	nop
 8006f2c:	3708      	adds	r7, #8
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b086      	sub	sp, #24
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	4603      	mov	r3, r0
 8006f3a:	60b9      	str	r1, [r7, #8]
 8006f3c:	607a      	str	r2, [r7, #4]
 8006f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006f40:	2300      	movs	r3, #0
 8006f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006f44:	f7ff ff3e 	bl	8006dc4 <__NVIC_GetPriorityGrouping>
 8006f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	68b9      	ldr	r1, [r7, #8]
 8006f4e:	6978      	ldr	r0, [r7, #20]
 8006f50:	f7ff ff8e 	bl	8006e70 <NVIC_EncodePriority>
 8006f54:	4602      	mov	r2, r0
 8006f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f5a:	4611      	mov	r1, r2
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7ff ff5d 	bl	8006e1c <__NVIC_SetPriority>
}
 8006f62:	bf00      	nop
 8006f64:	3718      	adds	r7, #24
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b082      	sub	sp, #8
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	4603      	mov	r3, r0
 8006f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7ff ff31 	bl	8006de0 <__NVIC_EnableIRQ>
}
 8006f7e:	bf00      	nop
 8006f80:	3708      	adds	r7, #8
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b082      	sub	sp, #8
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f7ff ffa2 	bl	8006ed8 <SysTick_Config>
 8006f94:	4603      	mov	r3, r0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
	...

08006fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b089      	sub	sp, #36	; 0x24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006faa:	2300      	movs	r3, #0
 8006fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	61fb      	str	r3, [r7, #28]
 8006fba:	e159      	b.n	8007270 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	4013      	ands	r3, r2
 8006fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	f040 8148 	bne.w	800726a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f003 0303 	and.w	r3, r3, #3
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d005      	beq.n	8006ff2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d130      	bne.n	8007054 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	005b      	lsls	r3, r3, #1
 8006ffc:	2203      	movs	r2, #3
 8006ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8007002:	43db      	mvns	r3, r3
 8007004:	69ba      	ldr	r2, [r7, #24]
 8007006:	4013      	ands	r3, r2
 8007008:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	68da      	ldr	r2, [r3, #12]
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	005b      	lsls	r3, r3, #1
 8007012:	fa02 f303 	lsl.w	r3, r2, r3
 8007016:	69ba      	ldr	r2, [r7, #24]
 8007018:	4313      	orrs	r3, r2
 800701a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	69ba      	ldr	r2, [r7, #24]
 8007020:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007028:	2201      	movs	r2, #1
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	fa02 f303 	lsl.w	r3, r2, r3
 8007030:	43db      	mvns	r3, r3
 8007032:	69ba      	ldr	r2, [r7, #24]
 8007034:	4013      	ands	r3, r2
 8007036:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	091b      	lsrs	r3, r3, #4
 800703e:	f003 0201 	and.w	r2, r3, #1
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	fa02 f303 	lsl.w	r3, r2, r3
 8007048:	69ba      	ldr	r2, [r7, #24]
 800704a:	4313      	orrs	r3, r2
 800704c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	69ba      	ldr	r2, [r7, #24]
 8007052:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	f003 0303 	and.w	r3, r3, #3
 800705c:	2b03      	cmp	r3, #3
 800705e:	d017      	beq.n	8007090 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	005b      	lsls	r3, r3, #1
 800706a:	2203      	movs	r2, #3
 800706c:	fa02 f303 	lsl.w	r3, r2, r3
 8007070:	43db      	mvns	r3, r3
 8007072:	69ba      	ldr	r2, [r7, #24]
 8007074:	4013      	ands	r3, r2
 8007076:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	689a      	ldr	r2, [r3, #8]
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	005b      	lsls	r3, r3, #1
 8007080:	fa02 f303 	lsl.w	r3, r2, r3
 8007084:	69ba      	ldr	r2, [r7, #24]
 8007086:	4313      	orrs	r3, r2
 8007088:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	69ba      	ldr	r2, [r7, #24]
 800708e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f003 0303 	and.w	r3, r3, #3
 8007098:	2b02      	cmp	r3, #2
 800709a:	d123      	bne.n	80070e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	08da      	lsrs	r2, r3, #3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	3208      	adds	r2, #8
 80070a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	f003 0307 	and.w	r3, r3, #7
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	220f      	movs	r2, #15
 80070b4:	fa02 f303 	lsl.w	r3, r2, r3
 80070b8:	43db      	mvns	r3, r3
 80070ba:	69ba      	ldr	r2, [r7, #24]
 80070bc:	4013      	ands	r3, r2
 80070be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	691a      	ldr	r2, [r3, #16]
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	f003 0307 	and.w	r3, r3, #7
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	fa02 f303 	lsl.w	r3, r2, r3
 80070d0:	69ba      	ldr	r2, [r7, #24]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	08da      	lsrs	r2, r3, #3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	3208      	adds	r2, #8
 80070de:	69b9      	ldr	r1, [r7, #24]
 80070e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	005b      	lsls	r3, r3, #1
 80070ee:	2203      	movs	r2, #3
 80070f0:	fa02 f303 	lsl.w	r3, r2, r3
 80070f4:	43db      	mvns	r3, r3
 80070f6:	69ba      	ldr	r2, [r7, #24]
 80070f8:	4013      	ands	r3, r2
 80070fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f003 0203 	and.w	r2, r3, #3
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	005b      	lsls	r3, r3, #1
 8007108:	fa02 f303 	lsl.w	r3, r2, r3
 800710c:	69ba      	ldr	r2, [r7, #24]
 800710e:	4313      	orrs	r3, r2
 8007110:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	69ba      	ldr	r2, [r7, #24]
 8007116:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007120:	2b00      	cmp	r3, #0
 8007122:	f000 80a2 	beq.w	800726a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007126:	2300      	movs	r3, #0
 8007128:	60fb      	str	r3, [r7, #12]
 800712a:	4b57      	ldr	r3, [pc, #348]	; (8007288 <HAL_GPIO_Init+0x2e8>)
 800712c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800712e:	4a56      	ldr	r2, [pc, #344]	; (8007288 <HAL_GPIO_Init+0x2e8>)
 8007130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007134:	6453      	str	r3, [r2, #68]	; 0x44
 8007136:	4b54      	ldr	r3, [pc, #336]	; (8007288 <HAL_GPIO_Init+0x2e8>)
 8007138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800713a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800713e:	60fb      	str	r3, [r7, #12]
 8007140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007142:	4a52      	ldr	r2, [pc, #328]	; (800728c <HAL_GPIO_Init+0x2ec>)
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	089b      	lsrs	r3, r3, #2
 8007148:	3302      	adds	r3, #2
 800714a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800714e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	f003 0303 	and.w	r3, r3, #3
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	220f      	movs	r2, #15
 800715a:	fa02 f303 	lsl.w	r3, r2, r3
 800715e:	43db      	mvns	r3, r3
 8007160:	69ba      	ldr	r2, [r7, #24]
 8007162:	4013      	ands	r3, r2
 8007164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a49      	ldr	r2, [pc, #292]	; (8007290 <HAL_GPIO_Init+0x2f0>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d019      	beq.n	80071a2 <HAL_GPIO_Init+0x202>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a48      	ldr	r2, [pc, #288]	; (8007294 <HAL_GPIO_Init+0x2f4>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d013      	beq.n	800719e <HAL_GPIO_Init+0x1fe>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a47      	ldr	r2, [pc, #284]	; (8007298 <HAL_GPIO_Init+0x2f8>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d00d      	beq.n	800719a <HAL_GPIO_Init+0x1fa>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a46      	ldr	r2, [pc, #280]	; (800729c <HAL_GPIO_Init+0x2fc>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d007      	beq.n	8007196 <HAL_GPIO_Init+0x1f6>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a45      	ldr	r2, [pc, #276]	; (80072a0 <HAL_GPIO_Init+0x300>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d101      	bne.n	8007192 <HAL_GPIO_Init+0x1f2>
 800718e:	2304      	movs	r3, #4
 8007190:	e008      	b.n	80071a4 <HAL_GPIO_Init+0x204>
 8007192:	2307      	movs	r3, #7
 8007194:	e006      	b.n	80071a4 <HAL_GPIO_Init+0x204>
 8007196:	2303      	movs	r3, #3
 8007198:	e004      	b.n	80071a4 <HAL_GPIO_Init+0x204>
 800719a:	2302      	movs	r3, #2
 800719c:	e002      	b.n	80071a4 <HAL_GPIO_Init+0x204>
 800719e:	2301      	movs	r3, #1
 80071a0:	e000      	b.n	80071a4 <HAL_GPIO_Init+0x204>
 80071a2:	2300      	movs	r3, #0
 80071a4:	69fa      	ldr	r2, [r7, #28]
 80071a6:	f002 0203 	and.w	r2, r2, #3
 80071aa:	0092      	lsls	r2, r2, #2
 80071ac:	4093      	lsls	r3, r2
 80071ae:	69ba      	ldr	r2, [r7, #24]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80071b4:	4935      	ldr	r1, [pc, #212]	; (800728c <HAL_GPIO_Init+0x2ec>)
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	089b      	lsrs	r3, r3, #2
 80071ba:	3302      	adds	r3, #2
 80071bc:	69ba      	ldr	r2, [r7, #24]
 80071be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80071c2:	4b38      	ldr	r3, [pc, #224]	; (80072a4 <HAL_GPIO_Init+0x304>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	43db      	mvns	r3, r3
 80071cc:	69ba      	ldr	r2, [r7, #24]
 80071ce:	4013      	ands	r3, r2
 80071d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d003      	beq.n	80071e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80071de:	69ba      	ldr	r2, [r7, #24]
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80071e6:	4a2f      	ldr	r2, [pc, #188]	; (80072a4 <HAL_GPIO_Init+0x304>)
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80071ec:	4b2d      	ldr	r3, [pc, #180]	; (80072a4 <HAL_GPIO_Init+0x304>)
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	43db      	mvns	r3, r3
 80071f6:	69ba      	ldr	r2, [r7, #24]
 80071f8:	4013      	ands	r3, r2
 80071fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d003      	beq.n	8007210 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007208:	69ba      	ldr	r2, [r7, #24]
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	4313      	orrs	r3, r2
 800720e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007210:	4a24      	ldr	r2, [pc, #144]	; (80072a4 <HAL_GPIO_Init+0x304>)
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007216:	4b23      	ldr	r3, [pc, #140]	; (80072a4 <HAL_GPIO_Init+0x304>)
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	43db      	mvns	r3, r3
 8007220:	69ba      	ldr	r2, [r7, #24]
 8007222:	4013      	ands	r3, r2
 8007224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d003      	beq.n	800723a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007232:	69ba      	ldr	r2, [r7, #24]
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	4313      	orrs	r3, r2
 8007238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800723a:	4a1a      	ldr	r2, [pc, #104]	; (80072a4 <HAL_GPIO_Init+0x304>)
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007240:	4b18      	ldr	r3, [pc, #96]	; (80072a4 <HAL_GPIO_Init+0x304>)
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	43db      	mvns	r3, r3
 800724a:	69ba      	ldr	r2, [r7, #24]
 800724c:	4013      	ands	r3, r2
 800724e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800725c:	69ba      	ldr	r2, [r7, #24]
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	4313      	orrs	r3, r2
 8007262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007264:	4a0f      	ldr	r2, [pc, #60]	; (80072a4 <HAL_GPIO_Init+0x304>)
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	3301      	adds	r3, #1
 800726e:	61fb      	str	r3, [r7, #28]
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	2b0f      	cmp	r3, #15
 8007274:	f67f aea2 	bls.w	8006fbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007278:	bf00      	nop
 800727a:	bf00      	nop
 800727c:	3724      	adds	r7, #36	; 0x24
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	40023800 	.word	0x40023800
 800728c:	40013800 	.word	0x40013800
 8007290:	40020000 	.word	0x40020000
 8007294:	40020400 	.word	0x40020400
 8007298:	40020800 	.word	0x40020800
 800729c:	40020c00 	.word	0x40020c00
 80072a0:	40021000 	.word	0x40021000
 80072a4:	40013c00 	.word	0x40013c00

080072a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b087      	sub	sp, #28
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80072b2:	2300      	movs	r3, #0
 80072b4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80072b6:	2300      	movs	r3, #0
 80072b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80072ba:	2300      	movs	r3, #0
 80072bc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80072be:	2300      	movs	r3, #0
 80072c0:	617b      	str	r3, [r7, #20]
 80072c2:	e0bb      	b.n	800743c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80072c4:	2201      	movs	r2, #1
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	fa02 f303 	lsl.w	r3, r2, r3
 80072cc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	4013      	ands	r3, r2
 80072d4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	429a      	cmp	r2, r3
 80072dc:	f040 80ab 	bne.w	8007436 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80072e0:	4a5c      	ldr	r2, [pc, #368]	; (8007454 <HAL_GPIO_DeInit+0x1ac>)
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	089b      	lsrs	r3, r3, #2
 80072e6:	3302      	adds	r3, #2
 80072e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072ec:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f003 0303 	and.w	r3, r3, #3
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	220f      	movs	r2, #15
 80072f8:	fa02 f303 	lsl.w	r3, r2, r3
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	4013      	ands	r3, r2
 8007300:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a54      	ldr	r2, [pc, #336]	; (8007458 <HAL_GPIO_DeInit+0x1b0>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d019      	beq.n	800733e <HAL_GPIO_DeInit+0x96>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a53      	ldr	r2, [pc, #332]	; (800745c <HAL_GPIO_DeInit+0x1b4>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d013      	beq.n	800733a <HAL_GPIO_DeInit+0x92>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a52      	ldr	r2, [pc, #328]	; (8007460 <HAL_GPIO_DeInit+0x1b8>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d00d      	beq.n	8007336 <HAL_GPIO_DeInit+0x8e>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a51      	ldr	r2, [pc, #324]	; (8007464 <HAL_GPIO_DeInit+0x1bc>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d007      	beq.n	8007332 <HAL_GPIO_DeInit+0x8a>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a50      	ldr	r2, [pc, #320]	; (8007468 <HAL_GPIO_DeInit+0x1c0>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d101      	bne.n	800732e <HAL_GPIO_DeInit+0x86>
 800732a:	2304      	movs	r3, #4
 800732c:	e008      	b.n	8007340 <HAL_GPIO_DeInit+0x98>
 800732e:	2307      	movs	r3, #7
 8007330:	e006      	b.n	8007340 <HAL_GPIO_DeInit+0x98>
 8007332:	2303      	movs	r3, #3
 8007334:	e004      	b.n	8007340 <HAL_GPIO_DeInit+0x98>
 8007336:	2302      	movs	r3, #2
 8007338:	e002      	b.n	8007340 <HAL_GPIO_DeInit+0x98>
 800733a:	2301      	movs	r3, #1
 800733c:	e000      	b.n	8007340 <HAL_GPIO_DeInit+0x98>
 800733e:	2300      	movs	r3, #0
 8007340:	697a      	ldr	r2, [r7, #20]
 8007342:	f002 0203 	and.w	r2, r2, #3
 8007346:	0092      	lsls	r2, r2, #2
 8007348:	4093      	lsls	r3, r2
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	429a      	cmp	r2, r3
 800734e:	d132      	bne.n	80073b6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007350:	4b46      	ldr	r3, [pc, #280]	; (800746c <HAL_GPIO_DeInit+0x1c4>)
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	43db      	mvns	r3, r3
 8007358:	4944      	ldr	r1, [pc, #272]	; (800746c <HAL_GPIO_DeInit+0x1c4>)
 800735a:	4013      	ands	r3, r2
 800735c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800735e:	4b43      	ldr	r3, [pc, #268]	; (800746c <HAL_GPIO_DeInit+0x1c4>)
 8007360:	685a      	ldr	r2, [r3, #4]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	43db      	mvns	r3, r3
 8007366:	4941      	ldr	r1, [pc, #260]	; (800746c <HAL_GPIO_DeInit+0x1c4>)
 8007368:	4013      	ands	r3, r2
 800736a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800736c:	4b3f      	ldr	r3, [pc, #252]	; (800746c <HAL_GPIO_DeInit+0x1c4>)
 800736e:	689a      	ldr	r2, [r3, #8]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	43db      	mvns	r3, r3
 8007374:	493d      	ldr	r1, [pc, #244]	; (800746c <HAL_GPIO_DeInit+0x1c4>)
 8007376:	4013      	ands	r3, r2
 8007378:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800737a:	4b3c      	ldr	r3, [pc, #240]	; (800746c <HAL_GPIO_DeInit+0x1c4>)
 800737c:	68da      	ldr	r2, [r3, #12]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	43db      	mvns	r3, r3
 8007382:	493a      	ldr	r1, [pc, #232]	; (800746c <HAL_GPIO_DeInit+0x1c4>)
 8007384:	4013      	ands	r3, r2
 8007386:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	f003 0303 	and.w	r3, r3, #3
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	220f      	movs	r2, #15
 8007392:	fa02 f303 	lsl.w	r3, r2, r3
 8007396:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007398:	4a2e      	ldr	r2, [pc, #184]	; (8007454 <HAL_GPIO_DeInit+0x1ac>)
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	089b      	lsrs	r3, r3, #2
 800739e:	3302      	adds	r3, #2
 80073a0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	43da      	mvns	r2, r3
 80073a8:	482a      	ldr	r0, [pc, #168]	; (8007454 <HAL_GPIO_DeInit+0x1ac>)
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	089b      	lsrs	r3, r3, #2
 80073ae:	400a      	ands	r2, r1
 80073b0:	3302      	adds	r3, #2
 80073b2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	005b      	lsls	r3, r3, #1
 80073be:	2103      	movs	r1, #3
 80073c0:	fa01 f303 	lsl.w	r3, r1, r3
 80073c4:	43db      	mvns	r3, r3
 80073c6:	401a      	ands	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	08da      	lsrs	r2, r3, #3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	3208      	adds	r2, #8
 80073d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	f003 0307 	and.w	r3, r3, #7
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	220f      	movs	r2, #15
 80073e2:	fa02 f303 	lsl.w	r3, r2, r3
 80073e6:	43db      	mvns	r3, r3
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	08d2      	lsrs	r2, r2, #3
 80073ec:	4019      	ands	r1, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	3208      	adds	r2, #8
 80073f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	68da      	ldr	r2, [r3, #12]
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	005b      	lsls	r3, r3, #1
 80073fe:	2103      	movs	r1, #3
 8007400:	fa01 f303 	lsl.w	r3, r1, r3
 8007404:	43db      	mvns	r3, r3
 8007406:	401a      	ands	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685a      	ldr	r2, [r3, #4]
 8007410:	2101      	movs	r1, #1
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	fa01 f303 	lsl.w	r3, r1, r3
 8007418:	43db      	mvns	r3, r3
 800741a:	401a      	ands	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	689a      	ldr	r2, [r3, #8]
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	005b      	lsls	r3, r3, #1
 8007428:	2103      	movs	r1, #3
 800742a:	fa01 f303 	lsl.w	r3, r1, r3
 800742e:	43db      	mvns	r3, r3
 8007430:	401a      	ands	r2, r3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	3301      	adds	r3, #1
 800743a:	617b      	str	r3, [r7, #20]
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	2b0f      	cmp	r3, #15
 8007440:	f67f af40 	bls.w	80072c4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007444:	bf00      	nop
 8007446:	bf00      	nop
 8007448:	371c      	adds	r7, #28
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	40013800 	.word	0x40013800
 8007458:	40020000 	.word	0x40020000
 800745c:	40020400 	.word	0x40020400
 8007460:	40020800 	.word	0x40020800
 8007464:	40020c00 	.word	0x40020c00
 8007468:	40021000 	.word	0x40021000
 800746c:	40013c00 	.word	0x40013c00

08007470 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	460b      	mov	r3, r1
 800747a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	691a      	ldr	r2, [r3, #16]
 8007480:	887b      	ldrh	r3, [r7, #2]
 8007482:	4013      	ands	r3, r2
 8007484:	2b00      	cmp	r3, #0
 8007486:	d002      	beq.n	800748e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007488:	2301      	movs	r3, #1
 800748a:	73fb      	strb	r3, [r7, #15]
 800748c:	e001      	b.n	8007492 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800748e:	2300      	movs	r3, #0
 8007490:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007492:	7bfb      	ldrb	r3, [r7, #15]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3714      	adds	r7, #20
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	460b      	mov	r3, r1
 80074aa:	807b      	strh	r3, [r7, #2]
 80074ac:	4613      	mov	r3, r2
 80074ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80074b0:	787b      	ldrb	r3, [r7, #1]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d003      	beq.n	80074be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80074b6:	887a      	ldrh	r2, [r7, #2]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80074bc:	e003      	b.n	80074c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80074be:	887b      	ldrh	r3, [r7, #2]
 80074c0:	041a      	lsls	r2, r3, #16
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	619a      	str	r2, [r3, #24]
}
 80074c6:	bf00      	nop
 80074c8:	370c      	adds	r7, #12
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
	...

080074d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d101      	bne.n	80074e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e12b      	b.n	800773e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d106      	bne.n	8007500 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f7fc ff58 	bl	80043b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2224      	movs	r2, #36	; 0x24
 8007504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f022 0201 	bic.w	r2, r2, #1
 8007516:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007526:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007536:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007538:	f001 fbdc 	bl	8008cf4 <HAL_RCC_GetPCLK1Freq>
 800753c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	4a81      	ldr	r2, [pc, #516]	; (8007748 <HAL_I2C_Init+0x274>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d807      	bhi.n	8007558 <HAL_I2C_Init+0x84>
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	4a80      	ldr	r2, [pc, #512]	; (800774c <HAL_I2C_Init+0x278>)
 800754c:	4293      	cmp	r3, r2
 800754e:	bf94      	ite	ls
 8007550:	2301      	movls	r3, #1
 8007552:	2300      	movhi	r3, #0
 8007554:	b2db      	uxtb	r3, r3
 8007556:	e006      	b.n	8007566 <HAL_I2C_Init+0x92>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	4a7d      	ldr	r2, [pc, #500]	; (8007750 <HAL_I2C_Init+0x27c>)
 800755c:	4293      	cmp	r3, r2
 800755e:	bf94      	ite	ls
 8007560:	2301      	movls	r3, #1
 8007562:	2300      	movhi	r3, #0
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b00      	cmp	r3, #0
 8007568:	d001      	beq.n	800756e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	e0e7      	b.n	800773e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	4a78      	ldr	r2, [pc, #480]	; (8007754 <HAL_I2C_Init+0x280>)
 8007572:	fba2 2303 	umull	r2, r3, r2, r3
 8007576:	0c9b      	lsrs	r3, r3, #18
 8007578:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	430a      	orrs	r2, r1
 800758c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	6a1b      	ldr	r3, [r3, #32]
 8007594:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	4a6a      	ldr	r2, [pc, #424]	; (8007748 <HAL_I2C_Init+0x274>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d802      	bhi.n	80075a8 <HAL_I2C_Init+0xd4>
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	3301      	adds	r3, #1
 80075a6:	e009      	b.n	80075bc <HAL_I2C_Init+0xe8>
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80075ae:	fb02 f303 	mul.w	r3, r2, r3
 80075b2:	4a69      	ldr	r2, [pc, #420]	; (8007758 <HAL_I2C_Init+0x284>)
 80075b4:	fba2 2303 	umull	r2, r3, r2, r3
 80075b8:	099b      	lsrs	r3, r3, #6
 80075ba:	3301      	adds	r3, #1
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	6812      	ldr	r2, [r2, #0]
 80075c0:	430b      	orrs	r3, r1
 80075c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	69db      	ldr	r3, [r3, #28]
 80075ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80075ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	495c      	ldr	r1, [pc, #368]	; (8007748 <HAL_I2C_Init+0x274>)
 80075d8:	428b      	cmp	r3, r1
 80075da:	d819      	bhi.n	8007610 <HAL_I2C_Init+0x13c>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	1e59      	subs	r1, r3, #1
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	005b      	lsls	r3, r3, #1
 80075e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80075ea:	1c59      	adds	r1, r3, #1
 80075ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80075f0:	400b      	ands	r3, r1
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00a      	beq.n	800760c <HAL_I2C_Init+0x138>
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	1e59      	subs	r1, r3, #1
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	005b      	lsls	r3, r3, #1
 8007600:	fbb1 f3f3 	udiv	r3, r1, r3
 8007604:	3301      	adds	r3, #1
 8007606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800760a:	e051      	b.n	80076b0 <HAL_I2C_Init+0x1dc>
 800760c:	2304      	movs	r3, #4
 800760e:	e04f      	b.n	80076b0 <HAL_I2C_Init+0x1dc>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d111      	bne.n	800763c <HAL_I2C_Init+0x168>
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	1e58      	subs	r0, r3, #1
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6859      	ldr	r1, [r3, #4]
 8007620:	460b      	mov	r3, r1
 8007622:	005b      	lsls	r3, r3, #1
 8007624:	440b      	add	r3, r1
 8007626:	fbb0 f3f3 	udiv	r3, r0, r3
 800762a:	3301      	adds	r3, #1
 800762c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007630:	2b00      	cmp	r3, #0
 8007632:	bf0c      	ite	eq
 8007634:	2301      	moveq	r3, #1
 8007636:	2300      	movne	r3, #0
 8007638:	b2db      	uxtb	r3, r3
 800763a:	e012      	b.n	8007662 <HAL_I2C_Init+0x18e>
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	1e58      	subs	r0, r3, #1
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6859      	ldr	r1, [r3, #4]
 8007644:	460b      	mov	r3, r1
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	440b      	add	r3, r1
 800764a:	0099      	lsls	r1, r3, #2
 800764c:	440b      	add	r3, r1
 800764e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007652:	3301      	adds	r3, #1
 8007654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007658:	2b00      	cmp	r3, #0
 800765a:	bf0c      	ite	eq
 800765c:	2301      	moveq	r3, #1
 800765e:	2300      	movne	r3, #0
 8007660:	b2db      	uxtb	r3, r3
 8007662:	2b00      	cmp	r3, #0
 8007664:	d001      	beq.n	800766a <HAL_I2C_Init+0x196>
 8007666:	2301      	movs	r3, #1
 8007668:	e022      	b.n	80076b0 <HAL_I2C_Init+0x1dc>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10e      	bne.n	8007690 <HAL_I2C_Init+0x1bc>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	1e58      	subs	r0, r3, #1
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6859      	ldr	r1, [r3, #4]
 800767a:	460b      	mov	r3, r1
 800767c:	005b      	lsls	r3, r3, #1
 800767e:	440b      	add	r3, r1
 8007680:	fbb0 f3f3 	udiv	r3, r0, r3
 8007684:	3301      	adds	r3, #1
 8007686:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800768a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800768e:	e00f      	b.n	80076b0 <HAL_I2C_Init+0x1dc>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	1e58      	subs	r0, r3, #1
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6859      	ldr	r1, [r3, #4]
 8007698:	460b      	mov	r3, r1
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	440b      	add	r3, r1
 800769e:	0099      	lsls	r1, r3, #2
 80076a0:	440b      	add	r3, r1
 80076a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80076a6:	3301      	adds	r3, #1
 80076a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076b0:	6879      	ldr	r1, [r7, #4]
 80076b2:	6809      	ldr	r1, [r1, #0]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	69da      	ldr	r2, [r3, #28]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	431a      	orrs	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	430a      	orrs	r2, r1
 80076d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80076de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	6911      	ldr	r1, [r2, #16]
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	68d2      	ldr	r2, [r2, #12]
 80076ea:	4311      	orrs	r1, r2
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	6812      	ldr	r2, [r2, #0]
 80076f0:	430b      	orrs	r3, r1
 80076f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	695a      	ldr	r2, [r3, #20]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	431a      	orrs	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	430a      	orrs	r2, r1
 800770e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f042 0201 	orr.w	r2, r2, #1
 800771e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2220      	movs	r2, #32
 800772a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	000186a0 	.word	0x000186a0
 800774c:	001e847f 	.word	0x001e847f
 8007750:	003d08ff 	.word	0x003d08ff
 8007754:	431bde83 	.word	0x431bde83
 8007758:	10624dd3 	.word	0x10624dd3

0800775c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d101      	bne.n	800776e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e021      	b.n	80077b2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2224      	movs	r2, #36	; 0x24
 8007772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f022 0201 	bic.w	r2, r2, #1
 8007784:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f7fc fe5a 	bl	8004440 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3708      	adds	r7, #8
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
	...

080077bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b088      	sub	sp, #32
 80077c0:	af02      	add	r7, sp, #8
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	4608      	mov	r0, r1
 80077c6:	4611      	mov	r1, r2
 80077c8:	461a      	mov	r2, r3
 80077ca:	4603      	mov	r3, r0
 80077cc:	817b      	strh	r3, [r7, #10]
 80077ce:	460b      	mov	r3, r1
 80077d0:	813b      	strh	r3, [r7, #8]
 80077d2:	4613      	mov	r3, r2
 80077d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80077d6:	f7fe feaf 	bl	8006538 <HAL_GetTick>
 80077da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	2b20      	cmp	r3, #32
 80077e6:	f040 80d9 	bne.w	800799c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	9300      	str	r3, [sp, #0]
 80077ee:	2319      	movs	r3, #25
 80077f0:	2201      	movs	r2, #1
 80077f2:	496d      	ldr	r1, [pc, #436]	; (80079a8 <HAL_I2C_Mem_Write+0x1ec>)
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f000 fc7f 	bl	80080f8 <I2C_WaitOnFlagUntilTimeout>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d001      	beq.n	8007804 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007800:	2302      	movs	r3, #2
 8007802:	e0cc      	b.n	800799e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800780a:	2b01      	cmp	r3, #1
 800780c:	d101      	bne.n	8007812 <HAL_I2C_Mem_Write+0x56>
 800780e:	2302      	movs	r3, #2
 8007810:	e0c5      	b.n	800799e <HAL_I2C_Mem_Write+0x1e2>
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 0301 	and.w	r3, r3, #1
 8007824:	2b01      	cmp	r3, #1
 8007826:	d007      	beq.n	8007838 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f042 0201 	orr.w	r2, r2, #1
 8007836:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007846:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2221      	movs	r2, #33	; 0x21
 800784c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2240      	movs	r2, #64	; 0x40
 8007854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2200      	movs	r2, #0
 800785c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6a3a      	ldr	r2, [r7, #32]
 8007862:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007868:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800786e:	b29a      	uxth	r2, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	4a4d      	ldr	r2, [pc, #308]	; (80079ac <HAL_I2C_Mem_Write+0x1f0>)
 8007878:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800787a:	88f8      	ldrh	r0, [r7, #6]
 800787c:	893a      	ldrh	r2, [r7, #8]
 800787e:	8979      	ldrh	r1, [r7, #10]
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	9301      	str	r3, [sp, #4]
 8007884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007886:	9300      	str	r3, [sp, #0]
 8007888:	4603      	mov	r3, r0
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f000 fab6 	bl	8007dfc <I2C_RequestMemoryWrite>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d052      	beq.n	800793c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	e081      	b.n	800799e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800789a:	697a      	ldr	r2, [r7, #20]
 800789c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f000 fd00 	bl	80082a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00d      	beq.n	80078c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ae:	2b04      	cmp	r3, #4
 80078b0:	d107      	bne.n	80078c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	e06b      	b.n	800799e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ca:	781a      	ldrb	r2, [r3, #0]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d6:	1c5a      	adds	r2, r3, #1
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078e0:	3b01      	subs	r3, #1
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	3b01      	subs	r3, #1
 80078f0:	b29a      	uxth	r2, r3
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	695b      	ldr	r3, [r3, #20]
 80078fc:	f003 0304 	and.w	r3, r3, #4
 8007900:	2b04      	cmp	r3, #4
 8007902:	d11b      	bne.n	800793c <HAL_I2C_Mem_Write+0x180>
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007908:	2b00      	cmp	r3, #0
 800790a:	d017      	beq.n	800793c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007910:	781a      	ldrb	r2, [r3, #0]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791c:	1c5a      	adds	r2, r3, #1
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007926:	3b01      	subs	r3, #1
 8007928:	b29a      	uxth	r2, r3
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007932:	b29b      	uxth	r3, r3
 8007934:	3b01      	subs	r3, #1
 8007936:	b29a      	uxth	r2, r3
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1aa      	bne.n	800789a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007944:	697a      	ldr	r2, [r7, #20]
 8007946:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f000 fcec 	bl	8008326 <I2C_WaitOnBTFFlagUntilTimeout>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00d      	beq.n	8007970 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007958:	2b04      	cmp	r3, #4
 800795a:	d107      	bne.n	800796c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800796a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e016      	b.n	800799e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800797e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2220      	movs	r2, #32
 8007984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2200      	movs	r2, #0
 8007994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007998:	2300      	movs	r3, #0
 800799a:	e000      	b.n	800799e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800799c:	2302      	movs	r3, #2
  }
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3718      	adds	r7, #24
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	00100002 	.word	0x00100002
 80079ac:	ffff0000 	.word	0xffff0000

080079b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b08c      	sub	sp, #48	; 0x30
 80079b4:	af02      	add	r7, sp, #8
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	4608      	mov	r0, r1
 80079ba:	4611      	mov	r1, r2
 80079bc:	461a      	mov	r2, r3
 80079be:	4603      	mov	r3, r0
 80079c0:	817b      	strh	r3, [r7, #10]
 80079c2:	460b      	mov	r3, r1
 80079c4:	813b      	strh	r3, [r7, #8]
 80079c6:	4613      	mov	r3, r2
 80079c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80079ca:	f7fe fdb5 	bl	8006538 <HAL_GetTick>
 80079ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	2b20      	cmp	r3, #32
 80079da:	f040 8208 	bne.w	8007dee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80079de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e0:	9300      	str	r3, [sp, #0]
 80079e2:	2319      	movs	r3, #25
 80079e4:	2201      	movs	r2, #1
 80079e6:	497b      	ldr	r1, [pc, #492]	; (8007bd4 <HAL_I2C_Mem_Read+0x224>)
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f000 fb85 	bl	80080f8 <I2C_WaitOnFlagUntilTimeout>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d001      	beq.n	80079f8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80079f4:	2302      	movs	r3, #2
 80079f6:	e1fb      	b.n	8007df0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d101      	bne.n	8007a06 <HAL_I2C_Mem_Read+0x56>
 8007a02:	2302      	movs	r3, #2
 8007a04:	e1f4      	b.n	8007df0 <HAL_I2C_Mem_Read+0x440>
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 0301 	and.w	r3, r3, #1
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d007      	beq.n	8007a2c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f042 0201 	orr.w	r2, r2, #1
 8007a2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2222      	movs	r2, #34	; 0x22
 8007a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2240      	movs	r2, #64	; 0x40
 8007a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	4a5b      	ldr	r2, [pc, #364]	; (8007bd8 <HAL_I2C_Mem_Read+0x228>)
 8007a6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007a6e:	88f8      	ldrh	r0, [r7, #6]
 8007a70:	893a      	ldrh	r2, [r7, #8]
 8007a72:	8979      	ldrh	r1, [r7, #10]
 8007a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a76:	9301      	str	r3, [sp, #4]
 8007a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7a:	9300      	str	r3, [sp, #0]
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f000 fa52 	bl	8007f28 <I2C_RequestMemoryRead>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e1b0      	b.n	8007df0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d113      	bne.n	8007abe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a96:	2300      	movs	r3, #0
 8007a98:	623b      	str	r3, [r7, #32]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	695b      	ldr	r3, [r3, #20]
 8007aa0:	623b      	str	r3, [r7, #32]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	699b      	ldr	r3, [r3, #24]
 8007aa8:	623b      	str	r3, [r7, #32]
 8007aaa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007aba:	601a      	str	r2, [r3, #0]
 8007abc:	e184      	b.n	8007dc8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d11b      	bne.n	8007afe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ad4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	61fb      	str	r3, [r7, #28]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	695b      	ldr	r3, [r3, #20]
 8007ae0:	61fb      	str	r3, [r7, #28]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	61fb      	str	r3, [r7, #28]
 8007aea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007afa:	601a      	str	r2, [r3, #0]
 8007afc:	e164      	b.n	8007dc8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d11b      	bne.n	8007b3e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b26:	2300      	movs	r3, #0
 8007b28:	61bb      	str	r3, [r7, #24]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	61bb      	str	r3, [r7, #24]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	61bb      	str	r3, [r7, #24]
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	e144      	b.n	8007dc8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b3e:	2300      	movs	r3, #0
 8007b40:	617b      	str	r3, [r7, #20]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	695b      	ldr	r3, [r3, #20]
 8007b48:	617b      	str	r3, [r7, #20]
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	699b      	ldr	r3, [r3, #24]
 8007b50:	617b      	str	r3, [r7, #20]
 8007b52:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007b54:	e138      	b.n	8007dc8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b5a:	2b03      	cmp	r3, #3
 8007b5c:	f200 80f1 	bhi.w	8007d42 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d123      	bne.n	8007bb0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f000 fc1b 	bl	80083a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d001      	beq.n	8007b7c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e139      	b.n	8007df0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	691a      	ldr	r2, [r3, #16]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b86:	b2d2      	uxtb	r2, r2
 8007b88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8e:	1c5a      	adds	r2, r3, #1
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	3b01      	subs	r3, #1
 8007ba8:	b29a      	uxth	r2, r3
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007bae:	e10b      	b.n	8007dc8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	d14e      	bne.n	8007c56 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bba:	9300      	str	r3, [sp, #0]
 8007bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	4906      	ldr	r1, [pc, #24]	; (8007bdc <HAL_I2C_Mem_Read+0x22c>)
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f000 fa98 	bl	80080f8 <I2C_WaitOnFlagUntilTimeout>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d008      	beq.n	8007be0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e10e      	b.n	8007df0 <HAL_I2C_Mem_Read+0x440>
 8007bd2:	bf00      	nop
 8007bd4:	00100002 	.word	0x00100002
 8007bd8:	ffff0000 	.word	0xffff0000
 8007bdc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	691a      	ldr	r2, [r3, #16]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfa:	b2d2      	uxtb	r2, r2
 8007bfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c02:	1c5a      	adds	r2, r3, #1
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	b29a      	uxth	r2, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	691a      	ldr	r2, [r3, #16]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2c:	b2d2      	uxtb	r2, r2
 8007c2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c34:	1c5a      	adds	r2, r3, #1
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	b29a      	uxth	r2, r3
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	b29a      	uxth	r2, r3
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c54:	e0b8      	b.n	8007dc8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c58:	9300      	str	r3, [sp, #0]
 8007c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	4966      	ldr	r1, [pc, #408]	; (8007df8 <HAL_I2C_Mem_Read+0x448>)
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f000 fa49 	bl	80080f8 <I2C_WaitOnFlagUntilTimeout>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d001      	beq.n	8007c70 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e0bf      	b.n	8007df0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	691a      	ldr	r2, [r3, #16]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8a:	b2d2      	uxtb	r2, r2
 8007c8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c92:	1c5a      	adds	r2, r3, #1
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	3b01      	subs	r3, #1
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb4:	9300      	str	r3, [sp, #0]
 8007cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb8:	2200      	movs	r2, #0
 8007cba:	494f      	ldr	r1, [pc, #316]	; (8007df8 <HAL_I2C_Mem_Read+0x448>)
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f000 fa1b 	bl	80080f8 <I2C_WaitOnFlagUntilTimeout>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d001      	beq.n	8007ccc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e091      	b.n	8007df0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	691a      	ldr	r2, [r3, #16]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce6:	b2d2      	uxtb	r2, r2
 8007ce8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cee:	1c5a      	adds	r2, r3, #1
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	b29a      	uxth	r2, r3
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	3b01      	subs	r3, #1
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	691a      	ldr	r2, [r3, #16]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d18:	b2d2      	uxtb	r2, r2
 8007d1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d20:	1c5a      	adds	r2, r3, #1
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007d40:	e042      	b.n	8007dc8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	f000 fb2e 	bl	80083a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d001      	beq.n	8007d56 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e04c      	b.n	8007df0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	691a      	ldr	r2, [r3, #16]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d60:	b2d2      	uxtb	r2, r2
 8007d62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d68:	1c5a      	adds	r2, r3, #1
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d72:	3b01      	subs	r3, #1
 8007d74:	b29a      	uxth	r2, r3
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	3b01      	subs	r3, #1
 8007d82:	b29a      	uxth	r2, r3
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	695b      	ldr	r3, [r3, #20]
 8007d8e:	f003 0304 	and.w	r3, r3, #4
 8007d92:	2b04      	cmp	r3, #4
 8007d94:	d118      	bne.n	8007dc8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	691a      	ldr	r2, [r3, #16]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da0:	b2d2      	uxtb	r2, r2
 8007da2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da8:	1c5a      	adds	r2, r3, #1
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007db2:	3b01      	subs	r3, #1
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f47f aec2 	bne.w	8007b56 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2220      	movs	r2, #32
 8007dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	e000      	b.n	8007df0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007dee:	2302      	movs	r3, #2
  }
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3728      	adds	r7, #40	; 0x28
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	00010004 	.word	0x00010004

08007dfc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b088      	sub	sp, #32
 8007e00:	af02      	add	r7, sp, #8
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	4608      	mov	r0, r1
 8007e06:	4611      	mov	r1, r2
 8007e08:	461a      	mov	r2, r3
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	817b      	strh	r3, [r7, #10]
 8007e0e:	460b      	mov	r3, r1
 8007e10:	813b      	strh	r3, [r7, #8]
 8007e12:	4613      	mov	r3, r2
 8007e14:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e28:	9300      	str	r3, [sp, #0]
 8007e2a:	6a3b      	ldr	r3, [r7, #32]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f000 f960 	bl	80080f8 <I2C_WaitOnFlagUntilTimeout>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00d      	beq.n	8007e5a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e4c:	d103      	bne.n	8007e56 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007e56:	2303      	movs	r3, #3
 8007e58:	e05f      	b.n	8007f1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007e5a:	897b      	ldrh	r3, [r7, #10]
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	461a      	mov	r2, r3
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007e68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6c:	6a3a      	ldr	r2, [r7, #32]
 8007e6e:	492d      	ldr	r1, [pc, #180]	; (8007f24 <I2C_RequestMemoryWrite+0x128>)
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f000 f998 	bl	80081a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d001      	beq.n	8007e80 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e04c      	b.n	8007f1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e80:	2300      	movs	r3, #0
 8007e82:	617b      	str	r3, [r7, #20]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	617b      	str	r3, [r7, #20]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	617b      	str	r3, [r7, #20]
 8007e94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e98:	6a39      	ldr	r1, [r7, #32]
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f000 fa02 	bl	80082a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00d      	beq.n	8007ec2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eaa:	2b04      	cmp	r3, #4
 8007eac:	d107      	bne.n	8007ebe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ebc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e02b      	b.n	8007f1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007ec2:	88fb      	ldrh	r3, [r7, #6]
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d105      	bne.n	8007ed4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007ec8:	893b      	ldrh	r3, [r7, #8]
 8007eca:	b2da      	uxtb	r2, r3
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	611a      	str	r2, [r3, #16]
 8007ed2:	e021      	b.n	8007f18 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007ed4:	893b      	ldrh	r3, [r7, #8]
 8007ed6:	0a1b      	lsrs	r3, r3, #8
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	b2da      	uxtb	r2, r3
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ee4:	6a39      	ldr	r1, [r7, #32]
 8007ee6:	68f8      	ldr	r0, [r7, #12]
 8007ee8:	f000 f9dc 	bl	80082a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d00d      	beq.n	8007f0e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef6:	2b04      	cmp	r3, #4
 8007ef8:	d107      	bne.n	8007f0a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e005      	b.n	8007f1a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007f0e:	893b      	ldrh	r3, [r7, #8]
 8007f10:	b2da      	uxtb	r2, r3
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3718      	adds	r7, #24
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	00010002 	.word	0x00010002

08007f28 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b088      	sub	sp, #32
 8007f2c:	af02      	add	r7, sp, #8
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	4608      	mov	r0, r1
 8007f32:	4611      	mov	r1, r2
 8007f34:	461a      	mov	r2, r3
 8007f36:	4603      	mov	r3, r0
 8007f38:	817b      	strh	r3, [r7, #10]
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	813b      	strh	r3, [r7, #8]
 8007f3e:	4613      	mov	r3, r2
 8007f40:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f50:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f64:	9300      	str	r3, [sp, #0]
 8007f66:	6a3b      	ldr	r3, [r7, #32]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f000 f8c2 	bl	80080f8 <I2C_WaitOnFlagUntilTimeout>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00d      	beq.n	8007f96 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f88:	d103      	bne.n	8007f92 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007f92:	2303      	movs	r3, #3
 8007f94:	e0aa      	b.n	80080ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007f96:	897b      	ldrh	r3, [r7, #10]
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007fa4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa8:	6a3a      	ldr	r2, [r7, #32]
 8007faa:	4952      	ldr	r1, [pc, #328]	; (80080f4 <I2C_RequestMemoryRead+0x1cc>)
 8007fac:	68f8      	ldr	r0, [r7, #12]
 8007fae:	f000 f8fa 	bl	80081a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d001      	beq.n	8007fbc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e097      	b.n	80080ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	617b      	str	r3, [r7, #20]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	695b      	ldr	r3, [r3, #20]
 8007fc6:	617b      	str	r3, [r7, #20]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	617b      	str	r3, [r7, #20]
 8007fd0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fd4:	6a39      	ldr	r1, [r7, #32]
 8007fd6:	68f8      	ldr	r0, [r7, #12]
 8007fd8:	f000 f964 	bl	80082a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00d      	beq.n	8007ffe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe6:	2b04      	cmp	r3, #4
 8007fe8:	d107      	bne.n	8007ffa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ff8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e076      	b.n	80080ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007ffe:	88fb      	ldrh	r3, [r7, #6]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d105      	bne.n	8008010 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008004:	893b      	ldrh	r3, [r7, #8]
 8008006:	b2da      	uxtb	r2, r3
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	611a      	str	r2, [r3, #16]
 800800e:	e021      	b.n	8008054 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008010:	893b      	ldrh	r3, [r7, #8]
 8008012:	0a1b      	lsrs	r3, r3, #8
 8008014:	b29b      	uxth	r3, r3
 8008016:	b2da      	uxtb	r2, r3
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800801e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008020:	6a39      	ldr	r1, [r7, #32]
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f000 f93e 	bl	80082a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00d      	beq.n	800804a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008032:	2b04      	cmp	r3, #4
 8008034:	d107      	bne.n	8008046 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008044:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e050      	b.n	80080ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800804a:	893b      	ldrh	r3, [r7, #8]
 800804c:	b2da      	uxtb	r2, r3
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008056:	6a39      	ldr	r1, [r7, #32]
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	f000 f923 	bl	80082a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00d      	beq.n	8008080 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008068:	2b04      	cmp	r3, #4
 800806a:	d107      	bne.n	800807c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800807a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	e035      	b.n	80080ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800808e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	9300      	str	r3, [sp, #0]
 8008094:	6a3b      	ldr	r3, [r7, #32]
 8008096:	2200      	movs	r2, #0
 8008098:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f000 f82b 	bl	80080f8 <I2C_WaitOnFlagUntilTimeout>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00d      	beq.n	80080c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080b6:	d103      	bne.n	80080c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e013      	b.n	80080ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80080c4:	897b      	ldrh	r3, [r7, #10]
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	f043 0301 	orr.w	r3, r3, #1
 80080cc:	b2da      	uxtb	r2, r3
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80080d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d6:	6a3a      	ldr	r2, [r7, #32]
 80080d8:	4906      	ldr	r1, [pc, #24]	; (80080f4 <I2C_RequestMemoryRead+0x1cc>)
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	f000 f863 	bl	80081a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d001      	beq.n	80080ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	e000      	b.n	80080ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3718      	adds	r7, #24
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	00010002 	.word	0x00010002

080080f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	603b      	str	r3, [r7, #0]
 8008104:	4613      	mov	r3, r2
 8008106:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008108:	e025      	b.n	8008156 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008110:	d021      	beq.n	8008156 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008112:	f7fe fa11 	bl	8006538 <HAL_GetTick>
 8008116:	4602      	mov	r2, r0
 8008118:	69bb      	ldr	r3, [r7, #24]
 800811a:	1ad3      	subs	r3, r2, r3
 800811c:	683a      	ldr	r2, [r7, #0]
 800811e:	429a      	cmp	r2, r3
 8008120:	d302      	bcc.n	8008128 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d116      	bne.n	8008156 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2200      	movs	r2, #0
 800812c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2220      	movs	r2, #32
 8008132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2200      	movs	r2, #0
 800813a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008142:	f043 0220 	orr.w	r2, r3, #32
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	e023      	b.n	800819e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	0c1b      	lsrs	r3, r3, #16
 800815a:	b2db      	uxtb	r3, r3
 800815c:	2b01      	cmp	r3, #1
 800815e:	d10d      	bne.n	800817c <I2C_WaitOnFlagUntilTimeout+0x84>
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	695b      	ldr	r3, [r3, #20]
 8008166:	43da      	mvns	r2, r3
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	4013      	ands	r3, r2
 800816c:	b29b      	uxth	r3, r3
 800816e:	2b00      	cmp	r3, #0
 8008170:	bf0c      	ite	eq
 8008172:	2301      	moveq	r3, #1
 8008174:	2300      	movne	r3, #0
 8008176:	b2db      	uxtb	r3, r3
 8008178:	461a      	mov	r2, r3
 800817a:	e00c      	b.n	8008196 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	43da      	mvns	r2, r3
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	4013      	ands	r3, r2
 8008188:	b29b      	uxth	r3, r3
 800818a:	2b00      	cmp	r3, #0
 800818c:	bf0c      	ite	eq
 800818e:	2301      	moveq	r3, #1
 8008190:	2300      	movne	r3, #0
 8008192:	b2db      	uxtb	r3, r3
 8008194:	461a      	mov	r2, r3
 8008196:	79fb      	ldrb	r3, [r7, #7]
 8008198:	429a      	cmp	r2, r3
 800819a:	d0b6      	beq.n	800810a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b084      	sub	sp, #16
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	60f8      	str	r0, [r7, #12]
 80081ae:	60b9      	str	r1, [r7, #8]
 80081b0:	607a      	str	r2, [r7, #4]
 80081b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80081b4:	e051      	b.n	800825a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	695b      	ldr	r3, [r3, #20]
 80081bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081c4:	d123      	bne.n	800820e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80081de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2200      	movs	r2, #0
 80081e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2220      	movs	r2, #32
 80081ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fa:	f043 0204 	orr.w	r2, r3, #4
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e046      	b.n	800829c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008214:	d021      	beq.n	800825a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008216:	f7fe f98f 	bl	8006538 <HAL_GetTick>
 800821a:	4602      	mov	r2, r0
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	429a      	cmp	r2, r3
 8008224:	d302      	bcc.n	800822c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d116      	bne.n	800825a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2200      	movs	r2, #0
 8008230:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2220      	movs	r2, #32
 8008236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2200      	movs	r2, #0
 800823e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008246:	f043 0220 	orr.w	r2, r3, #32
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2200      	movs	r2, #0
 8008252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	e020      	b.n	800829c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	0c1b      	lsrs	r3, r3, #16
 800825e:	b2db      	uxtb	r3, r3
 8008260:	2b01      	cmp	r3, #1
 8008262:	d10c      	bne.n	800827e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	695b      	ldr	r3, [r3, #20]
 800826a:	43da      	mvns	r2, r3
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	4013      	ands	r3, r2
 8008270:	b29b      	uxth	r3, r3
 8008272:	2b00      	cmp	r3, #0
 8008274:	bf14      	ite	ne
 8008276:	2301      	movne	r3, #1
 8008278:	2300      	moveq	r3, #0
 800827a:	b2db      	uxtb	r3, r3
 800827c:	e00b      	b.n	8008296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	699b      	ldr	r3, [r3, #24]
 8008284:	43da      	mvns	r2, r3
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	4013      	ands	r3, r2
 800828a:	b29b      	uxth	r3, r3
 800828c:	2b00      	cmp	r3, #0
 800828e:	bf14      	ite	ne
 8008290:	2301      	movne	r3, #1
 8008292:	2300      	moveq	r3, #0
 8008294:	b2db      	uxtb	r3, r3
 8008296:	2b00      	cmp	r3, #0
 8008298:	d18d      	bne.n	80081b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80082b0:	e02d      	b.n	800830e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f000 f8ce 	bl	8008454 <I2C_IsAcknowledgeFailed>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d001      	beq.n	80082c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	e02d      	b.n	800831e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c8:	d021      	beq.n	800830e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082ca:	f7fe f935 	bl	8006538 <HAL_GetTick>
 80082ce:	4602      	mov	r2, r0
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	1ad3      	subs	r3, r2, r3
 80082d4:	68ba      	ldr	r2, [r7, #8]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d302      	bcc.n	80082e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d116      	bne.n	800830e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2200      	movs	r2, #0
 80082e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2220      	movs	r2, #32
 80082ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082fa:	f043 0220 	orr.w	r2, r3, #32
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	e007      	b.n	800831e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	695b      	ldr	r3, [r3, #20]
 8008314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008318:	2b80      	cmp	r3, #128	; 0x80
 800831a:	d1ca      	bne.n	80082b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b084      	sub	sp, #16
 800832a:	af00      	add	r7, sp, #0
 800832c:	60f8      	str	r0, [r7, #12]
 800832e:	60b9      	str	r1, [r7, #8]
 8008330:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008332:	e02d      	b.n	8008390 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f000 f88d 	bl	8008454 <I2C_IsAcknowledgeFailed>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d001      	beq.n	8008344 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	e02d      	b.n	80083a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800834a:	d021      	beq.n	8008390 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800834c:	f7fe f8f4 	bl	8006538 <HAL_GetTick>
 8008350:	4602      	mov	r2, r0
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	429a      	cmp	r2, r3
 800835a:	d302      	bcc.n	8008362 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d116      	bne.n	8008390 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2200      	movs	r2, #0
 8008366:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2220      	movs	r2, #32
 800836c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2200      	movs	r2, #0
 8008374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837c:	f043 0220 	orr.w	r2, r3, #32
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2200      	movs	r2, #0
 8008388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	e007      	b.n	80083a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	695b      	ldr	r3, [r3, #20]
 8008396:	f003 0304 	and.w	r3, r3, #4
 800839a:	2b04      	cmp	r3, #4
 800839c:	d1ca      	bne.n	8008334 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80083b4:	e042      	b.n	800843c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	695b      	ldr	r3, [r3, #20]
 80083bc:	f003 0310 	and.w	r3, r3, #16
 80083c0:	2b10      	cmp	r3, #16
 80083c2:	d119      	bne.n	80083f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f06f 0210 	mvn.w	r2, #16
 80083cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2220      	movs	r2, #32
 80083d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2200      	movs	r2, #0
 80083e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	e029      	b.n	800844c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083f8:	f7fe f89e 	bl	8006538 <HAL_GetTick>
 80083fc:	4602      	mov	r2, r0
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	68ba      	ldr	r2, [r7, #8]
 8008404:	429a      	cmp	r2, r3
 8008406:	d302      	bcc.n	800840e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d116      	bne.n	800843c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2200      	movs	r2, #0
 8008412:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2220      	movs	r2, #32
 8008418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2200      	movs	r2, #0
 8008420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008428:	f043 0220 	orr.w	r2, r3, #32
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2200      	movs	r2, #0
 8008434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	e007      	b.n	800844c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	695b      	ldr	r3, [r3, #20]
 8008442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008446:	2b40      	cmp	r3, #64	; 0x40
 8008448:	d1b5      	bne.n	80083b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800844a:	2300      	movs	r3, #0
}
 800844c:	4618      	mov	r0, r3
 800844e:	3710      	adds	r7, #16
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	695b      	ldr	r3, [r3, #20]
 8008462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800846a:	d11b      	bne.n	80084a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008474:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2220      	movs	r2, #32
 8008480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008490:	f043 0204 	orr.w	r2, r3, #4
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e000      	b.n	80084a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	370c      	adds	r7, #12
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
	...

080084b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b086      	sub	sp, #24
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d101      	bne.n	80084c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e264      	b.n	8008990 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 0301 	and.w	r3, r3, #1
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d075      	beq.n	80085be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80084d2:	4ba3      	ldr	r3, [pc, #652]	; (8008760 <HAL_RCC_OscConfig+0x2ac>)
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	f003 030c 	and.w	r3, r3, #12
 80084da:	2b04      	cmp	r3, #4
 80084dc:	d00c      	beq.n	80084f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80084de:	4ba0      	ldr	r3, [pc, #640]	; (8008760 <HAL_RCC_OscConfig+0x2ac>)
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80084e6:	2b08      	cmp	r3, #8
 80084e8:	d112      	bne.n	8008510 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80084ea:	4b9d      	ldr	r3, [pc, #628]	; (8008760 <HAL_RCC_OscConfig+0x2ac>)
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084f6:	d10b      	bne.n	8008510 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084f8:	4b99      	ldr	r3, [pc, #612]	; (8008760 <HAL_RCC_OscConfig+0x2ac>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008500:	2b00      	cmp	r3, #0
 8008502:	d05b      	beq.n	80085bc <HAL_RCC_OscConfig+0x108>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d157      	bne.n	80085bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	e23f      	b.n	8008990 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008518:	d106      	bne.n	8008528 <HAL_RCC_OscConfig+0x74>
 800851a:	4b91      	ldr	r3, [pc, #580]	; (8008760 <HAL_RCC_OscConfig+0x2ac>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a90      	ldr	r2, [pc, #576]	; (8008760 <HAL_RCC_OscConfig+0x2ac>)
 8008520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008524:	6013      	str	r3, [r2, #0]
 8008526:	e01d      	b.n	8008564 <HAL_RCC_OscConfig+0xb0>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008530:	d10c      	bne.n	800854c <HAL_RCC_OscConfig+0x98>
 8008532:	4b8b      	ldr	r3, [pc, #556]	; (8008760 <HAL_RCC_OscConfig+0x2ac>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a8a      	ldr	r2, [pc, #552]	; (8008760 <HAL_RCC_OscConfig+0x2ac>)
 8008538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800853c:	6013      	str	r3, [r2, #0]
 800853e:	4b88      	ldr	r3, [pc, #544]	; (8008760 <HAL_RCC_OscConfig+0x2ac>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a87      	ldr	r2, [pc, #540]	; (8008760 <HAL_RCC_OscConfig+0x2ac>)
 8008544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008548:	6013      	str	r3, [r2, #0]
 800854a:	e00b      	b.n	8008564 <HAL_RCC_OscConfig+0xb0>
 800854c:	4b84      	ldr	r3, [pc, #528]	; (8008760 <HAL_RCC_OscConfig+0x2ac>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a83      	ldr	r2, [pc, #524]	; (8008760 <HAL_RCC_OscConfig+0x2ac>)
 8008552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008556:	6013      	str	r3, [r2, #0]
 8008558:	4b81      	ldr	r3, [pc, #516]	; (8008760 <HAL_RCC_OscConfig+0x2ac>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a80      	ldr	r2, [pc, #512]	; (8008760 <HAL_RCC_OscConfig+0x2ac>)
 800855e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d013      	beq.n	8008594 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800856c:	f7fd ffe4 	bl	8006538 <HAL_GetTick>
 8008570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008572:	e008      	b.n	8008586 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008574:	f7fd ffe0 	bl	8006538 <HAL_GetTick>
 8008578:	4602      	mov	r2, r0
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	1ad3      	subs	r3, r2, r3
 800857e:	2b64      	cmp	r3, #100	; 0x64
 8008580:	d901      	bls.n	8008586 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008582:	2303      	movs	r3, #3
 8008584:	e204      	b.n	8008990 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008586:	4b76      	ldr	r3, [pc, #472]	; (8008760 <HAL_RCC_OscConfig+0x2ac>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800858e:	2b00      	cmp	r3, #0
 8008590:	d0f0      	beq.n	8008574 <HAL_RCC_OscConfig+0xc0>
 8008592:	e014      	b.n	80085be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008594:	f7fd ffd0 	bl	8006538 <HAL_GetTick>
 8008598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800859a:	e008      	b.n	80085ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800859c:	f7fd ffcc 	bl	8006538 <HAL_GetTick>
 80085a0:	4602      	mov	r2, r0
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	1ad3      	subs	r3, r2, r3
 80085a6:	2b64      	cmp	r3, #100	; 0x64
 80085a8:	d901      	bls.n	80085ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80085aa:	2303      	movs	r3, #3
 80085ac:	e1f0      	b.n	8008990 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085ae:	4b6c      	ldr	r3, [pc, #432]	; (8008760 <HAL_RCC_OscConfig+0x2ac>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d1f0      	bne.n	800859c <HAL_RCC_OscConfig+0xe8>
 80085ba:	e000      	b.n	80085be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 0302 	and.w	r3, r3, #2
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d063      	beq.n	8008692 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80085ca:	4b65      	ldr	r3, [pc, #404]	; (8008760 <HAL_RCC_OscConfig+0x2ac>)
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	f003 030c 	and.w	r3, r3, #12
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00b      	beq.n	80085ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80085d6:	4b62      	ldr	r3, [pc, #392]	; (8008760 <HAL_RCC_OscConfig+0x2ac>)
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80085de:	2b08      	cmp	r3, #8
 80085e0:	d11c      	bne.n	800861c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80085e2:	4b5f      	ldr	r3, [pc, #380]	; (8008760 <HAL_RCC_OscConfig+0x2ac>)
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d116      	bne.n	800861c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80085ee:	4b5c      	ldr	r3, [pc, #368]	; (8008760 <HAL_RCC_OscConfig+0x2ac>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 0302 	and.w	r3, r3, #2
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d005      	beq.n	8008606 <HAL_RCC_OscConfig+0x152>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d001      	beq.n	8008606 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	e1c4      	b.n	8008990 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008606:	4b56      	ldr	r3, [pc, #344]	; (8008760 <HAL_RCC_OscConfig+0x2ac>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	691b      	ldr	r3, [r3, #16]
 8008612:	00db      	lsls	r3, r3, #3
 8008614:	4952      	ldr	r1, [pc, #328]	; (8008760 <HAL_RCC_OscConfig+0x2ac>)
 8008616:	4313      	orrs	r3, r2
 8008618:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800861a:	e03a      	b.n	8008692 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d020      	beq.n	8008666 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008624:	4b4f      	ldr	r3, [pc, #316]	; (8008764 <HAL_RCC_OscConfig+0x2b0>)
 8008626:	2201      	movs	r2, #1
 8008628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800862a:	f7fd ff85 	bl	8006538 <HAL_GetTick>
 800862e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008630:	e008      	b.n	8008644 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008632:	f7fd ff81 	bl	8006538 <HAL_GetTick>
 8008636:	4602      	mov	r2, r0
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	1ad3      	subs	r3, r2, r3
 800863c:	2b02      	cmp	r3, #2
 800863e:	d901      	bls.n	8008644 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008640:	2303      	movs	r3, #3
 8008642:	e1a5      	b.n	8008990 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008644:	4b46      	ldr	r3, [pc, #280]	; (8008760 <HAL_RCC_OscConfig+0x2ac>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f003 0302 	and.w	r3, r3, #2
 800864c:	2b00      	cmp	r3, #0
 800864e:	d0f0      	beq.n	8008632 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008650:	4b43      	ldr	r3, [pc, #268]	; (8008760 <HAL_RCC_OscConfig+0x2ac>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	00db      	lsls	r3, r3, #3
 800865e:	4940      	ldr	r1, [pc, #256]	; (8008760 <HAL_RCC_OscConfig+0x2ac>)
 8008660:	4313      	orrs	r3, r2
 8008662:	600b      	str	r3, [r1, #0]
 8008664:	e015      	b.n	8008692 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008666:	4b3f      	ldr	r3, [pc, #252]	; (8008764 <HAL_RCC_OscConfig+0x2b0>)
 8008668:	2200      	movs	r2, #0
 800866a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800866c:	f7fd ff64 	bl	8006538 <HAL_GetTick>
 8008670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008672:	e008      	b.n	8008686 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008674:	f7fd ff60 	bl	8006538 <HAL_GetTick>
 8008678:	4602      	mov	r2, r0
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	2b02      	cmp	r3, #2
 8008680:	d901      	bls.n	8008686 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008682:	2303      	movs	r3, #3
 8008684:	e184      	b.n	8008990 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008686:	4b36      	ldr	r3, [pc, #216]	; (8008760 <HAL_RCC_OscConfig+0x2ac>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f003 0302 	and.w	r3, r3, #2
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1f0      	bne.n	8008674 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f003 0308 	and.w	r3, r3, #8
 800869a:	2b00      	cmp	r3, #0
 800869c:	d030      	beq.n	8008700 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	695b      	ldr	r3, [r3, #20]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d016      	beq.n	80086d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80086a6:	4b30      	ldr	r3, [pc, #192]	; (8008768 <HAL_RCC_OscConfig+0x2b4>)
 80086a8:	2201      	movs	r2, #1
 80086aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086ac:	f7fd ff44 	bl	8006538 <HAL_GetTick>
 80086b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086b2:	e008      	b.n	80086c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086b4:	f7fd ff40 	bl	8006538 <HAL_GetTick>
 80086b8:	4602      	mov	r2, r0
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d901      	bls.n	80086c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80086c2:	2303      	movs	r3, #3
 80086c4:	e164      	b.n	8008990 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086c6:	4b26      	ldr	r3, [pc, #152]	; (8008760 <HAL_RCC_OscConfig+0x2ac>)
 80086c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086ca:	f003 0302 	and.w	r3, r3, #2
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d0f0      	beq.n	80086b4 <HAL_RCC_OscConfig+0x200>
 80086d2:	e015      	b.n	8008700 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80086d4:	4b24      	ldr	r3, [pc, #144]	; (8008768 <HAL_RCC_OscConfig+0x2b4>)
 80086d6:	2200      	movs	r2, #0
 80086d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086da:	f7fd ff2d 	bl	8006538 <HAL_GetTick>
 80086de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80086e0:	e008      	b.n	80086f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086e2:	f7fd ff29 	bl	8006538 <HAL_GetTick>
 80086e6:	4602      	mov	r2, r0
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	1ad3      	subs	r3, r2, r3
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d901      	bls.n	80086f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80086f0:	2303      	movs	r3, #3
 80086f2:	e14d      	b.n	8008990 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80086f4:	4b1a      	ldr	r3, [pc, #104]	; (8008760 <HAL_RCC_OscConfig+0x2ac>)
 80086f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086f8:	f003 0302 	and.w	r3, r3, #2
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d1f0      	bne.n	80086e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f003 0304 	and.w	r3, r3, #4
 8008708:	2b00      	cmp	r3, #0
 800870a:	f000 80a0 	beq.w	800884e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800870e:	2300      	movs	r3, #0
 8008710:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008712:	4b13      	ldr	r3, [pc, #76]	; (8008760 <HAL_RCC_OscConfig+0x2ac>)
 8008714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800871a:	2b00      	cmp	r3, #0
 800871c:	d10f      	bne.n	800873e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800871e:	2300      	movs	r3, #0
 8008720:	60bb      	str	r3, [r7, #8]
 8008722:	4b0f      	ldr	r3, [pc, #60]	; (8008760 <HAL_RCC_OscConfig+0x2ac>)
 8008724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008726:	4a0e      	ldr	r2, [pc, #56]	; (8008760 <HAL_RCC_OscConfig+0x2ac>)
 8008728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800872c:	6413      	str	r3, [r2, #64]	; 0x40
 800872e:	4b0c      	ldr	r3, [pc, #48]	; (8008760 <HAL_RCC_OscConfig+0x2ac>)
 8008730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008736:	60bb      	str	r3, [r7, #8]
 8008738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800873a:	2301      	movs	r3, #1
 800873c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800873e:	4b0b      	ldr	r3, [pc, #44]	; (800876c <HAL_RCC_OscConfig+0x2b8>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008746:	2b00      	cmp	r3, #0
 8008748:	d121      	bne.n	800878e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800874a:	4b08      	ldr	r3, [pc, #32]	; (800876c <HAL_RCC_OscConfig+0x2b8>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a07      	ldr	r2, [pc, #28]	; (800876c <HAL_RCC_OscConfig+0x2b8>)
 8008750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008756:	f7fd feef 	bl	8006538 <HAL_GetTick>
 800875a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800875c:	e011      	b.n	8008782 <HAL_RCC_OscConfig+0x2ce>
 800875e:	bf00      	nop
 8008760:	40023800 	.word	0x40023800
 8008764:	42470000 	.word	0x42470000
 8008768:	42470e80 	.word	0x42470e80
 800876c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008770:	f7fd fee2 	bl	8006538 <HAL_GetTick>
 8008774:	4602      	mov	r2, r0
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	1ad3      	subs	r3, r2, r3
 800877a:	2b02      	cmp	r3, #2
 800877c:	d901      	bls.n	8008782 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800877e:	2303      	movs	r3, #3
 8008780:	e106      	b.n	8008990 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008782:	4b85      	ldr	r3, [pc, #532]	; (8008998 <HAL_RCC_OscConfig+0x4e4>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800878a:	2b00      	cmp	r3, #0
 800878c:	d0f0      	beq.n	8008770 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	2b01      	cmp	r3, #1
 8008794:	d106      	bne.n	80087a4 <HAL_RCC_OscConfig+0x2f0>
 8008796:	4b81      	ldr	r3, [pc, #516]	; (800899c <HAL_RCC_OscConfig+0x4e8>)
 8008798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800879a:	4a80      	ldr	r2, [pc, #512]	; (800899c <HAL_RCC_OscConfig+0x4e8>)
 800879c:	f043 0301 	orr.w	r3, r3, #1
 80087a0:	6713      	str	r3, [r2, #112]	; 0x70
 80087a2:	e01c      	b.n	80087de <HAL_RCC_OscConfig+0x32a>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	2b05      	cmp	r3, #5
 80087aa:	d10c      	bne.n	80087c6 <HAL_RCC_OscConfig+0x312>
 80087ac:	4b7b      	ldr	r3, [pc, #492]	; (800899c <HAL_RCC_OscConfig+0x4e8>)
 80087ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087b0:	4a7a      	ldr	r2, [pc, #488]	; (800899c <HAL_RCC_OscConfig+0x4e8>)
 80087b2:	f043 0304 	orr.w	r3, r3, #4
 80087b6:	6713      	str	r3, [r2, #112]	; 0x70
 80087b8:	4b78      	ldr	r3, [pc, #480]	; (800899c <HAL_RCC_OscConfig+0x4e8>)
 80087ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087bc:	4a77      	ldr	r2, [pc, #476]	; (800899c <HAL_RCC_OscConfig+0x4e8>)
 80087be:	f043 0301 	orr.w	r3, r3, #1
 80087c2:	6713      	str	r3, [r2, #112]	; 0x70
 80087c4:	e00b      	b.n	80087de <HAL_RCC_OscConfig+0x32a>
 80087c6:	4b75      	ldr	r3, [pc, #468]	; (800899c <HAL_RCC_OscConfig+0x4e8>)
 80087c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ca:	4a74      	ldr	r2, [pc, #464]	; (800899c <HAL_RCC_OscConfig+0x4e8>)
 80087cc:	f023 0301 	bic.w	r3, r3, #1
 80087d0:	6713      	str	r3, [r2, #112]	; 0x70
 80087d2:	4b72      	ldr	r3, [pc, #456]	; (800899c <HAL_RCC_OscConfig+0x4e8>)
 80087d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087d6:	4a71      	ldr	r2, [pc, #452]	; (800899c <HAL_RCC_OscConfig+0x4e8>)
 80087d8:	f023 0304 	bic.w	r3, r3, #4
 80087dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d015      	beq.n	8008812 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087e6:	f7fd fea7 	bl	8006538 <HAL_GetTick>
 80087ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087ec:	e00a      	b.n	8008804 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80087ee:	f7fd fea3 	bl	8006538 <HAL_GetTick>
 80087f2:	4602      	mov	r2, r0
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	1ad3      	subs	r3, r2, r3
 80087f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d901      	bls.n	8008804 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008800:	2303      	movs	r3, #3
 8008802:	e0c5      	b.n	8008990 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008804:	4b65      	ldr	r3, [pc, #404]	; (800899c <HAL_RCC_OscConfig+0x4e8>)
 8008806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008808:	f003 0302 	and.w	r3, r3, #2
 800880c:	2b00      	cmp	r3, #0
 800880e:	d0ee      	beq.n	80087ee <HAL_RCC_OscConfig+0x33a>
 8008810:	e014      	b.n	800883c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008812:	f7fd fe91 	bl	8006538 <HAL_GetTick>
 8008816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008818:	e00a      	b.n	8008830 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800881a:	f7fd fe8d 	bl	8006538 <HAL_GetTick>
 800881e:	4602      	mov	r2, r0
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	1ad3      	subs	r3, r2, r3
 8008824:	f241 3288 	movw	r2, #5000	; 0x1388
 8008828:	4293      	cmp	r3, r2
 800882a:	d901      	bls.n	8008830 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800882c:	2303      	movs	r3, #3
 800882e:	e0af      	b.n	8008990 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008830:	4b5a      	ldr	r3, [pc, #360]	; (800899c <HAL_RCC_OscConfig+0x4e8>)
 8008832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008834:	f003 0302 	and.w	r3, r3, #2
 8008838:	2b00      	cmp	r3, #0
 800883a:	d1ee      	bne.n	800881a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800883c:	7dfb      	ldrb	r3, [r7, #23]
 800883e:	2b01      	cmp	r3, #1
 8008840:	d105      	bne.n	800884e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008842:	4b56      	ldr	r3, [pc, #344]	; (800899c <HAL_RCC_OscConfig+0x4e8>)
 8008844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008846:	4a55      	ldr	r2, [pc, #340]	; (800899c <HAL_RCC_OscConfig+0x4e8>)
 8008848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800884c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	2b00      	cmp	r3, #0
 8008854:	f000 809b 	beq.w	800898e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008858:	4b50      	ldr	r3, [pc, #320]	; (800899c <HAL_RCC_OscConfig+0x4e8>)
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	f003 030c 	and.w	r3, r3, #12
 8008860:	2b08      	cmp	r3, #8
 8008862:	d05c      	beq.n	800891e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	699b      	ldr	r3, [r3, #24]
 8008868:	2b02      	cmp	r3, #2
 800886a:	d141      	bne.n	80088f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800886c:	4b4c      	ldr	r3, [pc, #304]	; (80089a0 <HAL_RCC_OscConfig+0x4ec>)
 800886e:	2200      	movs	r2, #0
 8008870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008872:	f7fd fe61 	bl	8006538 <HAL_GetTick>
 8008876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008878:	e008      	b.n	800888c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800887a:	f7fd fe5d 	bl	8006538 <HAL_GetTick>
 800887e:	4602      	mov	r2, r0
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	1ad3      	subs	r3, r2, r3
 8008884:	2b02      	cmp	r3, #2
 8008886:	d901      	bls.n	800888c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008888:	2303      	movs	r3, #3
 800888a:	e081      	b.n	8008990 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800888c:	4b43      	ldr	r3, [pc, #268]	; (800899c <HAL_RCC_OscConfig+0x4e8>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008894:	2b00      	cmp	r3, #0
 8008896:	d1f0      	bne.n	800887a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	69da      	ldr	r2, [r3, #28]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6a1b      	ldr	r3, [r3, #32]
 80088a0:	431a      	orrs	r2, r3
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a6:	019b      	lsls	r3, r3, #6
 80088a8:	431a      	orrs	r2, r3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ae:	085b      	lsrs	r3, r3, #1
 80088b0:	3b01      	subs	r3, #1
 80088b2:	041b      	lsls	r3, r3, #16
 80088b4:	431a      	orrs	r2, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ba:	061b      	lsls	r3, r3, #24
 80088bc:	4937      	ldr	r1, [pc, #220]	; (800899c <HAL_RCC_OscConfig+0x4e8>)
 80088be:	4313      	orrs	r3, r2
 80088c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80088c2:	4b37      	ldr	r3, [pc, #220]	; (80089a0 <HAL_RCC_OscConfig+0x4ec>)
 80088c4:	2201      	movs	r2, #1
 80088c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088c8:	f7fd fe36 	bl	8006538 <HAL_GetTick>
 80088cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088ce:	e008      	b.n	80088e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088d0:	f7fd fe32 	bl	8006538 <HAL_GetTick>
 80088d4:	4602      	mov	r2, r0
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	1ad3      	subs	r3, r2, r3
 80088da:	2b02      	cmp	r3, #2
 80088dc:	d901      	bls.n	80088e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80088de:	2303      	movs	r3, #3
 80088e0:	e056      	b.n	8008990 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088e2:	4b2e      	ldr	r3, [pc, #184]	; (800899c <HAL_RCC_OscConfig+0x4e8>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d0f0      	beq.n	80088d0 <HAL_RCC_OscConfig+0x41c>
 80088ee:	e04e      	b.n	800898e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088f0:	4b2b      	ldr	r3, [pc, #172]	; (80089a0 <HAL_RCC_OscConfig+0x4ec>)
 80088f2:	2200      	movs	r2, #0
 80088f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088f6:	f7fd fe1f 	bl	8006538 <HAL_GetTick>
 80088fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088fc:	e008      	b.n	8008910 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088fe:	f7fd fe1b 	bl	8006538 <HAL_GetTick>
 8008902:	4602      	mov	r2, r0
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	1ad3      	subs	r3, r2, r3
 8008908:	2b02      	cmp	r3, #2
 800890a:	d901      	bls.n	8008910 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800890c:	2303      	movs	r3, #3
 800890e:	e03f      	b.n	8008990 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008910:	4b22      	ldr	r3, [pc, #136]	; (800899c <HAL_RCC_OscConfig+0x4e8>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008918:	2b00      	cmp	r3, #0
 800891a:	d1f0      	bne.n	80088fe <HAL_RCC_OscConfig+0x44a>
 800891c:	e037      	b.n	800898e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	699b      	ldr	r3, [r3, #24]
 8008922:	2b01      	cmp	r3, #1
 8008924:	d101      	bne.n	800892a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e032      	b.n	8008990 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800892a:	4b1c      	ldr	r3, [pc, #112]	; (800899c <HAL_RCC_OscConfig+0x4e8>)
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	699b      	ldr	r3, [r3, #24]
 8008934:	2b01      	cmp	r3, #1
 8008936:	d028      	beq.n	800898a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008942:	429a      	cmp	r2, r3
 8008944:	d121      	bne.n	800898a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008950:	429a      	cmp	r2, r3
 8008952:	d11a      	bne.n	800898a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800895a:	4013      	ands	r3, r2
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008960:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008962:	4293      	cmp	r3, r2
 8008964:	d111      	bne.n	800898a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008970:	085b      	lsrs	r3, r3, #1
 8008972:	3b01      	subs	r3, #1
 8008974:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008976:	429a      	cmp	r2, r3
 8008978:	d107      	bne.n	800898a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008984:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008986:	429a      	cmp	r2, r3
 8008988:	d001      	beq.n	800898e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	e000      	b.n	8008990 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	3718      	adds	r7, #24
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	40007000 	.word	0x40007000
 800899c:	40023800 	.word	0x40023800
 80089a0:	42470060 	.word	0x42470060

080089a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d101      	bne.n	80089b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	e0cc      	b.n	8008b52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80089b8:	4b68      	ldr	r3, [pc, #416]	; (8008b5c <HAL_RCC_ClockConfig+0x1b8>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 0307 	and.w	r3, r3, #7
 80089c0:	683a      	ldr	r2, [r7, #0]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d90c      	bls.n	80089e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089c6:	4b65      	ldr	r3, [pc, #404]	; (8008b5c <HAL_RCC_ClockConfig+0x1b8>)
 80089c8:	683a      	ldr	r2, [r7, #0]
 80089ca:	b2d2      	uxtb	r2, r2
 80089cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089ce:	4b63      	ldr	r3, [pc, #396]	; (8008b5c <HAL_RCC_ClockConfig+0x1b8>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 0307 	and.w	r3, r3, #7
 80089d6:	683a      	ldr	r2, [r7, #0]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d001      	beq.n	80089e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80089dc:	2301      	movs	r3, #1
 80089de:	e0b8      	b.n	8008b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f003 0302 	and.w	r3, r3, #2
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d020      	beq.n	8008a2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f003 0304 	and.w	r3, r3, #4
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d005      	beq.n	8008a04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80089f8:	4b59      	ldr	r3, [pc, #356]	; (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	4a58      	ldr	r2, [pc, #352]	; (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 80089fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008a02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 0308 	and.w	r3, r3, #8
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d005      	beq.n	8008a1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008a10:	4b53      	ldr	r3, [pc, #332]	; (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	4a52      	ldr	r2, [pc, #328]	; (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008a16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008a1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a1c:	4b50      	ldr	r3, [pc, #320]	; (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	494d      	ldr	r1, [pc, #308]	; (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f003 0301 	and.w	r3, r3, #1
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d044      	beq.n	8008ac4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d107      	bne.n	8008a52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a42:	4b47      	ldr	r3, [pc, #284]	; (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d119      	bne.n	8008a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e07f      	b.n	8008b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d003      	beq.n	8008a62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a5e:	2b03      	cmp	r3, #3
 8008a60:	d107      	bne.n	8008a72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a62:	4b3f      	ldr	r3, [pc, #252]	; (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d109      	bne.n	8008a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e06f      	b.n	8008b52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a72:	4b3b      	ldr	r3, [pc, #236]	; (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 0302 	and.w	r3, r3, #2
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d101      	bne.n	8008a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e067      	b.n	8008b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a82:	4b37      	ldr	r3, [pc, #220]	; (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	f023 0203 	bic.w	r2, r3, #3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	4934      	ldr	r1, [pc, #208]	; (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008a90:	4313      	orrs	r3, r2
 8008a92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008a94:	f7fd fd50 	bl	8006538 <HAL_GetTick>
 8008a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a9a:	e00a      	b.n	8008ab2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a9c:	f7fd fd4c 	bl	8006538 <HAL_GetTick>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d901      	bls.n	8008ab2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	e04f      	b.n	8008b52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ab2:	4b2b      	ldr	r3, [pc, #172]	; (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	f003 020c 	and.w	r2, r3, #12
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d1eb      	bne.n	8008a9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008ac4:	4b25      	ldr	r3, [pc, #148]	; (8008b5c <HAL_RCC_ClockConfig+0x1b8>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 0307 	and.w	r3, r3, #7
 8008acc:	683a      	ldr	r2, [r7, #0]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d20c      	bcs.n	8008aec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ad2:	4b22      	ldr	r3, [pc, #136]	; (8008b5c <HAL_RCC_ClockConfig+0x1b8>)
 8008ad4:	683a      	ldr	r2, [r7, #0]
 8008ad6:	b2d2      	uxtb	r2, r2
 8008ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ada:	4b20      	ldr	r3, [pc, #128]	; (8008b5c <HAL_RCC_ClockConfig+0x1b8>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f003 0307 	and.w	r3, r3, #7
 8008ae2:	683a      	ldr	r2, [r7, #0]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d001      	beq.n	8008aec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e032      	b.n	8008b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 0304 	and.w	r3, r3, #4
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d008      	beq.n	8008b0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008af8:	4b19      	ldr	r3, [pc, #100]	; (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	4916      	ldr	r1, [pc, #88]	; (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b06:	4313      	orrs	r3, r2
 8008b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 0308 	and.w	r3, r3, #8
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d009      	beq.n	8008b2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b16:	4b12      	ldr	r3, [pc, #72]	; (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	00db      	lsls	r3, r3, #3
 8008b24:	490e      	ldr	r1, [pc, #56]	; (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b26:	4313      	orrs	r3, r2
 8008b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008b2a:	f000 f821 	bl	8008b70 <HAL_RCC_GetSysClockFreq>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	4b0b      	ldr	r3, [pc, #44]	; (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	091b      	lsrs	r3, r3, #4
 8008b36:	f003 030f 	and.w	r3, r3, #15
 8008b3a:	490a      	ldr	r1, [pc, #40]	; (8008b64 <HAL_RCC_ClockConfig+0x1c0>)
 8008b3c:	5ccb      	ldrb	r3, [r1, r3]
 8008b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b42:	4a09      	ldr	r2, [pc, #36]	; (8008b68 <HAL_RCC_ClockConfig+0x1c4>)
 8008b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008b46:	4b09      	ldr	r3, [pc, #36]	; (8008b6c <HAL_RCC_ClockConfig+0x1c8>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7fd fcb0 	bl	80064b0 <HAL_InitTick>

  return HAL_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3710      	adds	r7, #16
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop
 8008b5c:	40023c00 	.word	0x40023c00
 8008b60:	40023800 	.word	0x40023800
 8008b64:	08017cc4 	.word	0x08017cc4
 8008b68:	20000008 	.word	0x20000008
 8008b6c:	20000054 	.word	0x20000054

08008b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b70:	b5b0      	push	{r4, r5, r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008b76:	2100      	movs	r1, #0
 8008b78:	6079      	str	r1, [r7, #4]
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	60f9      	str	r1, [r7, #12]
 8008b7e:	2100      	movs	r1, #0
 8008b80:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008b82:	2100      	movs	r1, #0
 8008b84:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b86:	4952      	ldr	r1, [pc, #328]	; (8008cd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008b88:	6889      	ldr	r1, [r1, #8]
 8008b8a:	f001 010c 	and.w	r1, r1, #12
 8008b8e:	2908      	cmp	r1, #8
 8008b90:	d00d      	beq.n	8008bae <HAL_RCC_GetSysClockFreq+0x3e>
 8008b92:	2908      	cmp	r1, #8
 8008b94:	f200 8094 	bhi.w	8008cc0 <HAL_RCC_GetSysClockFreq+0x150>
 8008b98:	2900      	cmp	r1, #0
 8008b9a:	d002      	beq.n	8008ba2 <HAL_RCC_GetSysClockFreq+0x32>
 8008b9c:	2904      	cmp	r1, #4
 8008b9e:	d003      	beq.n	8008ba8 <HAL_RCC_GetSysClockFreq+0x38>
 8008ba0:	e08e      	b.n	8008cc0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008ba2:	4b4c      	ldr	r3, [pc, #304]	; (8008cd4 <HAL_RCC_GetSysClockFreq+0x164>)
 8008ba4:	60bb      	str	r3, [r7, #8]
       break;
 8008ba6:	e08e      	b.n	8008cc6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008ba8:	4b4b      	ldr	r3, [pc, #300]	; (8008cd8 <HAL_RCC_GetSysClockFreq+0x168>)
 8008baa:	60bb      	str	r3, [r7, #8]
      break;
 8008bac:	e08b      	b.n	8008cc6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008bae:	4948      	ldr	r1, [pc, #288]	; (8008cd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008bb0:	6849      	ldr	r1, [r1, #4]
 8008bb2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8008bb6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008bb8:	4945      	ldr	r1, [pc, #276]	; (8008cd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008bba:	6849      	ldr	r1, [r1, #4]
 8008bbc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8008bc0:	2900      	cmp	r1, #0
 8008bc2:	d024      	beq.n	8008c0e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008bc4:	4942      	ldr	r1, [pc, #264]	; (8008cd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008bc6:	6849      	ldr	r1, [r1, #4]
 8008bc8:	0989      	lsrs	r1, r1, #6
 8008bca:	4608      	mov	r0, r1
 8008bcc:	f04f 0100 	mov.w	r1, #0
 8008bd0:	f240 14ff 	movw	r4, #511	; 0x1ff
 8008bd4:	f04f 0500 	mov.w	r5, #0
 8008bd8:	ea00 0204 	and.w	r2, r0, r4
 8008bdc:	ea01 0305 	and.w	r3, r1, r5
 8008be0:	493d      	ldr	r1, [pc, #244]	; (8008cd8 <HAL_RCC_GetSysClockFreq+0x168>)
 8008be2:	fb01 f003 	mul.w	r0, r1, r3
 8008be6:	2100      	movs	r1, #0
 8008be8:	fb01 f102 	mul.w	r1, r1, r2
 8008bec:	1844      	adds	r4, r0, r1
 8008bee:	493a      	ldr	r1, [pc, #232]	; (8008cd8 <HAL_RCC_GetSysClockFreq+0x168>)
 8008bf0:	fba2 0101 	umull	r0, r1, r2, r1
 8008bf4:	1863      	adds	r3, r4, r1
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	f04f 0300 	mov.w	r3, #0
 8008c00:	f7f8 f85a 	bl	8000cb8 <__aeabi_uldivmod>
 8008c04:	4602      	mov	r2, r0
 8008c06:	460b      	mov	r3, r1
 8008c08:	4613      	mov	r3, r2
 8008c0a:	60fb      	str	r3, [r7, #12]
 8008c0c:	e04a      	b.n	8008ca4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c0e:	4b30      	ldr	r3, [pc, #192]	; (8008cd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	099b      	lsrs	r3, r3, #6
 8008c14:	461a      	mov	r2, r3
 8008c16:	f04f 0300 	mov.w	r3, #0
 8008c1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008c1e:	f04f 0100 	mov.w	r1, #0
 8008c22:	ea02 0400 	and.w	r4, r2, r0
 8008c26:	ea03 0501 	and.w	r5, r3, r1
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	4629      	mov	r1, r5
 8008c2e:	f04f 0200 	mov.w	r2, #0
 8008c32:	f04f 0300 	mov.w	r3, #0
 8008c36:	014b      	lsls	r3, r1, #5
 8008c38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008c3c:	0142      	lsls	r2, r0, #5
 8008c3e:	4610      	mov	r0, r2
 8008c40:	4619      	mov	r1, r3
 8008c42:	1b00      	subs	r0, r0, r4
 8008c44:	eb61 0105 	sbc.w	r1, r1, r5
 8008c48:	f04f 0200 	mov.w	r2, #0
 8008c4c:	f04f 0300 	mov.w	r3, #0
 8008c50:	018b      	lsls	r3, r1, #6
 8008c52:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008c56:	0182      	lsls	r2, r0, #6
 8008c58:	1a12      	subs	r2, r2, r0
 8008c5a:	eb63 0301 	sbc.w	r3, r3, r1
 8008c5e:	f04f 0000 	mov.w	r0, #0
 8008c62:	f04f 0100 	mov.w	r1, #0
 8008c66:	00d9      	lsls	r1, r3, #3
 8008c68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008c6c:	00d0      	lsls	r0, r2, #3
 8008c6e:	4602      	mov	r2, r0
 8008c70:	460b      	mov	r3, r1
 8008c72:	1912      	adds	r2, r2, r4
 8008c74:	eb45 0303 	adc.w	r3, r5, r3
 8008c78:	f04f 0000 	mov.w	r0, #0
 8008c7c:	f04f 0100 	mov.w	r1, #0
 8008c80:	0299      	lsls	r1, r3, #10
 8008c82:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008c86:	0290      	lsls	r0, r2, #10
 8008c88:	4602      	mov	r2, r0
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	4610      	mov	r0, r2
 8008c8e:	4619      	mov	r1, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	461a      	mov	r2, r3
 8008c94:	f04f 0300 	mov.w	r3, #0
 8008c98:	f7f8 f80e 	bl	8000cb8 <__aeabi_uldivmod>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008ca4:	4b0a      	ldr	r3, [pc, #40]	; (8008cd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	0c1b      	lsrs	r3, r3, #16
 8008caa:	f003 0303 	and.w	r3, r3, #3
 8008cae:	3301      	adds	r3, #1
 8008cb0:	005b      	lsls	r3, r3, #1
 8008cb2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cbc:	60bb      	str	r3, [r7, #8]
      break;
 8008cbe:	e002      	b.n	8008cc6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008cc0:	4b04      	ldr	r3, [pc, #16]	; (8008cd4 <HAL_RCC_GetSysClockFreq+0x164>)
 8008cc2:	60bb      	str	r3, [r7, #8]
      break;
 8008cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008cc6:	68bb      	ldr	r3, [r7, #8]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3710      	adds	r7, #16
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bdb0      	pop	{r4, r5, r7, pc}
 8008cd0:	40023800 	.word	0x40023800
 8008cd4:	00f42400 	.word	0x00f42400
 8008cd8:	017d7840 	.word	0x017d7840

08008cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ce0:	4b03      	ldr	r3, [pc, #12]	; (8008cf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop
 8008cf0:	20000008 	.word	0x20000008

08008cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008cf8:	f7ff fff0 	bl	8008cdc <HAL_RCC_GetHCLKFreq>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	4b05      	ldr	r3, [pc, #20]	; (8008d14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	0a9b      	lsrs	r3, r3, #10
 8008d04:	f003 0307 	and.w	r3, r3, #7
 8008d08:	4903      	ldr	r1, [pc, #12]	; (8008d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d0a:	5ccb      	ldrb	r3, [r1, r3]
 8008d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	40023800 	.word	0x40023800
 8008d18:	08017cd4 	.word	0x08017cd4

08008d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008d20:	f7ff ffdc 	bl	8008cdc <HAL_RCC_GetHCLKFreq>
 8008d24:	4602      	mov	r2, r0
 8008d26:	4b05      	ldr	r3, [pc, #20]	; (8008d3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	0b5b      	lsrs	r3, r3, #13
 8008d2c:	f003 0307 	and.w	r3, r3, #7
 8008d30:	4903      	ldr	r1, [pc, #12]	; (8008d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d32:	5ccb      	ldrb	r3, [r1, r3]
 8008d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	40023800 	.word	0x40023800
 8008d40:	08017cd4 	.word	0x08017cd4

08008d44 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d101      	bne.n	8008d56 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	e022      	b.n	8008d9c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d105      	bne.n	8008d6e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f7fb fb8b 	bl	8004484 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2203      	movs	r2, #3
 8008d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 f814 	bl	8008da4 <HAL_SD_InitCard>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d001      	beq.n	8008d86 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	e00a      	b.n	8008d9c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2201      	movs	r2, #1
 8008d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008d9a:	2300      	movs	r3, #0
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3708      	adds	r7, #8
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008da4:	b5b0      	push	{r4, r5, r7, lr}
 8008da6:	b08e      	sub	sp, #56	; 0x38
 8008da8:	af04      	add	r7, sp, #16
 8008daa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008dac:	2300      	movs	r3, #0
 8008dae:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008db0:	2300      	movs	r3, #0
 8008db2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008db4:	2300      	movs	r3, #0
 8008db6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008db8:	2300      	movs	r3, #0
 8008dba:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008dc0:	2376      	movs	r3, #118	; 0x76
 8008dc2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681d      	ldr	r5, [r3, #0]
 8008dc8:	466c      	mov	r4, sp
 8008dca:	f107 0314 	add.w	r3, r7, #20
 8008dce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008dd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008dd6:	f107 0308 	add.w	r3, r7, #8
 8008dda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ddc:	4628      	mov	r0, r5
 8008dde:	f002 fc55 	bl	800b68c <SDIO_Init>
 8008de2:	4603      	mov	r3, r0
 8008de4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008de8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d001      	beq.n	8008df4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008df0:	2301      	movs	r3, #1
 8008df2:	e04c      	b.n	8008e8e <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008df4:	4b28      	ldr	r3, [pc, #160]	; (8008e98 <HAL_SD_InitCard+0xf4>)
 8008df6:	2200      	movs	r2, #0
 8008df8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f002 fc8d 	bl	800b71e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008e04:	4b24      	ldr	r3, [pc, #144]	; (8008e98 <HAL_SD_InitCard+0xf4>)
 8008e06:	2201      	movs	r2, #1
 8008e08:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 fe68 	bl	8009ae0 <SD_PowerON>
 8008e10:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e12:	6a3b      	ldr	r3, [r7, #32]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d00b      	beq.n	8008e30 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e24:	6a3b      	ldr	r3, [r7, #32]
 8008e26:	431a      	orrs	r2, r3
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e02e      	b.n	8008e8e <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 fd89 	bl	8009948 <SD_InitCard>
 8008e36:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e38:	6a3b      	ldr	r3, [r7, #32]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d00b      	beq.n	8008e56 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2201      	movs	r2, #1
 8008e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e4a:	6a3b      	ldr	r3, [r7, #32]
 8008e4c:	431a      	orrs	r2, r3
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	e01b      	b.n	8008e8e <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f002 fcf0 	bl	800b844 <SDMMC_CmdBlockLength>
 8008e64:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e66:	6a3b      	ldr	r3, [r7, #32]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d00f      	beq.n	8008e8c <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a0a      	ldr	r2, [pc, #40]	; (8008e9c <HAL_SD_InitCard+0xf8>)
 8008e72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e78:	6a3b      	ldr	r3, [r7, #32]
 8008e7a:	431a      	orrs	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e000      	b.n	8008e8e <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3728      	adds	r7, #40	; 0x28
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bdb0      	pop	{r4, r5, r7, pc}
 8008e96:	bf00      	nop
 8008e98:	422580a0 	.word	0x422580a0
 8008e9c:	004005ff 	.word	0x004005ff

08008ea0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b092      	sub	sp, #72	; 0x48
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	607a      	str	r2, [r7, #4]
 8008eac:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008eae:	f7fd fb43 	bl	8006538 <HAL_GetTick>
 8008eb2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d107      	bne.n	8008ed2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e1bd      	b.n	800924e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	f040 81b0 	bne.w	8009240 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008ee6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	441a      	add	r2, r3
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d907      	bls.n	8008f04 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008f00:	2301      	movs	r3, #1
 8008f02:	e1a4      	b.n	800924e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2203      	movs	r2, #3
 8008f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	2200      	movs	r2, #0
 8008f12:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d002      	beq.n	8008f22 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1e:	025b      	lsls	r3, r3, #9
 8008f20:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008f22:	f04f 33ff 	mov.w	r3, #4294967295
 8008f26:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	025b      	lsls	r3, r3, #9
 8008f2c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008f2e:	2390      	movs	r3, #144	; 0x90
 8008f30:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008f32:	2302      	movs	r3, #2
 8008f34:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008f36:	2300      	movs	r3, #0
 8008f38:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f107 0214 	add.w	r2, r7, #20
 8008f46:	4611      	mov	r1, r2
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f002 fc4f 	bl	800b7ec <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d90a      	bls.n	8008f6a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2202      	movs	r2, #2
 8008f58:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008f60:	4618      	mov	r0, r3
 8008f62:	f002 fcb3 	bl	800b8cc <SDMMC_CmdReadMultiBlock>
 8008f66:	6478      	str	r0, [r7, #68]	; 0x44
 8008f68:	e009      	b.n	8008f7e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008f76:	4618      	mov	r0, r3
 8008f78:	f002 fc86 	bl	800b888 <SDMMC_CmdReadSingleBlock>
 8008f7c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d012      	beq.n	8008faa <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a7a      	ldr	r2, [pc, #488]	; (8009174 <HAL_SD_ReadBlocks+0x2d4>)
 8008f8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f92:	431a      	orrs	r2, r3
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e151      	b.n	800924e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8008faa:	69bb      	ldr	r3, [r7, #24]
 8008fac:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008fae:	e061      	b.n	8009074 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d03c      	beq.n	8009038 <HAL_SD_ReadBlocks+0x198>
 8008fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d039      	beq.n	8009038 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	643b      	str	r3, [r7, #64]	; 0x40
 8008fc8:	e033      	b.n	8009032 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f002 fb87 	bl	800b6e2 <SDIO_ReadFIFO>
 8008fd4:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd8:	b2da      	uxtb	r2, r3
 8008fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fdc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fec:	0a1b      	lsrs	r3, r3, #8
 8008fee:	b2da      	uxtb	r2, r3
 8008ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ff2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ffc:	3b01      	subs	r3, #1
 8008ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009002:	0c1b      	lsrs	r3, r3, #16
 8009004:	b2da      	uxtb	r2, r3
 8009006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009008:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800900a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800900c:	3301      	adds	r3, #1
 800900e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009012:	3b01      	subs	r3, #1
 8009014:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009018:	0e1b      	lsrs	r3, r3, #24
 800901a:	b2da      	uxtb	r2, r3
 800901c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800901e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009022:	3301      	adds	r3, #1
 8009024:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009028:	3b01      	subs	r3, #1
 800902a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800902c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800902e:	3301      	adds	r3, #1
 8009030:	643b      	str	r3, [r7, #64]	; 0x40
 8009032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009034:	2b07      	cmp	r3, #7
 8009036:	d9c8      	bls.n	8008fca <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009038:	f7fd fa7e 	bl	8006538 <HAL_GetTick>
 800903c:	4602      	mov	r2, r0
 800903e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009040:	1ad3      	subs	r3, r2, r3
 8009042:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009044:	429a      	cmp	r2, r3
 8009046:	d902      	bls.n	800904e <HAL_SD_ReadBlocks+0x1ae>
 8009048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800904a:	2b00      	cmp	r3, #0
 800904c:	d112      	bne.n	8009074 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a48      	ldr	r2, [pc, #288]	; (8009174 <HAL_SD_ReadBlocks+0x2d4>)
 8009054:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800905a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2201      	movs	r2, #1
 8009066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2200      	movs	r2, #0
 800906e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009070:	2303      	movs	r3, #3
 8009072:	e0ec      	b.n	800924e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800907a:	f240 332a 	movw	r3, #810	; 0x32a
 800907e:	4013      	ands	r3, r2
 8009080:	2b00      	cmp	r3, #0
 8009082:	d095      	beq.n	8008fb0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800908a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800908e:	2b00      	cmp	r3, #0
 8009090:	d022      	beq.n	80090d8 <HAL_SD_ReadBlocks+0x238>
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	2b01      	cmp	r3, #1
 8009096:	d91f      	bls.n	80090d8 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800909c:	2b03      	cmp	r3, #3
 800909e:	d01b      	beq.n	80090d8 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4618      	mov	r0, r3
 80090a6:	f002 fc77 	bl	800b998 <SDMMC_CmdStopTransfer>
 80090aa:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80090ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d012      	beq.n	80090d8 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a2f      	ldr	r2, [pc, #188]	; (8009174 <HAL_SD_ReadBlocks+0x2d4>)
 80090b8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090c0:	431a      	orrs	r2, r3
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2201      	movs	r2, #1
 80090ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2200      	movs	r2, #0
 80090d2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	e0ba      	b.n	800924e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090de:	f003 0308 	and.w	r3, r3, #8
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d012      	beq.n	800910c <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a22      	ldr	r2, [pc, #136]	; (8009174 <HAL_SD_ReadBlocks+0x2d4>)
 80090ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f2:	f043 0208 	orr.w	r2, r3, #8
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2201      	movs	r2, #1
 80090fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2200      	movs	r2, #0
 8009106:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009108:	2301      	movs	r3, #1
 800910a:	e0a0      	b.n	800924e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009112:	f003 0302 	and.w	r3, r3, #2
 8009116:	2b00      	cmp	r3, #0
 8009118:	d012      	beq.n	8009140 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a15      	ldr	r2, [pc, #84]	; (8009174 <HAL_SD_ReadBlocks+0x2d4>)
 8009120:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009126:	f043 0202 	orr.w	r2, r3, #2
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2201      	movs	r2, #1
 8009132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2200      	movs	r2, #0
 800913a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800913c:	2301      	movs	r3, #1
 800913e:	e086      	b.n	800924e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009146:	f003 0320 	and.w	r3, r3, #32
 800914a:	2b00      	cmp	r3, #0
 800914c:	d063      	beq.n	8009216 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a08      	ldr	r2, [pc, #32]	; (8009174 <HAL_SD_ReadBlocks+0x2d4>)
 8009154:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800915a:	f043 0220 	orr.w	r2, r3, #32
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2201      	movs	r2, #1
 8009166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2200      	movs	r2, #0
 800916e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	e06c      	b.n	800924e <HAL_SD_ReadBlocks+0x3ae>
 8009174:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4618      	mov	r0, r3
 800917e:	f002 fab0 	bl	800b6e2 <SDIO_ReadFIFO>
 8009182:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8009184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009186:	b2da      	uxtb	r2, r3
 8009188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800918a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800918c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800918e:	3301      	adds	r3, #1
 8009190:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009194:	3b01      	subs	r3, #1
 8009196:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919a:	0a1b      	lsrs	r3, r3, #8
 800919c:	b2da      	uxtb	r2, r3
 800919e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091a0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80091a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091a4:	3301      	adds	r3, #1
 80091a6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80091a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091aa:	3b01      	subs	r3, #1
 80091ac:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80091ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b0:	0c1b      	lsrs	r3, r3, #16
 80091b2:	b2da      	uxtb	r2, r3
 80091b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091b6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80091b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ba:	3301      	adds	r3, #1
 80091bc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80091be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091c0:	3b01      	subs	r3, #1
 80091c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80091c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c6:	0e1b      	lsrs	r3, r3, #24
 80091c8:	b2da      	uxtb	r2, r3
 80091ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091cc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80091ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091d0:	3301      	adds	r3, #1
 80091d2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80091d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091d6:	3b01      	subs	r3, #1
 80091d8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80091da:	f7fd f9ad 	bl	8006538 <HAL_GetTick>
 80091de:	4602      	mov	r2, r0
 80091e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e2:	1ad3      	subs	r3, r2, r3
 80091e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d902      	bls.n	80091f0 <HAL_SD_ReadBlocks+0x350>
 80091ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d112      	bne.n	8009216 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a18      	ldr	r2, [pc, #96]	; (8009258 <HAL_SD_ReadBlocks+0x3b8>)
 80091f6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2201      	movs	r2, #1
 8009208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2200      	movs	r2, #0
 8009210:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	e01b      	b.n	800924e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800921c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009220:	2b00      	cmp	r3, #0
 8009222:	d002      	beq.n	800922a <HAL_SD_ReadBlocks+0x38a>
 8009224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009226:	2b00      	cmp	r3, #0
 8009228:	d1a6      	bne.n	8009178 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f240 523a 	movw	r2, #1338	; 0x53a
 8009232:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2201      	movs	r2, #1
 8009238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800923c:	2300      	movs	r3, #0
 800923e:	e006      	b.n	800924e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009244:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800924c:	2301      	movs	r3, #1
  }
}
 800924e:	4618      	mov	r0, r3
 8009250:	3748      	adds	r7, #72	; 0x48
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	004005ff 	.word	0x004005ff

0800925c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b092      	sub	sp, #72	; 0x48
 8009260:	af00      	add	r7, sp, #0
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	60b9      	str	r1, [r7, #8]
 8009266:	607a      	str	r2, [r7, #4]
 8009268:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800926a:	f7fd f965 	bl	8006538 <HAL_GetTick>
 800926e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d107      	bne.n	800928e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009282:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800928a:	2301      	movs	r3, #1
 800928c:	e166      	b.n	800955c <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009294:	b2db      	uxtb	r3, r3
 8009296:	2b01      	cmp	r3, #1
 8009298:	f040 8159 	bne.w	800954e <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2200      	movs	r2, #0
 80092a0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80092a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	441a      	add	r2, r3
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d907      	bls.n	80092c0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80092bc:	2301      	movs	r3, #1
 80092be:	e14d      	b.n	800955c <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2203      	movs	r2, #3
 80092c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2200      	movs	r2, #0
 80092ce:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d002      	beq.n	80092de <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80092d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092da:	025b      	lsls	r3, r3, #9
 80092dc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80092de:	f04f 33ff 	mov.w	r3, #4294967295
 80092e2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	025b      	lsls	r3, r3, #9
 80092e8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80092ea:	2390      	movs	r3, #144	; 0x90
 80092ec:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80092ee:	2300      	movs	r3, #0
 80092f0:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80092f2:	2300      	movs	r3, #0
 80092f4:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80092f6:	2301      	movs	r3, #1
 80092f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f107 0218 	add.w	r2, r7, #24
 8009302:	4611      	mov	r1, r2
 8009304:	4618      	mov	r0, r3
 8009306:	f002 fa71 	bl	800b7ec <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	2b01      	cmp	r3, #1
 800930e:	d90a      	bls.n	8009326 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2220      	movs	r2, #32
 8009314:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800931c:	4618      	mov	r0, r3
 800931e:	f002 fb19 	bl	800b954 <SDMMC_CmdWriteMultiBlock>
 8009322:	6478      	str	r0, [r7, #68]	; 0x44
 8009324:	e009      	b.n	800933a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2210      	movs	r2, #16
 800932a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009332:	4618      	mov	r0, r3
 8009334:	f002 faec 	bl	800b910 <SDMMC_CmdWriteSingleBlock>
 8009338:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800933a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800933c:	2b00      	cmp	r3, #0
 800933e:	d012      	beq.n	8009366 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a87      	ldr	r2, [pc, #540]	; (8009564 <HAL_SD_WriteBlocks+0x308>)
 8009346:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800934c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800934e:	431a      	orrs	r2, r3
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2201      	movs	r2, #1
 8009358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2200      	movs	r2, #0
 8009360:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009362:	2301      	movs	r3, #1
 8009364:	e0fa      	b.n	800955c <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800936a:	e065      	b.n	8009438 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009376:	2b00      	cmp	r3, #0
 8009378:	d040      	beq.n	80093fc <HAL_SD_WriteBlocks+0x1a0>
 800937a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800937c:	2b00      	cmp	r3, #0
 800937e:	d03d      	beq.n	80093fc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8009380:	2300      	movs	r3, #0
 8009382:	643b      	str	r3, [r7, #64]	; 0x40
 8009384:	e037      	b.n	80093f6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8009386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800938c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800938e:	3301      	adds	r3, #1
 8009390:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009394:	3b01      	subs	r3, #1
 8009396:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8009398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	021a      	lsls	r2, r3, #8
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	4313      	orrs	r3, r2
 80093a2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80093a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093a6:	3301      	adds	r3, #1
 80093a8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80093aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093ac:	3b01      	subs	r3, #1
 80093ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80093b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	041a      	lsls	r2, r3, #16
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	4313      	orrs	r3, r2
 80093ba:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80093bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093be:	3301      	adds	r3, #1
 80093c0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80093c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093c4:	3b01      	subs	r3, #1
 80093c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80093c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	061a      	lsls	r2, r3, #24
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	4313      	orrs	r3, r2
 80093d2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80093d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d6:	3301      	adds	r3, #1
 80093d8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80093da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093dc:	3b01      	subs	r3, #1
 80093de:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f107 0214 	add.w	r2, r7, #20
 80093e8:	4611      	mov	r1, r2
 80093ea:	4618      	mov	r0, r3
 80093ec:	f002 f986 	bl	800b6fc <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80093f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093f2:	3301      	adds	r3, #1
 80093f4:	643b      	str	r3, [r7, #64]	; 0x40
 80093f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093f8:	2b07      	cmp	r3, #7
 80093fa:	d9c4      	bls.n	8009386 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80093fc:	f7fd f89c 	bl	8006538 <HAL_GetTick>
 8009400:	4602      	mov	r2, r0
 8009402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009404:	1ad3      	subs	r3, r2, r3
 8009406:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009408:	429a      	cmp	r2, r3
 800940a:	d902      	bls.n	8009412 <HAL_SD_WriteBlocks+0x1b6>
 800940c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800940e:	2b00      	cmp	r3, #0
 8009410:	d112      	bne.n	8009438 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a53      	ldr	r2, [pc, #332]	; (8009564 <HAL_SD_WriteBlocks+0x308>)
 8009418:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800941e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009420:	431a      	orrs	r2, r3
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2201      	movs	r2, #1
 800942a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2200      	movs	r2, #0
 8009432:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009434:	2303      	movs	r3, #3
 8009436:	e091      	b.n	800955c <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800943e:	f240 331a 	movw	r3, #794	; 0x31a
 8009442:	4013      	ands	r3, r2
 8009444:	2b00      	cmp	r3, #0
 8009446:	d091      	beq.n	800936c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800944e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009452:	2b00      	cmp	r3, #0
 8009454:	d022      	beq.n	800949c <HAL_SD_WriteBlocks+0x240>
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	2b01      	cmp	r3, #1
 800945a:	d91f      	bls.n	800949c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009460:	2b03      	cmp	r3, #3
 8009462:	d01b      	beq.n	800949c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4618      	mov	r0, r3
 800946a:	f002 fa95 	bl	800b998 <SDMMC_CmdStopTransfer>
 800946e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009472:	2b00      	cmp	r3, #0
 8009474:	d012      	beq.n	800949c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a3a      	ldr	r2, [pc, #232]	; (8009564 <HAL_SD_WriteBlocks+0x308>)
 800947c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009484:	431a      	orrs	r2, r3
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2201      	movs	r2, #1
 800948e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2200      	movs	r2, #0
 8009496:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8009498:	2301      	movs	r3, #1
 800949a:	e05f      	b.n	800955c <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094a2:	f003 0308 	and.w	r3, r3, #8
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d012      	beq.n	80094d0 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a2d      	ldr	r2, [pc, #180]	; (8009564 <HAL_SD_WriteBlocks+0x308>)
 80094b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b6:	f043 0208 	orr.w	r2, r3, #8
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2201      	movs	r2, #1
 80094c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2200      	movs	r2, #0
 80094ca:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80094cc:	2301      	movs	r3, #1
 80094ce:	e045      	b.n	800955c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094d6:	f003 0302 	and.w	r3, r3, #2
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d012      	beq.n	8009504 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a20      	ldr	r2, [pc, #128]	; (8009564 <HAL_SD_WriteBlocks+0x308>)
 80094e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ea:	f043 0202 	orr.w	r2, r3, #2
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2201      	movs	r2, #1
 80094f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2200      	movs	r2, #0
 80094fe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009500:	2301      	movs	r3, #1
 8009502:	e02b      	b.n	800955c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800950a:	f003 0310 	and.w	r3, r3, #16
 800950e:	2b00      	cmp	r3, #0
 8009510:	d012      	beq.n	8009538 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a13      	ldr	r2, [pc, #76]	; (8009564 <HAL_SD_WriteBlocks+0x308>)
 8009518:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800951e:	f043 0210 	orr.w	r2, r3, #16
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2201      	movs	r2, #1
 800952a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2200      	movs	r2, #0
 8009532:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	e011      	b.n	800955c <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f240 523a 	movw	r2, #1338	; 0x53a
 8009540:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2201      	movs	r2, #1
 8009546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800954a:	2300      	movs	r3, #0
 800954c:	e006      	b.n	800955c <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009552:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800955a:	2301      	movs	r3, #1
  }
}
 800955c:	4618      	mov	r0, r3
 800955e:	3748      	adds	r7, #72	; 0x48
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}
 8009564:	004005ff 	.word	0x004005ff

08009568 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009576:	0f9b      	lsrs	r3, r3, #30
 8009578:	b2da      	uxtb	r2, r3
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009582:	0e9b      	lsrs	r3, r3, #26
 8009584:	b2db      	uxtb	r3, r3
 8009586:	f003 030f 	and.w	r3, r3, #15
 800958a:	b2da      	uxtb	r2, r3
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009594:	0e1b      	lsrs	r3, r3, #24
 8009596:	b2db      	uxtb	r3, r3
 8009598:	f003 0303 	and.w	r3, r3, #3
 800959c:	b2da      	uxtb	r2, r3
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095a6:	0c1b      	lsrs	r3, r3, #16
 80095a8:	b2da      	uxtb	r2, r3
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095b2:	0a1b      	lsrs	r3, r3, #8
 80095b4:	b2da      	uxtb	r2, r3
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095be:	b2da      	uxtb	r2, r3
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095c8:	0d1b      	lsrs	r3, r3, #20
 80095ca:	b29a      	uxth	r2, r3
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095d4:	0c1b      	lsrs	r3, r3, #16
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	f003 030f 	and.w	r3, r3, #15
 80095dc:	b2da      	uxtb	r2, r3
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095e6:	0bdb      	lsrs	r3, r3, #15
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	f003 0301 	and.w	r3, r3, #1
 80095ee:	b2da      	uxtb	r2, r3
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095f8:	0b9b      	lsrs	r3, r3, #14
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	f003 0301 	and.w	r3, r3, #1
 8009600:	b2da      	uxtb	r2, r3
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800960a:	0b5b      	lsrs	r3, r3, #13
 800960c:	b2db      	uxtb	r3, r3
 800960e:	f003 0301 	and.w	r3, r3, #1
 8009612:	b2da      	uxtb	r2, r3
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800961c:	0b1b      	lsrs	r3, r3, #12
 800961e:	b2db      	uxtb	r3, r3
 8009620:	f003 0301 	and.w	r3, r3, #1
 8009624:	b2da      	uxtb	r2, r3
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	2200      	movs	r2, #0
 800962e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009634:	2b00      	cmp	r3, #0
 8009636:	d163      	bne.n	8009700 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800963c:	009a      	lsls	r2, r3, #2
 800963e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009642:	4013      	ands	r3, r2
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009648:	0f92      	lsrs	r2, r2, #30
 800964a:	431a      	orrs	r2, r3
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009654:	0edb      	lsrs	r3, r3, #27
 8009656:	b2db      	uxtb	r3, r3
 8009658:	f003 0307 	and.w	r3, r3, #7
 800965c:	b2da      	uxtb	r2, r3
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009666:	0e1b      	lsrs	r3, r3, #24
 8009668:	b2db      	uxtb	r3, r3
 800966a:	f003 0307 	and.w	r3, r3, #7
 800966e:	b2da      	uxtb	r2, r3
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009678:	0d5b      	lsrs	r3, r3, #21
 800967a:	b2db      	uxtb	r3, r3
 800967c:	f003 0307 	and.w	r3, r3, #7
 8009680:	b2da      	uxtb	r2, r3
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800968a:	0c9b      	lsrs	r3, r3, #18
 800968c:	b2db      	uxtb	r3, r3
 800968e:	f003 0307 	and.w	r3, r3, #7
 8009692:	b2da      	uxtb	r2, r3
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800969c:	0bdb      	lsrs	r3, r3, #15
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	f003 0307 	and.w	r3, r3, #7
 80096a4:	b2da      	uxtb	r2, r3
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	691b      	ldr	r3, [r3, #16]
 80096ae:	1c5a      	adds	r2, r3, #1
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	7e1b      	ldrb	r3, [r3, #24]
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	f003 0307 	and.w	r3, r3, #7
 80096be:	3302      	adds	r3, #2
 80096c0:	2201      	movs	r2, #1
 80096c2:	fa02 f303 	lsl.w	r3, r2, r3
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80096ca:	fb02 f203 	mul.w	r2, r2, r3
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	7a1b      	ldrb	r3, [r3, #8]
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	f003 030f 	and.w	r3, r3, #15
 80096dc:	2201      	movs	r2, #1
 80096de:	409a      	lsls	r2, r3
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80096ec:	0a52      	lsrs	r2, r2, #9
 80096ee:	fb02 f203 	mul.w	r2, r2, r3
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096fc:	661a      	str	r2, [r3, #96]	; 0x60
 80096fe:	e031      	b.n	8009764 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009704:	2b01      	cmp	r3, #1
 8009706:	d11d      	bne.n	8009744 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800970c:	041b      	lsls	r3, r3, #16
 800970e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009716:	0c1b      	lsrs	r3, r3, #16
 8009718:	431a      	orrs	r2, r3
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	691b      	ldr	r3, [r3, #16]
 8009722:	3301      	adds	r3, #1
 8009724:	029a      	lsls	r2, r3, #10
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009738:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	661a      	str	r2, [r3, #96]	; 0x60
 8009742:	e00f      	b.n	8009764 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a58      	ldr	r2, [pc, #352]	; (80098ac <HAL_SD_GetCardCSD+0x344>)
 800974a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009750:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	e09d      	b.n	80098a0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009768:	0b9b      	lsrs	r3, r3, #14
 800976a:	b2db      	uxtb	r3, r3
 800976c:	f003 0301 	and.w	r3, r3, #1
 8009770:	b2da      	uxtb	r2, r3
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800977a:	09db      	lsrs	r3, r3, #7
 800977c:	b2db      	uxtb	r3, r3
 800977e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009782:	b2da      	uxtb	r2, r3
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800978c:	b2db      	uxtb	r3, r3
 800978e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009792:	b2da      	uxtb	r2, r3
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800979c:	0fdb      	lsrs	r3, r3, #31
 800979e:	b2da      	uxtb	r2, r3
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097a8:	0f5b      	lsrs	r3, r3, #29
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	f003 0303 	and.w	r3, r3, #3
 80097b0:	b2da      	uxtb	r2, r3
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ba:	0e9b      	lsrs	r3, r3, #26
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	f003 0307 	and.w	r3, r3, #7
 80097c2:	b2da      	uxtb	r2, r3
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097cc:	0d9b      	lsrs	r3, r3, #22
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	f003 030f 	and.w	r3, r3, #15
 80097d4:	b2da      	uxtb	r2, r3
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097de:	0d5b      	lsrs	r3, r3, #21
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	f003 0301 	and.w	r3, r3, #1
 80097e6:	b2da      	uxtb	r2, r3
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097fa:	0c1b      	lsrs	r3, r3, #16
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	f003 0301 	and.w	r3, r3, #1
 8009802:	b2da      	uxtb	r2, r3
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800980e:	0bdb      	lsrs	r3, r3, #15
 8009810:	b2db      	uxtb	r3, r3
 8009812:	f003 0301 	and.w	r3, r3, #1
 8009816:	b2da      	uxtb	r2, r3
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009822:	0b9b      	lsrs	r3, r3, #14
 8009824:	b2db      	uxtb	r3, r3
 8009826:	f003 0301 	and.w	r3, r3, #1
 800982a:	b2da      	uxtb	r2, r3
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009836:	0b5b      	lsrs	r3, r3, #13
 8009838:	b2db      	uxtb	r3, r3
 800983a:	f003 0301 	and.w	r3, r3, #1
 800983e:	b2da      	uxtb	r2, r3
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800984a:	0b1b      	lsrs	r3, r3, #12
 800984c:	b2db      	uxtb	r3, r3
 800984e:	f003 0301 	and.w	r3, r3, #1
 8009852:	b2da      	uxtb	r2, r3
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800985e:	0a9b      	lsrs	r3, r3, #10
 8009860:	b2db      	uxtb	r3, r3
 8009862:	f003 0303 	and.w	r3, r3, #3
 8009866:	b2da      	uxtb	r2, r3
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009872:	0a1b      	lsrs	r3, r3, #8
 8009874:	b2db      	uxtb	r3, r3
 8009876:	f003 0303 	and.w	r3, r3, #3
 800987a:	b2da      	uxtb	r2, r3
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009886:	085b      	lsrs	r3, r3, #1
 8009888:	b2db      	uxtb	r3, r3
 800988a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800988e:	b2da      	uxtb	r2, r3
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	2201      	movs	r2, #1
 800989a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800989e:	2300      	movs	r3, #0
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	370c      	adds	r7, #12
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr
 80098ac:	004005ff 	.word	0x004005ff

080098b0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80098fa:	2300      	movs	r3, #0
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b086      	sub	sp, #24
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009910:	2300      	movs	r3, #0
 8009912:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009914:	f107 030c 	add.w	r3, r7, #12
 8009918:	4619      	mov	r1, r3
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 f96e 	bl	8009bfc <SD_SendStatus>
 8009920:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d005      	beq.n	8009934 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	431a      	orrs	r2, r3
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	0a5b      	lsrs	r3, r3, #9
 8009938:	f003 030f 	and.w	r3, r3, #15
 800993c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800993e:	693b      	ldr	r3, [r7, #16]
}
 8009940:	4618      	mov	r0, r3
 8009942:	3718      	adds	r7, #24
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009948:	b5b0      	push	{r4, r5, r7, lr}
 800994a:	b094      	sub	sp, #80	; 0x50
 800994c:	af04      	add	r7, sp, #16
 800994e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009950:	2301      	movs	r3, #1
 8009952:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4618      	mov	r0, r3
 800995a:	f001 feef 	bl	800b73c <SDIO_GetPowerState>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d102      	bne.n	800996a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009964:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009968:	e0b6      	b.n	8009ad8 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800996e:	2b03      	cmp	r3, #3
 8009970:	d02f      	beq.n	80099d2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4618      	mov	r0, r3
 8009978:	f002 f8d5 	bl	800bb26 <SDMMC_CmdSendCID>
 800997c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800997e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009980:	2b00      	cmp	r3, #0
 8009982:	d001      	beq.n	8009988 <SD_InitCard+0x40>
    {
      return errorstate;
 8009984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009986:	e0a7      	b.n	8009ad8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	2100      	movs	r1, #0
 800998e:	4618      	mov	r0, r3
 8009990:	f001 ff19 	bl	800b7c6 <SDIO_GetResponse>
 8009994:	4602      	mov	r2, r0
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2104      	movs	r1, #4
 80099a0:	4618      	mov	r0, r3
 80099a2:	f001 ff10 	bl	800b7c6 <SDIO_GetResponse>
 80099a6:	4602      	mov	r2, r0
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2108      	movs	r1, #8
 80099b2:	4618      	mov	r0, r3
 80099b4:	f001 ff07 	bl	800b7c6 <SDIO_GetResponse>
 80099b8:	4602      	mov	r2, r0
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	210c      	movs	r1, #12
 80099c4:	4618      	mov	r0, r3
 80099c6:	f001 fefe 	bl	800b7c6 <SDIO_GetResponse>
 80099ca:	4602      	mov	r2, r0
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099d6:	2b03      	cmp	r3, #3
 80099d8:	d00d      	beq.n	80099f6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f107 020e 	add.w	r2, r7, #14
 80099e2:	4611      	mov	r1, r2
 80099e4:	4618      	mov	r0, r3
 80099e6:	f002 f8db 	bl	800bba0 <SDMMC_CmdSetRelAdd>
 80099ea:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80099ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d001      	beq.n	80099f6 <SD_InitCard+0xae>
    {
      return errorstate;
 80099f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099f4:	e070      	b.n	8009ad8 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099fa:	2b03      	cmp	r3, #3
 80099fc:	d036      	beq.n	8009a6c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80099fe:	89fb      	ldrh	r3, [r7, #14]
 8009a00:	461a      	mov	r2, r3
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a0e:	041b      	lsls	r3, r3, #16
 8009a10:	4619      	mov	r1, r3
 8009a12:	4610      	mov	r0, r2
 8009a14:	f002 f8a5 	bl	800bb62 <SDMMC_CmdSendCSD>
 8009a18:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d001      	beq.n	8009a24 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a22:	e059      	b.n	8009ad8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2100      	movs	r1, #0
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f001 fecb 	bl	800b7c6 <SDIO_GetResponse>
 8009a30:	4602      	mov	r2, r0
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2104      	movs	r1, #4
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f001 fec2 	bl	800b7c6 <SDIO_GetResponse>
 8009a42:	4602      	mov	r2, r0
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2108      	movs	r1, #8
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f001 feb9 	bl	800b7c6 <SDIO_GetResponse>
 8009a54:	4602      	mov	r2, r0
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	210c      	movs	r1, #12
 8009a60:	4618      	mov	r0, r3
 8009a62:	f001 feb0 	bl	800b7c6 <SDIO_GetResponse>
 8009a66:	4602      	mov	r2, r0
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	2104      	movs	r1, #4
 8009a72:	4618      	mov	r0, r3
 8009a74:	f001 fea7 	bl	800b7c6 <SDIO_GetResponse>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	0d1a      	lsrs	r2, r3, #20
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009a80:	f107 0310 	add.w	r3, r7, #16
 8009a84:	4619      	mov	r1, r3
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f7ff fd6e 	bl	8009568 <HAL_SD_GetCardCSD>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d002      	beq.n	8009a98 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009a96:	e01f      	b.n	8009ad8 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6819      	ldr	r1, [r3, #0]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009aa0:	041b      	lsls	r3, r3, #16
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	f04f 0300 	mov.w	r3, #0
 8009aa8:	4608      	mov	r0, r1
 8009aaa:	f001 ff97 	bl	800b9dc <SDMMC_CmdSelDesel>
 8009aae:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d001      	beq.n	8009aba <SD_InitCard+0x172>
  {
    return errorstate;
 8009ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ab8:	e00e      	b.n	8009ad8 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681d      	ldr	r5, [r3, #0]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	466c      	mov	r4, sp
 8009ac2:	f103 0210 	add.w	r2, r3, #16
 8009ac6:	ca07      	ldmia	r2, {r0, r1, r2}
 8009ac8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009acc:	3304      	adds	r3, #4
 8009ace:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009ad0:	4628      	mov	r0, r5
 8009ad2:	f001 fddb 	bl	800b68c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009ad6:	2300      	movs	r3, #0
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3740      	adds	r7, #64	; 0x40
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bdb0      	pop	{r4, r5, r7, pc}

08009ae0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b086      	sub	sp, #24
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009aec:	2300      	movs	r3, #0
 8009aee:	617b      	str	r3, [r7, #20]
 8009af0:	2300      	movs	r3, #0
 8009af2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4618      	mov	r0, r3
 8009afa:	f001 ff92 	bl	800ba22 <SDMMC_CmdGoIdleState>
 8009afe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d001      	beq.n	8009b0a <SD_PowerON+0x2a>
  {
    return errorstate;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	e072      	b.n	8009bf0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f001 ffa5 	bl	800ba5e <SDMMC_CmdOperCond>
 8009b14:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d00d      	beq.n	8009b38 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4618      	mov	r0, r3
 8009b28:	f001 ff7b 	bl	800ba22 <SDMMC_CmdGoIdleState>
 8009b2c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d004      	beq.n	8009b3e <SD_PowerON+0x5e>
    {
      return errorstate;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	e05b      	b.n	8009bf0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d137      	bne.n	8009bb6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2100      	movs	r1, #0
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f001 ffa5 	bl	800ba9c <SDMMC_CmdAppCommand>
 8009b52:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d02d      	beq.n	8009bb6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b5a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009b5e:	e047      	b.n	8009bf0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	2100      	movs	r1, #0
 8009b66:	4618      	mov	r0, r3
 8009b68:	f001 ff98 	bl	800ba9c <SDMMC_CmdAppCommand>
 8009b6c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d001      	beq.n	8009b78 <SD_PowerON+0x98>
    {
      return errorstate;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	e03b      	b.n	8009bf0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	491e      	ldr	r1, [pc, #120]	; (8009bf8 <SD_PowerON+0x118>)
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f001 ffae 	bl	800bae0 <SDMMC_CmdAppOperCommand>
 8009b84:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d002      	beq.n	8009b92 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009b90:	e02e      	b.n	8009bf0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	2100      	movs	r1, #0
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f001 fe14 	bl	800b7c6 <SDIO_GetResponse>
 8009b9e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	0fdb      	lsrs	r3, r3, #31
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d101      	bne.n	8009bac <SD_PowerON+0xcc>
 8009ba8:	2301      	movs	r3, #1
 8009baa:	e000      	b.n	8009bae <SD_PowerON+0xce>
 8009bac:	2300      	movs	r3, #0
 8009bae:	613b      	str	r3, [r7, #16]

    count++;
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d802      	bhi.n	8009bc6 <SD_PowerON+0xe6>
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d0cc      	beq.n	8009b60 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d902      	bls.n	8009bd6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009bd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009bd4:	e00c      	b.n	8009bf0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d003      	beq.n	8009be8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2201      	movs	r2, #1
 8009be4:	645a      	str	r2, [r3, #68]	; 0x44
 8009be6:	e002      	b.n	8009bee <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009bee:	2300      	movs	r3, #0
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3718      	adds	r7, #24
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}
 8009bf8:	c1100000 	.word	0xc1100000

08009bfc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d102      	bne.n	8009c12 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009c0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009c10:	e018      	b.n	8009c44 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681a      	ldr	r2, [r3, #0]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c1a:	041b      	lsls	r3, r3, #16
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	4610      	mov	r0, r2
 8009c20:	f001 ffdf 	bl	800bbe2 <SDMMC_CmdSendStatus>
 8009c24:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d001      	beq.n	8009c30 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	e009      	b.n	8009c44 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	2100      	movs	r1, #0
 8009c36:	4618      	mov	r0, r3
 8009c38:	f001 fdc5 	bl	800b7c6 <SDIO_GetResponse>
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009c42:	2300      	movs	r3, #0
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3710      	adds	r7, #16
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d101      	bne.n	8009c5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e07b      	b.n	8009d56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d108      	bne.n	8009c78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c6e:	d009      	beq.n	8009c84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2200      	movs	r2, #0
 8009c74:	61da      	str	r2, [r3, #28]
 8009c76:	e005      	b.n	8009c84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2200      	movs	r2, #0
 8009c88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d106      	bne.n	8009ca4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f7fa fc5a 	bl	8004558 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2202      	movs	r2, #2
 8009ca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009cba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009ccc:	431a      	orrs	r2, r3
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009cd6:	431a      	orrs	r2, r3
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	691b      	ldr	r3, [r3, #16]
 8009cdc:	f003 0302 	and.w	r3, r3, #2
 8009ce0:	431a      	orrs	r2, r3
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	695b      	ldr	r3, [r3, #20]
 8009ce6:	f003 0301 	and.w	r3, r3, #1
 8009cea:	431a      	orrs	r2, r3
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	699b      	ldr	r3, [r3, #24]
 8009cf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009cf4:	431a      	orrs	r2, r3
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	69db      	ldr	r3, [r3, #28]
 8009cfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009cfe:	431a      	orrs	r2, r3
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6a1b      	ldr	r3, [r3, #32]
 8009d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d08:	ea42 0103 	orr.w	r1, r2, r3
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	430a      	orrs	r2, r1
 8009d1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	699b      	ldr	r3, [r3, #24]
 8009d20:	0c1b      	lsrs	r3, r3, #16
 8009d22:	f003 0104 	and.w	r1, r3, #4
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d2a:	f003 0210 	and.w	r2, r3, #16
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	430a      	orrs	r2, r1
 8009d34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	69da      	ldr	r2, [r3, #28]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009d44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009d54:	2300      	movs	r3, #0
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3708      	adds	r7, #8
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b088      	sub	sp, #32
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	60f8      	str	r0, [r7, #12]
 8009d66:	60b9      	str	r1, [r7, #8]
 8009d68:	603b      	str	r3, [r7, #0]
 8009d6a:	4613      	mov	r3, r2
 8009d6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	d101      	bne.n	8009d80 <HAL_SPI_Transmit+0x22>
 8009d7c:	2302      	movs	r3, #2
 8009d7e:	e126      	b.n	8009fce <HAL_SPI_Transmit+0x270>
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2201      	movs	r2, #1
 8009d84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d88:	f7fc fbd6 	bl	8006538 <HAL_GetTick>
 8009d8c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009d8e:	88fb      	ldrh	r3, [r7, #6]
 8009d90:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d98:	b2db      	uxtb	r3, r3
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d002      	beq.n	8009da4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009d9e:	2302      	movs	r3, #2
 8009da0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009da2:	e10b      	b.n	8009fbc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d002      	beq.n	8009db0 <HAL_SPI_Transmit+0x52>
 8009daa:	88fb      	ldrh	r3, [r7, #6]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d102      	bne.n	8009db6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009db0:	2301      	movs	r3, #1
 8009db2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009db4:	e102      	b.n	8009fbc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2203      	movs	r2, #3
 8009dba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	68ba      	ldr	r2, [r7, #8]
 8009dc8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	88fa      	ldrh	r2, [r7, #6]
 8009dce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	88fa      	ldrh	r2, [r7, #6]
 8009dd4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2200      	movs	r2, #0
 8009de0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2200      	movs	r2, #0
 8009de6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2200      	movs	r2, #0
 8009dec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2200      	movs	r2, #0
 8009df2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	689b      	ldr	r3, [r3, #8]
 8009df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009dfc:	d10f      	bne.n	8009e1e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e1c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e28:	2b40      	cmp	r3, #64	; 0x40
 8009e2a:	d007      	beq.n	8009e3c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	68db      	ldr	r3, [r3, #12]
 8009e40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e44:	d14b      	bne.n	8009ede <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d002      	beq.n	8009e54 <HAL_SPI_Transmit+0xf6>
 8009e4e:	8afb      	ldrh	r3, [r7, #22]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d13e      	bne.n	8009ed2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e58:	881a      	ldrh	r2, [r3, #0]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e64:	1c9a      	adds	r2, r3, #2
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	3b01      	subs	r3, #1
 8009e72:	b29a      	uxth	r2, r3
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009e78:	e02b      	b.n	8009ed2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	689b      	ldr	r3, [r3, #8]
 8009e80:	f003 0302 	and.w	r3, r3, #2
 8009e84:	2b02      	cmp	r3, #2
 8009e86:	d112      	bne.n	8009eae <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e8c:	881a      	ldrh	r2, [r3, #0]
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e98:	1c9a      	adds	r2, r3, #2
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	3b01      	subs	r3, #1
 8009ea6:	b29a      	uxth	r2, r3
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	86da      	strh	r2, [r3, #54]	; 0x36
 8009eac:	e011      	b.n	8009ed2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009eae:	f7fc fb43 	bl	8006538 <HAL_GetTick>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	69bb      	ldr	r3, [r7, #24]
 8009eb6:	1ad3      	subs	r3, r2, r3
 8009eb8:	683a      	ldr	r2, [r7, #0]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d803      	bhi.n	8009ec6 <HAL_SPI_Transmit+0x168>
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ec4:	d102      	bne.n	8009ecc <HAL_SPI_Transmit+0x16e>
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d102      	bne.n	8009ed2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009ecc:	2303      	movs	r3, #3
 8009ece:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009ed0:	e074      	b.n	8009fbc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d1ce      	bne.n	8009e7a <HAL_SPI_Transmit+0x11c>
 8009edc:	e04c      	b.n	8009f78 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d002      	beq.n	8009eec <HAL_SPI_Transmit+0x18e>
 8009ee6:	8afb      	ldrh	r3, [r7, #22]
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d140      	bne.n	8009f6e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	330c      	adds	r3, #12
 8009ef6:	7812      	ldrb	r2, [r2, #0]
 8009ef8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009efe:	1c5a      	adds	r2, r3, #1
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	3b01      	subs	r3, #1
 8009f0c:	b29a      	uxth	r2, r3
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009f12:	e02c      	b.n	8009f6e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	f003 0302 	and.w	r3, r3, #2
 8009f1e:	2b02      	cmp	r3, #2
 8009f20:	d113      	bne.n	8009f4a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	330c      	adds	r3, #12
 8009f2c:	7812      	ldrb	r2, [r2, #0]
 8009f2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f34:	1c5a      	adds	r2, r3, #1
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f3e:	b29b      	uxth	r3, r3
 8009f40:	3b01      	subs	r3, #1
 8009f42:	b29a      	uxth	r2, r3
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	86da      	strh	r2, [r3, #54]	; 0x36
 8009f48:	e011      	b.n	8009f6e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f4a:	f7fc faf5 	bl	8006538 <HAL_GetTick>
 8009f4e:	4602      	mov	r2, r0
 8009f50:	69bb      	ldr	r3, [r7, #24]
 8009f52:	1ad3      	subs	r3, r2, r3
 8009f54:	683a      	ldr	r2, [r7, #0]
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d803      	bhi.n	8009f62 <HAL_SPI_Transmit+0x204>
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f60:	d102      	bne.n	8009f68 <HAL_SPI_Transmit+0x20a>
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d102      	bne.n	8009f6e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009f68:	2303      	movs	r3, #3
 8009f6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009f6c:	e026      	b.n	8009fbc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d1cd      	bne.n	8009f14 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009f78:	69ba      	ldr	r2, [r7, #24]
 8009f7a:	6839      	ldr	r1, [r7, #0]
 8009f7c:	68f8      	ldr	r0, [r7, #12]
 8009f7e:	f000 fbcb 	bl	800a718 <SPI_EndRxTxTransaction>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d002      	beq.n	8009f8e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2220      	movs	r2, #32
 8009f8c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	689b      	ldr	r3, [r3, #8]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d10a      	bne.n	8009fac <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009f96:	2300      	movs	r3, #0
 8009f98:	613b      	str	r3, [r7, #16]
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	613b      	str	r3, [r7, #16]
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	613b      	str	r3, [r7, #16]
 8009faa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d002      	beq.n	8009fba <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	77fb      	strb	r3, [r7, #31]
 8009fb8:	e000      	b.n	8009fbc <HAL_SPI_Transmit+0x25e>
  }

error:
 8009fba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009fcc:	7ffb      	ldrb	r3, [r7, #31]
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3720      	adds	r7, #32
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}

08009fd6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fd6:	b580      	push	{r7, lr}
 8009fd8:	b088      	sub	sp, #32
 8009fda:	af02      	add	r7, sp, #8
 8009fdc:	60f8      	str	r0, [r7, #12]
 8009fde:	60b9      	str	r1, [r7, #8]
 8009fe0:	603b      	str	r3, [r7, #0]
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ff2:	d112      	bne.n	800a01a <HAL_SPI_Receive+0x44>
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d10e      	bne.n	800a01a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2204      	movs	r2, #4
 800a000:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a004:	88fa      	ldrh	r2, [r7, #6]
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	9300      	str	r3, [sp, #0]
 800a00a:	4613      	mov	r3, r2
 800a00c:	68ba      	ldr	r2, [r7, #8]
 800a00e:	68b9      	ldr	r1, [r7, #8]
 800a010:	68f8      	ldr	r0, [r7, #12]
 800a012:	f000 f8f1 	bl	800a1f8 <HAL_SPI_TransmitReceive>
 800a016:	4603      	mov	r3, r0
 800a018:	e0ea      	b.n	800a1f0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a020:	2b01      	cmp	r3, #1
 800a022:	d101      	bne.n	800a028 <HAL_SPI_Receive+0x52>
 800a024:	2302      	movs	r3, #2
 800a026:	e0e3      	b.n	800a1f0 <HAL_SPI_Receive+0x21a>
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2201      	movs	r2, #1
 800a02c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a030:	f7fc fa82 	bl	8006538 <HAL_GetTick>
 800a034:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	2b01      	cmp	r3, #1
 800a040:	d002      	beq.n	800a048 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800a042:	2302      	movs	r3, #2
 800a044:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a046:	e0ca      	b.n	800a1de <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d002      	beq.n	800a054 <HAL_SPI_Receive+0x7e>
 800a04e:	88fb      	ldrh	r3, [r7, #6]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d102      	bne.n	800a05a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800a054:	2301      	movs	r3, #1
 800a056:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a058:	e0c1      	b.n	800a1de <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2204      	movs	r2, #4
 800a05e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2200      	movs	r2, #0
 800a066:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	68ba      	ldr	r2, [r7, #8]
 800a06c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	88fa      	ldrh	r2, [r7, #6]
 800a072:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	88fa      	ldrh	r2, [r7, #6]
 800a078:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2200      	movs	r2, #0
 800a07e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2200      	movs	r2, #0
 800a084:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2200      	movs	r2, #0
 800a08a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2200      	movs	r2, #0
 800a090:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2200      	movs	r2, #0
 800a096:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0a0:	d10f      	bne.n	800a0c2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a0c0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0cc:	2b40      	cmp	r3, #64	; 0x40
 800a0ce:	d007      	beq.n	800a0e0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a0de:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d162      	bne.n	800a1ae <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a0e8:	e02e      	b.n	800a148 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	f003 0301 	and.w	r3, r3, #1
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d115      	bne.n	800a124 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f103 020c 	add.w	r2, r3, #12
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a104:	7812      	ldrb	r2, [r2, #0]
 800a106:	b2d2      	uxtb	r2, r2
 800a108:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a10e:	1c5a      	adds	r2, r3, #1
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a118:	b29b      	uxth	r3, r3
 800a11a:	3b01      	subs	r3, #1
 800a11c:	b29a      	uxth	r2, r3
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a122:	e011      	b.n	800a148 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a124:	f7fc fa08 	bl	8006538 <HAL_GetTick>
 800a128:	4602      	mov	r2, r0
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	1ad3      	subs	r3, r2, r3
 800a12e:	683a      	ldr	r2, [r7, #0]
 800a130:	429a      	cmp	r2, r3
 800a132:	d803      	bhi.n	800a13c <HAL_SPI_Receive+0x166>
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a13a:	d102      	bne.n	800a142 <HAL_SPI_Receive+0x16c>
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d102      	bne.n	800a148 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800a142:	2303      	movs	r3, #3
 800a144:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a146:	e04a      	b.n	800a1de <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d1cb      	bne.n	800a0ea <HAL_SPI_Receive+0x114>
 800a152:	e031      	b.n	800a1b8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	689b      	ldr	r3, [r3, #8]
 800a15a:	f003 0301 	and.w	r3, r3, #1
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d113      	bne.n	800a18a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	68da      	ldr	r2, [r3, #12]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a16c:	b292      	uxth	r2, r2
 800a16e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a174:	1c9a      	adds	r2, r3, #2
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a17e:	b29b      	uxth	r3, r3
 800a180:	3b01      	subs	r3, #1
 800a182:	b29a      	uxth	r2, r3
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a188:	e011      	b.n	800a1ae <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a18a:	f7fc f9d5 	bl	8006538 <HAL_GetTick>
 800a18e:	4602      	mov	r2, r0
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	1ad3      	subs	r3, r2, r3
 800a194:	683a      	ldr	r2, [r7, #0]
 800a196:	429a      	cmp	r2, r3
 800a198:	d803      	bhi.n	800a1a2 <HAL_SPI_Receive+0x1cc>
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1a0:	d102      	bne.n	800a1a8 <HAL_SPI_Receive+0x1d2>
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d102      	bne.n	800a1ae <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800a1a8:	2303      	movs	r3, #3
 800a1aa:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a1ac:	e017      	b.n	800a1de <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d1cd      	bne.n	800a154 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a1b8:	693a      	ldr	r2, [r7, #16]
 800a1ba:	6839      	ldr	r1, [r7, #0]
 800a1bc:	68f8      	ldr	r0, [r7, #12]
 800a1be:	f000 fa45 	bl	800a64c <SPI_EndRxTransaction>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d002      	beq.n	800a1ce <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2220      	movs	r2, #32
 800a1cc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d002      	beq.n	800a1dc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	75fb      	strb	r3, [r7, #23]
 800a1da:	e000      	b.n	800a1de <HAL_SPI_Receive+0x208>
  }

error :
 800a1dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a1ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3718      	adds	r7, #24
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b08c      	sub	sp, #48	; 0x30
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	60f8      	str	r0, [r7, #12]
 800a200:	60b9      	str	r1, [r7, #8]
 800a202:	607a      	str	r2, [r7, #4]
 800a204:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a206:	2301      	movs	r3, #1
 800a208:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a20a:	2300      	movs	r3, #0
 800a20c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a216:	2b01      	cmp	r3, #1
 800a218:	d101      	bne.n	800a21e <HAL_SPI_TransmitReceive+0x26>
 800a21a:	2302      	movs	r3, #2
 800a21c:	e18a      	b.n	800a534 <HAL_SPI_TransmitReceive+0x33c>
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2201      	movs	r2, #1
 800a222:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a226:	f7fc f987 	bl	8006538 <HAL_GetTick>
 800a22a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a23c:	887b      	ldrh	r3, [r7, #2]
 800a23e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a240:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a244:	2b01      	cmp	r3, #1
 800a246:	d00f      	beq.n	800a268 <HAL_SPI_TransmitReceive+0x70>
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a24e:	d107      	bne.n	800a260 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d103      	bne.n	800a260 <HAL_SPI_TransmitReceive+0x68>
 800a258:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a25c:	2b04      	cmp	r3, #4
 800a25e:	d003      	beq.n	800a268 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a260:	2302      	movs	r3, #2
 800a262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a266:	e15b      	b.n	800a520 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d005      	beq.n	800a27a <HAL_SPI_TransmitReceive+0x82>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d002      	beq.n	800a27a <HAL_SPI_TransmitReceive+0x82>
 800a274:	887b      	ldrh	r3, [r7, #2]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d103      	bne.n	800a282 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a27a:	2301      	movs	r3, #1
 800a27c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a280:	e14e      	b.n	800a520 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	2b04      	cmp	r3, #4
 800a28c:	d003      	beq.n	800a296 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2205      	movs	r2, #5
 800a292:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2200      	movs	r2, #0
 800a29a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	887a      	ldrh	r2, [r7, #2]
 800a2a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	887a      	ldrh	r2, [r7, #2]
 800a2ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	68ba      	ldr	r2, [r7, #8]
 800a2b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	887a      	ldrh	r2, [r7, #2]
 800a2b8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	887a      	ldrh	r2, [r7, #2]
 800a2be:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2d6:	2b40      	cmp	r3, #64	; 0x40
 800a2d8:	d007      	beq.n	800a2ea <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	681a      	ldr	r2, [r3, #0]
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a2e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2f2:	d178      	bne.n	800a3e6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d002      	beq.n	800a302 <HAL_SPI_TransmitReceive+0x10a>
 800a2fc:	8b7b      	ldrh	r3, [r7, #26]
 800a2fe:	2b01      	cmp	r3, #1
 800a300:	d166      	bne.n	800a3d0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a306:	881a      	ldrh	r2, [r3, #0]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a312:	1c9a      	adds	r2, r3, #2
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a31c:	b29b      	uxth	r3, r3
 800a31e:	3b01      	subs	r3, #1
 800a320:	b29a      	uxth	r2, r3
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a326:	e053      	b.n	800a3d0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	f003 0302 	and.w	r3, r3, #2
 800a332:	2b02      	cmp	r3, #2
 800a334:	d11b      	bne.n	800a36e <HAL_SPI_TransmitReceive+0x176>
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d016      	beq.n	800a36e <HAL_SPI_TransmitReceive+0x176>
 800a340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a342:	2b01      	cmp	r3, #1
 800a344:	d113      	bne.n	800a36e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a34a:	881a      	ldrh	r2, [r3, #0]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a356:	1c9a      	adds	r2, r3, #2
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a360:	b29b      	uxth	r3, r3
 800a362:	3b01      	subs	r3, #1
 800a364:	b29a      	uxth	r2, r3
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a36a:	2300      	movs	r3, #0
 800a36c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	f003 0301 	and.w	r3, r3, #1
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d119      	bne.n	800a3b0 <HAL_SPI_TransmitReceive+0x1b8>
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a380:	b29b      	uxth	r3, r3
 800a382:	2b00      	cmp	r3, #0
 800a384:	d014      	beq.n	800a3b0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	68da      	ldr	r2, [r3, #12]
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a390:	b292      	uxth	r2, r2
 800a392:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a398:	1c9a      	adds	r2, r3, #2
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	3b01      	subs	r3, #1
 800a3a6:	b29a      	uxth	r2, r3
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a3b0:	f7fc f8c2 	bl	8006538 <HAL_GetTick>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b8:	1ad3      	subs	r3, r2, r3
 800a3ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d807      	bhi.n	800a3d0 <HAL_SPI_TransmitReceive+0x1d8>
 800a3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3c6:	d003      	beq.n	800a3d0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a3c8:	2303      	movs	r3, #3
 800a3ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a3ce:	e0a7      	b.n	800a520 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d1a6      	bne.n	800a328 <HAL_SPI_TransmitReceive+0x130>
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d1a1      	bne.n	800a328 <HAL_SPI_TransmitReceive+0x130>
 800a3e4:	e07c      	b.n	800a4e0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d002      	beq.n	800a3f4 <HAL_SPI_TransmitReceive+0x1fc>
 800a3ee:	8b7b      	ldrh	r3, [r7, #26]
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d16b      	bne.n	800a4cc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	330c      	adds	r3, #12
 800a3fe:	7812      	ldrb	r2, [r2, #0]
 800a400:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a406:	1c5a      	adds	r2, r3, #1
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a410:	b29b      	uxth	r3, r3
 800a412:	3b01      	subs	r3, #1
 800a414:	b29a      	uxth	r2, r3
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a41a:	e057      	b.n	800a4cc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	f003 0302 	and.w	r3, r3, #2
 800a426:	2b02      	cmp	r3, #2
 800a428:	d11c      	bne.n	800a464 <HAL_SPI_TransmitReceive+0x26c>
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a42e:	b29b      	uxth	r3, r3
 800a430:	2b00      	cmp	r3, #0
 800a432:	d017      	beq.n	800a464 <HAL_SPI_TransmitReceive+0x26c>
 800a434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a436:	2b01      	cmp	r3, #1
 800a438:	d114      	bne.n	800a464 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	330c      	adds	r3, #12
 800a444:	7812      	ldrb	r2, [r2, #0]
 800a446:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a44c:	1c5a      	adds	r2, r3, #1
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a456:	b29b      	uxth	r3, r3
 800a458:	3b01      	subs	r3, #1
 800a45a:	b29a      	uxth	r2, r3
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a460:	2300      	movs	r3, #0
 800a462:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	689b      	ldr	r3, [r3, #8]
 800a46a:	f003 0301 	and.w	r3, r3, #1
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d119      	bne.n	800a4a6 <HAL_SPI_TransmitReceive+0x2ae>
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a476:	b29b      	uxth	r3, r3
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d014      	beq.n	800a4a6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	68da      	ldr	r2, [r3, #12]
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a486:	b2d2      	uxtb	r2, r2
 800a488:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a48e:	1c5a      	adds	r2, r3, #1
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a498:	b29b      	uxth	r3, r3
 800a49a:	3b01      	subs	r3, #1
 800a49c:	b29a      	uxth	r2, r3
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a4a6:	f7fc f847 	bl	8006538 <HAL_GetTick>
 800a4aa:	4602      	mov	r2, r0
 800a4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ae:	1ad3      	subs	r3, r2, r3
 800a4b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d803      	bhi.n	800a4be <HAL_SPI_TransmitReceive+0x2c6>
 800a4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4bc:	d102      	bne.n	800a4c4 <HAL_SPI_TransmitReceive+0x2cc>
 800a4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d103      	bne.n	800a4cc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a4c4:	2303      	movs	r3, #3
 800a4c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a4ca:	e029      	b.n	800a520 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4d0:	b29b      	uxth	r3, r3
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d1a2      	bne.n	800a41c <HAL_SPI_TransmitReceive+0x224>
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d19d      	bne.n	800a41c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a4e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a4e4:	68f8      	ldr	r0, [r7, #12]
 800a4e6:	f000 f917 	bl	800a718 <SPI_EndRxTxTransaction>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d006      	beq.n	800a4fe <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2220      	movs	r2, #32
 800a4fa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a4fc:	e010      	b.n	800a520 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	689b      	ldr	r3, [r3, #8]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d10b      	bne.n	800a51e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a506:	2300      	movs	r3, #0
 800a508:	617b      	str	r3, [r7, #20]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	68db      	ldr	r3, [r3, #12]
 800a510:	617b      	str	r3, [r7, #20]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	617b      	str	r3, [r7, #20]
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	e000      	b.n	800a520 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a51e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2201      	movs	r2, #1
 800a524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a530:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a534:	4618      	mov	r0, r3
 800a536:	3730      	adds	r7, #48	; 0x30
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b088      	sub	sp, #32
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	603b      	str	r3, [r7, #0]
 800a548:	4613      	mov	r3, r2
 800a54a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a54c:	f7fb fff4 	bl	8006538 <HAL_GetTick>
 800a550:	4602      	mov	r2, r0
 800a552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a554:	1a9b      	subs	r3, r3, r2
 800a556:	683a      	ldr	r2, [r7, #0]
 800a558:	4413      	add	r3, r2
 800a55a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a55c:	f7fb ffec 	bl	8006538 <HAL_GetTick>
 800a560:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a562:	4b39      	ldr	r3, [pc, #228]	; (800a648 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	015b      	lsls	r3, r3, #5
 800a568:	0d1b      	lsrs	r3, r3, #20
 800a56a:	69fa      	ldr	r2, [r7, #28]
 800a56c:	fb02 f303 	mul.w	r3, r2, r3
 800a570:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a572:	e054      	b.n	800a61e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a57a:	d050      	beq.n	800a61e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a57c:	f7fb ffdc 	bl	8006538 <HAL_GetTick>
 800a580:	4602      	mov	r2, r0
 800a582:	69bb      	ldr	r3, [r7, #24]
 800a584:	1ad3      	subs	r3, r2, r3
 800a586:	69fa      	ldr	r2, [r7, #28]
 800a588:	429a      	cmp	r2, r3
 800a58a:	d902      	bls.n	800a592 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a58c:	69fb      	ldr	r3, [r7, #28]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d13d      	bne.n	800a60e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	685a      	ldr	r2, [r3, #4]
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a5a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a5aa:	d111      	bne.n	800a5d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5b4:	d004      	beq.n	800a5c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	689b      	ldr	r3, [r3, #8]
 800a5ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5be:	d107      	bne.n	800a5d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5d8:	d10f      	bne.n	800a5fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a5e8:	601a      	str	r2, [r3, #0]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a5f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2200      	movs	r2, #0
 800a606:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a60a:	2303      	movs	r3, #3
 800a60c:	e017      	b.n	800a63e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d101      	bne.n	800a618 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a614:	2300      	movs	r3, #0
 800a616:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	3b01      	subs	r3, #1
 800a61c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	689a      	ldr	r2, [r3, #8]
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	4013      	ands	r3, r2
 800a628:	68ba      	ldr	r2, [r7, #8]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	bf0c      	ite	eq
 800a62e:	2301      	moveq	r3, #1
 800a630:	2300      	movne	r3, #0
 800a632:	b2db      	uxtb	r3, r3
 800a634:	461a      	mov	r2, r3
 800a636:	79fb      	ldrb	r3, [r7, #7]
 800a638:	429a      	cmp	r2, r3
 800a63a:	d19b      	bne.n	800a574 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a63c:	2300      	movs	r3, #0
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3720      	adds	r7, #32
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	20000008 	.word	0x20000008

0800a64c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b086      	sub	sp, #24
 800a650:	af02      	add	r7, sp, #8
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a660:	d111      	bne.n	800a686 <SPI_EndRxTransaction+0x3a>
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	689b      	ldr	r3, [r3, #8]
 800a666:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a66a:	d004      	beq.n	800a676 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	689b      	ldr	r3, [r3, #8]
 800a670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a674:	d107      	bne.n	800a686 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a684:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a68e:	d12a      	bne.n	800a6e6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	689b      	ldr	r3, [r3, #8]
 800a694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a698:	d012      	beq.n	800a6c0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	9300      	str	r3, [sp, #0]
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	2180      	movs	r1, #128	; 0x80
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f7ff ff49 	bl	800a53c <SPI_WaitFlagStateUntilTimeout>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d02d      	beq.n	800a70c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6b4:	f043 0220 	orr.w	r2, r3, #32
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a6bc:	2303      	movs	r3, #3
 800a6be:	e026      	b.n	800a70e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	9300      	str	r3, [sp, #0]
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	2101      	movs	r1, #1
 800a6ca:	68f8      	ldr	r0, [r7, #12]
 800a6cc:	f7ff ff36 	bl	800a53c <SPI_WaitFlagStateUntilTimeout>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d01a      	beq.n	800a70c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6da:	f043 0220 	orr.w	r2, r3, #32
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a6e2:	2303      	movs	r3, #3
 800a6e4:	e013      	b.n	800a70e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	9300      	str	r3, [sp, #0]
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	2101      	movs	r1, #1
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f7ff ff23 	bl	800a53c <SPI_WaitFlagStateUntilTimeout>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d007      	beq.n	800a70c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a700:	f043 0220 	orr.w	r2, r3, #32
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a708:	2303      	movs	r3, #3
 800a70a:	e000      	b.n	800a70e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a70c:	2300      	movs	r3, #0
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3710      	adds	r7, #16
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
	...

0800a718 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b088      	sub	sp, #32
 800a71c:	af02      	add	r7, sp, #8
 800a71e:	60f8      	str	r0, [r7, #12]
 800a720:	60b9      	str	r1, [r7, #8]
 800a722:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a724:	4b1b      	ldr	r3, [pc, #108]	; (800a794 <SPI_EndRxTxTransaction+0x7c>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4a1b      	ldr	r2, [pc, #108]	; (800a798 <SPI_EndRxTxTransaction+0x80>)
 800a72a:	fba2 2303 	umull	r2, r3, r2, r3
 800a72e:	0d5b      	lsrs	r3, r3, #21
 800a730:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a734:	fb02 f303 	mul.w	r3, r2, r3
 800a738:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a742:	d112      	bne.n	800a76a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	9300      	str	r3, [sp, #0]
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	2200      	movs	r2, #0
 800a74c:	2180      	movs	r1, #128	; 0x80
 800a74e:	68f8      	ldr	r0, [r7, #12]
 800a750:	f7ff fef4 	bl	800a53c <SPI_WaitFlagStateUntilTimeout>
 800a754:	4603      	mov	r3, r0
 800a756:	2b00      	cmp	r3, #0
 800a758:	d016      	beq.n	800a788 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a75e:	f043 0220 	orr.w	r2, r3, #32
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a766:	2303      	movs	r3, #3
 800a768:	e00f      	b.n	800a78a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d00a      	beq.n	800a786 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	3b01      	subs	r3, #1
 800a774:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	689b      	ldr	r3, [r3, #8]
 800a77c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a780:	2b80      	cmp	r3, #128	; 0x80
 800a782:	d0f2      	beq.n	800a76a <SPI_EndRxTxTransaction+0x52>
 800a784:	e000      	b.n	800a788 <SPI_EndRxTxTransaction+0x70>
        break;
 800a786:	bf00      	nop
  }

  return HAL_OK;
 800a788:	2300      	movs	r3, #0
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3718      	adds	r7, #24
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop
 800a794:	20000008 	.word	0x20000008
 800a798:	165e9f81 	.word	0x165e9f81

0800a79c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b082      	sub	sp, #8
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d101      	bne.n	800a7ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	e041      	b.n	800a832 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d106      	bne.n	800a7c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f7f9 ffe6 	bl	8004794 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2202      	movs	r2, #2
 800a7cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	3304      	adds	r3, #4
 800a7d8:	4619      	mov	r1, r3
 800a7da:	4610      	mov	r0, r2
 800a7dc:	f000 f9a0 	bl	800ab20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2201      	movs	r2, #1
 800a804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2201      	movs	r2, #1
 800a80c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2201      	movs	r2, #1
 800a814:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2201      	movs	r2, #1
 800a82c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a830:	2300      	movs	r3, #0
}
 800a832:	4618      	mov	r0, r3
 800a834:	3708      	adds	r7, #8
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
	...

0800a83c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b084      	sub	sp, #16
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d109      	bne.n	800a860 <HAL_TIM_PWM_Start+0x24>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a852:	b2db      	uxtb	r3, r3
 800a854:	2b01      	cmp	r3, #1
 800a856:	bf14      	ite	ne
 800a858:	2301      	movne	r3, #1
 800a85a:	2300      	moveq	r3, #0
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	e022      	b.n	800a8a6 <HAL_TIM_PWM_Start+0x6a>
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	2b04      	cmp	r3, #4
 800a864:	d109      	bne.n	800a87a <HAL_TIM_PWM_Start+0x3e>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a86c:	b2db      	uxtb	r3, r3
 800a86e:	2b01      	cmp	r3, #1
 800a870:	bf14      	ite	ne
 800a872:	2301      	movne	r3, #1
 800a874:	2300      	moveq	r3, #0
 800a876:	b2db      	uxtb	r3, r3
 800a878:	e015      	b.n	800a8a6 <HAL_TIM_PWM_Start+0x6a>
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	2b08      	cmp	r3, #8
 800a87e:	d109      	bne.n	800a894 <HAL_TIM_PWM_Start+0x58>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a886:	b2db      	uxtb	r3, r3
 800a888:	2b01      	cmp	r3, #1
 800a88a:	bf14      	ite	ne
 800a88c:	2301      	movne	r3, #1
 800a88e:	2300      	moveq	r3, #0
 800a890:	b2db      	uxtb	r3, r3
 800a892:	e008      	b.n	800a8a6 <HAL_TIM_PWM_Start+0x6a>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a89a:	b2db      	uxtb	r3, r3
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	bf14      	ite	ne
 800a8a0:	2301      	movne	r3, #1
 800a8a2:	2300      	moveq	r3, #0
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d001      	beq.n	800a8ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	e068      	b.n	800a980 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d104      	bne.n	800a8be <HAL_TIM_PWM_Start+0x82>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2202      	movs	r2, #2
 800a8b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a8bc:	e013      	b.n	800a8e6 <HAL_TIM_PWM_Start+0xaa>
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	2b04      	cmp	r3, #4
 800a8c2:	d104      	bne.n	800a8ce <HAL_TIM_PWM_Start+0x92>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2202      	movs	r2, #2
 800a8c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a8cc:	e00b      	b.n	800a8e6 <HAL_TIM_PWM_Start+0xaa>
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	2b08      	cmp	r3, #8
 800a8d2:	d104      	bne.n	800a8de <HAL_TIM_PWM_Start+0xa2>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2202      	movs	r2, #2
 800a8d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a8dc:	e003      	b.n	800a8e6 <HAL_TIM_PWM_Start+0xaa>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2202      	movs	r2, #2
 800a8e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	6839      	ldr	r1, [r7, #0]
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f000 fb22 	bl	800af38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4a23      	ldr	r2, [pc, #140]	; (800a988 <HAL_TIM_PWM_Start+0x14c>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d107      	bne.n	800a90e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a90c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	4a1d      	ldr	r2, [pc, #116]	; (800a988 <HAL_TIM_PWM_Start+0x14c>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d018      	beq.n	800a94a <HAL_TIM_PWM_Start+0x10e>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a920:	d013      	beq.n	800a94a <HAL_TIM_PWM_Start+0x10e>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	4a19      	ldr	r2, [pc, #100]	; (800a98c <HAL_TIM_PWM_Start+0x150>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d00e      	beq.n	800a94a <HAL_TIM_PWM_Start+0x10e>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4a17      	ldr	r2, [pc, #92]	; (800a990 <HAL_TIM_PWM_Start+0x154>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d009      	beq.n	800a94a <HAL_TIM_PWM_Start+0x10e>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4a16      	ldr	r2, [pc, #88]	; (800a994 <HAL_TIM_PWM_Start+0x158>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d004      	beq.n	800a94a <HAL_TIM_PWM_Start+0x10e>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a14      	ldr	r2, [pc, #80]	; (800a998 <HAL_TIM_PWM_Start+0x15c>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d111      	bne.n	800a96e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	689b      	ldr	r3, [r3, #8]
 800a950:	f003 0307 	and.w	r3, r3, #7
 800a954:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2b06      	cmp	r3, #6
 800a95a:	d010      	beq.n	800a97e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f042 0201 	orr.w	r2, r2, #1
 800a96a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a96c:	e007      	b.n	800a97e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f042 0201 	orr.w	r2, r2, #1
 800a97c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a97e:	2300      	movs	r3, #0
}
 800a980:	4618      	mov	r0, r3
 800a982:	3710      	adds	r7, #16
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}
 800a988:	40010000 	.word	0x40010000
 800a98c:	40000400 	.word	0x40000400
 800a990:	40000800 	.word	0x40000800
 800a994:	40000c00 	.word	0x40000c00
 800a998:	40014000 	.word	0x40014000

0800a99c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b086      	sub	sp, #24
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	60f8      	str	r0, [r7, #12]
 800a9a4:	60b9      	str	r1, [r7, #8]
 800a9a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	d101      	bne.n	800a9ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a9b6:	2302      	movs	r3, #2
 800a9b8:	e0ae      	b.n	800ab18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2201      	movs	r2, #1
 800a9be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2b0c      	cmp	r3, #12
 800a9c6:	f200 809f 	bhi.w	800ab08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a9ca:	a201      	add	r2, pc, #4	; (adr r2, 800a9d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a9cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d0:	0800aa05 	.word	0x0800aa05
 800a9d4:	0800ab09 	.word	0x0800ab09
 800a9d8:	0800ab09 	.word	0x0800ab09
 800a9dc:	0800ab09 	.word	0x0800ab09
 800a9e0:	0800aa45 	.word	0x0800aa45
 800a9e4:	0800ab09 	.word	0x0800ab09
 800a9e8:	0800ab09 	.word	0x0800ab09
 800a9ec:	0800ab09 	.word	0x0800ab09
 800a9f0:	0800aa87 	.word	0x0800aa87
 800a9f4:	0800ab09 	.word	0x0800ab09
 800a9f8:	0800ab09 	.word	0x0800ab09
 800a9fc:	0800ab09 	.word	0x0800ab09
 800aa00:	0800aac7 	.word	0x0800aac7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	68b9      	ldr	r1, [r7, #8]
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f000 f908 	bl	800ac20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	699a      	ldr	r2, [r3, #24]
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f042 0208 	orr.w	r2, r2, #8
 800aa1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	699a      	ldr	r2, [r3, #24]
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f022 0204 	bic.w	r2, r2, #4
 800aa2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	6999      	ldr	r1, [r3, #24]
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	691a      	ldr	r2, [r3, #16]
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	430a      	orrs	r2, r1
 800aa40:	619a      	str	r2, [r3, #24]
      break;
 800aa42:	e064      	b.n	800ab0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	68b9      	ldr	r1, [r7, #8]
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f000 f94e 	bl	800acec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	699a      	ldr	r2, [r3, #24]
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	699a      	ldr	r2, [r3, #24]
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	6999      	ldr	r1, [r3, #24]
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	691b      	ldr	r3, [r3, #16]
 800aa7a:	021a      	lsls	r2, r3, #8
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	430a      	orrs	r2, r1
 800aa82:	619a      	str	r2, [r3, #24]
      break;
 800aa84:	e043      	b.n	800ab0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	68b9      	ldr	r1, [r7, #8]
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f000 f999 	bl	800adc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	69da      	ldr	r2, [r3, #28]
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f042 0208 	orr.w	r2, r2, #8
 800aaa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	69da      	ldr	r2, [r3, #28]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f022 0204 	bic.w	r2, r2, #4
 800aab0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	69d9      	ldr	r1, [r3, #28]
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	691a      	ldr	r2, [r3, #16]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	430a      	orrs	r2, r1
 800aac2:	61da      	str	r2, [r3, #28]
      break;
 800aac4:	e023      	b.n	800ab0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	68b9      	ldr	r1, [r7, #8]
 800aacc:	4618      	mov	r0, r3
 800aace:	f000 f9e3 	bl	800ae98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	69da      	ldr	r2, [r3, #28]
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aae0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	69da      	ldr	r2, [r3, #28]
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aaf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	69d9      	ldr	r1, [r3, #28]
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	691b      	ldr	r3, [r3, #16]
 800aafc:	021a      	lsls	r2, r3, #8
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	430a      	orrs	r2, r1
 800ab04:	61da      	str	r2, [r3, #28]
      break;
 800ab06:	e002      	b.n	800ab0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800ab08:	2301      	movs	r3, #1
 800ab0a:	75fb      	strb	r3, [r7, #23]
      break;
 800ab0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2200      	movs	r2, #0
 800ab12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ab16:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3718      	adds	r7, #24
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b085      	sub	sp, #20
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	4a34      	ldr	r2, [pc, #208]	; (800ac04 <TIM_Base_SetConfig+0xe4>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d00f      	beq.n	800ab58 <TIM_Base_SetConfig+0x38>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab3e:	d00b      	beq.n	800ab58 <TIM_Base_SetConfig+0x38>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	4a31      	ldr	r2, [pc, #196]	; (800ac08 <TIM_Base_SetConfig+0xe8>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d007      	beq.n	800ab58 <TIM_Base_SetConfig+0x38>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	4a30      	ldr	r2, [pc, #192]	; (800ac0c <TIM_Base_SetConfig+0xec>)
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d003      	beq.n	800ab58 <TIM_Base_SetConfig+0x38>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	4a2f      	ldr	r2, [pc, #188]	; (800ac10 <TIM_Base_SetConfig+0xf0>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d108      	bne.n	800ab6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	68fa      	ldr	r2, [r7, #12]
 800ab66:	4313      	orrs	r3, r2
 800ab68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	4a25      	ldr	r2, [pc, #148]	; (800ac04 <TIM_Base_SetConfig+0xe4>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d01b      	beq.n	800abaa <TIM_Base_SetConfig+0x8a>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab78:	d017      	beq.n	800abaa <TIM_Base_SetConfig+0x8a>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	4a22      	ldr	r2, [pc, #136]	; (800ac08 <TIM_Base_SetConfig+0xe8>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d013      	beq.n	800abaa <TIM_Base_SetConfig+0x8a>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	4a21      	ldr	r2, [pc, #132]	; (800ac0c <TIM_Base_SetConfig+0xec>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d00f      	beq.n	800abaa <TIM_Base_SetConfig+0x8a>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	4a20      	ldr	r2, [pc, #128]	; (800ac10 <TIM_Base_SetConfig+0xf0>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d00b      	beq.n	800abaa <TIM_Base_SetConfig+0x8a>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	4a1f      	ldr	r2, [pc, #124]	; (800ac14 <TIM_Base_SetConfig+0xf4>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d007      	beq.n	800abaa <TIM_Base_SetConfig+0x8a>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	4a1e      	ldr	r2, [pc, #120]	; (800ac18 <TIM_Base_SetConfig+0xf8>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d003      	beq.n	800abaa <TIM_Base_SetConfig+0x8a>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	4a1d      	ldr	r2, [pc, #116]	; (800ac1c <TIM_Base_SetConfig+0xfc>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d108      	bne.n	800abbc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	68db      	ldr	r3, [r3, #12]
 800abb6:	68fa      	ldr	r2, [r7, #12]
 800abb8:	4313      	orrs	r3, r2
 800abba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	695b      	ldr	r3, [r3, #20]
 800abc6:	4313      	orrs	r3, r2
 800abc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	68fa      	ldr	r2, [r7, #12]
 800abce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	689a      	ldr	r2, [r3, #8]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	4a08      	ldr	r2, [pc, #32]	; (800ac04 <TIM_Base_SetConfig+0xe4>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d103      	bne.n	800abf0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	691a      	ldr	r2, [r3, #16]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2201      	movs	r2, #1
 800abf4:	615a      	str	r2, [r3, #20]
}
 800abf6:	bf00      	nop
 800abf8:	3714      	adds	r7, #20
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr
 800ac02:	bf00      	nop
 800ac04:	40010000 	.word	0x40010000
 800ac08:	40000400 	.word	0x40000400
 800ac0c:	40000800 	.word	0x40000800
 800ac10:	40000c00 	.word	0x40000c00
 800ac14:	40014000 	.word	0x40014000
 800ac18:	40014400 	.word	0x40014400
 800ac1c:	40014800 	.word	0x40014800

0800ac20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b087      	sub	sp, #28
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6a1b      	ldr	r3, [r3, #32]
 800ac2e:	f023 0201 	bic.w	r2, r3, #1
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6a1b      	ldr	r3, [r3, #32]
 800ac3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	699b      	ldr	r3, [r3, #24]
 800ac46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	f023 0303 	bic.w	r3, r3, #3
 800ac56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	68fa      	ldr	r2, [r7, #12]
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	f023 0302 	bic.w	r3, r3, #2
 800ac68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	689b      	ldr	r3, [r3, #8]
 800ac6e:	697a      	ldr	r2, [r7, #20]
 800ac70:	4313      	orrs	r3, r2
 800ac72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	4a1c      	ldr	r2, [pc, #112]	; (800ace8 <TIM_OC1_SetConfig+0xc8>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d10c      	bne.n	800ac96 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	f023 0308 	bic.w	r3, r3, #8
 800ac82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	68db      	ldr	r3, [r3, #12]
 800ac88:	697a      	ldr	r2, [r7, #20]
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	f023 0304 	bic.w	r3, r3, #4
 800ac94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	4a13      	ldr	r2, [pc, #76]	; (800ace8 <TIM_OC1_SetConfig+0xc8>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d111      	bne.n	800acc2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aca4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800acac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	695b      	ldr	r3, [r3, #20]
 800acb2:	693a      	ldr	r2, [r7, #16]
 800acb4:	4313      	orrs	r3, r2
 800acb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	699b      	ldr	r3, [r3, #24]
 800acbc:	693a      	ldr	r2, [r7, #16]
 800acbe:	4313      	orrs	r3, r2
 800acc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	693a      	ldr	r2, [r7, #16]
 800acc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	68fa      	ldr	r2, [r7, #12]
 800accc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	685a      	ldr	r2, [r3, #4]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	697a      	ldr	r2, [r7, #20]
 800acda:	621a      	str	r2, [r3, #32]
}
 800acdc:	bf00      	nop
 800acde:	371c      	adds	r7, #28
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr
 800ace8:	40010000 	.word	0x40010000

0800acec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800acec:	b480      	push	{r7}
 800acee:	b087      	sub	sp, #28
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6a1b      	ldr	r3, [r3, #32]
 800acfa:	f023 0210 	bic.w	r2, r3, #16
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6a1b      	ldr	r3, [r3, #32]
 800ad06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	685b      	ldr	r3, [r3, #4]
 800ad0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	699b      	ldr	r3, [r3, #24]
 800ad12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	021b      	lsls	r3, r3, #8
 800ad2a:	68fa      	ldr	r2, [r7, #12]
 800ad2c:	4313      	orrs	r3, r2
 800ad2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	f023 0320 	bic.w	r3, r3, #32
 800ad36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	011b      	lsls	r3, r3, #4
 800ad3e:	697a      	ldr	r2, [r7, #20]
 800ad40:	4313      	orrs	r3, r2
 800ad42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	4a1e      	ldr	r2, [pc, #120]	; (800adc0 <TIM_OC2_SetConfig+0xd4>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d10d      	bne.n	800ad68 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	68db      	ldr	r3, [r3, #12]
 800ad58:	011b      	lsls	r3, r3, #4
 800ad5a:	697a      	ldr	r2, [r7, #20]
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	4a15      	ldr	r2, [pc, #84]	; (800adc0 <TIM_OC2_SetConfig+0xd4>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d113      	bne.n	800ad98 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ad76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ad7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	695b      	ldr	r3, [r3, #20]
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	693a      	ldr	r2, [r7, #16]
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	699b      	ldr	r3, [r3, #24]
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	693a      	ldr	r2, [r7, #16]
 800ad94:	4313      	orrs	r3, r2
 800ad96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	693a      	ldr	r2, [r7, #16]
 800ad9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	68fa      	ldr	r2, [r7, #12]
 800ada2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	685a      	ldr	r2, [r3, #4]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	697a      	ldr	r2, [r7, #20]
 800adb0:	621a      	str	r2, [r3, #32]
}
 800adb2:	bf00      	nop
 800adb4:	371c      	adds	r7, #28
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr
 800adbe:	bf00      	nop
 800adc0:	40010000 	.word	0x40010000

0800adc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b087      	sub	sp, #28
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
 800adcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6a1b      	ldr	r3, [r3, #32]
 800add2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a1b      	ldr	r3, [r3, #32]
 800adde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	69db      	ldr	r3, [r3, #28]
 800adea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f023 0303 	bic.w	r3, r3, #3
 800adfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	68fa      	ldr	r2, [r7, #12]
 800ae02:	4313      	orrs	r3, r2
 800ae04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ae0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	689b      	ldr	r3, [r3, #8]
 800ae12:	021b      	lsls	r3, r3, #8
 800ae14:	697a      	ldr	r2, [r7, #20]
 800ae16:	4313      	orrs	r3, r2
 800ae18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	4a1d      	ldr	r2, [pc, #116]	; (800ae94 <TIM_OC3_SetConfig+0xd0>)
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	d10d      	bne.n	800ae3e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ae28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	68db      	ldr	r3, [r3, #12]
 800ae2e:	021b      	lsls	r3, r3, #8
 800ae30:	697a      	ldr	r2, [r7, #20]
 800ae32:	4313      	orrs	r3, r2
 800ae34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ae3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	4a14      	ldr	r2, [pc, #80]	; (800ae94 <TIM_OC3_SetConfig+0xd0>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d113      	bne.n	800ae6e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ae54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	695b      	ldr	r3, [r3, #20]
 800ae5a:	011b      	lsls	r3, r3, #4
 800ae5c:	693a      	ldr	r2, [r7, #16]
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	699b      	ldr	r3, [r3, #24]
 800ae66:	011b      	lsls	r3, r3, #4
 800ae68:	693a      	ldr	r2, [r7, #16]
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	693a      	ldr	r2, [r7, #16]
 800ae72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	68fa      	ldr	r2, [r7, #12]
 800ae78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	685a      	ldr	r2, [r3, #4]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	697a      	ldr	r2, [r7, #20]
 800ae86:	621a      	str	r2, [r3, #32]
}
 800ae88:	bf00      	nop
 800ae8a:	371c      	adds	r7, #28
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr
 800ae94:	40010000 	.word	0x40010000

0800ae98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b087      	sub	sp, #28
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6a1b      	ldr	r3, [r3, #32]
 800aea6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6a1b      	ldr	r3, [r3, #32]
 800aeb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	685b      	ldr	r3, [r3, #4]
 800aeb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	69db      	ldr	r3, [r3, #28]
 800aebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	021b      	lsls	r3, r3, #8
 800aed6:	68fa      	ldr	r2, [r7, #12]
 800aed8:	4313      	orrs	r3, r2
 800aeda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aee2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	031b      	lsls	r3, r3, #12
 800aeea:	693a      	ldr	r2, [r7, #16]
 800aeec:	4313      	orrs	r3, r2
 800aeee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	4a10      	ldr	r2, [pc, #64]	; (800af34 <TIM_OC4_SetConfig+0x9c>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d109      	bne.n	800af0c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aefe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	695b      	ldr	r3, [r3, #20]
 800af04:	019b      	lsls	r3, r3, #6
 800af06:	697a      	ldr	r2, [r7, #20]
 800af08:	4313      	orrs	r3, r2
 800af0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	697a      	ldr	r2, [r7, #20]
 800af10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	68fa      	ldr	r2, [r7, #12]
 800af16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	685a      	ldr	r2, [r3, #4]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	693a      	ldr	r2, [r7, #16]
 800af24:	621a      	str	r2, [r3, #32]
}
 800af26:	bf00      	nop
 800af28:	371c      	adds	r7, #28
 800af2a:	46bd      	mov	sp, r7
 800af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af30:	4770      	bx	lr
 800af32:	bf00      	nop
 800af34:	40010000 	.word	0x40010000

0800af38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800af38:	b480      	push	{r7}
 800af3a:	b087      	sub	sp, #28
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	60f8      	str	r0, [r7, #12]
 800af40:	60b9      	str	r1, [r7, #8]
 800af42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	f003 031f 	and.w	r3, r3, #31
 800af4a:	2201      	movs	r2, #1
 800af4c:	fa02 f303 	lsl.w	r3, r2, r3
 800af50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	6a1a      	ldr	r2, [r3, #32]
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	43db      	mvns	r3, r3
 800af5a:	401a      	ands	r2, r3
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	6a1a      	ldr	r2, [r3, #32]
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	f003 031f 	and.w	r3, r3, #31
 800af6a:	6879      	ldr	r1, [r7, #4]
 800af6c:	fa01 f303 	lsl.w	r3, r1, r3
 800af70:	431a      	orrs	r2, r3
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	621a      	str	r2, [r3, #32]
}
 800af76:	bf00      	nop
 800af78:	371c      	adds	r7, #28
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr
	...

0800af84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800af84:	b480      	push	{r7}
 800af86:	b085      	sub	sp, #20
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af94:	2b01      	cmp	r3, #1
 800af96:	d101      	bne.n	800af9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af98:	2302      	movs	r3, #2
 800af9a:	e050      	b.n	800b03e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2201      	movs	r2, #1
 800afa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2202      	movs	r2, #2
 800afa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	685b      	ldr	r3, [r3, #4]
 800afb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	689b      	ldr	r3, [r3, #8]
 800afba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	68fa      	ldr	r2, [r7, #12]
 800afca:	4313      	orrs	r3, r2
 800afcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	68fa      	ldr	r2, [r7, #12]
 800afd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4a1c      	ldr	r2, [pc, #112]	; (800b04c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d018      	beq.n	800b012 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afe8:	d013      	beq.n	800b012 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	4a18      	ldr	r2, [pc, #96]	; (800b050 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d00e      	beq.n	800b012 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	4a16      	ldr	r2, [pc, #88]	; (800b054 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800affa:	4293      	cmp	r3, r2
 800affc:	d009      	beq.n	800b012 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	4a15      	ldr	r2, [pc, #84]	; (800b058 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d004      	beq.n	800b012 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4a13      	ldr	r2, [pc, #76]	; (800b05c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d10c      	bne.n	800b02c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b018:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	685b      	ldr	r3, [r3, #4]
 800b01e:	68ba      	ldr	r2, [r7, #8]
 800b020:	4313      	orrs	r3, r2
 800b022:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	68ba      	ldr	r2, [r7, #8]
 800b02a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2201      	movs	r2, #1
 800b030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2200      	movs	r2, #0
 800b038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b03c:	2300      	movs	r3, #0
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3714      	adds	r7, #20
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr
 800b04a:	bf00      	nop
 800b04c:	40010000 	.word	0x40010000
 800b050:	40000400 	.word	0x40000400
 800b054:	40000800 	.word	0x40000800
 800b058:	40000c00 	.word	0x40000c00
 800b05c:	40014000 	.word	0x40014000

0800b060 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b082      	sub	sp, #8
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d101      	bne.n	800b072 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b06e:	2301      	movs	r3, #1
 800b070:	e03f      	b.n	800b0f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b078:	b2db      	uxtb	r3, r3
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d106      	bne.n	800b08c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2200      	movs	r2, #0
 800b082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f7f9 fbe0 	bl	800484c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2224      	movs	r2, #36	; 0x24
 800b090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	68da      	ldr	r2, [r3, #12]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b0a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 f929 	bl	800b2fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	691a      	ldr	r2, [r3, #16]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b0b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	695a      	ldr	r2, [r3, #20]
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b0c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	68da      	ldr	r2, [r3, #12]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b0d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2220      	movs	r2, #32
 800b0e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2220      	movs	r2, #32
 800b0ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b0f0:	2300      	movs	r3, #0
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3708      	adds	r7, #8
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}

0800b0fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b0fa:	b580      	push	{r7, lr}
 800b0fc:	b08a      	sub	sp, #40	; 0x28
 800b0fe:	af02      	add	r7, sp, #8
 800b100:	60f8      	str	r0, [r7, #12]
 800b102:	60b9      	str	r1, [r7, #8]
 800b104:	603b      	str	r3, [r7, #0]
 800b106:	4613      	mov	r3, r2
 800b108:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b10a:	2300      	movs	r3, #0
 800b10c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b114:	b2db      	uxtb	r3, r3
 800b116:	2b20      	cmp	r3, #32
 800b118:	d17c      	bne.n	800b214 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d002      	beq.n	800b126 <HAL_UART_Transmit+0x2c>
 800b120:	88fb      	ldrh	r3, [r7, #6]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d101      	bne.n	800b12a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b126:	2301      	movs	r3, #1
 800b128:	e075      	b.n	800b216 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b130:	2b01      	cmp	r3, #1
 800b132:	d101      	bne.n	800b138 <HAL_UART_Transmit+0x3e>
 800b134:	2302      	movs	r3, #2
 800b136:	e06e      	b.n	800b216 <HAL_UART_Transmit+0x11c>
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	2201      	movs	r2, #1
 800b13c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2200      	movs	r2, #0
 800b144:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2221      	movs	r2, #33	; 0x21
 800b14a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b14e:	f7fb f9f3 	bl	8006538 <HAL_GetTick>
 800b152:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	88fa      	ldrh	r2, [r7, #6]
 800b158:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	88fa      	ldrh	r2, [r7, #6]
 800b15e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b168:	d108      	bne.n	800b17c <HAL_UART_Transmit+0x82>
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	691b      	ldr	r3, [r3, #16]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d104      	bne.n	800b17c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b172:	2300      	movs	r3, #0
 800b174:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	61bb      	str	r3, [r7, #24]
 800b17a:	e003      	b.n	800b184 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b180:	2300      	movs	r3, #0
 800b182:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2200      	movs	r2, #0
 800b188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b18c:	e02a      	b.n	800b1e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	9300      	str	r3, [sp, #0]
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	2200      	movs	r2, #0
 800b196:	2180      	movs	r1, #128	; 0x80
 800b198:	68f8      	ldr	r0, [r7, #12]
 800b19a:	f000 f840 	bl	800b21e <UART_WaitOnFlagUntilTimeout>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d001      	beq.n	800b1a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b1a4:	2303      	movs	r3, #3
 800b1a6:	e036      	b.n	800b216 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b1a8:	69fb      	ldr	r3, [r7, #28]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d10b      	bne.n	800b1c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b1ae:	69bb      	ldr	r3, [r7, #24]
 800b1b0:	881b      	ldrh	r3, [r3, #0]
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b1bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b1be:	69bb      	ldr	r3, [r7, #24]
 800b1c0:	3302      	adds	r3, #2
 800b1c2:	61bb      	str	r3, [r7, #24]
 800b1c4:	e007      	b.n	800b1d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b1c6:	69fb      	ldr	r3, [r7, #28]
 800b1c8:	781a      	ldrb	r2, [r3, #0]
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b1d0:	69fb      	ldr	r3, [r7, #28]
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b1da:	b29b      	uxth	r3, r3
 800b1dc:	3b01      	subs	r3, #1
 800b1de:	b29a      	uxth	r2, r3
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b1e8:	b29b      	uxth	r3, r3
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d1cf      	bne.n	800b18e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	9300      	str	r3, [sp, #0]
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	2140      	movs	r1, #64	; 0x40
 800b1f8:	68f8      	ldr	r0, [r7, #12]
 800b1fa:	f000 f810 	bl	800b21e <UART_WaitOnFlagUntilTimeout>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b00      	cmp	r3, #0
 800b202:	d001      	beq.n	800b208 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b204:	2303      	movs	r3, #3
 800b206:	e006      	b.n	800b216 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2220      	movs	r2, #32
 800b20c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b210:	2300      	movs	r3, #0
 800b212:	e000      	b.n	800b216 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b214:	2302      	movs	r3, #2
  }
}
 800b216:	4618      	mov	r0, r3
 800b218:	3720      	adds	r7, #32
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}

0800b21e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b21e:	b580      	push	{r7, lr}
 800b220:	b090      	sub	sp, #64	; 0x40
 800b222:	af00      	add	r7, sp, #0
 800b224:	60f8      	str	r0, [r7, #12]
 800b226:	60b9      	str	r1, [r7, #8]
 800b228:	603b      	str	r3, [r7, #0]
 800b22a:	4613      	mov	r3, r2
 800b22c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b22e:	e050      	b.n	800b2d2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b232:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b236:	d04c      	beq.n	800b2d2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d007      	beq.n	800b24e <UART_WaitOnFlagUntilTimeout+0x30>
 800b23e:	f7fb f97b 	bl	8006538 <HAL_GetTick>
 800b242:	4602      	mov	r2, r0
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	1ad3      	subs	r3, r2, r3
 800b248:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b24a:	429a      	cmp	r2, r3
 800b24c:	d241      	bcs.n	800b2d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	330c      	adds	r3, #12
 800b254:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b258:	e853 3f00 	ldrex	r3, [r3]
 800b25c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b260:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b264:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	330c      	adds	r3, #12
 800b26c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b26e:	637a      	str	r2, [r7, #52]	; 0x34
 800b270:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b272:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b274:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b276:	e841 2300 	strex	r3, r2, [r1]
 800b27a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d1e5      	bne.n	800b24e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	3314      	adds	r3, #20
 800b288:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	e853 3f00 	ldrex	r3, [r3]
 800b290:	613b      	str	r3, [r7, #16]
   return(result);
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	f023 0301 	bic.w	r3, r3, #1
 800b298:	63bb      	str	r3, [r7, #56]	; 0x38
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	3314      	adds	r3, #20
 800b2a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2a2:	623a      	str	r2, [r7, #32]
 800b2a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a6:	69f9      	ldr	r1, [r7, #28]
 800b2a8:	6a3a      	ldr	r2, [r7, #32]
 800b2aa:	e841 2300 	strex	r3, r2, [r1]
 800b2ae:	61bb      	str	r3, [r7, #24]
   return(result);
 800b2b0:	69bb      	ldr	r3, [r7, #24]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d1e5      	bne.n	800b282 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	2220      	movs	r2, #32
 800b2ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	2220      	movs	r2, #32
 800b2c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b2ce:	2303      	movs	r3, #3
 800b2d0:	e00f      	b.n	800b2f2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	681a      	ldr	r2, [r3, #0]
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	4013      	ands	r3, r2
 800b2dc:	68ba      	ldr	r2, [r7, #8]
 800b2de:	429a      	cmp	r2, r3
 800b2e0:	bf0c      	ite	eq
 800b2e2:	2301      	moveq	r3, #1
 800b2e4:	2300      	movne	r3, #0
 800b2e6:	b2db      	uxtb	r3, r3
 800b2e8:	461a      	mov	r2, r3
 800b2ea:	79fb      	ldrb	r3, [r7, #7]
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d09f      	beq.n	800b230 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b2f0:	2300      	movs	r3, #0
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3740      	adds	r7, #64	; 0x40
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
	...

0800b2fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b300:	b09f      	sub	sp, #124	; 0x7c
 800b302:	af00      	add	r7, sp, #0
 800b304:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	691b      	ldr	r3, [r3, #16]
 800b30c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b312:	68d9      	ldr	r1, [r3, #12]
 800b314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b316:	681a      	ldr	r2, [r3, #0]
 800b318:	ea40 0301 	orr.w	r3, r0, r1
 800b31c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b31e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b320:	689a      	ldr	r2, [r3, #8]
 800b322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b324:	691b      	ldr	r3, [r3, #16]
 800b326:	431a      	orrs	r2, r3
 800b328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b32a:	695b      	ldr	r3, [r3, #20]
 800b32c:	431a      	orrs	r2, r3
 800b32e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b330:	69db      	ldr	r3, [r3, #28]
 800b332:	4313      	orrs	r3, r2
 800b334:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800b336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	68db      	ldr	r3, [r3, #12]
 800b33c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b340:	f021 010c 	bic.w	r1, r1, #12
 800b344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b346:	681a      	ldr	r2, [r3, #0]
 800b348:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b34a:	430b      	orrs	r3, r1
 800b34c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b34e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	695b      	ldr	r3, [r3, #20]
 800b354:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b35a:	6999      	ldr	r1, [r3, #24]
 800b35c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b35e:	681a      	ldr	r2, [r3, #0]
 800b360:	ea40 0301 	orr.w	r3, r0, r1
 800b364:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b368:	681a      	ldr	r2, [r3, #0]
 800b36a:	4bc5      	ldr	r3, [pc, #788]	; (800b680 <UART_SetConfig+0x384>)
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d004      	beq.n	800b37a <UART_SetConfig+0x7e>
 800b370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	4bc3      	ldr	r3, [pc, #780]	; (800b684 <UART_SetConfig+0x388>)
 800b376:	429a      	cmp	r2, r3
 800b378:	d103      	bne.n	800b382 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b37a:	f7fd fccf 	bl	8008d1c <HAL_RCC_GetPCLK2Freq>
 800b37e:	6778      	str	r0, [r7, #116]	; 0x74
 800b380:	e002      	b.n	800b388 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b382:	f7fd fcb7 	bl	8008cf4 <HAL_RCC_GetPCLK1Freq>
 800b386:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b38a:	69db      	ldr	r3, [r3, #28]
 800b38c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b390:	f040 80b6 	bne.w	800b500 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b394:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b396:	461c      	mov	r4, r3
 800b398:	f04f 0500 	mov.w	r5, #0
 800b39c:	4622      	mov	r2, r4
 800b39e:	462b      	mov	r3, r5
 800b3a0:	1891      	adds	r1, r2, r2
 800b3a2:	6439      	str	r1, [r7, #64]	; 0x40
 800b3a4:	415b      	adcs	r3, r3
 800b3a6:	647b      	str	r3, [r7, #68]	; 0x44
 800b3a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b3ac:	1912      	adds	r2, r2, r4
 800b3ae:	eb45 0303 	adc.w	r3, r5, r3
 800b3b2:	f04f 0000 	mov.w	r0, #0
 800b3b6:	f04f 0100 	mov.w	r1, #0
 800b3ba:	00d9      	lsls	r1, r3, #3
 800b3bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b3c0:	00d0      	lsls	r0, r2, #3
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	1911      	adds	r1, r2, r4
 800b3c8:	6639      	str	r1, [r7, #96]	; 0x60
 800b3ca:	416b      	adcs	r3, r5
 800b3cc:	667b      	str	r3, [r7, #100]	; 0x64
 800b3ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	f04f 0300 	mov.w	r3, #0
 800b3d8:	1891      	adds	r1, r2, r2
 800b3da:	63b9      	str	r1, [r7, #56]	; 0x38
 800b3dc:	415b      	adcs	r3, r3
 800b3de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b3e4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800b3e8:	f7f5 fc66 	bl	8000cb8 <__aeabi_uldivmod>
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	460b      	mov	r3, r1
 800b3f0:	4ba5      	ldr	r3, [pc, #660]	; (800b688 <UART_SetConfig+0x38c>)
 800b3f2:	fba3 2302 	umull	r2, r3, r3, r2
 800b3f6:	095b      	lsrs	r3, r3, #5
 800b3f8:	011e      	lsls	r6, r3, #4
 800b3fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b3fc:	461c      	mov	r4, r3
 800b3fe:	f04f 0500 	mov.w	r5, #0
 800b402:	4622      	mov	r2, r4
 800b404:	462b      	mov	r3, r5
 800b406:	1891      	adds	r1, r2, r2
 800b408:	6339      	str	r1, [r7, #48]	; 0x30
 800b40a:	415b      	adcs	r3, r3
 800b40c:	637b      	str	r3, [r7, #52]	; 0x34
 800b40e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b412:	1912      	adds	r2, r2, r4
 800b414:	eb45 0303 	adc.w	r3, r5, r3
 800b418:	f04f 0000 	mov.w	r0, #0
 800b41c:	f04f 0100 	mov.w	r1, #0
 800b420:	00d9      	lsls	r1, r3, #3
 800b422:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b426:	00d0      	lsls	r0, r2, #3
 800b428:	4602      	mov	r2, r0
 800b42a:	460b      	mov	r3, r1
 800b42c:	1911      	adds	r1, r2, r4
 800b42e:	65b9      	str	r1, [r7, #88]	; 0x58
 800b430:	416b      	adcs	r3, r5
 800b432:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	461a      	mov	r2, r3
 800b43a:	f04f 0300 	mov.w	r3, #0
 800b43e:	1891      	adds	r1, r2, r2
 800b440:	62b9      	str	r1, [r7, #40]	; 0x28
 800b442:	415b      	adcs	r3, r3
 800b444:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b446:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b44a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800b44e:	f7f5 fc33 	bl	8000cb8 <__aeabi_uldivmod>
 800b452:	4602      	mov	r2, r0
 800b454:	460b      	mov	r3, r1
 800b456:	4b8c      	ldr	r3, [pc, #560]	; (800b688 <UART_SetConfig+0x38c>)
 800b458:	fba3 1302 	umull	r1, r3, r3, r2
 800b45c:	095b      	lsrs	r3, r3, #5
 800b45e:	2164      	movs	r1, #100	; 0x64
 800b460:	fb01 f303 	mul.w	r3, r1, r3
 800b464:	1ad3      	subs	r3, r2, r3
 800b466:	00db      	lsls	r3, r3, #3
 800b468:	3332      	adds	r3, #50	; 0x32
 800b46a:	4a87      	ldr	r2, [pc, #540]	; (800b688 <UART_SetConfig+0x38c>)
 800b46c:	fba2 2303 	umull	r2, r3, r2, r3
 800b470:	095b      	lsrs	r3, r3, #5
 800b472:	005b      	lsls	r3, r3, #1
 800b474:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b478:	441e      	add	r6, r3
 800b47a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b47c:	4618      	mov	r0, r3
 800b47e:	f04f 0100 	mov.w	r1, #0
 800b482:	4602      	mov	r2, r0
 800b484:	460b      	mov	r3, r1
 800b486:	1894      	adds	r4, r2, r2
 800b488:	623c      	str	r4, [r7, #32]
 800b48a:	415b      	adcs	r3, r3
 800b48c:	627b      	str	r3, [r7, #36]	; 0x24
 800b48e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b492:	1812      	adds	r2, r2, r0
 800b494:	eb41 0303 	adc.w	r3, r1, r3
 800b498:	f04f 0400 	mov.w	r4, #0
 800b49c:	f04f 0500 	mov.w	r5, #0
 800b4a0:	00dd      	lsls	r5, r3, #3
 800b4a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b4a6:	00d4      	lsls	r4, r2, #3
 800b4a8:	4622      	mov	r2, r4
 800b4aa:	462b      	mov	r3, r5
 800b4ac:	1814      	adds	r4, r2, r0
 800b4ae:	653c      	str	r4, [r7, #80]	; 0x50
 800b4b0:	414b      	adcs	r3, r1
 800b4b2:	657b      	str	r3, [r7, #84]	; 0x54
 800b4b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	461a      	mov	r2, r3
 800b4ba:	f04f 0300 	mov.w	r3, #0
 800b4be:	1891      	adds	r1, r2, r2
 800b4c0:	61b9      	str	r1, [r7, #24]
 800b4c2:	415b      	adcs	r3, r3
 800b4c4:	61fb      	str	r3, [r7, #28]
 800b4c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b4ca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b4ce:	f7f5 fbf3 	bl	8000cb8 <__aeabi_uldivmod>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	460b      	mov	r3, r1
 800b4d6:	4b6c      	ldr	r3, [pc, #432]	; (800b688 <UART_SetConfig+0x38c>)
 800b4d8:	fba3 1302 	umull	r1, r3, r3, r2
 800b4dc:	095b      	lsrs	r3, r3, #5
 800b4de:	2164      	movs	r1, #100	; 0x64
 800b4e0:	fb01 f303 	mul.w	r3, r1, r3
 800b4e4:	1ad3      	subs	r3, r2, r3
 800b4e6:	00db      	lsls	r3, r3, #3
 800b4e8:	3332      	adds	r3, #50	; 0x32
 800b4ea:	4a67      	ldr	r2, [pc, #412]	; (800b688 <UART_SetConfig+0x38c>)
 800b4ec:	fba2 2303 	umull	r2, r3, r2, r3
 800b4f0:	095b      	lsrs	r3, r3, #5
 800b4f2:	f003 0207 	and.w	r2, r3, #7
 800b4f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4432      	add	r2, r6
 800b4fc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b4fe:	e0b9      	b.n	800b674 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b500:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b502:	461c      	mov	r4, r3
 800b504:	f04f 0500 	mov.w	r5, #0
 800b508:	4622      	mov	r2, r4
 800b50a:	462b      	mov	r3, r5
 800b50c:	1891      	adds	r1, r2, r2
 800b50e:	6139      	str	r1, [r7, #16]
 800b510:	415b      	adcs	r3, r3
 800b512:	617b      	str	r3, [r7, #20]
 800b514:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b518:	1912      	adds	r2, r2, r4
 800b51a:	eb45 0303 	adc.w	r3, r5, r3
 800b51e:	f04f 0000 	mov.w	r0, #0
 800b522:	f04f 0100 	mov.w	r1, #0
 800b526:	00d9      	lsls	r1, r3, #3
 800b528:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b52c:	00d0      	lsls	r0, r2, #3
 800b52e:	4602      	mov	r2, r0
 800b530:	460b      	mov	r3, r1
 800b532:	eb12 0804 	adds.w	r8, r2, r4
 800b536:	eb43 0905 	adc.w	r9, r3, r5
 800b53a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b53c:	685b      	ldr	r3, [r3, #4]
 800b53e:	4618      	mov	r0, r3
 800b540:	f04f 0100 	mov.w	r1, #0
 800b544:	f04f 0200 	mov.w	r2, #0
 800b548:	f04f 0300 	mov.w	r3, #0
 800b54c:	008b      	lsls	r3, r1, #2
 800b54e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b552:	0082      	lsls	r2, r0, #2
 800b554:	4640      	mov	r0, r8
 800b556:	4649      	mov	r1, r9
 800b558:	f7f5 fbae 	bl	8000cb8 <__aeabi_uldivmod>
 800b55c:	4602      	mov	r2, r0
 800b55e:	460b      	mov	r3, r1
 800b560:	4b49      	ldr	r3, [pc, #292]	; (800b688 <UART_SetConfig+0x38c>)
 800b562:	fba3 2302 	umull	r2, r3, r3, r2
 800b566:	095b      	lsrs	r3, r3, #5
 800b568:	011e      	lsls	r6, r3, #4
 800b56a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b56c:	4618      	mov	r0, r3
 800b56e:	f04f 0100 	mov.w	r1, #0
 800b572:	4602      	mov	r2, r0
 800b574:	460b      	mov	r3, r1
 800b576:	1894      	adds	r4, r2, r2
 800b578:	60bc      	str	r4, [r7, #8]
 800b57a:	415b      	adcs	r3, r3
 800b57c:	60fb      	str	r3, [r7, #12]
 800b57e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b582:	1812      	adds	r2, r2, r0
 800b584:	eb41 0303 	adc.w	r3, r1, r3
 800b588:	f04f 0400 	mov.w	r4, #0
 800b58c:	f04f 0500 	mov.w	r5, #0
 800b590:	00dd      	lsls	r5, r3, #3
 800b592:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b596:	00d4      	lsls	r4, r2, #3
 800b598:	4622      	mov	r2, r4
 800b59a:	462b      	mov	r3, r5
 800b59c:	1814      	adds	r4, r2, r0
 800b59e:	64bc      	str	r4, [r7, #72]	; 0x48
 800b5a0:	414b      	adcs	r3, r1
 800b5a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b5a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f04f 0100 	mov.w	r1, #0
 800b5ae:	f04f 0200 	mov.w	r2, #0
 800b5b2:	f04f 0300 	mov.w	r3, #0
 800b5b6:	008b      	lsls	r3, r1, #2
 800b5b8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b5bc:	0082      	lsls	r2, r0, #2
 800b5be:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b5c2:	f7f5 fb79 	bl	8000cb8 <__aeabi_uldivmod>
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	460b      	mov	r3, r1
 800b5ca:	4b2f      	ldr	r3, [pc, #188]	; (800b688 <UART_SetConfig+0x38c>)
 800b5cc:	fba3 1302 	umull	r1, r3, r3, r2
 800b5d0:	095b      	lsrs	r3, r3, #5
 800b5d2:	2164      	movs	r1, #100	; 0x64
 800b5d4:	fb01 f303 	mul.w	r3, r1, r3
 800b5d8:	1ad3      	subs	r3, r2, r3
 800b5da:	011b      	lsls	r3, r3, #4
 800b5dc:	3332      	adds	r3, #50	; 0x32
 800b5de:	4a2a      	ldr	r2, [pc, #168]	; (800b688 <UART_SetConfig+0x38c>)
 800b5e0:	fba2 2303 	umull	r2, r3, r2, r3
 800b5e4:	095b      	lsrs	r3, r3, #5
 800b5e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5ea:	441e      	add	r6, r3
 800b5ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f04f 0100 	mov.w	r1, #0
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	1894      	adds	r4, r2, r2
 800b5fa:	603c      	str	r4, [r7, #0]
 800b5fc:	415b      	adcs	r3, r3
 800b5fe:	607b      	str	r3, [r7, #4]
 800b600:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b604:	1812      	adds	r2, r2, r0
 800b606:	eb41 0303 	adc.w	r3, r1, r3
 800b60a:	f04f 0400 	mov.w	r4, #0
 800b60e:	f04f 0500 	mov.w	r5, #0
 800b612:	00dd      	lsls	r5, r3, #3
 800b614:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b618:	00d4      	lsls	r4, r2, #3
 800b61a:	4622      	mov	r2, r4
 800b61c:	462b      	mov	r3, r5
 800b61e:	eb12 0a00 	adds.w	sl, r2, r0
 800b622:	eb43 0b01 	adc.w	fp, r3, r1
 800b626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b628:	685b      	ldr	r3, [r3, #4]
 800b62a:	4618      	mov	r0, r3
 800b62c:	f04f 0100 	mov.w	r1, #0
 800b630:	f04f 0200 	mov.w	r2, #0
 800b634:	f04f 0300 	mov.w	r3, #0
 800b638:	008b      	lsls	r3, r1, #2
 800b63a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b63e:	0082      	lsls	r2, r0, #2
 800b640:	4650      	mov	r0, sl
 800b642:	4659      	mov	r1, fp
 800b644:	f7f5 fb38 	bl	8000cb8 <__aeabi_uldivmod>
 800b648:	4602      	mov	r2, r0
 800b64a:	460b      	mov	r3, r1
 800b64c:	4b0e      	ldr	r3, [pc, #56]	; (800b688 <UART_SetConfig+0x38c>)
 800b64e:	fba3 1302 	umull	r1, r3, r3, r2
 800b652:	095b      	lsrs	r3, r3, #5
 800b654:	2164      	movs	r1, #100	; 0x64
 800b656:	fb01 f303 	mul.w	r3, r1, r3
 800b65a:	1ad3      	subs	r3, r2, r3
 800b65c:	011b      	lsls	r3, r3, #4
 800b65e:	3332      	adds	r3, #50	; 0x32
 800b660:	4a09      	ldr	r2, [pc, #36]	; (800b688 <UART_SetConfig+0x38c>)
 800b662:	fba2 2303 	umull	r2, r3, r2, r3
 800b666:	095b      	lsrs	r3, r3, #5
 800b668:	f003 020f 	and.w	r2, r3, #15
 800b66c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	4432      	add	r2, r6
 800b672:	609a      	str	r2, [r3, #8]
}
 800b674:	bf00      	nop
 800b676:	377c      	adds	r7, #124	; 0x7c
 800b678:	46bd      	mov	sp, r7
 800b67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b67e:	bf00      	nop
 800b680:	40011000 	.word	0x40011000
 800b684:	40011400 	.word	0x40011400
 800b688:	51eb851f 	.word	0x51eb851f

0800b68c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800b68c:	b084      	sub	sp, #16
 800b68e:	b480      	push	{r7}
 800b690:	b085      	sub	sp, #20
 800b692:	af00      	add	r7, sp, #0
 800b694:	6078      	str	r0, [r7, #4]
 800b696:	f107 001c 	add.w	r0, r7, #28
 800b69a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b6a2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b6a4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b6a6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b6aa:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b6ae:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b6b2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b6b6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b6b8:	68fa      	ldr	r2, [r7, #12]
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800b6c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b6ca:	68fa      	ldr	r2, [r7, #12]
 800b6cc:	431a      	orrs	r2, r3
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b6d2:	2300      	movs	r3, #0
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3714      	adds	r7, #20
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6de:	b004      	add	sp, #16
 800b6e0:	4770      	bx	lr

0800b6e2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800b6e2:	b480      	push	{r7}
 800b6e4:	b083      	sub	sp, #12
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	370c      	adds	r7, #12
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr

0800b6fc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	681a      	ldr	r2, [r3, #0]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b710:	2300      	movs	r3, #0
}
 800b712:	4618      	mov	r0, r3
 800b714:	370c      	adds	r7, #12
 800b716:	46bd      	mov	sp, r7
 800b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71c:	4770      	bx	lr

0800b71e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800b71e:	b580      	push	{r7, lr}
 800b720:	b082      	sub	sp, #8
 800b722:	af00      	add	r7, sp, #0
 800b724:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2203      	movs	r2, #3
 800b72a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b72c:	2002      	movs	r0, #2
 800b72e:	f7fa ff0f 	bl	8006550 <HAL_Delay>
  
  return HAL_OK;
 800b732:	2300      	movs	r3, #0
}
 800b734:	4618      	mov	r0, r3
 800b736:	3708      	adds	r7, #8
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f003 0303 	and.w	r3, r3, #3
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	370c      	adds	r7, #12
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr

0800b758 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800b758:	b480      	push	{r7}
 800b75a:	b085      	sub	sp, #20
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b762:	2300      	movs	r3, #0
 800b764:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	681a      	ldr	r2, [r3, #0]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b776:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b77c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b782:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b784:	68fa      	ldr	r2, [r7, #12]
 800b786:	4313      	orrs	r3, r2
 800b788:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	68db      	ldr	r3, [r3, #12]
 800b78e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b792:	f023 030f 	bic.w	r3, r3, #15
 800b796:	68fa      	ldr	r2, [r7, #12]
 800b798:	431a      	orrs	r2, r3
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b79e:	2300      	movs	r3, #0
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3714      	adds	r7, #20
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr

0800b7ac <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b083      	sub	sp, #12
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	691b      	ldr	r3, [r3, #16]
 800b7b8:	b2db      	uxtb	r3, r3
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	370c      	adds	r7, #12
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr

0800b7c6 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800b7c6:	b480      	push	{r7}
 800b7c8:	b085      	sub	sp, #20
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]
 800b7ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	3314      	adds	r3, #20
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	4413      	add	r3, r2
 800b7da:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
}  
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3714      	adds	r7, #20
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr

0800b7ec <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b085      	sub	sp, #20
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	681a      	ldr	r2, [r3, #0]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	685a      	ldr	r2, [r3, #4]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b812:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b818:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b81e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b820:	68fa      	ldr	r2, [r7, #12]
 800b822:	4313      	orrs	r3, r2
 800b824:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b82a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	431a      	orrs	r2, r3
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b836:	2300      	movs	r3, #0

}
 800b838:	4618      	mov	r0, r3
 800b83a:	3714      	adds	r7, #20
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr

0800b844 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b088      	sub	sp, #32
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b852:	2310      	movs	r3, #16
 800b854:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b856:	2340      	movs	r3, #64	; 0x40
 800b858:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b85a:	2300      	movs	r3, #0
 800b85c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b85e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b862:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b864:	f107 0308 	add.w	r3, r7, #8
 800b868:	4619      	mov	r1, r3
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f7ff ff74 	bl	800b758 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800b870:	f241 3288 	movw	r2, #5000	; 0x1388
 800b874:	2110      	movs	r1, #16
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f000 fa02 	bl	800bc80 <SDMMC_GetCmdResp1>
 800b87c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b87e:	69fb      	ldr	r3, [r7, #28]
}
 800b880:	4618      	mov	r0, r3
 800b882:	3720      	adds	r7, #32
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b088      	sub	sp, #32
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
 800b890:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b896:	2311      	movs	r3, #17
 800b898:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b89a:	2340      	movs	r3, #64	; 0x40
 800b89c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b8a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b8a8:	f107 0308 	add.w	r3, r7, #8
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f7ff ff52 	bl	800b758 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b8b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8b8:	2111      	movs	r1, #17
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f000 f9e0 	bl	800bc80 <SDMMC_GetCmdResp1>
 800b8c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8c2:	69fb      	ldr	r3, [r7, #28]
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3720      	adds	r7, #32
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b088      	sub	sp, #32
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b8da:	2312      	movs	r3, #18
 800b8dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b8de:	2340      	movs	r3, #64	; 0x40
 800b8e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b8e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b8ec:	f107 0308 	add.w	r3, r7, #8
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f7ff ff30 	bl	800b758 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b8f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8fc:	2112      	movs	r1, #18
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f000 f9be 	bl	800bc80 <SDMMC_GetCmdResp1>
 800b904:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b906:	69fb      	ldr	r3, [r7, #28]
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3720      	adds	r7, #32
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}

0800b910 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b088      	sub	sp, #32
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b91e:	2318      	movs	r3, #24
 800b920:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b922:	2340      	movs	r3, #64	; 0x40
 800b924:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b926:	2300      	movs	r3, #0
 800b928:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b92a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b92e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b930:	f107 0308 	add.w	r3, r7, #8
 800b934:	4619      	mov	r1, r3
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f7ff ff0e 	bl	800b758 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b93c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b940:	2118      	movs	r1, #24
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f000 f99c 	bl	800bc80 <SDMMC_GetCmdResp1>
 800b948:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b94a:	69fb      	ldr	r3, [r7, #28]
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3720      	adds	r7, #32
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b088      	sub	sp, #32
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b962:	2319      	movs	r3, #25
 800b964:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b966:	2340      	movs	r3, #64	; 0x40
 800b968:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b96a:	2300      	movs	r3, #0
 800b96c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b96e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b972:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b974:	f107 0308 	add.w	r3, r7, #8
 800b978:	4619      	mov	r1, r3
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f7ff feec 	bl	800b758 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b980:	f241 3288 	movw	r2, #5000	; 0x1388
 800b984:	2119      	movs	r1, #25
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f000 f97a 	bl	800bc80 <SDMMC_GetCmdResp1>
 800b98c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b98e:	69fb      	ldr	r3, [r7, #28]
}
 800b990:	4618      	mov	r0, r3
 800b992:	3720      	adds	r7, #32
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}

0800b998 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b088      	sub	sp, #32
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b9a4:	230c      	movs	r3, #12
 800b9a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b9a8:	2340      	movs	r3, #64	; 0x40
 800b9aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b9b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b9b6:	f107 0308 	add.w	r3, r7, #8
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f7ff fecb 	bl	800b758 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800b9c2:	4a05      	ldr	r2, [pc, #20]	; (800b9d8 <SDMMC_CmdStopTransfer+0x40>)
 800b9c4:	210c      	movs	r1, #12
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f000 f95a 	bl	800bc80 <SDMMC_GetCmdResp1>
 800b9cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9ce:	69fb      	ldr	r3, [r7, #28]
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3720      	adds	r7, #32
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}
 800b9d8:	05f5e100 	.word	0x05f5e100

0800b9dc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b08a      	sub	sp, #40	; 0x28
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	60f8      	str	r0, [r7, #12]
 800b9e4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b9ec:	2307      	movs	r3, #7
 800b9ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b9f0:	2340      	movs	r3, #64	; 0x40
 800b9f2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b9f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9fc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b9fe:	f107 0310 	add.w	r3, r7, #16
 800ba02:	4619      	mov	r1, r3
 800ba04:	68f8      	ldr	r0, [r7, #12]
 800ba06:	f7ff fea7 	bl	800b758 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800ba0a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba0e:	2107      	movs	r1, #7
 800ba10:	68f8      	ldr	r0, [r7, #12]
 800ba12:	f000 f935 	bl	800bc80 <SDMMC_GetCmdResp1>
 800ba16:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ba18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3728      	adds	r7, #40	; 0x28
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}

0800ba22 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800ba22:	b580      	push	{r7, lr}
 800ba24:	b088      	sub	sp, #32
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ba32:	2300      	movs	r3, #0
 800ba34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ba36:	2300      	movs	r3, #0
 800ba38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ba3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba3e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ba40:	f107 0308 	add.w	r3, r7, #8
 800ba44:	4619      	mov	r1, r3
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f7ff fe86 	bl	800b758 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f000 f8eb 	bl	800bc28 <SDMMC_GetCmdError>
 800ba52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba54:	69fb      	ldr	r3, [r7, #28]
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3720      	adds	r7, #32
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}

0800ba5e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800ba5e:	b580      	push	{r7, lr}
 800ba60:	b088      	sub	sp, #32
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ba66:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ba6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ba6c:	2308      	movs	r3, #8
 800ba6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ba70:	2340      	movs	r3, #64	; 0x40
 800ba72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ba74:	2300      	movs	r3, #0
 800ba76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ba78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba7c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ba7e:	f107 0308 	add.w	r3, r7, #8
 800ba82:	4619      	mov	r1, r3
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f7ff fe67 	bl	800b758 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f000 fae2 	bl	800c054 <SDMMC_GetCmdResp7>
 800ba90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba92:	69fb      	ldr	r3, [r7, #28]
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	3720      	adds	r7, #32
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}

0800ba9c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b088      	sub	sp, #32
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
 800baa4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800baaa:	2337      	movs	r3, #55	; 0x37
 800baac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800baae:	2340      	movs	r3, #64	; 0x40
 800bab0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bab2:	2300      	movs	r3, #0
 800bab4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800baba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800babc:	f107 0308 	add.w	r3, r7, #8
 800bac0:	4619      	mov	r1, r3
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f7ff fe48 	bl	800b758 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800bac8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bacc:	2137      	movs	r1, #55	; 0x37
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 f8d6 	bl	800bc80 <SDMMC_GetCmdResp1>
 800bad4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bad6:	69fb      	ldr	r3, [r7, #28]
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3720      	adds	r7, #32
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b088      	sub	sp, #32
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800baf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800baf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800baf6:	2329      	movs	r3, #41	; 0x29
 800baf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bafa:	2340      	movs	r3, #64	; 0x40
 800bafc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bafe:	2300      	movs	r3, #0
 800bb00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bb02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb06:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bb08:	f107 0308 	add.w	r3, r7, #8
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f7ff fe22 	bl	800b758 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f000 f9e9 	bl	800beec <SDMMC_GetCmdResp3>
 800bb1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb1c:	69fb      	ldr	r3, [r7, #28]
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3720      	adds	r7, #32
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}

0800bb26 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800bb26:	b580      	push	{r7, lr}
 800bb28:	b088      	sub	sp, #32
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800bb32:	2302      	movs	r3, #2
 800bb34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800bb36:	23c0      	movs	r3, #192	; 0xc0
 800bb38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bb3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bb44:	f107 0308 	add.w	r3, r7, #8
 800bb48:	4619      	mov	r1, r3
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f7ff fe04 	bl	800b758 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f000 f983 	bl	800be5c <SDMMC_GetCmdResp2>
 800bb56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb58:	69fb      	ldr	r3, [r7, #28]
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3720      	adds	r7, #32
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}

0800bb62 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bb62:	b580      	push	{r7, lr}
 800bb64:	b088      	sub	sp, #32
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]
 800bb6a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800bb70:	2309      	movs	r3, #9
 800bb72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800bb74:	23c0      	movs	r3, #192	; 0xc0
 800bb76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bb7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bb82:	f107 0308 	add.w	r3, r7, #8
 800bb86:	4619      	mov	r1, r3
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f7ff fde5 	bl	800b758 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f000 f964 	bl	800be5c <SDMMC_GetCmdResp2>
 800bb94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb96:	69fb      	ldr	r3, [r7, #28]
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3720      	adds	r7, #32
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b088      	sub	sp, #32
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800bbae:	2303      	movs	r3, #3
 800bbb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bbb2:	2340      	movs	r3, #64	; 0x40
 800bbb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bbba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbbe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bbc0:	f107 0308 	add.w	r3, r7, #8
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f7ff fdc6 	bl	800b758 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800bbcc:	683a      	ldr	r2, [r7, #0]
 800bbce:	2103      	movs	r1, #3
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 f9c9 	bl	800bf68 <SDMMC_GetCmdResp6>
 800bbd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbd8:	69fb      	ldr	r3, [r7, #28]
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3720      	adds	r7, #32
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bbe2:	b580      	push	{r7, lr}
 800bbe4:	b088      	sub	sp, #32
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
 800bbea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800bbf0:	230d      	movs	r3, #13
 800bbf2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bbf4:	2340      	movs	r3, #64	; 0x40
 800bbf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bbfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bc02:	f107 0308 	add.w	r3, r7, #8
 800bc06:	4619      	mov	r1, r3
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f7ff fda5 	bl	800b758 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800bc0e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc12:	210d      	movs	r1, #13
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f000 f833 	bl	800bc80 <SDMMC_GetCmdResp1>
 800bc1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc1c:	69fb      	ldr	r3, [r7, #28]
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3720      	adds	r7, #32
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
	...

0800bc28 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b085      	sub	sp, #20
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bc30:	4b11      	ldr	r3, [pc, #68]	; (800bc78 <SDMMC_GetCmdError+0x50>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	4a11      	ldr	r2, [pc, #68]	; (800bc7c <SDMMC_GetCmdError+0x54>)
 800bc36:	fba2 2303 	umull	r2, r3, r2, r3
 800bc3a:	0a5b      	lsrs	r3, r3, #9
 800bc3c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc40:	fb02 f303 	mul.w	r3, r2, r3
 800bc44:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	1e5a      	subs	r2, r3, #1
 800bc4a:	60fa      	str	r2, [r7, #12]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d102      	bne.n	800bc56 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc54:	e009      	b.n	800bc6a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d0f1      	beq.n	800bc46 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	22c5      	movs	r2, #197	; 0xc5
 800bc66:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800bc68:	2300      	movs	r3, #0
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3714      	adds	r7, #20
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr
 800bc76:	bf00      	nop
 800bc78:	20000008 	.word	0x20000008
 800bc7c:	10624dd3 	.word	0x10624dd3

0800bc80 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b088      	sub	sp, #32
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	460b      	mov	r3, r1
 800bc8a:	607a      	str	r2, [r7, #4]
 800bc8c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bc8e:	4b70      	ldr	r3, [pc, #448]	; (800be50 <SDMMC_GetCmdResp1+0x1d0>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	4a70      	ldr	r2, [pc, #448]	; (800be54 <SDMMC_GetCmdResp1+0x1d4>)
 800bc94:	fba2 2303 	umull	r2, r3, r2, r3
 800bc98:	0a5a      	lsrs	r2, r3, #9
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	fb02 f303 	mul.w	r3, r2, r3
 800bca0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800bca2:	69fb      	ldr	r3, [r7, #28]
 800bca4:	1e5a      	subs	r2, r3, #1
 800bca6:	61fa      	str	r2, [r7, #28]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d102      	bne.n	800bcb2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bcac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bcb0:	e0c9      	b.n	800be46 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcb6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bcb8:	69bb      	ldr	r3, [r7, #24]
 800bcba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d0ef      	beq.n	800bca2 <SDMMC_GetCmdResp1+0x22>
 800bcc2:	69bb      	ldr	r3, [r7, #24]
 800bcc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d1ea      	bne.n	800bca2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcd0:	f003 0304 	and.w	r3, r3, #4
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d004      	beq.n	800bce2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2204      	movs	r2, #4
 800bcdc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bcde:	2304      	movs	r3, #4
 800bce0:	e0b1      	b.n	800be46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bce6:	f003 0301 	and.w	r3, r3, #1
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d004      	beq.n	800bcf8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2201      	movs	r2, #1
 800bcf2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	e0a6      	b.n	800be46 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	22c5      	movs	r2, #197	; 0xc5
 800bcfc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800bcfe:	68f8      	ldr	r0, [r7, #12]
 800bd00:	f7ff fd54 	bl	800b7ac <SDIO_GetCommandResponse>
 800bd04:	4603      	mov	r3, r0
 800bd06:	461a      	mov	r2, r3
 800bd08:	7afb      	ldrb	r3, [r7, #11]
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d001      	beq.n	800bd12 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd0e:	2301      	movs	r3, #1
 800bd10:	e099      	b.n	800be46 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800bd12:	2100      	movs	r1, #0
 800bd14:	68f8      	ldr	r0, [r7, #12]
 800bd16:	f7ff fd56 	bl	800b7c6 <SDIO_GetResponse>
 800bd1a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bd1c:	697a      	ldr	r2, [r7, #20]
 800bd1e:	4b4e      	ldr	r3, [pc, #312]	; (800be58 <SDMMC_GetCmdResp1+0x1d8>)
 800bd20:	4013      	ands	r3, r2
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d101      	bne.n	800bd2a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800bd26:	2300      	movs	r3, #0
 800bd28:	e08d      	b.n	800be46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	da02      	bge.n	800bd36 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bd30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bd34:	e087      	b.n	800be46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d001      	beq.n	800bd44 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bd40:	2340      	movs	r3, #64	; 0x40
 800bd42:	e080      	b.n	800be46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d001      	beq.n	800bd52 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bd4e:	2380      	movs	r3, #128	; 0x80
 800bd50:	e079      	b.n	800be46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d002      	beq.n	800bd62 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bd5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd60:	e071      	b.n	800be46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d002      	beq.n	800bd72 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bd6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd70:	e069      	b.n	800be46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d002      	beq.n	800bd82 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bd7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd80:	e061      	b.n	800be46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d002      	beq.n	800bd92 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bd8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bd90:	e059      	b.n	800be46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d002      	beq.n	800bda2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bd9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bda0:	e051      	b.n	800be46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d002      	beq.n	800bdb2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bdac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bdb0:	e049      	b.n	800be46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d002      	beq.n	800bdc2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bdbc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bdc0:	e041      	b.n	800be46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d002      	beq.n	800bdd2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800bdcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bdd0:	e039      	b.n	800be46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d002      	beq.n	800bde2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bddc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bde0:	e031      	b.n	800be46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d002      	beq.n	800bdf2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bdec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bdf0:	e029      	b.n	800be46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d002      	beq.n	800be02 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bdfc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800be00:	e021      	b.n	800be46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d002      	beq.n	800be12 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800be0c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800be10:	e019      	b.n	800be46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d002      	beq.n	800be22 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800be1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800be20:	e011      	b.n	800be46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d002      	beq.n	800be32 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800be2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800be30:	e009      	b.n	800be46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	f003 0308 	and.w	r3, r3, #8
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d002      	beq.n	800be42 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800be3c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800be40:	e001      	b.n	800be46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800be42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800be46:	4618      	mov	r0, r3
 800be48:	3720      	adds	r7, #32
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	bf00      	nop
 800be50:	20000008 	.word	0x20000008
 800be54:	10624dd3 	.word	0x10624dd3
 800be58:	fdffe008 	.word	0xfdffe008

0800be5c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b085      	sub	sp, #20
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800be64:	4b1f      	ldr	r3, [pc, #124]	; (800bee4 <SDMMC_GetCmdResp2+0x88>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4a1f      	ldr	r2, [pc, #124]	; (800bee8 <SDMMC_GetCmdResp2+0x8c>)
 800be6a:	fba2 2303 	umull	r2, r3, r2, r3
 800be6e:	0a5b      	lsrs	r3, r3, #9
 800be70:	f241 3288 	movw	r2, #5000	; 0x1388
 800be74:	fb02 f303 	mul.w	r3, r2, r3
 800be78:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	1e5a      	subs	r2, r3, #1
 800be7e:	60fa      	str	r2, [r7, #12]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d102      	bne.n	800be8a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800be84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800be88:	e026      	b.n	800bed8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be8e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800be96:	2b00      	cmp	r3, #0
 800be98:	d0ef      	beq.n	800be7a <SDMMC_GetCmdResp2+0x1e>
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d1ea      	bne.n	800be7a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bea8:	f003 0304 	and.w	r3, r3, #4
 800beac:	2b00      	cmp	r3, #0
 800beae:	d004      	beq.n	800beba <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2204      	movs	r2, #4
 800beb4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800beb6:	2304      	movs	r3, #4
 800beb8:	e00e      	b.n	800bed8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bebe:	f003 0301 	and.w	r3, r3, #1
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d004      	beq.n	800bed0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2201      	movs	r2, #1
 800beca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800becc:	2301      	movs	r3, #1
 800bece:	e003      	b.n	800bed8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	22c5      	movs	r2, #197	; 0xc5
 800bed4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bed6:	2300      	movs	r3, #0
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3714      	adds	r7, #20
 800bedc:	46bd      	mov	sp, r7
 800bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee2:	4770      	bx	lr
 800bee4:	20000008 	.word	0x20000008
 800bee8:	10624dd3 	.word	0x10624dd3

0800beec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800beec:	b480      	push	{r7}
 800beee:	b085      	sub	sp, #20
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bef4:	4b1a      	ldr	r3, [pc, #104]	; (800bf60 <SDMMC_GetCmdResp3+0x74>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	4a1a      	ldr	r2, [pc, #104]	; (800bf64 <SDMMC_GetCmdResp3+0x78>)
 800befa:	fba2 2303 	umull	r2, r3, r2, r3
 800befe:	0a5b      	lsrs	r3, r3, #9
 800bf00:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf04:	fb02 f303 	mul.w	r3, r2, r3
 800bf08:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	1e5a      	subs	r2, r3, #1
 800bf0e:	60fa      	str	r2, [r7, #12]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d102      	bne.n	800bf1a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bf14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bf18:	e01b      	b.n	800bf52 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf1e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d0ef      	beq.n	800bf0a <SDMMC_GetCmdResp3+0x1e>
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d1ea      	bne.n	800bf0a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf38:	f003 0304 	and.w	r3, r3, #4
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d004      	beq.n	800bf4a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2204      	movs	r2, #4
 800bf44:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bf46:	2304      	movs	r3, #4
 800bf48:	e003      	b.n	800bf52 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	22c5      	movs	r2, #197	; 0xc5
 800bf4e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bf50:	2300      	movs	r3, #0
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3714      	adds	r7, #20
 800bf56:	46bd      	mov	sp, r7
 800bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5c:	4770      	bx	lr
 800bf5e:	bf00      	nop
 800bf60:	20000008 	.word	0x20000008
 800bf64:	10624dd3 	.word	0x10624dd3

0800bf68 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b088      	sub	sp, #32
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	60f8      	str	r0, [r7, #12]
 800bf70:	460b      	mov	r3, r1
 800bf72:	607a      	str	r2, [r7, #4]
 800bf74:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bf76:	4b35      	ldr	r3, [pc, #212]	; (800c04c <SDMMC_GetCmdResp6+0xe4>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	4a35      	ldr	r2, [pc, #212]	; (800c050 <SDMMC_GetCmdResp6+0xe8>)
 800bf7c:	fba2 2303 	umull	r2, r3, r2, r3
 800bf80:	0a5b      	lsrs	r3, r3, #9
 800bf82:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf86:	fb02 f303 	mul.w	r3, r2, r3
 800bf8a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800bf8c:	69fb      	ldr	r3, [r7, #28]
 800bf8e:	1e5a      	subs	r2, r3, #1
 800bf90:	61fa      	str	r2, [r7, #28]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d102      	bne.n	800bf9c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bf96:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bf9a:	e052      	b.n	800c042 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfa0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bfa2:	69bb      	ldr	r3, [r7, #24]
 800bfa4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d0ef      	beq.n	800bf8c <SDMMC_GetCmdResp6+0x24>
 800bfac:	69bb      	ldr	r3, [r7, #24]
 800bfae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d1ea      	bne.n	800bf8c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfba:	f003 0304 	and.w	r3, r3, #4
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d004      	beq.n	800bfcc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	2204      	movs	r2, #4
 800bfc6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bfc8:	2304      	movs	r3, #4
 800bfca:	e03a      	b.n	800c042 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfd0:	f003 0301 	and.w	r3, r3, #1
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d004      	beq.n	800bfe2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	2201      	movs	r2, #1
 800bfdc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bfde:	2301      	movs	r3, #1
 800bfe0:	e02f      	b.n	800c042 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800bfe2:	68f8      	ldr	r0, [r7, #12]
 800bfe4:	f7ff fbe2 	bl	800b7ac <SDIO_GetCommandResponse>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	461a      	mov	r2, r3
 800bfec:	7afb      	ldrb	r3, [r7, #11]
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d001      	beq.n	800bff6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bff2:	2301      	movs	r3, #1
 800bff4:	e025      	b.n	800c042 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	22c5      	movs	r2, #197	; 0xc5
 800bffa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800bffc:	2100      	movs	r1, #0
 800bffe:	68f8      	ldr	r0, [r7, #12]
 800c000:	f7ff fbe1 	bl	800b7c6 <SDIO_GetResponse>
 800c004:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d106      	bne.n	800c01e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c010:	697b      	ldr	r3, [r7, #20]
 800c012:	0c1b      	lsrs	r3, r3, #16
 800c014:	b29a      	uxth	r2, r3
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c01a:	2300      	movs	r3, #0
 800c01c:	e011      	b.n	800c042 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c024:	2b00      	cmp	r3, #0
 800c026:	d002      	beq.n	800c02e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c028:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c02c:	e009      	b.n	800c042 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c034:	2b00      	cmp	r3, #0
 800c036:	d002      	beq.n	800c03e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c03c:	e001      	b.n	800c042 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c03e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c042:	4618      	mov	r0, r3
 800c044:	3720      	adds	r7, #32
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}
 800c04a:	bf00      	nop
 800c04c:	20000008 	.word	0x20000008
 800c050:	10624dd3 	.word	0x10624dd3

0800c054 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800c054:	b480      	push	{r7}
 800c056:	b085      	sub	sp, #20
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c05c:	4b22      	ldr	r3, [pc, #136]	; (800c0e8 <SDMMC_GetCmdResp7+0x94>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	4a22      	ldr	r2, [pc, #136]	; (800c0ec <SDMMC_GetCmdResp7+0x98>)
 800c062:	fba2 2303 	umull	r2, r3, r2, r3
 800c066:	0a5b      	lsrs	r3, r3, #9
 800c068:	f241 3288 	movw	r2, #5000	; 0x1388
 800c06c:	fb02 f303 	mul.w	r3, r2, r3
 800c070:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	1e5a      	subs	r2, r3, #1
 800c076:	60fa      	str	r2, [r7, #12]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d102      	bne.n	800c082 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c07c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c080:	e02c      	b.n	800c0dc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c086:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d0ef      	beq.n	800c072 <SDMMC_GetCmdResp7+0x1e>
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d1ea      	bne.n	800c072 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0a0:	f003 0304 	and.w	r3, r3, #4
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d004      	beq.n	800c0b2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2204      	movs	r2, #4
 800c0ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c0ae:	2304      	movs	r3, #4
 800c0b0:	e014      	b.n	800c0dc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0b6:	f003 0301 	and.w	r3, r3, #1
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d004      	beq.n	800c0c8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	e009      	b.n	800c0dc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d002      	beq.n	800c0da <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2240      	movs	r2, #64	; 0x40
 800c0d8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c0da:	2300      	movs	r3, #0
  
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3714      	adds	r7, #20
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr
 800c0e8:	20000008 	.word	0x20000008
 800c0ec:	10624dd3 	.word	0x10624dd3

0800c0f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c0f4:	4904      	ldr	r1, [pc, #16]	; (800c108 <MX_FATFS_Init+0x18>)
 800c0f6:	4805      	ldr	r0, [pc, #20]	; (800c10c <MX_FATFS_Init+0x1c>)
 800c0f8:	f002 fff0 	bl	800f0dc <FATFS_LinkDriver>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	461a      	mov	r2, r3
 800c100:	4b03      	ldr	r3, [pc, #12]	; (800c110 <MX_FATFS_Init+0x20>)
 800c102:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c104:	bf00      	nop
 800c106:	bd80      	pop	{r7, pc}
 800c108:	20002b7c 	.word	0x20002b7c
 800c10c:	08017ce8 	.word	0x08017ce8
 800c110:	20002b78 	.word	0x20002b78

0800c114 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c114:	b480      	push	{r7}
 800c116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c118:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr

0800c124 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b082      	sub	sp, #8
 800c128:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c12a:	2300      	movs	r3, #0
 800c12c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c12e:	f000 f86b 	bl	800c208 <BSP_SD_IsDetected>
 800c132:	4603      	mov	r3, r0
 800c134:	2b01      	cmp	r3, #1
 800c136:	d001      	beq.n	800c13c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800c138:	2301      	movs	r3, #1
 800c13a:	e005      	b.n	800c148 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800c13c:	4804      	ldr	r0, [pc, #16]	; (800c150 <BSP_SD_Init+0x2c>)
 800c13e:	f7fc fe01 	bl	8008d44 <HAL_SD_Init>
 800c142:	4603      	mov	r3, r0
 800c144:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800c146:	79fb      	ldrb	r3, [r7, #7]
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3708      	adds	r7, #8
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}
 800c150:	20002a98 	.word	0x20002a98

0800c154 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b088      	sub	sp, #32
 800c158:	af02      	add	r7, sp, #8
 800c15a:	60f8      	str	r0, [r7, #12]
 800c15c:	60b9      	str	r1, [r7, #8]
 800c15e:	607a      	str	r2, [r7, #4]
 800c160:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c162:	2300      	movs	r3, #0
 800c164:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	9300      	str	r3, [sp, #0]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	68ba      	ldr	r2, [r7, #8]
 800c16e:	68f9      	ldr	r1, [r7, #12]
 800c170:	4806      	ldr	r0, [pc, #24]	; (800c18c <BSP_SD_ReadBlocks+0x38>)
 800c172:	f7fc fe95 	bl	8008ea0 <HAL_SD_ReadBlocks>
 800c176:	4603      	mov	r3, r0
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d001      	beq.n	800c180 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c17c:	2301      	movs	r3, #1
 800c17e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c180:	7dfb      	ldrb	r3, [r7, #23]
}
 800c182:	4618      	mov	r0, r3
 800c184:	3718      	adds	r7, #24
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}
 800c18a:	bf00      	nop
 800c18c:	20002a98 	.word	0x20002a98

0800c190 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b088      	sub	sp, #32
 800c194:	af02      	add	r7, sp, #8
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	60b9      	str	r1, [r7, #8]
 800c19a:	607a      	str	r2, [r7, #4]
 800c19c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	9300      	str	r3, [sp, #0]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	68ba      	ldr	r2, [r7, #8]
 800c1aa:	68f9      	ldr	r1, [r7, #12]
 800c1ac:	4806      	ldr	r0, [pc, #24]	; (800c1c8 <BSP_SD_WriteBlocks+0x38>)
 800c1ae:	f7fd f855 	bl	800925c <HAL_SD_WriteBlocks>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d001      	beq.n	800c1bc <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c1bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3718      	adds	r7, #24
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	bf00      	nop
 800c1c8:	20002a98 	.word	0x20002a98

0800c1cc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c1d0:	4805      	ldr	r0, [pc, #20]	; (800c1e8 <BSP_SD_GetCardState+0x1c>)
 800c1d2:	f7fd fb99 	bl	8009908 <HAL_SD_GetCardState>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	2b04      	cmp	r3, #4
 800c1da:	bf14      	ite	ne
 800c1dc:	2301      	movne	r3, #1
 800c1de:	2300      	moveq	r3, #0
 800c1e0:	b2db      	uxtb	r3, r3
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	20002a98 	.word	0x20002a98

0800c1ec <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800c1f4:	6879      	ldr	r1, [r7, #4]
 800c1f6:	4803      	ldr	r0, [pc, #12]	; (800c204 <BSP_SD_GetCardInfo+0x18>)
 800c1f8:	f7fd fb5a 	bl	80098b0 <HAL_SD_GetCardInfo>
}
 800c1fc:	bf00      	nop
 800c1fe:	3708      	adds	r7, #8
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}
 800c204:	20002a98 	.word	0x20002a98

0800c208 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c208:	b480      	push	{r7}
 800c20a:	b083      	sub	sp, #12
 800c20c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c20e:	2301      	movs	r3, #1
 800c210:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800c212:	79fb      	ldrb	r3, [r7, #7]
 800c214:	b2db      	uxtb	r3, r3
}
 800c216:	4618      	mov	r0, r3
 800c218:	370c      	adds	r7, #12
 800c21a:	46bd      	mov	sp, r7
 800c21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c220:	4770      	bx	lr
	...

0800c224 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b082      	sub	sp, #8
 800c228:	af00      	add	r7, sp, #0
 800c22a:	4603      	mov	r3, r0
 800c22c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c22e:	4b0b      	ldr	r3, [pc, #44]	; (800c25c <SD_CheckStatus+0x38>)
 800c230:	2201      	movs	r2, #1
 800c232:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c234:	f7ff ffca 	bl	800c1cc <BSP_SD_GetCardState>
 800c238:	4603      	mov	r3, r0
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d107      	bne.n	800c24e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c23e:	4b07      	ldr	r3, [pc, #28]	; (800c25c <SD_CheckStatus+0x38>)
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	b2db      	uxtb	r3, r3
 800c244:	f023 0301 	bic.w	r3, r3, #1
 800c248:	b2da      	uxtb	r2, r3
 800c24a:	4b04      	ldr	r3, [pc, #16]	; (800c25c <SD_CheckStatus+0x38>)
 800c24c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c24e:	4b03      	ldr	r3, [pc, #12]	; (800c25c <SD_CheckStatus+0x38>)
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	b2db      	uxtb	r3, r3
}
 800c254:	4618      	mov	r0, r3
 800c256:	3708      	adds	r7, #8
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}
 800c25c:	20000059 	.word	0x20000059

0800c260 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b082      	sub	sp, #8
 800c264:	af00      	add	r7, sp, #0
 800c266:	4603      	mov	r3, r0
 800c268:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800c26a:	4b0b      	ldr	r3, [pc, #44]	; (800c298 <SD_initialize+0x38>)
 800c26c:	2201      	movs	r2, #1
 800c26e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c270:	f7ff ff58 	bl	800c124 <BSP_SD_Init>
 800c274:	4603      	mov	r3, r0
 800c276:	2b00      	cmp	r3, #0
 800c278:	d107      	bne.n	800c28a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800c27a:	79fb      	ldrb	r3, [r7, #7]
 800c27c:	4618      	mov	r0, r3
 800c27e:	f7ff ffd1 	bl	800c224 <SD_CheckStatus>
 800c282:	4603      	mov	r3, r0
 800c284:	461a      	mov	r2, r3
 800c286:	4b04      	ldr	r3, [pc, #16]	; (800c298 <SD_initialize+0x38>)
 800c288:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c28a:	4b03      	ldr	r3, [pc, #12]	; (800c298 <SD_initialize+0x38>)
 800c28c:	781b      	ldrb	r3, [r3, #0]
 800c28e:	b2db      	uxtb	r3, r3
}
 800c290:	4618      	mov	r0, r3
 800c292:	3708      	adds	r7, #8
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}
 800c298:	20000059 	.word	0x20000059

0800c29c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b082      	sub	sp, #8
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c2a6:	79fb      	ldrb	r3, [r7, #7]
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f7ff ffbb 	bl	800c224 <SD_CheckStatus>
 800c2ae:	4603      	mov	r3, r0
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3708      	adds	r7, #8
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b086      	sub	sp, #24
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	60b9      	str	r1, [r7, #8]
 800c2c0:	607a      	str	r2, [r7, #4]
 800c2c2:	603b      	str	r3, [r7, #0]
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800c2cc:	f04f 33ff 	mov.w	r3, #4294967295
 800c2d0:	683a      	ldr	r2, [r7, #0]
 800c2d2:	6879      	ldr	r1, [r7, #4]
 800c2d4:	68b8      	ldr	r0, [r7, #8]
 800c2d6:	f7ff ff3d 	bl	800c154 <BSP_SD_ReadBlocks>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d107      	bne.n	800c2f0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c2e0:	bf00      	nop
 800c2e2:	f7ff ff73 	bl	800c1cc <BSP_SD_GetCardState>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d1fa      	bne.n	800c2e2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c2f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3718      	adds	r7, #24
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}

0800c2fa <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c2fa:	b580      	push	{r7, lr}
 800c2fc:	b086      	sub	sp, #24
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	60b9      	str	r1, [r7, #8]
 800c302:	607a      	str	r2, [r7, #4]
 800c304:	603b      	str	r3, [r7, #0]
 800c306:	4603      	mov	r3, r0
 800c308:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c30a:	2301      	movs	r3, #1
 800c30c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800c30e:	f04f 33ff 	mov.w	r3, #4294967295
 800c312:	683a      	ldr	r2, [r7, #0]
 800c314:	6879      	ldr	r1, [r7, #4]
 800c316:	68b8      	ldr	r0, [r7, #8]
 800c318:	f7ff ff3a 	bl	800c190 <BSP_SD_WriteBlocks>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d107      	bne.n	800c332 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800c322:	bf00      	nop
 800c324:	f7ff ff52 	bl	800c1cc <BSP_SD_GetCardState>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d1fa      	bne.n	800c324 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800c32e:	2300      	movs	r3, #0
 800c330:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c332:	7dfb      	ldrb	r3, [r7, #23]
}
 800c334:	4618      	mov	r0, r3
 800c336:	3718      	adds	r7, #24
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}

0800c33c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b08c      	sub	sp, #48	; 0x30
 800c340:	af00      	add	r7, sp, #0
 800c342:	4603      	mov	r3, r0
 800c344:	603a      	str	r2, [r7, #0]
 800c346:	71fb      	strb	r3, [r7, #7]
 800c348:	460b      	mov	r3, r1
 800c34a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c34c:	2301      	movs	r3, #1
 800c34e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c352:	4b25      	ldr	r3, [pc, #148]	; (800c3e8 <SD_ioctl+0xac>)
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	b2db      	uxtb	r3, r3
 800c358:	f003 0301 	and.w	r3, r3, #1
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d001      	beq.n	800c364 <SD_ioctl+0x28>
 800c360:	2303      	movs	r3, #3
 800c362:	e03c      	b.n	800c3de <SD_ioctl+0xa2>

  switch (cmd)
 800c364:	79bb      	ldrb	r3, [r7, #6]
 800c366:	2b03      	cmp	r3, #3
 800c368:	d834      	bhi.n	800c3d4 <SD_ioctl+0x98>
 800c36a:	a201      	add	r2, pc, #4	; (adr r2, 800c370 <SD_ioctl+0x34>)
 800c36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c370:	0800c381 	.word	0x0800c381
 800c374:	0800c389 	.word	0x0800c389
 800c378:	0800c3a1 	.word	0x0800c3a1
 800c37c:	0800c3bb 	.word	0x0800c3bb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c380:	2300      	movs	r3, #0
 800c382:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c386:	e028      	b.n	800c3da <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c388:	f107 030c 	add.w	r3, r7, #12
 800c38c:	4618      	mov	r0, r3
 800c38e:	f7ff ff2d 	bl	800c1ec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c398:	2300      	movs	r3, #0
 800c39a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c39e:	e01c      	b.n	800c3da <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c3a0:	f107 030c 	add.w	r3, r7, #12
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f7ff ff21 	bl	800c1ec <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ac:	b29a      	uxth	r2, r3
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c3b8:	e00f      	b.n	800c3da <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c3ba:	f107 030c 	add.w	r3, r7, #12
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7ff ff14 	bl	800c1ec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c6:	0a5a      	lsrs	r2, r3, #9
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c3d2:	e002      	b.n	800c3da <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c3d4:	2304      	movs	r3, #4
 800c3d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c3da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3730      	adds	r7, #48	; 0x30
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
 800c3e6:	bf00      	nop
 800c3e8:	20000059 	.word	0x20000059

0800c3ec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b084      	sub	sp, #16
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c3f6:	79fb      	ldrb	r3, [r7, #7]
 800c3f8:	4a08      	ldr	r2, [pc, #32]	; (800c41c <disk_status+0x30>)
 800c3fa:	009b      	lsls	r3, r3, #2
 800c3fc:	4413      	add	r3, r2
 800c3fe:	685b      	ldr	r3, [r3, #4]
 800c400:	685b      	ldr	r3, [r3, #4]
 800c402:	79fa      	ldrb	r2, [r7, #7]
 800c404:	4905      	ldr	r1, [pc, #20]	; (800c41c <disk_status+0x30>)
 800c406:	440a      	add	r2, r1
 800c408:	7a12      	ldrb	r2, [r2, #8]
 800c40a:	4610      	mov	r0, r2
 800c40c:	4798      	blx	r3
 800c40e:	4603      	mov	r3, r0
 800c410:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c412:	7bfb      	ldrb	r3, [r7, #15]
}
 800c414:	4618      	mov	r0, r3
 800c416:	3710      	adds	r7, #16
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}
 800c41c:	20002348 	.word	0x20002348

0800c420 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b084      	sub	sp, #16
 800c424:	af00      	add	r7, sp, #0
 800c426:	4603      	mov	r3, r0
 800c428:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c42a:	2300      	movs	r3, #0
 800c42c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c42e:	79fb      	ldrb	r3, [r7, #7]
 800c430:	4a0d      	ldr	r2, [pc, #52]	; (800c468 <disk_initialize+0x48>)
 800c432:	5cd3      	ldrb	r3, [r2, r3]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d111      	bne.n	800c45c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c438:	79fb      	ldrb	r3, [r7, #7]
 800c43a:	4a0b      	ldr	r2, [pc, #44]	; (800c468 <disk_initialize+0x48>)
 800c43c:	2101      	movs	r1, #1
 800c43e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c440:	79fb      	ldrb	r3, [r7, #7]
 800c442:	4a09      	ldr	r2, [pc, #36]	; (800c468 <disk_initialize+0x48>)
 800c444:	009b      	lsls	r3, r3, #2
 800c446:	4413      	add	r3, r2
 800c448:	685b      	ldr	r3, [r3, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	79fa      	ldrb	r2, [r7, #7]
 800c44e:	4906      	ldr	r1, [pc, #24]	; (800c468 <disk_initialize+0x48>)
 800c450:	440a      	add	r2, r1
 800c452:	7a12      	ldrb	r2, [r2, #8]
 800c454:	4610      	mov	r0, r2
 800c456:	4798      	blx	r3
 800c458:	4603      	mov	r3, r0
 800c45a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c45c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3710      	adds	r7, #16
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}
 800c466:	bf00      	nop
 800c468:	20002348 	.word	0x20002348

0800c46c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c46c:	b590      	push	{r4, r7, lr}
 800c46e:	b087      	sub	sp, #28
 800c470:	af00      	add	r7, sp, #0
 800c472:	60b9      	str	r1, [r7, #8]
 800c474:	607a      	str	r2, [r7, #4]
 800c476:	603b      	str	r3, [r7, #0]
 800c478:	4603      	mov	r3, r0
 800c47a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c47c:	7bfb      	ldrb	r3, [r7, #15]
 800c47e:	4a0a      	ldr	r2, [pc, #40]	; (800c4a8 <disk_read+0x3c>)
 800c480:	009b      	lsls	r3, r3, #2
 800c482:	4413      	add	r3, r2
 800c484:	685b      	ldr	r3, [r3, #4]
 800c486:	689c      	ldr	r4, [r3, #8]
 800c488:	7bfb      	ldrb	r3, [r7, #15]
 800c48a:	4a07      	ldr	r2, [pc, #28]	; (800c4a8 <disk_read+0x3c>)
 800c48c:	4413      	add	r3, r2
 800c48e:	7a18      	ldrb	r0, [r3, #8]
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	687a      	ldr	r2, [r7, #4]
 800c494:	68b9      	ldr	r1, [r7, #8]
 800c496:	47a0      	blx	r4
 800c498:	4603      	mov	r3, r0
 800c49a:	75fb      	strb	r3, [r7, #23]
  return res;
 800c49c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	371c      	adds	r7, #28
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd90      	pop	{r4, r7, pc}
 800c4a6:	bf00      	nop
 800c4a8:	20002348 	.word	0x20002348

0800c4ac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c4ac:	b590      	push	{r4, r7, lr}
 800c4ae:	b087      	sub	sp, #28
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	60b9      	str	r1, [r7, #8]
 800c4b4:	607a      	str	r2, [r7, #4]
 800c4b6:	603b      	str	r3, [r7, #0]
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c4bc:	7bfb      	ldrb	r3, [r7, #15]
 800c4be:	4a0a      	ldr	r2, [pc, #40]	; (800c4e8 <disk_write+0x3c>)
 800c4c0:	009b      	lsls	r3, r3, #2
 800c4c2:	4413      	add	r3, r2
 800c4c4:	685b      	ldr	r3, [r3, #4]
 800c4c6:	68dc      	ldr	r4, [r3, #12]
 800c4c8:	7bfb      	ldrb	r3, [r7, #15]
 800c4ca:	4a07      	ldr	r2, [pc, #28]	; (800c4e8 <disk_write+0x3c>)
 800c4cc:	4413      	add	r3, r2
 800c4ce:	7a18      	ldrb	r0, [r3, #8]
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	687a      	ldr	r2, [r7, #4]
 800c4d4:	68b9      	ldr	r1, [r7, #8]
 800c4d6:	47a0      	blx	r4
 800c4d8:	4603      	mov	r3, r0
 800c4da:	75fb      	strb	r3, [r7, #23]
  return res;
 800c4dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	371c      	adds	r7, #28
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd90      	pop	{r4, r7, pc}
 800c4e6:	bf00      	nop
 800c4e8:	20002348 	.word	0x20002348

0800c4ec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b084      	sub	sp, #16
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	603a      	str	r2, [r7, #0]
 800c4f6:	71fb      	strb	r3, [r7, #7]
 800c4f8:	460b      	mov	r3, r1
 800c4fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c4fc:	79fb      	ldrb	r3, [r7, #7]
 800c4fe:	4a09      	ldr	r2, [pc, #36]	; (800c524 <disk_ioctl+0x38>)
 800c500:	009b      	lsls	r3, r3, #2
 800c502:	4413      	add	r3, r2
 800c504:	685b      	ldr	r3, [r3, #4]
 800c506:	691b      	ldr	r3, [r3, #16]
 800c508:	79fa      	ldrb	r2, [r7, #7]
 800c50a:	4906      	ldr	r1, [pc, #24]	; (800c524 <disk_ioctl+0x38>)
 800c50c:	440a      	add	r2, r1
 800c50e:	7a10      	ldrb	r0, [r2, #8]
 800c510:	79b9      	ldrb	r1, [r7, #6]
 800c512:	683a      	ldr	r2, [r7, #0]
 800c514:	4798      	blx	r3
 800c516:	4603      	mov	r3, r0
 800c518:	73fb      	strb	r3, [r7, #15]
  return res;
 800c51a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3710      	adds	r7, #16
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}
 800c524:	20002348 	.word	0x20002348

0800c528 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c528:	b480      	push	{r7}
 800c52a:	b085      	sub	sp, #20
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	3301      	adds	r3, #1
 800c534:	781b      	ldrb	r3, [r3, #0]
 800c536:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c538:	89fb      	ldrh	r3, [r7, #14]
 800c53a:	021b      	lsls	r3, r3, #8
 800c53c:	b21a      	sxth	r2, r3
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	781b      	ldrb	r3, [r3, #0]
 800c542:	b21b      	sxth	r3, r3
 800c544:	4313      	orrs	r3, r2
 800c546:	b21b      	sxth	r3, r3
 800c548:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c54a:	89fb      	ldrh	r3, [r7, #14]
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3714      	adds	r7, #20
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr

0800c558 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c558:	b480      	push	{r7}
 800c55a:	b085      	sub	sp, #20
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	3303      	adds	r3, #3
 800c564:	781b      	ldrb	r3, [r3, #0]
 800c566:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	021b      	lsls	r3, r3, #8
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	3202      	adds	r2, #2
 800c570:	7812      	ldrb	r2, [r2, #0]
 800c572:	4313      	orrs	r3, r2
 800c574:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	021b      	lsls	r3, r3, #8
 800c57a:	687a      	ldr	r2, [r7, #4]
 800c57c:	3201      	adds	r2, #1
 800c57e:	7812      	ldrb	r2, [r2, #0]
 800c580:	4313      	orrs	r3, r2
 800c582:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	021b      	lsls	r3, r3, #8
 800c588:	687a      	ldr	r2, [r7, #4]
 800c58a:	7812      	ldrb	r2, [r2, #0]
 800c58c:	4313      	orrs	r3, r2
 800c58e:	60fb      	str	r3, [r7, #12]
	return rv;
 800c590:	68fb      	ldr	r3, [r7, #12]
}
 800c592:	4618      	mov	r0, r3
 800c594:	3714      	adds	r7, #20
 800c596:	46bd      	mov	sp, r7
 800c598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59c:	4770      	bx	lr

0800c59e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c59e:	b480      	push	{r7}
 800c5a0:	b083      	sub	sp, #12
 800c5a2:	af00      	add	r7, sp, #0
 800c5a4:	6078      	str	r0, [r7, #4]
 800c5a6:	460b      	mov	r3, r1
 800c5a8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	1c5a      	adds	r2, r3, #1
 800c5ae:	607a      	str	r2, [r7, #4]
 800c5b0:	887a      	ldrh	r2, [r7, #2]
 800c5b2:	b2d2      	uxtb	r2, r2
 800c5b4:	701a      	strb	r2, [r3, #0]
 800c5b6:	887b      	ldrh	r3, [r7, #2]
 800c5b8:	0a1b      	lsrs	r3, r3, #8
 800c5ba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	1c5a      	adds	r2, r3, #1
 800c5c0:	607a      	str	r2, [r7, #4]
 800c5c2:	887a      	ldrh	r2, [r7, #2]
 800c5c4:	b2d2      	uxtb	r2, r2
 800c5c6:	701a      	strb	r2, [r3, #0]
}
 800c5c8:	bf00      	nop
 800c5ca:	370c      	adds	r7, #12
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d2:	4770      	bx	lr

0800c5d4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b083      	sub	sp, #12
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	1c5a      	adds	r2, r3, #1
 800c5e2:	607a      	str	r2, [r7, #4]
 800c5e4:	683a      	ldr	r2, [r7, #0]
 800c5e6:	b2d2      	uxtb	r2, r2
 800c5e8:	701a      	strb	r2, [r3, #0]
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	0a1b      	lsrs	r3, r3, #8
 800c5ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	1c5a      	adds	r2, r3, #1
 800c5f4:	607a      	str	r2, [r7, #4]
 800c5f6:	683a      	ldr	r2, [r7, #0]
 800c5f8:	b2d2      	uxtb	r2, r2
 800c5fa:	701a      	strb	r2, [r3, #0]
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	0a1b      	lsrs	r3, r3, #8
 800c600:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	1c5a      	adds	r2, r3, #1
 800c606:	607a      	str	r2, [r7, #4]
 800c608:	683a      	ldr	r2, [r7, #0]
 800c60a:	b2d2      	uxtb	r2, r2
 800c60c:	701a      	strb	r2, [r3, #0]
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	0a1b      	lsrs	r3, r3, #8
 800c612:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	1c5a      	adds	r2, r3, #1
 800c618:	607a      	str	r2, [r7, #4]
 800c61a:	683a      	ldr	r2, [r7, #0]
 800c61c:	b2d2      	uxtb	r2, r2
 800c61e:	701a      	strb	r2, [r3, #0]
}
 800c620:	bf00      	nop
 800c622:	370c      	adds	r7, #12
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	4770      	bx	lr

0800c62c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c62c:	b480      	push	{r7}
 800c62e:	b087      	sub	sp, #28
 800c630:	af00      	add	r7, sp, #0
 800c632:	60f8      	str	r0, [r7, #12]
 800c634:	60b9      	str	r1, [r7, #8]
 800c636:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d00d      	beq.n	800c662 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c646:	693a      	ldr	r2, [r7, #16]
 800c648:	1c53      	adds	r3, r2, #1
 800c64a:	613b      	str	r3, [r7, #16]
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	1c59      	adds	r1, r3, #1
 800c650:	6179      	str	r1, [r7, #20]
 800c652:	7812      	ldrb	r2, [r2, #0]
 800c654:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	3b01      	subs	r3, #1
 800c65a:	607b      	str	r3, [r7, #4]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d1f1      	bne.n	800c646 <mem_cpy+0x1a>
	}
}
 800c662:	bf00      	nop
 800c664:	371c      	adds	r7, #28
 800c666:	46bd      	mov	sp, r7
 800c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66c:	4770      	bx	lr

0800c66e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c66e:	b480      	push	{r7}
 800c670:	b087      	sub	sp, #28
 800c672:	af00      	add	r7, sp, #0
 800c674:	60f8      	str	r0, [r7, #12]
 800c676:	60b9      	str	r1, [r7, #8]
 800c678:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	1c5a      	adds	r2, r3, #1
 800c682:	617a      	str	r2, [r7, #20]
 800c684:	68ba      	ldr	r2, [r7, #8]
 800c686:	b2d2      	uxtb	r2, r2
 800c688:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	3b01      	subs	r3, #1
 800c68e:	607b      	str	r3, [r7, #4]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d1f3      	bne.n	800c67e <mem_set+0x10>
}
 800c696:	bf00      	nop
 800c698:	bf00      	nop
 800c69a:	371c      	adds	r7, #28
 800c69c:	46bd      	mov	sp, r7
 800c69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a2:	4770      	bx	lr

0800c6a4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c6a4:	b480      	push	{r7}
 800c6a6:	b089      	sub	sp, #36	; 0x24
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	60f8      	str	r0, [r7, #12]
 800c6ac:	60b9      	str	r1, [r7, #8]
 800c6ae:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	61fb      	str	r3, [r7, #28]
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c6bc:	69fb      	ldr	r3, [r7, #28]
 800c6be:	1c5a      	adds	r2, r3, #1
 800c6c0:	61fa      	str	r2, [r7, #28]
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	4619      	mov	r1, r3
 800c6c6:	69bb      	ldr	r3, [r7, #24]
 800c6c8:	1c5a      	adds	r2, r3, #1
 800c6ca:	61ba      	str	r2, [r7, #24]
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	1acb      	subs	r3, r1, r3
 800c6d0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	3b01      	subs	r3, #1
 800c6d6:	607b      	str	r3, [r7, #4]
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d002      	beq.n	800c6e4 <mem_cmp+0x40>
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d0eb      	beq.n	800c6bc <mem_cmp+0x18>

	return r;
 800c6e4:	697b      	ldr	r3, [r7, #20]
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3724      	adds	r7, #36	; 0x24
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr

0800c6f2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c6f2:	b480      	push	{r7}
 800c6f4:	b083      	sub	sp, #12
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	6078      	str	r0, [r7, #4]
 800c6fa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c6fc:	e002      	b.n	800c704 <chk_chr+0x12>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	3301      	adds	r3, #1
 800c702:	607b      	str	r3, [r7, #4]
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d005      	beq.n	800c718 <chk_chr+0x26>
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	461a      	mov	r2, r3
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	4293      	cmp	r3, r2
 800c716:	d1f2      	bne.n	800c6fe <chk_chr+0xc>
	return *str;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	781b      	ldrb	r3, [r3, #0]
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	370c      	adds	r7, #12
 800c720:	46bd      	mov	sp, r7
 800c722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c726:	4770      	bx	lr

0800c728 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c728:	b480      	push	{r7}
 800c72a:	b085      	sub	sp, #20
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
 800c730:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c732:	2300      	movs	r3, #0
 800c734:	60bb      	str	r3, [r7, #8]
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	60fb      	str	r3, [r7, #12]
 800c73a:	e029      	b.n	800c790 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c73c:	4a27      	ldr	r2, [pc, #156]	; (800c7dc <chk_lock+0xb4>)
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	011b      	lsls	r3, r3, #4
 800c742:	4413      	add	r3, r2
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d01d      	beq.n	800c786 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c74a:	4a24      	ldr	r2, [pc, #144]	; (800c7dc <chk_lock+0xb4>)
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	011b      	lsls	r3, r3, #4
 800c750:	4413      	add	r3, r2
 800c752:	681a      	ldr	r2, [r3, #0]
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	429a      	cmp	r2, r3
 800c75a:	d116      	bne.n	800c78a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c75c:	4a1f      	ldr	r2, [pc, #124]	; (800c7dc <chk_lock+0xb4>)
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	011b      	lsls	r3, r3, #4
 800c762:	4413      	add	r3, r2
 800c764:	3304      	adds	r3, #4
 800c766:	681a      	ldr	r2, [r3, #0]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d10c      	bne.n	800c78a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c770:	4a1a      	ldr	r2, [pc, #104]	; (800c7dc <chk_lock+0xb4>)
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	011b      	lsls	r3, r3, #4
 800c776:	4413      	add	r3, r2
 800c778:	3308      	adds	r3, #8
 800c77a:	681a      	ldr	r2, [r3, #0]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c780:	429a      	cmp	r2, r3
 800c782:	d102      	bne.n	800c78a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c784:	e007      	b.n	800c796 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c786:	2301      	movs	r3, #1
 800c788:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	3301      	adds	r3, #1
 800c78e:	60fb      	str	r3, [r7, #12]
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2b01      	cmp	r3, #1
 800c794:	d9d2      	bls.n	800c73c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	2b02      	cmp	r3, #2
 800c79a:	d109      	bne.n	800c7b0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d102      	bne.n	800c7a8 <chk_lock+0x80>
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	2b02      	cmp	r3, #2
 800c7a6:	d101      	bne.n	800c7ac <chk_lock+0x84>
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	e010      	b.n	800c7ce <chk_lock+0xa6>
 800c7ac:	2312      	movs	r3, #18
 800c7ae:	e00e      	b.n	800c7ce <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d108      	bne.n	800c7c8 <chk_lock+0xa0>
 800c7b6:	4a09      	ldr	r2, [pc, #36]	; (800c7dc <chk_lock+0xb4>)
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	011b      	lsls	r3, r3, #4
 800c7bc:	4413      	add	r3, r2
 800c7be:	330c      	adds	r3, #12
 800c7c0:	881b      	ldrh	r3, [r3, #0]
 800c7c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7c6:	d101      	bne.n	800c7cc <chk_lock+0xa4>
 800c7c8:	2310      	movs	r3, #16
 800c7ca:	e000      	b.n	800c7ce <chk_lock+0xa6>
 800c7cc:	2300      	movs	r3, #0
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3714      	adds	r7, #20
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d8:	4770      	bx	lr
 800c7da:	bf00      	nop
 800c7dc:	200022e4 	.word	0x200022e4

0800c7e0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b083      	sub	sp, #12
 800c7e4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	607b      	str	r3, [r7, #4]
 800c7ea:	e002      	b.n	800c7f2 <enq_lock+0x12>
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	3301      	adds	r3, #1
 800c7f0:	607b      	str	r3, [r7, #4]
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2b01      	cmp	r3, #1
 800c7f6:	d806      	bhi.n	800c806 <enq_lock+0x26>
 800c7f8:	4a09      	ldr	r2, [pc, #36]	; (800c820 <enq_lock+0x40>)
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	011b      	lsls	r3, r3, #4
 800c7fe:	4413      	add	r3, r2
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d1f2      	bne.n	800c7ec <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2b02      	cmp	r3, #2
 800c80a:	bf14      	ite	ne
 800c80c:	2301      	movne	r3, #1
 800c80e:	2300      	moveq	r3, #0
 800c810:	b2db      	uxtb	r3, r3
}
 800c812:	4618      	mov	r0, r3
 800c814:	370c      	adds	r7, #12
 800c816:	46bd      	mov	sp, r7
 800c818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81c:	4770      	bx	lr
 800c81e:	bf00      	nop
 800c820:	200022e4 	.word	0x200022e4

0800c824 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c824:	b480      	push	{r7}
 800c826:	b085      	sub	sp, #20
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c82e:	2300      	movs	r3, #0
 800c830:	60fb      	str	r3, [r7, #12]
 800c832:	e01f      	b.n	800c874 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c834:	4a41      	ldr	r2, [pc, #260]	; (800c93c <inc_lock+0x118>)
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	011b      	lsls	r3, r3, #4
 800c83a:	4413      	add	r3, r2
 800c83c:	681a      	ldr	r2, [r3, #0]
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	429a      	cmp	r2, r3
 800c844:	d113      	bne.n	800c86e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c846:	4a3d      	ldr	r2, [pc, #244]	; (800c93c <inc_lock+0x118>)
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	011b      	lsls	r3, r3, #4
 800c84c:	4413      	add	r3, r2
 800c84e:	3304      	adds	r3, #4
 800c850:	681a      	ldr	r2, [r3, #0]
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c856:	429a      	cmp	r2, r3
 800c858:	d109      	bne.n	800c86e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c85a:	4a38      	ldr	r2, [pc, #224]	; (800c93c <inc_lock+0x118>)
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	011b      	lsls	r3, r3, #4
 800c860:	4413      	add	r3, r2
 800c862:	3308      	adds	r3, #8
 800c864:	681a      	ldr	r2, [r3, #0]
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c86a:	429a      	cmp	r2, r3
 800c86c:	d006      	beq.n	800c87c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	3301      	adds	r3, #1
 800c872:	60fb      	str	r3, [r7, #12]
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	2b01      	cmp	r3, #1
 800c878:	d9dc      	bls.n	800c834 <inc_lock+0x10>
 800c87a:	e000      	b.n	800c87e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c87c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	2b02      	cmp	r3, #2
 800c882:	d132      	bne.n	800c8ea <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c884:	2300      	movs	r3, #0
 800c886:	60fb      	str	r3, [r7, #12]
 800c888:	e002      	b.n	800c890 <inc_lock+0x6c>
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	3301      	adds	r3, #1
 800c88e:	60fb      	str	r3, [r7, #12]
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	2b01      	cmp	r3, #1
 800c894:	d806      	bhi.n	800c8a4 <inc_lock+0x80>
 800c896:	4a29      	ldr	r2, [pc, #164]	; (800c93c <inc_lock+0x118>)
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	011b      	lsls	r3, r3, #4
 800c89c:	4413      	add	r3, r2
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d1f2      	bne.n	800c88a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2b02      	cmp	r3, #2
 800c8a8:	d101      	bne.n	800c8ae <inc_lock+0x8a>
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	e040      	b.n	800c930 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681a      	ldr	r2, [r3, #0]
 800c8b2:	4922      	ldr	r1, [pc, #136]	; (800c93c <inc_lock+0x118>)
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	011b      	lsls	r3, r3, #4
 800c8b8:	440b      	add	r3, r1
 800c8ba:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	689a      	ldr	r2, [r3, #8]
 800c8c0:	491e      	ldr	r1, [pc, #120]	; (800c93c <inc_lock+0x118>)
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	011b      	lsls	r3, r3, #4
 800c8c6:	440b      	add	r3, r1
 800c8c8:	3304      	adds	r3, #4
 800c8ca:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	695a      	ldr	r2, [r3, #20]
 800c8d0:	491a      	ldr	r1, [pc, #104]	; (800c93c <inc_lock+0x118>)
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	011b      	lsls	r3, r3, #4
 800c8d6:	440b      	add	r3, r1
 800c8d8:	3308      	adds	r3, #8
 800c8da:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c8dc:	4a17      	ldr	r2, [pc, #92]	; (800c93c <inc_lock+0x118>)
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	011b      	lsls	r3, r3, #4
 800c8e2:	4413      	add	r3, r2
 800c8e4:	330c      	adds	r3, #12
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d009      	beq.n	800c904 <inc_lock+0xe0>
 800c8f0:	4a12      	ldr	r2, [pc, #72]	; (800c93c <inc_lock+0x118>)
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	011b      	lsls	r3, r3, #4
 800c8f6:	4413      	add	r3, r2
 800c8f8:	330c      	adds	r3, #12
 800c8fa:	881b      	ldrh	r3, [r3, #0]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d001      	beq.n	800c904 <inc_lock+0xe0>
 800c900:	2300      	movs	r3, #0
 800c902:	e015      	b.n	800c930 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d108      	bne.n	800c91c <inc_lock+0xf8>
 800c90a:	4a0c      	ldr	r2, [pc, #48]	; (800c93c <inc_lock+0x118>)
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	011b      	lsls	r3, r3, #4
 800c910:	4413      	add	r3, r2
 800c912:	330c      	adds	r3, #12
 800c914:	881b      	ldrh	r3, [r3, #0]
 800c916:	3301      	adds	r3, #1
 800c918:	b29a      	uxth	r2, r3
 800c91a:	e001      	b.n	800c920 <inc_lock+0xfc>
 800c91c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c920:	4906      	ldr	r1, [pc, #24]	; (800c93c <inc_lock+0x118>)
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	011b      	lsls	r3, r3, #4
 800c926:	440b      	add	r3, r1
 800c928:	330c      	adds	r3, #12
 800c92a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	3301      	adds	r3, #1
}
 800c930:	4618      	mov	r0, r3
 800c932:	3714      	adds	r7, #20
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr
 800c93c:	200022e4 	.word	0x200022e4

0800c940 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c940:	b480      	push	{r7}
 800c942:	b085      	sub	sp, #20
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	3b01      	subs	r3, #1
 800c94c:	607b      	str	r3, [r7, #4]
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2b01      	cmp	r3, #1
 800c952:	d825      	bhi.n	800c9a0 <dec_lock+0x60>
		n = Files[i].ctr;
 800c954:	4a17      	ldr	r2, [pc, #92]	; (800c9b4 <dec_lock+0x74>)
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	011b      	lsls	r3, r3, #4
 800c95a:	4413      	add	r3, r2
 800c95c:	330c      	adds	r3, #12
 800c95e:	881b      	ldrh	r3, [r3, #0]
 800c960:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c962:	89fb      	ldrh	r3, [r7, #14]
 800c964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c968:	d101      	bne.n	800c96e <dec_lock+0x2e>
 800c96a:	2300      	movs	r3, #0
 800c96c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c96e:	89fb      	ldrh	r3, [r7, #14]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d002      	beq.n	800c97a <dec_lock+0x3a>
 800c974:	89fb      	ldrh	r3, [r7, #14]
 800c976:	3b01      	subs	r3, #1
 800c978:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c97a:	4a0e      	ldr	r2, [pc, #56]	; (800c9b4 <dec_lock+0x74>)
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	011b      	lsls	r3, r3, #4
 800c980:	4413      	add	r3, r2
 800c982:	330c      	adds	r3, #12
 800c984:	89fa      	ldrh	r2, [r7, #14]
 800c986:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c988:	89fb      	ldrh	r3, [r7, #14]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d105      	bne.n	800c99a <dec_lock+0x5a>
 800c98e:	4a09      	ldr	r2, [pc, #36]	; (800c9b4 <dec_lock+0x74>)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	011b      	lsls	r3, r3, #4
 800c994:	4413      	add	r3, r2
 800c996:	2200      	movs	r2, #0
 800c998:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c99a:	2300      	movs	r3, #0
 800c99c:	737b      	strb	r3, [r7, #13]
 800c99e:	e001      	b.n	800c9a4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c9a0:	2302      	movs	r3, #2
 800c9a2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c9a4:	7b7b      	ldrb	r3, [r7, #13]
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3714      	adds	r7, #20
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b0:	4770      	bx	lr
 800c9b2:	bf00      	nop
 800c9b4:	200022e4 	.word	0x200022e4

0800c9b8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b085      	sub	sp, #20
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	60fb      	str	r3, [r7, #12]
 800c9c4:	e010      	b.n	800c9e8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c9c6:	4a0d      	ldr	r2, [pc, #52]	; (800c9fc <clear_lock+0x44>)
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	011b      	lsls	r3, r3, #4
 800c9cc:	4413      	add	r3, r2
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	687a      	ldr	r2, [r7, #4]
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	d105      	bne.n	800c9e2 <clear_lock+0x2a>
 800c9d6:	4a09      	ldr	r2, [pc, #36]	; (800c9fc <clear_lock+0x44>)
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	011b      	lsls	r3, r3, #4
 800c9dc:	4413      	add	r3, r2
 800c9de:	2200      	movs	r2, #0
 800c9e0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	3301      	adds	r3, #1
 800c9e6:	60fb      	str	r3, [r7, #12]
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	2b01      	cmp	r3, #1
 800c9ec:	d9eb      	bls.n	800c9c6 <clear_lock+0xe>
	}
}
 800c9ee:	bf00      	nop
 800c9f0:	bf00      	nop
 800c9f2:	3714      	adds	r7, #20
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr
 800c9fc:	200022e4 	.word	0x200022e4

0800ca00 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b086      	sub	sp, #24
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	78db      	ldrb	r3, [r3, #3]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d034      	beq.n	800ca7e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca18:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	7858      	ldrb	r0, [r3, #1]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ca24:	2301      	movs	r3, #1
 800ca26:	697a      	ldr	r2, [r7, #20]
 800ca28:	f7ff fd40 	bl	800c4ac <disk_write>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d002      	beq.n	800ca38 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ca32:	2301      	movs	r3, #1
 800ca34:	73fb      	strb	r3, [r7, #15]
 800ca36:	e022      	b.n	800ca7e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca42:	697a      	ldr	r2, [r7, #20]
 800ca44:	1ad2      	subs	r2, r2, r3
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6a1b      	ldr	r3, [r3, #32]
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	d217      	bcs.n	800ca7e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	789b      	ldrb	r3, [r3, #2]
 800ca52:	613b      	str	r3, [r7, #16]
 800ca54:	e010      	b.n	800ca78 <sync_window+0x78>
					wsect += fs->fsize;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6a1b      	ldr	r3, [r3, #32]
 800ca5a:	697a      	ldr	r2, [r7, #20]
 800ca5c:	4413      	add	r3, r2
 800ca5e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	7858      	ldrb	r0, [r3, #1]
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	697a      	ldr	r2, [r7, #20]
 800ca6e:	f7ff fd1d 	bl	800c4ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	3b01      	subs	r3, #1
 800ca76:	613b      	str	r3, [r7, #16]
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	2b01      	cmp	r3, #1
 800ca7c:	d8eb      	bhi.n	800ca56 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ca7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3718      	adds	r7, #24
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}

0800ca88 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b084      	sub	sp, #16
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ca92:	2300      	movs	r3, #0
 800ca94:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca9a:	683a      	ldr	r2, [r7, #0]
 800ca9c:	429a      	cmp	r2, r3
 800ca9e:	d01b      	beq.n	800cad8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f7ff ffad 	bl	800ca00 <sync_window>
 800caa6:	4603      	mov	r3, r0
 800caa8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800caaa:	7bfb      	ldrb	r3, [r7, #15]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d113      	bne.n	800cad8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	7858      	ldrb	r0, [r3, #1]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800caba:	2301      	movs	r3, #1
 800cabc:	683a      	ldr	r2, [r7, #0]
 800cabe:	f7ff fcd5 	bl	800c46c <disk_read>
 800cac2:	4603      	mov	r3, r0
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d004      	beq.n	800cad2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cac8:	f04f 33ff 	mov.w	r3, #4294967295
 800cacc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cace:	2301      	movs	r3, #1
 800cad0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	683a      	ldr	r2, [r7, #0]
 800cad6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800cad8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3710      	adds	r7, #16
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}
	...

0800cae4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b084      	sub	sp, #16
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f7ff ff87 	bl	800ca00 <sync_window>
 800caf2:	4603      	mov	r3, r0
 800caf4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800caf6:	7bfb      	ldrb	r3, [r7, #15]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d159      	bne.n	800cbb0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	2b03      	cmp	r3, #3
 800cb02:	d149      	bne.n	800cb98 <sync_fs+0xb4>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	791b      	ldrb	r3, [r3, #4]
 800cb08:	2b01      	cmp	r3, #1
 800cb0a:	d145      	bne.n	800cb98 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	899b      	ldrh	r3, [r3, #12]
 800cb16:	461a      	mov	r2, r3
 800cb18:	2100      	movs	r1, #0
 800cb1a:	f7ff fda8 	bl	800c66e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	3338      	adds	r3, #56	; 0x38
 800cb22:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cb26:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f7ff fd37 	bl	800c59e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	3338      	adds	r3, #56	; 0x38
 800cb34:	4921      	ldr	r1, [pc, #132]	; (800cbbc <sync_fs+0xd8>)
 800cb36:	4618      	mov	r0, r3
 800cb38:	f7ff fd4c 	bl	800c5d4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	3338      	adds	r3, #56	; 0x38
 800cb40:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cb44:	491e      	ldr	r1, [pc, #120]	; (800cbc0 <sync_fs+0xdc>)
 800cb46:	4618      	mov	r0, r3
 800cb48:	f7ff fd44 	bl	800c5d4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	3338      	adds	r3, #56	; 0x38
 800cb50:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	699b      	ldr	r3, [r3, #24]
 800cb58:	4619      	mov	r1, r3
 800cb5a:	4610      	mov	r0, r2
 800cb5c:	f7ff fd3a 	bl	800c5d4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	3338      	adds	r3, #56	; 0x38
 800cb64:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	695b      	ldr	r3, [r3, #20]
 800cb6c:	4619      	mov	r1, r3
 800cb6e:	4610      	mov	r0, r2
 800cb70:	f7ff fd30 	bl	800c5d4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb78:	1c5a      	adds	r2, r3, #1
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	7858      	ldrb	r0, [r3, #1]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	f7ff fc8d 	bl	800c4ac <disk_write>
			fs->fsi_flag = 0;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2200      	movs	r2, #0
 800cb96:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	785b      	ldrb	r3, [r3, #1]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	2100      	movs	r1, #0
 800cba0:	4618      	mov	r0, r3
 800cba2:	f7ff fca3 	bl	800c4ec <disk_ioctl>
 800cba6:	4603      	mov	r3, r0
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d001      	beq.n	800cbb0 <sync_fs+0xcc>
 800cbac:	2301      	movs	r3, #1
 800cbae:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800cbb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3710      	adds	r7, #16
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	bf00      	nop
 800cbbc:	41615252 	.word	0x41615252
 800cbc0:	61417272 	.word	0x61417272

0800cbc4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	b083      	sub	sp, #12
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	3b02      	subs	r3, #2
 800cbd2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	69db      	ldr	r3, [r3, #28]
 800cbd8:	3b02      	subs	r3, #2
 800cbda:	683a      	ldr	r2, [r7, #0]
 800cbdc:	429a      	cmp	r2, r3
 800cbde:	d301      	bcc.n	800cbe4 <clust2sect+0x20>
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	e008      	b.n	800cbf6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	895b      	ldrh	r3, [r3, #10]
 800cbe8:	461a      	mov	r2, r3
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	fb03 f202 	mul.w	r2, r3, r2
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbf4:	4413      	add	r3, r2
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	370c      	adds	r7, #12
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr

0800cc02 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800cc02:	b580      	push	{r7, lr}
 800cc04:	b086      	sub	sp, #24
 800cc06:	af00      	add	r7, sp, #0
 800cc08:	6078      	str	r0, [r7, #4]
 800cc0a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	2b01      	cmp	r3, #1
 800cc16:	d904      	bls.n	800cc22 <get_fat+0x20>
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	69db      	ldr	r3, [r3, #28]
 800cc1c:	683a      	ldr	r2, [r7, #0]
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d302      	bcc.n	800cc28 <get_fat+0x26>
		val = 1;	/* Internal error */
 800cc22:	2301      	movs	r3, #1
 800cc24:	617b      	str	r3, [r7, #20]
 800cc26:	e0bb      	b.n	800cda0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cc28:	f04f 33ff 	mov.w	r3, #4294967295
 800cc2c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	781b      	ldrb	r3, [r3, #0]
 800cc32:	2b03      	cmp	r3, #3
 800cc34:	f000 8083 	beq.w	800cd3e <get_fat+0x13c>
 800cc38:	2b03      	cmp	r3, #3
 800cc3a:	f300 80a7 	bgt.w	800cd8c <get_fat+0x18a>
 800cc3e:	2b01      	cmp	r3, #1
 800cc40:	d002      	beq.n	800cc48 <get_fat+0x46>
 800cc42:	2b02      	cmp	r3, #2
 800cc44:	d056      	beq.n	800ccf4 <get_fat+0xf2>
 800cc46:	e0a1      	b.n	800cd8c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	60fb      	str	r3, [r7, #12]
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	085b      	lsrs	r3, r3, #1
 800cc50:	68fa      	ldr	r2, [r7, #12]
 800cc52:	4413      	add	r3, r2
 800cc54:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cc5a:	693b      	ldr	r3, [r7, #16]
 800cc5c:	899b      	ldrh	r3, [r3, #12]
 800cc5e:	4619      	mov	r1, r3
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	fbb3 f3f1 	udiv	r3, r3, r1
 800cc66:	4413      	add	r3, r2
 800cc68:	4619      	mov	r1, r3
 800cc6a:	6938      	ldr	r0, [r7, #16]
 800cc6c:	f7ff ff0c 	bl	800ca88 <move_window>
 800cc70:	4603      	mov	r3, r0
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	f040 808d 	bne.w	800cd92 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	1c5a      	adds	r2, r3, #1
 800cc7c:	60fa      	str	r2, [r7, #12]
 800cc7e:	693a      	ldr	r2, [r7, #16]
 800cc80:	8992      	ldrh	r2, [r2, #12]
 800cc82:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc86:	fb02 f201 	mul.w	r2, r2, r1
 800cc8a:	1a9b      	subs	r3, r3, r2
 800cc8c:	693a      	ldr	r2, [r7, #16]
 800cc8e:	4413      	add	r3, r2
 800cc90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cc94:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	899b      	ldrh	r3, [r3, #12]
 800cc9e:	4619      	mov	r1, r3
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	fbb3 f3f1 	udiv	r3, r3, r1
 800cca6:	4413      	add	r3, r2
 800cca8:	4619      	mov	r1, r3
 800ccaa:	6938      	ldr	r0, [r7, #16]
 800ccac:	f7ff feec 	bl	800ca88 <move_window>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d16f      	bne.n	800cd96 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ccb6:	693b      	ldr	r3, [r7, #16]
 800ccb8:	899b      	ldrh	r3, [r3, #12]
 800ccba:	461a      	mov	r2, r3
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	fbb3 f1f2 	udiv	r1, r3, r2
 800ccc2:	fb02 f201 	mul.w	r2, r2, r1
 800ccc6:	1a9b      	subs	r3, r3, r2
 800ccc8:	693a      	ldr	r2, [r7, #16]
 800ccca:	4413      	add	r3, r2
 800cccc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ccd0:	021b      	lsls	r3, r3, #8
 800ccd2:	461a      	mov	r2, r3
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	4313      	orrs	r3, r2
 800ccd8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	f003 0301 	and.w	r3, r3, #1
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d002      	beq.n	800ccea <get_fat+0xe8>
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	091b      	lsrs	r3, r3, #4
 800cce8:	e002      	b.n	800ccf0 <get_fat+0xee>
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ccf0:	617b      	str	r3, [r7, #20]
			break;
 800ccf2:	e055      	b.n	800cda0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ccf4:	693b      	ldr	r3, [r7, #16]
 800ccf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ccf8:	693b      	ldr	r3, [r7, #16]
 800ccfa:	899b      	ldrh	r3, [r3, #12]
 800ccfc:	085b      	lsrs	r3, r3, #1
 800ccfe:	b29b      	uxth	r3, r3
 800cd00:	4619      	mov	r1, r3
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	fbb3 f3f1 	udiv	r3, r3, r1
 800cd08:	4413      	add	r3, r2
 800cd0a:	4619      	mov	r1, r3
 800cd0c:	6938      	ldr	r0, [r7, #16]
 800cd0e:	f7ff febb 	bl	800ca88 <move_window>
 800cd12:	4603      	mov	r3, r0
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d140      	bne.n	800cd9a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cd18:	693b      	ldr	r3, [r7, #16]
 800cd1a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	005b      	lsls	r3, r3, #1
 800cd22:	693a      	ldr	r2, [r7, #16]
 800cd24:	8992      	ldrh	r2, [r2, #12]
 800cd26:	fbb3 f0f2 	udiv	r0, r3, r2
 800cd2a:	fb02 f200 	mul.w	r2, r2, r0
 800cd2e:	1a9b      	subs	r3, r3, r2
 800cd30:	440b      	add	r3, r1
 800cd32:	4618      	mov	r0, r3
 800cd34:	f7ff fbf8 	bl	800c528 <ld_word>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	617b      	str	r3, [r7, #20]
			break;
 800cd3c:	e030      	b.n	800cda0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cd3e:	693b      	ldr	r3, [r7, #16]
 800cd40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cd42:	693b      	ldr	r3, [r7, #16]
 800cd44:	899b      	ldrh	r3, [r3, #12]
 800cd46:	089b      	lsrs	r3, r3, #2
 800cd48:	b29b      	uxth	r3, r3
 800cd4a:	4619      	mov	r1, r3
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	fbb3 f3f1 	udiv	r3, r3, r1
 800cd52:	4413      	add	r3, r2
 800cd54:	4619      	mov	r1, r3
 800cd56:	6938      	ldr	r0, [r7, #16]
 800cd58:	f7ff fe96 	bl	800ca88 <move_window>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d11d      	bne.n	800cd9e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cd62:	693b      	ldr	r3, [r7, #16]
 800cd64:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	009b      	lsls	r3, r3, #2
 800cd6c:	693a      	ldr	r2, [r7, #16]
 800cd6e:	8992      	ldrh	r2, [r2, #12]
 800cd70:	fbb3 f0f2 	udiv	r0, r3, r2
 800cd74:	fb02 f200 	mul.w	r2, r2, r0
 800cd78:	1a9b      	subs	r3, r3, r2
 800cd7a:	440b      	add	r3, r1
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f7ff fbeb 	bl	800c558 <ld_dword>
 800cd82:	4603      	mov	r3, r0
 800cd84:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cd88:	617b      	str	r3, [r7, #20]
			break;
 800cd8a:	e009      	b.n	800cda0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	617b      	str	r3, [r7, #20]
 800cd90:	e006      	b.n	800cda0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cd92:	bf00      	nop
 800cd94:	e004      	b.n	800cda0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cd96:	bf00      	nop
 800cd98:	e002      	b.n	800cda0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cd9a:	bf00      	nop
 800cd9c:	e000      	b.n	800cda0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cd9e:	bf00      	nop
		}
	}

	return val;
 800cda0:	697b      	ldr	r3, [r7, #20]
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3718      	adds	r7, #24
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}

0800cdaa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800cdaa:	b590      	push	{r4, r7, lr}
 800cdac:	b089      	sub	sp, #36	; 0x24
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	60f8      	str	r0, [r7, #12]
 800cdb2:	60b9      	str	r1, [r7, #8]
 800cdb4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800cdb6:	2302      	movs	r3, #2
 800cdb8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	f240 8102 	bls.w	800cfc6 <put_fat+0x21c>
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	69db      	ldr	r3, [r3, #28]
 800cdc6:	68ba      	ldr	r2, [r7, #8]
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	f080 80fc 	bcs.w	800cfc6 <put_fat+0x21c>
		switch (fs->fs_type) {
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	781b      	ldrb	r3, [r3, #0]
 800cdd2:	2b03      	cmp	r3, #3
 800cdd4:	f000 80b6 	beq.w	800cf44 <put_fat+0x19a>
 800cdd8:	2b03      	cmp	r3, #3
 800cdda:	f300 80fd 	bgt.w	800cfd8 <put_fat+0x22e>
 800cdde:	2b01      	cmp	r3, #1
 800cde0:	d003      	beq.n	800cdea <put_fat+0x40>
 800cde2:	2b02      	cmp	r3, #2
 800cde4:	f000 8083 	beq.w	800ceee <put_fat+0x144>
 800cde8:	e0f6      	b.n	800cfd8 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	61bb      	str	r3, [r7, #24]
 800cdee:	69bb      	ldr	r3, [r7, #24]
 800cdf0:	085b      	lsrs	r3, r3, #1
 800cdf2:	69ba      	ldr	r2, [r7, #24]
 800cdf4:	4413      	add	r3, r2
 800cdf6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	899b      	ldrh	r3, [r3, #12]
 800ce00:	4619      	mov	r1, r3
 800ce02:	69bb      	ldr	r3, [r7, #24]
 800ce04:	fbb3 f3f1 	udiv	r3, r3, r1
 800ce08:	4413      	add	r3, r2
 800ce0a:	4619      	mov	r1, r3
 800ce0c:	68f8      	ldr	r0, [r7, #12]
 800ce0e:	f7ff fe3b 	bl	800ca88 <move_window>
 800ce12:	4603      	mov	r3, r0
 800ce14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ce16:	7ffb      	ldrb	r3, [r7, #31]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	f040 80d6 	bne.w	800cfca <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ce24:	69bb      	ldr	r3, [r7, #24]
 800ce26:	1c5a      	adds	r2, r3, #1
 800ce28:	61ba      	str	r2, [r7, #24]
 800ce2a:	68fa      	ldr	r2, [r7, #12]
 800ce2c:	8992      	ldrh	r2, [r2, #12]
 800ce2e:	fbb3 f0f2 	udiv	r0, r3, r2
 800ce32:	fb02 f200 	mul.w	r2, r2, r0
 800ce36:	1a9b      	subs	r3, r3, r2
 800ce38:	440b      	add	r3, r1
 800ce3a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	f003 0301 	and.w	r3, r3, #1
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d00d      	beq.n	800ce62 <put_fat+0xb8>
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	781b      	ldrb	r3, [r3, #0]
 800ce4a:	b25b      	sxtb	r3, r3
 800ce4c:	f003 030f 	and.w	r3, r3, #15
 800ce50:	b25a      	sxtb	r2, r3
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	b2db      	uxtb	r3, r3
 800ce56:	011b      	lsls	r3, r3, #4
 800ce58:	b25b      	sxtb	r3, r3
 800ce5a:	4313      	orrs	r3, r2
 800ce5c:	b25b      	sxtb	r3, r3
 800ce5e:	b2db      	uxtb	r3, r3
 800ce60:	e001      	b.n	800ce66 <put_fat+0xbc>
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	b2db      	uxtb	r3, r3
 800ce66:	697a      	ldr	r2, [r7, #20]
 800ce68:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	899b      	ldrh	r3, [r3, #12]
 800ce78:	4619      	mov	r1, r3
 800ce7a:	69bb      	ldr	r3, [r7, #24]
 800ce7c:	fbb3 f3f1 	udiv	r3, r3, r1
 800ce80:	4413      	add	r3, r2
 800ce82:	4619      	mov	r1, r3
 800ce84:	68f8      	ldr	r0, [r7, #12]
 800ce86:	f7ff fdff 	bl	800ca88 <move_window>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ce8e:	7ffb      	ldrb	r3, [r7, #31]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	f040 809c 	bne.w	800cfce <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	899b      	ldrh	r3, [r3, #12]
 800cea0:	461a      	mov	r2, r3
 800cea2:	69bb      	ldr	r3, [r7, #24]
 800cea4:	fbb3 f0f2 	udiv	r0, r3, r2
 800cea8:	fb02 f200 	mul.w	r2, r2, r0
 800ceac:	1a9b      	subs	r3, r3, r2
 800ceae:	440b      	add	r3, r1
 800ceb0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	f003 0301 	and.w	r3, r3, #1
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d003      	beq.n	800cec4 <put_fat+0x11a>
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	091b      	lsrs	r3, r3, #4
 800cec0:	b2db      	uxtb	r3, r3
 800cec2:	e00e      	b.n	800cee2 <put_fat+0x138>
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	781b      	ldrb	r3, [r3, #0]
 800cec8:	b25b      	sxtb	r3, r3
 800ceca:	f023 030f 	bic.w	r3, r3, #15
 800cece:	b25a      	sxtb	r2, r3
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	0a1b      	lsrs	r3, r3, #8
 800ced4:	b25b      	sxtb	r3, r3
 800ced6:	f003 030f 	and.w	r3, r3, #15
 800ceda:	b25b      	sxtb	r3, r3
 800cedc:	4313      	orrs	r3, r2
 800cede:	b25b      	sxtb	r3, r3
 800cee0:	b2db      	uxtb	r3, r3
 800cee2:	697a      	ldr	r2, [r7, #20]
 800cee4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	2201      	movs	r2, #1
 800ceea:	70da      	strb	r2, [r3, #3]
			break;
 800ceec:	e074      	b.n	800cfd8 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	899b      	ldrh	r3, [r3, #12]
 800cef6:	085b      	lsrs	r3, r3, #1
 800cef8:	b29b      	uxth	r3, r3
 800cefa:	4619      	mov	r1, r3
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	fbb3 f3f1 	udiv	r3, r3, r1
 800cf02:	4413      	add	r3, r2
 800cf04:	4619      	mov	r1, r3
 800cf06:	68f8      	ldr	r0, [r7, #12]
 800cf08:	f7ff fdbe 	bl	800ca88 <move_window>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cf10:	7ffb      	ldrb	r3, [r7, #31]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d15d      	bne.n	800cfd2 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	005b      	lsls	r3, r3, #1
 800cf20:	68fa      	ldr	r2, [r7, #12]
 800cf22:	8992      	ldrh	r2, [r2, #12]
 800cf24:	fbb3 f0f2 	udiv	r0, r3, r2
 800cf28:	fb02 f200 	mul.w	r2, r2, r0
 800cf2c:	1a9b      	subs	r3, r3, r2
 800cf2e:	440b      	add	r3, r1
 800cf30:	687a      	ldr	r2, [r7, #4]
 800cf32:	b292      	uxth	r2, r2
 800cf34:	4611      	mov	r1, r2
 800cf36:	4618      	mov	r0, r3
 800cf38:	f7ff fb31 	bl	800c59e <st_word>
			fs->wflag = 1;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2201      	movs	r2, #1
 800cf40:	70da      	strb	r2, [r3, #3]
			break;
 800cf42:	e049      	b.n	800cfd8 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	899b      	ldrh	r3, [r3, #12]
 800cf4c:	089b      	lsrs	r3, r3, #2
 800cf4e:	b29b      	uxth	r3, r3
 800cf50:	4619      	mov	r1, r3
 800cf52:	68bb      	ldr	r3, [r7, #8]
 800cf54:	fbb3 f3f1 	udiv	r3, r3, r1
 800cf58:	4413      	add	r3, r2
 800cf5a:	4619      	mov	r1, r3
 800cf5c:	68f8      	ldr	r0, [r7, #12]
 800cf5e:	f7ff fd93 	bl	800ca88 <move_window>
 800cf62:	4603      	mov	r3, r0
 800cf64:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cf66:	7ffb      	ldrb	r3, [r7, #31]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d134      	bne.n	800cfd6 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	009b      	lsls	r3, r3, #2
 800cf7c:	68fa      	ldr	r2, [r7, #12]
 800cf7e:	8992      	ldrh	r2, [r2, #12]
 800cf80:	fbb3 f0f2 	udiv	r0, r3, r2
 800cf84:	fb02 f200 	mul.w	r2, r2, r0
 800cf88:	1a9b      	subs	r3, r3, r2
 800cf8a:	440b      	add	r3, r1
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f7ff fae3 	bl	800c558 <ld_dword>
 800cf92:	4603      	mov	r3, r0
 800cf94:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cf98:	4323      	orrs	r3, r4
 800cf9a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	009b      	lsls	r3, r3, #2
 800cfa6:	68fa      	ldr	r2, [r7, #12]
 800cfa8:	8992      	ldrh	r2, [r2, #12]
 800cfaa:	fbb3 f0f2 	udiv	r0, r3, r2
 800cfae:	fb02 f200 	mul.w	r2, r2, r0
 800cfb2:	1a9b      	subs	r3, r3, r2
 800cfb4:	440b      	add	r3, r1
 800cfb6:	6879      	ldr	r1, [r7, #4]
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f7ff fb0b 	bl	800c5d4 <st_dword>
			fs->wflag = 1;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	2201      	movs	r2, #1
 800cfc2:	70da      	strb	r2, [r3, #3]
			break;
 800cfc4:	e008      	b.n	800cfd8 <put_fat+0x22e>
		}
	}
 800cfc6:	bf00      	nop
 800cfc8:	e006      	b.n	800cfd8 <put_fat+0x22e>
			if (res != FR_OK) break;
 800cfca:	bf00      	nop
 800cfcc:	e004      	b.n	800cfd8 <put_fat+0x22e>
			if (res != FR_OK) break;
 800cfce:	bf00      	nop
 800cfd0:	e002      	b.n	800cfd8 <put_fat+0x22e>
			if (res != FR_OK) break;
 800cfd2:	bf00      	nop
 800cfd4:	e000      	b.n	800cfd8 <put_fat+0x22e>
			if (res != FR_OK) break;
 800cfd6:	bf00      	nop
	return res;
 800cfd8:	7ffb      	ldrb	r3, [r7, #31]
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	3724      	adds	r7, #36	; 0x24
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd90      	pop	{r4, r7, pc}

0800cfe2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800cfe2:	b580      	push	{r7, lr}
 800cfe4:	b088      	sub	sp, #32
 800cfe6:	af00      	add	r7, sp, #0
 800cfe8:	60f8      	str	r0, [r7, #12]
 800cfea:	60b9      	str	r1, [r7, #8]
 800cfec:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800cfee:	2300      	movs	r3, #0
 800cff0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	2b01      	cmp	r3, #1
 800cffc:	d904      	bls.n	800d008 <remove_chain+0x26>
 800cffe:	69bb      	ldr	r3, [r7, #24]
 800d000:	69db      	ldr	r3, [r3, #28]
 800d002:	68ba      	ldr	r2, [r7, #8]
 800d004:	429a      	cmp	r2, r3
 800d006:	d301      	bcc.n	800d00c <remove_chain+0x2a>
 800d008:	2302      	movs	r3, #2
 800d00a:	e04b      	b.n	800d0a4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d00c      	beq.n	800d02c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d012:	f04f 32ff 	mov.w	r2, #4294967295
 800d016:	6879      	ldr	r1, [r7, #4]
 800d018:	69b8      	ldr	r0, [r7, #24]
 800d01a:	f7ff fec6 	bl	800cdaa <put_fat>
 800d01e:	4603      	mov	r3, r0
 800d020:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d022:	7ffb      	ldrb	r3, [r7, #31]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d001      	beq.n	800d02c <remove_chain+0x4a>
 800d028:	7ffb      	ldrb	r3, [r7, #31]
 800d02a:	e03b      	b.n	800d0a4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d02c:	68b9      	ldr	r1, [r7, #8]
 800d02e:	68f8      	ldr	r0, [r7, #12]
 800d030:	f7ff fde7 	bl	800cc02 <get_fat>
 800d034:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d036:	697b      	ldr	r3, [r7, #20]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d031      	beq.n	800d0a0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d03c:	697b      	ldr	r3, [r7, #20]
 800d03e:	2b01      	cmp	r3, #1
 800d040:	d101      	bne.n	800d046 <remove_chain+0x64>
 800d042:	2302      	movs	r3, #2
 800d044:	e02e      	b.n	800d0a4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d04c:	d101      	bne.n	800d052 <remove_chain+0x70>
 800d04e:	2301      	movs	r3, #1
 800d050:	e028      	b.n	800d0a4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d052:	2200      	movs	r2, #0
 800d054:	68b9      	ldr	r1, [r7, #8]
 800d056:	69b8      	ldr	r0, [r7, #24]
 800d058:	f7ff fea7 	bl	800cdaa <put_fat>
 800d05c:	4603      	mov	r3, r0
 800d05e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d060:	7ffb      	ldrb	r3, [r7, #31]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d001      	beq.n	800d06a <remove_chain+0x88>
 800d066:	7ffb      	ldrb	r3, [r7, #31]
 800d068:	e01c      	b.n	800d0a4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d06a:	69bb      	ldr	r3, [r7, #24]
 800d06c:	699a      	ldr	r2, [r3, #24]
 800d06e:	69bb      	ldr	r3, [r7, #24]
 800d070:	69db      	ldr	r3, [r3, #28]
 800d072:	3b02      	subs	r3, #2
 800d074:	429a      	cmp	r2, r3
 800d076:	d20b      	bcs.n	800d090 <remove_chain+0xae>
			fs->free_clst++;
 800d078:	69bb      	ldr	r3, [r7, #24]
 800d07a:	699b      	ldr	r3, [r3, #24]
 800d07c:	1c5a      	adds	r2, r3, #1
 800d07e:	69bb      	ldr	r3, [r7, #24]
 800d080:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800d082:	69bb      	ldr	r3, [r7, #24]
 800d084:	791b      	ldrb	r3, [r3, #4]
 800d086:	f043 0301 	orr.w	r3, r3, #1
 800d08a:	b2da      	uxtb	r2, r3
 800d08c:	69bb      	ldr	r3, [r7, #24]
 800d08e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d094:	69bb      	ldr	r3, [r7, #24]
 800d096:	69db      	ldr	r3, [r3, #28]
 800d098:	68ba      	ldr	r2, [r7, #8]
 800d09a:	429a      	cmp	r2, r3
 800d09c:	d3c6      	bcc.n	800d02c <remove_chain+0x4a>
 800d09e:	e000      	b.n	800d0a2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d0a0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d0a2:	2300      	movs	r3, #0
}
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	3720      	adds	r7, #32
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}

0800d0ac <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b088      	sub	sp, #32
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d10d      	bne.n	800d0de <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d0c2:	693b      	ldr	r3, [r7, #16]
 800d0c4:	695b      	ldr	r3, [r3, #20]
 800d0c6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d0c8:	69bb      	ldr	r3, [r7, #24]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d004      	beq.n	800d0d8 <create_chain+0x2c>
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	69db      	ldr	r3, [r3, #28]
 800d0d2:	69ba      	ldr	r2, [r7, #24]
 800d0d4:	429a      	cmp	r2, r3
 800d0d6:	d31b      	bcc.n	800d110 <create_chain+0x64>
 800d0d8:	2301      	movs	r3, #1
 800d0da:	61bb      	str	r3, [r7, #24]
 800d0dc:	e018      	b.n	800d110 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d0de:	6839      	ldr	r1, [r7, #0]
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f7ff fd8e 	bl	800cc02 <get_fat>
 800d0e6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	2b01      	cmp	r3, #1
 800d0ec:	d801      	bhi.n	800d0f2 <create_chain+0x46>
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	e070      	b.n	800d1d4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0f8:	d101      	bne.n	800d0fe <create_chain+0x52>
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	e06a      	b.n	800d1d4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d0fe:	693b      	ldr	r3, [r7, #16]
 800d100:	69db      	ldr	r3, [r3, #28]
 800d102:	68fa      	ldr	r2, [r7, #12]
 800d104:	429a      	cmp	r2, r3
 800d106:	d201      	bcs.n	800d10c <create_chain+0x60>
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	e063      	b.n	800d1d4 <create_chain+0x128>
		scl = clst;
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d110:	69bb      	ldr	r3, [r7, #24]
 800d112:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d114:	69fb      	ldr	r3, [r7, #28]
 800d116:	3301      	adds	r3, #1
 800d118:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d11a:	693b      	ldr	r3, [r7, #16]
 800d11c:	69db      	ldr	r3, [r3, #28]
 800d11e:	69fa      	ldr	r2, [r7, #28]
 800d120:	429a      	cmp	r2, r3
 800d122:	d307      	bcc.n	800d134 <create_chain+0x88>
				ncl = 2;
 800d124:	2302      	movs	r3, #2
 800d126:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d128:	69fa      	ldr	r2, [r7, #28]
 800d12a:	69bb      	ldr	r3, [r7, #24]
 800d12c:	429a      	cmp	r2, r3
 800d12e:	d901      	bls.n	800d134 <create_chain+0x88>
 800d130:	2300      	movs	r3, #0
 800d132:	e04f      	b.n	800d1d4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d134:	69f9      	ldr	r1, [r7, #28]
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f7ff fd63 	bl	800cc02 <get_fat>
 800d13c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d00e      	beq.n	800d162 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	2b01      	cmp	r3, #1
 800d148:	d003      	beq.n	800d152 <create_chain+0xa6>
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d150:	d101      	bne.n	800d156 <create_chain+0xaa>
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	e03e      	b.n	800d1d4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d156:	69fa      	ldr	r2, [r7, #28]
 800d158:	69bb      	ldr	r3, [r7, #24]
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d1da      	bne.n	800d114 <create_chain+0x68>
 800d15e:	2300      	movs	r3, #0
 800d160:	e038      	b.n	800d1d4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d162:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d164:	f04f 32ff 	mov.w	r2, #4294967295
 800d168:	69f9      	ldr	r1, [r7, #28]
 800d16a:	6938      	ldr	r0, [r7, #16]
 800d16c:	f7ff fe1d 	bl	800cdaa <put_fat>
 800d170:	4603      	mov	r3, r0
 800d172:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d174:	7dfb      	ldrb	r3, [r7, #23]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d109      	bne.n	800d18e <create_chain+0xe2>
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d006      	beq.n	800d18e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d180:	69fa      	ldr	r2, [r7, #28]
 800d182:	6839      	ldr	r1, [r7, #0]
 800d184:	6938      	ldr	r0, [r7, #16]
 800d186:	f7ff fe10 	bl	800cdaa <put_fat>
 800d18a:	4603      	mov	r3, r0
 800d18c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d18e:	7dfb      	ldrb	r3, [r7, #23]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d116      	bne.n	800d1c2 <create_chain+0x116>
		fs->last_clst = ncl;
 800d194:	693b      	ldr	r3, [r7, #16]
 800d196:	69fa      	ldr	r2, [r7, #28]
 800d198:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	699a      	ldr	r2, [r3, #24]
 800d19e:	693b      	ldr	r3, [r7, #16]
 800d1a0:	69db      	ldr	r3, [r3, #28]
 800d1a2:	3b02      	subs	r3, #2
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d804      	bhi.n	800d1b2 <create_chain+0x106>
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	699b      	ldr	r3, [r3, #24]
 800d1ac:	1e5a      	subs	r2, r3, #1
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	791b      	ldrb	r3, [r3, #4]
 800d1b6:	f043 0301 	orr.w	r3, r3, #1
 800d1ba:	b2da      	uxtb	r2, r3
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	711a      	strb	r2, [r3, #4]
 800d1c0:	e007      	b.n	800d1d2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d1c2:	7dfb      	ldrb	r3, [r7, #23]
 800d1c4:	2b01      	cmp	r3, #1
 800d1c6:	d102      	bne.n	800d1ce <create_chain+0x122>
 800d1c8:	f04f 33ff 	mov.w	r3, #4294967295
 800d1cc:	e000      	b.n	800d1d0 <create_chain+0x124>
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d1d2:	69fb      	ldr	r3, [r7, #28]
}
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	3720      	adds	r7, #32
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}

0800d1dc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d1dc:	b480      	push	{r7}
 800d1de:	b087      	sub	sp, #28
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
 800d1e4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1f0:	3304      	adds	r3, #4
 800d1f2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	899b      	ldrh	r3, [r3, #12]
 800d1f8:	461a      	mov	r2, r3
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d200:	68fa      	ldr	r2, [r7, #12]
 800d202:	8952      	ldrh	r2, [r2, #10]
 800d204:	fbb3 f3f2 	udiv	r3, r3, r2
 800d208:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	1d1a      	adds	r2, r3, #4
 800d20e:	613a      	str	r2, [r7, #16]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d101      	bne.n	800d21e <clmt_clust+0x42>
 800d21a:	2300      	movs	r3, #0
 800d21c:	e010      	b.n	800d240 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800d21e:	697a      	ldr	r2, [r7, #20]
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	429a      	cmp	r2, r3
 800d224:	d307      	bcc.n	800d236 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800d226:	697a      	ldr	r2, [r7, #20]
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	1ad3      	subs	r3, r2, r3
 800d22c:	617b      	str	r3, [r7, #20]
 800d22e:	693b      	ldr	r3, [r7, #16]
 800d230:	3304      	adds	r3, #4
 800d232:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d234:	e7e9      	b.n	800d20a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800d236:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d238:	693b      	ldr	r3, [r7, #16]
 800d23a:	681a      	ldr	r2, [r3, #0]
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	4413      	add	r3, r2
}
 800d240:	4618      	mov	r0, r3
 800d242:	371c      	adds	r7, #28
 800d244:	46bd      	mov	sp, r7
 800d246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24a:	4770      	bx	lr

0800d24c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b086      	sub	sp, #24
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
 800d254:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d262:	d204      	bcs.n	800d26e <dir_sdi+0x22>
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	f003 031f 	and.w	r3, r3, #31
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d001      	beq.n	800d272 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d26e:	2302      	movs	r3, #2
 800d270:	e071      	b.n	800d356 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	683a      	ldr	r2, [r7, #0]
 800d276:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	689b      	ldr	r3, [r3, #8]
 800d27c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d106      	bne.n	800d292 <dir_sdi+0x46>
 800d284:	693b      	ldr	r3, [r7, #16]
 800d286:	781b      	ldrb	r3, [r3, #0]
 800d288:	2b02      	cmp	r3, #2
 800d28a:	d902      	bls.n	800d292 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d28c:	693b      	ldr	r3, [r7, #16]
 800d28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d290:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d10c      	bne.n	800d2b2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	095b      	lsrs	r3, r3, #5
 800d29c:	693a      	ldr	r2, [r7, #16]
 800d29e:	8912      	ldrh	r2, [r2, #8]
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	d301      	bcc.n	800d2a8 <dir_sdi+0x5c>
 800d2a4:	2302      	movs	r3, #2
 800d2a6:	e056      	b.n	800d356 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	61da      	str	r2, [r3, #28]
 800d2b0:	e02d      	b.n	800d30e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d2b2:	693b      	ldr	r3, [r7, #16]
 800d2b4:	895b      	ldrh	r3, [r3, #10]
 800d2b6:	461a      	mov	r2, r3
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	899b      	ldrh	r3, [r3, #12]
 800d2bc:	fb03 f302 	mul.w	r3, r3, r2
 800d2c0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d2c2:	e019      	b.n	800d2f8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	6979      	ldr	r1, [r7, #20]
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f7ff fc9a 	bl	800cc02 <get_fat>
 800d2ce:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d2d0:	697b      	ldr	r3, [r7, #20]
 800d2d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2d6:	d101      	bne.n	800d2dc <dir_sdi+0x90>
 800d2d8:	2301      	movs	r3, #1
 800d2da:	e03c      	b.n	800d356 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d2dc:	697b      	ldr	r3, [r7, #20]
 800d2de:	2b01      	cmp	r3, #1
 800d2e0:	d904      	bls.n	800d2ec <dir_sdi+0xa0>
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	69db      	ldr	r3, [r3, #28]
 800d2e6:	697a      	ldr	r2, [r7, #20]
 800d2e8:	429a      	cmp	r2, r3
 800d2ea:	d301      	bcc.n	800d2f0 <dir_sdi+0xa4>
 800d2ec:	2302      	movs	r3, #2
 800d2ee:	e032      	b.n	800d356 <dir_sdi+0x10a>
			ofs -= csz;
 800d2f0:	683a      	ldr	r2, [r7, #0]
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	1ad3      	subs	r3, r2, r3
 800d2f6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d2f8:	683a      	ldr	r2, [r7, #0]
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	d2e1      	bcs.n	800d2c4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800d300:	6979      	ldr	r1, [r7, #20]
 800d302:	6938      	ldr	r0, [r7, #16]
 800d304:	f7ff fc5e 	bl	800cbc4 <clust2sect>
 800d308:	4602      	mov	r2, r0
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	697a      	ldr	r2, [r7, #20]
 800d312:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	69db      	ldr	r3, [r3, #28]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d101      	bne.n	800d320 <dir_sdi+0xd4>
 800d31c:	2302      	movs	r3, #2
 800d31e:	e01a      	b.n	800d356 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	69da      	ldr	r2, [r3, #28]
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	899b      	ldrh	r3, [r3, #12]
 800d328:	4619      	mov	r1, r3
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	fbb3 f3f1 	udiv	r3, r3, r1
 800d330:	441a      	add	r2, r3
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	899b      	ldrh	r3, [r3, #12]
 800d340:	461a      	mov	r2, r3
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	fbb3 f0f2 	udiv	r0, r3, r2
 800d348:	fb02 f200 	mul.w	r2, r2, r0
 800d34c:	1a9b      	subs	r3, r3, r2
 800d34e:	18ca      	adds	r2, r1, r3
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d354:	2300      	movs	r3, #0
}
 800d356:	4618      	mov	r0, r3
 800d358:	3718      	adds	r7, #24
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}

0800d35e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d35e:	b580      	push	{r7, lr}
 800d360:	b086      	sub	sp, #24
 800d362:	af00      	add	r7, sp, #0
 800d364:	6078      	str	r0, [r7, #4]
 800d366:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	695b      	ldr	r3, [r3, #20]
 800d372:	3320      	adds	r3, #32
 800d374:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	69db      	ldr	r3, [r3, #28]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d003      	beq.n	800d386 <dir_next+0x28>
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d384:	d301      	bcc.n	800d38a <dir_next+0x2c>
 800d386:	2304      	movs	r3, #4
 800d388:	e0bb      	b.n	800d502 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	899b      	ldrh	r3, [r3, #12]
 800d38e:	461a      	mov	r2, r3
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	fbb3 f1f2 	udiv	r1, r3, r2
 800d396:	fb02 f201 	mul.w	r2, r2, r1
 800d39a:	1a9b      	subs	r3, r3, r2
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	f040 809d 	bne.w	800d4dc <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	69db      	ldr	r3, [r3, #28]
 800d3a6:	1c5a      	adds	r2, r3, #1
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	699b      	ldr	r3, [r3, #24]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d10b      	bne.n	800d3cc <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d3b4:	68bb      	ldr	r3, [r7, #8]
 800d3b6:	095b      	lsrs	r3, r3, #5
 800d3b8:	68fa      	ldr	r2, [r7, #12]
 800d3ba:	8912      	ldrh	r2, [r2, #8]
 800d3bc:	4293      	cmp	r3, r2
 800d3be:	f0c0 808d 	bcc.w	800d4dc <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	61da      	str	r2, [r3, #28]
 800d3c8:	2304      	movs	r3, #4
 800d3ca:	e09a      	b.n	800d502 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	899b      	ldrh	r3, [r3, #12]
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d3d8:	68fa      	ldr	r2, [r7, #12]
 800d3da:	8952      	ldrh	r2, [r2, #10]
 800d3dc:	3a01      	subs	r2, #1
 800d3de:	4013      	ands	r3, r2
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d17b      	bne.n	800d4dc <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d3e4:	687a      	ldr	r2, [r7, #4]
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	699b      	ldr	r3, [r3, #24]
 800d3ea:	4619      	mov	r1, r3
 800d3ec:	4610      	mov	r0, r2
 800d3ee:	f7ff fc08 	bl	800cc02 <get_fat>
 800d3f2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d3f4:	697b      	ldr	r3, [r7, #20]
 800d3f6:	2b01      	cmp	r3, #1
 800d3f8:	d801      	bhi.n	800d3fe <dir_next+0xa0>
 800d3fa:	2302      	movs	r3, #2
 800d3fc:	e081      	b.n	800d502 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d3fe:	697b      	ldr	r3, [r7, #20]
 800d400:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d404:	d101      	bne.n	800d40a <dir_next+0xac>
 800d406:	2301      	movs	r3, #1
 800d408:	e07b      	b.n	800d502 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	69db      	ldr	r3, [r3, #28]
 800d40e:	697a      	ldr	r2, [r7, #20]
 800d410:	429a      	cmp	r2, r3
 800d412:	d359      	bcc.n	800d4c8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d104      	bne.n	800d424 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2200      	movs	r2, #0
 800d41e:	61da      	str	r2, [r3, #28]
 800d420:	2304      	movs	r3, #4
 800d422:	e06e      	b.n	800d502 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d424:	687a      	ldr	r2, [r7, #4]
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	699b      	ldr	r3, [r3, #24]
 800d42a:	4619      	mov	r1, r3
 800d42c:	4610      	mov	r0, r2
 800d42e:	f7ff fe3d 	bl	800d0ac <create_chain>
 800d432:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d434:	697b      	ldr	r3, [r7, #20]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d101      	bne.n	800d43e <dir_next+0xe0>
 800d43a:	2307      	movs	r3, #7
 800d43c:	e061      	b.n	800d502 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d43e:	697b      	ldr	r3, [r7, #20]
 800d440:	2b01      	cmp	r3, #1
 800d442:	d101      	bne.n	800d448 <dir_next+0xea>
 800d444:	2302      	movs	r3, #2
 800d446:	e05c      	b.n	800d502 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d44e:	d101      	bne.n	800d454 <dir_next+0xf6>
 800d450:	2301      	movs	r3, #1
 800d452:	e056      	b.n	800d502 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d454:	68f8      	ldr	r0, [r7, #12]
 800d456:	f7ff fad3 	bl	800ca00 <sync_window>
 800d45a:	4603      	mov	r3, r0
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d001      	beq.n	800d464 <dir_next+0x106>
 800d460:	2301      	movs	r3, #1
 800d462:	e04e      	b.n	800d502 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	899b      	ldrh	r3, [r3, #12]
 800d46e:	461a      	mov	r2, r3
 800d470:	2100      	movs	r1, #0
 800d472:	f7ff f8fc 	bl	800c66e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d476:	2300      	movs	r3, #0
 800d478:	613b      	str	r3, [r7, #16]
 800d47a:	6979      	ldr	r1, [r7, #20]
 800d47c:	68f8      	ldr	r0, [r7, #12]
 800d47e:	f7ff fba1 	bl	800cbc4 <clust2sect>
 800d482:	4602      	mov	r2, r0
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	635a      	str	r2, [r3, #52]	; 0x34
 800d488:	e012      	b.n	800d4b0 <dir_next+0x152>
						fs->wflag = 1;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	2201      	movs	r2, #1
 800d48e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d490:	68f8      	ldr	r0, [r7, #12]
 800d492:	f7ff fab5 	bl	800ca00 <sync_window>
 800d496:	4603      	mov	r3, r0
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d001      	beq.n	800d4a0 <dir_next+0x142>
 800d49c:	2301      	movs	r3, #1
 800d49e:	e030      	b.n	800d502 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	3301      	adds	r3, #1
 800d4a4:	613b      	str	r3, [r7, #16]
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4aa:	1c5a      	adds	r2, r3, #1
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	635a      	str	r2, [r3, #52]	; 0x34
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	895b      	ldrh	r3, [r3, #10]
 800d4b4:	461a      	mov	r2, r3
 800d4b6:	693b      	ldr	r3, [r7, #16]
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	d3e6      	bcc.n	800d48a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d4c0:	693b      	ldr	r3, [r7, #16]
 800d4c2:	1ad2      	subs	r2, r2, r3
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	697a      	ldr	r2, [r7, #20]
 800d4cc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d4ce:	6979      	ldr	r1, [r7, #20]
 800d4d0:	68f8      	ldr	r0, [r7, #12]
 800d4d2:	f7ff fb77 	bl	800cbc4 <clust2sect>
 800d4d6:	4602      	mov	r2, r0
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	68ba      	ldr	r2, [r7, #8]
 800d4e0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	899b      	ldrh	r3, [r3, #12]
 800d4ec:	461a      	mov	r2, r3
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	fbb3 f0f2 	udiv	r0, r3, r2
 800d4f4:	fb02 f200 	mul.w	r2, r2, r0
 800d4f8:	1a9b      	subs	r3, r3, r2
 800d4fa:	18ca      	adds	r2, r1, r3
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d500:	2300      	movs	r3, #0
}
 800d502:	4618      	mov	r0, r3
 800d504:	3718      	adds	r7, #24
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}

0800d50a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d50a:	b580      	push	{r7, lr}
 800d50c:	b086      	sub	sp, #24
 800d50e:	af00      	add	r7, sp, #0
 800d510:	6078      	str	r0, [r7, #4]
 800d512:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d51a:	2100      	movs	r1, #0
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f7ff fe95 	bl	800d24c <dir_sdi>
 800d522:	4603      	mov	r3, r0
 800d524:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d526:	7dfb      	ldrb	r3, [r7, #23]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d12b      	bne.n	800d584 <dir_alloc+0x7a>
		n = 0;
 800d52c:	2300      	movs	r3, #0
 800d52e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	69db      	ldr	r3, [r3, #28]
 800d534:	4619      	mov	r1, r3
 800d536:	68f8      	ldr	r0, [r7, #12]
 800d538:	f7ff faa6 	bl	800ca88 <move_window>
 800d53c:	4603      	mov	r3, r0
 800d53e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d540:	7dfb      	ldrb	r3, [r7, #23]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d11d      	bne.n	800d582 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6a1b      	ldr	r3, [r3, #32]
 800d54a:	781b      	ldrb	r3, [r3, #0]
 800d54c:	2be5      	cmp	r3, #229	; 0xe5
 800d54e:	d004      	beq.n	800d55a <dir_alloc+0x50>
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	6a1b      	ldr	r3, [r3, #32]
 800d554:	781b      	ldrb	r3, [r3, #0]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d107      	bne.n	800d56a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	3301      	adds	r3, #1
 800d55e:	613b      	str	r3, [r7, #16]
 800d560:	693a      	ldr	r2, [r7, #16]
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	429a      	cmp	r2, r3
 800d566:	d102      	bne.n	800d56e <dir_alloc+0x64>
 800d568:	e00c      	b.n	800d584 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d56a:	2300      	movs	r3, #0
 800d56c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d56e:	2101      	movs	r1, #1
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f7ff fef4 	bl	800d35e <dir_next>
 800d576:	4603      	mov	r3, r0
 800d578:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d57a:	7dfb      	ldrb	r3, [r7, #23]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d0d7      	beq.n	800d530 <dir_alloc+0x26>
 800d580:	e000      	b.n	800d584 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d582:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d584:	7dfb      	ldrb	r3, [r7, #23]
 800d586:	2b04      	cmp	r3, #4
 800d588:	d101      	bne.n	800d58e <dir_alloc+0x84>
 800d58a:	2307      	movs	r3, #7
 800d58c:	75fb      	strb	r3, [r7, #23]
	return res;
 800d58e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d590:	4618      	mov	r0, r3
 800d592:	3718      	adds	r7, #24
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}

0800d598 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b084      	sub	sp, #16
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
 800d5a0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	331a      	adds	r3, #26
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f7fe ffbe 	bl	800c528 <ld_word>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	781b      	ldrb	r3, [r3, #0]
 800d5b4:	2b03      	cmp	r3, #3
 800d5b6:	d109      	bne.n	800d5cc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	3314      	adds	r3, #20
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f7fe ffb3 	bl	800c528 <ld_word>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	041b      	lsls	r3, r3, #16
 800d5c6:	68fa      	ldr	r2, [r7, #12]
 800d5c8:	4313      	orrs	r3, r2
 800d5ca:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	3710      	adds	r7, #16
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}

0800d5d6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d5d6:	b580      	push	{r7, lr}
 800d5d8:	b084      	sub	sp, #16
 800d5da:	af00      	add	r7, sp, #0
 800d5dc:	60f8      	str	r0, [r7, #12]
 800d5de:	60b9      	str	r1, [r7, #8]
 800d5e0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	331a      	adds	r3, #26
 800d5e6:	687a      	ldr	r2, [r7, #4]
 800d5e8:	b292      	uxth	r2, r2
 800d5ea:	4611      	mov	r1, r2
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f7fe ffd6 	bl	800c59e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	781b      	ldrb	r3, [r3, #0]
 800d5f6:	2b03      	cmp	r3, #3
 800d5f8:	d109      	bne.n	800d60e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	f103 0214 	add.w	r2, r3, #20
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	0c1b      	lsrs	r3, r3, #16
 800d604:	b29b      	uxth	r3, r3
 800d606:	4619      	mov	r1, r3
 800d608:	4610      	mov	r0, r2
 800d60a:	f7fe ffc8 	bl	800c59e <st_word>
	}
}
 800d60e:	bf00      	nop
 800d610:	3710      	adds	r7, #16
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}
	...

0800d618 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d618:	b590      	push	{r4, r7, lr}
 800d61a:	b087      	sub	sp, #28
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
 800d620:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	331a      	adds	r3, #26
 800d626:	4618      	mov	r0, r3
 800d628:	f7fe ff7e 	bl	800c528 <ld_word>
 800d62c:	4603      	mov	r3, r0
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d001      	beq.n	800d636 <cmp_lfn+0x1e>
 800d632:	2300      	movs	r3, #0
 800d634:	e059      	b.n	800d6ea <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	781b      	ldrb	r3, [r3, #0]
 800d63a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d63e:	1e5a      	subs	r2, r3, #1
 800d640:	4613      	mov	r3, r2
 800d642:	005b      	lsls	r3, r3, #1
 800d644:	4413      	add	r3, r2
 800d646:	009b      	lsls	r3, r3, #2
 800d648:	4413      	add	r3, r2
 800d64a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d64c:	2301      	movs	r3, #1
 800d64e:	81fb      	strh	r3, [r7, #14]
 800d650:	2300      	movs	r3, #0
 800d652:	613b      	str	r3, [r7, #16]
 800d654:	e033      	b.n	800d6be <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d656:	4a27      	ldr	r2, [pc, #156]	; (800d6f4 <cmp_lfn+0xdc>)
 800d658:	693b      	ldr	r3, [r7, #16]
 800d65a:	4413      	add	r3, r2
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	461a      	mov	r2, r3
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	4413      	add	r3, r2
 800d664:	4618      	mov	r0, r3
 800d666:	f7fe ff5f 	bl	800c528 <ld_word>
 800d66a:	4603      	mov	r3, r0
 800d66c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d66e:	89fb      	ldrh	r3, [r7, #14]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d01a      	beq.n	800d6aa <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d674:	697b      	ldr	r3, [r7, #20]
 800d676:	2b1f      	cmp	r3, #31
 800d678:	d812      	bhi.n	800d6a0 <cmp_lfn+0x88>
 800d67a:	89bb      	ldrh	r3, [r7, #12]
 800d67c:	4618      	mov	r0, r3
 800d67e:	f001 fd79 	bl	800f174 <ff_wtoupper>
 800d682:	4603      	mov	r3, r0
 800d684:	461c      	mov	r4, r3
 800d686:	697b      	ldr	r3, [r7, #20]
 800d688:	1c5a      	adds	r2, r3, #1
 800d68a:	617a      	str	r2, [r7, #20]
 800d68c:	005b      	lsls	r3, r3, #1
 800d68e:	687a      	ldr	r2, [r7, #4]
 800d690:	4413      	add	r3, r2
 800d692:	881b      	ldrh	r3, [r3, #0]
 800d694:	4618      	mov	r0, r3
 800d696:	f001 fd6d 	bl	800f174 <ff_wtoupper>
 800d69a:	4603      	mov	r3, r0
 800d69c:	429c      	cmp	r4, r3
 800d69e:	d001      	beq.n	800d6a4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	e022      	b.n	800d6ea <cmp_lfn+0xd2>
			}
			wc = uc;
 800d6a4:	89bb      	ldrh	r3, [r7, #12]
 800d6a6:	81fb      	strh	r3, [r7, #14]
 800d6a8:	e006      	b.n	800d6b8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d6aa:	89bb      	ldrh	r3, [r7, #12]
 800d6ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d001      	beq.n	800d6b8 <cmp_lfn+0xa0>
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	e018      	b.n	800d6ea <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d6b8:	693b      	ldr	r3, [r7, #16]
 800d6ba:	3301      	adds	r3, #1
 800d6bc:	613b      	str	r3, [r7, #16]
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	2b0c      	cmp	r3, #12
 800d6c2:	d9c8      	bls.n	800d656 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	781b      	ldrb	r3, [r3, #0]
 800d6c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d00b      	beq.n	800d6e8 <cmp_lfn+0xd0>
 800d6d0:	89fb      	ldrh	r3, [r7, #14]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d008      	beq.n	800d6e8 <cmp_lfn+0xd0>
 800d6d6:	697b      	ldr	r3, [r7, #20]
 800d6d8:	005b      	lsls	r3, r3, #1
 800d6da:	687a      	ldr	r2, [r7, #4]
 800d6dc:	4413      	add	r3, r2
 800d6de:	881b      	ldrh	r3, [r3, #0]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d001      	beq.n	800d6e8 <cmp_lfn+0xd0>
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	e000      	b.n	800d6ea <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d6e8:	2301      	movs	r3, #1
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	371c      	adds	r7, #28
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd90      	pop	{r4, r7, pc}
 800d6f2:	bf00      	nop
 800d6f4:	08017d7c 	.word	0x08017d7c

0800d6f8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b088      	sub	sp, #32
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	60f8      	str	r0, [r7, #12]
 800d700:	60b9      	str	r1, [r7, #8]
 800d702:	4611      	mov	r1, r2
 800d704:	461a      	mov	r2, r3
 800d706:	460b      	mov	r3, r1
 800d708:	71fb      	strb	r3, [r7, #7]
 800d70a:	4613      	mov	r3, r2
 800d70c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	330d      	adds	r3, #13
 800d712:	79ba      	ldrb	r2, [r7, #6]
 800d714:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	330b      	adds	r3, #11
 800d71a:	220f      	movs	r2, #15
 800d71c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	330c      	adds	r3, #12
 800d722:	2200      	movs	r2, #0
 800d724:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	331a      	adds	r3, #26
 800d72a:	2100      	movs	r1, #0
 800d72c:	4618      	mov	r0, r3
 800d72e:	f7fe ff36 	bl	800c59e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d732:	79fb      	ldrb	r3, [r7, #7]
 800d734:	1e5a      	subs	r2, r3, #1
 800d736:	4613      	mov	r3, r2
 800d738:	005b      	lsls	r3, r3, #1
 800d73a:	4413      	add	r3, r2
 800d73c:	009b      	lsls	r3, r3, #2
 800d73e:	4413      	add	r3, r2
 800d740:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d742:	2300      	movs	r3, #0
 800d744:	82fb      	strh	r3, [r7, #22]
 800d746:	2300      	movs	r3, #0
 800d748:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d74a:	8afb      	ldrh	r3, [r7, #22]
 800d74c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d750:	4293      	cmp	r3, r2
 800d752:	d007      	beq.n	800d764 <put_lfn+0x6c>
 800d754:	69fb      	ldr	r3, [r7, #28]
 800d756:	1c5a      	adds	r2, r3, #1
 800d758:	61fa      	str	r2, [r7, #28]
 800d75a:	005b      	lsls	r3, r3, #1
 800d75c:	68fa      	ldr	r2, [r7, #12]
 800d75e:	4413      	add	r3, r2
 800d760:	881b      	ldrh	r3, [r3, #0]
 800d762:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d764:	4a17      	ldr	r2, [pc, #92]	; (800d7c4 <put_lfn+0xcc>)
 800d766:	69bb      	ldr	r3, [r7, #24]
 800d768:	4413      	add	r3, r2
 800d76a:	781b      	ldrb	r3, [r3, #0]
 800d76c:	461a      	mov	r2, r3
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	4413      	add	r3, r2
 800d772:	8afa      	ldrh	r2, [r7, #22]
 800d774:	4611      	mov	r1, r2
 800d776:	4618      	mov	r0, r3
 800d778:	f7fe ff11 	bl	800c59e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d77c:	8afb      	ldrh	r3, [r7, #22]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d102      	bne.n	800d788 <put_lfn+0x90>
 800d782:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d786:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d788:	69bb      	ldr	r3, [r7, #24]
 800d78a:	3301      	adds	r3, #1
 800d78c:	61bb      	str	r3, [r7, #24]
 800d78e:	69bb      	ldr	r3, [r7, #24]
 800d790:	2b0c      	cmp	r3, #12
 800d792:	d9da      	bls.n	800d74a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d794:	8afb      	ldrh	r3, [r7, #22]
 800d796:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d006      	beq.n	800d7ac <put_lfn+0xb4>
 800d79e:	69fb      	ldr	r3, [r7, #28]
 800d7a0:	005b      	lsls	r3, r3, #1
 800d7a2:	68fa      	ldr	r2, [r7, #12]
 800d7a4:	4413      	add	r3, r2
 800d7a6:	881b      	ldrh	r3, [r3, #0]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d103      	bne.n	800d7b4 <put_lfn+0xbc>
 800d7ac:	79fb      	ldrb	r3, [r7, #7]
 800d7ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7b2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	79fa      	ldrb	r2, [r7, #7]
 800d7b8:	701a      	strb	r2, [r3, #0]
}
 800d7ba:	bf00      	nop
 800d7bc:	3720      	adds	r7, #32
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}
 800d7c2:	bf00      	nop
 800d7c4:	08017d7c 	.word	0x08017d7c

0800d7c8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b08c      	sub	sp, #48	; 0x30
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	60f8      	str	r0, [r7, #12]
 800d7d0:	60b9      	str	r1, [r7, #8]
 800d7d2:	607a      	str	r2, [r7, #4]
 800d7d4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d7d6:	220b      	movs	r2, #11
 800d7d8:	68b9      	ldr	r1, [r7, #8]
 800d7da:	68f8      	ldr	r0, [r7, #12]
 800d7dc:	f7fe ff26 	bl	800c62c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	2b05      	cmp	r3, #5
 800d7e4:	d92b      	bls.n	800d83e <gen_numname+0x76>
		sr = seq;
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d7ea:	e022      	b.n	800d832 <gen_numname+0x6a>
			wc = *lfn++;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	1c9a      	adds	r2, r3, #2
 800d7f0:	607a      	str	r2, [r7, #4]
 800d7f2:	881b      	ldrh	r3, [r3, #0]
 800d7f4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800d7fa:	e017      	b.n	800d82c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800d7fc:	69fb      	ldr	r3, [r7, #28]
 800d7fe:	005a      	lsls	r2, r3, #1
 800d800:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d802:	f003 0301 	and.w	r3, r3, #1
 800d806:	4413      	add	r3, r2
 800d808:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d80a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d80c:	085b      	lsrs	r3, r3, #1
 800d80e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d810:	69fb      	ldr	r3, [r7, #28]
 800d812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d816:	2b00      	cmp	r3, #0
 800d818:	d005      	beq.n	800d826 <gen_numname+0x5e>
 800d81a:	69fb      	ldr	r3, [r7, #28]
 800d81c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800d820:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800d824:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d828:	3301      	adds	r3, #1
 800d82a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d82e:	2b0f      	cmp	r3, #15
 800d830:	d9e4      	bls.n	800d7fc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	881b      	ldrh	r3, [r3, #0]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d1d8      	bne.n	800d7ec <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d83a:	69fb      	ldr	r3, [r7, #28]
 800d83c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d83e:	2307      	movs	r3, #7
 800d840:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	b2db      	uxtb	r3, r3
 800d846:	f003 030f 	and.w	r3, r3, #15
 800d84a:	b2db      	uxtb	r3, r3
 800d84c:	3330      	adds	r3, #48	; 0x30
 800d84e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d852:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d856:	2b39      	cmp	r3, #57	; 0x39
 800d858:	d904      	bls.n	800d864 <gen_numname+0x9c>
 800d85a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d85e:	3307      	adds	r3, #7
 800d860:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d866:	1e5a      	subs	r2, r3, #1
 800d868:	62ba      	str	r2, [r7, #40]	; 0x28
 800d86a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d86e:	4413      	add	r3, r2
 800d870:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d874:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	091b      	lsrs	r3, r3, #4
 800d87c:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d1de      	bne.n	800d842 <gen_numname+0x7a>
	ns[i] = '~';
 800d884:	f107 0214 	add.w	r2, r7, #20
 800d888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d88a:	4413      	add	r3, r2
 800d88c:	227e      	movs	r2, #126	; 0x7e
 800d88e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d890:	2300      	movs	r3, #0
 800d892:	627b      	str	r3, [r7, #36]	; 0x24
 800d894:	e002      	b.n	800d89c <gen_numname+0xd4>
 800d896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d898:	3301      	adds	r3, #1
 800d89a:	627b      	str	r3, [r7, #36]	; 0x24
 800d89c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a0:	429a      	cmp	r2, r3
 800d8a2:	d205      	bcs.n	800d8b0 <gen_numname+0xe8>
 800d8a4:	68fa      	ldr	r2, [r7, #12]
 800d8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a8:	4413      	add	r3, r2
 800d8aa:	781b      	ldrb	r3, [r3, #0]
 800d8ac:	2b20      	cmp	r3, #32
 800d8ae:	d1f2      	bne.n	800d896 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b2:	2b07      	cmp	r3, #7
 800d8b4:	d808      	bhi.n	800d8c8 <gen_numname+0x100>
 800d8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b8:	1c5a      	adds	r2, r3, #1
 800d8ba:	62ba      	str	r2, [r7, #40]	; 0x28
 800d8bc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d8c0:	4413      	add	r3, r2
 800d8c2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d8c6:	e000      	b.n	800d8ca <gen_numname+0x102>
 800d8c8:	2120      	movs	r1, #32
 800d8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8cc:	1c5a      	adds	r2, r3, #1
 800d8ce:	627a      	str	r2, [r7, #36]	; 0x24
 800d8d0:	68fa      	ldr	r2, [r7, #12]
 800d8d2:	4413      	add	r3, r2
 800d8d4:	460a      	mov	r2, r1
 800d8d6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8da:	2b07      	cmp	r3, #7
 800d8dc:	d9e8      	bls.n	800d8b0 <gen_numname+0xe8>
}
 800d8de:	bf00      	nop
 800d8e0:	bf00      	nop
 800d8e2:	3730      	adds	r7, #48	; 0x30
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}

0800d8e8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d8e8:	b480      	push	{r7}
 800d8ea:	b085      	sub	sp, #20
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d8f4:	230b      	movs	r3, #11
 800d8f6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d8f8:	7bfb      	ldrb	r3, [r7, #15]
 800d8fa:	b2da      	uxtb	r2, r3
 800d8fc:	0852      	lsrs	r2, r2, #1
 800d8fe:	01db      	lsls	r3, r3, #7
 800d900:	4313      	orrs	r3, r2
 800d902:	b2da      	uxtb	r2, r3
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	1c59      	adds	r1, r3, #1
 800d908:	6079      	str	r1, [r7, #4]
 800d90a:	781b      	ldrb	r3, [r3, #0]
 800d90c:	4413      	add	r3, r2
 800d90e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	3b01      	subs	r3, #1
 800d914:	60bb      	str	r3, [r7, #8]
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d1ed      	bne.n	800d8f8 <sum_sfn+0x10>
	return sum;
 800d91c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d91e:	4618      	mov	r0, r3
 800d920:	3714      	adds	r7, #20
 800d922:	46bd      	mov	sp, r7
 800d924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d928:	4770      	bx	lr

0800d92a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d92a:	b580      	push	{r7, lr}
 800d92c:	b086      	sub	sp, #24
 800d92e:	af00      	add	r7, sp, #0
 800d930:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d938:	2100      	movs	r1, #0
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f7ff fc86 	bl	800d24c <dir_sdi>
 800d940:	4603      	mov	r3, r0
 800d942:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d944:	7dfb      	ldrb	r3, [r7, #23]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d001      	beq.n	800d94e <dir_find+0x24>
 800d94a:	7dfb      	ldrb	r3, [r7, #23]
 800d94c:	e0a9      	b.n	800daa2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d94e:	23ff      	movs	r3, #255	; 0xff
 800d950:	753b      	strb	r3, [r7, #20]
 800d952:	7d3b      	ldrb	r3, [r7, #20]
 800d954:	757b      	strb	r3, [r7, #21]
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f04f 32ff 	mov.w	r2, #4294967295
 800d95c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	69db      	ldr	r3, [r3, #28]
 800d962:	4619      	mov	r1, r3
 800d964:	6938      	ldr	r0, [r7, #16]
 800d966:	f7ff f88f 	bl	800ca88 <move_window>
 800d96a:	4603      	mov	r3, r0
 800d96c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d96e:	7dfb      	ldrb	r3, [r7, #23]
 800d970:	2b00      	cmp	r3, #0
 800d972:	f040 8090 	bne.w	800da96 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6a1b      	ldr	r3, [r3, #32]
 800d97a:	781b      	ldrb	r3, [r3, #0]
 800d97c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d97e:	7dbb      	ldrb	r3, [r7, #22]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d102      	bne.n	800d98a <dir_find+0x60>
 800d984:	2304      	movs	r3, #4
 800d986:	75fb      	strb	r3, [r7, #23]
 800d988:	e08a      	b.n	800daa0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6a1b      	ldr	r3, [r3, #32]
 800d98e:	330b      	adds	r3, #11
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d996:	73fb      	strb	r3, [r7, #15]
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	7bfa      	ldrb	r2, [r7, #15]
 800d99c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d99e:	7dbb      	ldrb	r3, [r7, #22]
 800d9a0:	2be5      	cmp	r3, #229	; 0xe5
 800d9a2:	d007      	beq.n	800d9b4 <dir_find+0x8a>
 800d9a4:	7bfb      	ldrb	r3, [r7, #15]
 800d9a6:	f003 0308 	and.w	r3, r3, #8
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d009      	beq.n	800d9c2 <dir_find+0x98>
 800d9ae:	7bfb      	ldrb	r3, [r7, #15]
 800d9b0:	2b0f      	cmp	r3, #15
 800d9b2:	d006      	beq.n	800d9c2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d9b4:	23ff      	movs	r3, #255	; 0xff
 800d9b6:	757b      	strb	r3, [r7, #21]
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f04f 32ff 	mov.w	r2, #4294967295
 800d9be:	631a      	str	r2, [r3, #48]	; 0x30
 800d9c0:	e05e      	b.n	800da80 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d9c2:	7bfb      	ldrb	r3, [r7, #15]
 800d9c4:	2b0f      	cmp	r3, #15
 800d9c6:	d136      	bne.n	800da36 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d9ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d154      	bne.n	800da80 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d9d6:	7dbb      	ldrb	r3, [r7, #22]
 800d9d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d00d      	beq.n	800d9fc <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	6a1b      	ldr	r3, [r3, #32]
 800d9e4:	7b5b      	ldrb	r3, [r3, #13]
 800d9e6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d9e8:	7dbb      	ldrb	r3, [r7, #22]
 800d9ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d9ee:	75bb      	strb	r3, [r7, #22]
 800d9f0:	7dbb      	ldrb	r3, [r7, #22]
 800d9f2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	695a      	ldr	r2, [r3, #20]
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d9fc:	7dba      	ldrb	r2, [r7, #22]
 800d9fe:	7d7b      	ldrb	r3, [r7, #21]
 800da00:	429a      	cmp	r2, r3
 800da02:	d115      	bne.n	800da30 <dir_find+0x106>
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6a1b      	ldr	r3, [r3, #32]
 800da08:	330d      	adds	r3, #13
 800da0a:	781b      	ldrb	r3, [r3, #0]
 800da0c:	7d3a      	ldrb	r2, [r7, #20]
 800da0e:	429a      	cmp	r2, r3
 800da10:	d10e      	bne.n	800da30 <dir_find+0x106>
 800da12:	693b      	ldr	r3, [r7, #16]
 800da14:	691a      	ldr	r2, [r3, #16]
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6a1b      	ldr	r3, [r3, #32]
 800da1a:	4619      	mov	r1, r3
 800da1c:	4610      	mov	r0, r2
 800da1e:	f7ff fdfb 	bl	800d618 <cmp_lfn>
 800da22:	4603      	mov	r3, r0
 800da24:	2b00      	cmp	r3, #0
 800da26:	d003      	beq.n	800da30 <dir_find+0x106>
 800da28:	7d7b      	ldrb	r3, [r7, #21]
 800da2a:	3b01      	subs	r3, #1
 800da2c:	b2db      	uxtb	r3, r3
 800da2e:	e000      	b.n	800da32 <dir_find+0x108>
 800da30:	23ff      	movs	r3, #255	; 0xff
 800da32:	757b      	strb	r3, [r7, #21]
 800da34:	e024      	b.n	800da80 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800da36:	7d7b      	ldrb	r3, [r7, #21]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d109      	bne.n	800da50 <dir_find+0x126>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6a1b      	ldr	r3, [r3, #32]
 800da40:	4618      	mov	r0, r3
 800da42:	f7ff ff51 	bl	800d8e8 <sum_sfn>
 800da46:	4603      	mov	r3, r0
 800da48:	461a      	mov	r2, r3
 800da4a:	7d3b      	ldrb	r3, [r7, #20]
 800da4c:	4293      	cmp	r3, r2
 800da4e:	d024      	beq.n	800da9a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800da56:	f003 0301 	and.w	r3, r3, #1
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d10a      	bne.n	800da74 <dir_find+0x14a>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6a18      	ldr	r0, [r3, #32]
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	3324      	adds	r3, #36	; 0x24
 800da66:	220b      	movs	r2, #11
 800da68:	4619      	mov	r1, r3
 800da6a:	f7fe fe1b 	bl	800c6a4 <mem_cmp>
 800da6e:	4603      	mov	r3, r0
 800da70:	2b00      	cmp	r3, #0
 800da72:	d014      	beq.n	800da9e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800da74:	23ff      	movs	r3, #255	; 0xff
 800da76:	757b      	strb	r3, [r7, #21]
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f04f 32ff 	mov.w	r2, #4294967295
 800da7e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800da80:	2100      	movs	r1, #0
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f7ff fc6b 	bl	800d35e <dir_next>
 800da88:	4603      	mov	r3, r0
 800da8a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800da8c:	7dfb      	ldrb	r3, [r7, #23]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	f43f af65 	beq.w	800d95e <dir_find+0x34>
 800da94:	e004      	b.n	800daa0 <dir_find+0x176>
		if (res != FR_OK) break;
 800da96:	bf00      	nop
 800da98:	e002      	b.n	800daa0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800da9a:	bf00      	nop
 800da9c:	e000      	b.n	800daa0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800da9e:	bf00      	nop

	return res;
 800daa0:	7dfb      	ldrb	r3, [r7, #23]
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3718      	adds	r7, #24
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}
	...

0800daac <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b08c      	sub	sp, #48	; 0x30
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dac0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d001      	beq.n	800dacc <dir_register+0x20>
 800dac8:	2306      	movs	r3, #6
 800daca:	e0e0      	b.n	800dc8e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800dacc:	2300      	movs	r3, #0
 800dace:	627b      	str	r3, [r7, #36]	; 0x24
 800dad0:	e002      	b.n	800dad8 <dir_register+0x2c>
 800dad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad4:	3301      	adds	r3, #1
 800dad6:	627b      	str	r3, [r7, #36]	; 0x24
 800dad8:	69fb      	ldr	r3, [r7, #28]
 800dada:	691a      	ldr	r2, [r3, #16]
 800dadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dade:	005b      	lsls	r3, r3, #1
 800dae0:	4413      	add	r3, r2
 800dae2:	881b      	ldrh	r3, [r3, #0]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d1f4      	bne.n	800dad2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800daee:	f107 030c 	add.w	r3, r7, #12
 800daf2:	220c      	movs	r2, #12
 800daf4:	4618      	mov	r0, r3
 800daf6:	f7fe fd99 	bl	800c62c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800dafa:	7dfb      	ldrb	r3, [r7, #23]
 800dafc:	f003 0301 	and.w	r3, r3, #1
 800db00:	2b00      	cmp	r3, #0
 800db02:	d032      	beq.n	800db6a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2240      	movs	r2, #64	; 0x40
 800db08:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800db0c:	2301      	movs	r3, #1
 800db0e:	62bb      	str	r3, [r7, #40]	; 0x28
 800db10:	e016      	b.n	800db40 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800db18:	69fb      	ldr	r3, [r7, #28]
 800db1a:	691a      	ldr	r2, [r3, #16]
 800db1c:	f107 010c 	add.w	r1, r7, #12
 800db20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db22:	f7ff fe51 	bl	800d7c8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f7ff feff 	bl	800d92a <dir_find>
 800db2c:	4603      	mov	r3, r0
 800db2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800db32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db36:	2b00      	cmp	r3, #0
 800db38:	d106      	bne.n	800db48 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800db3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db3c:	3301      	adds	r3, #1
 800db3e:	62bb      	str	r3, [r7, #40]	; 0x28
 800db40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db42:	2b63      	cmp	r3, #99	; 0x63
 800db44:	d9e5      	bls.n	800db12 <dir_register+0x66>
 800db46:	e000      	b.n	800db4a <dir_register+0x9e>
			if (res != FR_OK) break;
 800db48:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800db4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db4c:	2b64      	cmp	r3, #100	; 0x64
 800db4e:	d101      	bne.n	800db54 <dir_register+0xa8>
 800db50:	2307      	movs	r3, #7
 800db52:	e09c      	b.n	800dc8e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800db54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db58:	2b04      	cmp	r3, #4
 800db5a:	d002      	beq.n	800db62 <dir_register+0xb6>
 800db5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db60:	e095      	b.n	800dc8e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800db62:	7dfa      	ldrb	r2, [r7, #23]
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800db6a:	7dfb      	ldrb	r3, [r7, #23]
 800db6c:	f003 0302 	and.w	r3, r3, #2
 800db70:	2b00      	cmp	r3, #0
 800db72:	d007      	beq.n	800db84 <dir_register+0xd8>
 800db74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db76:	330c      	adds	r3, #12
 800db78:	4a47      	ldr	r2, [pc, #284]	; (800dc98 <dir_register+0x1ec>)
 800db7a:	fba2 2303 	umull	r2, r3, r2, r3
 800db7e:	089b      	lsrs	r3, r3, #2
 800db80:	3301      	adds	r3, #1
 800db82:	e000      	b.n	800db86 <dir_register+0xda>
 800db84:	2301      	movs	r3, #1
 800db86:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800db88:	6a39      	ldr	r1, [r7, #32]
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f7ff fcbd 	bl	800d50a <dir_alloc>
 800db90:	4603      	mov	r3, r0
 800db92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800db96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d148      	bne.n	800dc30 <dir_register+0x184>
 800db9e:	6a3b      	ldr	r3, [r7, #32]
 800dba0:	3b01      	subs	r3, #1
 800dba2:	623b      	str	r3, [r7, #32]
 800dba4:	6a3b      	ldr	r3, [r7, #32]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d042      	beq.n	800dc30 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	695a      	ldr	r2, [r3, #20]
 800dbae:	6a3b      	ldr	r3, [r7, #32]
 800dbb0:	015b      	lsls	r3, r3, #5
 800dbb2:	1ad3      	subs	r3, r2, r3
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f7ff fb48 	bl	800d24c <dir_sdi>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800dbc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d132      	bne.n	800dc30 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	3324      	adds	r3, #36	; 0x24
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f7ff fe8a 	bl	800d8e8 <sum_sfn>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	69db      	ldr	r3, [r3, #28]
 800dbdc:	4619      	mov	r1, r3
 800dbde:	69f8      	ldr	r0, [r7, #28]
 800dbe0:	f7fe ff52 	bl	800ca88 <move_window>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800dbea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d11d      	bne.n	800dc2e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800dbf2:	69fb      	ldr	r3, [r7, #28]
 800dbf4:	6918      	ldr	r0, [r3, #16]
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	6a19      	ldr	r1, [r3, #32]
 800dbfa:	6a3b      	ldr	r3, [r7, #32]
 800dbfc:	b2da      	uxtb	r2, r3
 800dbfe:	7efb      	ldrb	r3, [r7, #27]
 800dc00:	f7ff fd7a 	bl	800d6f8 <put_lfn>
				fs->wflag = 1;
 800dc04:	69fb      	ldr	r3, [r7, #28]
 800dc06:	2201      	movs	r2, #1
 800dc08:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800dc0a:	2100      	movs	r1, #0
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f7ff fba6 	bl	800d35e <dir_next>
 800dc12:	4603      	mov	r3, r0
 800dc14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800dc18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d107      	bne.n	800dc30 <dir_register+0x184>
 800dc20:	6a3b      	ldr	r3, [r7, #32]
 800dc22:	3b01      	subs	r3, #1
 800dc24:	623b      	str	r3, [r7, #32]
 800dc26:	6a3b      	ldr	r3, [r7, #32]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d1d5      	bne.n	800dbd8 <dir_register+0x12c>
 800dc2c:	e000      	b.n	800dc30 <dir_register+0x184>
				if (res != FR_OK) break;
 800dc2e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800dc30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d128      	bne.n	800dc8a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	69db      	ldr	r3, [r3, #28]
 800dc3c:	4619      	mov	r1, r3
 800dc3e:	69f8      	ldr	r0, [r7, #28]
 800dc40:	f7fe ff22 	bl	800ca88 <move_window>
 800dc44:	4603      	mov	r3, r0
 800dc46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800dc4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d11b      	bne.n	800dc8a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6a1b      	ldr	r3, [r3, #32]
 800dc56:	2220      	movs	r2, #32
 800dc58:	2100      	movs	r1, #0
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f7fe fd07 	bl	800c66e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	6a18      	ldr	r0, [r3, #32]
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	3324      	adds	r3, #36	; 0x24
 800dc68:	220b      	movs	r2, #11
 800dc6a:	4619      	mov	r1, r3
 800dc6c:	f7fe fcde 	bl	800c62c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6a1b      	ldr	r3, [r3, #32]
 800dc7a:	330c      	adds	r3, #12
 800dc7c:	f002 0218 	and.w	r2, r2, #24
 800dc80:	b2d2      	uxtb	r2, r2
 800dc82:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800dc84:	69fb      	ldr	r3, [r7, #28]
 800dc86:	2201      	movs	r2, #1
 800dc88:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800dc8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	3730      	adds	r7, #48	; 0x30
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}
 800dc96:	bf00      	nop
 800dc98:	4ec4ec4f 	.word	0x4ec4ec4f

0800dc9c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b08a      	sub	sp, #40	; 0x28
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
 800dca4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	613b      	str	r3, [r7, #16]
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	691b      	ldr	r3, [r3, #16]
 800dcb2:	60fb      	str	r3, [r7, #12]
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	617b      	str	r3, [r7, #20]
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800dcbc:	69bb      	ldr	r3, [r7, #24]
 800dcbe:	1c5a      	adds	r2, r3, #1
 800dcc0:	61ba      	str	r2, [r7, #24]
 800dcc2:	693a      	ldr	r2, [r7, #16]
 800dcc4:	4413      	add	r3, r2
 800dcc6:	781b      	ldrb	r3, [r3, #0]
 800dcc8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800dcca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dccc:	2b1f      	cmp	r3, #31
 800dcce:	d940      	bls.n	800dd52 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800dcd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dcd2:	2b2f      	cmp	r3, #47	; 0x2f
 800dcd4:	d006      	beq.n	800dce4 <create_name+0x48>
 800dcd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dcd8:	2b5c      	cmp	r3, #92	; 0x5c
 800dcda:	d110      	bne.n	800dcfe <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800dcdc:	e002      	b.n	800dce4 <create_name+0x48>
 800dcde:	69bb      	ldr	r3, [r7, #24]
 800dce0:	3301      	adds	r3, #1
 800dce2:	61bb      	str	r3, [r7, #24]
 800dce4:	693a      	ldr	r2, [r7, #16]
 800dce6:	69bb      	ldr	r3, [r7, #24]
 800dce8:	4413      	add	r3, r2
 800dcea:	781b      	ldrb	r3, [r3, #0]
 800dcec:	2b2f      	cmp	r3, #47	; 0x2f
 800dcee:	d0f6      	beq.n	800dcde <create_name+0x42>
 800dcf0:	693a      	ldr	r2, [r7, #16]
 800dcf2:	69bb      	ldr	r3, [r7, #24]
 800dcf4:	4413      	add	r3, r2
 800dcf6:	781b      	ldrb	r3, [r3, #0]
 800dcf8:	2b5c      	cmp	r3, #92	; 0x5c
 800dcfa:	d0f0      	beq.n	800dcde <create_name+0x42>
			break;
 800dcfc:	e02a      	b.n	800dd54 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	2b1f      	cmp	r3, #31
 800dd02:	d901      	bls.n	800dd08 <create_name+0x6c>
 800dd04:	2306      	movs	r3, #6
 800dd06:	e177      	b.n	800dff8 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800dd08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd0a:	b2db      	uxtb	r3, r3
 800dd0c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800dd0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd10:	2101      	movs	r1, #1
 800dd12:	4618      	mov	r0, r3
 800dd14:	f001 f9f2 	bl	800f0fc <ff_convert>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800dd1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d101      	bne.n	800dd26 <create_name+0x8a>
 800dd22:	2306      	movs	r3, #6
 800dd24:	e168      	b.n	800dff8 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800dd26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd28:	2b7f      	cmp	r3, #127	; 0x7f
 800dd2a:	d809      	bhi.n	800dd40 <create_name+0xa4>
 800dd2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd2e:	4619      	mov	r1, r3
 800dd30:	48b3      	ldr	r0, [pc, #716]	; (800e000 <create_name+0x364>)
 800dd32:	f7fe fcde 	bl	800c6f2 <chk_chr>
 800dd36:	4603      	mov	r3, r0
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d001      	beq.n	800dd40 <create_name+0xa4>
 800dd3c:	2306      	movs	r3, #6
 800dd3e:	e15b      	b.n	800dff8 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800dd40:	697b      	ldr	r3, [r7, #20]
 800dd42:	1c5a      	adds	r2, r3, #1
 800dd44:	617a      	str	r2, [r7, #20]
 800dd46:	005b      	lsls	r3, r3, #1
 800dd48:	68fa      	ldr	r2, [r7, #12]
 800dd4a:	4413      	add	r3, r2
 800dd4c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dd4e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800dd50:	e7b4      	b.n	800dcbc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800dd52:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800dd54:	693a      	ldr	r2, [r7, #16]
 800dd56:	69bb      	ldr	r3, [r7, #24]
 800dd58:	441a      	add	r2, r3
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800dd5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd60:	2b1f      	cmp	r3, #31
 800dd62:	d801      	bhi.n	800dd68 <create_name+0xcc>
 800dd64:	2304      	movs	r3, #4
 800dd66:	e000      	b.n	800dd6a <create_name+0xce>
 800dd68:	2300      	movs	r3, #0
 800dd6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800dd6e:	e011      	b.n	800dd94 <create_name+0xf8>
		w = lfn[di - 1];
 800dd70:	697b      	ldr	r3, [r7, #20]
 800dd72:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dd76:	3b01      	subs	r3, #1
 800dd78:	005b      	lsls	r3, r3, #1
 800dd7a:	68fa      	ldr	r2, [r7, #12]
 800dd7c:	4413      	add	r3, r2
 800dd7e:	881b      	ldrh	r3, [r3, #0]
 800dd80:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800dd82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd84:	2b20      	cmp	r3, #32
 800dd86:	d002      	beq.n	800dd8e <create_name+0xf2>
 800dd88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd8a:	2b2e      	cmp	r3, #46	; 0x2e
 800dd8c:	d106      	bne.n	800dd9c <create_name+0x100>
		di--;
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	3b01      	subs	r3, #1
 800dd92:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800dd94:	697b      	ldr	r3, [r7, #20]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d1ea      	bne.n	800dd70 <create_name+0xd4>
 800dd9a:	e000      	b.n	800dd9e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800dd9c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	005b      	lsls	r3, r3, #1
 800dda2:	68fa      	ldr	r2, [r7, #12]
 800dda4:	4413      	add	r3, r2
 800dda6:	2200      	movs	r2, #0
 800dda8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ddaa:	697b      	ldr	r3, [r7, #20]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d101      	bne.n	800ddb4 <create_name+0x118>
 800ddb0:	2306      	movs	r3, #6
 800ddb2:	e121      	b.n	800dff8 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	3324      	adds	r3, #36	; 0x24
 800ddb8:	220b      	movs	r2, #11
 800ddba:	2120      	movs	r1, #32
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f7fe fc56 	bl	800c66e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	61bb      	str	r3, [r7, #24]
 800ddc6:	e002      	b.n	800ddce <create_name+0x132>
 800ddc8:	69bb      	ldr	r3, [r7, #24]
 800ddca:	3301      	adds	r3, #1
 800ddcc:	61bb      	str	r3, [r7, #24]
 800ddce:	69bb      	ldr	r3, [r7, #24]
 800ddd0:	005b      	lsls	r3, r3, #1
 800ddd2:	68fa      	ldr	r2, [r7, #12]
 800ddd4:	4413      	add	r3, r2
 800ddd6:	881b      	ldrh	r3, [r3, #0]
 800ddd8:	2b20      	cmp	r3, #32
 800ddda:	d0f5      	beq.n	800ddc8 <create_name+0x12c>
 800dddc:	69bb      	ldr	r3, [r7, #24]
 800ddde:	005b      	lsls	r3, r3, #1
 800dde0:	68fa      	ldr	r2, [r7, #12]
 800dde2:	4413      	add	r3, r2
 800dde4:	881b      	ldrh	r3, [r3, #0]
 800dde6:	2b2e      	cmp	r3, #46	; 0x2e
 800dde8:	d0ee      	beq.n	800ddc8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ddea:	69bb      	ldr	r3, [r7, #24]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d009      	beq.n	800de04 <create_name+0x168>
 800ddf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddf4:	f043 0303 	orr.w	r3, r3, #3
 800ddf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ddfc:	e002      	b.n	800de04 <create_name+0x168>
 800ddfe:	697b      	ldr	r3, [r7, #20]
 800de00:	3b01      	subs	r3, #1
 800de02:	617b      	str	r3, [r7, #20]
 800de04:	697b      	ldr	r3, [r7, #20]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d009      	beq.n	800de1e <create_name+0x182>
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800de10:	3b01      	subs	r3, #1
 800de12:	005b      	lsls	r3, r3, #1
 800de14:	68fa      	ldr	r2, [r7, #12]
 800de16:	4413      	add	r3, r2
 800de18:	881b      	ldrh	r3, [r3, #0]
 800de1a:	2b2e      	cmp	r3, #46	; 0x2e
 800de1c:	d1ef      	bne.n	800ddfe <create_name+0x162>

	i = b = 0; ni = 8;
 800de1e:	2300      	movs	r3, #0
 800de20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800de24:	2300      	movs	r3, #0
 800de26:	623b      	str	r3, [r7, #32]
 800de28:	2308      	movs	r3, #8
 800de2a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800de2c:	69bb      	ldr	r3, [r7, #24]
 800de2e:	1c5a      	adds	r2, r3, #1
 800de30:	61ba      	str	r2, [r7, #24]
 800de32:	005b      	lsls	r3, r3, #1
 800de34:	68fa      	ldr	r2, [r7, #12]
 800de36:	4413      	add	r3, r2
 800de38:	881b      	ldrh	r3, [r3, #0]
 800de3a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800de3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de3e:	2b00      	cmp	r3, #0
 800de40:	f000 8090 	beq.w	800df64 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800de44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de46:	2b20      	cmp	r3, #32
 800de48:	d006      	beq.n	800de58 <create_name+0x1bc>
 800de4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de4c:	2b2e      	cmp	r3, #46	; 0x2e
 800de4e:	d10a      	bne.n	800de66 <create_name+0x1ca>
 800de50:	69ba      	ldr	r2, [r7, #24]
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	429a      	cmp	r2, r3
 800de56:	d006      	beq.n	800de66 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800de58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de5c:	f043 0303 	orr.w	r3, r3, #3
 800de60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800de64:	e07d      	b.n	800df62 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800de66:	6a3a      	ldr	r2, [r7, #32]
 800de68:	69fb      	ldr	r3, [r7, #28]
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d203      	bcs.n	800de76 <create_name+0x1da>
 800de6e:	69ba      	ldr	r2, [r7, #24]
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	429a      	cmp	r2, r3
 800de74:	d123      	bne.n	800debe <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800de76:	69fb      	ldr	r3, [r7, #28]
 800de78:	2b0b      	cmp	r3, #11
 800de7a:	d106      	bne.n	800de8a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800de7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de80:	f043 0303 	orr.w	r3, r3, #3
 800de84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800de88:	e06f      	b.n	800df6a <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800de8a:	69ba      	ldr	r2, [r7, #24]
 800de8c:	697b      	ldr	r3, [r7, #20]
 800de8e:	429a      	cmp	r2, r3
 800de90:	d005      	beq.n	800de9e <create_name+0x202>
 800de92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de96:	f043 0303 	orr.w	r3, r3, #3
 800de9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800de9e:	69ba      	ldr	r2, [r7, #24]
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	429a      	cmp	r2, r3
 800dea4:	d860      	bhi.n	800df68 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	61bb      	str	r3, [r7, #24]
 800deaa:	2308      	movs	r3, #8
 800deac:	623b      	str	r3, [r7, #32]
 800deae:	230b      	movs	r3, #11
 800deb0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800deb2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800deb6:	009b      	lsls	r3, r3, #2
 800deb8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800debc:	e051      	b.n	800df62 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800debe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dec0:	2b7f      	cmp	r3, #127	; 0x7f
 800dec2:	d914      	bls.n	800deee <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800dec4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dec6:	2100      	movs	r1, #0
 800dec8:	4618      	mov	r0, r3
 800deca:	f001 f917 	bl	800f0fc <ff_convert>
 800dece:	4603      	mov	r3, r0
 800ded0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ded2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d004      	beq.n	800dee2 <create_name+0x246>
 800ded8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800deda:	3b80      	subs	r3, #128	; 0x80
 800dedc:	4a49      	ldr	r2, [pc, #292]	; (800e004 <create_name+0x368>)
 800dede:	5cd3      	ldrb	r3, [r2, r3]
 800dee0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800dee2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dee6:	f043 0302 	orr.w	r3, r3, #2
 800deea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800deee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800def0:	2b00      	cmp	r3, #0
 800def2:	d007      	beq.n	800df04 <create_name+0x268>
 800def4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800def6:	4619      	mov	r1, r3
 800def8:	4843      	ldr	r0, [pc, #268]	; (800e008 <create_name+0x36c>)
 800defa:	f7fe fbfa 	bl	800c6f2 <chk_chr>
 800defe:	4603      	mov	r3, r0
 800df00:	2b00      	cmp	r3, #0
 800df02:	d008      	beq.n	800df16 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800df04:	235f      	movs	r3, #95	; 0x5f
 800df06:	84bb      	strh	r3, [r7, #36]	; 0x24
 800df08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df0c:	f043 0303 	orr.w	r3, r3, #3
 800df10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800df14:	e01b      	b.n	800df4e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800df16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df18:	2b40      	cmp	r3, #64	; 0x40
 800df1a:	d909      	bls.n	800df30 <create_name+0x294>
 800df1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df1e:	2b5a      	cmp	r3, #90	; 0x5a
 800df20:	d806      	bhi.n	800df30 <create_name+0x294>
					b |= 2;
 800df22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df26:	f043 0302 	orr.w	r3, r3, #2
 800df2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800df2e:	e00e      	b.n	800df4e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800df30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df32:	2b60      	cmp	r3, #96	; 0x60
 800df34:	d90b      	bls.n	800df4e <create_name+0x2b2>
 800df36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df38:	2b7a      	cmp	r3, #122	; 0x7a
 800df3a:	d808      	bhi.n	800df4e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800df3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df40:	f043 0301 	orr.w	r3, r3, #1
 800df44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800df48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df4a:	3b20      	subs	r3, #32
 800df4c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800df4e:	6a3b      	ldr	r3, [r7, #32]
 800df50:	1c5a      	adds	r2, r3, #1
 800df52:	623a      	str	r2, [r7, #32]
 800df54:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800df56:	b2d1      	uxtb	r1, r2
 800df58:	687a      	ldr	r2, [r7, #4]
 800df5a:	4413      	add	r3, r2
 800df5c:	460a      	mov	r2, r1
 800df5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800df62:	e763      	b.n	800de2c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800df64:	bf00      	nop
 800df66:	e000      	b.n	800df6a <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800df68:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800df70:	2be5      	cmp	r3, #229	; 0xe5
 800df72:	d103      	bne.n	800df7c <create_name+0x2e0>
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2205      	movs	r2, #5
 800df78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800df7c:	69fb      	ldr	r3, [r7, #28]
 800df7e:	2b08      	cmp	r3, #8
 800df80:	d104      	bne.n	800df8c <create_name+0x2f0>
 800df82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df86:	009b      	lsls	r3, r3, #2
 800df88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800df8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df90:	f003 030c 	and.w	r3, r3, #12
 800df94:	2b0c      	cmp	r3, #12
 800df96:	d005      	beq.n	800dfa4 <create_name+0x308>
 800df98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df9c:	f003 0303 	and.w	r3, r3, #3
 800dfa0:	2b03      	cmp	r3, #3
 800dfa2:	d105      	bne.n	800dfb0 <create_name+0x314>
 800dfa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfa8:	f043 0302 	orr.w	r3, r3, #2
 800dfac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800dfb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfb4:	f003 0302 	and.w	r3, r3, #2
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d117      	bne.n	800dfec <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800dfbc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dfc0:	f003 0303 	and.w	r3, r3, #3
 800dfc4:	2b01      	cmp	r3, #1
 800dfc6:	d105      	bne.n	800dfd4 <create_name+0x338>
 800dfc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfcc:	f043 0310 	orr.w	r3, r3, #16
 800dfd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800dfd4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dfd8:	f003 030c 	and.w	r3, r3, #12
 800dfdc:	2b04      	cmp	r3, #4
 800dfde:	d105      	bne.n	800dfec <create_name+0x350>
 800dfe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfe4:	f043 0308 	orr.w	r3, r3, #8
 800dfe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800dff2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800dff6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	3728      	adds	r7, #40	; 0x28
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}
 800e000:	08017c04 	.word	0x08017c04
 800e004:	08017cfc 	.word	0x08017cfc
 800e008:	08017c10 	.word	0x08017c10

0800e00c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b086      	sub	sp, #24
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
 800e014:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e01a:	693b      	ldr	r3, [r7, #16]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e020:	e002      	b.n	800e028 <follow_path+0x1c>
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	3301      	adds	r3, #1
 800e026:	603b      	str	r3, [r7, #0]
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	2b2f      	cmp	r3, #47	; 0x2f
 800e02e:	d0f8      	beq.n	800e022 <follow_path+0x16>
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	781b      	ldrb	r3, [r3, #0]
 800e034:	2b5c      	cmp	r3, #92	; 0x5c
 800e036:	d0f4      	beq.n	800e022 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	2200      	movs	r2, #0
 800e03c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	781b      	ldrb	r3, [r3, #0]
 800e042:	2b1f      	cmp	r3, #31
 800e044:	d80a      	bhi.n	800e05c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	2280      	movs	r2, #128	; 0x80
 800e04a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e04e:	2100      	movs	r1, #0
 800e050:	6878      	ldr	r0, [r7, #4]
 800e052:	f7ff f8fb 	bl	800d24c <dir_sdi>
 800e056:	4603      	mov	r3, r0
 800e058:	75fb      	strb	r3, [r7, #23]
 800e05a:	e048      	b.n	800e0ee <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e05c:	463b      	mov	r3, r7
 800e05e:	4619      	mov	r1, r3
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f7ff fe1b 	bl	800dc9c <create_name>
 800e066:	4603      	mov	r3, r0
 800e068:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e06a:	7dfb      	ldrb	r3, [r7, #23]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d139      	bne.n	800e0e4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f7ff fc5a 	bl	800d92a <dir_find>
 800e076:	4603      	mov	r3, r0
 800e078:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e080:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e082:	7dfb      	ldrb	r3, [r7, #23]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d00a      	beq.n	800e09e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e088:	7dfb      	ldrb	r3, [r7, #23]
 800e08a:	2b04      	cmp	r3, #4
 800e08c:	d12c      	bne.n	800e0e8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e08e:	7afb      	ldrb	r3, [r7, #11]
 800e090:	f003 0304 	and.w	r3, r3, #4
 800e094:	2b00      	cmp	r3, #0
 800e096:	d127      	bne.n	800e0e8 <follow_path+0xdc>
 800e098:	2305      	movs	r3, #5
 800e09a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e09c:	e024      	b.n	800e0e8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e09e:	7afb      	ldrb	r3, [r7, #11]
 800e0a0:	f003 0304 	and.w	r3, r3, #4
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d121      	bne.n	800e0ec <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e0a8:	693b      	ldr	r3, [r7, #16]
 800e0aa:	799b      	ldrb	r3, [r3, #6]
 800e0ac:	f003 0310 	and.w	r3, r3, #16
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d102      	bne.n	800e0ba <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e0b4:	2305      	movs	r3, #5
 800e0b6:	75fb      	strb	r3, [r7, #23]
 800e0b8:	e019      	b.n	800e0ee <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	695b      	ldr	r3, [r3, #20]
 800e0c4:	68fa      	ldr	r2, [r7, #12]
 800e0c6:	8992      	ldrh	r2, [r2, #12]
 800e0c8:	fbb3 f0f2 	udiv	r0, r3, r2
 800e0cc:	fb02 f200 	mul.w	r2, r2, r0
 800e0d0:	1a9b      	subs	r3, r3, r2
 800e0d2:	440b      	add	r3, r1
 800e0d4:	4619      	mov	r1, r3
 800e0d6:	68f8      	ldr	r0, [r7, #12]
 800e0d8:	f7ff fa5e 	bl	800d598 <ld_clust>
 800e0dc:	4602      	mov	r2, r0
 800e0de:	693b      	ldr	r3, [r7, #16]
 800e0e0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e0e2:	e7bb      	b.n	800e05c <follow_path+0x50>
			if (res != FR_OK) break;
 800e0e4:	bf00      	nop
 800e0e6:	e002      	b.n	800e0ee <follow_path+0xe2>
				break;
 800e0e8:	bf00      	nop
 800e0ea:	e000      	b.n	800e0ee <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e0ec:	bf00      	nop
			}
		}
	}

	return res;
 800e0ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3718      	adds	r7, #24
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}

0800e0f8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e0f8:	b480      	push	{r7}
 800e0fa:	b087      	sub	sp, #28
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e100:	f04f 33ff 	mov.w	r3, #4294967295
 800e104:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d031      	beq.n	800e172 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	617b      	str	r3, [r7, #20]
 800e114:	e002      	b.n	800e11c <get_ldnumber+0x24>
 800e116:	697b      	ldr	r3, [r7, #20]
 800e118:	3301      	adds	r3, #1
 800e11a:	617b      	str	r3, [r7, #20]
 800e11c:	697b      	ldr	r3, [r7, #20]
 800e11e:	781b      	ldrb	r3, [r3, #0]
 800e120:	2b1f      	cmp	r3, #31
 800e122:	d903      	bls.n	800e12c <get_ldnumber+0x34>
 800e124:	697b      	ldr	r3, [r7, #20]
 800e126:	781b      	ldrb	r3, [r3, #0]
 800e128:	2b3a      	cmp	r3, #58	; 0x3a
 800e12a:	d1f4      	bne.n	800e116 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e12c:	697b      	ldr	r3, [r7, #20]
 800e12e:	781b      	ldrb	r3, [r3, #0]
 800e130:	2b3a      	cmp	r3, #58	; 0x3a
 800e132:	d11c      	bne.n	800e16e <get_ldnumber+0x76>
			tp = *path;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	1c5a      	adds	r2, r3, #1
 800e13e:	60fa      	str	r2, [r7, #12]
 800e140:	781b      	ldrb	r3, [r3, #0]
 800e142:	3b30      	subs	r3, #48	; 0x30
 800e144:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	2b09      	cmp	r3, #9
 800e14a:	d80e      	bhi.n	800e16a <get_ldnumber+0x72>
 800e14c:	68fa      	ldr	r2, [r7, #12]
 800e14e:	697b      	ldr	r3, [r7, #20]
 800e150:	429a      	cmp	r2, r3
 800e152:	d10a      	bne.n	800e16a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d107      	bne.n	800e16a <get_ldnumber+0x72>
					vol = (int)i;
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	3301      	adds	r3, #1
 800e162:	617b      	str	r3, [r7, #20]
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	697a      	ldr	r2, [r7, #20]
 800e168:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e16a:	693b      	ldr	r3, [r7, #16]
 800e16c:	e002      	b.n	800e174 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e16e:	2300      	movs	r3, #0
 800e170:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e172:	693b      	ldr	r3, [r7, #16]
}
 800e174:	4618      	mov	r0, r3
 800e176:	371c      	adds	r7, #28
 800e178:	46bd      	mov	sp, r7
 800e17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17e:	4770      	bx	lr

0800e180 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b082      	sub	sp, #8
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
 800e188:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2200      	movs	r2, #0
 800e18e:	70da      	strb	r2, [r3, #3]
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f04f 32ff 	mov.w	r2, #4294967295
 800e196:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e198:	6839      	ldr	r1, [r7, #0]
 800e19a:	6878      	ldr	r0, [r7, #4]
 800e19c:	f7fe fc74 	bl	800ca88 <move_window>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d001      	beq.n	800e1aa <check_fs+0x2a>
 800e1a6:	2304      	movs	r3, #4
 800e1a8:	e038      	b.n	800e21c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	3338      	adds	r3, #56	; 0x38
 800e1ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f7fe f9b8 	bl	800c528 <ld_word>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	461a      	mov	r2, r3
 800e1bc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d001      	beq.n	800e1c8 <check_fs+0x48>
 800e1c4:	2303      	movs	r3, #3
 800e1c6:	e029      	b.n	800e21c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e1ce:	2be9      	cmp	r3, #233	; 0xe9
 800e1d0:	d009      	beq.n	800e1e6 <check_fs+0x66>
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e1d8:	2beb      	cmp	r3, #235	; 0xeb
 800e1da:	d11e      	bne.n	800e21a <check_fs+0x9a>
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e1e2:	2b90      	cmp	r3, #144	; 0x90
 800e1e4:	d119      	bne.n	800e21a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	3338      	adds	r3, #56	; 0x38
 800e1ea:	3336      	adds	r3, #54	; 0x36
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f7fe f9b3 	bl	800c558 <ld_dword>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e1f8:	4a0a      	ldr	r2, [pc, #40]	; (800e224 <check_fs+0xa4>)
 800e1fa:	4293      	cmp	r3, r2
 800e1fc:	d101      	bne.n	800e202 <check_fs+0x82>
 800e1fe:	2300      	movs	r3, #0
 800e200:	e00c      	b.n	800e21c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	3338      	adds	r3, #56	; 0x38
 800e206:	3352      	adds	r3, #82	; 0x52
 800e208:	4618      	mov	r0, r3
 800e20a:	f7fe f9a5 	bl	800c558 <ld_dword>
 800e20e:	4603      	mov	r3, r0
 800e210:	4a05      	ldr	r2, [pc, #20]	; (800e228 <check_fs+0xa8>)
 800e212:	4293      	cmp	r3, r2
 800e214:	d101      	bne.n	800e21a <check_fs+0x9a>
 800e216:	2300      	movs	r3, #0
 800e218:	e000      	b.n	800e21c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e21a:	2302      	movs	r3, #2
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3708      	adds	r7, #8
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}
 800e224:	00544146 	.word	0x00544146
 800e228:	33544146 	.word	0x33544146

0800e22c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b096      	sub	sp, #88	; 0x58
 800e230:	af00      	add	r7, sp, #0
 800e232:	60f8      	str	r0, [r7, #12]
 800e234:	60b9      	str	r1, [r7, #8]
 800e236:	4613      	mov	r3, r2
 800e238:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e23a:	68bb      	ldr	r3, [r7, #8]
 800e23c:	2200      	movs	r2, #0
 800e23e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e240:	68f8      	ldr	r0, [r7, #12]
 800e242:	f7ff ff59 	bl	800e0f8 <get_ldnumber>
 800e246:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	da01      	bge.n	800e252 <find_volume+0x26>
 800e24e:	230b      	movs	r3, #11
 800e250:	e268      	b.n	800e724 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e252:	4ab0      	ldr	r2, [pc, #704]	; (800e514 <find_volume+0x2e8>)
 800e254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e25a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d101      	bne.n	800e266 <find_volume+0x3a>
 800e262:	230c      	movs	r3, #12
 800e264:	e25e      	b.n	800e724 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e26a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e26c:	79fb      	ldrb	r3, [r7, #7]
 800e26e:	f023 0301 	bic.w	r3, r3, #1
 800e272:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d01a      	beq.n	800e2b2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e27e:	785b      	ldrb	r3, [r3, #1]
 800e280:	4618      	mov	r0, r3
 800e282:	f7fe f8b3 	bl	800c3ec <disk_status>
 800e286:	4603      	mov	r3, r0
 800e288:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e28c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e290:	f003 0301 	and.w	r3, r3, #1
 800e294:	2b00      	cmp	r3, #0
 800e296:	d10c      	bne.n	800e2b2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e298:	79fb      	ldrb	r3, [r7, #7]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d007      	beq.n	800e2ae <find_volume+0x82>
 800e29e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e2a2:	f003 0304 	and.w	r3, r3, #4
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d001      	beq.n	800e2ae <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e2aa:	230a      	movs	r3, #10
 800e2ac:	e23a      	b.n	800e724 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	e238      	b.n	800e724 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e2b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2ba:	b2da      	uxtb	r2, r3
 800e2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2be:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c2:	785b      	ldrb	r3, [r3, #1]
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f7fe f8ab 	bl	800c420 <disk_initialize>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e2d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e2d4:	f003 0301 	and.w	r3, r3, #1
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d001      	beq.n	800e2e0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e2dc:	2303      	movs	r3, #3
 800e2de:	e221      	b.n	800e724 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e2e0:	79fb      	ldrb	r3, [r7, #7]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d007      	beq.n	800e2f6 <find_volume+0xca>
 800e2e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e2ea:	f003 0304 	and.w	r3, r3, #4
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d001      	beq.n	800e2f6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e2f2:	230a      	movs	r3, #10
 800e2f4:	e216      	b.n	800e724 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800e2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2f8:	7858      	ldrb	r0, [r3, #1]
 800e2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2fc:	330c      	adds	r3, #12
 800e2fe:	461a      	mov	r2, r3
 800e300:	2102      	movs	r1, #2
 800e302:	f7fe f8f3 	bl	800c4ec <disk_ioctl>
 800e306:	4603      	mov	r3, r0
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d001      	beq.n	800e310 <find_volume+0xe4>
 800e30c:	2301      	movs	r3, #1
 800e30e:	e209      	b.n	800e724 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800e310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e312:	899b      	ldrh	r3, [r3, #12]
 800e314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e318:	d80d      	bhi.n	800e336 <find_volume+0x10a>
 800e31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e31c:	899b      	ldrh	r3, [r3, #12]
 800e31e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e322:	d308      	bcc.n	800e336 <find_volume+0x10a>
 800e324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e326:	899b      	ldrh	r3, [r3, #12]
 800e328:	461a      	mov	r2, r3
 800e32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e32c:	899b      	ldrh	r3, [r3, #12]
 800e32e:	3b01      	subs	r3, #1
 800e330:	4013      	ands	r3, r2
 800e332:	2b00      	cmp	r3, #0
 800e334:	d001      	beq.n	800e33a <find_volume+0x10e>
 800e336:	2301      	movs	r3, #1
 800e338:	e1f4      	b.n	800e724 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e33a:	2300      	movs	r3, #0
 800e33c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e33e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e340:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e342:	f7ff ff1d 	bl	800e180 <check_fs>
 800e346:	4603      	mov	r3, r0
 800e348:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e34c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e350:	2b02      	cmp	r3, #2
 800e352:	d14b      	bne.n	800e3ec <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e354:	2300      	movs	r3, #0
 800e356:	643b      	str	r3, [r7, #64]	; 0x40
 800e358:	e01f      	b.n	800e39a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e35c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800e360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e362:	011b      	lsls	r3, r3, #4
 800e364:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e368:	4413      	add	r3, r2
 800e36a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e36e:	3304      	adds	r3, #4
 800e370:	781b      	ldrb	r3, [r3, #0]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d006      	beq.n	800e384 <find_volume+0x158>
 800e376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e378:	3308      	adds	r3, #8
 800e37a:	4618      	mov	r0, r3
 800e37c:	f7fe f8ec 	bl	800c558 <ld_dword>
 800e380:	4602      	mov	r2, r0
 800e382:	e000      	b.n	800e386 <find_volume+0x15a>
 800e384:	2200      	movs	r2, #0
 800e386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e388:	009b      	lsls	r3, r3, #2
 800e38a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800e38e:	440b      	add	r3, r1
 800e390:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e396:	3301      	adds	r3, #1
 800e398:	643b      	str	r3, [r7, #64]	; 0x40
 800e39a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e39c:	2b03      	cmp	r3, #3
 800e39e:	d9dc      	bls.n	800e35a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e3a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d002      	beq.n	800e3b0 <find_volume+0x184>
 800e3aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3ac:	3b01      	subs	r3, #1
 800e3ae:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e3b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3b2:	009b      	lsls	r3, r3, #2
 800e3b4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800e3b8:	4413      	add	r3, r2
 800e3ba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e3be:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e3c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d005      	beq.n	800e3d2 <find_volume+0x1a6>
 800e3c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e3c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e3ca:	f7ff fed9 	bl	800e180 <check_fs>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	e000      	b.n	800e3d4 <find_volume+0x1a8>
 800e3d2:	2303      	movs	r3, #3
 800e3d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e3d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e3dc:	2b01      	cmp	r3, #1
 800e3de:	d905      	bls.n	800e3ec <find_volume+0x1c0>
 800e3e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3e2:	3301      	adds	r3, #1
 800e3e4:	643b      	str	r3, [r7, #64]	; 0x40
 800e3e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3e8:	2b03      	cmp	r3, #3
 800e3ea:	d9e1      	bls.n	800e3b0 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e3ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e3f0:	2b04      	cmp	r3, #4
 800e3f2:	d101      	bne.n	800e3f8 <find_volume+0x1cc>
 800e3f4:	2301      	movs	r3, #1
 800e3f6:	e195      	b.n	800e724 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e3f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e3fc:	2b01      	cmp	r3, #1
 800e3fe:	d901      	bls.n	800e404 <find_volume+0x1d8>
 800e400:	230d      	movs	r3, #13
 800e402:	e18f      	b.n	800e724 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e406:	3338      	adds	r3, #56	; 0x38
 800e408:	330b      	adds	r3, #11
 800e40a:	4618      	mov	r0, r3
 800e40c:	f7fe f88c 	bl	800c528 <ld_word>
 800e410:	4603      	mov	r3, r0
 800e412:	461a      	mov	r2, r3
 800e414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e416:	899b      	ldrh	r3, [r3, #12]
 800e418:	429a      	cmp	r2, r3
 800e41a:	d001      	beq.n	800e420 <find_volume+0x1f4>
 800e41c:	230d      	movs	r3, #13
 800e41e:	e181      	b.n	800e724 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e422:	3338      	adds	r3, #56	; 0x38
 800e424:	3316      	adds	r3, #22
 800e426:	4618      	mov	r0, r3
 800e428:	f7fe f87e 	bl	800c528 <ld_word>
 800e42c:	4603      	mov	r3, r0
 800e42e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e432:	2b00      	cmp	r3, #0
 800e434:	d106      	bne.n	800e444 <find_volume+0x218>
 800e436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e438:	3338      	adds	r3, #56	; 0x38
 800e43a:	3324      	adds	r3, #36	; 0x24
 800e43c:	4618      	mov	r0, r3
 800e43e:	f7fe f88b 	bl	800c558 <ld_dword>
 800e442:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e446:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e448:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e44c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800e450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e452:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e456:	789b      	ldrb	r3, [r3, #2]
 800e458:	2b01      	cmp	r3, #1
 800e45a:	d005      	beq.n	800e468 <find_volume+0x23c>
 800e45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e45e:	789b      	ldrb	r3, [r3, #2]
 800e460:	2b02      	cmp	r3, #2
 800e462:	d001      	beq.n	800e468 <find_volume+0x23c>
 800e464:	230d      	movs	r3, #13
 800e466:	e15d      	b.n	800e724 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e46a:	789b      	ldrb	r3, [r3, #2]
 800e46c:	461a      	mov	r2, r3
 800e46e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e470:	fb02 f303 	mul.w	r3, r2, r3
 800e474:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e478:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e47c:	b29a      	uxth	r2, r3
 800e47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e480:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e484:	895b      	ldrh	r3, [r3, #10]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d008      	beq.n	800e49c <find_volume+0x270>
 800e48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e48c:	895b      	ldrh	r3, [r3, #10]
 800e48e:	461a      	mov	r2, r3
 800e490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e492:	895b      	ldrh	r3, [r3, #10]
 800e494:	3b01      	subs	r3, #1
 800e496:	4013      	ands	r3, r2
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d001      	beq.n	800e4a0 <find_volume+0x274>
 800e49c:	230d      	movs	r3, #13
 800e49e:	e141      	b.n	800e724 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4a2:	3338      	adds	r3, #56	; 0x38
 800e4a4:	3311      	adds	r3, #17
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f7fe f83e 	bl	800c528 <ld_word>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	461a      	mov	r2, r3
 800e4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4b2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4b6:	891b      	ldrh	r3, [r3, #8]
 800e4b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e4ba:	8992      	ldrh	r2, [r2, #12]
 800e4bc:	0952      	lsrs	r2, r2, #5
 800e4be:	b292      	uxth	r2, r2
 800e4c0:	fbb3 f1f2 	udiv	r1, r3, r2
 800e4c4:	fb02 f201 	mul.w	r2, r2, r1
 800e4c8:	1a9b      	subs	r3, r3, r2
 800e4ca:	b29b      	uxth	r3, r3
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d001      	beq.n	800e4d4 <find_volume+0x2a8>
 800e4d0:	230d      	movs	r3, #13
 800e4d2:	e127      	b.n	800e724 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4d6:	3338      	adds	r3, #56	; 0x38
 800e4d8:	3313      	adds	r3, #19
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f7fe f824 	bl	800c528 <ld_word>
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e4e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d106      	bne.n	800e4f8 <find_volume+0x2cc>
 800e4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ec:	3338      	adds	r3, #56	; 0x38
 800e4ee:	3320      	adds	r3, #32
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f7fe f831 	bl	800c558 <ld_dword>
 800e4f6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4fa:	3338      	adds	r3, #56	; 0x38
 800e4fc:	330e      	adds	r3, #14
 800e4fe:	4618      	mov	r0, r3
 800e500:	f7fe f812 	bl	800c528 <ld_word>
 800e504:	4603      	mov	r3, r0
 800e506:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e508:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d104      	bne.n	800e518 <find_volume+0x2ec>
 800e50e:	230d      	movs	r3, #13
 800e510:	e108      	b.n	800e724 <find_volume+0x4f8>
 800e512:	bf00      	nop
 800e514:	200022dc 	.word	0x200022dc

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e518:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e51a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e51c:	4413      	add	r3, r2
 800e51e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e520:	8911      	ldrh	r1, [r2, #8]
 800e522:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e524:	8992      	ldrh	r2, [r2, #12]
 800e526:	0952      	lsrs	r2, r2, #5
 800e528:	b292      	uxth	r2, r2
 800e52a:	fbb1 f2f2 	udiv	r2, r1, r2
 800e52e:	b292      	uxth	r2, r2
 800e530:	4413      	add	r3, r2
 800e532:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e534:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e538:	429a      	cmp	r2, r3
 800e53a:	d201      	bcs.n	800e540 <find_volume+0x314>
 800e53c:	230d      	movs	r3, #13
 800e53e:	e0f1      	b.n	800e724 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e540:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e544:	1ad3      	subs	r3, r2, r3
 800e546:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e548:	8952      	ldrh	r2, [r2, #10]
 800e54a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e54e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e552:	2b00      	cmp	r3, #0
 800e554:	d101      	bne.n	800e55a <find_volume+0x32e>
 800e556:	230d      	movs	r3, #13
 800e558:	e0e4      	b.n	800e724 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800e55a:	2303      	movs	r3, #3
 800e55c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e562:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e566:	4293      	cmp	r3, r2
 800e568:	d802      	bhi.n	800e570 <find_volume+0x344>
 800e56a:	2302      	movs	r3, #2
 800e56c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e572:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e576:	4293      	cmp	r3, r2
 800e578:	d802      	bhi.n	800e580 <find_volume+0x354>
 800e57a:	2301      	movs	r3, #1
 800e57c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e582:	1c9a      	adds	r2, r3, #2
 800e584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e586:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800e588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e58a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e58c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e58e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e592:	441a      	add	r2, r3
 800e594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e596:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800e598:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e59c:	441a      	add	r2, r3
 800e59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5a0:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800e5a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e5a6:	2b03      	cmp	r3, #3
 800e5a8:	d11e      	bne.n	800e5e8 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ac:	3338      	adds	r3, #56	; 0x38
 800e5ae:	332a      	adds	r3, #42	; 0x2a
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f7fd ffb9 	bl	800c528 <ld_word>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d001      	beq.n	800e5c0 <find_volume+0x394>
 800e5bc:	230d      	movs	r3, #13
 800e5be:	e0b1      	b.n	800e724 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5c2:	891b      	ldrh	r3, [r3, #8]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d001      	beq.n	800e5cc <find_volume+0x3a0>
 800e5c8:	230d      	movs	r3, #13
 800e5ca:	e0ab      	b.n	800e724 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ce:	3338      	adds	r3, #56	; 0x38
 800e5d0:	332c      	adds	r3, #44	; 0x2c
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f7fd ffc0 	bl	800c558 <ld_dword>
 800e5d8:	4602      	mov	r2, r0
 800e5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5dc:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e0:	69db      	ldr	r3, [r3, #28]
 800e5e2:	009b      	lsls	r3, r3, #2
 800e5e4:	647b      	str	r3, [r7, #68]	; 0x44
 800e5e6:	e01f      	b.n	800e628 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ea:	891b      	ldrh	r3, [r3, #8]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d101      	bne.n	800e5f4 <find_volume+0x3c8>
 800e5f0:	230d      	movs	r3, #13
 800e5f2:	e097      	b.n	800e724 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e5f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5fa:	441a      	add	r2, r3
 800e5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5fe:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e600:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e604:	2b02      	cmp	r3, #2
 800e606:	d103      	bne.n	800e610 <find_volume+0x3e4>
 800e608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e60a:	69db      	ldr	r3, [r3, #28]
 800e60c:	005b      	lsls	r3, r3, #1
 800e60e:	e00a      	b.n	800e626 <find_volume+0x3fa>
 800e610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e612:	69da      	ldr	r2, [r3, #28]
 800e614:	4613      	mov	r3, r2
 800e616:	005b      	lsls	r3, r3, #1
 800e618:	4413      	add	r3, r2
 800e61a:	085a      	lsrs	r2, r3, #1
 800e61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e61e:	69db      	ldr	r3, [r3, #28]
 800e620:	f003 0301 	and.w	r3, r3, #1
 800e624:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e626:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e62a:	6a1a      	ldr	r2, [r3, #32]
 800e62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e62e:	899b      	ldrh	r3, [r3, #12]
 800e630:	4619      	mov	r1, r3
 800e632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e634:	440b      	add	r3, r1
 800e636:	3b01      	subs	r3, #1
 800e638:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e63a:	8989      	ldrh	r1, [r1, #12]
 800e63c:	fbb3 f3f1 	udiv	r3, r3, r1
 800e640:	429a      	cmp	r2, r3
 800e642:	d201      	bcs.n	800e648 <find_volume+0x41c>
 800e644:	230d      	movs	r3, #13
 800e646:	e06d      	b.n	800e724 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e64a:	f04f 32ff 	mov.w	r2, #4294967295
 800e64e:	619a      	str	r2, [r3, #24]
 800e650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e652:	699a      	ldr	r2, [r3, #24]
 800e654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e656:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800e658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e65a:	2280      	movs	r2, #128	; 0x80
 800e65c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e65e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e662:	2b03      	cmp	r3, #3
 800e664:	d149      	bne.n	800e6fa <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e668:	3338      	adds	r3, #56	; 0x38
 800e66a:	3330      	adds	r3, #48	; 0x30
 800e66c:	4618      	mov	r0, r3
 800e66e:	f7fd ff5b 	bl	800c528 <ld_word>
 800e672:	4603      	mov	r3, r0
 800e674:	2b01      	cmp	r3, #1
 800e676:	d140      	bne.n	800e6fa <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e67a:	3301      	adds	r3, #1
 800e67c:	4619      	mov	r1, r3
 800e67e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e680:	f7fe fa02 	bl	800ca88 <move_window>
 800e684:	4603      	mov	r3, r0
 800e686:	2b00      	cmp	r3, #0
 800e688:	d137      	bne.n	800e6fa <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800e68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e68c:	2200      	movs	r2, #0
 800e68e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e692:	3338      	adds	r3, #56	; 0x38
 800e694:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e698:	4618      	mov	r0, r3
 800e69a:	f7fd ff45 	bl	800c528 <ld_word>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	461a      	mov	r2, r3
 800e6a2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	d127      	bne.n	800e6fa <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ac:	3338      	adds	r3, #56	; 0x38
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	f7fd ff52 	bl	800c558 <ld_dword>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	4a1d      	ldr	r2, [pc, #116]	; (800e72c <find_volume+0x500>)
 800e6b8:	4293      	cmp	r3, r2
 800e6ba:	d11e      	bne.n	800e6fa <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6be:	3338      	adds	r3, #56	; 0x38
 800e6c0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f7fd ff47 	bl	800c558 <ld_dword>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	4a18      	ldr	r2, [pc, #96]	; (800e730 <find_volume+0x504>)
 800e6ce:	4293      	cmp	r3, r2
 800e6d0:	d113      	bne.n	800e6fa <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d4:	3338      	adds	r3, #56	; 0x38
 800e6d6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f7fd ff3c 	bl	800c558 <ld_dword>
 800e6e0:	4602      	mov	r2, r0
 800e6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e4:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e8:	3338      	adds	r3, #56	; 0x38
 800e6ea:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	f7fd ff32 	bl	800c558 <ld_dword>
 800e6f4:	4602      	mov	r2, r0
 800e6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f8:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6fc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e700:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e702:	4b0c      	ldr	r3, [pc, #48]	; (800e734 <find_volume+0x508>)
 800e704:	881b      	ldrh	r3, [r3, #0]
 800e706:	3301      	adds	r3, #1
 800e708:	b29a      	uxth	r2, r3
 800e70a:	4b0a      	ldr	r3, [pc, #40]	; (800e734 <find_volume+0x508>)
 800e70c:	801a      	strh	r2, [r3, #0]
 800e70e:	4b09      	ldr	r3, [pc, #36]	; (800e734 <find_volume+0x508>)
 800e710:	881a      	ldrh	r2, [r3, #0]
 800e712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e714:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800e716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e718:	4a07      	ldr	r2, [pc, #28]	; (800e738 <find_volume+0x50c>)
 800e71a:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e71c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e71e:	f7fe f94b 	bl	800c9b8 <clear_lock>
#endif
	return FR_OK;
 800e722:	2300      	movs	r3, #0
}
 800e724:	4618      	mov	r0, r3
 800e726:	3758      	adds	r7, #88	; 0x58
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd80      	pop	{r7, pc}
 800e72c:	41615252 	.word	0x41615252
 800e730:	61417272 	.word	0x61417272
 800e734:	200022e0 	.word	0x200022e0
 800e738:	20002304 	.word	0x20002304

0800e73c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b084      	sub	sp, #16
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
 800e744:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e746:	2309      	movs	r3, #9
 800e748:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d01c      	beq.n	800e78a <validate+0x4e>
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d018      	beq.n	800e78a <validate+0x4e>
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	781b      	ldrb	r3, [r3, #0]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d013      	beq.n	800e78a <validate+0x4e>
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	889a      	ldrh	r2, [r3, #4]
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	88db      	ldrh	r3, [r3, #6]
 800e76c:	429a      	cmp	r2, r3
 800e76e:	d10c      	bne.n	800e78a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	785b      	ldrb	r3, [r3, #1]
 800e776:	4618      	mov	r0, r3
 800e778:	f7fd fe38 	bl	800c3ec <disk_status>
 800e77c:	4603      	mov	r3, r0
 800e77e:	f003 0301 	and.w	r3, r3, #1
 800e782:	2b00      	cmp	r3, #0
 800e784:	d101      	bne.n	800e78a <validate+0x4e>
			res = FR_OK;
 800e786:	2300      	movs	r3, #0
 800e788:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e78a:	7bfb      	ldrb	r3, [r7, #15]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d102      	bne.n	800e796 <validate+0x5a>
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	e000      	b.n	800e798 <validate+0x5c>
 800e796:	2300      	movs	r3, #0
 800e798:	683a      	ldr	r2, [r7, #0]
 800e79a:	6013      	str	r3, [r2, #0]
	return res;
 800e79c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e79e:	4618      	mov	r0, r3
 800e7a0:	3710      	adds	r7, #16
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}
	...

0800e7a8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b088      	sub	sp, #32
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	60f8      	str	r0, [r7, #12]
 800e7b0:	60b9      	str	r1, [r7, #8]
 800e7b2:	4613      	mov	r3, r2
 800e7b4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e7ba:	f107 0310 	add.w	r3, r7, #16
 800e7be:	4618      	mov	r0, r3
 800e7c0:	f7ff fc9a 	bl	800e0f8 <get_ldnumber>
 800e7c4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e7c6:	69fb      	ldr	r3, [r7, #28]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	da01      	bge.n	800e7d0 <f_mount+0x28>
 800e7cc:	230b      	movs	r3, #11
 800e7ce:	e02b      	b.n	800e828 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e7d0:	4a17      	ldr	r2, [pc, #92]	; (800e830 <f_mount+0x88>)
 800e7d2:	69fb      	ldr	r3, [r7, #28]
 800e7d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7d8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e7da:	69bb      	ldr	r3, [r7, #24]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d005      	beq.n	800e7ec <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e7e0:	69b8      	ldr	r0, [r7, #24]
 800e7e2:	f7fe f8e9 	bl	800c9b8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e7e6:	69bb      	ldr	r3, [r7, #24]
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d002      	beq.n	800e7f8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e7f8:	68fa      	ldr	r2, [r7, #12]
 800e7fa:	490d      	ldr	r1, [pc, #52]	; (800e830 <f_mount+0x88>)
 800e7fc:	69fb      	ldr	r3, [r7, #28]
 800e7fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d002      	beq.n	800e80e <f_mount+0x66>
 800e808:	79fb      	ldrb	r3, [r7, #7]
 800e80a:	2b01      	cmp	r3, #1
 800e80c:	d001      	beq.n	800e812 <f_mount+0x6a>
 800e80e:	2300      	movs	r3, #0
 800e810:	e00a      	b.n	800e828 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e812:	f107 010c 	add.w	r1, r7, #12
 800e816:	f107 0308 	add.w	r3, r7, #8
 800e81a:	2200      	movs	r2, #0
 800e81c:	4618      	mov	r0, r3
 800e81e:	f7ff fd05 	bl	800e22c <find_volume>
 800e822:	4603      	mov	r3, r0
 800e824:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e826:	7dfb      	ldrb	r3, [r7, #23]
}
 800e828:	4618      	mov	r0, r3
 800e82a:	3720      	adds	r7, #32
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bd80      	pop	{r7, pc}
 800e830:	200022dc 	.word	0x200022dc

0800e834 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b09a      	sub	sp, #104	; 0x68
 800e838:	af00      	add	r7, sp, #0
 800e83a:	60f8      	str	r0, [r7, #12]
 800e83c:	60b9      	str	r1, [r7, #8]
 800e83e:	4613      	mov	r3, r2
 800e840:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d101      	bne.n	800e84c <f_open+0x18>
 800e848:	2309      	movs	r3, #9
 800e84a:	e1bb      	b.n	800ebc4 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e84c:	79fb      	ldrb	r3, [r7, #7]
 800e84e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e852:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e854:	79fa      	ldrb	r2, [r7, #7]
 800e856:	f107 0114 	add.w	r1, r7, #20
 800e85a:	f107 0308 	add.w	r3, r7, #8
 800e85e:	4618      	mov	r0, r3
 800e860:	f7ff fce4 	bl	800e22c <find_volume>
 800e864:	4603      	mov	r3, r0
 800e866:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800e86a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e86e:	2b00      	cmp	r3, #0
 800e870:	f040 819f 	bne.w	800ebb2 <f_open+0x37e>
		dj.obj.fs = fs;
 800e874:	697b      	ldr	r3, [r7, #20]
 800e876:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e878:	68ba      	ldr	r2, [r7, #8]
 800e87a:	f107 0318 	add.w	r3, r7, #24
 800e87e:	4611      	mov	r1, r2
 800e880:	4618      	mov	r0, r3
 800e882:	f7ff fbc3 	bl	800e00c <follow_path>
 800e886:	4603      	mov	r3, r0
 800e888:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e88c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e890:	2b00      	cmp	r3, #0
 800e892:	d11a      	bne.n	800e8ca <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e894:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e898:	b25b      	sxtb	r3, r3
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	da03      	bge.n	800e8a6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e89e:	2306      	movs	r3, #6
 800e8a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e8a4:	e011      	b.n	800e8ca <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e8a6:	79fb      	ldrb	r3, [r7, #7]
 800e8a8:	f023 0301 	bic.w	r3, r3, #1
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	bf14      	ite	ne
 800e8b0:	2301      	movne	r3, #1
 800e8b2:	2300      	moveq	r3, #0
 800e8b4:	b2db      	uxtb	r3, r3
 800e8b6:	461a      	mov	r2, r3
 800e8b8:	f107 0318 	add.w	r3, r7, #24
 800e8bc:	4611      	mov	r1, r2
 800e8be:	4618      	mov	r0, r3
 800e8c0:	f7fd ff32 	bl	800c728 <chk_lock>
 800e8c4:	4603      	mov	r3, r0
 800e8c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e8ca:	79fb      	ldrb	r3, [r7, #7]
 800e8cc:	f003 031c 	and.w	r3, r3, #28
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d07f      	beq.n	800e9d4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e8d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d017      	beq.n	800e90c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e8dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e8e0:	2b04      	cmp	r3, #4
 800e8e2:	d10e      	bne.n	800e902 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e8e4:	f7fd ff7c 	bl	800c7e0 <enq_lock>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d006      	beq.n	800e8fc <f_open+0xc8>
 800e8ee:	f107 0318 	add.w	r3, r7, #24
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f7ff f8da 	bl	800daac <dir_register>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	e000      	b.n	800e8fe <f_open+0xca>
 800e8fc:	2312      	movs	r3, #18
 800e8fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e902:	79fb      	ldrb	r3, [r7, #7]
 800e904:	f043 0308 	orr.w	r3, r3, #8
 800e908:	71fb      	strb	r3, [r7, #7]
 800e90a:	e010      	b.n	800e92e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e90c:	7fbb      	ldrb	r3, [r7, #30]
 800e90e:	f003 0311 	and.w	r3, r3, #17
 800e912:	2b00      	cmp	r3, #0
 800e914:	d003      	beq.n	800e91e <f_open+0xea>
					res = FR_DENIED;
 800e916:	2307      	movs	r3, #7
 800e918:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e91c:	e007      	b.n	800e92e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e91e:	79fb      	ldrb	r3, [r7, #7]
 800e920:	f003 0304 	and.w	r3, r3, #4
 800e924:	2b00      	cmp	r3, #0
 800e926:	d002      	beq.n	800e92e <f_open+0xfa>
 800e928:	2308      	movs	r3, #8
 800e92a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e92e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e932:	2b00      	cmp	r3, #0
 800e934:	d168      	bne.n	800ea08 <f_open+0x1d4>
 800e936:	79fb      	ldrb	r3, [r7, #7]
 800e938:	f003 0308 	and.w	r3, r3, #8
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d063      	beq.n	800ea08 <f_open+0x1d4>
				dw = GET_FATTIME();
 800e940:	f7fd fbe8 	bl	800c114 <get_fattime>
 800e944:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e948:	330e      	adds	r3, #14
 800e94a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e94c:	4618      	mov	r0, r3
 800e94e:	f7fd fe41 	bl	800c5d4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e954:	3316      	adds	r3, #22
 800e956:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e958:	4618      	mov	r0, r3
 800e95a:	f7fd fe3b 	bl	800c5d4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e960:	330b      	adds	r3, #11
 800e962:	2220      	movs	r2, #32
 800e964:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e96a:	4611      	mov	r1, r2
 800e96c:	4618      	mov	r0, r3
 800e96e:	f7fe fe13 	bl	800d598 <ld_clust>
 800e972:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e974:	697b      	ldr	r3, [r7, #20]
 800e976:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e978:	2200      	movs	r2, #0
 800e97a:	4618      	mov	r0, r3
 800e97c:	f7fe fe2b 	bl	800d5d6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e982:	331c      	adds	r3, #28
 800e984:	2100      	movs	r1, #0
 800e986:	4618      	mov	r0, r3
 800e988:	f7fd fe24 	bl	800c5d4 <st_dword>
					fs->wflag = 1;
 800e98c:	697b      	ldr	r3, [r7, #20]
 800e98e:	2201      	movs	r2, #1
 800e990:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e994:	2b00      	cmp	r3, #0
 800e996:	d037      	beq.n	800ea08 <f_open+0x1d4>
						dw = fs->winsect;
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e99c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800e99e:	f107 0318 	add.w	r3, r7, #24
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f7fe fb1b 	bl	800cfe2 <remove_chain>
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800e9b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d126      	bne.n	800ea08 <f_open+0x1d4>
							res = move_window(fs, dw);
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f7fe f862 	bl	800ca88 <move_window>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e9ca:	697b      	ldr	r3, [r7, #20]
 800e9cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e9ce:	3a01      	subs	r2, #1
 800e9d0:	615a      	str	r2, [r3, #20]
 800e9d2:	e019      	b.n	800ea08 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e9d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d115      	bne.n	800ea08 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e9dc:	7fbb      	ldrb	r3, [r7, #30]
 800e9de:	f003 0310 	and.w	r3, r3, #16
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d003      	beq.n	800e9ee <f_open+0x1ba>
					res = FR_NO_FILE;
 800e9e6:	2304      	movs	r3, #4
 800e9e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e9ec:	e00c      	b.n	800ea08 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e9ee:	79fb      	ldrb	r3, [r7, #7]
 800e9f0:	f003 0302 	and.w	r3, r3, #2
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d007      	beq.n	800ea08 <f_open+0x1d4>
 800e9f8:	7fbb      	ldrb	r3, [r7, #30]
 800e9fa:	f003 0301 	and.w	r3, r3, #1
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d002      	beq.n	800ea08 <f_open+0x1d4>
						res = FR_DENIED;
 800ea02:	2307      	movs	r3, #7
 800ea04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800ea08:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d128      	bne.n	800ea62 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ea10:	79fb      	ldrb	r3, [r7, #7]
 800ea12:	f003 0308 	and.w	r3, r3, #8
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d003      	beq.n	800ea22 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ea1a:	79fb      	ldrb	r3, [r7, #7]
 800ea1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea20:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ea2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ea30:	79fb      	ldrb	r3, [r7, #7]
 800ea32:	f023 0301 	bic.w	r3, r3, #1
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	bf14      	ite	ne
 800ea3a:	2301      	movne	r3, #1
 800ea3c:	2300      	moveq	r3, #0
 800ea3e:	b2db      	uxtb	r3, r3
 800ea40:	461a      	mov	r2, r3
 800ea42:	f107 0318 	add.w	r3, r7, #24
 800ea46:	4611      	mov	r1, r2
 800ea48:	4618      	mov	r0, r3
 800ea4a:	f7fd feeb 	bl	800c824 <inc_lock>
 800ea4e:	4602      	mov	r2, r0
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	691b      	ldr	r3, [r3, #16]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d102      	bne.n	800ea62 <f_open+0x22e>
 800ea5c:	2302      	movs	r3, #2
 800ea5e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ea62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	f040 80a3 	bne.w	800ebb2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ea6c:	697b      	ldr	r3, [r7, #20]
 800ea6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea70:	4611      	mov	r1, r2
 800ea72:	4618      	mov	r0, r3
 800ea74:	f7fe fd90 	bl	800d598 <ld_clust>
 800ea78:	4602      	mov	r2, r0
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ea7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea80:	331c      	adds	r3, #28
 800ea82:	4618      	mov	r0, r3
 800ea84:	f7fd fd68 	bl	800c558 <ld_dword>
 800ea88:	4602      	mov	r2, r0
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	2200      	movs	r2, #0
 800ea92:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ea94:	697a      	ldr	r2, [r7, #20]
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ea9a:	697b      	ldr	r3, [r7, #20]
 800ea9c:	88da      	ldrh	r2, [r3, #6]
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	79fa      	ldrb	r2, [r7, #7]
 800eaa6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	2200      	movs	r2, #0
 800eab2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	2200      	movs	r2, #0
 800eab8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	3330      	adds	r3, #48	; 0x30
 800eabe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800eac2:	2100      	movs	r1, #0
 800eac4:	4618      	mov	r0, r3
 800eac6:	f7fd fdd2 	bl	800c66e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800eaca:	79fb      	ldrb	r3, [r7, #7]
 800eacc:	f003 0320 	and.w	r3, r3, #32
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d06e      	beq.n	800ebb2 <f_open+0x37e>
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	68db      	ldr	r3, [r3, #12]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d06a      	beq.n	800ebb2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	68da      	ldr	r2, [r3, #12]
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800eae4:	697b      	ldr	r3, [r7, #20]
 800eae6:	895b      	ldrh	r3, [r3, #10]
 800eae8:	461a      	mov	r2, r3
 800eaea:	697b      	ldr	r3, [r7, #20]
 800eaec:	899b      	ldrh	r3, [r3, #12]
 800eaee:	fb03 f302 	mul.w	r3, r3, r2
 800eaf2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	689b      	ldr	r3, [r3, #8]
 800eaf8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	68db      	ldr	r3, [r3, #12]
 800eafe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eb00:	e016      	b.n	800eb30 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800eb06:	4618      	mov	r0, r3
 800eb08:	f7fe f87b 	bl	800cc02 <get_fat>
 800eb0c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800eb0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eb10:	2b01      	cmp	r3, #1
 800eb12:	d802      	bhi.n	800eb1a <f_open+0x2e6>
 800eb14:	2302      	movs	r3, #2
 800eb16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800eb1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eb1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb20:	d102      	bne.n	800eb28 <f_open+0x2f4>
 800eb22:	2301      	movs	r3, #1
 800eb24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800eb28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800eb2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb2c:	1ad3      	subs	r3, r2, r3
 800eb2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eb30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d103      	bne.n	800eb40 <f_open+0x30c>
 800eb38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800eb3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb3c:	429a      	cmp	r2, r3
 800eb3e:	d8e0      	bhi.n	800eb02 <f_open+0x2ce>
				}
				fp->clust = clst;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eb44:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800eb46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d131      	bne.n	800ebb2 <f_open+0x37e>
 800eb4e:	697b      	ldr	r3, [r7, #20]
 800eb50:	899b      	ldrh	r3, [r3, #12]
 800eb52:	461a      	mov	r2, r3
 800eb54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb56:	fbb3 f1f2 	udiv	r1, r3, r2
 800eb5a:	fb02 f201 	mul.w	r2, r2, r1
 800eb5e:	1a9b      	subs	r3, r3, r2
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d026      	beq.n	800ebb2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800eb64:	697b      	ldr	r3, [r7, #20]
 800eb66:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800eb68:	4618      	mov	r0, r3
 800eb6a:	f7fe f82b 	bl	800cbc4 <clust2sect>
 800eb6e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800eb70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d103      	bne.n	800eb7e <f_open+0x34a>
						res = FR_INT_ERR;
 800eb76:	2302      	movs	r3, #2
 800eb78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800eb7c:	e019      	b.n	800ebb2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800eb7e:	697b      	ldr	r3, [r7, #20]
 800eb80:	899b      	ldrh	r3, [r3, #12]
 800eb82:	461a      	mov	r2, r3
 800eb84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb86:	fbb3 f2f2 	udiv	r2, r3, r2
 800eb8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb8c:	441a      	add	r2, r3
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800eb92:	697b      	ldr	r3, [r7, #20]
 800eb94:	7858      	ldrb	r0, [r3, #1]
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	6a1a      	ldr	r2, [r3, #32]
 800eba0:	2301      	movs	r3, #1
 800eba2:	f7fd fc63 	bl	800c46c <disk_read>
 800eba6:	4603      	mov	r3, r0
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d002      	beq.n	800ebb2 <f_open+0x37e>
 800ebac:	2301      	movs	r3, #1
 800ebae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ebb2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d002      	beq.n	800ebc0 <f_open+0x38c>
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ebc0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	3768      	adds	r7, #104	; 0x68
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd80      	pop	{r7, pc}

0800ebcc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b08c      	sub	sp, #48	; 0x30
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	60f8      	str	r0, [r7, #12]
 800ebd4:	60b9      	str	r1, [r7, #8]
 800ebd6:	607a      	str	r2, [r7, #4]
 800ebd8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	f107 0210 	add.w	r2, r7, #16
 800ebea:	4611      	mov	r1, r2
 800ebec:	4618      	mov	r0, r3
 800ebee:	f7ff fda5 	bl	800e73c <validate>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ebf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d107      	bne.n	800ec10 <f_write+0x44>
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	7d5b      	ldrb	r3, [r3, #21]
 800ec04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ec08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d002      	beq.n	800ec16 <f_write+0x4a>
 800ec10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec14:	e16a      	b.n	800eeec <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	7d1b      	ldrb	r3, [r3, #20]
 800ec1a:	f003 0302 	and.w	r3, r3, #2
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d101      	bne.n	800ec26 <f_write+0x5a>
 800ec22:	2307      	movs	r3, #7
 800ec24:	e162      	b.n	800eeec <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	699a      	ldr	r2, [r3, #24]
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	441a      	add	r2, r3
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	699b      	ldr	r3, [r3, #24]
 800ec32:	429a      	cmp	r2, r3
 800ec34:	f080 814c 	bcs.w	800eed0 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	699b      	ldr	r3, [r3, #24]
 800ec3c:	43db      	mvns	r3, r3
 800ec3e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ec40:	e146      	b.n	800eed0 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	699b      	ldr	r3, [r3, #24]
 800ec46:	693a      	ldr	r2, [r7, #16]
 800ec48:	8992      	ldrh	r2, [r2, #12]
 800ec4a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ec4e:	fb02 f201 	mul.w	r2, r2, r1
 800ec52:	1a9b      	subs	r3, r3, r2
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	f040 80f1 	bne.w	800ee3c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	699b      	ldr	r3, [r3, #24]
 800ec5e:	693a      	ldr	r2, [r7, #16]
 800ec60:	8992      	ldrh	r2, [r2, #12]
 800ec62:	fbb3 f3f2 	udiv	r3, r3, r2
 800ec66:	693a      	ldr	r2, [r7, #16]
 800ec68:	8952      	ldrh	r2, [r2, #10]
 800ec6a:	3a01      	subs	r2, #1
 800ec6c:	4013      	ands	r3, r2
 800ec6e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ec70:	69bb      	ldr	r3, [r7, #24]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d143      	bne.n	800ecfe <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	699b      	ldr	r3, [r3, #24]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d10c      	bne.n	800ec98 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	689b      	ldr	r3, [r3, #8]
 800ec82:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ec84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d11a      	bne.n	800ecc0 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	2100      	movs	r1, #0
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f7fe fa0c 	bl	800d0ac <create_chain>
 800ec94:	62b8      	str	r0, [r7, #40]	; 0x28
 800ec96:	e013      	b.n	800ecc0 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d007      	beq.n	800ecb0 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	699b      	ldr	r3, [r3, #24]
 800eca4:	4619      	mov	r1, r3
 800eca6:	68f8      	ldr	r0, [r7, #12]
 800eca8:	f7fe fa98 	bl	800d1dc <clmt_clust>
 800ecac:	62b8      	str	r0, [r7, #40]	; 0x28
 800ecae:	e007      	b.n	800ecc0 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ecb0:	68fa      	ldr	r2, [r7, #12]
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	69db      	ldr	r3, [r3, #28]
 800ecb6:	4619      	mov	r1, r3
 800ecb8:	4610      	mov	r0, r2
 800ecba:	f7fe f9f7 	bl	800d0ac <create_chain>
 800ecbe:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ecc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	f000 8109 	beq.w	800eeda <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ecc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecca:	2b01      	cmp	r3, #1
 800eccc:	d104      	bne.n	800ecd8 <f_write+0x10c>
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	2202      	movs	r2, #2
 800ecd2:	755a      	strb	r2, [r3, #21]
 800ecd4:	2302      	movs	r3, #2
 800ecd6:	e109      	b.n	800eeec <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ecd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecde:	d104      	bne.n	800ecea <f_write+0x11e>
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	2201      	movs	r2, #1
 800ece4:	755a      	strb	r2, [r3, #21]
 800ece6:	2301      	movs	r3, #1
 800ece8:	e100      	b.n	800eeec <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ecee:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	689b      	ldr	r3, [r3, #8]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d102      	bne.n	800ecfe <f_write+0x132>
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ecfc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	7d1b      	ldrb	r3, [r3, #20]
 800ed02:	b25b      	sxtb	r3, r3
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	da18      	bge.n	800ed3a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ed08:	693b      	ldr	r3, [r7, #16]
 800ed0a:	7858      	ldrb	r0, [r3, #1]
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	6a1a      	ldr	r2, [r3, #32]
 800ed16:	2301      	movs	r3, #1
 800ed18:	f7fd fbc8 	bl	800c4ac <disk_write>
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d004      	beq.n	800ed2c <f_write+0x160>
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	2201      	movs	r2, #1
 800ed26:	755a      	strb	r2, [r3, #21]
 800ed28:	2301      	movs	r3, #1
 800ed2a:	e0df      	b.n	800eeec <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	7d1b      	ldrb	r3, [r3, #20]
 800ed30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed34:	b2da      	uxtb	r2, r3
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ed3a:	693a      	ldr	r2, [r7, #16]
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	69db      	ldr	r3, [r3, #28]
 800ed40:	4619      	mov	r1, r3
 800ed42:	4610      	mov	r0, r2
 800ed44:	f7fd ff3e 	bl	800cbc4 <clust2sect>
 800ed48:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d104      	bne.n	800ed5a <f_write+0x18e>
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	2202      	movs	r2, #2
 800ed54:	755a      	strb	r2, [r3, #21]
 800ed56:	2302      	movs	r3, #2
 800ed58:	e0c8      	b.n	800eeec <f_write+0x320>
			sect += csect;
 800ed5a:	697a      	ldr	r2, [r7, #20]
 800ed5c:	69bb      	ldr	r3, [r7, #24]
 800ed5e:	4413      	add	r3, r2
 800ed60:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	899b      	ldrh	r3, [r3, #12]
 800ed66:	461a      	mov	r2, r3
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ed6e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ed70:	6a3b      	ldr	r3, [r7, #32]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d043      	beq.n	800edfe <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ed76:	69ba      	ldr	r2, [r7, #24]
 800ed78:	6a3b      	ldr	r3, [r7, #32]
 800ed7a:	4413      	add	r3, r2
 800ed7c:	693a      	ldr	r2, [r7, #16]
 800ed7e:	8952      	ldrh	r2, [r2, #10]
 800ed80:	4293      	cmp	r3, r2
 800ed82:	d905      	bls.n	800ed90 <f_write+0x1c4>
					cc = fs->csize - csect;
 800ed84:	693b      	ldr	r3, [r7, #16]
 800ed86:	895b      	ldrh	r3, [r3, #10]
 800ed88:	461a      	mov	r2, r3
 800ed8a:	69bb      	ldr	r3, [r7, #24]
 800ed8c:	1ad3      	subs	r3, r2, r3
 800ed8e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	7858      	ldrb	r0, [r3, #1]
 800ed94:	6a3b      	ldr	r3, [r7, #32]
 800ed96:	697a      	ldr	r2, [r7, #20]
 800ed98:	69f9      	ldr	r1, [r7, #28]
 800ed9a:	f7fd fb87 	bl	800c4ac <disk_write>
 800ed9e:	4603      	mov	r3, r0
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d004      	beq.n	800edae <f_write+0x1e2>
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	2201      	movs	r2, #1
 800eda8:	755a      	strb	r2, [r3, #21]
 800edaa:	2301      	movs	r3, #1
 800edac:	e09e      	b.n	800eeec <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	6a1a      	ldr	r2, [r3, #32]
 800edb2:	697b      	ldr	r3, [r7, #20]
 800edb4:	1ad3      	subs	r3, r2, r3
 800edb6:	6a3a      	ldr	r2, [r7, #32]
 800edb8:	429a      	cmp	r2, r3
 800edba:	d918      	bls.n	800edee <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	6a1a      	ldr	r2, [r3, #32]
 800edc6:	697b      	ldr	r3, [r7, #20]
 800edc8:	1ad3      	subs	r3, r2, r3
 800edca:	693a      	ldr	r2, [r7, #16]
 800edcc:	8992      	ldrh	r2, [r2, #12]
 800edce:	fb02 f303 	mul.w	r3, r2, r3
 800edd2:	69fa      	ldr	r2, [r7, #28]
 800edd4:	18d1      	adds	r1, r2, r3
 800edd6:	693b      	ldr	r3, [r7, #16]
 800edd8:	899b      	ldrh	r3, [r3, #12]
 800edda:	461a      	mov	r2, r3
 800eddc:	f7fd fc26 	bl	800c62c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	7d1b      	ldrb	r3, [r3, #20]
 800ede4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ede8:	b2da      	uxtb	r2, r3
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800edee:	693b      	ldr	r3, [r7, #16]
 800edf0:	899b      	ldrh	r3, [r3, #12]
 800edf2:	461a      	mov	r2, r3
 800edf4:	6a3b      	ldr	r3, [r7, #32]
 800edf6:	fb02 f303 	mul.w	r3, r2, r3
 800edfa:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800edfc:	e04b      	b.n	800ee96 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	6a1b      	ldr	r3, [r3, #32]
 800ee02:	697a      	ldr	r2, [r7, #20]
 800ee04:	429a      	cmp	r2, r3
 800ee06:	d016      	beq.n	800ee36 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	699a      	ldr	r2, [r3, #24]
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ee10:	429a      	cmp	r2, r3
 800ee12:	d210      	bcs.n	800ee36 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ee14:	693b      	ldr	r3, [r7, #16]
 800ee16:	7858      	ldrb	r0, [r3, #1]
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ee1e:	2301      	movs	r3, #1
 800ee20:	697a      	ldr	r2, [r7, #20]
 800ee22:	f7fd fb23 	bl	800c46c <disk_read>
 800ee26:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d004      	beq.n	800ee36 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	2201      	movs	r2, #1
 800ee30:	755a      	strb	r2, [r3, #21]
 800ee32:	2301      	movs	r3, #1
 800ee34:	e05a      	b.n	800eeec <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	697a      	ldr	r2, [r7, #20]
 800ee3a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ee3c:	693b      	ldr	r3, [r7, #16]
 800ee3e:	899b      	ldrh	r3, [r3, #12]
 800ee40:	4618      	mov	r0, r3
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	699b      	ldr	r3, [r3, #24]
 800ee46:	693a      	ldr	r2, [r7, #16]
 800ee48:	8992      	ldrh	r2, [r2, #12]
 800ee4a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ee4e:	fb02 f201 	mul.w	r2, r2, r1
 800ee52:	1a9b      	subs	r3, r3, r2
 800ee54:	1ac3      	subs	r3, r0, r3
 800ee56:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ee58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	429a      	cmp	r2, r3
 800ee5e:	d901      	bls.n	800ee64 <f_write+0x298>
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	699b      	ldr	r3, [r3, #24]
 800ee6e:	693a      	ldr	r2, [r7, #16]
 800ee70:	8992      	ldrh	r2, [r2, #12]
 800ee72:	fbb3 f0f2 	udiv	r0, r3, r2
 800ee76:	fb02 f200 	mul.w	r2, r2, r0
 800ee7a:	1a9b      	subs	r3, r3, r2
 800ee7c:	440b      	add	r3, r1
 800ee7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee80:	69f9      	ldr	r1, [r7, #28]
 800ee82:	4618      	mov	r0, r3
 800ee84:	f7fd fbd2 	bl	800c62c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	7d1b      	ldrb	r3, [r3, #20]
 800ee8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ee90:	b2da      	uxtb	r2, r3
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ee96:	69fa      	ldr	r2, [r7, #28]
 800ee98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee9a:	4413      	add	r3, r2
 800ee9c:	61fb      	str	r3, [r7, #28]
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	699a      	ldr	r2, [r3, #24]
 800eea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea4:	441a      	add	r2, r3
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	619a      	str	r2, [r3, #24]
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	68da      	ldr	r2, [r3, #12]
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	699b      	ldr	r3, [r3, #24]
 800eeb2:	429a      	cmp	r2, r3
 800eeb4:	bf38      	it	cc
 800eeb6:	461a      	movcc	r2, r3
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	60da      	str	r2, [r3, #12]
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	681a      	ldr	r2, [r3, #0]
 800eec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec2:	441a      	add	r2, r3
 800eec4:	683b      	ldr	r3, [r7, #0]
 800eec6:	601a      	str	r2, [r3, #0]
 800eec8:	687a      	ldr	r2, [r7, #4]
 800eeca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eecc:	1ad3      	subs	r3, r2, r3
 800eece:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	f47f aeb5 	bne.w	800ec42 <f_write+0x76>
 800eed8:	e000      	b.n	800eedc <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800eeda:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	7d1b      	ldrb	r3, [r3, #20]
 800eee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eee4:	b2da      	uxtb	r2, r3
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800eeea:	2300      	movs	r3, #0
}
 800eeec:	4618      	mov	r0, r3
 800eeee:	3730      	adds	r7, #48	; 0x30
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}

0800eef4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b086      	sub	sp, #24
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f107 0208 	add.w	r2, r7, #8
 800ef02:	4611      	mov	r1, r2
 800ef04:	4618      	mov	r0, r3
 800ef06:	f7ff fc19 	bl	800e73c <validate>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ef0e:	7dfb      	ldrb	r3, [r7, #23]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d168      	bne.n	800efe6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	7d1b      	ldrb	r3, [r3, #20]
 800ef18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d062      	beq.n	800efe6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	7d1b      	ldrb	r3, [r3, #20]
 800ef24:	b25b      	sxtb	r3, r3
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	da15      	bge.n	800ef56 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ef2a:	68bb      	ldr	r3, [r7, #8]
 800ef2c:	7858      	ldrb	r0, [r3, #1]
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	6a1a      	ldr	r2, [r3, #32]
 800ef38:	2301      	movs	r3, #1
 800ef3a:	f7fd fab7 	bl	800c4ac <disk_write>
 800ef3e:	4603      	mov	r3, r0
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d001      	beq.n	800ef48 <f_sync+0x54>
 800ef44:	2301      	movs	r3, #1
 800ef46:	e04f      	b.n	800efe8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	7d1b      	ldrb	r3, [r3, #20]
 800ef4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef50:	b2da      	uxtb	r2, r3
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ef56:	f7fd f8dd 	bl	800c114 <get_fattime>
 800ef5a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ef5c:	68ba      	ldr	r2, [r7, #8]
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef62:	4619      	mov	r1, r3
 800ef64:	4610      	mov	r0, r2
 800ef66:	f7fd fd8f 	bl	800ca88 <move_window>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ef6e:	7dfb      	ldrb	r3, [r7, #23]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d138      	bne.n	800efe6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef78:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	330b      	adds	r3, #11
 800ef7e:	781a      	ldrb	r2, [r3, #0]
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	330b      	adds	r3, #11
 800ef84:	f042 0220 	orr.w	r2, r2, #32
 800ef88:	b2d2      	uxtb	r2, r2
 800ef8a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	6818      	ldr	r0, [r3, #0]
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	689b      	ldr	r3, [r3, #8]
 800ef94:	461a      	mov	r2, r3
 800ef96:	68f9      	ldr	r1, [r7, #12]
 800ef98:	f7fe fb1d 	bl	800d5d6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	f103 021c 	add.w	r2, r3, #28
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	68db      	ldr	r3, [r3, #12]
 800efa6:	4619      	mov	r1, r3
 800efa8:	4610      	mov	r0, r2
 800efaa:	f7fd fb13 	bl	800c5d4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	3316      	adds	r3, #22
 800efb2:	6939      	ldr	r1, [r7, #16]
 800efb4:	4618      	mov	r0, r3
 800efb6:	f7fd fb0d 	bl	800c5d4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	3312      	adds	r3, #18
 800efbe:	2100      	movs	r1, #0
 800efc0:	4618      	mov	r0, r3
 800efc2:	f7fd faec 	bl	800c59e <st_word>
					fs->wflag = 1;
 800efc6:	68bb      	ldr	r3, [r7, #8]
 800efc8:	2201      	movs	r2, #1
 800efca:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800efcc:	68bb      	ldr	r3, [r7, #8]
 800efce:	4618      	mov	r0, r3
 800efd0:	f7fd fd88 	bl	800cae4 <sync_fs>
 800efd4:	4603      	mov	r3, r0
 800efd6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	7d1b      	ldrb	r3, [r3, #20]
 800efdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800efe0:	b2da      	uxtb	r2, r3
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800efe6:	7dfb      	ldrb	r3, [r7, #23]
}
 800efe8:	4618      	mov	r0, r3
 800efea:	3718      	adds	r7, #24
 800efec:	46bd      	mov	sp, r7
 800efee:	bd80      	pop	{r7, pc}

0800eff0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b084      	sub	sp, #16
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800eff8:	6878      	ldr	r0, [r7, #4]
 800effa:	f7ff ff7b 	bl	800eef4 <f_sync>
 800effe:	4603      	mov	r3, r0
 800f000:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f002:	7bfb      	ldrb	r3, [r7, #15]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d118      	bne.n	800f03a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f107 0208 	add.w	r2, r7, #8
 800f00e:	4611      	mov	r1, r2
 800f010:	4618      	mov	r0, r3
 800f012:	f7ff fb93 	bl	800e73c <validate>
 800f016:	4603      	mov	r3, r0
 800f018:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f01a:	7bfb      	ldrb	r3, [r7, #15]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d10c      	bne.n	800f03a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	691b      	ldr	r3, [r3, #16]
 800f024:	4618      	mov	r0, r3
 800f026:	f7fd fc8b 	bl	800c940 <dec_lock>
 800f02a:	4603      	mov	r3, r0
 800f02c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f02e:	7bfb      	ldrb	r3, [r7, #15]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d102      	bne.n	800f03a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2200      	movs	r2, #0
 800f038:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f03a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3710      	adds	r7, #16
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}

0800f044 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f044:	b480      	push	{r7}
 800f046:	b087      	sub	sp, #28
 800f048:	af00      	add	r7, sp, #0
 800f04a:	60f8      	str	r0, [r7, #12]
 800f04c:	60b9      	str	r1, [r7, #8]
 800f04e:	4613      	mov	r3, r2
 800f050:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f052:	2301      	movs	r3, #1
 800f054:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f056:	2300      	movs	r3, #0
 800f058:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f05a:	4b1f      	ldr	r3, [pc, #124]	; (800f0d8 <FATFS_LinkDriverEx+0x94>)
 800f05c:	7a5b      	ldrb	r3, [r3, #9]
 800f05e:	b2db      	uxtb	r3, r3
 800f060:	2b00      	cmp	r3, #0
 800f062:	d131      	bne.n	800f0c8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f064:	4b1c      	ldr	r3, [pc, #112]	; (800f0d8 <FATFS_LinkDriverEx+0x94>)
 800f066:	7a5b      	ldrb	r3, [r3, #9]
 800f068:	b2db      	uxtb	r3, r3
 800f06a:	461a      	mov	r2, r3
 800f06c:	4b1a      	ldr	r3, [pc, #104]	; (800f0d8 <FATFS_LinkDriverEx+0x94>)
 800f06e:	2100      	movs	r1, #0
 800f070:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f072:	4b19      	ldr	r3, [pc, #100]	; (800f0d8 <FATFS_LinkDriverEx+0x94>)
 800f074:	7a5b      	ldrb	r3, [r3, #9]
 800f076:	b2db      	uxtb	r3, r3
 800f078:	4a17      	ldr	r2, [pc, #92]	; (800f0d8 <FATFS_LinkDriverEx+0x94>)
 800f07a:	009b      	lsls	r3, r3, #2
 800f07c:	4413      	add	r3, r2
 800f07e:	68fa      	ldr	r2, [r7, #12]
 800f080:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f082:	4b15      	ldr	r3, [pc, #84]	; (800f0d8 <FATFS_LinkDriverEx+0x94>)
 800f084:	7a5b      	ldrb	r3, [r3, #9]
 800f086:	b2db      	uxtb	r3, r3
 800f088:	461a      	mov	r2, r3
 800f08a:	4b13      	ldr	r3, [pc, #76]	; (800f0d8 <FATFS_LinkDriverEx+0x94>)
 800f08c:	4413      	add	r3, r2
 800f08e:	79fa      	ldrb	r2, [r7, #7]
 800f090:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f092:	4b11      	ldr	r3, [pc, #68]	; (800f0d8 <FATFS_LinkDriverEx+0x94>)
 800f094:	7a5b      	ldrb	r3, [r3, #9]
 800f096:	b2db      	uxtb	r3, r3
 800f098:	1c5a      	adds	r2, r3, #1
 800f09a:	b2d1      	uxtb	r1, r2
 800f09c:	4a0e      	ldr	r2, [pc, #56]	; (800f0d8 <FATFS_LinkDriverEx+0x94>)
 800f09e:	7251      	strb	r1, [r2, #9]
 800f0a0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f0a2:	7dbb      	ldrb	r3, [r7, #22]
 800f0a4:	3330      	adds	r3, #48	; 0x30
 800f0a6:	b2da      	uxtb	r2, r3
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f0ac:	68bb      	ldr	r3, [r7, #8]
 800f0ae:	3301      	adds	r3, #1
 800f0b0:	223a      	movs	r2, #58	; 0x3a
 800f0b2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	3302      	adds	r3, #2
 800f0b8:	222f      	movs	r2, #47	; 0x2f
 800f0ba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	3303      	adds	r3, #3
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f0c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	371c      	adds	r7, #28
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d4:	4770      	bx	lr
 800f0d6:	bf00      	nop
 800f0d8:	20002348 	.word	0x20002348

0800f0dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b082      	sub	sp, #8
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	6839      	ldr	r1, [r7, #0]
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f7ff ffaa 	bl	800f044 <FATFS_LinkDriverEx>
 800f0f0:	4603      	mov	r3, r0
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	3708      	adds	r7, #8
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}
	...

0800f0fc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f0fc:	b480      	push	{r7}
 800f0fe:	b085      	sub	sp, #20
 800f100:	af00      	add	r7, sp, #0
 800f102:	4603      	mov	r3, r0
 800f104:	6039      	str	r1, [r7, #0]
 800f106:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f108:	88fb      	ldrh	r3, [r7, #6]
 800f10a:	2b7f      	cmp	r3, #127	; 0x7f
 800f10c:	d802      	bhi.n	800f114 <ff_convert+0x18>
		c = chr;
 800f10e:	88fb      	ldrh	r3, [r7, #6]
 800f110:	81fb      	strh	r3, [r7, #14]
 800f112:	e025      	b.n	800f160 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d00b      	beq.n	800f132 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f11a:	88fb      	ldrh	r3, [r7, #6]
 800f11c:	2bff      	cmp	r3, #255	; 0xff
 800f11e:	d805      	bhi.n	800f12c <ff_convert+0x30>
 800f120:	88fb      	ldrh	r3, [r7, #6]
 800f122:	3b80      	subs	r3, #128	; 0x80
 800f124:	4a12      	ldr	r2, [pc, #72]	; (800f170 <ff_convert+0x74>)
 800f126:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f12a:	e000      	b.n	800f12e <ff_convert+0x32>
 800f12c:	2300      	movs	r3, #0
 800f12e:	81fb      	strh	r3, [r7, #14]
 800f130:	e016      	b.n	800f160 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f132:	2300      	movs	r3, #0
 800f134:	81fb      	strh	r3, [r7, #14]
 800f136:	e009      	b.n	800f14c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f138:	89fb      	ldrh	r3, [r7, #14]
 800f13a:	4a0d      	ldr	r2, [pc, #52]	; (800f170 <ff_convert+0x74>)
 800f13c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f140:	88fa      	ldrh	r2, [r7, #6]
 800f142:	429a      	cmp	r2, r3
 800f144:	d006      	beq.n	800f154 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f146:	89fb      	ldrh	r3, [r7, #14]
 800f148:	3301      	adds	r3, #1
 800f14a:	81fb      	strh	r3, [r7, #14]
 800f14c:	89fb      	ldrh	r3, [r7, #14]
 800f14e:	2b7f      	cmp	r3, #127	; 0x7f
 800f150:	d9f2      	bls.n	800f138 <ff_convert+0x3c>
 800f152:	e000      	b.n	800f156 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f154:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f156:	89fb      	ldrh	r3, [r7, #14]
 800f158:	3380      	adds	r3, #128	; 0x80
 800f15a:	b29b      	uxth	r3, r3
 800f15c:	b2db      	uxtb	r3, r3
 800f15e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f160:	89fb      	ldrh	r3, [r7, #14]
}
 800f162:	4618      	mov	r0, r3
 800f164:	3714      	adds	r7, #20
 800f166:	46bd      	mov	sp, r7
 800f168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16c:	4770      	bx	lr
 800f16e:	bf00      	nop
 800f170:	08017d8c 	.word	0x08017d8c

0800f174 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f174:	b480      	push	{r7}
 800f176:	b087      	sub	sp, #28
 800f178:	af00      	add	r7, sp, #0
 800f17a:	4603      	mov	r3, r0
 800f17c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f17e:	88fb      	ldrh	r3, [r7, #6]
 800f180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f184:	d201      	bcs.n	800f18a <ff_wtoupper+0x16>
 800f186:	4b3e      	ldr	r3, [pc, #248]	; (800f280 <ff_wtoupper+0x10c>)
 800f188:	e000      	b.n	800f18c <ff_wtoupper+0x18>
 800f18a:	4b3e      	ldr	r3, [pc, #248]	; (800f284 <ff_wtoupper+0x110>)
 800f18c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f18e:	697b      	ldr	r3, [r7, #20]
 800f190:	1c9a      	adds	r2, r3, #2
 800f192:	617a      	str	r2, [r7, #20]
 800f194:	881b      	ldrh	r3, [r3, #0]
 800f196:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f198:	8a7b      	ldrh	r3, [r7, #18]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d068      	beq.n	800f270 <ff_wtoupper+0xfc>
 800f19e:	88fa      	ldrh	r2, [r7, #6]
 800f1a0:	8a7b      	ldrh	r3, [r7, #18]
 800f1a2:	429a      	cmp	r2, r3
 800f1a4:	d364      	bcc.n	800f270 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f1a6:	697b      	ldr	r3, [r7, #20]
 800f1a8:	1c9a      	adds	r2, r3, #2
 800f1aa:	617a      	str	r2, [r7, #20]
 800f1ac:	881b      	ldrh	r3, [r3, #0]
 800f1ae:	823b      	strh	r3, [r7, #16]
 800f1b0:	8a3b      	ldrh	r3, [r7, #16]
 800f1b2:	0a1b      	lsrs	r3, r3, #8
 800f1b4:	81fb      	strh	r3, [r7, #14]
 800f1b6:	8a3b      	ldrh	r3, [r7, #16]
 800f1b8:	b2db      	uxtb	r3, r3
 800f1ba:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f1bc:	88fa      	ldrh	r2, [r7, #6]
 800f1be:	8a79      	ldrh	r1, [r7, #18]
 800f1c0:	8a3b      	ldrh	r3, [r7, #16]
 800f1c2:	440b      	add	r3, r1
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	da49      	bge.n	800f25c <ff_wtoupper+0xe8>
			switch (cmd) {
 800f1c8:	89fb      	ldrh	r3, [r7, #14]
 800f1ca:	2b08      	cmp	r3, #8
 800f1cc:	d84f      	bhi.n	800f26e <ff_wtoupper+0xfa>
 800f1ce:	a201      	add	r2, pc, #4	; (adr r2, 800f1d4 <ff_wtoupper+0x60>)
 800f1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1d4:	0800f1f9 	.word	0x0800f1f9
 800f1d8:	0800f20b 	.word	0x0800f20b
 800f1dc:	0800f221 	.word	0x0800f221
 800f1e0:	0800f229 	.word	0x0800f229
 800f1e4:	0800f231 	.word	0x0800f231
 800f1e8:	0800f239 	.word	0x0800f239
 800f1ec:	0800f241 	.word	0x0800f241
 800f1f0:	0800f249 	.word	0x0800f249
 800f1f4:	0800f251 	.word	0x0800f251
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f1f8:	88fa      	ldrh	r2, [r7, #6]
 800f1fa:	8a7b      	ldrh	r3, [r7, #18]
 800f1fc:	1ad3      	subs	r3, r2, r3
 800f1fe:	005b      	lsls	r3, r3, #1
 800f200:	697a      	ldr	r2, [r7, #20]
 800f202:	4413      	add	r3, r2
 800f204:	881b      	ldrh	r3, [r3, #0]
 800f206:	80fb      	strh	r3, [r7, #6]
 800f208:	e027      	b.n	800f25a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f20a:	88fa      	ldrh	r2, [r7, #6]
 800f20c:	8a7b      	ldrh	r3, [r7, #18]
 800f20e:	1ad3      	subs	r3, r2, r3
 800f210:	b29b      	uxth	r3, r3
 800f212:	f003 0301 	and.w	r3, r3, #1
 800f216:	b29b      	uxth	r3, r3
 800f218:	88fa      	ldrh	r2, [r7, #6]
 800f21a:	1ad3      	subs	r3, r2, r3
 800f21c:	80fb      	strh	r3, [r7, #6]
 800f21e:	e01c      	b.n	800f25a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f220:	88fb      	ldrh	r3, [r7, #6]
 800f222:	3b10      	subs	r3, #16
 800f224:	80fb      	strh	r3, [r7, #6]
 800f226:	e018      	b.n	800f25a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f228:	88fb      	ldrh	r3, [r7, #6]
 800f22a:	3b20      	subs	r3, #32
 800f22c:	80fb      	strh	r3, [r7, #6]
 800f22e:	e014      	b.n	800f25a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f230:	88fb      	ldrh	r3, [r7, #6]
 800f232:	3b30      	subs	r3, #48	; 0x30
 800f234:	80fb      	strh	r3, [r7, #6]
 800f236:	e010      	b.n	800f25a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f238:	88fb      	ldrh	r3, [r7, #6]
 800f23a:	3b1a      	subs	r3, #26
 800f23c:	80fb      	strh	r3, [r7, #6]
 800f23e:	e00c      	b.n	800f25a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f240:	88fb      	ldrh	r3, [r7, #6]
 800f242:	3308      	adds	r3, #8
 800f244:	80fb      	strh	r3, [r7, #6]
 800f246:	e008      	b.n	800f25a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f248:	88fb      	ldrh	r3, [r7, #6]
 800f24a:	3b50      	subs	r3, #80	; 0x50
 800f24c:	80fb      	strh	r3, [r7, #6]
 800f24e:	e004      	b.n	800f25a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f250:	88fb      	ldrh	r3, [r7, #6]
 800f252:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800f256:	80fb      	strh	r3, [r7, #6]
 800f258:	bf00      	nop
			}
			break;
 800f25a:	e008      	b.n	800f26e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f25c:	89fb      	ldrh	r3, [r7, #14]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d195      	bne.n	800f18e <ff_wtoupper+0x1a>
 800f262:	8a3b      	ldrh	r3, [r7, #16]
 800f264:	005b      	lsls	r3, r3, #1
 800f266:	697a      	ldr	r2, [r7, #20]
 800f268:	4413      	add	r3, r2
 800f26a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f26c:	e78f      	b.n	800f18e <ff_wtoupper+0x1a>
			break;
 800f26e:	bf00      	nop
	}

	return chr;
 800f270:	88fb      	ldrh	r3, [r7, #6]
}
 800f272:	4618      	mov	r0, r3
 800f274:	371c      	adds	r7, #28
 800f276:	46bd      	mov	sp, r7
 800f278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27c:	4770      	bx	lr
 800f27e:	bf00      	nop
 800f280:	08017e8c 	.word	0x08017e8c
 800f284:	08018080 	.word	0x08018080

0800f288 <_tdcgp21_CS>:
#include "../TDC-GP21_defs.h"
#include <stdbool.h>
extern SPI_HandleTypeDef hspi4;

static void _tdcgp21_CS(void * intf_ptr, bool mode)
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b084      	sub	sp, #16
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
 800f290:	460b      	mov	r3, r1
 800f292:	70fb      	strb	r3, [r7, #3]
	tdcgp21_lovver_api_config_t *api_config = (tdcgp21_lovver_api_config_t *)intf_ptr;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	60fb      	str	r3, [r7, #12]
	tdcgp21_spi_pins_t *api_config_low = (tdcgp21_spi_pins_t *)api_config->intf_ptr;
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	689b      	ldr	r3, [r3, #8]
 800f29c:	60bb      	str	r3, [r7, #8]
	if (mode)
 800f29e:	78fb      	ldrb	r3, [r7, #3]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d008      	beq.n	800f2b6 <_tdcgp21_CS+0x2e>
	{
		// Опускаем chip select для того, что бы начать общение с конкретным устройством.
		HAL_GPIO_WritePin(api_config_low->cs_port, api_config_low->cs_pin,  GPIO_PIN_RESET);
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	6898      	ldr	r0, [r3, #8]
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	899b      	ldrh	r3, [r3, #12]
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	4619      	mov	r1, r3
 800f2b0:	f7f8 f8f6 	bl	80074a0 <HAL_GPIO_WritePin>
	{
		// Поднимаем chip select для того, что бы закончить общение с конкретным устройством.
		HAL_GPIO_WritePin(api_config_low->cs_port, api_config_low->cs_pin,  GPIO_PIN_SET);
		//HAL_Delay(100);
	}
}
 800f2b4:	e007      	b.n	800f2c6 <_tdcgp21_CS+0x3e>
		HAL_GPIO_WritePin(api_config_low->cs_port, api_config_low->cs_pin,  GPIO_PIN_SET);
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	6898      	ldr	r0, [r3, #8]
 800f2ba:	68bb      	ldr	r3, [r7, #8]
 800f2bc:	899b      	ldrh	r3, [r3, #12]
 800f2be:	2201      	movs	r2, #1
 800f2c0:	4619      	mov	r1, r3
 800f2c2:	f7f8 f8ed 	bl	80074a0 <HAL_GPIO_WritePin>
}
 800f2c6:	bf00      	nop
 800f2c8:	3710      	adds	r7, #16
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd80      	pop	{r7, pc}

0800f2ce <tdcgp21_write_register>:


HAL_StatusTypeDef tdcgp21_write_register(void * intf_ptr, uint8_t reg_addr, const uint8_t * reg_data, size_t data_size)
{
 800f2ce:	b580      	push	{r7, lr}
 800f2d0:	b086      	sub	sp, #24
 800f2d2:	af00      	add	r7, sp, #0
 800f2d4:	60f8      	str	r0, [r7, #12]
 800f2d6:	607a      	str	r2, [r7, #4]
 800f2d8:	603b      	str	r3, [r7, #0]
 800f2da:	460b      	mov	r3, r1
 800f2dc:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef errcode1;
	tdcgp21_lovver_api_config_t *api_config = (tdcgp21_lovver_api_config_t *)intf_ptr;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	617b      	str	r3, [r7, #20]
	api_config->tdc21_CS(intf_ptr, true);
 800f2e2:	697b      	ldr	r3, [r7, #20]
 800f2e4:	685b      	ldr	r3, [r3, #4]
 800f2e6:	2101      	movs	r1, #1
 800f2e8:	68f8      	ldr	r0, [r7, #12]
 800f2ea:	4798      	blx	r3

	// Добавляем в 5 битов адреса еще 3 бита для записи в регистр
	reg_addr = TDC21_W_REGISTER | reg_addr;
 800f2ec:	7afb      	ldrb	r3, [r7, #11]
 800f2ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f2f2:	b2db      	uxtb	r3, r3
 800f2f4:	72fb      	strb	r3, [r7, #11]

	// Передаем адресс регистра, в который пишем и пишем в регистр
	errcode1 = HAL_SPI_Transmit(api_config->hspi, &reg_addr, 1, HAL_MAX_DELAY);
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	6818      	ldr	r0, [r3, #0]
 800f2fa:	f107 010b 	add.w	r1, r7, #11
 800f2fe:	f04f 33ff 	mov.w	r3, #4294967295
 800f302:	2201      	movs	r2, #1
 800f304:	f7fa fd2b 	bl	8009d5e <HAL_SPI_Transmit>
 800f308:	4603      	mov	r3, r0
 800f30a:	74fb      	strb	r3, [r7, #19]
	if(errcode1)
 800f30c:	7cfb      	ldrb	r3, [r7, #19]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d006      	beq.n	800f320 <tdcgp21_write_register+0x52>
	{
		api_config->tdc21_CS(intf_ptr, false);
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	685b      	ldr	r3, [r3, #4]
 800f316:	2100      	movs	r1, #0
 800f318:	68f8      	ldr	r0, [r7, #12]
 800f31a:	4798      	blx	r3
		return errcode1;
 800f31c:	7cfb      	ldrb	r3, [r7, #19]
 800f31e:	e00e      	b.n	800f33e <tdcgp21_write_register+0x70>
	}
	HAL_SPI_Transmit(api_config->hspi, reg_data, data_size, HAL_MAX_DELAY);
 800f320:	697b      	ldr	r3, [r7, #20]
 800f322:	6818      	ldr	r0, [r3, #0]
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	b29a      	uxth	r2, r3
 800f328:	f04f 33ff 	mov.w	r3, #4294967295
 800f32c:	6879      	ldr	r1, [r7, #4]
 800f32e:	f7fa fd16 	bl	8009d5e <HAL_SPI_Transmit>

	api_config->tdc21_CS(intf_ptr, false);
 800f332:	697b      	ldr	r3, [r7, #20]
 800f334:	685b      	ldr	r3, [r3, #4]
 800f336:	2100      	movs	r1, #0
 800f338:	68f8      	ldr	r0, [r7, #12]
 800f33a:	4798      	blx	r3
	return errcode1;
 800f33c:	7cfb      	ldrb	r3, [r7, #19]
}
 800f33e:	4618      	mov	r0, r3
 800f340:	3718      	adds	r7, #24
 800f342:	46bd      	mov	sp, r7
 800f344:	bd80      	pop	{r7, pc}
	...

0800f348 <tdc21_spi_init>:
	int jopa = TDC21_START_TOF;
	HAL_SPI_Transmit(api_config->hspi, &jopa, 1, HAL_MAX_DELAY);
}

void tdc21_spi_init(tdcgp21_lovver_api_config_t* nrf24, SPI_HandleTypeDef *hspi, tdcgp21_spi_pins_t* pins)
{
 800f348:	b480      	push	{r7}
 800f34a:	b085      	sub	sp, #20
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	60f8      	str	r0, [r7, #12]
 800f350:	60b9      	str	r1, [r7, #8]
 800f352:	607a      	str	r2, [r7, #4]
	nrf24->hspi = hspi;
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	68ba      	ldr	r2, [r7, #8]
 800f358:	601a      	str	r2, [r3, #0]
	nrf24->tdc21_CS = _tdcgp21_CS;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	4a05      	ldr	r2, [pc, #20]	; (800f374 <tdc21_spi_init+0x2c>)
 800f35e:	605a      	str	r2, [r3, #4]
	nrf24->intf_ptr = pins;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	687a      	ldr	r2, [r7, #4]
 800f364:	609a      	str	r2, [r3, #8]
}
 800f366:	bf00      	nop
 800f368:	3714      	adds	r7, #20
 800f36a:	46bd      	mov	sp, r7
 800f36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f370:	4770      	bx	lr
 800f372:	bf00      	nop
 800f374:	0800f289 	.word	0x0800f289

0800f378 <tdc21_config>:
	return data*90;
}


tdc21_all_regs_t tdc21_config(void * intf_ptr)
{
 800f378:	b5b0      	push	{r4, r5, r7, lr}
 800f37a:	b09a      	sub	sp, #104	; 0x68
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
 800f380:	6039      	str	r1, [r7, #0]
	config_all_value_ideal_t config_all_value;
	tdc21_all_regs_t reg_i;

	reg_i.reg0 = 0;
 800f382:	2300      	movs	r3, #0
 800f384:	60bb      	str	r3, [r7, #8]
	reg_i.reg1 = 0b00000000010000000000000000000000;
 800f386:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f38a:	60fb      	str	r3, [r7, #12]
	reg_i.reg2 = 0;
 800f38c:	2300      	movs	r3, #0
 800f38e:	613b      	str	r3, [r7, #16]
	reg_i.reg3 = 0;
 800f390:	2300      	movs	r3, #0
 800f392:	617b      	str	r3, [r7, #20]
	reg_i.reg4 = 0b00100000000000000000000000000000;
 800f394:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800f398:	61bb      	str	r3, [r7, #24]
	reg_i.reg5 = 0;
 800f39a:	2300      	movs	r3, #0
 800f39c:	61fb      	str	r3, [r7, #28]
	reg_i.reg6 = 0;
 800f39e:	2300      	movs	r3, #0
 800f3a0:	623b      	str	r3, [r7, #32]

//настройки нулевого регистра!!!!00000000000
	config_all_value.ANZ_FIRE = 0b0010;
 800f3a2:	2302      	movs	r3, #2
 800f3a4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	config_all_value.DIV_FIRE = 0b0010;
 800f3a8:	2302      	movs	r3, #2
 800f3aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	config_all_value.ANZ_PER_CALRES = 0;
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	config_all_value.DIV_CLKHS = 0;
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	config_all_value.START_CLKHS = 0b0001;
 800f3ba:	2301      	movs	r3, #1
 800f3bc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	config_all_value.ANZ_PORT = 1;
 800f3c0:	2301      	movs	r3, #1
 800f3c2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	config_all_value.TCYCLE = 0;
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	config_all_value.ANZ_FAKE = 0;
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	config_all_value.SEL_ECLK_TMP = 1;
 800f3d2:	2301      	movs	r3, #1
 800f3d4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	config_all_value.CALIBRATE = 1;
 800f3d8:	2301      	movs	r3, #1
 800f3da:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	config_all_value.NO_CAL_AUTO = 0;
 800f3de:	2300      	movs	r3, #0
 800f3e0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	config_all_value.MESSB2 = 1;
 800f3e4:	2301      	movs	r3, #1
 800f3e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	config_all_value.NEG_STOP2 = 0;
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	config_all_value.NEG_STOP1 = 0;
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	config_all_value.NEG_START = 0;
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32


	///настройки первого регистра11111111111
	config_all_value.HIT1 = 0b0101;
 800f3fc:	2305      	movs	r3, #5
 800f3fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	config_all_value.HIT2 = 0b0101;
 800f402:	2305      	movs	r3, #5
 800f404:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	config_all_value.EN_FAST_INIT = 0;
 800f408:	2300      	movs	r3, #0
 800f40a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	config_all_value.HITIN2 = 0;
 800f40e:	2300      	movs	r3, #0
 800f410:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	config_all_value.HITIN1 = 0;
 800f414:	2300      	movs	r3, #0
 800f416:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	config_all_value.CURR32K = 1;
 800f41a:	2301      	movs	r3, #1
 800f41c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	config_all_value.SEL_START_FIRE = 0;
 800f420:	2300      	movs	r3, #0
 800f422:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	config_all_value.SEL_TSTO2 = 0;
 800f426:	2300      	movs	r3, #0
 800f428:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	config_all_value.SEL_TSTO1 = 0;
 800f42c:	2300      	movs	r3, #0
 800f42e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b


	//настройки второго регистра2222222222
	config_all_value.EN_INT_TIMEOUT = 0;
 800f432:	2300      	movs	r3, #0
 800f434:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	config_all_value.EN_INT_END_HITS = 0;
 800f438:	2300      	movs	r3, #0
 800f43a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	config_all_value.EN_INT_ALU	= 1;
 800f43e:	2301      	movs	r3, #1
 800f440:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	config_all_value.RFEDGE2 = 0;
 800f444:	2300      	movs	r3, #0
 800f446:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	config_all_value.RFEDGE1 = 0;
 800f44a:	2300      	movs	r3, #0
 800f44c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	config_all_value.DELVAL1 = 0;
 800f450:	2300      	movs	r3, #0
 800f452:	647b      	str	r3, [r7, #68]	; 0x44

	//настройки третьего регистра333333333
	config_all_value.EN_ERR_VAL = 0;
 800f454:	2300      	movs	r3, #0
 800f456:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	config_all_value.SEL_TIMO_MB2  = 0b11;
 800f45a:	2303      	movs	r3, #3
 800f45c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	config_all_value.DELVAL2 = 0b0010000000000000000;
 800f460:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f464:	64fb      	str	r3, [r7, #76]	; 0x4c

	//настройка четвертого регистра444444444
	config_all_value.DELVAL3 = 0;
 800f466:	2300      	movs	r3, #0
 800f468:	653b      	str	r3, [r7, #80]	; 0x50


	//настройка пятого регистра5555555555
	config_all_value.CONF_FIRE = TDC21_WREG5_FIRE_UP;
 800f46a:	2302      	movs	r3, #2
 800f46c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	config_all_value.EN_STARTNOISE = 0;//
 800f470:	2300      	movs	r3, #0
 800f472:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	config_all_value.DIS_PHASESHIFT = 0;
 800f476:	2300      	movs	r3, #0
 800f478:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	config_all_value.REPEAT_FIRE = 1;
 800f47c:	2301      	movs	r3, #1
 800f47e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	config_all_value.PHASE_FIRE = TDC21_WREG5_PHASE_FIRE_NOT_INVERS;
 800f482:	2300      	movs	r3, #0
 800f484:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

	//настройка шестого регистра66666666666
	config_all_value.EN_ANALOG = TDC21_WREG6_EN_ANALOG_STR1ST2_DIGITAL;
 800f488:	2300      	movs	r3, #0
 800f48a:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	config_all_value.NEG_STOP_TEMP = TDC21_WREG6_NEG_STOP_TEMP_74HC14;
 800f48e:	2300      	movs	r3, #0
 800f490:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	config_all_value.DA_korrt = TDC21_WREG6_DA_KORRT_0MV;
 800f494:	2300      	movs	r3, #0
 800f496:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	config_all_value.TW2 = TDC21_WREG6_TW2_90MKS;
 800f49a:	2300      	movs	r3, #0
 800f49c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	config_all_value.EN_INT_EEPROM = 1;//
 800f4a0:	2301      	movs	r3, #1
 800f4a2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	config_all_value.CYCLE_TEMP = TDC21_WREG6_CYCLE_TEMP_1;
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	config_all_value.CYCLE_TOF = TDC21_WREG6_CYCLE_TOF_1;
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	config_all_value.HZ60 = TDC21_WREG6_HZ60_50_HZ;
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	config_all_value.FIREO_DEF = TDC21_WREG6_FIREO_DEF_HIGHT_HZ;
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	config_all_value.QUAD_RES = TDC21_WREG6_QUAD_RES_DISABLE;
 800f4be:	2300      	movs	r3, #0
 800f4c0:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	config_all_value.DOUBLE_RES = TDC21_WREG6_DOUBLE_RES_DISABLE;
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	config_all_value.TEMP_PORTDIR = TDC21_WREG6_TEMP_PORTDIR_PT1_PT2_PT3_PT4;
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	config_all_value.ANZ_FIRE_2 = 0;
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	reg_i.reg6 |= TDC21_WREG6_DOUBLE_RES(config_all_value.DOUBLE_RES);
	reg_i.reg6 |= TDC21_WREG6_TEMP_PORTDIR(config_all_value.TEMP_PORTDIR);
	reg_i.reg6 |= TDC21_WREG6_ANZ_FIRE((config_all_value.ANZ_FIRE >> 4));//////////////////////*/


	reg_i.reg0|= (uint32_t)1 << REG0_ANZ_FIRE; // 1 fire pulse
 800f4d6:	68bb      	ldr	r3, [r7, #8]
 800f4d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f4dc:	60bb      	str	r3, [r7, #8]
	reg_i.reg0|= 1 << REG0_START_CLKHS_1_0; // 1 = Oscillator continuously on
 800f4de:	68bb      	ldr	r3, [r7, #8]
 800f4e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f4e4:	60bb      	str	r3, [r7, #8]
	reg_i.reg0|= 0 << REG0_CALIBRATE; // Disable calibration
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	60bb      	str	r3, [r7, #8]
	reg_i.reg0|= 1 << REG0_NO_CAL_AUTO;// 1 = auto-calibration disabled
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f4f0:	60bb      	str	r3, [r7, #8]
	reg_i.reg0|= 7 << REG0_DIV_FIRE; //7.= divided by 8
 800f4f2:	68bb      	ldr	r3, [r7, #8]
 800f4f4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800f4f8:	60bb      	str	r3, [r7, #8]
	reg_i.reg0|= 1 << REG0_DIV_CLKHS;//1 = clk divided by 2
 800f4fa:	68bb      	ldr	r3, [r7, #8]
 800f4fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f500:	60bb      	str	r3, [r7, #8]

	reg_i.reg1|= (uint32_t)9 << REG1_HIT1; // 0x9 -> 1. Stop Ch2 (photo)
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
 800f508:	60fb      	str	r3, [r7, #12]
	reg_i.reg1|= 1 << REG1_HIT2; // 0x1 -> 1. Stop Ch1 (laser)
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f510:	60fb      	str	r3, [r7, #12]

	reg_i.reg1|= 1 << REG1_HITIN1; // 1 hit on ch1 expected (laser)
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f518:	60fb      	str	r3, [r7, #12]
	reg_i.reg1|= 2 << REG1_HITIN2; // 2 hits on ch2 expected (photo)
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f520:	60fb      	str	r3, [r7, #12]

	reg_i.reg1|= 1 << REG1_SEL_START_FIRE; // Fire pulse is used as TDC start
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f528:	60fb      	str	r3, [r7, #12]
	reg_i.reg1|= 7 << REG1_SEL_TSTO2;//7 = 4 kHz (32 kHz/8) clock - IMPORTANT
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800f530:	60fb      	str	r3, [r7, #12]

	reg_i.reg1|= 3 << REG1_SEL_TSTO1;//3 = STOP2 TDC output
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800f538:	60fb      	str	r3, [r7, #12]
	// *********************** REG 2
	reg_i.reg2|= (uint32_t)(1+4) << REG2_EN_INT_2_0; // 1 - timeout interr, 4 - ALU interr enable
 800f53a:	693b      	ldr	r3, [r7, #16]
 800f53c:	f043 4320 	orr.w	r3, r3, #2684354560	; 0xa0000000
 800f540:	613b      	str	r3, [r7, #16]
	reg_i.reg2|= 1 << REG2_RFEDGE2;//1 = rising and falling edge at channel2
 800f542:	693b      	ldr	r3, [r7, #16]
 800f544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f548:	613b      	str	r3, [r7, #16]

	//REG 3
	reg_i.reg3|= 1 << REG3_EN_ERR_VAL; // Timeout forces ALU to write ‘hFFFFFFFF
 800f54a:	697b      	ldr	r3, [r7, #20]
 800f54c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f550:	617b      	str	r3, [r7, #20]

	//REG 5
	reg_i.reg5|= 2 << REG5_CONF_FIRE; //Bit 30 = 1: enable output FIRE_UP
 800f552:	69fb      	ldr	r3, [r7, #28]
 800f554:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f558:	61fb      	str	r3, [r7, #28]
	reg_i.reg5|= 1 << REG5_DIS_PHASESHIFT;//Disable phase shift noise
 800f55a:	69fb      	ldr	r3, [r7, #28]
 800f55c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f560:	61fb      	str	r3, [r7, #28]

	//REG 6
	//reg6|= (uint32_t)1 << REG6_EN_ANALOG;
	reg_i.reg6|= 1 << REG6_FIREO_DEF; //1 = LOW
 800f562:	6a3b      	ldr	r3, [r7, #32]
 800f564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f568:	623b      	str	r3, [r7, #32]

	//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=ЭТАП-=-ОТПРАВКИ=-=РЕГИСТРОВ-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-//
	tdcgp21_write_register(intf_ptr, TDC21_WREG0, (uint8_t*)&reg_i.reg0, 4);
 800f56a:	f107 0208 	add.w	r2, r7, #8
 800f56e:	2304      	movs	r3, #4
 800f570:	2100      	movs	r1, #0
 800f572:	6838      	ldr	r0, [r7, #0]
 800f574:	f7ff feab 	bl	800f2ce <tdcgp21_write_register>
	tdcgp21_write_register(intf_ptr, TDC21_WREG1, (uint8_t*)&reg_i.reg1, 4);
 800f578:	f107 0308 	add.w	r3, r7, #8
 800f57c:	1d1a      	adds	r2, r3, #4
 800f57e:	2304      	movs	r3, #4
 800f580:	2101      	movs	r1, #1
 800f582:	6838      	ldr	r0, [r7, #0]
 800f584:	f7ff fea3 	bl	800f2ce <tdcgp21_write_register>
	tdcgp21_write_register(intf_ptr, TDC21_WREG2, (uint8_t*)&reg_i.reg2, 4);
 800f588:	f107 0308 	add.w	r3, r7, #8
 800f58c:	f103 0208 	add.w	r2, r3, #8
 800f590:	2304      	movs	r3, #4
 800f592:	2102      	movs	r1, #2
 800f594:	6838      	ldr	r0, [r7, #0]
 800f596:	f7ff fe9a 	bl	800f2ce <tdcgp21_write_register>
	tdcgp21_write_register(intf_ptr, TDC21_WREG3, (uint8_t*)&reg_i.reg3, 4);
 800f59a:	f107 0308 	add.w	r3, r7, #8
 800f59e:	f103 020c 	add.w	r2, r3, #12
 800f5a2:	2304      	movs	r3, #4
 800f5a4:	2103      	movs	r1, #3
 800f5a6:	6838      	ldr	r0, [r7, #0]
 800f5a8:	f7ff fe91 	bl	800f2ce <tdcgp21_write_register>
	tdcgp21_write_register(intf_ptr, TDC21_WREG4, (uint8_t*)&reg_i.reg4, 4);
 800f5ac:	f107 0308 	add.w	r3, r7, #8
 800f5b0:	f103 0210 	add.w	r2, r3, #16
 800f5b4:	2304      	movs	r3, #4
 800f5b6:	2104      	movs	r1, #4
 800f5b8:	6838      	ldr	r0, [r7, #0]
 800f5ba:	f7ff fe88 	bl	800f2ce <tdcgp21_write_register>
	tdcgp21_write_register(intf_ptr, TDC21_WREG5, (uint8_t*)&reg_i.reg5, 4);
 800f5be:	f107 0308 	add.w	r3, r7, #8
 800f5c2:	f103 0214 	add.w	r2, r3, #20
 800f5c6:	2304      	movs	r3, #4
 800f5c8:	2105      	movs	r1, #5
 800f5ca:	6838      	ldr	r0, [r7, #0]
 800f5cc:	f7ff fe7f 	bl	800f2ce <tdcgp21_write_register>
	tdcgp21_write_register(intf_ptr, TDC21_WREG6, (uint8_t*)&reg_i.reg6, 4);
 800f5d0:	f107 0308 	add.w	r3, r7, #8
 800f5d4:	f103 0218 	add.w	r2, r3, #24
 800f5d8:	2304      	movs	r3, #4
 800f5da:	2106      	movs	r1, #6
 800f5dc:	6838      	ldr	r0, [r7, #0]
 800f5de:	f7ff fe76 	bl	800f2ce <tdcgp21_write_register>

    //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//
	return reg_i;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	461d      	mov	r5, r3
 800f5e6:	f107 0408 	add.w	r4, r7, #8
 800f5ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f5ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f5ee:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800f5f2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	3768      	adds	r7, #104	; 0x68
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bdb0      	pop	{r4, r5, r7, pc}

0800f5fe <hex2int>:
#include <time.h>

#define boolstr(s) ((s) ? "true" : "false")

static int hex2int(char c)
{
 800f5fe:	b480      	push	{r7}
 800f600:	b083      	sub	sp, #12
 800f602:	af00      	add	r7, sp, #0
 800f604:	4603      	mov	r3, r0
 800f606:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9')
 800f608:	79fb      	ldrb	r3, [r7, #7]
 800f60a:	2b2f      	cmp	r3, #47	; 0x2f
 800f60c:	d905      	bls.n	800f61a <hex2int+0x1c>
 800f60e:	79fb      	ldrb	r3, [r7, #7]
 800f610:	2b39      	cmp	r3, #57	; 0x39
 800f612:	d802      	bhi.n	800f61a <hex2int+0x1c>
        return c - '0';
 800f614:	79fb      	ldrb	r3, [r7, #7]
 800f616:	3b30      	subs	r3, #48	; 0x30
 800f618:	e013      	b.n	800f642 <hex2int+0x44>
    if (c >= 'A' && c <= 'F')
 800f61a:	79fb      	ldrb	r3, [r7, #7]
 800f61c:	2b40      	cmp	r3, #64	; 0x40
 800f61e:	d905      	bls.n	800f62c <hex2int+0x2e>
 800f620:	79fb      	ldrb	r3, [r7, #7]
 800f622:	2b46      	cmp	r3, #70	; 0x46
 800f624:	d802      	bhi.n	800f62c <hex2int+0x2e>
        return c - 'A' + 10;
 800f626:	79fb      	ldrb	r3, [r7, #7]
 800f628:	3b37      	subs	r3, #55	; 0x37
 800f62a:	e00a      	b.n	800f642 <hex2int+0x44>
    if (c >= 'a' && c <= 'f')
 800f62c:	79fb      	ldrb	r3, [r7, #7]
 800f62e:	2b60      	cmp	r3, #96	; 0x60
 800f630:	d905      	bls.n	800f63e <hex2int+0x40>
 800f632:	79fb      	ldrb	r3, [r7, #7]
 800f634:	2b66      	cmp	r3, #102	; 0x66
 800f636:	d802      	bhi.n	800f63e <hex2int+0x40>
        return c - 'a' + 10;
 800f638:	79fb      	ldrb	r3, [r7, #7]
 800f63a:	3b57      	subs	r3, #87	; 0x57
 800f63c:	e001      	b.n	800f642 <hex2int+0x44>
    return -1;
 800f63e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f642:	4618      	mov	r0, r3
 800f644:	370c      	adds	r7, #12
 800f646:	46bd      	mov	sp, r7
 800f648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64c:	4770      	bx	lr
	...

0800f650 <minmea_check>:

bool minmea_check(const char *sentence)
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b086      	sub	sp, #24
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
    uint8_t checksum = 0x00;
 800f658:	2300      	movs	r3, #0
 800f65a:	75fb      	strb	r3, [r7, #23]

    // Sequence length is limited.
    if (strlen(sentence) > MINMEA_MAX_LENGTH + 3)
 800f65c:	6878      	ldr	r0, [r7, #4]
 800f65e:	f7f0 fdc9 	bl	80001f4 <strlen>
 800f662:	4603      	mov	r3, r0
 800f664:	2b53      	cmp	r3, #83	; 0x53
 800f666:	d901      	bls.n	800f66c <minmea_check+0x1c>
        return false;
 800f668:	2300      	movs	r3, #0
 800f66a:	e063      	b.n	800f734 <minmea_check+0xe4>

    // A valid sentence starts with "$".
    if (*sentence++ != '$')
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	1c5a      	adds	r2, r3, #1
 800f670:	607a      	str	r2, [r7, #4]
 800f672:	781b      	ldrb	r3, [r3, #0]
 800f674:	2b24      	cmp	r3, #36	; 0x24
 800f676:	d008      	beq.n	800f68a <minmea_check+0x3a>
        return false;
 800f678:	2300      	movs	r3, #0
 800f67a:	e05b      	b.n	800f734 <minmea_check+0xe4>

    // The optional checksum is an XOR of all bytes between "$" and "*".
    while (*sentence && *sentence != '*' && isprint((unsigned char) *sentence))
        checksum ^= *sentence++;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	1c5a      	adds	r2, r3, #1
 800f680:	607a      	str	r2, [r7, #4]
 800f682:	781a      	ldrb	r2, [r3, #0]
 800f684:	7dfb      	ldrb	r3, [r7, #23]
 800f686:	4053      	eors	r3, r2
 800f688:	75fb      	strb	r3, [r7, #23]
    while (*sentence && *sentence != '*' && isprint((unsigned char) *sentence))
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	781b      	ldrb	r3, [r3, #0]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d00d      	beq.n	800f6ae <minmea_check+0x5e>
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	781b      	ldrb	r3, [r3, #0]
 800f696:	2b2a      	cmp	r3, #42	; 0x2a
 800f698:	d009      	beq.n	800f6ae <minmea_check+0x5e>
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	781b      	ldrb	r3, [r3, #0]
 800f69e:	3301      	adds	r3, #1
 800f6a0:	4a26      	ldr	r2, [pc, #152]	; (800f73c <minmea_check+0xec>)
 800f6a2:	4413      	add	r3, r2
 800f6a4:	781b      	ldrb	r3, [r3, #0]
 800f6a6:	f003 0397 	and.w	r3, r3, #151	; 0x97
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d1e6      	bne.n	800f67c <minmea_check+0x2c>

    if (*sentence == '*') {
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	781b      	ldrb	r3, [r3, #0]
 800f6b2:	2b2a      	cmp	r3, #42	; 0x2a
 800f6b4:	d129      	bne.n	800f70a <minmea_check+0xba>
        // Extract checksum.
        sentence++;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	3301      	adds	r3, #1
 800f6ba:	607b      	str	r3, [r7, #4]
        int upper = hex2int(*sentence++);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	1c5a      	adds	r2, r3, #1
 800f6c0:	607a      	str	r2, [r7, #4]
 800f6c2:	781b      	ldrb	r3, [r3, #0]
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f7ff ff9a 	bl	800f5fe <hex2int>
 800f6ca:	6138      	str	r0, [r7, #16]
        if (upper == -1)
 800f6cc:	693b      	ldr	r3, [r7, #16]
 800f6ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6d2:	d101      	bne.n	800f6d8 <minmea_check+0x88>
            return false;
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	e02d      	b.n	800f734 <minmea_check+0xe4>
        int lower = hex2int(*sentence++);
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	1c5a      	adds	r2, r3, #1
 800f6dc:	607a      	str	r2, [r7, #4]
 800f6de:	781b      	ldrb	r3, [r3, #0]
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f7ff ff8c 	bl	800f5fe <hex2int>
 800f6e6:	60f8      	str	r0, [r7, #12]
        if (lower == -1)
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6ee:	d101      	bne.n	800f6f4 <minmea_check+0xa4>
            return false;
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	e01f      	b.n	800f734 <minmea_check+0xe4>
        int expected = upper << 4 | lower;
 800f6f4:	693b      	ldr	r3, [r7, #16]
 800f6f6:	011b      	lsls	r3, r3, #4
 800f6f8:	68fa      	ldr	r2, [r7, #12]
 800f6fa:	4313      	orrs	r3, r2
 800f6fc:	60bb      	str	r3, [r7, #8]

        // Check for checksum mismatch.
        if (checksum != expected)
 800f6fe:	7dfb      	ldrb	r3, [r7, #23]
 800f700:	68ba      	ldr	r2, [r7, #8]
 800f702:	429a      	cmp	r2, r3
 800f704:	d001      	beq.n	800f70a <minmea_check+0xba>
            return false;
 800f706:	2300      	movs	r3, #0
 800f708:	e014      	b.n	800f734 <minmea_check+0xe4>
    }

    // The only stuff allowed at this point is a newline.
    if (*sentence && strcmp(sentence, "\n") && strcmp(sentence, "\r\n"))
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	781b      	ldrb	r3, [r3, #0]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d00f      	beq.n	800f732 <minmea_check+0xe2>
 800f712:	490b      	ldr	r1, [pc, #44]	; (800f740 <minmea_check+0xf0>)
 800f714:	6878      	ldr	r0, [r7, #4]
 800f716:	f7f0 fd63 	bl	80001e0 <strcmp>
 800f71a:	4603      	mov	r3, r0
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d008      	beq.n	800f732 <minmea_check+0xe2>
 800f720:	4908      	ldr	r1, [pc, #32]	; (800f744 <minmea_check+0xf4>)
 800f722:	6878      	ldr	r0, [r7, #4]
 800f724:	f7f0 fd5c 	bl	80001e0 <strcmp>
 800f728:	4603      	mov	r3, r0
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d001      	beq.n	800f732 <minmea_check+0xe2>
        return false;
 800f72e:	2300      	movs	r3, #0
 800f730:	e000      	b.n	800f734 <minmea_check+0xe4>

    return true;
 800f732:	2301      	movs	r3, #1
}
 800f734:	4618      	mov	r0, r3
 800f736:	3718      	adds	r7, #24
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd80      	pop	{r7, pc}
 800f73c:	08018178 	.word	0x08018178
 800f740:	08017c4c 	.word	0x08017c4c
 800f744:	08017c50 	.word	0x08017c50

0800f748 <minmea_isfield>:

static inline bool minmea_isfield(char c) {
 800f748:	b480      	push	{r7}
 800f74a:	b083      	sub	sp, #12
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	4603      	mov	r3, r0
 800f750:	71fb      	strb	r3, [r7, #7]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 800f752:	79fb      	ldrb	r3, [r7, #7]
 800f754:	3301      	adds	r3, #1
 800f756:	4a0c      	ldr	r2, [pc, #48]	; (800f788 <minmea_isfield+0x40>)
 800f758:	4413      	add	r3, r2
 800f75a:	781b      	ldrb	r3, [r3, #0]
 800f75c:	f003 0397 	and.w	r3, r3, #151	; 0x97
 800f760:	2b00      	cmp	r3, #0
 800f762:	d007      	beq.n	800f774 <minmea_isfield+0x2c>
 800f764:	79fb      	ldrb	r3, [r7, #7]
 800f766:	2b2c      	cmp	r3, #44	; 0x2c
 800f768:	d004      	beq.n	800f774 <minmea_isfield+0x2c>
 800f76a:	79fb      	ldrb	r3, [r7, #7]
 800f76c:	2b2a      	cmp	r3, #42	; 0x2a
 800f76e:	d001      	beq.n	800f774 <minmea_isfield+0x2c>
 800f770:	2301      	movs	r3, #1
 800f772:	e000      	b.n	800f776 <minmea_isfield+0x2e>
 800f774:	2300      	movs	r3, #0
 800f776:	f003 0301 	and.w	r3, r3, #1
 800f77a:	b2db      	uxtb	r3, r3
}
 800f77c:	4618      	mov	r0, r3
 800f77e:	370c      	adds	r7, #12
 800f780:	46bd      	mov	sp, r7
 800f782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f786:	4770      	bx	lr
 800f788:	08018178 	.word	0x08018178

0800f78c <minmea_scan>:

bool minmea_scan(const char *sentence, const char *format, ...)
{
 800f78c:	b40e      	push	{r1, r2, r3}
 800f78e:	b580      	push	{r7, lr}
 800f790:	b0a7      	sub	sp, #156	; 0x9c
 800f792:	af00      	add	r7, sp, #0
 800f794:	6078      	str	r0, [r7, #4]
    bool result = false;
 800f796:	2300      	movs	r3, #0
 800f798:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    bool optional = false;
 800f79c:	2300      	movs	r3, #0
 800f79e:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
    va_list ap;
    va_start(ap, format);
 800f7a2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800f7a6:	62fb      	str	r3, [r7, #44]	; 0x2c

    const char *field = sentence;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        } else { \
            field = NULL; \
        } \
    } while (0)

    while (*format) {
 800f7ae:	e379      	b.n	800fea4 <minmea_scan+0x718>
        char type = *format++;
 800f7b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f7b4:	1c5a      	adds	r2, r3, #1
 800f7b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800f7ba:	781b      	ldrb	r3, [r3, #0]
 800f7bc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

        if (type == ';') {
 800f7c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f7c4:	2b3b      	cmp	r3, #59	; 0x3b
 800f7c6:	d103      	bne.n	800f7d0 <minmea_scan+0x44>
            // All further fields are optional.
            optional = true;
 800f7c8:	2301      	movs	r3, #1
 800f7ca:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
            continue;
 800f7ce:	e369      	b.n	800fea4 <minmea_scan+0x718>
        }

        if (!field && !optional) {
 800f7d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d107      	bne.n	800f7e8 <minmea_scan+0x5c>
 800f7d8:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800f7dc:	f083 0301 	eor.w	r3, r3, #1
 800f7e0:	b2db      	uxtb	r3, r3
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	f040 8368 	bne.w	800feb8 <minmea_scan+0x72c>
            // Field requested but we ran out if input. Bail out.
            goto parse_error;
        }

        switch (type) {
 800f7e8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f7ec:	3b44      	subs	r3, #68	; 0x44
 800f7ee:	2b30      	cmp	r3, #48	; 0x30
 800f7f0:	f200 8364 	bhi.w	800febc <minmea_scan+0x730>
 800f7f4:	a201      	add	r2, pc, #4	; (adr r2, 800f7fc <minmea_scan+0x70>)
 800f7f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7fa:	bf00      	nop
 800f7fc:	0800fc0f 	.word	0x0800fc0f
 800f800:	0800febd 	.word	0x0800febd
 800f804:	0800febd 	.word	0x0800febd
 800f808:	0800febd 	.word	0x0800febd
 800f80c:	0800febd 	.word	0x0800febd
 800f810:	0800febd 	.word	0x0800febd
 800f814:	0800febd 	.word	0x0800febd
 800f818:	0800febd 	.word	0x0800febd
 800f81c:	0800febd 	.word	0x0800febd
 800f820:	0800febd 	.word	0x0800febd
 800f824:	0800febd 	.word	0x0800febd
 800f828:	0800febd 	.word	0x0800febd
 800f82c:	0800febd 	.word	0x0800febd
 800f830:	0800febd 	.word	0x0800febd
 800f834:	0800febd 	.word	0x0800febd
 800f838:	0800febd 	.word	0x0800febd
 800f83c:	0800fcfd 	.word	0x0800fcfd
 800f840:	0800febd 	.word	0x0800febd
 800f844:	0800febd 	.word	0x0800febd
 800f848:	0800febd 	.word	0x0800febd
 800f84c:	0800febd 	.word	0x0800febd
 800f850:	0800febd 	.word	0x0800febd
 800f854:	0800febd 	.word	0x0800febd
 800f858:	0800febd 	.word	0x0800febd
 800f85c:	0800febd 	.word	0x0800febd
 800f860:	0800febd 	.word	0x0800febd
 800f864:	0800febd 	.word	0x0800febd
 800f868:	0800fe6f 	.word	0x0800fe6f
 800f86c:	0800febd 	.word	0x0800febd
 800f870:	0800febd 	.word	0x0800febd
 800f874:	0800febd 	.word	0x0800febd
 800f878:	0800f8c1 	.word	0x0800f8c1
 800f87c:	0800f8fb 	.word	0x0800f8fb
 800f880:	0800febd 	.word	0x0800febd
 800f884:	0800f9a1 	.word	0x0800f9a1
 800f888:	0800febd 	.word	0x0800febd
 800f88c:	0800febd 	.word	0x0800febd
 800f890:	0800fb21 	.word	0x0800fb21
 800f894:	0800febd 	.word	0x0800febd
 800f898:	0800febd 	.word	0x0800febd
 800f89c:	0800febd 	.word	0x0800febd
 800f8a0:	0800febd 	.word	0x0800febd
 800f8a4:	0800febd 	.word	0x0800febd
 800f8a8:	0800febd 	.word	0x0800febd
 800f8ac:	0800febd 	.word	0x0800febd
 800f8b0:	0800febd 	.word	0x0800febd
 800f8b4:	0800febd 	.word	0x0800febd
 800f8b8:	0800fb5f 	.word	0x0800fb5f
 800f8bc:	0800fba1 	.word	0x0800fba1
            case 'c': { // Single character field (char).
                char value = '\0';
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

                if (field && minmea_isfield(*field))
 800f8c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d00d      	beq.n	800f8ea <minmea_scan+0x15e>
 800f8ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f8d2:	781b      	ldrb	r3, [r3, #0]
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f7ff ff37 	bl	800f748 <minmea_isfield>
 800f8da:	4603      	mov	r3, r0
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d004      	beq.n	800f8ea <minmea_scan+0x15e>
                    value = *field;
 800f8e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f8e4:	781b      	ldrb	r3, [r3, #0]
 800f8e6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

                *va_arg(ap, char *) = value;
 800f8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ec:	1d1a      	adds	r2, r3, #4
 800f8ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 800f8f6:	701a      	strb	r2, [r3, #0]
            } break;
 800f8f8:	e2ba      	b.n	800fe70 <minmea_scan+0x6e4>

            case 'd': { // Single character direction field (int).
                int value = 0;
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                if (field && minmea_isfield(*field)) {
 800f900:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f904:	2b00      	cmp	r3, #0
 800f906:	d042      	beq.n	800f98e <minmea_scan+0x202>
 800f908:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f90c:	781b      	ldrb	r3, [r3, #0]
 800f90e:	4618      	mov	r0, r3
 800f910:	f7ff ff1a 	bl	800f748 <minmea_isfield>
 800f914:	4603      	mov	r3, r0
 800f916:	2b00      	cmp	r3, #0
 800f918:	d039      	beq.n	800f98e <minmea_scan+0x202>
                    switch (*field) {
 800f91a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f91e:	781b      	ldrb	r3, [r3, #0]
 800f920:	3b45      	subs	r3, #69	; 0x45
 800f922:	2b12      	cmp	r3, #18
 800f924:	f200 82cc 	bhi.w	800fec0 <minmea_scan+0x734>
 800f928:	a201      	add	r2, pc, #4	; (adr r2, 800f930 <minmea_scan+0x1a4>)
 800f92a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f92e:	bf00      	nop
 800f930:	0800f97d 	.word	0x0800f97d
 800f934:	0800fec1 	.word	0x0800fec1
 800f938:	0800fec1 	.word	0x0800fec1
 800f93c:	0800fec1 	.word	0x0800fec1
 800f940:	0800fec1 	.word	0x0800fec1
 800f944:	0800fec1 	.word	0x0800fec1
 800f948:	0800fec1 	.word	0x0800fec1
 800f94c:	0800fec1 	.word	0x0800fec1
 800f950:	0800fec1 	.word	0x0800fec1
 800f954:	0800f97d 	.word	0x0800f97d
 800f958:	0800fec1 	.word	0x0800fec1
 800f95c:	0800fec1 	.word	0x0800fec1
 800f960:	0800fec1 	.word	0x0800fec1
 800f964:	0800fec1 	.word	0x0800fec1
 800f968:	0800f985 	.word	0x0800f985
 800f96c:	0800fec1 	.word	0x0800fec1
 800f970:	0800fec1 	.word	0x0800fec1
 800f974:	0800fec1 	.word	0x0800fec1
 800f978:	0800f985 	.word	0x0800f985
                        case 'N':
                        case 'E':
                            value = 1;
 800f97c:	2301      	movs	r3, #1
 800f97e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                            break;
 800f982:	e005      	b.n	800f990 <minmea_scan+0x204>
                        case 'S':
                        case 'W':
                            value = -1;
 800f984:	f04f 33ff 	mov.w	r3, #4294967295
 800f988:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                            break;
 800f98c:	e000      	b.n	800f990 <minmea_scan+0x204>
                        default:
                            goto parse_error;
                    }
                }
 800f98e:	bf00      	nop

                *va_arg(ap, int *) = value;
 800f990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f992:	1d1a      	adds	r2, r3, #4
 800f994:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f99c:	601a      	str	r2, [r3, #0]
            } break;
 800f99e:	e267      	b.n	800fe70 <minmea_scan+0x6e4>

            case 'f': { // Fractional value with scale (struct minmea_float).
                int sign = 0;
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                int_least32_t value = -1;
 800f9a6:	f04f 33ff 	mov.w	r3, #4294967295
 800f9aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                int_least32_t scale = 0;
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	67fb      	str	r3, [r7, #124]	; 0x7c

                if (field) {
 800f9b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d07f      	beq.n	800faba <minmea_scan+0x32e>
                    while (minmea_isfield(*field)) {
 800f9ba:	e075      	b.n	800faa8 <minmea_scan+0x31c>
                        if (*field == '+' && !sign && value == -1) {
 800f9bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f9c0:	781b      	ldrb	r3, [r3, #0]
 800f9c2:	2b2b      	cmp	r3, #43	; 0x2b
 800f9c4:	d10c      	bne.n	800f9e0 <minmea_scan+0x254>
 800f9c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d108      	bne.n	800f9e0 <minmea_scan+0x254>
 800f9ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f9d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9d6:	d103      	bne.n	800f9e0 <minmea_scan+0x254>
                            sign = 1;
 800f9d8:	2301      	movs	r3, #1
 800f9da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f9de:	e05e      	b.n	800fa9e <minmea_scan+0x312>
                        } else if (*field == '-' && !sign && value == -1) {
 800f9e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f9e4:	781b      	ldrb	r3, [r3, #0]
 800f9e6:	2b2d      	cmp	r3, #45	; 0x2d
 800f9e8:	d10d      	bne.n	800fa06 <minmea_scan+0x27a>
 800f9ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d109      	bne.n	800fa06 <minmea_scan+0x27a>
 800f9f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f9f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9fa:	d104      	bne.n	800fa06 <minmea_scan+0x27a>
                            sign = -1;
 800f9fc:	f04f 33ff 	mov.w	r3, #4294967295
 800fa00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fa04:	e04b      	b.n	800fa9e <minmea_scan+0x312>
                        } else if (isdigit((unsigned char) *field)) {
 800fa06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fa0a:	781b      	ldrb	r3, [r3, #0]
 800fa0c:	3301      	adds	r3, #1
 800fa0e:	4ab9      	ldr	r2, [pc, #740]	; (800fcf4 <minmea_scan+0x568>)
 800fa10:	4413      	add	r3, r2
 800fa12:	781b      	ldrb	r3, [r3, #0]
 800fa14:	f003 0304 	and.w	r3, r3, #4
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d034      	beq.n	800fa86 <minmea_scan+0x2fa>
                            int digit = *field - '0';
 800fa1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fa20:	781b      	ldrb	r3, [r3, #0]
 800fa22:	3b30      	subs	r3, #48	; 0x30
 800fa24:	63bb      	str	r3, [r7, #56]	; 0x38
                            if (value == -1)
 800fa26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fa2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa2e:	d102      	bne.n	800fa36 <minmea_scan+0x2aa>
                                value = 0;
 800fa30:	2300      	movs	r3, #0
 800fa32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                            if (value > (INT_LEAST32_MAX-digit) / 10) {
 800fa36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa38:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fa3c:	1a9b      	subs	r3, r3, r2
 800fa3e:	4aae      	ldr	r2, [pc, #696]	; (800fcf8 <minmea_scan+0x56c>)
 800fa40:	fb82 1203 	smull	r1, r2, r2, r3
 800fa44:	1092      	asrs	r2, r2, #2
 800fa46:	17db      	asrs	r3, r3, #31
 800fa48:	1ad3      	subs	r3, r2, r3
 800fa4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fa4e:	429a      	cmp	r2, r3
 800fa50:	dd04      	ble.n	800fa5c <minmea_scan+0x2d0>
                                /* we ran out of bits, what do we do? */
                                if (scale) {
 800fa52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	f000 8235 	beq.w	800fec4 <minmea_scan+0x738>
                                    /* truncate extra precision */
                                    break;
 800fa5a:	e02e      	b.n	800faba <minmea_scan+0x32e>
                                } else {
                                    /* integer overflow. bail out. */
                                    goto parse_error;
                                }
                            }
                            value = (10 * value) + digit;
 800fa5c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fa60:	4613      	mov	r3, r2
 800fa62:	009b      	lsls	r3, r3, #2
 800fa64:	4413      	add	r3, r2
 800fa66:	005b      	lsls	r3, r3, #1
 800fa68:	461a      	mov	r2, r3
 800fa6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa6c:	4413      	add	r3, r2
 800fa6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                            if (scale)
 800fa72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d012      	beq.n	800fa9e <minmea_scan+0x312>
                                scale *= 10;
 800fa78:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fa7a:	4613      	mov	r3, r2
 800fa7c:	009b      	lsls	r3, r3, #2
 800fa7e:	4413      	add	r3, r2
 800fa80:	005b      	lsls	r3, r3, #1
 800fa82:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fa84:	e00b      	b.n	800fa9e <minmea_scan+0x312>
                        } else if (*field == '.' && scale == 0) {
 800fa86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fa8a:	781b      	ldrb	r3, [r3, #0]
 800fa8c:	2b2e      	cmp	r3, #46	; 0x2e
 800fa8e:	f040 821b 	bne.w	800fec8 <minmea_scan+0x73c>
 800fa92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	f040 8217 	bne.w	800fec8 <minmea_scan+0x73c>
                            scale = 1;
 800fa9a:	2301      	movs	r3, #1
 800fa9c:	67fb      	str	r3, [r7, #124]	; 0x7c
                        } else {
                            goto parse_error;
                        }
                        field++;
 800fa9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800faa2:	3301      	adds	r3, #1
 800faa4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                    while (minmea_isfield(*field)) {
 800faa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800faac:	781b      	ldrb	r3, [r3, #0]
 800faae:	4618      	mov	r0, r3
 800fab0:	f7ff fe4a 	bl	800f748 <minmea_isfield>
 800fab4:	4603      	mov	r3, r0
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d180      	bne.n	800f9bc <minmea_scan+0x230>
                    }
                }

                if ((sign || scale) && value == -1)
 800faba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d102      	bne.n	800fac8 <minmea_scan+0x33c>
 800fac2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d005      	beq.n	800fad4 <minmea_scan+0x348>
 800fac8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800facc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fad0:	f000 81fc 	beq.w	800fecc <minmea_scan+0x740>
                    goto parse_error;

                if (value == -1) {
 800fad4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fadc:	d105      	bne.n	800faea <minmea_scan+0x35e>
                    /* No digits were scanned. */
                    value = 0;
 800fade:	2300      	movs	r3, #0
 800fae0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    scale = 0;
 800fae4:	2300      	movs	r3, #0
 800fae6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fae8:	e004      	b.n	800faf4 <minmea_scan+0x368>
                } else if (scale == 0) {
 800faea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800faec:	2b00      	cmp	r3, #0
 800faee:	d101      	bne.n	800faf4 <minmea_scan+0x368>
                    /* No decimal point. */
                    scale = 1;
 800faf0:	2301      	movs	r3, #1
 800faf2:	67fb      	str	r3, [r7, #124]	; 0x7c
                }
                if (sign)
 800faf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d007      	beq.n	800fb0c <minmea_scan+0x380>
                    value *= sign;
 800fafc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fb00:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fb04:	fb02 f303 	mul.w	r3, r2, r3
 800fb08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                *va_arg(ap, struct minmea_float *) = (struct minmea_float) {value, scale};
 800fb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb0e:	1d1a      	adds	r2, r3, #4
 800fb10:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fb18:	601a      	str	r2, [r3, #0]
 800fb1a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fb1c:	605a      	str	r2, [r3, #4]
            } break;
 800fb1e:	e1a7      	b.n	800fe70 <minmea_scan+0x6e4>

            case 'i': { // Integer value, default 0 (int).
                int value = 0;
 800fb20:	2300      	movs	r3, #0
 800fb22:	67bb      	str	r3, [r7, #120]	; 0x78

                if (field) {
 800fb24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d011      	beq.n	800fb50 <minmea_scan+0x3c4>
                    char *endptr;
                    value = strtol(field, &endptr, 10);
 800fb2c:	f107 0320 	add.w	r3, r7, #32
 800fb30:	220a      	movs	r2, #10
 800fb32:	4619      	mov	r1, r3
 800fb34:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800fb38:	f003 ff40 	bl	80139bc <strtol>
 800fb3c:	67b8      	str	r0, [r7, #120]	; 0x78
                    if (minmea_isfield(*endptr))
 800fb3e:	6a3b      	ldr	r3, [r7, #32]
 800fb40:	781b      	ldrb	r3, [r3, #0]
 800fb42:	4618      	mov	r0, r3
 800fb44:	f7ff fe00 	bl	800f748 <minmea_isfield>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	f040 81c0 	bne.w	800fed0 <minmea_scan+0x744>
                        goto parse_error;
                }

                *va_arg(ap, int *) = value;
 800fb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb52:	1d1a      	adds	r2, r3, #4
 800fb54:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fb5a:	601a      	str	r2, [r3, #0]
            } break;
 800fb5c:	e188      	b.n	800fe70 <minmea_scan+0x6e4>

            case 's': { // String value (char *).
                char *buf = va_arg(ap, char *);
 800fb5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb60:	1d1a      	adds	r2, r3, #4
 800fb62:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	677b      	str	r3, [r7, #116]	; 0x74

                if (field) {
 800fb68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d013      	beq.n	800fb98 <minmea_scan+0x40c>
                    while (minmea_isfield(*field))
 800fb70:	e009      	b.n	800fb86 <minmea_scan+0x3fa>
                        *buf++ = *field++;
 800fb72:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800fb76:	1c53      	adds	r3, r2, #1
 800fb78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fb7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fb7e:	1c59      	adds	r1, r3, #1
 800fb80:	6779      	str	r1, [r7, #116]	; 0x74
 800fb82:	7812      	ldrb	r2, [r2, #0]
 800fb84:	701a      	strb	r2, [r3, #0]
                    while (minmea_isfield(*field))
 800fb86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fb8a:	781b      	ldrb	r3, [r3, #0]
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	f7ff fddb 	bl	800f748 <minmea_isfield>
 800fb92:	4603      	mov	r3, r0
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d1ec      	bne.n	800fb72 <minmea_scan+0x3e6>
                }

                *buf = '\0';
 800fb98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	701a      	strb	r2, [r3, #0]
            } break;
 800fb9e:	e167      	b.n	800fe70 <minmea_scan+0x6e4>

            case 't': { // NMEA talker+sentence identifier (char *).
                // This field is always mandatory.
                if (!field)
 800fba0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	f000 8195 	beq.w	800fed4 <minmea_scan+0x748>
                    goto parse_error;

                if (field[0] != '$')
 800fbaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fbae:	781b      	ldrb	r3, [r3, #0]
 800fbb0:	2b24      	cmp	r3, #36	; 0x24
 800fbb2:	f040 8191 	bne.w	800fed8 <minmea_scan+0x74c>
                    goto parse_error;
                for (int i=0; i<5; i++)
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	673b      	str	r3, [r7, #112]	; 0x70
 800fbba:	e013      	b.n	800fbe4 <minmea_scan+0x458>
                    if (!minmea_isfield(field[1+i]))
 800fbbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fbbe:	3301      	adds	r3, #1
 800fbc0:	461a      	mov	r2, r3
 800fbc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fbc6:	4413      	add	r3, r2
 800fbc8:	781b      	ldrb	r3, [r3, #0]
 800fbca:	4618      	mov	r0, r3
 800fbcc:	f7ff fdbc 	bl	800f748 <minmea_isfield>
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	f083 0301 	eor.w	r3, r3, #1
 800fbd6:	b2db      	uxtb	r3, r3
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	f040 817f 	bne.w	800fedc <minmea_scan+0x750>
                for (int i=0; i<5; i++)
 800fbde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fbe0:	3301      	adds	r3, #1
 800fbe2:	673b      	str	r3, [r7, #112]	; 0x70
 800fbe4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fbe6:	2b04      	cmp	r3, #4
 800fbe8:	dde8      	ble.n	800fbbc <minmea_scan+0x430>
                        goto parse_error;

                char *buf = va_arg(ap, char *);
 800fbea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbec:	1d1a      	adds	r2, r3, #4
 800fbee:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	63fb      	str	r3, [r7, #60]	; 0x3c
                memcpy(buf, field+1, 5);
 800fbf4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fbf8:	3301      	adds	r3, #1
 800fbfa:	2205      	movs	r2, #5
 800fbfc:	4619      	mov	r1, r3
 800fbfe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fc00:	f002 f818 	bl	8011c34 <memcpy>
                buf[5] = '\0';
 800fc04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc06:	3305      	adds	r3, #5
 800fc08:	2200      	movs	r2, #0
 800fc0a:	701a      	strb	r2, [r3, #0]
            } break;
 800fc0c:	e130      	b.n	800fe70 <minmea_scan+0x6e4>

            case 'D': { // Date (int, int, int), -1 if empty.
                struct minmea_date *date = va_arg(ap, struct minmea_date *);
 800fc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc10:	1d1a      	adds	r2, r3, #4
 800fc12:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	633b      	str	r3, [r7, #48]	; 0x30

                int d = -1, m = -1, y = -1;
 800fc18:	f04f 33ff 	mov.w	r3, #4294967295
 800fc1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fc1e:	f04f 33ff 	mov.w	r3, #4294967295
 800fc22:	66bb      	str	r3, [r7, #104]	; 0x68
 800fc24:	f04f 33ff 	mov.w	r3, #4294967295
 800fc28:	667b      	str	r3, [r7, #100]	; 0x64

                if (field && minmea_isfield(*field)) {
 800fc2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d055      	beq.n	800fcde <minmea_scan+0x552>
 800fc32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fc36:	781b      	ldrb	r3, [r3, #0]
 800fc38:	4618      	mov	r0, r3
 800fc3a:	f7ff fd85 	bl	800f748 <minmea_isfield>
 800fc3e:	4603      	mov	r3, r0
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d04c      	beq.n	800fcde <minmea_scan+0x552>
                    // Always six digits.
                    for (int i=0; i<6; i++)
 800fc44:	2300      	movs	r3, #0
 800fc46:	663b      	str	r3, [r7, #96]	; 0x60
 800fc48:	e010      	b.n	800fc6c <minmea_scan+0x4e0>
                        if (!isdigit((unsigned char) field[i]))
 800fc4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc4c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800fc50:	4413      	add	r3, r2
 800fc52:	781b      	ldrb	r3, [r3, #0]
 800fc54:	3301      	adds	r3, #1
 800fc56:	4a27      	ldr	r2, [pc, #156]	; (800fcf4 <minmea_scan+0x568>)
 800fc58:	4413      	add	r3, r2
 800fc5a:	781b      	ldrb	r3, [r3, #0]
 800fc5c:	f003 0304 	and.w	r3, r3, #4
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	f000 813d 	beq.w	800fee0 <minmea_scan+0x754>
                    for (int i=0; i<6; i++)
 800fc66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc68:	3301      	adds	r3, #1
 800fc6a:	663b      	str	r3, [r7, #96]	; 0x60
 800fc6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc6e:	2b05      	cmp	r3, #5
 800fc70:	ddeb      	ble.n	800fc4a <minmea_scan+0x4be>
                            goto parse_error;

                    d = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 800fc72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fc76:	781b      	ldrb	r3, [r3, #0]
 800fc78:	773b      	strb	r3, [r7, #28]
 800fc7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fc7e:	785b      	ldrb	r3, [r3, #1]
 800fc80:	777b      	strb	r3, [r7, #29]
 800fc82:	2300      	movs	r3, #0
 800fc84:	77bb      	strb	r3, [r7, #30]
 800fc86:	f107 031c 	add.w	r3, r7, #28
 800fc8a:	220a      	movs	r2, #10
 800fc8c:	2100      	movs	r1, #0
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f003 fe94 	bl	80139bc <strtol>
 800fc94:	66f8      	str	r0, [r7, #108]	; 0x6c
                    m = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 800fc96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fc9a:	789b      	ldrb	r3, [r3, #2]
 800fc9c:	763b      	strb	r3, [r7, #24]
 800fc9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fca2:	78db      	ldrb	r3, [r3, #3]
 800fca4:	767b      	strb	r3, [r7, #25]
 800fca6:	2300      	movs	r3, #0
 800fca8:	76bb      	strb	r3, [r7, #26]
 800fcaa:	f107 0318 	add.w	r3, r7, #24
 800fcae:	220a      	movs	r2, #10
 800fcb0:	2100      	movs	r1, #0
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f003 fe82 	bl	80139bc <strtol>
 800fcb8:	66b8      	str	r0, [r7, #104]	; 0x68
                    y = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 800fcba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fcbe:	791b      	ldrb	r3, [r3, #4]
 800fcc0:	753b      	strb	r3, [r7, #20]
 800fcc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fcc6:	795b      	ldrb	r3, [r3, #5]
 800fcc8:	757b      	strb	r3, [r7, #21]
 800fcca:	2300      	movs	r3, #0
 800fccc:	75bb      	strb	r3, [r7, #22]
 800fcce:	f107 0314 	add.w	r3, r7, #20
 800fcd2:	220a      	movs	r2, #10
 800fcd4:	2100      	movs	r1, #0
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f003 fe70 	bl	80139bc <strtol>
 800fcdc:	6678      	str	r0, [r7, #100]	; 0x64
                }

                date->day = d;
 800fcde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fce0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fce2:	601a      	str	r2, [r3, #0]
                date->month = m;
 800fce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fce6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fce8:	605a      	str	r2, [r3, #4]
                date->year = y;
 800fcea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fcee:	609a      	str	r2, [r3, #8]
            } break;
 800fcf0:	e0be      	b.n	800fe70 <minmea_scan+0x6e4>
 800fcf2:	bf00      	nop
 800fcf4:	08018178 	.word	0x08018178
 800fcf8:	66666667 	.word	0x66666667

            case 'T': { // Time (int, int, int, int), -1 if empty.
                struct minmea_time *time = va_arg(ap, struct minmea_time *);
 800fcfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcfe:	1d1a      	adds	r2, r3, #4
 800fd00:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	637b      	str	r3, [r7, #52]	; 0x34

                int h = -1, i = -1, s = -1, u = -1;
 800fd06:	f04f 33ff 	mov.w	r3, #4294967295
 800fd0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fd0c:	f04f 33ff 	mov.w	r3, #4294967295
 800fd10:	65bb      	str	r3, [r7, #88]	; 0x58
 800fd12:	f04f 33ff 	mov.w	r3, #4294967295
 800fd16:	657b      	str	r3, [r7, #84]	; 0x54
 800fd18:	f04f 33ff 	mov.w	r3, #4294967295
 800fd1c:	653b      	str	r3, [r7, #80]	; 0x50

                if (field && minmea_isfield(*field)) {
 800fd1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	f000 8096 	beq.w	800fe54 <minmea_scan+0x6c8>
 800fd28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fd2c:	781b      	ldrb	r3, [r3, #0]
 800fd2e:	4618      	mov	r0, r3
 800fd30:	f7ff fd0a 	bl	800f748 <minmea_isfield>
 800fd34:	4603      	mov	r3, r0
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	f000 808c 	beq.w	800fe54 <minmea_scan+0x6c8>
                    // Minimum required: integer time.
                    for (int i=0; i<6; i++)
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fd40:	e010      	b.n	800fd64 <minmea_scan+0x5d8>
                        if (!isdigit((unsigned char) field[i]))
 800fd42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd44:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800fd48:	4413      	add	r3, r2
 800fd4a:	781b      	ldrb	r3, [r3, #0]
 800fd4c:	3301      	adds	r3, #1
 800fd4e:	4a6a      	ldr	r2, [pc, #424]	; (800fef8 <minmea_scan+0x76c>)
 800fd50:	4413      	add	r3, r2
 800fd52:	781b      	ldrb	r3, [r3, #0]
 800fd54:	f003 0304 	and.w	r3, r3, #4
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	f000 80c3 	beq.w	800fee4 <minmea_scan+0x758>
                    for (int i=0; i<6; i++)
 800fd5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd60:	3301      	adds	r3, #1
 800fd62:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fd64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd66:	2b05      	cmp	r3, #5
 800fd68:	ddeb      	ble.n	800fd42 <minmea_scan+0x5b6>
                            goto parse_error;

                    h = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 800fd6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fd6e:	781b      	ldrb	r3, [r3, #0]
 800fd70:	743b      	strb	r3, [r7, #16]
 800fd72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fd76:	785b      	ldrb	r3, [r3, #1]
 800fd78:	747b      	strb	r3, [r7, #17]
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	74bb      	strb	r3, [r7, #18]
 800fd7e:	f107 0310 	add.w	r3, r7, #16
 800fd82:	220a      	movs	r2, #10
 800fd84:	2100      	movs	r1, #0
 800fd86:	4618      	mov	r0, r3
 800fd88:	f003 fe18 	bl	80139bc <strtol>
 800fd8c:	65f8      	str	r0, [r7, #92]	; 0x5c
                    i = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 800fd8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fd92:	789b      	ldrb	r3, [r3, #2]
 800fd94:	733b      	strb	r3, [r7, #12]
 800fd96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fd9a:	78db      	ldrb	r3, [r3, #3]
 800fd9c:	737b      	strb	r3, [r7, #13]
 800fd9e:	2300      	movs	r3, #0
 800fda0:	73bb      	strb	r3, [r7, #14]
 800fda2:	f107 030c 	add.w	r3, r7, #12
 800fda6:	220a      	movs	r2, #10
 800fda8:	2100      	movs	r1, #0
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f003 fe06 	bl	80139bc <strtol>
 800fdb0:	65b8      	str	r0, [r7, #88]	; 0x58
                    s = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 800fdb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fdb6:	791b      	ldrb	r3, [r3, #4]
 800fdb8:	723b      	strb	r3, [r7, #8]
 800fdba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fdbe:	795b      	ldrb	r3, [r3, #5]
 800fdc0:	727b      	strb	r3, [r7, #9]
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	72bb      	strb	r3, [r7, #10]
 800fdc6:	f107 0308 	add.w	r3, r7, #8
 800fdca:	220a      	movs	r2, #10
 800fdcc:	2100      	movs	r1, #0
 800fdce:	4618      	mov	r0, r3
 800fdd0:	f003 fdf4 	bl	80139bc <strtol>
 800fdd4:	6578      	str	r0, [r7, #84]	; 0x54
                    field += 6;
 800fdd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fdda:	3306      	adds	r3, #6
 800fddc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                    // Extra: fractional time. Saved as microseconds.
                    if (*field++ == '.') {
 800fde0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fde4:	1c5a      	adds	r2, r3, #1
 800fde6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800fdea:	781b      	ldrb	r3, [r3, #0]
 800fdec:	2b2e      	cmp	r3, #46	; 0x2e
 800fdee:	d12f      	bne.n	800fe50 <minmea_scan+0x6c4>
                        int value = 0;
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	64bb      	str	r3, [r7, #72]	; 0x48
                        int scale = 1000000;
 800fdf4:	4b41      	ldr	r3, [pc, #260]	; (800fefc <minmea_scan+0x770>)
 800fdf6:	647b      	str	r3, [r7, #68]	; 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 800fdf8:	e016      	b.n	800fe28 <minmea_scan+0x69c>
                            value = (value * 10) + (*field++ - '0');
 800fdfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fdfc:	4613      	mov	r3, r2
 800fdfe:	009b      	lsls	r3, r3, #2
 800fe00:	4413      	add	r3, r2
 800fe02:	005b      	lsls	r3, r3, #1
 800fe04:	4619      	mov	r1, r3
 800fe06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fe0a:	1c5a      	adds	r2, r3, #1
 800fe0c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800fe10:	781b      	ldrb	r3, [r3, #0]
 800fe12:	3b30      	subs	r3, #48	; 0x30
 800fe14:	440b      	add	r3, r1
 800fe16:	64bb      	str	r3, [r7, #72]	; 0x48
                            scale /= 10;
 800fe18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe1a:	4a39      	ldr	r2, [pc, #228]	; (800ff00 <minmea_scan+0x774>)
 800fe1c:	fb82 1203 	smull	r1, r2, r2, r3
 800fe20:	1092      	asrs	r2, r2, #2
 800fe22:	17db      	asrs	r3, r3, #31
 800fe24:	1ad3      	subs	r3, r2, r3
 800fe26:	647b      	str	r3, [r7, #68]	; 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 800fe28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fe2c:	781b      	ldrb	r3, [r3, #0]
 800fe2e:	3301      	adds	r3, #1
 800fe30:	4a31      	ldr	r2, [pc, #196]	; (800fef8 <minmea_scan+0x76c>)
 800fe32:	4413      	add	r3, r2
 800fe34:	781b      	ldrb	r3, [r3, #0]
 800fe36:	f003 0304 	and.w	r3, r3, #4
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d002      	beq.n	800fe44 <minmea_scan+0x6b8>
 800fe3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe40:	2b01      	cmp	r3, #1
 800fe42:	dcda      	bgt.n	800fdfa <minmea_scan+0x66e>
                        }
                        u = value * scale;
 800fe44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fe48:	fb02 f303 	mul.w	r3, r2, r3
 800fe4c:	653b      	str	r3, [r7, #80]	; 0x50
 800fe4e:	e001      	b.n	800fe54 <minmea_scan+0x6c8>
                    } else {
                        u = 0;
 800fe50:	2300      	movs	r3, #0
 800fe52:	653b      	str	r3, [r7, #80]	; 0x50
                    }
                }

                time->hours = h;
 800fe54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe56:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fe58:	601a      	str	r2, [r3, #0]
                time->minutes = i;
 800fe5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fe5e:	605a      	str	r2, [r3, #4]
                time->seconds = s;
 800fe60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe62:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fe64:	609a      	str	r2, [r3, #8]
                time->microseconds = u;
 800fe66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fe6a:	60da      	str	r2, [r3, #12]
            } break;
 800fe6c:	e000      	b.n	800fe70 <minmea_scan+0x6e4>

            case '_': { // Ignore the field.
            } break;
 800fe6e:	bf00      	nop
            default: { // Unknown.
                goto parse_error;
            } break;
        }

        next_field();
 800fe70:	e002      	b.n	800fe78 <minmea_scan+0x6ec>
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	3301      	adds	r3, #1
 800fe76:	607b      	str	r3, [r7, #4]
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	781b      	ldrb	r3, [r3, #0]
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	f7ff fc63 	bl	800f748 <minmea_isfield>
 800fe82:	4603      	mov	r3, r0
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d1f4      	bne.n	800fe72 <minmea_scan+0x6e6>
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	781b      	ldrb	r3, [r3, #0]
 800fe8c:	2b2c      	cmp	r3, #44	; 0x2c
 800fe8e:	d106      	bne.n	800fe9e <minmea_scan+0x712>
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	3301      	adds	r3, #1
 800fe94:	607b      	str	r3, [r7, #4]
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fe9c:	e002      	b.n	800fea4 <minmea_scan+0x718>
 800fe9e:	2300      	movs	r3, #0
 800fea0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    while (*format) {
 800fea4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fea8:	781b      	ldrb	r3, [r3, #0]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	f47f ac80 	bne.w	800f7b0 <minmea_scan+0x24>
    }

    result = true;
 800feb0:	2301      	movs	r3, #1
 800feb2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800feb6:	e016      	b.n	800fee6 <minmea_scan+0x75a>
            goto parse_error;
 800feb8:	bf00      	nop
 800feba:	e014      	b.n	800fee6 <minmea_scan+0x75a>
                goto parse_error;
 800febc:	bf00      	nop
 800febe:	e012      	b.n	800fee6 <minmea_scan+0x75a>
                            goto parse_error;
 800fec0:	bf00      	nop
 800fec2:	e010      	b.n	800fee6 <minmea_scan+0x75a>
                                    goto parse_error;
 800fec4:	bf00      	nop
 800fec6:	e00e      	b.n	800fee6 <minmea_scan+0x75a>
                            goto parse_error;
 800fec8:	bf00      	nop
 800feca:	e00c      	b.n	800fee6 <minmea_scan+0x75a>
                    goto parse_error;
 800fecc:	bf00      	nop
 800fece:	e00a      	b.n	800fee6 <minmea_scan+0x75a>
                        goto parse_error;
 800fed0:	bf00      	nop
 800fed2:	e008      	b.n	800fee6 <minmea_scan+0x75a>
                    goto parse_error;
 800fed4:	bf00      	nop
 800fed6:	e006      	b.n	800fee6 <minmea_scan+0x75a>
                    goto parse_error;
 800fed8:	bf00      	nop
 800feda:	e004      	b.n	800fee6 <minmea_scan+0x75a>
                        goto parse_error;
 800fedc:	bf00      	nop
 800fede:	e002      	b.n	800fee6 <minmea_scan+0x75a>
                            goto parse_error;
 800fee0:	bf00      	nop
 800fee2:	e000      	b.n	800fee6 <minmea_scan+0x75a>
                            goto parse_error;
 800fee4:	bf00      	nop

parse_error:
    va_end(ap);
    return result;
 800fee6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800feea:	4618      	mov	r0, r3
 800feec:	379c      	adds	r7, #156	; 0x9c
 800feee:	46bd      	mov	sp, r7
 800fef0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fef4:	b003      	add	sp, #12
 800fef6:	4770      	bx	lr
 800fef8:	08018178 	.word	0x08018178
 800fefc:	000f4240 	.word	0x000f4240
 800ff00:	66666667 	.word	0x66666667

0800ff04 <minmea_sentence_id>:

    return true;
}

enum minmea_sentence_id minmea_sentence_id(const char *sentence)
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b084      	sub	sp, #16
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
    if (!minmea_check(sentence))
 800ff0c:	6878      	ldr	r0, [r7, #4]
 800ff0e:	f7ff fb9f 	bl	800f650 <minmea_check>
 800ff12:	4603      	mov	r3, r0
 800ff14:	f083 0301 	eor.w	r3, r3, #1
 800ff18:	b2db      	uxtb	r3, r3
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d002      	beq.n	800ff24 <minmea_sentence_id+0x20>
        return MINMEA_INVALID;
 800ff1e:	f04f 33ff 	mov.w	r3, #4294967295
 800ff22:	e04c      	b.n	800ffbe <minmea_sentence_id+0xba>

    char type[6];
    if (!minmea_scan(sentence, "t", type))
 800ff24:	f107 0308 	add.w	r3, r7, #8
 800ff28:	461a      	mov	r2, r3
 800ff2a:	4927      	ldr	r1, [pc, #156]	; (800ffc8 <minmea_sentence_id+0xc4>)
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	f7ff fc2d 	bl	800f78c <minmea_scan>
 800ff32:	4603      	mov	r3, r0
 800ff34:	f083 0301 	eor.w	r3, r3, #1
 800ff38:	b2db      	uxtb	r3, r3
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d002      	beq.n	800ff44 <minmea_sentence_id+0x40>
        return MINMEA_INVALID;
 800ff3e:	f04f 33ff 	mov.w	r3, #4294967295
 800ff42:	e03c      	b.n	800ffbe <minmea_sentence_id+0xba>

    if (!strcmp(type+2, "RMC"))
 800ff44:	f107 0308 	add.w	r3, r7, #8
 800ff48:	3302      	adds	r3, #2
 800ff4a:	4920      	ldr	r1, [pc, #128]	; (800ffcc <minmea_sentence_id+0xc8>)
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f7f0 f947 	bl	80001e0 <strcmp>
 800ff52:	4603      	mov	r3, r0
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d101      	bne.n	800ff5c <minmea_sentence_id+0x58>
        return MINMEA_SENTENCE_RMC;
 800ff58:	2301      	movs	r3, #1
 800ff5a:	e030      	b.n	800ffbe <minmea_sentence_id+0xba>
    if (!strcmp(type+2, "GGA"))
 800ff5c:	f107 0308 	add.w	r3, r7, #8
 800ff60:	3302      	adds	r3, #2
 800ff62:	491b      	ldr	r1, [pc, #108]	; (800ffd0 <minmea_sentence_id+0xcc>)
 800ff64:	4618      	mov	r0, r3
 800ff66:	f7f0 f93b 	bl	80001e0 <strcmp>
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d101      	bne.n	800ff74 <minmea_sentence_id+0x70>
        return MINMEA_SENTENCE_GGA;
 800ff70:	2302      	movs	r3, #2
 800ff72:	e024      	b.n	800ffbe <minmea_sentence_id+0xba>
    if (!strcmp(type+2, "GSA"))
 800ff74:	f107 0308 	add.w	r3, r7, #8
 800ff78:	3302      	adds	r3, #2
 800ff7a:	4916      	ldr	r1, [pc, #88]	; (800ffd4 <minmea_sentence_id+0xd0>)
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	f7f0 f92f 	bl	80001e0 <strcmp>
 800ff82:	4603      	mov	r3, r0
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d101      	bne.n	800ff8c <minmea_sentence_id+0x88>
        return MINMEA_SENTENCE_GSA;
 800ff88:	2303      	movs	r3, #3
 800ff8a:	e018      	b.n	800ffbe <minmea_sentence_id+0xba>
    if (!strcmp(type+2, "GST"))
 800ff8c:	f107 0308 	add.w	r3, r7, #8
 800ff90:	3302      	adds	r3, #2
 800ff92:	4911      	ldr	r1, [pc, #68]	; (800ffd8 <minmea_sentence_id+0xd4>)
 800ff94:	4618      	mov	r0, r3
 800ff96:	f7f0 f923 	bl	80001e0 <strcmp>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d101      	bne.n	800ffa4 <minmea_sentence_id+0xa0>
        return MINMEA_SENTENCE_GST;
 800ffa0:	2304      	movs	r3, #4
 800ffa2:	e00c      	b.n	800ffbe <minmea_sentence_id+0xba>
    if (!strcmp(type+2, "GSV"))
 800ffa4:	f107 0308 	add.w	r3, r7, #8
 800ffa8:	3302      	adds	r3, #2
 800ffaa:	490c      	ldr	r1, [pc, #48]	; (800ffdc <minmea_sentence_id+0xd8>)
 800ffac:	4618      	mov	r0, r3
 800ffae:	f7f0 f917 	bl	80001e0 <strcmp>
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d101      	bne.n	800ffbc <minmea_sentence_id+0xb8>
        return MINMEA_SENTENCE_GSV;
 800ffb8:	2305      	movs	r3, #5
 800ffba:	e000      	b.n	800ffbe <minmea_sentence_id+0xba>

    return MINMEA_UNKNOWN;
 800ffbc:	2300      	movs	r3, #0
}
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	3710      	adds	r7, #16
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}
 800ffc6:	bf00      	nop
 800ffc8:	08017c54 	.word	0x08017c54
 800ffcc:	08017c58 	.word	0x08017c58
 800ffd0:	08017c5c 	.word	0x08017c5c
 800ffd4:	08017c60 	.word	0x08017c60
 800ffd8:	08017c64 	.word	0x08017c64
 800ffdc:	08017c68 	.word	0x08017c68

0800ffe0 <minmea_parse_gga>:

    return true;
}

bool minmea_parse_gga(struct minmea_sentence_gga *frame, const char *sentence)
{
 800ffe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffe2:	b097      	sub	sp, #92	; 0x5c
 800ffe4:	af0c      	add	r7, sp, #48	; 0x30
 800ffe6:	6178      	str	r0, [r7, #20]
 800ffe8:	6139      	str	r1, [r7, #16]
    // $GPGGA,123519,4807.038,N,01131.000,E,1,08,0.9,545.4,M,46.9,M,,*47
    char type[6];
    int latitude_direction;
    int longitude_direction;

    if (!minmea_scan(sentence, "tTfdfdiiffcfci_",
 800ffea:	697b      	ldr	r3, [r7, #20]
 800ffec:	60fb      	str	r3, [r7, #12]
 800ffee:	697b      	ldr	r3, [r7, #20]
 800fff0:	3310      	adds	r3, #16
 800fff2:	697a      	ldr	r2, [r7, #20]
 800fff4:	3218      	adds	r2, #24
 800fff6:	60ba      	str	r2, [r7, #8]
 800fff8:	6979      	ldr	r1, [r7, #20]
 800fffa:	3120      	adds	r1, #32
 800fffc:	6978      	ldr	r0, [r7, #20]
 800fffe:	3024      	adds	r0, #36	; 0x24
 8010000:	697c      	ldr	r4, [r7, #20]
 8010002:	3428      	adds	r4, #40	; 0x28
 8010004:	697d      	ldr	r5, [r7, #20]
 8010006:	3530      	adds	r5, #48	; 0x30
 8010008:	697e      	ldr	r6, [r7, #20]
 801000a:	3638      	adds	r6, #56	; 0x38
 801000c:	697a      	ldr	r2, [r7, #20]
 801000e:	323c      	adds	r2, #60	; 0x3c
 8010010:	607a      	str	r2, [r7, #4]
 8010012:	697a      	ldr	r2, [r7, #20]
 8010014:	3244      	adds	r2, #68	; 0x44
 8010016:	603a      	str	r2, [r7, #0]
 8010018:	697a      	ldr	r2, [r7, #20]
 801001a:	3248      	adds	r2, #72	; 0x48
 801001c:	f107 0c20 	add.w	ip, r7, #32
 8010020:	920b      	str	r2, [sp, #44]	; 0x2c
 8010022:	683a      	ldr	r2, [r7, #0]
 8010024:	920a      	str	r2, [sp, #40]	; 0x28
 8010026:	687a      	ldr	r2, [r7, #4]
 8010028:	9209      	str	r2, [sp, #36]	; 0x24
 801002a:	9608      	str	r6, [sp, #32]
 801002c:	9507      	str	r5, [sp, #28]
 801002e:	9406      	str	r4, [sp, #24]
 8010030:	9005      	str	r0, [sp, #20]
 8010032:	9104      	str	r1, [sp, #16]
 8010034:	f107 0118 	add.w	r1, r7, #24
 8010038:	9103      	str	r1, [sp, #12]
 801003a:	68ba      	ldr	r2, [r7, #8]
 801003c:	9202      	str	r2, [sp, #8]
 801003e:	f107 021c 	add.w	r2, r7, #28
 8010042:	9201      	str	r2, [sp, #4]
 8010044:	9300      	str	r3, [sp, #0]
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	4662      	mov	r2, ip
 801004a:	4915      	ldr	r1, [pc, #84]	; (80100a0 <minmea_parse_gga+0xc0>)
 801004c:	6938      	ldr	r0, [r7, #16]
 801004e:	f7ff fb9d 	bl	800f78c <minmea_scan>
 8010052:	4603      	mov	r3, r0
 8010054:	f083 0301 	eor.w	r3, r3, #1
 8010058:	b2db      	uxtb	r3, r3
 801005a:	2b00      	cmp	r3, #0
 801005c:	d001      	beq.n	8010062 <minmea_parse_gga+0x82>
            &frame->satellites_tracked,
            &frame->hdop,
            &frame->altitude, &frame->altitude_units,
            &frame->height, &frame->height_units,
            &frame->dgps_age))
        return false;
 801005e:	2300      	movs	r3, #0
 8010060:	e01a      	b.n	8010098 <minmea_parse_gga+0xb8>
    if (strcmp(type+2, "GGA"))
 8010062:	f107 0320 	add.w	r3, r7, #32
 8010066:	3302      	adds	r3, #2
 8010068:	490e      	ldr	r1, [pc, #56]	; (80100a4 <minmea_parse_gga+0xc4>)
 801006a:	4618      	mov	r0, r3
 801006c:	f7f0 f8b8 	bl	80001e0 <strcmp>
 8010070:	4603      	mov	r3, r0
 8010072:	2b00      	cmp	r3, #0
 8010074:	d001      	beq.n	801007a <minmea_parse_gga+0x9a>
        return false;
 8010076:	2300      	movs	r3, #0
 8010078:	e00e      	b.n	8010098 <minmea_parse_gga+0xb8>

    frame->latitude.value *= latitude_direction;
 801007a:	697b      	ldr	r3, [r7, #20]
 801007c:	691b      	ldr	r3, [r3, #16]
 801007e:	69fa      	ldr	r2, [r7, #28]
 8010080:	fb02 f203 	mul.w	r2, r2, r3
 8010084:	697b      	ldr	r3, [r7, #20]
 8010086:	611a      	str	r2, [r3, #16]
    frame->longitude.value *= longitude_direction;
 8010088:	697b      	ldr	r3, [r7, #20]
 801008a:	699b      	ldr	r3, [r3, #24]
 801008c:	69ba      	ldr	r2, [r7, #24]
 801008e:	fb02 f203 	mul.w	r2, r2, r3
 8010092:	697b      	ldr	r3, [r7, #20]
 8010094:	619a      	str	r2, [r3, #24]

    return true;
 8010096:	2301      	movs	r3, #1
}
 8010098:	4618      	mov	r0, r3
 801009a:	372c      	adds	r7, #44	; 0x2c
 801009c:	46bd      	mov	sp, r7
 801009e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100a0:	08017c7c 	.word	0x08017c7c
 80100a4:	08017c5c 	.word	0x08017c5c

080100a8 <minmea_tofloat>:
/**
 * Convert a fixed-point value to a floating-point value.
 * Returns NaN for "unknown" values.
 */
static inline float minmea_tofloat(struct minmea_float *f)
{
 80100a8:	b480      	push	{r7}
 80100aa:	b083      	sub	sp, #12
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
    if (f->scale == 0)
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	685b      	ldr	r3, [r3, #4]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d102      	bne.n	80100be <minmea_tofloat+0x16>
        return NAN;
 80100b8:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80100ec <minmea_tofloat+0x44>
 80100bc:	e00d      	b.n	80100da <minmea_tofloat+0x32>
    return (float) f->value / (float) f->scale;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	ee07 3a90 	vmov	s15, r3
 80100c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	685b      	ldr	r3, [r3, #4]
 80100ce:	ee07 3a90 	vmov	s15, r3
 80100d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80100d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80100da:	eef0 7a66 	vmov.f32	s15, s13
}
 80100de:	eeb0 0a67 	vmov.f32	s0, s15
 80100e2:	370c      	adds	r7, #12
 80100e4:	46bd      	mov	sp, r7
 80100e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ea:	4770      	bx	lr
 80100ec:	7fc00000 	.word	0x7fc00000

080100f0 <minmea_tocoord>:
/**
 * Convert a raw coordinate to a floating point DD.DDD... value.
 * Returns NaN for "unknown" values.
 */
static inline float minmea_tocoord(struct minmea_float *f)
{
 80100f0:	b480      	push	{r7}
 80100f2:	b085      	sub	sp, #20
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
    if (f->scale == 0)
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	685b      	ldr	r3, [r3, #4]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d102      	bne.n	8010106 <minmea_tocoord+0x16>
        return NAN;
 8010100:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8010174 <minmea_tocoord+0x84>
 8010104:	e02e      	b.n	8010164 <minmea_tocoord+0x74>
    int_least32_t degrees = f->value / (f->scale * 100);
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	681a      	ldr	r2, [r3, #0]
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	685b      	ldr	r3, [r3, #4]
 801010e:	2164      	movs	r1, #100	; 0x64
 8010110:	fb01 f303 	mul.w	r3, r1, r3
 8010114:	fb92 f3f3 	sdiv	r3, r2, r3
 8010118:	60fb      	str	r3, [r7, #12]
    int_least32_t minutes = f->value % (f->scale * 100);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	687a      	ldr	r2, [r7, #4]
 8010120:	6852      	ldr	r2, [r2, #4]
 8010122:	2164      	movs	r1, #100	; 0x64
 8010124:	fb01 f202 	mul.w	r2, r1, r2
 8010128:	fb93 f1f2 	sdiv	r1, r3, r2
 801012c:	fb02 f201 	mul.w	r2, r2, r1
 8010130:	1a9b      	subs	r3, r3, r2
 8010132:	60bb      	str	r3, [r7, #8]
    return (float) degrees + (float) minutes / (60 * f->scale);
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	ee07 3a90 	vmov	s15, r3
 801013a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801013e:	68bb      	ldr	r3, [r7, #8]
 8010140:	ee07 3a90 	vmov	s15, r3
 8010144:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	685a      	ldr	r2, [r3, #4]
 801014c:	4613      	mov	r3, r2
 801014e:	011b      	lsls	r3, r3, #4
 8010150:	1a9b      	subs	r3, r3, r2
 8010152:	009b      	lsls	r3, r3, #2
 8010154:	ee07 3a90 	vmov	s15, r3
 8010158:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801015c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8010160:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8010164:	eeb0 0a67 	vmov.f32	s0, s15
 8010168:	3714      	adds	r7, #20
 801016a:	46bd      	mov	sp, r7
 801016c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010170:	4770      	bx	lr
 8010172:	bf00      	nop
 8010174:	7fc00000 	.word	0x7fc00000

08010178 <cb_push>:


#define GPS_SYMBOLS_PER_ACTS 500

static bool cb_push(uint8_t byte)
{
 8010178:	b480      	push	{r7}
 801017a:	b085      	sub	sp, #20
 801017c:	af00      	add	r7, sp, #0
 801017e:	4603      	mov	r3, r0
 8010180:	71fb      	strb	r3, [r7, #7]

	size_t next_head = uart_buffer_head + 1;
 8010182:	4b10      	ldr	r3, [pc, #64]	; (80101c4 <cb_push+0x4c>)
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	3301      	adds	r3, #1
 8010188:	60fb      	str	r3, [r7, #12]
	if (next_head >= sizeof(uart_buffer) / sizeof(uart_buffer[0]))
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010190:	d301      	bcc.n	8010196 <cb_push+0x1e>
		next_head = 0;
 8010192:	2300      	movs	r3, #0
 8010194:	60fb      	str	r3, [r7, #12]

	if (next_head == uart_buffer_tail)
 8010196:	4b0c      	ldr	r3, [pc, #48]	; (80101c8 <cb_push+0x50>)
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	68fa      	ldr	r2, [r7, #12]
 801019c:	429a      	cmp	r2, r3
 801019e:	d101      	bne.n	80101a4 <cb_push+0x2c>
		return false;
 80101a0:	2300      	movs	r3, #0
 80101a2:	e008      	b.n	80101b6 <cb_push+0x3e>

	uart_buffer[uart_buffer_head] = byte;
 80101a4:	4b07      	ldr	r3, [pc, #28]	; (80101c4 <cb_push+0x4c>)
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	4908      	ldr	r1, [pc, #32]	; (80101cc <cb_push+0x54>)
 80101aa:	79fa      	ldrb	r2, [r7, #7]
 80101ac:	54ca      	strb	r2, [r1, r3]
	uart_buffer_head = next_head;
 80101ae:	4a05      	ldr	r2, [pc, #20]	; (80101c4 <cb_push+0x4c>)
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	6013      	str	r3, [r2, #0]
	return true;
 80101b4:	2301      	movs	r3, #1
}
 80101b6:	4618      	mov	r0, r3
 80101b8:	3714      	adds	r7, #20
 80101ba:	46bd      	mov	sp, r7
 80101bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c0:	4770      	bx	lr
 80101c2:	bf00      	nop
 80101c4:	20002740 	.word	0x20002740
 80101c8:	20002744 	.word	0x20002744
 80101cc:	20002358 	.word	0x20002358

080101d0 <cb_pop>:


static bool cb_pop(uint8_t *byte)
{
 80101d0:	b480      	push	{r7}
 80101d2:	b083      	sub	sp, #12
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
	if (uart_buffer_head == uart_buffer_tail)
 80101d8:	4b10      	ldr	r3, [pc, #64]	; (801021c <cb_pop+0x4c>)
 80101da:	681a      	ldr	r2, [r3, #0]
 80101dc:	4b10      	ldr	r3, [pc, #64]	; (8010220 <cb_pop+0x50>)
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	429a      	cmp	r2, r3
 80101e2:	d101      	bne.n	80101e8 <cb_pop+0x18>
		return false;
 80101e4:	2300      	movs	r3, #0
 80101e6:	e013      	b.n	8010210 <cb_pop+0x40>

	*byte = uart_buffer[uart_buffer_tail];
 80101e8:	4b0d      	ldr	r3, [pc, #52]	; (8010220 <cb_pop+0x50>)
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	4a0d      	ldr	r2, [pc, #52]	; (8010224 <cb_pop+0x54>)
 80101ee:	5cd2      	ldrb	r2, [r2, r3]
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	701a      	strb	r2, [r3, #0]
	uart_buffer_tail += 1;
 80101f4:	4b0a      	ldr	r3, [pc, #40]	; (8010220 <cb_pop+0x50>)
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	3301      	adds	r3, #1
 80101fa:	4a09      	ldr	r2, [pc, #36]	; (8010220 <cb_pop+0x50>)
 80101fc:	6013      	str	r3, [r2, #0]
	if (uart_buffer_tail >= sizeof(uart_buffer) / sizeof(uart_buffer[0]))
 80101fe:	4b08      	ldr	r3, [pc, #32]	; (8010220 <cb_pop+0x50>)
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010206:	d302      	bcc.n	801020e <cb_pop+0x3e>
		uart_buffer_tail = 0;
 8010208:	4b05      	ldr	r3, [pc, #20]	; (8010220 <cb_pop+0x50>)
 801020a:	2200      	movs	r2, #0
 801020c:	601a      	str	r2, [r3, #0]

	return true;
 801020e:	2301      	movs	r3, #1
}
 8010210:	4618      	mov	r0, r3
 8010212:	370c      	adds	r7, #12
 8010214:	46bd      	mov	sp, r7
 8010216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021a:	4770      	bx	lr
 801021c:	20002740 	.word	0x20002740
 8010220:	20002744 	.word	0x20002744
 8010224:	20002358 	.word	0x20002358

08010228 <gps_parse>:




static int gps_parse(uint8_t byte)
{
 8010228:	b480      	push	{r7}
 801022a:	b083      	sub	sp, #12
 801022c:	af00      	add	r7, sp, #0
 801022e:	4603      	mov	r3, r0
 8010230:	71fb      	strb	r3, [r7, #7]
	if (pavel_gps_sost == 0)
 8010232:	4b1c      	ldr	r3, [pc, #112]	; (80102a4 <gps_parse+0x7c>)
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d10c      	bne.n	8010254 <gps_parse+0x2c>
	{
		if (byte == '$')
 801023a:	79fb      	ldrb	r3, [r7, #7]
 801023c:	2b24      	cmp	r3, #36	; 0x24
 801023e:	d129      	bne.n	8010294 <gps_parse+0x6c>
		{
			pavel_gps_buffer[0]='$';
 8010240:	4b19      	ldr	r3, [pc, #100]	; (80102a8 <gps_parse+0x80>)
 8010242:	2224      	movs	r2, #36	; 0x24
 8010244:	701a      	strb	r2, [r3, #0]
			pavel_gps_sost = 1;
 8010246:	4b17      	ldr	r3, [pc, #92]	; (80102a4 <gps_parse+0x7c>)
 8010248:	2201      	movs	r2, #1
 801024a:	601a      	str	r2, [r3, #0]
			pavel_gps_carret = 1;
 801024c:	4b17      	ldr	r3, [pc, #92]	; (80102ac <gps_parse+0x84>)
 801024e:	2201      	movs	r2, #1
 8010250:	601a      	str	r2, [r3, #0]
 8010252:	e01f      	b.n	8010294 <gps_parse+0x6c>
		}
	}
	else
	{
		if (pavel_gps_carret >= sizeof(pavel_gps_buffer) / sizeof(pavel_gps_buffer[0]))
 8010254:	4b15      	ldr	r3, [pc, #84]	; (80102ac <gps_parse+0x84>)
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801025c:	d305      	bcc.n	801026a <gps_parse+0x42>
		{
			pavel_gps_sost = 0;
 801025e:	4b11      	ldr	r3, [pc, #68]	; (80102a4 <gps_parse+0x7c>)
 8010260:	2200      	movs	r2, #0
 8010262:	601a      	str	r2, [r3, #0]
			return pavel_gps_sost;
 8010264:	4b0f      	ldr	r3, [pc, #60]	; (80102a4 <gps_parse+0x7c>)
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	e016      	b.n	8010298 <gps_parse+0x70>
		}

		pavel_gps_buffer[pavel_gps_carret] = byte;
 801026a:	4b10      	ldr	r3, [pc, #64]	; (80102ac <gps_parse+0x84>)
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	490e      	ldr	r1, [pc, #56]	; (80102a8 <gps_parse+0x80>)
 8010270:	79fa      	ldrb	r2, [r7, #7]
 8010272:	54ca      	strb	r2, [r1, r3]
		pavel_gps_carret = pavel_gps_carret + 1;
 8010274:	4b0d      	ldr	r3, [pc, #52]	; (80102ac <gps_parse+0x84>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	3301      	adds	r3, #1
 801027a:	4a0c      	ldr	r2, [pc, #48]	; (80102ac <gps_parse+0x84>)
 801027c:	6013      	str	r3, [r2, #0]
		if (byte == '\n' )
 801027e:	79fb      	ldrb	r3, [r7, #7]
 8010280:	2b0a      	cmp	r3, #10
 8010282:	d107      	bne.n	8010294 <gps_parse+0x6c>
		{
			pavel_gps_sost = 2;
 8010284:	4b07      	ldr	r3, [pc, #28]	; (80102a4 <gps_parse+0x7c>)
 8010286:	2202      	movs	r2, #2
 8010288:	601a      	str	r2, [r3, #0]
			pavel_gps_buffer[pavel_gps_carret] =0;
 801028a:	4b08      	ldr	r3, [pc, #32]	; (80102ac <gps_parse+0x84>)
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	4a06      	ldr	r2, [pc, #24]	; (80102a8 <gps_parse+0x80>)
 8010290:	2100      	movs	r1, #0
 8010292:	54d1      	strb	r1, [r2, r3]
		}
	}

	return pavel_gps_sost;
 8010294:	4b03      	ldr	r3, [pc, #12]	; (80102a4 <gps_parse+0x7c>)
 8010296:	681b      	ldr	r3, [r3, #0]
}
 8010298:	4618      	mov	r0, r3
 801029a:	370c      	adds	r7, #12
 801029c:	46bd      	mov	sp, r7
 801029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a2:	4770      	bx	lr
 80102a4:	20002748 	.word	0x20002748
 80102a8:	2000274c 	.word	0x2000274c
 80102ac:	20002878 	.word	0x20002878

080102b0 <gps_init>:


int gps_init()
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	af00      	add	r7, sp, #0
	memset(uart_buffer, 0x00, sizeof(uart_buffer));
 80102b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80102b8:	2100      	movs	r1, #0
 80102ba:	4809      	ldr	r0, [pc, #36]	; (80102e0 <gps_init+0x30>)
 80102bc:	f001 fcc8 	bl	8011c50 <memset>
	uart_buffer_head = 0;
 80102c0:	4b08      	ldr	r3, [pc, #32]	; (80102e4 <gps_init+0x34>)
 80102c2:	2200      	movs	r2, #0
 80102c4:	601a      	str	r2, [r3, #0]
	uart_buffer_tail = 0;
 80102c6:	4b08      	ldr	r3, [pc, #32]	; (80102e8 <gps_init+0x38>)
 80102c8:	2200      	movs	r2, #0
 80102ca:	601a      	str	r2, [r3, #0]
	pavel_gps_sost = 0;
 80102cc:	4b07      	ldr	r3, [pc, #28]	; (80102ec <gps_init+0x3c>)
 80102ce:	2200      	movs	r2, #0
 80102d0:	601a      	str	r2, [r3, #0]

	pavel_gps_carret = 0;
 80102d2:	4b07      	ldr	r3, [pc, #28]	; (80102f0 <gps_init+0x40>)
 80102d4:	2200      	movs	r2, #0
 80102d6:	601a      	str	r2, [r3, #0]
	return 0;
 80102d8:	2300      	movs	r3, #0
}
 80102da:	4618      	mov	r0, r3
 80102dc:	bd80      	pop	{r7, pc}
 80102de:	bf00      	nop
 80102e0:	20002358 	.word	0x20002358
 80102e4:	20002740 	.word	0x20002740
 80102e8:	20002744 	.word	0x20002744
 80102ec:	20002748 	.word	0x20002748
 80102f0:	20002878 	.word	0x20002878

080102f4 <gps_push_byte>:


int gps_push_byte(uint8_t byte)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b082      	sub	sp, #8
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	4603      	mov	r3, r0
 80102fc:	71fb      	strb	r3, [r7, #7]
	cb_push(byte);
 80102fe:	79fb      	ldrb	r3, [r7, #7]
 8010300:	4618      	mov	r0, r3
 8010302:	f7ff ff39 	bl	8010178 <cb_push>
	return 0;
 8010306:	2300      	movs	r3, #0
}
 8010308:	4618      	mov	r0, r3
 801030a:	3708      	adds	r7, #8
 801030c:	46bd      	mov	sp, r7
 801030e:	bd80      	pop	{r7, pc}

08010310 <gps_work>:
		return pavel_gps_sost;
}


int gps_work()
{
 8010310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010314:	b094      	sub	sp, #80	; 0x50
 8010316:	af00      	add	r7, sp, #0
	uint8_t byte;
	for (schetchik = 0; schetchik < GPS_SYMBOLS_PER_ACTS; schetchik++)
 8010318:	4b50      	ldr	r3, [pc, #320]	; (801045c <gps_work+0x14c>)
 801031a:	2200      	movs	r2, #0
 801031c:	801a      	strh	r2, [r3, #0]
 801031e:	e08f      	b.n	8010440 <gps_work+0x130>
	{
		if (cb_pop(&byte) == false)
 8010320:	f107 034d 	add.w	r3, r7, #77	; 0x4d
 8010324:	4618      	mov	r0, r3
 8010326:	f7ff ff53 	bl	80101d0 <cb_pop>
 801032a:	4603      	mov	r3, r0
 801032c:	f083 0301 	eor.w	r3, r3, #1
 8010330:	b2db      	uxtb	r3, r3
 8010332:	2b00      	cmp	r3, #0
 8010334:	f040 808b 	bne.w	801044e <gps_work+0x13e>
		{
			break;
		}
		gps_parse(byte);
 8010338:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 801033c:	4618      	mov	r0, r3
 801033e:	f7ff ff73 	bl	8010228 <gps_parse>
		if (pavel_gps_sost == 2)
 8010342:	4b47      	ldr	r3, [pc, #284]	; (8010460 <gps_work+0x150>)
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	2b02      	cmp	r3, #2
 8010348:	d174      	bne.n	8010434 <gps_work+0x124>
		{
			// Мы накопили сообщение. Можно его разбирать
			pavel_gps_sost = 0;
 801034a:	4b45      	ldr	r3, [pc, #276]	; (8010460 <gps_work+0x150>)
 801034c:	2200      	movs	r2, #0
 801034e:	601a      	str	r2, [r3, #0]
			enum minmea_sentence_id id;
			id = minmea_sentence_id(pavel_gps_buffer);
 8010350:	4844      	ldr	r0, [pc, #272]	; (8010464 <gps_work+0x154>)
 8010352:	f7ff fdd7 	bl	800ff04 <minmea_sentence_id>
 8010356:	4603      	mov	r3, r0
 8010358:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			if (id != MINMEA_SENTENCE_GGA)
 801035c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8010360:	2b02      	cmp	r3, #2
 8010362:	d164      	bne.n	801042e <gps_work+0x11e>
			{
				continue;
			}

			struct minmea_sentence_gga gga;
			bool succes = minmea_parse_gga(&gga, pavel_gps_buffer);
 8010364:	463b      	mov	r3, r7
 8010366:	493f      	ldr	r1, [pc, #252]	; (8010464 <gps_work+0x154>)
 8010368:	4618      	mov	r0, r3
 801036a:	f7ff fe39 	bl	800ffe0 <minmea_parse_gga>
 801036e:	4603      	mov	r3, r0
 8010370:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
			if (!succes)
 8010374:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8010378:	f083 0301 	eor.w	r3, r3, #1
 801037c:	b2db      	uxtb	r3, r3
 801037e:	2b00      	cmp	r3, #0
 8010380:	d157      	bne.n	8010432 <gps_work+0x122>
			{
				continue;
			}
			time_us = gga.time.microseconds;
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	461a      	mov	r2, r3
 8010386:	4b38      	ldr	r3, [pc, #224]	; (8010468 <gps_work+0x158>)
 8010388:	601a      	str	r2, [r3, #0]
			time_s = 3600*gga.time.hours + 60*gga.time.minutes + gga.time.seconds;
 801038a:	683b      	ldr	r3, [r7, #0]
 801038c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8010390:	fb02 f103 	mul.w	r1, r2, r3
 8010394:	687a      	ldr	r2, [r7, #4]
 8010396:	4613      	mov	r3, r2
 8010398:	011b      	lsls	r3, r3, #4
 801039a:	1a9b      	subs	r3, r3, r2
 801039c:	009b      	lsls	r3, r3, #2
 801039e:	18ca      	adds	r2, r1, r3
 80103a0:	68bb      	ldr	r3, [r7, #8]
 80103a2:	4413      	add	r3, r2
 80103a4:	461a      	mov	r2, r3
 80103a6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80103aa:	4930      	ldr	r1, [pc, #192]	; (801046c <gps_work+0x15c>)
 80103ac:	e9c1 2300 	strd	r2, r3, [r1]
			lat = minmea_tocoord(&gga.latitude);
 80103b0:	463b      	mov	r3, r7
 80103b2:	3310      	adds	r3, #16
 80103b4:	4618      	mov	r0, r3
 80103b6:	f7ff fe9b 	bl	80100f0 <minmea_tocoord>
 80103ba:	eef0 7a40 	vmov.f32	s15, s0
 80103be:	4b2c      	ldr	r3, [pc, #176]	; (8010470 <gps_work+0x160>)
 80103c0:	edc3 7a00 	vstr	s15, [r3]
			lon = minmea_tocoord(&gga.longitude);
 80103c4:	463b      	mov	r3, r7
 80103c6:	3318      	adds	r3, #24
 80103c8:	4618      	mov	r0, r3
 80103ca:	f7ff fe91 	bl	80100f0 <minmea_tocoord>
 80103ce:	eef0 7a40 	vmov.f32	s15, s0
 80103d2:	4b28      	ldr	r3, [pc, #160]	; (8010474 <gps_work+0x164>)
 80103d4:	edc3 7a00 	vstr	s15, [r3]
			alt = minmea_tofloat(&gga.altitude);
 80103d8:	463b      	mov	r3, r7
 80103da:	3330      	adds	r3, #48	; 0x30
 80103dc:	4618      	mov	r0, r3
 80103de:	f7ff fe63 	bl	80100a8 <minmea_tofloat>
 80103e2:	eef0 7a40 	vmov.f32	s15, s0
 80103e6:	4b24      	ldr	r3, [pc, #144]	; (8010478 <gps_work+0x168>)
 80103e8:	edc3 7a00 	vstr	s15, [r3]
			fix = gga.fix_quality;
 80103ec:	6a3b      	ldr	r3, [r7, #32]
 80103ee:	4a23      	ldr	r2, [pc, #140]	; (801047c <gps_work+0x16c>)
 80103f0:	6013      	str	r3, [r2, #0]
			pos_cookie++;
 80103f2:	4b23      	ldr	r3, [pc, #140]	; (8010480 <gps_work+0x170>)
 80103f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103f8:	1c54      	adds	r4, r2, #1
 80103fa:	f143 0500 	adc.w	r5, r3, #0
 80103fe:	4b20      	ldr	r3, [pc, #128]	; (8010480 <gps_work+0x170>)
 8010400:	e9c3 4500 	strd	r4, r5, [r3]
			alt_cookie++;
 8010404:	4b1f      	ldr	r3, [pc, #124]	; (8010484 <gps_work+0x174>)
 8010406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801040a:	f112 0801 	adds.w	r8, r2, #1
 801040e:	f143 0900 	adc.w	r9, r3, #0
 8010412:	4b1c      	ldr	r3, [pc, #112]	; (8010484 <gps_work+0x174>)
 8010414:	e9c3 8900 	strd	r8, r9, [r3]
			time_cookie++;
 8010418:	4b1b      	ldr	r3, [pc, #108]	; (8010488 <gps_work+0x178>)
 801041a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801041e:	f112 0a01 	adds.w	sl, r2, #1
 8010422:	f143 0b00 	adc.w	fp, r3, #0
 8010426:	4b18      	ldr	r3, [pc, #96]	; (8010488 <gps_work+0x178>)
 8010428:	e9c3 ab00 	strd	sl, fp, [r3]
 801042c:	e002      	b.n	8010434 <gps_work+0x124>
				continue;
 801042e:	bf00      	nop
 8010430:	e000      	b.n	8010434 <gps_work+0x124>
				continue;
 8010432:	bf00      	nop
	for (schetchik = 0; schetchik < GPS_SYMBOLS_PER_ACTS; schetchik++)
 8010434:	4b09      	ldr	r3, [pc, #36]	; (801045c <gps_work+0x14c>)
 8010436:	881b      	ldrh	r3, [r3, #0]
 8010438:	3301      	adds	r3, #1
 801043a:	b29a      	uxth	r2, r3
 801043c:	4b07      	ldr	r3, [pc, #28]	; (801045c <gps_work+0x14c>)
 801043e:	801a      	strh	r2, [r3, #0]
 8010440:	4b06      	ldr	r3, [pc, #24]	; (801045c <gps_work+0x14c>)
 8010442:	881b      	ldrh	r3, [r3, #0]
 8010444:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8010448:	f4ff af6a 	bcc.w	8010320 <gps_work+0x10>
 801044c:	e000      	b.n	8010450 <gps_work+0x140>
			break;
 801044e:	bf00      	nop

		}
	}
	return 0;
 8010450:	2300      	movs	r3, #0
}
 8010452:	4618      	mov	r0, r3
 8010454:	3750      	adds	r7, #80	; 0x50
 8010456:	46bd      	mov	sp, r7
 8010458:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801045c:	200028b4 	.word	0x200028b4
 8010460:	20002748 	.word	0x20002748
 8010464:	2000274c 	.word	0x2000274c
 8010468:	200028b0 	.word	0x200028b0
 801046c:	200028a8 	.word	0x200028a8
 8010470:	20002888 	.word	0x20002888
 8010474:	2000288c 	.word	0x2000288c
 8010478:	20002898 	.word	0x20002898
 801047c:	20002354 	.word	0x20002354
 8010480:	20002880 	.word	0x20002880
 8010484:	20002890 	.word	0x20002890
 8010488:	200028a0 	.word	0x200028a0

0801048c <gps_get_coords>:



int gps_get_coords(int64_t * cookie, float * lat_, float * lon_, float * alt_, int *fix_)
{
 801048c:	b480      	push	{r7}
 801048e:	b085      	sub	sp, #20
 8010490:	af00      	add	r7, sp, #0
 8010492:	60f8      	str	r0, [r7, #12]
 8010494:	60b9      	str	r1, [r7, #8]
 8010496:	607a      	str	r2, [r7, #4]
 8010498:	603b      	str	r3, [r7, #0]
	*cookie = pos_cookie;
 801049a:	4b0e      	ldr	r3, [pc, #56]	; (80104d4 <gps_get_coords+0x48>)
 801049c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104a0:	68f9      	ldr	r1, [r7, #12]
 80104a2:	e9c1 2300 	strd	r2, r3, [r1]
	*lat_ = lat;
 80104a6:	4b0c      	ldr	r3, [pc, #48]	; (80104d8 <gps_get_coords+0x4c>)
 80104a8:	681a      	ldr	r2, [r3, #0]
 80104aa:	68bb      	ldr	r3, [r7, #8]
 80104ac:	601a      	str	r2, [r3, #0]
	*lon_ = lon;
 80104ae:	4b0b      	ldr	r3, [pc, #44]	; (80104dc <gps_get_coords+0x50>)
 80104b0:	681a      	ldr	r2, [r3, #0]
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	601a      	str	r2, [r3, #0]
	*alt_ = alt;
 80104b6:	4b0a      	ldr	r3, [pc, #40]	; (80104e0 <gps_get_coords+0x54>)
 80104b8:	681a      	ldr	r2, [r3, #0]
 80104ba:	683b      	ldr	r3, [r7, #0]
 80104bc:	601a      	str	r2, [r3, #0]
	*fix_ = fix;
 80104be:	4b09      	ldr	r3, [pc, #36]	; (80104e4 <gps_get_coords+0x58>)
 80104c0:	681a      	ldr	r2, [r3, #0]
 80104c2:	69bb      	ldr	r3, [r7, #24]
 80104c4:	601a      	str	r2, [r3, #0]
	return 0;
 80104c6:	2300      	movs	r3, #0
}
 80104c8:	4618      	mov	r0, r3
 80104ca:	3714      	adds	r7, #20
 80104cc:	46bd      	mov	sp, r7
 80104ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d2:	4770      	bx	lr
 80104d4:	20002880 	.word	0x20002880
 80104d8:	20002888 	.word	0x20002888
 80104dc:	2000288c 	.word	0x2000288c
 80104e0:	20002898 	.word	0x20002898
 80104e4:	20002354 	.word	0x20002354

080104e8 <lis3mdl_write>:
#ifdef HAL_SPI_MODULE_ENABLED
extern SPI_HandleTypeDef hspi1;


static int32_t lis3mdl_write(void * intf_ptr, uint8_t reg_addr, const uint8_t * data, uint16_t data_size)
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b086      	sub	sp, #24
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	60f8      	str	r0, [r7, #12]
 80104f0:	607a      	str	r2, [r7, #4]
 80104f2:	461a      	mov	r2, r3
 80104f4:	460b      	mov	r3, r1
 80104f6:	72fb      	strb	r3, [r7, #11]
 80104f8:	4613      	mov	r3, r2
 80104fa:	813b      	strh	r3, [r7, #8]

	struct lis_spi_intf* spi_intf = intf_ptr;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	617b      	str	r3, [r7, #20]

	reg_addr=reg_addr&~(1<<7);
 8010500:	7afb      	ldrb	r3, [r7, #11]
 8010502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010506:	b2db      	uxtb	r3, r3
 8010508:	72fb      	strb	r3, [r7, #11]
	if (data_size > 1)
 801050a:	893b      	ldrh	r3, [r7, #8]
 801050c:	2b01      	cmp	r3, #1
 801050e:	d905      	bls.n	801051c <lis3mdl_write+0x34>
		reg_addr=reg_addr | (1<<6);
 8010510:	7afb      	ldrb	r3, [r7, #11]
 8010512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010516:	b2db      	uxtb	r3, r3
 8010518:	72fb      	strb	r3, [r7, #11]
 801051a:	e004      	b.n	8010526 <lis3mdl_write+0x3e>
	else
		reg_addr = reg_addr & ~(1<<6);
 801051c:	7afb      	ldrb	r3, [r7, #11]
 801051e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010522:	b2db      	uxtb	r3, r3
 8010524:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin (spi_intf->GPIO_Port,spi_intf->GPIO_Pin, GPIO_PIN_RESET);
 8010526:	697b      	ldr	r3, [r7, #20]
 8010528:	6818      	ldr	r0, [r3, #0]
 801052a:	697b      	ldr	r3, [r7, #20]
 801052c:	889b      	ldrh	r3, [r3, #4]
 801052e:	2200      	movs	r2, #0
 8010530:	4619      	mov	r1, r3
 8010532:	f7f6 ffb5 	bl	80074a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi_intf->spi, &reg_addr, 1, HAL_MAX_DELAY);
 8010536:	697b      	ldr	r3, [r7, #20]
 8010538:	6898      	ldr	r0, [r3, #8]
 801053a:	f107 010b 	add.w	r1, r7, #11
 801053e:	f04f 33ff 	mov.w	r3, #4294967295
 8010542:	2201      	movs	r2, #1
 8010544:	f7f9 fc0b 	bl	8009d5e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(spi_intf->spi, (uint8_t*)data, data_size, HAL_MAX_DELAY);
 8010548:	697b      	ldr	r3, [r7, #20]
 801054a:	6898      	ldr	r0, [r3, #8]
 801054c:	893a      	ldrh	r2, [r7, #8]
 801054e:	f04f 33ff 	mov.w	r3, #4294967295
 8010552:	6879      	ldr	r1, [r7, #4]
 8010554:	f7f9 fc03 	bl	8009d5e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_SET);
 8010558:	697b      	ldr	r3, [r7, #20]
 801055a:	6818      	ldr	r0, [r3, #0]
 801055c:	697b      	ldr	r3, [r7, #20]
 801055e:	889b      	ldrh	r3, [r3, #4]
 8010560:	2201      	movs	r2, #1
 8010562:	4619      	mov	r1, r3
 8010564:	f7f6 ff9c 	bl	80074a0 <HAL_GPIO_WritePin>
	return 0;
 8010568:	2300      	movs	r3, #0
}
 801056a:	4618      	mov	r0, r3
 801056c:	3718      	adds	r7, #24
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}

08010572 <lis3mdl_read>:


static int32_t lis3mdl_read(void * intf_ptr, uint8_t reg_addr, uint8_t * data, uint16_t data_size)
{
 8010572:	b580      	push	{r7, lr}
 8010574:	b086      	sub	sp, #24
 8010576:	af00      	add	r7, sp, #0
 8010578:	60f8      	str	r0, [r7, #12]
 801057a:	607a      	str	r2, [r7, #4]
 801057c:	461a      	mov	r2, r3
 801057e:	460b      	mov	r3, r1
 8010580:	72fb      	strb	r3, [r7, #11]
 8010582:	4613      	mov	r3, r2
 8010584:	813b      	strh	r3, [r7, #8]
	struct lis_spi_intf* spi_intf = intf_ptr;
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	617b      	str	r3, [r7, #20]

	reg_addr=reg_addr|(1<<7);
 801058a:	7afb      	ldrb	r3, [r7, #11]
 801058c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010590:	b2db      	uxtb	r3, r3
 8010592:	72fb      	strb	r3, [r7, #11]
	if (data_size > 1)
 8010594:	893b      	ldrh	r3, [r7, #8]
 8010596:	2b01      	cmp	r3, #1
 8010598:	d905      	bls.n	80105a6 <lis3mdl_read+0x34>
		reg_addr=reg_addr | (1<<6);
 801059a:	7afb      	ldrb	r3, [r7, #11]
 801059c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105a0:	b2db      	uxtb	r3, r3
 80105a2:	72fb      	strb	r3, [r7, #11]
 80105a4:	e004      	b.n	80105b0 <lis3mdl_read+0x3e>
	else
		reg_addr = reg_addr & ~(1<<6);
 80105a6:	7afb      	ldrb	r3, [r7, #11]
 80105a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80105ac:	b2db      	uxtb	r3, r3
 80105ae:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin (spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_RESET);
 80105b0:	697b      	ldr	r3, [r7, #20]
 80105b2:	6818      	ldr	r0, [r3, #0]
 80105b4:	697b      	ldr	r3, [r7, #20]
 80105b6:	889b      	ldrh	r3, [r3, #4]
 80105b8:	2200      	movs	r2, #0
 80105ba:	4619      	mov	r1, r3
 80105bc:	f7f6 ff70 	bl	80074a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi_intf->spi, &reg_addr, 1, HAL_MAX_DELAY);
 80105c0:	697b      	ldr	r3, [r7, #20]
 80105c2:	6898      	ldr	r0, [r3, #8]
 80105c4:	f107 010b 	add.w	r1, r7, #11
 80105c8:	f04f 33ff 	mov.w	r3, #4294967295
 80105cc:	2201      	movs	r2, #1
 80105ce:	f7f9 fbc6 	bl	8009d5e <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi_intf->spi, data, data_size, HAL_MAX_DELAY);
 80105d2:	697b      	ldr	r3, [r7, #20]
 80105d4:	6898      	ldr	r0, [r3, #8]
 80105d6:	893a      	ldrh	r2, [r7, #8]
 80105d8:	f04f 33ff 	mov.w	r3, #4294967295
 80105dc:	6879      	ldr	r1, [r7, #4]
 80105de:	f7f9 fcfa 	bl	8009fd6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_SET);
 80105e2:	697b      	ldr	r3, [r7, #20]
 80105e4:	6818      	ldr	r0, [r3, #0]
 80105e6:	697b      	ldr	r3, [r7, #20]
 80105e8:	889b      	ldrh	r3, [r3, #4]
 80105ea:	2201      	movs	r2, #1
 80105ec:	4619      	mov	r1, r3
 80105ee:	f7f6 ff57 	bl	80074a0 <HAL_GPIO_WritePin>
	return 0;
 80105f2:	2300      	movs	r3, #0
}
 80105f4:	4618      	mov	r0, r3
 80105f6:	3718      	adds	r7, #24
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}

080105fc <lisset>:



void lisset(stmdev_ctx_t *ctx, struct lis_spi_intf *spi_interface)
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b084      	sub	sp, #16
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
 8010604:	6039      	str	r1, [r7, #0]
// Настройка lismdl =-=-=-=-=-=-=-=-=-=-=-=-
	// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	ctx->handle = spi_interface;
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	683a      	ldr	r2, [r7, #0]
 801060a:	609a      	str	r2, [r3, #8]
	ctx->read_reg = lis3mdl_read;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	4a1d      	ldr	r2, [pc, #116]	; (8010684 <lisset+0x88>)
 8010610:	605a      	str	r2, [r3, #4]
	ctx->write_reg = lis3mdl_write;
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	4a1c      	ldr	r2, [pc, #112]	; (8010688 <lisset+0x8c>)
 8010616:	601a      	str	r2, [r3, #0]

	// Это придется делать прямо сразу еще до всего
	// так как иначе он с ним общаться не сможет (судя по доке по-крайней мере)
	lis3mdl_spi_mode_set(ctx, LIS3MDL_SPI_4_WIRE);
 8010618:	2100      	movs	r1, #0
 801061a:	6878      	ldr	r0, [r7, #4]
 801061c:	f000 fa85 	bl	8010b2a <lis3mdl_spi_mode_set>

	uint8_t whoami_mag = 0x00;
 8010620:	2300      	movs	r3, #0
 8010622:	73fb      	strb	r3, [r7, #15]
	lis3mdl_device_id_get(ctx, &whoami_mag);
 8010624:	f107 030f 	add.w	r3, r7, #15
 8010628:	4619      	mov	r1, r3
 801062a:	6878      	ldr	r0, [r7, #4]
 801062c:	f000 fa46 	bl	8010abc <lis3mdl_device_id_get>

	// Убедились что датчик тот который нам нужен
	// Сбросим его
   	lis3mdl_reset_set(ctx, PROPERTY_ENABLE);
 8010630:	2101      	movs	r1, #1
 8010632:	6878      	ldr	r0, [r7, #4]
 8010634:	f000 fa53 	bl	8010ade <lis3mdl_reset_set>
	HAL_Delay(100);
 8010638:	2064      	movs	r0, #100	; 0x64
 801063a:	f7f5 ff89 	bl	8006550 <HAL_Delay>

	lis3mdl_device_id_get(ctx, &whoami_mag);
 801063e:	f107 030f 	add.w	r3, r7, #15
 8010642:	4619      	mov	r1, r3
 8010644:	6878      	ldr	r0, [r7, #4]
 8010646:	f000 fa39 	bl	8010abc <lis3mdl_device_id_get>
	// Настраиваем
	// Обновление данных только целыми порциями
	lis3mdl_block_data_update_set(ctx, PROPERTY_ENABLE);
 801064a:	2101      	movs	r1, #1
 801064c:	6878      	ldr	r0, [r7, #4]
 801064e:	f000 f9a1 	bl	8010994 <lis3mdl_block_data_update_set>
	// Без экономии энергии
	lis3mdl_fast_low_power_set(ctx, PROPERTY_DISABLE);
 8010652:	2100      	movs	r1, #0
 8010654:	6878      	ldr	r0, [r7, #4]
 8010656:	f000 f977 	bl	8010948 <lis3mdl_fast_low_power_set>
	// Диапазон измерения (внимание LSM303 умеет только 16G)
	lis3mdl_full_scale_set(ctx, LIS3MDL_16_GAUSS);
 801065a:	2103      	movs	r1, #3
 801065c:	6878      	ldr	r0, [r7, #4]
 801065e:	f000 f927 	bl	80108b0 <lis3mdl_full_scale_set>
	// Частота опроса
	// внимание для LSM303 запрещены значения
	// LIS3MDL_LP_1kHz, LIS3MDL_MP_560Hz, LIS3MDL_HP_300Hz, LIS3MDL_UHP_155Hz
	lis3mdl_data_rate_set(ctx, LIS3MDL_UHP_80Hz);
 8010662:	213e      	movs	r1, #62	; 0x3e
 8010664:	6878      	ldr	r0, [r7, #4]
 8010666:	f000 f8b7 	bl	80107d8 <lis3mdl_data_rate_set>
	// Включаем температурный сенсор
	lis3mdl_temperature_meas_set(ctx, PROPERTY_ENABLE);
 801066a:	2101      	movs	r1, #1
 801066c:	6878      	ldr	r0, [r7, #4]
 801066e:	f000 f8f9 	bl	8010864 <lis3mdl_temperature_meas_set>
	// режим работы
	lis3mdl_operating_mode_set(ctx, LIS3MDL_CONTINUOUS_MODE);
 8010672:	2100      	movs	r1, #0
 8010674:	6878      	ldr	r0, [r7, #4]
 8010676:	f000 f941 	bl	80108fc <lis3mdl_operating_mode_set>
}
 801067a:	bf00      	nop
 801067c:	3710      	adds	r7, #16
 801067e:	46bd      	mov	sp, r7
 8010680:	bd80      	pop	{r7, pc}
 8010682:	bf00      	nop
 8010684:	08010573 	.word	0x08010573
 8010688:	080104e9 	.word	0x080104e9

0801068c <lisread>:
	// режим работы
	lis3mdl_operating_mode_set(ctx, LIS3MDL_CONTINUOUS_MODE);
}

void lisread(stmdev_ctx_t *ctx, float *temperature_celsius_mag, float mag[3])
{
 801068c:	b590      	push	{r4, r7, lr}
 801068e:	b089      	sub	sp, #36	; 0x24
 8010690:	af00      	add	r7, sp, #0
 8010692:	60f8      	str	r0, [r7, #12]
 8010694:	60b9      	str	r1, [r7, #8]
 8010696:	607a      	str	r2, [r7, #4]
    int16_t temperataure_raw_mag;
	int16_t mag_raw[3] = {};
 8010698:	f107 0314 	add.w	r3, r7, #20
 801069c:	2200      	movs	r2, #0
 801069e:	601a      	str	r2, [r3, #0]
 80106a0:	809a      	strh	r2, [r3, #4]
	lis3mdl_magnetic_raw_get(ctx, mag_raw);
 80106a2:	f107 0314 	add.w	r3, r7, #20
 80106a6:	4619      	mov	r1, r3
 80106a8:	68f8      	ldr	r0, [r7, #12]
 80106aa:	f000 f999 	bl	80109e0 <lis3mdl_magnetic_raw_get>
	lis3mdl_temperature_raw_get(ctx, &temperataure_raw_mag);
 80106ae:	f107 031a 	add.w	r3, r7, #26
 80106b2:	4619      	mov	r1, r3
 80106b4:	68f8      	ldr	r0, [r7, #12]
 80106b6:	f000 f9de 	bl	8010a76 <lis3mdl_temperature_raw_get>
	*temperature_celsius_mag = lis3mdl_from_lsb_to_celsius(temperataure_raw_mag);
 80106ba:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80106be:	4618      	mov	r0, r3
 80106c0:	f000 f870 	bl	80107a4 <lis3mdl_from_lsb_to_celsius>
 80106c4:	eef0 7a40 	vmov.f32	s15, s0
 80106c8:	68bb      	ldr	r3, [r7, #8]
 80106ca:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 3; i++)
 80106ce:	2300      	movs	r3, #0
 80106d0:	61fb      	str	r3, [r7, #28]
 80106d2:	e014      	b.n	80106fe <lisread+0x72>
		mag[i] = lis3mdl_from_fs16_to_gauss(mag_raw[i]);
 80106d4:	69fb      	ldr	r3, [r7, #28]
 80106d6:	005b      	lsls	r3, r3, #1
 80106d8:	f107 0220 	add.w	r2, r7, #32
 80106dc:	4413      	add	r3, r2
 80106de:	f933 1c0c 	ldrsh.w	r1, [r3, #-12]
 80106e2:	69fb      	ldr	r3, [r7, #28]
 80106e4:	009b      	lsls	r3, r3, #2
 80106e6:	687a      	ldr	r2, [r7, #4]
 80106e8:	18d4      	adds	r4, r2, r3
 80106ea:	4608      	mov	r0, r1
 80106ec:	f000 f840 	bl	8010770 <lis3mdl_from_fs16_to_gauss>
 80106f0:	eef0 7a40 	vmov.f32	s15, s0
 80106f4:	edc4 7a00 	vstr	s15, [r4]
	for (int i = 0; i < 3; i++)
 80106f8:	69fb      	ldr	r3, [r7, #28]
 80106fa:	3301      	adds	r3, #1
 80106fc:	61fb      	str	r3, [r7, #28]
 80106fe:	69fb      	ldr	r3, [r7, #28]
 8010700:	2b02      	cmp	r3, #2
 8010702:	dde7      	ble.n	80106d4 <lisread+0x48>
}
 8010704:	bf00      	nop
 8010706:	bf00      	nop
 8010708:	3724      	adds	r7, #36	; 0x24
 801070a:	46bd      	mov	sp, r7
 801070c:	bd90      	pop	{r4, r7, pc}

0801070e <lis3mdl_read_reg>:
  *
  */
int32_t lis3mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 801070e:	b590      	push	{r4, r7, lr}
 8010710:	b087      	sub	sp, #28
 8010712:	af00      	add	r7, sp, #0
 8010714:	60f8      	str	r0, [r7, #12]
 8010716:	607a      	str	r2, [r7, #4]
 8010718:	461a      	mov	r2, r3
 801071a:	460b      	mov	r3, r1
 801071c:	72fb      	strb	r3, [r7, #11]
 801071e:	4613      	mov	r3, r2
 8010720:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	685c      	ldr	r4, [r3, #4]
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	6898      	ldr	r0, [r3, #8]
 801072a:	893b      	ldrh	r3, [r7, #8]
 801072c:	7af9      	ldrb	r1, [r7, #11]
 801072e:	687a      	ldr	r2, [r7, #4]
 8010730:	47a0      	blx	r4
 8010732:	6178      	str	r0, [r7, #20]

  return ret;
 8010734:	697b      	ldr	r3, [r7, #20]
}
 8010736:	4618      	mov	r0, r3
 8010738:	371c      	adds	r7, #28
 801073a:	46bd      	mov	sp, r7
 801073c:	bd90      	pop	{r4, r7, pc}

0801073e <lis3mdl_write_reg>:
  *
  */
int32_t lis3mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 801073e:	b590      	push	{r4, r7, lr}
 8010740:	b087      	sub	sp, #28
 8010742:	af00      	add	r7, sp, #0
 8010744:	60f8      	str	r0, [r7, #12]
 8010746:	607a      	str	r2, [r7, #4]
 8010748:	461a      	mov	r2, r3
 801074a:	460b      	mov	r3, r1
 801074c:	72fb      	strb	r3, [r7, #11]
 801074e:	4613      	mov	r3, r2
 8010750:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	681c      	ldr	r4, [r3, #0]
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	6898      	ldr	r0, [r3, #8]
 801075a:	893b      	ldrh	r3, [r7, #8]
 801075c:	7af9      	ldrb	r1, [r7, #11]
 801075e:	687a      	ldr	r2, [r7, #4]
 8010760:	47a0      	blx	r4
 8010762:	6178      	str	r0, [r7, #20]

  return ret;
 8010764:	697b      	ldr	r3, [r7, #20]
}
 8010766:	4618      	mov	r0, r3
 8010768:	371c      	adds	r7, #28
 801076a:	46bd      	mov	sp, r7
 801076c:	bd90      	pop	{r4, r7, pc}
	...

08010770 <lis3mdl_from_fs16_to_gauss>:
{
  return ((float_t)lsb / 2281.0f);
}

float_t lis3mdl_from_fs16_to_gauss(int16_t lsb)
{
 8010770:	b480      	push	{r7}
 8010772:	b083      	sub	sp, #12
 8010774:	af00      	add	r7, sp, #0
 8010776:	4603      	mov	r3, r0
 8010778:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 1711.0f);
 801077a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801077e:	ee07 3a90 	vmov	s15, r3
 8010782:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010786:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80107a0 <lis3mdl_from_fs16_to_gauss+0x30>
 801078a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801078e:	eef0 7a66 	vmov.f32	s15, s13
}
 8010792:	eeb0 0a67 	vmov.f32	s0, s15
 8010796:	370c      	adds	r7, #12
 8010798:	46bd      	mov	sp, r7
 801079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079e:	4770      	bx	lr
 80107a0:	44d5e000 	.word	0x44d5e000

080107a4 <lis3mdl_from_lsb_to_celsius>:

float_t lis3mdl_from_lsb_to_celsius(int16_t lsb)
{
 80107a4:	b480      	push	{r7}
 80107a6:	b083      	sub	sp, #12
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	4603      	mov	r3, r0
 80107ac:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 8.0f) + (25.0f);
 80107ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80107b2:	ee07 3a90 	vmov	s15, r3
 80107b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80107ba:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80107be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80107c2:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80107c6:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80107ca:	eeb0 0a67 	vmov.f32	s0, s15
 80107ce:	370c      	adds	r7, #12
 80107d0:	46bd      	mov	sp, r7
 80107d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d6:	4770      	bx	lr

080107d8 <lis3mdl_data_rate_set>:
  * @param  val         change the values of om in reg CTRL_REG1
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_data_rate_set(stmdev_ctx_t *ctx, lis3mdl_om_t val)
{
 80107d8:	b580      	push	{r7, lr}
 80107da:	b086      	sub	sp, #24
 80107dc:	af00      	add	r7, sp, #0
 80107de:	6078      	str	r0, [r7, #4]
 80107e0:	460b      	mov	r3, r1
 80107e2:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg1_t ctrl_reg1;
  lis3mdl_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80107e4:	f107 0210 	add.w	r2, r7, #16
 80107e8:	2301      	movs	r3, #1
 80107ea:	2120      	movs	r1, #32
 80107ec:	6878      	ldr	r0, [r7, #4]
 80107ee:	f7ff ff8e 	bl	801070e <lis3mdl_read_reg>
 80107f2:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80107f4:	697b      	ldr	r3, [r7, #20]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d10f      	bne.n	801081a <lis3mdl_data_rate_set+0x42>
  {
    ctrl_reg1.om = (uint8_t)val;
 80107fa:	78fb      	ldrb	r3, [r7, #3]
 80107fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010800:	b2da      	uxtb	r2, r3
 8010802:	7c3b      	ldrb	r3, [r7, #16]
 8010804:	f362 0346 	bfi	r3, r2, #1, #6
 8010808:	743b      	strb	r3, [r7, #16]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 801080a:	f107 0210 	add.w	r2, r7, #16
 801080e:	2301      	movs	r3, #1
 8010810:	2120      	movs	r1, #32
 8010812:	6878      	ldr	r0, [r7, #4]
 8010814:	f7ff ff93 	bl	801073e <lis3mdl_write_reg>
 8010818:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 801081a:	697b      	ldr	r3, [r7, #20]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d107      	bne.n	8010830 <lis3mdl_data_rate_set+0x58>
  {
    /* set mode also for z axis, ctrl_reg4 -> omz */
    ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8010820:	f107 020c 	add.w	r2, r7, #12
 8010824:	2301      	movs	r3, #1
 8010826:	2123      	movs	r1, #35	; 0x23
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	f7ff ff70 	bl	801070e <lis3mdl_read_reg>
 801082e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8010830:	697b      	ldr	r3, [r7, #20]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d111      	bne.n	801085a <lis3mdl_data_rate_set+0x82>
  {
    ctrl_reg4.omz = (uint8_t)(((uint8_t) val >> 4) & 0x03U);
 8010836:	78fb      	ldrb	r3, [r7, #3]
 8010838:	091b      	lsrs	r3, r3, #4
 801083a:	b2db      	uxtb	r3, r3
 801083c:	f003 0303 	and.w	r3, r3, #3
 8010840:	b2da      	uxtb	r2, r3
 8010842:	7b3b      	ldrb	r3, [r7, #12]
 8010844:	f362 0383 	bfi	r3, r2, #2, #2
 8010848:	733b      	strb	r3, [r7, #12]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG4,
 801084a:	f107 020c 	add.w	r2, r7, #12
 801084e:	2301      	movs	r3, #1
 8010850:	2123      	movs	r1, #35	; 0x23
 8010852:	6878      	ldr	r0, [r7, #4]
 8010854:	f7ff ff73 	bl	801073e <lis3mdl_write_reg>
 8010858:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 801085a:	697b      	ldr	r3, [r7, #20]
}
 801085c:	4618      	mov	r0, r3
 801085e:	3718      	adds	r7, #24
 8010860:	46bd      	mov	sp, r7
 8010862:	bd80      	pop	{r7, pc}

08010864 <lis3mdl_temperature_meas_set>:
  * @param  val      change the values of temp_en in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_temperature_meas_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b084      	sub	sp, #16
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
 801086c:	460b      	mov	r3, r1
 801086e:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8010870:	f107 0208 	add.w	r2, r7, #8
 8010874:	2301      	movs	r3, #1
 8010876:	2120      	movs	r1, #32
 8010878:	6878      	ldr	r0, [r7, #4]
 801087a:	f7ff ff48 	bl	801070e <lis3mdl_read_reg>
 801087e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d10f      	bne.n	80108a6 <lis3mdl_temperature_meas_set+0x42>
  {
    ctrl_reg1.temp_en = val;
 8010886:	78fb      	ldrb	r3, [r7, #3]
 8010888:	f003 0301 	and.w	r3, r3, #1
 801088c:	b2da      	uxtb	r2, r3
 801088e:	7a3b      	ldrb	r3, [r7, #8]
 8010890:	f362 13c7 	bfi	r3, r2, #7, #1
 8010894:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8010896:	f107 0208 	add.w	r2, r7, #8
 801089a:	2301      	movs	r3, #1
 801089c:	2120      	movs	r1, #32
 801089e:	6878      	ldr	r0, [r7, #4]
 80108a0:	f7ff ff4d 	bl	801073e <lis3mdl_write_reg>
 80108a4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80108a6:	68fb      	ldr	r3, [r7, #12]
}
 80108a8:	4618      	mov	r0, r3
 80108aa:	3710      	adds	r7, #16
 80108ac:	46bd      	mov	sp, r7
 80108ae:	bd80      	pop	{r7, pc}

080108b0 <lis3mdl_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_full_scale_set(stmdev_ctx_t *ctx, lis3mdl_fs_t val)
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b084      	sub	sp, #16
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
 80108b8:	460b      	mov	r3, r1
 80108ba:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80108bc:	f107 0208 	add.w	r2, r7, #8
 80108c0:	2301      	movs	r3, #1
 80108c2:	2121      	movs	r1, #33	; 0x21
 80108c4:	6878      	ldr	r0, [r7, #4]
 80108c6:	f7ff ff22 	bl	801070e <lis3mdl_read_reg>
 80108ca:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d10f      	bne.n	80108f2 <lis3mdl_full_scale_set+0x42>
  {
    ctrl_reg2.fs = (uint8_t)val;
 80108d2:	78fb      	ldrb	r3, [r7, #3]
 80108d4:	f003 0303 	and.w	r3, r3, #3
 80108d8:	b2da      	uxtb	r2, r3
 80108da:	7a3b      	ldrb	r3, [r7, #8]
 80108dc:	f362 1346 	bfi	r3, r2, #5, #2
 80108e0:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80108e2:	f107 0208 	add.w	r2, r7, #8
 80108e6:	2301      	movs	r3, #1
 80108e8:	2121      	movs	r1, #33	; 0x21
 80108ea:	6878      	ldr	r0, [r7, #4]
 80108ec:	f7ff ff27 	bl	801073e <lis3mdl_write_reg>
 80108f0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80108f2:	68fb      	ldr	r3, [r7, #12]
}
 80108f4:	4618      	mov	r0, r3
 80108f6:	3710      	adds	r7, #16
 80108f8:	46bd      	mov	sp, r7
 80108fa:	bd80      	pop	{r7, pc}

080108fc <lis3mdl_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis3mdl_md_t val)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b084      	sub	sp, #16
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
 8010904:	460b      	mov	r3, r1
 8010906:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg3_t ctrl_reg3;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 8010908:	f107 0208 	add.w	r2, r7, #8
 801090c:	2301      	movs	r3, #1
 801090e:	2122      	movs	r1, #34	; 0x22
 8010910:	6878      	ldr	r0, [r7, #4]
 8010912:	f7ff fefc 	bl	801070e <lis3mdl_read_reg>
 8010916:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d10f      	bne.n	801093e <lis3mdl_operating_mode_set+0x42>
  {
    ctrl_reg3.md = (uint8_t)val;
 801091e:	78fb      	ldrb	r3, [r7, #3]
 8010920:	f003 0303 	and.w	r3, r3, #3
 8010924:	b2da      	uxtb	r2, r3
 8010926:	7a3b      	ldrb	r3, [r7, #8]
 8010928:	f362 0301 	bfi	r3, r2, #0, #2
 801092c:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 801092e:	f107 0208 	add.w	r2, r7, #8
 8010932:	2301      	movs	r3, #1
 8010934:	2122      	movs	r1, #34	; 0x22
 8010936:	6878      	ldr	r0, [r7, #4]
 8010938:	f7ff ff01 	bl	801073e <lis3mdl_write_reg>
 801093c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 801093e:	68fb      	ldr	r3, [r7, #12]
}
 8010940:	4618      	mov	r0, r3
 8010942:	3710      	adds	r7, #16
 8010944:	46bd      	mov	sp, r7
 8010946:	bd80      	pop	{r7, pc}

08010948 <lis3mdl_fast_low_power_set>:
  * @param  val      change the values of lp in reg CTRL_REG3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_fast_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8010948:	b580      	push	{r7, lr}
 801094a:	b084      	sub	sp, #16
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
 8010950:	460b      	mov	r3, r1
 8010952:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg3_t ctrl_reg3;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 8010954:	f107 0208 	add.w	r2, r7, #8
 8010958:	2301      	movs	r3, #1
 801095a:	2122      	movs	r1, #34	; 0x22
 801095c:	6878      	ldr	r0, [r7, #4]
 801095e:	f7ff fed6 	bl	801070e <lis3mdl_read_reg>
 8010962:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d10f      	bne.n	801098a <lis3mdl_fast_low_power_set+0x42>
  {
    ctrl_reg3.lp = val;
 801096a:	78fb      	ldrb	r3, [r7, #3]
 801096c:	f003 0301 	and.w	r3, r3, #1
 8010970:	b2da      	uxtb	r2, r3
 8010972:	7a3b      	ldrb	r3, [r7, #8]
 8010974:	f362 1345 	bfi	r3, r2, #5, #1
 8010978:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 801097a:	f107 0208 	add.w	r2, r7, #8
 801097e:	2301      	movs	r3, #1
 8010980:	2122      	movs	r1, #34	; 0x22
 8010982:	6878      	ldr	r0, [r7, #4]
 8010984:	f7ff fedb 	bl	801073e <lis3mdl_write_reg>
 8010988:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 801098a:	68fb      	ldr	r3, [r7, #12]
}
 801098c:	4618      	mov	r0, r3
 801098e:	3710      	adds	r7, #16
 8010990:	46bd      	mov	sp, r7
 8010992:	bd80      	pop	{r7, pc}

08010994 <lis3mdl_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG5
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b084      	sub	sp, #16
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
 801099c:	460b      	mov	r3, r1
 801099e:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg5_t ctrl_reg5;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 80109a0:	f107 0208 	add.w	r2, r7, #8
 80109a4:	2301      	movs	r3, #1
 80109a6:	2124      	movs	r1, #36	; 0x24
 80109a8:	6878      	ldr	r0, [r7, #4]
 80109aa:	f7ff feb0 	bl	801070e <lis3mdl_read_reg>
 80109ae:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d10f      	bne.n	80109d6 <lis3mdl_block_data_update_set+0x42>
  {
    ctrl_reg5.bdu = val;
 80109b6:	78fb      	ldrb	r3, [r7, #3]
 80109b8:	f003 0301 	and.w	r3, r3, #1
 80109bc:	b2da      	uxtb	r2, r3
 80109be:	7a3b      	ldrb	r3, [r7, #8]
 80109c0:	f362 1386 	bfi	r3, r2, #6, #1
 80109c4:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 80109c6:	f107 0208 	add.w	r2, r7, #8
 80109ca:	2301      	movs	r3, #1
 80109cc:	2124      	movs	r1, #36	; 0x24
 80109ce:	6878      	ldr	r0, [r7, #4]
 80109d0:	f7ff feb5 	bl	801073e <lis3mdl_write_reg>
 80109d4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80109d6:	68fb      	ldr	r3, [r7, #12]
}
 80109d8:	4618      	mov	r0, r3
 80109da:	3710      	adds	r7, #16
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd80      	pop	{r7, pc}

080109e0 <lis3mdl_magnetic_raw_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b086      	sub	sp, #24
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
 80109e8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_OUT_X_L, (uint8_t *) buff, 6);
 80109ea:	f107 020c 	add.w	r2, r7, #12
 80109ee:	2306      	movs	r3, #6
 80109f0:	2128      	movs	r1, #40	; 0x28
 80109f2:	6878      	ldr	r0, [r7, #4]
 80109f4:	f7ff fe8b 	bl	801070e <lis3mdl_read_reg>
 80109f8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80109fa:	7b7b      	ldrb	r3, [r7, #13]
 80109fc:	b21a      	sxth	r2, r3
 80109fe:	683b      	ldr	r3, [r7, #0]
 8010a00:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8010a02:	683b      	ldr	r3, [r7, #0]
 8010a04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010a08:	b29b      	uxth	r3, r3
 8010a0a:	021b      	lsls	r3, r3, #8
 8010a0c:	b29a      	uxth	r2, r3
 8010a0e:	7b3b      	ldrb	r3, [r7, #12]
 8010a10:	b29b      	uxth	r3, r3
 8010a12:	4413      	add	r3, r2
 8010a14:	b29b      	uxth	r3, r3
 8010a16:	b21a      	sxth	r2, r3
 8010a18:	683b      	ldr	r3, [r7, #0]
 8010a1a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8010a1c:	7bfa      	ldrb	r2, [r7, #15]
 8010a1e:	683b      	ldr	r3, [r7, #0]
 8010a20:	3302      	adds	r3, #2
 8010a22:	b212      	sxth	r2, r2
 8010a24:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8010a26:	683b      	ldr	r3, [r7, #0]
 8010a28:	3302      	adds	r3, #2
 8010a2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010a2e:	b29b      	uxth	r3, r3
 8010a30:	021b      	lsls	r3, r3, #8
 8010a32:	b29a      	uxth	r2, r3
 8010a34:	7bbb      	ldrb	r3, [r7, #14]
 8010a36:	b29b      	uxth	r3, r3
 8010a38:	4413      	add	r3, r2
 8010a3a:	b29a      	uxth	r2, r3
 8010a3c:	683b      	ldr	r3, [r7, #0]
 8010a3e:	3302      	adds	r3, #2
 8010a40:	b212      	sxth	r2, r2
 8010a42:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8010a44:	7c7a      	ldrb	r2, [r7, #17]
 8010a46:	683b      	ldr	r3, [r7, #0]
 8010a48:	3304      	adds	r3, #4
 8010a4a:	b212      	sxth	r2, r2
 8010a4c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8010a4e:	683b      	ldr	r3, [r7, #0]
 8010a50:	3304      	adds	r3, #4
 8010a52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010a56:	b29b      	uxth	r3, r3
 8010a58:	021b      	lsls	r3, r3, #8
 8010a5a:	b29a      	uxth	r2, r3
 8010a5c:	7c3b      	ldrb	r3, [r7, #16]
 8010a5e:	b29b      	uxth	r3, r3
 8010a60:	4413      	add	r3, r2
 8010a62:	b29a      	uxth	r2, r3
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	3304      	adds	r3, #4
 8010a68:	b212      	sxth	r2, r2
 8010a6a:	801a      	strh	r2, [r3, #0]

  return ret;
 8010a6c:	697b      	ldr	r3, [r7, #20]
}
 8010a6e:	4618      	mov	r0, r3
 8010a70:	3718      	adds	r7, #24
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}

08010a76 <lis3mdl_temperature_raw_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8010a76:	b580      	push	{r7, lr}
 8010a78:	b084      	sub	sp, #16
 8010a7a:	af00      	add	r7, sp, #0
 8010a7c:	6078      	str	r0, [r7, #4]
 8010a7e:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_TEMP_OUT_L, (uint8_t *) buff, 2);
 8010a80:	f107 0208 	add.w	r2, r7, #8
 8010a84:	2302      	movs	r3, #2
 8010a86:	212e      	movs	r1, #46	; 0x2e
 8010a88:	6878      	ldr	r0, [r7, #4]
 8010a8a:	f7ff fe40 	bl	801070e <lis3mdl_read_reg>
 8010a8e:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8010a90:	7a7b      	ldrb	r3, [r7, #9]
 8010a92:	b21a      	sxth	r2, r3
 8010a94:	683b      	ldr	r3, [r7, #0]
 8010a96:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8010a98:	683b      	ldr	r3, [r7, #0]
 8010a9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010a9e:	b29b      	uxth	r3, r3
 8010aa0:	021b      	lsls	r3, r3, #8
 8010aa2:	b29a      	uxth	r2, r3
 8010aa4:	7a3b      	ldrb	r3, [r7, #8]
 8010aa6:	b29b      	uxth	r3, r3
 8010aa8:	4413      	add	r3, r2
 8010aaa:	b29b      	uxth	r3, r3
 8010aac:	b21a      	sxth	r2, r3
 8010aae:	683b      	ldr	r3, [r7, #0]
 8010ab0:	801a      	strh	r2, [r3, #0]

  return ret;
 8010ab2:	68fb      	ldr	r3, [r7, #12]
}
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	3710      	adds	r7, #16
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	bd80      	pop	{r7, pc}

08010abc <lis3mdl_device_id_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b084      	sub	sp, #16
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
 8010ac4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_WHO_AM_I, (uint8_t *) buff, 1);
 8010ac6:	2301      	movs	r3, #1
 8010ac8:	683a      	ldr	r2, [r7, #0]
 8010aca:	210f      	movs	r1, #15
 8010acc:	6878      	ldr	r0, [r7, #4]
 8010ace:	f7ff fe1e 	bl	801070e <lis3mdl_read_reg>
 8010ad2:	60f8      	str	r0, [r7, #12]

  return ret;
 8010ad4:	68fb      	ldr	r3, [r7, #12]
}
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	3710      	adds	r7, #16
 8010ada:	46bd      	mov	sp, r7
 8010adc:	bd80      	pop	{r7, pc}

08010ade <lis3mdl_reset_set>:
  * @param  val      change the values of soft_rst in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8010ade:	b580      	push	{r7, lr}
 8010ae0:	b084      	sub	sp, #16
 8010ae2:	af00      	add	r7, sp, #0
 8010ae4:	6078      	str	r0, [r7, #4]
 8010ae6:	460b      	mov	r3, r1
 8010ae8:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8010aea:	f107 0208 	add.w	r2, r7, #8
 8010aee:	2301      	movs	r3, #1
 8010af0:	2121      	movs	r1, #33	; 0x21
 8010af2:	6878      	ldr	r0, [r7, #4]
 8010af4:	f7ff fe0b 	bl	801070e <lis3mdl_read_reg>
 8010af8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d10f      	bne.n	8010b20 <lis3mdl_reset_set+0x42>
  {
    ctrl_reg2.soft_rst = val;
 8010b00:	78fb      	ldrb	r3, [r7, #3]
 8010b02:	f003 0301 	and.w	r3, r3, #1
 8010b06:	b2da      	uxtb	r2, r3
 8010b08:	7a3b      	ldrb	r3, [r7, #8]
 8010b0a:	f362 0382 	bfi	r3, r2, #2, #1
 8010b0e:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8010b10:	f107 0208 	add.w	r2, r7, #8
 8010b14:	2301      	movs	r3, #1
 8010b16:	2121      	movs	r1, #33	; 0x21
 8010b18:	6878      	ldr	r0, [r7, #4]
 8010b1a:	f7ff fe10 	bl	801073e <lis3mdl_write_reg>
 8010b1e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8010b20:	68fb      	ldr	r3, [r7, #12]
}
 8010b22:	4618      	mov	r0, r3
 8010b24:	3710      	adds	r7, #16
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd80      	pop	{r7, pc}

08010b2a <lis3mdl_spi_mode_set>:
  * @param  val      change the values of sim in reg CTRL_REG3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_spi_mode_set(stmdev_ctx_t *ctx, lis3mdl_sim_t val)
{
 8010b2a:	b580      	push	{r7, lr}
 8010b2c:	b084      	sub	sp, #16
 8010b2e:	af00      	add	r7, sp, #0
 8010b30:	6078      	str	r0, [r7, #4]
 8010b32:	460b      	mov	r3, r1
 8010b34:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg3_t ctrl_reg3;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 8010b36:	f107 0208 	add.w	r2, r7, #8
 8010b3a:	2301      	movs	r3, #1
 8010b3c:	2122      	movs	r1, #34	; 0x22
 8010b3e:	6878      	ldr	r0, [r7, #4]
 8010b40:	f7ff fde5 	bl	801070e <lis3mdl_read_reg>
 8010b44:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d10f      	bne.n	8010b6c <lis3mdl_spi_mode_set+0x42>
  {
    ctrl_reg3.sim = (uint8_t)val;
 8010b4c:	78fb      	ldrb	r3, [r7, #3]
 8010b4e:	f003 0301 	and.w	r3, r3, #1
 8010b52:	b2da      	uxtb	r2, r3
 8010b54:	7a3b      	ldrb	r3, [r7, #8]
 8010b56:	f362 0382 	bfi	r3, r2, #2, #1
 8010b5a:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 8010b5c:	f107 0208 	add.w	r2, r7, #8
 8010b60:	2301      	movs	r3, #1
 8010b62:	2122      	movs	r1, #34	; 0x22
 8010b64:	6878      	ldr	r0, [r7, #4]
 8010b66:	f7ff fdea 	bl	801073e <lis3mdl_write_reg>
 8010b6a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8010b6c:	68fb      	ldr	r3, [r7, #12]
}
 8010b6e:	4618      	mov	r0, r3
 8010b70:	3710      	adds	r7, #16
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd80      	pop	{r7, pc}

08010b76 <lsmd6s3_write>:

#ifdef HAL_SPI_MODULE_ENABLED
extern SPI_HandleTypeDef hspi1;

int32_t lsmd6s3_write(void * intf_ptr, uint8_t reg_addr, const uint8_t * data, uint16_t data_size)
{
 8010b76:	b580      	push	{r7, lr}
 8010b78:	b086      	sub	sp, #24
 8010b7a:	af00      	add	r7, sp, #0
 8010b7c:	60f8      	str	r0, [r7, #12]
 8010b7e:	607a      	str	r2, [r7, #4]
 8010b80:	461a      	mov	r2, r3
 8010b82:	460b      	mov	r3, r1
 8010b84:	72fb      	strb	r3, [r7, #11]
 8010b86:	4613      	mov	r3, r2
 8010b88:	813b      	strh	r3, [r7, #8]
	struct lsm_spi_intf* spi_intf = intf_ptr;
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	617b      	str	r3, [r7, #20]


	reg_addr=reg_addr&~(1<<7);
 8010b8e:	7afb      	ldrb	r3, [r7, #11]
 8010b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b94:	b2db      	uxtb	r3, r3
 8010b96:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin (spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_RESET);
 8010b98:	697b      	ldr	r3, [r7, #20]
 8010b9a:	6818      	ldr	r0, [r3, #0]
 8010b9c:	697b      	ldr	r3, [r7, #20]
 8010b9e:	889b      	ldrh	r3, [r3, #4]
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	4619      	mov	r1, r3
 8010ba4:	f7f6 fc7c 	bl	80074a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi_intf->spi, &reg_addr, 1, HAL_MAX_DELAY);
 8010ba8:	697b      	ldr	r3, [r7, #20]
 8010baa:	6898      	ldr	r0, [r3, #8]
 8010bac:	f107 010b 	add.w	r1, r7, #11
 8010bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8010bb4:	2201      	movs	r2, #1
 8010bb6:	f7f9 f8d2 	bl	8009d5e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(spi_intf->spi, (uint8_t*)data, data_size, HAL_MAX_DELAY);
 8010bba:	697b      	ldr	r3, [r7, #20]
 8010bbc:	6898      	ldr	r0, [r3, #8]
 8010bbe:	893a      	ldrh	r2, [r7, #8]
 8010bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8010bc4:	6879      	ldr	r1, [r7, #4]
 8010bc6:	f7f9 f8ca 	bl	8009d5e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_SET);
 8010bca:	697b      	ldr	r3, [r7, #20]
 8010bcc:	6818      	ldr	r0, [r3, #0]
 8010bce:	697b      	ldr	r3, [r7, #20]
 8010bd0:	889b      	ldrh	r3, [r3, #4]
 8010bd2:	2201      	movs	r2, #1
 8010bd4:	4619      	mov	r1, r3
 8010bd6:	f7f6 fc63 	bl	80074a0 <HAL_GPIO_WritePin>
	return 0;
 8010bda:	2300      	movs	r3, #0
}
 8010bdc:	4618      	mov	r0, r3
 8010bde:	3718      	adds	r7, #24
 8010be0:	46bd      	mov	sp, r7
 8010be2:	bd80      	pop	{r7, pc}

08010be4 <lsm6ds3_read>:


int32_t lsm6ds3_read(void * intf_ptr, uint8_t reg_addr, uint8_t * data, uint16_t data_size)
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b086      	sub	sp, #24
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	60f8      	str	r0, [r7, #12]
 8010bec:	607a      	str	r2, [r7, #4]
 8010bee:	461a      	mov	r2, r3
 8010bf0:	460b      	mov	r3, r1
 8010bf2:	72fb      	strb	r3, [r7, #11]
 8010bf4:	4613      	mov	r3, r2
 8010bf6:	813b      	strh	r3, [r7, #8]
	struct lsm_spi_intf* spi_intf = intf_ptr;
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	617b      	str	r3, [r7, #20]


	reg_addr=reg_addr|(1<<7);
 8010bfc:	7afb      	ldrb	r3, [r7, #11]
 8010bfe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010c02:	b2db      	uxtb	r3, r3
 8010c04:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin (spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_RESET);
 8010c06:	697b      	ldr	r3, [r7, #20]
 8010c08:	6818      	ldr	r0, [r3, #0]
 8010c0a:	697b      	ldr	r3, [r7, #20]
 8010c0c:	889b      	ldrh	r3, [r3, #4]
 8010c0e:	2200      	movs	r2, #0
 8010c10:	4619      	mov	r1, r3
 8010c12:	f7f6 fc45 	bl	80074a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi_intf->spi, &reg_addr, 1, HAL_MAX_DELAY);
 8010c16:	697b      	ldr	r3, [r7, #20]
 8010c18:	6898      	ldr	r0, [r3, #8]
 8010c1a:	f107 010b 	add.w	r1, r7, #11
 8010c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8010c22:	2201      	movs	r2, #1
 8010c24:	f7f9 f89b 	bl	8009d5e <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi_intf->spi, data, data_size, HAL_MAX_DELAY);
 8010c28:	697b      	ldr	r3, [r7, #20]
 8010c2a:	6898      	ldr	r0, [r3, #8]
 8010c2c:	893a      	ldrh	r2, [r7, #8]
 8010c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8010c32:	6879      	ldr	r1, [r7, #4]
 8010c34:	f7f9 f9cf 	bl	8009fd6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_SET);
 8010c38:	697b      	ldr	r3, [r7, #20]
 8010c3a:	6818      	ldr	r0, [r3, #0]
 8010c3c:	697b      	ldr	r3, [r7, #20]
 8010c3e:	889b      	ldrh	r3, [r3, #4]
 8010c40:	2201      	movs	r2, #1
 8010c42:	4619      	mov	r1, r3
 8010c44:	f7f6 fc2c 	bl	80074a0 <HAL_GPIO_WritePin>
	return 0;
 8010c48:	2300      	movs	r3, #0
}
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	3718      	adds	r7, #24
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	bd80      	pop	{r7, pc}
	...

08010c54 <lsmset>:
	return 0;
}


void lsmset(stmdev_ctx_t *ctx, struct lsm_spi_intf *spi_interface)
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b084      	sub	sp, #16
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
 8010c5c:	6039      	str	r1, [r7, #0]
	// Настройка lsm6ds3 =-=-=-=-=-=-=-=-=-=-=-=-
		// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

		ctx->handle = spi_interface;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	683a      	ldr	r2, [r7, #0]
 8010c62:	609a      	str	r2, [r3, #8]
		ctx->read_reg = lsm6ds3_read;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	4a14      	ldr	r2, [pc, #80]	; (8010cb8 <lsmset+0x64>)
 8010c68:	605a      	str	r2, [r3, #4]
		ctx->write_reg = lsmd6s3_write;
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	4a13      	ldr	r2, [pc, #76]	; (8010cbc <lsmset+0x68>)
 8010c6e:	601a      	str	r2, [r3, #0]

		uint8_t whoami = 0x00;
 8010c70:	2300      	movs	r3, #0
 8010c72:	73fb      	strb	r3, [r7, #15]
		lsm6ds3_device_id_get(ctx, &whoami);
 8010c74:	f107 030f 	add.w	r3, r7, #15
 8010c78:	4619      	mov	r1, r3
 8010c7a:	6878      	ldr	r0, [r7, #4]
 8010c7c:	f000 fa5f 	bl	801113e <lsm6ds3_device_id_get>

		lsm6ds3_reset_set(ctx, PROPERTY_ENABLE);
 8010c80:	2101      	movs	r1, #1
 8010c82:	6878      	ldr	r0, [r7, #4]
 8010c84:	f000 fa6c 	bl	8011160 <lsm6ds3_reset_set>
		HAL_Delay(100);
 8010c88:	2064      	movs	r0, #100	; 0x64
 8010c8a:	f7f5 fc61 	bl	8006550 <HAL_Delay>

		lsm6ds3_xl_full_scale_set(ctx, LSM6DS3_16g);
 8010c8e:	2101      	movs	r1, #1
 8010c90:	6878      	ldr	r0, [r7, #4]
 8010c92:	f000 f903 	bl	8010e9c <lsm6ds3_xl_full_scale_set>
		lsm6ds3_xl_data_rate_set(ctx, LSM6DS3_XL_ODR_104Hz);
 8010c96:	2104      	movs	r1, #4
 8010c98:	6878      	ldr	r0, [r7, #4]
 8010c9a:	f000 f925 	bl	8010ee8 <lsm6ds3_xl_data_rate_set>

		lsm6ds3_gy_full_scale_set(ctx, LSM6DS3_2000dps);
 8010c9e:	2106      	movs	r1, #6
 8010ca0:	6878      	ldr	r0, [r7, #4]
 8010ca2:	f000 f947 	bl	8010f34 <lsm6ds3_gy_full_scale_set>
		lsm6ds3_gy_data_rate_set(ctx, LSM6DS3_GY_ODR_104Hz);
 8010ca6:	2104      	movs	r1, #4
 8010ca8:	6878      	ldr	r0, [r7, #4]
 8010caa:	f000 f969 	bl	8010f80 <lsm6ds3_gy_data_rate_set>
}
 8010cae:	bf00      	nop
 8010cb0:	3710      	adds	r7, #16
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	bd80      	pop	{r7, pc}
 8010cb6:	bf00      	nop
 8010cb8:	08010be5 	.word	0x08010be5
 8010cbc:	08010b77 	.word	0x08010b77

08010cc0 <lsmread>:

		lsm6ds3_gy_full_scale_set(ctx, LSM6DS3_2000dps);
		lsm6ds3_gy_data_rate_set(ctx, LSM6DS3_GY_ODR_104Hz);
}*/
void lsmread(stmdev_ctx_t *ctx, float *temperature_celsius_gyro, float (*acc_g)[3], float (*gyro_dps)[3])
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b08a      	sub	sp, #40	; 0x28
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	60f8      	str	r0, [r7, #12]
 8010cc8:	60b9      	str	r1, [r7, #8]
 8010cca:	607a      	str	r2, [r7, #4]
 8010ccc:	603b      	str	r3, [r7, #0]
	// Чтение данных из lsm6ds3
		// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
		int16_t temperature_raw_gyro = {0};
 8010cce:	2300      	movs	r3, #0
 8010cd0:	847b      	strh	r3, [r7, #34]	; 0x22
		int16_t acc_raw[3] = {0};
 8010cd2:	f107 031c 	add.w	r3, r7, #28
 8010cd6:	2200      	movs	r2, #0
 8010cd8:	601a      	str	r2, [r3, #0]
 8010cda:	809a      	strh	r2, [r3, #4]
		int16_t gyro_raw[3] = {0};
 8010cdc:	f107 0314 	add.w	r3, r7, #20
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	601a      	str	r2, [r3, #0]
 8010ce4:	809a      	strh	r2, [r3, #4]
		lsm6ds3_temperature_raw_get(ctx, &temperature_raw_gyro);
 8010ce6:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8010cea:	4619      	mov	r1, r3
 8010cec:	68f8      	ldr	r0, [r7, #12]
 8010cee:	f000 f96d 	bl	8010fcc <lsm6ds3_temperature_raw_get>
		lsm6ds3_acceleration_raw_get(ctx, acc_raw);
 8010cf2:	f107 031c 	add.w	r3, r7, #28
 8010cf6:	4619      	mov	r1, r3
 8010cf8:	68f8      	ldr	r0, [r7, #12]
 8010cfa:	f000 f9d5 	bl	80110a8 <lsm6ds3_acceleration_raw_get>
		lsm6ds3_angular_rate_raw_get(ctx, gyro_raw);
 8010cfe:	f107 0314 	add.w	r3, r7, #20
 8010d02:	4619      	mov	r1, r3
 8010d04:	68f8      	ldr	r0, [r7, #12]
 8010d06:	f000 f984 	bl	8011012 <lsm6ds3_angular_rate_raw_get>

		// Пересчет из попугаев в человеческие величины
		*temperature_celsius_gyro = lsm6ds3_from_lsb_to_celsius(temperature_raw_gyro);
 8010d0a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f000 f8aa 	bl	8010e68 <lsm6ds3_from_lsb_to_celsius>
 8010d14:	eef0 7a40 	vmov.f32	s15, s0
 8010d18:	68bb      	ldr	r3, [r7, #8]
 8010d1a:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < 3; i++)
 8010d1e:	2300      	movs	r3, #0
 8010d20:	627b      	str	r3, [r7, #36]	; 0x24
 8010d22:	e02e      	b.n	8010d82 <lsmread+0xc2>
		{
			(*acc_g)[i] = lsm6ds3_from_fs16g_to_mg(acc_raw[i]) / 1000;
 8010d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d26:	005b      	lsls	r3, r3, #1
 8010d28:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010d2c:	4413      	add	r3, r2
 8010d2e:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8010d32:	4618      	mov	r0, r3
 8010d34:	f000 f860 	bl	8010df8 <lsm6ds3_from_fs16g_to_mg>
 8010d38:	eeb0 7a40 	vmov.f32	s14, s0
 8010d3c:	eddf 6a15 	vldr	s13, [pc, #84]	; 8010d94 <lsmread+0xd4>
 8010d40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010d44:	687a      	ldr	r2, [r7, #4]
 8010d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d48:	009b      	lsls	r3, r3, #2
 8010d4a:	4413      	add	r3, r2
 8010d4c:	edc3 7a00 	vstr	s15, [r3]
			(*gyro_dps)[i] = lsm6ds3_from_fs2000dps_to_mdps(gyro_raw[i]) / 1000;
 8010d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d52:	005b      	lsls	r3, r3, #1
 8010d54:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010d58:	4413      	add	r3, r2
 8010d5a:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8010d5e:	4618      	mov	r0, r3
 8010d60:	f000 f86a 	bl	8010e38 <lsm6ds3_from_fs2000dps_to_mdps>
 8010d64:	eeb0 7a40 	vmov.f32	s14, s0
 8010d68:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8010d94 <lsmread+0xd4>
 8010d6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010d70:	683a      	ldr	r2, [r7, #0]
 8010d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d74:	009b      	lsls	r3, r3, #2
 8010d76:	4413      	add	r3, r2
 8010d78:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < 3; i++)
 8010d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d7e:	3301      	adds	r3, #1
 8010d80:	627b      	str	r3, [r7, #36]	; 0x24
 8010d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d84:	2b02      	cmp	r3, #2
 8010d86:	ddcd      	ble.n	8010d24 <lsmread+0x64>
		}
}
 8010d88:	bf00      	nop
 8010d8a:	bf00      	nop
 8010d8c:	3728      	adds	r7, #40	; 0x28
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	bd80      	pop	{r7, pc}
 8010d92:	bf00      	nop
 8010d94:	447a0000 	.word	0x447a0000

08010d98 <lsm6ds3_read_reg>:
  *
  */
int32_t lsm6ds3_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8010d98:	b590      	push	{r4, r7, lr}
 8010d9a:	b087      	sub	sp, #28
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	60f8      	str	r0, [r7, #12]
 8010da0:	607a      	str	r2, [r7, #4]
 8010da2:	461a      	mov	r2, r3
 8010da4:	460b      	mov	r3, r1
 8010da6:	72fb      	strb	r3, [r7, #11]
 8010da8:	4613      	mov	r3, r2
 8010daa:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	685c      	ldr	r4, [r3, #4]
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	6898      	ldr	r0, [r3, #8]
 8010db4:	893b      	ldrh	r3, [r7, #8]
 8010db6:	7af9      	ldrb	r1, [r7, #11]
 8010db8:	687a      	ldr	r2, [r7, #4]
 8010dba:	47a0      	blx	r4
 8010dbc:	6178      	str	r0, [r7, #20]

  return ret;
 8010dbe:	697b      	ldr	r3, [r7, #20]
}
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	371c      	adds	r7, #28
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	bd90      	pop	{r4, r7, pc}

08010dc8 <lsm6ds3_write_reg>:
  *
  */
int32_t lsm6ds3_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8010dc8:	b590      	push	{r4, r7, lr}
 8010dca:	b087      	sub	sp, #28
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	60f8      	str	r0, [r7, #12]
 8010dd0:	607a      	str	r2, [r7, #4]
 8010dd2:	461a      	mov	r2, r3
 8010dd4:	460b      	mov	r3, r1
 8010dd6:	72fb      	strb	r3, [r7, #11]
 8010dd8:	4613      	mov	r3, r2
 8010dda:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	681c      	ldr	r4, [r3, #0]
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	6898      	ldr	r0, [r3, #8]
 8010de4:	893b      	ldrh	r3, [r7, #8]
 8010de6:	7af9      	ldrb	r1, [r7, #11]
 8010de8:	687a      	ldr	r2, [r7, #4]
 8010dea:	47a0      	blx	r4
 8010dec:	6178      	str	r0, [r7, #20]

  return ret;
 8010dee:	697b      	ldr	r3, [r7, #20]
}
 8010df0:	4618      	mov	r0, r3
 8010df2:	371c      	adds	r7, #28
 8010df4:	46bd      	mov	sp, r7
 8010df6:	bd90      	pop	{r4, r7, pc}

08010df8 <lsm6ds3_from_fs16g_to_mg>:
{
  return ((float_t)lsb * 244.0f / 1000.0f);
}

float_t lsm6ds3_from_fs16g_to_mg(int16_t lsb)
{
 8010df8:	b480      	push	{r7}
 8010dfa:	b083      	sub	sp, #12
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	4603      	mov	r3, r0
 8010e00:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 488.0f / 1000.0f);
 8010e02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010e06:	ee07 3a90 	vmov	s15, r3
 8010e0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010e0e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8010e30 <lsm6ds3_from_fs16g_to_mg+0x38>
 8010e12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010e16:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8010e34 <lsm6ds3_from_fs16g_to_mg+0x3c>
 8010e1a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8010e1e:	eef0 7a66 	vmov.f32	s15, s13
}
 8010e22:	eeb0 0a67 	vmov.f32	s0, s15
 8010e26:	370c      	adds	r7, #12
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2e:	4770      	bx	lr
 8010e30:	43f40000 	.word	0x43f40000
 8010e34:	447a0000 	.word	0x447a0000

08010e38 <lsm6ds3_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6ds3_from_fs2000dps_to_mdps(int16_t lsb)
{
 8010e38:	b480      	push	{r7}
 8010e3a:	b083      	sub	sp, #12
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	4603      	mov	r3, r0
 8010e40:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8010e42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010e46:	ee07 3a90 	vmov	s15, r3
 8010e4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010e4e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8010e64 <lsm6ds3_from_fs2000dps_to_mdps+0x2c>
 8010e52:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8010e56:	eeb0 0a67 	vmov.f32	s0, s15
 8010e5a:	370c      	adds	r7, #12
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e62:	4770      	bx	lr
 8010e64:	428c0000 	.word	0x428c0000

08010e68 <lsm6ds3_from_lsb_to_celsius>:

float_t lsm6ds3_from_lsb_to_celsius(int16_t lsb)
{
 8010e68:	b480      	push	{r7}
 8010e6a:	b083      	sub	sp, #12
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	4603      	mov	r3, r0
 8010e70:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 16.0f + 25.0f);
 8010e72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010e76:	ee07 3a90 	vmov	s15, r3
 8010e7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010e7e:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8010e82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010e86:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8010e8a:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8010e8e:	eeb0 0a67 	vmov.f32	s0, s15
 8010e92:	370c      	adds	r7, #12
 8010e94:	46bd      	mov	sp, r7
 8010e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9a:	4770      	bx	lr

08010e9c <lsm6ds3_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6ds3_xl_fs_t val)
{
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b084      	sub	sp, #16
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
 8010ea4:	460b      	mov	r3, r1
 8010ea6:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8010ea8:	f107 0208 	add.w	r2, r7, #8
 8010eac:	2301      	movs	r3, #1
 8010eae:	2110      	movs	r1, #16
 8010eb0:	6878      	ldr	r0, [r7, #4]
 8010eb2:	f7ff ff71 	bl	8010d98 <lsm6ds3_read_reg>
 8010eb6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d10f      	bne.n	8010ede <lsm6ds3_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8010ebe:	78fb      	ldrb	r3, [r7, #3]
 8010ec0:	f003 0303 	and.w	r3, r3, #3
 8010ec4:	b2da      	uxtb	r2, r3
 8010ec6:	7a3b      	ldrb	r3, [r7, #8]
 8010ec8:	f362 0383 	bfi	r3, r2, #2, #2
 8010ecc:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8010ece:	f107 0208 	add.w	r2, r7, #8
 8010ed2:	2301      	movs	r3, #1
 8010ed4:	2110      	movs	r1, #16
 8010ed6:	6878      	ldr	r0, [r7, #4]
 8010ed8:	f7ff ff76 	bl	8010dc8 <lsm6ds3_write_reg>
 8010edc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8010ede:	68fb      	ldr	r3, [r7, #12]
}
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	3710      	adds	r7, #16
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	bd80      	pop	{r7, pc}

08010ee8 <lsm6ds3_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6ds3_odr_xl_t val)
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b084      	sub	sp, #16
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
 8010ef0:	460b      	mov	r3, r1
 8010ef2:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8010ef4:	f107 0208 	add.w	r2, r7, #8
 8010ef8:	2301      	movs	r3, #1
 8010efa:	2110      	movs	r1, #16
 8010efc:	6878      	ldr	r0, [r7, #4]
 8010efe:	f7ff ff4b 	bl	8010d98 <lsm6ds3_read_reg>
 8010f02:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d10f      	bne.n	8010f2a <lsm6ds3_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t)val;
 8010f0a:	78fb      	ldrb	r3, [r7, #3]
 8010f0c:	f003 030f 	and.w	r3, r3, #15
 8010f10:	b2da      	uxtb	r2, r3
 8010f12:	7a3b      	ldrb	r3, [r7, #8]
 8010f14:	f362 1307 	bfi	r3, r2, #4, #4
 8010f18:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8010f1a:	f107 0208 	add.w	r2, r7, #8
 8010f1e:	2301      	movs	r3, #1
 8010f20:	2110      	movs	r1, #16
 8010f22:	6878      	ldr	r0, [r7, #4]
 8010f24:	f7ff ff50 	bl	8010dc8 <lsm6ds3_write_reg>
 8010f28:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8010f2a:	68fb      	ldr	r3, [r7, #12]
}
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	3710      	adds	r7, #16
 8010f30:	46bd      	mov	sp, r7
 8010f32:	bd80      	pop	{r7, pc}

08010f34 <lsm6ds3_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6ds3_fs_g_t val)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b084      	sub	sp, #16
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
 8010f3c:	460b      	mov	r3, r1
 8010f3e:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8010f40:	f107 0208 	add.w	r2, r7, #8
 8010f44:	2301      	movs	r3, #1
 8010f46:	2111      	movs	r1, #17
 8010f48:	6878      	ldr	r0, [r7, #4]
 8010f4a:	f7ff ff25 	bl	8010d98 <lsm6ds3_read_reg>
 8010f4e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d10f      	bne.n	8010f76 <lsm6ds3_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8010f56:	78fb      	ldrb	r3, [r7, #3]
 8010f58:	f003 0307 	and.w	r3, r3, #7
 8010f5c:	b2da      	uxtb	r2, r3
 8010f5e:	7a3b      	ldrb	r3, [r7, #8]
 8010f60:	f362 0343 	bfi	r3, r2, #1, #3
 8010f64:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8010f66:	f107 0208 	add.w	r2, r7, #8
 8010f6a:	2301      	movs	r3, #1
 8010f6c:	2111      	movs	r1, #17
 8010f6e:	6878      	ldr	r0, [r7, #4]
 8010f70:	f7ff ff2a 	bl	8010dc8 <lsm6ds3_write_reg>
 8010f74:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8010f76:	68fb      	ldr	r3, [r7, #12]
}
 8010f78:	4618      	mov	r0, r3
 8010f7a:	3710      	adds	r7, #16
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	bd80      	pop	{r7, pc}

08010f80 <lsm6ds3_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6ds3_odr_g_t val)
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b084      	sub	sp, #16
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
 8010f88:	460b      	mov	r3, r1
 8010f8a:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8010f8c:	f107 0208 	add.w	r2, r7, #8
 8010f90:	2301      	movs	r3, #1
 8010f92:	2111      	movs	r1, #17
 8010f94:	6878      	ldr	r0, [r7, #4]
 8010f96:	f7ff feff 	bl	8010d98 <lsm6ds3_read_reg>
 8010f9a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d10f      	bne.n	8010fc2 <lsm6ds3_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t)val;
 8010fa2:	78fb      	ldrb	r3, [r7, #3]
 8010fa4:	f003 030f 	and.w	r3, r3, #15
 8010fa8:	b2da      	uxtb	r2, r3
 8010faa:	7a3b      	ldrb	r3, [r7, #8]
 8010fac:	f362 1307 	bfi	r3, r2, #4, #4
 8010fb0:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8010fb2:	f107 0208 	add.w	r2, r7, #8
 8010fb6:	2301      	movs	r3, #1
 8010fb8:	2111      	movs	r1, #17
 8010fba:	6878      	ldr	r0, [r7, #4]
 8010fbc:	f7ff ff04 	bl	8010dc8 <lsm6ds3_write_reg>
 8010fc0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8010fc2:	68fb      	ldr	r3, [r7, #12]
}
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	3710      	adds	r7, #16
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	bd80      	pop	{r7, pc}

08010fcc <lsm6ds3_temperature_raw_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b084      	sub	sp, #16
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
 8010fd4:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUT_TEMP_L, buff, 2);
 8010fd6:	f107 0208 	add.w	r2, r7, #8
 8010fda:	2302      	movs	r3, #2
 8010fdc:	2120      	movs	r1, #32
 8010fde:	6878      	ldr	r0, [r7, #4]
 8010fe0:	f7ff feda 	bl	8010d98 <lsm6ds3_read_reg>
 8010fe4:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8010fe6:	7a7b      	ldrb	r3, [r7, #9]
 8010fe8:	b21a      	sxth	r2, r3
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8010fee:	683b      	ldr	r3, [r7, #0]
 8010ff0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010ff4:	b29b      	uxth	r3, r3
 8010ff6:	021b      	lsls	r3, r3, #8
 8010ff8:	b29a      	uxth	r2, r3
 8010ffa:	7a3b      	ldrb	r3, [r7, #8]
 8010ffc:	b29b      	uxth	r3, r3
 8010ffe:	4413      	add	r3, r2
 8011000:	b29b      	uxth	r3, r3
 8011002:	b21a      	sxth	r2, r3
 8011004:	683b      	ldr	r3, [r7, #0]
 8011006:	801a      	strh	r2, [r3, #0]

  return ret;
 8011008:	68fb      	ldr	r3, [r7, #12]
}
 801100a:	4618      	mov	r0, r3
 801100c:	3710      	adds	r7, #16
 801100e:	46bd      	mov	sp, r7
 8011010:	bd80      	pop	{r7, pc}

08011012 <lsm6ds3_angular_rate_raw_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8011012:	b580      	push	{r7, lr}
 8011014:	b086      	sub	sp, #24
 8011016:	af00      	add	r7, sp, #0
 8011018:	6078      	str	r0, [r7, #4]
 801101a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUTX_L_G, buff, 6);
 801101c:	f107 020c 	add.w	r2, r7, #12
 8011020:	2306      	movs	r3, #6
 8011022:	2122      	movs	r1, #34	; 0x22
 8011024:	6878      	ldr	r0, [r7, #4]
 8011026:	f7ff feb7 	bl	8010d98 <lsm6ds3_read_reg>
 801102a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 801102c:	7b7b      	ldrb	r3, [r7, #13]
 801102e:	b21a      	sxth	r2, r3
 8011030:	683b      	ldr	r3, [r7, #0]
 8011032:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8011034:	683b      	ldr	r3, [r7, #0]
 8011036:	f9b3 3000 	ldrsh.w	r3, [r3]
 801103a:	b29b      	uxth	r3, r3
 801103c:	021b      	lsls	r3, r3, #8
 801103e:	b29a      	uxth	r2, r3
 8011040:	7b3b      	ldrb	r3, [r7, #12]
 8011042:	b29b      	uxth	r3, r3
 8011044:	4413      	add	r3, r2
 8011046:	b29b      	uxth	r3, r3
 8011048:	b21a      	sxth	r2, r3
 801104a:	683b      	ldr	r3, [r7, #0]
 801104c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 801104e:	7bfa      	ldrb	r2, [r7, #15]
 8011050:	683b      	ldr	r3, [r7, #0]
 8011052:	3302      	adds	r3, #2
 8011054:	b212      	sxth	r2, r2
 8011056:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8011058:	683b      	ldr	r3, [r7, #0]
 801105a:	3302      	adds	r3, #2
 801105c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011060:	b29b      	uxth	r3, r3
 8011062:	021b      	lsls	r3, r3, #8
 8011064:	b29a      	uxth	r2, r3
 8011066:	7bbb      	ldrb	r3, [r7, #14]
 8011068:	b29b      	uxth	r3, r3
 801106a:	4413      	add	r3, r2
 801106c:	b29a      	uxth	r2, r3
 801106e:	683b      	ldr	r3, [r7, #0]
 8011070:	3302      	adds	r3, #2
 8011072:	b212      	sxth	r2, r2
 8011074:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8011076:	7c7a      	ldrb	r2, [r7, #17]
 8011078:	683b      	ldr	r3, [r7, #0]
 801107a:	3304      	adds	r3, #4
 801107c:	b212      	sxth	r2, r2
 801107e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8011080:	683b      	ldr	r3, [r7, #0]
 8011082:	3304      	adds	r3, #4
 8011084:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011088:	b29b      	uxth	r3, r3
 801108a:	021b      	lsls	r3, r3, #8
 801108c:	b29a      	uxth	r2, r3
 801108e:	7c3b      	ldrb	r3, [r7, #16]
 8011090:	b29b      	uxth	r3, r3
 8011092:	4413      	add	r3, r2
 8011094:	b29a      	uxth	r2, r3
 8011096:	683b      	ldr	r3, [r7, #0]
 8011098:	3304      	adds	r3, #4
 801109a:	b212      	sxth	r2, r2
 801109c:	801a      	strh	r2, [r3, #0]

  return ret;
 801109e:	697b      	ldr	r3, [r7, #20]
}
 80110a0:	4618      	mov	r0, r3
 80110a2:	3718      	adds	r7, #24
 80110a4:	46bd      	mov	sp, r7
 80110a6:	bd80      	pop	{r7, pc}

080110a8 <lsm6ds3_acceleration_raw_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b086      	sub	sp, #24
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
 80110b0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUTX_L_XL, buff, 6);
 80110b2:	f107 020c 	add.w	r2, r7, #12
 80110b6:	2306      	movs	r3, #6
 80110b8:	2128      	movs	r1, #40	; 0x28
 80110ba:	6878      	ldr	r0, [r7, #4]
 80110bc:	f7ff fe6c 	bl	8010d98 <lsm6ds3_read_reg>
 80110c0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80110c2:	7b7b      	ldrb	r3, [r7, #13]
 80110c4:	b21a      	sxth	r2, r3
 80110c6:	683b      	ldr	r3, [r7, #0]
 80110c8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80110ca:	683b      	ldr	r3, [r7, #0]
 80110cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80110d0:	b29b      	uxth	r3, r3
 80110d2:	021b      	lsls	r3, r3, #8
 80110d4:	b29a      	uxth	r2, r3
 80110d6:	7b3b      	ldrb	r3, [r7, #12]
 80110d8:	b29b      	uxth	r3, r3
 80110da:	4413      	add	r3, r2
 80110dc:	b29b      	uxth	r3, r3
 80110de:	b21a      	sxth	r2, r3
 80110e0:	683b      	ldr	r3, [r7, #0]
 80110e2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80110e4:	7bfa      	ldrb	r2, [r7, #15]
 80110e6:	683b      	ldr	r3, [r7, #0]
 80110e8:	3302      	adds	r3, #2
 80110ea:	b212      	sxth	r2, r2
 80110ec:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80110ee:	683b      	ldr	r3, [r7, #0]
 80110f0:	3302      	adds	r3, #2
 80110f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80110f6:	b29b      	uxth	r3, r3
 80110f8:	021b      	lsls	r3, r3, #8
 80110fa:	b29a      	uxth	r2, r3
 80110fc:	7bbb      	ldrb	r3, [r7, #14]
 80110fe:	b29b      	uxth	r3, r3
 8011100:	4413      	add	r3, r2
 8011102:	b29a      	uxth	r2, r3
 8011104:	683b      	ldr	r3, [r7, #0]
 8011106:	3302      	adds	r3, #2
 8011108:	b212      	sxth	r2, r2
 801110a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 801110c:	7c7a      	ldrb	r2, [r7, #17]
 801110e:	683b      	ldr	r3, [r7, #0]
 8011110:	3304      	adds	r3, #4
 8011112:	b212      	sxth	r2, r2
 8011114:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8011116:	683b      	ldr	r3, [r7, #0]
 8011118:	3304      	adds	r3, #4
 801111a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801111e:	b29b      	uxth	r3, r3
 8011120:	021b      	lsls	r3, r3, #8
 8011122:	b29a      	uxth	r2, r3
 8011124:	7c3b      	ldrb	r3, [r7, #16]
 8011126:	b29b      	uxth	r3, r3
 8011128:	4413      	add	r3, r2
 801112a:	b29a      	uxth	r2, r3
 801112c:	683b      	ldr	r3, [r7, #0]
 801112e:	3304      	adds	r3, #4
 8011130:	b212      	sxth	r2, r2
 8011132:	801a      	strh	r2, [r3, #0]

  return ret;
 8011134:	697b      	ldr	r3, [r7, #20]
}
 8011136:	4618      	mov	r0, r3
 8011138:	3718      	adds	r7, #24
 801113a:	46bd      	mov	sp, r7
 801113c:	bd80      	pop	{r7, pc}

0801113e <lsm6ds3_device_id_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 801113e:	b580      	push	{r7, lr}
 8011140:	b084      	sub	sp, #16
 8011142:	af00      	add	r7, sp, #0
 8011144:	6078      	str	r0, [r7, #4]
 8011146:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_WHO_AM_I, buff, 1);
 8011148:	2301      	movs	r3, #1
 801114a:	683a      	ldr	r2, [r7, #0]
 801114c:	210f      	movs	r1, #15
 801114e:	6878      	ldr	r0, [r7, #4]
 8011150:	f7ff fe22 	bl	8010d98 <lsm6ds3_read_reg>
 8011154:	60f8      	str	r0, [r7, #12]

  return ret;
 8011156:	68fb      	ldr	r3, [r7, #12]
}
 8011158:	4618      	mov	r0, r3
 801115a:	3710      	adds	r7, #16
 801115c:	46bd      	mov	sp, r7
 801115e:	bd80      	pop	{r7, pc}

08011160 <lsm6ds3_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8011160:	b580      	push	{r7, lr}
 8011162:	b084      	sub	sp, #16
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
 8011168:	460b      	mov	r3, r1
 801116a:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 801116c:	f107 0208 	add.w	r2, r7, #8
 8011170:	2301      	movs	r3, #1
 8011172:	2112      	movs	r1, #18
 8011174:	6878      	ldr	r0, [r7, #4]
 8011176:	f7ff fe0f 	bl	8010d98 <lsm6ds3_read_reg>
 801117a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d10f      	bne.n	80111a2 <lsm6ds3_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8011182:	78fb      	ldrb	r3, [r7, #3]
 8011184:	f003 0301 	and.w	r3, r3, #1
 8011188:	b2da      	uxtb	r2, r3
 801118a:	7a3b      	ldrb	r3, [r7, #8]
 801118c:	f362 0300 	bfi	r3, r2, #0, #1
 8011190:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8011192:	f107 0208 	add.w	r2, r7, #8
 8011196:	2301      	movs	r3, #1
 8011198:	2112      	movs	r1, #18
 801119a:	6878      	ldr	r0, [r7, #4]
 801119c:	f7ff fe14 	bl	8010dc8 <lsm6ds3_write_reg>
 80111a0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80111a2:	68fb      	ldr	r3, [r7, #12]
}
 80111a4:	4618      	mov	r0, r3
 80111a6:	3710      	adds	r7, #16
 80111a8:	46bd      	mov	sp, r7
 80111aa:	bd80      	pop	{r7, pc}

080111ac <_nrf24_CS>:
extern SPI_HandleTypeDef hspi2;



static void _nrf24_CS(void * intf_ptr, bool mode)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b084      	sub	sp, #16
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
 80111b4:	460b      	mov	r3, r1
 80111b6:	70fb      	strb	r3, [r7, #3]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	60fb      	str	r3, [r7, #12]
	nrf24_spi_pins_t *api_config_low = (nrf24_spi_pins_t *)api_config->intf_ptr;
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	68db      	ldr	r3, [r3, #12]
 80111c0:	60bb      	str	r3, [r7, #8]
	if (mode)
 80111c2:	78fb      	ldrb	r3, [r7, #3]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d008      	beq.n	80111da <_nrf24_CS+0x2e>
	{
		// Опускаем chip select для того, что бы начать общение с конкретным устройством.
		HAL_GPIO_WritePin(api_config_low->cs_port, api_config_low->cs_pin,  GPIO_PIN_RESET);
 80111c8:	68bb      	ldr	r3, [r7, #8]
 80111ca:	6898      	ldr	r0, [r3, #8]
 80111cc:	68bb      	ldr	r3, [r7, #8]
 80111ce:	899b      	ldrh	r3, [r3, #12]
 80111d0:	2200      	movs	r2, #0
 80111d2:	4619      	mov	r1, r3
 80111d4:	f7f6 f964 	bl	80074a0 <HAL_GPIO_WritePin>
	{
		// Поднимаем chip select для того, что бы закончить общение с конкретным устройством.
		HAL_GPIO_WritePin(api_config_low->cs_port, api_config_low->cs_pin,  GPIO_PIN_SET);
		//HAL_Delay(100);
	}
}
 80111d8:	e007      	b.n	80111ea <_nrf24_CS+0x3e>
		HAL_GPIO_WritePin(api_config_low->cs_port, api_config_low->cs_pin,  GPIO_PIN_SET);
 80111da:	68bb      	ldr	r3, [r7, #8]
 80111dc:	6898      	ldr	r0, [r3, #8]
 80111de:	68bb      	ldr	r3, [r7, #8]
 80111e0:	899b      	ldrh	r3, [r3, #12]
 80111e2:	2201      	movs	r2, #1
 80111e4:	4619      	mov	r1, r3
 80111e6:	f7f6 f95b 	bl	80074a0 <HAL_GPIO_WritePin>
}
 80111ea:	bf00      	nop
 80111ec:	3710      	adds	r7, #16
 80111ee:	46bd      	mov	sp, r7
 80111f0:	bd80      	pop	{r7, pc}

080111f2 <nrf24_read_register>:
		shift_reg_oe(api_config_low->this, false);
	}
}

void nrf24_read_register(void * intf_ptr, uint8_t reg_addr, uint8_t * reg_data, size_t data_size)
{
 80111f2:	b580      	push	{r7, lr}
 80111f4:	b086      	sub	sp, #24
 80111f6:	af00      	add	r7, sp, #0
 80111f8:	60f8      	str	r0, [r7, #12]
 80111fa:	607a      	str	r2, [r7, #4]
 80111fc:	603b      	str	r3, [r7, #0]
 80111fe:	460b      	mov	r3, r1
 8011200:	72fb      	strb	r3, [r7, #11]

	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	617b      	str	r3, [r7, #20]

	api_config->nrf24_CS(intf_ptr, true);
 8011206:	697b      	ldr	r3, [r7, #20]
 8011208:	685b      	ldr	r3, [r3, #4]
 801120a:	2101      	movs	r1, #1
 801120c:	68f8      	ldr	r0, [r7, #12]
 801120e:	4798      	blx	r3

	// Добавляем в 5 битов адреса еще 3 бита для чтения из этого регистра
	reg_addr = reg_addr & ~((1 << 5) | (1 << 6) | (1 << 7));
 8011210:	7afb      	ldrb	r3, [r7, #11]
 8011212:	f003 031f 	and.w	r3, r3, #31
 8011216:	b2db      	uxtb	r3, r3
 8011218:	72fb      	strb	r3, [r7, #11]

	// Передаем адресс регистра, который читаем и читаем данные
	HAL_SPI_Transmit(api_config->hspi, &reg_addr, 1, HAL_MAX_DELAY);
 801121a:	697b      	ldr	r3, [r7, #20]
 801121c:	6818      	ldr	r0, [r3, #0]
 801121e:	f107 010b 	add.w	r1, r7, #11
 8011222:	f04f 33ff 	mov.w	r3, #4294967295
 8011226:	2201      	movs	r2, #1
 8011228:	f7f8 fd99 	bl	8009d5e <HAL_SPI_Transmit>
	HAL_SPI_Receive(api_config->hspi, reg_data, data_size, HAL_MAX_DELAY);
 801122c:	697b      	ldr	r3, [r7, #20]
 801122e:	6818      	ldr	r0, [r3, #0]
 8011230:	683b      	ldr	r3, [r7, #0]
 8011232:	b29a      	uxth	r2, r3
 8011234:	f04f 33ff 	mov.w	r3, #4294967295
 8011238:	6879      	ldr	r1, [r7, #4]
 801123a:	f7f8 fecc 	bl	8009fd6 <HAL_SPI_Receive>

	api_config->nrf24_CS(intf_ptr, false);
 801123e:	697b      	ldr	r3, [r7, #20]
 8011240:	685b      	ldr	r3, [r3, #4]
 8011242:	2100      	movs	r1, #0
 8011244:	68f8      	ldr	r0, [r7, #12]
 8011246:	4798      	blx	r3
}
 8011248:	bf00      	nop
 801124a:	3718      	adds	r7, #24
 801124c:	46bd      	mov	sp, r7
 801124e:	bd80      	pop	{r7, pc}

08011250 <nrf24_write_register>:

void nrf24_write_register(void * intf_ptr, uint8_t reg_addr, const uint8_t * reg_data, size_t data_size)
{
 8011250:	b580      	push	{r7, lr}
 8011252:	b086      	sub	sp, #24
 8011254:	af00      	add	r7, sp, #0
 8011256:	60f8      	str	r0, [r7, #12]
 8011258:	607a      	str	r2, [r7, #4]
 801125a:	603b      	str	r3, [r7, #0]
 801125c:	460b      	mov	r3, r1
 801125e:	72fb      	strb	r3, [r7, #11]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	617b      	str	r3, [r7, #20]
	api_config->nrf24_CS(intf_ptr, true);
 8011264:	697b      	ldr	r3, [r7, #20]
 8011266:	685b      	ldr	r3, [r3, #4]
 8011268:	2101      	movs	r1, #1
 801126a:	68f8      	ldr	r0, [r7, #12]
 801126c:	4798      	blx	r3

	// Добавляем в 5 битов адреса еще 3 бита для записи в регистр
	reg_addr = (reg_addr & ~((1 << 6) | (1 << 7))) | (1 << 5);
 801126e:	7afb      	ldrb	r3, [r7, #11]
 8011270:	b25b      	sxtb	r3, r3
 8011272:	f003 031f 	and.w	r3, r3, #31
 8011276:	b25b      	sxtb	r3, r3
 8011278:	f043 0320 	orr.w	r3, r3, #32
 801127c:	b25b      	sxtb	r3, r3
 801127e:	b2db      	uxtb	r3, r3
 8011280:	72fb      	strb	r3, [r7, #11]

	// Передаем адресс регистра, в который пишем и пишем в регистр
	HAL_SPI_Transmit(api_config->hspi, &reg_addr, 1, HAL_MAX_DELAY);
 8011282:	697b      	ldr	r3, [r7, #20]
 8011284:	6818      	ldr	r0, [r3, #0]
 8011286:	f107 010b 	add.w	r1, r7, #11
 801128a:	f04f 33ff 	mov.w	r3, #4294967295
 801128e:	2201      	movs	r2, #1
 8011290:	f7f8 fd65 	bl	8009d5e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(api_config->hspi, (uint8_t*)reg_data, data_size, HAL_MAX_DELAY);
 8011294:	697b      	ldr	r3, [r7, #20]
 8011296:	6818      	ldr	r0, [r3, #0]
 8011298:	683b      	ldr	r3, [r7, #0]
 801129a:	b29a      	uxth	r2, r3
 801129c:	f04f 33ff 	mov.w	r3, #4294967295
 80112a0:	6879      	ldr	r1, [r7, #4]
 80112a2:	f7f8 fd5c 	bl	8009d5e <HAL_SPI_Transmit>

	api_config->nrf24_CS(intf_ptr, false);
 80112a6:	697b      	ldr	r3, [r7, #20]
 80112a8:	685b      	ldr	r3, [r3, #4]
 80112aa:	2100      	movs	r1, #0
 80112ac:	68f8      	ldr	r0, [r7, #12]
 80112ae:	4798      	blx	r3
}
 80112b0:	bf00      	nop
 80112b2:	3718      	adds	r7, #24
 80112b4:	46bd      	mov	sp, r7
 80112b6:	bd80      	pop	{r7, pc}

080112b8 <nrf24_read_rx_payload>:

void nrf24_read_rx_payload(void * intf_ptr, uint8_t * payload_buffer, size_t payload_buffer_size)
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b086      	sub	sp, #24
 80112bc:	af00      	add	r7, sp, #0
 80112be:	60f8      	str	r0, [r7, #12]
 80112c0:	60b9      	str	r1, [r7, #8]
 80112c2:	607a      	str	r2, [r7, #4]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	617b      	str	r3, [r7, #20]
	uint8_t command = NRF24_R_RX_PAYLOAD;
 80112c8:	2361      	movs	r3, #97	; 0x61
 80112ca:	74fb      	strb	r3, [r7, #19]
	uint8_t payload_size = 0;
 80112cc:	2300      	movs	r3, #0
 80112ce:	74bb      	strb	r3, [r7, #18]
    // Считываем размер данных
	nrf24_get_rx_payload_size(intf_ptr, &payload_size);
 80112d0:	f107 0312 	add.w	r3, r7, #18
 80112d4:	4619      	mov	r1, r3
 80112d6:	68f8      	ldr	r0, [r7, #12]
 80112d8:	f000 f89d 	bl	8011416 <nrf24_get_rx_payload_size>
	// Если размер данных от 1 до 32, то читаем данные
	if (payload_size > 0 || payload_size < 32)
 80112dc:	7cbb      	ldrb	r3, [r7, #18]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d102      	bne.n	80112e8 <nrf24_read_rx_payload+0x30>
 80112e2:	7cbb      	ldrb	r3, [r7, #18]
 80112e4:	2b1f      	cmp	r3, #31
 80112e6:	d823      	bhi.n	8011330 <nrf24_read_rx_payload+0x78>
	{
		// Если места на запись меньше, чем у нас есть данных, читем сколько, сколько есть места
		if (payload_size > payload_buffer_size)
 80112e8:	7cbb      	ldrb	r3, [r7, #18]
 80112ea:	461a      	mov	r2, r3
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	4293      	cmp	r3, r2
 80112f0:	d202      	bcs.n	80112f8 <nrf24_read_rx_payload+0x40>
		{
			payload_size = payload_buffer_size;
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	b2db      	uxtb	r3, r3
 80112f6:	74bb      	strb	r3, [r7, #18]
		}
		api_config->nrf24_CS(intf_ptr, true);
 80112f8:	697b      	ldr	r3, [r7, #20]
 80112fa:	685b      	ldr	r3, [r3, #4]
 80112fc:	2101      	movs	r1, #1
 80112fe:	68f8      	ldr	r0, [r7, #12]
 8011300:	4798      	blx	r3
		// Читаем данные
		HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
 8011302:	697b      	ldr	r3, [r7, #20]
 8011304:	6818      	ldr	r0, [r3, #0]
 8011306:	f107 0113 	add.w	r1, r7, #19
 801130a:	f04f 33ff 	mov.w	r3, #4294967295
 801130e:	2201      	movs	r2, #1
 8011310:	f7f8 fd25 	bl	8009d5e <HAL_SPI_Transmit>
		HAL_SPI_Receive(api_config->hspi, payload_buffer, payload_size, HAL_MAX_DELAY);
 8011314:	697b      	ldr	r3, [r7, #20]
 8011316:	6818      	ldr	r0, [r3, #0]
 8011318:	7cbb      	ldrb	r3, [r7, #18]
 801131a:	b29a      	uxth	r2, r3
 801131c:	f04f 33ff 	mov.w	r3, #4294967295
 8011320:	68b9      	ldr	r1, [r7, #8]
 8011322:	f7f8 fe58 	bl	8009fd6 <HAL_SPI_Receive>
		api_config->nrf24_CS(intf_ptr, false);
 8011326:	697b      	ldr	r3, [r7, #20]
 8011328:	685b      	ldr	r3, [r3, #4]
 801132a:	2100      	movs	r1, #0
 801132c:	68f8      	ldr	r0, [r7, #12]
 801132e:	4798      	blx	r3
	}
}
 8011330:	bf00      	nop
 8011332:	3718      	adds	r7, #24
 8011334:	46bd      	mov	sp, r7
 8011336:	bd80      	pop	{r7, pc}

08011338 <nrf24_write_tx_payload>:

void nrf24_write_tx_payload(void * intf_ptr, const uint8_t * payload_buffer, size_t payload_size, bool use_ack)
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b086      	sub	sp, #24
 801133c:	af00      	add	r7, sp, #0
 801133e:	60f8      	str	r0, [r7, #12]
 8011340:	60b9      	str	r1, [r7, #8]
 8011342:	607a      	str	r2, [r7, #4]
 8011344:	70fb      	strb	r3, [r7, #3]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	617b      	str	r3, [r7, #20]
	uint8_t command;
	api_config->nrf24_CS(intf_ptr, true);
 801134a:	697b      	ldr	r3, [r7, #20]
 801134c:	685b      	ldr	r3, [r3, #4]
 801134e:	2101      	movs	r1, #1
 8011350:	68f8      	ldr	r0, [r7, #12]
 8011352:	4798      	blx	r3
	// Учитываем использование ack
	if (use_ack)
 8011354:	78fb      	ldrb	r3, [r7, #3]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d002      	beq.n	8011360 <nrf24_write_tx_payload+0x28>
	{
		command = NRF24_W_TX_PAYLOAD;
 801135a:	23a0      	movs	r3, #160	; 0xa0
 801135c:	74fb      	strb	r3, [r7, #19]
 801135e:	e001      	b.n	8011364 <nrf24_write_tx_payload+0x2c>
	}
	else
	{
		command = NRF24_W_TX_PAYLOAD_NO_ACK;
 8011360:	23b0      	movs	r3, #176	; 0xb0
 8011362:	74fb      	strb	r3, [r7, #19]
	}
	// Передаем данные
	HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
 8011364:	697b      	ldr	r3, [r7, #20]
 8011366:	6818      	ldr	r0, [r3, #0]
 8011368:	f107 0113 	add.w	r1, r7, #19
 801136c:	f04f 33ff 	mov.w	r3, #4294967295
 8011370:	2201      	movs	r2, #1
 8011372:	f7f8 fcf4 	bl	8009d5e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(api_config->hspi, (uint8_t*)payload_buffer, payload_size, HAL_MAX_DELAY);
 8011376:	697b      	ldr	r3, [r7, #20]
 8011378:	6818      	ldr	r0, [r3, #0]
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	b29a      	uxth	r2, r3
 801137e:	f04f 33ff 	mov.w	r3, #4294967295
 8011382:	68b9      	ldr	r1, [r7, #8]
 8011384:	f7f8 fceb 	bl	8009d5e <HAL_SPI_Transmit>

	api_config->nrf24_CS(intf_ptr, false);
 8011388:	697b      	ldr	r3, [r7, #20]
 801138a:	685b      	ldr	r3, [r3, #4]
 801138c:	2100      	movs	r1, #0
 801138e:	68f8      	ldr	r0, [r7, #12]
 8011390:	4798      	blx	r3
}
 8011392:	bf00      	nop
 8011394:	3718      	adds	r7, #24
 8011396:	46bd      	mov	sp, r7
 8011398:	bd80      	pop	{r7, pc}

0801139a <nrf24_flush_rx>:

void nrf24_flush_rx(void * intf_ptr)
{
 801139a:	b580      	push	{r7, lr}
 801139c:	b084      	sub	sp, #16
 801139e:	af00      	add	r7, sp, #0
 80113a0:	6078      	str	r0, [r7, #4]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	60fb      	str	r3, [r7, #12]
	uint8_t command = NRF24_FLUSH_RX;
 80113a6:	23e2      	movs	r3, #226	; 0xe2
 80113a8:	72fb      	strb	r3, [r7, #11]
	api_config->nrf24_CS(intf_ptr, true);
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	685b      	ldr	r3, [r3, #4]
 80113ae:	2101      	movs	r1, #1
 80113b0:	6878      	ldr	r0, [r7, #4]
 80113b2:	4798      	blx	r3
	HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	6818      	ldr	r0, [r3, #0]
 80113b8:	f107 010b 	add.w	r1, r7, #11
 80113bc:	f04f 33ff 	mov.w	r3, #4294967295
 80113c0:	2201      	movs	r2, #1
 80113c2:	f7f8 fccc 	bl	8009d5e <HAL_SPI_Transmit>
	api_config->nrf24_CS(intf_ptr, false);
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	685b      	ldr	r3, [r3, #4]
 80113ca:	2100      	movs	r1, #0
 80113cc:	6878      	ldr	r0, [r7, #4]
 80113ce:	4798      	blx	r3
}
 80113d0:	bf00      	nop
 80113d2:	3710      	adds	r7, #16
 80113d4:	46bd      	mov	sp, r7
 80113d6:	bd80      	pop	{r7, pc}

080113d8 <nrf24_flush_tx>:

void nrf24_flush_tx(void * intf_ptr)
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b084      	sub	sp, #16
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	60fb      	str	r3, [r7, #12]
	uint8_t command = NRF24_FLUSH_TX;
 80113e4:	23e1      	movs	r3, #225	; 0xe1
 80113e6:	72fb      	strb	r3, [r7, #11]
	api_config->nrf24_CS(intf_ptr, true);
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	685b      	ldr	r3, [r3, #4]
 80113ec:	2101      	movs	r1, #1
 80113ee:	6878      	ldr	r0, [r7, #4]
 80113f0:	4798      	blx	r3
	HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	6818      	ldr	r0, [r3, #0]
 80113f6:	f107 010b 	add.w	r1, r7, #11
 80113fa:	f04f 33ff 	mov.w	r3, #4294967295
 80113fe:	2201      	movs	r2, #1
 8011400:	f7f8 fcad 	bl	8009d5e <HAL_SPI_Transmit>
	api_config->nrf24_CS(intf_ptr, false);
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	685b      	ldr	r3, [r3, #4]
 8011408:	2100      	movs	r1, #0
 801140a:	6878      	ldr	r0, [r7, #4]
 801140c:	4798      	blx	r3
}
 801140e:	bf00      	nop
 8011410:	3710      	adds	r7, #16
 8011412:	46bd      	mov	sp, r7
 8011414:	bd80      	pop	{r7, pc}

08011416 <nrf24_get_rx_payload_size>:
	HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
	api_config->nrf24_CS(intf_ptr, false);
}

void nrf24_get_rx_payload_size(void * intf_ptr, uint8_t * payload_size)
{
 8011416:	b580      	push	{r7, lr}
 8011418:	b084      	sub	sp, #16
 801141a:	af00      	add	r7, sp, #0
 801141c:	6078      	str	r0, [r7, #4]
 801141e:	6039      	str	r1, [r7, #0]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	60fb      	str	r3, [r7, #12]
	uint8_t command = NRF24_R_RX_PL_WID;
 8011424:	2360      	movs	r3, #96	; 0x60
 8011426:	72fb      	strb	r3, [r7, #11]
	api_config->nrf24_CS(intf_ptr, true);
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	685b      	ldr	r3, [r3, #4]
 801142c:	2101      	movs	r1, #1
 801142e:	6878      	ldr	r0, [r7, #4]
 8011430:	4798      	blx	r3
	HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	6818      	ldr	r0, [r3, #0]
 8011436:	f107 010b 	add.w	r1, r7, #11
 801143a:	f04f 33ff 	mov.w	r3, #4294967295
 801143e:	2201      	movs	r2, #1
 8011440:	f7f8 fc8d 	bl	8009d5e <HAL_SPI_Transmit>
	HAL_SPI_Receive(api_config->hspi, payload_size, 1, HAL_MAX_DELAY);
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	6818      	ldr	r0, [r3, #0]
 8011448:	f04f 33ff 	mov.w	r3, #4294967295
 801144c:	2201      	movs	r2, #1
 801144e:	6839      	ldr	r1, [r7, #0]
 8011450:	f7f8 fdc1 	bl	8009fd6 <HAL_SPI_Receive>
	api_config->nrf24_CS(intf_ptr, false);
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	685b      	ldr	r3, [r3, #4]
 8011458:	2100      	movs	r1, #0
 801145a:	6878      	ldr	r0, [r7, #4]
 801145c:	4798      	blx	r3
	// Если размер данных больше 32, то отчищаем rx буфер и зануляем его
    if (*payload_size > 32)
 801145e:	683b      	ldr	r3, [r7, #0]
 8011460:	781b      	ldrb	r3, [r3, #0]
 8011462:	2b20      	cmp	r3, #32
 8011464:	d904      	bls.n	8011470 <nrf24_get_rx_payload_size+0x5a>
    {
    	nrf24_flush_rx(intf_ptr);
 8011466:	6878      	ldr	r0, [r7, #4]
 8011468:	f7ff ff97 	bl	801139a <nrf24_flush_rx>
    	payload_size = 0;
 801146c:	2300      	movs	r3, #0
 801146e:	603b      	str	r3, [r7, #0]
    }
}
 8011470:	bf00      	nop
 8011472:	3710      	adds	r7, #16
 8011474:	46bd      	mov	sp, r7
 8011476:	bd80      	pop	{r7, pc}

08011478 <nrf24_get_status>:

	api_config->nrf24_CS(intf_ptr, false);
}

void nrf24_get_status(void * intf_ptr, uint8_t * status)
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b086      	sub	sp, #24
 801147c:	af02      	add	r7, sp, #8
 801147e:	6078      	str	r0, [r7, #4]
 8011480:	6039      	str	r1, [r7, #0]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	60fb      	str	r3, [r7, #12]
	uint8_t command = NRF24_NOP;
 8011486:	23ff      	movs	r3, #255	; 0xff
 8011488:	72fb      	strb	r3, [r7, #11]
	api_config->nrf24_CS(intf_ptr, true);
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	685b      	ldr	r3, [r3, #4]
 801148e:	2101      	movs	r1, #1
 8011490:	6878      	ldr	r0, [r7, #4]
 8011492:	4798      	blx	r3
	HAL_SPI_TransmitReceive(api_config->hspi, &command, status, 1, HAL_MAX_DELAY);
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	6818      	ldr	r0, [r3, #0]
 8011498:	f107 010b 	add.w	r1, r7, #11
 801149c:	f04f 33ff 	mov.w	r3, #4294967295
 80114a0:	9300      	str	r3, [sp, #0]
 80114a2:	2301      	movs	r3, #1
 80114a4:	683a      	ldr	r2, [r7, #0]
 80114a6:	f7f8 fea7 	bl	800a1f8 <HAL_SPI_TransmitReceive>
	api_config->nrf24_CS(intf_ptr, false);
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	685b      	ldr	r3, [r3, #4]
 80114ae:	2100      	movs	r1, #0
 80114b0:	6878      	ldr	r0, [r7, #4]
 80114b2:	4798      	blx	r3
}
 80114b4:	bf00      	nop
 80114b6:	3710      	adds	r7, #16
 80114b8:	46bd      	mov	sp, r7
 80114ba:	bd80      	pop	{r7, pc}

080114bc <nrf24_ce_activate>:

void nrf24_ce_activate(void * intf_ptr, bool onoff)
{
 80114bc:	b580      	push	{r7, lr}
 80114be:	b084      	sub	sp, #16
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	6078      	str	r0, [r7, #4]
 80114c4:	460b      	mov	r3, r1
 80114c6:	70fb      	strb	r3, [r7, #3]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	60fb      	str	r3, [r7, #12]
	api_config->nrf24_CE(intf_ptr, onoff);
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	689b      	ldr	r3, [r3, #8]
 80114d0:	78fa      	ldrb	r2, [r7, #3]
 80114d2:	4611      	mov	r1, r2
 80114d4:	6878      	ldr	r0, [r7, #4]
 80114d6:	4798      	blx	r3
}
 80114d8:	bf00      	nop
 80114da:	3710      	adds	r7, #16
 80114dc:	46bd      	mov	sp, r7
 80114de:	bd80      	pop	{r7, pc}

080114e0 <_nrf24_CE>:

void _nrf24_CE(void * intf_ptr, bool onoff)
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b084      	sub	sp, #16
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
 80114e8:	460b      	mov	r3, r1
 80114ea:	70fb      	strb	r3, [r7, #3]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	60fb      	str	r3, [r7, #12]
	nrf24_spi_pins_t *api_config_low = (nrf24_spi_pins_t *)api_config->intf_ptr;
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	68db      	ldr	r3, [r3, #12]
 80114f4:	60bb      	str	r3, [r7, #8]
	if (onoff)
 80114f6:	78fb      	ldrb	r3, [r7, #3]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d008      	beq.n	801150e <_nrf24_CE+0x2e>
	{
		HAL_GPIO_WritePin(api_config_low->ce_port, api_config_low->ce_pin,  GPIO_PIN_SET);
 80114fc:	68bb      	ldr	r3, [r7, #8]
 80114fe:	6818      	ldr	r0, [r3, #0]
 8011500:	68bb      	ldr	r3, [r7, #8]
 8011502:	889b      	ldrh	r3, [r3, #4]
 8011504:	2201      	movs	r2, #1
 8011506:	4619      	mov	r1, r3
 8011508:	f7f5 ffca 	bl	80074a0 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(api_config_low->ce_port, api_config_low->ce_pin, GPIO_PIN_RESET);
	}
}
 801150c:	e007      	b.n	801151e <_nrf24_CE+0x3e>
		HAL_GPIO_WritePin(api_config_low->ce_port, api_config_low->ce_pin, GPIO_PIN_RESET);
 801150e:	68bb      	ldr	r3, [r7, #8]
 8011510:	6818      	ldr	r0, [r3, #0]
 8011512:	68bb      	ldr	r3, [r7, #8]
 8011514:	889b      	ldrh	r3, [r3, #4]
 8011516:	2200      	movs	r2, #0
 8011518:	4619      	mov	r1, r3
 801151a:	f7f5 ffc1 	bl	80074a0 <HAL_GPIO_WritePin>
}
 801151e:	bf00      	nop
 8011520:	3710      	adds	r7, #16
 8011522:	46bd      	mov	sp, r7
 8011524:	bd80      	pop	{r7, pc}
	...

08011528 <nrf24_spi_init>:
	shift_reg_write_bit_8(api_config_low->this, api_config_low->pos_CE, onoff);
	shift_reg_oe(api_config_low->this, false);
}

void nrf24_spi_init(nrf24_lower_api_config_t* nrf24, SPI_HandleTypeDef *hspi, nrf24_spi_pins_t* pins)
{
 8011528:	b480      	push	{r7}
 801152a:	b085      	sub	sp, #20
 801152c:	af00      	add	r7, sp, #0
 801152e:	60f8      	str	r0, [r7, #12]
 8011530:	60b9      	str	r1, [r7, #8]
 8011532:	607a      	str	r2, [r7, #4]
	nrf24->hspi = hspi;
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	68ba      	ldr	r2, [r7, #8]
 8011538:	601a      	str	r2, [r3, #0]
	nrf24->nrf24_CS = _nrf24_CS;
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	4a06      	ldr	r2, [pc, #24]	; (8011558 <nrf24_spi_init+0x30>)
 801153e:	605a      	str	r2, [r3, #4]
	nrf24->nrf24_CE = _nrf24_CE;
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	4a06      	ldr	r2, [pc, #24]	; (801155c <nrf24_spi_init+0x34>)
 8011544:	609a      	str	r2, [r3, #8]
	nrf24->intf_ptr = pins;
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	687a      	ldr	r2, [r7, #4]
 801154a:	60da      	str	r2, [r3, #12]
}
 801154c:	bf00      	nop
 801154e:	3714      	adds	r7, #20
 8011550:	46bd      	mov	sp, r7
 8011552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011556:	4770      	bx	lr
 8011558:	080111ad 	.word	0x080111ad
 801155c:	080114e1 	.word	0x080114e1

08011560 <nrf24_setup_rf>:
#include "../nrf24_lower_api.h"
#include "../nrf24_defs.h"


int nrf24_setup_rf(void * intf_ptr, const nrf24_rf_config_t * config)
{
 8011560:	b580      	push	{r7, lr}
 8011562:	b084      	sub	sp, #16
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
 8011568:	6039      	str	r1, [r7, #0]
	uint8_t rf_setup = 0;
 801156a:	2300      	movs	r3, #0
 801156c:	73fb      	strb	r3, [r7, #15]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_RF_SETUP, &rf_setup, 1);
 801156e:	f107 020f 	add.w	r2, r7, #15
 8011572:	2301      	movs	r3, #1
 8011574:	2106      	movs	r1, #6
 8011576:	6878      	ldr	r0, [r7, #4]
 8011578:	f7ff fe3b 	bl	80111f2 <nrf24_read_register>
	switch (config->data_rate)
 801157c:	683b      	ldr	r3, [r7, #0]
 801157e:	781b      	ldrb	r3, [r3, #0]
 8011580:	2b02      	cmp	r3, #2
 8011582:	d01c      	beq.n	80115be <nrf24_setup_rf+0x5e>
 8011584:	2b02      	cmp	r3, #2
 8011586:	dc25      	bgt.n	80115d4 <nrf24_setup_rf+0x74>
 8011588:	2b00      	cmp	r3, #0
 801158a:	d002      	beq.n	8011592 <nrf24_setup_rf+0x32>
 801158c:	2b01      	cmp	r3, #1
 801158e:	d00b      	beq.n	80115a8 <nrf24_setup_rf+0x48>
 8011590:	e020      	b.n	80115d4 <nrf24_setup_rf+0x74>
	{
	case NRF24_DATARATE_250_KBIT:
		rf_setup |= NRF24_RFSETUP_RF_DR_LOW; // ставим 1
 8011592:	7bfb      	ldrb	r3, [r7, #15]
 8011594:	f043 0320 	orr.w	r3, r3, #32
 8011598:	b2db      	uxtb	r3, r3
 801159a:	73fb      	strb	r3, [r7, #15]
		rf_setup &= ~NRF24_RFSETUP_RF_DR_HIGH; // ставим 0
 801159c:	7bfb      	ldrb	r3, [r7, #15]
 801159e:	f023 0308 	bic.w	r3, r3, #8
 80115a2:	b2db      	uxtb	r3, r3
 80115a4:	73fb      	strb	r3, [r7, #15]
		break;
 80115a6:	e015      	b.n	80115d4 <nrf24_setup_rf+0x74>
	case NRF24_DATARATE_1000_KBIT :
		rf_setup &= ~NRF24_RFSETUP_RF_DR_LOW;
 80115a8:	7bfb      	ldrb	r3, [r7, #15]
 80115aa:	f023 0320 	bic.w	r3, r3, #32
 80115ae:	b2db      	uxtb	r3, r3
 80115b0:	73fb      	strb	r3, [r7, #15]
		rf_setup &= ~NRF24_RFSETUP_RF_DR_HIGH;
 80115b2:	7bfb      	ldrb	r3, [r7, #15]
 80115b4:	f023 0308 	bic.w	r3, r3, #8
 80115b8:	b2db      	uxtb	r3, r3
 80115ba:	73fb      	strb	r3, [r7, #15]
		break;
 80115bc:	e00a      	b.n	80115d4 <nrf24_setup_rf+0x74>
	case NRF24_DATARATE_2000_KBIT :
		rf_setup &= ~NRF24_RFSETUP_RF_DR_LOW;
 80115be:	7bfb      	ldrb	r3, [r7, #15]
 80115c0:	f023 0320 	bic.w	r3, r3, #32
 80115c4:	b2db      	uxtb	r3, r3
 80115c6:	73fb      	strb	r3, [r7, #15]
		rf_setup |= NRF24_RFSETUP_RF_DR_HIGH;
 80115c8:	7bfb      	ldrb	r3, [r7, #15]
 80115ca:	f043 0308 	orr.w	r3, r3, #8
 80115ce:	b2db      	uxtb	r3, r3
 80115d0:	73fb      	strb	r3, [r7, #15]
		break;
 80115d2:	bf00      	nop
	}

	rf_setup &= ~(NRF24_RFSETUP_RF_PWR_MASK << NRF24_RFSETUP_RF_PWR_OFFSET); // занулили
 80115d4:	7bfb      	ldrb	r3, [r7, #15]
 80115d6:	f023 0306 	bic.w	r3, r3, #6
 80115da:	b2db      	uxtb	r3, r3
 80115dc:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (config->tx_power & NRF24_RFSETUP_RF_PWR_MASK) << NRF24_RFSETUP_RF_PWR_OFFSET; // записали
 80115de:	683b      	ldr	r3, [r7, #0]
 80115e0:	785b      	ldrb	r3, [r3, #1]
 80115e2:	005b      	lsls	r3, r3, #1
 80115e4:	b25b      	sxtb	r3, r3
 80115e6:	f003 0306 	and.w	r3, r3, #6
 80115ea:	b25a      	sxtb	r2, r3
 80115ec:	7bfb      	ldrb	r3, [r7, #15]
 80115ee:	b25b      	sxtb	r3, r3
 80115f0:	4313      	orrs	r3, r2
 80115f2:	b25b      	sxtb	r3, r3
 80115f4:	b2db      	uxtb	r3, r3
 80115f6:	73fb      	strb	r3, [r7, #15]

	nrf24_write_register(intf_ptr, NRF24_REGADDR_RF_SETUP, &rf_setup, 1);
 80115f8:	f107 020f 	add.w	r2, r7, #15
 80115fc:	2301      	movs	r3, #1
 80115fe:	2106      	movs	r1, #6
 8011600:	6878      	ldr	r0, [r7, #4]
 8011602:	f7ff fe25 	bl	8011250 <nrf24_write_register>

	uint8_t rf_channel = config->rf_channel;
 8011606:	683b      	ldr	r3, [r7, #0]
 8011608:	789b      	ldrb	r3, [r3, #2]
 801160a:	73bb      	strb	r3, [r7, #14]
    nrf24_write_register(intf_ptr, NRF24_REGADDR_RF_CH, &rf_channel, 1);
 801160c:	f107 020e 	add.w	r2, r7, #14
 8011610:	2301      	movs	r3, #1
 8011612:	2105      	movs	r1, #5
 8011614:	6878      	ldr	r0, [r7, #4]
 8011616:	f7ff fe1b 	bl	8011250 <nrf24_write_register>
	return 0;
 801161a:	2300      	movs	r3, #0
}
 801161c:	4618      	mov	r0, r3
 801161e:	3710      	adds	r7, #16
 8011620:	46bd      	mov	sp, r7
 8011622:	bd80      	pop	{r7, pc}

08011624 <nrf24_setup_protocol>:


int nrf24_setup_protocol(void * intf_ptr, const nrf24_protocol_config_t * config)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b084      	sub	sp, #16
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
 801162c:	6039      	str	r1, [r7, #0]
    uint8_t conf_reg = 0;
 801162e:	2300      	movs	r3, #0
 8011630:	73fb      	strb	r3, [r7, #15]
    nrf24_read_register(intf_ptr, NRF24_REGADDR_CONFIG, &conf_reg, 1);
 8011632:	f107 020f 	add.w	r2, r7, #15
 8011636:	2301      	movs	r3, #1
 8011638:	2100      	movs	r1, #0
 801163a:	6878      	ldr	r0, [r7, #4]
 801163c:	f7ff fdd9 	bl	80111f2 <nrf24_read_register>
    switch (config->crc_size)
 8011640:	683b      	ldr	r3, [r7, #0]
 8011642:	781b      	ldrb	r3, [r3, #0]
 8011644:	2b02      	cmp	r3, #2
 8011646:	d017      	beq.n	8011678 <nrf24_setup_protocol+0x54>
 8011648:	2b02      	cmp	r3, #2
 801164a:	dc20      	bgt.n	801168e <nrf24_setup_protocol+0x6a>
 801164c:	2b00      	cmp	r3, #0
 801164e:	d002      	beq.n	8011656 <nrf24_setup_protocol+0x32>
 8011650:	2b01      	cmp	r3, #1
 8011652:	d006      	beq.n	8011662 <nrf24_setup_protocol+0x3e>
 8011654:	e01b      	b.n	801168e <nrf24_setup_protocol+0x6a>
    {
    case NRF24_CRCSIZE_DISABLE:
    	conf_reg &= ~NRF24_CONFIG_EN_CRC;
 8011656:	7bfb      	ldrb	r3, [r7, #15]
 8011658:	f023 0308 	bic.w	r3, r3, #8
 801165c:	b2db      	uxtb	r3, r3
 801165e:	73fb      	strb	r3, [r7, #15]
    	break;
 8011660:	e015      	b.n	801168e <nrf24_setup_protocol+0x6a>
    case NRF24_CRCSIZE_1BYTE :
    	conf_reg |= NRF24_CONFIG_EN_CRC;
 8011662:	7bfb      	ldrb	r3, [r7, #15]
 8011664:	f043 0308 	orr.w	r3, r3, #8
 8011668:	b2db      	uxtb	r3, r3
 801166a:	73fb      	strb	r3, [r7, #15]
    	conf_reg &= ~NRF24_CONFIG_CRCO;
 801166c:	7bfb      	ldrb	r3, [r7, #15]
 801166e:	f023 0304 	bic.w	r3, r3, #4
 8011672:	b2db      	uxtb	r3, r3
 8011674:	73fb      	strb	r3, [r7, #15]
    	break;
 8011676:	e00a      	b.n	801168e <nrf24_setup_protocol+0x6a>
    case NRF24_CRCSIZE_2BYTE :
    	conf_reg |= NRF24_CONFIG_EN_CRC;
 8011678:	7bfb      	ldrb	r3, [r7, #15]
 801167a:	f043 0308 	orr.w	r3, r3, #8
 801167e:	b2db      	uxtb	r3, r3
 8011680:	73fb      	strb	r3, [r7, #15]
    	conf_reg |= NRF24_CONFIG_CRCO;
 8011682:	7bfb      	ldrb	r3, [r7, #15]
 8011684:	f043 0304 	orr.w	r3, r3, #4
 8011688:	b2db      	uxtb	r3, r3
 801168a:	73fb      	strb	r3, [r7, #15]
    	break;
 801168c:	bf00      	nop
    }
    nrf24_write_register(intf_ptr, NRF24_REGADDR_CONFIG, &conf_reg, 1);
 801168e:	f107 020f 	add.w	r2, r7, #15
 8011692:	2301      	movs	r3, #1
 8011694:	2100      	movs	r1, #0
 8011696:	6878      	ldr	r0, [r7, #4]
 8011698:	f7ff fdda 	bl	8011250 <nrf24_write_register>

    uint8_t setup_aw = config->address_width;
 801169c:	683b      	ldr	r3, [r7, #0]
 801169e:	785b      	ldrb	r3, [r3, #1]
 80116a0:	73bb      	strb	r3, [r7, #14]
    nrf24_write_register(intf_ptr, NRF24_REGADDR_SETUP_AW, &setup_aw, 1);
 80116a2:	f107 020e 	add.w	r2, r7, #14
 80116a6:	2301      	movs	r3, #1
 80116a8:	2103      	movs	r1, #3
 80116aa:	6878      	ldr	r0, [r7, #4]
 80116ac:	f7ff fdd0 	bl	8011250 <nrf24_write_register>

    uint8_t features = 0;
 80116b0:	2300      	movs	r3, #0
 80116b2:	737b      	strb	r3, [r7, #13]
    if (config->en_ack_payload)
 80116b4:	683b      	ldr	r3, [r7, #0]
 80116b6:	78db      	ldrb	r3, [r3, #3]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d004      	beq.n	80116c6 <nrf24_setup_protocol+0xa2>
    {
    	features |= NRF24_FEATURE_EN_ACK_PAY;
 80116bc:	7b7b      	ldrb	r3, [r7, #13]
 80116be:	f043 0302 	orr.w	r3, r3, #2
 80116c2:	b2db      	uxtb	r3, r3
 80116c4:	737b      	strb	r3, [r7, #13]
    }
    if (config->en_dyn_ack)
 80116c6:	683b      	ldr	r3, [r7, #0]
 80116c8:	791b      	ldrb	r3, [r3, #4]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d004      	beq.n	80116d8 <nrf24_setup_protocol+0xb4>
    {
    	features |= NRF24_FEATURE_EN_DYN_ACK;
 80116ce:	7b7b      	ldrb	r3, [r7, #13]
 80116d0:	f043 0301 	orr.w	r3, r3, #1
 80116d4:	b2db      	uxtb	r3, r3
 80116d6:	737b      	strb	r3, [r7, #13]
    }
    if (config->en_dyn_payload_size)
 80116d8:	683b      	ldr	r3, [r7, #0]
 80116da:	789b      	ldrb	r3, [r3, #2]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d004      	beq.n	80116ea <nrf24_setup_protocol+0xc6>
    {
    	features |= NRF24_FEATURE_EN_DPL;
 80116e0:	7b7b      	ldrb	r3, [r7, #13]
 80116e2:	f043 0304 	orr.w	r3, r3, #4
 80116e6:	b2db      	uxtb	r3, r3
 80116e8:	737b      	strb	r3, [r7, #13]
    }
    nrf24_write_register(intf_ptr, NRF24_REGADDR_FEATURE, &features, 1);
 80116ea:	f107 020d 	add.w	r2, r7, #13
 80116ee:	2301      	movs	r3, #1
 80116f0:	211d      	movs	r1, #29
 80116f2:	6878      	ldr	r0, [r7, #4]
 80116f4:	f7ff fdac 	bl	8011250 <nrf24_write_register>

    uint8_t setup_retr = (config->auto_retransmit_delay << 4) | (config->auto_retransmit_count & 0xf);
 80116f8:	683b      	ldr	r3, [r7, #0]
 80116fa:	799b      	ldrb	r3, [r3, #6]
 80116fc:	011b      	lsls	r3, r3, #4
 80116fe:	b25a      	sxtb	r2, r3
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	795b      	ldrb	r3, [r3, #5]
 8011704:	b25b      	sxtb	r3, r3
 8011706:	f003 030f 	and.w	r3, r3, #15
 801170a:	b25b      	sxtb	r3, r3
 801170c:	4313      	orrs	r3, r2
 801170e:	b25b      	sxtb	r3, r3
 8011710:	b2db      	uxtb	r3, r3
 8011712:	733b      	strb	r3, [r7, #12]
    nrf24_write_register(intf_ptr, NRF24_REGADDR_SETUP_RETR, &setup_retr, 1);
 8011714:	f107 020c 	add.w	r2, r7, #12
 8011718:	2301      	movs	r3, #1
 801171a:	2104      	movs	r1, #4
 801171c:	6878      	ldr	r0, [r7, #4]
 801171e:	f7ff fd97 	bl	8011250 <nrf24_write_register>
	return 0;
 8011722:	2300      	movs	r3, #0
}
 8011724:	4618      	mov	r0, r3
 8011726:	3710      	adds	r7, #16
 8011728:	46bd      	mov	sp, r7
 801172a:	bd80      	pop	{r7, pc}

0801172c <nrf24_pipe_rx_start>:


int nrf24_pipe_rx_start(void * intf_ptr, uint8_t pipe_no, const nrf24_pipe_config_t * config)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b086      	sub	sp, #24
 8011730:	af00      	add	r7, sp, #0
 8011732:	60f8      	str	r0, [r7, #12]
 8011734:	460b      	mov	r3, r1
 8011736:	607a      	str	r2, [r7, #4]
 8011738:	72fb      	strb	r3, [r7, #11]
	uint8_t en_aa = 0 ;
 801173a:	2300      	movs	r3, #0
 801173c:	75bb      	strb	r3, [r7, #22]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_EN_AA, &en_aa, 1);
 801173e:	f107 0216 	add.w	r2, r7, #22
 8011742:	2301      	movs	r3, #1
 8011744:	2101      	movs	r1, #1
 8011746:	68f8      	ldr	r0, [r7, #12]
 8011748:	f7ff fd53 	bl	80111f2 <nrf24_read_register>
	if (config->enable_auto_ack)
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	781b      	ldrb	r3, [r3, #0]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d00b      	beq.n	801176c <nrf24_pipe_rx_start+0x40>
	{
		en_aa |= (1 << pipe_no);
 8011754:	7afb      	ldrb	r3, [r7, #11]
 8011756:	2201      	movs	r2, #1
 8011758:	fa02 f303 	lsl.w	r3, r2, r3
 801175c:	b25a      	sxtb	r2, r3
 801175e:	7dbb      	ldrb	r3, [r7, #22]
 8011760:	b25b      	sxtb	r3, r3
 8011762:	4313      	orrs	r3, r2
 8011764:	b25b      	sxtb	r3, r3
 8011766:	b2db      	uxtb	r3, r3
 8011768:	75bb      	strb	r3, [r7, #22]
 801176a:	e00c      	b.n	8011786 <nrf24_pipe_rx_start+0x5a>
	}
	else
	{
		en_aa &= ~(1 << pipe_no);
 801176c:	7afb      	ldrb	r3, [r7, #11]
 801176e:	2201      	movs	r2, #1
 8011770:	fa02 f303 	lsl.w	r3, r2, r3
 8011774:	b25b      	sxtb	r3, r3
 8011776:	43db      	mvns	r3, r3
 8011778:	b25a      	sxtb	r2, r3
 801177a:	7dbb      	ldrb	r3, [r7, #22]
 801177c:	b25b      	sxtb	r3, r3
 801177e:	4013      	ands	r3, r2
 8011780:	b25b      	sxtb	r3, r3
 8011782:	b2db      	uxtb	r3, r3
 8011784:	75bb      	strb	r3, [r7, #22]
	}
	nrf24_write_register(intf_ptr, NRF24_REGADDR_EN_AA, &en_aa, 1);
 8011786:	f107 0216 	add.w	r2, r7, #22
 801178a:	2301      	movs	r3, #1
 801178c:	2101      	movs	r1, #1
 801178e:	68f8      	ldr	r0, [r7, #12]
 8011790:	f7ff fd5e 	bl	8011250 <nrf24_write_register>

	uint8_t en_rxaddr = 0;
 8011794:	2300      	movs	r3, #0
 8011796:	757b      	strb	r3, [r7, #21]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_EN_RXADDR, &en_rxaddr, 1);
 8011798:	f107 0215 	add.w	r2, r7, #21
 801179c:	2301      	movs	r3, #1
 801179e:	2102      	movs	r1, #2
 80117a0:	68f8      	ldr	r0, [r7, #12]
 80117a2:	f7ff fd26 	bl	80111f2 <nrf24_read_register>
	en_rxaddr |= (1 << pipe_no);
 80117a6:	7afb      	ldrb	r3, [r7, #11]
 80117a8:	2201      	movs	r2, #1
 80117aa:	fa02 f303 	lsl.w	r3, r2, r3
 80117ae:	b25a      	sxtb	r2, r3
 80117b0:	7d7b      	ldrb	r3, [r7, #21]
 80117b2:	b25b      	sxtb	r3, r3
 80117b4:	4313      	orrs	r3, r2
 80117b6:	b25b      	sxtb	r3, r3
 80117b8:	b2db      	uxtb	r3, r3
 80117ba:	757b      	strb	r3, [r7, #21]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_EN_RXADDR, &en_rxaddr, 1);
 80117bc:	f107 0215 	add.w	r2, r7, #21
 80117c0:	2301      	movs	r3, #1
 80117c2:	2102      	movs	r1, #2
 80117c4:	68f8      	ldr	r0, [r7, #12]
 80117c6:	f7ff fd43 	bl	8011250 <nrf24_write_register>

	uint8_t rx_pw = 0;
 80117ca:	2300      	movs	r3, #0
 80117cc:	75fb      	strb	r3, [r7, #23]
	switch (pipe_no)
 80117ce:	7afb      	ldrb	r3, [r7, #11]
 80117d0:	2b05      	cmp	r3, #5
 80117d2:	d851      	bhi.n	8011878 <nrf24_pipe_rx_start+0x14c>
 80117d4:	a201      	add	r2, pc, #4	; (adr r2, 80117dc <nrf24_pipe_rx_start+0xb0>)
 80117d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117da:	bf00      	nop
 80117dc:	080117f5 	.word	0x080117f5
 80117e0:	0801180b 	.word	0x0801180b
 80117e4:	08011821 	.word	0x08011821
 80117e8:	08011837 	.word	0x08011837
 80117ec:	0801184d 	.word	0x0801184d
 80117f0:	08011863 	.word	0x08011863
	{
	case 0:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P0, (uint8_t *)(&config->address), 5);
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	f103 0208 	add.w	r2, r3, #8
 80117fa:	2305      	movs	r3, #5
 80117fc:	210a      	movs	r1, #10
 80117fe:	68f8      	ldr	r0, [r7, #12]
 8011800:	f7ff fd26 	bl	8011250 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P0;
 8011804:	2311      	movs	r3, #17
 8011806:	75fb      	strb	r3, [r7, #23]
		break;
 8011808:	e036      	b.n	8011878 <nrf24_pipe_rx_start+0x14c>
	case 1:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P1, (uint8_t *)(&config->address), 5);
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	f103 0208 	add.w	r2, r3, #8
 8011810:	2305      	movs	r3, #5
 8011812:	210b      	movs	r1, #11
 8011814:	68f8      	ldr	r0, [r7, #12]
 8011816:	f7ff fd1b 	bl	8011250 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P1;
 801181a:	2312      	movs	r3, #18
 801181c:	75fb      	strb	r3, [r7, #23]
		break;
 801181e:	e02b      	b.n	8011878 <nrf24_pipe_rx_start+0x14c>
	case 2:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P2, ((uint8_t *)(&config->address) + 4), 1);
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	3308      	adds	r3, #8
 8011824:	1d1a      	adds	r2, r3, #4
 8011826:	2301      	movs	r3, #1
 8011828:	210c      	movs	r1, #12
 801182a:	68f8      	ldr	r0, [r7, #12]
 801182c:	f7ff fd10 	bl	8011250 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P2;
 8011830:	2313      	movs	r3, #19
 8011832:	75fb      	strb	r3, [r7, #23]
		break;
 8011834:	e020      	b.n	8011878 <nrf24_pipe_rx_start+0x14c>
	case 3:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P3, ((uint8_t *)(&config->address) + 4), 1);
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	3308      	adds	r3, #8
 801183a:	1d1a      	adds	r2, r3, #4
 801183c:	2301      	movs	r3, #1
 801183e:	210d      	movs	r1, #13
 8011840:	68f8      	ldr	r0, [r7, #12]
 8011842:	f7ff fd05 	bl	8011250 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P3;
 8011846:	2314      	movs	r3, #20
 8011848:	75fb      	strb	r3, [r7, #23]
		break;
 801184a:	e015      	b.n	8011878 <nrf24_pipe_rx_start+0x14c>
	case 4:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P4, ((uint8_t *)(&config->address) + 4), 1);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	3308      	adds	r3, #8
 8011850:	1d1a      	adds	r2, r3, #4
 8011852:	2301      	movs	r3, #1
 8011854:	210e      	movs	r1, #14
 8011856:	68f8      	ldr	r0, [r7, #12]
 8011858:	f7ff fcfa 	bl	8011250 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P4;
 801185c:	2315      	movs	r3, #21
 801185e:	75fb      	strb	r3, [r7, #23]
		break;
 8011860:	e00a      	b.n	8011878 <nrf24_pipe_rx_start+0x14c>
	case 5:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P5, ((uint8_t *)(&config->address) + 4), 1);
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	3308      	adds	r3, #8
 8011866:	1d1a      	adds	r2, r3, #4
 8011868:	2301      	movs	r3, #1
 801186a:	210f      	movs	r1, #15
 801186c:	68f8      	ldr	r0, [r7, #12]
 801186e:	f7ff fcef 	bl	8011250 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P5;
 8011872:	2316      	movs	r3, #22
 8011874:	75fb      	strb	r3, [r7, #23]
		break;
 8011876:	bf00      	nop
	}

	uint8_t dynpd = 0;
 8011878:	2300      	movs	r3, #0
 801187a:	753b      	strb	r3, [r7, #20]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_DYNPD, &dynpd, 1);
 801187c:	f107 0214 	add.w	r2, r7, #20
 8011880:	2301      	movs	r3, #1
 8011882:	211c      	movs	r1, #28
 8011884:	68f8      	ldr	r0, [r7, #12]
 8011886:	f7ff fcb4 	bl	80111f2 <nrf24_read_register>
	if (config->payload_size >= 0)
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8011890:	2b00      	cmp	r3, #0
 8011892:	db15      	blt.n	80118c0 <nrf24_pipe_rx_start+0x194>
	{
		nrf24_write_register(intf_ptr, rx_pw, (uint8_t *)(&config->payload_size), 1);
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	f103 0210 	add.w	r2, r3, #16
 801189a:	7df9      	ldrb	r1, [r7, #23]
 801189c:	2301      	movs	r3, #1
 801189e:	68f8      	ldr	r0, [r7, #12]
 80118a0:	f7ff fcd6 	bl	8011250 <nrf24_write_register>
		dynpd &= ~(1 << pipe_no);
 80118a4:	7afb      	ldrb	r3, [r7, #11]
 80118a6:	2201      	movs	r2, #1
 80118a8:	fa02 f303 	lsl.w	r3, r2, r3
 80118ac:	b25b      	sxtb	r3, r3
 80118ae:	43db      	mvns	r3, r3
 80118b0:	b25a      	sxtb	r2, r3
 80118b2:	7d3b      	ldrb	r3, [r7, #20]
 80118b4:	b25b      	sxtb	r3, r3
 80118b6:	4013      	ands	r3, r2
 80118b8:	b25b      	sxtb	r3, r3
 80118ba:	b2db      	uxtb	r3, r3
 80118bc:	753b      	strb	r3, [r7, #20]
 80118be:	e013      	b.n	80118e8 <nrf24_pipe_rx_start+0x1bc>
	}
	else
	{
		uint8_t pld_size = 32; // Нужно записать не 0, чтобы пайп в целом работал
 80118c0:	2320      	movs	r3, #32
 80118c2:	74fb      	strb	r3, [r7, #19]
		nrf24_write_register(intf_ptr, rx_pw, &pld_size, 1);
 80118c4:	f107 0213 	add.w	r2, r7, #19
 80118c8:	7df9      	ldrb	r1, [r7, #23]
 80118ca:	2301      	movs	r3, #1
 80118cc:	68f8      	ldr	r0, [r7, #12]
 80118ce:	f7ff fcbf 	bl	8011250 <nrf24_write_register>
		dynpd |= (1 << pipe_no);
 80118d2:	7afb      	ldrb	r3, [r7, #11]
 80118d4:	2201      	movs	r2, #1
 80118d6:	fa02 f303 	lsl.w	r3, r2, r3
 80118da:	b25a      	sxtb	r2, r3
 80118dc:	7d3b      	ldrb	r3, [r7, #20]
 80118de:	b25b      	sxtb	r3, r3
 80118e0:	4313      	orrs	r3, r2
 80118e2:	b25b      	sxtb	r3, r3
 80118e4:	b2db      	uxtb	r3, r3
 80118e6:	753b      	strb	r3, [r7, #20]
	}
	nrf24_write_register(intf_ptr, NRF24_REGADDR_DYNPD, &dynpd, 1);
 80118e8:	f107 0214 	add.w	r2, r7, #20
 80118ec:	2301      	movs	r3, #1
 80118ee:	211c      	movs	r1, #28
 80118f0:	68f8      	ldr	r0, [r7, #12]
 80118f2:	f7ff fcad 	bl	8011250 <nrf24_write_register>

	return 0;
 80118f6:	2300      	movs	r3, #0
}
 80118f8:	4618      	mov	r0, r3
 80118fa:	3718      	adds	r7, #24
 80118fc:	46bd      	mov	sp, r7
 80118fe:	bd80      	pop	{r7, pc}

08011900 <nrf24_pipe_set_tx_addr>:
	return 0;
}


int nrf24_pipe_set_tx_addr(void * intf_ptr, uint64_t tx_addr)
{
 8011900:	b580      	push	{r7, lr}
 8011902:	b084      	sub	sp, #16
 8011904:	af00      	add	r7, sp, #0
 8011906:	60f8      	str	r0, [r7, #12]
 8011908:	e9c7 2300 	strd	r2, r3, [r7]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_TX_ADDR, (uint8_t *)(&tx_addr), 5);
 801190c:	463a      	mov	r2, r7
 801190e:	2305      	movs	r3, #5
 8011910:	2110      	movs	r1, #16
 8011912:	68f8      	ldr	r0, [r7, #12]
 8011914:	f7ff fc9c 	bl	8011250 <nrf24_write_register>
	return 0;
 8011918:	2300      	movs	r3, #0
}
 801191a:	4618      	mov	r0, r3
 801191c:	3710      	adds	r7, #16
 801191e:	46bd      	mov	sp, r7
 8011920:	bd80      	pop	{r7, pc}

08011922 <nrf24_mode_power_down>:


int nrf24_mode_power_down(void * intf_ptr)
{
 8011922:	b580      	push	{r7, lr}
 8011924:	b084      	sub	sp, #16
 8011926:	af00      	add	r7, sp, #0
 8011928:	6078      	str	r0, [r7, #4]
	uint8_t config_reg = 0;
 801192a:	2300      	movs	r3, #0
 801192c:	73fb      	strb	r3, [r7, #15]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_CONFIG, &config_reg, 1);
 801192e:	f107 020f 	add.w	r2, r7, #15
 8011932:	2301      	movs	r3, #1
 8011934:	2100      	movs	r1, #0
 8011936:	6878      	ldr	r0, [r7, #4]
 8011938:	f7ff fc5b 	bl	80111f2 <nrf24_read_register>
	config_reg &= ~NRF24_CONFIG_PWR_UP;
 801193c:	7bfb      	ldrb	r3, [r7, #15]
 801193e:	f023 0302 	bic.w	r3, r3, #2
 8011942:	b2db      	uxtb	r3, r3
 8011944:	73fb      	strb	r3, [r7, #15]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_CONFIG, &config_reg, 1);
 8011946:	f107 020f 	add.w	r2, r7, #15
 801194a:	2301      	movs	r3, #1
 801194c:	2100      	movs	r1, #0
 801194e:	6878      	ldr	r0, [r7, #4]
 8011950:	f7ff fc7e 	bl	8011250 <nrf24_write_register>
	return 0;
 8011954:	2300      	movs	r3, #0
}
 8011956:	4618      	mov	r0, r3
 8011958:	3710      	adds	r7, #16
 801195a:	46bd      	mov	sp, r7
 801195c:	bd80      	pop	{r7, pc}

0801195e <nrf24_mode_standby>:


int nrf24_mode_standby(void * intf_ptr)
{
 801195e:	b580      	push	{r7, lr}
 8011960:	b084      	sub	sp, #16
 8011962:	af00      	add	r7, sp, #0
 8011964:	6078      	str	r0, [r7, #4]
	uint8_t config_reg = 0;
 8011966:	2300      	movs	r3, #0
 8011968:	73fb      	strb	r3, [r7, #15]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_CONFIG, &config_reg, 1);
 801196a:	f107 020f 	add.w	r2, r7, #15
 801196e:	2301      	movs	r3, #1
 8011970:	2100      	movs	r1, #0
 8011972:	6878      	ldr	r0, [r7, #4]
 8011974:	f7ff fc3d 	bl	80111f2 <nrf24_read_register>
	config_reg |= NRF24_CONFIG_PWR_UP;
 8011978:	7bfb      	ldrb	r3, [r7, #15]
 801197a:	f043 0302 	orr.w	r3, r3, #2
 801197e:	b2db      	uxtb	r3, r3
 8011980:	73fb      	strb	r3, [r7, #15]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_CONFIG, &config_reg, 1);
 8011982:	f107 020f 	add.w	r2, r7, #15
 8011986:	2301      	movs	r3, #1
 8011988:	2100      	movs	r1, #0
 801198a:	6878      	ldr	r0, [r7, #4]
 801198c:	f7ff fc60 	bl	8011250 <nrf24_write_register>
	nrf24_ce_activate(intf_ptr, false);
 8011990:	2100      	movs	r1, #0
 8011992:	6878      	ldr	r0, [r7, #4]
 8011994:	f7ff fd92 	bl	80114bc <nrf24_ce_activate>
	return 0;
 8011998:	2300      	movs	r3, #0
}
 801199a:	4618      	mov	r0, r3
 801199c:	3710      	adds	r7, #16
 801199e:	46bd      	mov	sp, r7
 80119a0:	bd80      	pop	{r7, pc}

080119a2 <nrf24_mode_tx>:


int nrf24_mode_tx(void * intf_ptr)
{
 80119a2:	b580      	push	{r7, lr}
 80119a4:	b084      	sub	sp, #16
 80119a6:	af00      	add	r7, sp, #0
 80119a8:	6078      	str	r0, [r7, #4]
	uint8_t mode_tx = 0;
 80119aa:	2300      	movs	r3, #0
 80119ac:	73fb      	strb	r3, [r7, #15]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_CONFIG, &mode_tx, 1);
 80119ae:	f107 020f 	add.w	r2, r7, #15
 80119b2:	2301      	movs	r3, #1
 80119b4:	2100      	movs	r1, #0
 80119b6:	6878      	ldr	r0, [r7, #4]
 80119b8:	f7ff fc1b 	bl	80111f2 <nrf24_read_register>
	mode_tx &= ~NRF24_CONFIG_PRIM_RX;
 80119bc:	7bfb      	ldrb	r3, [r7, #15]
 80119be:	f023 0301 	bic.w	r3, r3, #1
 80119c2:	b2db      	uxtb	r3, r3
 80119c4:	73fb      	strb	r3, [r7, #15]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_CONFIG, &mode_tx, 1);
 80119c6:	f107 020f 	add.w	r2, r7, #15
 80119ca:	2301      	movs	r3, #1
 80119cc:	2100      	movs	r1, #0
 80119ce:	6878      	ldr	r0, [r7, #4]
 80119d0:	f7ff fc3e 	bl	8011250 <nrf24_write_register>
	nrf24_ce_activate(intf_ptr, true);
 80119d4:	2101      	movs	r1, #1
 80119d6:	6878      	ldr	r0, [r7, #4]
 80119d8:	f7ff fd70 	bl	80114bc <nrf24_ce_activate>
	return 0;
 80119dc:	2300      	movs	r3, #0
}
 80119de:	4618      	mov	r0, r3
 80119e0:	3710      	adds	r7, #16
 80119e2:	46bd      	mov	sp, r7
 80119e4:	bd80      	pop	{r7, pc}

080119e6 <nrf24_fifo_status>:
	return 0;
}


int nrf24_fifo_status(void * intf_ptr, nrf24_fifo_status_t * rx_status, nrf24_fifo_status_t * tx_status)
{
 80119e6:	b580      	push	{r7, lr}
 80119e8:	b086      	sub	sp, #24
 80119ea:	af00      	add	r7, sp, #0
 80119ec:	60f8      	str	r0, [r7, #12]
 80119ee:	60b9      	str	r1, [r7, #8]
 80119f0:	607a      	str	r2, [r7, #4]
	uint8_t fifo_satus = 0;
 80119f2:	2300      	movs	r3, #0
 80119f4:	75fb      	strb	r3, [r7, #23]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_FIFO_STATUS, &fifo_satus, 1);
 80119f6:	f107 0217 	add.w	r2, r7, #23
 80119fa:	2301      	movs	r3, #1
 80119fc:	2117      	movs	r1, #23
 80119fe:	68f8      	ldr	r0, [r7, #12]
 8011a00:	f7ff fbf7 	bl	80111f2 <nrf24_read_register>

	*rx_status = NRF24_FIFO_NOT_EMPTY;
 8011a04:	68bb      	ldr	r3, [r7, #8]
 8011a06:	2201      	movs	r2, #1
 8011a08:	701a      	strb	r2, [r3, #0]
	if (((fifo_satus >> NRF24_FIFO_STATUS_RX_EMPTY_OFFSET) & NRF24_FIFO_STATUS_RX_EMPTY_MASK) == 1)
 8011a0a:	7dfb      	ldrb	r3, [r7, #23]
 8011a0c:	f003 0301 	and.w	r3, r3, #1
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d002      	beq.n	8011a1a <nrf24_fifo_status+0x34>
	{
		*rx_status = NRF24_FIFO_EMPTY;
 8011a14:	68bb      	ldr	r3, [r7, #8]
 8011a16:	2200      	movs	r2, #0
 8011a18:	701a      	strb	r2, [r3, #0]
	}
	if (((fifo_satus >> NRF24_FIFO_STATUS_RX_FULL_OFFSET) & NRF24_FIFO_STATUS_RX_FULL_MASK) == 1)
 8011a1a:	7dfb      	ldrb	r3, [r7, #23]
 8011a1c:	085b      	lsrs	r3, r3, #1
 8011a1e:	b2db      	uxtb	r3, r3
 8011a20:	f003 0301 	and.w	r3, r3, #1
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d002      	beq.n	8011a2e <nrf24_fifo_status+0x48>
	{
		*rx_status = NRF24_FIFO_FULL;
 8011a28:	68bb      	ldr	r3, [r7, #8]
 8011a2a:	2202      	movs	r2, #2
 8011a2c:	701a      	strb	r2, [r3, #0]
	}

	*tx_status = NRF24_FIFO_NOT_EMPTY;
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	2201      	movs	r2, #1
 8011a32:	701a      	strb	r2, [r3, #0]
	if (((fifo_satus >> NRF24_FIFO_STATUS_TX_EMPTY_OFFSET) & NRF24_FIFO_STATUS_TX_EMPTY_MASK) == 1)
 8011a34:	7dfb      	ldrb	r3, [r7, #23]
 8011a36:	091b      	lsrs	r3, r3, #4
 8011a38:	b2db      	uxtb	r3, r3
 8011a3a:	f003 0301 	and.w	r3, r3, #1
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d002      	beq.n	8011a48 <nrf24_fifo_status+0x62>
	{
		*tx_status = NRF24_FIFO_EMPTY;
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	2200      	movs	r2, #0
 8011a46:	701a      	strb	r2, [r3, #0]
	}
	if (((fifo_satus >> NRF24_FIFO_STATUS_TX_FULL_OFFSET) & NRF24_FIFO_STATUS_TX_FULL_MASK) == 1)
 8011a48:	7dfb      	ldrb	r3, [r7, #23]
 8011a4a:	095b      	lsrs	r3, r3, #5
 8011a4c:	b2db      	uxtb	r3, r3
 8011a4e:	f003 0301 	and.w	r3, r3, #1
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d002      	beq.n	8011a5c <nrf24_fifo_status+0x76>
	{
		*tx_status = NRF24_FIFO_FULL;
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	2202      	movs	r2, #2
 8011a5a:	701a      	strb	r2, [r3, #0]
	}
	return 0;
 8011a5c:	2300      	movs	r3, #0
}
 8011a5e:	4618      	mov	r0, r3
 8011a60:	3718      	adds	r7, #24
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bd80      	pop	{r7, pc}

08011a66 <nrf24_fifo_read>:


int nrf24_fifo_read(void * intf_ptr, uint8_t * packet_buffer, uint8_t packet_buffer_size)
{
 8011a66:	b580      	push	{r7, lr}
 8011a68:	b086      	sub	sp, #24
 8011a6a:	af00      	add	r7, sp, #0
 8011a6c:	60f8      	str	r0, [r7, #12]
 8011a6e:	60b9      	str	r1, [r7, #8]
 8011a70:	4613      	mov	r3, r2
 8011a72:	71fb      	strb	r3, [r7, #7]
	uint8_t payload_size = 0;
 8011a74:	2300      	movs	r3, #0
 8011a76:	75fb      	strb	r3, [r7, #23]
	nrf24_get_rx_payload_size(intf_ptr, &payload_size);
 8011a78:	f107 0317 	add.w	r3, r7, #23
 8011a7c:	4619      	mov	r1, r3
 8011a7e:	68f8      	ldr	r0, [r7, #12]
 8011a80:	f7ff fcc9 	bl	8011416 <nrf24_get_rx_payload_size>
	if (payload_size > 0)
 8011a84:	7dfb      	ldrb	r3, [r7, #23]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d005      	beq.n	8011a96 <nrf24_fifo_read+0x30>
	{
		nrf24_read_rx_payload(intf_ptr, packet_buffer, packet_buffer_size);
 8011a8a:	79fb      	ldrb	r3, [r7, #7]
 8011a8c:	461a      	mov	r2, r3
 8011a8e:	68b9      	ldr	r1, [r7, #8]
 8011a90:	68f8      	ldr	r0, [r7, #12]
 8011a92:	f7ff fc11 	bl	80112b8 <nrf24_read_rx_payload>
	}
	return payload_size;
 8011a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a98:	4618      	mov	r0, r3
 8011a9a:	3718      	adds	r7, #24
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	bd80      	pop	{r7, pc}

08011aa0 <nrf24_fifo_write>:


int nrf24_fifo_write(void * intf_ptr, const uint8_t * packet, uint8_t packet_size, bool use_ack)
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b084      	sub	sp, #16
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	60f8      	str	r0, [r7, #12]
 8011aa8:	60b9      	str	r1, [r7, #8]
 8011aaa:	4611      	mov	r1, r2
 8011aac:	461a      	mov	r2, r3
 8011aae:	460b      	mov	r3, r1
 8011ab0:	71fb      	strb	r3, [r7, #7]
 8011ab2:	4613      	mov	r3, r2
 8011ab4:	71bb      	strb	r3, [r7, #6]
	if (packet_size == 0)
 8011ab6:	79fb      	ldrb	r3, [r7, #7]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d101      	bne.n	8011ac0 <nrf24_fifo_write+0x20>
	{
		return 0;
 8011abc:	2300      	movs	r3, #0
 8011abe:	e011      	b.n	8011ae4 <nrf24_fifo_write+0x44>
	}
	if (packet_size <= 32)
 8011ac0:	79fb      	ldrb	r3, [r7, #7]
 8011ac2:	2b20      	cmp	r3, #32
 8011ac4:	d807      	bhi.n	8011ad6 <nrf24_fifo_write+0x36>
	{
		nrf24_write_tx_payload(intf_ptr, packet,  packet_size,  use_ack);
 8011ac6:	79fa      	ldrb	r2, [r7, #7]
 8011ac8:	79bb      	ldrb	r3, [r7, #6]
 8011aca:	68b9      	ldr	r1, [r7, #8]
 8011acc:	68f8      	ldr	r0, [r7, #12]
 8011ace:	f7ff fc33 	bl	8011338 <nrf24_write_tx_payload>
		return packet_size;
 8011ad2:	79fb      	ldrb	r3, [r7, #7]
 8011ad4:	e006      	b.n	8011ae4 <nrf24_fifo_write+0x44>
	}
	else
	{
		nrf24_write_tx_payload(intf_ptr, packet,  32,  use_ack);
 8011ad6:	79bb      	ldrb	r3, [r7, #6]
 8011ad8:	2220      	movs	r2, #32
 8011ada:	68b9      	ldr	r1, [r7, #8]
 8011adc:	68f8      	ldr	r0, [r7, #12]
 8011ade:	f7ff fc2b 	bl	8011338 <nrf24_write_tx_payload>
		return 32;
 8011ae2:	2320      	movs	r3, #32
	}
}
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	3710      	adds	r7, #16
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	bd80      	pop	{r7, pc}

08011aec <nrf24_fifo_flush_tx>:
	}
}


int nrf24_fifo_flush_tx(void * intf_ptr)
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b082      	sub	sp, #8
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	6078      	str	r0, [r7, #4]
	nrf24_flush_tx(intf_ptr);
 8011af4:	6878      	ldr	r0, [r7, #4]
 8011af6:	f7ff fc6f 	bl	80113d8 <nrf24_flush_tx>
	return 0;
 8011afa:	2300      	movs	r3, #0
}
 8011afc:	4618      	mov	r0, r3
 8011afe:	3708      	adds	r7, #8
 8011b00:	46bd      	mov	sp, r7
 8011b02:	bd80      	pop	{r7, pc}

08011b04 <nrf24_fifo_flush_rx>:


int nrf24_fifo_flush_rx(void * intf_ptr)
{
 8011b04:	b580      	push	{r7, lr}
 8011b06:	b082      	sub	sp, #8
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	6078      	str	r0, [r7, #4]
	nrf24_flush_rx(intf_ptr);
 8011b0c:	6878      	ldr	r0, [r7, #4]
 8011b0e:	f7ff fc44 	bl	801139a <nrf24_flush_rx>
	return 0;
 8011b12:	2300      	movs	r3, #0
}
 8011b14:	4618      	mov	r0, r3
 8011b16:	3708      	adds	r7, #8
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	bd80      	pop	{r7, pc}

08011b1c <nrf24_irq_get>:
	return 0;
}


int nrf24_irq_get(void * intf_ptr, int * composition)
{
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	b084      	sub	sp, #16
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
 8011b24:	6039      	str	r1, [r7, #0]
	uint8_t status_reg = 0;
 8011b26:	2300      	movs	r3, #0
 8011b28:	73fb      	strb	r3, [r7, #15]
	nrf24_get_status(intf_ptr, &status_reg);
 8011b2a:	f107 030f 	add.w	r3, r7, #15
 8011b2e:	4619      	mov	r1, r3
 8011b30:	6878      	ldr	r0, [r7, #4]
 8011b32:	f7ff fca1 	bl	8011478 <nrf24_get_status>
	*composition = (status_reg >> NRF24_STATUS_FLAG_OFFSET) & NRF24_STATUS_FLAG_MASK;
 8011b36:	7bfb      	ldrb	r3, [r7, #15]
 8011b38:	091b      	lsrs	r3, r3, #4
 8011b3a:	b2db      	uxtb	r3, r3
 8011b3c:	f003 0207 	and.w	r2, r3, #7
 8011b40:	683b      	ldr	r3, [r7, #0]
 8011b42:	601a      	str	r2, [r3, #0]
	return 0;
 8011b44:	2300      	movs	r3, #0
}
 8011b46:	4618      	mov	r0, r3
 8011b48:	3710      	adds	r7, #16
 8011b4a:	46bd      	mov	sp, r7
 8011b4c:	bd80      	pop	{r7, pc}

08011b4e <nrf24_irq_clear>:


int nrf24_irq_clear(void * intf_ptr, int composition)
{
 8011b4e:	b580      	push	{r7, lr}
 8011b50:	b084      	sub	sp, #16
 8011b52:	af00      	add	r7, sp, #0
 8011b54:	6078      	str	r0, [r7, #4]
 8011b56:	6039      	str	r1, [r7, #0]
	uint8_t status_reg = (composition & NRF24_STATUS_FLAG_MASK) << NRF24_STATUS_FLAG_OFFSET;
 8011b58:	683b      	ldr	r3, [r7, #0]
 8011b5a:	011b      	lsls	r3, r3, #4
 8011b5c:	b2db      	uxtb	r3, r3
 8011b5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011b62:	b2db      	uxtb	r3, r3
 8011b64:	73fb      	strb	r3, [r7, #15]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_STATUS, &status_reg, 1);
 8011b66:	f107 020f 	add.w	r2, r7, #15
 8011b6a:	2301      	movs	r3, #1
 8011b6c:	2107      	movs	r1, #7
 8011b6e:	6878      	ldr	r0, [r7, #4]
 8011b70:	f7ff fb6e 	bl	8011250 <nrf24_write_register>
	return 0;
 8011b74:	2300      	movs	r3, #0
}
 8011b76:	4618      	mov	r0, r3
 8011b78:	3710      	adds	r7, #16
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	bd80      	pop	{r7, pc}
	...

08011b80 <__assert_func>:
 8011b80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011b82:	4614      	mov	r4, r2
 8011b84:	461a      	mov	r2, r3
 8011b86:	4b09      	ldr	r3, [pc, #36]	; (8011bac <__assert_func+0x2c>)
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	4605      	mov	r5, r0
 8011b8c:	68d8      	ldr	r0, [r3, #12]
 8011b8e:	b14c      	cbz	r4, 8011ba4 <__assert_func+0x24>
 8011b90:	4b07      	ldr	r3, [pc, #28]	; (8011bb0 <__assert_func+0x30>)
 8011b92:	9100      	str	r1, [sp, #0]
 8011b94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011b98:	4906      	ldr	r1, [pc, #24]	; (8011bb4 <__assert_func+0x34>)
 8011b9a:	462b      	mov	r3, r5
 8011b9c:	f000 f814 	bl	8011bc8 <fiprintf>
 8011ba0:	f001 ffd6 	bl	8013b50 <abort>
 8011ba4:	4b04      	ldr	r3, [pc, #16]	; (8011bb8 <__assert_func+0x38>)
 8011ba6:	461c      	mov	r4, r3
 8011ba8:	e7f3      	b.n	8011b92 <__assert_func+0x12>
 8011baa:	bf00      	nop
 8011bac:	2000005c 	.word	0x2000005c
 8011bb0:	0801813c 	.word	0x0801813c
 8011bb4:	08018149 	.word	0x08018149
 8011bb8:	08018177 	.word	0x08018177

08011bbc <__errno>:
 8011bbc:	4b01      	ldr	r3, [pc, #4]	; (8011bc4 <__errno+0x8>)
 8011bbe:	6818      	ldr	r0, [r3, #0]
 8011bc0:	4770      	bx	lr
 8011bc2:	bf00      	nop
 8011bc4:	2000005c 	.word	0x2000005c

08011bc8 <fiprintf>:
 8011bc8:	b40e      	push	{r1, r2, r3}
 8011bca:	b503      	push	{r0, r1, lr}
 8011bcc:	4601      	mov	r1, r0
 8011bce:	ab03      	add	r3, sp, #12
 8011bd0:	4805      	ldr	r0, [pc, #20]	; (8011be8 <fiprintf+0x20>)
 8011bd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011bd6:	6800      	ldr	r0, [r0, #0]
 8011bd8:	9301      	str	r3, [sp, #4]
 8011bda:	f000 f86b 	bl	8011cb4 <_vfiprintf_r>
 8011bde:	b002      	add	sp, #8
 8011be0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011be4:	b003      	add	sp, #12
 8011be6:	4770      	bx	lr
 8011be8:	2000005c 	.word	0x2000005c

08011bec <__libc_init_array>:
 8011bec:	b570      	push	{r4, r5, r6, lr}
 8011bee:	4d0d      	ldr	r5, [pc, #52]	; (8011c24 <__libc_init_array+0x38>)
 8011bf0:	4c0d      	ldr	r4, [pc, #52]	; (8011c28 <__libc_init_array+0x3c>)
 8011bf2:	1b64      	subs	r4, r4, r5
 8011bf4:	10a4      	asrs	r4, r4, #2
 8011bf6:	2600      	movs	r6, #0
 8011bf8:	42a6      	cmp	r6, r4
 8011bfa:	d109      	bne.n	8011c10 <__libc_init_array+0x24>
 8011bfc:	4d0b      	ldr	r5, [pc, #44]	; (8011c2c <__libc_init_array+0x40>)
 8011bfe:	4c0c      	ldr	r4, [pc, #48]	; (8011c30 <__libc_init_array+0x44>)
 8011c00:	f005 ffcc 	bl	8017b9c <_init>
 8011c04:	1b64      	subs	r4, r4, r5
 8011c06:	10a4      	asrs	r4, r4, #2
 8011c08:	2600      	movs	r6, #0
 8011c0a:	42a6      	cmp	r6, r4
 8011c0c:	d105      	bne.n	8011c1a <__libc_init_array+0x2e>
 8011c0e:	bd70      	pop	{r4, r5, r6, pc}
 8011c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8011c14:	4798      	blx	r3
 8011c16:	3601      	adds	r6, #1
 8011c18:	e7ee      	b.n	8011bf8 <__libc_init_array+0xc>
 8011c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8011c1e:	4798      	blx	r3
 8011c20:	3601      	adds	r6, #1
 8011c22:	e7f2      	b.n	8011c0a <__libc_init_array+0x1e>
 8011c24:	08018670 	.word	0x08018670
 8011c28:	08018670 	.word	0x08018670
 8011c2c:	08018670 	.word	0x08018670
 8011c30:	08018674 	.word	0x08018674

08011c34 <memcpy>:
 8011c34:	440a      	add	r2, r1
 8011c36:	4291      	cmp	r1, r2
 8011c38:	f100 33ff 	add.w	r3, r0, #4294967295
 8011c3c:	d100      	bne.n	8011c40 <memcpy+0xc>
 8011c3e:	4770      	bx	lr
 8011c40:	b510      	push	{r4, lr}
 8011c42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011c46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011c4a:	4291      	cmp	r1, r2
 8011c4c:	d1f9      	bne.n	8011c42 <memcpy+0xe>
 8011c4e:	bd10      	pop	{r4, pc}

08011c50 <memset>:
 8011c50:	4402      	add	r2, r0
 8011c52:	4603      	mov	r3, r0
 8011c54:	4293      	cmp	r3, r2
 8011c56:	d100      	bne.n	8011c5a <memset+0xa>
 8011c58:	4770      	bx	lr
 8011c5a:	f803 1b01 	strb.w	r1, [r3], #1
 8011c5e:	e7f9      	b.n	8011c54 <memset+0x4>

08011c60 <__sfputc_r>:
 8011c60:	6893      	ldr	r3, [r2, #8]
 8011c62:	3b01      	subs	r3, #1
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	b410      	push	{r4}
 8011c68:	6093      	str	r3, [r2, #8]
 8011c6a:	da08      	bge.n	8011c7e <__sfputc_r+0x1e>
 8011c6c:	6994      	ldr	r4, [r2, #24]
 8011c6e:	42a3      	cmp	r3, r4
 8011c70:	db01      	blt.n	8011c76 <__sfputc_r+0x16>
 8011c72:	290a      	cmp	r1, #10
 8011c74:	d103      	bne.n	8011c7e <__sfputc_r+0x1e>
 8011c76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c7a:	f001 bea9 	b.w	80139d0 <__swbuf_r>
 8011c7e:	6813      	ldr	r3, [r2, #0]
 8011c80:	1c58      	adds	r0, r3, #1
 8011c82:	6010      	str	r0, [r2, #0]
 8011c84:	7019      	strb	r1, [r3, #0]
 8011c86:	4608      	mov	r0, r1
 8011c88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c8c:	4770      	bx	lr

08011c8e <__sfputs_r>:
 8011c8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c90:	4606      	mov	r6, r0
 8011c92:	460f      	mov	r7, r1
 8011c94:	4614      	mov	r4, r2
 8011c96:	18d5      	adds	r5, r2, r3
 8011c98:	42ac      	cmp	r4, r5
 8011c9a:	d101      	bne.n	8011ca0 <__sfputs_r+0x12>
 8011c9c:	2000      	movs	r0, #0
 8011c9e:	e007      	b.n	8011cb0 <__sfputs_r+0x22>
 8011ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ca4:	463a      	mov	r2, r7
 8011ca6:	4630      	mov	r0, r6
 8011ca8:	f7ff ffda 	bl	8011c60 <__sfputc_r>
 8011cac:	1c43      	adds	r3, r0, #1
 8011cae:	d1f3      	bne.n	8011c98 <__sfputs_r+0xa>
 8011cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011cb4 <_vfiprintf_r>:
 8011cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cb8:	460d      	mov	r5, r1
 8011cba:	b09d      	sub	sp, #116	; 0x74
 8011cbc:	4614      	mov	r4, r2
 8011cbe:	4698      	mov	r8, r3
 8011cc0:	4606      	mov	r6, r0
 8011cc2:	b118      	cbz	r0, 8011ccc <_vfiprintf_r+0x18>
 8011cc4:	6983      	ldr	r3, [r0, #24]
 8011cc6:	b90b      	cbnz	r3, 8011ccc <_vfiprintf_r+0x18>
 8011cc8:	f002 fedc 	bl	8014a84 <__sinit>
 8011ccc:	4b89      	ldr	r3, [pc, #548]	; (8011ef4 <_vfiprintf_r+0x240>)
 8011cce:	429d      	cmp	r5, r3
 8011cd0:	d11b      	bne.n	8011d0a <_vfiprintf_r+0x56>
 8011cd2:	6875      	ldr	r5, [r6, #4]
 8011cd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011cd6:	07d9      	lsls	r1, r3, #31
 8011cd8:	d405      	bmi.n	8011ce6 <_vfiprintf_r+0x32>
 8011cda:	89ab      	ldrh	r3, [r5, #12]
 8011cdc:	059a      	lsls	r2, r3, #22
 8011cde:	d402      	bmi.n	8011ce6 <_vfiprintf_r+0x32>
 8011ce0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011ce2:	f003 fae0 	bl	80152a6 <__retarget_lock_acquire_recursive>
 8011ce6:	89ab      	ldrh	r3, [r5, #12]
 8011ce8:	071b      	lsls	r3, r3, #28
 8011cea:	d501      	bpl.n	8011cf0 <_vfiprintf_r+0x3c>
 8011cec:	692b      	ldr	r3, [r5, #16]
 8011cee:	b9eb      	cbnz	r3, 8011d2c <_vfiprintf_r+0x78>
 8011cf0:	4629      	mov	r1, r5
 8011cf2:	4630      	mov	r0, r6
 8011cf4:	f001 febe 	bl	8013a74 <__swsetup_r>
 8011cf8:	b1c0      	cbz	r0, 8011d2c <_vfiprintf_r+0x78>
 8011cfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011cfc:	07dc      	lsls	r4, r3, #31
 8011cfe:	d50e      	bpl.n	8011d1e <_vfiprintf_r+0x6a>
 8011d00:	f04f 30ff 	mov.w	r0, #4294967295
 8011d04:	b01d      	add	sp, #116	; 0x74
 8011d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d0a:	4b7b      	ldr	r3, [pc, #492]	; (8011ef8 <_vfiprintf_r+0x244>)
 8011d0c:	429d      	cmp	r5, r3
 8011d0e:	d101      	bne.n	8011d14 <_vfiprintf_r+0x60>
 8011d10:	68b5      	ldr	r5, [r6, #8]
 8011d12:	e7df      	b.n	8011cd4 <_vfiprintf_r+0x20>
 8011d14:	4b79      	ldr	r3, [pc, #484]	; (8011efc <_vfiprintf_r+0x248>)
 8011d16:	429d      	cmp	r5, r3
 8011d18:	bf08      	it	eq
 8011d1a:	68f5      	ldreq	r5, [r6, #12]
 8011d1c:	e7da      	b.n	8011cd4 <_vfiprintf_r+0x20>
 8011d1e:	89ab      	ldrh	r3, [r5, #12]
 8011d20:	0598      	lsls	r0, r3, #22
 8011d22:	d4ed      	bmi.n	8011d00 <_vfiprintf_r+0x4c>
 8011d24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011d26:	f003 fabf 	bl	80152a8 <__retarget_lock_release_recursive>
 8011d2a:	e7e9      	b.n	8011d00 <_vfiprintf_r+0x4c>
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8011d30:	2320      	movs	r3, #32
 8011d32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011d36:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d3a:	2330      	movs	r3, #48	; 0x30
 8011d3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011f00 <_vfiprintf_r+0x24c>
 8011d40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011d44:	f04f 0901 	mov.w	r9, #1
 8011d48:	4623      	mov	r3, r4
 8011d4a:	469a      	mov	sl, r3
 8011d4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d50:	b10a      	cbz	r2, 8011d56 <_vfiprintf_r+0xa2>
 8011d52:	2a25      	cmp	r2, #37	; 0x25
 8011d54:	d1f9      	bne.n	8011d4a <_vfiprintf_r+0x96>
 8011d56:	ebba 0b04 	subs.w	fp, sl, r4
 8011d5a:	d00b      	beq.n	8011d74 <_vfiprintf_r+0xc0>
 8011d5c:	465b      	mov	r3, fp
 8011d5e:	4622      	mov	r2, r4
 8011d60:	4629      	mov	r1, r5
 8011d62:	4630      	mov	r0, r6
 8011d64:	f7ff ff93 	bl	8011c8e <__sfputs_r>
 8011d68:	3001      	adds	r0, #1
 8011d6a:	f000 80aa 	beq.w	8011ec2 <_vfiprintf_r+0x20e>
 8011d6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011d70:	445a      	add	r2, fp
 8011d72:	9209      	str	r2, [sp, #36]	; 0x24
 8011d74:	f89a 3000 	ldrb.w	r3, [sl]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	f000 80a2 	beq.w	8011ec2 <_vfiprintf_r+0x20e>
 8011d7e:	2300      	movs	r3, #0
 8011d80:	f04f 32ff 	mov.w	r2, #4294967295
 8011d84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011d88:	f10a 0a01 	add.w	sl, sl, #1
 8011d8c:	9304      	str	r3, [sp, #16]
 8011d8e:	9307      	str	r3, [sp, #28]
 8011d90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011d94:	931a      	str	r3, [sp, #104]	; 0x68
 8011d96:	4654      	mov	r4, sl
 8011d98:	2205      	movs	r2, #5
 8011d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d9e:	4858      	ldr	r0, [pc, #352]	; (8011f00 <_vfiprintf_r+0x24c>)
 8011da0:	f7ee fa36 	bl	8000210 <memchr>
 8011da4:	9a04      	ldr	r2, [sp, #16]
 8011da6:	b9d8      	cbnz	r0, 8011de0 <_vfiprintf_r+0x12c>
 8011da8:	06d1      	lsls	r1, r2, #27
 8011daa:	bf44      	itt	mi
 8011dac:	2320      	movmi	r3, #32
 8011dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011db2:	0713      	lsls	r3, r2, #28
 8011db4:	bf44      	itt	mi
 8011db6:	232b      	movmi	r3, #43	; 0x2b
 8011db8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011dbc:	f89a 3000 	ldrb.w	r3, [sl]
 8011dc0:	2b2a      	cmp	r3, #42	; 0x2a
 8011dc2:	d015      	beq.n	8011df0 <_vfiprintf_r+0x13c>
 8011dc4:	9a07      	ldr	r2, [sp, #28]
 8011dc6:	4654      	mov	r4, sl
 8011dc8:	2000      	movs	r0, #0
 8011dca:	f04f 0c0a 	mov.w	ip, #10
 8011dce:	4621      	mov	r1, r4
 8011dd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011dd4:	3b30      	subs	r3, #48	; 0x30
 8011dd6:	2b09      	cmp	r3, #9
 8011dd8:	d94e      	bls.n	8011e78 <_vfiprintf_r+0x1c4>
 8011dda:	b1b0      	cbz	r0, 8011e0a <_vfiprintf_r+0x156>
 8011ddc:	9207      	str	r2, [sp, #28]
 8011dde:	e014      	b.n	8011e0a <_vfiprintf_r+0x156>
 8011de0:	eba0 0308 	sub.w	r3, r0, r8
 8011de4:	fa09 f303 	lsl.w	r3, r9, r3
 8011de8:	4313      	orrs	r3, r2
 8011dea:	9304      	str	r3, [sp, #16]
 8011dec:	46a2      	mov	sl, r4
 8011dee:	e7d2      	b.n	8011d96 <_vfiprintf_r+0xe2>
 8011df0:	9b03      	ldr	r3, [sp, #12]
 8011df2:	1d19      	adds	r1, r3, #4
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	9103      	str	r1, [sp, #12]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	bfbb      	ittet	lt
 8011dfc:	425b      	neglt	r3, r3
 8011dfe:	f042 0202 	orrlt.w	r2, r2, #2
 8011e02:	9307      	strge	r3, [sp, #28]
 8011e04:	9307      	strlt	r3, [sp, #28]
 8011e06:	bfb8      	it	lt
 8011e08:	9204      	strlt	r2, [sp, #16]
 8011e0a:	7823      	ldrb	r3, [r4, #0]
 8011e0c:	2b2e      	cmp	r3, #46	; 0x2e
 8011e0e:	d10c      	bne.n	8011e2a <_vfiprintf_r+0x176>
 8011e10:	7863      	ldrb	r3, [r4, #1]
 8011e12:	2b2a      	cmp	r3, #42	; 0x2a
 8011e14:	d135      	bne.n	8011e82 <_vfiprintf_r+0x1ce>
 8011e16:	9b03      	ldr	r3, [sp, #12]
 8011e18:	1d1a      	adds	r2, r3, #4
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	9203      	str	r2, [sp, #12]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	bfb8      	it	lt
 8011e22:	f04f 33ff 	movlt.w	r3, #4294967295
 8011e26:	3402      	adds	r4, #2
 8011e28:	9305      	str	r3, [sp, #20]
 8011e2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011f10 <_vfiprintf_r+0x25c>
 8011e2e:	7821      	ldrb	r1, [r4, #0]
 8011e30:	2203      	movs	r2, #3
 8011e32:	4650      	mov	r0, sl
 8011e34:	f7ee f9ec 	bl	8000210 <memchr>
 8011e38:	b140      	cbz	r0, 8011e4c <_vfiprintf_r+0x198>
 8011e3a:	2340      	movs	r3, #64	; 0x40
 8011e3c:	eba0 000a 	sub.w	r0, r0, sl
 8011e40:	fa03 f000 	lsl.w	r0, r3, r0
 8011e44:	9b04      	ldr	r3, [sp, #16]
 8011e46:	4303      	orrs	r3, r0
 8011e48:	3401      	adds	r4, #1
 8011e4a:	9304      	str	r3, [sp, #16]
 8011e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e50:	482c      	ldr	r0, [pc, #176]	; (8011f04 <_vfiprintf_r+0x250>)
 8011e52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011e56:	2206      	movs	r2, #6
 8011e58:	f7ee f9da 	bl	8000210 <memchr>
 8011e5c:	2800      	cmp	r0, #0
 8011e5e:	d03f      	beq.n	8011ee0 <_vfiprintf_r+0x22c>
 8011e60:	4b29      	ldr	r3, [pc, #164]	; (8011f08 <_vfiprintf_r+0x254>)
 8011e62:	bb1b      	cbnz	r3, 8011eac <_vfiprintf_r+0x1f8>
 8011e64:	9b03      	ldr	r3, [sp, #12]
 8011e66:	3307      	adds	r3, #7
 8011e68:	f023 0307 	bic.w	r3, r3, #7
 8011e6c:	3308      	adds	r3, #8
 8011e6e:	9303      	str	r3, [sp, #12]
 8011e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e72:	443b      	add	r3, r7
 8011e74:	9309      	str	r3, [sp, #36]	; 0x24
 8011e76:	e767      	b.n	8011d48 <_vfiprintf_r+0x94>
 8011e78:	fb0c 3202 	mla	r2, ip, r2, r3
 8011e7c:	460c      	mov	r4, r1
 8011e7e:	2001      	movs	r0, #1
 8011e80:	e7a5      	b.n	8011dce <_vfiprintf_r+0x11a>
 8011e82:	2300      	movs	r3, #0
 8011e84:	3401      	adds	r4, #1
 8011e86:	9305      	str	r3, [sp, #20]
 8011e88:	4619      	mov	r1, r3
 8011e8a:	f04f 0c0a 	mov.w	ip, #10
 8011e8e:	4620      	mov	r0, r4
 8011e90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e94:	3a30      	subs	r2, #48	; 0x30
 8011e96:	2a09      	cmp	r2, #9
 8011e98:	d903      	bls.n	8011ea2 <_vfiprintf_r+0x1ee>
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d0c5      	beq.n	8011e2a <_vfiprintf_r+0x176>
 8011e9e:	9105      	str	r1, [sp, #20]
 8011ea0:	e7c3      	b.n	8011e2a <_vfiprintf_r+0x176>
 8011ea2:	fb0c 2101 	mla	r1, ip, r1, r2
 8011ea6:	4604      	mov	r4, r0
 8011ea8:	2301      	movs	r3, #1
 8011eaa:	e7f0      	b.n	8011e8e <_vfiprintf_r+0x1da>
 8011eac:	ab03      	add	r3, sp, #12
 8011eae:	9300      	str	r3, [sp, #0]
 8011eb0:	462a      	mov	r2, r5
 8011eb2:	4b16      	ldr	r3, [pc, #88]	; (8011f0c <_vfiprintf_r+0x258>)
 8011eb4:	a904      	add	r1, sp, #16
 8011eb6:	4630      	mov	r0, r6
 8011eb8:	f000 f8cc 	bl	8012054 <_printf_float>
 8011ebc:	4607      	mov	r7, r0
 8011ebe:	1c78      	adds	r0, r7, #1
 8011ec0:	d1d6      	bne.n	8011e70 <_vfiprintf_r+0x1bc>
 8011ec2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011ec4:	07d9      	lsls	r1, r3, #31
 8011ec6:	d405      	bmi.n	8011ed4 <_vfiprintf_r+0x220>
 8011ec8:	89ab      	ldrh	r3, [r5, #12]
 8011eca:	059a      	lsls	r2, r3, #22
 8011ecc:	d402      	bmi.n	8011ed4 <_vfiprintf_r+0x220>
 8011ece:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011ed0:	f003 f9ea 	bl	80152a8 <__retarget_lock_release_recursive>
 8011ed4:	89ab      	ldrh	r3, [r5, #12]
 8011ed6:	065b      	lsls	r3, r3, #25
 8011ed8:	f53f af12 	bmi.w	8011d00 <_vfiprintf_r+0x4c>
 8011edc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011ede:	e711      	b.n	8011d04 <_vfiprintf_r+0x50>
 8011ee0:	ab03      	add	r3, sp, #12
 8011ee2:	9300      	str	r3, [sp, #0]
 8011ee4:	462a      	mov	r2, r5
 8011ee6:	4b09      	ldr	r3, [pc, #36]	; (8011f0c <_vfiprintf_r+0x258>)
 8011ee8:	a904      	add	r1, sp, #16
 8011eea:	4630      	mov	r0, r6
 8011eec:	f000 fb56 	bl	801259c <_printf_i>
 8011ef0:	e7e4      	b.n	8011ebc <_vfiprintf_r+0x208>
 8011ef2:	bf00      	nop
 8011ef4:	080183d4 	.word	0x080183d4
 8011ef8:	080183f4 	.word	0x080183f4
 8011efc:	080183b4 	.word	0x080183b4
 8011f00:	08018280 	.word	0x08018280
 8011f04:	0801828a 	.word	0x0801828a
 8011f08:	08012055 	.word	0x08012055
 8011f0c:	08011c8f 	.word	0x08011c8f
 8011f10:	08018286 	.word	0x08018286

08011f14 <__cvt>:
 8011f14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f18:	ec55 4b10 	vmov	r4, r5, d0
 8011f1c:	2d00      	cmp	r5, #0
 8011f1e:	460e      	mov	r6, r1
 8011f20:	4619      	mov	r1, r3
 8011f22:	462b      	mov	r3, r5
 8011f24:	bfbb      	ittet	lt
 8011f26:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011f2a:	461d      	movlt	r5, r3
 8011f2c:	2300      	movge	r3, #0
 8011f2e:	232d      	movlt	r3, #45	; 0x2d
 8011f30:	700b      	strb	r3, [r1, #0]
 8011f32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011f34:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011f38:	4691      	mov	r9, r2
 8011f3a:	f023 0820 	bic.w	r8, r3, #32
 8011f3e:	bfbc      	itt	lt
 8011f40:	4622      	movlt	r2, r4
 8011f42:	4614      	movlt	r4, r2
 8011f44:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011f48:	d005      	beq.n	8011f56 <__cvt+0x42>
 8011f4a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011f4e:	d100      	bne.n	8011f52 <__cvt+0x3e>
 8011f50:	3601      	adds	r6, #1
 8011f52:	2102      	movs	r1, #2
 8011f54:	e000      	b.n	8011f58 <__cvt+0x44>
 8011f56:	2103      	movs	r1, #3
 8011f58:	ab03      	add	r3, sp, #12
 8011f5a:	9301      	str	r3, [sp, #4]
 8011f5c:	ab02      	add	r3, sp, #8
 8011f5e:	9300      	str	r3, [sp, #0]
 8011f60:	ec45 4b10 	vmov	d0, r4, r5
 8011f64:	4653      	mov	r3, sl
 8011f66:	4632      	mov	r2, r6
 8011f68:	f001 fe86 	bl	8013c78 <_dtoa_r>
 8011f6c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011f70:	4607      	mov	r7, r0
 8011f72:	d102      	bne.n	8011f7a <__cvt+0x66>
 8011f74:	f019 0f01 	tst.w	r9, #1
 8011f78:	d022      	beq.n	8011fc0 <__cvt+0xac>
 8011f7a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011f7e:	eb07 0906 	add.w	r9, r7, r6
 8011f82:	d110      	bne.n	8011fa6 <__cvt+0x92>
 8011f84:	783b      	ldrb	r3, [r7, #0]
 8011f86:	2b30      	cmp	r3, #48	; 0x30
 8011f88:	d10a      	bne.n	8011fa0 <__cvt+0x8c>
 8011f8a:	2200      	movs	r2, #0
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	4620      	mov	r0, r4
 8011f90:	4629      	mov	r1, r5
 8011f92:	f7ee fdb1 	bl	8000af8 <__aeabi_dcmpeq>
 8011f96:	b918      	cbnz	r0, 8011fa0 <__cvt+0x8c>
 8011f98:	f1c6 0601 	rsb	r6, r6, #1
 8011f9c:	f8ca 6000 	str.w	r6, [sl]
 8011fa0:	f8da 3000 	ldr.w	r3, [sl]
 8011fa4:	4499      	add	r9, r3
 8011fa6:	2200      	movs	r2, #0
 8011fa8:	2300      	movs	r3, #0
 8011faa:	4620      	mov	r0, r4
 8011fac:	4629      	mov	r1, r5
 8011fae:	f7ee fda3 	bl	8000af8 <__aeabi_dcmpeq>
 8011fb2:	b108      	cbz	r0, 8011fb8 <__cvt+0xa4>
 8011fb4:	f8cd 900c 	str.w	r9, [sp, #12]
 8011fb8:	2230      	movs	r2, #48	; 0x30
 8011fba:	9b03      	ldr	r3, [sp, #12]
 8011fbc:	454b      	cmp	r3, r9
 8011fbe:	d307      	bcc.n	8011fd0 <__cvt+0xbc>
 8011fc0:	9b03      	ldr	r3, [sp, #12]
 8011fc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011fc4:	1bdb      	subs	r3, r3, r7
 8011fc6:	4638      	mov	r0, r7
 8011fc8:	6013      	str	r3, [r2, #0]
 8011fca:	b004      	add	sp, #16
 8011fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fd0:	1c59      	adds	r1, r3, #1
 8011fd2:	9103      	str	r1, [sp, #12]
 8011fd4:	701a      	strb	r2, [r3, #0]
 8011fd6:	e7f0      	b.n	8011fba <__cvt+0xa6>

08011fd8 <__exponent>:
 8011fd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011fda:	4603      	mov	r3, r0
 8011fdc:	2900      	cmp	r1, #0
 8011fde:	bfb8      	it	lt
 8011fe0:	4249      	neglt	r1, r1
 8011fe2:	f803 2b02 	strb.w	r2, [r3], #2
 8011fe6:	bfb4      	ite	lt
 8011fe8:	222d      	movlt	r2, #45	; 0x2d
 8011fea:	222b      	movge	r2, #43	; 0x2b
 8011fec:	2909      	cmp	r1, #9
 8011fee:	7042      	strb	r2, [r0, #1]
 8011ff0:	dd2a      	ble.n	8012048 <__exponent+0x70>
 8011ff2:	f10d 0407 	add.w	r4, sp, #7
 8011ff6:	46a4      	mov	ip, r4
 8011ff8:	270a      	movs	r7, #10
 8011ffa:	46a6      	mov	lr, r4
 8011ffc:	460a      	mov	r2, r1
 8011ffe:	fb91 f6f7 	sdiv	r6, r1, r7
 8012002:	fb07 1516 	mls	r5, r7, r6, r1
 8012006:	3530      	adds	r5, #48	; 0x30
 8012008:	2a63      	cmp	r2, #99	; 0x63
 801200a:	f104 34ff 	add.w	r4, r4, #4294967295
 801200e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012012:	4631      	mov	r1, r6
 8012014:	dcf1      	bgt.n	8011ffa <__exponent+0x22>
 8012016:	3130      	adds	r1, #48	; 0x30
 8012018:	f1ae 0502 	sub.w	r5, lr, #2
 801201c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012020:	1c44      	adds	r4, r0, #1
 8012022:	4629      	mov	r1, r5
 8012024:	4561      	cmp	r1, ip
 8012026:	d30a      	bcc.n	801203e <__exponent+0x66>
 8012028:	f10d 0209 	add.w	r2, sp, #9
 801202c:	eba2 020e 	sub.w	r2, r2, lr
 8012030:	4565      	cmp	r5, ip
 8012032:	bf88      	it	hi
 8012034:	2200      	movhi	r2, #0
 8012036:	4413      	add	r3, r2
 8012038:	1a18      	subs	r0, r3, r0
 801203a:	b003      	add	sp, #12
 801203c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801203e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012042:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012046:	e7ed      	b.n	8012024 <__exponent+0x4c>
 8012048:	2330      	movs	r3, #48	; 0x30
 801204a:	3130      	adds	r1, #48	; 0x30
 801204c:	7083      	strb	r3, [r0, #2]
 801204e:	70c1      	strb	r1, [r0, #3]
 8012050:	1d03      	adds	r3, r0, #4
 8012052:	e7f1      	b.n	8012038 <__exponent+0x60>

08012054 <_printf_float>:
 8012054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012058:	ed2d 8b02 	vpush	{d8}
 801205c:	b08d      	sub	sp, #52	; 0x34
 801205e:	460c      	mov	r4, r1
 8012060:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012064:	4616      	mov	r6, r2
 8012066:	461f      	mov	r7, r3
 8012068:	4605      	mov	r5, r0
 801206a:	f003 f917 	bl	801529c <_localeconv_r>
 801206e:	f8d0 a000 	ldr.w	sl, [r0]
 8012072:	4650      	mov	r0, sl
 8012074:	f7ee f8be 	bl	80001f4 <strlen>
 8012078:	2300      	movs	r3, #0
 801207a:	930a      	str	r3, [sp, #40]	; 0x28
 801207c:	6823      	ldr	r3, [r4, #0]
 801207e:	9305      	str	r3, [sp, #20]
 8012080:	f8d8 3000 	ldr.w	r3, [r8]
 8012084:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012088:	3307      	adds	r3, #7
 801208a:	f023 0307 	bic.w	r3, r3, #7
 801208e:	f103 0208 	add.w	r2, r3, #8
 8012092:	f8c8 2000 	str.w	r2, [r8]
 8012096:	e9d3 2300 	ldrd	r2, r3, [r3]
 801209a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801209e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80120a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80120a6:	9307      	str	r3, [sp, #28]
 80120a8:	f8cd 8018 	str.w	r8, [sp, #24]
 80120ac:	ee08 0a10 	vmov	s16, r0
 80120b0:	4b9f      	ldr	r3, [pc, #636]	; (8012330 <_printf_float+0x2dc>)
 80120b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80120b6:	f04f 32ff 	mov.w	r2, #4294967295
 80120ba:	f7ee fd4f 	bl	8000b5c <__aeabi_dcmpun>
 80120be:	bb88      	cbnz	r0, 8012124 <_printf_float+0xd0>
 80120c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80120c4:	4b9a      	ldr	r3, [pc, #616]	; (8012330 <_printf_float+0x2dc>)
 80120c6:	f04f 32ff 	mov.w	r2, #4294967295
 80120ca:	f7ee fd29 	bl	8000b20 <__aeabi_dcmple>
 80120ce:	bb48      	cbnz	r0, 8012124 <_printf_float+0xd0>
 80120d0:	2200      	movs	r2, #0
 80120d2:	2300      	movs	r3, #0
 80120d4:	4640      	mov	r0, r8
 80120d6:	4649      	mov	r1, r9
 80120d8:	f7ee fd18 	bl	8000b0c <__aeabi_dcmplt>
 80120dc:	b110      	cbz	r0, 80120e4 <_printf_float+0x90>
 80120de:	232d      	movs	r3, #45	; 0x2d
 80120e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80120e4:	4b93      	ldr	r3, [pc, #588]	; (8012334 <_printf_float+0x2e0>)
 80120e6:	4894      	ldr	r0, [pc, #592]	; (8012338 <_printf_float+0x2e4>)
 80120e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80120ec:	bf94      	ite	ls
 80120ee:	4698      	movls	r8, r3
 80120f0:	4680      	movhi	r8, r0
 80120f2:	2303      	movs	r3, #3
 80120f4:	6123      	str	r3, [r4, #16]
 80120f6:	9b05      	ldr	r3, [sp, #20]
 80120f8:	f023 0204 	bic.w	r2, r3, #4
 80120fc:	6022      	str	r2, [r4, #0]
 80120fe:	f04f 0900 	mov.w	r9, #0
 8012102:	9700      	str	r7, [sp, #0]
 8012104:	4633      	mov	r3, r6
 8012106:	aa0b      	add	r2, sp, #44	; 0x2c
 8012108:	4621      	mov	r1, r4
 801210a:	4628      	mov	r0, r5
 801210c:	f000 f9d8 	bl	80124c0 <_printf_common>
 8012110:	3001      	adds	r0, #1
 8012112:	f040 8090 	bne.w	8012236 <_printf_float+0x1e2>
 8012116:	f04f 30ff 	mov.w	r0, #4294967295
 801211a:	b00d      	add	sp, #52	; 0x34
 801211c:	ecbd 8b02 	vpop	{d8}
 8012120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012124:	4642      	mov	r2, r8
 8012126:	464b      	mov	r3, r9
 8012128:	4640      	mov	r0, r8
 801212a:	4649      	mov	r1, r9
 801212c:	f7ee fd16 	bl	8000b5c <__aeabi_dcmpun>
 8012130:	b140      	cbz	r0, 8012144 <_printf_float+0xf0>
 8012132:	464b      	mov	r3, r9
 8012134:	2b00      	cmp	r3, #0
 8012136:	bfbc      	itt	lt
 8012138:	232d      	movlt	r3, #45	; 0x2d
 801213a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801213e:	487f      	ldr	r0, [pc, #508]	; (801233c <_printf_float+0x2e8>)
 8012140:	4b7f      	ldr	r3, [pc, #508]	; (8012340 <_printf_float+0x2ec>)
 8012142:	e7d1      	b.n	80120e8 <_printf_float+0x94>
 8012144:	6863      	ldr	r3, [r4, #4]
 8012146:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801214a:	9206      	str	r2, [sp, #24]
 801214c:	1c5a      	adds	r2, r3, #1
 801214e:	d13f      	bne.n	80121d0 <_printf_float+0x17c>
 8012150:	2306      	movs	r3, #6
 8012152:	6063      	str	r3, [r4, #4]
 8012154:	9b05      	ldr	r3, [sp, #20]
 8012156:	6861      	ldr	r1, [r4, #4]
 8012158:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801215c:	2300      	movs	r3, #0
 801215e:	9303      	str	r3, [sp, #12]
 8012160:	ab0a      	add	r3, sp, #40	; 0x28
 8012162:	e9cd b301 	strd	fp, r3, [sp, #4]
 8012166:	ab09      	add	r3, sp, #36	; 0x24
 8012168:	ec49 8b10 	vmov	d0, r8, r9
 801216c:	9300      	str	r3, [sp, #0]
 801216e:	6022      	str	r2, [r4, #0]
 8012170:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012174:	4628      	mov	r0, r5
 8012176:	f7ff fecd 	bl	8011f14 <__cvt>
 801217a:	9b06      	ldr	r3, [sp, #24]
 801217c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801217e:	2b47      	cmp	r3, #71	; 0x47
 8012180:	4680      	mov	r8, r0
 8012182:	d108      	bne.n	8012196 <_printf_float+0x142>
 8012184:	1cc8      	adds	r0, r1, #3
 8012186:	db02      	blt.n	801218e <_printf_float+0x13a>
 8012188:	6863      	ldr	r3, [r4, #4]
 801218a:	4299      	cmp	r1, r3
 801218c:	dd41      	ble.n	8012212 <_printf_float+0x1be>
 801218e:	f1ab 0b02 	sub.w	fp, fp, #2
 8012192:	fa5f fb8b 	uxtb.w	fp, fp
 8012196:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801219a:	d820      	bhi.n	80121de <_printf_float+0x18a>
 801219c:	3901      	subs	r1, #1
 801219e:	465a      	mov	r2, fp
 80121a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80121a4:	9109      	str	r1, [sp, #36]	; 0x24
 80121a6:	f7ff ff17 	bl	8011fd8 <__exponent>
 80121aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80121ac:	1813      	adds	r3, r2, r0
 80121ae:	2a01      	cmp	r2, #1
 80121b0:	4681      	mov	r9, r0
 80121b2:	6123      	str	r3, [r4, #16]
 80121b4:	dc02      	bgt.n	80121bc <_printf_float+0x168>
 80121b6:	6822      	ldr	r2, [r4, #0]
 80121b8:	07d2      	lsls	r2, r2, #31
 80121ba:	d501      	bpl.n	80121c0 <_printf_float+0x16c>
 80121bc:	3301      	adds	r3, #1
 80121be:	6123      	str	r3, [r4, #16]
 80121c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d09c      	beq.n	8012102 <_printf_float+0xae>
 80121c8:	232d      	movs	r3, #45	; 0x2d
 80121ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80121ce:	e798      	b.n	8012102 <_printf_float+0xae>
 80121d0:	9a06      	ldr	r2, [sp, #24]
 80121d2:	2a47      	cmp	r2, #71	; 0x47
 80121d4:	d1be      	bne.n	8012154 <_printf_float+0x100>
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d1bc      	bne.n	8012154 <_printf_float+0x100>
 80121da:	2301      	movs	r3, #1
 80121dc:	e7b9      	b.n	8012152 <_printf_float+0xfe>
 80121de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80121e2:	d118      	bne.n	8012216 <_printf_float+0x1c2>
 80121e4:	2900      	cmp	r1, #0
 80121e6:	6863      	ldr	r3, [r4, #4]
 80121e8:	dd0b      	ble.n	8012202 <_printf_float+0x1ae>
 80121ea:	6121      	str	r1, [r4, #16]
 80121ec:	b913      	cbnz	r3, 80121f4 <_printf_float+0x1a0>
 80121ee:	6822      	ldr	r2, [r4, #0]
 80121f0:	07d0      	lsls	r0, r2, #31
 80121f2:	d502      	bpl.n	80121fa <_printf_float+0x1a6>
 80121f4:	3301      	adds	r3, #1
 80121f6:	440b      	add	r3, r1
 80121f8:	6123      	str	r3, [r4, #16]
 80121fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80121fc:	f04f 0900 	mov.w	r9, #0
 8012200:	e7de      	b.n	80121c0 <_printf_float+0x16c>
 8012202:	b913      	cbnz	r3, 801220a <_printf_float+0x1b6>
 8012204:	6822      	ldr	r2, [r4, #0]
 8012206:	07d2      	lsls	r2, r2, #31
 8012208:	d501      	bpl.n	801220e <_printf_float+0x1ba>
 801220a:	3302      	adds	r3, #2
 801220c:	e7f4      	b.n	80121f8 <_printf_float+0x1a4>
 801220e:	2301      	movs	r3, #1
 8012210:	e7f2      	b.n	80121f8 <_printf_float+0x1a4>
 8012212:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012218:	4299      	cmp	r1, r3
 801221a:	db05      	blt.n	8012228 <_printf_float+0x1d4>
 801221c:	6823      	ldr	r3, [r4, #0]
 801221e:	6121      	str	r1, [r4, #16]
 8012220:	07d8      	lsls	r0, r3, #31
 8012222:	d5ea      	bpl.n	80121fa <_printf_float+0x1a6>
 8012224:	1c4b      	adds	r3, r1, #1
 8012226:	e7e7      	b.n	80121f8 <_printf_float+0x1a4>
 8012228:	2900      	cmp	r1, #0
 801222a:	bfd4      	ite	le
 801222c:	f1c1 0202 	rsble	r2, r1, #2
 8012230:	2201      	movgt	r2, #1
 8012232:	4413      	add	r3, r2
 8012234:	e7e0      	b.n	80121f8 <_printf_float+0x1a4>
 8012236:	6823      	ldr	r3, [r4, #0]
 8012238:	055a      	lsls	r2, r3, #21
 801223a:	d407      	bmi.n	801224c <_printf_float+0x1f8>
 801223c:	6923      	ldr	r3, [r4, #16]
 801223e:	4642      	mov	r2, r8
 8012240:	4631      	mov	r1, r6
 8012242:	4628      	mov	r0, r5
 8012244:	47b8      	blx	r7
 8012246:	3001      	adds	r0, #1
 8012248:	d12c      	bne.n	80122a4 <_printf_float+0x250>
 801224a:	e764      	b.n	8012116 <_printf_float+0xc2>
 801224c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012250:	f240 80e0 	bls.w	8012414 <_printf_float+0x3c0>
 8012254:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012258:	2200      	movs	r2, #0
 801225a:	2300      	movs	r3, #0
 801225c:	f7ee fc4c 	bl	8000af8 <__aeabi_dcmpeq>
 8012260:	2800      	cmp	r0, #0
 8012262:	d034      	beq.n	80122ce <_printf_float+0x27a>
 8012264:	4a37      	ldr	r2, [pc, #220]	; (8012344 <_printf_float+0x2f0>)
 8012266:	2301      	movs	r3, #1
 8012268:	4631      	mov	r1, r6
 801226a:	4628      	mov	r0, r5
 801226c:	47b8      	blx	r7
 801226e:	3001      	adds	r0, #1
 8012270:	f43f af51 	beq.w	8012116 <_printf_float+0xc2>
 8012274:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012278:	429a      	cmp	r2, r3
 801227a:	db02      	blt.n	8012282 <_printf_float+0x22e>
 801227c:	6823      	ldr	r3, [r4, #0]
 801227e:	07d8      	lsls	r0, r3, #31
 8012280:	d510      	bpl.n	80122a4 <_printf_float+0x250>
 8012282:	ee18 3a10 	vmov	r3, s16
 8012286:	4652      	mov	r2, sl
 8012288:	4631      	mov	r1, r6
 801228a:	4628      	mov	r0, r5
 801228c:	47b8      	blx	r7
 801228e:	3001      	adds	r0, #1
 8012290:	f43f af41 	beq.w	8012116 <_printf_float+0xc2>
 8012294:	f04f 0800 	mov.w	r8, #0
 8012298:	f104 091a 	add.w	r9, r4, #26
 801229c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801229e:	3b01      	subs	r3, #1
 80122a0:	4543      	cmp	r3, r8
 80122a2:	dc09      	bgt.n	80122b8 <_printf_float+0x264>
 80122a4:	6823      	ldr	r3, [r4, #0]
 80122a6:	079b      	lsls	r3, r3, #30
 80122a8:	f100 8105 	bmi.w	80124b6 <_printf_float+0x462>
 80122ac:	68e0      	ldr	r0, [r4, #12]
 80122ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80122b0:	4298      	cmp	r0, r3
 80122b2:	bfb8      	it	lt
 80122b4:	4618      	movlt	r0, r3
 80122b6:	e730      	b.n	801211a <_printf_float+0xc6>
 80122b8:	2301      	movs	r3, #1
 80122ba:	464a      	mov	r2, r9
 80122bc:	4631      	mov	r1, r6
 80122be:	4628      	mov	r0, r5
 80122c0:	47b8      	blx	r7
 80122c2:	3001      	adds	r0, #1
 80122c4:	f43f af27 	beq.w	8012116 <_printf_float+0xc2>
 80122c8:	f108 0801 	add.w	r8, r8, #1
 80122cc:	e7e6      	b.n	801229c <_printf_float+0x248>
 80122ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	dc39      	bgt.n	8012348 <_printf_float+0x2f4>
 80122d4:	4a1b      	ldr	r2, [pc, #108]	; (8012344 <_printf_float+0x2f0>)
 80122d6:	2301      	movs	r3, #1
 80122d8:	4631      	mov	r1, r6
 80122da:	4628      	mov	r0, r5
 80122dc:	47b8      	blx	r7
 80122de:	3001      	adds	r0, #1
 80122e0:	f43f af19 	beq.w	8012116 <_printf_float+0xc2>
 80122e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80122e8:	4313      	orrs	r3, r2
 80122ea:	d102      	bne.n	80122f2 <_printf_float+0x29e>
 80122ec:	6823      	ldr	r3, [r4, #0]
 80122ee:	07d9      	lsls	r1, r3, #31
 80122f0:	d5d8      	bpl.n	80122a4 <_printf_float+0x250>
 80122f2:	ee18 3a10 	vmov	r3, s16
 80122f6:	4652      	mov	r2, sl
 80122f8:	4631      	mov	r1, r6
 80122fa:	4628      	mov	r0, r5
 80122fc:	47b8      	blx	r7
 80122fe:	3001      	adds	r0, #1
 8012300:	f43f af09 	beq.w	8012116 <_printf_float+0xc2>
 8012304:	f04f 0900 	mov.w	r9, #0
 8012308:	f104 0a1a 	add.w	sl, r4, #26
 801230c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801230e:	425b      	negs	r3, r3
 8012310:	454b      	cmp	r3, r9
 8012312:	dc01      	bgt.n	8012318 <_printf_float+0x2c4>
 8012314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012316:	e792      	b.n	801223e <_printf_float+0x1ea>
 8012318:	2301      	movs	r3, #1
 801231a:	4652      	mov	r2, sl
 801231c:	4631      	mov	r1, r6
 801231e:	4628      	mov	r0, r5
 8012320:	47b8      	blx	r7
 8012322:	3001      	adds	r0, #1
 8012324:	f43f aef7 	beq.w	8012116 <_printf_float+0xc2>
 8012328:	f109 0901 	add.w	r9, r9, #1
 801232c:	e7ee      	b.n	801230c <_printf_float+0x2b8>
 801232e:	bf00      	nop
 8012330:	7fefffff 	.word	0x7fefffff
 8012334:	08018291 	.word	0x08018291
 8012338:	08018295 	.word	0x08018295
 801233c:	0801829d 	.word	0x0801829d
 8012340:	08018299 	.word	0x08018299
 8012344:	080182a1 	.word	0x080182a1
 8012348:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801234a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801234c:	429a      	cmp	r2, r3
 801234e:	bfa8      	it	ge
 8012350:	461a      	movge	r2, r3
 8012352:	2a00      	cmp	r2, #0
 8012354:	4691      	mov	r9, r2
 8012356:	dc37      	bgt.n	80123c8 <_printf_float+0x374>
 8012358:	f04f 0b00 	mov.w	fp, #0
 801235c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012360:	f104 021a 	add.w	r2, r4, #26
 8012364:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012366:	9305      	str	r3, [sp, #20]
 8012368:	eba3 0309 	sub.w	r3, r3, r9
 801236c:	455b      	cmp	r3, fp
 801236e:	dc33      	bgt.n	80123d8 <_printf_float+0x384>
 8012370:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012374:	429a      	cmp	r2, r3
 8012376:	db3b      	blt.n	80123f0 <_printf_float+0x39c>
 8012378:	6823      	ldr	r3, [r4, #0]
 801237a:	07da      	lsls	r2, r3, #31
 801237c:	d438      	bmi.n	80123f0 <_printf_float+0x39c>
 801237e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012380:	9b05      	ldr	r3, [sp, #20]
 8012382:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012384:	1ad3      	subs	r3, r2, r3
 8012386:	eba2 0901 	sub.w	r9, r2, r1
 801238a:	4599      	cmp	r9, r3
 801238c:	bfa8      	it	ge
 801238e:	4699      	movge	r9, r3
 8012390:	f1b9 0f00 	cmp.w	r9, #0
 8012394:	dc35      	bgt.n	8012402 <_printf_float+0x3ae>
 8012396:	f04f 0800 	mov.w	r8, #0
 801239a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801239e:	f104 0a1a 	add.w	sl, r4, #26
 80123a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80123a6:	1a9b      	subs	r3, r3, r2
 80123a8:	eba3 0309 	sub.w	r3, r3, r9
 80123ac:	4543      	cmp	r3, r8
 80123ae:	f77f af79 	ble.w	80122a4 <_printf_float+0x250>
 80123b2:	2301      	movs	r3, #1
 80123b4:	4652      	mov	r2, sl
 80123b6:	4631      	mov	r1, r6
 80123b8:	4628      	mov	r0, r5
 80123ba:	47b8      	blx	r7
 80123bc:	3001      	adds	r0, #1
 80123be:	f43f aeaa 	beq.w	8012116 <_printf_float+0xc2>
 80123c2:	f108 0801 	add.w	r8, r8, #1
 80123c6:	e7ec      	b.n	80123a2 <_printf_float+0x34e>
 80123c8:	4613      	mov	r3, r2
 80123ca:	4631      	mov	r1, r6
 80123cc:	4642      	mov	r2, r8
 80123ce:	4628      	mov	r0, r5
 80123d0:	47b8      	blx	r7
 80123d2:	3001      	adds	r0, #1
 80123d4:	d1c0      	bne.n	8012358 <_printf_float+0x304>
 80123d6:	e69e      	b.n	8012116 <_printf_float+0xc2>
 80123d8:	2301      	movs	r3, #1
 80123da:	4631      	mov	r1, r6
 80123dc:	4628      	mov	r0, r5
 80123de:	9205      	str	r2, [sp, #20]
 80123e0:	47b8      	blx	r7
 80123e2:	3001      	adds	r0, #1
 80123e4:	f43f ae97 	beq.w	8012116 <_printf_float+0xc2>
 80123e8:	9a05      	ldr	r2, [sp, #20]
 80123ea:	f10b 0b01 	add.w	fp, fp, #1
 80123ee:	e7b9      	b.n	8012364 <_printf_float+0x310>
 80123f0:	ee18 3a10 	vmov	r3, s16
 80123f4:	4652      	mov	r2, sl
 80123f6:	4631      	mov	r1, r6
 80123f8:	4628      	mov	r0, r5
 80123fa:	47b8      	blx	r7
 80123fc:	3001      	adds	r0, #1
 80123fe:	d1be      	bne.n	801237e <_printf_float+0x32a>
 8012400:	e689      	b.n	8012116 <_printf_float+0xc2>
 8012402:	9a05      	ldr	r2, [sp, #20]
 8012404:	464b      	mov	r3, r9
 8012406:	4442      	add	r2, r8
 8012408:	4631      	mov	r1, r6
 801240a:	4628      	mov	r0, r5
 801240c:	47b8      	blx	r7
 801240e:	3001      	adds	r0, #1
 8012410:	d1c1      	bne.n	8012396 <_printf_float+0x342>
 8012412:	e680      	b.n	8012116 <_printf_float+0xc2>
 8012414:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012416:	2a01      	cmp	r2, #1
 8012418:	dc01      	bgt.n	801241e <_printf_float+0x3ca>
 801241a:	07db      	lsls	r3, r3, #31
 801241c:	d538      	bpl.n	8012490 <_printf_float+0x43c>
 801241e:	2301      	movs	r3, #1
 8012420:	4642      	mov	r2, r8
 8012422:	4631      	mov	r1, r6
 8012424:	4628      	mov	r0, r5
 8012426:	47b8      	blx	r7
 8012428:	3001      	adds	r0, #1
 801242a:	f43f ae74 	beq.w	8012116 <_printf_float+0xc2>
 801242e:	ee18 3a10 	vmov	r3, s16
 8012432:	4652      	mov	r2, sl
 8012434:	4631      	mov	r1, r6
 8012436:	4628      	mov	r0, r5
 8012438:	47b8      	blx	r7
 801243a:	3001      	adds	r0, #1
 801243c:	f43f ae6b 	beq.w	8012116 <_printf_float+0xc2>
 8012440:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012444:	2200      	movs	r2, #0
 8012446:	2300      	movs	r3, #0
 8012448:	f7ee fb56 	bl	8000af8 <__aeabi_dcmpeq>
 801244c:	b9d8      	cbnz	r0, 8012486 <_printf_float+0x432>
 801244e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012450:	f108 0201 	add.w	r2, r8, #1
 8012454:	3b01      	subs	r3, #1
 8012456:	4631      	mov	r1, r6
 8012458:	4628      	mov	r0, r5
 801245a:	47b8      	blx	r7
 801245c:	3001      	adds	r0, #1
 801245e:	d10e      	bne.n	801247e <_printf_float+0x42a>
 8012460:	e659      	b.n	8012116 <_printf_float+0xc2>
 8012462:	2301      	movs	r3, #1
 8012464:	4652      	mov	r2, sl
 8012466:	4631      	mov	r1, r6
 8012468:	4628      	mov	r0, r5
 801246a:	47b8      	blx	r7
 801246c:	3001      	adds	r0, #1
 801246e:	f43f ae52 	beq.w	8012116 <_printf_float+0xc2>
 8012472:	f108 0801 	add.w	r8, r8, #1
 8012476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012478:	3b01      	subs	r3, #1
 801247a:	4543      	cmp	r3, r8
 801247c:	dcf1      	bgt.n	8012462 <_printf_float+0x40e>
 801247e:	464b      	mov	r3, r9
 8012480:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012484:	e6dc      	b.n	8012240 <_printf_float+0x1ec>
 8012486:	f04f 0800 	mov.w	r8, #0
 801248a:	f104 0a1a 	add.w	sl, r4, #26
 801248e:	e7f2      	b.n	8012476 <_printf_float+0x422>
 8012490:	2301      	movs	r3, #1
 8012492:	4642      	mov	r2, r8
 8012494:	e7df      	b.n	8012456 <_printf_float+0x402>
 8012496:	2301      	movs	r3, #1
 8012498:	464a      	mov	r2, r9
 801249a:	4631      	mov	r1, r6
 801249c:	4628      	mov	r0, r5
 801249e:	47b8      	blx	r7
 80124a0:	3001      	adds	r0, #1
 80124a2:	f43f ae38 	beq.w	8012116 <_printf_float+0xc2>
 80124a6:	f108 0801 	add.w	r8, r8, #1
 80124aa:	68e3      	ldr	r3, [r4, #12]
 80124ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80124ae:	1a5b      	subs	r3, r3, r1
 80124b0:	4543      	cmp	r3, r8
 80124b2:	dcf0      	bgt.n	8012496 <_printf_float+0x442>
 80124b4:	e6fa      	b.n	80122ac <_printf_float+0x258>
 80124b6:	f04f 0800 	mov.w	r8, #0
 80124ba:	f104 0919 	add.w	r9, r4, #25
 80124be:	e7f4      	b.n	80124aa <_printf_float+0x456>

080124c0 <_printf_common>:
 80124c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124c4:	4616      	mov	r6, r2
 80124c6:	4699      	mov	r9, r3
 80124c8:	688a      	ldr	r2, [r1, #8]
 80124ca:	690b      	ldr	r3, [r1, #16]
 80124cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80124d0:	4293      	cmp	r3, r2
 80124d2:	bfb8      	it	lt
 80124d4:	4613      	movlt	r3, r2
 80124d6:	6033      	str	r3, [r6, #0]
 80124d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80124dc:	4607      	mov	r7, r0
 80124de:	460c      	mov	r4, r1
 80124e0:	b10a      	cbz	r2, 80124e6 <_printf_common+0x26>
 80124e2:	3301      	adds	r3, #1
 80124e4:	6033      	str	r3, [r6, #0]
 80124e6:	6823      	ldr	r3, [r4, #0]
 80124e8:	0699      	lsls	r1, r3, #26
 80124ea:	bf42      	ittt	mi
 80124ec:	6833      	ldrmi	r3, [r6, #0]
 80124ee:	3302      	addmi	r3, #2
 80124f0:	6033      	strmi	r3, [r6, #0]
 80124f2:	6825      	ldr	r5, [r4, #0]
 80124f4:	f015 0506 	ands.w	r5, r5, #6
 80124f8:	d106      	bne.n	8012508 <_printf_common+0x48>
 80124fa:	f104 0a19 	add.w	sl, r4, #25
 80124fe:	68e3      	ldr	r3, [r4, #12]
 8012500:	6832      	ldr	r2, [r6, #0]
 8012502:	1a9b      	subs	r3, r3, r2
 8012504:	42ab      	cmp	r3, r5
 8012506:	dc26      	bgt.n	8012556 <_printf_common+0x96>
 8012508:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801250c:	1e13      	subs	r3, r2, #0
 801250e:	6822      	ldr	r2, [r4, #0]
 8012510:	bf18      	it	ne
 8012512:	2301      	movne	r3, #1
 8012514:	0692      	lsls	r2, r2, #26
 8012516:	d42b      	bmi.n	8012570 <_printf_common+0xb0>
 8012518:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801251c:	4649      	mov	r1, r9
 801251e:	4638      	mov	r0, r7
 8012520:	47c0      	blx	r8
 8012522:	3001      	adds	r0, #1
 8012524:	d01e      	beq.n	8012564 <_printf_common+0xa4>
 8012526:	6823      	ldr	r3, [r4, #0]
 8012528:	68e5      	ldr	r5, [r4, #12]
 801252a:	6832      	ldr	r2, [r6, #0]
 801252c:	f003 0306 	and.w	r3, r3, #6
 8012530:	2b04      	cmp	r3, #4
 8012532:	bf08      	it	eq
 8012534:	1aad      	subeq	r5, r5, r2
 8012536:	68a3      	ldr	r3, [r4, #8]
 8012538:	6922      	ldr	r2, [r4, #16]
 801253a:	bf0c      	ite	eq
 801253c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012540:	2500      	movne	r5, #0
 8012542:	4293      	cmp	r3, r2
 8012544:	bfc4      	itt	gt
 8012546:	1a9b      	subgt	r3, r3, r2
 8012548:	18ed      	addgt	r5, r5, r3
 801254a:	2600      	movs	r6, #0
 801254c:	341a      	adds	r4, #26
 801254e:	42b5      	cmp	r5, r6
 8012550:	d11a      	bne.n	8012588 <_printf_common+0xc8>
 8012552:	2000      	movs	r0, #0
 8012554:	e008      	b.n	8012568 <_printf_common+0xa8>
 8012556:	2301      	movs	r3, #1
 8012558:	4652      	mov	r2, sl
 801255a:	4649      	mov	r1, r9
 801255c:	4638      	mov	r0, r7
 801255e:	47c0      	blx	r8
 8012560:	3001      	adds	r0, #1
 8012562:	d103      	bne.n	801256c <_printf_common+0xac>
 8012564:	f04f 30ff 	mov.w	r0, #4294967295
 8012568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801256c:	3501      	adds	r5, #1
 801256e:	e7c6      	b.n	80124fe <_printf_common+0x3e>
 8012570:	18e1      	adds	r1, r4, r3
 8012572:	1c5a      	adds	r2, r3, #1
 8012574:	2030      	movs	r0, #48	; 0x30
 8012576:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801257a:	4422      	add	r2, r4
 801257c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012580:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012584:	3302      	adds	r3, #2
 8012586:	e7c7      	b.n	8012518 <_printf_common+0x58>
 8012588:	2301      	movs	r3, #1
 801258a:	4622      	mov	r2, r4
 801258c:	4649      	mov	r1, r9
 801258e:	4638      	mov	r0, r7
 8012590:	47c0      	blx	r8
 8012592:	3001      	adds	r0, #1
 8012594:	d0e6      	beq.n	8012564 <_printf_common+0xa4>
 8012596:	3601      	adds	r6, #1
 8012598:	e7d9      	b.n	801254e <_printf_common+0x8e>
	...

0801259c <_printf_i>:
 801259c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80125a0:	460c      	mov	r4, r1
 80125a2:	4691      	mov	r9, r2
 80125a4:	7e27      	ldrb	r7, [r4, #24]
 80125a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80125a8:	2f78      	cmp	r7, #120	; 0x78
 80125aa:	4680      	mov	r8, r0
 80125ac:	469a      	mov	sl, r3
 80125ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80125b2:	d807      	bhi.n	80125c4 <_printf_i+0x28>
 80125b4:	2f62      	cmp	r7, #98	; 0x62
 80125b6:	d80a      	bhi.n	80125ce <_printf_i+0x32>
 80125b8:	2f00      	cmp	r7, #0
 80125ba:	f000 80d8 	beq.w	801276e <_printf_i+0x1d2>
 80125be:	2f58      	cmp	r7, #88	; 0x58
 80125c0:	f000 80a3 	beq.w	801270a <_printf_i+0x16e>
 80125c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80125c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80125cc:	e03a      	b.n	8012644 <_printf_i+0xa8>
 80125ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80125d2:	2b15      	cmp	r3, #21
 80125d4:	d8f6      	bhi.n	80125c4 <_printf_i+0x28>
 80125d6:	a001      	add	r0, pc, #4	; (adr r0, 80125dc <_printf_i+0x40>)
 80125d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80125dc:	08012635 	.word	0x08012635
 80125e0:	08012649 	.word	0x08012649
 80125e4:	080125c5 	.word	0x080125c5
 80125e8:	080125c5 	.word	0x080125c5
 80125ec:	080125c5 	.word	0x080125c5
 80125f0:	080125c5 	.word	0x080125c5
 80125f4:	08012649 	.word	0x08012649
 80125f8:	080125c5 	.word	0x080125c5
 80125fc:	080125c5 	.word	0x080125c5
 8012600:	080125c5 	.word	0x080125c5
 8012604:	080125c5 	.word	0x080125c5
 8012608:	08012755 	.word	0x08012755
 801260c:	08012679 	.word	0x08012679
 8012610:	08012737 	.word	0x08012737
 8012614:	080125c5 	.word	0x080125c5
 8012618:	080125c5 	.word	0x080125c5
 801261c:	08012777 	.word	0x08012777
 8012620:	080125c5 	.word	0x080125c5
 8012624:	08012679 	.word	0x08012679
 8012628:	080125c5 	.word	0x080125c5
 801262c:	080125c5 	.word	0x080125c5
 8012630:	0801273f 	.word	0x0801273f
 8012634:	680b      	ldr	r3, [r1, #0]
 8012636:	1d1a      	adds	r2, r3, #4
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	600a      	str	r2, [r1, #0]
 801263c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012640:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012644:	2301      	movs	r3, #1
 8012646:	e0a3      	b.n	8012790 <_printf_i+0x1f4>
 8012648:	6825      	ldr	r5, [r4, #0]
 801264a:	6808      	ldr	r0, [r1, #0]
 801264c:	062e      	lsls	r6, r5, #24
 801264e:	f100 0304 	add.w	r3, r0, #4
 8012652:	d50a      	bpl.n	801266a <_printf_i+0xce>
 8012654:	6805      	ldr	r5, [r0, #0]
 8012656:	600b      	str	r3, [r1, #0]
 8012658:	2d00      	cmp	r5, #0
 801265a:	da03      	bge.n	8012664 <_printf_i+0xc8>
 801265c:	232d      	movs	r3, #45	; 0x2d
 801265e:	426d      	negs	r5, r5
 8012660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012664:	485e      	ldr	r0, [pc, #376]	; (80127e0 <_printf_i+0x244>)
 8012666:	230a      	movs	r3, #10
 8012668:	e019      	b.n	801269e <_printf_i+0x102>
 801266a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801266e:	6805      	ldr	r5, [r0, #0]
 8012670:	600b      	str	r3, [r1, #0]
 8012672:	bf18      	it	ne
 8012674:	b22d      	sxthne	r5, r5
 8012676:	e7ef      	b.n	8012658 <_printf_i+0xbc>
 8012678:	680b      	ldr	r3, [r1, #0]
 801267a:	6825      	ldr	r5, [r4, #0]
 801267c:	1d18      	adds	r0, r3, #4
 801267e:	6008      	str	r0, [r1, #0]
 8012680:	0628      	lsls	r0, r5, #24
 8012682:	d501      	bpl.n	8012688 <_printf_i+0xec>
 8012684:	681d      	ldr	r5, [r3, #0]
 8012686:	e002      	b.n	801268e <_printf_i+0xf2>
 8012688:	0669      	lsls	r1, r5, #25
 801268a:	d5fb      	bpl.n	8012684 <_printf_i+0xe8>
 801268c:	881d      	ldrh	r5, [r3, #0]
 801268e:	4854      	ldr	r0, [pc, #336]	; (80127e0 <_printf_i+0x244>)
 8012690:	2f6f      	cmp	r7, #111	; 0x6f
 8012692:	bf0c      	ite	eq
 8012694:	2308      	moveq	r3, #8
 8012696:	230a      	movne	r3, #10
 8012698:	2100      	movs	r1, #0
 801269a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801269e:	6866      	ldr	r6, [r4, #4]
 80126a0:	60a6      	str	r6, [r4, #8]
 80126a2:	2e00      	cmp	r6, #0
 80126a4:	bfa2      	ittt	ge
 80126a6:	6821      	ldrge	r1, [r4, #0]
 80126a8:	f021 0104 	bicge.w	r1, r1, #4
 80126ac:	6021      	strge	r1, [r4, #0]
 80126ae:	b90d      	cbnz	r5, 80126b4 <_printf_i+0x118>
 80126b0:	2e00      	cmp	r6, #0
 80126b2:	d04d      	beq.n	8012750 <_printf_i+0x1b4>
 80126b4:	4616      	mov	r6, r2
 80126b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80126ba:	fb03 5711 	mls	r7, r3, r1, r5
 80126be:	5dc7      	ldrb	r7, [r0, r7]
 80126c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80126c4:	462f      	mov	r7, r5
 80126c6:	42bb      	cmp	r3, r7
 80126c8:	460d      	mov	r5, r1
 80126ca:	d9f4      	bls.n	80126b6 <_printf_i+0x11a>
 80126cc:	2b08      	cmp	r3, #8
 80126ce:	d10b      	bne.n	80126e8 <_printf_i+0x14c>
 80126d0:	6823      	ldr	r3, [r4, #0]
 80126d2:	07df      	lsls	r7, r3, #31
 80126d4:	d508      	bpl.n	80126e8 <_printf_i+0x14c>
 80126d6:	6923      	ldr	r3, [r4, #16]
 80126d8:	6861      	ldr	r1, [r4, #4]
 80126da:	4299      	cmp	r1, r3
 80126dc:	bfde      	ittt	le
 80126de:	2330      	movle	r3, #48	; 0x30
 80126e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80126e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80126e8:	1b92      	subs	r2, r2, r6
 80126ea:	6122      	str	r2, [r4, #16]
 80126ec:	f8cd a000 	str.w	sl, [sp]
 80126f0:	464b      	mov	r3, r9
 80126f2:	aa03      	add	r2, sp, #12
 80126f4:	4621      	mov	r1, r4
 80126f6:	4640      	mov	r0, r8
 80126f8:	f7ff fee2 	bl	80124c0 <_printf_common>
 80126fc:	3001      	adds	r0, #1
 80126fe:	d14c      	bne.n	801279a <_printf_i+0x1fe>
 8012700:	f04f 30ff 	mov.w	r0, #4294967295
 8012704:	b004      	add	sp, #16
 8012706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801270a:	4835      	ldr	r0, [pc, #212]	; (80127e0 <_printf_i+0x244>)
 801270c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012710:	6823      	ldr	r3, [r4, #0]
 8012712:	680e      	ldr	r6, [r1, #0]
 8012714:	061f      	lsls	r7, r3, #24
 8012716:	f856 5b04 	ldr.w	r5, [r6], #4
 801271a:	600e      	str	r6, [r1, #0]
 801271c:	d514      	bpl.n	8012748 <_printf_i+0x1ac>
 801271e:	07d9      	lsls	r1, r3, #31
 8012720:	bf44      	itt	mi
 8012722:	f043 0320 	orrmi.w	r3, r3, #32
 8012726:	6023      	strmi	r3, [r4, #0]
 8012728:	b91d      	cbnz	r5, 8012732 <_printf_i+0x196>
 801272a:	6823      	ldr	r3, [r4, #0]
 801272c:	f023 0320 	bic.w	r3, r3, #32
 8012730:	6023      	str	r3, [r4, #0]
 8012732:	2310      	movs	r3, #16
 8012734:	e7b0      	b.n	8012698 <_printf_i+0xfc>
 8012736:	6823      	ldr	r3, [r4, #0]
 8012738:	f043 0320 	orr.w	r3, r3, #32
 801273c:	6023      	str	r3, [r4, #0]
 801273e:	2378      	movs	r3, #120	; 0x78
 8012740:	4828      	ldr	r0, [pc, #160]	; (80127e4 <_printf_i+0x248>)
 8012742:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012746:	e7e3      	b.n	8012710 <_printf_i+0x174>
 8012748:	065e      	lsls	r6, r3, #25
 801274a:	bf48      	it	mi
 801274c:	b2ad      	uxthmi	r5, r5
 801274e:	e7e6      	b.n	801271e <_printf_i+0x182>
 8012750:	4616      	mov	r6, r2
 8012752:	e7bb      	b.n	80126cc <_printf_i+0x130>
 8012754:	680b      	ldr	r3, [r1, #0]
 8012756:	6826      	ldr	r6, [r4, #0]
 8012758:	6960      	ldr	r0, [r4, #20]
 801275a:	1d1d      	adds	r5, r3, #4
 801275c:	600d      	str	r5, [r1, #0]
 801275e:	0635      	lsls	r5, r6, #24
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	d501      	bpl.n	8012768 <_printf_i+0x1cc>
 8012764:	6018      	str	r0, [r3, #0]
 8012766:	e002      	b.n	801276e <_printf_i+0x1d2>
 8012768:	0671      	lsls	r1, r6, #25
 801276a:	d5fb      	bpl.n	8012764 <_printf_i+0x1c8>
 801276c:	8018      	strh	r0, [r3, #0]
 801276e:	2300      	movs	r3, #0
 8012770:	6123      	str	r3, [r4, #16]
 8012772:	4616      	mov	r6, r2
 8012774:	e7ba      	b.n	80126ec <_printf_i+0x150>
 8012776:	680b      	ldr	r3, [r1, #0]
 8012778:	1d1a      	adds	r2, r3, #4
 801277a:	600a      	str	r2, [r1, #0]
 801277c:	681e      	ldr	r6, [r3, #0]
 801277e:	6862      	ldr	r2, [r4, #4]
 8012780:	2100      	movs	r1, #0
 8012782:	4630      	mov	r0, r6
 8012784:	f7ed fd44 	bl	8000210 <memchr>
 8012788:	b108      	cbz	r0, 801278e <_printf_i+0x1f2>
 801278a:	1b80      	subs	r0, r0, r6
 801278c:	6060      	str	r0, [r4, #4]
 801278e:	6863      	ldr	r3, [r4, #4]
 8012790:	6123      	str	r3, [r4, #16]
 8012792:	2300      	movs	r3, #0
 8012794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012798:	e7a8      	b.n	80126ec <_printf_i+0x150>
 801279a:	6923      	ldr	r3, [r4, #16]
 801279c:	4632      	mov	r2, r6
 801279e:	4649      	mov	r1, r9
 80127a0:	4640      	mov	r0, r8
 80127a2:	47d0      	blx	sl
 80127a4:	3001      	adds	r0, #1
 80127a6:	d0ab      	beq.n	8012700 <_printf_i+0x164>
 80127a8:	6823      	ldr	r3, [r4, #0]
 80127aa:	079b      	lsls	r3, r3, #30
 80127ac:	d413      	bmi.n	80127d6 <_printf_i+0x23a>
 80127ae:	68e0      	ldr	r0, [r4, #12]
 80127b0:	9b03      	ldr	r3, [sp, #12]
 80127b2:	4298      	cmp	r0, r3
 80127b4:	bfb8      	it	lt
 80127b6:	4618      	movlt	r0, r3
 80127b8:	e7a4      	b.n	8012704 <_printf_i+0x168>
 80127ba:	2301      	movs	r3, #1
 80127bc:	4632      	mov	r2, r6
 80127be:	4649      	mov	r1, r9
 80127c0:	4640      	mov	r0, r8
 80127c2:	47d0      	blx	sl
 80127c4:	3001      	adds	r0, #1
 80127c6:	d09b      	beq.n	8012700 <_printf_i+0x164>
 80127c8:	3501      	adds	r5, #1
 80127ca:	68e3      	ldr	r3, [r4, #12]
 80127cc:	9903      	ldr	r1, [sp, #12]
 80127ce:	1a5b      	subs	r3, r3, r1
 80127d0:	42ab      	cmp	r3, r5
 80127d2:	dcf2      	bgt.n	80127ba <_printf_i+0x21e>
 80127d4:	e7eb      	b.n	80127ae <_printf_i+0x212>
 80127d6:	2500      	movs	r5, #0
 80127d8:	f104 0619 	add.w	r6, r4, #25
 80127dc:	e7f5      	b.n	80127ca <_printf_i+0x22e>
 80127de:	bf00      	nop
 80127e0:	080182a3 	.word	0x080182a3
 80127e4:	080182b4 	.word	0x080182b4

080127e8 <_scanf_float>:
 80127e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127ec:	b087      	sub	sp, #28
 80127ee:	4617      	mov	r7, r2
 80127f0:	9303      	str	r3, [sp, #12]
 80127f2:	688b      	ldr	r3, [r1, #8]
 80127f4:	1e5a      	subs	r2, r3, #1
 80127f6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80127fa:	bf83      	ittte	hi
 80127fc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012800:	195b      	addhi	r3, r3, r5
 8012802:	9302      	strhi	r3, [sp, #8]
 8012804:	2300      	movls	r3, #0
 8012806:	bf86      	itte	hi
 8012808:	f240 135d 	movwhi	r3, #349	; 0x15d
 801280c:	608b      	strhi	r3, [r1, #8]
 801280e:	9302      	strls	r3, [sp, #8]
 8012810:	680b      	ldr	r3, [r1, #0]
 8012812:	468b      	mov	fp, r1
 8012814:	2500      	movs	r5, #0
 8012816:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801281a:	f84b 3b1c 	str.w	r3, [fp], #28
 801281e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8012822:	4680      	mov	r8, r0
 8012824:	460c      	mov	r4, r1
 8012826:	465e      	mov	r6, fp
 8012828:	46aa      	mov	sl, r5
 801282a:	46a9      	mov	r9, r5
 801282c:	9501      	str	r5, [sp, #4]
 801282e:	68a2      	ldr	r2, [r4, #8]
 8012830:	b152      	cbz	r2, 8012848 <_scanf_float+0x60>
 8012832:	683b      	ldr	r3, [r7, #0]
 8012834:	781b      	ldrb	r3, [r3, #0]
 8012836:	2b4e      	cmp	r3, #78	; 0x4e
 8012838:	d864      	bhi.n	8012904 <_scanf_float+0x11c>
 801283a:	2b40      	cmp	r3, #64	; 0x40
 801283c:	d83c      	bhi.n	80128b8 <_scanf_float+0xd0>
 801283e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8012842:	b2c8      	uxtb	r0, r1
 8012844:	280e      	cmp	r0, #14
 8012846:	d93a      	bls.n	80128be <_scanf_float+0xd6>
 8012848:	f1b9 0f00 	cmp.w	r9, #0
 801284c:	d003      	beq.n	8012856 <_scanf_float+0x6e>
 801284e:	6823      	ldr	r3, [r4, #0]
 8012850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012854:	6023      	str	r3, [r4, #0]
 8012856:	f10a 3aff 	add.w	sl, sl, #4294967295
 801285a:	f1ba 0f01 	cmp.w	sl, #1
 801285e:	f200 8113 	bhi.w	8012a88 <_scanf_float+0x2a0>
 8012862:	455e      	cmp	r6, fp
 8012864:	f200 8105 	bhi.w	8012a72 <_scanf_float+0x28a>
 8012868:	2501      	movs	r5, #1
 801286a:	4628      	mov	r0, r5
 801286c:	b007      	add	sp, #28
 801286e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012872:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8012876:	2a0d      	cmp	r2, #13
 8012878:	d8e6      	bhi.n	8012848 <_scanf_float+0x60>
 801287a:	a101      	add	r1, pc, #4	; (adr r1, 8012880 <_scanf_float+0x98>)
 801287c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012880:	080129bf 	.word	0x080129bf
 8012884:	08012849 	.word	0x08012849
 8012888:	08012849 	.word	0x08012849
 801288c:	08012849 	.word	0x08012849
 8012890:	08012a1f 	.word	0x08012a1f
 8012894:	080129f7 	.word	0x080129f7
 8012898:	08012849 	.word	0x08012849
 801289c:	08012849 	.word	0x08012849
 80128a0:	080129cd 	.word	0x080129cd
 80128a4:	08012849 	.word	0x08012849
 80128a8:	08012849 	.word	0x08012849
 80128ac:	08012849 	.word	0x08012849
 80128b0:	08012849 	.word	0x08012849
 80128b4:	08012985 	.word	0x08012985
 80128b8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80128bc:	e7db      	b.n	8012876 <_scanf_float+0x8e>
 80128be:	290e      	cmp	r1, #14
 80128c0:	d8c2      	bhi.n	8012848 <_scanf_float+0x60>
 80128c2:	a001      	add	r0, pc, #4	; (adr r0, 80128c8 <_scanf_float+0xe0>)
 80128c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80128c8:	08012977 	.word	0x08012977
 80128cc:	08012849 	.word	0x08012849
 80128d0:	08012977 	.word	0x08012977
 80128d4:	08012a0b 	.word	0x08012a0b
 80128d8:	08012849 	.word	0x08012849
 80128dc:	08012925 	.word	0x08012925
 80128e0:	08012961 	.word	0x08012961
 80128e4:	08012961 	.word	0x08012961
 80128e8:	08012961 	.word	0x08012961
 80128ec:	08012961 	.word	0x08012961
 80128f0:	08012961 	.word	0x08012961
 80128f4:	08012961 	.word	0x08012961
 80128f8:	08012961 	.word	0x08012961
 80128fc:	08012961 	.word	0x08012961
 8012900:	08012961 	.word	0x08012961
 8012904:	2b6e      	cmp	r3, #110	; 0x6e
 8012906:	d809      	bhi.n	801291c <_scanf_float+0x134>
 8012908:	2b60      	cmp	r3, #96	; 0x60
 801290a:	d8b2      	bhi.n	8012872 <_scanf_float+0x8a>
 801290c:	2b54      	cmp	r3, #84	; 0x54
 801290e:	d077      	beq.n	8012a00 <_scanf_float+0x218>
 8012910:	2b59      	cmp	r3, #89	; 0x59
 8012912:	d199      	bne.n	8012848 <_scanf_float+0x60>
 8012914:	2d07      	cmp	r5, #7
 8012916:	d197      	bne.n	8012848 <_scanf_float+0x60>
 8012918:	2508      	movs	r5, #8
 801291a:	e029      	b.n	8012970 <_scanf_float+0x188>
 801291c:	2b74      	cmp	r3, #116	; 0x74
 801291e:	d06f      	beq.n	8012a00 <_scanf_float+0x218>
 8012920:	2b79      	cmp	r3, #121	; 0x79
 8012922:	e7f6      	b.n	8012912 <_scanf_float+0x12a>
 8012924:	6821      	ldr	r1, [r4, #0]
 8012926:	05c8      	lsls	r0, r1, #23
 8012928:	d51a      	bpl.n	8012960 <_scanf_float+0x178>
 801292a:	9b02      	ldr	r3, [sp, #8]
 801292c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012930:	6021      	str	r1, [r4, #0]
 8012932:	f109 0901 	add.w	r9, r9, #1
 8012936:	b11b      	cbz	r3, 8012940 <_scanf_float+0x158>
 8012938:	3b01      	subs	r3, #1
 801293a:	3201      	adds	r2, #1
 801293c:	9302      	str	r3, [sp, #8]
 801293e:	60a2      	str	r2, [r4, #8]
 8012940:	68a3      	ldr	r3, [r4, #8]
 8012942:	3b01      	subs	r3, #1
 8012944:	60a3      	str	r3, [r4, #8]
 8012946:	6923      	ldr	r3, [r4, #16]
 8012948:	3301      	adds	r3, #1
 801294a:	6123      	str	r3, [r4, #16]
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	3b01      	subs	r3, #1
 8012950:	2b00      	cmp	r3, #0
 8012952:	607b      	str	r3, [r7, #4]
 8012954:	f340 8084 	ble.w	8012a60 <_scanf_float+0x278>
 8012958:	683b      	ldr	r3, [r7, #0]
 801295a:	3301      	adds	r3, #1
 801295c:	603b      	str	r3, [r7, #0]
 801295e:	e766      	b.n	801282e <_scanf_float+0x46>
 8012960:	eb1a 0f05 	cmn.w	sl, r5
 8012964:	f47f af70 	bne.w	8012848 <_scanf_float+0x60>
 8012968:	6822      	ldr	r2, [r4, #0]
 801296a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801296e:	6022      	str	r2, [r4, #0]
 8012970:	f806 3b01 	strb.w	r3, [r6], #1
 8012974:	e7e4      	b.n	8012940 <_scanf_float+0x158>
 8012976:	6822      	ldr	r2, [r4, #0]
 8012978:	0610      	lsls	r0, r2, #24
 801297a:	f57f af65 	bpl.w	8012848 <_scanf_float+0x60>
 801297e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012982:	e7f4      	b.n	801296e <_scanf_float+0x186>
 8012984:	f1ba 0f00 	cmp.w	sl, #0
 8012988:	d10e      	bne.n	80129a8 <_scanf_float+0x1c0>
 801298a:	f1b9 0f00 	cmp.w	r9, #0
 801298e:	d10e      	bne.n	80129ae <_scanf_float+0x1c6>
 8012990:	6822      	ldr	r2, [r4, #0]
 8012992:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012996:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801299a:	d108      	bne.n	80129ae <_scanf_float+0x1c6>
 801299c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80129a0:	6022      	str	r2, [r4, #0]
 80129a2:	f04f 0a01 	mov.w	sl, #1
 80129a6:	e7e3      	b.n	8012970 <_scanf_float+0x188>
 80129a8:	f1ba 0f02 	cmp.w	sl, #2
 80129ac:	d055      	beq.n	8012a5a <_scanf_float+0x272>
 80129ae:	2d01      	cmp	r5, #1
 80129b0:	d002      	beq.n	80129b8 <_scanf_float+0x1d0>
 80129b2:	2d04      	cmp	r5, #4
 80129b4:	f47f af48 	bne.w	8012848 <_scanf_float+0x60>
 80129b8:	3501      	adds	r5, #1
 80129ba:	b2ed      	uxtb	r5, r5
 80129bc:	e7d8      	b.n	8012970 <_scanf_float+0x188>
 80129be:	f1ba 0f01 	cmp.w	sl, #1
 80129c2:	f47f af41 	bne.w	8012848 <_scanf_float+0x60>
 80129c6:	f04f 0a02 	mov.w	sl, #2
 80129ca:	e7d1      	b.n	8012970 <_scanf_float+0x188>
 80129cc:	b97d      	cbnz	r5, 80129ee <_scanf_float+0x206>
 80129ce:	f1b9 0f00 	cmp.w	r9, #0
 80129d2:	f47f af3c 	bne.w	801284e <_scanf_float+0x66>
 80129d6:	6822      	ldr	r2, [r4, #0]
 80129d8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80129dc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80129e0:	f47f af39 	bne.w	8012856 <_scanf_float+0x6e>
 80129e4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80129e8:	6022      	str	r2, [r4, #0]
 80129ea:	2501      	movs	r5, #1
 80129ec:	e7c0      	b.n	8012970 <_scanf_float+0x188>
 80129ee:	2d03      	cmp	r5, #3
 80129f0:	d0e2      	beq.n	80129b8 <_scanf_float+0x1d0>
 80129f2:	2d05      	cmp	r5, #5
 80129f4:	e7de      	b.n	80129b4 <_scanf_float+0x1cc>
 80129f6:	2d02      	cmp	r5, #2
 80129f8:	f47f af26 	bne.w	8012848 <_scanf_float+0x60>
 80129fc:	2503      	movs	r5, #3
 80129fe:	e7b7      	b.n	8012970 <_scanf_float+0x188>
 8012a00:	2d06      	cmp	r5, #6
 8012a02:	f47f af21 	bne.w	8012848 <_scanf_float+0x60>
 8012a06:	2507      	movs	r5, #7
 8012a08:	e7b2      	b.n	8012970 <_scanf_float+0x188>
 8012a0a:	6822      	ldr	r2, [r4, #0]
 8012a0c:	0591      	lsls	r1, r2, #22
 8012a0e:	f57f af1b 	bpl.w	8012848 <_scanf_float+0x60>
 8012a12:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8012a16:	6022      	str	r2, [r4, #0]
 8012a18:	f8cd 9004 	str.w	r9, [sp, #4]
 8012a1c:	e7a8      	b.n	8012970 <_scanf_float+0x188>
 8012a1e:	6822      	ldr	r2, [r4, #0]
 8012a20:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8012a24:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8012a28:	d006      	beq.n	8012a38 <_scanf_float+0x250>
 8012a2a:	0550      	lsls	r0, r2, #21
 8012a2c:	f57f af0c 	bpl.w	8012848 <_scanf_float+0x60>
 8012a30:	f1b9 0f00 	cmp.w	r9, #0
 8012a34:	f43f af0f 	beq.w	8012856 <_scanf_float+0x6e>
 8012a38:	0591      	lsls	r1, r2, #22
 8012a3a:	bf58      	it	pl
 8012a3c:	9901      	ldrpl	r1, [sp, #4]
 8012a3e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012a42:	bf58      	it	pl
 8012a44:	eba9 0101 	subpl.w	r1, r9, r1
 8012a48:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8012a4c:	bf58      	it	pl
 8012a4e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8012a52:	6022      	str	r2, [r4, #0]
 8012a54:	f04f 0900 	mov.w	r9, #0
 8012a58:	e78a      	b.n	8012970 <_scanf_float+0x188>
 8012a5a:	f04f 0a03 	mov.w	sl, #3
 8012a5e:	e787      	b.n	8012970 <_scanf_float+0x188>
 8012a60:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012a64:	4639      	mov	r1, r7
 8012a66:	4640      	mov	r0, r8
 8012a68:	4798      	blx	r3
 8012a6a:	2800      	cmp	r0, #0
 8012a6c:	f43f aedf 	beq.w	801282e <_scanf_float+0x46>
 8012a70:	e6ea      	b.n	8012848 <_scanf_float+0x60>
 8012a72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012a76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012a7a:	463a      	mov	r2, r7
 8012a7c:	4640      	mov	r0, r8
 8012a7e:	4798      	blx	r3
 8012a80:	6923      	ldr	r3, [r4, #16]
 8012a82:	3b01      	subs	r3, #1
 8012a84:	6123      	str	r3, [r4, #16]
 8012a86:	e6ec      	b.n	8012862 <_scanf_float+0x7a>
 8012a88:	1e6b      	subs	r3, r5, #1
 8012a8a:	2b06      	cmp	r3, #6
 8012a8c:	d825      	bhi.n	8012ada <_scanf_float+0x2f2>
 8012a8e:	2d02      	cmp	r5, #2
 8012a90:	d836      	bhi.n	8012b00 <_scanf_float+0x318>
 8012a92:	455e      	cmp	r6, fp
 8012a94:	f67f aee8 	bls.w	8012868 <_scanf_float+0x80>
 8012a98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012a9c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012aa0:	463a      	mov	r2, r7
 8012aa2:	4640      	mov	r0, r8
 8012aa4:	4798      	blx	r3
 8012aa6:	6923      	ldr	r3, [r4, #16]
 8012aa8:	3b01      	subs	r3, #1
 8012aaa:	6123      	str	r3, [r4, #16]
 8012aac:	e7f1      	b.n	8012a92 <_scanf_float+0x2aa>
 8012aae:	9802      	ldr	r0, [sp, #8]
 8012ab0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012ab4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8012ab8:	9002      	str	r0, [sp, #8]
 8012aba:	463a      	mov	r2, r7
 8012abc:	4640      	mov	r0, r8
 8012abe:	4798      	blx	r3
 8012ac0:	6923      	ldr	r3, [r4, #16]
 8012ac2:	3b01      	subs	r3, #1
 8012ac4:	6123      	str	r3, [r4, #16]
 8012ac6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012aca:	fa5f fa8a 	uxtb.w	sl, sl
 8012ace:	f1ba 0f02 	cmp.w	sl, #2
 8012ad2:	d1ec      	bne.n	8012aae <_scanf_float+0x2c6>
 8012ad4:	3d03      	subs	r5, #3
 8012ad6:	b2ed      	uxtb	r5, r5
 8012ad8:	1b76      	subs	r6, r6, r5
 8012ada:	6823      	ldr	r3, [r4, #0]
 8012adc:	05da      	lsls	r2, r3, #23
 8012ade:	d52f      	bpl.n	8012b40 <_scanf_float+0x358>
 8012ae0:	055b      	lsls	r3, r3, #21
 8012ae2:	d510      	bpl.n	8012b06 <_scanf_float+0x31e>
 8012ae4:	455e      	cmp	r6, fp
 8012ae6:	f67f aebf 	bls.w	8012868 <_scanf_float+0x80>
 8012aea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012aee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012af2:	463a      	mov	r2, r7
 8012af4:	4640      	mov	r0, r8
 8012af6:	4798      	blx	r3
 8012af8:	6923      	ldr	r3, [r4, #16]
 8012afa:	3b01      	subs	r3, #1
 8012afc:	6123      	str	r3, [r4, #16]
 8012afe:	e7f1      	b.n	8012ae4 <_scanf_float+0x2fc>
 8012b00:	46aa      	mov	sl, r5
 8012b02:	9602      	str	r6, [sp, #8]
 8012b04:	e7df      	b.n	8012ac6 <_scanf_float+0x2de>
 8012b06:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8012b0a:	6923      	ldr	r3, [r4, #16]
 8012b0c:	2965      	cmp	r1, #101	; 0x65
 8012b0e:	f103 33ff 	add.w	r3, r3, #4294967295
 8012b12:	f106 35ff 	add.w	r5, r6, #4294967295
 8012b16:	6123      	str	r3, [r4, #16]
 8012b18:	d00c      	beq.n	8012b34 <_scanf_float+0x34c>
 8012b1a:	2945      	cmp	r1, #69	; 0x45
 8012b1c:	d00a      	beq.n	8012b34 <_scanf_float+0x34c>
 8012b1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012b22:	463a      	mov	r2, r7
 8012b24:	4640      	mov	r0, r8
 8012b26:	4798      	blx	r3
 8012b28:	6923      	ldr	r3, [r4, #16]
 8012b2a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8012b2e:	3b01      	subs	r3, #1
 8012b30:	1eb5      	subs	r5, r6, #2
 8012b32:	6123      	str	r3, [r4, #16]
 8012b34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012b38:	463a      	mov	r2, r7
 8012b3a:	4640      	mov	r0, r8
 8012b3c:	4798      	blx	r3
 8012b3e:	462e      	mov	r6, r5
 8012b40:	6825      	ldr	r5, [r4, #0]
 8012b42:	f015 0510 	ands.w	r5, r5, #16
 8012b46:	d158      	bne.n	8012bfa <_scanf_float+0x412>
 8012b48:	7035      	strb	r5, [r6, #0]
 8012b4a:	6823      	ldr	r3, [r4, #0]
 8012b4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012b54:	d11c      	bne.n	8012b90 <_scanf_float+0x3a8>
 8012b56:	9b01      	ldr	r3, [sp, #4]
 8012b58:	454b      	cmp	r3, r9
 8012b5a:	eba3 0209 	sub.w	r2, r3, r9
 8012b5e:	d124      	bne.n	8012baa <_scanf_float+0x3c2>
 8012b60:	2200      	movs	r2, #0
 8012b62:	4659      	mov	r1, fp
 8012b64:	4640      	mov	r0, r8
 8012b66:	f000 fe9d 	bl	80138a4 <_strtod_r>
 8012b6a:	9b03      	ldr	r3, [sp, #12]
 8012b6c:	6821      	ldr	r1, [r4, #0]
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	f011 0f02 	tst.w	r1, #2
 8012b74:	ec57 6b10 	vmov	r6, r7, d0
 8012b78:	f103 0204 	add.w	r2, r3, #4
 8012b7c:	d020      	beq.n	8012bc0 <_scanf_float+0x3d8>
 8012b7e:	9903      	ldr	r1, [sp, #12]
 8012b80:	600a      	str	r2, [r1, #0]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	e9c3 6700 	strd	r6, r7, [r3]
 8012b88:	68e3      	ldr	r3, [r4, #12]
 8012b8a:	3301      	adds	r3, #1
 8012b8c:	60e3      	str	r3, [r4, #12]
 8012b8e:	e66c      	b.n	801286a <_scanf_float+0x82>
 8012b90:	9b04      	ldr	r3, [sp, #16]
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d0e4      	beq.n	8012b60 <_scanf_float+0x378>
 8012b96:	9905      	ldr	r1, [sp, #20]
 8012b98:	230a      	movs	r3, #10
 8012b9a:	462a      	mov	r2, r5
 8012b9c:	3101      	adds	r1, #1
 8012b9e:	4640      	mov	r0, r8
 8012ba0:	f000 ff0a 	bl	80139b8 <_strtol_r>
 8012ba4:	9b04      	ldr	r3, [sp, #16]
 8012ba6:	9e05      	ldr	r6, [sp, #20]
 8012ba8:	1ac2      	subs	r2, r0, r3
 8012baa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8012bae:	429e      	cmp	r6, r3
 8012bb0:	bf28      	it	cs
 8012bb2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8012bb6:	4912      	ldr	r1, [pc, #72]	; (8012c00 <_scanf_float+0x418>)
 8012bb8:	4630      	mov	r0, r6
 8012bba:	f000 f82b 	bl	8012c14 <siprintf>
 8012bbe:	e7cf      	b.n	8012b60 <_scanf_float+0x378>
 8012bc0:	f011 0f04 	tst.w	r1, #4
 8012bc4:	9903      	ldr	r1, [sp, #12]
 8012bc6:	600a      	str	r2, [r1, #0]
 8012bc8:	d1db      	bne.n	8012b82 <_scanf_float+0x39a>
 8012bca:	f8d3 8000 	ldr.w	r8, [r3]
 8012bce:	ee10 2a10 	vmov	r2, s0
 8012bd2:	ee10 0a10 	vmov	r0, s0
 8012bd6:	463b      	mov	r3, r7
 8012bd8:	4639      	mov	r1, r7
 8012bda:	f7ed ffbf 	bl	8000b5c <__aeabi_dcmpun>
 8012bde:	b128      	cbz	r0, 8012bec <_scanf_float+0x404>
 8012be0:	4808      	ldr	r0, [pc, #32]	; (8012c04 <_scanf_float+0x41c>)
 8012be2:	f000 f811 	bl	8012c08 <nanf>
 8012be6:	ed88 0a00 	vstr	s0, [r8]
 8012bea:	e7cd      	b.n	8012b88 <_scanf_float+0x3a0>
 8012bec:	4630      	mov	r0, r6
 8012bee:	4639      	mov	r1, r7
 8012bf0:	f7ee f812 	bl	8000c18 <__aeabi_d2f>
 8012bf4:	f8c8 0000 	str.w	r0, [r8]
 8012bf8:	e7c6      	b.n	8012b88 <_scanf_float+0x3a0>
 8012bfa:	2500      	movs	r5, #0
 8012bfc:	e635      	b.n	801286a <_scanf_float+0x82>
 8012bfe:	bf00      	nop
 8012c00:	080182c5 	.word	0x080182c5
 8012c04:	08018177 	.word	0x08018177

08012c08 <nanf>:
 8012c08:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012c10 <nanf+0x8>
 8012c0c:	4770      	bx	lr
 8012c0e:	bf00      	nop
 8012c10:	7fc00000 	.word	0x7fc00000

08012c14 <siprintf>:
 8012c14:	b40e      	push	{r1, r2, r3}
 8012c16:	b500      	push	{lr}
 8012c18:	b09c      	sub	sp, #112	; 0x70
 8012c1a:	ab1d      	add	r3, sp, #116	; 0x74
 8012c1c:	9002      	str	r0, [sp, #8]
 8012c1e:	9006      	str	r0, [sp, #24]
 8012c20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012c24:	4809      	ldr	r0, [pc, #36]	; (8012c4c <siprintf+0x38>)
 8012c26:	9107      	str	r1, [sp, #28]
 8012c28:	9104      	str	r1, [sp, #16]
 8012c2a:	4909      	ldr	r1, [pc, #36]	; (8012c50 <siprintf+0x3c>)
 8012c2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c30:	9105      	str	r1, [sp, #20]
 8012c32:	6800      	ldr	r0, [r0, #0]
 8012c34:	9301      	str	r3, [sp, #4]
 8012c36:	a902      	add	r1, sp, #8
 8012c38:	f003 f9c6 	bl	8015fc8 <_svfiprintf_r>
 8012c3c:	9b02      	ldr	r3, [sp, #8]
 8012c3e:	2200      	movs	r2, #0
 8012c40:	701a      	strb	r2, [r3, #0]
 8012c42:	b01c      	add	sp, #112	; 0x70
 8012c44:	f85d eb04 	ldr.w	lr, [sp], #4
 8012c48:	b003      	add	sp, #12
 8012c4a:	4770      	bx	lr
 8012c4c:	2000005c 	.word	0x2000005c
 8012c50:	ffff0208 	.word	0xffff0208

08012c54 <sulp>:
 8012c54:	b570      	push	{r4, r5, r6, lr}
 8012c56:	4604      	mov	r4, r0
 8012c58:	460d      	mov	r5, r1
 8012c5a:	ec45 4b10 	vmov	d0, r4, r5
 8012c5e:	4616      	mov	r6, r2
 8012c60:	f002 ff28 	bl	8015ab4 <__ulp>
 8012c64:	ec51 0b10 	vmov	r0, r1, d0
 8012c68:	b17e      	cbz	r6, 8012c8a <sulp+0x36>
 8012c6a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012c6e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	dd09      	ble.n	8012c8a <sulp+0x36>
 8012c76:	051b      	lsls	r3, r3, #20
 8012c78:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8012c7c:	2400      	movs	r4, #0
 8012c7e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012c82:	4622      	mov	r2, r4
 8012c84:	462b      	mov	r3, r5
 8012c86:	f7ed fccf 	bl	8000628 <__aeabi_dmul>
 8012c8a:	bd70      	pop	{r4, r5, r6, pc}
 8012c8c:	0000      	movs	r0, r0
	...

08012c90 <_strtod_l>:
 8012c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c94:	b0a3      	sub	sp, #140	; 0x8c
 8012c96:	461f      	mov	r7, r3
 8012c98:	2300      	movs	r3, #0
 8012c9a:	931e      	str	r3, [sp, #120]	; 0x78
 8012c9c:	4ba4      	ldr	r3, [pc, #656]	; (8012f30 <_strtod_l+0x2a0>)
 8012c9e:	9219      	str	r2, [sp, #100]	; 0x64
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	9307      	str	r3, [sp, #28]
 8012ca4:	4604      	mov	r4, r0
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	4688      	mov	r8, r1
 8012caa:	f7ed faa3 	bl	80001f4 <strlen>
 8012cae:	f04f 0a00 	mov.w	sl, #0
 8012cb2:	4605      	mov	r5, r0
 8012cb4:	f04f 0b00 	mov.w	fp, #0
 8012cb8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8012cbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012cbe:	781a      	ldrb	r2, [r3, #0]
 8012cc0:	2a2b      	cmp	r2, #43	; 0x2b
 8012cc2:	d04c      	beq.n	8012d5e <_strtod_l+0xce>
 8012cc4:	d839      	bhi.n	8012d3a <_strtod_l+0xaa>
 8012cc6:	2a0d      	cmp	r2, #13
 8012cc8:	d832      	bhi.n	8012d30 <_strtod_l+0xa0>
 8012cca:	2a08      	cmp	r2, #8
 8012ccc:	d832      	bhi.n	8012d34 <_strtod_l+0xa4>
 8012cce:	2a00      	cmp	r2, #0
 8012cd0:	d03c      	beq.n	8012d4c <_strtod_l+0xbc>
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	930e      	str	r3, [sp, #56]	; 0x38
 8012cd6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8012cd8:	7833      	ldrb	r3, [r6, #0]
 8012cda:	2b30      	cmp	r3, #48	; 0x30
 8012cdc:	f040 80b4 	bne.w	8012e48 <_strtod_l+0x1b8>
 8012ce0:	7873      	ldrb	r3, [r6, #1]
 8012ce2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012ce6:	2b58      	cmp	r3, #88	; 0x58
 8012ce8:	d16c      	bne.n	8012dc4 <_strtod_l+0x134>
 8012cea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012cec:	9301      	str	r3, [sp, #4]
 8012cee:	ab1e      	add	r3, sp, #120	; 0x78
 8012cf0:	9702      	str	r7, [sp, #8]
 8012cf2:	9300      	str	r3, [sp, #0]
 8012cf4:	4a8f      	ldr	r2, [pc, #572]	; (8012f34 <_strtod_l+0x2a4>)
 8012cf6:	ab1f      	add	r3, sp, #124	; 0x7c
 8012cf8:	a91d      	add	r1, sp, #116	; 0x74
 8012cfa:	4620      	mov	r0, r4
 8012cfc:	f001 ffc6 	bl	8014c8c <__gethex>
 8012d00:	f010 0707 	ands.w	r7, r0, #7
 8012d04:	4605      	mov	r5, r0
 8012d06:	d005      	beq.n	8012d14 <_strtod_l+0x84>
 8012d08:	2f06      	cmp	r7, #6
 8012d0a:	d12a      	bne.n	8012d62 <_strtod_l+0xd2>
 8012d0c:	3601      	adds	r6, #1
 8012d0e:	2300      	movs	r3, #0
 8012d10:	961d      	str	r6, [sp, #116]	; 0x74
 8012d12:	930e      	str	r3, [sp, #56]	; 0x38
 8012d14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	f040 8596 	bne.w	8013848 <_strtod_l+0xbb8>
 8012d1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d1e:	b1db      	cbz	r3, 8012d58 <_strtod_l+0xc8>
 8012d20:	4652      	mov	r2, sl
 8012d22:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012d26:	ec43 2b10 	vmov	d0, r2, r3
 8012d2a:	b023      	add	sp, #140	; 0x8c
 8012d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d30:	2a20      	cmp	r2, #32
 8012d32:	d1ce      	bne.n	8012cd2 <_strtod_l+0x42>
 8012d34:	3301      	adds	r3, #1
 8012d36:	931d      	str	r3, [sp, #116]	; 0x74
 8012d38:	e7c0      	b.n	8012cbc <_strtod_l+0x2c>
 8012d3a:	2a2d      	cmp	r2, #45	; 0x2d
 8012d3c:	d1c9      	bne.n	8012cd2 <_strtod_l+0x42>
 8012d3e:	2201      	movs	r2, #1
 8012d40:	920e      	str	r2, [sp, #56]	; 0x38
 8012d42:	1c5a      	adds	r2, r3, #1
 8012d44:	921d      	str	r2, [sp, #116]	; 0x74
 8012d46:	785b      	ldrb	r3, [r3, #1]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d1c4      	bne.n	8012cd6 <_strtod_l+0x46>
 8012d4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012d4e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	f040 8576 	bne.w	8013844 <_strtod_l+0xbb4>
 8012d58:	4652      	mov	r2, sl
 8012d5a:	465b      	mov	r3, fp
 8012d5c:	e7e3      	b.n	8012d26 <_strtod_l+0x96>
 8012d5e:	2200      	movs	r2, #0
 8012d60:	e7ee      	b.n	8012d40 <_strtod_l+0xb0>
 8012d62:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012d64:	b13a      	cbz	r2, 8012d76 <_strtod_l+0xe6>
 8012d66:	2135      	movs	r1, #53	; 0x35
 8012d68:	a820      	add	r0, sp, #128	; 0x80
 8012d6a:	f002 ffae 	bl	8015cca <__copybits>
 8012d6e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012d70:	4620      	mov	r0, r4
 8012d72:	f002 fb73 	bl	801545c <_Bfree>
 8012d76:	3f01      	subs	r7, #1
 8012d78:	2f05      	cmp	r7, #5
 8012d7a:	d807      	bhi.n	8012d8c <_strtod_l+0xfc>
 8012d7c:	e8df f007 	tbb	[pc, r7]
 8012d80:	1d180b0e 	.word	0x1d180b0e
 8012d84:	030e      	.short	0x030e
 8012d86:	f04f 0b00 	mov.w	fp, #0
 8012d8a:	46da      	mov	sl, fp
 8012d8c:	0728      	lsls	r0, r5, #28
 8012d8e:	d5c1      	bpl.n	8012d14 <_strtod_l+0x84>
 8012d90:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8012d94:	e7be      	b.n	8012d14 <_strtod_l+0x84>
 8012d96:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8012d9a:	e7f7      	b.n	8012d8c <_strtod_l+0xfc>
 8012d9c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8012da0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012da2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012da6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012daa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012dae:	e7ed      	b.n	8012d8c <_strtod_l+0xfc>
 8012db0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8012f38 <_strtod_l+0x2a8>
 8012db4:	f04f 0a00 	mov.w	sl, #0
 8012db8:	e7e8      	b.n	8012d8c <_strtod_l+0xfc>
 8012dba:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8012dbe:	f04f 3aff 	mov.w	sl, #4294967295
 8012dc2:	e7e3      	b.n	8012d8c <_strtod_l+0xfc>
 8012dc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012dc6:	1c5a      	adds	r2, r3, #1
 8012dc8:	921d      	str	r2, [sp, #116]	; 0x74
 8012dca:	785b      	ldrb	r3, [r3, #1]
 8012dcc:	2b30      	cmp	r3, #48	; 0x30
 8012dce:	d0f9      	beq.n	8012dc4 <_strtod_l+0x134>
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d09f      	beq.n	8012d14 <_strtod_l+0x84>
 8012dd4:	2301      	movs	r3, #1
 8012dd6:	f04f 0900 	mov.w	r9, #0
 8012dda:	9304      	str	r3, [sp, #16]
 8012ddc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012dde:	930a      	str	r3, [sp, #40]	; 0x28
 8012de0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8012de4:	464f      	mov	r7, r9
 8012de6:	220a      	movs	r2, #10
 8012de8:	981d      	ldr	r0, [sp, #116]	; 0x74
 8012dea:	7806      	ldrb	r6, [r0, #0]
 8012dec:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8012df0:	b2d9      	uxtb	r1, r3
 8012df2:	2909      	cmp	r1, #9
 8012df4:	d92a      	bls.n	8012e4c <_strtod_l+0x1bc>
 8012df6:	9907      	ldr	r1, [sp, #28]
 8012df8:	462a      	mov	r2, r5
 8012dfa:	f003 fa84 	bl	8016306 <strncmp>
 8012dfe:	b398      	cbz	r0, 8012e68 <_strtod_l+0x1d8>
 8012e00:	2000      	movs	r0, #0
 8012e02:	4633      	mov	r3, r6
 8012e04:	463d      	mov	r5, r7
 8012e06:	9007      	str	r0, [sp, #28]
 8012e08:	4602      	mov	r2, r0
 8012e0a:	2b65      	cmp	r3, #101	; 0x65
 8012e0c:	d001      	beq.n	8012e12 <_strtod_l+0x182>
 8012e0e:	2b45      	cmp	r3, #69	; 0x45
 8012e10:	d118      	bne.n	8012e44 <_strtod_l+0x1b4>
 8012e12:	b91d      	cbnz	r5, 8012e1c <_strtod_l+0x18c>
 8012e14:	9b04      	ldr	r3, [sp, #16]
 8012e16:	4303      	orrs	r3, r0
 8012e18:	d098      	beq.n	8012d4c <_strtod_l+0xbc>
 8012e1a:	2500      	movs	r5, #0
 8012e1c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8012e20:	f108 0301 	add.w	r3, r8, #1
 8012e24:	931d      	str	r3, [sp, #116]	; 0x74
 8012e26:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012e2a:	2b2b      	cmp	r3, #43	; 0x2b
 8012e2c:	d075      	beq.n	8012f1a <_strtod_l+0x28a>
 8012e2e:	2b2d      	cmp	r3, #45	; 0x2d
 8012e30:	d07b      	beq.n	8012f2a <_strtod_l+0x29a>
 8012e32:	f04f 0c00 	mov.w	ip, #0
 8012e36:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8012e3a:	2909      	cmp	r1, #9
 8012e3c:	f240 8082 	bls.w	8012f44 <_strtod_l+0x2b4>
 8012e40:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8012e44:	2600      	movs	r6, #0
 8012e46:	e09d      	b.n	8012f84 <_strtod_l+0x2f4>
 8012e48:	2300      	movs	r3, #0
 8012e4a:	e7c4      	b.n	8012dd6 <_strtod_l+0x146>
 8012e4c:	2f08      	cmp	r7, #8
 8012e4e:	bfd8      	it	le
 8012e50:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8012e52:	f100 0001 	add.w	r0, r0, #1
 8012e56:	bfda      	itte	le
 8012e58:	fb02 3301 	mlale	r3, r2, r1, r3
 8012e5c:	9309      	strle	r3, [sp, #36]	; 0x24
 8012e5e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8012e62:	3701      	adds	r7, #1
 8012e64:	901d      	str	r0, [sp, #116]	; 0x74
 8012e66:	e7bf      	b.n	8012de8 <_strtod_l+0x158>
 8012e68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012e6a:	195a      	adds	r2, r3, r5
 8012e6c:	921d      	str	r2, [sp, #116]	; 0x74
 8012e6e:	5d5b      	ldrb	r3, [r3, r5]
 8012e70:	2f00      	cmp	r7, #0
 8012e72:	d037      	beq.n	8012ee4 <_strtod_l+0x254>
 8012e74:	9007      	str	r0, [sp, #28]
 8012e76:	463d      	mov	r5, r7
 8012e78:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8012e7c:	2a09      	cmp	r2, #9
 8012e7e:	d912      	bls.n	8012ea6 <_strtod_l+0x216>
 8012e80:	2201      	movs	r2, #1
 8012e82:	e7c2      	b.n	8012e0a <_strtod_l+0x17a>
 8012e84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012e86:	1c5a      	adds	r2, r3, #1
 8012e88:	921d      	str	r2, [sp, #116]	; 0x74
 8012e8a:	785b      	ldrb	r3, [r3, #1]
 8012e8c:	3001      	adds	r0, #1
 8012e8e:	2b30      	cmp	r3, #48	; 0x30
 8012e90:	d0f8      	beq.n	8012e84 <_strtod_l+0x1f4>
 8012e92:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8012e96:	2a08      	cmp	r2, #8
 8012e98:	f200 84db 	bhi.w	8013852 <_strtod_l+0xbc2>
 8012e9c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012e9e:	9007      	str	r0, [sp, #28]
 8012ea0:	2000      	movs	r0, #0
 8012ea2:	920a      	str	r2, [sp, #40]	; 0x28
 8012ea4:	4605      	mov	r5, r0
 8012ea6:	3b30      	subs	r3, #48	; 0x30
 8012ea8:	f100 0201 	add.w	r2, r0, #1
 8012eac:	d014      	beq.n	8012ed8 <_strtod_l+0x248>
 8012eae:	9907      	ldr	r1, [sp, #28]
 8012eb0:	4411      	add	r1, r2
 8012eb2:	9107      	str	r1, [sp, #28]
 8012eb4:	462a      	mov	r2, r5
 8012eb6:	eb00 0e05 	add.w	lr, r0, r5
 8012eba:	210a      	movs	r1, #10
 8012ebc:	4572      	cmp	r2, lr
 8012ebe:	d113      	bne.n	8012ee8 <_strtod_l+0x258>
 8012ec0:	182a      	adds	r2, r5, r0
 8012ec2:	2a08      	cmp	r2, #8
 8012ec4:	f105 0501 	add.w	r5, r5, #1
 8012ec8:	4405      	add	r5, r0
 8012eca:	dc1c      	bgt.n	8012f06 <_strtod_l+0x276>
 8012ecc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012ece:	220a      	movs	r2, #10
 8012ed0:	fb02 3301 	mla	r3, r2, r1, r3
 8012ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012eda:	1c59      	adds	r1, r3, #1
 8012edc:	911d      	str	r1, [sp, #116]	; 0x74
 8012ede:	785b      	ldrb	r3, [r3, #1]
 8012ee0:	4610      	mov	r0, r2
 8012ee2:	e7c9      	b.n	8012e78 <_strtod_l+0x1e8>
 8012ee4:	4638      	mov	r0, r7
 8012ee6:	e7d2      	b.n	8012e8e <_strtod_l+0x1fe>
 8012ee8:	2a08      	cmp	r2, #8
 8012eea:	dc04      	bgt.n	8012ef6 <_strtod_l+0x266>
 8012eec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8012eee:	434e      	muls	r6, r1
 8012ef0:	9609      	str	r6, [sp, #36]	; 0x24
 8012ef2:	3201      	adds	r2, #1
 8012ef4:	e7e2      	b.n	8012ebc <_strtod_l+0x22c>
 8012ef6:	f102 0c01 	add.w	ip, r2, #1
 8012efa:	f1bc 0f10 	cmp.w	ip, #16
 8012efe:	bfd8      	it	le
 8012f00:	fb01 f909 	mulle.w	r9, r1, r9
 8012f04:	e7f5      	b.n	8012ef2 <_strtod_l+0x262>
 8012f06:	2d10      	cmp	r5, #16
 8012f08:	bfdc      	itt	le
 8012f0a:	220a      	movle	r2, #10
 8012f0c:	fb02 3909 	mlale	r9, r2, r9, r3
 8012f10:	e7e1      	b.n	8012ed6 <_strtod_l+0x246>
 8012f12:	2300      	movs	r3, #0
 8012f14:	9307      	str	r3, [sp, #28]
 8012f16:	2201      	movs	r2, #1
 8012f18:	e77c      	b.n	8012e14 <_strtod_l+0x184>
 8012f1a:	f04f 0c00 	mov.w	ip, #0
 8012f1e:	f108 0302 	add.w	r3, r8, #2
 8012f22:	931d      	str	r3, [sp, #116]	; 0x74
 8012f24:	f898 3002 	ldrb.w	r3, [r8, #2]
 8012f28:	e785      	b.n	8012e36 <_strtod_l+0x1a6>
 8012f2a:	f04f 0c01 	mov.w	ip, #1
 8012f2e:	e7f6      	b.n	8012f1e <_strtod_l+0x28e>
 8012f30:	08018480 	.word	0x08018480
 8012f34:	080182cc 	.word	0x080182cc
 8012f38:	7ff00000 	.word	0x7ff00000
 8012f3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012f3e:	1c59      	adds	r1, r3, #1
 8012f40:	911d      	str	r1, [sp, #116]	; 0x74
 8012f42:	785b      	ldrb	r3, [r3, #1]
 8012f44:	2b30      	cmp	r3, #48	; 0x30
 8012f46:	d0f9      	beq.n	8012f3c <_strtod_l+0x2ac>
 8012f48:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8012f4c:	2908      	cmp	r1, #8
 8012f4e:	f63f af79 	bhi.w	8012e44 <_strtod_l+0x1b4>
 8012f52:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8012f56:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012f58:	9308      	str	r3, [sp, #32]
 8012f5a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012f5c:	1c59      	adds	r1, r3, #1
 8012f5e:	911d      	str	r1, [sp, #116]	; 0x74
 8012f60:	785b      	ldrb	r3, [r3, #1]
 8012f62:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8012f66:	2e09      	cmp	r6, #9
 8012f68:	d937      	bls.n	8012fda <_strtod_l+0x34a>
 8012f6a:	9e08      	ldr	r6, [sp, #32]
 8012f6c:	1b89      	subs	r1, r1, r6
 8012f6e:	2908      	cmp	r1, #8
 8012f70:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8012f74:	dc02      	bgt.n	8012f7c <_strtod_l+0x2ec>
 8012f76:	4576      	cmp	r6, lr
 8012f78:	bfa8      	it	ge
 8012f7a:	4676      	movge	r6, lr
 8012f7c:	f1bc 0f00 	cmp.w	ip, #0
 8012f80:	d000      	beq.n	8012f84 <_strtod_l+0x2f4>
 8012f82:	4276      	negs	r6, r6
 8012f84:	2d00      	cmp	r5, #0
 8012f86:	d14f      	bne.n	8013028 <_strtod_l+0x398>
 8012f88:	9904      	ldr	r1, [sp, #16]
 8012f8a:	4301      	orrs	r1, r0
 8012f8c:	f47f aec2 	bne.w	8012d14 <_strtod_l+0x84>
 8012f90:	2a00      	cmp	r2, #0
 8012f92:	f47f aedb 	bne.w	8012d4c <_strtod_l+0xbc>
 8012f96:	2b69      	cmp	r3, #105	; 0x69
 8012f98:	d027      	beq.n	8012fea <_strtod_l+0x35a>
 8012f9a:	dc24      	bgt.n	8012fe6 <_strtod_l+0x356>
 8012f9c:	2b49      	cmp	r3, #73	; 0x49
 8012f9e:	d024      	beq.n	8012fea <_strtod_l+0x35a>
 8012fa0:	2b4e      	cmp	r3, #78	; 0x4e
 8012fa2:	f47f aed3 	bne.w	8012d4c <_strtod_l+0xbc>
 8012fa6:	499e      	ldr	r1, [pc, #632]	; (8013220 <_strtod_l+0x590>)
 8012fa8:	a81d      	add	r0, sp, #116	; 0x74
 8012faa:	f002 f8c7 	bl	801513c <__match>
 8012fae:	2800      	cmp	r0, #0
 8012fb0:	f43f aecc 	beq.w	8012d4c <_strtod_l+0xbc>
 8012fb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012fb6:	781b      	ldrb	r3, [r3, #0]
 8012fb8:	2b28      	cmp	r3, #40	; 0x28
 8012fba:	d12d      	bne.n	8013018 <_strtod_l+0x388>
 8012fbc:	4999      	ldr	r1, [pc, #612]	; (8013224 <_strtod_l+0x594>)
 8012fbe:	aa20      	add	r2, sp, #128	; 0x80
 8012fc0:	a81d      	add	r0, sp, #116	; 0x74
 8012fc2:	f002 f8cf 	bl	8015164 <__hexnan>
 8012fc6:	2805      	cmp	r0, #5
 8012fc8:	d126      	bne.n	8013018 <_strtod_l+0x388>
 8012fca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012fcc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8012fd0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8012fd4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8012fd8:	e69c      	b.n	8012d14 <_strtod_l+0x84>
 8012fda:	210a      	movs	r1, #10
 8012fdc:	fb01 3e0e 	mla	lr, r1, lr, r3
 8012fe0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8012fe4:	e7b9      	b.n	8012f5a <_strtod_l+0x2ca>
 8012fe6:	2b6e      	cmp	r3, #110	; 0x6e
 8012fe8:	e7db      	b.n	8012fa2 <_strtod_l+0x312>
 8012fea:	498f      	ldr	r1, [pc, #572]	; (8013228 <_strtod_l+0x598>)
 8012fec:	a81d      	add	r0, sp, #116	; 0x74
 8012fee:	f002 f8a5 	bl	801513c <__match>
 8012ff2:	2800      	cmp	r0, #0
 8012ff4:	f43f aeaa 	beq.w	8012d4c <_strtod_l+0xbc>
 8012ff8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012ffa:	498c      	ldr	r1, [pc, #560]	; (801322c <_strtod_l+0x59c>)
 8012ffc:	3b01      	subs	r3, #1
 8012ffe:	a81d      	add	r0, sp, #116	; 0x74
 8013000:	931d      	str	r3, [sp, #116]	; 0x74
 8013002:	f002 f89b 	bl	801513c <__match>
 8013006:	b910      	cbnz	r0, 801300e <_strtod_l+0x37e>
 8013008:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801300a:	3301      	adds	r3, #1
 801300c:	931d      	str	r3, [sp, #116]	; 0x74
 801300e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801323c <_strtod_l+0x5ac>
 8013012:	f04f 0a00 	mov.w	sl, #0
 8013016:	e67d      	b.n	8012d14 <_strtod_l+0x84>
 8013018:	4885      	ldr	r0, [pc, #532]	; (8013230 <_strtod_l+0x5a0>)
 801301a:	f003 f8d5 	bl	80161c8 <nan>
 801301e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8013022:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8013026:	e675      	b.n	8012d14 <_strtod_l+0x84>
 8013028:	9b07      	ldr	r3, [sp, #28]
 801302a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801302c:	1af3      	subs	r3, r6, r3
 801302e:	2f00      	cmp	r7, #0
 8013030:	bf08      	it	eq
 8013032:	462f      	moveq	r7, r5
 8013034:	2d10      	cmp	r5, #16
 8013036:	9308      	str	r3, [sp, #32]
 8013038:	46a8      	mov	r8, r5
 801303a:	bfa8      	it	ge
 801303c:	f04f 0810 	movge.w	r8, #16
 8013040:	f7ed fa78 	bl	8000534 <__aeabi_ui2d>
 8013044:	2d09      	cmp	r5, #9
 8013046:	4682      	mov	sl, r0
 8013048:	468b      	mov	fp, r1
 801304a:	dd13      	ble.n	8013074 <_strtod_l+0x3e4>
 801304c:	4b79      	ldr	r3, [pc, #484]	; (8013234 <_strtod_l+0x5a4>)
 801304e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013052:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013056:	f7ed fae7 	bl	8000628 <__aeabi_dmul>
 801305a:	4682      	mov	sl, r0
 801305c:	4648      	mov	r0, r9
 801305e:	468b      	mov	fp, r1
 8013060:	f7ed fa68 	bl	8000534 <__aeabi_ui2d>
 8013064:	4602      	mov	r2, r0
 8013066:	460b      	mov	r3, r1
 8013068:	4650      	mov	r0, sl
 801306a:	4659      	mov	r1, fp
 801306c:	f7ed f926 	bl	80002bc <__adddf3>
 8013070:	4682      	mov	sl, r0
 8013072:	468b      	mov	fp, r1
 8013074:	2d0f      	cmp	r5, #15
 8013076:	dc38      	bgt.n	80130ea <_strtod_l+0x45a>
 8013078:	9b08      	ldr	r3, [sp, #32]
 801307a:	2b00      	cmp	r3, #0
 801307c:	f43f ae4a 	beq.w	8012d14 <_strtod_l+0x84>
 8013080:	dd24      	ble.n	80130cc <_strtod_l+0x43c>
 8013082:	2b16      	cmp	r3, #22
 8013084:	dc0b      	bgt.n	801309e <_strtod_l+0x40e>
 8013086:	4d6b      	ldr	r5, [pc, #428]	; (8013234 <_strtod_l+0x5a4>)
 8013088:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801308c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013090:	4652      	mov	r2, sl
 8013092:	465b      	mov	r3, fp
 8013094:	f7ed fac8 	bl	8000628 <__aeabi_dmul>
 8013098:	4682      	mov	sl, r0
 801309a:	468b      	mov	fp, r1
 801309c:	e63a      	b.n	8012d14 <_strtod_l+0x84>
 801309e:	9a08      	ldr	r2, [sp, #32]
 80130a0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80130a4:	4293      	cmp	r3, r2
 80130a6:	db20      	blt.n	80130ea <_strtod_l+0x45a>
 80130a8:	4c62      	ldr	r4, [pc, #392]	; (8013234 <_strtod_l+0x5a4>)
 80130aa:	f1c5 050f 	rsb	r5, r5, #15
 80130ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80130b2:	4652      	mov	r2, sl
 80130b4:	465b      	mov	r3, fp
 80130b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80130ba:	f7ed fab5 	bl	8000628 <__aeabi_dmul>
 80130be:	9b08      	ldr	r3, [sp, #32]
 80130c0:	1b5d      	subs	r5, r3, r5
 80130c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80130c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80130ca:	e7e3      	b.n	8013094 <_strtod_l+0x404>
 80130cc:	9b08      	ldr	r3, [sp, #32]
 80130ce:	3316      	adds	r3, #22
 80130d0:	db0b      	blt.n	80130ea <_strtod_l+0x45a>
 80130d2:	9b07      	ldr	r3, [sp, #28]
 80130d4:	4a57      	ldr	r2, [pc, #348]	; (8013234 <_strtod_l+0x5a4>)
 80130d6:	1b9e      	subs	r6, r3, r6
 80130d8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80130dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80130e0:	4650      	mov	r0, sl
 80130e2:	4659      	mov	r1, fp
 80130e4:	f7ed fbca 	bl	800087c <__aeabi_ddiv>
 80130e8:	e7d6      	b.n	8013098 <_strtod_l+0x408>
 80130ea:	9b08      	ldr	r3, [sp, #32]
 80130ec:	eba5 0808 	sub.w	r8, r5, r8
 80130f0:	4498      	add	r8, r3
 80130f2:	f1b8 0f00 	cmp.w	r8, #0
 80130f6:	dd71      	ble.n	80131dc <_strtod_l+0x54c>
 80130f8:	f018 030f 	ands.w	r3, r8, #15
 80130fc:	d00a      	beq.n	8013114 <_strtod_l+0x484>
 80130fe:	494d      	ldr	r1, [pc, #308]	; (8013234 <_strtod_l+0x5a4>)
 8013100:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013104:	4652      	mov	r2, sl
 8013106:	465b      	mov	r3, fp
 8013108:	e9d1 0100 	ldrd	r0, r1, [r1]
 801310c:	f7ed fa8c 	bl	8000628 <__aeabi_dmul>
 8013110:	4682      	mov	sl, r0
 8013112:	468b      	mov	fp, r1
 8013114:	f038 080f 	bics.w	r8, r8, #15
 8013118:	d04d      	beq.n	80131b6 <_strtod_l+0x526>
 801311a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801311e:	dd22      	ble.n	8013166 <_strtod_l+0x4d6>
 8013120:	2500      	movs	r5, #0
 8013122:	462e      	mov	r6, r5
 8013124:	9509      	str	r5, [sp, #36]	; 0x24
 8013126:	9507      	str	r5, [sp, #28]
 8013128:	2322      	movs	r3, #34	; 0x22
 801312a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801323c <_strtod_l+0x5ac>
 801312e:	6023      	str	r3, [r4, #0]
 8013130:	f04f 0a00 	mov.w	sl, #0
 8013134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013136:	2b00      	cmp	r3, #0
 8013138:	f43f adec 	beq.w	8012d14 <_strtod_l+0x84>
 801313c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801313e:	4620      	mov	r0, r4
 8013140:	f002 f98c 	bl	801545c <_Bfree>
 8013144:	9907      	ldr	r1, [sp, #28]
 8013146:	4620      	mov	r0, r4
 8013148:	f002 f988 	bl	801545c <_Bfree>
 801314c:	4631      	mov	r1, r6
 801314e:	4620      	mov	r0, r4
 8013150:	f002 f984 	bl	801545c <_Bfree>
 8013154:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013156:	4620      	mov	r0, r4
 8013158:	f002 f980 	bl	801545c <_Bfree>
 801315c:	4629      	mov	r1, r5
 801315e:	4620      	mov	r0, r4
 8013160:	f002 f97c 	bl	801545c <_Bfree>
 8013164:	e5d6      	b.n	8012d14 <_strtod_l+0x84>
 8013166:	2300      	movs	r3, #0
 8013168:	ea4f 1828 	mov.w	r8, r8, asr #4
 801316c:	4650      	mov	r0, sl
 801316e:	4659      	mov	r1, fp
 8013170:	4699      	mov	r9, r3
 8013172:	f1b8 0f01 	cmp.w	r8, #1
 8013176:	dc21      	bgt.n	80131bc <_strtod_l+0x52c>
 8013178:	b10b      	cbz	r3, 801317e <_strtod_l+0x4ee>
 801317a:	4682      	mov	sl, r0
 801317c:	468b      	mov	fp, r1
 801317e:	4b2e      	ldr	r3, [pc, #184]	; (8013238 <_strtod_l+0x5a8>)
 8013180:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8013184:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8013188:	4652      	mov	r2, sl
 801318a:	465b      	mov	r3, fp
 801318c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8013190:	f7ed fa4a 	bl	8000628 <__aeabi_dmul>
 8013194:	4b29      	ldr	r3, [pc, #164]	; (801323c <_strtod_l+0x5ac>)
 8013196:	460a      	mov	r2, r1
 8013198:	400b      	ands	r3, r1
 801319a:	4929      	ldr	r1, [pc, #164]	; (8013240 <_strtod_l+0x5b0>)
 801319c:	428b      	cmp	r3, r1
 801319e:	4682      	mov	sl, r0
 80131a0:	d8be      	bhi.n	8013120 <_strtod_l+0x490>
 80131a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80131a6:	428b      	cmp	r3, r1
 80131a8:	bf86      	itte	hi
 80131aa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8013244 <_strtod_l+0x5b4>
 80131ae:	f04f 3aff 	movhi.w	sl, #4294967295
 80131b2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80131b6:	2300      	movs	r3, #0
 80131b8:	9304      	str	r3, [sp, #16]
 80131ba:	e081      	b.n	80132c0 <_strtod_l+0x630>
 80131bc:	f018 0f01 	tst.w	r8, #1
 80131c0:	d007      	beq.n	80131d2 <_strtod_l+0x542>
 80131c2:	4b1d      	ldr	r3, [pc, #116]	; (8013238 <_strtod_l+0x5a8>)
 80131c4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80131c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131cc:	f7ed fa2c 	bl	8000628 <__aeabi_dmul>
 80131d0:	2301      	movs	r3, #1
 80131d2:	f109 0901 	add.w	r9, r9, #1
 80131d6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80131da:	e7ca      	b.n	8013172 <_strtod_l+0x4e2>
 80131dc:	d0eb      	beq.n	80131b6 <_strtod_l+0x526>
 80131de:	f1c8 0800 	rsb	r8, r8, #0
 80131e2:	f018 020f 	ands.w	r2, r8, #15
 80131e6:	d00a      	beq.n	80131fe <_strtod_l+0x56e>
 80131e8:	4b12      	ldr	r3, [pc, #72]	; (8013234 <_strtod_l+0x5a4>)
 80131ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80131ee:	4650      	mov	r0, sl
 80131f0:	4659      	mov	r1, fp
 80131f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131f6:	f7ed fb41 	bl	800087c <__aeabi_ddiv>
 80131fa:	4682      	mov	sl, r0
 80131fc:	468b      	mov	fp, r1
 80131fe:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013202:	d0d8      	beq.n	80131b6 <_strtod_l+0x526>
 8013204:	f1b8 0f1f 	cmp.w	r8, #31
 8013208:	dd1e      	ble.n	8013248 <_strtod_l+0x5b8>
 801320a:	2500      	movs	r5, #0
 801320c:	462e      	mov	r6, r5
 801320e:	9509      	str	r5, [sp, #36]	; 0x24
 8013210:	9507      	str	r5, [sp, #28]
 8013212:	2322      	movs	r3, #34	; 0x22
 8013214:	f04f 0a00 	mov.w	sl, #0
 8013218:	f04f 0b00 	mov.w	fp, #0
 801321c:	6023      	str	r3, [r4, #0]
 801321e:	e789      	b.n	8013134 <_strtod_l+0x4a4>
 8013220:	0801829e 	.word	0x0801829e
 8013224:	080182e0 	.word	0x080182e0
 8013228:	08018296 	.word	0x08018296
 801322c:	08018323 	.word	0x08018323
 8013230:	08018177 	.word	0x08018177
 8013234:	08018520 	.word	0x08018520
 8013238:	080184f8 	.word	0x080184f8
 801323c:	7ff00000 	.word	0x7ff00000
 8013240:	7ca00000 	.word	0x7ca00000
 8013244:	7fefffff 	.word	0x7fefffff
 8013248:	f018 0310 	ands.w	r3, r8, #16
 801324c:	bf18      	it	ne
 801324e:	236a      	movne	r3, #106	; 0x6a
 8013250:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8013608 <_strtod_l+0x978>
 8013254:	9304      	str	r3, [sp, #16]
 8013256:	4650      	mov	r0, sl
 8013258:	4659      	mov	r1, fp
 801325a:	2300      	movs	r3, #0
 801325c:	f018 0f01 	tst.w	r8, #1
 8013260:	d004      	beq.n	801326c <_strtod_l+0x5dc>
 8013262:	e9d9 2300 	ldrd	r2, r3, [r9]
 8013266:	f7ed f9df 	bl	8000628 <__aeabi_dmul>
 801326a:	2301      	movs	r3, #1
 801326c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8013270:	f109 0908 	add.w	r9, r9, #8
 8013274:	d1f2      	bne.n	801325c <_strtod_l+0x5cc>
 8013276:	b10b      	cbz	r3, 801327c <_strtod_l+0x5ec>
 8013278:	4682      	mov	sl, r0
 801327a:	468b      	mov	fp, r1
 801327c:	9b04      	ldr	r3, [sp, #16]
 801327e:	b1bb      	cbz	r3, 80132b0 <_strtod_l+0x620>
 8013280:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8013284:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013288:	2b00      	cmp	r3, #0
 801328a:	4659      	mov	r1, fp
 801328c:	dd10      	ble.n	80132b0 <_strtod_l+0x620>
 801328e:	2b1f      	cmp	r3, #31
 8013290:	f340 8128 	ble.w	80134e4 <_strtod_l+0x854>
 8013294:	2b34      	cmp	r3, #52	; 0x34
 8013296:	bfde      	ittt	le
 8013298:	3b20      	suble	r3, #32
 801329a:	f04f 32ff 	movle.w	r2, #4294967295
 801329e:	fa02 f303 	lslle.w	r3, r2, r3
 80132a2:	f04f 0a00 	mov.w	sl, #0
 80132a6:	bfcc      	ite	gt
 80132a8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80132ac:	ea03 0b01 	andle.w	fp, r3, r1
 80132b0:	2200      	movs	r2, #0
 80132b2:	2300      	movs	r3, #0
 80132b4:	4650      	mov	r0, sl
 80132b6:	4659      	mov	r1, fp
 80132b8:	f7ed fc1e 	bl	8000af8 <__aeabi_dcmpeq>
 80132bc:	2800      	cmp	r0, #0
 80132be:	d1a4      	bne.n	801320a <_strtod_l+0x57a>
 80132c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132c2:	9300      	str	r3, [sp, #0]
 80132c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80132c6:	462b      	mov	r3, r5
 80132c8:	463a      	mov	r2, r7
 80132ca:	4620      	mov	r0, r4
 80132cc:	f002 f932 	bl	8015534 <__s2b>
 80132d0:	9009      	str	r0, [sp, #36]	; 0x24
 80132d2:	2800      	cmp	r0, #0
 80132d4:	f43f af24 	beq.w	8013120 <_strtod_l+0x490>
 80132d8:	9b07      	ldr	r3, [sp, #28]
 80132da:	1b9e      	subs	r6, r3, r6
 80132dc:	9b08      	ldr	r3, [sp, #32]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	bfb4      	ite	lt
 80132e2:	4633      	movlt	r3, r6
 80132e4:	2300      	movge	r3, #0
 80132e6:	9310      	str	r3, [sp, #64]	; 0x40
 80132e8:	9b08      	ldr	r3, [sp, #32]
 80132ea:	2500      	movs	r5, #0
 80132ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80132f0:	9318      	str	r3, [sp, #96]	; 0x60
 80132f2:	462e      	mov	r6, r5
 80132f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132f6:	4620      	mov	r0, r4
 80132f8:	6859      	ldr	r1, [r3, #4]
 80132fa:	f002 f86f 	bl	80153dc <_Balloc>
 80132fe:	9007      	str	r0, [sp, #28]
 8013300:	2800      	cmp	r0, #0
 8013302:	f43f af11 	beq.w	8013128 <_strtod_l+0x498>
 8013306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013308:	691a      	ldr	r2, [r3, #16]
 801330a:	3202      	adds	r2, #2
 801330c:	f103 010c 	add.w	r1, r3, #12
 8013310:	0092      	lsls	r2, r2, #2
 8013312:	300c      	adds	r0, #12
 8013314:	f7fe fc8e 	bl	8011c34 <memcpy>
 8013318:	ec4b ab10 	vmov	d0, sl, fp
 801331c:	aa20      	add	r2, sp, #128	; 0x80
 801331e:	a91f      	add	r1, sp, #124	; 0x7c
 8013320:	4620      	mov	r0, r4
 8013322:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8013326:	f002 fc41 	bl	8015bac <__d2b>
 801332a:	901e      	str	r0, [sp, #120]	; 0x78
 801332c:	2800      	cmp	r0, #0
 801332e:	f43f aefb 	beq.w	8013128 <_strtod_l+0x498>
 8013332:	2101      	movs	r1, #1
 8013334:	4620      	mov	r0, r4
 8013336:	f002 f997 	bl	8015668 <__i2b>
 801333a:	4606      	mov	r6, r0
 801333c:	2800      	cmp	r0, #0
 801333e:	f43f aef3 	beq.w	8013128 <_strtod_l+0x498>
 8013342:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013344:	9904      	ldr	r1, [sp, #16]
 8013346:	2b00      	cmp	r3, #0
 8013348:	bfab      	itete	ge
 801334a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801334c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801334e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8013350:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8013354:	bfac      	ite	ge
 8013356:	eb03 0902 	addge.w	r9, r3, r2
 801335a:	1ad7      	sublt	r7, r2, r3
 801335c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801335e:	eba3 0801 	sub.w	r8, r3, r1
 8013362:	4490      	add	r8, r2
 8013364:	4ba3      	ldr	r3, [pc, #652]	; (80135f4 <_strtod_l+0x964>)
 8013366:	f108 38ff 	add.w	r8, r8, #4294967295
 801336a:	4598      	cmp	r8, r3
 801336c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013370:	f280 80cc 	bge.w	801350c <_strtod_l+0x87c>
 8013374:	eba3 0308 	sub.w	r3, r3, r8
 8013378:	2b1f      	cmp	r3, #31
 801337a:	eba2 0203 	sub.w	r2, r2, r3
 801337e:	f04f 0101 	mov.w	r1, #1
 8013382:	f300 80b6 	bgt.w	80134f2 <_strtod_l+0x862>
 8013386:	fa01 f303 	lsl.w	r3, r1, r3
 801338a:	9311      	str	r3, [sp, #68]	; 0x44
 801338c:	2300      	movs	r3, #0
 801338e:	930c      	str	r3, [sp, #48]	; 0x30
 8013390:	eb09 0802 	add.w	r8, r9, r2
 8013394:	9b04      	ldr	r3, [sp, #16]
 8013396:	45c1      	cmp	r9, r8
 8013398:	4417      	add	r7, r2
 801339a:	441f      	add	r7, r3
 801339c:	464b      	mov	r3, r9
 801339e:	bfa8      	it	ge
 80133a0:	4643      	movge	r3, r8
 80133a2:	42bb      	cmp	r3, r7
 80133a4:	bfa8      	it	ge
 80133a6:	463b      	movge	r3, r7
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	bfc2      	ittt	gt
 80133ac:	eba8 0803 	subgt.w	r8, r8, r3
 80133b0:	1aff      	subgt	r7, r7, r3
 80133b2:	eba9 0903 	subgt.w	r9, r9, r3
 80133b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	dd17      	ble.n	80133ec <_strtod_l+0x75c>
 80133bc:	4631      	mov	r1, r6
 80133be:	461a      	mov	r2, r3
 80133c0:	4620      	mov	r0, r4
 80133c2:	f002 fa0d 	bl	80157e0 <__pow5mult>
 80133c6:	4606      	mov	r6, r0
 80133c8:	2800      	cmp	r0, #0
 80133ca:	f43f aead 	beq.w	8013128 <_strtod_l+0x498>
 80133ce:	4601      	mov	r1, r0
 80133d0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80133d2:	4620      	mov	r0, r4
 80133d4:	f002 f95e 	bl	8015694 <__multiply>
 80133d8:	900f      	str	r0, [sp, #60]	; 0x3c
 80133da:	2800      	cmp	r0, #0
 80133dc:	f43f aea4 	beq.w	8013128 <_strtod_l+0x498>
 80133e0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80133e2:	4620      	mov	r0, r4
 80133e4:	f002 f83a 	bl	801545c <_Bfree>
 80133e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80133ea:	931e      	str	r3, [sp, #120]	; 0x78
 80133ec:	f1b8 0f00 	cmp.w	r8, #0
 80133f0:	f300 8091 	bgt.w	8013516 <_strtod_l+0x886>
 80133f4:	9b08      	ldr	r3, [sp, #32]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	dd08      	ble.n	801340c <_strtod_l+0x77c>
 80133fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80133fc:	9907      	ldr	r1, [sp, #28]
 80133fe:	4620      	mov	r0, r4
 8013400:	f002 f9ee 	bl	80157e0 <__pow5mult>
 8013404:	9007      	str	r0, [sp, #28]
 8013406:	2800      	cmp	r0, #0
 8013408:	f43f ae8e 	beq.w	8013128 <_strtod_l+0x498>
 801340c:	2f00      	cmp	r7, #0
 801340e:	dd08      	ble.n	8013422 <_strtod_l+0x792>
 8013410:	9907      	ldr	r1, [sp, #28]
 8013412:	463a      	mov	r2, r7
 8013414:	4620      	mov	r0, r4
 8013416:	f002 fa3d 	bl	8015894 <__lshift>
 801341a:	9007      	str	r0, [sp, #28]
 801341c:	2800      	cmp	r0, #0
 801341e:	f43f ae83 	beq.w	8013128 <_strtod_l+0x498>
 8013422:	f1b9 0f00 	cmp.w	r9, #0
 8013426:	dd08      	ble.n	801343a <_strtod_l+0x7aa>
 8013428:	4631      	mov	r1, r6
 801342a:	464a      	mov	r2, r9
 801342c:	4620      	mov	r0, r4
 801342e:	f002 fa31 	bl	8015894 <__lshift>
 8013432:	4606      	mov	r6, r0
 8013434:	2800      	cmp	r0, #0
 8013436:	f43f ae77 	beq.w	8013128 <_strtod_l+0x498>
 801343a:	9a07      	ldr	r2, [sp, #28]
 801343c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801343e:	4620      	mov	r0, r4
 8013440:	f002 fab0 	bl	80159a4 <__mdiff>
 8013444:	4605      	mov	r5, r0
 8013446:	2800      	cmp	r0, #0
 8013448:	f43f ae6e 	beq.w	8013128 <_strtod_l+0x498>
 801344c:	68c3      	ldr	r3, [r0, #12]
 801344e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013450:	2300      	movs	r3, #0
 8013452:	60c3      	str	r3, [r0, #12]
 8013454:	4631      	mov	r1, r6
 8013456:	f002 fa89 	bl	801596c <__mcmp>
 801345a:	2800      	cmp	r0, #0
 801345c:	da65      	bge.n	801352a <_strtod_l+0x89a>
 801345e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013460:	ea53 030a 	orrs.w	r3, r3, sl
 8013464:	f040 8087 	bne.w	8013576 <_strtod_l+0x8e6>
 8013468:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801346c:	2b00      	cmp	r3, #0
 801346e:	f040 8082 	bne.w	8013576 <_strtod_l+0x8e6>
 8013472:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013476:	0d1b      	lsrs	r3, r3, #20
 8013478:	051b      	lsls	r3, r3, #20
 801347a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801347e:	d97a      	bls.n	8013576 <_strtod_l+0x8e6>
 8013480:	696b      	ldr	r3, [r5, #20]
 8013482:	b913      	cbnz	r3, 801348a <_strtod_l+0x7fa>
 8013484:	692b      	ldr	r3, [r5, #16]
 8013486:	2b01      	cmp	r3, #1
 8013488:	dd75      	ble.n	8013576 <_strtod_l+0x8e6>
 801348a:	4629      	mov	r1, r5
 801348c:	2201      	movs	r2, #1
 801348e:	4620      	mov	r0, r4
 8013490:	f002 fa00 	bl	8015894 <__lshift>
 8013494:	4631      	mov	r1, r6
 8013496:	4605      	mov	r5, r0
 8013498:	f002 fa68 	bl	801596c <__mcmp>
 801349c:	2800      	cmp	r0, #0
 801349e:	dd6a      	ble.n	8013576 <_strtod_l+0x8e6>
 80134a0:	9904      	ldr	r1, [sp, #16]
 80134a2:	4a55      	ldr	r2, [pc, #340]	; (80135f8 <_strtod_l+0x968>)
 80134a4:	465b      	mov	r3, fp
 80134a6:	2900      	cmp	r1, #0
 80134a8:	f000 8085 	beq.w	80135b6 <_strtod_l+0x926>
 80134ac:	ea02 010b 	and.w	r1, r2, fp
 80134b0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80134b4:	dc7f      	bgt.n	80135b6 <_strtod_l+0x926>
 80134b6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80134ba:	f77f aeaa 	ble.w	8013212 <_strtod_l+0x582>
 80134be:	4a4f      	ldr	r2, [pc, #316]	; (80135fc <_strtod_l+0x96c>)
 80134c0:	2300      	movs	r3, #0
 80134c2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80134c6:	4650      	mov	r0, sl
 80134c8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80134cc:	4659      	mov	r1, fp
 80134ce:	f7ed f8ab 	bl	8000628 <__aeabi_dmul>
 80134d2:	460b      	mov	r3, r1
 80134d4:	4303      	orrs	r3, r0
 80134d6:	bf08      	it	eq
 80134d8:	2322      	moveq	r3, #34	; 0x22
 80134da:	4682      	mov	sl, r0
 80134dc:	468b      	mov	fp, r1
 80134de:	bf08      	it	eq
 80134e0:	6023      	streq	r3, [r4, #0]
 80134e2:	e62b      	b.n	801313c <_strtod_l+0x4ac>
 80134e4:	f04f 32ff 	mov.w	r2, #4294967295
 80134e8:	fa02 f303 	lsl.w	r3, r2, r3
 80134ec:	ea03 0a0a 	and.w	sl, r3, sl
 80134f0:	e6de      	b.n	80132b0 <_strtod_l+0x620>
 80134f2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80134f6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80134fa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80134fe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8013502:	fa01 f308 	lsl.w	r3, r1, r8
 8013506:	930c      	str	r3, [sp, #48]	; 0x30
 8013508:	9111      	str	r1, [sp, #68]	; 0x44
 801350a:	e741      	b.n	8013390 <_strtod_l+0x700>
 801350c:	2300      	movs	r3, #0
 801350e:	930c      	str	r3, [sp, #48]	; 0x30
 8013510:	2301      	movs	r3, #1
 8013512:	9311      	str	r3, [sp, #68]	; 0x44
 8013514:	e73c      	b.n	8013390 <_strtod_l+0x700>
 8013516:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013518:	4642      	mov	r2, r8
 801351a:	4620      	mov	r0, r4
 801351c:	f002 f9ba 	bl	8015894 <__lshift>
 8013520:	901e      	str	r0, [sp, #120]	; 0x78
 8013522:	2800      	cmp	r0, #0
 8013524:	f47f af66 	bne.w	80133f4 <_strtod_l+0x764>
 8013528:	e5fe      	b.n	8013128 <_strtod_l+0x498>
 801352a:	465f      	mov	r7, fp
 801352c:	d16e      	bne.n	801360c <_strtod_l+0x97c>
 801352e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013530:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013534:	b342      	cbz	r2, 8013588 <_strtod_l+0x8f8>
 8013536:	4a32      	ldr	r2, [pc, #200]	; (8013600 <_strtod_l+0x970>)
 8013538:	4293      	cmp	r3, r2
 801353a:	d128      	bne.n	801358e <_strtod_l+0x8fe>
 801353c:	9b04      	ldr	r3, [sp, #16]
 801353e:	4650      	mov	r0, sl
 8013540:	b1eb      	cbz	r3, 801357e <_strtod_l+0x8ee>
 8013542:	4a2d      	ldr	r2, [pc, #180]	; (80135f8 <_strtod_l+0x968>)
 8013544:	403a      	ands	r2, r7
 8013546:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801354a:	f04f 31ff 	mov.w	r1, #4294967295
 801354e:	d819      	bhi.n	8013584 <_strtod_l+0x8f4>
 8013550:	0d12      	lsrs	r2, r2, #20
 8013552:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013556:	fa01 f303 	lsl.w	r3, r1, r3
 801355a:	4298      	cmp	r0, r3
 801355c:	d117      	bne.n	801358e <_strtod_l+0x8fe>
 801355e:	4b29      	ldr	r3, [pc, #164]	; (8013604 <_strtod_l+0x974>)
 8013560:	429f      	cmp	r7, r3
 8013562:	d102      	bne.n	801356a <_strtod_l+0x8da>
 8013564:	3001      	adds	r0, #1
 8013566:	f43f addf 	beq.w	8013128 <_strtod_l+0x498>
 801356a:	4b23      	ldr	r3, [pc, #140]	; (80135f8 <_strtod_l+0x968>)
 801356c:	403b      	ands	r3, r7
 801356e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8013572:	f04f 0a00 	mov.w	sl, #0
 8013576:	9b04      	ldr	r3, [sp, #16]
 8013578:	2b00      	cmp	r3, #0
 801357a:	d1a0      	bne.n	80134be <_strtod_l+0x82e>
 801357c:	e5de      	b.n	801313c <_strtod_l+0x4ac>
 801357e:	f04f 33ff 	mov.w	r3, #4294967295
 8013582:	e7ea      	b.n	801355a <_strtod_l+0x8ca>
 8013584:	460b      	mov	r3, r1
 8013586:	e7e8      	b.n	801355a <_strtod_l+0x8ca>
 8013588:	ea53 030a 	orrs.w	r3, r3, sl
 801358c:	d088      	beq.n	80134a0 <_strtod_l+0x810>
 801358e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013590:	b1db      	cbz	r3, 80135ca <_strtod_l+0x93a>
 8013592:	423b      	tst	r3, r7
 8013594:	d0ef      	beq.n	8013576 <_strtod_l+0x8e6>
 8013596:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013598:	9a04      	ldr	r2, [sp, #16]
 801359a:	4650      	mov	r0, sl
 801359c:	4659      	mov	r1, fp
 801359e:	b1c3      	cbz	r3, 80135d2 <_strtod_l+0x942>
 80135a0:	f7ff fb58 	bl	8012c54 <sulp>
 80135a4:	4602      	mov	r2, r0
 80135a6:	460b      	mov	r3, r1
 80135a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80135ac:	f7ec fe86 	bl	80002bc <__adddf3>
 80135b0:	4682      	mov	sl, r0
 80135b2:	468b      	mov	fp, r1
 80135b4:	e7df      	b.n	8013576 <_strtod_l+0x8e6>
 80135b6:	4013      	ands	r3, r2
 80135b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80135bc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80135c0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80135c4:	f04f 3aff 	mov.w	sl, #4294967295
 80135c8:	e7d5      	b.n	8013576 <_strtod_l+0x8e6>
 80135ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80135cc:	ea13 0f0a 	tst.w	r3, sl
 80135d0:	e7e0      	b.n	8013594 <_strtod_l+0x904>
 80135d2:	f7ff fb3f 	bl	8012c54 <sulp>
 80135d6:	4602      	mov	r2, r0
 80135d8:	460b      	mov	r3, r1
 80135da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80135de:	f7ec fe6b 	bl	80002b8 <__aeabi_dsub>
 80135e2:	2200      	movs	r2, #0
 80135e4:	2300      	movs	r3, #0
 80135e6:	4682      	mov	sl, r0
 80135e8:	468b      	mov	fp, r1
 80135ea:	f7ed fa85 	bl	8000af8 <__aeabi_dcmpeq>
 80135ee:	2800      	cmp	r0, #0
 80135f0:	d0c1      	beq.n	8013576 <_strtod_l+0x8e6>
 80135f2:	e60e      	b.n	8013212 <_strtod_l+0x582>
 80135f4:	fffffc02 	.word	0xfffffc02
 80135f8:	7ff00000 	.word	0x7ff00000
 80135fc:	39500000 	.word	0x39500000
 8013600:	000fffff 	.word	0x000fffff
 8013604:	7fefffff 	.word	0x7fefffff
 8013608:	080182f8 	.word	0x080182f8
 801360c:	4631      	mov	r1, r6
 801360e:	4628      	mov	r0, r5
 8013610:	f002 fb28 	bl	8015c64 <__ratio>
 8013614:	ec59 8b10 	vmov	r8, r9, d0
 8013618:	ee10 0a10 	vmov	r0, s0
 801361c:	2200      	movs	r2, #0
 801361e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013622:	4649      	mov	r1, r9
 8013624:	f7ed fa7c 	bl	8000b20 <__aeabi_dcmple>
 8013628:	2800      	cmp	r0, #0
 801362a:	d07c      	beq.n	8013726 <_strtod_l+0xa96>
 801362c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801362e:	2b00      	cmp	r3, #0
 8013630:	d04c      	beq.n	80136cc <_strtod_l+0xa3c>
 8013632:	4b95      	ldr	r3, [pc, #596]	; (8013888 <_strtod_l+0xbf8>)
 8013634:	2200      	movs	r2, #0
 8013636:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801363a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8013888 <_strtod_l+0xbf8>
 801363e:	f04f 0800 	mov.w	r8, #0
 8013642:	4b92      	ldr	r3, [pc, #584]	; (801388c <_strtod_l+0xbfc>)
 8013644:	403b      	ands	r3, r7
 8013646:	9311      	str	r3, [sp, #68]	; 0x44
 8013648:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801364a:	4b91      	ldr	r3, [pc, #580]	; (8013890 <_strtod_l+0xc00>)
 801364c:	429a      	cmp	r2, r3
 801364e:	f040 80b2 	bne.w	80137b6 <_strtod_l+0xb26>
 8013652:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013656:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801365a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801365e:	ec4b ab10 	vmov	d0, sl, fp
 8013662:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8013666:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801366a:	f002 fa23 	bl	8015ab4 <__ulp>
 801366e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013672:	ec53 2b10 	vmov	r2, r3, d0
 8013676:	f7ec ffd7 	bl	8000628 <__aeabi_dmul>
 801367a:	4652      	mov	r2, sl
 801367c:	465b      	mov	r3, fp
 801367e:	f7ec fe1d 	bl	80002bc <__adddf3>
 8013682:	460b      	mov	r3, r1
 8013684:	4981      	ldr	r1, [pc, #516]	; (801388c <_strtod_l+0xbfc>)
 8013686:	4a83      	ldr	r2, [pc, #524]	; (8013894 <_strtod_l+0xc04>)
 8013688:	4019      	ands	r1, r3
 801368a:	4291      	cmp	r1, r2
 801368c:	4682      	mov	sl, r0
 801368e:	d95e      	bls.n	801374e <_strtod_l+0xabe>
 8013690:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013692:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013696:	4293      	cmp	r3, r2
 8013698:	d103      	bne.n	80136a2 <_strtod_l+0xa12>
 801369a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801369c:	3301      	adds	r3, #1
 801369e:	f43f ad43 	beq.w	8013128 <_strtod_l+0x498>
 80136a2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80138a0 <_strtod_l+0xc10>
 80136a6:	f04f 3aff 	mov.w	sl, #4294967295
 80136aa:	991e      	ldr	r1, [sp, #120]	; 0x78
 80136ac:	4620      	mov	r0, r4
 80136ae:	f001 fed5 	bl	801545c <_Bfree>
 80136b2:	9907      	ldr	r1, [sp, #28]
 80136b4:	4620      	mov	r0, r4
 80136b6:	f001 fed1 	bl	801545c <_Bfree>
 80136ba:	4631      	mov	r1, r6
 80136bc:	4620      	mov	r0, r4
 80136be:	f001 fecd 	bl	801545c <_Bfree>
 80136c2:	4629      	mov	r1, r5
 80136c4:	4620      	mov	r0, r4
 80136c6:	f001 fec9 	bl	801545c <_Bfree>
 80136ca:	e613      	b.n	80132f4 <_strtod_l+0x664>
 80136cc:	f1ba 0f00 	cmp.w	sl, #0
 80136d0:	d11b      	bne.n	801370a <_strtod_l+0xa7a>
 80136d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80136d6:	b9f3      	cbnz	r3, 8013716 <_strtod_l+0xa86>
 80136d8:	4b6b      	ldr	r3, [pc, #428]	; (8013888 <_strtod_l+0xbf8>)
 80136da:	2200      	movs	r2, #0
 80136dc:	4640      	mov	r0, r8
 80136de:	4649      	mov	r1, r9
 80136e0:	f7ed fa14 	bl	8000b0c <__aeabi_dcmplt>
 80136e4:	b9d0      	cbnz	r0, 801371c <_strtod_l+0xa8c>
 80136e6:	4640      	mov	r0, r8
 80136e8:	4649      	mov	r1, r9
 80136ea:	4b6b      	ldr	r3, [pc, #428]	; (8013898 <_strtod_l+0xc08>)
 80136ec:	2200      	movs	r2, #0
 80136ee:	f7ec ff9b 	bl	8000628 <__aeabi_dmul>
 80136f2:	4680      	mov	r8, r0
 80136f4:	4689      	mov	r9, r1
 80136f6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80136fa:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80136fe:	931b      	str	r3, [sp, #108]	; 0x6c
 8013700:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8013704:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8013708:	e79b      	b.n	8013642 <_strtod_l+0x9b2>
 801370a:	f1ba 0f01 	cmp.w	sl, #1
 801370e:	d102      	bne.n	8013716 <_strtod_l+0xa86>
 8013710:	2f00      	cmp	r7, #0
 8013712:	f43f ad7e 	beq.w	8013212 <_strtod_l+0x582>
 8013716:	4b61      	ldr	r3, [pc, #388]	; (801389c <_strtod_l+0xc0c>)
 8013718:	2200      	movs	r2, #0
 801371a:	e78c      	b.n	8013636 <_strtod_l+0x9a6>
 801371c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8013898 <_strtod_l+0xc08>
 8013720:	f04f 0800 	mov.w	r8, #0
 8013724:	e7e7      	b.n	80136f6 <_strtod_l+0xa66>
 8013726:	4b5c      	ldr	r3, [pc, #368]	; (8013898 <_strtod_l+0xc08>)
 8013728:	4640      	mov	r0, r8
 801372a:	4649      	mov	r1, r9
 801372c:	2200      	movs	r2, #0
 801372e:	f7ec ff7b 	bl	8000628 <__aeabi_dmul>
 8013732:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013734:	4680      	mov	r8, r0
 8013736:	4689      	mov	r9, r1
 8013738:	b933      	cbnz	r3, 8013748 <_strtod_l+0xab8>
 801373a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801373e:	9012      	str	r0, [sp, #72]	; 0x48
 8013740:	9313      	str	r3, [sp, #76]	; 0x4c
 8013742:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8013746:	e7dd      	b.n	8013704 <_strtod_l+0xa74>
 8013748:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801374c:	e7f9      	b.n	8013742 <_strtod_l+0xab2>
 801374e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8013752:	9b04      	ldr	r3, [sp, #16]
 8013754:	2b00      	cmp	r3, #0
 8013756:	d1a8      	bne.n	80136aa <_strtod_l+0xa1a>
 8013758:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801375c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801375e:	0d1b      	lsrs	r3, r3, #20
 8013760:	051b      	lsls	r3, r3, #20
 8013762:	429a      	cmp	r2, r3
 8013764:	d1a1      	bne.n	80136aa <_strtod_l+0xa1a>
 8013766:	4640      	mov	r0, r8
 8013768:	4649      	mov	r1, r9
 801376a:	f7ed fabd 	bl	8000ce8 <__aeabi_d2lz>
 801376e:	f7ec ff2d 	bl	80005cc <__aeabi_l2d>
 8013772:	4602      	mov	r2, r0
 8013774:	460b      	mov	r3, r1
 8013776:	4640      	mov	r0, r8
 8013778:	4649      	mov	r1, r9
 801377a:	f7ec fd9d 	bl	80002b8 <__aeabi_dsub>
 801377e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013780:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013784:	ea43 030a 	orr.w	r3, r3, sl
 8013788:	4313      	orrs	r3, r2
 801378a:	4680      	mov	r8, r0
 801378c:	4689      	mov	r9, r1
 801378e:	d053      	beq.n	8013838 <_strtod_l+0xba8>
 8013790:	a335      	add	r3, pc, #212	; (adr r3, 8013868 <_strtod_l+0xbd8>)
 8013792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013796:	f7ed f9b9 	bl	8000b0c <__aeabi_dcmplt>
 801379a:	2800      	cmp	r0, #0
 801379c:	f47f acce 	bne.w	801313c <_strtod_l+0x4ac>
 80137a0:	a333      	add	r3, pc, #204	; (adr r3, 8013870 <_strtod_l+0xbe0>)
 80137a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137a6:	4640      	mov	r0, r8
 80137a8:	4649      	mov	r1, r9
 80137aa:	f7ed f9cd 	bl	8000b48 <__aeabi_dcmpgt>
 80137ae:	2800      	cmp	r0, #0
 80137b0:	f43f af7b 	beq.w	80136aa <_strtod_l+0xa1a>
 80137b4:	e4c2      	b.n	801313c <_strtod_l+0x4ac>
 80137b6:	9b04      	ldr	r3, [sp, #16]
 80137b8:	b333      	cbz	r3, 8013808 <_strtod_l+0xb78>
 80137ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80137bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80137c0:	d822      	bhi.n	8013808 <_strtod_l+0xb78>
 80137c2:	a32d      	add	r3, pc, #180	; (adr r3, 8013878 <_strtod_l+0xbe8>)
 80137c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137c8:	4640      	mov	r0, r8
 80137ca:	4649      	mov	r1, r9
 80137cc:	f7ed f9a8 	bl	8000b20 <__aeabi_dcmple>
 80137d0:	b1a0      	cbz	r0, 80137fc <_strtod_l+0xb6c>
 80137d2:	4649      	mov	r1, r9
 80137d4:	4640      	mov	r0, r8
 80137d6:	f7ed f9ff 	bl	8000bd8 <__aeabi_d2uiz>
 80137da:	2801      	cmp	r0, #1
 80137dc:	bf38      	it	cc
 80137de:	2001      	movcc	r0, #1
 80137e0:	f7ec fea8 	bl	8000534 <__aeabi_ui2d>
 80137e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80137e6:	4680      	mov	r8, r0
 80137e8:	4689      	mov	r9, r1
 80137ea:	bb13      	cbnz	r3, 8013832 <_strtod_l+0xba2>
 80137ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80137f0:	9014      	str	r0, [sp, #80]	; 0x50
 80137f2:	9315      	str	r3, [sp, #84]	; 0x54
 80137f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80137f8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80137fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80137fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013800:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013804:	1a9b      	subs	r3, r3, r2
 8013806:	930d      	str	r3, [sp, #52]	; 0x34
 8013808:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801380c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8013810:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013814:	f002 f94e 	bl	8015ab4 <__ulp>
 8013818:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801381c:	ec53 2b10 	vmov	r2, r3, d0
 8013820:	f7ec ff02 	bl	8000628 <__aeabi_dmul>
 8013824:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013828:	f7ec fd48 	bl	80002bc <__adddf3>
 801382c:	4682      	mov	sl, r0
 801382e:	468b      	mov	fp, r1
 8013830:	e78f      	b.n	8013752 <_strtod_l+0xac2>
 8013832:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8013836:	e7dd      	b.n	80137f4 <_strtod_l+0xb64>
 8013838:	a311      	add	r3, pc, #68	; (adr r3, 8013880 <_strtod_l+0xbf0>)
 801383a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801383e:	f7ed f965 	bl	8000b0c <__aeabi_dcmplt>
 8013842:	e7b4      	b.n	80137ae <_strtod_l+0xb1e>
 8013844:	2300      	movs	r3, #0
 8013846:	930e      	str	r3, [sp, #56]	; 0x38
 8013848:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801384a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801384c:	6013      	str	r3, [r2, #0]
 801384e:	f7ff ba65 	b.w	8012d1c <_strtod_l+0x8c>
 8013852:	2b65      	cmp	r3, #101	; 0x65
 8013854:	f43f ab5d 	beq.w	8012f12 <_strtod_l+0x282>
 8013858:	2b45      	cmp	r3, #69	; 0x45
 801385a:	f43f ab5a 	beq.w	8012f12 <_strtod_l+0x282>
 801385e:	2201      	movs	r2, #1
 8013860:	f7ff bb92 	b.w	8012f88 <_strtod_l+0x2f8>
 8013864:	f3af 8000 	nop.w
 8013868:	94a03595 	.word	0x94a03595
 801386c:	3fdfffff 	.word	0x3fdfffff
 8013870:	35afe535 	.word	0x35afe535
 8013874:	3fe00000 	.word	0x3fe00000
 8013878:	ffc00000 	.word	0xffc00000
 801387c:	41dfffff 	.word	0x41dfffff
 8013880:	94a03595 	.word	0x94a03595
 8013884:	3fcfffff 	.word	0x3fcfffff
 8013888:	3ff00000 	.word	0x3ff00000
 801388c:	7ff00000 	.word	0x7ff00000
 8013890:	7fe00000 	.word	0x7fe00000
 8013894:	7c9fffff 	.word	0x7c9fffff
 8013898:	3fe00000 	.word	0x3fe00000
 801389c:	bff00000 	.word	0xbff00000
 80138a0:	7fefffff 	.word	0x7fefffff

080138a4 <_strtod_r>:
 80138a4:	4b01      	ldr	r3, [pc, #4]	; (80138ac <_strtod_r+0x8>)
 80138a6:	f7ff b9f3 	b.w	8012c90 <_strtod_l>
 80138aa:	bf00      	nop
 80138ac:	200000c4 	.word	0x200000c4

080138b0 <_strtol_l.isra.0>:
 80138b0:	2b01      	cmp	r3, #1
 80138b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138b6:	d001      	beq.n	80138bc <_strtol_l.isra.0+0xc>
 80138b8:	2b24      	cmp	r3, #36	; 0x24
 80138ba:	d906      	bls.n	80138ca <_strtol_l.isra.0+0x1a>
 80138bc:	f7fe f97e 	bl	8011bbc <__errno>
 80138c0:	2316      	movs	r3, #22
 80138c2:	6003      	str	r3, [r0, #0]
 80138c4:	2000      	movs	r0, #0
 80138c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138ca:	4f3a      	ldr	r7, [pc, #232]	; (80139b4 <_strtol_l.isra.0+0x104>)
 80138cc:	468e      	mov	lr, r1
 80138ce:	4676      	mov	r6, lr
 80138d0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80138d4:	5de5      	ldrb	r5, [r4, r7]
 80138d6:	f015 0508 	ands.w	r5, r5, #8
 80138da:	d1f8      	bne.n	80138ce <_strtol_l.isra.0+0x1e>
 80138dc:	2c2d      	cmp	r4, #45	; 0x2d
 80138de:	d134      	bne.n	801394a <_strtol_l.isra.0+0x9a>
 80138e0:	f89e 4000 	ldrb.w	r4, [lr]
 80138e4:	f04f 0801 	mov.w	r8, #1
 80138e8:	f106 0e02 	add.w	lr, r6, #2
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d05c      	beq.n	80139aa <_strtol_l.isra.0+0xfa>
 80138f0:	2b10      	cmp	r3, #16
 80138f2:	d10c      	bne.n	801390e <_strtol_l.isra.0+0x5e>
 80138f4:	2c30      	cmp	r4, #48	; 0x30
 80138f6:	d10a      	bne.n	801390e <_strtol_l.isra.0+0x5e>
 80138f8:	f89e 4000 	ldrb.w	r4, [lr]
 80138fc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8013900:	2c58      	cmp	r4, #88	; 0x58
 8013902:	d14d      	bne.n	80139a0 <_strtol_l.isra.0+0xf0>
 8013904:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8013908:	2310      	movs	r3, #16
 801390a:	f10e 0e02 	add.w	lr, lr, #2
 801390e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8013912:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013916:	2600      	movs	r6, #0
 8013918:	fbbc f9f3 	udiv	r9, ip, r3
 801391c:	4635      	mov	r5, r6
 801391e:	fb03 ca19 	mls	sl, r3, r9, ip
 8013922:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8013926:	2f09      	cmp	r7, #9
 8013928:	d818      	bhi.n	801395c <_strtol_l.isra.0+0xac>
 801392a:	463c      	mov	r4, r7
 801392c:	42a3      	cmp	r3, r4
 801392e:	dd24      	ble.n	801397a <_strtol_l.isra.0+0xca>
 8013930:	2e00      	cmp	r6, #0
 8013932:	db1f      	blt.n	8013974 <_strtol_l.isra.0+0xc4>
 8013934:	45a9      	cmp	r9, r5
 8013936:	d31d      	bcc.n	8013974 <_strtol_l.isra.0+0xc4>
 8013938:	d101      	bne.n	801393e <_strtol_l.isra.0+0x8e>
 801393a:	45a2      	cmp	sl, r4
 801393c:	db1a      	blt.n	8013974 <_strtol_l.isra.0+0xc4>
 801393e:	fb05 4503 	mla	r5, r5, r3, r4
 8013942:	2601      	movs	r6, #1
 8013944:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8013948:	e7eb      	b.n	8013922 <_strtol_l.isra.0+0x72>
 801394a:	2c2b      	cmp	r4, #43	; 0x2b
 801394c:	bf08      	it	eq
 801394e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8013952:	46a8      	mov	r8, r5
 8013954:	bf08      	it	eq
 8013956:	f106 0e02 	addeq.w	lr, r6, #2
 801395a:	e7c7      	b.n	80138ec <_strtol_l.isra.0+0x3c>
 801395c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8013960:	2f19      	cmp	r7, #25
 8013962:	d801      	bhi.n	8013968 <_strtol_l.isra.0+0xb8>
 8013964:	3c37      	subs	r4, #55	; 0x37
 8013966:	e7e1      	b.n	801392c <_strtol_l.isra.0+0x7c>
 8013968:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801396c:	2f19      	cmp	r7, #25
 801396e:	d804      	bhi.n	801397a <_strtol_l.isra.0+0xca>
 8013970:	3c57      	subs	r4, #87	; 0x57
 8013972:	e7db      	b.n	801392c <_strtol_l.isra.0+0x7c>
 8013974:	f04f 36ff 	mov.w	r6, #4294967295
 8013978:	e7e4      	b.n	8013944 <_strtol_l.isra.0+0x94>
 801397a:	2e00      	cmp	r6, #0
 801397c:	da05      	bge.n	801398a <_strtol_l.isra.0+0xda>
 801397e:	2322      	movs	r3, #34	; 0x22
 8013980:	6003      	str	r3, [r0, #0]
 8013982:	4665      	mov	r5, ip
 8013984:	b942      	cbnz	r2, 8013998 <_strtol_l.isra.0+0xe8>
 8013986:	4628      	mov	r0, r5
 8013988:	e79d      	b.n	80138c6 <_strtol_l.isra.0+0x16>
 801398a:	f1b8 0f00 	cmp.w	r8, #0
 801398e:	d000      	beq.n	8013992 <_strtol_l.isra.0+0xe2>
 8013990:	426d      	negs	r5, r5
 8013992:	2a00      	cmp	r2, #0
 8013994:	d0f7      	beq.n	8013986 <_strtol_l.isra.0+0xd6>
 8013996:	b10e      	cbz	r6, 801399c <_strtol_l.isra.0+0xec>
 8013998:	f10e 31ff 	add.w	r1, lr, #4294967295
 801399c:	6011      	str	r1, [r2, #0]
 801399e:	e7f2      	b.n	8013986 <_strtol_l.isra.0+0xd6>
 80139a0:	2430      	movs	r4, #48	; 0x30
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d1b3      	bne.n	801390e <_strtol_l.isra.0+0x5e>
 80139a6:	2308      	movs	r3, #8
 80139a8:	e7b1      	b.n	801390e <_strtol_l.isra.0+0x5e>
 80139aa:	2c30      	cmp	r4, #48	; 0x30
 80139ac:	d0a4      	beq.n	80138f8 <_strtol_l.isra.0+0x48>
 80139ae:	230a      	movs	r3, #10
 80139b0:	e7ad      	b.n	801390e <_strtol_l.isra.0+0x5e>
 80139b2:	bf00      	nop
 80139b4:	08018179 	.word	0x08018179

080139b8 <_strtol_r>:
 80139b8:	f7ff bf7a 	b.w	80138b0 <_strtol_l.isra.0>

080139bc <strtol>:
 80139bc:	4613      	mov	r3, r2
 80139be:	460a      	mov	r2, r1
 80139c0:	4601      	mov	r1, r0
 80139c2:	4802      	ldr	r0, [pc, #8]	; (80139cc <strtol+0x10>)
 80139c4:	6800      	ldr	r0, [r0, #0]
 80139c6:	f7ff bf73 	b.w	80138b0 <_strtol_l.isra.0>
 80139ca:	bf00      	nop
 80139cc:	2000005c 	.word	0x2000005c

080139d0 <__swbuf_r>:
 80139d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139d2:	460e      	mov	r6, r1
 80139d4:	4614      	mov	r4, r2
 80139d6:	4605      	mov	r5, r0
 80139d8:	b118      	cbz	r0, 80139e2 <__swbuf_r+0x12>
 80139da:	6983      	ldr	r3, [r0, #24]
 80139dc:	b90b      	cbnz	r3, 80139e2 <__swbuf_r+0x12>
 80139de:	f001 f851 	bl	8014a84 <__sinit>
 80139e2:	4b21      	ldr	r3, [pc, #132]	; (8013a68 <__swbuf_r+0x98>)
 80139e4:	429c      	cmp	r4, r3
 80139e6:	d12b      	bne.n	8013a40 <__swbuf_r+0x70>
 80139e8:	686c      	ldr	r4, [r5, #4]
 80139ea:	69a3      	ldr	r3, [r4, #24]
 80139ec:	60a3      	str	r3, [r4, #8]
 80139ee:	89a3      	ldrh	r3, [r4, #12]
 80139f0:	071a      	lsls	r2, r3, #28
 80139f2:	d52f      	bpl.n	8013a54 <__swbuf_r+0x84>
 80139f4:	6923      	ldr	r3, [r4, #16]
 80139f6:	b36b      	cbz	r3, 8013a54 <__swbuf_r+0x84>
 80139f8:	6923      	ldr	r3, [r4, #16]
 80139fa:	6820      	ldr	r0, [r4, #0]
 80139fc:	1ac0      	subs	r0, r0, r3
 80139fe:	6963      	ldr	r3, [r4, #20]
 8013a00:	b2f6      	uxtb	r6, r6
 8013a02:	4283      	cmp	r3, r0
 8013a04:	4637      	mov	r7, r6
 8013a06:	dc04      	bgt.n	8013a12 <__swbuf_r+0x42>
 8013a08:	4621      	mov	r1, r4
 8013a0a:	4628      	mov	r0, r5
 8013a0c:	f000 ffa6 	bl	801495c <_fflush_r>
 8013a10:	bb30      	cbnz	r0, 8013a60 <__swbuf_r+0x90>
 8013a12:	68a3      	ldr	r3, [r4, #8]
 8013a14:	3b01      	subs	r3, #1
 8013a16:	60a3      	str	r3, [r4, #8]
 8013a18:	6823      	ldr	r3, [r4, #0]
 8013a1a:	1c5a      	adds	r2, r3, #1
 8013a1c:	6022      	str	r2, [r4, #0]
 8013a1e:	701e      	strb	r6, [r3, #0]
 8013a20:	6963      	ldr	r3, [r4, #20]
 8013a22:	3001      	adds	r0, #1
 8013a24:	4283      	cmp	r3, r0
 8013a26:	d004      	beq.n	8013a32 <__swbuf_r+0x62>
 8013a28:	89a3      	ldrh	r3, [r4, #12]
 8013a2a:	07db      	lsls	r3, r3, #31
 8013a2c:	d506      	bpl.n	8013a3c <__swbuf_r+0x6c>
 8013a2e:	2e0a      	cmp	r6, #10
 8013a30:	d104      	bne.n	8013a3c <__swbuf_r+0x6c>
 8013a32:	4621      	mov	r1, r4
 8013a34:	4628      	mov	r0, r5
 8013a36:	f000 ff91 	bl	801495c <_fflush_r>
 8013a3a:	b988      	cbnz	r0, 8013a60 <__swbuf_r+0x90>
 8013a3c:	4638      	mov	r0, r7
 8013a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a40:	4b0a      	ldr	r3, [pc, #40]	; (8013a6c <__swbuf_r+0x9c>)
 8013a42:	429c      	cmp	r4, r3
 8013a44:	d101      	bne.n	8013a4a <__swbuf_r+0x7a>
 8013a46:	68ac      	ldr	r4, [r5, #8]
 8013a48:	e7cf      	b.n	80139ea <__swbuf_r+0x1a>
 8013a4a:	4b09      	ldr	r3, [pc, #36]	; (8013a70 <__swbuf_r+0xa0>)
 8013a4c:	429c      	cmp	r4, r3
 8013a4e:	bf08      	it	eq
 8013a50:	68ec      	ldreq	r4, [r5, #12]
 8013a52:	e7ca      	b.n	80139ea <__swbuf_r+0x1a>
 8013a54:	4621      	mov	r1, r4
 8013a56:	4628      	mov	r0, r5
 8013a58:	f000 f80c 	bl	8013a74 <__swsetup_r>
 8013a5c:	2800      	cmp	r0, #0
 8013a5e:	d0cb      	beq.n	80139f8 <__swbuf_r+0x28>
 8013a60:	f04f 37ff 	mov.w	r7, #4294967295
 8013a64:	e7ea      	b.n	8013a3c <__swbuf_r+0x6c>
 8013a66:	bf00      	nop
 8013a68:	080183d4 	.word	0x080183d4
 8013a6c:	080183f4 	.word	0x080183f4
 8013a70:	080183b4 	.word	0x080183b4

08013a74 <__swsetup_r>:
 8013a74:	4b32      	ldr	r3, [pc, #200]	; (8013b40 <__swsetup_r+0xcc>)
 8013a76:	b570      	push	{r4, r5, r6, lr}
 8013a78:	681d      	ldr	r5, [r3, #0]
 8013a7a:	4606      	mov	r6, r0
 8013a7c:	460c      	mov	r4, r1
 8013a7e:	b125      	cbz	r5, 8013a8a <__swsetup_r+0x16>
 8013a80:	69ab      	ldr	r3, [r5, #24]
 8013a82:	b913      	cbnz	r3, 8013a8a <__swsetup_r+0x16>
 8013a84:	4628      	mov	r0, r5
 8013a86:	f000 fffd 	bl	8014a84 <__sinit>
 8013a8a:	4b2e      	ldr	r3, [pc, #184]	; (8013b44 <__swsetup_r+0xd0>)
 8013a8c:	429c      	cmp	r4, r3
 8013a8e:	d10f      	bne.n	8013ab0 <__swsetup_r+0x3c>
 8013a90:	686c      	ldr	r4, [r5, #4]
 8013a92:	89a3      	ldrh	r3, [r4, #12]
 8013a94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013a98:	0719      	lsls	r1, r3, #28
 8013a9a:	d42c      	bmi.n	8013af6 <__swsetup_r+0x82>
 8013a9c:	06dd      	lsls	r5, r3, #27
 8013a9e:	d411      	bmi.n	8013ac4 <__swsetup_r+0x50>
 8013aa0:	2309      	movs	r3, #9
 8013aa2:	6033      	str	r3, [r6, #0]
 8013aa4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013aa8:	81a3      	strh	r3, [r4, #12]
 8013aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8013aae:	e03e      	b.n	8013b2e <__swsetup_r+0xba>
 8013ab0:	4b25      	ldr	r3, [pc, #148]	; (8013b48 <__swsetup_r+0xd4>)
 8013ab2:	429c      	cmp	r4, r3
 8013ab4:	d101      	bne.n	8013aba <__swsetup_r+0x46>
 8013ab6:	68ac      	ldr	r4, [r5, #8]
 8013ab8:	e7eb      	b.n	8013a92 <__swsetup_r+0x1e>
 8013aba:	4b24      	ldr	r3, [pc, #144]	; (8013b4c <__swsetup_r+0xd8>)
 8013abc:	429c      	cmp	r4, r3
 8013abe:	bf08      	it	eq
 8013ac0:	68ec      	ldreq	r4, [r5, #12]
 8013ac2:	e7e6      	b.n	8013a92 <__swsetup_r+0x1e>
 8013ac4:	0758      	lsls	r0, r3, #29
 8013ac6:	d512      	bpl.n	8013aee <__swsetup_r+0x7a>
 8013ac8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013aca:	b141      	cbz	r1, 8013ade <__swsetup_r+0x6a>
 8013acc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013ad0:	4299      	cmp	r1, r3
 8013ad2:	d002      	beq.n	8013ada <__swsetup_r+0x66>
 8013ad4:	4630      	mov	r0, r6
 8013ad6:	f002 f94b 	bl	8015d70 <_free_r>
 8013ada:	2300      	movs	r3, #0
 8013adc:	6363      	str	r3, [r4, #52]	; 0x34
 8013ade:	89a3      	ldrh	r3, [r4, #12]
 8013ae0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013ae4:	81a3      	strh	r3, [r4, #12]
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	6063      	str	r3, [r4, #4]
 8013aea:	6923      	ldr	r3, [r4, #16]
 8013aec:	6023      	str	r3, [r4, #0]
 8013aee:	89a3      	ldrh	r3, [r4, #12]
 8013af0:	f043 0308 	orr.w	r3, r3, #8
 8013af4:	81a3      	strh	r3, [r4, #12]
 8013af6:	6923      	ldr	r3, [r4, #16]
 8013af8:	b94b      	cbnz	r3, 8013b0e <__swsetup_r+0x9a>
 8013afa:	89a3      	ldrh	r3, [r4, #12]
 8013afc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013b04:	d003      	beq.n	8013b0e <__swsetup_r+0x9a>
 8013b06:	4621      	mov	r1, r4
 8013b08:	4630      	mov	r0, r6
 8013b0a:	f001 fbf3 	bl	80152f4 <__smakebuf_r>
 8013b0e:	89a0      	ldrh	r0, [r4, #12]
 8013b10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013b14:	f010 0301 	ands.w	r3, r0, #1
 8013b18:	d00a      	beq.n	8013b30 <__swsetup_r+0xbc>
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	60a3      	str	r3, [r4, #8]
 8013b1e:	6963      	ldr	r3, [r4, #20]
 8013b20:	425b      	negs	r3, r3
 8013b22:	61a3      	str	r3, [r4, #24]
 8013b24:	6923      	ldr	r3, [r4, #16]
 8013b26:	b943      	cbnz	r3, 8013b3a <__swsetup_r+0xc6>
 8013b28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013b2c:	d1ba      	bne.n	8013aa4 <__swsetup_r+0x30>
 8013b2e:	bd70      	pop	{r4, r5, r6, pc}
 8013b30:	0781      	lsls	r1, r0, #30
 8013b32:	bf58      	it	pl
 8013b34:	6963      	ldrpl	r3, [r4, #20]
 8013b36:	60a3      	str	r3, [r4, #8]
 8013b38:	e7f4      	b.n	8013b24 <__swsetup_r+0xb0>
 8013b3a:	2000      	movs	r0, #0
 8013b3c:	e7f7      	b.n	8013b2e <__swsetup_r+0xba>
 8013b3e:	bf00      	nop
 8013b40:	2000005c 	.word	0x2000005c
 8013b44:	080183d4 	.word	0x080183d4
 8013b48:	080183f4 	.word	0x080183f4
 8013b4c:	080183b4 	.word	0x080183b4

08013b50 <abort>:
 8013b50:	b508      	push	{r3, lr}
 8013b52:	2006      	movs	r0, #6
 8013b54:	f002 fb78 	bl	8016248 <raise>
 8013b58:	2001      	movs	r0, #1
 8013b5a:	f7f0 ff3f 	bl	80049dc <_exit>

08013b5e <quorem>:
 8013b5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b62:	6903      	ldr	r3, [r0, #16]
 8013b64:	690c      	ldr	r4, [r1, #16]
 8013b66:	42a3      	cmp	r3, r4
 8013b68:	4607      	mov	r7, r0
 8013b6a:	f2c0 8081 	blt.w	8013c70 <quorem+0x112>
 8013b6e:	3c01      	subs	r4, #1
 8013b70:	f101 0814 	add.w	r8, r1, #20
 8013b74:	f100 0514 	add.w	r5, r0, #20
 8013b78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013b7c:	9301      	str	r3, [sp, #4]
 8013b7e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013b82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013b86:	3301      	adds	r3, #1
 8013b88:	429a      	cmp	r2, r3
 8013b8a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013b8e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013b92:	fbb2 f6f3 	udiv	r6, r2, r3
 8013b96:	d331      	bcc.n	8013bfc <quorem+0x9e>
 8013b98:	f04f 0e00 	mov.w	lr, #0
 8013b9c:	4640      	mov	r0, r8
 8013b9e:	46ac      	mov	ip, r5
 8013ba0:	46f2      	mov	sl, lr
 8013ba2:	f850 2b04 	ldr.w	r2, [r0], #4
 8013ba6:	b293      	uxth	r3, r2
 8013ba8:	fb06 e303 	mla	r3, r6, r3, lr
 8013bac:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013bb0:	b29b      	uxth	r3, r3
 8013bb2:	ebaa 0303 	sub.w	r3, sl, r3
 8013bb6:	0c12      	lsrs	r2, r2, #16
 8013bb8:	f8dc a000 	ldr.w	sl, [ip]
 8013bbc:	fb06 e202 	mla	r2, r6, r2, lr
 8013bc0:	fa13 f38a 	uxtah	r3, r3, sl
 8013bc4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013bc8:	fa1f fa82 	uxth.w	sl, r2
 8013bcc:	f8dc 2000 	ldr.w	r2, [ip]
 8013bd0:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8013bd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013bd8:	b29b      	uxth	r3, r3
 8013bda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013bde:	4581      	cmp	r9, r0
 8013be0:	f84c 3b04 	str.w	r3, [ip], #4
 8013be4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013be8:	d2db      	bcs.n	8013ba2 <quorem+0x44>
 8013bea:	f855 300b 	ldr.w	r3, [r5, fp]
 8013bee:	b92b      	cbnz	r3, 8013bfc <quorem+0x9e>
 8013bf0:	9b01      	ldr	r3, [sp, #4]
 8013bf2:	3b04      	subs	r3, #4
 8013bf4:	429d      	cmp	r5, r3
 8013bf6:	461a      	mov	r2, r3
 8013bf8:	d32e      	bcc.n	8013c58 <quorem+0xfa>
 8013bfa:	613c      	str	r4, [r7, #16]
 8013bfc:	4638      	mov	r0, r7
 8013bfe:	f001 feb5 	bl	801596c <__mcmp>
 8013c02:	2800      	cmp	r0, #0
 8013c04:	db24      	blt.n	8013c50 <quorem+0xf2>
 8013c06:	3601      	adds	r6, #1
 8013c08:	4628      	mov	r0, r5
 8013c0a:	f04f 0c00 	mov.w	ip, #0
 8013c0e:	f858 2b04 	ldr.w	r2, [r8], #4
 8013c12:	f8d0 e000 	ldr.w	lr, [r0]
 8013c16:	b293      	uxth	r3, r2
 8013c18:	ebac 0303 	sub.w	r3, ip, r3
 8013c1c:	0c12      	lsrs	r2, r2, #16
 8013c1e:	fa13 f38e 	uxtah	r3, r3, lr
 8013c22:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013c26:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013c2a:	b29b      	uxth	r3, r3
 8013c2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013c30:	45c1      	cmp	r9, r8
 8013c32:	f840 3b04 	str.w	r3, [r0], #4
 8013c36:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013c3a:	d2e8      	bcs.n	8013c0e <quorem+0xb0>
 8013c3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013c40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013c44:	b922      	cbnz	r2, 8013c50 <quorem+0xf2>
 8013c46:	3b04      	subs	r3, #4
 8013c48:	429d      	cmp	r5, r3
 8013c4a:	461a      	mov	r2, r3
 8013c4c:	d30a      	bcc.n	8013c64 <quorem+0x106>
 8013c4e:	613c      	str	r4, [r7, #16]
 8013c50:	4630      	mov	r0, r6
 8013c52:	b003      	add	sp, #12
 8013c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c58:	6812      	ldr	r2, [r2, #0]
 8013c5a:	3b04      	subs	r3, #4
 8013c5c:	2a00      	cmp	r2, #0
 8013c5e:	d1cc      	bne.n	8013bfa <quorem+0x9c>
 8013c60:	3c01      	subs	r4, #1
 8013c62:	e7c7      	b.n	8013bf4 <quorem+0x96>
 8013c64:	6812      	ldr	r2, [r2, #0]
 8013c66:	3b04      	subs	r3, #4
 8013c68:	2a00      	cmp	r2, #0
 8013c6a:	d1f0      	bne.n	8013c4e <quorem+0xf0>
 8013c6c:	3c01      	subs	r4, #1
 8013c6e:	e7eb      	b.n	8013c48 <quorem+0xea>
 8013c70:	2000      	movs	r0, #0
 8013c72:	e7ee      	b.n	8013c52 <quorem+0xf4>
 8013c74:	0000      	movs	r0, r0
	...

08013c78 <_dtoa_r>:
 8013c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c7c:	ed2d 8b02 	vpush	{d8}
 8013c80:	ec57 6b10 	vmov	r6, r7, d0
 8013c84:	b095      	sub	sp, #84	; 0x54
 8013c86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013c88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013c8c:	9105      	str	r1, [sp, #20]
 8013c8e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8013c92:	4604      	mov	r4, r0
 8013c94:	9209      	str	r2, [sp, #36]	; 0x24
 8013c96:	930f      	str	r3, [sp, #60]	; 0x3c
 8013c98:	b975      	cbnz	r5, 8013cb8 <_dtoa_r+0x40>
 8013c9a:	2010      	movs	r0, #16
 8013c9c:	f001 fb6a 	bl	8015374 <malloc>
 8013ca0:	4602      	mov	r2, r0
 8013ca2:	6260      	str	r0, [r4, #36]	; 0x24
 8013ca4:	b920      	cbnz	r0, 8013cb0 <_dtoa_r+0x38>
 8013ca6:	4bb2      	ldr	r3, [pc, #712]	; (8013f70 <_dtoa_r+0x2f8>)
 8013ca8:	21ea      	movs	r1, #234	; 0xea
 8013caa:	48b2      	ldr	r0, [pc, #712]	; (8013f74 <_dtoa_r+0x2fc>)
 8013cac:	f7fd ff68 	bl	8011b80 <__assert_func>
 8013cb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013cb4:	6005      	str	r5, [r0, #0]
 8013cb6:	60c5      	str	r5, [r0, #12]
 8013cb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013cba:	6819      	ldr	r1, [r3, #0]
 8013cbc:	b151      	cbz	r1, 8013cd4 <_dtoa_r+0x5c>
 8013cbe:	685a      	ldr	r2, [r3, #4]
 8013cc0:	604a      	str	r2, [r1, #4]
 8013cc2:	2301      	movs	r3, #1
 8013cc4:	4093      	lsls	r3, r2
 8013cc6:	608b      	str	r3, [r1, #8]
 8013cc8:	4620      	mov	r0, r4
 8013cca:	f001 fbc7 	bl	801545c <_Bfree>
 8013cce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013cd0:	2200      	movs	r2, #0
 8013cd2:	601a      	str	r2, [r3, #0]
 8013cd4:	1e3b      	subs	r3, r7, #0
 8013cd6:	bfb9      	ittee	lt
 8013cd8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013cdc:	9303      	strlt	r3, [sp, #12]
 8013cde:	2300      	movge	r3, #0
 8013ce0:	f8c8 3000 	strge.w	r3, [r8]
 8013ce4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8013ce8:	4ba3      	ldr	r3, [pc, #652]	; (8013f78 <_dtoa_r+0x300>)
 8013cea:	bfbc      	itt	lt
 8013cec:	2201      	movlt	r2, #1
 8013cee:	f8c8 2000 	strlt.w	r2, [r8]
 8013cf2:	ea33 0309 	bics.w	r3, r3, r9
 8013cf6:	d11b      	bne.n	8013d30 <_dtoa_r+0xb8>
 8013cf8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013cfa:	f242 730f 	movw	r3, #9999	; 0x270f
 8013cfe:	6013      	str	r3, [r2, #0]
 8013d00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013d04:	4333      	orrs	r3, r6
 8013d06:	f000 857a 	beq.w	80147fe <_dtoa_r+0xb86>
 8013d0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013d0c:	b963      	cbnz	r3, 8013d28 <_dtoa_r+0xb0>
 8013d0e:	4b9b      	ldr	r3, [pc, #620]	; (8013f7c <_dtoa_r+0x304>)
 8013d10:	e024      	b.n	8013d5c <_dtoa_r+0xe4>
 8013d12:	4b9b      	ldr	r3, [pc, #620]	; (8013f80 <_dtoa_r+0x308>)
 8013d14:	9300      	str	r3, [sp, #0]
 8013d16:	3308      	adds	r3, #8
 8013d18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013d1a:	6013      	str	r3, [r2, #0]
 8013d1c:	9800      	ldr	r0, [sp, #0]
 8013d1e:	b015      	add	sp, #84	; 0x54
 8013d20:	ecbd 8b02 	vpop	{d8}
 8013d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d28:	4b94      	ldr	r3, [pc, #592]	; (8013f7c <_dtoa_r+0x304>)
 8013d2a:	9300      	str	r3, [sp, #0]
 8013d2c:	3303      	adds	r3, #3
 8013d2e:	e7f3      	b.n	8013d18 <_dtoa_r+0xa0>
 8013d30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013d34:	2200      	movs	r2, #0
 8013d36:	ec51 0b17 	vmov	r0, r1, d7
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8013d40:	f7ec feda 	bl	8000af8 <__aeabi_dcmpeq>
 8013d44:	4680      	mov	r8, r0
 8013d46:	b158      	cbz	r0, 8013d60 <_dtoa_r+0xe8>
 8013d48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013d4a:	2301      	movs	r3, #1
 8013d4c:	6013      	str	r3, [r2, #0]
 8013d4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	f000 8551 	beq.w	80147f8 <_dtoa_r+0xb80>
 8013d56:	488b      	ldr	r0, [pc, #556]	; (8013f84 <_dtoa_r+0x30c>)
 8013d58:	6018      	str	r0, [r3, #0]
 8013d5a:	1e43      	subs	r3, r0, #1
 8013d5c:	9300      	str	r3, [sp, #0]
 8013d5e:	e7dd      	b.n	8013d1c <_dtoa_r+0xa4>
 8013d60:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8013d64:	aa12      	add	r2, sp, #72	; 0x48
 8013d66:	a913      	add	r1, sp, #76	; 0x4c
 8013d68:	4620      	mov	r0, r4
 8013d6a:	f001 ff1f 	bl	8015bac <__d2b>
 8013d6e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013d72:	4683      	mov	fp, r0
 8013d74:	2d00      	cmp	r5, #0
 8013d76:	d07c      	beq.n	8013e72 <_dtoa_r+0x1fa>
 8013d78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d7a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8013d7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013d82:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8013d86:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8013d8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8013d8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013d92:	4b7d      	ldr	r3, [pc, #500]	; (8013f88 <_dtoa_r+0x310>)
 8013d94:	2200      	movs	r2, #0
 8013d96:	4630      	mov	r0, r6
 8013d98:	4639      	mov	r1, r7
 8013d9a:	f7ec fa8d 	bl	80002b8 <__aeabi_dsub>
 8013d9e:	a36e      	add	r3, pc, #440	; (adr r3, 8013f58 <_dtoa_r+0x2e0>)
 8013da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013da4:	f7ec fc40 	bl	8000628 <__aeabi_dmul>
 8013da8:	a36d      	add	r3, pc, #436	; (adr r3, 8013f60 <_dtoa_r+0x2e8>)
 8013daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dae:	f7ec fa85 	bl	80002bc <__adddf3>
 8013db2:	4606      	mov	r6, r0
 8013db4:	4628      	mov	r0, r5
 8013db6:	460f      	mov	r7, r1
 8013db8:	f7ec fbcc 	bl	8000554 <__aeabi_i2d>
 8013dbc:	a36a      	add	r3, pc, #424	; (adr r3, 8013f68 <_dtoa_r+0x2f0>)
 8013dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dc2:	f7ec fc31 	bl	8000628 <__aeabi_dmul>
 8013dc6:	4602      	mov	r2, r0
 8013dc8:	460b      	mov	r3, r1
 8013dca:	4630      	mov	r0, r6
 8013dcc:	4639      	mov	r1, r7
 8013dce:	f7ec fa75 	bl	80002bc <__adddf3>
 8013dd2:	4606      	mov	r6, r0
 8013dd4:	460f      	mov	r7, r1
 8013dd6:	f7ec fed7 	bl	8000b88 <__aeabi_d2iz>
 8013dda:	2200      	movs	r2, #0
 8013ddc:	4682      	mov	sl, r0
 8013dde:	2300      	movs	r3, #0
 8013de0:	4630      	mov	r0, r6
 8013de2:	4639      	mov	r1, r7
 8013de4:	f7ec fe92 	bl	8000b0c <__aeabi_dcmplt>
 8013de8:	b148      	cbz	r0, 8013dfe <_dtoa_r+0x186>
 8013dea:	4650      	mov	r0, sl
 8013dec:	f7ec fbb2 	bl	8000554 <__aeabi_i2d>
 8013df0:	4632      	mov	r2, r6
 8013df2:	463b      	mov	r3, r7
 8013df4:	f7ec fe80 	bl	8000af8 <__aeabi_dcmpeq>
 8013df8:	b908      	cbnz	r0, 8013dfe <_dtoa_r+0x186>
 8013dfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013dfe:	f1ba 0f16 	cmp.w	sl, #22
 8013e02:	d854      	bhi.n	8013eae <_dtoa_r+0x236>
 8013e04:	4b61      	ldr	r3, [pc, #388]	; (8013f8c <_dtoa_r+0x314>)
 8013e06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013e12:	f7ec fe7b 	bl	8000b0c <__aeabi_dcmplt>
 8013e16:	2800      	cmp	r0, #0
 8013e18:	d04b      	beq.n	8013eb2 <_dtoa_r+0x23a>
 8013e1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013e1e:	2300      	movs	r3, #0
 8013e20:	930e      	str	r3, [sp, #56]	; 0x38
 8013e22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013e24:	1b5d      	subs	r5, r3, r5
 8013e26:	1e6b      	subs	r3, r5, #1
 8013e28:	9304      	str	r3, [sp, #16]
 8013e2a:	bf43      	ittte	mi
 8013e2c:	2300      	movmi	r3, #0
 8013e2e:	f1c5 0801 	rsbmi	r8, r5, #1
 8013e32:	9304      	strmi	r3, [sp, #16]
 8013e34:	f04f 0800 	movpl.w	r8, #0
 8013e38:	f1ba 0f00 	cmp.w	sl, #0
 8013e3c:	db3b      	blt.n	8013eb6 <_dtoa_r+0x23e>
 8013e3e:	9b04      	ldr	r3, [sp, #16]
 8013e40:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8013e44:	4453      	add	r3, sl
 8013e46:	9304      	str	r3, [sp, #16]
 8013e48:	2300      	movs	r3, #0
 8013e4a:	9306      	str	r3, [sp, #24]
 8013e4c:	9b05      	ldr	r3, [sp, #20]
 8013e4e:	2b09      	cmp	r3, #9
 8013e50:	d869      	bhi.n	8013f26 <_dtoa_r+0x2ae>
 8013e52:	2b05      	cmp	r3, #5
 8013e54:	bfc4      	itt	gt
 8013e56:	3b04      	subgt	r3, #4
 8013e58:	9305      	strgt	r3, [sp, #20]
 8013e5a:	9b05      	ldr	r3, [sp, #20]
 8013e5c:	f1a3 0302 	sub.w	r3, r3, #2
 8013e60:	bfcc      	ite	gt
 8013e62:	2500      	movgt	r5, #0
 8013e64:	2501      	movle	r5, #1
 8013e66:	2b03      	cmp	r3, #3
 8013e68:	d869      	bhi.n	8013f3e <_dtoa_r+0x2c6>
 8013e6a:	e8df f003 	tbb	[pc, r3]
 8013e6e:	4e2c      	.short	0x4e2c
 8013e70:	5a4c      	.short	0x5a4c
 8013e72:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8013e76:	441d      	add	r5, r3
 8013e78:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8013e7c:	2b20      	cmp	r3, #32
 8013e7e:	bfc1      	itttt	gt
 8013e80:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013e84:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8013e88:	fa09 f303 	lslgt.w	r3, r9, r3
 8013e8c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8013e90:	bfda      	itte	le
 8013e92:	f1c3 0320 	rsble	r3, r3, #32
 8013e96:	fa06 f003 	lslle.w	r0, r6, r3
 8013e9a:	4318      	orrgt	r0, r3
 8013e9c:	f7ec fb4a 	bl	8000534 <__aeabi_ui2d>
 8013ea0:	2301      	movs	r3, #1
 8013ea2:	4606      	mov	r6, r0
 8013ea4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8013ea8:	3d01      	subs	r5, #1
 8013eaa:	9310      	str	r3, [sp, #64]	; 0x40
 8013eac:	e771      	b.n	8013d92 <_dtoa_r+0x11a>
 8013eae:	2301      	movs	r3, #1
 8013eb0:	e7b6      	b.n	8013e20 <_dtoa_r+0x1a8>
 8013eb2:	900e      	str	r0, [sp, #56]	; 0x38
 8013eb4:	e7b5      	b.n	8013e22 <_dtoa_r+0x1aa>
 8013eb6:	f1ca 0300 	rsb	r3, sl, #0
 8013eba:	9306      	str	r3, [sp, #24]
 8013ebc:	2300      	movs	r3, #0
 8013ebe:	eba8 080a 	sub.w	r8, r8, sl
 8013ec2:	930d      	str	r3, [sp, #52]	; 0x34
 8013ec4:	e7c2      	b.n	8013e4c <_dtoa_r+0x1d4>
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	9308      	str	r3, [sp, #32]
 8013eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	dc39      	bgt.n	8013f44 <_dtoa_r+0x2cc>
 8013ed0:	f04f 0901 	mov.w	r9, #1
 8013ed4:	f8cd 9004 	str.w	r9, [sp, #4]
 8013ed8:	464b      	mov	r3, r9
 8013eda:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8013ede:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8013ee0:	2200      	movs	r2, #0
 8013ee2:	6042      	str	r2, [r0, #4]
 8013ee4:	2204      	movs	r2, #4
 8013ee6:	f102 0614 	add.w	r6, r2, #20
 8013eea:	429e      	cmp	r6, r3
 8013eec:	6841      	ldr	r1, [r0, #4]
 8013eee:	d92f      	bls.n	8013f50 <_dtoa_r+0x2d8>
 8013ef0:	4620      	mov	r0, r4
 8013ef2:	f001 fa73 	bl	80153dc <_Balloc>
 8013ef6:	9000      	str	r0, [sp, #0]
 8013ef8:	2800      	cmp	r0, #0
 8013efa:	d14b      	bne.n	8013f94 <_dtoa_r+0x31c>
 8013efc:	4b24      	ldr	r3, [pc, #144]	; (8013f90 <_dtoa_r+0x318>)
 8013efe:	4602      	mov	r2, r0
 8013f00:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013f04:	e6d1      	b.n	8013caa <_dtoa_r+0x32>
 8013f06:	2301      	movs	r3, #1
 8013f08:	e7de      	b.n	8013ec8 <_dtoa_r+0x250>
 8013f0a:	2300      	movs	r3, #0
 8013f0c:	9308      	str	r3, [sp, #32]
 8013f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f10:	eb0a 0903 	add.w	r9, sl, r3
 8013f14:	f109 0301 	add.w	r3, r9, #1
 8013f18:	2b01      	cmp	r3, #1
 8013f1a:	9301      	str	r3, [sp, #4]
 8013f1c:	bfb8      	it	lt
 8013f1e:	2301      	movlt	r3, #1
 8013f20:	e7dd      	b.n	8013ede <_dtoa_r+0x266>
 8013f22:	2301      	movs	r3, #1
 8013f24:	e7f2      	b.n	8013f0c <_dtoa_r+0x294>
 8013f26:	2501      	movs	r5, #1
 8013f28:	2300      	movs	r3, #0
 8013f2a:	9305      	str	r3, [sp, #20]
 8013f2c:	9508      	str	r5, [sp, #32]
 8013f2e:	f04f 39ff 	mov.w	r9, #4294967295
 8013f32:	2200      	movs	r2, #0
 8013f34:	f8cd 9004 	str.w	r9, [sp, #4]
 8013f38:	2312      	movs	r3, #18
 8013f3a:	9209      	str	r2, [sp, #36]	; 0x24
 8013f3c:	e7cf      	b.n	8013ede <_dtoa_r+0x266>
 8013f3e:	2301      	movs	r3, #1
 8013f40:	9308      	str	r3, [sp, #32]
 8013f42:	e7f4      	b.n	8013f2e <_dtoa_r+0x2b6>
 8013f44:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8013f48:	f8cd 9004 	str.w	r9, [sp, #4]
 8013f4c:	464b      	mov	r3, r9
 8013f4e:	e7c6      	b.n	8013ede <_dtoa_r+0x266>
 8013f50:	3101      	adds	r1, #1
 8013f52:	6041      	str	r1, [r0, #4]
 8013f54:	0052      	lsls	r2, r2, #1
 8013f56:	e7c6      	b.n	8013ee6 <_dtoa_r+0x26e>
 8013f58:	636f4361 	.word	0x636f4361
 8013f5c:	3fd287a7 	.word	0x3fd287a7
 8013f60:	8b60c8b3 	.word	0x8b60c8b3
 8013f64:	3fc68a28 	.word	0x3fc68a28
 8013f68:	509f79fb 	.word	0x509f79fb
 8013f6c:	3fd34413 	.word	0x3fd34413
 8013f70:	0801832d 	.word	0x0801832d
 8013f74:	08018344 	.word	0x08018344
 8013f78:	7ff00000 	.word	0x7ff00000
 8013f7c:	08018329 	.word	0x08018329
 8013f80:	08018320 	.word	0x08018320
 8013f84:	080182a2 	.word	0x080182a2
 8013f88:	3ff80000 	.word	0x3ff80000
 8013f8c:	08018520 	.word	0x08018520
 8013f90:	080183a3 	.word	0x080183a3
 8013f94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013f96:	9a00      	ldr	r2, [sp, #0]
 8013f98:	601a      	str	r2, [r3, #0]
 8013f9a:	9b01      	ldr	r3, [sp, #4]
 8013f9c:	2b0e      	cmp	r3, #14
 8013f9e:	f200 80ad 	bhi.w	80140fc <_dtoa_r+0x484>
 8013fa2:	2d00      	cmp	r5, #0
 8013fa4:	f000 80aa 	beq.w	80140fc <_dtoa_r+0x484>
 8013fa8:	f1ba 0f00 	cmp.w	sl, #0
 8013fac:	dd36      	ble.n	801401c <_dtoa_r+0x3a4>
 8013fae:	4ac3      	ldr	r2, [pc, #780]	; (80142bc <_dtoa_r+0x644>)
 8013fb0:	f00a 030f 	and.w	r3, sl, #15
 8013fb4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013fb8:	ed93 7b00 	vldr	d7, [r3]
 8013fbc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8013fc0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8013fc4:	eeb0 8a47 	vmov.f32	s16, s14
 8013fc8:	eef0 8a67 	vmov.f32	s17, s15
 8013fcc:	d016      	beq.n	8013ffc <_dtoa_r+0x384>
 8013fce:	4bbc      	ldr	r3, [pc, #752]	; (80142c0 <_dtoa_r+0x648>)
 8013fd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013fd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013fd8:	f7ec fc50 	bl	800087c <__aeabi_ddiv>
 8013fdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013fe0:	f007 070f 	and.w	r7, r7, #15
 8013fe4:	2503      	movs	r5, #3
 8013fe6:	4eb6      	ldr	r6, [pc, #728]	; (80142c0 <_dtoa_r+0x648>)
 8013fe8:	b957      	cbnz	r7, 8014000 <_dtoa_r+0x388>
 8013fea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013fee:	ec53 2b18 	vmov	r2, r3, d8
 8013ff2:	f7ec fc43 	bl	800087c <__aeabi_ddiv>
 8013ff6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013ffa:	e029      	b.n	8014050 <_dtoa_r+0x3d8>
 8013ffc:	2502      	movs	r5, #2
 8013ffe:	e7f2      	b.n	8013fe6 <_dtoa_r+0x36e>
 8014000:	07f9      	lsls	r1, r7, #31
 8014002:	d508      	bpl.n	8014016 <_dtoa_r+0x39e>
 8014004:	ec51 0b18 	vmov	r0, r1, d8
 8014008:	e9d6 2300 	ldrd	r2, r3, [r6]
 801400c:	f7ec fb0c 	bl	8000628 <__aeabi_dmul>
 8014010:	ec41 0b18 	vmov	d8, r0, r1
 8014014:	3501      	adds	r5, #1
 8014016:	107f      	asrs	r7, r7, #1
 8014018:	3608      	adds	r6, #8
 801401a:	e7e5      	b.n	8013fe8 <_dtoa_r+0x370>
 801401c:	f000 80a6 	beq.w	801416c <_dtoa_r+0x4f4>
 8014020:	f1ca 0600 	rsb	r6, sl, #0
 8014024:	4ba5      	ldr	r3, [pc, #660]	; (80142bc <_dtoa_r+0x644>)
 8014026:	4fa6      	ldr	r7, [pc, #664]	; (80142c0 <_dtoa_r+0x648>)
 8014028:	f006 020f 	and.w	r2, r6, #15
 801402c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014034:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014038:	f7ec faf6 	bl	8000628 <__aeabi_dmul>
 801403c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014040:	1136      	asrs	r6, r6, #4
 8014042:	2300      	movs	r3, #0
 8014044:	2502      	movs	r5, #2
 8014046:	2e00      	cmp	r6, #0
 8014048:	f040 8085 	bne.w	8014156 <_dtoa_r+0x4de>
 801404c:	2b00      	cmp	r3, #0
 801404e:	d1d2      	bne.n	8013ff6 <_dtoa_r+0x37e>
 8014050:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014052:	2b00      	cmp	r3, #0
 8014054:	f000 808c 	beq.w	8014170 <_dtoa_r+0x4f8>
 8014058:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801405c:	4b99      	ldr	r3, [pc, #612]	; (80142c4 <_dtoa_r+0x64c>)
 801405e:	2200      	movs	r2, #0
 8014060:	4630      	mov	r0, r6
 8014062:	4639      	mov	r1, r7
 8014064:	f7ec fd52 	bl	8000b0c <__aeabi_dcmplt>
 8014068:	2800      	cmp	r0, #0
 801406a:	f000 8081 	beq.w	8014170 <_dtoa_r+0x4f8>
 801406e:	9b01      	ldr	r3, [sp, #4]
 8014070:	2b00      	cmp	r3, #0
 8014072:	d07d      	beq.n	8014170 <_dtoa_r+0x4f8>
 8014074:	f1b9 0f00 	cmp.w	r9, #0
 8014078:	dd3c      	ble.n	80140f4 <_dtoa_r+0x47c>
 801407a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801407e:	9307      	str	r3, [sp, #28]
 8014080:	2200      	movs	r2, #0
 8014082:	4b91      	ldr	r3, [pc, #580]	; (80142c8 <_dtoa_r+0x650>)
 8014084:	4630      	mov	r0, r6
 8014086:	4639      	mov	r1, r7
 8014088:	f7ec face 	bl	8000628 <__aeabi_dmul>
 801408c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014090:	3501      	adds	r5, #1
 8014092:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8014096:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801409a:	4628      	mov	r0, r5
 801409c:	f7ec fa5a 	bl	8000554 <__aeabi_i2d>
 80140a0:	4632      	mov	r2, r6
 80140a2:	463b      	mov	r3, r7
 80140a4:	f7ec fac0 	bl	8000628 <__aeabi_dmul>
 80140a8:	4b88      	ldr	r3, [pc, #544]	; (80142cc <_dtoa_r+0x654>)
 80140aa:	2200      	movs	r2, #0
 80140ac:	f7ec f906 	bl	80002bc <__adddf3>
 80140b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80140b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80140b8:	9303      	str	r3, [sp, #12]
 80140ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d15c      	bne.n	801417a <_dtoa_r+0x502>
 80140c0:	4b83      	ldr	r3, [pc, #524]	; (80142d0 <_dtoa_r+0x658>)
 80140c2:	2200      	movs	r2, #0
 80140c4:	4630      	mov	r0, r6
 80140c6:	4639      	mov	r1, r7
 80140c8:	f7ec f8f6 	bl	80002b8 <__aeabi_dsub>
 80140cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80140d0:	4606      	mov	r6, r0
 80140d2:	460f      	mov	r7, r1
 80140d4:	f7ec fd38 	bl	8000b48 <__aeabi_dcmpgt>
 80140d8:	2800      	cmp	r0, #0
 80140da:	f040 8296 	bne.w	801460a <_dtoa_r+0x992>
 80140de:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80140e2:	4630      	mov	r0, r6
 80140e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80140e8:	4639      	mov	r1, r7
 80140ea:	f7ec fd0f 	bl	8000b0c <__aeabi_dcmplt>
 80140ee:	2800      	cmp	r0, #0
 80140f0:	f040 8288 	bne.w	8014604 <_dtoa_r+0x98c>
 80140f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80140f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80140fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80140fe:	2b00      	cmp	r3, #0
 8014100:	f2c0 8158 	blt.w	80143b4 <_dtoa_r+0x73c>
 8014104:	f1ba 0f0e 	cmp.w	sl, #14
 8014108:	f300 8154 	bgt.w	80143b4 <_dtoa_r+0x73c>
 801410c:	4b6b      	ldr	r3, [pc, #428]	; (80142bc <_dtoa_r+0x644>)
 801410e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014112:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014118:	2b00      	cmp	r3, #0
 801411a:	f280 80e3 	bge.w	80142e4 <_dtoa_r+0x66c>
 801411e:	9b01      	ldr	r3, [sp, #4]
 8014120:	2b00      	cmp	r3, #0
 8014122:	f300 80df 	bgt.w	80142e4 <_dtoa_r+0x66c>
 8014126:	f040 826d 	bne.w	8014604 <_dtoa_r+0x98c>
 801412a:	4b69      	ldr	r3, [pc, #420]	; (80142d0 <_dtoa_r+0x658>)
 801412c:	2200      	movs	r2, #0
 801412e:	4640      	mov	r0, r8
 8014130:	4649      	mov	r1, r9
 8014132:	f7ec fa79 	bl	8000628 <__aeabi_dmul>
 8014136:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801413a:	f7ec fcfb 	bl	8000b34 <__aeabi_dcmpge>
 801413e:	9e01      	ldr	r6, [sp, #4]
 8014140:	4637      	mov	r7, r6
 8014142:	2800      	cmp	r0, #0
 8014144:	f040 8243 	bne.w	80145ce <_dtoa_r+0x956>
 8014148:	9d00      	ldr	r5, [sp, #0]
 801414a:	2331      	movs	r3, #49	; 0x31
 801414c:	f805 3b01 	strb.w	r3, [r5], #1
 8014150:	f10a 0a01 	add.w	sl, sl, #1
 8014154:	e23f      	b.n	80145d6 <_dtoa_r+0x95e>
 8014156:	07f2      	lsls	r2, r6, #31
 8014158:	d505      	bpl.n	8014166 <_dtoa_r+0x4ee>
 801415a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801415e:	f7ec fa63 	bl	8000628 <__aeabi_dmul>
 8014162:	3501      	adds	r5, #1
 8014164:	2301      	movs	r3, #1
 8014166:	1076      	asrs	r6, r6, #1
 8014168:	3708      	adds	r7, #8
 801416a:	e76c      	b.n	8014046 <_dtoa_r+0x3ce>
 801416c:	2502      	movs	r5, #2
 801416e:	e76f      	b.n	8014050 <_dtoa_r+0x3d8>
 8014170:	9b01      	ldr	r3, [sp, #4]
 8014172:	f8cd a01c 	str.w	sl, [sp, #28]
 8014176:	930c      	str	r3, [sp, #48]	; 0x30
 8014178:	e78d      	b.n	8014096 <_dtoa_r+0x41e>
 801417a:	9900      	ldr	r1, [sp, #0]
 801417c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801417e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014180:	4b4e      	ldr	r3, [pc, #312]	; (80142bc <_dtoa_r+0x644>)
 8014182:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014186:	4401      	add	r1, r0
 8014188:	9102      	str	r1, [sp, #8]
 801418a:	9908      	ldr	r1, [sp, #32]
 801418c:	eeb0 8a47 	vmov.f32	s16, s14
 8014190:	eef0 8a67 	vmov.f32	s17, s15
 8014194:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014198:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801419c:	2900      	cmp	r1, #0
 801419e:	d045      	beq.n	801422c <_dtoa_r+0x5b4>
 80141a0:	494c      	ldr	r1, [pc, #304]	; (80142d4 <_dtoa_r+0x65c>)
 80141a2:	2000      	movs	r0, #0
 80141a4:	f7ec fb6a 	bl	800087c <__aeabi_ddiv>
 80141a8:	ec53 2b18 	vmov	r2, r3, d8
 80141ac:	f7ec f884 	bl	80002b8 <__aeabi_dsub>
 80141b0:	9d00      	ldr	r5, [sp, #0]
 80141b2:	ec41 0b18 	vmov	d8, r0, r1
 80141b6:	4639      	mov	r1, r7
 80141b8:	4630      	mov	r0, r6
 80141ba:	f7ec fce5 	bl	8000b88 <__aeabi_d2iz>
 80141be:	900c      	str	r0, [sp, #48]	; 0x30
 80141c0:	f7ec f9c8 	bl	8000554 <__aeabi_i2d>
 80141c4:	4602      	mov	r2, r0
 80141c6:	460b      	mov	r3, r1
 80141c8:	4630      	mov	r0, r6
 80141ca:	4639      	mov	r1, r7
 80141cc:	f7ec f874 	bl	80002b8 <__aeabi_dsub>
 80141d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80141d2:	3330      	adds	r3, #48	; 0x30
 80141d4:	f805 3b01 	strb.w	r3, [r5], #1
 80141d8:	ec53 2b18 	vmov	r2, r3, d8
 80141dc:	4606      	mov	r6, r0
 80141de:	460f      	mov	r7, r1
 80141e0:	f7ec fc94 	bl	8000b0c <__aeabi_dcmplt>
 80141e4:	2800      	cmp	r0, #0
 80141e6:	d165      	bne.n	80142b4 <_dtoa_r+0x63c>
 80141e8:	4632      	mov	r2, r6
 80141ea:	463b      	mov	r3, r7
 80141ec:	4935      	ldr	r1, [pc, #212]	; (80142c4 <_dtoa_r+0x64c>)
 80141ee:	2000      	movs	r0, #0
 80141f0:	f7ec f862 	bl	80002b8 <__aeabi_dsub>
 80141f4:	ec53 2b18 	vmov	r2, r3, d8
 80141f8:	f7ec fc88 	bl	8000b0c <__aeabi_dcmplt>
 80141fc:	2800      	cmp	r0, #0
 80141fe:	f040 80b9 	bne.w	8014374 <_dtoa_r+0x6fc>
 8014202:	9b02      	ldr	r3, [sp, #8]
 8014204:	429d      	cmp	r5, r3
 8014206:	f43f af75 	beq.w	80140f4 <_dtoa_r+0x47c>
 801420a:	4b2f      	ldr	r3, [pc, #188]	; (80142c8 <_dtoa_r+0x650>)
 801420c:	ec51 0b18 	vmov	r0, r1, d8
 8014210:	2200      	movs	r2, #0
 8014212:	f7ec fa09 	bl	8000628 <__aeabi_dmul>
 8014216:	4b2c      	ldr	r3, [pc, #176]	; (80142c8 <_dtoa_r+0x650>)
 8014218:	ec41 0b18 	vmov	d8, r0, r1
 801421c:	2200      	movs	r2, #0
 801421e:	4630      	mov	r0, r6
 8014220:	4639      	mov	r1, r7
 8014222:	f7ec fa01 	bl	8000628 <__aeabi_dmul>
 8014226:	4606      	mov	r6, r0
 8014228:	460f      	mov	r7, r1
 801422a:	e7c4      	b.n	80141b6 <_dtoa_r+0x53e>
 801422c:	ec51 0b17 	vmov	r0, r1, d7
 8014230:	f7ec f9fa 	bl	8000628 <__aeabi_dmul>
 8014234:	9b02      	ldr	r3, [sp, #8]
 8014236:	9d00      	ldr	r5, [sp, #0]
 8014238:	930c      	str	r3, [sp, #48]	; 0x30
 801423a:	ec41 0b18 	vmov	d8, r0, r1
 801423e:	4639      	mov	r1, r7
 8014240:	4630      	mov	r0, r6
 8014242:	f7ec fca1 	bl	8000b88 <__aeabi_d2iz>
 8014246:	9011      	str	r0, [sp, #68]	; 0x44
 8014248:	f7ec f984 	bl	8000554 <__aeabi_i2d>
 801424c:	4602      	mov	r2, r0
 801424e:	460b      	mov	r3, r1
 8014250:	4630      	mov	r0, r6
 8014252:	4639      	mov	r1, r7
 8014254:	f7ec f830 	bl	80002b8 <__aeabi_dsub>
 8014258:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801425a:	3330      	adds	r3, #48	; 0x30
 801425c:	f805 3b01 	strb.w	r3, [r5], #1
 8014260:	9b02      	ldr	r3, [sp, #8]
 8014262:	429d      	cmp	r5, r3
 8014264:	4606      	mov	r6, r0
 8014266:	460f      	mov	r7, r1
 8014268:	f04f 0200 	mov.w	r2, #0
 801426c:	d134      	bne.n	80142d8 <_dtoa_r+0x660>
 801426e:	4b19      	ldr	r3, [pc, #100]	; (80142d4 <_dtoa_r+0x65c>)
 8014270:	ec51 0b18 	vmov	r0, r1, d8
 8014274:	f7ec f822 	bl	80002bc <__adddf3>
 8014278:	4602      	mov	r2, r0
 801427a:	460b      	mov	r3, r1
 801427c:	4630      	mov	r0, r6
 801427e:	4639      	mov	r1, r7
 8014280:	f7ec fc62 	bl	8000b48 <__aeabi_dcmpgt>
 8014284:	2800      	cmp	r0, #0
 8014286:	d175      	bne.n	8014374 <_dtoa_r+0x6fc>
 8014288:	ec53 2b18 	vmov	r2, r3, d8
 801428c:	4911      	ldr	r1, [pc, #68]	; (80142d4 <_dtoa_r+0x65c>)
 801428e:	2000      	movs	r0, #0
 8014290:	f7ec f812 	bl	80002b8 <__aeabi_dsub>
 8014294:	4602      	mov	r2, r0
 8014296:	460b      	mov	r3, r1
 8014298:	4630      	mov	r0, r6
 801429a:	4639      	mov	r1, r7
 801429c:	f7ec fc36 	bl	8000b0c <__aeabi_dcmplt>
 80142a0:	2800      	cmp	r0, #0
 80142a2:	f43f af27 	beq.w	80140f4 <_dtoa_r+0x47c>
 80142a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80142a8:	1e6b      	subs	r3, r5, #1
 80142aa:	930c      	str	r3, [sp, #48]	; 0x30
 80142ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80142b0:	2b30      	cmp	r3, #48	; 0x30
 80142b2:	d0f8      	beq.n	80142a6 <_dtoa_r+0x62e>
 80142b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80142b8:	e04a      	b.n	8014350 <_dtoa_r+0x6d8>
 80142ba:	bf00      	nop
 80142bc:	08018520 	.word	0x08018520
 80142c0:	080184f8 	.word	0x080184f8
 80142c4:	3ff00000 	.word	0x3ff00000
 80142c8:	40240000 	.word	0x40240000
 80142cc:	401c0000 	.word	0x401c0000
 80142d0:	40140000 	.word	0x40140000
 80142d4:	3fe00000 	.word	0x3fe00000
 80142d8:	4baf      	ldr	r3, [pc, #700]	; (8014598 <_dtoa_r+0x920>)
 80142da:	f7ec f9a5 	bl	8000628 <__aeabi_dmul>
 80142de:	4606      	mov	r6, r0
 80142e0:	460f      	mov	r7, r1
 80142e2:	e7ac      	b.n	801423e <_dtoa_r+0x5c6>
 80142e4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80142e8:	9d00      	ldr	r5, [sp, #0]
 80142ea:	4642      	mov	r2, r8
 80142ec:	464b      	mov	r3, r9
 80142ee:	4630      	mov	r0, r6
 80142f0:	4639      	mov	r1, r7
 80142f2:	f7ec fac3 	bl	800087c <__aeabi_ddiv>
 80142f6:	f7ec fc47 	bl	8000b88 <__aeabi_d2iz>
 80142fa:	9002      	str	r0, [sp, #8]
 80142fc:	f7ec f92a 	bl	8000554 <__aeabi_i2d>
 8014300:	4642      	mov	r2, r8
 8014302:	464b      	mov	r3, r9
 8014304:	f7ec f990 	bl	8000628 <__aeabi_dmul>
 8014308:	4602      	mov	r2, r0
 801430a:	460b      	mov	r3, r1
 801430c:	4630      	mov	r0, r6
 801430e:	4639      	mov	r1, r7
 8014310:	f7eb ffd2 	bl	80002b8 <__aeabi_dsub>
 8014314:	9e02      	ldr	r6, [sp, #8]
 8014316:	9f01      	ldr	r7, [sp, #4]
 8014318:	3630      	adds	r6, #48	; 0x30
 801431a:	f805 6b01 	strb.w	r6, [r5], #1
 801431e:	9e00      	ldr	r6, [sp, #0]
 8014320:	1bae      	subs	r6, r5, r6
 8014322:	42b7      	cmp	r7, r6
 8014324:	4602      	mov	r2, r0
 8014326:	460b      	mov	r3, r1
 8014328:	d137      	bne.n	801439a <_dtoa_r+0x722>
 801432a:	f7eb ffc7 	bl	80002bc <__adddf3>
 801432e:	4642      	mov	r2, r8
 8014330:	464b      	mov	r3, r9
 8014332:	4606      	mov	r6, r0
 8014334:	460f      	mov	r7, r1
 8014336:	f7ec fc07 	bl	8000b48 <__aeabi_dcmpgt>
 801433a:	b9c8      	cbnz	r0, 8014370 <_dtoa_r+0x6f8>
 801433c:	4642      	mov	r2, r8
 801433e:	464b      	mov	r3, r9
 8014340:	4630      	mov	r0, r6
 8014342:	4639      	mov	r1, r7
 8014344:	f7ec fbd8 	bl	8000af8 <__aeabi_dcmpeq>
 8014348:	b110      	cbz	r0, 8014350 <_dtoa_r+0x6d8>
 801434a:	9b02      	ldr	r3, [sp, #8]
 801434c:	07d9      	lsls	r1, r3, #31
 801434e:	d40f      	bmi.n	8014370 <_dtoa_r+0x6f8>
 8014350:	4620      	mov	r0, r4
 8014352:	4659      	mov	r1, fp
 8014354:	f001 f882 	bl	801545c <_Bfree>
 8014358:	2300      	movs	r3, #0
 801435a:	702b      	strb	r3, [r5, #0]
 801435c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801435e:	f10a 0001 	add.w	r0, sl, #1
 8014362:	6018      	str	r0, [r3, #0]
 8014364:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014366:	2b00      	cmp	r3, #0
 8014368:	f43f acd8 	beq.w	8013d1c <_dtoa_r+0xa4>
 801436c:	601d      	str	r5, [r3, #0]
 801436e:	e4d5      	b.n	8013d1c <_dtoa_r+0xa4>
 8014370:	f8cd a01c 	str.w	sl, [sp, #28]
 8014374:	462b      	mov	r3, r5
 8014376:	461d      	mov	r5, r3
 8014378:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801437c:	2a39      	cmp	r2, #57	; 0x39
 801437e:	d108      	bne.n	8014392 <_dtoa_r+0x71a>
 8014380:	9a00      	ldr	r2, [sp, #0]
 8014382:	429a      	cmp	r2, r3
 8014384:	d1f7      	bne.n	8014376 <_dtoa_r+0x6fe>
 8014386:	9a07      	ldr	r2, [sp, #28]
 8014388:	9900      	ldr	r1, [sp, #0]
 801438a:	3201      	adds	r2, #1
 801438c:	9207      	str	r2, [sp, #28]
 801438e:	2230      	movs	r2, #48	; 0x30
 8014390:	700a      	strb	r2, [r1, #0]
 8014392:	781a      	ldrb	r2, [r3, #0]
 8014394:	3201      	adds	r2, #1
 8014396:	701a      	strb	r2, [r3, #0]
 8014398:	e78c      	b.n	80142b4 <_dtoa_r+0x63c>
 801439a:	4b7f      	ldr	r3, [pc, #508]	; (8014598 <_dtoa_r+0x920>)
 801439c:	2200      	movs	r2, #0
 801439e:	f7ec f943 	bl	8000628 <__aeabi_dmul>
 80143a2:	2200      	movs	r2, #0
 80143a4:	2300      	movs	r3, #0
 80143a6:	4606      	mov	r6, r0
 80143a8:	460f      	mov	r7, r1
 80143aa:	f7ec fba5 	bl	8000af8 <__aeabi_dcmpeq>
 80143ae:	2800      	cmp	r0, #0
 80143b0:	d09b      	beq.n	80142ea <_dtoa_r+0x672>
 80143b2:	e7cd      	b.n	8014350 <_dtoa_r+0x6d8>
 80143b4:	9a08      	ldr	r2, [sp, #32]
 80143b6:	2a00      	cmp	r2, #0
 80143b8:	f000 80c4 	beq.w	8014544 <_dtoa_r+0x8cc>
 80143bc:	9a05      	ldr	r2, [sp, #20]
 80143be:	2a01      	cmp	r2, #1
 80143c0:	f300 80a8 	bgt.w	8014514 <_dtoa_r+0x89c>
 80143c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80143c6:	2a00      	cmp	r2, #0
 80143c8:	f000 80a0 	beq.w	801450c <_dtoa_r+0x894>
 80143cc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80143d0:	9e06      	ldr	r6, [sp, #24]
 80143d2:	4645      	mov	r5, r8
 80143d4:	9a04      	ldr	r2, [sp, #16]
 80143d6:	2101      	movs	r1, #1
 80143d8:	441a      	add	r2, r3
 80143da:	4620      	mov	r0, r4
 80143dc:	4498      	add	r8, r3
 80143de:	9204      	str	r2, [sp, #16]
 80143e0:	f001 f942 	bl	8015668 <__i2b>
 80143e4:	4607      	mov	r7, r0
 80143e6:	2d00      	cmp	r5, #0
 80143e8:	dd0b      	ble.n	8014402 <_dtoa_r+0x78a>
 80143ea:	9b04      	ldr	r3, [sp, #16]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	dd08      	ble.n	8014402 <_dtoa_r+0x78a>
 80143f0:	42ab      	cmp	r3, r5
 80143f2:	9a04      	ldr	r2, [sp, #16]
 80143f4:	bfa8      	it	ge
 80143f6:	462b      	movge	r3, r5
 80143f8:	eba8 0803 	sub.w	r8, r8, r3
 80143fc:	1aed      	subs	r5, r5, r3
 80143fe:	1ad3      	subs	r3, r2, r3
 8014400:	9304      	str	r3, [sp, #16]
 8014402:	9b06      	ldr	r3, [sp, #24]
 8014404:	b1fb      	cbz	r3, 8014446 <_dtoa_r+0x7ce>
 8014406:	9b08      	ldr	r3, [sp, #32]
 8014408:	2b00      	cmp	r3, #0
 801440a:	f000 809f 	beq.w	801454c <_dtoa_r+0x8d4>
 801440e:	2e00      	cmp	r6, #0
 8014410:	dd11      	ble.n	8014436 <_dtoa_r+0x7be>
 8014412:	4639      	mov	r1, r7
 8014414:	4632      	mov	r2, r6
 8014416:	4620      	mov	r0, r4
 8014418:	f001 f9e2 	bl	80157e0 <__pow5mult>
 801441c:	465a      	mov	r2, fp
 801441e:	4601      	mov	r1, r0
 8014420:	4607      	mov	r7, r0
 8014422:	4620      	mov	r0, r4
 8014424:	f001 f936 	bl	8015694 <__multiply>
 8014428:	4659      	mov	r1, fp
 801442a:	9007      	str	r0, [sp, #28]
 801442c:	4620      	mov	r0, r4
 801442e:	f001 f815 	bl	801545c <_Bfree>
 8014432:	9b07      	ldr	r3, [sp, #28]
 8014434:	469b      	mov	fp, r3
 8014436:	9b06      	ldr	r3, [sp, #24]
 8014438:	1b9a      	subs	r2, r3, r6
 801443a:	d004      	beq.n	8014446 <_dtoa_r+0x7ce>
 801443c:	4659      	mov	r1, fp
 801443e:	4620      	mov	r0, r4
 8014440:	f001 f9ce 	bl	80157e0 <__pow5mult>
 8014444:	4683      	mov	fp, r0
 8014446:	2101      	movs	r1, #1
 8014448:	4620      	mov	r0, r4
 801444a:	f001 f90d 	bl	8015668 <__i2b>
 801444e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014450:	2b00      	cmp	r3, #0
 8014452:	4606      	mov	r6, r0
 8014454:	dd7c      	ble.n	8014550 <_dtoa_r+0x8d8>
 8014456:	461a      	mov	r2, r3
 8014458:	4601      	mov	r1, r0
 801445a:	4620      	mov	r0, r4
 801445c:	f001 f9c0 	bl	80157e0 <__pow5mult>
 8014460:	9b05      	ldr	r3, [sp, #20]
 8014462:	2b01      	cmp	r3, #1
 8014464:	4606      	mov	r6, r0
 8014466:	dd76      	ble.n	8014556 <_dtoa_r+0x8de>
 8014468:	2300      	movs	r3, #0
 801446a:	9306      	str	r3, [sp, #24]
 801446c:	6933      	ldr	r3, [r6, #16]
 801446e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014472:	6918      	ldr	r0, [r3, #16]
 8014474:	f001 f8a8 	bl	80155c8 <__hi0bits>
 8014478:	f1c0 0020 	rsb	r0, r0, #32
 801447c:	9b04      	ldr	r3, [sp, #16]
 801447e:	4418      	add	r0, r3
 8014480:	f010 001f 	ands.w	r0, r0, #31
 8014484:	f000 8086 	beq.w	8014594 <_dtoa_r+0x91c>
 8014488:	f1c0 0320 	rsb	r3, r0, #32
 801448c:	2b04      	cmp	r3, #4
 801448e:	dd7f      	ble.n	8014590 <_dtoa_r+0x918>
 8014490:	f1c0 001c 	rsb	r0, r0, #28
 8014494:	9b04      	ldr	r3, [sp, #16]
 8014496:	4403      	add	r3, r0
 8014498:	4480      	add	r8, r0
 801449a:	4405      	add	r5, r0
 801449c:	9304      	str	r3, [sp, #16]
 801449e:	f1b8 0f00 	cmp.w	r8, #0
 80144a2:	dd05      	ble.n	80144b0 <_dtoa_r+0x838>
 80144a4:	4659      	mov	r1, fp
 80144a6:	4642      	mov	r2, r8
 80144a8:	4620      	mov	r0, r4
 80144aa:	f001 f9f3 	bl	8015894 <__lshift>
 80144ae:	4683      	mov	fp, r0
 80144b0:	9b04      	ldr	r3, [sp, #16]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	dd05      	ble.n	80144c2 <_dtoa_r+0x84a>
 80144b6:	4631      	mov	r1, r6
 80144b8:	461a      	mov	r2, r3
 80144ba:	4620      	mov	r0, r4
 80144bc:	f001 f9ea 	bl	8015894 <__lshift>
 80144c0:	4606      	mov	r6, r0
 80144c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d069      	beq.n	801459c <_dtoa_r+0x924>
 80144c8:	4631      	mov	r1, r6
 80144ca:	4658      	mov	r0, fp
 80144cc:	f001 fa4e 	bl	801596c <__mcmp>
 80144d0:	2800      	cmp	r0, #0
 80144d2:	da63      	bge.n	801459c <_dtoa_r+0x924>
 80144d4:	2300      	movs	r3, #0
 80144d6:	4659      	mov	r1, fp
 80144d8:	220a      	movs	r2, #10
 80144da:	4620      	mov	r0, r4
 80144dc:	f000 ffe0 	bl	80154a0 <__multadd>
 80144e0:	9b08      	ldr	r3, [sp, #32]
 80144e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80144e6:	4683      	mov	fp, r0
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	f000 818f 	beq.w	801480c <_dtoa_r+0xb94>
 80144ee:	4639      	mov	r1, r7
 80144f0:	2300      	movs	r3, #0
 80144f2:	220a      	movs	r2, #10
 80144f4:	4620      	mov	r0, r4
 80144f6:	f000 ffd3 	bl	80154a0 <__multadd>
 80144fa:	f1b9 0f00 	cmp.w	r9, #0
 80144fe:	4607      	mov	r7, r0
 8014500:	f300 808e 	bgt.w	8014620 <_dtoa_r+0x9a8>
 8014504:	9b05      	ldr	r3, [sp, #20]
 8014506:	2b02      	cmp	r3, #2
 8014508:	dc50      	bgt.n	80145ac <_dtoa_r+0x934>
 801450a:	e089      	b.n	8014620 <_dtoa_r+0x9a8>
 801450c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801450e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014512:	e75d      	b.n	80143d0 <_dtoa_r+0x758>
 8014514:	9b01      	ldr	r3, [sp, #4]
 8014516:	1e5e      	subs	r6, r3, #1
 8014518:	9b06      	ldr	r3, [sp, #24]
 801451a:	42b3      	cmp	r3, r6
 801451c:	bfbf      	itttt	lt
 801451e:	9b06      	ldrlt	r3, [sp, #24]
 8014520:	9606      	strlt	r6, [sp, #24]
 8014522:	1af2      	sublt	r2, r6, r3
 8014524:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8014526:	bfb6      	itet	lt
 8014528:	189b      	addlt	r3, r3, r2
 801452a:	1b9e      	subge	r6, r3, r6
 801452c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801452e:	9b01      	ldr	r3, [sp, #4]
 8014530:	bfb8      	it	lt
 8014532:	2600      	movlt	r6, #0
 8014534:	2b00      	cmp	r3, #0
 8014536:	bfb5      	itete	lt
 8014538:	eba8 0503 	sublt.w	r5, r8, r3
 801453c:	9b01      	ldrge	r3, [sp, #4]
 801453e:	2300      	movlt	r3, #0
 8014540:	4645      	movge	r5, r8
 8014542:	e747      	b.n	80143d4 <_dtoa_r+0x75c>
 8014544:	9e06      	ldr	r6, [sp, #24]
 8014546:	9f08      	ldr	r7, [sp, #32]
 8014548:	4645      	mov	r5, r8
 801454a:	e74c      	b.n	80143e6 <_dtoa_r+0x76e>
 801454c:	9a06      	ldr	r2, [sp, #24]
 801454e:	e775      	b.n	801443c <_dtoa_r+0x7c4>
 8014550:	9b05      	ldr	r3, [sp, #20]
 8014552:	2b01      	cmp	r3, #1
 8014554:	dc18      	bgt.n	8014588 <_dtoa_r+0x910>
 8014556:	9b02      	ldr	r3, [sp, #8]
 8014558:	b9b3      	cbnz	r3, 8014588 <_dtoa_r+0x910>
 801455a:	9b03      	ldr	r3, [sp, #12]
 801455c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014560:	b9a3      	cbnz	r3, 801458c <_dtoa_r+0x914>
 8014562:	9b03      	ldr	r3, [sp, #12]
 8014564:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014568:	0d1b      	lsrs	r3, r3, #20
 801456a:	051b      	lsls	r3, r3, #20
 801456c:	b12b      	cbz	r3, 801457a <_dtoa_r+0x902>
 801456e:	9b04      	ldr	r3, [sp, #16]
 8014570:	3301      	adds	r3, #1
 8014572:	9304      	str	r3, [sp, #16]
 8014574:	f108 0801 	add.w	r8, r8, #1
 8014578:	2301      	movs	r3, #1
 801457a:	9306      	str	r3, [sp, #24]
 801457c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801457e:	2b00      	cmp	r3, #0
 8014580:	f47f af74 	bne.w	801446c <_dtoa_r+0x7f4>
 8014584:	2001      	movs	r0, #1
 8014586:	e779      	b.n	801447c <_dtoa_r+0x804>
 8014588:	2300      	movs	r3, #0
 801458a:	e7f6      	b.n	801457a <_dtoa_r+0x902>
 801458c:	9b02      	ldr	r3, [sp, #8]
 801458e:	e7f4      	b.n	801457a <_dtoa_r+0x902>
 8014590:	d085      	beq.n	801449e <_dtoa_r+0x826>
 8014592:	4618      	mov	r0, r3
 8014594:	301c      	adds	r0, #28
 8014596:	e77d      	b.n	8014494 <_dtoa_r+0x81c>
 8014598:	40240000 	.word	0x40240000
 801459c:	9b01      	ldr	r3, [sp, #4]
 801459e:	2b00      	cmp	r3, #0
 80145a0:	dc38      	bgt.n	8014614 <_dtoa_r+0x99c>
 80145a2:	9b05      	ldr	r3, [sp, #20]
 80145a4:	2b02      	cmp	r3, #2
 80145a6:	dd35      	ble.n	8014614 <_dtoa_r+0x99c>
 80145a8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80145ac:	f1b9 0f00 	cmp.w	r9, #0
 80145b0:	d10d      	bne.n	80145ce <_dtoa_r+0x956>
 80145b2:	4631      	mov	r1, r6
 80145b4:	464b      	mov	r3, r9
 80145b6:	2205      	movs	r2, #5
 80145b8:	4620      	mov	r0, r4
 80145ba:	f000 ff71 	bl	80154a0 <__multadd>
 80145be:	4601      	mov	r1, r0
 80145c0:	4606      	mov	r6, r0
 80145c2:	4658      	mov	r0, fp
 80145c4:	f001 f9d2 	bl	801596c <__mcmp>
 80145c8:	2800      	cmp	r0, #0
 80145ca:	f73f adbd 	bgt.w	8014148 <_dtoa_r+0x4d0>
 80145ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145d0:	9d00      	ldr	r5, [sp, #0]
 80145d2:	ea6f 0a03 	mvn.w	sl, r3
 80145d6:	f04f 0800 	mov.w	r8, #0
 80145da:	4631      	mov	r1, r6
 80145dc:	4620      	mov	r0, r4
 80145de:	f000 ff3d 	bl	801545c <_Bfree>
 80145e2:	2f00      	cmp	r7, #0
 80145e4:	f43f aeb4 	beq.w	8014350 <_dtoa_r+0x6d8>
 80145e8:	f1b8 0f00 	cmp.w	r8, #0
 80145ec:	d005      	beq.n	80145fa <_dtoa_r+0x982>
 80145ee:	45b8      	cmp	r8, r7
 80145f0:	d003      	beq.n	80145fa <_dtoa_r+0x982>
 80145f2:	4641      	mov	r1, r8
 80145f4:	4620      	mov	r0, r4
 80145f6:	f000 ff31 	bl	801545c <_Bfree>
 80145fa:	4639      	mov	r1, r7
 80145fc:	4620      	mov	r0, r4
 80145fe:	f000 ff2d 	bl	801545c <_Bfree>
 8014602:	e6a5      	b.n	8014350 <_dtoa_r+0x6d8>
 8014604:	2600      	movs	r6, #0
 8014606:	4637      	mov	r7, r6
 8014608:	e7e1      	b.n	80145ce <_dtoa_r+0x956>
 801460a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801460c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8014610:	4637      	mov	r7, r6
 8014612:	e599      	b.n	8014148 <_dtoa_r+0x4d0>
 8014614:	9b08      	ldr	r3, [sp, #32]
 8014616:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801461a:	2b00      	cmp	r3, #0
 801461c:	f000 80fd 	beq.w	801481a <_dtoa_r+0xba2>
 8014620:	2d00      	cmp	r5, #0
 8014622:	dd05      	ble.n	8014630 <_dtoa_r+0x9b8>
 8014624:	4639      	mov	r1, r7
 8014626:	462a      	mov	r2, r5
 8014628:	4620      	mov	r0, r4
 801462a:	f001 f933 	bl	8015894 <__lshift>
 801462e:	4607      	mov	r7, r0
 8014630:	9b06      	ldr	r3, [sp, #24]
 8014632:	2b00      	cmp	r3, #0
 8014634:	d05c      	beq.n	80146f0 <_dtoa_r+0xa78>
 8014636:	6879      	ldr	r1, [r7, #4]
 8014638:	4620      	mov	r0, r4
 801463a:	f000 fecf 	bl	80153dc <_Balloc>
 801463e:	4605      	mov	r5, r0
 8014640:	b928      	cbnz	r0, 801464e <_dtoa_r+0x9d6>
 8014642:	4b80      	ldr	r3, [pc, #512]	; (8014844 <_dtoa_r+0xbcc>)
 8014644:	4602      	mov	r2, r0
 8014646:	f240 21ea 	movw	r1, #746	; 0x2ea
 801464a:	f7ff bb2e 	b.w	8013caa <_dtoa_r+0x32>
 801464e:	693a      	ldr	r2, [r7, #16]
 8014650:	3202      	adds	r2, #2
 8014652:	0092      	lsls	r2, r2, #2
 8014654:	f107 010c 	add.w	r1, r7, #12
 8014658:	300c      	adds	r0, #12
 801465a:	f7fd faeb 	bl	8011c34 <memcpy>
 801465e:	2201      	movs	r2, #1
 8014660:	4629      	mov	r1, r5
 8014662:	4620      	mov	r0, r4
 8014664:	f001 f916 	bl	8015894 <__lshift>
 8014668:	9b00      	ldr	r3, [sp, #0]
 801466a:	3301      	adds	r3, #1
 801466c:	9301      	str	r3, [sp, #4]
 801466e:	9b00      	ldr	r3, [sp, #0]
 8014670:	444b      	add	r3, r9
 8014672:	9307      	str	r3, [sp, #28]
 8014674:	9b02      	ldr	r3, [sp, #8]
 8014676:	f003 0301 	and.w	r3, r3, #1
 801467a:	46b8      	mov	r8, r7
 801467c:	9306      	str	r3, [sp, #24]
 801467e:	4607      	mov	r7, r0
 8014680:	9b01      	ldr	r3, [sp, #4]
 8014682:	4631      	mov	r1, r6
 8014684:	3b01      	subs	r3, #1
 8014686:	4658      	mov	r0, fp
 8014688:	9302      	str	r3, [sp, #8]
 801468a:	f7ff fa68 	bl	8013b5e <quorem>
 801468e:	4603      	mov	r3, r0
 8014690:	3330      	adds	r3, #48	; 0x30
 8014692:	9004      	str	r0, [sp, #16]
 8014694:	4641      	mov	r1, r8
 8014696:	4658      	mov	r0, fp
 8014698:	9308      	str	r3, [sp, #32]
 801469a:	f001 f967 	bl	801596c <__mcmp>
 801469e:	463a      	mov	r2, r7
 80146a0:	4681      	mov	r9, r0
 80146a2:	4631      	mov	r1, r6
 80146a4:	4620      	mov	r0, r4
 80146a6:	f001 f97d 	bl	80159a4 <__mdiff>
 80146aa:	68c2      	ldr	r2, [r0, #12]
 80146ac:	9b08      	ldr	r3, [sp, #32]
 80146ae:	4605      	mov	r5, r0
 80146b0:	bb02      	cbnz	r2, 80146f4 <_dtoa_r+0xa7c>
 80146b2:	4601      	mov	r1, r0
 80146b4:	4658      	mov	r0, fp
 80146b6:	f001 f959 	bl	801596c <__mcmp>
 80146ba:	9b08      	ldr	r3, [sp, #32]
 80146bc:	4602      	mov	r2, r0
 80146be:	4629      	mov	r1, r5
 80146c0:	4620      	mov	r0, r4
 80146c2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80146c6:	f000 fec9 	bl	801545c <_Bfree>
 80146ca:	9b05      	ldr	r3, [sp, #20]
 80146cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80146ce:	9d01      	ldr	r5, [sp, #4]
 80146d0:	ea43 0102 	orr.w	r1, r3, r2
 80146d4:	9b06      	ldr	r3, [sp, #24]
 80146d6:	430b      	orrs	r3, r1
 80146d8:	9b08      	ldr	r3, [sp, #32]
 80146da:	d10d      	bne.n	80146f8 <_dtoa_r+0xa80>
 80146dc:	2b39      	cmp	r3, #57	; 0x39
 80146de:	d029      	beq.n	8014734 <_dtoa_r+0xabc>
 80146e0:	f1b9 0f00 	cmp.w	r9, #0
 80146e4:	dd01      	ble.n	80146ea <_dtoa_r+0xa72>
 80146e6:	9b04      	ldr	r3, [sp, #16]
 80146e8:	3331      	adds	r3, #49	; 0x31
 80146ea:	9a02      	ldr	r2, [sp, #8]
 80146ec:	7013      	strb	r3, [r2, #0]
 80146ee:	e774      	b.n	80145da <_dtoa_r+0x962>
 80146f0:	4638      	mov	r0, r7
 80146f2:	e7b9      	b.n	8014668 <_dtoa_r+0x9f0>
 80146f4:	2201      	movs	r2, #1
 80146f6:	e7e2      	b.n	80146be <_dtoa_r+0xa46>
 80146f8:	f1b9 0f00 	cmp.w	r9, #0
 80146fc:	db06      	blt.n	801470c <_dtoa_r+0xa94>
 80146fe:	9905      	ldr	r1, [sp, #20]
 8014700:	ea41 0909 	orr.w	r9, r1, r9
 8014704:	9906      	ldr	r1, [sp, #24]
 8014706:	ea59 0101 	orrs.w	r1, r9, r1
 801470a:	d120      	bne.n	801474e <_dtoa_r+0xad6>
 801470c:	2a00      	cmp	r2, #0
 801470e:	ddec      	ble.n	80146ea <_dtoa_r+0xa72>
 8014710:	4659      	mov	r1, fp
 8014712:	2201      	movs	r2, #1
 8014714:	4620      	mov	r0, r4
 8014716:	9301      	str	r3, [sp, #4]
 8014718:	f001 f8bc 	bl	8015894 <__lshift>
 801471c:	4631      	mov	r1, r6
 801471e:	4683      	mov	fp, r0
 8014720:	f001 f924 	bl	801596c <__mcmp>
 8014724:	2800      	cmp	r0, #0
 8014726:	9b01      	ldr	r3, [sp, #4]
 8014728:	dc02      	bgt.n	8014730 <_dtoa_r+0xab8>
 801472a:	d1de      	bne.n	80146ea <_dtoa_r+0xa72>
 801472c:	07da      	lsls	r2, r3, #31
 801472e:	d5dc      	bpl.n	80146ea <_dtoa_r+0xa72>
 8014730:	2b39      	cmp	r3, #57	; 0x39
 8014732:	d1d8      	bne.n	80146e6 <_dtoa_r+0xa6e>
 8014734:	9a02      	ldr	r2, [sp, #8]
 8014736:	2339      	movs	r3, #57	; 0x39
 8014738:	7013      	strb	r3, [r2, #0]
 801473a:	462b      	mov	r3, r5
 801473c:	461d      	mov	r5, r3
 801473e:	3b01      	subs	r3, #1
 8014740:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014744:	2a39      	cmp	r2, #57	; 0x39
 8014746:	d050      	beq.n	80147ea <_dtoa_r+0xb72>
 8014748:	3201      	adds	r2, #1
 801474a:	701a      	strb	r2, [r3, #0]
 801474c:	e745      	b.n	80145da <_dtoa_r+0x962>
 801474e:	2a00      	cmp	r2, #0
 8014750:	dd03      	ble.n	801475a <_dtoa_r+0xae2>
 8014752:	2b39      	cmp	r3, #57	; 0x39
 8014754:	d0ee      	beq.n	8014734 <_dtoa_r+0xabc>
 8014756:	3301      	adds	r3, #1
 8014758:	e7c7      	b.n	80146ea <_dtoa_r+0xa72>
 801475a:	9a01      	ldr	r2, [sp, #4]
 801475c:	9907      	ldr	r1, [sp, #28]
 801475e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014762:	428a      	cmp	r2, r1
 8014764:	d02a      	beq.n	80147bc <_dtoa_r+0xb44>
 8014766:	4659      	mov	r1, fp
 8014768:	2300      	movs	r3, #0
 801476a:	220a      	movs	r2, #10
 801476c:	4620      	mov	r0, r4
 801476e:	f000 fe97 	bl	80154a0 <__multadd>
 8014772:	45b8      	cmp	r8, r7
 8014774:	4683      	mov	fp, r0
 8014776:	f04f 0300 	mov.w	r3, #0
 801477a:	f04f 020a 	mov.w	r2, #10
 801477e:	4641      	mov	r1, r8
 8014780:	4620      	mov	r0, r4
 8014782:	d107      	bne.n	8014794 <_dtoa_r+0xb1c>
 8014784:	f000 fe8c 	bl	80154a0 <__multadd>
 8014788:	4680      	mov	r8, r0
 801478a:	4607      	mov	r7, r0
 801478c:	9b01      	ldr	r3, [sp, #4]
 801478e:	3301      	adds	r3, #1
 8014790:	9301      	str	r3, [sp, #4]
 8014792:	e775      	b.n	8014680 <_dtoa_r+0xa08>
 8014794:	f000 fe84 	bl	80154a0 <__multadd>
 8014798:	4639      	mov	r1, r7
 801479a:	4680      	mov	r8, r0
 801479c:	2300      	movs	r3, #0
 801479e:	220a      	movs	r2, #10
 80147a0:	4620      	mov	r0, r4
 80147a2:	f000 fe7d 	bl	80154a0 <__multadd>
 80147a6:	4607      	mov	r7, r0
 80147a8:	e7f0      	b.n	801478c <_dtoa_r+0xb14>
 80147aa:	f1b9 0f00 	cmp.w	r9, #0
 80147ae:	9a00      	ldr	r2, [sp, #0]
 80147b0:	bfcc      	ite	gt
 80147b2:	464d      	movgt	r5, r9
 80147b4:	2501      	movle	r5, #1
 80147b6:	4415      	add	r5, r2
 80147b8:	f04f 0800 	mov.w	r8, #0
 80147bc:	4659      	mov	r1, fp
 80147be:	2201      	movs	r2, #1
 80147c0:	4620      	mov	r0, r4
 80147c2:	9301      	str	r3, [sp, #4]
 80147c4:	f001 f866 	bl	8015894 <__lshift>
 80147c8:	4631      	mov	r1, r6
 80147ca:	4683      	mov	fp, r0
 80147cc:	f001 f8ce 	bl	801596c <__mcmp>
 80147d0:	2800      	cmp	r0, #0
 80147d2:	dcb2      	bgt.n	801473a <_dtoa_r+0xac2>
 80147d4:	d102      	bne.n	80147dc <_dtoa_r+0xb64>
 80147d6:	9b01      	ldr	r3, [sp, #4]
 80147d8:	07db      	lsls	r3, r3, #31
 80147da:	d4ae      	bmi.n	801473a <_dtoa_r+0xac2>
 80147dc:	462b      	mov	r3, r5
 80147de:	461d      	mov	r5, r3
 80147e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80147e4:	2a30      	cmp	r2, #48	; 0x30
 80147e6:	d0fa      	beq.n	80147de <_dtoa_r+0xb66>
 80147e8:	e6f7      	b.n	80145da <_dtoa_r+0x962>
 80147ea:	9a00      	ldr	r2, [sp, #0]
 80147ec:	429a      	cmp	r2, r3
 80147ee:	d1a5      	bne.n	801473c <_dtoa_r+0xac4>
 80147f0:	f10a 0a01 	add.w	sl, sl, #1
 80147f4:	2331      	movs	r3, #49	; 0x31
 80147f6:	e779      	b.n	80146ec <_dtoa_r+0xa74>
 80147f8:	4b13      	ldr	r3, [pc, #76]	; (8014848 <_dtoa_r+0xbd0>)
 80147fa:	f7ff baaf 	b.w	8013d5c <_dtoa_r+0xe4>
 80147fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014800:	2b00      	cmp	r3, #0
 8014802:	f47f aa86 	bne.w	8013d12 <_dtoa_r+0x9a>
 8014806:	4b11      	ldr	r3, [pc, #68]	; (801484c <_dtoa_r+0xbd4>)
 8014808:	f7ff baa8 	b.w	8013d5c <_dtoa_r+0xe4>
 801480c:	f1b9 0f00 	cmp.w	r9, #0
 8014810:	dc03      	bgt.n	801481a <_dtoa_r+0xba2>
 8014812:	9b05      	ldr	r3, [sp, #20]
 8014814:	2b02      	cmp	r3, #2
 8014816:	f73f aec9 	bgt.w	80145ac <_dtoa_r+0x934>
 801481a:	9d00      	ldr	r5, [sp, #0]
 801481c:	4631      	mov	r1, r6
 801481e:	4658      	mov	r0, fp
 8014820:	f7ff f99d 	bl	8013b5e <quorem>
 8014824:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8014828:	f805 3b01 	strb.w	r3, [r5], #1
 801482c:	9a00      	ldr	r2, [sp, #0]
 801482e:	1aaa      	subs	r2, r5, r2
 8014830:	4591      	cmp	r9, r2
 8014832:	ddba      	ble.n	80147aa <_dtoa_r+0xb32>
 8014834:	4659      	mov	r1, fp
 8014836:	2300      	movs	r3, #0
 8014838:	220a      	movs	r2, #10
 801483a:	4620      	mov	r0, r4
 801483c:	f000 fe30 	bl	80154a0 <__multadd>
 8014840:	4683      	mov	fp, r0
 8014842:	e7eb      	b.n	801481c <_dtoa_r+0xba4>
 8014844:	080183a3 	.word	0x080183a3
 8014848:	080182a1 	.word	0x080182a1
 801484c:	08018320 	.word	0x08018320

08014850 <__sflush_r>:
 8014850:	898a      	ldrh	r2, [r1, #12]
 8014852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014856:	4605      	mov	r5, r0
 8014858:	0710      	lsls	r0, r2, #28
 801485a:	460c      	mov	r4, r1
 801485c:	d458      	bmi.n	8014910 <__sflush_r+0xc0>
 801485e:	684b      	ldr	r3, [r1, #4]
 8014860:	2b00      	cmp	r3, #0
 8014862:	dc05      	bgt.n	8014870 <__sflush_r+0x20>
 8014864:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014866:	2b00      	cmp	r3, #0
 8014868:	dc02      	bgt.n	8014870 <__sflush_r+0x20>
 801486a:	2000      	movs	r0, #0
 801486c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014870:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014872:	2e00      	cmp	r6, #0
 8014874:	d0f9      	beq.n	801486a <__sflush_r+0x1a>
 8014876:	2300      	movs	r3, #0
 8014878:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801487c:	682f      	ldr	r7, [r5, #0]
 801487e:	602b      	str	r3, [r5, #0]
 8014880:	d032      	beq.n	80148e8 <__sflush_r+0x98>
 8014882:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014884:	89a3      	ldrh	r3, [r4, #12]
 8014886:	075a      	lsls	r2, r3, #29
 8014888:	d505      	bpl.n	8014896 <__sflush_r+0x46>
 801488a:	6863      	ldr	r3, [r4, #4]
 801488c:	1ac0      	subs	r0, r0, r3
 801488e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014890:	b10b      	cbz	r3, 8014896 <__sflush_r+0x46>
 8014892:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014894:	1ac0      	subs	r0, r0, r3
 8014896:	2300      	movs	r3, #0
 8014898:	4602      	mov	r2, r0
 801489a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801489c:	6a21      	ldr	r1, [r4, #32]
 801489e:	4628      	mov	r0, r5
 80148a0:	47b0      	blx	r6
 80148a2:	1c43      	adds	r3, r0, #1
 80148a4:	89a3      	ldrh	r3, [r4, #12]
 80148a6:	d106      	bne.n	80148b6 <__sflush_r+0x66>
 80148a8:	6829      	ldr	r1, [r5, #0]
 80148aa:	291d      	cmp	r1, #29
 80148ac:	d82c      	bhi.n	8014908 <__sflush_r+0xb8>
 80148ae:	4a2a      	ldr	r2, [pc, #168]	; (8014958 <__sflush_r+0x108>)
 80148b0:	40ca      	lsrs	r2, r1
 80148b2:	07d6      	lsls	r6, r2, #31
 80148b4:	d528      	bpl.n	8014908 <__sflush_r+0xb8>
 80148b6:	2200      	movs	r2, #0
 80148b8:	6062      	str	r2, [r4, #4]
 80148ba:	04d9      	lsls	r1, r3, #19
 80148bc:	6922      	ldr	r2, [r4, #16]
 80148be:	6022      	str	r2, [r4, #0]
 80148c0:	d504      	bpl.n	80148cc <__sflush_r+0x7c>
 80148c2:	1c42      	adds	r2, r0, #1
 80148c4:	d101      	bne.n	80148ca <__sflush_r+0x7a>
 80148c6:	682b      	ldr	r3, [r5, #0]
 80148c8:	b903      	cbnz	r3, 80148cc <__sflush_r+0x7c>
 80148ca:	6560      	str	r0, [r4, #84]	; 0x54
 80148cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80148ce:	602f      	str	r7, [r5, #0]
 80148d0:	2900      	cmp	r1, #0
 80148d2:	d0ca      	beq.n	801486a <__sflush_r+0x1a>
 80148d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80148d8:	4299      	cmp	r1, r3
 80148da:	d002      	beq.n	80148e2 <__sflush_r+0x92>
 80148dc:	4628      	mov	r0, r5
 80148de:	f001 fa47 	bl	8015d70 <_free_r>
 80148e2:	2000      	movs	r0, #0
 80148e4:	6360      	str	r0, [r4, #52]	; 0x34
 80148e6:	e7c1      	b.n	801486c <__sflush_r+0x1c>
 80148e8:	6a21      	ldr	r1, [r4, #32]
 80148ea:	2301      	movs	r3, #1
 80148ec:	4628      	mov	r0, r5
 80148ee:	47b0      	blx	r6
 80148f0:	1c41      	adds	r1, r0, #1
 80148f2:	d1c7      	bne.n	8014884 <__sflush_r+0x34>
 80148f4:	682b      	ldr	r3, [r5, #0]
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d0c4      	beq.n	8014884 <__sflush_r+0x34>
 80148fa:	2b1d      	cmp	r3, #29
 80148fc:	d001      	beq.n	8014902 <__sflush_r+0xb2>
 80148fe:	2b16      	cmp	r3, #22
 8014900:	d101      	bne.n	8014906 <__sflush_r+0xb6>
 8014902:	602f      	str	r7, [r5, #0]
 8014904:	e7b1      	b.n	801486a <__sflush_r+0x1a>
 8014906:	89a3      	ldrh	r3, [r4, #12]
 8014908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801490c:	81a3      	strh	r3, [r4, #12]
 801490e:	e7ad      	b.n	801486c <__sflush_r+0x1c>
 8014910:	690f      	ldr	r7, [r1, #16]
 8014912:	2f00      	cmp	r7, #0
 8014914:	d0a9      	beq.n	801486a <__sflush_r+0x1a>
 8014916:	0793      	lsls	r3, r2, #30
 8014918:	680e      	ldr	r6, [r1, #0]
 801491a:	bf08      	it	eq
 801491c:	694b      	ldreq	r3, [r1, #20]
 801491e:	600f      	str	r7, [r1, #0]
 8014920:	bf18      	it	ne
 8014922:	2300      	movne	r3, #0
 8014924:	eba6 0807 	sub.w	r8, r6, r7
 8014928:	608b      	str	r3, [r1, #8]
 801492a:	f1b8 0f00 	cmp.w	r8, #0
 801492e:	dd9c      	ble.n	801486a <__sflush_r+0x1a>
 8014930:	6a21      	ldr	r1, [r4, #32]
 8014932:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014934:	4643      	mov	r3, r8
 8014936:	463a      	mov	r2, r7
 8014938:	4628      	mov	r0, r5
 801493a:	47b0      	blx	r6
 801493c:	2800      	cmp	r0, #0
 801493e:	dc06      	bgt.n	801494e <__sflush_r+0xfe>
 8014940:	89a3      	ldrh	r3, [r4, #12]
 8014942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014946:	81a3      	strh	r3, [r4, #12]
 8014948:	f04f 30ff 	mov.w	r0, #4294967295
 801494c:	e78e      	b.n	801486c <__sflush_r+0x1c>
 801494e:	4407      	add	r7, r0
 8014950:	eba8 0800 	sub.w	r8, r8, r0
 8014954:	e7e9      	b.n	801492a <__sflush_r+0xda>
 8014956:	bf00      	nop
 8014958:	20400001 	.word	0x20400001

0801495c <_fflush_r>:
 801495c:	b538      	push	{r3, r4, r5, lr}
 801495e:	690b      	ldr	r3, [r1, #16]
 8014960:	4605      	mov	r5, r0
 8014962:	460c      	mov	r4, r1
 8014964:	b913      	cbnz	r3, 801496c <_fflush_r+0x10>
 8014966:	2500      	movs	r5, #0
 8014968:	4628      	mov	r0, r5
 801496a:	bd38      	pop	{r3, r4, r5, pc}
 801496c:	b118      	cbz	r0, 8014976 <_fflush_r+0x1a>
 801496e:	6983      	ldr	r3, [r0, #24]
 8014970:	b90b      	cbnz	r3, 8014976 <_fflush_r+0x1a>
 8014972:	f000 f887 	bl	8014a84 <__sinit>
 8014976:	4b14      	ldr	r3, [pc, #80]	; (80149c8 <_fflush_r+0x6c>)
 8014978:	429c      	cmp	r4, r3
 801497a:	d11b      	bne.n	80149b4 <_fflush_r+0x58>
 801497c:	686c      	ldr	r4, [r5, #4]
 801497e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014982:	2b00      	cmp	r3, #0
 8014984:	d0ef      	beq.n	8014966 <_fflush_r+0xa>
 8014986:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014988:	07d0      	lsls	r0, r2, #31
 801498a:	d404      	bmi.n	8014996 <_fflush_r+0x3a>
 801498c:	0599      	lsls	r1, r3, #22
 801498e:	d402      	bmi.n	8014996 <_fflush_r+0x3a>
 8014990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014992:	f000 fc88 	bl	80152a6 <__retarget_lock_acquire_recursive>
 8014996:	4628      	mov	r0, r5
 8014998:	4621      	mov	r1, r4
 801499a:	f7ff ff59 	bl	8014850 <__sflush_r>
 801499e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80149a0:	07da      	lsls	r2, r3, #31
 80149a2:	4605      	mov	r5, r0
 80149a4:	d4e0      	bmi.n	8014968 <_fflush_r+0xc>
 80149a6:	89a3      	ldrh	r3, [r4, #12]
 80149a8:	059b      	lsls	r3, r3, #22
 80149aa:	d4dd      	bmi.n	8014968 <_fflush_r+0xc>
 80149ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80149ae:	f000 fc7b 	bl	80152a8 <__retarget_lock_release_recursive>
 80149b2:	e7d9      	b.n	8014968 <_fflush_r+0xc>
 80149b4:	4b05      	ldr	r3, [pc, #20]	; (80149cc <_fflush_r+0x70>)
 80149b6:	429c      	cmp	r4, r3
 80149b8:	d101      	bne.n	80149be <_fflush_r+0x62>
 80149ba:	68ac      	ldr	r4, [r5, #8]
 80149bc:	e7df      	b.n	801497e <_fflush_r+0x22>
 80149be:	4b04      	ldr	r3, [pc, #16]	; (80149d0 <_fflush_r+0x74>)
 80149c0:	429c      	cmp	r4, r3
 80149c2:	bf08      	it	eq
 80149c4:	68ec      	ldreq	r4, [r5, #12]
 80149c6:	e7da      	b.n	801497e <_fflush_r+0x22>
 80149c8:	080183d4 	.word	0x080183d4
 80149cc:	080183f4 	.word	0x080183f4
 80149d0:	080183b4 	.word	0x080183b4

080149d4 <std>:
 80149d4:	2300      	movs	r3, #0
 80149d6:	b510      	push	{r4, lr}
 80149d8:	4604      	mov	r4, r0
 80149da:	e9c0 3300 	strd	r3, r3, [r0]
 80149de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80149e2:	6083      	str	r3, [r0, #8]
 80149e4:	8181      	strh	r1, [r0, #12]
 80149e6:	6643      	str	r3, [r0, #100]	; 0x64
 80149e8:	81c2      	strh	r2, [r0, #14]
 80149ea:	6183      	str	r3, [r0, #24]
 80149ec:	4619      	mov	r1, r3
 80149ee:	2208      	movs	r2, #8
 80149f0:	305c      	adds	r0, #92	; 0x5c
 80149f2:	f7fd f92d 	bl	8011c50 <memset>
 80149f6:	4b05      	ldr	r3, [pc, #20]	; (8014a0c <std+0x38>)
 80149f8:	6263      	str	r3, [r4, #36]	; 0x24
 80149fa:	4b05      	ldr	r3, [pc, #20]	; (8014a10 <std+0x3c>)
 80149fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80149fe:	4b05      	ldr	r3, [pc, #20]	; (8014a14 <std+0x40>)
 8014a00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014a02:	4b05      	ldr	r3, [pc, #20]	; (8014a18 <std+0x44>)
 8014a04:	6224      	str	r4, [r4, #32]
 8014a06:	6323      	str	r3, [r4, #48]	; 0x30
 8014a08:	bd10      	pop	{r4, pc}
 8014a0a:	bf00      	nop
 8014a0c:	08016281 	.word	0x08016281
 8014a10:	080162a3 	.word	0x080162a3
 8014a14:	080162db 	.word	0x080162db
 8014a18:	080162ff 	.word	0x080162ff

08014a1c <_cleanup_r>:
 8014a1c:	4901      	ldr	r1, [pc, #4]	; (8014a24 <_cleanup_r+0x8>)
 8014a1e:	f000 b8af 	b.w	8014b80 <_fwalk_reent>
 8014a22:	bf00      	nop
 8014a24:	0801495d 	.word	0x0801495d

08014a28 <__sfmoreglue>:
 8014a28:	b570      	push	{r4, r5, r6, lr}
 8014a2a:	1e4a      	subs	r2, r1, #1
 8014a2c:	2568      	movs	r5, #104	; 0x68
 8014a2e:	4355      	muls	r5, r2
 8014a30:	460e      	mov	r6, r1
 8014a32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014a36:	f001 f9eb 	bl	8015e10 <_malloc_r>
 8014a3a:	4604      	mov	r4, r0
 8014a3c:	b140      	cbz	r0, 8014a50 <__sfmoreglue+0x28>
 8014a3e:	2100      	movs	r1, #0
 8014a40:	e9c0 1600 	strd	r1, r6, [r0]
 8014a44:	300c      	adds	r0, #12
 8014a46:	60a0      	str	r0, [r4, #8]
 8014a48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014a4c:	f7fd f900 	bl	8011c50 <memset>
 8014a50:	4620      	mov	r0, r4
 8014a52:	bd70      	pop	{r4, r5, r6, pc}

08014a54 <__sfp_lock_acquire>:
 8014a54:	4801      	ldr	r0, [pc, #4]	; (8014a5c <__sfp_lock_acquire+0x8>)
 8014a56:	f000 bc26 	b.w	80152a6 <__retarget_lock_acquire_recursive>
 8014a5a:	bf00      	nop
 8014a5c:	20004bf0 	.word	0x20004bf0

08014a60 <__sfp_lock_release>:
 8014a60:	4801      	ldr	r0, [pc, #4]	; (8014a68 <__sfp_lock_release+0x8>)
 8014a62:	f000 bc21 	b.w	80152a8 <__retarget_lock_release_recursive>
 8014a66:	bf00      	nop
 8014a68:	20004bf0 	.word	0x20004bf0

08014a6c <__sinit_lock_acquire>:
 8014a6c:	4801      	ldr	r0, [pc, #4]	; (8014a74 <__sinit_lock_acquire+0x8>)
 8014a6e:	f000 bc1a 	b.w	80152a6 <__retarget_lock_acquire_recursive>
 8014a72:	bf00      	nop
 8014a74:	20004beb 	.word	0x20004beb

08014a78 <__sinit_lock_release>:
 8014a78:	4801      	ldr	r0, [pc, #4]	; (8014a80 <__sinit_lock_release+0x8>)
 8014a7a:	f000 bc15 	b.w	80152a8 <__retarget_lock_release_recursive>
 8014a7e:	bf00      	nop
 8014a80:	20004beb 	.word	0x20004beb

08014a84 <__sinit>:
 8014a84:	b510      	push	{r4, lr}
 8014a86:	4604      	mov	r4, r0
 8014a88:	f7ff fff0 	bl	8014a6c <__sinit_lock_acquire>
 8014a8c:	69a3      	ldr	r3, [r4, #24]
 8014a8e:	b11b      	cbz	r3, 8014a98 <__sinit+0x14>
 8014a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a94:	f7ff bff0 	b.w	8014a78 <__sinit_lock_release>
 8014a98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014a9c:	6523      	str	r3, [r4, #80]	; 0x50
 8014a9e:	4b13      	ldr	r3, [pc, #76]	; (8014aec <__sinit+0x68>)
 8014aa0:	4a13      	ldr	r2, [pc, #76]	; (8014af0 <__sinit+0x6c>)
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	62a2      	str	r2, [r4, #40]	; 0x28
 8014aa6:	42a3      	cmp	r3, r4
 8014aa8:	bf04      	itt	eq
 8014aaa:	2301      	moveq	r3, #1
 8014aac:	61a3      	streq	r3, [r4, #24]
 8014aae:	4620      	mov	r0, r4
 8014ab0:	f000 f820 	bl	8014af4 <__sfp>
 8014ab4:	6060      	str	r0, [r4, #4]
 8014ab6:	4620      	mov	r0, r4
 8014ab8:	f000 f81c 	bl	8014af4 <__sfp>
 8014abc:	60a0      	str	r0, [r4, #8]
 8014abe:	4620      	mov	r0, r4
 8014ac0:	f000 f818 	bl	8014af4 <__sfp>
 8014ac4:	2200      	movs	r2, #0
 8014ac6:	60e0      	str	r0, [r4, #12]
 8014ac8:	2104      	movs	r1, #4
 8014aca:	6860      	ldr	r0, [r4, #4]
 8014acc:	f7ff ff82 	bl	80149d4 <std>
 8014ad0:	68a0      	ldr	r0, [r4, #8]
 8014ad2:	2201      	movs	r2, #1
 8014ad4:	2109      	movs	r1, #9
 8014ad6:	f7ff ff7d 	bl	80149d4 <std>
 8014ada:	68e0      	ldr	r0, [r4, #12]
 8014adc:	2202      	movs	r2, #2
 8014ade:	2112      	movs	r1, #18
 8014ae0:	f7ff ff78 	bl	80149d4 <std>
 8014ae4:	2301      	movs	r3, #1
 8014ae6:	61a3      	str	r3, [r4, #24]
 8014ae8:	e7d2      	b.n	8014a90 <__sinit+0xc>
 8014aea:	bf00      	nop
 8014aec:	0801827c 	.word	0x0801827c
 8014af0:	08014a1d 	.word	0x08014a1d

08014af4 <__sfp>:
 8014af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014af6:	4607      	mov	r7, r0
 8014af8:	f7ff ffac 	bl	8014a54 <__sfp_lock_acquire>
 8014afc:	4b1e      	ldr	r3, [pc, #120]	; (8014b78 <__sfp+0x84>)
 8014afe:	681e      	ldr	r6, [r3, #0]
 8014b00:	69b3      	ldr	r3, [r6, #24]
 8014b02:	b913      	cbnz	r3, 8014b0a <__sfp+0x16>
 8014b04:	4630      	mov	r0, r6
 8014b06:	f7ff ffbd 	bl	8014a84 <__sinit>
 8014b0a:	3648      	adds	r6, #72	; 0x48
 8014b0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014b10:	3b01      	subs	r3, #1
 8014b12:	d503      	bpl.n	8014b1c <__sfp+0x28>
 8014b14:	6833      	ldr	r3, [r6, #0]
 8014b16:	b30b      	cbz	r3, 8014b5c <__sfp+0x68>
 8014b18:	6836      	ldr	r6, [r6, #0]
 8014b1a:	e7f7      	b.n	8014b0c <__sfp+0x18>
 8014b1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014b20:	b9d5      	cbnz	r5, 8014b58 <__sfp+0x64>
 8014b22:	4b16      	ldr	r3, [pc, #88]	; (8014b7c <__sfp+0x88>)
 8014b24:	60e3      	str	r3, [r4, #12]
 8014b26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014b2a:	6665      	str	r5, [r4, #100]	; 0x64
 8014b2c:	f000 fbba 	bl	80152a4 <__retarget_lock_init_recursive>
 8014b30:	f7ff ff96 	bl	8014a60 <__sfp_lock_release>
 8014b34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014b38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014b3c:	6025      	str	r5, [r4, #0]
 8014b3e:	61a5      	str	r5, [r4, #24]
 8014b40:	2208      	movs	r2, #8
 8014b42:	4629      	mov	r1, r5
 8014b44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014b48:	f7fd f882 	bl	8011c50 <memset>
 8014b4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014b50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014b54:	4620      	mov	r0, r4
 8014b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b58:	3468      	adds	r4, #104	; 0x68
 8014b5a:	e7d9      	b.n	8014b10 <__sfp+0x1c>
 8014b5c:	2104      	movs	r1, #4
 8014b5e:	4638      	mov	r0, r7
 8014b60:	f7ff ff62 	bl	8014a28 <__sfmoreglue>
 8014b64:	4604      	mov	r4, r0
 8014b66:	6030      	str	r0, [r6, #0]
 8014b68:	2800      	cmp	r0, #0
 8014b6a:	d1d5      	bne.n	8014b18 <__sfp+0x24>
 8014b6c:	f7ff ff78 	bl	8014a60 <__sfp_lock_release>
 8014b70:	230c      	movs	r3, #12
 8014b72:	603b      	str	r3, [r7, #0]
 8014b74:	e7ee      	b.n	8014b54 <__sfp+0x60>
 8014b76:	bf00      	nop
 8014b78:	0801827c 	.word	0x0801827c
 8014b7c:	ffff0001 	.word	0xffff0001

08014b80 <_fwalk_reent>:
 8014b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b84:	4606      	mov	r6, r0
 8014b86:	4688      	mov	r8, r1
 8014b88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014b8c:	2700      	movs	r7, #0
 8014b8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014b92:	f1b9 0901 	subs.w	r9, r9, #1
 8014b96:	d505      	bpl.n	8014ba4 <_fwalk_reent+0x24>
 8014b98:	6824      	ldr	r4, [r4, #0]
 8014b9a:	2c00      	cmp	r4, #0
 8014b9c:	d1f7      	bne.n	8014b8e <_fwalk_reent+0xe>
 8014b9e:	4638      	mov	r0, r7
 8014ba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014ba4:	89ab      	ldrh	r3, [r5, #12]
 8014ba6:	2b01      	cmp	r3, #1
 8014ba8:	d907      	bls.n	8014bba <_fwalk_reent+0x3a>
 8014baa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014bae:	3301      	adds	r3, #1
 8014bb0:	d003      	beq.n	8014bba <_fwalk_reent+0x3a>
 8014bb2:	4629      	mov	r1, r5
 8014bb4:	4630      	mov	r0, r6
 8014bb6:	47c0      	blx	r8
 8014bb8:	4307      	orrs	r7, r0
 8014bba:	3568      	adds	r5, #104	; 0x68
 8014bbc:	e7e9      	b.n	8014b92 <_fwalk_reent+0x12>

08014bbe <rshift>:
 8014bbe:	6903      	ldr	r3, [r0, #16]
 8014bc0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014bc8:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014bcc:	f100 0414 	add.w	r4, r0, #20
 8014bd0:	dd45      	ble.n	8014c5e <rshift+0xa0>
 8014bd2:	f011 011f 	ands.w	r1, r1, #31
 8014bd6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014bda:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014bde:	d10c      	bne.n	8014bfa <rshift+0x3c>
 8014be0:	f100 0710 	add.w	r7, r0, #16
 8014be4:	4629      	mov	r1, r5
 8014be6:	42b1      	cmp	r1, r6
 8014be8:	d334      	bcc.n	8014c54 <rshift+0x96>
 8014bea:	1a9b      	subs	r3, r3, r2
 8014bec:	009b      	lsls	r3, r3, #2
 8014bee:	1eea      	subs	r2, r5, #3
 8014bf0:	4296      	cmp	r6, r2
 8014bf2:	bf38      	it	cc
 8014bf4:	2300      	movcc	r3, #0
 8014bf6:	4423      	add	r3, r4
 8014bf8:	e015      	b.n	8014c26 <rshift+0x68>
 8014bfa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014bfe:	f1c1 0820 	rsb	r8, r1, #32
 8014c02:	40cf      	lsrs	r7, r1
 8014c04:	f105 0e04 	add.w	lr, r5, #4
 8014c08:	46a1      	mov	r9, r4
 8014c0a:	4576      	cmp	r6, lr
 8014c0c:	46f4      	mov	ip, lr
 8014c0e:	d815      	bhi.n	8014c3c <rshift+0x7e>
 8014c10:	1a9b      	subs	r3, r3, r2
 8014c12:	009a      	lsls	r2, r3, #2
 8014c14:	3a04      	subs	r2, #4
 8014c16:	3501      	adds	r5, #1
 8014c18:	42ae      	cmp	r6, r5
 8014c1a:	bf38      	it	cc
 8014c1c:	2200      	movcc	r2, #0
 8014c1e:	18a3      	adds	r3, r4, r2
 8014c20:	50a7      	str	r7, [r4, r2]
 8014c22:	b107      	cbz	r7, 8014c26 <rshift+0x68>
 8014c24:	3304      	adds	r3, #4
 8014c26:	1b1a      	subs	r2, r3, r4
 8014c28:	42a3      	cmp	r3, r4
 8014c2a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014c2e:	bf08      	it	eq
 8014c30:	2300      	moveq	r3, #0
 8014c32:	6102      	str	r2, [r0, #16]
 8014c34:	bf08      	it	eq
 8014c36:	6143      	streq	r3, [r0, #20]
 8014c38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c3c:	f8dc c000 	ldr.w	ip, [ip]
 8014c40:	fa0c fc08 	lsl.w	ip, ip, r8
 8014c44:	ea4c 0707 	orr.w	r7, ip, r7
 8014c48:	f849 7b04 	str.w	r7, [r9], #4
 8014c4c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014c50:	40cf      	lsrs	r7, r1
 8014c52:	e7da      	b.n	8014c0a <rshift+0x4c>
 8014c54:	f851 cb04 	ldr.w	ip, [r1], #4
 8014c58:	f847 cf04 	str.w	ip, [r7, #4]!
 8014c5c:	e7c3      	b.n	8014be6 <rshift+0x28>
 8014c5e:	4623      	mov	r3, r4
 8014c60:	e7e1      	b.n	8014c26 <rshift+0x68>

08014c62 <__hexdig_fun>:
 8014c62:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014c66:	2b09      	cmp	r3, #9
 8014c68:	d802      	bhi.n	8014c70 <__hexdig_fun+0xe>
 8014c6a:	3820      	subs	r0, #32
 8014c6c:	b2c0      	uxtb	r0, r0
 8014c6e:	4770      	bx	lr
 8014c70:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014c74:	2b05      	cmp	r3, #5
 8014c76:	d801      	bhi.n	8014c7c <__hexdig_fun+0x1a>
 8014c78:	3847      	subs	r0, #71	; 0x47
 8014c7a:	e7f7      	b.n	8014c6c <__hexdig_fun+0xa>
 8014c7c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014c80:	2b05      	cmp	r3, #5
 8014c82:	d801      	bhi.n	8014c88 <__hexdig_fun+0x26>
 8014c84:	3827      	subs	r0, #39	; 0x27
 8014c86:	e7f1      	b.n	8014c6c <__hexdig_fun+0xa>
 8014c88:	2000      	movs	r0, #0
 8014c8a:	4770      	bx	lr

08014c8c <__gethex>:
 8014c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c90:	ed2d 8b02 	vpush	{d8}
 8014c94:	b089      	sub	sp, #36	; 0x24
 8014c96:	ee08 0a10 	vmov	s16, r0
 8014c9a:	9304      	str	r3, [sp, #16]
 8014c9c:	4bbc      	ldr	r3, [pc, #752]	; (8014f90 <__gethex+0x304>)
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	9301      	str	r3, [sp, #4]
 8014ca2:	4618      	mov	r0, r3
 8014ca4:	468b      	mov	fp, r1
 8014ca6:	4690      	mov	r8, r2
 8014ca8:	f7eb faa4 	bl	80001f4 <strlen>
 8014cac:	9b01      	ldr	r3, [sp, #4]
 8014cae:	f8db 2000 	ldr.w	r2, [fp]
 8014cb2:	4403      	add	r3, r0
 8014cb4:	4682      	mov	sl, r0
 8014cb6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014cba:	9305      	str	r3, [sp, #20]
 8014cbc:	1c93      	adds	r3, r2, #2
 8014cbe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8014cc2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8014cc6:	32fe      	adds	r2, #254	; 0xfe
 8014cc8:	18d1      	adds	r1, r2, r3
 8014cca:	461f      	mov	r7, r3
 8014ccc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014cd0:	9100      	str	r1, [sp, #0]
 8014cd2:	2830      	cmp	r0, #48	; 0x30
 8014cd4:	d0f8      	beq.n	8014cc8 <__gethex+0x3c>
 8014cd6:	f7ff ffc4 	bl	8014c62 <__hexdig_fun>
 8014cda:	4604      	mov	r4, r0
 8014cdc:	2800      	cmp	r0, #0
 8014cde:	d13a      	bne.n	8014d56 <__gethex+0xca>
 8014ce0:	9901      	ldr	r1, [sp, #4]
 8014ce2:	4652      	mov	r2, sl
 8014ce4:	4638      	mov	r0, r7
 8014ce6:	f001 fb0e 	bl	8016306 <strncmp>
 8014cea:	4605      	mov	r5, r0
 8014cec:	2800      	cmp	r0, #0
 8014cee:	d168      	bne.n	8014dc2 <__gethex+0x136>
 8014cf0:	f817 000a 	ldrb.w	r0, [r7, sl]
 8014cf4:	eb07 060a 	add.w	r6, r7, sl
 8014cf8:	f7ff ffb3 	bl	8014c62 <__hexdig_fun>
 8014cfc:	2800      	cmp	r0, #0
 8014cfe:	d062      	beq.n	8014dc6 <__gethex+0x13a>
 8014d00:	4633      	mov	r3, r6
 8014d02:	7818      	ldrb	r0, [r3, #0]
 8014d04:	2830      	cmp	r0, #48	; 0x30
 8014d06:	461f      	mov	r7, r3
 8014d08:	f103 0301 	add.w	r3, r3, #1
 8014d0c:	d0f9      	beq.n	8014d02 <__gethex+0x76>
 8014d0e:	f7ff ffa8 	bl	8014c62 <__hexdig_fun>
 8014d12:	2301      	movs	r3, #1
 8014d14:	fab0 f480 	clz	r4, r0
 8014d18:	0964      	lsrs	r4, r4, #5
 8014d1a:	4635      	mov	r5, r6
 8014d1c:	9300      	str	r3, [sp, #0]
 8014d1e:	463a      	mov	r2, r7
 8014d20:	4616      	mov	r6, r2
 8014d22:	3201      	adds	r2, #1
 8014d24:	7830      	ldrb	r0, [r6, #0]
 8014d26:	f7ff ff9c 	bl	8014c62 <__hexdig_fun>
 8014d2a:	2800      	cmp	r0, #0
 8014d2c:	d1f8      	bne.n	8014d20 <__gethex+0x94>
 8014d2e:	9901      	ldr	r1, [sp, #4]
 8014d30:	4652      	mov	r2, sl
 8014d32:	4630      	mov	r0, r6
 8014d34:	f001 fae7 	bl	8016306 <strncmp>
 8014d38:	b980      	cbnz	r0, 8014d5c <__gethex+0xd0>
 8014d3a:	b94d      	cbnz	r5, 8014d50 <__gethex+0xc4>
 8014d3c:	eb06 050a 	add.w	r5, r6, sl
 8014d40:	462a      	mov	r2, r5
 8014d42:	4616      	mov	r6, r2
 8014d44:	3201      	adds	r2, #1
 8014d46:	7830      	ldrb	r0, [r6, #0]
 8014d48:	f7ff ff8b 	bl	8014c62 <__hexdig_fun>
 8014d4c:	2800      	cmp	r0, #0
 8014d4e:	d1f8      	bne.n	8014d42 <__gethex+0xb6>
 8014d50:	1bad      	subs	r5, r5, r6
 8014d52:	00ad      	lsls	r5, r5, #2
 8014d54:	e004      	b.n	8014d60 <__gethex+0xd4>
 8014d56:	2400      	movs	r4, #0
 8014d58:	4625      	mov	r5, r4
 8014d5a:	e7e0      	b.n	8014d1e <__gethex+0x92>
 8014d5c:	2d00      	cmp	r5, #0
 8014d5e:	d1f7      	bne.n	8014d50 <__gethex+0xc4>
 8014d60:	7833      	ldrb	r3, [r6, #0]
 8014d62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014d66:	2b50      	cmp	r3, #80	; 0x50
 8014d68:	d13b      	bne.n	8014de2 <__gethex+0x156>
 8014d6a:	7873      	ldrb	r3, [r6, #1]
 8014d6c:	2b2b      	cmp	r3, #43	; 0x2b
 8014d6e:	d02c      	beq.n	8014dca <__gethex+0x13e>
 8014d70:	2b2d      	cmp	r3, #45	; 0x2d
 8014d72:	d02e      	beq.n	8014dd2 <__gethex+0x146>
 8014d74:	1c71      	adds	r1, r6, #1
 8014d76:	f04f 0900 	mov.w	r9, #0
 8014d7a:	7808      	ldrb	r0, [r1, #0]
 8014d7c:	f7ff ff71 	bl	8014c62 <__hexdig_fun>
 8014d80:	1e43      	subs	r3, r0, #1
 8014d82:	b2db      	uxtb	r3, r3
 8014d84:	2b18      	cmp	r3, #24
 8014d86:	d82c      	bhi.n	8014de2 <__gethex+0x156>
 8014d88:	f1a0 0210 	sub.w	r2, r0, #16
 8014d8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014d90:	f7ff ff67 	bl	8014c62 <__hexdig_fun>
 8014d94:	1e43      	subs	r3, r0, #1
 8014d96:	b2db      	uxtb	r3, r3
 8014d98:	2b18      	cmp	r3, #24
 8014d9a:	d91d      	bls.n	8014dd8 <__gethex+0x14c>
 8014d9c:	f1b9 0f00 	cmp.w	r9, #0
 8014da0:	d000      	beq.n	8014da4 <__gethex+0x118>
 8014da2:	4252      	negs	r2, r2
 8014da4:	4415      	add	r5, r2
 8014da6:	f8cb 1000 	str.w	r1, [fp]
 8014daa:	b1e4      	cbz	r4, 8014de6 <__gethex+0x15a>
 8014dac:	9b00      	ldr	r3, [sp, #0]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	bf14      	ite	ne
 8014db2:	2700      	movne	r7, #0
 8014db4:	2706      	moveq	r7, #6
 8014db6:	4638      	mov	r0, r7
 8014db8:	b009      	add	sp, #36	; 0x24
 8014dba:	ecbd 8b02 	vpop	{d8}
 8014dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dc2:	463e      	mov	r6, r7
 8014dc4:	4625      	mov	r5, r4
 8014dc6:	2401      	movs	r4, #1
 8014dc8:	e7ca      	b.n	8014d60 <__gethex+0xd4>
 8014dca:	f04f 0900 	mov.w	r9, #0
 8014dce:	1cb1      	adds	r1, r6, #2
 8014dd0:	e7d3      	b.n	8014d7a <__gethex+0xee>
 8014dd2:	f04f 0901 	mov.w	r9, #1
 8014dd6:	e7fa      	b.n	8014dce <__gethex+0x142>
 8014dd8:	230a      	movs	r3, #10
 8014dda:	fb03 0202 	mla	r2, r3, r2, r0
 8014dde:	3a10      	subs	r2, #16
 8014de0:	e7d4      	b.n	8014d8c <__gethex+0x100>
 8014de2:	4631      	mov	r1, r6
 8014de4:	e7df      	b.n	8014da6 <__gethex+0x11a>
 8014de6:	1bf3      	subs	r3, r6, r7
 8014de8:	3b01      	subs	r3, #1
 8014dea:	4621      	mov	r1, r4
 8014dec:	2b07      	cmp	r3, #7
 8014dee:	dc0b      	bgt.n	8014e08 <__gethex+0x17c>
 8014df0:	ee18 0a10 	vmov	r0, s16
 8014df4:	f000 faf2 	bl	80153dc <_Balloc>
 8014df8:	4604      	mov	r4, r0
 8014dfa:	b940      	cbnz	r0, 8014e0e <__gethex+0x182>
 8014dfc:	4b65      	ldr	r3, [pc, #404]	; (8014f94 <__gethex+0x308>)
 8014dfe:	4602      	mov	r2, r0
 8014e00:	21de      	movs	r1, #222	; 0xde
 8014e02:	4865      	ldr	r0, [pc, #404]	; (8014f98 <__gethex+0x30c>)
 8014e04:	f7fc febc 	bl	8011b80 <__assert_func>
 8014e08:	3101      	adds	r1, #1
 8014e0a:	105b      	asrs	r3, r3, #1
 8014e0c:	e7ee      	b.n	8014dec <__gethex+0x160>
 8014e0e:	f100 0914 	add.w	r9, r0, #20
 8014e12:	f04f 0b00 	mov.w	fp, #0
 8014e16:	f1ca 0301 	rsb	r3, sl, #1
 8014e1a:	f8cd 9008 	str.w	r9, [sp, #8]
 8014e1e:	f8cd b000 	str.w	fp, [sp]
 8014e22:	9306      	str	r3, [sp, #24]
 8014e24:	42b7      	cmp	r7, r6
 8014e26:	d340      	bcc.n	8014eaa <__gethex+0x21e>
 8014e28:	9802      	ldr	r0, [sp, #8]
 8014e2a:	9b00      	ldr	r3, [sp, #0]
 8014e2c:	f840 3b04 	str.w	r3, [r0], #4
 8014e30:	eba0 0009 	sub.w	r0, r0, r9
 8014e34:	1080      	asrs	r0, r0, #2
 8014e36:	0146      	lsls	r6, r0, #5
 8014e38:	6120      	str	r0, [r4, #16]
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	f000 fbc4 	bl	80155c8 <__hi0bits>
 8014e40:	1a30      	subs	r0, r6, r0
 8014e42:	f8d8 6000 	ldr.w	r6, [r8]
 8014e46:	42b0      	cmp	r0, r6
 8014e48:	dd63      	ble.n	8014f12 <__gethex+0x286>
 8014e4a:	1b87      	subs	r7, r0, r6
 8014e4c:	4639      	mov	r1, r7
 8014e4e:	4620      	mov	r0, r4
 8014e50:	f000 ff5e 	bl	8015d10 <__any_on>
 8014e54:	4682      	mov	sl, r0
 8014e56:	b1a8      	cbz	r0, 8014e84 <__gethex+0x1f8>
 8014e58:	1e7b      	subs	r3, r7, #1
 8014e5a:	1159      	asrs	r1, r3, #5
 8014e5c:	f003 021f 	and.w	r2, r3, #31
 8014e60:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8014e64:	f04f 0a01 	mov.w	sl, #1
 8014e68:	fa0a f202 	lsl.w	r2, sl, r2
 8014e6c:	420a      	tst	r2, r1
 8014e6e:	d009      	beq.n	8014e84 <__gethex+0x1f8>
 8014e70:	4553      	cmp	r3, sl
 8014e72:	dd05      	ble.n	8014e80 <__gethex+0x1f4>
 8014e74:	1eb9      	subs	r1, r7, #2
 8014e76:	4620      	mov	r0, r4
 8014e78:	f000 ff4a 	bl	8015d10 <__any_on>
 8014e7c:	2800      	cmp	r0, #0
 8014e7e:	d145      	bne.n	8014f0c <__gethex+0x280>
 8014e80:	f04f 0a02 	mov.w	sl, #2
 8014e84:	4639      	mov	r1, r7
 8014e86:	4620      	mov	r0, r4
 8014e88:	f7ff fe99 	bl	8014bbe <rshift>
 8014e8c:	443d      	add	r5, r7
 8014e8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014e92:	42ab      	cmp	r3, r5
 8014e94:	da4c      	bge.n	8014f30 <__gethex+0x2a4>
 8014e96:	ee18 0a10 	vmov	r0, s16
 8014e9a:	4621      	mov	r1, r4
 8014e9c:	f000 fade 	bl	801545c <_Bfree>
 8014ea0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014ea2:	2300      	movs	r3, #0
 8014ea4:	6013      	str	r3, [r2, #0]
 8014ea6:	27a3      	movs	r7, #163	; 0xa3
 8014ea8:	e785      	b.n	8014db6 <__gethex+0x12a>
 8014eaa:	1e73      	subs	r3, r6, #1
 8014eac:	9a05      	ldr	r2, [sp, #20]
 8014eae:	9303      	str	r3, [sp, #12]
 8014eb0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014eb4:	4293      	cmp	r3, r2
 8014eb6:	d019      	beq.n	8014eec <__gethex+0x260>
 8014eb8:	f1bb 0f20 	cmp.w	fp, #32
 8014ebc:	d107      	bne.n	8014ece <__gethex+0x242>
 8014ebe:	9b02      	ldr	r3, [sp, #8]
 8014ec0:	9a00      	ldr	r2, [sp, #0]
 8014ec2:	f843 2b04 	str.w	r2, [r3], #4
 8014ec6:	9302      	str	r3, [sp, #8]
 8014ec8:	2300      	movs	r3, #0
 8014eca:	9300      	str	r3, [sp, #0]
 8014ecc:	469b      	mov	fp, r3
 8014ece:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8014ed2:	f7ff fec6 	bl	8014c62 <__hexdig_fun>
 8014ed6:	9b00      	ldr	r3, [sp, #0]
 8014ed8:	f000 000f 	and.w	r0, r0, #15
 8014edc:	fa00 f00b 	lsl.w	r0, r0, fp
 8014ee0:	4303      	orrs	r3, r0
 8014ee2:	9300      	str	r3, [sp, #0]
 8014ee4:	f10b 0b04 	add.w	fp, fp, #4
 8014ee8:	9b03      	ldr	r3, [sp, #12]
 8014eea:	e00d      	b.n	8014f08 <__gethex+0x27c>
 8014eec:	9b03      	ldr	r3, [sp, #12]
 8014eee:	9a06      	ldr	r2, [sp, #24]
 8014ef0:	4413      	add	r3, r2
 8014ef2:	42bb      	cmp	r3, r7
 8014ef4:	d3e0      	bcc.n	8014eb8 <__gethex+0x22c>
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	9901      	ldr	r1, [sp, #4]
 8014efa:	9307      	str	r3, [sp, #28]
 8014efc:	4652      	mov	r2, sl
 8014efe:	f001 fa02 	bl	8016306 <strncmp>
 8014f02:	9b07      	ldr	r3, [sp, #28]
 8014f04:	2800      	cmp	r0, #0
 8014f06:	d1d7      	bne.n	8014eb8 <__gethex+0x22c>
 8014f08:	461e      	mov	r6, r3
 8014f0a:	e78b      	b.n	8014e24 <__gethex+0x198>
 8014f0c:	f04f 0a03 	mov.w	sl, #3
 8014f10:	e7b8      	b.n	8014e84 <__gethex+0x1f8>
 8014f12:	da0a      	bge.n	8014f2a <__gethex+0x29e>
 8014f14:	1a37      	subs	r7, r6, r0
 8014f16:	4621      	mov	r1, r4
 8014f18:	ee18 0a10 	vmov	r0, s16
 8014f1c:	463a      	mov	r2, r7
 8014f1e:	f000 fcb9 	bl	8015894 <__lshift>
 8014f22:	1bed      	subs	r5, r5, r7
 8014f24:	4604      	mov	r4, r0
 8014f26:	f100 0914 	add.w	r9, r0, #20
 8014f2a:	f04f 0a00 	mov.w	sl, #0
 8014f2e:	e7ae      	b.n	8014e8e <__gethex+0x202>
 8014f30:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014f34:	42a8      	cmp	r0, r5
 8014f36:	dd72      	ble.n	801501e <__gethex+0x392>
 8014f38:	1b45      	subs	r5, r0, r5
 8014f3a:	42ae      	cmp	r6, r5
 8014f3c:	dc36      	bgt.n	8014fac <__gethex+0x320>
 8014f3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014f42:	2b02      	cmp	r3, #2
 8014f44:	d02a      	beq.n	8014f9c <__gethex+0x310>
 8014f46:	2b03      	cmp	r3, #3
 8014f48:	d02c      	beq.n	8014fa4 <__gethex+0x318>
 8014f4a:	2b01      	cmp	r3, #1
 8014f4c:	d115      	bne.n	8014f7a <__gethex+0x2ee>
 8014f4e:	42ae      	cmp	r6, r5
 8014f50:	d113      	bne.n	8014f7a <__gethex+0x2ee>
 8014f52:	2e01      	cmp	r6, #1
 8014f54:	d10b      	bne.n	8014f6e <__gethex+0x2e2>
 8014f56:	9a04      	ldr	r2, [sp, #16]
 8014f58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014f5c:	6013      	str	r3, [r2, #0]
 8014f5e:	2301      	movs	r3, #1
 8014f60:	6123      	str	r3, [r4, #16]
 8014f62:	f8c9 3000 	str.w	r3, [r9]
 8014f66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014f68:	2762      	movs	r7, #98	; 0x62
 8014f6a:	601c      	str	r4, [r3, #0]
 8014f6c:	e723      	b.n	8014db6 <__gethex+0x12a>
 8014f6e:	1e71      	subs	r1, r6, #1
 8014f70:	4620      	mov	r0, r4
 8014f72:	f000 fecd 	bl	8015d10 <__any_on>
 8014f76:	2800      	cmp	r0, #0
 8014f78:	d1ed      	bne.n	8014f56 <__gethex+0x2ca>
 8014f7a:	ee18 0a10 	vmov	r0, s16
 8014f7e:	4621      	mov	r1, r4
 8014f80:	f000 fa6c 	bl	801545c <_Bfree>
 8014f84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014f86:	2300      	movs	r3, #0
 8014f88:	6013      	str	r3, [r2, #0]
 8014f8a:	2750      	movs	r7, #80	; 0x50
 8014f8c:	e713      	b.n	8014db6 <__gethex+0x12a>
 8014f8e:	bf00      	nop
 8014f90:	08018480 	.word	0x08018480
 8014f94:	080183a3 	.word	0x080183a3
 8014f98:	08018414 	.word	0x08018414
 8014f9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d1eb      	bne.n	8014f7a <__gethex+0x2ee>
 8014fa2:	e7d8      	b.n	8014f56 <__gethex+0x2ca>
 8014fa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d1d5      	bne.n	8014f56 <__gethex+0x2ca>
 8014faa:	e7e6      	b.n	8014f7a <__gethex+0x2ee>
 8014fac:	1e6f      	subs	r7, r5, #1
 8014fae:	f1ba 0f00 	cmp.w	sl, #0
 8014fb2:	d131      	bne.n	8015018 <__gethex+0x38c>
 8014fb4:	b127      	cbz	r7, 8014fc0 <__gethex+0x334>
 8014fb6:	4639      	mov	r1, r7
 8014fb8:	4620      	mov	r0, r4
 8014fba:	f000 fea9 	bl	8015d10 <__any_on>
 8014fbe:	4682      	mov	sl, r0
 8014fc0:	117b      	asrs	r3, r7, #5
 8014fc2:	2101      	movs	r1, #1
 8014fc4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8014fc8:	f007 071f 	and.w	r7, r7, #31
 8014fcc:	fa01 f707 	lsl.w	r7, r1, r7
 8014fd0:	421f      	tst	r7, r3
 8014fd2:	4629      	mov	r1, r5
 8014fd4:	4620      	mov	r0, r4
 8014fd6:	bf18      	it	ne
 8014fd8:	f04a 0a02 	orrne.w	sl, sl, #2
 8014fdc:	1b76      	subs	r6, r6, r5
 8014fde:	f7ff fdee 	bl	8014bbe <rshift>
 8014fe2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014fe6:	2702      	movs	r7, #2
 8014fe8:	f1ba 0f00 	cmp.w	sl, #0
 8014fec:	d048      	beq.n	8015080 <__gethex+0x3f4>
 8014fee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014ff2:	2b02      	cmp	r3, #2
 8014ff4:	d015      	beq.n	8015022 <__gethex+0x396>
 8014ff6:	2b03      	cmp	r3, #3
 8014ff8:	d017      	beq.n	801502a <__gethex+0x39e>
 8014ffa:	2b01      	cmp	r3, #1
 8014ffc:	d109      	bne.n	8015012 <__gethex+0x386>
 8014ffe:	f01a 0f02 	tst.w	sl, #2
 8015002:	d006      	beq.n	8015012 <__gethex+0x386>
 8015004:	f8d9 0000 	ldr.w	r0, [r9]
 8015008:	ea4a 0a00 	orr.w	sl, sl, r0
 801500c:	f01a 0f01 	tst.w	sl, #1
 8015010:	d10e      	bne.n	8015030 <__gethex+0x3a4>
 8015012:	f047 0710 	orr.w	r7, r7, #16
 8015016:	e033      	b.n	8015080 <__gethex+0x3f4>
 8015018:	f04f 0a01 	mov.w	sl, #1
 801501c:	e7d0      	b.n	8014fc0 <__gethex+0x334>
 801501e:	2701      	movs	r7, #1
 8015020:	e7e2      	b.n	8014fe8 <__gethex+0x35c>
 8015022:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015024:	f1c3 0301 	rsb	r3, r3, #1
 8015028:	9315      	str	r3, [sp, #84]	; 0x54
 801502a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801502c:	2b00      	cmp	r3, #0
 801502e:	d0f0      	beq.n	8015012 <__gethex+0x386>
 8015030:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015034:	f104 0314 	add.w	r3, r4, #20
 8015038:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801503c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015040:	f04f 0c00 	mov.w	ip, #0
 8015044:	4618      	mov	r0, r3
 8015046:	f853 2b04 	ldr.w	r2, [r3], #4
 801504a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801504e:	d01c      	beq.n	801508a <__gethex+0x3fe>
 8015050:	3201      	adds	r2, #1
 8015052:	6002      	str	r2, [r0, #0]
 8015054:	2f02      	cmp	r7, #2
 8015056:	f104 0314 	add.w	r3, r4, #20
 801505a:	d13f      	bne.n	80150dc <__gethex+0x450>
 801505c:	f8d8 2000 	ldr.w	r2, [r8]
 8015060:	3a01      	subs	r2, #1
 8015062:	42b2      	cmp	r2, r6
 8015064:	d10a      	bne.n	801507c <__gethex+0x3f0>
 8015066:	1171      	asrs	r1, r6, #5
 8015068:	2201      	movs	r2, #1
 801506a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801506e:	f006 061f 	and.w	r6, r6, #31
 8015072:	fa02 f606 	lsl.w	r6, r2, r6
 8015076:	421e      	tst	r6, r3
 8015078:	bf18      	it	ne
 801507a:	4617      	movne	r7, r2
 801507c:	f047 0720 	orr.w	r7, r7, #32
 8015080:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015082:	601c      	str	r4, [r3, #0]
 8015084:	9b04      	ldr	r3, [sp, #16]
 8015086:	601d      	str	r5, [r3, #0]
 8015088:	e695      	b.n	8014db6 <__gethex+0x12a>
 801508a:	4299      	cmp	r1, r3
 801508c:	f843 cc04 	str.w	ip, [r3, #-4]
 8015090:	d8d8      	bhi.n	8015044 <__gethex+0x3b8>
 8015092:	68a3      	ldr	r3, [r4, #8]
 8015094:	459b      	cmp	fp, r3
 8015096:	db19      	blt.n	80150cc <__gethex+0x440>
 8015098:	6861      	ldr	r1, [r4, #4]
 801509a:	ee18 0a10 	vmov	r0, s16
 801509e:	3101      	adds	r1, #1
 80150a0:	f000 f99c 	bl	80153dc <_Balloc>
 80150a4:	4681      	mov	r9, r0
 80150a6:	b918      	cbnz	r0, 80150b0 <__gethex+0x424>
 80150a8:	4b1a      	ldr	r3, [pc, #104]	; (8015114 <__gethex+0x488>)
 80150aa:	4602      	mov	r2, r0
 80150ac:	2184      	movs	r1, #132	; 0x84
 80150ae:	e6a8      	b.n	8014e02 <__gethex+0x176>
 80150b0:	6922      	ldr	r2, [r4, #16]
 80150b2:	3202      	adds	r2, #2
 80150b4:	f104 010c 	add.w	r1, r4, #12
 80150b8:	0092      	lsls	r2, r2, #2
 80150ba:	300c      	adds	r0, #12
 80150bc:	f7fc fdba 	bl	8011c34 <memcpy>
 80150c0:	4621      	mov	r1, r4
 80150c2:	ee18 0a10 	vmov	r0, s16
 80150c6:	f000 f9c9 	bl	801545c <_Bfree>
 80150ca:	464c      	mov	r4, r9
 80150cc:	6923      	ldr	r3, [r4, #16]
 80150ce:	1c5a      	adds	r2, r3, #1
 80150d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80150d4:	6122      	str	r2, [r4, #16]
 80150d6:	2201      	movs	r2, #1
 80150d8:	615a      	str	r2, [r3, #20]
 80150da:	e7bb      	b.n	8015054 <__gethex+0x3c8>
 80150dc:	6922      	ldr	r2, [r4, #16]
 80150de:	455a      	cmp	r2, fp
 80150e0:	dd0b      	ble.n	80150fa <__gethex+0x46e>
 80150e2:	2101      	movs	r1, #1
 80150e4:	4620      	mov	r0, r4
 80150e6:	f7ff fd6a 	bl	8014bbe <rshift>
 80150ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80150ee:	3501      	adds	r5, #1
 80150f0:	42ab      	cmp	r3, r5
 80150f2:	f6ff aed0 	blt.w	8014e96 <__gethex+0x20a>
 80150f6:	2701      	movs	r7, #1
 80150f8:	e7c0      	b.n	801507c <__gethex+0x3f0>
 80150fa:	f016 061f 	ands.w	r6, r6, #31
 80150fe:	d0fa      	beq.n	80150f6 <__gethex+0x46a>
 8015100:	449a      	add	sl, r3
 8015102:	f1c6 0620 	rsb	r6, r6, #32
 8015106:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801510a:	f000 fa5d 	bl	80155c8 <__hi0bits>
 801510e:	42b0      	cmp	r0, r6
 8015110:	dbe7      	blt.n	80150e2 <__gethex+0x456>
 8015112:	e7f0      	b.n	80150f6 <__gethex+0x46a>
 8015114:	080183a3 	.word	0x080183a3

08015118 <L_shift>:
 8015118:	f1c2 0208 	rsb	r2, r2, #8
 801511c:	0092      	lsls	r2, r2, #2
 801511e:	b570      	push	{r4, r5, r6, lr}
 8015120:	f1c2 0620 	rsb	r6, r2, #32
 8015124:	6843      	ldr	r3, [r0, #4]
 8015126:	6804      	ldr	r4, [r0, #0]
 8015128:	fa03 f506 	lsl.w	r5, r3, r6
 801512c:	432c      	orrs	r4, r5
 801512e:	40d3      	lsrs	r3, r2
 8015130:	6004      	str	r4, [r0, #0]
 8015132:	f840 3f04 	str.w	r3, [r0, #4]!
 8015136:	4288      	cmp	r0, r1
 8015138:	d3f4      	bcc.n	8015124 <L_shift+0xc>
 801513a:	bd70      	pop	{r4, r5, r6, pc}

0801513c <__match>:
 801513c:	b530      	push	{r4, r5, lr}
 801513e:	6803      	ldr	r3, [r0, #0]
 8015140:	3301      	adds	r3, #1
 8015142:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015146:	b914      	cbnz	r4, 801514e <__match+0x12>
 8015148:	6003      	str	r3, [r0, #0]
 801514a:	2001      	movs	r0, #1
 801514c:	bd30      	pop	{r4, r5, pc}
 801514e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015152:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015156:	2d19      	cmp	r5, #25
 8015158:	bf98      	it	ls
 801515a:	3220      	addls	r2, #32
 801515c:	42a2      	cmp	r2, r4
 801515e:	d0f0      	beq.n	8015142 <__match+0x6>
 8015160:	2000      	movs	r0, #0
 8015162:	e7f3      	b.n	801514c <__match+0x10>

08015164 <__hexnan>:
 8015164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015168:	680b      	ldr	r3, [r1, #0]
 801516a:	6801      	ldr	r1, [r0, #0]
 801516c:	115e      	asrs	r6, r3, #5
 801516e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015172:	f013 031f 	ands.w	r3, r3, #31
 8015176:	b087      	sub	sp, #28
 8015178:	bf18      	it	ne
 801517a:	3604      	addne	r6, #4
 801517c:	2500      	movs	r5, #0
 801517e:	1f37      	subs	r7, r6, #4
 8015180:	4682      	mov	sl, r0
 8015182:	4690      	mov	r8, r2
 8015184:	9301      	str	r3, [sp, #4]
 8015186:	f846 5c04 	str.w	r5, [r6, #-4]
 801518a:	46b9      	mov	r9, r7
 801518c:	463c      	mov	r4, r7
 801518e:	9502      	str	r5, [sp, #8]
 8015190:	46ab      	mov	fp, r5
 8015192:	784a      	ldrb	r2, [r1, #1]
 8015194:	1c4b      	adds	r3, r1, #1
 8015196:	9303      	str	r3, [sp, #12]
 8015198:	b342      	cbz	r2, 80151ec <__hexnan+0x88>
 801519a:	4610      	mov	r0, r2
 801519c:	9105      	str	r1, [sp, #20]
 801519e:	9204      	str	r2, [sp, #16]
 80151a0:	f7ff fd5f 	bl	8014c62 <__hexdig_fun>
 80151a4:	2800      	cmp	r0, #0
 80151a6:	d14f      	bne.n	8015248 <__hexnan+0xe4>
 80151a8:	9a04      	ldr	r2, [sp, #16]
 80151aa:	9905      	ldr	r1, [sp, #20]
 80151ac:	2a20      	cmp	r2, #32
 80151ae:	d818      	bhi.n	80151e2 <__hexnan+0x7e>
 80151b0:	9b02      	ldr	r3, [sp, #8]
 80151b2:	459b      	cmp	fp, r3
 80151b4:	dd13      	ble.n	80151de <__hexnan+0x7a>
 80151b6:	454c      	cmp	r4, r9
 80151b8:	d206      	bcs.n	80151c8 <__hexnan+0x64>
 80151ba:	2d07      	cmp	r5, #7
 80151bc:	dc04      	bgt.n	80151c8 <__hexnan+0x64>
 80151be:	462a      	mov	r2, r5
 80151c0:	4649      	mov	r1, r9
 80151c2:	4620      	mov	r0, r4
 80151c4:	f7ff ffa8 	bl	8015118 <L_shift>
 80151c8:	4544      	cmp	r4, r8
 80151ca:	d950      	bls.n	801526e <__hexnan+0x10a>
 80151cc:	2300      	movs	r3, #0
 80151ce:	f1a4 0904 	sub.w	r9, r4, #4
 80151d2:	f844 3c04 	str.w	r3, [r4, #-4]
 80151d6:	f8cd b008 	str.w	fp, [sp, #8]
 80151da:	464c      	mov	r4, r9
 80151dc:	461d      	mov	r5, r3
 80151de:	9903      	ldr	r1, [sp, #12]
 80151e0:	e7d7      	b.n	8015192 <__hexnan+0x2e>
 80151e2:	2a29      	cmp	r2, #41	; 0x29
 80151e4:	d156      	bne.n	8015294 <__hexnan+0x130>
 80151e6:	3102      	adds	r1, #2
 80151e8:	f8ca 1000 	str.w	r1, [sl]
 80151ec:	f1bb 0f00 	cmp.w	fp, #0
 80151f0:	d050      	beq.n	8015294 <__hexnan+0x130>
 80151f2:	454c      	cmp	r4, r9
 80151f4:	d206      	bcs.n	8015204 <__hexnan+0xa0>
 80151f6:	2d07      	cmp	r5, #7
 80151f8:	dc04      	bgt.n	8015204 <__hexnan+0xa0>
 80151fa:	462a      	mov	r2, r5
 80151fc:	4649      	mov	r1, r9
 80151fe:	4620      	mov	r0, r4
 8015200:	f7ff ff8a 	bl	8015118 <L_shift>
 8015204:	4544      	cmp	r4, r8
 8015206:	d934      	bls.n	8015272 <__hexnan+0x10e>
 8015208:	f1a8 0204 	sub.w	r2, r8, #4
 801520c:	4623      	mov	r3, r4
 801520e:	f853 1b04 	ldr.w	r1, [r3], #4
 8015212:	f842 1f04 	str.w	r1, [r2, #4]!
 8015216:	429f      	cmp	r7, r3
 8015218:	d2f9      	bcs.n	801520e <__hexnan+0xaa>
 801521a:	1b3b      	subs	r3, r7, r4
 801521c:	f023 0303 	bic.w	r3, r3, #3
 8015220:	3304      	adds	r3, #4
 8015222:	3401      	adds	r4, #1
 8015224:	3e03      	subs	r6, #3
 8015226:	42b4      	cmp	r4, r6
 8015228:	bf88      	it	hi
 801522a:	2304      	movhi	r3, #4
 801522c:	4443      	add	r3, r8
 801522e:	2200      	movs	r2, #0
 8015230:	f843 2b04 	str.w	r2, [r3], #4
 8015234:	429f      	cmp	r7, r3
 8015236:	d2fb      	bcs.n	8015230 <__hexnan+0xcc>
 8015238:	683b      	ldr	r3, [r7, #0]
 801523a:	b91b      	cbnz	r3, 8015244 <__hexnan+0xe0>
 801523c:	4547      	cmp	r7, r8
 801523e:	d127      	bne.n	8015290 <__hexnan+0x12c>
 8015240:	2301      	movs	r3, #1
 8015242:	603b      	str	r3, [r7, #0]
 8015244:	2005      	movs	r0, #5
 8015246:	e026      	b.n	8015296 <__hexnan+0x132>
 8015248:	3501      	adds	r5, #1
 801524a:	2d08      	cmp	r5, #8
 801524c:	f10b 0b01 	add.w	fp, fp, #1
 8015250:	dd06      	ble.n	8015260 <__hexnan+0xfc>
 8015252:	4544      	cmp	r4, r8
 8015254:	d9c3      	bls.n	80151de <__hexnan+0x7a>
 8015256:	2300      	movs	r3, #0
 8015258:	f844 3c04 	str.w	r3, [r4, #-4]
 801525c:	2501      	movs	r5, #1
 801525e:	3c04      	subs	r4, #4
 8015260:	6822      	ldr	r2, [r4, #0]
 8015262:	f000 000f 	and.w	r0, r0, #15
 8015266:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801526a:	6022      	str	r2, [r4, #0]
 801526c:	e7b7      	b.n	80151de <__hexnan+0x7a>
 801526e:	2508      	movs	r5, #8
 8015270:	e7b5      	b.n	80151de <__hexnan+0x7a>
 8015272:	9b01      	ldr	r3, [sp, #4]
 8015274:	2b00      	cmp	r3, #0
 8015276:	d0df      	beq.n	8015238 <__hexnan+0xd4>
 8015278:	f04f 32ff 	mov.w	r2, #4294967295
 801527c:	f1c3 0320 	rsb	r3, r3, #32
 8015280:	fa22 f303 	lsr.w	r3, r2, r3
 8015284:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015288:	401a      	ands	r2, r3
 801528a:	f846 2c04 	str.w	r2, [r6, #-4]
 801528e:	e7d3      	b.n	8015238 <__hexnan+0xd4>
 8015290:	3f04      	subs	r7, #4
 8015292:	e7d1      	b.n	8015238 <__hexnan+0xd4>
 8015294:	2004      	movs	r0, #4
 8015296:	b007      	add	sp, #28
 8015298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801529c <_localeconv_r>:
 801529c:	4800      	ldr	r0, [pc, #0]	; (80152a0 <_localeconv_r+0x4>)
 801529e:	4770      	bx	lr
 80152a0:	200001b4 	.word	0x200001b4

080152a4 <__retarget_lock_init_recursive>:
 80152a4:	4770      	bx	lr

080152a6 <__retarget_lock_acquire_recursive>:
 80152a6:	4770      	bx	lr

080152a8 <__retarget_lock_release_recursive>:
 80152a8:	4770      	bx	lr

080152aa <__swhatbuf_r>:
 80152aa:	b570      	push	{r4, r5, r6, lr}
 80152ac:	460e      	mov	r6, r1
 80152ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80152b2:	2900      	cmp	r1, #0
 80152b4:	b096      	sub	sp, #88	; 0x58
 80152b6:	4614      	mov	r4, r2
 80152b8:	461d      	mov	r5, r3
 80152ba:	da07      	bge.n	80152cc <__swhatbuf_r+0x22>
 80152bc:	2300      	movs	r3, #0
 80152be:	602b      	str	r3, [r5, #0]
 80152c0:	89b3      	ldrh	r3, [r6, #12]
 80152c2:	061a      	lsls	r2, r3, #24
 80152c4:	d410      	bmi.n	80152e8 <__swhatbuf_r+0x3e>
 80152c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80152ca:	e00e      	b.n	80152ea <__swhatbuf_r+0x40>
 80152cc:	466a      	mov	r2, sp
 80152ce:	f001 f85b 	bl	8016388 <_fstat_r>
 80152d2:	2800      	cmp	r0, #0
 80152d4:	dbf2      	blt.n	80152bc <__swhatbuf_r+0x12>
 80152d6:	9a01      	ldr	r2, [sp, #4]
 80152d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80152dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80152e0:	425a      	negs	r2, r3
 80152e2:	415a      	adcs	r2, r3
 80152e4:	602a      	str	r2, [r5, #0]
 80152e6:	e7ee      	b.n	80152c6 <__swhatbuf_r+0x1c>
 80152e8:	2340      	movs	r3, #64	; 0x40
 80152ea:	2000      	movs	r0, #0
 80152ec:	6023      	str	r3, [r4, #0]
 80152ee:	b016      	add	sp, #88	; 0x58
 80152f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080152f4 <__smakebuf_r>:
 80152f4:	898b      	ldrh	r3, [r1, #12]
 80152f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80152f8:	079d      	lsls	r5, r3, #30
 80152fa:	4606      	mov	r6, r0
 80152fc:	460c      	mov	r4, r1
 80152fe:	d507      	bpl.n	8015310 <__smakebuf_r+0x1c>
 8015300:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015304:	6023      	str	r3, [r4, #0]
 8015306:	6123      	str	r3, [r4, #16]
 8015308:	2301      	movs	r3, #1
 801530a:	6163      	str	r3, [r4, #20]
 801530c:	b002      	add	sp, #8
 801530e:	bd70      	pop	{r4, r5, r6, pc}
 8015310:	ab01      	add	r3, sp, #4
 8015312:	466a      	mov	r2, sp
 8015314:	f7ff ffc9 	bl	80152aa <__swhatbuf_r>
 8015318:	9900      	ldr	r1, [sp, #0]
 801531a:	4605      	mov	r5, r0
 801531c:	4630      	mov	r0, r6
 801531e:	f000 fd77 	bl	8015e10 <_malloc_r>
 8015322:	b948      	cbnz	r0, 8015338 <__smakebuf_r+0x44>
 8015324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015328:	059a      	lsls	r2, r3, #22
 801532a:	d4ef      	bmi.n	801530c <__smakebuf_r+0x18>
 801532c:	f023 0303 	bic.w	r3, r3, #3
 8015330:	f043 0302 	orr.w	r3, r3, #2
 8015334:	81a3      	strh	r3, [r4, #12]
 8015336:	e7e3      	b.n	8015300 <__smakebuf_r+0xc>
 8015338:	4b0d      	ldr	r3, [pc, #52]	; (8015370 <__smakebuf_r+0x7c>)
 801533a:	62b3      	str	r3, [r6, #40]	; 0x28
 801533c:	89a3      	ldrh	r3, [r4, #12]
 801533e:	6020      	str	r0, [r4, #0]
 8015340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015344:	81a3      	strh	r3, [r4, #12]
 8015346:	9b00      	ldr	r3, [sp, #0]
 8015348:	6163      	str	r3, [r4, #20]
 801534a:	9b01      	ldr	r3, [sp, #4]
 801534c:	6120      	str	r0, [r4, #16]
 801534e:	b15b      	cbz	r3, 8015368 <__smakebuf_r+0x74>
 8015350:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015354:	4630      	mov	r0, r6
 8015356:	f001 f829 	bl	80163ac <_isatty_r>
 801535a:	b128      	cbz	r0, 8015368 <__smakebuf_r+0x74>
 801535c:	89a3      	ldrh	r3, [r4, #12]
 801535e:	f023 0303 	bic.w	r3, r3, #3
 8015362:	f043 0301 	orr.w	r3, r3, #1
 8015366:	81a3      	strh	r3, [r4, #12]
 8015368:	89a0      	ldrh	r0, [r4, #12]
 801536a:	4305      	orrs	r5, r0
 801536c:	81a5      	strh	r5, [r4, #12]
 801536e:	e7cd      	b.n	801530c <__smakebuf_r+0x18>
 8015370:	08014a1d 	.word	0x08014a1d

08015374 <malloc>:
 8015374:	4b02      	ldr	r3, [pc, #8]	; (8015380 <malloc+0xc>)
 8015376:	4601      	mov	r1, r0
 8015378:	6818      	ldr	r0, [r3, #0]
 801537a:	f000 bd49 	b.w	8015e10 <_malloc_r>
 801537e:	bf00      	nop
 8015380:	2000005c 	.word	0x2000005c

08015384 <__ascii_mbtowc>:
 8015384:	b082      	sub	sp, #8
 8015386:	b901      	cbnz	r1, 801538a <__ascii_mbtowc+0x6>
 8015388:	a901      	add	r1, sp, #4
 801538a:	b142      	cbz	r2, 801539e <__ascii_mbtowc+0x1a>
 801538c:	b14b      	cbz	r3, 80153a2 <__ascii_mbtowc+0x1e>
 801538e:	7813      	ldrb	r3, [r2, #0]
 8015390:	600b      	str	r3, [r1, #0]
 8015392:	7812      	ldrb	r2, [r2, #0]
 8015394:	1e10      	subs	r0, r2, #0
 8015396:	bf18      	it	ne
 8015398:	2001      	movne	r0, #1
 801539a:	b002      	add	sp, #8
 801539c:	4770      	bx	lr
 801539e:	4610      	mov	r0, r2
 80153a0:	e7fb      	b.n	801539a <__ascii_mbtowc+0x16>
 80153a2:	f06f 0001 	mvn.w	r0, #1
 80153a6:	e7f8      	b.n	801539a <__ascii_mbtowc+0x16>

080153a8 <memmove>:
 80153a8:	4288      	cmp	r0, r1
 80153aa:	b510      	push	{r4, lr}
 80153ac:	eb01 0402 	add.w	r4, r1, r2
 80153b0:	d902      	bls.n	80153b8 <memmove+0x10>
 80153b2:	4284      	cmp	r4, r0
 80153b4:	4623      	mov	r3, r4
 80153b6:	d807      	bhi.n	80153c8 <memmove+0x20>
 80153b8:	1e43      	subs	r3, r0, #1
 80153ba:	42a1      	cmp	r1, r4
 80153bc:	d008      	beq.n	80153d0 <memmove+0x28>
 80153be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80153c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80153c6:	e7f8      	b.n	80153ba <memmove+0x12>
 80153c8:	4402      	add	r2, r0
 80153ca:	4601      	mov	r1, r0
 80153cc:	428a      	cmp	r2, r1
 80153ce:	d100      	bne.n	80153d2 <memmove+0x2a>
 80153d0:	bd10      	pop	{r4, pc}
 80153d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80153d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80153da:	e7f7      	b.n	80153cc <memmove+0x24>

080153dc <_Balloc>:
 80153dc:	b570      	push	{r4, r5, r6, lr}
 80153de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80153e0:	4604      	mov	r4, r0
 80153e2:	460d      	mov	r5, r1
 80153e4:	b976      	cbnz	r6, 8015404 <_Balloc+0x28>
 80153e6:	2010      	movs	r0, #16
 80153e8:	f7ff ffc4 	bl	8015374 <malloc>
 80153ec:	4602      	mov	r2, r0
 80153ee:	6260      	str	r0, [r4, #36]	; 0x24
 80153f0:	b920      	cbnz	r0, 80153fc <_Balloc+0x20>
 80153f2:	4b18      	ldr	r3, [pc, #96]	; (8015454 <_Balloc+0x78>)
 80153f4:	4818      	ldr	r0, [pc, #96]	; (8015458 <_Balloc+0x7c>)
 80153f6:	2166      	movs	r1, #102	; 0x66
 80153f8:	f7fc fbc2 	bl	8011b80 <__assert_func>
 80153fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015400:	6006      	str	r6, [r0, #0]
 8015402:	60c6      	str	r6, [r0, #12]
 8015404:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015406:	68f3      	ldr	r3, [r6, #12]
 8015408:	b183      	cbz	r3, 801542c <_Balloc+0x50>
 801540a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801540c:	68db      	ldr	r3, [r3, #12]
 801540e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015412:	b9b8      	cbnz	r0, 8015444 <_Balloc+0x68>
 8015414:	2101      	movs	r1, #1
 8015416:	fa01 f605 	lsl.w	r6, r1, r5
 801541a:	1d72      	adds	r2, r6, #5
 801541c:	0092      	lsls	r2, r2, #2
 801541e:	4620      	mov	r0, r4
 8015420:	f000 fc97 	bl	8015d52 <_calloc_r>
 8015424:	b160      	cbz	r0, 8015440 <_Balloc+0x64>
 8015426:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801542a:	e00e      	b.n	801544a <_Balloc+0x6e>
 801542c:	2221      	movs	r2, #33	; 0x21
 801542e:	2104      	movs	r1, #4
 8015430:	4620      	mov	r0, r4
 8015432:	f000 fc8e 	bl	8015d52 <_calloc_r>
 8015436:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015438:	60f0      	str	r0, [r6, #12]
 801543a:	68db      	ldr	r3, [r3, #12]
 801543c:	2b00      	cmp	r3, #0
 801543e:	d1e4      	bne.n	801540a <_Balloc+0x2e>
 8015440:	2000      	movs	r0, #0
 8015442:	bd70      	pop	{r4, r5, r6, pc}
 8015444:	6802      	ldr	r2, [r0, #0]
 8015446:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801544a:	2300      	movs	r3, #0
 801544c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015450:	e7f7      	b.n	8015442 <_Balloc+0x66>
 8015452:	bf00      	nop
 8015454:	0801832d 	.word	0x0801832d
 8015458:	08018494 	.word	0x08018494

0801545c <_Bfree>:
 801545c:	b570      	push	{r4, r5, r6, lr}
 801545e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015460:	4605      	mov	r5, r0
 8015462:	460c      	mov	r4, r1
 8015464:	b976      	cbnz	r6, 8015484 <_Bfree+0x28>
 8015466:	2010      	movs	r0, #16
 8015468:	f7ff ff84 	bl	8015374 <malloc>
 801546c:	4602      	mov	r2, r0
 801546e:	6268      	str	r0, [r5, #36]	; 0x24
 8015470:	b920      	cbnz	r0, 801547c <_Bfree+0x20>
 8015472:	4b09      	ldr	r3, [pc, #36]	; (8015498 <_Bfree+0x3c>)
 8015474:	4809      	ldr	r0, [pc, #36]	; (801549c <_Bfree+0x40>)
 8015476:	218a      	movs	r1, #138	; 0x8a
 8015478:	f7fc fb82 	bl	8011b80 <__assert_func>
 801547c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015480:	6006      	str	r6, [r0, #0]
 8015482:	60c6      	str	r6, [r0, #12]
 8015484:	b13c      	cbz	r4, 8015496 <_Bfree+0x3a>
 8015486:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015488:	6862      	ldr	r2, [r4, #4]
 801548a:	68db      	ldr	r3, [r3, #12]
 801548c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015490:	6021      	str	r1, [r4, #0]
 8015492:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015496:	bd70      	pop	{r4, r5, r6, pc}
 8015498:	0801832d 	.word	0x0801832d
 801549c:	08018494 	.word	0x08018494

080154a0 <__multadd>:
 80154a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154a4:	690e      	ldr	r6, [r1, #16]
 80154a6:	4607      	mov	r7, r0
 80154a8:	4698      	mov	r8, r3
 80154aa:	460c      	mov	r4, r1
 80154ac:	f101 0014 	add.w	r0, r1, #20
 80154b0:	2300      	movs	r3, #0
 80154b2:	6805      	ldr	r5, [r0, #0]
 80154b4:	b2a9      	uxth	r1, r5
 80154b6:	fb02 8101 	mla	r1, r2, r1, r8
 80154ba:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80154be:	0c2d      	lsrs	r5, r5, #16
 80154c0:	fb02 c505 	mla	r5, r2, r5, ip
 80154c4:	b289      	uxth	r1, r1
 80154c6:	3301      	adds	r3, #1
 80154c8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80154cc:	429e      	cmp	r6, r3
 80154ce:	f840 1b04 	str.w	r1, [r0], #4
 80154d2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80154d6:	dcec      	bgt.n	80154b2 <__multadd+0x12>
 80154d8:	f1b8 0f00 	cmp.w	r8, #0
 80154dc:	d022      	beq.n	8015524 <__multadd+0x84>
 80154de:	68a3      	ldr	r3, [r4, #8]
 80154e0:	42b3      	cmp	r3, r6
 80154e2:	dc19      	bgt.n	8015518 <__multadd+0x78>
 80154e4:	6861      	ldr	r1, [r4, #4]
 80154e6:	4638      	mov	r0, r7
 80154e8:	3101      	adds	r1, #1
 80154ea:	f7ff ff77 	bl	80153dc <_Balloc>
 80154ee:	4605      	mov	r5, r0
 80154f0:	b928      	cbnz	r0, 80154fe <__multadd+0x5e>
 80154f2:	4602      	mov	r2, r0
 80154f4:	4b0d      	ldr	r3, [pc, #52]	; (801552c <__multadd+0x8c>)
 80154f6:	480e      	ldr	r0, [pc, #56]	; (8015530 <__multadd+0x90>)
 80154f8:	21b5      	movs	r1, #181	; 0xb5
 80154fa:	f7fc fb41 	bl	8011b80 <__assert_func>
 80154fe:	6922      	ldr	r2, [r4, #16]
 8015500:	3202      	adds	r2, #2
 8015502:	f104 010c 	add.w	r1, r4, #12
 8015506:	0092      	lsls	r2, r2, #2
 8015508:	300c      	adds	r0, #12
 801550a:	f7fc fb93 	bl	8011c34 <memcpy>
 801550e:	4621      	mov	r1, r4
 8015510:	4638      	mov	r0, r7
 8015512:	f7ff ffa3 	bl	801545c <_Bfree>
 8015516:	462c      	mov	r4, r5
 8015518:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801551c:	3601      	adds	r6, #1
 801551e:	f8c3 8014 	str.w	r8, [r3, #20]
 8015522:	6126      	str	r6, [r4, #16]
 8015524:	4620      	mov	r0, r4
 8015526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801552a:	bf00      	nop
 801552c:	080183a3 	.word	0x080183a3
 8015530:	08018494 	.word	0x08018494

08015534 <__s2b>:
 8015534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015538:	460c      	mov	r4, r1
 801553a:	4615      	mov	r5, r2
 801553c:	461f      	mov	r7, r3
 801553e:	2209      	movs	r2, #9
 8015540:	3308      	adds	r3, #8
 8015542:	4606      	mov	r6, r0
 8015544:	fb93 f3f2 	sdiv	r3, r3, r2
 8015548:	2100      	movs	r1, #0
 801554a:	2201      	movs	r2, #1
 801554c:	429a      	cmp	r2, r3
 801554e:	db09      	blt.n	8015564 <__s2b+0x30>
 8015550:	4630      	mov	r0, r6
 8015552:	f7ff ff43 	bl	80153dc <_Balloc>
 8015556:	b940      	cbnz	r0, 801556a <__s2b+0x36>
 8015558:	4602      	mov	r2, r0
 801555a:	4b19      	ldr	r3, [pc, #100]	; (80155c0 <__s2b+0x8c>)
 801555c:	4819      	ldr	r0, [pc, #100]	; (80155c4 <__s2b+0x90>)
 801555e:	21ce      	movs	r1, #206	; 0xce
 8015560:	f7fc fb0e 	bl	8011b80 <__assert_func>
 8015564:	0052      	lsls	r2, r2, #1
 8015566:	3101      	adds	r1, #1
 8015568:	e7f0      	b.n	801554c <__s2b+0x18>
 801556a:	9b08      	ldr	r3, [sp, #32]
 801556c:	6143      	str	r3, [r0, #20]
 801556e:	2d09      	cmp	r5, #9
 8015570:	f04f 0301 	mov.w	r3, #1
 8015574:	6103      	str	r3, [r0, #16]
 8015576:	dd16      	ble.n	80155a6 <__s2b+0x72>
 8015578:	f104 0909 	add.w	r9, r4, #9
 801557c:	46c8      	mov	r8, r9
 801557e:	442c      	add	r4, r5
 8015580:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015584:	4601      	mov	r1, r0
 8015586:	3b30      	subs	r3, #48	; 0x30
 8015588:	220a      	movs	r2, #10
 801558a:	4630      	mov	r0, r6
 801558c:	f7ff ff88 	bl	80154a0 <__multadd>
 8015590:	45a0      	cmp	r8, r4
 8015592:	d1f5      	bne.n	8015580 <__s2b+0x4c>
 8015594:	f1a5 0408 	sub.w	r4, r5, #8
 8015598:	444c      	add	r4, r9
 801559a:	1b2d      	subs	r5, r5, r4
 801559c:	1963      	adds	r3, r4, r5
 801559e:	42bb      	cmp	r3, r7
 80155a0:	db04      	blt.n	80155ac <__s2b+0x78>
 80155a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80155a6:	340a      	adds	r4, #10
 80155a8:	2509      	movs	r5, #9
 80155aa:	e7f6      	b.n	801559a <__s2b+0x66>
 80155ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80155b0:	4601      	mov	r1, r0
 80155b2:	3b30      	subs	r3, #48	; 0x30
 80155b4:	220a      	movs	r2, #10
 80155b6:	4630      	mov	r0, r6
 80155b8:	f7ff ff72 	bl	80154a0 <__multadd>
 80155bc:	e7ee      	b.n	801559c <__s2b+0x68>
 80155be:	bf00      	nop
 80155c0:	080183a3 	.word	0x080183a3
 80155c4:	08018494 	.word	0x08018494

080155c8 <__hi0bits>:
 80155c8:	0c03      	lsrs	r3, r0, #16
 80155ca:	041b      	lsls	r3, r3, #16
 80155cc:	b9d3      	cbnz	r3, 8015604 <__hi0bits+0x3c>
 80155ce:	0400      	lsls	r0, r0, #16
 80155d0:	2310      	movs	r3, #16
 80155d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80155d6:	bf04      	itt	eq
 80155d8:	0200      	lsleq	r0, r0, #8
 80155da:	3308      	addeq	r3, #8
 80155dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80155e0:	bf04      	itt	eq
 80155e2:	0100      	lsleq	r0, r0, #4
 80155e4:	3304      	addeq	r3, #4
 80155e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80155ea:	bf04      	itt	eq
 80155ec:	0080      	lsleq	r0, r0, #2
 80155ee:	3302      	addeq	r3, #2
 80155f0:	2800      	cmp	r0, #0
 80155f2:	db05      	blt.n	8015600 <__hi0bits+0x38>
 80155f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80155f8:	f103 0301 	add.w	r3, r3, #1
 80155fc:	bf08      	it	eq
 80155fe:	2320      	moveq	r3, #32
 8015600:	4618      	mov	r0, r3
 8015602:	4770      	bx	lr
 8015604:	2300      	movs	r3, #0
 8015606:	e7e4      	b.n	80155d2 <__hi0bits+0xa>

08015608 <__lo0bits>:
 8015608:	6803      	ldr	r3, [r0, #0]
 801560a:	f013 0207 	ands.w	r2, r3, #7
 801560e:	4601      	mov	r1, r0
 8015610:	d00b      	beq.n	801562a <__lo0bits+0x22>
 8015612:	07da      	lsls	r2, r3, #31
 8015614:	d424      	bmi.n	8015660 <__lo0bits+0x58>
 8015616:	0798      	lsls	r0, r3, #30
 8015618:	bf49      	itett	mi
 801561a:	085b      	lsrmi	r3, r3, #1
 801561c:	089b      	lsrpl	r3, r3, #2
 801561e:	2001      	movmi	r0, #1
 8015620:	600b      	strmi	r3, [r1, #0]
 8015622:	bf5c      	itt	pl
 8015624:	600b      	strpl	r3, [r1, #0]
 8015626:	2002      	movpl	r0, #2
 8015628:	4770      	bx	lr
 801562a:	b298      	uxth	r0, r3
 801562c:	b9b0      	cbnz	r0, 801565c <__lo0bits+0x54>
 801562e:	0c1b      	lsrs	r3, r3, #16
 8015630:	2010      	movs	r0, #16
 8015632:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015636:	bf04      	itt	eq
 8015638:	0a1b      	lsreq	r3, r3, #8
 801563a:	3008      	addeq	r0, #8
 801563c:	071a      	lsls	r2, r3, #28
 801563e:	bf04      	itt	eq
 8015640:	091b      	lsreq	r3, r3, #4
 8015642:	3004      	addeq	r0, #4
 8015644:	079a      	lsls	r2, r3, #30
 8015646:	bf04      	itt	eq
 8015648:	089b      	lsreq	r3, r3, #2
 801564a:	3002      	addeq	r0, #2
 801564c:	07da      	lsls	r2, r3, #31
 801564e:	d403      	bmi.n	8015658 <__lo0bits+0x50>
 8015650:	085b      	lsrs	r3, r3, #1
 8015652:	f100 0001 	add.w	r0, r0, #1
 8015656:	d005      	beq.n	8015664 <__lo0bits+0x5c>
 8015658:	600b      	str	r3, [r1, #0]
 801565a:	4770      	bx	lr
 801565c:	4610      	mov	r0, r2
 801565e:	e7e8      	b.n	8015632 <__lo0bits+0x2a>
 8015660:	2000      	movs	r0, #0
 8015662:	4770      	bx	lr
 8015664:	2020      	movs	r0, #32
 8015666:	4770      	bx	lr

08015668 <__i2b>:
 8015668:	b510      	push	{r4, lr}
 801566a:	460c      	mov	r4, r1
 801566c:	2101      	movs	r1, #1
 801566e:	f7ff feb5 	bl	80153dc <_Balloc>
 8015672:	4602      	mov	r2, r0
 8015674:	b928      	cbnz	r0, 8015682 <__i2b+0x1a>
 8015676:	4b05      	ldr	r3, [pc, #20]	; (801568c <__i2b+0x24>)
 8015678:	4805      	ldr	r0, [pc, #20]	; (8015690 <__i2b+0x28>)
 801567a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801567e:	f7fc fa7f 	bl	8011b80 <__assert_func>
 8015682:	2301      	movs	r3, #1
 8015684:	6144      	str	r4, [r0, #20]
 8015686:	6103      	str	r3, [r0, #16]
 8015688:	bd10      	pop	{r4, pc}
 801568a:	bf00      	nop
 801568c:	080183a3 	.word	0x080183a3
 8015690:	08018494 	.word	0x08018494

08015694 <__multiply>:
 8015694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015698:	4614      	mov	r4, r2
 801569a:	690a      	ldr	r2, [r1, #16]
 801569c:	6923      	ldr	r3, [r4, #16]
 801569e:	429a      	cmp	r2, r3
 80156a0:	bfb8      	it	lt
 80156a2:	460b      	movlt	r3, r1
 80156a4:	460d      	mov	r5, r1
 80156a6:	bfbc      	itt	lt
 80156a8:	4625      	movlt	r5, r4
 80156aa:	461c      	movlt	r4, r3
 80156ac:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80156b0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80156b4:	68ab      	ldr	r3, [r5, #8]
 80156b6:	6869      	ldr	r1, [r5, #4]
 80156b8:	eb0a 0709 	add.w	r7, sl, r9
 80156bc:	42bb      	cmp	r3, r7
 80156be:	b085      	sub	sp, #20
 80156c0:	bfb8      	it	lt
 80156c2:	3101      	addlt	r1, #1
 80156c4:	f7ff fe8a 	bl	80153dc <_Balloc>
 80156c8:	b930      	cbnz	r0, 80156d8 <__multiply+0x44>
 80156ca:	4602      	mov	r2, r0
 80156cc:	4b42      	ldr	r3, [pc, #264]	; (80157d8 <__multiply+0x144>)
 80156ce:	4843      	ldr	r0, [pc, #268]	; (80157dc <__multiply+0x148>)
 80156d0:	f240 115d 	movw	r1, #349	; 0x15d
 80156d4:	f7fc fa54 	bl	8011b80 <__assert_func>
 80156d8:	f100 0614 	add.w	r6, r0, #20
 80156dc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80156e0:	4633      	mov	r3, r6
 80156e2:	2200      	movs	r2, #0
 80156e4:	4543      	cmp	r3, r8
 80156e6:	d31e      	bcc.n	8015726 <__multiply+0x92>
 80156e8:	f105 0c14 	add.w	ip, r5, #20
 80156ec:	f104 0314 	add.w	r3, r4, #20
 80156f0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80156f4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80156f8:	9202      	str	r2, [sp, #8]
 80156fa:	ebac 0205 	sub.w	r2, ip, r5
 80156fe:	3a15      	subs	r2, #21
 8015700:	f022 0203 	bic.w	r2, r2, #3
 8015704:	3204      	adds	r2, #4
 8015706:	f105 0115 	add.w	r1, r5, #21
 801570a:	458c      	cmp	ip, r1
 801570c:	bf38      	it	cc
 801570e:	2204      	movcc	r2, #4
 8015710:	9201      	str	r2, [sp, #4]
 8015712:	9a02      	ldr	r2, [sp, #8]
 8015714:	9303      	str	r3, [sp, #12]
 8015716:	429a      	cmp	r2, r3
 8015718:	d808      	bhi.n	801572c <__multiply+0x98>
 801571a:	2f00      	cmp	r7, #0
 801571c:	dc55      	bgt.n	80157ca <__multiply+0x136>
 801571e:	6107      	str	r7, [r0, #16]
 8015720:	b005      	add	sp, #20
 8015722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015726:	f843 2b04 	str.w	r2, [r3], #4
 801572a:	e7db      	b.n	80156e4 <__multiply+0x50>
 801572c:	f8b3 a000 	ldrh.w	sl, [r3]
 8015730:	f1ba 0f00 	cmp.w	sl, #0
 8015734:	d020      	beq.n	8015778 <__multiply+0xe4>
 8015736:	f105 0e14 	add.w	lr, r5, #20
 801573a:	46b1      	mov	r9, r6
 801573c:	2200      	movs	r2, #0
 801573e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8015742:	f8d9 b000 	ldr.w	fp, [r9]
 8015746:	b2a1      	uxth	r1, r4
 8015748:	fa1f fb8b 	uxth.w	fp, fp
 801574c:	fb0a b101 	mla	r1, sl, r1, fp
 8015750:	4411      	add	r1, r2
 8015752:	f8d9 2000 	ldr.w	r2, [r9]
 8015756:	0c24      	lsrs	r4, r4, #16
 8015758:	0c12      	lsrs	r2, r2, #16
 801575a:	fb0a 2404 	mla	r4, sl, r4, r2
 801575e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8015762:	b289      	uxth	r1, r1
 8015764:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8015768:	45f4      	cmp	ip, lr
 801576a:	f849 1b04 	str.w	r1, [r9], #4
 801576e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8015772:	d8e4      	bhi.n	801573e <__multiply+0xaa>
 8015774:	9901      	ldr	r1, [sp, #4]
 8015776:	5072      	str	r2, [r6, r1]
 8015778:	9a03      	ldr	r2, [sp, #12]
 801577a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801577e:	3304      	adds	r3, #4
 8015780:	f1b9 0f00 	cmp.w	r9, #0
 8015784:	d01f      	beq.n	80157c6 <__multiply+0x132>
 8015786:	6834      	ldr	r4, [r6, #0]
 8015788:	f105 0114 	add.w	r1, r5, #20
 801578c:	46b6      	mov	lr, r6
 801578e:	f04f 0a00 	mov.w	sl, #0
 8015792:	880a      	ldrh	r2, [r1, #0]
 8015794:	f8be b002 	ldrh.w	fp, [lr, #2]
 8015798:	fb09 b202 	mla	r2, r9, r2, fp
 801579c:	4492      	add	sl, r2
 801579e:	b2a4      	uxth	r4, r4
 80157a0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80157a4:	f84e 4b04 	str.w	r4, [lr], #4
 80157a8:	f851 4b04 	ldr.w	r4, [r1], #4
 80157ac:	f8be 2000 	ldrh.w	r2, [lr]
 80157b0:	0c24      	lsrs	r4, r4, #16
 80157b2:	fb09 2404 	mla	r4, r9, r4, r2
 80157b6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80157ba:	458c      	cmp	ip, r1
 80157bc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80157c0:	d8e7      	bhi.n	8015792 <__multiply+0xfe>
 80157c2:	9a01      	ldr	r2, [sp, #4]
 80157c4:	50b4      	str	r4, [r6, r2]
 80157c6:	3604      	adds	r6, #4
 80157c8:	e7a3      	b.n	8015712 <__multiply+0x7e>
 80157ca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d1a5      	bne.n	801571e <__multiply+0x8a>
 80157d2:	3f01      	subs	r7, #1
 80157d4:	e7a1      	b.n	801571a <__multiply+0x86>
 80157d6:	bf00      	nop
 80157d8:	080183a3 	.word	0x080183a3
 80157dc:	08018494 	.word	0x08018494

080157e0 <__pow5mult>:
 80157e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80157e4:	4615      	mov	r5, r2
 80157e6:	f012 0203 	ands.w	r2, r2, #3
 80157ea:	4606      	mov	r6, r0
 80157ec:	460f      	mov	r7, r1
 80157ee:	d007      	beq.n	8015800 <__pow5mult+0x20>
 80157f0:	4c25      	ldr	r4, [pc, #148]	; (8015888 <__pow5mult+0xa8>)
 80157f2:	3a01      	subs	r2, #1
 80157f4:	2300      	movs	r3, #0
 80157f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80157fa:	f7ff fe51 	bl	80154a0 <__multadd>
 80157fe:	4607      	mov	r7, r0
 8015800:	10ad      	asrs	r5, r5, #2
 8015802:	d03d      	beq.n	8015880 <__pow5mult+0xa0>
 8015804:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015806:	b97c      	cbnz	r4, 8015828 <__pow5mult+0x48>
 8015808:	2010      	movs	r0, #16
 801580a:	f7ff fdb3 	bl	8015374 <malloc>
 801580e:	4602      	mov	r2, r0
 8015810:	6270      	str	r0, [r6, #36]	; 0x24
 8015812:	b928      	cbnz	r0, 8015820 <__pow5mult+0x40>
 8015814:	4b1d      	ldr	r3, [pc, #116]	; (801588c <__pow5mult+0xac>)
 8015816:	481e      	ldr	r0, [pc, #120]	; (8015890 <__pow5mult+0xb0>)
 8015818:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801581c:	f7fc f9b0 	bl	8011b80 <__assert_func>
 8015820:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015824:	6004      	str	r4, [r0, #0]
 8015826:	60c4      	str	r4, [r0, #12]
 8015828:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801582c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015830:	b94c      	cbnz	r4, 8015846 <__pow5mult+0x66>
 8015832:	f240 2171 	movw	r1, #625	; 0x271
 8015836:	4630      	mov	r0, r6
 8015838:	f7ff ff16 	bl	8015668 <__i2b>
 801583c:	2300      	movs	r3, #0
 801583e:	f8c8 0008 	str.w	r0, [r8, #8]
 8015842:	4604      	mov	r4, r0
 8015844:	6003      	str	r3, [r0, #0]
 8015846:	f04f 0900 	mov.w	r9, #0
 801584a:	07eb      	lsls	r3, r5, #31
 801584c:	d50a      	bpl.n	8015864 <__pow5mult+0x84>
 801584e:	4639      	mov	r1, r7
 8015850:	4622      	mov	r2, r4
 8015852:	4630      	mov	r0, r6
 8015854:	f7ff ff1e 	bl	8015694 <__multiply>
 8015858:	4639      	mov	r1, r7
 801585a:	4680      	mov	r8, r0
 801585c:	4630      	mov	r0, r6
 801585e:	f7ff fdfd 	bl	801545c <_Bfree>
 8015862:	4647      	mov	r7, r8
 8015864:	106d      	asrs	r5, r5, #1
 8015866:	d00b      	beq.n	8015880 <__pow5mult+0xa0>
 8015868:	6820      	ldr	r0, [r4, #0]
 801586a:	b938      	cbnz	r0, 801587c <__pow5mult+0x9c>
 801586c:	4622      	mov	r2, r4
 801586e:	4621      	mov	r1, r4
 8015870:	4630      	mov	r0, r6
 8015872:	f7ff ff0f 	bl	8015694 <__multiply>
 8015876:	6020      	str	r0, [r4, #0]
 8015878:	f8c0 9000 	str.w	r9, [r0]
 801587c:	4604      	mov	r4, r0
 801587e:	e7e4      	b.n	801584a <__pow5mult+0x6a>
 8015880:	4638      	mov	r0, r7
 8015882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015886:	bf00      	nop
 8015888:	080185e8 	.word	0x080185e8
 801588c:	0801832d 	.word	0x0801832d
 8015890:	08018494 	.word	0x08018494

08015894 <__lshift>:
 8015894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015898:	460c      	mov	r4, r1
 801589a:	6849      	ldr	r1, [r1, #4]
 801589c:	6923      	ldr	r3, [r4, #16]
 801589e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80158a2:	68a3      	ldr	r3, [r4, #8]
 80158a4:	4607      	mov	r7, r0
 80158a6:	4691      	mov	r9, r2
 80158a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80158ac:	f108 0601 	add.w	r6, r8, #1
 80158b0:	42b3      	cmp	r3, r6
 80158b2:	db0b      	blt.n	80158cc <__lshift+0x38>
 80158b4:	4638      	mov	r0, r7
 80158b6:	f7ff fd91 	bl	80153dc <_Balloc>
 80158ba:	4605      	mov	r5, r0
 80158bc:	b948      	cbnz	r0, 80158d2 <__lshift+0x3e>
 80158be:	4602      	mov	r2, r0
 80158c0:	4b28      	ldr	r3, [pc, #160]	; (8015964 <__lshift+0xd0>)
 80158c2:	4829      	ldr	r0, [pc, #164]	; (8015968 <__lshift+0xd4>)
 80158c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80158c8:	f7fc f95a 	bl	8011b80 <__assert_func>
 80158cc:	3101      	adds	r1, #1
 80158ce:	005b      	lsls	r3, r3, #1
 80158d0:	e7ee      	b.n	80158b0 <__lshift+0x1c>
 80158d2:	2300      	movs	r3, #0
 80158d4:	f100 0114 	add.w	r1, r0, #20
 80158d8:	f100 0210 	add.w	r2, r0, #16
 80158dc:	4618      	mov	r0, r3
 80158de:	4553      	cmp	r3, sl
 80158e0:	db33      	blt.n	801594a <__lshift+0xb6>
 80158e2:	6920      	ldr	r0, [r4, #16]
 80158e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80158e8:	f104 0314 	add.w	r3, r4, #20
 80158ec:	f019 091f 	ands.w	r9, r9, #31
 80158f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80158f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80158f8:	d02b      	beq.n	8015952 <__lshift+0xbe>
 80158fa:	f1c9 0e20 	rsb	lr, r9, #32
 80158fe:	468a      	mov	sl, r1
 8015900:	2200      	movs	r2, #0
 8015902:	6818      	ldr	r0, [r3, #0]
 8015904:	fa00 f009 	lsl.w	r0, r0, r9
 8015908:	4302      	orrs	r2, r0
 801590a:	f84a 2b04 	str.w	r2, [sl], #4
 801590e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015912:	459c      	cmp	ip, r3
 8015914:	fa22 f20e 	lsr.w	r2, r2, lr
 8015918:	d8f3      	bhi.n	8015902 <__lshift+0x6e>
 801591a:	ebac 0304 	sub.w	r3, ip, r4
 801591e:	3b15      	subs	r3, #21
 8015920:	f023 0303 	bic.w	r3, r3, #3
 8015924:	3304      	adds	r3, #4
 8015926:	f104 0015 	add.w	r0, r4, #21
 801592a:	4584      	cmp	ip, r0
 801592c:	bf38      	it	cc
 801592e:	2304      	movcc	r3, #4
 8015930:	50ca      	str	r2, [r1, r3]
 8015932:	b10a      	cbz	r2, 8015938 <__lshift+0xa4>
 8015934:	f108 0602 	add.w	r6, r8, #2
 8015938:	3e01      	subs	r6, #1
 801593a:	4638      	mov	r0, r7
 801593c:	612e      	str	r6, [r5, #16]
 801593e:	4621      	mov	r1, r4
 8015940:	f7ff fd8c 	bl	801545c <_Bfree>
 8015944:	4628      	mov	r0, r5
 8015946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801594a:	f842 0f04 	str.w	r0, [r2, #4]!
 801594e:	3301      	adds	r3, #1
 8015950:	e7c5      	b.n	80158de <__lshift+0x4a>
 8015952:	3904      	subs	r1, #4
 8015954:	f853 2b04 	ldr.w	r2, [r3], #4
 8015958:	f841 2f04 	str.w	r2, [r1, #4]!
 801595c:	459c      	cmp	ip, r3
 801595e:	d8f9      	bhi.n	8015954 <__lshift+0xc0>
 8015960:	e7ea      	b.n	8015938 <__lshift+0xa4>
 8015962:	bf00      	nop
 8015964:	080183a3 	.word	0x080183a3
 8015968:	08018494 	.word	0x08018494

0801596c <__mcmp>:
 801596c:	b530      	push	{r4, r5, lr}
 801596e:	6902      	ldr	r2, [r0, #16]
 8015970:	690c      	ldr	r4, [r1, #16]
 8015972:	1b12      	subs	r2, r2, r4
 8015974:	d10e      	bne.n	8015994 <__mcmp+0x28>
 8015976:	f100 0314 	add.w	r3, r0, #20
 801597a:	3114      	adds	r1, #20
 801597c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015980:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015984:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015988:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801598c:	42a5      	cmp	r5, r4
 801598e:	d003      	beq.n	8015998 <__mcmp+0x2c>
 8015990:	d305      	bcc.n	801599e <__mcmp+0x32>
 8015992:	2201      	movs	r2, #1
 8015994:	4610      	mov	r0, r2
 8015996:	bd30      	pop	{r4, r5, pc}
 8015998:	4283      	cmp	r3, r0
 801599a:	d3f3      	bcc.n	8015984 <__mcmp+0x18>
 801599c:	e7fa      	b.n	8015994 <__mcmp+0x28>
 801599e:	f04f 32ff 	mov.w	r2, #4294967295
 80159a2:	e7f7      	b.n	8015994 <__mcmp+0x28>

080159a4 <__mdiff>:
 80159a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159a8:	460c      	mov	r4, r1
 80159aa:	4606      	mov	r6, r0
 80159ac:	4611      	mov	r1, r2
 80159ae:	4620      	mov	r0, r4
 80159b0:	4617      	mov	r7, r2
 80159b2:	f7ff ffdb 	bl	801596c <__mcmp>
 80159b6:	1e05      	subs	r5, r0, #0
 80159b8:	d110      	bne.n	80159dc <__mdiff+0x38>
 80159ba:	4629      	mov	r1, r5
 80159bc:	4630      	mov	r0, r6
 80159be:	f7ff fd0d 	bl	80153dc <_Balloc>
 80159c2:	b930      	cbnz	r0, 80159d2 <__mdiff+0x2e>
 80159c4:	4b39      	ldr	r3, [pc, #228]	; (8015aac <__mdiff+0x108>)
 80159c6:	4602      	mov	r2, r0
 80159c8:	f240 2132 	movw	r1, #562	; 0x232
 80159cc:	4838      	ldr	r0, [pc, #224]	; (8015ab0 <__mdiff+0x10c>)
 80159ce:	f7fc f8d7 	bl	8011b80 <__assert_func>
 80159d2:	2301      	movs	r3, #1
 80159d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80159d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159dc:	bfa4      	itt	ge
 80159de:	463b      	movge	r3, r7
 80159e0:	4627      	movge	r7, r4
 80159e2:	4630      	mov	r0, r6
 80159e4:	6879      	ldr	r1, [r7, #4]
 80159e6:	bfa6      	itte	ge
 80159e8:	461c      	movge	r4, r3
 80159ea:	2500      	movge	r5, #0
 80159ec:	2501      	movlt	r5, #1
 80159ee:	f7ff fcf5 	bl	80153dc <_Balloc>
 80159f2:	b920      	cbnz	r0, 80159fe <__mdiff+0x5a>
 80159f4:	4b2d      	ldr	r3, [pc, #180]	; (8015aac <__mdiff+0x108>)
 80159f6:	4602      	mov	r2, r0
 80159f8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80159fc:	e7e6      	b.n	80159cc <__mdiff+0x28>
 80159fe:	693e      	ldr	r6, [r7, #16]
 8015a00:	60c5      	str	r5, [r0, #12]
 8015a02:	6925      	ldr	r5, [r4, #16]
 8015a04:	f107 0114 	add.w	r1, r7, #20
 8015a08:	f104 0914 	add.w	r9, r4, #20
 8015a0c:	f100 0e14 	add.w	lr, r0, #20
 8015a10:	f107 0210 	add.w	r2, r7, #16
 8015a14:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8015a18:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8015a1c:	46f2      	mov	sl, lr
 8015a1e:	2700      	movs	r7, #0
 8015a20:	f859 3b04 	ldr.w	r3, [r9], #4
 8015a24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015a28:	fa1f f883 	uxth.w	r8, r3
 8015a2c:	fa17 f78b 	uxtah	r7, r7, fp
 8015a30:	0c1b      	lsrs	r3, r3, #16
 8015a32:	eba7 0808 	sub.w	r8, r7, r8
 8015a36:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015a3a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015a3e:	fa1f f888 	uxth.w	r8, r8
 8015a42:	141f      	asrs	r7, r3, #16
 8015a44:	454d      	cmp	r5, r9
 8015a46:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015a4a:	f84a 3b04 	str.w	r3, [sl], #4
 8015a4e:	d8e7      	bhi.n	8015a20 <__mdiff+0x7c>
 8015a50:	1b2b      	subs	r3, r5, r4
 8015a52:	3b15      	subs	r3, #21
 8015a54:	f023 0303 	bic.w	r3, r3, #3
 8015a58:	3304      	adds	r3, #4
 8015a5a:	3415      	adds	r4, #21
 8015a5c:	42a5      	cmp	r5, r4
 8015a5e:	bf38      	it	cc
 8015a60:	2304      	movcc	r3, #4
 8015a62:	4419      	add	r1, r3
 8015a64:	4473      	add	r3, lr
 8015a66:	469e      	mov	lr, r3
 8015a68:	460d      	mov	r5, r1
 8015a6a:	4565      	cmp	r5, ip
 8015a6c:	d30e      	bcc.n	8015a8c <__mdiff+0xe8>
 8015a6e:	f10c 0203 	add.w	r2, ip, #3
 8015a72:	1a52      	subs	r2, r2, r1
 8015a74:	f022 0203 	bic.w	r2, r2, #3
 8015a78:	3903      	subs	r1, #3
 8015a7a:	458c      	cmp	ip, r1
 8015a7c:	bf38      	it	cc
 8015a7e:	2200      	movcc	r2, #0
 8015a80:	441a      	add	r2, r3
 8015a82:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015a86:	b17b      	cbz	r3, 8015aa8 <__mdiff+0x104>
 8015a88:	6106      	str	r6, [r0, #16]
 8015a8a:	e7a5      	b.n	80159d8 <__mdiff+0x34>
 8015a8c:	f855 8b04 	ldr.w	r8, [r5], #4
 8015a90:	fa17 f488 	uxtah	r4, r7, r8
 8015a94:	1422      	asrs	r2, r4, #16
 8015a96:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8015a9a:	b2a4      	uxth	r4, r4
 8015a9c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8015aa0:	f84e 4b04 	str.w	r4, [lr], #4
 8015aa4:	1417      	asrs	r7, r2, #16
 8015aa6:	e7e0      	b.n	8015a6a <__mdiff+0xc6>
 8015aa8:	3e01      	subs	r6, #1
 8015aaa:	e7ea      	b.n	8015a82 <__mdiff+0xde>
 8015aac:	080183a3 	.word	0x080183a3
 8015ab0:	08018494 	.word	0x08018494

08015ab4 <__ulp>:
 8015ab4:	b082      	sub	sp, #8
 8015ab6:	ed8d 0b00 	vstr	d0, [sp]
 8015aba:	9b01      	ldr	r3, [sp, #4]
 8015abc:	4912      	ldr	r1, [pc, #72]	; (8015b08 <__ulp+0x54>)
 8015abe:	4019      	ands	r1, r3
 8015ac0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8015ac4:	2900      	cmp	r1, #0
 8015ac6:	dd05      	ble.n	8015ad4 <__ulp+0x20>
 8015ac8:	2200      	movs	r2, #0
 8015aca:	460b      	mov	r3, r1
 8015acc:	ec43 2b10 	vmov	d0, r2, r3
 8015ad0:	b002      	add	sp, #8
 8015ad2:	4770      	bx	lr
 8015ad4:	4249      	negs	r1, r1
 8015ad6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8015ada:	ea4f 5021 	mov.w	r0, r1, asr #20
 8015ade:	f04f 0200 	mov.w	r2, #0
 8015ae2:	f04f 0300 	mov.w	r3, #0
 8015ae6:	da04      	bge.n	8015af2 <__ulp+0x3e>
 8015ae8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8015aec:	fa41 f300 	asr.w	r3, r1, r0
 8015af0:	e7ec      	b.n	8015acc <__ulp+0x18>
 8015af2:	f1a0 0114 	sub.w	r1, r0, #20
 8015af6:	291e      	cmp	r1, #30
 8015af8:	bfda      	itte	le
 8015afa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8015afe:	fa20 f101 	lsrle.w	r1, r0, r1
 8015b02:	2101      	movgt	r1, #1
 8015b04:	460a      	mov	r2, r1
 8015b06:	e7e1      	b.n	8015acc <__ulp+0x18>
 8015b08:	7ff00000 	.word	0x7ff00000

08015b0c <__b2d>:
 8015b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b0e:	6905      	ldr	r5, [r0, #16]
 8015b10:	f100 0714 	add.w	r7, r0, #20
 8015b14:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8015b18:	1f2e      	subs	r6, r5, #4
 8015b1a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8015b1e:	4620      	mov	r0, r4
 8015b20:	f7ff fd52 	bl	80155c8 <__hi0bits>
 8015b24:	f1c0 0320 	rsb	r3, r0, #32
 8015b28:	280a      	cmp	r0, #10
 8015b2a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8015ba8 <__b2d+0x9c>
 8015b2e:	600b      	str	r3, [r1, #0]
 8015b30:	dc14      	bgt.n	8015b5c <__b2d+0x50>
 8015b32:	f1c0 0e0b 	rsb	lr, r0, #11
 8015b36:	fa24 f10e 	lsr.w	r1, r4, lr
 8015b3a:	42b7      	cmp	r7, r6
 8015b3c:	ea41 030c 	orr.w	r3, r1, ip
 8015b40:	bf34      	ite	cc
 8015b42:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015b46:	2100      	movcs	r1, #0
 8015b48:	3015      	adds	r0, #21
 8015b4a:	fa04 f000 	lsl.w	r0, r4, r0
 8015b4e:	fa21 f10e 	lsr.w	r1, r1, lr
 8015b52:	ea40 0201 	orr.w	r2, r0, r1
 8015b56:	ec43 2b10 	vmov	d0, r2, r3
 8015b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b5c:	42b7      	cmp	r7, r6
 8015b5e:	bf3a      	itte	cc
 8015b60:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015b64:	f1a5 0608 	subcc.w	r6, r5, #8
 8015b68:	2100      	movcs	r1, #0
 8015b6a:	380b      	subs	r0, #11
 8015b6c:	d017      	beq.n	8015b9e <__b2d+0x92>
 8015b6e:	f1c0 0c20 	rsb	ip, r0, #32
 8015b72:	fa04 f500 	lsl.w	r5, r4, r0
 8015b76:	42be      	cmp	r6, r7
 8015b78:	fa21 f40c 	lsr.w	r4, r1, ip
 8015b7c:	ea45 0504 	orr.w	r5, r5, r4
 8015b80:	bf8c      	ite	hi
 8015b82:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015b86:	2400      	movls	r4, #0
 8015b88:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8015b8c:	fa01 f000 	lsl.w	r0, r1, r0
 8015b90:	fa24 f40c 	lsr.w	r4, r4, ip
 8015b94:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015b98:	ea40 0204 	orr.w	r2, r0, r4
 8015b9c:	e7db      	b.n	8015b56 <__b2d+0x4a>
 8015b9e:	ea44 030c 	orr.w	r3, r4, ip
 8015ba2:	460a      	mov	r2, r1
 8015ba4:	e7d7      	b.n	8015b56 <__b2d+0x4a>
 8015ba6:	bf00      	nop
 8015ba8:	3ff00000 	.word	0x3ff00000

08015bac <__d2b>:
 8015bac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015bb0:	4689      	mov	r9, r1
 8015bb2:	2101      	movs	r1, #1
 8015bb4:	ec57 6b10 	vmov	r6, r7, d0
 8015bb8:	4690      	mov	r8, r2
 8015bba:	f7ff fc0f 	bl	80153dc <_Balloc>
 8015bbe:	4604      	mov	r4, r0
 8015bc0:	b930      	cbnz	r0, 8015bd0 <__d2b+0x24>
 8015bc2:	4602      	mov	r2, r0
 8015bc4:	4b25      	ldr	r3, [pc, #148]	; (8015c5c <__d2b+0xb0>)
 8015bc6:	4826      	ldr	r0, [pc, #152]	; (8015c60 <__d2b+0xb4>)
 8015bc8:	f240 310a 	movw	r1, #778	; 0x30a
 8015bcc:	f7fb ffd8 	bl	8011b80 <__assert_func>
 8015bd0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015bd4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015bd8:	bb35      	cbnz	r5, 8015c28 <__d2b+0x7c>
 8015bda:	2e00      	cmp	r6, #0
 8015bdc:	9301      	str	r3, [sp, #4]
 8015bde:	d028      	beq.n	8015c32 <__d2b+0x86>
 8015be0:	4668      	mov	r0, sp
 8015be2:	9600      	str	r6, [sp, #0]
 8015be4:	f7ff fd10 	bl	8015608 <__lo0bits>
 8015be8:	9900      	ldr	r1, [sp, #0]
 8015bea:	b300      	cbz	r0, 8015c2e <__d2b+0x82>
 8015bec:	9a01      	ldr	r2, [sp, #4]
 8015bee:	f1c0 0320 	rsb	r3, r0, #32
 8015bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8015bf6:	430b      	orrs	r3, r1
 8015bf8:	40c2      	lsrs	r2, r0
 8015bfa:	6163      	str	r3, [r4, #20]
 8015bfc:	9201      	str	r2, [sp, #4]
 8015bfe:	9b01      	ldr	r3, [sp, #4]
 8015c00:	61a3      	str	r3, [r4, #24]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	bf14      	ite	ne
 8015c06:	2202      	movne	r2, #2
 8015c08:	2201      	moveq	r2, #1
 8015c0a:	6122      	str	r2, [r4, #16]
 8015c0c:	b1d5      	cbz	r5, 8015c44 <__d2b+0x98>
 8015c0e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015c12:	4405      	add	r5, r0
 8015c14:	f8c9 5000 	str.w	r5, [r9]
 8015c18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015c1c:	f8c8 0000 	str.w	r0, [r8]
 8015c20:	4620      	mov	r0, r4
 8015c22:	b003      	add	sp, #12
 8015c24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015c2c:	e7d5      	b.n	8015bda <__d2b+0x2e>
 8015c2e:	6161      	str	r1, [r4, #20]
 8015c30:	e7e5      	b.n	8015bfe <__d2b+0x52>
 8015c32:	a801      	add	r0, sp, #4
 8015c34:	f7ff fce8 	bl	8015608 <__lo0bits>
 8015c38:	9b01      	ldr	r3, [sp, #4]
 8015c3a:	6163      	str	r3, [r4, #20]
 8015c3c:	2201      	movs	r2, #1
 8015c3e:	6122      	str	r2, [r4, #16]
 8015c40:	3020      	adds	r0, #32
 8015c42:	e7e3      	b.n	8015c0c <__d2b+0x60>
 8015c44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015c48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015c4c:	f8c9 0000 	str.w	r0, [r9]
 8015c50:	6918      	ldr	r0, [r3, #16]
 8015c52:	f7ff fcb9 	bl	80155c8 <__hi0bits>
 8015c56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015c5a:	e7df      	b.n	8015c1c <__d2b+0x70>
 8015c5c:	080183a3 	.word	0x080183a3
 8015c60:	08018494 	.word	0x08018494

08015c64 <__ratio>:
 8015c64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c68:	4688      	mov	r8, r1
 8015c6a:	4669      	mov	r1, sp
 8015c6c:	4681      	mov	r9, r0
 8015c6e:	f7ff ff4d 	bl	8015b0c <__b2d>
 8015c72:	a901      	add	r1, sp, #4
 8015c74:	4640      	mov	r0, r8
 8015c76:	ec55 4b10 	vmov	r4, r5, d0
 8015c7a:	f7ff ff47 	bl	8015b0c <__b2d>
 8015c7e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015c82:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015c86:	eba3 0c02 	sub.w	ip, r3, r2
 8015c8a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015c8e:	1a9b      	subs	r3, r3, r2
 8015c90:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015c94:	ec51 0b10 	vmov	r0, r1, d0
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	bfd6      	itet	le
 8015c9c:	460a      	movle	r2, r1
 8015c9e:	462a      	movgt	r2, r5
 8015ca0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015ca4:	468b      	mov	fp, r1
 8015ca6:	462f      	mov	r7, r5
 8015ca8:	bfd4      	ite	le
 8015caa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8015cae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8015cb2:	4620      	mov	r0, r4
 8015cb4:	ee10 2a10 	vmov	r2, s0
 8015cb8:	465b      	mov	r3, fp
 8015cba:	4639      	mov	r1, r7
 8015cbc:	f7ea fdde 	bl	800087c <__aeabi_ddiv>
 8015cc0:	ec41 0b10 	vmov	d0, r0, r1
 8015cc4:	b003      	add	sp, #12
 8015cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015cca <__copybits>:
 8015cca:	3901      	subs	r1, #1
 8015ccc:	b570      	push	{r4, r5, r6, lr}
 8015cce:	1149      	asrs	r1, r1, #5
 8015cd0:	6914      	ldr	r4, [r2, #16]
 8015cd2:	3101      	adds	r1, #1
 8015cd4:	f102 0314 	add.w	r3, r2, #20
 8015cd8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015cdc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015ce0:	1f05      	subs	r5, r0, #4
 8015ce2:	42a3      	cmp	r3, r4
 8015ce4:	d30c      	bcc.n	8015d00 <__copybits+0x36>
 8015ce6:	1aa3      	subs	r3, r4, r2
 8015ce8:	3b11      	subs	r3, #17
 8015cea:	f023 0303 	bic.w	r3, r3, #3
 8015cee:	3211      	adds	r2, #17
 8015cf0:	42a2      	cmp	r2, r4
 8015cf2:	bf88      	it	hi
 8015cf4:	2300      	movhi	r3, #0
 8015cf6:	4418      	add	r0, r3
 8015cf8:	2300      	movs	r3, #0
 8015cfa:	4288      	cmp	r0, r1
 8015cfc:	d305      	bcc.n	8015d0a <__copybits+0x40>
 8015cfe:	bd70      	pop	{r4, r5, r6, pc}
 8015d00:	f853 6b04 	ldr.w	r6, [r3], #4
 8015d04:	f845 6f04 	str.w	r6, [r5, #4]!
 8015d08:	e7eb      	b.n	8015ce2 <__copybits+0x18>
 8015d0a:	f840 3b04 	str.w	r3, [r0], #4
 8015d0e:	e7f4      	b.n	8015cfa <__copybits+0x30>

08015d10 <__any_on>:
 8015d10:	f100 0214 	add.w	r2, r0, #20
 8015d14:	6900      	ldr	r0, [r0, #16]
 8015d16:	114b      	asrs	r3, r1, #5
 8015d18:	4298      	cmp	r0, r3
 8015d1a:	b510      	push	{r4, lr}
 8015d1c:	db11      	blt.n	8015d42 <__any_on+0x32>
 8015d1e:	dd0a      	ble.n	8015d36 <__any_on+0x26>
 8015d20:	f011 011f 	ands.w	r1, r1, #31
 8015d24:	d007      	beq.n	8015d36 <__any_on+0x26>
 8015d26:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015d2a:	fa24 f001 	lsr.w	r0, r4, r1
 8015d2e:	fa00 f101 	lsl.w	r1, r0, r1
 8015d32:	428c      	cmp	r4, r1
 8015d34:	d10b      	bne.n	8015d4e <__any_on+0x3e>
 8015d36:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015d3a:	4293      	cmp	r3, r2
 8015d3c:	d803      	bhi.n	8015d46 <__any_on+0x36>
 8015d3e:	2000      	movs	r0, #0
 8015d40:	bd10      	pop	{r4, pc}
 8015d42:	4603      	mov	r3, r0
 8015d44:	e7f7      	b.n	8015d36 <__any_on+0x26>
 8015d46:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015d4a:	2900      	cmp	r1, #0
 8015d4c:	d0f5      	beq.n	8015d3a <__any_on+0x2a>
 8015d4e:	2001      	movs	r0, #1
 8015d50:	e7f6      	b.n	8015d40 <__any_on+0x30>

08015d52 <_calloc_r>:
 8015d52:	b513      	push	{r0, r1, r4, lr}
 8015d54:	434a      	muls	r2, r1
 8015d56:	4611      	mov	r1, r2
 8015d58:	9201      	str	r2, [sp, #4]
 8015d5a:	f000 f859 	bl	8015e10 <_malloc_r>
 8015d5e:	4604      	mov	r4, r0
 8015d60:	b118      	cbz	r0, 8015d6a <_calloc_r+0x18>
 8015d62:	9a01      	ldr	r2, [sp, #4]
 8015d64:	2100      	movs	r1, #0
 8015d66:	f7fb ff73 	bl	8011c50 <memset>
 8015d6a:	4620      	mov	r0, r4
 8015d6c:	b002      	add	sp, #8
 8015d6e:	bd10      	pop	{r4, pc}

08015d70 <_free_r>:
 8015d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015d72:	2900      	cmp	r1, #0
 8015d74:	d048      	beq.n	8015e08 <_free_r+0x98>
 8015d76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015d7a:	9001      	str	r0, [sp, #4]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	f1a1 0404 	sub.w	r4, r1, #4
 8015d82:	bfb8      	it	lt
 8015d84:	18e4      	addlt	r4, r4, r3
 8015d86:	f000 fb33 	bl	80163f0 <__malloc_lock>
 8015d8a:	4a20      	ldr	r2, [pc, #128]	; (8015e0c <_free_r+0x9c>)
 8015d8c:	9801      	ldr	r0, [sp, #4]
 8015d8e:	6813      	ldr	r3, [r2, #0]
 8015d90:	4615      	mov	r5, r2
 8015d92:	b933      	cbnz	r3, 8015da2 <_free_r+0x32>
 8015d94:	6063      	str	r3, [r4, #4]
 8015d96:	6014      	str	r4, [r2, #0]
 8015d98:	b003      	add	sp, #12
 8015d9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015d9e:	f000 bb2d 	b.w	80163fc <__malloc_unlock>
 8015da2:	42a3      	cmp	r3, r4
 8015da4:	d90b      	bls.n	8015dbe <_free_r+0x4e>
 8015da6:	6821      	ldr	r1, [r4, #0]
 8015da8:	1862      	adds	r2, r4, r1
 8015daa:	4293      	cmp	r3, r2
 8015dac:	bf04      	itt	eq
 8015dae:	681a      	ldreq	r2, [r3, #0]
 8015db0:	685b      	ldreq	r3, [r3, #4]
 8015db2:	6063      	str	r3, [r4, #4]
 8015db4:	bf04      	itt	eq
 8015db6:	1852      	addeq	r2, r2, r1
 8015db8:	6022      	streq	r2, [r4, #0]
 8015dba:	602c      	str	r4, [r5, #0]
 8015dbc:	e7ec      	b.n	8015d98 <_free_r+0x28>
 8015dbe:	461a      	mov	r2, r3
 8015dc0:	685b      	ldr	r3, [r3, #4]
 8015dc2:	b10b      	cbz	r3, 8015dc8 <_free_r+0x58>
 8015dc4:	42a3      	cmp	r3, r4
 8015dc6:	d9fa      	bls.n	8015dbe <_free_r+0x4e>
 8015dc8:	6811      	ldr	r1, [r2, #0]
 8015dca:	1855      	adds	r5, r2, r1
 8015dcc:	42a5      	cmp	r5, r4
 8015dce:	d10b      	bne.n	8015de8 <_free_r+0x78>
 8015dd0:	6824      	ldr	r4, [r4, #0]
 8015dd2:	4421      	add	r1, r4
 8015dd4:	1854      	adds	r4, r2, r1
 8015dd6:	42a3      	cmp	r3, r4
 8015dd8:	6011      	str	r1, [r2, #0]
 8015dda:	d1dd      	bne.n	8015d98 <_free_r+0x28>
 8015ddc:	681c      	ldr	r4, [r3, #0]
 8015dde:	685b      	ldr	r3, [r3, #4]
 8015de0:	6053      	str	r3, [r2, #4]
 8015de2:	4421      	add	r1, r4
 8015de4:	6011      	str	r1, [r2, #0]
 8015de6:	e7d7      	b.n	8015d98 <_free_r+0x28>
 8015de8:	d902      	bls.n	8015df0 <_free_r+0x80>
 8015dea:	230c      	movs	r3, #12
 8015dec:	6003      	str	r3, [r0, #0]
 8015dee:	e7d3      	b.n	8015d98 <_free_r+0x28>
 8015df0:	6825      	ldr	r5, [r4, #0]
 8015df2:	1961      	adds	r1, r4, r5
 8015df4:	428b      	cmp	r3, r1
 8015df6:	bf04      	itt	eq
 8015df8:	6819      	ldreq	r1, [r3, #0]
 8015dfa:	685b      	ldreq	r3, [r3, #4]
 8015dfc:	6063      	str	r3, [r4, #4]
 8015dfe:	bf04      	itt	eq
 8015e00:	1949      	addeq	r1, r1, r5
 8015e02:	6021      	streq	r1, [r4, #0]
 8015e04:	6054      	str	r4, [r2, #4]
 8015e06:	e7c7      	b.n	8015d98 <_free_r+0x28>
 8015e08:	b003      	add	sp, #12
 8015e0a:	bd30      	pop	{r4, r5, pc}
 8015e0c:	200028b8 	.word	0x200028b8

08015e10 <_malloc_r>:
 8015e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e12:	1ccd      	adds	r5, r1, #3
 8015e14:	f025 0503 	bic.w	r5, r5, #3
 8015e18:	3508      	adds	r5, #8
 8015e1a:	2d0c      	cmp	r5, #12
 8015e1c:	bf38      	it	cc
 8015e1e:	250c      	movcc	r5, #12
 8015e20:	2d00      	cmp	r5, #0
 8015e22:	4606      	mov	r6, r0
 8015e24:	db01      	blt.n	8015e2a <_malloc_r+0x1a>
 8015e26:	42a9      	cmp	r1, r5
 8015e28:	d903      	bls.n	8015e32 <_malloc_r+0x22>
 8015e2a:	230c      	movs	r3, #12
 8015e2c:	6033      	str	r3, [r6, #0]
 8015e2e:	2000      	movs	r0, #0
 8015e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e32:	f000 fadd 	bl	80163f0 <__malloc_lock>
 8015e36:	4921      	ldr	r1, [pc, #132]	; (8015ebc <_malloc_r+0xac>)
 8015e38:	680a      	ldr	r2, [r1, #0]
 8015e3a:	4614      	mov	r4, r2
 8015e3c:	b99c      	cbnz	r4, 8015e66 <_malloc_r+0x56>
 8015e3e:	4f20      	ldr	r7, [pc, #128]	; (8015ec0 <_malloc_r+0xb0>)
 8015e40:	683b      	ldr	r3, [r7, #0]
 8015e42:	b923      	cbnz	r3, 8015e4e <_malloc_r+0x3e>
 8015e44:	4621      	mov	r1, r4
 8015e46:	4630      	mov	r0, r6
 8015e48:	f000 f9c6 	bl	80161d8 <_sbrk_r>
 8015e4c:	6038      	str	r0, [r7, #0]
 8015e4e:	4629      	mov	r1, r5
 8015e50:	4630      	mov	r0, r6
 8015e52:	f000 f9c1 	bl	80161d8 <_sbrk_r>
 8015e56:	1c43      	adds	r3, r0, #1
 8015e58:	d123      	bne.n	8015ea2 <_malloc_r+0x92>
 8015e5a:	230c      	movs	r3, #12
 8015e5c:	6033      	str	r3, [r6, #0]
 8015e5e:	4630      	mov	r0, r6
 8015e60:	f000 facc 	bl	80163fc <__malloc_unlock>
 8015e64:	e7e3      	b.n	8015e2e <_malloc_r+0x1e>
 8015e66:	6823      	ldr	r3, [r4, #0]
 8015e68:	1b5b      	subs	r3, r3, r5
 8015e6a:	d417      	bmi.n	8015e9c <_malloc_r+0x8c>
 8015e6c:	2b0b      	cmp	r3, #11
 8015e6e:	d903      	bls.n	8015e78 <_malloc_r+0x68>
 8015e70:	6023      	str	r3, [r4, #0]
 8015e72:	441c      	add	r4, r3
 8015e74:	6025      	str	r5, [r4, #0]
 8015e76:	e004      	b.n	8015e82 <_malloc_r+0x72>
 8015e78:	6863      	ldr	r3, [r4, #4]
 8015e7a:	42a2      	cmp	r2, r4
 8015e7c:	bf0c      	ite	eq
 8015e7e:	600b      	streq	r3, [r1, #0]
 8015e80:	6053      	strne	r3, [r2, #4]
 8015e82:	4630      	mov	r0, r6
 8015e84:	f000 faba 	bl	80163fc <__malloc_unlock>
 8015e88:	f104 000b 	add.w	r0, r4, #11
 8015e8c:	1d23      	adds	r3, r4, #4
 8015e8e:	f020 0007 	bic.w	r0, r0, #7
 8015e92:	1ac2      	subs	r2, r0, r3
 8015e94:	d0cc      	beq.n	8015e30 <_malloc_r+0x20>
 8015e96:	1a1b      	subs	r3, r3, r0
 8015e98:	50a3      	str	r3, [r4, r2]
 8015e9a:	e7c9      	b.n	8015e30 <_malloc_r+0x20>
 8015e9c:	4622      	mov	r2, r4
 8015e9e:	6864      	ldr	r4, [r4, #4]
 8015ea0:	e7cc      	b.n	8015e3c <_malloc_r+0x2c>
 8015ea2:	1cc4      	adds	r4, r0, #3
 8015ea4:	f024 0403 	bic.w	r4, r4, #3
 8015ea8:	42a0      	cmp	r0, r4
 8015eaa:	d0e3      	beq.n	8015e74 <_malloc_r+0x64>
 8015eac:	1a21      	subs	r1, r4, r0
 8015eae:	4630      	mov	r0, r6
 8015eb0:	f000 f992 	bl	80161d8 <_sbrk_r>
 8015eb4:	3001      	adds	r0, #1
 8015eb6:	d1dd      	bne.n	8015e74 <_malloc_r+0x64>
 8015eb8:	e7cf      	b.n	8015e5a <_malloc_r+0x4a>
 8015eba:	bf00      	nop
 8015ebc:	200028b8 	.word	0x200028b8
 8015ec0:	200028bc 	.word	0x200028bc

08015ec4 <_realloc_r>:
 8015ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ec6:	4607      	mov	r7, r0
 8015ec8:	4614      	mov	r4, r2
 8015eca:	460e      	mov	r6, r1
 8015ecc:	b921      	cbnz	r1, 8015ed8 <_realloc_r+0x14>
 8015ece:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015ed2:	4611      	mov	r1, r2
 8015ed4:	f7ff bf9c 	b.w	8015e10 <_malloc_r>
 8015ed8:	b922      	cbnz	r2, 8015ee4 <_realloc_r+0x20>
 8015eda:	f7ff ff49 	bl	8015d70 <_free_r>
 8015ede:	4625      	mov	r5, r4
 8015ee0:	4628      	mov	r0, r5
 8015ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ee4:	f000 fa90 	bl	8016408 <_malloc_usable_size_r>
 8015ee8:	42a0      	cmp	r0, r4
 8015eea:	d20f      	bcs.n	8015f0c <_realloc_r+0x48>
 8015eec:	4621      	mov	r1, r4
 8015eee:	4638      	mov	r0, r7
 8015ef0:	f7ff ff8e 	bl	8015e10 <_malloc_r>
 8015ef4:	4605      	mov	r5, r0
 8015ef6:	2800      	cmp	r0, #0
 8015ef8:	d0f2      	beq.n	8015ee0 <_realloc_r+0x1c>
 8015efa:	4631      	mov	r1, r6
 8015efc:	4622      	mov	r2, r4
 8015efe:	f7fb fe99 	bl	8011c34 <memcpy>
 8015f02:	4631      	mov	r1, r6
 8015f04:	4638      	mov	r0, r7
 8015f06:	f7ff ff33 	bl	8015d70 <_free_r>
 8015f0a:	e7e9      	b.n	8015ee0 <_realloc_r+0x1c>
 8015f0c:	4635      	mov	r5, r6
 8015f0e:	e7e7      	b.n	8015ee0 <_realloc_r+0x1c>

08015f10 <__ssputs_r>:
 8015f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f14:	688e      	ldr	r6, [r1, #8]
 8015f16:	429e      	cmp	r6, r3
 8015f18:	4682      	mov	sl, r0
 8015f1a:	460c      	mov	r4, r1
 8015f1c:	4690      	mov	r8, r2
 8015f1e:	461f      	mov	r7, r3
 8015f20:	d838      	bhi.n	8015f94 <__ssputs_r+0x84>
 8015f22:	898a      	ldrh	r2, [r1, #12]
 8015f24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015f28:	d032      	beq.n	8015f90 <__ssputs_r+0x80>
 8015f2a:	6825      	ldr	r5, [r4, #0]
 8015f2c:	6909      	ldr	r1, [r1, #16]
 8015f2e:	eba5 0901 	sub.w	r9, r5, r1
 8015f32:	6965      	ldr	r5, [r4, #20]
 8015f34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015f38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015f3c:	3301      	adds	r3, #1
 8015f3e:	444b      	add	r3, r9
 8015f40:	106d      	asrs	r5, r5, #1
 8015f42:	429d      	cmp	r5, r3
 8015f44:	bf38      	it	cc
 8015f46:	461d      	movcc	r5, r3
 8015f48:	0553      	lsls	r3, r2, #21
 8015f4a:	d531      	bpl.n	8015fb0 <__ssputs_r+0xa0>
 8015f4c:	4629      	mov	r1, r5
 8015f4e:	f7ff ff5f 	bl	8015e10 <_malloc_r>
 8015f52:	4606      	mov	r6, r0
 8015f54:	b950      	cbnz	r0, 8015f6c <__ssputs_r+0x5c>
 8015f56:	230c      	movs	r3, #12
 8015f58:	f8ca 3000 	str.w	r3, [sl]
 8015f5c:	89a3      	ldrh	r3, [r4, #12]
 8015f5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015f62:	81a3      	strh	r3, [r4, #12]
 8015f64:	f04f 30ff 	mov.w	r0, #4294967295
 8015f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f6c:	6921      	ldr	r1, [r4, #16]
 8015f6e:	464a      	mov	r2, r9
 8015f70:	f7fb fe60 	bl	8011c34 <memcpy>
 8015f74:	89a3      	ldrh	r3, [r4, #12]
 8015f76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015f7e:	81a3      	strh	r3, [r4, #12]
 8015f80:	6126      	str	r6, [r4, #16]
 8015f82:	6165      	str	r5, [r4, #20]
 8015f84:	444e      	add	r6, r9
 8015f86:	eba5 0509 	sub.w	r5, r5, r9
 8015f8a:	6026      	str	r6, [r4, #0]
 8015f8c:	60a5      	str	r5, [r4, #8]
 8015f8e:	463e      	mov	r6, r7
 8015f90:	42be      	cmp	r6, r7
 8015f92:	d900      	bls.n	8015f96 <__ssputs_r+0x86>
 8015f94:	463e      	mov	r6, r7
 8015f96:	4632      	mov	r2, r6
 8015f98:	6820      	ldr	r0, [r4, #0]
 8015f9a:	4641      	mov	r1, r8
 8015f9c:	f7ff fa04 	bl	80153a8 <memmove>
 8015fa0:	68a3      	ldr	r3, [r4, #8]
 8015fa2:	6822      	ldr	r2, [r4, #0]
 8015fa4:	1b9b      	subs	r3, r3, r6
 8015fa6:	4432      	add	r2, r6
 8015fa8:	60a3      	str	r3, [r4, #8]
 8015faa:	6022      	str	r2, [r4, #0]
 8015fac:	2000      	movs	r0, #0
 8015fae:	e7db      	b.n	8015f68 <__ssputs_r+0x58>
 8015fb0:	462a      	mov	r2, r5
 8015fb2:	f7ff ff87 	bl	8015ec4 <_realloc_r>
 8015fb6:	4606      	mov	r6, r0
 8015fb8:	2800      	cmp	r0, #0
 8015fba:	d1e1      	bne.n	8015f80 <__ssputs_r+0x70>
 8015fbc:	6921      	ldr	r1, [r4, #16]
 8015fbe:	4650      	mov	r0, sl
 8015fc0:	f7ff fed6 	bl	8015d70 <_free_r>
 8015fc4:	e7c7      	b.n	8015f56 <__ssputs_r+0x46>
	...

08015fc8 <_svfiprintf_r>:
 8015fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fcc:	4698      	mov	r8, r3
 8015fce:	898b      	ldrh	r3, [r1, #12]
 8015fd0:	061b      	lsls	r3, r3, #24
 8015fd2:	b09d      	sub	sp, #116	; 0x74
 8015fd4:	4607      	mov	r7, r0
 8015fd6:	460d      	mov	r5, r1
 8015fd8:	4614      	mov	r4, r2
 8015fda:	d50e      	bpl.n	8015ffa <_svfiprintf_r+0x32>
 8015fdc:	690b      	ldr	r3, [r1, #16]
 8015fde:	b963      	cbnz	r3, 8015ffa <_svfiprintf_r+0x32>
 8015fe0:	2140      	movs	r1, #64	; 0x40
 8015fe2:	f7ff ff15 	bl	8015e10 <_malloc_r>
 8015fe6:	6028      	str	r0, [r5, #0]
 8015fe8:	6128      	str	r0, [r5, #16]
 8015fea:	b920      	cbnz	r0, 8015ff6 <_svfiprintf_r+0x2e>
 8015fec:	230c      	movs	r3, #12
 8015fee:	603b      	str	r3, [r7, #0]
 8015ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8015ff4:	e0d1      	b.n	801619a <_svfiprintf_r+0x1d2>
 8015ff6:	2340      	movs	r3, #64	; 0x40
 8015ff8:	616b      	str	r3, [r5, #20]
 8015ffa:	2300      	movs	r3, #0
 8015ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8015ffe:	2320      	movs	r3, #32
 8016000:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016004:	f8cd 800c 	str.w	r8, [sp, #12]
 8016008:	2330      	movs	r3, #48	; 0x30
 801600a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80161b4 <_svfiprintf_r+0x1ec>
 801600e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016012:	f04f 0901 	mov.w	r9, #1
 8016016:	4623      	mov	r3, r4
 8016018:	469a      	mov	sl, r3
 801601a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801601e:	b10a      	cbz	r2, 8016024 <_svfiprintf_r+0x5c>
 8016020:	2a25      	cmp	r2, #37	; 0x25
 8016022:	d1f9      	bne.n	8016018 <_svfiprintf_r+0x50>
 8016024:	ebba 0b04 	subs.w	fp, sl, r4
 8016028:	d00b      	beq.n	8016042 <_svfiprintf_r+0x7a>
 801602a:	465b      	mov	r3, fp
 801602c:	4622      	mov	r2, r4
 801602e:	4629      	mov	r1, r5
 8016030:	4638      	mov	r0, r7
 8016032:	f7ff ff6d 	bl	8015f10 <__ssputs_r>
 8016036:	3001      	adds	r0, #1
 8016038:	f000 80aa 	beq.w	8016190 <_svfiprintf_r+0x1c8>
 801603c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801603e:	445a      	add	r2, fp
 8016040:	9209      	str	r2, [sp, #36]	; 0x24
 8016042:	f89a 3000 	ldrb.w	r3, [sl]
 8016046:	2b00      	cmp	r3, #0
 8016048:	f000 80a2 	beq.w	8016190 <_svfiprintf_r+0x1c8>
 801604c:	2300      	movs	r3, #0
 801604e:	f04f 32ff 	mov.w	r2, #4294967295
 8016052:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016056:	f10a 0a01 	add.w	sl, sl, #1
 801605a:	9304      	str	r3, [sp, #16]
 801605c:	9307      	str	r3, [sp, #28]
 801605e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016062:	931a      	str	r3, [sp, #104]	; 0x68
 8016064:	4654      	mov	r4, sl
 8016066:	2205      	movs	r2, #5
 8016068:	f814 1b01 	ldrb.w	r1, [r4], #1
 801606c:	4851      	ldr	r0, [pc, #324]	; (80161b4 <_svfiprintf_r+0x1ec>)
 801606e:	f7ea f8cf 	bl	8000210 <memchr>
 8016072:	9a04      	ldr	r2, [sp, #16]
 8016074:	b9d8      	cbnz	r0, 80160ae <_svfiprintf_r+0xe6>
 8016076:	06d0      	lsls	r0, r2, #27
 8016078:	bf44      	itt	mi
 801607a:	2320      	movmi	r3, #32
 801607c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016080:	0711      	lsls	r1, r2, #28
 8016082:	bf44      	itt	mi
 8016084:	232b      	movmi	r3, #43	; 0x2b
 8016086:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801608a:	f89a 3000 	ldrb.w	r3, [sl]
 801608e:	2b2a      	cmp	r3, #42	; 0x2a
 8016090:	d015      	beq.n	80160be <_svfiprintf_r+0xf6>
 8016092:	9a07      	ldr	r2, [sp, #28]
 8016094:	4654      	mov	r4, sl
 8016096:	2000      	movs	r0, #0
 8016098:	f04f 0c0a 	mov.w	ip, #10
 801609c:	4621      	mov	r1, r4
 801609e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80160a2:	3b30      	subs	r3, #48	; 0x30
 80160a4:	2b09      	cmp	r3, #9
 80160a6:	d94e      	bls.n	8016146 <_svfiprintf_r+0x17e>
 80160a8:	b1b0      	cbz	r0, 80160d8 <_svfiprintf_r+0x110>
 80160aa:	9207      	str	r2, [sp, #28]
 80160ac:	e014      	b.n	80160d8 <_svfiprintf_r+0x110>
 80160ae:	eba0 0308 	sub.w	r3, r0, r8
 80160b2:	fa09 f303 	lsl.w	r3, r9, r3
 80160b6:	4313      	orrs	r3, r2
 80160b8:	9304      	str	r3, [sp, #16]
 80160ba:	46a2      	mov	sl, r4
 80160bc:	e7d2      	b.n	8016064 <_svfiprintf_r+0x9c>
 80160be:	9b03      	ldr	r3, [sp, #12]
 80160c0:	1d19      	adds	r1, r3, #4
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	9103      	str	r1, [sp, #12]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	bfbb      	ittet	lt
 80160ca:	425b      	neglt	r3, r3
 80160cc:	f042 0202 	orrlt.w	r2, r2, #2
 80160d0:	9307      	strge	r3, [sp, #28]
 80160d2:	9307      	strlt	r3, [sp, #28]
 80160d4:	bfb8      	it	lt
 80160d6:	9204      	strlt	r2, [sp, #16]
 80160d8:	7823      	ldrb	r3, [r4, #0]
 80160da:	2b2e      	cmp	r3, #46	; 0x2e
 80160dc:	d10c      	bne.n	80160f8 <_svfiprintf_r+0x130>
 80160de:	7863      	ldrb	r3, [r4, #1]
 80160e0:	2b2a      	cmp	r3, #42	; 0x2a
 80160e2:	d135      	bne.n	8016150 <_svfiprintf_r+0x188>
 80160e4:	9b03      	ldr	r3, [sp, #12]
 80160e6:	1d1a      	adds	r2, r3, #4
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	9203      	str	r2, [sp, #12]
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	bfb8      	it	lt
 80160f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80160f4:	3402      	adds	r4, #2
 80160f6:	9305      	str	r3, [sp, #20]
 80160f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80161c4 <_svfiprintf_r+0x1fc>
 80160fc:	7821      	ldrb	r1, [r4, #0]
 80160fe:	2203      	movs	r2, #3
 8016100:	4650      	mov	r0, sl
 8016102:	f7ea f885 	bl	8000210 <memchr>
 8016106:	b140      	cbz	r0, 801611a <_svfiprintf_r+0x152>
 8016108:	2340      	movs	r3, #64	; 0x40
 801610a:	eba0 000a 	sub.w	r0, r0, sl
 801610e:	fa03 f000 	lsl.w	r0, r3, r0
 8016112:	9b04      	ldr	r3, [sp, #16]
 8016114:	4303      	orrs	r3, r0
 8016116:	3401      	adds	r4, #1
 8016118:	9304      	str	r3, [sp, #16]
 801611a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801611e:	4826      	ldr	r0, [pc, #152]	; (80161b8 <_svfiprintf_r+0x1f0>)
 8016120:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016124:	2206      	movs	r2, #6
 8016126:	f7ea f873 	bl	8000210 <memchr>
 801612a:	2800      	cmp	r0, #0
 801612c:	d038      	beq.n	80161a0 <_svfiprintf_r+0x1d8>
 801612e:	4b23      	ldr	r3, [pc, #140]	; (80161bc <_svfiprintf_r+0x1f4>)
 8016130:	bb1b      	cbnz	r3, 801617a <_svfiprintf_r+0x1b2>
 8016132:	9b03      	ldr	r3, [sp, #12]
 8016134:	3307      	adds	r3, #7
 8016136:	f023 0307 	bic.w	r3, r3, #7
 801613a:	3308      	adds	r3, #8
 801613c:	9303      	str	r3, [sp, #12]
 801613e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016140:	4433      	add	r3, r6
 8016142:	9309      	str	r3, [sp, #36]	; 0x24
 8016144:	e767      	b.n	8016016 <_svfiprintf_r+0x4e>
 8016146:	fb0c 3202 	mla	r2, ip, r2, r3
 801614a:	460c      	mov	r4, r1
 801614c:	2001      	movs	r0, #1
 801614e:	e7a5      	b.n	801609c <_svfiprintf_r+0xd4>
 8016150:	2300      	movs	r3, #0
 8016152:	3401      	adds	r4, #1
 8016154:	9305      	str	r3, [sp, #20]
 8016156:	4619      	mov	r1, r3
 8016158:	f04f 0c0a 	mov.w	ip, #10
 801615c:	4620      	mov	r0, r4
 801615e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016162:	3a30      	subs	r2, #48	; 0x30
 8016164:	2a09      	cmp	r2, #9
 8016166:	d903      	bls.n	8016170 <_svfiprintf_r+0x1a8>
 8016168:	2b00      	cmp	r3, #0
 801616a:	d0c5      	beq.n	80160f8 <_svfiprintf_r+0x130>
 801616c:	9105      	str	r1, [sp, #20]
 801616e:	e7c3      	b.n	80160f8 <_svfiprintf_r+0x130>
 8016170:	fb0c 2101 	mla	r1, ip, r1, r2
 8016174:	4604      	mov	r4, r0
 8016176:	2301      	movs	r3, #1
 8016178:	e7f0      	b.n	801615c <_svfiprintf_r+0x194>
 801617a:	ab03      	add	r3, sp, #12
 801617c:	9300      	str	r3, [sp, #0]
 801617e:	462a      	mov	r2, r5
 8016180:	4b0f      	ldr	r3, [pc, #60]	; (80161c0 <_svfiprintf_r+0x1f8>)
 8016182:	a904      	add	r1, sp, #16
 8016184:	4638      	mov	r0, r7
 8016186:	f7fb ff65 	bl	8012054 <_printf_float>
 801618a:	1c42      	adds	r2, r0, #1
 801618c:	4606      	mov	r6, r0
 801618e:	d1d6      	bne.n	801613e <_svfiprintf_r+0x176>
 8016190:	89ab      	ldrh	r3, [r5, #12]
 8016192:	065b      	lsls	r3, r3, #25
 8016194:	f53f af2c 	bmi.w	8015ff0 <_svfiprintf_r+0x28>
 8016198:	9809      	ldr	r0, [sp, #36]	; 0x24
 801619a:	b01d      	add	sp, #116	; 0x74
 801619c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161a0:	ab03      	add	r3, sp, #12
 80161a2:	9300      	str	r3, [sp, #0]
 80161a4:	462a      	mov	r2, r5
 80161a6:	4b06      	ldr	r3, [pc, #24]	; (80161c0 <_svfiprintf_r+0x1f8>)
 80161a8:	a904      	add	r1, sp, #16
 80161aa:	4638      	mov	r0, r7
 80161ac:	f7fc f9f6 	bl	801259c <_printf_i>
 80161b0:	e7eb      	b.n	801618a <_svfiprintf_r+0x1c2>
 80161b2:	bf00      	nop
 80161b4:	08018280 	.word	0x08018280
 80161b8:	0801828a 	.word	0x0801828a
 80161bc:	08012055 	.word	0x08012055
 80161c0:	08015f11 	.word	0x08015f11
 80161c4:	08018286 	.word	0x08018286

080161c8 <nan>:
 80161c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80161d0 <nan+0x8>
 80161cc:	4770      	bx	lr
 80161ce:	bf00      	nop
 80161d0:	00000000 	.word	0x00000000
 80161d4:	7ff80000 	.word	0x7ff80000

080161d8 <_sbrk_r>:
 80161d8:	b538      	push	{r3, r4, r5, lr}
 80161da:	4d06      	ldr	r5, [pc, #24]	; (80161f4 <_sbrk_r+0x1c>)
 80161dc:	2300      	movs	r3, #0
 80161de:	4604      	mov	r4, r0
 80161e0:	4608      	mov	r0, r1
 80161e2:	602b      	str	r3, [r5, #0]
 80161e4:	f7ee fc56 	bl	8004a94 <_sbrk>
 80161e8:	1c43      	adds	r3, r0, #1
 80161ea:	d102      	bne.n	80161f2 <_sbrk_r+0x1a>
 80161ec:	682b      	ldr	r3, [r5, #0]
 80161ee:	b103      	cbz	r3, 80161f2 <_sbrk_r+0x1a>
 80161f0:	6023      	str	r3, [r4, #0]
 80161f2:	bd38      	pop	{r3, r4, r5, pc}
 80161f4:	20004bf4 	.word	0x20004bf4

080161f8 <_raise_r>:
 80161f8:	291f      	cmp	r1, #31
 80161fa:	b538      	push	{r3, r4, r5, lr}
 80161fc:	4604      	mov	r4, r0
 80161fe:	460d      	mov	r5, r1
 8016200:	d904      	bls.n	801620c <_raise_r+0x14>
 8016202:	2316      	movs	r3, #22
 8016204:	6003      	str	r3, [r0, #0]
 8016206:	f04f 30ff 	mov.w	r0, #4294967295
 801620a:	bd38      	pop	{r3, r4, r5, pc}
 801620c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801620e:	b112      	cbz	r2, 8016216 <_raise_r+0x1e>
 8016210:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016214:	b94b      	cbnz	r3, 801622a <_raise_r+0x32>
 8016216:	4620      	mov	r0, r4
 8016218:	f000 f830 	bl	801627c <_getpid_r>
 801621c:	462a      	mov	r2, r5
 801621e:	4601      	mov	r1, r0
 8016220:	4620      	mov	r0, r4
 8016222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016226:	f000 b817 	b.w	8016258 <_kill_r>
 801622a:	2b01      	cmp	r3, #1
 801622c:	d00a      	beq.n	8016244 <_raise_r+0x4c>
 801622e:	1c59      	adds	r1, r3, #1
 8016230:	d103      	bne.n	801623a <_raise_r+0x42>
 8016232:	2316      	movs	r3, #22
 8016234:	6003      	str	r3, [r0, #0]
 8016236:	2001      	movs	r0, #1
 8016238:	e7e7      	b.n	801620a <_raise_r+0x12>
 801623a:	2400      	movs	r4, #0
 801623c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016240:	4628      	mov	r0, r5
 8016242:	4798      	blx	r3
 8016244:	2000      	movs	r0, #0
 8016246:	e7e0      	b.n	801620a <_raise_r+0x12>

08016248 <raise>:
 8016248:	4b02      	ldr	r3, [pc, #8]	; (8016254 <raise+0xc>)
 801624a:	4601      	mov	r1, r0
 801624c:	6818      	ldr	r0, [r3, #0]
 801624e:	f7ff bfd3 	b.w	80161f8 <_raise_r>
 8016252:	bf00      	nop
 8016254:	2000005c 	.word	0x2000005c

08016258 <_kill_r>:
 8016258:	b538      	push	{r3, r4, r5, lr}
 801625a:	4d07      	ldr	r5, [pc, #28]	; (8016278 <_kill_r+0x20>)
 801625c:	2300      	movs	r3, #0
 801625e:	4604      	mov	r4, r0
 8016260:	4608      	mov	r0, r1
 8016262:	4611      	mov	r1, r2
 8016264:	602b      	str	r3, [r5, #0]
 8016266:	f7ee fba9 	bl	80049bc <_kill>
 801626a:	1c43      	adds	r3, r0, #1
 801626c:	d102      	bne.n	8016274 <_kill_r+0x1c>
 801626e:	682b      	ldr	r3, [r5, #0]
 8016270:	b103      	cbz	r3, 8016274 <_kill_r+0x1c>
 8016272:	6023      	str	r3, [r4, #0]
 8016274:	bd38      	pop	{r3, r4, r5, pc}
 8016276:	bf00      	nop
 8016278:	20004bf4 	.word	0x20004bf4

0801627c <_getpid_r>:
 801627c:	f7ee bb96 	b.w	80049ac <_getpid>

08016280 <__sread>:
 8016280:	b510      	push	{r4, lr}
 8016282:	460c      	mov	r4, r1
 8016284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016288:	f000 f8c6 	bl	8016418 <_read_r>
 801628c:	2800      	cmp	r0, #0
 801628e:	bfab      	itete	ge
 8016290:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016292:	89a3      	ldrhlt	r3, [r4, #12]
 8016294:	181b      	addge	r3, r3, r0
 8016296:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801629a:	bfac      	ite	ge
 801629c:	6563      	strge	r3, [r4, #84]	; 0x54
 801629e:	81a3      	strhlt	r3, [r4, #12]
 80162a0:	bd10      	pop	{r4, pc}

080162a2 <__swrite>:
 80162a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162a6:	461f      	mov	r7, r3
 80162a8:	898b      	ldrh	r3, [r1, #12]
 80162aa:	05db      	lsls	r3, r3, #23
 80162ac:	4605      	mov	r5, r0
 80162ae:	460c      	mov	r4, r1
 80162b0:	4616      	mov	r6, r2
 80162b2:	d505      	bpl.n	80162c0 <__swrite+0x1e>
 80162b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80162b8:	2302      	movs	r3, #2
 80162ba:	2200      	movs	r2, #0
 80162bc:	f000 f886 	bl	80163cc <_lseek_r>
 80162c0:	89a3      	ldrh	r3, [r4, #12]
 80162c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80162c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80162ca:	81a3      	strh	r3, [r4, #12]
 80162cc:	4632      	mov	r2, r6
 80162ce:	463b      	mov	r3, r7
 80162d0:	4628      	mov	r0, r5
 80162d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80162d6:	f000 b835 	b.w	8016344 <_write_r>

080162da <__sseek>:
 80162da:	b510      	push	{r4, lr}
 80162dc:	460c      	mov	r4, r1
 80162de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80162e2:	f000 f873 	bl	80163cc <_lseek_r>
 80162e6:	1c43      	adds	r3, r0, #1
 80162e8:	89a3      	ldrh	r3, [r4, #12]
 80162ea:	bf15      	itete	ne
 80162ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80162ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80162f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80162f6:	81a3      	strheq	r3, [r4, #12]
 80162f8:	bf18      	it	ne
 80162fa:	81a3      	strhne	r3, [r4, #12]
 80162fc:	bd10      	pop	{r4, pc}

080162fe <__sclose>:
 80162fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016302:	f000 b831 	b.w	8016368 <_close_r>

08016306 <strncmp>:
 8016306:	b510      	push	{r4, lr}
 8016308:	b16a      	cbz	r2, 8016326 <strncmp+0x20>
 801630a:	3901      	subs	r1, #1
 801630c:	1884      	adds	r4, r0, r2
 801630e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016312:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016316:	4293      	cmp	r3, r2
 8016318:	d103      	bne.n	8016322 <strncmp+0x1c>
 801631a:	42a0      	cmp	r0, r4
 801631c:	d001      	beq.n	8016322 <strncmp+0x1c>
 801631e:	2b00      	cmp	r3, #0
 8016320:	d1f5      	bne.n	801630e <strncmp+0x8>
 8016322:	1a98      	subs	r0, r3, r2
 8016324:	bd10      	pop	{r4, pc}
 8016326:	4610      	mov	r0, r2
 8016328:	e7fc      	b.n	8016324 <strncmp+0x1e>

0801632a <__ascii_wctomb>:
 801632a:	b149      	cbz	r1, 8016340 <__ascii_wctomb+0x16>
 801632c:	2aff      	cmp	r2, #255	; 0xff
 801632e:	bf85      	ittet	hi
 8016330:	238a      	movhi	r3, #138	; 0x8a
 8016332:	6003      	strhi	r3, [r0, #0]
 8016334:	700a      	strbls	r2, [r1, #0]
 8016336:	f04f 30ff 	movhi.w	r0, #4294967295
 801633a:	bf98      	it	ls
 801633c:	2001      	movls	r0, #1
 801633e:	4770      	bx	lr
 8016340:	4608      	mov	r0, r1
 8016342:	4770      	bx	lr

08016344 <_write_r>:
 8016344:	b538      	push	{r3, r4, r5, lr}
 8016346:	4d07      	ldr	r5, [pc, #28]	; (8016364 <_write_r+0x20>)
 8016348:	4604      	mov	r4, r0
 801634a:	4608      	mov	r0, r1
 801634c:	4611      	mov	r1, r2
 801634e:	2200      	movs	r2, #0
 8016350:	602a      	str	r2, [r5, #0]
 8016352:	461a      	mov	r2, r3
 8016354:	f7ea fe62 	bl	800101c <_write>
 8016358:	1c43      	adds	r3, r0, #1
 801635a:	d102      	bne.n	8016362 <_write_r+0x1e>
 801635c:	682b      	ldr	r3, [r5, #0]
 801635e:	b103      	cbz	r3, 8016362 <_write_r+0x1e>
 8016360:	6023      	str	r3, [r4, #0]
 8016362:	bd38      	pop	{r3, r4, r5, pc}
 8016364:	20004bf4 	.word	0x20004bf4

08016368 <_close_r>:
 8016368:	b538      	push	{r3, r4, r5, lr}
 801636a:	4d06      	ldr	r5, [pc, #24]	; (8016384 <_close_r+0x1c>)
 801636c:	2300      	movs	r3, #0
 801636e:	4604      	mov	r4, r0
 8016370:	4608      	mov	r0, r1
 8016372:	602b      	str	r3, [r5, #0]
 8016374:	f7ee fb59 	bl	8004a2a <_close>
 8016378:	1c43      	adds	r3, r0, #1
 801637a:	d102      	bne.n	8016382 <_close_r+0x1a>
 801637c:	682b      	ldr	r3, [r5, #0]
 801637e:	b103      	cbz	r3, 8016382 <_close_r+0x1a>
 8016380:	6023      	str	r3, [r4, #0]
 8016382:	bd38      	pop	{r3, r4, r5, pc}
 8016384:	20004bf4 	.word	0x20004bf4

08016388 <_fstat_r>:
 8016388:	b538      	push	{r3, r4, r5, lr}
 801638a:	4d07      	ldr	r5, [pc, #28]	; (80163a8 <_fstat_r+0x20>)
 801638c:	2300      	movs	r3, #0
 801638e:	4604      	mov	r4, r0
 8016390:	4608      	mov	r0, r1
 8016392:	4611      	mov	r1, r2
 8016394:	602b      	str	r3, [r5, #0]
 8016396:	f7ee fb54 	bl	8004a42 <_fstat>
 801639a:	1c43      	adds	r3, r0, #1
 801639c:	d102      	bne.n	80163a4 <_fstat_r+0x1c>
 801639e:	682b      	ldr	r3, [r5, #0]
 80163a0:	b103      	cbz	r3, 80163a4 <_fstat_r+0x1c>
 80163a2:	6023      	str	r3, [r4, #0]
 80163a4:	bd38      	pop	{r3, r4, r5, pc}
 80163a6:	bf00      	nop
 80163a8:	20004bf4 	.word	0x20004bf4

080163ac <_isatty_r>:
 80163ac:	b538      	push	{r3, r4, r5, lr}
 80163ae:	4d06      	ldr	r5, [pc, #24]	; (80163c8 <_isatty_r+0x1c>)
 80163b0:	2300      	movs	r3, #0
 80163b2:	4604      	mov	r4, r0
 80163b4:	4608      	mov	r0, r1
 80163b6:	602b      	str	r3, [r5, #0]
 80163b8:	f7ee fb53 	bl	8004a62 <_isatty>
 80163bc:	1c43      	adds	r3, r0, #1
 80163be:	d102      	bne.n	80163c6 <_isatty_r+0x1a>
 80163c0:	682b      	ldr	r3, [r5, #0]
 80163c2:	b103      	cbz	r3, 80163c6 <_isatty_r+0x1a>
 80163c4:	6023      	str	r3, [r4, #0]
 80163c6:	bd38      	pop	{r3, r4, r5, pc}
 80163c8:	20004bf4 	.word	0x20004bf4

080163cc <_lseek_r>:
 80163cc:	b538      	push	{r3, r4, r5, lr}
 80163ce:	4d07      	ldr	r5, [pc, #28]	; (80163ec <_lseek_r+0x20>)
 80163d0:	4604      	mov	r4, r0
 80163d2:	4608      	mov	r0, r1
 80163d4:	4611      	mov	r1, r2
 80163d6:	2200      	movs	r2, #0
 80163d8:	602a      	str	r2, [r5, #0]
 80163da:	461a      	mov	r2, r3
 80163dc:	f7ee fb4c 	bl	8004a78 <_lseek>
 80163e0:	1c43      	adds	r3, r0, #1
 80163e2:	d102      	bne.n	80163ea <_lseek_r+0x1e>
 80163e4:	682b      	ldr	r3, [r5, #0]
 80163e6:	b103      	cbz	r3, 80163ea <_lseek_r+0x1e>
 80163e8:	6023      	str	r3, [r4, #0]
 80163ea:	bd38      	pop	{r3, r4, r5, pc}
 80163ec:	20004bf4 	.word	0x20004bf4

080163f0 <__malloc_lock>:
 80163f0:	4801      	ldr	r0, [pc, #4]	; (80163f8 <__malloc_lock+0x8>)
 80163f2:	f7fe bf58 	b.w	80152a6 <__retarget_lock_acquire_recursive>
 80163f6:	bf00      	nop
 80163f8:	20004bec 	.word	0x20004bec

080163fc <__malloc_unlock>:
 80163fc:	4801      	ldr	r0, [pc, #4]	; (8016404 <__malloc_unlock+0x8>)
 80163fe:	f7fe bf53 	b.w	80152a8 <__retarget_lock_release_recursive>
 8016402:	bf00      	nop
 8016404:	20004bec 	.word	0x20004bec

08016408 <_malloc_usable_size_r>:
 8016408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801640c:	1f18      	subs	r0, r3, #4
 801640e:	2b00      	cmp	r3, #0
 8016410:	bfbc      	itt	lt
 8016412:	580b      	ldrlt	r3, [r1, r0]
 8016414:	18c0      	addlt	r0, r0, r3
 8016416:	4770      	bx	lr

08016418 <_read_r>:
 8016418:	b538      	push	{r3, r4, r5, lr}
 801641a:	4d07      	ldr	r5, [pc, #28]	; (8016438 <_read_r+0x20>)
 801641c:	4604      	mov	r4, r0
 801641e:	4608      	mov	r0, r1
 8016420:	4611      	mov	r1, r2
 8016422:	2200      	movs	r2, #0
 8016424:	602a      	str	r2, [r5, #0]
 8016426:	461a      	mov	r2, r3
 8016428:	f7ee fae2 	bl	80049f0 <_read>
 801642c:	1c43      	adds	r3, r0, #1
 801642e:	d102      	bne.n	8016436 <_read_r+0x1e>
 8016430:	682b      	ldr	r3, [r5, #0]
 8016432:	b103      	cbz	r3, 8016436 <_read_r+0x1e>
 8016434:	6023      	str	r3, [r4, #0]
 8016436:	bd38      	pop	{r3, r4, r5, pc}
 8016438:	20004bf4 	.word	0x20004bf4
 801643c:	00000000 	.word	0x00000000

08016440 <exp>:
 8016440:	b538      	push	{r3, r4, r5, lr}
 8016442:	ed2d 8b02 	vpush	{d8}
 8016446:	ec55 4b10 	vmov	r4, r5, d0
 801644a:	f000 f975 	bl	8016738 <__ieee754_exp>
 801644e:	4b22      	ldr	r3, [pc, #136]	; (80164d8 <exp+0x98>)
 8016450:	eeb0 8a40 	vmov.f32	s16, s0
 8016454:	eef0 8a60 	vmov.f32	s17, s1
 8016458:	f993 3000 	ldrsb.w	r3, [r3]
 801645c:	3301      	adds	r3, #1
 801645e:	d012      	beq.n	8016486 <exp+0x46>
 8016460:	ec45 4b10 	vmov	d0, r4, r5
 8016464:	f001 fa7f 	bl	8017966 <finite>
 8016468:	b168      	cbz	r0, 8016486 <exp+0x46>
 801646a:	a313      	add	r3, pc, #76	; (adr r3, 80164b8 <exp+0x78>)
 801646c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016470:	4620      	mov	r0, r4
 8016472:	4629      	mov	r1, r5
 8016474:	f7ea fb68 	bl	8000b48 <__aeabi_dcmpgt>
 8016478:	b160      	cbz	r0, 8016494 <exp+0x54>
 801647a:	f7fb fb9f 	bl	8011bbc <__errno>
 801647e:	ed9f 8b10 	vldr	d8, [pc, #64]	; 80164c0 <exp+0x80>
 8016482:	2322      	movs	r3, #34	; 0x22
 8016484:	6003      	str	r3, [r0, #0]
 8016486:	eeb0 0a48 	vmov.f32	s0, s16
 801648a:	eef0 0a68 	vmov.f32	s1, s17
 801648e:	ecbd 8b02 	vpop	{d8}
 8016492:	bd38      	pop	{r3, r4, r5, pc}
 8016494:	a30c      	add	r3, pc, #48	; (adr r3, 80164c8 <exp+0x88>)
 8016496:	e9d3 2300 	ldrd	r2, r3, [r3]
 801649a:	4620      	mov	r0, r4
 801649c:	4629      	mov	r1, r5
 801649e:	f7ea fb35 	bl	8000b0c <__aeabi_dcmplt>
 80164a2:	2800      	cmp	r0, #0
 80164a4:	d0ef      	beq.n	8016486 <exp+0x46>
 80164a6:	f7fb fb89 	bl	8011bbc <__errno>
 80164aa:	2322      	movs	r3, #34	; 0x22
 80164ac:	ed9f 8b08 	vldr	d8, [pc, #32]	; 80164d0 <exp+0x90>
 80164b0:	6003      	str	r3, [r0, #0]
 80164b2:	e7e8      	b.n	8016486 <exp+0x46>
 80164b4:	f3af 8000 	nop.w
 80164b8:	fefa39ef 	.word	0xfefa39ef
 80164bc:	40862e42 	.word	0x40862e42
 80164c0:	00000000 	.word	0x00000000
 80164c4:	7ff00000 	.word	0x7ff00000
 80164c8:	d52d3051 	.word	0xd52d3051
 80164cc:	c0874910 	.word	0xc0874910
	...
 80164d8:	20000230 	.word	0x20000230
 80164dc:	00000000 	.word	0x00000000

080164e0 <log>:
 80164e0:	b538      	push	{r3, r4, r5, lr}
 80164e2:	ed2d 8b02 	vpush	{d8}
 80164e6:	ec55 4b10 	vmov	r4, r5, d0
 80164ea:	f000 faa1 	bl	8016a30 <__ieee754_log>
 80164ee:	4b1e      	ldr	r3, [pc, #120]	; (8016568 <log+0x88>)
 80164f0:	eeb0 8a40 	vmov.f32	s16, s0
 80164f4:	eef0 8a60 	vmov.f32	s17, s1
 80164f8:	f993 3000 	ldrsb.w	r3, [r3]
 80164fc:	3301      	adds	r3, #1
 80164fe:	d01a      	beq.n	8016536 <log+0x56>
 8016500:	4622      	mov	r2, r4
 8016502:	462b      	mov	r3, r5
 8016504:	4620      	mov	r0, r4
 8016506:	4629      	mov	r1, r5
 8016508:	f7ea fb28 	bl	8000b5c <__aeabi_dcmpun>
 801650c:	b998      	cbnz	r0, 8016536 <log+0x56>
 801650e:	2200      	movs	r2, #0
 8016510:	2300      	movs	r3, #0
 8016512:	4620      	mov	r0, r4
 8016514:	4629      	mov	r1, r5
 8016516:	f7ea fb17 	bl	8000b48 <__aeabi_dcmpgt>
 801651a:	b960      	cbnz	r0, 8016536 <log+0x56>
 801651c:	2200      	movs	r2, #0
 801651e:	2300      	movs	r3, #0
 8016520:	4620      	mov	r0, r4
 8016522:	4629      	mov	r1, r5
 8016524:	f7ea fae8 	bl	8000af8 <__aeabi_dcmpeq>
 8016528:	b160      	cbz	r0, 8016544 <log+0x64>
 801652a:	f7fb fb47 	bl	8011bbc <__errno>
 801652e:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 8016560 <log+0x80>
 8016532:	2322      	movs	r3, #34	; 0x22
 8016534:	6003      	str	r3, [r0, #0]
 8016536:	eeb0 0a48 	vmov.f32	s0, s16
 801653a:	eef0 0a68 	vmov.f32	s1, s17
 801653e:	ecbd 8b02 	vpop	{d8}
 8016542:	bd38      	pop	{r3, r4, r5, pc}
 8016544:	f7fb fb3a 	bl	8011bbc <__errno>
 8016548:	ecbd 8b02 	vpop	{d8}
 801654c:	2321      	movs	r3, #33	; 0x21
 801654e:	6003      	str	r3, [r0, #0]
 8016550:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016554:	4805      	ldr	r0, [pc, #20]	; (801656c <log+0x8c>)
 8016556:	f7ff be37 	b.w	80161c8 <nan>
 801655a:	bf00      	nop
 801655c:	f3af 8000 	nop.w
 8016560:	00000000 	.word	0x00000000
 8016564:	fff00000 	.word	0xfff00000
 8016568:	20000230 	.word	0x20000230
 801656c:	08018177 	.word	0x08018177

08016570 <pow>:
 8016570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016574:	ec59 8b10 	vmov	r8, r9, d0
 8016578:	ec57 6b11 	vmov	r6, r7, d1
 801657c:	f000 fc14 	bl	8016da8 <__ieee754_pow>
 8016580:	4b4e      	ldr	r3, [pc, #312]	; (80166bc <pow+0x14c>)
 8016582:	f993 3000 	ldrsb.w	r3, [r3]
 8016586:	3301      	adds	r3, #1
 8016588:	ec55 4b10 	vmov	r4, r5, d0
 801658c:	d015      	beq.n	80165ba <pow+0x4a>
 801658e:	4632      	mov	r2, r6
 8016590:	463b      	mov	r3, r7
 8016592:	4630      	mov	r0, r6
 8016594:	4639      	mov	r1, r7
 8016596:	f7ea fae1 	bl	8000b5c <__aeabi_dcmpun>
 801659a:	b970      	cbnz	r0, 80165ba <pow+0x4a>
 801659c:	4642      	mov	r2, r8
 801659e:	464b      	mov	r3, r9
 80165a0:	4640      	mov	r0, r8
 80165a2:	4649      	mov	r1, r9
 80165a4:	f7ea fada 	bl	8000b5c <__aeabi_dcmpun>
 80165a8:	2200      	movs	r2, #0
 80165aa:	2300      	movs	r3, #0
 80165ac:	b148      	cbz	r0, 80165c2 <pow+0x52>
 80165ae:	4630      	mov	r0, r6
 80165b0:	4639      	mov	r1, r7
 80165b2:	f7ea faa1 	bl	8000af8 <__aeabi_dcmpeq>
 80165b6:	2800      	cmp	r0, #0
 80165b8:	d17d      	bne.n	80166b6 <pow+0x146>
 80165ba:	ec45 4b10 	vmov	d0, r4, r5
 80165be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80165c2:	4640      	mov	r0, r8
 80165c4:	4649      	mov	r1, r9
 80165c6:	f7ea fa97 	bl	8000af8 <__aeabi_dcmpeq>
 80165ca:	b1e0      	cbz	r0, 8016606 <pow+0x96>
 80165cc:	2200      	movs	r2, #0
 80165ce:	2300      	movs	r3, #0
 80165d0:	4630      	mov	r0, r6
 80165d2:	4639      	mov	r1, r7
 80165d4:	f7ea fa90 	bl	8000af8 <__aeabi_dcmpeq>
 80165d8:	2800      	cmp	r0, #0
 80165da:	d16c      	bne.n	80166b6 <pow+0x146>
 80165dc:	ec47 6b10 	vmov	d0, r6, r7
 80165e0:	f001 f9c1 	bl	8017966 <finite>
 80165e4:	2800      	cmp	r0, #0
 80165e6:	d0e8      	beq.n	80165ba <pow+0x4a>
 80165e8:	2200      	movs	r2, #0
 80165ea:	2300      	movs	r3, #0
 80165ec:	4630      	mov	r0, r6
 80165ee:	4639      	mov	r1, r7
 80165f0:	f7ea fa8c 	bl	8000b0c <__aeabi_dcmplt>
 80165f4:	2800      	cmp	r0, #0
 80165f6:	d0e0      	beq.n	80165ba <pow+0x4a>
 80165f8:	f7fb fae0 	bl	8011bbc <__errno>
 80165fc:	2321      	movs	r3, #33	; 0x21
 80165fe:	6003      	str	r3, [r0, #0]
 8016600:	2400      	movs	r4, #0
 8016602:	4d2f      	ldr	r5, [pc, #188]	; (80166c0 <pow+0x150>)
 8016604:	e7d9      	b.n	80165ba <pow+0x4a>
 8016606:	ec45 4b10 	vmov	d0, r4, r5
 801660a:	f001 f9ac 	bl	8017966 <finite>
 801660e:	bbb8      	cbnz	r0, 8016680 <pow+0x110>
 8016610:	ec49 8b10 	vmov	d0, r8, r9
 8016614:	f001 f9a7 	bl	8017966 <finite>
 8016618:	b390      	cbz	r0, 8016680 <pow+0x110>
 801661a:	ec47 6b10 	vmov	d0, r6, r7
 801661e:	f001 f9a2 	bl	8017966 <finite>
 8016622:	b368      	cbz	r0, 8016680 <pow+0x110>
 8016624:	4622      	mov	r2, r4
 8016626:	462b      	mov	r3, r5
 8016628:	4620      	mov	r0, r4
 801662a:	4629      	mov	r1, r5
 801662c:	f7ea fa96 	bl	8000b5c <__aeabi_dcmpun>
 8016630:	b160      	cbz	r0, 801664c <pow+0xdc>
 8016632:	f7fb fac3 	bl	8011bbc <__errno>
 8016636:	2321      	movs	r3, #33	; 0x21
 8016638:	6003      	str	r3, [r0, #0]
 801663a:	2200      	movs	r2, #0
 801663c:	2300      	movs	r3, #0
 801663e:	4610      	mov	r0, r2
 8016640:	4619      	mov	r1, r3
 8016642:	f7ea f91b 	bl	800087c <__aeabi_ddiv>
 8016646:	4604      	mov	r4, r0
 8016648:	460d      	mov	r5, r1
 801664a:	e7b6      	b.n	80165ba <pow+0x4a>
 801664c:	f7fb fab6 	bl	8011bbc <__errno>
 8016650:	2322      	movs	r3, #34	; 0x22
 8016652:	6003      	str	r3, [r0, #0]
 8016654:	2200      	movs	r2, #0
 8016656:	2300      	movs	r3, #0
 8016658:	4640      	mov	r0, r8
 801665a:	4649      	mov	r1, r9
 801665c:	f7ea fa56 	bl	8000b0c <__aeabi_dcmplt>
 8016660:	2400      	movs	r4, #0
 8016662:	b158      	cbz	r0, 801667c <pow+0x10c>
 8016664:	ec47 6b10 	vmov	d0, r6, r7
 8016668:	f001 f988 	bl	801797c <rint>
 801666c:	4632      	mov	r2, r6
 801666e:	ec51 0b10 	vmov	r0, r1, d0
 8016672:	463b      	mov	r3, r7
 8016674:	f7ea fa40 	bl	8000af8 <__aeabi_dcmpeq>
 8016678:	2800      	cmp	r0, #0
 801667a:	d0c2      	beq.n	8016602 <pow+0x92>
 801667c:	4d11      	ldr	r5, [pc, #68]	; (80166c4 <pow+0x154>)
 801667e:	e79c      	b.n	80165ba <pow+0x4a>
 8016680:	2200      	movs	r2, #0
 8016682:	2300      	movs	r3, #0
 8016684:	4620      	mov	r0, r4
 8016686:	4629      	mov	r1, r5
 8016688:	f7ea fa36 	bl	8000af8 <__aeabi_dcmpeq>
 801668c:	2800      	cmp	r0, #0
 801668e:	d094      	beq.n	80165ba <pow+0x4a>
 8016690:	ec49 8b10 	vmov	d0, r8, r9
 8016694:	f001 f967 	bl	8017966 <finite>
 8016698:	2800      	cmp	r0, #0
 801669a:	d08e      	beq.n	80165ba <pow+0x4a>
 801669c:	ec47 6b10 	vmov	d0, r6, r7
 80166a0:	f001 f961 	bl	8017966 <finite>
 80166a4:	2800      	cmp	r0, #0
 80166a6:	d088      	beq.n	80165ba <pow+0x4a>
 80166a8:	f7fb fa88 	bl	8011bbc <__errno>
 80166ac:	2322      	movs	r3, #34	; 0x22
 80166ae:	6003      	str	r3, [r0, #0]
 80166b0:	2400      	movs	r4, #0
 80166b2:	2500      	movs	r5, #0
 80166b4:	e781      	b.n	80165ba <pow+0x4a>
 80166b6:	4d04      	ldr	r5, [pc, #16]	; (80166c8 <pow+0x158>)
 80166b8:	2400      	movs	r4, #0
 80166ba:	e77e      	b.n	80165ba <pow+0x4a>
 80166bc:	20000230 	.word	0x20000230
 80166c0:	fff00000 	.word	0xfff00000
 80166c4:	7ff00000 	.word	0x7ff00000
 80166c8:	3ff00000 	.word	0x3ff00000

080166cc <sqrt>:
 80166cc:	b538      	push	{r3, r4, r5, lr}
 80166ce:	ed2d 8b02 	vpush	{d8}
 80166d2:	ec55 4b10 	vmov	r4, r5, d0
 80166d6:	f001 f889 	bl	80177ec <__ieee754_sqrt>
 80166da:	4b15      	ldr	r3, [pc, #84]	; (8016730 <sqrt+0x64>)
 80166dc:	eeb0 8a40 	vmov.f32	s16, s0
 80166e0:	eef0 8a60 	vmov.f32	s17, s1
 80166e4:	f993 3000 	ldrsb.w	r3, [r3]
 80166e8:	3301      	adds	r3, #1
 80166ea:	d019      	beq.n	8016720 <sqrt+0x54>
 80166ec:	4622      	mov	r2, r4
 80166ee:	462b      	mov	r3, r5
 80166f0:	4620      	mov	r0, r4
 80166f2:	4629      	mov	r1, r5
 80166f4:	f7ea fa32 	bl	8000b5c <__aeabi_dcmpun>
 80166f8:	b990      	cbnz	r0, 8016720 <sqrt+0x54>
 80166fa:	2200      	movs	r2, #0
 80166fc:	2300      	movs	r3, #0
 80166fe:	4620      	mov	r0, r4
 8016700:	4629      	mov	r1, r5
 8016702:	f7ea fa03 	bl	8000b0c <__aeabi_dcmplt>
 8016706:	b158      	cbz	r0, 8016720 <sqrt+0x54>
 8016708:	f7fb fa58 	bl	8011bbc <__errno>
 801670c:	2321      	movs	r3, #33	; 0x21
 801670e:	6003      	str	r3, [r0, #0]
 8016710:	2200      	movs	r2, #0
 8016712:	2300      	movs	r3, #0
 8016714:	4610      	mov	r0, r2
 8016716:	4619      	mov	r1, r3
 8016718:	f7ea f8b0 	bl	800087c <__aeabi_ddiv>
 801671c:	ec41 0b18 	vmov	d8, r0, r1
 8016720:	eeb0 0a48 	vmov.f32	s0, s16
 8016724:	eef0 0a68 	vmov.f32	s1, s17
 8016728:	ecbd 8b02 	vpop	{d8}
 801672c:	bd38      	pop	{r3, r4, r5, pc}
 801672e:	bf00      	nop
 8016730:	20000230 	.word	0x20000230
 8016734:	00000000 	.word	0x00000000

08016738 <__ieee754_exp>:
 8016738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801673c:	ec55 4b10 	vmov	r4, r5, d0
 8016740:	49b1      	ldr	r1, [pc, #708]	; (8016a08 <__ieee754_exp+0x2d0>)
 8016742:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8016746:	428b      	cmp	r3, r1
 8016748:	ed2d 8b04 	vpush	{d8-d9}
 801674c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8016750:	d937      	bls.n	80167c2 <__ieee754_exp+0x8a>
 8016752:	49ae      	ldr	r1, [pc, #696]	; (8016a0c <__ieee754_exp+0x2d4>)
 8016754:	428b      	cmp	r3, r1
 8016756:	d916      	bls.n	8016786 <__ieee754_exp+0x4e>
 8016758:	ee10 3a10 	vmov	r3, s0
 801675c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8016760:	4313      	orrs	r3, r2
 8016762:	d009      	beq.n	8016778 <__ieee754_exp+0x40>
 8016764:	ee10 2a10 	vmov	r2, s0
 8016768:	462b      	mov	r3, r5
 801676a:	4620      	mov	r0, r4
 801676c:	4629      	mov	r1, r5
 801676e:	f7e9 fda5 	bl	80002bc <__adddf3>
 8016772:	4604      	mov	r4, r0
 8016774:	460d      	mov	r5, r1
 8016776:	e000      	b.n	801677a <__ieee754_exp+0x42>
 8016778:	bb06      	cbnz	r6, 80167bc <__ieee754_exp+0x84>
 801677a:	ecbd 8b04 	vpop	{d8-d9}
 801677e:	ec45 4b10 	vmov	d0, r4, r5
 8016782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016786:	a38a      	add	r3, pc, #552	; (adr r3, 80169b0 <__ieee754_exp+0x278>)
 8016788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801678c:	ee10 0a10 	vmov	r0, s0
 8016790:	4629      	mov	r1, r5
 8016792:	f7ea f9d9 	bl	8000b48 <__aeabi_dcmpgt>
 8016796:	b138      	cbz	r0, 80167a8 <__ieee754_exp+0x70>
 8016798:	a387      	add	r3, pc, #540	; (adr r3, 80169b8 <__ieee754_exp+0x280>)
 801679a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801679e:	4610      	mov	r0, r2
 80167a0:	4619      	mov	r1, r3
 80167a2:	f7e9 ff41 	bl	8000628 <__aeabi_dmul>
 80167a6:	e7e4      	b.n	8016772 <__ieee754_exp+0x3a>
 80167a8:	a385      	add	r3, pc, #532	; (adr r3, 80169c0 <__ieee754_exp+0x288>)
 80167aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167ae:	4620      	mov	r0, r4
 80167b0:	4629      	mov	r1, r5
 80167b2:	f7ea f9ab 	bl	8000b0c <__aeabi_dcmplt>
 80167b6:	2800      	cmp	r0, #0
 80167b8:	f000 8087 	beq.w	80168ca <__ieee754_exp+0x192>
 80167bc:	2400      	movs	r4, #0
 80167be:	2500      	movs	r5, #0
 80167c0:	e7db      	b.n	801677a <__ieee754_exp+0x42>
 80167c2:	4a93      	ldr	r2, [pc, #588]	; (8016a10 <__ieee754_exp+0x2d8>)
 80167c4:	4293      	cmp	r3, r2
 80167c6:	f240 80ac 	bls.w	8016922 <__ieee754_exp+0x1ea>
 80167ca:	4a92      	ldr	r2, [pc, #584]	; (8016a14 <__ieee754_exp+0x2dc>)
 80167cc:	4293      	cmp	r3, r2
 80167ce:	d87c      	bhi.n	80168ca <__ieee754_exp+0x192>
 80167d0:	4b91      	ldr	r3, [pc, #580]	; (8016a18 <__ieee754_exp+0x2e0>)
 80167d2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80167d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167da:	ee10 0a10 	vmov	r0, s0
 80167de:	4629      	mov	r1, r5
 80167e0:	f7e9 fd6a 	bl	80002b8 <__aeabi_dsub>
 80167e4:	4b8d      	ldr	r3, [pc, #564]	; (8016a1c <__ieee754_exp+0x2e4>)
 80167e6:	00f7      	lsls	r7, r6, #3
 80167e8:	443b      	add	r3, r7
 80167ea:	ed93 7b00 	vldr	d7, [r3]
 80167ee:	f1c6 0a01 	rsb	sl, r6, #1
 80167f2:	4680      	mov	r8, r0
 80167f4:	4689      	mov	r9, r1
 80167f6:	ebaa 0a06 	sub.w	sl, sl, r6
 80167fa:	eeb0 8a47 	vmov.f32	s16, s14
 80167fe:	eef0 8a67 	vmov.f32	s17, s15
 8016802:	ec53 2b18 	vmov	r2, r3, d8
 8016806:	4640      	mov	r0, r8
 8016808:	4649      	mov	r1, r9
 801680a:	f7e9 fd55 	bl	80002b8 <__aeabi_dsub>
 801680e:	4604      	mov	r4, r0
 8016810:	460d      	mov	r5, r1
 8016812:	4622      	mov	r2, r4
 8016814:	462b      	mov	r3, r5
 8016816:	4620      	mov	r0, r4
 8016818:	4629      	mov	r1, r5
 801681a:	f7e9 ff05 	bl	8000628 <__aeabi_dmul>
 801681e:	a36a      	add	r3, pc, #424	; (adr r3, 80169c8 <__ieee754_exp+0x290>)
 8016820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016824:	4606      	mov	r6, r0
 8016826:	460f      	mov	r7, r1
 8016828:	f7e9 fefe 	bl	8000628 <__aeabi_dmul>
 801682c:	a368      	add	r3, pc, #416	; (adr r3, 80169d0 <__ieee754_exp+0x298>)
 801682e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016832:	f7e9 fd41 	bl	80002b8 <__aeabi_dsub>
 8016836:	4632      	mov	r2, r6
 8016838:	463b      	mov	r3, r7
 801683a:	f7e9 fef5 	bl	8000628 <__aeabi_dmul>
 801683e:	a366      	add	r3, pc, #408	; (adr r3, 80169d8 <__ieee754_exp+0x2a0>)
 8016840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016844:	f7e9 fd3a 	bl	80002bc <__adddf3>
 8016848:	4632      	mov	r2, r6
 801684a:	463b      	mov	r3, r7
 801684c:	f7e9 feec 	bl	8000628 <__aeabi_dmul>
 8016850:	a363      	add	r3, pc, #396	; (adr r3, 80169e0 <__ieee754_exp+0x2a8>)
 8016852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016856:	f7e9 fd2f 	bl	80002b8 <__aeabi_dsub>
 801685a:	4632      	mov	r2, r6
 801685c:	463b      	mov	r3, r7
 801685e:	f7e9 fee3 	bl	8000628 <__aeabi_dmul>
 8016862:	a361      	add	r3, pc, #388	; (adr r3, 80169e8 <__ieee754_exp+0x2b0>)
 8016864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016868:	f7e9 fd28 	bl	80002bc <__adddf3>
 801686c:	4632      	mov	r2, r6
 801686e:	463b      	mov	r3, r7
 8016870:	f7e9 feda 	bl	8000628 <__aeabi_dmul>
 8016874:	4602      	mov	r2, r0
 8016876:	460b      	mov	r3, r1
 8016878:	4620      	mov	r0, r4
 801687a:	4629      	mov	r1, r5
 801687c:	f7e9 fd1c 	bl	80002b8 <__aeabi_dsub>
 8016880:	4602      	mov	r2, r0
 8016882:	460b      	mov	r3, r1
 8016884:	4606      	mov	r6, r0
 8016886:	460f      	mov	r7, r1
 8016888:	4620      	mov	r0, r4
 801688a:	4629      	mov	r1, r5
 801688c:	f7e9 fecc 	bl	8000628 <__aeabi_dmul>
 8016890:	ec41 0b19 	vmov	d9, r0, r1
 8016894:	f1ba 0f00 	cmp.w	sl, #0
 8016898:	d15d      	bne.n	8016956 <__ieee754_exp+0x21e>
 801689a:	2200      	movs	r2, #0
 801689c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80168a0:	4630      	mov	r0, r6
 80168a2:	4639      	mov	r1, r7
 80168a4:	f7e9 fd08 	bl	80002b8 <__aeabi_dsub>
 80168a8:	4602      	mov	r2, r0
 80168aa:	460b      	mov	r3, r1
 80168ac:	ec51 0b19 	vmov	r0, r1, d9
 80168b0:	f7e9 ffe4 	bl	800087c <__aeabi_ddiv>
 80168b4:	4622      	mov	r2, r4
 80168b6:	462b      	mov	r3, r5
 80168b8:	f7e9 fcfe 	bl	80002b8 <__aeabi_dsub>
 80168bc:	4602      	mov	r2, r0
 80168be:	460b      	mov	r3, r1
 80168c0:	2000      	movs	r0, #0
 80168c2:	4957      	ldr	r1, [pc, #348]	; (8016a20 <__ieee754_exp+0x2e8>)
 80168c4:	f7e9 fcf8 	bl	80002b8 <__aeabi_dsub>
 80168c8:	e753      	b.n	8016772 <__ieee754_exp+0x3a>
 80168ca:	4856      	ldr	r0, [pc, #344]	; (8016a24 <__ieee754_exp+0x2ec>)
 80168cc:	a348      	add	r3, pc, #288	; (adr r3, 80169f0 <__ieee754_exp+0x2b8>)
 80168ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168d2:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 80168d6:	4629      	mov	r1, r5
 80168d8:	4620      	mov	r0, r4
 80168da:	f7e9 fea5 	bl	8000628 <__aeabi_dmul>
 80168de:	e9d6 2300 	ldrd	r2, r3, [r6]
 80168e2:	f7e9 fceb 	bl	80002bc <__adddf3>
 80168e6:	f7ea f94f 	bl	8000b88 <__aeabi_d2iz>
 80168ea:	4682      	mov	sl, r0
 80168ec:	f7e9 fe32 	bl	8000554 <__aeabi_i2d>
 80168f0:	a341      	add	r3, pc, #260	; (adr r3, 80169f8 <__ieee754_exp+0x2c0>)
 80168f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168f6:	4606      	mov	r6, r0
 80168f8:	460f      	mov	r7, r1
 80168fa:	f7e9 fe95 	bl	8000628 <__aeabi_dmul>
 80168fe:	4602      	mov	r2, r0
 8016900:	460b      	mov	r3, r1
 8016902:	4620      	mov	r0, r4
 8016904:	4629      	mov	r1, r5
 8016906:	f7e9 fcd7 	bl	80002b8 <__aeabi_dsub>
 801690a:	a33d      	add	r3, pc, #244	; (adr r3, 8016a00 <__ieee754_exp+0x2c8>)
 801690c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016910:	4680      	mov	r8, r0
 8016912:	4689      	mov	r9, r1
 8016914:	4630      	mov	r0, r6
 8016916:	4639      	mov	r1, r7
 8016918:	f7e9 fe86 	bl	8000628 <__aeabi_dmul>
 801691c:	ec41 0b18 	vmov	d8, r0, r1
 8016920:	e76f      	b.n	8016802 <__ieee754_exp+0xca>
 8016922:	4a41      	ldr	r2, [pc, #260]	; (8016a28 <__ieee754_exp+0x2f0>)
 8016924:	4293      	cmp	r3, r2
 8016926:	d811      	bhi.n	801694c <__ieee754_exp+0x214>
 8016928:	a323      	add	r3, pc, #140	; (adr r3, 80169b8 <__ieee754_exp+0x280>)
 801692a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801692e:	ee10 0a10 	vmov	r0, s0
 8016932:	4629      	mov	r1, r5
 8016934:	f7e9 fcc2 	bl	80002bc <__adddf3>
 8016938:	4b39      	ldr	r3, [pc, #228]	; (8016a20 <__ieee754_exp+0x2e8>)
 801693a:	2200      	movs	r2, #0
 801693c:	f7ea f904 	bl	8000b48 <__aeabi_dcmpgt>
 8016940:	b138      	cbz	r0, 8016952 <__ieee754_exp+0x21a>
 8016942:	4b37      	ldr	r3, [pc, #220]	; (8016a20 <__ieee754_exp+0x2e8>)
 8016944:	2200      	movs	r2, #0
 8016946:	4620      	mov	r0, r4
 8016948:	4629      	mov	r1, r5
 801694a:	e710      	b.n	801676e <__ieee754_exp+0x36>
 801694c:	f04f 0a00 	mov.w	sl, #0
 8016950:	e75f      	b.n	8016812 <__ieee754_exp+0xda>
 8016952:	4682      	mov	sl, r0
 8016954:	e75d      	b.n	8016812 <__ieee754_exp+0xda>
 8016956:	4632      	mov	r2, r6
 8016958:	463b      	mov	r3, r7
 801695a:	2000      	movs	r0, #0
 801695c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8016960:	f7e9 fcaa 	bl	80002b8 <__aeabi_dsub>
 8016964:	4602      	mov	r2, r0
 8016966:	460b      	mov	r3, r1
 8016968:	ec51 0b19 	vmov	r0, r1, d9
 801696c:	f7e9 ff86 	bl	800087c <__aeabi_ddiv>
 8016970:	4602      	mov	r2, r0
 8016972:	460b      	mov	r3, r1
 8016974:	ec51 0b18 	vmov	r0, r1, d8
 8016978:	f7e9 fc9e 	bl	80002b8 <__aeabi_dsub>
 801697c:	4642      	mov	r2, r8
 801697e:	464b      	mov	r3, r9
 8016980:	f7e9 fc9a 	bl	80002b8 <__aeabi_dsub>
 8016984:	4602      	mov	r2, r0
 8016986:	460b      	mov	r3, r1
 8016988:	2000      	movs	r0, #0
 801698a:	4925      	ldr	r1, [pc, #148]	; (8016a20 <__ieee754_exp+0x2e8>)
 801698c:	f7e9 fc94 	bl	80002b8 <__aeabi_dsub>
 8016990:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8016994:	4592      	cmp	sl, r2
 8016996:	db02      	blt.n	801699e <__ieee754_exp+0x266>
 8016998:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801699c:	e6e9      	b.n	8016772 <__ieee754_exp+0x3a>
 801699e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80169a2:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80169a6:	2200      	movs	r2, #0
 80169a8:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80169ac:	e6f9      	b.n	80167a2 <__ieee754_exp+0x6a>
 80169ae:	bf00      	nop
 80169b0:	fefa39ef 	.word	0xfefa39ef
 80169b4:	40862e42 	.word	0x40862e42
 80169b8:	8800759c 	.word	0x8800759c
 80169bc:	7e37e43c 	.word	0x7e37e43c
 80169c0:	d52d3051 	.word	0xd52d3051
 80169c4:	c0874910 	.word	0xc0874910
 80169c8:	72bea4d0 	.word	0x72bea4d0
 80169cc:	3e663769 	.word	0x3e663769
 80169d0:	c5d26bf1 	.word	0xc5d26bf1
 80169d4:	3ebbbd41 	.word	0x3ebbbd41
 80169d8:	af25de2c 	.word	0xaf25de2c
 80169dc:	3f11566a 	.word	0x3f11566a
 80169e0:	16bebd93 	.word	0x16bebd93
 80169e4:	3f66c16c 	.word	0x3f66c16c
 80169e8:	5555553e 	.word	0x5555553e
 80169ec:	3fc55555 	.word	0x3fc55555
 80169f0:	652b82fe 	.word	0x652b82fe
 80169f4:	3ff71547 	.word	0x3ff71547
 80169f8:	fee00000 	.word	0xfee00000
 80169fc:	3fe62e42 	.word	0x3fe62e42
 8016a00:	35793c76 	.word	0x35793c76
 8016a04:	3dea39ef 	.word	0x3dea39ef
 8016a08:	40862e41 	.word	0x40862e41
 8016a0c:	7fefffff 	.word	0x7fefffff
 8016a10:	3fd62e42 	.word	0x3fd62e42
 8016a14:	3ff0a2b1 	.word	0x3ff0a2b1
 8016a18:	08018608 	.word	0x08018608
 8016a1c:	08018618 	.word	0x08018618
 8016a20:	3ff00000 	.word	0x3ff00000
 8016a24:	080185f8 	.word	0x080185f8
 8016a28:	3e2fffff 	.word	0x3e2fffff
 8016a2c:	00000000 	.word	0x00000000

08016a30 <__ieee754_log>:
 8016a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a34:	ec51 0b10 	vmov	r0, r1, d0
 8016a38:	ed2d 8b04 	vpush	{d8-d9}
 8016a3c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8016a40:	b083      	sub	sp, #12
 8016a42:	460d      	mov	r5, r1
 8016a44:	da29      	bge.n	8016a9a <__ieee754_log+0x6a>
 8016a46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016a4a:	4303      	orrs	r3, r0
 8016a4c:	ee10 2a10 	vmov	r2, s0
 8016a50:	d10c      	bne.n	8016a6c <__ieee754_log+0x3c>
 8016a52:	49cf      	ldr	r1, [pc, #828]	; (8016d90 <__ieee754_log+0x360>)
 8016a54:	2200      	movs	r2, #0
 8016a56:	2300      	movs	r3, #0
 8016a58:	2000      	movs	r0, #0
 8016a5a:	f7e9 ff0f 	bl	800087c <__aeabi_ddiv>
 8016a5e:	ec41 0b10 	vmov	d0, r0, r1
 8016a62:	b003      	add	sp, #12
 8016a64:	ecbd 8b04 	vpop	{d8-d9}
 8016a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a6c:	2900      	cmp	r1, #0
 8016a6e:	da05      	bge.n	8016a7c <__ieee754_log+0x4c>
 8016a70:	460b      	mov	r3, r1
 8016a72:	f7e9 fc21 	bl	80002b8 <__aeabi_dsub>
 8016a76:	2200      	movs	r2, #0
 8016a78:	2300      	movs	r3, #0
 8016a7a:	e7ee      	b.n	8016a5a <__ieee754_log+0x2a>
 8016a7c:	4bc5      	ldr	r3, [pc, #788]	; (8016d94 <__ieee754_log+0x364>)
 8016a7e:	2200      	movs	r2, #0
 8016a80:	f7e9 fdd2 	bl	8000628 <__aeabi_dmul>
 8016a84:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8016a88:	460d      	mov	r5, r1
 8016a8a:	4ac3      	ldr	r2, [pc, #780]	; (8016d98 <__ieee754_log+0x368>)
 8016a8c:	4295      	cmp	r5, r2
 8016a8e:	dd06      	ble.n	8016a9e <__ieee754_log+0x6e>
 8016a90:	4602      	mov	r2, r0
 8016a92:	460b      	mov	r3, r1
 8016a94:	f7e9 fc12 	bl	80002bc <__adddf3>
 8016a98:	e7e1      	b.n	8016a5e <__ieee754_log+0x2e>
 8016a9a:	2300      	movs	r3, #0
 8016a9c:	e7f5      	b.n	8016a8a <__ieee754_log+0x5a>
 8016a9e:	152c      	asrs	r4, r5, #20
 8016aa0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8016aa4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8016aa8:	441c      	add	r4, r3
 8016aaa:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8016aae:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8016ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016ab6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8016aba:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8016abe:	ea42 0105 	orr.w	r1, r2, r5
 8016ac2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8016ac6:	2200      	movs	r2, #0
 8016ac8:	4bb4      	ldr	r3, [pc, #720]	; (8016d9c <__ieee754_log+0x36c>)
 8016aca:	f7e9 fbf5 	bl	80002b8 <__aeabi_dsub>
 8016ace:	1cab      	adds	r3, r5, #2
 8016ad0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016ad4:	2b02      	cmp	r3, #2
 8016ad6:	4682      	mov	sl, r0
 8016ad8:	468b      	mov	fp, r1
 8016ada:	f04f 0200 	mov.w	r2, #0
 8016ade:	dc53      	bgt.n	8016b88 <__ieee754_log+0x158>
 8016ae0:	2300      	movs	r3, #0
 8016ae2:	f7ea f809 	bl	8000af8 <__aeabi_dcmpeq>
 8016ae6:	b1d0      	cbz	r0, 8016b1e <__ieee754_log+0xee>
 8016ae8:	2c00      	cmp	r4, #0
 8016aea:	f000 8122 	beq.w	8016d32 <__ieee754_log+0x302>
 8016aee:	4620      	mov	r0, r4
 8016af0:	f7e9 fd30 	bl	8000554 <__aeabi_i2d>
 8016af4:	a390      	add	r3, pc, #576	; (adr r3, 8016d38 <__ieee754_log+0x308>)
 8016af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016afa:	4606      	mov	r6, r0
 8016afc:	460f      	mov	r7, r1
 8016afe:	f7e9 fd93 	bl	8000628 <__aeabi_dmul>
 8016b02:	a38f      	add	r3, pc, #572	; (adr r3, 8016d40 <__ieee754_log+0x310>)
 8016b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b08:	4604      	mov	r4, r0
 8016b0a:	460d      	mov	r5, r1
 8016b0c:	4630      	mov	r0, r6
 8016b0e:	4639      	mov	r1, r7
 8016b10:	f7e9 fd8a 	bl	8000628 <__aeabi_dmul>
 8016b14:	4602      	mov	r2, r0
 8016b16:	460b      	mov	r3, r1
 8016b18:	4620      	mov	r0, r4
 8016b1a:	4629      	mov	r1, r5
 8016b1c:	e7ba      	b.n	8016a94 <__ieee754_log+0x64>
 8016b1e:	a38a      	add	r3, pc, #552	; (adr r3, 8016d48 <__ieee754_log+0x318>)
 8016b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b24:	4650      	mov	r0, sl
 8016b26:	4659      	mov	r1, fp
 8016b28:	f7e9 fd7e 	bl	8000628 <__aeabi_dmul>
 8016b2c:	4602      	mov	r2, r0
 8016b2e:	460b      	mov	r3, r1
 8016b30:	2000      	movs	r0, #0
 8016b32:	499b      	ldr	r1, [pc, #620]	; (8016da0 <__ieee754_log+0x370>)
 8016b34:	f7e9 fbc0 	bl	80002b8 <__aeabi_dsub>
 8016b38:	4652      	mov	r2, sl
 8016b3a:	4606      	mov	r6, r0
 8016b3c:	460f      	mov	r7, r1
 8016b3e:	465b      	mov	r3, fp
 8016b40:	4650      	mov	r0, sl
 8016b42:	4659      	mov	r1, fp
 8016b44:	f7e9 fd70 	bl	8000628 <__aeabi_dmul>
 8016b48:	4602      	mov	r2, r0
 8016b4a:	460b      	mov	r3, r1
 8016b4c:	4630      	mov	r0, r6
 8016b4e:	4639      	mov	r1, r7
 8016b50:	f7e9 fd6a 	bl	8000628 <__aeabi_dmul>
 8016b54:	4606      	mov	r6, r0
 8016b56:	460f      	mov	r7, r1
 8016b58:	b914      	cbnz	r4, 8016b60 <__ieee754_log+0x130>
 8016b5a:	4632      	mov	r2, r6
 8016b5c:	463b      	mov	r3, r7
 8016b5e:	e0a2      	b.n	8016ca6 <__ieee754_log+0x276>
 8016b60:	4620      	mov	r0, r4
 8016b62:	f7e9 fcf7 	bl	8000554 <__aeabi_i2d>
 8016b66:	a374      	add	r3, pc, #464	; (adr r3, 8016d38 <__ieee754_log+0x308>)
 8016b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b6c:	4680      	mov	r8, r0
 8016b6e:	4689      	mov	r9, r1
 8016b70:	f7e9 fd5a 	bl	8000628 <__aeabi_dmul>
 8016b74:	a372      	add	r3, pc, #456	; (adr r3, 8016d40 <__ieee754_log+0x310>)
 8016b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b7a:	4604      	mov	r4, r0
 8016b7c:	460d      	mov	r5, r1
 8016b7e:	4640      	mov	r0, r8
 8016b80:	4649      	mov	r1, r9
 8016b82:	f7e9 fd51 	bl	8000628 <__aeabi_dmul>
 8016b86:	e0a7      	b.n	8016cd8 <__ieee754_log+0x2a8>
 8016b88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016b8c:	f7e9 fb96 	bl	80002bc <__adddf3>
 8016b90:	4602      	mov	r2, r0
 8016b92:	460b      	mov	r3, r1
 8016b94:	4650      	mov	r0, sl
 8016b96:	4659      	mov	r1, fp
 8016b98:	f7e9 fe70 	bl	800087c <__aeabi_ddiv>
 8016b9c:	ec41 0b18 	vmov	d8, r0, r1
 8016ba0:	4620      	mov	r0, r4
 8016ba2:	f7e9 fcd7 	bl	8000554 <__aeabi_i2d>
 8016ba6:	ec53 2b18 	vmov	r2, r3, d8
 8016baa:	ec41 0b19 	vmov	d9, r0, r1
 8016bae:	ec51 0b18 	vmov	r0, r1, d8
 8016bb2:	f7e9 fd39 	bl	8000628 <__aeabi_dmul>
 8016bb6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8016bba:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8016bbe:	9301      	str	r3, [sp, #4]
 8016bc0:	4602      	mov	r2, r0
 8016bc2:	460b      	mov	r3, r1
 8016bc4:	4680      	mov	r8, r0
 8016bc6:	4689      	mov	r9, r1
 8016bc8:	f7e9 fd2e 	bl	8000628 <__aeabi_dmul>
 8016bcc:	a360      	add	r3, pc, #384	; (adr r3, 8016d50 <__ieee754_log+0x320>)
 8016bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bd2:	4606      	mov	r6, r0
 8016bd4:	460f      	mov	r7, r1
 8016bd6:	f7e9 fd27 	bl	8000628 <__aeabi_dmul>
 8016bda:	a35f      	add	r3, pc, #380	; (adr r3, 8016d58 <__ieee754_log+0x328>)
 8016bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016be0:	f7e9 fb6c 	bl	80002bc <__adddf3>
 8016be4:	4632      	mov	r2, r6
 8016be6:	463b      	mov	r3, r7
 8016be8:	f7e9 fd1e 	bl	8000628 <__aeabi_dmul>
 8016bec:	a35c      	add	r3, pc, #368	; (adr r3, 8016d60 <__ieee754_log+0x330>)
 8016bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bf2:	f7e9 fb63 	bl	80002bc <__adddf3>
 8016bf6:	4632      	mov	r2, r6
 8016bf8:	463b      	mov	r3, r7
 8016bfa:	f7e9 fd15 	bl	8000628 <__aeabi_dmul>
 8016bfe:	a35a      	add	r3, pc, #360	; (adr r3, 8016d68 <__ieee754_log+0x338>)
 8016c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c04:	f7e9 fb5a 	bl	80002bc <__adddf3>
 8016c08:	4642      	mov	r2, r8
 8016c0a:	464b      	mov	r3, r9
 8016c0c:	f7e9 fd0c 	bl	8000628 <__aeabi_dmul>
 8016c10:	a357      	add	r3, pc, #348	; (adr r3, 8016d70 <__ieee754_log+0x340>)
 8016c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c16:	4680      	mov	r8, r0
 8016c18:	4689      	mov	r9, r1
 8016c1a:	4630      	mov	r0, r6
 8016c1c:	4639      	mov	r1, r7
 8016c1e:	f7e9 fd03 	bl	8000628 <__aeabi_dmul>
 8016c22:	a355      	add	r3, pc, #340	; (adr r3, 8016d78 <__ieee754_log+0x348>)
 8016c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c28:	f7e9 fb48 	bl	80002bc <__adddf3>
 8016c2c:	4632      	mov	r2, r6
 8016c2e:	463b      	mov	r3, r7
 8016c30:	f7e9 fcfa 	bl	8000628 <__aeabi_dmul>
 8016c34:	a352      	add	r3, pc, #328	; (adr r3, 8016d80 <__ieee754_log+0x350>)
 8016c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c3a:	f7e9 fb3f 	bl	80002bc <__adddf3>
 8016c3e:	4632      	mov	r2, r6
 8016c40:	463b      	mov	r3, r7
 8016c42:	f7e9 fcf1 	bl	8000628 <__aeabi_dmul>
 8016c46:	460b      	mov	r3, r1
 8016c48:	4602      	mov	r2, r0
 8016c4a:	4649      	mov	r1, r9
 8016c4c:	4640      	mov	r0, r8
 8016c4e:	f7e9 fb35 	bl	80002bc <__adddf3>
 8016c52:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8016c56:	9b01      	ldr	r3, [sp, #4]
 8016c58:	3551      	adds	r5, #81	; 0x51
 8016c5a:	431d      	orrs	r5, r3
 8016c5c:	2d00      	cmp	r5, #0
 8016c5e:	4680      	mov	r8, r0
 8016c60:	4689      	mov	r9, r1
 8016c62:	dd48      	ble.n	8016cf6 <__ieee754_log+0x2c6>
 8016c64:	4b4e      	ldr	r3, [pc, #312]	; (8016da0 <__ieee754_log+0x370>)
 8016c66:	2200      	movs	r2, #0
 8016c68:	4650      	mov	r0, sl
 8016c6a:	4659      	mov	r1, fp
 8016c6c:	f7e9 fcdc 	bl	8000628 <__aeabi_dmul>
 8016c70:	4652      	mov	r2, sl
 8016c72:	465b      	mov	r3, fp
 8016c74:	f7e9 fcd8 	bl	8000628 <__aeabi_dmul>
 8016c78:	4602      	mov	r2, r0
 8016c7a:	460b      	mov	r3, r1
 8016c7c:	4606      	mov	r6, r0
 8016c7e:	460f      	mov	r7, r1
 8016c80:	4640      	mov	r0, r8
 8016c82:	4649      	mov	r1, r9
 8016c84:	f7e9 fb1a 	bl	80002bc <__adddf3>
 8016c88:	ec53 2b18 	vmov	r2, r3, d8
 8016c8c:	f7e9 fccc 	bl	8000628 <__aeabi_dmul>
 8016c90:	4680      	mov	r8, r0
 8016c92:	4689      	mov	r9, r1
 8016c94:	b964      	cbnz	r4, 8016cb0 <__ieee754_log+0x280>
 8016c96:	4602      	mov	r2, r0
 8016c98:	460b      	mov	r3, r1
 8016c9a:	4630      	mov	r0, r6
 8016c9c:	4639      	mov	r1, r7
 8016c9e:	f7e9 fb0b 	bl	80002b8 <__aeabi_dsub>
 8016ca2:	4602      	mov	r2, r0
 8016ca4:	460b      	mov	r3, r1
 8016ca6:	4650      	mov	r0, sl
 8016ca8:	4659      	mov	r1, fp
 8016caa:	f7e9 fb05 	bl	80002b8 <__aeabi_dsub>
 8016cae:	e6d6      	b.n	8016a5e <__ieee754_log+0x2e>
 8016cb0:	a321      	add	r3, pc, #132	; (adr r3, 8016d38 <__ieee754_log+0x308>)
 8016cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cb6:	ec51 0b19 	vmov	r0, r1, d9
 8016cba:	f7e9 fcb5 	bl	8000628 <__aeabi_dmul>
 8016cbe:	a320      	add	r3, pc, #128	; (adr r3, 8016d40 <__ieee754_log+0x310>)
 8016cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cc4:	4604      	mov	r4, r0
 8016cc6:	460d      	mov	r5, r1
 8016cc8:	ec51 0b19 	vmov	r0, r1, d9
 8016ccc:	f7e9 fcac 	bl	8000628 <__aeabi_dmul>
 8016cd0:	4642      	mov	r2, r8
 8016cd2:	464b      	mov	r3, r9
 8016cd4:	f7e9 faf2 	bl	80002bc <__adddf3>
 8016cd8:	4602      	mov	r2, r0
 8016cda:	460b      	mov	r3, r1
 8016cdc:	4630      	mov	r0, r6
 8016cde:	4639      	mov	r1, r7
 8016ce0:	f7e9 faea 	bl	80002b8 <__aeabi_dsub>
 8016ce4:	4652      	mov	r2, sl
 8016ce6:	465b      	mov	r3, fp
 8016ce8:	f7e9 fae6 	bl	80002b8 <__aeabi_dsub>
 8016cec:	4602      	mov	r2, r0
 8016cee:	460b      	mov	r3, r1
 8016cf0:	4620      	mov	r0, r4
 8016cf2:	4629      	mov	r1, r5
 8016cf4:	e7d9      	b.n	8016caa <__ieee754_log+0x27a>
 8016cf6:	4602      	mov	r2, r0
 8016cf8:	460b      	mov	r3, r1
 8016cfa:	4650      	mov	r0, sl
 8016cfc:	4659      	mov	r1, fp
 8016cfe:	f7e9 fadb 	bl	80002b8 <__aeabi_dsub>
 8016d02:	ec53 2b18 	vmov	r2, r3, d8
 8016d06:	f7e9 fc8f 	bl	8000628 <__aeabi_dmul>
 8016d0a:	4606      	mov	r6, r0
 8016d0c:	460f      	mov	r7, r1
 8016d0e:	2c00      	cmp	r4, #0
 8016d10:	f43f af23 	beq.w	8016b5a <__ieee754_log+0x12a>
 8016d14:	a308      	add	r3, pc, #32	; (adr r3, 8016d38 <__ieee754_log+0x308>)
 8016d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d1a:	ec51 0b19 	vmov	r0, r1, d9
 8016d1e:	f7e9 fc83 	bl	8000628 <__aeabi_dmul>
 8016d22:	a307      	add	r3, pc, #28	; (adr r3, 8016d40 <__ieee754_log+0x310>)
 8016d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d28:	4604      	mov	r4, r0
 8016d2a:	460d      	mov	r5, r1
 8016d2c:	ec51 0b19 	vmov	r0, r1, d9
 8016d30:	e727      	b.n	8016b82 <__ieee754_log+0x152>
 8016d32:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8016d88 <__ieee754_log+0x358>
 8016d36:	e694      	b.n	8016a62 <__ieee754_log+0x32>
 8016d38:	fee00000 	.word	0xfee00000
 8016d3c:	3fe62e42 	.word	0x3fe62e42
 8016d40:	35793c76 	.word	0x35793c76
 8016d44:	3dea39ef 	.word	0x3dea39ef
 8016d48:	55555555 	.word	0x55555555
 8016d4c:	3fd55555 	.word	0x3fd55555
 8016d50:	df3e5244 	.word	0xdf3e5244
 8016d54:	3fc2f112 	.word	0x3fc2f112
 8016d58:	96cb03de 	.word	0x96cb03de
 8016d5c:	3fc74664 	.word	0x3fc74664
 8016d60:	94229359 	.word	0x94229359
 8016d64:	3fd24924 	.word	0x3fd24924
 8016d68:	55555593 	.word	0x55555593
 8016d6c:	3fe55555 	.word	0x3fe55555
 8016d70:	d078c69f 	.word	0xd078c69f
 8016d74:	3fc39a09 	.word	0x3fc39a09
 8016d78:	1d8e78af 	.word	0x1d8e78af
 8016d7c:	3fcc71c5 	.word	0x3fcc71c5
 8016d80:	9997fa04 	.word	0x9997fa04
 8016d84:	3fd99999 	.word	0x3fd99999
	...
 8016d90:	c3500000 	.word	0xc3500000
 8016d94:	43500000 	.word	0x43500000
 8016d98:	7fefffff 	.word	0x7fefffff
 8016d9c:	3ff00000 	.word	0x3ff00000
 8016da0:	3fe00000 	.word	0x3fe00000
 8016da4:	00000000 	.word	0x00000000

08016da8 <__ieee754_pow>:
 8016da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dac:	ed2d 8b06 	vpush	{d8-d10}
 8016db0:	b08d      	sub	sp, #52	; 0x34
 8016db2:	ed8d 1b02 	vstr	d1, [sp, #8]
 8016db6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8016dba:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8016dbe:	ea56 0100 	orrs.w	r1, r6, r0
 8016dc2:	ec53 2b10 	vmov	r2, r3, d0
 8016dc6:	f000 84d1 	beq.w	801776c <__ieee754_pow+0x9c4>
 8016dca:	497f      	ldr	r1, [pc, #508]	; (8016fc8 <__ieee754_pow+0x220>)
 8016dcc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8016dd0:	428c      	cmp	r4, r1
 8016dd2:	ee10 8a10 	vmov	r8, s0
 8016dd6:	4699      	mov	r9, r3
 8016dd8:	dc09      	bgt.n	8016dee <__ieee754_pow+0x46>
 8016dda:	d103      	bne.n	8016de4 <__ieee754_pow+0x3c>
 8016ddc:	b97a      	cbnz	r2, 8016dfe <__ieee754_pow+0x56>
 8016dde:	42a6      	cmp	r6, r4
 8016de0:	dd02      	ble.n	8016de8 <__ieee754_pow+0x40>
 8016de2:	e00c      	b.n	8016dfe <__ieee754_pow+0x56>
 8016de4:	428e      	cmp	r6, r1
 8016de6:	dc02      	bgt.n	8016dee <__ieee754_pow+0x46>
 8016de8:	428e      	cmp	r6, r1
 8016dea:	d110      	bne.n	8016e0e <__ieee754_pow+0x66>
 8016dec:	b178      	cbz	r0, 8016e0e <__ieee754_pow+0x66>
 8016dee:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016df2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016df6:	ea54 0308 	orrs.w	r3, r4, r8
 8016dfa:	f000 84b7 	beq.w	801776c <__ieee754_pow+0x9c4>
 8016dfe:	4873      	ldr	r0, [pc, #460]	; (8016fcc <__ieee754_pow+0x224>)
 8016e00:	b00d      	add	sp, #52	; 0x34
 8016e02:	ecbd 8b06 	vpop	{d8-d10}
 8016e06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e0a:	f7ff b9dd 	b.w	80161c8 <nan>
 8016e0e:	f1b9 0f00 	cmp.w	r9, #0
 8016e12:	da36      	bge.n	8016e82 <__ieee754_pow+0xda>
 8016e14:	496e      	ldr	r1, [pc, #440]	; (8016fd0 <__ieee754_pow+0x228>)
 8016e16:	428e      	cmp	r6, r1
 8016e18:	dc51      	bgt.n	8016ebe <__ieee754_pow+0x116>
 8016e1a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8016e1e:	428e      	cmp	r6, r1
 8016e20:	f340 84af 	ble.w	8017782 <__ieee754_pow+0x9da>
 8016e24:	1531      	asrs	r1, r6, #20
 8016e26:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8016e2a:	2914      	cmp	r1, #20
 8016e2c:	dd0f      	ble.n	8016e4e <__ieee754_pow+0xa6>
 8016e2e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8016e32:	fa20 fc01 	lsr.w	ip, r0, r1
 8016e36:	fa0c f101 	lsl.w	r1, ip, r1
 8016e3a:	4281      	cmp	r1, r0
 8016e3c:	f040 84a1 	bne.w	8017782 <__ieee754_pow+0x9da>
 8016e40:	f00c 0c01 	and.w	ip, ip, #1
 8016e44:	f1cc 0102 	rsb	r1, ip, #2
 8016e48:	9100      	str	r1, [sp, #0]
 8016e4a:	b180      	cbz	r0, 8016e6e <__ieee754_pow+0xc6>
 8016e4c:	e059      	b.n	8016f02 <__ieee754_pow+0x15a>
 8016e4e:	2800      	cmp	r0, #0
 8016e50:	d155      	bne.n	8016efe <__ieee754_pow+0x156>
 8016e52:	f1c1 0114 	rsb	r1, r1, #20
 8016e56:	fa46 fc01 	asr.w	ip, r6, r1
 8016e5a:	fa0c f101 	lsl.w	r1, ip, r1
 8016e5e:	42b1      	cmp	r1, r6
 8016e60:	f040 848c 	bne.w	801777c <__ieee754_pow+0x9d4>
 8016e64:	f00c 0c01 	and.w	ip, ip, #1
 8016e68:	f1cc 0102 	rsb	r1, ip, #2
 8016e6c:	9100      	str	r1, [sp, #0]
 8016e6e:	4959      	ldr	r1, [pc, #356]	; (8016fd4 <__ieee754_pow+0x22c>)
 8016e70:	428e      	cmp	r6, r1
 8016e72:	d12d      	bne.n	8016ed0 <__ieee754_pow+0x128>
 8016e74:	2f00      	cmp	r7, #0
 8016e76:	da79      	bge.n	8016f6c <__ieee754_pow+0x1c4>
 8016e78:	4956      	ldr	r1, [pc, #344]	; (8016fd4 <__ieee754_pow+0x22c>)
 8016e7a:	2000      	movs	r0, #0
 8016e7c:	f7e9 fcfe 	bl	800087c <__aeabi_ddiv>
 8016e80:	e016      	b.n	8016eb0 <__ieee754_pow+0x108>
 8016e82:	2100      	movs	r1, #0
 8016e84:	9100      	str	r1, [sp, #0]
 8016e86:	2800      	cmp	r0, #0
 8016e88:	d13b      	bne.n	8016f02 <__ieee754_pow+0x15a>
 8016e8a:	494f      	ldr	r1, [pc, #316]	; (8016fc8 <__ieee754_pow+0x220>)
 8016e8c:	428e      	cmp	r6, r1
 8016e8e:	d1ee      	bne.n	8016e6e <__ieee754_pow+0xc6>
 8016e90:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8016e94:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8016e98:	ea53 0308 	orrs.w	r3, r3, r8
 8016e9c:	f000 8466 	beq.w	801776c <__ieee754_pow+0x9c4>
 8016ea0:	4b4d      	ldr	r3, [pc, #308]	; (8016fd8 <__ieee754_pow+0x230>)
 8016ea2:	429c      	cmp	r4, r3
 8016ea4:	dd0d      	ble.n	8016ec2 <__ieee754_pow+0x11a>
 8016ea6:	2f00      	cmp	r7, #0
 8016ea8:	f280 8464 	bge.w	8017774 <__ieee754_pow+0x9cc>
 8016eac:	2000      	movs	r0, #0
 8016eae:	2100      	movs	r1, #0
 8016eb0:	ec41 0b10 	vmov	d0, r0, r1
 8016eb4:	b00d      	add	sp, #52	; 0x34
 8016eb6:	ecbd 8b06 	vpop	{d8-d10}
 8016eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ebe:	2102      	movs	r1, #2
 8016ec0:	e7e0      	b.n	8016e84 <__ieee754_pow+0xdc>
 8016ec2:	2f00      	cmp	r7, #0
 8016ec4:	daf2      	bge.n	8016eac <__ieee754_pow+0x104>
 8016ec6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8016eca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8016ece:	e7ef      	b.n	8016eb0 <__ieee754_pow+0x108>
 8016ed0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8016ed4:	d104      	bne.n	8016ee0 <__ieee754_pow+0x138>
 8016ed6:	4610      	mov	r0, r2
 8016ed8:	4619      	mov	r1, r3
 8016eda:	f7e9 fba5 	bl	8000628 <__aeabi_dmul>
 8016ede:	e7e7      	b.n	8016eb0 <__ieee754_pow+0x108>
 8016ee0:	493e      	ldr	r1, [pc, #248]	; (8016fdc <__ieee754_pow+0x234>)
 8016ee2:	428f      	cmp	r7, r1
 8016ee4:	d10d      	bne.n	8016f02 <__ieee754_pow+0x15a>
 8016ee6:	f1b9 0f00 	cmp.w	r9, #0
 8016eea:	db0a      	blt.n	8016f02 <__ieee754_pow+0x15a>
 8016eec:	ec43 2b10 	vmov	d0, r2, r3
 8016ef0:	b00d      	add	sp, #52	; 0x34
 8016ef2:	ecbd 8b06 	vpop	{d8-d10}
 8016ef6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016efa:	f000 bc77 	b.w	80177ec <__ieee754_sqrt>
 8016efe:	2100      	movs	r1, #0
 8016f00:	9100      	str	r1, [sp, #0]
 8016f02:	ec43 2b10 	vmov	d0, r2, r3
 8016f06:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016f0a:	f000 fd23 	bl	8017954 <fabs>
 8016f0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016f12:	ec51 0b10 	vmov	r0, r1, d0
 8016f16:	f1b8 0f00 	cmp.w	r8, #0
 8016f1a:	d12a      	bne.n	8016f72 <__ieee754_pow+0x1ca>
 8016f1c:	b12c      	cbz	r4, 8016f2a <__ieee754_pow+0x182>
 8016f1e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8016fd4 <__ieee754_pow+0x22c>
 8016f22:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8016f26:	45e6      	cmp	lr, ip
 8016f28:	d123      	bne.n	8016f72 <__ieee754_pow+0x1ca>
 8016f2a:	2f00      	cmp	r7, #0
 8016f2c:	da05      	bge.n	8016f3a <__ieee754_pow+0x192>
 8016f2e:	4602      	mov	r2, r0
 8016f30:	460b      	mov	r3, r1
 8016f32:	2000      	movs	r0, #0
 8016f34:	4927      	ldr	r1, [pc, #156]	; (8016fd4 <__ieee754_pow+0x22c>)
 8016f36:	f7e9 fca1 	bl	800087c <__aeabi_ddiv>
 8016f3a:	f1b9 0f00 	cmp.w	r9, #0
 8016f3e:	dab7      	bge.n	8016eb0 <__ieee754_pow+0x108>
 8016f40:	9b00      	ldr	r3, [sp, #0]
 8016f42:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016f46:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016f4a:	4323      	orrs	r3, r4
 8016f4c:	d108      	bne.n	8016f60 <__ieee754_pow+0x1b8>
 8016f4e:	4602      	mov	r2, r0
 8016f50:	460b      	mov	r3, r1
 8016f52:	4610      	mov	r0, r2
 8016f54:	4619      	mov	r1, r3
 8016f56:	f7e9 f9af 	bl	80002b8 <__aeabi_dsub>
 8016f5a:	4602      	mov	r2, r0
 8016f5c:	460b      	mov	r3, r1
 8016f5e:	e78d      	b.n	8016e7c <__ieee754_pow+0xd4>
 8016f60:	9b00      	ldr	r3, [sp, #0]
 8016f62:	2b01      	cmp	r3, #1
 8016f64:	d1a4      	bne.n	8016eb0 <__ieee754_pow+0x108>
 8016f66:	4602      	mov	r2, r0
 8016f68:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016f6c:	4610      	mov	r0, r2
 8016f6e:	4619      	mov	r1, r3
 8016f70:	e79e      	b.n	8016eb0 <__ieee754_pow+0x108>
 8016f72:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8016f76:	f10c 35ff 	add.w	r5, ip, #4294967295
 8016f7a:	950a      	str	r5, [sp, #40]	; 0x28
 8016f7c:	9d00      	ldr	r5, [sp, #0]
 8016f7e:	46ac      	mov	ip, r5
 8016f80:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8016f82:	ea5c 0505 	orrs.w	r5, ip, r5
 8016f86:	d0e4      	beq.n	8016f52 <__ieee754_pow+0x1aa>
 8016f88:	4b15      	ldr	r3, [pc, #84]	; (8016fe0 <__ieee754_pow+0x238>)
 8016f8a:	429e      	cmp	r6, r3
 8016f8c:	f340 80fc 	ble.w	8017188 <__ieee754_pow+0x3e0>
 8016f90:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8016f94:	429e      	cmp	r6, r3
 8016f96:	4b10      	ldr	r3, [pc, #64]	; (8016fd8 <__ieee754_pow+0x230>)
 8016f98:	dd07      	ble.n	8016faa <__ieee754_pow+0x202>
 8016f9a:	429c      	cmp	r4, r3
 8016f9c:	dc0a      	bgt.n	8016fb4 <__ieee754_pow+0x20c>
 8016f9e:	2f00      	cmp	r7, #0
 8016fa0:	da84      	bge.n	8016eac <__ieee754_pow+0x104>
 8016fa2:	a307      	add	r3, pc, #28	; (adr r3, 8016fc0 <__ieee754_pow+0x218>)
 8016fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fa8:	e795      	b.n	8016ed6 <__ieee754_pow+0x12e>
 8016faa:	429c      	cmp	r4, r3
 8016fac:	dbf7      	blt.n	8016f9e <__ieee754_pow+0x1f6>
 8016fae:	4b09      	ldr	r3, [pc, #36]	; (8016fd4 <__ieee754_pow+0x22c>)
 8016fb0:	429c      	cmp	r4, r3
 8016fb2:	dd17      	ble.n	8016fe4 <__ieee754_pow+0x23c>
 8016fb4:	2f00      	cmp	r7, #0
 8016fb6:	dcf4      	bgt.n	8016fa2 <__ieee754_pow+0x1fa>
 8016fb8:	e778      	b.n	8016eac <__ieee754_pow+0x104>
 8016fba:	bf00      	nop
 8016fbc:	f3af 8000 	nop.w
 8016fc0:	8800759c 	.word	0x8800759c
 8016fc4:	7e37e43c 	.word	0x7e37e43c
 8016fc8:	7ff00000 	.word	0x7ff00000
 8016fcc:	08018177 	.word	0x08018177
 8016fd0:	433fffff 	.word	0x433fffff
 8016fd4:	3ff00000 	.word	0x3ff00000
 8016fd8:	3fefffff 	.word	0x3fefffff
 8016fdc:	3fe00000 	.word	0x3fe00000
 8016fe0:	41e00000 	.word	0x41e00000
 8016fe4:	4b64      	ldr	r3, [pc, #400]	; (8017178 <__ieee754_pow+0x3d0>)
 8016fe6:	2200      	movs	r2, #0
 8016fe8:	f7e9 f966 	bl	80002b8 <__aeabi_dsub>
 8016fec:	a356      	add	r3, pc, #344	; (adr r3, 8017148 <__ieee754_pow+0x3a0>)
 8016fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ff2:	4604      	mov	r4, r0
 8016ff4:	460d      	mov	r5, r1
 8016ff6:	f7e9 fb17 	bl	8000628 <__aeabi_dmul>
 8016ffa:	a355      	add	r3, pc, #340	; (adr r3, 8017150 <__ieee754_pow+0x3a8>)
 8016ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017000:	4606      	mov	r6, r0
 8017002:	460f      	mov	r7, r1
 8017004:	4620      	mov	r0, r4
 8017006:	4629      	mov	r1, r5
 8017008:	f7e9 fb0e 	bl	8000628 <__aeabi_dmul>
 801700c:	4b5b      	ldr	r3, [pc, #364]	; (801717c <__ieee754_pow+0x3d4>)
 801700e:	4682      	mov	sl, r0
 8017010:	468b      	mov	fp, r1
 8017012:	2200      	movs	r2, #0
 8017014:	4620      	mov	r0, r4
 8017016:	4629      	mov	r1, r5
 8017018:	f7e9 fb06 	bl	8000628 <__aeabi_dmul>
 801701c:	4602      	mov	r2, r0
 801701e:	460b      	mov	r3, r1
 8017020:	a14d      	add	r1, pc, #308	; (adr r1, 8017158 <__ieee754_pow+0x3b0>)
 8017022:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017026:	f7e9 f947 	bl	80002b8 <__aeabi_dsub>
 801702a:	4622      	mov	r2, r4
 801702c:	462b      	mov	r3, r5
 801702e:	f7e9 fafb 	bl	8000628 <__aeabi_dmul>
 8017032:	4602      	mov	r2, r0
 8017034:	460b      	mov	r3, r1
 8017036:	2000      	movs	r0, #0
 8017038:	4951      	ldr	r1, [pc, #324]	; (8017180 <__ieee754_pow+0x3d8>)
 801703a:	f7e9 f93d 	bl	80002b8 <__aeabi_dsub>
 801703e:	4622      	mov	r2, r4
 8017040:	4680      	mov	r8, r0
 8017042:	4689      	mov	r9, r1
 8017044:	462b      	mov	r3, r5
 8017046:	4620      	mov	r0, r4
 8017048:	4629      	mov	r1, r5
 801704a:	f7e9 faed 	bl	8000628 <__aeabi_dmul>
 801704e:	4602      	mov	r2, r0
 8017050:	460b      	mov	r3, r1
 8017052:	4640      	mov	r0, r8
 8017054:	4649      	mov	r1, r9
 8017056:	f7e9 fae7 	bl	8000628 <__aeabi_dmul>
 801705a:	a341      	add	r3, pc, #260	; (adr r3, 8017160 <__ieee754_pow+0x3b8>)
 801705c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017060:	f7e9 fae2 	bl	8000628 <__aeabi_dmul>
 8017064:	4602      	mov	r2, r0
 8017066:	460b      	mov	r3, r1
 8017068:	4650      	mov	r0, sl
 801706a:	4659      	mov	r1, fp
 801706c:	f7e9 f924 	bl	80002b8 <__aeabi_dsub>
 8017070:	4602      	mov	r2, r0
 8017072:	460b      	mov	r3, r1
 8017074:	4680      	mov	r8, r0
 8017076:	4689      	mov	r9, r1
 8017078:	4630      	mov	r0, r6
 801707a:	4639      	mov	r1, r7
 801707c:	f7e9 f91e 	bl	80002bc <__adddf3>
 8017080:	2400      	movs	r4, #0
 8017082:	4632      	mov	r2, r6
 8017084:	463b      	mov	r3, r7
 8017086:	4620      	mov	r0, r4
 8017088:	460d      	mov	r5, r1
 801708a:	f7e9 f915 	bl	80002b8 <__aeabi_dsub>
 801708e:	4602      	mov	r2, r0
 8017090:	460b      	mov	r3, r1
 8017092:	4640      	mov	r0, r8
 8017094:	4649      	mov	r1, r9
 8017096:	f7e9 f90f 	bl	80002b8 <__aeabi_dsub>
 801709a:	9b00      	ldr	r3, [sp, #0]
 801709c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801709e:	3b01      	subs	r3, #1
 80170a0:	4313      	orrs	r3, r2
 80170a2:	4682      	mov	sl, r0
 80170a4:	468b      	mov	fp, r1
 80170a6:	f040 81f1 	bne.w	801748c <__ieee754_pow+0x6e4>
 80170aa:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8017168 <__ieee754_pow+0x3c0>
 80170ae:	eeb0 8a47 	vmov.f32	s16, s14
 80170b2:	eef0 8a67 	vmov.f32	s17, s15
 80170b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80170ba:	2600      	movs	r6, #0
 80170bc:	4632      	mov	r2, r6
 80170be:	463b      	mov	r3, r7
 80170c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80170c4:	f7e9 f8f8 	bl	80002b8 <__aeabi_dsub>
 80170c8:	4622      	mov	r2, r4
 80170ca:	462b      	mov	r3, r5
 80170cc:	f7e9 faac 	bl	8000628 <__aeabi_dmul>
 80170d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80170d4:	4680      	mov	r8, r0
 80170d6:	4689      	mov	r9, r1
 80170d8:	4650      	mov	r0, sl
 80170da:	4659      	mov	r1, fp
 80170dc:	f7e9 faa4 	bl	8000628 <__aeabi_dmul>
 80170e0:	4602      	mov	r2, r0
 80170e2:	460b      	mov	r3, r1
 80170e4:	4640      	mov	r0, r8
 80170e6:	4649      	mov	r1, r9
 80170e8:	f7e9 f8e8 	bl	80002bc <__adddf3>
 80170ec:	4632      	mov	r2, r6
 80170ee:	463b      	mov	r3, r7
 80170f0:	4680      	mov	r8, r0
 80170f2:	4689      	mov	r9, r1
 80170f4:	4620      	mov	r0, r4
 80170f6:	4629      	mov	r1, r5
 80170f8:	f7e9 fa96 	bl	8000628 <__aeabi_dmul>
 80170fc:	460b      	mov	r3, r1
 80170fe:	4604      	mov	r4, r0
 8017100:	460d      	mov	r5, r1
 8017102:	4602      	mov	r2, r0
 8017104:	4649      	mov	r1, r9
 8017106:	4640      	mov	r0, r8
 8017108:	f7e9 f8d8 	bl	80002bc <__adddf3>
 801710c:	4b1d      	ldr	r3, [pc, #116]	; (8017184 <__ieee754_pow+0x3dc>)
 801710e:	4299      	cmp	r1, r3
 8017110:	ec45 4b19 	vmov	d9, r4, r5
 8017114:	4606      	mov	r6, r0
 8017116:	460f      	mov	r7, r1
 8017118:	468b      	mov	fp, r1
 801711a:	f340 82fe 	ble.w	801771a <__ieee754_pow+0x972>
 801711e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8017122:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8017126:	4303      	orrs	r3, r0
 8017128:	f000 81f0 	beq.w	801750c <__ieee754_pow+0x764>
 801712c:	a310      	add	r3, pc, #64	; (adr r3, 8017170 <__ieee754_pow+0x3c8>)
 801712e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017132:	ec51 0b18 	vmov	r0, r1, d8
 8017136:	f7e9 fa77 	bl	8000628 <__aeabi_dmul>
 801713a:	a30d      	add	r3, pc, #52	; (adr r3, 8017170 <__ieee754_pow+0x3c8>)
 801713c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017140:	e6cb      	b.n	8016eda <__ieee754_pow+0x132>
 8017142:	bf00      	nop
 8017144:	f3af 8000 	nop.w
 8017148:	60000000 	.word	0x60000000
 801714c:	3ff71547 	.word	0x3ff71547
 8017150:	f85ddf44 	.word	0xf85ddf44
 8017154:	3e54ae0b 	.word	0x3e54ae0b
 8017158:	55555555 	.word	0x55555555
 801715c:	3fd55555 	.word	0x3fd55555
 8017160:	652b82fe 	.word	0x652b82fe
 8017164:	3ff71547 	.word	0x3ff71547
 8017168:	00000000 	.word	0x00000000
 801716c:	bff00000 	.word	0xbff00000
 8017170:	8800759c 	.word	0x8800759c
 8017174:	7e37e43c 	.word	0x7e37e43c
 8017178:	3ff00000 	.word	0x3ff00000
 801717c:	3fd00000 	.word	0x3fd00000
 8017180:	3fe00000 	.word	0x3fe00000
 8017184:	408fffff 	.word	0x408fffff
 8017188:	4bd7      	ldr	r3, [pc, #860]	; (80174e8 <__ieee754_pow+0x740>)
 801718a:	ea03 0309 	and.w	r3, r3, r9
 801718e:	2200      	movs	r2, #0
 8017190:	b92b      	cbnz	r3, 801719e <__ieee754_pow+0x3f6>
 8017192:	4bd6      	ldr	r3, [pc, #856]	; (80174ec <__ieee754_pow+0x744>)
 8017194:	f7e9 fa48 	bl	8000628 <__aeabi_dmul>
 8017198:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801719c:	460c      	mov	r4, r1
 801719e:	1523      	asrs	r3, r4, #20
 80171a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80171a4:	4413      	add	r3, r2
 80171a6:	9309      	str	r3, [sp, #36]	; 0x24
 80171a8:	4bd1      	ldr	r3, [pc, #836]	; (80174f0 <__ieee754_pow+0x748>)
 80171aa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80171ae:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80171b2:	429c      	cmp	r4, r3
 80171b4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80171b8:	dd08      	ble.n	80171cc <__ieee754_pow+0x424>
 80171ba:	4bce      	ldr	r3, [pc, #824]	; (80174f4 <__ieee754_pow+0x74c>)
 80171bc:	429c      	cmp	r4, r3
 80171be:	f340 8163 	ble.w	8017488 <__ieee754_pow+0x6e0>
 80171c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171c4:	3301      	adds	r3, #1
 80171c6:	9309      	str	r3, [sp, #36]	; 0x24
 80171c8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80171cc:	2400      	movs	r4, #0
 80171ce:	00e3      	lsls	r3, r4, #3
 80171d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80171d2:	4bc9      	ldr	r3, [pc, #804]	; (80174f8 <__ieee754_pow+0x750>)
 80171d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80171d8:	ed93 7b00 	vldr	d7, [r3]
 80171dc:	4629      	mov	r1, r5
 80171de:	ec53 2b17 	vmov	r2, r3, d7
 80171e2:	eeb0 8a47 	vmov.f32	s16, s14
 80171e6:	eef0 8a67 	vmov.f32	s17, s15
 80171ea:	4682      	mov	sl, r0
 80171ec:	f7e9 f864 	bl	80002b8 <__aeabi_dsub>
 80171f0:	4652      	mov	r2, sl
 80171f2:	4606      	mov	r6, r0
 80171f4:	460f      	mov	r7, r1
 80171f6:	462b      	mov	r3, r5
 80171f8:	ec51 0b18 	vmov	r0, r1, d8
 80171fc:	f7e9 f85e 	bl	80002bc <__adddf3>
 8017200:	4602      	mov	r2, r0
 8017202:	460b      	mov	r3, r1
 8017204:	2000      	movs	r0, #0
 8017206:	49bd      	ldr	r1, [pc, #756]	; (80174fc <__ieee754_pow+0x754>)
 8017208:	f7e9 fb38 	bl	800087c <__aeabi_ddiv>
 801720c:	ec41 0b19 	vmov	d9, r0, r1
 8017210:	4602      	mov	r2, r0
 8017212:	460b      	mov	r3, r1
 8017214:	4630      	mov	r0, r6
 8017216:	4639      	mov	r1, r7
 8017218:	f7e9 fa06 	bl	8000628 <__aeabi_dmul>
 801721c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8017220:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017224:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8017228:	2300      	movs	r3, #0
 801722a:	9304      	str	r3, [sp, #16]
 801722c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8017230:	46ab      	mov	fp, r5
 8017232:	106d      	asrs	r5, r5, #1
 8017234:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8017238:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801723c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8017240:	2200      	movs	r2, #0
 8017242:	4640      	mov	r0, r8
 8017244:	4649      	mov	r1, r9
 8017246:	4614      	mov	r4, r2
 8017248:	461d      	mov	r5, r3
 801724a:	f7e9 f9ed 	bl	8000628 <__aeabi_dmul>
 801724e:	4602      	mov	r2, r0
 8017250:	460b      	mov	r3, r1
 8017252:	4630      	mov	r0, r6
 8017254:	4639      	mov	r1, r7
 8017256:	f7e9 f82f 	bl	80002b8 <__aeabi_dsub>
 801725a:	ec53 2b18 	vmov	r2, r3, d8
 801725e:	4606      	mov	r6, r0
 8017260:	460f      	mov	r7, r1
 8017262:	4620      	mov	r0, r4
 8017264:	4629      	mov	r1, r5
 8017266:	f7e9 f827 	bl	80002b8 <__aeabi_dsub>
 801726a:	4602      	mov	r2, r0
 801726c:	460b      	mov	r3, r1
 801726e:	4650      	mov	r0, sl
 8017270:	4659      	mov	r1, fp
 8017272:	f7e9 f821 	bl	80002b8 <__aeabi_dsub>
 8017276:	4642      	mov	r2, r8
 8017278:	464b      	mov	r3, r9
 801727a:	f7e9 f9d5 	bl	8000628 <__aeabi_dmul>
 801727e:	4602      	mov	r2, r0
 8017280:	460b      	mov	r3, r1
 8017282:	4630      	mov	r0, r6
 8017284:	4639      	mov	r1, r7
 8017286:	f7e9 f817 	bl	80002b8 <__aeabi_dsub>
 801728a:	ec53 2b19 	vmov	r2, r3, d9
 801728e:	f7e9 f9cb 	bl	8000628 <__aeabi_dmul>
 8017292:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017296:	ec41 0b18 	vmov	d8, r0, r1
 801729a:	4610      	mov	r0, r2
 801729c:	4619      	mov	r1, r3
 801729e:	f7e9 f9c3 	bl	8000628 <__aeabi_dmul>
 80172a2:	a37d      	add	r3, pc, #500	; (adr r3, 8017498 <__ieee754_pow+0x6f0>)
 80172a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172a8:	4604      	mov	r4, r0
 80172aa:	460d      	mov	r5, r1
 80172ac:	f7e9 f9bc 	bl	8000628 <__aeabi_dmul>
 80172b0:	a37b      	add	r3, pc, #492	; (adr r3, 80174a0 <__ieee754_pow+0x6f8>)
 80172b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172b6:	f7e9 f801 	bl	80002bc <__adddf3>
 80172ba:	4622      	mov	r2, r4
 80172bc:	462b      	mov	r3, r5
 80172be:	f7e9 f9b3 	bl	8000628 <__aeabi_dmul>
 80172c2:	a379      	add	r3, pc, #484	; (adr r3, 80174a8 <__ieee754_pow+0x700>)
 80172c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172c8:	f7e8 fff8 	bl	80002bc <__adddf3>
 80172cc:	4622      	mov	r2, r4
 80172ce:	462b      	mov	r3, r5
 80172d0:	f7e9 f9aa 	bl	8000628 <__aeabi_dmul>
 80172d4:	a376      	add	r3, pc, #472	; (adr r3, 80174b0 <__ieee754_pow+0x708>)
 80172d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172da:	f7e8 ffef 	bl	80002bc <__adddf3>
 80172de:	4622      	mov	r2, r4
 80172e0:	462b      	mov	r3, r5
 80172e2:	f7e9 f9a1 	bl	8000628 <__aeabi_dmul>
 80172e6:	a374      	add	r3, pc, #464	; (adr r3, 80174b8 <__ieee754_pow+0x710>)
 80172e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172ec:	f7e8 ffe6 	bl	80002bc <__adddf3>
 80172f0:	4622      	mov	r2, r4
 80172f2:	462b      	mov	r3, r5
 80172f4:	f7e9 f998 	bl	8000628 <__aeabi_dmul>
 80172f8:	a371      	add	r3, pc, #452	; (adr r3, 80174c0 <__ieee754_pow+0x718>)
 80172fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172fe:	f7e8 ffdd 	bl	80002bc <__adddf3>
 8017302:	4622      	mov	r2, r4
 8017304:	4606      	mov	r6, r0
 8017306:	460f      	mov	r7, r1
 8017308:	462b      	mov	r3, r5
 801730a:	4620      	mov	r0, r4
 801730c:	4629      	mov	r1, r5
 801730e:	f7e9 f98b 	bl	8000628 <__aeabi_dmul>
 8017312:	4602      	mov	r2, r0
 8017314:	460b      	mov	r3, r1
 8017316:	4630      	mov	r0, r6
 8017318:	4639      	mov	r1, r7
 801731a:	f7e9 f985 	bl	8000628 <__aeabi_dmul>
 801731e:	4642      	mov	r2, r8
 8017320:	4604      	mov	r4, r0
 8017322:	460d      	mov	r5, r1
 8017324:	464b      	mov	r3, r9
 8017326:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801732a:	f7e8 ffc7 	bl	80002bc <__adddf3>
 801732e:	ec53 2b18 	vmov	r2, r3, d8
 8017332:	f7e9 f979 	bl	8000628 <__aeabi_dmul>
 8017336:	4622      	mov	r2, r4
 8017338:	462b      	mov	r3, r5
 801733a:	f7e8 ffbf 	bl	80002bc <__adddf3>
 801733e:	4642      	mov	r2, r8
 8017340:	4682      	mov	sl, r0
 8017342:	468b      	mov	fp, r1
 8017344:	464b      	mov	r3, r9
 8017346:	4640      	mov	r0, r8
 8017348:	4649      	mov	r1, r9
 801734a:	f7e9 f96d 	bl	8000628 <__aeabi_dmul>
 801734e:	4b6c      	ldr	r3, [pc, #432]	; (8017500 <__ieee754_pow+0x758>)
 8017350:	2200      	movs	r2, #0
 8017352:	4606      	mov	r6, r0
 8017354:	460f      	mov	r7, r1
 8017356:	f7e8 ffb1 	bl	80002bc <__adddf3>
 801735a:	4652      	mov	r2, sl
 801735c:	465b      	mov	r3, fp
 801735e:	f7e8 ffad 	bl	80002bc <__adddf3>
 8017362:	9c04      	ldr	r4, [sp, #16]
 8017364:	460d      	mov	r5, r1
 8017366:	4622      	mov	r2, r4
 8017368:	460b      	mov	r3, r1
 801736a:	4640      	mov	r0, r8
 801736c:	4649      	mov	r1, r9
 801736e:	f7e9 f95b 	bl	8000628 <__aeabi_dmul>
 8017372:	4b63      	ldr	r3, [pc, #396]	; (8017500 <__ieee754_pow+0x758>)
 8017374:	4680      	mov	r8, r0
 8017376:	4689      	mov	r9, r1
 8017378:	2200      	movs	r2, #0
 801737a:	4620      	mov	r0, r4
 801737c:	4629      	mov	r1, r5
 801737e:	f7e8 ff9b 	bl	80002b8 <__aeabi_dsub>
 8017382:	4632      	mov	r2, r6
 8017384:	463b      	mov	r3, r7
 8017386:	f7e8 ff97 	bl	80002b8 <__aeabi_dsub>
 801738a:	4602      	mov	r2, r0
 801738c:	460b      	mov	r3, r1
 801738e:	4650      	mov	r0, sl
 8017390:	4659      	mov	r1, fp
 8017392:	f7e8 ff91 	bl	80002b8 <__aeabi_dsub>
 8017396:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801739a:	f7e9 f945 	bl	8000628 <__aeabi_dmul>
 801739e:	4622      	mov	r2, r4
 80173a0:	4606      	mov	r6, r0
 80173a2:	460f      	mov	r7, r1
 80173a4:	462b      	mov	r3, r5
 80173a6:	ec51 0b18 	vmov	r0, r1, d8
 80173aa:	f7e9 f93d 	bl	8000628 <__aeabi_dmul>
 80173ae:	4602      	mov	r2, r0
 80173b0:	460b      	mov	r3, r1
 80173b2:	4630      	mov	r0, r6
 80173b4:	4639      	mov	r1, r7
 80173b6:	f7e8 ff81 	bl	80002bc <__adddf3>
 80173ba:	4606      	mov	r6, r0
 80173bc:	460f      	mov	r7, r1
 80173be:	4602      	mov	r2, r0
 80173c0:	460b      	mov	r3, r1
 80173c2:	4640      	mov	r0, r8
 80173c4:	4649      	mov	r1, r9
 80173c6:	f7e8 ff79 	bl	80002bc <__adddf3>
 80173ca:	9c04      	ldr	r4, [sp, #16]
 80173cc:	a33e      	add	r3, pc, #248	; (adr r3, 80174c8 <__ieee754_pow+0x720>)
 80173ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173d2:	4620      	mov	r0, r4
 80173d4:	460d      	mov	r5, r1
 80173d6:	f7e9 f927 	bl	8000628 <__aeabi_dmul>
 80173da:	4642      	mov	r2, r8
 80173dc:	ec41 0b18 	vmov	d8, r0, r1
 80173e0:	464b      	mov	r3, r9
 80173e2:	4620      	mov	r0, r4
 80173e4:	4629      	mov	r1, r5
 80173e6:	f7e8 ff67 	bl	80002b8 <__aeabi_dsub>
 80173ea:	4602      	mov	r2, r0
 80173ec:	460b      	mov	r3, r1
 80173ee:	4630      	mov	r0, r6
 80173f0:	4639      	mov	r1, r7
 80173f2:	f7e8 ff61 	bl	80002b8 <__aeabi_dsub>
 80173f6:	a336      	add	r3, pc, #216	; (adr r3, 80174d0 <__ieee754_pow+0x728>)
 80173f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173fc:	f7e9 f914 	bl	8000628 <__aeabi_dmul>
 8017400:	a335      	add	r3, pc, #212	; (adr r3, 80174d8 <__ieee754_pow+0x730>)
 8017402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017406:	4606      	mov	r6, r0
 8017408:	460f      	mov	r7, r1
 801740a:	4620      	mov	r0, r4
 801740c:	4629      	mov	r1, r5
 801740e:	f7e9 f90b 	bl	8000628 <__aeabi_dmul>
 8017412:	4602      	mov	r2, r0
 8017414:	460b      	mov	r3, r1
 8017416:	4630      	mov	r0, r6
 8017418:	4639      	mov	r1, r7
 801741a:	f7e8 ff4f 	bl	80002bc <__adddf3>
 801741e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017420:	4b38      	ldr	r3, [pc, #224]	; (8017504 <__ieee754_pow+0x75c>)
 8017422:	4413      	add	r3, r2
 8017424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017428:	f7e8 ff48 	bl	80002bc <__adddf3>
 801742c:	4682      	mov	sl, r0
 801742e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017430:	468b      	mov	fp, r1
 8017432:	f7e9 f88f 	bl	8000554 <__aeabi_i2d>
 8017436:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017438:	4b33      	ldr	r3, [pc, #204]	; (8017508 <__ieee754_pow+0x760>)
 801743a:	4413      	add	r3, r2
 801743c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017440:	4606      	mov	r6, r0
 8017442:	460f      	mov	r7, r1
 8017444:	4652      	mov	r2, sl
 8017446:	465b      	mov	r3, fp
 8017448:	ec51 0b18 	vmov	r0, r1, d8
 801744c:	f7e8 ff36 	bl	80002bc <__adddf3>
 8017450:	4642      	mov	r2, r8
 8017452:	464b      	mov	r3, r9
 8017454:	f7e8 ff32 	bl	80002bc <__adddf3>
 8017458:	4632      	mov	r2, r6
 801745a:	463b      	mov	r3, r7
 801745c:	f7e8 ff2e 	bl	80002bc <__adddf3>
 8017460:	9c04      	ldr	r4, [sp, #16]
 8017462:	4632      	mov	r2, r6
 8017464:	463b      	mov	r3, r7
 8017466:	4620      	mov	r0, r4
 8017468:	460d      	mov	r5, r1
 801746a:	f7e8 ff25 	bl	80002b8 <__aeabi_dsub>
 801746e:	4642      	mov	r2, r8
 8017470:	464b      	mov	r3, r9
 8017472:	f7e8 ff21 	bl	80002b8 <__aeabi_dsub>
 8017476:	ec53 2b18 	vmov	r2, r3, d8
 801747a:	f7e8 ff1d 	bl	80002b8 <__aeabi_dsub>
 801747e:	4602      	mov	r2, r0
 8017480:	460b      	mov	r3, r1
 8017482:	4650      	mov	r0, sl
 8017484:	4659      	mov	r1, fp
 8017486:	e606      	b.n	8017096 <__ieee754_pow+0x2ee>
 8017488:	2401      	movs	r4, #1
 801748a:	e6a0      	b.n	80171ce <__ieee754_pow+0x426>
 801748c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80174e0 <__ieee754_pow+0x738>
 8017490:	e60d      	b.n	80170ae <__ieee754_pow+0x306>
 8017492:	bf00      	nop
 8017494:	f3af 8000 	nop.w
 8017498:	4a454eef 	.word	0x4a454eef
 801749c:	3fca7e28 	.word	0x3fca7e28
 80174a0:	93c9db65 	.word	0x93c9db65
 80174a4:	3fcd864a 	.word	0x3fcd864a
 80174a8:	a91d4101 	.word	0xa91d4101
 80174ac:	3fd17460 	.word	0x3fd17460
 80174b0:	518f264d 	.word	0x518f264d
 80174b4:	3fd55555 	.word	0x3fd55555
 80174b8:	db6fabff 	.word	0xdb6fabff
 80174bc:	3fdb6db6 	.word	0x3fdb6db6
 80174c0:	33333303 	.word	0x33333303
 80174c4:	3fe33333 	.word	0x3fe33333
 80174c8:	e0000000 	.word	0xe0000000
 80174cc:	3feec709 	.word	0x3feec709
 80174d0:	dc3a03fd 	.word	0xdc3a03fd
 80174d4:	3feec709 	.word	0x3feec709
 80174d8:	145b01f5 	.word	0x145b01f5
 80174dc:	be3e2fe0 	.word	0xbe3e2fe0
 80174e0:	00000000 	.word	0x00000000
 80174e4:	3ff00000 	.word	0x3ff00000
 80174e8:	7ff00000 	.word	0x7ff00000
 80174ec:	43400000 	.word	0x43400000
 80174f0:	0003988e 	.word	0x0003988e
 80174f4:	000bb679 	.word	0x000bb679
 80174f8:	08018628 	.word	0x08018628
 80174fc:	3ff00000 	.word	0x3ff00000
 8017500:	40080000 	.word	0x40080000
 8017504:	08018648 	.word	0x08018648
 8017508:	08018638 	.word	0x08018638
 801750c:	a3b5      	add	r3, pc, #724	; (adr r3, 80177e4 <__ieee754_pow+0xa3c>)
 801750e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017512:	4640      	mov	r0, r8
 8017514:	4649      	mov	r1, r9
 8017516:	f7e8 fed1 	bl	80002bc <__adddf3>
 801751a:	4622      	mov	r2, r4
 801751c:	ec41 0b1a 	vmov	d10, r0, r1
 8017520:	462b      	mov	r3, r5
 8017522:	4630      	mov	r0, r6
 8017524:	4639      	mov	r1, r7
 8017526:	f7e8 fec7 	bl	80002b8 <__aeabi_dsub>
 801752a:	4602      	mov	r2, r0
 801752c:	460b      	mov	r3, r1
 801752e:	ec51 0b1a 	vmov	r0, r1, d10
 8017532:	f7e9 fb09 	bl	8000b48 <__aeabi_dcmpgt>
 8017536:	2800      	cmp	r0, #0
 8017538:	f47f adf8 	bne.w	801712c <__ieee754_pow+0x384>
 801753c:	4aa4      	ldr	r2, [pc, #656]	; (80177d0 <__ieee754_pow+0xa28>)
 801753e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017542:	4293      	cmp	r3, r2
 8017544:	f340 810b 	ble.w	801775e <__ieee754_pow+0x9b6>
 8017548:	151b      	asrs	r3, r3, #20
 801754a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801754e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8017552:	fa4a f303 	asr.w	r3, sl, r3
 8017556:	445b      	add	r3, fp
 8017558:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801755c:	4e9d      	ldr	r6, [pc, #628]	; (80177d4 <__ieee754_pow+0xa2c>)
 801755e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8017562:	4116      	asrs	r6, r2
 8017564:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8017568:	2000      	movs	r0, #0
 801756a:	ea23 0106 	bic.w	r1, r3, r6
 801756e:	f1c2 0214 	rsb	r2, r2, #20
 8017572:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8017576:	fa4a fa02 	asr.w	sl, sl, r2
 801757a:	f1bb 0f00 	cmp.w	fp, #0
 801757e:	4602      	mov	r2, r0
 8017580:	460b      	mov	r3, r1
 8017582:	4620      	mov	r0, r4
 8017584:	4629      	mov	r1, r5
 8017586:	bfb8      	it	lt
 8017588:	f1ca 0a00 	rsblt	sl, sl, #0
 801758c:	f7e8 fe94 	bl	80002b8 <__aeabi_dsub>
 8017590:	ec41 0b19 	vmov	d9, r0, r1
 8017594:	4642      	mov	r2, r8
 8017596:	464b      	mov	r3, r9
 8017598:	ec51 0b19 	vmov	r0, r1, d9
 801759c:	f7e8 fe8e 	bl	80002bc <__adddf3>
 80175a0:	2400      	movs	r4, #0
 80175a2:	a379      	add	r3, pc, #484	; (adr r3, 8017788 <__ieee754_pow+0x9e0>)
 80175a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175a8:	4620      	mov	r0, r4
 80175aa:	460d      	mov	r5, r1
 80175ac:	f7e9 f83c 	bl	8000628 <__aeabi_dmul>
 80175b0:	ec53 2b19 	vmov	r2, r3, d9
 80175b4:	4606      	mov	r6, r0
 80175b6:	460f      	mov	r7, r1
 80175b8:	4620      	mov	r0, r4
 80175ba:	4629      	mov	r1, r5
 80175bc:	f7e8 fe7c 	bl	80002b8 <__aeabi_dsub>
 80175c0:	4602      	mov	r2, r0
 80175c2:	460b      	mov	r3, r1
 80175c4:	4640      	mov	r0, r8
 80175c6:	4649      	mov	r1, r9
 80175c8:	f7e8 fe76 	bl	80002b8 <__aeabi_dsub>
 80175cc:	a370      	add	r3, pc, #448	; (adr r3, 8017790 <__ieee754_pow+0x9e8>)
 80175ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175d2:	f7e9 f829 	bl	8000628 <__aeabi_dmul>
 80175d6:	a370      	add	r3, pc, #448	; (adr r3, 8017798 <__ieee754_pow+0x9f0>)
 80175d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175dc:	4680      	mov	r8, r0
 80175de:	4689      	mov	r9, r1
 80175e0:	4620      	mov	r0, r4
 80175e2:	4629      	mov	r1, r5
 80175e4:	f7e9 f820 	bl	8000628 <__aeabi_dmul>
 80175e8:	4602      	mov	r2, r0
 80175ea:	460b      	mov	r3, r1
 80175ec:	4640      	mov	r0, r8
 80175ee:	4649      	mov	r1, r9
 80175f0:	f7e8 fe64 	bl	80002bc <__adddf3>
 80175f4:	4604      	mov	r4, r0
 80175f6:	460d      	mov	r5, r1
 80175f8:	4602      	mov	r2, r0
 80175fa:	460b      	mov	r3, r1
 80175fc:	4630      	mov	r0, r6
 80175fe:	4639      	mov	r1, r7
 8017600:	f7e8 fe5c 	bl	80002bc <__adddf3>
 8017604:	4632      	mov	r2, r6
 8017606:	463b      	mov	r3, r7
 8017608:	4680      	mov	r8, r0
 801760a:	4689      	mov	r9, r1
 801760c:	f7e8 fe54 	bl	80002b8 <__aeabi_dsub>
 8017610:	4602      	mov	r2, r0
 8017612:	460b      	mov	r3, r1
 8017614:	4620      	mov	r0, r4
 8017616:	4629      	mov	r1, r5
 8017618:	f7e8 fe4e 	bl	80002b8 <__aeabi_dsub>
 801761c:	4642      	mov	r2, r8
 801761e:	4606      	mov	r6, r0
 8017620:	460f      	mov	r7, r1
 8017622:	464b      	mov	r3, r9
 8017624:	4640      	mov	r0, r8
 8017626:	4649      	mov	r1, r9
 8017628:	f7e8 fffe 	bl	8000628 <__aeabi_dmul>
 801762c:	a35c      	add	r3, pc, #368	; (adr r3, 80177a0 <__ieee754_pow+0x9f8>)
 801762e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017632:	4604      	mov	r4, r0
 8017634:	460d      	mov	r5, r1
 8017636:	f7e8 fff7 	bl	8000628 <__aeabi_dmul>
 801763a:	a35b      	add	r3, pc, #364	; (adr r3, 80177a8 <__ieee754_pow+0xa00>)
 801763c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017640:	f7e8 fe3a 	bl	80002b8 <__aeabi_dsub>
 8017644:	4622      	mov	r2, r4
 8017646:	462b      	mov	r3, r5
 8017648:	f7e8 ffee 	bl	8000628 <__aeabi_dmul>
 801764c:	a358      	add	r3, pc, #352	; (adr r3, 80177b0 <__ieee754_pow+0xa08>)
 801764e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017652:	f7e8 fe33 	bl	80002bc <__adddf3>
 8017656:	4622      	mov	r2, r4
 8017658:	462b      	mov	r3, r5
 801765a:	f7e8 ffe5 	bl	8000628 <__aeabi_dmul>
 801765e:	a356      	add	r3, pc, #344	; (adr r3, 80177b8 <__ieee754_pow+0xa10>)
 8017660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017664:	f7e8 fe28 	bl	80002b8 <__aeabi_dsub>
 8017668:	4622      	mov	r2, r4
 801766a:	462b      	mov	r3, r5
 801766c:	f7e8 ffdc 	bl	8000628 <__aeabi_dmul>
 8017670:	a353      	add	r3, pc, #332	; (adr r3, 80177c0 <__ieee754_pow+0xa18>)
 8017672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017676:	f7e8 fe21 	bl	80002bc <__adddf3>
 801767a:	4622      	mov	r2, r4
 801767c:	462b      	mov	r3, r5
 801767e:	f7e8 ffd3 	bl	8000628 <__aeabi_dmul>
 8017682:	4602      	mov	r2, r0
 8017684:	460b      	mov	r3, r1
 8017686:	4640      	mov	r0, r8
 8017688:	4649      	mov	r1, r9
 801768a:	f7e8 fe15 	bl	80002b8 <__aeabi_dsub>
 801768e:	4604      	mov	r4, r0
 8017690:	460d      	mov	r5, r1
 8017692:	4602      	mov	r2, r0
 8017694:	460b      	mov	r3, r1
 8017696:	4640      	mov	r0, r8
 8017698:	4649      	mov	r1, r9
 801769a:	f7e8 ffc5 	bl	8000628 <__aeabi_dmul>
 801769e:	2200      	movs	r2, #0
 80176a0:	ec41 0b19 	vmov	d9, r0, r1
 80176a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80176a8:	4620      	mov	r0, r4
 80176aa:	4629      	mov	r1, r5
 80176ac:	f7e8 fe04 	bl	80002b8 <__aeabi_dsub>
 80176b0:	4602      	mov	r2, r0
 80176b2:	460b      	mov	r3, r1
 80176b4:	ec51 0b19 	vmov	r0, r1, d9
 80176b8:	f7e9 f8e0 	bl	800087c <__aeabi_ddiv>
 80176bc:	4632      	mov	r2, r6
 80176be:	4604      	mov	r4, r0
 80176c0:	460d      	mov	r5, r1
 80176c2:	463b      	mov	r3, r7
 80176c4:	4640      	mov	r0, r8
 80176c6:	4649      	mov	r1, r9
 80176c8:	f7e8 ffae 	bl	8000628 <__aeabi_dmul>
 80176cc:	4632      	mov	r2, r6
 80176ce:	463b      	mov	r3, r7
 80176d0:	f7e8 fdf4 	bl	80002bc <__adddf3>
 80176d4:	4602      	mov	r2, r0
 80176d6:	460b      	mov	r3, r1
 80176d8:	4620      	mov	r0, r4
 80176da:	4629      	mov	r1, r5
 80176dc:	f7e8 fdec 	bl	80002b8 <__aeabi_dsub>
 80176e0:	4642      	mov	r2, r8
 80176e2:	464b      	mov	r3, r9
 80176e4:	f7e8 fde8 	bl	80002b8 <__aeabi_dsub>
 80176e8:	460b      	mov	r3, r1
 80176ea:	4602      	mov	r2, r0
 80176ec:	493a      	ldr	r1, [pc, #232]	; (80177d8 <__ieee754_pow+0xa30>)
 80176ee:	2000      	movs	r0, #0
 80176f0:	f7e8 fde2 	bl	80002b8 <__aeabi_dsub>
 80176f4:	e9cd 0100 	strd	r0, r1, [sp]
 80176f8:	9b01      	ldr	r3, [sp, #4]
 80176fa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80176fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8017702:	da2f      	bge.n	8017764 <__ieee754_pow+0x9bc>
 8017704:	4650      	mov	r0, sl
 8017706:	ed9d 0b00 	vldr	d0, [sp]
 801770a:	f000 f9c1 	bl	8017a90 <scalbn>
 801770e:	ec51 0b10 	vmov	r0, r1, d0
 8017712:	ec53 2b18 	vmov	r2, r3, d8
 8017716:	f7ff bbe0 	b.w	8016eda <__ieee754_pow+0x132>
 801771a:	4b30      	ldr	r3, [pc, #192]	; (80177dc <__ieee754_pow+0xa34>)
 801771c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8017720:	429e      	cmp	r6, r3
 8017722:	f77f af0b 	ble.w	801753c <__ieee754_pow+0x794>
 8017726:	4b2e      	ldr	r3, [pc, #184]	; (80177e0 <__ieee754_pow+0xa38>)
 8017728:	440b      	add	r3, r1
 801772a:	4303      	orrs	r3, r0
 801772c:	d00b      	beq.n	8017746 <__ieee754_pow+0x99e>
 801772e:	a326      	add	r3, pc, #152	; (adr r3, 80177c8 <__ieee754_pow+0xa20>)
 8017730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017734:	ec51 0b18 	vmov	r0, r1, d8
 8017738:	f7e8 ff76 	bl	8000628 <__aeabi_dmul>
 801773c:	a322      	add	r3, pc, #136	; (adr r3, 80177c8 <__ieee754_pow+0xa20>)
 801773e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017742:	f7ff bbca 	b.w	8016eda <__ieee754_pow+0x132>
 8017746:	4622      	mov	r2, r4
 8017748:	462b      	mov	r3, r5
 801774a:	f7e8 fdb5 	bl	80002b8 <__aeabi_dsub>
 801774e:	4642      	mov	r2, r8
 8017750:	464b      	mov	r3, r9
 8017752:	f7e9 f9ef 	bl	8000b34 <__aeabi_dcmpge>
 8017756:	2800      	cmp	r0, #0
 8017758:	f43f aef0 	beq.w	801753c <__ieee754_pow+0x794>
 801775c:	e7e7      	b.n	801772e <__ieee754_pow+0x986>
 801775e:	f04f 0a00 	mov.w	sl, #0
 8017762:	e717      	b.n	8017594 <__ieee754_pow+0x7ec>
 8017764:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017768:	4619      	mov	r1, r3
 801776a:	e7d2      	b.n	8017712 <__ieee754_pow+0x96a>
 801776c:	491a      	ldr	r1, [pc, #104]	; (80177d8 <__ieee754_pow+0xa30>)
 801776e:	2000      	movs	r0, #0
 8017770:	f7ff bb9e 	b.w	8016eb0 <__ieee754_pow+0x108>
 8017774:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017778:	f7ff bb9a 	b.w	8016eb0 <__ieee754_pow+0x108>
 801777c:	9000      	str	r0, [sp, #0]
 801777e:	f7ff bb76 	b.w	8016e6e <__ieee754_pow+0xc6>
 8017782:	2100      	movs	r1, #0
 8017784:	f7ff bb60 	b.w	8016e48 <__ieee754_pow+0xa0>
 8017788:	00000000 	.word	0x00000000
 801778c:	3fe62e43 	.word	0x3fe62e43
 8017790:	fefa39ef 	.word	0xfefa39ef
 8017794:	3fe62e42 	.word	0x3fe62e42
 8017798:	0ca86c39 	.word	0x0ca86c39
 801779c:	be205c61 	.word	0xbe205c61
 80177a0:	72bea4d0 	.word	0x72bea4d0
 80177a4:	3e663769 	.word	0x3e663769
 80177a8:	c5d26bf1 	.word	0xc5d26bf1
 80177ac:	3ebbbd41 	.word	0x3ebbbd41
 80177b0:	af25de2c 	.word	0xaf25de2c
 80177b4:	3f11566a 	.word	0x3f11566a
 80177b8:	16bebd93 	.word	0x16bebd93
 80177bc:	3f66c16c 	.word	0x3f66c16c
 80177c0:	5555553e 	.word	0x5555553e
 80177c4:	3fc55555 	.word	0x3fc55555
 80177c8:	c2f8f359 	.word	0xc2f8f359
 80177cc:	01a56e1f 	.word	0x01a56e1f
 80177d0:	3fe00000 	.word	0x3fe00000
 80177d4:	000fffff 	.word	0x000fffff
 80177d8:	3ff00000 	.word	0x3ff00000
 80177dc:	4090cbff 	.word	0x4090cbff
 80177e0:	3f6f3400 	.word	0x3f6f3400
 80177e4:	652b82fe 	.word	0x652b82fe
 80177e8:	3c971547 	.word	0x3c971547

080177ec <__ieee754_sqrt>:
 80177ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177f0:	ec55 4b10 	vmov	r4, r5, d0
 80177f4:	4e56      	ldr	r6, [pc, #344]	; (8017950 <__ieee754_sqrt+0x164>)
 80177f6:	43ae      	bics	r6, r5
 80177f8:	ee10 0a10 	vmov	r0, s0
 80177fc:	ee10 3a10 	vmov	r3, s0
 8017800:	4629      	mov	r1, r5
 8017802:	462a      	mov	r2, r5
 8017804:	d110      	bne.n	8017828 <__ieee754_sqrt+0x3c>
 8017806:	ee10 2a10 	vmov	r2, s0
 801780a:	462b      	mov	r3, r5
 801780c:	f7e8 ff0c 	bl	8000628 <__aeabi_dmul>
 8017810:	4602      	mov	r2, r0
 8017812:	460b      	mov	r3, r1
 8017814:	4620      	mov	r0, r4
 8017816:	4629      	mov	r1, r5
 8017818:	f7e8 fd50 	bl	80002bc <__adddf3>
 801781c:	4604      	mov	r4, r0
 801781e:	460d      	mov	r5, r1
 8017820:	ec45 4b10 	vmov	d0, r4, r5
 8017824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017828:	2d00      	cmp	r5, #0
 801782a:	dc10      	bgt.n	801784e <__ieee754_sqrt+0x62>
 801782c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8017830:	4330      	orrs	r0, r6
 8017832:	d0f5      	beq.n	8017820 <__ieee754_sqrt+0x34>
 8017834:	b15d      	cbz	r5, 801784e <__ieee754_sqrt+0x62>
 8017836:	ee10 2a10 	vmov	r2, s0
 801783a:	462b      	mov	r3, r5
 801783c:	ee10 0a10 	vmov	r0, s0
 8017840:	f7e8 fd3a 	bl	80002b8 <__aeabi_dsub>
 8017844:	4602      	mov	r2, r0
 8017846:	460b      	mov	r3, r1
 8017848:	f7e9 f818 	bl	800087c <__aeabi_ddiv>
 801784c:	e7e6      	b.n	801781c <__ieee754_sqrt+0x30>
 801784e:	1509      	asrs	r1, r1, #20
 8017850:	d076      	beq.n	8017940 <__ieee754_sqrt+0x154>
 8017852:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8017856:	07ce      	lsls	r6, r1, #31
 8017858:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801785c:	bf5e      	ittt	pl
 801785e:	0fda      	lsrpl	r2, r3, #31
 8017860:	005b      	lslpl	r3, r3, #1
 8017862:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8017866:	0fda      	lsrs	r2, r3, #31
 8017868:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801786c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8017870:	2000      	movs	r0, #0
 8017872:	106d      	asrs	r5, r5, #1
 8017874:	005b      	lsls	r3, r3, #1
 8017876:	f04f 0e16 	mov.w	lr, #22
 801787a:	4684      	mov	ip, r0
 801787c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8017880:	eb0c 0401 	add.w	r4, ip, r1
 8017884:	4294      	cmp	r4, r2
 8017886:	bfde      	ittt	le
 8017888:	1b12      	suble	r2, r2, r4
 801788a:	eb04 0c01 	addle.w	ip, r4, r1
 801788e:	1840      	addle	r0, r0, r1
 8017890:	0052      	lsls	r2, r2, #1
 8017892:	f1be 0e01 	subs.w	lr, lr, #1
 8017896:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801789a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801789e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80178a2:	d1ed      	bne.n	8017880 <__ieee754_sqrt+0x94>
 80178a4:	4671      	mov	r1, lr
 80178a6:	2720      	movs	r7, #32
 80178a8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80178ac:	4562      	cmp	r2, ip
 80178ae:	eb04 060e 	add.w	r6, r4, lr
 80178b2:	dc02      	bgt.n	80178ba <__ieee754_sqrt+0xce>
 80178b4:	d113      	bne.n	80178de <__ieee754_sqrt+0xf2>
 80178b6:	429e      	cmp	r6, r3
 80178b8:	d811      	bhi.n	80178de <__ieee754_sqrt+0xf2>
 80178ba:	2e00      	cmp	r6, #0
 80178bc:	eb06 0e04 	add.w	lr, r6, r4
 80178c0:	da43      	bge.n	801794a <__ieee754_sqrt+0x15e>
 80178c2:	f1be 0f00 	cmp.w	lr, #0
 80178c6:	db40      	blt.n	801794a <__ieee754_sqrt+0x15e>
 80178c8:	f10c 0801 	add.w	r8, ip, #1
 80178cc:	eba2 020c 	sub.w	r2, r2, ip
 80178d0:	429e      	cmp	r6, r3
 80178d2:	bf88      	it	hi
 80178d4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80178d8:	1b9b      	subs	r3, r3, r6
 80178da:	4421      	add	r1, r4
 80178dc:	46c4      	mov	ip, r8
 80178de:	0052      	lsls	r2, r2, #1
 80178e0:	3f01      	subs	r7, #1
 80178e2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80178e6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80178ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80178ee:	d1dd      	bne.n	80178ac <__ieee754_sqrt+0xc0>
 80178f0:	4313      	orrs	r3, r2
 80178f2:	d006      	beq.n	8017902 <__ieee754_sqrt+0x116>
 80178f4:	1c4c      	adds	r4, r1, #1
 80178f6:	bf13      	iteet	ne
 80178f8:	3101      	addne	r1, #1
 80178fa:	3001      	addeq	r0, #1
 80178fc:	4639      	moveq	r1, r7
 80178fe:	f021 0101 	bicne.w	r1, r1, #1
 8017902:	1043      	asrs	r3, r0, #1
 8017904:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8017908:	0849      	lsrs	r1, r1, #1
 801790a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801790e:	07c2      	lsls	r2, r0, #31
 8017910:	bf48      	it	mi
 8017912:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8017916:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801791a:	460c      	mov	r4, r1
 801791c:	463d      	mov	r5, r7
 801791e:	e77f      	b.n	8017820 <__ieee754_sqrt+0x34>
 8017920:	0ada      	lsrs	r2, r3, #11
 8017922:	3815      	subs	r0, #21
 8017924:	055b      	lsls	r3, r3, #21
 8017926:	2a00      	cmp	r2, #0
 8017928:	d0fa      	beq.n	8017920 <__ieee754_sqrt+0x134>
 801792a:	02d7      	lsls	r7, r2, #11
 801792c:	d50a      	bpl.n	8017944 <__ieee754_sqrt+0x158>
 801792e:	f1c1 0420 	rsb	r4, r1, #32
 8017932:	fa23 f404 	lsr.w	r4, r3, r4
 8017936:	1e4d      	subs	r5, r1, #1
 8017938:	408b      	lsls	r3, r1
 801793a:	4322      	orrs	r2, r4
 801793c:	1b41      	subs	r1, r0, r5
 801793e:	e788      	b.n	8017852 <__ieee754_sqrt+0x66>
 8017940:	4608      	mov	r0, r1
 8017942:	e7f0      	b.n	8017926 <__ieee754_sqrt+0x13a>
 8017944:	0052      	lsls	r2, r2, #1
 8017946:	3101      	adds	r1, #1
 8017948:	e7ef      	b.n	801792a <__ieee754_sqrt+0x13e>
 801794a:	46e0      	mov	r8, ip
 801794c:	e7be      	b.n	80178cc <__ieee754_sqrt+0xe0>
 801794e:	bf00      	nop
 8017950:	7ff00000 	.word	0x7ff00000

08017954 <fabs>:
 8017954:	ec51 0b10 	vmov	r0, r1, d0
 8017958:	ee10 2a10 	vmov	r2, s0
 801795c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017960:	ec43 2b10 	vmov	d0, r2, r3
 8017964:	4770      	bx	lr

08017966 <finite>:
 8017966:	b082      	sub	sp, #8
 8017968:	ed8d 0b00 	vstr	d0, [sp]
 801796c:	9801      	ldr	r0, [sp, #4]
 801796e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8017972:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8017976:	0fc0      	lsrs	r0, r0, #31
 8017978:	b002      	add	sp, #8
 801797a:	4770      	bx	lr

0801797c <rint>:
 801797c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801797e:	ec51 0b10 	vmov	r0, r1, d0
 8017982:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8017986:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801798a:	2e13      	cmp	r6, #19
 801798c:	ee10 4a10 	vmov	r4, s0
 8017990:	460b      	mov	r3, r1
 8017992:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8017996:	dc58      	bgt.n	8017a4a <rint+0xce>
 8017998:	2e00      	cmp	r6, #0
 801799a:	da2b      	bge.n	80179f4 <rint+0x78>
 801799c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80179a0:	4302      	orrs	r2, r0
 80179a2:	d023      	beq.n	80179ec <rint+0x70>
 80179a4:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80179a8:	4302      	orrs	r2, r0
 80179aa:	4254      	negs	r4, r2
 80179ac:	4314      	orrs	r4, r2
 80179ae:	0c4b      	lsrs	r3, r1, #17
 80179b0:	0b24      	lsrs	r4, r4, #12
 80179b2:	045b      	lsls	r3, r3, #17
 80179b4:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80179b8:	ea44 0103 	orr.w	r1, r4, r3
 80179bc:	4b32      	ldr	r3, [pc, #200]	; (8017a88 <rint+0x10c>)
 80179be:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80179c2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80179c6:	4602      	mov	r2, r0
 80179c8:	460b      	mov	r3, r1
 80179ca:	4630      	mov	r0, r6
 80179cc:	4639      	mov	r1, r7
 80179ce:	f7e8 fc75 	bl	80002bc <__adddf3>
 80179d2:	e9cd 0100 	strd	r0, r1, [sp]
 80179d6:	463b      	mov	r3, r7
 80179d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80179dc:	4632      	mov	r2, r6
 80179de:	f7e8 fc6b 	bl	80002b8 <__aeabi_dsub>
 80179e2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80179e6:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80179ea:	4639      	mov	r1, r7
 80179ec:	ec41 0b10 	vmov	d0, r0, r1
 80179f0:	b003      	add	sp, #12
 80179f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179f4:	4a25      	ldr	r2, [pc, #148]	; (8017a8c <rint+0x110>)
 80179f6:	4132      	asrs	r2, r6
 80179f8:	ea01 0702 	and.w	r7, r1, r2
 80179fc:	4307      	orrs	r7, r0
 80179fe:	d0f5      	beq.n	80179ec <rint+0x70>
 8017a00:	0851      	lsrs	r1, r2, #1
 8017a02:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8017a06:	4314      	orrs	r4, r2
 8017a08:	d00c      	beq.n	8017a24 <rint+0xa8>
 8017a0a:	ea23 0201 	bic.w	r2, r3, r1
 8017a0e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8017a12:	2e13      	cmp	r6, #19
 8017a14:	fa43 f606 	asr.w	r6, r3, r6
 8017a18:	bf0c      	ite	eq
 8017a1a:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8017a1e:	2400      	movne	r4, #0
 8017a20:	ea42 0306 	orr.w	r3, r2, r6
 8017a24:	4918      	ldr	r1, [pc, #96]	; (8017a88 <rint+0x10c>)
 8017a26:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8017a2a:	4622      	mov	r2, r4
 8017a2c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8017a30:	4620      	mov	r0, r4
 8017a32:	4629      	mov	r1, r5
 8017a34:	f7e8 fc42 	bl	80002bc <__adddf3>
 8017a38:	e9cd 0100 	strd	r0, r1, [sp]
 8017a3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a40:	4622      	mov	r2, r4
 8017a42:	462b      	mov	r3, r5
 8017a44:	f7e8 fc38 	bl	80002b8 <__aeabi_dsub>
 8017a48:	e7d0      	b.n	80179ec <rint+0x70>
 8017a4a:	2e33      	cmp	r6, #51	; 0x33
 8017a4c:	dd07      	ble.n	8017a5e <rint+0xe2>
 8017a4e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8017a52:	d1cb      	bne.n	80179ec <rint+0x70>
 8017a54:	ee10 2a10 	vmov	r2, s0
 8017a58:	f7e8 fc30 	bl	80002bc <__adddf3>
 8017a5c:	e7c6      	b.n	80179ec <rint+0x70>
 8017a5e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8017a62:	f04f 36ff 	mov.w	r6, #4294967295
 8017a66:	40d6      	lsrs	r6, r2
 8017a68:	4230      	tst	r0, r6
 8017a6a:	d0bf      	beq.n	80179ec <rint+0x70>
 8017a6c:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8017a70:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8017a74:	bf1f      	itttt	ne
 8017a76:	ea24 0101 	bicne.w	r1, r4, r1
 8017a7a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8017a7e:	fa44 f202 	asrne.w	r2, r4, r2
 8017a82:	ea41 0402 	orrne.w	r4, r1, r2
 8017a86:	e7cd      	b.n	8017a24 <rint+0xa8>
 8017a88:	08018658 	.word	0x08018658
 8017a8c:	000fffff 	.word	0x000fffff

08017a90 <scalbn>:
 8017a90:	b570      	push	{r4, r5, r6, lr}
 8017a92:	ec55 4b10 	vmov	r4, r5, d0
 8017a96:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8017a9a:	4606      	mov	r6, r0
 8017a9c:	462b      	mov	r3, r5
 8017a9e:	b99a      	cbnz	r2, 8017ac8 <scalbn+0x38>
 8017aa0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8017aa4:	4323      	orrs	r3, r4
 8017aa6:	d036      	beq.n	8017b16 <scalbn+0x86>
 8017aa8:	4b39      	ldr	r3, [pc, #228]	; (8017b90 <scalbn+0x100>)
 8017aaa:	4629      	mov	r1, r5
 8017aac:	ee10 0a10 	vmov	r0, s0
 8017ab0:	2200      	movs	r2, #0
 8017ab2:	f7e8 fdb9 	bl	8000628 <__aeabi_dmul>
 8017ab6:	4b37      	ldr	r3, [pc, #220]	; (8017b94 <scalbn+0x104>)
 8017ab8:	429e      	cmp	r6, r3
 8017aba:	4604      	mov	r4, r0
 8017abc:	460d      	mov	r5, r1
 8017abe:	da10      	bge.n	8017ae2 <scalbn+0x52>
 8017ac0:	a32b      	add	r3, pc, #172	; (adr r3, 8017b70 <scalbn+0xe0>)
 8017ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ac6:	e03a      	b.n	8017b3e <scalbn+0xae>
 8017ac8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8017acc:	428a      	cmp	r2, r1
 8017ace:	d10c      	bne.n	8017aea <scalbn+0x5a>
 8017ad0:	ee10 2a10 	vmov	r2, s0
 8017ad4:	4620      	mov	r0, r4
 8017ad6:	4629      	mov	r1, r5
 8017ad8:	f7e8 fbf0 	bl	80002bc <__adddf3>
 8017adc:	4604      	mov	r4, r0
 8017ade:	460d      	mov	r5, r1
 8017ae0:	e019      	b.n	8017b16 <scalbn+0x86>
 8017ae2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8017ae6:	460b      	mov	r3, r1
 8017ae8:	3a36      	subs	r2, #54	; 0x36
 8017aea:	4432      	add	r2, r6
 8017aec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8017af0:	428a      	cmp	r2, r1
 8017af2:	dd08      	ble.n	8017b06 <scalbn+0x76>
 8017af4:	2d00      	cmp	r5, #0
 8017af6:	a120      	add	r1, pc, #128	; (adr r1, 8017b78 <scalbn+0xe8>)
 8017af8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017afc:	da1c      	bge.n	8017b38 <scalbn+0xa8>
 8017afe:	a120      	add	r1, pc, #128	; (adr r1, 8017b80 <scalbn+0xf0>)
 8017b00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017b04:	e018      	b.n	8017b38 <scalbn+0xa8>
 8017b06:	2a00      	cmp	r2, #0
 8017b08:	dd08      	ble.n	8017b1c <scalbn+0x8c>
 8017b0a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017b0e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017b12:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017b16:	ec45 4b10 	vmov	d0, r4, r5
 8017b1a:	bd70      	pop	{r4, r5, r6, pc}
 8017b1c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8017b20:	da19      	bge.n	8017b56 <scalbn+0xc6>
 8017b22:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017b26:	429e      	cmp	r6, r3
 8017b28:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8017b2c:	dd0a      	ble.n	8017b44 <scalbn+0xb4>
 8017b2e:	a112      	add	r1, pc, #72	; (adr r1, 8017b78 <scalbn+0xe8>)
 8017b30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d1e2      	bne.n	8017afe <scalbn+0x6e>
 8017b38:	a30f      	add	r3, pc, #60	; (adr r3, 8017b78 <scalbn+0xe8>)
 8017b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b3e:	f7e8 fd73 	bl	8000628 <__aeabi_dmul>
 8017b42:	e7cb      	b.n	8017adc <scalbn+0x4c>
 8017b44:	a10a      	add	r1, pc, #40	; (adr r1, 8017b70 <scalbn+0xe0>)
 8017b46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d0b8      	beq.n	8017ac0 <scalbn+0x30>
 8017b4e:	a10e      	add	r1, pc, #56	; (adr r1, 8017b88 <scalbn+0xf8>)
 8017b50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017b54:	e7b4      	b.n	8017ac0 <scalbn+0x30>
 8017b56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017b5a:	3236      	adds	r2, #54	; 0x36
 8017b5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017b60:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8017b64:	4620      	mov	r0, r4
 8017b66:	4b0c      	ldr	r3, [pc, #48]	; (8017b98 <scalbn+0x108>)
 8017b68:	2200      	movs	r2, #0
 8017b6a:	e7e8      	b.n	8017b3e <scalbn+0xae>
 8017b6c:	f3af 8000 	nop.w
 8017b70:	c2f8f359 	.word	0xc2f8f359
 8017b74:	01a56e1f 	.word	0x01a56e1f
 8017b78:	8800759c 	.word	0x8800759c
 8017b7c:	7e37e43c 	.word	0x7e37e43c
 8017b80:	8800759c 	.word	0x8800759c
 8017b84:	fe37e43c 	.word	0xfe37e43c
 8017b88:	c2f8f359 	.word	0xc2f8f359
 8017b8c:	81a56e1f 	.word	0x81a56e1f
 8017b90:	43500000 	.word	0x43500000
 8017b94:	ffff3cb0 	.word	0xffff3cb0
 8017b98:	3c900000 	.word	0x3c900000

08017b9c <_init>:
 8017b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b9e:	bf00      	nop
 8017ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017ba2:	bc08      	pop	{r3}
 8017ba4:	469e      	mov	lr, r3
 8017ba6:	4770      	bx	lr

08017ba8 <_fini>:
 8017ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017baa:	bf00      	nop
 8017bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017bae:	bc08      	pop	{r3}
 8017bb0:	469e      	mov	lr, r3
 8017bb2:	4770      	bx	lr
