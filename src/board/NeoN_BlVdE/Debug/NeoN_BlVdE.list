
NeoN_BlVdE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000148ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a98  08014a50  08014a50  00024a50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080154e8  080154e8  00030230  2**0
                  CONTENTS
  4 .ARM          00000008  080154e8  080154e8  000254e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080154f0  080154f0  00030230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080154f0  080154f0  000254f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080154f4  080154f4  000254f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  080154f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004974  20000230  08015728  00030230  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004ba4  08015728  00034ba4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030fe4  00000000  00000000  00030260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f48  00000000  00000000  00061244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f68  00000000  00000000  00066190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e98  00000000  00000000  000680f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ccd2  00000000  00000000  00069f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023586  00000000  00000000  00086c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bd63  00000000  00000000  000aa1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00145f4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009cbc  00000000  00000000  00145fa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000230 	.word	0x20000230
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08014a34 	.word	0x08014a34

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000234 	.word	0x20000234
 80001dc:	08014a34 	.word	0x08014a34

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <_write>:
	}
	return crc;
}

int _write (int file, char *ptr, int len)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	b29a      	uxth	r2, r3
 800102c:	f04f 33ff 	mov.w	r3, #4294967295
 8001030:	68b9      	ldr	r1, [r7, #8]
 8001032:	4804      	ldr	r0, [pc, #16]	; (8001044 <_write+0x28>)
 8001034:	f008 fb0d 	bl	8009652 <HAL_UART_Transmit>
}
 8001038:	bf00      	nop
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20002adc 	.word	0x20002adc

08001048 <super_smart_write>:
int super_smart_write(unsigned char *buf, unsigned short len, int8_t * state_sd_from_m)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	460b      	mov	r3, r1
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	817b      	strh	r3, [r7, #10]
		static FATFS fileSystem; // переменная типа FATFS
		static FIL testFile; // хендлер файла
		static UINT bw;
		static FRESULT res;
		static int8_t state_sd = 0;
		const char * path = "testFile.bin"; // название файла
 8001056:	4b4d      	ldr	r3, [pc, #308]	; (800118c <super_smart_write+0x144>)
 8001058:	617b      	str	r3, [r7, #20]

		if(state_sd == 0)
 800105a:	4b4d      	ldr	r3, [pc, #308]	; (8001190 <super_smart_write+0x148>)
 800105c:	f993 3000 	ldrsb.w	r3, [r3]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d12a      	bne.n	80010ba <super_smart_write+0x72>
		{
			extern Disk_drvTypeDef  disk;
			disk.is_initialized[0] = 0;
 8001064:	4b4b      	ldr	r3, [pc, #300]	; (8001194 <super_smart_write+0x14c>)
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]
			memset(&fileSystem, 0x00, sizeof(fileSystem));
 800106a:	f241 0238 	movw	r2, #4152	; 0x1038
 800106e:	2100      	movs	r1, #0
 8001070:	4849      	ldr	r0, [pc, #292]	; (8001198 <super_smart_write+0x150>)
 8001072:	f00e f8f7 	bl	800f264 <memset>
			res = f_mount(&fileSystem, "0", 1);
 8001076:	2201      	movs	r2, #1
 8001078:	4948      	ldr	r1, [pc, #288]	; (800119c <super_smart_write+0x154>)
 800107a:	4847      	ldr	r0, [pc, #284]	; (8001198 <super_smart_write+0x150>)
 800107c:	f00b fe90 	bl	800cda0 <f_mount>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	4b46      	ldr	r3, [pc, #280]	; (80011a0 <super_smart_write+0x158>)
 8001086:	701a      	strb	r2, [r3, #0]
			if(res == FR_OK){state_sd = 1; *state_sd_from_m = state_sd;}
 8001088:	4b45      	ldr	r3, [pc, #276]	; (80011a0 <super_smart_write+0x158>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d108      	bne.n	80010a2 <super_smart_write+0x5a>
 8001090:	4b3f      	ldr	r3, [pc, #252]	; (8001190 <super_smart_write+0x148>)
 8001092:	2201      	movs	r2, #1
 8001094:	701a      	strb	r2, [r3, #0]
 8001096:	4b3e      	ldr	r3, [pc, #248]	; (8001190 <super_smart_write+0x148>)
 8001098:	f993 2000 	ldrsb.w	r2, [r3]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	701a      	strb	r2, [r3, #0]
 80010a0:	e00b      	b.n	80010ba <super_smart_write+0x72>
			else
			{
				res = f_mount(0, "0", 1);
 80010a2:	2201      	movs	r2, #1
 80010a4:	493d      	ldr	r1, [pc, #244]	; (800119c <super_smart_write+0x154>)
 80010a6:	2000      	movs	r0, #0
 80010a8:	f00b fe7a 	bl	800cda0 <f_mount>
 80010ac:	4603      	mov	r3, r0
 80010ae:	461a      	mov	r2, r3
 80010b0:	4b3b      	ldr	r3, [pc, #236]	; (80011a0 <super_smart_write+0x158>)
 80010b2:	701a      	strb	r2, [r3, #0]
				return -1;
 80010b4:	f04f 33ff 	mov.w	r3, #4294967295
 80010b8:	e064      	b.n	8001184 <super_smart_write+0x13c>
			}
		}
		if(state_sd == 1)
 80010ba:	4b35      	ldr	r3, [pc, #212]	; (8001190 <super_smart_write+0x148>)
 80010bc:	f993 3000 	ldrsb.w	r3, [r3]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d121      	bne.n	8001108 <super_smart_write+0xc0>
		{
			 *state_sd_from_m = state_sd;
 80010c4:	4b32      	ldr	r3, [pc, #200]	; (8001190 <super_smart_write+0x148>)
 80010c6:	f993 2000 	ldrsb.w	r2, [r3]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	701a      	strb	r2, [r3, #0]
			res = f_open(&testFile, path, FA_WRITE | FA_OPEN_APPEND);
 80010ce:	2232      	movs	r2, #50	; 0x32
 80010d0:	6979      	ldr	r1, [r7, #20]
 80010d2:	4834      	ldr	r0, [pc, #208]	; (80011a4 <super_smart_write+0x15c>)
 80010d4:	f00b feaa 	bl	800ce2c <f_open>
 80010d8:	4603      	mov	r3, r0
 80010da:	461a      	mov	r2, r3
 80010dc:	4b30      	ldr	r3, [pc, #192]	; (80011a0 <super_smart_write+0x158>)
 80010de:	701a      	strb	r2, [r3, #0]
			if(res == FR_OK) state_sd = 2;
 80010e0:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <super_smart_write+0x158>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d103      	bne.n	80010f0 <super_smart_write+0xa8>
 80010e8:	4b29      	ldr	r3, [pc, #164]	; (8001190 <super_smart_write+0x148>)
 80010ea:	2202      	movs	r2, #2
 80010ec:	701a      	strb	r2, [r3, #0]
 80010ee:	e00b      	b.n	8001108 <super_smart_write+0xc0>
			else
			{
				state_sd = 0;
 80010f0:	4b27      	ldr	r3, [pc, #156]	; (8001190 <super_smart_write+0x148>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]
				res = f_mount(0, "0", 1);
 80010f6:	2201      	movs	r2, #1
 80010f8:	4928      	ldr	r1, [pc, #160]	; (800119c <super_smart_write+0x154>)
 80010fa:	2000      	movs	r0, #0
 80010fc:	f00b fe50 	bl	800cda0 <f_mount>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <super_smart_write+0x158>)
 8001106:	701a      	strb	r2, [r3, #0]
			}
		}
		if (state_sd == 2)
 8001108:	4b21      	ldr	r3, [pc, #132]	; (8001190 <super_smart_write+0x148>)
 800110a:	f993 3000 	ldrsb.w	r3, [r3]
 800110e:	2b02      	cmp	r3, #2
 8001110:	d1a1      	bne.n	8001056 <super_smart_write+0xe>
		{
			 *state_sd_from_m = state_sd;
 8001112:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <super_smart_write+0x148>)
 8001114:	f993 2000 	ldrsb.w	r2, [r3]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	701a      	strb	r2, [r3, #0]
            res = f_write (&testFile,  (uint8_t *)buf, len, &bw);
 800111c:	897a      	ldrh	r2, [r7, #10]
 800111e:	4b22      	ldr	r3, [pc, #136]	; (80011a8 <super_smart_write+0x160>)
 8001120:	68f9      	ldr	r1, [r7, #12]
 8001122:	4820      	ldr	r0, [pc, #128]	; (80011a4 <super_smart_write+0x15c>)
 8001124:	f00c f84e 	bl	800d1c4 <f_write>
 8001128:	4603      	mov	r3, r0
 800112a:	461a      	mov	r2, r3
 800112c:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <super_smart_write+0x158>)
 800112e:	701a      	strb	r2, [r3, #0]
            if (HAL_GetTick() - start_time >= 10)
 8001130:	f004 fafe 	bl	8005730 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <super_smart_write+0x164>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	2b09      	cmp	r3, #9
 800113e:	d90b      	bls.n	8001158 <super_smart_write+0x110>
            {
            	res = f_sync(&testFile);
 8001140:	4818      	ldr	r0, [pc, #96]	; (80011a4 <super_smart_write+0x15c>)
 8001142:	f00c f9d3 	bl	800d4ec <f_sync>
 8001146:	4603      	mov	r3, r0
 8001148:	461a      	mov	r2, r3
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <super_smart_write+0x158>)
 800114c:	701a      	strb	r2, [r3, #0]
                start_time  = HAL_GetTick();
 800114e:	f004 faef 	bl	8005730 <HAL_GetTick>
 8001152:	4603      	mov	r3, r0
 8001154:	4a15      	ldr	r2, [pc, #84]	; (80011ac <super_smart_write+0x164>)
 8001156:	6013      	str	r3, [r2, #0]
            }
	        if (res == FR_OK) return 0;
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <super_smart_write+0x158>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d101      	bne.n	8001164 <super_smart_write+0x11c>
 8001160:	2300      	movs	r3, #0
 8001162:	e00f      	b.n	8001184 <super_smart_write+0x13c>
            if (res != FR_OK)
 8001164:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <super_smart_write+0x158>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	f43f af74 	beq.w	8001056 <super_smart_write+0xe>
            {
    			res = f_close(&testFile);
 800116e:	480d      	ldr	r0, [pc, #52]	; (80011a4 <super_smart_write+0x15c>)
 8001170:	f00c fa3a 	bl	800d5e8 <f_close>
 8001174:	4603      	mov	r3, r0
 8001176:	461a      	mov	r2, r3
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <super_smart_write+0x158>)
 800117a:	701a      	strb	r2, [r3, #0]
            	state_sd = 1;
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <super_smart_write+0x148>)
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
	{
 8001182:	e768      	b.n	8001056 <super_smart_write+0xe>
            }
		}
	}
}
 8001184:	4618      	mov	r0, r3
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	08014a50 	.word	0x08014a50
 8001190:	2000024c 	.word	0x2000024c
 8001194:	20002340 	.word	0x20002340
 8001198:	20000250 	.word	0x20000250
 800119c:	08014a60 	.word	0x08014a60
 80011a0:	20001288 	.word	0x20001288
 80011a4:	2000128c 	.word	0x2000128c
 80011a8:	200022bc 	.word	0x200022bc
 80011ac:	200022c0 	.word	0x200022c0

080011b0 <app_main>:

int app_main()
{
 80011b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011b4:	b0f1      	sub	sp, #452	; 0x1c4
 80011b6:	af06      	add	r7, sp, #24
	packet_ma_type_11_t packet_ma_type_11 = {3};
 80011b8:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80011bc:	2222      	movs	r2, #34	; 0x22
 80011be:	2100      	movs	r1, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f00e f84f 	bl	800f264 <memset>
 80011c6:	2303      	movs	r3, #3
 80011c8:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
	packet_ma_type_12_t packet_ma_type_12 = {3};
 80011cc:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
 80011dc:	829a      	strh	r2, [r3, #20]
 80011de:	2303      	movs	r3, #3
 80011e0:	f887 314c 	strb.w	r3, [r7, #332]	; 0x14c
 	packet_ma_type_2_t packet_ma_type_2 = {1};
 80011e4:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80011e8:	221d      	movs	r2, #29
 80011ea:	2100      	movs	r1, #0
 80011ec:	4618      	mov	r0, r3
 80011ee:	f00e f839 	bl	800f264 <memset>
 80011f2:	2301      	movs	r3, #1
 80011f4:	f887 312c 	strb.w	r3, [r7, #300]	; 0x12c


	float quaternion[4] = {0};
 80011f8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
	float seb_time_prev = 0;
 8001206:	f04f 0300 	mov.w	r3, #0
 800120a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	float seb_time = 0;
 800120e:	f04f 0300 	mov.w	r3, #0
 8001212:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    int fix;
    int64_t cookie;


	int16_t temp_lis;
	int16_t mag[3] = {0};
 8001216:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	809a      	strh	r2, [r3, #4]
	stmdev_ctx_t ctx = {0};
 8001220:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
    struct lis_spi_intf lis_spi;
	lis_spi.GPIO_Port = GPIOA;
 800122c:	4be0      	ldr	r3, [pc, #896]	; (80015b0 <app_main+0x400>)
 800122e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	lis_spi.GPIO_Pin = GPIO_PIN_4;
 8001232:	2310      	movs	r3, #16
 8001234:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
	lis_spi.spi = &hspi1;
 8001238:	4bde      	ldr	r3, [pc, #888]	; (80015b4 <app_main+0x404>)
 800123a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	lisset(&ctx, &lis_spi);
 800123e:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001242:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001246:	4611      	mov	r1, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f00d fb05 	bl	800e858 <lisset>


	int16_t temperature_celsius_gyro;
	int16_t acc_g[3];
	int16_t gyro_dps[3];
	stmdev_ctx_t lsmctx = {0};
 800124e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
	struct lsm_spi_intf lsm_spi;
	lsm_spi.GPIO_Port = GPIOC;
 800125a:	4bd7      	ldr	r3, [pc, #860]	; (80015b8 <app_main+0x408>)
 800125c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	lsm_spi.GPIO_Pin = GPIO_PIN_13;
 8001260:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001264:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
	lsm_spi.spi = &hspi1;
 8001268:	4bd2      	ldr	r3, [pc, #840]	; (80015b4 <app_main+0x404>)
 800126a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	lsmset(&lsmctx, &lsm_spi);
 800126e:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8001272:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001276:	4611      	mov	r1, r2
 8001278:	4618      	mov	r0, r3
 800127a:	f00d fd9d 	bl	800edb8 <lsmset>
	//lsm6ds3_write_reg(&lsmctx, 0x11, lsm_data, 8);


    if(GPS_FLAG)
    {
	gps_init();
 800127e:	f00d f957 	bl	800e530 <gps_init>
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8001282:	4bce      	ldr	r3, [pc, #824]	; (80015bc <app_main+0x40c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	68da      	ldr	r2, [r3, #12]
 8001288:	4bcc      	ldr	r3, [pc, #816]	; (80015bc <app_main+0x40c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f042 0220 	orr.w	r2, r2, #32
 8001290:	60da      	str	r2, [r3, #12]
	//__HAL_UART_ENABLE_IT(&huart1, UART_IT_ERR);
    }

    int bmeinit = 10000;
 8001292:	f242 7310 	movw	r3, #10000	; 0x2710
 8001296:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    bme_important_shit bme_important;//////////////////////////////////BME
    if(BME_FLAG == 1){
    bmeinit = its_bme280_init(UNKNXW);}
 800129a:	2000      	movs	r0, #0
 800129c:	f004 f845 	bl	800532a <its_bme280_init>
 80012a0:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c


    int8_t state_sd = 0;//sd
 80012a4:	f107 0387 	add.w	r3, r7, #135	; 0x87
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
    nrf24_fifo_flush_tx(&nrf24_api_config);
    //nrf24_mode_rx(&nrf24_api_config);
    //nrf24_mode_tx(&nrf24_api_config);
	nrf24_pipe_set_tx_addr(&nrf24_api_config, 0xacacacacac);
    }
	uint8_t rx_buffer[32] = {0};
 80012ac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	3304      	adds	r3, #4
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]
 80012c2:	615a      	str	r2, [r3, #20]
 80012c4:	619a      	str	r2, [r3, #24]
	uint8_t tx_buffer[32] = {0};
 80012c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	3304      	adds	r3, #4
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
 80012dc:	615a      	str	r2, [r3, #20]
 80012de:	619a      	str	r2, [r3, #24]
	nrf24_fifo_status_t rx_status = 2;
 80012e0:	2302      	movs	r3, #2
 80012e2:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
    nrf24_fifo_status_t tx_status = 2;
 80012e6:	2302      	movs	r3, #2
 80012e8:	f887 319a 	strb.w	r3, [r7, #410]	; 0x19a

    int errrrrrrrrr, radio_read_err;//
	int IRQ_flags;///////////////////переменные для отладки радио
    bool radio_flag;////////////////
 	int irq_err = 10;//////////////
 80012ec:	230a      	movs	r3, #10
 80012ee:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 	int size_in_tx = 0;///////////
 80012f2:	2300      	movs	r3, #0
 80012f4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 	float time_for_madgwik = 0;
 80012f8:	f04f 0300 	mov.w	r3, #0
 80012fc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	while(true)
	{

		retin = lis3mdl_read_reg(&ctx, 0x0F , (uint8_t *) &abobus, 6);
 8001300:	f107 0286 	add.w	r2, r7, #134	; 0x86
 8001304:	f107 00ec 	add.w	r0, r7, #236	; 0xec
 8001308:	2306      	movs	r3, #6
 800130a:	210f      	movs	r1, #15
 800130c:	f00d fae6 	bl	800e8dc <lis3mdl_read_reg>
 8001310:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188

		if(SD_FLAG)
		{
    	super_smart_write((uint8_t *)&packet_ma_type_11, sizeof(packet_ma_type_11), &state_sd);
 8001314:	f107 0287 	add.w	r2, r7, #135	; 0x87
 8001318:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800131c:	2122      	movs	r1, #34	; 0x22
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fe92 	bl	8001048 <super_smart_write>
    	super_smart_write((uint8_t *)&packet_ma_type_2, sizeof(packet_ma_type_2), &state_sd);
 8001324:	f107 0287 	add.w	r2, r7, #135	; 0x87
 8001328:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800132c:	211d      	movs	r1, #29
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fe8a 	bl	8001048 <super_smart_write>
		}

		if(GPS_FLAG)
		{
			gps_work();
 8001334:	f00d f92c 	bl	800e590 <gps_work>
			gps_get_coords(&cookie,  &latitude,  &lontitude,&altitude, &fix);
 8001338:	f507 7488 	add.w	r4, r7, #272	; 0x110
 800133c:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001340:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001344:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8001348:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	4623      	mov	r3, r4
 8001350:	f00d f9dc 	bl	800e70c <gps_get_coords>
			packet_ma_type_12.latitude = latitude;
 8001354:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001358:	f8c7 3153 	str.w	r3, [r7, #339]	; 0x153
			packet_ma_type_12.longitude = lontitude;
 800135c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001360:	f8c7 3157 	str.w	r3, [r7, #343]	; 0x157
			packet_ma_type_12.altitude = altitude;
 8001364:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001368:	f8c7 315b 	str.w	r3, [r7, #347]	; 0x15b
			printf("%f %f %f           %ld\n", (double)latitude, (double)lontitude, (double)altitude, fix);
 800136c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff f901 	bl	8000578 <__aeabi_f2d>
 8001376:	4680      	mov	r8, r0
 8001378:	4689      	mov	r9, r1
 800137a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f8fa 	bl	8000578 <__aeabi_f2d>
 8001384:	4604      	mov	r4, r0
 8001386:	460d      	mov	r5, r1
 8001388:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f8f3 	bl	8000578 <__aeabi_f2d>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800139a:	9104      	str	r1, [sp, #16]
 800139c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80013a0:	e9cd 4500 	strd	r4, r5, [sp]
 80013a4:	4642      	mov	r2, r8
 80013a6:	464b      	mov	r3, r9
 80013a8:	4885      	ldr	r0, [pc, #532]	; (80015c0 <app_main+0x410>)
 80013aa:	f00e ff37 	bl	801021c <iprintf>
		}

		if (LSM_FLAG)
		{
			lsm6ds3_temperature_raw_get(&lsmctx, &temperature_celsius_gyro);//ЗАПРОС СЫРЫХ ДАННЫХ
 80013ae:	f107 02de 	add.w	r2, r7, #222	; 0xde
 80013b2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80013b6:	4611      	mov	r1, r2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f00d fdfb 	bl	800efb4 <lsm6ds3_temperature_raw_get>
			lsm6ds3_acceleration_raw_get(&lsmctx, acc_g);
 80013be:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80013c2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80013c6:	4611      	mov	r1, r2
 80013c8:	4618      	mov	r0, r3
 80013ca:	f00d fe61 	bl	800f090 <lsm6ds3_acceleration_raw_get>
			lsm6ds3_angular_rate_raw_get(&lsmctx, gyro_dps);
 80013ce:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80013d2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80013d6:	4611      	mov	r1, r2
 80013d8:	4618      	mov	r0, r3
 80013da:	f00d fe0e 	bl	800effa <lsm6ds3_angular_rate_raw_get>
			packet_ma_type_2.acc_mg[0] = acc_g[0];
 80013de:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 80013e2:	f8a7 3133 	strh.w	r3, [r7, #307]	; 0x133
			packet_ma_type_2.acc_mg[1] = acc_g[1];
 80013e6:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 80013ea:	f8a7 3135 	strh.w	r3, [r7, #309]	; 0x135
			packet_ma_type_2.acc_mg[2] = acc_g[2];
 80013ee:	f9b7 30dc 	ldrsh.w	r3, [r7, #220]	; 0xdc
 80013f2:	f8a7 3137 	strh.w	r3, [r7, #311]	; 0x137
			/*gyro_dps[0]-=0,48461538;
			gyro_dps[1]+=3,45999986923;
			gyro_dps[2]+=2,561433749;*/
			packet_ma_type_2.gyro_mdps[0] = gyro_dps[0];
 80013f6:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 80013fa:	f8a7 3139 	strh.w	r3, [r7, #313]	; 0x139
			packet_ma_type_2.gyro_mdps[1] = gyro_dps[1];
 80013fe:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 8001402:	f8a7 313b 	strh.w	r3, [r7, #315]	; 0x13b
			packet_ma_type_2.gyro_mdps[2] = gyro_dps[2];
 8001406:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 800140a:	f8a7 313d 	strh.w	r3, [r7, #317]	; 0x13d
			}

		if (LIS_FLAG)
		{
			//lisread(&ctx, &temp_lis, &mag);
			lis3mdl_magnetic_raw_get(&ctx, mag);
 800140e:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8001412:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f00d fb93 	bl	800eb44 <lis3mdl_magnetic_raw_get>
			lis3mdl_temperature_raw_get(&ctx, &temp_lis);//ЗАПРОС СЫРЫХ ДАННЫХ
 800141e:	f107 02fe 	add.w	r2, r7, #254	; 0xfe
 8001422:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001426:	4611      	mov	r1, r2
 8001428:	4618      	mov	r0, r3
 800142a:	f00d fbd6 	bl	800ebda <lis3mdl_temperature_raw_get>
			packet_ma_type_2.LIS3MDL_magnetometer[0] = mag[0];
 800142e:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	; 0xf8
 8001432:	f8a7 313f 	strh.w	r3, [r7, #319]	; 0x13f
			packet_ma_type_2.LIS3MDL_magnetometer[1] = mag[1];
 8001436:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	; 0xfa
 800143a:	f8a7 3141 	strh.w	r3, [r7, #321]	; 0x141
			packet_ma_type_2.LIS3MDL_magnetometer[2] = mag[2];
 800143e:	f9b7 30fc 	ldrsh.w	r3, [r7, #252]	; 0xfc
 8001442:	f8a7 3143 	strh.w	r3, [r7, #323]	; 0x143

		}

		if(BME_FLAG == 1)
		{
			its_bme280_read(UNKNXW, &bme_important);
 8001446:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800144a:	4619      	mov	r1, r3
 800144c:	2000      	movs	r0, #0
 800144e:	f003 ffb3 	bl	80053b8 <its_bme280_read>
			packet_ma_type_11.BME280_pressure = bme_important.pressure;
 8001452:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145a:	f207 116b 	addw	r1, r7, #363	; 0x16b
 800145e:	600a      	str	r2, [r1, #0]
 8001460:	604b      	str	r3, [r1, #4]
			packet_ma_type_11.BME280_temperature = bme_important.temperature;
 8001462:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001466:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800146a:	f207 1173 	addw	r1, r7, #371	; 0x173
 800146e:	600a      	str	r2, [r1, #0]
 8001470:	604b      	str	r3, [r1, #4]

		}

		seb_time = HAL_GetTick();
 8001472:	f004 f95d 	bl	8005730 <HAL_GetTick>
 8001476:	ee07 0a90 	vmov	s15, r0
 800147a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800147e:	edc7 7a68 	vstr	s15, [r7, #416]	; 0x1a0
		//printf("mX = %f\tmY = %f\tmZ = %f\n", (double)-1* mag[0], (double) -1 * mag[1], (double)mag[2]);
		MadgwickAHRSupdate(quaternion, gyro_dps[0] * 3.1415 / 180, gyro_dps[1] * 3.1415 / 180, gyro_dps[2] * 3.1415 / 180,  acc_g[0] *9.81, acc_g[1] *9.81, acc_g[2] *9.81, -1* mag[0], -1 * mag[1], mag[2], (seb_time - seb_time_prev) / 1000.0, 0.3);
 8001482:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff f864 	bl	8000554 <__aeabi_i2d>
 800148c:	a344      	add	r3, pc, #272	; (adr r3, 80015a0 <app_main+0x3f0>)
 800148e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001492:	f7ff f8c9 	bl	8000628 <__aeabi_dmul>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4610      	mov	r0, r2
 800149c:	4619      	mov	r1, r3
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	4b48      	ldr	r3, [pc, #288]	; (80015c4 <app_main+0x414>)
 80014a4:	f7ff f9ea 	bl	800087c <__aeabi_ddiv>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4610      	mov	r0, r2
 80014ae:	4619      	mov	r1, r3
 80014b0:	f7ff fbb2 	bl	8000c18 <__aeabi_d2f>
 80014b4:	4604      	mov	r4, r0
 80014b6:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff f84a 	bl	8000554 <__aeabi_i2d>
 80014c0:	a337      	add	r3, pc, #220	; (adr r3, 80015a0 <app_main+0x3f0>)
 80014c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c6:	f7ff f8af 	bl	8000628 <__aeabi_dmul>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4610      	mov	r0, r2
 80014d0:	4619      	mov	r1, r3
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	4b3b      	ldr	r3, [pc, #236]	; (80015c4 <app_main+0x414>)
 80014d8:	f7ff f9d0 	bl	800087c <__aeabi_ddiv>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	4610      	mov	r0, r2
 80014e2:	4619      	mov	r1, r3
 80014e4:	f7ff fb98 	bl	8000c18 <__aeabi_d2f>
 80014e8:	4605      	mov	r5, r0
 80014ea:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff f830 	bl	8000554 <__aeabi_i2d>
 80014f4:	a32a      	add	r3, pc, #168	; (adr r3, 80015a0 <app_main+0x3f0>)
 80014f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fa:	f7ff f895 	bl	8000628 <__aeabi_dmul>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4610      	mov	r0, r2
 8001504:	4619      	mov	r1, r3
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	4b2e      	ldr	r3, [pc, #184]	; (80015c4 <app_main+0x414>)
 800150c:	f7ff f9b6 	bl	800087c <__aeabi_ddiv>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	f7ff fb7e 	bl	8000c18 <__aeabi_d2f>
 800151c:	4606      	mov	r6, r0
 800151e:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff f816 	bl	8000554 <__aeabi_i2d>
 8001528:	a31f      	add	r3, pc, #124	; (adr r3, 80015a8 <app_main+0x3f8>)
 800152a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152e:	f7ff f87b 	bl	8000628 <__aeabi_dmul>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	f7ff fb6d 	bl	8000c18 <__aeabi_d2f>
 800153e:	4680      	mov	r8, r0
 8001540:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff f805 	bl	8000554 <__aeabi_i2d>
 800154a:	a317      	add	r3, pc, #92	; (adr r3, 80015a8 <app_main+0x3f8>)
 800154c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001550:	f7ff f86a 	bl	8000628 <__aeabi_dmul>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4610      	mov	r0, r2
 800155a:	4619      	mov	r1, r3
 800155c:	f7ff fb5c 	bl	8000c18 <__aeabi_d2f>
 8001560:	4681      	mov	r9, r0
 8001562:	f9b7 30dc 	ldrsh.w	r3, [r7, #220]	; 0xdc
 8001566:	4618      	mov	r0, r3
 8001568:	f7fe fff4 	bl	8000554 <__aeabi_i2d>
 800156c:	a30e      	add	r3, pc, #56	; (adr r3, 80015a8 <app_main+0x3f8>)
 800156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001572:	f7ff f859 	bl	8000628 <__aeabi_dmul>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	f7ff fb4b 	bl	8000c18 <__aeabi_d2f>
 8001582:	4602      	mov	r2, r0
 8001584:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	; 0xf8
 8001588:	425b      	negs	r3, r3
 800158a:	ee07 3a90 	vmov	s15, r3
 800158e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001592:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	; 0xfa
 8001596:	425b      	negs	r3, r3
 8001598:	ee07 3a90 	vmov	s15, r3
 800159c:	e018      	b.n	80015d0 <app_main+0x420>
 800159e:	bf00      	nop
 80015a0:	c083126f 	.word	0xc083126f
 80015a4:	400921ca 	.word	0x400921ca
 80015a8:	51eb851f 	.word	0x51eb851f
 80015ac:	40239eb8 	.word	0x40239eb8
 80015b0:	40020000 	.word	0x40020000
 80015b4:	20002a84 	.word	0x20002a84
 80015b8:	40020800 	.word	0x40020800
 80015bc:	20002964 	.word	0x20002964
 80015c0:	08014a64 	.word	0x08014a64
 80015c4:	40668000 	.word	0x40668000
 80015c8:	447a0000 	.word	0x447a0000
 80015cc:	3e99999a 	.word	0x3e99999a
 80015d0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80015d4:	f9b7 30fc 	ldrsh.w	r3, [r7, #252]	; 0xfc
 80015d8:	ee07 3a90 	vmov	s15, r3
 80015dc:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80015e0:	ed97 7a68 	vldr	s14, [r7, #416]	; 0x1a0
 80015e4:	edd7 7a69 	vldr	s15, [r7, #420]	; 0x1a4
 80015e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ec:	ed1f 5a0a 	vldr	s10, [pc, #-40]	; 80015c8 <app_main+0x418>
 80015f0:	ee87 7a85 	vdiv.f32	s14, s15, s10
 80015f4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80015f8:	ed1f 5a0c 	vldr	s10, [pc, #-48]	; 80015cc <app_main+0x41c>
 80015fc:	eef0 4a47 	vmov.f32	s9, s14
 8001600:	eeb0 4a65 	vmov.f32	s8, s11
 8001604:	eef0 3a46 	vmov.f32	s7, s12
 8001608:	eeb0 3a66 	vmov.f32	s6, s13
 800160c:	ee02 2a90 	vmov	s5, r2
 8001610:	ee02 9a10 	vmov	s4, r9
 8001614:	ee01 8a90 	vmov	s3, r8
 8001618:	ee01 6a10 	vmov	s2, r6
 800161c:	ee00 5a90 	vmov	s1, r5
 8001620:	ee00 4a10 	vmov	s0, r4
 8001624:	4618      	mov	r0, r3
 8001626:	f000 f841 	bl	80016ac <MadgwickAHRSupdate>
		seb_time_prev = seb_time;
 800162a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800162e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
		//MadgwickAHRSupdateIMU(quaternion, gyro_dps[0], gyro_dps[1], gyro_dps[2],  acc_g[0] *9.81, acc_g[1] *9.81, acc_g[2] *9.81, HAL_GetTick() - seb_delta, 0.3);
		time_for_madgwik = (HAL_GetTick() )/1000.0;
 8001632:	f004 f87d 	bl	8005730 <HAL_GetTick>
 8001636:	4603      	mov	r3, r0
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ff7b 	bl	8000534 <__aeabi_ui2d>
 800163e:	f04f 0200 	mov.w	r2, #0
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <app_main+0x4ac>)
 8001644:	f7ff f91a 	bl	800087c <__aeabi_ddiv>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f7ff fae2 	bl	8000c18 <__aeabi_d2f>
 8001654:	4603      	mov	r3, r0
 8001656:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
		retin = lis3mdl_read_reg(&ctx, 0x0F , (uint8_t *) &abobus, 6);
 800165a:	e651      	b.n	8001300 <app_main+0x150>
 800165c:	408f4000 	.word	0x408f4000

08001660 <invSqrt>:
//#define sampleFreq	512.0f		// sample frequency in Hz
//#define betaDef		0.1f		// 2 * proportional gain

volatile float q0 = 1.0f, q1 = 0.0f, q2 = 0.0f, q3 = 0.0f;

static float invSqrt(float x) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	ed87 0a01 	vstr	s0, [r7, #4]
	i = 0x5f3759df - (i>>1);
	y = *(float*)&i;
	y = y * (1.5f - (halfx * y * y));
	return y;*/

	return 1/sqrt(x);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7fe ff84 	bl	8000578 <__aeabi_f2d>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	ec43 2b10 	vmov	d0, r2, r3
 8001678:	f012 faae 	bl	8013bd8 <sqrt>
 800167c:	ec53 2b10 	vmov	r2, r3, d0
 8001680:	f04f 0000 	mov.w	r0, #0
 8001684:	4908      	ldr	r1, [pc, #32]	; (80016a8 <invSqrt+0x48>)
 8001686:	f7ff f8f9 	bl	800087c <__aeabi_ddiv>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4610      	mov	r0, r2
 8001690:	4619      	mov	r1, r3
 8001692:	f7ff fac1 	bl	8000c18 <__aeabi_d2f>
 8001696:	4603      	mov	r3, r0
 8001698:	ee07 3a90 	vmov	s15, r3
}
 800169c:	eeb0 0a67 	vmov.f32	s0, s15
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	3ff00000 	.word	0x3ff00000

080016ac <MadgwickAHRSupdate>:

void MadgwickAHRSupdate(float* quaternion, float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz, float dt, float beta) {
 80016ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016b0:	b0b6      	sub	sp, #216	; 0xd8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	63f8      	str	r0, [r7, #60]	; 0x3c
 80016b6:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
 80016ba:	edc7 0a0d 	vstr	s1, [r7, #52]	; 0x34
 80016be:	ed87 1a0c 	vstr	s2, [r7, #48]	; 0x30
 80016c2:	edc7 1a0b 	vstr	s3, [r7, #44]	; 0x2c
 80016c6:	ed87 2a0a 	vstr	s4, [r7, #40]	; 0x28
 80016ca:	edc7 2a09 	vstr	s5, [r7, #36]	; 0x24
 80016ce:	ed87 3a08 	vstr	s6, [r7, #32]
 80016d2:	edc7 3a07 	vstr	s7, [r7, #28]
 80016d6:	ed87 4a06 	vstr	s8, [r7, #24]
 80016da:	edc7 4a05 	vstr	s9, [r7, #20]
 80016de:	ed87 5a04 	vstr	s10, [r7, #16]
#	pragma GCC diagnostic ignored "-Wunused-but-set-variable"
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;
#	pragma GCC diagnostic pop

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 80016e2:	edd7 7a08 	vldr	s15, [r7, #32]
 80016e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ee:	d122      	bne.n	8001736 <MadgwickAHRSupdate+0x8a>
 80016f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80016f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fc:	d11b      	bne.n	8001736 <MadgwickAHRSupdate+0x8a>
 80016fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8001702:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170a:	d114      	bne.n	8001736 <MadgwickAHRSupdate+0x8a>
		MadgwickAHRSupdateIMU(quaternion, gx, gy, gz, ax, ay, az, dt, beta);
 800170c:	edd7 3a04 	vldr	s7, [r7, #16]
 8001710:	ed97 3a05 	vldr	s6, [r7, #20]
 8001714:	edd7 2a09 	vldr	s5, [r7, #36]	; 0x24
 8001718:	ed97 2a0a 	vldr	s4, [r7, #40]	; 0x28
 800171c:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 8001720:	ed97 1a0c 	vldr	s2, [r7, #48]	; 0x30
 8001724:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 8001728:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 800172c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800172e:	f001 f99d 	bl	8002a6c <MadgwickAHRSupdateIMU>
		return;
 8001732:	f001 b98c 	b.w	8002a4e <MadgwickAHRSupdate+0x13a2>
	}

	float sampleFreq = 1 / dt;
 8001736:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800173a:	ed97 7a05 	vldr	s14, [r7, #20]
 800173e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001742:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8001746:	4be6      	ldr	r3, [pc, #920]	; (8001ae0 <MadgwickAHRSupdate+0x434>)
 8001748:	edd3 7a00 	vldr	s15, [r3]
 800174c:	eeb1 7a67 	vneg.f32	s14, s15
 8001750:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001754:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001758:	4be2      	ldr	r3, [pc, #904]	; (8001ae4 <MadgwickAHRSupdate+0x438>)
 800175a:	edd3 6a00 	vldr	s13, [r3]
 800175e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001762:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001766:	ee37 7a67 	vsub.f32	s14, s14, s15
 800176a:	4bdf      	ldr	r3, [pc, #892]	; (8001ae8 <MadgwickAHRSupdate+0x43c>)
 800176c:	edd3 6a00 	vldr	s13, [r3]
 8001770:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001774:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001778:	ee77 7a67 	vsub.f32	s15, s14, s15
 800177c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001780:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001784:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8001788:	4bd8      	ldr	r3, [pc, #864]	; (8001aec <MadgwickAHRSupdate+0x440>)
 800178a:	ed93 7a00 	vldr	s14, [r3]
 800178e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001792:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001796:	4bd3      	ldr	r3, [pc, #844]	; (8001ae4 <MadgwickAHRSupdate+0x438>)
 8001798:	edd3 6a00 	vldr	s13, [r3]
 800179c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80017a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017a8:	4bcf      	ldr	r3, [pc, #828]	; (8001ae8 <MadgwickAHRSupdate+0x43c>)
 80017aa:	edd3 6a00 	vldr	s13, [r3]
 80017ae:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80017b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80017be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017c2:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80017c6:	4bc9      	ldr	r3, [pc, #804]	; (8001aec <MadgwickAHRSupdate+0x440>)
 80017c8:	ed93 7a00 	vldr	s14, [r3]
 80017cc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80017d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017d4:	4bc2      	ldr	r3, [pc, #776]	; (8001ae0 <MadgwickAHRSupdate+0x434>)
 80017d6:	edd3 6a00 	vldr	s13, [r3]
 80017da:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80017de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017e6:	4bc0      	ldr	r3, [pc, #768]	; (8001ae8 <MadgwickAHRSupdate+0x43c>)
 80017e8:	edd3 6a00 	vldr	s13, [r3]
 80017ec:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80017f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017f8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80017fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001800:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8001804:	4bb9      	ldr	r3, [pc, #740]	; (8001aec <MadgwickAHRSupdate+0x440>)
 8001806:	ed93 7a00 	vldr	s14, [r3]
 800180a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800180e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001812:	4bb3      	ldr	r3, [pc, #716]	; (8001ae0 <MadgwickAHRSupdate+0x434>)
 8001814:	edd3 6a00 	vldr	s13, [r3]
 8001818:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800181c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001820:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001824:	4baf      	ldr	r3, [pc, #700]	; (8001ae4 <MadgwickAHRSupdate+0x438>)
 8001826:	edd3 6a00 	vldr	s13, [r3]
 800182a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800182e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001832:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001836:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800183a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800183e:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001842:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001846:	eef5 7a40 	vcmp.f32	s15, #0.0
 800184a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184e:	d10e      	bne.n	800186e <MadgwickAHRSupdate+0x1c2>
 8001850:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001854:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185c:	d107      	bne.n	800186e <MadgwickAHRSupdate+0x1c2>
 800185e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001862:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186a:	f001 8041 	beq.w	80028f0 <MadgwickAHRSupdate+0x1244>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800186e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001872:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001876:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800187a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800187e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001882:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001886:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800188a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800188e:	eeb0 0a67 	vmov.f32	s0, s15
 8001892:	f7ff fee5 	bl	8001660 <invSqrt>
 8001896:	ed87 0a30 	vstr	s0, [r7, #192]	; 0xc0
		ax *= recipNorm;
 800189a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800189e:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80018a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		ay *= recipNorm;
 80018aa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80018ae:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80018b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018b6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		az *= recipNorm;
 80018ba:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80018be:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80018c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 80018ca:	edd7 7a08 	vldr	s15, [r7, #32]
 80018ce:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80018d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80018d6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80018da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018de:	edd7 7a06 	vldr	s15, [r7, #24]
 80018e2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80018e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ea:	eeb0 0a67 	vmov.f32	s0, s15
 80018ee:	f7ff feb7 	bl	8001660 <invSqrt>
 80018f2:	ed87 0a30 	vstr	s0, [r7, #192]	; 0xc0
		mx *= recipNorm;
 80018f6:	ed97 7a08 	vldr	s14, [r7, #32]
 80018fa:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80018fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001902:	edc7 7a08 	vstr	s15, [r7, #32]
		my *= recipNorm;
 8001906:	ed97 7a07 	vldr	s14, [r7, #28]
 800190a:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800190e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001912:	edc7 7a07 	vstr	s15, [r7, #28]
		mz *= recipNorm;
 8001916:	ed97 7a06 	vldr	s14, [r7, #24]
 800191a:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800191e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001922:	edc7 7a06 	vstr	s15, [r7, #24]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 8001926:	4b71      	ldr	r3, [pc, #452]	; (8001aec <MadgwickAHRSupdate+0x440>)
 8001928:	edd3 7a00 	vldr	s15, [r3]
 800192c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001930:	ed97 7a08 	vldr	s14, [r7, #32]
 8001934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001938:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
		_2q0my = 2.0f * q0 * my;
 800193c:	4b6b      	ldr	r3, [pc, #428]	; (8001aec <MadgwickAHRSupdate+0x440>)
 800193e:	edd3 7a00 	vldr	s15, [r3]
 8001942:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001946:	ed97 7a07 	vldr	s14, [r7, #28]
 800194a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800194e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
		_2q0mz = 2.0f * q0 * mz;
 8001952:	4b66      	ldr	r3, [pc, #408]	; (8001aec <MadgwickAHRSupdate+0x440>)
 8001954:	edd3 7a00 	vldr	s15, [r3]
 8001958:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800195c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001964:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		_2q1mx = 2.0f * q1 * mx;
 8001968:	4b5d      	ldr	r3, [pc, #372]	; (8001ae0 <MadgwickAHRSupdate+0x434>)
 800196a:	edd3 7a00 	vldr	s15, [r3]
 800196e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001972:	ed97 7a08 	vldr	s14, [r7, #32]
 8001976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800197a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		_2q0 = 2.0f * q0;
 800197e:	4b5b      	ldr	r3, [pc, #364]	; (8001aec <MadgwickAHRSupdate+0x440>)
 8001980:	edd3 7a00 	vldr	s15, [r3]
 8001984:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001988:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		_2q1 = 2.0f * q1;
 800198c:	4b54      	ldr	r3, [pc, #336]	; (8001ae0 <MadgwickAHRSupdate+0x434>)
 800198e:	edd3 7a00 	vldr	s15, [r3]
 8001992:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001996:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
		_2q2 = 2.0f * q2;
 800199a:	4b52      	ldr	r3, [pc, #328]	; (8001ae4 <MadgwickAHRSupdate+0x438>)
 800199c:	edd3 7a00 	vldr	s15, [r3]
 80019a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019a4:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
		_2q3 = 2.0f * q3;
 80019a8:	4b4f      	ldr	r3, [pc, #316]	; (8001ae8 <MadgwickAHRSupdate+0x43c>)
 80019aa:	edd3 7a00 	vldr	s15, [r3]
 80019ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019b2:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		_2q0q2 = 2.0f * q0 * q2;
 80019b6:	4b4d      	ldr	r3, [pc, #308]	; (8001aec <MadgwickAHRSupdate+0x440>)
 80019b8:	edd3 7a00 	vldr	s15, [r3]
 80019bc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80019c0:	4b48      	ldr	r3, [pc, #288]	; (8001ae4 <MadgwickAHRSupdate+0x438>)
 80019c2:	edd3 7a00 	vldr	s15, [r3]
 80019c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ca:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		_2q2q3 = 2.0f * q2 * q3;
 80019ce:	4b45      	ldr	r3, [pc, #276]	; (8001ae4 <MadgwickAHRSupdate+0x438>)
 80019d0:	edd3 7a00 	vldr	s15, [r3]
 80019d4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80019d8:	4b43      	ldr	r3, [pc, #268]	; (8001ae8 <MadgwickAHRSupdate+0x43c>)
 80019da:	edd3 7a00 	vldr	s15, [r3]
 80019de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e2:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		q0q0 = q0 * q0;
 80019e6:	4b41      	ldr	r3, [pc, #260]	; (8001aec <MadgwickAHRSupdate+0x440>)
 80019e8:	ed93 7a00 	vldr	s14, [r3]
 80019ec:	4b3f      	ldr	r3, [pc, #252]	; (8001aec <MadgwickAHRSupdate+0x440>)
 80019ee:	edd3 7a00 	vldr	s15, [r3]
 80019f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019f6:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		q0q1 = q0 * q1;
 80019fa:	4b3c      	ldr	r3, [pc, #240]	; (8001aec <MadgwickAHRSupdate+0x440>)
 80019fc:	ed93 7a00 	vldr	s14, [r3]
 8001a00:	4b37      	ldr	r3, [pc, #220]	; (8001ae0 <MadgwickAHRSupdate+0x434>)
 8001a02:	edd3 7a00 	vldr	s15, [r3]
 8001a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a0a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		q0q2 = q0 * q2;
 8001a0e:	4b37      	ldr	r3, [pc, #220]	; (8001aec <MadgwickAHRSupdate+0x440>)
 8001a10:	ed93 7a00 	vldr	s14, [r3]
 8001a14:	4b33      	ldr	r3, [pc, #204]	; (8001ae4 <MadgwickAHRSupdate+0x438>)
 8001a16:	edd3 7a00 	vldr	s15, [r3]
 8001a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a1e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		q0q3 = q0 * q3;
 8001a22:	4b32      	ldr	r3, [pc, #200]	; (8001aec <MadgwickAHRSupdate+0x440>)
 8001a24:	ed93 7a00 	vldr	s14, [r3]
 8001a28:	4b2f      	ldr	r3, [pc, #188]	; (8001ae8 <MadgwickAHRSupdate+0x43c>)
 8001a2a:	edd3 7a00 	vldr	s15, [r3]
 8001a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a32:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		q1q1 = q1 * q1;
 8001a36:	4b2a      	ldr	r3, [pc, #168]	; (8001ae0 <MadgwickAHRSupdate+0x434>)
 8001a38:	ed93 7a00 	vldr	s14, [r3]
 8001a3c:	4b28      	ldr	r3, [pc, #160]	; (8001ae0 <MadgwickAHRSupdate+0x434>)
 8001a3e:	edd3 7a00 	vldr	s15, [r3]
 8001a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a46:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		q1q2 = q1 * q2;
 8001a4a:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <MadgwickAHRSupdate+0x434>)
 8001a4c:	ed93 7a00 	vldr	s14, [r3]
 8001a50:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <MadgwickAHRSupdate+0x438>)
 8001a52:	edd3 7a00 	vldr	s15, [r3]
 8001a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a5a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		q1q3 = q1 * q3;
 8001a5e:	4b20      	ldr	r3, [pc, #128]	; (8001ae0 <MadgwickAHRSupdate+0x434>)
 8001a60:	ed93 7a00 	vldr	s14, [r3]
 8001a64:	4b20      	ldr	r3, [pc, #128]	; (8001ae8 <MadgwickAHRSupdate+0x43c>)
 8001a66:	edd3 7a00 	vldr	s15, [r3]
 8001a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a6e:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q2q2 = q2 * q2;
 8001a72:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <MadgwickAHRSupdate+0x438>)
 8001a74:	ed93 7a00 	vldr	s14, [r3]
 8001a78:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <MadgwickAHRSupdate+0x438>)
 8001a7a:	edd3 7a00 	vldr	s15, [r3]
 8001a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a82:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q2q3 = q2 * q3;
 8001a86:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <MadgwickAHRSupdate+0x438>)
 8001a88:	ed93 7a00 	vldr	s14, [r3]
 8001a8c:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <MadgwickAHRSupdate+0x43c>)
 8001a8e:	edd3 7a00 	vldr	s15, [r3]
 8001a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a96:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q3q3 = q3 * q3;
 8001a9a:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <MadgwickAHRSupdate+0x43c>)
 8001a9c:	ed93 7a00 	vldr	s14, [r3]
 8001aa0:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <MadgwickAHRSupdate+0x43c>)
 8001aa2:	edd3 7a00 	vldr	s15, [r3]
 8001aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aaa:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8001aae:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ab2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001ab6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aba:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <MadgwickAHRSupdate+0x43c>)
 8001abc:	edd3 6a00 	vldr	s13, [r3]
 8001ac0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001ac4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ac8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <MadgwickAHRSupdate+0x438>)
 8001ace:	edd3 6a00 	vldr	s13, [r3]
 8001ad2:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001ad6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ada:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ade:	e007      	b.n	8001af0 <MadgwickAHRSupdate+0x444>
 8001ae0:	200022c4 	.word	0x200022c4
 8001ae4:	200022c8 	.word	0x200022c8
 8001ae8:	200022cc 	.word	0x200022cc
 8001aec:	20000000 	.word	0x20000000
 8001af0:	edd7 6a08 	vldr	s13, [r7, #32]
 8001af4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001af8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001afc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b00:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8001b04:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b08:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b0c:	4bef      	ldr	r3, [pc, #956]	; (8001ecc <MadgwickAHRSupdate+0x820>)
 8001b0e:	edd3 7a00 	vldr	s15, [r3]
 8001b12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b1a:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8001b1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b22:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b26:	4bea      	ldr	r3, [pc, #936]	; (8001ed0 <MadgwickAHRSupdate+0x824>)
 8001b28:	edd3 7a00 	vldr	s15, [r3]
 8001b2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b34:	edd7 6a08 	vldr	s13, [r7, #32]
 8001b38:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001b3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b44:	edd7 6a08 	vldr	s13, [r7, #32]
 8001b48:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001b4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b54:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8001b58:	4bdd      	ldr	r3, [pc, #884]	; (8001ed0 <MadgwickAHRSupdate+0x824>)
 8001b5a:	ed93 7a00 	vldr	s14, [r3]
 8001b5e:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001b62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b66:	edd7 6a07 	vldr	s13, [r7, #28]
 8001b6a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001b6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b76:	4bd7      	ldr	r3, [pc, #860]	; (8001ed4 <MadgwickAHRSupdate+0x828>)
 8001b78:	edd3 6a00 	vldr	s13, [r3]
 8001b7c:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001b80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b88:	4bd0      	ldr	r3, [pc, #832]	; (8001ecc <MadgwickAHRSupdate+0x820>)
 8001b8a:	edd3 6a00 	vldr	s13, [r3]
 8001b8e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001b92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8001b9e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001ba2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ba6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001baa:	edd7 6a07 	vldr	s13, [r7, #28]
 8001bae:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001bb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bba:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8001bbe:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bc2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bc6:	4bc2      	ldr	r3, [pc, #776]	; (8001ed0 <MadgwickAHRSupdate+0x824>)
 8001bc8:	edd3 7a00 	vldr	s15, [r3]
 8001bcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8001bd8:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001bdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001be4:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		_2bx = sqrt(hx * hx + hy * hy);
 8001be8:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001bec:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001bf0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001bf4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001bf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bfc:	ee17 0a90 	vmov	r0, s15
 8001c00:	f7fe fcba 	bl	8000578 <__aeabi_f2d>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	ec43 2b10 	vmov	d0, r2, r3
 8001c0c:	f011 ffe4 	bl	8013bd8 <sqrt>
 8001c10:	ec53 2b10 	vmov	r2, r3, d0
 8001c14:	4610      	mov	r0, r2
 8001c16:	4619      	mov	r1, r3
 8001c18:	f7fe fffe 	bl	8000c18 <__aeabi_d2f>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	667b      	str	r3, [r7, #100]	; 0x64
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8001c20:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001c24:	eeb1 7a67 	vneg.f32	s14, s15
 8001c28:	4ba8      	ldr	r3, [pc, #672]	; (8001ecc <MadgwickAHRSupdate+0x820>)
 8001c2a:	edd3 7a00 	vldr	s15, [r3]
 8001c2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c32:	4ba8      	ldr	r3, [pc, #672]	; (8001ed4 <MadgwickAHRSupdate+0x828>)
 8001c34:	edd3 6a00 	vldr	s13, [r3]
 8001c38:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001c3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c44:	edd7 6a06 	vldr	s13, [r7, #24]
 8001c48:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001c4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c54:	4b9e      	ldr	r3, [pc, #632]	; (8001ed0 <MadgwickAHRSupdate+0x824>)
 8001c56:	edd3 6a00 	vldr	s13, [r3]
 8001c5a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001c5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c66:	edd7 6a06 	vldr	s13, [r7, #24]
 8001c6a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001c6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c76:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8001c7a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c7e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c82:	4b93      	ldr	r3, [pc, #588]	; (8001ed0 <MadgwickAHRSupdate+0x824>)
 8001c84:	edd3 7a00 	vldr	s15, [r3]
 8001c88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c90:	edd7 6a06 	vldr	s13, [r7, #24]
 8001c94:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001c98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ca0:	edd7 6a06 	vldr	s13, [r7, #24]
 8001ca4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001ca8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cb0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		_4bx = 2.0f * _2bx;
 8001cb4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001cb8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cbc:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		_4bz = 2.0f * _2bz;
 8001cc0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001cc4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cc8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		float _8bx = 2.0f * _4bx;
 8001ccc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001cd0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cd4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		float _8bz = 2.0f * _4bz;
 8001cd8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001cdc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ce0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

		// Gradient decent algorithm corrective step
		s0= -_2q2*(2*(q1q3 - q0q2) - ax)    +   _2q1*(2*(q0q1 + q2q3) - ay)   +  -_4bz*q2*(_4bx*(0.5 - q2q2 - q3q3) + _4bz*(q1q3 - q0q2) - mx)   +   (-_4bx*q3+_4bz*q1)*(_4bx*(q1q2 - q0q3) + _4bz*(q0q1 + q2q3) - my)    +   _4bx*q2*(_4bx*(q0q2 + q1q3) + _4bz*(0.5 - q1q1 - q2q2) - mz);
 8001ce4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001ce8:	eeb1 7a67 	vneg.f32	s14, s15
 8001cec:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8001cf0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001cf4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001cf8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001cfc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d00:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d08:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8001d0c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001d10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d14:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001d18:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001d1c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d20:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001d24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d2c:	ee17 0a90 	vmov	r0, s15
 8001d30:	f7fe fc22 	bl	8000578 <__aeabi_f2d>
 8001d34:	4604      	mov	r4, r0
 8001d36:	460d      	mov	r5, r1
 8001d38:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001d3c:	eeb1 7a67 	vneg.f32	s14, s15
 8001d40:	4b62      	ldr	r3, [pc, #392]	; (8001ecc <MadgwickAHRSupdate+0x820>)
 8001d42:	edd3 7a00 	vldr	s15, [r3]
 8001d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d4a:	ee17 0a90 	vmov	r0, s15
 8001d4e:	f7fe fc13 	bl	8000578 <__aeabi_f2d>
 8001d52:	4680      	mov	r8, r0
 8001d54:	4689      	mov	r9, r1
 8001d56:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001d58:	f7fe fc0e 	bl	8000578 <__aeabi_f2d>
 8001d5c:	4682      	mov	sl, r0
 8001d5e:	468b      	mov	fp, r1
 8001d60:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001d62:	f7fe fc09 	bl	8000578 <__aeabi_f2d>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	f04f 0000 	mov.w	r0, #0
 8001d6e:	495a      	ldr	r1, [pc, #360]	; (8001ed8 <MadgwickAHRSupdate+0x82c>)
 8001d70:	f7fe faa2 	bl	80002b8 <__aeabi_dsub>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001d7c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001d7e:	f7fe fbfb 	bl	8000578 <__aeabi_f2d>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d8a:	f7fe fa95 	bl	80002b8 <__aeabi_dsub>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4650      	mov	r0, sl
 8001d94:	4659      	mov	r1, fp
 8001d96:	f7fe fc47 	bl	8000628 <__aeabi_dmul>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	4692      	mov	sl, r2
 8001da0:	469b      	mov	fp, r3
 8001da2:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8001da6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001daa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dae:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db6:	ee17 0a90 	vmov	r0, s15
 8001dba:	f7fe fbdd 	bl	8000578 <__aeabi_f2d>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4650      	mov	r0, sl
 8001dc4:	4659      	mov	r1, fp
 8001dc6:	f7fe fa79 	bl	80002bc <__adddf3>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4692      	mov	sl, r2
 8001dd0:	469b      	mov	fp, r3
 8001dd2:	6a38      	ldr	r0, [r7, #32]
 8001dd4:	f7fe fbd0 	bl	8000578 <__aeabi_f2d>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4650      	mov	r0, sl
 8001dde:	4659      	mov	r1, fp
 8001de0:	f7fe fa6a 	bl	80002b8 <__aeabi_dsub>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4640      	mov	r0, r8
 8001dea:	4649      	mov	r1, r9
 8001dec:	f7fe fc1c 	bl	8000628 <__aeabi_dmul>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4620      	mov	r0, r4
 8001df6:	4629      	mov	r1, r5
 8001df8:	f7fe fa60 	bl	80002bc <__adddf3>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4614      	mov	r4, r2
 8001e02:	461d      	mov	r5, r3
 8001e04:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e08:	eeb1 7a67 	vneg.f32	s14, s15
 8001e0c:	4b30      	ldr	r3, [pc, #192]	; (8001ed0 <MadgwickAHRSupdate+0x824>)
 8001e0e:	edd3 7a00 	vldr	s15, [r3]
 8001e12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e16:	4b2f      	ldr	r3, [pc, #188]	; (8001ed4 <MadgwickAHRSupdate+0x828>)
 8001e18:	edd3 6a00 	vldr	s13, [r3]
 8001e1c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001e20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e28:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8001e2c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001e30:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e34:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e38:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e3c:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 8001e40:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001e44:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e48:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001e4c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e50:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e54:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e58:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e60:	ee17 0a90 	vmov	r0, s15
 8001e64:	f7fe fb88 	bl	8000578 <__aeabi_f2d>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4620      	mov	r0, r4
 8001e6e:	4629      	mov	r1, r5
 8001e70:	f7fe fa24 	bl	80002bc <__adddf3>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001e7c:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <MadgwickAHRSupdate+0x820>)
 8001e7e:	ed93 7a00 	vldr	s14, [r3]
 8001e82:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e8a:	ee17 0a90 	vmov	r0, s15
 8001e8e:	f7fe fb73 	bl	8000578 <__aeabi_f2d>
 8001e92:	4680      	mov	r8, r0
 8001e94:	4689      	mov	r9, r1
 8001e96:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8001e9a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001e9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ea2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eaa:	ee17 0a90 	vmov	r0, s15
 8001eae:	f7fe fb63 	bl	8000578 <__aeabi_f2d>
 8001eb2:	4682      	mov	sl, r0
 8001eb4:	468b      	mov	fp, r1
 8001eb6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001eb8:	f7fe fb5e 	bl	8000578 <__aeabi_f2d>
 8001ebc:	e9c7 0100 	strd	r0, r1, [r7]
 8001ec0:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001ec4:	f7fe fb58 	bl	8000578 <__aeabi_f2d>
 8001ec8:	e008      	b.n	8001edc <MadgwickAHRSupdate+0x830>
 8001eca:	bf00      	nop
 8001ecc:	200022c8 	.word	0x200022c8
 8001ed0:	200022cc 	.word	0x200022cc
 8001ed4:	200022c4 	.word	0x200022c4
 8001ed8:	3fe00000 	.word	0x3fe00000
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	f04f 0000 	mov.w	r0, #0
 8001ee4:	49e9      	ldr	r1, [pc, #932]	; (800228c <MadgwickAHRSupdate+0xbe0>)
 8001ee6:	f7fe f9e7 	bl	80002b8 <__aeabi_dsub>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4614      	mov	r4, r2
 8001ef0:	461d      	mov	r5, r3
 8001ef2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001ef4:	f7fe fb40 	bl	8000578 <__aeabi_f2d>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4620      	mov	r0, r4
 8001efe:	4629      	mov	r1, r5
 8001f00:	f7fe f9da 	bl	80002b8 <__aeabi_dsub>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f0c:	f7fe fb8c 	bl	8000628 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4650      	mov	r0, sl
 8001f16:	4659      	mov	r1, fp
 8001f18:	f7fe f9d0 	bl	80002bc <__adddf3>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4614      	mov	r4, r2
 8001f22:	461d      	mov	r5, r3
 8001f24:	69b8      	ldr	r0, [r7, #24]
 8001f26:	f7fe fb27 	bl	8000578 <__aeabi_f2d>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	4620      	mov	r0, r4
 8001f30:	4629      	mov	r1, r5
 8001f32:	f7fe f9c1 	bl	80002b8 <__aeabi_dsub>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4640      	mov	r0, r8
 8001f3c:	4649      	mov	r1, r9
 8001f3e:	f7fe fb73 	bl	8000628 <__aeabi_dmul>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f4a:	f7fe f9b7 	bl	80002bc <__adddf3>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	4610      	mov	r0, r2
 8001f54:	4619      	mov	r1, r3
 8001f56:	f7fe fe5f 	bl	8000c18 <__aeabi_d2f>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
		s1= _2q3*(2*(q1q3 - q0q2) - ax) +   _2q0*(2*(q0q1 + q2q3) - ay) +   -4*q1*(2*(0.5 - q1q1 - q2q2) - az)    +   _4bz*q3*(_4bx*(0.5 - q2q2 - q3q3) + _4bz*(q1q3 - q0q2) - mx)   + (_4bx*q2+_4bz*q0)*(_4bx*(q1q2 - q0q3) + _4bz*(q0q1 + q2q3) - my)   +   (_4bx*q3-_8bz*q1)*(_4bx*(q0q2 + q1q3) + _4bz*(0.5 - q1q1 - q2q2) - mz);
 8001f5e:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8001f62:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001f66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f6a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001f6e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f76:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001f7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f7e:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8001f82:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f8a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001f8e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001f92:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001f96:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001f9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fa2:	ee17 0a90 	vmov	r0, s15
 8001fa6:	f7fe fae7 	bl	8000578 <__aeabi_f2d>
 8001faa:	4604      	mov	r4, r0
 8001fac:	460d      	mov	r5, r1
 8001fae:	4bb8      	ldr	r3, [pc, #736]	; (8002290 <MadgwickAHRSupdate+0xbe4>)
 8001fb0:	edd3 7a00 	vldr	s15, [r3]
 8001fb4:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 8001fb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fbc:	ee17 0a90 	vmov	r0, s15
 8001fc0:	f7fe fada 	bl	8000578 <__aeabi_f2d>
 8001fc4:	4680      	mov	r8, r0
 8001fc6:	4689      	mov	r9, r1
 8001fc8:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001fcc:	f7fe fad4 	bl	8000578 <__aeabi_f2d>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	f04f 0000 	mov.w	r0, #0
 8001fd8:	49ac      	ldr	r1, [pc, #688]	; (800228c <MadgwickAHRSupdate+0xbe0>)
 8001fda:	f7fe f96d 	bl	80002b8 <__aeabi_dsub>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4692      	mov	sl, r2
 8001fe4:	469b      	mov	fp, r3
 8001fe6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001fe8:	f7fe fac6 	bl	8000578 <__aeabi_f2d>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4650      	mov	r0, sl
 8001ff2:	4659      	mov	r1, fp
 8001ff4:	f7fe f960 	bl	80002b8 <__aeabi_dsub>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	4619      	mov	r1, r3
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	f7fe f95a 	bl	80002bc <__adddf3>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4692      	mov	sl, r2
 800200e:	469b      	mov	fp, r3
 8002010:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002012:	f7fe fab1 	bl	8000578 <__aeabi_f2d>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	4650      	mov	r0, sl
 800201c:	4659      	mov	r1, fp
 800201e:	f7fe f94b 	bl	80002b8 <__aeabi_dsub>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4640      	mov	r0, r8
 8002028:	4649      	mov	r1, r9
 800202a:	f7fe fafd 	bl	8000628 <__aeabi_dmul>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4620      	mov	r0, r4
 8002034:	4629      	mov	r1, r5
 8002036:	f7fe f941 	bl	80002bc <__adddf3>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4692      	mov	sl, r2
 8002040:	469b      	mov	fp, r3
 8002042:	4b94      	ldr	r3, [pc, #592]	; (8002294 <MadgwickAHRSupdate+0xbe8>)
 8002044:	ed93 7a00 	vldr	s14, [r3]
 8002048:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800204c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002050:	ee17 0a90 	vmov	r0, s15
 8002054:	f7fe fa90 	bl	8000578 <__aeabi_f2d>
 8002058:	4604      	mov	r4, r0
 800205a:	460d      	mov	r5, r1
 800205c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800205e:	f7fe fa8b 	bl	8000578 <__aeabi_f2d>
 8002062:	4680      	mov	r8, r0
 8002064:	4689      	mov	r9, r1
 8002066:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002068:	f7fe fa86 	bl	8000578 <__aeabi_f2d>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	f04f 0000 	mov.w	r0, #0
 8002074:	4985      	ldr	r1, [pc, #532]	; (800228c <MadgwickAHRSupdate+0xbe0>)
 8002076:	f7fe f91f 	bl	80002b8 <__aeabi_dsub>
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002082:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002084:	f7fe fa78 	bl	8000578 <__aeabi_f2d>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002090:	f7fe f912 	bl	80002b8 <__aeabi_dsub>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4640      	mov	r0, r8
 800209a:	4649      	mov	r1, r9
 800209c:	f7fe fac4 	bl	8000628 <__aeabi_dmul>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4690      	mov	r8, r2
 80020a6:	4699      	mov	r9, r3
 80020a8:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80020ac:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80020b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020b4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80020b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020bc:	ee17 0a90 	vmov	r0, s15
 80020c0:	f7fe fa5a 	bl	8000578 <__aeabi_f2d>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4640      	mov	r0, r8
 80020ca:	4649      	mov	r1, r9
 80020cc:	f7fe f8f6 	bl	80002bc <__adddf3>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	4690      	mov	r8, r2
 80020d6:	4699      	mov	r9, r3
 80020d8:	6a38      	ldr	r0, [r7, #32]
 80020da:	f7fe fa4d 	bl	8000578 <__aeabi_f2d>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	4640      	mov	r0, r8
 80020e4:	4649      	mov	r1, r9
 80020e6:	f7fe f8e7 	bl	80002b8 <__aeabi_dsub>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4620      	mov	r0, r4
 80020f0:	4629      	mov	r1, r5
 80020f2:	f7fe fa99 	bl	8000628 <__aeabi_dmul>
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	4650      	mov	r0, sl
 80020fc:	4659      	mov	r1, fp
 80020fe:	f7fe f8dd 	bl	80002bc <__adddf3>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4614      	mov	r4, r2
 8002108:	461d      	mov	r5, r3
 800210a:	4b63      	ldr	r3, [pc, #396]	; (8002298 <MadgwickAHRSupdate+0xbec>)
 800210c:	ed93 7a00 	vldr	s14, [r3]
 8002110:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002114:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002118:	4b60      	ldr	r3, [pc, #384]	; (800229c <MadgwickAHRSupdate+0xbf0>)
 800211a:	edd3 6a00 	vldr	s13, [r3]
 800211e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002122:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002126:	ee37 7a27 	vadd.f32	s14, s14, s15
 800212a:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 800212e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002132:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002136:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800213a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800213e:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 8002142:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002146:	ee36 6a27 	vadd.f32	s12, s12, s15
 800214a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800214e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002152:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002156:	edd7 7a07 	vldr	s15, [r7, #28]
 800215a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800215e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002162:	ee17 0a90 	vmov	r0, s15
 8002166:	f7fe fa07 	bl	8000578 <__aeabi_f2d>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	4620      	mov	r0, r4
 8002170:	4629      	mov	r1, r5
 8002172:	f7fe f8a3 	bl	80002bc <__adddf3>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800217e:	4b45      	ldr	r3, [pc, #276]	; (8002294 <MadgwickAHRSupdate+0xbe8>)
 8002180:	ed93 7a00 	vldr	s14, [r3]
 8002184:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002188:	ee27 7a27 	vmul.f32	s14, s14, s15
 800218c:	4b40      	ldr	r3, [pc, #256]	; (8002290 <MadgwickAHRSupdate+0xbe4>)
 800218e:	edd3 6a00 	vldr	s13, [r3]
 8002192:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002196:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800219a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800219e:	ee17 0a90 	vmov	r0, s15
 80021a2:	f7fe f9e9 	bl	8000578 <__aeabi_f2d>
 80021a6:	4680      	mov	r8, r0
 80021a8:	4689      	mov	r9, r1
 80021aa:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80021ae:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80021b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021b6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80021ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021be:	ee17 0a90 	vmov	r0, s15
 80021c2:	f7fe f9d9 	bl	8000578 <__aeabi_f2d>
 80021c6:	4682      	mov	sl, r0
 80021c8:	468b      	mov	fp, r1
 80021ca:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80021cc:	f7fe f9d4 	bl	8000578 <__aeabi_f2d>
 80021d0:	e9c7 0100 	strd	r0, r1, [r7]
 80021d4:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80021d8:	f7fe f9ce 	bl	8000578 <__aeabi_f2d>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	f04f 0000 	mov.w	r0, #0
 80021e4:	4929      	ldr	r1, [pc, #164]	; (800228c <MadgwickAHRSupdate+0xbe0>)
 80021e6:	f7fe f867 	bl	80002b8 <__aeabi_dsub>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	4614      	mov	r4, r2
 80021f0:	461d      	mov	r5, r3
 80021f2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80021f4:	f7fe f9c0 	bl	8000578 <__aeabi_f2d>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	4620      	mov	r0, r4
 80021fe:	4629      	mov	r1, r5
 8002200:	f7fe f85a 	bl	80002b8 <__aeabi_dsub>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	e9d7 0100 	ldrd	r0, r1, [r7]
 800220c:	f7fe fa0c 	bl	8000628 <__aeabi_dmul>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4650      	mov	r0, sl
 8002216:	4659      	mov	r1, fp
 8002218:	f7fe f850 	bl	80002bc <__adddf3>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	4614      	mov	r4, r2
 8002222:	461d      	mov	r5, r3
 8002224:	69b8      	ldr	r0, [r7, #24]
 8002226:	f7fe f9a7 	bl	8000578 <__aeabi_f2d>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	4620      	mov	r0, r4
 8002230:	4629      	mov	r1, r5
 8002232:	f7fe f841 	bl	80002b8 <__aeabi_dsub>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	4640      	mov	r0, r8
 800223c:	4649      	mov	r1, r9
 800223e:	f7fe f9f3 	bl	8000628 <__aeabi_dmul>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800224a:	f7fe f837 	bl	80002bc <__adddf3>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4610      	mov	r0, r2
 8002254:	4619      	mov	r1, r3
 8002256:	f7fe fcdf 	bl	8000c18 <__aeabi_d2f>
 800225a:	4603      	mov	r3, r0
 800225c:	64bb      	str	r3, [r7, #72]	; 0x48
		s2= -_2q0*(2*(q1q3 - q0q2) - ax)    +     _2q3*(2*(q0q1 + q2q3) - ay)   +   (-4*q2)*(2*(0.5 - q1q1 - q2q2) - az) +   (-_8bx*q2-_4bz*q0)*(_4bx*(0.5 - q2q2 - q3q3) + _4bz*(q1q3 - q0q2) - mx)+(_4bx*q1+_4bz*q3)*(_4bx*(q1q2 - q0q3) + _4bz*(q0q1 + q2q3) - my)+(_4bx*q0-_8bz*q2)*(_4bx*(q0q2 + q1q3) + _4bz*(0.5 - q1q1 - q2q2) - mz);
 800225e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002262:	eeb1 7a67 	vneg.f32	s14, s15
 8002266:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 800226a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800226e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002272:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002276:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800227a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800227e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002282:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8002286:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800228a:	e009      	b.n	80022a0 <MadgwickAHRSupdate+0xbf4>
 800228c:	3fe00000 	.word	0x3fe00000
 8002290:	200022c4 	.word	0x200022c4
 8002294:	200022cc 	.word	0x200022cc
 8002298:	200022c8 	.word	0x200022c8
 800229c:	20000000 	.word	0x20000000
 80022a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022a4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80022a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80022ac:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80022b0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80022b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022bc:	ee17 0a90 	vmov	r0, s15
 80022c0:	f7fe f95a 	bl	8000578 <__aeabi_f2d>
 80022c4:	4604      	mov	r4, r0
 80022c6:	460d      	mov	r5, r1
 80022c8:	4be8      	ldr	r3, [pc, #928]	; (800266c <MadgwickAHRSupdate+0xfc0>)
 80022ca:	edd3 7a00 	vldr	s15, [r3]
 80022ce:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 80022d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022d6:	ee17 0a90 	vmov	r0, s15
 80022da:	f7fe f94d 	bl	8000578 <__aeabi_f2d>
 80022de:	4680      	mov	r8, r0
 80022e0:	4689      	mov	r9, r1
 80022e2:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80022e6:	f7fe f947 	bl	8000578 <__aeabi_f2d>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	f04f 0000 	mov.w	r0, #0
 80022f2:	49df      	ldr	r1, [pc, #892]	; (8002670 <MadgwickAHRSupdate+0xfc4>)
 80022f4:	f7fd ffe0 	bl	80002b8 <__aeabi_dsub>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	4692      	mov	sl, r2
 80022fe:	469b      	mov	fp, r3
 8002300:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002302:	f7fe f939 	bl	8000578 <__aeabi_f2d>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	4650      	mov	r0, sl
 800230c:	4659      	mov	r1, fp
 800230e:	f7fd ffd3 	bl	80002b8 <__aeabi_dsub>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4610      	mov	r0, r2
 8002318:	4619      	mov	r1, r3
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	f7fd ffcd 	bl	80002bc <__adddf3>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	4692      	mov	sl, r2
 8002328:	469b      	mov	fp, r3
 800232a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800232c:	f7fe f924 	bl	8000578 <__aeabi_f2d>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4650      	mov	r0, sl
 8002336:	4659      	mov	r1, fp
 8002338:	f7fd ffbe 	bl	80002b8 <__aeabi_dsub>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	4640      	mov	r0, r8
 8002342:	4649      	mov	r1, r9
 8002344:	f7fe f970 	bl	8000628 <__aeabi_dmul>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4620      	mov	r0, r4
 800234e:	4629      	mov	r1, r5
 8002350:	f7fd ffb4 	bl	80002bc <__adddf3>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4692      	mov	sl, r2
 800235a:	469b      	mov	fp, r3
 800235c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002360:	eeb1 7a67 	vneg.f32	s14, s15
 8002364:	4bc1      	ldr	r3, [pc, #772]	; (800266c <MadgwickAHRSupdate+0xfc0>)
 8002366:	edd3 7a00 	vldr	s15, [r3]
 800236a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800236e:	4bc1      	ldr	r3, [pc, #772]	; (8002674 <MadgwickAHRSupdate+0xfc8>)
 8002370:	edd3 6a00 	vldr	s13, [r3]
 8002374:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002378:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800237c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002380:	ee17 0a90 	vmov	r0, s15
 8002384:	f7fe f8f8 	bl	8000578 <__aeabi_f2d>
 8002388:	4604      	mov	r4, r0
 800238a:	460d      	mov	r5, r1
 800238c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800238e:	f7fe f8f3 	bl	8000578 <__aeabi_f2d>
 8002392:	4680      	mov	r8, r0
 8002394:	4689      	mov	r9, r1
 8002396:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002398:	f7fe f8ee 	bl	8000578 <__aeabi_f2d>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	f04f 0000 	mov.w	r0, #0
 80023a4:	49b2      	ldr	r1, [pc, #712]	; (8002670 <MadgwickAHRSupdate+0xfc4>)
 80023a6:	f7fd ff87 	bl	80002b8 <__aeabi_dsub>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80023b2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80023b4:	f7fe f8e0 	bl	8000578 <__aeabi_f2d>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023c0:	f7fd ff7a 	bl	80002b8 <__aeabi_dsub>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	4640      	mov	r0, r8
 80023ca:	4649      	mov	r1, r9
 80023cc:	f7fe f92c 	bl	8000628 <__aeabi_dmul>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4690      	mov	r8, r2
 80023d6:	4699      	mov	r9, r3
 80023d8:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80023dc:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80023e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023e4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80023e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ec:	ee17 0a90 	vmov	r0, s15
 80023f0:	f7fe f8c2 	bl	8000578 <__aeabi_f2d>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	4640      	mov	r0, r8
 80023fa:	4649      	mov	r1, r9
 80023fc:	f7fd ff5e 	bl	80002bc <__adddf3>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4690      	mov	r8, r2
 8002406:	4699      	mov	r9, r3
 8002408:	6a38      	ldr	r0, [r7, #32]
 800240a:	f7fe f8b5 	bl	8000578 <__aeabi_f2d>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	4640      	mov	r0, r8
 8002414:	4649      	mov	r1, r9
 8002416:	f7fd ff4f 	bl	80002b8 <__aeabi_dsub>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4620      	mov	r0, r4
 8002420:	4629      	mov	r1, r5
 8002422:	f7fe f901 	bl	8000628 <__aeabi_dmul>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	4650      	mov	r0, sl
 800242c:	4659      	mov	r1, fp
 800242e:	f7fd ff45 	bl	80002bc <__adddf3>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4614      	mov	r4, r2
 8002438:	461d      	mov	r5, r3
 800243a:	4b8f      	ldr	r3, [pc, #572]	; (8002678 <MadgwickAHRSupdate+0xfcc>)
 800243c:	ed93 7a00 	vldr	s14, [r3]
 8002440:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002444:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002448:	4b8c      	ldr	r3, [pc, #560]	; (800267c <MadgwickAHRSupdate+0xfd0>)
 800244a:	edd3 6a00 	vldr	s13, [r3]
 800244e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002452:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002456:	ee37 7a27 	vadd.f32	s14, s14, s15
 800245a:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 800245e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002462:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002466:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800246a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800246e:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 8002472:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002476:	ee36 6a27 	vadd.f32	s12, s12, s15
 800247a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800247e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002482:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002486:	edd7 7a07 	vldr	s15, [r7, #28]
 800248a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800248e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002492:	ee17 0a90 	vmov	r0, s15
 8002496:	f7fe f86f 	bl	8000578 <__aeabi_f2d>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	4620      	mov	r0, r4
 80024a0:	4629      	mov	r1, r5
 80024a2:	f7fd ff0b 	bl	80002bc <__adddf3>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80024ae:	4b71      	ldr	r3, [pc, #452]	; (8002674 <MadgwickAHRSupdate+0xfc8>)
 80024b0:	ed93 7a00 	vldr	s14, [r3]
 80024b4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80024b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024bc:	4b6b      	ldr	r3, [pc, #428]	; (800266c <MadgwickAHRSupdate+0xfc0>)
 80024be:	edd3 6a00 	vldr	s13, [r3]
 80024c2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80024c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024ce:	ee17 0a90 	vmov	r0, s15
 80024d2:	f7fe f851 	bl	8000578 <__aeabi_f2d>
 80024d6:	4680      	mov	r8, r0
 80024d8:	4689      	mov	r9, r1
 80024da:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80024de:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80024e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024e6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80024ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ee:	ee17 0a90 	vmov	r0, s15
 80024f2:	f7fe f841 	bl	8000578 <__aeabi_f2d>
 80024f6:	4682      	mov	sl, r0
 80024f8:	468b      	mov	fp, r1
 80024fa:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80024fc:	f7fe f83c 	bl	8000578 <__aeabi_f2d>
 8002500:	e9c7 0100 	strd	r0, r1, [r7]
 8002504:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002508:	f7fe f836 	bl	8000578 <__aeabi_f2d>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	f04f 0000 	mov.w	r0, #0
 8002514:	4956      	ldr	r1, [pc, #344]	; (8002670 <MadgwickAHRSupdate+0xfc4>)
 8002516:	f7fd fecf 	bl	80002b8 <__aeabi_dsub>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	4614      	mov	r4, r2
 8002520:	461d      	mov	r5, r3
 8002522:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002524:	f7fe f828 	bl	8000578 <__aeabi_f2d>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4620      	mov	r0, r4
 800252e:	4629      	mov	r1, r5
 8002530:	f7fd fec2 	bl	80002b8 <__aeabi_dsub>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	e9d7 0100 	ldrd	r0, r1, [r7]
 800253c:	f7fe f874 	bl	8000628 <__aeabi_dmul>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4650      	mov	r0, sl
 8002546:	4659      	mov	r1, fp
 8002548:	f7fd feb8 	bl	80002bc <__adddf3>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	4614      	mov	r4, r2
 8002552:	461d      	mov	r5, r3
 8002554:	69b8      	ldr	r0, [r7, #24]
 8002556:	f7fe f80f 	bl	8000578 <__aeabi_f2d>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	4620      	mov	r0, r4
 8002560:	4629      	mov	r1, r5
 8002562:	f7fd fea9 	bl	80002b8 <__aeabi_dsub>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	4640      	mov	r0, r8
 800256c:	4649      	mov	r1, r9
 800256e:	f7fe f85b 	bl	8000628 <__aeabi_dmul>
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800257a:	f7fd fe9f 	bl	80002bc <__adddf3>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	4610      	mov	r0, r2
 8002584:	4619      	mov	r1, r3
 8002586:	f7fe fb47 	bl	8000c18 <__aeabi_d2f>
 800258a:	4603      	mov	r3, r0
 800258c:	647b      	str	r3, [r7, #68]	; 0x44
		s3= _2q1*(2*(q1q3 - q0q2) - ax) +   _2q2*(2*(q0q1 + q2q3) - ay)+(-_8bx*q3+_4bz*q1)*(_4bx*(0.5 - q2q2 - q3q3) + _4bz*(q1q3 - q0q2) - mx)+(-_4bx*q0+_4bz*q2)*(_4bx*(q1q2 - q0q3) + _4bz*(q0q1 + q2q3) - my)+(_4bx*q1)*(_4bx*(q0q2 + q1q3) + _4bz*(0.5 - q1q1 - q2q2) - mz);
 800258e:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002592:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800259a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800259e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80025a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025a6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80025aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025ae:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 80025b2:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80025b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025ba:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80025be:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80025c2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80025c6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80025ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025d2:	ee17 0a90 	vmov	r0, s15
 80025d6:	f7fd ffcf 	bl	8000578 <__aeabi_f2d>
 80025da:	4604      	mov	r4, r0
 80025dc:	460d      	mov	r5, r1
 80025de:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80025e2:	eeb1 7a67 	vneg.f32	s14, s15
 80025e6:	4b25      	ldr	r3, [pc, #148]	; (800267c <MadgwickAHRSupdate+0xfd0>)
 80025e8:	edd3 7a00 	vldr	s15, [r3]
 80025ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025f0:	4b21      	ldr	r3, [pc, #132]	; (8002678 <MadgwickAHRSupdate+0xfcc>)
 80025f2:	edd3 6a00 	vldr	s13, [r3]
 80025f6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80025fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002602:	ee17 0a90 	vmov	r0, s15
 8002606:	f7fd ffb7 	bl	8000578 <__aeabi_f2d>
 800260a:	4680      	mov	r8, r0
 800260c:	4689      	mov	r9, r1
 800260e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002610:	f7fd ffb2 	bl	8000578 <__aeabi_f2d>
 8002614:	4682      	mov	sl, r0
 8002616:	468b      	mov	fp, r1
 8002618:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800261a:	f7fd ffad 	bl	8000578 <__aeabi_f2d>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	f04f 0000 	mov.w	r0, #0
 8002626:	4912      	ldr	r1, [pc, #72]	; (8002670 <MadgwickAHRSupdate+0xfc4>)
 8002628:	f7fd fe46 	bl	80002b8 <__aeabi_dsub>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002634:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002636:	f7fd ff9f 	bl	8000578 <__aeabi_f2d>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002642:	f7fd fe39 	bl	80002b8 <__aeabi_dsub>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	4650      	mov	r0, sl
 800264c:	4659      	mov	r1, fp
 800264e:	f7fd ffeb 	bl	8000628 <__aeabi_dmul>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4692      	mov	sl, r2
 8002658:	469b      	mov	fp, r3
 800265a:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800265e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002662:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002666:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800266a:	e009      	b.n	8002680 <MadgwickAHRSupdate+0xfd4>
 800266c:	200022c8 	.word	0x200022c8
 8002670:	3fe00000 	.word	0x3fe00000
 8002674:	20000000 	.word	0x20000000
 8002678:	200022c4 	.word	0x200022c4
 800267c:	200022cc 	.word	0x200022cc
 8002680:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002684:	ee17 0a90 	vmov	r0, s15
 8002688:	f7fd ff76 	bl	8000578 <__aeabi_f2d>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4650      	mov	r0, sl
 8002692:	4659      	mov	r1, fp
 8002694:	f7fd fe12 	bl	80002bc <__adddf3>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4692      	mov	sl, r2
 800269e:	469b      	mov	fp, r3
 80026a0:	6a38      	ldr	r0, [r7, #32]
 80026a2:	f7fd ff69 	bl	8000578 <__aeabi_f2d>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4650      	mov	r0, sl
 80026ac:	4659      	mov	r1, fp
 80026ae:	f7fd fe03 	bl	80002b8 <__aeabi_dsub>
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	4640      	mov	r0, r8
 80026b8:	4649      	mov	r1, r9
 80026ba:	f7fd ffb5 	bl	8000628 <__aeabi_dmul>
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	4620      	mov	r0, r4
 80026c4:	4629      	mov	r1, r5
 80026c6:	f7fd fdf9 	bl	80002bc <__adddf3>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	4614      	mov	r4, r2
 80026d0:	461d      	mov	r5, r3
 80026d2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80026d6:	eeb1 7a67 	vneg.f32	s14, s15
 80026da:	4bdf      	ldr	r3, [pc, #892]	; (8002a58 <MadgwickAHRSupdate+0x13ac>)
 80026dc:	edd3 7a00 	vldr	s15, [r3]
 80026e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026e4:	4bdd      	ldr	r3, [pc, #884]	; (8002a5c <MadgwickAHRSupdate+0x13b0>)
 80026e6:	edd3 6a00 	vldr	s13, [r3]
 80026ea:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80026ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026f6:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 80026fa:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80026fe:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002702:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002706:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800270a:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 800270e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002712:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002716:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800271a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800271e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002722:	edd7 7a07 	vldr	s15, [r7, #28]
 8002726:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800272a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800272e:	ee17 0a90 	vmov	r0, s15
 8002732:	f7fd ff21 	bl	8000578 <__aeabi_f2d>
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	4620      	mov	r0, r4
 800273c:	4629      	mov	r1, r5
 800273e:	f7fd fdbd 	bl	80002bc <__adddf3>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800274a:	4bc5      	ldr	r3, [pc, #788]	; (8002a60 <MadgwickAHRSupdate+0x13b4>)
 800274c:	ed93 7a00 	vldr	s14, [r3]
 8002750:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002758:	ee17 0a90 	vmov	r0, s15
 800275c:	f7fd ff0c 	bl	8000578 <__aeabi_f2d>
 8002760:	4680      	mov	r8, r0
 8002762:	4689      	mov	r9, r1
 8002764:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002768:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800276c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002770:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002774:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002778:	ee17 0a90 	vmov	r0, s15
 800277c:	f7fd fefc 	bl	8000578 <__aeabi_f2d>
 8002780:	4682      	mov	sl, r0
 8002782:	468b      	mov	fp, r1
 8002784:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002786:	f7fd fef7 	bl	8000578 <__aeabi_f2d>
 800278a:	e9c7 0100 	strd	r0, r1, [r7]
 800278e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002792:	f7fd fef1 	bl	8000578 <__aeabi_f2d>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	f04f 0000 	mov.w	r0, #0
 800279e:	49b1      	ldr	r1, [pc, #708]	; (8002a64 <MadgwickAHRSupdate+0x13b8>)
 80027a0:	f7fd fd8a 	bl	80002b8 <__aeabi_dsub>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4614      	mov	r4, r2
 80027aa:	461d      	mov	r5, r3
 80027ac:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80027ae:	f7fd fee3 	bl	8000578 <__aeabi_f2d>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	4620      	mov	r0, r4
 80027b8:	4629      	mov	r1, r5
 80027ba:	f7fd fd7d 	bl	80002b8 <__aeabi_dsub>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027c6:	f7fd ff2f 	bl	8000628 <__aeabi_dmul>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	4650      	mov	r0, sl
 80027d0:	4659      	mov	r1, fp
 80027d2:	f7fd fd73 	bl	80002bc <__adddf3>
 80027d6:	4602      	mov	r2, r0
 80027d8:	460b      	mov	r3, r1
 80027da:	4614      	mov	r4, r2
 80027dc:	461d      	mov	r5, r3
 80027de:	69b8      	ldr	r0, [r7, #24]
 80027e0:	f7fd feca 	bl	8000578 <__aeabi_f2d>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4620      	mov	r0, r4
 80027ea:	4629      	mov	r1, r5
 80027ec:	f7fd fd64 	bl	80002b8 <__aeabi_dsub>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4640      	mov	r0, r8
 80027f6:	4649      	mov	r1, r9
 80027f8:	f7fd ff16 	bl	8000628 <__aeabi_dmul>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002804:	f7fd fd5a 	bl	80002bc <__adddf3>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4610      	mov	r0, r2
 800280e:	4619      	mov	r1, r3
 8002810:	f7fe fa02 	bl	8000c18 <__aeabi_d2f>
 8002814:	4603      	mov	r3, r0
 8002816:	643b      	str	r3, [r7, #64]	; 0x40
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002818:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800281c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002820:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002824:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002828:	ee37 7a27 	vadd.f32	s14, s14, s15
 800282c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002830:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002834:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002838:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800283c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002840:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002844:	eeb0 0a67 	vmov.f32	s0, s15
 8002848:	f7fe ff0a 	bl	8001660 <invSqrt>
 800284c:	ed87 0a30 	vstr	s0, [r7, #192]	; 0xc0
		s0 *= recipNorm;
 8002850:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002854:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800285c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		s1 *= recipNorm;
 8002860:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002864:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800286c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		s2 *= recipNorm;
 8002870:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002874:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800287c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		s3 *= recipNorm;
 8002880:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002884:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800288c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

		// Apply feedback step
		qDot1 -= beta * s0;
 8002890:	ed97 7a04 	vldr	s14, [r7, #16]
 8002894:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800289c:	ed97 7a35 	vldr	s14, [r7, #212]	; 0xd4
 80028a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028a4:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
		qDot2 -= beta * s1;
 80028a8:	ed97 7a04 	vldr	s14, [r7, #16]
 80028ac:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80028b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028b4:	ed97 7a34 	vldr	s14, [r7, #208]	; 0xd0
 80028b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028bc:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
		qDot3 -= beta * s2;
 80028c0:	ed97 7a04 	vldr	s14, [r7, #16]
 80028c4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80028c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028cc:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 80028d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028d4:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
		qDot4 -= beta * s3;
 80028d8:	ed97 7a04 	vldr	s14, [r7, #16]
 80028dc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80028e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028e4:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 80028e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028ec:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 80028f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028f4:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80028f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028fc:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8002900:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002904:	4b54      	ldr	r3, [pc, #336]	; (8002a58 <MadgwickAHRSupdate+0x13ac>)
 8002906:	edd3 7a00 	vldr	s15, [r3]
 800290a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800290e:	4b52      	ldr	r3, [pc, #328]	; (8002a58 <MadgwickAHRSupdate+0x13ac>)
 8002910:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8002914:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002918:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800291c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002920:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8002924:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002928:	4b4d      	ldr	r3, [pc, #308]	; (8002a60 <MadgwickAHRSupdate+0x13b4>)
 800292a:	edd3 7a00 	vldr	s15, [r3]
 800292e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002932:	4b4b      	ldr	r3, [pc, #300]	; (8002a60 <MadgwickAHRSupdate+0x13b4>)
 8002934:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8002938:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800293c:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002940:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002944:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8002948:	ee27 7a27 	vmul.f32	s14, s14, s15
 800294c:	4b43      	ldr	r3, [pc, #268]	; (8002a5c <MadgwickAHRSupdate+0x13b0>)
 800294e:	edd3 7a00 	vldr	s15, [r3]
 8002952:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002956:	4b41      	ldr	r3, [pc, #260]	; (8002a5c <MadgwickAHRSupdate+0x13b0>)
 8002958:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 800295c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002960:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002964:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002968:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 800296c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002970:	4b3d      	ldr	r3, [pc, #244]	; (8002a68 <MadgwickAHRSupdate+0x13bc>)
 8002972:	edd3 7a00 	vldr	s15, [r3]
 8002976:	ee77 7a27 	vadd.f32	s15, s14, s15
 800297a:	4b3b      	ldr	r3, [pc, #236]	; (8002a68 <MadgwickAHRSupdate+0x13bc>)
 800297c:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002980:	4b35      	ldr	r3, [pc, #212]	; (8002a58 <MadgwickAHRSupdate+0x13ac>)
 8002982:	ed93 7a00 	vldr	s14, [r3]
 8002986:	4b34      	ldr	r3, [pc, #208]	; (8002a58 <MadgwickAHRSupdate+0x13ac>)
 8002988:	edd3 7a00 	vldr	s15, [r3]
 800298c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002990:	4b33      	ldr	r3, [pc, #204]	; (8002a60 <MadgwickAHRSupdate+0x13b4>)
 8002992:	edd3 6a00 	vldr	s13, [r3]
 8002996:	4b32      	ldr	r3, [pc, #200]	; (8002a60 <MadgwickAHRSupdate+0x13b4>)
 8002998:	edd3 7a00 	vldr	s15, [r3]
 800299c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029a4:	4b2d      	ldr	r3, [pc, #180]	; (8002a5c <MadgwickAHRSupdate+0x13b0>)
 80029a6:	edd3 6a00 	vldr	s13, [r3]
 80029aa:	4b2c      	ldr	r3, [pc, #176]	; (8002a5c <MadgwickAHRSupdate+0x13b0>)
 80029ac:	edd3 7a00 	vldr	s15, [r3]
 80029b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029b8:	4b2b      	ldr	r3, [pc, #172]	; (8002a68 <MadgwickAHRSupdate+0x13bc>)
 80029ba:	edd3 6a00 	vldr	s13, [r3]
 80029be:	4b2a      	ldr	r3, [pc, #168]	; (8002a68 <MadgwickAHRSupdate+0x13bc>)
 80029c0:	edd3 7a00 	vldr	s15, [r3]
 80029c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029cc:	eeb0 0a67 	vmov.f32	s0, s15
 80029d0:	f7fe fe46 	bl	8001660 <invSqrt>
 80029d4:	ed87 0a30 	vstr	s0, [r7, #192]	; 0xc0
	q0 *= recipNorm;
 80029d8:	4b1f      	ldr	r3, [pc, #124]	; (8002a58 <MadgwickAHRSupdate+0x13ac>)
 80029da:	ed93 7a00 	vldr	s14, [r3]
 80029de:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80029e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029e6:	4b1c      	ldr	r3, [pc, #112]	; (8002a58 <MadgwickAHRSupdate+0x13ac>)
 80029e8:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 80029ec:	4b1c      	ldr	r3, [pc, #112]	; (8002a60 <MadgwickAHRSupdate+0x13b4>)
 80029ee:	ed93 7a00 	vldr	s14, [r3]
 80029f2:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80029f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029fa:	4b19      	ldr	r3, [pc, #100]	; (8002a60 <MadgwickAHRSupdate+0x13b4>)
 80029fc:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8002a00:	4b16      	ldr	r3, [pc, #88]	; (8002a5c <MadgwickAHRSupdate+0x13b0>)
 8002a02:	ed93 7a00 	vldr	s14, [r3]
 8002a06:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a0e:	4b13      	ldr	r3, [pc, #76]	; (8002a5c <MadgwickAHRSupdate+0x13b0>)
 8002a10:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8002a14:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <MadgwickAHRSupdate+0x13bc>)
 8002a16:	ed93 7a00 	vldr	s14, [r3]
 8002a1a:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a22:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <MadgwickAHRSupdate+0x13bc>)
 8002a24:	edc3 7a00 	vstr	s15, [r3]

	quaternion[0] = q0;
 8002a28:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <MadgwickAHRSupdate+0x13ac>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a2e:	601a      	str	r2, [r3, #0]
	quaternion[1] = q1;
 8002a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a32:	3304      	adds	r3, #4
 8002a34:	4a0a      	ldr	r2, [pc, #40]	; (8002a60 <MadgwickAHRSupdate+0x13b4>)
 8002a36:	6812      	ldr	r2, [r2, #0]
 8002a38:	601a      	str	r2, [r3, #0]
	quaternion[2] = q2;
 8002a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a3c:	3308      	adds	r3, #8
 8002a3e:	4a07      	ldr	r2, [pc, #28]	; (8002a5c <MadgwickAHRSupdate+0x13b0>)
 8002a40:	6812      	ldr	r2, [r2, #0]
 8002a42:	601a      	str	r2, [r3, #0]
	quaternion[3] = q3;
 8002a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a46:	330c      	adds	r3, #12
 8002a48:	4a07      	ldr	r2, [pc, #28]	; (8002a68 <MadgwickAHRSupdate+0x13bc>)
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	601a      	str	r2, [r3, #0]
}
 8002a4e:	37d8      	adds	r7, #216	; 0xd8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a56:	bf00      	nop
 8002a58:	20000000 	.word	0x20000000
 8002a5c:	200022c8 	.word	0x200022c8
 8002a60:	200022c4 	.word	0x200022c4
 8002a64:	3fe00000 	.word	0x3fe00000
 8002a68:	200022cc 	.word	0x200022cc

08002a6c <MadgwickAHRSupdateIMU>:

void MadgwickAHRSupdateIMU(float* quaternion, float gx, float gy, float gz, float ax, float ay, float az, float dt, float beta) {
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b0a2      	sub	sp, #136	; 0x88
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6278      	str	r0, [r7, #36]	; 0x24
 8002a74:	ed87 0a08 	vstr	s0, [r7, #32]
 8002a78:	edc7 0a07 	vstr	s1, [r7, #28]
 8002a7c:	ed87 1a06 	vstr	s2, [r7, #24]
 8002a80:	edc7 1a05 	vstr	s3, [r7, #20]
 8002a84:	ed87 2a04 	vstr	s4, [r7, #16]
 8002a88:	edc7 2a03 	vstr	s5, [r7, #12]
 8002a8c:	ed87 3a02 	vstr	s6, [r7, #8]
 8002a90:	edc7 3a01 	vstr	s7, [r7, #4]
	float recipNorm;
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	float sampleFreq = 1 / dt;
 8002a94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a98:	ed97 7a02 	vldr	s14, [r7, #8]
 8002a9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002aa0:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8002aa4:	4bed      	ldr	r3, [pc, #948]	; (8002e5c <MadgwickAHRSupdateIMU+0x3f0>)
 8002aa6:	edd3 7a00 	vldr	s15, [r3]
 8002aaa:	eeb1 7a67 	vneg.f32	s14, s15
 8002aae:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ab2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ab6:	4bea      	ldr	r3, [pc, #936]	; (8002e60 <MadgwickAHRSupdateIMU+0x3f4>)
 8002ab8:	edd3 6a00 	vldr	s13, [r3]
 8002abc:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ac0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ac4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ac8:	4be6      	ldr	r3, [pc, #920]	; (8002e64 <MadgwickAHRSupdateIMU+0x3f8>)
 8002aca:	edd3 6a00 	vldr	s13, [r3]
 8002ace:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ad2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ad6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ada:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ade:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ae2:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8002ae6:	4be0      	ldr	r3, [pc, #896]	; (8002e68 <MadgwickAHRSupdateIMU+0x3fc>)
 8002ae8:	ed93 7a00 	vldr	s14, [r3]
 8002aec:	edd7 7a08 	vldr	s15, [r7, #32]
 8002af0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002af4:	4bda      	ldr	r3, [pc, #872]	; (8002e60 <MadgwickAHRSupdateIMU+0x3f4>)
 8002af6:	edd3 6a00 	vldr	s13, [r3]
 8002afa:	edd7 7a06 	vldr	s15, [r7, #24]
 8002afe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b06:	4bd7      	ldr	r3, [pc, #860]	; (8002e64 <MadgwickAHRSupdateIMU+0x3f8>)
 8002b08:	edd3 6a00 	vldr	s13, [r3]
 8002b0c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b18:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b20:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8002b24:	4bd0      	ldr	r3, [pc, #832]	; (8002e68 <MadgwickAHRSupdateIMU+0x3fc>)
 8002b26:	ed93 7a00 	vldr	s14, [r3]
 8002b2a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b32:	4bca      	ldr	r3, [pc, #808]	; (8002e5c <MadgwickAHRSupdateIMU+0x3f0>)
 8002b34:	edd3 6a00 	vldr	s13, [r3]
 8002b38:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b44:	4bc7      	ldr	r3, [pc, #796]	; (8002e64 <MadgwickAHRSupdateIMU+0x3f8>)
 8002b46:	edd3 6a00 	vldr	s13, [r3]
 8002b4a:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b56:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b5e:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8002b62:	4bc1      	ldr	r3, [pc, #772]	; (8002e68 <MadgwickAHRSupdateIMU+0x3fc>)
 8002b64:	ed93 7a00 	vldr	s14, [r3]
 8002b68:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b70:	4bba      	ldr	r3, [pc, #744]	; (8002e5c <MadgwickAHRSupdateIMU+0x3f0>)
 8002b72:	edd3 6a00 	vldr	s13, [r3]
 8002b76:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b82:	4bb7      	ldr	r3, [pc, #732]	; (8002e60 <MadgwickAHRSupdateIMU+0x3f4>)
 8002b84:	edd3 6a00 	vldr	s13, [r3]
 8002b88:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b94:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b9c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8002ba0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ba4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bac:	d10e      	bne.n	8002bcc <MadgwickAHRSupdateIMU+0x160>
 8002bae:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bb2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bba:	d107      	bne.n	8002bcc <MadgwickAHRSupdateIMU+0x160>
 8002bbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bc0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc8:	f000 81e0 	beq.w	8002f8c <MadgwickAHRSupdateIMU+0x520>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8002bcc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002bd0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002bd4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bd8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002bdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002be0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002be4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bec:	eeb0 0a67 	vmov.f32	s0, s15
 8002bf0:	f7fe fd36 	bl	8001660 <invSqrt>
 8002bf4:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
		ax *= recipNorm;
 8002bf8:	ed97 7a05 	vldr	s14, [r7, #20]
 8002bfc:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c04:	edc7 7a05 	vstr	s15, [r7, #20]
		ay *= recipNorm;
 8002c08:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c0c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c14:	edc7 7a04 	vstr	s15, [r7, #16]
		az *= recipNorm;
 8002c18:	ed97 7a03 	vldr	s14, [r7, #12]
 8002c1c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c24:	edc7 7a03 	vstr	s15, [r7, #12]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8002c28:	4b8f      	ldr	r3, [pc, #572]	; (8002e68 <MadgwickAHRSupdateIMU+0x3fc>)
 8002c2a:	edd3 7a00 	vldr	s15, [r3]
 8002c2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002c32:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		_2q1 = 2.0f * q1;
 8002c36:	4b89      	ldr	r3, [pc, #548]	; (8002e5c <MadgwickAHRSupdateIMU+0x3f0>)
 8002c38:	edd3 7a00 	vldr	s15, [r3]
 8002c3c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002c40:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		_2q2 = 2.0f * q2;
 8002c44:	4b86      	ldr	r3, [pc, #536]	; (8002e60 <MadgwickAHRSupdateIMU+0x3f4>)
 8002c46:	edd3 7a00 	vldr	s15, [r3]
 8002c4a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002c4e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		_2q3 = 2.0f * q3;
 8002c52:	4b84      	ldr	r3, [pc, #528]	; (8002e64 <MadgwickAHRSupdateIMU+0x3f8>)
 8002c54:	edd3 7a00 	vldr	s15, [r3]
 8002c58:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002c5c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		_4q0 = 4.0f * q0;
 8002c60:	4b81      	ldr	r3, [pc, #516]	; (8002e68 <MadgwickAHRSupdateIMU+0x3fc>)
 8002c62:	edd3 7a00 	vldr	s15, [r3]
 8002c66:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002c6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c6e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		_4q1 = 4.0f * q1;
 8002c72:	4b7a      	ldr	r3, [pc, #488]	; (8002e5c <MadgwickAHRSupdateIMU+0x3f0>)
 8002c74:	edd3 7a00 	vldr	s15, [r3]
 8002c78:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002c7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c80:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_4q2 = 4.0f * q2;
 8002c84:	4b76      	ldr	r3, [pc, #472]	; (8002e60 <MadgwickAHRSupdateIMU+0x3f4>)
 8002c86:	edd3 7a00 	vldr	s15, [r3]
 8002c8a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002c8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c92:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_8q1 = 8.0f * q1;
 8002c96:	4b71      	ldr	r3, [pc, #452]	; (8002e5c <MadgwickAHRSupdateIMU+0x3f0>)
 8002c98:	edd3 7a00 	vldr	s15, [r3]
 8002c9c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002ca0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ca4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_8q2 = 8.0f * q2;
 8002ca8:	4b6d      	ldr	r3, [pc, #436]	; (8002e60 <MadgwickAHRSupdateIMU+0x3f4>)
 8002caa:	edd3 7a00 	vldr	s15, [r3]
 8002cae:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002cb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cb6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		q0q0 = q0 * q0;
 8002cba:	4b6b      	ldr	r3, [pc, #428]	; (8002e68 <MadgwickAHRSupdateIMU+0x3fc>)
 8002cbc:	ed93 7a00 	vldr	s14, [r3]
 8002cc0:	4b69      	ldr	r3, [pc, #420]	; (8002e68 <MadgwickAHRSupdateIMU+0x3fc>)
 8002cc2:	edd3 7a00 	vldr	s15, [r3]
 8002cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cca:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		q1q1 = q1 * q1;
 8002cce:	4b63      	ldr	r3, [pc, #396]	; (8002e5c <MadgwickAHRSupdateIMU+0x3f0>)
 8002cd0:	ed93 7a00 	vldr	s14, [r3]
 8002cd4:	4b61      	ldr	r3, [pc, #388]	; (8002e5c <MadgwickAHRSupdateIMU+0x3f0>)
 8002cd6:	edd3 7a00 	vldr	s15, [r3]
 8002cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cde:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		q2q2 = q2 * q2;
 8002ce2:	4b5f      	ldr	r3, [pc, #380]	; (8002e60 <MadgwickAHRSupdateIMU+0x3f4>)
 8002ce4:	ed93 7a00 	vldr	s14, [r3]
 8002ce8:	4b5d      	ldr	r3, [pc, #372]	; (8002e60 <MadgwickAHRSupdateIMU+0x3f4>)
 8002cea:	edd3 7a00 	vldr	s15, [r3]
 8002cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cf2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		q3q3 = q3 * q3;
 8002cf6:	4b5b      	ldr	r3, [pc, #364]	; (8002e64 <MadgwickAHRSupdateIMU+0x3f8>)
 8002cf8:	ed93 7a00 	vldr	s14, [r3]
 8002cfc:	4b59      	ldr	r3, [pc, #356]	; (8002e64 <MadgwickAHRSupdateIMU+0x3f8>)
 8002cfe:	edd3 7a00 	vldr	s15, [r3]
 8002d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d06:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8002d0a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002d0e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002d12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d16:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8002d1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d26:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8002d2a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002d2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d36:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8002d3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d46:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8002d4a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002d4e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002d52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d56:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8002d5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d66:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002d6a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002d6e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002d72:	4b3a      	ldr	r3, [pc, #232]	; (8002e5c <MadgwickAHRSupdateIMU+0x3f0>)
 8002d74:	edd3 7a00 	vldr	s15, [r3]
 8002d78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d80:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8002d84:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d90:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002d94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d98:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8002d9c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002da0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002da4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002da8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8002dac:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002db0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002db4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002db8:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002dbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dc8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8002dcc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002dd0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002dd4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002dd8:	4b21      	ldr	r3, [pc, #132]	; (8002e60 <MadgwickAHRSupdateIMU+0x3f4>)
 8002dda:	edd3 7a00 	vldr	s15, [r3]
 8002dde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002de2:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8002de6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002dea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002df2:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002df6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002dfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dfe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e02:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8002e06:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e12:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002e16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e1a:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8002e1e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002e22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e2a:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8002e2e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002e32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e3a:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002e3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e4a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8002e4e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002e52:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002e56:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e5a:	e007      	b.n	8002e6c <MadgwickAHRSupdateIMU+0x400>
 8002e5c:	200022c4 	.word	0x200022c4
 8002e60:	200022c8 	.word	0x200022c8
 8002e64:	200022cc 	.word	0x200022cc
 8002e68:	20000000 	.word	0x20000000
 8002e6c:	4ba1      	ldr	r3, [pc, #644]	; (80030f4 <MadgwickAHRSupdateIMU+0x688>)
 8002e6e:	edd3 7a00 	vldr	s15, [r3]
 8002e72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e76:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8002e7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e86:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002e8a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002e8e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002e92:	4b98      	ldr	r3, [pc, #608]	; (80030f4 <MadgwickAHRSupdateIMU+0x688>)
 8002e94:	edd3 7a00 	vldr	s15, [r3]
 8002e98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ea0:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8002ea4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ea8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002eac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eb0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002eb4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002eb8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002ebc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002ec0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002ec4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ec8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002ecc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002ed0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ed4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002ed8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002edc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ee0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ee4:	f7fe fbbc 	bl	8001660 <invSqrt>
 8002ee8:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
		s0 *= recipNorm;
 8002eec:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002ef0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ef8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 *= recipNorm;
 8002efc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002f00:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002f04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f08:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 *= recipNorm;
 8002f0c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002f10:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f18:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 *= recipNorm;
 8002f1c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002f20:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f28:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 8002f2c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f30:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f38:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8002f3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f40:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		qDot2 -= beta * s1;
 8002f44:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f48:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f50:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002f54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f58:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		qDot3 -= beta * s2;
 8002f5c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f60:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f68:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002f6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f70:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		qDot4 -= beta * s3;
 8002f74:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f78:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f80:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002f84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f88:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8002f8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f90:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002f94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f98:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002f9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fa0:	4b55      	ldr	r3, [pc, #340]	; (80030f8 <MadgwickAHRSupdateIMU+0x68c>)
 8002fa2:	edd3 7a00 	vldr	s15, [r3]
 8002fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002faa:	4b53      	ldr	r3, [pc, #332]	; (80030f8 <MadgwickAHRSupdateIMU+0x68c>)
 8002fac:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8002fb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fb4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002fb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fbc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002fc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fc4:	4b4d      	ldr	r3, [pc, #308]	; (80030fc <MadgwickAHRSupdateIMU+0x690>)
 8002fc6:	edd3 7a00 	vldr	s15, [r3]
 8002fca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fce:	4b4b      	ldr	r3, [pc, #300]	; (80030fc <MadgwickAHRSupdateIMU+0x690>)
 8002fd0:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8002fd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fd8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002fdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fe0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002fe4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fe8:	4b45      	ldr	r3, [pc, #276]	; (8003100 <MadgwickAHRSupdateIMU+0x694>)
 8002fea:	edd3 7a00 	vldr	s15, [r3]
 8002fee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ff2:	4b43      	ldr	r3, [pc, #268]	; (8003100 <MadgwickAHRSupdateIMU+0x694>)
 8002ff4:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002ff8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ffc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003000:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003004:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8003008:	ee27 7a27 	vmul.f32	s14, s14, s15
 800300c:	4b39      	ldr	r3, [pc, #228]	; (80030f4 <MadgwickAHRSupdateIMU+0x688>)
 800300e:	edd3 7a00 	vldr	s15, [r3]
 8003012:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003016:	4b37      	ldr	r3, [pc, #220]	; (80030f4 <MadgwickAHRSupdateIMU+0x688>)
 8003018:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800301c:	4b36      	ldr	r3, [pc, #216]	; (80030f8 <MadgwickAHRSupdateIMU+0x68c>)
 800301e:	ed93 7a00 	vldr	s14, [r3]
 8003022:	4b35      	ldr	r3, [pc, #212]	; (80030f8 <MadgwickAHRSupdateIMU+0x68c>)
 8003024:	edd3 7a00 	vldr	s15, [r3]
 8003028:	ee27 7a27 	vmul.f32	s14, s14, s15
 800302c:	4b33      	ldr	r3, [pc, #204]	; (80030fc <MadgwickAHRSupdateIMU+0x690>)
 800302e:	edd3 6a00 	vldr	s13, [r3]
 8003032:	4b32      	ldr	r3, [pc, #200]	; (80030fc <MadgwickAHRSupdateIMU+0x690>)
 8003034:	edd3 7a00 	vldr	s15, [r3]
 8003038:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800303c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003040:	4b2f      	ldr	r3, [pc, #188]	; (8003100 <MadgwickAHRSupdateIMU+0x694>)
 8003042:	edd3 6a00 	vldr	s13, [r3]
 8003046:	4b2e      	ldr	r3, [pc, #184]	; (8003100 <MadgwickAHRSupdateIMU+0x694>)
 8003048:	edd3 7a00 	vldr	s15, [r3]
 800304c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003050:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003054:	4b27      	ldr	r3, [pc, #156]	; (80030f4 <MadgwickAHRSupdateIMU+0x688>)
 8003056:	edd3 6a00 	vldr	s13, [r3]
 800305a:	4b26      	ldr	r3, [pc, #152]	; (80030f4 <MadgwickAHRSupdateIMU+0x688>)
 800305c:	edd3 7a00 	vldr	s15, [r3]
 8003060:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003068:	eeb0 0a67 	vmov.f32	s0, s15
 800306c:	f7fe faf8 	bl	8001660 <invSqrt>
 8003070:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
	q0 *= recipNorm;
 8003074:	4b20      	ldr	r3, [pc, #128]	; (80030f8 <MadgwickAHRSupdateIMU+0x68c>)
 8003076:	ed93 7a00 	vldr	s14, [r3]
 800307a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800307e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003082:	4b1d      	ldr	r3, [pc, #116]	; (80030f8 <MadgwickAHRSupdateIMU+0x68c>)
 8003084:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8003088:	4b1c      	ldr	r3, [pc, #112]	; (80030fc <MadgwickAHRSupdateIMU+0x690>)
 800308a:	ed93 7a00 	vldr	s14, [r3]
 800308e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003096:	4b19      	ldr	r3, [pc, #100]	; (80030fc <MadgwickAHRSupdateIMU+0x690>)
 8003098:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 800309c:	4b18      	ldr	r3, [pc, #96]	; (8003100 <MadgwickAHRSupdateIMU+0x694>)
 800309e:	ed93 7a00 	vldr	s14, [r3]
 80030a2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80030a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030aa:	4b15      	ldr	r3, [pc, #84]	; (8003100 <MadgwickAHRSupdateIMU+0x694>)
 80030ac:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 80030b0:	4b10      	ldr	r3, [pc, #64]	; (80030f4 <MadgwickAHRSupdateIMU+0x688>)
 80030b2:	ed93 7a00 	vldr	s14, [r3]
 80030b6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80030ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030be:	4b0d      	ldr	r3, [pc, #52]	; (80030f4 <MadgwickAHRSupdateIMU+0x688>)
 80030c0:	edc3 7a00 	vstr	s15, [r3]

	quaternion[0] = q0;
 80030c4:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <MadgwickAHRSupdateIMU+0x68c>)
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	601a      	str	r2, [r3, #0]
	quaternion[1] = q1;
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	3304      	adds	r3, #4
 80030d0:	4a0a      	ldr	r2, [pc, #40]	; (80030fc <MadgwickAHRSupdateIMU+0x690>)
 80030d2:	6812      	ldr	r2, [r2, #0]
 80030d4:	601a      	str	r2, [r3, #0]
	quaternion[2] = q2;
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	3308      	adds	r3, #8
 80030da:	4a09      	ldr	r2, [pc, #36]	; (8003100 <MadgwickAHRSupdateIMU+0x694>)
 80030dc:	6812      	ldr	r2, [r2, #0]
 80030de:	601a      	str	r2, [r3, #0]
	quaternion[3] = q3;
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	330c      	adds	r3, #12
 80030e4:	4a03      	ldr	r2, [pc, #12]	; (80030f4 <MadgwickAHRSupdateIMU+0x688>)
 80030e6:	6812      	ldr	r2, [r2, #0]
 80030e8:	601a      	str	r2, [r3, #0]
}
 80030ea:	bf00      	nop
 80030ec:	3788      	adds	r7, #136	; 0x88
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	200022cc 	.word	0x200022cc
 80030f8:	20000000 	.word	0x20000000
 80030fc:	200022c4 	.word	0x200022c4
 8003100:	200022c8 	.word	0x200022c8

08003104 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8003108:	f002 faac 	bl	8005664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800310c:	f000 f816 	bl	800313c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003110:	f000 f9c6 	bl	80034a0 <MX_GPIO_Init>
  MX_SPI5_Init();
 8003114:	f000 f93a 	bl	800338c <MX_SPI5_Init>
  MX_I2C1_Init();
 8003118:	f000 f87a 	bl	8003210 <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 800311c:	f000 f8a6 	bl	800326c <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8003120:	f000 f8c8 	bl	80032b4 <MX_SPI1_Init>
  MX_SPI4_Init();
 8003124:	f000 f8fc 	bl	8003320 <MX_SPI4_Init>
  MX_USART1_UART_Init();
 8003128:	f000 f966 	bl	80033f8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800312c:	f000 f98e 	bl	800344c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8003130:	f007 facc 	bl	800a6cc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  app_main();
 8003134:	f7fe f83c 	bl	80011b0 <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003138:	e7fe      	b.n	8003138 <main+0x34>
	...

0800313c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b094      	sub	sp, #80	; 0x50
 8003140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003142:	f107 0320 	add.w	r3, r7, #32
 8003146:	2230      	movs	r2, #48	; 0x30
 8003148:	2100      	movs	r1, #0
 800314a:	4618      	mov	r0, r3
 800314c:	f00c f88a 	bl	800f264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003150:	f107 030c 	add.w	r3, r7, #12
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	605a      	str	r2, [r3, #4]
 800315a:	609a      	str	r2, [r3, #8]
 800315c:	60da      	str	r2, [r3, #12]
 800315e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003160:	2300      	movs	r3, #0
 8003162:	60bb      	str	r3, [r7, #8]
 8003164:	4b28      	ldr	r3, [pc, #160]	; (8003208 <SystemClock_Config+0xcc>)
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	4a27      	ldr	r2, [pc, #156]	; (8003208 <SystemClock_Config+0xcc>)
 800316a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800316e:	6413      	str	r3, [r2, #64]	; 0x40
 8003170:	4b25      	ldr	r3, [pc, #148]	; (8003208 <SystemClock_Config+0xcc>)
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003178:	60bb      	str	r3, [r7, #8]
 800317a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800317c:	2300      	movs	r3, #0
 800317e:	607b      	str	r3, [r7, #4]
 8003180:	4b22      	ldr	r3, [pc, #136]	; (800320c <SystemClock_Config+0xd0>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a21      	ldr	r2, [pc, #132]	; (800320c <SystemClock_Config+0xd0>)
 8003186:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800318a:	6013      	str	r3, [r2, #0]
 800318c:	4b1f      	ldr	r3, [pc, #124]	; (800320c <SystemClock_Config+0xd0>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003194:	607b      	str	r3, [r7, #4]
 8003196:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003198:	2302      	movs	r3, #2
 800319a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800319c:	2301      	movs	r3, #1
 800319e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80031a0:	2310      	movs	r3, #16
 80031a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031a4:	2302      	movs	r3, #2
 80031a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80031a8:	2300      	movs	r3, #0
 80031aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80031ac:	2308      	movs	r3, #8
 80031ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80031b0:	2364      	movs	r3, #100	; 0x64
 80031b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031b4:	2302      	movs	r3, #2
 80031b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80031b8:	2307      	movs	r3, #7
 80031ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031bc:	f107 0320 	add.w	r3, r7, #32
 80031c0:	4618      	mov	r0, r3
 80031c2:	f003 fe81 	bl	8006ec8 <HAL_RCC_OscConfig>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80031cc:	f000 f9e6 	bl	800359c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031d0:	230f      	movs	r3, #15
 80031d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031d4:	2302      	movs	r3, #2
 80031d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031d8:	2300      	movs	r3, #0
 80031da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80031dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80031e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80031e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80031e8:	f107 030c 	add.w	r3, r7, #12
 80031ec:	2103      	movs	r1, #3
 80031ee:	4618      	mov	r0, r3
 80031f0:	f004 f8e2 	bl	80073b8 <HAL_RCC_ClockConfig>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80031fa:	f000 f9cf 	bl	800359c <Error_Handler>
  }
}
 80031fe:	bf00      	nop
 8003200:	3750      	adds	r7, #80	; 0x50
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40023800 	.word	0x40023800
 800320c:	40007000 	.word	0x40007000

08003210 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003214:	4b12      	ldr	r3, [pc, #72]	; (8003260 <MX_I2C1_Init+0x50>)
 8003216:	4a13      	ldr	r2, [pc, #76]	; (8003264 <MX_I2C1_Init+0x54>)
 8003218:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800321a:	4b11      	ldr	r3, [pc, #68]	; (8003260 <MX_I2C1_Init+0x50>)
 800321c:	4a12      	ldr	r2, [pc, #72]	; (8003268 <MX_I2C1_Init+0x58>)
 800321e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003220:	4b0f      	ldr	r3, [pc, #60]	; (8003260 <MX_I2C1_Init+0x50>)
 8003222:	2200      	movs	r2, #0
 8003224:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003226:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <MX_I2C1_Init+0x50>)
 8003228:	2200      	movs	r2, #0
 800322a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800322c:	4b0c      	ldr	r3, [pc, #48]	; (8003260 <MX_I2C1_Init+0x50>)
 800322e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003232:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003234:	4b0a      	ldr	r3, [pc, #40]	; (8003260 <MX_I2C1_Init+0x50>)
 8003236:	2200      	movs	r2, #0
 8003238:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800323a:	4b09      	ldr	r3, [pc, #36]	; (8003260 <MX_I2C1_Init+0x50>)
 800323c:	2200      	movs	r2, #0
 800323e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003240:	4b07      	ldr	r3, [pc, #28]	; (8003260 <MX_I2C1_Init+0x50>)
 8003242:	2200      	movs	r2, #0
 8003244:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003246:	4b06      	ldr	r3, [pc, #24]	; (8003260 <MX_I2C1_Init+0x50>)
 8003248:	2200      	movs	r2, #0
 800324a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800324c:	4804      	ldr	r0, [pc, #16]	; (8003260 <MX_I2C1_Init+0x50>)
 800324e:	f002 fe4b 	bl	8005ee8 <HAL_I2C_Init>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003258:	f000 f9a0 	bl	800359c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800325c:	bf00      	nop
 800325e:	bd80      	pop	{r7, pc}
 8003260:	20002910 	.word	0x20002910
 8003264:	40005400 	.word	0x40005400
 8003268:	000186a0 	.word	0x000186a0

0800326c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003270:	4b0e      	ldr	r3, [pc, #56]	; (80032ac <MX_SDIO_SD_Init+0x40>)
 8003272:	4a0f      	ldr	r2, [pc, #60]	; (80032b0 <MX_SDIO_SD_Init+0x44>)
 8003274:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003276:	4b0d      	ldr	r3, [pc, #52]	; (80032ac <MX_SDIO_SD_Init+0x40>)
 8003278:	2200      	movs	r2, #0
 800327a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <MX_SDIO_SD_Init+0x40>)
 800327e:	2200      	movs	r2, #0
 8003280:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003282:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <MX_SDIO_SD_Init+0x40>)
 8003284:	2200      	movs	r2, #0
 8003286:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003288:	4b08      	ldr	r3, [pc, #32]	; (80032ac <MX_SDIO_SD_Init+0x40>)
 800328a:	2200      	movs	r2, #0
 800328c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800328e:	4b07      	ldr	r3, [pc, #28]	; (80032ac <MX_SDIO_SD_Init+0x40>)
 8003290:	2200      	movs	r2, #0
 8003292:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 3;
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <MX_SDIO_SD_Init+0x40>)
 8003296:	2203      	movs	r2, #3
 8003298:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800329a:	4b04      	ldr	r3, [pc, #16]	; (80032ac <MX_SDIO_SD_Init+0x40>)
 800329c:	2200      	movs	r2, #0
 800329e:	611a      	str	r2, [r3, #16]
  /* USER CODE END SDIO_Init 2 */

}
 80032a0:	bf00      	nop
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	20002a00 	.word	0x20002a00
 80032b0:	40012c00 	.word	0x40012c00

080032b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80032b8:	4b17      	ldr	r3, [pc, #92]	; (8003318 <MX_SPI1_Init+0x64>)
 80032ba:	4a18      	ldr	r2, [pc, #96]	; (800331c <MX_SPI1_Init+0x68>)
 80032bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80032be:	4b16      	ldr	r3, [pc, #88]	; (8003318 <MX_SPI1_Init+0x64>)
 80032c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80032c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80032c6:	4b14      	ldr	r3, [pc, #80]	; (8003318 <MX_SPI1_Init+0x64>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80032cc:	4b12      	ldr	r3, [pc, #72]	; (8003318 <MX_SPI1_Init+0x64>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80032d2:	4b11      	ldr	r3, [pc, #68]	; (8003318 <MX_SPI1_Init+0x64>)
 80032d4:	2202      	movs	r2, #2
 80032d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80032d8:	4b0f      	ldr	r3, [pc, #60]	; (8003318 <MX_SPI1_Init+0x64>)
 80032da:	2201      	movs	r2, #1
 80032dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80032de:	4b0e      	ldr	r3, [pc, #56]	; (8003318 <MX_SPI1_Init+0x64>)
 80032e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80032e6:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <MX_SPI1_Init+0x64>)
 80032e8:	2230      	movs	r2, #48	; 0x30
 80032ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032ec:	4b0a      	ldr	r3, [pc, #40]	; (8003318 <MX_SPI1_Init+0x64>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80032f2:	4b09      	ldr	r3, [pc, #36]	; (8003318 <MX_SPI1_Init+0x64>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032f8:	4b07      	ldr	r3, [pc, #28]	; (8003318 <MX_SPI1_Init+0x64>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80032fe:	4b06      	ldr	r3, [pc, #24]	; (8003318 <MX_SPI1_Init+0x64>)
 8003300:	220a      	movs	r2, #10
 8003302:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003304:	4804      	ldr	r0, [pc, #16]	; (8003318 <MX_SPI1_Init+0x64>)
 8003306:	f005 fbae 	bl	8008a66 <HAL_SPI_Init>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003310:	f000 f944 	bl	800359c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003314:	bf00      	nop
 8003316:	bd80      	pop	{r7, pc}
 8003318:	20002a84 	.word	0x20002a84
 800331c:	40013000 	.word	0x40013000

08003320 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8003324:	4b17      	ldr	r3, [pc, #92]	; (8003384 <MX_SPI4_Init+0x64>)
 8003326:	4a18      	ldr	r2, [pc, #96]	; (8003388 <MX_SPI4_Init+0x68>)
 8003328:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800332a:	4b16      	ldr	r3, [pc, #88]	; (8003384 <MX_SPI4_Init+0x64>)
 800332c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003330:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003332:	4b14      	ldr	r3, [pc, #80]	; (8003384 <MX_SPI4_Init+0x64>)
 8003334:	2200      	movs	r2, #0
 8003336:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003338:	4b12      	ldr	r3, [pc, #72]	; (8003384 <MX_SPI4_Init+0x64>)
 800333a:	2200      	movs	r2, #0
 800333c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800333e:	4b11      	ldr	r3, [pc, #68]	; (8003384 <MX_SPI4_Init+0x64>)
 8003340:	2200      	movs	r2, #0
 8003342:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003344:	4b0f      	ldr	r3, [pc, #60]	; (8003384 <MX_SPI4_Init+0x64>)
 8003346:	2200      	movs	r2, #0
 8003348:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800334a:	4b0e      	ldr	r3, [pc, #56]	; (8003384 <MX_SPI4_Init+0x64>)
 800334c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003350:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003352:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <MX_SPI4_Init+0x64>)
 8003354:	2228      	movs	r2, #40	; 0x28
 8003356:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003358:	4b0a      	ldr	r3, [pc, #40]	; (8003384 <MX_SPI4_Init+0x64>)
 800335a:	2200      	movs	r2, #0
 800335c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800335e:	4b09      	ldr	r3, [pc, #36]	; (8003384 <MX_SPI4_Init+0x64>)
 8003360:	2200      	movs	r2, #0
 8003362:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003364:	4b07      	ldr	r3, [pc, #28]	; (8003384 <MX_SPI4_Init+0x64>)
 8003366:	2200      	movs	r2, #0
 8003368:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 800336a:	4b06      	ldr	r3, [pc, #24]	; (8003384 <MX_SPI4_Init+0x64>)
 800336c:	220a      	movs	r2, #10
 800336e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003370:	4804      	ldr	r0, [pc, #16]	; (8003384 <MX_SPI4_Init+0x64>)
 8003372:	f005 fb78 	bl	8008a66 <HAL_SPI_Init>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 800337c:	f000 f90e 	bl	800359c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8003380:	bf00      	nop
 8003382:	bd80      	pop	{r7, pc}
 8003384:	200029a8 	.word	0x200029a8
 8003388:	40013400 	.word	0x40013400

0800338c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8003390:	4b17      	ldr	r3, [pc, #92]	; (80033f0 <MX_SPI5_Init+0x64>)
 8003392:	4a18      	ldr	r2, [pc, #96]	; (80033f4 <MX_SPI5_Init+0x68>)
 8003394:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003396:	4b16      	ldr	r3, [pc, #88]	; (80033f0 <MX_SPI5_Init+0x64>)
 8003398:	f44f 7282 	mov.w	r2, #260	; 0x104
 800339c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800339e:	4b14      	ldr	r3, [pc, #80]	; (80033f0 <MX_SPI5_Init+0x64>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80033a4:	4b12      	ldr	r3, [pc, #72]	; (80033f0 <MX_SPI5_Init+0x64>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033aa:	4b11      	ldr	r3, [pc, #68]	; (80033f0 <MX_SPI5_Init+0x64>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033b0:	4b0f      	ldr	r3, [pc, #60]	; (80033f0 <MX_SPI5_Init+0x64>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80033b6:	4b0e      	ldr	r3, [pc, #56]	; (80033f0 <MX_SPI5_Init+0x64>)
 80033b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033bc:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80033be:	4b0c      	ldr	r3, [pc, #48]	; (80033f0 <MX_SPI5_Init+0x64>)
 80033c0:	2230      	movs	r2, #48	; 0x30
 80033c2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033c4:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <MX_SPI5_Init+0x64>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80033ca:	4b09      	ldr	r3, [pc, #36]	; (80033f0 <MX_SPI5_Init+0x64>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033d0:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <MX_SPI5_Init+0x64>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80033d6:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <MX_SPI5_Init+0x64>)
 80033d8:	220a      	movs	r2, #10
 80033da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80033dc:	4804      	ldr	r0, [pc, #16]	; (80033f0 <MX_SPI5_Init+0x64>)
 80033de:	f005 fb42 	bl	8008a66 <HAL_SPI_Init>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80033e8:	f000 f8d8 	bl	800359c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80033ec:	bf00      	nop
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	200028b8 	.word	0x200028b8
 80033f4:	40015000 	.word	0x40015000

080033f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80033fc:	4b11      	ldr	r3, [pc, #68]	; (8003444 <MX_USART1_UART_Init+0x4c>)
 80033fe:	4a12      	ldr	r2, [pc, #72]	; (8003448 <MX_USART1_UART_Init+0x50>)
 8003400:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003402:	4b10      	ldr	r3, [pc, #64]	; (8003444 <MX_USART1_UART_Init+0x4c>)
 8003404:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003408:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800340a:	4b0e      	ldr	r3, [pc, #56]	; (8003444 <MX_USART1_UART_Init+0x4c>)
 800340c:	2200      	movs	r2, #0
 800340e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003410:	4b0c      	ldr	r3, [pc, #48]	; (8003444 <MX_USART1_UART_Init+0x4c>)
 8003412:	2200      	movs	r2, #0
 8003414:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003416:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <MX_USART1_UART_Init+0x4c>)
 8003418:	2200      	movs	r2, #0
 800341a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800341c:	4b09      	ldr	r3, [pc, #36]	; (8003444 <MX_USART1_UART_Init+0x4c>)
 800341e:	220c      	movs	r2, #12
 8003420:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003422:	4b08      	ldr	r3, [pc, #32]	; (8003444 <MX_USART1_UART_Init+0x4c>)
 8003424:	2200      	movs	r2, #0
 8003426:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003428:	4b06      	ldr	r3, [pc, #24]	; (8003444 <MX_USART1_UART_Init+0x4c>)
 800342a:	2200      	movs	r2, #0
 800342c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800342e:	4805      	ldr	r0, [pc, #20]	; (8003444 <MX_USART1_UART_Init+0x4c>)
 8003430:	f006 f8c2 	bl	80095b8 <HAL_UART_Init>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800343a:	f000 f8af 	bl	800359c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800343e:	bf00      	nop
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	20002964 	.word	0x20002964
 8003448:	40011000 	.word	0x40011000

0800344c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003450:	4b11      	ldr	r3, [pc, #68]	; (8003498 <MX_USART2_UART_Init+0x4c>)
 8003452:	4a12      	ldr	r2, [pc, #72]	; (800349c <MX_USART2_UART_Init+0x50>)
 8003454:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003456:	4b10      	ldr	r3, [pc, #64]	; (8003498 <MX_USART2_UART_Init+0x4c>)
 8003458:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800345c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800345e:	4b0e      	ldr	r3, [pc, #56]	; (8003498 <MX_USART2_UART_Init+0x4c>)
 8003460:	2200      	movs	r2, #0
 8003462:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003464:	4b0c      	ldr	r3, [pc, #48]	; (8003498 <MX_USART2_UART_Init+0x4c>)
 8003466:	2200      	movs	r2, #0
 8003468:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800346a:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <MX_USART2_UART_Init+0x4c>)
 800346c:	2200      	movs	r2, #0
 800346e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003470:	4b09      	ldr	r3, [pc, #36]	; (8003498 <MX_USART2_UART_Init+0x4c>)
 8003472:	220c      	movs	r2, #12
 8003474:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003476:	4b08      	ldr	r3, [pc, #32]	; (8003498 <MX_USART2_UART_Init+0x4c>)
 8003478:	2200      	movs	r2, #0
 800347a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800347c:	4b06      	ldr	r3, [pc, #24]	; (8003498 <MX_USART2_UART_Init+0x4c>)
 800347e:	2200      	movs	r2, #0
 8003480:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003482:	4805      	ldr	r0, [pc, #20]	; (8003498 <MX_USART2_UART_Init+0x4c>)
 8003484:	f006 f898 	bl	80095b8 <HAL_UART_Init>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800348e:	f000 f885 	bl	800359c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003492:	bf00      	nop
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20002adc 	.word	0x20002adc
 800349c:	40004400 	.word	0x40004400

080034a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a6:	f107 030c 	add.w	r3, r7, #12
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	605a      	str	r2, [r3, #4]
 80034b0:	609a      	str	r2, [r3, #8]
 80034b2:	60da      	str	r2, [r3, #12]
 80034b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034b6:	2300      	movs	r3, #0
 80034b8:	60bb      	str	r3, [r7, #8]
 80034ba:	4b34      	ldr	r3, [pc, #208]	; (800358c <MX_GPIO_Init+0xec>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	4a33      	ldr	r2, [pc, #204]	; (800358c <MX_GPIO_Init+0xec>)
 80034c0:	f043 0304 	orr.w	r3, r3, #4
 80034c4:	6313      	str	r3, [r2, #48]	; 0x30
 80034c6:	4b31      	ldr	r3, [pc, #196]	; (800358c <MX_GPIO_Init+0xec>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	f003 0304 	and.w	r3, r3, #4
 80034ce:	60bb      	str	r3, [r7, #8]
 80034d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d2:	2300      	movs	r3, #0
 80034d4:	607b      	str	r3, [r7, #4]
 80034d6:	4b2d      	ldr	r3, [pc, #180]	; (800358c <MX_GPIO_Init+0xec>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	4a2c      	ldr	r2, [pc, #176]	; (800358c <MX_GPIO_Init+0xec>)
 80034dc:	f043 0301 	orr.w	r3, r3, #1
 80034e0:	6313      	str	r3, [r2, #48]	; 0x30
 80034e2:	4b2a      	ldr	r3, [pc, #168]	; (800358c <MX_GPIO_Init+0xec>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	607b      	str	r3, [r7, #4]
 80034ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ee:	2300      	movs	r3, #0
 80034f0:	603b      	str	r3, [r7, #0]
 80034f2:	4b26      	ldr	r3, [pc, #152]	; (800358c <MX_GPIO_Init+0xec>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f6:	4a25      	ldr	r2, [pc, #148]	; (800358c <MX_GPIO_Init+0xec>)
 80034f8:	f043 0302 	orr.w	r3, r3, #2
 80034fc:	6313      	str	r3, [r2, #48]	; 0x30
 80034fe:	4b23      	ldr	r3, [pc, #140]	; (800358c <MX_GPIO_Init+0xec>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	603b      	str	r3, [r7, #0]
 8003508:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LSM_CS_GPIO_Port, LSM_CS_Pin, GPIO_PIN_RESET);
 800350a:	2200      	movs	r2, #0
 800350c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003510:	481f      	ldr	r0, [pc, #124]	; (8003590 <MX_GPIO_Init+0xf0>)
 8003512:	f002 fccf 	bl	8005eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USILITEL_Pin|LIS_CS_Pin, GPIO_PIN_RESET);
 8003516:	2200      	movs	r2, #0
 8003518:	2111      	movs	r1, #17
 800351a:	481e      	ldr	r0, [pc, #120]	; (8003594 <MX_GPIO_Init+0xf4>)
 800351c:	f002 fcca 	bl	8005eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF_CE_Pin|NRF_CS_Pin|CS_TDC_Pin, GPIO_PIN_RESET);
 8003520:	2200      	movs	r2, #0
 8003522:	f240 4106 	movw	r1, #1030	; 0x406
 8003526:	481c      	ldr	r0, [pc, #112]	; (8003598 <MX_GPIO_Init+0xf8>)
 8003528:	f002 fcc4 	bl	8005eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LSM_CS_Pin */
  GPIO_InitStruct.Pin = LSM_CS_Pin;
 800352c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003530:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003532:	2301      	movs	r3, #1
 8003534:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800353a:	2300      	movs	r3, #0
 800353c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LSM_CS_GPIO_Port, &GPIO_InitStruct);
 800353e:	f107 030c 	add.w	r3, r7, #12
 8003542:	4619      	mov	r1, r3
 8003544:	4812      	ldr	r0, [pc, #72]	; (8003590 <MX_GPIO_Init+0xf0>)
 8003546:	f002 fa35 	bl	80059b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USILITEL_Pin LIS_CS_Pin */
  GPIO_InitStruct.Pin = USILITEL_Pin|LIS_CS_Pin;
 800354a:	2311      	movs	r3, #17
 800354c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800354e:	2301      	movs	r3, #1
 8003550:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003552:	2300      	movs	r3, #0
 8003554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003556:	2300      	movs	r3, #0
 8003558:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800355a:	f107 030c 	add.w	r3, r7, #12
 800355e:	4619      	mov	r1, r3
 8003560:	480c      	ldr	r0, [pc, #48]	; (8003594 <MX_GPIO_Init+0xf4>)
 8003562:	f002 fa27 	bl	80059b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CE_Pin NRF_CS_Pin CS_TDC_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CS_Pin|CS_TDC_Pin;
 8003566:	f240 4306 	movw	r3, #1030	; 0x406
 800356a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800356c:	2301      	movs	r3, #1
 800356e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003574:	2300      	movs	r3, #0
 8003576:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003578:	f107 030c 	add.w	r3, r7, #12
 800357c:	4619      	mov	r1, r3
 800357e:	4806      	ldr	r0, [pc, #24]	; (8003598 <MX_GPIO_Init+0xf8>)
 8003580:	f002 fa18 	bl	80059b4 <HAL_GPIO_Init>

}
 8003584:	bf00      	nop
 8003586:	3720      	adds	r7, #32
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40023800 	.word	0x40023800
 8003590:	40020800 	.word	0x40020800
 8003594:	40020000 	.word	0x40020000
 8003598:	40020400 	.word	0x40020400

0800359c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035a0:	b672      	cpsid	i
}
 80035a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035a4:	e7fe      	b.n	80035a4 <Error_Handler+0x8>
	...

080035a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	607b      	str	r3, [r7, #4]
 80035b2:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <HAL_MspInit+0x4c>)
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	4a0f      	ldr	r2, [pc, #60]	; (80035f4 <HAL_MspInit+0x4c>)
 80035b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035bc:	6453      	str	r3, [r2, #68]	; 0x44
 80035be:	4b0d      	ldr	r3, [pc, #52]	; (80035f4 <HAL_MspInit+0x4c>)
 80035c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035c6:	607b      	str	r3, [r7, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	603b      	str	r3, [r7, #0]
 80035ce:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <HAL_MspInit+0x4c>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	4a08      	ldr	r2, [pc, #32]	; (80035f4 <HAL_MspInit+0x4c>)
 80035d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d8:	6413      	str	r3, [r2, #64]	; 0x40
 80035da:	4b06      	ldr	r3, [pc, #24]	; (80035f4 <HAL_MspInit+0x4c>)
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e2:	603b      	str	r3, [r7, #0]
 80035e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40023800 	.word	0x40023800

080035f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b08a      	sub	sp, #40	; 0x28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003600:	f107 0314 	add.w	r3, r7, #20
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	605a      	str	r2, [r3, #4]
 800360a:	609a      	str	r2, [r3, #8]
 800360c:	60da      	str	r2, [r3, #12]
 800360e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a19      	ldr	r2, [pc, #100]	; (800367c <HAL_I2C_MspInit+0x84>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d12c      	bne.n	8003674 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800361a:	2300      	movs	r3, #0
 800361c:	613b      	str	r3, [r7, #16]
 800361e:	4b18      	ldr	r3, [pc, #96]	; (8003680 <HAL_I2C_MspInit+0x88>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	4a17      	ldr	r2, [pc, #92]	; (8003680 <HAL_I2C_MspInit+0x88>)
 8003624:	f043 0302 	orr.w	r3, r3, #2
 8003628:	6313      	str	r3, [r2, #48]	; 0x30
 800362a:	4b15      	ldr	r3, [pc, #84]	; (8003680 <HAL_I2C_MspInit+0x88>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8003636:	f44f 7310 	mov.w	r3, #576	; 0x240
 800363a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800363c:	2312      	movs	r3, #18
 800363e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003640:	2300      	movs	r3, #0
 8003642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003644:	2303      	movs	r3, #3
 8003646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003648:	2304      	movs	r3, #4
 800364a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800364c:	f107 0314 	add.w	r3, r7, #20
 8003650:	4619      	mov	r1, r3
 8003652:	480c      	ldr	r0, [pc, #48]	; (8003684 <HAL_I2C_MspInit+0x8c>)
 8003654:	f002 f9ae 	bl	80059b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003658:	2300      	movs	r3, #0
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	4b08      	ldr	r3, [pc, #32]	; (8003680 <HAL_I2C_MspInit+0x88>)
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	4a07      	ldr	r2, [pc, #28]	; (8003680 <HAL_I2C_MspInit+0x88>)
 8003662:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003666:	6413      	str	r3, [r2, #64]	; 0x40
 8003668:	4b05      	ldr	r3, [pc, #20]	; (8003680 <HAL_I2C_MspInit+0x88>)
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003674:	bf00      	nop
 8003676:	3728      	adds	r7, #40	; 0x28
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40005400 	.word	0x40005400
 8003680:	40023800 	.word	0x40023800
 8003684:	40020400 	.word	0x40020400

08003688 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a0a      	ldr	r2, [pc, #40]	; (80036c0 <HAL_I2C_MspDeInit+0x38>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d10e      	bne.n	80036b8 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800369a:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <HAL_I2C_MspDeInit+0x3c>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	4a09      	ldr	r2, [pc, #36]	; (80036c4 <HAL_I2C_MspDeInit+0x3c>)
 80036a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036a4:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80036a6:	2140      	movs	r1, #64	; 0x40
 80036a8:	4807      	ldr	r0, [pc, #28]	; (80036c8 <HAL_I2C_MspDeInit+0x40>)
 80036aa:	f002 fb07 	bl	8005cbc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80036ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036b2:	4805      	ldr	r0, [pc, #20]	; (80036c8 <HAL_I2C_MspDeInit+0x40>)
 80036b4:	f002 fb02 	bl	8005cbc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80036b8:	bf00      	nop
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40005400 	.word	0x40005400
 80036c4:	40023800 	.word	0x40023800
 80036c8:	40020400 	.word	0x40020400

080036cc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08a      	sub	sp, #40	; 0x28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036d4:	f107 0314 	add.w	r3, r7, #20
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	605a      	str	r2, [r3, #4]
 80036de:	609a      	str	r2, [r3, #8]
 80036e0:	60da      	str	r2, [r3, #12]
 80036e2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a29      	ldr	r2, [pc, #164]	; (8003790 <HAL_SD_MspInit+0xc4>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d14b      	bne.n	8003786 <HAL_SD_MspInit+0xba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80036ee:	2300      	movs	r3, #0
 80036f0:	613b      	str	r3, [r7, #16]
 80036f2:	4b28      	ldr	r3, [pc, #160]	; (8003794 <HAL_SD_MspInit+0xc8>)
 80036f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f6:	4a27      	ldr	r2, [pc, #156]	; (8003794 <HAL_SD_MspInit+0xc8>)
 80036f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036fc:	6453      	str	r3, [r2, #68]	; 0x44
 80036fe:	4b25      	ldr	r3, [pc, #148]	; (8003794 <HAL_SD_MspInit+0xc8>)
 8003700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003702:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003706:	613b      	str	r3, [r7, #16]
 8003708:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]
 800370e:	4b21      	ldr	r3, [pc, #132]	; (8003794 <HAL_SD_MspInit+0xc8>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003712:	4a20      	ldr	r2, [pc, #128]	; (8003794 <HAL_SD_MspInit+0xc8>)
 8003714:	f043 0301 	orr.w	r3, r3, #1
 8003718:	6313      	str	r3, [r2, #48]	; 0x30
 800371a:	4b1e      	ldr	r3, [pc, #120]	; (8003794 <HAL_SD_MspInit+0xc8>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003726:	2300      	movs	r3, #0
 8003728:	60bb      	str	r3, [r7, #8]
 800372a:	4b1a      	ldr	r3, [pc, #104]	; (8003794 <HAL_SD_MspInit+0xc8>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	4a19      	ldr	r2, [pc, #100]	; (8003794 <HAL_SD_MspInit+0xc8>)
 8003730:	f043 0302 	orr.w	r3, r3, #2
 8003734:	6313      	str	r3, [r2, #48]	; 0x30
 8003736:	4b17      	ldr	r3, [pc, #92]	; (8003794 <HAL_SD_MspInit+0xc8>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	60bb      	str	r3, [r7, #8]
 8003740:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8003742:	f44f 7350 	mov.w	r3, #832	; 0x340
 8003746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003748:	2302      	movs	r3, #2
 800374a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374c:	2300      	movs	r3, #0
 800374e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003750:	2303      	movs	r3, #3
 8003752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003754:	230c      	movs	r3, #12
 8003756:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003758:	f107 0314 	add.w	r3, r7, #20
 800375c:	4619      	mov	r1, r3
 800375e:	480e      	ldr	r0, [pc, #56]	; (8003798 <HAL_SD_MspInit+0xcc>)
 8003760:	f002 f928 	bl	80059b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 8003764:	f248 03a0 	movw	r3, #32928	; 0x80a0
 8003768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800376a:	2302      	movs	r3, #2
 800376c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376e:	2300      	movs	r3, #0
 8003770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003772:	2303      	movs	r3, #3
 8003774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003776:	230c      	movs	r3, #12
 8003778:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800377a:	f107 0314 	add.w	r3, r7, #20
 800377e:	4619      	mov	r1, r3
 8003780:	4806      	ldr	r0, [pc, #24]	; (800379c <HAL_SD_MspInit+0xd0>)
 8003782:	f002 f917 	bl	80059b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8003786:	bf00      	nop
 8003788:	3728      	adds	r7, #40	; 0x28
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40012c00 	.word	0x40012c00
 8003794:	40023800 	.word	0x40023800
 8003798:	40020000 	.word	0x40020000
 800379c:	40020400 	.word	0x40020400

080037a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b090      	sub	sp, #64	; 0x40
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	605a      	str	r2, [r3, #4]
 80037b2:	609a      	str	r2, [r3, #8]
 80037b4:	60da      	str	r2, [r3, #12]
 80037b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a81      	ldr	r2, [pc, #516]	; (80039c4 <HAL_SPI_MspInit+0x224>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d14a      	bne.n	8003858 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80037c2:	2300      	movs	r3, #0
 80037c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80037c6:	4b80      	ldr	r3, [pc, #512]	; (80039c8 <HAL_SPI_MspInit+0x228>)
 80037c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ca:	4a7f      	ldr	r2, [pc, #508]	; (80039c8 <HAL_SPI_MspInit+0x228>)
 80037cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037d0:	6453      	str	r3, [r2, #68]	; 0x44
 80037d2:	4b7d      	ldr	r3, [pc, #500]	; (80039c8 <HAL_SPI_MspInit+0x228>)
 80037d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037da:	62bb      	str	r3, [r7, #40]	; 0x28
 80037dc:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037de:	2300      	movs	r3, #0
 80037e0:	627b      	str	r3, [r7, #36]	; 0x24
 80037e2:	4b79      	ldr	r3, [pc, #484]	; (80039c8 <HAL_SPI_MspInit+0x228>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	4a78      	ldr	r2, [pc, #480]	; (80039c8 <HAL_SPI_MspInit+0x228>)
 80037e8:	f043 0301 	orr.w	r3, r3, #1
 80037ec:	6313      	str	r3, [r2, #48]	; 0x30
 80037ee:	4b76      	ldr	r3, [pc, #472]	; (80039c8 <HAL_SPI_MspInit+0x228>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	627b      	str	r3, [r7, #36]	; 0x24
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037fa:	2300      	movs	r3, #0
 80037fc:	623b      	str	r3, [r7, #32]
 80037fe:	4b72      	ldr	r3, [pc, #456]	; (80039c8 <HAL_SPI_MspInit+0x228>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	4a71      	ldr	r2, [pc, #452]	; (80039c8 <HAL_SPI_MspInit+0x228>)
 8003804:	f043 0302 	orr.w	r3, r3, #2
 8003808:	6313      	str	r3, [r2, #48]	; 0x30
 800380a:	4b6f      	ldr	r3, [pc, #444]	; (80039c8 <HAL_SPI_MspInit+0x228>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	623b      	str	r3, [r7, #32]
 8003814:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003816:	23a0      	movs	r3, #160	; 0xa0
 8003818:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800381a:	2302      	movs	r3, #2
 800381c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381e:	2300      	movs	r3, #0
 8003820:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003822:	2303      	movs	r3, #3
 8003824:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003826:	2305      	movs	r3, #5
 8003828:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800382a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800382e:	4619      	mov	r1, r3
 8003830:	4866      	ldr	r0, [pc, #408]	; (80039cc <HAL_SPI_MspInit+0x22c>)
 8003832:	f002 f8bf 	bl	80059b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003836:	2310      	movs	r3, #16
 8003838:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800383a:	2302      	movs	r3, #2
 800383c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800383e:	2300      	movs	r3, #0
 8003840:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003842:	2303      	movs	r3, #3
 8003844:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003846:	2305      	movs	r3, #5
 8003848:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800384a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800384e:	4619      	mov	r1, r3
 8003850:	485f      	ldr	r0, [pc, #380]	; (80039d0 <HAL_SPI_MspInit+0x230>)
 8003852:	f002 f8af 	bl	80059b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8003856:	e0b1      	b.n	80039bc <HAL_SPI_MspInit+0x21c>
  else if(hspi->Instance==SPI4)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a5d      	ldr	r2, [pc, #372]	; (80039d4 <HAL_SPI_MspInit+0x234>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d15c      	bne.n	800391c <HAL_SPI_MspInit+0x17c>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003862:	2300      	movs	r3, #0
 8003864:	61fb      	str	r3, [r7, #28]
 8003866:	4b58      	ldr	r3, [pc, #352]	; (80039c8 <HAL_SPI_MspInit+0x228>)
 8003868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386a:	4a57      	ldr	r2, [pc, #348]	; (80039c8 <HAL_SPI_MspInit+0x228>)
 800386c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003870:	6453      	str	r3, [r2, #68]	; 0x44
 8003872:	4b55      	ldr	r3, [pc, #340]	; (80039c8 <HAL_SPI_MspInit+0x228>)
 8003874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003876:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800387a:	61fb      	str	r3, [r7, #28]
 800387c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800387e:	2300      	movs	r3, #0
 8003880:	61bb      	str	r3, [r7, #24]
 8003882:	4b51      	ldr	r3, [pc, #324]	; (80039c8 <HAL_SPI_MspInit+0x228>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003886:	4a50      	ldr	r2, [pc, #320]	; (80039c8 <HAL_SPI_MspInit+0x228>)
 8003888:	f043 0301 	orr.w	r3, r3, #1
 800388c:	6313      	str	r3, [r2, #48]	; 0x30
 800388e:	4b4e      	ldr	r3, [pc, #312]	; (80039c8 <HAL_SPI_MspInit+0x228>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	61bb      	str	r3, [r7, #24]
 8003898:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]
 800389e:	4b4a      	ldr	r3, [pc, #296]	; (80039c8 <HAL_SPI_MspInit+0x228>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	4a49      	ldr	r2, [pc, #292]	; (80039c8 <HAL_SPI_MspInit+0x228>)
 80038a4:	f043 0302 	orr.w	r3, r3, #2
 80038a8:	6313      	str	r3, [r2, #48]	; 0x30
 80038aa:	4b47      	ldr	r3, [pc, #284]	; (80039c8 <HAL_SPI_MspInit+0x228>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	617b      	str	r3, [r7, #20]
 80038b4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80038b6:	2302      	movs	r3, #2
 80038b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ba:	2302      	movs	r3, #2
 80038bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038be:	2300      	movs	r3, #0
 80038c0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038c2:	2303      	movs	r3, #3
 80038c4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80038c6:	2305      	movs	r3, #5
 80038c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038ce:	4619      	mov	r1, r3
 80038d0:	483e      	ldr	r0, [pc, #248]	; (80039cc <HAL_SPI_MspInit+0x22c>)
 80038d2:	f002 f86f 	bl	80059b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80038d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038dc:	2302      	movs	r3, #2
 80038de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038e4:	2303      	movs	r3, #3
 80038e6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 80038e8:	2306      	movs	r3, #6
 80038ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038f0:	4619      	mov	r1, r3
 80038f2:	4837      	ldr	r0, [pc, #220]	; (80039d0 <HAL_SPI_MspInit+0x230>)
 80038f4:	f002 f85e 	bl	80059b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80038f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038fe:	2302      	movs	r3, #2
 8003900:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003902:	2300      	movs	r3, #0
 8003904:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003906:	2303      	movs	r3, #3
 8003908:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 800390a:	2306      	movs	r3, #6
 800390c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800390e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003912:	4619      	mov	r1, r3
 8003914:	482d      	ldr	r0, [pc, #180]	; (80039cc <HAL_SPI_MspInit+0x22c>)
 8003916:	f002 f84d 	bl	80059b4 <HAL_GPIO_Init>
}
 800391a:	e04f      	b.n	80039bc <HAL_SPI_MspInit+0x21c>
  else if(hspi->Instance==SPI5)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a2d      	ldr	r2, [pc, #180]	; (80039d8 <HAL_SPI_MspInit+0x238>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d14a      	bne.n	80039bc <HAL_SPI_MspInit+0x21c>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003926:	2300      	movs	r3, #0
 8003928:	613b      	str	r3, [r7, #16]
 800392a:	4b27      	ldr	r3, [pc, #156]	; (80039c8 <HAL_SPI_MspInit+0x228>)
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	4a26      	ldr	r2, [pc, #152]	; (80039c8 <HAL_SPI_MspInit+0x228>)
 8003930:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003934:	6453      	str	r3, [r2, #68]	; 0x44
 8003936:	4b24      	ldr	r3, [pc, #144]	; (80039c8 <HAL_SPI_MspInit+0x228>)
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800393e:	613b      	str	r3, [r7, #16]
 8003940:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003942:	2300      	movs	r3, #0
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	4b20      	ldr	r3, [pc, #128]	; (80039c8 <HAL_SPI_MspInit+0x228>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	4a1f      	ldr	r2, [pc, #124]	; (80039c8 <HAL_SPI_MspInit+0x228>)
 800394c:	f043 0302 	orr.w	r3, r3, #2
 8003950:	6313      	str	r3, [r2, #48]	; 0x30
 8003952:	4b1d      	ldr	r3, [pc, #116]	; (80039c8 <HAL_SPI_MspInit+0x228>)
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800395e:	2300      	movs	r3, #0
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	4b19      	ldr	r3, [pc, #100]	; (80039c8 <HAL_SPI_MspInit+0x228>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	4a18      	ldr	r2, [pc, #96]	; (80039c8 <HAL_SPI_MspInit+0x228>)
 8003968:	f043 0301 	orr.w	r3, r3, #1
 800396c:	6313      	str	r3, [r2, #48]	; 0x30
 800396e:	4b16      	ldr	r3, [pc, #88]	; (80039c8 <HAL_SPI_MspInit+0x228>)
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	60bb      	str	r3, [r7, #8]
 8003978:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800397a:	2301      	movs	r3, #1
 800397c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800397e:	2302      	movs	r3, #2
 8003980:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003982:	2300      	movs	r3, #0
 8003984:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003986:	2303      	movs	r3, #3
 8003988:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 800398a:	2306      	movs	r3, #6
 800398c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800398e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003992:	4619      	mov	r1, r3
 8003994:	480e      	ldr	r0, [pc, #56]	; (80039d0 <HAL_SPI_MspInit+0x230>)
 8003996:	f002 f80d 	bl	80059b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800399a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800399e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a0:	2302      	movs	r3, #2
 80039a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a4:	2300      	movs	r3, #0
 80039a6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039a8:	2303      	movs	r3, #3
 80039aa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 80039ac:	2306      	movs	r3, #6
 80039ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039b4:	4619      	mov	r1, r3
 80039b6:	4805      	ldr	r0, [pc, #20]	; (80039cc <HAL_SPI_MspInit+0x22c>)
 80039b8:	f001 fffc 	bl	80059b4 <HAL_GPIO_Init>
}
 80039bc:	bf00      	nop
 80039be:	3740      	adds	r7, #64	; 0x40
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40013000 	.word	0x40013000
 80039c8:	40023800 	.word	0x40023800
 80039cc:	40020000 	.word	0x40020000
 80039d0:	40020400 	.word	0x40020400
 80039d4:	40013400 	.word	0x40013400
 80039d8:	40015000 	.word	0x40015000

080039dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08c      	sub	sp, #48	; 0x30
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e4:	f107 031c 	add.w	r3, r7, #28
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	605a      	str	r2, [r3, #4]
 80039ee:	609a      	str	r2, [r3, #8]
 80039f0:	60da      	str	r2, [r3, #12]
 80039f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a45      	ldr	r2, [pc, #276]	; (8003b10 <HAL_UART_MspInit+0x134>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d153      	bne.n	8003aa6 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80039fe:	2300      	movs	r3, #0
 8003a00:	61bb      	str	r3, [r7, #24]
 8003a02:	4b44      	ldr	r3, [pc, #272]	; (8003b14 <HAL_UART_MspInit+0x138>)
 8003a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a06:	4a43      	ldr	r2, [pc, #268]	; (8003b14 <HAL_UART_MspInit+0x138>)
 8003a08:	f043 0310 	orr.w	r3, r3, #16
 8003a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a0e:	4b41      	ldr	r3, [pc, #260]	; (8003b14 <HAL_UART_MspInit+0x138>)
 8003a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a12:	f003 0310 	and.w	r3, r3, #16
 8003a16:	61bb      	str	r3, [r7, #24]
 8003a18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	4b3d      	ldr	r3, [pc, #244]	; (8003b14 <HAL_UART_MspInit+0x138>)
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	4a3c      	ldr	r2, [pc, #240]	; (8003b14 <HAL_UART_MspInit+0x138>)
 8003a24:	f043 0301 	orr.w	r3, r3, #1
 8003a28:	6313      	str	r3, [r2, #48]	; 0x30
 8003a2a:	4b3a      	ldr	r3, [pc, #232]	; (8003b14 <HAL_UART_MspInit+0x138>)
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	617b      	str	r3, [r7, #20]
 8003a34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a36:	2300      	movs	r3, #0
 8003a38:	613b      	str	r3, [r7, #16]
 8003a3a:	4b36      	ldr	r3, [pc, #216]	; (8003b14 <HAL_UART_MspInit+0x138>)
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	4a35      	ldr	r2, [pc, #212]	; (8003b14 <HAL_UART_MspInit+0x138>)
 8003a40:	f043 0302 	orr.w	r3, r3, #2
 8003a44:	6313      	str	r3, [r2, #48]	; 0x30
 8003a46:	4b33      	ldr	r3, [pc, #204]	; (8003b14 <HAL_UART_MspInit+0x138>)
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	613b      	str	r3, [r7, #16]
 8003a50:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a58:	2302      	movs	r3, #2
 8003a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a60:	2303      	movs	r3, #3
 8003a62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a64:	2307      	movs	r3, #7
 8003a66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a68:	f107 031c 	add.w	r3, r7, #28
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	482a      	ldr	r0, [pc, #168]	; (8003b18 <HAL_UART_MspInit+0x13c>)
 8003a70:	f001 ffa0 	bl	80059b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003a74:	2308      	movs	r3, #8
 8003a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a78:	2302      	movs	r3, #2
 8003a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a80:	2303      	movs	r3, #3
 8003a82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a84:	2307      	movs	r3, #7
 8003a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a88:	f107 031c 	add.w	r3, r7, #28
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4823      	ldr	r0, [pc, #140]	; (8003b1c <HAL_UART_MspInit+0x140>)
 8003a90:	f001 ff90 	bl	80059b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003a94:	2200      	movs	r2, #0
 8003a96:	2100      	movs	r1, #0
 8003a98:	2025      	movs	r0, #37	; 0x25
 8003a9a:	f001 ff54 	bl	8005946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003a9e:	2025      	movs	r0, #37	; 0x25
 8003aa0:	f001 ff6d 	bl	800597e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003aa4:	e030      	b.n	8003b08 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART2)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a1d      	ldr	r2, [pc, #116]	; (8003b20 <HAL_UART_MspInit+0x144>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d12b      	bne.n	8003b08 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	4b17      	ldr	r3, [pc, #92]	; (8003b14 <HAL_UART_MspInit+0x138>)
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	4a16      	ldr	r2, [pc, #88]	; (8003b14 <HAL_UART_MspInit+0x138>)
 8003aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003abe:	6413      	str	r3, [r2, #64]	; 0x40
 8003ac0:	4b14      	ldr	r3, [pc, #80]	; (8003b14 <HAL_UART_MspInit+0x138>)
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003acc:	2300      	movs	r3, #0
 8003ace:	60bb      	str	r3, [r7, #8]
 8003ad0:	4b10      	ldr	r3, [pc, #64]	; (8003b14 <HAL_UART_MspInit+0x138>)
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad4:	4a0f      	ldr	r2, [pc, #60]	; (8003b14 <HAL_UART_MspInit+0x138>)
 8003ad6:	f043 0301 	orr.w	r3, r3, #1
 8003ada:	6313      	str	r3, [r2, #48]	; 0x30
 8003adc:	4b0d      	ldr	r3, [pc, #52]	; (8003b14 <HAL_UART_MspInit+0x138>)
 8003ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	60bb      	str	r3, [r7, #8]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003ae8:	230c      	movs	r3, #12
 8003aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aec:	2302      	movs	r3, #2
 8003aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af0:	2300      	movs	r3, #0
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003af4:	2303      	movs	r3, #3
 8003af6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003af8:	2307      	movs	r3, #7
 8003afa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003afc:	f107 031c 	add.w	r3, r7, #28
 8003b00:	4619      	mov	r1, r3
 8003b02:	4805      	ldr	r0, [pc, #20]	; (8003b18 <HAL_UART_MspInit+0x13c>)
 8003b04:	f001 ff56 	bl	80059b4 <HAL_GPIO_Init>
}
 8003b08:	bf00      	nop
 8003b0a:	3730      	adds	r7, #48	; 0x30
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40011000 	.word	0x40011000
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40020000 	.word	0x40020000
 8003b1c:	40020400 	.word	0x40020400
 8003b20:	40004400 	.word	0x40004400

08003b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b28:	e7fe      	b.n	8003b28 <NMI_Handler+0x4>

08003b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b2e:	e7fe      	b.n	8003b2e <HardFault_Handler+0x4>

08003b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b34:	e7fe      	b.n	8003b34 <MemManage_Handler+0x4>

08003b36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b36:	b480      	push	{r7}
 8003b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b3a:	e7fe      	b.n	8003b3a <BusFault_Handler+0x4>

08003b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b40:	e7fe      	b.n	8003b40 <UsageFault_Handler+0x4>

08003b42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b42:	b480      	push	{r7}
 8003b44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b46:	bf00      	nop
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b54:	bf00      	nop
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b62:	bf00      	nop
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b70:	f001 fdca 	bl	8005708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b74:	bf00      	nop
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
		//__disable_irq();
		//#pragma GCC diagnostic push;
		//#pragma GCC diagnostic ignored "-Wunused-variable"
		    volatile uint32_t sr = huart1.Instance->SR;
 8003b7e:	4b08      	ldr	r3, [pc, #32]	; (8003ba0 <USART1_IRQHandler+0x28>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	607b      	str	r3, [r7, #4]
		//#pragma GCC diagnostic pop
		    volatile uint32_t byte = huart1.Instance->DR;
 8003b86:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <USART1_IRQHandler+0x28>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	603b      	str	r3, [r7, #0]
		    //__enable_irq();

		    gps_push_byte(byte);
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f00a fcef 	bl	800e574 <gps_push_byte>
		    (void)sr;
 8003b96:	687b      	ldr	r3, [r7, #4]


	    return;
 8003b98:	bf00      	nop
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	20002964 	.word	0x20002964

08003ba4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
	return 1;
 8003ba8:	2301      	movs	r3, #1
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <_kill>:

int _kill(int pid, int sig)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003bbe:	f00b fb07 	bl	800f1d0 <__errno>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2216      	movs	r2, #22
 8003bc6:	601a      	str	r2, [r3, #0]
	return -1;
 8003bc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <_exit>:

void _exit (int status)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7ff ffe7 	bl	8003bb4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003be6:	e7fe      	b.n	8003be6 <_exit+0x12>

08003be8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	e00a      	b.n	8003c10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003bfa:	f3af 8000 	nop.w
 8003bfe:	4601      	mov	r1, r0
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	60ba      	str	r2, [r7, #8]
 8003c06:	b2ca      	uxtb	r2, r1
 8003c08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	617b      	str	r3, [r7, #20]
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	dbf0      	blt.n	8003bfa <_read+0x12>
	}

return len;
 8003c18:	687b      	ldr	r3, [r7, #4]
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3718      	adds	r7, #24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
	return -1;
 8003c2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
 8003c42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c4a:	605a      	str	r2, [r3, #4]
	return 0;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <_isatty>:

int _isatty(int file)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
	return 1;
 8003c62:	2301      	movs	r3, #1
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
	return 0;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
	...

08003c8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c94:	4a14      	ldr	r2, [pc, #80]	; (8003ce8 <_sbrk+0x5c>)
 8003c96:	4b15      	ldr	r3, [pc, #84]	; (8003cec <_sbrk+0x60>)
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ca0:	4b13      	ldr	r3, [pc, #76]	; (8003cf0 <_sbrk+0x64>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d102      	bne.n	8003cae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ca8:	4b11      	ldr	r3, [pc, #68]	; (8003cf0 <_sbrk+0x64>)
 8003caa:	4a12      	ldr	r2, [pc, #72]	; (8003cf4 <_sbrk+0x68>)
 8003cac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cae:	4b10      	ldr	r3, [pc, #64]	; (8003cf0 <_sbrk+0x64>)
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d207      	bcs.n	8003ccc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003cbc:	f00b fa88 	bl	800f1d0 <__errno>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	220c      	movs	r2, #12
 8003cc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cca:	e009      	b.n	8003ce0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ccc:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <_sbrk+0x64>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cd2:	4b07      	ldr	r3, [pc, #28]	; (8003cf0 <_sbrk+0x64>)
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4413      	add	r3, r2
 8003cda:	4a05      	ldr	r2, [pc, #20]	; (8003cf0 <_sbrk+0x64>)
 8003cdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cde:	68fb      	ldr	r3, [r7, #12]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3718      	adds	r7, #24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	20020000 	.word	0x20020000
 8003cec:	00000400 	.word	0x00000400
 8003cf0:	200022d0 	.word	0x200022d0
 8003cf4:	20004ba8 	.word	0x20004ba8

08003cf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cfc:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <SystemInit+0x20>)
 8003cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d02:	4a05      	ldr	r2, [pc, #20]	; (8003d18 <SystemInit+0x20>)
 8003d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d0c:	bf00      	nop
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	e000ed00 	.word	0xe000ed00

08003d1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d20:	480d      	ldr	r0, [pc, #52]	; (8003d58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003d22:	490e      	ldr	r1, [pc, #56]	; (8003d5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003d24:	4a0e      	ldr	r2, [pc, #56]	; (8003d60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d28:	e002      	b.n	8003d30 <LoopCopyDataInit>

08003d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d2e:	3304      	adds	r3, #4

08003d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d34:	d3f9      	bcc.n	8003d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d36:	4a0b      	ldr	r2, [pc, #44]	; (8003d64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003d38:	4c0b      	ldr	r4, [pc, #44]	; (8003d68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d3c:	e001      	b.n	8003d42 <LoopFillZerobss>

08003d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d40:	3204      	adds	r2, #4

08003d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d44:	d3fb      	bcc.n	8003d3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d46:	f7ff ffd7 	bl	8003cf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d4a:	f00b fa59 	bl	800f200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d4e:	f7ff f9d9 	bl	8003104 <main>
  bx  lr    
 8003d52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d5c:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8003d60:	080154f8 	.word	0x080154f8
  ldr r2, =_sbss
 8003d64:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8003d68:	20004ba4 	.word	0x20004ba4

08003d6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d6c:	e7fe      	b.n	8003d6c <ADC_IRQHandler>

08003d6e <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b084      	sub	sp, #16
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* chip id read try count */
    uint8_t try_count = 5;
 8003d76:	2305      	movs	r3, #5
 8003d78:	73bb      	strb	r3, [r7, #14]
    uint8_t chip_id = 0;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f001 fa14 	bl	80051ac <null_ptr_check>
 8003d84:	4603      	mov	r3, r0
 8003d86:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8003d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d130      	bne.n	8003df2 <bme280_init+0x84>
    {
        while (try_count)
 8003d90:	e025      	b.n	8003dde <bme280_init+0x70>
        {
            /* Read the chip-id of bme280 sensor */
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8003d92:	f107 010d 	add.w	r1, r7, #13
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	20d0      	movs	r0, #208	; 0xd0
 8003d9c:	f000 f82f 	bl	8003dfe <bme280_get_regs>
 8003da0:	4603      	mov	r3, r0
 8003da2:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BME280_OK))
 8003da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d111      	bne.n	8003dd0 <bme280_init+0x62>
            {
                dev->chip_id = chip_id;
 8003dac:	7b7a      	ldrb	r2, [r7, #13]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bme280_soft_reset(dev);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f978 	bl	80040a8 <bme280_soft_reset>
 8003db8:	4603      	mov	r3, r0
 8003dba:	73fb      	strb	r3, [r7, #15]
                if (rslt == BME280_OK)
 8003dbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d110      	bne.n	8003de6 <bme280_init+0x78>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f001 f867 	bl	8004e98 <get_calib_data>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	73fb      	strb	r3, [r7, #15]
                }
                break;
 8003dce:	e00a      	b.n	8003de6 <bme280_init+0x78>
            }

            /* Wait for 1 ms */
            dev->delay_ms(1);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	2001      	movs	r0, #1
 8003dd6:	4798      	blx	r3
            --try_count;
 8003dd8:	7bbb      	ldrb	r3, [r7, #14]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 8003dde:	7bbb      	ldrb	r3, [r7, #14]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1d6      	bne.n	8003d92 <bme280_init+0x24>
 8003de4:	e000      	b.n	8003de8 <bme280_init+0x7a>
                break;
 8003de6:	bf00      	nop
        }

        /* Chip id check failed */
        if (!try_count)
 8003de8:	7bbb      	ldrb	r3, [r7, #14]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <bme280_init+0x84>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 8003dee:	23fe      	movs	r3, #254	; 0xfe
 8003df0:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8003df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8003dfe:	b590      	push	{r4, r7, lr}
 8003e00:	b087      	sub	sp, #28
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607b      	str	r3, [r7, #4]
 8003e08:	4603      	mov	r3, r0
 8003e0a:	73fb      	strb	r3, [r7, #15]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f001 f9cb 	bl	80051ac <null_ptr_check>
 8003e16:	4603      	mov	r3, r0
 8003e18:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8003e1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d117      	bne.n	8003e52 <bme280_get_regs+0x54>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	789b      	ldrb	r3, [r3, #2]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d003      	beq.n	8003e32 <bme280_get_regs+0x34>
        {
            reg_addr = reg_addr | 0x80;
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
 8003e2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e30:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data  */
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685c      	ldr	r4, [r3, #4]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	7858      	ldrb	r0, [r3, #1]
 8003e3a:	89bb      	ldrh	r3, [r7, #12]
 8003e3c:	7bf9      	ldrb	r1, [r7, #15]
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	47a0      	blx	r4
 8003e42:	4603      	mov	r3, r0
 8003e44:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error */
        if (rslt != BME280_OK)
 8003e46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <bme280_get_regs+0x54>
        {
            rslt = BME280_E_COMM_FAIL;
 8003e4e:	23fc      	movs	r3, #252	; 0xfc
 8003e50:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8003e52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	371c      	adds	r7, #28
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd90      	pop	{r4, r7, pc}

08003e5e <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8003e5e:	b590      	push	{r4, r7, lr}
 8003e60:	b08d      	sub	sp, #52	; 0x34
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	60f8      	str	r0, [r7, #12]
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	603b      	str	r3, [r7, #0]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 8003e6e:	79fb      	ldrb	r3, [r7, #7]
 8003e70:	2b0a      	cmp	r3, #10
 8003e72:	d901      	bls.n	8003e78 <bme280_set_regs+0x1a>
    {
        len = 10;
 8003e74:	230a      	movs	r3, #10
 8003e76:	71fb      	strb	r3, [r7, #7]
    }
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003e78:	6838      	ldr	r0, [r7, #0]
 8003e7a:	f001 f997 	bl	80051ac <null_ptr_check>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8003e84:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d156      	bne.n	8003f3a <bme280_set_regs+0xdc>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d053      	beq.n	8003f3a <bme280_set_regs+0xdc>
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d050      	beq.n	8003f3a <bme280_set_regs+0xdc>
    {
        if (len != 0)
 8003e98:	79fb      	ldrb	r3, [r7, #7]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d049      	beq.n	8003f32 <bme280_set_regs+0xd4>
        {
            temp_buff[0] = reg_data[0];
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	753b      	strb	r3, [r7, #20]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	789b      	ldrb	r3, [r3, #2]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d01a      	beq.n	8003ee2 <bme280_set_regs+0x84>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8003eac:	2300      	movs	r3, #0
 8003eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eb2:	e011      	b.n	8003ed8 <bme280_set_regs+0x7a>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8003eb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	4413      	add	r3, r2
 8003ebc:	781a      	ldrb	r2, [r3, #0]
 8003ebe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ec2:	68f9      	ldr	r1, [r7, #12]
 8003ec4:	440b      	add	r3, r1
 8003ec6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8003ece:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ed8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8003edc:	79fb      	ldrb	r3, [r7, #7]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d3e8      	bcc.n	8003eb4 <bme280_set_regs+0x56>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8003ee2:	79fb      	ldrb	r3, [r7, #7]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d90d      	bls.n	8003f04 <bme280_set_regs+0xa6>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8003ee8:	79fb      	ldrb	r3, [r7, #7]
 8003eea:	f107 0114 	add.w	r1, r7, #20
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f001 f816 	bl	8004f22 <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	3b01      	subs	r3, #1
 8003f00:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003f02:	e001      	b.n	8003f08 <bme280_set_regs+0xaa>
            }
            else
            {
                temp_len = len;
 8003f04:	79fb      	ldrb	r3, [r7, #7]
 8003f06:	85bb      	strh	r3, [r7, #44]	; 0x2c
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	689c      	ldr	r4, [r3, #8]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	7858      	ldrb	r0, [r3, #1]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	7819      	ldrb	r1, [r3, #0]
 8003f14:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003f16:	f107 0214 	add.w	r2, r7, #20
 8003f1a:	47a0      	blx	r4
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            /* Check for communication error */
            if (rslt != BME280_OK)
 8003f22:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00b      	beq.n	8003f42 <bme280_set_regs+0xe4>
            {
                rslt = BME280_E_COMM_FAIL;
 8003f2a:	23fc      	movs	r3, #252	; 0xfc
 8003f2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 8003f30:	e007      	b.n	8003f42 <bme280_set_regs+0xe4>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 8003f32:	23fd      	movs	r3, #253	; 0xfd
 8003f34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 8003f38:	e003      	b.n	8003f42 <bme280_set_regs+0xe4>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8003f3a:	23ff      	movs	r3, #255	; 0xff
 8003f3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003f40:	e000      	b.n	8003f44 <bme280_set_regs+0xe6>
        if (len != 0)
 8003f42:	bf00      	nop
    }

    return rslt;
 8003f44:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3734      	adds	r7, #52	; 0x34
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd90      	pop	{r4, r7, pc}

08003f50 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	4603      	mov	r3, r0
 8003f58:	6039      	str	r1, [r7, #0]
 8003f5a:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t sensor_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003f5c:	6838      	ldr	r0, [r7, #0]
 8003f5e:	f001 f925 	bl	80051ac <null_ptr_check>
 8003f62:	4603      	mov	r3, r0
 8003f64:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8003f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d13f      	bne.n	8003fee <bme280_set_sensor_settings+0x9e>
    {
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8003f6e:	f107 030e 	add.w	r3, r7, #14
 8003f72:	6839      	ldr	r1, [r7, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 f874 	bl	8004062 <bme280_get_sensor_mode>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	73fb      	strb	r3, [r7, #15]
        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8003f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d107      	bne.n	8003f96 <bme280_set_sensor_settings+0x46>
 8003f86:	7bbb      	ldrb	r3, [r7, #14]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d004      	beq.n	8003f96 <bme280_set_sensor_settings+0x46>
        {
            rslt = put_device_to_sleep(dev);
 8003f8c:	6838      	ldr	r0, [r7, #0]
 8003f8e:	f000 fb74 	bl	800467a <put_device_to_sleep>
 8003f92:	4603      	mov	r3, r0
 8003f94:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BME280_OK)
 8003f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d127      	bne.n	8003fee <bme280_set_sensor_settings+0x9e>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8003f9e:	79fb      	ldrb	r3, [r7, #7]
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	2007      	movs	r0, #7
 8003fa4:	f001 f8e6 	bl	8005174 <are_settings_changed>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d009      	beq.n	8003fc2 <bme280_set_sensor_settings+0x72>
            {
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003fb4:	79fb      	ldrb	r3, [r7, #7]
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 f9b0 	bl	800431e <set_osr_settings>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	73fb      	strb	r3, [r7, #15]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8003fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d111      	bne.n	8003fee <bme280_set_sensor_settings+0x9e>
 8003fca:	79fb      	ldrb	r3, [r7, #7]
 8003fcc:	4619      	mov	r1, r3
 8003fce:	2018      	movs	r0, #24
 8003fd0:	f001 f8d0 	bl	8005174 <are_settings_changed>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d009      	beq.n	8003fee <bme280_set_sensor_settings+0x9e>
            {
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003fe0:	79fb      	ldrb	r3, [r7, #7]
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f000 fa37 	bl	8004458 <set_filter_standby_settings>
 8003fea:	4603      	mov	r3, r0
 8003fec:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8003fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b084      	sub	sp, #16
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	4603      	mov	r3, r0
 8004002:	6039      	str	r1, [r7, #0]
 8004004:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8004006:	6838      	ldr	r0, [r7, #0]
 8004008:	f001 f8d0 	bl	80051ac <null_ptr_check>
 800400c:	4603      	mov	r3, r0
 800400e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME280_OK)
 8004010:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d11e      	bne.n	8004056 <bme280_set_sensor_mode+0x5c>
    {
        rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8004018:	f107 030e 	add.w	r3, r7, #14
 800401c:	6839      	ldr	r1, [r7, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f000 f81f 	bl	8004062 <bme280_get_sensor_mode>
 8004024:	4603      	mov	r3, r0
 8004026:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode
         */
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8004028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d107      	bne.n	8004040 <bme280_set_sensor_mode+0x46>
 8004030:	7bbb      	ldrb	r3, [r7, #14]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d004      	beq.n	8004040 <bme280_set_sensor_mode+0x46>
        {
            rslt = put_device_to_sleep(dev);
 8004036:	6838      	ldr	r0, [r7, #0]
 8004038:	f000 fb1f 	bl	800467a <put_device_to_sleep>
 800403c:	4603      	mov	r3, r0
 800403e:	73fb      	strb	r3, [r7, #15]
        }

        /* Set the power mode */
        if (rslt == BME280_OK)
 8004040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d106      	bne.n	8004056 <bme280_set_sensor_mode+0x5c>
        {
            rslt = write_power_mode(sensor_mode, dev);
 8004048:	79fb      	ldrb	r3, [r7, #7]
 800404a:	6839      	ldr	r1, [r7, #0]
 800404c:	4618      	mov	r0, r3
 800404e:	f000 fae1 	bl	8004614 <write_power_mode>
 8004052:	4603      	mov	r3, r0
 8004054:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004056:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800406c:	6838      	ldr	r0, [r7, #0]
 800406e:	f001 f89d 	bl	80051ac <null_ptr_check>
 8004072:	4603      	mov	r3, r0
 8004074:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME280_OK)
 8004076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10e      	bne.n	800409c <bme280_get_sensor_mode+0x3a>
    {
        /* Read the power mode register */
        rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2201      	movs	r2, #1
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	20f4      	movs	r0, #244	; 0xf4
 8004086:	f7ff feba 	bl	8003dfe <bme280_get_regs>
 800408a:	4603      	mov	r3, r0
 800408c:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	b2da      	uxtb	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800409c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_RESET_ADDR;
 80040b0:	23e0      	movs	r3, #224	; 0xe0
 80040b2:	737b      	strb	r3, [r7, #13]
    uint8_t status_reg = 0;
 80040b4:	2300      	movs	r3, #0
 80040b6:	733b      	strb	r3, [r7, #12]
    uint8_t try_run = 5;
 80040b8:	2305      	movs	r3, #5
 80040ba:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 80040bc:	23b6      	movs	r3, #182	; 0xb6
 80040be:	72fb      	strb	r3, [r7, #11]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f001 f873 	bl	80051ac <null_ptr_check>
 80040c6:	4603      	mov	r3, r0
 80040c8:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 80040ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d12f      	bne.n	8004132 <bme280_soft_reset+0x8a>
    {
        /* Write the soft reset command in the sensor */
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80040d2:	f107 010b 	add.w	r1, r7, #11
 80040d6:	f107 000d 	add.w	r0, r7, #13
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f7ff febe 	bl	8003e5e <bme280_set_regs>
 80040e2:	4603      	mov	r3, r0
 80040e4:	73fb      	strb	r3, [r7, #15]

        if (rslt == BME280_OK)
 80040e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d121      	bne.n	8004132 <bme280_soft_reset+0x8a>
        {
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                dev->delay_ms(2);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	2002      	movs	r0, #2
 80040f4:	4798      	blx	r3
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 80040f6:	f107 010c 	add.w	r1, r7, #12
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	20f3      	movs	r0, #243	; 0xf3
 8004100:	f7ff fe7d 	bl	8003dfe <bme280_get_regs>
 8004104:	4603      	mov	r3, r0
 8004106:	73fb      	strb	r3, [r7, #15]
            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 8004108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d109      	bne.n	8004124 <bme280_soft_reset+0x7c>
 8004110:	7bbb      	ldrb	r3, [r7, #14]
 8004112:	1e5a      	subs	r2, r3, #1
 8004114:	73ba      	strb	r2, [r7, #14]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d004      	beq.n	8004124 <bme280_soft_reset+0x7c>
 800411a:	7b3b      	ldrb	r3, [r7, #12]
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1e4      	bne.n	80040ee <bme280_soft_reset+0x46>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 8004124:	7b3b      	ldrb	r3, [r7, #12]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <bme280_soft_reset+0x8a>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 800412e:	23fa      	movs	r3, #250	; 0xfa
 8004130:	73fb      	strb	r3, [r7, #15]
            }

        }
    }

    return rslt;
 8004132:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b08a      	sub	sp, #40	; 0x28
 8004142:	af00      	add	r7, sp, #0
 8004144:	4603      	mov	r3, r0
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	607a      	str	r2, [r7, #4]
 800414a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 800414c:	2300      	movs	r3, #0
 800414e:	61fb      	str	r3, [r7, #28]
 8004150:	2300      	movs	r3, #0
 8004152:	623b      	str	r3, [r7, #32]
    struct bme280_uncomp_data uncomp_data = { 0 };
 8004154:	f107 0310 	add.w	r3, r7, #16
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	605a      	str	r2, [r3, #4]
 800415e:	609a      	str	r2, [r3, #8]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f001 f823 	bl	80051ac <null_ptr_check>
 8004166:	4603      	mov	r3, r0
 8004168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if ((rslt == BME280_OK) && (comp_data != NULL))
 800416c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004170:	2b00      	cmp	r3, #0
 8004172:	d124      	bne.n	80041be <bme280_get_sensor_data+0x80>
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d021      	beq.n	80041be <bme280_get_sensor_data+0x80>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 800417a:	f107 011c 	add.w	r1, r7, #28
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2208      	movs	r2, #8
 8004182:	20f7      	movs	r0, #247	; 0xf7
 8004184:	f7ff fe3b 	bl	8003dfe <bme280_get_regs>
 8004188:	4603      	mov	r3, r0
 800418a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 800418e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004192:	2b00      	cmp	r3, #0
 8004194:	d116      	bne.n	80041c4 <bme280_get_sensor_data+0x86>
        {
            /* Parse the read data from the sensor */
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 8004196:	f107 0210 	add.w	r2, r7, #16
 800419a:	f107 031c 	add.w	r3, r7, #28
 800419e:	4611      	mov	r1, r2
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 f815 	bl	80041d0 <bme280_parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	3310      	adds	r3, #16
 80041aa:	f107 0110 	add.w	r1, r7, #16
 80041ae:	7bf8      	ldrb	r0, [r7, #15]
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	f000 f853 	bl	800425c <bme280_compensate_data>
 80041b6:	4603      	mov	r3, r0
 80041b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 80041bc:	e002      	b.n	80041c4 <bme280_get_sensor_data+0x86>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80041be:	23ff      	movs	r3, #255	; 0xff
 80041c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 80041c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3728      	adds	r7, #40	; 0x28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	031b      	lsls	r3, r3, #12
 80041e0:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	3301      	adds	r3, #1
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	011b      	lsls	r3, r3, #4
 80041ea:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3302      	adds	r3, #2
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	091b      	lsrs	r3, r3, #4
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	431a      	orrs	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	431a      	orrs	r2, r3
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << 12;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	3303      	adds	r3, #3
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	031b      	lsls	r3, r3, #12
 800420e:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 4;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3304      	adds	r3, #4
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	011b      	lsls	r3, r3, #4
 8004218:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	3305      	adds	r3, #5
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	091b      	lsrs	r3, r3, #4
 8004222:	b2db      	uxtb	r3, r3
 8004224:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	431a      	orrs	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	431a      	orrs	r2, r3
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for humidity data */
    data_msb = (uint32_t)reg_data[6] << 8;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3306      	adds	r3, #6
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	021b      	lsls	r3, r3, #8
 800423c:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[7];
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	3307      	adds	r3, #7
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	613b      	str	r3, [r7, #16]
    uncomp_data->humidity = data_msb | data_lsb;
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	431a      	orrs	r2, r3
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	609a      	str	r2, [r3, #8]
}
 8004250:	bf00      	nop
 8004252:	371c      	adds	r7, #28
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	607a      	str	r2, [r7, #4]
 8004266:	603b      	str	r3, [r7, #0]
 8004268:	4603      	mov	r3, r0
 800426a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d04b      	beq.n	800430e <bme280_compensate_data+0xb2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d048      	beq.n	800430e <bme280_compensate_data+0xb2>
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d045      	beq.n	800430e <bme280_compensate_data+0xb2>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8004282:	6879      	ldr	r1, [r7, #4]
 8004284:	f04f 0200 	mov.w	r2, #0
 8004288:	f04f 0300 	mov.w	r3, #0
 800428c:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 8004290:	6879      	ldr	r1, [r7, #4]
 8004292:	f04f 0200 	mov.w	r2, #0
 8004296:	f04f 0300 	mov.w	r3, #0
 800429a:	e9c1 2300 	strd	r2, r3, [r1]
        comp_data->humidity = 0;
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	f04f 0300 	mov.w	r3, #0
 80042a8:	e9c1 2304 	strd	r2, r3, [r1, #16]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <bme280_compensate_data+0x70>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 80042b6:	6839      	ldr	r1, [r7, #0]
 80042b8:	68b8      	ldr	r0, [r7, #8]
 80042ba:	f000 fa2b 	bl	8004714 <compensate_temperature>
 80042be:	eeb0 7a40 	vmov.f32	s14, s0
 80042c2:	eef0 7a60 	vmov.f32	s15, s1
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	ed83 7b02 	vstr	d7, [r3, #8]
        }
        if (sensor_comp & BME280_PRESS)
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00a      	beq.n	80042ec <bme280_compensate_data+0x90>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 80042d6:	6839      	ldr	r1, [r7, #0]
 80042d8:	68b8      	ldr	r0, [r7, #8]
 80042da:	f000 faed 	bl	80048b8 <compensate_pressure>
 80042de:	eeb0 7a40 	vmov.f32	s14, s0
 80042e2:	eef0 7a60 	vmov.f32	s15, s1
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	ed83 7b00 	vstr	d7, [r3]
        }
        if (sensor_comp & BME280_HUM)
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	f003 0304 	and.w	r3, r3, #4
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00d      	beq.n	8004312 <bme280_compensate_data+0xb6>
        {
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 80042f6:	6839      	ldr	r1, [r7, #0]
 80042f8:	68b8      	ldr	r0, [r7, #8]
 80042fa:	f000 fcad 	bl	8004c58 <compensate_humidity>
 80042fe:	eeb0 7a40 	vmov.f32	s14, s0
 8004302:	eef0 7a60 	vmov.f32	s15, s1
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	ed83 7b04 	vstr	d7, [r3, #16]
        if (sensor_comp & BME280_HUM)
 800430c:	e001      	b.n	8004312 <bme280_compensate_data+0xb6>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800430e:	23ff      	movs	r3, #255	; 0xff
 8004310:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004312:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <set_osr_settings>:
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings,
                               const struct bme280_settings *settings,
                               const struct bme280_dev *dev)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b086      	sub	sp, #24
 8004322:	af00      	add	r7, sp, #0
 8004324:	4603      	mov	r3, r0
 8004326:	60b9      	str	r1, [r7, #8]
 8004328:	607a      	str	r2, [r7, #4]
 800432a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 800432c:	2301      	movs	r3, #1
 800432e:	75fb      	strb	r3, [r7, #23]

    if (desired_settings & BME280_OSR_HUM_SEL)
 8004330:	7bfb      	ldrb	r3, [r7, #15]
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	2b00      	cmp	r3, #0
 8004338:	d005      	beq.n	8004346 <set_osr_settings+0x28>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	68b8      	ldr	r0, [r7, #8]
 800433e:	f000 f815 	bl	800436c <set_osr_humidity_settings>
 8004342:	4603      	mov	r3, r0
 8004344:	75fb      	strb	r3, [r7, #23]
    }
    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8004346:	7bfb      	ldrb	r3, [r7, #15]
 8004348:	f003 0303 	and.w	r3, r3, #3
 800434c:	2b00      	cmp	r3, #0
 800434e:	d007      	beq.n	8004360 <set_osr_settings+0x42>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8004350:	7bfb      	ldrb	r3, [r7, #15]
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	68b9      	ldr	r1, [r7, #8]
 8004356:	4618      	mov	r0, r3
 8004358:	f000 f842 	bl	80043e0 <set_osr_press_temp_settings>
 800435c:	4603      	mov	r3, r0
 800435e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004360:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004364:	4618      	mov	r0, r3
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8004376:	23f2      	movs	r3, #242	; 0xf2
 8004378:	733b      	strb	r3, [r7, #12]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	789b      	ldrb	r3, [r3, #2]
 800437e:	f003 0307 	and.w	r3, r3, #7
 8004382:	b2db      	uxtb	r3, r3
 8004384:	73bb      	strb	r3, [r7, #14]

    /* Write the humidity control value in the register */
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8004386:	f107 010e 	add.w	r1, r7, #14
 800438a:	f107 000c 	add.w	r0, r7, #12
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2201      	movs	r2, #1
 8004392:	f7ff fd64 	bl	8003e5e <bme280_set_regs>
 8004396:	4603      	mov	r3, r0
 8004398:	73fb      	strb	r3, [r7, #15]

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 800439a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d118      	bne.n	80043d4 <set_osr_humidity_settings+0x68>
    {
        reg_addr = BME280_CTRL_MEAS_ADDR;
 80043a2:	23f4      	movs	r3, #244	; 0xf4
 80043a4:	733b      	strb	r3, [r7, #12]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 80043a6:	7b38      	ldrb	r0, [r7, #12]
 80043a8:	f107 010d 	add.w	r1, r7, #13
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f7ff fd25 	bl	8003dfe <bme280_get_regs>
 80043b4:	4603      	mov	r3, r0
 80043b6:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME280_OK)
 80043b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d109      	bne.n	80043d4 <set_osr_humidity_settings+0x68>
        {
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 80043c0:	f107 010d 	add.w	r1, r7, #13
 80043c4:	f107 000c 	add.w	r0, r7, #12
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f7ff fd47 	bl	8003e5e <bme280_set_regs>
 80043d0:	4603      	mov	r3, r0
 80043d2:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80043d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          const struct bme280_dev *dev)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	4603      	mov	r3, r0
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
 80043ec:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 80043ee:	23f4      	movs	r3, #244	; 0xf4
 80043f0:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80043f2:	7db8      	ldrb	r0, [r7, #22]
 80043f4:	f107 0115 	add.w	r1, r7, #21
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f7ff fcff 	bl	8003dfe <bme280_get_regs>
 8004400:	4603      	mov	r3, r0
 8004402:	75fb      	strb	r3, [r7, #23]
    if (rslt == BME280_OK)
 8004404:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d11f      	bne.n	800444c <set_osr_press_temp_settings+0x6c>
    {
        if (desired_settings & BME280_OSR_PRESS_SEL)
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	d005      	beq.n	8004422 <set_osr_press_temp_settings+0x42>
        {
            fill_osr_press_settings(&reg_data, settings);
 8004416:	f107 0315 	add.w	r3, r7, #21
 800441a:	68b9      	ldr	r1, [r7, #8]
 800441c:	4618      	mov	r0, r3
 800441e:	f000 f88e 	bl	800453e <fill_osr_press_settings>
        }
        if (desired_settings & BME280_OSR_TEMP_SEL)
 8004422:	7bfb      	ldrb	r3, [r7, #15]
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d005      	beq.n	8004438 <set_osr_press_temp_settings+0x58>
        {
            fill_osr_temp_settings(&reg_data, settings);
 800442c:	f107 0315 	add.w	r3, r7, #21
 8004430:	68b9      	ldr	r1, [r7, #8]
 8004432:	4618      	mov	r0, r3
 8004434:	f000 f8a0 	bl	8004578 <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8004438:	f107 0115 	add.w	r1, r7, #21
 800443c:	f107 0016 	add.w	r0, r7, #22
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f7ff fd0b 	bl	8003e5e <bme280_set_regs>
 8004448:	4603      	mov	r3, r0
 800444a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800444c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3718      	adds	r7, #24
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          const struct bme280_dev *dev)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	4603      	mov	r3, r0
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
 8004464:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 8004466:	23f5      	movs	r3, #245	; 0xf5
 8004468:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800446a:	7db8      	ldrb	r0, [r7, #22]
 800446c:	f107 0115 	add.w	r1, r7, #21
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f7ff fcc3 	bl	8003dfe <bme280_get_regs>
 8004478:	4603      	mov	r3, r0
 800447a:	75fb      	strb	r3, [r7, #23]
    if (rslt == BME280_OK)
 800447c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d11f      	bne.n	80044c4 <set_filter_standby_settings+0x6c>
    {
        if (desired_settings & BME280_FILTER_SEL)
 8004484:	7bfb      	ldrb	r3, [r7, #15]
 8004486:	f003 0308 	and.w	r3, r3, #8
 800448a:	2b00      	cmp	r3, #0
 800448c:	d005      	beq.n	800449a <set_filter_standby_settings+0x42>
        {
            fill_filter_settings(&reg_data, settings);
 800448e:	f107 0315 	add.w	r3, r7, #21
 8004492:	68b9      	ldr	r1, [r7, #8]
 8004494:	4618      	mov	r0, r3
 8004496:	f000 f81b 	bl	80044d0 <fill_filter_settings>
        }
        if (desired_settings & BME280_STANDBY_SEL)
 800449a:	7bfb      	ldrb	r3, [r7, #15]
 800449c:	f003 0310 	and.w	r3, r3, #16
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d005      	beq.n	80044b0 <set_filter_standby_settings+0x58>
        {
            fill_standby_settings(&reg_data, settings);
 80044a4:	f107 0315 	add.w	r3, r7, #21
 80044a8:	68b9      	ldr	r1, [r7, #8]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 f82d 	bl	800450a <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80044b0:	f107 0115 	add.w	r1, r7, #21
 80044b4:	f107 0016 	add.w	r0, r7, #22
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f7ff fccf 	bl	8003e5e <bme280_set_regs>
 80044c0:	4603      	mov	r3, r0
 80044c2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80044c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	b25b      	sxtb	r3, r3
 80044e0:	f023 031c 	bic.w	r3, r3, #28
 80044e4:	b25a      	sxtb	r2, r3
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	78db      	ldrb	r3, [r3, #3]
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	b25b      	sxtb	r3, r3
 80044ee:	f003 031c 	and.w	r3, r3, #28
 80044f2:	b25b      	sxtb	r3, r3
 80044f4:	4313      	orrs	r3, r2
 80044f6:	b25b      	sxtb	r3, r3
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	701a      	strb	r2, [r3, #0]
}
 80044fe:	bf00      	nop
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
 8004512:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	b25b      	sxtb	r3, r3
 800451a:	f003 031f 	and.w	r3, r3, #31
 800451e:	b25a      	sxtb	r2, r3
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	791b      	ldrb	r3, [r3, #4]
 8004524:	015b      	lsls	r3, r3, #5
 8004526:	b25b      	sxtb	r3, r3
 8004528:	4313      	orrs	r3, r2
 800452a:	b25b      	sxtb	r3, r3
 800452c:	b2da      	uxtb	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	701a      	strb	r2, [r3, #0]
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800453e:	b480      	push	{r7}
 8004540:	b083      	sub	sp, #12
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
 8004546:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	b25b      	sxtb	r3, r3
 800454e:	f023 031c 	bic.w	r3, r3, #28
 8004552:	b25a      	sxtb	r2, r3
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	b25b      	sxtb	r3, r3
 800455c:	f003 031c 	and.w	r3, r3, #28
 8004560:	b25b      	sxtb	r3, r3
 8004562:	4313      	orrs	r3, r2
 8004564:	b25b      	sxtb	r3, r3
 8004566:	b2da      	uxtb	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	701a      	strb	r2, [r3, #0]
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	b25b      	sxtb	r3, r3
 8004588:	f003 031f 	and.w	r3, r3, #31
 800458c:	b25a      	sxtb	r2, r3
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	785b      	ldrb	r3, [r3, #1]
 8004592:	015b      	lsls	r3, r3, #5
 8004594:	b25b      	sxtb	r3, r3
 8004596:	4313      	orrs	r3, r2
 8004598:	b25b      	sxtb	r3, r3
 800459a:	b2da      	uxtb	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	701a      	strb	r2, [r3, #0]
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3302      	adds	r3, #2
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	109b      	asrs	r3, r3, #2
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	f003 0307 	and.w	r3, r3, #7
 80045d2:	b2da      	uxtb	r2, r3
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3302      	adds	r3, #2
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	095b      	lsrs	r3, r3, #5
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	3303      	adds	r3, #3
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	109b      	asrs	r3, r3, #2
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	f003 0307 	and.w	r3, r3, #7
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	3303      	adds	r3, #3
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	095b      	lsrs	r3, r3, #5
 8004602:	b2da      	uxtb	r2, r3
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	711a      	strb	r2, [r3, #4]
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	4603      	mov	r3, r0
 800461c:	6039      	str	r1, [r7, #0]
 800461e:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8004620:	23f4      	movs	r3, #244	; 0xf4
 8004622:	73bb      	strb	r3, [r7, #14]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8004624:	7bb8      	ldrb	r0, [r7, #14]
 8004626:	f107 010d 	add.w	r1, r7, #13
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2201      	movs	r2, #1
 800462e:	f7ff fbe6 	bl	8003dfe <bme280_get_regs>
 8004632:	4603      	mov	r3, r0
 8004634:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BME280_OK)
 8004636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d117      	bne.n	800466e <write_power_mode+0x5a>
    {
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 800463e:	7b7b      	ldrb	r3, [r7, #13]
 8004640:	b25b      	sxtb	r3, r3
 8004642:	f023 0303 	bic.w	r3, r3, #3
 8004646:	b25a      	sxtb	r2, r3
 8004648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800464c:	f003 0303 	and.w	r3, r3, #3
 8004650:	b25b      	sxtb	r3, r3
 8004652:	4313      	orrs	r3, r2
 8004654:	b25b      	sxtb	r3, r3
 8004656:	b2db      	uxtb	r3, r3
 8004658:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 800465a:	f107 010d 	add.w	r1, r7, #13
 800465e:	f107 000e 	add.w	r0, r7, #14
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2201      	movs	r2, #1
 8004666:	f7ff fbfa 	bl	8003e5e <bme280_set_regs>
 800466a:	4603      	mov	r3, r0
 800466c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800466e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b086      	sub	sp, #24
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];
    struct bme280_settings settings;

    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8004682:	f107 0110 	add.w	r1, r7, #16
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2204      	movs	r2, #4
 800468a:	20f2      	movs	r0, #242	; 0xf2
 800468c:	f7ff fbb7 	bl	8003dfe <bme280_get_regs>
 8004690:	4603      	mov	r3, r0
 8004692:	75fb      	strb	r3, [r7, #23]
    if (rslt == BME280_OK)
 8004694:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d118      	bne.n	80046ce <put_device_to_sleep+0x54>
    {
        parse_device_settings(reg_data, &settings);
 800469c:	f107 0208 	add.w	r2, r7, #8
 80046a0:	f107 0310 	add.w	r3, r7, #16
 80046a4:	4611      	mov	r1, r2
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff ff80 	bl	80045ac <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f7ff fcfb 	bl	80040a8 <bme280_soft_reset>
 80046b2:	4603      	mov	r3, r0
 80046b4:	75fb      	strb	r3, [r7, #23]
        if (rslt == BME280_OK)
 80046b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d107      	bne.n	80046ce <put_device_to_sleep+0x54>
        {
            rslt = reload_device_settings(&settings, dev);
 80046be:	f107 0308 	add.w	r3, r7, #8
 80046c2:	6879      	ldr	r1, [r7, #4]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 f808 	bl	80046da <reload_device_settings>
 80046ca:	4603      	mov	r3, r0
 80046cc:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 80046ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b084      	sub	sp, #16
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
 80046e2:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	6879      	ldr	r1, [r7, #4]
 80046e8:	201f      	movs	r0, #31
 80046ea:	f7ff fe18 	bl	800431e <set_osr_settings>
 80046ee:	4603      	mov	r3, r0
 80046f0:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME280_OK)
 80046f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d106      	bne.n	8004708 <reload_device_settings+0x2e>
    {
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	6879      	ldr	r1, [r7, #4]
 80046fe:	201f      	movs	r0, #31
 8004700:	f7ff feaa 	bl	8004458 <set_filter_standby_settings>
 8004704:	4603      	mov	r3, r0
 8004706:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004708:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800470c:	4618      	mov	r0, r3
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <compensate_temperature>:
/*!
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data, struct bme280_calib_data *calib_data)
{
 8004714:	b5b0      	push	{r4, r5, r7, lr}
 8004716:	b08c      	sub	sp, #48	; 0x30
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double temperature;
    double temperature_min = -40;
 800471e:	f04f 0200 	mov.w	r2, #0
 8004722:	4b5f      	ldr	r3, [pc, #380]	; (80048a0 <compensate_temperature+0x18c>)
 8004724:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double temperature_max = 85;
 8004728:	f04f 0200 	mov.w	r2, #0
 800472c:	4b5d      	ldr	r3, [pc, #372]	; (80048a4 <compensate_temperature+0x190>)
 800472e:	e9c7 2306 	strd	r2, r3, [r7, #24]

    var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_t1) / 1024.0;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	4618      	mov	r0, r3
 8004738:	f7fb fefc 	bl	8000534 <__aeabi_ui2d>
 800473c:	f04f 0200 	mov.w	r2, #0
 8004740:	4b59      	ldr	r3, [pc, #356]	; (80048a8 <compensate_temperature+0x194>)
 8004742:	f7fc f89b 	bl	800087c <__aeabi_ddiv>
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	4614      	mov	r4, r2
 800474c:	461d      	mov	r5, r3
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	881b      	ldrh	r3, [r3, #0]
 8004752:	4618      	mov	r0, r3
 8004754:	f7fb feee 	bl	8000534 <__aeabi_ui2d>
 8004758:	f04f 0200 	mov.w	r2, #0
 800475c:	4b53      	ldr	r3, [pc, #332]	; (80048ac <compensate_temperature+0x198>)
 800475e:	f7fc f88d 	bl	800087c <__aeabi_ddiv>
 8004762:	4602      	mov	r2, r0
 8004764:	460b      	mov	r3, r1
 8004766:	4620      	mov	r0, r4
 8004768:	4629      	mov	r1, r5
 800476a:	f7fb fda5 	bl	80002b8 <__aeabi_dsub>
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = var1 * ((double)calib_data->dig_t2);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800477c:	4618      	mov	r0, r3
 800477e:	f7fb fee9 	bl	8000554 <__aeabi_i2d>
 8004782:	4602      	mov	r2, r0
 8004784:	460b      	mov	r3, r1
 8004786:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800478a:	f7fb ff4d 	bl	8000628 <__aeabi_dmul>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_t1) / 8192.0);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	4618      	mov	r0, r3
 800479c:	f7fb feca 	bl	8000534 <__aeabi_ui2d>
 80047a0:	f04f 0200 	mov.w	r2, #0
 80047a4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80047a8:	f7fc f868 	bl	800087c <__aeabi_ddiv>
 80047ac:	4602      	mov	r2, r0
 80047ae:	460b      	mov	r3, r1
 80047b0:	4614      	mov	r4, r2
 80047b2:	461d      	mov	r5, r3
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	881b      	ldrh	r3, [r3, #0]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7fb febb 	bl	8000534 <__aeabi_ui2d>
 80047be:	f04f 0200 	mov.w	r2, #0
 80047c2:	4b3b      	ldr	r3, [pc, #236]	; (80048b0 <compensate_temperature+0x19c>)
 80047c4:	f7fc f85a 	bl	800087c <__aeabi_ddiv>
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	4620      	mov	r0, r4
 80047ce:	4629      	mov	r1, r5
 80047d0:	f7fb fd72 	bl	80002b8 <__aeabi_dsub>
 80047d4:	4602      	mov	r2, r0
 80047d6:	460b      	mov	r3, r1
 80047d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var2 = (var2 * var2) * ((double)calib_data->dig_t3);
 80047dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80047e4:	f7fb ff20 	bl	8000628 <__aeabi_dmul>
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	4614      	mov	r4, r2
 80047ee:	461d      	mov	r5, r3
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fb feac 	bl	8000554 <__aeabi_i2d>
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	4620      	mov	r0, r4
 8004802:	4629      	mov	r1, r5
 8004804:	f7fb ff10 	bl	8000628 <__aeabi_dmul>
 8004808:	4602      	mov	r2, r0
 800480a:	460b      	mov	r3, r1
 800480c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    calib_data->t_fine = (int32_t)(var1 + var2);
 8004810:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004814:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004818:	f7fb fd50 	bl	80002bc <__adddf3>
 800481c:	4602      	mov	r2, r0
 800481e:	460b      	mov	r3, r1
 8004820:	4610      	mov	r0, r2
 8004822:	4619      	mov	r1, r3
 8004824:	f7fc f9b0 	bl	8000b88 <__aeabi_d2iz>
 8004828:	4602      	mov	r2, r0
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	625a      	str	r2, [r3, #36]	; 0x24
    temperature = (var1 + var2) / 5120.0;
 800482e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004832:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004836:	f7fb fd41 	bl	80002bc <__adddf3>
 800483a:	4602      	mov	r2, r0
 800483c:	460b      	mov	r3, r1
 800483e:	4610      	mov	r0, r2
 8004840:	4619      	mov	r1, r3
 8004842:	f04f 0200 	mov.w	r2, #0
 8004846:	4b1b      	ldr	r3, [pc, #108]	; (80048b4 <compensate_temperature+0x1a0>)
 8004848:	f7fc f818 	bl	800087c <__aeabi_ddiv>
 800484c:	4602      	mov	r2, r0
 800484e:	460b      	mov	r3, r1
 8004850:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    if (temperature < temperature_min)
 8004854:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004858:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800485c:	f7fc f956 	bl	8000b0c <__aeabi_dcmplt>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d004      	beq.n	8004870 <compensate_temperature+0x15c>
    {
        temperature = temperature_min;
 8004866:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800486a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800486e:	e00c      	b.n	800488a <compensate_temperature+0x176>
    }
    else if (temperature > temperature_max)
 8004870:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004874:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004878:	f7fc f966 	bl	8000b48 <__aeabi_dcmpgt>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <compensate_temperature+0x176>
    {
        temperature = temperature_max;
 8004882:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004886:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    }

    return temperature;
 800488a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800488e:	ec43 2b17 	vmov	d7, r2, r3
}
 8004892:	eeb0 0a47 	vmov.f32	s0, s14
 8004896:	eef0 0a67 	vmov.f32	s1, s15
 800489a:	3730      	adds	r7, #48	; 0x30
 800489c:	46bd      	mov	sp, r7
 800489e:	bdb0      	pop	{r4, r5, r7, pc}
 80048a0:	c0440000 	.word	0xc0440000
 80048a4:	40554000 	.word	0x40554000
 80048a8:	40d00000 	.word	0x40d00000
 80048ac:	40900000 	.word	0x40900000
 80048b0:	40c00000 	.word	0x40c00000
 80048b4:	40b40000 	.word	0x40b40000

080048b8 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 80048b8:	b5b0      	push	{r4, r5, r7, lr}
 80048ba:	b08e      	sub	sp, #56	; 0x38
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double var3;
    double pressure;
    double pressure_min = 30000.0;
 80048c2:	a3d9      	add	r3, pc, #868	; (adr r3, 8004c28 <compensate_pressure+0x370>)
 80048c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double pressure_max = 110000.0;
 80048cc:	a3d8      	add	r3, pc, #864	; (adr r3, 8004c30 <compensate_pressure+0x378>)
 80048ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d2:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fb fe3a 	bl	8000554 <__aeabi_i2d>
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80048e8:	f7fb ffc8 	bl	800087c <__aeabi_ddiv>
 80048ec:	4602      	mov	r2, r0
 80048ee:	460b      	mov	r3, r1
 80048f0:	4610      	mov	r0, r2
 80048f2:	4619      	mov	r1, r3
 80048f4:	f04f 0200 	mov.w	r2, #0
 80048f8:	4bc1      	ldr	r3, [pc, #772]	; (8004c00 <compensate_pressure+0x348>)
 80048fa:	f7fb fcdd 	bl	80002b8 <__aeabi_dsub>
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double)calib_data->dig_p6) / 32768.0;
 8004906:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800490a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800490e:	f7fb fe8b 	bl	8000628 <__aeabi_dmul>
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	4614      	mov	r4, r2
 8004918:	461d      	mov	r5, r3
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004920:	4618      	mov	r0, r3
 8004922:	f7fb fe17 	bl	8000554 <__aeabi_i2d>
 8004926:	4602      	mov	r2, r0
 8004928:	460b      	mov	r3, r1
 800492a:	4620      	mov	r0, r4
 800492c:	4629      	mov	r1, r5
 800492e:	f7fb fe7b 	bl	8000628 <__aeabi_dmul>
 8004932:	4602      	mov	r2, r0
 8004934:	460b      	mov	r3, r1
 8004936:	4610      	mov	r0, r2
 8004938:	4619      	mov	r1, r3
 800493a:	f04f 0200 	mov.w	r2, #0
 800493e:	4bb1      	ldr	r3, [pc, #708]	; (8004c04 <compensate_pressure+0x34c>)
 8004940:	f7fb ff9c 	bl	800087c <__aeabi_ddiv>
 8004944:	4602      	mov	r2, r0
 8004946:	460b      	mov	r3, r1
 8004948:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double)calib_data->dig_p5) * 2.0;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004952:	4618      	mov	r0, r3
 8004954:	f7fb fdfe 	bl	8000554 <__aeabi_i2d>
 8004958:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800495c:	f7fb fe64 	bl	8000628 <__aeabi_dmul>
 8004960:	4602      	mov	r2, r0
 8004962:	460b      	mov	r3, r1
 8004964:	4610      	mov	r0, r2
 8004966:	4619      	mov	r1, r3
 8004968:	4602      	mov	r2, r0
 800496a:	460b      	mov	r3, r1
 800496c:	f7fb fca6 	bl	80002bc <__adddf3>
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004978:	f7fb fca0 	bl	80002bc <__adddf3>
 800497c:	4602      	mov	r2, r0
 800497e:	460b      	mov	r3, r1
 8004980:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double)calib_data->dig_p4) * 65536.0);
 8004984:	f04f 0200 	mov.w	r2, #0
 8004988:	4b9f      	ldr	r3, [pc, #636]	; (8004c08 <compensate_pressure+0x350>)
 800498a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800498e:	f7fb ff75 	bl	800087c <__aeabi_ddiv>
 8004992:	4602      	mov	r2, r0
 8004994:	460b      	mov	r3, r1
 8004996:	4614      	mov	r4, r2
 8004998:	461d      	mov	r5, r3
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7fb fdd7 	bl	8000554 <__aeabi_i2d>
 80049a6:	f04f 0200 	mov.w	r2, #0
 80049aa:	4b98      	ldr	r3, [pc, #608]	; (8004c0c <compensate_pressure+0x354>)
 80049ac:	f7fb fe3c 	bl	8000628 <__aeabi_dmul>
 80049b0:	4602      	mov	r2, r0
 80049b2:	460b      	mov	r3, r1
 80049b4:	4620      	mov	r0, r4
 80049b6:	4629      	mov	r1, r5
 80049b8:	f7fb fc80 	bl	80002bc <__adddf3>
 80049bc:	4602      	mov	r2, r0
 80049be:	460b      	mov	r3, r1
 80049c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var3 = ((double)calib_data->dig_p3) * var1 * var1 / 524288.0;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fb fdc2 	bl	8000554 <__aeabi_i2d>
 80049d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049d4:	f7fb fe28 	bl	8000628 <__aeabi_dmul>
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	4610      	mov	r0, r2
 80049de:	4619      	mov	r1, r3
 80049e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049e4:	f7fb fe20 	bl	8000628 <__aeabi_dmul>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4610      	mov	r0, r2
 80049ee:	4619      	mov	r1, r3
 80049f0:	f04f 0200 	mov.w	r2, #0
 80049f4:	4b86      	ldr	r3, [pc, #536]	; (8004c10 <compensate_pressure+0x358>)
 80049f6:	f7fb ff41 	bl	800087c <__aeabi_ddiv>
 80049fa:	4602      	mov	r2, r0
 80049fc:	460b      	mov	r3, r1
 80049fe:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var1 = (var3 + ((double)calib_data->dig_p2) * var1) / 524288.0;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7fb fda3 	bl	8000554 <__aeabi_i2d>
 8004a0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a12:	f7fb fe09 	bl	8000628 <__aeabi_dmul>
 8004a16:	4602      	mov	r2, r0
 8004a18:	460b      	mov	r3, r1
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a22:	f7fb fc4b 	bl	80002bc <__adddf3>
 8004a26:	4602      	mov	r2, r0
 8004a28:	460b      	mov	r3, r1
 8004a2a:	4610      	mov	r0, r2
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	f04f 0200 	mov.w	r2, #0
 8004a32:	4b77      	ldr	r3, [pc, #476]	; (8004c10 <compensate_pressure+0x358>)
 8004a34:	f7fb ff22 	bl	800087c <__aeabi_ddiv>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_p1);
 8004a40:	f04f 0200 	mov.w	r2, #0
 8004a44:	4b6f      	ldr	r3, [pc, #444]	; (8004c04 <compensate_pressure+0x34c>)
 8004a46:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004a4a:	f7fb ff17 	bl	800087c <__aeabi_ddiv>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	460b      	mov	r3, r1
 8004a52:	4610      	mov	r0, r2
 8004a54:	4619      	mov	r1, r3
 8004a56:	f04f 0200 	mov.w	r2, #0
 8004a5a:	4b6e      	ldr	r3, [pc, #440]	; (8004c14 <compensate_pressure+0x35c>)
 8004a5c:	f7fb fc2e 	bl	80002bc <__adddf3>
 8004a60:	4602      	mov	r2, r0
 8004a62:	460b      	mov	r3, r1
 8004a64:	4614      	mov	r4, r2
 8004a66:	461d      	mov	r5, r3
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	88db      	ldrh	r3, [r3, #6]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7fb fd61 	bl	8000534 <__aeabi_ui2d>
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	4620      	mov	r0, r4
 8004a78:	4629      	mov	r1, r5
 8004a7a:	f7fb fdd5 	bl	8000628 <__aeabi_dmul>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	460b      	mov	r3, r1
 8004a82:	e9c7 2306 	strd	r2, r3, [r7, #24]

    /* avoid exception caused by division by zero */
    if (var1 > (0.0))
 8004a86:	f04f 0200 	mov.w	r2, #0
 8004a8a:	f04f 0300 	mov.w	r3, #0
 8004a8e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004a92:	f7fc f859 	bl	8000b48 <__aeabi_dcmpgt>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 80cd 	beq.w	8004c38 <compensate_pressure+0x380>
    {
        pressure = 1048576.0 - (double) uncomp_data->pressure;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fb fd46 	bl	8000534 <__aeabi_ui2d>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	f04f 0000 	mov.w	r0, #0
 8004ab0:	4959      	ldr	r1, [pc, #356]	; (8004c18 <compensate_pressure+0x360>)
 8004ab2:	f7fb fc01 	bl	80002b8 <__aeabi_dsub>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8004abe:	f04f 0200 	mov.w	r2, #0
 8004ac2:	4b56      	ldr	r3, [pc, #344]	; (8004c1c <compensate_pressure+0x364>)
 8004ac4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004ac8:	f7fb fed8 	bl	800087c <__aeabi_ddiv>
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004ad4:	f7fb fbf0 	bl	80002b8 <__aeabi_dsub>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	4610      	mov	r0, r2
 8004ade:	4619      	mov	r1, r3
 8004ae0:	a345      	add	r3, pc, #276	; (adr r3, 8004bf8 <compensate_pressure+0x340>)
 8004ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae6:	f7fb fd9f 	bl	8000628 <__aeabi_dmul>
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	4610      	mov	r0, r2
 8004af0:	4619      	mov	r1, r3
 8004af2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004af6:	f7fb fec1 	bl	800087c <__aeabi_ddiv>
 8004afa:	4602      	mov	r2, r0
 8004afc:	460b      	mov	r3, r1
 8004afe:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        var1 = ((double)calib_data->dig_p9) * pressure * pressure / 2147483648.0;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7fb fd23 	bl	8000554 <__aeabi_i2d>
 8004b0e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004b12:	f7fb fd89 	bl	8000628 <__aeabi_dmul>
 8004b16:	4602      	mov	r2, r0
 8004b18:	460b      	mov	r3, r1
 8004b1a:	4610      	mov	r0, r2
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004b22:	f7fb fd81 	bl	8000628 <__aeabi_dmul>
 8004b26:	4602      	mov	r2, r0
 8004b28:	460b      	mov	r3, r1
 8004b2a:	4610      	mov	r0, r2
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	f04f 0200 	mov.w	r2, #0
 8004b32:	4b3b      	ldr	r3, [pc, #236]	; (8004c20 <compensate_pressure+0x368>)
 8004b34:	f7fb fea2 	bl	800087c <__aeabi_ddiv>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)calib_data->dig_p8) / 32768.0;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fb fd04 	bl	8000554 <__aeabi_i2d>
 8004b4c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004b50:	f7fb fd6a 	bl	8000628 <__aeabi_dmul>
 8004b54:	4602      	mov	r2, r0
 8004b56:	460b      	mov	r3, r1
 8004b58:	4610      	mov	r0, r2
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	4b28      	ldr	r3, [pc, #160]	; (8004c04 <compensate_pressure+0x34c>)
 8004b62:	f7fb fe8b 	bl	800087c <__aeabi_ddiv>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	e9c7 2304 	strd	r2, r3, [r7, #16]
        pressure = pressure + (var1 + var2 + ((double)calib_data->dig_p7)) / 16.0;
 8004b6e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b72:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004b76:	f7fb fba1 	bl	80002bc <__adddf3>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	4614      	mov	r4, r2
 8004b80:	461d      	mov	r5, r3
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7fb fce3 	bl	8000554 <__aeabi_i2d>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	4620      	mov	r0, r4
 8004b94:	4629      	mov	r1, r5
 8004b96:	f7fb fb91 	bl	80002bc <__adddf3>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	4610      	mov	r0, r2
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	f04f 0200 	mov.w	r2, #0
 8004ba6:	4b1f      	ldr	r3, [pc, #124]	; (8004c24 <compensate_pressure+0x36c>)
 8004ba8:	f7fb fe68 	bl	800087c <__aeabi_ddiv>
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004bb4:	f7fb fb82 	bl	80002bc <__adddf3>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        if (pressure < pressure_min)
 8004bc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bc4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004bc8:	f7fb ffa0 	bl	8000b0c <__aeabi_dcmplt>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d004      	beq.n	8004bdc <compensate_pressure+0x324>
        {
            pressure = pressure_min;
 8004bd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bd6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8004bda:	e031      	b.n	8004c40 <compensate_pressure+0x388>
        }
        else if (pressure > pressure_max)
 8004bdc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004be0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004be4:	f7fb ffb0 	bl	8000b48 <__aeabi_dcmpgt>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d028      	beq.n	8004c40 <compensate_pressure+0x388>
        {
            pressure = pressure_max;
 8004bee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bf2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8004bf6:	e023      	b.n	8004c40 <compensate_pressure+0x388>
 8004bf8:	00000000 	.word	0x00000000
 8004bfc:	40b86a00 	.word	0x40b86a00
 8004c00:	40ef4000 	.word	0x40ef4000
 8004c04:	40e00000 	.word	0x40e00000
 8004c08:	40100000 	.word	0x40100000
 8004c0c:	40f00000 	.word	0x40f00000
 8004c10:	41200000 	.word	0x41200000
 8004c14:	3ff00000 	.word	0x3ff00000
 8004c18:	41300000 	.word	0x41300000
 8004c1c:	40b00000 	.word	0x40b00000
 8004c20:	41e00000 	.word	0x41e00000
 8004c24:	40300000 	.word	0x40300000
 8004c28:	00000000 	.word	0x00000000
 8004c2c:	40dd4c00 	.word	0x40dd4c00
 8004c30:	00000000 	.word	0x00000000
 8004c34:	40fadb00 	.word	0x40fadb00
        }
    }
    else /* Invalid case */
    {
        pressure = pressure_min;
 8004c38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c3c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    }

    return pressure;
 8004c40:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004c44:	ec43 2b17 	vmov	d7, r2, r3
}
 8004c48:	eeb0 0a47 	vmov.f32	s0, s14
 8004c4c:	eef0 0a67 	vmov.f32	s1, s15
 8004c50:	3738      	adds	r7, #56	; 0x38
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bdb0      	pop	{r4, r5, r7, pc}
 8004c56:	bf00      	nop

08004c58 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8004c58:	b5b0      	push	{r4, r5, r7, lr}
 8004c5a:	b094      	sub	sp, #80	; 0x50
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
    double humidity;
    double humidity_min = 0.0;
 8004c62:	f04f 0200 	mov.w	r2, #0
 8004c66:	f04f 0300 	mov.w	r3, #0
 8004c6a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    double humidity_max = 100.0;
 8004c6e:	f04f 0200 	mov.w	r2, #0
 8004c72:	4b81      	ldr	r3, [pc, #516]	; (8004e78 <compensate_humidity+0x220>)
 8004c74:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double var3;
    double var4;
    double var5;
    double var6;

    var1 = ((double)calib_data->t_fine) - 76800.0;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7fb fc69 	bl	8000554 <__aeabi_i2d>
 8004c82:	f04f 0200 	mov.w	r2, #0
 8004c86:	4b7d      	ldr	r3, [pc, #500]	; (8004e7c <compensate_humidity+0x224>)
 8004c88:	f7fb fb16 	bl	80002b8 <__aeabi_dsub>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	460b      	mov	r3, r1
 8004c90:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    var2 = (((double)calib_data->dig_h4) * 64.0 + (((double)calib_data->dig_h5) / 16384.0) * var1);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7fb fc5a 	bl	8000554 <__aeabi_i2d>
 8004ca0:	f04f 0200 	mov.w	r2, #0
 8004ca4:	4b76      	ldr	r3, [pc, #472]	; (8004e80 <compensate_humidity+0x228>)
 8004ca6:	f7fb fcbf 	bl	8000628 <__aeabi_dmul>
 8004caa:	4602      	mov	r2, r0
 8004cac:	460b      	mov	r3, r1
 8004cae:	4614      	mov	r4, r2
 8004cb0:	461d      	mov	r5, r3
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fb fc4b 	bl	8000554 <__aeabi_i2d>
 8004cbe:	f04f 0200 	mov.w	r2, #0
 8004cc2:	4b70      	ldr	r3, [pc, #448]	; (8004e84 <compensate_humidity+0x22c>)
 8004cc4:	f7fb fdda 	bl	800087c <__aeabi_ddiv>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	460b      	mov	r3, r1
 8004ccc:	4610      	mov	r0, r2
 8004cce:	4619      	mov	r1, r3
 8004cd0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004cd4:	f7fb fca8 	bl	8000628 <__aeabi_dmul>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	4620      	mov	r0, r4
 8004cde:	4629      	mov	r1, r5
 8004ce0:	f7fb faec 	bl	80002bc <__adddf3>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    var3 = uncomp_data->humidity - var2;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7fb fc1f 	bl	8000534 <__aeabi_ui2d>
 8004cf6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cfa:	f7fb fadd 	bl	80002b8 <__aeabi_dsub>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	460b      	mov	r3, r1
 8004d02:	e9c7 2308 	strd	r2, r3, [r7, #32]
    var4 = ((double)calib_data->dig_h2) / 65536.0;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7fb fc21 	bl	8000554 <__aeabi_i2d>
 8004d12:	f04f 0200 	mov.w	r2, #0
 8004d16:	4b5c      	ldr	r3, [pc, #368]	; (8004e88 <compensate_humidity+0x230>)
 8004d18:	f7fb fdb0 	bl	800087c <__aeabi_ddiv>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var5 = (1.0 + (((double)calib_data->dig_h3) / 67108864.0) * var1);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	7f1b      	ldrb	r3, [r3, #28]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7fb fc03 	bl	8000534 <__aeabi_ui2d>
 8004d2e:	f04f 0200 	mov.w	r2, #0
 8004d32:	4b56      	ldr	r3, [pc, #344]	; (8004e8c <compensate_humidity+0x234>)
 8004d34:	f7fb fda2 	bl	800087c <__aeabi_ddiv>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	4619      	mov	r1, r3
 8004d40:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004d44:	f7fb fc70 	bl	8000628 <__aeabi_dmul>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	4619      	mov	r1, r3
 8004d50:	f04f 0200 	mov.w	r2, #0
 8004d54:	4b4e      	ldr	r3, [pc, #312]	; (8004e90 <compensate_humidity+0x238>)
 8004d56:	f7fb fab1 	bl	80002bc <__adddf3>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var6 = 1.0 + (((double)calib_data->dig_h6) / 67108864.0) * var1 * var5;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7fb fbf3 	bl	8000554 <__aeabi_i2d>
 8004d6e:	f04f 0200 	mov.w	r2, #0
 8004d72:	4b46      	ldr	r3, [pc, #280]	; (8004e8c <compensate_humidity+0x234>)
 8004d74:	f7fb fd82 	bl	800087c <__aeabi_ddiv>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4610      	mov	r0, r2
 8004d7e:	4619      	mov	r1, r3
 8004d80:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004d84:	f7fb fc50 	bl	8000628 <__aeabi_dmul>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4610      	mov	r0, r2
 8004d8e:	4619      	mov	r1, r3
 8004d90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004d94:	f7fb fc48 	bl	8000628 <__aeabi_dmul>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	4619      	mov	r1, r3
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	4b3a      	ldr	r3, [pc, #232]	; (8004e90 <compensate_humidity+0x238>)
 8004da6:	f7fb fa89 	bl	80002bc <__adddf3>
 8004daa:	4602      	mov	r2, r0
 8004dac:	460b      	mov	r3, r1
 8004dae:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var6 = var3 * var4 * (var5 * var6);
 8004db2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004db6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004dba:	f7fb fc35 	bl	8000628 <__aeabi_dmul>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	4614      	mov	r4, r2
 8004dc4:	461d      	mov	r5, r3
 8004dc6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004dce:	f7fb fc2b 	bl	8000628 <__aeabi_dmul>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	4629      	mov	r1, r5
 8004dda:	f7fb fc25 	bl	8000628 <__aeabi_dmul>
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    humidity = var6 * (1.0 - ((double)calib_data->dig_h1) * var6 / 524288.0);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	7e1b      	ldrb	r3, [r3, #24]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fb fba2 	bl	8000534 <__aeabi_ui2d>
 8004df0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004df4:	f7fb fc18 	bl	8000628 <__aeabi_dmul>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4610      	mov	r0, r2
 8004dfe:	4619      	mov	r1, r3
 8004e00:	f04f 0200 	mov.w	r2, #0
 8004e04:	4b23      	ldr	r3, [pc, #140]	; (8004e94 <compensate_humidity+0x23c>)
 8004e06:	f7fb fd39 	bl	800087c <__aeabi_ddiv>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	f04f 0000 	mov.w	r0, #0
 8004e12:	491f      	ldr	r1, [pc, #124]	; (8004e90 <compensate_humidity+0x238>)
 8004e14:	f7fb fa50 	bl	80002b8 <__aeabi_dsub>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e20:	f7fb fc02 	bl	8000628 <__aeabi_dmul>
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    if (humidity > humidity_max)
 8004e2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e30:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004e34:	f7fb fe88 	bl	8000b48 <__aeabi_dcmpgt>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d004      	beq.n	8004e48 <compensate_humidity+0x1f0>
    {
        humidity = humidity_max;
 8004e3e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e42:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8004e46:	e00c      	b.n	8004e62 <compensate_humidity+0x20a>
    }
    else if (humidity < humidity_min)
 8004e48:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e4c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004e50:	f7fb fe5c 	bl	8000b0c <__aeabi_dcmplt>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <compensate_humidity+0x20a>
    {
        humidity = humidity_min;
 8004e5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e5e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    }

    return humidity;
 8004e62:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e66:	ec43 2b17 	vmov	d7, r2, r3
}
 8004e6a:	eeb0 0a47 	vmov.f32	s0, s14
 8004e6e:	eef0 0a67 	vmov.f32	s1, s15
 8004e72:	3750      	adds	r7, #80	; 0x50
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bdb0      	pop	{r4, r5, r7, pc}
 8004e78:	40590000 	.word	0x40590000
 8004e7c:	40f2c000 	.word	0x40f2c000
 8004e80:	40500000 	.word	0x40500000
 8004e84:	40d00000 	.word	0x40d00000
 8004e88:	40f00000 	.word	0x40f00000
 8004e8c:	41900000 	.word	0x41900000
 8004e90:	3ff00000 	.word	0x3ff00000
 8004e94:	41200000 	.word	0x41200000

08004e98 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b08a      	sub	sp, #40	; 0x28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8004ea0:	2388      	movs	r3, #136	; 0x88
 8004ea2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	f107 0310 	add.w	r3, r7, #16
 8004eae:	2200      	movs	r2, #0
 8004eb0:	601a      	str	r2, [r3, #0]
 8004eb2:	605a      	str	r2, [r3, #4]
 8004eb4:	609a      	str	r2, [r3, #8]
 8004eb6:	60da      	str	r2, [r3, #12]
 8004eb8:	611a      	str	r2, [r3, #16]
 8004eba:	829a      	strh	r2, [r3, #20]

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8004ebc:	f107 010c 	add.w	r1, r7, #12
 8004ec0:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	221a      	movs	r2, #26
 8004ec8:	f7fe ff99 	bl	8003dfe <bme280_get_regs>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BME280_OK)
 8004ed2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d11d      	bne.n	8004f16 <get_calib_data+0x7e>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 8004eda:	f107 030c 	add.w	r3, r7, #12
 8004ede:	6879      	ldr	r1, [r7, #4]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 f84a 	bl	8004f7a <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8004ee6:	23e1      	movs	r3, #225	; 0xe1
 8004ee8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8004eec:	f107 010c 	add.w	r1, r7, #12
 8004ef0:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2207      	movs	r2, #7
 8004ef8:	f7fe ff81 	bl	8003dfe <bme280_get_regs>
 8004efc:	4603      	mov	r3, r0
 8004efe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 8004f02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d105      	bne.n	8004f16 <get_calib_data+0x7e>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 8004f0a:	f107 030c 	add.w	r3, r7, #12
 8004f0e:	6879      	ldr	r1, [r7, #4]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 f8e1 	bl	80050d8 <parse_humidity_calib_data>
        }
    }

    return rslt;
 8004f16:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3728      	adds	r7, #40	; 0x28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b087      	sub	sp, #28
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	60f8      	str	r0, [r7, #12]
 8004f2a:	60b9      	str	r1, [r7, #8]
 8004f2c:	607a      	str	r2, [r7, #4]
 8004f2e:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8004f30:	2301      	movs	r3, #1
 8004f32:	75fb      	strb	r3, [r7, #23]
 8004f34:	e016      	b.n	8004f64 <interleave_reg_addr+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8004f36:	7dfb      	ldrb	r3, [r7, #23]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	441a      	add	r2, r3
 8004f3c:	7dfb      	ldrb	r3, [r7, #23]
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	3b01      	subs	r3, #1
 8004f42:	68b9      	ldr	r1, [r7, #8]
 8004f44:	440b      	add	r3, r1
 8004f46:	7812      	ldrb	r2, [r2, #0]
 8004f48:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8004f4a:	7dfb      	ldrb	r3, [r7, #23]
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	441a      	add	r2, r3
 8004f50:	7dfb      	ldrb	r3, [r7, #23]
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	4619      	mov	r1, r3
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	440b      	add	r3, r1
 8004f5a:	7812      	ldrb	r2, [r2, #0]
 8004f5c:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8004f5e:	7dfb      	ldrb	r3, [r7, #23]
 8004f60:	3301      	adds	r3, #1
 8004f62:	75fb      	strb	r3, [r7, #23]
 8004f64:	7dfa      	ldrb	r2, [r7, #23]
 8004f66:	78fb      	ldrb	r3, [r7, #3]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d3e4      	bcc.n	8004f36 <interleave_reg_addr+0x14>
    }
}
 8004f6c:	bf00      	nop
 8004f6e:	bf00      	nop
 8004f70:	371c      	adds	r7, #28
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b085      	sub	sp, #20
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	3310      	adds	r3, #16
 8004f88:	60fb      	str	r3, [r7, #12]

    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	021b      	lsls	r3, r3, #8
 8004f92:	b21a      	sxth	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	b21b      	sxth	r3, r3
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	b21b      	sxth	r3, r3
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	801a      	strh	r2, [r3, #0]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3303      	adds	r3, #3
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	021b      	lsls	r3, r3, #8
 8004fac:	b21a      	sxth	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	3302      	adds	r3, #2
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	b21b      	sxth	r3, r3
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	b21a      	sxth	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	805a      	strh	r2, [r3, #2]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	3305      	adds	r3, #5
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	021b      	lsls	r3, r3, #8
 8004fc6:	b21a      	sxth	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3304      	adds	r3, #4
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	b21b      	sxth	r3, r3
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	b21a      	sxth	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	809a      	strh	r2, [r3, #4]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	3307      	adds	r3, #7
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	021b      	lsls	r3, r3, #8
 8004fe0:	b21a      	sxth	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	3306      	adds	r3, #6
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	b21b      	sxth	r3, r3
 8004fea:	4313      	orrs	r3, r2
 8004fec:	b21b      	sxth	r3, r3
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	80da      	strh	r2, [r3, #6]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	3309      	adds	r3, #9
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	021b      	lsls	r3, r3, #8
 8004ffc:	b21a      	sxth	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	3308      	adds	r3, #8
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	b21b      	sxth	r3, r3
 8005006:	4313      	orrs	r3, r2
 8005008:	b21a      	sxth	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	811a      	strh	r2, [r3, #8]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	330b      	adds	r3, #11
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	021b      	lsls	r3, r3, #8
 8005016:	b21a      	sxth	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	330a      	adds	r3, #10
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	b21b      	sxth	r3, r3
 8005020:	4313      	orrs	r3, r2
 8005022:	b21a      	sxth	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	815a      	strh	r2, [r3, #10]
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	330d      	adds	r3, #13
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	021b      	lsls	r3, r3, #8
 8005030:	b21a      	sxth	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	330c      	adds	r3, #12
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	b21b      	sxth	r3, r3
 800503a:	4313      	orrs	r3, r2
 800503c:	b21a      	sxth	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	819a      	strh	r2, [r3, #12]
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	330f      	adds	r3, #15
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	021b      	lsls	r3, r3, #8
 800504a:	b21a      	sxth	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	330e      	adds	r3, #14
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	b21b      	sxth	r3, r3
 8005054:	4313      	orrs	r3, r2
 8005056:	b21a      	sxth	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	81da      	strh	r2, [r3, #14]
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3311      	adds	r3, #17
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	021b      	lsls	r3, r3, #8
 8005064:	b21a      	sxth	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	3310      	adds	r3, #16
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	b21b      	sxth	r3, r3
 800506e:	4313      	orrs	r3, r2
 8005070:	b21a      	sxth	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	821a      	strh	r2, [r3, #16]
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	3313      	adds	r3, #19
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	021b      	lsls	r3, r3, #8
 800507e:	b21a      	sxth	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	3312      	adds	r3, #18
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	b21b      	sxth	r3, r3
 8005088:	4313      	orrs	r3, r2
 800508a:	b21a      	sxth	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	825a      	strh	r2, [r3, #18]
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3315      	adds	r3, #21
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	021b      	lsls	r3, r3, #8
 8005098:	b21a      	sxth	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	3314      	adds	r3, #20
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	b21b      	sxth	r3, r3
 80050a2:	4313      	orrs	r3, r2
 80050a4:	b21a      	sxth	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	829a      	strh	r2, [r3, #20]
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3317      	adds	r3, #23
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	021b      	lsls	r3, r3, #8
 80050b2:	b21a      	sxth	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3316      	adds	r3, #22
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	b21b      	sxth	r3, r3
 80050bc:	4313      	orrs	r3, r2
 80050be:	b21a      	sxth	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	82da      	strh	r2, [r3, #22]
    calib_data->dig_h1 = reg_data[25];
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	7e5a      	ldrb	r2, [r3, #25]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	761a      	strb	r2, [r3, #24]
}
 80050cc:	bf00      	nop
 80050ce:	3714      	adds	r7, #20
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	3310      	adds	r3, #16
 80050e6:	617b      	str	r3, [r7, #20]
    int16_t dig_h4_lsb;
    int16_t dig_h4_msb;
    int16_t dig_h5_lsb;
    int16_t dig_h5_msb;

    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3301      	adds	r3, #1
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	021b      	lsls	r3, r3, #8
 80050f0:	b21a      	sxth	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	b21b      	sxth	r3, r3
 80050f8:	4313      	orrs	r3, r2
 80050fa:	b21a      	sxth	r2, r3
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	835a      	strh	r2, [r3, #26]
    calib_data->dig_h3 = reg_data[2];
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	789a      	ldrb	r2, [r3, #2]
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	771a      	strb	r2, [r3, #28]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3303      	adds	r3, #3
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	b25b      	sxtb	r3, r3
 8005110:	b29b      	uxth	r3, r3
 8005112:	011b      	lsls	r3, r3, #4
 8005114:	b29b      	uxth	r3, r3
 8005116:	827b      	strh	r3, [r7, #18]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3304      	adds	r3, #4
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	b21b      	sxth	r3, r3
 8005120:	f003 030f 	and.w	r3, r3, #15
 8005124:	823b      	strh	r3, [r7, #16]
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 8005126:	8a7a      	ldrh	r2, [r7, #18]
 8005128:	8a3b      	ldrh	r3, [r7, #16]
 800512a:	4313      	orrs	r3, r2
 800512c:	b21a      	sxth	r2, r3
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	83da      	strh	r2, [r3, #30]
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	3305      	adds	r3, #5
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	b25b      	sxtb	r3, r3
 800513a:	b29b      	uxth	r3, r3
 800513c:	011b      	lsls	r3, r3, #4
 800513e:	b29b      	uxth	r3, r3
 8005140:	81fb      	strh	r3, [r7, #14]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3304      	adds	r3, #4
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	091b      	lsrs	r3, r3, #4
 800514a:	b2db      	uxtb	r3, r3
 800514c:	81bb      	strh	r3, [r7, #12]
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 800514e:	89fa      	ldrh	r2, [r7, #14]
 8005150:	89bb      	ldrh	r3, [r7, #12]
 8005152:	4313      	orrs	r3, r2
 8005154:	b21a      	sxth	r2, r3
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	841a      	strh	r2, [r3, #32]
    calib_data->dig_h6 = (int8_t)reg_data[6];
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	3306      	adds	r3, #6
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	b25a      	sxtb	r2, r3
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8005168:	bf00      	nop
 800516a:	371c      	adds	r7, #28
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	4603      	mov	r3, r0
 800517c:	460a      	mov	r2, r1
 800517e:	71fb      	strb	r3, [r7, #7]
 8005180:	4613      	mov	r3, r2
 8005182:	71bb      	strb	r3, [r7, #6]
    uint8_t settings_changed = FALSE;
 8005184:	2300      	movs	r3, #0
 8005186:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 8005188:	79fa      	ldrb	r2, [r7, #7]
 800518a:	79bb      	ldrb	r3, [r7, #6]
 800518c:	4013      	ands	r3, r2
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <are_settings_changed+0x26>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8005194:	2301      	movs	r3, #1
 8005196:	73fb      	strb	r3, [r7, #15]
 8005198:	e001      	b.n	800519e <are_settings_changed+0x2a>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 800519a:	2300      	movs	r3, #0
 800519c:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 800519e:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3714      	adds	r7, #20
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00b      	beq.n	80051d2 <null_ptr_check+0x26>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d007      	beq.n	80051d2 <null_ptr_check+0x26>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <null_ptr_check+0x26>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d102      	bne.n	80051d8 <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 80051d2:	23ff      	movs	r3, #255	; 0xff
 80051d4:	73fb      	strb	r3, [r7, #15]
 80051d6:	e001      	b.n	80051dc <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 80051d8:	2300      	movs	r3, #0
 80051da:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80051dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <_dev_by_id>:
	}
};


static its_bme280_t * _dev_by_id(its_bme280_id_t id)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	4603      	mov	r3, r0
 80051f4:	71fb      	strb	r3, [r7, #7]
	assert(id >= 0 && id < 1);
 80051f6:	79fb      	ldrb	r3, [r7, #7]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d005      	beq.n	8005208 <_dev_by_id+0x1c>
 80051fc:	4b09      	ldr	r3, [pc, #36]	; (8005224 <_dev_by_id+0x38>)
 80051fe:	4a0a      	ldr	r2, [pc, #40]	; (8005228 <_dev_by_id+0x3c>)
 8005200:	2143      	movs	r1, #67	; 0x43
 8005202:	480a      	ldr	r0, [pc, #40]	; (800522c <_dev_by_id+0x40>)
 8005204:	f009 ffc6 	bl	800f194 <__assert_func>
	its_bme280_t * const dev = &_devices[id];
 8005208:	79fa      	ldrb	r2, [r7, #7]
 800520a:	4613      	mov	r3, r2
 800520c:	00db      	lsls	r3, r3, #3
 800520e:	4413      	add	r3, r2
 8005210:	00db      	lsls	r3, r3, #3
 8005212:	4a07      	ldr	r2, [pc, #28]	; (8005230 <_dev_by_id+0x44>)
 8005214:	4413      	add	r3, r2
 8005216:	60fb      	str	r3, [r7, #12]

	return dev;
 8005218:	68fb      	ldr	r3, [r7, #12]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	08014a7c 	.word	0x08014a7c
 8005228:	08014b8c 	.word	0x08014b8c
 800522c:	08014a90 	.word	0x08014a90
 8005230:	20000008 	.word	0x20000008

08005234 <_i2c_read>:


static int8_t _i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b088      	sub	sp, #32
 8005238:	af04      	add	r7, sp, #16
 800523a:	603a      	str	r2, [r7, #0]
 800523c:	461a      	mov	r2, r3
 800523e:	4603      	mov	r3, r0
 8005240:	71fb      	strb	r3, [r7, #7]
 8005242:	460b      	mov	r3, r1
 8005244:	71bb      	strb	r3, [r7, #6]
 8005246:	4613      	mov	r3, r2
 8005248:	80bb      	strh	r3, [r7, #4]
	its_bme280_t * dev = _dev_by_id(id);
 800524a:	79fb      	ldrb	r3, [r7, #7]
 800524c:	4618      	mov	r0, r3
 800524e:	f7ff ffcd 	bl	80051ec <_dev_by_id>
 8005252:	60f8      	str	r0, [r7, #12]

	HAL_StatusTypeDef hrc = HAL_I2C_Mem_Read(
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6818      	ldr	r0, [r3, #0]
			dev->bus,
			dev->addr << 1,
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	791b      	ldrb	r3, [r3, #4]
 800525c:	b29b      	uxth	r3, r3
	HAL_StatusTypeDef hrc = HAL_I2C_Mem_Read(
 800525e:	005b      	lsls	r3, r3, #1
 8005260:	b299      	uxth	r1, r3
 8005262:	79bb      	ldrb	r3, [r7, #6]
 8005264:	b29a      	uxth	r2, r3
 8005266:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800526a:	9302      	str	r3, [sp, #8]
 800526c:	88bb      	ldrh	r3, [r7, #4]
 800526e:	9301      	str	r3, [sp, #4]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	2301      	movs	r3, #1
 8005276:	f001 f8a5 	bl	80063c4 <HAL_I2C_Mem_Read>
 800527a:	4603      	mov	r3, r0
 800527c:	72fb      	strb	r3, [r7, #11]
			data,
			len,
			ITS_BME_HAL_TIMEOUT
	);

	if (hrc != HAL_OK)
 800527e:	7afb      	ldrb	r3, [r7, #11]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d006      	beq.n	8005292 <_i2c_read+0x5e>
	{
		I2C_ClearBusyFlagErratum(&hi2c1, 120);
 8005284:	2178      	movs	r1, #120	; 0x78
 8005286:	4806      	ldr	r0, [pc, #24]	; (80052a0 <_i2c_read+0x6c>)
 8005288:	f000 f938 	bl	80054fc <I2C_ClearBusyFlagErratum>
		return (int8_t)hrc;
 800528c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005290:	e001      	b.n	8005296 <_i2c_read+0x62>


	}

	return (int8_t)hrc;
 8005292:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	20002910 	.word	0x20002910

080052a4 <_i2c_write>:


static int8_t _i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b088      	sub	sp, #32
 80052a8:	af04      	add	r7, sp, #16
 80052aa:	603a      	str	r2, [r7, #0]
 80052ac:	461a      	mov	r2, r3
 80052ae:	4603      	mov	r3, r0
 80052b0:	71fb      	strb	r3, [r7, #7]
 80052b2:	460b      	mov	r3, r1
 80052b4:	71bb      	strb	r3, [r7, #6]
 80052b6:	4613      	mov	r3, r2
 80052b8:	80bb      	strh	r3, [r7, #4]
	its_bme280_t * dev = _dev_by_id(id);
 80052ba:	79fb      	ldrb	r3, [r7, #7]
 80052bc:	4618      	mov	r0, r3
 80052be:	f7ff ff95 	bl	80051ec <_dev_by_id>
 80052c2:	60f8      	str	r0, [r7, #12]

	HAL_StatusTypeDef hrc = HAL_I2C_Mem_Write(
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6818      	ldr	r0, [r3, #0]
			dev->bus,
			dev->addr << 1,
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	791b      	ldrb	r3, [r3, #4]
 80052cc:	b29b      	uxth	r3, r3
	HAL_StatusTypeDef hrc = HAL_I2C_Mem_Write(
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	b299      	uxth	r1, r3
 80052d2:	79bb      	ldrb	r3, [r7, #6]
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80052da:	9302      	str	r3, [sp, #8]
 80052dc:	88bb      	ldrh	r3, [r7, #4]
 80052de:	9301      	str	r3, [sp, #4]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	2301      	movs	r3, #1
 80052e6:	f000 ff73 	bl	80061d0 <HAL_I2C_Mem_Write>
 80052ea:	4603      	mov	r3, r0
 80052ec:	72fb      	strb	r3, [r7, #11]
			1,
			data,
			len,
			ITS_BME_HAL_TIMEOUT
	);
	if (hrc == HAL_BUSY)
 80052ee:	7afb      	ldrb	r3, [r7, #11]
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d106      	bne.n	8005302 <_i2c_write+0x5e>
	{
		I2C_ClearBusyFlagErratum(&hi2c1, 120);
 80052f4:	2178      	movs	r1, #120	; 0x78
 80052f6:	4806      	ldr	r0, [pc, #24]	; (8005310 <_i2c_write+0x6c>)
 80052f8:	f000 f900 	bl	80054fc <I2C_ClearBusyFlagErratum>
		return (int8_t)hrc;
 80052fc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005300:	e001      	b.n	8005306 <_i2c_write+0x62>

	}
	return (int8_t)hrc;
 8005302:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	20002910 	.word	0x20002910

08005314 <_delay_ms>:



static void _delay_ms(uint32_t ms)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 fa13 	bl	8005748 <HAL_Delay>
}
 8005322:	bf00      	nop
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <its_bme280_init>:


int its_bme280_init(its_bme280_id_t id)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b084      	sub	sp, #16
 800532e:	af00      	add	r7, sp, #0
 8005330:	4603      	mov	r3, r0
 8005332:	71fb      	strb	r3, [r7, #7]
	its_bme280_t * const dev = _dev_by_id(id);
 8005334:	79fb      	ldrb	r3, [r7, #7]
 8005336:	4618      	mov	r0, r3
 8005338:	f7ff ff58 	bl	80051ec <_dev_by_id>
 800533c:	60f8      	str	r0, [r7, #12]

	int rc = bme280_soft_reset(&dev->driver);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	3308      	adds	r3, #8
 8005342:	4618      	mov	r0, r3
 8005344:	f7fe feb0 	bl	80040a8 <bme280_soft_reset>
 8005348:	4603      	mov	r3, r0
 800534a:	60bb      	str	r3, [r7, #8]
	if (0 != rc)
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <its_bme280_init+0x2c>
		return rc;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	e029      	b.n	80053aa <its_bme280_init+0x80>

	rc = bme280_init(&dev->driver);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	3308      	adds	r3, #8
 800535a:	4618      	mov	r0, r3
 800535c:	f7fe fd07 	bl	8003d6e <bme280_init>
 8005360:	4603      	mov	r3, r0
 8005362:	60bb      	str	r3, [r7, #8]
	if (0 != rc)
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <its_bme280_init+0x44>
		return rc;
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	e01d      	b.n	80053aa <its_bme280_init+0x80>

	rc = bme280_set_sensor_settings(BME280_ALL_SETTINGS_SEL, &dev->driver);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	3308      	adds	r3, #8
 8005372:	4619      	mov	r1, r3
 8005374:	201f      	movs	r0, #31
 8005376:	f7fe fdeb 	bl	8003f50 <bme280_set_sensor_settings>
 800537a:	4603      	mov	r3, r0
 800537c:	60bb      	str	r3, [r7, #8]
	if (0 != rc)
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d001      	beq.n	8005388 <its_bme280_init+0x5e>
		return rc;
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	e010      	b.n	80053aa <its_bme280_init+0x80>

	rc = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev->driver);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	3308      	adds	r3, #8
 800538c:	4619      	mov	r1, r3
 800538e:	2003      	movs	r0, #3
 8005390:	f7fe fe33 	bl	8003ffa <bme280_set_sensor_mode>
 8005394:	4603      	mov	r3, r0
 8005396:	60bb      	str	r3, [r7, #8]
	if (0 != rc)
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <its_bme280_init+0x78>
		return rc;
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	e003      	b.n	80053aa <its_bme280_init+0x80>

	HAL_Delay(10); // Иначе первые данные получаются плохие
 80053a2:	200a      	movs	r0, #10
 80053a4:	f000 f9d0 	bl	8005748 <HAL_Delay>
	return 0;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	0000      	movs	r0, r0
 80053b4:	0000      	movs	r0, r0
	...

080053b8 <its_bme280_read>:
}


//Заменить в функци структура мавлинка на собственную
int its_bme280_read(its_bme280_id_t id, bme_important_shit * data)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08a      	sub	sp, #40	; 0x28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	4603      	mov	r3, r0
 80053c0:	6039      	str	r1, [r7, #0]
 80053c2:	71fb      	strb	r3, [r7, #7]
	its_bme280_t * const dev = _dev_by_id(id);
 80053c4:	79fb      	ldrb	r3, [r7, #7]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7ff ff10 	bl	80051ec <_dev_by_id>
 80053cc:	6278      	str	r0, [r7, #36]	; 0x24

	struct bme280_data bme280_data;

	int rc = bme280_get_sensor_data(BME280_ALL, &bme280_data, &dev->driver);
 80053ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d0:	f103 0208 	add.w	r2, r3, #8
 80053d4:	f107 0308 	add.w	r3, r7, #8
 80053d8:	4619      	mov	r1, r3
 80053da:	2007      	movs	r0, #7
 80053dc:	f7fe feaf 	bl	800413e <bme280_get_sensor_data>
 80053e0:	4603      	mov	r3, r0
 80053e2:	623b      	str	r3, [r7, #32]
	if (0 != rc)
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <its_bme280_read+0x36>
		return rc;
 80053ea:	6a3b      	ldr	r3, [r7, #32]
 80053ec:	e044      	b.n	8005478 <its_bme280_read+0xc0>

	data->time_steady = HAL_GetTick();
 80053ee:	f000 f99f 	bl	8005730 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	611a      	str	r2, [r3, #16]

	data->pressure = bme280_data.pressure;
 80053f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053fc:	6839      	ldr	r1, [r7, #0]
 80053fe:	e9c1 2300 	strd	r2, r3, [r1]
	data->temperature = bme280_data.temperature;
 8005402:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005406:	6839      	ldr	r1, [r7, #0]
 8005408:	e9c1 2306 	strd	r2, r3, [r1, #24]
	data->humidity = bme280_data.humidity;
 800540c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005410:	6839      	ldr	r1, [r7, #0]
 8005412:	e9c1 2308 	strd	r2, r3, [r1, #32]
	data->altitude =  44330.0*(1.0 - pow((float)bme280_data.pressure/data->bme_pres_grow, 1.0/5.255)); // Написать функцию пересчета в высоту
 8005416:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800541a:	4610      	mov	r0, r2
 800541c:	4619      	mov	r1, r3
 800541e:	f7fb fbfb 	bl	8000c18 <__aeabi_d2f>
 8005422:	4603      	mov	r3, r0
 8005424:	4618      	mov	r0, r3
 8005426:	f7fb f8a7 	bl	8000578 <__aeabi_f2d>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005430:	f7fb fa24 	bl	800087c <__aeabi_ddiv>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	ec43 2b17 	vmov	d7, r2, r3
 800543c:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8005480 <its_bme280_read+0xc8>
 8005440:	eeb0 0a47 	vmov.f32	s0, s14
 8005444:	eef0 0a67 	vmov.f32	s1, s15
 8005448:	f00e fb18 	bl	8013a7c <pow>
 800544c:	ec53 2b10 	vmov	r2, r3, d0
 8005450:	f04f 0000 	mov.w	r0, #0
 8005454:	490e      	ldr	r1, [pc, #56]	; (8005490 <its_bme280_read+0xd8>)
 8005456:	f7fa ff2f 	bl	80002b8 <__aeabi_dsub>
 800545a:	4602      	mov	r2, r0
 800545c:	460b      	mov	r3, r1
 800545e:	4610      	mov	r0, r2
 8005460:	4619      	mov	r1, r3
 8005462:	a309      	add	r3, pc, #36	; (adr r3, 8005488 <its_bme280_read+0xd0>)
 8005464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005468:	f7fb f8de 	bl	8000628 <__aeabi_dmul>
 800546c:	4602      	mov	r2, r0
 800546e:	460b      	mov	r3, r1
 8005470:	6839      	ldr	r1, [r7, #0]
 8005472:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	return 0;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3728      	adds	r7, #40	; 0x28
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	ccd9456c 	.word	0xccd9456c
 8005484:	3fc85b95 	.word	0x3fc85b95
 8005488:	00000000 	.word	0x00000000
 800548c:	40e5a540 	.word	0x40e5a540
 8005490:	3ff00000 	.word	0x3ff00000

08005494 <wait_for_gpio_state_timeout>:

#define SDA_PORT GPIOB
#define SDA_PIN  GPIO_PIN_9

static uint8_t wait_for_gpio_state_timeout(GPIO_TypeDef *port, uint16_t pin, GPIO_PinState state, uint32_t timeout)
 {
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	607b      	str	r3, [r7, #4]
 800549e:	460b      	mov	r3, r1
 80054a0:	817b      	strh	r3, [r7, #10]
 80054a2:	4613      	mov	r3, r2
 80054a4:	727b      	strb	r3, [r7, #9]
    uint32_t Tickstart = HAL_GetTick();
 80054a6:	f000 f943 	bl	8005730 <HAL_GetTick>
 80054aa:	6138      	str	r0, [r7, #16]
    uint8_t ret = 1;
 80054ac:	2301      	movs	r3, #1
 80054ae:	75fb      	strb	r3, [r7, #23]

    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (1 == ret);) // Wait until flag is set
 80054b0:	e011      	b.n	80054d6 <wait_for_gpio_state_timeout+0x42>
    {
        if(timeout != HAL_MAX_DELAY) // Check for the timeout
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b8:	d00c      	beq.n	80054d4 <wait_for_gpio_state_timeout+0x40>
        {
            if((timeout == 0U) || ((HAL_GetTick() - Tickstart) > timeout)) ret = 0;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d007      	beq.n	80054d0 <wait_for_gpio_state_timeout+0x3c>
 80054c0:	f000 f936 	bl	8005730 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d201      	bcs.n	80054d4 <wait_for_gpio_state_timeout+0x40>
 80054d0:	2300      	movs	r3, #0
 80054d2:	75fb      	strb	r3, [r7, #23]
        }

        asm("nop");
 80054d4:	bf00      	nop
    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (1 == ret);) // Wait until flag is set
 80054d6:	897b      	ldrh	r3, [r7, #10]
 80054d8:	4619      	mov	r1, r3
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 fcd2 	bl	8005e84 <HAL_GPIO_ReadPin>
 80054e0:	4603      	mov	r3, r0
 80054e2:	461a      	mov	r2, r3
 80054e4:	7a7b      	ldrb	r3, [r7, #9]
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d002      	beq.n	80054f0 <wait_for_gpio_state_timeout+0x5c>
 80054ea:	7dfb      	ldrb	r3, [r7, #23]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d0e0      	beq.n	80054b2 <wait_for_gpio_state_timeout+0x1e>
    }
    return ret;
 80054f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3718      	adds	r7, #24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
	...

080054fc <I2C_ClearBusyFlagErratum>:

void I2C_ClearBusyFlagErratum(I2C_HandleTypeDef *hi2c, uint32_t timeout)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b088      	sub	sp, #32
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
        // 2.13.7 I2C analog filter may provide wrong value, locking BUSY. STM32F10xx8 STM32F10xxB Errata sheet

    GPIO_InitTypeDef GPIO_InitStructure = {0};
 8005506:	f107 030c 	add.w	r3, r7, #12
 800550a:	2200      	movs	r2, #0
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	605a      	str	r2, [r3, #4]
 8005510:	609a      	str	r2, [r3, #8]
 8005512:	60da      	str	r2, [r3, #12]
 8005514:	611a      	str	r2, [r3, #16]

    // 1. Clear PE bit.
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_PE);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 0201 	bic.w	r2, r2, #1
 8005524:	601a      	str	r2, [r3, #0]

    //  2. Configure the SCL and SDA I/Os as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_I2C_DeInit(hi2c);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 fe22 	bl	8006170 <HAL_I2C_DeInit>

    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 800552c:	2311      	movs	r3, #17
 800552e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 8005530:	2300      	movs	r3, #0
 8005532:	617b      	str	r3, [r7, #20]

    GPIO_InitStructure.Pin = SCL_PIN; // SCL // если пин другой, то укажите нужный
 8005534:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005538:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SCL_PORT, &GPIO_InitStructure); // если порт другой, то укажите нужную букву GPIOх, и ниже там все порты и пины поменяйте на своё
 800553a:	f107 030c 	add.w	r3, r7, #12
 800553e:	4619      	mov	r1, r3
 8005540:	4847      	ldr	r0, [pc, #284]	; (8005660 <I2C_ClearBusyFlagErratum+0x164>)
 8005542:	f000 fa37 	bl	80059b4 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = SDA_PIN; // SDA
 8005546:	f44f 7300 	mov.w	r3, #512	; 0x200
 800554a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SDA_PORT, &GPIO_InitStructure);
 800554c:	f107 030c 	add.w	r3, r7, #12
 8005550:	4619      	mov	r1, r3
 8005552:	4843      	ldr	r0, [pc, #268]	; (8005660 <I2C_ClearBusyFlagErratum+0x164>)
 8005554:	f000 fa2e 	bl	80059b4 <HAL_GPIO_Init>

    // 3. Check SCL and SDA High level in GPIOx_IDR.
    HAL_GPIO_WritePin(SDA_PORT, SDA_PIN, GPIO_PIN_SET);
 8005558:	2201      	movs	r2, #1
 800555a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800555e:	4840      	ldr	r0, [pc, #256]	; (8005660 <I2C_ClearBusyFlagErratum+0x164>)
 8005560:	f000 fca8 	bl	8005eb4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_SET);
 8005564:	2201      	movs	r2, #1
 8005566:	f44f 7180 	mov.w	r1, #256	; 0x100
 800556a:	483d      	ldr	r0, [pc, #244]	; (8005660 <I2C_ClearBusyFlagErratum+0x164>)
 800556c:	f000 fca2 	bl	8005eb4 <HAL_GPIO_WritePin>

    wait_for_gpio_state_timeout(SCL_PORT, SCL_PIN, GPIO_PIN_SET, timeout);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	2201      	movs	r2, #1
 8005574:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005578:	4839      	ldr	r0, [pc, #228]	; (8005660 <I2C_ClearBusyFlagErratum+0x164>)
 800557a:	f7ff ff8b 	bl	8005494 <wait_for_gpio_state_timeout>
    wait_for_gpio_state_timeout(SDA_PORT, SDA_PIN, GPIO_PIN_SET, timeout);
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2201      	movs	r2, #1
 8005582:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005586:	4836      	ldr	r0, [pc, #216]	; (8005660 <I2C_ClearBusyFlagErratum+0x164>)
 8005588:	f7ff ff84 	bl	8005494 <wait_for_gpio_state_timeout>

    // 4. Configure the SDA I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(SDA_PORT, SDA_PIN, GPIO_PIN_RESET);
 800558c:	2200      	movs	r2, #0
 800558e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005592:	4833      	ldr	r0, [pc, #204]	; (8005660 <I2C_ClearBusyFlagErratum+0x164>)
 8005594:	f000 fc8e 	bl	8005eb4 <HAL_GPIO_WritePin>

    // 5. Check SDA Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(SDA_PORT, SDA_PIN, GPIO_PIN_RESET, timeout);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2200      	movs	r2, #0
 800559c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055a0:	482f      	ldr	r0, [pc, #188]	; (8005660 <I2C_ClearBusyFlagErratum+0x164>)
 80055a2:	f7ff ff77 	bl	8005494 <wait_for_gpio_state_timeout>

    // 6. Configure the SCL I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_RESET);
 80055a6:	2200      	movs	r2, #0
 80055a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055ac:	482c      	ldr	r0, [pc, #176]	; (8005660 <I2C_ClearBusyFlagErratum+0x164>)
 80055ae:	f000 fc81 	bl	8005eb4 <HAL_GPIO_WritePin>

    // 7. Check SCL Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(SCL_PORT, SCL_PIN, GPIO_PIN_RESET, timeout);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055ba:	4829      	ldr	r0, [pc, #164]	; (8005660 <I2C_ClearBusyFlagErratum+0x164>)
 80055bc:	f7ff ff6a 	bl	8005494 <wait_for_gpio_state_timeout>

    // 8. Configure the SCL I/O as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_SET);
 80055c0:	2201      	movs	r2, #1
 80055c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055c6:	4826      	ldr	r0, [pc, #152]	; (8005660 <I2C_ClearBusyFlagErratum+0x164>)
 80055c8:	f000 fc74 	bl	8005eb4 <HAL_GPIO_WritePin>

    // 9. Check SCL High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(SCL_PORT, SCL_PIN, GPIO_PIN_SET, timeout);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055d4:	4822      	ldr	r0, [pc, #136]	; (8005660 <I2C_ClearBusyFlagErratum+0x164>)
 80055d6:	f7ff ff5d 	bl	8005494 <wait_for_gpio_state_timeout>

    // 10. Configure the SDA I/O as General Purpose Output Open-Drain , High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(SDA_PORT, SDA_PIN, GPIO_PIN_SET);
 80055da:	2201      	movs	r2, #1
 80055dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055e0:	481f      	ldr	r0, [pc, #124]	; (8005660 <I2C_ClearBusyFlagErratum+0x164>)
 80055e2:	f000 fc67 	bl	8005eb4 <HAL_GPIO_WritePin>

    // 11. Check SDA High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(SDA_PORT, SDA_PIN, GPIO_PIN_SET, timeout);
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055ee:	481c      	ldr	r0, [pc, #112]	; (8005660 <I2C_ClearBusyFlagErratum+0x164>)
 80055f0:	f7ff ff50 	bl	8005494 <wait_for_gpio_state_timeout>

    // 12. Configure the SCL and SDA I/Os as Alternate function Open-Drain.
    GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 80055f4:	2312      	movs	r3, #18
 80055f6:	613b      	str	r3, [r7, #16]
    //GPIO_InitStructure.Alternate = GPIO_AF4_I2C2; // F4

    GPIO_InitStructure.Pin = SCL_PIN;
 80055f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055fc:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SCL_PORT, &GPIO_InitStructure);
 80055fe:	f107 030c 	add.w	r3, r7, #12
 8005602:	4619      	mov	r1, r3
 8005604:	4816      	ldr	r0, [pc, #88]	; (8005660 <I2C_ClearBusyFlagErratum+0x164>)
 8005606:	f000 f9d5 	bl	80059b4 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = SDA_PIN;
 800560a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800560e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SDA_PORT, &GPIO_InitStructure);
 8005610:	f107 030c 	add.w	r3, r7, #12
 8005614:	4619      	mov	r1, r3
 8005616:	4812      	ldr	r0, [pc, #72]	; (8005660 <I2C_ClearBusyFlagErratum+0x164>)
 8005618:	f000 f9cc 	bl	80059b4 <HAL_GPIO_Init>

    // 13. Set SWRST bit in I2Cx_CR1 register.
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800562a:	601a      	str	r2, [r3, #0]
    asm("nop");
 800562c:	bf00      	nop

    /* 14. Clear SWRST bit in I2Cx_CR1 register. */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800563c:	601a      	str	r2, [r3, #0]
    asm("nop");
 800563e:	bf00      	nop

    /* 15. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_PE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 0201 	orr.w	r2, r2, #1
 800564e:	601a      	str	r2, [r3, #0]
    asm("nop");
 8005650:	bf00      	nop

    // Call initialization function.
    HAL_I2C_Init(hi2c);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 fc48 	bl	8005ee8 <HAL_I2C_Init>
}
 8005658:	bf00      	nop
 800565a:	3720      	adds	r7, #32
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	40020400 	.word	0x40020400

08005664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005668:	4b0e      	ldr	r3, [pc, #56]	; (80056a4 <HAL_Init+0x40>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a0d      	ldr	r2, [pc, #52]	; (80056a4 <HAL_Init+0x40>)
 800566e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005672:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005674:	4b0b      	ldr	r3, [pc, #44]	; (80056a4 <HAL_Init+0x40>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a0a      	ldr	r2, [pc, #40]	; (80056a4 <HAL_Init+0x40>)
 800567a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800567e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005680:	4b08      	ldr	r3, [pc, #32]	; (80056a4 <HAL_Init+0x40>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a07      	ldr	r2, [pc, #28]	; (80056a4 <HAL_Init+0x40>)
 8005686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800568a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800568c:	2003      	movs	r0, #3
 800568e:	f000 f94f 	bl	8005930 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005692:	200f      	movs	r0, #15
 8005694:	f000 f808 	bl	80056a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005698:	f7fd ff86 	bl	80035a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	40023c00 	.word	0x40023c00

080056a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80056b0:	4b12      	ldr	r3, [pc, #72]	; (80056fc <HAL_InitTick+0x54>)
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	4b12      	ldr	r3, [pc, #72]	; (8005700 <HAL_InitTick+0x58>)
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	4619      	mov	r1, r3
 80056ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056be:	fbb3 f3f1 	udiv	r3, r3, r1
 80056c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 f967 	bl	800599a <HAL_SYSTICK_Config>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e00e      	b.n	80056f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b0f      	cmp	r3, #15
 80056da:	d80a      	bhi.n	80056f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80056dc:	2200      	movs	r2, #0
 80056de:	6879      	ldr	r1, [r7, #4]
 80056e0:	f04f 30ff 	mov.w	r0, #4294967295
 80056e4:	f000 f92f 	bl	8005946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80056e8:	4a06      	ldr	r2, [pc, #24]	; (8005704 <HAL_InitTick+0x5c>)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
 80056f0:	e000      	b.n	80056f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3708      	adds	r7, #8
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	20000004 	.word	0x20000004
 8005700:	20000054 	.word	0x20000054
 8005704:	20000050 	.word	0x20000050

08005708 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800570c:	4b06      	ldr	r3, [pc, #24]	; (8005728 <HAL_IncTick+0x20>)
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	461a      	mov	r2, r3
 8005712:	4b06      	ldr	r3, [pc, #24]	; (800572c <HAL_IncTick+0x24>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4413      	add	r3, r2
 8005718:	4a04      	ldr	r2, [pc, #16]	; (800572c <HAL_IncTick+0x24>)
 800571a:	6013      	str	r3, [r2, #0]
}
 800571c:	bf00      	nop
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	20000054 	.word	0x20000054
 800572c:	20002b20 	.word	0x20002b20

08005730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005730:	b480      	push	{r7}
 8005732:	af00      	add	r7, sp, #0
  return uwTick;
 8005734:	4b03      	ldr	r3, [pc, #12]	; (8005744 <HAL_GetTick+0x14>)
 8005736:	681b      	ldr	r3, [r3, #0]
}
 8005738:	4618      	mov	r0, r3
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	20002b20 	.word	0x20002b20

08005748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005750:	f7ff ffee 	bl	8005730 <HAL_GetTick>
 8005754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005760:	d005      	beq.n	800576e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005762:	4b0a      	ldr	r3, [pc, #40]	; (800578c <HAL_Delay+0x44>)
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	461a      	mov	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	4413      	add	r3, r2
 800576c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800576e:	bf00      	nop
 8005770:	f7ff ffde 	bl	8005730 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	429a      	cmp	r2, r3
 800577e:	d8f7      	bhi.n	8005770 <HAL_Delay+0x28>
  {
  }
}
 8005780:	bf00      	nop
 8005782:	bf00      	nop
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	20000054 	.word	0x20000054

08005790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f003 0307 	and.w	r3, r3, #7
 800579e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057a0:	4b0c      	ldr	r3, [pc, #48]	; (80057d4 <__NVIC_SetPriorityGrouping+0x44>)
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80057ac:	4013      	ands	r3, r2
 80057ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80057b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80057bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80057c2:	4a04      	ldr	r2, [pc, #16]	; (80057d4 <__NVIC_SetPriorityGrouping+0x44>)
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	60d3      	str	r3, [r2, #12]
}
 80057c8:	bf00      	nop
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	e000ed00 	.word	0xe000ed00

080057d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80057d8:	b480      	push	{r7}
 80057da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057dc:	4b04      	ldr	r3, [pc, #16]	; (80057f0 <__NVIC_GetPriorityGrouping+0x18>)
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	0a1b      	lsrs	r3, r3, #8
 80057e2:	f003 0307 	and.w	r3, r3, #7
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	e000ed00 	.word	0xe000ed00

080057f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	4603      	mov	r3, r0
 80057fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005802:	2b00      	cmp	r3, #0
 8005804:	db0b      	blt.n	800581e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005806:	79fb      	ldrb	r3, [r7, #7]
 8005808:	f003 021f 	and.w	r2, r3, #31
 800580c:	4907      	ldr	r1, [pc, #28]	; (800582c <__NVIC_EnableIRQ+0x38>)
 800580e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005812:	095b      	lsrs	r3, r3, #5
 8005814:	2001      	movs	r0, #1
 8005816:	fa00 f202 	lsl.w	r2, r0, r2
 800581a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800581e:	bf00      	nop
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	e000e100 	.word	0xe000e100

08005830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	4603      	mov	r3, r0
 8005838:	6039      	str	r1, [r7, #0]
 800583a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800583c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005840:	2b00      	cmp	r3, #0
 8005842:	db0a      	blt.n	800585a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	b2da      	uxtb	r2, r3
 8005848:	490c      	ldr	r1, [pc, #48]	; (800587c <__NVIC_SetPriority+0x4c>)
 800584a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800584e:	0112      	lsls	r2, r2, #4
 8005850:	b2d2      	uxtb	r2, r2
 8005852:	440b      	add	r3, r1
 8005854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005858:	e00a      	b.n	8005870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	b2da      	uxtb	r2, r3
 800585e:	4908      	ldr	r1, [pc, #32]	; (8005880 <__NVIC_SetPriority+0x50>)
 8005860:	79fb      	ldrb	r3, [r7, #7]
 8005862:	f003 030f 	and.w	r3, r3, #15
 8005866:	3b04      	subs	r3, #4
 8005868:	0112      	lsls	r2, r2, #4
 800586a:	b2d2      	uxtb	r2, r2
 800586c:	440b      	add	r3, r1
 800586e:	761a      	strb	r2, [r3, #24]
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	e000e100 	.word	0xe000e100
 8005880:	e000ed00 	.word	0xe000ed00

08005884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005884:	b480      	push	{r7}
 8005886:	b089      	sub	sp, #36	; 0x24
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f003 0307 	and.w	r3, r3, #7
 8005896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	f1c3 0307 	rsb	r3, r3, #7
 800589e:	2b04      	cmp	r3, #4
 80058a0:	bf28      	it	cs
 80058a2:	2304      	movcs	r3, #4
 80058a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	3304      	adds	r3, #4
 80058aa:	2b06      	cmp	r3, #6
 80058ac:	d902      	bls.n	80058b4 <NVIC_EncodePriority+0x30>
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	3b03      	subs	r3, #3
 80058b2:	e000      	b.n	80058b6 <NVIC_EncodePriority+0x32>
 80058b4:	2300      	movs	r3, #0
 80058b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058b8:	f04f 32ff 	mov.w	r2, #4294967295
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	fa02 f303 	lsl.w	r3, r2, r3
 80058c2:	43da      	mvns	r2, r3
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	401a      	ands	r2, r3
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058cc:	f04f 31ff 	mov.w	r1, #4294967295
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	fa01 f303 	lsl.w	r3, r1, r3
 80058d6:	43d9      	mvns	r1, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058dc:	4313      	orrs	r3, r2
         );
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3724      	adds	r7, #36	; 0x24
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
	...

080058ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	3b01      	subs	r3, #1
 80058f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058fc:	d301      	bcc.n	8005902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058fe:	2301      	movs	r3, #1
 8005900:	e00f      	b.n	8005922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005902:	4a0a      	ldr	r2, [pc, #40]	; (800592c <SysTick_Config+0x40>)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	3b01      	subs	r3, #1
 8005908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800590a:	210f      	movs	r1, #15
 800590c:	f04f 30ff 	mov.w	r0, #4294967295
 8005910:	f7ff ff8e 	bl	8005830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005914:	4b05      	ldr	r3, [pc, #20]	; (800592c <SysTick_Config+0x40>)
 8005916:	2200      	movs	r2, #0
 8005918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800591a:	4b04      	ldr	r3, [pc, #16]	; (800592c <SysTick_Config+0x40>)
 800591c:	2207      	movs	r2, #7
 800591e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	e000e010 	.word	0xe000e010

08005930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7ff ff29 	bl	8005790 <__NVIC_SetPriorityGrouping>
}
 800593e:	bf00      	nop
 8005940:	3708      	adds	r7, #8
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005946:	b580      	push	{r7, lr}
 8005948:	b086      	sub	sp, #24
 800594a:	af00      	add	r7, sp, #0
 800594c:	4603      	mov	r3, r0
 800594e:	60b9      	str	r1, [r7, #8]
 8005950:	607a      	str	r2, [r7, #4]
 8005952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005954:	2300      	movs	r3, #0
 8005956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005958:	f7ff ff3e 	bl	80057d8 <__NVIC_GetPriorityGrouping>
 800595c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	68b9      	ldr	r1, [r7, #8]
 8005962:	6978      	ldr	r0, [r7, #20]
 8005964:	f7ff ff8e 	bl	8005884 <NVIC_EncodePriority>
 8005968:	4602      	mov	r2, r0
 800596a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800596e:	4611      	mov	r1, r2
 8005970:	4618      	mov	r0, r3
 8005972:	f7ff ff5d 	bl	8005830 <__NVIC_SetPriority>
}
 8005976:	bf00      	nop
 8005978:	3718      	adds	r7, #24
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b082      	sub	sp, #8
 8005982:	af00      	add	r7, sp, #0
 8005984:	4603      	mov	r3, r0
 8005986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800598c:	4618      	mov	r0, r3
 800598e:	f7ff ff31 	bl	80057f4 <__NVIC_EnableIRQ>
}
 8005992:	bf00      	nop
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b082      	sub	sp, #8
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f7ff ffa2 	bl	80058ec <SysTick_Config>
 80059a8:	4603      	mov	r3, r0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3708      	adds	r7, #8
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
	...

080059b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b089      	sub	sp, #36	; 0x24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80059be:	2300      	movs	r3, #0
 80059c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80059c6:	2300      	movs	r3, #0
 80059c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059ca:	2300      	movs	r3, #0
 80059cc:	61fb      	str	r3, [r7, #28]
 80059ce:	e159      	b.n	8005c84 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80059d0:	2201      	movs	r2, #1
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	fa02 f303 	lsl.w	r3, r2, r3
 80059d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	4013      	ands	r3, r2
 80059e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	f040 8148 	bne.w	8005c7e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f003 0303 	and.w	r3, r3, #3
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d005      	beq.n	8005a06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d130      	bne.n	8005a68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	2203      	movs	r2, #3
 8005a12:	fa02 f303 	lsl.w	r3, r2, r3
 8005a16:	43db      	mvns	r3, r3
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	68da      	ldr	r2, [r3, #12]
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2a:	69ba      	ldr	r2, [r7, #24]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	fa02 f303 	lsl.w	r3, r2, r3
 8005a44:	43db      	mvns	r3, r3
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	4013      	ands	r3, r2
 8005a4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	091b      	lsrs	r3, r3, #4
 8005a52:	f003 0201 	and.w	r2, r3, #1
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f003 0303 	and.w	r3, r3, #3
 8005a70:	2b03      	cmp	r3, #3
 8005a72:	d017      	beq.n	8005aa4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	2203      	movs	r2, #3
 8005a80:	fa02 f303 	lsl.w	r3, r2, r3
 8005a84:	43db      	mvns	r3, r3
 8005a86:	69ba      	ldr	r2, [r7, #24]
 8005a88:	4013      	ands	r3, r2
 8005a8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	689a      	ldr	r2, [r3, #8]
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	005b      	lsls	r3, r3, #1
 8005a94:	fa02 f303 	lsl.w	r3, r2, r3
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f003 0303 	and.w	r3, r3, #3
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d123      	bne.n	8005af8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	08da      	lsrs	r2, r3, #3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	3208      	adds	r2, #8
 8005ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	f003 0307 	and.w	r3, r3, #7
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	220f      	movs	r2, #15
 8005ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8005acc:	43db      	mvns	r3, r3
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	691a      	ldr	r2, [r3, #16]
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	f003 0307 	and.w	r3, r3, #7
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	08da      	lsrs	r2, r3, #3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	3208      	adds	r2, #8
 8005af2:	69b9      	ldr	r1, [r7, #24]
 8005af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	005b      	lsls	r3, r3, #1
 8005b02:	2203      	movs	r2, #3
 8005b04:	fa02 f303 	lsl.w	r3, r2, r3
 8005b08:	43db      	mvns	r3, r3
 8005b0a:	69ba      	ldr	r2, [r7, #24]
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	f003 0203 	and.w	r2, r3, #3
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f000 80a2 	beq.w	8005c7e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	60fb      	str	r3, [r7, #12]
 8005b3e:	4b57      	ldr	r3, [pc, #348]	; (8005c9c <HAL_GPIO_Init+0x2e8>)
 8005b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b42:	4a56      	ldr	r2, [pc, #344]	; (8005c9c <HAL_GPIO_Init+0x2e8>)
 8005b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b48:	6453      	str	r3, [r2, #68]	; 0x44
 8005b4a:	4b54      	ldr	r3, [pc, #336]	; (8005c9c <HAL_GPIO_Init+0x2e8>)
 8005b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b52:	60fb      	str	r3, [r7, #12]
 8005b54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b56:	4a52      	ldr	r2, [pc, #328]	; (8005ca0 <HAL_GPIO_Init+0x2ec>)
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	089b      	lsrs	r3, r3, #2
 8005b5c:	3302      	adds	r3, #2
 8005b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	f003 0303 	and.w	r3, r3, #3
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	220f      	movs	r2, #15
 8005b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b72:	43db      	mvns	r3, r3
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	4013      	ands	r3, r2
 8005b78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a49      	ldr	r2, [pc, #292]	; (8005ca4 <HAL_GPIO_Init+0x2f0>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d019      	beq.n	8005bb6 <HAL_GPIO_Init+0x202>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a48      	ldr	r2, [pc, #288]	; (8005ca8 <HAL_GPIO_Init+0x2f4>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d013      	beq.n	8005bb2 <HAL_GPIO_Init+0x1fe>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a47      	ldr	r2, [pc, #284]	; (8005cac <HAL_GPIO_Init+0x2f8>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d00d      	beq.n	8005bae <HAL_GPIO_Init+0x1fa>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a46      	ldr	r2, [pc, #280]	; (8005cb0 <HAL_GPIO_Init+0x2fc>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d007      	beq.n	8005baa <HAL_GPIO_Init+0x1f6>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a45      	ldr	r2, [pc, #276]	; (8005cb4 <HAL_GPIO_Init+0x300>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d101      	bne.n	8005ba6 <HAL_GPIO_Init+0x1f2>
 8005ba2:	2304      	movs	r3, #4
 8005ba4:	e008      	b.n	8005bb8 <HAL_GPIO_Init+0x204>
 8005ba6:	2307      	movs	r3, #7
 8005ba8:	e006      	b.n	8005bb8 <HAL_GPIO_Init+0x204>
 8005baa:	2303      	movs	r3, #3
 8005bac:	e004      	b.n	8005bb8 <HAL_GPIO_Init+0x204>
 8005bae:	2302      	movs	r3, #2
 8005bb0:	e002      	b.n	8005bb8 <HAL_GPIO_Init+0x204>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e000      	b.n	8005bb8 <HAL_GPIO_Init+0x204>
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	69fa      	ldr	r2, [r7, #28]
 8005bba:	f002 0203 	and.w	r2, r2, #3
 8005bbe:	0092      	lsls	r2, r2, #2
 8005bc0:	4093      	lsls	r3, r2
 8005bc2:	69ba      	ldr	r2, [r7, #24]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bc8:	4935      	ldr	r1, [pc, #212]	; (8005ca0 <HAL_GPIO_Init+0x2ec>)
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	089b      	lsrs	r3, r3, #2
 8005bce:	3302      	adds	r3, #2
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005bd6:	4b38      	ldr	r3, [pc, #224]	; (8005cb8 <HAL_GPIO_Init+0x304>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	43db      	mvns	r3, r3
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	4013      	ands	r3, r2
 8005be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005bfa:	4a2f      	ldr	r2, [pc, #188]	; (8005cb8 <HAL_GPIO_Init+0x304>)
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005c00:	4b2d      	ldr	r3, [pc, #180]	; (8005cb8 <HAL_GPIO_Init+0x304>)
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	43db      	mvns	r3, r3
 8005c0a:	69ba      	ldr	r2, [r7, #24]
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d003      	beq.n	8005c24 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005c1c:	69ba      	ldr	r2, [r7, #24]
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c24:	4a24      	ldr	r2, [pc, #144]	; (8005cb8 <HAL_GPIO_Init+0x304>)
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c2a:	4b23      	ldr	r3, [pc, #140]	; (8005cb8 <HAL_GPIO_Init+0x304>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	43db      	mvns	r3, r3
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	4013      	ands	r3, r2
 8005c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c4e:	4a1a      	ldr	r2, [pc, #104]	; (8005cb8 <HAL_GPIO_Init+0x304>)
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c54:	4b18      	ldr	r3, [pc, #96]	; (8005cb8 <HAL_GPIO_Init+0x304>)
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	43db      	mvns	r3, r3
 8005c5e:	69ba      	ldr	r2, [r7, #24]
 8005c60:	4013      	ands	r3, r2
 8005c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d003      	beq.n	8005c78 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c78:	4a0f      	ldr	r2, [pc, #60]	; (8005cb8 <HAL_GPIO_Init+0x304>)
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	3301      	adds	r3, #1
 8005c82:	61fb      	str	r3, [r7, #28]
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	2b0f      	cmp	r3, #15
 8005c88:	f67f aea2 	bls.w	80059d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005c8c:	bf00      	nop
 8005c8e:	bf00      	nop
 8005c90:	3724      	adds	r7, #36	; 0x24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	40023800 	.word	0x40023800
 8005ca0:	40013800 	.word	0x40013800
 8005ca4:	40020000 	.word	0x40020000
 8005ca8:	40020400 	.word	0x40020400
 8005cac:	40020800 	.word	0x40020800
 8005cb0:	40020c00 	.word	0x40020c00
 8005cb4:	40021000 	.word	0x40021000
 8005cb8:	40013c00 	.word	0x40013c00

08005cbc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	617b      	str	r3, [r7, #20]
 8005cd6:	e0bb      	b.n	8005e50 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005cd8:	2201      	movs	r2, #1
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	f040 80ab 	bne.w	8005e4a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005cf4:	4a5c      	ldr	r2, [pc, #368]	; (8005e68 <HAL_GPIO_DeInit+0x1ac>)
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	089b      	lsrs	r3, r3, #2
 8005cfa:	3302      	adds	r3, #2
 8005cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d00:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f003 0303 	and.w	r3, r3, #3
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	220f      	movs	r2, #15
 8005d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	4013      	ands	r3, r2
 8005d14:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a54      	ldr	r2, [pc, #336]	; (8005e6c <HAL_GPIO_DeInit+0x1b0>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d019      	beq.n	8005d52 <HAL_GPIO_DeInit+0x96>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a53      	ldr	r2, [pc, #332]	; (8005e70 <HAL_GPIO_DeInit+0x1b4>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d013      	beq.n	8005d4e <HAL_GPIO_DeInit+0x92>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a52      	ldr	r2, [pc, #328]	; (8005e74 <HAL_GPIO_DeInit+0x1b8>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d00d      	beq.n	8005d4a <HAL_GPIO_DeInit+0x8e>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a51      	ldr	r2, [pc, #324]	; (8005e78 <HAL_GPIO_DeInit+0x1bc>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d007      	beq.n	8005d46 <HAL_GPIO_DeInit+0x8a>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a50      	ldr	r2, [pc, #320]	; (8005e7c <HAL_GPIO_DeInit+0x1c0>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d101      	bne.n	8005d42 <HAL_GPIO_DeInit+0x86>
 8005d3e:	2304      	movs	r3, #4
 8005d40:	e008      	b.n	8005d54 <HAL_GPIO_DeInit+0x98>
 8005d42:	2307      	movs	r3, #7
 8005d44:	e006      	b.n	8005d54 <HAL_GPIO_DeInit+0x98>
 8005d46:	2303      	movs	r3, #3
 8005d48:	e004      	b.n	8005d54 <HAL_GPIO_DeInit+0x98>
 8005d4a:	2302      	movs	r3, #2
 8005d4c:	e002      	b.n	8005d54 <HAL_GPIO_DeInit+0x98>
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e000      	b.n	8005d54 <HAL_GPIO_DeInit+0x98>
 8005d52:	2300      	movs	r3, #0
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	f002 0203 	and.w	r2, r2, #3
 8005d5a:	0092      	lsls	r2, r2, #2
 8005d5c:	4093      	lsls	r3, r2
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d132      	bne.n	8005dca <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005d64:	4b46      	ldr	r3, [pc, #280]	; (8005e80 <HAL_GPIO_DeInit+0x1c4>)
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	43db      	mvns	r3, r3
 8005d6c:	4944      	ldr	r1, [pc, #272]	; (8005e80 <HAL_GPIO_DeInit+0x1c4>)
 8005d6e:	4013      	ands	r3, r2
 8005d70:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005d72:	4b43      	ldr	r3, [pc, #268]	; (8005e80 <HAL_GPIO_DeInit+0x1c4>)
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	43db      	mvns	r3, r3
 8005d7a:	4941      	ldr	r1, [pc, #260]	; (8005e80 <HAL_GPIO_DeInit+0x1c4>)
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005d80:	4b3f      	ldr	r3, [pc, #252]	; (8005e80 <HAL_GPIO_DeInit+0x1c4>)
 8005d82:	689a      	ldr	r2, [r3, #8]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	43db      	mvns	r3, r3
 8005d88:	493d      	ldr	r1, [pc, #244]	; (8005e80 <HAL_GPIO_DeInit+0x1c4>)
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005d8e:	4b3c      	ldr	r3, [pc, #240]	; (8005e80 <HAL_GPIO_DeInit+0x1c4>)
 8005d90:	68da      	ldr	r2, [r3, #12]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	43db      	mvns	r3, r3
 8005d96:	493a      	ldr	r1, [pc, #232]	; (8005e80 <HAL_GPIO_DeInit+0x1c4>)
 8005d98:	4013      	ands	r3, r2
 8005d9a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f003 0303 	and.w	r3, r3, #3
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	220f      	movs	r2, #15
 8005da6:	fa02 f303 	lsl.w	r3, r2, r3
 8005daa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005dac:	4a2e      	ldr	r2, [pc, #184]	; (8005e68 <HAL_GPIO_DeInit+0x1ac>)
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	089b      	lsrs	r3, r3, #2
 8005db2:	3302      	adds	r3, #2
 8005db4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	43da      	mvns	r2, r3
 8005dbc:	482a      	ldr	r0, [pc, #168]	; (8005e68 <HAL_GPIO_DeInit+0x1ac>)
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	089b      	lsrs	r3, r3, #2
 8005dc2:	400a      	ands	r2, r1
 8005dc4:	3302      	adds	r3, #2
 8005dc6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	005b      	lsls	r3, r3, #1
 8005dd2:	2103      	movs	r1, #3
 8005dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd8:	43db      	mvns	r3, r3
 8005dda:	401a      	ands	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	08da      	lsrs	r2, r3, #3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	3208      	adds	r2, #8
 8005de8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	f003 0307 	and.w	r3, r3, #7
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	220f      	movs	r2, #15
 8005df6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfa:	43db      	mvns	r3, r3
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	08d2      	lsrs	r2, r2, #3
 8005e00:	4019      	ands	r1, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	3208      	adds	r2, #8
 8005e06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68da      	ldr	r2, [r3, #12]
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	005b      	lsls	r3, r3, #1
 8005e12:	2103      	movs	r1, #3
 8005e14:	fa01 f303 	lsl.w	r3, r1, r3
 8005e18:	43db      	mvns	r3, r3
 8005e1a:	401a      	ands	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	2101      	movs	r1, #1
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	fa01 f303 	lsl.w	r3, r1, r3
 8005e2c:	43db      	mvns	r3, r3
 8005e2e:	401a      	ands	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	005b      	lsls	r3, r3, #1
 8005e3c:	2103      	movs	r1, #3
 8005e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e42:	43db      	mvns	r3, r3
 8005e44:	401a      	ands	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	617b      	str	r3, [r7, #20]
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	2b0f      	cmp	r3, #15
 8005e54:	f67f af40 	bls.w	8005cd8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005e58:	bf00      	nop
 8005e5a:	bf00      	nop
 8005e5c:	371c      	adds	r7, #28
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	40013800 	.word	0x40013800
 8005e6c:	40020000 	.word	0x40020000
 8005e70:	40020400 	.word	0x40020400
 8005e74:	40020800 	.word	0x40020800
 8005e78:	40020c00 	.word	0x40020c00
 8005e7c:	40021000 	.word	0x40021000
 8005e80:	40013c00 	.word	0x40013c00

08005e84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	691a      	ldr	r2, [r3, #16]
 8005e94:	887b      	ldrh	r3, [r7, #2]
 8005e96:	4013      	ands	r3, r2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d002      	beq.n	8005ea2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	73fb      	strb	r3, [r7, #15]
 8005ea0:	e001      	b.n	8005ea6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3714      	adds	r7, #20
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	807b      	strh	r3, [r7, #2]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ec4:	787b      	ldrb	r3, [r7, #1]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d003      	beq.n	8005ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005eca:	887a      	ldrh	r2, [r7, #2]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005ed0:	e003      	b.n	8005eda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005ed2:	887b      	ldrh	r3, [r7, #2]
 8005ed4:	041a      	lsls	r2, r3, #16
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	619a      	str	r2, [r3, #24]
}
 8005eda:	bf00      	nop
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
	...

08005ee8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d101      	bne.n	8005efa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e12b      	b.n	8006152 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d106      	bne.n	8005f14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f7fd fb72 	bl	80035f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2224      	movs	r2, #36	; 0x24
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 0201 	bic.w	r2, r2, #1
 8005f2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005f4c:	f001 fbdc 	bl	8007708 <HAL_RCC_GetPCLK1Freq>
 8005f50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	4a81      	ldr	r2, [pc, #516]	; (800615c <HAL_I2C_Init+0x274>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d807      	bhi.n	8005f6c <HAL_I2C_Init+0x84>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	4a80      	ldr	r2, [pc, #512]	; (8006160 <HAL_I2C_Init+0x278>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	bf94      	ite	ls
 8005f64:	2301      	movls	r3, #1
 8005f66:	2300      	movhi	r3, #0
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	e006      	b.n	8005f7a <HAL_I2C_Init+0x92>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	4a7d      	ldr	r2, [pc, #500]	; (8006164 <HAL_I2C_Init+0x27c>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	bf94      	ite	ls
 8005f74:	2301      	movls	r3, #1
 8005f76:	2300      	movhi	r3, #0
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d001      	beq.n	8005f82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e0e7      	b.n	8006152 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	4a78      	ldr	r2, [pc, #480]	; (8006168 <HAL_I2C_Init+0x280>)
 8005f86:	fba2 2303 	umull	r2, r3, r2, r3
 8005f8a:	0c9b      	lsrs	r3, r3, #18
 8005f8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6a1b      	ldr	r3, [r3, #32]
 8005fa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	4a6a      	ldr	r2, [pc, #424]	; (800615c <HAL_I2C_Init+0x274>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d802      	bhi.n	8005fbc <HAL_I2C_Init+0xd4>
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	e009      	b.n	8005fd0 <HAL_I2C_Init+0xe8>
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005fc2:	fb02 f303 	mul.w	r3, r2, r3
 8005fc6:	4a69      	ldr	r2, [pc, #420]	; (800616c <HAL_I2C_Init+0x284>)
 8005fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fcc:	099b      	lsrs	r3, r3, #6
 8005fce:	3301      	adds	r3, #1
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	6812      	ldr	r2, [r2, #0]
 8005fd4:	430b      	orrs	r3, r1
 8005fd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005fe2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	495c      	ldr	r1, [pc, #368]	; (800615c <HAL_I2C_Init+0x274>)
 8005fec:	428b      	cmp	r3, r1
 8005fee:	d819      	bhi.n	8006024 <HAL_I2C_Init+0x13c>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	1e59      	subs	r1, r3, #1
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	005b      	lsls	r3, r3, #1
 8005ffa:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ffe:	1c59      	adds	r1, r3, #1
 8006000:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006004:	400b      	ands	r3, r1
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00a      	beq.n	8006020 <HAL_I2C_Init+0x138>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	1e59      	subs	r1, r3, #1
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	005b      	lsls	r3, r3, #1
 8006014:	fbb1 f3f3 	udiv	r3, r1, r3
 8006018:	3301      	adds	r3, #1
 800601a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800601e:	e051      	b.n	80060c4 <HAL_I2C_Init+0x1dc>
 8006020:	2304      	movs	r3, #4
 8006022:	e04f      	b.n	80060c4 <HAL_I2C_Init+0x1dc>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d111      	bne.n	8006050 <HAL_I2C_Init+0x168>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	1e58      	subs	r0, r3, #1
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6859      	ldr	r1, [r3, #4]
 8006034:	460b      	mov	r3, r1
 8006036:	005b      	lsls	r3, r3, #1
 8006038:	440b      	add	r3, r1
 800603a:	fbb0 f3f3 	udiv	r3, r0, r3
 800603e:	3301      	adds	r3, #1
 8006040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006044:	2b00      	cmp	r3, #0
 8006046:	bf0c      	ite	eq
 8006048:	2301      	moveq	r3, #1
 800604a:	2300      	movne	r3, #0
 800604c:	b2db      	uxtb	r3, r3
 800604e:	e012      	b.n	8006076 <HAL_I2C_Init+0x18e>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	1e58      	subs	r0, r3, #1
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6859      	ldr	r1, [r3, #4]
 8006058:	460b      	mov	r3, r1
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	440b      	add	r3, r1
 800605e:	0099      	lsls	r1, r3, #2
 8006060:	440b      	add	r3, r1
 8006062:	fbb0 f3f3 	udiv	r3, r0, r3
 8006066:	3301      	adds	r3, #1
 8006068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800606c:	2b00      	cmp	r3, #0
 800606e:	bf0c      	ite	eq
 8006070:	2301      	moveq	r3, #1
 8006072:	2300      	movne	r3, #0
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <HAL_I2C_Init+0x196>
 800607a:	2301      	movs	r3, #1
 800607c:	e022      	b.n	80060c4 <HAL_I2C_Init+0x1dc>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d10e      	bne.n	80060a4 <HAL_I2C_Init+0x1bc>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	1e58      	subs	r0, r3, #1
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6859      	ldr	r1, [r3, #4]
 800608e:	460b      	mov	r3, r1
 8006090:	005b      	lsls	r3, r3, #1
 8006092:	440b      	add	r3, r1
 8006094:	fbb0 f3f3 	udiv	r3, r0, r3
 8006098:	3301      	adds	r3, #1
 800609a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800609e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060a2:	e00f      	b.n	80060c4 <HAL_I2C_Init+0x1dc>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	1e58      	subs	r0, r3, #1
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6859      	ldr	r1, [r3, #4]
 80060ac:	460b      	mov	r3, r1
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	440b      	add	r3, r1
 80060b2:	0099      	lsls	r1, r3, #2
 80060b4:	440b      	add	r3, r1
 80060b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80060ba:	3301      	adds	r3, #1
 80060bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060c4:	6879      	ldr	r1, [r7, #4]
 80060c6:	6809      	ldr	r1, [r1, #0]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	69da      	ldr	r2, [r3, #28]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	431a      	orrs	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	430a      	orrs	r2, r1
 80060e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80060f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	6911      	ldr	r1, [r2, #16]
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	68d2      	ldr	r2, [r2, #12]
 80060fe:	4311      	orrs	r1, r2
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	6812      	ldr	r2, [r2, #0]
 8006104:	430b      	orrs	r3, r1
 8006106:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	695a      	ldr	r2, [r3, #20]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	431a      	orrs	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	430a      	orrs	r2, r1
 8006122:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f042 0201 	orr.w	r2, r2, #1
 8006132:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2220      	movs	r2, #32
 800613e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	000186a0 	.word	0x000186a0
 8006160:	001e847f 	.word	0x001e847f
 8006164:	003d08ff 	.word	0x003d08ff
 8006168:	431bde83 	.word	0x431bde83
 800616c:	10624dd3 	.word	0x10624dd3

08006170 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d101      	bne.n	8006182 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e021      	b.n	80061c6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2224      	movs	r2, #36	; 0x24
 8006186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 0201 	bic.w	r2, r2, #1
 8006198:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7fd fa74 	bl	8003688 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
	...

080061d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b088      	sub	sp, #32
 80061d4:	af02      	add	r7, sp, #8
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	4608      	mov	r0, r1
 80061da:	4611      	mov	r1, r2
 80061dc:	461a      	mov	r2, r3
 80061de:	4603      	mov	r3, r0
 80061e0:	817b      	strh	r3, [r7, #10]
 80061e2:	460b      	mov	r3, r1
 80061e4:	813b      	strh	r3, [r7, #8]
 80061e6:	4613      	mov	r3, r2
 80061e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80061ea:	f7ff faa1 	bl	8005730 <HAL_GetTick>
 80061ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b20      	cmp	r3, #32
 80061fa:	f040 80d9 	bne.w	80063b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	9300      	str	r3, [sp, #0]
 8006202:	2319      	movs	r3, #25
 8006204:	2201      	movs	r2, #1
 8006206:	496d      	ldr	r1, [pc, #436]	; (80063bc <HAL_I2C_Mem_Write+0x1ec>)
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f000 fc7f 	bl	8006b0c <I2C_WaitOnFlagUntilTimeout>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d001      	beq.n	8006218 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006214:	2302      	movs	r3, #2
 8006216:	e0cc      	b.n	80063b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800621e:	2b01      	cmp	r3, #1
 8006220:	d101      	bne.n	8006226 <HAL_I2C_Mem_Write+0x56>
 8006222:	2302      	movs	r3, #2
 8006224:	e0c5      	b.n	80063b2 <HAL_I2C_Mem_Write+0x1e2>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0301 	and.w	r3, r3, #1
 8006238:	2b01      	cmp	r3, #1
 800623a:	d007      	beq.n	800624c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f042 0201 	orr.w	r2, r2, #1
 800624a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800625a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2221      	movs	r2, #33	; 0x21
 8006260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2240      	movs	r2, #64	; 0x40
 8006268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6a3a      	ldr	r2, [r7, #32]
 8006276:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800627c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006282:	b29a      	uxth	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	4a4d      	ldr	r2, [pc, #308]	; (80063c0 <HAL_I2C_Mem_Write+0x1f0>)
 800628c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800628e:	88f8      	ldrh	r0, [r7, #6]
 8006290:	893a      	ldrh	r2, [r7, #8]
 8006292:	8979      	ldrh	r1, [r7, #10]
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	9301      	str	r3, [sp, #4]
 8006298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629a:	9300      	str	r3, [sp, #0]
 800629c:	4603      	mov	r3, r0
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 fab6 	bl	8006810 <I2C_RequestMemoryWrite>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d052      	beq.n	8006350 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e081      	b.n	80063b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f000 fd00 	bl	8006cb8 <I2C_WaitOnTXEFlagUntilTimeout>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00d      	beq.n	80062da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c2:	2b04      	cmp	r3, #4
 80062c4:	d107      	bne.n	80062d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e06b      	b.n	80063b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062de:	781a      	ldrb	r2, [r3, #0]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ea:	1c5a      	adds	r2, r3, #1
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f4:	3b01      	subs	r3, #1
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006300:	b29b      	uxth	r3, r3
 8006302:	3b01      	subs	r3, #1
 8006304:	b29a      	uxth	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	f003 0304 	and.w	r3, r3, #4
 8006314:	2b04      	cmp	r3, #4
 8006316:	d11b      	bne.n	8006350 <HAL_I2C_Mem_Write+0x180>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800631c:	2b00      	cmp	r3, #0
 800631e:	d017      	beq.n	8006350 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006324:	781a      	ldrb	r2, [r3, #0]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006330:	1c5a      	adds	r2, r3, #1
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800633a:	3b01      	subs	r3, #1
 800633c:	b29a      	uxth	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006346:	b29b      	uxth	r3, r3
 8006348:	3b01      	subs	r3, #1
 800634a:	b29a      	uxth	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1aa      	bne.n	80062ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f000 fcec 	bl	8006d3a <I2C_WaitOnBTFFlagUntilTimeout>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00d      	beq.n	8006384 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636c:	2b04      	cmp	r3, #4
 800636e:	d107      	bne.n	8006380 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800637e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e016      	b.n	80063b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006392:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2220      	movs	r2, #32
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80063ac:	2300      	movs	r3, #0
 80063ae:	e000      	b.n	80063b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80063b0:	2302      	movs	r3, #2
  }
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3718      	adds	r7, #24
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	00100002 	.word	0x00100002
 80063c0:	ffff0000 	.word	0xffff0000

080063c4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b08c      	sub	sp, #48	; 0x30
 80063c8:	af02      	add	r7, sp, #8
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	4608      	mov	r0, r1
 80063ce:	4611      	mov	r1, r2
 80063d0:	461a      	mov	r2, r3
 80063d2:	4603      	mov	r3, r0
 80063d4:	817b      	strh	r3, [r7, #10]
 80063d6:	460b      	mov	r3, r1
 80063d8:	813b      	strh	r3, [r7, #8]
 80063da:	4613      	mov	r3, r2
 80063dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80063de:	f7ff f9a7 	bl	8005730 <HAL_GetTick>
 80063e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b20      	cmp	r3, #32
 80063ee:	f040 8208 	bne.w	8006802 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	2319      	movs	r3, #25
 80063f8:	2201      	movs	r2, #1
 80063fa:	497b      	ldr	r1, [pc, #492]	; (80065e8 <HAL_I2C_Mem_Read+0x224>)
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 fb85 	bl	8006b0c <I2C_WaitOnFlagUntilTimeout>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006408:	2302      	movs	r3, #2
 800640a:	e1fb      	b.n	8006804 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006412:	2b01      	cmp	r3, #1
 8006414:	d101      	bne.n	800641a <HAL_I2C_Mem_Read+0x56>
 8006416:	2302      	movs	r3, #2
 8006418:	e1f4      	b.n	8006804 <HAL_I2C_Mem_Read+0x440>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	2b01      	cmp	r3, #1
 800642e:	d007      	beq.n	8006440 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f042 0201 	orr.w	r2, r2, #1
 800643e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800644e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2222      	movs	r2, #34	; 0x22
 8006454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2240      	movs	r2, #64	; 0x40
 800645c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800646a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006470:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006476:	b29a      	uxth	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	4a5b      	ldr	r2, [pc, #364]	; (80065ec <HAL_I2C_Mem_Read+0x228>)
 8006480:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006482:	88f8      	ldrh	r0, [r7, #6]
 8006484:	893a      	ldrh	r2, [r7, #8]
 8006486:	8979      	ldrh	r1, [r7, #10]
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	9301      	str	r3, [sp, #4]
 800648c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	4603      	mov	r3, r0
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f000 fa52 	bl	800693c <I2C_RequestMemoryRead>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d001      	beq.n	80064a2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e1b0      	b.n	8006804 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d113      	bne.n	80064d2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064aa:	2300      	movs	r3, #0
 80064ac:	623b      	str	r3, [r7, #32]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	695b      	ldr	r3, [r3, #20]
 80064b4:	623b      	str	r3, [r7, #32]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	623b      	str	r3, [r7, #32]
 80064be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064ce:	601a      	str	r2, [r3, #0]
 80064d0:	e184      	b.n	80067dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d11b      	bne.n	8006512 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064ea:	2300      	movs	r3, #0
 80064ec:	61fb      	str	r3, [r7, #28]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	61fb      	str	r3, [r7, #28]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	61fb      	str	r3, [r7, #28]
 80064fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800650e:	601a      	str	r2, [r3, #0]
 8006510:	e164      	b.n	80067dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006516:	2b02      	cmp	r3, #2
 8006518:	d11b      	bne.n	8006552 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006528:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006538:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800653a:	2300      	movs	r3, #0
 800653c:	61bb      	str	r3, [r7, #24]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	695b      	ldr	r3, [r3, #20]
 8006544:	61bb      	str	r3, [r7, #24]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	61bb      	str	r3, [r7, #24]
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	e144      	b.n	80067dc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006552:	2300      	movs	r3, #0
 8006554:	617b      	str	r3, [r7, #20]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	617b      	str	r3, [r7, #20]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	617b      	str	r3, [r7, #20]
 8006566:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006568:	e138      	b.n	80067dc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800656e:	2b03      	cmp	r3, #3
 8006570:	f200 80f1 	bhi.w	8006756 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006578:	2b01      	cmp	r3, #1
 800657a:	d123      	bne.n	80065c4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800657c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800657e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 fc1b 	bl	8006dbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e139      	b.n	8006804 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	691a      	ldr	r2, [r3, #16]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659a:	b2d2      	uxtb	r2, r2
 800659c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a2:	1c5a      	adds	r2, r3, #1
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ac:	3b01      	subs	r3, #1
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	3b01      	subs	r3, #1
 80065bc:	b29a      	uxth	r2, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80065c2:	e10b      	b.n	80067dc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d14e      	bne.n	800666a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	9300      	str	r3, [sp, #0]
 80065d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d2:	2200      	movs	r2, #0
 80065d4:	4906      	ldr	r1, [pc, #24]	; (80065f0 <HAL_I2C_Mem_Read+0x22c>)
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f000 fa98 	bl	8006b0c <I2C_WaitOnFlagUntilTimeout>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d008      	beq.n	80065f4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e10e      	b.n	8006804 <HAL_I2C_Mem_Read+0x440>
 80065e6:	bf00      	nop
 80065e8:	00100002 	.word	0x00100002
 80065ec:	ffff0000 	.word	0xffff0000
 80065f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006602:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	691a      	ldr	r2, [r3, #16]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660e:	b2d2      	uxtb	r2, r2
 8006610:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006616:	1c5a      	adds	r2, r3, #1
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006620:	3b01      	subs	r3, #1
 8006622:	b29a      	uxth	r2, r3
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800662c:	b29b      	uxth	r3, r3
 800662e:	3b01      	subs	r3, #1
 8006630:	b29a      	uxth	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	691a      	ldr	r2, [r3, #16]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006640:	b2d2      	uxtb	r2, r2
 8006642:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006648:	1c5a      	adds	r2, r3, #1
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006652:	3b01      	subs	r3, #1
 8006654:	b29a      	uxth	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800665e:	b29b      	uxth	r3, r3
 8006660:	3b01      	subs	r3, #1
 8006662:	b29a      	uxth	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006668:	e0b8      	b.n	80067dc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006670:	2200      	movs	r2, #0
 8006672:	4966      	ldr	r1, [pc, #408]	; (800680c <HAL_I2C_Mem_Read+0x448>)
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f000 fa49 	bl	8006b0c <I2C_WaitOnFlagUntilTimeout>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d001      	beq.n	8006684 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e0bf      	b.n	8006804 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006692:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	691a      	ldr	r2, [r3, #16]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669e:	b2d2      	uxtb	r2, r2
 80066a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a6:	1c5a      	adds	r2, r3, #1
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066b0:	3b01      	subs	r3, #1
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066bc:	b29b      	uxth	r3, r3
 80066be:	3b01      	subs	r3, #1
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c8:	9300      	str	r3, [sp, #0]
 80066ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066cc:	2200      	movs	r2, #0
 80066ce:	494f      	ldr	r1, [pc, #316]	; (800680c <HAL_I2C_Mem_Read+0x448>)
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	f000 fa1b 	bl	8006b0c <I2C_WaitOnFlagUntilTimeout>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d001      	beq.n	80066e0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e091      	b.n	8006804 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	691a      	ldr	r2, [r3, #16]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	b2d2      	uxtb	r2, r2
 80066fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006702:	1c5a      	adds	r2, r3, #1
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800670c:	3b01      	subs	r3, #1
 800670e:	b29a      	uxth	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006718:	b29b      	uxth	r3, r3
 800671a:	3b01      	subs	r3, #1
 800671c:	b29a      	uxth	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	691a      	ldr	r2, [r3, #16]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672c:	b2d2      	uxtb	r2, r2
 800672e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800673e:	3b01      	subs	r3, #1
 8006740:	b29a      	uxth	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800674a:	b29b      	uxth	r3, r3
 800674c:	3b01      	subs	r3, #1
 800674e:	b29a      	uxth	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006754:	e042      	b.n	80067dc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006758:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f000 fb2e 	bl	8006dbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d001      	beq.n	800676a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e04c      	b.n	8006804 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	691a      	ldr	r2, [r3, #16]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006774:	b2d2      	uxtb	r2, r2
 8006776:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677c:	1c5a      	adds	r2, r3, #1
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006786:	3b01      	subs	r3, #1
 8006788:	b29a      	uxth	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006792:	b29b      	uxth	r3, r3
 8006794:	3b01      	subs	r3, #1
 8006796:	b29a      	uxth	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	f003 0304 	and.w	r3, r3, #4
 80067a6:	2b04      	cmp	r3, #4
 80067a8:	d118      	bne.n	80067dc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	691a      	ldr	r2, [r3, #16]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b4:	b2d2      	uxtb	r2, r2
 80067b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067bc:	1c5a      	adds	r2, r3, #1
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067c6:	3b01      	subs	r3, #1
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	3b01      	subs	r3, #1
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f47f aec2 	bne.w	800656a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2220      	movs	r2, #32
 80067ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80067fe:	2300      	movs	r3, #0
 8006800:	e000      	b.n	8006804 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006802:	2302      	movs	r3, #2
  }
}
 8006804:	4618      	mov	r0, r3
 8006806:	3728      	adds	r7, #40	; 0x28
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	00010004 	.word	0x00010004

08006810 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b088      	sub	sp, #32
 8006814:	af02      	add	r7, sp, #8
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	4608      	mov	r0, r1
 800681a:	4611      	mov	r1, r2
 800681c:	461a      	mov	r2, r3
 800681e:	4603      	mov	r3, r0
 8006820:	817b      	strh	r3, [r7, #10]
 8006822:	460b      	mov	r3, r1
 8006824:	813b      	strh	r3, [r7, #8]
 8006826:	4613      	mov	r3, r2
 8006828:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006838:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	2200      	movs	r2, #0
 8006842:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f000 f960 	bl	8006b0c <I2C_WaitOnFlagUntilTimeout>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00d      	beq.n	800686e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800685c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006860:	d103      	bne.n	800686a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006868:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e05f      	b.n	800692e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800686e:	897b      	ldrh	r3, [r7, #10]
 8006870:	b2db      	uxtb	r3, r3
 8006872:	461a      	mov	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800687c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800687e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006880:	6a3a      	ldr	r2, [r7, #32]
 8006882:	492d      	ldr	r1, [pc, #180]	; (8006938 <I2C_RequestMemoryWrite+0x128>)
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f000 f998 	bl	8006bba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d001      	beq.n	8006894 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e04c      	b.n	800692e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006894:	2300      	movs	r3, #0
 8006896:	617b      	str	r3, [r7, #20]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	617b      	str	r3, [r7, #20]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	617b      	str	r3, [r7, #20]
 80068a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ac:	6a39      	ldr	r1, [r7, #32]
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f000 fa02 	bl	8006cb8 <I2C_WaitOnTXEFlagUntilTimeout>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00d      	beq.n	80068d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068be:	2b04      	cmp	r3, #4
 80068c0:	d107      	bne.n	80068d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e02b      	b.n	800692e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80068d6:	88fb      	ldrh	r3, [r7, #6]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d105      	bne.n	80068e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80068dc:	893b      	ldrh	r3, [r7, #8]
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	611a      	str	r2, [r3, #16]
 80068e6:	e021      	b.n	800692c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80068e8:	893b      	ldrh	r3, [r7, #8]
 80068ea:	0a1b      	lsrs	r3, r3, #8
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	b2da      	uxtb	r2, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068f8:	6a39      	ldr	r1, [r7, #32]
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f000 f9dc 	bl	8006cb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00d      	beq.n	8006922 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	2b04      	cmp	r3, #4
 800690c:	d107      	bne.n	800691e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800691c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e005      	b.n	800692e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006922:	893b      	ldrh	r3, [r7, #8]
 8006924:	b2da      	uxtb	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3718      	adds	r7, #24
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	00010002 	.word	0x00010002

0800693c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b088      	sub	sp, #32
 8006940:	af02      	add	r7, sp, #8
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	4608      	mov	r0, r1
 8006946:	4611      	mov	r1, r2
 8006948:	461a      	mov	r2, r3
 800694a:	4603      	mov	r3, r0
 800694c:	817b      	strh	r3, [r7, #10]
 800694e:	460b      	mov	r3, r1
 8006950:	813b      	strh	r3, [r7, #8]
 8006952:	4613      	mov	r3, r2
 8006954:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006964:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006974:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	6a3b      	ldr	r3, [r7, #32]
 800697c:	2200      	movs	r2, #0
 800697e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f000 f8c2 	bl	8006b0c <I2C_WaitOnFlagUntilTimeout>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00d      	beq.n	80069aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800699c:	d103      	bne.n	80069a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e0aa      	b.n	8006b00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80069aa:	897b      	ldrh	r3, [r7, #10]
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	461a      	mov	r2, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80069b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	6a3a      	ldr	r2, [r7, #32]
 80069be:	4952      	ldr	r1, [pc, #328]	; (8006b08 <I2C_RequestMemoryRead+0x1cc>)
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f000 f8fa 	bl	8006bba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d001      	beq.n	80069d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e097      	b.n	8006b00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069d0:	2300      	movs	r3, #0
 80069d2:	617b      	str	r3, [r7, #20]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	617b      	str	r3, [r7, #20]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	617b      	str	r3, [r7, #20]
 80069e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069e8:	6a39      	ldr	r1, [r7, #32]
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 f964 	bl	8006cb8 <I2C_WaitOnTXEFlagUntilTimeout>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00d      	beq.n	8006a12 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fa:	2b04      	cmp	r3, #4
 80069fc:	d107      	bne.n	8006a0e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e076      	b.n	8006b00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a12:	88fb      	ldrh	r3, [r7, #6]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d105      	bne.n	8006a24 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a18:	893b      	ldrh	r3, [r7, #8]
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	611a      	str	r2, [r3, #16]
 8006a22:	e021      	b.n	8006a68 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006a24:	893b      	ldrh	r3, [r7, #8]
 8006a26:	0a1b      	lsrs	r3, r3, #8
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	b2da      	uxtb	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a34:	6a39      	ldr	r1, [r7, #32]
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f000 f93e 	bl	8006cb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00d      	beq.n	8006a5e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a46:	2b04      	cmp	r3, #4
 8006a48:	d107      	bne.n	8006a5a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e050      	b.n	8006b00 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a5e:	893b      	ldrh	r3, [r7, #8]
 8006a60:	b2da      	uxtb	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a6a:	6a39      	ldr	r1, [r7, #32]
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f000 f923 	bl	8006cb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00d      	beq.n	8006a94 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7c:	2b04      	cmp	r3, #4
 8006a7e:	d107      	bne.n	8006a90 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a8e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e035      	b.n	8006b00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006aa2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	6a3b      	ldr	r3, [r7, #32]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 f82b 	bl	8006b0c <I2C_WaitOnFlagUntilTimeout>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00d      	beq.n	8006ad8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aca:	d103      	bne.n	8006ad4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ad2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e013      	b.n	8006b00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006ad8:	897b      	ldrh	r3, [r7, #10]
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	f043 0301 	orr.w	r3, r3, #1
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aea:	6a3a      	ldr	r2, [r7, #32]
 8006aec:	4906      	ldr	r1, [pc, #24]	; (8006b08 <I2C_RequestMemoryRead+0x1cc>)
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f000 f863 	bl	8006bba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d001      	beq.n	8006afe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e000      	b.n	8006b00 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3718      	adds	r7, #24
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	00010002 	.word	0x00010002

08006b0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	603b      	str	r3, [r7, #0]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b1c:	e025      	b.n	8006b6a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b24:	d021      	beq.n	8006b6a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b26:	f7fe fe03 	bl	8005730 <HAL_GetTick>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	683a      	ldr	r2, [r7, #0]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d302      	bcc.n	8006b3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d116      	bne.n	8006b6a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2220      	movs	r2, #32
 8006b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b56:	f043 0220 	orr.w	r2, r3, #32
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e023      	b.n	8006bb2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	0c1b      	lsrs	r3, r3, #16
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d10d      	bne.n	8006b90 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	43da      	mvns	r2, r3
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	4013      	ands	r3, r2
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	bf0c      	ite	eq
 8006b86:	2301      	moveq	r3, #1
 8006b88:	2300      	movne	r3, #0
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	e00c      	b.n	8006baa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	43da      	mvns	r2, r3
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	bf0c      	ite	eq
 8006ba2:	2301      	moveq	r3, #1
 8006ba4:	2300      	movne	r3, #0
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	461a      	mov	r2, r3
 8006baa:	79fb      	ldrb	r3, [r7, #7]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d0b6      	beq.n	8006b1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b084      	sub	sp, #16
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	60f8      	str	r0, [r7, #12]
 8006bc2:	60b9      	str	r1, [r7, #8]
 8006bc4:	607a      	str	r2, [r7, #4]
 8006bc6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006bc8:	e051      	b.n	8006c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	695b      	ldr	r3, [r3, #20]
 8006bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bd8:	d123      	bne.n	8006c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006be8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006bf2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2220      	movs	r2, #32
 8006bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0e:	f043 0204 	orr.w	r2, r3, #4
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e046      	b.n	8006cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c28:	d021      	beq.n	8006c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c2a:	f7fe fd81 	bl	8005730 <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d302      	bcc.n	8006c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d116      	bne.n	8006c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2220      	movs	r2, #32
 8006c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5a:	f043 0220 	orr.w	r2, r3, #32
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e020      	b.n	8006cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	0c1b      	lsrs	r3, r3, #16
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d10c      	bne.n	8006c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	43da      	mvns	r2, r3
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	4013      	ands	r3, r2
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	bf14      	ite	ne
 8006c8a:	2301      	movne	r3, #1
 8006c8c:	2300      	moveq	r3, #0
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	e00b      	b.n	8006caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	43da      	mvns	r2, r3
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	bf14      	ite	ne
 8006ca4:	2301      	movne	r3, #1
 8006ca6:	2300      	moveq	r3, #0
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d18d      	bne.n	8006bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006cc4:	e02d      	b.n	8006d22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f000 f8ce 	bl	8006e68 <I2C_IsAcknowledgeFailed>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d001      	beq.n	8006cd6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e02d      	b.n	8006d32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cdc:	d021      	beq.n	8006d22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cde:	f7fe fd27 	bl	8005730 <HAL_GetTick>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d302      	bcc.n	8006cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d116      	bne.n	8006d22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2220      	movs	r2, #32
 8006cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0e:	f043 0220 	orr.w	r2, r3, #32
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e007      	b.n	8006d32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d2c:	2b80      	cmp	r3, #128	; 0x80
 8006d2e:	d1ca      	bne.n	8006cc6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b084      	sub	sp, #16
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	60f8      	str	r0, [r7, #12]
 8006d42:	60b9      	str	r1, [r7, #8]
 8006d44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d46:	e02d      	b.n	8006da4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f000 f88d 	bl	8006e68 <I2C_IsAcknowledgeFailed>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d001      	beq.n	8006d58 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e02d      	b.n	8006db4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d5e:	d021      	beq.n	8006da4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d60:	f7fe fce6 	bl	8005730 <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d302      	bcc.n	8006d76 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d116      	bne.n	8006da4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2220      	movs	r2, #32
 8006d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d90:	f043 0220 	orr.w	r2, r3, #32
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e007      	b.n	8006db4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	f003 0304 	and.w	r3, r3, #4
 8006dae:	2b04      	cmp	r3, #4
 8006db0:	d1ca      	bne.n	8006d48 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006dc8:	e042      	b.n	8006e50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	695b      	ldr	r3, [r3, #20]
 8006dd0:	f003 0310 	and.w	r3, r3, #16
 8006dd4:	2b10      	cmp	r3, #16
 8006dd6:	d119      	bne.n	8006e0c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f06f 0210 	mvn.w	r2, #16
 8006de0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2220      	movs	r2, #32
 8006dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e029      	b.n	8006e60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e0c:	f7fe fc90 	bl	8005730 <HAL_GetTick>
 8006e10:	4602      	mov	r2, r0
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d302      	bcc.n	8006e22 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d116      	bne.n	8006e50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3c:	f043 0220 	orr.w	r2, r3, #32
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e007      	b.n	8006e60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	695b      	ldr	r3, [r3, #20]
 8006e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e5a:	2b40      	cmp	r3, #64	; 0x40
 8006e5c:	d1b5      	bne.n	8006dca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	695b      	ldr	r3, [r3, #20]
 8006e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e7e:	d11b      	bne.n	8006eb8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2220      	movs	r2, #32
 8006e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea4:	f043 0204 	orr.w	r2, r3, #4
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e000      	b.n	8006eba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
	...

08006ec8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b086      	sub	sp, #24
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d101      	bne.n	8006eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e264      	b.n	80073a4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d075      	beq.n	8006fd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ee6:	4ba3      	ldr	r3, [pc, #652]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	f003 030c 	and.w	r3, r3, #12
 8006eee:	2b04      	cmp	r3, #4
 8006ef0:	d00c      	beq.n	8006f0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ef2:	4ba0      	ldr	r3, [pc, #640]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006efa:	2b08      	cmp	r3, #8
 8006efc:	d112      	bne.n	8006f24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006efe:	4b9d      	ldr	r3, [pc, #628]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f0a:	d10b      	bne.n	8006f24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f0c:	4b99      	ldr	r3, [pc, #612]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d05b      	beq.n	8006fd0 <HAL_RCC_OscConfig+0x108>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d157      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e23f      	b.n	80073a4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f2c:	d106      	bne.n	8006f3c <HAL_RCC_OscConfig+0x74>
 8006f2e:	4b91      	ldr	r3, [pc, #580]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a90      	ldr	r2, [pc, #576]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f38:	6013      	str	r3, [r2, #0]
 8006f3a:	e01d      	b.n	8006f78 <HAL_RCC_OscConfig+0xb0>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f44:	d10c      	bne.n	8006f60 <HAL_RCC_OscConfig+0x98>
 8006f46:	4b8b      	ldr	r3, [pc, #556]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a8a      	ldr	r2, [pc, #552]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f50:	6013      	str	r3, [r2, #0]
 8006f52:	4b88      	ldr	r3, [pc, #544]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a87      	ldr	r2, [pc, #540]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f5c:	6013      	str	r3, [r2, #0]
 8006f5e:	e00b      	b.n	8006f78 <HAL_RCC_OscConfig+0xb0>
 8006f60:	4b84      	ldr	r3, [pc, #528]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a83      	ldr	r2, [pc, #524]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f6a:	6013      	str	r3, [r2, #0]
 8006f6c:	4b81      	ldr	r3, [pc, #516]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a80      	ldr	r2, [pc, #512]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d013      	beq.n	8006fa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f80:	f7fe fbd6 	bl	8005730 <HAL_GetTick>
 8006f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f86:	e008      	b.n	8006f9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f88:	f7fe fbd2 	bl	8005730 <HAL_GetTick>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	2b64      	cmp	r3, #100	; 0x64
 8006f94:	d901      	bls.n	8006f9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e204      	b.n	80073a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f9a:	4b76      	ldr	r3, [pc, #472]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d0f0      	beq.n	8006f88 <HAL_RCC_OscConfig+0xc0>
 8006fa6:	e014      	b.n	8006fd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fa8:	f7fe fbc2 	bl	8005730 <HAL_GetTick>
 8006fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fae:	e008      	b.n	8006fc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006fb0:	f7fe fbbe 	bl	8005730 <HAL_GetTick>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	2b64      	cmp	r3, #100	; 0x64
 8006fbc:	d901      	bls.n	8006fc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e1f0      	b.n	80073a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fc2:	4b6c      	ldr	r3, [pc, #432]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1f0      	bne.n	8006fb0 <HAL_RCC_OscConfig+0xe8>
 8006fce:	e000      	b.n	8006fd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f003 0302 	and.w	r3, r3, #2
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d063      	beq.n	80070a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006fde:	4b65      	ldr	r3, [pc, #404]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f003 030c 	and.w	r3, r3, #12
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00b      	beq.n	8007002 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006fea:	4b62      	ldr	r3, [pc, #392]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ff2:	2b08      	cmp	r3, #8
 8006ff4:	d11c      	bne.n	8007030 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ff6:	4b5f      	ldr	r3, [pc, #380]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d116      	bne.n	8007030 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007002:	4b5c      	ldr	r3, [pc, #368]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0302 	and.w	r3, r3, #2
 800700a:	2b00      	cmp	r3, #0
 800700c:	d005      	beq.n	800701a <HAL_RCC_OscConfig+0x152>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	2b01      	cmp	r3, #1
 8007014:	d001      	beq.n	800701a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e1c4      	b.n	80073a4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800701a:	4b56      	ldr	r3, [pc, #344]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	00db      	lsls	r3, r3, #3
 8007028:	4952      	ldr	r1, [pc, #328]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 800702a:	4313      	orrs	r3, r2
 800702c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800702e:	e03a      	b.n	80070a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d020      	beq.n	800707a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007038:	4b4f      	ldr	r3, [pc, #316]	; (8007178 <HAL_RCC_OscConfig+0x2b0>)
 800703a:	2201      	movs	r2, #1
 800703c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800703e:	f7fe fb77 	bl	8005730 <HAL_GetTick>
 8007042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007044:	e008      	b.n	8007058 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007046:	f7fe fb73 	bl	8005730 <HAL_GetTick>
 800704a:	4602      	mov	r2, r0
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	2b02      	cmp	r3, #2
 8007052:	d901      	bls.n	8007058 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e1a5      	b.n	80073a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007058:	4b46      	ldr	r3, [pc, #280]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 0302 	and.w	r3, r3, #2
 8007060:	2b00      	cmp	r3, #0
 8007062:	d0f0      	beq.n	8007046 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007064:	4b43      	ldr	r3, [pc, #268]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	00db      	lsls	r3, r3, #3
 8007072:	4940      	ldr	r1, [pc, #256]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8007074:	4313      	orrs	r3, r2
 8007076:	600b      	str	r3, [r1, #0]
 8007078:	e015      	b.n	80070a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800707a:	4b3f      	ldr	r3, [pc, #252]	; (8007178 <HAL_RCC_OscConfig+0x2b0>)
 800707c:	2200      	movs	r2, #0
 800707e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007080:	f7fe fb56 	bl	8005730 <HAL_GetTick>
 8007084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007086:	e008      	b.n	800709a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007088:	f7fe fb52 	bl	8005730 <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	2b02      	cmp	r3, #2
 8007094:	d901      	bls.n	800709a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e184      	b.n	80073a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800709a:	4b36      	ldr	r3, [pc, #216]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0302 	and.w	r3, r3, #2
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1f0      	bne.n	8007088 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 0308 	and.w	r3, r3, #8
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d030      	beq.n	8007114 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d016      	beq.n	80070e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070ba:	4b30      	ldr	r3, [pc, #192]	; (800717c <HAL_RCC_OscConfig+0x2b4>)
 80070bc:	2201      	movs	r2, #1
 80070be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070c0:	f7fe fb36 	bl	8005730 <HAL_GetTick>
 80070c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070c6:	e008      	b.n	80070da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070c8:	f7fe fb32 	bl	8005730 <HAL_GetTick>
 80070cc:	4602      	mov	r2, r0
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d901      	bls.n	80070da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e164      	b.n	80073a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070da:	4b26      	ldr	r3, [pc, #152]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 80070dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070de:	f003 0302 	and.w	r3, r3, #2
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d0f0      	beq.n	80070c8 <HAL_RCC_OscConfig+0x200>
 80070e6:	e015      	b.n	8007114 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070e8:	4b24      	ldr	r3, [pc, #144]	; (800717c <HAL_RCC_OscConfig+0x2b4>)
 80070ea:	2200      	movs	r2, #0
 80070ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070ee:	f7fe fb1f 	bl	8005730 <HAL_GetTick>
 80070f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070f4:	e008      	b.n	8007108 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070f6:	f7fe fb1b 	bl	8005730 <HAL_GetTick>
 80070fa:	4602      	mov	r2, r0
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	2b02      	cmp	r3, #2
 8007102:	d901      	bls.n	8007108 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	e14d      	b.n	80073a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007108:	4b1a      	ldr	r3, [pc, #104]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 800710a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800710c:	f003 0302 	and.w	r3, r3, #2
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1f0      	bne.n	80070f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 0304 	and.w	r3, r3, #4
 800711c:	2b00      	cmp	r3, #0
 800711e:	f000 80a0 	beq.w	8007262 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007122:	2300      	movs	r3, #0
 8007124:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007126:	4b13      	ldr	r3, [pc, #76]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8007128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10f      	bne.n	8007152 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007132:	2300      	movs	r3, #0
 8007134:	60bb      	str	r3, [r7, #8]
 8007136:	4b0f      	ldr	r3, [pc, #60]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8007138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713a:	4a0e      	ldr	r2, [pc, #56]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 800713c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007140:	6413      	str	r3, [r2, #64]	; 0x40
 8007142:	4b0c      	ldr	r3, [pc, #48]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8007144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800714a:	60bb      	str	r3, [r7, #8]
 800714c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800714e:	2301      	movs	r3, #1
 8007150:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007152:	4b0b      	ldr	r3, [pc, #44]	; (8007180 <HAL_RCC_OscConfig+0x2b8>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800715a:	2b00      	cmp	r3, #0
 800715c:	d121      	bne.n	80071a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800715e:	4b08      	ldr	r3, [pc, #32]	; (8007180 <HAL_RCC_OscConfig+0x2b8>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a07      	ldr	r2, [pc, #28]	; (8007180 <HAL_RCC_OscConfig+0x2b8>)
 8007164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007168:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800716a:	f7fe fae1 	bl	8005730 <HAL_GetTick>
 800716e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007170:	e011      	b.n	8007196 <HAL_RCC_OscConfig+0x2ce>
 8007172:	bf00      	nop
 8007174:	40023800 	.word	0x40023800
 8007178:	42470000 	.word	0x42470000
 800717c:	42470e80 	.word	0x42470e80
 8007180:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007184:	f7fe fad4 	bl	8005730 <HAL_GetTick>
 8007188:	4602      	mov	r2, r0
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	2b02      	cmp	r3, #2
 8007190:	d901      	bls.n	8007196 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007192:	2303      	movs	r3, #3
 8007194:	e106      	b.n	80073a4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007196:	4b85      	ldr	r3, [pc, #532]	; (80073ac <HAL_RCC_OscConfig+0x4e4>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d0f0      	beq.n	8007184 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d106      	bne.n	80071b8 <HAL_RCC_OscConfig+0x2f0>
 80071aa:	4b81      	ldr	r3, [pc, #516]	; (80073b0 <HAL_RCC_OscConfig+0x4e8>)
 80071ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ae:	4a80      	ldr	r2, [pc, #512]	; (80073b0 <HAL_RCC_OscConfig+0x4e8>)
 80071b0:	f043 0301 	orr.w	r3, r3, #1
 80071b4:	6713      	str	r3, [r2, #112]	; 0x70
 80071b6:	e01c      	b.n	80071f2 <HAL_RCC_OscConfig+0x32a>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	2b05      	cmp	r3, #5
 80071be:	d10c      	bne.n	80071da <HAL_RCC_OscConfig+0x312>
 80071c0:	4b7b      	ldr	r3, [pc, #492]	; (80073b0 <HAL_RCC_OscConfig+0x4e8>)
 80071c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c4:	4a7a      	ldr	r2, [pc, #488]	; (80073b0 <HAL_RCC_OscConfig+0x4e8>)
 80071c6:	f043 0304 	orr.w	r3, r3, #4
 80071ca:	6713      	str	r3, [r2, #112]	; 0x70
 80071cc:	4b78      	ldr	r3, [pc, #480]	; (80073b0 <HAL_RCC_OscConfig+0x4e8>)
 80071ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071d0:	4a77      	ldr	r2, [pc, #476]	; (80073b0 <HAL_RCC_OscConfig+0x4e8>)
 80071d2:	f043 0301 	orr.w	r3, r3, #1
 80071d6:	6713      	str	r3, [r2, #112]	; 0x70
 80071d8:	e00b      	b.n	80071f2 <HAL_RCC_OscConfig+0x32a>
 80071da:	4b75      	ldr	r3, [pc, #468]	; (80073b0 <HAL_RCC_OscConfig+0x4e8>)
 80071dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071de:	4a74      	ldr	r2, [pc, #464]	; (80073b0 <HAL_RCC_OscConfig+0x4e8>)
 80071e0:	f023 0301 	bic.w	r3, r3, #1
 80071e4:	6713      	str	r3, [r2, #112]	; 0x70
 80071e6:	4b72      	ldr	r3, [pc, #456]	; (80073b0 <HAL_RCC_OscConfig+0x4e8>)
 80071e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ea:	4a71      	ldr	r2, [pc, #452]	; (80073b0 <HAL_RCC_OscConfig+0x4e8>)
 80071ec:	f023 0304 	bic.w	r3, r3, #4
 80071f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d015      	beq.n	8007226 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071fa:	f7fe fa99 	bl	8005730 <HAL_GetTick>
 80071fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007200:	e00a      	b.n	8007218 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007202:	f7fe fa95 	bl	8005730 <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007210:	4293      	cmp	r3, r2
 8007212:	d901      	bls.n	8007218 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007214:	2303      	movs	r3, #3
 8007216:	e0c5      	b.n	80073a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007218:	4b65      	ldr	r3, [pc, #404]	; (80073b0 <HAL_RCC_OscConfig+0x4e8>)
 800721a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800721c:	f003 0302 	and.w	r3, r3, #2
 8007220:	2b00      	cmp	r3, #0
 8007222:	d0ee      	beq.n	8007202 <HAL_RCC_OscConfig+0x33a>
 8007224:	e014      	b.n	8007250 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007226:	f7fe fa83 	bl	8005730 <HAL_GetTick>
 800722a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800722c:	e00a      	b.n	8007244 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800722e:	f7fe fa7f 	bl	8005730 <HAL_GetTick>
 8007232:	4602      	mov	r2, r0
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	f241 3288 	movw	r2, #5000	; 0x1388
 800723c:	4293      	cmp	r3, r2
 800723e:	d901      	bls.n	8007244 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	e0af      	b.n	80073a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007244:	4b5a      	ldr	r3, [pc, #360]	; (80073b0 <HAL_RCC_OscConfig+0x4e8>)
 8007246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007248:	f003 0302 	and.w	r3, r3, #2
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1ee      	bne.n	800722e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007250:	7dfb      	ldrb	r3, [r7, #23]
 8007252:	2b01      	cmp	r3, #1
 8007254:	d105      	bne.n	8007262 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007256:	4b56      	ldr	r3, [pc, #344]	; (80073b0 <HAL_RCC_OscConfig+0x4e8>)
 8007258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725a:	4a55      	ldr	r2, [pc, #340]	; (80073b0 <HAL_RCC_OscConfig+0x4e8>)
 800725c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007260:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	2b00      	cmp	r3, #0
 8007268:	f000 809b 	beq.w	80073a2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800726c:	4b50      	ldr	r3, [pc, #320]	; (80073b0 <HAL_RCC_OscConfig+0x4e8>)
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	f003 030c 	and.w	r3, r3, #12
 8007274:	2b08      	cmp	r3, #8
 8007276:	d05c      	beq.n	8007332 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	2b02      	cmp	r3, #2
 800727e:	d141      	bne.n	8007304 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007280:	4b4c      	ldr	r3, [pc, #304]	; (80073b4 <HAL_RCC_OscConfig+0x4ec>)
 8007282:	2200      	movs	r2, #0
 8007284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007286:	f7fe fa53 	bl	8005730 <HAL_GetTick>
 800728a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800728c:	e008      	b.n	80072a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800728e:	f7fe fa4f 	bl	8005730 <HAL_GetTick>
 8007292:	4602      	mov	r2, r0
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	2b02      	cmp	r3, #2
 800729a:	d901      	bls.n	80072a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e081      	b.n	80073a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072a0:	4b43      	ldr	r3, [pc, #268]	; (80073b0 <HAL_RCC_OscConfig+0x4e8>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d1f0      	bne.n	800728e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	69da      	ldr	r2, [r3, #28]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6a1b      	ldr	r3, [r3, #32]
 80072b4:	431a      	orrs	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ba:	019b      	lsls	r3, r3, #6
 80072bc:	431a      	orrs	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c2:	085b      	lsrs	r3, r3, #1
 80072c4:	3b01      	subs	r3, #1
 80072c6:	041b      	lsls	r3, r3, #16
 80072c8:	431a      	orrs	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ce:	061b      	lsls	r3, r3, #24
 80072d0:	4937      	ldr	r1, [pc, #220]	; (80073b0 <HAL_RCC_OscConfig+0x4e8>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072d6:	4b37      	ldr	r3, [pc, #220]	; (80073b4 <HAL_RCC_OscConfig+0x4ec>)
 80072d8:	2201      	movs	r2, #1
 80072da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072dc:	f7fe fa28 	bl	8005730 <HAL_GetTick>
 80072e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072e2:	e008      	b.n	80072f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072e4:	f7fe fa24 	bl	8005730 <HAL_GetTick>
 80072e8:	4602      	mov	r2, r0
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d901      	bls.n	80072f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e056      	b.n	80073a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072f6:	4b2e      	ldr	r3, [pc, #184]	; (80073b0 <HAL_RCC_OscConfig+0x4e8>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d0f0      	beq.n	80072e4 <HAL_RCC_OscConfig+0x41c>
 8007302:	e04e      	b.n	80073a2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007304:	4b2b      	ldr	r3, [pc, #172]	; (80073b4 <HAL_RCC_OscConfig+0x4ec>)
 8007306:	2200      	movs	r2, #0
 8007308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800730a:	f7fe fa11 	bl	8005730 <HAL_GetTick>
 800730e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007310:	e008      	b.n	8007324 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007312:	f7fe fa0d 	bl	8005730 <HAL_GetTick>
 8007316:	4602      	mov	r2, r0
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	2b02      	cmp	r3, #2
 800731e:	d901      	bls.n	8007324 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	e03f      	b.n	80073a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007324:	4b22      	ldr	r3, [pc, #136]	; (80073b0 <HAL_RCC_OscConfig+0x4e8>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1f0      	bne.n	8007312 <HAL_RCC_OscConfig+0x44a>
 8007330:	e037      	b.n	80073a2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d101      	bne.n	800733e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e032      	b.n	80073a4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800733e:	4b1c      	ldr	r3, [pc, #112]	; (80073b0 <HAL_RCC_OscConfig+0x4e8>)
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	699b      	ldr	r3, [r3, #24]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d028      	beq.n	800739e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007356:	429a      	cmp	r2, r3
 8007358:	d121      	bne.n	800739e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007364:	429a      	cmp	r2, r3
 8007366:	d11a      	bne.n	800739e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800736e:	4013      	ands	r3, r2
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007374:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007376:	4293      	cmp	r3, r2
 8007378:	d111      	bne.n	800739e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007384:	085b      	lsrs	r3, r3, #1
 8007386:	3b01      	subs	r3, #1
 8007388:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800738a:	429a      	cmp	r2, r3
 800738c:	d107      	bne.n	800739e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007398:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800739a:	429a      	cmp	r2, r3
 800739c:	d001      	beq.n	80073a2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e000      	b.n	80073a4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3718      	adds	r7, #24
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	40007000 	.word	0x40007000
 80073b0:	40023800 	.word	0x40023800
 80073b4:	42470060 	.word	0x42470060

080073b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d101      	bne.n	80073cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e0cc      	b.n	8007566 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80073cc:	4b68      	ldr	r3, [pc, #416]	; (8007570 <HAL_RCC_ClockConfig+0x1b8>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0307 	and.w	r3, r3, #7
 80073d4:	683a      	ldr	r2, [r7, #0]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d90c      	bls.n	80073f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073da:	4b65      	ldr	r3, [pc, #404]	; (8007570 <HAL_RCC_ClockConfig+0x1b8>)
 80073dc:	683a      	ldr	r2, [r7, #0]
 80073de:	b2d2      	uxtb	r2, r2
 80073e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80073e2:	4b63      	ldr	r3, [pc, #396]	; (8007570 <HAL_RCC_ClockConfig+0x1b8>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 0307 	and.w	r3, r3, #7
 80073ea:	683a      	ldr	r2, [r7, #0]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d001      	beq.n	80073f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e0b8      	b.n	8007566 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0302 	and.w	r3, r3, #2
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d020      	beq.n	8007442 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 0304 	and.w	r3, r3, #4
 8007408:	2b00      	cmp	r3, #0
 800740a:	d005      	beq.n	8007418 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800740c:	4b59      	ldr	r3, [pc, #356]	; (8007574 <HAL_RCC_ClockConfig+0x1bc>)
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	4a58      	ldr	r2, [pc, #352]	; (8007574 <HAL_RCC_ClockConfig+0x1bc>)
 8007412:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007416:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 0308 	and.w	r3, r3, #8
 8007420:	2b00      	cmp	r3, #0
 8007422:	d005      	beq.n	8007430 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007424:	4b53      	ldr	r3, [pc, #332]	; (8007574 <HAL_RCC_ClockConfig+0x1bc>)
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	4a52      	ldr	r2, [pc, #328]	; (8007574 <HAL_RCC_ClockConfig+0x1bc>)
 800742a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800742e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007430:	4b50      	ldr	r3, [pc, #320]	; (8007574 <HAL_RCC_ClockConfig+0x1bc>)
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	494d      	ldr	r1, [pc, #308]	; (8007574 <HAL_RCC_ClockConfig+0x1bc>)
 800743e:	4313      	orrs	r3, r2
 8007440:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	2b00      	cmp	r3, #0
 800744c:	d044      	beq.n	80074d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d107      	bne.n	8007466 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007456:	4b47      	ldr	r3, [pc, #284]	; (8007574 <HAL_RCC_ClockConfig+0x1bc>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d119      	bne.n	8007496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e07f      	b.n	8007566 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	2b02      	cmp	r3, #2
 800746c:	d003      	beq.n	8007476 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007472:	2b03      	cmp	r3, #3
 8007474:	d107      	bne.n	8007486 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007476:	4b3f      	ldr	r3, [pc, #252]	; (8007574 <HAL_RCC_ClockConfig+0x1bc>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d109      	bne.n	8007496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	e06f      	b.n	8007566 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007486:	4b3b      	ldr	r3, [pc, #236]	; (8007574 <HAL_RCC_ClockConfig+0x1bc>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 0302 	and.w	r3, r3, #2
 800748e:	2b00      	cmp	r3, #0
 8007490:	d101      	bne.n	8007496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e067      	b.n	8007566 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007496:	4b37      	ldr	r3, [pc, #220]	; (8007574 <HAL_RCC_ClockConfig+0x1bc>)
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f023 0203 	bic.w	r2, r3, #3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	4934      	ldr	r1, [pc, #208]	; (8007574 <HAL_RCC_ClockConfig+0x1bc>)
 80074a4:	4313      	orrs	r3, r2
 80074a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80074a8:	f7fe f942 	bl	8005730 <HAL_GetTick>
 80074ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074ae:	e00a      	b.n	80074c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074b0:	f7fe f93e 	bl	8005730 <HAL_GetTick>
 80074b4:	4602      	mov	r2, r0
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	1ad3      	subs	r3, r2, r3
 80074ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80074be:	4293      	cmp	r3, r2
 80074c0:	d901      	bls.n	80074c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e04f      	b.n	8007566 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074c6:	4b2b      	ldr	r3, [pc, #172]	; (8007574 <HAL_RCC_ClockConfig+0x1bc>)
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	f003 020c 	and.w	r2, r3, #12
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d1eb      	bne.n	80074b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80074d8:	4b25      	ldr	r3, [pc, #148]	; (8007570 <HAL_RCC_ClockConfig+0x1b8>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 0307 	and.w	r3, r3, #7
 80074e0:	683a      	ldr	r2, [r7, #0]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d20c      	bcs.n	8007500 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074e6:	4b22      	ldr	r3, [pc, #136]	; (8007570 <HAL_RCC_ClockConfig+0x1b8>)
 80074e8:	683a      	ldr	r2, [r7, #0]
 80074ea:	b2d2      	uxtb	r2, r2
 80074ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074ee:	4b20      	ldr	r3, [pc, #128]	; (8007570 <HAL_RCC_ClockConfig+0x1b8>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0307 	and.w	r3, r3, #7
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d001      	beq.n	8007500 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e032      	b.n	8007566 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 0304 	and.w	r3, r3, #4
 8007508:	2b00      	cmp	r3, #0
 800750a:	d008      	beq.n	800751e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800750c:	4b19      	ldr	r3, [pc, #100]	; (8007574 <HAL_RCC_ClockConfig+0x1bc>)
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	4916      	ldr	r1, [pc, #88]	; (8007574 <HAL_RCC_ClockConfig+0x1bc>)
 800751a:	4313      	orrs	r3, r2
 800751c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 0308 	and.w	r3, r3, #8
 8007526:	2b00      	cmp	r3, #0
 8007528:	d009      	beq.n	800753e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800752a:	4b12      	ldr	r3, [pc, #72]	; (8007574 <HAL_RCC_ClockConfig+0x1bc>)
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	00db      	lsls	r3, r3, #3
 8007538:	490e      	ldr	r1, [pc, #56]	; (8007574 <HAL_RCC_ClockConfig+0x1bc>)
 800753a:	4313      	orrs	r3, r2
 800753c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800753e:	f000 f821 	bl	8007584 <HAL_RCC_GetSysClockFreq>
 8007542:	4602      	mov	r2, r0
 8007544:	4b0b      	ldr	r3, [pc, #44]	; (8007574 <HAL_RCC_ClockConfig+0x1bc>)
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	091b      	lsrs	r3, r3, #4
 800754a:	f003 030f 	and.w	r3, r3, #15
 800754e:	490a      	ldr	r1, [pc, #40]	; (8007578 <HAL_RCC_ClockConfig+0x1c0>)
 8007550:	5ccb      	ldrb	r3, [r1, r3]
 8007552:	fa22 f303 	lsr.w	r3, r2, r3
 8007556:	4a09      	ldr	r2, [pc, #36]	; (800757c <HAL_RCC_ClockConfig+0x1c4>)
 8007558:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800755a:	4b09      	ldr	r3, [pc, #36]	; (8007580 <HAL_RCC_ClockConfig+0x1c8>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4618      	mov	r0, r3
 8007560:	f7fe f8a2 	bl	80056a8 <HAL_InitTick>

  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	40023c00 	.word	0x40023c00
 8007574:	40023800 	.word	0x40023800
 8007578:	08014b74 	.word	0x08014b74
 800757c:	20000004 	.word	0x20000004
 8007580:	20000050 	.word	0x20000050

08007584 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007584:	b5b0      	push	{r4, r5, r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800758a:	2100      	movs	r1, #0
 800758c:	6079      	str	r1, [r7, #4]
 800758e:	2100      	movs	r1, #0
 8007590:	60f9      	str	r1, [r7, #12]
 8007592:	2100      	movs	r1, #0
 8007594:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007596:	2100      	movs	r1, #0
 8007598:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800759a:	4952      	ldr	r1, [pc, #328]	; (80076e4 <HAL_RCC_GetSysClockFreq+0x160>)
 800759c:	6889      	ldr	r1, [r1, #8]
 800759e:	f001 010c 	and.w	r1, r1, #12
 80075a2:	2908      	cmp	r1, #8
 80075a4:	d00d      	beq.n	80075c2 <HAL_RCC_GetSysClockFreq+0x3e>
 80075a6:	2908      	cmp	r1, #8
 80075a8:	f200 8094 	bhi.w	80076d4 <HAL_RCC_GetSysClockFreq+0x150>
 80075ac:	2900      	cmp	r1, #0
 80075ae:	d002      	beq.n	80075b6 <HAL_RCC_GetSysClockFreq+0x32>
 80075b0:	2904      	cmp	r1, #4
 80075b2:	d003      	beq.n	80075bc <HAL_RCC_GetSysClockFreq+0x38>
 80075b4:	e08e      	b.n	80076d4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80075b6:	4b4c      	ldr	r3, [pc, #304]	; (80076e8 <HAL_RCC_GetSysClockFreq+0x164>)
 80075b8:	60bb      	str	r3, [r7, #8]
       break;
 80075ba:	e08e      	b.n	80076da <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80075bc:	4b4b      	ldr	r3, [pc, #300]	; (80076ec <HAL_RCC_GetSysClockFreq+0x168>)
 80075be:	60bb      	str	r3, [r7, #8]
      break;
 80075c0:	e08b      	b.n	80076da <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80075c2:	4948      	ldr	r1, [pc, #288]	; (80076e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80075c4:	6849      	ldr	r1, [r1, #4]
 80075c6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80075ca:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80075cc:	4945      	ldr	r1, [pc, #276]	; (80076e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80075ce:	6849      	ldr	r1, [r1, #4]
 80075d0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80075d4:	2900      	cmp	r1, #0
 80075d6:	d024      	beq.n	8007622 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075d8:	4942      	ldr	r1, [pc, #264]	; (80076e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80075da:	6849      	ldr	r1, [r1, #4]
 80075dc:	0989      	lsrs	r1, r1, #6
 80075de:	4608      	mov	r0, r1
 80075e0:	f04f 0100 	mov.w	r1, #0
 80075e4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80075e8:	f04f 0500 	mov.w	r5, #0
 80075ec:	ea00 0204 	and.w	r2, r0, r4
 80075f0:	ea01 0305 	and.w	r3, r1, r5
 80075f4:	493d      	ldr	r1, [pc, #244]	; (80076ec <HAL_RCC_GetSysClockFreq+0x168>)
 80075f6:	fb01 f003 	mul.w	r0, r1, r3
 80075fa:	2100      	movs	r1, #0
 80075fc:	fb01 f102 	mul.w	r1, r1, r2
 8007600:	1844      	adds	r4, r0, r1
 8007602:	493a      	ldr	r1, [pc, #232]	; (80076ec <HAL_RCC_GetSysClockFreq+0x168>)
 8007604:	fba2 0101 	umull	r0, r1, r2, r1
 8007608:	1863      	adds	r3, r4, r1
 800760a:	4619      	mov	r1, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	461a      	mov	r2, r3
 8007610:	f04f 0300 	mov.w	r3, #0
 8007614:	f7f9 fb50 	bl	8000cb8 <__aeabi_uldivmod>
 8007618:	4602      	mov	r2, r0
 800761a:	460b      	mov	r3, r1
 800761c:	4613      	mov	r3, r2
 800761e:	60fb      	str	r3, [r7, #12]
 8007620:	e04a      	b.n	80076b8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007622:	4b30      	ldr	r3, [pc, #192]	; (80076e4 <HAL_RCC_GetSysClockFreq+0x160>)
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	099b      	lsrs	r3, r3, #6
 8007628:	461a      	mov	r2, r3
 800762a:	f04f 0300 	mov.w	r3, #0
 800762e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007632:	f04f 0100 	mov.w	r1, #0
 8007636:	ea02 0400 	and.w	r4, r2, r0
 800763a:	ea03 0501 	and.w	r5, r3, r1
 800763e:	4620      	mov	r0, r4
 8007640:	4629      	mov	r1, r5
 8007642:	f04f 0200 	mov.w	r2, #0
 8007646:	f04f 0300 	mov.w	r3, #0
 800764a:	014b      	lsls	r3, r1, #5
 800764c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007650:	0142      	lsls	r2, r0, #5
 8007652:	4610      	mov	r0, r2
 8007654:	4619      	mov	r1, r3
 8007656:	1b00      	subs	r0, r0, r4
 8007658:	eb61 0105 	sbc.w	r1, r1, r5
 800765c:	f04f 0200 	mov.w	r2, #0
 8007660:	f04f 0300 	mov.w	r3, #0
 8007664:	018b      	lsls	r3, r1, #6
 8007666:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800766a:	0182      	lsls	r2, r0, #6
 800766c:	1a12      	subs	r2, r2, r0
 800766e:	eb63 0301 	sbc.w	r3, r3, r1
 8007672:	f04f 0000 	mov.w	r0, #0
 8007676:	f04f 0100 	mov.w	r1, #0
 800767a:	00d9      	lsls	r1, r3, #3
 800767c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007680:	00d0      	lsls	r0, r2, #3
 8007682:	4602      	mov	r2, r0
 8007684:	460b      	mov	r3, r1
 8007686:	1912      	adds	r2, r2, r4
 8007688:	eb45 0303 	adc.w	r3, r5, r3
 800768c:	f04f 0000 	mov.w	r0, #0
 8007690:	f04f 0100 	mov.w	r1, #0
 8007694:	0299      	lsls	r1, r3, #10
 8007696:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800769a:	0290      	lsls	r0, r2, #10
 800769c:	4602      	mov	r2, r0
 800769e:	460b      	mov	r3, r1
 80076a0:	4610      	mov	r0, r2
 80076a2:	4619      	mov	r1, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	461a      	mov	r2, r3
 80076a8:	f04f 0300 	mov.w	r3, #0
 80076ac:	f7f9 fb04 	bl	8000cb8 <__aeabi_uldivmod>
 80076b0:	4602      	mov	r2, r0
 80076b2:	460b      	mov	r3, r1
 80076b4:	4613      	mov	r3, r2
 80076b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80076b8:	4b0a      	ldr	r3, [pc, #40]	; (80076e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	0c1b      	lsrs	r3, r3, #16
 80076be:	f003 0303 	and.w	r3, r3, #3
 80076c2:	3301      	adds	r3, #1
 80076c4:	005b      	lsls	r3, r3, #1
 80076c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80076d0:	60bb      	str	r3, [r7, #8]
      break;
 80076d2:	e002      	b.n	80076da <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80076d4:	4b04      	ldr	r3, [pc, #16]	; (80076e8 <HAL_RCC_GetSysClockFreq+0x164>)
 80076d6:	60bb      	str	r3, [r7, #8]
      break;
 80076d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80076da:	68bb      	ldr	r3, [r7, #8]
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bdb0      	pop	{r4, r5, r7, pc}
 80076e4:	40023800 	.word	0x40023800
 80076e8:	00f42400 	.word	0x00f42400
 80076ec:	017d7840 	.word	0x017d7840

080076f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076f0:	b480      	push	{r7}
 80076f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076f4:	4b03      	ldr	r3, [pc, #12]	; (8007704 <HAL_RCC_GetHCLKFreq+0x14>)
 80076f6:	681b      	ldr	r3, [r3, #0]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	20000004 	.word	0x20000004

08007708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800770c:	f7ff fff0 	bl	80076f0 <HAL_RCC_GetHCLKFreq>
 8007710:	4602      	mov	r2, r0
 8007712:	4b05      	ldr	r3, [pc, #20]	; (8007728 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	0a9b      	lsrs	r3, r3, #10
 8007718:	f003 0307 	and.w	r3, r3, #7
 800771c:	4903      	ldr	r1, [pc, #12]	; (800772c <HAL_RCC_GetPCLK1Freq+0x24>)
 800771e:	5ccb      	ldrb	r3, [r1, r3]
 8007720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007724:	4618      	mov	r0, r3
 8007726:	bd80      	pop	{r7, pc}
 8007728:	40023800 	.word	0x40023800
 800772c:	08014b84 	.word	0x08014b84

08007730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007734:	f7ff ffdc 	bl	80076f0 <HAL_RCC_GetHCLKFreq>
 8007738:	4602      	mov	r2, r0
 800773a:	4b05      	ldr	r3, [pc, #20]	; (8007750 <HAL_RCC_GetPCLK2Freq+0x20>)
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	0b5b      	lsrs	r3, r3, #13
 8007740:	f003 0307 	and.w	r3, r3, #7
 8007744:	4903      	ldr	r1, [pc, #12]	; (8007754 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007746:	5ccb      	ldrb	r3, [r1, r3]
 8007748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800774c:	4618      	mov	r0, r3
 800774e:	bd80      	pop	{r7, pc}
 8007750:	40023800 	.word	0x40023800
 8007754:	08014b84 	.word	0x08014b84

08007758 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d101      	bne.n	800776a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e022      	b.n	80077b0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007770:	b2db      	uxtb	r3, r3
 8007772:	2b00      	cmp	r3, #0
 8007774:	d105      	bne.n	8007782 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f7fb ffa5 	bl	80036cc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2203      	movs	r2, #3
 8007786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f814 	bl	80077b8 <HAL_SD_InitCard>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e00a      	b.n	80077b0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80077b8:	b5b0      	push	{r4, r5, r7, lr}
 80077ba:	b08e      	sub	sp, #56	; 0x38
 80077bc:	af04      	add	r7, sp, #16
 80077be:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80077c0:	2300      	movs	r3, #0
 80077c2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80077c4:	2300      	movs	r3, #0
 80077c6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80077c8:	2300      	movs	r3, #0
 80077ca:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80077cc:	2300      	movs	r3, #0
 80077ce:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80077d0:	2300      	movs	r3, #0
 80077d2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80077d4:	2376      	movs	r3, #118	; 0x76
 80077d6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681d      	ldr	r5, [r3, #0]
 80077dc:	466c      	mov	r4, sp
 80077de:	f107 0314 	add.w	r3, r7, #20
 80077e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80077e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80077ea:	f107 0308 	add.w	r3, r7, #8
 80077ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80077f0:	4628      	mov	r0, r5
 80077f2:	f002 f9f7 	bl	8009be4 <SDIO_Init>
 80077f6:	4603      	mov	r3, r0
 80077f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80077fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007800:	2b00      	cmp	r3, #0
 8007802:	d001      	beq.n	8007808 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	e04c      	b.n	80078a2 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007808:	4b28      	ldr	r3, [pc, #160]	; (80078ac <HAL_SD_InitCard+0xf4>)
 800780a:	2200      	movs	r2, #0
 800780c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4618      	mov	r0, r3
 8007814:	f002 fa2f 	bl	8009c76 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007818:	4b24      	ldr	r3, [pc, #144]	; (80078ac <HAL_SD_InitCard+0xf4>)
 800781a:	2201      	movs	r2, #1
 800781c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 ff02 	bl	8008628 <SD_PowerON>
 8007824:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007826:	6a3b      	ldr	r3, [r7, #32]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d00b      	beq.n	8007844 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007838:	6a3b      	ldr	r3, [r7, #32]
 800783a:	431a      	orrs	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	e02e      	b.n	80078a2 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fe23 	bl	8008490 <SD_InitCard>
 800784a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800784c:	6a3b      	ldr	r3, [r7, #32]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00b      	beq.n	800786a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2201      	movs	r2, #1
 8007856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800785e:	6a3b      	ldr	r3, [r7, #32]
 8007860:	431a      	orrs	r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e01b      	b.n	80078a2 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007872:	4618      	mov	r0, r3
 8007874:	f002 fa92 	bl	8009d9c <SDMMC_CmdBlockLength>
 8007878:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800787a:	6a3b      	ldr	r3, [r7, #32]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00f      	beq.n	80078a0 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a0a      	ldr	r2, [pc, #40]	; (80078b0 <HAL_SD_InitCard+0xf8>)
 8007886:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800788c:	6a3b      	ldr	r3, [r7, #32]
 800788e:	431a      	orrs	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	e000      	b.n	80078a2 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3728      	adds	r7, #40	; 0x28
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bdb0      	pop	{r4, r5, r7, pc}
 80078aa:	bf00      	nop
 80078ac:	422580a0 	.word	0x422580a0
 80078b0:	004005ff 	.word	0x004005ff

080078b4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b092      	sub	sp, #72	; 0x48
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	607a      	str	r2, [r7, #4]
 80078c0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80078c2:	f7fd ff35 	bl	8005730 <HAL_GetTick>
 80078c6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d107      	bne.n	80078e6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e1bd      	b.n	8007c62 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	f040 81b0 	bne.w	8007c54 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80078fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	441a      	add	r2, r3
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007904:	429a      	cmp	r2, r3
 8007906:	d907      	bls.n	8007918 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e1a4      	b.n	8007c62 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2203      	movs	r2, #3
 800791c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2200      	movs	r2, #0
 8007926:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800792c:	2b01      	cmp	r3, #1
 800792e:	d002      	beq.n	8007936 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007932:	025b      	lsls	r3, r3, #9
 8007934:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007936:	f04f 33ff 	mov.w	r3, #4294967295
 800793a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	025b      	lsls	r3, r3, #9
 8007940:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007942:	2390      	movs	r3, #144	; 0x90
 8007944:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007946:	2302      	movs	r3, #2
 8007948:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800794a:	2300      	movs	r3, #0
 800794c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800794e:	2301      	movs	r3, #1
 8007950:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f107 0214 	add.w	r2, r7, #20
 800795a:	4611      	mov	r1, r2
 800795c:	4618      	mov	r0, r3
 800795e:	f002 f9f1 	bl	8009d44 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d90a      	bls.n	800797e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2202      	movs	r2, #2
 800796c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007974:	4618      	mov	r0, r3
 8007976:	f002 fa55 	bl	8009e24 <SDMMC_CmdReadMultiBlock>
 800797a:	6478      	str	r0, [r7, #68]	; 0x44
 800797c:	e009      	b.n	8007992 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2201      	movs	r2, #1
 8007982:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800798a:	4618      	mov	r0, r3
 800798c:	f002 fa28 	bl	8009de0 <SDMMC_CmdReadSingleBlock>
 8007990:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007994:	2b00      	cmp	r3, #0
 8007996:	d012      	beq.n	80079be <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a7a      	ldr	r2, [pc, #488]	; (8007b88 <HAL_SD_ReadBlocks+0x2d4>)
 800799e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079a6:	431a      	orrs	r2, r3
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e151      	b.n	8007c62 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80079c2:	e061      	b.n	8007a88 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d03c      	beq.n	8007a4c <HAL_SD_ReadBlocks+0x198>
 80079d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d039      	beq.n	8007a4c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80079d8:	2300      	movs	r3, #0
 80079da:	643b      	str	r3, [r7, #64]	; 0x40
 80079dc:	e033      	b.n	8007a46 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4618      	mov	r0, r3
 80079e4:	f002 f929 	bl	8009c3a <SDIO_ReadFIFO>
 80079e8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80079ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ec:	b2da      	uxtb	r2, r3
 80079ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80079f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f4:	3301      	adds	r3, #1
 80079f6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80079f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079fa:	3b01      	subs	r3, #1
 80079fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80079fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a00:	0a1b      	lsrs	r3, r3, #8
 8007a02:	b2da      	uxtb	r2, r3
 8007a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a06:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a10:	3b01      	subs	r3, #1
 8007a12:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a16:	0c1b      	lsrs	r3, r3, #16
 8007a18:	b2da      	uxtb	r2, r3
 8007a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a1c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a20:	3301      	adds	r3, #1
 8007a22:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a26:	3b01      	subs	r3, #1
 8007a28:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2c:	0e1b      	lsrs	r3, r3, #24
 8007a2e:	b2da      	uxtb	r2, r3
 8007a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a32:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a36:	3301      	adds	r3, #1
 8007a38:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8007a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a42:	3301      	adds	r3, #1
 8007a44:	643b      	str	r3, [r7, #64]	; 0x40
 8007a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a48:	2b07      	cmp	r3, #7
 8007a4a:	d9c8      	bls.n	80079de <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007a4c:	f7fd fe70 	bl	8005730 <HAL_GetTick>
 8007a50:	4602      	mov	r2, r0
 8007a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d902      	bls.n	8007a62 <HAL_SD_ReadBlocks+0x1ae>
 8007a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d112      	bne.n	8007a88 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a48      	ldr	r2, [pc, #288]	; (8007b88 <HAL_SD_ReadBlocks+0x2d4>)
 8007a68:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007a84:	2303      	movs	r3, #3
 8007a86:	e0ec      	b.n	8007c62 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a8e:	f240 332a 	movw	r3, #810	; 0x32a
 8007a92:	4013      	ands	r3, r2
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d095      	beq.n	80079c4 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d022      	beq.n	8007aec <HAL_SD_ReadBlocks+0x238>
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d91f      	bls.n	8007aec <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ab0:	2b03      	cmp	r3, #3
 8007ab2:	d01b      	beq.n	8007aec <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f002 fa19 	bl	8009ef0 <SDMMC_CmdStopTransfer>
 8007abe:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d012      	beq.n	8007aec <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a2f      	ldr	r2, [pc, #188]	; (8007b88 <HAL_SD_ReadBlocks+0x2d4>)
 8007acc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ad2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ad4:	431a      	orrs	r2, r3
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2201      	movs	r2, #1
 8007ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e0ba      	b.n	8007c62 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007af2:	f003 0308 	and.w	r3, r3, #8
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d012      	beq.n	8007b20 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a22      	ldr	r2, [pc, #136]	; (8007b88 <HAL_SD_ReadBlocks+0x2d4>)
 8007b00:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b06:	f043 0208 	orr.w	r2, r3, #8
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2201      	movs	r2, #1
 8007b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e0a0      	b.n	8007c62 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b26:	f003 0302 	and.w	r3, r3, #2
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d012      	beq.n	8007b54 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a15      	ldr	r2, [pc, #84]	; (8007b88 <HAL_SD_ReadBlocks+0x2d4>)
 8007b34:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b3a:	f043 0202 	orr.w	r2, r3, #2
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2201      	movs	r2, #1
 8007b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e086      	b.n	8007c62 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b5a:	f003 0320 	and.w	r3, r3, #32
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d063      	beq.n	8007c2a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a08      	ldr	r2, [pc, #32]	; (8007b88 <HAL_SD_ReadBlocks+0x2d4>)
 8007b68:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6e:	f043 0220 	orr.w	r2, r3, #32
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	e06c      	b.n	8007c62 <HAL_SD_ReadBlocks+0x3ae>
 8007b88:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4618      	mov	r0, r3
 8007b92:	f002 f852 	bl	8009c3a <SDIO_ReadFIFO>
 8007b96:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8007b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9a:	b2da      	uxtb	r2, r3
 8007b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b9e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bae:	0a1b      	lsrs	r3, r3, #8
 8007bb0:	b2da      	uxtb	r2, r3
 8007bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb8:	3301      	adds	r3, #1
 8007bba:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc4:	0c1b      	lsrs	r3, r3, #16
 8007bc6:	b2da      	uxtb	r2, r3
 8007bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bca:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bce:	3301      	adds	r3, #1
 8007bd0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bd4:	3b01      	subs	r3, #1
 8007bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bda:	0e1b      	lsrs	r3, r3, #24
 8007bdc:	b2da      	uxtb	r2, r3
 8007bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be4:	3301      	adds	r3, #1
 8007be6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bea:	3b01      	subs	r3, #1
 8007bec:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007bee:	f7fd fd9f 	bl	8005730 <HAL_GetTick>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d902      	bls.n	8007c04 <HAL_SD_ReadBlocks+0x350>
 8007bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d112      	bne.n	8007c2a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a18      	ldr	r2, [pc, #96]	; (8007c6c <HAL_SD_ReadBlocks+0x3b8>)
 8007c0a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c10:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e01b      	b.n	8007c62 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d002      	beq.n	8007c3e <HAL_SD_ReadBlocks+0x38a>
 8007c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d1a6      	bne.n	8007b8c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f240 523a 	movw	r2, #1338	; 0x53a
 8007c46:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007c50:	2300      	movs	r3, #0
 8007c52:	e006      	b.n	8007c62 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c58:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
  }
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3748      	adds	r7, #72	; 0x48
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	004005ff 	.word	0x004005ff

08007c70 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b092      	sub	sp, #72	; 0x48
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	607a      	str	r2, [r7, #4]
 8007c7c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007c7e:	f7fd fd57 	bl	8005730 <HAL_GetTick>
 8007c82:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d107      	bne.n	8007ca2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c96:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e166      	b.n	8007f70 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	f040 8159 	bne.w	8007f62 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007cb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	441a      	add	r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d907      	bls.n	8007cd4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e14d      	b.n	8007f70 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2203      	movs	r2, #3
 8007cd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d002      	beq.n	8007cf2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8007cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cee:	025b      	lsls	r3, r3, #9
 8007cf0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8007cf6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	025b      	lsls	r3, r3, #9
 8007cfc:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007cfe:	2390      	movs	r3, #144	; 0x90
 8007d00:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007d02:	2300      	movs	r3, #0
 8007d04:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007d06:	2300      	movs	r3, #0
 8007d08:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f107 0218 	add.w	r2, r7, #24
 8007d16:	4611      	mov	r1, r2
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f002 f813 	bl	8009d44 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d90a      	bls.n	8007d3a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2220      	movs	r2, #32
 8007d28:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d30:	4618      	mov	r0, r3
 8007d32:	f002 f8bb 	bl	8009eac <SDMMC_CmdWriteMultiBlock>
 8007d36:	6478      	str	r0, [r7, #68]	; 0x44
 8007d38:	e009      	b.n	8007d4e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2210      	movs	r2, #16
 8007d3e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d46:	4618      	mov	r0, r3
 8007d48:	f002 f88e 	bl	8009e68 <SDMMC_CmdWriteSingleBlock>
 8007d4c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d012      	beq.n	8007d7a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a87      	ldr	r2, [pc, #540]	; (8007f78 <HAL_SD_WriteBlocks+0x308>)
 8007d5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d62:	431a      	orrs	r2, r3
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2200      	movs	r2, #0
 8007d74:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e0fa      	b.n	8007f70 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007d7e:	e065      	b.n	8007e4c <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d040      	beq.n	8007e10 <HAL_SD_WriteBlocks+0x1a0>
 8007d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d03d      	beq.n	8007e10 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8007d94:	2300      	movs	r3, #0
 8007d96:	643b      	str	r3, [r7, #64]	; 0x40
 8007d98:	e037      	b.n	8007e0a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8007d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da2:	3301      	adds	r3, #1
 8007da4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007da8:	3b01      	subs	r3, #1
 8007daa:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8007dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	021a      	lsls	r2, r3, #8
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dba:	3301      	adds	r3, #1
 8007dbc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	041a      	lsls	r2, r3, #16
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	061a      	lsls	r2, r3, #24
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	4313      	orrs	r3, r2
 8007de6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dea:	3301      	adds	r3, #1
 8007dec:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007df0:	3b01      	subs	r3, #1
 8007df2:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f107 0214 	add.w	r2, r7, #20
 8007dfc:	4611      	mov	r1, r2
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f001 ff28 	bl	8009c54 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e06:	3301      	adds	r3, #1
 8007e08:	643b      	str	r3, [r7, #64]	; 0x40
 8007e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e0c:	2b07      	cmp	r3, #7
 8007e0e:	d9c4      	bls.n	8007d9a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007e10:	f7fd fc8e 	bl	8005730 <HAL_GetTick>
 8007e14:	4602      	mov	r2, r0
 8007e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d902      	bls.n	8007e26 <HAL_SD_WriteBlocks+0x1b6>
 8007e20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d112      	bne.n	8007e4c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a53      	ldr	r2, [pc, #332]	; (8007f78 <HAL_SD_WriteBlocks+0x308>)
 8007e2c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e34:	431a      	orrs	r2, r3
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2200      	movs	r2, #0
 8007e46:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e091      	b.n	8007f70 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e52:	f240 331a 	movw	r3, #794	; 0x31a
 8007e56:	4013      	ands	r3, r2
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d091      	beq.n	8007d80 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d022      	beq.n	8007eb0 <HAL_SD_WriteBlocks+0x240>
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d91f      	bls.n	8007eb0 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e74:	2b03      	cmp	r3, #3
 8007e76:	d01b      	beq.n	8007eb0 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f002 f837 	bl	8009ef0 <SDMMC_CmdStopTransfer>
 8007e82:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d012      	beq.n	8007eb0 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a3a      	ldr	r2, [pc, #232]	; (8007f78 <HAL_SD_WriteBlocks+0x308>)
 8007e90:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e98:	431a      	orrs	r2, r3
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	e05f      	b.n	8007f70 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eb6:	f003 0308 	and.w	r3, r3, #8
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d012      	beq.n	8007ee4 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a2d      	ldr	r2, [pc, #180]	; (8007f78 <HAL_SD_WriteBlocks+0x308>)
 8007ec4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eca:	f043 0208 	orr.w	r2, r3, #8
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e045      	b.n	8007f70 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eea:	f003 0302 	and.w	r3, r3, #2
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d012      	beq.n	8007f18 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a20      	ldr	r2, [pc, #128]	; (8007f78 <HAL_SD_WriteBlocks+0x308>)
 8007ef8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007efe:	f043 0202 	orr.w	r2, r3, #2
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2200      	movs	r2, #0
 8007f12:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	e02b      	b.n	8007f70 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f1e:	f003 0310 	and.w	r3, r3, #16
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d012      	beq.n	8007f4c <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a13      	ldr	r2, [pc, #76]	; (8007f78 <HAL_SD_WriteBlocks+0x308>)
 8007f2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f32:	f043 0210 	orr.w	r2, r3, #16
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2200      	movs	r2, #0
 8007f46:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e011      	b.n	8007f70 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f240 523a 	movw	r2, #1338	; 0x53a
 8007f54:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	e006      	b.n	8007f70 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f66:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
  }
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3748      	adds	r7, #72	; 0x48
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	004005ff 	.word	0x004005ff

08007f7c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f8a:	0f9b      	lsrs	r3, r3, #30
 8007f8c:	b2da      	uxtb	r2, r3
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f96:	0e9b      	lsrs	r3, r3, #26
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	f003 030f 	and.w	r3, r3, #15
 8007f9e:	b2da      	uxtb	r2, r3
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fa8:	0e1b      	lsrs	r3, r3, #24
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	f003 0303 	and.w	r3, r3, #3
 8007fb0:	b2da      	uxtb	r2, r3
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fba:	0c1b      	lsrs	r3, r3, #16
 8007fbc:	b2da      	uxtb	r2, r3
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fc6:	0a1b      	lsrs	r3, r3, #8
 8007fc8:	b2da      	uxtb	r2, r3
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fd2:	b2da      	uxtb	r2, r3
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fdc:	0d1b      	lsrs	r3, r3, #20
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fe8:	0c1b      	lsrs	r3, r3, #16
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	f003 030f 	and.w	r3, r3, #15
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ffa:	0bdb      	lsrs	r3, r3, #15
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	f003 0301 	and.w	r3, r3, #1
 8008002:	b2da      	uxtb	r2, r3
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800800c:	0b9b      	lsrs	r3, r3, #14
 800800e:	b2db      	uxtb	r3, r3
 8008010:	f003 0301 	and.w	r3, r3, #1
 8008014:	b2da      	uxtb	r2, r3
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800801e:	0b5b      	lsrs	r3, r3, #13
 8008020:	b2db      	uxtb	r3, r3
 8008022:	f003 0301 	and.w	r3, r3, #1
 8008026:	b2da      	uxtb	r2, r3
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008030:	0b1b      	lsrs	r3, r3, #12
 8008032:	b2db      	uxtb	r3, r3
 8008034:	f003 0301 	and.w	r3, r3, #1
 8008038:	b2da      	uxtb	r2, r3
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	2200      	movs	r2, #0
 8008042:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008048:	2b00      	cmp	r3, #0
 800804a:	d163      	bne.n	8008114 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008050:	009a      	lsls	r2, r3, #2
 8008052:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008056:	4013      	ands	r3, r2
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800805c:	0f92      	lsrs	r2, r2, #30
 800805e:	431a      	orrs	r2, r3
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008068:	0edb      	lsrs	r3, r3, #27
 800806a:	b2db      	uxtb	r3, r3
 800806c:	f003 0307 	and.w	r3, r3, #7
 8008070:	b2da      	uxtb	r2, r3
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800807a:	0e1b      	lsrs	r3, r3, #24
 800807c:	b2db      	uxtb	r3, r3
 800807e:	f003 0307 	and.w	r3, r3, #7
 8008082:	b2da      	uxtb	r2, r3
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800808c:	0d5b      	lsrs	r3, r3, #21
 800808e:	b2db      	uxtb	r3, r3
 8008090:	f003 0307 	and.w	r3, r3, #7
 8008094:	b2da      	uxtb	r2, r3
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800809e:	0c9b      	lsrs	r3, r3, #18
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	f003 0307 	and.w	r3, r3, #7
 80080a6:	b2da      	uxtb	r2, r3
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080b0:	0bdb      	lsrs	r3, r3, #15
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	f003 0307 	and.w	r3, r3, #7
 80080b8:	b2da      	uxtb	r2, r3
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	1c5a      	adds	r2, r3, #1
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	7e1b      	ldrb	r3, [r3, #24]
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	f003 0307 	and.w	r3, r3, #7
 80080d2:	3302      	adds	r3, #2
 80080d4:	2201      	movs	r2, #1
 80080d6:	fa02 f303 	lsl.w	r3, r2, r3
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80080de:	fb02 f203 	mul.w	r2, r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	7a1b      	ldrb	r3, [r3, #8]
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	f003 030f 	and.w	r3, r3, #15
 80080f0:	2201      	movs	r2, #1
 80080f2:	409a      	lsls	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008100:	0a52      	lsrs	r2, r2, #9
 8008102:	fb02 f203 	mul.w	r2, r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008110:	661a      	str	r2, [r3, #96]	; 0x60
 8008112:	e031      	b.n	8008178 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008118:	2b01      	cmp	r3, #1
 800811a:	d11d      	bne.n	8008158 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008120:	041b      	lsls	r3, r3, #16
 8008122:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800812a:	0c1b      	lsrs	r3, r3, #16
 800812c:	431a      	orrs	r2, r3
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	3301      	adds	r3, #1
 8008138:	029a      	lsls	r2, r3, #10
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f44f 7200 	mov.w	r2, #512	; 0x200
 800814c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	661a      	str	r2, [r3, #96]	; 0x60
 8008156:	e00f      	b.n	8008178 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a58      	ldr	r2, [pc, #352]	; (80082c0 <HAL_SD_GetCardCSD+0x344>)
 800815e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008164:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	e09d      	b.n	80082b4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800817c:	0b9b      	lsrs	r3, r3, #14
 800817e:	b2db      	uxtb	r3, r3
 8008180:	f003 0301 	and.w	r3, r3, #1
 8008184:	b2da      	uxtb	r2, r3
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800818e:	09db      	lsrs	r3, r3, #7
 8008190:	b2db      	uxtb	r3, r3
 8008192:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008196:	b2da      	uxtb	r2, r3
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081a6:	b2da      	uxtb	r2, r3
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081b0:	0fdb      	lsrs	r3, r3, #31
 80081b2:	b2da      	uxtb	r2, r3
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081bc:	0f5b      	lsrs	r3, r3, #29
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	f003 0303 	and.w	r3, r3, #3
 80081c4:	b2da      	uxtb	r2, r3
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ce:	0e9b      	lsrs	r3, r3, #26
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	f003 0307 	and.w	r3, r3, #7
 80081d6:	b2da      	uxtb	r2, r3
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081e0:	0d9b      	lsrs	r3, r3, #22
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	f003 030f 	and.w	r3, r3, #15
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081f2:	0d5b      	lsrs	r3, r3, #21
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	f003 0301 	and.w	r3, r3, #1
 80081fa:	b2da      	uxtb	r2, r3
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800820e:	0c1b      	lsrs	r3, r3, #16
 8008210:	b2db      	uxtb	r3, r3
 8008212:	f003 0301 	and.w	r3, r3, #1
 8008216:	b2da      	uxtb	r2, r3
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008222:	0bdb      	lsrs	r3, r3, #15
 8008224:	b2db      	uxtb	r3, r3
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	b2da      	uxtb	r2, r3
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008236:	0b9b      	lsrs	r3, r3, #14
 8008238:	b2db      	uxtb	r3, r3
 800823a:	f003 0301 	and.w	r3, r3, #1
 800823e:	b2da      	uxtb	r2, r3
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800824a:	0b5b      	lsrs	r3, r3, #13
 800824c:	b2db      	uxtb	r3, r3
 800824e:	f003 0301 	and.w	r3, r3, #1
 8008252:	b2da      	uxtb	r2, r3
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800825e:	0b1b      	lsrs	r3, r3, #12
 8008260:	b2db      	uxtb	r3, r3
 8008262:	f003 0301 	and.w	r3, r3, #1
 8008266:	b2da      	uxtb	r2, r3
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008272:	0a9b      	lsrs	r3, r3, #10
 8008274:	b2db      	uxtb	r3, r3
 8008276:	f003 0303 	and.w	r3, r3, #3
 800827a:	b2da      	uxtb	r2, r3
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008286:	0a1b      	lsrs	r3, r3, #8
 8008288:	b2db      	uxtb	r3, r3
 800828a:	f003 0303 	and.w	r3, r3, #3
 800828e:	b2da      	uxtb	r2, r3
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800829a:	085b      	lsrs	r3, r3, #1
 800829c:	b2db      	uxtb	r3, r3
 800829e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082a2:	b2da      	uxtb	r2, r3
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	2201      	movs	r2, #1
 80082ae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr
 80082c0:	004005ff 	.word	0x004005ff

080082c4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800831c:	b5b0      	push	{r4, r5, r7, lr}
 800831e:	b08e      	sub	sp, #56	; 0x38
 8008320:	af04      	add	r7, sp, #16
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008326:	2300      	movs	r3, #0
 8008328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2203      	movs	r2, #3
 8008330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008338:	2b03      	cmp	r3, #3
 800833a:	d02e      	beq.n	800839a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008342:	d106      	bne.n	8008352 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008348:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	639a      	str	r2, [r3, #56]	; 0x38
 8008350:	e029      	b.n	80083a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008358:	d10a      	bne.n	8008370 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 fa1a 	bl	8008794 <SD_WideBus_Enable>
 8008360:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008366:	6a3b      	ldr	r3, [r7, #32]
 8008368:	431a      	orrs	r2, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	639a      	str	r2, [r3, #56]	; 0x38
 800836e:	e01a      	b.n	80083a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d10a      	bne.n	800838c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 fa57 	bl	800882a <SD_WideBus_Disable>
 800837c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008382:	6a3b      	ldr	r3, [r7, #32]
 8008384:	431a      	orrs	r2, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	639a      	str	r2, [r3, #56]	; 0x38
 800838a:	e00c      	b.n	80083a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008390:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	639a      	str	r2, [r3, #56]	; 0x38
 8008398:	e005      	b.n	80083a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800839e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00b      	beq.n	80083c6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a26      	ldr	r2, [pc, #152]	; (800844c <HAL_SD_ConfigWideBusOperation+0x130>)
 80083b4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2201      	movs	r2, #1
 80083ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80083c4:	e01f      	b.n	8008406 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	695b      	ldr	r3, [r3, #20]
 80083e0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	699b      	ldr	r3, [r3, #24]
 80083e6:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681d      	ldr	r5, [r3, #0]
 80083ec:	466c      	mov	r4, sp
 80083ee:	f107 0314 	add.w	r3, r7, #20
 80083f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80083f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80083fa:	f107 0308 	add.w	r3, r7, #8
 80083fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008400:	4628      	mov	r0, r5
 8008402:	f001 fbef 	bl	8009be4 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800840e:	4618      	mov	r0, r3
 8008410:	f001 fcc4 	bl	8009d9c <SDMMC_CmdBlockLength>
 8008414:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008416:	6a3b      	ldr	r3, [r7, #32]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00c      	beq.n	8008436 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a0a      	ldr	r2, [pc, #40]	; (800844c <HAL_SD_ConfigWideBusOperation+0x130>)
 8008422:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008428:	6a3b      	ldr	r3, [r7, #32]
 800842a:	431a      	orrs	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2201      	movs	r2, #1
 800843a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800843e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008442:	4618      	mov	r0, r3
 8008444:	3728      	adds	r7, #40	; 0x28
 8008446:	46bd      	mov	sp, r7
 8008448:	bdb0      	pop	{r4, r5, r7, pc}
 800844a:	bf00      	nop
 800844c:	004005ff 	.word	0x004005ff

08008450 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b086      	sub	sp, #24
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008458:	2300      	movs	r3, #0
 800845a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800845c:	f107 030c 	add.w	r3, r7, #12
 8008460:	4619      	mov	r1, r3
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 f96e 	bl	8008744 <SD_SendStatus>
 8008468:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d005      	beq.n	800847c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	431a      	orrs	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	0a5b      	lsrs	r3, r3, #9
 8008480:	f003 030f 	and.w	r3, r3, #15
 8008484:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008486:	693b      	ldr	r3, [r7, #16]
}
 8008488:	4618      	mov	r0, r3
 800848a:	3718      	adds	r7, #24
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008490:	b5b0      	push	{r4, r5, r7, lr}
 8008492:	b094      	sub	sp, #80	; 0x50
 8008494:	af04      	add	r7, sp, #16
 8008496:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008498:	2301      	movs	r3, #1
 800849a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4618      	mov	r0, r3
 80084a2:	f001 fbf7 	bl	8009c94 <SDIO_GetPowerState>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d102      	bne.n	80084b2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80084ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80084b0:	e0b6      	b.n	8008620 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084b6:	2b03      	cmp	r3, #3
 80084b8:	d02f      	beq.n	800851a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4618      	mov	r0, r3
 80084c0:	f001 fe20 	bl	800a104 <SDMMC_CmdSendCID>
 80084c4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80084c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d001      	beq.n	80084d0 <SD_InitCard+0x40>
    {
      return errorstate;
 80084cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ce:	e0a7      	b.n	8008620 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2100      	movs	r1, #0
 80084d6:	4618      	mov	r0, r3
 80084d8:	f001 fc21 	bl	8009d1e <SDIO_GetResponse>
 80084dc:	4602      	mov	r2, r0
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2104      	movs	r1, #4
 80084e8:	4618      	mov	r0, r3
 80084ea:	f001 fc18 	bl	8009d1e <SDIO_GetResponse>
 80084ee:	4602      	mov	r2, r0
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2108      	movs	r1, #8
 80084fa:	4618      	mov	r0, r3
 80084fc:	f001 fc0f 	bl	8009d1e <SDIO_GetResponse>
 8008500:	4602      	mov	r2, r0
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	210c      	movs	r1, #12
 800850c:	4618      	mov	r0, r3
 800850e:	f001 fc06 	bl	8009d1e <SDIO_GetResponse>
 8008512:	4602      	mov	r2, r0
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800851e:	2b03      	cmp	r3, #3
 8008520:	d00d      	beq.n	800853e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f107 020e 	add.w	r2, r7, #14
 800852a:	4611      	mov	r1, r2
 800852c:	4618      	mov	r0, r3
 800852e:	f001 fe26 	bl	800a17e <SDMMC_CmdSetRelAdd>
 8008532:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008536:	2b00      	cmp	r3, #0
 8008538:	d001      	beq.n	800853e <SD_InitCard+0xae>
    {
      return errorstate;
 800853a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800853c:	e070      	b.n	8008620 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008542:	2b03      	cmp	r3, #3
 8008544:	d036      	beq.n	80085b4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008546:	89fb      	ldrh	r3, [r7, #14]
 8008548:	461a      	mov	r2, r3
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008556:	041b      	lsls	r3, r3, #16
 8008558:	4619      	mov	r1, r3
 800855a:	4610      	mov	r0, r2
 800855c:	f001 fdf0 	bl	800a140 <SDMMC_CmdSendCSD>
 8008560:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008564:	2b00      	cmp	r3, #0
 8008566:	d001      	beq.n	800856c <SD_InitCard+0xdc>
    {
      return errorstate;
 8008568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800856a:	e059      	b.n	8008620 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2100      	movs	r1, #0
 8008572:	4618      	mov	r0, r3
 8008574:	f001 fbd3 	bl	8009d1e <SDIO_GetResponse>
 8008578:	4602      	mov	r2, r0
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2104      	movs	r1, #4
 8008584:	4618      	mov	r0, r3
 8008586:	f001 fbca 	bl	8009d1e <SDIO_GetResponse>
 800858a:	4602      	mov	r2, r0
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2108      	movs	r1, #8
 8008596:	4618      	mov	r0, r3
 8008598:	f001 fbc1 	bl	8009d1e <SDIO_GetResponse>
 800859c:	4602      	mov	r2, r0
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	210c      	movs	r1, #12
 80085a8:	4618      	mov	r0, r3
 80085aa:	f001 fbb8 	bl	8009d1e <SDIO_GetResponse>
 80085ae:	4602      	mov	r2, r0
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2104      	movs	r1, #4
 80085ba:	4618      	mov	r0, r3
 80085bc:	f001 fbaf 	bl	8009d1e <SDIO_GetResponse>
 80085c0:	4603      	mov	r3, r0
 80085c2:	0d1a      	lsrs	r2, r3, #20
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80085c8:	f107 0310 	add.w	r3, r7, #16
 80085cc:	4619      	mov	r1, r3
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f7ff fcd4 	bl	8007f7c <HAL_SD_GetCardCSD>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d002      	beq.n	80085e0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80085da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80085de:	e01f      	b.n	8008620 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6819      	ldr	r1, [r3, #0]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085e8:	041b      	lsls	r3, r3, #16
 80085ea:	461a      	mov	r2, r3
 80085ec:	f04f 0300 	mov.w	r3, #0
 80085f0:	4608      	mov	r0, r1
 80085f2:	f001 fc9f 	bl	8009f34 <SDMMC_CmdSelDesel>
 80085f6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80085f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d001      	beq.n	8008602 <SD_InitCard+0x172>
  {
    return errorstate;
 80085fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008600:	e00e      	b.n	8008620 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681d      	ldr	r5, [r3, #0]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	466c      	mov	r4, sp
 800860a:	f103 0210 	add.w	r2, r3, #16
 800860e:	ca07      	ldmia	r2, {r0, r1, r2}
 8008610:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008614:	3304      	adds	r3, #4
 8008616:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008618:	4628      	mov	r0, r5
 800861a:	f001 fae3 	bl	8009be4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	3740      	adds	r7, #64	; 0x40
 8008624:	46bd      	mov	sp, r7
 8008626:	bdb0      	pop	{r4, r5, r7, pc}

08008628 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b086      	sub	sp, #24
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008630:	2300      	movs	r3, #0
 8008632:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008634:	2300      	movs	r3, #0
 8008636:	617b      	str	r3, [r7, #20]
 8008638:	2300      	movs	r3, #0
 800863a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4618      	mov	r0, r3
 8008642:	f001 fc9a 	bl	8009f7a <SDMMC_CmdGoIdleState>
 8008646:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d001      	beq.n	8008652 <SD_PowerON+0x2a>
  {
    return errorstate;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	e072      	b.n	8008738 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4618      	mov	r0, r3
 8008658:	f001 fcad 	bl	8009fb6 <SDMMC_CmdOperCond>
 800865c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00d      	beq.n	8008680 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4618      	mov	r0, r3
 8008670:	f001 fc83 	bl	8009f7a <SDMMC_CmdGoIdleState>
 8008674:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d004      	beq.n	8008686 <SD_PowerON+0x5e>
    {
      return errorstate;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	e05b      	b.n	8008738 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800868a:	2b01      	cmp	r3, #1
 800868c:	d137      	bne.n	80086fe <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	2100      	movs	r1, #0
 8008694:	4618      	mov	r0, r3
 8008696:	f001 fcad 	bl	8009ff4 <SDMMC_CmdAppCommand>
 800869a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d02d      	beq.n	80086fe <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80086a6:	e047      	b.n	8008738 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2100      	movs	r1, #0
 80086ae:	4618      	mov	r0, r3
 80086b0:	f001 fca0 	bl	8009ff4 <SDMMC_CmdAppCommand>
 80086b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d001      	beq.n	80086c0 <SD_PowerON+0x98>
    {
      return errorstate;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	e03b      	b.n	8008738 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	491e      	ldr	r1, [pc, #120]	; (8008740 <SD_PowerON+0x118>)
 80086c6:	4618      	mov	r0, r3
 80086c8:	f001 fcb6 	bl	800a038 <SDMMC_CmdAppOperCommand>
 80086cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d002      	beq.n	80086da <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80086d8:	e02e      	b.n	8008738 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2100      	movs	r1, #0
 80086e0:	4618      	mov	r0, r3
 80086e2:	f001 fb1c 	bl	8009d1e <SDIO_GetResponse>
 80086e6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	0fdb      	lsrs	r3, r3, #31
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d101      	bne.n	80086f4 <SD_PowerON+0xcc>
 80086f0:	2301      	movs	r3, #1
 80086f2:	e000      	b.n	80086f6 <SD_PowerON+0xce>
 80086f4:	2300      	movs	r3, #0
 80086f6:	613b      	str	r3, [r7, #16]

    count++;
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	3301      	adds	r3, #1
 80086fc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008704:	4293      	cmp	r3, r2
 8008706:	d802      	bhi.n	800870e <SD_PowerON+0xe6>
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d0cc      	beq.n	80086a8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008714:	4293      	cmp	r3, r2
 8008716:	d902      	bls.n	800871e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008718:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800871c:	e00c      	b.n	8008738 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008724:	2b00      	cmp	r3, #0
 8008726:	d003      	beq.n	8008730 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	645a      	str	r2, [r3, #68]	; 0x44
 800872e:	e002      	b.n	8008736 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3718      	adds	r7, #24
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	c1100000 	.word	0xc1100000

08008744 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d102      	bne.n	800875a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008754:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008758:	e018      	b.n	800878c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008762:	041b      	lsls	r3, r3, #16
 8008764:	4619      	mov	r1, r3
 8008766:	4610      	mov	r0, r2
 8008768:	f001 fd2a 	bl	800a1c0 <SDMMC_CmdSendStatus>
 800876c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d001      	beq.n	8008778 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	e009      	b.n	800878c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2100      	movs	r1, #0
 800877e:	4618      	mov	r0, r3
 8008780:	f001 facd 	bl	8009d1e <SDIO_GetResponse>
 8008784:	4602      	mov	r2, r0
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3710      	adds	r7, #16
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b086      	sub	sp, #24
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800879c:	2300      	movs	r3, #0
 800879e:	60fb      	str	r3, [r7, #12]
 80087a0:	2300      	movs	r3, #0
 80087a2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2100      	movs	r1, #0
 80087aa:	4618      	mov	r0, r3
 80087ac:	f001 fab7 	bl	8009d1e <SDIO_GetResponse>
 80087b0:	4603      	mov	r3, r0
 80087b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80087ba:	d102      	bne.n	80087c2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80087bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087c0:	e02f      	b.n	8008822 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80087c2:	f107 030c 	add.w	r3, r7, #12
 80087c6:	4619      	mov	r1, r3
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 f879 	bl	80088c0 <SD_FindSCR>
 80087ce:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d001      	beq.n	80087da <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	e023      	b.n	8008822 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d01c      	beq.n	800881e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087ec:	041b      	lsls	r3, r3, #16
 80087ee:	4619      	mov	r1, r3
 80087f0:	4610      	mov	r0, r2
 80087f2:	f001 fbff 	bl	8009ff4 <SDMMC_CmdAppCommand>
 80087f6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d001      	beq.n	8008802 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	e00f      	b.n	8008822 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2102      	movs	r1, #2
 8008808:	4618      	mov	r0, r3
 800880a:	f001 fc38 	bl	800a07e <SDMMC_CmdBusWidth>
 800880e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d001      	beq.n	800881a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	e003      	b.n	8008822 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800881a:	2300      	movs	r3, #0
 800881c:	e001      	b.n	8008822 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800881e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008822:	4618      	mov	r0, r3
 8008824:	3718      	adds	r7, #24
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b086      	sub	sp, #24
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008832:	2300      	movs	r3, #0
 8008834:	60fb      	str	r3, [r7, #12]
 8008836:	2300      	movs	r3, #0
 8008838:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2100      	movs	r1, #0
 8008840:	4618      	mov	r0, r3
 8008842:	f001 fa6c 	bl	8009d1e <SDIO_GetResponse>
 8008846:	4603      	mov	r3, r0
 8008848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800884c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008850:	d102      	bne.n	8008858 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008852:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008856:	e02f      	b.n	80088b8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008858:	f107 030c 	add.w	r3, r7, #12
 800885c:	4619      	mov	r1, r3
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 f82e 	bl	80088c0 <SD_FindSCR>
 8008864:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d001      	beq.n	8008870 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	e023      	b.n	80088b8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008876:	2b00      	cmp	r3, #0
 8008878:	d01c      	beq.n	80088b4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008882:	041b      	lsls	r3, r3, #16
 8008884:	4619      	mov	r1, r3
 8008886:	4610      	mov	r0, r2
 8008888:	f001 fbb4 	bl	8009ff4 <SDMMC_CmdAppCommand>
 800888c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d001      	beq.n	8008898 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	e00f      	b.n	80088b8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2100      	movs	r1, #0
 800889e:	4618      	mov	r0, r3
 80088a0:	f001 fbed 	bl	800a07e <SDMMC_CmdBusWidth>
 80088a4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d001      	beq.n	80088b0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	e003      	b.n	80088b8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80088b0:	2300      	movs	r3, #0
 80088b2:	e001      	b.n	80088b8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80088b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3718      	adds	r7, #24
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80088c0:	b590      	push	{r4, r7, lr}
 80088c2:	b08f      	sub	sp, #60	; 0x3c
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80088ca:	f7fc ff31 	bl	8005730 <HAL_GetTick>
 80088ce:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80088d0:	2300      	movs	r3, #0
 80088d2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80088d4:	2300      	movs	r3, #0
 80088d6:	60bb      	str	r3, [r7, #8]
 80088d8:	2300      	movs	r3, #0
 80088da:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2108      	movs	r1, #8
 80088e6:	4618      	mov	r0, r3
 80088e8:	f001 fa58 	bl	8009d9c <SDMMC_CmdBlockLength>
 80088ec:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80088ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d001      	beq.n	80088f8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80088f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f6:	e0b2      	b.n	8008a5e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008900:	041b      	lsls	r3, r3, #16
 8008902:	4619      	mov	r1, r3
 8008904:	4610      	mov	r0, r2
 8008906:	f001 fb75 	bl	8009ff4 <SDMMC_CmdAppCommand>
 800890a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800890c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890e:	2b00      	cmp	r3, #0
 8008910:	d001      	beq.n	8008916 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008914:	e0a3      	b.n	8008a5e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008916:	f04f 33ff 	mov.w	r3, #4294967295
 800891a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800891c:	2308      	movs	r3, #8
 800891e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008920:	2330      	movs	r3, #48	; 0x30
 8008922:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008924:	2302      	movs	r3, #2
 8008926:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008928:	2300      	movs	r3, #0
 800892a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800892c:	2301      	movs	r3, #1
 800892e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f107 0210 	add.w	r2, r7, #16
 8008938:	4611      	mov	r1, r2
 800893a:	4618      	mov	r0, r3
 800893c:	f001 fa02 	bl	8009d44 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4618      	mov	r0, r3
 8008946:	f001 fbbc 	bl	800a0c2 <SDMMC_CmdSendSCR>
 800894a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800894c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894e:	2b00      	cmp	r3, #0
 8008950:	d02a      	beq.n	80089a8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8008952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008954:	e083      	b.n	8008a5e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800895c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008960:	2b00      	cmp	r3, #0
 8008962:	d00f      	beq.n	8008984 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6819      	ldr	r1, [r3, #0]
 8008968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	f107 0208 	add.w	r2, r7, #8
 8008970:	18d4      	adds	r4, r2, r3
 8008972:	4608      	mov	r0, r1
 8008974:	f001 f961 	bl	8009c3a <SDIO_ReadFIFO>
 8008978:	4603      	mov	r3, r0
 800897a:	6023      	str	r3, [r4, #0]
      index++;
 800897c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800897e:	3301      	adds	r3, #1
 8008980:	637b      	str	r3, [r7, #52]	; 0x34
 8008982:	e006      	b.n	8008992 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800898a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800898e:	2b00      	cmp	r3, #0
 8008990:	d012      	beq.n	80089b8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008992:	f7fc fecd 	bl	8005730 <HAL_GetTick>
 8008996:	4602      	mov	r2, r0
 8008998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899a:	1ad3      	subs	r3, r2, r3
 800899c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a0:	d102      	bne.n	80089a8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80089a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80089a6:	e05a      	b.n	8008a5e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ae:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d0cf      	beq.n	8008956 <SD_FindSCR+0x96>
 80089b6:	e000      	b.n	80089ba <SD_FindSCR+0xfa>
      break;
 80089b8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c0:	f003 0308 	and.w	r3, r3, #8
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d005      	beq.n	80089d4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	2208      	movs	r2, #8
 80089ce:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80089d0:	2308      	movs	r3, #8
 80089d2:	e044      	b.n	8008a5e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089da:	f003 0302 	and.w	r3, r3, #2
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d005      	beq.n	80089ee <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2202      	movs	r2, #2
 80089e8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80089ea:	2302      	movs	r3, #2
 80089ec:	e037      	b.n	8008a5e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f4:	f003 0320 	and.w	r3, r3, #32
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d005      	beq.n	8008a08 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2220      	movs	r2, #32
 8008a02:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008a04:	2320      	movs	r3, #32
 8008a06:	e02a      	b.n	8008a5e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f240 523a 	movw	r2, #1338	; 0x53a
 8008a10:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	061a      	lsls	r2, r3, #24
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	021b      	lsls	r3, r3, #8
 8008a1a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a1e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	0a1b      	lsrs	r3, r3, #8
 8008a24:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a28:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	0e1b      	lsrs	r3, r3, #24
 8008a2e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a32:	601a      	str	r2, [r3, #0]
    scr++;
 8008a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a36:	3304      	adds	r3, #4
 8008a38:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	061a      	lsls	r2, r3, #24
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	021b      	lsls	r3, r3, #8
 8008a42:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a46:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	0a1b      	lsrs	r3, r3, #8
 8008a4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a50:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	0e1b      	lsrs	r3, r3, #24
 8008a56:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a5a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	373c      	adds	r7, #60	; 0x3c
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd90      	pop	{r4, r7, pc}

08008a66 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b082      	sub	sp, #8
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d101      	bne.n	8008a78 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	e07b      	b.n	8008b70 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d108      	bne.n	8008a92 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a88:	d009      	beq.n	8008a9e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	61da      	str	r2, [r3, #28]
 8008a90:	e005      	b.n	8008a9e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2200      	movs	r2, #0
 8008a96:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d106      	bne.n	8008abe <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f7fa fe71 	bl	80037a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2202      	movs	r2, #2
 8008ac2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ad4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008ae6:	431a      	orrs	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008af0:	431a      	orrs	r2, r3
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	691b      	ldr	r3, [r3, #16]
 8008af6:	f003 0302 	and.w	r3, r3, #2
 8008afa:	431a      	orrs	r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	695b      	ldr	r3, [r3, #20]
 8008b00:	f003 0301 	and.w	r3, r3, #1
 8008b04:	431a      	orrs	r2, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	699b      	ldr	r3, [r3, #24]
 8008b0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b0e:	431a      	orrs	r2, r3
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	69db      	ldr	r3, [r3, #28]
 8008b14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b18:	431a      	orrs	r2, r3
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a1b      	ldr	r3, [r3, #32]
 8008b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b22:	ea42 0103 	orr.w	r1, r2, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b2a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	430a      	orrs	r2, r1
 8008b34:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	699b      	ldr	r3, [r3, #24]
 8008b3a:	0c1b      	lsrs	r3, r3, #16
 8008b3c:	f003 0104 	and.w	r1, r3, #4
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b44:	f003 0210 	and.w	r2, r3, #16
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	430a      	orrs	r2, r1
 8008b4e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	69da      	ldr	r2, [r3, #28]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b5e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3708      	adds	r7, #8
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b088      	sub	sp, #32
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	603b      	str	r3, [r7, #0]
 8008b84:	4613      	mov	r3, r2
 8008b86:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d101      	bne.n	8008b9a <HAL_SPI_Transmit+0x22>
 8008b96:	2302      	movs	r3, #2
 8008b98:	e126      	b.n	8008de8 <HAL_SPI_Transmit+0x270>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ba2:	f7fc fdc5 	bl	8005730 <HAL_GetTick>
 8008ba6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008ba8:	88fb      	ldrh	r3, [r7, #6]
 8008baa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d002      	beq.n	8008bbe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008bb8:	2302      	movs	r3, #2
 8008bba:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008bbc:	e10b      	b.n	8008dd6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d002      	beq.n	8008bca <HAL_SPI_Transmit+0x52>
 8008bc4:	88fb      	ldrh	r3, [r7, #6]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d102      	bne.n	8008bd0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008bce:	e102      	b.n	8008dd6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2203      	movs	r2, #3
 8008bd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	68ba      	ldr	r2, [r7, #8]
 8008be2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	88fa      	ldrh	r2, [r7, #6]
 8008be8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	88fa      	ldrh	r2, [r7, #6]
 8008bee:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2200      	movs	r2, #0
 8008c06:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c16:	d10f      	bne.n	8008c38 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c36:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c42:	2b40      	cmp	r3, #64	; 0x40
 8008c44:	d007      	beq.n	8008c56 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c5e:	d14b      	bne.n	8008cf8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d002      	beq.n	8008c6e <HAL_SPI_Transmit+0xf6>
 8008c68:	8afb      	ldrh	r3, [r7, #22]
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d13e      	bne.n	8008cec <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c72:	881a      	ldrh	r2, [r3, #0]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c7e:	1c9a      	adds	r2, r3, #2
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	b29a      	uxth	r2, r3
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008c92:	e02b      	b.n	8008cec <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	f003 0302 	and.w	r3, r3, #2
 8008c9e:	2b02      	cmp	r3, #2
 8008ca0:	d112      	bne.n	8008cc8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ca6:	881a      	ldrh	r2, [r3, #0]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb2:	1c9a      	adds	r2, r3, #2
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	b29a      	uxth	r2, r3
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	86da      	strh	r2, [r3, #54]	; 0x36
 8008cc6:	e011      	b.n	8008cec <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cc8:	f7fc fd32 	bl	8005730 <HAL_GetTick>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	1ad3      	subs	r3, r2, r3
 8008cd2:	683a      	ldr	r2, [r7, #0]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d803      	bhi.n	8008ce0 <HAL_SPI_Transmit+0x168>
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cde:	d102      	bne.n	8008ce6 <HAL_SPI_Transmit+0x16e>
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d102      	bne.n	8008cec <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008cea:	e074      	b.n	8008dd6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d1ce      	bne.n	8008c94 <HAL_SPI_Transmit+0x11c>
 8008cf6:	e04c      	b.n	8008d92 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d002      	beq.n	8008d06 <HAL_SPI_Transmit+0x18e>
 8008d00:	8afb      	ldrh	r3, [r7, #22]
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d140      	bne.n	8008d88 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	330c      	adds	r3, #12
 8008d10:	7812      	ldrb	r2, [r2, #0]
 8008d12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d18:	1c5a      	adds	r2, r3, #1
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	3b01      	subs	r3, #1
 8008d26:	b29a      	uxth	r2, r3
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008d2c:	e02c      	b.n	8008d88 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	f003 0302 	and.w	r3, r3, #2
 8008d38:	2b02      	cmp	r3, #2
 8008d3a:	d113      	bne.n	8008d64 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	330c      	adds	r3, #12
 8008d46:	7812      	ldrb	r2, [r2, #0]
 8008d48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d4e:	1c5a      	adds	r2, r3, #1
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	b29a      	uxth	r2, r3
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	86da      	strh	r2, [r3, #54]	; 0x36
 8008d62:	e011      	b.n	8008d88 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d64:	f7fc fce4 	bl	8005730 <HAL_GetTick>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	69bb      	ldr	r3, [r7, #24]
 8008d6c:	1ad3      	subs	r3, r2, r3
 8008d6e:	683a      	ldr	r2, [r7, #0]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d803      	bhi.n	8008d7c <HAL_SPI_Transmit+0x204>
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d7a:	d102      	bne.n	8008d82 <HAL_SPI_Transmit+0x20a>
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d102      	bne.n	8008d88 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008d82:	2303      	movs	r3, #3
 8008d84:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008d86:	e026      	b.n	8008dd6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1cd      	bne.n	8008d2e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d92:	69ba      	ldr	r2, [r7, #24]
 8008d94:	6839      	ldr	r1, [r7, #0]
 8008d96:	68f8      	ldr	r0, [r7, #12]
 8008d98:	f000 fbcc 	bl	8009534 <SPI_EndRxTxTransaction>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d002      	beq.n	8008da8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2220      	movs	r2, #32
 8008da6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d10a      	bne.n	8008dc6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008db0:	2300      	movs	r3, #0
 8008db2:	613b      	str	r3, [r7, #16]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68db      	ldr	r3, [r3, #12]
 8008dba:	613b      	str	r3, [r7, #16]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	613b      	str	r3, [r7, #16]
 8008dc4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d002      	beq.n	8008dd4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	77fb      	strb	r3, [r7, #31]
 8008dd2:	e000      	b.n	8008dd6 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008dd4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008de6:	7ffb      	ldrb	r3, [r7, #31]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3720      	adds	r7, #32
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b088      	sub	sp, #32
 8008df4:	af02      	add	r7, sp, #8
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	603b      	str	r3, [r7, #0]
 8008dfc:	4613      	mov	r3, r2
 8008dfe:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008e00:	2300      	movs	r3, #0
 8008e02:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e0c:	d112      	bne.n	8008e34 <HAL_SPI_Receive+0x44>
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d10e      	bne.n	8008e34 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2204      	movs	r2, #4
 8008e1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008e1e:	88fa      	ldrh	r2, [r7, #6]
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	9300      	str	r3, [sp, #0]
 8008e24:	4613      	mov	r3, r2
 8008e26:	68ba      	ldr	r2, [r7, #8]
 8008e28:	68b9      	ldr	r1, [r7, #8]
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	f000 f8f1 	bl	8009012 <HAL_SPI_TransmitReceive>
 8008e30:	4603      	mov	r3, r0
 8008e32:	e0ea      	b.n	800900a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d101      	bne.n	8008e42 <HAL_SPI_Receive+0x52>
 8008e3e:	2302      	movs	r3, #2
 8008e40:	e0e3      	b.n	800900a <HAL_SPI_Receive+0x21a>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2201      	movs	r2, #1
 8008e46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008e4a:	f7fc fc71 	bl	8005730 <HAL_GetTick>
 8008e4e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d002      	beq.n	8008e62 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008e5c:	2302      	movs	r3, #2
 8008e5e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008e60:	e0ca      	b.n	8008ff8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d002      	beq.n	8008e6e <HAL_SPI_Receive+0x7e>
 8008e68:	88fb      	ldrh	r3, [r7, #6]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d102      	bne.n	8008e74 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008e72:	e0c1      	b.n	8008ff8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2204      	movs	r2, #4
 8008e78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	88fa      	ldrh	r2, [r7, #6]
 8008e8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	88fa      	ldrh	r2, [r7, #6]
 8008e92:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2200      	movs	r2, #0
 8008e98:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008eba:	d10f      	bne.n	8008edc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008eca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008eda:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ee6:	2b40      	cmp	r3, #64	; 0x40
 8008ee8:	d007      	beq.n	8008efa <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ef8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d162      	bne.n	8008fc8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008f02:	e02e      	b.n	8008f62 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	f003 0301 	and.w	r3, r3, #1
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d115      	bne.n	8008f3e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f103 020c 	add.w	r2, r3, #12
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f1e:	7812      	ldrb	r2, [r2, #0]
 8008f20:	b2d2      	uxtb	r2, r2
 8008f22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f28:	1c5a      	adds	r2, r3, #1
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	3b01      	subs	r3, #1
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008f3c:	e011      	b.n	8008f62 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f3e:	f7fc fbf7 	bl	8005730 <HAL_GetTick>
 8008f42:	4602      	mov	r2, r0
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	683a      	ldr	r2, [r7, #0]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d803      	bhi.n	8008f56 <HAL_SPI_Receive+0x166>
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f54:	d102      	bne.n	8008f5c <HAL_SPI_Receive+0x16c>
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d102      	bne.n	8008f62 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008f60:	e04a      	b.n	8008ff8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d1cb      	bne.n	8008f04 <HAL_SPI_Receive+0x114>
 8008f6c:	e031      	b.n	8008fd2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	f003 0301 	and.w	r3, r3, #1
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d113      	bne.n	8008fa4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	68da      	ldr	r2, [r3, #12]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f86:	b292      	uxth	r2, r2
 8008f88:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8e:	1c9a      	adds	r2, r3, #2
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	b29a      	uxth	r2, r3
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008fa2:	e011      	b.n	8008fc8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008fa4:	f7fc fbc4 	bl	8005730 <HAL_GetTick>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	1ad3      	subs	r3, r2, r3
 8008fae:	683a      	ldr	r2, [r7, #0]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d803      	bhi.n	8008fbc <HAL_SPI_Receive+0x1cc>
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fba:	d102      	bne.n	8008fc2 <HAL_SPI_Receive+0x1d2>
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d102      	bne.n	8008fc8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008fc2:	2303      	movs	r3, #3
 8008fc4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008fc6:	e017      	b.n	8008ff8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d1cd      	bne.n	8008f6e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008fd2:	693a      	ldr	r2, [r7, #16]
 8008fd4:	6839      	ldr	r1, [r7, #0]
 8008fd6:	68f8      	ldr	r0, [r7, #12]
 8008fd8:	f000 fa46 	bl	8009468 <SPI_EndRxTransaction>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d002      	beq.n	8008fe8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2220      	movs	r2, #32
 8008fe6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d002      	beq.n	8008ff6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	75fb      	strb	r3, [r7, #23]
 8008ff4:	e000      	b.n	8008ff8 <HAL_SPI_Receive+0x208>
  }

error :
 8008ff6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2200      	movs	r2, #0
 8009004:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009008:	7dfb      	ldrb	r3, [r7, #23]
}
 800900a:	4618      	mov	r0, r3
 800900c:	3718      	adds	r7, #24
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009012:	b580      	push	{r7, lr}
 8009014:	b08c      	sub	sp, #48	; 0x30
 8009016:	af00      	add	r7, sp, #0
 8009018:	60f8      	str	r0, [r7, #12]
 800901a:	60b9      	str	r1, [r7, #8]
 800901c:	607a      	str	r2, [r7, #4]
 800901e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009020:	2301      	movs	r3, #1
 8009022:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009024:	2300      	movs	r3, #0
 8009026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009030:	2b01      	cmp	r3, #1
 8009032:	d101      	bne.n	8009038 <HAL_SPI_TransmitReceive+0x26>
 8009034:	2302      	movs	r3, #2
 8009036:	e18a      	b.n	800934e <HAL_SPI_TransmitReceive+0x33c>
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2201      	movs	r2, #1
 800903c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009040:	f7fc fb76 	bl	8005730 <HAL_GetTick>
 8009044:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800904c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009056:	887b      	ldrh	r3, [r7, #2]
 8009058:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800905a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800905e:	2b01      	cmp	r3, #1
 8009060:	d00f      	beq.n	8009082 <HAL_SPI_TransmitReceive+0x70>
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009068:	d107      	bne.n	800907a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d103      	bne.n	800907a <HAL_SPI_TransmitReceive+0x68>
 8009072:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009076:	2b04      	cmp	r3, #4
 8009078:	d003      	beq.n	8009082 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800907a:	2302      	movs	r3, #2
 800907c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009080:	e15b      	b.n	800933a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d005      	beq.n	8009094 <HAL_SPI_TransmitReceive+0x82>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d002      	beq.n	8009094 <HAL_SPI_TransmitReceive+0x82>
 800908e:	887b      	ldrh	r3, [r7, #2]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d103      	bne.n	800909c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800909a:	e14e      	b.n	800933a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	2b04      	cmp	r3, #4
 80090a6:	d003      	beq.n	80090b0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2205      	movs	r2, #5
 80090ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2200      	movs	r2, #0
 80090b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	887a      	ldrh	r2, [r7, #2]
 80090c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	887a      	ldrh	r2, [r7, #2]
 80090c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	887a      	ldrh	r2, [r7, #2]
 80090d2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	887a      	ldrh	r2, [r7, #2]
 80090d8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2200      	movs	r2, #0
 80090de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2200      	movs	r2, #0
 80090e4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090f0:	2b40      	cmp	r3, #64	; 0x40
 80090f2:	d007      	beq.n	8009104 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009102:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800910c:	d178      	bne.n	8009200 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d002      	beq.n	800911c <HAL_SPI_TransmitReceive+0x10a>
 8009116:	8b7b      	ldrh	r3, [r7, #26]
 8009118:	2b01      	cmp	r3, #1
 800911a:	d166      	bne.n	80091ea <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009120:	881a      	ldrh	r2, [r3, #0]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800912c:	1c9a      	adds	r2, r3, #2
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009136:	b29b      	uxth	r3, r3
 8009138:	3b01      	subs	r3, #1
 800913a:	b29a      	uxth	r2, r3
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009140:	e053      	b.n	80091ea <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	f003 0302 	and.w	r3, r3, #2
 800914c:	2b02      	cmp	r3, #2
 800914e:	d11b      	bne.n	8009188 <HAL_SPI_TransmitReceive+0x176>
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009154:	b29b      	uxth	r3, r3
 8009156:	2b00      	cmp	r3, #0
 8009158:	d016      	beq.n	8009188 <HAL_SPI_TransmitReceive+0x176>
 800915a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915c:	2b01      	cmp	r3, #1
 800915e:	d113      	bne.n	8009188 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009164:	881a      	ldrh	r2, [r3, #0]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009170:	1c9a      	adds	r2, r3, #2
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800917a:	b29b      	uxth	r3, r3
 800917c:	3b01      	subs	r3, #1
 800917e:	b29a      	uxth	r2, r3
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009184:	2300      	movs	r3, #0
 8009186:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	f003 0301 	and.w	r3, r3, #1
 8009192:	2b01      	cmp	r3, #1
 8009194:	d119      	bne.n	80091ca <HAL_SPI_TransmitReceive+0x1b8>
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800919a:	b29b      	uxth	r3, r3
 800919c:	2b00      	cmp	r3, #0
 800919e:	d014      	beq.n	80091ca <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	68da      	ldr	r2, [r3, #12]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091aa:	b292      	uxth	r2, r2
 80091ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b2:	1c9a      	adds	r2, r3, #2
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091bc:	b29b      	uxth	r3, r3
 80091be:	3b01      	subs	r3, #1
 80091c0:	b29a      	uxth	r2, r3
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80091c6:	2301      	movs	r3, #1
 80091c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80091ca:	f7fc fab1 	bl	8005730 <HAL_GetTick>
 80091ce:	4602      	mov	r2, r0
 80091d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d2:	1ad3      	subs	r3, r2, r3
 80091d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d807      	bhi.n	80091ea <HAL_SPI_TransmitReceive+0x1d8>
 80091da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e0:	d003      	beq.n	80091ea <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80091e2:	2303      	movs	r3, #3
 80091e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80091e8:	e0a7      	b.n	800933a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d1a6      	bne.n	8009142 <HAL_SPI_TransmitReceive+0x130>
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d1a1      	bne.n	8009142 <HAL_SPI_TransmitReceive+0x130>
 80091fe:	e07c      	b.n	80092fa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d002      	beq.n	800920e <HAL_SPI_TransmitReceive+0x1fc>
 8009208:	8b7b      	ldrh	r3, [r7, #26]
 800920a:	2b01      	cmp	r3, #1
 800920c:	d16b      	bne.n	80092e6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	330c      	adds	r3, #12
 8009218:	7812      	ldrb	r2, [r2, #0]
 800921a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009220:	1c5a      	adds	r2, r3, #1
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800922a:	b29b      	uxth	r3, r3
 800922c:	3b01      	subs	r3, #1
 800922e:	b29a      	uxth	r2, r3
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009234:	e057      	b.n	80092e6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	f003 0302 	and.w	r3, r3, #2
 8009240:	2b02      	cmp	r3, #2
 8009242:	d11c      	bne.n	800927e <HAL_SPI_TransmitReceive+0x26c>
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009248:	b29b      	uxth	r3, r3
 800924a:	2b00      	cmp	r3, #0
 800924c:	d017      	beq.n	800927e <HAL_SPI_TransmitReceive+0x26c>
 800924e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009250:	2b01      	cmp	r3, #1
 8009252:	d114      	bne.n	800927e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	330c      	adds	r3, #12
 800925e:	7812      	ldrb	r2, [r2, #0]
 8009260:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009266:	1c5a      	adds	r2, r3, #1
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009270:	b29b      	uxth	r3, r3
 8009272:	3b01      	subs	r3, #1
 8009274:	b29a      	uxth	r2, r3
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800927a:	2300      	movs	r3, #0
 800927c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	f003 0301 	and.w	r3, r3, #1
 8009288:	2b01      	cmp	r3, #1
 800928a:	d119      	bne.n	80092c0 <HAL_SPI_TransmitReceive+0x2ae>
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009290:	b29b      	uxth	r3, r3
 8009292:	2b00      	cmp	r3, #0
 8009294:	d014      	beq.n	80092c0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	68da      	ldr	r2, [r3, #12]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a0:	b2d2      	uxtb	r2, r2
 80092a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a8:	1c5a      	adds	r2, r3, #1
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	3b01      	subs	r3, #1
 80092b6:	b29a      	uxth	r2, r3
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80092bc:	2301      	movs	r3, #1
 80092be:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80092c0:	f7fc fa36 	bl	8005730 <HAL_GetTick>
 80092c4:	4602      	mov	r2, r0
 80092c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c8:	1ad3      	subs	r3, r2, r3
 80092ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d803      	bhi.n	80092d8 <HAL_SPI_TransmitReceive+0x2c6>
 80092d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d6:	d102      	bne.n	80092de <HAL_SPI_TransmitReceive+0x2cc>
 80092d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d103      	bne.n	80092e6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80092de:	2303      	movs	r3, #3
 80092e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80092e4:	e029      	b.n	800933a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d1a2      	bne.n	8009236 <HAL_SPI_TransmitReceive+0x224>
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d19d      	bne.n	8009236 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80092fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80092fe:	68f8      	ldr	r0, [r7, #12]
 8009300:	f000 f918 	bl	8009534 <SPI_EndRxTxTransaction>
 8009304:	4603      	mov	r3, r0
 8009306:	2b00      	cmp	r3, #0
 8009308:	d006      	beq.n	8009318 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2220      	movs	r2, #32
 8009314:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009316:	e010      	b.n	800933a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d10b      	bne.n	8009338 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009320:	2300      	movs	r3, #0
 8009322:	617b      	str	r3, [r7, #20]
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	617b      	str	r3, [r7, #20]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	617b      	str	r3, [r7, #20]
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	e000      	b.n	800933a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009338:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2201      	movs	r2, #1
 800933e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2200      	movs	r2, #0
 8009346:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800934a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800934e:	4618      	mov	r0, r3
 8009350:	3730      	adds	r7, #48	; 0x30
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
	...

08009358 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b088      	sub	sp, #32
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	603b      	str	r3, [r7, #0]
 8009364:	4613      	mov	r3, r2
 8009366:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009368:	f7fc f9e2 	bl	8005730 <HAL_GetTick>
 800936c:	4602      	mov	r2, r0
 800936e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009370:	1a9b      	subs	r3, r3, r2
 8009372:	683a      	ldr	r2, [r7, #0]
 8009374:	4413      	add	r3, r2
 8009376:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009378:	f7fc f9da 	bl	8005730 <HAL_GetTick>
 800937c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800937e:	4b39      	ldr	r3, [pc, #228]	; (8009464 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	015b      	lsls	r3, r3, #5
 8009384:	0d1b      	lsrs	r3, r3, #20
 8009386:	69fa      	ldr	r2, [r7, #28]
 8009388:	fb02 f303 	mul.w	r3, r2, r3
 800938c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800938e:	e054      	b.n	800943a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009396:	d050      	beq.n	800943a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009398:	f7fc f9ca 	bl	8005730 <HAL_GetTick>
 800939c:	4602      	mov	r2, r0
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	1ad3      	subs	r3, r2, r3
 80093a2:	69fa      	ldr	r2, [r7, #28]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d902      	bls.n	80093ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80093a8:	69fb      	ldr	r3, [r7, #28]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d13d      	bne.n	800942a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	685a      	ldr	r2, [r3, #4]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80093bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093c6:	d111      	bne.n	80093ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093d0:	d004      	beq.n	80093dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093da:	d107      	bne.n	80093ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093f4:	d10f      	bne.n	8009416 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009404:	601a      	str	r2, [r3, #0]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009414:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2201      	movs	r2, #1
 800941a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2200      	movs	r2, #0
 8009422:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009426:	2303      	movs	r3, #3
 8009428:	e017      	b.n	800945a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d101      	bne.n	8009434 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009430:	2300      	movs	r3, #0
 8009432:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	3b01      	subs	r3, #1
 8009438:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	689a      	ldr	r2, [r3, #8]
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	4013      	ands	r3, r2
 8009444:	68ba      	ldr	r2, [r7, #8]
 8009446:	429a      	cmp	r2, r3
 8009448:	bf0c      	ite	eq
 800944a:	2301      	moveq	r3, #1
 800944c:	2300      	movne	r3, #0
 800944e:	b2db      	uxtb	r3, r3
 8009450:	461a      	mov	r2, r3
 8009452:	79fb      	ldrb	r3, [r7, #7]
 8009454:	429a      	cmp	r2, r3
 8009456:	d19b      	bne.n	8009390 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009458:	2300      	movs	r3, #0
}
 800945a:	4618      	mov	r0, r3
 800945c:	3720      	adds	r7, #32
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	20000004 	.word	0x20000004

08009468 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b086      	sub	sp, #24
 800946c:	af02      	add	r7, sp, #8
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800947c:	d111      	bne.n	80094a2 <SPI_EndRxTransaction+0x3a>
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009486:	d004      	beq.n	8009492 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009490:	d107      	bne.n	80094a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094a0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094aa:	d12a      	bne.n	8009502 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094b4:	d012      	beq.n	80094dc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	9300      	str	r3, [sp, #0]
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	2200      	movs	r2, #0
 80094be:	2180      	movs	r1, #128	; 0x80
 80094c0:	68f8      	ldr	r0, [r7, #12]
 80094c2:	f7ff ff49 	bl	8009358 <SPI_WaitFlagStateUntilTimeout>
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d02d      	beq.n	8009528 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094d0:	f043 0220 	orr.w	r2, r3, #32
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80094d8:	2303      	movs	r3, #3
 80094da:	e026      	b.n	800952a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	9300      	str	r3, [sp, #0]
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	2200      	movs	r2, #0
 80094e4:	2101      	movs	r1, #1
 80094e6:	68f8      	ldr	r0, [r7, #12]
 80094e8:	f7ff ff36 	bl	8009358 <SPI_WaitFlagStateUntilTimeout>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d01a      	beq.n	8009528 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094f6:	f043 0220 	orr.w	r2, r3, #32
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80094fe:	2303      	movs	r3, #3
 8009500:	e013      	b.n	800952a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	9300      	str	r3, [sp, #0]
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	2200      	movs	r2, #0
 800950a:	2101      	movs	r1, #1
 800950c:	68f8      	ldr	r0, [r7, #12]
 800950e:	f7ff ff23 	bl	8009358 <SPI_WaitFlagStateUntilTimeout>
 8009512:	4603      	mov	r3, r0
 8009514:	2b00      	cmp	r3, #0
 8009516:	d007      	beq.n	8009528 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800951c:	f043 0220 	orr.w	r2, r3, #32
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009524:	2303      	movs	r3, #3
 8009526:	e000      	b.n	800952a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3710      	adds	r7, #16
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
	...

08009534 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b088      	sub	sp, #32
 8009538:	af02      	add	r7, sp, #8
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009540:	4b1b      	ldr	r3, [pc, #108]	; (80095b0 <SPI_EndRxTxTransaction+0x7c>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a1b      	ldr	r2, [pc, #108]	; (80095b4 <SPI_EndRxTxTransaction+0x80>)
 8009546:	fba2 2303 	umull	r2, r3, r2, r3
 800954a:	0d5b      	lsrs	r3, r3, #21
 800954c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009550:	fb02 f303 	mul.w	r3, r2, r3
 8009554:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800955e:	d112      	bne.n	8009586 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	9300      	str	r3, [sp, #0]
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	2200      	movs	r2, #0
 8009568:	2180      	movs	r1, #128	; 0x80
 800956a:	68f8      	ldr	r0, [r7, #12]
 800956c:	f7ff fef4 	bl	8009358 <SPI_WaitFlagStateUntilTimeout>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d016      	beq.n	80095a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800957a:	f043 0220 	orr.w	r2, r3, #32
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009582:	2303      	movs	r3, #3
 8009584:	e00f      	b.n	80095a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00a      	beq.n	80095a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	3b01      	subs	r3, #1
 8009590:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800959c:	2b80      	cmp	r3, #128	; 0x80
 800959e:	d0f2      	beq.n	8009586 <SPI_EndRxTxTransaction+0x52>
 80095a0:	e000      	b.n	80095a4 <SPI_EndRxTxTransaction+0x70>
        break;
 80095a2:	bf00      	nop
  }

  return HAL_OK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3718      	adds	r7, #24
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	20000004 	.word	0x20000004
 80095b4:	165e9f81 	.word	0x165e9f81

080095b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d101      	bne.n	80095ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80095c6:	2301      	movs	r3, #1
 80095c8:	e03f      	b.n	800964a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d106      	bne.n	80095e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f7fa f9fc 	bl	80039dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2224      	movs	r2, #36	; 0x24
 80095e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	68da      	ldr	r2, [r3, #12]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 f929 	bl	8009854 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	691a      	ldr	r2, [r3, #16]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009610:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	695a      	ldr	r2, [r3, #20]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009620:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	68da      	ldr	r2, [r3, #12]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009630:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2200      	movs	r2, #0
 8009636:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2220      	movs	r2, #32
 800963c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2220      	movs	r2, #32
 8009644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009648:	2300      	movs	r3, #0
}
 800964a:	4618      	mov	r0, r3
 800964c:	3708      	adds	r7, #8
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b08a      	sub	sp, #40	; 0x28
 8009656:	af02      	add	r7, sp, #8
 8009658:	60f8      	str	r0, [r7, #12]
 800965a:	60b9      	str	r1, [r7, #8]
 800965c:	603b      	str	r3, [r7, #0]
 800965e:	4613      	mov	r3, r2
 8009660:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009662:	2300      	movs	r3, #0
 8009664:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800966c:	b2db      	uxtb	r3, r3
 800966e:	2b20      	cmp	r3, #32
 8009670:	d17c      	bne.n	800976c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d002      	beq.n	800967e <HAL_UART_Transmit+0x2c>
 8009678:	88fb      	ldrh	r3, [r7, #6]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d101      	bne.n	8009682 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	e075      	b.n	800976e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009688:	2b01      	cmp	r3, #1
 800968a:	d101      	bne.n	8009690 <HAL_UART_Transmit+0x3e>
 800968c:	2302      	movs	r3, #2
 800968e:	e06e      	b.n	800976e <HAL_UART_Transmit+0x11c>
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2200      	movs	r2, #0
 800969c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2221      	movs	r2, #33	; 0x21
 80096a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80096a6:	f7fc f843 	bl	8005730 <HAL_GetTick>
 80096aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	88fa      	ldrh	r2, [r7, #6]
 80096b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	88fa      	ldrh	r2, [r7, #6]
 80096b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096c0:	d108      	bne.n	80096d4 <HAL_UART_Transmit+0x82>
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d104      	bne.n	80096d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80096ca:	2300      	movs	r3, #0
 80096cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	61bb      	str	r3, [r7, #24]
 80096d2:	e003      	b.n	80096dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80096d8:	2300      	movs	r3, #0
 80096da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2200      	movs	r2, #0
 80096e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80096e4:	e02a      	b.n	800973c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	9300      	str	r3, [sp, #0]
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	2200      	movs	r2, #0
 80096ee:	2180      	movs	r1, #128	; 0x80
 80096f0:	68f8      	ldr	r0, [r7, #12]
 80096f2:	f000 f840 	bl	8009776 <UART_WaitOnFlagUntilTimeout>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d001      	beq.n	8009700 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80096fc:	2303      	movs	r3, #3
 80096fe:	e036      	b.n	800976e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d10b      	bne.n	800971e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	881b      	ldrh	r3, [r3, #0]
 800970a:	461a      	mov	r2, r3
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009714:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	3302      	adds	r3, #2
 800971a:	61bb      	str	r3, [r7, #24]
 800971c:	e007      	b.n	800972e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800971e:	69fb      	ldr	r3, [r7, #28]
 8009720:	781a      	ldrb	r2, [r3, #0]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	3301      	adds	r3, #1
 800972c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009732:	b29b      	uxth	r3, r3
 8009734:	3b01      	subs	r3, #1
 8009736:	b29a      	uxth	r2, r3
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009740:	b29b      	uxth	r3, r3
 8009742:	2b00      	cmp	r3, #0
 8009744:	d1cf      	bne.n	80096e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	9300      	str	r3, [sp, #0]
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	2200      	movs	r2, #0
 800974e:	2140      	movs	r1, #64	; 0x40
 8009750:	68f8      	ldr	r0, [r7, #12]
 8009752:	f000 f810 	bl	8009776 <UART_WaitOnFlagUntilTimeout>
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d001      	beq.n	8009760 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800975c:	2303      	movs	r3, #3
 800975e:	e006      	b.n	800976e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2220      	movs	r2, #32
 8009764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009768:	2300      	movs	r3, #0
 800976a:	e000      	b.n	800976e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800976c:	2302      	movs	r3, #2
  }
}
 800976e:	4618      	mov	r0, r3
 8009770:	3720      	adds	r7, #32
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b090      	sub	sp, #64	; 0x40
 800977a:	af00      	add	r7, sp, #0
 800977c:	60f8      	str	r0, [r7, #12]
 800977e:	60b9      	str	r1, [r7, #8]
 8009780:	603b      	str	r3, [r7, #0]
 8009782:	4613      	mov	r3, r2
 8009784:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009786:	e050      	b.n	800982a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009788:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800978a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800978e:	d04c      	beq.n	800982a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009792:	2b00      	cmp	r3, #0
 8009794:	d007      	beq.n	80097a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8009796:	f7fb ffcb 	bl	8005730 <HAL_GetTick>
 800979a:	4602      	mov	r2, r0
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	1ad3      	subs	r3, r2, r3
 80097a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d241      	bcs.n	800982a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	330c      	adds	r3, #12
 80097ac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b0:	e853 3f00 	ldrex	r3, [r3]
 80097b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80097bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	330c      	adds	r3, #12
 80097c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80097c6:	637a      	str	r2, [r7, #52]	; 0x34
 80097c8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80097cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097ce:	e841 2300 	strex	r3, r2, [r1]
 80097d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80097d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d1e5      	bne.n	80097a6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	3314      	adds	r3, #20
 80097e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	e853 3f00 	ldrex	r3, [r3]
 80097e8:	613b      	str	r3, [r7, #16]
   return(result);
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	f023 0301 	bic.w	r3, r3, #1
 80097f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	3314      	adds	r3, #20
 80097f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097fa:	623a      	str	r2, [r7, #32]
 80097fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097fe:	69f9      	ldr	r1, [r7, #28]
 8009800:	6a3a      	ldr	r2, [r7, #32]
 8009802:	e841 2300 	strex	r3, r2, [r1]
 8009806:	61bb      	str	r3, [r7, #24]
   return(result);
 8009808:	69bb      	ldr	r3, [r7, #24]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d1e5      	bne.n	80097da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2220      	movs	r2, #32
 8009812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2220      	movs	r2, #32
 800981a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2200      	movs	r2, #0
 8009822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009826:	2303      	movs	r3, #3
 8009828:	e00f      	b.n	800984a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	4013      	ands	r3, r2
 8009834:	68ba      	ldr	r2, [r7, #8]
 8009836:	429a      	cmp	r2, r3
 8009838:	bf0c      	ite	eq
 800983a:	2301      	moveq	r3, #1
 800983c:	2300      	movne	r3, #0
 800983e:	b2db      	uxtb	r3, r3
 8009840:	461a      	mov	r2, r3
 8009842:	79fb      	ldrb	r3, [r7, #7]
 8009844:	429a      	cmp	r2, r3
 8009846:	d09f      	beq.n	8009788 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3740      	adds	r7, #64	; 0x40
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
	...

08009854 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009858:	b09f      	sub	sp, #124	; 0x7c
 800985a:	af00      	add	r7, sp, #0
 800985c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800985e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	691b      	ldr	r3, [r3, #16]
 8009864:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800986a:	68d9      	ldr	r1, [r3, #12]
 800986c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	ea40 0301 	orr.w	r3, r0, r1
 8009874:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009878:	689a      	ldr	r2, [r3, #8]
 800987a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800987c:	691b      	ldr	r3, [r3, #16]
 800987e:	431a      	orrs	r2, r3
 8009880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009882:	695b      	ldr	r3, [r3, #20]
 8009884:	431a      	orrs	r2, r3
 8009886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009888:	69db      	ldr	r3, [r3, #28]
 800988a:	4313      	orrs	r3, r2
 800988c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800988e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	68db      	ldr	r3, [r3, #12]
 8009894:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009898:	f021 010c 	bic.w	r1, r1, #12
 800989c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80098a2:	430b      	orrs	r3, r1
 80098a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80098a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	695b      	ldr	r3, [r3, #20]
 80098ac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80098b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098b2:	6999      	ldr	r1, [r3, #24]
 80098b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	ea40 0301 	orr.w	r3, r0, r1
 80098bc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80098be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	4bc5      	ldr	r3, [pc, #788]	; (8009bd8 <UART_SetConfig+0x384>)
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d004      	beq.n	80098d2 <UART_SetConfig+0x7e>
 80098c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	4bc3      	ldr	r3, [pc, #780]	; (8009bdc <UART_SetConfig+0x388>)
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d103      	bne.n	80098da <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80098d2:	f7fd ff2d 	bl	8007730 <HAL_RCC_GetPCLK2Freq>
 80098d6:	6778      	str	r0, [r7, #116]	; 0x74
 80098d8:	e002      	b.n	80098e0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80098da:	f7fd ff15 	bl	8007708 <HAL_RCC_GetPCLK1Freq>
 80098de:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80098e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098e2:	69db      	ldr	r3, [r3, #28]
 80098e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098e8:	f040 80b6 	bne.w	8009a58 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80098ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098ee:	461c      	mov	r4, r3
 80098f0:	f04f 0500 	mov.w	r5, #0
 80098f4:	4622      	mov	r2, r4
 80098f6:	462b      	mov	r3, r5
 80098f8:	1891      	adds	r1, r2, r2
 80098fa:	6439      	str	r1, [r7, #64]	; 0x40
 80098fc:	415b      	adcs	r3, r3
 80098fe:	647b      	str	r3, [r7, #68]	; 0x44
 8009900:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009904:	1912      	adds	r2, r2, r4
 8009906:	eb45 0303 	adc.w	r3, r5, r3
 800990a:	f04f 0000 	mov.w	r0, #0
 800990e:	f04f 0100 	mov.w	r1, #0
 8009912:	00d9      	lsls	r1, r3, #3
 8009914:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009918:	00d0      	lsls	r0, r2, #3
 800991a:	4602      	mov	r2, r0
 800991c:	460b      	mov	r3, r1
 800991e:	1911      	adds	r1, r2, r4
 8009920:	6639      	str	r1, [r7, #96]	; 0x60
 8009922:	416b      	adcs	r3, r5
 8009924:	667b      	str	r3, [r7, #100]	; 0x64
 8009926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	461a      	mov	r2, r3
 800992c:	f04f 0300 	mov.w	r3, #0
 8009930:	1891      	adds	r1, r2, r2
 8009932:	63b9      	str	r1, [r7, #56]	; 0x38
 8009934:	415b      	adcs	r3, r3
 8009936:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009938:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800993c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009940:	f7f7 f9ba 	bl	8000cb8 <__aeabi_uldivmod>
 8009944:	4602      	mov	r2, r0
 8009946:	460b      	mov	r3, r1
 8009948:	4ba5      	ldr	r3, [pc, #660]	; (8009be0 <UART_SetConfig+0x38c>)
 800994a:	fba3 2302 	umull	r2, r3, r3, r2
 800994e:	095b      	lsrs	r3, r3, #5
 8009950:	011e      	lsls	r6, r3, #4
 8009952:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009954:	461c      	mov	r4, r3
 8009956:	f04f 0500 	mov.w	r5, #0
 800995a:	4622      	mov	r2, r4
 800995c:	462b      	mov	r3, r5
 800995e:	1891      	adds	r1, r2, r2
 8009960:	6339      	str	r1, [r7, #48]	; 0x30
 8009962:	415b      	adcs	r3, r3
 8009964:	637b      	str	r3, [r7, #52]	; 0x34
 8009966:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800996a:	1912      	adds	r2, r2, r4
 800996c:	eb45 0303 	adc.w	r3, r5, r3
 8009970:	f04f 0000 	mov.w	r0, #0
 8009974:	f04f 0100 	mov.w	r1, #0
 8009978:	00d9      	lsls	r1, r3, #3
 800997a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800997e:	00d0      	lsls	r0, r2, #3
 8009980:	4602      	mov	r2, r0
 8009982:	460b      	mov	r3, r1
 8009984:	1911      	adds	r1, r2, r4
 8009986:	65b9      	str	r1, [r7, #88]	; 0x58
 8009988:	416b      	adcs	r3, r5
 800998a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800998c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	461a      	mov	r2, r3
 8009992:	f04f 0300 	mov.w	r3, #0
 8009996:	1891      	adds	r1, r2, r2
 8009998:	62b9      	str	r1, [r7, #40]	; 0x28
 800999a:	415b      	adcs	r3, r3
 800999c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800999e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80099a2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80099a6:	f7f7 f987 	bl	8000cb8 <__aeabi_uldivmod>
 80099aa:	4602      	mov	r2, r0
 80099ac:	460b      	mov	r3, r1
 80099ae:	4b8c      	ldr	r3, [pc, #560]	; (8009be0 <UART_SetConfig+0x38c>)
 80099b0:	fba3 1302 	umull	r1, r3, r3, r2
 80099b4:	095b      	lsrs	r3, r3, #5
 80099b6:	2164      	movs	r1, #100	; 0x64
 80099b8:	fb01 f303 	mul.w	r3, r1, r3
 80099bc:	1ad3      	subs	r3, r2, r3
 80099be:	00db      	lsls	r3, r3, #3
 80099c0:	3332      	adds	r3, #50	; 0x32
 80099c2:	4a87      	ldr	r2, [pc, #540]	; (8009be0 <UART_SetConfig+0x38c>)
 80099c4:	fba2 2303 	umull	r2, r3, r2, r3
 80099c8:	095b      	lsrs	r3, r3, #5
 80099ca:	005b      	lsls	r3, r3, #1
 80099cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80099d0:	441e      	add	r6, r3
 80099d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099d4:	4618      	mov	r0, r3
 80099d6:	f04f 0100 	mov.w	r1, #0
 80099da:	4602      	mov	r2, r0
 80099dc:	460b      	mov	r3, r1
 80099de:	1894      	adds	r4, r2, r2
 80099e0:	623c      	str	r4, [r7, #32]
 80099e2:	415b      	adcs	r3, r3
 80099e4:	627b      	str	r3, [r7, #36]	; 0x24
 80099e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80099ea:	1812      	adds	r2, r2, r0
 80099ec:	eb41 0303 	adc.w	r3, r1, r3
 80099f0:	f04f 0400 	mov.w	r4, #0
 80099f4:	f04f 0500 	mov.w	r5, #0
 80099f8:	00dd      	lsls	r5, r3, #3
 80099fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80099fe:	00d4      	lsls	r4, r2, #3
 8009a00:	4622      	mov	r2, r4
 8009a02:	462b      	mov	r3, r5
 8009a04:	1814      	adds	r4, r2, r0
 8009a06:	653c      	str	r4, [r7, #80]	; 0x50
 8009a08:	414b      	adcs	r3, r1
 8009a0a:	657b      	str	r3, [r7, #84]	; 0x54
 8009a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	461a      	mov	r2, r3
 8009a12:	f04f 0300 	mov.w	r3, #0
 8009a16:	1891      	adds	r1, r2, r2
 8009a18:	61b9      	str	r1, [r7, #24]
 8009a1a:	415b      	adcs	r3, r3
 8009a1c:	61fb      	str	r3, [r7, #28]
 8009a1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009a22:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009a26:	f7f7 f947 	bl	8000cb8 <__aeabi_uldivmod>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	4b6c      	ldr	r3, [pc, #432]	; (8009be0 <UART_SetConfig+0x38c>)
 8009a30:	fba3 1302 	umull	r1, r3, r3, r2
 8009a34:	095b      	lsrs	r3, r3, #5
 8009a36:	2164      	movs	r1, #100	; 0x64
 8009a38:	fb01 f303 	mul.w	r3, r1, r3
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	00db      	lsls	r3, r3, #3
 8009a40:	3332      	adds	r3, #50	; 0x32
 8009a42:	4a67      	ldr	r2, [pc, #412]	; (8009be0 <UART_SetConfig+0x38c>)
 8009a44:	fba2 2303 	umull	r2, r3, r2, r3
 8009a48:	095b      	lsrs	r3, r3, #5
 8009a4a:	f003 0207 	and.w	r2, r3, #7
 8009a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4432      	add	r2, r6
 8009a54:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009a56:	e0b9      	b.n	8009bcc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a5a:	461c      	mov	r4, r3
 8009a5c:	f04f 0500 	mov.w	r5, #0
 8009a60:	4622      	mov	r2, r4
 8009a62:	462b      	mov	r3, r5
 8009a64:	1891      	adds	r1, r2, r2
 8009a66:	6139      	str	r1, [r7, #16]
 8009a68:	415b      	adcs	r3, r3
 8009a6a:	617b      	str	r3, [r7, #20]
 8009a6c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009a70:	1912      	adds	r2, r2, r4
 8009a72:	eb45 0303 	adc.w	r3, r5, r3
 8009a76:	f04f 0000 	mov.w	r0, #0
 8009a7a:	f04f 0100 	mov.w	r1, #0
 8009a7e:	00d9      	lsls	r1, r3, #3
 8009a80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009a84:	00d0      	lsls	r0, r2, #3
 8009a86:	4602      	mov	r2, r0
 8009a88:	460b      	mov	r3, r1
 8009a8a:	eb12 0804 	adds.w	r8, r2, r4
 8009a8e:	eb43 0905 	adc.w	r9, r3, r5
 8009a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	4618      	mov	r0, r3
 8009a98:	f04f 0100 	mov.w	r1, #0
 8009a9c:	f04f 0200 	mov.w	r2, #0
 8009aa0:	f04f 0300 	mov.w	r3, #0
 8009aa4:	008b      	lsls	r3, r1, #2
 8009aa6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009aaa:	0082      	lsls	r2, r0, #2
 8009aac:	4640      	mov	r0, r8
 8009aae:	4649      	mov	r1, r9
 8009ab0:	f7f7 f902 	bl	8000cb8 <__aeabi_uldivmod>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	460b      	mov	r3, r1
 8009ab8:	4b49      	ldr	r3, [pc, #292]	; (8009be0 <UART_SetConfig+0x38c>)
 8009aba:	fba3 2302 	umull	r2, r3, r3, r2
 8009abe:	095b      	lsrs	r3, r3, #5
 8009ac0:	011e      	lsls	r6, r3, #4
 8009ac2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f04f 0100 	mov.w	r1, #0
 8009aca:	4602      	mov	r2, r0
 8009acc:	460b      	mov	r3, r1
 8009ace:	1894      	adds	r4, r2, r2
 8009ad0:	60bc      	str	r4, [r7, #8]
 8009ad2:	415b      	adcs	r3, r3
 8009ad4:	60fb      	str	r3, [r7, #12]
 8009ad6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009ada:	1812      	adds	r2, r2, r0
 8009adc:	eb41 0303 	adc.w	r3, r1, r3
 8009ae0:	f04f 0400 	mov.w	r4, #0
 8009ae4:	f04f 0500 	mov.w	r5, #0
 8009ae8:	00dd      	lsls	r5, r3, #3
 8009aea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009aee:	00d4      	lsls	r4, r2, #3
 8009af0:	4622      	mov	r2, r4
 8009af2:	462b      	mov	r3, r5
 8009af4:	1814      	adds	r4, r2, r0
 8009af6:	64bc      	str	r4, [r7, #72]	; 0x48
 8009af8:	414b      	adcs	r3, r1
 8009afa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	4618      	mov	r0, r3
 8009b02:	f04f 0100 	mov.w	r1, #0
 8009b06:	f04f 0200 	mov.w	r2, #0
 8009b0a:	f04f 0300 	mov.w	r3, #0
 8009b0e:	008b      	lsls	r3, r1, #2
 8009b10:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009b14:	0082      	lsls	r2, r0, #2
 8009b16:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009b1a:	f7f7 f8cd 	bl	8000cb8 <__aeabi_uldivmod>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	460b      	mov	r3, r1
 8009b22:	4b2f      	ldr	r3, [pc, #188]	; (8009be0 <UART_SetConfig+0x38c>)
 8009b24:	fba3 1302 	umull	r1, r3, r3, r2
 8009b28:	095b      	lsrs	r3, r3, #5
 8009b2a:	2164      	movs	r1, #100	; 0x64
 8009b2c:	fb01 f303 	mul.w	r3, r1, r3
 8009b30:	1ad3      	subs	r3, r2, r3
 8009b32:	011b      	lsls	r3, r3, #4
 8009b34:	3332      	adds	r3, #50	; 0x32
 8009b36:	4a2a      	ldr	r2, [pc, #168]	; (8009be0 <UART_SetConfig+0x38c>)
 8009b38:	fba2 2303 	umull	r2, r3, r2, r3
 8009b3c:	095b      	lsrs	r3, r3, #5
 8009b3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b42:	441e      	add	r6, r3
 8009b44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b46:	4618      	mov	r0, r3
 8009b48:	f04f 0100 	mov.w	r1, #0
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	460b      	mov	r3, r1
 8009b50:	1894      	adds	r4, r2, r2
 8009b52:	603c      	str	r4, [r7, #0]
 8009b54:	415b      	adcs	r3, r3
 8009b56:	607b      	str	r3, [r7, #4]
 8009b58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b5c:	1812      	adds	r2, r2, r0
 8009b5e:	eb41 0303 	adc.w	r3, r1, r3
 8009b62:	f04f 0400 	mov.w	r4, #0
 8009b66:	f04f 0500 	mov.w	r5, #0
 8009b6a:	00dd      	lsls	r5, r3, #3
 8009b6c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009b70:	00d4      	lsls	r4, r2, #3
 8009b72:	4622      	mov	r2, r4
 8009b74:	462b      	mov	r3, r5
 8009b76:	eb12 0a00 	adds.w	sl, r2, r0
 8009b7a:	eb43 0b01 	adc.w	fp, r3, r1
 8009b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	4618      	mov	r0, r3
 8009b84:	f04f 0100 	mov.w	r1, #0
 8009b88:	f04f 0200 	mov.w	r2, #0
 8009b8c:	f04f 0300 	mov.w	r3, #0
 8009b90:	008b      	lsls	r3, r1, #2
 8009b92:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009b96:	0082      	lsls	r2, r0, #2
 8009b98:	4650      	mov	r0, sl
 8009b9a:	4659      	mov	r1, fp
 8009b9c:	f7f7 f88c 	bl	8000cb8 <__aeabi_uldivmod>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	4b0e      	ldr	r3, [pc, #56]	; (8009be0 <UART_SetConfig+0x38c>)
 8009ba6:	fba3 1302 	umull	r1, r3, r3, r2
 8009baa:	095b      	lsrs	r3, r3, #5
 8009bac:	2164      	movs	r1, #100	; 0x64
 8009bae:	fb01 f303 	mul.w	r3, r1, r3
 8009bb2:	1ad3      	subs	r3, r2, r3
 8009bb4:	011b      	lsls	r3, r3, #4
 8009bb6:	3332      	adds	r3, #50	; 0x32
 8009bb8:	4a09      	ldr	r2, [pc, #36]	; (8009be0 <UART_SetConfig+0x38c>)
 8009bba:	fba2 2303 	umull	r2, r3, r2, r3
 8009bbe:	095b      	lsrs	r3, r3, #5
 8009bc0:	f003 020f 	and.w	r2, r3, #15
 8009bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4432      	add	r2, r6
 8009bca:	609a      	str	r2, [r3, #8]
}
 8009bcc:	bf00      	nop
 8009bce:	377c      	adds	r7, #124	; 0x7c
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bd6:	bf00      	nop
 8009bd8:	40011000 	.word	0x40011000
 8009bdc:	40011400 	.word	0x40011400
 8009be0:	51eb851f 	.word	0x51eb851f

08009be4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009be4:	b084      	sub	sp, #16
 8009be6:	b480      	push	{r7}
 8009be8:	b085      	sub	sp, #20
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
 8009bee:	f107 001c 	add.w	r0, r7, #28
 8009bf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009bfa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009bfc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009bfe:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009c02:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009c06:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009c0a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009c0e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009c10:	68fa      	ldr	r2, [r7, #12]
 8009c12:	4313      	orrs	r3, r2
 8009c14:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8009c1e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009c22:	68fa      	ldr	r2, [r7, #12]
 8009c24:	431a      	orrs	r2, r3
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3714      	adds	r7, #20
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	b004      	add	sp, #16
 8009c38:	4770      	bx	lr

08009c3a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009c3a:	b480      	push	{r7}
 8009c3c:	b083      	sub	sp, #12
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	370c      	adds	r7, #12
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr

08009c54 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009c68:	2300      	movs	r3, #0
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	370c      	adds	r7, #12
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr

08009c76 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b082      	sub	sp, #8
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2203      	movs	r2, #3
 8009c82:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8009c84:	2002      	movs	r0, #2
 8009c86:	f7fb fd5f 	bl	8005748 <HAL_Delay>
  
  return HAL_OK;
 8009c8a:	2300      	movs	r3, #0
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009c94:	b480      	push	{r7}
 8009c96:	b083      	sub	sp, #12
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f003 0303 	and.w	r3, r3, #3
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	370c      	adds	r7, #12
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009cce:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009cd4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009cda:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	68db      	ldr	r3, [r3, #12]
 8009ce6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009cea:	f023 030f 	bic.w	r3, r3, #15
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	431a      	orrs	r2, r3
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009cf6:	2300      	movs	r3, #0
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3714      	adds	r7, #20
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	691b      	ldr	r3, [r3, #16]
 8009d10:	b2db      	uxtb	r3, r3
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	370c      	adds	r7, #12
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr

08009d1e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009d1e:	b480      	push	{r7}
 8009d20:	b085      	sub	sp, #20
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
 8009d26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	3314      	adds	r3, #20
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	4413      	add	r3, r2
 8009d32:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
}  
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3714      	adds	r7, #20
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b085      	sub	sp, #20
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	685a      	ldr	r2, [r3, #4]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009d6a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009d70:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009d76:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009d78:	68fa      	ldr	r2, [r7, #12]
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d82:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	431a      	orrs	r2, r3
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009d8e:	2300      	movs	r3, #0

}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3714      	adds	r7, #20
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b088      	sub	sp, #32
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009daa:	2310      	movs	r3, #16
 8009dac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009dae:	2340      	movs	r3, #64	; 0x40
 8009db0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009db2:	2300      	movs	r3, #0
 8009db4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009db6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009dbc:	f107 0308 	add.w	r3, r7, #8
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f7ff ff74 	bl	8009cb0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dcc:	2110      	movs	r1, #16
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 fa44 	bl	800a25c <SDMMC_GetCmdResp1>
 8009dd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009dd6:	69fb      	ldr	r3, [r7, #28]
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3720      	adds	r7, #32
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b088      	sub	sp, #32
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009dee:	2311      	movs	r3, #17
 8009df0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009df2:	2340      	movs	r3, #64	; 0x40
 8009df4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009df6:	2300      	movs	r3, #0
 8009df8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009dfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dfe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e00:	f107 0308 	add.w	r3, r7, #8
 8009e04:	4619      	mov	r1, r3
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f7ff ff52 	bl	8009cb0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e10:	2111      	movs	r1, #17
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 fa22 	bl	800a25c <SDMMC_GetCmdResp1>
 8009e18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e1a:	69fb      	ldr	r3, [r7, #28]
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3720      	adds	r7, #32
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b088      	sub	sp, #32
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009e32:	2312      	movs	r3, #18
 8009e34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e36:	2340      	movs	r3, #64	; 0x40
 8009e38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e44:	f107 0308 	add.w	r3, r7, #8
 8009e48:	4619      	mov	r1, r3
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f7ff ff30 	bl	8009cb0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e54:	2112      	movs	r1, #18
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 fa00 	bl	800a25c <SDMMC_GetCmdResp1>
 8009e5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e5e:	69fb      	ldr	r3, [r7, #28]
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3720      	adds	r7, #32
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b088      	sub	sp, #32
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009e76:	2318      	movs	r3, #24
 8009e78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e7a:	2340      	movs	r3, #64	; 0x40
 8009e7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e86:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e88:	f107 0308 	add.w	r3, r7, #8
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f7ff ff0e 	bl	8009cb0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e98:	2118      	movs	r1, #24
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 f9de 	bl	800a25c <SDMMC_GetCmdResp1>
 8009ea0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ea2:	69fb      	ldr	r3, [r7, #28]
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3720      	adds	r7, #32
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b088      	sub	sp, #32
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009eba:	2319      	movs	r3, #25
 8009ebc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ebe:	2340      	movs	r3, #64	; 0x40
 8009ec0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009eca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ecc:	f107 0308 	add.w	r3, r7, #8
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f7ff feec 	bl	8009cb0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009edc:	2119      	movs	r1, #25
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 f9bc 	bl	800a25c <SDMMC_GetCmdResp1>
 8009ee4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ee6:	69fb      	ldr	r3, [r7, #28]
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3720      	adds	r7, #32
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b088      	sub	sp, #32
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009efc:	230c      	movs	r3, #12
 8009efe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f00:	2340      	movs	r3, #64	; 0x40
 8009f02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f04:	2300      	movs	r3, #0
 8009f06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f0c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f0e:	f107 0308 	add.w	r3, r7, #8
 8009f12:	4619      	mov	r1, r3
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f7ff fecb 	bl	8009cb0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009f1a:	4a05      	ldr	r2, [pc, #20]	; (8009f30 <SDMMC_CmdStopTransfer+0x40>)
 8009f1c:	210c      	movs	r1, #12
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 f99c 	bl	800a25c <SDMMC_GetCmdResp1>
 8009f24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f26:	69fb      	ldr	r3, [r7, #28]
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3720      	adds	r7, #32
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}
 8009f30:	05f5e100 	.word	0x05f5e100

08009f34 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b08a      	sub	sp, #40	; 0x28
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009f44:	2307      	movs	r3, #7
 8009f46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f48:	2340      	movs	r3, #64	; 0x40
 8009f4a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f54:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f56:	f107 0310 	add.w	r3, r7, #16
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	f7ff fea7 	bl	8009cb0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f66:	2107      	movs	r1, #7
 8009f68:	68f8      	ldr	r0, [r7, #12]
 8009f6a:	f000 f977 	bl	800a25c <SDMMC_GetCmdResp1>
 8009f6e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3728      	adds	r7, #40	; 0x28
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b088      	sub	sp, #32
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009f82:	2300      	movs	r3, #0
 8009f84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009f86:	2300      	movs	r3, #0
 8009f88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f96:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f98:	f107 0308 	add.w	r3, r7, #8
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f7ff fe86 	bl	8009cb0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f000 f92d 	bl	800a204 <SDMMC_GetCmdError>
 8009faa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fac:	69fb      	ldr	r3, [r7, #28]
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3720      	adds	r7, #32
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}

08009fb6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009fb6:	b580      	push	{r7, lr}
 8009fb8:	b088      	sub	sp, #32
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009fbe:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009fc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009fc4:	2308      	movs	r3, #8
 8009fc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009fc8:	2340      	movs	r3, #64	; 0x40
 8009fca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009fd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fd4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009fd6:	f107 0308 	add.w	r3, r7, #8
 8009fda:	4619      	mov	r1, r3
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f7ff fe67 	bl	8009cb0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 fb24 	bl	800a630 <SDMMC_GetCmdResp7>
 8009fe8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fea:	69fb      	ldr	r3, [r7, #28]
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3720      	adds	r7, #32
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b088      	sub	sp, #32
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a002:	2337      	movs	r3, #55	; 0x37
 800a004:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a006:	2340      	movs	r3, #64	; 0x40
 800a008:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a00a:	2300      	movs	r3, #0
 800a00c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a00e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a012:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a014:	f107 0308 	add.w	r3, r7, #8
 800a018:	4619      	mov	r1, r3
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f7ff fe48 	bl	8009cb0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a020:	f241 3288 	movw	r2, #5000	; 0x1388
 800a024:	2137      	movs	r1, #55	; 0x37
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 f918 	bl	800a25c <SDMMC_GetCmdResp1>
 800a02c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a02e:	69fb      	ldr	r3, [r7, #28]
}
 800a030:	4618      	mov	r0, r3
 800a032:	3720      	adds	r7, #32
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b088      	sub	sp, #32
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a048:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a04c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a04e:	2329      	movs	r3, #41	; 0x29
 800a050:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a052:	2340      	movs	r3, #64	; 0x40
 800a054:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a056:	2300      	movs	r3, #0
 800a058:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a05a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a05e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a060:	f107 0308 	add.w	r3, r7, #8
 800a064:	4619      	mov	r1, r3
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f7ff fe22 	bl	8009cb0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 fa2b 	bl	800a4c8 <SDMMC_GetCmdResp3>
 800a072:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a074:	69fb      	ldr	r3, [r7, #28]
}
 800a076:	4618      	mov	r0, r3
 800a078:	3720      	adds	r7, #32
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b088      	sub	sp, #32
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
 800a086:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a08c:	2306      	movs	r3, #6
 800a08e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a090:	2340      	movs	r3, #64	; 0x40
 800a092:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a094:	2300      	movs	r3, #0
 800a096:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a098:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a09c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a09e:	f107 0308 	add.w	r3, r7, #8
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f7ff fe03 	bl	8009cb0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800a0aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0ae:	2106      	movs	r1, #6
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 f8d3 	bl	800a25c <SDMMC_GetCmdResp1>
 800a0b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0b8:	69fb      	ldr	r3, [r7, #28]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3720      	adds	r7, #32
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b088      	sub	sp, #32
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a0ce:	2333      	movs	r3, #51	; 0x33
 800a0d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a0d2:	2340      	movs	r3, #64	; 0x40
 800a0d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a0da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0e0:	f107 0308 	add.w	r3, r7, #8
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f7ff fde2 	bl	8009cb0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800a0ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0f0:	2133      	movs	r1, #51	; 0x33
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 f8b2 	bl	800a25c <SDMMC_GetCmdResp1>
 800a0f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0fa:	69fb      	ldr	r3, [r7, #28]
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3720      	adds	r7, #32
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b088      	sub	sp, #32
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a10c:	2300      	movs	r3, #0
 800a10e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a110:	2302      	movs	r3, #2
 800a112:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a114:	23c0      	movs	r3, #192	; 0xc0
 800a116:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a118:	2300      	movs	r3, #0
 800a11a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a11c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a120:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a122:	f107 0308 	add.w	r3, r7, #8
 800a126:	4619      	mov	r1, r3
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f7ff fdc1 	bl	8009cb0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 f982 	bl	800a438 <SDMMC_GetCmdResp2>
 800a134:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a136:	69fb      	ldr	r3, [r7, #28]
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3720      	adds	r7, #32
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b088      	sub	sp, #32
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a14e:	2309      	movs	r3, #9
 800a150:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a152:	23c0      	movs	r3, #192	; 0xc0
 800a154:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a156:	2300      	movs	r3, #0
 800a158:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a15a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a15e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a160:	f107 0308 	add.w	r3, r7, #8
 800a164:	4619      	mov	r1, r3
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f7ff fda2 	bl	8009cb0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f000 f963 	bl	800a438 <SDMMC_GetCmdResp2>
 800a172:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a174:	69fb      	ldr	r3, [r7, #28]
}
 800a176:	4618      	mov	r0, r3
 800a178:	3720      	adds	r7, #32
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}

0800a17e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a17e:	b580      	push	{r7, lr}
 800a180:	b088      	sub	sp, #32
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
 800a186:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a188:	2300      	movs	r3, #0
 800a18a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a18c:	2303      	movs	r3, #3
 800a18e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a190:	2340      	movs	r3, #64	; 0x40
 800a192:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a194:	2300      	movs	r3, #0
 800a196:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a198:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a19c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a19e:	f107 0308 	add.w	r3, r7, #8
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f7ff fd83 	bl	8009cb0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a1aa:	683a      	ldr	r2, [r7, #0]
 800a1ac:	2103      	movs	r1, #3
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f000 f9c8 	bl	800a544 <SDMMC_GetCmdResp6>
 800a1b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1b6:	69fb      	ldr	r3, [r7, #28]
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3720      	adds	r7, #32
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b088      	sub	sp, #32
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a1ce:	230d      	movs	r3, #13
 800a1d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a1d2:	2340      	movs	r3, #64	; 0x40
 800a1d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1e0:	f107 0308 	add.w	r3, r7, #8
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f7ff fd62 	bl	8009cb0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a1ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1f0:	210d      	movs	r1, #13
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 f832 	bl	800a25c <SDMMC_GetCmdResp1>
 800a1f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1fa:	69fb      	ldr	r3, [r7, #28]
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3720      	adds	r7, #32
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a204:	b480      	push	{r7}
 800a206:	b085      	sub	sp, #20
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a20c:	4b11      	ldr	r3, [pc, #68]	; (800a254 <SDMMC_GetCmdError+0x50>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a11      	ldr	r2, [pc, #68]	; (800a258 <SDMMC_GetCmdError+0x54>)
 800a212:	fba2 2303 	umull	r2, r3, r2, r3
 800a216:	0a5b      	lsrs	r3, r3, #9
 800a218:	f241 3288 	movw	r2, #5000	; 0x1388
 800a21c:	fb02 f303 	mul.w	r3, r2, r3
 800a220:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	1e5a      	subs	r2, r3, #1
 800a226:	60fa      	str	r2, [r7, #12]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d102      	bne.n	800a232 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a22c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a230:	e009      	b.n	800a246 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d0f1      	beq.n	800a222 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	22c5      	movs	r2, #197	; 0xc5
 800a242:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a244:	2300      	movs	r3, #0
}
 800a246:	4618      	mov	r0, r3
 800a248:	3714      	adds	r7, #20
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr
 800a252:	bf00      	nop
 800a254:	20000004 	.word	0x20000004
 800a258:	10624dd3 	.word	0x10624dd3

0800a25c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b088      	sub	sp, #32
 800a260:	af00      	add	r7, sp, #0
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	460b      	mov	r3, r1
 800a266:	607a      	str	r2, [r7, #4]
 800a268:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a26a:	4b70      	ldr	r3, [pc, #448]	; (800a42c <SDMMC_GetCmdResp1+0x1d0>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a70      	ldr	r2, [pc, #448]	; (800a430 <SDMMC_GetCmdResp1+0x1d4>)
 800a270:	fba2 2303 	umull	r2, r3, r2, r3
 800a274:	0a5a      	lsrs	r2, r3, #9
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	fb02 f303 	mul.w	r3, r2, r3
 800a27c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a27e:	69fb      	ldr	r3, [r7, #28]
 800a280:	1e5a      	subs	r2, r3, #1
 800a282:	61fa      	str	r2, [r7, #28]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d102      	bne.n	800a28e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a288:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a28c:	e0c9      	b.n	800a422 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a292:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a294:	69bb      	ldr	r3, [r7, #24]
 800a296:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d0ef      	beq.n	800a27e <SDMMC_GetCmdResp1+0x22>
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d1ea      	bne.n	800a27e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2ac:	f003 0304 	and.w	r3, r3, #4
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d004      	beq.n	800a2be <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2204      	movs	r2, #4
 800a2b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a2ba:	2304      	movs	r3, #4
 800a2bc:	e0b1      	b.n	800a422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2c2:	f003 0301 	and.w	r3, r3, #1
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d004      	beq.n	800a2d4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	e0a6      	b.n	800a422 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	22c5      	movs	r2, #197	; 0xc5
 800a2d8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a2da:	68f8      	ldr	r0, [r7, #12]
 800a2dc:	f7ff fd12 	bl	8009d04 <SDIO_GetCommandResponse>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	7afb      	ldrb	r3, [r7, #11]
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d001      	beq.n	800a2ee <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e099      	b.n	800a422 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a2ee:	2100      	movs	r1, #0
 800a2f0:	68f8      	ldr	r0, [r7, #12]
 800a2f2:	f7ff fd14 	bl	8009d1e <SDIO_GetResponse>
 800a2f6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a2f8:	697a      	ldr	r2, [r7, #20]
 800a2fa:	4b4e      	ldr	r3, [pc, #312]	; (800a434 <SDMMC_GetCmdResp1+0x1d8>)
 800a2fc:	4013      	ands	r3, r2
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d101      	bne.n	800a306 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a302:	2300      	movs	r3, #0
 800a304:	e08d      	b.n	800a422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	da02      	bge.n	800a312 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a30c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a310:	e087      	b.n	800a422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d001      	beq.n	800a320 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a31c:	2340      	movs	r3, #64	; 0x40
 800a31e:	e080      	b.n	800a422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a326:	2b00      	cmp	r3, #0
 800a328:	d001      	beq.n	800a32e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a32a:	2380      	movs	r3, #128	; 0x80
 800a32c:	e079      	b.n	800a422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a334:	2b00      	cmp	r3, #0
 800a336:	d002      	beq.n	800a33e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a338:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a33c:	e071      	b.n	800a422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a344:	2b00      	cmp	r3, #0
 800a346:	d002      	beq.n	800a34e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a348:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a34c:	e069      	b.n	800a422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a354:	2b00      	cmp	r3, #0
 800a356:	d002      	beq.n	800a35e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a358:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a35c:	e061      	b.n	800a422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a364:	2b00      	cmp	r3, #0
 800a366:	d002      	beq.n	800a36e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a368:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a36c:	e059      	b.n	800a422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a374:	2b00      	cmp	r3, #0
 800a376:	d002      	beq.n	800a37e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a37c:	e051      	b.n	800a422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a384:	2b00      	cmp	r3, #0
 800a386:	d002      	beq.n	800a38e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a388:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a38c:	e049      	b.n	800a422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a394:	2b00      	cmp	r3, #0
 800a396:	d002      	beq.n	800a39e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a398:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a39c:	e041      	b.n	800a422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d002      	beq.n	800a3ae <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a3a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3ac:	e039      	b.n	800a422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d002      	beq.n	800a3be <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a3b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a3bc:	e031      	b.n	800a422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d002      	beq.n	800a3ce <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a3c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a3cc:	e029      	b.n	800a422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d002      	beq.n	800a3de <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a3d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a3dc:	e021      	b.n	800a422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d002      	beq.n	800a3ee <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a3e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a3ec:	e019      	b.n	800a422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d002      	beq.n	800a3fe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a3f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a3fc:	e011      	b.n	800a422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a404:	2b00      	cmp	r3, #0
 800a406:	d002      	beq.n	800a40e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a408:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a40c:	e009      	b.n	800a422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	f003 0308 	and.w	r3, r3, #8
 800a414:	2b00      	cmp	r3, #0
 800a416:	d002      	beq.n	800a41e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a418:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a41c:	e001      	b.n	800a422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a41e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a422:	4618      	mov	r0, r3
 800a424:	3720      	adds	r7, #32
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	20000004 	.word	0x20000004
 800a430:	10624dd3 	.word	0x10624dd3
 800a434:	fdffe008 	.word	0xfdffe008

0800a438 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a438:	b480      	push	{r7}
 800a43a:	b085      	sub	sp, #20
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a440:	4b1f      	ldr	r3, [pc, #124]	; (800a4c0 <SDMMC_GetCmdResp2+0x88>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	4a1f      	ldr	r2, [pc, #124]	; (800a4c4 <SDMMC_GetCmdResp2+0x8c>)
 800a446:	fba2 2303 	umull	r2, r3, r2, r3
 800a44a:	0a5b      	lsrs	r3, r3, #9
 800a44c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a450:	fb02 f303 	mul.w	r3, r2, r3
 800a454:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	1e5a      	subs	r2, r3, #1
 800a45a:	60fa      	str	r2, [r7, #12]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d102      	bne.n	800a466 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a460:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a464:	e026      	b.n	800a4b4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a46a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a472:	2b00      	cmp	r3, #0
 800a474:	d0ef      	beq.n	800a456 <SDMMC_GetCmdResp2+0x1e>
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d1ea      	bne.n	800a456 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a484:	f003 0304 	and.w	r3, r3, #4
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d004      	beq.n	800a496 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2204      	movs	r2, #4
 800a490:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a492:	2304      	movs	r3, #4
 800a494:	e00e      	b.n	800a4b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a49a:	f003 0301 	and.w	r3, r3, #1
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d004      	beq.n	800a4ac <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	e003      	b.n	800a4b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	22c5      	movs	r2, #197	; 0xc5
 800a4b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a4b2:	2300      	movs	r3, #0
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3714      	adds	r7, #20
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr
 800a4c0:	20000004 	.word	0x20000004
 800a4c4:	10624dd3 	.word	0x10624dd3

0800a4c8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b085      	sub	sp, #20
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a4d0:	4b1a      	ldr	r3, [pc, #104]	; (800a53c <SDMMC_GetCmdResp3+0x74>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4a1a      	ldr	r2, [pc, #104]	; (800a540 <SDMMC_GetCmdResp3+0x78>)
 800a4d6:	fba2 2303 	umull	r2, r3, r2, r3
 800a4da:	0a5b      	lsrs	r3, r3, #9
 800a4dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4e0:	fb02 f303 	mul.w	r3, r2, r3
 800a4e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	1e5a      	subs	r2, r3, #1
 800a4ea:	60fa      	str	r2, [r7, #12]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d102      	bne.n	800a4f6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a4f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a4f4:	e01b      	b.n	800a52e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a502:	2b00      	cmp	r3, #0
 800a504:	d0ef      	beq.n	800a4e6 <SDMMC_GetCmdResp3+0x1e>
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d1ea      	bne.n	800a4e6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a514:	f003 0304 	and.w	r3, r3, #4
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d004      	beq.n	800a526 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2204      	movs	r2, #4
 800a520:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a522:	2304      	movs	r3, #4
 800a524:	e003      	b.n	800a52e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	22c5      	movs	r2, #197	; 0xc5
 800a52a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a52c:	2300      	movs	r3, #0
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3714      	adds	r7, #20
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr
 800a53a:	bf00      	nop
 800a53c:	20000004 	.word	0x20000004
 800a540:	10624dd3 	.word	0x10624dd3

0800a544 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b088      	sub	sp, #32
 800a548:	af00      	add	r7, sp, #0
 800a54a:	60f8      	str	r0, [r7, #12]
 800a54c:	460b      	mov	r3, r1
 800a54e:	607a      	str	r2, [r7, #4]
 800a550:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a552:	4b35      	ldr	r3, [pc, #212]	; (800a628 <SDMMC_GetCmdResp6+0xe4>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a35      	ldr	r2, [pc, #212]	; (800a62c <SDMMC_GetCmdResp6+0xe8>)
 800a558:	fba2 2303 	umull	r2, r3, r2, r3
 800a55c:	0a5b      	lsrs	r3, r3, #9
 800a55e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a562:	fb02 f303 	mul.w	r3, r2, r3
 800a566:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	1e5a      	subs	r2, r3, #1
 800a56c:	61fa      	str	r2, [r7, #28]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d102      	bne.n	800a578 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a572:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a576:	e052      	b.n	800a61e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a57c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a57e:	69bb      	ldr	r3, [r7, #24]
 800a580:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a584:	2b00      	cmp	r3, #0
 800a586:	d0ef      	beq.n	800a568 <SDMMC_GetCmdResp6+0x24>
 800a588:	69bb      	ldr	r3, [r7, #24]
 800a58a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d1ea      	bne.n	800a568 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a596:	f003 0304 	and.w	r3, r3, #4
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d004      	beq.n	800a5a8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2204      	movs	r2, #4
 800a5a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a5a4:	2304      	movs	r3, #4
 800a5a6:	e03a      	b.n	800a61e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5ac:	f003 0301 	and.w	r3, r3, #1
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d004      	beq.n	800a5be <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	e02f      	b.n	800a61e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a5be:	68f8      	ldr	r0, [r7, #12]
 800a5c0:	f7ff fba0 	bl	8009d04 <SDIO_GetCommandResponse>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	7afb      	ldrb	r3, [r7, #11]
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d001      	beq.n	800a5d2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e025      	b.n	800a61e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	22c5      	movs	r2, #197	; 0xc5
 800a5d6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a5d8:	2100      	movs	r1, #0
 800a5da:	68f8      	ldr	r0, [r7, #12]
 800a5dc:	f7ff fb9f 	bl	8009d1e <SDIO_GetResponse>
 800a5e0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d106      	bne.n	800a5fa <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	0c1b      	lsrs	r3, r3, #16
 800a5f0:	b29a      	uxth	r2, r3
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	e011      	b.n	800a61e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a600:	2b00      	cmp	r3, #0
 800a602:	d002      	beq.n	800a60a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a604:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a608:	e009      	b.n	800a61e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a610:	2b00      	cmp	r3, #0
 800a612:	d002      	beq.n	800a61a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a618:	e001      	b.n	800a61e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a61a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3720      	adds	r7, #32
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop
 800a628:	20000004 	.word	0x20000004
 800a62c:	10624dd3 	.word	0x10624dd3

0800a630 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a630:	b480      	push	{r7}
 800a632:	b085      	sub	sp, #20
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a638:	4b22      	ldr	r3, [pc, #136]	; (800a6c4 <SDMMC_GetCmdResp7+0x94>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a22      	ldr	r2, [pc, #136]	; (800a6c8 <SDMMC_GetCmdResp7+0x98>)
 800a63e:	fba2 2303 	umull	r2, r3, r2, r3
 800a642:	0a5b      	lsrs	r3, r3, #9
 800a644:	f241 3288 	movw	r2, #5000	; 0x1388
 800a648:	fb02 f303 	mul.w	r3, r2, r3
 800a64c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	1e5a      	subs	r2, r3, #1
 800a652:	60fa      	str	r2, [r7, #12]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d102      	bne.n	800a65e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a658:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a65c:	e02c      	b.n	800a6b8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a662:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d0ef      	beq.n	800a64e <SDMMC_GetCmdResp7+0x1e>
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a674:	2b00      	cmp	r3, #0
 800a676:	d1ea      	bne.n	800a64e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a67c:	f003 0304 	and.w	r3, r3, #4
 800a680:	2b00      	cmp	r3, #0
 800a682:	d004      	beq.n	800a68e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2204      	movs	r2, #4
 800a688:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a68a:	2304      	movs	r3, #4
 800a68c:	e014      	b.n	800a6b8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a692:	f003 0301 	and.w	r3, r3, #1
 800a696:	2b00      	cmp	r3, #0
 800a698:	d004      	beq.n	800a6a4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2201      	movs	r2, #1
 800a69e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	e009      	b.n	800a6b8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d002      	beq.n	800a6b6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2240      	movs	r2, #64	; 0x40
 800a6b4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a6b6:	2300      	movs	r3, #0
  
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3714      	adds	r7, #20
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr
 800a6c4:	20000004 	.word	0x20000004
 800a6c8:	10624dd3 	.word	0x10624dd3

0800a6cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a6d0:	4904      	ldr	r1, [pc, #16]	; (800a6e4 <MX_FATFS_Init+0x18>)
 800a6d2:	4805      	ldr	r0, [pc, #20]	; (800a6e8 <MX_FATFS_Init+0x1c>)
 800a6d4:	f002 fffe 	bl	800d6d4 <FATFS_LinkDriver>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	461a      	mov	r2, r3
 800a6dc:	4b03      	ldr	r3, [pc, #12]	; (800a6ec <MX_FATFS_Init+0x20>)
 800a6de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a6e0:	bf00      	nop
 800a6e2:	bd80      	pop	{r7, pc}
 800a6e4:	20002b28 	.word	0x20002b28
 800a6e8:	08014b98 	.word	0x08014b98
 800a6ec:	20002b24 	.word	0x20002b24

0800a6f0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a6f4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr

0800a700 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a706:	2300      	movs	r3, #0
 800a708:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a70a:	f000 f879 	bl	800a800 <BSP_SD_IsDetected>
 800a70e:	4603      	mov	r3, r0
 800a710:	2b01      	cmp	r3, #1
 800a712:	d001      	beq.n	800a718 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a714:	2301      	movs	r3, #1
 800a716:	e012      	b.n	800a73e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a718:	480b      	ldr	r0, [pc, #44]	; (800a748 <BSP_SD_Init+0x48>)
 800a71a:	f7fd f81d 	bl	8007758 <HAL_SD_Init>
 800a71e:	4603      	mov	r3, r0
 800a720:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a722:	79fb      	ldrb	r3, [r7, #7]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d109      	bne.n	800a73c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800a728:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a72c:	4806      	ldr	r0, [pc, #24]	; (800a748 <BSP_SD_Init+0x48>)
 800a72e:	f7fd fdf5 	bl	800831c <HAL_SD_ConfigWideBusOperation>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d001      	beq.n	800a73c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a738:	2301      	movs	r3, #1
 800a73a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a73c:	79fb      	ldrb	r3, [r7, #7]
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3708      	adds	r7, #8
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	20002a00 	.word	0x20002a00

0800a74c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b088      	sub	sp, #32
 800a750:	af02      	add	r7, sp, #8
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	60b9      	str	r1, [r7, #8]
 800a756:	607a      	str	r2, [r7, #4]
 800a758:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a75a:	2300      	movs	r3, #0
 800a75c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	9300      	str	r3, [sp, #0]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	68ba      	ldr	r2, [r7, #8]
 800a766:	68f9      	ldr	r1, [r7, #12]
 800a768:	4806      	ldr	r0, [pc, #24]	; (800a784 <BSP_SD_ReadBlocks+0x38>)
 800a76a:	f7fd f8a3 	bl	80078b4 <HAL_SD_ReadBlocks>
 800a76e:	4603      	mov	r3, r0
 800a770:	2b00      	cmp	r3, #0
 800a772:	d001      	beq.n	800a778 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a774:	2301      	movs	r3, #1
 800a776:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a778:	7dfb      	ldrb	r3, [r7, #23]
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3718      	adds	r7, #24
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
 800a782:	bf00      	nop
 800a784:	20002a00 	.word	0x20002a00

0800a788 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b088      	sub	sp, #32
 800a78c:	af02      	add	r7, sp, #8
 800a78e:	60f8      	str	r0, [r7, #12]
 800a790:	60b9      	str	r1, [r7, #8]
 800a792:	607a      	str	r2, [r7, #4]
 800a794:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a796:	2300      	movs	r3, #0
 800a798:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	9300      	str	r3, [sp, #0]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	68ba      	ldr	r2, [r7, #8]
 800a7a2:	68f9      	ldr	r1, [r7, #12]
 800a7a4:	4806      	ldr	r0, [pc, #24]	; (800a7c0 <BSP_SD_WriteBlocks+0x38>)
 800a7a6:	f7fd fa63 	bl	8007c70 <HAL_SD_WriteBlocks>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d001      	beq.n	800a7b4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a7b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3718      	adds	r7, #24
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	20002a00 	.word	0x20002a00

0800a7c4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a7c8:	4805      	ldr	r0, [pc, #20]	; (800a7e0 <BSP_SD_GetCardState+0x1c>)
 800a7ca:	f7fd fe41 	bl	8008450 <HAL_SD_GetCardState>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	2b04      	cmp	r3, #4
 800a7d2:	bf14      	ite	ne
 800a7d4:	2301      	movne	r3, #1
 800a7d6:	2300      	moveq	r3, #0
 800a7d8:	b2db      	uxtb	r3, r3
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	bd80      	pop	{r7, pc}
 800a7de:	bf00      	nop
 800a7e0:	20002a00 	.word	0x20002a00

0800a7e4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a7ec:	6879      	ldr	r1, [r7, #4]
 800a7ee:	4803      	ldr	r0, [pc, #12]	; (800a7fc <BSP_SD_GetCardInfo+0x18>)
 800a7f0:	f7fd fd68 	bl	80082c4 <HAL_SD_GetCardInfo>
}
 800a7f4:	bf00      	nop
 800a7f6:	3708      	adds	r7, #8
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}
 800a7fc:	20002a00 	.word	0x20002a00

0800a800 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a800:	b480      	push	{r7}
 800a802:	b083      	sub	sp, #12
 800a804:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a806:	2301      	movs	r3, #1
 800a808:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800a80a:	79fb      	ldrb	r3, [r7, #7]
 800a80c:	b2db      	uxtb	r3, r3
}
 800a80e:	4618      	mov	r0, r3
 800a810:	370c      	adds	r7, #12
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr
	...

0800a81c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	4603      	mov	r3, r0
 800a824:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a826:	4b0b      	ldr	r3, [pc, #44]	; (800a854 <SD_CheckStatus+0x38>)
 800a828:	2201      	movs	r2, #1
 800a82a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a82c:	f7ff ffca 	bl	800a7c4 <BSP_SD_GetCardState>
 800a830:	4603      	mov	r3, r0
 800a832:	2b00      	cmp	r3, #0
 800a834:	d107      	bne.n	800a846 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a836:	4b07      	ldr	r3, [pc, #28]	; (800a854 <SD_CheckStatus+0x38>)
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	f023 0301 	bic.w	r3, r3, #1
 800a840:	b2da      	uxtb	r2, r3
 800a842:	4b04      	ldr	r3, [pc, #16]	; (800a854 <SD_CheckStatus+0x38>)
 800a844:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a846:	4b03      	ldr	r3, [pc, #12]	; (800a854 <SD_CheckStatus+0x38>)
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	b2db      	uxtb	r3, r3
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3708      	adds	r7, #8
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}
 800a854:	20000055 	.word	0x20000055

0800a858 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	4603      	mov	r3, r0
 800a860:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a862:	4b0b      	ldr	r3, [pc, #44]	; (800a890 <SD_initialize+0x38>)
 800a864:	2201      	movs	r2, #1
 800a866:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a868:	f7ff ff4a 	bl	800a700 <BSP_SD_Init>
 800a86c:	4603      	mov	r3, r0
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d107      	bne.n	800a882 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800a872:	79fb      	ldrb	r3, [r7, #7]
 800a874:	4618      	mov	r0, r3
 800a876:	f7ff ffd1 	bl	800a81c <SD_CheckStatus>
 800a87a:	4603      	mov	r3, r0
 800a87c:	461a      	mov	r2, r3
 800a87e:	4b04      	ldr	r3, [pc, #16]	; (800a890 <SD_initialize+0x38>)
 800a880:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a882:	4b03      	ldr	r3, [pc, #12]	; (800a890 <SD_initialize+0x38>)
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	b2db      	uxtb	r3, r3
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3708      	adds	r7, #8
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	20000055 	.word	0x20000055

0800a894 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0
 800a89a:	4603      	mov	r3, r0
 800a89c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a89e:	79fb      	ldrb	r3, [r7, #7]
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f7ff ffbb 	bl	800a81c <SD_CheckStatus>
 800a8a6:	4603      	mov	r3, r0
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3708      	adds	r7, #8
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b086      	sub	sp, #24
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	60b9      	str	r1, [r7, #8]
 800a8b8:	607a      	str	r2, [r7, #4]
 800a8ba:	603b      	str	r3, [r7, #0]
 800a8bc:	4603      	mov	r3, r0
 800a8be:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a8c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a8c8:	683a      	ldr	r2, [r7, #0]
 800a8ca:	6879      	ldr	r1, [r7, #4]
 800a8cc:	68b8      	ldr	r0, [r7, #8]
 800a8ce:	f7ff ff3d 	bl	800a74c <BSP_SD_ReadBlocks>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d107      	bne.n	800a8e8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a8d8:	bf00      	nop
 800a8da:	f7ff ff73 	bl	800a7c4 <BSP_SD_GetCardState>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d1fa      	bne.n	800a8da <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a8e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3718      	adds	r7, #24
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}

0800a8f2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a8f2:	b580      	push	{r7, lr}
 800a8f4:	b086      	sub	sp, #24
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	60b9      	str	r1, [r7, #8]
 800a8fa:	607a      	str	r2, [r7, #4]
 800a8fc:	603b      	str	r3, [r7, #0]
 800a8fe:	4603      	mov	r3, r0
 800a900:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a902:	2301      	movs	r3, #1
 800a904:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a906:	f04f 33ff 	mov.w	r3, #4294967295
 800a90a:	683a      	ldr	r2, [r7, #0]
 800a90c:	6879      	ldr	r1, [r7, #4]
 800a90e:	68b8      	ldr	r0, [r7, #8]
 800a910:	f7ff ff3a 	bl	800a788 <BSP_SD_WriteBlocks>
 800a914:	4603      	mov	r3, r0
 800a916:	2b00      	cmp	r3, #0
 800a918:	d107      	bne.n	800a92a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a91a:	bf00      	nop
 800a91c:	f7ff ff52 	bl	800a7c4 <BSP_SD_GetCardState>
 800a920:	4603      	mov	r3, r0
 800a922:	2b00      	cmp	r3, #0
 800a924:	d1fa      	bne.n	800a91c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a926:	2300      	movs	r3, #0
 800a928:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a92a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3718      	adds	r7, #24
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b08c      	sub	sp, #48	; 0x30
 800a938:	af00      	add	r7, sp, #0
 800a93a:	4603      	mov	r3, r0
 800a93c:	603a      	str	r2, [r7, #0]
 800a93e:	71fb      	strb	r3, [r7, #7]
 800a940:	460b      	mov	r3, r1
 800a942:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a944:	2301      	movs	r3, #1
 800a946:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a94a:	4b25      	ldr	r3, [pc, #148]	; (800a9e0 <SD_ioctl+0xac>)
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	f003 0301 	and.w	r3, r3, #1
 800a954:	2b00      	cmp	r3, #0
 800a956:	d001      	beq.n	800a95c <SD_ioctl+0x28>
 800a958:	2303      	movs	r3, #3
 800a95a:	e03c      	b.n	800a9d6 <SD_ioctl+0xa2>

  switch (cmd)
 800a95c:	79bb      	ldrb	r3, [r7, #6]
 800a95e:	2b03      	cmp	r3, #3
 800a960:	d834      	bhi.n	800a9cc <SD_ioctl+0x98>
 800a962:	a201      	add	r2, pc, #4	; (adr r2, 800a968 <SD_ioctl+0x34>)
 800a964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a968:	0800a979 	.word	0x0800a979
 800a96c:	0800a981 	.word	0x0800a981
 800a970:	0800a999 	.word	0x0800a999
 800a974:	0800a9b3 	.word	0x0800a9b3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a978:	2300      	movs	r3, #0
 800a97a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a97e:	e028      	b.n	800a9d2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a980:	f107 030c 	add.w	r3, r7, #12
 800a984:	4618      	mov	r0, r3
 800a986:	f7ff ff2d 	bl	800a7e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a98a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a990:	2300      	movs	r3, #0
 800a992:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a996:	e01c      	b.n	800a9d2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a998:	f107 030c 	add.w	r3, r7, #12
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7ff ff21 	bl	800a7e4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a4:	b29a      	uxth	r2, r3
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a9b0:	e00f      	b.n	800a9d2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a9b2:	f107 030c 	add.w	r3, r7, #12
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f7ff ff14 	bl	800a7e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9be:	0a5a      	lsrs	r2, r3, #9
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a9ca:	e002      	b.n	800a9d2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a9cc:	2304      	movs	r3, #4
 800a9ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a9d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3730      	adds	r7, #48	; 0x30
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}
 800a9de:	bf00      	nop
 800a9e0:	20000055 	.word	0x20000055

0800a9e4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a9ee:	79fb      	ldrb	r3, [r7, #7]
 800a9f0:	4a08      	ldr	r2, [pc, #32]	; (800aa14 <disk_status+0x30>)
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	4413      	add	r3, r2
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	79fa      	ldrb	r2, [r7, #7]
 800a9fc:	4905      	ldr	r1, [pc, #20]	; (800aa14 <disk_status+0x30>)
 800a9fe:	440a      	add	r2, r1
 800aa00:	7a12      	ldrb	r2, [r2, #8]
 800aa02:	4610      	mov	r0, r2
 800aa04:	4798      	blx	r3
 800aa06:	4603      	mov	r3, r0
 800aa08:	73fb      	strb	r3, [r7, #15]
  return stat;
 800aa0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3710      	adds	r7, #16
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	20002340 	.word	0x20002340

0800aa18 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	4603      	mov	r3, r0
 800aa20:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800aa22:	2300      	movs	r3, #0
 800aa24:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800aa26:	79fb      	ldrb	r3, [r7, #7]
 800aa28:	4a0d      	ldr	r2, [pc, #52]	; (800aa60 <disk_initialize+0x48>)
 800aa2a:	5cd3      	ldrb	r3, [r2, r3]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d111      	bne.n	800aa54 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800aa30:	79fb      	ldrb	r3, [r7, #7]
 800aa32:	4a0b      	ldr	r2, [pc, #44]	; (800aa60 <disk_initialize+0x48>)
 800aa34:	2101      	movs	r1, #1
 800aa36:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800aa38:	79fb      	ldrb	r3, [r7, #7]
 800aa3a:	4a09      	ldr	r2, [pc, #36]	; (800aa60 <disk_initialize+0x48>)
 800aa3c:	009b      	lsls	r3, r3, #2
 800aa3e:	4413      	add	r3, r2
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	79fa      	ldrb	r2, [r7, #7]
 800aa46:	4906      	ldr	r1, [pc, #24]	; (800aa60 <disk_initialize+0x48>)
 800aa48:	440a      	add	r2, r1
 800aa4a:	7a12      	ldrb	r2, [r2, #8]
 800aa4c:	4610      	mov	r0, r2
 800aa4e:	4798      	blx	r3
 800aa50:	4603      	mov	r3, r0
 800aa52:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800aa54:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3710      	adds	r7, #16
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	20002340 	.word	0x20002340

0800aa64 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800aa64:	b590      	push	{r4, r7, lr}
 800aa66:	b087      	sub	sp, #28
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	60b9      	str	r1, [r7, #8]
 800aa6c:	607a      	str	r2, [r7, #4]
 800aa6e:	603b      	str	r3, [r7, #0]
 800aa70:	4603      	mov	r3, r0
 800aa72:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800aa74:	7bfb      	ldrb	r3, [r7, #15]
 800aa76:	4a0a      	ldr	r2, [pc, #40]	; (800aaa0 <disk_read+0x3c>)
 800aa78:	009b      	lsls	r3, r3, #2
 800aa7a:	4413      	add	r3, r2
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	689c      	ldr	r4, [r3, #8]
 800aa80:	7bfb      	ldrb	r3, [r7, #15]
 800aa82:	4a07      	ldr	r2, [pc, #28]	; (800aaa0 <disk_read+0x3c>)
 800aa84:	4413      	add	r3, r2
 800aa86:	7a18      	ldrb	r0, [r3, #8]
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	687a      	ldr	r2, [r7, #4]
 800aa8c:	68b9      	ldr	r1, [r7, #8]
 800aa8e:	47a0      	blx	r4
 800aa90:	4603      	mov	r3, r0
 800aa92:	75fb      	strb	r3, [r7, #23]
  return res;
 800aa94:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	371c      	adds	r7, #28
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd90      	pop	{r4, r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	20002340 	.word	0x20002340

0800aaa4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800aaa4:	b590      	push	{r4, r7, lr}
 800aaa6:	b087      	sub	sp, #28
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	60b9      	str	r1, [r7, #8]
 800aaac:	607a      	str	r2, [r7, #4]
 800aaae:	603b      	str	r3, [r7, #0]
 800aab0:	4603      	mov	r3, r0
 800aab2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800aab4:	7bfb      	ldrb	r3, [r7, #15]
 800aab6:	4a0a      	ldr	r2, [pc, #40]	; (800aae0 <disk_write+0x3c>)
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	4413      	add	r3, r2
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	68dc      	ldr	r4, [r3, #12]
 800aac0:	7bfb      	ldrb	r3, [r7, #15]
 800aac2:	4a07      	ldr	r2, [pc, #28]	; (800aae0 <disk_write+0x3c>)
 800aac4:	4413      	add	r3, r2
 800aac6:	7a18      	ldrb	r0, [r3, #8]
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	687a      	ldr	r2, [r7, #4]
 800aacc:	68b9      	ldr	r1, [r7, #8]
 800aace:	47a0      	blx	r4
 800aad0:	4603      	mov	r3, r0
 800aad2:	75fb      	strb	r3, [r7, #23]
  return res;
 800aad4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	371c      	adds	r7, #28
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd90      	pop	{r4, r7, pc}
 800aade:	bf00      	nop
 800aae0:	20002340 	.word	0x20002340

0800aae4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b084      	sub	sp, #16
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	4603      	mov	r3, r0
 800aaec:	603a      	str	r2, [r7, #0]
 800aaee:	71fb      	strb	r3, [r7, #7]
 800aaf0:	460b      	mov	r3, r1
 800aaf2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800aaf4:	79fb      	ldrb	r3, [r7, #7]
 800aaf6:	4a09      	ldr	r2, [pc, #36]	; (800ab1c <disk_ioctl+0x38>)
 800aaf8:	009b      	lsls	r3, r3, #2
 800aafa:	4413      	add	r3, r2
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	691b      	ldr	r3, [r3, #16]
 800ab00:	79fa      	ldrb	r2, [r7, #7]
 800ab02:	4906      	ldr	r1, [pc, #24]	; (800ab1c <disk_ioctl+0x38>)
 800ab04:	440a      	add	r2, r1
 800ab06:	7a10      	ldrb	r0, [r2, #8]
 800ab08:	79b9      	ldrb	r1, [r7, #6]
 800ab0a:	683a      	ldr	r2, [r7, #0]
 800ab0c:	4798      	blx	r3
 800ab0e:	4603      	mov	r3, r0
 800ab10:	73fb      	strb	r3, [r7, #15]
  return res;
 800ab12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3710      	adds	r7, #16
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}
 800ab1c:	20002340 	.word	0x20002340

0800ab20 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ab20:	b480      	push	{r7}
 800ab22:	b085      	sub	sp, #20
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	781b      	ldrb	r3, [r3, #0]
 800ab2e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ab30:	89fb      	ldrh	r3, [r7, #14]
 800ab32:	021b      	lsls	r3, r3, #8
 800ab34:	b21a      	sxth	r2, r3
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	b21b      	sxth	r3, r3
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	b21b      	sxth	r3, r3
 800ab40:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ab42:	89fb      	ldrh	r3, [r7, #14]
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3714      	adds	r7, #20
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr

0800ab50 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ab50:	b480      	push	{r7}
 800ab52:	b085      	sub	sp, #20
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	3303      	adds	r3, #3
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	021b      	lsls	r3, r3, #8
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	3202      	adds	r2, #2
 800ab68:	7812      	ldrb	r2, [r2, #0]
 800ab6a:	4313      	orrs	r3, r2
 800ab6c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	021b      	lsls	r3, r3, #8
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	3201      	adds	r2, #1
 800ab76:	7812      	ldrb	r2, [r2, #0]
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	021b      	lsls	r3, r3, #8
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	7812      	ldrb	r2, [r2, #0]
 800ab84:	4313      	orrs	r3, r2
 800ab86:	60fb      	str	r3, [r7, #12]
	return rv;
 800ab88:	68fb      	ldr	r3, [r7, #12]
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3714      	adds	r7, #20
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr

0800ab96 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ab96:	b480      	push	{r7}
 800ab98:	b083      	sub	sp, #12
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
 800ab9e:	460b      	mov	r3, r1
 800aba0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	1c5a      	adds	r2, r3, #1
 800aba6:	607a      	str	r2, [r7, #4]
 800aba8:	887a      	ldrh	r2, [r7, #2]
 800abaa:	b2d2      	uxtb	r2, r2
 800abac:	701a      	strb	r2, [r3, #0]
 800abae:	887b      	ldrh	r3, [r7, #2]
 800abb0:	0a1b      	lsrs	r3, r3, #8
 800abb2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	1c5a      	adds	r2, r3, #1
 800abb8:	607a      	str	r2, [r7, #4]
 800abba:	887a      	ldrh	r2, [r7, #2]
 800abbc:	b2d2      	uxtb	r2, r2
 800abbe:	701a      	strb	r2, [r3, #0]
}
 800abc0:	bf00      	nop
 800abc2:	370c      	adds	r7, #12
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr

0800abcc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	1c5a      	adds	r2, r3, #1
 800abda:	607a      	str	r2, [r7, #4]
 800abdc:	683a      	ldr	r2, [r7, #0]
 800abde:	b2d2      	uxtb	r2, r2
 800abe0:	701a      	strb	r2, [r3, #0]
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	0a1b      	lsrs	r3, r3, #8
 800abe6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	1c5a      	adds	r2, r3, #1
 800abec:	607a      	str	r2, [r7, #4]
 800abee:	683a      	ldr	r2, [r7, #0]
 800abf0:	b2d2      	uxtb	r2, r2
 800abf2:	701a      	strb	r2, [r3, #0]
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	0a1b      	lsrs	r3, r3, #8
 800abf8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	1c5a      	adds	r2, r3, #1
 800abfe:	607a      	str	r2, [r7, #4]
 800ac00:	683a      	ldr	r2, [r7, #0]
 800ac02:	b2d2      	uxtb	r2, r2
 800ac04:	701a      	strb	r2, [r3, #0]
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	0a1b      	lsrs	r3, r3, #8
 800ac0a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	1c5a      	adds	r2, r3, #1
 800ac10:	607a      	str	r2, [r7, #4]
 800ac12:	683a      	ldr	r2, [r7, #0]
 800ac14:	b2d2      	uxtb	r2, r2
 800ac16:	701a      	strb	r2, [r3, #0]
}
 800ac18:	bf00      	nop
 800ac1a:	370c      	adds	r7, #12
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr

0800ac24 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ac24:	b480      	push	{r7}
 800ac26:	b087      	sub	sp, #28
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	60f8      	str	r0, [r7, #12]
 800ac2c:	60b9      	str	r1, [r7, #8]
 800ac2e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d00d      	beq.n	800ac5a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ac3e:	693a      	ldr	r2, [r7, #16]
 800ac40:	1c53      	adds	r3, r2, #1
 800ac42:	613b      	str	r3, [r7, #16]
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	1c59      	adds	r1, r3, #1
 800ac48:	6179      	str	r1, [r7, #20]
 800ac4a:	7812      	ldrb	r2, [r2, #0]
 800ac4c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	3b01      	subs	r3, #1
 800ac52:	607b      	str	r3, [r7, #4]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d1f1      	bne.n	800ac3e <mem_cpy+0x1a>
	}
}
 800ac5a:	bf00      	nop
 800ac5c:	371c      	adds	r7, #28
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac64:	4770      	bx	lr

0800ac66 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ac66:	b480      	push	{r7}
 800ac68:	b087      	sub	sp, #28
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	60f8      	str	r0, [r7, #12]
 800ac6e:	60b9      	str	r1, [r7, #8]
 800ac70:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	1c5a      	adds	r2, r3, #1
 800ac7a:	617a      	str	r2, [r7, #20]
 800ac7c:	68ba      	ldr	r2, [r7, #8]
 800ac7e:	b2d2      	uxtb	r2, r2
 800ac80:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	3b01      	subs	r3, #1
 800ac86:	607b      	str	r3, [r7, #4]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d1f3      	bne.n	800ac76 <mem_set+0x10>
}
 800ac8e:	bf00      	nop
 800ac90:	bf00      	nop
 800ac92:	371c      	adds	r7, #28
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr

0800ac9c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ac9c:	b480      	push	{r7}
 800ac9e:	b089      	sub	sp, #36	; 0x24
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	61fb      	str	r3, [r7, #28]
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800acb0:	2300      	movs	r3, #0
 800acb2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800acb4:	69fb      	ldr	r3, [r7, #28]
 800acb6:	1c5a      	adds	r2, r3, #1
 800acb8:	61fa      	str	r2, [r7, #28]
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	4619      	mov	r1, r3
 800acbe:	69bb      	ldr	r3, [r7, #24]
 800acc0:	1c5a      	adds	r2, r3, #1
 800acc2:	61ba      	str	r2, [r7, #24]
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	1acb      	subs	r3, r1, r3
 800acc8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	3b01      	subs	r3, #1
 800acce:	607b      	str	r3, [r7, #4]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d002      	beq.n	800acdc <mem_cmp+0x40>
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d0eb      	beq.n	800acb4 <mem_cmp+0x18>

	return r;
 800acdc:	697b      	ldr	r3, [r7, #20]
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3724      	adds	r7, #36	; 0x24
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr

0800acea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800acea:	b480      	push	{r7}
 800acec:	b083      	sub	sp, #12
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
 800acf2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800acf4:	e002      	b.n	800acfc <chk_chr+0x12>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	3301      	adds	r3, #1
 800acfa:	607b      	str	r3, [r7, #4]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d005      	beq.n	800ad10 <chk_chr+0x26>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	461a      	mov	r2, r3
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d1f2      	bne.n	800acf6 <chk_chr+0xc>
	return *str;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	781b      	ldrb	r3, [r3, #0]
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	370c      	adds	r7, #12
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr

0800ad20 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b085      	sub	sp, #20
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	60bb      	str	r3, [r7, #8]
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	60fb      	str	r3, [r7, #12]
 800ad32:	e029      	b.n	800ad88 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ad34:	4a27      	ldr	r2, [pc, #156]	; (800add4 <chk_lock+0xb4>)
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	011b      	lsls	r3, r3, #4
 800ad3a:	4413      	add	r3, r2
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d01d      	beq.n	800ad7e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ad42:	4a24      	ldr	r2, [pc, #144]	; (800add4 <chk_lock+0xb4>)
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	011b      	lsls	r3, r3, #4
 800ad48:	4413      	add	r3, r2
 800ad4a:	681a      	ldr	r2, [r3, #0]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d116      	bne.n	800ad82 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ad54:	4a1f      	ldr	r2, [pc, #124]	; (800add4 <chk_lock+0xb4>)
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	011b      	lsls	r3, r3, #4
 800ad5a:	4413      	add	r3, r2
 800ad5c:	3304      	adds	r3, #4
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d10c      	bne.n	800ad82 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ad68:	4a1a      	ldr	r2, [pc, #104]	; (800add4 <chk_lock+0xb4>)
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	011b      	lsls	r3, r3, #4
 800ad6e:	4413      	add	r3, r2
 800ad70:	3308      	adds	r3, #8
 800ad72:	681a      	ldr	r2, [r3, #0]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d102      	bne.n	800ad82 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ad7c:	e007      	b.n	800ad8e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	3301      	adds	r3, #1
 800ad86:	60fb      	str	r3, [r7, #12]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d9d2      	bls.n	800ad34 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2b02      	cmp	r3, #2
 800ad92:	d109      	bne.n	800ada8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d102      	bne.n	800ada0 <chk_lock+0x80>
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	2b02      	cmp	r3, #2
 800ad9e:	d101      	bne.n	800ada4 <chk_lock+0x84>
 800ada0:	2300      	movs	r3, #0
 800ada2:	e010      	b.n	800adc6 <chk_lock+0xa6>
 800ada4:	2312      	movs	r3, #18
 800ada6:	e00e      	b.n	800adc6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d108      	bne.n	800adc0 <chk_lock+0xa0>
 800adae:	4a09      	ldr	r2, [pc, #36]	; (800add4 <chk_lock+0xb4>)
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	011b      	lsls	r3, r3, #4
 800adb4:	4413      	add	r3, r2
 800adb6:	330c      	adds	r3, #12
 800adb8:	881b      	ldrh	r3, [r3, #0]
 800adba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adbe:	d101      	bne.n	800adc4 <chk_lock+0xa4>
 800adc0:	2310      	movs	r3, #16
 800adc2:	e000      	b.n	800adc6 <chk_lock+0xa6>
 800adc4:	2300      	movs	r3, #0
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3714      	adds	r7, #20
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr
 800add2:	bf00      	nop
 800add4:	200022dc 	.word	0x200022dc

0800add8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800adde:	2300      	movs	r3, #0
 800ade0:	607b      	str	r3, [r7, #4]
 800ade2:	e002      	b.n	800adea <enq_lock+0x12>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	3301      	adds	r3, #1
 800ade8:	607b      	str	r3, [r7, #4]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2b01      	cmp	r3, #1
 800adee:	d806      	bhi.n	800adfe <enq_lock+0x26>
 800adf0:	4a09      	ldr	r2, [pc, #36]	; (800ae18 <enq_lock+0x40>)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	011b      	lsls	r3, r3, #4
 800adf6:	4413      	add	r3, r2
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d1f2      	bne.n	800ade4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2b02      	cmp	r3, #2
 800ae02:	bf14      	ite	ne
 800ae04:	2301      	movne	r3, #1
 800ae06:	2300      	moveq	r3, #0
 800ae08:	b2db      	uxtb	r3, r3
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	370c      	adds	r7, #12
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr
 800ae16:	bf00      	nop
 800ae18:	200022dc 	.word	0x200022dc

0800ae1c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b085      	sub	sp, #20
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ae26:	2300      	movs	r3, #0
 800ae28:	60fb      	str	r3, [r7, #12]
 800ae2a:	e01f      	b.n	800ae6c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ae2c:	4a41      	ldr	r2, [pc, #260]	; (800af34 <inc_lock+0x118>)
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	011b      	lsls	r3, r3, #4
 800ae32:	4413      	add	r3, r2
 800ae34:	681a      	ldr	r2, [r3, #0]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d113      	bne.n	800ae66 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ae3e:	4a3d      	ldr	r2, [pc, #244]	; (800af34 <inc_lock+0x118>)
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	011b      	lsls	r3, r3, #4
 800ae44:	4413      	add	r3, r2
 800ae46:	3304      	adds	r3, #4
 800ae48:	681a      	ldr	r2, [r3, #0]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	d109      	bne.n	800ae66 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ae52:	4a38      	ldr	r2, [pc, #224]	; (800af34 <inc_lock+0x118>)
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	011b      	lsls	r3, r3, #4
 800ae58:	4413      	add	r3, r2
 800ae5a:	3308      	adds	r3, #8
 800ae5c:	681a      	ldr	r2, [r3, #0]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d006      	beq.n	800ae74 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	3301      	adds	r3, #1
 800ae6a:	60fb      	str	r3, [r7, #12]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	d9dc      	bls.n	800ae2c <inc_lock+0x10>
 800ae72:	e000      	b.n	800ae76 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ae74:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2b02      	cmp	r3, #2
 800ae7a:	d132      	bne.n	800aee2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	60fb      	str	r3, [r7, #12]
 800ae80:	e002      	b.n	800ae88 <inc_lock+0x6c>
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	3301      	adds	r3, #1
 800ae86:	60fb      	str	r3, [r7, #12]
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2b01      	cmp	r3, #1
 800ae8c:	d806      	bhi.n	800ae9c <inc_lock+0x80>
 800ae8e:	4a29      	ldr	r2, [pc, #164]	; (800af34 <inc_lock+0x118>)
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	011b      	lsls	r3, r3, #4
 800ae94:	4413      	add	r3, r2
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d1f2      	bne.n	800ae82 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2b02      	cmp	r3, #2
 800aea0:	d101      	bne.n	800aea6 <inc_lock+0x8a>
 800aea2:	2300      	movs	r3, #0
 800aea4:	e040      	b.n	800af28 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681a      	ldr	r2, [r3, #0]
 800aeaa:	4922      	ldr	r1, [pc, #136]	; (800af34 <inc_lock+0x118>)
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	011b      	lsls	r3, r3, #4
 800aeb0:	440b      	add	r3, r1
 800aeb2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	689a      	ldr	r2, [r3, #8]
 800aeb8:	491e      	ldr	r1, [pc, #120]	; (800af34 <inc_lock+0x118>)
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	011b      	lsls	r3, r3, #4
 800aebe:	440b      	add	r3, r1
 800aec0:	3304      	adds	r3, #4
 800aec2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	695a      	ldr	r2, [r3, #20]
 800aec8:	491a      	ldr	r1, [pc, #104]	; (800af34 <inc_lock+0x118>)
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	011b      	lsls	r3, r3, #4
 800aece:	440b      	add	r3, r1
 800aed0:	3308      	adds	r3, #8
 800aed2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800aed4:	4a17      	ldr	r2, [pc, #92]	; (800af34 <inc_lock+0x118>)
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	011b      	lsls	r3, r3, #4
 800aeda:	4413      	add	r3, r2
 800aedc:	330c      	adds	r3, #12
 800aede:	2200      	movs	r2, #0
 800aee0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d009      	beq.n	800aefc <inc_lock+0xe0>
 800aee8:	4a12      	ldr	r2, [pc, #72]	; (800af34 <inc_lock+0x118>)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	011b      	lsls	r3, r3, #4
 800aeee:	4413      	add	r3, r2
 800aef0:	330c      	adds	r3, #12
 800aef2:	881b      	ldrh	r3, [r3, #0]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d001      	beq.n	800aefc <inc_lock+0xe0>
 800aef8:	2300      	movs	r3, #0
 800aefa:	e015      	b.n	800af28 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d108      	bne.n	800af14 <inc_lock+0xf8>
 800af02:	4a0c      	ldr	r2, [pc, #48]	; (800af34 <inc_lock+0x118>)
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	011b      	lsls	r3, r3, #4
 800af08:	4413      	add	r3, r2
 800af0a:	330c      	adds	r3, #12
 800af0c:	881b      	ldrh	r3, [r3, #0]
 800af0e:	3301      	adds	r3, #1
 800af10:	b29a      	uxth	r2, r3
 800af12:	e001      	b.n	800af18 <inc_lock+0xfc>
 800af14:	f44f 7280 	mov.w	r2, #256	; 0x100
 800af18:	4906      	ldr	r1, [pc, #24]	; (800af34 <inc_lock+0x118>)
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	011b      	lsls	r3, r3, #4
 800af1e:	440b      	add	r3, r1
 800af20:	330c      	adds	r3, #12
 800af22:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	3301      	adds	r3, #1
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3714      	adds	r7, #20
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr
 800af34:	200022dc 	.word	0x200022dc

0800af38 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800af38:	b480      	push	{r7}
 800af3a:	b085      	sub	sp, #20
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	3b01      	subs	r3, #1
 800af44:	607b      	str	r3, [r7, #4]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d825      	bhi.n	800af98 <dec_lock+0x60>
		n = Files[i].ctr;
 800af4c:	4a17      	ldr	r2, [pc, #92]	; (800afac <dec_lock+0x74>)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	011b      	lsls	r3, r3, #4
 800af52:	4413      	add	r3, r2
 800af54:	330c      	adds	r3, #12
 800af56:	881b      	ldrh	r3, [r3, #0]
 800af58:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800af5a:	89fb      	ldrh	r3, [r7, #14]
 800af5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af60:	d101      	bne.n	800af66 <dec_lock+0x2e>
 800af62:	2300      	movs	r3, #0
 800af64:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800af66:	89fb      	ldrh	r3, [r7, #14]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d002      	beq.n	800af72 <dec_lock+0x3a>
 800af6c:	89fb      	ldrh	r3, [r7, #14]
 800af6e:	3b01      	subs	r3, #1
 800af70:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800af72:	4a0e      	ldr	r2, [pc, #56]	; (800afac <dec_lock+0x74>)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	011b      	lsls	r3, r3, #4
 800af78:	4413      	add	r3, r2
 800af7a:	330c      	adds	r3, #12
 800af7c:	89fa      	ldrh	r2, [r7, #14]
 800af7e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800af80:	89fb      	ldrh	r3, [r7, #14]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d105      	bne.n	800af92 <dec_lock+0x5a>
 800af86:	4a09      	ldr	r2, [pc, #36]	; (800afac <dec_lock+0x74>)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	011b      	lsls	r3, r3, #4
 800af8c:	4413      	add	r3, r2
 800af8e:	2200      	movs	r2, #0
 800af90:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800af92:	2300      	movs	r3, #0
 800af94:	737b      	strb	r3, [r7, #13]
 800af96:	e001      	b.n	800af9c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800af98:	2302      	movs	r3, #2
 800af9a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800af9c:	7b7b      	ldrb	r3, [r7, #13]
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3714      	adds	r7, #20
 800afa2:	46bd      	mov	sp, r7
 800afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa8:	4770      	bx	lr
 800afaa:	bf00      	nop
 800afac:	200022dc 	.word	0x200022dc

0800afb0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b085      	sub	sp, #20
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800afb8:	2300      	movs	r3, #0
 800afba:	60fb      	str	r3, [r7, #12]
 800afbc:	e010      	b.n	800afe0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800afbe:	4a0d      	ldr	r2, [pc, #52]	; (800aff4 <clear_lock+0x44>)
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	011b      	lsls	r3, r3, #4
 800afc4:	4413      	add	r3, r2
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	429a      	cmp	r2, r3
 800afcc:	d105      	bne.n	800afda <clear_lock+0x2a>
 800afce:	4a09      	ldr	r2, [pc, #36]	; (800aff4 <clear_lock+0x44>)
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	011b      	lsls	r3, r3, #4
 800afd4:	4413      	add	r3, r2
 800afd6:	2200      	movs	r2, #0
 800afd8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	3301      	adds	r3, #1
 800afde:	60fb      	str	r3, [r7, #12]
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2b01      	cmp	r3, #1
 800afe4:	d9eb      	bls.n	800afbe <clear_lock+0xe>
	}
}
 800afe6:	bf00      	nop
 800afe8:	bf00      	nop
 800afea:	3714      	adds	r7, #20
 800afec:	46bd      	mov	sp, r7
 800afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff2:	4770      	bx	lr
 800aff4:	200022dc 	.word	0x200022dc

0800aff8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b086      	sub	sp, #24
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b000:	2300      	movs	r3, #0
 800b002:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	78db      	ldrb	r3, [r3, #3]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d034      	beq.n	800b076 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b010:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	7858      	ldrb	r0, [r3, #1]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b01c:	2301      	movs	r3, #1
 800b01e:	697a      	ldr	r2, [r7, #20]
 800b020:	f7ff fd40 	bl	800aaa4 <disk_write>
 800b024:	4603      	mov	r3, r0
 800b026:	2b00      	cmp	r3, #0
 800b028:	d002      	beq.n	800b030 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b02a:	2301      	movs	r3, #1
 800b02c:	73fb      	strb	r3, [r7, #15]
 800b02e:	e022      	b.n	800b076 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2200      	movs	r2, #0
 800b034:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b03a:	697a      	ldr	r2, [r7, #20]
 800b03c:	1ad2      	subs	r2, r2, r3
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6a1b      	ldr	r3, [r3, #32]
 800b042:	429a      	cmp	r2, r3
 800b044:	d217      	bcs.n	800b076 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	789b      	ldrb	r3, [r3, #2]
 800b04a:	613b      	str	r3, [r7, #16]
 800b04c:	e010      	b.n	800b070 <sync_window+0x78>
					wsect += fs->fsize;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6a1b      	ldr	r3, [r3, #32]
 800b052:	697a      	ldr	r2, [r7, #20]
 800b054:	4413      	add	r3, r2
 800b056:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	7858      	ldrb	r0, [r3, #1]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b062:	2301      	movs	r3, #1
 800b064:	697a      	ldr	r2, [r7, #20]
 800b066:	f7ff fd1d 	bl	800aaa4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	3b01      	subs	r3, #1
 800b06e:	613b      	str	r3, [r7, #16]
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	2b01      	cmp	r3, #1
 800b074:	d8eb      	bhi.n	800b04e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b076:	7bfb      	ldrb	r3, [r7, #15]
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3718      	adds	r7, #24
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b08a:	2300      	movs	r3, #0
 800b08c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b092:	683a      	ldr	r2, [r7, #0]
 800b094:	429a      	cmp	r2, r3
 800b096:	d01b      	beq.n	800b0d0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f7ff ffad 	bl	800aff8 <sync_window>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b0a2:	7bfb      	ldrb	r3, [r7, #15]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d113      	bne.n	800b0d0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	7858      	ldrb	r0, [r3, #1]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	683a      	ldr	r2, [r7, #0]
 800b0b6:	f7ff fcd5 	bl	800aa64 <disk_read>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d004      	beq.n	800b0ca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b0c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b0c4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	683a      	ldr	r2, [r7, #0]
 800b0ce:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800b0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3710      	adds	r7, #16
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
	...

0800b0dc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b084      	sub	sp, #16
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f7ff ff87 	bl	800aff8 <sync_window>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b0ee:	7bfb      	ldrb	r3, [r7, #15]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d159      	bne.n	800b1a8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	781b      	ldrb	r3, [r3, #0]
 800b0f8:	2b03      	cmp	r3, #3
 800b0fa:	d149      	bne.n	800b190 <sync_fs+0xb4>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	791b      	ldrb	r3, [r3, #4]
 800b100:	2b01      	cmp	r3, #1
 800b102:	d145      	bne.n	800b190 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	899b      	ldrh	r3, [r3, #12]
 800b10e:	461a      	mov	r2, r3
 800b110:	2100      	movs	r1, #0
 800b112:	f7ff fda8 	bl	800ac66 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	3338      	adds	r3, #56	; 0x38
 800b11a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b11e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b122:	4618      	mov	r0, r3
 800b124:	f7ff fd37 	bl	800ab96 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	3338      	adds	r3, #56	; 0x38
 800b12c:	4921      	ldr	r1, [pc, #132]	; (800b1b4 <sync_fs+0xd8>)
 800b12e:	4618      	mov	r0, r3
 800b130:	f7ff fd4c 	bl	800abcc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	3338      	adds	r3, #56	; 0x38
 800b138:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b13c:	491e      	ldr	r1, [pc, #120]	; (800b1b8 <sync_fs+0xdc>)
 800b13e:	4618      	mov	r0, r3
 800b140:	f7ff fd44 	bl	800abcc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	3338      	adds	r3, #56	; 0x38
 800b148:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	699b      	ldr	r3, [r3, #24]
 800b150:	4619      	mov	r1, r3
 800b152:	4610      	mov	r0, r2
 800b154:	f7ff fd3a 	bl	800abcc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	3338      	adds	r3, #56	; 0x38
 800b15c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	695b      	ldr	r3, [r3, #20]
 800b164:	4619      	mov	r1, r3
 800b166:	4610      	mov	r0, r2
 800b168:	f7ff fd30 	bl	800abcc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b170:	1c5a      	adds	r2, r3, #1
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	7858      	ldrb	r0, [r3, #1]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b184:	2301      	movs	r3, #1
 800b186:	f7ff fc8d 	bl	800aaa4 <disk_write>
			fs->fsi_flag = 0;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2200      	movs	r2, #0
 800b18e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	785b      	ldrb	r3, [r3, #1]
 800b194:	2200      	movs	r2, #0
 800b196:	2100      	movs	r1, #0
 800b198:	4618      	mov	r0, r3
 800b19a:	f7ff fca3 	bl	800aae4 <disk_ioctl>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d001      	beq.n	800b1a8 <sync_fs+0xcc>
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b1a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3710      	adds	r7, #16
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}
 800b1b2:	bf00      	nop
 800b1b4:	41615252 	.word	0x41615252
 800b1b8:	61417272 	.word	0x61417272

0800b1bc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b083      	sub	sp, #12
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	3b02      	subs	r3, #2
 800b1ca:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	69db      	ldr	r3, [r3, #28]
 800b1d0:	3b02      	subs	r3, #2
 800b1d2:	683a      	ldr	r2, [r7, #0]
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d301      	bcc.n	800b1dc <clust2sect+0x20>
 800b1d8:	2300      	movs	r3, #0
 800b1da:	e008      	b.n	800b1ee <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	895b      	ldrh	r3, [r3, #10]
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	fb03 f202 	mul.w	r2, r3, r2
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1ec:	4413      	add	r3, r2
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	370c      	adds	r7, #12
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr

0800b1fa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b1fa:	b580      	push	{r7, lr}
 800b1fc:	b086      	sub	sp, #24
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
 800b202:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d904      	bls.n	800b21a <get_fat+0x20>
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	69db      	ldr	r3, [r3, #28]
 800b214:	683a      	ldr	r2, [r7, #0]
 800b216:	429a      	cmp	r2, r3
 800b218:	d302      	bcc.n	800b220 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b21a:	2301      	movs	r3, #1
 800b21c:	617b      	str	r3, [r7, #20]
 800b21e:	e0bb      	b.n	800b398 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b220:	f04f 33ff 	mov.w	r3, #4294967295
 800b224:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	2b03      	cmp	r3, #3
 800b22c:	f000 8083 	beq.w	800b336 <get_fat+0x13c>
 800b230:	2b03      	cmp	r3, #3
 800b232:	f300 80a7 	bgt.w	800b384 <get_fat+0x18a>
 800b236:	2b01      	cmp	r3, #1
 800b238:	d002      	beq.n	800b240 <get_fat+0x46>
 800b23a:	2b02      	cmp	r3, #2
 800b23c:	d056      	beq.n	800b2ec <get_fat+0xf2>
 800b23e:	e0a1      	b.n	800b384 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	60fb      	str	r3, [r7, #12]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	085b      	lsrs	r3, r3, #1
 800b248:	68fa      	ldr	r2, [r7, #12]
 800b24a:	4413      	add	r3, r2
 800b24c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	899b      	ldrh	r3, [r3, #12]
 800b256:	4619      	mov	r1, r3
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b25e:	4413      	add	r3, r2
 800b260:	4619      	mov	r1, r3
 800b262:	6938      	ldr	r0, [r7, #16]
 800b264:	f7ff ff0c 	bl	800b080 <move_window>
 800b268:	4603      	mov	r3, r0
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	f040 808d 	bne.w	800b38a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	1c5a      	adds	r2, r3, #1
 800b274:	60fa      	str	r2, [r7, #12]
 800b276:	693a      	ldr	r2, [r7, #16]
 800b278:	8992      	ldrh	r2, [r2, #12]
 800b27a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b27e:	fb02 f201 	mul.w	r2, r2, r1
 800b282:	1a9b      	subs	r3, r3, r2
 800b284:	693a      	ldr	r2, [r7, #16]
 800b286:	4413      	add	r3, r2
 800b288:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b28c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	899b      	ldrh	r3, [r3, #12]
 800b296:	4619      	mov	r1, r3
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b29e:	4413      	add	r3, r2
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	6938      	ldr	r0, [r7, #16]
 800b2a4:	f7ff feec 	bl	800b080 <move_window>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d16f      	bne.n	800b38e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	899b      	ldrh	r3, [r3, #12]
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	fbb3 f1f2 	udiv	r1, r3, r2
 800b2ba:	fb02 f201 	mul.w	r2, r2, r1
 800b2be:	1a9b      	subs	r3, r3, r2
 800b2c0:	693a      	ldr	r2, [r7, #16]
 800b2c2:	4413      	add	r3, r2
 800b2c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b2c8:	021b      	lsls	r3, r3, #8
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	f003 0301 	and.w	r3, r3, #1
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d002      	beq.n	800b2e2 <get_fat+0xe8>
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	091b      	lsrs	r3, r3, #4
 800b2e0:	e002      	b.n	800b2e8 <get_fat+0xee>
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2e8:	617b      	str	r3, [r7, #20]
			break;
 800b2ea:	e055      	b.n	800b398 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	899b      	ldrh	r3, [r3, #12]
 800b2f4:	085b      	lsrs	r3, r3, #1
 800b2f6:	b29b      	uxth	r3, r3
 800b2f8:	4619      	mov	r1, r3
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	fbb3 f3f1 	udiv	r3, r3, r1
 800b300:	4413      	add	r3, r2
 800b302:	4619      	mov	r1, r3
 800b304:	6938      	ldr	r0, [r7, #16]
 800b306:	f7ff febb 	bl	800b080 <move_window>
 800b30a:	4603      	mov	r3, r0
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d140      	bne.n	800b392 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	005b      	lsls	r3, r3, #1
 800b31a:	693a      	ldr	r2, [r7, #16]
 800b31c:	8992      	ldrh	r2, [r2, #12]
 800b31e:	fbb3 f0f2 	udiv	r0, r3, r2
 800b322:	fb02 f200 	mul.w	r2, r2, r0
 800b326:	1a9b      	subs	r3, r3, r2
 800b328:	440b      	add	r3, r1
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7ff fbf8 	bl	800ab20 <ld_word>
 800b330:	4603      	mov	r3, r0
 800b332:	617b      	str	r3, [r7, #20]
			break;
 800b334:	e030      	b.n	800b398 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	899b      	ldrh	r3, [r3, #12]
 800b33e:	089b      	lsrs	r3, r3, #2
 800b340:	b29b      	uxth	r3, r3
 800b342:	4619      	mov	r1, r3
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	fbb3 f3f1 	udiv	r3, r3, r1
 800b34a:	4413      	add	r3, r2
 800b34c:	4619      	mov	r1, r3
 800b34e:	6938      	ldr	r0, [r7, #16]
 800b350:	f7ff fe96 	bl	800b080 <move_window>
 800b354:	4603      	mov	r3, r0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d11d      	bne.n	800b396 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	009b      	lsls	r3, r3, #2
 800b364:	693a      	ldr	r2, [r7, #16]
 800b366:	8992      	ldrh	r2, [r2, #12]
 800b368:	fbb3 f0f2 	udiv	r0, r3, r2
 800b36c:	fb02 f200 	mul.w	r2, r2, r0
 800b370:	1a9b      	subs	r3, r3, r2
 800b372:	440b      	add	r3, r1
 800b374:	4618      	mov	r0, r3
 800b376:	f7ff fbeb 	bl	800ab50 <ld_dword>
 800b37a:	4603      	mov	r3, r0
 800b37c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b380:	617b      	str	r3, [r7, #20]
			break;
 800b382:	e009      	b.n	800b398 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b384:	2301      	movs	r3, #1
 800b386:	617b      	str	r3, [r7, #20]
 800b388:	e006      	b.n	800b398 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b38a:	bf00      	nop
 800b38c:	e004      	b.n	800b398 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b38e:	bf00      	nop
 800b390:	e002      	b.n	800b398 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b392:	bf00      	nop
 800b394:	e000      	b.n	800b398 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b396:	bf00      	nop
		}
	}

	return val;
 800b398:	697b      	ldr	r3, [r7, #20]
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3718      	adds	r7, #24
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}

0800b3a2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b3a2:	b590      	push	{r4, r7, lr}
 800b3a4:	b089      	sub	sp, #36	; 0x24
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	60f8      	str	r0, [r7, #12]
 800b3aa:	60b9      	str	r1, [r7, #8]
 800b3ac:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b3ae:	2302      	movs	r3, #2
 800b3b0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	f240 8102 	bls.w	800b5be <put_fat+0x21c>
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	69db      	ldr	r3, [r3, #28]
 800b3be:	68ba      	ldr	r2, [r7, #8]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	f080 80fc 	bcs.w	800b5be <put_fat+0x21c>
		switch (fs->fs_type) {
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	781b      	ldrb	r3, [r3, #0]
 800b3ca:	2b03      	cmp	r3, #3
 800b3cc:	f000 80b6 	beq.w	800b53c <put_fat+0x19a>
 800b3d0:	2b03      	cmp	r3, #3
 800b3d2:	f300 80fd 	bgt.w	800b5d0 <put_fat+0x22e>
 800b3d6:	2b01      	cmp	r3, #1
 800b3d8:	d003      	beq.n	800b3e2 <put_fat+0x40>
 800b3da:	2b02      	cmp	r3, #2
 800b3dc:	f000 8083 	beq.w	800b4e6 <put_fat+0x144>
 800b3e0:	e0f6      	b.n	800b5d0 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	61bb      	str	r3, [r7, #24]
 800b3e6:	69bb      	ldr	r3, [r7, #24]
 800b3e8:	085b      	lsrs	r3, r3, #1
 800b3ea:	69ba      	ldr	r2, [r7, #24]
 800b3ec:	4413      	add	r3, r2
 800b3ee:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	899b      	ldrh	r3, [r3, #12]
 800b3f8:	4619      	mov	r1, r3
 800b3fa:	69bb      	ldr	r3, [r7, #24]
 800b3fc:	fbb3 f3f1 	udiv	r3, r3, r1
 800b400:	4413      	add	r3, r2
 800b402:	4619      	mov	r1, r3
 800b404:	68f8      	ldr	r0, [r7, #12]
 800b406:	f7ff fe3b 	bl	800b080 <move_window>
 800b40a:	4603      	mov	r3, r0
 800b40c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b40e:	7ffb      	ldrb	r3, [r7, #31]
 800b410:	2b00      	cmp	r3, #0
 800b412:	f040 80d6 	bne.w	800b5c2 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b41c:	69bb      	ldr	r3, [r7, #24]
 800b41e:	1c5a      	adds	r2, r3, #1
 800b420:	61ba      	str	r2, [r7, #24]
 800b422:	68fa      	ldr	r2, [r7, #12]
 800b424:	8992      	ldrh	r2, [r2, #12]
 800b426:	fbb3 f0f2 	udiv	r0, r3, r2
 800b42a:	fb02 f200 	mul.w	r2, r2, r0
 800b42e:	1a9b      	subs	r3, r3, r2
 800b430:	440b      	add	r3, r1
 800b432:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	f003 0301 	and.w	r3, r3, #1
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d00d      	beq.n	800b45a <put_fat+0xb8>
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	b25b      	sxtb	r3, r3
 800b444:	f003 030f 	and.w	r3, r3, #15
 800b448:	b25a      	sxtb	r2, r3
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	b2db      	uxtb	r3, r3
 800b44e:	011b      	lsls	r3, r3, #4
 800b450:	b25b      	sxtb	r3, r3
 800b452:	4313      	orrs	r3, r2
 800b454:	b25b      	sxtb	r3, r3
 800b456:	b2db      	uxtb	r3, r3
 800b458:	e001      	b.n	800b45e <put_fat+0xbc>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	b2db      	uxtb	r3, r3
 800b45e:	697a      	ldr	r2, [r7, #20]
 800b460:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2201      	movs	r2, #1
 800b466:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	899b      	ldrh	r3, [r3, #12]
 800b470:	4619      	mov	r1, r3
 800b472:	69bb      	ldr	r3, [r7, #24]
 800b474:	fbb3 f3f1 	udiv	r3, r3, r1
 800b478:	4413      	add	r3, r2
 800b47a:	4619      	mov	r1, r3
 800b47c:	68f8      	ldr	r0, [r7, #12]
 800b47e:	f7ff fdff 	bl	800b080 <move_window>
 800b482:	4603      	mov	r3, r0
 800b484:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b486:	7ffb      	ldrb	r3, [r7, #31]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	f040 809c 	bne.w	800b5c6 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	899b      	ldrh	r3, [r3, #12]
 800b498:	461a      	mov	r2, r3
 800b49a:	69bb      	ldr	r3, [r7, #24]
 800b49c:	fbb3 f0f2 	udiv	r0, r3, r2
 800b4a0:	fb02 f200 	mul.w	r2, r2, r0
 800b4a4:	1a9b      	subs	r3, r3, r2
 800b4a6:	440b      	add	r3, r1
 800b4a8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	f003 0301 	and.w	r3, r3, #1
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d003      	beq.n	800b4bc <put_fat+0x11a>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	091b      	lsrs	r3, r3, #4
 800b4b8:	b2db      	uxtb	r3, r3
 800b4ba:	e00e      	b.n	800b4da <put_fat+0x138>
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	b25b      	sxtb	r3, r3
 800b4c2:	f023 030f 	bic.w	r3, r3, #15
 800b4c6:	b25a      	sxtb	r2, r3
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	0a1b      	lsrs	r3, r3, #8
 800b4cc:	b25b      	sxtb	r3, r3
 800b4ce:	f003 030f 	and.w	r3, r3, #15
 800b4d2:	b25b      	sxtb	r3, r3
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	b25b      	sxtb	r3, r3
 800b4d8:	b2db      	uxtb	r3, r3
 800b4da:	697a      	ldr	r2, [r7, #20]
 800b4dc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	70da      	strb	r2, [r3, #3]
			break;
 800b4e4:	e074      	b.n	800b5d0 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	899b      	ldrh	r3, [r3, #12]
 800b4ee:	085b      	lsrs	r3, r3, #1
 800b4f0:	b29b      	uxth	r3, r3
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	fbb3 f3f1 	udiv	r3, r3, r1
 800b4fa:	4413      	add	r3, r2
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	68f8      	ldr	r0, [r7, #12]
 800b500:	f7ff fdbe 	bl	800b080 <move_window>
 800b504:	4603      	mov	r3, r0
 800b506:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b508:	7ffb      	ldrb	r3, [r7, #31]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d15d      	bne.n	800b5ca <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	005b      	lsls	r3, r3, #1
 800b518:	68fa      	ldr	r2, [r7, #12]
 800b51a:	8992      	ldrh	r2, [r2, #12]
 800b51c:	fbb3 f0f2 	udiv	r0, r3, r2
 800b520:	fb02 f200 	mul.w	r2, r2, r0
 800b524:	1a9b      	subs	r3, r3, r2
 800b526:	440b      	add	r3, r1
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	b292      	uxth	r2, r2
 800b52c:	4611      	mov	r1, r2
 800b52e:	4618      	mov	r0, r3
 800b530:	f7ff fb31 	bl	800ab96 <st_word>
			fs->wflag = 1;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2201      	movs	r2, #1
 800b538:	70da      	strb	r2, [r3, #3]
			break;
 800b53a:	e049      	b.n	800b5d0 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	899b      	ldrh	r3, [r3, #12]
 800b544:	089b      	lsrs	r3, r3, #2
 800b546:	b29b      	uxth	r3, r3
 800b548:	4619      	mov	r1, r3
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	fbb3 f3f1 	udiv	r3, r3, r1
 800b550:	4413      	add	r3, r2
 800b552:	4619      	mov	r1, r3
 800b554:	68f8      	ldr	r0, [r7, #12]
 800b556:	f7ff fd93 	bl	800b080 <move_window>
 800b55a:	4603      	mov	r3, r0
 800b55c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b55e:	7ffb      	ldrb	r3, [r7, #31]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d134      	bne.n	800b5ce <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	009b      	lsls	r3, r3, #2
 800b574:	68fa      	ldr	r2, [r7, #12]
 800b576:	8992      	ldrh	r2, [r2, #12]
 800b578:	fbb3 f0f2 	udiv	r0, r3, r2
 800b57c:	fb02 f200 	mul.w	r2, r2, r0
 800b580:	1a9b      	subs	r3, r3, r2
 800b582:	440b      	add	r3, r1
 800b584:	4618      	mov	r0, r3
 800b586:	f7ff fae3 	bl	800ab50 <ld_dword>
 800b58a:	4603      	mov	r3, r0
 800b58c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b590:	4323      	orrs	r3, r4
 800b592:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	68fa      	ldr	r2, [r7, #12]
 800b5a0:	8992      	ldrh	r2, [r2, #12]
 800b5a2:	fbb3 f0f2 	udiv	r0, r3, r2
 800b5a6:	fb02 f200 	mul.w	r2, r2, r0
 800b5aa:	1a9b      	subs	r3, r3, r2
 800b5ac:	440b      	add	r3, r1
 800b5ae:	6879      	ldr	r1, [r7, #4]
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f7ff fb0b 	bl	800abcc <st_dword>
			fs->wflag = 1;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2201      	movs	r2, #1
 800b5ba:	70da      	strb	r2, [r3, #3]
			break;
 800b5bc:	e008      	b.n	800b5d0 <put_fat+0x22e>
		}
	}
 800b5be:	bf00      	nop
 800b5c0:	e006      	b.n	800b5d0 <put_fat+0x22e>
			if (res != FR_OK) break;
 800b5c2:	bf00      	nop
 800b5c4:	e004      	b.n	800b5d0 <put_fat+0x22e>
			if (res != FR_OK) break;
 800b5c6:	bf00      	nop
 800b5c8:	e002      	b.n	800b5d0 <put_fat+0x22e>
			if (res != FR_OK) break;
 800b5ca:	bf00      	nop
 800b5cc:	e000      	b.n	800b5d0 <put_fat+0x22e>
			if (res != FR_OK) break;
 800b5ce:	bf00      	nop
	return res;
 800b5d0:	7ffb      	ldrb	r3, [r7, #31]
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3724      	adds	r7, #36	; 0x24
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd90      	pop	{r4, r7, pc}

0800b5da <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b5da:	b580      	push	{r7, lr}
 800b5dc:	b088      	sub	sp, #32
 800b5de:	af00      	add	r7, sp, #0
 800b5e0:	60f8      	str	r0, [r7, #12]
 800b5e2:	60b9      	str	r1, [r7, #8]
 800b5e4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	2b01      	cmp	r3, #1
 800b5f4:	d904      	bls.n	800b600 <remove_chain+0x26>
 800b5f6:	69bb      	ldr	r3, [r7, #24]
 800b5f8:	69db      	ldr	r3, [r3, #28]
 800b5fa:	68ba      	ldr	r2, [r7, #8]
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	d301      	bcc.n	800b604 <remove_chain+0x2a>
 800b600:	2302      	movs	r3, #2
 800b602:	e04b      	b.n	800b69c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d00c      	beq.n	800b624 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b60a:	f04f 32ff 	mov.w	r2, #4294967295
 800b60e:	6879      	ldr	r1, [r7, #4]
 800b610:	69b8      	ldr	r0, [r7, #24]
 800b612:	f7ff fec6 	bl	800b3a2 <put_fat>
 800b616:	4603      	mov	r3, r0
 800b618:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b61a:	7ffb      	ldrb	r3, [r7, #31]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d001      	beq.n	800b624 <remove_chain+0x4a>
 800b620:	7ffb      	ldrb	r3, [r7, #31]
 800b622:	e03b      	b.n	800b69c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b624:	68b9      	ldr	r1, [r7, #8]
 800b626:	68f8      	ldr	r0, [r7, #12]
 800b628:	f7ff fde7 	bl	800b1fa <get_fat>
 800b62c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d031      	beq.n	800b698 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	2b01      	cmp	r3, #1
 800b638:	d101      	bne.n	800b63e <remove_chain+0x64>
 800b63a:	2302      	movs	r3, #2
 800b63c:	e02e      	b.n	800b69c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b644:	d101      	bne.n	800b64a <remove_chain+0x70>
 800b646:	2301      	movs	r3, #1
 800b648:	e028      	b.n	800b69c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b64a:	2200      	movs	r2, #0
 800b64c:	68b9      	ldr	r1, [r7, #8]
 800b64e:	69b8      	ldr	r0, [r7, #24]
 800b650:	f7ff fea7 	bl	800b3a2 <put_fat>
 800b654:	4603      	mov	r3, r0
 800b656:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b658:	7ffb      	ldrb	r3, [r7, #31]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d001      	beq.n	800b662 <remove_chain+0x88>
 800b65e:	7ffb      	ldrb	r3, [r7, #31]
 800b660:	e01c      	b.n	800b69c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b662:	69bb      	ldr	r3, [r7, #24]
 800b664:	699a      	ldr	r2, [r3, #24]
 800b666:	69bb      	ldr	r3, [r7, #24]
 800b668:	69db      	ldr	r3, [r3, #28]
 800b66a:	3b02      	subs	r3, #2
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d20b      	bcs.n	800b688 <remove_chain+0xae>
			fs->free_clst++;
 800b670:	69bb      	ldr	r3, [r7, #24]
 800b672:	699b      	ldr	r3, [r3, #24]
 800b674:	1c5a      	adds	r2, r3, #1
 800b676:	69bb      	ldr	r3, [r7, #24]
 800b678:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800b67a:	69bb      	ldr	r3, [r7, #24]
 800b67c:	791b      	ldrb	r3, [r3, #4]
 800b67e:	f043 0301 	orr.w	r3, r3, #1
 800b682:	b2da      	uxtb	r2, r3
 800b684:	69bb      	ldr	r3, [r7, #24]
 800b686:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b68c:	69bb      	ldr	r3, [r7, #24]
 800b68e:	69db      	ldr	r3, [r3, #28]
 800b690:	68ba      	ldr	r2, [r7, #8]
 800b692:	429a      	cmp	r2, r3
 800b694:	d3c6      	bcc.n	800b624 <remove_chain+0x4a>
 800b696:	e000      	b.n	800b69a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b698:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b69a:	2300      	movs	r3, #0
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3720      	adds	r7, #32
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b088      	sub	sp, #32
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d10d      	bne.n	800b6d6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	695b      	ldr	r3, [r3, #20]
 800b6be:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b6c0:	69bb      	ldr	r3, [r7, #24]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d004      	beq.n	800b6d0 <create_chain+0x2c>
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	69db      	ldr	r3, [r3, #28]
 800b6ca:	69ba      	ldr	r2, [r7, #24]
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	d31b      	bcc.n	800b708 <create_chain+0x64>
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	61bb      	str	r3, [r7, #24]
 800b6d4:	e018      	b.n	800b708 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b6d6:	6839      	ldr	r1, [r7, #0]
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f7ff fd8e 	bl	800b1fa <get_fat>
 800b6de:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	2b01      	cmp	r3, #1
 800b6e4:	d801      	bhi.n	800b6ea <create_chain+0x46>
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	e070      	b.n	800b7cc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6f0:	d101      	bne.n	800b6f6 <create_chain+0x52>
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	e06a      	b.n	800b7cc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	69db      	ldr	r3, [r3, #28]
 800b6fa:	68fa      	ldr	r2, [r7, #12]
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d201      	bcs.n	800b704 <create_chain+0x60>
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	e063      	b.n	800b7cc <create_chain+0x128>
		scl = clst;
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b708:	69bb      	ldr	r3, [r7, #24]
 800b70a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b70c:	69fb      	ldr	r3, [r7, #28]
 800b70e:	3301      	adds	r3, #1
 800b710:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	69db      	ldr	r3, [r3, #28]
 800b716:	69fa      	ldr	r2, [r7, #28]
 800b718:	429a      	cmp	r2, r3
 800b71a:	d307      	bcc.n	800b72c <create_chain+0x88>
				ncl = 2;
 800b71c:	2302      	movs	r3, #2
 800b71e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b720:	69fa      	ldr	r2, [r7, #28]
 800b722:	69bb      	ldr	r3, [r7, #24]
 800b724:	429a      	cmp	r2, r3
 800b726:	d901      	bls.n	800b72c <create_chain+0x88>
 800b728:	2300      	movs	r3, #0
 800b72a:	e04f      	b.n	800b7cc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b72c:	69f9      	ldr	r1, [r7, #28]
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f7ff fd63 	bl	800b1fa <get_fat>
 800b734:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d00e      	beq.n	800b75a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	2b01      	cmp	r3, #1
 800b740:	d003      	beq.n	800b74a <create_chain+0xa6>
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b748:	d101      	bne.n	800b74e <create_chain+0xaa>
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	e03e      	b.n	800b7cc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b74e:	69fa      	ldr	r2, [r7, #28]
 800b750:	69bb      	ldr	r3, [r7, #24]
 800b752:	429a      	cmp	r2, r3
 800b754:	d1da      	bne.n	800b70c <create_chain+0x68>
 800b756:	2300      	movs	r3, #0
 800b758:	e038      	b.n	800b7cc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b75a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b75c:	f04f 32ff 	mov.w	r2, #4294967295
 800b760:	69f9      	ldr	r1, [r7, #28]
 800b762:	6938      	ldr	r0, [r7, #16]
 800b764:	f7ff fe1d 	bl	800b3a2 <put_fat>
 800b768:	4603      	mov	r3, r0
 800b76a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b76c:	7dfb      	ldrb	r3, [r7, #23]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d109      	bne.n	800b786 <create_chain+0xe2>
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d006      	beq.n	800b786 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b778:	69fa      	ldr	r2, [r7, #28]
 800b77a:	6839      	ldr	r1, [r7, #0]
 800b77c:	6938      	ldr	r0, [r7, #16]
 800b77e:	f7ff fe10 	bl	800b3a2 <put_fat>
 800b782:	4603      	mov	r3, r0
 800b784:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b786:	7dfb      	ldrb	r3, [r7, #23]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d116      	bne.n	800b7ba <create_chain+0x116>
		fs->last_clst = ncl;
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	69fa      	ldr	r2, [r7, #28]
 800b790:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	699a      	ldr	r2, [r3, #24]
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	69db      	ldr	r3, [r3, #28]
 800b79a:	3b02      	subs	r3, #2
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d804      	bhi.n	800b7aa <create_chain+0x106>
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	699b      	ldr	r3, [r3, #24]
 800b7a4:	1e5a      	subs	r2, r3, #1
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	791b      	ldrb	r3, [r3, #4]
 800b7ae:	f043 0301 	orr.w	r3, r3, #1
 800b7b2:	b2da      	uxtb	r2, r3
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	711a      	strb	r2, [r3, #4]
 800b7b8:	e007      	b.n	800b7ca <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b7ba:	7dfb      	ldrb	r3, [r7, #23]
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d102      	bne.n	800b7c6 <create_chain+0x122>
 800b7c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b7c4:	e000      	b.n	800b7c8 <create_chain+0x124>
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b7ca:	69fb      	ldr	r3, [r7, #28]
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3720      	adds	r7, #32
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b087      	sub	sp, #28
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e8:	3304      	adds	r3, #4
 800b7ea:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	899b      	ldrh	r3, [r3, #12]
 800b7f0:	461a      	mov	r2, r3
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7f8:	68fa      	ldr	r2, [r7, #12]
 800b7fa:	8952      	ldrh	r2, [r2, #10]
 800b7fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800b800:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	1d1a      	adds	r2, r3, #4
 800b806:	613a      	str	r2, [r7, #16]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d101      	bne.n	800b816 <clmt_clust+0x42>
 800b812:	2300      	movs	r3, #0
 800b814:	e010      	b.n	800b838 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800b816:	697a      	ldr	r2, [r7, #20]
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d307      	bcc.n	800b82e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800b81e:	697a      	ldr	r2, [r7, #20]
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	1ad3      	subs	r3, r2, r3
 800b824:	617b      	str	r3, [r7, #20]
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	3304      	adds	r3, #4
 800b82a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b82c:	e7e9      	b.n	800b802 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800b82e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	681a      	ldr	r2, [r3, #0]
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	4413      	add	r3, r2
}
 800b838:	4618      	mov	r0, r3
 800b83a:	371c      	adds	r7, #28
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr

0800b844 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b086      	sub	sp, #24
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b85a:	d204      	bcs.n	800b866 <dir_sdi+0x22>
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	f003 031f 	and.w	r3, r3, #31
 800b862:	2b00      	cmp	r3, #0
 800b864:	d001      	beq.n	800b86a <dir_sdi+0x26>
		return FR_INT_ERR;
 800b866:	2302      	movs	r3, #2
 800b868:	e071      	b.n	800b94e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	683a      	ldr	r2, [r7, #0]
 800b86e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	689b      	ldr	r3, [r3, #8]
 800b874:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d106      	bne.n	800b88a <dir_sdi+0x46>
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	781b      	ldrb	r3, [r3, #0]
 800b880:	2b02      	cmp	r3, #2
 800b882:	d902      	bls.n	800b88a <dir_sdi+0x46>
		clst = fs->dirbase;
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b888:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d10c      	bne.n	800b8aa <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	095b      	lsrs	r3, r3, #5
 800b894:	693a      	ldr	r2, [r7, #16]
 800b896:	8912      	ldrh	r2, [r2, #8]
 800b898:	4293      	cmp	r3, r2
 800b89a:	d301      	bcc.n	800b8a0 <dir_sdi+0x5c>
 800b89c:	2302      	movs	r3, #2
 800b89e:	e056      	b.n	800b94e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	61da      	str	r2, [r3, #28]
 800b8a8:	e02d      	b.n	800b906 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	895b      	ldrh	r3, [r3, #10]
 800b8ae:	461a      	mov	r2, r3
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	899b      	ldrh	r3, [r3, #12]
 800b8b4:	fb03 f302 	mul.w	r3, r3, r2
 800b8b8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b8ba:	e019      	b.n	800b8f0 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6979      	ldr	r1, [r7, #20]
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f7ff fc9a 	bl	800b1fa <get_fat>
 800b8c6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ce:	d101      	bne.n	800b8d4 <dir_sdi+0x90>
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	e03c      	b.n	800b94e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	2b01      	cmp	r3, #1
 800b8d8:	d904      	bls.n	800b8e4 <dir_sdi+0xa0>
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	69db      	ldr	r3, [r3, #28]
 800b8de:	697a      	ldr	r2, [r7, #20]
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d301      	bcc.n	800b8e8 <dir_sdi+0xa4>
 800b8e4:	2302      	movs	r3, #2
 800b8e6:	e032      	b.n	800b94e <dir_sdi+0x10a>
			ofs -= csz;
 800b8e8:	683a      	ldr	r2, [r7, #0]
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	1ad3      	subs	r3, r2, r3
 800b8ee:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b8f0:	683a      	ldr	r2, [r7, #0]
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d2e1      	bcs.n	800b8bc <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800b8f8:	6979      	ldr	r1, [r7, #20]
 800b8fa:	6938      	ldr	r0, [r7, #16]
 800b8fc:	f7ff fc5e 	bl	800b1bc <clust2sect>
 800b900:	4602      	mov	r2, r0
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	697a      	ldr	r2, [r7, #20]
 800b90a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	69db      	ldr	r3, [r3, #28]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d101      	bne.n	800b918 <dir_sdi+0xd4>
 800b914:	2302      	movs	r3, #2
 800b916:	e01a      	b.n	800b94e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	69da      	ldr	r2, [r3, #28]
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	899b      	ldrh	r3, [r3, #12]
 800b920:	4619      	mov	r1, r3
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	fbb3 f3f1 	udiv	r3, r3, r1
 800b928:	441a      	add	r2, r3
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	899b      	ldrh	r3, [r3, #12]
 800b938:	461a      	mov	r2, r3
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	fbb3 f0f2 	udiv	r0, r3, r2
 800b940:	fb02 f200 	mul.w	r2, r2, r0
 800b944:	1a9b      	subs	r3, r3, r2
 800b946:	18ca      	adds	r2, r1, r3
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b94c:	2300      	movs	r3, #0
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3718      	adds	r7, #24
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}

0800b956 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b956:	b580      	push	{r7, lr}
 800b958:	b086      	sub	sp, #24
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]
 800b95e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	695b      	ldr	r3, [r3, #20]
 800b96a:	3320      	adds	r3, #32
 800b96c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	69db      	ldr	r3, [r3, #28]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d003      	beq.n	800b97e <dir_next+0x28>
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b97c:	d301      	bcc.n	800b982 <dir_next+0x2c>
 800b97e:	2304      	movs	r3, #4
 800b980:	e0bb      	b.n	800bafa <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	899b      	ldrh	r3, [r3, #12]
 800b986:	461a      	mov	r2, r3
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b98e:	fb02 f201 	mul.w	r2, r2, r1
 800b992:	1a9b      	subs	r3, r3, r2
 800b994:	2b00      	cmp	r3, #0
 800b996:	f040 809d 	bne.w	800bad4 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	69db      	ldr	r3, [r3, #28]
 800b99e:	1c5a      	adds	r2, r3, #1
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	699b      	ldr	r3, [r3, #24]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d10b      	bne.n	800b9c4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	095b      	lsrs	r3, r3, #5
 800b9b0:	68fa      	ldr	r2, [r7, #12]
 800b9b2:	8912      	ldrh	r2, [r2, #8]
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	f0c0 808d 	bcc.w	800bad4 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	61da      	str	r2, [r3, #28]
 800b9c0:	2304      	movs	r3, #4
 800b9c2:	e09a      	b.n	800bafa <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	899b      	ldrh	r3, [r3, #12]
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9d0:	68fa      	ldr	r2, [r7, #12]
 800b9d2:	8952      	ldrh	r2, [r2, #10]
 800b9d4:	3a01      	subs	r2, #1
 800b9d6:	4013      	ands	r3, r2
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d17b      	bne.n	800bad4 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b9dc:	687a      	ldr	r2, [r7, #4]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	699b      	ldr	r3, [r3, #24]
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	4610      	mov	r0, r2
 800b9e6:	f7ff fc08 	bl	800b1fa <get_fat>
 800b9ea:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	2b01      	cmp	r3, #1
 800b9f0:	d801      	bhi.n	800b9f6 <dir_next+0xa0>
 800b9f2:	2302      	movs	r3, #2
 800b9f4:	e081      	b.n	800bafa <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9fc:	d101      	bne.n	800ba02 <dir_next+0xac>
 800b9fe:	2301      	movs	r3, #1
 800ba00:	e07b      	b.n	800bafa <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	69db      	ldr	r3, [r3, #28]
 800ba06:	697a      	ldr	r2, [r7, #20]
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d359      	bcc.n	800bac0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d104      	bne.n	800ba1c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2200      	movs	r2, #0
 800ba16:	61da      	str	r2, [r3, #28]
 800ba18:	2304      	movs	r3, #4
 800ba1a:	e06e      	b.n	800bafa <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ba1c:	687a      	ldr	r2, [r7, #4]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	699b      	ldr	r3, [r3, #24]
 800ba22:	4619      	mov	r1, r3
 800ba24:	4610      	mov	r0, r2
 800ba26:	f7ff fe3d 	bl	800b6a4 <create_chain>
 800ba2a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d101      	bne.n	800ba36 <dir_next+0xe0>
 800ba32:	2307      	movs	r3, #7
 800ba34:	e061      	b.n	800bafa <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	2b01      	cmp	r3, #1
 800ba3a:	d101      	bne.n	800ba40 <dir_next+0xea>
 800ba3c:	2302      	movs	r3, #2
 800ba3e:	e05c      	b.n	800bafa <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba46:	d101      	bne.n	800ba4c <dir_next+0xf6>
 800ba48:	2301      	movs	r3, #1
 800ba4a:	e056      	b.n	800bafa <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ba4c:	68f8      	ldr	r0, [r7, #12]
 800ba4e:	f7ff fad3 	bl	800aff8 <sync_window>
 800ba52:	4603      	mov	r3, r0
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d001      	beq.n	800ba5c <dir_next+0x106>
 800ba58:	2301      	movs	r3, #1
 800ba5a:	e04e      	b.n	800bafa <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	899b      	ldrh	r3, [r3, #12]
 800ba66:	461a      	mov	r2, r3
 800ba68:	2100      	movs	r1, #0
 800ba6a:	f7ff f8fc 	bl	800ac66 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ba6e:	2300      	movs	r3, #0
 800ba70:	613b      	str	r3, [r7, #16]
 800ba72:	6979      	ldr	r1, [r7, #20]
 800ba74:	68f8      	ldr	r0, [r7, #12]
 800ba76:	f7ff fba1 	bl	800b1bc <clust2sect>
 800ba7a:	4602      	mov	r2, r0
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	635a      	str	r2, [r3, #52]	; 0x34
 800ba80:	e012      	b.n	800baa8 <dir_next+0x152>
						fs->wflag = 1;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2201      	movs	r2, #1
 800ba86:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ba88:	68f8      	ldr	r0, [r7, #12]
 800ba8a:	f7ff fab5 	bl	800aff8 <sync_window>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d001      	beq.n	800ba98 <dir_next+0x142>
 800ba94:	2301      	movs	r3, #1
 800ba96:	e030      	b.n	800bafa <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	3301      	adds	r3, #1
 800ba9c:	613b      	str	r3, [r7, #16]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baa2:	1c5a      	adds	r2, r3, #1
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	635a      	str	r2, [r3, #52]	; 0x34
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	895b      	ldrh	r3, [r3, #10]
 800baac:	461a      	mov	r2, r3
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d3e6      	bcc.n	800ba82 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	1ad2      	subs	r2, r2, r3
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	697a      	ldr	r2, [r7, #20]
 800bac4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bac6:	6979      	ldr	r1, [r7, #20]
 800bac8:	68f8      	ldr	r0, [r7, #12]
 800baca:	f7ff fb77 	bl	800b1bc <clust2sect>
 800bace:	4602      	mov	r2, r0
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	68ba      	ldr	r2, [r7, #8]
 800bad8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	899b      	ldrh	r3, [r3, #12]
 800bae4:	461a      	mov	r2, r3
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	fbb3 f0f2 	udiv	r0, r3, r2
 800baec:	fb02 f200 	mul.w	r2, r2, r0
 800baf0:	1a9b      	subs	r3, r3, r2
 800baf2:	18ca      	adds	r2, r1, r3
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800baf8:	2300      	movs	r3, #0
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3718      	adds	r7, #24
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b086      	sub	sp, #24
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
 800bb0a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bb12:	2100      	movs	r1, #0
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f7ff fe95 	bl	800b844 <dir_sdi>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bb1e:	7dfb      	ldrb	r3, [r7, #23]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d12b      	bne.n	800bb7c <dir_alloc+0x7a>
		n = 0;
 800bb24:	2300      	movs	r3, #0
 800bb26:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	69db      	ldr	r3, [r3, #28]
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	68f8      	ldr	r0, [r7, #12]
 800bb30:	f7ff faa6 	bl	800b080 <move_window>
 800bb34:	4603      	mov	r3, r0
 800bb36:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bb38:	7dfb      	ldrb	r3, [r7, #23]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d11d      	bne.n	800bb7a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6a1b      	ldr	r3, [r3, #32]
 800bb42:	781b      	ldrb	r3, [r3, #0]
 800bb44:	2be5      	cmp	r3, #229	; 0xe5
 800bb46:	d004      	beq.n	800bb52 <dir_alloc+0x50>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6a1b      	ldr	r3, [r3, #32]
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d107      	bne.n	800bb62 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	3301      	adds	r3, #1
 800bb56:	613b      	str	r3, [r7, #16]
 800bb58:	693a      	ldr	r2, [r7, #16]
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d102      	bne.n	800bb66 <dir_alloc+0x64>
 800bb60:	e00c      	b.n	800bb7c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bb62:	2300      	movs	r3, #0
 800bb64:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bb66:	2101      	movs	r1, #1
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f7ff fef4 	bl	800b956 <dir_next>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bb72:	7dfb      	ldrb	r3, [r7, #23]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d0d7      	beq.n	800bb28 <dir_alloc+0x26>
 800bb78:	e000      	b.n	800bb7c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bb7a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bb7c:	7dfb      	ldrb	r3, [r7, #23]
 800bb7e:	2b04      	cmp	r3, #4
 800bb80:	d101      	bne.n	800bb86 <dir_alloc+0x84>
 800bb82:	2307      	movs	r3, #7
 800bb84:	75fb      	strb	r3, [r7, #23]
	return res;
 800bb86:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3718      	adds	r7, #24
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}

0800bb90 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b084      	sub	sp, #16
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	331a      	adds	r3, #26
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7fe ffbe 	bl	800ab20 <ld_word>
 800bba4:	4603      	mov	r3, r0
 800bba6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	2b03      	cmp	r3, #3
 800bbae:	d109      	bne.n	800bbc4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	3314      	adds	r3, #20
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f7fe ffb3 	bl	800ab20 <ld_word>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	041b      	lsls	r3, r3, #16
 800bbbe:	68fa      	ldr	r2, [r7, #12]
 800bbc0:	4313      	orrs	r3, r2
 800bbc2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3710      	adds	r7, #16
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}

0800bbce <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bbce:	b580      	push	{r7, lr}
 800bbd0:	b084      	sub	sp, #16
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	60f8      	str	r0, [r7, #12]
 800bbd6:	60b9      	str	r1, [r7, #8]
 800bbd8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	331a      	adds	r3, #26
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	b292      	uxth	r2, r2
 800bbe2:	4611      	mov	r1, r2
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f7fe ffd6 	bl	800ab96 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	781b      	ldrb	r3, [r3, #0]
 800bbee:	2b03      	cmp	r3, #3
 800bbf0:	d109      	bne.n	800bc06 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	f103 0214 	add.w	r2, r3, #20
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	0c1b      	lsrs	r3, r3, #16
 800bbfc:	b29b      	uxth	r3, r3
 800bbfe:	4619      	mov	r1, r3
 800bc00:	4610      	mov	r0, r2
 800bc02:	f7fe ffc8 	bl	800ab96 <st_word>
	}
}
 800bc06:	bf00      	nop
 800bc08:	3710      	adds	r7, #16
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
	...

0800bc10 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800bc10:	b590      	push	{r4, r7, lr}
 800bc12:	b087      	sub	sp, #28
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	331a      	adds	r3, #26
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7fe ff7e 	bl	800ab20 <ld_word>
 800bc24:	4603      	mov	r3, r0
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d001      	beq.n	800bc2e <cmp_lfn+0x1e>
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	e059      	b.n	800bce2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc36:	1e5a      	subs	r2, r3, #1
 800bc38:	4613      	mov	r3, r2
 800bc3a:	005b      	lsls	r3, r3, #1
 800bc3c:	4413      	add	r3, r2
 800bc3e:	009b      	lsls	r3, r3, #2
 800bc40:	4413      	add	r3, r2
 800bc42:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bc44:	2301      	movs	r3, #1
 800bc46:	81fb      	strh	r3, [r7, #14]
 800bc48:	2300      	movs	r3, #0
 800bc4a:	613b      	str	r3, [r7, #16]
 800bc4c:	e033      	b.n	800bcb6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800bc4e:	4a27      	ldr	r2, [pc, #156]	; (800bcec <cmp_lfn+0xdc>)
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	4413      	add	r3, r2
 800bc54:	781b      	ldrb	r3, [r3, #0]
 800bc56:	461a      	mov	r2, r3
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	4413      	add	r3, r2
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7fe ff5f 	bl	800ab20 <ld_word>
 800bc62:	4603      	mov	r3, r0
 800bc64:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800bc66:	89fb      	ldrh	r3, [r7, #14]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d01a      	beq.n	800bca2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	2b1f      	cmp	r3, #31
 800bc70:	d812      	bhi.n	800bc98 <cmp_lfn+0x88>
 800bc72:	89bb      	ldrh	r3, [r7, #12]
 800bc74:	4618      	mov	r0, r3
 800bc76:	f001 fd79 	bl	800d76c <ff_wtoupper>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	461c      	mov	r4, r3
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	1c5a      	adds	r2, r3, #1
 800bc82:	617a      	str	r2, [r7, #20]
 800bc84:	005b      	lsls	r3, r3, #1
 800bc86:	687a      	ldr	r2, [r7, #4]
 800bc88:	4413      	add	r3, r2
 800bc8a:	881b      	ldrh	r3, [r3, #0]
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f001 fd6d 	bl	800d76c <ff_wtoupper>
 800bc92:	4603      	mov	r3, r0
 800bc94:	429c      	cmp	r4, r3
 800bc96:	d001      	beq.n	800bc9c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800bc98:	2300      	movs	r3, #0
 800bc9a:	e022      	b.n	800bce2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800bc9c:	89bb      	ldrh	r3, [r7, #12]
 800bc9e:	81fb      	strh	r3, [r7, #14]
 800bca0:	e006      	b.n	800bcb0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bca2:	89bb      	ldrh	r3, [r7, #12]
 800bca4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bca8:	4293      	cmp	r3, r2
 800bcaa:	d001      	beq.n	800bcb0 <cmp_lfn+0xa0>
 800bcac:	2300      	movs	r3, #0
 800bcae:	e018      	b.n	800bce2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	3301      	adds	r3, #1
 800bcb4:	613b      	str	r3, [r7, #16]
 800bcb6:	693b      	ldr	r3, [r7, #16]
 800bcb8:	2b0c      	cmp	r3, #12
 800bcba:	d9c8      	bls.n	800bc4e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	781b      	ldrb	r3, [r3, #0]
 800bcc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d00b      	beq.n	800bce0 <cmp_lfn+0xd0>
 800bcc8:	89fb      	ldrh	r3, [r7, #14]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d008      	beq.n	800bce0 <cmp_lfn+0xd0>
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	005b      	lsls	r3, r3, #1
 800bcd2:	687a      	ldr	r2, [r7, #4]
 800bcd4:	4413      	add	r3, r2
 800bcd6:	881b      	ldrh	r3, [r3, #0]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d001      	beq.n	800bce0 <cmp_lfn+0xd0>
 800bcdc:	2300      	movs	r3, #0
 800bcde:	e000      	b.n	800bce2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800bce0:	2301      	movs	r3, #1
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	371c      	adds	r7, #28
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd90      	pop	{r4, r7, pc}
 800bcea:	bf00      	nop
 800bcec:	08014c2c 	.word	0x08014c2c

0800bcf0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b088      	sub	sp, #32
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	4611      	mov	r1, r2
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	460b      	mov	r3, r1
 800bd00:	71fb      	strb	r3, [r7, #7]
 800bd02:	4613      	mov	r3, r2
 800bd04:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	330d      	adds	r3, #13
 800bd0a:	79ba      	ldrb	r2, [r7, #6]
 800bd0c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	330b      	adds	r3, #11
 800bd12:	220f      	movs	r2, #15
 800bd14:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	330c      	adds	r3, #12
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	331a      	adds	r3, #26
 800bd22:	2100      	movs	r1, #0
 800bd24:	4618      	mov	r0, r3
 800bd26:	f7fe ff36 	bl	800ab96 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800bd2a:	79fb      	ldrb	r3, [r7, #7]
 800bd2c:	1e5a      	subs	r2, r3, #1
 800bd2e:	4613      	mov	r3, r2
 800bd30:	005b      	lsls	r3, r3, #1
 800bd32:	4413      	add	r3, r2
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	4413      	add	r3, r2
 800bd38:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	82fb      	strh	r3, [r7, #22]
 800bd3e:	2300      	movs	r3, #0
 800bd40:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800bd42:	8afb      	ldrh	r3, [r7, #22]
 800bd44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd48:	4293      	cmp	r3, r2
 800bd4a:	d007      	beq.n	800bd5c <put_lfn+0x6c>
 800bd4c:	69fb      	ldr	r3, [r7, #28]
 800bd4e:	1c5a      	adds	r2, r3, #1
 800bd50:	61fa      	str	r2, [r7, #28]
 800bd52:	005b      	lsls	r3, r3, #1
 800bd54:	68fa      	ldr	r2, [r7, #12]
 800bd56:	4413      	add	r3, r2
 800bd58:	881b      	ldrh	r3, [r3, #0]
 800bd5a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800bd5c:	4a17      	ldr	r2, [pc, #92]	; (800bdbc <put_lfn+0xcc>)
 800bd5e:	69bb      	ldr	r3, [r7, #24]
 800bd60:	4413      	add	r3, r2
 800bd62:	781b      	ldrb	r3, [r3, #0]
 800bd64:	461a      	mov	r2, r3
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	4413      	add	r3, r2
 800bd6a:	8afa      	ldrh	r2, [r7, #22]
 800bd6c:	4611      	mov	r1, r2
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7fe ff11 	bl	800ab96 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800bd74:	8afb      	ldrh	r3, [r7, #22]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d102      	bne.n	800bd80 <put_lfn+0x90>
 800bd7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd7e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800bd80:	69bb      	ldr	r3, [r7, #24]
 800bd82:	3301      	adds	r3, #1
 800bd84:	61bb      	str	r3, [r7, #24]
 800bd86:	69bb      	ldr	r3, [r7, #24]
 800bd88:	2b0c      	cmp	r3, #12
 800bd8a:	d9da      	bls.n	800bd42 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800bd8c:	8afb      	ldrh	r3, [r7, #22]
 800bd8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd92:	4293      	cmp	r3, r2
 800bd94:	d006      	beq.n	800bda4 <put_lfn+0xb4>
 800bd96:	69fb      	ldr	r3, [r7, #28]
 800bd98:	005b      	lsls	r3, r3, #1
 800bd9a:	68fa      	ldr	r2, [r7, #12]
 800bd9c:	4413      	add	r3, r2
 800bd9e:	881b      	ldrh	r3, [r3, #0]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d103      	bne.n	800bdac <put_lfn+0xbc>
 800bda4:	79fb      	ldrb	r3, [r7, #7]
 800bda6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdaa:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	79fa      	ldrb	r2, [r7, #7]
 800bdb0:	701a      	strb	r2, [r3, #0]
}
 800bdb2:	bf00      	nop
 800bdb4:	3720      	adds	r7, #32
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}
 800bdba:	bf00      	nop
 800bdbc:	08014c2c 	.word	0x08014c2c

0800bdc0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b08c      	sub	sp, #48	; 0x30
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	60f8      	str	r0, [r7, #12]
 800bdc8:	60b9      	str	r1, [r7, #8]
 800bdca:	607a      	str	r2, [r7, #4]
 800bdcc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800bdce:	220b      	movs	r2, #11
 800bdd0:	68b9      	ldr	r1, [r7, #8]
 800bdd2:	68f8      	ldr	r0, [r7, #12]
 800bdd4:	f7fe ff26 	bl	800ac24 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	2b05      	cmp	r3, #5
 800bddc:	d92b      	bls.n	800be36 <gen_numname+0x76>
		sr = seq;
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800bde2:	e022      	b.n	800be2a <gen_numname+0x6a>
			wc = *lfn++;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	1c9a      	adds	r2, r3, #2
 800bde8:	607a      	str	r2, [r7, #4]
 800bdea:	881b      	ldrh	r3, [r3, #0]
 800bdec:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800bdee:	2300      	movs	r3, #0
 800bdf0:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdf2:	e017      	b.n	800be24 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800bdf4:	69fb      	ldr	r3, [r7, #28]
 800bdf6:	005a      	lsls	r2, r3, #1
 800bdf8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bdfa:	f003 0301 	and.w	r3, r3, #1
 800bdfe:	4413      	add	r3, r2
 800be00:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800be02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be04:	085b      	lsrs	r3, r3, #1
 800be06:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800be08:	69fb      	ldr	r3, [r7, #28]
 800be0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d005      	beq.n	800be1e <gen_numname+0x5e>
 800be12:	69fb      	ldr	r3, [r7, #28]
 800be14:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800be18:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800be1c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800be1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be20:	3301      	adds	r3, #1
 800be22:	62bb      	str	r3, [r7, #40]	; 0x28
 800be24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be26:	2b0f      	cmp	r3, #15
 800be28:	d9e4      	bls.n	800bdf4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	881b      	ldrh	r3, [r3, #0]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d1d8      	bne.n	800bde4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800be32:	69fb      	ldr	r3, [r7, #28]
 800be34:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800be36:	2307      	movs	r3, #7
 800be38:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	b2db      	uxtb	r3, r3
 800be3e:	f003 030f 	and.w	r3, r3, #15
 800be42:	b2db      	uxtb	r3, r3
 800be44:	3330      	adds	r3, #48	; 0x30
 800be46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800be4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be4e:	2b39      	cmp	r3, #57	; 0x39
 800be50:	d904      	bls.n	800be5c <gen_numname+0x9c>
 800be52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be56:	3307      	adds	r3, #7
 800be58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800be5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5e:	1e5a      	subs	r2, r3, #1
 800be60:	62ba      	str	r2, [r7, #40]	; 0x28
 800be62:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800be66:	4413      	add	r3, r2
 800be68:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800be6c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	091b      	lsrs	r3, r3, #4
 800be74:	603b      	str	r3, [r7, #0]
	} while (seq);
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d1de      	bne.n	800be3a <gen_numname+0x7a>
	ns[i] = '~';
 800be7c:	f107 0214 	add.w	r2, r7, #20
 800be80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be82:	4413      	add	r3, r2
 800be84:	227e      	movs	r2, #126	; 0x7e
 800be86:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800be88:	2300      	movs	r3, #0
 800be8a:	627b      	str	r3, [r7, #36]	; 0x24
 800be8c:	e002      	b.n	800be94 <gen_numname+0xd4>
 800be8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be90:	3301      	adds	r3, #1
 800be92:	627b      	str	r3, [r7, #36]	; 0x24
 800be94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be98:	429a      	cmp	r2, r3
 800be9a:	d205      	bcs.n	800bea8 <gen_numname+0xe8>
 800be9c:	68fa      	ldr	r2, [r7, #12]
 800be9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea0:	4413      	add	r3, r2
 800bea2:	781b      	ldrb	r3, [r3, #0]
 800bea4:	2b20      	cmp	r3, #32
 800bea6:	d1f2      	bne.n	800be8e <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800bea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beaa:	2b07      	cmp	r3, #7
 800beac:	d808      	bhi.n	800bec0 <gen_numname+0x100>
 800beae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb0:	1c5a      	adds	r2, r3, #1
 800beb2:	62ba      	str	r2, [r7, #40]	; 0x28
 800beb4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800beb8:	4413      	add	r3, r2
 800beba:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800bebe:	e000      	b.n	800bec2 <gen_numname+0x102>
 800bec0:	2120      	movs	r1, #32
 800bec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec4:	1c5a      	adds	r2, r3, #1
 800bec6:	627a      	str	r2, [r7, #36]	; 0x24
 800bec8:	68fa      	ldr	r2, [r7, #12]
 800beca:	4413      	add	r3, r2
 800becc:	460a      	mov	r2, r1
 800bece:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800bed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed2:	2b07      	cmp	r3, #7
 800bed4:	d9e8      	bls.n	800bea8 <gen_numname+0xe8>
}
 800bed6:	bf00      	nop
 800bed8:	bf00      	nop
 800beda:	3730      	adds	r7, #48	; 0x30
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}

0800bee0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800bee0:	b480      	push	{r7}
 800bee2:	b085      	sub	sp, #20
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800bee8:	2300      	movs	r3, #0
 800beea:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800beec:	230b      	movs	r3, #11
 800beee:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800bef0:	7bfb      	ldrb	r3, [r7, #15]
 800bef2:	b2da      	uxtb	r2, r3
 800bef4:	0852      	lsrs	r2, r2, #1
 800bef6:	01db      	lsls	r3, r3, #7
 800bef8:	4313      	orrs	r3, r2
 800befa:	b2da      	uxtb	r2, r3
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	1c59      	adds	r1, r3, #1
 800bf00:	6079      	str	r1, [r7, #4]
 800bf02:	781b      	ldrb	r3, [r3, #0]
 800bf04:	4413      	add	r3, r2
 800bf06:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	3b01      	subs	r3, #1
 800bf0c:	60bb      	str	r3, [r7, #8]
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d1ed      	bne.n	800bef0 <sum_sfn+0x10>
	return sum;
 800bf14:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3714      	adds	r7, #20
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf20:	4770      	bx	lr

0800bf22 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bf22:	b580      	push	{r7, lr}
 800bf24:	b086      	sub	sp, #24
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bf30:	2100      	movs	r1, #0
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f7ff fc86 	bl	800b844 <dir_sdi>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bf3c:	7dfb      	ldrb	r3, [r7, #23]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d001      	beq.n	800bf46 <dir_find+0x24>
 800bf42:	7dfb      	ldrb	r3, [r7, #23]
 800bf44:	e0a9      	b.n	800c09a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bf46:	23ff      	movs	r3, #255	; 0xff
 800bf48:	753b      	strb	r3, [r7, #20]
 800bf4a:	7d3b      	ldrb	r3, [r7, #20]
 800bf4c:	757b      	strb	r3, [r7, #21]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f04f 32ff 	mov.w	r2, #4294967295
 800bf54:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	69db      	ldr	r3, [r3, #28]
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	6938      	ldr	r0, [r7, #16]
 800bf5e:	f7ff f88f 	bl	800b080 <move_window>
 800bf62:	4603      	mov	r3, r0
 800bf64:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bf66:	7dfb      	ldrb	r3, [r7, #23]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	f040 8090 	bne.w	800c08e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6a1b      	ldr	r3, [r3, #32]
 800bf72:	781b      	ldrb	r3, [r3, #0]
 800bf74:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bf76:	7dbb      	ldrb	r3, [r7, #22]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d102      	bne.n	800bf82 <dir_find+0x60>
 800bf7c:	2304      	movs	r3, #4
 800bf7e:	75fb      	strb	r3, [r7, #23]
 800bf80:	e08a      	b.n	800c098 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6a1b      	ldr	r3, [r3, #32]
 800bf86:	330b      	adds	r3, #11
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf8e:	73fb      	strb	r3, [r7, #15]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	7bfa      	ldrb	r2, [r7, #15]
 800bf94:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800bf96:	7dbb      	ldrb	r3, [r7, #22]
 800bf98:	2be5      	cmp	r3, #229	; 0xe5
 800bf9a:	d007      	beq.n	800bfac <dir_find+0x8a>
 800bf9c:	7bfb      	ldrb	r3, [r7, #15]
 800bf9e:	f003 0308 	and.w	r3, r3, #8
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d009      	beq.n	800bfba <dir_find+0x98>
 800bfa6:	7bfb      	ldrb	r3, [r7, #15]
 800bfa8:	2b0f      	cmp	r3, #15
 800bfaa:	d006      	beq.n	800bfba <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bfac:	23ff      	movs	r3, #255	; 0xff
 800bfae:	757b      	strb	r3, [r7, #21]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f04f 32ff 	mov.w	r2, #4294967295
 800bfb6:	631a      	str	r2, [r3, #48]	; 0x30
 800bfb8:	e05e      	b.n	800c078 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800bfba:	7bfb      	ldrb	r3, [r7, #15]
 800bfbc:	2b0f      	cmp	r3, #15
 800bfbe:	d136      	bne.n	800c02e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bfc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d154      	bne.n	800c078 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800bfce:	7dbb      	ldrb	r3, [r7, #22]
 800bfd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d00d      	beq.n	800bff4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6a1b      	ldr	r3, [r3, #32]
 800bfdc:	7b5b      	ldrb	r3, [r3, #13]
 800bfde:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800bfe0:	7dbb      	ldrb	r3, [r7, #22]
 800bfe2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfe6:	75bb      	strb	r3, [r7, #22]
 800bfe8:	7dbb      	ldrb	r3, [r7, #22]
 800bfea:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	695a      	ldr	r2, [r3, #20]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bff4:	7dba      	ldrb	r2, [r7, #22]
 800bff6:	7d7b      	ldrb	r3, [r7, #21]
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d115      	bne.n	800c028 <dir_find+0x106>
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6a1b      	ldr	r3, [r3, #32]
 800c000:	330d      	adds	r3, #13
 800c002:	781b      	ldrb	r3, [r3, #0]
 800c004:	7d3a      	ldrb	r2, [r7, #20]
 800c006:	429a      	cmp	r2, r3
 800c008:	d10e      	bne.n	800c028 <dir_find+0x106>
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	691a      	ldr	r2, [r3, #16]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6a1b      	ldr	r3, [r3, #32]
 800c012:	4619      	mov	r1, r3
 800c014:	4610      	mov	r0, r2
 800c016:	f7ff fdfb 	bl	800bc10 <cmp_lfn>
 800c01a:	4603      	mov	r3, r0
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d003      	beq.n	800c028 <dir_find+0x106>
 800c020:	7d7b      	ldrb	r3, [r7, #21]
 800c022:	3b01      	subs	r3, #1
 800c024:	b2db      	uxtb	r3, r3
 800c026:	e000      	b.n	800c02a <dir_find+0x108>
 800c028:	23ff      	movs	r3, #255	; 0xff
 800c02a:	757b      	strb	r3, [r7, #21]
 800c02c:	e024      	b.n	800c078 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c02e:	7d7b      	ldrb	r3, [r7, #21]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d109      	bne.n	800c048 <dir_find+0x126>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6a1b      	ldr	r3, [r3, #32]
 800c038:	4618      	mov	r0, r3
 800c03a:	f7ff ff51 	bl	800bee0 <sum_sfn>
 800c03e:	4603      	mov	r3, r0
 800c040:	461a      	mov	r2, r3
 800c042:	7d3b      	ldrb	r3, [r7, #20]
 800c044:	4293      	cmp	r3, r2
 800c046:	d024      	beq.n	800c092 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c04e:	f003 0301 	and.w	r3, r3, #1
 800c052:	2b00      	cmp	r3, #0
 800c054:	d10a      	bne.n	800c06c <dir_find+0x14a>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6a18      	ldr	r0, [r3, #32]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	3324      	adds	r3, #36	; 0x24
 800c05e:	220b      	movs	r2, #11
 800c060:	4619      	mov	r1, r3
 800c062:	f7fe fe1b 	bl	800ac9c <mem_cmp>
 800c066:	4603      	mov	r3, r0
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d014      	beq.n	800c096 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c06c:	23ff      	movs	r3, #255	; 0xff
 800c06e:	757b      	strb	r3, [r7, #21]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f04f 32ff 	mov.w	r2, #4294967295
 800c076:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c078:	2100      	movs	r1, #0
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f7ff fc6b 	bl	800b956 <dir_next>
 800c080:	4603      	mov	r3, r0
 800c082:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c084:	7dfb      	ldrb	r3, [r7, #23]
 800c086:	2b00      	cmp	r3, #0
 800c088:	f43f af65 	beq.w	800bf56 <dir_find+0x34>
 800c08c:	e004      	b.n	800c098 <dir_find+0x176>
		if (res != FR_OK) break;
 800c08e:	bf00      	nop
 800c090:	e002      	b.n	800c098 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c092:	bf00      	nop
 800c094:	e000      	b.n	800c098 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c096:	bf00      	nop

	return res;
 800c098:	7dfb      	ldrb	r3, [r7, #23]
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3718      	adds	r7, #24
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
	...

0800c0a4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b08c      	sub	sp, #48	; 0x30
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c0b8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d001      	beq.n	800c0c4 <dir_register+0x20>
 800c0c0:	2306      	movs	r3, #6
 800c0c2:	e0e0      	b.n	800c286 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	627b      	str	r3, [r7, #36]	; 0x24
 800c0c8:	e002      	b.n	800c0d0 <dir_register+0x2c>
 800c0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0cc:	3301      	adds	r3, #1
 800c0ce:	627b      	str	r3, [r7, #36]	; 0x24
 800c0d0:	69fb      	ldr	r3, [r7, #28]
 800c0d2:	691a      	ldr	r2, [r3, #16]
 800c0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d6:	005b      	lsls	r3, r3, #1
 800c0d8:	4413      	add	r3, r2
 800c0da:	881b      	ldrh	r3, [r3, #0]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d1f4      	bne.n	800c0ca <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800c0e6:	f107 030c 	add.w	r3, r7, #12
 800c0ea:	220c      	movs	r2, #12
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f7fe fd99 	bl	800ac24 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c0f2:	7dfb      	ldrb	r3, [r7, #23]
 800c0f4:	f003 0301 	and.w	r3, r3, #1
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d032      	beq.n	800c162 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2240      	movs	r2, #64	; 0x40
 800c100:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800c104:	2301      	movs	r3, #1
 800c106:	62bb      	str	r3, [r7, #40]	; 0x28
 800c108:	e016      	b.n	800c138 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800c110:	69fb      	ldr	r3, [r7, #28]
 800c112:	691a      	ldr	r2, [r3, #16]
 800c114:	f107 010c 	add.w	r1, r7, #12
 800c118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c11a:	f7ff fe51 	bl	800bdc0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f7ff feff 	bl	800bf22 <dir_find>
 800c124:	4603      	mov	r3, r0
 800c126:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800c12a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d106      	bne.n	800c140 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800c132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c134:	3301      	adds	r3, #1
 800c136:	62bb      	str	r3, [r7, #40]	; 0x28
 800c138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c13a:	2b63      	cmp	r3, #99	; 0x63
 800c13c:	d9e5      	bls.n	800c10a <dir_register+0x66>
 800c13e:	e000      	b.n	800c142 <dir_register+0x9e>
			if (res != FR_OK) break;
 800c140:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c144:	2b64      	cmp	r3, #100	; 0x64
 800c146:	d101      	bne.n	800c14c <dir_register+0xa8>
 800c148:	2307      	movs	r3, #7
 800c14a:	e09c      	b.n	800c286 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c14c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c150:	2b04      	cmp	r3, #4
 800c152:	d002      	beq.n	800c15a <dir_register+0xb6>
 800c154:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c158:	e095      	b.n	800c286 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c15a:	7dfa      	ldrb	r2, [r7, #23]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c162:	7dfb      	ldrb	r3, [r7, #23]
 800c164:	f003 0302 	and.w	r3, r3, #2
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d007      	beq.n	800c17c <dir_register+0xd8>
 800c16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16e:	330c      	adds	r3, #12
 800c170:	4a47      	ldr	r2, [pc, #284]	; (800c290 <dir_register+0x1ec>)
 800c172:	fba2 2303 	umull	r2, r3, r2, r3
 800c176:	089b      	lsrs	r3, r3, #2
 800c178:	3301      	adds	r3, #1
 800c17a:	e000      	b.n	800c17e <dir_register+0xda>
 800c17c:	2301      	movs	r3, #1
 800c17e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c180:	6a39      	ldr	r1, [r7, #32]
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f7ff fcbd 	bl	800bb02 <dir_alloc>
 800c188:	4603      	mov	r3, r0
 800c18a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c18e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c192:	2b00      	cmp	r3, #0
 800c194:	d148      	bne.n	800c228 <dir_register+0x184>
 800c196:	6a3b      	ldr	r3, [r7, #32]
 800c198:	3b01      	subs	r3, #1
 800c19a:	623b      	str	r3, [r7, #32]
 800c19c:	6a3b      	ldr	r3, [r7, #32]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d042      	beq.n	800c228 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	695a      	ldr	r2, [r3, #20]
 800c1a6:	6a3b      	ldr	r3, [r7, #32]
 800c1a8:	015b      	lsls	r3, r3, #5
 800c1aa:	1ad3      	subs	r3, r2, r3
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f7ff fb48 	bl	800b844 <dir_sdi>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c1ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d132      	bne.n	800c228 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	3324      	adds	r3, #36	; 0x24
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f7ff fe8a 	bl	800bee0 <sum_sfn>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	69db      	ldr	r3, [r3, #28]
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	69f8      	ldr	r0, [r7, #28]
 800c1d8:	f7fe ff52 	bl	800b080 <move_window>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800c1e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d11d      	bne.n	800c226 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c1ea:	69fb      	ldr	r3, [r7, #28]
 800c1ec:	6918      	ldr	r0, [r3, #16]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6a19      	ldr	r1, [r3, #32]
 800c1f2:	6a3b      	ldr	r3, [r7, #32]
 800c1f4:	b2da      	uxtb	r2, r3
 800c1f6:	7efb      	ldrb	r3, [r7, #27]
 800c1f8:	f7ff fd7a 	bl	800bcf0 <put_lfn>
				fs->wflag = 1;
 800c1fc:	69fb      	ldr	r3, [r7, #28]
 800c1fe:	2201      	movs	r2, #1
 800c200:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c202:	2100      	movs	r1, #0
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f7ff fba6 	bl	800b956 <dir_next>
 800c20a:	4603      	mov	r3, r0
 800c20c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800c210:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c214:	2b00      	cmp	r3, #0
 800c216:	d107      	bne.n	800c228 <dir_register+0x184>
 800c218:	6a3b      	ldr	r3, [r7, #32]
 800c21a:	3b01      	subs	r3, #1
 800c21c:	623b      	str	r3, [r7, #32]
 800c21e:	6a3b      	ldr	r3, [r7, #32]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d1d5      	bne.n	800c1d0 <dir_register+0x12c>
 800c224:	e000      	b.n	800c228 <dir_register+0x184>
				if (res != FR_OK) break;
 800c226:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c228:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d128      	bne.n	800c282 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	69db      	ldr	r3, [r3, #28]
 800c234:	4619      	mov	r1, r3
 800c236:	69f8      	ldr	r0, [r7, #28]
 800c238:	f7fe ff22 	bl	800b080 <move_window>
 800c23c:	4603      	mov	r3, r0
 800c23e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c242:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c246:	2b00      	cmp	r3, #0
 800c248:	d11b      	bne.n	800c282 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6a1b      	ldr	r3, [r3, #32]
 800c24e:	2220      	movs	r2, #32
 800c250:	2100      	movs	r1, #0
 800c252:	4618      	mov	r0, r3
 800c254:	f7fe fd07 	bl	800ac66 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6a18      	ldr	r0, [r3, #32]
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	3324      	adds	r3, #36	; 0x24
 800c260:	220b      	movs	r2, #11
 800c262:	4619      	mov	r1, r3
 800c264:	f7fe fcde 	bl	800ac24 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6a1b      	ldr	r3, [r3, #32]
 800c272:	330c      	adds	r3, #12
 800c274:	f002 0218 	and.w	r2, r2, #24
 800c278:	b2d2      	uxtb	r2, r2
 800c27a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c27c:	69fb      	ldr	r3, [r7, #28]
 800c27e:	2201      	movs	r2, #1
 800c280:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c282:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c286:	4618      	mov	r0, r3
 800c288:	3730      	adds	r7, #48	; 0x30
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}
 800c28e:	bf00      	nop
 800c290:	4ec4ec4f 	.word	0x4ec4ec4f

0800c294 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b08a      	sub	sp, #40	; 0x28
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	613b      	str	r3, [r7, #16]
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	691b      	ldr	r3, [r3, #16]
 800c2aa:	60fb      	str	r3, [r7, #12]
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	617b      	str	r3, [r7, #20]
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c2b4:	69bb      	ldr	r3, [r7, #24]
 800c2b6:	1c5a      	adds	r2, r3, #1
 800c2b8:	61ba      	str	r2, [r7, #24]
 800c2ba:	693a      	ldr	r2, [r7, #16]
 800c2bc:	4413      	add	r3, r2
 800c2be:	781b      	ldrb	r3, [r3, #0]
 800c2c0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c2c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2c4:	2b1f      	cmp	r3, #31
 800c2c6:	d940      	bls.n	800c34a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c2c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2ca:	2b2f      	cmp	r3, #47	; 0x2f
 800c2cc:	d006      	beq.n	800c2dc <create_name+0x48>
 800c2ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2d0:	2b5c      	cmp	r3, #92	; 0x5c
 800c2d2:	d110      	bne.n	800c2f6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c2d4:	e002      	b.n	800c2dc <create_name+0x48>
 800c2d6:	69bb      	ldr	r3, [r7, #24]
 800c2d8:	3301      	adds	r3, #1
 800c2da:	61bb      	str	r3, [r7, #24]
 800c2dc:	693a      	ldr	r2, [r7, #16]
 800c2de:	69bb      	ldr	r3, [r7, #24]
 800c2e0:	4413      	add	r3, r2
 800c2e2:	781b      	ldrb	r3, [r3, #0]
 800c2e4:	2b2f      	cmp	r3, #47	; 0x2f
 800c2e6:	d0f6      	beq.n	800c2d6 <create_name+0x42>
 800c2e8:	693a      	ldr	r2, [r7, #16]
 800c2ea:	69bb      	ldr	r3, [r7, #24]
 800c2ec:	4413      	add	r3, r2
 800c2ee:	781b      	ldrb	r3, [r3, #0]
 800c2f0:	2b5c      	cmp	r3, #92	; 0x5c
 800c2f2:	d0f0      	beq.n	800c2d6 <create_name+0x42>
			break;
 800c2f4:	e02a      	b.n	800c34c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	2b1f      	cmp	r3, #31
 800c2fa:	d901      	bls.n	800c300 <create_name+0x6c>
 800c2fc:	2306      	movs	r3, #6
 800c2fe:	e177      	b.n	800c5f0 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c300:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c302:	b2db      	uxtb	r3, r3
 800c304:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c306:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c308:	2101      	movs	r1, #1
 800c30a:	4618      	mov	r0, r3
 800c30c:	f001 f9f2 	bl	800d6f4 <ff_convert>
 800c310:	4603      	mov	r3, r0
 800c312:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c314:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c316:	2b00      	cmp	r3, #0
 800c318:	d101      	bne.n	800c31e <create_name+0x8a>
 800c31a:	2306      	movs	r3, #6
 800c31c:	e168      	b.n	800c5f0 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c31e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c320:	2b7f      	cmp	r3, #127	; 0x7f
 800c322:	d809      	bhi.n	800c338 <create_name+0xa4>
 800c324:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c326:	4619      	mov	r1, r3
 800c328:	48b3      	ldr	r0, [pc, #716]	; (800c5f8 <create_name+0x364>)
 800c32a:	f7fe fcde 	bl	800acea <chk_chr>
 800c32e:	4603      	mov	r3, r0
 800c330:	2b00      	cmp	r3, #0
 800c332:	d001      	beq.n	800c338 <create_name+0xa4>
 800c334:	2306      	movs	r3, #6
 800c336:	e15b      	b.n	800c5f0 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	1c5a      	adds	r2, r3, #1
 800c33c:	617a      	str	r2, [r7, #20]
 800c33e:	005b      	lsls	r3, r3, #1
 800c340:	68fa      	ldr	r2, [r7, #12]
 800c342:	4413      	add	r3, r2
 800c344:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c346:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c348:	e7b4      	b.n	800c2b4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c34a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c34c:	693a      	ldr	r2, [r7, #16]
 800c34e:	69bb      	ldr	r3, [r7, #24]
 800c350:	441a      	add	r2, r3
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c356:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c358:	2b1f      	cmp	r3, #31
 800c35a:	d801      	bhi.n	800c360 <create_name+0xcc>
 800c35c:	2304      	movs	r3, #4
 800c35e:	e000      	b.n	800c362 <create_name+0xce>
 800c360:	2300      	movs	r3, #0
 800c362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c366:	e011      	b.n	800c38c <create_name+0xf8>
		w = lfn[di - 1];
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c36e:	3b01      	subs	r3, #1
 800c370:	005b      	lsls	r3, r3, #1
 800c372:	68fa      	ldr	r2, [r7, #12]
 800c374:	4413      	add	r3, r2
 800c376:	881b      	ldrh	r3, [r3, #0]
 800c378:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c37a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c37c:	2b20      	cmp	r3, #32
 800c37e:	d002      	beq.n	800c386 <create_name+0xf2>
 800c380:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c382:	2b2e      	cmp	r3, #46	; 0x2e
 800c384:	d106      	bne.n	800c394 <create_name+0x100>
		di--;
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	3b01      	subs	r3, #1
 800c38a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d1ea      	bne.n	800c368 <create_name+0xd4>
 800c392:	e000      	b.n	800c396 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c394:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	005b      	lsls	r3, r3, #1
 800c39a:	68fa      	ldr	r2, [r7, #12]
 800c39c:	4413      	add	r3, r2
 800c39e:	2200      	movs	r2, #0
 800c3a0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d101      	bne.n	800c3ac <create_name+0x118>
 800c3a8:	2306      	movs	r3, #6
 800c3aa:	e121      	b.n	800c5f0 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	3324      	adds	r3, #36	; 0x24
 800c3b0:	220b      	movs	r2, #11
 800c3b2:	2120      	movs	r1, #32
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f7fe fc56 	bl	800ac66 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	61bb      	str	r3, [r7, #24]
 800c3be:	e002      	b.n	800c3c6 <create_name+0x132>
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	61bb      	str	r3, [r7, #24]
 800c3c6:	69bb      	ldr	r3, [r7, #24]
 800c3c8:	005b      	lsls	r3, r3, #1
 800c3ca:	68fa      	ldr	r2, [r7, #12]
 800c3cc:	4413      	add	r3, r2
 800c3ce:	881b      	ldrh	r3, [r3, #0]
 800c3d0:	2b20      	cmp	r3, #32
 800c3d2:	d0f5      	beq.n	800c3c0 <create_name+0x12c>
 800c3d4:	69bb      	ldr	r3, [r7, #24]
 800c3d6:	005b      	lsls	r3, r3, #1
 800c3d8:	68fa      	ldr	r2, [r7, #12]
 800c3da:	4413      	add	r3, r2
 800c3dc:	881b      	ldrh	r3, [r3, #0]
 800c3de:	2b2e      	cmp	r3, #46	; 0x2e
 800c3e0:	d0ee      	beq.n	800c3c0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c3e2:	69bb      	ldr	r3, [r7, #24]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d009      	beq.n	800c3fc <create_name+0x168>
 800c3e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3ec:	f043 0303 	orr.w	r3, r3, #3
 800c3f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c3f4:	e002      	b.n	800c3fc <create_name+0x168>
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	3b01      	subs	r3, #1
 800c3fa:	617b      	str	r3, [r7, #20]
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d009      	beq.n	800c416 <create_name+0x182>
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c408:	3b01      	subs	r3, #1
 800c40a:	005b      	lsls	r3, r3, #1
 800c40c:	68fa      	ldr	r2, [r7, #12]
 800c40e:	4413      	add	r3, r2
 800c410:	881b      	ldrh	r3, [r3, #0]
 800c412:	2b2e      	cmp	r3, #46	; 0x2e
 800c414:	d1ef      	bne.n	800c3f6 <create_name+0x162>

	i = b = 0; ni = 8;
 800c416:	2300      	movs	r3, #0
 800c418:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c41c:	2300      	movs	r3, #0
 800c41e:	623b      	str	r3, [r7, #32]
 800c420:	2308      	movs	r3, #8
 800c422:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c424:	69bb      	ldr	r3, [r7, #24]
 800c426:	1c5a      	adds	r2, r3, #1
 800c428:	61ba      	str	r2, [r7, #24]
 800c42a:	005b      	lsls	r3, r3, #1
 800c42c:	68fa      	ldr	r2, [r7, #12]
 800c42e:	4413      	add	r3, r2
 800c430:	881b      	ldrh	r3, [r3, #0]
 800c432:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c434:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c436:	2b00      	cmp	r3, #0
 800c438:	f000 8090 	beq.w	800c55c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c43c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c43e:	2b20      	cmp	r3, #32
 800c440:	d006      	beq.n	800c450 <create_name+0x1bc>
 800c442:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c444:	2b2e      	cmp	r3, #46	; 0x2e
 800c446:	d10a      	bne.n	800c45e <create_name+0x1ca>
 800c448:	69ba      	ldr	r2, [r7, #24]
 800c44a:	697b      	ldr	r3, [r7, #20]
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d006      	beq.n	800c45e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c454:	f043 0303 	orr.w	r3, r3, #3
 800c458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c45c:	e07d      	b.n	800c55a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c45e:	6a3a      	ldr	r2, [r7, #32]
 800c460:	69fb      	ldr	r3, [r7, #28]
 800c462:	429a      	cmp	r2, r3
 800c464:	d203      	bcs.n	800c46e <create_name+0x1da>
 800c466:	69ba      	ldr	r2, [r7, #24]
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	429a      	cmp	r2, r3
 800c46c:	d123      	bne.n	800c4b6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c46e:	69fb      	ldr	r3, [r7, #28]
 800c470:	2b0b      	cmp	r3, #11
 800c472:	d106      	bne.n	800c482 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c478:	f043 0303 	orr.w	r3, r3, #3
 800c47c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c480:	e06f      	b.n	800c562 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c482:	69ba      	ldr	r2, [r7, #24]
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	429a      	cmp	r2, r3
 800c488:	d005      	beq.n	800c496 <create_name+0x202>
 800c48a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c48e:	f043 0303 	orr.w	r3, r3, #3
 800c492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c496:	69ba      	ldr	r2, [r7, #24]
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d860      	bhi.n	800c560 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	61bb      	str	r3, [r7, #24]
 800c4a2:	2308      	movs	r3, #8
 800c4a4:	623b      	str	r3, [r7, #32]
 800c4a6:	230b      	movs	r3, #11
 800c4a8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c4aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c4ae:	009b      	lsls	r3, r3, #2
 800c4b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c4b4:	e051      	b.n	800c55a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c4b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4b8:	2b7f      	cmp	r3, #127	; 0x7f
 800c4ba:	d914      	bls.n	800c4e6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c4bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4be:	2100      	movs	r1, #0
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f001 f917 	bl	800d6f4 <ff_convert>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c4ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d004      	beq.n	800c4da <create_name+0x246>
 800c4d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4d2:	3b80      	subs	r3, #128	; 0x80
 800c4d4:	4a49      	ldr	r2, [pc, #292]	; (800c5fc <create_name+0x368>)
 800c4d6:	5cd3      	ldrb	r3, [r2, r3]
 800c4d8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c4da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4de:	f043 0302 	orr.w	r3, r3, #2
 800c4e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c4e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d007      	beq.n	800c4fc <create_name+0x268>
 800c4ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4ee:	4619      	mov	r1, r3
 800c4f0:	4843      	ldr	r0, [pc, #268]	; (800c600 <create_name+0x36c>)
 800c4f2:	f7fe fbfa 	bl	800acea <chk_chr>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d008      	beq.n	800c50e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c4fc:	235f      	movs	r3, #95	; 0x5f
 800c4fe:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c500:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c504:	f043 0303 	orr.w	r3, r3, #3
 800c508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c50c:	e01b      	b.n	800c546 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c50e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c510:	2b40      	cmp	r3, #64	; 0x40
 800c512:	d909      	bls.n	800c528 <create_name+0x294>
 800c514:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c516:	2b5a      	cmp	r3, #90	; 0x5a
 800c518:	d806      	bhi.n	800c528 <create_name+0x294>
					b |= 2;
 800c51a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c51e:	f043 0302 	orr.w	r3, r3, #2
 800c522:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c526:	e00e      	b.n	800c546 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c528:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c52a:	2b60      	cmp	r3, #96	; 0x60
 800c52c:	d90b      	bls.n	800c546 <create_name+0x2b2>
 800c52e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c530:	2b7a      	cmp	r3, #122	; 0x7a
 800c532:	d808      	bhi.n	800c546 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c534:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c538:	f043 0301 	orr.w	r3, r3, #1
 800c53c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c540:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c542:	3b20      	subs	r3, #32
 800c544:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c546:	6a3b      	ldr	r3, [r7, #32]
 800c548:	1c5a      	adds	r2, r3, #1
 800c54a:	623a      	str	r2, [r7, #32]
 800c54c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c54e:	b2d1      	uxtb	r1, r2
 800c550:	687a      	ldr	r2, [r7, #4]
 800c552:	4413      	add	r3, r2
 800c554:	460a      	mov	r2, r1
 800c556:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800c55a:	e763      	b.n	800c424 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c55c:	bf00      	nop
 800c55e:	e000      	b.n	800c562 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800c560:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c568:	2be5      	cmp	r3, #229	; 0xe5
 800c56a:	d103      	bne.n	800c574 <create_name+0x2e0>
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2205      	movs	r2, #5
 800c570:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800c574:	69fb      	ldr	r3, [r7, #28]
 800c576:	2b08      	cmp	r3, #8
 800c578:	d104      	bne.n	800c584 <create_name+0x2f0>
 800c57a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c57e:	009b      	lsls	r3, r3, #2
 800c580:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c584:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c588:	f003 030c 	and.w	r3, r3, #12
 800c58c:	2b0c      	cmp	r3, #12
 800c58e:	d005      	beq.n	800c59c <create_name+0x308>
 800c590:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c594:	f003 0303 	and.w	r3, r3, #3
 800c598:	2b03      	cmp	r3, #3
 800c59a:	d105      	bne.n	800c5a8 <create_name+0x314>
 800c59c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5a0:	f043 0302 	orr.w	r3, r3, #2
 800c5a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c5a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5ac:	f003 0302 	and.w	r3, r3, #2
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d117      	bne.n	800c5e4 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c5b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c5b8:	f003 0303 	and.w	r3, r3, #3
 800c5bc:	2b01      	cmp	r3, #1
 800c5be:	d105      	bne.n	800c5cc <create_name+0x338>
 800c5c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5c4:	f043 0310 	orr.w	r3, r3, #16
 800c5c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c5cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c5d0:	f003 030c 	and.w	r3, r3, #12
 800c5d4:	2b04      	cmp	r3, #4
 800c5d6:	d105      	bne.n	800c5e4 <create_name+0x350>
 800c5d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5dc:	f043 0308 	orr.w	r3, r3, #8
 800c5e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c5ea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800c5ee:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	3728      	adds	r7, #40	; 0x28
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}
 800c5f8:	08014ab4 	.word	0x08014ab4
 800c5fc:	08014bac 	.word	0x08014bac
 800c600:	08014ac0 	.word	0x08014ac0

0800c604 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b086      	sub	sp, #24
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c618:	e002      	b.n	800c620 <follow_path+0x1c>
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	3301      	adds	r3, #1
 800c61e:	603b      	str	r3, [r7, #0]
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	2b2f      	cmp	r3, #47	; 0x2f
 800c626:	d0f8      	beq.n	800c61a <follow_path+0x16>
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	2b5c      	cmp	r3, #92	; 0x5c
 800c62e:	d0f4      	beq.n	800c61a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	2200      	movs	r2, #0
 800c634:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	781b      	ldrb	r3, [r3, #0]
 800c63a:	2b1f      	cmp	r3, #31
 800c63c:	d80a      	bhi.n	800c654 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2280      	movs	r2, #128	; 0x80
 800c642:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c646:	2100      	movs	r1, #0
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f7ff f8fb 	bl	800b844 <dir_sdi>
 800c64e:	4603      	mov	r3, r0
 800c650:	75fb      	strb	r3, [r7, #23]
 800c652:	e048      	b.n	800c6e6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c654:	463b      	mov	r3, r7
 800c656:	4619      	mov	r1, r3
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f7ff fe1b 	bl	800c294 <create_name>
 800c65e:	4603      	mov	r3, r0
 800c660:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c662:	7dfb      	ldrb	r3, [r7, #23]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d139      	bne.n	800c6dc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f7ff fc5a 	bl	800bf22 <dir_find>
 800c66e:	4603      	mov	r3, r0
 800c670:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c678:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c67a:	7dfb      	ldrb	r3, [r7, #23]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d00a      	beq.n	800c696 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c680:	7dfb      	ldrb	r3, [r7, #23]
 800c682:	2b04      	cmp	r3, #4
 800c684:	d12c      	bne.n	800c6e0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c686:	7afb      	ldrb	r3, [r7, #11]
 800c688:	f003 0304 	and.w	r3, r3, #4
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d127      	bne.n	800c6e0 <follow_path+0xdc>
 800c690:	2305      	movs	r3, #5
 800c692:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c694:	e024      	b.n	800c6e0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c696:	7afb      	ldrb	r3, [r7, #11]
 800c698:	f003 0304 	and.w	r3, r3, #4
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d121      	bne.n	800c6e4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	799b      	ldrb	r3, [r3, #6]
 800c6a4:	f003 0310 	and.w	r3, r3, #16
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d102      	bne.n	800c6b2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c6ac:	2305      	movs	r3, #5
 800c6ae:	75fb      	strb	r3, [r7, #23]
 800c6b0:	e019      	b.n	800c6e6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	695b      	ldr	r3, [r3, #20]
 800c6bc:	68fa      	ldr	r2, [r7, #12]
 800c6be:	8992      	ldrh	r2, [r2, #12]
 800c6c0:	fbb3 f0f2 	udiv	r0, r3, r2
 800c6c4:	fb02 f200 	mul.w	r2, r2, r0
 800c6c8:	1a9b      	subs	r3, r3, r2
 800c6ca:	440b      	add	r3, r1
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	68f8      	ldr	r0, [r7, #12]
 800c6d0:	f7ff fa5e 	bl	800bb90 <ld_clust>
 800c6d4:	4602      	mov	r2, r0
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c6da:	e7bb      	b.n	800c654 <follow_path+0x50>
			if (res != FR_OK) break;
 800c6dc:	bf00      	nop
 800c6de:	e002      	b.n	800c6e6 <follow_path+0xe2>
				break;
 800c6e0:	bf00      	nop
 800c6e2:	e000      	b.n	800c6e6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c6e4:	bf00      	nop
			}
		}
	}

	return res;
 800c6e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3718      	adds	r7, #24
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}

0800c6f0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b087      	sub	sp, #28
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c6f8:	f04f 33ff 	mov.w	r3, #4294967295
 800c6fc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d031      	beq.n	800c76a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	617b      	str	r3, [r7, #20]
 800c70c:	e002      	b.n	800c714 <get_ldnumber+0x24>
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	3301      	adds	r3, #1
 800c712:	617b      	str	r3, [r7, #20]
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	2b1f      	cmp	r3, #31
 800c71a:	d903      	bls.n	800c724 <get_ldnumber+0x34>
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	781b      	ldrb	r3, [r3, #0]
 800c720:	2b3a      	cmp	r3, #58	; 0x3a
 800c722:	d1f4      	bne.n	800c70e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	2b3a      	cmp	r3, #58	; 0x3a
 800c72a:	d11c      	bne.n	800c766 <get_ldnumber+0x76>
			tp = *path;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	1c5a      	adds	r2, r3, #1
 800c736:	60fa      	str	r2, [r7, #12]
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	3b30      	subs	r3, #48	; 0x30
 800c73c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	2b09      	cmp	r3, #9
 800c742:	d80e      	bhi.n	800c762 <get_ldnumber+0x72>
 800c744:	68fa      	ldr	r2, [r7, #12]
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	429a      	cmp	r2, r3
 800c74a:	d10a      	bne.n	800c762 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d107      	bne.n	800c762 <get_ldnumber+0x72>
					vol = (int)i;
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	3301      	adds	r3, #1
 800c75a:	617b      	str	r3, [r7, #20]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	697a      	ldr	r2, [r7, #20]
 800c760:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	e002      	b.n	800c76c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c766:	2300      	movs	r3, #0
 800c768:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c76a:	693b      	ldr	r3, [r7, #16]
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	371c      	adds	r7, #28
 800c770:	46bd      	mov	sp, r7
 800c772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c776:	4770      	bx	lr

0800c778 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2200      	movs	r2, #0
 800c786:	70da      	strb	r2, [r3, #3]
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f04f 32ff 	mov.w	r2, #4294967295
 800c78e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c790:	6839      	ldr	r1, [r7, #0]
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f7fe fc74 	bl	800b080 <move_window>
 800c798:	4603      	mov	r3, r0
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d001      	beq.n	800c7a2 <check_fs+0x2a>
 800c79e:	2304      	movs	r3, #4
 800c7a0:	e038      	b.n	800c814 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	3338      	adds	r3, #56	; 0x38
 800c7a6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7fe f9b8 	bl	800ab20 <ld_word>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	461a      	mov	r2, r3
 800c7b4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d001      	beq.n	800c7c0 <check_fs+0x48>
 800c7bc:	2303      	movs	r3, #3
 800c7be:	e029      	b.n	800c814 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c7c6:	2be9      	cmp	r3, #233	; 0xe9
 800c7c8:	d009      	beq.n	800c7de <check_fs+0x66>
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c7d0:	2beb      	cmp	r3, #235	; 0xeb
 800c7d2:	d11e      	bne.n	800c812 <check_fs+0x9a>
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c7da:	2b90      	cmp	r3, #144	; 0x90
 800c7dc:	d119      	bne.n	800c812 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	3338      	adds	r3, #56	; 0x38
 800c7e2:	3336      	adds	r3, #54	; 0x36
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f7fe f9b3 	bl	800ab50 <ld_dword>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c7f0:	4a0a      	ldr	r2, [pc, #40]	; (800c81c <check_fs+0xa4>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d101      	bne.n	800c7fa <check_fs+0x82>
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	e00c      	b.n	800c814 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	3338      	adds	r3, #56	; 0x38
 800c7fe:	3352      	adds	r3, #82	; 0x52
 800c800:	4618      	mov	r0, r3
 800c802:	f7fe f9a5 	bl	800ab50 <ld_dword>
 800c806:	4603      	mov	r3, r0
 800c808:	4a05      	ldr	r2, [pc, #20]	; (800c820 <check_fs+0xa8>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d101      	bne.n	800c812 <check_fs+0x9a>
 800c80e:	2300      	movs	r3, #0
 800c810:	e000      	b.n	800c814 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c812:	2302      	movs	r3, #2
}
 800c814:	4618      	mov	r0, r3
 800c816:	3708      	adds	r7, #8
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}
 800c81c:	00544146 	.word	0x00544146
 800c820:	33544146 	.word	0x33544146

0800c824 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b096      	sub	sp, #88	; 0x58
 800c828:	af00      	add	r7, sp, #0
 800c82a:	60f8      	str	r0, [r7, #12]
 800c82c:	60b9      	str	r1, [r7, #8]
 800c82e:	4613      	mov	r3, r2
 800c830:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	2200      	movs	r2, #0
 800c836:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c838:	68f8      	ldr	r0, [r7, #12]
 800c83a:	f7ff ff59 	bl	800c6f0 <get_ldnumber>
 800c83e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c842:	2b00      	cmp	r3, #0
 800c844:	da01      	bge.n	800c84a <find_volume+0x26>
 800c846:	230b      	movs	r3, #11
 800c848:	e268      	b.n	800cd1c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c84a:	4ab0      	ldr	r2, [pc, #704]	; (800cb0c <find_volume+0x2e8>)
 800c84c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c84e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c852:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c856:	2b00      	cmp	r3, #0
 800c858:	d101      	bne.n	800c85e <find_volume+0x3a>
 800c85a:	230c      	movs	r3, #12
 800c85c:	e25e      	b.n	800cd1c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c862:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c864:	79fb      	ldrb	r3, [r7, #7]
 800c866:	f023 0301 	bic.w	r3, r3, #1
 800c86a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d01a      	beq.n	800c8aa <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c876:	785b      	ldrb	r3, [r3, #1]
 800c878:	4618      	mov	r0, r3
 800c87a:	f7fe f8b3 	bl	800a9e4 <disk_status>
 800c87e:	4603      	mov	r3, r0
 800c880:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c884:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c888:	f003 0301 	and.w	r3, r3, #1
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d10c      	bne.n	800c8aa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c890:	79fb      	ldrb	r3, [r7, #7]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d007      	beq.n	800c8a6 <find_volume+0x82>
 800c896:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c89a:	f003 0304 	and.w	r3, r3, #4
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d001      	beq.n	800c8a6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c8a2:	230a      	movs	r3, #10
 800c8a4:	e23a      	b.n	800cd1c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	e238      	b.n	800cd1c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c8b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8b2:	b2da      	uxtb	r2, r3
 800c8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ba:	785b      	ldrb	r3, [r3, #1]
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f7fe f8ab 	bl	800aa18 <disk_initialize>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c8c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c8cc:	f003 0301 	and.w	r3, r3, #1
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d001      	beq.n	800c8d8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c8d4:	2303      	movs	r3, #3
 800c8d6:	e221      	b.n	800cd1c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c8d8:	79fb      	ldrb	r3, [r7, #7]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d007      	beq.n	800c8ee <find_volume+0xca>
 800c8de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c8e2:	f003 0304 	and.w	r3, r3, #4
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d001      	beq.n	800c8ee <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c8ea:	230a      	movs	r3, #10
 800c8ec:	e216      	b.n	800cd1c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800c8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f0:	7858      	ldrb	r0, [r3, #1]
 800c8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f4:	330c      	adds	r3, #12
 800c8f6:	461a      	mov	r2, r3
 800c8f8:	2102      	movs	r1, #2
 800c8fa:	f7fe f8f3 	bl	800aae4 <disk_ioctl>
 800c8fe:	4603      	mov	r3, r0
 800c900:	2b00      	cmp	r3, #0
 800c902:	d001      	beq.n	800c908 <find_volume+0xe4>
 800c904:	2301      	movs	r3, #1
 800c906:	e209      	b.n	800cd1c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800c908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c90a:	899b      	ldrh	r3, [r3, #12]
 800c90c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c910:	d80d      	bhi.n	800c92e <find_volume+0x10a>
 800c912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c914:	899b      	ldrh	r3, [r3, #12]
 800c916:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c91a:	d308      	bcc.n	800c92e <find_volume+0x10a>
 800c91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c91e:	899b      	ldrh	r3, [r3, #12]
 800c920:	461a      	mov	r2, r3
 800c922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c924:	899b      	ldrh	r3, [r3, #12]
 800c926:	3b01      	subs	r3, #1
 800c928:	4013      	ands	r3, r2
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d001      	beq.n	800c932 <find_volume+0x10e>
 800c92e:	2301      	movs	r3, #1
 800c930:	e1f4      	b.n	800cd1c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c932:	2300      	movs	r3, #0
 800c934:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c936:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c938:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c93a:	f7ff ff1d 	bl	800c778 <check_fs>
 800c93e:	4603      	mov	r3, r0
 800c940:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c944:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c948:	2b02      	cmp	r3, #2
 800c94a:	d14b      	bne.n	800c9e4 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c94c:	2300      	movs	r3, #0
 800c94e:	643b      	str	r3, [r7, #64]	; 0x40
 800c950:	e01f      	b.n	800c992 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c954:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c95a:	011b      	lsls	r3, r3, #4
 800c95c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c960:	4413      	add	r3, r2
 800c962:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c966:	3304      	adds	r3, #4
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d006      	beq.n	800c97c <find_volume+0x158>
 800c96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c970:	3308      	adds	r3, #8
 800c972:	4618      	mov	r0, r3
 800c974:	f7fe f8ec 	bl	800ab50 <ld_dword>
 800c978:	4602      	mov	r2, r0
 800c97a:	e000      	b.n	800c97e <find_volume+0x15a>
 800c97c:	2200      	movs	r2, #0
 800c97e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c980:	009b      	lsls	r3, r3, #2
 800c982:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800c986:	440b      	add	r3, r1
 800c988:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c98c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c98e:	3301      	adds	r3, #1
 800c990:	643b      	str	r3, [r7, #64]	; 0x40
 800c992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c994:	2b03      	cmp	r3, #3
 800c996:	d9dc      	bls.n	800c952 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c998:	2300      	movs	r3, #0
 800c99a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c99c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d002      	beq.n	800c9a8 <find_volume+0x184>
 800c9a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9a4:	3b01      	subs	r3, #1
 800c9a6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c9a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9aa:	009b      	lsls	r3, r3, #2
 800c9ac:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c9b0:	4413      	add	r3, r2
 800c9b2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c9b6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c9b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d005      	beq.n	800c9ca <find_volume+0x1a6>
 800c9be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c9c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c9c2:	f7ff fed9 	bl	800c778 <check_fs>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	e000      	b.n	800c9cc <find_volume+0x1a8>
 800c9ca:	2303      	movs	r3, #3
 800c9cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c9d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c9d4:	2b01      	cmp	r3, #1
 800c9d6:	d905      	bls.n	800c9e4 <find_volume+0x1c0>
 800c9d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9da:	3301      	adds	r3, #1
 800c9dc:	643b      	str	r3, [r7, #64]	; 0x40
 800c9de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9e0:	2b03      	cmp	r3, #3
 800c9e2:	d9e1      	bls.n	800c9a8 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c9e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c9e8:	2b04      	cmp	r3, #4
 800c9ea:	d101      	bne.n	800c9f0 <find_volume+0x1cc>
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	e195      	b.n	800cd1c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c9f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c9f4:	2b01      	cmp	r3, #1
 800c9f6:	d901      	bls.n	800c9fc <find_volume+0x1d8>
 800c9f8:	230d      	movs	r3, #13
 800c9fa:	e18f      	b.n	800cd1c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fe:	3338      	adds	r3, #56	; 0x38
 800ca00:	330b      	adds	r3, #11
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7fe f88c 	bl	800ab20 <ld_word>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0e:	899b      	ldrh	r3, [r3, #12]
 800ca10:	429a      	cmp	r2, r3
 800ca12:	d001      	beq.n	800ca18 <find_volume+0x1f4>
 800ca14:	230d      	movs	r3, #13
 800ca16:	e181      	b.n	800cd1c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ca18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca1a:	3338      	adds	r3, #56	; 0x38
 800ca1c:	3316      	adds	r3, #22
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f7fe f87e 	bl	800ab20 <ld_word>
 800ca24:	4603      	mov	r3, r0
 800ca26:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ca28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d106      	bne.n	800ca3c <find_volume+0x218>
 800ca2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca30:	3338      	adds	r3, #56	; 0x38
 800ca32:	3324      	adds	r3, #36	; 0x24
 800ca34:	4618      	mov	r0, r3
 800ca36:	f7fe f88b 	bl	800ab50 <ld_dword>
 800ca3a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ca3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ca40:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ca42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca44:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800ca48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca4a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ca4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca4e:	789b      	ldrb	r3, [r3, #2]
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d005      	beq.n	800ca60 <find_volume+0x23c>
 800ca54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca56:	789b      	ldrb	r3, [r3, #2]
 800ca58:	2b02      	cmp	r3, #2
 800ca5a:	d001      	beq.n	800ca60 <find_volume+0x23c>
 800ca5c:	230d      	movs	r3, #13
 800ca5e:	e15d      	b.n	800cd1c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ca60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca62:	789b      	ldrb	r3, [r3, #2]
 800ca64:	461a      	mov	r2, r3
 800ca66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca68:	fb02 f303 	mul.w	r3, r2, r3
 800ca6c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ca6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca74:	b29a      	uxth	r2, r3
 800ca76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca78:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ca7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca7c:	895b      	ldrh	r3, [r3, #10]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d008      	beq.n	800ca94 <find_volume+0x270>
 800ca82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca84:	895b      	ldrh	r3, [r3, #10]
 800ca86:	461a      	mov	r2, r3
 800ca88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca8a:	895b      	ldrh	r3, [r3, #10]
 800ca8c:	3b01      	subs	r3, #1
 800ca8e:	4013      	ands	r3, r2
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d001      	beq.n	800ca98 <find_volume+0x274>
 800ca94:	230d      	movs	r3, #13
 800ca96:	e141      	b.n	800cd1c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ca98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca9a:	3338      	adds	r3, #56	; 0x38
 800ca9c:	3311      	adds	r3, #17
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f7fe f83e 	bl	800ab20 <ld_word>
 800caa4:	4603      	mov	r3, r0
 800caa6:	461a      	mov	r2, r3
 800caa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caaa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800caac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caae:	891b      	ldrh	r3, [r3, #8]
 800cab0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cab2:	8992      	ldrh	r2, [r2, #12]
 800cab4:	0952      	lsrs	r2, r2, #5
 800cab6:	b292      	uxth	r2, r2
 800cab8:	fbb3 f1f2 	udiv	r1, r3, r2
 800cabc:	fb02 f201 	mul.w	r2, r2, r1
 800cac0:	1a9b      	subs	r3, r3, r2
 800cac2:	b29b      	uxth	r3, r3
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d001      	beq.n	800cacc <find_volume+0x2a8>
 800cac8:	230d      	movs	r3, #13
 800caca:	e127      	b.n	800cd1c <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cace:	3338      	adds	r3, #56	; 0x38
 800cad0:	3313      	adds	r3, #19
 800cad2:	4618      	mov	r0, r3
 800cad4:	f7fe f824 	bl	800ab20 <ld_word>
 800cad8:	4603      	mov	r3, r0
 800cada:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cadc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d106      	bne.n	800caf0 <find_volume+0x2cc>
 800cae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae4:	3338      	adds	r3, #56	; 0x38
 800cae6:	3320      	adds	r3, #32
 800cae8:	4618      	mov	r0, r3
 800caea:	f7fe f831 	bl	800ab50 <ld_dword>
 800caee:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800caf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf2:	3338      	adds	r3, #56	; 0x38
 800caf4:	330e      	adds	r3, #14
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7fe f812 	bl	800ab20 <ld_word>
 800cafc:	4603      	mov	r3, r0
 800cafe:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cb00:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d104      	bne.n	800cb10 <find_volume+0x2ec>
 800cb06:	230d      	movs	r3, #13
 800cb08:	e108      	b.n	800cd1c <find_volume+0x4f8>
 800cb0a:	bf00      	nop
 800cb0c:	200022d4 	.word	0x200022d4

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cb10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cb12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb14:	4413      	add	r3, r2
 800cb16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb18:	8911      	ldrh	r1, [r2, #8]
 800cb1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb1c:	8992      	ldrh	r2, [r2, #12]
 800cb1e:	0952      	lsrs	r2, r2, #5
 800cb20:	b292      	uxth	r2, r2
 800cb22:	fbb1 f2f2 	udiv	r2, r1, r2
 800cb26:	b292      	uxth	r2, r2
 800cb28:	4413      	add	r3, r2
 800cb2a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cb2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d201      	bcs.n	800cb38 <find_volume+0x314>
 800cb34:	230d      	movs	r3, #13
 800cb36:	e0f1      	b.n	800cd1c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cb38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb3c:	1ad3      	subs	r3, r2, r3
 800cb3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb40:	8952      	ldrh	r2, [r2, #10]
 800cb42:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb46:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d101      	bne.n	800cb52 <find_volume+0x32e>
 800cb4e:	230d      	movs	r3, #13
 800cb50:	e0e4      	b.n	800cd1c <find_volume+0x4f8>
		fmt = FS_FAT32;
 800cb52:	2303      	movs	r3, #3
 800cb54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb5a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	d802      	bhi.n	800cb68 <find_volume+0x344>
 800cb62:	2302      	movs	r3, #2
 800cb64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cb68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb6a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d802      	bhi.n	800cb78 <find_volume+0x354>
 800cb72:	2301      	movs	r3, #1
 800cb74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7a:	1c9a      	adds	r2, r3, #2
 800cb7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb7e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800cb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cb84:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cb86:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cb88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb8a:	441a      	add	r2, r3
 800cb8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800cb90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cb92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb94:	441a      	add	r2, r3
 800cb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb98:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800cb9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb9e:	2b03      	cmp	r3, #3
 800cba0:	d11e      	bne.n	800cbe0 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba4:	3338      	adds	r3, #56	; 0x38
 800cba6:	332a      	adds	r3, #42	; 0x2a
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f7fd ffb9 	bl	800ab20 <ld_word>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d001      	beq.n	800cbb8 <find_volume+0x394>
 800cbb4:	230d      	movs	r3, #13
 800cbb6:	e0b1      	b.n	800cd1c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbba:	891b      	ldrh	r3, [r3, #8]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d001      	beq.n	800cbc4 <find_volume+0x3a0>
 800cbc0:	230d      	movs	r3, #13
 800cbc2:	e0ab      	b.n	800cd1c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc6:	3338      	adds	r3, #56	; 0x38
 800cbc8:	332c      	adds	r3, #44	; 0x2c
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f7fd ffc0 	bl	800ab50 <ld_dword>
 800cbd0:	4602      	mov	r2, r0
 800cbd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd8:	69db      	ldr	r3, [r3, #28]
 800cbda:	009b      	lsls	r3, r3, #2
 800cbdc:	647b      	str	r3, [r7, #68]	; 0x44
 800cbde:	e01f      	b.n	800cc20 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe2:	891b      	ldrh	r3, [r3, #8]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d101      	bne.n	800cbec <find_volume+0x3c8>
 800cbe8:	230d      	movs	r3, #13
 800cbea:	e097      	b.n	800cd1c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cbec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cbf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbf2:	441a      	add	r2, r3
 800cbf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cbf8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cbfc:	2b02      	cmp	r3, #2
 800cbfe:	d103      	bne.n	800cc08 <find_volume+0x3e4>
 800cc00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc02:	69db      	ldr	r3, [r3, #28]
 800cc04:	005b      	lsls	r3, r3, #1
 800cc06:	e00a      	b.n	800cc1e <find_volume+0x3fa>
 800cc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc0a:	69da      	ldr	r2, [r3, #28]
 800cc0c:	4613      	mov	r3, r2
 800cc0e:	005b      	lsls	r3, r3, #1
 800cc10:	4413      	add	r3, r2
 800cc12:	085a      	lsrs	r2, r3, #1
 800cc14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc16:	69db      	ldr	r3, [r3, #28]
 800cc18:	f003 0301 	and.w	r3, r3, #1
 800cc1c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cc1e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc22:	6a1a      	ldr	r2, [r3, #32]
 800cc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc26:	899b      	ldrh	r3, [r3, #12]
 800cc28:	4619      	mov	r1, r3
 800cc2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc2c:	440b      	add	r3, r1
 800cc2e:	3b01      	subs	r3, #1
 800cc30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cc32:	8989      	ldrh	r1, [r1, #12]
 800cc34:	fbb3 f3f1 	udiv	r3, r3, r1
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	d201      	bcs.n	800cc40 <find_volume+0x41c>
 800cc3c:	230d      	movs	r3, #13
 800cc3e:	e06d      	b.n	800cd1c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc42:	f04f 32ff 	mov.w	r2, #4294967295
 800cc46:	619a      	str	r2, [r3, #24]
 800cc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc4a:	699a      	ldr	r2, [r3, #24]
 800cc4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc4e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800cc50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc52:	2280      	movs	r2, #128	; 0x80
 800cc54:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cc56:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc5a:	2b03      	cmp	r3, #3
 800cc5c:	d149      	bne.n	800ccf2 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cc5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc60:	3338      	adds	r3, #56	; 0x38
 800cc62:	3330      	adds	r3, #48	; 0x30
 800cc64:	4618      	mov	r0, r3
 800cc66:	f7fd ff5b 	bl	800ab20 <ld_word>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	2b01      	cmp	r3, #1
 800cc6e:	d140      	bne.n	800ccf2 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cc70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc72:	3301      	adds	r3, #1
 800cc74:	4619      	mov	r1, r3
 800cc76:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cc78:	f7fe fa02 	bl	800b080 <move_window>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d137      	bne.n	800ccf2 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800cc82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc84:	2200      	movs	r2, #0
 800cc86:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cc88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc8a:	3338      	adds	r3, #56	; 0x38
 800cc8c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cc90:	4618      	mov	r0, r3
 800cc92:	f7fd ff45 	bl	800ab20 <ld_word>
 800cc96:	4603      	mov	r3, r0
 800cc98:	461a      	mov	r2, r3
 800cc9a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d127      	bne.n	800ccf2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca4:	3338      	adds	r3, #56	; 0x38
 800cca6:	4618      	mov	r0, r3
 800cca8:	f7fd ff52 	bl	800ab50 <ld_dword>
 800ccac:	4603      	mov	r3, r0
 800ccae:	4a1d      	ldr	r2, [pc, #116]	; (800cd24 <find_volume+0x500>)
 800ccb0:	4293      	cmp	r3, r2
 800ccb2:	d11e      	bne.n	800ccf2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ccb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb6:	3338      	adds	r3, #56	; 0x38
 800ccb8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f7fd ff47 	bl	800ab50 <ld_dword>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	4a18      	ldr	r2, [pc, #96]	; (800cd28 <find_volume+0x504>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d113      	bne.n	800ccf2 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ccca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cccc:	3338      	adds	r3, #56	; 0x38
 800ccce:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f7fd ff3c 	bl	800ab50 <ld_dword>
 800ccd8:	4602      	mov	r2, r0
 800ccda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccdc:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ccde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce0:	3338      	adds	r3, #56	; 0x38
 800cce2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cce6:	4618      	mov	r0, r3
 800cce8:	f7fd ff32 	bl	800ab50 <ld_dword>
 800ccec:	4602      	mov	r2, r0
 800ccee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf0:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ccf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ccf8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ccfa:	4b0c      	ldr	r3, [pc, #48]	; (800cd2c <find_volume+0x508>)
 800ccfc:	881b      	ldrh	r3, [r3, #0]
 800ccfe:	3301      	adds	r3, #1
 800cd00:	b29a      	uxth	r2, r3
 800cd02:	4b0a      	ldr	r3, [pc, #40]	; (800cd2c <find_volume+0x508>)
 800cd04:	801a      	strh	r2, [r3, #0]
 800cd06:	4b09      	ldr	r3, [pc, #36]	; (800cd2c <find_volume+0x508>)
 800cd08:	881a      	ldrh	r2, [r3, #0]
 800cd0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800cd0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd10:	4a07      	ldr	r2, [pc, #28]	; (800cd30 <find_volume+0x50c>)
 800cd12:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cd14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cd16:	f7fe f94b 	bl	800afb0 <clear_lock>
#endif
	return FR_OK;
 800cd1a:	2300      	movs	r3, #0
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3758      	adds	r7, #88	; 0x58
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}
 800cd24:	41615252 	.word	0x41615252
 800cd28:	61417272 	.word	0x61417272
 800cd2c:	200022d8 	.word	0x200022d8
 800cd30:	200022fc 	.word	0x200022fc

0800cd34 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b084      	sub	sp, #16
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
 800cd3c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cd3e:	2309      	movs	r3, #9
 800cd40:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d01c      	beq.n	800cd82 <validate+0x4e>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d018      	beq.n	800cd82 <validate+0x4e>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	781b      	ldrb	r3, [r3, #0]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d013      	beq.n	800cd82 <validate+0x4e>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	889a      	ldrh	r2, [r3, #4]
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	88db      	ldrh	r3, [r3, #6]
 800cd64:	429a      	cmp	r2, r3
 800cd66:	d10c      	bne.n	800cd82 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	785b      	ldrb	r3, [r3, #1]
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7fd fe38 	bl	800a9e4 <disk_status>
 800cd74:	4603      	mov	r3, r0
 800cd76:	f003 0301 	and.w	r3, r3, #1
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d101      	bne.n	800cd82 <validate+0x4e>
			res = FR_OK;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cd82:	7bfb      	ldrb	r3, [r7, #15]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d102      	bne.n	800cd8e <validate+0x5a>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	e000      	b.n	800cd90 <validate+0x5c>
 800cd8e:	2300      	movs	r3, #0
 800cd90:	683a      	ldr	r2, [r7, #0]
 800cd92:	6013      	str	r3, [r2, #0]
	return res;
 800cd94:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3710      	adds	r7, #16
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}
	...

0800cda0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b088      	sub	sp, #32
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	60f8      	str	r0, [r7, #12]
 800cda8:	60b9      	str	r1, [r7, #8]
 800cdaa:	4613      	mov	r3, r2
 800cdac:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cdb2:	f107 0310 	add.w	r3, r7, #16
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f7ff fc9a 	bl	800c6f0 <get_ldnumber>
 800cdbc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cdbe:	69fb      	ldr	r3, [r7, #28]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	da01      	bge.n	800cdc8 <f_mount+0x28>
 800cdc4:	230b      	movs	r3, #11
 800cdc6:	e02b      	b.n	800ce20 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cdc8:	4a17      	ldr	r2, [pc, #92]	; (800ce28 <f_mount+0x88>)
 800cdca:	69fb      	ldr	r3, [r7, #28]
 800cdcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdd0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cdd2:	69bb      	ldr	r3, [r7, #24]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d005      	beq.n	800cde4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cdd8:	69b8      	ldr	r0, [r7, #24]
 800cdda:	f7fe f8e9 	bl	800afb0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cdde:	69bb      	ldr	r3, [r7, #24]
 800cde0:	2200      	movs	r2, #0
 800cde2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d002      	beq.n	800cdf0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	2200      	movs	r2, #0
 800cdee:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cdf0:	68fa      	ldr	r2, [r7, #12]
 800cdf2:	490d      	ldr	r1, [pc, #52]	; (800ce28 <f_mount+0x88>)
 800cdf4:	69fb      	ldr	r3, [r7, #28]
 800cdf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d002      	beq.n	800ce06 <f_mount+0x66>
 800ce00:	79fb      	ldrb	r3, [r7, #7]
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	d001      	beq.n	800ce0a <f_mount+0x6a>
 800ce06:	2300      	movs	r3, #0
 800ce08:	e00a      	b.n	800ce20 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ce0a:	f107 010c 	add.w	r1, r7, #12
 800ce0e:	f107 0308 	add.w	r3, r7, #8
 800ce12:	2200      	movs	r2, #0
 800ce14:	4618      	mov	r0, r3
 800ce16:	f7ff fd05 	bl	800c824 <find_volume>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ce1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3720      	adds	r7, #32
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}
 800ce28:	200022d4 	.word	0x200022d4

0800ce2c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b09a      	sub	sp, #104	; 0x68
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	60f8      	str	r0, [r7, #12]
 800ce34:	60b9      	str	r1, [r7, #8]
 800ce36:	4613      	mov	r3, r2
 800ce38:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d101      	bne.n	800ce44 <f_open+0x18>
 800ce40:	2309      	movs	r3, #9
 800ce42:	e1bb      	b.n	800d1bc <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ce44:	79fb      	ldrb	r3, [r7, #7]
 800ce46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce4a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ce4c:	79fa      	ldrb	r2, [r7, #7]
 800ce4e:	f107 0114 	add.w	r1, r7, #20
 800ce52:	f107 0308 	add.w	r3, r7, #8
 800ce56:	4618      	mov	r0, r3
 800ce58:	f7ff fce4 	bl	800c824 <find_volume>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800ce62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	f040 819f 	bne.w	800d1aa <f_open+0x37e>
		dj.obj.fs = fs;
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ce70:	68ba      	ldr	r2, [r7, #8]
 800ce72:	f107 0318 	add.w	r3, r7, #24
 800ce76:	4611      	mov	r1, r2
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f7ff fbc3 	bl	800c604 <follow_path>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ce84:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d11a      	bne.n	800cec2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ce8c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ce90:	b25b      	sxtb	r3, r3
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	da03      	bge.n	800ce9e <f_open+0x72>
				res = FR_INVALID_NAME;
 800ce96:	2306      	movs	r3, #6
 800ce98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ce9c:	e011      	b.n	800cec2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ce9e:	79fb      	ldrb	r3, [r7, #7]
 800cea0:	f023 0301 	bic.w	r3, r3, #1
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	bf14      	ite	ne
 800cea8:	2301      	movne	r3, #1
 800ceaa:	2300      	moveq	r3, #0
 800ceac:	b2db      	uxtb	r3, r3
 800ceae:	461a      	mov	r2, r3
 800ceb0:	f107 0318 	add.w	r3, r7, #24
 800ceb4:	4611      	mov	r1, r2
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f7fd ff32 	bl	800ad20 <chk_lock>
 800cebc:	4603      	mov	r3, r0
 800cebe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cec2:	79fb      	ldrb	r3, [r7, #7]
 800cec4:	f003 031c 	and.w	r3, r3, #28
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d07f      	beq.n	800cfcc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800cecc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d017      	beq.n	800cf04 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ced4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ced8:	2b04      	cmp	r3, #4
 800ceda:	d10e      	bne.n	800cefa <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cedc:	f7fd ff7c 	bl	800add8 <enq_lock>
 800cee0:	4603      	mov	r3, r0
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d006      	beq.n	800cef4 <f_open+0xc8>
 800cee6:	f107 0318 	add.w	r3, r7, #24
 800ceea:	4618      	mov	r0, r3
 800ceec:	f7ff f8da 	bl	800c0a4 <dir_register>
 800cef0:	4603      	mov	r3, r0
 800cef2:	e000      	b.n	800cef6 <f_open+0xca>
 800cef4:	2312      	movs	r3, #18
 800cef6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cefa:	79fb      	ldrb	r3, [r7, #7]
 800cefc:	f043 0308 	orr.w	r3, r3, #8
 800cf00:	71fb      	strb	r3, [r7, #7]
 800cf02:	e010      	b.n	800cf26 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cf04:	7fbb      	ldrb	r3, [r7, #30]
 800cf06:	f003 0311 	and.w	r3, r3, #17
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d003      	beq.n	800cf16 <f_open+0xea>
					res = FR_DENIED;
 800cf0e:	2307      	movs	r3, #7
 800cf10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cf14:	e007      	b.n	800cf26 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cf16:	79fb      	ldrb	r3, [r7, #7]
 800cf18:	f003 0304 	and.w	r3, r3, #4
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d002      	beq.n	800cf26 <f_open+0xfa>
 800cf20:	2308      	movs	r3, #8
 800cf22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cf26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d168      	bne.n	800d000 <f_open+0x1d4>
 800cf2e:	79fb      	ldrb	r3, [r7, #7]
 800cf30:	f003 0308 	and.w	r3, r3, #8
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d063      	beq.n	800d000 <f_open+0x1d4>
				dw = GET_FATTIME();
 800cf38:	f7fd fbda 	bl	800a6f0 <get_fattime>
 800cf3c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cf3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf40:	330e      	adds	r3, #14
 800cf42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cf44:	4618      	mov	r0, r3
 800cf46:	f7fd fe41 	bl	800abcc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cf4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf4c:	3316      	adds	r3, #22
 800cf4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cf50:	4618      	mov	r0, r3
 800cf52:	f7fd fe3b 	bl	800abcc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cf56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf58:	330b      	adds	r3, #11
 800cf5a:	2220      	movs	r2, #32
 800cf5c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf62:	4611      	mov	r1, r2
 800cf64:	4618      	mov	r0, r3
 800cf66:	f7fe fe13 	bl	800bb90 <ld_clust>
 800cf6a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cf6c:	697b      	ldr	r3, [r7, #20]
 800cf6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cf70:	2200      	movs	r2, #0
 800cf72:	4618      	mov	r0, r3
 800cf74:	f7fe fe2b 	bl	800bbce <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cf78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf7a:	331c      	adds	r3, #28
 800cf7c:	2100      	movs	r1, #0
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f7fd fe24 	bl	800abcc <st_dword>
					fs->wflag = 1;
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	2201      	movs	r2, #1
 800cf88:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cf8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d037      	beq.n	800d000 <f_open+0x1d4>
						dw = fs->winsect;
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf94:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800cf96:	f107 0318 	add.w	r3, r7, #24
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f7fe fb1b 	bl	800b5da <remove_chain>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800cfaa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d126      	bne.n	800d000 <f_open+0x1d4>
							res = move_window(fs, dw);
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f7fe f862 	bl	800b080 <move_window>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cfc6:	3a01      	subs	r2, #1
 800cfc8:	615a      	str	r2, [r3, #20]
 800cfca:	e019      	b.n	800d000 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cfcc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d115      	bne.n	800d000 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cfd4:	7fbb      	ldrb	r3, [r7, #30]
 800cfd6:	f003 0310 	and.w	r3, r3, #16
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d003      	beq.n	800cfe6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800cfde:	2304      	movs	r3, #4
 800cfe0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cfe4:	e00c      	b.n	800d000 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cfe6:	79fb      	ldrb	r3, [r7, #7]
 800cfe8:	f003 0302 	and.w	r3, r3, #2
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d007      	beq.n	800d000 <f_open+0x1d4>
 800cff0:	7fbb      	ldrb	r3, [r7, #30]
 800cff2:	f003 0301 	and.w	r3, r3, #1
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d002      	beq.n	800d000 <f_open+0x1d4>
						res = FR_DENIED;
 800cffa:	2307      	movs	r3, #7
 800cffc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800d000:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d004:	2b00      	cmp	r3, #0
 800d006:	d128      	bne.n	800d05a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d008:	79fb      	ldrb	r3, [r7, #7]
 800d00a:	f003 0308 	and.w	r3, r3, #8
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d003      	beq.n	800d01a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d012:	79fb      	ldrb	r3, [r7, #7]
 800d014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d018:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d022:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d028:	79fb      	ldrb	r3, [r7, #7]
 800d02a:	f023 0301 	bic.w	r3, r3, #1
 800d02e:	2b00      	cmp	r3, #0
 800d030:	bf14      	ite	ne
 800d032:	2301      	movne	r3, #1
 800d034:	2300      	moveq	r3, #0
 800d036:	b2db      	uxtb	r3, r3
 800d038:	461a      	mov	r2, r3
 800d03a:	f107 0318 	add.w	r3, r7, #24
 800d03e:	4611      	mov	r1, r2
 800d040:	4618      	mov	r0, r3
 800d042:	f7fd feeb 	bl	800ae1c <inc_lock>
 800d046:	4602      	mov	r2, r0
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	691b      	ldr	r3, [r3, #16]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d102      	bne.n	800d05a <f_open+0x22e>
 800d054:	2302      	movs	r3, #2
 800d056:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d05a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d05e:	2b00      	cmp	r3, #0
 800d060:	f040 80a3 	bne.w	800d1aa <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d068:	4611      	mov	r1, r2
 800d06a:	4618      	mov	r0, r3
 800d06c:	f7fe fd90 	bl	800bb90 <ld_clust>
 800d070:	4602      	mov	r2, r0
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d078:	331c      	adds	r3, #28
 800d07a:	4618      	mov	r0, r3
 800d07c:	f7fd fd68 	bl	800ab50 <ld_dword>
 800d080:	4602      	mov	r2, r0
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	2200      	movs	r2, #0
 800d08a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d08c:	697a      	ldr	r2, [r7, #20]
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d092:	697b      	ldr	r3, [r7, #20]
 800d094:	88da      	ldrh	r2, [r3, #6]
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	79fa      	ldrb	r2, [r7, #7]
 800d09e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	3330      	adds	r3, #48	; 0x30
 800d0b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d0ba:	2100      	movs	r1, #0
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f7fd fdd2 	bl	800ac66 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d0c2:	79fb      	ldrb	r3, [r7, #7]
 800d0c4:	f003 0320 	and.w	r3, r3, #32
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d06e      	beq.n	800d1aa <f_open+0x37e>
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	68db      	ldr	r3, [r3, #12]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d06a      	beq.n	800d1aa <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	68da      	ldr	r2, [r3, #12]
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	895b      	ldrh	r3, [r3, #10]
 800d0e0:	461a      	mov	r2, r3
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	899b      	ldrh	r3, [r3, #12]
 800d0e6:	fb03 f302 	mul.w	r3, r3, r2
 800d0ea:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	689b      	ldr	r3, [r3, #8]
 800d0f0:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	68db      	ldr	r3, [r3, #12]
 800d0f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d0f8:	e016      	b.n	800d128 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d0fe:	4618      	mov	r0, r3
 800d100:	f7fe f87b 	bl	800b1fa <get_fat>
 800d104:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800d106:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d108:	2b01      	cmp	r3, #1
 800d10a:	d802      	bhi.n	800d112 <f_open+0x2e6>
 800d10c:	2302      	movs	r3, #2
 800d10e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d112:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d114:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d118:	d102      	bne.n	800d120 <f_open+0x2f4>
 800d11a:	2301      	movs	r3, #1
 800d11c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d120:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d124:	1ad3      	subs	r3, r2, r3
 800d126:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d128:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d103      	bne.n	800d138 <f_open+0x30c>
 800d130:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d134:	429a      	cmp	r2, r3
 800d136:	d8e0      	bhi.n	800d0fa <f_open+0x2ce>
				}
				fp->clust = clst;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d13c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d13e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d142:	2b00      	cmp	r3, #0
 800d144:	d131      	bne.n	800d1aa <f_open+0x37e>
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	899b      	ldrh	r3, [r3, #12]
 800d14a:	461a      	mov	r2, r3
 800d14c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d14e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d152:	fb02 f201 	mul.w	r2, r2, r1
 800d156:	1a9b      	subs	r3, r3, r2
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d026      	beq.n	800d1aa <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d160:	4618      	mov	r0, r3
 800d162:	f7fe f82b 	bl	800b1bc <clust2sect>
 800d166:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d103      	bne.n	800d176 <f_open+0x34a>
						res = FR_INT_ERR;
 800d16e:	2302      	movs	r3, #2
 800d170:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d174:	e019      	b.n	800d1aa <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	899b      	ldrh	r3, [r3, #12]
 800d17a:	461a      	mov	r2, r3
 800d17c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d17e:	fbb3 f2f2 	udiv	r2, r3, r2
 800d182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d184:	441a      	add	r2, r3
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	7858      	ldrb	r0, [r3, #1]
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	6a1a      	ldr	r2, [r3, #32]
 800d198:	2301      	movs	r3, #1
 800d19a:	f7fd fc63 	bl	800aa64 <disk_read>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d002      	beq.n	800d1aa <f_open+0x37e>
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d1aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d002      	beq.n	800d1b8 <f_open+0x38c>
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d1b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3768      	adds	r7, #104	; 0x68
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}

0800d1c4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b08c      	sub	sp, #48	; 0x30
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	60f8      	str	r0, [r7, #12]
 800d1cc:	60b9      	str	r1, [r7, #8]
 800d1ce:	607a      	str	r2, [r7, #4]
 800d1d0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	2200      	movs	r2, #0
 800d1da:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	f107 0210 	add.w	r2, r7, #16
 800d1e2:	4611      	mov	r1, r2
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f7ff fda5 	bl	800cd34 <validate>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d1f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d107      	bne.n	800d208 <f_write+0x44>
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	7d5b      	ldrb	r3, [r3, #21]
 800d1fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d200:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d204:	2b00      	cmp	r3, #0
 800d206:	d002      	beq.n	800d20e <f_write+0x4a>
 800d208:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d20c:	e16a      	b.n	800d4e4 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	7d1b      	ldrb	r3, [r3, #20]
 800d212:	f003 0302 	and.w	r3, r3, #2
 800d216:	2b00      	cmp	r3, #0
 800d218:	d101      	bne.n	800d21e <f_write+0x5a>
 800d21a:	2307      	movs	r3, #7
 800d21c:	e162      	b.n	800d4e4 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	699a      	ldr	r2, [r3, #24]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	441a      	add	r2, r3
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	699b      	ldr	r3, [r3, #24]
 800d22a:	429a      	cmp	r2, r3
 800d22c:	f080 814c 	bcs.w	800d4c8 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	699b      	ldr	r3, [r3, #24]
 800d234:	43db      	mvns	r3, r3
 800d236:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d238:	e146      	b.n	800d4c8 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	699b      	ldr	r3, [r3, #24]
 800d23e:	693a      	ldr	r2, [r7, #16]
 800d240:	8992      	ldrh	r2, [r2, #12]
 800d242:	fbb3 f1f2 	udiv	r1, r3, r2
 800d246:	fb02 f201 	mul.w	r2, r2, r1
 800d24a:	1a9b      	subs	r3, r3, r2
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	f040 80f1 	bne.w	800d434 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	699b      	ldr	r3, [r3, #24]
 800d256:	693a      	ldr	r2, [r7, #16]
 800d258:	8992      	ldrh	r2, [r2, #12]
 800d25a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d25e:	693a      	ldr	r2, [r7, #16]
 800d260:	8952      	ldrh	r2, [r2, #10]
 800d262:	3a01      	subs	r2, #1
 800d264:	4013      	ands	r3, r2
 800d266:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d268:	69bb      	ldr	r3, [r7, #24]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d143      	bne.n	800d2f6 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	699b      	ldr	r3, [r3, #24]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d10c      	bne.n	800d290 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	689b      	ldr	r3, [r3, #8]
 800d27a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d11a      	bne.n	800d2b8 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2100      	movs	r1, #0
 800d286:	4618      	mov	r0, r3
 800d288:	f7fe fa0c 	bl	800b6a4 <create_chain>
 800d28c:	62b8      	str	r0, [r7, #40]	; 0x28
 800d28e:	e013      	b.n	800d2b8 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d294:	2b00      	cmp	r3, #0
 800d296:	d007      	beq.n	800d2a8 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	699b      	ldr	r3, [r3, #24]
 800d29c:	4619      	mov	r1, r3
 800d29e:	68f8      	ldr	r0, [r7, #12]
 800d2a0:	f7fe fa98 	bl	800b7d4 <clmt_clust>
 800d2a4:	62b8      	str	r0, [r7, #40]	; 0x28
 800d2a6:	e007      	b.n	800d2b8 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d2a8:	68fa      	ldr	r2, [r7, #12]
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	69db      	ldr	r3, [r3, #28]
 800d2ae:	4619      	mov	r1, r3
 800d2b0:	4610      	mov	r0, r2
 800d2b2:	f7fe f9f7 	bl	800b6a4 <create_chain>
 800d2b6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	f000 8109 	beq.w	800d4d2 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2c2:	2b01      	cmp	r3, #1
 800d2c4:	d104      	bne.n	800d2d0 <f_write+0x10c>
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	2202      	movs	r2, #2
 800d2ca:	755a      	strb	r2, [r3, #21]
 800d2cc:	2302      	movs	r3, #2
 800d2ce:	e109      	b.n	800d4e4 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2d6:	d104      	bne.n	800d2e2 <f_write+0x11e>
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	2201      	movs	r2, #1
 800d2dc:	755a      	strb	r2, [r3, #21]
 800d2de:	2301      	movs	r3, #1
 800d2e0:	e100      	b.n	800d4e4 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2e6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	689b      	ldr	r3, [r3, #8]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d102      	bne.n	800d2f6 <f_write+0x132>
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2f4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	7d1b      	ldrb	r3, [r3, #20]
 800d2fa:	b25b      	sxtb	r3, r3
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	da18      	bge.n	800d332 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d300:	693b      	ldr	r3, [r7, #16]
 800d302:	7858      	ldrb	r0, [r3, #1]
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	6a1a      	ldr	r2, [r3, #32]
 800d30e:	2301      	movs	r3, #1
 800d310:	f7fd fbc8 	bl	800aaa4 <disk_write>
 800d314:	4603      	mov	r3, r0
 800d316:	2b00      	cmp	r3, #0
 800d318:	d004      	beq.n	800d324 <f_write+0x160>
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	2201      	movs	r2, #1
 800d31e:	755a      	strb	r2, [r3, #21]
 800d320:	2301      	movs	r3, #1
 800d322:	e0df      	b.n	800d4e4 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	7d1b      	ldrb	r3, [r3, #20]
 800d328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d32c:	b2da      	uxtb	r2, r3
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d332:	693a      	ldr	r2, [r7, #16]
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	69db      	ldr	r3, [r3, #28]
 800d338:	4619      	mov	r1, r3
 800d33a:	4610      	mov	r0, r2
 800d33c:	f7fd ff3e 	bl	800b1bc <clust2sect>
 800d340:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d342:	697b      	ldr	r3, [r7, #20]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d104      	bne.n	800d352 <f_write+0x18e>
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	2202      	movs	r2, #2
 800d34c:	755a      	strb	r2, [r3, #21]
 800d34e:	2302      	movs	r3, #2
 800d350:	e0c8      	b.n	800d4e4 <f_write+0x320>
			sect += csect;
 800d352:	697a      	ldr	r2, [r7, #20]
 800d354:	69bb      	ldr	r3, [r7, #24]
 800d356:	4413      	add	r3, r2
 800d358:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	899b      	ldrh	r3, [r3, #12]
 800d35e:	461a      	mov	r2, r3
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	fbb3 f3f2 	udiv	r3, r3, r2
 800d366:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d368:	6a3b      	ldr	r3, [r7, #32]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d043      	beq.n	800d3f6 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d36e:	69ba      	ldr	r2, [r7, #24]
 800d370:	6a3b      	ldr	r3, [r7, #32]
 800d372:	4413      	add	r3, r2
 800d374:	693a      	ldr	r2, [r7, #16]
 800d376:	8952      	ldrh	r2, [r2, #10]
 800d378:	4293      	cmp	r3, r2
 800d37a:	d905      	bls.n	800d388 <f_write+0x1c4>
					cc = fs->csize - csect;
 800d37c:	693b      	ldr	r3, [r7, #16]
 800d37e:	895b      	ldrh	r3, [r3, #10]
 800d380:	461a      	mov	r2, r3
 800d382:	69bb      	ldr	r3, [r7, #24]
 800d384:	1ad3      	subs	r3, r2, r3
 800d386:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d388:	693b      	ldr	r3, [r7, #16]
 800d38a:	7858      	ldrb	r0, [r3, #1]
 800d38c:	6a3b      	ldr	r3, [r7, #32]
 800d38e:	697a      	ldr	r2, [r7, #20]
 800d390:	69f9      	ldr	r1, [r7, #28]
 800d392:	f7fd fb87 	bl	800aaa4 <disk_write>
 800d396:	4603      	mov	r3, r0
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d004      	beq.n	800d3a6 <f_write+0x1e2>
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	2201      	movs	r2, #1
 800d3a0:	755a      	strb	r2, [r3, #21]
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	e09e      	b.n	800d4e4 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	6a1a      	ldr	r2, [r3, #32]
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	1ad3      	subs	r3, r2, r3
 800d3ae:	6a3a      	ldr	r2, [r7, #32]
 800d3b0:	429a      	cmp	r2, r3
 800d3b2:	d918      	bls.n	800d3e6 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	6a1a      	ldr	r2, [r3, #32]
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	1ad3      	subs	r3, r2, r3
 800d3c2:	693a      	ldr	r2, [r7, #16]
 800d3c4:	8992      	ldrh	r2, [r2, #12]
 800d3c6:	fb02 f303 	mul.w	r3, r2, r3
 800d3ca:	69fa      	ldr	r2, [r7, #28]
 800d3cc:	18d1      	adds	r1, r2, r3
 800d3ce:	693b      	ldr	r3, [r7, #16]
 800d3d0:	899b      	ldrh	r3, [r3, #12]
 800d3d2:	461a      	mov	r2, r3
 800d3d4:	f7fd fc26 	bl	800ac24 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	7d1b      	ldrb	r3, [r3, #20]
 800d3dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3e0:	b2da      	uxtb	r2, r3
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	899b      	ldrh	r3, [r3, #12]
 800d3ea:	461a      	mov	r2, r3
 800d3ec:	6a3b      	ldr	r3, [r7, #32]
 800d3ee:	fb02 f303 	mul.w	r3, r2, r3
 800d3f2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d3f4:	e04b      	b.n	800d48e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	6a1b      	ldr	r3, [r3, #32]
 800d3fa:	697a      	ldr	r2, [r7, #20]
 800d3fc:	429a      	cmp	r2, r3
 800d3fe:	d016      	beq.n	800d42e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	699a      	ldr	r2, [r3, #24]
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d408:	429a      	cmp	r2, r3
 800d40a:	d210      	bcs.n	800d42e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	7858      	ldrb	r0, [r3, #1]
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d416:	2301      	movs	r3, #1
 800d418:	697a      	ldr	r2, [r7, #20]
 800d41a:	f7fd fb23 	bl	800aa64 <disk_read>
 800d41e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d420:	2b00      	cmp	r3, #0
 800d422:	d004      	beq.n	800d42e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	2201      	movs	r2, #1
 800d428:	755a      	strb	r2, [r3, #21]
 800d42a:	2301      	movs	r3, #1
 800d42c:	e05a      	b.n	800d4e4 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	697a      	ldr	r2, [r7, #20]
 800d432:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d434:	693b      	ldr	r3, [r7, #16]
 800d436:	899b      	ldrh	r3, [r3, #12]
 800d438:	4618      	mov	r0, r3
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	699b      	ldr	r3, [r3, #24]
 800d43e:	693a      	ldr	r2, [r7, #16]
 800d440:	8992      	ldrh	r2, [r2, #12]
 800d442:	fbb3 f1f2 	udiv	r1, r3, r2
 800d446:	fb02 f201 	mul.w	r2, r2, r1
 800d44a:	1a9b      	subs	r3, r3, r2
 800d44c:	1ac3      	subs	r3, r0, r3
 800d44e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	429a      	cmp	r2, r3
 800d456:	d901      	bls.n	800d45c <f_write+0x298>
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	699b      	ldr	r3, [r3, #24]
 800d466:	693a      	ldr	r2, [r7, #16]
 800d468:	8992      	ldrh	r2, [r2, #12]
 800d46a:	fbb3 f0f2 	udiv	r0, r3, r2
 800d46e:	fb02 f200 	mul.w	r2, r2, r0
 800d472:	1a9b      	subs	r3, r3, r2
 800d474:	440b      	add	r3, r1
 800d476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d478:	69f9      	ldr	r1, [r7, #28]
 800d47a:	4618      	mov	r0, r3
 800d47c:	f7fd fbd2 	bl	800ac24 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	7d1b      	ldrb	r3, [r3, #20]
 800d484:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d488:	b2da      	uxtb	r2, r3
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d48e:	69fa      	ldr	r2, [r7, #28]
 800d490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d492:	4413      	add	r3, r2
 800d494:	61fb      	str	r3, [r7, #28]
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	699a      	ldr	r2, [r3, #24]
 800d49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d49c:	441a      	add	r2, r3
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	619a      	str	r2, [r3, #24]
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	68da      	ldr	r2, [r3, #12]
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	699b      	ldr	r3, [r3, #24]
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	bf38      	it	cc
 800d4ae:	461a      	movcc	r2, r3
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	60da      	str	r2, [r3, #12]
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	681a      	ldr	r2, [r3, #0]
 800d4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ba:	441a      	add	r2, r3
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	601a      	str	r2, [r3, #0]
 800d4c0:	687a      	ldr	r2, [r7, #4]
 800d4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c4:	1ad3      	subs	r3, r2, r3
 800d4c6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	f47f aeb5 	bne.w	800d23a <f_write+0x76>
 800d4d0:	e000      	b.n	800d4d4 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d4d2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	7d1b      	ldrb	r3, [r3, #20]
 800d4d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4dc:	b2da      	uxtb	r2, r3
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d4e2:	2300      	movs	r3, #0
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	3730      	adds	r7, #48	; 0x30
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}

0800d4ec <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b086      	sub	sp, #24
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f107 0208 	add.w	r2, r7, #8
 800d4fa:	4611      	mov	r1, r2
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f7ff fc19 	bl	800cd34 <validate>
 800d502:	4603      	mov	r3, r0
 800d504:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d506:	7dfb      	ldrb	r3, [r7, #23]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d168      	bne.n	800d5de <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	7d1b      	ldrb	r3, [r3, #20]
 800d510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d514:	2b00      	cmp	r3, #0
 800d516:	d062      	beq.n	800d5de <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	7d1b      	ldrb	r3, [r3, #20]
 800d51c:	b25b      	sxtb	r3, r3
 800d51e:	2b00      	cmp	r3, #0
 800d520:	da15      	bge.n	800d54e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	7858      	ldrb	r0, [r3, #1]
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	6a1a      	ldr	r2, [r3, #32]
 800d530:	2301      	movs	r3, #1
 800d532:	f7fd fab7 	bl	800aaa4 <disk_write>
 800d536:	4603      	mov	r3, r0
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d001      	beq.n	800d540 <f_sync+0x54>
 800d53c:	2301      	movs	r3, #1
 800d53e:	e04f      	b.n	800d5e0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	7d1b      	ldrb	r3, [r3, #20]
 800d544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d548:	b2da      	uxtb	r2, r3
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d54e:	f7fd f8cf 	bl	800a6f0 <get_fattime>
 800d552:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d554:	68ba      	ldr	r2, [r7, #8]
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d55a:	4619      	mov	r1, r3
 800d55c:	4610      	mov	r0, r2
 800d55e:	f7fd fd8f 	bl	800b080 <move_window>
 800d562:	4603      	mov	r3, r0
 800d564:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d566:	7dfb      	ldrb	r3, [r7, #23]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d138      	bne.n	800d5de <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d570:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	330b      	adds	r3, #11
 800d576:	781a      	ldrb	r2, [r3, #0]
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	330b      	adds	r3, #11
 800d57c:	f042 0220 	orr.w	r2, r2, #32
 800d580:	b2d2      	uxtb	r2, r2
 800d582:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6818      	ldr	r0, [r3, #0]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	689b      	ldr	r3, [r3, #8]
 800d58c:	461a      	mov	r2, r3
 800d58e:	68f9      	ldr	r1, [r7, #12]
 800d590:	f7fe fb1d 	bl	800bbce <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	f103 021c 	add.w	r2, r3, #28
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	68db      	ldr	r3, [r3, #12]
 800d59e:	4619      	mov	r1, r3
 800d5a0:	4610      	mov	r0, r2
 800d5a2:	f7fd fb13 	bl	800abcc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	3316      	adds	r3, #22
 800d5aa:	6939      	ldr	r1, [r7, #16]
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f7fd fb0d 	bl	800abcc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	3312      	adds	r3, #18
 800d5b6:	2100      	movs	r1, #0
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f7fd faec 	bl	800ab96 <st_word>
					fs->wflag = 1;
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	2201      	movs	r2, #1
 800d5c2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7fd fd88 	bl	800b0dc <sync_fs>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	7d1b      	ldrb	r3, [r3, #20]
 800d5d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d5d8:	b2da      	uxtb	r2, r3
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d5de:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3718      	adds	r7, #24
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}

0800d5e8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b084      	sub	sp, #16
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f7ff ff7b 	bl	800d4ec <f_sync>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d5fa:	7bfb      	ldrb	r3, [r7, #15]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d118      	bne.n	800d632 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f107 0208 	add.w	r2, r7, #8
 800d606:	4611      	mov	r1, r2
 800d608:	4618      	mov	r0, r3
 800d60a:	f7ff fb93 	bl	800cd34 <validate>
 800d60e:	4603      	mov	r3, r0
 800d610:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d612:	7bfb      	ldrb	r3, [r7, #15]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d10c      	bne.n	800d632 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	691b      	ldr	r3, [r3, #16]
 800d61c:	4618      	mov	r0, r3
 800d61e:	f7fd fc8b 	bl	800af38 <dec_lock>
 800d622:	4603      	mov	r3, r0
 800d624:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d626:	7bfb      	ldrb	r3, [r7, #15]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d102      	bne.n	800d632 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2200      	movs	r2, #0
 800d630:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d632:	7bfb      	ldrb	r3, [r7, #15]
}
 800d634:	4618      	mov	r0, r3
 800d636:	3710      	adds	r7, #16
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}

0800d63c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d63c:	b480      	push	{r7}
 800d63e:	b087      	sub	sp, #28
 800d640:	af00      	add	r7, sp, #0
 800d642:	60f8      	str	r0, [r7, #12]
 800d644:	60b9      	str	r1, [r7, #8]
 800d646:	4613      	mov	r3, r2
 800d648:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d64a:	2301      	movs	r3, #1
 800d64c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d64e:	2300      	movs	r3, #0
 800d650:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d652:	4b1f      	ldr	r3, [pc, #124]	; (800d6d0 <FATFS_LinkDriverEx+0x94>)
 800d654:	7a5b      	ldrb	r3, [r3, #9]
 800d656:	b2db      	uxtb	r3, r3
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d131      	bne.n	800d6c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d65c:	4b1c      	ldr	r3, [pc, #112]	; (800d6d0 <FATFS_LinkDriverEx+0x94>)
 800d65e:	7a5b      	ldrb	r3, [r3, #9]
 800d660:	b2db      	uxtb	r3, r3
 800d662:	461a      	mov	r2, r3
 800d664:	4b1a      	ldr	r3, [pc, #104]	; (800d6d0 <FATFS_LinkDriverEx+0x94>)
 800d666:	2100      	movs	r1, #0
 800d668:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d66a:	4b19      	ldr	r3, [pc, #100]	; (800d6d0 <FATFS_LinkDriverEx+0x94>)
 800d66c:	7a5b      	ldrb	r3, [r3, #9]
 800d66e:	b2db      	uxtb	r3, r3
 800d670:	4a17      	ldr	r2, [pc, #92]	; (800d6d0 <FATFS_LinkDriverEx+0x94>)
 800d672:	009b      	lsls	r3, r3, #2
 800d674:	4413      	add	r3, r2
 800d676:	68fa      	ldr	r2, [r7, #12]
 800d678:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d67a:	4b15      	ldr	r3, [pc, #84]	; (800d6d0 <FATFS_LinkDriverEx+0x94>)
 800d67c:	7a5b      	ldrb	r3, [r3, #9]
 800d67e:	b2db      	uxtb	r3, r3
 800d680:	461a      	mov	r2, r3
 800d682:	4b13      	ldr	r3, [pc, #76]	; (800d6d0 <FATFS_LinkDriverEx+0x94>)
 800d684:	4413      	add	r3, r2
 800d686:	79fa      	ldrb	r2, [r7, #7]
 800d688:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d68a:	4b11      	ldr	r3, [pc, #68]	; (800d6d0 <FATFS_LinkDriverEx+0x94>)
 800d68c:	7a5b      	ldrb	r3, [r3, #9]
 800d68e:	b2db      	uxtb	r3, r3
 800d690:	1c5a      	adds	r2, r3, #1
 800d692:	b2d1      	uxtb	r1, r2
 800d694:	4a0e      	ldr	r2, [pc, #56]	; (800d6d0 <FATFS_LinkDriverEx+0x94>)
 800d696:	7251      	strb	r1, [r2, #9]
 800d698:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d69a:	7dbb      	ldrb	r3, [r7, #22]
 800d69c:	3330      	adds	r3, #48	; 0x30
 800d69e:	b2da      	uxtb	r2, r3
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	3301      	adds	r3, #1
 800d6a8:	223a      	movs	r2, #58	; 0x3a
 800d6aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	3302      	adds	r3, #2
 800d6b0:	222f      	movs	r2, #47	; 0x2f
 800d6b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	3303      	adds	r3, #3
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d6c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	371c      	adds	r7, #28
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6cc:	4770      	bx	lr
 800d6ce:	bf00      	nop
 800d6d0:	20002340 	.word	0x20002340

0800d6d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b082      	sub	sp, #8
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
 800d6dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d6de:	2200      	movs	r2, #0
 800d6e0:	6839      	ldr	r1, [r7, #0]
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f7ff ffaa 	bl	800d63c <FATFS_LinkDriverEx>
 800d6e8:	4603      	mov	r3, r0
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3708      	adds	r7, #8
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}
	...

0800d6f4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b085      	sub	sp, #20
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	6039      	str	r1, [r7, #0]
 800d6fe:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d700:	88fb      	ldrh	r3, [r7, #6]
 800d702:	2b7f      	cmp	r3, #127	; 0x7f
 800d704:	d802      	bhi.n	800d70c <ff_convert+0x18>
		c = chr;
 800d706:	88fb      	ldrh	r3, [r7, #6]
 800d708:	81fb      	strh	r3, [r7, #14]
 800d70a:	e025      	b.n	800d758 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d00b      	beq.n	800d72a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d712:	88fb      	ldrh	r3, [r7, #6]
 800d714:	2bff      	cmp	r3, #255	; 0xff
 800d716:	d805      	bhi.n	800d724 <ff_convert+0x30>
 800d718:	88fb      	ldrh	r3, [r7, #6]
 800d71a:	3b80      	subs	r3, #128	; 0x80
 800d71c:	4a12      	ldr	r2, [pc, #72]	; (800d768 <ff_convert+0x74>)
 800d71e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d722:	e000      	b.n	800d726 <ff_convert+0x32>
 800d724:	2300      	movs	r3, #0
 800d726:	81fb      	strh	r3, [r7, #14]
 800d728:	e016      	b.n	800d758 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d72a:	2300      	movs	r3, #0
 800d72c:	81fb      	strh	r3, [r7, #14]
 800d72e:	e009      	b.n	800d744 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d730:	89fb      	ldrh	r3, [r7, #14]
 800d732:	4a0d      	ldr	r2, [pc, #52]	; (800d768 <ff_convert+0x74>)
 800d734:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d738:	88fa      	ldrh	r2, [r7, #6]
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d006      	beq.n	800d74c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d73e:	89fb      	ldrh	r3, [r7, #14]
 800d740:	3301      	adds	r3, #1
 800d742:	81fb      	strh	r3, [r7, #14]
 800d744:	89fb      	ldrh	r3, [r7, #14]
 800d746:	2b7f      	cmp	r3, #127	; 0x7f
 800d748:	d9f2      	bls.n	800d730 <ff_convert+0x3c>
 800d74a:	e000      	b.n	800d74e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d74c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d74e:	89fb      	ldrh	r3, [r7, #14]
 800d750:	3380      	adds	r3, #128	; 0x80
 800d752:	b29b      	uxth	r3, r3
 800d754:	b2db      	uxtb	r3, r3
 800d756:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d758:	89fb      	ldrh	r3, [r7, #14]
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	3714      	adds	r7, #20
 800d75e:	46bd      	mov	sp, r7
 800d760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d764:	4770      	bx	lr
 800d766:	bf00      	nop
 800d768:	08014c3c 	.word	0x08014c3c

0800d76c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d76c:	b480      	push	{r7}
 800d76e:	b087      	sub	sp, #28
 800d770:	af00      	add	r7, sp, #0
 800d772:	4603      	mov	r3, r0
 800d774:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d776:	88fb      	ldrh	r3, [r7, #6]
 800d778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d77c:	d201      	bcs.n	800d782 <ff_wtoupper+0x16>
 800d77e:	4b3e      	ldr	r3, [pc, #248]	; (800d878 <ff_wtoupper+0x10c>)
 800d780:	e000      	b.n	800d784 <ff_wtoupper+0x18>
 800d782:	4b3e      	ldr	r3, [pc, #248]	; (800d87c <ff_wtoupper+0x110>)
 800d784:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	1c9a      	adds	r2, r3, #2
 800d78a:	617a      	str	r2, [r7, #20]
 800d78c:	881b      	ldrh	r3, [r3, #0]
 800d78e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d790:	8a7b      	ldrh	r3, [r7, #18]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d068      	beq.n	800d868 <ff_wtoupper+0xfc>
 800d796:	88fa      	ldrh	r2, [r7, #6]
 800d798:	8a7b      	ldrh	r3, [r7, #18]
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d364      	bcc.n	800d868 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d79e:	697b      	ldr	r3, [r7, #20]
 800d7a0:	1c9a      	adds	r2, r3, #2
 800d7a2:	617a      	str	r2, [r7, #20]
 800d7a4:	881b      	ldrh	r3, [r3, #0]
 800d7a6:	823b      	strh	r3, [r7, #16]
 800d7a8:	8a3b      	ldrh	r3, [r7, #16]
 800d7aa:	0a1b      	lsrs	r3, r3, #8
 800d7ac:	81fb      	strh	r3, [r7, #14]
 800d7ae:	8a3b      	ldrh	r3, [r7, #16]
 800d7b0:	b2db      	uxtb	r3, r3
 800d7b2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d7b4:	88fa      	ldrh	r2, [r7, #6]
 800d7b6:	8a79      	ldrh	r1, [r7, #18]
 800d7b8:	8a3b      	ldrh	r3, [r7, #16]
 800d7ba:	440b      	add	r3, r1
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	da49      	bge.n	800d854 <ff_wtoupper+0xe8>
			switch (cmd) {
 800d7c0:	89fb      	ldrh	r3, [r7, #14]
 800d7c2:	2b08      	cmp	r3, #8
 800d7c4:	d84f      	bhi.n	800d866 <ff_wtoupper+0xfa>
 800d7c6:	a201      	add	r2, pc, #4	; (adr r2, 800d7cc <ff_wtoupper+0x60>)
 800d7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7cc:	0800d7f1 	.word	0x0800d7f1
 800d7d0:	0800d803 	.word	0x0800d803
 800d7d4:	0800d819 	.word	0x0800d819
 800d7d8:	0800d821 	.word	0x0800d821
 800d7dc:	0800d829 	.word	0x0800d829
 800d7e0:	0800d831 	.word	0x0800d831
 800d7e4:	0800d839 	.word	0x0800d839
 800d7e8:	0800d841 	.word	0x0800d841
 800d7ec:	0800d849 	.word	0x0800d849
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d7f0:	88fa      	ldrh	r2, [r7, #6]
 800d7f2:	8a7b      	ldrh	r3, [r7, #18]
 800d7f4:	1ad3      	subs	r3, r2, r3
 800d7f6:	005b      	lsls	r3, r3, #1
 800d7f8:	697a      	ldr	r2, [r7, #20]
 800d7fa:	4413      	add	r3, r2
 800d7fc:	881b      	ldrh	r3, [r3, #0]
 800d7fe:	80fb      	strh	r3, [r7, #6]
 800d800:	e027      	b.n	800d852 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d802:	88fa      	ldrh	r2, [r7, #6]
 800d804:	8a7b      	ldrh	r3, [r7, #18]
 800d806:	1ad3      	subs	r3, r2, r3
 800d808:	b29b      	uxth	r3, r3
 800d80a:	f003 0301 	and.w	r3, r3, #1
 800d80e:	b29b      	uxth	r3, r3
 800d810:	88fa      	ldrh	r2, [r7, #6]
 800d812:	1ad3      	subs	r3, r2, r3
 800d814:	80fb      	strh	r3, [r7, #6]
 800d816:	e01c      	b.n	800d852 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d818:	88fb      	ldrh	r3, [r7, #6]
 800d81a:	3b10      	subs	r3, #16
 800d81c:	80fb      	strh	r3, [r7, #6]
 800d81e:	e018      	b.n	800d852 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d820:	88fb      	ldrh	r3, [r7, #6]
 800d822:	3b20      	subs	r3, #32
 800d824:	80fb      	strh	r3, [r7, #6]
 800d826:	e014      	b.n	800d852 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d828:	88fb      	ldrh	r3, [r7, #6]
 800d82a:	3b30      	subs	r3, #48	; 0x30
 800d82c:	80fb      	strh	r3, [r7, #6]
 800d82e:	e010      	b.n	800d852 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d830:	88fb      	ldrh	r3, [r7, #6]
 800d832:	3b1a      	subs	r3, #26
 800d834:	80fb      	strh	r3, [r7, #6]
 800d836:	e00c      	b.n	800d852 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d838:	88fb      	ldrh	r3, [r7, #6]
 800d83a:	3308      	adds	r3, #8
 800d83c:	80fb      	strh	r3, [r7, #6]
 800d83e:	e008      	b.n	800d852 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d840:	88fb      	ldrh	r3, [r7, #6]
 800d842:	3b50      	subs	r3, #80	; 0x50
 800d844:	80fb      	strh	r3, [r7, #6]
 800d846:	e004      	b.n	800d852 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d848:	88fb      	ldrh	r3, [r7, #6]
 800d84a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800d84e:	80fb      	strh	r3, [r7, #6]
 800d850:	bf00      	nop
			}
			break;
 800d852:	e008      	b.n	800d866 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d854:	89fb      	ldrh	r3, [r7, #14]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d195      	bne.n	800d786 <ff_wtoupper+0x1a>
 800d85a:	8a3b      	ldrh	r3, [r7, #16]
 800d85c:	005b      	lsls	r3, r3, #1
 800d85e:	697a      	ldr	r2, [r7, #20]
 800d860:	4413      	add	r3, r2
 800d862:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d864:	e78f      	b.n	800d786 <ff_wtoupper+0x1a>
			break;
 800d866:	bf00      	nop
	}

	return chr;
 800d868:	88fb      	ldrh	r3, [r7, #6]
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	371c      	adds	r7, #28
 800d86e:	46bd      	mov	sp, r7
 800d870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d874:	4770      	bx	lr
 800d876:	bf00      	nop
 800d878:	08014d3c 	.word	0x08014d3c
 800d87c:	08014f30 	.word	0x08014f30

0800d880 <hex2int>:
#include <time.h>

#define boolstr(s) ((s) ? "true" : "false")

static int hex2int(char c)
{
 800d880:	b480      	push	{r7}
 800d882:	b083      	sub	sp, #12
 800d884:	af00      	add	r7, sp, #0
 800d886:	4603      	mov	r3, r0
 800d888:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9')
 800d88a:	79fb      	ldrb	r3, [r7, #7]
 800d88c:	2b2f      	cmp	r3, #47	; 0x2f
 800d88e:	d905      	bls.n	800d89c <hex2int+0x1c>
 800d890:	79fb      	ldrb	r3, [r7, #7]
 800d892:	2b39      	cmp	r3, #57	; 0x39
 800d894:	d802      	bhi.n	800d89c <hex2int+0x1c>
        return c - '0';
 800d896:	79fb      	ldrb	r3, [r7, #7]
 800d898:	3b30      	subs	r3, #48	; 0x30
 800d89a:	e013      	b.n	800d8c4 <hex2int+0x44>
    if (c >= 'A' && c <= 'F')
 800d89c:	79fb      	ldrb	r3, [r7, #7]
 800d89e:	2b40      	cmp	r3, #64	; 0x40
 800d8a0:	d905      	bls.n	800d8ae <hex2int+0x2e>
 800d8a2:	79fb      	ldrb	r3, [r7, #7]
 800d8a4:	2b46      	cmp	r3, #70	; 0x46
 800d8a6:	d802      	bhi.n	800d8ae <hex2int+0x2e>
        return c - 'A' + 10;
 800d8a8:	79fb      	ldrb	r3, [r7, #7]
 800d8aa:	3b37      	subs	r3, #55	; 0x37
 800d8ac:	e00a      	b.n	800d8c4 <hex2int+0x44>
    if (c >= 'a' && c <= 'f')
 800d8ae:	79fb      	ldrb	r3, [r7, #7]
 800d8b0:	2b60      	cmp	r3, #96	; 0x60
 800d8b2:	d905      	bls.n	800d8c0 <hex2int+0x40>
 800d8b4:	79fb      	ldrb	r3, [r7, #7]
 800d8b6:	2b66      	cmp	r3, #102	; 0x66
 800d8b8:	d802      	bhi.n	800d8c0 <hex2int+0x40>
        return c - 'a' + 10;
 800d8ba:	79fb      	ldrb	r3, [r7, #7]
 800d8bc:	3b57      	subs	r3, #87	; 0x57
 800d8be:	e001      	b.n	800d8c4 <hex2int+0x44>
    return -1;
 800d8c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	370c      	adds	r7, #12
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ce:	4770      	bx	lr

0800d8d0 <minmea_check>:

bool minmea_check(const char *sentence)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b086      	sub	sp, #24
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
    uint8_t checksum = 0x00;
 800d8d8:	2300      	movs	r3, #0
 800d8da:	75fb      	strb	r3, [r7, #23]

    // Sequence length is limited.
    if (strlen(sentence) > MINMEA_MAX_LENGTH + 3)
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f7f2 fc89 	bl	80001f4 <strlen>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	2b53      	cmp	r3, #83	; 0x53
 800d8e6:	d901      	bls.n	800d8ec <minmea_check+0x1c>
        return false;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	e063      	b.n	800d9b4 <minmea_check+0xe4>

    // A valid sentence starts with "$".
    if (*sentence++ != '$')
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	1c5a      	adds	r2, r3, #1
 800d8f0:	607a      	str	r2, [r7, #4]
 800d8f2:	781b      	ldrb	r3, [r3, #0]
 800d8f4:	2b24      	cmp	r3, #36	; 0x24
 800d8f6:	d008      	beq.n	800d90a <minmea_check+0x3a>
        return false;
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	e05b      	b.n	800d9b4 <minmea_check+0xe4>

    // The optional checksum is an XOR of all bytes between "$" and "*".
    while (*sentence && *sentence != '*' && isprint((unsigned char) *sentence))
        checksum ^= *sentence++;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	1c5a      	adds	r2, r3, #1
 800d900:	607a      	str	r2, [r7, #4]
 800d902:	781a      	ldrb	r2, [r3, #0]
 800d904:	7dfb      	ldrb	r3, [r7, #23]
 800d906:	4053      	eors	r3, r2
 800d908:	75fb      	strb	r3, [r7, #23]
    while (*sentence && *sentence != '*' && isprint((unsigned char) *sentence))
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	781b      	ldrb	r3, [r3, #0]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d00d      	beq.n	800d92e <minmea_check+0x5e>
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	2b2a      	cmp	r3, #42	; 0x2a
 800d918:	d009      	beq.n	800d92e <minmea_check+0x5e>
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	781b      	ldrb	r3, [r3, #0]
 800d91e:	3301      	adds	r3, #1
 800d920:	4a26      	ldr	r2, [pc, #152]	; (800d9bc <minmea_check+0xec>)
 800d922:	4413      	add	r3, r2
 800d924:	781b      	ldrb	r3, [r3, #0]
 800d926:	f003 0397 	and.w	r3, r3, #151	; 0x97
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d1e6      	bne.n	800d8fc <minmea_check+0x2c>

    if (*sentence == '*') {
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	781b      	ldrb	r3, [r3, #0]
 800d932:	2b2a      	cmp	r3, #42	; 0x2a
 800d934:	d129      	bne.n	800d98a <minmea_check+0xba>
        // Extract checksum.
        sentence++;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	3301      	adds	r3, #1
 800d93a:	607b      	str	r3, [r7, #4]
        int upper = hex2int(*sentence++);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	1c5a      	adds	r2, r3, #1
 800d940:	607a      	str	r2, [r7, #4]
 800d942:	781b      	ldrb	r3, [r3, #0]
 800d944:	4618      	mov	r0, r3
 800d946:	f7ff ff9b 	bl	800d880 <hex2int>
 800d94a:	6138      	str	r0, [r7, #16]
        if (upper == -1)
 800d94c:	693b      	ldr	r3, [r7, #16]
 800d94e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d952:	d101      	bne.n	800d958 <minmea_check+0x88>
            return false;
 800d954:	2300      	movs	r3, #0
 800d956:	e02d      	b.n	800d9b4 <minmea_check+0xe4>
        int lower = hex2int(*sentence++);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	1c5a      	adds	r2, r3, #1
 800d95c:	607a      	str	r2, [r7, #4]
 800d95e:	781b      	ldrb	r3, [r3, #0]
 800d960:	4618      	mov	r0, r3
 800d962:	f7ff ff8d 	bl	800d880 <hex2int>
 800d966:	60f8      	str	r0, [r7, #12]
        if (lower == -1)
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d96e:	d101      	bne.n	800d974 <minmea_check+0xa4>
            return false;
 800d970:	2300      	movs	r3, #0
 800d972:	e01f      	b.n	800d9b4 <minmea_check+0xe4>
        int expected = upper << 4 | lower;
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	011b      	lsls	r3, r3, #4
 800d978:	68fa      	ldr	r2, [r7, #12]
 800d97a:	4313      	orrs	r3, r2
 800d97c:	60bb      	str	r3, [r7, #8]

        // Check for checksum mismatch.
        if (checksum != expected)
 800d97e:	7dfb      	ldrb	r3, [r7, #23]
 800d980:	68ba      	ldr	r2, [r7, #8]
 800d982:	429a      	cmp	r2, r3
 800d984:	d001      	beq.n	800d98a <minmea_check+0xba>
            return false;
 800d986:	2300      	movs	r3, #0
 800d988:	e014      	b.n	800d9b4 <minmea_check+0xe4>
    }

    // The only stuff allowed at this point is a newline.
    if (*sentence && strcmp(sentence, "\n") && strcmp(sentence, "\r\n"))
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	781b      	ldrb	r3, [r3, #0]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d00f      	beq.n	800d9b2 <minmea_check+0xe2>
 800d992:	490b      	ldr	r1, [pc, #44]	; (800d9c0 <minmea_check+0xf0>)
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	f7f2 fc23 	bl	80001e0 <strcmp>
 800d99a:	4603      	mov	r3, r0
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d008      	beq.n	800d9b2 <minmea_check+0xe2>
 800d9a0:	4908      	ldr	r1, [pc, #32]	; (800d9c4 <minmea_check+0xf4>)
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f7f2 fc1c 	bl	80001e0 <strcmp>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d001      	beq.n	800d9b2 <minmea_check+0xe2>
        return false;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	e000      	b.n	800d9b4 <minmea_check+0xe4>

    return true;
 800d9b2:	2301      	movs	r3, #1
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3718      	adds	r7, #24
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}
 800d9bc:	08015028 	.word	0x08015028
 800d9c0:	08014afc 	.word	0x08014afc
 800d9c4:	08014b00 	.word	0x08014b00

0800d9c8 <minmea_isfield>:

static inline bool minmea_isfield(char c) {
 800d9c8:	b480      	push	{r7}
 800d9ca:	b083      	sub	sp, #12
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	71fb      	strb	r3, [r7, #7]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 800d9d2:	79fb      	ldrb	r3, [r7, #7]
 800d9d4:	3301      	adds	r3, #1
 800d9d6:	4a0c      	ldr	r2, [pc, #48]	; (800da08 <minmea_isfield+0x40>)
 800d9d8:	4413      	add	r3, r2
 800d9da:	781b      	ldrb	r3, [r3, #0]
 800d9dc:	f003 0397 	and.w	r3, r3, #151	; 0x97
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d007      	beq.n	800d9f4 <minmea_isfield+0x2c>
 800d9e4:	79fb      	ldrb	r3, [r7, #7]
 800d9e6:	2b2c      	cmp	r3, #44	; 0x2c
 800d9e8:	d004      	beq.n	800d9f4 <minmea_isfield+0x2c>
 800d9ea:	79fb      	ldrb	r3, [r7, #7]
 800d9ec:	2b2a      	cmp	r3, #42	; 0x2a
 800d9ee:	d001      	beq.n	800d9f4 <minmea_isfield+0x2c>
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	e000      	b.n	800d9f6 <minmea_isfield+0x2e>
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	f003 0301 	and.w	r3, r3, #1
 800d9fa:	b2db      	uxtb	r3, r3
}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	370c      	adds	r7, #12
 800da00:	46bd      	mov	sp, r7
 800da02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da06:	4770      	bx	lr
 800da08:	08015028 	.word	0x08015028

0800da0c <minmea_scan>:

bool minmea_scan(const char *sentence, const char *format, ...)
{
 800da0c:	b40e      	push	{r1, r2, r3}
 800da0e:	b580      	push	{r7, lr}
 800da10:	b0a7      	sub	sp, #156	; 0x9c
 800da12:	af00      	add	r7, sp, #0
 800da14:	6078      	str	r0, [r7, #4]
    bool result = false;
 800da16:	2300      	movs	r3, #0
 800da18:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    bool optional = false;
 800da1c:	2300      	movs	r3, #0
 800da1e:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
    va_list ap;
    va_start(ap, format);
 800da22:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800da26:	62fb      	str	r3, [r7, #44]	; 0x2c

    const char *field = sentence;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        } else { \
            field = NULL; \
        } \
    } while (0)

    while (*format) {
 800da2e:	e379      	b.n	800e124 <minmea_scan+0x718>
        char type = *format++;
 800da30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800da34:	1c5a      	adds	r2, r3, #1
 800da36:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800da3a:	781b      	ldrb	r3, [r3, #0]
 800da3c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

        if (type == ';') {
 800da40:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800da44:	2b3b      	cmp	r3, #59	; 0x3b
 800da46:	d103      	bne.n	800da50 <minmea_scan+0x44>
            // All further fields are optional.
            optional = true;
 800da48:	2301      	movs	r3, #1
 800da4a:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
            continue;
 800da4e:	e369      	b.n	800e124 <minmea_scan+0x718>
        }

        if (!field && !optional) {
 800da50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800da54:	2b00      	cmp	r3, #0
 800da56:	d107      	bne.n	800da68 <minmea_scan+0x5c>
 800da58:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800da5c:	f083 0301 	eor.w	r3, r3, #1
 800da60:	b2db      	uxtb	r3, r3
 800da62:	2b00      	cmp	r3, #0
 800da64:	f040 8368 	bne.w	800e138 <minmea_scan+0x72c>
            // Field requested but we ran out if input. Bail out.
            goto parse_error;
        }

        switch (type) {
 800da68:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800da6c:	3b44      	subs	r3, #68	; 0x44
 800da6e:	2b30      	cmp	r3, #48	; 0x30
 800da70:	f200 8364 	bhi.w	800e13c <minmea_scan+0x730>
 800da74:	a201      	add	r2, pc, #4	; (adr r2, 800da7c <minmea_scan+0x70>)
 800da76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da7a:	bf00      	nop
 800da7c:	0800de8f 	.word	0x0800de8f
 800da80:	0800e13d 	.word	0x0800e13d
 800da84:	0800e13d 	.word	0x0800e13d
 800da88:	0800e13d 	.word	0x0800e13d
 800da8c:	0800e13d 	.word	0x0800e13d
 800da90:	0800e13d 	.word	0x0800e13d
 800da94:	0800e13d 	.word	0x0800e13d
 800da98:	0800e13d 	.word	0x0800e13d
 800da9c:	0800e13d 	.word	0x0800e13d
 800daa0:	0800e13d 	.word	0x0800e13d
 800daa4:	0800e13d 	.word	0x0800e13d
 800daa8:	0800e13d 	.word	0x0800e13d
 800daac:	0800e13d 	.word	0x0800e13d
 800dab0:	0800e13d 	.word	0x0800e13d
 800dab4:	0800e13d 	.word	0x0800e13d
 800dab8:	0800e13d 	.word	0x0800e13d
 800dabc:	0800df7d 	.word	0x0800df7d
 800dac0:	0800e13d 	.word	0x0800e13d
 800dac4:	0800e13d 	.word	0x0800e13d
 800dac8:	0800e13d 	.word	0x0800e13d
 800dacc:	0800e13d 	.word	0x0800e13d
 800dad0:	0800e13d 	.word	0x0800e13d
 800dad4:	0800e13d 	.word	0x0800e13d
 800dad8:	0800e13d 	.word	0x0800e13d
 800dadc:	0800e13d 	.word	0x0800e13d
 800dae0:	0800e13d 	.word	0x0800e13d
 800dae4:	0800e13d 	.word	0x0800e13d
 800dae8:	0800e0ef 	.word	0x0800e0ef
 800daec:	0800e13d 	.word	0x0800e13d
 800daf0:	0800e13d 	.word	0x0800e13d
 800daf4:	0800e13d 	.word	0x0800e13d
 800daf8:	0800db41 	.word	0x0800db41
 800dafc:	0800db7b 	.word	0x0800db7b
 800db00:	0800e13d 	.word	0x0800e13d
 800db04:	0800dc21 	.word	0x0800dc21
 800db08:	0800e13d 	.word	0x0800e13d
 800db0c:	0800e13d 	.word	0x0800e13d
 800db10:	0800dda1 	.word	0x0800dda1
 800db14:	0800e13d 	.word	0x0800e13d
 800db18:	0800e13d 	.word	0x0800e13d
 800db1c:	0800e13d 	.word	0x0800e13d
 800db20:	0800e13d 	.word	0x0800e13d
 800db24:	0800e13d 	.word	0x0800e13d
 800db28:	0800e13d 	.word	0x0800e13d
 800db2c:	0800e13d 	.word	0x0800e13d
 800db30:	0800e13d 	.word	0x0800e13d
 800db34:	0800e13d 	.word	0x0800e13d
 800db38:	0800dddf 	.word	0x0800dddf
 800db3c:	0800de21 	.word	0x0800de21
            case 'c': { // Single character field (char).
                char value = '\0';
 800db40:	2300      	movs	r3, #0
 800db42:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

                if (field && minmea_isfield(*field))
 800db46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d00d      	beq.n	800db6a <minmea_scan+0x15e>
 800db4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800db52:	781b      	ldrb	r3, [r3, #0]
 800db54:	4618      	mov	r0, r3
 800db56:	f7ff ff37 	bl	800d9c8 <minmea_isfield>
 800db5a:	4603      	mov	r3, r0
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d004      	beq.n	800db6a <minmea_scan+0x15e>
                    value = *field;
 800db60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800db64:	781b      	ldrb	r3, [r3, #0]
 800db66:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

                *va_arg(ap, char *) = value;
 800db6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db6c:	1d1a      	adds	r2, r3, #4
 800db6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 800db76:	701a      	strb	r2, [r3, #0]
            } break;
 800db78:	e2ba      	b.n	800e0f0 <minmea_scan+0x6e4>

            case 'd': { // Single character direction field (int).
                int value = 0;
 800db7a:	2300      	movs	r3, #0
 800db7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                if (field && minmea_isfield(*field)) {
 800db80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800db84:	2b00      	cmp	r3, #0
 800db86:	d042      	beq.n	800dc0e <minmea_scan+0x202>
 800db88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800db8c:	781b      	ldrb	r3, [r3, #0]
 800db8e:	4618      	mov	r0, r3
 800db90:	f7ff ff1a 	bl	800d9c8 <minmea_isfield>
 800db94:	4603      	mov	r3, r0
 800db96:	2b00      	cmp	r3, #0
 800db98:	d039      	beq.n	800dc0e <minmea_scan+0x202>
                    switch (*field) {
 800db9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800db9e:	781b      	ldrb	r3, [r3, #0]
 800dba0:	3b45      	subs	r3, #69	; 0x45
 800dba2:	2b12      	cmp	r3, #18
 800dba4:	f200 82cc 	bhi.w	800e140 <minmea_scan+0x734>
 800dba8:	a201      	add	r2, pc, #4	; (adr r2, 800dbb0 <minmea_scan+0x1a4>)
 800dbaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbae:	bf00      	nop
 800dbb0:	0800dbfd 	.word	0x0800dbfd
 800dbb4:	0800e141 	.word	0x0800e141
 800dbb8:	0800e141 	.word	0x0800e141
 800dbbc:	0800e141 	.word	0x0800e141
 800dbc0:	0800e141 	.word	0x0800e141
 800dbc4:	0800e141 	.word	0x0800e141
 800dbc8:	0800e141 	.word	0x0800e141
 800dbcc:	0800e141 	.word	0x0800e141
 800dbd0:	0800e141 	.word	0x0800e141
 800dbd4:	0800dbfd 	.word	0x0800dbfd
 800dbd8:	0800e141 	.word	0x0800e141
 800dbdc:	0800e141 	.word	0x0800e141
 800dbe0:	0800e141 	.word	0x0800e141
 800dbe4:	0800e141 	.word	0x0800e141
 800dbe8:	0800dc05 	.word	0x0800dc05
 800dbec:	0800e141 	.word	0x0800e141
 800dbf0:	0800e141 	.word	0x0800e141
 800dbf4:	0800e141 	.word	0x0800e141
 800dbf8:	0800dc05 	.word	0x0800dc05
                        case 'N':
                        case 'E':
                            value = 1;
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                            break;
 800dc02:	e005      	b.n	800dc10 <minmea_scan+0x204>
                        case 'S':
                        case 'W':
                            value = -1;
 800dc04:	f04f 33ff 	mov.w	r3, #4294967295
 800dc08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                            break;
 800dc0c:	e000      	b.n	800dc10 <minmea_scan+0x204>
                        default:
                            goto parse_error;
                    }
                }
 800dc0e:	bf00      	nop

                *va_arg(ap, int *) = value;
 800dc10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc12:	1d1a      	adds	r2, r3, #4
 800dc14:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800dc1c:	601a      	str	r2, [r3, #0]
            } break;
 800dc1e:	e267      	b.n	800e0f0 <minmea_scan+0x6e4>

            case 'f': { // Fractional value with scale (struct minmea_float).
                int sign = 0;
 800dc20:	2300      	movs	r3, #0
 800dc22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                int_least32_t value = -1;
 800dc26:	f04f 33ff 	mov.w	r3, #4294967295
 800dc2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                int_least32_t scale = 0;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	67fb      	str	r3, [r7, #124]	; 0x7c

                if (field) {
 800dc32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d07f      	beq.n	800dd3a <minmea_scan+0x32e>
                    while (minmea_isfield(*field)) {
 800dc3a:	e075      	b.n	800dd28 <minmea_scan+0x31c>
                        if (*field == '+' && !sign && value == -1) {
 800dc3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dc40:	781b      	ldrb	r3, [r3, #0]
 800dc42:	2b2b      	cmp	r3, #43	; 0x2b
 800dc44:	d10c      	bne.n	800dc60 <minmea_scan+0x254>
 800dc46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d108      	bne.n	800dc60 <minmea_scan+0x254>
 800dc4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dc52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc56:	d103      	bne.n	800dc60 <minmea_scan+0x254>
                            sign = 1;
 800dc58:	2301      	movs	r3, #1
 800dc5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dc5e:	e05e      	b.n	800dd1e <minmea_scan+0x312>
                        } else if (*field == '-' && !sign && value == -1) {
 800dc60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dc64:	781b      	ldrb	r3, [r3, #0]
 800dc66:	2b2d      	cmp	r3, #45	; 0x2d
 800dc68:	d10d      	bne.n	800dc86 <minmea_scan+0x27a>
 800dc6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d109      	bne.n	800dc86 <minmea_scan+0x27a>
 800dc72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dc76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc7a:	d104      	bne.n	800dc86 <minmea_scan+0x27a>
                            sign = -1;
 800dc7c:	f04f 33ff 	mov.w	r3, #4294967295
 800dc80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dc84:	e04b      	b.n	800dd1e <minmea_scan+0x312>
                        } else if (isdigit((unsigned char) *field)) {
 800dc86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dc8a:	781b      	ldrb	r3, [r3, #0]
 800dc8c:	3301      	adds	r3, #1
 800dc8e:	4ab9      	ldr	r2, [pc, #740]	; (800df74 <minmea_scan+0x568>)
 800dc90:	4413      	add	r3, r2
 800dc92:	781b      	ldrb	r3, [r3, #0]
 800dc94:	f003 0304 	and.w	r3, r3, #4
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d034      	beq.n	800dd06 <minmea_scan+0x2fa>
                            int digit = *field - '0';
 800dc9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dca0:	781b      	ldrb	r3, [r3, #0]
 800dca2:	3b30      	subs	r3, #48	; 0x30
 800dca4:	63bb      	str	r3, [r7, #56]	; 0x38
                            if (value == -1)
 800dca6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dcaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcae:	d102      	bne.n	800dcb6 <minmea_scan+0x2aa>
                                value = 0;
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                            if (value > (INT_LEAST32_MAX-digit) / 10) {
 800dcb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dcb8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800dcbc:	1a9b      	subs	r3, r3, r2
 800dcbe:	4aae      	ldr	r2, [pc, #696]	; (800df78 <minmea_scan+0x56c>)
 800dcc0:	fb82 1203 	smull	r1, r2, r2, r3
 800dcc4:	1092      	asrs	r2, r2, #2
 800dcc6:	17db      	asrs	r3, r3, #31
 800dcc8:	1ad3      	subs	r3, r2, r3
 800dcca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dcce:	429a      	cmp	r2, r3
 800dcd0:	dd04      	ble.n	800dcdc <minmea_scan+0x2d0>
                                /* we ran out of bits, what do we do? */
                                if (scale) {
 800dcd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	f000 8235 	beq.w	800e144 <minmea_scan+0x738>
                                    /* truncate extra precision */
                                    break;
 800dcda:	e02e      	b.n	800dd3a <minmea_scan+0x32e>
                                } else {
                                    /* integer overflow. bail out. */
                                    goto parse_error;
                                }
                            }
                            value = (10 * value) + digit;
 800dcdc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dce0:	4613      	mov	r3, r2
 800dce2:	009b      	lsls	r3, r3, #2
 800dce4:	4413      	add	r3, r2
 800dce6:	005b      	lsls	r3, r3, #1
 800dce8:	461a      	mov	r2, r3
 800dcea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcec:	4413      	add	r3, r2
 800dcee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                            if (scale)
 800dcf2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d012      	beq.n	800dd1e <minmea_scan+0x312>
                                scale *= 10;
 800dcf8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800dcfa:	4613      	mov	r3, r2
 800dcfc:	009b      	lsls	r3, r3, #2
 800dcfe:	4413      	add	r3, r2
 800dd00:	005b      	lsls	r3, r3, #1
 800dd02:	67fb      	str	r3, [r7, #124]	; 0x7c
 800dd04:	e00b      	b.n	800dd1e <minmea_scan+0x312>
                        } else if (*field == '.' && scale == 0) {
 800dd06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dd0a:	781b      	ldrb	r3, [r3, #0]
 800dd0c:	2b2e      	cmp	r3, #46	; 0x2e
 800dd0e:	f040 821b 	bne.w	800e148 <minmea_scan+0x73c>
 800dd12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	f040 8217 	bne.w	800e148 <minmea_scan+0x73c>
                            scale = 1;
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	67fb      	str	r3, [r7, #124]	; 0x7c
                        } else {
                            goto parse_error;
                        }
                        field++;
 800dd1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dd22:	3301      	adds	r3, #1
 800dd24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                    while (minmea_isfield(*field)) {
 800dd28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dd2c:	781b      	ldrb	r3, [r3, #0]
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f7ff fe4a 	bl	800d9c8 <minmea_isfield>
 800dd34:	4603      	mov	r3, r0
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d180      	bne.n	800dc3c <minmea_scan+0x230>
                    }
                }

                if ((sign || scale) && value == -1)
 800dd3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d102      	bne.n	800dd48 <minmea_scan+0x33c>
 800dd42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d005      	beq.n	800dd54 <minmea_scan+0x348>
 800dd48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dd4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd50:	f000 81fc 	beq.w	800e14c <minmea_scan+0x740>
                    goto parse_error;

                if (value == -1) {
 800dd54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dd58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd5c:	d105      	bne.n	800dd6a <minmea_scan+0x35e>
                    /* No digits were scanned. */
                    value = 0;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    scale = 0;
 800dd64:	2300      	movs	r3, #0
 800dd66:	67fb      	str	r3, [r7, #124]	; 0x7c
 800dd68:	e004      	b.n	800dd74 <minmea_scan+0x368>
                } else if (scale == 0) {
 800dd6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d101      	bne.n	800dd74 <minmea_scan+0x368>
                    /* No decimal point. */
                    scale = 1;
 800dd70:	2301      	movs	r3, #1
 800dd72:	67fb      	str	r3, [r7, #124]	; 0x7c
                }
                if (sign)
 800dd74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d007      	beq.n	800dd8c <minmea_scan+0x380>
                    value *= sign;
 800dd7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dd80:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800dd84:	fb02 f303 	mul.w	r3, r2, r3
 800dd88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                *va_arg(ap, struct minmea_float *) = (struct minmea_float) {value, scale};
 800dd8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd8e:	1d1a      	adds	r2, r3, #4
 800dd90:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dd98:	601a      	str	r2, [r3, #0]
 800dd9a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800dd9c:	605a      	str	r2, [r3, #4]
            } break;
 800dd9e:	e1a7      	b.n	800e0f0 <minmea_scan+0x6e4>

            case 'i': { // Integer value, default 0 (int).
                int value = 0;
 800dda0:	2300      	movs	r3, #0
 800dda2:	67bb      	str	r3, [r7, #120]	; 0x78

                if (field) {
 800dda4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d011      	beq.n	800ddd0 <minmea_scan+0x3c4>
                    char *endptr;
                    value = strtol(field, &endptr, 10);
 800ddac:	f107 0320 	add.w	r3, r7, #32
 800ddb0:	220a      	movs	r2, #10
 800ddb2:	4619      	mov	r1, r3
 800ddb4:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800ddb8:	f003 f920 	bl	8010ffc <strtol>
 800ddbc:	67b8      	str	r0, [r7, #120]	; 0x78
                    if (minmea_isfield(*endptr))
 800ddbe:	6a3b      	ldr	r3, [r7, #32]
 800ddc0:	781b      	ldrb	r3, [r3, #0]
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f7ff fe00 	bl	800d9c8 <minmea_isfield>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	f040 81c0 	bne.w	800e150 <minmea_scan+0x744>
                        goto parse_error;
                }

                *va_arg(ap, int *) = value;
 800ddd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd2:	1d1a      	adds	r2, r3, #4
 800ddd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ddda:	601a      	str	r2, [r3, #0]
            } break;
 800dddc:	e188      	b.n	800e0f0 <minmea_scan+0x6e4>

            case 's': { // String value (char *).
                char *buf = va_arg(ap, char *);
 800ddde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde0:	1d1a      	adds	r2, r3, #4
 800dde2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	677b      	str	r3, [r7, #116]	; 0x74

                if (field) {
 800dde8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d013      	beq.n	800de18 <minmea_scan+0x40c>
                    while (minmea_isfield(*field))
 800ddf0:	e009      	b.n	800de06 <minmea_scan+0x3fa>
                        *buf++ = *field++;
 800ddf2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800ddf6:	1c53      	adds	r3, r2, #1
 800ddf8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ddfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ddfe:	1c59      	adds	r1, r3, #1
 800de00:	6779      	str	r1, [r7, #116]	; 0x74
 800de02:	7812      	ldrb	r2, [r2, #0]
 800de04:	701a      	strb	r2, [r3, #0]
                    while (minmea_isfield(*field))
 800de06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800de0a:	781b      	ldrb	r3, [r3, #0]
 800de0c:	4618      	mov	r0, r3
 800de0e:	f7ff fddb 	bl	800d9c8 <minmea_isfield>
 800de12:	4603      	mov	r3, r0
 800de14:	2b00      	cmp	r3, #0
 800de16:	d1ec      	bne.n	800ddf2 <minmea_scan+0x3e6>
                }

                *buf = '\0';
 800de18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800de1a:	2200      	movs	r2, #0
 800de1c:	701a      	strb	r2, [r3, #0]
            } break;
 800de1e:	e167      	b.n	800e0f0 <minmea_scan+0x6e4>

            case 't': { // NMEA talker+sentence identifier (char *).
                // This field is always mandatory.
                if (!field)
 800de20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800de24:	2b00      	cmp	r3, #0
 800de26:	f000 8195 	beq.w	800e154 <minmea_scan+0x748>
                    goto parse_error;

                if (field[0] != '$')
 800de2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800de2e:	781b      	ldrb	r3, [r3, #0]
 800de30:	2b24      	cmp	r3, #36	; 0x24
 800de32:	f040 8191 	bne.w	800e158 <minmea_scan+0x74c>
                    goto parse_error;
                for (int i=0; i<5; i++)
 800de36:	2300      	movs	r3, #0
 800de38:	673b      	str	r3, [r7, #112]	; 0x70
 800de3a:	e013      	b.n	800de64 <minmea_scan+0x458>
                    if (!minmea_isfield(field[1+i]))
 800de3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800de3e:	3301      	adds	r3, #1
 800de40:	461a      	mov	r2, r3
 800de42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800de46:	4413      	add	r3, r2
 800de48:	781b      	ldrb	r3, [r3, #0]
 800de4a:	4618      	mov	r0, r3
 800de4c:	f7ff fdbc 	bl	800d9c8 <minmea_isfield>
 800de50:	4603      	mov	r3, r0
 800de52:	f083 0301 	eor.w	r3, r3, #1
 800de56:	b2db      	uxtb	r3, r3
 800de58:	2b00      	cmp	r3, #0
 800de5a:	f040 817f 	bne.w	800e15c <minmea_scan+0x750>
                for (int i=0; i<5; i++)
 800de5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800de60:	3301      	adds	r3, #1
 800de62:	673b      	str	r3, [r7, #112]	; 0x70
 800de64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800de66:	2b04      	cmp	r3, #4
 800de68:	dde8      	ble.n	800de3c <minmea_scan+0x430>
                        goto parse_error;

                char *buf = va_arg(ap, char *);
 800de6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de6c:	1d1a      	adds	r2, r3, #4
 800de6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	63fb      	str	r3, [r7, #60]	; 0x3c
                memcpy(buf, field+1, 5);
 800de74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800de78:	3301      	adds	r3, #1
 800de7a:	2205      	movs	r2, #5
 800de7c:	4619      	mov	r1, r3
 800de7e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800de80:	f001 f9e2 	bl	800f248 <memcpy>
                buf[5] = '\0';
 800de84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de86:	3305      	adds	r3, #5
 800de88:	2200      	movs	r2, #0
 800de8a:	701a      	strb	r2, [r3, #0]
            } break;
 800de8c:	e130      	b.n	800e0f0 <minmea_scan+0x6e4>

            case 'D': { // Date (int, int, int), -1 if empty.
                struct minmea_date *date = va_arg(ap, struct minmea_date *);
 800de8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de90:	1d1a      	adds	r2, r3, #4
 800de92:	62fa      	str	r2, [r7, #44]	; 0x2c
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	633b      	str	r3, [r7, #48]	; 0x30

                int d = -1, m = -1, y = -1;
 800de98:	f04f 33ff 	mov.w	r3, #4294967295
 800de9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800de9e:	f04f 33ff 	mov.w	r3, #4294967295
 800dea2:	66bb      	str	r3, [r7, #104]	; 0x68
 800dea4:	f04f 33ff 	mov.w	r3, #4294967295
 800dea8:	667b      	str	r3, [r7, #100]	; 0x64

                if (field && minmea_isfield(*field)) {
 800deaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d055      	beq.n	800df5e <minmea_scan+0x552>
 800deb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800deb6:	781b      	ldrb	r3, [r3, #0]
 800deb8:	4618      	mov	r0, r3
 800deba:	f7ff fd85 	bl	800d9c8 <minmea_isfield>
 800debe:	4603      	mov	r3, r0
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d04c      	beq.n	800df5e <minmea_scan+0x552>
                    // Always six digits.
                    for (int i=0; i<6; i++)
 800dec4:	2300      	movs	r3, #0
 800dec6:	663b      	str	r3, [r7, #96]	; 0x60
 800dec8:	e010      	b.n	800deec <minmea_scan+0x4e0>
                        if (!isdigit((unsigned char) field[i]))
 800deca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800decc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800ded0:	4413      	add	r3, r2
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	3301      	adds	r3, #1
 800ded6:	4a27      	ldr	r2, [pc, #156]	; (800df74 <minmea_scan+0x568>)
 800ded8:	4413      	add	r3, r2
 800deda:	781b      	ldrb	r3, [r3, #0]
 800dedc:	f003 0304 	and.w	r3, r3, #4
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	f000 813d 	beq.w	800e160 <minmea_scan+0x754>
                    for (int i=0; i<6; i++)
 800dee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dee8:	3301      	adds	r3, #1
 800deea:	663b      	str	r3, [r7, #96]	; 0x60
 800deec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800deee:	2b05      	cmp	r3, #5
 800def0:	ddeb      	ble.n	800deca <minmea_scan+0x4be>
                            goto parse_error;

                    d = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 800def2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	773b      	strb	r3, [r7, #28]
 800defa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800defe:	785b      	ldrb	r3, [r3, #1]
 800df00:	777b      	strb	r3, [r7, #29]
 800df02:	2300      	movs	r3, #0
 800df04:	77bb      	strb	r3, [r7, #30]
 800df06:	f107 031c 	add.w	r3, r7, #28
 800df0a:	220a      	movs	r2, #10
 800df0c:	2100      	movs	r1, #0
 800df0e:	4618      	mov	r0, r3
 800df10:	f003 f874 	bl	8010ffc <strtol>
 800df14:	66f8      	str	r0, [r7, #108]	; 0x6c
                    m = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 800df16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800df1a:	789b      	ldrb	r3, [r3, #2]
 800df1c:	763b      	strb	r3, [r7, #24]
 800df1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800df22:	78db      	ldrb	r3, [r3, #3]
 800df24:	767b      	strb	r3, [r7, #25]
 800df26:	2300      	movs	r3, #0
 800df28:	76bb      	strb	r3, [r7, #26]
 800df2a:	f107 0318 	add.w	r3, r7, #24
 800df2e:	220a      	movs	r2, #10
 800df30:	2100      	movs	r1, #0
 800df32:	4618      	mov	r0, r3
 800df34:	f003 f862 	bl	8010ffc <strtol>
 800df38:	66b8      	str	r0, [r7, #104]	; 0x68
                    y = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 800df3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800df3e:	791b      	ldrb	r3, [r3, #4]
 800df40:	753b      	strb	r3, [r7, #20]
 800df42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800df46:	795b      	ldrb	r3, [r3, #5]
 800df48:	757b      	strb	r3, [r7, #21]
 800df4a:	2300      	movs	r3, #0
 800df4c:	75bb      	strb	r3, [r7, #22]
 800df4e:	f107 0314 	add.w	r3, r7, #20
 800df52:	220a      	movs	r2, #10
 800df54:	2100      	movs	r1, #0
 800df56:	4618      	mov	r0, r3
 800df58:	f003 f850 	bl	8010ffc <strtol>
 800df5c:	6678      	str	r0, [r7, #100]	; 0x64
                }

                date->day = d;
 800df5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800df62:	601a      	str	r2, [r3, #0]
                date->month = m;
 800df64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df66:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800df68:	605a      	str	r2, [r3, #4]
                date->year = y;
 800df6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df6c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800df6e:	609a      	str	r2, [r3, #8]
            } break;
 800df70:	e0be      	b.n	800e0f0 <minmea_scan+0x6e4>
 800df72:	bf00      	nop
 800df74:	08015028 	.word	0x08015028
 800df78:	66666667 	.word	0x66666667

            case 'T': { // Time (int, int, int, int), -1 if empty.
                struct minmea_time *time = va_arg(ap, struct minmea_time *);
 800df7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df7e:	1d1a      	adds	r2, r3, #4
 800df80:	62fa      	str	r2, [r7, #44]	; 0x2c
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	637b      	str	r3, [r7, #52]	; 0x34

                int h = -1, i = -1, s = -1, u = -1;
 800df86:	f04f 33ff 	mov.w	r3, #4294967295
 800df8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800df8c:	f04f 33ff 	mov.w	r3, #4294967295
 800df90:	65bb      	str	r3, [r7, #88]	; 0x58
 800df92:	f04f 33ff 	mov.w	r3, #4294967295
 800df96:	657b      	str	r3, [r7, #84]	; 0x54
 800df98:	f04f 33ff 	mov.w	r3, #4294967295
 800df9c:	653b      	str	r3, [r7, #80]	; 0x50

                if (field && minmea_isfield(*field)) {
 800df9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	f000 8096 	beq.w	800e0d4 <minmea_scan+0x6c8>
 800dfa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dfac:	781b      	ldrb	r3, [r3, #0]
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f7ff fd0a 	bl	800d9c8 <minmea_isfield>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	f000 808c 	beq.w	800e0d4 <minmea_scan+0x6c8>
                    // Minimum required: integer time.
                    for (int i=0; i<6; i++)
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dfc0:	e010      	b.n	800dfe4 <minmea_scan+0x5d8>
                        if (!isdigit((unsigned char) field[i]))
 800dfc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfc4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800dfc8:	4413      	add	r3, r2
 800dfca:	781b      	ldrb	r3, [r3, #0]
 800dfcc:	3301      	adds	r3, #1
 800dfce:	4a6a      	ldr	r2, [pc, #424]	; (800e178 <minmea_scan+0x76c>)
 800dfd0:	4413      	add	r3, r2
 800dfd2:	781b      	ldrb	r3, [r3, #0]
 800dfd4:	f003 0304 	and.w	r3, r3, #4
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	f000 80c3 	beq.w	800e164 <minmea_scan+0x758>
                    for (int i=0; i<6; i++)
 800dfde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfe0:	3301      	adds	r3, #1
 800dfe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dfe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfe6:	2b05      	cmp	r3, #5
 800dfe8:	ddeb      	ble.n	800dfc2 <minmea_scan+0x5b6>
                            goto parse_error;

                    h = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 800dfea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dfee:	781b      	ldrb	r3, [r3, #0]
 800dff0:	743b      	strb	r3, [r7, #16]
 800dff2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dff6:	785b      	ldrb	r3, [r3, #1]
 800dff8:	747b      	strb	r3, [r7, #17]
 800dffa:	2300      	movs	r3, #0
 800dffc:	74bb      	strb	r3, [r7, #18]
 800dffe:	f107 0310 	add.w	r3, r7, #16
 800e002:	220a      	movs	r2, #10
 800e004:	2100      	movs	r1, #0
 800e006:	4618      	mov	r0, r3
 800e008:	f002 fff8 	bl	8010ffc <strtol>
 800e00c:	65f8      	str	r0, [r7, #92]	; 0x5c
                    i = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 800e00e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e012:	789b      	ldrb	r3, [r3, #2]
 800e014:	733b      	strb	r3, [r7, #12]
 800e016:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e01a:	78db      	ldrb	r3, [r3, #3]
 800e01c:	737b      	strb	r3, [r7, #13]
 800e01e:	2300      	movs	r3, #0
 800e020:	73bb      	strb	r3, [r7, #14]
 800e022:	f107 030c 	add.w	r3, r7, #12
 800e026:	220a      	movs	r2, #10
 800e028:	2100      	movs	r1, #0
 800e02a:	4618      	mov	r0, r3
 800e02c:	f002 ffe6 	bl	8010ffc <strtol>
 800e030:	65b8      	str	r0, [r7, #88]	; 0x58
                    s = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 800e032:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e036:	791b      	ldrb	r3, [r3, #4]
 800e038:	723b      	strb	r3, [r7, #8]
 800e03a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e03e:	795b      	ldrb	r3, [r3, #5]
 800e040:	727b      	strb	r3, [r7, #9]
 800e042:	2300      	movs	r3, #0
 800e044:	72bb      	strb	r3, [r7, #10]
 800e046:	f107 0308 	add.w	r3, r7, #8
 800e04a:	220a      	movs	r2, #10
 800e04c:	2100      	movs	r1, #0
 800e04e:	4618      	mov	r0, r3
 800e050:	f002 ffd4 	bl	8010ffc <strtol>
 800e054:	6578      	str	r0, [r7, #84]	; 0x54
                    field += 6;
 800e056:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e05a:	3306      	adds	r3, #6
 800e05c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                    // Extra: fractional time. Saved as microseconds.
                    if (*field++ == '.') {
 800e060:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e064:	1c5a      	adds	r2, r3, #1
 800e066:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800e06a:	781b      	ldrb	r3, [r3, #0]
 800e06c:	2b2e      	cmp	r3, #46	; 0x2e
 800e06e:	d12f      	bne.n	800e0d0 <minmea_scan+0x6c4>
                        int value = 0;
 800e070:	2300      	movs	r3, #0
 800e072:	64bb      	str	r3, [r7, #72]	; 0x48
                        int scale = 1000000;
 800e074:	4b41      	ldr	r3, [pc, #260]	; (800e17c <minmea_scan+0x770>)
 800e076:	647b      	str	r3, [r7, #68]	; 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 800e078:	e016      	b.n	800e0a8 <minmea_scan+0x69c>
                            value = (value * 10) + (*field++ - '0');
 800e07a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e07c:	4613      	mov	r3, r2
 800e07e:	009b      	lsls	r3, r3, #2
 800e080:	4413      	add	r3, r2
 800e082:	005b      	lsls	r3, r3, #1
 800e084:	4619      	mov	r1, r3
 800e086:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e08a:	1c5a      	adds	r2, r3, #1
 800e08c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800e090:	781b      	ldrb	r3, [r3, #0]
 800e092:	3b30      	subs	r3, #48	; 0x30
 800e094:	440b      	add	r3, r1
 800e096:	64bb      	str	r3, [r7, #72]	; 0x48
                            scale /= 10;
 800e098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e09a:	4a39      	ldr	r2, [pc, #228]	; (800e180 <minmea_scan+0x774>)
 800e09c:	fb82 1203 	smull	r1, r2, r2, r3
 800e0a0:	1092      	asrs	r2, r2, #2
 800e0a2:	17db      	asrs	r3, r3, #31
 800e0a4:	1ad3      	subs	r3, r2, r3
 800e0a6:	647b      	str	r3, [r7, #68]	; 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 800e0a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e0ac:	781b      	ldrb	r3, [r3, #0]
 800e0ae:	3301      	adds	r3, #1
 800e0b0:	4a31      	ldr	r2, [pc, #196]	; (800e178 <minmea_scan+0x76c>)
 800e0b2:	4413      	add	r3, r2
 800e0b4:	781b      	ldrb	r3, [r3, #0]
 800e0b6:	f003 0304 	and.w	r3, r3, #4
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d002      	beq.n	800e0c4 <minmea_scan+0x6b8>
 800e0be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0c0:	2b01      	cmp	r3, #1
 800e0c2:	dcda      	bgt.n	800e07a <minmea_scan+0x66e>
                        }
                        u = value * scale;
 800e0c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e0c8:	fb02 f303 	mul.w	r3, r2, r3
 800e0cc:	653b      	str	r3, [r7, #80]	; 0x50
 800e0ce:	e001      	b.n	800e0d4 <minmea_scan+0x6c8>
                    } else {
                        u = 0;
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	653b      	str	r3, [r7, #80]	; 0x50
                    }
                }

                time->hours = h;
 800e0d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e0d8:	601a      	str	r2, [r3, #0]
                time->minutes = i;
 800e0da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e0de:	605a      	str	r2, [r3, #4]
                time->seconds = s;
 800e0e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e0e4:	609a      	str	r2, [r3, #8]
                time->microseconds = u;
 800e0e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e0ea:	60da      	str	r2, [r3, #12]
            } break;
 800e0ec:	e000      	b.n	800e0f0 <minmea_scan+0x6e4>

            case '_': { // Ignore the field.
            } break;
 800e0ee:	bf00      	nop
            default: { // Unknown.
                goto parse_error;
            } break;
        }

        next_field();
 800e0f0:	e002      	b.n	800e0f8 <minmea_scan+0x6ec>
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	3301      	adds	r3, #1
 800e0f6:	607b      	str	r3, [r7, #4]
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	781b      	ldrb	r3, [r3, #0]
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f7ff fc63 	bl	800d9c8 <minmea_isfield>
 800e102:	4603      	mov	r3, r0
 800e104:	2b00      	cmp	r3, #0
 800e106:	d1f4      	bne.n	800e0f2 <minmea_scan+0x6e6>
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	781b      	ldrb	r3, [r3, #0]
 800e10c:	2b2c      	cmp	r3, #44	; 0x2c
 800e10e:	d106      	bne.n	800e11e <minmea_scan+0x712>
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	3301      	adds	r3, #1
 800e114:	607b      	str	r3, [r7, #4]
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e11c:	e002      	b.n	800e124 <minmea_scan+0x718>
 800e11e:	2300      	movs	r3, #0
 800e120:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    while (*format) {
 800e124:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e128:	781b      	ldrb	r3, [r3, #0]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	f47f ac80 	bne.w	800da30 <minmea_scan+0x24>
    }

    result = true;
 800e130:	2301      	movs	r3, #1
 800e132:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800e136:	e016      	b.n	800e166 <minmea_scan+0x75a>
            goto parse_error;
 800e138:	bf00      	nop
 800e13a:	e014      	b.n	800e166 <minmea_scan+0x75a>
                goto parse_error;
 800e13c:	bf00      	nop
 800e13e:	e012      	b.n	800e166 <minmea_scan+0x75a>
                            goto parse_error;
 800e140:	bf00      	nop
 800e142:	e010      	b.n	800e166 <minmea_scan+0x75a>
                                    goto parse_error;
 800e144:	bf00      	nop
 800e146:	e00e      	b.n	800e166 <minmea_scan+0x75a>
                            goto parse_error;
 800e148:	bf00      	nop
 800e14a:	e00c      	b.n	800e166 <minmea_scan+0x75a>
                    goto parse_error;
 800e14c:	bf00      	nop
 800e14e:	e00a      	b.n	800e166 <minmea_scan+0x75a>
                        goto parse_error;
 800e150:	bf00      	nop
 800e152:	e008      	b.n	800e166 <minmea_scan+0x75a>
                    goto parse_error;
 800e154:	bf00      	nop
 800e156:	e006      	b.n	800e166 <minmea_scan+0x75a>
                    goto parse_error;
 800e158:	bf00      	nop
 800e15a:	e004      	b.n	800e166 <minmea_scan+0x75a>
                        goto parse_error;
 800e15c:	bf00      	nop
 800e15e:	e002      	b.n	800e166 <minmea_scan+0x75a>
                            goto parse_error;
 800e160:	bf00      	nop
 800e162:	e000      	b.n	800e166 <minmea_scan+0x75a>
                            goto parse_error;
 800e164:	bf00      	nop

parse_error:
    va_end(ap);
    return result;
 800e166:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800e16a:	4618      	mov	r0, r3
 800e16c:	379c      	adds	r7, #156	; 0x9c
 800e16e:	46bd      	mov	sp, r7
 800e170:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e174:	b003      	add	sp, #12
 800e176:	4770      	bx	lr
 800e178:	08015028 	.word	0x08015028
 800e17c:	000f4240 	.word	0x000f4240
 800e180:	66666667 	.word	0x66666667

0800e184 <minmea_sentence_id>:

    return true;
}

enum minmea_sentence_id minmea_sentence_id(const char *sentence)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b084      	sub	sp, #16
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
    if (!minmea_check(sentence))
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f7ff fb9f 	bl	800d8d0 <minmea_check>
 800e192:	4603      	mov	r3, r0
 800e194:	f083 0301 	eor.w	r3, r3, #1
 800e198:	b2db      	uxtb	r3, r3
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d002      	beq.n	800e1a4 <minmea_sentence_id+0x20>
        return MINMEA_INVALID;
 800e19e:	f04f 33ff 	mov.w	r3, #4294967295
 800e1a2:	e04c      	b.n	800e23e <minmea_sentence_id+0xba>

    char type[6];
    if (!minmea_scan(sentence, "t", type))
 800e1a4:	f107 0308 	add.w	r3, r7, #8
 800e1a8:	461a      	mov	r2, r3
 800e1aa:	4927      	ldr	r1, [pc, #156]	; (800e248 <minmea_sentence_id+0xc4>)
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f7ff fc2d 	bl	800da0c <minmea_scan>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	f083 0301 	eor.w	r3, r3, #1
 800e1b8:	b2db      	uxtb	r3, r3
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d002      	beq.n	800e1c4 <minmea_sentence_id+0x40>
        return MINMEA_INVALID;
 800e1be:	f04f 33ff 	mov.w	r3, #4294967295
 800e1c2:	e03c      	b.n	800e23e <minmea_sentence_id+0xba>

    if (!strcmp(type+2, "RMC"))
 800e1c4:	f107 0308 	add.w	r3, r7, #8
 800e1c8:	3302      	adds	r3, #2
 800e1ca:	4920      	ldr	r1, [pc, #128]	; (800e24c <minmea_sentence_id+0xc8>)
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	f7f2 f807 	bl	80001e0 <strcmp>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d101      	bne.n	800e1dc <minmea_sentence_id+0x58>
        return MINMEA_SENTENCE_RMC;
 800e1d8:	2301      	movs	r3, #1
 800e1da:	e030      	b.n	800e23e <minmea_sentence_id+0xba>
    if (!strcmp(type+2, "GGA"))
 800e1dc:	f107 0308 	add.w	r3, r7, #8
 800e1e0:	3302      	adds	r3, #2
 800e1e2:	491b      	ldr	r1, [pc, #108]	; (800e250 <minmea_sentence_id+0xcc>)
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	f7f1 fffb 	bl	80001e0 <strcmp>
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d101      	bne.n	800e1f4 <minmea_sentence_id+0x70>
        return MINMEA_SENTENCE_GGA;
 800e1f0:	2302      	movs	r3, #2
 800e1f2:	e024      	b.n	800e23e <minmea_sentence_id+0xba>
    if (!strcmp(type+2, "GSA"))
 800e1f4:	f107 0308 	add.w	r3, r7, #8
 800e1f8:	3302      	adds	r3, #2
 800e1fa:	4916      	ldr	r1, [pc, #88]	; (800e254 <minmea_sentence_id+0xd0>)
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f7f1 ffef 	bl	80001e0 <strcmp>
 800e202:	4603      	mov	r3, r0
 800e204:	2b00      	cmp	r3, #0
 800e206:	d101      	bne.n	800e20c <minmea_sentence_id+0x88>
        return MINMEA_SENTENCE_GSA;
 800e208:	2303      	movs	r3, #3
 800e20a:	e018      	b.n	800e23e <minmea_sentence_id+0xba>
    if (!strcmp(type+2, "GST"))
 800e20c:	f107 0308 	add.w	r3, r7, #8
 800e210:	3302      	adds	r3, #2
 800e212:	4911      	ldr	r1, [pc, #68]	; (800e258 <minmea_sentence_id+0xd4>)
 800e214:	4618      	mov	r0, r3
 800e216:	f7f1 ffe3 	bl	80001e0 <strcmp>
 800e21a:	4603      	mov	r3, r0
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d101      	bne.n	800e224 <minmea_sentence_id+0xa0>
        return MINMEA_SENTENCE_GST;
 800e220:	2304      	movs	r3, #4
 800e222:	e00c      	b.n	800e23e <minmea_sentence_id+0xba>
    if (!strcmp(type+2, "GSV"))
 800e224:	f107 0308 	add.w	r3, r7, #8
 800e228:	3302      	adds	r3, #2
 800e22a:	490c      	ldr	r1, [pc, #48]	; (800e25c <minmea_sentence_id+0xd8>)
 800e22c:	4618      	mov	r0, r3
 800e22e:	f7f1 ffd7 	bl	80001e0 <strcmp>
 800e232:	4603      	mov	r3, r0
 800e234:	2b00      	cmp	r3, #0
 800e236:	d101      	bne.n	800e23c <minmea_sentence_id+0xb8>
        return MINMEA_SENTENCE_GSV;
 800e238:	2305      	movs	r3, #5
 800e23a:	e000      	b.n	800e23e <minmea_sentence_id+0xba>

    return MINMEA_UNKNOWN;
 800e23c:	2300      	movs	r3, #0
}
 800e23e:	4618      	mov	r0, r3
 800e240:	3710      	adds	r7, #16
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}
 800e246:	bf00      	nop
 800e248:	08014b04 	.word	0x08014b04
 800e24c:	08014b08 	.word	0x08014b08
 800e250:	08014b0c 	.word	0x08014b0c
 800e254:	08014b10 	.word	0x08014b10
 800e258:	08014b14 	.word	0x08014b14
 800e25c:	08014b18 	.word	0x08014b18

0800e260 <minmea_parse_gga>:

    return true;
}

bool minmea_parse_gga(struct minmea_sentence_gga *frame, const char *sentence)
{
 800e260:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e262:	b097      	sub	sp, #92	; 0x5c
 800e264:	af0c      	add	r7, sp, #48	; 0x30
 800e266:	6178      	str	r0, [r7, #20]
 800e268:	6139      	str	r1, [r7, #16]
    // $GPGGA,123519,4807.038,N,01131.000,E,1,08,0.9,545.4,M,46.9,M,,*47
    char type[6];
    int latitude_direction;
    int longitude_direction;

    if (!minmea_scan(sentence, "tTfdfdiiffcfci_",
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	60fb      	str	r3, [r7, #12]
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	3310      	adds	r3, #16
 800e272:	697a      	ldr	r2, [r7, #20]
 800e274:	3218      	adds	r2, #24
 800e276:	60ba      	str	r2, [r7, #8]
 800e278:	6979      	ldr	r1, [r7, #20]
 800e27a:	3120      	adds	r1, #32
 800e27c:	6978      	ldr	r0, [r7, #20]
 800e27e:	3024      	adds	r0, #36	; 0x24
 800e280:	697c      	ldr	r4, [r7, #20]
 800e282:	3428      	adds	r4, #40	; 0x28
 800e284:	697d      	ldr	r5, [r7, #20]
 800e286:	3530      	adds	r5, #48	; 0x30
 800e288:	697e      	ldr	r6, [r7, #20]
 800e28a:	3638      	adds	r6, #56	; 0x38
 800e28c:	697a      	ldr	r2, [r7, #20]
 800e28e:	323c      	adds	r2, #60	; 0x3c
 800e290:	607a      	str	r2, [r7, #4]
 800e292:	697a      	ldr	r2, [r7, #20]
 800e294:	3244      	adds	r2, #68	; 0x44
 800e296:	603a      	str	r2, [r7, #0]
 800e298:	697a      	ldr	r2, [r7, #20]
 800e29a:	3248      	adds	r2, #72	; 0x48
 800e29c:	f107 0c20 	add.w	ip, r7, #32
 800e2a0:	920b      	str	r2, [sp, #44]	; 0x2c
 800e2a2:	683a      	ldr	r2, [r7, #0]
 800e2a4:	920a      	str	r2, [sp, #40]	; 0x28
 800e2a6:	687a      	ldr	r2, [r7, #4]
 800e2a8:	9209      	str	r2, [sp, #36]	; 0x24
 800e2aa:	9608      	str	r6, [sp, #32]
 800e2ac:	9507      	str	r5, [sp, #28]
 800e2ae:	9406      	str	r4, [sp, #24]
 800e2b0:	9005      	str	r0, [sp, #20]
 800e2b2:	9104      	str	r1, [sp, #16]
 800e2b4:	f107 0118 	add.w	r1, r7, #24
 800e2b8:	9103      	str	r1, [sp, #12]
 800e2ba:	68ba      	ldr	r2, [r7, #8]
 800e2bc:	9202      	str	r2, [sp, #8]
 800e2be:	f107 021c 	add.w	r2, r7, #28
 800e2c2:	9201      	str	r2, [sp, #4]
 800e2c4:	9300      	str	r3, [sp, #0]
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	4662      	mov	r2, ip
 800e2ca:	4915      	ldr	r1, [pc, #84]	; (800e320 <minmea_parse_gga+0xc0>)
 800e2cc:	6938      	ldr	r0, [r7, #16]
 800e2ce:	f7ff fb9d 	bl	800da0c <minmea_scan>
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	f083 0301 	eor.w	r3, r3, #1
 800e2d8:	b2db      	uxtb	r3, r3
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d001      	beq.n	800e2e2 <minmea_parse_gga+0x82>
            &frame->satellites_tracked,
            &frame->hdop,
            &frame->altitude, &frame->altitude_units,
            &frame->height, &frame->height_units,
            &frame->dgps_age))
        return false;
 800e2de:	2300      	movs	r3, #0
 800e2e0:	e01a      	b.n	800e318 <minmea_parse_gga+0xb8>
    if (strcmp(type+2, "GGA"))
 800e2e2:	f107 0320 	add.w	r3, r7, #32
 800e2e6:	3302      	adds	r3, #2
 800e2e8:	490e      	ldr	r1, [pc, #56]	; (800e324 <minmea_parse_gga+0xc4>)
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f7f1 ff78 	bl	80001e0 <strcmp>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d001      	beq.n	800e2fa <minmea_parse_gga+0x9a>
        return false;
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	e00e      	b.n	800e318 <minmea_parse_gga+0xb8>

    frame->latitude.value *= latitude_direction;
 800e2fa:	697b      	ldr	r3, [r7, #20]
 800e2fc:	691b      	ldr	r3, [r3, #16]
 800e2fe:	69fa      	ldr	r2, [r7, #28]
 800e300:	fb02 f203 	mul.w	r2, r2, r3
 800e304:	697b      	ldr	r3, [r7, #20]
 800e306:	611a      	str	r2, [r3, #16]
    frame->longitude.value *= longitude_direction;
 800e308:	697b      	ldr	r3, [r7, #20]
 800e30a:	699b      	ldr	r3, [r3, #24]
 800e30c:	69ba      	ldr	r2, [r7, #24]
 800e30e:	fb02 f203 	mul.w	r2, r2, r3
 800e312:	697b      	ldr	r3, [r7, #20]
 800e314:	619a      	str	r2, [r3, #24]

    return true;
 800e316:	2301      	movs	r3, #1
}
 800e318:	4618      	mov	r0, r3
 800e31a:	372c      	adds	r7, #44	; 0x2c
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e320:	08014b2c 	.word	0x08014b2c
 800e324:	08014b0c 	.word	0x08014b0c

0800e328 <minmea_tofloat>:
/**
 * Convert a fixed-point value to a floating-point value.
 * Returns NaN for "unknown" values.
 */
static inline float minmea_tofloat(struct minmea_float *f)
{
 800e328:	b480      	push	{r7}
 800e32a:	b083      	sub	sp, #12
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
    if (f->scale == 0)
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	685b      	ldr	r3, [r3, #4]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d102      	bne.n	800e33e <minmea_tofloat+0x16>
        return NAN;
 800e338:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800e36c <minmea_tofloat+0x44>
 800e33c:	e00d      	b.n	800e35a <minmea_tofloat+0x32>
    return (float) f->value / (float) f->scale;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	ee07 3a90 	vmov	s15, r3
 800e346:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	685b      	ldr	r3, [r3, #4]
 800e34e:	ee07 3a90 	vmov	s15, r3
 800e352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e356:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e35a:	eef0 7a66 	vmov.f32	s15, s13
}
 800e35e:	eeb0 0a67 	vmov.f32	s0, s15
 800e362:	370c      	adds	r7, #12
 800e364:	46bd      	mov	sp, r7
 800e366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36a:	4770      	bx	lr
 800e36c:	7fc00000 	.word	0x7fc00000

0800e370 <minmea_tocoord>:
/**
 * Convert a raw coordinate to a floating point DD.DDD... value.
 * Returns NaN for "unknown" values.
 */
static inline float minmea_tocoord(struct minmea_float *f)
{
 800e370:	b480      	push	{r7}
 800e372:	b085      	sub	sp, #20
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
    if (f->scale == 0)
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	685b      	ldr	r3, [r3, #4]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d102      	bne.n	800e386 <minmea_tocoord+0x16>
        return NAN;
 800e380:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800e3f4 <minmea_tocoord+0x84>
 800e384:	e02e      	b.n	800e3e4 <minmea_tocoord+0x74>
    int_least32_t degrees = f->value / (f->scale * 100);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681a      	ldr	r2, [r3, #0]
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	685b      	ldr	r3, [r3, #4]
 800e38e:	2164      	movs	r1, #100	; 0x64
 800e390:	fb01 f303 	mul.w	r3, r1, r3
 800e394:	fb92 f3f3 	sdiv	r3, r2, r3
 800e398:	60fb      	str	r3, [r7, #12]
    int_least32_t minutes = f->value % (f->scale * 100);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	687a      	ldr	r2, [r7, #4]
 800e3a0:	6852      	ldr	r2, [r2, #4]
 800e3a2:	2164      	movs	r1, #100	; 0x64
 800e3a4:	fb01 f202 	mul.w	r2, r1, r2
 800e3a8:	fb93 f1f2 	sdiv	r1, r3, r2
 800e3ac:	fb02 f201 	mul.w	r2, r2, r1
 800e3b0:	1a9b      	subs	r3, r3, r2
 800e3b2:	60bb      	str	r3, [r7, #8]
    return (float) degrees + (float) minutes / (60 * f->scale);
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	ee07 3a90 	vmov	s15, r3
 800e3ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e3be:	68bb      	ldr	r3, [r7, #8]
 800e3c0:	ee07 3a90 	vmov	s15, r3
 800e3c4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	685a      	ldr	r2, [r3, #4]
 800e3cc:	4613      	mov	r3, r2
 800e3ce:	011b      	lsls	r3, r3, #4
 800e3d0:	1a9b      	subs	r3, r3, r2
 800e3d2:	009b      	lsls	r3, r3, #2
 800e3d4:	ee07 3a90 	vmov	s15, r3
 800e3d8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e3dc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800e3e0:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800e3e4:	eeb0 0a67 	vmov.f32	s0, s15
 800e3e8:	3714      	adds	r7, #20
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f0:	4770      	bx	lr
 800e3f2:	bf00      	nop
 800e3f4:	7fc00000 	.word	0x7fc00000

0800e3f8 <cb_push>:


#define GPS_SYMBOLS_PER_ACTS 500

static bool cb_push(uint8_t byte)
{
 800e3f8:	b480      	push	{r7}
 800e3fa:	b085      	sub	sp, #20
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	4603      	mov	r3, r0
 800e400:	71fb      	strb	r3, [r7, #7]

	size_t next_head = uart_buffer_head + 1;
 800e402:	4b10      	ldr	r3, [pc, #64]	; (800e444 <cb_push+0x4c>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	3301      	adds	r3, #1
 800e408:	60fb      	str	r3, [r7, #12]
	if (next_head >= sizeof(uart_buffer) / sizeof(uart_buffer[0]))
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e410:	d301      	bcc.n	800e416 <cb_push+0x1e>
		next_head = 0;
 800e412:	2300      	movs	r3, #0
 800e414:	60fb      	str	r3, [r7, #12]

	if (next_head == uart_buffer_tail)
 800e416:	4b0c      	ldr	r3, [pc, #48]	; (800e448 <cb_push+0x50>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	68fa      	ldr	r2, [r7, #12]
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d101      	bne.n	800e424 <cb_push+0x2c>
		return false;
 800e420:	2300      	movs	r3, #0
 800e422:	e008      	b.n	800e436 <cb_push+0x3e>

	uart_buffer[uart_buffer_head] = byte;
 800e424:	4b07      	ldr	r3, [pc, #28]	; (800e444 <cb_push+0x4c>)
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	4908      	ldr	r1, [pc, #32]	; (800e44c <cb_push+0x54>)
 800e42a:	79fa      	ldrb	r2, [r7, #7]
 800e42c:	54ca      	strb	r2, [r1, r3]
	uart_buffer_head = next_head;
 800e42e:	4a05      	ldr	r2, [pc, #20]	; (800e444 <cb_push+0x4c>)
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	6013      	str	r3, [r2, #0]
	return true;
 800e434:	2301      	movs	r3, #1
}
 800e436:	4618      	mov	r0, r3
 800e438:	3714      	adds	r7, #20
 800e43a:	46bd      	mov	sp, r7
 800e43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e440:	4770      	bx	lr
 800e442:	bf00      	nop
 800e444:	20002738 	.word	0x20002738
 800e448:	2000273c 	.word	0x2000273c
 800e44c:	20002350 	.word	0x20002350

0800e450 <cb_pop>:


static bool cb_pop(uint8_t *byte)
{
 800e450:	b480      	push	{r7}
 800e452:	b083      	sub	sp, #12
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
	if (uart_buffer_head == uart_buffer_tail)
 800e458:	4b10      	ldr	r3, [pc, #64]	; (800e49c <cb_pop+0x4c>)
 800e45a:	681a      	ldr	r2, [r3, #0]
 800e45c:	4b10      	ldr	r3, [pc, #64]	; (800e4a0 <cb_pop+0x50>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	429a      	cmp	r2, r3
 800e462:	d101      	bne.n	800e468 <cb_pop+0x18>
		return false;
 800e464:	2300      	movs	r3, #0
 800e466:	e013      	b.n	800e490 <cb_pop+0x40>

	*byte = uart_buffer[uart_buffer_tail];
 800e468:	4b0d      	ldr	r3, [pc, #52]	; (800e4a0 <cb_pop+0x50>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	4a0d      	ldr	r2, [pc, #52]	; (800e4a4 <cb_pop+0x54>)
 800e46e:	5cd2      	ldrb	r2, [r2, r3]
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	701a      	strb	r2, [r3, #0]
	uart_buffer_tail += 1;
 800e474:	4b0a      	ldr	r3, [pc, #40]	; (800e4a0 <cb_pop+0x50>)
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	3301      	adds	r3, #1
 800e47a:	4a09      	ldr	r2, [pc, #36]	; (800e4a0 <cb_pop+0x50>)
 800e47c:	6013      	str	r3, [r2, #0]
	if (uart_buffer_tail >= sizeof(uart_buffer) / sizeof(uart_buffer[0]))
 800e47e:	4b08      	ldr	r3, [pc, #32]	; (800e4a0 <cb_pop+0x50>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e486:	d302      	bcc.n	800e48e <cb_pop+0x3e>
		uart_buffer_tail = 0;
 800e488:	4b05      	ldr	r3, [pc, #20]	; (800e4a0 <cb_pop+0x50>)
 800e48a:	2200      	movs	r2, #0
 800e48c:	601a      	str	r2, [r3, #0]

	return true;
 800e48e:	2301      	movs	r3, #1
}
 800e490:	4618      	mov	r0, r3
 800e492:	370c      	adds	r7, #12
 800e494:	46bd      	mov	sp, r7
 800e496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49a:	4770      	bx	lr
 800e49c:	20002738 	.word	0x20002738
 800e4a0:	2000273c 	.word	0x2000273c
 800e4a4:	20002350 	.word	0x20002350

0800e4a8 <gps_parse>:




static int gps_parse(uint8_t byte)
{
 800e4a8:	b480      	push	{r7}
 800e4aa:	b083      	sub	sp, #12
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	71fb      	strb	r3, [r7, #7]
	if (pavel_gps_sost == 0)
 800e4b2:	4b1c      	ldr	r3, [pc, #112]	; (800e524 <gps_parse+0x7c>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d10c      	bne.n	800e4d4 <gps_parse+0x2c>
	{
		if (byte == '$')
 800e4ba:	79fb      	ldrb	r3, [r7, #7]
 800e4bc:	2b24      	cmp	r3, #36	; 0x24
 800e4be:	d129      	bne.n	800e514 <gps_parse+0x6c>
		{
			pavel_gps_buffer[0]='$';
 800e4c0:	4b19      	ldr	r3, [pc, #100]	; (800e528 <gps_parse+0x80>)
 800e4c2:	2224      	movs	r2, #36	; 0x24
 800e4c4:	701a      	strb	r2, [r3, #0]
			pavel_gps_sost = 1;
 800e4c6:	4b17      	ldr	r3, [pc, #92]	; (800e524 <gps_parse+0x7c>)
 800e4c8:	2201      	movs	r2, #1
 800e4ca:	601a      	str	r2, [r3, #0]
			pavel_gps_carret = 1;
 800e4cc:	4b17      	ldr	r3, [pc, #92]	; (800e52c <gps_parse+0x84>)
 800e4ce:	2201      	movs	r2, #1
 800e4d0:	601a      	str	r2, [r3, #0]
 800e4d2:	e01f      	b.n	800e514 <gps_parse+0x6c>
		}
	}
	else
	{
		if (pavel_gps_carret >= sizeof(pavel_gps_buffer) / sizeof(pavel_gps_buffer[0]))
 800e4d4:	4b15      	ldr	r3, [pc, #84]	; (800e52c <gps_parse+0x84>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800e4dc:	d305      	bcc.n	800e4ea <gps_parse+0x42>
		{
			pavel_gps_sost = 0;
 800e4de:	4b11      	ldr	r3, [pc, #68]	; (800e524 <gps_parse+0x7c>)
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	601a      	str	r2, [r3, #0]
			return pavel_gps_sost;
 800e4e4:	4b0f      	ldr	r3, [pc, #60]	; (800e524 <gps_parse+0x7c>)
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	e016      	b.n	800e518 <gps_parse+0x70>
		}

		pavel_gps_buffer[pavel_gps_carret] = byte;
 800e4ea:	4b10      	ldr	r3, [pc, #64]	; (800e52c <gps_parse+0x84>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	490e      	ldr	r1, [pc, #56]	; (800e528 <gps_parse+0x80>)
 800e4f0:	79fa      	ldrb	r2, [r7, #7]
 800e4f2:	54ca      	strb	r2, [r1, r3]
		pavel_gps_carret = pavel_gps_carret + 1;
 800e4f4:	4b0d      	ldr	r3, [pc, #52]	; (800e52c <gps_parse+0x84>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	3301      	adds	r3, #1
 800e4fa:	4a0c      	ldr	r2, [pc, #48]	; (800e52c <gps_parse+0x84>)
 800e4fc:	6013      	str	r3, [r2, #0]
		if (byte == '\n' )
 800e4fe:	79fb      	ldrb	r3, [r7, #7]
 800e500:	2b0a      	cmp	r3, #10
 800e502:	d107      	bne.n	800e514 <gps_parse+0x6c>
		{
			pavel_gps_sost = 2;
 800e504:	4b07      	ldr	r3, [pc, #28]	; (800e524 <gps_parse+0x7c>)
 800e506:	2202      	movs	r2, #2
 800e508:	601a      	str	r2, [r3, #0]
			pavel_gps_buffer[pavel_gps_carret] =0;
 800e50a:	4b08      	ldr	r3, [pc, #32]	; (800e52c <gps_parse+0x84>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	4a06      	ldr	r2, [pc, #24]	; (800e528 <gps_parse+0x80>)
 800e510:	2100      	movs	r1, #0
 800e512:	54d1      	strb	r1, [r2, r3]
		}
	}

	return pavel_gps_sost;
 800e514:	4b03      	ldr	r3, [pc, #12]	; (800e524 <gps_parse+0x7c>)
 800e516:	681b      	ldr	r3, [r3, #0]
}
 800e518:	4618      	mov	r0, r3
 800e51a:	370c      	adds	r7, #12
 800e51c:	46bd      	mov	sp, r7
 800e51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e522:	4770      	bx	lr
 800e524:	20002740 	.word	0x20002740
 800e528:	20002744 	.word	0x20002744
 800e52c:	20002870 	.word	0x20002870

0800e530 <gps_init>:


int gps_init()
{
 800e530:	b580      	push	{r7, lr}
 800e532:	af00      	add	r7, sp, #0
	memset(uart_buffer, 0x00, sizeof(uart_buffer));
 800e534:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e538:	2100      	movs	r1, #0
 800e53a:	4809      	ldr	r0, [pc, #36]	; (800e560 <gps_init+0x30>)
 800e53c:	f000 fe92 	bl	800f264 <memset>
	uart_buffer_head = 0;
 800e540:	4b08      	ldr	r3, [pc, #32]	; (800e564 <gps_init+0x34>)
 800e542:	2200      	movs	r2, #0
 800e544:	601a      	str	r2, [r3, #0]
	uart_buffer_tail = 0;
 800e546:	4b08      	ldr	r3, [pc, #32]	; (800e568 <gps_init+0x38>)
 800e548:	2200      	movs	r2, #0
 800e54a:	601a      	str	r2, [r3, #0]
	pavel_gps_sost = 0;
 800e54c:	4b07      	ldr	r3, [pc, #28]	; (800e56c <gps_init+0x3c>)
 800e54e:	2200      	movs	r2, #0
 800e550:	601a      	str	r2, [r3, #0]

	pavel_gps_carret = 0;
 800e552:	4b07      	ldr	r3, [pc, #28]	; (800e570 <gps_init+0x40>)
 800e554:	2200      	movs	r2, #0
 800e556:	601a      	str	r2, [r3, #0]
	return 0;
 800e558:	2300      	movs	r3, #0
}
 800e55a:	4618      	mov	r0, r3
 800e55c:	bd80      	pop	{r7, pc}
 800e55e:	bf00      	nop
 800e560:	20002350 	.word	0x20002350
 800e564:	20002738 	.word	0x20002738
 800e568:	2000273c 	.word	0x2000273c
 800e56c:	20002740 	.word	0x20002740
 800e570:	20002870 	.word	0x20002870

0800e574 <gps_push_byte>:


int gps_push_byte(uint8_t byte)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b082      	sub	sp, #8
 800e578:	af00      	add	r7, sp, #0
 800e57a:	4603      	mov	r3, r0
 800e57c:	71fb      	strb	r3, [r7, #7]
	cb_push(byte);
 800e57e:	79fb      	ldrb	r3, [r7, #7]
 800e580:	4618      	mov	r0, r3
 800e582:	f7ff ff39 	bl	800e3f8 <cb_push>
	return 0;
 800e586:	2300      	movs	r3, #0
}
 800e588:	4618      	mov	r0, r3
 800e58a:	3708      	adds	r7, #8
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}

0800e590 <gps_work>:
		return pavel_gps_sost;
}


int gps_work()
{
 800e590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e594:	b094      	sub	sp, #80	; 0x50
 800e596:	af00      	add	r7, sp, #0
	uint8_t byte;
	for (schetchik = 0; schetchik < GPS_SYMBOLS_PER_ACTS; schetchik++)
 800e598:	4b50      	ldr	r3, [pc, #320]	; (800e6dc <gps_work+0x14c>)
 800e59a:	2200      	movs	r2, #0
 800e59c:	801a      	strh	r2, [r3, #0]
 800e59e:	e08f      	b.n	800e6c0 <gps_work+0x130>
	{
		if (cb_pop(&byte) == false)
 800e5a0:	f107 034d 	add.w	r3, r7, #77	; 0x4d
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f7ff ff53 	bl	800e450 <cb_pop>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	f083 0301 	eor.w	r3, r3, #1
 800e5b0:	b2db      	uxtb	r3, r3
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	f040 808b 	bne.w	800e6ce <gps_work+0x13e>
		{
			break;
		}
		gps_parse(byte);
 800e5b8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f7ff ff73 	bl	800e4a8 <gps_parse>
		if (pavel_gps_sost == 2)
 800e5c2:	4b47      	ldr	r3, [pc, #284]	; (800e6e0 <gps_work+0x150>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	2b02      	cmp	r3, #2
 800e5c8:	d174      	bne.n	800e6b4 <gps_work+0x124>
		{
			// Мы накопили сообщение. Можно его разбирать
			pavel_gps_sost = 0;
 800e5ca:	4b45      	ldr	r3, [pc, #276]	; (800e6e0 <gps_work+0x150>)
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	601a      	str	r2, [r3, #0]
			enum minmea_sentence_id id;
			id = minmea_sentence_id(pavel_gps_buffer);
 800e5d0:	4844      	ldr	r0, [pc, #272]	; (800e6e4 <gps_work+0x154>)
 800e5d2:	f7ff fdd7 	bl	800e184 <minmea_sentence_id>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			if (id != MINMEA_SENTENCE_GGA)
 800e5dc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800e5e0:	2b02      	cmp	r3, #2
 800e5e2:	d164      	bne.n	800e6ae <gps_work+0x11e>
			{
				continue;
			}

			struct minmea_sentence_gga gga;
			bool succes = minmea_parse_gga(&gga, pavel_gps_buffer);
 800e5e4:	463b      	mov	r3, r7
 800e5e6:	493f      	ldr	r1, [pc, #252]	; (800e6e4 <gps_work+0x154>)
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f7ff fe39 	bl	800e260 <minmea_parse_gga>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
			if (!succes)
 800e5f4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800e5f8:	f083 0301 	eor.w	r3, r3, #1
 800e5fc:	b2db      	uxtb	r3, r3
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d157      	bne.n	800e6b2 <gps_work+0x122>
			{
				continue;
			}
			time_us = gga.time.microseconds;
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	461a      	mov	r2, r3
 800e606:	4b38      	ldr	r3, [pc, #224]	; (800e6e8 <gps_work+0x158>)
 800e608:	601a      	str	r2, [r3, #0]
			time_s = 3600*gga.time.hours + 60*gga.time.minutes + gga.time.seconds;
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800e610:	fb02 f103 	mul.w	r1, r2, r3
 800e614:	687a      	ldr	r2, [r7, #4]
 800e616:	4613      	mov	r3, r2
 800e618:	011b      	lsls	r3, r3, #4
 800e61a:	1a9b      	subs	r3, r3, r2
 800e61c:	009b      	lsls	r3, r3, #2
 800e61e:	18ca      	adds	r2, r1, r3
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	4413      	add	r3, r2
 800e624:	461a      	mov	r2, r3
 800e626:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800e62a:	4930      	ldr	r1, [pc, #192]	; (800e6ec <gps_work+0x15c>)
 800e62c:	e9c1 2300 	strd	r2, r3, [r1]
			lat = minmea_tocoord(&gga.latitude);
 800e630:	463b      	mov	r3, r7
 800e632:	3310      	adds	r3, #16
 800e634:	4618      	mov	r0, r3
 800e636:	f7ff fe9b 	bl	800e370 <minmea_tocoord>
 800e63a:	eef0 7a40 	vmov.f32	s15, s0
 800e63e:	4b2c      	ldr	r3, [pc, #176]	; (800e6f0 <gps_work+0x160>)
 800e640:	edc3 7a00 	vstr	s15, [r3]
			lon = minmea_tocoord(&gga.longitude);
 800e644:	463b      	mov	r3, r7
 800e646:	3318      	adds	r3, #24
 800e648:	4618      	mov	r0, r3
 800e64a:	f7ff fe91 	bl	800e370 <minmea_tocoord>
 800e64e:	eef0 7a40 	vmov.f32	s15, s0
 800e652:	4b28      	ldr	r3, [pc, #160]	; (800e6f4 <gps_work+0x164>)
 800e654:	edc3 7a00 	vstr	s15, [r3]
			alt = minmea_tofloat(&gga.altitude);
 800e658:	463b      	mov	r3, r7
 800e65a:	3330      	adds	r3, #48	; 0x30
 800e65c:	4618      	mov	r0, r3
 800e65e:	f7ff fe63 	bl	800e328 <minmea_tofloat>
 800e662:	eef0 7a40 	vmov.f32	s15, s0
 800e666:	4b24      	ldr	r3, [pc, #144]	; (800e6f8 <gps_work+0x168>)
 800e668:	edc3 7a00 	vstr	s15, [r3]
			fix = gga.fix_quality;
 800e66c:	6a3b      	ldr	r3, [r7, #32]
 800e66e:	4a23      	ldr	r2, [pc, #140]	; (800e6fc <gps_work+0x16c>)
 800e670:	6013      	str	r3, [r2, #0]
			pos_cookie++;
 800e672:	4b23      	ldr	r3, [pc, #140]	; (800e700 <gps_work+0x170>)
 800e674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e678:	1c54      	adds	r4, r2, #1
 800e67a:	f143 0500 	adc.w	r5, r3, #0
 800e67e:	4b20      	ldr	r3, [pc, #128]	; (800e700 <gps_work+0x170>)
 800e680:	e9c3 4500 	strd	r4, r5, [r3]
			alt_cookie++;
 800e684:	4b1f      	ldr	r3, [pc, #124]	; (800e704 <gps_work+0x174>)
 800e686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e68a:	f112 0801 	adds.w	r8, r2, #1
 800e68e:	f143 0900 	adc.w	r9, r3, #0
 800e692:	4b1c      	ldr	r3, [pc, #112]	; (800e704 <gps_work+0x174>)
 800e694:	e9c3 8900 	strd	r8, r9, [r3]
			time_cookie++;
 800e698:	4b1b      	ldr	r3, [pc, #108]	; (800e708 <gps_work+0x178>)
 800e69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e69e:	f112 0a01 	adds.w	sl, r2, #1
 800e6a2:	f143 0b00 	adc.w	fp, r3, #0
 800e6a6:	4b18      	ldr	r3, [pc, #96]	; (800e708 <gps_work+0x178>)
 800e6a8:	e9c3 ab00 	strd	sl, fp, [r3]
 800e6ac:	e002      	b.n	800e6b4 <gps_work+0x124>
				continue;
 800e6ae:	bf00      	nop
 800e6b0:	e000      	b.n	800e6b4 <gps_work+0x124>
				continue;
 800e6b2:	bf00      	nop
	for (schetchik = 0; schetchik < GPS_SYMBOLS_PER_ACTS; schetchik++)
 800e6b4:	4b09      	ldr	r3, [pc, #36]	; (800e6dc <gps_work+0x14c>)
 800e6b6:	881b      	ldrh	r3, [r3, #0]
 800e6b8:	3301      	adds	r3, #1
 800e6ba:	b29a      	uxth	r2, r3
 800e6bc:	4b07      	ldr	r3, [pc, #28]	; (800e6dc <gps_work+0x14c>)
 800e6be:	801a      	strh	r2, [r3, #0]
 800e6c0:	4b06      	ldr	r3, [pc, #24]	; (800e6dc <gps_work+0x14c>)
 800e6c2:	881b      	ldrh	r3, [r3, #0]
 800e6c4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800e6c8:	f4ff af6a 	bcc.w	800e5a0 <gps_work+0x10>
 800e6cc:	e000      	b.n	800e6d0 <gps_work+0x140>
			break;
 800e6ce:	bf00      	nop

		}
	}
	return 0;
 800e6d0:	2300      	movs	r3, #0
}
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	3750      	adds	r7, #80	; 0x50
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e6dc:	200028ac 	.word	0x200028ac
 800e6e0:	20002740 	.word	0x20002740
 800e6e4:	20002744 	.word	0x20002744
 800e6e8:	200028a8 	.word	0x200028a8
 800e6ec:	200028a0 	.word	0x200028a0
 800e6f0:	20002880 	.word	0x20002880
 800e6f4:	20002884 	.word	0x20002884
 800e6f8:	20002890 	.word	0x20002890
 800e6fc:	2000234c 	.word	0x2000234c
 800e700:	20002878 	.word	0x20002878
 800e704:	20002888 	.word	0x20002888
 800e708:	20002898 	.word	0x20002898

0800e70c <gps_get_coords>:



int gps_get_coords(int64_t * cookie, float * lat_, float * lon_, float * alt_, int *fix_)
{
 800e70c:	b480      	push	{r7}
 800e70e:	b085      	sub	sp, #20
 800e710:	af00      	add	r7, sp, #0
 800e712:	60f8      	str	r0, [r7, #12]
 800e714:	60b9      	str	r1, [r7, #8]
 800e716:	607a      	str	r2, [r7, #4]
 800e718:	603b      	str	r3, [r7, #0]
	*cookie = pos_cookie;
 800e71a:	4b0e      	ldr	r3, [pc, #56]	; (800e754 <gps_get_coords+0x48>)
 800e71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e720:	68f9      	ldr	r1, [r7, #12]
 800e722:	e9c1 2300 	strd	r2, r3, [r1]
	*lat_ = lat;
 800e726:	4b0c      	ldr	r3, [pc, #48]	; (800e758 <gps_get_coords+0x4c>)
 800e728:	681a      	ldr	r2, [r3, #0]
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	601a      	str	r2, [r3, #0]
	*lon_ = lon;
 800e72e:	4b0b      	ldr	r3, [pc, #44]	; (800e75c <gps_get_coords+0x50>)
 800e730:	681a      	ldr	r2, [r3, #0]
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	601a      	str	r2, [r3, #0]
	*alt_ = alt;
 800e736:	4b0a      	ldr	r3, [pc, #40]	; (800e760 <gps_get_coords+0x54>)
 800e738:	681a      	ldr	r2, [r3, #0]
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	601a      	str	r2, [r3, #0]
	*fix_ = fix;
 800e73e:	4b09      	ldr	r3, [pc, #36]	; (800e764 <gps_get_coords+0x58>)
 800e740:	681a      	ldr	r2, [r3, #0]
 800e742:	69bb      	ldr	r3, [r7, #24]
 800e744:	601a      	str	r2, [r3, #0]
	return 0;
 800e746:	2300      	movs	r3, #0
}
 800e748:	4618      	mov	r0, r3
 800e74a:	3714      	adds	r7, #20
 800e74c:	46bd      	mov	sp, r7
 800e74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e752:	4770      	bx	lr
 800e754:	20002878 	.word	0x20002878
 800e758:	20002880 	.word	0x20002880
 800e75c:	20002884 	.word	0x20002884
 800e760:	20002890 	.word	0x20002890
 800e764:	2000234c 	.word	0x2000234c

0800e768 <lis3mdl_write>:
#ifdef HAL_SPI_MODULE_ENABLED
extern SPI_HandleTypeDef hspi1;


static int32_t lis3mdl_write(void * intf_ptr, uint8_t reg_addr, const uint8_t * data, uint16_t data_size)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b086      	sub	sp, #24
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	60f8      	str	r0, [r7, #12]
 800e770:	607a      	str	r2, [r7, #4]
 800e772:	461a      	mov	r2, r3
 800e774:	460b      	mov	r3, r1
 800e776:	72fb      	strb	r3, [r7, #11]
 800e778:	4613      	mov	r3, r2
 800e77a:	813b      	strh	r3, [r7, #8]

	struct lis_spi_intf* spi_intf = intf_ptr;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	617b      	str	r3, [r7, #20]

	reg_addr=reg_addr&~(1<<7);
 800e780:	7afb      	ldrb	r3, [r7, #11]
 800e782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e786:	b2db      	uxtb	r3, r3
 800e788:	72fb      	strb	r3, [r7, #11]
	reg_addr=reg_addr|(1<<6);
 800e78a:	7afb      	ldrb	r3, [r7, #11]
 800e78c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e790:	b2db      	uxtb	r3, r3
 800e792:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin (spi_intf->GPIO_Port,spi_intf->GPIO_Pin, GPIO_PIN_RESET);
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	6818      	ldr	r0, [r3, #0]
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	889b      	ldrh	r3, [r3, #4]
 800e79c:	2200      	movs	r2, #0
 800e79e:	4619      	mov	r1, r3
 800e7a0:	f7f7 fb88 	bl	8005eb4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi_intf->spi, &reg_addr, 1, HAL_MAX_DELAY);
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	6898      	ldr	r0, [r3, #8]
 800e7a8:	f107 010b 	add.w	r1, r7, #11
 800e7ac:	f04f 33ff 	mov.w	r3, #4294967295
 800e7b0:	2201      	movs	r2, #1
 800e7b2:	f7fa f9e1 	bl	8008b78 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(spi_intf->spi, (uint8_t*)data, data_size, HAL_MAX_DELAY);
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	6898      	ldr	r0, [r3, #8]
 800e7ba:	893a      	ldrh	r2, [r7, #8]
 800e7bc:	f04f 33ff 	mov.w	r3, #4294967295
 800e7c0:	6879      	ldr	r1, [r7, #4]
 800e7c2:	f7fa f9d9 	bl	8008b78 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_SET);
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	6818      	ldr	r0, [r3, #0]
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	889b      	ldrh	r3, [r3, #4]
 800e7ce:	2201      	movs	r2, #1
 800e7d0:	4619      	mov	r1, r3
 800e7d2:	f7f7 fb6f 	bl	8005eb4 <HAL_GPIO_WritePin>
	return 0;
 800e7d6:	2300      	movs	r3, #0
}
 800e7d8:	4618      	mov	r0, r3
 800e7da:	3718      	adds	r7, #24
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}

0800e7e0 <lis3mdl_read>:


static int32_t lis3mdl_read(void * intf_ptr, uint8_t reg_addr, uint8_t * data, uint16_t data_size)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b086      	sub	sp, #24
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	60f8      	str	r0, [r7, #12]
 800e7e8:	607a      	str	r2, [r7, #4]
 800e7ea:	461a      	mov	r2, r3
 800e7ec:	460b      	mov	r3, r1
 800e7ee:	72fb      	strb	r3, [r7, #11]
 800e7f0:	4613      	mov	r3, r2
 800e7f2:	813b      	strh	r3, [r7, #8]
	struct lis_spi_intf* spi_intf = intf_ptr;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	617b      	str	r3, [r7, #20]

	reg_addr=reg_addr|(1<<7);
 800e7f8:	7afb      	ldrb	r3, [r7, #11]
 800e7fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e7fe:	b2db      	uxtb	r3, r3
 800e800:	72fb      	strb	r3, [r7, #11]
	reg_addr=reg_addr|(1<<6);
 800e802:	7afb      	ldrb	r3, [r7, #11]
 800e804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e808:	b2db      	uxtb	r3, r3
 800e80a:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin (spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_RESET);
 800e80c:	697b      	ldr	r3, [r7, #20]
 800e80e:	6818      	ldr	r0, [r3, #0]
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	889b      	ldrh	r3, [r3, #4]
 800e814:	2200      	movs	r2, #0
 800e816:	4619      	mov	r1, r3
 800e818:	f7f7 fb4c 	bl	8005eb4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi_intf->spi, &reg_addr, 1, HAL_MAX_DELAY);
 800e81c:	697b      	ldr	r3, [r7, #20]
 800e81e:	6898      	ldr	r0, [r3, #8]
 800e820:	f107 010b 	add.w	r1, r7, #11
 800e824:	f04f 33ff 	mov.w	r3, #4294967295
 800e828:	2201      	movs	r2, #1
 800e82a:	f7fa f9a5 	bl	8008b78 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi_intf->spi, data, data_size, HAL_MAX_DELAY);
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	6898      	ldr	r0, [r3, #8]
 800e832:	893a      	ldrh	r2, [r7, #8]
 800e834:	f04f 33ff 	mov.w	r3, #4294967295
 800e838:	6879      	ldr	r1, [r7, #4]
 800e83a:	f7fa fad9 	bl	8008df0 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_SET);
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	6818      	ldr	r0, [r3, #0]
 800e842:	697b      	ldr	r3, [r7, #20]
 800e844:	889b      	ldrh	r3, [r3, #4]
 800e846:	2201      	movs	r2, #1
 800e848:	4619      	mov	r1, r3
 800e84a:	f7f7 fb33 	bl	8005eb4 <HAL_GPIO_WritePin>
	return 0;
 800e84e:	2300      	movs	r3, #0
}
 800e850:	4618      	mov	r0, r3
 800e852:	3718      	adds	r7, #24
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}

0800e858 <lisset>:



void lisset(stmdev_ctx_t *ctx, struct lis_spi_intf *spi_interface)
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b084      	sub	sp, #16
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
 800e860:	6039      	str	r1, [r7, #0]
// Настройка lismdl =-=-=-=-=-=-=-=-=-=-=-=-
	// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	ctx->handle = spi_interface;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	683a      	ldr	r2, [r7, #0]
 800e866:	609a      	str	r2, [r3, #8]
	ctx->read_reg = lis3mdl_read;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	4a1a      	ldr	r2, [pc, #104]	; (800e8d4 <lisset+0x7c>)
 800e86c:	605a      	str	r2, [r3, #4]
	ctx->write_reg = lis3mdl_write;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	4a19      	ldr	r2, [pc, #100]	; (800e8d8 <lisset+0x80>)
 800e872:	601a      	str	r2, [r3, #0]

	// Это придется делать прямо сразу еще до всего
	// так как иначе он с ним общаться не сможет (судя по доке по-крайней мере)
	lis3mdl_spi_mode_set(ctx, LIS3MDL_SPI_3_WIRE);
 800e874:	2101      	movs	r1, #1
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f000 fa09 	bl	800ec8e <lis3mdl_spi_mode_set>

	uint8_t whoami_mag = 0x00;
 800e87c:	2300      	movs	r3, #0
 800e87e:	73fb      	strb	r3, [r7, #15]
	lis3mdl_device_id_get(ctx, &whoami_mag);
 800e880:	f107 030f 	add.w	r3, r7, #15
 800e884:	4619      	mov	r1, r3
 800e886:	6878      	ldr	r0, [r7, #4]
 800e888:	f000 f9ca 	bl	800ec20 <lis3mdl_device_id_get>

	// Убедились что датчик тот который нам нужен
	// Сбросим его
	lis3mdl_reset_set(ctx, PROPERTY_ENABLE);
 800e88c:	2101      	movs	r1, #1
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f000 f9d7 	bl	800ec42 <lis3mdl_reset_set>
	HAL_Delay(100);
 800e894:	2064      	movs	r0, #100	; 0x64
 800e896:	f7f6 ff57 	bl	8005748 <HAL_Delay>

	// Настраиваем
	// Обновление данных только целыми порциями
	lis3mdl_block_data_update_set(ctx, PROPERTY_ENABLE);
 800e89a:	2101      	movs	r1, #1
 800e89c:	6878      	ldr	r0, [r7, #4]
 800e89e:	f000 f92b 	bl	800eaf8 <lis3mdl_block_data_update_set>
	// Без экономии энергии
	lis3mdl_fast_low_power_set(ctx, PROPERTY_DISABLE);
 800e8a2:	2100      	movs	r1, #0
 800e8a4:	6878      	ldr	r0, [r7, #4]
 800e8a6:	f000 f901 	bl	800eaac <lis3mdl_fast_low_power_set>
	// Диапазон измерения (внимание LSM303 умеет только 16G)
	lis3mdl_full_scale_set(ctx, LIS3MDL_16_GAUSS);
 800e8aa:	2103      	movs	r1, #3
 800e8ac:	6878      	ldr	r0, [r7, #4]
 800e8ae:	f000 f8b1 	bl	800ea14 <lis3mdl_full_scale_set>
	// Частота опроса
	// внимание для LSM303 запрещены значения
	// LIS3MDL_LP_1kHz, LIS3MDL_MP_560Hz, LIS3MDL_HP_300Hz, LIS3MDL_UHP_155Hz
	lis3mdl_data_rate_set(ctx, LIS3MDL_UHP_80Hz);
 800e8b2:	213e      	movs	r1, #62	; 0x3e
 800e8b4:	6878      	ldr	r0, [r7, #4]
 800e8b6:	f000 f841 	bl	800e93c <lis3mdl_data_rate_set>
	// Включаем температурный сенсор
	lis3mdl_temperature_meas_set(ctx, PROPERTY_ENABLE);
 800e8ba:	2101      	movs	r1, #1
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f000 f883 	bl	800e9c8 <lis3mdl_temperature_meas_set>
	// режим работы
	lis3mdl_operating_mode_set(ctx, LIS3MDL_CONTINUOUS_MODE);
 800e8c2:	2100      	movs	r1, #0
 800e8c4:	6878      	ldr	r0, [r7, #4]
 800e8c6:	f000 f8cb 	bl	800ea60 <lis3mdl_operating_mode_set>
}
 800e8ca:	bf00      	nop
 800e8cc:	3710      	adds	r7, #16
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}
 800e8d2:	bf00      	nop
 800e8d4:	0800e7e1 	.word	0x0800e7e1
 800e8d8:	0800e769 	.word	0x0800e769

0800e8dc <lis3mdl_read_reg>:
  *
  */
int32_t lis3mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800e8dc:	b590      	push	{r4, r7, lr}
 800e8de:	b087      	sub	sp, #28
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	60f8      	str	r0, [r7, #12]
 800e8e4:	607a      	str	r2, [r7, #4]
 800e8e6:	461a      	mov	r2, r3
 800e8e8:	460b      	mov	r3, r1
 800e8ea:	72fb      	strb	r3, [r7, #11]
 800e8ec:	4613      	mov	r3, r2
 800e8ee:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	685c      	ldr	r4, [r3, #4]
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	6898      	ldr	r0, [r3, #8]
 800e8f8:	893b      	ldrh	r3, [r7, #8]
 800e8fa:	7af9      	ldrb	r1, [r7, #11]
 800e8fc:	687a      	ldr	r2, [r7, #4]
 800e8fe:	47a0      	blx	r4
 800e900:	6178      	str	r0, [r7, #20]

  return ret;
 800e902:	697b      	ldr	r3, [r7, #20]
}
 800e904:	4618      	mov	r0, r3
 800e906:	371c      	adds	r7, #28
 800e908:	46bd      	mov	sp, r7
 800e90a:	bd90      	pop	{r4, r7, pc}

0800e90c <lis3mdl_write_reg>:
  *
  */
int32_t lis3mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800e90c:	b590      	push	{r4, r7, lr}
 800e90e:	b087      	sub	sp, #28
 800e910:	af00      	add	r7, sp, #0
 800e912:	60f8      	str	r0, [r7, #12]
 800e914:	607a      	str	r2, [r7, #4]
 800e916:	461a      	mov	r2, r3
 800e918:	460b      	mov	r3, r1
 800e91a:	72fb      	strb	r3, [r7, #11]
 800e91c:	4613      	mov	r3, r2
 800e91e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	681c      	ldr	r4, [r3, #0]
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	6898      	ldr	r0, [r3, #8]
 800e928:	893b      	ldrh	r3, [r7, #8]
 800e92a:	7af9      	ldrb	r1, [r7, #11]
 800e92c:	687a      	ldr	r2, [r7, #4]
 800e92e:	47a0      	blx	r4
 800e930:	6178      	str	r0, [r7, #20]

  return ret;
 800e932:	697b      	ldr	r3, [r7, #20]
}
 800e934:	4618      	mov	r0, r3
 800e936:	371c      	adds	r7, #28
 800e938:	46bd      	mov	sp, r7
 800e93a:	bd90      	pop	{r4, r7, pc}

0800e93c <lis3mdl_data_rate_set>:
  * @param  val         change the values of om in reg CTRL_REG1
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_data_rate_set(stmdev_ctx_t *ctx, lis3mdl_om_t val)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b086      	sub	sp, #24
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
 800e944:	460b      	mov	r3, r1
 800e946:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg1_t ctrl_reg1;
  lis3mdl_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800e948:	f107 0210 	add.w	r2, r7, #16
 800e94c:	2301      	movs	r3, #1
 800e94e:	2120      	movs	r1, #32
 800e950:	6878      	ldr	r0, [r7, #4]
 800e952:	f7ff ffc3 	bl	800e8dc <lis3mdl_read_reg>
 800e956:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800e958:	697b      	ldr	r3, [r7, #20]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d10f      	bne.n	800e97e <lis3mdl_data_rate_set+0x42>
  {
    ctrl_reg1.om = (uint8_t)val;
 800e95e:	78fb      	ldrb	r3, [r7, #3]
 800e960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e964:	b2da      	uxtb	r2, r3
 800e966:	7c3b      	ldrb	r3, [r7, #16]
 800e968:	f362 0346 	bfi	r3, r2, #1, #6
 800e96c:	743b      	strb	r3, [r7, #16]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800e96e:	f107 0210 	add.w	r2, r7, #16
 800e972:	2301      	movs	r3, #1
 800e974:	2120      	movs	r1, #32
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	f7ff ffc8 	bl	800e90c <lis3mdl_write_reg>
 800e97c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800e97e:	697b      	ldr	r3, [r7, #20]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d107      	bne.n	800e994 <lis3mdl_data_rate_set+0x58>
  {
    /* set mode also for z axis, ctrl_reg4 -> omz */
    ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 800e984:	f107 020c 	add.w	r2, r7, #12
 800e988:	2301      	movs	r3, #1
 800e98a:	2123      	movs	r1, #35	; 0x23
 800e98c:	6878      	ldr	r0, [r7, #4]
 800e98e:	f7ff ffa5 	bl	800e8dc <lis3mdl_read_reg>
 800e992:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800e994:	697b      	ldr	r3, [r7, #20]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d111      	bne.n	800e9be <lis3mdl_data_rate_set+0x82>
  {
    ctrl_reg4.omz = (uint8_t)(((uint8_t) val >> 4) & 0x03U);
 800e99a:	78fb      	ldrb	r3, [r7, #3]
 800e99c:	091b      	lsrs	r3, r3, #4
 800e99e:	b2db      	uxtb	r3, r3
 800e9a0:	f003 0303 	and.w	r3, r3, #3
 800e9a4:	b2da      	uxtb	r2, r3
 800e9a6:	7b3b      	ldrb	r3, [r7, #12]
 800e9a8:	f362 0383 	bfi	r3, r2, #2, #2
 800e9ac:	733b      	strb	r3, [r7, #12]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG4,
 800e9ae:	f107 020c 	add.w	r2, r7, #12
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	2123      	movs	r1, #35	; 0x23
 800e9b6:	6878      	ldr	r0, [r7, #4]
 800e9b8:	f7ff ffa8 	bl	800e90c <lis3mdl_write_reg>
 800e9bc:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 800e9be:	697b      	ldr	r3, [r7, #20]
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3718      	adds	r7, #24
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}

0800e9c8 <lis3mdl_temperature_meas_set>:
  * @param  val      change the values of temp_en in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_temperature_meas_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b084      	sub	sp, #16
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
 800e9d0:	460b      	mov	r3, r1
 800e9d2:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800e9d4:	f107 0208 	add.w	r2, r7, #8
 800e9d8:	2301      	movs	r3, #1
 800e9da:	2120      	movs	r1, #32
 800e9dc:	6878      	ldr	r0, [r7, #4]
 800e9de:	f7ff ff7d 	bl	800e8dc <lis3mdl_read_reg>
 800e9e2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d10f      	bne.n	800ea0a <lis3mdl_temperature_meas_set+0x42>
  {
    ctrl_reg1.temp_en = val;
 800e9ea:	78fb      	ldrb	r3, [r7, #3]
 800e9ec:	f003 0301 	and.w	r3, r3, #1
 800e9f0:	b2da      	uxtb	r2, r3
 800e9f2:	7a3b      	ldrb	r3, [r7, #8]
 800e9f4:	f362 13c7 	bfi	r3, r2, #7, #1
 800e9f8:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800e9fa:	f107 0208 	add.w	r2, r7, #8
 800e9fe:	2301      	movs	r3, #1
 800ea00:	2120      	movs	r1, #32
 800ea02:	6878      	ldr	r0, [r7, #4]
 800ea04:	f7ff ff82 	bl	800e90c <lis3mdl_write_reg>
 800ea08:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ea0a:	68fb      	ldr	r3, [r7, #12]
}
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	3710      	adds	r7, #16
 800ea10:	46bd      	mov	sp, r7
 800ea12:	bd80      	pop	{r7, pc}

0800ea14 <lis3mdl_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_full_scale_set(stmdev_ctx_t *ctx, lis3mdl_fs_t val)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b084      	sub	sp, #16
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
 800ea1c:	460b      	mov	r3, r1
 800ea1e:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800ea20:	f107 0208 	add.w	r2, r7, #8
 800ea24:	2301      	movs	r3, #1
 800ea26:	2121      	movs	r1, #33	; 0x21
 800ea28:	6878      	ldr	r0, [r7, #4]
 800ea2a:	f7ff ff57 	bl	800e8dc <lis3mdl_read_reg>
 800ea2e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d10f      	bne.n	800ea56 <lis3mdl_full_scale_set+0x42>
  {
    ctrl_reg2.fs = (uint8_t)val;
 800ea36:	78fb      	ldrb	r3, [r7, #3]
 800ea38:	f003 0303 	and.w	r3, r3, #3
 800ea3c:	b2da      	uxtb	r2, r3
 800ea3e:	7a3b      	ldrb	r3, [r7, #8]
 800ea40:	f362 1346 	bfi	r3, r2, #5, #2
 800ea44:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800ea46:	f107 0208 	add.w	r2, r7, #8
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	2121      	movs	r1, #33	; 0x21
 800ea4e:	6878      	ldr	r0, [r7, #4]
 800ea50:	f7ff ff5c 	bl	800e90c <lis3mdl_write_reg>
 800ea54:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ea56:	68fb      	ldr	r3, [r7, #12]
}
 800ea58:	4618      	mov	r0, r3
 800ea5a:	3710      	adds	r7, #16
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}

0800ea60 <lis3mdl_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis3mdl_md_t val)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b084      	sub	sp, #16
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
 800ea68:	460b      	mov	r3, r1
 800ea6a:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg3_t ctrl_reg3;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 800ea6c:	f107 0208 	add.w	r2, r7, #8
 800ea70:	2301      	movs	r3, #1
 800ea72:	2122      	movs	r1, #34	; 0x22
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f7ff ff31 	bl	800e8dc <lis3mdl_read_reg>
 800ea7a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d10f      	bne.n	800eaa2 <lis3mdl_operating_mode_set+0x42>
  {
    ctrl_reg3.md = (uint8_t)val;
 800ea82:	78fb      	ldrb	r3, [r7, #3]
 800ea84:	f003 0303 	and.w	r3, r3, #3
 800ea88:	b2da      	uxtb	r2, r3
 800ea8a:	7a3b      	ldrb	r3, [r7, #8]
 800ea8c:	f362 0301 	bfi	r3, r2, #0, #2
 800ea90:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 800ea92:	f107 0208 	add.w	r2, r7, #8
 800ea96:	2301      	movs	r3, #1
 800ea98:	2122      	movs	r1, #34	; 0x22
 800ea9a:	6878      	ldr	r0, [r7, #4]
 800ea9c:	f7ff ff36 	bl	800e90c <lis3mdl_write_reg>
 800eaa0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800eaa2:	68fb      	ldr	r3, [r7, #12]
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3710      	adds	r7, #16
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}

0800eaac <lis3mdl_fast_low_power_set>:
  * @param  val      change the values of lp in reg CTRL_REG3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_fast_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b084      	sub	sp, #16
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
 800eab4:	460b      	mov	r3, r1
 800eab6:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg3_t ctrl_reg3;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 800eab8:	f107 0208 	add.w	r2, r7, #8
 800eabc:	2301      	movs	r3, #1
 800eabe:	2122      	movs	r1, #34	; 0x22
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f7ff ff0b 	bl	800e8dc <lis3mdl_read_reg>
 800eac6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d10f      	bne.n	800eaee <lis3mdl_fast_low_power_set+0x42>
  {
    ctrl_reg3.lp = val;
 800eace:	78fb      	ldrb	r3, [r7, #3]
 800ead0:	f003 0301 	and.w	r3, r3, #1
 800ead4:	b2da      	uxtb	r2, r3
 800ead6:	7a3b      	ldrb	r3, [r7, #8]
 800ead8:	f362 1345 	bfi	r3, r2, #5, #1
 800eadc:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 800eade:	f107 0208 	add.w	r2, r7, #8
 800eae2:	2301      	movs	r3, #1
 800eae4:	2122      	movs	r1, #34	; 0x22
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f7ff ff10 	bl	800e90c <lis3mdl_write_reg>
 800eaec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800eaee:	68fb      	ldr	r3, [r7, #12]
}
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	3710      	adds	r7, #16
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bd80      	pop	{r7, pc}

0800eaf8 <lis3mdl_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG5
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b084      	sub	sp, #16
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
 800eb00:	460b      	mov	r3, r1
 800eb02:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg5_t ctrl_reg5;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 800eb04:	f107 0208 	add.w	r2, r7, #8
 800eb08:	2301      	movs	r3, #1
 800eb0a:	2124      	movs	r1, #36	; 0x24
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	f7ff fee5 	bl	800e8dc <lis3mdl_read_reg>
 800eb12:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d10f      	bne.n	800eb3a <lis3mdl_block_data_update_set+0x42>
  {
    ctrl_reg5.bdu = val;
 800eb1a:	78fb      	ldrb	r3, [r7, #3]
 800eb1c:	f003 0301 	and.w	r3, r3, #1
 800eb20:	b2da      	uxtb	r2, r3
 800eb22:	7a3b      	ldrb	r3, [r7, #8]
 800eb24:	f362 1386 	bfi	r3, r2, #6, #1
 800eb28:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 800eb2a:	f107 0208 	add.w	r2, r7, #8
 800eb2e:	2301      	movs	r3, #1
 800eb30:	2124      	movs	r1, #36	; 0x24
 800eb32:	6878      	ldr	r0, [r7, #4]
 800eb34:	f7ff feea 	bl	800e90c <lis3mdl_write_reg>
 800eb38:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
}
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	3710      	adds	r7, #16
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd80      	pop	{r7, pc}

0800eb44 <lis3mdl_magnetic_raw_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b086      	sub	sp, #24
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
 800eb4c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_OUT_X_L, (uint8_t *) buff, 6);
 800eb4e:	f107 020c 	add.w	r2, r7, #12
 800eb52:	2306      	movs	r3, #6
 800eb54:	2128      	movs	r1, #40	; 0x28
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	f7ff fec0 	bl	800e8dc <lis3mdl_read_reg>
 800eb5c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800eb5e:	7b7b      	ldrb	r3, [r7, #13]
 800eb60:	b21a      	sxth	r2, r3
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eb6c:	b29b      	uxth	r3, r3
 800eb6e:	021b      	lsls	r3, r3, #8
 800eb70:	b29a      	uxth	r2, r3
 800eb72:	7b3b      	ldrb	r3, [r7, #12]
 800eb74:	b29b      	uxth	r3, r3
 800eb76:	4413      	add	r3, r2
 800eb78:	b29b      	uxth	r3, r3
 800eb7a:	b21a      	sxth	r2, r3
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800eb80:	7bfa      	ldrb	r2, [r7, #15]
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	3302      	adds	r3, #2
 800eb86:	b212      	sxth	r2, r2
 800eb88:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	3302      	adds	r3, #2
 800eb8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eb92:	b29b      	uxth	r3, r3
 800eb94:	021b      	lsls	r3, r3, #8
 800eb96:	b29a      	uxth	r2, r3
 800eb98:	7bbb      	ldrb	r3, [r7, #14]
 800eb9a:	b29b      	uxth	r3, r3
 800eb9c:	4413      	add	r3, r2
 800eb9e:	b29a      	uxth	r2, r3
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	3302      	adds	r3, #2
 800eba4:	b212      	sxth	r2, r2
 800eba6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800eba8:	7c7a      	ldrb	r2, [r7, #17]
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	3304      	adds	r3, #4
 800ebae:	b212      	sxth	r2, r2
 800ebb0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800ebb2:	683b      	ldr	r3, [r7, #0]
 800ebb4:	3304      	adds	r3, #4
 800ebb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ebba:	b29b      	uxth	r3, r3
 800ebbc:	021b      	lsls	r3, r3, #8
 800ebbe:	b29a      	uxth	r2, r3
 800ebc0:	7c3b      	ldrb	r3, [r7, #16]
 800ebc2:	b29b      	uxth	r3, r3
 800ebc4:	4413      	add	r3, r2
 800ebc6:	b29a      	uxth	r2, r3
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	3304      	adds	r3, #4
 800ebcc:	b212      	sxth	r2, r2
 800ebce:	801a      	strh	r2, [r3, #0]

  return ret;
 800ebd0:	697b      	ldr	r3, [r7, #20]
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	3718      	adds	r7, #24
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}

0800ebda <lis3mdl_temperature_raw_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800ebda:	b580      	push	{r7, lr}
 800ebdc:	b084      	sub	sp, #16
 800ebde:	af00      	add	r7, sp, #0
 800ebe0:	6078      	str	r0, [r7, #4]
 800ebe2:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_TEMP_OUT_L, (uint8_t *) buff, 2);
 800ebe4:	f107 0208 	add.w	r2, r7, #8
 800ebe8:	2302      	movs	r3, #2
 800ebea:	212e      	movs	r1, #46	; 0x2e
 800ebec:	6878      	ldr	r0, [r7, #4]
 800ebee:	f7ff fe75 	bl	800e8dc <lis3mdl_read_reg>
 800ebf2:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800ebf4:	7a7b      	ldrb	r3, [r7, #9]
 800ebf6:	b21a      	sxth	r2, r3
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ec02:	b29b      	uxth	r3, r3
 800ec04:	021b      	lsls	r3, r3, #8
 800ec06:	b29a      	uxth	r2, r3
 800ec08:	7a3b      	ldrb	r3, [r7, #8]
 800ec0a:	b29b      	uxth	r3, r3
 800ec0c:	4413      	add	r3, r2
 800ec0e:	b29b      	uxth	r3, r3
 800ec10:	b21a      	sxth	r2, r3
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	801a      	strh	r2, [r3, #0]

  return ret;
 800ec16:	68fb      	ldr	r3, [r7, #12]
}
 800ec18:	4618      	mov	r0, r3
 800ec1a:	3710      	adds	r7, #16
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd80      	pop	{r7, pc}

0800ec20 <lis3mdl_device_id_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b084      	sub	sp, #16
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
 800ec28:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_WHO_AM_I, (uint8_t *) buff, 1);
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	683a      	ldr	r2, [r7, #0]
 800ec2e:	210f      	movs	r1, #15
 800ec30:	6878      	ldr	r0, [r7, #4]
 800ec32:	f7ff fe53 	bl	800e8dc <lis3mdl_read_reg>
 800ec36:	60f8      	str	r0, [r7, #12]

  return ret;
 800ec38:	68fb      	ldr	r3, [r7, #12]
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	3710      	adds	r7, #16
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}

0800ec42 <lis3mdl_reset_set>:
  * @param  val      change the values of soft_rst in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800ec42:	b580      	push	{r7, lr}
 800ec44:	b084      	sub	sp, #16
 800ec46:	af00      	add	r7, sp, #0
 800ec48:	6078      	str	r0, [r7, #4]
 800ec4a:	460b      	mov	r3, r1
 800ec4c:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800ec4e:	f107 0208 	add.w	r2, r7, #8
 800ec52:	2301      	movs	r3, #1
 800ec54:	2121      	movs	r1, #33	; 0x21
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	f7ff fe40 	bl	800e8dc <lis3mdl_read_reg>
 800ec5c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d10f      	bne.n	800ec84 <lis3mdl_reset_set+0x42>
  {
    ctrl_reg2.soft_rst = val;
 800ec64:	78fb      	ldrb	r3, [r7, #3]
 800ec66:	f003 0301 	and.w	r3, r3, #1
 800ec6a:	b2da      	uxtb	r2, r3
 800ec6c:	7a3b      	ldrb	r3, [r7, #8]
 800ec6e:	f362 0382 	bfi	r3, r2, #2, #1
 800ec72:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800ec74:	f107 0208 	add.w	r2, r7, #8
 800ec78:	2301      	movs	r3, #1
 800ec7a:	2121      	movs	r1, #33	; 0x21
 800ec7c:	6878      	ldr	r0, [r7, #4]
 800ec7e:	f7ff fe45 	bl	800e90c <lis3mdl_write_reg>
 800ec82:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ec84:	68fb      	ldr	r3, [r7, #12]
}
 800ec86:	4618      	mov	r0, r3
 800ec88:	3710      	adds	r7, #16
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}

0800ec8e <lis3mdl_spi_mode_set>:
  * @param  val      change the values of sim in reg CTRL_REG3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_spi_mode_set(stmdev_ctx_t *ctx, lis3mdl_sim_t val)
{
 800ec8e:	b580      	push	{r7, lr}
 800ec90:	b084      	sub	sp, #16
 800ec92:	af00      	add	r7, sp, #0
 800ec94:	6078      	str	r0, [r7, #4]
 800ec96:	460b      	mov	r3, r1
 800ec98:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg3_t ctrl_reg3;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 800ec9a:	f107 0208 	add.w	r2, r7, #8
 800ec9e:	2301      	movs	r3, #1
 800eca0:	2122      	movs	r1, #34	; 0x22
 800eca2:	6878      	ldr	r0, [r7, #4]
 800eca4:	f7ff fe1a 	bl	800e8dc <lis3mdl_read_reg>
 800eca8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d10f      	bne.n	800ecd0 <lis3mdl_spi_mode_set+0x42>
  {
    ctrl_reg3.sim = (uint8_t)val;
 800ecb0:	78fb      	ldrb	r3, [r7, #3]
 800ecb2:	f003 0301 	and.w	r3, r3, #1
 800ecb6:	b2da      	uxtb	r2, r3
 800ecb8:	7a3b      	ldrb	r3, [r7, #8]
 800ecba:	f362 0382 	bfi	r3, r2, #2, #1
 800ecbe:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 800ecc0:	f107 0208 	add.w	r2, r7, #8
 800ecc4:	2301      	movs	r3, #1
 800ecc6:	2122      	movs	r1, #34	; 0x22
 800ecc8:	6878      	ldr	r0, [r7, #4]
 800ecca:	f7ff fe1f 	bl	800e90c <lis3mdl_write_reg>
 800ecce:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3710      	adds	r7, #16
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}

0800ecda <lsmd6s3_write>:

#ifdef HAL_SPI_MODULE_ENABLED
extern SPI_HandleTypeDef hspi1;

int32_t lsmd6s3_write(void * intf_ptr, uint8_t reg_addr, const uint8_t * data, uint16_t data_size)
{
 800ecda:	b580      	push	{r7, lr}
 800ecdc:	b086      	sub	sp, #24
 800ecde:	af00      	add	r7, sp, #0
 800ece0:	60f8      	str	r0, [r7, #12]
 800ece2:	607a      	str	r2, [r7, #4]
 800ece4:	461a      	mov	r2, r3
 800ece6:	460b      	mov	r3, r1
 800ece8:	72fb      	strb	r3, [r7, #11]
 800ecea:	4613      	mov	r3, r2
 800ecec:	813b      	strh	r3, [r7, #8]
	struct lsm_spi_intf* spi_intf = intf_ptr;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	617b      	str	r3, [r7, #20]


	reg_addr=reg_addr&~(1<<7);
 800ecf2:	7afb      	ldrb	r3, [r7, #11]
 800ecf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ecf8:	b2db      	uxtb	r3, r3
 800ecfa:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin (spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_RESET);
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	6818      	ldr	r0, [r3, #0]
 800ed00:	697b      	ldr	r3, [r7, #20]
 800ed02:	889b      	ldrh	r3, [r3, #4]
 800ed04:	2200      	movs	r2, #0
 800ed06:	4619      	mov	r1, r3
 800ed08:	f7f7 f8d4 	bl	8005eb4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi_intf->spi, &reg_addr, 1, HAL_MAX_DELAY);
 800ed0c:	697b      	ldr	r3, [r7, #20]
 800ed0e:	6898      	ldr	r0, [r3, #8]
 800ed10:	f107 010b 	add.w	r1, r7, #11
 800ed14:	f04f 33ff 	mov.w	r3, #4294967295
 800ed18:	2201      	movs	r2, #1
 800ed1a:	f7f9 ff2d 	bl	8008b78 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(spi_intf->spi, (uint8_t*)data, data_size, HAL_MAX_DELAY);
 800ed1e:	697b      	ldr	r3, [r7, #20]
 800ed20:	6898      	ldr	r0, [r3, #8]
 800ed22:	893a      	ldrh	r2, [r7, #8]
 800ed24:	f04f 33ff 	mov.w	r3, #4294967295
 800ed28:	6879      	ldr	r1, [r7, #4]
 800ed2a:	f7f9 ff25 	bl	8008b78 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_SET);
 800ed2e:	697b      	ldr	r3, [r7, #20]
 800ed30:	6818      	ldr	r0, [r3, #0]
 800ed32:	697b      	ldr	r3, [r7, #20]
 800ed34:	889b      	ldrh	r3, [r3, #4]
 800ed36:	2201      	movs	r2, #1
 800ed38:	4619      	mov	r1, r3
 800ed3a:	f7f7 f8bb 	bl	8005eb4 <HAL_GPIO_WritePin>
	return 0;
 800ed3e:	2300      	movs	r3, #0
}
 800ed40:	4618      	mov	r0, r3
 800ed42:	3718      	adds	r7, #24
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}

0800ed48 <lsm6ds3_read>:


int32_t lsm6ds3_read(void * intf_ptr, uint8_t reg_addr, uint8_t * data, uint16_t data_size)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b086      	sub	sp, #24
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	60f8      	str	r0, [r7, #12]
 800ed50:	607a      	str	r2, [r7, #4]
 800ed52:	461a      	mov	r2, r3
 800ed54:	460b      	mov	r3, r1
 800ed56:	72fb      	strb	r3, [r7, #11]
 800ed58:	4613      	mov	r3, r2
 800ed5a:	813b      	strh	r3, [r7, #8]
	struct lsm_spi_intf* spi_intf = intf_ptr;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	617b      	str	r3, [r7, #20]


	reg_addr=reg_addr|(1<<7);
 800ed60:	7afb      	ldrb	r3, [r7, #11]
 800ed62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ed66:	b2db      	uxtb	r3, r3
 800ed68:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin (spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_RESET);
 800ed6a:	697b      	ldr	r3, [r7, #20]
 800ed6c:	6818      	ldr	r0, [r3, #0]
 800ed6e:	697b      	ldr	r3, [r7, #20]
 800ed70:	889b      	ldrh	r3, [r3, #4]
 800ed72:	2200      	movs	r2, #0
 800ed74:	4619      	mov	r1, r3
 800ed76:	f7f7 f89d 	bl	8005eb4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi_intf->spi, &reg_addr, 1, HAL_MAX_DELAY);
 800ed7a:	697b      	ldr	r3, [r7, #20]
 800ed7c:	6898      	ldr	r0, [r3, #8]
 800ed7e:	f107 010b 	add.w	r1, r7, #11
 800ed82:	f04f 33ff 	mov.w	r3, #4294967295
 800ed86:	2201      	movs	r2, #1
 800ed88:	f7f9 fef6 	bl	8008b78 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi_intf->spi, data, data_size, HAL_MAX_DELAY);
 800ed8c:	697b      	ldr	r3, [r7, #20]
 800ed8e:	6898      	ldr	r0, [r3, #8]
 800ed90:	893a      	ldrh	r2, [r7, #8]
 800ed92:	f04f 33ff 	mov.w	r3, #4294967295
 800ed96:	6879      	ldr	r1, [r7, #4]
 800ed98:	f7fa f82a 	bl	8008df0 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(spi_intf->GPIO_Port, spi_intf->GPIO_Pin, GPIO_PIN_SET);
 800ed9c:	697b      	ldr	r3, [r7, #20]
 800ed9e:	6818      	ldr	r0, [r3, #0]
 800eda0:	697b      	ldr	r3, [r7, #20]
 800eda2:	889b      	ldrh	r3, [r3, #4]
 800eda4:	2201      	movs	r2, #1
 800eda6:	4619      	mov	r1, r3
 800eda8:	f7f7 f884 	bl	8005eb4 <HAL_GPIO_WritePin>
	return 0;
 800edac:	2300      	movs	r3, #0
}
 800edae:	4618      	mov	r0, r3
 800edb0:	3718      	adds	r7, #24
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}
	...

0800edb8 <lsmset>:
	return 0;
}


void lsmset(stmdev_ctx_t *ctx, struct lsm_spi_intf *spi_interface)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b084      	sub	sp, #16
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
 800edc0:	6039      	str	r1, [r7, #0]
	// Настройка lsm6ds3 =-=-=-=-=-=-=-=-=-=-=-=-
		// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

		ctx->handle = spi_interface;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	683a      	ldr	r2, [r7, #0]
 800edc6:	609a      	str	r2, [r3, #8]
		ctx->read_reg = lsm6ds3_read;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	4a14      	ldr	r2, [pc, #80]	; (800ee1c <lsmset+0x64>)
 800edcc:	605a      	str	r2, [r3, #4]
		ctx->write_reg = lsmd6s3_write;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	4a13      	ldr	r2, [pc, #76]	; (800ee20 <lsmset+0x68>)
 800edd2:	601a      	str	r2, [r3, #0]

		uint8_t whoami = 0x00;
 800edd4:	2300      	movs	r3, #0
 800edd6:	73fb      	strb	r3, [r7, #15]
		lsm6ds3_device_id_get(ctx, &whoami);
 800edd8:	f107 030f 	add.w	r3, r7, #15
 800eddc:	4619      	mov	r1, r3
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	f000 f9a1 	bl	800f126 <lsm6ds3_device_id_get>

		lsm6ds3_reset_set(ctx, PROPERTY_ENABLE);
 800ede4:	2101      	movs	r1, #1
 800ede6:	6878      	ldr	r0, [r7, #4]
 800ede8:	f000 f9ae 	bl	800f148 <lsm6ds3_reset_set>
		HAL_Delay(100);
 800edec:	2064      	movs	r0, #100	; 0x64
 800edee:	f7f6 fcab 	bl	8005748 <HAL_Delay>

		lsm6ds3_xl_full_scale_set(ctx, LSM6DS3_16g);
 800edf2:	2101      	movs	r1, #1
 800edf4:	6878      	ldr	r0, [r7, #4]
 800edf6:	f000 f845 	bl	800ee84 <lsm6ds3_xl_full_scale_set>
		lsm6ds3_xl_data_rate_set(ctx, LSM6DS3_XL_ODR_104Hz);
 800edfa:	2104      	movs	r1, #4
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f000 f867 	bl	800eed0 <lsm6ds3_xl_data_rate_set>

		lsm6ds3_gy_full_scale_set(ctx, LSM6DS3_2000dps);
 800ee02:	2106      	movs	r1, #6
 800ee04:	6878      	ldr	r0, [r7, #4]
 800ee06:	f000 f889 	bl	800ef1c <lsm6ds3_gy_full_scale_set>
		lsm6ds3_gy_data_rate_set(ctx, LSM6DS3_GY_ODR_104Hz);
 800ee0a:	2104      	movs	r1, #4
 800ee0c:	6878      	ldr	r0, [r7, #4]
 800ee0e:	f000 f8ab 	bl	800ef68 <lsm6ds3_gy_data_rate_set>
}
 800ee12:	bf00      	nop
 800ee14:	3710      	adds	r7, #16
 800ee16:	46bd      	mov	sp, r7
 800ee18:	bd80      	pop	{r7, pc}
 800ee1a:	bf00      	nop
 800ee1c:	0800ed49 	.word	0x0800ed49
 800ee20:	0800ecdb 	.word	0x0800ecdb

0800ee24 <lsm6ds3_read_reg>:
  *
  */
int32_t lsm6ds3_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800ee24:	b590      	push	{r4, r7, lr}
 800ee26:	b087      	sub	sp, #28
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	60f8      	str	r0, [r7, #12]
 800ee2c:	607a      	str	r2, [r7, #4]
 800ee2e:	461a      	mov	r2, r3
 800ee30:	460b      	mov	r3, r1
 800ee32:	72fb      	strb	r3, [r7, #11]
 800ee34:	4613      	mov	r3, r2
 800ee36:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	685c      	ldr	r4, [r3, #4]
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	6898      	ldr	r0, [r3, #8]
 800ee40:	893b      	ldrh	r3, [r7, #8]
 800ee42:	7af9      	ldrb	r1, [r7, #11]
 800ee44:	687a      	ldr	r2, [r7, #4]
 800ee46:	47a0      	blx	r4
 800ee48:	6178      	str	r0, [r7, #20]

  return ret;
 800ee4a:	697b      	ldr	r3, [r7, #20]
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	371c      	adds	r7, #28
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd90      	pop	{r4, r7, pc}

0800ee54 <lsm6ds3_write_reg>:
  *
  */
int32_t lsm6ds3_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800ee54:	b590      	push	{r4, r7, lr}
 800ee56:	b087      	sub	sp, #28
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	60f8      	str	r0, [r7, #12]
 800ee5c:	607a      	str	r2, [r7, #4]
 800ee5e:	461a      	mov	r2, r3
 800ee60:	460b      	mov	r3, r1
 800ee62:	72fb      	strb	r3, [r7, #11]
 800ee64:	4613      	mov	r3, r2
 800ee66:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	681c      	ldr	r4, [r3, #0]
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	6898      	ldr	r0, [r3, #8]
 800ee70:	893b      	ldrh	r3, [r7, #8]
 800ee72:	7af9      	ldrb	r1, [r7, #11]
 800ee74:	687a      	ldr	r2, [r7, #4]
 800ee76:	47a0      	blx	r4
 800ee78:	6178      	str	r0, [r7, #20]

  return ret;
 800ee7a:	697b      	ldr	r3, [r7, #20]
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	371c      	adds	r7, #28
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd90      	pop	{r4, r7, pc}

0800ee84 <lsm6ds3_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6ds3_xl_fs_t val)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b084      	sub	sp, #16
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
 800ee8c:	460b      	mov	r3, r1
 800ee8e:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800ee90:	f107 0208 	add.w	r2, r7, #8
 800ee94:	2301      	movs	r3, #1
 800ee96:	2110      	movs	r1, #16
 800ee98:	6878      	ldr	r0, [r7, #4]
 800ee9a:	f7ff ffc3 	bl	800ee24 <lsm6ds3_read_reg>
 800ee9e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d10f      	bne.n	800eec6 <lsm6ds3_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 800eea6:	78fb      	ldrb	r3, [r7, #3]
 800eea8:	f003 0303 	and.w	r3, r3, #3
 800eeac:	b2da      	uxtb	r2, r3
 800eeae:	7a3b      	ldrb	r3, [r7, #8]
 800eeb0:	f362 0383 	bfi	r3, r2, #2, #2
 800eeb4:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800eeb6:	f107 0208 	add.w	r2, r7, #8
 800eeba:	2301      	movs	r3, #1
 800eebc:	2110      	movs	r1, #16
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f7ff ffc8 	bl	800ee54 <lsm6ds3_write_reg>
 800eec4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800eec6:	68fb      	ldr	r3, [r7, #12]
}
 800eec8:	4618      	mov	r0, r3
 800eeca:	3710      	adds	r7, #16
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}

0800eed0 <lsm6ds3_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6ds3_odr_xl_t val)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b084      	sub	sp, #16
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
 800eed8:	460b      	mov	r3, r1
 800eeda:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800eedc:	f107 0208 	add.w	r2, r7, #8
 800eee0:	2301      	movs	r3, #1
 800eee2:	2110      	movs	r1, #16
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	f7ff ff9d 	bl	800ee24 <lsm6ds3_read_reg>
 800eeea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d10f      	bne.n	800ef12 <lsm6ds3_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t)val;
 800eef2:	78fb      	ldrb	r3, [r7, #3]
 800eef4:	f003 030f 	and.w	r3, r3, #15
 800eef8:	b2da      	uxtb	r2, r3
 800eefa:	7a3b      	ldrb	r3, [r7, #8]
 800eefc:	f362 1307 	bfi	r3, r2, #4, #4
 800ef00:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800ef02:	f107 0208 	add.w	r2, r7, #8
 800ef06:	2301      	movs	r3, #1
 800ef08:	2110      	movs	r1, #16
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f7ff ffa2 	bl	800ee54 <lsm6ds3_write_reg>
 800ef10:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ef12:	68fb      	ldr	r3, [r7, #12]
}
 800ef14:	4618      	mov	r0, r3
 800ef16:	3710      	adds	r7, #16
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}

0800ef1c <lsm6ds3_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6ds3_fs_g_t val)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b084      	sub	sp, #16
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
 800ef24:	460b      	mov	r3, r1
 800ef26:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800ef28:	f107 0208 	add.w	r2, r7, #8
 800ef2c:	2301      	movs	r3, #1
 800ef2e:	2111      	movs	r1, #17
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f7ff ff77 	bl	800ee24 <lsm6ds3_read_reg>
 800ef36:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d10f      	bne.n	800ef5e <lsm6ds3_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 800ef3e:	78fb      	ldrb	r3, [r7, #3]
 800ef40:	f003 0307 	and.w	r3, r3, #7
 800ef44:	b2da      	uxtb	r2, r3
 800ef46:	7a3b      	ldrb	r3, [r7, #8]
 800ef48:	f362 0343 	bfi	r3, r2, #1, #3
 800ef4c:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800ef4e:	f107 0208 	add.w	r2, r7, #8
 800ef52:	2301      	movs	r3, #1
 800ef54:	2111      	movs	r1, #17
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f7ff ff7c 	bl	800ee54 <lsm6ds3_write_reg>
 800ef5c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ef5e:	68fb      	ldr	r3, [r7, #12]
}
 800ef60:	4618      	mov	r0, r3
 800ef62:	3710      	adds	r7, #16
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}

0800ef68 <lsm6ds3_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6ds3_odr_g_t val)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b084      	sub	sp, #16
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
 800ef70:	460b      	mov	r3, r1
 800ef72:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800ef74:	f107 0208 	add.w	r2, r7, #8
 800ef78:	2301      	movs	r3, #1
 800ef7a:	2111      	movs	r1, #17
 800ef7c:	6878      	ldr	r0, [r7, #4]
 800ef7e:	f7ff ff51 	bl	800ee24 <lsm6ds3_read_reg>
 800ef82:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d10f      	bne.n	800efaa <lsm6ds3_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t)val;
 800ef8a:	78fb      	ldrb	r3, [r7, #3]
 800ef8c:	f003 030f 	and.w	r3, r3, #15
 800ef90:	b2da      	uxtb	r2, r3
 800ef92:	7a3b      	ldrb	r3, [r7, #8]
 800ef94:	f362 1307 	bfi	r3, r2, #4, #4
 800ef98:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800ef9a:	f107 0208 	add.w	r2, r7, #8
 800ef9e:	2301      	movs	r3, #1
 800efa0:	2111      	movs	r1, #17
 800efa2:	6878      	ldr	r0, [r7, #4]
 800efa4:	f7ff ff56 	bl	800ee54 <lsm6ds3_write_reg>
 800efa8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800efaa:	68fb      	ldr	r3, [r7, #12]
}
 800efac:	4618      	mov	r0, r3
 800efae:	3710      	adds	r7, #16
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}

0800efb4 <lsm6ds3_temperature_raw_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b084      	sub	sp, #16
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
 800efbc:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUT_TEMP_L, buff, 2);
 800efbe:	f107 0208 	add.w	r2, r7, #8
 800efc2:	2302      	movs	r3, #2
 800efc4:	2120      	movs	r1, #32
 800efc6:	6878      	ldr	r0, [r7, #4]
 800efc8:	f7ff ff2c 	bl	800ee24 <lsm6ds3_read_reg>
 800efcc:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800efce:	7a7b      	ldrb	r3, [r7, #9]
 800efd0:	b21a      	sxth	r2, r3
 800efd2:	683b      	ldr	r3, [r7, #0]
 800efd4:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800efdc:	b29b      	uxth	r3, r3
 800efde:	021b      	lsls	r3, r3, #8
 800efe0:	b29a      	uxth	r2, r3
 800efe2:	7a3b      	ldrb	r3, [r7, #8]
 800efe4:	b29b      	uxth	r3, r3
 800efe6:	4413      	add	r3, r2
 800efe8:	b29b      	uxth	r3, r3
 800efea:	b21a      	sxth	r2, r3
 800efec:	683b      	ldr	r3, [r7, #0]
 800efee:	801a      	strh	r2, [r3, #0]

  return ret;
 800eff0:	68fb      	ldr	r3, [r7, #12]
}
 800eff2:	4618      	mov	r0, r3
 800eff4:	3710      	adds	r7, #16
 800eff6:	46bd      	mov	sp, r7
 800eff8:	bd80      	pop	{r7, pc}

0800effa <lsm6ds3_angular_rate_raw_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800effa:	b580      	push	{r7, lr}
 800effc:	b086      	sub	sp, #24
 800effe:	af00      	add	r7, sp, #0
 800f000:	6078      	str	r0, [r7, #4]
 800f002:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUTX_L_G, buff, 6);
 800f004:	f107 020c 	add.w	r2, r7, #12
 800f008:	2306      	movs	r3, #6
 800f00a:	2122      	movs	r1, #34	; 0x22
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	f7ff ff09 	bl	800ee24 <lsm6ds3_read_reg>
 800f012:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800f014:	7b7b      	ldrb	r3, [r7, #13]
 800f016:	b21a      	sxth	r2, r3
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f022:	b29b      	uxth	r3, r3
 800f024:	021b      	lsls	r3, r3, #8
 800f026:	b29a      	uxth	r2, r3
 800f028:	7b3b      	ldrb	r3, [r7, #12]
 800f02a:	b29b      	uxth	r3, r3
 800f02c:	4413      	add	r3, r2
 800f02e:	b29b      	uxth	r3, r3
 800f030:	b21a      	sxth	r2, r3
 800f032:	683b      	ldr	r3, [r7, #0]
 800f034:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800f036:	7bfa      	ldrb	r2, [r7, #15]
 800f038:	683b      	ldr	r3, [r7, #0]
 800f03a:	3302      	adds	r3, #2
 800f03c:	b212      	sxth	r2, r2
 800f03e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	3302      	adds	r3, #2
 800f044:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f048:	b29b      	uxth	r3, r3
 800f04a:	021b      	lsls	r3, r3, #8
 800f04c:	b29a      	uxth	r2, r3
 800f04e:	7bbb      	ldrb	r3, [r7, #14]
 800f050:	b29b      	uxth	r3, r3
 800f052:	4413      	add	r3, r2
 800f054:	b29a      	uxth	r2, r3
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	3302      	adds	r3, #2
 800f05a:	b212      	sxth	r2, r2
 800f05c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800f05e:	7c7a      	ldrb	r2, [r7, #17]
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	3304      	adds	r3, #4
 800f064:	b212      	sxth	r2, r2
 800f066:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800f068:	683b      	ldr	r3, [r7, #0]
 800f06a:	3304      	adds	r3, #4
 800f06c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f070:	b29b      	uxth	r3, r3
 800f072:	021b      	lsls	r3, r3, #8
 800f074:	b29a      	uxth	r2, r3
 800f076:	7c3b      	ldrb	r3, [r7, #16]
 800f078:	b29b      	uxth	r3, r3
 800f07a:	4413      	add	r3, r2
 800f07c:	b29a      	uxth	r2, r3
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	3304      	adds	r3, #4
 800f082:	b212      	sxth	r2, r2
 800f084:	801a      	strh	r2, [r3, #0]

  return ret;
 800f086:	697b      	ldr	r3, [r7, #20]
}
 800f088:	4618      	mov	r0, r3
 800f08a:	3718      	adds	r7, #24
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}

0800f090 <lsm6ds3_acceleration_raw_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b086      	sub	sp, #24
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
 800f098:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUTX_L_XL, buff, 6);
 800f09a:	f107 020c 	add.w	r2, r7, #12
 800f09e:	2306      	movs	r3, #6
 800f0a0:	2128      	movs	r1, #40	; 0x28
 800f0a2:	6878      	ldr	r0, [r7, #4]
 800f0a4:	f7ff febe 	bl	800ee24 <lsm6ds3_read_reg>
 800f0a8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800f0aa:	7b7b      	ldrb	r3, [r7, #13]
 800f0ac:	b21a      	sxth	r2, r3
 800f0ae:	683b      	ldr	r3, [r7, #0]
 800f0b0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f0b8:	b29b      	uxth	r3, r3
 800f0ba:	021b      	lsls	r3, r3, #8
 800f0bc:	b29a      	uxth	r2, r3
 800f0be:	7b3b      	ldrb	r3, [r7, #12]
 800f0c0:	b29b      	uxth	r3, r3
 800f0c2:	4413      	add	r3, r2
 800f0c4:	b29b      	uxth	r3, r3
 800f0c6:	b21a      	sxth	r2, r3
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800f0cc:	7bfa      	ldrb	r2, [r7, #15]
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	3302      	adds	r3, #2
 800f0d2:	b212      	sxth	r2, r2
 800f0d4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800f0d6:	683b      	ldr	r3, [r7, #0]
 800f0d8:	3302      	adds	r3, #2
 800f0da:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f0de:	b29b      	uxth	r3, r3
 800f0e0:	021b      	lsls	r3, r3, #8
 800f0e2:	b29a      	uxth	r2, r3
 800f0e4:	7bbb      	ldrb	r3, [r7, #14]
 800f0e6:	b29b      	uxth	r3, r3
 800f0e8:	4413      	add	r3, r2
 800f0ea:	b29a      	uxth	r2, r3
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	3302      	adds	r3, #2
 800f0f0:	b212      	sxth	r2, r2
 800f0f2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800f0f4:	7c7a      	ldrb	r2, [r7, #17]
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	3304      	adds	r3, #4
 800f0fa:	b212      	sxth	r2, r2
 800f0fc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	3304      	adds	r3, #4
 800f102:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f106:	b29b      	uxth	r3, r3
 800f108:	021b      	lsls	r3, r3, #8
 800f10a:	b29a      	uxth	r2, r3
 800f10c:	7c3b      	ldrb	r3, [r7, #16]
 800f10e:	b29b      	uxth	r3, r3
 800f110:	4413      	add	r3, r2
 800f112:	b29a      	uxth	r2, r3
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	3304      	adds	r3, #4
 800f118:	b212      	sxth	r2, r2
 800f11a:	801a      	strh	r2, [r3, #0]

  return ret;
 800f11c:	697b      	ldr	r3, [r7, #20]
}
 800f11e:	4618      	mov	r0, r3
 800f120:	3718      	adds	r7, #24
 800f122:	46bd      	mov	sp, r7
 800f124:	bd80      	pop	{r7, pc}

0800f126 <lsm6ds3_device_id_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800f126:	b580      	push	{r7, lr}
 800f128:	b084      	sub	sp, #16
 800f12a:	af00      	add	r7, sp, #0
 800f12c:	6078      	str	r0, [r7, #4]
 800f12e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_WHO_AM_I, buff, 1);
 800f130:	2301      	movs	r3, #1
 800f132:	683a      	ldr	r2, [r7, #0]
 800f134:	210f      	movs	r1, #15
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f7ff fe74 	bl	800ee24 <lsm6ds3_read_reg>
 800f13c:	60f8      	str	r0, [r7, #12]

  return ret;
 800f13e:	68fb      	ldr	r3, [r7, #12]
}
 800f140:	4618      	mov	r0, r3
 800f142:	3710      	adds	r7, #16
 800f144:	46bd      	mov	sp, r7
 800f146:	bd80      	pop	{r7, pc}

0800f148 <lsm6ds3_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b084      	sub	sp, #16
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
 800f150:	460b      	mov	r3, r1
 800f152:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800f154:	f107 0208 	add.w	r2, r7, #8
 800f158:	2301      	movs	r3, #1
 800f15a:	2112      	movs	r1, #18
 800f15c:	6878      	ldr	r0, [r7, #4]
 800f15e:	f7ff fe61 	bl	800ee24 <lsm6ds3_read_reg>
 800f162:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d10f      	bne.n	800f18a <lsm6ds3_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 800f16a:	78fb      	ldrb	r3, [r7, #3]
 800f16c:	f003 0301 	and.w	r3, r3, #1
 800f170:	b2da      	uxtb	r2, r3
 800f172:	7a3b      	ldrb	r3, [r7, #8]
 800f174:	f362 0300 	bfi	r3, r2, #0, #1
 800f178:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800f17a:	f107 0208 	add.w	r2, r7, #8
 800f17e:	2301      	movs	r3, #1
 800f180:	2112      	movs	r1, #18
 800f182:	6878      	ldr	r0, [r7, #4]
 800f184:	f7ff fe66 	bl	800ee54 <lsm6ds3_write_reg>
 800f188:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800f18a:	68fb      	ldr	r3, [r7, #12]
}
 800f18c:	4618      	mov	r0, r3
 800f18e:	3710      	adds	r7, #16
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}

0800f194 <__assert_func>:
 800f194:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f196:	4614      	mov	r4, r2
 800f198:	461a      	mov	r2, r3
 800f19a:	4b09      	ldr	r3, [pc, #36]	; (800f1c0 <__assert_func+0x2c>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	4605      	mov	r5, r0
 800f1a0:	68d8      	ldr	r0, [r3, #12]
 800f1a2:	b14c      	cbz	r4, 800f1b8 <__assert_func+0x24>
 800f1a4:	4b07      	ldr	r3, [pc, #28]	; (800f1c4 <__assert_func+0x30>)
 800f1a6:	9100      	str	r1, [sp, #0]
 800f1a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f1ac:	4906      	ldr	r1, [pc, #24]	; (800f1c8 <__assert_func+0x34>)
 800f1ae:	462b      	mov	r3, r5
 800f1b0:	f000 f814 	bl	800f1dc <fiprintf>
 800f1b4:	f001 ffec 	bl	8011190 <abort>
 800f1b8:	4b04      	ldr	r3, [pc, #16]	; (800f1cc <__assert_func+0x38>)
 800f1ba:	461c      	mov	r4, r3
 800f1bc:	e7f3      	b.n	800f1a6 <__assert_func+0x12>
 800f1be:	bf00      	nop
 800f1c0:	20000058 	.word	0x20000058
 800f1c4:	08014fec 	.word	0x08014fec
 800f1c8:	08014ff9 	.word	0x08014ff9
 800f1cc:	08015027 	.word	0x08015027

0800f1d0 <__errno>:
 800f1d0:	4b01      	ldr	r3, [pc, #4]	; (800f1d8 <__errno+0x8>)
 800f1d2:	6818      	ldr	r0, [r3, #0]
 800f1d4:	4770      	bx	lr
 800f1d6:	bf00      	nop
 800f1d8:	20000058 	.word	0x20000058

0800f1dc <fiprintf>:
 800f1dc:	b40e      	push	{r1, r2, r3}
 800f1de:	b503      	push	{r0, r1, lr}
 800f1e0:	4601      	mov	r1, r0
 800f1e2:	ab03      	add	r3, sp, #12
 800f1e4:	4805      	ldr	r0, [pc, #20]	; (800f1fc <fiprintf+0x20>)
 800f1e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1ea:	6800      	ldr	r0, [r0, #0]
 800f1ec:	9301      	str	r3, [sp, #4]
 800f1ee:	f000 f86b 	bl	800f2c8 <_vfiprintf_r>
 800f1f2:	b002      	add	sp, #8
 800f1f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f1f8:	b003      	add	sp, #12
 800f1fa:	4770      	bx	lr
 800f1fc:	20000058 	.word	0x20000058

0800f200 <__libc_init_array>:
 800f200:	b570      	push	{r4, r5, r6, lr}
 800f202:	4d0d      	ldr	r5, [pc, #52]	; (800f238 <__libc_init_array+0x38>)
 800f204:	4c0d      	ldr	r4, [pc, #52]	; (800f23c <__libc_init_array+0x3c>)
 800f206:	1b64      	subs	r4, r4, r5
 800f208:	10a4      	asrs	r4, r4, #2
 800f20a:	2600      	movs	r6, #0
 800f20c:	42a6      	cmp	r6, r4
 800f20e:	d109      	bne.n	800f224 <__libc_init_array+0x24>
 800f210:	4d0b      	ldr	r5, [pc, #44]	; (800f240 <__libc_init_array+0x40>)
 800f212:	4c0c      	ldr	r4, [pc, #48]	; (800f244 <__libc_init_array+0x44>)
 800f214:	f005 fc0e 	bl	8014a34 <_init>
 800f218:	1b64      	subs	r4, r4, r5
 800f21a:	10a4      	asrs	r4, r4, #2
 800f21c:	2600      	movs	r6, #0
 800f21e:	42a6      	cmp	r6, r4
 800f220:	d105      	bne.n	800f22e <__libc_init_array+0x2e>
 800f222:	bd70      	pop	{r4, r5, r6, pc}
 800f224:	f855 3b04 	ldr.w	r3, [r5], #4
 800f228:	4798      	blx	r3
 800f22a:	3601      	adds	r6, #1
 800f22c:	e7ee      	b.n	800f20c <__libc_init_array+0xc>
 800f22e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f232:	4798      	blx	r3
 800f234:	3601      	adds	r6, #1
 800f236:	e7f2      	b.n	800f21e <__libc_init_array+0x1e>
 800f238:	080154f0 	.word	0x080154f0
 800f23c:	080154f0 	.word	0x080154f0
 800f240:	080154f0 	.word	0x080154f0
 800f244:	080154f4 	.word	0x080154f4

0800f248 <memcpy>:
 800f248:	440a      	add	r2, r1
 800f24a:	4291      	cmp	r1, r2
 800f24c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f250:	d100      	bne.n	800f254 <memcpy+0xc>
 800f252:	4770      	bx	lr
 800f254:	b510      	push	{r4, lr}
 800f256:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f25a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f25e:	4291      	cmp	r1, r2
 800f260:	d1f9      	bne.n	800f256 <memcpy+0xe>
 800f262:	bd10      	pop	{r4, pc}

0800f264 <memset>:
 800f264:	4402      	add	r2, r0
 800f266:	4603      	mov	r3, r0
 800f268:	4293      	cmp	r3, r2
 800f26a:	d100      	bne.n	800f26e <memset+0xa>
 800f26c:	4770      	bx	lr
 800f26e:	f803 1b01 	strb.w	r1, [r3], #1
 800f272:	e7f9      	b.n	800f268 <memset+0x4>

0800f274 <__sfputc_r>:
 800f274:	6893      	ldr	r3, [r2, #8]
 800f276:	3b01      	subs	r3, #1
 800f278:	2b00      	cmp	r3, #0
 800f27a:	b410      	push	{r4}
 800f27c:	6093      	str	r3, [r2, #8]
 800f27e:	da08      	bge.n	800f292 <__sfputc_r+0x1e>
 800f280:	6994      	ldr	r4, [r2, #24]
 800f282:	42a3      	cmp	r3, r4
 800f284:	db01      	blt.n	800f28a <__sfputc_r+0x16>
 800f286:	290a      	cmp	r1, #10
 800f288:	d103      	bne.n	800f292 <__sfputc_r+0x1e>
 800f28a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f28e:	f001 bebf 	b.w	8011010 <__swbuf_r>
 800f292:	6813      	ldr	r3, [r2, #0]
 800f294:	1c58      	adds	r0, r3, #1
 800f296:	6010      	str	r0, [r2, #0]
 800f298:	7019      	strb	r1, [r3, #0]
 800f29a:	4608      	mov	r0, r1
 800f29c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2a0:	4770      	bx	lr

0800f2a2 <__sfputs_r>:
 800f2a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2a4:	4606      	mov	r6, r0
 800f2a6:	460f      	mov	r7, r1
 800f2a8:	4614      	mov	r4, r2
 800f2aa:	18d5      	adds	r5, r2, r3
 800f2ac:	42ac      	cmp	r4, r5
 800f2ae:	d101      	bne.n	800f2b4 <__sfputs_r+0x12>
 800f2b0:	2000      	movs	r0, #0
 800f2b2:	e007      	b.n	800f2c4 <__sfputs_r+0x22>
 800f2b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2b8:	463a      	mov	r2, r7
 800f2ba:	4630      	mov	r0, r6
 800f2bc:	f7ff ffda 	bl	800f274 <__sfputc_r>
 800f2c0:	1c43      	adds	r3, r0, #1
 800f2c2:	d1f3      	bne.n	800f2ac <__sfputs_r+0xa>
 800f2c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f2c8 <_vfiprintf_r>:
 800f2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2cc:	460d      	mov	r5, r1
 800f2ce:	b09d      	sub	sp, #116	; 0x74
 800f2d0:	4614      	mov	r4, r2
 800f2d2:	4698      	mov	r8, r3
 800f2d4:	4606      	mov	r6, r0
 800f2d6:	b118      	cbz	r0, 800f2e0 <_vfiprintf_r+0x18>
 800f2d8:	6983      	ldr	r3, [r0, #24]
 800f2da:	b90b      	cbnz	r3, 800f2e0 <_vfiprintf_r+0x18>
 800f2dc:	f002 fef2 	bl	80120c4 <__sinit>
 800f2e0:	4b89      	ldr	r3, [pc, #548]	; (800f508 <_vfiprintf_r+0x240>)
 800f2e2:	429d      	cmp	r5, r3
 800f2e4:	d11b      	bne.n	800f31e <_vfiprintf_r+0x56>
 800f2e6:	6875      	ldr	r5, [r6, #4]
 800f2e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f2ea:	07d9      	lsls	r1, r3, #31
 800f2ec:	d405      	bmi.n	800f2fa <_vfiprintf_r+0x32>
 800f2ee:	89ab      	ldrh	r3, [r5, #12]
 800f2f0:	059a      	lsls	r2, r3, #22
 800f2f2:	d402      	bmi.n	800f2fa <_vfiprintf_r+0x32>
 800f2f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f2f6:	f003 faf6 	bl	80128e6 <__retarget_lock_acquire_recursive>
 800f2fa:	89ab      	ldrh	r3, [r5, #12]
 800f2fc:	071b      	lsls	r3, r3, #28
 800f2fe:	d501      	bpl.n	800f304 <_vfiprintf_r+0x3c>
 800f300:	692b      	ldr	r3, [r5, #16]
 800f302:	b9eb      	cbnz	r3, 800f340 <_vfiprintf_r+0x78>
 800f304:	4629      	mov	r1, r5
 800f306:	4630      	mov	r0, r6
 800f308:	f001 fed4 	bl	80110b4 <__swsetup_r>
 800f30c:	b1c0      	cbz	r0, 800f340 <_vfiprintf_r+0x78>
 800f30e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f310:	07dc      	lsls	r4, r3, #31
 800f312:	d50e      	bpl.n	800f332 <_vfiprintf_r+0x6a>
 800f314:	f04f 30ff 	mov.w	r0, #4294967295
 800f318:	b01d      	add	sp, #116	; 0x74
 800f31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f31e:	4b7b      	ldr	r3, [pc, #492]	; (800f50c <_vfiprintf_r+0x244>)
 800f320:	429d      	cmp	r5, r3
 800f322:	d101      	bne.n	800f328 <_vfiprintf_r+0x60>
 800f324:	68b5      	ldr	r5, [r6, #8]
 800f326:	e7df      	b.n	800f2e8 <_vfiprintf_r+0x20>
 800f328:	4b79      	ldr	r3, [pc, #484]	; (800f510 <_vfiprintf_r+0x248>)
 800f32a:	429d      	cmp	r5, r3
 800f32c:	bf08      	it	eq
 800f32e:	68f5      	ldreq	r5, [r6, #12]
 800f330:	e7da      	b.n	800f2e8 <_vfiprintf_r+0x20>
 800f332:	89ab      	ldrh	r3, [r5, #12]
 800f334:	0598      	lsls	r0, r3, #22
 800f336:	d4ed      	bmi.n	800f314 <_vfiprintf_r+0x4c>
 800f338:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f33a:	f003 fad5 	bl	80128e8 <__retarget_lock_release_recursive>
 800f33e:	e7e9      	b.n	800f314 <_vfiprintf_r+0x4c>
 800f340:	2300      	movs	r3, #0
 800f342:	9309      	str	r3, [sp, #36]	; 0x24
 800f344:	2320      	movs	r3, #32
 800f346:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f34a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f34e:	2330      	movs	r3, #48	; 0x30
 800f350:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f514 <_vfiprintf_r+0x24c>
 800f354:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f358:	f04f 0901 	mov.w	r9, #1
 800f35c:	4623      	mov	r3, r4
 800f35e:	469a      	mov	sl, r3
 800f360:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f364:	b10a      	cbz	r2, 800f36a <_vfiprintf_r+0xa2>
 800f366:	2a25      	cmp	r2, #37	; 0x25
 800f368:	d1f9      	bne.n	800f35e <_vfiprintf_r+0x96>
 800f36a:	ebba 0b04 	subs.w	fp, sl, r4
 800f36e:	d00b      	beq.n	800f388 <_vfiprintf_r+0xc0>
 800f370:	465b      	mov	r3, fp
 800f372:	4622      	mov	r2, r4
 800f374:	4629      	mov	r1, r5
 800f376:	4630      	mov	r0, r6
 800f378:	f7ff ff93 	bl	800f2a2 <__sfputs_r>
 800f37c:	3001      	adds	r0, #1
 800f37e:	f000 80aa 	beq.w	800f4d6 <_vfiprintf_r+0x20e>
 800f382:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f384:	445a      	add	r2, fp
 800f386:	9209      	str	r2, [sp, #36]	; 0x24
 800f388:	f89a 3000 	ldrb.w	r3, [sl]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	f000 80a2 	beq.w	800f4d6 <_vfiprintf_r+0x20e>
 800f392:	2300      	movs	r3, #0
 800f394:	f04f 32ff 	mov.w	r2, #4294967295
 800f398:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f39c:	f10a 0a01 	add.w	sl, sl, #1
 800f3a0:	9304      	str	r3, [sp, #16]
 800f3a2:	9307      	str	r3, [sp, #28]
 800f3a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f3a8:	931a      	str	r3, [sp, #104]	; 0x68
 800f3aa:	4654      	mov	r4, sl
 800f3ac:	2205      	movs	r2, #5
 800f3ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3b2:	4858      	ldr	r0, [pc, #352]	; (800f514 <_vfiprintf_r+0x24c>)
 800f3b4:	f7f0 ff2c 	bl	8000210 <memchr>
 800f3b8:	9a04      	ldr	r2, [sp, #16]
 800f3ba:	b9d8      	cbnz	r0, 800f3f4 <_vfiprintf_r+0x12c>
 800f3bc:	06d1      	lsls	r1, r2, #27
 800f3be:	bf44      	itt	mi
 800f3c0:	2320      	movmi	r3, #32
 800f3c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f3c6:	0713      	lsls	r3, r2, #28
 800f3c8:	bf44      	itt	mi
 800f3ca:	232b      	movmi	r3, #43	; 0x2b
 800f3cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f3d0:	f89a 3000 	ldrb.w	r3, [sl]
 800f3d4:	2b2a      	cmp	r3, #42	; 0x2a
 800f3d6:	d015      	beq.n	800f404 <_vfiprintf_r+0x13c>
 800f3d8:	9a07      	ldr	r2, [sp, #28]
 800f3da:	4654      	mov	r4, sl
 800f3dc:	2000      	movs	r0, #0
 800f3de:	f04f 0c0a 	mov.w	ip, #10
 800f3e2:	4621      	mov	r1, r4
 800f3e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f3e8:	3b30      	subs	r3, #48	; 0x30
 800f3ea:	2b09      	cmp	r3, #9
 800f3ec:	d94e      	bls.n	800f48c <_vfiprintf_r+0x1c4>
 800f3ee:	b1b0      	cbz	r0, 800f41e <_vfiprintf_r+0x156>
 800f3f0:	9207      	str	r2, [sp, #28]
 800f3f2:	e014      	b.n	800f41e <_vfiprintf_r+0x156>
 800f3f4:	eba0 0308 	sub.w	r3, r0, r8
 800f3f8:	fa09 f303 	lsl.w	r3, r9, r3
 800f3fc:	4313      	orrs	r3, r2
 800f3fe:	9304      	str	r3, [sp, #16]
 800f400:	46a2      	mov	sl, r4
 800f402:	e7d2      	b.n	800f3aa <_vfiprintf_r+0xe2>
 800f404:	9b03      	ldr	r3, [sp, #12]
 800f406:	1d19      	adds	r1, r3, #4
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	9103      	str	r1, [sp, #12]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	bfbb      	ittet	lt
 800f410:	425b      	neglt	r3, r3
 800f412:	f042 0202 	orrlt.w	r2, r2, #2
 800f416:	9307      	strge	r3, [sp, #28]
 800f418:	9307      	strlt	r3, [sp, #28]
 800f41a:	bfb8      	it	lt
 800f41c:	9204      	strlt	r2, [sp, #16]
 800f41e:	7823      	ldrb	r3, [r4, #0]
 800f420:	2b2e      	cmp	r3, #46	; 0x2e
 800f422:	d10c      	bne.n	800f43e <_vfiprintf_r+0x176>
 800f424:	7863      	ldrb	r3, [r4, #1]
 800f426:	2b2a      	cmp	r3, #42	; 0x2a
 800f428:	d135      	bne.n	800f496 <_vfiprintf_r+0x1ce>
 800f42a:	9b03      	ldr	r3, [sp, #12]
 800f42c:	1d1a      	adds	r2, r3, #4
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	9203      	str	r2, [sp, #12]
 800f432:	2b00      	cmp	r3, #0
 800f434:	bfb8      	it	lt
 800f436:	f04f 33ff 	movlt.w	r3, #4294967295
 800f43a:	3402      	adds	r4, #2
 800f43c:	9305      	str	r3, [sp, #20]
 800f43e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f524 <_vfiprintf_r+0x25c>
 800f442:	7821      	ldrb	r1, [r4, #0]
 800f444:	2203      	movs	r2, #3
 800f446:	4650      	mov	r0, sl
 800f448:	f7f0 fee2 	bl	8000210 <memchr>
 800f44c:	b140      	cbz	r0, 800f460 <_vfiprintf_r+0x198>
 800f44e:	2340      	movs	r3, #64	; 0x40
 800f450:	eba0 000a 	sub.w	r0, r0, sl
 800f454:	fa03 f000 	lsl.w	r0, r3, r0
 800f458:	9b04      	ldr	r3, [sp, #16]
 800f45a:	4303      	orrs	r3, r0
 800f45c:	3401      	adds	r4, #1
 800f45e:	9304      	str	r3, [sp, #16]
 800f460:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f464:	482c      	ldr	r0, [pc, #176]	; (800f518 <_vfiprintf_r+0x250>)
 800f466:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f46a:	2206      	movs	r2, #6
 800f46c:	f7f0 fed0 	bl	8000210 <memchr>
 800f470:	2800      	cmp	r0, #0
 800f472:	d03f      	beq.n	800f4f4 <_vfiprintf_r+0x22c>
 800f474:	4b29      	ldr	r3, [pc, #164]	; (800f51c <_vfiprintf_r+0x254>)
 800f476:	bb1b      	cbnz	r3, 800f4c0 <_vfiprintf_r+0x1f8>
 800f478:	9b03      	ldr	r3, [sp, #12]
 800f47a:	3307      	adds	r3, #7
 800f47c:	f023 0307 	bic.w	r3, r3, #7
 800f480:	3308      	adds	r3, #8
 800f482:	9303      	str	r3, [sp, #12]
 800f484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f486:	443b      	add	r3, r7
 800f488:	9309      	str	r3, [sp, #36]	; 0x24
 800f48a:	e767      	b.n	800f35c <_vfiprintf_r+0x94>
 800f48c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f490:	460c      	mov	r4, r1
 800f492:	2001      	movs	r0, #1
 800f494:	e7a5      	b.n	800f3e2 <_vfiprintf_r+0x11a>
 800f496:	2300      	movs	r3, #0
 800f498:	3401      	adds	r4, #1
 800f49a:	9305      	str	r3, [sp, #20]
 800f49c:	4619      	mov	r1, r3
 800f49e:	f04f 0c0a 	mov.w	ip, #10
 800f4a2:	4620      	mov	r0, r4
 800f4a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f4a8:	3a30      	subs	r2, #48	; 0x30
 800f4aa:	2a09      	cmp	r2, #9
 800f4ac:	d903      	bls.n	800f4b6 <_vfiprintf_r+0x1ee>
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d0c5      	beq.n	800f43e <_vfiprintf_r+0x176>
 800f4b2:	9105      	str	r1, [sp, #20]
 800f4b4:	e7c3      	b.n	800f43e <_vfiprintf_r+0x176>
 800f4b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800f4ba:	4604      	mov	r4, r0
 800f4bc:	2301      	movs	r3, #1
 800f4be:	e7f0      	b.n	800f4a2 <_vfiprintf_r+0x1da>
 800f4c0:	ab03      	add	r3, sp, #12
 800f4c2:	9300      	str	r3, [sp, #0]
 800f4c4:	462a      	mov	r2, r5
 800f4c6:	4b16      	ldr	r3, [pc, #88]	; (800f520 <_vfiprintf_r+0x258>)
 800f4c8:	a904      	add	r1, sp, #16
 800f4ca:	4630      	mov	r0, r6
 800f4cc:	f000 f8cc 	bl	800f668 <_printf_float>
 800f4d0:	4607      	mov	r7, r0
 800f4d2:	1c78      	adds	r0, r7, #1
 800f4d4:	d1d6      	bne.n	800f484 <_vfiprintf_r+0x1bc>
 800f4d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f4d8:	07d9      	lsls	r1, r3, #31
 800f4da:	d405      	bmi.n	800f4e8 <_vfiprintf_r+0x220>
 800f4dc:	89ab      	ldrh	r3, [r5, #12]
 800f4de:	059a      	lsls	r2, r3, #22
 800f4e0:	d402      	bmi.n	800f4e8 <_vfiprintf_r+0x220>
 800f4e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f4e4:	f003 fa00 	bl	80128e8 <__retarget_lock_release_recursive>
 800f4e8:	89ab      	ldrh	r3, [r5, #12]
 800f4ea:	065b      	lsls	r3, r3, #25
 800f4ec:	f53f af12 	bmi.w	800f314 <_vfiprintf_r+0x4c>
 800f4f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f4f2:	e711      	b.n	800f318 <_vfiprintf_r+0x50>
 800f4f4:	ab03      	add	r3, sp, #12
 800f4f6:	9300      	str	r3, [sp, #0]
 800f4f8:	462a      	mov	r2, r5
 800f4fa:	4b09      	ldr	r3, [pc, #36]	; (800f520 <_vfiprintf_r+0x258>)
 800f4fc:	a904      	add	r1, sp, #16
 800f4fe:	4630      	mov	r0, r6
 800f500:	f000 fb56 	bl	800fbb0 <_printf_i>
 800f504:	e7e4      	b.n	800f4d0 <_vfiprintf_r+0x208>
 800f506:	bf00      	nop
 800f508:	08015284 	.word	0x08015284
 800f50c:	080152a4 	.word	0x080152a4
 800f510:	08015264 	.word	0x08015264
 800f514:	08015130 	.word	0x08015130
 800f518:	0801513a 	.word	0x0801513a
 800f51c:	0800f669 	.word	0x0800f669
 800f520:	0800f2a3 	.word	0x0800f2a3
 800f524:	08015136 	.word	0x08015136

0800f528 <__cvt>:
 800f528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f52c:	ec55 4b10 	vmov	r4, r5, d0
 800f530:	2d00      	cmp	r5, #0
 800f532:	460e      	mov	r6, r1
 800f534:	4619      	mov	r1, r3
 800f536:	462b      	mov	r3, r5
 800f538:	bfbb      	ittet	lt
 800f53a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f53e:	461d      	movlt	r5, r3
 800f540:	2300      	movge	r3, #0
 800f542:	232d      	movlt	r3, #45	; 0x2d
 800f544:	700b      	strb	r3, [r1, #0]
 800f546:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f548:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f54c:	4691      	mov	r9, r2
 800f54e:	f023 0820 	bic.w	r8, r3, #32
 800f552:	bfbc      	itt	lt
 800f554:	4622      	movlt	r2, r4
 800f556:	4614      	movlt	r4, r2
 800f558:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f55c:	d005      	beq.n	800f56a <__cvt+0x42>
 800f55e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f562:	d100      	bne.n	800f566 <__cvt+0x3e>
 800f564:	3601      	adds	r6, #1
 800f566:	2102      	movs	r1, #2
 800f568:	e000      	b.n	800f56c <__cvt+0x44>
 800f56a:	2103      	movs	r1, #3
 800f56c:	ab03      	add	r3, sp, #12
 800f56e:	9301      	str	r3, [sp, #4]
 800f570:	ab02      	add	r3, sp, #8
 800f572:	9300      	str	r3, [sp, #0]
 800f574:	ec45 4b10 	vmov	d0, r4, r5
 800f578:	4653      	mov	r3, sl
 800f57a:	4632      	mov	r2, r6
 800f57c:	f001 fe9c 	bl	80112b8 <_dtoa_r>
 800f580:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f584:	4607      	mov	r7, r0
 800f586:	d102      	bne.n	800f58e <__cvt+0x66>
 800f588:	f019 0f01 	tst.w	r9, #1
 800f58c:	d022      	beq.n	800f5d4 <__cvt+0xac>
 800f58e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f592:	eb07 0906 	add.w	r9, r7, r6
 800f596:	d110      	bne.n	800f5ba <__cvt+0x92>
 800f598:	783b      	ldrb	r3, [r7, #0]
 800f59a:	2b30      	cmp	r3, #48	; 0x30
 800f59c:	d10a      	bne.n	800f5b4 <__cvt+0x8c>
 800f59e:	2200      	movs	r2, #0
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	4620      	mov	r0, r4
 800f5a4:	4629      	mov	r1, r5
 800f5a6:	f7f1 faa7 	bl	8000af8 <__aeabi_dcmpeq>
 800f5aa:	b918      	cbnz	r0, 800f5b4 <__cvt+0x8c>
 800f5ac:	f1c6 0601 	rsb	r6, r6, #1
 800f5b0:	f8ca 6000 	str.w	r6, [sl]
 800f5b4:	f8da 3000 	ldr.w	r3, [sl]
 800f5b8:	4499      	add	r9, r3
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	2300      	movs	r3, #0
 800f5be:	4620      	mov	r0, r4
 800f5c0:	4629      	mov	r1, r5
 800f5c2:	f7f1 fa99 	bl	8000af8 <__aeabi_dcmpeq>
 800f5c6:	b108      	cbz	r0, 800f5cc <__cvt+0xa4>
 800f5c8:	f8cd 900c 	str.w	r9, [sp, #12]
 800f5cc:	2230      	movs	r2, #48	; 0x30
 800f5ce:	9b03      	ldr	r3, [sp, #12]
 800f5d0:	454b      	cmp	r3, r9
 800f5d2:	d307      	bcc.n	800f5e4 <__cvt+0xbc>
 800f5d4:	9b03      	ldr	r3, [sp, #12]
 800f5d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f5d8:	1bdb      	subs	r3, r3, r7
 800f5da:	4638      	mov	r0, r7
 800f5dc:	6013      	str	r3, [r2, #0]
 800f5de:	b004      	add	sp, #16
 800f5e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5e4:	1c59      	adds	r1, r3, #1
 800f5e6:	9103      	str	r1, [sp, #12]
 800f5e8:	701a      	strb	r2, [r3, #0]
 800f5ea:	e7f0      	b.n	800f5ce <__cvt+0xa6>

0800f5ec <__exponent>:
 800f5ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	2900      	cmp	r1, #0
 800f5f2:	bfb8      	it	lt
 800f5f4:	4249      	neglt	r1, r1
 800f5f6:	f803 2b02 	strb.w	r2, [r3], #2
 800f5fa:	bfb4      	ite	lt
 800f5fc:	222d      	movlt	r2, #45	; 0x2d
 800f5fe:	222b      	movge	r2, #43	; 0x2b
 800f600:	2909      	cmp	r1, #9
 800f602:	7042      	strb	r2, [r0, #1]
 800f604:	dd2a      	ble.n	800f65c <__exponent+0x70>
 800f606:	f10d 0407 	add.w	r4, sp, #7
 800f60a:	46a4      	mov	ip, r4
 800f60c:	270a      	movs	r7, #10
 800f60e:	46a6      	mov	lr, r4
 800f610:	460a      	mov	r2, r1
 800f612:	fb91 f6f7 	sdiv	r6, r1, r7
 800f616:	fb07 1516 	mls	r5, r7, r6, r1
 800f61a:	3530      	adds	r5, #48	; 0x30
 800f61c:	2a63      	cmp	r2, #99	; 0x63
 800f61e:	f104 34ff 	add.w	r4, r4, #4294967295
 800f622:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f626:	4631      	mov	r1, r6
 800f628:	dcf1      	bgt.n	800f60e <__exponent+0x22>
 800f62a:	3130      	adds	r1, #48	; 0x30
 800f62c:	f1ae 0502 	sub.w	r5, lr, #2
 800f630:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f634:	1c44      	adds	r4, r0, #1
 800f636:	4629      	mov	r1, r5
 800f638:	4561      	cmp	r1, ip
 800f63a:	d30a      	bcc.n	800f652 <__exponent+0x66>
 800f63c:	f10d 0209 	add.w	r2, sp, #9
 800f640:	eba2 020e 	sub.w	r2, r2, lr
 800f644:	4565      	cmp	r5, ip
 800f646:	bf88      	it	hi
 800f648:	2200      	movhi	r2, #0
 800f64a:	4413      	add	r3, r2
 800f64c:	1a18      	subs	r0, r3, r0
 800f64e:	b003      	add	sp, #12
 800f650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f652:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f656:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f65a:	e7ed      	b.n	800f638 <__exponent+0x4c>
 800f65c:	2330      	movs	r3, #48	; 0x30
 800f65e:	3130      	adds	r1, #48	; 0x30
 800f660:	7083      	strb	r3, [r0, #2]
 800f662:	70c1      	strb	r1, [r0, #3]
 800f664:	1d03      	adds	r3, r0, #4
 800f666:	e7f1      	b.n	800f64c <__exponent+0x60>

0800f668 <_printf_float>:
 800f668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f66c:	ed2d 8b02 	vpush	{d8}
 800f670:	b08d      	sub	sp, #52	; 0x34
 800f672:	460c      	mov	r4, r1
 800f674:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f678:	4616      	mov	r6, r2
 800f67a:	461f      	mov	r7, r3
 800f67c:	4605      	mov	r5, r0
 800f67e:	f003 f92d 	bl	80128dc <_localeconv_r>
 800f682:	f8d0 a000 	ldr.w	sl, [r0]
 800f686:	4650      	mov	r0, sl
 800f688:	f7f0 fdb4 	bl	80001f4 <strlen>
 800f68c:	2300      	movs	r3, #0
 800f68e:	930a      	str	r3, [sp, #40]	; 0x28
 800f690:	6823      	ldr	r3, [r4, #0]
 800f692:	9305      	str	r3, [sp, #20]
 800f694:	f8d8 3000 	ldr.w	r3, [r8]
 800f698:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f69c:	3307      	adds	r3, #7
 800f69e:	f023 0307 	bic.w	r3, r3, #7
 800f6a2:	f103 0208 	add.w	r2, r3, #8
 800f6a6:	f8c8 2000 	str.w	r2, [r8]
 800f6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f6b2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f6b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f6ba:	9307      	str	r3, [sp, #28]
 800f6bc:	f8cd 8018 	str.w	r8, [sp, #24]
 800f6c0:	ee08 0a10 	vmov	s16, r0
 800f6c4:	4b9f      	ldr	r3, [pc, #636]	; (800f944 <_printf_float+0x2dc>)
 800f6c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f6ca:	f04f 32ff 	mov.w	r2, #4294967295
 800f6ce:	f7f1 fa45 	bl	8000b5c <__aeabi_dcmpun>
 800f6d2:	bb88      	cbnz	r0, 800f738 <_printf_float+0xd0>
 800f6d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f6d8:	4b9a      	ldr	r3, [pc, #616]	; (800f944 <_printf_float+0x2dc>)
 800f6da:	f04f 32ff 	mov.w	r2, #4294967295
 800f6de:	f7f1 fa1f 	bl	8000b20 <__aeabi_dcmple>
 800f6e2:	bb48      	cbnz	r0, 800f738 <_printf_float+0xd0>
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	4640      	mov	r0, r8
 800f6ea:	4649      	mov	r1, r9
 800f6ec:	f7f1 fa0e 	bl	8000b0c <__aeabi_dcmplt>
 800f6f0:	b110      	cbz	r0, 800f6f8 <_printf_float+0x90>
 800f6f2:	232d      	movs	r3, #45	; 0x2d
 800f6f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6f8:	4b93      	ldr	r3, [pc, #588]	; (800f948 <_printf_float+0x2e0>)
 800f6fa:	4894      	ldr	r0, [pc, #592]	; (800f94c <_printf_float+0x2e4>)
 800f6fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f700:	bf94      	ite	ls
 800f702:	4698      	movls	r8, r3
 800f704:	4680      	movhi	r8, r0
 800f706:	2303      	movs	r3, #3
 800f708:	6123      	str	r3, [r4, #16]
 800f70a:	9b05      	ldr	r3, [sp, #20]
 800f70c:	f023 0204 	bic.w	r2, r3, #4
 800f710:	6022      	str	r2, [r4, #0]
 800f712:	f04f 0900 	mov.w	r9, #0
 800f716:	9700      	str	r7, [sp, #0]
 800f718:	4633      	mov	r3, r6
 800f71a:	aa0b      	add	r2, sp, #44	; 0x2c
 800f71c:	4621      	mov	r1, r4
 800f71e:	4628      	mov	r0, r5
 800f720:	f000 f9d8 	bl	800fad4 <_printf_common>
 800f724:	3001      	adds	r0, #1
 800f726:	f040 8090 	bne.w	800f84a <_printf_float+0x1e2>
 800f72a:	f04f 30ff 	mov.w	r0, #4294967295
 800f72e:	b00d      	add	sp, #52	; 0x34
 800f730:	ecbd 8b02 	vpop	{d8}
 800f734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f738:	4642      	mov	r2, r8
 800f73a:	464b      	mov	r3, r9
 800f73c:	4640      	mov	r0, r8
 800f73e:	4649      	mov	r1, r9
 800f740:	f7f1 fa0c 	bl	8000b5c <__aeabi_dcmpun>
 800f744:	b140      	cbz	r0, 800f758 <_printf_float+0xf0>
 800f746:	464b      	mov	r3, r9
 800f748:	2b00      	cmp	r3, #0
 800f74a:	bfbc      	itt	lt
 800f74c:	232d      	movlt	r3, #45	; 0x2d
 800f74e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f752:	487f      	ldr	r0, [pc, #508]	; (800f950 <_printf_float+0x2e8>)
 800f754:	4b7f      	ldr	r3, [pc, #508]	; (800f954 <_printf_float+0x2ec>)
 800f756:	e7d1      	b.n	800f6fc <_printf_float+0x94>
 800f758:	6863      	ldr	r3, [r4, #4]
 800f75a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f75e:	9206      	str	r2, [sp, #24]
 800f760:	1c5a      	adds	r2, r3, #1
 800f762:	d13f      	bne.n	800f7e4 <_printf_float+0x17c>
 800f764:	2306      	movs	r3, #6
 800f766:	6063      	str	r3, [r4, #4]
 800f768:	9b05      	ldr	r3, [sp, #20]
 800f76a:	6861      	ldr	r1, [r4, #4]
 800f76c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f770:	2300      	movs	r3, #0
 800f772:	9303      	str	r3, [sp, #12]
 800f774:	ab0a      	add	r3, sp, #40	; 0x28
 800f776:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f77a:	ab09      	add	r3, sp, #36	; 0x24
 800f77c:	ec49 8b10 	vmov	d0, r8, r9
 800f780:	9300      	str	r3, [sp, #0]
 800f782:	6022      	str	r2, [r4, #0]
 800f784:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f788:	4628      	mov	r0, r5
 800f78a:	f7ff fecd 	bl	800f528 <__cvt>
 800f78e:	9b06      	ldr	r3, [sp, #24]
 800f790:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f792:	2b47      	cmp	r3, #71	; 0x47
 800f794:	4680      	mov	r8, r0
 800f796:	d108      	bne.n	800f7aa <_printf_float+0x142>
 800f798:	1cc8      	adds	r0, r1, #3
 800f79a:	db02      	blt.n	800f7a2 <_printf_float+0x13a>
 800f79c:	6863      	ldr	r3, [r4, #4]
 800f79e:	4299      	cmp	r1, r3
 800f7a0:	dd41      	ble.n	800f826 <_printf_float+0x1be>
 800f7a2:	f1ab 0b02 	sub.w	fp, fp, #2
 800f7a6:	fa5f fb8b 	uxtb.w	fp, fp
 800f7aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f7ae:	d820      	bhi.n	800f7f2 <_printf_float+0x18a>
 800f7b0:	3901      	subs	r1, #1
 800f7b2:	465a      	mov	r2, fp
 800f7b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f7b8:	9109      	str	r1, [sp, #36]	; 0x24
 800f7ba:	f7ff ff17 	bl	800f5ec <__exponent>
 800f7be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f7c0:	1813      	adds	r3, r2, r0
 800f7c2:	2a01      	cmp	r2, #1
 800f7c4:	4681      	mov	r9, r0
 800f7c6:	6123      	str	r3, [r4, #16]
 800f7c8:	dc02      	bgt.n	800f7d0 <_printf_float+0x168>
 800f7ca:	6822      	ldr	r2, [r4, #0]
 800f7cc:	07d2      	lsls	r2, r2, #31
 800f7ce:	d501      	bpl.n	800f7d4 <_printf_float+0x16c>
 800f7d0:	3301      	adds	r3, #1
 800f7d2:	6123      	str	r3, [r4, #16]
 800f7d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d09c      	beq.n	800f716 <_printf_float+0xae>
 800f7dc:	232d      	movs	r3, #45	; 0x2d
 800f7de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f7e2:	e798      	b.n	800f716 <_printf_float+0xae>
 800f7e4:	9a06      	ldr	r2, [sp, #24]
 800f7e6:	2a47      	cmp	r2, #71	; 0x47
 800f7e8:	d1be      	bne.n	800f768 <_printf_float+0x100>
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d1bc      	bne.n	800f768 <_printf_float+0x100>
 800f7ee:	2301      	movs	r3, #1
 800f7f0:	e7b9      	b.n	800f766 <_printf_float+0xfe>
 800f7f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f7f6:	d118      	bne.n	800f82a <_printf_float+0x1c2>
 800f7f8:	2900      	cmp	r1, #0
 800f7fa:	6863      	ldr	r3, [r4, #4]
 800f7fc:	dd0b      	ble.n	800f816 <_printf_float+0x1ae>
 800f7fe:	6121      	str	r1, [r4, #16]
 800f800:	b913      	cbnz	r3, 800f808 <_printf_float+0x1a0>
 800f802:	6822      	ldr	r2, [r4, #0]
 800f804:	07d0      	lsls	r0, r2, #31
 800f806:	d502      	bpl.n	800f80e <_printf_float+0x1a6>
 800f808:	3301      	adds	r3, #1
 800f80a:	440b      	add	r3, r1
 800f80c:	6123      	str	r3, [r4, #16]
 800f80e:	65a1      	str	r1, [r4, #88]	; 0x58
 800f810:	f04f 0900 	mov.w	r9, #0
 800f814:	e7de      	b.n	800f7d4 <_printf_float+0x16c>
 800f816:	b913      	cbnz	r3, 800f81e <_printf_float+0x1b6>
 800f818:	6822      	ldr	r2, [r4, #0]
 800f81a:	07d2      	lsls	r2, r2, #31
 800f81c:	d501      	bpl.n	800f822 <_printf_float+0x1ba>
 800f81e:	3302      	adds	r3, #2
 800f820:	e7f4      	b.n	800f80c <_printf_float+0x1a4>
 800f822:	2301      	movs	r3, #1
 800f824:	e7f2      	b.n	800f80c <_printf_float+0x1a4>
 800f826:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f82a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f82c:	4299      	cmp	r1, r3
 800f82e:	db05      	blt.n	800f83c <_printf_float+0x1d4>
 800f830:	6823      	ldr	r3, [r4, #0]
 800f832:	6121      	str	r1, [r4, #16]
 800f834:	07d8      	lsls	r0, r3, #31
 800f836:	d5ea      	bpl.n	800f80e <_printf_float+0x1a6>
 800f838:	1c4b      	adds	r3, r1, #1
 800f83a:	e7e7      	b.n	800f80c <_printf_float+0x1a4>
 800f83c:	2900      	cmp	r1, #0
 800f83e:	bfd4      	ite	le
 800f840:	f1c1 0202 	rsble	r2, r1, #2
 800f844:	2201      	movgt	r2, #1
 800f846:	4413      	add	r3, r2
 800f848:	e7e0      	b.n	800f80c <_printf_float+0x1a4>
 800f84a:	6823      	ldr	r3, [r4, #0]
 800f84c:	055a      	lsls	r2, r3, #21
 800f84e:	d407      	bmi.n	800f860 <_printf_float+0x1f8>
 800f850:	6923      	ldr	r3, [r4, #16]
 800f852:	4642      	mov	r2, r8
 800f854:	4631      	mov	r1, r6
 800f856:	4628      	mov	r0, r5
 800f858:	47b8      	blx	r7
 800f85a:	3001      	adds	r0, #1
 800f85c:	d12c      	bne.n	800f8b8 <_printf_float+0x250>
 800f85e:	e764      	b.n	800f72a <_printf_float+0xc2>
 800f860:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f864:	f240 80e0 	bls.w	800fa28 <_printf_float+0x3c0>
 800f868:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f86c:	2200      	movs	r2, #0
 800f86e:	2300      	movs	r3, #0
 800f870:	f7f1 f942 	bl	8000af8 <__aeabi_dcmpeq>
 800f874:	2800      	cmp	r0, #0
 800f876:	d034      	beq.n	800f8e2 <_printf_float+0x27a>
 800f878:	4a37      	ldr	r2, [pc, #220]	; (800f958 <_printf_float+0x2f0>)
 800f87a:	2301      	movs	r3, #1
 800f87c:	4631      	mov	r1, r6
 800f87e:	4628      	mov	r0, r5
 800f880:	47b8      	blx	r7
 800f882:	3001      	adds	r0, #1
 800f884:	f43f af51 	beq.w	800f72a <_printf_float+0xc2>
 800f888:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f88c:	429a      	cmp	r2, r3
 800f88e:	db02      	blt.n	800f896 <_printf_float+0x22e>
 800f890:	6823      	ldr	r3, [r4, #0]
 800f892:	07d8      	lsls	r0, r3, #31
 800f894:	d510      	bpl.n	800f8b8 <_printf_float+0x250>
 800f896:	ee18 3a10 	vmov	r3, s16
 800f89a:	4652      	mov	r2, sl
 800f89c:	4631      	mov	r1, r6
 800f89e:	4628      	mov	r0, r5
 800f8a0:	47b8      	blx	r7
 800f8a2:	3001      	adds	r0, #1
 800f8a4:	f43f af41 	beq.w	800f72a <_printf_float+0xc2>
 800f8a8:	f04f 0800 	mov.w	r8, #0
 800f8ac:	f104 091a 	add.w	r9, r4, #26
 800f8b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8b2:	3b01      	subs	r3, #1
 800f8b4:	4543      	cmp	r3, r8
 800f8b6:	dc09      	bgt.n	800f8cc <_printf_float+0x264>
 800f8b8:	6823      	ldr	r3, [r4, #0]
 800f8ba:	079b      	lsls	r3, r3, #30
 800f8bc:	f100 8105 	bmi.w	800faca <_printf_float+0x462>
 800f8c0:	68e0      	ldr	r0, [r4, #12]
 800f8c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f8c4:	4298      	cmp	r0, r3
 800f8c6:	bfb8      	it	lt
 800f8c8:	4618      	movlt	r0, r3
 800f8ca:	e730      	b.n	800f72e <_printf_float+0xc6>
 800f8cc:	2301      	movs	r3, #1
 800f8ce:	464a      	mov	r2, r9
 800f8d0:	4631      	mov	r1, r6
 800f8d2:	4628      	mov	r0, r5
 800f8d4:	47b8      	blx	r7
 800f8d6:	3001      	adds	r0, #1
 800f8d8:	f43f af27 	beq.w	800f72a <_printf_float+0xc2>
 800f8dc:	f108 0801 	add.w	r8, r8, #1
 800f8e0:	e7e6      	b.n	800f8b0 <_printf_float+0x248>
 800f8e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	dc39      	bgt.n	800f95c <_printf_float+0x2f4>
 800f8e8:	4a1b      	ldr	r2, [pc, #108]	; (800f958 <_printf_float+0x2f0>)
 800f8ea:	2301      	movs	r3, #1
 800f8ec:	4631      	mov	r1, r6
 800f8ee:	4628      	mov	r0, r5
 800f8f0:	47b8      	blx	r7
 800f8f2:	3001      	adds	r0, #1
 800f8f4:	f43f af19 	beq.w	800f72a <_printf_float+0xc2>
 800f8f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f8fc:	4313      	orrs	r3, r2
 800f8fe:	d102      	bne.n	800f906 <_printf_float+0x29e>
 800f900:	6823      	ldr	r3, [r4, #0]
 800f902:	07d9      	lsls	r1, r3, #31
 800f904:	d5d8      	bpl.n	800f8b8 <_printf_float+0x250>
 800f906:	ee18 3a10 	vmov	r3, s16
 800f90a:	4652      	mov	r2, sl
 800f90c:	4631      	mov	r1, r6
 800f90e:	4628      	mov	r0, r5
 800f910:	47b8      	blx	r7
 800f912:	3001      	adds	r0, #1
 800f914:	f43f af09 	beq.w	800f72a <_printf_float+0xc2>
 800f918:	f04f 0900 	mov.w	r9, #0
 800f91c:	f104 0a1a 	add.w	sl, r4, #26
 800f920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f922:	425b      	negs	r3, r3
 800f924:	454b      	cmp	r3, r9
 800f926:	dc01      	bgt.n	800f92c <_printf_float+0x2c4>
 800f928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f92a:	e792      	b.n	800f852 <_printf_float+0x1ea>
 800f92c:	2301      	movs	r3, #1
 800f92e:	4652      	mov	r2, sl
 800f930:	4631      	mov	r1, r6
 800f932:	4628      	mov	r0, r5
 800f934:	47b8      	blx	r7
 800f936:	3001      	adds	r0, #1
 800f938:	f43f aef7 	beq.w	800f72a <_printf_float+0xc2>
 800f93c:	f109 0901 	add.w	r9, r9, #1
 800f940:	e7ee      	b.n	800f920 <_printf_float+0x2b8>
 800f942:	bf00      	nop
 800f944:	7fefffff 	.word	0x7fefffff
 800f948:	08015141 	.word	0x08015141
 800f94c:	08015145 	.word	0x08015145
 800f950:	0801514d 	.word	0x0801514d
 800f954:	08015149 	.word	0x08015149
 800f958:	08015151 	.word	0x08015151
 800f95c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f95e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f960:	429a      	cmp	r2, r3
 800f962:	bfa8      	it	ge
 800f964:	461a      	movge	r2, r3
 800f966:	2a00      	cmp	r2, #0
 800f968:	4691      	mov	r9, r2
 800f96a:	dc37      	bgt.n	800f9dc <_printf_float+0x374>
 800f96c:	f04f 0b00 	mov.w	fp, #0
 800f970:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f974:	f104 021a 	add.w	r2, r4, #26
 800f978:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f97a:	9305      	str	r3, [sp, #20]
 800f97c:	eba3 0309 	sub.w	r3, r3, r9
 800f980:	455b      	cmp	r3, fp
 800f982:	dc33      	bgt.n	800f9ec <_printf_float+0x384>
 800f984:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f988:	429a      	cmp	r2, r3
 800f98a:	db3b      	blt.n	800fa04 <_printf_float+0x39c>
 800f98c:	6823      	ldr	r3, [r4, #0]
 800f98e:	07da      	lsls	r2, r3, #31
 800f990:	d438      	bmi.n	800fa04 <_printf_float+0x39c>
 800f992:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f994:	9b05      	ldr	r3, [sp, #20]
 800f996:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f998:	1ad3      	subs	r3, r2, r3
 800f99a:	eba2 0901 	sub.w	r9, r2, r1
 800f99e:	4599      	cmp	r9, r3
 800f9a0:	bfa8      	it	ge
 800f9a2:	4699      	movge	r9, r3
 800f9a4:	f1b9 0f00 	cmp.w	r9, #0
 800f9a8:	dc35      	bgt.n	800fa16 <_printf_float+0x3ae>
 800f9aa:	f04f 0800 	mov.w	r8, #0
 800f9ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f9b2:	f104 0a1a 	add.w	sl, r4, #26
 800f9b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f9ba:	1a9b      	subs	r3, r3, r2
 800f9bc:	eba3 0309 	sub.w	r3, r3, r9
 800f9c0:	4543      	cmp	r3, r8
 800f9c2:	f77f af79 	ble.w	800f8b8 <_printf_float+0x250>
 800f9c6:	2301      	movs	r3, #1
 800f9c8:	4652      	mov	r2, sl
 800f9ca:	4631      	mov	r1, r6
 800f9cc:	4628      	mov	r0, r5
 800f9ce:	47b8      	blx	r7
 800f9d0:	3001      	adds	r0, #1
 800f9d2:	f43f aeaa 	beq.w	800f72a <_printf_float+0xc2>
 800f9d6:	f108 0801 	add.w	r8, r8, #1
 800f9da:	e7ec      	b.n	800f9b6 <_printf_float+0x34e>
 800f9dc:	4613      	mov	r3, r2
 800f9de:	4631      	mov	r1, r6
 800f9e0:	4642      	mov	r2, r8
 800f9e2:	4628      	mov	r0, r5
 800f9e4:	47b8      	blx	r7
 800f9e6:	3001      	adds	r0, #1
 800f9e8:	d1c0      	bne.n	800f96c <_printf_float+0x304>
 800f9ea:	e69e      	b.n	800f72a <_printf_float+0xc2>
 800f9ec:	2301      	movs	r3, #1
 800f9ee:	4631      	mov	r1, r6
 800f9f0:	4628      	mov	r0, r5
 800f9f2:	9205      	str	r2, [sp, #20]
 800f9f4:	47b8      	blx	r7
 800f9f6:	3001      	adds	r0, #1
 800f9f8:	f43f ae97 	beq.w	800f72a <_printf_float+0xc2>
 800f9fc:	9a05      	ldr	r2, [sp, #20]
 800f9fe:	f10b 0b01 	add.w	fp, fp, #1
 800fa02:	e7b9      	b.n	800f978 <_printf_float+0x310>
 800fa04:	ee18 3a10 	vmov	r3, s16
 800fa08:	4652      	mov	r2, sl
 800fa0a:	4631      	mov	r1, r6
 800fa0c:	4628      	mov	r0, r5
 800fa0e:	47b8      	blx	r7
 800fa10:	3001      	adds	r0, #1
 800fa12:	d1be      	bne.n	800f992 <_printf_float+0x32a>
 800fa14:	e689      	b.n	800f72a <_printf_float+0xc2>
 800fa16:	9a05      	ldr	r2, [sp, #20]
 800fa18:	464b      	mov	r3, r9
 800fa1a:	4442      	add	r2, r8
 800fa1c:	4631      	mov	r1, r6
 800fa1e:	4628      	mov	r0, r5
 800fa20:	47b8      	blx	r7
 800fa22:	3001      	adds	r0, #1
 800fa24:	d1c1      	bne.n	800f9aa <_printf_float+0x342>
 800fa26:	e680      	b.n	800f72a <_printf_float+0xc2>
 800fa28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa2a:	2a01      	cmp	r2, #1
 800fa2c:	dc01      	bgt.n	800fa32 <_printf_float+0x3ca>
 800fa2e:	07db      	lsls	r3, r3, #31
 800fa30:	d538      	bpl.n	800faa4 <_printf_float+0x43c>
 800fa32:	2301      	movs	r3, #1
 800fa34:	4642      	mov	r2, r8
 800fa36:	4631      	mov	r1, r6
 800fa38:	4628      	mov	r0, r5
 800fa3a:	47b8      	blx	r7
 800fa3c:	3001      	adds	r0, #1
 800fa3e:	f43f ae74 	beq.w	800f72a <_printf_float+0xc2>
 800fa42:	ee18 3a10 	vmov	r3, s16
 800fa46:	4652      	mov	r2, sl
 800fa48:	4631      	mov	r1, r6
 800fa4a:	4628      	mov	r0, r5
 800fa4c:	47b8      	blx	r7
 800fa4e:	3001      	adds	r0, #1
 800fa50:	f43f ae6b 	beq.w	800f72a <_printf_float+0xc2>
 800fa54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fa58:	2200      	movs	r2, #0
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	f7f1 f84c 	bl	8000af8 <__aeabi_dcmpeq>
 800fa60:	b9d8      	cbnz	r0, 800fa9a <_printf_float+0x432>
 800fa62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa64:	f108 0201 	add.w	r2, r8, #1
 800fa68:	3b01      	subs	r3, #1
 800fa6a:	4631      	mov	r1, r6
 800fa6c:	4628      	mov	r0, r5
 800fa6e:	47b8      	blx	r7
 800fa70:	3001      	adds	r0, #1
 800fa72:	d10e      	bne.n	800fa92 <_printf_float+0x42a>
 800fa74:	e659      	b.n	800f72a <_printf_float+0xc2>
 800fa76:	2301      	movs	r3, #1
 800fa78:	4652      	mov	r2, sl
 800fa7a:	4631      	mov	r1, r6
 800fa7c:	4628      	mov	r0, r5
 800fa7e:	47b8      	blx	r7
 800fa80:	3001      	adds	r0, #1
 800fa82:	f43f ae52 	beq.w	800f72a <_printf_float+0xc2>
 800fa86:	f108 0801 	add.w	r8, r8, #1
 800fa8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa8c:	3b01      	subs	r3, #1
 800fa8e:	4543      	cmp	r3, r8
 800fa90:	dcf1      	bgt.n	800fa76 <_printf_float+0x40e>
 800fa92:	464b      	mov	r3, r9
 800fa94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fa98:	e6dc      	b.n	800f854 <_printf_float+0x1ec>
 800fa9a:	f04f 0800 	mov.w	r8, #0
 800fa9e:	f104 0a1a 	add.w	sl, r4, #26
 800faa2:	e7f2      	b.n	800fa8a <_printf_float+0x422>
 800faa4:	2301      	movs	r3, #1
 800faa6:	4642      	mov	r2, r8
 800faa8:	e7df      	b.n	800fa6a <_printf_float+0x402>
 800faaa:	2301      	movs	r3, #1
 800faac:	464a      	mov	r2, r9
 800faae:	4631      	mov	r1, r6
 800fab0:	4628      	mov	r0, r5
 800fab2:	47b8      	blx	r7
 800fab4:	3001      	adds	r0, #1
 800fab6:	f43f ae38 	beq.w	800f72a <_printf_float+0xc2>
 800faba:	f108 0801 	add.w	r8, r8, #1
 800fabe:	68e3      	ldr	r3, [r4, #12]
 800fac0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fac2:	1a5b      	subs	r3, r3, r1
 800fac4:	4543      	cmp	r3, r8
 800fac6:	dcf0      	bgt.n	800faaa <_printf_float+0x442>
 800fac8:	e6fa      	b.n	800f8c0 <_printf_float+0x258>
 800faca:	f04f 0800 	mov.w	r8, #0
 800face:	f104 0919 	add.w	r9, r4, #25
 800fad2:	e7f4      	b.n	800fabe <_printf_float+0x456>

0800fad4 <_printf_common>:
 800fad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fad8:	4616      	mov	r6, r2
 800fada:	4699      	mov	r9, r3
 800fadc:	688a      	ldr	r2, [r1, #8]
 800fade:	690b      	ldr	r3, [r1, #16]
 800fae0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fae4:	4293      	cmp	r3, r2
 800fae6:	bfb8      	it	lt
 800fae8:	4613      	movlt	r3, r2
 800faea:	6033      	str	r3, [r6, #0]
 800faec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800faf0:	4607      	mov	r7, r0
 800faf2:	460c      	mov	r4, r1
 800faf4:	b10a      	cbz	r2, 800fafa <_printf_common+0x26>
 800faf6:	3301      	adds	r3, #1
 800faf8:	6033      	str	r3, [r6, #0]
 800fafa:	6823      	ldr	r3, [r4, #0]
 800fafc:	0699      	lsls	r1, r3, #26
 800fafe:	bf42      	ittt	mi
 800fb00:	6833      	ldrmi	r3, [r6, #0]
 800fb02:	3302      	addmi	r3, #2
 800fb04:	6033      	strmi	r3, [r6, #0]
 800fb06:	6825      	ldr	r5, [r4, #0]
 800fb08:	f015 0506 	ands.w	r5, r5, #6
 800fb0c:	d106      	bne.n	800fb1c <_printf_common+0x48>
 800fb0e:	f104 0a19 	add.w	sl, r4, #25
 800fb12:	68e3      	ldr	r3, [r4, #12]
 800fb14:	6832      	ldr	r2, [r6, #0]
 800fb16:	1a9b      	subs	r3, r3, r2
 800fb18:	42ab      	cmp	r3, r5
 800fb1a:	dc26      	bgt.n	800fb6a <_printf_common+0x96>
 800fb1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fb20:	1e13      	subs	r3, r2, #0
 800fb22:	6822      	ldr	r2, [r4, #0]
 800fb24:	bf18      	it	ne
 800fb26:	2301      	movne	r3, #1
 800fb28:	0692      	lsls	r2, r2, #26
 800fb2a:	d42b      	bmi.n	800fb84 <_printf_common+0xb0>
 800fb2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fb30:	4649      	mov	r1, r9
 800fb32:	4638      	mov	r0, r7
 800fb34:	47c0      	blx	r8
 800fb36:	3001      	adds	r0, #1
 800fb38:	d01e      	beq.n	800fb78 <_printf_common+0xa4>
 800fb3a:	6823      	ldr	r3, [r4, #0]
 800fb3c:	68e5      	ldr	r5, [r4, #12]
 800fb3e:	6832      	ldr	r2, [r6, #0]
 800fb40:	f003 0306 	and.w	r3, r3, #6
 800fb44:	2b04      	cmp	r3, #4
 800fb46:	bf08      	it	eq
 800fb48:	1aad      	subeq	r5, r5, r2
 800fb4a:	68a3      	ldr	r3, [r4, #8]
 800fb4c:	6922      	ldr	r2, [r4, #16]
 800fb4e:	bf0c      	ite	eq
 800fb50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fb54:	2500      	movne	r5, #0
 800fb56:	4293      	cmp	r3, r2
 800fb58:	bfc4      	itt	gt
 800fb5a:	1a9b      	subgt	r3, r3, r2
 800fb5c:	18ed      	addgt	r5, r5, r3
 800fb5e:	2600      	movs	r6, #0
 800fb60:	341a      	adds	r4, #26
 800fb62:	42b5      	cmp	r5, r6
 800fb64:	d11a      	bne.n	800fb9c <_printf_common+0xc8>
 800fb66:	2000      	movs	r0, #0
 800fb68:	e008      	b.n	800fb7c <_printf_common+0xa8>
 800fb6a:	2301      	movs	r3, #1
 800fb6c:	4652      	mov	r2, sl
 800fb6e:	4649      	mov	r1, r9
 800fb70:	4638      	mov	r0, r7
 800fb72:	47c0      	blx	r8
 800fb74:	3001      	adds	r0, #1
 800fb76:	d103      	bne.n	800fb80 <_printf_common+0xac>
 800fb78:	f04f 30ff 	mov.w	r0, #4294967295
 800fb7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb80:	3501      	adds	r5, #1
 800fb82:	e7c6      	b.n	800fb12 <_printf_common+0x3e>
 800fb84:	18e1      	adds	r1, r4, r3
 800fb86:	1c5a      	adds	r2, r3, #1
 800fb88:	2030      	movs	r0, #48	; 0x30
 800fb8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fb8e:	4422      	add	r2, r4
 800fb90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fb94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fb98:	3302      	adds	r3, #2
 800fb9a:	e7c7      	b.n	800fb2c <_printf_common+0x58>
 800fb9c:	2301      	movs	r3, #1
 800fb9e:	4622      	mov	r2, r4
 800fba0:	4649      	mov	r1, r9
 800fba2:	4638      	mov	r0, r7
 800fba4:	47c0      	blx	r8
 800fba6:	3001      	adds	r0, #1
 800fba8:	d0e6      	beq.n	800fb78 <_printf_common+0xa4>
 800fbaa:	3601      	adds	r6, #1
 800fbac:	e7d9      	b.n	800fb62 <_printf_common+0x8e>
	...

0800fbb0 <_printf_i>:
 800fbb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fbb4:	460c      	mov	r4, r1
 800fbb6:	4691      	mov	r9, r2
 800fbb8:	7e27      	ldrb	r7, [r4, #24]
 800fbba:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fbbc:	2f78      	cmp	r7, #120	; 0x78
 800fbbe:	4680      	mov	r8, r0
 800fbc0:	469a      	mov	sl, r3
 800fbc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fbc6:	d807      	bhi.n	800fbd8 <_printf_i+0x28>
 800fbc8:	2f62      	cmp	r7, #98	; 0x62
 800fbca:	d80a      	bhi.n	800fbe2 <_printf_i+0x32>
 800fbcc:	2f00      	cmp	r7, #0
 800fbce:	f000 80d8 	beq.w	800fd82 <_printf_i+0x1d2>
 800fbd2:	2f58      	cmp	r7, #88	; 0x58
 800fbd4:	f000 80a3 	beq.w	800fd1e <_printf_i+0x16e>
 800fbd8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fbdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fbe0:	e03a      	b.n	800fc58 <_printf_i+0xa8>
 800fbe2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fbe6:	2b15      	cmp	r3, #21
 800fbe8:	d8f6      	bhi.n	800fbd8 <_printf_i+0x28>
 800fbea:	a001      	add	r0, pc, #4	; (adr r0, 800fbf0 <_printf_i+0x40>)
 800fbec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800fbf0:	0800fc49 	.word	0x0800fc49
 800fbf4:	0800fc5d 	.word	0x0800fc5d
 800fbf8:	0800fbd9 	.word	0x0800fbd9
 800fbfc:	0800fbd9 	.word	0x0800fbd9
 800fc00:	0800fbd9 	.word	0x0800fbd9
 800fc04:	0800fbd9 	.word	0x0800fbd9
 800fc08:	0800fc5d 	.word	0x0800fc5d
 800fc0c:	0800fbd9 	.word	0x0800fbd9
 800fc10:	0800fbd9 	.word	0x0800fbd9
 800fc14:	0800fbd9 	.word	0x0800fbd9
 800fc18:	0800fbd9 	.word	0x0800fbd9
 800fc1c:	0800fd69 	.word	0x0800fd69
 800fc20:	0800fc8d 	.word	0x0800fc8d
 800fc24:	0800fd4b 	.word	0x0800fd4b
 800fc28:	0800fbd9 	.word	0x0800fbd9
 800fc2c:	0800fbd9 	.word	0x0800fbd9
 800fc30:	0800fd8b 	.word	0x0800fd8b
 800fc34:	0800fbd9 	.word	0x0800fbd9
 800fc38:	0800fc8d 	.word	0x0800fc8d
 800fc3c:	0800fbd9 	.word	0x0800fbd9
 800fc40:	0800fbd9 	.word	0x0800fbd9
 800fc44:	0800fd53 	.word	0x0800fd53
 800fc48:	680b      	ldr	r3, [r1, #0]
 800fc4a:	1d1a      	adds	r2, r3, #4
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	600a      	str	r2, [r1, #0]
 800fc50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fc54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fc58:	2301      	movs	r3, #1
 800fc5a:	e0a3      	b.n	800fda4 <_printf_i+0x1f4>
 800fc5c:	6825      	ldr	r5, [r4, #0]
 800fc5e:	6808      	ldr	r0, [r1, #0]
 800fc60:	062e      	lsls	r6, r5, #24
 800fc62:	f100 0304 	add.w	r3, r0, #4
 800fc66:	d50a      	bpl.n	800fc7e <_printf_i+0xce>
 800fc68:	6805      	ldr	r5, [r0, #0]
 800fc6a:	600b      	str	r3, [r1, #0]
 800fc6c:	2d00      	cmp	r5, #0
 800fc6e:	da03      	bge.n	800fc78 <_printf_i+0xc8>
 800fc70:	232d      	movs	r3, #45	; 0x2d
 800fc72:	426d      	negs	r5, r5
 800fc74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc78:	485e      	ldr	r0, [pc, #376]	; (800fdf4 <_printf_i+0x244>)
 800fc7a:	230a      	movs	r3, #10
 800fc7c:	e019      	b.n	800fcb2 <_printf_i+0x102>
 800fc7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800fc82:	6805      	ldr	r5, [r0, #0]
 800fc84:	600b      	str	r3, [r1, #0]
 800fc86:	bf18      	it	ne
 800fc88:	b22d      	sxthne	r5, r5
 800fc8a:	e7ef      	b.n	800fc6c <_printf_i+0xbc>
 800fc8c:	680b      	ldr	r3, [r1, #0]
 800fc8e:	6825      	ldr	r5, [r4, #0]
 800fc90:	1d18      	adds	r0, r3, #4
 800fc92:	6008      	str	r0, [r1, #0]
 800fc94:	0628      	lsls	r0, r5, #24
 800fc96:	d501      	bpl.n	800fc9c <_printf_i+0xec>
 800fc98:	681d      	ldr	r5, [r3, #0]
 800fc9a:	e002      	b.n	800fca2 <_printf_i+0xf2>
 800fc9c:	0669      	lsls	r1, r5, #25
 800fc9e:	d5fb      	bpl.n	800fc98 <_printf_i+0xe8>
 800fca0:	881d      	ldrh	r5, [r3, #0]
 800fca2:	4854      	ldr	r0, [pc, #336]	; (800fdf4 <_printf_i+0x244>)
 800fca4:	2f6f      	cmp	r7, #111	; 0x6f
 800fca6:	bf0c      	ite	eq
 800fca8:	2308      	moveq	r3, #8
 800fcaa:	230a      	movne	r3, #10
 800fcac:	2100      	movs	r1, #0
 800fcae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fcb2:	6866      	ldr	r6, [r4, #4]
 800fcb4:	60a6      	str	r6, [r4, #8]
 800fcb6:	2e00      	cmp	r6, #0
 800fcb8:	bfa2      	ittt	ge
 800fcba:	6821      	ldrge	r1, [r4, #0]
 800fcbc:	f021 0104 	bicge.w	r1, r1, #4
 800fcc0:	6021      	strge	r1, [r4, #0]
 800fcc2:	b90d      	cbnz	r5, 800fcc8 <_printf_i+0x118>
 800fcc4:	2e00      	cmp	r6, #0
 800fcc6:	d04d      	beq.n	800fd64 <_printf_i+0x1b4>
 800fcc8:	4616      	mov	r6, r2
 800fcca:	fbb5 f1f3 	udiv	r1, r5, r3
 800fcce:	fb03 5711 	mls	r7, r3, r1, r5
 800fcd2:	5dc7      	ldrb	r7, [r0, r7]
 800fcd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fcd8:	462f      	mov	r7, r5
 800fcda:	42bb      	cmp	r3, r7
 800fcdc:	460d      	mov	r5, r1
 800fcde:	d9f4      	bls.n	800fcca <_printf_i+0x11a>
 800fce0:	2b08      	cmp	r3, #8
 800fce2:	d10b      	bne.n	800fcfc <_printf_i+0x14c>
 800fce4:	6823      	ldr	r3, [r4, #0]
 800fce6:	07df      	lsls	r7, r3, #31
 800fce8:	d508      	bpl.n	800fcfc <_printf_i+0x14c>
 800fcea:	6923      	ldr	r3, [r4, #16]
 800fcec:	6861      	ldr	r1, [r4, #4]
 800fcee:	4299      	cmp	r1, r3
 800fcf0:	bfde      	ittt	le
 800fcf2:	2330      	movle	r3, #48	; 0x30
 800fcf4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fcf8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fcfc:	1b92      	subs	r2, r2, r6
 800fcfe:	6122      	str	r2, [r4, #16]
 800fd00:	f8cd a000 	str.w	sl, [sp]
 800fd04:	464b      	mov	r3, r9
 800fd06:	aa03      	add	r2, sp, #12
 800fd08:	4621      	mov	r1, r4
 800fd0a:	4640      	mov	r0, r8
 800fd0c:	f7ff fee2 	bl	800fad4 <_printf_common>
 800fd10:	3001      	adds	r0, #1
 800fd12:	d14c      	bne.n	800fdae <_printf_i+0x1fe>
 800fd14:	f04f 30ff 	mov.w	r0, #4294967295
 800fd18:	b004      	add	sp, #16
 800fd1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd1e:	4835      	ldr	r0, [pc, #212]	; (800fdf4 <_printf_i+0x244>)
 800fd20:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fd24:	6823      	ldr	r3, [r4, #0]
 800fd26:	680e      	ldr	r6, [r1, #0]
 800fd28:	061f      	lsls	r7, r3, #24
 800fd2a:	f856 5b04 	ldr.w	r5, [r6], #4
 800fd2e:	600e      	str	r6, [r1, #0]
 800fd30:	d514      	bpl.n	800fd5c <_printf_i+0x1ac>
 800fd32:	07d9      	lsls	r1, r3, #31
 800fd34:	bf44      	itt	mi
 800fd36:	f043 0320 	orrmi.w	r3, r3, #32
 800fd3a:	6023      	strmi	r3, [r4, #0]
 800fd3c:	b91d      	cbnz	r5, 800fd46 <_printf_i+0x196>
 800fd3e:	6823      	ldr	r3, [r4, #0]
 800fd40:	f023 0320 	bic.w	r3, r3, #32
 800fd44:	6023      	str	r3, [r4, #0]
 800fd46:	2310      	movs	r3, #16
 800fd48:	e7b0      	b.n	800fcac <_printf_i+0xfc>
 800fd4a:	6823      	ldr	r3, [r4, #0]
 800fd4c:	f043 0320 	orr.w	r3, r3, #32
 800fd50:	6023      	str	r3, [r4, #0]
 800fd52:	2378      	movs	r3, #120	; 0x78
 800fd54:	4828      	ldr	r0, [pc, #160]	; (800fdf8 <_printf_i+0x248>)
 800fd56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fd5a:	e7e3      	b.n	800fd24 <_printf_i+0x174>
 800fd5c:	065e      	lsls	r6, r3, #25
 800fd5e:	bf48      	it	mi
 800fd60:	b2ad      	uxthmi	r5, r5
 800fd62:	e7e6      	b.n	800fd32 <_printf_i+0x182>
 800fd64:	4616      	mov	r6, r2
 800fd66:	e7bb      	b.n	800fce0 <_printf_i+0x130>
 800fd68:	680b      	ldr	r3, [r1, #0]
 800fd6a:	6826      	ldr	r6, [r4, #0]
 800fd6c:	6960      	ldr	r0, [r4, #20]
 800fd6e:	1d1d      	adds	r5, r3, #4
 800fd70:	600d      	str	r5, [r1, #0]
 800fd72:	0635      	lsls	r5, r6, #24
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	d501      	bpl.n	800fd7c <_printf_i+0x1cc>
 800fd78:	6018      	str	r0, [r3, #0]
 800fd7a:	e002      	b.n	800fd82 <_printf_i+0x1d2>
 800fd7c:	0671      	lsls	r1, r6, #25
 800fd7e:	d5fb      	bpl.n	800fd78 <_printf_i+0x1c8>
 800fd80:	8018      	strh	r0, [r3, #0]
 800fd82:	2300      	movs	r3, #0
 800fd84:	6123      	str	r3, [r4, #16]
 800fd86:	4616      	mov	r6, r2
 800fd88:	e7ba      	b.n	800fd00 <_printf_i+0x150>
 800fd8a:	680b      	ldr	r3, [r1, #0]
 800fd8c:	1d1a      	adds	r2, r3, #4
 800fd8e:	600a      	str	r2, [r1, #0]
 800fd90:	681e      	ldr	r6, [r3, #0]
 800fd92:	6862      	ldr	r2, [r4, #4]
 800fd94:	2100      	movs	r1, #0
 800fd96:	4630      	mov	r0, r6
 800fd98:	f7f0 fa3a 	bl	8000210 <memchr>
 800fd9c:	b108      	cbz	r0, 800fda2 <_printf_i+0x1f2>
 800fd9e:	1b80      	subs	r0, r0, r6
 800fda0:	6060      	str	r0, [r4, #4]
 800fda2:	6863      	ldr	r3, [r4, #4]
 800fda4:	6123      	str	r3, [r4, #16]
 800fda6:	2300      	movs	r3, #0
 800fda8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fdac:	e7a8      	b.n	800fd00 <_printf_i+0x150>
 800fdae:	6923      	ldr	r3, [r4, #16]
 800fdb0:	4632      	mov	r2, r6
 800fdb2:	4649      	mov	r1, r9
 800fdb4:	4640      	mov	r0, r8
 800fdb6:	47d0      	blx	sl
 800fdb8:	3001      	adds	r0, #1
 800fdba:	d0ab      	beq.n	800fd14 <_printf_i+0x164>
 800fdbc:	6823      	ldr	r3, [r4, #0]
 800fdbe:	079b      	lsls	r3, r3, #30
 800fdc0:	d413      	bmi.n	800fdea <_printf_i+0x23a>
 800fdc2:	68e0      	ldr	r0, [r4, #12]
 800fdc4:	9b03      	ldr	r3, [sp, #12]
 800fdc6:	4298      	cmp	r0, r3
 800fdc8:	bfb8      	it	lt
 800fdca:	4618      	movlt	r0, r3
 800fdcc:	e7a4      	b.n	800fd18 <_printf_i+0x168>
 800fdce:	2301      	movs	r3, #1
 800fdd0:	4632      	mov	r2, r6
 800fdd2:	4649      	mov	r1, r9
 800fdd4:	4640      	mov	r0, r8
 800fdd6:	47d0      	blx	sl
 800fdd8:	3001      	adds	r0, #1
 800fdda:	d09b      	beq.n	800fd14 <_printf_i+0x164>
 800fddc:	3501      	adds	r5, #1
 800fdde:	68e3      	ldr	r3, [r4, #12]
 800fde0:	9903      	ldr	r1, [sp, #12]
 800fde2:	1a5b      	subs	r3, r3, r1
 800fde4:	42ab      	cmp	r3, r5
 800fde6:	dcf2      	bgt.n	800fdce <_printf_i+0x21e>
 800fde8:	e7eb      	b.n	800fdc2 <_printf_i+0x212>
 800fdea:	2500      	movs	r5, #0
 800fdec:	f104 0619 	add.w	r6, r4, #25
 800fdf0:	e7f5      	b.n	800fdde <_printf_i+0x22e>
 800fdf2:	bf00      	nop
 800fdf4:	08015153 	.word	0x08015153
 800fdf8:	08015164 	.word	0x08015164

0800fdfc <_scanf_float>:
 800fdfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe00:	b087      	sub	sp, #28
 800fe02:	4617      	mov	r7, r2
 800fe04:	9303      	str	r3, [sp, #12]
 800fe06:	688b      	ldr	r3, [r1, #8]
 800fe08:	1e5a      	subs	r2, r3, #1
 800fe0a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800fe0e:	bf83      	ittte	hi
 800fe10:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800fe14:	195b      	addhi	r3, r3, r5
 800fe16:	9302      	strhi	r3, [sp, #8]
 800fe18:	2300      	movls	r3, #0
 800fe1a:	bf86      	itte	hi
 800fe1c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fe20:	608b      	strhi	r3, [r1, #8]
 800fe22:	9302      	strls	r3, [sp, #8]
 800fe24:	680b      	ldr	r3, [r1, #0]
 800fe26:	468b      	mov	fp, r1
 800fe28:	2500      	movs	r5, #0
 800fe2a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800fe2e:	f84b 3b1c 	str.w	r3, [fp], #28
 800fe32:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800fe36:	4680      	mov	r8, r0
 800fe38:	460c      	mov	r4, r1
 800fe3a:	465e      	mov	r6, fp
 800fe3c:	46aa      	mov	sl, r5
 800fe3e:	46a9      	mov	r9, r5
 800fe40:	9501      	str	r5, [sp, #4]
 800fe42:	68a2      	ldr	r2, [r4, #8]
 800fe44:	b152      	cbz	r2, 800fe5c <_scanf_float+0x60>
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	781b      	ldrb	r3, [r3, #0]
 800fe4a:	2b4e      	cmp	r3, #78	; 0x4e
 800fe4c:	d864      	bhi.n	800ff18 <_scanf_float+0x11c>
 800fe4e:	2b40      	cmp	r3, #64	; 0x40
 800fe50:	d83c      	bhi.n	800fecc <_scanf_float+0xd0>
 800fe52:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800fe56:	b2c8      	uxtb	r0, r1
 800fe58:	280e      	cmp	r0, #14
 800fe5a:	d93a      	bls.n	800fed2 <_scanf_float+0xd6>
 800fe5c:	f1b9 0f00 	cmp.w	r9, #0
 800fe60:	d003      	beq.n	800fe6a <_scanf_float+0x6e>
 800fe62:	6823      	ldr	r3, [r4, #0]
 800fe64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fe68:	6023      	str	r3, [r4, #0]
 800fe6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fe6e:	f1ba 0f01 	cmp.w	sl, #1
 800fe72:	f200 8113 	bhi.w	801009c <_scanf_float+0x2a0>
 800fe76:	455e      	cmp	r6, fp
 800fe78:	f200 8105 	bhi.w	8010086 <_scanf_float+0x28a>
 800fe7c:	2501      	movs	r5, #1
 800fe7e:	4628      	mov	r0, r5
 800fe80:	b007      	add	sp, #28
 800fe82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe86:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800fe8a:	2a0d      	cmp	r2, #13
 800fe8c:	d8e6      	bhi.n	800fe5c <_scanf_float+0x60>
 800fe8e:	a101      	add	r1, pc, #4	; (adr r1, 800fe94 <_scanf_float+0x98>)
 800fe90:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fe94:	0800ffd3 	.word	0x0800ffd3
 800fe98:	0800fe5d 	.word	0x0800fe5d
 800fe9c:	0800fe5d 	.word	0x0800fe5d
 800fea0:	0800fe5d 	.word	0x0800fe5d
 800fea4:	08010033 	.word	0x08010033
 800fea8:	0801000b 	.word	0x0801000b
 800feac:	0800fe5d 	.word	0x0800fe5d
 800feb0:	0800fe5d 	.word	0x0800fe5d
 800feb4:	0800ffe1 	.word	0x0800ffe1
 800feb8:	0800fe5d 	.word	0x0800fe5d
 800febc:	0800fe5d 	.word	0x0800fe5d
 800fec0:	0800fe5d 	.word	0x0800fe5d
 800fec4:	0800fe5d 	.word	0x0800fe5d
 800fec8:	0800ff99 	.word	0x0800ff99
 800fecc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800fed0:	e7db      	b.n	800fe8a <_scanf_float+0x8e>
 800fed2:	290e      	cmp	r1, #14
 800fed4:	d8c2      	bhi.n	800fe5c <_scanf_float+0x60>
 800fed6:	a001      	add	r0, pc, #4	; (adr r0, 800fedc <_scanf_float+0xe0>)
 800fed8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800fedc:	0800ff8b 	.word	0x0800ff8b
 800fee0:	0800fe5d 	.word	0x0800fe5d
 800fee4:	0800ff8b 	.word	0x0800ff8b
 800fee8:	0801001f 	.word	0x0801001f
 800feec:	0800fe5d 	.word	0x0800fe5d
 800fef0:	0800ff39 	.word	0x0800ff39
 800fef4:	0800ff75 	.word	0x0800ff75
 800fef8:	0800ff75 	.word	0x0800ff75
 800fefc:	0800ff75 	.word	0x0800ff75
 800ff00:	0800ff75 	.word	0x0800ff75
 800ff04:	0800ff75 	.word	0x0800ff75
 800ff08:	0800ff75 	.word	0x0800ff75
 800ff0c:	0800ff75 	.word	0x0800ff75
 800ff10:	0800ff75 	.word	0x0800ff75
 800ff14:	0800ff75 	.word	0x0800ff75
 800ff18:	2b6e      	cmp	r3, #110	; 0x6e
 800ff1a:	d809      	bhi.n	800ff30 <_scanf_float+0x134>
 800ff1c:	2b60      	cmp	r3, #96	; 0x60
 800ff1e:	d8b2      	bhi.n	800fe86 <_scanf_float+0x8a>
 800ff20:	2b54      	cmp	r3, #84	; 0x54
 800ff22:	d077      	beq.n	8010014 <_scanf_float+0x218>
 800ff24:	2b59      	cmp	r3, #89	; 0x59
 800ff26:	d199      	bne.n	800fe5c <_scanf_float+0x60>
 800ff28:	2d07      	cmp	r5, #7
 800ff2a:	d197      	bne.n	800fe5c <_scanf_float+0x60>
 800ff2c:	2508      	movs	r5, #8
 800ff2e:	e029      	b.n	800ff84 <_scanf_float+0x188>
 800ff30:	2b74      	cmp	r3, #116	; 0x74
 800ff32:	d06f      	beq.n	8010014 <_scanf_float+0x218>
 800ff34:	2b79      	cmp	r3, #121	; 0x79
 800ff36:	e7f6      	b.n	800ff26 <_scanf_float+0x12a>
 800ff38:	6821      	ldr	r1, [r4, #0]
 800ff3a:	05c8      	lsls	r0, r1, #23
 800ff3c:	d51a      	bpl.n	800ff74 <_scanf_float+0x178>
 800ff3e:	9b02      	ldr	r3, [sp, #8]
 800ff40:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ff44:	6021      	str	r1, [r4, #0]
 800ff46:	f109 0901 	add.w	r9, r9, #1
 800ff4a:	b11b      	cbz	r3, 800ff54 <_scanf_float+0x158>
 800ff4c:	3b01      	subs	r3, #1
 800ff4e:	3201      	adds	r2, #1
 800ff50:	9302      	str	r3, [sp, #8]
 800ff52:	60a2      	str	r2, [r4, #8]
 800ff54:	68a3      	ldr	r3, [r4, #8]
 800ff56:	3b01      	subs	r3, #1
 800ff58:	60a3      	str	r3, [r4, #8]
 800ff5a:	6923      	ldr	r3, [r4, #16]
 800ff5c:	3301      	adds	r3, #1
 800ff5e:	6123      	str	r3, [r4, #16]
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	3b01      	subs	r3, #1
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	607b      	str	r3, [r7, #4]
 800ff68:	f340 8084 	ble.w	8010074 <_scanf_float+0x278>
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	3301      	adds	r3, #1
 800ff70:	603b      	str	r3, [r7, #0]
 800ff72:	e766      	b.n	800fe42 <_scanf_float+0x46>
 800ff74:	eb1a 0f05 	cmn.w	sl, r5
 800ff78:	f47f af70 	bne.w	800fe5c <_scanf_float+0x60>
 800ff7c:	6822      	ldr	r2, [r4, #0]
 800ff7e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ff82:	6022      	str	r2, [r4, #0]
 800ff84:	f806 3b01 	strb.w	r3, [r6], #1
 800ff88:	e7e4      	b.n	800ff54 <_scanf_float+0x158>
 800ff8a:	6822      	ldr	r2, [r4, #0]
 800ff8c:	0610      	lsls	r0, r2, #24
 800ff8e:	f57f af65 	bpl.w	800fe5c <_scanf_float+0x60>
 800ff92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ff96:	e7f4      	b.n	800ff82 <_scanf_float+0x186>
 800ff98:	f1ba 0f00 	cmp.w	sl, #0
 800ff9c:	d10e      	bne.n	800ffbc <_scanf_float+0x1c0>
 800ff9e:	f1b9 0f00 	cmp.w	r9, #0
 800ffa2:	d10e      	bne.n	800ffc2 <_scanf_float+0x1c6>
 800ffa4:	6822      	ldr	r2, [r4, #0]
 800ffa6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ffaa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ffae:	d108      	bne.n	800ffc2 <_scanf_float+0x1c6>
 800ffb0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ffb4:	6022      	str	r2, [r4, #0]
 800ffb6:	f04f 0a01 	mov.w	sl, #1
 800ffba:	e7e3      	b.n	800ff84 <_scanf_float+0x188>
 800ffbc:	f1ba 0f02 	cmp.w	sl, #2
 800ffc0:	d055      	beq.n	801006e <_scanf_float+0x272>
 800ffc2:	2d01      	cmp	r5, #1
 800ffc4:	d002      	beq.n	800ffcc <_scanf_float+0x1d0>
 800ffc6:	2d04      	cmp	r5, #4
 800ffc8:	f47f af48 	bne.w	800fe5c <_scanf_float+0x60>
 800ffcc:	3501      	adds	r5, #1
 800ffce:	b2ed      	uxtb	r5, r5
 800ffd0:	e7d8      	b.n	800ff84 <_scanf_float+0x188>
 800ffd2:	f1ba 0f01 	cmp.w	sl, #1
 800ffd6:	f47f af41 	bne.w	800fe5c <_scanf_float+0x60>
 800ffda:	f04f 0a02 	mov.w	sl, #2
 800ffde:	e7d1      	b.n	800ff84 <_scanf_float+0x188>
 800ffe0:	b97d      	cbnz	r5, 8010002 <_scanf_float+0x206>
 800ffe2:	f1b9 0f00 	cmp.w	r9, #0
 800ffe6:	f47f af3c 	bne.w	800fe62 <_scanf_float+0x66>
 800ffea:	6822      	ldr	r2, [r4, #0]
 800ffec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fff0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fff4:	f47f af39 	bne.w	800fe6a <_scanf_float+0x6e>
 800fff8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fffc:	6022      	str	r2, [r4, #0]
 800fffe:	2501      	movs	r5, #1
 8010000:	e7c0      	b.n	800ff84 <_scanf_float+0x188>
 8010002:	2d03      	cmp	r5, #3
 8010004:	d0e2      	beq.n	800ffcc <_scanf_float+0x1d0>
 8010006:	2d05      	cmp	r5, #5
 8010008:	e7de      	b.n	800ffc8 <_scanf_float+0x1cc>
 801000a:	2d02      	cmp	r5, #2
 801000c:	f47f af26 	bne.w	800fe5c <_scanf_float+0x60>
 8010010:	2503      	movs	r5, #3
 8010012:	e7b7      	b.n	800ff84 <_scanf_float+0x188>
 8010014:	2d06      	cmp	r5, #6
 8010016:	f47f af21 	bne.w	800fe5c <_scanf_float+0x60>
 801001a:	2507      	movs	r5, #7
 801001c:	e7b2      	b.n	800ff84 <_scanf_float+0x188>
 801001e:	6822      	ldr	r2, [r4, #0]
 8010020:	0591      	lsls	r1, r2, #22
 8010022:	f57f af1b 	bpl.w	800fe5c <_scanf_float+0x60>
 8010026:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801002a:	6022      	str	r2, [r4, #0]
 801002c:	f8cd 9004 	str.w	r9, [sp, #4]
 8010030:	e7a8      	b.n	800ff84 <_scanf_float+0x188>
 8010032:	6822      	ldr	r2, [r4, #0]
 8010034:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010038:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801003c:	d006      	beq.n	801004c <_scanf_float+0x250>
 801003e:	0550      	lsls	r0, r2, #21
 8010040:	f57f af0c 	bpl.w	800fe5c <_scanf_float+0x60>
 8010044:	f1b9 0f00 	cmp.w	r9, #0
 8010048:	f43f af0f 	beq.w	800fe6a <_scanf_float+0x6e>
 801004c:	0591      	lsls	r1, r2, #22
 801004e:	bf58      	it	pl
 8010050:	9901      	ldrpl	r1, [sp, #4]
 8010052:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010056:	bf58      	it	pl
 8010058:	eba9 0101 	subpl.w	r1, r9, r1
 801005c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010060:	bf58      	it	pl
 8010062:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010066:	6022      	str	r2, [r4, #0]
 8010068:	f04f 0900 	mov.w	r9, #0
 801006c:	e78a      	b.n	800ff84 <_scanf_float+0x188>
 801006e:	f04f 0a03 	mov.w	sl, #3
 8010072:	e787      	b.n	800ff84 <_scanf_float+0x188>
 8010074:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010078:	4639      	mov	r1, r7
 801007a:	4640      	mov	r0, r8
 801007c:	4798      	blx	r3
 801007e:	2800      	cmp	r0, #0
 8010080:	f43f aedf 	beq.w	800fe42 <_scanf_float+0x46>
 8010084:	e6ea      	b.n	800fe5c <_scanf_float+0x60>
 8010086:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801008a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801008e:	463a      	mov	r2, r7
 8010090:	4640      	mov	r0, r8
 8010092:	4798      	blx	r3
 8010094:	6923      	ldr	r3, [r4, #16]
 8010096:	3b01      	subs	r3, #1
 8010098:	6123      	str	r3, [r4, #16]
 801009a:	e6ec      	b.n	800fe76 <_scanf_float+0x7a>
 801009c:	1e6b      	subs	r3, r5, #1
 801009e:	2b06      	cmp	r3, #6
 80100a0:	d825      	bhi.n	80100ee <_scanf_float+0x2f2>
 80100a2:	2d02      	cmp	r5, #2
 80100a4:	d836      	bhi.n	8010114 <_scanf_float+0x318>
 80100a6:	455e      	cmp	r6, fp
 80100a8:	f67f aee8 	bls.w	800fe7c <_scanf_float+0x80>
 80100ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80100b0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80100b4:	463a      	mov	r2, r7
 80100b6:	4640      	mov	r0, r8
 80100b8:	4798      	blx	r3
 80100ba:	6923      	ldr	r3, [r4, #16]
 80100bc:	3b01      	subs	r3, #1
 80100be:	6123      	str	r3, [r4, #16]
 80100c0:	e7f1      	b.n	80100a6 <_scanf_float+0x2aa>
 80100c2:	9802      	ldr	r0, [sp, #8]
 80100c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80100c8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80100cc:	9002      	str	r0, [sp, #8]
 80100ce:	463a      	mov	r2, r7
 80100d0:	4640      	mov	r0, r8
 80100d2:	4798      	blx	r3
 80100d4:	6923      	ldr	r3, [r4, #16]
 80100d6:	3b01      	subs	r3, #1
 80100d8:	6123      	str	r3, [r4, #16]
 80100da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80100de:	fa5f fa8a 	uxtb.w	sl, sl
 80100e2:	f1ba 0f02 	cmp.w	sl, #2
 80100e6:	d1ec      	bne.n	80100c2 <_scanf_float+0x2c6>
 80100e8:	3d03      	subs	r5, #3
 80100ea:	b2ed      	uxtb	r5, r5
 80100ec:	1b76      	subs	r6, r6, r5
 80100ee:	6823      	ldr	r3, [r4, #0]
 80100f0:	05da      	lsls	r2, r3, #23
 80100f2:	d52f      	bpl.n	8010154 <_scanf_float+0x358>
 80100f4:	055b      	lsls	r3, r3, #21
 80100f6:	d510      	bpl.n	801011a <_scanf_float+0x31e>
 80100f8:	455e      	cmp	r6, fp
 80100fa:	f67f aebf 	bls.w	800fe7c <_scanf_float+0x80>
 80100fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010102:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010106:	463a      	mov	r2, r7
 8010108:	4640      	mov	r0, r8
 801010a:	4798      	blx	r3
 801010c:	6923      	ldr	r3, [r4, #16]
 801010e:	3b01      	subs	r3, #1
 8010110:	6123      	str	r3, [r4, #16]
 8010112:	e7f1      	b.n	80100f8 <_scanf_float+0x2fc>
 8010114:	46aa      	mov	sl, r5
 8010116:	9602      	str	r6, [sp, #8]
 8010118:	e7df      	b.n	80100da <_scanf_float+0x2de>
 801011a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801011e:	6923      	ldr	r3, [r4, #16]
 8010120:	2965      	cmp	r1, #101	; 0x65
 8010122:	f103 33ff 	add.w	r3, r3, #4294967295
 8010126:	f106 35ff 	add.w	r5, r6, #4294967295
 801012a:	6123      	str	r3, [r4, #16]
 801012c:	d00c      	beq.n	8010148 <_scanf_float+0x34c>
 801012e:	2945      	cmp	r1, #69	; 0x45
 8010130:	d00a      	beq.n	8010148 <_scanf_float+0x34c>
 8010132:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010136:	463a      	mov	r2, r7
 8010138:	4640      	mov	r0, r8
 801013a:	4798      	blx	r3
 801013c:	6923      	ldr	r3, [r4, #16]
 801013e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010142:	3b01      	subs	r3, #1
 8010144:	1eb5      	subs	r5, r6, #2
 8010146:	6123      	str	r3, [r4, #16]
 8010148:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801014c:	463a      	mov	r2, r7
 801014e:	4640      	mov	r0, r8
 8010150:	4798      	blx	r3
 8010152:	462e      	mov	r6, r5
 8010154:	6825      	ldr	r5, [r4, #0]
 8010156:	f015 0510 	ands.w	r5, r5, #16
 801015a:	d158      	bne.n	801020e <_scanf_float+0x412>
 801015c:	7035      	strb	r5, [r6, #0]
 801015e:	6823      	ldr	r3, [r4, #0]
 8010160:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010168:	d11c      	bne.n	80101a4 <_scanf_float+0x3a8>
 801016a:	9b01      	ldr	r3, [sp, #4]
 801016c:	454b      	cmp	r3, r9
 801016e:	eba3 0209 	sub.w	r2, r3, r9
 8010172:	d124      	bne.n	80101be <_scanf_float+0x3c2>
 8010174:	2200      	movs	r2, #0
 8010176:	4659      	mov	r1, fp
 8010178:	4640      	mov	r0, r8
 801017a:	f000 feb3 	bl	8010ee4 <_strtod_r>
 801017e:	9b03      	ldr	r3, [sp, #12]
 8010180:	6821      	ldr	r1, [r4, #0]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	f011 0f02 	tst.w	r1, #2
 8010188:	ec57 6b10 	vmov	r6, r7, d0
 801018c:	f103 0204 	add.w	r2, r3, #4
 8010190:	d020      	beq.n	80101d4 <_scanf_float+0x3d8>
 8010192:	9903      	ldr	r1, [sp, #12]
 8010194:	600a      	str	r2, [r1, #0]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	e9c3 6700 	strd	r6, r7, [r3]
 801019c:	68e3      	ldr	r3, [r4, #12]
 801019e:	3301      	adds	r3, #1
 80101a0:	60e3      	str	r3, [r4, #12]
 80101a2:	e66c      	b.n	800fe7e <_scanf_float+0x82>
 80101a4:	9b04      	ldr	r3, [sp, #16]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d0e4      	beq.n	8010174 <_scanf_float+0x378>
 80101aa:	9905      	ldr	r1, [sp, #20]
 80101ac:	230a      	movs	r3, #10
 80101ae:	462a      	mov	r2, r5
 80101b0:	3101      	adds	r1, #1
 80101b2:	4640      	mov	r0, r8
 80101b4:	f000 ff20 	bl	8010ff8 <_strtol_r>
 80101b8:	9b04      	ldr	r3, [sp, #16]
 80101ba:	9e05      	ldr	r6, [sp, #20]
 80101bc:	1ac2      	subs	r2, r0, r3
 80101be:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80101c2:	429e      	cmp	r6, r3
 80101c4:	bf28      	it	cs
 80101c6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80101ca:	4912      	ldr	r1, [pc, #72]	; (8010214 <_scanf_float+0x418>)
 80101cc:	4630      	mov	r0, r6
 80101ce:	f000 f843 	bl	8010258 <siprintf>
 80101d2:	e7cf      	b.n	8010174 <_scanf_float+0x378>
 80101d4:	f011 0f04 	tst.w	r1, #4
 80101d8:	9903      	ldr	r1, [sp, #12]
 80101da:	600a      	str	r2, [r1, #0]
 80101dc:	d1db      	bne.n	8010196 <_scanf_float+0x39a>
 80101de:	f8d3 8000 	ldr.w	r8, [r3]
 80101e2:	ee10 2a10 	vmov	r2, s0
 80101e6:	ee10 0a10 	vmov	r0, s0
 80101ea:	463b      	mov	r3, r7
 80101ec:	4639      	mov	r1, r7
 80101ee:	f7f0 fcb5 	bl	8000b5c <__aeabi_dcmpun>
 80101f2:	b128      	cbz	r0, 8010200 <_scanf_float+0x404>
 80101f4:	4808      	ldr	r0, [pc, #32]	; (8010218 <_scanf_float+0x41c>)
 80101f6:	f000 f829 	bl	801024c <nanf>
 80101fa:	ed88 0a00 	vstr	s0, [r8]
 80101fe:	e7cd      	b.n	801019c <_scanf_float+0x3a0>
 8010200:	4630      	mov	r0, r6
 8010202:	4639      	mov	r1, r7
 8010204:	f7f0 fd08 	bl	8000c18 <__aeabi_d2f>
 8010208:	f8c8 0000 	str.w	r0, [r8]
 801020c:	e7c6      	b.n	801019c <_scanf_float+0x3a0>
 801020e:	2500      	movs	r5, #0
 8010210:	e635      	b.n	800fe7e <_scanf_float+0x82>
 8010212:	bf00      	nop
 8010214:	08015175 	.word	0x08015175
 8010218:	08015027 	.word	0x08015027

0801021c <iprintf>:
 801021c:	b40f      	push	{r0, r1, r2, r3}
 801021e:	4b0a      	ldr	r3, [pc, #40]	; (8010248 <iprintf+0x2c>)
 8010220:	b513      	push	{r0, r1, r4, lr}
 8010222:	681c      	ldr	r4, [r3, #0]
 8010224:	b124      	cbz	r4, 8010230 <iprintf+0x14>
 8010226:	69a3      	ldr	r3, [r4, #24]
 8010228:	b913      	cbnz	r3, 8010230 <iprintf+0x14>
 801022a:	4620      	mov	r0, r4
 801022c:	f001 ff4a 	bl	80120c4 <__sinit>
 8010230:	ab05      	add	r3, sp, #20
 8010232:	9a04      	ldr	r2, [sp, #16]
 8010234:	68a1      	ldr	r1, [r4, #8]
 8010236:	9301      	str	r3, [sp, #4]
 8010238:	4620      	mov	r0, r4
 801023a:	f7ff f845 	bl	800f2c8 <_vfiprintf_r>
 801023e:	b002      	add	sp, #8
 8010240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010244:	b004      	add	sp, #16
 8010246:	4770      	bx	lr
 8010248:	20000058 	.word	0x20000058

0801024c <nanf>:
 801024c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010254 <nanf+0x8>
 8010250:	4770      	bx	lr
 8010252:	bf00      	nop
 8010254:	7fc00000 	.word	0x7fc00000

08010258 <siprintf>:
 8010258:	b40e      	push	{r1, r2, r3}
 801025a:	b500      	push	{lr}
 801025c:	b09c      	sub	sp, #112	; 0x70
 801025e:	ab1d      	add	r3, sp, #116	; 0x74
 8010260:	9002      	str	r0, [sp, #8]
 8010262:	9006      	str	r0, [sp, #24]
 8010264:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010268:	4809      	ldr	r0, [pc, #36]	; (8010290 <siprintf+0x38>)
 801026a:	9107      	str	r1, [sp, #28]
 801026c:	9104      	str	r1, [sp, #16]
 801026e:	4909      	ldr	r1, [pc, #36]	; (8010294 <siprintf+0x3c>)
 8010270:	f853 2b04 	ldr.w	r2, [r3], #4
 8010274:	9105      	str	r1, [sp, #20]
 8010276:	6800      	ldr	r0, [r0, #0]
 8010278:	9301      	str	r3, [sp, #4]
 801027a:	a902      	add	r1, sp, #8
 801027c:	f003 f9c4 	bl	8013608 <_svfiprintf_r>
 8010280:	9b02      	ldr	r3, [sp, #8]
 8010282:	2200      	movs	r2, #0
 8010284:	701a      	strb	r2, [r3, #0]
 8010286:	b01c      	add	sp, #112	; 0x70
 8010288:	f85d eb04 	ldr.w	lr, [sp], #4
 801028c:	b003      	add	sp, #12
 801028e:	4770      	bx	lr
 8010290:	20000058 	.word	0x20000058
 8010294:	ffff0208 	.word	0xffff0208

08010298 <sulp>:
 8010298:	b570      	push	{r4, r5, r6, lr}
 801029a:	4604      	mov	r4, r0
 801029c:	460d      	mov	r5, r1
 801029e:	ec45 4b10 	vmov	d0, r4, r5
 80102a2:	4616      	mov	r6, r2
 80102a4:	f002 ff26 	bl	80130f4 <__ulp>
 80102a8:	ec51 0b10 	vmov	r0, r1, d0
 80102ac:	b17e      	cbz	r6, 80102ce <sulp+0x36>
 80102ae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80102b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	dd09      	ble.n	80102ce <sulp+0x36>
 80102ba:	051b      	lsls	r3, r3, #20
 80102bc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80102c0:	2400      	movs	r4, #0
 80102c2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80102c6:	4622      	mov	r2, r4
 80102c8:	462b      	mov	r3, r5
 80102ca:	f7f0 f9ad 	bl	8000628 <__aeabi_dmul>
 80102ce:	bd70      	pop	{r4, r5, r6, pc}

080102d0 <_strtod_l>:
 80102d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102d4:	b0a3      	sub	sp, #140	; 0x8c
 80102d6:	461f      	mov	r7, r3
 80102d8:	2300      	movs	r3, #0
 80102da:	931e      	str	r3, [sp, #120]	; 0x78
 80102dc:	4ba4      	ldr	r3, [pc, #656]	; (8010570 <_strtod_l+0x2a0>)
 80102de:	9219      	str	r2, [sp, #100]	; 0x64
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	9307      	str	r3, [sp, #28]
 80102e4:	4604      	mov	r4, r0
 80102e6:	4618      	mov	r0, r3
 80102e8:	4688      	mov	r8, r1
 80102ea:	f7ef ff83 	bl	80001f4 <strlen>
 80102ee:	f04f 0a00 	mov.w	sl, #0
 80102f2:	4605      	mov	r5, r0
 80102f4:	f04f 0b00 	mov.w	fp, #0
 80102f8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80102fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80102fe:	781a      	ldrb	r2, [r3, #0]
 8010300:	2a2b      	cmp	r2, #43	; 0x2b
 8010302:	d04c      	beq.n	801039e <_strtod_l+0xce>
 8010304:	d839      	bhi.n	801037a <_strtod_l+0xaa>
 8010306:	2a0d      	cmp	r2, #13
 8010308:	d832      	bhi.n	8010370 <_strtod_l+0xa0>
 801030a:	2a08      	cmp	r2, #8
 801030c:	d832      	bhi.n	8010374 <_strtod_l+0xa4>
 801030e:	2a00      	cmp	r2, #0
 8010310:	d03c      	beq.n	801038c <_strtod_l+0xbc>
 8010312:	2300      	movs	r3, #0
 8010314:	930e      	str	r3, [sp, #56]	; 0x38
 8010316:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8010318:	7833      	ldrb	r3, [r6, #0]
 801031a:	2b30      	cmp	r3, #48	; 0x30
 801031c:	f040 80b4 	bne.w	8010488 <_strtod_l+0x1b8>
 8010320:	7873      	ldrb	r3, [r6, #1]
 8010322:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010326:	2b58      	cmp	r3, #88	; 0x58
 8010328:	d16c      	bne.n	8010404 <_strtod_l+0x134>
 801032a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801032c:	9301      	str	r3, [sp, #4]
 801032e:	ab1e      	add	r3, sp, #120	; 0x78
 8010330:	9702      	str	r7, [sp, #8]
 8010332:	9300      	str	r3, [sp, #0]
 8010334:	4a8f      	ldr	r2, [pc, #572]	; (8010574 <_strtod_l+0x2a4>)
 8010336:	ab1f      	add	r3, sp, #124	; 0x7c
 8010338:	a91d      	add	r1, sp, #116	; 0x74
 801033a:	4620      	mov	r0, r4
 801033c:	f001 ffc6 	bl	80122cc <__gethex>
 8010340:	f010 0707 	ands.w	r7, r0, #7
 8010344:	4605      	mov	r5, r0
 8010346:	d005      	beq.n	8010354 <_strtod_l+0x84>
 8010348:	2f06      	cmp	r7, #6
 801034a:	d12a      	bne.n	80103a2 <_strtod_l+0xd2>
 801034c:	3601      	adds	r6, #1
 801034e:	2300      	movs	r3, #0
 8010350:	961d      	str	r6, [sp, #116]	; 0x74
 8010352:	930e      	str	r3, [sp, #56]	; 0x38
 8010354:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010356:	2b00      	cmp	r3, #0
 8010358:	f040 8596 	bne.w	8010e88 <_strtod_l+0xbb8>
 801035c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801035e:	b1db      	cbz	r3, 8010398 <_strtod_l+0xc8>
 8010360:	4652      	mov	r2, sl
 8010362:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010366:	ec43 2b10 	vmov	d0, r2, r3
 801036a:	b023      	add	sp, #140	; 0x8c
 801036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010370:	2a20      	cmp	r2, #32
 8010372:	d1ce      	bne.n	8010312 <_strtod_l+0x42>
 8010374:	3301      	adds	r3, #1
 8010376:	931d      	str	r3, [sp, #116]	; 0x74
 8010378:	e7c0      	b.n	80102fc <_strtod_l+0x2c>
 801037a:	2a2d      	cmp	r2, #45	; 0x2d
 801037c:	d1c9      	bne.n	8010312 <_strtod_l+0x42>
 801037e:	2201      	movs	r2, #1
 8010380:	920e      	str	r2, [sp, #56]	; 0x38
 8010382:	1c5a      	adds	r2, r3, #1
 8010384:	921d      	str	r2, [sp, #116]	; 0x74
 8010386:	785b      	ldrb	r3, [r3, #1]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d1c4      	bne.n	8010316 <_strtod_l+0x46>
 801038c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801038e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010392:	2b00      	cmp	r3, #0
 8010394:	f040 8576 	bne.w	8010e84 <_strtod_l+0xbb4>
 8010398:	4652      	mov	r2, sl
 801039a:	465b      	mov	r3, fp
 801039c:	e7e3      	b.n	8010366 <_strtod_l+0x96>
 801039e:	2200      	movs	r2, #0
 80103a0:	e7ee      	b.n	8010380 <_strtod_l+0xb0>
 80103a2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80103a4:	b13a      	cbz	r2, 80103b6 <_strtod_l+0xe6>
 80103a6:	2135      	movs	r1, #53	; 0x35
 80103a8:	a820      	add	r0, sp, #128	; 0x80
 80103aa:	f002 ffae 	bl	801330a <__copybits>
 80103ae:	991e      	ldr	r1, [sp, #120]	; 0x78
 80103b0:	4620      	mov	r0, r4
 80103b2:	f002 fb73 	bl	8012a9c <_Bfree>
 80103b6:	3f01      	subs	r7, #1
 80103b8:	2f05      	cmp	r7, #5
 80103ba:	d807      	bhi.n	80103cc <_strtod_l+0xfc>
 80103bc:	e8df f007 	tbb	[pc, r7]
 80103c0:	1d180b0e 	.word	0x1d180b0e
 80103c4:	030e      	.short	0x030e
 80103c6:	f04f 0b00 	mov.w	fp, #0
 80103ca:	46da      	mov	sl, fp
 80103cc:	0728      	lsls	r0, r5, #28
 80103ce:	d5c1      	bpl.n	8010354 <_strtod_l+0x84>
 80103d0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80103d4:	e7be      	b.n	8010354 <_strtod_l+0x84>
 80103d6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80103da:	e7f7      	b.n	80103cc <_strtod_l+0xfc>
 80103dc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80103e0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80103e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80103e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80103ea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80103ee:	e7ed      	b.n	80103cc <_strtod_l+0xfc>
 80103f0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8010578 <_strtod_l+0x2a8>
 80103f4:	f04f 0a00 	mov.w	sl, #0
 80103f8:	e7e8      	b.n	80103cc <_strtod_l+0xfc>
 80103fa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80103fe:	f04f 3aff 	mov.w	sl, #4294967295
 8010402:	e7e3      	b.n	80103cc <_strtod_l+0xfc>
 8010404:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010406:	1c5a      	adds	r2, r3, #1
 8010408:	921d      	str	r2, [sp, #116]	; 0x74
 801040a:	785b      	ldrb	r3, [r3, #1]
 801040c:	2b30      	cmp	r3, #48	; 0x30
 801040e:	d0f9      	beq.n	8010404 <_strtod_l+0x134>
 8010410:	2b00      	cmp	r3, #0
 8010412:	d09f      	beq.n	8010354 <_strtod_l+0x84>
 8010414:	2301      	movs	r3, #1
 8010416:	f04f 0900 	mov.w	r9, #0
 801041a:	9304      	str	r3, [sp, #16]
 801041c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801041e:	930a      	str	r3, [sp, #40]	; 0x28
 8010420:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8010424:	464f      	mov	r7, r9
 8010426:	220a      	movs	r2, #10
 8010428:	981d      	ldr	r0, [sp, #116]	; 0x74
 801042a:	7806      	ldrb	r6, [r0, #0]
 801042c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010430:	b2d9      	uxtb	r1, r3
 8010432:	2909      	cmp	r1, #9
 8010434:	d92a      	bls.n	801048c <_strtod_l+0x1bc>
 8010436:	9907      	ldr	r1, [sp, #28]
 8010438:	462a      	mov	r2, r5
 801043a:	f003 fa84 	bl	8013946 <strncmp>
 801043e:	b398      	cbz	r0, 80104a8 <_strtod_l+0x1d8>
 8010440:	2000      	movs	r0, #0
 8010442:	4633      	mov	r3, r6
 8010444:	463d      	mov	r5, r7
 8010446:	9007      	str	r0, [sp, #28]
 8010448:	4602      	mov	r2, r0
 801044a:	2b65      	cmp	r3, #101	; 0x65
 801044c:	d001      	beq.n	8010452 <_strtod_l+0x182>
 801044e:	2b45      	cmp	r3, #69	; 0x45
 8010450:	d118      	bne.n	8010484 <_strtod_l+0x1b4>
 8010452:	b91d      	cbnz	r5, 801045c <_strtod_l+0x18c>
 8010454:	9b04      	ldr	r3, [sp, #16]
 8010456:	4303      	orrs	r3, r0
 8010458:	d098      	beq.n	801038c <_strtod_l+0xbc>
 801045a:	2500      	movs	r5, #0
 801045c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8010460:	f108 0301 	add.w	r3, r8, #1
 8010464:	931d      	str	r3, [sp, #116]	; 0x74
 8010466:	f898 3001 	ldrb.w	r3, [r8, #1]
 801046a:	2b2b      	cmp	r3, #43	; 0x2b
 801046c:	d075      	beq.n	801055a <_strtod_l+0x28a>
 801046e:	2b2d      	cmp	r3, #45	; 0x2d
 8010470:	d07b      	beq.n	801056a <_strtod_l+0x29a>
 8010472:	f04f 0c00 	mov.w	ip, #0
 8010476:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801047a:	2909      	cmp	r1, #9
 801047c:	f240 8082 	bls.w	8010584 <_strtod_l+0x2b4>
 8010480:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010484:	2600      	movs	r6, #0
 8010486:	e09d      	b.n	80105c4 <_strtod_l+0x2f4>
 8010488:	2300      	movs	r3, #0
 801048a:	e7c4      	b.n	8010416 <_strtod_l+0x146>
 801048c:	2f08      	cmp	r7, #8
 801048e:	bfd8      	it	le
 8010490:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8010492:	f100 0001 	add.w	r0, r0, #1
 8010496:	bfda      	itte	le
 8010498:	fb02 3301 	mlale	r3, r2, r1, r3
 801049c:	9309      	strle	r3, [sp, #36]	; 0x24
 801049e:	fb02 3909 	mlagt	r9, r2, r9, r3
 80104a2:	3701      	adds	r7, #1
 80104a4:	901d      	str	r0, [sp, #116]	; 0x74
 80104a6:	e7bf      	b.n	8010428 <_strtod_l+0x158>
 80104a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80104aa:	195a      	adds	r2, r3, r5
 80104ac:	921d      	str	r2, [sp, #116]	; 0x74
 80104ae:	5d5b      	ldrb	r3, [r3, r5]
 80104b0:	2f00      	cmp	r7, #0
 80104b2:	d037      	beq.n	8010524 <_strtod_l+0x254>
 80104b4:	9007      	str	r0, [sp, #28]
 80104b6:	463d      	mov	r5, r7
 80104b8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80104bc:	2a09      	cmp	r2, #9
 80104be:	d912      	bls.n	80104e6 <_strtod_l+0x216>
 80104c0:	2201      	movs	r2, #1
 80104c2:	e7c2      	b.n	801044a <_strtod_l+0x17a>
 80104c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80104c6:	1c5a      	adds	r2, r3, #1
 80104c8:	921d      	str	r2, [sp, #116]	; 0x74
 80104ca:	785b      	ldrb	r3, [r3, #1]
 80104cc:	3001      	adds	r0, #1
 80104ce:	2b30      	cmp	r3, #48	; 0x30
 80104d0:	d0f8      	beq.n	80104c4 <_strtod_l+0x1f4>
 80104d2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80104d6:	2a08      	cmp	r2, #8
 80104d8:	f200 84db 	bhi.w	8010e92 <_strtod_l+0xbc2>
 80104dc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80104de:	9007      	str	r0, [sp, #28]
 80104e0:	2000      	movs	r0, #0
 80104e2:	920a      	str	r2, [sp, #40]	; 0x28
 80104e4:	4605      	mov	r5, r0
 80104e6:	3b30      	subs	r3, #48	; 0x30
 80104e8:	f100 0201 	add.w	r2, r0, #1
 80104ec:	d014      	beq.n	8010518 <_strtod_l+0x248>
 80104ee:	9907      	ldr	r1, [sp, #28]
 80104f0:	4411      	add	r1, r2
 80104f2:	9107      	str	r1, [sp, #28]
 80104f4:	462a      	mov	r2, r5
 80104f6:	eb00 0e05 	add.w	lr, r0, r5
 80104fa:	210a      	movs	r1, #10
 80104fc:	4572      	cmp	r2, lr
 80104fe:	d113      	bne.n	8010528 <_strtod_l+0x258>
 8010500:	182a      	adds	r2, r5, r0
 8010502:	2a08      	cmp	r2, #8
 8010504:	f105 0501 	add.w	r5, r5, #1
 8010508:	4405      	add	r5, r0
 801050a:	dc1c      	bgt.n	8010546 <_strtod_l+0x276>
 801050c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801050e:	220a      	movs	r2, #10
 8010510:	fb02 3301 	mla	r3, r2, r1, r3
 8010514:	9309      	str	r3, [sp, #36]	; 0x24
 8010516:	2200      	movs	r2, #0
 8010518:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801051a:	1c59      	adds	r1, r3, #1
 801051c:	911d      	str	r1, [sp, #116]	; 0x74
 801051e:	785b      	ldrb	r3, [r3, #1]
 8010520:	4610      	mov	r0, r2
 8010522:	e7c9      	b.n	80104b8 <_strtod_l+0x1e8>
 8010524:	4638      	mov	r0, r7
 8010526:	e7d2      	b.n	80104ce <_strtod_l+0x1fe>
 8010528:	2a08      	cmp	r2, #8
 801052a:	dc04      	bgt.n	8010536 <_strtod_l+0x266>
 801052c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801052e:	434e      	muls	r6, r1
 8010530:	9609      	str	r6, [sp, #36]	; 0x24
 8010532:	3201      	adds	r2, #1
 8010534:	e7e2      	b.n	80104fc <_strtod_l+0x22c>
 8010536:	f102 0c01 	add.w	ip, r2, #1
 801053a:	f1bc 0f10 	cmp.w	ip, #16
 801053e:	bfd8      	it	le
 8010540:	fb01 f909 	mulle.w	r9, r1, r9
 8010544:	e7f5      	b.n	8010532 <_strtod_l+0x262>
 8010546:	2d10      	cmp	r5, #16
 8010548:	bfdc      	itt	le
 801054a:	220a      	movle	r2, #10
 801054c:	fb02 3909 	mlale	r9, r2, r9, r3
 8010550:	e7e1      	b.n	8010516 <_strtod_l+0x246>
 8010552:	2300      	movs	r3, #0
 8010554:	9307      	str	r3, [sp, #28]
 8010556:	2201      	movs	r2, #1
 8010558:	e77c      	b.n	8010454 <_strtod_l+0x184>
 801055a:	f04f 0c00 	mov.w	ip, #0
 801055e:	f108 0302 	add.w	r3, r8, #2
 8010562:	931d      	str	r3, [sp, #116]	; 0x74
 8010564:	f898 3002 	ldrb.w	r3, [r8, #2]
 8010568:	e785      	b.n	8010476 <_strtod_l+0x1a6>
 801056a:	f04f 0c01 	mov.w	ip, #1
 801056e:	e7f6      	b.n	801055e <_strtod_l+0x28e>
 8010570:	08015330 	.word	0x08015330
 8010574:	0801517c 	.word	0x0801517c
 8010578:	7ff00000 	.word	0x7ff00000
 801057c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801057e:	1c59      	adds	r1, r3, #1
 8010580:	911d      	str	r1, [sp, #116]	; 0x74
 8010582:	785b      	ldrb	r3, [r3, #1]
 8010584:	2b30      	cmp	r3, #48	; 0x30
 8010586:	d0f9      	beq.n	801057c <_strtod_l+0x2ac>
 8010588:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801058c:	2908      	cmp	r1, #8
 801058e:	f63f af79 	bhi.w	8010484 <_strtod_l+0x1b4>
 8010592:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8010596:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010598:	9308      	str	r3, [sp, #32]
 801059a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801059c:	1c59      	adds	r1, r3, #1
 801059e:	911d      	str	r1, [sp, #116]	; 0x74
 80105a0:	785b      	ldrb	r3, [r3, #1]
 80105a2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80105a6:	2e09      	cmp	r6, #9
 80105a8:	d937      	bls.n	801061a <_strtod_l+0x34a>
 80105aa:	9e08      	ldr	r6, [sp, #32]
 80105ac:	1b89      	subs	r1, r1, r6
 80105ae:	2908      	cmp	r1, #8
 80105b0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80105b4:	dc02      	bgt.n	80105bc <_strtod_l+0x2ec>
 80105b6:	4576      	cmp	r6, lr
 80105b8:	bfa8      	it	ge
 80105ba:	4676      	movge	r6, lr
 80105bc:	f1bc 0f00 	cmp.w	ip, #0
 80105c0:	d000      	beq.n	80105c4 <_strtod_l+0x2f4>
 80105c2:	4276      	negs	r6, r6
 80105c4:	2d00      	cmp	r5, #0
 80105c6:	d14f      	bne.n	8010668 <_strtod_l+0x398>
 80105c8:	9904      	ldr	r1, [sp, #16]
 80105ca:	4301      	orrs	r1, r0
 80105cc:	f47f aec2 	bne.w	8010354 <_strtod_l+0x84>
 80105d0:	2a00      	cmp	r2, #0
 80105d2:	f47f aedb 	bne.w	801038c <_strtod_l+0xbc>
 80105d6:	2b69      	cmp	r3, #105	; 0x69
 80105d8:	d027      	beq.n	801062a <_strtod_l+0x35a>
 80105da:	dc24      	bgt.n	8010626 <_strtod_l+0x356>
 80105dc:	2b49      	cmp	r3, #73	; 0x49
 80105de:	d024      	beq.n	801062a <_strtod_l+0x35a>
 80105e0:	2b4e      	cmp	r3, #78	; 0x4e
 80105e2:	f47f aed3 	bne.w	801038c <_strtod_l+0xbc>
 80105e6:	499e      	ldr	r1, [pc, #632]	; (8010860 <_strtod_l+0x590>)
 80105e8:	a81d      	add	r0, sp, #116	; 0x74
 80105ea:	f002 f8c7 	bl	801277c <__match>
 80105ee:	2800      	cmp	r0, #0
 80105f0:	f43f aecc 	beq.w	801038c <_strtod_l+0xbc>
 80105f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80105f6:	781b      	ldrb	r3, [r3, #0]
 80105f8:	2b28      	cmp	r3, #40	; 0x28
 80105fa:	d12d      	bne.n	8010658 <_strtod_l+0x388>
 80105fc:	4999      	ldr	r1, [pc, #612]	; (8010864 <_strtod_l+0x594>)
 80105fe:	aa20      	add	r2, sp, #128	; 0x80
 8010600:	a81d      	add	r0, sp, #116	; 0x74
 8010602:	f002 f8cf 	bl	80127a4 <__hexnan>
 8010606:	2805      	cmp	r0, #5
 8010608:	d126      	bne.n	8010658 <_strtod_l+0x388>
 801060a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801060c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8010610:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8010614:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010618:	e69c      	b.n	8010354 <_strtod_l+0x84>
 801061a:	210a      	movs	r1, #10
 801061c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8010620:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8010624:	e7b9      	b.n	801059a <_strtod_l+0x2ca>
 8010626:	2b6e      	cmp	r3, #110	; 0x6e
 8010628:	e7db      	b.n	80105e2 <_strtod_l+0x312>
 801062a:	498f      	ldr	r1, [pc, #572]	; (8010868 <_strtod_l+0x598>)
 801062c:	a81d      	add	r0, sp, #116	; 0x74
 801062e:	f002 f8a5 	bl	801277c <__match>
 8010632:	2800      	cmp	r0, #0
 8010634:	f43f aeaa 	beq.w	801038c <_strtod_l+0xbc>
 8010638:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801063a:	498c      	ldr	r1, [pc, #560]	; (801086c <_strtod_l+0x59c>)
 801063c:	3b01      	subs	r3, #1
 801063e:	a81d      	add	r0, sp, #116	; 0x74
 8010640:	931d      	str	r3, [sp, #116]	; 0x74
 8010642:	f002 f89b 	bl	801277c <__match>
 8010646:	b910      	cbnz	r0, 801064e <_strtod_l+0x37e>
 8010648:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801064a:	3301      	adds	r3, #1
 801064c:	931d      	str	r3, [sp, #116]	; 0x74
 801064e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801087c <_strtod_l+0x5ac>
 8010652:	f04f 0a00 	mov.w	sl, #0
 8010656:	e67d      	b.n	8010354 <_strtod_l+0x84>
 8010658:	4885      	ldr	r0, [pc, #532]	; (8010870 <_strtod_l+0x5a0>)
 801065a:	f003 f8d5 	bl	8013808 <nan>
 801065e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8010662:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8010666:	e675      	b.n	8010354 <_strtod_l+0x84>
 8010668:	9b07      	ldr	r3, [sp, #28]
 801066a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801066c:	1af3      	subs	r3, r6, r3
 801066e:	2f00      	cmp	r7, #0
 8010670:	bf08      	it	eq
 8010672:	462f      	moveq	r7, r5
 8010674:	2d10      	cmp	r5, #16
 8010676:	9308      	str	r3, [sp, #32]
 8010678:	46a8      	mov	r8, r5
 801067a:	bfa8      	it	ge
 801067c:	f04f 0810 	movge.w	r8, #16
 8010680:	f7ef ff58 	bl	8000534 <__aeabi_ui2d>
 8010684:	2d09      	cmp	r5, #9
 8010686:	4682      	mov	sl, r0
 8010688:	468b      	mov	fp, r1
 801068a:	dd13      	ble.n	80106b4 <_strtod_l+0x3e4>
 801068c:	4b79      	ldr	r3, [pc, #484]	; (8010874 <_strtod_l+0x5a4>)
 801068e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010692:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010696:	f7ef ffc7 	bl	8000628 <__aeabi_dmul>
 801069a:	4682      	mov	sl, r0
 801069c:	4648      	mov	r0, r9
 801069e:	468b      	mov	fp, r1
 80106a0:	f7ef ff48 	bl	8000534 <__aeabi_ui2d>
 80106a4:	4602      	mov	r2, r0
 80106a6:	460b      	mov	r3, r1
 80106a8:	4650      	mov	r0, sl
 80106aa:	4659      	mov	r1, fp
 80106ac:	f7ef fe06 	bl	80002bc <__adddf3>
 80106b0:	4682      	mov	sl, r0
 80106b2:	468b      	mov	fp, r1
 80106b4:	2d0f      	cmp	r5, #15
 80106b6:	dc38      	bgt.n	801072a <_strtod_l+0x45a>
 80106b8:	9b08      	ldr	r3, [sp, #32]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	f43f ae4a 	beq.w	8010354 <_strtod_l+0x84>
 80106c0:	dd24      	ble.n	801070c <_strtod_l+0x43c>
 80106c2:	2b16      	cmp	r3, #22
 80106c4:	dc0b      	bgt.n	80106de <_strtod_l+0x40e>
 80106c6:	4d6b      	ldr	r5, [pc, #428]	; (8010874 <_strtod_l+0x5a4>)
 80106c8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80106cc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80106d0:	4652      	mov	r2, sl
 80106d2:	465b      	mov	r3, fp
 80106d4:	f7ef ffa8 	bl	8000628 <__aeabi_dmul>
 80106d8:	4682      	mov	sl, r0
 80106da:	468b      	mov	fp, r1
 80106dc:	e63a      	b.n	8010354 <_strtod_l+0x84>
 80106de:	9a08      	ldr	r2, [sp, #32]
 80106e0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80106e4:	4293      	cmp	r3, r2
 80106e6:	db20      	blt.n	801072a <_strtod_l+0x45a>
 80106e8:	4c62      	ldr	r4, [pc, #392]	; (8010874 <_strtod_l+0x5a4>)
 80106ea:	f1c5 050f 	rsb	r5, r5, #15
 80106ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80106f2:	4652      	mov	r2, sl
 80106f4:	465b      	mov	r3, fp
 80106f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80106fa:	f7ef ff95 	bl	8000628 <__aeabi_dmul>
 80106fe:	9b08      	ldr	r3, [sp, #32]
 8010700:	1b5d      	subs	r5, r3, r5
 8010702:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010706:	e9d4 2300 	ldrd	r2, r3, [r4]
 801070a:	e7e3      	b.n	80106d4 <_strtod_l+0x404>
 801070c:	9b08      	ldr	r3, [sp, #32]
 801070e:	3316      	adds	r3, #22
 8010710:	db0b      	blt.n	801072a <_strtod_l+0x45a>
 8010712:	9b07      	ldr	r3, [sp, #28]
 8010714:	4a57      	ldr	r2, [pc, #348]	; (8010874 <_strtod_l+0x5a4>)
 8010716:	1b9e      	subs	r6, r3, r6
 8010718:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801071c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010720:	4650      	mov	r0, sl
 8010722:	4659      	mov	r1, fp
 8010724:	f7f0 f8aa 	bl	800087c <__aeabi_ddiv>
 8010728:	e7d6      	b.n	80106d8 <_strtod_l+0x408>
 801072a:	9b08      	ldr	r3, [sp, #32]
 801072c:	eba5 0808 	sub.w	r8, r5, r8
 8010730:	4498      	add	r8, r3
 8010732:	f1b8 0f00 	cmp.w	r8, #0
 8010736:	dd71      	ble.n	801081c <_strtod_l+0x54c>
 8010738:	f018 030f 	ands.w	r3, r8, #15
 801073c:	d00a      	beq.n	8010754 <_strtod_l+0x484>
 801073e:	494d      	ldr	r1, [pc, #308]	; (8010874 <_strtod_l+0x5a4>)
 8010740:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010744:	4652      	mov	r2, sl
 8010746:	465b      	mov	r3, fp
 8010748:	e9d1 0100 	ldrd	r0, r1, [r1]
 801074c:	f7ef ff6c 	bl	8000628 <__aeabi_dmul>
 8010750:	4682      	mov	sl, r0
 8010752:	468b      	mov	fp, r1
 8010754:	f038 080f 	bics.w	r8, r8, #15
 8010758:	d04d      	beq.n	80107f6 <_strtod_l+0x526>
 801075a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801075e:	dd22      	ble.n	80107a6 <_strtod_l+0x4d6>
 8010760:	2500      	movs	r5, #0
 8010762:	462e      	mov	r6, r5
 8010764:	9509      	str	r5, [sp, #36]	; 0x24
 8010766:	9507      	str	r5, [sp, #28]
 8010768:	2322      	movs	r3, #34	; 0x22
 801076a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801087c <_strtod_l+0x5ac>
 801076e:	6023      	str	r3, [r4, #0]
 8010770:	f04f 0a00 	mov.w	sl, #0
 8010774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010776:	2b00      	cmp	r3, #0
 8010778:	f43f adec 	beq.w	8010354 <_strtod_l+0x84>
 801077c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801077e:	4620      	mov	r0, r4
 8010780:	f002 f98c 	bl	8012a9c <_Bfree>
 8010784:	9907      	ldr	r1, [sp, #28]
 8010786:	4620      	mov	r0, r4
 8010788:	f002 f988 	bl	8012a9c <_Bfree>
 801078c:	4631      	mov	r1, r6
 801078e:	4620      	mov	r0, r4
 8010790:	f002 f984 	bl	8012a9c <_Bfree>
 8010794:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010796:	4620      	mov	r0, r4
 8010798:	f002 f980 	bl	8012a9c <_Bfree>
 801079c:	4629      	mov	r1, r5
 801079e:	4620      	mov	r0, r4
 80107a0:	f002 f97c 	bl	8012a9c <_Bfree>
 80107a4:	e5d6      	b.n	8010354 <_strtod_l+0x84>
 80107a6:	2300      	movs	r3, #0
 80107a8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80107ac:	4650      	mov	r0, sl
 80107ae:	4659      	mov	r1, fp
 80107b0:	4699      	mov	r9, r3
 80107b2:	f1b8 0f01 	cmp.w	r8, #1
 80107b6:	dc21      	bgt.n	80107fc <_strtod_l+0x52c>
 80107b8:	b10b      	cbz	r3, 80107be <_strtod_l+0x4ee>
 80107ba:	4682      	mov	sl, r0
 80107bc:	468b      	mov	fp, r1
 80107be:	4b2e      	ldr	r3, [pc, #184]	; (8010878 <_strtod_l+0x5a8>)
 80107c0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80107c4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80107c8:	4652      	mov	r2, sl
 80107ca:	465b      	mov	r3, fp
 80107cc:	e9d9 0100 	ldrd	r0, r1, [r9]
 80107d0:	f7ef ff2a 	bl	8000628 <__aeabi_dmul>
 80107d4:	4b29      	ldr	r3, [pc, #164]	; (801087c <_strtod_l+0x5ac>)
 80107d6:	460a      	mov	r2, r1
 80107d8:	400b      	ands	r3, r1
 80107da:	4929      	ldr	r1, [pc, #164]	; (8010880 <_strtod_l+0x5b0>)
 80107dc:	428b      	cmp	r3, r1
 80107de:	4682      	mov	sl, r0
 80107e0:	d8be      	bhi.n	8010760 <_strtod_l+0x490>
 80107e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80107e6:	428b      	cmp	r3, r1
 80107e8:	bf86      	itte	hi
 80107ea:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8010884 <_strtod_l+0x5b4>
 80107ee:	f04f 3aff 	movhi.w	sl, #4294967295
 80107f2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80107f6:	2300      	movs	r3, #0
 80107f8:	9304      	str	r3, [sp, #16]
 80107fa:	e081      	b.n	8010900 <_strtod_l+0x630>
 80107fc:	f018 0f01 	tst.w	r8, #1
 8010800:	d007      	beq.n	8010812 <_strtod_l+0x542>
 8010802:	4b1d      	ldr	r3, [pc, #116]	; (8010878 <_strtod_l+0x5a8>)
 8010804:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8010808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801080c:	f7ef ff0c 	bl	8000628 <__aeabi_dmul>
 8010810:	2301      	movs	r3, #1
 8010812:	f109 0901 	add.w	r9, r9, #1
 8010816:	ea4f 0868 	mov.w	r8, r8, asr #1
 801081a:	e7ca      	b.n	80107b2 <_strtod_l+0x4e2>
 801081c:	d0eb      	beq.n	80107f6 <_strtod_l+0x526>
 801081e:	f1c8 0800 	rsb	r8, r8, #0
 8010822:	f018 020f 	ands.w	r2, r8, #15
 8010826:	d00a      	beq.n	801083e <_strtod_l+0x56e>
 8010828:	4b12      	ldr	r3, [pc, #72]	; (8010874 <_strtod_l+0x5a4>)
 801082a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801082e:	4650      	mov	r0, sl
 8010830:	4659      	mov	r1, fp
 8010832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010836:	f7f0 f821 	bl	800087c <__aeabi_ddiv>
 801083a:	4682      	mov	sl, r0
 801083c:	468b      	mov	fp, r1
 801083e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8010842:	d0d8      	beq.n	80107f6 <_strtod_l+0x526>
 8010844:	f1b8 0f1f 	cmp.w	r8, #31
 8010848:	dd1e      	ble.n	8010888 <_strtod_l+0x5b8>
 801084a:	2500      	movs	r5, #0
 801084c:	462e      	mov	r6, r5
 801084e:	9509      	str	r5, [sp, #36]	; 0x24
 8010850:	9507      	str	r5, [sp, #28]
 8010852:	2322      	movs	r3, #34	; 0x22
 8010854:	f04f 0a00 	mov.w	sl, #0
 8010858:	f04f 0b00 	mov.w	fp, #0
 801085c:	6023      	str	r3, [r4, #0]
 801085e:	e789      	b.n	8010774 <_strtod_l+0x4a4>
 8010860:	0801514e 	.word	0x0801514e
 8010864:	08015190 	.word	0x08015190
 8010868:	08015146 	.word	0x08015146
 801086c:	080151d3 	.word	0x080151d3
 8010870:	08015027 	.word	0x08015027
 8010874:	080153d0 	.word	0x080153d0
 8010878:	080153a8 	.word	0x080153a8
 801087c:	7ff00000 	.word	0x7ff00000
 8010880:	7ca00000 	.word	0x7ca00000
 8010884:	7fefffff 	.word	0x7fefffff
 8010888:	f018 0310 	ands.w	r3, r8, #16
 801088c:	bf18      	it	ne
 801088e:	236a      	movne	r3, #106	; 0x6a
 8010890:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8010c48 <_strtod_l+0x978>
 8010894:	9304      	str	r3, [sp, #16]
 8010896:	4650      	mov	r0, sl
 8010898:	4659      	mov	r1, fp
 801089a:	2300      	movs	r3, #0
 801089c:	f018 0f01 	tst.w	r8, #1
 80108a0:	d004      	beq.n	80108ac <_strtod_l+0x5dc>
 80108a2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80108a6:	f7ef febf 	bl	8000628 <__aeabi_dmul>
 80108aa:	2301      	movs	r3, #1
 80108ac:	ea5f 0868 	movs.w	r8, r8, asr #1
 80108b0:	f109 0908 	add.w	r9, r9, #8
 80108b4:	d1f2      	bne.n	801089c <_strtod_l+0x5cc>
 80108b6:	b10b      	cbz	r3, 80108bc <_strtod_l+0x5ec>
 80108b8:	4682      	mov	sl, r0
 80108ba:	468b      	mov	fp, r1
 80108bc:	9b04      	ldr	r3, [sp, #16]
 80108be:	b1bb      	cbz	r3, 80108f0 <_strtod_l+0x620>
 80108c0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80108c4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	4659      	mov	r1, fp
 80108cc:	dd10      	ble.n	80108f0 <_strtod_l+0x620>
 80108ce:	2b1f      	cmp	r3, #31
 80108d0:	f340 8128 	ble.w	8010b24 <_strtod_l+0x854>
 80108d4:	2b34      	cmp	r3, #52	; 0x34
 80108d6:	bfde      	ittt	le
 80108d8:	3b20      	suble	r3, #32
 80108da:	f04f 32ff 	movle.w	r2, #4294967295
 80108de:	fa02 f303 	lslle.w	r3, r2, r3
 80108e2:	f04f 0a00 	mov.w	sl, #0
 80108e6:	bfcc      	ite	gt
 80108e8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80108ec:	ea03 0b01 	andle.w	fp, r3, r1
 80108f0:	2200      	movs	r2, #0
 80108f2:	2300      	movs	r3, #0
 80108f4:	4650      	mov	r0, sl
 80108f6:	4659      	mov	r1, fp
 80108f8:	f7f0 f8fe 	bl	8000af8 <__aeabi_dcmpeq>
 80108fc:	2800      	cmp	r0, #0
 80108fe:	d1a4      	bne.n	801084a <_strtod_l+0x57a>
 8010900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010902:	9300      	str	r3, [sp, #0]
 8010904:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010906:	462b      	mov	r3, r5
 8010908:	463a      	mov	r2, r7
 801090a:	4620      	mov	r0, r4
 801090c:	f002 f932 	bl	8012b74 <__s2b>
 8010910:	9009      	str	r0, [sp, #36]	; 0x24
 8010912:	2800      	cmp	r0, #0
 8010914:	f43f af24 	beq.w	8010760 <_strtod_l+0x490>
 8010918:	9b07      	ldr	r3, [sp, #28]
 801091a:	1b9e      	subs	r6, r3, r6
 801091c:	9b08      	ldr	r3, [sp, #32]
 801091e:	2b00      	cmp	r3, #0
 8010920:	bfb4      	ite	lt
 8010922:	4633      	movlt	r3, r6
 8010924:	2300      	movge	r3, #0
 8010926:	9310      	str	r3, [sp, #64]	; 0x40
 8010928:	9b08      	ldr	r3, [sp, #32]
 801092a:	2500      	movs	r5, #0
 801092c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010930:	9318      	str	r3, [sp, #96]	; 0x60
 8010932:	462e      	mov	r6, r5
 8010934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010936:	4620      	mov	r0, r4
 8010938:	6859      	ldr	r1, [r3, #4]
 801093a:	f002 f86f 	bl	8012a1c <_Balloc>
 801093e:	9007      	str	r0, [sp, #28]
 8010940:	2800      	cmp	r0, #0
 8010942:	f43f af11 	beq.w	8010768 <_strtod_l+0x498>
 8010946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010948:	691a      	ldr	r2, [r3, #16]
 801094a:	3202      	adds	r2, #2
 801094c:	f103 010c 	add.w	r1, r3, #12
 8010950:	0092      	lsls	r2, r2, #2
 8010952:	300c      	adds	r0, #12
 8010954:	f7fe fc78 	bl	800f248 <memcpy>
 8010958:	ec4b ab10 	vmov	d0, sl, fp
 801095c:	aa20      	add	r2, sp, #128	; 0x80
 801095e:	a91f      	add	r1, sp, #124	; 0x7c
 8010960:	4620      	mov	r0, r4
 8010962:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8010966:	f002 fc41 	bl	80131ec <__d2b>
 801096a:	901e      	str	r0, [sp, #120]	; 0x78
 801096c:	2800      	cmp	r0, #0
 801096e:	f43f aefb 	beq.w	8010768 <_strtod_l+0x498>
 8010972:	2101      	movs	r1, #1
 8010974:	4620      	mov	r0, r4
 8010976:	f002 f997 	bl	8012ca8 <__i2b>
 801097a:	4606      	mov	r6, r0
 801097c:	2800      	cmp	r0, #0
 801097e:	f43f aef3 	beq.w	8010768 <_strtod_l+0x498>
 8010982:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010984:	9904      	ldr	r1, [sp, #16]
 8010986:	2b00      	cmp	r3, #0
 8010988:	bfab      	itete	ge
 801098a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801098c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801098e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8010990:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8010994:	bfac      	ite	ge
 8010996:	eb03 0902 	addge.w	r9, r3, r2
 801099a:	1ad7      	sublt	r7, r2, r3
 801099c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801099e:	eba3 0801 	sub.w	r8, r3, r1
 80109a2:	4490      	add	r8, r2
 80109a4:	4ba3      	ldr	r3, [pc, #652]	; (8010c34 <_strtod_l+0x964>)
 80109a6:	f108 38ff 	add.w	r8, r8, #4294967295
 80109aa:	4598      	cmp	r8, r3
 80109ac:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80109b0:	f280 80cc 	bge.w	8010b4c <_strtod_l+0x87c>
 80109b4:	eba3 0308 	sub.w	r3, r3, r8
 80109b8:	2b1f      	cmp	r3, #31
 80109ba:	eba2 0203 	sub.w	r2, r2, r3
 80109be:	f04f 0101 	mov.w	r1, #1
 80109c2:	f300 80b6 	bgt.w	8010b32 <_strtod_l+0x862>
 80109c6:	fa01 f303 	lsl.w	r3, r1, r3
 80109ca:	9311      	str	r3, [sp, #68]	; 0x44
 80109cc:	2300      	movs	r3, #0
 80109ce:	930c      	str	r3, [sp, #48]	; 0x30
 80109d0:	eb09 0802 	add.w	r8, r9, r2
 80109d4:	9b04      	ldr	r3, [sp, #16]
 80109d6:	45c1      	cmp	r9, r8
 80109d8:	4417      	add	r7, r2
 80109da:	441f      	add	r7, r3
 80109dc:	464b      	mov	r3, r9
 80109de:	bfa8      	it	ge
 80109e0:	4643      	movge	r3, r8
 80109e2:	42bb      	cmp	r3, r7
 80109e4:	bfa8      	it	ge
 80109e6:	463b      	movge	r3, r7
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	bfc2      	ittt	gt
 80109ec:	eba8 0803 	subgt.w	r8, r8, r3
 80109f0:	1aff      	subgt	r7, r7, r3
 80109f2:	eba9 0903 	subgt.w	r9, r9, r3
 80109f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	dd17      	ble.n	8010a2c <_strtod_l+0x75c>
 80109fc:	4631      	mov	r1, r6
 80109fe:	461a      	mov	r2, r3
 8010a00:	4620      	mov	r0, r4
 8010a02:	f002 fa0d 	bl	8012e20 <__pow5mult>
 8010a06:	4606      	mov	r6, r0
 8010a08:	2800      	cmp	r0, #0
 8010a0a:	f43f aead 	beq.w	8010768 <_strtod_l+0x498>
 8010a0e:	4601      	mov	r1, r0
 8010a10:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010a12:	4620      	mov	r0, r4
 8010a14:	f002 f95e 	bl	8012cd4 <__multiply>
 8010a18:	900f      	str	r0, [sp, #60]	; 0x3c
 8010a1a:	2800      	cmp	r0, #0
 8010a1c:	f43f aea4 	beq.w	8010768 <_strtod_l+0x498>
 8010a20:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010a22:	4620      	mov	r0, r4
 8010a24:	f002 f83a 	bl	8012a9c <_Bfree>
 8010a28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010a2a:	931e      	str	r3, [sp, #120]	; 0x78
 8010a2c:	f1b8 0f00 	cmp.w	r8, #0
 8010a30:	f300 8091 	bgt.w	8010b56 <_strtod_l+0x886>
 8010a34:	9b08      	ldr	r3, [sp, #32]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	dd08      	ble.n	8010a4c <_strtod_l+0x77c>
 8010a3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010a3c:	9907      	ldr	r1, [sp, #28]
 8010a3e:	4620      	mov	r0, r4
 8010a40:	f002 f9ee 	bl	8012e20 <__pow5mult>
 8010a44:	9007      	str	r0, [sp, #28]
 8010a46:	2800      	cmp	r0, #0
 8010a48:	f43f ae8e 	beq.w	8010768 <_strtod_l+0x498>
 8010a4c:	2f00      	cmp	r7, #0
 8010a4e:	dd08      	ble.n	8010a62 <_strtod_l+0x792>
 8010a50:	9907      	ldr	r1, [sp, #28]
 8010a52:	463a      	mov	r2, r7
 8010a54:	4620      	mov	r0, r4
 8010a56:	f002 fa3d 	bl	8012ed4 <__lshift>
 8010a5a:	9007      	str	r0, [sp, #28]
 8010a5c:	2800      	cmp	r0, #0
 8010a5e:	f43f ae83 	beq.w	8010768 <_strtod_l+0x498>
 8010a62:	f1b9 0f00 	cmp.w	r9, #0
 8010a66:	dd08      	ble.n	8010a7a <_strtod_l+0x7aa>
 8010a68:	4631      	mov	r1, r6
 8010a6a:	464a      	mov	r2, r9
 8010a6c:	4620      	mov	r0, r4
 8010a6e:	f002 fa31 	bl	8012ed4 <__lshift>
 8010a72:	4606      	mov	r6, r0
 8010a74:	2800      	cmp	r0, #0
 8010a76:	f43f ae77 	beq.w	8010768 <_strtod_l+0x498>
 8010a7a:	9a07      	ldr	r2, [sp, #28]
 8010a7c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010a7e:	4620      	mov	r0, r4
 8010a80:	f002 fab0 	bl	8012fe4 <__mdiff>
 8010a84:	4605      	mov	r5, r0
 8010a86:	2800      	cmp	r0, #0
 8010a88:	f43f ae6e 	beq.w	8010768 <_strtod_l+0x498>
 8010a8c:	68c3      	ldr	r3, [r0, #12]
 8010a8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010a90:	2300      	movs	r3, #0
 8010a92:	60c3      	str	r3, [r0, #12]
 8010a94:	4631      	mov	r1, r6
 8010a96:	f002 fa89 	bl	8012fac <__mcmp>
 8010a9a:	2800      	cmp	r0, #0
 8010a9c:	da65      	bge.n	8010b6a <_strtod_l+0x89a>
 8010a9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010aa0:	ea53 030a 	orrs.w	r3, r3, sl
 8010aa4:	f040 8087 	bne.w	8010bb6 <_strtod_l+0x8e6>
 8010aa8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	f040 8082 	bne.w	8010bb6 <_strtod_l+0x8e6>
 8010ab2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010ab6:	0d1b      	lsrs	r3, r3, #20
 8010ab8:	051b      	lsls	r3, r3, #20
 8010aba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010abe:	d97a      	bls.n	8010bb6 <_strtod_l+0x8e6>
 8010ac0:	696b      	ldr	r3, [r5, #20]
 8010ac2:	b913      	cbnz	r3, 8010aca <_strtod_l+0x7fa>
 8010ac4:	692b      	ldr	r3, [r5, #16]
 8010ac6:	2b01      	cmp	r3, #1
 8010ac8:	dd75      	ble.n	8010bb6 <_strtod_l+0x8e6>
 8010aca:	4629      	mov	r1, r5
 8010acc:	2201      	movs	r2, #1
 8010ace:	4620      	mov	r0, r4
 8010ad0:	f002 fa00 	bl	8012ed4 <__lshift>
 8010ad4:	4631      	mov	r1, r6
 8010ad6:	4605      	mov	r5, r0
 8010ad8:	f002 fa68 	bl	8012fac <__mcmp>
 8010adc:	2800      	cmp	r0, #0
 8010ade:	dd6a      	ble.n	8010bb6 <_strtod_l+0x8e6>
 8010ae0:	9904      	ldr	r1, [sp, #16]
 8010ae2:	4a55      	ldr	r2, [pc, #340]	; (8010c38 <_strtod_l+0x968>)
 8010ae4:	465b      	mov	r3, fp
 8010ae6:	2900      	cmp	r1, #0
 8010ae8:	f000 8085 	beq.w	8010bf6 <_strtod_l+0x926>
 8010aec:	ea02 010b 	and.w	r1, r2, fp
 8010af0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010af4:	dc7f      	bgt.n	8010bf6 <_strtod_l+0x926>
 8010af6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010afa:	f77f aeaa 	ble.w	8010852 <_strtod_l+0x582>
 8010afe:	4a4f      	ldr	r2, [pc, #316]	; (8010c3c <_strtod_l+0x96c>)
 8010b00:	2300      	movs	r3, #0
 8010b02:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8010b06:	4650      	mov	r0, sl
 8010b08:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8010b0c:	4659      	mov	r1, fp
 8010b0e:	f7ef fd8b 	bl	8000628 <__aeabi_dmul>
 8010b12:	460b      	mov	r3, r1
 8010b14:	4303      	orrs	r3, r0
 8010b16:	bf08      	it	eq
 8010b18:	2322      	moveq	r3, #34	; 0x22
 8010b1a:	4682      	mov	sl, r0
 8010b1c:	468b      	mov	fp, r1
 8010b1e:	bf08      	it	eq
 8010b20:	6023      	streq	r3, [r4, #0]
 8010b22:	e62b      	b.n	801077c <_strtod_l+0x4ac>
 8010b24:	f04f 32ff 	mov.w	r2, #4294967295
 8010b28:	fa02 f303 	lsl.w	r3, r2, r3
 8010b2c:	ea03 0a0a 	and.w	sl, r3, sl
 8010b30:	e6de      	b.n	80108f0 <_strtod_l+0x620>
 8010b32:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8010b36:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010b3a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010b3e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8010b42:	fa01 f308 	lsl.w	r3, r1, r8
 8010b46:	930c      	str	r3, [sp, #48]	; 0x30
 8010b48:	9111      	str	r1, [sp, #68]	; 0x44
 8010b4a:	e741      	b.n	80109d0 <_strtod_l+0x700>
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	930c      	str	r3, [sp, #48]	; 0x30
 8010b50:	2301      	movs	r3, #1
 8010b52:	9311      	str	r3, [sp, #68]	; 0x44
 8010b54:	e73c      	b.n	80109d0 <_strtod_l+0x700>
 8010b56:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010b58:	4642      	mov	r2, r8
 8010b5a:	4620      	mov	r0, r4
 8010b5c:	f002 f9ba 	bl	8012ed4 <__lshift>
 8010b60:	901e      	str	r0, [sp, #120]	; 0x78
 8010b62:	2800      	cmp	r0, #0
 8010b64:	f47f af66 	bne.w	8010a34 <_strtod_l+0x764>
 8010b68:	e5fe      	b.n	8010768 <_strtod_l+0x498>
 8010b6a:	465f      	mov	r7, fp
 8010b6c:	d16e      	bne.n	8010c4c <_strtod_l+0x97c>
 8010b6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010b70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010b74:	b342      	cbz	r2, 8010bc8 <_strtod_l+0x8f8>
 8010b76:	4a32      	ldr	r2, [pc, #200]	; (8010c40 <_strtod_l+0x970>)
 8010b78:	4293      	cmp	r3, r2
 8010b7a:	d128      	bne.n	8010bce <_strtod_l+0x8fe>
 8010b7c:	9b04      	ldr	r3, [sp, #16]
 8010b7e:	4650      	mov	r0, sl
 8010b80:	b1eb      	cbz	r3, 8010bbe <_strtod_l+0x8ee>
 8010b82:	4a2d      	ldr	r2, [pc, #180]	; (8010c38 <_strtod_l+0x968>)
 8010b84:	403a      	ands	r2, r7
 8010b86:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8010b8a:	f04f 31ff 	mov.w	r1, #4294967295
 8010b8e:	d819      	bhi.n	8010bc4 <_strtod_l+0x8f4>
 8010b90:	0d12      	lsrs	r2, r2, #20
 8010b92:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010b96:	fa01 f303 	lsl.w	r3, r1, r3
 8010b9a:	4298      	cmp	r0, r3
 8010b9c:	d117      	bne.n	8010bce <_strtod_l+0x8fe>
 8010b9e:	4b29      	ldr	r3, [pc, #164]	; (8010c44 <_strtod_l+0x974>)
 8010ba0:	429f      	cmp	r7, r3
 8010ba2:	d102      	bne.n	8010baa <_strtod_l+0x8da>
 8010ba4:	3001      	adds	r0, #1
 8010ba6:	f43f addf 	beq.w	8010768 <_strtod_l+0x498>
 8010baa:	4b23      	ldr	r3, [pc, #140]	; (8010c38 <_strtod_l+0x968>)
 8010bac:	403b      	ands	r3, r7
 8010bae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8010bb2:	f04f 0a00 	mov.w	sl, #0
 8010bb6:	9b04      	ldr	r3, [sp, #16]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d1a0      	bne.n	8010afe <_strtod_l+0x82e>
 8010bbc:	e5de      	b.n	801077c <_strtod_l+0x4ac>
 8010bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8010bc2:	e7ea      	b.n	8010b9a <_strtod_l+0x8ca>
 8010bc4:	460b      	mov	r3, r1
 8010bc6:	e7e8      	b.n	8010b9a <_strtod_l+0x8ca>
 8010bc8:	ea53 030a 	orrs.w	r3, r3, sl
 8010bcc:	d088      	beq.n	8010ae0 <_strtod_l+0x810>
 8010bce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010bd0:	b1db      	cbz	r3, 8010c0a <_strtod_l+0x93a>
 8010bd2:	423b      	tst	r3, r7
 8010bd4:	d0ef      	beq.n	8010bb6 <_strtod_l+0x8e6>
 8010bd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010bd8:	9a04      	ldr	r2, [sp, #16]
 8010bda:	4650      	mov	r0, sl
 8010bdc:	4659      	mov	r1, fp
 8010bde:	b1c3      	cbz	r3, 8010c12 <_strtod_l+0x942>
 8010be0:	f7ff fb5a 	bl	8010298 <sulp>
 8010be4:	4602      	mov	r2, r0
 8010be6:	460b      	mov	r3, r1
 8010be8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010bec:	f7ef fb66 	bl	80002bc <__adddf3>
 8010bf0:	4682      	mov	sl, r0
 8010bf2:	468b      	mov	fp, r1
 8010bf4:	e7df      	b.n	8010bb6 <_strtod_l+0x8e6>
 8010bf6:	4013      	ands	r3, r2
 8010bf8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010bfc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010c00:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010c04:	f04f 3aff 	mov.w	sl, #4294967295
 8010c08:	e7d5      	b.n	8010bb6 <_strtod_l+0x8e6>
 8010c0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010c0c:	ea13 0f0a 	tst.w	r3, sl
 8010c10:	e7e0      	b.n	8010bd4 <_strtod_l+0x904>
 8010c12:	f7ff fb41 	bl	8010298 <sulp>
 8010c16:	4602      	mov	r2, r0
 8010c18:	460b      	mov	r3, r1
 8010c1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010c1e:	f7ef fb4b 	bl	80002b8 <__aeabi_dsub>
 8010c22:	2200      	movs	r2, #0
 8010c24:	2300      	movs	r3, #0
 8010c26:	4682      	mov	sl, r0
 8010c28:	468b      	mov	fp, r1
 8010c2a:	f7ef ff65 	bl	8000af8 <__aeabi_dcmpeq>
 8010c2e:	2800      	cmp	r0, #0
 8010c30:	d0c1      	beq.n	8010bb6 <_strtod_l+0x8e6>
 8010c32:	e60e      	b.n	8010852 <_strtod_l+0x582>
 8010c34:	fffffc02 	.word	0xfffffc02
 8010c38:	7ff00000 	.word	0x7ff00000
 8010c3c:	39500000 	.word	0x39500000
 8010c40:	000fffff 	.word	0x000fffff
 8010c44:	7fefffff 	.word	0x7fefffff
 8010c48:	080151a8 	.word	0x080151a8
 8010c4c:	4631      	mov	r1, r6
 8010c4e:	4628      	mov	r0, r5
 8010c50:	f002 fb28 	bl	80132a4 <__ratio>
 8010c54:	ec59 8b10 	vmov	r8, r9, d0
 8010c58:	ee10 0a10 	vmov	r0, s0
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010c62:	4649      	mov	r1, r9
 8010c64:	f7ef ff5c 	bl	8000b20 <__aeabi_dcmple>
 8010c68:	2800      	cmp	r0, #0
 8010c6a:	d07c      	beq.n	8010d66 <_strtod_l+0xa96>
 8010c6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d04c      	beq.n	8010d0c <_strtod_l+0xa3c>
 8010c72:	4b95      	ldr	r3, [pc, #596]	; (8010ec8 <_strtod_l+0xbf8>)
 8010c74:	2200      	movs	r2, #0
 8010c76:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010c7a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010ec8 <_strtod_l+0xbf8>
 8010c7e:	f04f 0800 	mov.w	r8, #0
 8010c82:	4b92      	ldr	r3, [pc, #584]	; (8010ecc <_strtod_l+0xbfc>)
 8010c84:	403b      	ands	r3, r7
 8010c86:	9311      	str	r3, [sp, #68]	; 0x44
 8010c88:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010c8a:	4b91      	ldr	r3, [pc, #580]	; (8010ed0 <_strtod_l+0xc00>)
 8010c8c:	429a      	cmp	r2, r3
 8010c8e:	f040 80b2 	bne.w	8010df6 <_strtod_l+0xb26>
 8010c92:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010c96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010c9a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8010c9e:	ec4b ab10 	vmov	d0, sl, fp
 8010ca2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8010ca6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010caa:	f002 fa23 	bl	80130f4 <__ulp>
 8010cae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010cb2:	ec53 2b10 	vmov	r2, r3, d0
 8010cb6:	f7ef fcb7 	bl	8000628 <__aeabi_dmul>
 8010cba:	4652      	mov	r2, sl
 8010cbc:	465b      	mov	r3, fp
 8010cbe:	f7ef fafd 	bl	80002bc <__adddf3>
 8010cc2:	460b      	mov	r3, r1
 8010cc4:	4981      	ldr	r1, [pc, #516]	; (8010ecc <_strtod_l+0xbfc>)
 8010cc6:	4a83      	ldr	r2, [pc, #524]	; (8010ed4 <_strtod_l+0xc04>)
 8010cc8:	4019      	ands	r1, r3
 8010cca:	4291      	cmp	r1, r2
 8010ccc:	4682      	mov	sl, r0
 8010cce:	d95e      	bls.n	8010d8e <_strtod_l+0xabe>
 8010cd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010cd2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010cd6:	4293      	cmp	r3, r2
 8010cd8:	d103      	bne.n	8010ce2 <_strtod_l+0xa12>
 8010cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010cdc:	3301      	adds	r3, #1
 8010cde:	f43f ad43 	beq.w	8010768 <_strtod_l+0x498>
 8010ce2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8010ee0 <_strtod_l+0xc10>
 8010ce6:	f04f 3aff 	mov.w	sl, #4294967295
 8010cea:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010cec:	4620      	mov	r0, r4
 8010cee:	f001 fed5 	bl	8012a9c <_Bfree>
 8010cf2:	9907      	ldr	r1, [sp, #28]
 8010cf4:	4620      	mov	r0, r4
 8010cf6:	f001 fed1 	bl	8012a9c <_Bfree>
 8010cfa:	4631      	mov	r1, r6
 8010cfc:	4620      	mov	r0, r4
 8010cfe:	f001 fecd 	bl	8012a9c <_Bfree>
 8010d02:	4629      	mov	r1, r5
 8010d04:	4620      	mov	r0, r4
 8010d06:	f001 fec9 	bl	8012a9c <_Bfree>
 8010d0a:	e613      	b.n	8010934 <_strtod_l+0x664>
 8010d0c:	f1ba 0f00 	cmp.w	sl, #0
 8010d10:	d11b      	bne.n	8010d4a <_strtod_l+0xa7a>
 8010d12:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010d16:	b9f3      	cbnz	r3, 8010d56 <_strtod_l+0xa86>
 8010d18:	4b6b      	ldr	r3, [pc, #428]	; (8010ec8 <_strtod_l+0xbf8>)
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	4640      	mov	r0, r8
 8010d1e:	4649      	mov	r1, r9
 8010d20:	f7ef fef4 	bl	8000b0c <__aeabi_dcmplt>
 8010d24:	b9d0      	cbnz	r0, 8010d5c <_strtod_l+0xa8c>
 8010d26:	4640      	mov	r0, r8
 8010d28:	4649      	mov	r1, r9
 8010d2a:	4b6b      	ldr	r3, [pc, #428]	; (8010ed8 <_strtod_l+0xc08>)
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	f7ef fc7b 	bl	8000628 <__aeabi_dmul>
 8010d32:	4680      	mov	r8, r0
 8010d34:	4689      	mov	r9, r1
 8010d36:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010d3a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8010d3e:	931b      	str	r3, [sp, #108]	; 0x6c
 8010d40:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8010d44:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010d48:	e79b      	b.n	8010c82 <_strtod_l+0x9b2>
 8010d4a:	f1ba 0f01 	cmp.w	sl, #1
 8010d4e:	d102      	bne.n	8010d56 <_strtod_l+0xa86>
 8010d50:	2f00      	cmp	r7, #0
 8010d52:	f43f ad7e 	beq.w	8010852 <_strtod_l+0x582>
 8010d56:	4b61      	ldr	r3, [pc, #388]	; (8010edc <_strtod_l+0xc0c>)
 8010d58:	2200      	movs	r2, #0
 8010d5a:	e78c      	b.n	8010c76 <_strtod_l+0x9a6>
 8010d5c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8010ed8 <_strtod_l+0xc08>
 8010d60:	f04f 0800 	mov.w	r8, #0
 8010d64:	e7e7      	b.n	8010d36 <_strtod_l+0xa66>
 8010d66:	4b5c      	ldr	r3, [pc, #368]	; (8010ed8 <_strtod_l+0xc08>)
 8010d68:	4640      	mov	r0, r8
 8010d6a:	4649      	mov	r1, r9
 8010d6c:	2200      	movs	r2, #0
 8010d6e:	f7ef fc5b 	bl	8000628 <__aeabi_dmul>
 8010d72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010d74:	4680      	mov	r8, r0
 8010d76:	4689      	mov	r9, r1
 8010d78:	b933      	cbnz	r3, 8010d88 <_strtod_l+0xab8>
 8010d7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010d7e:	9012      	str	r0, [sp, #72]	; 0x48
 8010d80:	9313      	str	r3, [sp, #76]	; 0x4c
 8010d82:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8010d86:	e7dd      	b.n	8010d44 <_strtod_l+0xa74>
 8010d88:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8010d8c:	e7f9      	b.n	8010d82 <_strtod_l+0xab2>
 8010d8e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8010d92:	9b04      	ldr	r3, [sp, #16]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d1a8      	bne.n	8010cea <_strtod_l+0xa1a>
 8010d98:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010d9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010d9e:	0d1b      	lsrs	r3, r3, #20
 8010da0:	051b      	lsls	r3, r3, #20
 8010da2:	429a      	cmp	r2, r3
 8010da4:	d1a1      	bne.n	8010cea <_strtod_l+0xa1a>
 8010da6:	4640      	mov	r0, r8
 8010da8:	4649      	mov	r1, r9
 8010daa:	f7ef ff9d 	bl	8000ce8 <__aeabi_d2lz>
 8010dae:	f7ef fc0d 	bl	80005cc <__aeabi_l2d>
 8010db2:	4602      	mov	r2, r0
 8010db4:	460b      	mov	r3, r1
 8010db6:	4640      	mov	r0, r8
 8010db8:	4649      	mov	r1, r9
 8010dba:	f7ef fa7d 	bl	80002b8 <__aeabi_dsub>
 8010dbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010dc0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010dc4:	ea43 030a 	orr.w	r3, r3, sl
 8010dc8:	4313      	orrs	r3, r2
 8010dca:	4680      	mov	r8, r0
 8010dcc:	4689      	mov	r9, r1
 8010dce:	d053      	beq.n	8010e78 <_strtod_l+0xba8>
 8010dd0:	a335      	add	r3, pc, #212	; (adr r3, 8010ea8 <_strtod_l+0xbd8>)
 8010dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dd6:	f7ef fe99 	bl	8000b0c <__aeabi_dcmplt>
 8010dda:	2800      	cmp	r0, #0
 8010ddc:	f47f acce 	bne.w	801077c <_strtod_l+0x4ac>
 8010de0:	a333      	add	r3, pc, #204	; (adr r3, 8010eb0 <_strtod_l+0xbe0>)
 8010de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010de6:	4640      	mov	r0, r8
 8010de8:	4649      	mov	r1, r9
 8010dea:	f7ef fead 	bl	8000b48 <__aeabi_dcmpgt>
 8010dee:	2800      	cmp	r0, #0
 8010df0:	f43f af7b 	beq.w	8010cea <_strtod_l+0xa1a>
 8010df4:	e4c2      	b.n	801077c <_strtod_l+0x4ac>
 8010df6:	9b04      	ldr	r3, [sp, #16]
 8010df8:	b333      	cbz	r3, 8010e48 <_strtod_l+0xb78>
 8010dfa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010dfc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010e00:	d822      	bhi.n	8010e48 <_strtod_l+0xb78>
 8010e02:	a32d      	add	r3, pc, #180	; (adr r3, 8010eb8 <_strtod_l+0xbe8>)
 8010e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e08:	4640      	mov	r0, r8
 8010e0a:	4649      	mov	r1, r9
 8010e0c:	f7ef fe88 	bl	8000b20 <__aeabi_dcmple>
 8010e10:	b1a0      	cbz	r0, 8010e3c <_strtod_l+0xb6c>
 8010e12:	4649      	mov	r1, r9
 8010e14:	4640      	mov	r0, r8
 8010e16:	f7ef fedf 	bl	8000bd8 <__aeabi_d2uiz>
 8010e1a:	2801      	cmp	r0, #1
 8010e1c:	bf38      	it	cc
 8010e1e:	2001      	movcc	r0, #1
 8010e20:	f7ef fb88 	bl	8000534 <__aeabi_ui2d>
 8010e24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010e26:	4680      	mov	r8, r0
 8010e28:	4689      	mov	r9, r1
 8010e2a:	bb13      	cbnz	r3, 8010e72 <_strtod_l+0xba2>
 8010e2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010e30:	9014      	str	r0, [sp, #80]	; 0x50
 8010e32:	9315      	str	r3, [sp, #84]	; 0x54
 8010e34:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010e38:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010e3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010e40:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010e44:	1a9b      	subs	r3, r3, r2
 8010e46:	930d      	str	r3, [sp, #52]	; 0x34
 8010e48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010e4c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8010e50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010e54:	f002 f94e 	bl	80130f4 <__ulp>
 8010e58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010e5c:	ec53 2b10 	vmov	r2, r3, d0
 8010e60:	f7ef fbe2 	bl	8000628 <__aeabi_dmul>
 8010e64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010e68:	f7ef fa28 	bl	80002bc <__adddf3>
 8010e6c:	4682      	mov	sl, r0
 8010e6e:	468b      	mov	fp, r1
 8010e70:	e78f      	b.n	8010d92 <_strtod_l+0xac2>
 8010e72:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8010e76:	e7dd      	b.n	8010e34 <_strtod_l+0xb64>
 8010e78:	a311      	add	r3, pc, #68	; (adr r3, 8010ec0 <_strtod_l+0xbf0>)
 8010e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e7e:	f7ef fe45 	bl	8000b0c <__aeabi_dcmplt>
 8010e82:	e7b4      	b.n	8010dee <_strtod_l+0xb1e>
 8010e84:	2300      	movs	r3, #0
 8010e86:	930e      	str	r3, [sp, #56]	; 0x38
 8010e88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010e8a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010e8c:	6013      	str	r3, [r2, #0]
 8010e8e:	f7ff ba65 	b.w	801035c <_strtod_l+0x8c>
 8010e92:	2b65      	cmp	r3, #101	; 0x65
 8010e94:	f43f ab5d 	beq.w	8010552 <_strtod_l+0x282>
 8010e98:	2b45      	cmp	r3, #69	; 0x45
 8010e9a:	f43f ab5a 	beq.w	8010552 <_strtod_l+0x282>
 8010e9e:	2201      	movs	r2, #1
 8010ea0:	f7ff bb92 	b.w	80105c8 <_strtod_l+0x2f8>
 8010ea4:	f3af 8000 	nop.w
 8010ea8:	94a03595 	.word	0x94a03595
 8010eac:	3fdfffff 	.word	0x3fdfffff
 8010eb0:	35afe535 	.word	0x35afe535
 8010eb4:	3fe00000 	.word	0x3fe00000
 8010eb8:	ffc00000 	.word	0xffc00000
 8010ebc:	41dfffff 	.word	0x41dfffff
 8010ec0:	94a03595 	.word	0x94a03595
 8010ec4:	3fcfffff 	.word	0x3fcfffff
 8010ec8:	3ff00000 	.word	0x3ff00000
 8010ecc:	7ff00000 	.word	0x7ff00000
 8010ed0:	7fe00000 	.word	0x7fe00000
 8010ed4:	7c9fffff 	.word	0x7c9fffff
 8010ed8:	3fe00000 	.word	0x3fe00000
 8010edc:	bff00000 	.word	0xbff00000
 8010ee0:	7fefffff 	.word	0x7fefffff

08010ee4 <_strtod_r>:
 8010ee4:	4b01      	ldr	r3, [pc, #4]	; (8010eec <_strtod_r+0x8>)
 8010ee6:	f7ff b9f3 	b.w	80102d0 <_strtod_l>
 8010eea:	bf00      	nop
 8010eec:	200000c0 	.word	0x200000c0

08010ef0 <_strtol_l.isra.0>:
 8010ef0:	2b01      	cmp	r3, #1
 8010ef2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ef6:	d001      	beq.n	8010efc <_strtol_l.isra.0+0xc>
 8010ef8:	2b24      	cmp	r3, #36	; 0x24
 8010efa:	d906      	bls.n	8010f0a <_strtol_l.isra.0+0x1a>
 8010efc:	f7fe f968 	bl	800f1d0 <__errno>
 8010f00:	2316      	movs	r3, #22
 8010f02:	6003      	str	r3, [r0, #0]
 8010f04:	2000      	movs	r0, #0
 8010f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f0a:	4f3a      	ldr	r7, [pc, #232]	; (8010ff4 <_strtol_l.isra.0+0x104>)
 8010f0c:	468e      	mov	lr, r1
 8010f0e:	4676      	mov	r6, lr
 8010f10:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8010f14:	5de5      	ldrb	r5, [r4, r7]
 8010f16:	f015 0508 	ands.w	r5, r5, #8
 8010f1a:	d1f8      	bne.n	8010f0e <_strtol_l.isra.0+0x1e>
 8010f1c:	2c2d      	cmp	r4, #45	; 0x2d
 8010f1e:	d134      	bne.n	8010f8a <_strtol_l.isra.0+0x9a>
 8010f20:	f89e 4000 	ldrb.w	r4, [lr]
 8010f24:	f04f 0801 	mov.w	r8, #1
 8010f28:	f106 0e02 	add.w	lr, r6, #2
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d05c      	beq.n	8010fea <_strtol_l.isra.0+0xfa>
 8010f30:	2b10      	cmp	r3, #16
 8010f32:	d10c      	bne.n	8010f4e <_strtol_l.isra.0+0x5e>
 8010f34:	2c30      	cmp	r4, #48	; 0x30
 8010f36:	d10a      	bne.n	8010f4e <_strtol_l.isra.0+0x5e>
 8010f38:	f89e 4000 	ldrb.w	r4, [lr]
 8010f3c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010f40:	2c58      	cmp	r4, #88	; 0x58
 8010f42:	d14d      	bne.n	8010fe0 <_strtol_l.isra.0+0xf0>
 8010f44:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8010f48:	2310      	movs	r3, #16
 8010f4a:	f10e 0e02 	add.w	lr, lr, #2
 8010f4e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8010f52:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010f56:	2600      	movs	r6, #0
 8010f58:	fbbc f9f3 	udiv	r9, ip, r3
 8010f5c:	4635      	mov	r5, r6
 8010f5e:	fb03 ca19 	mls	sl, r3, r9, ip
 8010f62:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8010f66:	2f09      	cmp	r7, #9
 8010f68:	d818      	bhi.n	8010f9c <_strtol_l.isra.0+0xac>
 8010f6a:	463c      	mov	r4, r7
 8010f6c:	42a3      	cmp	r3, r4
 8010f6e:	dd24      	ble.n	8010fba <_strtol_l.isra.0+0xca>
 8010f70:	2e00      	cmp	r6, #0
 8010f72:	db1f      	blt.n	8010fb4 <_strtol_l.isra.0+0xc4>
 8010f74:	45a9      	cmp	r9, r5
 8010f76:	d31d      	bcc.n	8010fb4 <_strtol_l.isra.0+0xc4>
 8010f78:	d101      	bne.n	8010f7e <_strtol_l.isra.0+0x8e>
 8010f7a:	45a2      	cmp	sl, r4
 8010f7c:	db1a      	blt.n	8010fb4 <_strtol_l.isra.0+0xc4>
 8010f7e:	fb05 4503 	mla	r5, r5, r3, r4
 8010f82:	2601      	movs	r6, #1
 8010f84:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8010f88:	e7eb      	b.n	8010f62 <_strtol_l.isra.0+0x72>
 8010f8a:	2c2b      	cmp	r4, #43	; 0x2b
 8010f8c:	bf08      	it	eq
 8010f8e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8010f92:	46a8      	mov	r8, r5
 8010f94:	bf08      	it	eq
 8010f96:	f106 0e02 	addeq.w	lr, r6, #2
 8010f9a:	e7c7      	b.n	8010f2c <_strtol_l.isra.0+0x3c>
 8010f9c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8010fa0:	2f19      	cmp	r7, #25
 8010fa2:	d801      	bhi.n	8010fa8 <_strtol_l.isra.0+0xb8>
 8010fa4:	3c37      	subs	r4, #55	; 0x37
 8010fa6:	e7e1      	b.n	8010f6c <_strtol_l.isra.0+0x7c>
 8010fa8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8010fac:	2f19      	cmp	r7, #25
 8010fae:	d804      	bhi.n	8010fba <_strtol_l.isra.0+0xca>
 8010fb0:	3c57      	subs	r4, #87	; 0x57
 8010fb2:	e7db      	b.n	8010f6c <_strtol_l.isra.0+0x7c>
 8010fb4:	f04f 36ff 	mov.w	r6, #4294967295
 8010fb8:	e7e4      	b.n	8010f84 <_strtol_l.isra.0+0x94>
 8010fba:	2e00      	cmp	r6, #0
 8010fbc:	da05      	bge.n	8010fca <_strtol_l.isra.0+0xda>
 8010fbe:	2322      	movs	r3, #34	; 0x22
 8010fc0:	6003      	str	r3, [r0, #0]
 8010fc2:	4665      	mov	r5, ip
 8010fc4:	b942      	cbnz	r2, 8010fd8 <_strtol_l.isra.0+0xe8>
 8010fc6:	4628      	mov	r0, r5
 8010fc8:	e79d      	b.n	8010f06 <_strtol_l.isra.0+0x16>
 8010fca:	f1b8 0f00 	cmp.w	r8, #0
 8010fce:	d000      	beq.n	8010fd2 <_strtol_l.isra.0+0xe2>
 8010fd0:	426d      	negs	r5, r5
 8010fd2:	2a00      	cmp	r2, #0
 8010fd4:	d0f7      	beq.n	8010fc6 <_strtol_l.isra.0+0xd6>
 8010fd6:	b10e      	cbz	r6, 8010fdc <_strtol_l.isra.0+0xec>
 8010fd8:	f10e 31ff 	add.w	r1, lr, #4294967295
 8010fdc:	6011      	str	r1, [r2, #0]
 8010fde:	e7f2      	b.n	8010fc6 <_strtol_l.isra.0+0xd6>
 8010fe0:	2430      	movs	r4, #48	; 0x30
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d1b3      	bne.n	8010f4e <_strtol_l.isra.0+0x5e>
 8010fe6:	2308      	movs	r3, #8
 8010fe8:	e7b1      	b.n	8010f4e <_strtol_l.isra.0+0x5e>
 8010fea:	2c30      	cmp	r4, #48	; 0x30
 8010fec:	d0a4      	beq.n	8010f38 <_strtol_l.isra.0+0x48>
 8010fee:	230a      	movs	r3, #10
 8010ff0:	e7ad      	b.n	8010f4e <_strtol_l.isra.0+0x5e>
 8010ff2:	bf00      	nop
 8010ff4:	08015029 	.word	0x08015029

08010ff8 <_strtol_r>:
 8010ff8:	f7ff bf7a 	b.w	8010ef0 <_strtol_l.isra.0>

08010ffc <strtol>:
 8010ffc:	4613      	mov	r3, r2
 8010ffe:	460a      	mov	r2, r1
 8011000:	4601      	mov	r1, r0
 8011002:	4802      	ldr	r0, [pc, #8]	; (801100c <strtol+0x10>)
 8011004:	6800      	ldr	r0, [r0, #0]
 8011006:	f7ff bf73 	b.w	8010ef0 <_strtol_l.isra.0>
 801100a:	bf00      	nop
 801100c:	20000058 	.word	0x20000058

08011010 <__swbuf_r>:
 8011010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011012:	460e      	mov	r6, r1
 8011014:	4614      	mov	r4, r2
 8011016:	4605      	mov	r5, r0
 8011018:	b118      	cbz	r0, 8011022 <__swbuf_r+0x12>
 801101a:	6983      	ldr	r3, [r0, #24]
 801101c:	b90b      	cbnz	r3, 8011022 <__swbuf_r+0x12>
 801101e:	f001 f851 	bl	80120c4 <__sinit>
 8011022:	4b21      	ldr	r3, [pc, #132]	; (80110a8 <__swbuf_r+0x98>)
 8011024:	429c      	cmp	r4, r3
 8011026:	d12b      	bne.n	8011080 <__swbuf_r+0x70>
 8011028:	686c      	ldr	r4, [r5, #4]
 801102a:	69a3      	ldr	r3, [r4, #24]
 801102c:	60a3      	str	r3, [r4, #8]
 801102e:	89a3      	ldrh	r3, [r4, #12]
 8011030:	071a      	lsls	r2, r3, #28
 8011032:	d52f      	bpl.n	8011094 <__swbuf_r+0x84>
 8011034:	6923      	ldr	r3, [r4, #16]
 8011036:	b36b      	cbz	r3, 8011094 <__swbuf_r+0x84>
 8011038:	6923      	ldr	r3, [r4, #16]
 801103a:	6820      	ldr	r0, [r4, #0]
 801103c:	1ac0      	subs	r0, r0, r3
 801103e:	6963      	ldr	r3, [r4, #20]
 8011040:	b2f6      	uxtb	r6, r6
 8011042:	4283      	cmp	r3, r0
 8011044:	4637      	mov	r7, r6
 8011046:	dc04      	bgt.n	8011052 <__swbuf_r+0x42>
 8011048:	4621      	mov	r1, r4
 801104a:	4628      	mov	r0, r5
 801104c:	f000 ffa6 	bl	8011f9c <_fflush_r>
 8011050:	bb30      	cbnz	r0, 80110a0 <__swbuf_r+0x90>
 8011052:	68a3      	ldr	r3, [r4, #8]
 8011054:	3b01      	subs	r3, #1
 8011056:	60a3      	str	r3, [r4, #8]
 8011058:	6823      	ldr	r3, [r4, #0]
 801105a:	1c5a      	adds	r2, r3, #1
 801105c:	6022      	str	r2, [r4, #0]
 801105e:	701e      	strb	r6, [r3, #0]
 8011060:	6963      	ldr	r3, [r4, #20]
 8011062:	3001      	adds	r0, #1
 8011064:	4283      	cmp	r3, r0
 8011066:	d004      	beq.n	8011072 <__swbuf_r+0x62>
 8011068:	89a3      	ldrh	r3, [r4, #12]
 801106a:	07db      	lsls	r3, r3, #31
 801106c:	d506      	bpl.n	801107c <__swbuf_r+0x6c>
 801106e:	2e0a      	cmp	r6, #10
 8011070:	d104      	bne.n	801107c <__swbuf_r+0x6c>
 8011072:	4621      	mov	r1, r4
 8011074:	4628      	mov	r0, r5
 8011076:	f000 ff91 	bl	8011f9c <_fflush_r>
 801107a:	b988      	cbnz	r0, 80110a0 <__swbuf_r+0x90>
 801107c:	4638      	mov	r0, r7
 801107e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011080:	4b0a      	ldr	r3, [pc, #40]	; (80110ac <__swbuf_r+0x9c>)
 8011082:	429c      	cmp	r4, r3
 8011084:	d101      	bne.n	801108a <__swbuf_r+0x7a>
 8011086:	68ac      	ldr	r4, [r5, #8]
 8011088:	e7cf      	b.n	801102a <__swbuf_r+0x1a>
 801108a:	4b09      	ldr	r3, [pc, #36]	; (80110b0 <__swbuf_r+0xa0>)
 801108c:	429c      	cmp	r4, r3
 801108e:	bf08      	it	eq
 8011090:	68ec      	ldreq	r4, [r5, #12]
 8011092:	e7ca      	b.n	801102a <__swbuf_r+0x1a>
 8011094:	4621      	mov	r1, r4
 8011096:	4628      	mov	r0, r5
 8011098:	f000 f80c 	bl	80110b4 <__swsetup_r>
 801109c:	2800      	cmp	r0, #0
 801109e:	d0cb      	beq.n	8011038 <__swbuf_r+0x28>
 80110a0:	f04f 37ff 	mov.w	r7, #4294967295
 80110a4:	e7ea      	b.n	801107c <__swbuf_r+0x6c>
 80110a6:	bf00      	nop
 80110a8:	08015284 	.word	0x08015284
 80110ac:	080152a4 	.word	0x080152a4
 80110b0:	08015264 	.word	0x08015264

080110b4 <__swsetup_r>:
 80110b4:	4b32      	ldr	r3, [pc, #200]	; (8011180 <__swsetup_r+0xcc>)
 80110b6:	b570      	push	{r4, r5, r6, lr}
 80110b8:	681d      	ldr	r5, [r3, #0]
 80110ba:	4606      	mov	r6, r0
 80110bc:	460c      	mov	r4, r1
 80110be:	b125      	cbz	r5, 80110ca <__swsetup_r+0x16>
 80110c0:	69ab      	ldr	r3, [r5, #24]
 80110c2:	b913      	cbnz	r3, 80110ca <__swsetup_r+0x16>
 80110c4:	4628      	mov	r0, r5
 80110c6:	f000 fffd 	bl	80120c4 <__sinit>
 80110ca:	4b2e      	ldr	r3, [pc, #184]	; (8011184 <__swsetup_r+0xd0>)
 80110cc:	429c      	cmp	r4, r3
 80110ce:	d10f      	bne.n	80110f0 <__swsetup_r+0x3c>
 80110d0:	686c      	ldr	r4, [r5, #4]
 80110d2:	89a3      	ldrh	r3, [r4, #12]
 80110d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80110d8:	0719      	lsls	r1, r3, #28
 80110da:	d42c      	bmi.n	8011136 <__swsetup_r+0x82>
 80110dc:	06dd      	lsls	r5, r3, #27
 80110de:	d411      	bmi.n	8011104 <__swsetup_r+0x50>
 80110e0:	2309      	movs	r3, #9
 80110e2:	6033      	str	r3, [r6, #0]
 80110e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80110e8:	81a3      	strh	r3, [r4, #12]
 80110ea:	f04f 30ff 	mov.w	r0, #4294967295
 80110ee:	e03e      	b.n	801116e <__swsetup_r+0xba>
 80110f0:	4b25      	ldr	r3, [pc, #148]	; (8011188 <__swsetup_r+0xd4>)
 80110f2:	429c      	cmp	r4, r3
 80110f4:	d101      	bne.n	80110fa <__swsetup_r+0x46>
 80110f6:	68ac      	ldr	r4, [r5, #8]
 80110f8:	e7eb      	b.n	80110d2 <__swsetup_r+0x1e>
 80110fa:	4b24      	ldr	r3, [pc, #144]	; (801118c <__swsetup_r+0xd8>)
 80110fc:	429c      	cmp	r4, r3
 80110fe:	bf08      	it	eq
 8011100:	68ec      	ldreq	r4, [r5, #12]
 8011102:	e7e6      	b.n	80110d2 <__swsetup_r+0x1e>
 8011104:	0758      	lsls	r0, r3, #29
 8011106:	d512      	bpl.n	801112e <__swsetup_r+0x7a>
 8011108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801110a:	b141      	cbz	r1, 801111e <__swsetup_r+0x6a>
 801110c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011110:	4299      	cmp	r1, r3
 8011112:	d002      	beq.n	801111a <__swsetup_r+0x66>
 8011114:	4630      	mov	r0, r6
 8011116:	f002 f94b 	bl	80133b0 <_free_r>
 801111a:	2300      	movs	r3, #0
 801111c:	6363      	str	r3, [r4, #52]	; 0x34
 801111e:	89a3      	ldrh	r3, [r4, #12]
 8011120:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011124:	81a3      	strh	r3, [r4, #12]
 8011126:	2300      	movs	r3, #0
 8011128:	6063      	str	r3, [r4, #4]
 801112a:	6923      	ldr	r3, [r4, #16]
 801112c:	6023      	str	r3, [r4, #0]
 801112e:	89a3      	ldrh	r3, [r4, #12]
 8011130:	f043 0308 	orr.w	r3, r3, #8
 8011134:	81a3      	strh	r3, [r4, #12]
 8011136:	6923      	ldr	r3, [r4, #16]
 8011138:	b94b      	cbnz	r3, 801114e <__swsetup_r+0x9a>
 801113a:	89a3      	ldrh	r3, [r4, #12]
 801113c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011144:	d003      	beq.n	801114e <__swsetup_r+0x9a>
 8011146:	4621      	mov	r1, r4
 8011148:	4630      	mov	r0, r6
 801114a:	f001 fbf3 	bl	8012934 <__smakebuf_r>
 801114e:	89a0      	ldrh	r0, [r4, #12]
 8011150:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011154:	f010 0301 	ands.w	r3, r0, #1
 8011158:	d00a      	beq.n	8011170 <__swsetup_r+0xbc>
 801115a:	2300      	movs	r3, #0
 801115c:	60a3      	str	r3, [r4, #8]
 801115e:	6963      	ldr	r3, [r4, #20]
 8011160:	425b      	negs	r3, r3
 8011162:	61a3      	str	r3, [r4, #24]
 8011164:	6923      	ldr	r3, [r4, #16]
 8011166:	b943      	cbnz	r3, 801117a <__swsetup_r+0xc6>
 8011168:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801116c:	d1ba      	bne.n	80110e4 <__swsetup_r+0x30>
 801116e:	bd70      	pop	{r4, r5, r6, pc}
 8011170:	0781      	lsls	r1, r0, #30
 8011172:	bf58      	it	pl
 8011174:	6963      	ldrpl	r3, [r4, #20]
 8011176:	60a3      	str	r3, [r4, #8]
 8011178:	e7f4      	b.n	8011164 <__swsetup_r+0xb0>
 801117a:	2000      	movs	r0, #0
 801117c:	e7f7      	b.n	801116e <__swsetup_r+0xba>
 801117e:	bf00      	nop
 8011180:	20000058 	.word	0x20000058
 8011184:	08015284 	.word	0x08015284
 8011188:	080152a4 	.word	0x080152a4
 801118c:	08015264 	.word	0x08015264

08011190 <abort>:
 8011190:	b508      	push	{r3, lr}
 8011192:	2006      	movs	r0, #6
 8011194:	f002 fb78 	bl	8013888 <raise>
 8011198:	2001      	movs	r0, #1
 801119a:	f7f2 fd1b 	bl	8003bd4 <_exit>

0801119e <quorem>:
 801119e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111a2:	6903      	ldr	r3, [r0, #16]
 80111a4:	690c      	ldr	r4, [r1, #16]
 80111a6:	42a3      	cmp	r3, r4
 80111a8:	4607      	mov	r7, r0
 80111aa:	f2c0 8081 	blt.w	80112b0 <quorem+0x112>
 80111ae:	3c01      	subs	r4, #1
 80111b0:	f101 0814 	add.w	r8, r1, #20
 80111b4:	f100 0514 	add.w	r5, r0, #20
 80111b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80111bc:	9301      	str	r3, [sp, #4]
 80111be:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80111c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80111c6:	3301      	adds	r3, #1
 80111c8:	429a      	cmp	r2, r3
 80111ca:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80111ce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80111d2:	fbb2 f6f3 	udiv	r6, r2, r3
 80111d6:	d331      	bcc.n	801123c <quorem+0x9e>
 80111d8:	f04f 0e00 	mov.w	lr, #0
 80111dc:	4640      	mov	r0, r8
 80111de:	46ac      	mov	ip, r5
 80111e0:	46f2      	mov	sl, lr
 80111e2:	f850 2b04 	ldr.w	r2, [r0], #4
 80111e6:	b293      	uxth	r3, r2
 80111e8:	fb06 e303 	mla	r3, r6, r3, lr
 80111ec:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80111f0:	b29b      	uxth	r3, r3
 80111f2:	ebaa 0303 	sub.w	r3, sl, r3
 80111f6:	0c12      	lsrs	r2, r2, #16
 80111f8:	f8dc a000 	ldr.w	sl, [ip]
 80111fc:	fb06 e202 	mla	r2, r6, r2, lr
 8011200:	fa13 f38a 	uxtah	r3, r3, sl
 8011204:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011208:	fa1f fa82 	uxth.w	sl, r2
 801120c:	f8dc 2000 	ldr.w	r2, [ip]
 8011210:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8011214:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011218:	b29b      	uxth	r3, r3
 801121a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801121e:	4581      	cmp	r9, r0
 8011220:	f84c 3b04 	str.w	r3, [ip], #4
 8011224:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011228:	d2db      	bcs.n	80111e2 <quorem+0x44>
 801122a:	f855 300b 	ldr.w	r3, [r5, fp]
 801122e:	b92b      	cbnz	r3, 801123c <quorem+0x9e>
 8011230:	9b01      	ldr	r3, [sp, #4]
 8011232:	3b04      	subs	r3, #4
 8011234:	429d      	cmp	r5, r3
 8011236:	461a      	mov	r2, r3
 8011238:	d32e      	bcc.n	8011298 <quorem+0xfa>
 801123a:	613c      	str	r4, [r7, #16]
 801123c:	4638      	mov	r0, r7
 801123e:	f001 feb5 	bl	8012fac <__mcmp>
 8011242:	2800      	cmp	r0, #0
 8011244:	db24      	blt.n	8011290 <quorem+0xf2>
 8011246:	3601      	adds	r6, #1
 8011248:	4628      	mov	r0, r5
 801124a:	f04f 0c00 	mov.w	ip, #0
 801124e:	f858 2b04 	ldr.w	r2, [r8], #4
 8011252:	f8d0 e000 	ldr.w	lr, [r0]
 8011256:	b293      	uxth	r3, r2
 8011258:	ebac 0303 	sub.w	r3, ip, r3
 801125c:	0c12      	lsrs	r2, r2, #16
 801125e:	fa13 f38e 	uxtah	r3, r3, lr
 8011262:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011266:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801126a:	b29b      	uxth	r3, r3
 801126c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011270:	45c1      	cmp	r9, r8
 8011272:	f840 3b04 	str.w	r3, [r0], #4
 8011276:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801127a:	d2e8      	bcs.n	801124e <quorem+0xb0>
 801127c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011280:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011284:	b922      	cbnz	r2, 8011290 <quorem+0xf2>
 8011286:	3b04      	subs	r3, #4
 8011288:	429d      	cmp	r5, r3
 801128a:	461a      	mov	r2, r3
 801128c:	d30a      	bcc.n	80112a4 <quorem+0x106>
 801128e:	613c      	str	r4, [r7, #16]
 8011290:	4630      	mov	r0, r6
 8011292:	b003      	add	sp, #12
 8011294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011298:	6812      	ldr	r2, [r2, #0]
 801129a:	3b04      	subs	r3, #4
 801129c:	2a00      	cmp	r2, #0
 801129e:	d1cc      	bne.n	801123a <quorem+0x9c>
 80112a0:	3c01      	subs	r4, #1
 80112a2:	e7c7      	b.n	8011234 <quorem+0x96>
 80112a4:	6812      	ldr	r2, [r2, #0]
 80112a6:	3b04      	subs	r3, #4
 80112a8:	2a00      	cmp	r2, #0
 80112aa:	d1f0      	bne.n	801128e <quorem+0xf0>
 80112ac:	3c01      	subs	r4, #1
 80112ae:	e7eb      	b.n	8011288 <quorem+0xea>
 80112b0:	2000      	movs	r0, #0
 80112b2:	e7ee      	b.n	8011292 <quorem+0xf4>
 80112b4:	0000      	movs	r0, r0
	...

080112b8 <_dtoa_r>:
 80112b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112bc:	ed2d 8b02 	vpush	{d8}
 80112c0:	ec57 6b10 	vmov	r6, r7, d0
 80112c4:	b095      	sub	sp, #84	; 0x54
 80112c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80112c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80112cc:	9105      	str	r1, [sp, #20]
 80112ce:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80112d2:	4604      	mov	r4, r0
 80112d4:	9209      	str	r2, [sp, #36]	; 0x24
 80112d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80112d8:	b975      	cbnz	r5, 80112f8 <_dtoa_r+0x40>
 80112da:	2010      	movs	r0, #16
 80112dc:	f001 fb6a 	bl	80129b4 <malloc>
 80112e0:	4602      	mov	r2, r0
 80112e2:	6260      	str	r0, [r4, #36]	; 0x24
 80112e4:	b920      	cbnz	r0, 80112f0 <_dtoa_r+0x38>
 80112e6:	4bb2      	ldr	r3, [pc, #712]	; (80115b0 <_dtoa_r+0x2f8>)
 80112e8:	21ea      	movs	r1, #234	; 0xea
 80112ea:	48b2      	ldr	r0, [pc, #712]	; (80115b4 <_dtoa_r+0x2fc>)
 80112ec:	f7fd ff52 	bl	800f194 <__assert_func>
 80112f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80112f4:	6005      	str	r5, [r0, #0]
 80112f6:	60c5      	str	r5, [r0, #12]
 80112f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80112fa:	6819      	ldr	r1, [r3, #0]
 80112fc:	b151      	cbz	r1, 8011314 <_dtoa_r+0x5c>
 80112fe:	685a      	ldr	r2, [r3, #4]
 8011300:	604a      	str	r2, [r1, #4]
 8011302:	2301      	movs	r3, #1
 8011304:	4093      	lsls	r3, r2
 8011306:	608b      	str	r3, [r1, #8]
 8011308:	4620      	mov	r0, r4
 801130a:	f001 fbc7 	bl	8012a9c <_Bfree>
 801130e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011310:	2200      	movs	r2, #0
 8011312:	601a      	str	r2, [r3, #0]
 8011314:	1e3b      	subs	r3, r7, #0
 8011316:	bfb9      	ittee	lt
 8011318:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801131c:	9303      	strlt	r3, [sp, #12]
 801131e:	2300      	movge	r3, #0
 8011320:	f8c8 3000 	strge.w	r3, [r8]
 8011324:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8011328:	4ba3      	ldr	r3, [pc, #652]	; (80115b8 <_dtoa_r+0x300>)
 801132a:	bfbc      	itt	lt
 801132c:	2201      	movlt	r2, #1
 801132e:	f8c8 2000 	strlt.w	r2, [r8]
 8011332:	ea33 0309 	bics.w	r3, r3, r9
 8011336:	d11b      	bne.n	8011370 <_dtoa_r+0xb8>
 8011338:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801133a:	f242 730f 	movw	r3, #9999	; 0x270f
 801133e:	6013      	str	r3, [r2, #0]
 8011340:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011344:	4333      	orrs	r3, r6
 8011346:	f000 857a 	beq.w	8011e3e <_dtoa_r+0xb86>
 801134a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801134c:	b963      	cbnz	r3, 8011368 <_dtoa_r+0xb0>
 801134e:	4b9b      	ldr	r3, [pc, #620]	; (80115bc <_dtoa_r+0x304>)
 8011350:	e024      	b.n	801139c <_dtoa_r+0xe4>
 8011352:	4b9b      	ldr	r3, [pc, #620]	; (80115c0 <_dtoa_r+0x308>)
 8011354:	9300      	str	r3, [sp, #0]
 8011356:	3308      	adds	r3, #8
 8011358:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801135a:	6013      	str	r3, [r2, #0]
 801135c:	9800      	ldr	r0, [sp, #0]
 801135e:	b015      	add	sp, #84	; 0x54
 8011360:	ecbd 8b02 	vpop	{d8}
 8011364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011368:	4b94      	ldr	r3, [pc, #592]	; (80115bc <_dtoa_r+0x304>)
 801136a:	9300      	str	r3, [sp, #0]
 801136c:	3303      	adds	r3, #3
 801136e:	e7f3      	b.n	8011358 <_dtoa_r+0xa0>
 8011370:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011374:	2200      	movs	r2, #0
 8011376:	ec51 0b17 	vmov	r0, r1, d7
 801137a:	2300      	movs	r3, #0
 801137c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8011380:	f7ef fbba 	bl	8000af8 <__aeabi_dcmpeq>
 8011384:	4680      	mov	r8, r0
 8011386:	b158      	cbz	r0, 80113a0 <_dtoa_r+0xe8>
 8011388:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801138a:	2301      	movs	r3, #1
 801138c:	6013      	str	r3, [r2, #0]
 801138e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011390:	2b00      	cmp	r3, #0
 8011392:	f000 8551 	beq.w	8011e38 <_dtoa_r+0xb80>
 8011396:	488b      	ldr	r0, [pc, #556]	; (80115c4 <_dtoa_r+0x30c>)
 8011398:	6018      	str	r0, [r3, #0]
 801139a:	1e43      	subs	r3, r0, #1
 801139c:	9300      	str	r3, [sp, #0]
 801139e:	e7dd      	b.n	801135c <_dtoa_r+0xa4>
 80113a0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80113a4:	aa12      	add	r2, sp, #72	; 0x48
 80113a6:	a913      	add	r1, sp, #76	; 0x4c
 80113a8:	4620      	mov	r0, r4
 80113aa:	f001 ff1f 	bl	80131ec <__d2b>
 80113ae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80113b2:	4683      	mov	fp, r0
 80113b4:	2d00      	cmp	r5, #0
 80113b6:	d07c      	beq.n	80114b2 <_dtoa_r+0x1fa>
 80113b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80113ba:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80113be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80113c2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80113c6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80113ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80113ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80113d2:	4b7d      	ldr	r3, [pc, #500]	; (80115c8 <_dtoa_r+0x310>)
 80113d4:	2200      	movs	r2, #0
 80113d6:	4630      	mov	r0, r6
 80113d8:	4639      	mov	r1, r7
 80113da:	f7ee ff6d 	bl	80002b8 <__aeabi_dsub>
 80113de:	a36e      	add	r3, pc, #440	; (adr r3, 8011598 <_dtoa_r+0x2e0>)
 80113e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113e4:	f7ef f920 	bl	8000628 <__aeabi_dmul>
 80113e8:	a36d      	add	r3, pc, #436	; (adr r3, 80115a0 <_dtoa_r+0x2e8>)
 80113ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ee:	f7ee ff65 	bl	80002bc <__adddf3>
 80113f2:	4606      	mov	r6, r0
 80113f4:	4628      	mov	r0, r5
 80113f6:	460f      	mov	r7, r1
 80113f8:	f7ef f8ac 	bl	8000554 <__aeabi_i2d>
 80113fc:	a36a      	add	r3, pc, #424	; (adr r3, 80115a8 <_dtoa_r+0x2f0>)
 80113fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011402:	f7ef f911 	bl	8000628 <__aeabi_dmul>
 8011406:	4602      	mov	r2, r0
 8011408:	460b      	mov	r3, r1
 801140a:	4630      	mov	r0, r6
 801140c:	4639      	mov	r1, r7
 801140e:	f7ee ff55 	bl	80002bc <__adddf3>
 8011412:	4606      	mov	r6, r0
 8011414:	460f      	mov	r7, r1
 8011416:	f7ef fbb7 	bl	8000b88 <__aeabi_d2iz>
 801141a:	2200      	movs	r2, #0
 801141c:	4682      	mov	sl, r0
 801141e:	2300      	movs	r3, #0
 8011420:	4630      	mov	r0, r6
 8011422:	4639      	mov	r1, r7
 8011424:	f7ef fb72 	bl	8000b0c <__aeabi_dcmplt>
 8011428:	b148      	cbz	r0, 801143e <_dtoa_r+0x186>
 801142a:	4650      	mov	r0, sl
 801142c:	f7ef f892 	bl	8000554 <__aeabi_i2d>
 8011430:	4632      	mov	r2, r6
 8011432:	463b      	mov	r3, r7
 8011434:	f7ef fb60 	bl	8000af8 <__aeabi_dcmpeq>
 8011438:	b908      	cbnz	r0, 801143e <_dtoa_r+0x186>
 801143a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801143e:	f1ba 0f16 	cmp.w	sl, #22
 8011442:	d854      	bhi.n	80114ee <_dtoa_r+0x236>
 8011444:	4b61      	ldr	r3, [pc, #388]	; (80115cc <_dtoa_r+0x314>)
 8011446:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801144a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801144e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011452:	f7ef fb5b 	bl	8000b0c <__aeabi_dcmplt>
 8011456:	2800      	cmp	r0, #0
 8011458:	d04b      	beq.n	80114f2 <_dtoa_r+0x23a>
 801145a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801145e:	2300      	movs	r3, #0
 8011460:	930e      	str	r3, [sp, #56]	; 0x38
 8011462:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011464:	1b5d      	subs	r5, r3, r5
 8011466:	1e6b      	subs	r3, r5, #1
 8011468:	9304      	str	r3, [sp, #16]
 801146a:	bf43      	ittte	mi
 801146c:	2300      	movmi	r3, #0
 801146e:	f1c5 0801 	rsbmi	r8, r5, #1
 8011472:	9304      	strmi	r3, [sp, #16]
 8011474:	f04f 0800 	movpl.w	r8, #0
 8011478:	f1ba 0f00 	cmp.w	sl, #0
 801147c:	db3b      	blt.n	80114f6 <_dtoa_r+0x23e>
 801147e:	9b04      	ldr	r3, [sp, #16]
 8011480:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8011484:	4453      	add	r3, sl
 8011486:	9304      	str	r3, [sp, #16]
 8011488:	2300      	movs	r3, #0
 801148a:	9306      	str	r3, [sp, #24]
 801148c:	9b05      	ldr	r3, [sp, #20]
 801148e:	2b09      	cmp	r3, #9
 8011490:	d869      	bhi.n	8011566 <_dtoa_r+0x2ae>
 8011492:	2b05      	cmp	r3, #5
 8011494:	bfc4      	itt	gt
 8011496:	3b04      	subgt	r3, #4
 8011498:	9305      	strgt	r3, [sp, #20]
 801149a:	9b05      	ldr	r3, [sp, #20]
 801149c:	f1a3 0302 	sub.w	r3, r3, #2
 80114a0:	bfcc      	ite	gt
 80114a2:	2500      	movgt	r5, #0
 80114a4:	2501      	movle	r5, #1
 80114a6:	2b03      	cmp	r3, #3
 80114a8:	d869      	bhi.n	801157e <_dtoa_r+0x2c6>
 80114aa:	e8df f003 	tbb	[pc, r3]
 80114ae:	4e2c      	.short	0x4e2c
 80114b0:	5a4c      	.short	0x5a4c
 80114b2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80114b6:	441d      	add	r5, r3
 80114b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80114bc:	2b20      	cmp	r3, #32
 80114be:	bfc1      	itttt	gt
 80114c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80114c4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80114c8:	fa09 f303 	lslgt.w	r3, r9, r3
 80114cc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80114d0:	bfda      	itte	le
 80114d2:	f1c3 0320 	rsble	r3, r3, #32
 80114d6:	fa06 f003 	lslle.w	r0, r6, r3
 80114da:	4318      	orrgt	r0, r3
 80114dc:	f7ef f82a 	bl	8000534 <__aeabi_ui2d>
 80114e0:	2301      	movs	r3, #1
 80114e2:	4606      	mov	r6, r0
 80114e4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80114e8:	3d01      	subs	r5, #1
 80114ea:	9310      	str	r3, [sp, #64]	; 0x40
 80114ec:	e771      	b.n	80113d2 <_dtoa_r+0x11a>
 80114ee:	2301      	movs	r3, #1
 80114f0:	e7b6      	b.n	8011460 <_dtoa_r+0x1a8>
 80114f2:	900e      	str	r0, [sp, #56]	; 0x38
 80114f4:	e7b5      	b.n	8011462 <_dtoa_r+0x1aa>
 80114f6:	f1ca 0300 	rsb	r3, sl, #0
 80114fa:	9306      	str	r3, [sp, #24]
 80114fc:	2300      	movs	r3, #0
 80114fe:	eba8 080a 	sub.w	r8, r8, sl
 8011502:	930d      	str	r3, [sp, #52]	; 0x34
 8011504:	e7c2      	b.n	801148c <_dtoa_r+0x1d4>
 8011506:	2300      	movs	r3, #0
 8011508:	9308      	str	r3, [sp, #32]
 801150a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801150c:	2b00      	cmp	r3, #0
 801150e:	dc39      	bgt.n	8011584 <_dtoa_r+0x2cc>
 8011510:	f04f 0901 	mov.w	r9, #1
 8011514:	f8cd 9004 	str.w	r9, [sp, #4]
 8011518:	464b      	mov	r3, r9
 801151a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801151e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011520:	2200      	movs	r2, #0
 8011522:	6042      	str	r2, [r0, #4]
 8011524:	2204      	movs	r2, #4
 8011526:	f102 0614 	add.w	r6, r2, #20
 801152a:	429e      	cmp	r6, r3
 801152c:	6841      	ldr	r1, [r0, #4]
 801152e:	d92f      	bls.n	8011590 <_dtoa_r+0x2d8>
 8011530:	4620      	mov	r0, r4
 8011532:	f001 fa73 	bl	8012a1c <_Balloc>
 8011536:	9000      	str	r0, [sp, #0]
 8011538:	2800      	cmp	r0, #0
 801153a:	d14b      	bne.n	80115d4 <_dtoa_r+0x31c>
 801153c:	4b24      	ldr	r3, [pc, #144]	; (80115d0 <_dtoa_r+0x318>)
 801153e:	4602      	mov	r2, r0
 8011540:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011544:	e6d1      	b.n	80112ea <_dtoa_r+0x32>
 8011546:	2301      	movs	r3, #1
 8011548:	e7de      	b.n	8011508 <_dtoa_r+0x250>
 801154a:	2300      	movs	r3, #0
 801154c:	9308      	str	r3, [sp, #32]
 801154e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011550:	eb0a 0903 	add.w	r9, sl, r3
 8011554:	f109 0301 	add.w	r3, r9, #1
 8011558:	2b01      	cmp	r3, #1
 801155a:	9301      	str	r3, [sp, #4]
 801155c:	bfb8      	it	lt
 801155e:	2301      	movlt	r3, #1
 8011560:	e7dd      	b.n	801151e <_dtoa_r+0x266>
 8011562:	2301      	movs	r3, #1
 8011564:	e7f2      	b.n	801154c <_dtoa_r+0x294>
 8011566:	2501      	movs	r5, #1
 8011568:	2300      	movs	r3, #0
 801156a:	9305      	str	r3, [sp, #20]
 801156c:	9508      	str	r5, [sp, #32]
 801156e:	f04f 39ff 	mov.w	r9, #4294967295
 8011572:	2200      	movs	r2, #0
 8011574:	f8cd 9004 	str.w	r9, [sp, #4]
 8011578:	2312      	movs	r3, #18
 801157a:	9209      	str	r2, [sp, #36]	; 0x24
 801157c:	e7cf      	b.n	801151e <_dtoa_r+0x266>
 801157e:	2301      	movs	r3, #1
 8011580:	9308      	str	r3, [sp, #32]
 8011582:	e7f4      	b.n	801156e <_dtoa_r+0x2b6>
 8011584:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8011588:	f8cd 9004 	str.w	r9, [sp, #4]
 801158c:	464b      	mov	r3, r9
 801158e:	e7c6      	b.n	801151e <_dtoa_r+0x266>
 8011590:	3101      	adds	r1, #1
 8011592:	6041      	str	r1, [r0, #4]
 8011594:	0052      	lsls	r2, r2, #1
 8011596:	e7c6      	b.n	8011526 <_dtoa_r+0x26e>
 8011598:	636f4361 	.word	0x636f4361
 801159c:	3fd287a7 	.word	0x3fd287a7
 80115a0:	8b60c8b3 	.word	0x8b60c8b3
 80115a4:	3fc68a28 	.word	0x3fc68a28
 80115a8:	509f79fb 	.word	0x509f79fb
 80115ac:	3fd34413 	.word	0x3fd34413
 80115b0:	080151dd 	.word	0x080151dd
 80115b4:	080151f4 	.word	0x080151f4
 80115b8:	7ff00000 	.word	0x7ff00000
 80115bc:	080151d9 	.word	0x080151d9
 80115c0:	080151d0 	.word	0x080151d0
 80115c4:	08015152 	.word	0x08015152
 80115c8:	3ff80000 	.word	0x3ff80000
 80115cc:	080153d0 	.word	0x080153d0
 80115d0:	08015253 	.word	0x08015253
 80115d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80115d6:	9a00      	ldr	r2, [sp, #0]
 80115d8:	601a      	str	r2, [r3, #0]
 80115da:	9b01      	ldr	r3, [sp, #4]
 80115dc:	2b0e      	cmp	r3, #14
 80115de:	f200 80ad 	bhi.w	801173c <_dtoa_r+0x484>
 80115e2:	2d00      	cmp	r5, #0
 80115e4:	f000 80aa 	beq.w	801173c <_dtoa_r+0x484>
 80115e8:	f1ba 0f00 	cmp.w	sl, #0
 80115ec:	dd36      	ble.n	801165c <_dtoa_r+0x3a4>
 80115ee:	4ac3      	ldr	r2, [pc, #780]	; (80118fc <_dtoa_r+0x644>)
 80115f0:	f00a 030f 	and.w	r3, sl, #15
 80115f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80115f8:	ed93 7b00 	vldr	d7, [r3]
 80115fc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8011600:	ea4f 172a 	mov.w	r7, sl, asr #4
 8011604:	eeb0 8a47 	vmov.f32	s16, s14
 8011608:	eef0 8a67 	vmov.f32	s17, s15
 801160c:	d016      	beq.n	801163c <_dtoa_r+0x384>
 801160e:	4bbc      	ldr	r3, [pc, #752]	; (8011900 <_dtoa_r+0x648>)
 8011610:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011614:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011618:	f7ef f930 	bl	800087c <__aeabi_ddiv>
 801161c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011620:	f007 070f 	and.w	r7, r7, #15
 8011624:	2503      	movs	r5, #3
 8011626:	4eb6      	ldr	r6, [pc, #728]	; (8011900 <_dtoa_r+0x648>)
 8011628:	b957      	cbnz	r7, 8011640 <_dtoa_r+0x388>
 801162a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801162e:	ec53 2b18 	vmov	r2, r3, d8
 8011632:	f7ef f923 	bl	800087c <__aeabi_ddiv>
 8011636:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801163a:	e029      	b.n	8011690 <_dtoa_r+0x3d8>
 801163c:	2502      	movs	r5, #2
 801163e:	e7f2      	b.n	8011626 <_dtoa_r+0x36e>
 8011640:	07f9      	lsls	r1, r7, #31
 8011642:	d508      	bpl.n	8011656 <_dtoa_r+0x39e>
 8011644:	ec51 0b18 	vmov	r0, r1, d8
 8011648:	e9d6 2300 	ldrd	r2, r3, [r6]
 801164c:	f7ee ffec 	bl	8000628 <__aeabi_dmul>
 8011650:	ec41 0b18 	vmov	d8, r0, r1
 8011654:	3501      	adds	r5, #1
 8011656:	107f      	asrs	r7, r7, #1
 8011658:	3608      	adds	r6, #8
 801165a:	e7e5      	b.n	8011628 <_dtoa_r+0x370>
 801165c:	f000 80a6 	beq.w	80117ac <_dtoa_r+0x4f4>
 8011660:	f1ca 0600 	rsb	r6, sl, #0
 8011664:	4ba5      	ldr	r3, [pc, #660]	; (80118fc <_dtoa_r+0x644>)
 8011666:	4fa6      	ldr	r7, [pc, #664]	; (8011900 <_dtoa_r+0x648>)
 8011668:	f006 020f 	and.w	r2, r6, #15
 801166c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011674:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011678:	f7ee ffd6 	bl	8000628 <__aeabi_dmul>
 801167c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011680:	1136      	asrs	r6, r6, #4
 8011682:	2300      	movs	r3, #0
 8011684:	2502      	movs	r5, #2
 8011686:	2e00      	cmp	r6, #0
 8011688:	f040 8085 	bne.w	8011796 <_dtoa_r+0x4de>
 801168c:	2b00      	cmp	r3, #0
 801168e:	d1d2      	bne.n	8011636 <_dtoa_r+0x37e>
 8011690:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011692:	2b00      	cmp	r3, #0
 8011694:	f000 808c 	beq.w	80117b0 <_dtoa_r+0x4f8>
 8011698:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801169c:	4b99      	ldr	r3, [pc, #612]	; (8011904 <_dtoa_r+0x64c>)
 801169e:	2200      	movs	r2, #0
 80116a0:	4630      	mov	r0, r6
 80116a2:	4639      	mov	r1, r7
 80116a4:	f7ef fa32 	bl	8000b0c <__aeabi_dcmplt>
 80116a8:	2800      	cmp	r0, #0
 80116aa:	f000 8081 	beq.w	80117b0 <_dtoa_r+0x4f8>
 80116ae:	9b01      	ldr	r3, [sp, #4]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d07d      	beq.n	80117b0 <_dtoa_r+0x4f8>
 80116b4:	f1b9 0f00 	cmp.w	r9, #0
 80116b8:	dd3c      	ble.n	8011734 <_dtoa_r+0x47c>
 80116ba:	f10a 33ff 	add.w	r3, sl, #4294967295
 80116be:	9307      	str	r3, [sp, #28]
 80116c0:	2200      	movs	r2, #0
 80116c2:	4b91      	ldr	r3, [pc, #580]	; (8011908 <_dtoa_r+0x650>)
 80116c4:	4630      	mov	r0, r6
 80116c6:	4639      	mov	r1, r7
 80116c8:	f7ee ffae 	bl	8000628 <__aeabi_dmul>
 80116cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80116d0:	3501      	adds	r5, #1
 80116d2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80116d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80116da:	4628      	mov	r0, r5
 80116dc:	f7ee ff3a 	bl	8000554 <__aeabi_i2d>
 80116e0:	4632      	mov	r2, r6
 80116e2:	463b      	mov	r3, r7
 80116e4:	f7ee ffa0 	bl	8000628 <__aeabi_dmul>
 80116e8:	4b88      	ldr	r3, [pc, #544]	; (801190c <_dtoa_r+0x654>)
 80116ea:	2200      	movs	r2, #0
 80116ec:	f7ee fde6 	bl	80002bc <__adddf3>
 80116f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80116f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80116f8:	9303      	str	r3, [sp, #12]
 80116fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d15c      	bne.n	80117ba <_dtoa_r+0x502>
 8011700:	4b83      	ldr	r3, [pc, #524]	; (8011910 <_dtoa_r+0x658>)
 8011702:	2200      	movs	r2, #0
 8011704:	4630      	mov	r0, r6
 8011706:	4639      	mov	r1, r7
 8011708:	f7ee fdd6 	bl	80002b8 <__aeabi_dsub>
 801170c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011710:	4606      	mov	r6, r0
 8011712:	460f      	mov	r7, r1
 8011714:	f7ef fa18 	bl	8000b48 <__aeabi_dcmpgt>
 8011718:	2800      	cmp	r0, #0
 801171a:	f040 8296 	bne.w	8011c4a <_dtoa_r+0x992>
 801171e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011722:	4630      	mov	r0, r6
 8011724:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011728:	4639      	mov	r1, r7
 801172a:	f7ef f9ef 	bl	8000b0c <__aeabi_dcmplt>
 801172e:	2800      	cmp	r0, #0
 8011730:	f040 8288 	bne.w	8011c44 <_dtoa_r+0x98c>
 8011734:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011738:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801173c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801173e:	2b00      	cmp	r3, #0
 8011740:	f2c0 8158 	blt.w	80119f4 <_dtoa_r+0x73c>
 8011744:	f1ba 0f0e 	cmp.w	sl, #14
 8011748:	f300 8154 	bgt.w	80119f4 <_dtoa_r+0x73c>
 801174c:	4b6b      	ldr	r3, [pc, #428]	; (80118fc <_dtoa_r+0x644>)
 801174e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011752:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011758:	2b00      	cmp	r3, #0
 801175a:	f280 80e3 	bge.w	8011924 <_dtoa_r+0x66c>
 801175e:	9b01      	ldr	r3, [sp, #4]
 8011760:	2b00      	cmp	r3, #0
 8011762:	f300 80df 	bgt.w	8011924 <_dtoa_r+0x66c>
 8011766:	f040 826d 	bne.w	8011c44 <_dtoa_r+0x98c>
 801176a:	4b69      	ldr	r3, [pc, #420]	; (8011910 <_dtoa_r+0x658>)
 801176c:	2200      	movs	r2, #0
 801176e:	4640      	mov	r0, r8
 8011770:	4649      	mov	r1, r9
 8011772:	f7ee ff59 	bl	8000628 <__aeabi_dmul>
 8011776:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801177a:	f7ef f9db 	bl	8000b34 <__aeabi_dcmpge>
 801177e:	9e01      	ldr	r6, [sp, #4]
 8011780:	4637      	mov	r7, r6
 8011782:	2800      	cmp	r0, #0
 8011784:	f040 8243 	bne.w	8011c0e <_dtoa_r+0x956>
 8011788:	9d00      	ldr	r5, [sp, #0]
 801178a:	2331      	movs	r3, #49	; 0x31
 801178c:	f805 3b01 	strb.w	r3, [r5], #1
 8011790:	f10a 0a01 	add.w	sl, sl, #1
 8011794:	e23f      	b.n	8011c16 <_dtoa_r+0x95e>
 8011796:	07f2      	lsls	r2, r6, #31
 8011798:	d505      	bpl.n	80117a6 <_dtoa_r+0x4ee>
 801179a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801179e:	f7ee ff43 	bl	8000628 <__aeabi_dmul>
 80117a2:	3501      	adds	r5, #1
 80117a4:	2301      	movs	r3, #1
 80117a6:	1076      	asrs	r6, r6, #1
 80117a8:	3708      	adds	r7, #8
 80117aa:	e76c      	b.n	8011686 <_dtoa_r+0x3ce>
 80117ac:	2502      	movs	r5, #2
 80117ae:	e76f      	b.n	8011690 <_dtoa_r+0x3d8>
 80117b0:	9b01      	ldr	r3, [sp, #4]
 80117b2:	f8cd a01c 	str.w	sl, [sp, #28]
 80117b6:	930c      	str	r3, [sp, #48]	; 0x30
 80117b8:	e78d      	b.n	80116d6 <_dtoa_r+0x41e>
 80117ba:	9900      	ldr	r1, [sp, #0]
 80117bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80117be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80117c0:	4b4e      	ldr	r3, [pc, #312]	; (80118fc <_dtoa_r+0x644>)
 80117c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80117c6:	4401      	add	r1, r0
 80117c8:	9102      	str	r1, [sp, #8]
 80117ca:	9908      	ldr	r1, [sp, #32]
 80117cc:	eeb0 8a47 	vmov.f32	s16, s14
 80117d0:	eef0 8a67 	vmov.f32	s17, s15
 80117d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80117d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80117dc:	2900      	cmp	r1, #0
 80117de:	d045      	beq.n	801186c <_dtoa_r+0x5b4>
 80117e0:	494c      	ldr	r1, [pc, #304]	; (8011914 <_dtoa_r+0x65c>)
 80117e2:	2000      	movs	r0, #0
 80117e4:	f7ef f84a 	bl	800087c <__aeabi_ddiv>
 80117e8:	ec53 2b18 	vmov	r2, r3, d8
 80117ec:	f7ee fd64 	bl	80002b8 <__aeabi_dsub>
 80117f0:	9d00      	ldr	r5, [sp, #0]
 80117f2:	ec41 0b18 	vmov	d8, r0, r1
 80117f6:	4639      	mov	r1, r7
 80117f8:	4630      	mov	r0, r6
 80117fa:	f7ef f9c5 	bl	8000b88 <__aeabi_d2iz>
 80117fe:	900c      	str	r0, [sp, #48]	; 0x30
 8011800:	f7ee fea8 	bl	8000554 <__aeabi_i2d>
 8011804:	4602      	mov	r2, r0
 8011806:	460b      	mov	r3, r1
 8011808:	4630      	mov	r0, r6
 801180a:	4639      	mov	r1, r7
 801180c:	f7ee fd54 	bl	80002b8 <__aeabi_dsub>
 8011810:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011812:	3330      	adds	r3, #48	; 0x30
 8011814:	f805 3b01 	strb.w	r3, [r5], #1
 8011818:	ec53 2b18 	vmov	r2, r3, d8
 801181c:	4606      	mov	r6, r0
 801181e:	460f      	mov	r7, r1
 8011820:	f7ef f974 	bl	8000b0c <__aeabi_dcmplt>
 8011824:	2800      	cmp	r0, #0
 8011826:	d165      	bne.n	80118f4 <_dtoa_r+0x63c>
 8011828:	4632      	mov	r2, r6
 801182a:	463b      	mov	r3, r7
 801182c:	4935      	ldr	r1, [pc, #212]	; (8011904 <_dtoa_r+0x64c>)
 801182e:	2000      	movs	r0, #0
 8011830:	f7ee fd42 	bl	80002b8 <__aeabi_dsub>
 8011834:	ec53 2b18 	vmov	r2, r3, d8
 8011838:	f7ef f968 	bl	8000b0c <__aeabi_dcmplt>
 801183c:	2800      	cmp	r0, #0
 801183e:	f040 80b9 	bne.w	80119b4 <_dtoa_r+0x6fc>
 8011842:	9b02      	ldr	r3, [sp, #8]
 8011844:	429d      	cmp	r5, r3
 8011846:	f43f af75 	beq.w	8011734 <_dtoa_r+0x47c>
 801184a:	4b2f      	ldr	r3, [pc, #188]	; (8011908 <_dtoa_r+0x650>)
 801184c:	ec51 0b18 	vmov	r0, r1, d8
 8011850:	2200      	movs	r2, #0
 8011852:	f7ee fee9 	bl	8000628 <__aeabi_dmul>
 8011856:	4b2c      	ldr	r3, [pc, #176]	; (8011908 <_dtoa_r+0x650>)
 8011858:	ec41 0b18 	vmov	d8, r0, r1
 801185c:	2200      	movs	r2, #0
 801185e:	4630      	mov	r0, r6
 8011860:	4639      	mov	r1, r7
 8011862:	f7ee fee1 	bl	8000628 <__aeabi_dmul>
 8011866:	4606      	mov	r6, r0
 8011868:	460f      	mov	r7, r1
 801186a:	e7c4      	b.n	80117f6 <_dtoa_r+0x53e>
 801186c:	ec51 0b17 	vmov	r0, r1, d7
 8011870:	f7ee feda 	bl	8000628 <__aeabi_dmul>
 8011874:	9b02      	ldr	r3, [sp, #8]
 8011876:	9d00      	ldr	r5, [sp, #0]
 8011878:	930c      	str	r3, [sp, #48]	; 0x30
 801187a:	ec41 0b18 	vmov	d8, r0, r1
 801187e:	4639      	mov	r1, r7
 8011880:	4630      	mov	r0, r6
 8011882:	f7ef f981 	bl	8000b88 <__aeabi_d2iz>
 8011886:	9011      	str	r0, [sp, #68]	; 0x44
 8011888:	f7ee fe64 	bl	8000554 <__aeabi_i2d>
 801188c:	4602      	mov	r2, r0
 801188e:	460b      	mov	r3, r1
 8011890:	4630      	mov	r0, r6
 8011892:	4639      	mov	r1, r7
 8011894:	f7ee fd10 	bl	80002b8 <__aeabi_dsub>
 8011898:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801189a:	3330      	adds	r3, #48	; 0x30
 801189c:	f805 3b01 	strb.w	r3, [r5], #1
 80118a0:	9b02      	ldr	r3, [sp, #8]
 80118a2:	429d      	cmp	r5, r3
 80118a4:	4606      	mov	r6, r0
 80118a6:	460f      	mov	r7, r1
 80118a8:	f04f 0200 	mov.w	r2, #0
 80118ac:	d134      	bne.n	8011918 <_dtoa_r+0x660>
 80118ae:	4b19      	ldr	r3, [pc, #100]	; (8011914 <_dtoa_r+0x65c>)
 80118b0:	ec51 0b18 	vmov	r0, r1, d8
 80118b4:	f7ee fd02 	bl	80002bc <__adddf3>
 80118b8:	4602      	mov	r2, r0
 80118ba:	460b      	mov	r3, r1
 80118bc:	4630      	mov	r0, r6
 80118be:	4639      	mov	r1, r7
 80118c0:	f7ef f942 	bl	8000b48 <__aeabi_dcmpgt>
 80118c4:	2800      	cmp	r0, #0
 80118c6:	d175      	bne.n	80119b4 <_dtoa_r+0x6fc>
 80118c8:	ec53 2b18 	vmov	r2, r3, d8
 80118cc:	4911      	ldr	r1, [pc, #68]	; (8011914 <_dtoa_r+0x65c>)
 80118ce:	2000      	movs	r0, #0
 80118d0:	f7ee fcf2 	bl	80002b8 <__aeabi_dsub>
 80118d4:	4602      	mov	r2, r0
 80118d6:	460b      	mov	r3, r1
 80118d8:	4630      	mov	r0, r6
 80118da:	4639      	mov	r1, r7
 80118dc:	f7ef f916 	bl	8000b0c <__aeabi_dcmplt>
 80118e0:	2800      	cmp	r0, #0
 80118e2:	f43f af27 	beq.w	8011734 <_dtoa_r+0x47c>
 80118e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80118e8:	1e6b      	subs	r3, r5, #1
 80118ea:	930c      	str	r3, [sp, #48]	; 0x30
 80118ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80118f0:	2b30      	cmp	r3, #48	; 0x30
 80118f2:	d0f8      	beq.n	80118e6 <_dtoa_r+0x62e>
 80118f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80118f8:	e04a      	b.n	8011990 <_dtoa_r+0x6d8>
 80118fa:	bf00      	nop
 80118fc:	080153d0 	.word	0x080153d0
 8011900:	080153a8 	.word	0x080153a8
 8011904:	3ff00000 	.word	0x3ff00000
 8011908:	40240000 	.word	0x40240000
 801190c:	401c0000 	.word	0x401c0000
 8011910:	40140000 	.word	0x40140000
 8011914:	3fe00000 	.word	0x3fe00000
 8011918:	4baf      	ldr	r3, [pc, #700]	; (8011bd8 <_dtoa_r+0x920>)
 801191a:	f7ee fe85 	bl	8000628 <__aeabi_dmul>
 801191e:	4606      	mov	r6, r0
 8011920:	460f      	mov	r7, r1
 8011922:	e7ac      	b.n	801187e <_dtoa_r+0x5c6>
 8011924:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011928:	9d00      	ldr	r5, [sp, #0]
 801192a:	4642      	mov	r2, r8
 801192c:	464b      	mov	r3, r9
 801192e:	4630      	mov	r0, r6
 8011930:	4639      	mov	r1, r7
 8011932:	f7ee ffa3 	bl	800087c <__aeabi_ddiv>
 8011936:	f7ef f927 	bl	8000b88 <__aeabi_d2iz>
 801193a:	9002      	str	r0, [sp, #8]
 801193c:	f7ee fe0a 	bl	8000554 <__aeabi_i2d>
 8011940:	4642      	mov	r2, r8
 8011942:	464b      	mov	r3, r9
 8011944:	f7ee fe70 	bl	8000628 <__aeabi_dmul>
 8011948:	4602      	mov	r2, r0
 801194a:	460b      	mov	r3, r1
 801194c:	4630      	mov	r0, r6
 801194e:	4639      	mov	r1, r7
 8011950:	f7ee fcb2 	bl	80002b8 <__aeabi_dsub>
 8011954:	9e02      	ldr	r6, [sp, #8]
 8011956:	9f01      	ldr	r7, [sp, #4]
 8011958:	3630      	adds	r6, #48	; 0x30
 801195a:	f805 6b01 	strb.w	r6, [r5], #1
 801195e:	9e00      	ldr	r6, [sp, #0]
 8011960:	1bae      	subs	r6, r5, r6
 8011962:	42b7      	cmp	r7, r6
 8011964:	4602      	mov	r2, r0
 8011966:	460b      	mov	r3, r1
 8011968:	d137      	bne.n	80119da <_dtoa_r+0x722>
 801196a:	f7ee fca7 	bl	80002bc <__adddf3>
 801196e:	4642      	mov	r2, r8
 8011970:	464b      	mov	r3, r9
 8011972:	4606      	mov	r6, r0
 8011974:	460f      	mov	r7, r1
 8011976:	f7ef f8e7 	bl	8000b48 <__aeabi_dcmpgt>
 801197a:	b9c8      	cbnz	r0, 80119b0 <_dtoa_r+0x6f8>
 801197c:	4642      	mov	r2, r8
 801197e:	464b      	mov	r3, r9
 8011980:	4630      	mov	r0, r6
 8011982:	4639      	mov	r1, r7
 8011984:	f7ef f8b8 	bl	8000af8 <__aeabi_dcmpeq>
 8011988:	b110      	cbz	r0, 8011990 <_dtoa_r+0x6d8>
 801198a:	9b02      	ldr	r3, [sp, #8]
 801198c:	07d9      	lsls	r1, r3, #31
 801198e:	d40f      	bmi.n	80119b0 <_dtoa_r+0x6f8>
 8011990:	4620      	mov	r0, r4
 8011992:	4659      	mov	r1, fp
 8011994:	f001 f882 	bl	8012a9c <_Bfree>
 8011998:	2300      	movs	r3, #0
 801199a:	702b      	strb	r3, [r5, #0]
 801199c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801199e:	f10a 0001 	add.w	r0, sl, #1
 80119a2:	6018      	str	r0, [r3, #0]
 80119a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	f43f acd8 	beq.w	801135c <_dtoa_r+0xa4>
 80119ac:	601d      	str	r5, [r3, #0]
 80119ae:	e4d5      	b.n	801135c <_dtoa_r+0xa4>
 80119b0:	f8cd a01c 	str.w	sl, [sp, #28]
 80119b4:	462b      	mov	r3, r5
 80119b6:	461d      	mov	r5, r3
 80119b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80119bc:	2a39      	cmp	r2, #57	; 0x39
 80119be:	d108      	bne.n	80119d2 <_dtoa_r+0x71a>
 80119c0:	9a00      	ldr	r2, [sp, #0]
 80119c2:	429a      	cmp	r2, r3
 80119c4:	d1f7      	bne.n	80119b6 <_dtoa_r+0x6fe>
 80119c6:	9a07      	ldr	r2, [sp, #28]
 80119c8:	9900      	ldr	r1, [sp, #0]
 80119ca:	3201      	adds	r2, #1
 80119cc:	9207      	str	r2, [sp, #28]
 80119ce:	2230      	movs	r2, #48	; 0x30
 80119d0:	700a      	strb	r2, [r1, #0]
 80119d2:	781a      	ldrb	r2, [r3, #0]
 80119d4:	3201      	adds	r2, #1
 80119d6:	701a      	strb	r2, [r3, #0]
 80119d8:	e78c      	b.n	80118f4 <_dtoa_r+0x63c>
 80119da:	4b7f      	ldr	r3, [pc, #508]	; (8011bd8 <_dtoa_r+0x920>)
 80119dc:	2200      	movs	r2, #0
 80119de:	f7ee fe23 	bl	8000628 <__aeabi_dmul>
 80119e2:	2200      	movs	r2, #0
 80119e4:	2300      	movs	r3, #0
 80119e6:	4606      	mov	r6, r0
 80119e8:	460f      	mov	r7, r1
 80119ea:	f7ef f885 	bl	8000af8 <__aeabi_dcmpeq>
 80119ee:	2800      	cmp	r0, #0
 80119f0:	d09b      	beq.n	801192a <_dtoa_r+0x672>
 80119f2:	e7cd      	b.n	8011990 <_dtoa_r+0x6d8>
 80119f4:	9a08      	ldr	r2, [sp, #32]
 80119f6:	2a00      	cmp	r2, #0
 80119f8:	f000 80c4 	beq.w	8011b84 <_dtoa_r+0x8cc>
 80119fc:	9a05      	ldr	r2, [sp, #20]
 80119fe:	2a01      	cmp	r2, #1
 8011a00:	f300 80a8 	bgt.w	8011b54 <_dtoa_r+0x89c>
 8011a04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011a06:	2a00      	cmp	r2, #0
 8011a08:	f000 80a0 	beq.w	8011b4c <_dtoa_r+0x894>
 8011a0c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011a10:	9e06      	ldr	r6, [sp, #24]
 8011a12:	4645      	mov	r5, r8
 8011a14:	9a04      	ldr	r2, [sp, #16]
 8011a16:	2101      	movs	r1, #1
 8011a18:	441a      	add	r2, r3
 8011a1a:	4620      	mov	r0, r4
 8011a1c:	4498      	add	r8, r3
 8011a1e:	9204      	str	r2, [sp, #16]
 8011a20:	f001 f942 	bl	8012ca8 <__i2b>
 8011a24:	4607      	mov	r7, r0
 8011a26:	2d00      	cmp	r5, #0
 8011a28:	dd0b      	ble.n	8011a42 <_dtoa_r+0x78a>
 8011a2a:	9b04      	ldr	r3, [sp, #16]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	dd08      	ble.n	8011a42 <_dtoa_r+0x78a>
 8011a30:	42ab      	cmp	r3, r5
 8011a32:	9a04      	ldr	r2, [sp, #16]
 8011a34:	bfa8      	it	ge
 8011a36:	462b      	movge	r3, r5
 8011a38:	eba8 0803 	sub.w	r8, r8, r3
 8011a3c:	1aed      	subs	r5, r5, r3
 8011a3e:	1ad3      	subs	r3, r2, r3
 8011a40:	9304      	str	r3, [sp, #16]
 8011a42:	9b06      	ldr	r3, [sp, #24]
 8011a44:	b1fb      	cbz	r3, 8011a86 <_dtoa_r+0x7ce>
 8011a46:	9b08      	ldr	r3, [sp, #32]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	f000 809f 	beq.w	8011b8c <_dtoa_r+0x8d4>
 8011a4e:	2e00      	cmp	r6, #0
 8011a50:	dd11      	ble.n	8011a76 <_dtoa_r+0x7be>
 8011a52:	4639      	mov	r1, r7
 8011a54:	4632      	mov	r2, r6
 8011a56:	4620      	mov	r0, r4
 8011a58:	f001 f9e2 	bl	8012e20 <__pow5mult>
 8011a5c:	465a      	mov	r2, fp
 8011a5e:	4601      	mov	r1, r0
 8011a60:	4607      	mov	r7, r0
 8011a62:	4620      	mov	r0, r4
 8011a64:	f001 f936 	bl	8012cd4 <__multiply>
 8011a68:	4659      	mov	r1, fp
 8011a6a:	9007      	str	r0, [sp, #28]
 8011a6c:	4620      	mov	r0, r4
 8011a6e:	f001 f815 	bl	8012a9c <_Bfree>
 8011a72:	9b07      	ldr	r3, [sp, #28]
 8011a74:	469b      	mov	fp, r3
 8011a76:	9b06      	ldr	r3, [sp, #24]
 8011a78:	1b9a      	subs	r2, r3, r6
 8011a7a:	d004      	beq.n	8011a86 <_dtoa_r+0x7ce>
 8011a7c:	4659      	mov	r1, fp
 8011a7e:	4620      	mov	r0, r4
 8011a80:	f001 f9ce 	bl	8012e20 <__pow5mult>
 8011a84:	4683      	mov	fp, r0
 8011a86:	2101      	movs	r1, #1
 8011a88:	4620      	mov	r0, r4
 8011a8a:	f001 f90d 	bl	8012ca8 <__i2b>
 8011a8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	4606      	mov	r6, r0
 8011a94:	dd7c      	ble.n	8011b90 <_dtoa_r+0x8d8>
 8011a96:	461a      	mov	r2, r3
 8011a98:	4601      	mov	r1, r0
 8011a9a:	4620      	mov	r0, r4
 8011a9c:	f001 f9c0 	bl	8012e20 <__pow5mult>
 8011aa0:	9b05      	ldr	r3, [sp, #20]
 8011aa2:	2b01      	cmp	r3, #1
 8011aa4:	4606      	mov	r6, r0
 8011aa6:	dd76      	ble.n	8011b96 <_dtoa_r+0x8de>
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	9306      	str	r3, [sp, #24]
 8011aac:	6933      	ldr	r3, [r6, #16]
 8011aae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011ab2:	6918      	ldr	r0, [r3, #16]
 8011ab4:	f001 f8a8 	bl	8012c08 <__hi0bits>
 8011ab8:	f1c0 0020 	rsb	r0, r0, #32
 8011abc:	9b04      	ldr	r3, [sp, #16]
 8011abe:	4418      	add	r0, r3
 8011ac0:	f010 001f 	ands.w	r0, r0, #31
 8011ac4:	f000 8086 	beq.w	8011bd4 <_dtoa_r+0x91c>
 8011ac8:	f1c0 0320 	rsb	r3, r0, #32
 8011acc:	2b04      	cmp	r3, #4
 8011ace:	dd7f      	ble.n	8011bd0 <_dtoa_r+0x918>
 8011ad0:	f1c0 001c 	rsb	r0, r0, #28
 8011ad4:	9b04      	ldr	r3, [sp, #16]
 8011ad6:	4403      	add	r3, r0
 8011ad8:	4480      	add	r8, r0
 8011ada:	4405      	add	r5, r0
 8011adc:	9304      	str	r3, [sp, #16]
 8011ade:	f1b8 0f00 	cmp.w	r8, #0
 8011ae2:	dd05      	ble.n	8011af0 <_dtoa_r+0x838>
 8011ae4:	4659      	mov	r1, fp
 8011ae6:	4642      	mov	r2, r8
 8011ae8:	4620      	mov	r0, r4
 8011aea:	f001 f9f3 	bl	8012ed4 <__lshift>
 8011aee:	4683      	mov	fp, r0
 8011af0:	9b04      	ldr	r3, [sp, #16]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	dd05      	ble.n	8011b02 <_dtoa_r+0x84a>
 8011af6:	4631      	mov	r1, r6
 8011af8:	461a      	mov	r2, r3
 8011afa:	4620      	mov	r0, r4
 8011afc:	f001 f9ea 	bl	8012ed4 <__lshift>
 8011b00:	4606      	mov	r6, r0
 8011b02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d069      	beq.n	8011bdc <_dtoa_r+0x924>
 8011b08:	4631      	mov	r1, r6
 8011b0a:	4658      	mov	r0, fp
 8011b0c:	f001 fa4e 	bl	8012fac <__mcmp>
 8011b10:	2800      	cmp	r0, #0
 8011b12:	da63      	bge.n	8011bdc <_dtoa_r+0x924>
 8011b14:	2300      	movs	r3, #0
 8011b16:	4659      	mov	r1, fp
 8011b18:	220a      	movs	r2, #10
 8011b1a:	4620      	mov	r0, r4
 8011b1c:	f000 ffe0 	bl	8012ae0 <__multadd>
 8011b20:	9b08      	ldr	r3, [sp, #32]
 8011b22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011b26:	4683      	mov	fp, r0
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	f000 818f 	beq.w	8011e4c <_dtoa_r+0xb94>
 8011b2e:	4639      	mov	r1, r7
 8011b30:	2300      	movs	r3, #0
 8011b32:	220a      	movs	r2, #10
 8011b34:	4620      	mov	r0, r4
 8011b36:	f000 ffd3 	bl	8012ae0 <__multadd>
 8011b3a:	f1b9 0f00 	cmp.w	r9, #0
 8011b3e:	4607      	mov	r7, r0
 8011b40:	f300 808e 	bgt.w	8011c60 <_dtoa_r+0x9a8>
 8011b44:	9b05      	ldr	r3, [sp, #20]
 8011b46:	2b02      	cmp	r3, #2
 8011b48:	dc50      	bgt.n	8011bec <_dtoa_r+0x934>
 8011b4a:	e089      	b.n	8011c60 <_dtoa_r+0x9a8>
 8011b4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011b4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011b52:	e75d      	b.n	8011a10 <_dtoa_r+0x758>
 8011b54:	9b01      	ldr	r3, [sp, #4]
 8011b56:	1e5e      	subs	r6, r3, #1
 8011b58:	9b06      	ldr	r3, [sp, #24]
 8011b5a:	42b3      	cmp	r3, r6
 8011b5c:	bfbf      	itttt	lt
 8011b5e:	9b06      	ldrlt	r3, [sp, #24]
 8011b60:	9606      	strlt	r6, [sp, #24]
 8011b62:	1af2      	sublt	r2, r6, r3
 8011b64:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8011b66:	bfb6      	itet	lt
 8011b68:	189b      	addlt	r3, r3, r2
 8011b6a:	1b9e      	subge	r6, r3, r6
 8011b6c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8011b6e:	9b01      	ldr	r3, [sp, #4]
 8011b70:	bfb8      	it	lt
 8011b72:	2600      	movlt	r6, #0
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	bfb5      	itete	lt
 8011b78:	eba8 0503 	sublt.w	r5, r8, r3
 8011b7c:	9b01      	ldrge	r3, [sp, #4]
 8011b7e:	2300      	movlt	r3, #0
 8011b80:	4645      	movge	r5, r8
 8011b82:	e747      	b.n	8011a14 <_dtoa_r+0x75c>
 8011b84:	9e06      	ldr	r6, [sp, #24]
 8011b86:	9f08      	ldr	r7, [sp, #32]
 8011b88:	4645      	mov	r5, r8
 8011b8a:	e74c      	b.n	8011a26 <_dtoa_r+0x76e>
 8011b8c:	9a06      	ldr	r2, [sp, #24]
 8011b8e:	e775      	b.n	8011a7c <_dtoa_r+0x7c4>
 8011b90:	9b05      	ldr	r3, [sp, #20]
 8011b92:	2b01      	cmp	r3, #1
 8011b94:	dc18      	bgt.n	8011bc8 <_dtoa_r+0x910>
 8011b96:	9b02      	ldr	r3, [sp, #8]
 8011b98:	b9b3      	cbnz	r3, 8011bc8 <_dtoa_r+0x910>
 8011b9a:	9b03      	ldr	r3, [sp, #12]
 8011b9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011ba0:	b9a3      	cbnz	r3, 8011bcc <_dtoa_r+0x914>
 8011ba2:	9b03      	ldr	r3, [sp, #12]
 8011ba4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011ba8:	0d1b      	lsrs	r3, r3, #20
 8011baa:	051b      	lsls	r3, r3, #20
 8011bac:	b12b      	cbz	r3, 8011bba <_dtoa_r+0x902>
 8011bae:	9b04      	ldr	r3, [sp, #16]
 8011bb0:	3301      	adds	r3, #1
 8011bb2:	9304      	str	r3, [sp, #16]
 8011bb4:	f108 0801 	add.w	r8, r8, #1
 8011bb8:	2301      	movs	r3, #1
 8011bba:	9306      	str	r3, [sp, #24]
 8011bbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	f47f af74 	bne.w	8011aac <_dtoa_r+0x7f4>
 8011bc4:	2001      	movs	r0, #1
 8011bc6:	e779      	b.n	8011abc <_dtoa_r+0x804>
 8011bc8:	2300      	movs	r3, #0
 8011bca:	e7f6      	b.n	8011bba <_dtoa_r+0x902>
 8011bcc:	9b02      	ldr	r3, [sp, #8]
 8011bce:	e7f4      	b.n	8011bba <_dtoa_r+0x902>
 8011bd0:	d085      	beq.n	8011ade <_dtoa_r+0x826>
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	301c      	adds	r0, #28
 8011bd6:	e77d      	b.n	8011ad4 <_dtoa_r+0x81c>
 8011bd8:	40240000 	.word	0x40240000
 8011bdc:	9b01      	ldr	r3, [sp, #4]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	dc38      	bgt.n	8011c54 <_dtoa_r+0x99c>
 8011be2:	9b05      	ldr	r3, [sp, #20]
 8011be4:	2b02      	cmp	r3, #2
 8011be6:	dd35      	ble.n	8011c54 <_dtoa_r+0x99c>
 8011be8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011bec:	f1b9 0f00 	cmp.w	r9, #0
 8011bf0:	d10d      	bne.n	8011c0e <_dtoa_r+0x956>
 8011bf2:	4631      	mov	r1, r6
 8011bf4:	464b      	mov	r3, r9
 8011bf6:	2205      	movs	r2, #5
 8011bf8:	4620      	mov	r0, r4
 8011bfa:	f000 ff71 	bl	8012ae0 <__multadd>
 8011bfe:	4601      	mov	r1, r0
 8011c00:	4606      	mov	r6, r0
 8011c02:	4658      	mov	r0, fp
 8011c04:	f001 f9d2 	bl	8012fac <__mcmp>
 8011c08:	2800      	cmp	r0, #0
 8011c0a:	f73f adbd 	bgt.w	8011788 <_dtoa_r+0x4d0>
 8011c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c10:	9d00      	ldr	r5, [sp, #0]
 8011c12:	ea6f 0a03 	mvn.w	sl, r3
 8011c16:	f04f 0800 	mov.w	r8, #0
 8011c1a:	4631      	mov	r1, r6
 8011c1c:	4620      	mov	r0, r4
 8011c1e:	f000 ff3d 	bl	8012a9c <_Bfree>
 8011c22:	2f00      	cmp	r7, #0
 8011c24:	f43f aeb4 	beq.w	8011990 <_dtoa_r+0x6d8>
 8011c28:	f1b8 0f00 	cmp.w	r8, #0
 8011c2c:	d005      	beq.n	8011c3a <_dtoa_r+0x982>
 8011c2e:	45b8      	cmp	r8, r7
 8011c30:	d003      	beq.n	8011c3a <_dtoa_r+0x982>
 8011c32:	4641      	mov	r1, r8
 8011c34:	4620      	mov	r0, r4
 8011c36:	f000 ff31 	bl	8012a9c <_Bfree>
 8011c3a:	4639      	mov	r1, r7
 8011c3c:	4620      	mov	r0, r4
 8011c3e:	f000 ff2d 	bl	8012a9c <_Bfree>
 8011c42:	e6a5      	b.n	8011990 <_dtoa_r+0x6d8>
 8011c44:	2600      	movs	r6, #0
 8011c46:	4637      	mov	r7, r6
 8011c48:	e7e1      	b.n	8011c0e <_dtoa_r+0x956>
 8011c4a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011c4c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011c50:	4637      	mov	r7, r6
 8011c52:	e599      	b.n	8011788 <_dtoa_r+0x4d0>
 8011c54:	9b08      	ldr	r3, [sp, #32]
 8011c56:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	f000 80fd 	beq.w	8011e5a <_dtoa_r+0xba2>
 8011c60:	2d00      	cmp	r5, #0
 8011c62:	dd05      	ble.n	8011c70 <_dtoa_r+0x9b8>
 8011c64:	4639      	mov	r1, r7
 8011c66:	462a      	mov	r2, r5
 8011c68:	4620      	mov	r0, r4
 8011c6a:	f001 f933 	bl	8012ed4 <__lshift>
 8011c6e:	4607      	mov	r7, r0
 8011c70:	9b06      	ldr	r3, [sp, #24]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d05c      	beq.n	8011d30 <_dtoa_r+0xa78>
 8011c76:	6879      	ldr	r1, [r7, #4]
 8011c78:	4620      	mov	r0, r4
 8011c7a:	f000 fecf 	bl	8012a1c <_Balloc>
 8011c7e:	4605      	mov	r5, r0
 8011c80:	b928      	cbnz	r0, 8011c8e <_dtoa_r+0x9d6>
 8011c82:	4b80      	ldr	r3, [pc, #512]	; (8011e84 <_dtoa_r+0xbcc>)
 8011c84:	4602      	mov	r2, r0
 8011c86:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011c8a:	f7ff bb2e 	b.w	80112ea <_dtoa_r+0x32>
 8011c8e:	693a      	ldr	r2, [r7, #16]
 8011c90:	3202      	adds	r2, #2
 8011c92:	0092      	lsls	r2, r2, #2
 8011c94:	f107 010c 	add.w	r1, r7, #12
 8011c98:	300c      	adds	r0, #12
 8011c9a:	f7fd fad5 	bl	800f248 <memcpy>
 8011c9e:	2201      	movs	r2, #1
 8011ca0:	4629      	mov	r1, r5
 8011ca2:	4620      	mov	r0, r4
 8011ca4:	f001 f916 	bl	8012ed4 <__lshift>
 8011ca8:	9b00      	ldr	r3, [sp, #0]
 8011caa:	3301      	adds	r3, #1
 8011cac:	9301      	str	r3, [sp, #4]
 8011cae:	9b00      	ldr	r3, [sp, #0]
 8011cb0:	444b      	add	r3, r9
 8011cb2:	9307      	str	r3, [sp, #28]
 8011cb4:	9b02      	ldr	r3, [sp, #8]
 8011cb6:	f003 0301 	and.w	r3, r3, #1
 8011cba:	46b8      	mov	r8, r7
 8011cbc:	9306      	str	r3, [sp, #24]
 8011cbe:	4607      	mov	r7, r0
 8011cc0:	9b01      	ldr	r3, [sp, #4]
 8011cc2:	4631      	mov	r1, r6
 8011cc4:	3b01      	subs	r3, #1
 8011cc6:	4658      	mov	r0, fp
 8011cc8:	9302      	str	r3, [sp, #8]
 8011cca:	f7ff fa68 	bl	801119e <quorem>
 8011cce:	4603      	mov	r3, r0
 8011cd0:	3330      	adds	r3, #48	; 0x30
 8011cd2:	9004      	str	r0, [sp, #16]
 8011cd4:	4641      	mov	r1, r8
 8011cd6:	4658      	mov	r0, fp
 8011cd8:	9308      	str	r3, [sp, #32]
 8011cda:	f001 f967 	bl	8012fac <__mcmp>
 8011cde:	463a      	mov	r2, r7
 8011ce0:	4681      	mov	r9, r0
 8011ce2:	4631      	mov	r1, r6
 8011ce4:	4620      	mov	r0, r4
 8011ce6:	f001 f97d 	bl	8012fe4 <__mdiff>
 8011cea:	68c2      	ldr	r2, [r0, #12]
 8011cec:	9b08      	ldr	r3, [sp, #32]
 8011cee:	4605      	mov	r5, r0
 8011cf0:	bb02      	cbnz	r2, 8011d34 <_dtoa_r+0xa7c>
 8011cf2:	4601      	mov	r1, r0
 8011cf4:	4658      	mov	r0, fp
 8011cf6:	f001 f959 	bl	8012fac <__mcmp>
 8011cfa:	9b08      	ldr	r3, [sp, #32]
 8011cfc:	4602      	mov	r2, r0
 8011cfe:	4629      	mov	r1, r5
 8011d00:	4620      	mov	r0, r4
 8011d02:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8011d06:	f000 fec9 	bl	8012a9c <_Bfree>
 8011d0a:	9b05      	ldr	r3, [sp, #20]
 8011d0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011d0e:	9d01      	ldr	r5, [sp, #4]
 8011d10:	ea43 0102 	orr.w	r1, r3, r2
 8011d14:	9b06      	ldr	r3, [sp, #24]
 8011d16:	430b      	orrs	r3, r1
 8011d18:	9b08      	ldr	r3, [sp, #32]
 8011d1a:	d10d      	bne.n	8011d38 <_dtoa_r+0xa80>
 8011d1c:	2b39      	cmp	r3, #57	; 0x39
 8011d1e:	d029      	beq.n	8011d74 <_dtoa_r+0xabc>
 8011d20:	f1b9 0f00 	cmp.w	r9, #0
 8011d24:	dd01      	ble.n	8011d2a <_dtoa_r+0xa72>
 8011d26:	9b04      	ldr	r3, [sp, #16]
 8011d28:	3331      	adds	r3, #49	; 0x31
 8011d2a:	9a02      	ldr	r2, [sp, #8]
 8011d2c:	7013      	strb	r3, [r2, #0]
 8011d2e:	e774      	b.n	8011c1a <_dtoa_r+0x962>
 8011d30:	4638      	mov	r0, r7
 8011d32:	e7b9      	b.n	8011ca8 <_dtoa_r+0x9f0>
 8011d34:	2201      	movs	r2, #1
 8011d36:	e7e2      	b.n	8011cfe <_dtoa_r+0xa46>
 8011d38:	f1b9 0f00 	cmp.w	r9, #0
 8011d3c:	db06      	blt.n	8011d4c <_dtoa_r+0xa94>
 8011d3e:	9905      	ldr	r1, [sp, #20]
 8011d40:	ea41 0909 	orr.w	r9, r1, r9
 8011d44:	9906      	ldr	r1, [sp, #24]
 8011d46:	ea59 0101 	orrs.w	r1, r9, r1
 8011d4a:	d120      	bne.n	8011d8e <_dtoa_r+0xad6>
 8011d4c:	2a00      	cmp	r2, #0
 8011d4e:	ddec      	ble.n	8011d2a <_dtoa_r+0xa72>
 8011d50:	4659      	mov	r1, fp
 8011d52:	2201      	movs	r2, #1
 8011d54:	4620      	mov	r0, r4
 8011d56:	9301      	str	r3, [sp, #4]
 8011d58:	f001 f8bc 	bl	8012ed4 <__lshift>
 8011d5c:	4631      	mov	r1, r6
 8011d5e:	4683      	mov	fp, r0
 8011d60:	f001 f924 	bl	8012fac <__mcmp>
 8011d64:	2800      	cmp	r0, #0
 8011d66:	9b01      	ldr	r3, [sp, #4]
 8011d68:	dc02      	bgt.n	8011d70 <_dtoa_r+0xab8>
 8011d6a:	d1de      	bne.n	8011d2a <_dtoa_r+0xa72>
 8011d6c:	07da      	lsls	r2, r3, #31
 8011d6e:	d5dc      	bpl.n	8011d2a <_dtoa_r+0xa72>
 8011d70:	2b39      	cmp	r3, #57	; 0x39
 8011d72:	d1d8      	bne.n	8011d26 <_dtoa_r+0xa6e>
 8011d74:	9a02      	ldr	r2, [sp, #8]
 8011d76:	2339      	movs	r3, #57	; 0x39
 8011d78:	7013      	strb	r3, [r2, #0]
 8011d7a:	462b      	mov	r3, r5
 8011d7c:	461d      	mov	r5, r3
 8011d7e:	3b01      	subs	r3, #1
 8011d80:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011d84:	2a39      	cmp	r2, #57	; 0x39
 8011d86:	d050      	beq.n	8011e2a <_dtoa_r+0xb72>
 8011d88:	3201      	adds	r2, #1
 8011d8a:	701a      	strb	r2, [r3, #0]
 8011d8c:	e745      	b.n	8011c1a <_dtoa_r+0x962>
 8011d8e:	2a00      	cmp	r2, #0
 8011d90:	dd03      	ble.n	8011d9a <_dtoa_r+0xae2>
 8011d92:	2b39      	cmp	r3, #57	; 0x39
 8011d94:	d0ee      	beq.n	8011d74 <_dtoa_r+0xabc>
 8011d96:	3301      	adds	r3, #1
 8011d98:	e7c7      	b.n	8011d2a <_dtoa_r+0xa72>
 8011d9a:	9a01      	ldr	r2, [sp, #4]
 8011d9c:	9907      	ldr	r1, [sp, #28]
 8011d9e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011da2:	428a      	cmp	r2, r1
 8011da4:	d02a      	beq.n	8011dfc <_dtoa_r+0xb44>
 8011da6:	4659      	mov	r1, fp
 8011da8:	2300      	movs	r3, #0
 8011daa:	220a      	movs	r2, #10
 8011dac:	4620      	mov	r0, r4
 8011dae:	f000 fe97 	bl	8012ae0 <__multadd>
 8011db2:	45b8      	cmp	r8, r7
 8011db4:	4683      	mov	fp, r0
 8011db6:	f04f 0300 	mov.w	r3, #0
 8011dba:	f04f 020a 	mov.w	r2, #10
 8011dbe:	4641      	mov	r1, r8
 8011dc0:	4620      	mov	r0, r4
 8011dc2:	d107      	bne.n	8011dd4 <_dtoa_r+0xb1c>
 8011dc4:	f000 fe8c 	bl	8012ae0 <__multadd>
 8011dc8:	4680      	mov	r8, r0
 8011dca:	4607      	mov	r7, r0
 8011dcc:	9b01      	ldr	r3, [sp, #4]
 8011dce:	3301      	adds	r3, #1
 8011dd0:	9301      	str	r3, [sp, #4]
 8011dd2:	e775      	b.n	8011cc0 <_dtoa_r+0xa08>
 8011dd4:	f000 fe84 	bl	8012ae0 <__multadd>
 8011dd8:	4639      	mov	r1, r7
 8011dda:	4680      	mov	r8, r0
 8011ddc:	2300      	movs	r3, #0
 8011dde:	220a      	movs	r2, #10
 8011de0:	4620      	mov	r0, r4
 8011de2:	f000 fe7d 	bl	8012ae0 <__multadd>
 8011de6:	4607      	mov	r7, r0
 8011de8:	e7f0      	b.n	8011dcc <_dtoa_r+0xb14>
 8011dea:	f1b9 0f00 	cmp.w	r9, #0
 8011dee:	9a00      	ldr	r2, [sp, #0]
 8011df0:	bfcc      	ite	gt
 8011df2:	464d      	movgt	r5, r9
 8011df4:	2501      	movle	r5, #1
 8011df6:	4415      	add	r5, r2
 8011df8:	f04f 0800 	mov.w	r8, #0
 8011dfc:	4659      	mov	r1, fp
 8011dfe:	2201      	movs	r2, #1
 8011e00:	4620      	mov	r0, r4
 8011e02:	9301      	str	r3, [sp, #4]
 8011e04:	f001 f866 	bl	8012ed4 <__lshift>
 8011e08:	4631      	mov	r1, r6
 8011e0a:	4683      	mov	fp, r0
 8011e0c:	f001 f8ce 	bl	8012fac <__mcmp>
 8011e10:	2800      	cmp	r0, #0
 8011e12:	dcb2      	bgt.n	8011d7a <_dtoa_r+0xac2>
 8011e14:	d102      	bne.n	8011e1c <_dtoa_r+0xb64>
 8011e16:	9b01      	ldr	r3, [sp, #4]
 8011e18:	07db      	lsls	r3, r3, #31
 8011e1a:	d4ae      	bmi.n	8011d7a <_dtoa_r+0xac2>
 8011e1c:	462b      	mov	r3, r5
 8011e1e:	461d      	mov	r5, r3
 8011e20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011e24:	2a30      	cmp	r2, #48	; 0x30
 8011e26:	d0fa      	beq.n	8011e1e <_dtoa_r+0xb66>
 8011e28:	e6f7      	b.n	8011c1a <_dtoa_r+0x962>
 8011e2a:	9a00      	ldr	r2, [sp, #0]
 8011e2c:	429a      	cmp	r2, r3
 8011e2e:	d1a5      	bne.n	8011d7c <_dtoa_r+0xac4>
 8011e30:	f10a 0a01 	add.w	sl, sl, #1
 8011e34:	2331      	movs	r3, #49	; 0x31
 8011e36:	e779      	b.n	8011d2c <_dtoa_r+0xa74>
 8011e38:	4b13      	ldr	r3, [pc, #76]	; (8011e88 <_dtoa_r+0xbd0>)
 8011e3a:	f7ff baaf 	b.w	801139c <_dtoa_r+0xe4>
 8011e3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	f47f aa86 	bne.w	8011352 <_dtoa_r+0x9a>
 8011e46:	4b11      	ldr	r3, [pc, #68]	; (8011e8c <_dtoa_r+0xbd4>)
 8011e48:	f7ff baa8 	b.w	801139c <_dtoa_r+0xe4>
 8011e4c:	f1b9 0f00 	cmp.w	r9, #0
 8011e50:	dc03      	bgt.n	8011e5a <_dtoa_r+0xba2>
 8011e52:	9b05      	ldr	r3, [sp, #20]
 8011e54:	2b02      	cmp	r3, #2
 8011e56:	f73f aec9 	bgt.w	8011bec <_dtoa_r+0x934>
 8011e5a:	9d00      	ldr	r5, [sp, #0]
 8011e5c:	4631      	mov	r1, r6
 8011e5e:	4658      	mov	r0, fp
 8011e60:	f7ff f99d 	bl	801119e <quorem>
 8011e64:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011e68:	f805 3b01 	strb.w	r3, [r5], #1
 8011e6c:	9a00      	ldr	r2, [sp, #0]
 8011e6e:	1aaa      	subs	r2, r5, r2
 8011e70:	4591      	cmp	r9, r2
 8011e72:	ddba      	ble.n	8011dea <_dtoa_r+0xb32>
 8011e74:	4659      	mov	r1, fp
 8011e76:	2300      	movs	r3, #0
 8011e78:	220a      	movs	r2, #10
 8011e7a:	4620      	mov	r0, r4
 8011e7c:	f000 fe30 	bl	8012ae0 <__multadd>
 8011e80:	4683      	mov	fp, r0
 8011e82:	e7eb      	b.n	8011e5c <_dtoa_r+0xba4>
 8011e84:	08015253 	.word	0x08015253
 8011e88:	08015151 	.word	0x08015151
 8011e8c:	080151d0 	.word	0x080151d0

08011e90 <__sflush_r>:
 8011e90:	898a      	ldrh	r2, [r1, #12]
 8011e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e96:	4605      	mov	r5, r0
 8011e98:	0710      	lsls	r0, r2, #28
 8011e9a:	460c      	mov	r4, r1
 8011e9c:	d458      	bmi.n	8011f50 <__sflush_r+0xc0>
 8011e9e:	684b      	ldr	r3, [r1, #4]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	dc05      	bgt.n	8011eb0 <__sflush_r+0x20>
 8011ea4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	dc02      	bgt.n	8011eb0 <__sflush_r+0x20>
 8011eaa:	2000      	movs	r0, #0
 8011eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011eb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011eb2:	2e00      	cmp	r6, #0
 8011eb4:	d0f9      	beq.n	8011eaa <__sflush_r+0x1a>
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011ebc:	682f      	ldr	r7, [r5, #0]
 8011ebe:	602b      	str	r3, [r5, #0]
 8011ec0:	d032      	beq.n	8011f28 <__sflush_r+0x98>
 8011ec2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011ec4:	89a3      	ldrh	r3, [r4, #12]
 8011ec6:	075a      	lsls	r2, r3, #29
 8011ec8:	d505      	bpl.n	8011ed6 <__sflush_r+0x46>
 8011eca:	6863      	ldr	r3, [r4, #4]
 8011ecc:	1ac0      	subs	r0, r0, r3
 8011ece:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011ed0:	b10b      	cbz	r3, 8011ed6 <__sflush_r+0x46>
 8011ed2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011ed4:	1ac0      	subs	r0, r0, r3
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	4602      	mov	r2, r0
 8011eda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011edc:	6a21      	ldr	r1, [r4, #32]
 8011ede:	4628      	mov	r0, r5
 8011ee0:	47b0      	blx	r6
 8011ee2:	1c43      	adds	r3, r0, #1
 8011ee4:	89a3      	ldrh	r3, [r4, #12]
 8011ee6:	d106      	bne.n	8011ef6 <__sflush_r+0x66>
 8011ee8:	6829      	ldr	r1, [r5, #0]
 8011eea:	291d      	cmp	r1, #29
 8011eec:	d82c      	bhi.n	8011f48 <__sflush_r+0xb8>
 8011eee:	4a2a      	ldr	r2, [pc, #168]	; (8011f98 <__sflush_r+0x108>)
 8011ef0:	40ca      	lsrs	r2, r1
 8011ef2:	07d6      	lsls	r6, r2, #31
 8011ef4:	d528      	bpl.n	8011f48 <__sflush_r+0xb8>
 8011ef6:	2200      	movs	r2, #0
 8011ef8:	6062      	str	r2, [r4, #4]
 8011efa:	04d9      	lsls	r1, r3, #19
 8011efc:	6922      	ldr	r2, [r4, #16]
 8011efe:	6022      	str	r2, [r4, #0]
 8011f00:	d504      	bpl.n	8011f0c <__sflush_r+0x7c>
 8011f02:	1c42      	adds	r2, r0, #1
 8011f04:	d101      	bne.n	8011f0a <__sflush_r+0x7a>
 8011f06:	682b      	ldr	r3, [r5, #0]
 8011f08:	b903      	cbnz	r3, 8011f0c <__sflush_r+0x7c>
 8011f0a:	6560      	str	r0, [r4, #84]	; 0x54
 8011f0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011f0e:	602f      	str	r7, [r5, #0]
 8011f10:	2900      	cmp	r1, #0
 8011f12:	d0ca      	beq.n	8011eaa <__sflush_r+0x1a>
 8011f14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011f18:	4299      	cmp	r1, r3
 8011f1a:	d002      	beq.n	8011f22 <__sflush_r+0x92>
 8011f1c:	4628      	mov	r0, r5
 8011f1e:	f001 fa47 	bl	80133b0 <_free_r>
 8011f22:	2000      	movs	r0, #0
 8011f24:	6360      	str	r0, [r4, #52]	; 0x34
 8011f26:	e7c1      	b.n	8011eac <__sflush_r+0x1c>
 8011f28:	6a21      	ldr	r1, [r4, #32]
 8011f2a:	2301      	movs	r3, #1
 8011f2c:	4628      	mov	r0, r5
 8011f2e:	47b0      	blx	r6
 8011f30:	1c41      	adds	r1, r0, #1
 8011f32:	d1c7      	bne.n	8011ec4 <__sflush_r+0x34>
 8011f34:	682b      	ldr	r3, [r5, #0]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d0c4      	beq.n	8011ec4 <__sflush_r+0x34>
 8011f3a:	2b1d      	cmp	r3, #29
 8011f3c:	d001      	beq.n	8011f42 <__sflush_r+0xb2>
 8011f3e:	2b16      	cmp	r3, #22
 8011f40:	d101      	bne.n	8011f46 <__sflush_r+0xb6>
 8011f42:	602f      	str	r7, [r5, #0]
 8011f44:	e7b1      	b.n	8011eaa <__sflush_r+0x1a>
 8011f46:	89a3      	ldrh	r3, [r4, #12]
 8011f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f4c:	81a3      	strh	r3, [r4, #12]
 8011f4e:	e7ad      	b.n	8011eac <__sflush_r+0x1c>
 8011f50:	690f      	ldr	r7, [r1, #16]
 8011f52:	2f00      	cmp	r7, #0
 8011f54:	d0a9      	beq.n	8011eaa <__sflush_r+0x1a>
 8011f56:	0793      	lsls	r3, r2, #30
 8011f58:	680e      	ldr	r6, [r1, #0]
 8011f5a:	bf08      	it	eq
 8011f5c:	694b      	ldreq	r3, [r1, #20]
 8011f5e:	600f      	str	r7, [r1, #0]
 8011f60:	bf18      	it	ne
 8011f62:	2300      	movne	r3, #0
 8011f64:	eba6 0807 	sub.w	r8, r6, r7
 8011f68:	608b      	str	r3, [r1, #8]
 8011f6a:	f1b8 0f00 	cmp.w	r8, #0
 8011f6e:	dd9c      	ble.n	8011eaa <__sflush_r+0x1a>
 8011f70:	6a21      	ldr	r1, [r4, #32]
 8011f72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011f74:	4643      	mov	r3, r8
 8011f76:	463a      	mov	r2, r7
 8011f78:	4628      	mov	r0, r5
 8011f7a:	47b0      	blx	r6
 8011f7c:	2800      	cmp	r0, #0
 8011f7e:	dc06      	bgt.n	8011f8e <__sflush_r+0xfe>
 8011f80:	89a3      	ldrh	r3, [r4, #12]
 8011f82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f86:	81a3      	strh	r3, [r4, #12]
 8011f88:	f04f 30ff 	mov.w	r0, #4294967295
 8011f8c:	e78e      	b.n	8011eac <__sflush_r+0x1c>
 8011f8e:	4407      	add	r7, r0
 8011f90:	eba8 0800 	sub.w	r8, r8, r0
 8011f94:	e7e9      	b.n	8011f6a <__sflush_r+0xda>
 8011f96:	bf00      	nop
 8011f98:	20400001 	.word	0x20400001

08011f9c <_fflush_r>:
 8011f9c:	b538      	push	{r3, r4, r5, lr}
 8011f9e:	690b      	ldr	r3, [r1, #16]
 8011fa0:	4605      	mov	r5, r0
 8011fa2:	460c      	mov	r4, r1
 8011fa4:	b913      	cbnz	r3, 8011fac <_fflush_r+0x10>
 8011fa6:	2500      	movs	r5, #0
 8011fa8:	4628      	mov	r0, r5
 8011faa:	bd38      	pop	{r3, r4, r5, pc}
 8011fac:	b118      	cbz	r0, 8011fb6 <_fflush_r+0x1a>
 8011fae:	6983      	ldr	r3, [r0, #24]
 8011fb0:	b90b      	cbnz	r3, 8011fb6 <_fflush_r+0x1a>
 8011fb2:	f000 f887 	bl	80120c4 <__sinit>
 8011fb6:	4b14      	ldr	r3, [pc, #80]	; (8012008 <_fflush_r+0x6c>)
 8011fb8:	429c      	cmp	r4, r3
 8011fba:	d11b      	bne.n	8011ff4 <_fflush_r+0x58>
 8011fbc:	686c      	ldr	r4, [r5, #4]
 8011fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d0ef      	beq.n	8011fa6 <_fflush_r+0xa>
 8011fc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011fc8:	07d0      	lsls	r0, r2, #31
 8011fca:	d404      	bmi.n	8011fd6 <_fflush_r+0x3a>
 8011fcc:	0599      	lsls	r1, r3, #22
 8011fce:	d402      	bmi.n	8011fd6 <_fflush_r+0x3a>
 8011fd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011fd2:	f000 fc88 	bl	80128e6 <__retarget_lock_acquire_recursive>
 8011fd6:	4628      	mov	r0, r5
 8011fd8:	4621      	mov	r1, r4
 8011fda:	f7ff ff59 	bl	8011e90 <__sflush_r>
 8011fde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011fe0:	07da      	lsls	r2, r3, #31
 8011fe2:	4605      	mov	r5, r0
 8011fe4:	d4e0      	bmi.n	8011fa8 <_fflush_r+0xc>
 8011fe6:	89a3      	ldrh	r3, [r4, #12]
 8011fe8:	059b      	lsls	r3, r3, #22
 8011fea:	d4dd      	bmi.n	8011fa8 <_fflush_r+0xc>
 8011fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011fee:	f000 fc7b 	bl	80128e8 <__retarget_lock_release_recursive>
 8011ff2:	e7d9      	b.n	8011fa8 <_fflush_r+0xc>
 8011ff4:	4b05      	ldr	r3, [pc, #20]	; (801200c <_fflush_r+0x70>)
 8011ff6:	429c      	cmp	r4, r3
 8011ff8:	d101      	bne.n	8011ffe <_fflush_r+0x62>
 8011ffa:	68ac      	ldr	r4, [r5, #8]
 8011ffc:	e7df      	b.n	8011fbe <_fflush_r+0x22>
 8011ffe:	4b04      	ldr	r3, [pc, #16]	; (8012010 <_fflush_r+0x74>)
 8012000:	429c      	cmp	r4, r3
 8012002:	bf08      	it	eq
 8012004:	68ec      	ldreq	r4, [r5, #12]
 8012006:	e7da      	b.n	8011fbe <_fflush_r+0x22>
 8012008:	08015284 	.word	0x08015284
 801200c:	080152a4 	.word	0x080152a4
 8012010:	08015264 	.word	0x08015264

08012014 <std>:
 8012014:	2300      	movs	r3, #0
 8012016:	b510      	push	{r4, lr}
 8012018:	4604      	mov	r4, r0
 801201a:	e9c0 3300 	strd	r3, r3, [r0]
 801201e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012022:	6083      	str	r3, [r0, #8]
 8012024:	8181      	strh	r1, [r0, #12]
 8012026:	6643      	str	r3, [r0, #100]	; 0x64
 8012028:	81c2      	strh	r2, [r0, #14]
 801202a:	6183      	str	r3, [r0, #24]
 801202c:	4619      	mov	r1, r3
 801202e:	2208      	movs	r2, #8
 8012030:	305c      	adds	r0, #92	; 0x5c
 8012032:	f7fd f917 	bl	800f264 <memset>
 8012036:	4b05      	ldr	r3, [pc, #20]	; (801204c <std+0x38>)
 8012038:	6263      	str	r3, [r4, #36]	; 0x24
 801203a:	4b05      	ldr	r3, [pc, #20]	; (8012050 <std+0x3c>)
 801203c:	62a3      	str	r3, [r4, #40]	; 0x28
 801203e:	4b05      	ldr	r3, [pc, #20]	; (8012054 <std+0x40>)
 8012040:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012042:	4b05      	ldr	r3, [pc, #20]	; (8012058 <std+0x44>)
 8012044:	6224      	str	r4, [r4, #32]
 8012046:	6323      	str	r3, [r4, #48]	; 0x30
 8012048:	bd10      	pop	{r4, pc}
 801204a:	bf00      	nop
 801204c:	080138c1 	.word	0x080138c1
 8012050:	080138e3 	.word	0x080138e3
 8012054:	0801391b 	.word	0x0801391b
 8012058:	0801393f 	.word	0x0801393f

0801205c <_cleanup_r>:
 801205c:	4901      	ldr	r1, [pc, #4]	; (8012064 <_cleanup_r+0x8>)
 801205e:	f000 b8af 	b.w	80121c0 <_fwalk_reent>
 8012062:	bf00      	nop
 8012064:	08011f9d 	.word	0x08011f9d

08012068 <__sfmoreglue>:
 8012068:	b570      	push	{r4, r5, r6, lr}
 801206a:	1e4a      	subs	r2, r1, #1
 801206c:	2568      	movs	r5, #104	; 0x68
 801206e:	4355      	muls	r5, r2
 8012070:	460e      	mov	r6, r1
 8012072:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012076:	f001 f9eb 	bl	8013450 <_malloc_r>
 801207a:	4604      	mov	r4, r0
 801207c:	b140      	cbz	r0, 8012090 <__sfmoreglue+0x28>
 801207e:	2100      	movs	r1, #0
 8012080:	e9c0 1600 	strd	r1, r6, [r0]
 8012084:	300c      	adds	r0, #12
 8012086:	60a0      	str	r0, [r4, #8]
 8012088:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801208c:	f7fd f8ea 	bl	800f264 <memset>
 8012090:	4620      	mov	r0, r4
 8012092:	bd70      	pop	{r4, r5, r6, pc}

08012094 <__sfp_lock_acquire>:
 8012094:	4801      	ldr	r0, [pc, #4]	; (801209c <__sfp_lock_acquire+0x8>)
 8012096:	f000 bc26 	b.w	80128e6 <__retarget_lock_acquire_recursive>
 801209a:	bf00      	nop
 801209c:	20004b9c 	.word	0x20004b9c

080120a0 <__sfp_lock_release>:
 80120a0:	4801      	ldr	r0, [pc, #4]	; (80120a8 <__sfp_lock_release+0x8>)
 80120a2:	f000 bc21 	b.w	80128e8 <__retarget_lock_release_recursive>
 80120a6:	bf00      	nop
 80120a8:	20004b9c 	.word	0x20004b9c

080120ac <__sinit_lock_acquire>:
 80120ac:	4801      	ldr	r0, [pc, #4]	; (80120b4 <__sinit_lock_acquire+0x8>)
 80120ae:	f000 bc1a 	b.w	80128e6 <__retarget_lock_acquire_recursive>
 80120b2:	bf00      	nop
 80120b4:	20004b97 	.word	0x20004b97

080120b8 <__sinit_lock_release>:
 80120b8:	4801      	ldr	r0, [pc, #4]	; (80120c0 <__sinit_lock_release+0x8>)
 80120ba:	f000 bc15 	b.w	80128e8 <__retarget_lock_release_recursive>
 80120be:	bf00      	nop
 80120c0:	20004b97 	.word	0x20004b97

080120c4 <__sinit>:
 80120c4:	b510      	push	{r4, lr}
 80120c6:	4604      	mov	r4, r0
 80120c8:	f7ff fff0 	bl	80120ac <__sinit_lock_acquire>
 80120cc:	69a3      	ldr	r3, [r4, #24]
 80120ce:	b11b      	cbz	r3, 80120d8 <__sinit+0x14>
 80120d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120d4:	f7ff bff0 	b.w	80120b8 <__sinit_lock_release>
 80120d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80120dc:	6523      	str	r3, [r4, #80]	; 0x50
 80120de:	4b13      	ldr	r3, [pc, #76]	; (801212c <__sinit+0x68>)
 80120e0:	4a13      	ldr	r2, [pc, #76]	; (8012130 <__sinit+0x6c>)
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80120e6:	42a3      	cmp	r3, r4
 80120e8:	bf04      	itt	eq
 80120ea:	2301      	moveq	r3, #1
 80120ec:	61a3      	streq	r3, [r4, #24]
 80120ee:	4620      	mov	r0, r4
 80120f0:	f000 f820 	bl	8012134 <__sfp>
 80120f4:	6060      	str	r0, [r4, #4]
 80120f6:	4620      	mov	r0, r4
 80120f8:	f000 f81c 	bl	8012134 <__sfp>
 80120fc:	60a0      	str	r0, [r4, #8]
 80120fe:	4620      	mov	r0, r4
 8012100:	f000 f818 	bl	8012134 <__sfp>
 8012104:	2200      	movs	r2, #0
 8012106:	60e0      	str	r0, [r4, #12]
 8012108:	2104      	movs	r1, #4
 801210a:	6860      	ldr	r0, [r4, #4]
 801210c:	f7ff ff82 	bl	8012014 <std>
 8012110:	68a0      	ldr	r0, [r4, #8]
 8012112:	2201      	movs	r2, #1
 8012114:	2109      	movs	r1, #9
 8012116:	f7ff ff7d 	bl	8012014 <std>
 801211a:	68e0      	ldr	r0, [r4, #12]
 801211c:	2202      	movs	r2, #2
 801211e:	2112      	movs	r1, #18
 8012120:	f7ff ff78 	bl	8012014 <std>
 8012124:	2301      	movs	r3, #1
 8012126:	61a3      	str	r3, [r4, #24]
 8012128:	e7d2      	b.n	80120d0 <__sinit+0xc>
 801212a:	bf00      	nop
 801212c:	0801512c 	.word	0x0801512c
 8012130:	0801205d 	.word	0x0801205d

08012134 <__sfp>:
 8012134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012136:	4607      	mov	r7, r0
 8012138:	f7ff ffac 	bl	8012094 <__sfp_lock_acquire>
 801213c:	4b1e      	ldr	r3, [pc, #120]	; (80121b8 <__sfp+0x84>)
 801213e:	681e      	ldr	r6, [r3, #0]
 8012140:	69b3      	ldr	r3, [r6, #24]
 8012142:	b913      	cbnz	r3, 801214a <__sfp+0x16>
 8012144:	4630      	mov	r0, r6
 8012146:	f7ff ffbd 	bl	80120c4 <__sinit>
 801214a:	3648      	adds	r6, #72	; 0x48
 801214c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012150:	3b01      	subs	r3, #1
 8012152:	d503      	bpl.n	801215c <__sfp+0x28>
 8012154:	6833      	ldr	r3, [r6, #0]
 8012156:	b30b      	cbz	r3, 801219c <__sfp+0x68>
 8012158:	6836      	ldr	r6, [r6, #0]
 801215a:	e7f7      	b.n	801214c <__sfp+0x18>
 801215c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012160:	b9d5      	cbnz	r5, 8012198 <__sfp+0x64>
 8012162:	4b16      	ldr	r3, [pc, #88]	; (80121bc <__sfp+0x88>)
 8012164:	60e3      	str	r3, [r4, #12]
 8012166:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801216a:	6665      	str	r5, [r4, #100]	; 0x64
 801216c:	f000 fbba 	bl	80128e4 <__retarget_lock_init_recursive>
 8012170:	f7ff ff96 	bl	80120a0 <__sfp_lock_release>
 8012174:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012178:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801217c:	6025      	str	r5, [r4, #0]
 801217e:	61a5      	str	r5, [r4, #24]
 8012180:	2208      	movs	r2, #8
 8012182:	4629      	mov	r1, r5
 8012184:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012188:	f7fd f86c 	bl	800f264 <memset>
 801218c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012190:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012194:	4620      	mov	r0, r4
 8012196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012198:	3468      	adds	r4, #104	; 0x68
 801219a:	e7d9      	b.n	8012150 <__sfp+0x1c>
 801219c:	2104      	movs	r1, #4
 801219e:	4638      	mov	r0, r7
 80121a0:	f7ff ff62 	bl	8012068 <__sfmoreglue>
 80121a4:	4604      	mov	r4, r0
 80121a6:	6030      	str	r0, [r6, #0]
 80121a8:	2800      	cmp	r0, #0
 80121aa:	d1d5      	bne.n	8012158 <__sfp+0x24>
 80121ac:	f7ff ff78 	bl	80120a0 <__sfp_lock_release>
 80121b0:	230c      	movs	r3, #12
 80121b2:	603b      	str	r3, [r7, #0]
 80121b4:	e7ee      	b.n	8012194 <__sfp+0x60>
 80121b6:	bf00      	nop
 80121b8:	0801512c 	.word	0x0801512c
 80121bc:	ffff0001 	.word	0xffff0001

080121c0 <_fwalk_reent>:
 80121c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121c4:	4606      	mov	r6, r0
 80121c6:	4688      	mov	r8, r1
 80121c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80121cc:	2700      	movs	r7, #0
 80121ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80121d2:	f1b9 0901 	subs.w	r9, r9, #1
 80121d6:	d505      	bpl.n	80121e4 <_fwalk_reent+0x24>
 80121d8:	6824      	ldr	r4, [r4, #0]
 80121da:	2c00      	cmp	r4, #0
 80121dc:	d1f7      	bne.n	80121ce <_fwalk_reent+0xe>
 80121de:	4638      	mov	r0, r7
 80121e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121e4:	89ab      	ldrh	r3, [r5, #12]
 80121e6:	2b01      	cmp	r3, #1
 80121e8:	d907      	bls.n	80121fa <_fwalk_reent+0x3a>
 80121ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80121ee:	3301      	adds	r3, #1
 80121f0:	d003      	beq.n	80121fa <_fwalk_reent+0x3a>
 80121f2:	4629      	mov	r1, r5
 80121f4:	4630      	mov	r0, r6
 80121f6:	47c0      	blx	r8
 80121f8:	4307      	orrs	r7, r0
 80121fa:	3568      	adds	r5, #104	; 0x68
 80121fc:	e7e9      	b.n	80121d2 <_fwalk_reent+0x12>

080121fe <rshift>:
 80121fe:	6903      	ldr	r3, [r0, #16]
 8012200:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012208:	ea4f 1261 	mov.w	r2, r1, asr #5
 801220c:	f100 0414 	add.w	r4, r0, #20
 8012210:	dd45      	ble.n	801229e <rshift+0xa0>
 8012212:	f011 011f 	ands.w	r1, r1, #31
 8012216:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801221a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801221e:	d10c      	bne.n	801223a <rshift+0x3c>
 8012220:	f100 0710 	add.w	r7, r0, #16
 8012224:	4629      	mov	r1, r5
 8012226:	42b1      	cmp	r1, r6
 8012228:	d334      	bcc.n	8012294 <rshift+0x96>
 801222a:	1a9b      	subs	r3, r3, r2
 801222c:	009b      	lsls	r3, r3, #2
 801222e:	1eea      	subs	r2, r5, #3
 8012230:	4296      	cmp	r6, r2
 8012232:	bf38      	it	cc
 8012234:	2300      	movcc	r3, #0
 8012236:	4423      	add	r3, r4
 8012238:	e015      	b.n	8012266 <rshift+0x68>
 801223a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801223e:	f1c1 0820 	rsb	r8, r1, #32
 8012242:	40cf      	lsrs	r7, r1
 8012244:	f105 0e04 	add.w	lr, r5, #4
 8012248:	46a1      	mov	r9, r4
 801224a:	4576      	cmp	r6, lr
 801224c:	46f4      	mov	ip, lr
 801224e:	d815      	bhi.n	801227c <rshift+0x7e>
 8012250:	1a9b      	subs	r3, r3, r2
 8012252:	009a      	lsls	r2, r3, #2
 8012254:	3a04      	subs	r2, #4
 8012256:	3501      	adds	r5, #1
 8012258:	42ae      	cmp	r6, r5
 801225a:	bf38      	it	cc
 801225c:	2200      	movcc	r2, #0
 801225e:	18a3      	adds	r3, r4, r2
 8012260:	50a7      	str	r7, [r4, r2]
 8012262:	b107      	cbz	r7, 8012266 <rshift+0x68>
 8012264:	3304      	adds	r3, #4
 8012266:	1b1a      	subs	r2, r3, r4
 8012268:	42a3      	cmp	r3, r4
 801226a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801226e:	bf08      	it	eq
 8012270:	2300      	moveq	r3, #0
 8012272:	6102      	str	r2, [r0, #16]
 8012274:	bf08      	it	eq
 8012276:	6143      	streq	r3, [r0, #20]
 8012278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801227c:	f8dc c000 	ldr.w	ip, [ip]
 8012280:	fa0c fc08 	lsl.w	ip, ip, r8
 8012284:	ea4c 0707 	orr.w	r7, ip, r7
 8012288:	f849 7b04 	str.w	r7, [r9], #4
 801228c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012290:	40cf      	lsrs	r7, r1
 8012292:	e7da      	b.n	801224a <rshift+0x4c>
 8012294:	f851 cb04 	ldr.w	ip, [r1], #4
 8012298:	f847 cf04 	str.w	ip, [r7, #4]!
 801229c:	e7c3      	b.n	8012226 <rshift+0x28>
 801229e:	4623      	mov	r3, r4
 80122a0:	e7e1      	b.n	8012266 <rshift+0x68>

080122a2 <__hexdig_fun>:
 80122a2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80122a6:	2b09      	cmp	r3, #9
 80122a8:	d802      	bhi.n	80122b0 <__hexdig_fun+0xe>
 80122aa:	3820      	subs	r0, #32
 80122ac:	b2c0      	uxtb	r0, r0
 80122ae:	4770      	bx	lr
 80122b0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80122b4:	2b05      	cmp	r3, #5
 80122b6:	d801      	bhi.n	80122bc <__hexdig_fun+0x1a>
 80122b8:	3847      	subs	r0, #71	; 0x47
 80122ba:	e7f7      	b.n	80122ac <__hexdig_fun+0xa>
 80122bc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80122c0:	2b05      	cmp	r3, #5
 80122c2:	d801      	bhi.n	80122c8 <__hexdig_fun+0x26>
 80122c4:	3827      	subs	r0, #39	; 0x27
 80122c6:	e7f1      	b.n	80122ac <__hexdig_fun+0xa>
 80122c8:	2000      	movs	r0, #0
 80122ca:	4770      	bx	lr

080122cc <__gethex>:
 80122cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122d0:	ed2d 8b02 	vpush	{d8}
 80122d4:	b089      	sub	sp, #36	; 0x24
 80122d6:	ee08 0a10 	vmov	s16, r0
 80122da:	9304      	str	r3, [sp, #16]
 80122dc:	4bbc      	ldr	r3, [pc, #752]	; (80125d0 <__gethex+0x304>)
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	9301      	str	r3, [sp, #4]
 80122e2:	4618      	mov	r0, r3
 80122e4:	468b      	mov	fp, r1
 80122e6:	4690      	mov	r8, r2
 80122e8:	f7ed ff84 	bl	80001f4 <strlen>
 80122ec:	9b01      	ldr	r3, [sp, #4]
 80122ee:	f8db 2000 	ldr.w	r2, [fp]
 80122f2:	4403      	add	r3, r0
 80122f4:	4682      	mov	sl, r0
 80122f6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80122fa:	9305      	str	r3, [sp, #20]
 80122fc:	1c93      	adds	r3, r2, #2
 80122fe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012302:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012306:	32fe      	adds	r2, #254	; 0xfe
 8012308:	18d1      	adds	r1, r2, r3
 801230a:	461f      	mov	r7, r3
 801230c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012310:	9100      	str	r1, [sp, #0]
 8012312:	2830      	cmp	r0, #48	; 0x30
 8012314:	d0f8      	beq.n	8012308 <__gethex+0x3c>
 8012316:	f7ff ffc4 	bl	80122a2 <__hexdig_fun>
 801231a:	4604      	mov	r4, r0
 801231c:	2800      	cmp	r0, #0
 801231e:	d13a      	bne.n	8012396 <__gethex+0xca>
 8012320:	9901      	ldr	r1, [sp, #4]
 8012322:	4652      	mov	r2, sl
 8012324:	4638      	mov	r0, r7
 8012326:	f001 fb0e 	bl	8013946 <strncmp>
 801232a:	4605      	mov	r5, r0
 801232c:	2800      	cmp	r0, #0
 801232e:	d168      	bne.n	8012402 <__gethex+0x136>
 8012330:	f817 000a 	ldrb.w	r0, [r7, sl]
 8012334:	eb07 060a 	add.w	r6, r7, sl
 8012338:	f7ff ffb3 	bl	80122a2 <__hexdig_fun>
 801233c:	2800      	cmp	r0, #0
 801233e:	d062      	beq.n	8012406 <__gethex+0x13a>
 8012340:	4633      	mov	r3, r6
 8012342:	7818      	ldrb	r0, [r3, #0]
 8012344:	2830      	cmp	r0, #48	; 0x30
 8012346:	461f      	mov	r7, r3
 8012348:	f103 0301 	add.w	r3, r3, #1
 801234c:	d0f9      	beq.n	8012342 <__gethex+0x76>
 801234e:	f7ff ffa8 	bl	80122a2 <__hexdig_fun>
 8012352:	2301      	movs	r3, #1
 8012354:	fab0 f480 	clz	r4, r0
 8012358:	0964      	lsrs	r4, r4, #5
 801235a:	4635      	mov	r5, r6
 801235c:	9300      	str	r3, [sp, #0]
 801235e:	463a      	mov	r2, r7
 8012360:	4616      	mov	r6, r2
 8012362:	3201      	adds	r2, #1
 8012364:	7830      	ldrb	r0, [r6, #0]
 8012366:	f7ff ff9c 	bl	80122a2 <__hexdig_fun>
 801236a:	2800      	cmp	r0, #0
 801236c:	d1f8      	bne.n	8012360 <__gethex+0x94>
 801236e:	9901      	ldr	r1, [sp, #4]
 8012370:	4652      	mov	r2, sl
 8012372:	4630      	mov	r0, r6
 8012374:	f001 fae7 	bl	8013946 <strncmp>
 8012378:	b980      	cbnz	r0, 801239c <__gethex+0xd0>
 801237a:	b94d      	cbnz	r5, 8012390 <__gethex+0xc4>
 801237c:	eb06 050a 	add.w	r5, r6, sl
 8012380:	462a      	mov	r2, r5
 8012382:	4616      	mov	r6, r2
 8012384:	3201      	adds	r2, #1
 8012386:	7830      	ldrb	r0, [r6, #0]
 8012388:	f7ff ff8b 	bl	80122a2 <__hexdig_fun>
 801238c:	2800      	cmp	r0, #0
 801238e:	d1f8      	bne.n	8012382 <__gethex+0xb6>
 8012390:	1bad      	subs	r5, r5, r6
 8012392:	00ad      	lsls	r5, r5, #2
 8012394:	e004      	b.n	80123a0 <__gethex+0xd4>
 8012396:	2400      	movs	r4, #0
 8012398:	4625      	mov	r5, r4
 801239a:	e7e0      	b.n	801235e <__gethex+0x92>
 801239c:	2d00      	cmp	r5, #0
 801239e:	d1f7      	bne.n	8012390 <__gethex+0xc4>
 80123a0:	7833      	ldrb	r3, [r6, #0]
 80123a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80123a6:	2b50      	cmp	r3, #80	; 0x50
 80123a8:	d13b      	bne.n	8012422 <__gethex+0x156>
 80123aa:	7873      	ldrb	r3, [r6, #1]
 80123ac:	2b2b      	cmp	r3, #43	; 0x2b
 80123ae:	d02c      	beq.n	801240a <__gethex+0x13e>
 80123b0:	2b2d      	cmp	r3, #45	; 0x2d
 80123b2:	d02e      	beq.n	8012412 <__gethex+0x146>
 80123b4:	1c71      	adds	r1, r6, #1
 80123b6:	f04f 0900 	mov.w	r9, #0
 80123ba:	7808      	ldrb	r0, [r1, #0]
 80123bc:	f7ff ff71 	bl	80122a2 <__hexdig_fun>
 80123c0:	1e43      	subs	r3, r0, #1
 80123c2:	b2db      	uxtb	r3, r3
 80123c4:	2b18      	cmp	r3, #24
 80123c6:	d82c      	bhi.n	8012422 <__gethex+0x156>
 80123c8:	f1a0 0210 	sub.w	r2, r0, #16
 80123cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80123d0:	f7ff ff67 	bl	80122a2 <__hexdig_fun>
 80123d4:	1e43      	subs	r3, r0, #1
 80123d6:	b2db      	uxtb	r3, r3
 80123d8:	2b18      	cmp	r3, #24
 80123da:	d91d      	bls.n	8012418 <__gethex+0x14c>
 80123dc:	f1b9 0f00 	cmp.w	r9, #0
 80123e0:	d000      	beq.n	80123e4 <__gethex+0x118>
 80123e2:	4252      	negs	r2, r2
 80123e4:	4415      	add	r5, r2
 80123e6:	f8cb 1000 	str.w	r1, [fp]
 80123ea:	b1e4      	cbz	r4, 8012426 <__gethex+0x15a>
 80123ec:	9b00      	ldr	r3, [sp, #0]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	bf14      	ite	ne
 80123f2:	2700      	movne	r7, #0
 80123f4:	2706      	moveq	r7, #6
 80123f6:	4638      	mov	r0, r7
 80123f8:	b009      	add	sp, #36	; 0x24
 80123fa:	ecbd 8b02 	vpop	{d8}
 80123fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012402:	463e      	mov	r6, r7
 8012404:	4625      	mov	r5, r4
 8012406:	2401      	movs	r4, #1
 8012408:	e7ca      	b.n	80123a0 <__gethex+0xd4>
 801240a:	f04f 0900 	mov.w	r9, #0
 801240e:	1cb1      	adds	r1, r6, #2
 8012410:	e7d3      	b.n	80123ba <__gethex+0xee>
 8012412:	f04f 0901 	mov.w	r9, #1
 8012416:	e7fa      	b.n	801240e <__gethex+0x142>
 8012418:	230a      	movs	r3, #10
 801241a:	fb03 0202 	mla	r2, r3, r2, r0
 801241e:	3a10      	subs	r2, #16
 8012420:	e7d4      	b.n	80123cc <__gethex+0x100>
 8012422:	4631      	mov	r1, r6
 8012424:	e7df      	b.n	80123e6 <__gethex+0x11a>
 8012426:	1bf3      	subs	r3, r6, r7
 8012428:	3b01      	subs	r3, #1
 801242a:	4621      	mov	r1, r4
 801242c:	2b07      	cmp	r3, #7
 801242e:	dc0b      	bgt.n	8012448 <__gethex+0x17c>
 8012430:	ee18 0a10 	vmov	r0, s16
 8012434:	f000 faf2 	bl	8012a1c <_Balloc>
 8012438:	4604      	mov	r4, r0
 801243a:	b940      	cbnz	r0, 801244e <__gethex+0x182>
 801243c:	4b65      	ldr	r3, [pc, #404]	; (80125d4 <__gethex+0x308>)
 801243e:	4602      	mov	r2, r0
 8012440:	21de      	movs	r1, #222	; 0xde
 8012442:	4865      	ldr	r0, [pc, #404]	; (80125d8 <__gethex+0x30c>)
 8012444:	f7fc fea6 	bl	800f194 <__assert_func>
 8012448:	3101      	adds	r1, #1
 801244a:	105b      	asrs	r3, r3, #1
 801244c:	e7ee      	b.n	801242c <__gethex+0x160>
 801244e:	f100 0914 	add.w	r9, r0, #20
 8012452:	f04f 0b00 	mov.w	fp, #0
 8012456:	f1ca 0301 	rsb	r3, sl, #1
 801245a:	f8cd 9008 	str.w	r9, [sp, #8]
 801245e:	f8cd b000 	str.w	fp, [sp]
 8012462:	9306      	str	r3, [sp, #24]
 8012464:	42b7      	cmp	r7, r6
 8012466:	d340      	bcc.n	80124ea <__gethex+0x21e>
 8012468:	9802      	ldr	r0, [sp, #8]
 801246a:	9b00      	ldr	r3, [sp, #0]
 801246c:	f840 3b04 	str.w	r3, [r0], #4
 8012470:	eba0 0009 	sub.w	r0, r0, r9
 8012474:	1080      	asrs	r0, r0, #2
 8012476:	0146      	lsls	r6, r0, #5
 8012478:	6120      	str	r0, [r4, #16]
 801247a:	4618      	mov	r0, r3
 801247c:	f000 fbc4 	bl	8012c08 <__hi0bits>
 8012480:	1a30      	subs	r0, r6, r0
 8012482:	f8d8 6000 	ldr.w	r6, [r8]
 8012486:	42b0      	cmp	r0, r6
 8012488:	dd63      	ble.n	8012552 <__gethex+0x286>
 801248a:	1b87      	subs	r7, r0, r6
 801248c:	4639      	mov	r1, r7
 801248e:	4620      	mov	r0, r4
 8012490:	f000 ff5e 	bl	8013350 <__any_on>
 8012494:	4682      	mov	sl, r0
 8012496:	b1a8      	cbz	r0, 80124c4 <__gethex+0x1f8>
 8012498:	1e7b      	subs	r3, r7, #1
 801249a:	1159      	asrs	r1, r3, #5
 801249c:	f003 021f 	and.w	r2, r3, #31
 80124a0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80124a4:	f04f 0a01 	mov.w	sl, #1
 80124a8:	fa0a f202 	lsl.w	r2, sl, r2
 80124ac:	420a      	tst	r2, r1
 80124ae:	d009      	beq.n	80124c4 <__gethex+0x1f8>
 80124b0:	4553      	cmp	r3, sl
 80124b2:	dd05      	ble.n	80124c0 <__gethex+0x1f4>
 80124b4:	1eb9      	subs	r1, r7, #2
 80124b6:	4620      	mov	r0, r4
 80124b8:	f000 ff4a 	bl	8013350 <__any_on>
 80124bc:	2800      	cmp	r0, #0
 80124be:	d145      	bne.n	801254c <__gethex+0x280>
 80124c0:	f04f 0a02 	mov.w	sl, #2
 80124c4:	4639      	mov	r1, r7
 80124c6:	4620      	mov	r0, r4
 80124c8:	f7ff fe99 	bl	80121fe <rshift>
 80124cc:	443d      	add	r5, r7
 80124ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80124d2:	42ab      	cmp	r3, r5
 80124d4:	da4c      	bge.n	8012570 <__gethex+0x2a4>
 80124d6:	ee18 0a10 	vmov	r0, s16
 80124da:	4621      	mov	r1, r4
 80124dc:	f000 fade 	bl	8012a9c <_Bfree>
 80124e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80124e2:	2300      	movs	r3, #0
 80124e4:	6013      	str	r3, [r2, #0]
 80124e6:	27a3      	movs	r7, #163	; 0xa3
 80124e8:	e785      	b.n	80123f6 <__gethex+0x12a>
 80124ea:	1e73      	subs	r3, r6, #1
 80124ec:	9a05      	ldr	r2, [sp, #20]
 80124ee:	9303      	str	r3, [sp, #12]
 80124f0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80124f4:	4293      	cmp	r3, r2
 80124f6:	d019      	beq.n	801252c <__gethex+0x260>
 80124f8:	f1bb 0f20 	cmp.w	fp, #32
 80124fc:	d107      	bne.n	801250e <__gethex+0x242>
 80124fe:	9b02      	ldr	r3, [sp, #8]
 8012500:	9a00      	ldr	r2, [sp, #0]
 8012502:	f843 2b04 	str.w	r2, [r3], #4
 8012506:	9302      	str	r3, [sp, #8]
 8012508:	2300      	movs	r3, #0
 801250a:	9300      	str	r3, [sp, #0]
 801250c:	469b      	mov	fp, r3
 801250e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012512:	f7ff fec6 	bl	80122a2 <__hexdig_fun>
 8012516:	9b00      	ldr	r3, [sp, #0]
 8012518:	f000 000f 	and.w	r0, r0, #15
 801251c:	fa00 f00b 	lsl.w	r0, r0, fp
 8012520:	4303      	orrs	r3, r0
 8012522:	9300      	str	r3, [sp, #0]
 8012524:	f10b 0b04 	add.w	fp, fp, #4
 8012528:	9b03      	ldr	r3, [sp, #12]
 801252a:	e00d      	b.n	8012548 <__gethex+0x27c>
 801252c:	9b03      	ldr	r3, [sp, #12]
 801252e:	9a06      	ldr	r2, [sp, #24]
 8012530:	4413      	add	r3, r2
 8012532:	42bb      	cmp	r3, r7
 8012534:	d3e0      	bcc.n	80124f8 <__gethex+0x22c>
 8012536:	4618      	mov	r0, r3
 8012538:	9901      	ldr	r1, [sp, #4]
 801253a:	9307      	str	r3, [sp, #28]
 801253c:	4652      	mov	r2, sl
 801253e:	f001 fa02 	bl	8013946 <strncmp>
 8012542:	9b07      	ldr	r3, [sp, #28]
 8012544:	2800      	cmp	r0, #0
 8012546:	d1d7      	bne.n	80124f8 <__gethex+0x22c>
 8012548:	461e      	mov	r6, r3
 801254a:	e78b      	b.n	8012464 <__gethex+0x198>
 801254c:	f04f 0a03 	mov.w	sl, #3
 8012550:	e7b8      	b.n	80124c4 <__gethex+0x1f8>
 8012552:	da0a      	bge.n	801256a <__gethex+0x29e>
 8012554:	1a37      	subs	r7, r6, r0
 8012556:	4621      	mov	r1, r4
 8012558:	ee18 0a10 	vmov	r0, s16
 801255c:	463a      	mov	r2, r7
 801255e:	f000 fcb9 	bl	8012ed4 <__lshift>
 8012562:	1bed      	subs	r5, r5, r7
 8012564:	4604      	mov	r4, r0
 8012566:	f100 0914 	add.w	r9, r0, #20
 801256a:	f04f 0a00 	mov.w	sl, #0
 801256e:	e7ae      	b.n	80124ce <__gethex+0x202>
 8012570:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012574:	42a8      	cmp	r0, r5
 8012576:	dd72      	ble.n	801265e <__gethex+0x392>
 8012578:	1b45      	subs	r5, r0, r5
 801257a:	42ae      	cmp	r6, r5
 801257c:	dc36      	bgt.n	80125ec <__gethex+0x320>
 801257e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012582:	2b02      	cmp	r3, #2
 8012584:	d02a      	beq.n	80125dc <__gethex+0x310>
 8012586:	2b03      	cmp	r3, #3
 8012588:	d02c      	beq.n	80125e4 <__gethex+0x318>
 801258a:	2b01      	cmp	r3, #1
 801258c:	d115      	bne.n	80125ba <__gethex+0x2ee>
 801258e:	42ae      	cmp	r6, r5
 8012590:	d113      	bne.n	80125ba <__gethex+0x2ee>
 8012592:	2e01      	cmp	r6, #1
 8012594:	d10b      	bne.n	80125ae <__gethex+0x2e2>
 8012596:	9a04      	ldr	r2, [sp, #16]
 8012598:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801259c:	6013      	str	r3, [r2, #0]
 801259e:	2301      	movs	r3, #1
 80125a0:	6123      	str	r3, [r4, #16]
 80125a2:	f8c9 3000 	str.w	r3, [r9]
 80125a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80125a8:	2762      	movs	r7, #98	; 0x62
 80125aa:	601c      	str	r4, [r3, #0]
 80125ac:	e723      	b.n	80123f6 <__gethex+0x12a>
 80125ae:	1e71      	subs	r1, r6, #1
 80125b0:	4620      	mov	r0, r4
 80125b2:	f000 fecd 	bl	8013350 <__any_on>
 80125b6:	2800      	cmp	r0, #0
 80125b8:	d1ed      	bne.n	8012596 <__gethex+0x2ca>
 80125ba:	ee18 0a10 	vmov	r0, s16
 80125be:	4621      	mov	r1, r4
 80125c0:	f000 fa6c 	bl	8012a9c <_Bfree>
 80125c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80125c6:	2300      	movs	r3, #0
 80125c8:	6013      	str	r3, [r2, #0]
 80125ca:	2750      	movs	r7, #80	; 0x50
 80125cc:	e713      	b.n	80123f6 <__gethex+0x12a>
 80125ce:	bf00      	nop
 80125d0:	08015330 	.word	0x08015330
 80125d4:	08015253 	.word	0x08015253
 80125d8:	080152c4 	.word	0x080152c4
 80125dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d1eb      	bne.n	80125ba <__gethex+0x2ee>
 80125e2:	e7d8      	b.n	8012596 <__gethex+0x2ca>
 80125e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d1d5      	bne.n	8012596 <__gethex+0x2ca>
 80125ea:	e7e6      	b.n	80125ba <__gethex+0x2ee>
 80125ec:	1e6f      	subs	r7, r5, #1
 80125ee:	f1ba 0f00 	cmp.w	sl, #0
 80125f2:	d131      	bne.n	8012658 <__gethex+0x38c>
 80125f4:	b127      	cbz	r7, 8012600 <__gethex+0x334>
 80125f6:	4639      	mov	r1, r7
 80125f8:	4620      	mov	r0, r4
 80125fa:	f000 fea9 	bl	8013350 <__any_on>
 80125fe:	4682      	mov	sl, r0
 8012600:	117b      	asrs	r3, r7, #5
 8012602:	2101      	movs	r1, #1
 8012604:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8012608:	f007 071f 	and.w	r7, r7, #31
 801260c:	fa01 f707 	lsl.w	r7, r1, r7
 8012610:	421f      	tst	r7, r3
 8012612:	4629      	mov	r1, r5
 8012614:	4620      	mov	r0, r4
 8012616:	bf18      	it	ne
 8012618:	f04a 0a02 	orrne.w	sl, sl, #2
 801261c:	1b76      	subs	r6, r6, r5
 801261e:	f7ff fdee 	bl	80121fe <rshift>
 8012622:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012626:	2702      	movs	r7, #2
 8012628:	f1ba 0f00 	cmp.w	sl, #0
 801262c:	d048      	beq.n	80126c0 <__gethex+0x3f4>
 801262e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012632:	2b02      	cmp	r3, #2
 8012634:	d015      	beq.n	8012662 <__gethex+0x396>
 8012636:	2b03      	cmp	r3, #3
 8012638:	d017      	beq.n	801266a <__gethex+0x39e>
 801263a:	2b01      	cmp	r3, #1
 801263c:	d109      	bne.n	8012652 <__gethex+0x386>
 801263e:	f01a 0f02 	tst.w	sl, #2
 8012642:	d006      	beq.n	8012652 <__gethex+0x386>
 8012644:	f8d9 0000 	ldr.w	r0, [r9]
 8012648:	ea4a 0a00 	orr.w	sl, sl, r0
 801264c:	f01a 0f01 	tst.w	sl, #1
 8012650:	d10e      	bne.n	8012670 <__gethex+0x3a4>
 8012652:	f047 0710 	orr.w	r7, r7, #16
 8012656:	e033      	b.n	80126c0 <__gethex+0x3f4>
 8012658:	f04f 0a01 	mov.w	sl, #1
 801265c:	e7d0      	b.n	8012600 <__gethex+0x334>
 801265e:	2701      	movs	r7, #1
 8012660:	e7e2      	b.n	8012628 <__gethex+0x35c>
 8012662:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012664:	f1c3 0301 	rsb	r3, r3, #1
 8012668:	9315      	str	r3, [sp, #84]	; 0x54
 801266a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801266c:	2b00      	cmp	r3, #0
 801266e:	d0f0      	beq.n	8012652 <__gethex+0x386>
 8012670:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012674:	f104 0314 	add.w	r3, r4, #20
 8012678:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801267c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012680:	f04f 0c00 	mov.w	ip, #0
 8012684:	4618      	mov	r0, r3
 8012686:	f853 2b04 	ldr.w	r2, [r3], #4
 801268a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801268e:	d01c      	beq.n	80126ca <__gethex+0x3fe>
 8012690:	3201      	adds	r2, #1
 8012692:	6002      	str	r2, [r0, #0]
 8012694:	2f02      	cmp	r7, #2
 8012696:	f104 0314 	add.w	r3, r4, #20
 801269a:	d13f      	bne.n	801271c <__gethex+0x450>
 801269c:	f8d8 2000 	ldr.w	r2, [r8]
 80126a0:	3a01      	subs	r2, #1
 80126a2:	42b2      	cmp	r2, r6
 80126a4:	d10a      	bne.n	80126bc <__gethex+0x3f0>
 80126a6:	1171      	asrs	r1, r6, #5
 80126a8:	2201      	movs	r2, #1
 80126aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80126ae:	f006 061f 	and.w	r6, r6, #31
 80126b2:	fa02 f606 	lsl.w	r6, r2, r6
 80126b6:	421e      	tst	r6, r3
 80126b8:	bf18      	it	ne
 80126ba:	4617      	movne	r7, r2
 80126bc:	f047 0720 	orr.w	r7, r7, #32
 80126c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80126c2:	601c      	str	r4, [r3, #0]
 80126c4:	9b04      	ldr	r3, [sp, #16]
 80126c6:	601d      	str	r5, [r3, #0]
 80126c8:	e695      	b.n	80123f6 <__gethex+0x12a>
 80126ca:	4299      	cmp	r1, r3
 80126cc:	f843 cc04 	str.w	ip, [r3, #-4]
 80126d0:	d8d8      	bhi.n	8012684 <__gethex+0x3b8>
 80126d2:	68a3      	ldr	r3, [r4, #8]
 80126d4:	459b      	cmp	fp, r3
 80126d6:	db19      	blt.n	801270c <__gethex+0x440>
 80126d8:	6861      	ldr	r1, [r4, #4]
 80126da:	ee18 0a10 	vmov	r0, s16
 80126de:	3101      	adds	r1, #1
 80126e0:	f000 f99c 	bl	8012a1c <_Balloc>
 80126e4:	4681      	mov	r9, r0
 80126e6:	b918      	cbnz	r0, 80126f0 <__gethex+0x424>
 80126e8:	4b1a      	ldr	r3, [pc, #104]	; (8012754 <__gethex+0x488>)
 80126ea:	4602      	mov	r2, r0
 80126ec:	2184      	movs	r1, #132	; 0x84
 80126ee:	e6a8      	b.n	8012442 <__gethex+0x176>
 80126f0:	6922      	ldr	r2, [r4, #16]
 80126f2:	3202      	adds	r2, #2
 80126f4:	f104 010c 	add.w	r1, r4, #12
 80126f8:	0092      	lsls	r2, r2, #2
 80126fa:	300c      	adds	r0, #12
 80126fc:	f7fc fda4 	bl	800f248 <memcpy>
 8012700:	4621      	mov	r1, r4
 8012702:	ee18 0a10 	vmov	r0, s16
 8012706:	f000 f9c9 	bl	8012a9c <_Bfree>
 801270a:	464c      	mov	r4, r9
 801270c:	6923      	ldr	r3, [r4, #16]
 801270e:	1c5a      	adds	r2, r3, #1
 8012710:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012714:	6122      	str	r2, [r4, #16]
 8012716:	2201      	movs	r2, #1
 8012718:	615a      	str	r2, [r3, #20]
 801271a:	e7bb      	b.n	8012694 <__gethex+0x3c8>
 801271c:	6922      	ldr	r2, [r4, #16]
 801271e:	455a      	cmp	r2, fp
 8012720:	dd0b      	ble.n	801273a <__gethex+0x46e>
 8012722:	2101      	movs	r1, #1
 8012724:	4620      	mov	r0, r4
 8012726:	f7ff fd6a 	bl	80121fe <rshift>
 801272a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801272e:	3501      	adds	r5, #1
 8012730:	42ab      	cmp	r3, r5
 8012732:	f6ff aed0 	blt.w	80124d6 <__gethex+0x20a>
 8012736:	2701      	movs	r7, #1
 8012738:	e7c0      	b.n	80126bc <__gethex+0x3f0>
 801273a:	f016 061f 	ands.w	r6, r6, #31
 801273e:	d0fa      	beq.n	8012736 <__gethex+0x46a>
 8012740:	449a      	add	sl, r3
 8012742:	f1c6 0620 	rsb	r6, r6, #32
 8012746:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801274a:	f000 fa5d 	bl	8012c08 <__hi0bits>
 801274e:	42b0      	cmp	r0, r6
 8012750:	dbe7      	blt.n	8012722 <__gethex+0x456>
 8012752:	e7f0      	b.n	8012736 <__gethex+0x46a>
 8012754:	08015253 	.word	0x08015253

08012758 <L_shift>:
 8012758:	f1c2 0208 	rsb	r2, r2, #8
 801275c:	0092      	lsls	r2, r2, #2
 801275e:	b570      	push	{r4, r5, r6, lr}
 8012760:	f1c2 0620 	rsb	r6, r2, #32
 8012764:	6843      	ldr	r3, [r0, #4]
 8012766:	6804      	ldr	r4, [r0, #0]
 8012768:	fa03 f506 	lsl.w	r5, r3, r6
 801276c:	432c      	orrs	r4, r5
 801276e:	40d3      	lsrs	r3, r2
 8012770:	6004      	str	r4, [r0, #0]
 8012772:	f840 3f04 	str.w	r3, [r0, #4]!
 8012776:	4288      	cmp	r0, r1
 8012778:	d3f4      	bcc.n	8012764 <L_shift+0xc>
 801277a:	bd70      	pop	{r4, r5, r6, pc}

0801277c <__match>:
 801277c:	b530      	push	{r4, r5, lr}
 801277e:	6803      	ldr	r3, [r0, #0]
 8012780:	3301      	adds	r3, #1
 8012782:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012786:	b914      	cbnz	r4, 801278e <__match+0x12>
 8012788:	6003      	str	r3, [r0, #0]
 801278a:	2001      	movs	r0, #1
 801278c:	bd30      	pop	{r4, r5, pc}
 801278e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012792:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012796:	2d19      	cmp	r5, #25
 8012798:	bf98      	it	ls
 801279a:	3220      	addls	r2, #32
 801279c:	42a2      	cmp	r2, r4
 801279e:	d0f0      	beq.n	8012782 <__match+0x6>
 80127a0:	2000      	movs	r0, #0
 80127a2:	e7f3      	b.n	801278c <__match+0x10>

080127a4 <__hexnan>:
 80127a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127a8:	680b      	ldr	r3, [r1, #0]
 80127aa:	6801      	ldr	r1, [r0, #0]
 80127ac:	115e      	asrs	r6, r3, #5
 80127ae:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80127b2:	f013 031f 	ands.w	r3, r3, #31
 80127b6:	b087      	sub	sp, #28
 80127b8:	bf18      	it	ne
 80127ba:	3604      	addne	r6, #4
 80127bc:	2500      	movs	r5, #0
 80127be:	1f37      	subs	r7, r6, #4
 80127c0:	4682      	mov	sl, r0
 80127c2:	4690      	mov	r8, r2
 80127c4:	9301      	str	r3, [sp, #4]
 80127c6:	f846 5c04 	str.w	r5, [r6, #-4]
 80127ca:	46b9      	mov	r9, r7
 80127cc:	463c      	mov	r4, r7
 80127ce:	9502      	str	r5, [sp, #8]
 80127d0:	46ab      	mov	fp, r5
 80127d2:	784a      	ldrb	r2, [r1, #1]
 80127d4:	1c4b      	adds	r3, r1, #1
 80127d6:	9303      	str	r3, [sp, #12]
 80127d8:	b342      	cbz	r2, 801282c <__hexnan+0x88>
 80127da:	4610      	mov	r0, r2
 80127dc:	9105      	str	r1, [sp, #20]
 80127de:	9204      	str	r2, [sp, #16]
 80127e0:	f7ff fd5f 	bl	80122a2 <__hexdig_fun>
 80127e4:	2800      	cmp	r0, #0
 80127e6:	d14f      	bne.n	8012888 <__hexnan+0xe4>
 80127e8:	9a04      	ldr	r2, [sp, #16]
 80127ea:	9905      	ldr	r1, [sp, #20]
 80127ec:	2a20      	cmp	r2, #32
 80127ee:	d818      	bhi.n	8012822 <__hexnan+0x7e>
 80127f0:	9b02      	ldr	r3, [sp, #8]
 80127f2:	459b      	cmp	fp, r3
 80127f4:	dd13      	ble.n	801281e <__hexnan+0x7a>
 80127f6:	454c      	cmp	r4, r9
 80127f8:	d206      	bcs.n	8012808 <__hexnan+0x64>
 80127fa:	2d07      	cmp	r5, #7
 80127fc:	dc04      	bgt.n	8012808 <__hexnan+0x64>
 80127fe:	462a      	mov	r2, r5
 8012800:	4649      	mov	r1, r9
 8012802:	4620      	mov	r0, r4
 8012804:	f7ff ffa8 	bl	8012758 <L_shift>
 8012808:	4544      	cmp	r4, r8
 801280a:	d950      	bls.n	80128ae <__hexnan+0x10a>
 801280c:	2300      	movs	r3, #0
 801280e:	f1a4 0904 	sub.w	r9, r4, #4
 8012812:	f844 3c04 	str.w	r3, [r4, #-4]
 8012816:	f8cd b008 	str.w	fp, [sp, #8]
 801281a:	464c      	mov	r4, r9
 801281c:	461d      	mov	r5, r3
 801281e:	9903      	ldr	r1, [sp, #12]
 8012820:	e7d7      	b.n	80127d2 <__hexnan+0x2e>
 8012822:	2a29      	cmp	r2, #41	; 0x29
 8012824:	d156      	bne.n	80128d4 <__hexnan+0x130>
 8012826:	3102      	adds	r1, #2
 8012828:	f8ca 1000 	str.w	r1, [sl]
 801282c:	f1bb 0f00 	cmp.w	fp, #0
 8012830:	d050      	beq.n	80128d4 <__hexnan+0x130>
 8012832:	454c      	cmp	r4, r9
 8012834:	d206      	bcs.n	8012844 <__hexnan+0xa0>
 8012836:	2d07      	cmp	r5, #7
 8012838:	dc04      	bgt.n	8012844 <__hexnan+0xa0>
 801283a:	462a      	mov	r2, r5
 801283c:	4649      	mov	r1, r9
 801283e:	4620      	mov	r0, r4
 8012840:	f7ff ff8a 	bl	8012758 <L_shift>
 8012844:	4544      	cmp	r4, r8
 8012846:	d934      	bls.n	80128b2 <__hexnan+0x10e>
 8012848:	f1a8 0204 	sub.w	r2, r8, #4
 801284c:	4623      	mov	r3, r4
 801284e:	f853 1b04 	ldr.w	r1, [r3], #4
 8012852:	f842 1f04 	str.w	r1, [r2, #4]!
 8012856:	429f      	cmp	r7, r3
 8012858:	d2f9      	bcs.n	801284e <__hexnan+0xaa>
 801285a:	1b3b      	subs	r3, r7, r4
 801285c:	f023 0303 	bic.w	r3, r3, #3
 8012860:	3304      	adds	r3, #4
 8012862:	3401      	adds	r4, #1
 8012864:	3e03      	subs	r6, #3
 8012866:	42b4      	cmp	r4, r6
 8012868:	bf88      	it	hi
 801286a:	2304      	movhi	r3, #4
 801286c:	4443      	add	r3, r8
 801286e:	2200      	movs	r2, #0
 8012870:	f843 2b04 	str.w	r2, [r3], #4
 8012874:	429f      	cmp	r7, r3
 8012876:	d2fb      	bcs.n	8012870 <__hexnan+0xcc>
 8012878:	683b      	ldr	r3, [r7, #0]
 801287a:	b91b      	cbnz	r3, 8012884 <__hexnan+0xe0>
 801287c:	4547      	cmp	r7, r8
 801287e:	d127      	bne.n	80128d0 <__hexnan+0x12c>
 8012880:	2301      	movs	r3, #1
 8012882:	603b      	str	r3, [r7, #0]
 8012884:	2005      	movs	r0, #5
 8012886:	e026      	b.n	80128d6 <__hexnan+0x132>
 8012888:	3501      	adds	r5, #1
 801288a:	2d08      	cmp	r5, #8
 801288c:	f10b 0b01 	add.w	fp, fp, #1
 8012890:	dd06      	ble.n	80128a0 <__hexnan+0xfc>
 8012892:	4544      	cmp	r4, r8
 8012894:	d9c3      	bls.n	801281e <__hexnan+0x7a>
 8012896:	2300      	movs	r3, #0
 8012898:	f844 3c04 	str.w	r3, [r4, #-4]
 801289c:	2501      	movs	r5, #1
 801289e:	3c04      	subs	r4, #4
 80128a0:	6822      	ldr	r2, [r4, #0]
 80128a2:	f000 000f 	and.w	r0, r0, #15
 80128a6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80128aa:	6022      	str	r2, [r4, #0]
 80128ac:	e7b7      	b.n	801281e <__hexnan+0x7a>
 80128ae:	2508      	movs	r5, #8
 80128b0:	e7b5      	b.n	801281e <__hexnan+0x7a>
 80128b2:	9b01      	ldr	r3, [sp, #4]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d0df      	beq.n	8012878 <__hexnan+0xd4>
 80128b8:	f04f 32ff 	mov.w	r2, #4294967295
 80128bc:	f1c3 0320 	rsb	r3, r3, #32
 80128c0:	fa22 f303 	lsr.w	r3, r2, r3
 80128c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80128c8:	401a      	ands	r2, r3
 80128ca:	f846 2c04 	str.w	r2, [r6, #-4]
 80128ce:	e7d3      	b.n	8012878 <__hexnan+0xd4>
 80128d0:	3f04      	subs	r7, #4
 80128d2:	e7d1      	b.n	8012878 <__hexnan+0xd4>
 80128d4:	2004      	movs	r0, #4
 80128d6:	b007      	add	sp, #28
 80128d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080128dc <_localeconv_r>:
 80128dc:	4800      	ldr	r0, [pc, #0]	; (80128e0 <_localeconv_r+0x4>)
 80128de:	4770      	bx	lr
 80128e0:	200001b0 	.word	0x200001b0

080128e4 <__retarget_lock_init_recursive>:
 80128e4:	4770      	bx	lr

080128e6 <__retarget_lock_acquire_recursive>:
 80128e6:	4770      	bx	lr

080128e8 <__retarget_lock_release_recursive>:
 80128e8:	4770      	bx	lr

080128ea <__swhatbuf_r>:
 80128ea:	b570      	push	{r4, r5, r6, lr}
 80128ec:	460e      	mov	r6, r1
 80128ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128f2:	2900      	cmp	r1, #0
 80128f4:	b096      	sub	sp, #88	; 0x58
 80128f6:	4614      	mov	r4, r2
 80128f8:	461d      	mov	r5, r3
 80128fa:	da07      	bge.n	801290c <__swhatbuf_r+0x22>
 80128fc:	2300      	movs	r3, #0
 80128fe:	602b      	str	r3, [r5, #0]
 8012900:	89b3      	ldrh	r3, [r6, #12]
 8012902:	061a      	lsls	r2, r3, #24
 8012904:	d410      	bmi.n	8012928 <__swhatbuf_r+0x3e>
 8012906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801290a:	e00e      	b.n	801292a <__swhatbuf_r+0x40>
 801290c:	466a      	mov	r2, sp
 801290e:	f001 f85b 	bl	80139c8 <_fstat_r>
 8012912:	2800      	cmp	r0, #0
 8012914:	dbf2      	blt.n	80128fc <__swhatbuf_r+0x12>
 8012916:	9a01      	ldr	r2, [sp, #4]
 8012918:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801291c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012920:	425a      	negs	r2, r3
 8012922:	415a      	adcs	r2, r3
 8012924:	602a      	str	r2, [r5, #0]
 8012926:	e7ee      	b.n	8012906 <__swhatbuf_r+0x1c>
 8012928:	2340      	movs	r3, #64	; 0x40
 801292a:	2000      	movs	r0, #0
 801292c:	6023      	str	r3, [r4, #0]
 801292e:	b016      	add	sp, #88	; 0x58
 8012930:	bd70      	pop	{r4, r5, r6, pc}
	...

08012934 <__smakebuf_r>:
 8012934:	898b      	ldrh	r3, [r1, #12]
 8012936:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012938:	079d      	lsls	r5, r3, #30
 801293a:	4606      	mov	r6, r0
 801293c:	460c      	mov	r4, r1
 801293e:	d507      	bpl.n	8012950 <__smakebuf_r+0x1c>
 8012940:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012944:	6023      	str	r3, [r4, #0]
 8012946:	6123      	str	r3, [r4, #16]
 8012948:	2301      	movs	r3, #1
 801294a:	6163      	str	r3, [r4, #20]
 801294c:	b002      	add	sp, #8
 801294e:	bd70      	pop	{r4, r5, r6, pc}
 8012950:	ab01      	add	r3, sp, #4
 8012952:	466a      	mov	r2, sp
 8012954:	f7ff ffc9 	bl	80128ea <__swhatbuf_r>
 8012958:	9900      	ldr	r1, [sp, #0]
 801295a:	4605      	mov	r5, r0
 801295c:	4630      	mov	r0, r6
 801295e:	f000 fd77 	bl	8013450 <_malloc_r>
 8012962:	b948      	cbnz	r0, 8012978 <__smakebuf_r+0x44>
 8012964:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012968:	059a      	lsls	r2, r3, #22
 801296a:	d4ef      	bmi.n	801294c <__smakebuf_r+0x18>
 801296c:	f023 0303 	bic.w	r3, r3, #3
 8012970:	f043 0302 	orr.w	r3, r3, #2
 8012974:	81a3      	strh	r3, [r4, #12]
 8012976:	e7e3      	b.n	8012940 <__smakebuf_r+0xc>
 8012978:	4b0d      	ldr	r3, [pc, #52]	; (80129b0 <__smakebuf_r+0x7c>)
 801297a:	62b3      	str	r3, [r6, #40]	; 0x28
 801297c:	89a3      	ldrh	r3, [r4, #12]
 801297e:	6020      	str	r0, [r4, #0]
 8012980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012984:	81a3      	strh	r3, [r4, #12]
 8012986:	9b00      	ldr	r3, [sp, #0]
 8012988:	6163      	str	r3, [r4, #20]
 801298a:	9b01      	ldr	r3, [sp, #4]
 801298c:	6120      	str	r0, [r4, #16]
 801298e:	b15b      	cbz	r3, 80129a8 <__smakebuf_r+0x74>
 8012990:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012994:	4630      	mov	r0, r6
 8012996:	f001 f829 	bl	80139ec <_isatty_r>
 801299a:	b128      	cbz	r0, 80129a8 <__smakebuf_r+0x74>
 801299c:	89a3      	ldrh	r3, [r4, #12]
 801299e:	f023 0303 	bic.w	r3, r3, #3
 80129a2:	f043 0301 	orr.w	r3, r3, #1
 80129a6:	81a3      	strh	r3, [r4, #12]
 80129a8:	89a0      	ldrh	r0, [r4, #12]
 80129aa:	4305      	orrs	r5, r0
 80129ac:	81a5      	strh	r5, [r4, #12]
 80129ae:	e7cd      	b.n	801294c <__smakebuf_r+0x18>
 80129b0:	0801205d 	.word	0x0801205d

080129b4 <malloc>:
 80129b4:	4b02      	ldr	r3, [pc, #8]	; (80129c0 <malloc+0xc>)
 80129b6:	4601      	mov	r1, r0
 80129b8:	6818      	ldr	r0, [r3, #0]
 80129ba:	f000 bd49 	b.w	8013450 <_malloc_r>
 80129be:	bf00      	nop
 80129c0:	20000058 	.word	0x20000058

080129c4 <__ascii_mbtowc>:
 80129c4:	b082      	sub	sp, #8
 80129c6:	b901      	cbnz	r1, 80129ca <__ascii_mbtowc+0x6>
 80129c8:	a901      	add	r1, sp, #4
 80129ca:	b142      	cbz	r2, 80129de <__ascii_mbtowc+0x1a>
 80129cc:	b14b      	cbz	r3, 80129e2 <__ascii_mbtowc+0x1e>
 80129ce:	7813      	ldrb	r3, [r2, #0]
 80129d0:	600b      	str	r3, [r1, #0]
 80129d2:	7812      	ldrb	r2, [r2, #0]
 80129d4:	1e10      	subs	r0, r2, #0
 80129d6:	bf18      	it	ne
 80129d8:	2001      	movne	r0, #1
 80129da:	b002      	add	sp, #8
 80129dc:	4770      	bx	lr
 80129de:	4610      	mov	r0, r2
 80129e0:	e7fb      	b.n	80129da <__ascii_mbtowc+0x16>
 80129e2:	f06f 0001 	mvn.w	r0, #1
 80129e6:	e7f8      	b.n	80129da <__ascii_mbtowc+0x16>

080129e8 <memmove>:
 80129e8:	4288      	cmp	r0, r1
 80129ea:	b510      	push	{r4, lr}
 80129ec:	eb01 0402 	add.w	r4, r1, r2
 80129f0:	d902      	bls.n	80129f8 <memmove+0x10>
 80129f2:	4284      	cmp	r4, r0
 80129f4:	4623      	mov	r3, r4
 80129f6:	d807      	bhi.n	8012a08 <memmove+0x20>
 80129f8:	1e43      	subs	r3, r0, #1
 80129fa:	42a1      	cmp	r1, r4
 80129fc:	d008      	beq.n	8012a10 <memmove+0x28>
 80129fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012a02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012a06:	e7f8      	b.n	80129fa <memmove+0x12>
 8012a08:	4402      	add	r2, r0
 8012a0a:	4601      	mov	r1, r0
 8012a0c:	428a      	cmp	r2, r1
 8012a0e:	d100      	bne.n	8012a12 <memmove+0x2a>
 8012a10:	bd10      	pop	{r4, pc}
 8012a12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012a16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012a1a:	e7f7      	b.n	8012a0c <memmove+0x24>

08012a1c <_Balloc>:
 8012a1c:	b570      	push	{r4, r5, r6, lr}
 8012a1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012a20:	4604      	mov	r4, r0
 8012a22:	460d      	mov	r5, r1
 8012a24:	b976      	cbnz	r6, 8012a44 <_Balloc+0x28>
 8012a26:	2010      	movs	r0, #16
 8012a28:	f7ff ffc4 	bl	80129b4 <malloc>
 8012a2c:	4602      	mov	r2, r0
 8012a2e:	6260      	str	r0, [r4, #36]	; 0x24
 8012a30:	b920      	cbnz	r0, 8012a3c <_Balloc+0x20>
 8012a32:	4b18      	ldr	r3, [pc, #96]	; (8012a94 <_Balloc+0x78>)
 8012a34:	4818      	ldr	r0, [pc, #96]	; (8012a98 <_Balloc+0x7c>)
 8012a36:	2166      	movs	r1, #102	; 0x66
 8012a38:	f7fc fbac 	bl	800f194 <__assert_func>
 8012a3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012a40:	6006      	str	r6, [r0, #0]
 8012a42:	60c6      	str	r6, [r0, #12]
 8012a44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012a46:	68f3      	ldr	r3, [r6, #12]
 8012a48:	b183      	cbz	r3, 8012a6c <_Balloc+0x50>
 8012a4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012a4c:	68db      	ldr	r3, [r3, #12]
 8012a4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012a52:	b9b8      	cbnz	r0, 8012a84 <_Balloc+0x68>
 8012a54:	2101      	movs	r1, #1
 8012a56:	fa01 f605 	lsl.w	r6, r1, r5
 8012a5a:	1d72      	adds	r2, r6, #5
 8012a5c:	0092      	lsls	r2, r2, #2
 8012a5e:	4620      	mov	r0, r4
 8012a60:	f000 fc97 	bl	8013392 <_calloc_r>
 8012a64:	b160      	cbz	r0, 8012a80 <_Balloc+0x64>
 8012a66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012a6a:	e00e      	b.n	8012a8a <_Balloc+0x6e>
 8012a6c:	2221      	movs	r2, #33	; 0x21
 8012a6e:	2104      	movs	r1, #4
 8012a70:	4620      	mov	r0, r4
 8012a72:	f000 fc8e 	bl	8013392 <_calloc_r>
 8012a76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012a78:	60f0      	str	r0, [r6, #12]
 8012a7a:	68db      	ldr	r3, [r3, #12]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d1e4      	bne.n	8012a4a <_Balloc+0x2e>
 8012a80:	2000      	movs	r0, #0
 8012a82:	bd70      	pop	{r4, r5, r6, pc}
 8012a84:	6802      	ldr	r2, [r0, #0]
 8012a86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012a8a:	2300      	movs	r3, #0
 8012a8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012a90:	e7f7      	b.n	8012a82 <_Balloc+0x66>
 8012a92:	bf00      	nop
 8012a94:	080151dd 	.word	0x080151dd
 8012a98:	08015344 	.word	0x08015344

08012a9c <_Bfree>:
 8012a9c:	b570      	push	{r4, r5, r6, lr}
 8012a9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012aa0:	4605      	mov	r5, r0
 8012aa2:	460c      	mov	r4, r1
 8012aa4:	b976      	cbnz	r6, 8012ac4 <_Bfree+0x28>
 8012aa6:	2010      	movs	r0, #16
 8012aa8:	f7ff ff84 	bl	80129b4 <malloc>
 8012aac:	4602      	mov	r2, r0
 8012aae:	6268      	str	r0, [r5, #36]	; 0x24
 8012ab0:	b920      	cbnz	r0, 8012abc <_Bfree+0x20>
 8012ab2:	4b09      	ldr	r3, [pc, #36]	; (8012ad8 <_Bfree+0x3c>)
 8012ab4:	4809      	ldr	r0, [pc, #36]	; (8012adc <_Bfree+0x40>)
 8012ab6:	218a      	movs	r1, #138	; 0x8a
 8012ab8:	f7fc fb6c 	bl	800f194 <__assert_func>
 8012abc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012ac0:	6006      	str	r6, [r0, #0]
 8012ac2:	60c6      	str	r6, [r0, #12]
 8012ac4:	b13c      	cbz	r4, 8012ad6 <_Bfree+0x3a>
 8012ac6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012ac8:	6862      	ldr	r2, [r4, #4]
 8012aca:	68db      	ldr	r3, [r3, #12]
 8012acc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012ad0:	6021      	str	r1, [r4, #0]
 8012ad2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012ad6:	bd70      	pop	{r4, r5, r6, pc}
 8012ad8:	080151dd 	.word	0x080151dd
 8012adc:	08015344 	.word	0x08015344

08012ae0 <__multadd>:
 8012ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ae4:	690e      	ldr	r6, [r1, #16]
 8012ae6:	4607      	mov	r7, r0
 8012ae8:	4698      	mov	r8, r3
 8012aea:	460c      	mov	r4, r1
 8012aec:	f101 0014 	add.w	r0, r1, #20
 8012af0:	2300      	movs	r3, #0
 8012af2:	6805      	ldr	r5, [r0, #0]
 8012af4:	b2a9      	uxth	r1, r5
 8012af6:	fb02 8101 	mla	r1, r2, r1, r8
 8012afa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8012afe:	0c2d      	lsrs	r5, r5, #16
 8012b00:	fb02 c505 	mla	r5, r2, r5, ip
 8012b04:	b289      	uxth	r1, r1
 8012b06:	3301      	adds	r3, #1
 8012b08:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8012b0c:	429e      	cmp	r6, r3
 8012b0e:	f840 1b04 	str.w	r1, [r0], #4
 8012b12:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8012b16:	dcec      	bgt.n	8012af2 <__multadd+0x12>
 8012b18:	f1b8 0f00 	cmp.w	r8, #0
 8012b1c:	d022      	beq.n	8012b64 <__multadd+0x84>
 8012b1e:	68a3      	ldr	r3, [r4, #8]
 8012b20:	42b3      	cmp	r3, r6
 8012b22:	dc19      	bgt.n	8012b58 <__multadd+0x78>
 8012b24:	6861      	ldr	r1, [r4, #4]
 8012b26:	4638      	mov	r0, r7
 8012b28:	3101      	adds	r1, #1
 8012b2a:	f7ff ff77 	bl	8012a1c <_Balloc>
 8012b2e:	4605      	mov	r5, r0
 8012b30:	b928      	cbnz	r0, 8012b3e <__multadd+0x5e>
 8012b32:	4602      	mov	r2, r0
 8012b34:	4b0d      	ldr	r3, [pc, #52]	; (8012b6c <__multadd+0x8c>)
 8012b36:	480e      	ldr	r0, [pc, #56]	; (8012b70 <__multadd+0x90>)
 8012b38:	21b5      	movs	r1, #181	; 0xb5
 8012b3a:	f7fc fb2b 	bl	800f194 <__assert_func>
 8012b3e:	6922      	ldr	r2, [r4, #16]
 8012b40:	3202      	adds	r2, #2
 8012b42:	f104 010c 	add.w	r1, r4, #12
 8012b46:	0092      	lsls	r2, r2, #2
 8012b48:	300c      	adds	r0, #12
 8012b4a:	f7fc fb7d 	bl	800f248 <memcpy>
 8012b4e:	4621      	mov	r1, r4
 8012b50:	4638      	mov	r0, r7
 8012b52:	f7ff ffa3 	bl	8012a9c <_Bfree>
 8012b56:	462c      	mov	r4, r5
 8012b58:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8012b5c:	3601      	adds	r6, #1
 8012b5e:	f8c3 8014 	str.w	r8, [r3, #20]
 8012b62:	6126      	str	r6, [r4, #16]
 8012b64:	4620      	mov	r0, r4
 8012b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b6a:	bf00      	nop
 8012b6c:	08015253 	.word	0x08015253
 8012b70:	08015344 	.word	0x08015344

08012b74 <__s2b>:
 8012b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b78:	460c      	mov	r4, r1
 8012b7a:	4615      	mov	r5, r2
 8012b7c:	461f      	mov	r7, r3
 8012b7e:	2209      	movs	r2, #9
 8012b80:	3308      	adds	r3, #8
 8012b82:	4606      	mov	r6, r0
 8012b84:	fb93 f3f2 	sdiv	r3, r3, r2
 8012b88:	2100      	movs	r1, #0
 8012b8a:	2201      	movs	r2, #1
 8012b8c:	429a      	cmp	r2, r3
 8012b8e:	db09      	blt.n	8012ba4 <__s2b+0x30>
 8012b90:	4630      	mov	r0, r6
 8012b92:	f7ff ff43 	bl	8012a1c <_Balloc>
 8012b96:	b940      	cbnz	r0, 8012baa <__s2b+0x36>
 8012b98:	4602      	mov	r2, r0
 8012b9a:	4b19      	ldr	r3, [pc, #100]	; (8012c00 <__s2b+0x8c>)
 8012b9c:	4819      	ldr	r0, [pc, #100]	; (8012c04 <__s2b+0x90>)
 8012b9e:	21ce      	movs	r1, #206	; 0xce
 8012ba0:	f7fc faf8 	bl	800f194 <__assert_func>
 8012ba4:	0052      	lsls	r2, r2, #1
 8012ba6:	3101      	adds	r1, #1
 8012ba8:	e7f0      	b.n	8012b8c <__s2b+0x18>
 8012baa:	9b08      	ldr	r3, [sp, #32]
 8012bac:	6143      	str	r3, [r0, #20]
 8012bae:	2d09      	cmp	r5, #9
 8012bb0:	f04f 0301 	mov.w	r3, #1
 8012bb4:	6103      	str	r3, [r0, #16]
 8012bb6:	dd16      	ble.n	8012be6 <__s2b+0x72>
 8012bb8:	f104 0909 	add.w	r9, r4, #9
 8012bbc:	46c8      	mov	r8, r9
 8012bbe:	442c      	add	r4, r5
 8012bc0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012bc4:	4601      	mov	r1, r0
 8012bc6:	3b30      	subs	r3, #48	; 0x30
 8012bc8:	220a      	movs	r2, #10
 8012bca:	4630      	mov	r0, r6
 8012bcc:	f7ff ff88 	bl	8012ae0 <__multadd>
 8012bd0:	45a0      	cmp	r8, r4
 8012bd2:	d1f5      	bne.n	8012bc0 <__s2b+0x4c>
 8012bd4:	f1a5 0408 	sub.w	r4, r5, #8
 8012bd8:	444c      	add	r4, r9
 8012bda:	1b2d      	subs	r5, r5, r4
 8012bdc:	1963      	adds	r3, r4, r5
 8012bde:	42bb      	cmp	r3, r7
 8012be0:	db04      	blt.n	8012bec <__s2b+0x78>
 8012be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012be6:	340a      	adds	r4, #10
 8012be8:	2509      	movs	r5, #9
 8012bea:	e7f6      	b.n	8012bda <__s2b+0x66>
 8012bec:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012bf0:	4601      	mov	r1, r0
 8012bf2:	3b30      	subs	r3, #48	; 0x30
 8012bf4:	220a      	movs	r2, #10
 8012bf6:	4630      	mov	r0, r6
 8012bf8:	f7ff ff72 	bl	8012ae0 <__multadd>
 8012bfc:	e7ee      	b.n	8012bdc <__s2b+0x68>
 8012bfe:	bf00      	nop
 8012c00:	08015253 	.word	0x08015253
 8012c04:	08015344 	.word	0x08015344

08012c08 <__hi0bits>:
 8012c08:	0c03      	lsrs	r3, r0, #16
 8012c0a:	041b      	lsls	r3, r3, #16
 8012c0c:	b9d3      	cbnz	r3, 8012c44 <__hi0bits+0x3c>
 8012c0e:	0400      	lsls	r0, r0, #16
 8012c10:	2310      	movs	r3, #16
 8012c12:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012c16:	bf04      	itt	eq
 8012c18:	0200      	lsleq	r0, r0, #8
 8012c1a:	3308      	addeq	r3, #8
 8012c1c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012c20:	bf04      	itt	eq
 8012c22:	0100      	lsleq	r0, r0, #4
 8012c24:	3304      	addeq	r3, #4
 8012c26:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012c2a:	bf04      	itt	eq
 8012c2c:	0080      	lsleq	r0, r0, #2
 8012c2e:	3302      	addeq	r3, #2
 8012c30:	2800      	cmp	r0, #0
 8012c32:	db05      	blt.n	8012c40 <__hi0bits+0x38>
 8012c34:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012c38:	f103 0301 	add.w	r3, r3, #1
 8012c3c:	bf08      	it	eq
 8012c3e:	2320      	moveq	r3, #32
 8012c40:	4618      	mov	r0, r3
 8012c42:	4770      	bx	lr
 8012c44:	2300      	movs	r3, #0
 8012c46:	e7e4      	b.n	8012c12 <__hi0bits+0xa>

08012c48 <__lo0bits>:
 8012c48:	6803      	ldr	r3, [r0, #0]
 8012c4a:	f013 0207 	ands.w	r2, r3, #7
 8012c4e:	4601      	mov	r1, r0
 8012c50:	d00b      	beq.n	8012c6a <__lo0bits+0x22>
 8012c52:	07da      	lsls	r2, r3, #31
 8012c54:	d424      	bmi.n	8012ca0 <__lo0bits+0x58>
 8012c56:	0798      	lsls	r0, r3, #30
 8012c58:	bf49      	itett	mi
 8012c5a:	085b      	lsrmi	r3, r3, #1
 8012c5c:	089b      	lsrpl	r3, r3, #2
 8012c5e:	2001      	movmi	r0, #1
 8012c60:	600b      	strmi	r3, [r1, #0]
 8012c62:	bf5c      	itt	pl
 8012c64:	600b      	strpl	r3, [r1, #0]
 8012c66:	2002      	movpl	r0, #2
 8012c68:	4770      	bx	lr
 8012c6a:	b298      	uxth	r0, r3
 8012c6c:	b9b0      	cbnz	r0, 8012c9c <__lo0bits+0x54>
 8012c6e:	0c1b      	lsrs	r3, r3, #16
 8012c70:	2010      	movs	r0, #16
 8012c72:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012c76:	bf04      	itt	eq
 8012c78:	0a1b      	lsreq	r3, r3, #8
 8012c7a:	3008      	addeq	r0, #8
 8012c7c:	071a      	lsls	r2, r3, #28
 8012c7e:	bf04      	itt	eq
 8012c80:	091b      	lsreq	r3, r3, #4
 8012c82:	3004      	addeq	r0, #4
 8012c84:	079a      	lsls	r2, r3, #30
 8012c86:	bf04      	itt	eq
 8012c88:	089b      	lsreq	r3, r3, #2
 8012c8a:	3002      	addeq	r0, #2
 8012c8c:	07da      	lsls	r2, r3, #31
 8012c8e:	d403      	bmi.n	8012c98 <__lo0bits+0x50>
 8012c90:	085b      	lsrs	r3, r3, #1
 8012c92:	f100 0001 	add.w	r0, r0, #1
 8012c96:	d005      	beq.n	8012ca4 <__lo0bits+0x5c>
 8012c98:	600b      	str	r3, [r1, #0]
 8012c9a:	4770      	bx	lr
 8012c9c:	4610      	mov	r0, r2
 8012c9e:	e7e8      	b.n	8012c72 <__lo0bits+0x2a>
 8012ca0:	2000      	movs	r0, #0
 8012ca2:	4770      	bx	lr
 8012ca4:	2020      	movs	r0, #32
 8012ca6:	4770      	bx	lr

08012ca8 <__i2b>:
 8012ca8:	b510      	push	{r4, lr}
 8012caa:	460c      	mov	r4, r1
 8012cac:	2101      	movs	r1, #1
 8012cae:	f7ff feb5 	bl	8012a1c <_Balloc>
 8012cb2:	4602      	mov	r2, r0
 8012cb4:	b928      	cbnz	r0, 8012cc2 <__i2b+0x1a>
 8012cb6:	4b05      	ldr	r3, [pc, #20]	; (8012ccc <__i2b+0x24>)
 8012cb8:	4805      	ldr	r0, [pc, #20]	; (8012cd0 <__i2b+0x28>)
 8012cba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012cbe:	f7fc fa69 	bl	800f194 <__assert_func>
 8012cc2:	2301      	movs	r3, #1
 8012cc4:	6144      	str	r4, [r0, #20]
 8012cc6:	6103      	str	r3, [r0, #16]
 8012cc8:	bd10      	pop	{r4, pc}
 8012cca:	bf00      	nop
 8012ccc:	08015253 	.word	0x08015253
 8012cd0:	08015344 	.word	0x08015344

08012cd4 <__multiply>:
 8012cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cd8:	4614      	mov	r4, r2
 8012cda:	690a      	ldr	r2, [r1, #16]
 8012cdc:	6923      	ldr	r3, [r4, #16]
 8012cde:	429a      	cmp	r2, r3
 8012ce0:	bfb8      	it	lt
 8012ce2:	460b      	movlt	r3, r1
 8012ce4:	460d      	mov	r5, r1
 8012ce6:	bfbc      	itt	lt
 8012ce8:	4625      	movlt	r5, r4
 8012cea:	461c      	movlt	r4, r3
 8012cec:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8012cf0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012cf4:	68ab      	ldr	r3, [r5, #8]
 8012cf6:	6869      	ldr	r1, [r5, #4]
 8012cf8:	eb0a 0709 	add.w	r7, sl, r9
 8012cfc:	42bb      	cmp	r3, r7
 8012cfe:	b085      	sub	sp, #20
 8012d00:	bfb8      	it	lt
 8012d02:	3101      	addlt	r1, #1
 8012d04:	f7ff fe8a 	bl	8012a1c <_Balloc>
 8012d08:	b930      	cbnz	r0, 8012d18 <__multiply+0x44>
 8012d0a:	4602      	mov	r2, r0
 8012d0c:	4b42      	ldr	r3, [pc, #264]	; (8012e18 <__multiply+0x144>)
 8012d0e:	4843      	ldr	r0, [pc, #268]	; (8012e1c <__multiply+0x148>)
 8012d10:	f240 115d 	movw	r1, #349	; 0x15d
 8012d14:	f7fc fa3e 	bl	800f194 <__assert_func>
 8012d18:	f100 0614 	add.w	r6, r0, #20
 8012d1c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8012d20:	4633      	mov	r3, r6
 8012d22:	2200      	movs	r2, #0
 8012d24:	4543      	cmp	r3, r8
 8012d26:	d31e      	bcc.n	8012d66 <__multiply+0x92>
 8012d28:	f105 0c14 	add.w	ip, r5, #20
 8012d2c:	f104 0314 	add.w	r3, r4, #20
 8012d30:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8012d34:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8012d38:	9202      	str	r2, [sp, #8]
 8012d3a:	ebac 0205 	sub.w	r2, ip, r5
 8012d3e:	3a15      	subs	r2, #21
 8012d40:	f022 0203 	bic.w	r2, r2, #3
 8012d44:	3204      	adds	r2, #4
 8012d46:	f105 0115 	add.w	r1, r5, #21
 8012d4a:	458c      	cmp	ip, r1
 8012d4c:	bf38      	it	cc
 8012d4e:	2204      	movcc	r2, #4
 8012d50:	9201      	str	r2, [sp, #4]
 8012d52:	9a02      	ldr	r2, [sp, #8]
 8012d54:	9303      	str	r3, [sp, #12]
 8012d56:	429a      	cmp	r2, r3
 8012d58:	d808      	bhi.n	8012d6c <__multiply+0x98>
 8012d5a:	2f00      	cmp	r7, #0
 8012d5c:	dc55      	bgt.n	8012e0a <__multiply+0x136>
 8012d5e:	6107      	str	r7, [r0, #16]
 8012d60:	b005      	add	sp, #20
 8012d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d66:	f843 2b04 	str.w	r2, [r3], #4
 8012d6a:	e7db      	b.n	8012d24 <__multiply+0x50>
 8012d6c:	f8b3 a000 	ldrh.w	sl, [r3]
 8012d70:	f1ba 0f00 	cmp.w	sl, #0
 8012d74:	d020      	beq.n	8012db8 <__multiply+0xe4>
 8012d76:	f105 0e14 	add.w	lr, r5, #20
 8012d7a:	46b1      	mov	r9, r6
 8012d7c:	2200      	movs	r2, #0
 8012d7e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8012d82:	f8d9 b000 	ldr.w	fp, [r9]
 8012d86:	b2a1      	uxth	r1, r4
 8012d88:	fa1f fb8b 	uxth.w	fp, fp
 8012d8c:	fb0a b101 	mla	r1, sl, r1, fp
 8012d90:	4411      	add	r1, r2
 8012d92:	f8d9 2000 	ldr.w	r2, [r9]
 8012d96:	0c24      	lsrs	r4, r4, #16
 8012d98:	0c12      	lsrs	r2, r2, #16
 8012d9a:	fb0a 2404 	mla	r4, sl, r4, r2
 8012d9e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8012da2:	b289      	uxth	r1, r1
 8012da4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8012da8:	45f4      	cmp	ip, lr
 8012daa:	f849 1b04 	str.w	r1, [r9], #4
 8012dae:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8012db2:	d8e4      	bhi.n	8012d7e <__multiply+0xaa>
 8012db4:	9901      	ldr	r1, [sp, #4]
 8012db6:	5072      	str	r2, [r6, r1]
 8012db8:	9a03      	ldr	r2, [sp, #12]
 8012dba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012dbe:	3304      	adds	r3, #4
 8012dc0:	f1b9 0f00 	cmp.w	r9, #0
 8012dc4:	d01f      	beq.n	8012e06 <__multiply+0x132>
 8012dc6:	6834      	ldr	r4, [r6, #0]
 8012dc8:	f105 0114 	add.w	r1, r5, #20
 8012dcc:	46b6      	mov	lr, r6
 8012dce:	f04f 0a00 	mov.w	sl, #0
 8012dd2:	880a      	ldrh	r2, [r1, #0]
 8012dd4:	f8be b002 	ldrh.w	fp, [lr, #2]
 8012dd8:	fb09 b202 	mla	r2, r9, r2, fp
 8012ddc:	4492      	add	sl, r2
 8012dde:	b2a4      	uxth	r4, r4
 8012de0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8012de4:	f84e 4b04 	str.w	r4, [lr], #4
 8012de8:	f851 4b04 	ldr.w	r4, [r1], #4
 8012dec:	f8be 2000 	ldrh.w	r2, [lr]
 8012df0:	0c24      	lsrs	r4, r4, #16
 8012df2:	fb09 2404 	mla	r4, r9, r4, r2
 8012df6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8012dfa:	458c      	cmp	ip, r1
 8012dfc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012e00:	d8e7      	bhi.n	8012dd2 <__multiply+0xfe>
 8012e02:	9a01      	ldr	r2, [sp, #4]
 8012e04:	50b4      	str	r4, [r6, r2]
 8012e06:	3604      	adds	r6, #4
 8012e08:	e7a3      	b.n	8012d52 <__multiply+0x7e>
 8012e0a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d1a5      	bne.n	8012d5e <__multiply+0x8a>
 8012e12:	3f01      	subs	r7, #1
 8012e14:	e7a1      	b.n	8012d5a <__multiply+0x86>
 8012e16:	bf00      	nop
 8012e18:	08015253 	.word	0x08015253
 8012e1c:	08015344 	.word	0x08015344

08012e20 <__pow5mult>:
 8012e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e24:	4615      	mov	r5, r2
 8012e26:	f012 0203 	ands.w	r2, r2, #3
 8012e2a:	4606      	mov	r6, r0
 8012e2c:	460f      	mov	r7, r1
 8012e2e:	d007      	beq.n	8012e40 <__pow5mult+0x20>
 8012e30:	4c25      	ldr	r4, [pc, #148]	; (8012ec8 <__pow5mult+0xa8>)
 8012e32:	3a01      	subs	r2, #1
 8012e34:	2300      	movs	r3, #0
 8012e36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012e3a:	f7ff fe51 	bl	8012ae0 <__multadd>
 8012e3e:	4607      	mov	r7, r0
 8012e40:	10ad      	asrs	r5, r5, #2
 8012e42:	d03d      	beq.n	8012ec0 <__pow5mult+0xa0>
 8012e44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012e46:	b97c      	cbnz	r4, 8012e68 <__pow5mult+0x48>
 8012e48:	2010      	movs	r0, #16
 8012e4a:	f7ff fdb3 	bl	80129b4 <malloc>
 8012e4e:	4602      	mov	r2, r0
 8012e50:	6270      	str	r0, [r6, #36]	; 0x24
 8012e52:	b928      	cbnz	r0, 8012e60 <__pow5mult+0x40>
 8012e54:	4b1d      	ldr	r3, [pc, #116]	; (8012ecc <__pow5mult+0xac>)
 8012e56:	481e      	ldr	r0, [pc, #120]	; (8012ed0 <__pow5mult+0xb0>)
 8012e58:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012e5c:	f7fc f99a 	bl	800f194 <__assert_func>
 8012e60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012e64:	6004      	str	r4, [r0, #0]
 8012e66:	60c4      	str	r4, [r0, #12]
 8012e68:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012e6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012e70:	b94c      	cbnz	r4, 8012e86 <__pow5mult+0x66>
 8012e72:	f240 2171 	movw	r1, #625	; 0x271
 8012e76:	4630      	mov	r0, r6
 8012e78:	f7ff ff16 	bl	8012ca8 <__i2b>
 8012e7c:	2300      	movs	r3, #0
 8012e7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8012e82:	4604      	mov	r4, r0
 8012e84:	6003      	str	r3, [r0, #0]
 8012e86:	f04f 0900 	mov.w	r9, #0
 8012e8a:	07eb      	lsls	r3, r5, #31
 8012e8c:	d50a      	bpl.n	8012ea4 <__pow5mult+0x84>
 8012e8e:	4639      	mov	r1, r7
 8012e90:	4622      	mov	r2, r4
 8012e92:	4630      	mov	r0, r6
 8012e94:	f7ff ff1e 	bl	8012cd4 <__multiply>
 8012e98:	4639      	mov	r1, r7
 8012e9a:	4680      	mov	r8, r0
 8012e9c:	4630      	mov	r0, r6
 8012e9e:	f7ff fdfd 	bl	8012a9c <_Bfree>
 8012ea2:	4647      	mov	r7, r8
 8012ea4:	106d      	asrs	r5, r5, #1
 8012ea6:	d00b      	beq.n	8012ec0 <__pow5mult+0xa0>
 8012ea8:	6820      	ldr	r0, [r4, #0]
 8012eaa:	b938      	cbnz	r0, 8012ebc <__pow5mult+0x9c>
 8012eac:	4622      	mov	r2, r4
 8012eae:	4621      	mov	r1, r4
 8012eb0:	4630      	mov	r0, r6
 8012eb2:	f7ff ff0f 	bl	8012cd4 <__multiply>
 8012eb6:	6020      	str	r0, [r4, #0]
 8012eb8:	f8c0 9000 	str.w	r9, [r0]
 8012ebc:	4604      	mov	r4, r0
 8012ebe:	e7e4      	b.n	8012e8a <__pow5mult+0x6a>
 8012ec0:	4638      	mov	r0, r7
 8012ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ec6:	bf00      	nop
 8012ec8:	08015498 	.word	0x08015498
 8012ecc:	080151dd 	.word	0x080151dd
 8012ed0:	08015344 	.word	0x08015344

08012ed4 <__lshift>:
 8012ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ed8:	460c      	mov	r4, r1
 8012eda:	6849      	ldr	r1, [r1, #4]
 8012edc:	6923      	ldr	r3, [r4, #16]
 8012ede:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012ee2:	68a3      	ldr	r3, [r4, #8]
 8012ee4:	4607      	mov	r7, r0
 8012ee6:	4691      	mov	r9, r2
 8012ee8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012eec:	f108 0601 	add.w	r6, r8, #1
 8012ef0:	42b3      	cmp	r3, r6
 8012ef2:	db0b      	blt.n	8012f0c <__lshift+0x38>
 8012ef4:	4638      	mov	r0, r7
 8012ef6:	f7ff fd91 	bl	8012a1c <_Balloc>
 8012efa:	4605      	mov	r5, r0
 8012efc:	b948      	cbnz	r0, 8012f12 <__lshift+0x3e>
 8012efe:	4602      	mov	r2, r0
 8012f00:	4b28      	ldr	r3, [pc, #160]	; (8012fa4 <__lshift+0xd0>)
 8012f02:	4829      	ldr	r0, [pc, #164]	; (8012fa8 <__lshift+0xd4>)
 8012f04:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012f08:	f7fc f944 	bl	800f194 <__assert_func>
 8012f0c:	3101      	adds	r1, #1
 8012f0e:	005b      	lsls	r3, r3, #1
 8012f10:	e7ee      	b.n	8012ef0 <__lshift+0x1c>
 8012f12:	2300      	movs	r3, #0
 8012f14:	f100 0114 	add.w	r1, r0, #20
 8012f18:	f100 0210 	add.w	r2, r0, #16
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	4553      	cmp	r3, sl
 8012f20:	db33      	blt.n	8012f8a <__lshift+0xb6>
 8012f22:	6920      	ldr	r0, [r4, #16]
 8012f24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012f28:	f104 0314 	add.w	r3, r4, #20
 8012f2c:	f019 091f 	ands.w	r9, r9, #31
 8012f30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012f34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012f38:	d02b      	beq.n	8012f92 <__lshift+0xbe>
 8012f3a:	f1c9 0e20 	rsb	lr, r9, #32
 8012f3e:	468a      	mov	sl, r1
 8012f40:	2200      	movs	r2, #0
 8012f42:	6818      	ldr	r0, [r3, #0]
 8012f44:	fa00 f009 	lsl.w	r0, r0, r9
 8012f48:	4302      	orrs	r2, r0
 8012f4a:	f84a 2b04 	str.w	r2, [sl], #4
 8012f4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f52:	459c      	cmp	ip, r3
 8012f54:	fa22 f20e 	lsr.w	r2, r2, lr
 8012f58:	d8f3      	bhi.n	8012f42 <__lshift+0x6e>
 8012f5a:	ebac 0304 	sub.w	r3, ip, r4
 8012f5e:	3b15      	subs	r3, #21
 8012f60:	f023 0303 	bic.w	r3, r3, #3
 8012f64:	3304      	adds	r3, #4
 8012f66:	f104 0015 	add.w	r0, r4, #21
 8012f6a:	4584      	cmp	ip, r0
 8012f6c:	bf38      	it	cc
 8012f6e:	2304      	movcc	r3, #4
 8012f70:	50ca      	str	r2, [r1, r3]
 8012f72:	b10a      	cbz	r2, 8012f78 <__lshift+0xa4>
 8012f74:	f108 0602 	add.w	r6, r8, #2
 8012f78:	3e01      	subs	r6, #1
 8012f7a:	4638      	mov	r0, r7
 8012f7c:	612e      	str	r6, [r5, #16]
 8012f7e:	4621      	mov	r1, r4
 8012f80:	f7ff fd8c 	bl	8012a9c <_Bfree>
 8012f84:	4628      	mov	r0, r5
 8012f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8012f8e:	3301      	adds	r3, #1
 8012f90:	e7c5      	b.n	8012f1e <__lshift+0x4a>
 8012f92:	3904      	subs	r1, #4
 8012f94:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f98:	f841 2f04 	str.w	r2, [r1, #4]!
 8012f9c:	459c      	cmp	ip, r3
 8012f9e:	d8f9      	bhi.n	8012f94 <__lshift+0xc0>
 8012fa0:	e7ea      	b.n	8012f78 <__lshift+0xa4>
 8012fa2:	bf00      	nop
 8012fa4:	08015253 	.word	0x08015253
 8012fa8:	08015344 	.word	0x08015344

08012fac <__mcmp>:
 8012fac:	b530      	push	{r4, r5, lr}
 8012fae:	6902      	ldr	r2, [r0, #16]
 8012fb0:	690c      	ldr	r4, [r1, #16]
 8012fb2:	1b12      	subs	r2, r2, r4
 8012fb4:	d10e      	bne.n	8012fd4 <__mcmp+0x28>
 8012fb6:	f100 0314 	add.w	r3, r0, #20
 8012fba:	3114      	adds	r1, #20
 8012fbc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012fc0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012fc4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012fc8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012fcc:	42a5      	cmp	r5, r4
 8012fce:	d003      	beq.n	8012fd8 <__mcmp+0x2c>
 8012fd0:	d305      	bcc.n	8012fde <__mcmp+0x32>
 8012fd2:	2201      	movs	r2, #1
 8012fd4:	4610      	mov	r0, r2
 8012fd6:	bd30      	pop	{r4, r5, pc}
 8012fd8:	4283      	cmp	r3, r0
 8012fda:	d3f3      	bcc.n	8012fc4 <__mcmp+0x18>
 8012fdc:	e7fa      	b.n	8012fd4 <__mcmp+0x28>
 8012fde:	f04f 32ff 	mov.w	r2, #4294967295
 8012fe2:	e7f7      	b.n	8012fd4 <__mcmp+0x28>

08012fe4 <__mdiff>:
 8012fe4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fe8:	460c      	mov	r4, r1
 8012fea:	4606      	mov	r6, r0
 8012fec:	4611      	mov	r1, r2
 8012fee:	4620      	mov	r0, r4
 8012ff0:	4617      	mov	r7, r2
 8012ff2:	f7ff ffdb 	bl	8012fac <__mcmp>
 8012ff6:	1e05      	subs	r5, r0, #0
 8012ff8:	d110      	bne.n	801301c <__mdiff+0x38>
 8012ffa:	4629      	mov	r1, r5
 8012ffc:	4630      	mov	r0, r6
 8012ffe:	f7ff fd0d 	bl	8012a1c <_Balloc>
 8013002:	b930      	cbnz	r0, 8013012 <__mdiff+0x2e>
 8013004:	4b39      	ldr	r3, [pc, #228]	; (80130ec <__mdiff+0x108>)
 8013006:	4602      	mov	r2, r0
 8013008:	f240 2132 	movw	r1, #562	; 0x232
 801300c:	4838      	ldr	r0, [pc, #224]	; (80130f0 <__mdiff+0x10c>)
 801300e:	f7fc f8c1 	bl	800f194 <__assert_func>
 8013012:	2301      	movs	r3, #1
 8013014:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013018:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801301c:	bfa4      	itt	ge
 801301e:	463b      	movge	r3, r7
 8013020:	4627      	movge	r7, r4
 8013022:	4630      	mov	r0, r6
 8013024:	6879      	ldr	r1, [r7, #4]
 8013026:	bfa6      	itte	ge
 8013028:	461c      	movge	r4, r3
 801302a:	2500      	movge	r5, #0
 801302c:	2501      	movlt	r5, #1
 801302e:	f7ff fcf5 	bl	8012a1c <_Balloc>
 8013032:	b920      	cbnz	r0, 801303e <__mdiff+0x5a>
 8013034:	4b2d      	ldr	r3, [pc, #180]	; (80130ec <__mdiff+0x108>)
 8013036:	4602      	mov	r2, r0
 8013038:	f44f 7110 	mov.w	r1, #576	; 0x240
 801303c:	e7e6      	b.n	801300c <__mdiff+0x28>
 801303e:	693e      	ldr	r6, [r7, #16]
 8013040:	60c5      	str	r5, [r0, #12]
 8013042:	6925      	ldr	r5, [r4, #16]
 8013044:	f107 0114 	add.w	r1, r7, #20
 8013048:	f104 0914 	add.w	r9, r4, #20
 801304c:	f100 0e14 	add.w	lr, r0, #20
 8013050:	f107 0210 	add.w	r2, r7, #16
 8013054:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8013058:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801305c:	46f2      	mov	sl, lr
 801305e:	2700      	movs	r7, #0
 8013060:	f859 3b04 	ldr.w	r3, [r9], #4
 8013064:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013068:	fa1f f883 	uxth.w	r8, r3
 801306c:	fa17 f78b 	uxtah	r7, r7, fp
 8013070:	0c1b      	lsrs	r3, r3, #16
 8013072:	eba7 0808 	sub.w	r8, r7, r8
 8013076:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801307a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801307e:	fa1f f888 	uxth.w	r8, r8
 8013082:	141f      	asrs	r7, r3, #16
 8013084:	454d      	cmp	r5, r9
 8013086:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801308a:	f84a 3b04 	str.w	r3, [sl], #4
 801308e:	d8e7      	bhi.n	8013060 <__mdiff+0x7c>
 8013090:	1b2b      	subs	r3, r5, r4
 8013092:	3b15      	subs	r3, #21
 8013094:	f023 0303 	bic.w	r3, r3, #3
 8013098:	3304      	adds	r3, #4
 801309a:	3415      	adds	r4, #21
 801309c:	42a5      	cmp	r5, r4
 801309e:	bf38      	it	cc
 80130a0:	2304      	movcc	r3, #4
 80130a2:	4419      	add	r1, r3
 80130a4:	4473      	add	r3, lr
 80130a6:	469e      	mov	lr, r3
 80130a8:	460d      	mov	r5, r1
 80130aa:	4565      	cmp	r5, ip
 80130ac:	d30e      	bcc.n	80130cc <__mdiff+0xe8>
 80130ae:	f10c 0203 	add.w	r2, ip, #3
 80130b2:	1a52      	subs	r2, r2, r1
 80130b4:	f022 0203 	bic.w	r2, r2, #3
 80130b8:	3903      	subs	r1, #3
 80130ba:	458c      	cmp	ip, r1
 80130bc:	bf38      	it	cc
 80130be:	2200      	movcc	r2, #0
 80130c0:	441a      	add	r2, r3
 80130c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80130c6:	b17b      	cbz	r3, 80130e8 <__mdiff+0x104>
 80130c8:	6106      	str	r6, [r0, #16]
 80130ca:	e7a5      	b.n	8013018 <__mdiff+0x34>
 80130cc:	f855 8b04 	ldr.w	r8, [r5], #4
 80130d0:	fa17 f488 	uxtah	r4, r7, r8
 80130d4:	1422      	asrs	r2, r4, #16
 80130d6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80130da:	b2a4      	uxth	r4, r4
 80130dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80130e0:	f84e 4b04 	str.w	r4, [lr], #4
 80130e4:	1417      	asrs	r7, r2, #16
 80130e6:	e7e0      	b.n	80130aa <__mdiff+0xc6>
 80130e8:	3e01      	subs	r6, #1
 80130ea:	e7ea      	b.n	80130c2 <__mdiff+0xde>
 80130ec:	08015253 	.word	0x08015253
 80130f0:	08015344 	.word	0x08015344

080130f4 <__ulp>:
 80130f4:	b082      	sub	sp, #8
 80130f6:	ed8d 0b00 	vstr	d0, [sp]
 80130fa:	9b01      	ldr	r3, [sp, #4]
 80130fc:	4912      	ldr	r1, [pc, #72]	; (8013148 <__ulp+0x54>)
 80130fe:	4019      	ands	r1, r3
 8013100:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8013104:	2900      	cmp	r1, #0
 8013106:	dd05      	ble.n	8013114 <__ulp+0x20>
 8013108:	2200      	movs	r2, #0
 801310a:	460b      	mov	r3, r1
 801310c:	ec43 2b10 	vmov	d0, r2, r3
 8013110:	b002      	add	sp, #8
 8013112:	4770      	bx	lr
 8013114:	4249      	negs	r1, r1
 8013116:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801311a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801311e:	f04f 0200 	mov.w	r2, #0
 8013122:	f04f 0300 	mov.w	r3, #0
 8013126:	da04      	bge.n	8013132 <__ulp+0x3e>
 8013128:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801312c:	fa41 f300 	asr.w	r3, r1, r0
 8013130:	e7ec      	b.n	801310c <__ulp+0x18>
 8013132:	f1a0 0114 	sub.w	r1, r0, #20
 8013136:	291e      	cmp	r1, #30
 8013138:	bfda      	itte	le
 801313a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801313e:	fa20 f101 	lsrle.w	r1, r0, r1
 8013142:	2101      	movgt	r1, #1
 8013144:	460a      	mov	r2, r1
 8013146:	e7e1      	b.n	801310c <__ulp+0x18>
 8013148:	7ff00000 	.word	0x7ff00000

0801314c <__b2d>:
 801314c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801314e:	6905      	ldr	r5, [r0, #16]
 8013150:	f100 0714 	add.w	r7, r0, #20
 8013154:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013158:	1f2e      	subs	r6, r5, #4
 801315a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801315e:	4620      	mov	r0, r4
 8013160:	f7ff fd52 	bl	8012c08 <__hi0bits>
 8013164:	f1c0 0320 	rsb	r3, r0, #32
 8013168:	280a      	cmp	r0, #10
 801316a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80131e8 <__b2d+0x9c>
 801316e:	600b      	str	r3, [r1, #0]
 8013170:	dc14      	bgt.n	801319c <__b2d+0x50>
 8013172:	f1c0 0e0b 	rsb	lr, r0, #11
 8013176:	fa24 f10e 	lsr.w	r1, r4, lr
 801317a:	42b7      	cmp	r7, r6
 801317c:	ea41 030c 	orr.w	r3, r1, ip
 8013180:	bf34      	ite	cc
 8013182:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013186:	2100      	movcs	r1, #0
 8013188:	3015      	adds	r0, #21
 801318a:	fa04 f000 	lsl.w	r0, r4, r0
 801318e:	fa21 f10e 	lsr.w	r1, r1, lr
 8013192:	ea40 0201 	orr.w	r2, r0, r1
 8013196:	ec43 2b10 	vmov	d0, r2, r3
 801319a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801319c:	42b7      	cmp	r7, r6
 801319e:	bf3a      	itte	cc
 80131a0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80131a4:	f1a5 0608 	subcc.w	r6, r5, #8
 80131a8:	2100      	movcs	r1, #0
 80131aa:	380b      	subs	r0, #11
 80131ac:	d017      	beq.n	80131de <__b2d+0x92>
 80131ae:	f1c0 0c20 	rsb	ip, r0, #32
 80131b2:	fa04 f500 	lsl.w	r5, r4, r0
 80131b6:	42be      	cmp	r6, r7
 80131b8:	fa21 f40c 	lsr.w	r4, r1, ip
 80131bc:	ea45 0504 	orr.w	r5, r5, r4
 80131c0:	bf8c      	ite	hi
 80131c2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80131c6:	2400      	movls	r4, #0
 80131c8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80131cc:	fa01 f000 	lsl.w	r0, r1, r0
 80131d0:	fa24 f40c 	lsr.w	r4, r4, ip
 80131d4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80131d8:	ea40 0204 	orr.w	r2, r0, r4
 80131dc:	e7db      	b.n	8013196 <__b2d+0x4a>
 80131de:	ea44 030c 	orr.w	r3, r4, ip
 80131e2:	460a      	mov	r2, r1
 80131e4:	e7d7      	b.n	8013196 <__b2d+0x4a>
 80131e6:	bf00      	nop
 80131e8:	3ff00000 	.word	0x3ff00000

080131ec <__d2b>:
 80131ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80131f0:	4689      	mov	r9, r1
 80131f2:	2101      	movs	r1, #1
 80131f4:	ec57 6b10 	vmov	r6, r7, d0
 80131f8:	4690      	mov	r8, r2
 80131fa:	f7ff fc0f 	bl	8012a1c <_Balloc>
 80131fe:	4604      	mov	r4, r0
 8013200:	b930      	cbnz	r0, 8013210 <__d2b+0x24>
 8013202:	4602      	mov	r2, r0
 8013204:	4b25      	ldr	r3, [pc, #148]	; (801329c <__d2b+0xb0>)
 8013206:	4826      	ldr	r0, [pc, #152]	; (80132a0 <__d2b+0xb4>)
 8013208:	f240 310a 	movw	r1, #778	; 0x30a
 801320c:	f7fb ffc2 	bl	800f194 <__assert_func>
 8013210:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013214:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013218:	bb35      	cbnz	r5, 8013268 <__d2b+0x7c>
 801321a:	2e00      	cmp	r6, #0
 801321c:	9301      	str	r3, [sp, #4]
 801321e:	d028      	beq.n	8013272 <__d2b+0x86>
 8013220:	4668      	mov	r0, sp
 8013222:	9600      	str	r6, [sp, #0]
 8013224:	f7ff fd10 	bl	8012c48 <__lo0bits>
 8013228:	9900      	ldr	r1, [sp, #0]
 801322a:	b300      	cbz	r0, 801326e <__d2b+0x82>
 801322c:	9a01      	ldr	r2, [sp, #4]
 801322e:	f1c0 0320 	rsb	r3, r0, #32
 8013232:	fa02 f303 	lsl.w	r3, r2, r3
 8013236:	430b      	orrs	r3, r1
 8013238:	40c2      	lsrs	r2, r0
 801323a:	6163      	str	r3, [r4, #20]
 801323c:	9201      	str	r2, [sp, #4]
 801323e:	9b01      	ldr	r3, [sp, #4]
 8013240:	61a3      	str	r3, [r4, #24]
 8013242:	2b00      	cmp	r3, #0
 8013244:	bf14      	ite	ne
 8013246:	2202      	movne	r2, #2
 8013248:	2201      	moveq	r2, #1
 801324a:	6122      	str	r2, [r4, #16]
 801324c:	b1d5      	cbz	r5, 8013284 <__d2b+0x98>
 801324e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013252:	4405      	add	r5, r0
 8013254:	f8c9 5000 	str.w	r5, [r9]
 8013258:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801325c:	f8c8 0000 	str.w	r0, [r8]
 8013260:	4620      	mov	r0, r4
 8013262:	b003      	add	sp, #12
 8013264:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013268:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801326c:	e7d5      	b.n	801321a <__d2b+0x2e>
 801326e:	6161      	str	r1, [r4, #20]
 8013270:	e7e5      	b.n	801323e <__d2b+0x52>
 8013272:	a801      	add	r0, sp, #4
 8013274:	f7ff fce8 	bl	8012c48 <__lo0bits>
 8013278:	9b01      	ldr	r3, [sp, #4]
 801327a:	6163      	str	r3, [r4, #20]
 801327c:	2201      	movs	r2, #1
 801327e:	6122      	str	r2, [r4, #16]
 8013280:	3020      	adds	r0, #32
 8013282:	e7e3      	b.n	801324c <__d2b+0x60>
 8013284:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013288:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801328c:	f8c9 0000 	str.w	r0, [r9]
 8013290:	6918      	ldr	r0, [r3, #16]
 8013292:	f7ff fcb9 	bl	8012c08 <__hi0bits>
 8013296:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801329a:	e7df      	b.n	801325c <__d2b+0x70>
 801329c:	08015253 	.word	0x08015253
 80132a0:	08015344 	.word	0x08015344

080132a4 <__ratio>:
 80132a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132a8:	4688      	mov	r8, r1
 80132aa:	4669      	mov	r1, sp
 80132ac:	4681      	mov	r9, r0
 80132ae:	f7ff ff4d 	bl	801314c <__b2d>
 80132b2:	a901      	add	r1, sp, #4
 80132b4:	4640      	mov	r0, r8
 80132b6:	ec55 4b10 	vmov	r4, r5, d0
 80132ba:	f7ff ff47 	bl	801314c <__b2d>
 80132be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80132c2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80132c6:	eba3 0c02 	sub.w	ip, r3, r2
 80132ca:	e9dd 3200 	ldrd	r3, r2, [sp]
 80132ce:	1a9b      	subs	r3, r3, r2
 80132d0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80132d4:	ec51 0b10 	vmov	r0, r1, d0
 80132d8:	2b00      	cmp	r3, #0
 80132da:	bfd6      	itet	le
 80132dc:	460a      	movle	r2, r1
 80132de:	462a      	movgt	r2, r5
 80132e0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80132e4:	468b      	mov	fp, r1
 80132e6:	462f      	mov	r7, r5
 80132e8:	bfd4      	ite	le
 80132ea:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80132ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80132f2:	4620      	mov	r0, r4
 80132f4:	ee10 2a10 	vmov	r2, s0
 80132f8:	465b      	mov	r3, fp
 80132fa:	4639      	mov	r1, r7
 80132fc:	f7ed fabe 	bl	800087c <__aeabi_ddiv>
 8013300:	ec41 0b10 	vmov	d0, r0, r1
 8013304:	b003      	add	sp, #12
 8013306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801330a <__copybits>:
 801330a:	3901      	subs	r1, #1
 801330c:	b570      	push	{r4, r5, r6, lr}
 801330e:	1149      	asrs	r1, r1, #5
 8013310:	6914      	ldr	r4, [r2, #16]
 8013312:	3101      	adds	r1, #1
 8013314:	f102 0314 	add.w	r3, r2, #20
 8013318:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801331c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013320:	1f05      	subs	r5, r0, #4
 8013322:	42a3      	cmp	r3, r4
 8013324:	d30c      	bcc.n	8013340 <__copybits+0x36>
 8013326:	1aa3      	subs	r3, r4, r2
 8013328:	3b11      	subs	r3, #17
 801332a:	f023 0303 	bic.w	r3, r3, #3
 801332e:	3211      	adds	r2, #17
 8013330:	42a2      	cmp	r2, r4
 8013332:	bf88      	it	hi
 8013334:	2300      	movhi	r3, #0
 8013336:	4418      	add	r0, r3
 8013338:	2300      	movs	r3, #0
 801333a:	4288      	cmp	r0, r1
 801333c:	d305      	bcc.n	801334a <__copybits+0x40>
 801333e:	bd70      	pop	{r4, r5, r6, pc}
 8013340:	f853 6b04 	ldr.w	r6, [r3], #4
 8013344:	f845 6f04 	str.w	r6, [r5, #4]!
 8013348:	e7eb      	b.n	8013322 <__copybits+0x18>
 801334a:	f840 3b04 	str.w	r3, [r0], #4
 801334e:	e7f4      	b.n	801333a <__copybits+0x30>

08013350 <__any_on>:
 8013350:	f100 0214 	add.w	r2, r0, #20
 8013354:	6900      	ldr	r0, [r0, #16]
 8013356:	114b      	asrs	r3, r1, #5
 8013358:	4298      	cmp	r0, r3
 801335a:	b510      	push	{r4, lr}
 801335c:	db11      	blt.n	8013382 <__any_on+0x32>
 801335e:	dd0a      	ble.n	8013376 <__any_on+0x26>
 8013360:	f011 011f 	ands.w	r1, r1, #31
 8013364:	d007      	beq.n	8013376 <__any_on+0x26>
 8013366:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801336a:	fa24 f001 	lsr.w	r0, r4, r1
 801336e:	fa00 f101 	lsl.w	r1, r0, r1
 8013372:	428c      	cmp	r4, r1
 8013374:	d10b      	bne.n	801338e <__any_on+0x3e>
 8013376:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801337a:	4293      	cmp	r3, r2
 801337c:	d803      	bhi.n	8013386 <__any_on+0x36>
 801337e:	2000      	movs	r0, #0
 8013380:	bd10      	pop	{r4, pc}
 8013382:	4603      	mov	r3, r0
 8013384:	e7f7      	b.n	8013376 <__any_on+0x26>
 8013386:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801338a:	2900      	cmp	r1, #0
 801338c:	d0f5      	beq.n	801337a <__any_on+0x2a>
 801338e:	2001      	movs	r0, #1
 8013390:	e7f6      	b.n	8013380 <__any_on+0x30>

08013392 <_calloc_r>:
 8013392:	b513      	push	{r0, r1, r4, lr}
 8013394:	434a      	muls	r2, r1
 8013396:	4611      	mov	r1, r2
 8013398:	9201      	str	r2, [sp, #4]
 801339a:	f000 f859 	bl	8013450 <_malloc_r>
 801339e:	4604      	mov	r4, r0
 80133a0:	b118      	cbz	r0, 80133aa <_calloc_r+0x18>
 80133a2:	9a01      	ldr	r2, [sp, #4]
 80133a4:	2100      	movs	r1, #0
 80133a6:	f7fb ff5d 	bl	800f264 <memset>
 80133aa:	4620      	mov	r0, r4
 80133ac:	b002      	add	sp, #8
 80133ae:	bd10      	pop	{r4, pc}

080133b0 <_free_r>:
 80133b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80133b2:	2900      	cmp	r1, #0
 80133b4:	d048      	beq.n	8013448 <_free_r+0x98>
 80133b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80133ba:	9001      	str	r0, [sp, #4]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	f1a1 0404 	sub.w	r4, r1, #4
 80133c2:	bfb8      	it	lt
 80133c4:	18e4      	addlt	r4, r4, r3
 80133c6:	f000 fb33 	bl	8013a30 <__malloc_lock>
 80133ca:	4a20      	ldr	r2, [pc, #128]	; (801344c <_free_r+0x9c>)
 80133cc:	9801      	ldr	r0, [sp, #4]
 80133ce:	6813      	ldr	r3, [r2, #0]
 80133d0:	4615      	mov	r5, r2
 80133d2:	b933      	cbnz	r3, 80133e2 <_free_r+0x32>
 80133d4:	6063      	str	r3, [r4, #4]
 80133d6:	6014      	str	r4, [r2, #0]
 80133d8:	b003      	add	sp, #12
 80133da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80133de:	f000 bb2d 	b.w	8013a3c <__malloc_unlock>
 80133e2:	42a3      	cmp	r3, r4
 80133e4:	d90b      	bls.n	80133fe <_free_r+0x4e>
 80133e6:	6821      	ldr	r1, [r4, #0]
 80133e8:	1862      	adds	r2, r4, r1
 80133ea:	4293      	cmp	r3, r2
 80133ec:	bf04      	itt	eq
 80133ee:	681a      	ldreq	r2, [r3, #0]
 80133f0:	685b      	ldreq	r3, [r3, #4]
 80133f2:	6063      	str	r3, [r4, #4]
 80133f4:	bf04      	itt	eq
 80133f6:	1852      	addeq	r2, r2, r1
 80133f8:	6022      	streq	r2, [r4, #0]
 80133fa:	602c      	str	r4, [r5, #0]
 80133fc:	e7ec      	b.n	80133d8 <_free_r+0x28>
 80133fe:	461a      	mov	r2, r3
 8013400:	685b      	ldr	r3, [r3, #4]
 8013402:	b10b      	cbz	r3, 8013408 <_free_r+0x58>
 8013404:	42a3      	cmp	r3, r4
 8013406:	d9fa      	bls.n	80133fe <_free_r+0x4e>
 8013408:	6811      	ldr	r1, [r2, #0]
 801340a:	1855      	adds	r5, r2, r1
 801340c:	42a5      	cmp	r5, r4
 801340e:	d10b      	bne.n	8013428 <_free_r+0x78>
 8013410:	6824      	ldr	r4, [r4, #0]
 8013412:	4421      	add	r1, r4
 8013414:	1854      	adds	r4, r2, r1
 8013416:	42a3      	cmp	r3, r4
 8013418:	6011      	str	r1, [r2, #0]
 801341a:	d1dd      	bne.n	80133d8 <_free_r+0x28>
 801341c:	681c      	ldr	r4, [r3, #0]
 801341e:	685b      	ldr	r3, [r3, #4]
 8013420:	6053      	str	r3, [r2, #4]
 8013422:	4421      	add	r1, r4
 8013424:	6011      	str	r1, [r2, #0]
 8013426:	e7d7      	b.n	80133d8 <_free_r+0x28>
 8013428:	d902      	bls.n	8013430 <_free_r+0x80>
 801342a:	230c      	movs	r3, #12
 801342c:	6003      	str	r3, [r0, #0]
 801342e:	e7d3      	b.n	80133d8 <_free_r+0x28>
 8013430:	6825      	ldr	r5, [r4, #0]
 8013432:	1961      	adds	r1, r4, r5
 8013434:	428b      	cmp	r3, r1
 8013436:	bf04      	itt	eq
 8013438:	6819      	ldreq	r1, [r3, #0]
 801343a:	685b      	ldreq	r3, [r3, #4]
 801343c:	6063      	str	r3, [r4, #4]
 801343e:	bf04      	itt	eq
 8013440:	1949      	addeq	r1, r1, r5
 8013442:	6021      	streq	r1, [r4, #0]
 8013444:	6054      	str	r4, [r2, #4]
 8013446:	e7c7      	b.n	80133d8 <_free_r+0x28>
 8013448:	b003      	add	sp, #12
 801344a:	bd30      	pop	{r4, r5, pc}
 801344c:	200028b0 	.word	0x200028b0

08013450 <_malloc_r>:
 8013450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013452:	1ccd      	adds	r5, r1, #3
 8013454:	f025 0503 	bic.w	r5, r5, #3
 8013458:	3508      	adds	r5, #8
 801345a:	2d0c      	cmp	r5, #12
 801345c:	bf38      	it	cc
 801345e:	250c      	movcc	r5, #12
 8013460:	2d00      	cmp	r5, #0
 8013462:	4606      	mov	r6, r0
 8013464:	db01      	blt.n	801346a <_malloc_r+0x1a>
 8013466:	42a9      	cmp	r1, r5
 8013468:	d903      	bls.n	8013472 <_malloc_r+0x22>
 801346a:	230c      	movs	r3, #12
 801346c:	6033      	str	r3, [r6, #0]
 801346e:	2000      	movs	r0, #0
 8013470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013472:	f000 fadd 	bl	8013a30 <__malloc_lock>
 8013476:	4921      	ldr	r1, [pc, #132]	; (80134fc <_malloc_r+0xac>)
 8013478:	680a      	ldr	r2, [r1, #0]
 801347a:	4614      	mov	r4, r2
 801347c:	b99c      	cbnz	r4, 80134a6 <_malloc_r+0x56>
 801347e:	4f20      	ldr	r7, [pc, #128]	; (8013500 <_malloc_r+0xb0>)
 8013480:	683b      	ldr	r3, [r7, #0]
 8013482:	b923      	cbnz	r3, 801348e <_malloc_r+0x3e>
 8013484:	4621      	mov	r1, r4
 8013486:	4630      	mov	r0, r6
 8013488:	f000 f9c6 	bl	8013818 <_sbrk_r>
 801348c:	6038      	str	r0, [r7, #0]
 801348e:	4629      	mov	r1, r5
 8013490:	4630      	mov	r0, r6
 8013492:	f000 f9c1 	bl	8013818 <_sbrk_r>
 8013496:	1c43      	adds	r3, r0, #1
 8013498:	d123      	bne.n	80134e2 <_malloc_r+0x92>
 801349a:	230c      	movs	r3, #12
 801349c:	6033      	str	r3, [r6, #0]
 801349e:	4630      	mov	r0, r6
 80134a0:	f000 facc 	bl	8013a3c <__malloc_unlock>
 80134a4:	e7e3      	b.n	801346e <_malloc_r+0x1e>
 80134a6:	6823      	ldr	r3, [r4, #0]
 80134a8:	1b5b      	subs	r3, r3, r5
 80134aa:	d417      	bmi.n	80134dc <_malloc_r+0x8c>
 80134ac:	2b0b      	cmp	r3, #11
 80134ae:	d903      	bls.n	80134b8 <_malloc_r+0x68>
 80134b0:	6023      	str	r3, [r4, #0]
 80134b2:	441c      	add	r4, r3
 80134b4:	6025      	str	r5, [r4, #0]
 80134b6:	e004      	b.n	80134c2 <_malloc_r+0x72>
 80134b8:	6863      	ldr	r3, [r4, #4]
 80134ba:	42a2      	cmp	r2, r4
 80134bc:	bf0c      	ite	eq
 80134be:	600b      	streq	r3, [r1, #0]
 80134c0:	6053      	strne	r3, [r2, #4]
 80134c2:	4630      	mov	r0, r6
 80134c4:	f000 faba 	bl	8013a3c <__malloc_unlock>
 80134c8:	f104 000b 	add.w	r0, r4, #11
 80134cc:	1d23      	adds	r3, r4, #4
 80134ce:	f020 0007 	bic.w	r0, r0, #7
 80134d2:	1ac2      	subs	r2, r0, r3
 80134d4:	d0cc      	beq.n	8013470 <_malloc_r+0x20>
 80134d6:	1a1b      	subs	r3, r3, r0
 80134d8:	50a3      	str	r3, [r4, r2]
 80134da:	e7c9      	b.n	8013470 <_malloc_r+0x20>
 80134dc:	4622      	mov	r2, r4
 80134de:	6864      	ldr	r4, [r4, #4]
 80134e0:	e7cc      	b.n	801347c <_malloc_r+0x2c>
 80134e2:	1cc4      	adds	r4, r0, #3
 80134e4:	f024 0403 	bic.w	r4, r4, #3
 80134e8:	42a0      	cmp	r0, r4
 80134ea:	d0e3      	beq.n	80134b4 <_malloc_r+0x64>
 80134ec:	1a21      	subs	r1, r4, r0
 80134ee:	4630      	mov	r0, r6
 80134f0:	f000 f992 	bl	8013818 <_sbrk_r>
 80134f4:	3001      	adds	r0, #1
 80134f6:	d1dd      	bne.n	80134b4 <_malloc_r+0x64>
 80134f8:	e7cf      	b.n	801349a <_malloc_r+0x4a>
 80134fa:	bf00      	nop
 80134fc:	200028b0 	.word	0x200028b0
 8013500:	200028b4 	.word	0x200028b4

08013504 <_realloc_r>:
 8013504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013506:	4607      	mov	r7, r0
 8013508:	4614      	mov	r4, r2
 801350a:	460e      	mov	r6, r1
 801350c:	b921      	cbnz	r1, 8013518 <_realloc_r+0x14>
 801350e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013512:	4611      	mov	r1, r2
 8013514:	f7ff bf9c 	b.w	8013450 <_malloc_r>
 8013518:	b922      	cbnz	r2, 8013524 <_realloc_r+0x20>
 801351a:	f7ff ff49 	bl	80133b0 <_free_r>
 801351e:	4625      	mov	r5, r4
 8013520:	4628      	mov	r0, r5
 8013522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013524:	f000 fa90 	bl	8013a48 <_malloc_usable_size_r>
 8013528:	42a0      	cmp	r0, r4
 801352a:	d20f      	bcs.n	801354c <_realloc_r+0x48>
 801352c:	4621      	mov	r1, r4
 801352e:	4638      	mov	r0, r7
 8013530:	f7ff ff8e 	bl	8013450 <_malloc_r>
 8013534:	4605      	mov	r5, r0
 8013536:	2800      	cmp	r0, #0
 8013538:	d0f2      	beq.n	8013520 <_realloc_r+0x1c>
 801353a:	4631      	mov	r1, r6
 801353c:	4622      	mov	r2, r4
 801353e:	f7fb fe83 	bl	800f248 <memcpy>
 8013542:	4631      	mov	r1, r6
 8013544:	4638      	mov	r0, r7
 8013546:	f7ff ff33 	bl	80133b0 <_free_r>
 801354a:	e7e9      	b.n	8013520 <_realloc_r+0x1c>
 801354c:	4635      	mov	r5, r6
 801354e:	e7e7      	b.n	8013520 <_realloc_r+0x1c>

08013550 <__ssputs_r>:
 8013550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013554:	688e      	ldr	r6, [r1, #8]
 8013556:	429e      	cmp	r6, r3
 8013558:	4682      	mov	sl, r0
 801355a:	460c      	mov	r4, r1
 801355c:	4690      	mov	r8, r2
 801355e:	461f      	mov	r7, r3
 8013560:	d838      	bhi.n	80135d4 <__ssputs_r+0x84>
 8013562:	898a      	ldrh	r2, [r1, #12]
 8013564:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013568:	d032      	beq.n	80135d0 <__ssputs_r+0x80>
 801356a:	6825      	ldr	r5, [r4, #0]
 801356c:	6909      	ldr	r1, [r1, #16]
 801356e:	eba5 0901 	sub.w	r9, r5, r1
 8013572:	6965      	ldr	r5, [r4, #20]
 8013574:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013578:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801357c:	3301      	adds	r3, #1
 801357e:	444b      	add	r3, r9
 8013580:	106d      	asrs	r5, r5, #1
 8013582:	429d      	cmp	r5, r3
 8013584:	bf38      	it	cc
 8013586:	461d      	movcc	r5, r3
 8013588:	0553      	lsls	r3, r2, #21
 801358a:	d531      	bpl.n	80135f0 <__ssputs_r+0xa0>
 801358c:	4629      	mov	r1, r5
 801358e:	f7ff ff5f 	bl	8013450 <_malloc_r>
 8013592:	4606      	mov	r6, r0
 8013594:	b950      	cbnz	r0, 80135ac <__ssputs_r+0x5c>
 8013596:	230c      	movs	r3, #12
 8013598:	f8ca 3000 	str.w	r3, [sl]
 801359c:	89a3      	ldrh	r3, [r4, #12]
 801359e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80135a2:	81a3      	strh	r3, [r4, #12]
 80135a4:	f04f 30ff 	mov.w	r0, #4294967295
 80135a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135ac:	6921      	ldr	r1, [r4, #16]
 80135ae:	464a      	mov	r2, r9
 80135b0:	f7fb fe4a 	bl	800f248 <memcpy>
 80135b4:	89a3      	ldrh	r3, [r4, #12]
 80135b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80135ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80135be:	81a3      	strh	r3, [r4, #12]
 80135c0:	6126      	str	r6, [r4, #16]
 80135c2:	6165      	str	r5, [r4, #20]
 80135c4:	444e      	add	r6, r9
 80135c6:	eba5 0509 	sub.w	r5, r5, r9
 80135ca:	6026      	str	r6, [r4, #0]
 80135cc:	60a5      	str	r5, [r4, #8]
 80135ce:	463e      	mov	r6, r7
 80135d0:	42be      	cmp	r6, r7
 80135d2:	d900      	bls.n	80135d6 <__ssputs_r+0x86>
 80135d4:	463e      	mov	r6, r7
 80135d6:	4632      	mov	r2, r6
 80135d8:	6820      	ldr	r0, [r4, #0]
 80135da:	4641      	mov	r1, r8
 80135dc:	f7ff fa04 	bl	80129e8 <memmove>
 80135e0:	68a3      	ldr	r3, [r4, #8]
 80135e2:	6822      	ldr	r2, [r4, #0]
 80135e4:	1b9b      	subs	r3, r3, r6
 80135e6:	4432      	add	r2, r6
 80135e8:	60a3      	str	r3, [r4, #8]
 80135ea:	6022      	str	r2, [r4, #0]
 80135ec:	2000      	movs	r0, #0
 80135ee:	e7db      	b.n	80135a8 <__ssputs_r+0x58>
 80135f0:	462a      	mov	r2, r5
 80135f2:	f7ff ff87 	bl	8013504 <_realloc_r>
 80135f6:	4606      	mov	r6, r0
 80135f8:	2800      	cmp	r0, #0
 80135fa:	d1e1      	bne.n	80135c0 <__ssputs_r+0x70>
 80135fc:	6921      	ldr	r1, [r4, #16]
 80135fe:	4650      	mov	r0, sl
 8013600:	f7ff fed6 	bl	80133b0 <_free_r>
 8013604:	e7c7      	b.n	8013596 <__ssputs_r+0x46>
	...

08013608 <_svfiprintf_r>:
 8013608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801360c:	4698      	mov	r8, r3
 801360e:	898b      	ldrh	r3, [r1, #12]
 8013610:	061b      	lsls	r3, r3, #24
 8013612:	b09d      	sub	sp, #116	; 0x74
 8013614:	4607      	mov	r7, r0
 8013616:	460d      	mov	r5, r1
 8013618:	4614      	mov	r4, r2
 801361a:	d50e      	bpl.n	801363a <_svfiprintf_r+0x32>
 801361c:	690b      	ldr	r3, [r1, #16]
 801361e:	b963      	cbnz	r3, 801363a <_svfiprintf_r+0x32>
 8013620:	2140      	movs	r1, #64	; 0x40
 8013622:	f7ff ff15 	bl	8013450 <_malloc_r>
 8013626:	6028      	str	r0, [r5, #0]
 8013628:	6128      	str	r0, [r5, #16]
 801362a:	b920      	cbnz	r0, 8013636 <_svfiprintf_r+0x2e>
 801362c:	230c      	movs	r3, #12
 801362e:	603b      	str	r3, [r7, #0]
 8013630:	f04f 30ff 	mov.w	r0, #4294967295
 8013634:	e0d1      	b.n	80137da <_svfiprintf_r+0x1d2>
 8013636:	2340      	movs	r3, #64	; 0x40
 8013638:	616b      	str	r3, [r5, #20]
 801363a:	2300      	movs	r3, #0
 801363c:	9309      	str	r3, [sp, #36]	; 0x24
 801363e:	2320      	movs	r3, #32
 8013640:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013644:	f8cd 800c 	str.w	r8, [sp, #12]
 8013648:	2330      	movs	r3, #48	; 0x30
 801364a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80137f4 <_svfiprintf_r+0x1ec>
 801364e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013652:	f04f 0901 	mov.w	r9, #1
 8013656:	4623      	mov	r3, r4
 8013658:	469a      	mov	sl, r3
 801365a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801365e:	b10a      	cbz	r2, 8013664 <_svfiprintf_r+0x5c>
 8013660:	2a25      	cmp	r2, #37	; 0x25
 8013662:	d1f9      	bne.n	8013658 <_svfiprintf_r+0x50>
 8013664:	ebba 0b04 	subs.w	fp, sl, r4
 8013668:	d00b      	beq.n	8013682 <_svfiprintf_r+0x7a>
 801366a:	465b      	mov	r3, fp
 801366c:	4622      	mov	r2, r4
 801366e:	4629      	mov	r1, r5
 8013670:	4638      	mov	r0, r7
 8013672:	f7ff ff6d 	bl	8013550 <__ssputs_r>
 8013676:	3001      	adds	r0, #1
 8013678:	f000 80aa 	beq.w	80137d0 <_svfiprintf_r+0x1c8>
 801367c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801367e:	445a      	add	r2, fp
 8013680:	9209      	str	r2, [sp, #36]	; 0x24
 8013682:	f89a 3000 	ldrb.w	r3, [sl]
 8013686:	2b00      	cmp	r3, #0
 8013688:	f000 80a2 	beq.w	80137d0 <_svfiprintf_r+0x1c8>
 801368c:	2300      	movs	r3, #0
 801368e:	f04f 32ff 	mov.w	r2, #4294967295
 8013692:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013696:	f10a 0a01 	add.w	sl, sl, #1
 801369a:	9304      	str	r3, [sp, #16]
 801369c:	9307      	str	r3, [sp, #28]
 801369e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80136a2:	931a      	str	r3, [sp, #104]	; 0x68
 80136a4:	4654      	mov	r4, sl
 80136a6:	2205      	movs	r2, #5
 80136a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80136ac:	4851      	ldr	r0, [pc, #324]	; (80137f4 <_svfiprintf_r+0x1ec>)
 80136ae:	f7ec fdaf 	bl	8000210 <memchr>
 80136b2:	9a04      	ldr	r2, [sp, #16]
 80136b4:	b9d8      	cbnz	r0, 80136ee <_svfiprintf_r+0xe6>
 80136b6:	06d0      	lsls	r0, r2, #27
 80136b8:	bf44      	itt	mi
 80136ba:	2320      	movmi	r3, #32
 80136bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80136c0:	0711      	lsls	r1, r2, #28
 80136c2:	bf44      	itt	mi
 80136c4:	232b      	movmi	r3, #43	; 0x2b
 80136c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80136ca:	f89a 3000 	ldrb.w	r3, [sl]
 80136ce:	2b2a      	cmp	r3, #42	; 0x2a
 80136d0:	d015      	beq.n	80136fe <_svfiprintf_r+0xf6>
 80136d2:	9a07      	ldr	r2, [sp, #28]
 80136d4:	4654      	mov	r4, sl
 80136d6:	2000      	movs	r0, #0
 80136d8:	f04f 0c0a 	mov.w	ip, #10
 80136dc:	4621      	mov	r1, r4
 80136de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80136e2:	3b30      	subs	r3, #48	; 0x30
 80136e4:	2b09      	cmp	r3, #9
 80136e6:	d94e      	bls.n	8013786 <_svfiprintf_r+0x17e>
 80136e8:	b1b0      	cbz	r0, 8013718 <_svfiprintf_r+0x110>
 80136ea:	9207      	str	r2, [sp, #28]
 80136ec:	e014      	b.n	8013718 <_svfiprintf_r+0x110>
 80136ee:	eba0 0308 	sub.w	r3, r0, r8
 80136f2:	fa09 f303 	lsl.w	r3, r9, r3
 80136f6:	4313      	orrs	r3, r2
 80136f8:	9304      	str	r3, [sp, #16]
 80136fa:	46a2      	mov	sl, r4
 80136fc:	e7d2      	b.n	80136a4 <_svfiprintf_r+0x9c>
 80136fe:	9b03      	ldr	r3, [sp, #12]
 8013700:	1d19      	adds	r1, r3, #4
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	9103      	str	r1, [sp, #12]
 8013706:	2b00      	cmp	r3, #0
 8013708:	bfbb      	ittet	lt
 801370a:	425b      	neglt	r3, r3
 801370c:	f042 0202 	orrlt.w	r2, r2, #2
 8013710:	9307      	strge	r3, [sp, #28]
 8013712:	9307      	strlt	r3, [sp, #28]
 8013714:	bfb8      	it	lt
 8013716:	9204      	strlt	r2, [sp, #16]
 8013718:	7823      	ldrb	r3, [r4, #0]
 801371a:	2b2e      	cmp	r3, #46	; 0x2e
 801371c:	d10c      	bne.n	8013738 <_svfiprintf_r+0x130>
 801371e:	7863      	ldrb	r3, [r4, #1]
 8013720:	2b2a      	cmp	r3, #42	; 0x2a
 8013722:	d135      	bne.n	8013790 <_svfiprintf_r+0x188>
 8013724:	9b03      	ldr	r3, [sp, #12]
 8013726:	1d1a      	adds	r2, r3, #4
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	9203      	str	r2, [sp, #12]
 801372c:	2b00      	cmp	r3, #0
 801372e:	bfb8      	it	lt
 8013730:	f04f 33ff 	movlt.w	r3, #4294967295
 8013734:	3402      	adds	r4, #2
 8013736:	9305      	str	r3, [sp, #20]
 8013738:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013804 <_svfiprintf_r+0x1fc>
 801373c:	7821      	ldrb	r1, [r4, #0]
 801373e:	2203      	movs	r2, #3
 8013740:	4650      	mov	r0, sl
 8013742:	f7ec fd65 	bl	8000210 <memchr>
 8013746:	b140      	cbz	r0, 801375a <_svfiprintf_r+0x152>
 8013748:	2340      	movs	r3, #64	; 0x40
 801374a:	eba0 000a 	sub.w	r0, r0, sl
 801374e:	fa03 f000 	lsl.w	r0, r3, r0
 8013752:	9b04      	ldr	r3, [sp, #16]
 8013754:	4303      	orrs	r3, r0
 8013756:	3401      	adds	r4, #1
 8013758:	9304      	str	r3, [sp, #16]
 801375a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801375e:	4826      	ldr	r0, [pc, #152]	; (80137f8 <_svfiprintf_r+0x1f0>)
 8013760:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013764:	2206      	movs	r2, #6
 8013766:	f7ec fd53 	bl	8000210 <memchr>
 801376a:	2800      	cmp	r0, #0
 801376c:	d038      	beq.n	80137e0 <_svfiprintf_r+0x1d8>
 801376e:	4b23      	ldr	r3, [pc, #140]	; (80137fc <_svfiprintf_r+0x1f4>)
 8013770:	bb1b      	cbnz	r3, 80137ba <_svfiprintf_r+0x1b2>
 8013772:	9b03      	ldr	r3, [sp, #12]
 8013774:	3307      	adds	r3, #7
 8013776:	f023 0307 	bic.w	r3, r3, #7
 801377a:	3308      	adds	r3, #8
 801377c:	9303      	str	r3, [sp, #12]
 801377e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013780:	4433      	add	r3, r6
 8013782:	9309      	str	r3, [sp, #36]	; 0x24
 8013784:	e767      	b.n	8013656 <_svfiprintf_r+0x4e>
 8013786:	fb0c 3202 	mla	r2, ip, r2, r3
 801378a:	460c      	mov	r4, r1
 801378c:	2001      	movs	r0, #1
 801378e:	e7a5      	b.n	80136dc <_svfiprintf_r+0xd4>
 8013790:	2300      	movs	r3, #0
 8013792:	3401      	adds	r4, #1
 8013794:	9305      	str	r3, [sp, #20]
 8013796:	4619      	mov	r1, r3
 8013798:	f04f 0c0a 	mov.w	ip, #10
 801379c:	4620      	mov	r0, r4
 801379e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80137a2:	3a30      	subs	r2, #48	; 0x30
 80137a4:	2a09      	cmp	r2, #9
 80137a6:	d903      	bls.n	80137b0 <_svfiprintf_r+0x1a8>
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d0c5      	beq.n	8013738 <_svfiprintf_r+0x130>
 80137ac:	9105      	str	r1, [sp, #20]
 80137ae:	e7c3      	b.n	8013738 <_svfiprintf_r+0x130>
 80137b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80137b4:	4604      	mov	r4, r0
 80137b6:	2301      	movs	r3, #1
 80137b8:	e7f0      	b.n	801379c <_svfiprintf_r+0x194>
 80137ba:	ab03      	add	r3, sp, #12
 80137bc:	9300      	str	r3, [sp, #0]
 80137be:	462a      	mov	r2, r5
 80137c0:	4b0f      	ldr	r3, [pc, #60]	; (8013800 <_svfiprintf_r+0x1f8>)
 80137c2:	a904      	add	r1, sp, #16
 80137c4:	4638      	mov	r0, r7
 80137c6:	f7fb ff4f 	bl	800f668 <_printf_float>
 80137ca:	1c42      	adds	r2, r0, #1
 80137cc:	4606      	mov	r6, r0
 80137ce:	d1d6      	bne.n	801377e <_svfiprintf_r+0x176>
 80137d0:	89ab      	ldrh	r3, [r5, #12]
 80137d2:	065b      	lsls	r3, r3, #25
 80137d4:	f53f af2c 	bmi.w	8013630 <_svfiprintf_r+0x28>
 80137d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80137da:	b01d      	add	sp, #116	; 0x74
 80137dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137e0:	ab03      	add	r3, sp, #12
 80137e2:	9300      	str	r3, [sp, #0]
 80137e4:	462a      	mov	r2, r5
 80137e6:	4b06      	ldr	r3, [pc, #24]	; (8013800 <_svfiprintf_r+0x1f8>)
 80137e8:	a904      	add	r1, sp, #16
 80137ea:	4638      	mov	r0, r7
 80137ec:	f7fc f9e0 	bl	800fbb0 <_printf_i>
 80137f0:	e7eb      	b.n	80137ca <_svfiprintf_r+0x1c2>
 80137f2:	bf00      	nop
 80137f4:	08015130 	.word	0x08015130
 80137f8:	0801513a 	.word	0x0801513a
 80137fc:	0800f669 	.word	0x0800f669
 8013800:	08013551 	.word	0x08013551
 8013804:	08015136 	.word	0x08015136

08013808 <nan>:
 8013808:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013810 <nan+0x8>
 801380c:	4770      	bx	lr
 801380e:	bf00      	nop
 8013810:	00000000 	.word	0x00000000
 8013814:	7ff80000 	.word	0x7ff80000

08013818 <_sbrk_r>:
 8013818:	b538      	push	{r3, r4, r5, lr}
 801381a:	4d06      	ldr	r5, [pc, #24]	; (8013834 <_sbrk_r+0x1c>)
 801381c:	2300      	movs	r3, #0
 801381e:	4604      	mov	r4, r0
 8013820:	4608      	mov	r0, r1
 8013822:	602b      	str	r3, [r5, #0]
 8013824:	f7f0 fa32 	bl	8003c8c <_sbrk>
 8013828:	1c43      	adds	r3, r0, #1
 801382a:	d102      	bne.n	8013832 <_sbrk_r+0x1a>
 801382c:	682b      	ldr	r3, [r5, #0]
 801382e:	b103      	cbz	r3, 8013832 <_sbrk_r+0x1a>
 8013830:	6023      	str	r3, [r4, #0]
 8013832:	bd38      	pop	{r3, r4, r5, pc}
 8013834:	20004ba0 	.word	0x20004ba0

08013838 <_raise_r>:
 8013838:	291f      	cmp	r1, #31
 801383a:	b538      	push	{r3, r4, r5, lr}
 801383c:	4604      	mov	r4, r0
 801383e:	460d      	mov	r5, r1
 8013840:	d904      	bls.n	801384c <_raise_r+0x14>
 8013842:	2316      	movs	r3, #22
 8013844:	6003      	str	r3, [r0, #0]
 8013846:	f04f 30ff 	mov.w	r0, #4294967295
 801384a:	bd38      	pop	{r3, r4, r5, pc}
 801384c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801384e:	b112      	cbz	r2, 8013856 <_raise_r+0x1e>
 8013850:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013854:	b94b      	cbnz	r3, 801386a <_raise_r+0x32>
 8013856:	4620      	mov	r0, r4
 8013858:	f000 f830 	bl	80138bc <_getpid_r>
 801385c:	462a      	mov	r2, r5
 801385e:	4601      	mov	r1, r0
 8013860:	4620      	mov	r0, r4
 8013862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013866:	f000 b817 	b.w	8013898 <_kill_r>
 801386a:	2b01      	cmp	r3, #1
 801386c:	d00a      	beq.n	8013884 <_raise_r+0x4c>
 801386e:	1c59      	adds	r1, r3, #1
 8013870:	d103      	bne.n	801387a <_raise_r+0x42>
 8013872:	2316      	movs	r3, #22
 8013874:	6003      	str	r3, [r0, #0]
 8013876:	2001      	movs	r0, #1
 8013878:	e7e7      	b.n	801384a <_raise_r+0x12>
 801387a:	2400      	movs	r4, #0
 801387c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013880:	4628      	mov	r0, r5
 8013882:	4798      	blx	r3
 8013884:	2000      	movs	r0, #0
 8013886:	e7e0      	b.n	801384a <_raise_r+0x12>

08013888 <raise>:
 8013888:	4b02      	ldr	r3, [pc, #8]	; (8013894 <raise+0xc>)
 801388a:	4601      	mov	r1, r0
 801388c:	6818      	ldr	r0, [r3, #0]
 801388e:	f7ff bfd3 	b.w	8013838 <_raise_r>
 8013892:	bf00      	nop
 8013894:	20000058 	.word	0x20000058

08013898 <_kill_r>:
 8013898:	b538      	push	{r3, r4, r5, lr}
 801389a:	4d07      	ldr	r5, [pc, #28]	; (80138b8 <_kill_r+0x20>)
 801389c:	2300      	movs	r3, #0
 801389e:	4604      	mov	r4, r0
 80138a0:	4608      	mov	r0, r1
 80138a2:	4611      	mov	r1, r2
 80138a4:	602b      	str	r3, [r5, #0]
 80138a6:	f7f0 f985 	bl	8003bb4 <_kill>
 80138aa:	1c43      	adds	r3, r0, #1
 80138ac:	d102      	bne.n	80138b4 <_kill_r+0x1c>
 80138ae:	682b      	ldr	r3, [r5, #0]
 80138b0:	b103      	cbz	r3, 80138b4 <_kill_r+0x1c>
 80138b2:	6023      	str	r3, [r4, #0]
 80138b4:	bd38      	pop	{r3, r4, r5, pc}
 80138b6:	bf00      	nop
 80138b8:	20004ba0 	.word	0x20004ba0

080138bc <_getpid_r>:
 80138bc:	f7f0 b972 	b.w	8003ba4 <_getpid>

080138c0 <__sread>:
 80138c0:	b510      	push	{r4, lr}
 80138c2:	460c      	mov	r4, r1
 80138c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138c8:	f000 f8c6 	bl	8013a58 <_read_r>
 80138cc:	2800      	cmp	r0, #0
 80138ce:	bfab      	itete	ge
 80138d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80138d2:	89a3      	ldrhlt	r3, [r4, #12]
 80138d4:	181b      	addge	r3, r3, r0
 80138d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80138da:	bfac      	ite	ge
 80138dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80138de:	81a3      	strhlt	r3, [r4, #12]
 80138e0:	bd10      	pop	{r4, pc}

080138e2 <__swrite>:
 80138e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138e6:	461f      	mov	r7, r3
 80138e8:	898b      	ldrh	r3, [r1, #12]
 80138ea:	05db      	lsls	r3, r3, #23
 80138ec:	4605      	mov	r5, r0
 80138ee:	460c      	mov	r4, r1
 80138f0:	4616      	mov	r6, r2
 80138f2:	d505      	bpl.n	8013900 <__swrite+0x1e>
 80138f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138f8:	2302      	movs	r3, #2
 80138fa:	2200      	movs	r2, #0
 80138fc:	f000 f886 	bl	8013a0c <_lseek_r>
 8013900:	89a3      	ldrh	r3, [r4, #12]
 8013902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013906:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801390a:	81a3      	strh	r3, [r4, #12]
 801390c:	4632      	mov	r2, r6
 801390e:	463b      	mov	r3, r7
 8013910:	4628      	mov	r0, r5
 8013912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013916:	f000 b835 	b.w	8013984 <_write_r>

0801391a <__sseek>:
 801391a:	b510      	push	{r4, lr}
 801391c:	460c      	mov	r4, r1
 801391e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013922:	f000 f873 	bl	8013a0c <_lseek_r>
 8013926:	1c43      	adds	r3, r0, #1
 8013928:	89a3      	ldrh	r3, [r4, #12]
 801392a:	bf15      	itete	ne
 801392c:	6560      	strne	r0, [r4, #84]	; 0x54
 801392e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013932:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013936:	81a3      	strheq	r3, [r4, #12]
 8013938:	bf18      	it	ne
 801393a:	81a3      	strhne	r3, [r4, #12]
 801393c:	bd10      	pop	{r4, pc}

0801393e <__sclose>:
 801393e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013942:	f000 b831 	b.w	80139a8 <_close_r>

08013946 <strncmp>:
 8013946:	b510      	push	{r4, lr}
 8013948:	b16a      	cbz	r2, 8013966 <strncmp+0x20>
 801394a:	3901      	subs	r1, #1
 801394c:	1884      	adds	r4, r0, r2
 801394e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013952:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013956:	4293      	cmp	r3, r2
 8013958:	d103      	bne.n	8013962 <strncmp+0x1c>
 801395a:	42a0      	cmp	r0, r4
 801395c:	d001      	beq.n	8013962 <strncmp+0x1c>
 801395e:	2b00      	cmp	r3, #0
 8013960:	d1f5      	bne.n	801394e <strncmp+0x8>
 8013962:	1a98      	subs	r0, r3, r2
 8013964:	bd10      	pop	{r4, pc}
 8013966:	4610      	mov	r0, r2
 8013968:	e7fc      	b.n	8013964 <strncmp+0x1e>

0801396a <__ascii_wctomb>:
 801396a:	b149      	cbz	r1, 8013980 <__ascii_wctomb+0x16>
 801396c:	2aff      	cmp	r2, #255	; 0xff
 801396e:	bf85      	ittet	hi
 8013970:	238a      	movhi	r3, #138	; 0x8a
 8013972:	6003      	strhi	r3, [r0, #0]
 8013974:	700a      	strbls	r2, [r1, #0]
 8013976:	f04f 30ff 	movhi.w	r0, #4294967295
 801397a:	bf98      	it	ls
 801397c:	2001      	movls	r0, #1
 801397e:	4770      	bx	lr
 8013980:	4608      	mov	r0, r1
 8013982:	4770      	bx	lr

08013984 <_write_r>:
 8013984:	b538      	push	{r3, r4, r5, lr}
 8013986:	4d07      	ldr	r5, [pc, #28]	; (80139a4 <_write_r+0x20>)
 8013988:	4604      	mov	r4, r0
 801398a:	4608      	mov	r0, r1
 801398c:	4611      	mov	r1, r2
 801398e:	2200      	movs	r2, #0
 8013990:	602a      	str	r2, [r5, #0]
 8013992:	461a      	mov	r2, r3
 8013994:	f7ed fb42 	bl	800101c <_write>
 8013998:	1c43      	adds	r3, r0, #1
 801399a:	d102      	bne.n	80139a2 <_write_r+0x1e>
 801399c:	682b      	ldr	r3, [r5, #0]
 801399e:	b103      	cbz	r3, 80139a2 <_write_r+0x1e>
 80139a0:	6023      	str	r3, [r4, #0]
 80139a2:	bd38      	pop	{r3, r4, r5, pc}
 80139a4:	20004ba0 	.word	0x20004ba0

080139a8 <_close_r>:
 80139a8:	b538      	push	{r3, r4, r5, lr}
 80139aa:	4d06      	ldr	r5, [pc, #24]	; (80139c4 <_close_r+0x1c>)
 80139ac:	2300      	movs	r3, #0
 80139ae:	4604      	mov	r4, r0
 80139b0:	4608      	mov	r0, r1
 80139b2:	602b      	str	r3, [r5, #0]
 80139b4:	f7f0 f935 	bl	8003c22 <_close>
 80139b8:	1c43      	adds	r3, r0, #1
 80139ba:	d102      	bne.n	80139c2 <_close_r+0x1a>
 80139bc:	682b      	ldr	r3, [r5, #0]
 80139be:	b103      	cbz	r3, 80139c2 <_close_r+0x1a>
 80139c0:	6023      	str	r3, [r4, #0]
 80139c2:	bd38      	pop	{r3, r4, r5, pc}
 80139c4:	20004ba0 	.word	0x20004ba0

080139c8 <_fstat_r>:
 80139c8:	b538      	push	{r3, r4, r5, lr}
 80139ca:	4d07      	ldr	r5, [pc, #28]	; (80139e8 <_fstat_r+0x20>)
 80139cc:	2300      	movs	r3, #0
 80139ce:	4604      	mov	r4, r0
 80139d0:	4608      	mov	r0, r1
 80139d2:	4611      	mov	r1, r2
 80139d4:	602b      	str	r3, [r5, #0]
 80139d6:	f7f0 f930 	bl	8003c3a <_fstat>
 80139da:	1c43      	adds	r3, r0, #1
 80139dc:	d102      	bne.n	80139e4 <_fstat_r+0x1c>
 80139de:	682b      	ldr	r3, [r5, #0]
 80139e0:	b103      	cbz	r3, 80139e4 <_fstat_r+0x1c>
 80139e2:	6023      	str	r3, [r4, #0]
 80139e4:	bd38      	pop	{r3, r4, r5, pc}
 80139e6:	bf00      	nop
 80139e8:	20004ba0 	.word	0x20004ba0

080139ec <_isatty_r>:
 80139ec:	b538      	push	{r3, r4, r5, lr}
 80139ee:	4d06      	ldr	r5, [pc, #24]	; (8013a08 <_isatty_r+0x1c>)
 80139f0:	2300      	movs	r3, #0
 80139f2:	4604      	mov	r4, r0
 80139f4:	4608      	mov	r0, r1
 80139f6:	602b      	str	r3, [r5, #0]
 80139f8:	f7f0 f92f 	bl	8003c5a <_isatty>
 80139fc:	1c43      	adds	r3, r0, #1
 80139fe:	d102      	bne.n	8013a06 <_isatty_r+0x1a>
 8013a00:	682b      	ldr	r3, [r5, #0]
 8013a02:	b103      	cbz	r3, 8013a06 <_isatty_r+0x1a>
 8013a04:	6023      	str	r3, [r4, #0]
 8013a06:	bd38      	pop	{r3, r4, r5, pc}
 8013a08:	20004ba0 	.word	0x20004ba0

08013a0c <_lseek_r>:
 8013a0c:	b538      	push	{r3, r4, r5, lr}
 8013a0e:	4d07      	ldr	r5, [pc, #28]	; (8013a2c <_lseek_r+0x20>)
 8013a10:	4604      	mov	r4, r0
 8013a12:	4608      	mov	r0, r1
 8013a14:	4611      	mov	r1, r2
 8013a16:	2200      	movs	r2, #0
 8013a18:	602a      	str	r2, [r5, #0]
 8013a1a:	461a      	mov	r2, r3
 8013a1c:	f7f0 f928 	bl	8003c70 <_lseek>
 8013a20:	1c43      	adds	r3, r0, #1
 8013a22:	d102      	bne.n	8013a2a <_lseek_r+0x1e>
 8013a24:	682b      	ldr	r3, [r5, #0]
 8013a26:	b103      	cbz	r3, 8013a2a <_lseek_r+0x1e>
 8013a28:	6023      	str	r3, [r4, #0]
 8013a2a:	bd38      	pop	{r3, r4, r5, pc}
 8013a2c:	20004ba0 	.word	0x20004ba0

08013a30 <__malloc_lock>:
 8013a30:	4801      	ldr	r0, [pc, #4]	; (8013a38 <__malloc_lock+0x8>)
 8013a32:	f7fe bf58 	b.w	80128e6 <__retarget_lock_acquire_recursive>
 8013a36:	bf00      	nop
 8013a38:	20004b98 	.word	0x20004b98

08013a3c <__malloc_unlock>:
 8013a3c:	4801      	ldr	r0, [pc, #4]	; (8013a44 <__malloc_unlock+0x8>)
 8013a3e:	f7fe bf53 	b.w	80128e8 <__retarget_lock_release_recursive>
 8013a42:	bf00      	nop
 8013a44:	20004b98 	.word	0x20004b98

08013a48 <_malloc_usable_size_r>:
 8013a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013a4c:	1f18      	subs	r0, r3, #4
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	bfbc      	itt	lt
 8013a52:	580b      	ldrlt	r3, [r1, r0]
 8013a54:	18c0      	addlt	r0, r0, r3
 8013a56:	4770      	bx	lr

08013a58 <_read_r>:
 8013a58:	b538      	push	{r3, r4, r5, lr}
 8013a5a:	4d07      	ldr	r5, [pc, #28]	; (8013a78 <_read_r+0x20>)
 8013a5c:	4604      	mov	r4, r0
 8013a5e:	4608      	mov	r0, r1
 8013a60:	4611      	mov	r1, r2
 8013a62:	2200      	movs	r2, #0
 8013a64:	602a      	str	r2, [r5, #0]
 8013a66:	461a      	mov	r2, r3
 8013a68:	f7f0 f8be 	bl	8003be8 <_read>
 8013a6c:	1c43      	adds	r3, r0, #1
 8013a6e:	d102      	bne.n	8013a76 <_read_r+0x1e>
 8013a70:	682b      	ldr	r3, [r5, #0]
 8013a72:	b103      	cbz	r3, 8013a76 <_read_r+0x1e>
 8013a74:	6023      	str	r3, [r4, #0]
 8013a76:	bd38      	pop	{r3, r4, r5, pc}
 8013a78:	20004ba0 	.word	0x20004ba0

08013a7c <pow>:
 8013a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a80:	ec59 8b10 	vmov	r8, r9, d0
 8013a84:	ec57 6b11 	vmov	r6, r7, d1
 8013a88:	f000 f8da 	bl	8013c40 <__ieee754_pow>
 8013a8c:	4b4e      	ldr	r3, [pc, #312]	; (8013bc8 <pow+0x14c>)
 8013a8e:	f993 3000 	ldrsb.w	r3, [r3]
 8013a92:	3301      	adds	r3, #1
 8013a94:	ec55 4b10 	vmov	r4, r5, d0
 8013a98:	d015      	beq.n	8013ac6 <pow+0x4a>
 8013a9a:	4632      	mov	r2, r6
 8013a9c:	463b      	mov	r3, r7
 8013a9e:	4630      	mov	r0, r6
 8013aa0:	4639      	mov	r1, r7
 8013aa2:	f7ed f85b 	bl	8000b5c <__aeabi_dcmpun>
 8013aa6:	b970      	cbnz	r0, 8013ac6 <pow+0x4a>
 8013aa8:	4642      	mov	r2, r8
 8013aaa:	464b      	mov	r3, r9
 8013aac:	4640      	mov	r0, r8
 8013aae:	4649      	mov	r1, r9
 8013ab0:	f7ed f854 	bl	8000b5c <__aeabi_dcmpun>
 8013ab4:	2200      	movs	r2, #0
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	b148      	cbz	r0, 8013ace <pow+0x52>
 8013aba:	4630      	mov	r0, r6
 8013abc:	4639      	mov	r1, r7
 8013abe:	f7ed f81b 	bl	8000af8 <__aeabi_dcmpeq>
 8013ac2:	2800      	cmp	r0, #0
 8013ac4:	d17d      	bne.n	8013bc2 <pow+0x146>
 8013ac6:	ec45 4b10 	vmov	d0, r4, r5
 8013aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ace:	4640      	mov	r0, r8
 8013ad0:	4649      	mov	r1, r9
 8013ad2:	f7ed f811 	bl	8000af8 <__aeabi_dcmpeq>
 8013ad6:	b1e0      	cbz	r0, 8013b12 <pow+0x96>
 8013ad8:	2200      	movs	r2, #0
 8013ada:	2300      	movs	r3, #0
 8013adc:	4630      	mov	r0, r6
 8013ade:	4639      	mov	r1, r7
 8013ae0:	f7ed f80a 	bl	8000af8 <__aeabi_dcmpeq>
 8013ae4:	2800      	cmp	r0, #0
 8013ae6:	d16c      	bne.n	8013bc2 <pow+0x146>
 8013ae8:	ec47 6b10 	vmov	d0, r6, r7
 8013aec:	f000 fe87 	bl	80147fe <finite>
 8013af0:	2800      	cmp	r0, #0
 8013af2:	d0e8      	beq.n	8013ac6 <pow+0x4a>
 8013af4:	2200      	movs	r2, #0
 8013af6:	2300      	movs	r3, #0
 8013af8:	4630      	mov	r0, r6
 8013afa:	4639      	mov	r1, r7
 8013afc:	f7ed f806 	bl	8000b0c <__aeabi_dcmplt>
 8013b00:	2800      	cmp	r0, #0
 8013b02:	d0e0      	beq.n	8013ac6 <pow+0x4a>
 8013b04:	f7fb fb64 	bl	800f1d0 <__errno>
 8013b08:	2321      	movs	r3, #33	; 0x21
 8013b0a:	6003      	str	r3, [r0, #0]
 8013b0c:	2400      	movs	r4, #0
 8013b0e:	4d2f      	ldr	r5, [pc, #188]	; (8013bcc <pow+0x150>)
 8013b10:	e7d9      	b.n	8013ac6 <pow+0x4a>
 8013b12:	ec45 4b10 	vmov	d0, r4, r5
 8013b16:	f000 fe72 	bl	80147fe <finite>
 8013b1a:	bbb8      	cbnz	r0, 8013b8c <pow+0x110>
 8013b1c:	ec49 8b10 	vmov	d0, r8, r9
 8013b20:	f000 fe6d 	bl	80147fe <finite>
 8013b24:	b390      	cbz	r0, 8013b8c <pow+0x110>
 8013b26:	ec47 6b10 	vmov	d0, r6, r7
 8013b2a:	f000 fe68 	bl	80147fe <finite>
 8013b2e:	b368      	cbz	r0, 8013b8c <pow+0x110>
 8013b30:	4622      	mov	r2, r4
 8013b32:	462b      	mov	r3, r5
 8013b34:	4620      	mov	r0, r4
 8013b36:	4629      	mov	r1, r5
 8013b38:	f7ed f810 	bl	8000b5c <__aeabi_dcmpun>
 8013b3c:	b160      	cbz	r0, 8013b58 <pow+0xdc>
 8013b3e:	f7fb fb47 	bl	800f1d0 <__errno>
 8013b42:	2321      	movs	r3, #33	; 0x21
 8013b44:	6003      	str	r3, [r0, #0]
 8013b46:	2200      	movs	r2, #0
 8013b48:	2300      	movs	r3, #0
 8013b4a:	4610      	mov	r0, r2
 8013b4c:	4619      	mov	r1, r3
 8013b4e:	f7ec fe95 	bl	800087c <__aeabi_ddiv>
 8013b52:	4604      	mov	r4, r0
 8013b54:	460d      	mov	r5, r1
 8013b56:	e7b6      	b.n	8013ac6 <pow+0x4a>
 8013b58:	f7fb fb3a 	bl	800f1d0 <__errno>
 8013b5c:	2322      	movs	r3, #34	; 0x22
 8013b5e:	6003      	str	r3, [r0, #0]
 8013b60:	2200      	movs	r2, #0
 8013b62:	2300      	movs	r3, #0
 8013b64:	4640      	mov	r0, r8
 8013b66:	4649      	mov	r1, r9
 8013b68:	f7ec ffd0 	bl	8000b0c <__aeabi_dcmplt>
 8013b6c:	2400      	movs	r4, #0
 8013b6e:	b158      	cbz	r0, 8013b88 <pow+0x10c>
 8013b70:	ec47 6b10 	vmov	d0, r6, r7
 8013b74:	f000 fe4e 	bl	8014814 <rint>
 8013b78:	4632      	mov	r2, r6
 8013b7a:	ec51 0b10 	vmov	r0, r1, d0
 8013b7e:	463b      	mov	r3, r7
 8013b80:	f7ec ffba 	bl	8000af8 <__aeabi_dcmpeq>
 8013b84:	2800      	cmp	r0, #0
 8013b86:	d0c2      	beq.n	8013b0e <pow+0x92>
 8013b88:	4d11      	ldr	r5, [pc, #68]	; (8013bd0 <pow+0x154>)
 8013b8a:	e79c      	b.n	8013ac6 <pow+0x4a>
 8013b8c:	2200      	movs	r2, #0
 8013b8e:	2300      	movs	r3, #0
 8013b90:	4620      	mov	r0, r4
 8013b92:	4629      	mov	r1, r5
 8013b94:	f7ec ffb0 	bl	8000af8 <__aeabi_dcmpeq>
 8013b98:	2800      	cmp	r0, #0
 8013b9a:	d094      	beq.n	8013ac6 <pow+0x4a>
 8013b9c:	ec49 8b10 	vmov	d0, r8, r9
 8013ba0:	f000 fe2d 	bl	80147fe <finite>
 8013ba4:	2800      	cmp	r0, #0
 8013ba6:	d08e      	beq.n	8013ac6 <pow+0x4a>
 8013ba8:	ec47 6b10 	vmov	d0, r6, r7
 8013bac:	f000 fe27 	bl	80147fe <finite>
 8013bb0:	2800      	cmp	r0, #0
 8013bb2:	d088      	beq.n	8013ac6 <pow+0x4a>
 8013bb4:	f7fb fb0c 	bl	800f1d0 <__errno>
 8013bb8:	2322      	movs	r3, #34	; 0x22
 8013bba:	6003      	str	r3, [r0, #0]
 8013bbc:	2400      	movs	r4, #0
 8013bbe:	2500      	movs	r5, #0
 8013bc0:	e781      	b.n	8013ac6 <pow+0x4a>
 8013bc2:	4d04      	ldr	r5, [pc, #16]	; (8013bd4 <pow+0x158>)
 8013bc4:	2400      	movs	r4, #0
 8013bc6:	e77e      	b.n	8013ac6 <pow+0x4a>
 8013bc8:	2000022c 	.word	0x2000022c
 8013bcc:	fff00000 	.word	0xfff00000
 8013bd0:	7ff00000 	.word	0x7ff00000
 8013bd4:	3ff00000 	.word	0x3ff00000

08013bd8 <sqrt>:
 8013bd8:	b538      	push	{r3, r4, r5, lr}
 8013bda:	ed2d 8b02 	vpush	{d8}
 8013bde:	ec55 4b10 	vmov	r4, r5, d0
 8013be2:	f000 fd4f 	bl	8014684 <__ieee754_sqrt>
 8013be6:	4b15      	ldr	r3, [pc, #84]	; (8013c3c <sqrt+0x64>)
 8013be8:	eeb0 8a40 	vmov.f32	s16, s0
 8013bec:	eef0 8a60 	vmov.f32	s17, s1
 8013bf0:	f993 3000 	ldrsb.w	r3, [r3]
 8013bf4:	3301      	adds	r3, #1
 8013bf6:	d019      	beq.n	8013c2c <sqrt+0x54>
 8013bf8:	4622      	mov	r2, r4
 8013bfa:	462b      	mov	r3, r5
 8013bfc:	4620      	mov	r0, r4
 8013bfe:	4629      	mov	r1, r5
 8013c00:	f7ec ffac 	bl	8000b5c <__aeabi_dcmpun>
 8013c04:	b990      	cbnz	r0, 8013c2c <sqrt+0x54>
 8013c06:	2200      	movs	r2, #0
 8013c08:	2300      	movs	r3, #0
 8013c0a:	4620      	mov	r0, r4
 8013c0c:	4629      	mov	r1, r5
 8013c0e:	f7ec ff7d 	bl	8000b0c <__aeabi_dcmplt>
 8013c12:	b158      	cbz	r0, 8013c2c <sqrt+0x54>
 8013c14:	f7fb fadc 	bl	800f1d0 <__errno>
 8013c18:	2321      	movs	r3, #33	; 0x21
 8013c1a:	6003      	str	r3, [r0, #0]
 8013c1c:	2200      	movs	r2, #0
 8013c1e:	2300      	movs	r3, #0
 8013c20:	4610      	mov	r0, r2
 8013c22:	4619      	mov	r1, r3
 8013c24:	f7ec fe2a 	bl	800087c <__aeabi_ddiv>
 8013c28:	ec41 0b18 	vmov	d8, r0, r1
 8013c2c:	eeb0 0a48 	vmov.f32	s0, s16
 8013c30:	eef0 0a68 	vmov.f32	s1, s17
 8013c34:	ecbd 8b02 	vpop	{d8}
 8013c38:	bd38      	pop	{r3, r4, r5, pc}
 8013c3a:	bf00      	nop
 8013c3c:	2000022c 	.word	0x2000022c

08013c40 <__ieee754_pow>:
 8013c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c44:	ed2d 8b06 	vpush	{d8-d10}
 8013c48:	b08d      	sub	sp, #52	; 0x34
 8013c4a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8013c4e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8013c52:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8013c56:	ea56 0100 	orrs.w	r1, r6, r0
 8013c5a:	ec53 2b10 	vmov	r2, r3, d0
 8013c5e:	f000 84d1 	beq.w	8014604 <__ieee754_pow+0x9c4>
 8013c62:	497f      	ldr	r1, [pc, #508]	; (8013e60 <__ieee754_pow+0x220>)
 8013c64:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8013c68:	428c      	cmp	r4, r1
 8013c6a:	ee10 8a10 	vmov	r8, s0
 8013c6e:	4699      	mov	r9, r3
 8013c70:	dc09      	bgt.n	8013c86 <__ieee754_pow+0x46>
 8013c72:	d103      	bne.n	8013c7c <__ieee754_pow+0x3c>
 8013c74:	b97a      	cbnz	r2, 8013c96 <__ieee754_pow+0x56>
 8013c76:	42a6      	cmp	r6, r4
 8013c78:	dd02      	ble.n	8013c80 <__ieee754_pow+0x40>
 8013c7a:	e00c      	b.n	8013c96 <__ieee754_pow+0x56>
 8013c7c:	428e      	cmp	r6, r1
 8013c7e:	dc02      	bgt.n	8013c86 <__ieee754_pow+0x46>
 8013c80:	428e      	cmp	r6, r1
 8013c82:	d110      	bne.n	8013ca6 <__ieee754_pow+0x66>
 8013c84:	b178      	cbz	r0, 8013ca6 <__ieee754_pow+0x66>
 8013c86:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013c8a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013c8e:	ea54 0308 	orrs.w	r3, r4, r8
 8013c92:	f000 84b7 	beq.w	8014604 <__ieee754_pow+0x9c4>
 8013c96:	4873      	ldr	r0, [pc, #460]	; (8013e64 <__ieee754_pow+0x224>)
 8013c98:	b00d      	add	sp, #52	; 0x34
 8013c9a:	ecbd 8b06 	vpop	{d8-d10}
 8013c9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ca2:	f7ff bdb1 	b.w	8013808 <nan>
 8013ca6:	f1b9 0f00 	cmp.w	r9, #0
 8013caa:	da36      	bge.n	8013d1a <__ieee754_pow+0xda>
 8013cac:	496e      	ldr	r1, [pc, #440]	; (8013e68 <__ieee754_pow+0x228>)
 8013cae:	428e      	cmp	r6, r1
 8013cb0:	dc51      	bgt.n	8013d56 <__ieee754_pow+0x116>
 8013cb2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8013cb6:	428e      	cmp	r6, r1
 8013cb8:	f340 84af 	ble.w	801461a <__ieee754_pow+0x9da>
 8013cbc:	1531      	asrs	r1, r6, #20
 8013cbe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8013cc2:	2914      	cmp	r1, #20
 8013cc4:	dd0f      	ble.n	8013ce6 <__ieee754_pow+0xa6>
 8013cc6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8013cca:	fa20 fc01 	lsr.w	ip, r0, r1
 8013cce:	fa0c f101 	lsl.w	r1, ip, r1
 8013cd2:	4281      	cmp	r1, r0
 8013cd4:	f040 84a1 	bne.w	801461a <__ieee754_pow+0x9da>
 8013cd8:	f00c 0c01 	and.w	ip, ip, #1
 8013cdc:	f1cc 0102 	rsb	r1, ip, #2
 8013ce0:	9100      	str	r1, [sp, #0]
 8013ce2:	b180      	cbz	r0, 8013d06 <__ieee754_pow+0xc6>
 8013ce4:	e059      	b.n	8013d9a <__ieee754_pow+0x15a>
 8013ce6:	2800      	cmp	r0, #0
 8013ce8:	d155      	bne.n	8013d96 <__ieee754_pow+0x156>
 8013cea:	f1c1 0114 	rsb	r1, r1, #20
 8013cee:	fa46 fc01 	asr.w	ip, r6, r1
 8013cf2:	fa0c f101 	lsl.w	r1, ip, r1
 8013cf6:	42b1      	cmp	r1, r6
 8013cf8:	f040 848c 	bne.w	8014614 <__ieee754_pow+0x9d4>
 8013cfc:	f00c 0c01 	and.w	ip, ip, #1
 8013d00:	f1cc 0102 	rsb	r1, ip, #2
 8013d04:	9100      	str	r1, [sp, #0]
 8013d06:	4959      	ldr	r1, [pc, #356]	; (8013e6c <__ieee754_pow+0x22c>)
 8013d08:	428e      	cmp	r6, r1
 8013d0a:	d12d      	bne.n	8013d68 <__ieee754_pow+0x128>
 8013d0c:	2f00      	cmp	r7, #0
 8013d0e:	da79      	bge.n	8013e04 <__ieee754_pow+0x1c4>
 8013d10:	4956      	ldr	r1, [pc, #344]	; (8013e6c <__ieee754_pow+0x22c>)
 8013d12:	2000      	movs	r0, #0
 8013d14:	f7ec fdb2 	bl	800087c <__aeabi_ddiv>
 8013d18:	e016      	b.n	8013d48 <__ieee754_pow+0x108>
 8013d1a:	2100      	movs	r1, #0
 8013d1c:	9100      	str	r1, [sp, #0]
 8013d1e:	2800      	cmp	r0, #0
 8013d20:	d13b      	bne.n	8013d9a <__ieee754_pow+0x15a>
 8013d22:	494f      	ldr	r1, [pc, #316]	; (8013e60 <__ieee754_pow+0x220>)
 8013d24:	428e      	cmp	r6, r1
 8013d26:	d1ee      	bne.n	8013d06 <__ieee754_pow+0xc6>
 8013d28:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8013d2c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8013d30:	ea53 0308 	orrs.w	r3, r3, r8
 8013d34:	f000 8466 	beq.w	8014604 <__ieee754_pow+0x9c4>
 8013d38:	4b4d      	ldr	r3, [pc, #308]	; (8013e70 <__ieee754_pow+0x230>)
 8013d3a:	429c      	cmp	r4, r3
 8013d3c:	dd0d      	ble.n	8013d5a <__ieee754_pow+0x11a>
 8013d3e:	2f00      	cmp	r7, #0
 8013d40:	f280 8464 	bge.w	801460c <__ieee754_pow+0x9cc>
 8013d44:	2000      	movs	r0, #0
 8013d46:	2100      	movs	r1, #0
 8013d48:	ec41 0b10 	vmov	d0, r0, r1
 8013d4c:	b00d      	add	sp, #52	; 0x34
 8013d4e:	ecbd 8b06 	vpop	{d8-d10}
 8013d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d56:	2102      	movs	r1, #2
 8013d58:	e7e0      	b.n	8013d1c <__ieee754_pow+0xdc>
 8013d5a:	2f00      	cmp	r7, #0
 8013d5c:	daf2      	bge.n	8013d44 <__ieee754_pow+0x104>
 8013d5e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8013d62:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013d66:	e7ef      	b.n	8013d48 <__ieee754_pow+0x108>
 8013d68:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8013d6c:	d104      	bne.n	8013d78 <__ieee754_pow+0x138>
 8013d6e:	4610      	mov	r0, r2
 8013d70:	4619      	mov	r1, r3
 8013d72:	f7ec fc59 	bl	8000628 <__aeabi_dmul>
 8013d76:	e7e7      	b.n	8013d48 <__ieee754_pow+0x108>
 8013d78:	493e      	ldr	r1, [pc, #248]	; (8013e74 <__ieee754_pow+0x234>)
 8013d7a:	428f      	cmp	r7, r1
 8013d7c:	d10d      	bne.n	8013d9a <__ieee754_pow+0x15a>
 8013d7e:	f1b9 0f00 	cmp.w	r9, #0
 8013d82:	db0a      	blt.n	8013d9a <__ieee754_pow+0x15a>
 8013d84:	ec43 2b10 	vmov	d0, r2, r3
 8013d88:	b00d      	add	sp, #52	; 0x34
 8013d8a:	ecbd 8b06 	vpop	{d8-d10}
 8013d8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d92:	f000 bc77 	b.w	8014684 <__ieee754_sqrt>
 8013d96:	2100      	movs	r1, #0
 8013d98:	9100      	str	r1, [sp, #0]
 8013d9a:	ec43 2b10 	vmov	d0, r2, r3
 8013d9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013da2:	f000 fd23 	bl	80147ec <fabs>
 8013da6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013daa:	ec51 0b10 	vmov	r0, r1, d0
 8013dae:	f1b8 0f00 	cmp.w	r8, #0
 8013db2:	d12a      	bne.n	8013e0a <__ieee754_pow+0x1ca>
 8013db4:	b12c      	cbz	r4, 8013dc2 <__ieee754_pow+0x182>
 8013db6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8013e6c <__ieee754_pow+0x22c>
 8013dba:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8013dbe:	45e6      	cmp	lr, ip
 8013dc0:	d123      	bne.n	8013e0a <__ieee754_pow+0x1ca>
 8013dc2:	2f00      	cmp	r7, #0
 8013dc4:	da05      	bge.n	8013dd2 <__ieee754_pow+0x192>
 8013dc6:	4602      	mov	r2, r0
 8013dc8:	460b      	mov	r3, r1
 8013dca:	2000      	movs	r0, #0
 8013dcc:	4927      	ldr	r1, [pc, #156]	; (8013e6c <__ieee754_pow+0x22c>)
 8013dce:	f7ec fd55 	bl	800087c <__aeabi_ddiv>
 8013dd2:	f1b9 0f00 	cmp.w	r9, #0
 8013dd6:	dab7      	bge.n	8013d48 <__ieee754_pow+0x108>
 8013dd8:	9b00      	ldr	r3, [sp, #0]
 8013dda:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013dde:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013de2:	4323      	orrs	r3, r4
 8013de4:	d108      	bne.n	8013df8 <__ieee754_pow+0x1b8>
 8013de6:	4602      	mov	r2, r0
 8013de8:	460b      	mov	r3, r1
 8013dea:	4610      	mov	r0, r2
 8013dec:	4619      	mov	r1, r3
 8013dee:	f7ec fa63 	bl	80002b8 <__aeabi_dsub>
 8013df2:	4602      	mov	r2, r0
 8013df4:	460b      	mov	r3, r1
 8013df6:	e78d      	b.n	8013d14 <__ieee754_pow+0xd4>
 8013df8:	9b00      	ldr	r3, [sp, #0]
 8013dfa:	2b01      	cmp	r3, #1
 8013dfc:	d1a4      	bne.n	8013d48 <__ieee754_pow+0x108>
 8013dfe:	4602      	mov	r2, r0
 8013e00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013e04:	4610      	mov	r0, r2
 8013e06:	4619      	mov	r1, r3
 8013e08:	e79e      	b.n	8013d48 <__ieee754_pow+0x108>
 8013e0a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8013e0e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8013e12:	950a      	str	r5, [sp, #40]	; 0x28
 8013e14:	9d00      	ldr	r5, [sp, #0]
 8013e16:	46ac      	mov	ip, r5
 8013e18:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8013e1a:	ea5c 0505 	orrs.w	r5, ip, r5
 8013e1e:	d0e4      	beq.n	8013dea <__ieee754_pow+0x1aa>
 8013e20:	4b15      	ldr	r3, [pc, #84]	; (8013e78 <__ieee754_pow+0x238>)
 8013e22:	429e      	cmp	r6, r3
 8013e24:	f340 80fc 	ble.w	8014020 <__ieee754_pow+0x3e0>
 8013e28:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8013e2c:	429e      	cmp	r6, r3
 8013e2e:	4b10      	ldr	r3, [pc, #64]	; (8013e70 <__ieee754_pow+0x230>)
 8013e30:	dd07      	ble.n	8013e42 <__ieee754_pow+0x202>
 8013e32:	429c      	cmp	r4, r3
 8013e34:	dc0a      	bgt.n	8013e4c <__ieee754_pow+0x20c>
 8013e36:	2f00      	cmp	r7, #0
 8013e38:	da84      	bge.n	8013d44 <__ieee754_pow+0x104>
 8013e3a:	a307      	add	r3, pc, #28	; (adr r3, 8013e58 <__ieee754_pow+0x218>)
 8013e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e40:	e795      	b.n	8013d6e <__ieee754_pow+0x12e>
 8013e42:	429c      	cmp	r4, r3
 8013e44:	dbf7      	blt.n	8013e36 <__ieee754_pow+0x1f6>
 8013e46:	4b09      	ldr	r3, [pc, #36]	; (8013e6c <__ieee754_pow+0x22c>)
 8013e48:	429c      	cmp	r4, r3
 8013e4a:	dd17      	ble.n	8013e7c <__ieee754_pow+0x23c>
 8013e4c:	2f00      	cmp	r7, #0
 8013e4e:	dcf4      	bgt.n	8013e3a <__ieee754_pow+0x1fa>
 8013e50:	e778      	b.n	8013d44 <__ieee754_pow+0x104>
 8013e52:	bf00      	nop
 8013e54:	f3af 8000 	nop.w
 8013e58:	8800759c 	.word	0x8800759c
 8013e5c:	7e37e43c 	.word	0x7e37e43c
 8013e60:	7ff00000 	.word	0x7ff00000
 8013e64:	08015027 	.word	0x08015027
 8013e68:	433fffff 	.word	0x433fffff
 8013e6c:	3ff00000 	.word	0x3ff00000
 8013e70:	3fefffff 	.word	0x3fefffff
 8013e74:	3fe00000 	.word	0x3fe00000
 8013e78:	41e00000 	.word	0x41e00000
 8013e7c:	4b64      	ldr	r3, [pc, #400]	; (8014010 <__ieee754_pow+0x3d0>)
 8013e7e:	2200      	movs	r2, #0
 8013e80:	f7ec fa1a 	bl	80002b8 <__aeabi_dsub>
 8013e84:	a356      	add	r3, pc, #344	; (adr r3, 8013fe0 <__ieee754_pow+0x3a0>)
 8013e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e8a:	4604      	mov	r4, r0
 8013e8c:	460d      	mov	r5, r1
 8013e8e:	f7ec fbcb 	bl	8000628 <__aeabi_dmul>
 8013e92:	a355      	add	r3, pc, #340	; (adr r3, 8013fe8 <__ieee754_pow+0x3a8>)
 8013e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e98:	4606      	mov	r6, r0
 8013e9a:	460f      	mov	r7, r1
 8013e9c:	4620      	mov	r0, r4
 8013e9e:	4629      	mov	r1, r5
 8013ea0:	f7ec fbc2 	bl	8000628 <__aeabi_dmul>
 8013ea4:	4b5b      	ldr	r3, [pc, #364]	; (8014014 <__ieee754_pow+0x3d4>)
 8013ea6:	4682      	mov	sl, r0
 8013ea8:	468b      	mov	fp, r1
 8013eaa:	2200      	movs	r2, #0
 8013eac:	4620      	mov	r0, r4
 8013eae:	4629      	mov	r1, r5
 8013eb0:	f7ec fbba 	bl	8000628 <__aeabi_dmul>
 8013eb4:	4602      	mov	r2, r0
 8013eb6:	460b      	mov	r3, r1
 8013eb8:	a14d      	add	r1, pc, #308	; (adr r1, 8013ff0 <__ieee754_pow+0x3b0>)
 8013eba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ebe:	f7ec f9fb 	bl	80002b8 <__aeabi_dsub>
 8013ec2:	4622      	mov	r2, r4
 8013ec4:	462b      	mov	r3, r5
 8013ec6:	f7ec fbaf 	bl	8000628 <__aeabi_dmul>
 8013eca:	4602      	mov	r2, r0
 8013ecc:	460b      	mov	r3, r1
 8013ece:	2000      	movs	r0, #0
 8013ed0:	4951      	ldr	r1, [pc, #324]	; (8014018 <__ieee754_pow+0x3d8>)
 8013ed2:	f7ec f9f1 	bl	80002b8 <__aeabi_dsub>
 8013ed6:	4622      	mov	r2, r4
 8013ed8:	4680      	mov	r8, r0
 8013eda:	4689      	mov	r9, r1
 8013edc:	462b      	mov	r3, r5
 8013ede:	4620      	mov	r0, r4
 8013ee0:	4629      	mov	r1, r5
 8013ee2:	f7ec fba1 	bl	8000628 <__aeabi_dmul>
 8013ee6:	4602      	mov	r2, r0
 8013ee8:	460b      	mov	r3, r1
 8013eea:	4640      	mov	r0, r8
 8013eec:	4649      	mov	r1, r9
 8013eee:	f7ec fb9b 	bl	8000628 <__aeabi_dmul>
 8013ef2:	a341      	add	r3, pc, #260	; (adr r3, 8013ff8 <__ieee754_pow+0x3b8>)
 8013ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ef8:	f7ec fb96 	bl	8000628 <__aeabi_dmul>
 8013efc:	4602      	mov	r2, r0
 8013efe:	460b      	mov	r3, r1
 8013f00:	4650      	mov	r0, sl
 8013f02:	4659      	mov	r1, fp
 8013f04:	f7ec f9d8 	bl	80002b8 <__aeabi_dsub>
 8013f08:	4602      	mov	r2, r0
 8013f0a:	460b      	mov	r3, r1
 8013f0c:	4680      	mov	r8, r0
 8013f0e:	4689      	mov	r9, r1
 8013f10:	4630      	mov	r0, r6
 8013f12:	4639      	mov	r1, r7
 8013f14:	f7ec f9d2 	bl	80002bc <__adddf3>
 8013f18:	2400      	movs	r4, #0
 8013f1a:	4632      	mov	r2, r6
 8013f1c:	463b      	mov	r3, r7
 8013f1e:	4620      	mov	r0, r4
 8013f20:	460d      	mov	r5, r1
 8013f22:	f7ec f9c9 	bl	80002b8 <__aeabi_dsub>
 8013f26:	4602      	mov	r2, r0
 8013f28:	460b      	mov	r3, r1
 8013f2a:	4640      	mov	r0, r8
 8013f2c:	4649      	mov	r1, r9
 8013f2e:	f7ec f9c3 	bl	80002b8 <__aeabi_dsub>
 8013f32:	9b00      	ldr	r3, [sp, #0]
 8013f34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013f36:	3b01      	subs	r3, #1
 8013f38:	4313      	orrs	r3, r2
 8013f3a:	4682      	mov	sl, r0
 8013f3c:	468b      	mov	fp, r1
 8013f3e:	f040 81f1 	bne.w	8014324 <__ieee754_pow+0x6e4>
 8013f42:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8014000 <__ieee754_pow+0x3c0>
 8013f46:	eeb0 8a47 	vmov.f32	s16, s14
 8013f4a:	eef0 8a67 	vmov.f32	s17, s15
 8013f4e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013f52:	2600      	movs	r6, #0
 8013f54:	4632      	mov	r2, r6
 8013f56:	463b      	mov	r3, r7
 8013f58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013f5c:	f7ec f9ac 	bl	80002b8 <__aeabi_dsub>
 8013f60:	4622      	mov	r2, r4
 8013f62:	462b      	mov	r3, r5
 8013f64:	f7ec fb60 	bl	8000628 <__aeabi_dmul>
 8013f68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013f6c:	4680      	mov	r8, r0
 8013f6e:	4689      	mov	r9, r1
 8013f70:	4650      	mov	r0, sl
 8013f72:	4659      	mov	r1, fp
 8013f74:	f7ec fb58 	bl	8000628 <__aeabi_dmul>
 8013f78:	4602      	mov	r2, r0
 8013f7a:	460b      	mov	r3, r1
 8013f7c:	4640      	mov	r0, r8
 8013f7e:	4649      	mov	r1, r9
 8013f80:	f7ec f99c 	bl	80002bc <__adddf3>
 8013f84:	4632      	mov	r2, r6
 8013f86:	463b      	mov	r3, r7
 8013f88:	4680      	mov	r8, r0
 8013f8a:	4689      	mov	r9, r1
 8013f8c:	4620      	mov	r0, r4
 8013f8e:	4629      	mov	r1, r5
 8013f90:	f7ec fb4a 	bl	8000628 <__aeabi_dmul>
 8013f94:	460b      	mov	r3, r1
 8013f96:	4604      	mov	r4, r0
 8013f98:	460d      	mov	r5, r1
 8013f9a:	4602      	mov	r2, r0
 8013f9c:	4649      	mov	r1, r9
 8013f9e:	4640      	mov	r0, r8
 8013fa0:	f7ec f98c 	bl	80002bc <__adddf3>
 8013fa4:	4b1d      	ldr	r3, [pc, #116]	; (801401c <__ieee754_pow+0x3dc>)
 8013fa6:	4299      	cmp	r1, r3
 8013fa8:	ec45 4b19 	vmov	d9, r4, r5
 8013fac:	4606      	mov	r6, r0
 8013fae:	460f      	mov	r7, r1
 8013fb0:	468b      	mov	fp, r1
 8013fb2:	f340 82fe 	ble.w	80145b2 <__ieee754_pow+0x972>
 8013fb6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8013fba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8013fbe:	4303      	orrs	r3, r0
 8013fc0:	f000 81f0 	beq.w	80143a4 <__ieee754_pow+0x764>
 8013fc4:	a310      	add	r3, pc, #64	; (adr r3, 8014008 <__ieee754_pow+0x3c8>)
 8013fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fca:	ec51 0b18 	vmov	r0, r1, d8
 8013fce:	f7ec fb2b 	bl	8000628 <__aeabi_dmul>
 8013fd2:	a30d      	add	r3, pc, #52	; (adr r3, 8014008 <__ieee754_pow+0x3c8>)
 8013fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fd8:	e6cb      	b.n	8013d72 <__ieee754_pow+0x132>
 8013fda:	bf00      	nop
 8013fdc:	f3af 8000 	nop.w
 8013fe0:	60000000 	.word	0x60000000
 8013fe4:	3ff71547 	.word	0x3ff71547
 8013fe8:	f85ddf44 	.word	0xf85ddf44
 8013fec:	3e54ae0b 	.word	0x3e54ae0b
 8013ff0:	55555555 	.word	0x55555555
 8013ff4:	3fd55555 	.word	0x3fd55555
 8013ff8:	652b82fe 	.word	0x652b82fe
 8013ffc:	3ff71547 	.word	0x3ff71547
 8014000:	00000000 	.word	0x00000000
 8014004:	bff00000 	.word	0xbff00000
 8014008:	8800759c 	.word	0x8800759c
 801400c:	7e37e43c 	.word	0x7e37e43c
 8014010:	3ff00000 	.word	0x3ff00000
 8014014:	3fd00000 	.word	0x3fd00000
 8014018:	3fe00000 	.word	0x3fe00000
 801401c:	408fffff 	.word	0x408fffff
 8014020:	4bd7      	ldr	r3, [pc, #860]	; (8014380 <__ieee754_pow+0x740>)
 8014022:	ea03 0309 	and.w	r3, r3, r9
 8014026:	2200      	movs	r2, #0
 8014028:	b92b      	cbnz	r3, 8014036 <__ieee754_pow+0x3f6>
 801402a:	4bd6      	ldr	r3, [pc, #856]	; (8014384 <__ieee754_pow+0x744>)
 801402c:	f7ec fafc 	bl	8000628 <__aeabi_dmul>
 8014030:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8014034:	460c      	mov	r4, r1
 8014036:	1523      	asrs	r3, r4, #20
 8014038:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801403c:	4413      	add	r3, r2
 801403e:	9309      	str	r3, [sp, #36]	; 0x24
 8014040:	4bd1      	ldr	r3, [pc, #836]	; (8014388 <__ieee754_pow+0x748>)
 8014042:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8014046:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801404a:	429c      	cmp	r4, r3
 801404c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014050:	dd08      	ble.n	8014064 <__ieee754_pow+0x424>
 8014052:	4bce      	ldr	r3, [pc, #824]	; (801438c <__ieee754_pow+0x74c>)
 8014054:	429c      	cmp	r4, r3
 8014056:	f340 8163 	ble.w	8014320 <__ieee754_pow+0x6e0>
 801405a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801405c:	3301      	adds	r3, #1
 801405e:	9309      	str	r3, [sp, #36]	; 0x24
 8014060:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8014064:	2400      	movs	r4, #0
 8014066:	00e3      	lsls	r3, r4, #3
 8014068:	930b      	str	r3, [sp, #44]	; 0x2c
 801406a:	4bc9      	ldr	r3, [pc, #804]	; (8014390 <__ieee754_pow+0x750>)
 801406c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014070:	ed93 7b00 	vldr	d7, [r3]
 8014074:	4629      	mov	r1, r5
 8014076:	ec53 2b17 	vmov	r2, r3, d7
 801407a:	eeb0 8a47 	vmov.f32	s16, s14
 801407e:	eef0 8a67 	vmov.f32	s17, s15
 8014082:	4682      	mov	sl, r0
 8014084:	f7ec f918 	bl	80002b8 <__aeabi_dsub>
 8014088:	4652      	mov	r2, sl
 801408a:	4606      	mov	r6, r0
 801408c:	460f      	mov	r7, r1
 801408e:	462b      	mov	r3, r5
 8014090:	ec51 0b18 	vmov	r0, r1, d8
 8014094:	f7ec f912 	bl	80002bc <__adddf3>
 8014098:	4602      	mov	r2, r0
 801409a:	460b      	mov	r3, r1
 801409c:	2000      	movs	r0, #0
 801409e:	49bd      	ldr	r1, [pc, #756]	; (8014394 <__ieee754_pow+0x754>)
 80140a0:	f7ec fbec 	bl	800087c <__aeabi_ddiv>
 80140a4:	ec41 0b19 	vmov	d9, r0, r1
 80140a8:	4602      	mov	r2, r0
 80140aa:	460b      	mov	r3, r1
 80140ac:	4630      	mov	r0, r6
 80140ae:	4639      	mov	r1, r7
 80140b0:	f7ec faba 	bl	8000628 <__aeabi_dmul>
 80140b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80140b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80140bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80140c0:	2300      	movs	r3, #0
 80140c2:	9304      	str	r3, [sp, #16]
 80140c4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80140c8:	46ab      	mov	fp, r5
 80140ca:	106d      	asrs	r5, r5, #1
 80140cc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80140d0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80140d4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80140d8:	2200      	movs	r2, #0
 80140da:	4640      	mov	r0, r8
 80140dc:	4649      	mov	r1, r9
 80140de:	4614      	mov	r4, r2
 80140e0:	461d      	mov	r5, r3
 80140e2:	f7ec faa1 	bl	8000628 <__aeabi_dmul>
 80140e6:	4602      	mov	r2, r0
 80140e8:	460b      	mov	r3, r1
 80140ea:	4630      	mov	r0, r6
 80140ec:	4639      	mov	r1, r7
 80140ee:	f7ec f8e3 	bl	80002b8 <__aeabi_dsub>
 80140f2:	ec53 2b18 	vmov	r2, r3, d8
 80140f6:	4606      	mov	r6, r0
 80140f8:	460f      	mov	r7, r1
 80140fa:	4620      	mov	r0, r4
 80140fc:	4629      	mov	r1, r5
 80140fe:	f7ec f8db 	bl	80002b8 <__aeabi_dsub>
 8014102:	4602      	mov	r2, r0
 8014104:	460b      	mov	r3, r1
 8014106:	4650      	mov	r0, sl
 8014108:	4659      	mov	r1, fp
 801410a:	f7ec f8d5 	bl	80002b8 <__aeabi_dsub>
 801410e:	4642      	mov	r2, r8
 8014110:	464b      	mov	r3, r9
 8014112:	f7ec fa89 	bl	8000628 <__aeabi_dmul>
 8014116:	4602      	mov	r2, r0
 8014118:	460b      	mov	r3, r1
 801411a:	4630      	mov	r0, r6
 801411c:	4639      	mov	r1, r7
 801411e:	f7ec f8cb 	bl	80002b8 <__aeabi_dsub>
 8014122:	ec53 2b19 	vmov	r2, r3, d9
 8014126:	f7ec fa7f 	bl	8000628 <__aeabi_dmul>
 801412a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801412e:	ec41 0b18 	vmov	d8, r0, r1
 8014132:	4610      	mov	r0, r2
 8014134:	4619      	mov	r1, r3
 8014136:	f7ec fa77 	bl	8000628 <__aeabi_dmul>
 801413a:	a37d      	add	r3, pc, #500	; (adr r3, 8014330 <__ieee754_pow+0x6f0>)
 801413c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014140:	4604      	mov	r4, r0
 8014142:	460d      	mov	r5, r1
 8014144:	f7ec fa70 	bl	8000628 <__aeabi_dmul>
 8014148:	a37b      	add	r3, pc, #492	; (adr r3, 8014338 <__ieee754_pow+0x6f8>)
 801414a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801414e:	f7ec f8b5 	bl	80002bc <__adddf3>
 8014152:	4622      	mov	r2, r4
 8014154:	462b      	mov	r3, r5
 8014156:	f7ec fa67 	bl	8000628 <__aeabi_dmul>
 801415a:	a379      	add	r3, pc, #484	; (adr r3, 8014340 <__ieee754_pow+0x700>)
 801415c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014160:	f7ec f8ac 	bl	80002bc <__adddf3>
 8014164:	4622      	mov	r2, r4
 8014166:	462b      	mov	r3, r5
 8014168:	f7ec fa5e 	bl	8000628 <__aeabi_dmul>
 801416c:	a376      	add	r3, pc, #472	; (adr r3, 8014348 <__ieee754_pow+0x708>)
 801416e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014172:	f7ec f8a3 	bl	80002bc <__adddf3>
 8014176:	4622      	mov	r2, r4
 8014178:	462b      	mov	r3, r5
 801417a:	f7ec fa55 	bl	8000628 <__aeabi_dmul>
 801417e:	a374      	add	r3, pc, #464	; (adr r3, 8014350 <__ieee754_pow+0x710>)
 8014180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014184:	f7ec f89a 	bl	80002bc <__adddf3>
 8014188:	4622      	mov	r2, r4
 801418a:	462b      	mov	r3, r5
 801418c:	f7ec fa4c 	bl	8000628 <__aeabi_dmul>
 8014190:	a371      	add	r3, pc, #452	; (adr r3, 8014358 <__ieee754_pow+0x718>)
 8014192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014196:	f7ec f891 	bl	80002bc <__adddf3>
 801419a:	4622      	mov	r2, r4
 801419c:	4606      	mov	r6, r0
 801419e:	460f      	mov	r7, r1
 80141a0:	462b      	mov	r3, r5
 80141a2:	4620      	mov	r0, r4
 80141a4:	4629      	mov	r1, r5
 80141a6:	f7ec fa3f 	bl	8000628 <__aeabi_dmul>
 80141aa:	4602      	mov	r2, r0
 80141ac:	460b      	mov	r3, r1
 80141ae:	4630      	mov	r0, r6
 80141b0:	4639      	mov	r1, r7
 80141b2:	f7ec fa39 	bl	8000628 <__aeabi_dmul>
 80141b6:	4642      	mov	r2, r8
 80141b8:	4604      	mov	r4, r0
 80141ba:	460d      	mov	r5, r1
 80141bc:	464b      	mov	r3, r9
 80141be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80141c2:	f7ec f87b 	bl	80002bc <__adddf3>
 80141c6:	ec53 2b18 	vmov	r2, r3, d8
 80141ca:	f7ec fa2d 	bl	8000628 <__aeabi_dmul>
 80141ce:	4622      	mov	r2, r4
 80141d0:	462b      	mov	r3, r5
 80141d2:	f7ec f873 	bl	80002bc <__adddf3>
 80141d6:	4642      	mov	r2, r8
 80141d8:	4682      	mov	sl, r0
 80141da:	468b      	mov	fp, r1
 80141dc:	464b      	mov	r3, r9
 80141de:	4640      	mov	r0, r8
 80141e0:	4649      	mov	r1, r9
 80141e2:	f7ec fa21 	bl	8000628 <__aeabi_dmul>
 80141e6:	4b6c      	ldr	r3, [pc, #432]	; (8014398 <__ieee754_pow+0x758>)
 80141e8:	2200      	movs	r2, #0
 80141ea:	4606      	mov	r6, r0
 80141ec:	460f      	mov	r7, r1
 80141ee:	f7ec f865 	bl	80002bc <__adddf3>
 80141f2:	4652      	mov	r2, sl
 80141f4:	465b      	mov	r3, fp
 80141f6:	f7ec f861 	bl	80002bc <__adddf3>
 80141fa:	9c04      	ldr	r4, [sp, #16]
 80141fc:	460d      	mov	r5, r1
 80141fe:	4622      	mov	r2, r4
 8014200:	460b      	mov	r3, r1
 8014202:	4640      	mov	r0, r8
 8014204:	4649      	mov	r1, r9
 8014206:	f7ec fa0f 	bl	8000628 <__aeabi_dmul>
 801420a:	4b63      	ldr	r3, [pc, #396]	; (8014398 <__ieee754_pow+0x758>)
 801420c:	4680      	mov	r8, r0
 801420e:	4689      	mov	r9, r1
 8014210:	2200      	movs	r2, #0
 8014212:	4620      	mov	r0, r4
 8014214:	4629      	mov	r1, r5
 8014216:	f7ec f84f 	bl	80002b8 <__aeabi_dsub>
 801421a:	4632      	mov	r2, r6
 801421c:	463b      	mov	r3, r7
 801421e:	f7ec f84b 	bl	80002b8 <__aeabi_dsub>
 8014222:	4602      	mov	r2, r0
 8014224:	460b      	mov	r3, r1
 8014226:	4650      	mov	r0, sl
 8014228:	4659      	mov	r1, fp
 801422a:	f7ec f845 	bl	80002b8 <__aeabi_dsub>
 801422e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014232:	f7ec f9f9 	bl	8000628 <__aeabi_dmul>
 8014236:	4622      	mov	r2, r4
 8014238:	4606      	mov	r6, r0
 801423a:	460f      	mov	r7, r1
 801423c:	462b      	mov	r3, r5
 801423e:	ec51 0b18 	vmov	r0, r1, d8
 8014242:	f7ec f9f1 	bl	8000628 <__aeabi_dmul>
 8014246:	4602      	mov	r2, r0
 8014248:	460b      	mov	r3, r1
 801424a:	4630      	mov	r0, r6
 801424c:	4639      	mov	r1, r7
 801424e:	f7ec f835 	bl	80002bc <__adddf3>
 8014252:	4606      	mov	r6, r0
 8014254:	460f      	mov	r7, r1
 8014256:	4602      	mov	r2, r0
 8014258:	460b      	mov	r3, r1
 801425a:	4640      	mov	r0, r8
 801425c:	4649      	mov	r1, r9
 801425e:	f7ec f82d 	bl	80002bc <__adddf3>
 8014262:	9c04      	ldr	r4, [sp, #16]
 8014264:	a33e      	add	r3, pc, #248	; (adr r3, 8014360 <__ieee754_pow+0x720>)
 8014266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801426a:	4620      	mov	r0, r4
 801426c:	460d      	mov	r5, r1
 801426e:	f7ec f9db 	bl	8000628 <__aeabi_dmul>
 8014272:	4642      	mov	r2, r8
 8014274:	ec41 0b18 	vmov	d8, r0, r1
 8014278:	464b      	mov	r3, r9
 801427a:	4620      	mov	r0, r4
 801427c:	4629      	mov	r1, r5
 801427e:	f7ec f81b 	bl	80002b8 <__aeabi_dsub>
 8014282:	4602      	mov	r2, r0
 8014284:	460b      	mov	r3, r1
 8014286:	4630      	mov	r0, r6
 8014288:	4639      	mov	r1, r7
 801428a:	f7ec f815 	bl	80002b8 <__aeabi_dsub>
 801428e:	a336      	add	r3, pc, #216	; (adr r3, 8014368 <__ieee754_pow+0x728>)
 8014290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014294:	f7ec f9c8 	bl	8000628 <__aeabi_dmul>
 8014298:	a335      	add	r3, pc, #212	; (adr r3, 8014370 <__ieee754_pow+0x730>)
 801429a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801429e:	4606      	mov	r6, r0
 80142a0:	460f      	mov	r7, r1
 80142a2:	4620      	mov	r0, r4
 80142a4:	4629      	mov	r1, r5
 80142a6:	f7ec f9bf 	bl	8000628 <__aeabi_dmul>
 80142aa:	4602      	mov	r2, r0
 80142ac:	460b      	mov	r3, r1
 80142ae:	4630      	mov	r0, r6
 80142b0:	4639      	mov	r1, r7
 80142b2:	f7ec f803 	bl	80002bc <__adddf3>
 80142b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80142b8:	4b38      	ldr	r3, [pc, #224]	; (801439c <__ieee754_pow+0x75c>)
 80142ba:	4413      	add	r3, r2
 80142bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142c0:	f7eb fffc 	bl	80002bc <__adddf3>
 80142c4:	4682      	mov	sl, r0
 80142c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80142c8:	468b      	mov	fp, r1
 80142ca:	f7ec f943 	bl	8000554 <__aeabi_i2d>
 80142ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80142d0:	4b33      	ldr	r3, [pc, #204]	; (80143a0 <__ieee754_pow+0x760>)
 80142d2:	4413      	add	r3, r2
 80142d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80142d8:	4606      	mov	r6, r0
 80142da:	460f      	mov	r7, r1
 80142dc:	4652      	mov	r2, sl
 80142de:	465b      	mov	r3, fp
 80142e0:	ec51 0b18 	vmov	r0, r1, d8
 80142e4:	f7eb ffea 	bl	80002bc <__adddf3>
 80142e8:	4642      	mov	r2, r8
 80142ea:	464b      	mov	r3, r9
 80142ec:	f7eb ffe6 	bl	80002bc <__adddf3>
 80142f0:	4632      	mov	r2, r6
 80142f2:	463b      	mov	r3, r7
 80142f4:	f7eb ffe2 	bl	80002bc <__adddf3>
 80142f8:	9c04      	ldr	r4, [sp, #16]
 80142fa:	4632      	mov	r2, r6
 80142fc:	463b      	mov	r3, r7
 80142fe:	4620      	mov	r0, r4
 8014300:	460d      	mov	r5, r1
 8014302:	f7eb ffd9 	bl	80002b8 <__aeabi_dsub>
 8014306:	4642      	mov	r2, r8
 8014308:	464b      	mov	r3, r9
 801430a:	f7eb ffd5 	bl	80002b8 <__aeabi_dsub>
 801430e:	ec53 2b18 	vmov	r2, r3, d8
 8014312:	f7eb ffd1 	bl	80002b8 <__aeabi_dsub>
 8014316:	4602      	mov	r2, r0
 8014318:	460b      	mov	r3, r1
 801431a:	4650      	mov	r0, sl
 801431c:	4659      	mov	r1, fp
 801431e:	e606      	b.n	8013f2e <__ieee754_pow+0x2ee>
 8014320:	2401      	movs	r4, #1
 8014322:	e6a0      	b.n	8014066 <__ieee754_pow+0x426>
 8014324:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8014378 <__ieee754_pow+0x738>
 8014328:	e60d      	b.n	8013f46 <__ieee754_pow+0x306>
 801432a:	bf00      	nop
 801432c:	f3af 8000 	nop.w
 8014330:	4a454eef 	.word	0x4a454eef
 8014334:	3fca7e28 	.word	0x3fca7e28
 8014338:	93c9db65 	.word	0x93c9db65
 801433c:	3fcd864a 	.word	0x3fcd864a
 8014340:	a91d4101 	.word	0xa91d4101
 8014344:	3fd17460 	.word	0x3fd17460
 8014348:	518f264d 	.word	0x518f264d
 801434c:	3fd55555 	.word	0x3fd55555
 8014350:	db6fabff 	.word	0xdb6fabff
 8014354:	3fdb6db6 	.word	0x3fdb6db6
 8014358:	33333303 	.word	0x33333303
 801435c:	3fe33333 	.word	0x3fe33333
 8014360:	e0000000 	.word	0xe0000000
 8014364:	3feec709 	.word	0x3feec709
 8014368:	dc3a03fd 	.word	0xdc3a03fd
 801436c:	3feec709 	.word	0x3feec709
 8014370:	145b01f5 	.word	0x145b01f5
 8014374:	be3e2fe0 	.word	0xbe3e2fe0
 8014378:	00000000 	.word	0x00000000
 801437c:	3ff00000 	.word	0x3ff00000
 8014380:	7ff00000 	.word	0x7ff00000
 8014384:	43400000 	.word	0x43400000
 8014388:	0003988e 	.word	0x0003988e
 801438c:	000bb679 	.word	0x000bb679
 8014390:	080154a8 	.word	0x080154a8
 8014394:	3ff00000 	.word	0x3ff00000
 8014398:	40080000 	.word	0x40080000
 801439c:	080154c8 	.word	0x080154c8
 80143a0:	080154b8 	.word	0x080154b8
 80143a4:	a3b5      	add	r3, pc, #724	; (adr r3, 801467c <__ieee754_pow+0xa3c>)
 80143a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143aa:	4640      	mov	r0, r8
 80143ac:	4649      	mov	r1, r9
 80143ae:	f7eb ff85 	bl	80002bc <__adddf3>
 80143b2:	4622      	mov	r2, r4
 80143b4:	ec41 0b1a 	vmov	d10, r0, r1
 80143b8:	462b      	mov	r3, r5
 80143ba:	4630      	mov	r0, r6
 80143bc:	4639      	mov	r1, r7
 80143be:	f7eb ff7b 	bl	80002b8 <__aeabi_dsub>
 80143c2:	4602      	mov	r2, r0
 80143c4:	460b      	mov	r3, r1
 80143c6:	ec51 0b1a 	vmov	r0, r1, d10
 80143ca:	f7ec fbbd 	bl	8000b48 <__aeabi_dcmpgt>
 80143ce:	2800      	cmp	r0, #0
 80143d0:	f47f adf8 	bne.w	8013fc4 <__ieee754_pow+0x384>
 80143d4:	4aa4      	ldr	r2, [pc, #656]	; (8014668 <__ieee754_pow+0xa28>)
 80143d6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80143da:	4293      	cmp	r3, r2
 80143dc:	f340 810b 	ble.w	80145f6 <__ieee754_pow+0x9b6>
 80143e0:	151b      	asrs	r3, r3, #20
 80143e2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80143e6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80143ea:	fa4a f303 	asr.w	r3, sl, r3
 80143ee:	445b      	add	r3, fp
 80143f0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80143f4:	4e9d      	ldr	r6, [pc, #628]	; (801466c <__ieee754_pow+0xa2c>)
 80143f6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80143fa:	4116      	asrs	r6, r2
 80143fc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8014400:	2000      	movs	r0, #0
 8014402:	ea23 0106 	bic.w	r1, r3, r6
 8014406:	f1c2 0214 	rsb	r2, r2, #20
 801440a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801440e:	fa4a fa02 	asr.w	sl, sl, r2
 8014412:	f1bb 0f00 	cmp.w	fp, #0
 8014416:	4602      	mov	r2, r0
 8014418:	460b      	mov	r3, r1
 801441a:	4620      	mov	r0, r4
 801441c:	4629      	mov	r1, r5
 801441e:	bfb8      	it	lt
 8014420:	f1ca 0a00 	rsblt	sl, sl, #0
 8014424:	f7eb ff48 	bl	80002b8 <__aeabi_dsub>
 8014428:	ec41 0b19 	vmov	d9, r0, r1
 801442c:	4642      	mov	r2, r8
 801442e:	464b      	mov	r3, r9
 8014430:	ec51 0b19 	vmov	r0, r1, d9
 8014434:	f7eb ff42 	bl	80002bc <__adddf3>
 8014438:	2400      	movs	r4, #0
 801443a:	a379      	add	r3, pc, #484	; (adr r3, 8014620 <__ieee754_pow+0x9e0>)
 801443c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014440:	4620      	mov	r0, r4
 8014442:	460d      	mov	r5, r1
 8014444:	f7ec f8f0 	bl	8000628 <__aeabi_dmul>
 8014448:	ec53 2b19 	vmov	r2, r3, d9
 801444c:	4606      	mov	r6, r0
 801444e:	460f      	mov	r7, r1
 8014450:	4620      	mov	r0, r4
 8014452:	4629      	mov	r1, r5
 8014454:	f7eb ff30 	bl	80002b8 <__aeabi_dsub>
 8014458:	4602      	mov	r2, r0
 801445a:	460b      	mov	r3, r1
 801445c:	4640      	mov	r0, r8
 801445e:	4649      	mov	r1, r9
 8014460:	f7eb ff2a 	bl	80002b8 <__aeabi_dsub>
 8014464:	a370      	add	r3, pc, #448	; (adr r3, 8014628 <__ieee754_pow+0x9e8>)
 8014466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801446a:	f7ec f8dd 	bl	8000628 <__aeabi_dmul>
 801446e:	a370      	add	r3, pc, #448	; (adr r3, 8014630 <__ieee754_pow+0x9f0>)
 8014470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014474:	4680      	mov	r8, r0
 8014476:	4689      	mov	r9, r1
 8014478:	4620      	mov	r0, r4
 801447a:	4629      	mov	r1, r5
 801447c:	f7ec f8d4 	bl	8000628 <__aeabi_dmul>
 8014480:	4602      	mov	r2, r0
 8014482:	460b      	mov	r3, r1
 8014484:	4640      	mov	r0, r8
 8014486:	4649      	mov	r1, r9
 8014488:	f7eb ff18 	bl	80002bc <__adddf3>
 801448c:	4604      	mov	r4, r0
 801448e:	460d      	mov	r5, r1
 8014490:	4602      	mov	r2, r0
 8014492:	460b      	mov	r3, r1
 8014494:	4630      	mov	r0, r6
 8014496:	4639      	mov	r1, r7
 8014498:	f7eb ff10 	bl	80002bc <__adddf3>
 801449c:	4632      	mov	r2, r6
 801449e:	463b      	mov	r3, r7
 80144a0:	4680      	mov	r8, r0
 80144a2:	4689      	mov	r9, r1
 80144a4:	f7eb ff08 	bl	80002b8 <__aeabi_dsub>
 80144a8:	4602      	mov	r2, r0
 80144aa:	460b      	mov	r3, r1
 80144ac:	4620      	mov	r0, r4
 80144ae:	4629      	mov	r1, r5
 80144b0:	f7eb ff02 	bl	80002b8 <__aeabi_dsub>
 80144b4:	4642      	mov	r2, r8
 80144b6:	4606      	mov	r6, r0
 80144b8:	460f      	mov	r7, r1
 80144ba:	464b      	mov	r3, r9
 80144bc:	4640      	mov	r0, r8
 80144be:	4649      	mov	r1, r9
 80144c0:	f7ec f8b2 	bl	8000628 <__aeabi_dmul>
 80144c4:	a35c      	add	r3, pc, #368	; (adr r3, 8014638 <__ieee754_pow+0x9f8>)
 80144c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144ca:	4604      	mov	r4, r0
 80144cc:	460d      	mov	r5, r1
 80144ce:	f7ec f8ab 	bl	8000628 <__aeabi_dmul>
 80144d2:	a35b      	add	r3, pc, #364	; (adr r3, 8014640 <__ieee754_pow+0xa00>)
 80144d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144d8:	f7eb feee 	bl	80002b8 <__aeabi_dsub>
 80144dc:	4622      	mov	r2, r4
 80144de:	462b      	mov	r3, r5
 80144e0:	f7ec f8a2 	bl	8000628 <__aeabi_dmul>
 80144e4:	a358      	add	r3, pc, #352	; (adr r3, 8014648 <__ieee754_pow+0xa08>)
 80144e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144ea:	f7eb fee7 	bl	80002bc <__adddf3>
 80144ee:	4622      	mov	r2, r4
 80144f0:	462b      	mov	r3, r5
 80144f2:	f7ec f899 	bl	8000628 <__aeabi_dmul>
 80144f6:	a356      	add	r3, pc, #344	; (adr r3, 8014650 <__ieee754_pow+0xa10>)
 80144f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144fc:	f7eb fedc 	bl	80002b8 <__aeabi_dsub>
 8014500:	4622      	mov	r2, r4
 8014502:	462b      	mov	r3, r5
 8014504:	f7ec f890 	bl	8000628 <__aeabi_dmul>
 8014508:	a353      	add	r3, pc, #332	; (adr r3, 8014658 <__ieee754_pow+0xa18>)
 801450a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801450e:	f7eb fed5 	bl	80002bc <__adddf3>
 8014512:	4622      	mov	r2, r4
 8014514:	462b      	mov	r3, r5
 8014516:	f7ec f887 	bl	8000628 <__aeabi_dmul>
 801451a:	4602      	mov	r2, r0
 801451c:	460b      	mov	r3, r1
 801451e:	4640      	mov	r0, r8
 8014520:	4649      	mov	r1, r9
 8014522:	f7eb fec9 	bl	80002b8 <__aeabi_dsub>
 8014526:	4604      	mov	r4, r0
 8014528:	460d      	mov	r5, r1
 801452a:	4602      	mov	r2, r0
 801452c:	460b      	mov	r3, r1
 801452e:	4640      	mov	r0, r8
 8014530:	4649      	mov	r1, r9
 8014532:	f7ec f879 	bl	8000628 <__aeabi_dmul>
 8014536:	2200      	movs	r2, #0
 8014538:	ec41 0b19 	vmov	d9, r0, r1
 801453c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014540:	4620      	mov	r0, r4
 8014542:	4629      	mov	r1, r5
 8014544:	f7eb feb8 	bl	80002b8 <__aeabi_dsub>
 8014548:	4602      	mov	r2, r0
 801454a:	460b      	mov	r3, r1
 801454c:	ec51 0b19 	vmov	r0, r1, d9
 8014550:	f7ec f994 	bl	800087c <__aeabi_ddiv>
 8014554:	4632      	mov	r2, r6
 8014556:	4604      	mov	r4, r0
 8014558:	460d      	mov	r5, r1
 801455a:	463b      	mov	r3, r7
 801455c:	4640      	mov	r0, r8
 801455e:	4649      	mov	r1, r9
 8014560:	f7ec f862 	bl	8000628 <__aeabi_dmul>
 8014564:	4632      	mov	r2, r6
 8014566:	463b      	mov	r3, r7
 8014568:	f7eb fea8 	bl	80002bc <__adddf3>
 801456c:	4602      	mov	r2, r0
 801456e:	460b      	mov	r3, r1
 8014570:	4620      	mov	r0, r4
 8014572:	4629      	mov	r1, r5
 8014574:	f7eb fea0 	bl	80002b8 <__aeabi_dsub>
 8014578:	4642      	mov	r2, r8
 801457a:	464b      	mov	r3, r9
 801457c:	f7eb fe9c 	bl	80002b8 <__aeabi_dsub>
 8014580:	460b      	mov	r3, r1
 8014582:	4602      	mov	r2, r0
 8014584:	493a      	ldr	r1, [pc, #232]	; (8014670 <__ieee754_pow+0xa30>)
 8014586:	2000      	movs	r0, #0
 8014588:	f7eb fe96 	bl	80002b8 <__aeabi_dsub>
 801458c:	e9cd 0100 	strd	r0, r1, [sp]
 8014590:	9b01      	ldr	r3, [sp, #4]
 8014592:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8014596:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801459a:	da2f      	bge.n	80145fc <__ieee754_pow+0x9bc>
 801459c:	4650      	mov	r0, sl
 801459e:	ed9d 0b00 	vldr	d0, [sp]
 80145a2:	f000 f9c1 	bl	8014928 <scalbn>
 80145a6:	ec51 0b10 	vmov	r0, r1, d0
 80145aa:	ec53 2b18 	vmov	r2, r3, d8
 80145ae:	f7ff bbe0 	b.w	8013d72 <__ieee754_pow+0x132>
 80145b2:	4b30      	ldr	r3, [pc, #192]	; (8014674 <__ieee754_pow+0xa34>)
 80145b4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80145b8:	429e      	cmp	r6, r3
 80145ba:	f77f af0b 	ble.w	80143d4 <__ieee754_pow+0x794>
 80145be:	4b2e      	ldr	r3, [pc, #184]	; (8014678 <__ieee754_pow+0xa38>)
 80145c0:	440b      	add	r3, r1
 80145c2:	4303      	orrs	r3, r0
 80145c4:	d00b      	beq.n	80145de <__ieee754_pow+0x99e>
 80145c6:	a326      	add	r3, pc, #152	; (adr r3, 8014660 <__ieee754_pow+0xa20>)
 80145c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145cc:	ec51 0b18 	vmov	r0, r1, d8
 80145d0:	f7ec f82a 	bl	8000628 <__aeabi_dmul>
 80145d4:	a322      	add	r3, pc, #136	; (adr r3, 8014660 <__ieee754_pow+0xa20>)
 80145d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145da:	f7ff bbca 	b.w	8013d72 <__ieee754_pow+0x132>
 80145de:	4622      	mov	r2, r4
 80145e0:	462b      	mov	r3, r5
 80145e2:	f7eb fe69 	bl	80002b8 <__aeabi_dsub>
 80145e6:	4642      	mov	r2, r8
 80145e8:	464b      	mov	r3, r9
 80145ea:	f7ec faa3 	bl	8000b34 <__aeabi_dcmpge>
 80145ee:	2800      	cmp	r0, #0
 80145f0:	f43f aef0 	beq.w	80143d4 <__ieee754_pow+0x794>
 80145f4:	e7e7      	b.n	80145c6 <__ieee754_pow+0x986>
 80145f6:	f04f 0a00 	mov.w	sl, #0
 80145fa:	e717      	b.n	801442c <__ieee754_pow+0x7ec>
 80145fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014600:	4619      	mov	r1, r3
 8014602:	e7d2      	b.n	80145aa <__ieee754_pow+0x96a>
 8014604:	491a      	ldr	r1, [pc, #104]	; (8014670 <__ieee754_pow+0xa30>)
 8014606:	2000      	movs	r0, #0
 8014608:	f7ff bb9e 	b.w	8013d48 <__ieee754_pow+0x108>
 801460c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014610:	f7ff bb9a 	b.w	8013d48 <__ieee754_pow+0x108>
 8014614:	9000      	str	r0, [sp, #0]
 8014616:	f7ff bb76 	b.w	8013d06 <__ieee754_pow+0xc6>
 801461a:	2100      	movs	r1, #0
 801461c:	f7ff bb60 	b.w	8013ce0 <__ieee754_pow+0xa0>
 8014620:	00000000 	.word	0x00000000
 8014624:	3fe62e43 	.word	0x3fe62e43
 8014628:	fefa39ef 	.word	0xfefa39ef
 801462c:	3fe62e42 	.word	0x3fe62e42
 8014630:	0ca86c39 	.word	0x0ca86c39
 8014634:	be205c61 	.word	0xbe205c61
 8014638:	72bea4d0 	.word	0x72bea4d0
 801463c:	3e663769 	.word	0x3e663769
 8014640:	c5d26bf1 	.word	0xc5d26bf1
 8014644:	3ebbbd41 	.word	0x3ebbbd41
 8014648:	af25de2c 	.word	0xaf25de2c
 801464c:	3f11566a 	.word	0x3f11566a
 8014650:	16bebd93 	.word	0x16bebd93
 8014654:	3f66c16c 	.word	0x3f66c16c
 8014658:	5555553e 	.word	0x5555553e
 801465c:	3fc55555 	.word	0x3fc55555
 8014660:	c2f8f359 	.word	0xc2f8f359
 8014664:	01a56e1f 	.word	0x01a56e1f
 8014668:	3fe00000 	.word	0x3fe00000
 801466c:	000fffff 	.word	0x000fffff
 8014670:	3ff00000 	.word	0x3ff00000
 8014674:	4090cbff 	.word	0x4090cbff
 8014678:	3f6f3400 	.word	0x3f6f3400
 801467c:	652b82fe 	.word	0x652b82fe
 8014680:	3c971547 	.word	0x3c971547

08014684 <__ieee754_sqrt>:
 8014684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014688:	ec55 4b10 	vmov	r4, r5, d0
 801468c:	4e56      	ldr	r6, [pc, #344]	; (80147e8 <__ieee754_sqrt+0x164>)
 801468e:	43ae      	bics	r6, r5
 8014690:	ee10 0a10 	vmov	r0, s0
 8014694:	ee10 3a10 	vmov	r3, s0
 8014698:	4629      	mov	r1, r5
 801469a:	462a      	mov	r2, r5
 801469c:	d110      	bne.n	80146c0 <__ieee754_sqrt+0x3c>
 801469e:	ee10 2a10 	vmov	r2, s0
 80146a2:	462b      	mov	r3, r5
 80146a4:	f7eb ffc0 	bl	8000628 <__aeabi_dmul>
 80146a8:	4602      	mov	r2, r0
 80146aa:	460b      	mov	r3, r1
 80146ac:	4620      	mov	r0, r4
 80146ae:	4629      	mov	r1, r5
 80146b0:	f7eb fe04 	bl	80002bc <__adddf3>
 80146b4:	4604      	mov	r4, r0
 80146b6:	460d      	mov	r5, r1
 80146b8:	ec45 4b10 	vmov	d0, r4, r5
 80146bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146c0:	2d00      	cmp	r5, #0
 80146c2:	dc10      	bgt.n	80146e6 <__ieee754_sqrt+0x62>
 80146c4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80146c8:	4330      	orrs	r0, r6
 80146ca:	d0f5      	beq.n	80146b8 <__ieee754_sqrt+0x34>
 80146cc:	b15d      	cbz	r5, 80146e6 <__ieee754_sqrt+0x62>
 80146ce:	ee10 2a10 	vmov	r2, s0
 80146d2:	462b      	mov	r3, r5
 80146d4:	ee10 0a10 	vmov	r0, s0
 80146d8:	f7eb fdee 	bl	80002b8 <__aeabi_dsub>
 80146dc:	4602      	mov	r2, r0
 80146de:	460b      	mov	r3, r1
 80146e0:	f7ec f8cc 	bl	800087c <__aeabi_ddiv>
 80146e4:	e7e6      	b.n	80146b4 <__ieee754_sqrt+0x30>
 80146e6:	1509      	asrs	r1, r1, #20
 80146e8:	d076      	beq.n	80147d8 <__ieee754_sqrt+0x154>
 80146ea:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80146ee:	07ce      	lsls	r6, r1, #31
 80146f0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80146f4:	bf5e      	ittt	pl
 80146f6:	0fda      	lsrpl	r2, r3, #31
 80146f8:	005b      	lslpl	r3, r3, #1
 80146fa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80146fe:	0fda      	lsrs	r2, r3, #31
 8014700:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8014704:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8014708:	2000      	movs	r0, #0
 801470a:	106d      	asrs	r5, r5, #1
 801470c:	005b      	lsls	r3, r3, #1
 801470e:	f04f 0e16 	mov.w	lr, #22
 8014712:	4684      	mov	ip, r0
 8014714:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8014718:	eb0c 0401 	add.w	r4, ip, r1
 801471c:	4294      	cmp	r4, r2
 801471e:	bfde      	ittt	le
 8014720:	1b12      	suble	r2, r2, r4
 8014722:	eb04 0c01 	addle.w	ip, r4, r1
 8014726:	1840      	addle	r0, r0, r1
 8014728:	0052      	lsls	r2, r2, #1
 801472a:	f1be 0e01 	subs.w	lr, lr, #1
 801472e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8014732:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8014736:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801473a:	d1ed      	bne.n	8014718 <__ieee754_sqrt+0x94>
 801473c:	4671      	mov	r1, lr
 801473e:	2720      	movs	r7, #32
 8014740:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8014744:	4562      	cmp	r2, ip
 8014746:	eb04 060e 	add.w	r6, r4, lr
 801474a:	dc02      	bgt.n	8014752 <__ieee754_sqrt+0xce>
 801474c:	d113      	bne.n	8014776 <__ieee754_sqrt+0xf2>
 801474e:	429e      	cmp	r6, r3
 8014750:	d811      	bhi.n	8014776 <__ieee754_sqrt+0xf2>
 8014752:	2e00      	cmp	r6, #0
 8014754:	eb06 0e04 	add.w	lr, r6, r4
 8014758:	da43      	bge.n	80147e2 <__ieee754_sqrt+0x15e>
 801475a:	f1be 0f00 	cmp.w	lr, #0
 801475e:	db40      	blt.n	80147e2 <__ieee754_sqrt+0x15e>
 8014760:	f10c 0801 	add.w	r8, ip, #1
 8014764:	eba2 020c 	sub.w	r2, r2, ip
 8014768:	429e      	cmp	r6, r3
 801476a:	bf88      	it	hi
 801476c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8014770:	1b9b      	subs	r3, r3, r6
 8014772:	4421      	add	r1, r4
 8014774:	46c4      	mov	ip, r8
 8014776:	0052      	lsls	r2, r2, #1
 8014778:	3f01      	subs	r7, #1
 801477a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801477e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8014782:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014786:	d1dd      	bne.n	8014744 <__ieee754_sqrt+0xc0>
 8014788:	4313      	orrs	r3, r2
 801478a:	d006      	beq.n	801479a <__ieee754_sqrt+0x116>
 801478c:	1c4c      	adds	r4, r1, #1
 801478e:	bf13      	iteet	ne
 8014790:	3101      	addne	r1, #1
 8014792:	3001      	addeq	r0, #1
 8014794:	4639      	moveq	r1, r7
 8014796:	f021 0101 	bicne.w	r1, r1, #1
 801479a:	1043      	asrs	r3, r0, #1
 801479c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80147a0:	0849      	lsrs	r1, r1, #1
 80147a2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80147a6:	07c2      	lsls	r2, r0, #31
 80147a8:	bf48      	it	mi
 80147aa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80147ae:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80147b2:	460c      	mov	r4, r1
 80147b4:	463d      	mov	r5, r7
 80147b6:	e77f      	b.n	80146b8 <__ieee754_sqrt+0x34>
 80147b8:	0ada      	lsrs	r2, r3, #11
 80147ba:	3815      	subs	r0, #21
 80147bc:	055b      	lsls	r3, r3, #21
 80147be:	2a00      	cmp	r2, #0
 80147c0:	d0fa      	beq.n	80147b8 <__ieee754_sqrt+0x134>
 80147c2:	02d7      	lsls	r7, r2, #11
 80147c4:	d50a      	bpl.n	80147dc <__ieee754_sqrt+0x158>
 80147c6:	f1c1 0420 	rsb	r4, r1, #32
 80147ca:	fa23 f404 	lsr.w	r4, r3, r4
 80147ce:	1e4d      	subs	r5, r1, #1
 80147d0:	408b      	lsls	r3, r1
 80147d2:	4322      	orrs	r2, r4
 80147d4:	1b41      	subs	r1, r0, r5
 80147d6:	e788      	b.n	80146ea <__ieee754_sqrt+0x66>
 80147d8:	4608      	mov	r0, r1
 80147da:	e7f0      	b.n	80147be <__ieee754_sqrt+0x13a>
 80147dc:	0052      	lsls	r2, r2, #1
 80147de:	3101      	adds	r1, #1
 80147e0:	e7ef      	b.n	80147c2 <__ieee754_sqrt+0x13e>
 80147e2:	46e0      	mov	r8, ip
 80147e4:	e7be      	b.n	8014764 <__ieee754_sqrt+0xe0>
 80147e6:	bf00      	nop
 80147e8:	7ff00000 	.word	0x7ff00000

080147ec <fabs>:
 80147ec:	ec51 0b10 	vmov	r0, r1, d0
 80147f0:	ee10 2a10 	vmov	r2, s0
 80147f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80147f8:	ec43 2b10 	vmov	d0, r2, r3
 80147fc:	4770      	bx	lr

080147fe <finite>:
 80147fe:	b082      	sub	sp, #8
 8014800:	ed8d 0b00 	vstr	d0, [sp]
 8014804:	9801      	ldr	r0, [sp, #4]
 8014806:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801480a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801480e:	0fc0      	lsrs	r0, r0, #31
 8014810:	b002      	add	sp, #8
 8014812:	4770      	bx	lr

08014814 <rint>:
 8014814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014816:	ec51 0b10 	vmov	r0, r1, d0
 801481a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801481e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8014822:	2e13      	cmp	r6, #19
 8014824:	ee10 4a10 	vmov	r4, s0
 8014828:	460b      	mov	r3, r1
 801482a:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801482e:	dc58      	bgt.n	80148e2 <rint+0xce>
 8014830:	2e00      	cmp	r6, #0
 8014832:	da2b      	bge.n	801488c <rint+0x78>
 8014834:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8014838:	4302      	orrs	r2, r0
 801483a:	d023      	beq.n	8014884 <rint+0x70>
 801483c:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8014840:	4302      	orrs	r2, r0
 8014842:	4254      	negs	r4, r2
 8014844:	4314      	orrs	r4, r2
 8014846:	0c4b      	lsrs	r3, r1, #17
 8014848:	0b24      	lsrs	r4, r4, #12
 801484a:	045b      	lsls	r3, r3, #17
 801484c:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8014850:	ea44 0103 	orr.w	r1, r4, r3
 8014854:	4b32      	ldr	r3, [pc, #200]	; (8014920 <rint+0x10c>)
 8014856:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801485a:	e9d3 6700 	ldrd	r6, r7, [r3]
 801485e:	4602      	mov	r2, r0
 8014860:	460b      	mov	r3, r1
 8014862:	4630      	mov	r0, r6
 8014864:	4639      	mov	r1, r7
 8014866:	f7eb fd29 	bl	80002bc <__adddf3>
 801486a:	e9cd 0100 	strd	r0, r1, [sp]
 801486e:	463b      	mov	r3, r7
 8014870:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014874:	4632      	mov	r2, r6
 8014876:	f7eb fd1f 	bl	80002b8 <__aeabi_dsub>
 801487a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801487e:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8014882:	4639      	mov	r1, r7
 8014884:	ec41 0b10 	vmov	d0, r0, r1
 8014888:	b003      	add	sp, #12
 801488a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801488c:	4a25      	ldr	r2, [pc, #148]	; (8014924 <rint+0x110>)
 801488e:	4132      	asrs	r2, r6
 8014890:	ea01 0702 	and.w	r7, r1, r2
 8014894:	4307      	orrs	r7, r0
 8014896:	d0f5      	beq.n	8014884 <rint+0x70>
 8014898:	0851      	lsrs	r1, r2, #1
 801489a:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801489e:	4314      	orrs	r4, r2
 80148a0:	d00c      	beq.n	80148bc <rint+0xa8>
 80148a2:	ea23 0201 	bic.w	r2, r3, r1
 80148a6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80148aa:	2e13      	cmp	r6, #19
 80148ac:	fa43 f606 	asr.w	r6, r3, r6
 80148b0:	bf0c      	ite	eq
 80148b2:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80148b6:	2400      	movne	r4, #0
 80148b8:	ea42 0306 	orr.w	r3, r2, r6
 80148bc:	4918      	ldr	r1, [pc, #96]	; (8014920 <rint+0x10c>)
 80148be:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80148c2:	4622      	mov	r2, r4
 80148c4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80148c8:	4620      	mov	r0, r4
 80148ca:	4629      	mov	r1, r5
 80148cc:	f7eb fcf6 	bl	80002bc <__adddf3>
 80148d0:	e9cd 0100 	strd	r0, r1, [sp]
 80148d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80148d8:	4622      	mov	r2, r4
 80148da:	462b      	mov	r3, r5
 80148dc:	f7eb fcec 	bl	80002b8 <__aeabi_dsub>
 80148e0:	e7d0      	b.n	8014884 <rint+0x70>
 80148e2:	2e33      	cmp	r6, #51	; 0x33
 80148e4:	dd07      	ble.n	80148f6 <rint+0xe2>
 80148e6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80148ea:	d1cb      	bne.n	8014884 <rint+0x70>
 80148ec:	ee10 2a10 	vmov	r2, s0
 80148f0:	f7eb fce4 	bl	80002bc <__adddf3>
 80148f4:	e7c6      	b.n	8014884 <rint+0x70>
 80148f6:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80148fa:	f04f 36ff 	mov.w	r6, #4294967295
 80148fe:	40d6      	lsrs	r6, r2
 8014900:	4230      	tst	r0, r6
 8014902:	d0bf      	beq.n	8014884 <rint+0x70>
 8014904:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8014908:	ea4f 0156 	mov.w	r1, r6, lsr #1
 801490c:	bf1f      	itttt	ne
 801490e:	ea24 0101 	bicne.w	r1, r4, r1
 8014912:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8014916:	fa44 f202 	asrne.w	r2, r4, r2
 801491a:	ea41 0402 	orrne.w	r4, r1, r2
 801491e:	e7cd      	b.n	80148bc <rint+0xa8>
 8014920:	080154d8 	.word	0x080154d8
 8014924:	000fffff 	.word	0x000fffff

08014928 <scalbn>:
 8014928:	b570      	push	{r4, r5, r6, lr}
 801492a:	ec55 4b10 	vmov	r4, r5, d0
 801492e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8014932:	4606      	mov	r6, r0
 8014934:	462b      	mov	r3, r5
 8014936:	b99a      	cbnz	r2, 8014960 <scalbn+0x38>
 8014938:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801493c:	4323      	orrs	r3, r4
 801493e:	d036      	beq.n	80149ae <scalbn+0x86>
 8014940:	4b39      	ldr	r3, [pc, #228]	; (8014a28 <scalbn+0x100>)
 8014942:	4629      	mov	r1, r5
 8014944:	ee10 0a10 	vmov	r0, s0
 8014948:	2200      	movs	r2, #0
 801494a:	f7eb fe6d 	bl	8000628 <__aeabi_dmul>
 801494e:	4b37      	ldr	r3, [pc, #220]	; (8014a2c <scalbn+0x104>)
 8014950:	429e      	cmp	r6, r3
 8014952:	4604      	mov	r4, r0
 8014954:	460d      	mov	r5, r1
 8014956:	da10      	bge.n	801497a <scalbn+0x52>
 8014958:	a32b      	add	r3, pc, #172	; (adr r3, 8014a08 <scalbn+0xe0>)
 801495a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801495e:	e03a      	b.n	80149d6 <scalbn+0xae>
 8014960:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014964:	428a      	cmp	r2, r1
 8014966:	d10c      	bne.n	8014982 <scalbn+0x5a>
 8014968:	ee10 2a10 	vmov	r2, s0
 801496c:	4620      	mov	r0, r4
 801496e:	4629      	mov	r1, r5
 8014970:	f7eb fca4 	bl	80002bc <__adddf3>
 8014974:	4604      	mov	r4, r0
 8014976:	460d      	mov	r5, r1
 8014978:	e019      	b.n	80149ae <scalbn+0x86>
 801497a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801497e:	460b      	mov	r3, r1
 8014980:	3a36      	subs	r2, #54	; 0x36
 8014982:	4432      	add	r2, r6
 8014984:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014988:	428a      	cmp	r2, r1
 801498a:	dd08      	ble.n	801499e <scalbn+0x76>
 801498c:	2d00      	cmp	r5, #0
 801498e:	a120      	add	r1, pc, #128	; (adr r1, 8014a10 <scalbn+0xe8>)
 8014990:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014994:	da1c      	bge.n	80149d0 <scalbn+0xa8>
 8014996:	a120      	add	r1, pc, #128	; (adr r1, 8014a18 <scalbn+0xf0>)
 8014998:	e9d1 0100 	ldrd	r0, r1, [r1]
 801499c:	e018      	b.n	80149d0 <scalbn+0xa8>
 801499e:	2a00      	cmp	r2, #0
 80149a0:	dd08      	ble.n	80149b4 <scalbn+0x8c>
 80149a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80149a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80149aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80149ae:	ec45 4b10 	vmov	d0, r4, r5
 80149b2:	bd70      	pop	{r4, r5, r6, pc}
 80149b4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80149b8:	da19      	bge.n	80149ee <scalbn+0xc6>
 80149ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 80149be:	429e      	cmp	r6, r3
 80149c0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80149c4:	dd0a      	ble.n	80149dc <scalbn+0xb4>
 80149c6:	a112      	add	r1, pc, #72	; (adr r1, 8014a10 <scalbn+0xe8>)
 80149c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d1e2      	bne.n	8014996 <scalbn+0x6e>
 80149d0:	a30f      	add	r3, pc, #60	; (adr r3, 8014a10 <scalbn+0xe8>)
 80149d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149d6:	f7eb fe27 	bl	8000628 <__aeabi_dmul>
 80149da:	e7cb      	b.n	8014974 <scalbn+0x4c>
 80149dc:	a10a      	add	r1, pc, #40	; (adr r1, 8014a08 <scalbn+0xe0>)
 80149de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d0b8      	beq.n	8014958 <scalbn+0x30>
 80149e6:	a10e      	add	r1, pc, #56	; (adr r1, 8014a20 <scalbn+0xf8>)
 80149e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80149ec:	e7b4      	b.n	8014958 <scalbn+0x30>
 80149ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80149f2:	3236      	adds	r2, #54	; 0x36
 80149f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80149f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80149fc:	4620      	mov	r0, r4
 80149fe:	4b0c      	ldr	r3, [pc, #48]	; (8014a30 <scalbn+0x108>)
 8014a00:	2200      	movs	r2, #0
 8014a02:	e7e8      	b.n	80149d6 <scalbn+0xae>
 8014a04:	f3af 8000 	nop.w
 8014a08:	c2f8f359 	.word	0xc2f8f359
 8014a0c:	01a56e1f 	.word	0x01a56e1f
 8014a10:	8800759c 	.word	0x8800759c
 8014a14:	7e37e43c 	.word	0x7e37e43c
 8014a18:	8800759c 	.word	0x8800759c
 8014a1c:	fe37e43c 	.word	0xfe37e43c
 8014a20:	c2f8f359 	.word	0xc2f8f359
 8014a24:	81a56e1f 	.word	0x81a56e1f
 8014a28:	43500000 	.word	0x43500000
 8014a2c:	ffff3cb0 	.word	0xffff3cb0
 8014a30:	3c900000 	.word	0x3c900000

08014a34 <_init>:
 8014a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a36:	bf00      	nop
 8014a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a3a:	bc08      	pop	{r3}
 8014a3c:	469e      	mov	lr, r3
 8014a3e:	4770      	bx	lr

08014a40 <_fini>:
 8014a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a42:	bf00      	nop
 8014a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a46:	bc08      	pop	{r3}
 8014a48:	469e      	mov	lr, r3
 8014a4a:	4770      	bx	lr
